// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 62 0 0
// SetBname ( Ovsyenko , Ovsyenko ) ;
   8: LD_INT 74
  10: PPUSH
  11: LD_STRING Ovsyenko
  13: PPUSH
  14: CALL_OW 500
// AnimateTrees ( true ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 573
// Randomize ;
  25: CALL_OW 10
// RandomizeAll ;
  29: CALL_OW 11
// InitGlobalVariables ;
  33: CALL 212 0 0
// InitRussian ;
  37: CALL 1037 0 0
// Action ;
  41: CALL 5010 0 0
// InitAmerican ;
  45: CALL 3987 0 0
// DebugMode ;
  49: CALL 175 0 0
// game_speed = 7 ;
  53: LD_ADDR_OWVAR 65
  57: PUSH
  58: LD_INT 7
  60: ST_TO_ADDR
// end ;
  61: END
// export DimitriCrew , YakotichCrew , BurlakCrew , SikorskiTeam , WestTerminalCrew , MainTerminalCrew , newAttackers , Attackers ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Dimitri , Ivan , Jegor , Grigori , Anton , RusSol ; export Sevi , SeviGuy1 , SeviGuy2 , SeviGuy3 ; export Burlak , Karamazov , Petrovova , Lipshchin , Gleb , Titov , Petrosyan , Dolgov ; export BurlakVeh , KaramazovVeh , BurlakCrewVeh1 , BurlakCrewVeh2 , BurlakCrewVeh3 , BurlakCrewVeh4 , BurlakCrewVeh5 , BurlakCrewVeh6 ; export Sikorski , Truman , Bobby , Cyrus , Gary , Lynch , McCreery , Walker , Jilian , Turner , Houten , NorthSold ; export Morozov , Platonov ; export BurlakTime ; export debug ; export mission_prefix ; export cutscene_ended , ovsyenko_captured , start_ended , lab_seen , lab_captured , rocket_researched , prediction_researched , buldozer_researched , flametank_saved ; function Init ; begin
  62: LD_INT 0
  64: PPUSH
// mission_prefix := 03_ ;
  65: LD_ADDR_EXP 65
  69: PUSH
  70: LD_STRING 03_
  72: ST_TO_ADDR
// cutscene_ended = false ;
  73: LD_ADDR_EXP 66
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// ovsyenko_captured = false ;
  81: LD_ADDR_EXP 67
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// start_ended = false ;
  89: LD_ADDR_EXP 68
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// rocket_researched = false ;
  97: LD_ADDR_EXP 71
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// buldozer_researched = false ;
 105: LD_ADDR_EXP 73
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// prediction_researched = false ;
 113: LD_ADDR_EXP 72
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// flametank_saved = false ;
 121: LD_ADDR_EXP 74
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// lab_seen = false ;
 129: LD_ADDR_EXP 69
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// lab_captured = false ;
 137: LD_ADDR_EXP 70
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// BurlakTime := [ 10 10$0 , 12 12$30 , 15 15$0 ] [ Difficulty ] ;
 145: LD_ADDR_EXP 63
 149: PUSH
 150: LD_INT 21000
 152: PUSH
 153: LD_INT 26250
 155: PUSH
 156: LD_INT 31500
 158: PUSH
 159: EMPTY
 160: LIST
 161: LIST
 162: LIST
 163: PUSH
 164: LD_OWVAR 67
 168: ARRAY
 169: ST_TO_ADDR
// end ;
 170: LD_VAR 0 1
 174: RET
// export function DebugMode ; begin
 175: LD_INT 0
 177: PPUSH
// if Debug = true then
 178: LD_EXP 64
 182: PUSH
 183: LD_INT 1
 185: EQUAL
 186: IFFALSE 207
// begin Difficulty := 3 ;
 188: LD_ADDR_OWVAR 67
 192: PUSH
 193: LD_INT 3
 195: ST_TO_ADDR
// TurnFogOff ( ) ;
 196: CALL_OW 537
// FogOff ( 3 ) ;
 200: LD_INT 3
 202: PPUSH
 203: CALL_OW 344
// end ; end ; end_of_file
 207: LD_VAR 0 1
 211: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
 212: LD_INT 0
 214: PPUSH
// ar_miner := 81 ;
 215: LD_ADDR_EXP 82
 219: PUSH
 220: LD_INT 81
 222: ST_TO_ADDR
// ar_crane := 88 ;
 223: LD_ADDR_EXP 81
 227: PUSH
 228: LD_INT 88
 230: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 231: LD_ADDR_EXP 76
 235: PUSH
 236: LD_INT 89
 238: ST_TO_ADDR
// us_hack := 99 ;
 239: LD_ADDR_EXP 77
 243: PUSH
 244: LD_INT 99
 246: ST_TO_ADDR
// us_artillery := 97 ;
 247: LD_ADDR_EXP 78
 251: PUSH
 252: LD_INT 97
 254: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 255: LD_ADDR_EXP 79
 259: PUSH
 260: LD_INT 91
 262: ST_TO_ADDR
// ar_mortar := 92 ;
 263: LD_ADDR_EXP 80
 267: PUSH
 268: LD_INT 92
 270: ST_TO_ADDR
// ru_flamethrower := 93 ;
 271: LD_ADDR_EXP 83
 275: PUSH
 276: LD_INT 93
 278: ST_TO_ADDR
// ru_radar := 98 ;
 279: LD_ADDR_EXP 75
 283: PUSH
 284: LD_INT 98
 286: ST_TO_ADDR
// tech_Artillery := 80 ;
 287: LD_ADDR_EXP 84
 291: PUSH
 292: LD_INT 80
 294: ST_TO_ADDR
// tech_RadMat := 81 ;
 295: LD_ADDR_EXP 85
 299: PUSH
 300: LD_INT 81
 302: ST_TO_ADDR
// tech_BasicTools := 82 ;
 303: LD_ADDR_EXP 86
 307: PUSH
 308: LD_INT 82
 310: ST_TO_ADDR
// tech_Cargo := 83 ;
 311: LD_ADDR_EXP 87
 315: PUSH
 316: LD_INT 83
 318: ST_TO_ADDR
// tech_Track := 84 ;
 319: LD_ADDR_EXP 88
 323: PUSH
 324: LD_INT 84
 326: ST_TO_ADDR
// tech_Crane := 85 ;
 327: LD_ADDR_EXP 89
 331: PUSH
 332: LD_INT 85
 334: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 335: LD_ADDR_EXP 90
 339: PUSH
 340: LD_INT 86
 342: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 343: LD_ADDR_EXP 91
 347: PUSH
 348: LD_INT 87
 350: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
 351: LD_ADDR_EXP 92
 355: PUSH
 356: LD_INT 88
 358: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
 359: LD_ADDR_EXP 93
 363: PUSH
 364: LD_INT 90
 366: ST_TO_ADDR
// class_mastodont := 31 ;
 367: LD_ADDR_EXP 94
 371: PUSH
 372: LD_INT 31
 374: ST_TO_ADDR
// class_horse := 21 ;
 375: LD_ADDR_EXP 95
 379: PUSH
 380: LD_INT 21
 382: ST_TO_ADDR
// end ; end_of_file
 383: LD_VAR 0 1
 387: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 388: LD_INT 0
 390: PPUSH
 391: PPUSH
 392: PPUSH
// uc_side := GetSide ( b ) ;
 393: LD_ADDR_OWVAR 20
 397: PUSH
 398: LD_VAR 0 2
 402: PPUSH
 403: CALL_OW 255
 407: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 408: LD_ADDR_OWVAR 21
 412: PUSH
 413: LD_VAR 0 2
 417: PPUSH
 418: CALL_OW 248
 422: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 423: LD_ADDR_VAR 0 5
 427: PUSH
 428: LD_VAR 0 2
 432: PPUSH
 433: CALL_OW 254
 437: PUSH
 438: LD_INT 3
 440: MINUS
 441: ST_TO_ADDR
// if dir < 0 then
 442: LD_VAR 0 5
 446: PUSH
 447: LD_INT 0
 449: LESS
 450: IFFALSE 466
// dir := 6 + dir ;
 452: LD_ADDR_VAR 0 5
 456: PUSH
 457: LD_INT 6
 459: PUSH
 460: LD_VAR 0 5
 464: PLUS
 465: ST_TO_ADDR
// un := CreateHuman ;
 466: LD_ADDR_VAR 0 4
 470: PUSH
 471: CALL_OW 44
 475: ST_TO_ADDR
// SetDir ( un , dir ) ;
 476: LD_VAR 0 4
 480: PPUSH
 481: LD_VAR 0 5
 485: PPUSH
 486: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 490: LD_VAR 0 4
 494: PPUSH
 495: LD_VAR 0 2
 499: PPUSH
 500: CALL_OW 52
// end ;
 504: LD_VAR 0 3
 508: RET
// export function GetClassFromStart ( ident ) ; var un ; begin
 509: LD_INT 0
 511: PPUSH
 512: PPUSH
// un := NewCharacter ( ident ) ;
 513: LD_ADDR_VAR 0 3
 517: PUSH
 518: LD_VAR 0 1
 522: PPUSH
 523: CALL_OW 25
 527: ST_TO_ADDR
// if not un then
 528: LD_VAR 0 3
 532: NOT
 533: IFFALSE 537
// exit ;
 535: GO 561
// result := GetClass ( un ) ;
 537: LD_ADDR_VAR 0 2
 541: PUSH
 542: LD_VAR 0 3
 546: PPUSH
 547: CALL_OW 257
 551: ST_TO_ADDR
// DestroyUnit ( un ) ;
 552: LD_VAR 0 3
 556: PPUSH
 557: CALL_OW 65
// end ;
 561: LD_VAR 0 2
 565: RET
// every 1 trigger IsSelected ( Kvantovy ) do
 566: LD_INT 160
 568: PPUSH
 569: CALL_OW 306
 573: IFFALSE 617
 575: GO 577
 577: DISABLE
// begin KvantovyExp ( [ 1 , 2 , 3 , 4 ] ) ;
 578: LD_INT 1
 580: PUSH
 581: LD_INT 2
 583: PUSH
 584: LD_INT 3
 586: PUSH
 587: LD_INT 4
 589: PUSH
 590: EMPTY
 591: LIST
 592: LIST
 593: LIST
 594: LIST
 595: PPUSH
 596: CALL 618 0 1
// Wait ( 0 0$05 ) ;
 600: LD_INT 175
 602: PPUSH
 603: CALL_OW 67
// Say ( Kvantovy , 3Kvantovy-Sikret ) ;
 607: LD_INT 160
 609: PPUSH
 610: LD_STRING 3Kvantovy-Sikret
 612: PPUSH
 613: CALL_OW 88
// end ;
 617: END
// export function KvantovyExp ( q ) ; var dec , q1 ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
 622: PPUSH
// dec = SelectiveQuery ( KvantovyQuery , q ) ;
 623: LD_ADDR_VAR 0 3
 627: PUSH
 628: LD_STRING KvantovyQuery
 630: PPUSH
 631: LD_VAR 0 1
 635: PPUSH
 636: CALL_OW 98
 640: ST_TO_ADDR
// case dec of 1 :
 641: LD_VAR 0 3
 645: PUSH
 646: LD_INT 1
 648: DOUBLE
 649: EQUAL
 650: IFTRUE 654
 652: GO 672
 654: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 2000 ) ;
 655: LD_EXP 9
 659: PPUSH
 660: LD_INT 1
 662: PPUSH
 663: LD_INT 2000
 665: PPUSH
 666: CALL_OW 591
// end ; 2 :
 670: GO 751
 672: LD_INT 2
 674: DOUBLE
 675: EQUAL
 676: IFTRUE 680
 678: GO 698
 680: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 2000 ) ;
 681: LD_EXP 9
 685: PPUSH
 686: LD_INT 2
 688: PPUSH
 689: LD_INT 2000
 691: PPUSH
 692: CALL_OW 591
// end ; 3 :
 696: GO 751
 698: LD_INT 3
 700: DOUBLE
 701: EQUAL
 702: IFTRUE 706
 704: GO 724
 706: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 2000 ) ;
 707: LD_EXP 9
 711: PPUSH
 712: LD_INT 3
 714: PPUSH
 715: LD_INT 2000
 717: PPUSH
 718: CALL_OW 591
// end ; 4 :
 722: GO 751
 724: LD_INT 4
 726: DOUBLE
 727: EQUAL
 728: IFTRUE 732
 730: GO 750
 732: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 2000 ) ;
 733: LD_EXP 9
 737: PPUSH
 738: LD_INT 4
 740: PPUSH
 741: LD_INT 2000
 743: PPUSH
 744: CALL_OW 591
// end ; end ;
 748: GO 751
 750: POP
// end ;
 751: LD_VAR 0 2
 755: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
 756: LD_EXP 9
 760: PPUSH
 761: CALL_OW 301
 765: IFFALSE 777
 767: GO 769
 769: DISABLE
// begin YouLost ( YakotichDead ) ;
 770: LD_STRING YakotichDead
 772: PPUSH
 773: CALL_OW 104
// end ;
 777: END
// every 0 0$1 trigger IsDead ( Mietek ) do
 778: LD_EXP 10
 782: PPUSH
 783: CALL_OW 301
 787: IFFALSE 799
 789: GO 791
 791: DISABLE
// begin YouLost ( MietekDead ) ;
 792: LD_STRING MietekDead
 794: PPUSH
 795: CALL_OW 104
// end ;
 799: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
 800: LD_VAR 0 1
 804: PUSH
 805: LD_INT 22
 807: PUSH
 808: LD_INT 3
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PUSH
 815: LD_INT 3
 817: PUSH
 818: LD_INT 23
 820: PUSH
 821: LD_INT 0
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: LD_INT 1
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: LIST
 846: PPUSH
 847: CALL_OW 69
 851: IN
 852: IFFALSE 861
// YouLost ( PeopleDead ) ;
 854: LD_STRING PeopleDead
 856: PPUSH
 857: CALL_OW 104
// end ;
 861: PPOPN 1
 863: END
// every 0 0$1 trigger IsDead ( Ovsyenko ) do
 864: LD_INT 74
 866: PPUSH
 867: CALL_OW 301
 871: IFFALSE 883
 873: GO 875
 875: DISABLE
// begin YouLost ( OvsyenkoDead ) ;
 876: LD_STRING OvsyenkoDead
 878: PPUSH
 879: CALL_OW 104
// end ;
 883: END
// every 1 trigger Cutscene_ended = false do
 884: LD_EXP 66
 888: PUSH
 889: LD_INT 0
 891: EQUAL
 892: IFFALSE 1036
 894: GO 896
 896: DISABLE
// begin SetLives ( [ Gary , Bobby , Cyrus , Lynch , Walker , McCreery , Jilian , Turner ] , 1000 ) ;
 897: LD_EXP 53
 901: PUSH
 902: LD_EXP 51
 906: PUSH
 907: LD_EXP 52
 911: PUSH
 912: LD_EXP 54
 916: PUSH
 917: LD_EXP 56
 921: PUSH
 922: LD_EXP 55
 926: PUSH
 927: LD_EXP 57
 931: PUSH
 932: LD_EXP 58
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: PPUSH
 947: LD_INT 1000
 949: PPUSH
 950: CALL_OW 234
// SetLives ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 1000 ) ;
 954: LD_INT 22
 956: PUSH
 957: LD_INT 3
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 21
 966: PUSH
 967: LD_INT 1
 969: PUSH
 970: EMPTY
 971: LIST
 972: LIST
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PPUSH
 978: CALL_OW 69
 982: PPUSH
 983: LD_INT 1000
 985: PPUSH
 986: CALL_OW 234
// SetLives ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , 1000 ) ;
 990: LD_INT 22
 992: PUSH
 993: LD_INT 3
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 21
1002: PUSH
1003: LD_INT 2
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PPUSH
1014: CALL_OW 69
1018: PPUSH
1019: LD_INT 1000
1021: PPUSH
1022: CALL_OW 234
// CenterOnUnits ( Yakotich ) ;
1026: LD_EXP 9
1030: PPUSH
1031: CALL_OW 85
// enable ;
1035: ENABLE
// end ; end_of_file
1036: END
// export function InitRussian ; begin
1037: LD_INT 0
1039: PPUSH
// Uc_Nation := 3 ;
1040: LD_ADDR_OWVAR 21
1044: PUSH
1045: LD_INT 3
1047: ST_TO_ADDR
// Uc_Side := 3 ;
1048: LD_ADDR_OWVAR 20
1052: PUSH
1053: LD_INT 3
1055: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 02_ ) ;
1056: LD_ADDR_EXP 9
1060: PUSH
1061: LD_STRING Yakotich
1063: PPUSH
1064: LD_INT 1
1066: PPUSH
1067: LD_STRING 02_
1069: PPUSH
1070: CALL 8011 0 3
1074: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 02_ ) ;
1075: LD_ADDR_EXP 10
1079: PUSH
1080: LD_STRING Mietek
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: LD_STRING 02_
1088: PPUSH
1089: CALL 8011 0 3
1093: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 02_ ) ;
1094: LD_ADDR_EXP 11
1098: PUSH
1099: LD_STRING Boris
1101: PPUSH
1102: LD_INT 1
1104: PPUSH
1105: LD_STRING 02_
1107: PPUSH
1108: CALL 8011 0 3
1112: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 02_ ) ;
1113: LD_ADDR_EXP 13
1117: PUSH
1118: LD_STRING Michail
1120: PPUSH
1121: LD_INT 1
1123: PPUSH
1124: LD_STRING 02_
1126: PPUSH
1127: CALL 8011 0 3
1131: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 02_ ) ;
1132: LD_ADDR_EXP 12
1136: PUSH
1137: LD_STRING Vasilij
1139: PPUSH
1140: LD_INT 1
1142: PPUSH
1143: LD_STRING 02_
1145: PPUSH
1146: CALL 8011 0 3
1150: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 02_ ) ;
1151: LD_ADDR_EXP 14
1155: PUSH
1156: LD_STRING Constantin
1158: PPUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_STRING 02_
1164: PPUSH
1165: CALL 8011 0 3
1169: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 02_ ) ;
1170: LD_ADDR_EXP 15
1174: PUSH
1175: LD_STRING Maksim
1177: PPUSH
1178: LD_INT 1
1180: PPUSH
1181: LD_STRING 02_
1183: PPUSH
1184: CALL 8011 0 3
1188: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 02_ ) ;
1189: LD_ADDR_EXP 16
1193: PUSH
1194: LD_STRING Fiodor
1196: PPUSH
1197: LD_INT 1
1199: PPUSH
1200: LD_STRING 02_
1202: PPUSH
1203: CALL 8011 0 3
1207: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 02_ ) ;
1208: LD_ADDR_EXP 19
1212: PUSH
1213: LD_STRING Aleksiej
1215: PPUSH
1216: LD_INT 1
1218: PPUSH
1219: LD_STRING 02_
1221: PPUSH
1222: CALL 8011 0 3
1226: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 02_ ) ;
1227: LD_ADDR_EXP 17
1231: PUSH
1232: LD_STRING Pavel
1234: PPUSH
1235: LD_INT 1
1237: PPUSH
1238: LD_STRING 02_
1240: PPUSH
1241: CALL 8011 0 3
1245: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 02_ ) ;
1246: LD_ADDR_EXP 18
1250: PUSH
1251: LD_STRING Zakhar
1253: PPUSH
1254: LD_INT 1
1256: PPUSH
1257: LD_STRING 02_
1259: PPUSH
1260: CALL 8011 0 3
1264: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 02_ ) ;
1265: LD_ADDR_EXP 20
1269: PUSH
1270: LD_STRING Aleksandr
1272: PPUSH
1273: LD_INT 1
1275: PPUSH
1276: LD_STRING 02_
1278: PPUSH
1279: CALL 8011 0 3
1283: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , true , 02_ ) ;
1284: LD_ADDR_EXP 22
1288: PUSH
1289: LD_STRING Stanislav
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: LD_STRING 02_
1297: PPUSH
1298: CALL 8011 0 3
1302: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , true , 02_ ) ;
1303: LD_ADDR_EXP 21
1307: PUSH
1308: LD_STRING Josif
1310: PPUSH
1311: LD_INT 1
1313: PPUSH
1314: LD_STRING 02_
1316: PPUSH
1317: CALL 8011 0 3
1321: ST_TO_ADDR
// SetClass ( [ Yakotich , Mietek , Constantin , Maksim , Fiodor , Aleksiej , Zakhar , Aleksandr , Josif ] , 1 ) ;
1322: LD_EXP 9
1326: PUSH
1327: LD_EXP 10
1331: PUSH
1332: LD_EXP 14
1336: PUSH
1337: LD_EXP 15
1341: PUSH
1342: LD_EXP 16
1346: PUSH
1347: LD_EXP 19
1351: PUSH
1352: LD_EXP 18
1356: PUSH
1357: LD_EXP 20
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: LIST
1376: LIST
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: CALL_OW 336
// SetClass ( Boris , 2 ) ;
1385: LD_EXP 11
1389: PPUSH
1390: LD_INT 2
1392: PPUSH
1393: CALL_OW 336
// SetClass ( [ Michail , Pavel ] , 3 ) ;
1397: LD_EXP 13
1401: PUSH
1402: LD_EXP 17
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PPUSH
1411: LD_INT 3
1413: PPUSH
1414: CALL_OW 336
// SetClass ( [ Stanislav , Vasilij ] , 4 ) ;
1418: LD_EXP 22
1422: PUSH
1423: LD_EXP 12
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PPUSH
1432: LD_INT 4
1434: PPUSH
1435: CALL_OW 336
// PlaceUnitArea ( Yakotich , EnterArea , false ) ;
1439: LD_EXP 9
1443: PPUSH
1444: LD_INT 1
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: CALL_OW 49
// PlaceUnitArea ( Mietek , EnterArea , false ) ;
1454: LD_EXP 10
1458: PPUSH
1459: LD_INT 1
1461: PPUSH
1462: LD_INT 0
1464: PPUSH
1465: CALL_OW 49
// PlaceUnitArea ( Boris , EnterArea , false ) ;
1469: LD_EXP 11
1473: PPUSH
1474: LD_INT 1
1476: PPUSH
1477: LD_INT 0
1479: PPUSH
1480: CALL_OW 49
// PlaceUnitArea ( Michail , EnterArea , false ) ;
1484: LD_EXP 13
1488: PPUSH
1489: LD_INT 1
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 49
// PlaceUnitArea ( Vasilij , EnterArea , false ) ;
1499: LD_EXP 12
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: LD_INT 0
1509: PPUSH
1510: CALL_OW 49
// PlaceUnitArea ( Constantin , EnterArea , false ) ;
1514: LD_EXP 14
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_INT 0
1524: PPUSH
1525: CALL_OW 49
// PlaceUnitArea ( Maksim , EnterArea , false ) ;
1529: LD_EXP 15
1533: PPUSH
1534: LD_INT 1
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
// PlaceUnitArea ( Fiodor , EnterArea , false ) ;
1544: LD_EXP 16
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 0
1554: PPUSH
1555: CALL_OW 49
// PlaceUnitArea ( Pavel , EnterArea , false ) ;
1559: LD_EXP 17
1563: PPUSH
1564: LD_INT 1
1566: PPUSH
1567: LD_INT 0
1569: PPUSH
1570: CALL_OW 49
// PlaceUnitArea ( Zakhar , EnterArea , false ) ;
1574: LD_EXP 18
1578: PPUSH
1579: LD_INT 1
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 49
// PlaceUnitArea ( Aleksandr , EnterArea , false ) ;
1589: LD_EXP 20
1593: PPUSH
1594: LD_INT 1
1596: PPUSH
1597: LD_INT 0
1599: PPUSH
1600: CALL_OW 49
// PlaceUnitArea ( Stanislav , EnterArea , false ) ;
1604: LD_EXP 22
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: LD_INT 0
1614: PPUSH
1615: CALL_OW 49
// PlaceUnitArea ( Josif , EnterArea , false ) ;
1619: LD_EXP 21
1623: PPUSH
1624: LD_INT 1
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: CALL_OW 49
// Dimitri := PrepareUnit ( Dimitri , false ,  ) ;
1634: LD_ADDR_EXP 23
1638: PUSH
1639: LD_STRING Dimitri
1641: PPUSH
1642: LD_INT 0
1644: PPUSH
1645: LD_STRING 
1647: PPUSH
1648: CALL 8011 0 3
1652: ST_TO_ADDR
// Ivan := PrepareUnit ( Ivan , false ,  ) ;
1653: LD_ADDR_EXP 24
1657: PUSH
1658: LD_STRING Ivan
1660: PPUSH
1661: LD_INT 0
1663: PPUSH
1664: LD_STRING 
1666: PPUSH
1667: CALL 8011 0 3
1671: ST_TO_ADDR
// Jegor := PrepareUnit ( Jegor , false ,  ) ;
1672: LD_ADDR_EXP 25
1676: PUSH
1677: LD_STRING Jegor
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: LD_STRING 
1685: PPUSH
1686: CALL 8011 0 3
1690: ST_TO_ADDR
// Grigori := PrepareUnit ( Grigori , false ,  ) ;
1691: LD_ADDR_EXP 26
1695: PUSH
1696: LD_STRING Grigori
1698: PPUSH
1699: LD_INT 0
1701: PPUSH
1702: LD_STRING 
1704: PPUSH
1705: CALL 8011 0 3
1709: ST_TO_ADDR
// Anton := PrepareUnit ( Anton , false ,  ) ;
1710: LD_ADDR_EXP 27
1714: PUSH
1715: LD_STRING Anton
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_STRING 
1723: PPUSH
1724: CALL 8011 0 3
1728: ST_TO_ADDR
// PlaceHumanInUnit ( Dimitri , Ovsyenko ) ;
1729: LD_EXP 23
1733: PPUSH
1734: LD_INT 74
1736: PPUSH
1737: CALL_OW 52
// PlaceHumanInUnit ( Anton , Ovsyenko ) ;
1741: LD_EXP 27
1745: PPUSH
1746: LD_INT 74
1748: PPUSH
1749: CALL_OW 52
// PlaceHumanInUnit ( Grigori , Ovsyenko ) ;
1753: LD_EXP 26
1757: PPUSH
1758: LD_INT 74
1760: PPUSH
1761: CALL_OW 52
// PlaceHumanInUnit ( Jegor , OB2 ) ;
1765: LD_EXP 25
1769: PPUSH
1770: LD_INT 79
1772: PPUSH
1773: CALL_OW 52
// PlaceHumanInUnit ( Ivan , OB3 ) ;
1777: LD_EXP 24
1781: PPUSH
1782: LD_INT 78
1784: PPUSH
1785: CALL_OW 52
// Uc_Side := 6 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 6
1796: ST_TO_ADDR
// PrepareSoldier ( 0 , 3 ) ;
1797: LD_INT 0
1799: PPUSH
1800: LD_INT 3
1802: PPUSH
1803: CALL_OW 381
// RusSol = CreateHuman ;
1807: LD_ADDR_EXP 28
1811: PUSH
1812: CALL_OW 44
1816: ST_TO_ADDR
// PlaceHumanInUnit ( RusSol , OB1 ) ;
1817: LD_EXP 28
1821: PPUSH
1822: LD_INT 77
1824: PPUSH
1825: CALL_OW 52
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
1829: LD_ADDR_EXP 61
1833: PUSH
1834: LD_STRING Morozov
1836: PPUSH
1837: LD_INT 0
1839: PPUSH
1840: LD_STRING 
1842: PPUSH
1843: CALL 8011 0 3
1847: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
1848: LD_ADDR_EXP 62
1852: PUSH
1853: LD_STRING Platonov
1855: PPUSH
1856: LD_INT 0
1858: PPUSH
1859: LD_STRING 
1861: PPUSH
1862: CALL 8011 0 3
1866: ST_TO_ADDR
// end ;
1867: LD_VAR 0 1
1871: RET
// export function InitBurlak ; begin
1872: LD_INT 0
1874: PPUSH
// Uc_side := 3 ;
1875: LD_ADDR_OWVAR 20
1879: PUSH
1880: LD_INT 3
1882: ST_TO_ADDR
// Uc_nation := 3 ;
1883: LD_ADDR_OWVAR 21
1887: PUSH
1888: LD_INT 3
1890: ST_TO_ADDR
// Uc_Direction := 0 ;
1891: LD_ADDR_OWVAR 24
1895: PUSH
1896: LD_INT 0
1898: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
1899: LD_ADDR_EXP 33
1903: PUSH
1904: LD_STRING Burlak
1906: PPUSH
1907: LD_INT 0
1909: PPUSH
1910: LD_STRING 
1912: PPUSH
1913: CALL 8011 0 3
1917: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
1918: LD_ADDR_EXP 38
1922: PUSH
1923: LD_STRING Titov
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: LD_STRING 
1931: PPUSH
1932: CALL 8011 0 3
1936: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrovova , false ,  ) ;
1937: LD_ADDR_EXP 35
1941: PUSH
1942: LD_STRING Petrovova
1944: PPUSH
1945: LD_INT 0
1947: PPUSH
1948: LD_STRING 
1950: PPUSH
1951: CALL 8011 0 3
1955: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
1956: LD_ADDR_EXP 36
1960: PUSH
1961: LD_STRING Lipshchin
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: LD_STRING 
1969: PPUSH
1970: CALL 8011 0 3
1974: ST_TO_ADDR
// Gleb := PrepareUnit ( Gleb , false ,  ) ;
1975: LD_ADDR_EXP 37
1979: PUSH
1980: LD_STRING Gleb
1982: PPUSH
1983: LD_INT 0
1985: PPUSH
1986: LD_STRING 
1988: PPUSH
1989: CALL 8011 0 3
1993: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , false ,  ) ;
1994: LD_ADDR_EXP 34
1998: PUSH
1999: LD_STRING Karamazov
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: LD_STRING 
2007: PPUSH
2008: CALL 8011 0 3
2012: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , false ,  ) ;
2013: LD_ADDR_EXP 39
2017: PUSH
2018: LD_STRING Petrosyan
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: LD_STRING 
2026: PPUSH
2027: CALL 8011 0 3
2031: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , false ,  ) ;
2032: LD_ADDR_EXP 40
2036: PUSH
2037: LD_STRING Dolgov
2039: PPUSH
2040: LD_INT 0
2042: PPUSH
2043: LD_STRING 
2045: PPUSH
2046: CALL 8011 0 3
2050: ST_TO_ADDR
// vc_chassis = 22 ;
2051: LD_ADDR_OWVAR 37
2055: PUSH
2056: LD_INT 22
2058: ST_TO_ADDR
// vc_control = 1 ;
2059: LD_ADDR_OWVAR 38
2063: PUSH
2064: LD_INT 1
2066: ST_TO_ADDR
// vc_engine = 1 ;
2067: LD_ADDR_OWVAR 39
2071: PUSH
2072: LD_INT 1
2074: ST_TO_ADDR
// vc_fuel_battery = rand ( 15 , 30 ) ;
2075: LD_ADDR_OWVAR 41
2079: PUSH
2080: LD_INT 15
2082: PPUSH
2083: LD_INT 30
2085: PPUSH
2086: CALL_OW 12
2090: ST_TO_ADDR
// vc_weapon = rand ( 42 , 44 ) ;
2091: LD_ADDR_OWVAR 40
2095: PUSH
2096: LD_INT 42
2098: PPUSH
2099: LD_INT 44
2101: PPUSH
2102: CALL_OW 12
2106: ST_TO_ADDR
// BurlakCrewVeh1 = CreateVehicle ;
2107: LD_ADDR_EXP 43
2111: PUSH
2112: CALL_OW 45
2116: ST_TO_ADDR
// BurlakCrewVeh2 = CreateVehicle ;
2117: LD_ADDR_EXP 44
2121: PUSH
2122: CALL_OW 45
2126: ST_TO_ADDR
// BurlakCrewVeh3 = CreateVehicle ;
2127: LD_ADDR_EXP 45
2131: PUSH
2132: CALL_OW 45
2136: ST_TO_ADDR
// BurlakCrewVeh4 = CreateVehicle ;
2137: LD_ADDR_EXP 46
2141: PUSH
2142: CALL_OW 45
2146: ST_TO_ADDR
// BurlakCrewVeh5 = CreateVehicle ;
2147: LD_ADDR_EXP 47
2151: PUSH
2152: CALL_OW 45
2156: ST_TO_ADDR
// BurlakCrewVeh6 = CreateVehicle ;
2157: LD_ADDR_EXP 48
2161: PUSH
2162: CALL_OW 45
2166: ST_TO_ADDR
// PlaceUnitArea ( [ BurlakCrewVeh1 , BurlakCrewVeh2 , BurlakCrewVeh3 , BurlakCrewVeh4 , BurlakCrewVeh5 , BurlakCrewVeh6 ] , BurlakArea , false ) ;
2167: LD_EXP 43
2171: PUSH
2172: LD_EXP 44
2176: PUSH
2177: LD_EXP 45
2181: PUSH
2182: LD_EXP 46
2186: PUSH
2187: LD_EXP 47
2191: PUSH
2192: LD_EXP 48
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PPUSH
2205: LD_INT 2
2207: PPUSH
2208: LD_INT 0
2210: PPUSH
2211: CALL_OW 49
// PlaceHumanInUnit ( Titov , BurlakCrewVeh1 ) ;
2215: LD_EXP 38
2219: PPUSH
2220: LD_EXP 43
2224: PPUSH
2225: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , BurlakCrewVeh2 ) ;
2229: LD_EXP 35
2233: PPUSH
2234: LD_EXP 44
2238: PPUSH
2239: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , BurlakCrewVeh3 ) ;
2243: LD_EXP 36
2247: PPUSH
2248: LD_EXP 45
2252: PPUSH
2253: CALL_OW 52
// PlaceHumanInUnit ( Gleb , BurlakCrewVeh4 ) ;
2257: LD_EXP 37
2261: PPUSH
2262: LD_EXP 46
2266: PPUSH
2267: CALL_OW 52
// PlaceHumanInUnit ( Dolgov , BurlakCrewVeh5 ) ;
2271: LD_EXP 40
2275: PPUSH
2276: LD_EXP 47
2280: PPUSH
2281: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , BurlakCrewVeh6 ) ;
2285: LD_EXP 39
2289: PPUSH
2290: LD_EXP 48
2294: PPUSH
2295: CALL_OW 52
// vc_chassis = 24 ;
2299: LD_ADDR_OWVAR 37
2303: PUSH
2304: LD_INT 24
2306: ST_TO_ADDR
// vc_weapon = 89 ;
2307: LD_ADDR_OWVAR 40
2311: PUSH
2312: LD_INT 89
2314: ST_TO_ADDR
// KaramazovVeh = CreateVehicle ;
2315: LD_ADDR_EXP 42
2319: PUSH
2320: CALL_OW 45
2324: ST_TO_ADDR
// AddCargo ( KaramazovVeh , mat_cans , 200 ) ;
2325: LD_EXP 42
2329: PPUSH
2330: LD_INT 1
2332: PPUSH
2333: LD_INT 200
2335: PPUSH
2336: CALL_OW 291
// PlaceUnitArea ( KaramazovVeh , BurlakArea , false ) ;
2340: LD_EXP 42
2344: PPUSH
2345: LD_INT 2
2347: PPUSH
2348: LD_INT 0
2350: PPUSH
2351: CALL_OW 49
// PlaceHumanInUnit ( Karamazov , KaramazovVeh ) ;
2355: LD_EXP 34
2359: PPUSH
2360: LD_EXP 42
2364: PPUSH
2365: CALL_OW 52
// Uc_Nation = 2 ;
2369: LD_ADDR_OWVAR 21
2373: PUSH
2374: LD_INT 2
2376: ST_TO_ADDR
// vc_chassis = 14 ;
2377: LD_ADDR_OWVAR 37
2381: PUSH
2382: LD_INT 14
2384: ST_TO_ADDR
// vc_weapon = 26 ;
2385: LD_ADDR_OWVAR 40
2389: PUSH
2390: LD_INT 26
2392: ST_TO_ADDR
// BurlakVeh = CreateVehicle ;
2393: LD_ADDR_EXP 41
2397: PUSH
2398: CALL_OW 45
2402: ST_TO_ADDR
// PlaceUnitArea ( BurlakVeh , BurlakArea , false ) ;
2403: LD_EXP 41
2407: PPUSH
2408: LD_INT 2
2410: PPUSH
2411: LD_INT 0
2413: PPUSH
2414: CALL_OW 49
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
2418: LD_EXP 33
2422: PPUSH
2423: LD_EXP 41
2427: PPUSH
2428: CALL_OW 52
// end ; end_of_file
2432: LD_VAR 0 1
2436: RET
// export function InitSikorskiTeam ; var i , j ; begin
2437: LD_INT 0
2439: PPUSH
2440: PPUSH
2441: PPUSH
// SikorskiTeam := SikorskiTeam ^ Sikorski ^ Gary ^ Bobby ^ Cyrus ^ Walker ^ Lynch ^ Turner ^ Jilian ^ McCreery ;
2442: LD_ADDR_EXP 4
2446: PUSH
2447: LD_EXP 4
2451: PUSH
2452: LD_EXP 49
2456: ADD
2457: PUSH
2458: LD_EXP 53
2462: ADD
2463: PUSH
2464: LD_EXP 51
2468: ADD
2469: PUSH
2470: LD_EXP 52
2474: ADD
2475: PUSH
2476: LD_EXP 56
2480: ADD
2481: PUSH
2482: LD_EXP 54
2486: ADD
2487: PUSH
2488: LD_EXP 58
2492: ADD
2493: PUSH
2494: LD_EXP 57
2498: ADD
2499: PUSH
2500: LD_EXP 55
2504: ADD
2505: ST_TO_ADDR
// Uc_side := 4 ;
2506: LD_ADDR_OWVAR 20
2510: PUSH
2511: LD_INT 4
2513: ST_TO_ADDR
// Uc_Nation := 1 ;
2514: LD_ADDR_OWVAR 21
2518: PUSH
2519: LD_INT 1
2521: ST_TO_ADDR
// Hc_Name := Jeremy Sikorski ;
2522: LD_ADDR_OWVAR 26
2526: PUSH
2527: LD_STRING Jeremy Sikorski
2529: ST_TO_ADDR
// Hc_Class := 1 ;
2530: LD_ADDR_OWVAR 28
2534: PUSH
2535: LD_INT 1
2537: ST_TO_ADDR
// Hc_Sex := 1 ;
2538: LD_ADDR_OWVAR 27
2542: PUSH
2543: LD_INT 1
2545: ST_TO_ADDR
// Hc_Basic_Skills := [ 0 , 0 , 0 , 0 ] ;
2546: LD_ADDR_OWVAR 30
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: LD_INT 0
2559: PUSH
2560: LD_INT 0
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: ST_TO_ADDR
// Hc_Skills := [ 6 , 3 , 4 , 1 ] ;
2569: LD_ADDR_OWVAR 31
2573: PUSH
2574: LD_INT 6
2576: PUSH
2577: LD_INT 3
2579: PUSH
2580: LD_INT 4
2582: PUSH
2583: LD_INT 1
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: ST_TO_ADDR
// Hc_Gallery := us ;
2592: LD_ADDR_OWVAR 33
2596: PUSH
2597: LD_STRING us
2599: ST_TO_ADDR
// Hc_Face_Number := 19 ;
2600: LD_ADDR_OWVAR 34
2604: PUSH
2605: LD_INT 19
2607: ST_TO_ADDR
// Sikorski := CreateHuman ;
2608: LD_ADDR_EXP 49
2612: PUSH
2613: CALL_OW 44
2617: ST_TO_ADDR
// Hc_Name := Kpt. Jack Truman ;
2618: LD_ADDR_OWVAR 26
2622: PUSH
2623: LD_STRING Kpt. Jack Truman
2625: ST_TO_ADDR
// Hc_Skills := [ 8 , 5 , 3 , 1 ] ;
2626: LD_ADDR_OWVAR 31
2630: PUSH
2631: LD_INT 8
2633: PUSH
2634: LD_INT 5
2636: PUSH
2637: LD_INT 3
2639: PUSH
2640: LD_INT 1
2642: PUSH
2643: EMPTY
2644: LIST
2645: LIST
2646: LIST
2647: LIST
2648: ST_TO_ADDR
// Hc_Face_Number := 26 ;
2649: LD_ADDR_OWVAR 34
2653: PUSH
2654: LD_INT 26
2656: ST_TO_ADDR
// Truman := CreateHuman ;
2657: LD_ADDR_EXP 50
2661: PUSH
2662: CALL_OW 44
2666: ST_TO_ADDR
// Hc_Name := Cyrus Parker ;
2667: LD_ADDR_OWVAR 26
2671: PUSH
2672: LD_STRING Cyrus Parker
2674: ST_TO_ADDR
// Hc_Skills := [ 6 , 3 , 2 , 2 ] ;
2675: LD_ADDR_OWVAR 31
2679: PUSH
2680: LD_INT 6
2682: PUSH
2683: LD_INT 3
2685: PUSH
2686: LD_INT 2
2688: PUSH
2689: LD_INT 2
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: LIST
2696: LIST
2697: ST_TO_ADDR
// Hc_Face_Number := 8 ;
2698: LD_ADDR_OWVAR 34
2702: PUSH
2703: LD_INT 8
2705: ST_TO_ADDR
// Cyrus := CreateHuman ;
2706: LD_ADDR_EXP 52
2710: PUSH
2711: CALL_OW 44
2715: ST_TO_ADDR
// Hc_Name := Bobby Brandon ;
2716: LD_ADDR_OWVAR 26
2720: PUSH
2721: LD_STRING Bobby Brandon
2723: ST_TO_ADDR
// Hc_Skills := [ 3 , 5 , 8 , 3 ] ;
2724: LD_ADDR_OWVAR 31
2728: PUSH
2729: LD_INT 3
2731: PUSH
2732: LD_INT 5
2734: PUSH
2735: LD_INT 8
2737: PUSH
2738: LD_INT 3
2740: PUSH
2741: EMPTY
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: ST_TO_ADDR
// Hc_Face_Number := 9 ;
2747: LD_ADDR_OWVAR 34
2751: PUSH
2752: LD_INT 9
2754: ST_TO_ADDR
// Bobby := CreateHuman ;
2755: LD_ADDR_EXP 51
2759: PUSH
2760: CALL_OW 44
2764: ST_TO_ADDR
// Hc_Name := Gary Grant ;
2765: LD_ADDR_OWVAR 26
2769: PUSH
2770: LD_STRING Gary Grant
2772: ST_TO_ADDR
// Hc_Skills := [ 7 , 3 , 1 , 1 ] ;
2773: LD_ADDR_OWVAR 31
2777: PUSH
2778: LD_INT 7
2780: PUSH
2781: LD_INT 3
2783: PUSH
2784: LD_INT 1
2786: PUSH
2787: LD_INT 1
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: ST_TO_ADDR
// Hc_Face_Number := 20 ;
2796: LD_ADDR_OWVAR 34
2800: PUSH
2801: LD_INT 20
2803: ST_TO_ADDR
// Gary := CreateHuman ;
2804: LD_ADDR_EXP 53
2808: PUSH
2809: CALL_OW 44
2813: ST_TO_ADDR
// Hc_Name := Gary Grant ;
2814: LD_ADDR_OWVAR 26
2818: PUSH
2819: LD_STRING Gary Grant
2821: ST_TO_ADDR
// Hc_Skills := [ 7 , 3 , 1 , 1 ] ;
2822: LD_ADDR_OWVAR 31
2826: PUSH
2827: LD_INT 7
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 1
2835: PUSH
2836: LD_INT 1
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: LIST
2843: LIST
2844: ST_TO_ADDR
// Hc_Face_Number := 20 ;
2845: LD_ADDR_OWVAR 34
2849: PUSH
2850: LD_INT 20
2852: ST_TO_ADDR
// Gary := CreateHuman ;
2853: LD_ADDR_EXP 53
2857: PUSH
2858: CALL_OW 44
2862: ST_TO_ADDR
// Hc_Name := Henry Lynch ;
2863: LD_ADDR_OWVAR 26
2867: PUSH
2868: LD_STRING Henry Lynch
2870: ST_TO_ADDR
// Hc_Skills := [ 6 , 2 , 2 , 3 ] ;
2871: LD_ADDR_OWVAR 31
2875: PUSH
2876: LD_INT 6
2878: PUSH
2879: LD_INT 2
2881: PUSH
2882: LD_INT 2
2884: PUSH
2885: LD_INT 3
2887: PUSH
2888: EMPTY
2889: LIST
2890: LIST
2891: LIST
2892: LIST
2893: ST_TO_ADDR
// Hc_Gallery := SecondCharsGal ;
2894: LD_ADDR_OWVAR 33
2898: PUSH
2899: LD_STRING SecondCharsGal
2901: ST_TO_ADDR
// Hc_Face_Number := 49 ;
2902: LD_ADDR_OWVAR 34
2906: PUSH
2907: LD_INT 49
2909: ST_TO_ADDR
// Lynch := CreateHuman ;
2910: LD_ADDR_EXP 54
2914: PUSH
2915: CALL_OW 44
2919: ST_TO_ADDR
// Hc_Name := Mike Turner ;
2920: LD_ADDR_OWVAR 26
2924: PUSH
2925: LD_STRING Mike Turner
2927: ST_TO_ADDR
// Hc_Skills := [ 3 , 6 , 3 , 2 ] ;
2928: LD_ADDR_OWVAR 31
2932: PUSH
2933: LD_INT 3
2935: PUSH
2936: LD_INT 6
2938: PUSH
2939: LD_INT 3
2941: PUSH
2942: LD_INT 2
2944: PUSH
2945: EMPTY
2946: LIST
2947: LIST
2948: LIST
2949: LIST
2950: ST_TO_ADDR
// Hc_Face_Number := 62 ;
2951: LD_ADDR_OWVAR 34
2955: PUSH
2956: LD_INT 62
2958: ST_TO_ADDR
// Turner := CreateHuman ;
2959: LD_ADDR_EXP 58
2963: PUSH
2964: CALL_OW 44
2968: ST_TO_ADDR
// Hc_Name := Hallie Jilian ;
2969: LD_ADDR_OWVAR 26
2973: PUSH
2974: LD_STRING Hallie Jilian
2976: ST_TO_ADDR
// Hc_Skills := [ 2 , 5 , 2 , 2 ] ;
2977: LD_ADDR_OWVAR 31
2981: PUSH
2982: LD_INT 2
2984: PUSH
2985: LD_INT 5
2987: PUSH
2988: LD_INT 2
2990: PUSH
2991: LD_INT 2
2993: PUSH
2994: EMPTY
2995: LIST
2996: LIST
2997: LIST
2998: LIST
2999: ST_TO_ADDR
// Hc_Sex := 2 ;
3000: LD_ADDR_OWVAR 27
3004: PUSH
3005: LD_INT 2
3007: ST_TO_ADDR
// Hc_Face_Number := 39 ;
3008: LD_ADDR_OWVAR 34
3012: PUSH
3013: LD_INT 39
3015: ST_TO_ADDR
// Jilian := CreateHuman ;
3016: LD_ADDR_EXP 57
3020: PUSH
3021: CALL_OW 44
3025: ST_TO_ADDR
// Hc_Name := Michael Walker ;
3026: LD_ADDR_OWVAR 26
3030: PUSH
3031: LD_STRING Michael Walker
3033: ST_TO_ADDR
// Hc_Skills := [ 2 , 2 , 3 , 5 ] ;
3034: LD_ADDR_OWVAR 31
3038: PUSH
3039: LD_INT 2
3041: PUSH
3042: LD_INT 2
3044: PUSH
3045: LD_INT 3
3047: PUSH
3048: LD_INT 5
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: ST_TO_ADDR
// Hc_Sex := 1 ;
3057: LD_ADDR_OWVAR 27
3061: PUSH
3062: LD_INT 1
3064: ST_TO_ADDR
// Hc_Class := 4 ;
3065: LD_ADDR_OWVAR 28
3069: PUSH
3070: LD_INT 4
3072: ST_TO_ADDR
// Hc_Face_Number := 48 ;
3073: LD_ADDR_OWVAR 34
3077: PUSH
3078: LD_INT 48
3080: ST_TO_ADDR
// Walker := CreateHuman ;
3081: LD_ADDR_EXP 56
3085: PUSH
3086: CALL_OW 44
3090: ST_TO_ADDR
// Hc_Name := Peter McCreery ;
3091: LD_ADDR_OWVAR 26
3095: PUSH
3096: LD_STRING Peter McCreery
3098: ST_TO_ADDR
// Hc_Skills := [ 1 , 0 , 3 , 6 ] ;
3099: LD_ADDR_OWVAR 31
3103: PUSH
3104: LD_INT 1
3106: PUSH
3107: LD_INT 0
3109: PUSH
3110: LD_INT 3
3112: PUSH
3113: LD_INT 6
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: ST_TO_ADDR
// Hc_Face_Number := 58 ;
3122: LD_ADDR_OWVAR 34
3126: PUSH
3127: LD_INT 58
3129: ST_TO_ADDR
// McCreery := CreateHuman ;
3130: LD_ADDR_EXP 55
3134: PUSH
3135: CALL_OW 44
3139: ST_TO_ADDR
// SikorskiTeam := SikorskiTeam ^ Sikorski ^ Gary ^ Bobby ^ Cyrus ^ Walker ^ Lynch ^ Turner ^ Jilian ^ McCreery ;
3140: LD_ADDR_EXP 4
3144: PUSH
3145: LD_EXP 4
3149: PUSH
3150: LD_EXP 49
3154: ADD
3155: PUSH
3156: LD_EXP 53
3160: ADD
3161: PUSH
3162: LD_EXP 51
3166: ADD
3167: PUSH
3168: LD_EXP 52
3172: ADD
3173: PUSH
3174: LD_EXP 56
3178: ADD
3179: PUSH
3180: LD_EXP 54
3184: ADD
3185: PUSH
3186: LD_EXP 58
3190: ADD
3191: PUSH
3192: LD_EXP 57
3196: ADD
3197: PUSH
3198: LD_EXP 55
3202: ADD
3203: ST_TO_ADDR
// PlaceUnitArea ( Sikorski , SikorskiArea , false ) ;
3204: LD_EXP 49
3208: PPUSH
3209: LD_INT 9
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: CALL_OW 49
// PlaceUnitArea ( Cyrus , SikorskiArea , false ) ;
3219: LD_EXP 52
3223: PPUSH
3224: LD_INT 9
3226: PPUSH
3227: LD_INT 0
3229: PPUSH
3230: CALL_OW 49
// PlaceUnitArea ( Bobby , SikorskiArea , false ) ;
3234: LD_EXP 51
3238: PPUSH
3239: LD_INT 9
3241: PPUSH
3242: LD_INT 0
3244: PPUSH
3245: CALL_OW 49
// PlaceUnitArea ( Gary , SikorskiArea , false ) ;
3249: LD_EXP 53
3253: PPUSH
3254: LD_INT 9
3256: PPUSH
3257: LD_INT 0
3259: PPUSH
3260: CALL_OW 49
// PlaceUnitArea ( Lynch , SikorskiArea , false ) ;
3264: LD_EXP 54
3268: PPUSH
3269: LD_INT 9
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: CALL_OW 49
// PlaceUnitArea ( Turner , SikorskiArea , false ) ;
3279: LD_EXP 58
3283: PPUSH
3284: LD_INT 9
3286: PPUSH
3287: LD_INT 0
3289: PPUSH
3290: CALL_OW 49
// PlaceUnitArea ( Jilian , SikorskiArea , false ) ;
3294: LD_EXP 57
3298: PPUSH
3299: LD_INT 9
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 49
// PlaceUnitArea ( Walker , SikorskiArea , false ) ;
3309: LD_EXP 56
3313: PPUSH
3314: LD_INT 9
3316: PPUSH
3317: LD_INT 0
3319: PPUSH
3320: CALL_OW 49
// PlaceUnitArea ( McCreery , SikorskiArea , false ) ;
3324: LD_EXP 55
3328: PPUSH
3329: LD_INT 9
3331: PPUSH
3332: LD_INT 0
3334: PPUSH
3335: CALL_OW 49
// PrepareSoldier ( rand ( 0 , 1 ) , 10 ) ;
3339: LD_INT 0
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: CALL_OW 12
3349: PPUSH
3350: LD_INT 10
3352: PPUSH
3353: CALL_OW 381
// NorthSold := CreateHuman ;
3357: LD_ADDR_EXP 60
3361: PUSH
3362: CALL_OW 44
3366: ST_TO_ADDR
// PlaceHumanInUnit ( NorthSold , AmB4 ) ;
3367: LD_EXP 60
3371: PPUSH
3372: LD_INT 104
3374: PPUSH
3375: CALL_OW 52
// end ;
3379: LD_VAR 0 1
3383: RET
// every 0 0$1 trigger IsInUnit ( Gary ) and start_ended = true do
3384: LD_EXP 53
3388: PPUSH
3389: CALL_OW 310
3393: PUSH
3394: LD_EXP 68
3398: PUSH
3399: LD_INT 1
3401: EQUAL
3402: AND
3403: IFFALSE 3433
3405: GO 3407
3407: DISABLE
// begin AddResourceType ( GetBase ( Ovsyenko ) , mat_cans , 70 ) ;
3408: LD_INT 74
3410: PPUSH
3411: CALL_OW 274
3415: PPUSH
3416: LD_INT 1
3418: PPUSH
3419: LD_INT 70
3421: PPUSH
3422: CALL_OW 276
// ComUpgrade ( Ovsyenko ) ;
3426: LD_INT 74
3428: PPUSH
3429: CALL_OW 146
// end ;
3433: END
// export function InitTerminal ; var i , y , turrety , lab , zbrojka ; begin
3434: LD_INT 0
3436: PPUSH
3437: PPUSH
3438: PPUSH
3439: PPUSH
3440: PPUSH
3441: PPUSH
// Hc_Gallery :=  ;
3442: LD_ADDR_OWVAR 33
3446: PUSH
3447: LD_STRING 
3449: ST_TO_ADDR
// Hc_Name :=  ;
3450: LD_ADDR_OWVAR 26
3454: PUSH
3455: LD_STRING 
3457: ST_TO_ADDR
// MainTerminalCrew := [ ] ;
3458: LD_ADDR_EXP 6
3462: PUSH
3463: EMPTY
3464: ST_TO_ADDR
// uc_side := 1 ;
3465: LD_ADDR_OWVAR 20
3469: PUSH
3470: LD_INT 1
3472: ST_TO_ADDR
// uc_nation := 1 ;
3473: LD_ADDR_OWVAR 21
3477: PUSH
3478: LD_INT 1
3480: ST_TO_ADDR
// for i = 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
3481: LD_ADDR_VAR 0 2
3485: PUSH
3486: DOUBLE
3487: LD_INT 1
3489: DEC
3490: ST_TO_ADDR
3491: LD_INT 8
3493: PUSH
3494: LD_INT 9
3496: PUSH
3497: LD_INT 10
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: PUSH
3505: LD_OWVAR 67
3509: ARRAY
3510: PUSH
3511: FOR_TO
3512: IFFALSE 3567
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
3514: LD_INT 0
3516: PPUSH
3517: LD_INT 1
3519: PPUSH
3520: CALL_OW 12
3524: PPUSH
3525: LD_INT 2
3527: PUSH
3528: LD_INT 3
3530: PUSH
3531: LD_INT 6
3533: PUSH
3534: EMPTY
3535: LIST
3536: LIST
3537: LIST
3538: PUSH
3539: LD_OWVAR 67
3543: ARRAY
3544: PPUSH
3545: CALL_OW 381
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
3549: LD_ADDR_EXP 5
3553: PUSH
3554: LD_EXP 5
3558: PUSH
3559: CALL_OW 44
3563: ADD
3564: ST_TO_ADDR
// end ;
3565: GO 3511
3567: POP
3568: POP
// for i = 1 to 1 do
3569: LD_ADDR_VAR 0 2
3573: PUSH
3574: DOUBLE
3575: LD_INT 1
3577: DEC
3578: ST_TO_ADDR
3579: LD_INT 1
3581: PUSH
3582: FOR_TO
3583: IFFALSE 3638
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
3585: LD_INT 0
3587: PPUSH
3588: LD_INT 1
3590: PPUSH
3591: CALL_OW 12
3595: PPUSH
3596: LD_INT 2
3598: PUSH
3599: LD_INT 3
3601: PUSH
3602: LD_INT 6
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: PUSH
3610: LD_OWVAR 67
3614: ARRAY
3615: PPUSH
3616: CALL_OW 382
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
3620: LD_ADDR_EXP 5
3624: PUSH
3625: LD_EXP 5
3629: PUSH
3630: CALL_OW 44
3634: ADD
3635: ST_TO_ADDR
// end ;
3636: GO 3582
3638: POP
3639: POP
// for i = 1 to 2 do
3640: LD_ADDR_VAR 0 2
3644: PUSH
3645: DOUBLE
3646: LD_INT 1
3648: DEC
3649: ST_TO_ADDR
3650: LD_INT 2
3652: PUSH
3653: FOR_TO
3654: IFFALSE 3709
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
3656: LD_INT 0
3658: PPUSH
3659: LD_INT 1
3661: PPUSH
3662: CALL_OW 12
3666: PPUSH
3667: LD_INT 2
3669: PUSH
3670: LD_INT 3
3672: PUSH
3673: LD_INT 6
3675: PUSH
3676: EMPTY
3677: LIST
3678: LIST
3679: LIST
3680: PUSH
3681: LD_OWVAR 67
3685: ARRAY
3686: PPUSH
3687: CALL_OW 384
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
3691: LD_ADDR_EXP 5
3695: PUSH
3696: LD_EXP 5
3700: PUSH
3701: CALL_OW 44
3705: ADD
3706: ST_TO_ADDR
// end ;
3707: GO 3653
3709: POP
3710: POP
// turrety := FilterUnitsInArea ( WestTerminalArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
3711: LD_ADDR_VAR 0 4
3715: PUSH
3716: LD_INT 17
3718: PPUSH
3719: LD_INT 2
3721: PUSH
3722: LD_INT 30
3724: PUSH
3725: LD_INT 31
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: PUSH
3732: LD_INT 30
3734: PUSH
3735: LD_INT 32
3737: PUSH
3738: EMPTY
3739: LIST
3740: LIST
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: PPUSH
3747: CALL_OW 70
3751: ST_TO_ADDR
// lab := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_lab_full ] ] ) ;
3752: LD_ADDR_VAR 0 5
3756: PUSH
3757: LD_INT 17
3759: PPUSH
3760: LD_INT 30
3762: PUSH
3763: LD_INT 8
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: PUSH
3770: EMPTY
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_barracks ] ] ) ;
3778: LD_ADDR_VAR 0 6
3782: PUSH
3783: LD_INT 17
3785: PPUSH
3786: LD_INT 30
3788: PUSH
3789: LD_INT 5
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: PUSH
3796: EMPTY
3797: LIST
3798: PPUSH
3799: CALL_OW 70
3803: ST_TO_ADDR
// y := 1 ;
3804: LD_ADDR_VAR 0 3
3808: PUSH
3809: LD_INT 1
3811: ST_TO_ADDR
// for i in WestTerminalCrew do
3812: LD_ADDR_VAR 0 2
3816: PUSH
3817: LD_EXP 5
3821: PUSH
3822: FOR_IN
3823: IFFALSE 3980
// begin PlaceUnitArea ( i , TerminalPersonel , false ) ;
3825: LD_VAR 0 2
3829: PPUSH
3830: LD_INT 15
3832: PPUSH
3833: LD_INT 0
3835: PPUSH
3836: CALL_OW 49
// case GetClass ( i ) of 1 :
3840: LD_VAR 0 2
3844: PPUSH
3845: CALL_OW 257
3849: PUSH
3850: LD_INT 1
3852: DOUBLE
3853: EQUAL
3854: IFTRUE 3858
3856: GO 3925
3858: POP
// begin if y > 6 then
3859: LD_VAR 0 3
3863: PUSH
3864: LD_INT 6
3866: GREATER
3867: IFFALSE 3891
// ComEnterUnit ( i , turrety [ y ] ) else
3869: LD_VAR 0 2
3873: PPUSH
3874: LD_VAR 0 4
3878: PUSH
3879: LD_VAR 0 3
3883: ARRAY
3884: PPUSH
3885: CALL_OW 120
3889: GO 3909
// ComEnterUnit ( i , zbrojka [ 1 ] ) ;
3891: LD_VAR 0 2
3895: PPUSH
3896: LD_VAR 0 6
3900: PUSH
3901: LD_INT 1
3903: ARRAY
3904: PPUSH
3905: CALL_OW 120
// y = y + 1 ;
3909: LD_ADDR_VAR 0 3
3913: PUSH
3914: LD_VAR 0 3
3918: PUSH
3919: LD_INT 1
3921: PLUS
3922: ST_TO_ADDR
// end ; 2 :
3923: GO 3978
3925: LD_INT 2
3927: DOUBLE
3928: EQUAL
3929: IFTRUE 3933
3931: GO 3948
3933: POP
// ComEnterUnit ( i , MainTerminal ) ; 4 :
3934: LD_VAR 0 2
3938: PPUSH
3939: LD_INT 88
3941: PPUSH
3942: CALL_OW 120
3946: GO 3978
3948: LD_INT 4
3950: DOUBLE
3951: EQUAL
3952: IFTRUE 3956
3954: GO 3977
3956: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3957: LD_VAR 0 2
3961: PPUSH
3962: LD_VAR 0 5
3966: PUSH
3967: LD_INT 1
3969: ARRAY
3970: PPUSH
3971: CALL_OW 120
3975: GO 3978
3977: POP
// end ;
3978: GO 3822
3980: POP
3981: POP
// end ;
3982: LD_VAR 0 1
3986: RET
// export function InitAmerican ; var i , z , y , turrety , fabryka , Wieza , lab , zbrojka ; begin
3987: LD_INT 0
3989: PPUSH
3990: PPUSH
3991: PPUSH
3992: PPUSH
3993: PPUSH
3994: PPUSH
3995: PPUSH
3996: PPUSH
3997: PPUSH
// Hc_Gallery :=  ;
3998: LD_ADDR_OWVAR 33
4002: PUSH
4003: LD_STRING 
4005: ST_TO_ADDR
// Hc_Name :=  ;
4006: LD_ADDR_OWVAR 26
4010: PUSH
4011: LD_STRING 
4013: ST_TO_ADDR
// WestTerminalCrew := [ ] ;
4014: LD_ADDR_EXP 5
4018: PUSH
4019: EMPTY
4020: ST_TO_ADDR
// uc_side := 1 ;
4021: LD_ADDR_OWVAR 20
4025: PUSH
4026: LD_INT 1
4028: ST_TO_ADDR
// uc_nation := 1 ;
4029: LD_ADDR_OWVAR 21
4033: PUSH
4034: LD_INT 1
4036: ST_TO_ADDR
// for i = 1 to [ 10 , 11 , 12 ] [ Difficulty ] do
4037: LD_ADDR_VAR 0 2
4041: PUSH
4042: DOUBLE
4043: LD_INT 1
4045: DEC
4046: ST_TO_ADDR
4047: LD_INT 10
4049: PUSH
4050: LD_INT 11
4052: PUSH
4053: LD_INT 12
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: PUSH
4061: LD_OWVAR 67
4065: ARRAY
4066: PUSH
4067: FOR_TO
4068: IFFALSE 4123
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4070: LD_INT 0
4072: PPUSH
4073: LD_INT 1
4075: PPUSH
4076: CALL_OW 12
4080: PPUSH
4081: LD_INT 2
4083: PUSH
4084: LD_INT 3
4086: PUSH
4087: LD_INT 6
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: PUSH
4095: LD_OWVAR 67
4099: ARRAY
4100: PPUSH
4101: CALL_OW 381
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4105: LD_ADDR_EXP 5
4109: PUSH
4110: LD_EXP 5
4114: PUSH
4115: CALL_OW 44
4119: ADD
4120: ST_TO_ADDR
// end ;
4121: GO 4067
4123: POP
4124: POP
// for i = 1 to 2 do
4125: LD_ADDR_VAR 0 2
4129: PUSH
4130: DOUBLE
4131: LD_INT 1
4133: DEC
4134: ST_TO_ADDR
4135: LD_INT 2
4137: PUSH
4138: FOR_TO
4139: IFFALSE 4194
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4141: LD_INT 0
4143: PPUSH
4144: LD_INT 1
4146: PPUSH
4147: CALL_OW 12
4151: PPUSH
4152: LD_INT 2
4154: PUSH
4155: LD_INT 3
4157: PUSH
4158: LD_INT 6
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: LIST
4165: PUSH
4166: LD_OWVAR 67
4170: ARRAY
4171: PPUSH
4172: CALL_OW 382
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4176: LD_ADDR_EXP 5
4180: PUSH
4181: LD_EXP 5
4185: PUSH
4186: CALL_OW 44
4190: ADD
4191: ST_TO_ADDR
// end ;
4192: GO 4138
4194: POP
4195: POP
// for i = 1 to 6 do
4196: LD_ADDR_VAR 0 2
4200: PUSH
4201: DOUBLE
4202: LD_INT 1
4204: DEC
4205: ST_TO_ADDR
4206: LD_INT 6
4208: PUSH
4209: FOR_TO
4210: IFFALSE 4265
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4212: LD_INT 0
4214: PPUSH
4215: LD_INT 1
4217: PPUSH
4218: CALL_OW 12
4222: PPUSH
4223: LD_INT 2
4225: PUSH
4226: LD_INT 3
4228: PUSH
4229: LD_INT 6
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: LIST
4236: PUSH
4237: LD_OWVAR 67
4241: ARRAY
4242: PPUSH
4243: CALL_OW 383
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4247: LD_ADDR_EXP 5
4251: PUSH
4252: LD_EXP 5
4256: PUSH
4257: CALL_OW 44
4261: ADD
4262: ST_TO_ADDR
// end ;
4263: GO 4209
4265: POP
4266: POP
// for i = 1 to 2 do
4267: LD_ADDR_VAR 0 2
4271: PUSH
4272: DOUBLE
4273: LD_INT 1
4275: DEC
4276: ST_TO_ADDR
4277: LD_INT 2
4279: PUSH
4280: FOR_TO
4281: IFFALSE 4336
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4283: LD_INT 0
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: CALL_OW 12
4293: PPUSH
4294: LD_INT 2
4296: PUSH
4297: LD_INT 3
4299: PUSH
4300: LD_INT 6
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: PUSH
4308: LD_OWVAR 67
4312: ARRAY
4313: PPUSH
4314: CALL_OW 384
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4318: LD_ADDR_EXP 5
4322: PUSH
4323: LD_EXP 5
4327: PUSH
4328: CALL_OW 44
4332: ADD
4333: ST_TO_ADDR
// end ;
4334: GO 4280
4336: POP
4337: POP
// turrety := FilterUnitsInArea ( WestTerminalArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
4338: LD_ADDR_VAR 0 5
4342: PUSH
4343: LD_INT 17
4345: PPUSH
4346: LD_INT 2
4348: PUSH
4349: LD_INT 30
4351: PUSH
4352: LD_INT 31
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: PUSH
4359: LD_INT 30
4361: PUSH
4362: LD_INT 32
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: LIST
4373: PPUSH
4374: CALL_OW 70
4378: ST_TO_ADDR
// lab := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_lab_full ] ] ) ;
4379: LD_ADDR_VAR 0 8
4383: PUSH
4384: LD_INT 17
4386: PPUSH
4387: LD_INT 30
4389: PUSH
4390: LD_INT 8
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PUSH
4397: EMPTY
4398: LIST
4399: PPUSH
4400: CALL_OW 70
4404: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_factory ] ] ) ;
4405: LD_ADDR_VAR 0 6
4409: PUSH
4410: LD_INT 17
4412: PPUSH
4413: LD_INT 30
4415: PUSH
4416: LD_INT 3
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: EMPTY
4424: LIST
4425: PPUSH
4426: CALL_OW 70
4430: ST_TO_ADDR
// wieza := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_control_tower ] ] ) ;
4431: LD_ADDR_VAR 0 7
4435: PUSH
4436: LD_INT 17
4438: PPUSH
4439: LD_INT 30
4441: PUSH
4442: LD_INT 36
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: PUSH
4449: EMPTY
4450: LIST
4451: PPUSH
4452: CALL_OW 70
4456: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_barracks ] ] ) ;
4457: LD_ADDR_VAR 0 9
4461: PUSH
4462: LD_INT 17
4464: PPUSH
4465: LD_INT 30
4467: PUSH
4468: LD_INT 5
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: PPUSH
4478: CALL_OW 70
4482: ST_TO_ADDR
// y := 1 ;
4483: LD_ADDR_VAR 0 4
4487: PUSH
4488: LD_INT 1
4490: ST_TO_ADDR
// z := 1 ;
4491: LD_ADDR_VAR 0 3
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// for i in WestTerminalCrew do
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: LD_EXP 5
4508: PUSH
4509: FOR_IN
4510: IFFALSE 4736
// begin PlaceUnitArea ( i , TerminalPersonel , false ) ;
4512: LD_VAR 0 2
4516: PPUSH
4517: LD_INT 15
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL_OW 49
// case GetClass ( i ) of 1 :
4527: LD_VAR 0 2
4531: PPUSH
4532: CALL_OW 257
4536: PUSH
4537: LD_INT 1
4539: DOUBLE
4540: EQUAL
4541: IFTRUE 4545
4543: GO 4612
4545: POP
// begin if y > 8 then
4546: LD_VAR 0 4
4550: PUSH
4551: LD_INT 8
4553: GREATER
4554: IFFALSE 4578
// ComEnterUnit ( i , turrety [ y ] ) else
4556: LD_VAR 0 2
4560: PPUSH
4561: LD_VAR 0 5
4565: PUSH
4566: LD_VAR 0 4
4570: ARRAY
4571: PPUSH
4572: CALL_OW 120
4576: GO 4596
// ComEnterUnit ( i , zbrojka [ 1 ] ) ;
4578: LD_VAR 0 2
4582: PPUSH
4583: LD_VAR 0 9
4587: PUSH
4588: LD_INT 1
4590: ARRAY
4591: PPUSH
4592: CALL_OW 120
// y = y + 1 ;
4596: LD_ADDR_VAR 0 4
4600: PUSH
4601: LD_VAR 0 4
4605: PUSH
4606: LD_INT 1
4608: PLUS
4609: ST_TO_ADDR
// end ; 2 :
4610: GO 4734
4612: LD_INT 2
4614: DOUBLE
4615: EQUAL
4616: IFTRUE 4620
4618: GO 4635
4620: POP
// ComEnterUnit ( i , WestTerminal ) ; 3 :
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_INT 123
4628: PPUSH
4629: CALL_OW 120
4633: GO 4734
4635: LD_INT 3
4637: DOUBLE
4638: EQUAL
4639: IFTRUE 4643
4641: GO 4704
4643: POP
// begin if z > 3 then
4644: LD_VAR 0 3
4648: PUSH
4649: LD_INT 3
4651: GREATER
4652: IFFALSE 4670
// ComEnterUnit ( i , fabryka ) else
4654: LD_VAR 0 2
4658: PPUSH
4659: LD_VAR 0 6
4663: PPUSH
4664: CALL_OW 120
4668: GO 4688
// ComEnterUnit ( i , wieza [ 1 ] ) ;
4670: LD_VAR 0 2
4674: PPUSH
4675: LD_VAR 0 7
4679: PUSH
4680: LD_INT 1
4682: ARRAY
4683: PPUSH
4684: CALL_OW 120
// z = z + 1 ;
4688: LD_ADDR_VAR 0 3
4692: PUSH
4693: LD_VAR 0 3
4697: PUSH
4698: LD_INT 1
4700: PLUS
4701: ST_TO_ADDR
// end ; 4 :
4702: GO 4734
4704: LD_INT 4
4706: DOUBLE
4707: EQUAL
4708: IFTRUE 4712
4710: GO 4733
4712: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
4713: LD_VAR 0 2
4717: PPUSH
4718: LD_VAR 0 8
4722: PUSH
4723: LD_INT 1
4725: ARRAY
4726: PPUSH
4727: CALL_OW 120
4731: GO 4734
4733: POP
// end ;
4734: GO 4509
4736: POP
4737: POP
// Uc_Side := 1 ;
4738: LD_ADDR_OWVAR 20
4742: PUSH
4743: LD_INT 1
4745: ST_TO_ADDR
// Uc_Nation := 1 ;
4746: LD_ADDR_OWVAR 21
4750: PUSH
4751: LD_INT 1
4753: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , false ,  ) ;
4754: LD_ADDR_EXP 59
4758: PUSH
4759: LD_STRING Houten
4761: PPUSH
4762: LD_INT 0
4764: PPUSH
4765: LD_STRING 
4767: PPUSH
4768: CALL 8011 0 3
4772: ST_TO_ADDR
// PlaceHumanInUnit ( Houten , WestTerminal ) ;
4773: LD_EXP 59
4777: PPUSH
4778: LD_INT 123
4780: PPUSH
4781: CALL_OW 52
// end ;
4785: LD_VAR 0 1
4789: RET
// every 10 10$0 trigger start_ended = true do var i ;
4790: LD_EXP 68
4794: PUSH
4795: LD_INT 1
4797: EQUAL
4798: IFFALSE 4887
4800: GO 4802
4802: DISABLE
4803: LD_INT 0
4805: PPUSH
// begin Uc_Nation = 1 ;
4806: LD_ADDR_OWVAR 21
4810: PUSH
4811: LD_INT 1
4813: ST_TO_ADDR
// Uc_Side = 1 ;
4814: LD_ADDR_OWVAR 20
4818: PUSH
4819: LD_INT 1
4821: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
4822: LD_ADDR_VAR 0 1
4826: PUSH
4827: DOUBLE
4828: LD_INT 1
4830: DEC
4831: ST_TO_ADDR
4832: LD_INT 4
4834: PUSH
4835: LD_INT 5
4837: PUSH
4838: LD_INT 6
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: LIST
4845: PUSH
4846: LD_OWVAR 67
4850: ARRAY
4851: PUSH
4852: FOR_TO
4853: IFFALSE 4884
// AddComConstruct ( AmFactory , 4 , 1 , 2 , rand ( 4 , 6 ) ) ;
4855: LD_INT 239
4857: PPUSH
4858: LD_INT 4
4860: PPUSH
4861: LD_INT 1
4863: PPUSH
4864: LD_INT 2
4866: PPUSH
4867: LD_INT 4
4869: PPUSH
4870: LD_INT 6
4872: PPUSH
4873: CALL_OW 12
4877: PPUSH
4878: CALL_OW 185
4882: GO 4852
4884: POP
4885: POP
// enable ;
4886: ENABLE
// end ;
4887: PPOPN 1
4889: END
// every 0 0$1 trigger attackers >= [ 4 , 5 , 6 ] [ Difficulty ] do var enemy , attacker ;
4890: LD_EXP 8
4894: PUSH
4895: LD_INT 4
4897: PUSH
4898: LD_INT 5
4900: PUSH
4901: LD_INT 6
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: PUSH
4909: LD_OWVAR 67
4913: ARRAY
4914: GREATEREQUAL
4915: IFFALSE 5007
4917: GO 4919
4919: DISABLE
4920: LD_INT 0
4922: PPUSH
4923: PPUSH
// begin enable ;
4924: ENABLE
// enemy := Filterallunits ( [ f_side , 3 ] ) ;
4925: LD_ADDR_VAR 0 1
4929: PUSH
4930: LD_INT 22
4932: PUSH
4933: LD_INT 3
4935: PUSH
4936: EMPTY
4937: LIST
4938: LIST
4939: PPUSH
4940: CALL_OW 69
4944: ST_TO_ADDR
// for attacker in UnitFilter ( attackers , [ [ f_ok ] , [ f_linked ] ] ) do
4945: LD_ADDR_VAR 0 2
4949: PUSH
4950: LD_EXP 8
4954: PPUSH
4955: LD_INT 50
4957: PUSH
4958: EMPTY
4959: LIST
4960: PUSH
4961: LD_INT 61
4963: PUSH
4964: EMPTY
4965: LIST
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PPUSH
4971: CALL_OW 72
4975: PUSH
4976: FOR_IN
4977: IFFALSE 5005
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
4979: LD_VAR 0 2
4983: PPUSH
4984: LD_VAR 0 1
4988: PPUSH
4989: LD_VAR 0 2
4993: PPUSH
4994: CALL_OW 74
4998: PPUSH
4999: CALL_OW 115
5003: GO 4976
5005: POP
5006: POP
// end ; end_of_file
5007: PPOPN 2
5009: END
// export function Action ; begin
5010: LD_INT 0
5012: PPUSH
// ingame_video := true ;
5013: LD_ADDR_OWVAR 52
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// interface_hidden := true ;
5021: LD_ADDR_OWVAR 54
5025: PUSH
5026: LD_INT 1
5028: ST_TO_ADDR
// ComMoveToArea ( [ Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ] , PeopleStartArea ) ;
5029: LD_EXP 10
5033: PUSH
5034: LD_EXP 11
5038: PUSH
5039: LD_EXP 12
5043: PUSH
5044: LD_EXP 13
5048: PUSH
5049: LD_EXP 14
5053: PUSH
5054: LD_EXP 15
5058: PUSH
5059: LD_EXP 16
5063: PUSH
5064: LD_EXP 17
5068: PUSH
5069: LD_EXP 18
5073: PUSH
5074: LD_EXP 19
5078: PUSH
5079: LD_EXP 20
5083: PUSH
5084: LD_EXP 21
5088: PUSH
5089: LD_EXP 22
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: PPUSH
5109: LD_INT 10
5111: PPUSH
5112: CALL_OW 113
// ComMoveToArea ( Yakotich , YakotichStartArea ) ;
5116: LD_EXP 9
5120: PPUSH
5121: LD_INT 11
5123: PPUSH
5124: CALL_OW 113
// end ;
5128: LD_VAR 0 1
5132: RET
// every 0 0$1 trigger IsInArea ( Yakotich , YakotichStartArea ) do
5133: LD_EXP 9
5137: PPUSH
5138: LD_INT 11
5140: PPUSH
5141: CALL_OW 308
5145: IFFALSE 5212
5147: GO 5149
5149: DISABLE
// begin ComTurnUnit ( Yakotich , Mietek ) ;
5150: LD_EXP 9
5154: PPUSH
5155: LD_EXP 10
5159: PPUSH
5160: CALL_OW 119
// Say ( Yakotich , 3Yak-01 ) ;
5164: LD_EXP 9
5168: PPUSH
5169: LD_STRING 3Yak-01
5171: PPUSH
5172: CALL_OW 88
// ComEnterUnit ( Yakotich , Ovsyenko ) ;
5176: LD_EXP 9
5180: PPUSH
5181: LD_INT 74
5183: PPUSH
5184: CALL_OW 120
// ComEnterUnit ( Mietek , Ovsyenko ) ;
5188: LD_EXP 10
5192: PPUSH
5193: LD_INT 74
5195: PPUSH
5196: CALL_OW 120
// ComEnterUnit ( Boris , Ovsyenko ) ;
5200: LD_EXP 11
5204: PPUSH
5205: LD_INT 74
5207: PPUSH
5208: CALL_OW 120
// end ;
5212: END
// export engs ; export function SikorskiAction ; var x , y , i , tmp , t , engs , un , speaker ; begin
5213: LD_INT 0
5215: PPUSH
5216: PPUSH
5217: PPUSH
5218: PPUSH
5219: PPUSH
5220: PPUSH
5221: PPUSH
5222: PPUSH
5223: PPUSH
// x := 101 ;
5224: LD_ADDR_VAR 0 2
5228: PUSH
5229: LD_INT 101
5231: ST_TO_ADDR
// y := 116 ;
5232: LD_ADDR_VAR 0 3
5236: PUSH
5237: LD_INT 116
5239: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 30 ) ;
5240: LD_VAR 0 2
5244: PPUSH
5245: LD_VAR 0 3
5249: PPUSH
5250: LD_INT 1
5252: PPUSH
5253: LD_INT 30
5255: NEG
5256: PPUSH
5257: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
5261: LD_VAR 0 2
5265: PPUSH
5266: LD_VAR 0 3
5270: PPUSH
5271: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Sikorski ;
5275: LD_ADDR_VAR 0 5
5279: PUSH
5280: LD_INT 22
5282: PUSH
5283: LD_INT 4
5285: PUSH
5286: EMPTY
5287: LIST
5288: LIST
5289: PUSH
5290: LD_INT 21
5292: PUSH
5293: LD_INT 1
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PPUSH
5304: CALL_OW 69
5308: PUSH
5309: LD_EXP 49
5313: DIFF
5314: ST_TO_ADDR
// AddComTurnXY ( tmp , 111 , 125 ) ;
5315: LD_VAR 0 5
5319: PPUSH
5320: LD_INT 111
5322: PPUSH
5323: LD_INT 125
5325: PPUSH
5326: CALL_OW 178
// wait ( 0 0$02 ) ;
5330: LD_INT 70
5332: PPUSH
5333: CALL_OW 67
// AddComMoveXY ( Sikorski , 105 , 111 ) ;
5337: LD_EXP 49
5341: PPUSH
5342: LD_INT 105
5344: PPUSH
5345: LD_INT 111
5347: PPUSH
5348: CALL_OW 171
// ComAgressiveMove ( tmp , 108 , 117 ) ;
5352: LD_VAR 0 5
5356: PPUSH
5357: LD_INT 108
5359: PPUSH
5360: LD_INT 117
5362: PPUSH
5363: CALL_OW 114
// Say ( Sikorski , 3Sik-01 ) ;
5367: LD_EXP 49
5371: PPUSH
5372: LD_STRING 3Sik-01
5374: PPUSH
5375: CALL_OW 88
// Say ( Yakotich , 3Yak-08 ) ;
5379: LD_EXP 9
5383: PPUSH
5384: LD_STRING 3Yak-08
5386: PPUSH
5387: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
5391: LD_INT 35
5393: PPUSH
5394: CALL_OW 67
// until See ( 3 , Sikorski ) ;
5398: LD_INT 3
5400: PPUSH
5401: LD_EXP 49
5405: PPUSH
5406: CALL_OW 292
5410: IFFALSE 5391
// un := UnitsInside ( NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , Sikorski ) ) [ 1 ] ;
5412: LD_ADDR_VAR 0 8
5416: PUSH
5417: LD_INT 30
5419: PUSH
5420: LD_INT 31
5422: PUSH
5423: EMPTY
5424: LIST
5425: LIST
5426: PPUSH
5427: CALL_OW 69
5431: PPUSH
5432: LD_EXP 49
5436: PPUSH
5437: CALL_OW 74
5441: PPUSH
5442: CALL_OW 313
5446: PUSH
5447: LD_INT 1
5449: ARRAY
5450: ST_TO_ADDR
// AddComAttackUnit ( un , Sikorski ) ;
5451: LD_VAR 0 8
5455: PPUSH
5456: LD_EXP 49
5460: PPUSH
5461: CALL_OW 175
// wait ( 0 0$3 ) ;
5465: LD_INT 105
5467: PPUSH
5468: CALL_OW 67
// MineExplosion ( 111 , 116 , 1 ) ;
5472: LD_INT 111
5474: PPUSH
5475: LD_INT 116
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 453
// repeat wait ( 0 0$01 ) ;
5485: LD_INT 35
5487: PPUSH
5488: CALL_OW 67
// until IsDying ( un ) ;
5492: LD_VAR 0 8
5496: PPUSH
5497: CALL_OW 303
5501: IFFALSE 5485
// DoNotAttack ( 3 , Sikorski ) ;
5503: LD_INT 3
5505: PPUSH
5506: LD_EXP 49
5510: PPUSH
5511: CALL_OW 471
// AddComMoveXY ( Sikorski , 110 , 120 ) ;
5515: LD_EXP 49
5519: PPUSH
5520: LD_INT 110
5522: PPUSH
5523: LD_INT 120
5525: PPUSH
5526: CALL_OW 171
// AddComAttackUnit ( Sikorski , Ovsyenko ) ;
5530: LD_EXP 49
5534: PPUSH
5535: LD_INT 74
5537: PPUSH
5538: CALL_OW 175
// Say ( Yakotich , 3Yak-09 ) ;
5542: LD_EXP 9
5546: PPUSH
5547: LD_STRING 3Yak-09
5549: PPUSH
5550: CALL_OW 88
// ComExitBuilding ( [ f_side , 3 ] ) ;
5554: LD_INT 22
5556: PUSH
5557: LD_INT 3
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PPUSH
5564: CALL_OW 122
// AddComAgressiveMove ( [ f_side , 3 ] , 106 , 114 ) ;
5568: LD_INT 22
5570: PUSH
5571: LD_INT 3
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PPUSH
5578: LD_INT 106
5580: PPUSH
5581: LD_INT 114
5583: PPUSH
5584: CALL_OW 174
// ComMoveXY ( tmp , 109 , 119 ) ;
5588: LD_VAR 0 5
5592: PPUSH
5593: LD_INT 109
5595: PPUSH
5596: LD_INT 119
5598: PPUSH
5599: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
5603: LD_VAR 0 5
5607: PPUSH
5608: LD_INT 111
5610: PPUSH
5611: LD_INT 125
5613: PPUSH
5614: CALL_OW 178
// ComExitBuilding ( Yakotich ) ;
5618: LD_EXP 9
5622: PPUSH
5623: CALL_OW 122
// AddComAttackUnit ( Yakotich , Sikorski ) ;
5627: LD_EXP 9
5631: PPUSH
5632: LD_EXP 49
5636: PPUSH
5637: CALL_OW 175
// Say ( Sikorski , 3Sik-02 ) ;
5641: LD_EXP 49
5645: PPUSH
5646: LD_STRING 3Sik-02
5648: PPUSH
5649: CALL_OW 88
// wait ( 0 0$2 ) ;
5653: LD_INT 70
5655: PPUSH
5656: CALL_OW 67
// SayEffect ( 3smrtsikora ) ;
5660: LD_STRING 3smrtsikora
5662: PPUSH
5663: CALL_OW 96
// KillUnit ( Sikorski ) ;
5667: LD_EXP 49
5671: PPUSH
5672: CALL_OW 66
// wait ( 0 0$1 ) ;
5676: LD_INT 35
5678: PPUSH
5679: CALL_OW 67
// engs := FilterAllUnits ( [ f_class , 2 ] ) ;
5683: LD_ADDR_VAR 0 7
5687: PUSH
5688: LD_INT 25
5690: PUSH
5691: LD_INT 2
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PPUSH
5698: CALL_OW 69
5702: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
5703: LD_VAR 0 7
5707: PPUSH
5708: CALL_OW 122
// for i = 1 to engs do
5712: LD_ADDR_VAR 0 4
5716: PUSH
5717: DOUBLE
5718: LD_INT 1
5720: DEC
5721: ST_TO_ADDR
5722: LD_VAR 0 7
5726: PUSH
5727: FOR_TO
5728: IFFALSE 5768
// AddComEnterUnit ( engs [ i ] , FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) [ i ] ) ;
5730: LD_VAR 0 7
5734: PUSH
5735: LD_VAR 0 4
5739: ARRAY
5740: PPUSH
5741: LD_INT 34
5743: PUSH
5744: LD_INT 51
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: PPUSH
5751: CALL_OW 69
5755: PUSH
5756: LD_VAR 0 4
5760: ARRAY
5761: PPUSH
5762: CALL_OW 180
5766: GO 5727
5768: POP
5769: POP
// AddComTransport ( Boris , Ovsyenko , mat_siberit ) ;
5770: LD_EXP 11
5774: PPUSH
5775: LD_INT 74
5777: PPUSH
5778: LD_INT 3
5780: PPUSH
5781: CALL_OW 211
// AddComTransport ( Anton , Ovsyenko , mat_cans ) ;
5785: LD_EXP 27
5789: PPUSH
5790: LD_INT 74
5792: PPUSH
5793: LD_INT 1
5795: PPUSH
5796: CALL_OW 211
// AddComMoveXY ( engs , 147 , 220 ) ;
5800: LD_VAR 0 7
5804: PPUSH
5805: LD_INT 147
5807: PPUSH
5808: LD_INT 220
5810: PPUSH
5811: CALL_OW 171
// AddComExitVehicle ( engs ) ;
5815: LD_VAR 0 7
5819: PPUSH
5820: CALL_OW 181
// AddComMoveXY ( Yakotich , 148 , 208 ) ;
5824: LD_EXP 9
5828: PPUSH
5829: LD_INT 148
5831: PPUSH
5832: LD_INT 208
5834: PPUSH
5835: CALL_OW 171
// un := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
5839: LD_ADDR_VAR 0 8
5843: PUSH
5844: LD_INT 22
5846: PUSH
5847: LD_INT 3
5849: PUSH
5850: EMPTY
5851: LIST
5852: LIST
5853: PUSH
5854: LD_INT 25
5856: PUSH
5857: LD_INT 1
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: EMPTY
5865: LIST
5866: LIST
5867: PPUSH
5868: CALL_OW 69
5872: ST_TO_ADDR
// ComExitBuilding ( un ) ;
5873: LD_VAR 0 8
5877: PPUSH
5878: CALL_OW 122
// ComExitBuilding ( Grigori ) ;
5882: LD_EXP 26
5886: PPUSH
5887: CALL_OW 122
// AddComMoveXY ( un , 148 , 208 ) ;
5891: LD_VAR 0 8
5895: PPUSH
5896: LD_INT 148
5898: PPUSH
5899: LD_INT 208
5901: PPUSH
5902: CALL_OW 171
// AddComMoveXY ( Grigori , 148 , 208 ) ;
5906: LD_EXP 26
5910: PPUSH
5911: LD_INT 148
5913: PPUSH
5914: LD_INT 208
5916: PPUSH
5917: CALL_OW 171
// wait ( 5 ) ;
5921: LD_INT 5
5923: PPUSH
5924: CALL_OW 67
// Say ( Jilian , 3Rand-01 ) ;
5928: LD_EXP 57
5932: PPUSH
5933: LD_STRING 3Rand-01
5935: PPUSH
5936: CALL_OW 88
// ComMoveToArea ( SikorskiTeam , OvsyenkoArea ) ;
5940: LD_EXP 4
5944: PPUSH
5945: LD_INT 6
5947: PPUSH
5948: CALL_OW 113
// wait ( 0 0$7 ) ;
5952: LD_INT 245
5954: PPUSH
5955: CALL_OW 67
// t := [ [ 104 , 117 ] , [ 115 , 123 ] , [ 114 , 126 ] , [ 111 , 122 ] , [ 112 , 126 ] , [ 117 , 130 ] , [ 106 , 127 ] , [ 111 , 117 ] , [ 98 , 119 ] , [ 116 , 131 ] , [ 109 , 129 ] , [ 100 , 113 ] ] ;
5959: LD_ADDR_VAR 0 6
5963: PUSH
5964: LD_INT 104
5966: PUSH
5967: LD_INT 117
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 115
5976: PUSH
5977: LD_INT 123
5979: PUSH
5980: EMPTY
5981: LIST
5982: LIST
5983: PUSH
5984: LD_INT 114
5986: PUSH
5987: LD_INT 126
5989: PUSH
5990: EMPTY
5991: LIST
5992: LIST
5993: PUSH
5994: LD_INT 111
5996: PUSH
5997: LD_INT 122
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 112
6006: PUSH
6007: LD_INT 126
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: PUSH
6014: LD_INT 117
6016: PUSH
6017: LD_INT 130
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 106
6026: PUSH
6027: LD_INT 127
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 111
6036: PUSH
6037: LD_INT 117
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: LD_INT 98
6046: PUSH
6047: LD_INT 119
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 116
6056: PUSH
6057: LD_INT 131
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PUSH
6064: LD_INT 109
6066: PUSH
6067: LD_INT 129
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 100
6076: PUSH
6077: LD_INT 113
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: LIST
6097: ST_TO_ADDR
// for i in t do
6098: LD_ADDR_VAR 0 4
6102: PUSH
6103: LD_VAR 0 6
6107: PUSH
6108: FOR_IN
6109: IFFALSE 6145
// begin wait ( 0 0$0.3 ) ;
6111: LD_INT 10
6113: PPUSH
6114: CALL_OW 67
// MineExplosion ( i [ 1 ] , i [ 2 ] , 1 ) ;
6118: LD_VAR 0 4
6122: PUSH
6123: LD_INT 1
6125: ARRAY
6126: PPUSH
6127: LD_VAR 0 4
6131: PUSH
6132: LD_INT 2
6134: ARRAY
6135: PPUSH
6136: LD_INT 1
6138: PPUSH
6139: CALL_OW 453
// end ;
6143: GO 6108
6145: POP
6146: POP
// wait ( 0 0$4 ) ;
6147: LD_INT 140
6149: PPUSH
6150: CALL_OW 67
// Say ( Turner , 3Rand-02 ) ;
6154: LD_EXP 58
6158: PPUSH
6159: LD_STRING 3Rand-02
6161: PPUSH
6162: CALL_OW 88
// wait ( 0 0$5 ) ;
6166: LD_INT 175
6168: PPUSH
6169: CALL_OW 67
// wait ( 0 0$2 ) ;
6173: LD_INT 70
6175: PPUSH
6176: CALL_OW 67
// SayRadio ( Yakotich , 3Yak-10 ) ;
6180: LD_EXP 9
6184: PPUSH
6185: LD_STRING 3Yak-10
6187: PPUSH
6188: CALL_OW 94
// SetLives ( Ovsyenko , 400 ) ;
6192: LD_INT 74
6194: PPUSH
6195: LD_INT 400
6197: PPUSH
6198: CALL_OW 234
// Cutscene_ended = true ;
6202: LD_ADDR_EXP 66
6206: PUSH
6207: LD_INT 1
6209: ST_TO_ADDR
// CenterOnXY ( 148 , 208 ) ;
6210: LD_INT 148
6212: PPUSH
6213: LD_INT 208
6215: PPUSH
6216: CALL_OW 84
// SayRadio ( Platonov , 3Plat-03 ) ;
6220: LD_EXP 62
6224: PPUSH
6225: LD_STRING 3Plat-03
6227: PPUSH
6228: CALL_OW 94
// SayRadio ( Platonov , 3Plat-04 ) ;
6232: LD_EXP 62
6236: PPUSH
6237: LD_STRING 3Plat-04
6239: PPUSH
6240: CALL_OW 94
// SayRadio ( Platonov , 3Plat-05 ) ;
6244: LD_EXP 62
6248: PPUSH
6249: LD_STRING 3Plat-05
6251: PPUSH
6252: CALL_OW 94
// SayRadio ( Platonov , 3Plat-06 ) ;
6256: LD_EXP 62
6260: PPUSH
6261: LD_STRING 3Plat-06
6263: PPUSH
6264: CALL_OW 94
// SayRadio ( Platonov , 3Plat-07 ) ;
6268: LD_EXP 62
6272: PPUSH
6273: LD_STRING 3Plat-07
6275: PPUSH
6276: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-11 ) ;
6280: LD_EXP 9
6284: PPUSH
6285: LD_STRING 3Yak-11
6287: PPUSH
6288: CALL_OW 94
// repeat Wait ( 0 0$1 ) until not IsInUnit ( Boris ) and not IsInUnit ( Anton ) ;
6292: LD_INT 35
6294: PPUSH
6295: CALL_OW 67
6299: LD_EXP 11
6303: PPUSH
6304: CALL_OW 310
6308: NOT
6309: PUSH
6310: LD_EXP 27
6314: PPUSH
6315: CALL_OW 310
6319: NOT
6320: AND
6321: IFFALSE 6292
// tmp := [ ] ;
6323: LD_ADDR_VAR 0 5
6327: PUSH
6328: EMPTY
6329: ST_TO_ADDR
// start_ended = true ;
6330: LD_ADDR_EXP 68
6334: PUSH
6335: LD_INT 1
6337: ST_TO_ADDR
// end ;
6338: LD_VAR 0 1
6342: RET
// every 0 0$1 trigger IsInUnit ( Yakotich ) do
6343: LD_EXP 9
6347: PPUSH
6348: CALL_OW 310
6352: IFFALSE 6661
6354: GO 6356
6356: DISABLE
// begin Say ( Yakotich , 3Yak-02 ) ;
6357: LD_EXP 9
6361: PPUSH
6362: LD_STRING 3Yak-02
6364: PPUSH
6365: CALL_OW 88
// Say ( Dimitri , 3Dim-01 ) ;
6369: LD_EXP 23
6373: PPUSH
6374: LD_STRING 3Dim-01
6376: PPUSH
6377: CALL_OW 88
// Say ( Yakotich , 3Yak-03 ) ;
6381: LD_EXP 9
6385: PPUSH
6386: LD_STRING 3Yak-03
6388: PPUSH
6389: CALL_OW 88
// Say ( Dimitri , 3Dim-02 ) ;
6393: LD_EXP 23
6397: PPUSH
6398: LD_STRING 3Dim-02
6400: PPUSH
6401: CALL_OW 88
// SayRadio ( Yakotich , 3Yak-04 ) ;
6405: LD_EXP 9
6409: PPUSH
6410: LD_STRING 3Yak-04
6412: PPUSH
6413: CALL_OW 94
// SayRadio ( Platonov , 3Plat-01 ) ;
6417: LD_EXP 62
6421: PPUSH
6422: LD_STRING 3Plat-01
6424: PPUSH
6425: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-05 ) ;
6429: LD_EXP 9
6433: PPUSH
6434: LD_STRING 3Yak-05
6436: PPUSH
6437: CALL_OW 94
// SayRadio ( Platonov , 3Plat-02 ) ;
6441: LD_EXP 62
6445: PPUSH
6446: LD_STRING 3Plat-02
6448: PPUSH
6449: CALL_OW 94
// Say ( Dimitri , 3Dim-03 ) ;
6453: LD_EXP 23
6457: PPUSH
6458: LD_STRING 3Dim-03
6460: PPUSH
6461: CALL_OW 88
// Say ( Dimitri , 3Dim-04 ) ;
6465: LD_EXP 23
6469: PPUSH
6470: LD_STRING 3Dim-04
6472: PPUSH
6473: CALL_OW 88
// Say ( Yakotich , 3Yak-06 ) ;
6477: LD_EXP 9
6481: PPUSH
6482: LD_STRING 3Yak-06
6484: PPUSH
6485: CALL_OW 88
// Say ( Dimitri , 3Dim-05 ) ;
6489: LD_EXP 23
6493: PPUSH
6494: LD_STRING 3Dim-05
6496: PPUSH
6497: CALL_OW 88
// Say ( Yakotich , 3Yak-07 ) ;
6501: LD_EXP 9
6505: PPUSH
6506: LD_STRING 3Yak-07
6508: PPUSH
6509: CALL_OW 88
// Wait ( 0 0$03 ) ;
6513: LD_INT 105
6515: PPUSH
6516: CALL_OW 67
// InitSikorskiTeam ;
6520: CALL 2437 0 0
// SikorskiAction ;
6524: CALL 5213 0 0
// ChangeMissionObjectives ( o1 ) ;
6528: LD_STRING o1
6530: PPUSH
6531: CALL_OW 337
// SetSide ( [ Ovsyenko , OB2 , OB3 , oil , eoil1 , eoil2 ] , 4 ) ;
6535: LD_INT 74
6537: PUSH
6538: LD_INT 79
6540: PUSH
6541: LD_INT 78
6543: PUSH
6544: LD_INT 76
6546: PUSH
6547: LD_INT 85
6549: PUSH
6550: LD_INT 86
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: PPUSH
6561: LD_INT 4
6563: PPUSH
6564: CALL_OW 235
// ComEnterUnit ( Cyrus , OB3 ) ;
6568: LD_EXP 52
6572: PPUSH
6573: LD_INT 78
6575: PPUSH
6576: CALL_OW 120
// ComEnterUnit ( Bobby , OB2 ) ;
6580: LD_EXP 51
6584: PPUSH
6585: LD_INT 79
6587: PPUSH
6588: CALL_OW 120
// SetClass ( [ Jilian , Turner ] , 2 ) ;
6592: LD_EXP 57
6596: PUSH
6597: LD_EXP 58
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PPUSH
6606: LD_INT 2
6608: PPUSH
6609: CALL_OW 336
// ComWalk ( [ Jilian , Turner , McCreery , Lynch , Walker , Truman , Gary ] ) ;
6613: LD_EXP 57
6617: PUSH
6618: LD_EXP 58
6622: PUSH
6623: LD_EXP 55
6627: PUSH
6628: LD_EXP 54
6632: PUSH
6633: LD_EXP 56
6637: PUSH
6638: LD_EXP 50
6642: PUSH
6643: LD_EXP 53
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: PPUSH
6657: CALL_OW 138
// end ;
6661: END
// every 0 0$1 trigger start_ended = true do
6662: LD_EXP 68
6666: PUSH
6667: LD_INT 1
6669: EQUAL
6670: IFFALSE 6742
6672: GO 6674
6674: DISABLE
// begin Say ( Yakotich , 3Yak-12 ) ;
6675: LD_EXP 9
6679: PPUSH
6680: LD_STRING 3Yak-12
6682: PPUSH
6683: CALL_OW 88
// Say ( Vasilij , 3Vas-01 ) ;
6687: LD_EXP 12
6691: PPUSH
6692: LD_STRING 3Vas-01
6694: PPUSH
6695: CALL_OW 88
// Say ( Dimitri , 3Dim-06 ) ;
6699: LD_EXP 23
6703: PPUSH
6704: LD_STRING 3Dim-06
6706: PPUSH
6707: CALL_OW 88
// Say ( Dimitri , 3Dim-07 ) ;
6711: LD_EXP 23
6715: PPUSH
6716: LD_STRING 3Dim-07
6718: PPUSH
6719: CALL_OW 88
// Say ( Vasilij , 3Vas-02 ) ;
6723: LD_EXP 12
6727: PPUSH
6728: LD_STRING 3Vas-02
6730: PPUSH
6731: CALL_OW 88
// ChangeMissionObjectives ( rocket ) ;
6735: LD_STRING rocket
6737: PPUSH
6738: CALL_OW 337
// end ;
6742: END
// every 0 0$1 trigger GetSide ( Ovsyenko ) = 3 and start_ended = true do
6743: LD_INT 74
6745: PPUSH
6746: CALL_OW 255
6750: PUSH
6751: LD_INT 3
6753: EQUAL
6754: PUSH
6755: LD_EXP 68
6759: PUSH
6760: LD_INT 1
6762: EQUAL
6763: AND
6764: IFFALSE 6946
6766: GO 6768
6768: DISABLE
// begin DialogueOn ;
6769: CALL_OW 6
// InGameOn ;
6773: CALL_OW 8
// SayRadio ( Yakotich , 3Yak-13 ) ;
6777: LD_EXP 9
6781: PPUSH
6782: LD_STRING 3Yak-13
6784: PPUSH
6785: CALL_OW 94
// SayRadio ( Platonov , 3Plat-06 ) ;
6789: LD_EXP 62
6793: PPUSH
6794: LD_STRING 3Plat-06
6796: PPUSH
6797: CALL_OW 94
// SayRadio ( Platonov , 3Plat-07 ) ;
6801: LD_EXP 62
6805: PPUSH
6806: LD_STRING 3Plat-07
6808: PPUSH
6809: CALL_OW 94
// Say ( Mietek , 3Ryn-01 ) ;
6813: LD_EXP 10
6817: PPUSH
6818: LD_STRING 3Ryn-01
6820: PPUSH
6821: CALL_OW 88
// CenterNowOnXY ( 109 , 72 ) ;
6825: LD_INT 109
6827: PPUSH
6828: LD_INT 72
6830: PPUSH
6831: CALL_OW 86
// RevealFogArea ( 3 , EastPassage ) ;
6835: LD_INT 3
6837: PPUSH
6838: LD_INT 13
6840: PPUSH
6841: CALL_OW 332
// Say ( Mietek , 3Ryn-02 ) ;
6845: LD_EXP 10
6849: PPUSH
6850: LD_STRING 3Ryn-02
6852: PPUSH
6853: CALL_OW 88
// CenterNowOnXY ( 78 , 17 ) ;
6857: LD_INT 78
6859: PPUSH
6860: LD_INT 17
6862: PPUSH
6863: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
6867: LD_INT 3
6869: PPUSH
6870: LD_INT 14
6872: PPUSH
6873: CALL_OW 332
// Say ( Mietek , 3Ryn-03 ) ;
6877: LD_EXP 10
6881: PPUSH
6882: LD_STRING 3Ryn-03
6884: PPUSH
6885: CALL_OW 88
// Say ( Yakotich , 3Yak-14 ) ;
6889: LD_EXP 9
6893: PPUSH
6894: LD_STRING 3Yak-14
6896: PPUSH
6897: CALL_OW 88
// ChangeMissionObjectives ( [ o2a , o2b , o2c ] [ Difficulty ] ) ;
6901: LD_STRING o2a
6903: PUSH
6904: LD_STRING o2b
6906: PUSH
6907: LD_STRING o2c
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: PUSH
6915: LD_OWVAR 67
6919: ARRAY
6920: PPUSH
6921: CALL_OW 337
// SetTech ( 86 , 3 , 1 ) ;
6925: LD_INT 86
6927: PPUSH
6928: LD_INT 3
6930: PPUSH
6931: LD_INT 1
6933: PPUSH
6934: CALL_OW 322
// DialogueOff ;
6938: CALL_OW 7
// InGameOff ;
6942: CALL_OW 9
// end ;
6946: END
// every 0 0$1 trigger ovsyenko_captured = true do
6947: LD_EXP 67
6951: PUSH
6952: LD_INT 1
6954: EQUAL
6955: IFFALSE 7293
6957: GO 6959
6959: DISABLE
// begin Wait ( 15 15$0 ) ;
6960: LD_INT 31500
6962: PPUSH
6963: CALL_OW 67
// InitBurlak ;
6967: CALL 1872 0 0
// DialogueOn ;
6971: CALL_OW 6
// CenterNowOnXY ( 155 , 235 ) ;
6975: LD_INT 155
6977: PPUSH
6978: LD_INT 235
6980: PPUSH
6981: CALL_OW 86
// SayRadio ( Burlak , 3Bur-01 ) ;
6985: LD_EXP 33
6989: PPUSH
6990: LD_STRING 3Bur-01
6992: PPUSH
6993: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-15 ) ;
6997: LD_EXP 9
7001: PPUSH
7002: LD_STRING 3Yak-15
7004: PPUSH
7005: CALL_OW 94
// SayRadio ( Burlak , 3Bur-02 ) ;
7009: LD_EXP 33
7013: PPUSH
7014: LD_STRING 3Bur-02
7016: PPUSH
7017: CALL_OW 94
// CenterNowOnUnits ( BurlakVeh ) ;
7021: LD_EXP 41
7025: PPUSH
7026: CALL_OW 87
// SayRadio ( Vasilij , 3Vas-Flame-01 ) ;
7030: LD_EXP 12
7034: PPUSH
7035: LD_STRING 3Vas-Flame-01
7037: PPUSH
7038: CALL_OW 94
// SayRadio ( Burlak , 3Bur-Flame-01 ) ;
7042: LD_EXP 33
7046: PPUSH
7047: LD_STRING 3Bur-Flame-01
7049: PPUSH
7050: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-Flame-01 ) ;
7054: LD_EXP 9
7058: PPUSH
7059: LD_STRING 3Yak-Flame-01
7061: PPUSH
7062: CALL_OW 94
// SayRadio ( Burlak , 3Bur-Flame-02 ) ;
7066: LD_EXP 33
7070: PPUSH
7071: LD_STRING 3Bur-Flame-02
7073: PPUSH
7074: CALL_OW 94
// SayRadio ( Vasilij , 3Vas-Flame-02 ) ;
7078: LD_EXP 12
7082: PPUSH
7083: LD_STRING 3Vas-Flame-02
7085: PPUSH
7086: CALL_OW 94
// ChangeMissionObjectives ( flametank ) ;
7090: LD_STRING flametank
7092: PPUSH
7093: CALL_OW 337
// DialogueOff ;
7097: CALL_OW 7
// Wait ( 0 0$15 ) ;
7101: LD_INT 525
7103: PPUSH
7104: CALL_OW 67
// DialogueOn ;
7108: CALL_OW 6
// Say ( Petrosyan , 3Pty-01 ) ;
7112: LD_EXP 39
7116: PPUSH
7117: LD_STRING 3Pty-01
7119: PPUSH
7120: CALL_OW 88
// Say ( Yakotich , 3Yak-16 ) ;
7124: LD_EXP 9
7128: PPUSH
7129: LD_STRING 3Yak-16
7131: PPUSH
7132: CALL_OW 88
// Say ( Platonov , 3Plat-08 ) ;
7136: LD_EXP 62
7140: PPUSH
7141: LD_STRING 3Plat-08
7143: PPUSH
7144: CALL_OW 88
// ChangeMissionObjectives ( o4 ) ;
7148: LD_STRING o4
7150: PPUSH
7151: CALL_OW 337
// SetRestrict ( 11 , 3 , 1 ) ;
7155: LD_INT 11
7157: PPUSH
7158: LD_INT 3
7160: PPUSH
7161: LD_INT 1
7163: PPUSH
7164: CALL_OW 324
// SetRestrict ( 14 , 3 , 1 ) ;
7168: LD_INT 14
7170: PPUSH
7171: LD_INT 3
7173: PPUSH
7174: LD_INT 1
7176: PPUSH
7177: CALL_OW 324
// SetRestrict ( 28 , 3 , 1 ) ;
7181: LD_INT 28
7183: PPUSH
7184: LD_INT 3
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: CALL_OW 324
// DialogueOff ;
7194: CALL_OW 7
// Wait ( 1 1$0 ) ;
7198: LD_INT 2100
7200: PPUSH
7201: CALL_OW 67
// DialogueOn ;
7205: CALL_OW 6
// Say ( Petrosyan , 3Pty-Comp-01 ) ;
7209: LD_EXP 39
7213: PPUSH
7214: LD_STRING 3Pty-Comp-01
7216: PPUSH
7217: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-01 ) ;
7221: LD_EXP 33
7225: PPUSH
7226: LD_STRING 3Bur-Comp-01
7228: PPUSH
7229: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-02 ) ;
7233: LD_EXP 39
7237: PPUSH
7238: LD_STRING 3Pty-Comp-02
7240: PPUSH
7241: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-02 ) ;
7245: LD_EXP 33
7249: PPUSH
7250: LD_STRING 3Bur-Comp-02
7252: PPUSH
7253: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-03 ) ;
7257: LD_EXP 39
7261: PPUSH
7262: LD_STRING 3Pty-Comp-03
7264: PPUSH
7265: CALL_OW 88
// SetRestrict ( 12 , 3 , 1 ) ;
7269: LD_INT 12
7271: PPUSH
7272: LD_INT 3
7274: PPUSH
7275: LD_INT 1
7277: PPUSH
7278: CALL_OW 324
// ChangeMissionObjectives ( 05 ) ;
7282: LD_STRING 05
7284: PPUSH
7285: CALL_OW 337
// DialogueOff ;
7289: CALL_OW 7
// end ; end_of_file
7293: END
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and start_ended then
7294: LD_VAR 0 1
7298: PPUSH
7299: CALL_OW 255
7303: PUSH
7304: LD_INT 3
7306: EQUAL
7307: PUSH
7308: LD_VAR 0 1
7312: PPUSH
7313: CALL_OW 266
7317: PUSH
7318: LD_INT 0
7320: EQUAL
7321: AND
7322: PUSH
7323: LD_EXP 68
7327: AND
7328: IFFALSE 7381
// begin RuDep := building ;
7330: LD_ADDR_EXP 97
7334: PUSH
7335: LD_VAR 0 1
7339: ST_TO_ADDR
// SetBName ( building , voroshilov ) ;
7340: LD_VAR 0 1
7344: PPUSH
7345: LD_STRING voroshilov
7347: PPUSH
7348: CALL_OW 500
// SetRestrict ( b_depot , 3 , false ) ;
7352: LD_INT 0
7354: PPUSH
7355: LD_INT 3
7357: PPUSH
7358: LD_INT 0
7360: PPUSH
7361: CALL_OW 324
// ingame_video := false ;
7365: LD_ADDR_OWVAR 52
7369: PUSH
7370: LD_INT 0
7372: ST_TO_ADDR
// interface_hidden := false ;
7373: LD_ADDR_OWVAR 54
7377: PUSH
7378: LD_INT 0
7380: ST_TO_ADDR
// end ; end ;
7381: PPOPN 2
7383: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetControl ( vehicle ) = control_remote and GetSide ( vehicle ) = 1 then
7384: LD_VAR 0 1
7388: PPUSH
7389: CALL_OW 263
7393: PUSH
7394: LD_INT 2
7396: EQUAL
7397: PUSH
7398: LD_VAR 0 1
7402: PPUSH
7403: CALL_OW 255
7407: PUSH
7408: LD_INT 1
7410: EQUAL
7411: AND
7412: IFFALSE 7509
// begin Wait ( 0 0$3 ) ;
7414: LD_INT 105
7416: PPUSH
7417: CALL_OW 67
// Connect ( vehicle ) ;
7421: LD_VAR 0 1
7425: PPUSH
7426: CALL 15968 0 1
// newAttackers := Replace ( newAttackers , newAttackers + 1 , vehicle ) ;
7430: LD_ADDR_EXP 7
7434: PUSH
7435: LD_EXP 7
7439: PPUSH
7440: LD_EXP 7
7444: PUSH
7445: LD_INT 1
7447: PLUS
7448: PPUSH
7449: LD_VAR 0 1
7453: PPUSH
7454: CALL_OW 1
7458: ST_TO_ADDR
// if newAttackers >= [ 4 , 5 , 6 ] [ Difficulty ] then
7459: LD_EXP 7
7463: PUSH
7464: LD_INT 4
7466: PUSH
7467: LD_INT 5
7469: PUSH
7470: LD_INT 6
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: PUSH
7478: LD_OWVAR 67
7482: ARRAY
7483: GREATEREQUAL
7484: IFFALSE 7509
// begin attackers := attackers union newAttackers ;
7486: LD_ADDR_EXP 8
7490: PUSH
7491: LD_EXP 8
7495: PUSH
7496: LD_EXP 7
7500: UNION
7501: ST_TO_ADDR
// newAttackers := [ ] ;
7502: LD_ADDR_EXP 7
7506: PUSH
7507: EMPTY
7508: ST_TO_ADDR
// end ; end ; end ;
7509: PPOPN 2
7511: END
// every 0 0$1 trigger See ( 3 , AmLab1 ) and lab_seen = false do
7512: LD_INT 3
7514: PPUSH
7515: LD_INT 94
7517: PPUSH
7518: CALL_OW 292
7522: PUSH
7523: LD_EXP 69
7527: PUSH
7528: LD_INT 0
7530: EQUAL
7531: AND
7532: IFFALSE 7579
7534: GO 7536
7536: DISABLE
// begin lab_seen = true ;
7537: LD_ADDR_EXP 69
7541: PUSH
7542: LD_INT 1
7544: ST_TO_ADDR
// CenterNowOnUnits ( AmLab1 ) ;
7545: LD_INT 94
7547: PPUSH
7548: CALL_OW 87
// DialogueOn ;
7552: CALL_OW 6
// Say ( Vasilij , 3Vas-Lab-01 ) ;
7556: LD_EXP 12
7560: PPUSH
7561: LD_STRING 3Vas-Lab-01
7563: PPUSH
7564: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
7568: LD_STRING o6
7570: PPUSH
7571: CALL_OW 337
// DialogueOff ;
7575: CALL_OW 7
// end ;
7579: END
// every 0 0$1 trigger See ( 3 , AmLab2 ) and lab_seen = false do
7580: LD_INT 3
7582: PPUSH
7583: LD_INT 163
7585: PPUSH
7586: CALL_OW 292
7590: PUSH
7591: LD_EXP 69
7595: PUSH
7596: LD_INT 0
7598: EQUAL
7599: AND
7600: IFFALSE 7639
7602: GO 7604
7604: DISABLE
// begin CenterNowOnUnits ( AmLab2 ) ;
7605: LD_INT 163
7607: PPUSH
7608: CALL_OW 87
// DialogueOn ;
7612: CALL_OW 6
// Say ( Vasilij , 3Vas-Lab-01 ) ;
7616: LD_EXP 12
7620: PPUSH
7621: LD_STRING 3Vas-Lab-01
7623: PPUSH
7624: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
7628: LD_STRING o6
7630: PPUSH
7631: CALL_OW 337
// DialogueOff ;
7635: CALL_OW 7
// end ;
7639: END
// every 0 0$1 trigger GetSide ( AmLab1 ) = 3 or GetSide ( AmLab2 ) = 3 do
7640: LD_INT 94
7642: PPUSH
7643: CALL_OW 255
7647: PUSH
7648: LD_INT 3
7650: EQUAL
7651: PUSH
7652: LD_INT 163
7654: PPUSH
7655: CALL_OW 255
7659: PUSH
7660: LD_INT 3
7662: EQUAL
7663: OR
7664: IFFALSE 7684
7666: GO 7668
7668: DISABLE
// begin ChangeMissionObjectives ( labik2 ) ;
7669: LD_STRING labik2
7671: PPUSH
7672: CALL_OW 337
// lab_captured = true ;
7676: LD_ADDR_EXP 70
7680: PUSH
7681: LD_INT 1
7683: ST_TO_ADDR
// end ;
7684: END
// every 0 0$1 trigger Researched ( 3 , 69 ) do
7685: LD_INT 3
7687: PPUSH
7688: LD_INT 69
7690: PPUSH
7691: CALL_OW 325
7695: IFFALSE 7747
7697: GO 7699
7699: DISABLE
// begin DialogueOn ;
7700: CALL_OW 6
// Say ( Vasilij , 3Vas-Buldozer-01 ) ;
7704: LD_EXP 12
7708: PPUSH
7709: LD_STRING 3Vas-Buldozer-01
7711: PPUSH
7712: CALL_OW 88
// Say ( Vasilij , 3Vas-Buldozer-02 ) ;
7716: LD_EXP 12
7720: PPUSH
7721: LD_STRING 3Vas-Buldozer-02
7723: PPUSH
7724: CALL_OW 88
// ChangeMissionObjectives ( buld2 ) ;
7728: LD_STRING buld2
7730: PPUSH
7731: CALL_OW 337
// buldozer_researched = true ;
7735: LD_ADDR_EXP 73
7739: PUSH
7740: LD_INT 1
7742: ST_TO_ADDR
// DialogueOff ;
7743: CALL_OW 7
// end ;
7747: END
// every 0 0$1 trigger Researched ( 3 , 40 ) do
7748: LD_INT 3
7750: PPUSH
7751: LD_INT 40
7753: PPUSH
7754: CALL_OW 325
7758: IFFALSE 7802
7760: GO 7762
7762: DISABLE
// begin Say ( Vasilij , 3Vas-Rocket ) ;
7763: LD_EXP 12
7767: PPUSH
7768: LD_STRING 3Vas-Rocket
7770: PPUSH
7771: CALL_OW 88
// Say ( Stanislav , 3Stan-Rocket ) ;
7775: LD_EXP 22
7779: PPUSH
7780: LD_STRING 3Stan-Rocket
7782: PPUSH
7783: CALL_OW 88
// ChangeMissionObjectives ( rocket2 ) ;
7787: LD_STRING rocket2
7789: PPUSH
7790: CALL_OW 337
// rocket_researched = true ;
7794: LD_ADDR_EXP 71
7798: PUSH
7799: LD_INT 1
7801: ST_TO_ADDR
// end ;
7802: END
// every 0 0$1 trigger Researched ( 3 , 9 ) do
7803: LD_INT 3
7805: PPUSH
7806: LD_INT 9
7808: PPUSH
7809: CALL_OW 325
7813: IFFALSE 7889
7815: GO 7817
7817: DISABLE
// begin DialogueOn ;
7818: CALL_OW 6
// Say ( Petrosyan , 3Pty-Comp-04 ) ;
7822: LD_EXP 39
7826: PPUSH
7827: LD_STRING 3Pty-Comp-04
7829: PPUSH
7830: CALL_OW 88
// Say ( Yakotich , 3Yak-Comp-01 ) ;
7834: LD_EXP 9
7838: PPUSH
7839: LD_STRING 3Yak-Comp-01
7841: PPUSH
7842: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-05 ) ;
7846: LD_EXP 39
7850: PPUSH
7851: LD_STRING 3Pty-Comp-05
7853: PPUSH
7854: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-03 ) ;
7858: LD_EXP 33
7862: PPUSH
7863: LD_STRING 3Bur-Comp-03
7865: PPUSH
7866: CALL_OW 88
// ChangeMissionObjectives ( pred2 ) ;
7870: LD_STRING pred2
7872: PPUSH
7873: CALL_OW 337
// prediction_researched = true ;
7877: LD_ADDR_EXP 72
7881: PUSH
7882: LD_INT 1
7884: ST_TO_ADDR
// DialogueOff ;
7885: CALL_OW 7
// end ;
7889: END
// every 0 0$1 trigger Researched ( 3 , 30 ) do
7890: LD_INT 3
7892: PPUSH
7893: LD_INT 30
7895: PPUSH
7896: CALL_OW 325
7900: IFFALSE 7961
7902: GO 7904
7904: DISABLE
// begin DialogueOn ;
7905: CALL_OW 6
// Say ( Dolgov , 3Dol-Stasis-01 ) ;
7909: LD_EXP 40
7913: PPUSH
7914: LD_STRING 3Dol-Stasis-01
7916: PPUSH
7917: CALL_OW 88
// Say ( Burlak , 3Bur-Stasis-01 ) ;
7921: LD_EXP 33
7925: PPUSH
7926: LD_STRING 3Bur-Stasis-01
7928: PPUSH
7929: CALL_OW 88
// Say ( Dolgov , 3Dol-Stasis-02 ) ;
7933: LD_EXP 40
7937: PPUSH
7938: LD_STRING 3Dol-Stasis-02
7940: PPUSH
7941: CALL_OW 88
// Say ( Burlak , 3Bur-Stasis-02 ) ;
7945: LD_EXP 33
7949: PPUSH
7950: LD_STRING 3Bur-Stasis-02
7952: PPUSH
7953: CALL_OW 88
// DialogueOff ;
7957: CALL_OW 7
// end ;
7961: END
// every 0 0$1 trigger IsInArea ( Boris , SouthOfBase ) and start_ended = true do
7962: LD_EXP 11
7966: PPUSH
7967: LD_INT 12
7969: PPUSH
7970: CALL_OW 308
7974: PUSH
7975: LD_EXP 68
7979: PUSH
7980: LD_INT 1
7982: EQUAL
7983: AND
7984: IFFALSE 8010
7986: GO 7988
7988: DISABLE
// begin AddComBuild ( Boris , b_depot , 140 , 204 , 3 ) ;
7989: LD_EXP 11
7993: PPUSH
7994: LD_INT 0
7996: PPUSH
7997: LD_INT 140
7999: PPUSH
8000: LD_INT 204
8002: PPUSH
8003: LD_INT 3
8005: PPUSH
8006: CALL_OW 205
// end ; end_of_file
8010: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8011: LD_INT 0
8013: PPUSH
8014: PPUSH
// if exist_mode then
8015: LD_VAR 0 2
8019: IFFALSE 8044
// unit := CreateCharacter ( prefix & ident ) else
8021: LD_ADDR_VAR 0 5
8025: PUSH
8026: LD_VAR 0 3
8030: PUSH
8031: LD_VAR 0 1
8035: STR
8036: PPUSH
8037: CALL_OW 34
8041: ST_TO_ADDR
8042: GO 8059
// unit := NewCharacter ( ident ) ;
8044: LD_ADDR_VAR 0 5
8048: PUSH
8049: LD_VAR 0 1
8053: PPUSH
8054: CALL_OW 25
8058: ST_TO_ADDR
// result := unit ;
8059: LD_ADDR_VAR 0 4
8063: PUSH
8064: LD_VAR 0 5
8068: ST_TO_ADDR
// end ;
8069: LD_VAR 0 4
8073: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8074: LD_INT 0
8076: PPUSH
8077: PPUSH
// if not side or not nation then
8078: LD_VAR 0 1
8082: NOT
8083: PUSH
8084: LD_VAR 0 2
8088: NOT
8089: OR
8090: IFFALSE 8094
// exit ;
8092: GO 8862
// case nation of nation_american :
8094: LD_VAR 0 2
8098: PUSH
8099: LD_INT 1
8101: DOUBLE
8102: EQUAL
8103: IFTRUE 8107
8105: GO 8321
8107: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8108: LD_ADDR_VAR 0 4
8112: PUSH
8113: LD_INT 35
8115: PUSH
8116: LD_INT 45
8118: PUSH
8119: LD_INT 46
8121: PUSH
8122: LD_INT 47
8124: PUSH
8125: LD_INT 82
8127: PUSH
8128: LD_INT 83
8130: PUSH
8131: LD_INT 84
8133: PUSH
8134: LD_INT 85
8136: PUSH
8137: LD_INT 86
8139: PUSH
8140: LD_INT 1
8142: PUSH
8143: LD_INT 2
8145: PUSH
8146: LD_INT 6
8148: PUSH
8149: LD_INT 15
8151: PUSH
8152: LD_INT 16
8154: PUSH
8155: LD_INT 7
8157: PUSH
8158: LD_INT 12
8160: PUSH
8161: LD_INT 13
8163: PUSH
8164: LD_INT 10
8166: PUSH
8167: LD_INT 14
8169: PUSH
8170: LD_INT 20
8172: PUSH
8173: LD_INT 21
8175: PUSH
8176: LD_INT 22
8178: PUSH
8179: LD_INT 25
8181: PUSH
8182: LD_INT 32
8184: PUSH
8185: LD_INT 27
8187: PUSH
8188: LD_INT 36
8190: PUSH
8191: LD_INT 69
8193: PUSH
8194: LD_INT 39
8196: PUSH
8197: LD_INT 34
8199: PUSH
8200: LD_INT 40
8202: PUSH
8203: LD_INT 48
8205: PUSH
8206: LD_INT 49
8208: PUSH
8209: LD_INT 50
8211: PUSH
8212: LD_INT 51
8214: PUSH
8215: LD_INT 52
8217: PUSH
8218: LD_INT 53
8220: PUSH
8221: LD_INT 54
8223: PUSH
8224: LD_INT 55
8226: PUSH
8227: LD_INT 56
8229: PUSH
8230: LD_INT 57
8232: PUSH
8233: LD_INT 58
8235: PUSH
8236: LD_INT 59
8238: PUSH
8239: LD_INT 60
8241: PUSH
8242: LD_INT 61
8244: PUSH
8245: LD_INT 62
8247: PUSH
8248: LD_INT 80
8250: PUSH
8251: LD_INT 82
8253: PUSH
8254: LD_INT 83
8256: PUSH
8257: LD_INT 84
8259: PUSH
8260: LD_INT 85
8262: PUSH
8263: LD_INT 86
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: ST_TO_ADDR
8319: GO 8786
8321: LD_INT 2
8323: DOUBLE
8324: EQUAL
8325: IFTRUE 8329
8327: GO 8555
8329: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8330: LD_ADDR_VAR 0 4
8334: PUSH
8335: LD_INT 35
8337: PUSH
8338: LD_INT 45
8340: PUSH
8341: LD_INT 46
8343: PUSH
8344: LD_INT 47
8346: PUSH
8347: LD_INT 82
8349: PUSH
8350: LD_INT 83
8352: PUSH
8353: LD_INT 84
8355: PUSH
8356: LD_INT 85
8358: PUSH
8359: LD_INT 87
8361: PUSH
8362: LD_INT 70
8364: PUSH
8365: LD_INT 1
8367: PUSH
8368: LD_INT 11
8370: PUSH
8371: LD_INT 3
8373: PUSH
8374: LD_INT 4
8376: PUSH
8377: LD_INT 5
8379: PUSH
8380: LD_INT 6
8382: PUSH
8383: LD_INT 15
8385: PUSH
8386: LD_INT 18
8388: PUSH
8389: LD_INT 7
8391: PUSH
8392: LD_INT 17
8394: PUSH
8395: LD_INT 8
8397: PUSH
8398: LD_INT 20
8400: PUSH
8401: LD_INT 21
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 72
8409: PUSH
8410: LD_INT 26
8412: PUSH
8413: LD_INT 69
8415: PUSH
8416: LD_INT 39
8418: PUSH
8419: LD_INT 40
8421: PUSH
8422: LD_INT 41
8424: PUSH
8425: LD_INT 42
8427: PUSH
8428: LD_INT 43
8430: PUSH
8431: LD_INT 48
8433: PUSH
8434: LD_INT 49
8436: PUSH
8437: LD_INT 50
8439: PUSH
8440: LD_INT 51
8442: PUSH
8443: LD_INT 52
8445: PUSH
8446: LD_INT 53
8448: PUSH
8449: LD_INT 54
8451: PUSH
8452: LD_INT 55
8454: PUSH
8455: LD_INT 56
8457: PUSH
8458: LD_INT 60
8460: PUSH
8461: LD_INT 61
8463: PUSH
8464: LD_INT 62
8466: PUSH
8467: LD_INT 66
8469: PUSH
8470: LD_INT 67
8472: PUSH
8473: LD_INT 68
8475: PUSH
8476: LD_INT 81
8478: PUSH
8479: LD_INT 82
8481: PUSH
8482: LD_INT 83
8484: PUSH
8485: LD_INT 84
8487: PUSH
8488: LD_INT 85
8490: PUSH
8491: LD_INT 87
8493: PUSH
8494: LD_INT 88
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: ST_TO_ADDR
8553: GO 8786
8555: LD_INT 3
8557: DOUBLE
8558: EQUAL
8559: IFTRUE 8563
8561: GO 8785
8563: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
8564: LD_ADDR_VAR 0 4
8568: PUSH
8569: LD_INT 46
8571: PUSH
8572: LD_INT 47
8574: PUSH
8575: LD_INT 1
8577: PUSH
8578: LD_INT 2
8580: PUSH
8581: LD_INT 82
8583: PUSH
8584: LD_INT 83
8586: PUSH
8587: LD_INT 84
8589: PUSH
8590: LD_INT 85
8592: PUSH
8593: LD_INT 86
8595: PUSH
8596: LD_INT 11
8598: PUSH
8599: LD_INT 9
8601: PUSH
8602: LD_INT 20
8604: PUSH
8605: LD_INT 19
8607: PUSH
8608: LD_INT 21
8610: PUSH
8611: LD_INT 24
8613: PUSH
8614: LD_INT 22
8616: PUSH
8617: LD_INT 25
8619: PUSH
8620: LD_INT 28
8622: PUSH
8623: LD_INT 29
8625: PUSH
8626: LD_INT 30
8628: PUSH
8629: LD_INT 31
8631: PUSH
8632: LD_INT 37
8634: PUSH
8635: LD_INT 38
8637: PUSH
8638: LD_INT 32
8640: PUSH
8641: LD_INT 27
8643: PUSH
8644: LD_INT 33
8646: PUSH
8647: LD_INT 69
8649: PUSH
8650: LD_INT 39
8652: PUSH
8653: LD_INT 34
8655: PUSH
8656: LD_INT 40
8658: PUSH
8659: LD_INT 71
8661: PUSH
8662: LD_INT 23
8664: PUSH
8665: LD_INT 44
8667: PUSH
8668: LD_INT 48
8670: PUSH
8671: LD_INT 49
8673: PUSH
8674: LD_INT 50
8676: PUSH
8677: LD_INT 51
8679: PUSH
8680: LD_INT 52
8682: PUSH
8683: LD_INT 53
8685: PUSH
8686: LD_INT 54
8688: PUSH
8689: LD_INT 55
8691: PUSH
8692: LD_INT 56
8694: PUSH
8695: LD_INT 57
8697: PUSH
8698: LD_INT 58
8700: PUSH
8701: LD_INT 59
8703: PUSH
8704: LD_INT 63
8706: PUSH
8707: LD_INT 64
8709: PUSH
8710: LD_INT 65
8712: PUSH
8713: LD_INT 82
8715: PUSH
8716: LD_INT 83
8718: PUSH
8719: LD_INT 84
8721: PUSH
8722: LD_INT 85
8724: PUSH
8725: LD_INT 86
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: ST_TO_ADDR
8783: GO 8786
8785: POP
// if state > - 1 and state < 3 then
8786: LD_VAR 0 3
8790: PUSH
8791: LD_INT 1
8793: NEG
8794: GREATER
8795: PUSH
8796: LD_VAR 0 3
8800: PUSH
8801: LD_INT 3
8803: LESS
8804: AND
8805: IFFALSE 8862
// for i in result do
8807: LD_ADDR_VAR 0 5
8811: PUSH
8812: LD_VAR 0 4
8816: PUSH
8817: FOR_IN
8818: IFFALSE 8860
// if GetTech ( i , side ) <> state then
8820: LD_VAR 0 5
8824: PPUSH
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 321
8834: PUSH
8835: LD_VAR 0 3
8839: NONEQUAL
8840: IFFALSE 8858
// result := result diff i ;
8842: LD_ADDR_VAR 0 4
8846: PUSH
8847: LD_VAR 0 4
8851: PUSH
8852: LD_VAR 0 5
8856: DIFF
8857: ST_TO_ADDR
8858: GO 8817
8860: POP
8861: POP
// end ;
8862: LD_VAR 0 4
8866: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
8867: LD_INT 0
8869: PPUSH
8870: PPUSH
8871: PPUSH
// result := true ;
8872: LD_ADDR_VAR 0 3
8876: PUSH
8877: LD_INT 1
8879: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
8880: LD_ADDR_VAR 0 5
8884: PUSH
8885: LD_VAR 0 2
8889: PPUSH
8890: CALL_OW 480
8894: ST_TO_ADDR
// if not tmp then
8895: LD_VAR 0 5
8899: NOT
8900: IFFALSE 8904
// exit ;
8902: GO 8953
// for i in tmp do
8904: LD_ADDR_VAR 0 4
8908: PUSH
8909: LD_VAR 0 5
8913: PUSH
8914: FOR_IN
8915: IFFALSE 8951
// if GetTech ( i , side ) <> state_researched then
8917: LD_VAR 0 4
8921: PPUSH
8922: LD_VAR 0 1
8926: PPUSH
8927: CALL_OW 321
8931: PUSH
8932: LD_INT 2
8934: NONEQUAL
8935: IFFALSE 8949
// begin result := false ;
8937: LD_ADDR_VAR 0 3
8941: PUSH
8942: LD_INT 0
8944: ST_TO_ADDR
// exit ;
8945: POP
8946: POP
8947: GO 8953
// end ;
8949: GO 8914
8951: POP
8952: POP
// end ;
8953: LD_VAR 0 3
8957: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
8958: LD_INT 0
8960: PPUSH
8961: PPUSH
8962: PPUSH
8963: PPUSH
8964: PPUSH
8965: PPUSH
8966: PPUSH
8967: PPUSH
8968: PPUSH
8969: PPUSH
8970: PPUSH
8971: PPUSH
8972: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
8973: LD_VAR 0 1
8977: NOT
8978: PUSH
8979: LD_VAR 0 1
8983: PPUSH
8984: CALL_OW 257
8988: PUSH
8989: LD_INT 9
8991: NONEQUAL
8992: OR
8993: IFFALSE 8997
// exit ;
8995: GO 9570
// side := GetSide ( unit ) ;
8997: LD_ADDR_VAR 0 9
9001: PUSH
9002: LD_VAR 0 1
9006: PPUSH
9007: CALL_OW 255
9011: ST_TO_ADDR
// tech_space := tech_spacanom ;
9012: LD_ADDR_VAR 0 12
9016: PUSH
9017: LD_INT 29
9019: ST_TO_ADDR
// tech_time := tech_taurad ;
9020: LD_ADDR_VAR 0 13
9024: PUSH
9025: LD_INT 28
9027: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9028: LD_ADDR_VAR 0 11
9032: PUSH
9033: LD_VAR 0 1
9037: PPUSH
9038: CALL_OW 310
9042: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9043: LD_VAR 0 11
9047: PPUSH
9048: CALL_OW 247
9052: PUSH
9053: LD_INT 2
9055: EQUAL
9056: IFFALSE 9060
// exit ;
9058: GO 9570
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9060: LD_ADDR_VAR 0 8
9064: PUSH
9065: LD_INT 81
9067: PUSH
9068: LD_VAR 0 9
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: LD_INT 21
9082: PUSH
9083: LD_INT 3
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: EMPTY
9095: LIST
9096: LIST
9097: PPUSH
9098: CALL_OW 69
9102: ST_TO_ADDR
// if not tmp then
9103: LD_VAR 0 8
9107: NOT
9108: IFFALSE 9112
// exit ;
9110: GO 9570
// if in_unit then
9112: LD_VAR 0 11
9116: IFFALSE 9140
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9118: LD_ADDR_VAR 0 10
9122: PUSH
9123: LD_VAR 0 8
9127: PPUSH
9128: LD_VAR 0 11
9132: PPUSH
9133: CALL_OW 74
9137: ST_TO_ADDR
9138: GO 9160
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9140: LD_ADDR_VAR 0 10
9144: PUSH
9145: LD_VAR 0 8
9149: PPUSH
9150: LD_VAR 0 1
9154: PPUSH
9155: CALL_OW 74
9159: ST_TO_ADDR
// if not enemy then
9160: LD_VAR 0 10
9164: NOT
9165: IFFALSE 9169
// exit ;
9167: GO 9570
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9169: LD_VAR 0 11
9173: PUSH
9174: LD_VAR 0 11
9178: PPUSH
9179: LD_VAR 0 10
9183: PPUSH
9184: CALL_OW 296
9188: PUSH
9189: LD_INT 13
9191: GREATER
9192: AND
9193: PUSH
9194: LD_VAR 0 1
9198: PPUSH
9199: LD_VAR 0 10
9203: PPUSH
9204: CALL_OW 296
9208: PUSH
9209: LD_INT 12
9211: GREATER
9212: OR
9213: IFFALSE 9217
// exit ;
9215: GO 9570
// missile := [ 1 ] ;
9217: LD_ADDR_VAR 0 14
9221: PUSH
9222: LD_INT 1
9224: PUSH
9225: EMPTY
9226: LIST
9227: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9228: LD_VAR 0 9
9232: PPUSH
9233: LD_VAR 0 12
9237: PPUSH
9238: CALL_OW 325
9242: IFFALSE 9271
// missile := Replace ( missile , missile + 1 , 2 ) ;
9244: LD_ADDR_VAR 0 14
9248: PUSH
9249: LD_VAR 0 14
9253: PPUSH
9254: LD_VAR 0 14
9258: PUSH
9259: LD_INT 1
9261: PLUS
9262: PPUSH
9263: LD_INT 2
9265: PPUSH
9266: CALL_OW 1
9270: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9271: LD_VAR 0 9
9275: PPUSH
9276: LD_VAR 0 13
9280: PPUSH
9281: CALL_OW 325
9285: PUSH
9286: LD_VAR 0 10
9290: PPUSH
9291: CALL_OW 255
9295: PPUSH
9296: LD_VAR 0 13
9300: PPUSH
9301: CALL_OW 325
9305: NOT
9306: AND
9307: IFFALSE 9336
// missile := Replace ( missile , missile + 1 , 3 ) ;
9309: LD_ADDR_VAR 0 14
9313: PUSH
9314: LD_VAR 0 14
9318: PPUSH
9319: LD_VAR 0 14
9323: PUSH
9324: LD_INT 1
9326: PLUS
9327: PPUSH
9328: LD_INT 3
9330: PPUSH
9331: CALL_OW 1
9335: ST_TO_ADDR
// if missile < 2 then
9336: LD_VAR 0 14
9340: PUSH
9341: LD_INT 2
9343: LESS
9344: IFFALSE 9348
// exit ;
9346: GO 9570
// x := GetX ( enemy ) ;
9348: LD_ADDR_VAR 0 4
9352: PUSH
9353: LD_VAR 0 10
9357: PPUSH
9358: CALL_OW 250
9362: ST_TO_ADDR
// y := GetY ( enemy ) ;
9363: LD_ADDR_VAR 0 5
9367: PUSH
9368: LD_VAR 0 10
9372: PPUSH
9373: CALL_OW 251
9377: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9378: LD_ADDR_VAR 0 6
9382: PUSH
9383: LD_VAR 0 4
9387: PUSH
9388: LD_INT 1
9390: NEG
9391: PPUSH
9392: LD_INT 1
9394: PPUSH
9395: CALL_OW 12
9399: PLUS
9400: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9401: LD_ADDR_VAR 0 7
9405: PUSH
9406: LD_VAR 0 5
9410: PUSH
9411: LD_INT 1
9413: NEG
9414: PPUSH
9415: LD_INT 1
9417: PPUSH
9418: CALL_OW 12
9422: PLUS
9423: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9424: LD_VAR 0 6
9428: PPUSH
9429: LD_VAR 0 7
9433: PPUSH
9434: CALL_OW 488
9438: NOT
9439: IFFALSE 9461
// begin _x := x ;
9441: LD_ADDR_VAR 0 6
9445: PUSH
9446: LD_VAR 0 4
9450: ST_TO_ADDR
// _y := y ;
9451: LD_ADDR_VAR 0 7
9455: PUSH
9456: LD_VAR 0 5
9460: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9461: LD_ADDR_VAR 0 3
9465: PUSH
9466: LD_INT 1
9468: PPUSH
9469: LD_VAR 0 14
9473: PPUSH
9474: CALL_OW 12
9478: ST_TO_ADDR
// case i of 1 :
9479: LD_VAR 0 3
9483: PUSH
9484: LD_INT 1
9486: DOUBLE
9487: EQUAL
9488: IFTRUE 9492
9490: GO 9509
9492: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
9493: LD_VAR 0 1
9497: PPUSH
9498: LD_VAR 0 10
9502: PPUSH
9503: CALL_OW 115
9507: GO 9570
9509: LD_INT 2
9511: DOUBLE
9512: EQUAL
9513: IFTRUE 9517
9515: GO 9539
9517: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
9518: LD_VAR 0 1
9522: PPUSH
9523: LD_VAR 0 6
9527: PPUSH
9528: LD_VAR 0 7
9532: PPUSH
9533: CALL_OW 153
9537: GO 9570
9539: LD_INT 3
9541: DOUBLE
9542: EQUAL
9543: IFTRUE 9547
9545: GO 9569
9547: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
9548: LD_VAR 0 1
9552: PPUSH
9553: LD_VAR 0 6
9557: PPUSH
9558: LD_VAR 0 7
9562: PPUSH
9563: CALL_OW 154
9567: GO 9570
9569: POP
// end ;
9570: LD_VAR 0 2
9574: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
9575: LD_INT 0
9577: PPUSH
9578: PPUSH
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
// if not unit or not building then
9583: LD_VAR 0 1
9587: NOT
9588: PUSH
9589: LD_VAR 0 2
9593: NOT
9594: OR
9595: IFFALSE 9599
// exit ;
9597: GO 9757
// x := GetX ( building ) ;
9599: LD_ADDR_VAR 0 5
9603: PUSH
9604: LD_VAR 0 2
9608: PPUSH
9609: CALL_OW 250
9613: ST_TO_ADDR
// y := GetY ( building ) ;
9614: LD_ADDR_VAR 0 6
9618: PUSH
9619: LD_VAR 0 2
9623: PPUSH
9624: CALL_OW 251
9628: ST_TO_ADDR
// for i = 0 to 5 do
9629: LD_ADDR_VAR 0 4
9633: PUSH
9634: DOUBLE
9635: LD_INT 0
9637: DEC
9638: ST_TO_ADDR
9639: LD_INT 5
9641: PUSH
9642: FOR_TO
9643: IFFALSE 9755
// begin _x := ShiftX ( x , i , 3 ) ;
9645: LD_ADDR_VAR 0 7
9649: PUSH
9650: LD_VAR 0 5
9654: PPUSH
9655: LD_VAR 0 4
9659: PPUSH
9660: LD_INT 3
9662: PPUSH
9663: CALL_OW 272
9667: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
9668: LD_ADDR_VAR 0 8
9672: PUSH
9673: LD_VAR 0 6
9677: PPUSH
9678: LD_VAR 0 4
9682: PPUSH
9683: LD_INT 3
9685: PPUSH
9686: CALL_OW 273
9690: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9691: LD_VAR 0 7
9695: PPUSH
9696: LD_VAR 0 8
9700: PPUSH
9701: CALL_OW 488
9705: NOT
9706: IFFALSE 9710
// continue ;
9708: GO 9642
// if HexInfo ( _x , _y ) = 0 then
9710: LD_VAR 0 7
9714: PPUSH
9715: LD_VAR 0 8
9719: PPUSH
9720: CALL_OW 428
9724: PUSH
9725: LD_INT 0
9727: EQUAL
9728: IFFALSE 9753
// begin ComMoveXY ( unit , _x , _y ) ;
9730: LD_VAR 0 1
9734: PPUSH
9735: LD_VAR 0 7
9739: PPUSH
9740: LD_VAR 0 8
9744: PPUSH
9745: CALL_OW 111
// exit ;
9749: POP
9750: POP
9751: GO 9757
// end ; end ;
9753: GO 9642
9755: POP
9756: POP
// end ;
9757: LD_VAR 0 3
9761: RET
// export function ScanBase ( side , base_area ) ; begin
9762: LD_INT 0
9764: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
9765: LD_ADDR_VAR 0 3
9769: PUSH
9770: LD_VAR 0 2
9774: PPUSH
9775: LD_INT 81
9777: PUSH
9778: LD_VAR 0 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PPUSH
9787: CALL_OW 70
9791: ST_TO_ADDR
// end ;
9792: LD_VAR 0 3
9796: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
9797: LD_INT 0
9799: PPUSH
9800: PPUSH
9801: PPUSH
9802: PPUSH
// result := false ;
9803: LD_ADDR_VAR 0 2
9807: PUSH
9808: LD_INT 0
9810: ST_TO_ADDR
// side := GetSide ( unit ) ;
9811: LD_ADDR_VAR 0 3
9815: PUSH
9816: LD_VAR 0 1
9820: PPUSH
9821: CALL_OW 255
9825: ST_TO_ADDR
// nat := GetNation ( unit ) ;
9826: LD_ADDR_VAR 0 4
9830: PUSH
9831: LD_VAR 0 1
9835: PPUSH
9836: CALL_OW 248
9840: ST_TO_ADDR
// case nat of 1 :
9841: LD_VAR 0 4
9845: PUSH
9846: LD_INT 1
9848: DOUBLE
9849: EQUAL
9850: IFTRUE 9854
9852: GO 9865
9854: POP
// tech := tech_lassight ; 2 :
9855: LD_ADDR_VAR 0 5
9859: PUSH
9860: LD_INT 12
9862: ST_TO_ADDR
9863: GO 9904
9865: LD_INT 2
9867: DOUBLE
9868: EQUAL
9869: IFTRUE 9873
9871: GO 9884
9873: POP
// tech := tech_mortar ; 3 :
9874: LD_ADDR_VAR 0 5
9878: PUSH
9879: LD_INT 41
9881: ST_TO_ADDR
9882: GO 9904
9884: LD_INT 3
9886: DOUBLE
9887: EQUAL
9888: IFTRUE 9892
9890: GO 9903
9892: POP
// tech := tech_bazooka ; end ;
9893: LD_ADDR_VAR 0 5
9897: PUSH
9898: LD_INT 44
9900: ST_TO_ADDR
9901: GO 9904
9903: POP
// if Researched ( side , tech ) then
9904: LD_VAR 0 3
9908: PPUSH
9909: LD_VAR 0 5
9913: PPUSH
9914: CALL_OW 325
9918: IFFALSE 9945
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
9920: LD_ADDR_VAR 0 2
9924: PUSH
9925: LD_INT 5
9927: PUSH
9928: LD_INT 8
9930: PUSH
9931: LD_INT 9
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: PUSH
9939: LD_VAR 0 4
9943: ARRAY
9944: ST_TO_ADDR
// end ;
9945: LD_VAR 0 2
9949: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
9950: LD_INT 0
9952: PPUSH
9953: PPUSH
9954: PPUSH
// if not mines then
9955: LD_VAR 0 2
9959: NOT
9960: IFFALSE 9964
// exit ;
9962: GO 10108
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9964: LD_ADDR_VAR 0 5
9968: PUSH
9969: LD_INT 81
9971: PUSH
9972: LD_VAR 0 1
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: PUSH
9981: LD_INT 3
9983: PUSH
9984: LD_INT 21
9986: PUSH
9987: LD_INT 3
9989: PUSH
9990: EMPTY
9991: LIST
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: ST_TO_ADDR
// for i in mines do
10007: LD_ADDR_VAR 0 4
10011: PUSH
10012: LD_VAR 0 2
10016: PUSH
10017: FOR_IN
10018: IFFALSE 10106
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10020: LD_VAR 0 4
10024: PUSH
10025: LD_INT 1
10027: ARRAY
10028: PPUSH
10029: LD_VAR 0 4
10033: PUSH
10034: LD_INT 2
10036: ARRAY
10037: PPUSH
10038: CALL_OW 458
10042: NOT
10043: IFFALSE 10047
// continue ;
10045: GO 10017
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10047: LD_VAR 0 4
10051: PUSH
10052: LD_INT 1
10054: ARRAY
10055: PPUSH
10056: LD_VAR 0 4
10060: PUSH
10061: LD_INT 2
10063: ARRAY
10064: PPUSH
10065: CALL_OW 428
10069: PUSH
10070: LD_VAR 0 5
10074: IN
10075: IFFALSE 10104
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10077: LD_VAR 0 4
10081: PUSH
10082: LD_INT 1
10084: ARRAY
10085: PPUSH
10086: LD_VAR 0 4
10090: PUSH
10091: LD_INT 2
10093: ARRAY
10094: PPUSH
10095: LD_VAR 0 1
10099: PPUSH
10100: CALL_OW 456
// end ;
10104: GO 10017
10106: POP
10107: POP
// end ;
10108: LD_VAR 0 3
10112: RET
// export function Count ( array ) ; var i ; begin
10113: LD_INT 0
10115: PPUSH
10116: PPUSH
// result := 0 ;
10117: LD_ADDR_VAR 0 2
10121: PUSH
10122: LD_INT 0
10124: ST_TO_ADDR
// for i in array do
10125: LD_ADDR_VAR 0 3
10129: PUSH
10130: LD_VAR 0 1
10134: PUSH
10135: FOR_IN
10136: IFFALSE 10160
// if i then
10138: LD_VAR 0 3
10142: IFFALSE 10158
// result := result + 1 ;
10144: LD_ADDR_VAR 0 2
10148: PUSH
10149: LD_VAR 0 2
10153: PUSH
10154: LD_INT 1
10156: PLUS
10157: ST_TO_ADDR
10158: GO 10135
10160: POP
10161: POP
// end ;
10162: LD_VAR 0 2
10166: RET
// export function IsEmpty ( building ) ; begin
10167: LD_INT 0
10169: PPUSH
// if not building then
10170: LD_VAR 0 1
10174: NOT
10175: IFFALSE 10179
// exit ;
10177: GO 10222
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10179: LD_ADDR_VAR 0 2
10183: PUSH
10184: LD_VAR 0 1
10188: PUSH
10189: LD_INT 22
10191: PUSH
10192: LD_VAR 0 1
10196: PPUSH
10197: CALL_OW 255
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 58
10208: PUSH
10209: EMPTY
10210: LIST
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PPUSH
10216: CALL_OW 69
10220: IN
10221: ST_TO_ADDR
// end ;
10222: LD_VAR 0 2
10226: RET
// export function IsNotFull ( building ) ; begin
10227: LD_INT 0
10229: PPUSH
// if not building then
10230: LD_VAR 0 1
10234: NOT
10235: IFFALSE 10239
// exit ;
10237: GO 10258
// result := UnitsInside ( building ) < 6 ;
10239: LD_ADDR_VAR 0 2
10243: PUSH
10244: LD_VAR 0 1
10248: PPUSH
10249: CALL_OW 313
10253: PUSH
10254: LD_INT 6
10256: LESS
10257: ST_TO_ADDR
// end ;
10258: LD_VAR 0 2
10262: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10263: LD_INT 0
10265: PPUSH
10266: PPUSH
10267: PPUSH
10268: PPUSH
// tmp := [ ] ;
10269: LD_ADDR_VAR 0 3
10273: PUSH
10274: EMPTY
10275: ST_TO_ADDR
// list := [ ] ;
10276: LD_ADDR_VAR 0 5
10280: PUSH
10281: EMPTY
10282: ST_TO_ADDR
// for i = 16 to 25 do
10283: LD_ADDR_VAR 0 4
10287: PUSH
10288: DOUBLE
10289: LD_INT 16
10291: DEC
10292: ST_TO_ADDR
10293: LD_INT 25
10295: PUSH
10296: FOR_TO
10297: IFFALSE 10370
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10299: LD_ADDR_VAR 0 3
10303: PUSH
10304: LD_VAR 0 3
10308: PUSH
10309: LD_INT 22
10311: PUSH
10312: LD_VAR 0 1
10316: PPUSH
10317: CALL_OW 255
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 91
10328: PUSH
10329: LD_VAR 0 1
10333: PUSH
10334: LD_INT 6
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 30
10344: PUSH
10345: LD_VAR 0 4
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: PUSH
10359: EMPTY
10360: LIST
10361: PPUSH
10362: CALL_OW 69
10366: ADD
10367: ST_TO_ADDR
10368: GO 10296
10370: POP
10371: POP
// for i = 1 to tmp do
10372: LD_ADDR_VAR 0 4
10376: PUSH
10377: DOUBLE
10378: LD_INT 1
10380: DEC
10381: ST_TO_ADDR
10382: LD_VAR 0 3
10386: PUSH
10387: FOR_TO
10388: IFFALSE 10476
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10390: LD_ADDR_VAR 0 5
10394: PUSH
10395: LD_VAR 0 5
10399: PUSH
10400: LD_VAR 0 3
10404: PUSH
10405: LD_VAR 0 4
10409: ARRAY
10410: PPUSH
10411: CALL_OW 266
10415: PUSH
10416: LD_VAR 0 3
10420: PUSH
10421: LD_VAR 0 4
10425: ARRAY
10426: PPUSH
10427: CALL_OW 250
10431: PUSH
10432: LD_VAR 0 3
10436: PUSH
10437: LD_VAR 0 4
10441: ARRAY
10442: PPUSH
10443: CALL_OW 251
10447: PUSH
10448: LD_VAR 0 3
10452: PUSH
10453: LD_VAR 0 4
10457: ARRAY
10458: PPUSH
10459: CALL_OW 254
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: ADD
10473: ST_TO_ADDR
10474: GO 10387
10476: POP
10477: POP
// result := list ;
10478: LD_ADDR_VAR 0 2
10482: PUSH
10483: LD_VAR 0 5
10487: ST_TO_ADDR
// end ;
10488: LD_VAR 0 2
10492: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
10493: LD_INT 0
10495: PPUSH
10496: PPUSH
10497: PPUSH
10498: PPUSH
10499: PPUSH
10500: PPUSH
10501: PPUSH
// if not factory then
10502: LD_VAR 0 1
10506: NOT
10507: IFFALSE 10511
// exit ;
10509: GO 11104
// if control = control_apeman then
10511: LD_VAR 0 4
10515: PUSH
10516: LD_INT 5
10518: EQUAL
10519: IFFALSE 10628
// begin tmp := UnitsInside ( factory ) ;
10521: LD_ADDR_VAR 0 8
10525: PUSH
10526: LD_VAR 0 1
10530: PPUSH
10531: CALL_OW 313
10535: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
10536: LD_VAR 0 8
10540: PPUSH
10541: LD_INT 25
10543: PUSH
10544: LD_INT 12
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: PPUSH
10551: CALL_OW 72
10555: NOT
10556: IFFALSE 10566
// control := control_manual ;
10558: LD_ADDR_VAR 0 4
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
10566: LD_ADDR_VAR 0 8
10570: PUSH
10571: LD_VAR 0 1
10575: PPUSH
10576: CALL 10263 0 1
10580: ST_TO_ADDR
// if tmp then
10581: LD_VAR 0 8
10585: IFFALSE 10628
// begin for i in tmp do
10587: LD_ADDR_VAR 0 7
10591: PUSH
10592: LD_VAR 0 8
10596: PUSH
10597: FOR_IN
10598: IFFALSE 10626
// if i [ 1 ] = b_ext_radio then
10600: LD_VAR 0 7
10604: PUSH
10605: LD_INT 1
10607: ARRAY
10608: PUSH
10609: LD_INT 22
10611: EQUAL
10612: IFFALSE 10624
// begin control := control_remote ;
10614: LD_ADDR_VAR 0 4
10618: PUSH
10619: LD_INT 2
10621: ST_TO_ADDR
// break ;
10622: GO 10626
// end ;
10624: GO 10597
10626: POP
10627: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
10628: LD_VAR 0 1
10632: PPUSH
10633: LD_VAR 0 2
10637: PPUSH
10638: LD_VAR 0 3
10642: PPUSH
10643: LD_VAR 0 4
10647: PPUSH
10648: LD_VAR 0 5
10652: PPUSH
10653: CALL_OW 448
10657: IFFALSE 10692
// begin result := [ chassis , engine , control , weapon ] ;
10659: LD_ADDR_VAR 0 6
10663: PUSH
10664: LD_VAR 0 2
10668: PUSH
10669: LD_VAR 0 3
10673: PUSH
10674: LD_VAR 0 4
10678: PUSH
10679: LD_VAR 0 5
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: ST_TO_ADDR
// exit ;
10690: GO 11104
// end ; _chassis := AvailableChassisList ( factory ) ;
10692: LD_ADDR_VAR 0 9
10696: PUSH
10697: LD_VAR 0 1
10701: PPUSH
10702: CALL_OW 475
10706: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
10707: LD_ADDR_VAR 0 11
10711: PUSH
10712: LD_VAR 0 1
10716: PPUSH
10717: CALL_OW 476
10721: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
10722: LD_ADDR_VAR 0 12
10726: PUSH
10727: LD_VAR 0 1
10731: PPUSH
10732: CALL_OW 477
10736: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
10737: LD_ADDR_VAR 0 10
10741: PUSH
10742: LD_VAR 0 1
10746: PPUSH
10747: CALL_OW 478
10751: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
10752: LD_VAR 0 9
10756: NOT
10757: PUSH
10758: LD_VAR 0 11
10762: NOT
10763: OR
10764: PUSH
10765: LD_VAR 0 12
10769: NOT
10770: OR
10771: PUSH
10772: LD_VAR 0 10
10776: NOT
10777: OR
10778: IFFALSE 10813
// begin result := [ chassis , engine , control , weapon ] ;
10780: LD_ADDR_VAR 0 6
10784: PUSH
10785: LD_VAR 0 2
10789: PUSH
10790: LD_VAR 0 3
10794: PUSH
10795: LD_VAR 0 4
10799: PUSH
10800: LD_VAR 0 5
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: ST_TO_ADDR
// exit ;
10811: GO 11104
// end ; if not chassis in _chassis then
10813: LD_VAR 0 2
10817: PUSH
10818: LD_VAR 0 9
10822: IN
10823: NOT
10824: IFFALSE 10850
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
10826: LD_ADDR_VAR 0 2
10830: PUSH
10831: LD_VAR 0 9
10835: PUSH
10836: LD_INT 1
10838: PPUSH
10839: LD_VAR 0 9
10843: PPUSH
10844: CALL_OW 12
10848: ARRAY
10849: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
10850: LD_VAR 0 2
10854: PPUSH
10855: LD_VAR 0 3
10859: PPUSH
10860: CALL 11109 0 2
10864: NOT
10865: IFFALSE 10924
// repeat engine := _engine [ 1 ] ;
10867: LD_ADDR_VAR 0 3
10871: PUSH
10872: LD_VAR 0 11
10876: PUSH
10877: LD_INT 1
10879: ARRAY
10880: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
10881: LD_ADDR_VAR 0 11
10885: PUSH
10886: LD_VAR 0 11
10890: PPUSH
10891: LD_INT 1
10893: PPUSH
10894: CALL_OW 3
10898: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
10899: LD_VAR 0 2
10903: PPUSH
10904: LD_VAR 0 3
10908: PPUSH
10909: CALL 11109 0 2
10913: PUSH
10914: LD_VAR 0 11
10918: PUSH
10919: EMPTY
10920: EQUAL
10921: OR
10922: IFFALSE 10867
// if not control in _control then
10924: LD_VAR 0 4
10928: PUSH
10929: LD_VAR 0 12
10933: IN
10934: NOT
10935: IFFALSE 10961
// control := _control [ rand ( 1 , _control ) ] ;
10937: LD_ADDR_VAR 0 4
10941: PUSH
10942: LD_VAR 0 12
10946: PUSH
10947: LD_INT 1
10949: PPUSH
10950: LD_VAR 0 12
10954: PPUSH
10955: CALL_OW 12
10959: ARRAY
10960: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
10961: LD_VAR 0 2
10965: PPUSH
10966: LD_VAR 0 5
10970: PPUSH
10971: CALL 11329 0 2
10975: NOT
10976: IFFALSE 11035
// repeat weapon := _weapon [ 1 ] ;
10978: LD_ADDR_VAR 0 5
10982: PUSH
10983: LD_VAR 0 10
10987: PUSH
10988: LD_INT 1
10990: ARRAY
10991: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
10992: LD_ADDR_VAR 0 10
10996: PUSH
10997: LD_VAR 0 10
11001: PPUSH
11002: LD_INT 1
11004: PPUSH
11005: CALL_OW 3
11009: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11010: LD_VAR 0 2
11014: PPUSH
11015: LD_VAR 0 5
11019: PPUSH
11020: CALL 11329 0 2
11024: PUSH
11025: LD_VAR 0 10
11029: PUSH
11030: EMPTY
11031: EQUAL
11032: OR
11033: IFFALSE 10978
// result := [ ] ;
11035: LD_ADDR_VAR 0 6
11039: PUSH
11040: EMPTY
11041: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11042: LD_VAR 0 1
11046: PPUSH
11047: LD_VAR 0 2
11051: PPUSH
11052: LD_VAR 0 3
11056: PPUSH
11057: LD_VAR 0 4
11061: PPUSH
11062: LD_VAR 0 5
11066: PPUSH
11067: CALL_OW 448
11071: IFFALSE 11104
// result := [ chassis , engine , control , weapon ] ;
11073: LD_ADDR_VAR 0 6
11077: PUSH
11078: LD_VAR 0 2
11082: PUSH
11083: LD_VAR 0 3
11087: PUSH
11088: LD_VAR 0 4
11092: PUSH
11093: LD_VAR 0 5
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: ST_TO_ADDR
// end ;
11104: LD_VAR 0 6
11108: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11109: LD_INT 0
11111: PPUSH
// if not chassis or not engine then
11112: LD_VAR 0 1
11116: NOT
11117: PUSH
11118: LD_VAR 0 2
11122: NOT
11123: OR
11124: IFFALSE 11128
// exit ;
11126: GO 11324
// case engine of engine_solar :
11128: LD_VAR 0 2
11132: PUSH
11133: LD_INT 2
11135: DOUBLE
11136: EQUAL
11137: IFTRUE 11141
11139: GO 11179
11141: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11142: LD_ADDR_VAR 0 3
11146: PUSH
11147: LD_INT 11
11149: PUSH
11150: LD_INT 12
11152: PUSH
11153: LD_INT 13
11155: PUSH
11156: LD_INT 14
11158: PUSH
11159: LD_INT 1
11161: PUSH
11162: LD_INT 2
11164: PUSH
11165: LD_INT 3
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: ST_TO_ADDR
11177: GO 11308
11179: LD_INT 1
11181: DOUBLE
11182: EQUAL
11183: IFTRUE 11187
11185: GO 11249
11187: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11188: LD_ADDR_VAR 0 3
11192: PUSH
11193: LD_INT 11
11195: PUSH
11196: LD_INT 12
11198: PUSH
11199: LD_INT 13
11201: PUSH
11202: LD_INT 14
11204: PUSH
11205: LD_INT 1
11207: PUSH
11208: LD_INT 2
11210: PUSH
11211: LD_INT 3
11213: PUSH
11214: LD_INT 4
11216: PUSH
11217: LD_INT 5
11219: PUSH
11220: LD_INT 21
11222: PUSH
11223: LD_INT 23
11225: PUSH
11226: LD_INT 22
11228: PUSH
11229: LD_INT 24
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: ST_TO_ADDR
11247: GO 11308
11249: LD_INT 3
11251: DOUBLE
11252: EQUAL
11253: IFTRUE 11257
11255: GO 11307
11257: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11258: LD_ADDR_VAR 0 3
11262: PUSH
11263: LD_INT 13
11265: PUSH
11266: LD_INT 14
11268: PUSH
11269: LD_INT 2
11271: PUSH
11272: LD_INT 3
11274: PUSH
11275: LD_INT 4
11277: PUSH
11278: LD_INT 5
11280: PUSH
11281: LD_INT 21
11283: PUSH
11284: LD_INT 22
11286: PUSH
11287: LD_INT 23
11289: PUSH
11290: LD_INT 24
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: ST_TO_ADDR
11305: GO 11308
11307: POP
// result := ( chassis in result ) ;
11308: LD_ADDR_VAR 0 3
11312: PUSH
11313: LD_VAR 0 1
11317: PUSH
11318: LD_VAR 0 3
11322: IN
11323: ST_TO_ADDR
// end ;
11324: LD_VAR 0 3
11328: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11329: LD_INT 0
11331: PPUSH
// if not chassis or not weapon then
11332: LD_VAR 0 1
11336: NOT
11337: PUSH
11338: LD_VAR 0 2
11342: NOT
11343: OR
11344: IFFALSE 11348
// exit ;
11346: GO 12410
// case weapon of us_machine_gun :
11348: LD_VAR 0 2
11352: PUSH
11353: LD_INT 2
11355: DOUBLE
11356: EQUAL
11357: IFTRUE 11361
11359: GO 11391
11361: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11362: LD_ADDR_VAR 0 3
11366: PUSH
11367: LD_INT 1
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: LD_INT 3
11375: PUSH
11376: LD_INT 4
11378: PUSH
11379: LD_INT 5
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: ST_TO_ADDR
11389: GO 12394
11391: LD_INT 3
11393: DOUBLE
11394: EQUAL
11395: IFTRUE 11399
11397: GO 11429
11399: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11400: LD_ADDR_VAR 0 3
11404: PUSH
11405: LD_INT 1
11407: PUSH
11408: LD_INT 2
11410: PUSH
11411: LD_INT 3
11413: PUSH
11414: LD_INT 4
11416: PUSH
11417: LD_INT 5
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: ST_TO_ADDR
11427: GO 12394
11429: LD_INT 11
11431: DOUBLE
11432: EQUAL
11433: IFTRUE 11437
11435: GO 11467
11437: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11438: LD_ADDR_VAR 0 3
11442: PUSH
11443: LD_INT 1
11445: PUSH
11446: LD_INT 2
11448: PUSH
11449: LD_INT 3
11451: PUSH
11452: LD_INT 4
11454: PUSH
11455: LD_INT 5
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: ST_TO_ADDR
11465: GO 12394
11467: LD_INT 4
11469: DOUBLE
11470: EQUAL
11471: IFTRUE 11475
11473: GO 11501
11475: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
11476: LD_ADDR_VAR 0 3
11480: PUSH
11481: LD_INT 2
11483: PUSH
11484: LD_INT 3
11486: PUSH
11487: LD_INT 4
11489: PUSH
11490: LD_INT 5
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: ST_TO_ADDR
11499: GO 12394
11501: LD_INT 5
11503: DOUBLE
11504: EQUAL
11505: IFTRUE 11509
11507: GO 11535
11509: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
11510: LD_ADDR_VAR 0 3
11514: PUSH
11515: LD_INT 2
11517: PUSH
11518: LD_INT 3
11520: PUSH
11521: LD_INT 4
11523: PUSH
11524: LD_INT 5
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: ST_TO_ADDR
11533: GO 12394
11535: LD_INT 9
11537: DOUBLE
11538: EQUAL
11539: IFTRUE 11543
11541: GO 11569
11543: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
11544: LD_ADDR_VAR 0 3
11548: PUSH
11549: LD_INT 2
11551: PUSH
11552: LD_INT 3
11554: PUSH
11555: LD_INT 4
11557: PUSH
11558: LD_INT 5
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: ST_TO_ADDR
11567: GO 12394
11569: LD_INT 7
11571: DOUBLE
11572: EQUAL
11573: IFTRUE 11577
11575: GO 11603
11577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
11578: LD_ADDR_VAR 0 3
11582: PUSH
11583: LD_INT 2
11585: PUSH
11586: LD_INT 3
11588: PUSH
11589: LD_INT 4
11591: PUSH
11592: LD_INT 5
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: ST_TO_ADDR
11601: GO 12394
11603: LD_INT 12
11605: DOUBLE
11606: EQUAL
11607: IFTRUE 11611
11609: GO 11637
11611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
11612: LD_ADDR_VAR 0 3
11616: PUSH
11617: LD_INT 2
11619: PUSH
11620: LD_INT 3
11622: PUSH
11623: LD_INT 4
11625: PUSH
11626: LD_INT 5
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: ST_TO_ADDR
11635: GO 12394
11637: LD_INT 13
11639: DOUBLE
11640: EQUAL
11641: IFTRUE 11645
11643: GO 11671
11645: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
11646: LD_ADDR_VAR 0 3
11650: PUSH
11651: LD_INT 2
11653: PUSH
11654: LD_INT 3
11656: PUSH
11657: LD_INT 4
11659: PUSH
11660: LD_INT 5
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: ST_TO_ADDR
11669: GO 12394
11671: LD_INT 14
11673: DOUBLE
11674: EQUAL
11675: IFTRUE 11679
11677: GO 11697
11679: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
11680: LD_ADDR_VAR 0 3
11684: PUSH
11685: LD_INT 4
11687: PUSH
11688: LD_INT 5
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: ST_TO_ADDR
11695: GO 12394
11697: LD_INT 6
11699: DOUBLE
11700: EQUAL
11701: IFTRUE 11705
11703: GO 11723
11705: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
11706: LD_ADDR_VAR 0 3
11710: PUSH
11711: LD_INT 4
11713: PUSH
11714: LD_INT 5
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: ST_TO_ADDR
11721: GO 12394
11723: LD_INT 10
11725: DOUBLE
11726: EQUAL
11727: IFTRUE 11731
11729: GO 11749
11731: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
11732: LD_ADDR_VAR 0 3
11736: PUSH
11737: LD_INT 4
11739: PUSH
11740: LD_INT 5
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: ST_TO_ADDR
11747: GO 12394
11749: LD_INT 22
11751: DOUBLE
11752: EQUAL
11753: IFTRUE 11757
11755: GO 11783
11757: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
11758: LD_ADDR_VAR 0 3
11762: PUSH
11763: LD_INT 11
11765: PUSH
11766: LD_INT 12
11768: PUSH
11769: LD_INT 13
11771: PUSH
11772: LD_INT 14
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: ST_TO_ADDR
11781: GO 12394
11783: LD_INT 23
11785: DOUBLE
11786: EQUAL
11787: IFTRUE 11791
11789: GO 11817
11791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
11792: LD_ADDR_VAR 0 3
11796: PUSH
11797: LD_INT 11
11799: PUSH
11800: LD_INT 12
11802: PUSH
11803: LD_INT 13
11805: PUSH
11806: LD_INT 14
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: ST_TO_ADDR
11815: GO 12394
11817: LD_INT 24
11819: DOUBLE
11820: EQUAL
11821: IFTRUE 11825
11823: GO 11851
11825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
11826: LD_ADDR_VAR 0 3
11830: PUSH
11831: LD_INT 11
11833: PUSH
11834: LD_INT 12
11836: PUSH
11837: LD_INT 13
11839: PUSH
11840: LD_INT 14
11842: PUSH
11843: EMPTY
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: ST_TO_ADDR
11849: GO 12394
11851: LD_INT 30
11853: DOUBLE
11854: EQUAL
11855: IFTRUE 11859
11857: GO 11885
11859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
11860: LD_ADDR_VAR 0 3
11864: PUSH
11865: LD_INT 11
11867: PUSH
11868: LD_INT 12
11870: PUSH
11871: LD_INT 13
11873: PUSH
11874: LD_INT 14
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: ST_TO_ADDR
11883: GO 12394
11885: LD_INT 25
11887: DOUBLE
11888: EQUAL
11889: IFTRUE 11893
11891: GO 11911
11893: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
11894: LD_ADDR_VAR 0 3
11898: PUSH
11899: LD_INT 13
11901: PUSH
11902: LD_INT 14
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: ST_TO_ADDR
11909: GO 12394
11911: LD_INT 27
11913: DOUBLE
11914: EQUAL
11915: IFTRUE 11919
11917: GO 11937
11919: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
11920: LD_ADDR_VAR 0 3
11924: PUSH
11925: LD_INT 13
11927: PUSH
11928: LD_INT 14
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: ST_TO_ADDR
11935: GO 12394
11937: LD_EXP 80
11941: DOUBLE
11942: EQUAL
11943: IFTRUE 11947
11945: GO 11973
11947: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
11948: LD_ADDR_VAR 0 3
11952: PUSH
11953: LD_INT 11
11955: PUSH
11956: LD_INT 12
11958: PUSH
11959: LD_INT 13
11961: PUSH
11962: LD_INT 14
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: ST_TO_ADDR
11971: GO 12394
11973: LD_INT 28
11975: DOUBLE
11976: EQUAL
11977: IFTRUE 11981
11979: GO 11999
11981: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
11982: LD_ADDR_VAR 0 3
11986: PUSH
11987: LD_INT 13
11989: PUSH
11990: LD_INT 14
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: ST_TO_ADDR
11997: GO 12394
11999: LD_INT 29
12001: DOUBLE
12002: EQUAL
12003: IFTRUE 12007
12005: GO 12025
12007: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12008: LD_ADDR_VAR 0 3
12012: PUSH
12013: LD_INT 13
12015: PUSH
12016: LD_INT 14
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: ST_TO_ADDR
12023: GO 12394
12025: LD_INT 31
12027: DOUBLE
12028: EQUAL
12029: IFTRUE 12033
12031: GO 12051
12033: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12034: LD_ADDR_VAR 0 3
12038: PUSH
12039: LD_INT 13
12041: PUSH
12042: LD_INT 14
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: ST_TO_ADDR
12049: GO 12394
12051: LD_INT 26
12053: DOUBLE
12054: EQUAL
12055: IFTRUE 12059
12057: GO 12077
12059: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12060: LD_ADDR_VAR 0 3
12064: PUSH
12065: LD_INT 13
12067: PUSH
12068: LD_INT 14
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: ST_TO_ADDR
12075: GO 12394
12077: LD_INT 42
12079: DOUBLE
12080: EQUAL
12081: IFTRUE 12085
12083: GO 12111
12085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12086: LD_ADDR_VAR 0 3
12090: PUSH
12091: LD_INT 21
12093: PUSH
12094: LD_INT 22
12096: PUSH
12097: LD_INT 23
12099: PUSH
12100: LD_INT 24
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: ST_TO_ADDR
12109: GO 12394
12111: LD_INT 43
12113: DOUBLE
12114: EQUAL
12115: IFTRUE 12119
12117: GO 12145
12119: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12120: LD_ADDR_VAR 0 3
12124: PUSH
12125: LD_INT 21
12127: PUSH
12128: LD_INT 22
12130: PUSH
12131: LD_INT 23
12133: PUSH
12134: LD_INT 24
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: ST_TO_ADDR
12143: GO 12394
12145: LD_INT 44
12147: DOUBLE
12148: EQUAL
12149: IFTRUE 12153
12151: GO 12179
12153: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12154: LD_ADDR_VAR 0 3
12158: PUSH
12159: LD_INT 21
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_INT 23
12167: PUSH
12168: LD_INT 24
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: ST_TO_ADDR
12177: GO 12394
12179: LD_INT 45
12181: DOUBLE
12182: EQUAL
12183: IFTRUE 12187
12185: GO 12213
12187: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12188: LD_ADDR_VAR 0 3
12192: PUSH
12193: LD_INT 21
12195: PUSH
12196: LD_INT 22
12198: PUSH
12199: LD_INT 23
12201: PUSH
12202: LD_INT 24
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: ST_TO_ADDR
12211: GO 12394
12213: LD_INT 49
12215: DOUBLE
12216: EQUAL
12217: IFTRUE 12221
12219: GO 12247
12221: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12222: LD_ADDR_VAR 0 3
12226: PUSH
12227: LD_INT 21
12229: PUSH
12230: LD_INT 22
12232: PUSH
12233: LD_INT 23
12235: PUSH
12236: LD_INT 24
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: ST_TO_ADDR
12245: GO 12394
12247: LD_INT 51
12249: DOUBLE
12250: EQUAL
12251: IFTRUE 12255
12253: GO 12281
12255: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12256: LD_ADDR_VAR 0 3
12260: PUSH
12261: LD_INT 21
12263: PUSH
12264: LD_INT 22
12266: PUSH
12267: LD_INT 23
12269: PUSH
12270: LD_INT 24
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: ST_TO_ADDR
12279: GO 12394
12281: LD_INT 52
12283: DOUBLE
12284: EQUAL
12285: IFTRUE 12289
12287: GO 12315
12289: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12290: LD_ADDR_VAR 0 3
12294: PUSH
12295: LD_INT 21
12297: PUSH
12298: LD_INT 22
12300: PUSH
12301: LD_INT 23
12303: PUSH
12304: LD_INT 24
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: ST_TO_ADDR
12313: GO 12394
12315: LD_INT 53
12317: DOUBLE
12318: EQUAL
12319: IFTRUE 12323
12321: GO 12341
12323: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12324: LD_ADDR_VAR 0 3
12328: PUSH
12329: LD_INT 23
12331: PUSH
12332: LD_INT 24
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: ST_TO_ADDR
12339: GO 12394
12341: LD_INT 46
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12367
12349: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12350: LD_ADDR_VAR 0 3
12354: PUSH
12355: LD_INT 23
12357: PUSH
12358: LD_INT 24
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: ST_TO_ADDR
12365: GO 12394
12367: LD_INT 47
12369: DOUBLE
12370: EQUAL
12371: IFTRUE 12375
12373: GO 12393
12375: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12376: LD_ADDR_VAR 0 3
12380: PUSH
12381: LD_INT 23
12383: PUSH
12384: LD_INT 24
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: ST_TO_ADDR
12391: GO 12394
12393: POP
// result := ( chassis in result ) ;
12394: LD_ADDR_VAR 0 3
12398: PUSH
12399: LD_VAR 0 1
12403: PUSH
12404: LD_VAR 0 3
12408: IN
12409: ST_TO_ADDR
// end ;
12410: LD_VAR 0 3
12414: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12415: LD_INT 0
12417: PPUSH
12418: PPUSH
12419: PPUSH
12420: PPUSH
12421: PPUSH
12422: PPUSH
12423: PPUSH
// result := array ;
12424: LD_ADDR_VAR 0 5
12428: PUSH
12429: LD_VAR 0 1
12433: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12434: LD_VAR 0 1
12438: NOT
12439: PUSH
12440: LD_VAR 0 2
12444: NOT
12445: OR
12446: PUSH
12447: LD_VAR 0 3
12451: NOT
12452: OR
12453: PUSH
12454: LD_VAR 0 2
12458: PUSH
12459: LD_VAR 0 1
12463: GREATER
12464: OR
12465: PUSH
12466: LD_VAR 0 3
12470: PUSH
12471: LD_VAR 0 1
12475: GREATER
12476: OR
12477: IFFALSE 12481
// exit ;
12479: GO 12777
// if direction then
12481: LD_VAR 0 4
12485: IFFALSE 12549
// begin d := 1 ;
12487: LD_ADDR_VAR 0 9
12491: PUSH
12492: LD_INT 1
12494: ST_TO_ADDR
// if i_from > i_to then
12495: LD_VAR 0 2
12499: PUSH
12500: LD_VAR 0 3
12504: GREATER
12505: IFFALSE 12531
// length := ( array - i_from ) + i_to else
12507: LD_ADDR_VAR 0 11
12511: PUSH
12512: LD_VAR 0 1
12516: PUSH
12517: LD_VAR 0 2
12521: MINUS
12522: PUSH
12523: LD_VAR 0 3
12527: PLUS
12528: ST_TO_ADDR
12529: GO 12547
// length := i_to - i_from ;
12531: LD_ADDR_VAR 0 11
12535: PUSH
12536: LD_VAR 0 3
12540: PUSH
12541: LD_VAR 0 2
12545: MINUS
12546: ST_TO_ADDR
// end else
12547: GO 12610
// begin d := - 1 ;
12549: LD_ADDR_VAR 0 9
12553: PUSH
12554: LD_INT 1
12556: NEG
12557: ST_TO_ADDR
// if i_from > i_to then
12558: LD_VAR 0 2
12562: PUSH
12563: LD_VAR 0 3
12567: GREATER
12568: IFFALSE 12588
// length := i_from - i_to else
12570: LD_ADDR_VAR 0 11
12574: PUSH
12575: LD_VAR 0 2
12579: PUSH
12580: LD_VAR 0 3
12584: MINUS
12585: ST_TO_ADDR
12586: GO 12610
// length := ( array - i_to ) + i_from ;
12588: LD_ADDR_VAR 0 11
12592: PUSH
12593: LD_VAR 0 1
12597: PUSH
12598: LD_VAR 0 3
12602: MINUS
12603: PUSH
12604: LD_VAR 0 2
12608: PLUS
12609: ST_TO_ADDR
// end ; if not length then
12610: LD_VAR 0 11
12614: NOT
12615: IFFALSE 12619
// exit ;
12617: GO 12777
// tmp := array ;
12619: LD_ADDR_VAR 0 10
12623: PUSH
12624: LD_VAR 0 1
12628: ST_TO_ADDR
// for i = 1 to length do
12629: LD_ADDR_VAR 0 6
12633: PUSH
12634: DOUBLE
12635: LD_INT 1
12637: DEC
12638: ST_TO_ADDR
12639: LD_VAR 0 11
12643: PUSH
12644: FOR_TO
12645: IFFALSE 12765
// begin for j = 1 to array do
12647: LD_ADDR_VAR 0 7
12651: PUSH
12652: DOUBLE
12653: LD_INT 1
12655: DEC
12656: ST_TO_ADDR
12657: LD_VAR 0 1
12661: PUSH
12662: FOR_TO
12663: IFFALSE 12751
// begin k := j + d ;
12665: LD_ADDR_VAR 0 8
12669: PUSH
12670: LD_VAR 0 7
12674: PUSH
12675: LD_VAR 0 9
12679: PLUS
12680: ST_TO_ADDR
// if k > array then
12681: LD_VAR 0 8
12685: PUSH
12686: LD_VAR 0 1
12690: GREATER
12691: IFFALSE 12701
// k := 1 ;
12693: LD_ADDR_VAR 0 8
12697: PUSH
12698: LD_INT 1
12700: ST_TO_ADDR
// if not k then
12701: LD_VAR 0 8
12705: NOT
12706: IFFALSE 12718
// k := array ;
12708: LD_ADDR_VAR 0 8
12712: PUSH
12713: LD_VAR 0 1
12717: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
12718: LD_ADDR_VAR 0 10
12722: PUSH
12723: LD_VAR 0 10
12727: PPUSH
12728: LD_VAR 0 8
12732: PPUSH
12733: LD_VAR 0 1
12737: PUSH
12738: LD_VAR 0 7
12742: ARRAY
12743: PPUSH
12744: CALL_OW 1
12748: ST_TO_ADDR
// end ;
12749: GO 12662
12751: POP
12752: POP
// array := tmp ;
12753: LD_ADDR_VAR 0 1
12757: PUSH
12758: LD_VAR 0 10
12762: ST_TO_ADDR
// end ;
12763: GO 12644
12765: POP
12766: POP
// result := array ;
12767: LD_ADDR_VAR 0 5
12771: PUSH
12772: LD_VAR 0 1
12776: ST_TO_ADDR
// end ;
12777: LD_VAR 0 5
12781: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
12782: LD_INT 0
12784: PPUSH
12785: PPUSH
// result := 0 ;
12786: LD_ADDR_VAR 0 3
12790: PUSH
12791: LD_INT 0
12793: ST_TO_ADDR
// if not array or not value in array then
12794: LD_VAR 0 1
12798: NOT
12799: PUSH
12800: LD_VAR 0 2
12804: PUSH
12805: LD_VAR 0 1
12809: IN
12810: NOT
12811: OR
12812: IFFALSE 12816
// exit ;
12814: GO 12870
// for i = 1 to array do
12816: LD_ADDR_VAR 0 4
12820: PUSH
12821: DOUBLE
12822: LD_INT 1
12824: DEC
12825: ST_TO_ADDR
12826: LD_VAR 0 1
12830: PUSH
12831: FOR_TO
12832: IFFALSE 12868
// if value = array [ i ] then
12834: LD_VAR 0 2
12838: PUSH
12839: LD_VAR 0 1
12843: PUSH
12844: LD_VAR 0 4
12848: ARRAY
12849: EQUAL
12850: IFFALSE 12866
// begin result := i ;
12852: LD_ADDR_VAR 0 3
12856: PUSH
12857: LD_VAR 0 4
12861: ST_TO_ADDR
// exit ;
12862: POP
12863: POP
12864: GO 12870
// end ;
12866: GO 12831
12868: POP
12869: POP
// end ;
12870: LD_VAR 0 3
12874: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
12875: LD_INT 0
12877: PPUSH
// vc_chassis := chassis ;
12878: LD_ADDR_OWVAR 37
12882: PUSH
12883: LD_VAR 0 1
12887: ST_TO_ADDR
// vc_engine := engine ;
12888: LD_ADDR_OWVAR 39
12892: PUSH
12893: LD_VAR 0 2
12897: ST_TO_ADDR
// vc_control := control ;
12898: LD_ADDR_OWVAR 38
12902: PUSH
12903: LD_VAR 0 3
12907: ST_TO_ADDR
// vc_weapon := weapon ;
12908: LD_ADDR_OWVAR 40
12912: PUSH
12913: LD_VAR 0 4
12917: ST_TO_ADDR
// vc_fuel_battery := fuel ;
12918: LD_ADDR_OWVAR 41
12922: PUSH
12923: LD_VAR 0 5
12927: ST_TO_ADDR
// end ;
12928: LD_VAR 0 6
12932: RET
// export function WantPlant ( unit ) ; var task ; begin
12933: LD_INT 0
12935: PPUSH
12936: PPUSH
// result := false ;
12937: LD_ADDR_VAR 0 2
12941: PUSH
12942: LD_INT 0
12944: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
12945: LD_ADDR_VAR 0 3
12949: PUSH
12950: LD_VAR 0 1
12954: PPUSH
12955: CALL_OW 437
12959: ST_TO_ADDR
// if task then
12960: LD_VAR 0 3
12964: IFFALSE 12992
// if task [ 1 ] [ 1 ] = p then
12966: LD_VAR 0 3
12970: PUSH
12971: LD_INT 1
12973: ARRAY
12974: PUSH
12975: LD_INT 1
12977: ARRAY
12978: PUSH
12979: LD_STRING p
12981: EQUAL
12982: IFFALSE 12992
// result := true ;
12984: LD_ADDR_VAR 0 2
12988: PUSH
12989: LD_INT 1
12991: ST_TO_ADDR
// end ;
12992: LD_VAR 0 2
12996: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
12997: LD_INT 0
12999: PPUSH
13000: PPUSH
13001: PPUSH
13002: PPUSH
// if pos < 1 then
13003: LD_VAR 0 2
13007: PUSH
13008: LD_INT 1
13010: LESS
13011: IFFALSE 13015
// exit ;
13013: GO 13318
// if pos = 1 then
13015: LD_VAR 0 2
13019: PUSH
13020: LD_INT 1
13022: EQUAL
13023: IFFALSE 13056
// result := Replace ( arr , pos [ 1 ] , value ) else
13025: LD_ADDR_VAR 0 4
13029: PUSH
13030: LD_VAR 0 1
13034: PPUSH
13035: LD_VAR 0 2
13039: PUSH
13040: LD_INT 1
13042: ARRAY
13043: PPUSH
13044: LD_VAR 0 3
13048: PPUSH
13049: CALL_OW 1
13053: ST_TO_ADDR
13054: GO 13318
// begin tmp := arr ;
13056: LD_ADDR_VAR 0 6
13060: PUSH
13061: LD_VAR 0 1
13065: ST_TO_ADDR
// s_arr := [ tmp ] ;
13066: LD_ADDR_VAR 0 7
13070: PUSH
13071: LD_VAR 0 6
13075: PUSH
13076: EMPTY
13077: LIST
13078: ST_TO_ADDR
// for i = 1 to pos - 1 do
13079: LD_ADDR_VAR 0 5
13083: PUSH
13084: DOUBLE
13085: LD_INT 1
13087: DEC
13088: ST_TO_ADDR
13089: LD_VAR 0 2
13093: PUSH
13094: LD_INT 1
13096: MINUS
13097: PUSH
13098: FOR_TO
13099: IFFALSE 13144
// begin tmp := tmp [ pos [ i ] ] ;
13101: LD_ADDR_VAR 0 6
13105: PUSH
13106: LD_VAR 0 6
13110: PUSH
13111: LD_VAR 0 2
13115: PUSH
13116: LD_VAR 0 5
13120: ARRAY
13121: ARRAY
13122: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13123: LD_ADDR_VAR 0 7
13127: PUSH
13128: LD_VAR 0 7
13132: PUSH
13133: LD_VAR 0 6
13137: PUSH
13138: EMPTY
13139: LIST
13140: ADD
13141: ST_TO_ADDR
// end ;
13142: GO 13098
13144: POP
13145: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13146: LD_ADDR_VAR 0 6
13150: PUSH
13151: LD_VAR 0 6
13155: PPUSH
13156: LD_VAR 0 2
13160: PUSH
13161: LD_VAR 0 2
13165: ARRAY
13166: PPUSH
13167: LD_VAR 0 3
13171: PPUSH
13172: CALL_OW 1
13176: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13177: LD_ADDR_VAR 0 7
13181: PUSH
13182: LD_VAR 0 7
13186: PPUSH
13187: LD_VAR 0 7
13191: PPUSH
13192: LD_VAR 0 6
13196: PPUSH
13197: CALL_OW 1
13201: ST_TO_ADDR
// for i = s_arr downto 2 do
13202: LD_ADDR_VAR 0 5
13206: PUSH
13207: DOUBLE
13208: LD_VAR 0 7
13212: INC
13213: ST_TO_ADDR
13214: LD_INT 2
13216: PUSH
13217: FOR_DOWNTO
13218: IFFALSE 13302
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13220: LD_ADDR_VAR 0 6
13224: PUSH
13225: LD_VAR 0 7
13229: PUSH
13230: LD_VAR 0 5
13234: PUSH
13235: LD_INT 1
13237: MINUS
13238: ARRAY
13239: PPUSH
13240: LD_VAR 0 2
13244: PUSH
13245: LD_VAR 0 5
13249: PUSH
13250: LD_INT 1
13252: MINUS
13253: ARRAY
13254: PPUSH
13255: LD_VAR 0 7
13259: PUSH
13260: LD_VAR 0 5
13264: ARRAY
13265: PPUSH
13266: CALL_OW 1
13270: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13271: LD_ADDR_VAR 0 7
13275: PUSH
13276: LD_VAR 0 7
13280: PPUSH
13281: LD_VAR 0 5
13285: PUSH
13286: LD_INT 1
13288: MINUS
13289: PPUSH
13290: LD_VAR 0 6
13294: PPUSH
13295: CALL_OW 1
13299: ST_TO_ADDR
// end ;
13300: GO 13217
13302: POP
13303: POP
// result := s_arr [ 1 ] ;
13304: LD_ADDR_VAR 0 4
13308: PUSH
13309: LD_VAR 0 7
13313: PUSH
13314: LD_INT 1
13316: ARRAY
13317: ST_TO_ADDR
// end ; end ;
13318: LD_VAR 0 4
13322: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13323: LD_INT 0
13325: PPUSH
13326: PPUSH
// if not list then
13327: LD_VAR 0 1
13331: NOT
13332: IFFALSE 13336
// exit ;
13334: GO 13427
// i := list [ pos1 ] ;
13336: LD_ADDR_VAR 0 5
13340: PUSH
13341: LD_VAR 0 1
13345: PUSH
13346: LD_VAR 0 2
13350: ARRAY
13351: ST_TO_ADDR
// if not i then
13352: LD_VAR 0 5
13356: NOT
13357: IFFALSE 13361
// exit ;
13359: GO 13427
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13361: LD_ADDR_VAR 0 1
13365: PUSH
13366: LD_VAR 0 1
13370: PPUSH
13371: LD_VAR 0 2
13375: PPUSH
13376: LD_VAR 0 1
13380: PUSH
13381: LD_VAR 0 3
13385: ARRAY
13386: PPUSH
13387: CALL_OW 1
13391: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13392: LD_ADDR_VAR 0 1
13396: PUSH
13397: LD_VAR 0 1
13401: PPUSH
13402: LD_VAR 0 3
13406: PPUSH
13407: LD_VAR 0 5
13411: PPUSH
13412: CALL_OW 1
13416: ST_TO_ADDR
// result := list ;
13417: LD_ADDR_VAR 0 4
13421: PUSH
13422: LD_VAR 0 1
13426: ST_TO_ADDR
// end ;
13427: LD_VAR 0 4
13431: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13432: LD_INT 0
13434: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13435: LD_ADDR_VAR 0 5
13439: PUSH
13440: LD_VAR 0 1
13444: PPUSH
13445: CALL_OW 250
13449: PPUSH
13450: LD_VAR 0 1
13454: PPUSH
13455: CALL_OW 251
13459: PPUSH
13460: LD_VAR 0 2
13464: PPUSH
13465: LD_VAR 0 3
13469: PPUSH
13470: LD_VAR 0 4
13474: PPUSH
13475: CALL 13485 0 5
13479: ST_TO_ADDR
// end ;
13480: LD_VAR 0 5
13484: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
13485: LD_INT 0
13487: PPUSH
13488: PPUSH
13489: PPUSH
13490: PPUSH
// if not list then
13491: LD_VAR 0 3
13495: NOT
13496: IFFALSE 13500
// exit ;
13498: GO 13888
// result := [ ] ;
13500: LD_ADDR_VAR 0 6
13504: PUSH
13505: EMPTY
13506: ST_TO_ADDR
// for i in list do
13507: LD_ADDR_VAR 0 7
13511: PUSH
13512: LD_VAR 0 3
13516: PUSH
13517: FOR_IN
13518: IFFALSE 13720
// begin tmp := GetDistUnitXY ( i , x , y ) ;
13520: LD_ADDR_VAR 0 9
13524: PUSH
13525: LD_VAR 0 7
13529: PPUSH
13530: LD_VAR 0 1
13534: PPUSH
13535: LD_VAR 0 2
13539: PPUSH
13540: CALL_OW 297
13544: ST_TO_ADDR
// if not result then
13545: LD_VAR 0 6
13549: NOT
13550: IFFALSE 13576
// result := [ [ i , tmp ] ] else
13552: LD_ADDR_VAR 0 6
13556: PUSH
13557: LD_VAR 0 7
13561: PUSH
13562: LD_VAR 0 9
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: EMPTY
13572: LIST
13573: ST_TO_ADDR
13574: GO 13718
// begin if result [ result ] [ 2 ] < tmp then
13576: LD_VAR 0 6
13580: PUSH
13581: LD_VAR 0 6
13585: ARRAY
13586: PUSH
13587: LD_INT 2
13589: ARRAY
13590: PUSH
13591: LD_VAR 0 9
13595: LESS
13596: IFFALSE 13638
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
13598: LD_ADDR_VAR 0 6
13602: PUSH
13603: LD_VAR 0 6
13607: PPUSH
13608: LD_VAR 0 6
13612: PUSH
13613: LD_INT 1
13615: PLUS
13616: PPUSH
13617: LD_VAR 0 7
13621: PUSH
13622: LD_VAR 0 9
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: PPUSH
13631: CALL_OW 2
13635: ST_TO_ADDR
13636: GO 13718
// for j = 1 to result do
13638: LD_ADDR_VAR 0 8
13642: PUSH
13643: DOUBLE
13644: LD_INT 1
13646: DEC
13647: ST_TO_ADDR
13648: LD_VAR 0 6
13652: PUSH
13653: FOR_TO
13654: IFFALSE 13716
// begin if tmp < result [ j ] [ 2 ] then
13656: LD_VAR 0 9
13660: PUSH
13661: LD_VAR 0 6
13665: PUSH
13666: LD_VAR 0 8
13670: ARRAY
13671: PUSH
13672: LD_INT 2
13674: ARRAY
13675: LESS
13676: IFFALSE 13714
// begin result := Insert ( result , j , [ i , tmp ] ) ;
13678: LD_ADDR_VAR 0 6
13682: PUSH
13683: LD_VAR 0 6
13687: PPUSH
13688: LD_VAR 0 8
13692: PPUSH
13693: LD_VAR 0 7
13697: PUSH
13698: LD_VAR 0 9
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PPUSH
13707: CALL_OW 2
13711: ST_TO_ADDR
// break ;
13712: GO 13716
// end ; end ;
13714: GO 13653
13716: POP
13717: POP
// end ; end ;
13718: GO 13517
13720: POP
13721: POP
// if result and not asc then
13722: LD_VAR 0 6
13726: PUSH
13727: LD_VAR 0 4
13731: NOT
13732: AND
13733: IFFALSE 13808
// begin tmp := result ;
13735: LD_ADDR_VAR 0 9
13739: PUSH
13740: LD_VAR 0 6
13744: ST_TO_ADDR
// for i = tmp downto 1 do
13745: LD_ADDR_VAR 0 7
13749: PUSH
13750: DOUBLE
13751: LD_VAR 0 9
13755: INC
13756: ST_TO_ADDR
13757: LD_INT 1
13759: PUSH
13760: FOR_DOWNTO
13761: IFFALSE 13806
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
13763: LD_ADDR_VAR 0 6
13767: PUSH
13768: LD_VAR 0 6
13772: PPUSH
13773: LD_VAR 0 9
13777: PUSH
13778: LD_VAR 0 7
13782: MINUS
13783: PUSH
13784: LD_INT 1
13786: PLUS
13787: PPUSH
13788: LD_VAR 0 9
13792: PUSH
13793: LD_VAR 0 7
13797: ARRAY
13798: PPUSH
13799: CALL_OW 1
13803: ST_TO_ADDR
13804: GO 13760
13806: POP
13807: POP
// end ; tmp := [ ] ;
13808: LD_ADDR_VAR 0 9
13812: PUSH
13813: EMPTY
13814: ST_TO_ADDR
// if mode then
13815: LD_VAR 0 5
13819: IFFALSE 13888
// begin for i = 1 to result do
13821: LD_ADDR_VAR 0 7
13825: PUSH
13826: DOUBLE
13827: LD_INT 1
13829: DEC
13830: ST_TO_ADDR
13831: LD_VAR 0 6
13835: PUSH
13836: FOR_TO
13837: IFFALSE 13876
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
13839: LD_ADDR_VAR 0 9
13843: PUSH
13844: LD_VAR 0 9
13848: PPUSH
13849: LD_VAR 0 7
13853: PPUSH
13854: LD_VAR 0 6
13858: PUSH
13859: LD_VAR 0 7
13863: ARRAY
13864: PUSH
13865: LD_INT 1
13867: ARRAY
13868: PPUSH
13869: CALL_OW 1
13873: ST_TO_ADDR
13874: GO 13836
13876: POP
13877: POP
// result := tmp ;
13878: LD_ADDR_VAR 0 6
13882: PUSH
13883: LD_VAR 0 9
13887: ST_TO_ADDR
// end ; end ;
13888: LD_VAR 0 6
13892: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
13893: LD_INT 0
13895: PPUSH
13896: PPUSH
13897: PPUSH
13898: PPUSH
13899: PPUSH
13900: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
13901: LD_ADDR_VAR 0 5
13905: PUSH
13906: LD_INT 0
13908: PUSH
13909: LD_INT 0
13911: PUSH
13912: LD_INT 0
13914: PUSH
13915: EMPTY
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: ST_TO_ADDR
// if not x or not y then
13923: LD_VAR 0 2
13927: NOT
13928: PUSH
13929: LD_VAR 0 3
13933: NOT
13934: OR
13935: IFFALSE 13939
// exit ;
13937: GO 15591
// if not range then
13939: LD_VAR 0 4
13943: NOT
13944: IFFALSE 13954
// range := 10 ;
13946: LD_ADDR_VAR 0 4
13950: PUSH
13951: LD_INT 10
13953: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13954: LD_ADDR_VAR 0 8
13958: PUSH
13959: LD_INT 81
13961: PUSH
13962: LD_VAR 0 1
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 92
13973: PUSH
13974: LD_VAR 0 2
13978: PUSH
13979: LD_VAR 0 3
13983: PUSH
13984: LD_VAR 0 4
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 3
13997: PUSH
13998: LD_INT 21
14000: PUSH
14001: LD_INT 3
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: PPUSH
14017: CALL_OW 69
14021: ST_TO_ADDR
// if not tmp then
14022: LD_VAR 0 8
14026: NOT
14027: IFFALSE 14031
// exit ;
14029: GO 15591
// for i in tmp do
14031: LD_ADDR_VAR 0 6
14035: PUSH
14036: LD_VAR 0 8
14040: PUSH
14041: FOR_IN
14042: IFFALSE 15566
// begin points := [ 0 , 0 , 0 ] ;
14044: LD_ADDR_VAR 0 9
14048: PUSH
14049: LD_INT 0
14051: PUSH
14052: LD_INT 0
14054: PUSH
14055: LD_INT 0
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: LIST
14062: ST_TO_ADDR
// bpoints := 1 ;
14063: LD_ADDR_VAR 0 10
14067: PUSH
14068: LD_INT 1
14070: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14071: LD_VAR 0 6
14075: PPUSH
14076: CALL_OW 247
14080: PUSH
14081: LD_INT 1
14083: DOUBLE
14084: EQUAL
14085: IFTRUE 14089
14087: GO 14667
14089: POP
// begin if GetClass ( i ) = 1 then
14090: LD_VAR 0 6
14094: PPUSH
14095: CALL_OW 257
14099: PUSH
14100: LD_INT 1
14102: EQUAL
14103: IFFALSE 14124
// points := [ 10 , 5 , 3 ] ;
14105: LD_ADDR_VAR 0 9
14109: PUSH
14110: LD_INT 10
14112: PUSH
14113: LD_INT 5
14115: PUSH
14116: LD_INT 3
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14124: LD_VAR 0 6
14128: PPUSH
14129: CALL_OW 257
14133: PUSH
14134: LD_INT 2
14136: PUSH
14137: LD_INT 3
14139: PUSH
14140: LD_INT 4
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: IN
14148: IFFALSE 14169
// points := [ 3 , 2 , 1 ] ;
14150: LD_ADDR_VAR 0 9
14154: PUSH
14155: LD_INT 3
14157: PUSH
14158: LD_INT 2
14160: PUSH
14161: LD_INT 1
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14169: LD_VAR 0 6
14173: PPUSH
14174: CALL_OW 257
14178: PUSH
14179: LD_INT 5
14181: EQUAL
14182: IFFALSE 14203
// points := [ 130 , 5 , 2 ] ;
14184: LD_ADDR_VAR 0 9
14188: PUSH
14189: LD_INT 130
14191: PUSH
14192: LD_INT 5
14194: PUSH
14195: LD_INT 2
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: LIST
14202: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14203: LD_VAR 0 6
14207: PPUSH
14208: CALL_OW 257
14212: PUSH
14213: LD_INT 8
14215: EQUAL
14216: IFFALSE 14237
// points := [ 35 , 35 , 30 ] ;
14218: LD_ADDR_VAR 0 9
14222: PUSH
14223: LD_INT 35
14225: PUSH
14226: LD_INT 35
14228: PUSH
14229: LD_INT 30
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: LIST
14236: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14237: LD_VAR 0 6
14241: PPUSH
14242: CALL_OW 257
14246: PUSH
14247: LD_INT 9
14249: EQUAL
14250: IFFALSE 14271
// points := [ 20 , 55 , 40 ] ;
14252: LD_ADDR_VAR 0 9
14256: PUSH
14257: LD_INT 20
14259: PUSH
14260: LD_INT 55
14262: PUSH
14263: LD_INT 40
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: LIST
14270: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14271: LD_VAR 0 6
14275: PPUSH
14276: CALL_OW 257
14280: PUSH
14281: LD_INT 12
14283: PUSH
14284: LD_INT 16
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: IN
14291: IFFALSE 14312
// points := [ 5 , 3 , 2 ] ;
14293: LD_ADDR_VAR 0 9
14297: PUSH
14298: LD_INT 5
14300: PUSH
14301: LD_INT 3
14303: PUSH
14304: LD_INT 2
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: LIST
14311: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14312: LD_VAR 0 6
14316: PPUSH
14317: CALL_OW 257
14321: PUSH
14322: LD_INT 17
14324: EQUAL
14325: IFFALSE 14346
// points := [ 100 , 50 , 75 ] ;
14327: LD_ADDR_VAR 0 9
14331: PUSH
14332: LD_INT 100
14334: PUSH
14335: LD_INT 50
14337: PUSH
14338: LD_INT 75
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: LIST
14345: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14346: LD_VAR 0 6
14350: PPUSH
14351: CALL_OW 257
14355: PUSH
14356: LD_INT 15
14358: EQUAL
14359: IFFALSE 14380
// points := [ 10 , 5 , 3 ] ;
14361: LD_ADDR_VAR 0 9
14365: PUSH
14366: LD_INT 10
14368: PUSH
14369: LD_INT 5
14371: PUSH
14372: LD_INT 3
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14380: LD_VAR 0 6
14384: PPUSH
14385: CALL_OW 257
14389: PUSH
14390: LD_INT 14
14392: EQUAL
14393: IFFALSE 14414
// points := [ 10 , 0 , 0 ] ;
14395: LD_ADDR_VAR 0 9
14399: PUSH
14400: LD_INT 10
14402: PUSH
14403: LD_INT 0
14405: PUSH
14406: LD_INT 0
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14414: LD_VAR 0 6
14418: PPUSH
14419: CALL_OW 257
14423: PUSH
14424: LD_INT 11
14426: EQUAL
14427: IFFALSE 14448
// points := [ 30 , 10 , 5 ] ;
14429: LD_ADDR_VAR 0 9
14433: PUSH
14434: LD_INT 30
14436: PUSH
14437: LD_INT 10
14439: PUSH
14440: LD_INT 5
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14448: LD_VAR 0 1
14452: PPUSH
14453: LD_INT 5
14455: PPUSH
14456: CALL_OW 321
14460: PUSH
14461: LD_INT 2
14463: EQUAL
14464: IFFALSE 14481
// bpoints := bpoints * 1.8 ;
14466: LD_ADDR_VAR 0 10
14470: PUSH
14471: LD_VAR 0 10
14475: PUSH
14476: LD_REAL  1.80000000000000E+0000
14479: MUL
14480: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
14481: LD_VAR 0 6
14485: PPUSH
14486: CALL_OW 257
14490: PUSH
14491: LD_INT 1
14493: PUSH
14494: LD_INT 2
14496: PUSH
14497: LD_INT 3
14499: PUSH
14500: LD_INT 4
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: IN
14509: PUSH
14510: LD_VAR 0 1
14514: PPUSH
14515: LD_INT 51
14517: PPUSH
14518: CALL_OW 321
14522: PUSH
14523: LD_INT 2
14525: EQUAL
14526: AND
14527: IFFALSE 14544
// bpoints := bpoints * 1.2 ;
14529: LD_ADDR_VAR 0 10
14533: PUSH
14534: LD_VAR 0 10
14538: PUSH
14539: LD_REAL  1.20000000000000E+0000
14542: MUL
14543: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
14544: LD_VAR 0 6
14548: PPUSH
14549: CALL_OW 257
14553: PUSH
14554: LD_INT 5
14556: PUSH
14557: LD_INT 7
14559: PUSH
14560: LD_INT 9
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: LIST
14567: IN
14568: PUSH
14569: LD_VAR 0 1
14573: PPUSH
14574: LD_INT 52
14576: PPUSH
14577: CALL_OW 321
14581: PUSH
14582: LD_INT 2
14584: EQUAL
14585: AND
14586: IFFALSE 14603
// bpoints := bpoints * 1.5 ;
14588: LD_ADDR_VAR 0 10
14592: PUSH
14593: LD_VAR 0 10
14597: PUSH
14598: LD_REAL  1.50000000000000E+0000
14601: MUL
14602: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
14603: LD_VAR 0 1
14607: PPUSH
14608: LD_INT 66
14610: PPUSH
14611: CALL_OW 321
14615: PUSH
14616: LD_INT 2
14618: EQUAL
14619: IFFALSE 14636
// bpoints := bpoints * 1.1 ;
14621: LD_ADDR_VAR 0 10
14625: PUSH
14626: LD_VAR 0 10
14630: PUSH
14631: LD_REAL  1.10000000000000E+0000
14634: MUL
14635: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
14636: LD_ADDR_VAR 0 10
14640: PUSH
14641: LD_VAR 0 10
14645: PUSH
14646: LD_VAR 0 6
14650: PPUSH
14651: LD_INT 1
14653: PPUSH
14654: CALL_OW 259
14658: PUSH
14659: LD_REAL  1.15000000000000E+0000
14662: MUL
14663: MUL
14664: ST_TO_ADDR
// end ; unit_vehicle :
14665: GO 15495
14667: LD_INT 2
14669: DOUBLE
14670: EQUAL
14671: IFTRUE 14675
14673: GO 15483
14675: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
14676: LD_VAR 0 6
14680: PPUSH
14681: CALL_OW 264
14685: PUSH
14686: LD_INT 2
14688: PUSH
14689: LD_INT 42
14691: PUSH
14692: LD_INT 24
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: LIST
14699: IN
14700: IFFALSE 14721
// points := [ 25 , 5 , 3 ] ;
14702: LD_ADDR_VAR 0 9
14706: PUSH
14707: LD_INT 25
14709: PUSH
14710: LD_INT 5
14712: PUSH
14713: LD_INT 3
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
14721: LD_VAR 0 6
14725: PPUSH
14726: CALL_OW 264
14730: PUSH
14731: LD_INT 4
14733: PUSH
14734: LD_INT 43
14736: PUSH
14737: LD_INT 25
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: IN
14745: IFFALSE 14766
// points := [ 40 , 15 , 5 ] ;
14747: LD_ADDR_VAR 0 9
14751: PUSH
14752: LD_INT 40
14754: PUSH
14755: LD_INT 15
14757: PUSH
14758: LD_INT 5
14760: PUSH
14761: EMPTY
14762: LIST
14763: LIST
14764: LIST
14765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
14766: LD_VAR 0 6
14770: PPUSH
14771: CALL_OW 264
14775: PUSH
14776: LD_INT 3
14778: PUSH
14779: LD_INT 23
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: IN
14786: IFFALSE 14807
// points := [ 7 , 25 , 8 ] ;
14788: LD_ADDR_VAR 0 9
14792: PUSH
14793: LD_INT 7
14795: PUSH
14796: LD_INT 25
14798: PUSH
14799: LD_INT 8
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: LIST
14806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
14807: LD_VAR 0 6
14811: PPUSH
14812: CALL_OW 264
14816: PUSH
14817: LD_INT 5
14819: PUSH
14820: LD_INT 27
14822: PUSH
14823: LD_INT 44
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: IN
14831: IFFALSE 14852
// points := [ 14 , 50 , 16 ] ;
14833: LD_ADDR_VAR 0 9
14837: PUSH
14838: LD_INT 14
14840: PUSH
14841: LD_INT 50
14843: PUSH
14844: LD_INT 16
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: LIST
14851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
14852: LD_VAR 0 6
14856: PPUSH
14857: CALL_OW 264
14861: PUSH
14862: LD_INT 6
14864: PUSH
14865: LD_INT 46
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: IN
14872: IFFALSE 14893
// points := [ 32 , 120 , 70 ] ;
14874: LD_ADDR_VAR 0 9
14878: PUSH
14879: LD_INT 32
14881: PUSH
14882: LD_INT 120
14884: PUSH
14885: LD_INT 70
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: LIST
14892: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
14893: LD_VAR 0 6
14897: PPUSH
14898: CALL_OW 264
14902: PUSH
14903: LD_INT 7
14905: PUSH
14906: LD_INT 28
14908: PUSH
14909: LD_INT 45
14911: PUSH
14912: LD_EXP 80
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: IN
14923: IFFALSE 14944
// points := [ 35 , 20 , 45 ] ;
14925: LD_ADDR_VAR 0 9
14929: PUSH
14930: LD_INT 35
14932: PUSH
14933: LD_INT 20
14935: PUSH
14936: LD_INT 45
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
14944: LD_VAR 0 6
14948: PPUSH
14949: CALL_OW 264
14953: PUSH
14954: LD_INT 47
14956: PUSH
14957: EMPTY
14958: LIST
14959: IN
14960: IFFALSE 14981
// points := [ 67 , 45 , 75 ] ;
14962: LD_ADDR_VAR 0 9
14966: PUSH
14967: LD_INT 67
14969: PUSH
14970: LD_INT 45
14972: PUSH
14973: LD_INT 75
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
14981: LD_VAR 0 6
14985: PPUSH
14986: CALL_OW 264
14990: PUSH
14991: LD_INT 26
14993: PUSH
14994: EMPTY
14995: LIST
14996: IN
14997: IFFALSE 15018
// points := [ 120 , 30 , 80 ] ;
14999: LD_ADDR_VAR 0 9
15003: PUSH
15004: LD_INT 120
15006: PUSH
15007: LD_INT 30
15009: PUSH
15010: LD_INT 80
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: LIST
15017: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15018: LD_VAR 0 6
15022: PPUSH
15023: CALL_OW 264
15027: PUSH
15028: LD_INT 22
15030: PUSH
15031: EMPTY
15032: LIST
15033: IN
15034: IFFALSE 15055
// points := [ 40 , 1 , 1 ] ;
15036: LD_ADDR_VAR 0 9
15040: PUSH
15041: LD_INT 40
15043: PUSH
15044: LD_INT 1
15046: PUSH
15047: LD_INT 1
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: LIST
15054: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15055: LD_VAR 0 6
15059: PPUSH
15060: CALL_OW 264
15064: PUSH
15065: LD_INT 29
15067: PUSH
15068: EMPTY
15069: LIST
15070: IN
15071: IFFALSE 15092
// points := [ 70 , 200 , 400 ] ;
15073: LD_ADDR_VAR 0 9
15077: PUSH
15078: LD_INT 70
15080: PUSH
15081: LD_INT 200
15083: PUSH
15084: LD_INT 400
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: LIST
15091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15092: LD_VAR 0 6
15096: PPUSH
15097: CALL_OW 264
15101: PUSH
15102: LD_INT 14
15104: PUSH
15105: LD_INT 53
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: IN
15112: IFFALSE 15133
// points := [ 40 , 10 , 20 ] ;
15114: LD_ADDR_VAR 0 9
15118: PUSH
15119: LD_INT 40
15121: PUSH
15122: LD_INT 10
15124: PUSH
15125: LD_INT 20
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15133: LD_VAR 0 6
15137: PPUSH
15138: CALL_OW 264
15142: PUSH
15143: LD_INT 9
15145: PUSH
15146: EMPTY
15147: LIST
15148: IN
15149: IFFALSE 15170
// points := [ 5 , 70 , 20 ] ;
15151: LD_ADDR_VAR 0 9
15155: PUSH
15156: LD_INT 5
15158: PUSH
15159: LD_INT 70
15161: PUSH
15162: LD_INT 20
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: LIST
15169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15170: LD_VAR 0 6
15174: PPUSH
15175: CALL_OW 264
15179: PUSH
15180: LD_INT 10
15182: PUSH
15183: EMPTY
15184: LIST
15185: IN
15186: IFFALSE 15207
// points := [ 35 , 110 , 70 ] ;
15188: LD_ADDR_VAR 0 9
15192: PUSH
15193: LD_INT 35
15195: PUSH
15196: LD_INT 110
15198: PUSH
15199: LD_INT 70
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: LIST
15206: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15207: LD_VAR 0 6
15211: PPUSH
15212: CALL_OW 265
15216: PUSH
15217: LD_INT 25
15219: EQUAL
15220: IFFALSE 15241
// points := [ 80 , 65 , 100 ] ;
15222: LD_ADDR_VAR 0 9
15226: PUSH
15227: LD_INT 80
15229: PUSH
15230: LD_INT 65
15232: PUSH
15233: LD_INT 100
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15241: LD_VAR 0 6
15245: PPUSH
15246: CALL_OW 263
15250: PUSH
15251: LD_INT 1
15253: EQUAL
15254: IFFALSE 15289
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15256: LD_ADDR_VAR 0 10
15260: PUSH
15261: LD_VAR 0 10
15265: PUSH
15266: LD_VAR 0 6
15270: PPUSH
15271: CALL_OW 311
15275: PPUSH
15276: LD_INT 3
15278: PPUSH
15279: CALL_OW 259
15283: PUSH
15284: LD_INT 4
15286: MUL
15287: MUL
15288: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15289: LD_VAR 0 6
15293: PPUSH
15294: CALL_OW 263
15298: PUSH
15299: LD_INT 2
15301: EQUAL
15302: IFFALSE 15353
// begin j := IsControledBy ( i ) ;
15304: LD_ADDR_VAR 0 7
15308: PUSH
15309: LD_VAR 0 6
15313: PPUSH
15314: CALL_OW 312
15318: ST_TO_ADDR
// if j then
15319: LD_VAR 0 7
15323: IFFALSE 15353
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15325: LD_ADDR_VAR 0 10
15329: PUSH
15330: LD_VAR 0 10
15334: PUSH
15335: LD_VAR 0 7
15339: PPUSH
15340: LD_INT 3
15342: PPUSH
15343: CALL_OW 259
15347: PUSH
15348: LD_INT 3
15350: MUL
15351: MUL
15352: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15353: LD_VAR 0 6
15357: PPUSH
15358: CALL_OW 264
15362: PUSH
15363: LD_INT 5
15365: PUSH
15366: LD_INT 6
15368: PUSH
15369: LD_INT 46
15371: PUSH
15372: LD_INT 44
15374: PUSH
15375: LD_INT 47
15377: PUSH
15378: LD_INT 45
15380: PUSH
15381: LD_INT 28
15383: PUSH
15384: LD_INT 7
15386: PUSH
15387: LD_INT 27
15389: PUSH
15390: LD_INT 29
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: IN
15405: PUSH
15406: LD_VAR 0 1
15410: PPUSH
15411: LD_INT 52
15413: PPUSH
15414: CALL_OW 321
15418: PUSH
15419: LD_INT 2
15421: EQUAL
15422: AND
15423: IFFALSE 15440
// bpoints := bpoints * 1.2 ;
15425: LD_ADDR_VAR 0 10
15429: PUSH
15430: LD_VAR 0 10
15434: PUSH
15435: LD_REAL  1.20000000000000E+0000
15438: MUL
15439: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15440: LD_VAR 0 6
15444: PPUSH
15445: CALL_OW 264
15449: PUSH
15450: LD_INT 6
15452: PUSH
15453: LD_INT 46
15455: PUSH
15456: LD_INT 47
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: LIST
15463: IN
15464: IFFALSE 15481
// bpoints := bpoints * 1.2 ;
15466: LD_ADDR_VAR 0 10
15470: PUSH
15471: LD_VAR 0 10
15475: PUSH
15476: LD_REAL  1.20000000000000E+0000
15479: MUL
15480: ST_TO_ADDR
// end ; unit_building :
15481: GO 15495
15483: LD_INT 3
15485: DOUBLE
15486: EQUAL
15487: IFTRUE 15491
15489: GO 15494
15491: POP
// ; end ;
15492: GO 15495
15494: POP
// for j = 1 to 3 do
15495: LD_ADDR_VAR 0 7
15499: PUSH
15500: DOUBLE
15501: LD_INT 1
15503: DEC
15504: ST_TO_ADDR
15505: LD_INT 3
15507: PUSH
15508: FOR_TO
15509: IFFALSE 15562
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
15511: LD_ADDR_VAR 0 5
15515: PUSH
15516: LD_VAR 0 5
15520: PPUSH
15521: LD_VAR 0 7
15525: PPUSH
15526: LD_VAR 0 5
15530: PUSH
15531: LD_VAR 0 7
15535: ARRAY
15536: PUSH
15537: LD_VAR 0 9
15541: PUSH
15542: LD_VAR 0 7
15546: ARRAY
15547: PUSH
15548: LD_VAR 0 10
15552: MUL
15553: PLUS
15554: PPUSH
15555: CALL_OW 1
15559: ST_TO_ADDR
15560: GO 15508
15562: POP
15563: POP
// end ;
15564: GO 14041
15566: POP
15567: POP
// result := Replace ( result , 4 , tmp ) ;
15568: LD_ADDR_VAR 0 5
15572: PUSH
15573: LD_VAR 0 5
15577: PPUSH
15578: LD_INT 4
15580: PPUSH
15581: LD_VAR 0 8
15585: PPUSH
15586: CALL_OW 1
15590: ST_TO_ADDR
// end ;
15591: LD_VAR 0 5
15595: RET
// export function DangerAtRange ( unit , range ) ; begin
15596: LD_INT 0
15598: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
15599: LD_ADDR_VAR 0 3
15603: PUSH
15604: LD_VAR 0 1
15608: PPUSH
15609: CALL_OW 255
15613: PPUSH
15614: LD_VAR 0 1
15618: PPUSH
15619: CALL_OW 250
15623: PPUSH
15624: LD_VAR 0 1
15628: PPUSH
15629: CALL_OW 251
15633: PPUSH
15634: LD_VAR 0 2
15638: PPUSH
15639: CALL 13893 0 4
15643: ST_TO_ADDR
// end ;
15644: LD_VAR 0 3
15648: RET
// export function DangerInArea ( side , area ) ; begin
15649: LD_INT 0
15651: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
15652: LD_ADDR_VAR 0 3
15656: PUSH
15657: LD_VAR 0 2
15661: PPUSH
15662: LD_INT 81
15664: PUSH
15665: LD_VAR 0 1
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PPUSH
15674: CALL_OW 70
15678: ST_TO_ADDR
// end ;
15679: LD_VAR 0 3
15683: RET
// export function IsExtension ( b ) ; begin
15684: LD_INT 0
15686: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
15687: LD_ADDR_VAR 0 2
15691: PUSH
15692: LD_VAR 0 1
15696: PUSH
15697: LD_INT 23
15699: PUSH
15700: LD_INT 20
15702: PUSH
15703: LD_INT 22
15705: PUSH
15706: LD_INT 17
15708: PUSH
15709: LD_INT 24
15711: PUSH
15712: LD_INT 21
15714: PUSH
15715: LD_INT 19
15717: PUSH
15718: LD_INT 16
15720: PUSH
15721: LD_INT 25
15723: PUSH
15724: LD_INT 18
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: IN
15739: ST_TO_ADDR
// end ;
15740: LD_VAR 0 2
15744: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
15745: LD_INT 0
15747: PPUSH
15748: PPUSH
15749: PPUSH
// result := [ ] ;
15750: LD_ADDR_VAR 0 4
15754: PUSH
15755: EMPTY
15756: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
15757: LD_ADDR_VAR 0 5
15761: PUSH
15762: LD_VAR 0 2
15766: PPUSH
15767: LD_INT 21
15769: PUSH
15770: LD_INT 3
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PPUSH
15777: CALL_OW 70
15781: ST_TO_ADDR
// if not tmp then
15782: LD_VAR 0 5
15786: NOT
15787: IFFALSE 15791
// exit ;
15789: GO 15855
// if checkLink then
15791: LD_VAR 0 3
15795: IFFALSE 15845
// begin for i in tmp do
15797: LD_ADDR_VAR 0 6
15801: PUSH
15802: LD_VAR 0 5
15806: PUSH
15807: FOR_IN
15808: IFFALSE 15843
// if GetBase ( i ) <> base then
15810: LD_VAR 0 6
15814: PPUSH
15815: CALL_OW 274
15819: PUSH
15820: LD_VAR 0 1
15824: NONEQUAL
15825: IFFALSE 15841
// ComLinkToBase ( base , i ) ;
15827: LD_VAR 0 1
15831: PPUSH
15832: LD_VAR 0 6
15836: PPUSH
15837: CALL_OW 169
15841: GO 15807
15843: POP
15844: POP
// end ; result := tmp ;
15845: LD_ADDR_VAR 0 4
15849: PUSH
15850: LD_VAR 0 5
15854: ST_TO_ADDR
// end ;
15855: LD_VAR 0 4
15859: RET
// export function ComComplete ( units , b ) ; var i ; begin
15860: LD_INT 0
15862: PPUSH
15863: PPUSH
// if not units then
15864: LD_VAR 0 1
15868: NOT
15869: IFFALSE 15873
// exit ;
15871: GO 15963
// for i in units do
15873: LD_ADDR_VAR 0 4
15877: PUSH
15878: LD_VAR 0 1
15882: PUSH
15883: FOR_IN
15884: IFFALSE 15961
// if BuildingStatus ( b ) = bs_build then
15886: LD_VAR 0 2
15890: PPUSH
15891: CALL_OW 461
15895: PUSH
15896: LD_INT 1
15898: EQUAL
15899: IFFALSE 15959
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
15901: LD_VAR 0 4
15905: PPUSH
15906: LD_STRING h
15908: PUSH
15909: LD_VAR 0 2
15913: PPUSH
15914: CALL_OW 250
15918: PUSH
15919: LD_VAR 0 2
15923: PPUSH
15924: CALL_OW 251
15928: PUSH
15929: LD_VAR 0 2
15933: PUSH
15934: LD_INT 0
15936: PUSH
15937: LD_INT 0
15939: PUSH
15940: LD_INT 0
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: PPUSH
15955: CALL_OW 446
15959: GO 15883
15961: POP
15962: POP
// end ;
15963: LD_VAR 0 3
15967: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
15968: LD_INT 0
15970: PPUSH
15971: PPUSH
15972: PPUSH
15973: PPUSH
15974: PPUSH
15975: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
15976: LD_VAR 0 1
15980: NOT
15981: PUSH
15982: LD_VAR 0 1
15986: PPUSH
15987: CALL_OW 263
15991: PUSH
15992: LD_INT 2
15994: NONEQUAL
15995: OR
15996: IFFALSE 16000
// exit ;
15998: GO 16316
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16000: LD_ADDR_VAR 0 6
16004: PUSH
16005: LD_INT 22
16007: PUSH
16008: LD_VAR 0 1
16012: PPUSH
16013: CALL_OW 255
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: LD_INT 30
16027: PUSH
16028: LD_INT 36
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 34
16037: PUSH
16038: LD_INT 31
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PPUSH
16054: CALL_OW 69
16058: ST_TO_ADDR
// if not tmp then
16059: LD_VAR 0 6
16063: NOT
16064: IFFALSE 16068
// exit ;
16066: GO 16316
// result := [ ] ;
16068: LD_ADDR_VAR 0 2
16072: PUSH
16073: EMPTY
16074: ST_TO_ADDR
// for i in tmp do
16075: LD_ADDR_VAR 0 3
16079: PUSH
16080: LD_VAR 0 6
16084: PUSH
16085: FOR_IN
16086: IFFALSE 16157
// begin t := UnitsInside ( i ) ;
16088: LD_ADDR_VAR 0 4
16092: PUSH
16093: LD_VAR 0 3
16097: PPUSH
16098: CALL_OW 313
16102: ST_TO_ADDR
// if t then
16103: LD_VAR 0 4
16107: IFFALSE 16155
// for j in t do
16109: LD_ADDR_VAR 0 7
16113: PUSH
16114: LD_VAR 0 4
16118: PUSH
16119: FOR_IN
16120: IFFALSE 16153
// result := Replace ( result , result + 1 , j ) ;
16122: LD_ADDR_VAR 0 2
16126: PUSH
16127: LD_VAR 0 2
16131: PPUSH
16132: LD_VAR 0 2
16136: PUSH
16137: LD_INT 1
16139: PLUS
16140: PPUSH
16141: LD_VAR 0 7
16145: PPUSH
16146: CALL_OW 1
16150: ST_TO_ADDR
16151: GO 16119
16153: POP
16154: POP
// end ;
16155: GO 16085
16157: POP
16158: POP
// if not result then
16159: LD_VAR 0 2
16163: NOT
16164: IFFALSE 16168
// exit ;
16166: GO 16316
// mech := result [ 1 ] ;
16168: LD_ADDR_VAR 0 5
16172: PUSH
16173: LD_VAR 0 2
16177: PUSH
16178: LD_INT 1
16180: ARRAY
16181: ST_TO_ADDR
// if result > 1 then
16182: LD_VAR 0 2
16186: PUSH
16187: LD_INT 1
16189: GREATER
16190: IFFALSE 16302
// begin for i = 2 to result do
16192: LD_ADDR_VAR 0 3
16196: PUSH
16197: DOUBLE
16198: LD_INT 2
16200: DEC
16201: ST_TO_ADDR
16202: LD_VAR 0 2
16206: PUSH
16207: FOR_TO
16208: IFFALSE 16300
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16210: LD_ADDR_VAR 0 4
16214: PUSH
16215: LD_VAR 0 2
16219: PUSH
16220: LD_VAR 0 3
16224: ARRAY
16225: PPUSH
16226: LD_INT 3
16228: PPUSH
16229: CALL_OW 259
16233: PUSH
16234: LD_VAR 0 2
16238: PUSH
16239: LD_VAR 0 3
16243: ARRAY
16244: PPUSH
16245: CALL_OW 432
16249: MINUS
16250: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16251: LD_VAR 0 4
16255: PUSH
16256: LD_VAR 0 5
16260: PPUSH
16261: LD_INT 3
16263: PPUSH
16264: CALL_OW 259
16268: PUSH
16269: LD_VAR 0 5
16273: PPUSH
16274: CALL_OW 432
16278: MINUS
16279: GREATEREQUAL
16280: IFFALSE 16298
// mech := result [ i ] ;
16282: LD_ADDR_VAR 0 5
16286: PUSH
16287: LD_VAR 0 2
16291: PUSH
16292: LD_VAR 0 3
16296: ARRAY
16297: ST_TO_ADDR
// end ;
16298: GO 16207
16300: POP
16301: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16302: LD_VAR 0 1
16306: PPUSH
16307: LD_VAR 0 5
16311: PPUSH
16312: CALL_OW 135
// end ;
16316: LD_VAR 0 2
16320: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16321: LD_INT 0
16323: PPUSH
16324: PPUSH
16325: PPUSH
16326: PPUSH
16327: PPUSH
16328: PPUSH
16329: PPUSH
16330: PPUSH
16331: PPUSH
16332: PPUSH
16333: PPUSH
16334: PPUSH
16335: PPUSH
// result := [ ] ;
16336: LD_ADDR_VAR 0 7
16340: PUSH
16341: EMPTY
16342: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16343: LD_VAR 0 1
16347: PPUSH
16348: CALL_OW 266
16352: PUSH
16353: LD_INT 0
16355: PUSH
16356: LD_INT 1
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: IN
16363: NOT
16364: IFFALSE 16368
// exit ;
16366: GO 18002
// if name then
16368: LD_VAR 0 3
16372: IFFALSE 16388
// SetBName ( base_dep , name ) ;
16374: LD_VAR 0 1
16378: PPUSH
16379: LD_VAR 0 3
16383: PPUSH
16384: CALL_OW 500
// base := GetBase ( base_dep ) ;
16388: LD_ADDR_VAR 0 15
16392: PUSH
16393: LD_VAR 0 1
16397: PPUSH
16398: CALL_OW 274
16402: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16403: LD_ADDR_VAR 0 16
16407: PUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 255
16417: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16418: LD_ADDR_VAR 0 17
16422: PUSH
16423: LD_VAR 0 1
16427: PPUSH
16428: CALL_OW 248
16432: ST_TO_ADDR
// if sources then
16433: LD_VAR 0 5
16437: IFFALSE 16484
// for i = 1 to 3 do
16439: LD_ADDR_VAR 0 8
16443: PUSH
16444: DOUBLE
16445: LD_INT 1
16447: DEC
16448: ST_TO_ADDR
16449: LD_INT 3
16451: PUSH
16452: FOR_TO
16453: IFFALSE 16482
// AddResourceType ( base , i , sources [ i ] ) ;
16455: LD_VAR 0 15
16459: PPUSH
16460: LD_VAR 0 8
16464: PPUSH
16465: LD_VAR 0 5
16469: PUSH
16470: LD_VAR 0 8
16474: ARRAY
16475: PPUSH
16476: CALL_OW 276
16480: GO 16452
16482: POP
16483: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
16484: LD_ADDR_VAR 0 18
16488: PUSH
16489: LD_VAR 0 15
16493: PPUSH
16494: LD_VAR 0 2
16498: PPUSH
16499: LD_INT 1
16501: PPUSH
16502: CALL 15745 0 3
16506: ST_TO_ADDR
// InitHc ;
16507: CALL_OW 19
// InitUc ;
16511: CALL_OW 18
// uc_side := side ;
16515: LD_ADDR_OWVAR 20
16519: PUSH
16520: LD_VAR 0 16
16524: ST_TO_ADDR
// uc_nation := nation ;
16525: LD_ADDR_OWVAR 21
16529: PUSH
16530: LD_VAR 0 17
16534: ST_TO_ADDR
// if buildings then
16535: LD_VAR 0 18
16539: IFFALSE 17861
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
16541: LD_ADDR_VAR 0 19
16545: PUSH
16546: LD_VAR 0 18
16550: PPUSH
16551: LD_INT 2
16553: PUSH
16554: LD_INT 30
16556: PUSH
16557: LD_INT 29
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 30
16566: PUSH
16567: LD_INT 30
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: LIST
16578: PPUSH
16579: CALL_OW 72
16583: ST_TO_ADDR
// if tmp then
16584: LD_VAR 0 19
16588: IFFALSE 16636
// for i in tmp do
16590: LD_ADDR_VAR 0 8
16594: PUSH
16595: LD_VAR 0 19
16599: PUSH
16600: FOR_IN
16601: IFFALSE 16634
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
16603: LD_VAR 0 8
16607: PPUSH
16608: CALL_OW 250
16612: PPUSH
16613: LD_VAR 0 8
16617: PPUSH
16618: CALL_OW 251
16622: PPUSH
16623: LD_VAR 0 16
16627: PPUSH
16628: CALL_OW 441
16632: GO 16600
16634: POP
16635: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
16636: LD_VAR 0 18
16640: PPUSH
16641: LD_INT 2
16643: PUSH
16644: LD_INT 30
16646: PUSH
16647: LD_INT 32
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 30
16656: PUSH
16657: LD_INT 33
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: LIST
16668: PPUSH
16669: CALL_OW 72
16673: IFFALSE 16761
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
16675: LD_ADDR_VAR 0 8
16679: PUSH
16680: LD_VAR 0 18
16684: PPUSH
16685: LD_INT 2
16687: PUSH
16688: LD_INT 30
16690: PUSH
16691: LD_INT 32
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 30
16700: PUSH
16701: LD_INT 33
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: LIST
16712: PPUSH
16713: CALL_OW 72
16717: PUSH
16718: FOR_IN
16719: IFFALSE 16759
// begin if not GetBWeapon ( i ) then
16721: LD_VAR 0 8
16725: PPUSH
16726: CALL_OW 269
16730: NOT
16731: IFFALSE 16757
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
16733: LD_VAR 0 8
16737: PPUSH
16738: LD_VAR 0 8
16742: PPUSH
16743: LD_VAR 0 2
16747: PPUSH
16748: CALL 18007 0 2
16752: PPUSH
16753: CALL_OW 431
// end ;
16757: GO 16718
16759: POP
16760: POP
// end ; for i = 1 to personel do
16761: LD_ADDR_VAR 0 8
16765: PUSH
16766: DOUBLE
16767: LD_INT 1
16769: DEC
16770: ST_TO_ADDR
16771: LD_VAR 0 6
16775: PUSH
16776: FOR_TO
16777: IFFALSE 17841
// begin if i > 4 then
16779: LD_VAR 0 8
16783: PUSH
16784: LD_INT 4
16786: GREATER
16787: IFFALSE 16791
// break ;
16789: GO 17841
// case i of 1 :
16791: LD_VAR 0 8
16795: PUSH
16796: LD_INT 1
16798: DOUBLE
16799: EQUAL
16800: IFTRUE 16804
16802: GO 16884
16804: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
16805: LD_ADDR_VAR 0 12
16809: PUSH
16810: LD_VAR 0 18
16814: PPUSH
16815: LD_INT 22
16817: PUSH
16818: LD_VAR 0 16
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 58
16829: PUSH
16830: EMPTY
16831: LIST
16832: PUSH
16833: LD_INT 2
16835: PUSH
16836: LD_INT 30
16838: PUSH
16839: LD_INT 32
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 30
16848: PUSH
16849: LD_INT 4
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_INT 30
16858: PUSH
16859: LD_INT 5
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: LIST
16876: PPUSH
16877: CALL_OW 72
16881: ST_TO_ADDR
16882: GO 17106
16884: LD_INT 2
16886: DOUBLE
16887: EQUAL
16888: IFTRUE 16892
16890: GO 16954
16892: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
16893: LD_ADDR_VAR 0 12
16897: PUSH
16898: LD_VAR 0 18
16902: PPUSH
16903: LD_INT 22
16905: PUSH
16906: LD_VAR 0 16
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 2
16917: PUSH
16918: LD_INT 30
16920: PUSH
16921: LD_INT 0
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 30
16930: PUSH
16931: LD_INT 1
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PPUSH
16947: CALL_OW 72
16951: ST_TO_ADDR
16952: GO 17106
16954: LD_INT 3
16956: DOUBLE
16957: EQUAL
16958: IFTRUE 16962
16960: GO 17024
16962: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
16963: LD_ADDR_VAR 0 12
16967: PUSH
16968: LD_VAR 0 18
16972: PPUSH
16973: LD_INT 22
16975: PUSH
16976: LD_VAR 0 16
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 2
16987: PUSH
16988: LD_INT 30
16990: PUSH
16991: LD_INT 2
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 30
17000: PUSH
17001: LD_INT 3
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: LIST
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PPUSH
17017: CALL_OW 72
17021: ST_TO_ADDR
17022: GO 17106
17024: LD_INT 4
17026: DOUBLE
17027: EQUAL
17028: IFTRUE 17032
17030: GO 17105
17032: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17033: LD_ADDR_VAR 0 12
17037: PUSH
17038: LD_VAR 0 18
17042: PPUSH
17043: LD_INT 22
17045: PUSH
17046: LD_VAR 0 16
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 2
17057: PUSH
17058: LD_INT 30
17060: PUSH
17061: LD_INT 6
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 30
17070: PUSH
17071: LD_INT 7
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 30
17080: PUSH
17081: LD_INT 8
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PPUSH
17098: CALL_OW 72
17102: ST_TO_ADDR
17103: GO 17106
17105: POP
// if i = 1 then
17106: LD_VAR 0 8
17110: PUSH
17111: LD_INT 1
17113: EQUAL
17114: IFFALSE 17225
// begin tmp := [ ] ;
17116: LD_ADDR_VAR 0 19
17120: PUSH
17121: EMPTY
17122: ST_TO_ADDR
// for j in f do
17123: LD_ADDR_VAR 0 9
17127: PUSH
17128: LD_VAR 0 12
17132: PUSH
17133: FOR_IN
17134: IFFALSE 17207
// if GetBType ( j ) = b_bunker then
17136: LD_VAR 0 9
17140: PPUSH
17141: CALL_OW 266
17145: PUSH
17146: LD_INT 32
17148: EQUAL
17149: IFFALSE 17176
// tmp := Insert ( tmp , 1 , j ) else
17151: LD_ADDR_VAR 0 19
17155: PUSH
17156: LD_VAR 0 19
17160: PPUSH
17161: LD_INT 1
17163: PPUSH
17164: LD_VAR 0 9
17168: PPUSH
17169: CALL_OW 2
17173: ST_TO_ADDR
17174: GO 17205
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17176: LD_ADDR_VAR 0 19
17180: PUSH
17181: LD_VAR 0 19
17185: PPUSH
17186: LD_VAR 0 19
17190: PUSH
17191: LD_INT 1
17193: PLUS
17194: PPUSH
17195: LD_VAR 0 9
17199: PPUSH
17200: CALL_OW 2
17204: ST_TO_ADDR
17205: GO 17133
17207: POP
17208: POP
// if tmp then
17209: LD_VAR 0 19
17213: IFFALSE 17225
// f := tmp ;
17215: LD_ADDR_VAR 0 12
17219: PUSH
17220: LD_VAR 0 19
17224: ST_TO_ADDR
// end ; x := personel [ i ] ;
17225: LD_ADDR_VAR 0 13
17229: PUSH
17230: LD_VAR 0 6
17234: PUSH
17235: LD_VAR 0 8
17239: ARRAY
17240: ST_TO_ADDR
// if x = - 1 then
17241: LD_VAR 0 13
17245: PUSH
17246: LD_INT 1
17248: NEG
17249: EQUAL
17250: IFFALSE 17459
// begin for j in f do
17252: LD_ADDR_VAR 0 9
17256: PUSH
17257: LD_VAR 0 12
17261: PUSH
17262: FOR_IN
17263: IFFALSE 17455
// repeat InitHc ;
17265: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17269: LD_VAR 0 9
17273: PPUSH
17274: CALL_OW 266
17278: PUSH
17279: LD_INT 5
17281: EQUAL
17282: IFFALSE 17352
// begin if UnitsInside ( j ) < 3 then
17284: LD_VAR 0 9
17288: PPUSH
17289: CALL_OW 313
17293: PUSH
17294: LD_INT 3
17296: LESS
17297: IFFALSE 17333
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17299: LD_INT 0
17301: PPUSH
17302: LD_INT 5
17304: PUSH
17305: LD_INT 8
17307: PUSH
17308: LD_INT 9
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: PUSH
17316: LD_VAR 0 17
17320: ARRAY
17321: PPUSH
17322: LD_VAR 0 4
17326: PPUSH
17327: CALL_OW 380
17331: GO 17350
// PrepareHuman ( false , i , skill ) ;
17333: LD_INT 0
17335: PPUSH
17336: LD_VAR 0 8
17340: PPUSH
17341: LD_VAR 0 4
17345: PPUSH
17346: CALL_OW 380
// end else
17350: GO 17369
// PrepareHuman ( false , i , skill ) ;
17352: LD_INT 0
17354: PPUSH
17355: LD_VAR 0 8
17359: PPUSH
17360: LD_VAR 0 4
17364: PPUSH
17365: CALL_OW 380
// un := CreateHuman ;
17369: LD_ADDR_VAR 0 14
17373: PUSH
17374: CALL_OW 44
17378: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17379: LD_ADDR_VAR 0 7
17383: PUSH
17384: LD_VAR 0 7
17388: PPUSH
17389: LD_INT 1
17391: PPUSH
17392: LD_VAR 0 14
17396: PPUSH
17397: CALL_OW 2
17401: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17402: LD_VAR 0 14
17406: PPUSH
17407: LD_VAR 0 9
17411: PPUSH
17412: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17416: LD_VAR 0 9
17420: PPUSH
17421: CALL_OW 313
17425: PUSH
17426: LD_INT 6
17428: EQUAL
17429: PUSH
17430: LD_VAR 0 9
17434: PPUSH
17435: CALL_OW 266
17439: PUSH
17440: LD_INT 32
17442: PUSH
17443: LD_INT 31
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: IN
17450: OR
17451: IFFALSE 17265
17453: GO 17262
17455: POP
17456: POP
// end else
17457: GO 17839
// for j = 1 to x do
17459: LD_ADDR_VAR 0 9
17463: PUSH
17464: DOUBLE
17465: LD_INT 1
17467: DEC
17468: ST_TO_ADDR
17469: LD_VAR 0 13
17473: PUSH
17474: FOR_TO
17475: IFFALSE 17837
// begin InitHc ;
17477: CALL_OW 19
// if not f then
17481: LD_VAR 0 12
17485: NOT
17486: IFFALSE 17575
// begin PrepareHuman ( false , i , skill ) ;
17488: LD_INT 0
17490: PPUSH
17491: LD_VAR 0 8
17495: PPUSH
17496: LD_VAR 0 4
17500: PPUSH
17501: CALL_OW 380
// un := CreateHuman ;
17505: LD_ADDR_VAR 0 14
17509: PUSH
17510: CALL_OW 44
17514: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17515: LD_ADDR_VAR 0 7
17519: PUSH
17520: LD_VAR 0 7
17524: PPUSH
17525: LD_INT 1
17527: PPUSH
17528: LD_VAR 0 14
17532: PPUSH
17533: CALL_OW 2
17537: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17538: LD_VAR 0 14
17542: PPUSH
17543: LD_VAR 0 1
17547: PPUSH
17548: CALL_OW 250
17552: PPUSH
17553: LD_VAR 0 1
17557: PPUSH
17558: CALL_OW 251
17562: PPUSH
17563: LD_INT 10
17565: PPUSH
17566: LD_INT 0
17568: PPUSH
17569: CALL_OW 50
// continue ;
17573: GO 17474
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
17575: LD_VAR 0 12
17579: PUSH
17580: LD_INT 1
17582: ARRAY
17583: PPUSH
17584: CALL_OW 313
17588: PUSH
17589: LD_VAR 0 12
17593: PUSH
17594: LD_INT 1
17596: ARRAY
17597: PPUSH
17598: CALL_OW 266
17602: PUSH
17603: LD_INT 32
17605: PUSH
17606: LD_INT 31
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: IN
17613: AND
17614: PUSH
17615: LD_VAR 0 12
17619: PUSH
17620: LD_INT 1
17622: ARRAY
17623: PPUSH
17624: CALL_OW 313
17628: PUSH
17629: LD_INT 6
17631: EQUAL
17632: OR
17633: IFFALSE 17653
// f := Delete ( f , 1 ) ;
17635: LD_ADDR_VAR 0 12
17639: PUSH
17640: LD_VAR 0 12
17644: PPUSH
17645: LD_INT 1
17647: PPUSH
17648: CALL_OW 3
17652: ST_TO_ADDR
// if not f then
17653: LD_VAR 0 12
17657: NOT
17658: IFFALSE 17676
// begin x := x + 2 ;
17660: LD_ADDR_VAR 0 13
17664: PUSH
17665: LD_VAR 0 13
17669: PUSH
17670: LD_INT 2
17672: PLUS
17673: ST_TO_ADDR
// continue ;
17674: GO 17474
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
17676: LD_VAR 0 12
17680: PUSH
17681: LD_INT 1
17683: ARRAY
17684: PPUSH
17685: CALL_OW 266
17689: PUSH
17690: LD_INT 5
17692: EQUAL
17693: IFFALSE 17767
// begin if UnitsInside ( f [ 1 ] ) < 3 then
17695: LD_VAR 0 12
17699: PUSH
17700: LD_INT 1
17702: ARRAY
17703: PPUSH
17704: CALL_OW 313
17708: PUSH
17709: LD_INT 3
17711: LESS
17712: IFFALSE 17748
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17714: LD_INT 0
17716: PPUSH
17717: LD_INT 5
17719: PUSH
17720: LD_INT 8
17722: PUSH
17723: LD_INT 9
17725: PUSH
17726: EMPTY
17727: LIST
17728: LIST
17729: LIST
17730: PUSH
17731: LD_VAR 0 17
17735: ARRAY
17736: PPUSH
17737: LD_VAR 0 4
17741: PPUSH
17742: CALL_OW 380
17746: GO 17765
// PrepareHuman ( false , i , skill ) ;
17748: LD_INT 0
17750: PPUSH
17751: LD_VAR 0 8
17755: PPUSH
17756: LD_VAR 0 4
17760: PPUSH
17761: CALL_OW 380
// end else
17765: GO 17784
// PrepareHuman ( false , i , skill ) ;
17767: LD_INT 0
17769: PPUSH
17770: LD_VAR 0 8
17774: PPUSH
17775: LD_VAR 0 4
17779: PPUSH
17780: CALL_OW 380
// un := CreateHuman ;
17784: LD_ADDR_VAR 0 14
17788: PUSH
17789: CALL_OW 44
17793: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17794: LD_ADDR_VAR 0 7
17798: PUSH
17799: LD_VAR 0 7
17803: PPUSH
17804: LD_INT 1
17806: PPUSH
17807: LD_VAR 0 14
17811: PPUSH
17812: CALL_OW 2
17816: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
17817: LD_VAR 0 14
17821: PPUSH
17822: LD_VAR 0 12
17826: PUSH
17827: LD_INT 1
17829: ARRAY
17830: PPUSH
17831: CALL_OW 52
// end ;
17835: GO 17474
17837: POP
17838: POP
// end ;
17839: GO 16776
17841: POP
17842: POP
// result := result ^ buildings ;
17843: LD_ADDR_VAR 0 7
17847: PUSH
17848: LD_VAR 0 7
17852: PUSH
17853: LD_VAR 0 18
17857: ADD
17858: ST_TO_ADDR
// end else
17859: GO 18002
// begin for i = 1 to personel do
17861: LD_ADDR_VAR 0 8
17865: PUSH
17866: DOUBLE
17867: LD_INT 1
17869: DEC
17870: ST_TO_ADDR
17871: LD_VAR 0 6
17875: PUSH
17876: FOR_TO
17877: IFFALSE 18000
// begin if i > 4 then
17879: LD_VAR 0 8
17883: PUSH
17884: LD_INT 4
17886: GREATER
17887: IFFALSE 17891
// break ;
17889: GO 18000
// x := personel [ i ] ;
17891: LD_ADDR_VAR 0 13
17895: PUSH
17896: LD_VAR 0 6
17900: PUSH
17901: LD_VAR 0 8
17905: ARRAY
17906: ST_TO_ADDR
// if x = - 1 then
17907: LD_VAR 0 13
17911: PUSH
17912: LD_INT 1
17914: NEG
17915: EQUAL
17916: IFFALSE 17920
// continue ;
17918: GO 17876
// PrepareHuman ( false , i , skill ) ;
17920: LD_INT 0
17922: PPUSH
17923: LD_VAR 0 8
17927: PPUSH
17928: LD_VAR 0 4
17932: PPUSH
17933: CALL_OW 380
// un := CreateHuman ;
17937: LD_ADDR_VAR 0 14
17941: PUSH
17942: CALL_OW 44
17946: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
17947: LD_VAR 0 14
17951: PPUSH
17952: LD_VAR 0 1
17956: PPUSH
17957: CALL_OW 250
17961: PPUSH
17962: LD_VAR 0 1
17966: PPUSH
17967: CALL_OW 251
17971: PPUSH
17972: LD_INT 10
17974: PPUSH
17975: LD_INT 0
17977: PPUSH
17978: CALL_OW 50
// result := result ^ un ;
17982: LD_ADDR_VAR 0 7
17986: PUSH
17987: LD_VAR 0 7
17991: PUSH
17992: LD_VAR 0 14
17996: ADD
17997: ST_TO_ADDR
// end ;
17998: GO 17876
18000: POP
18001: POP
// end ; end ;
18002: LD_VAR 0 7
18006: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18007: LD_INT 0
18009: PPUSH
18010: PPUSH
18011: PPUSH
18012: PPUSH
18013: PPUSH
18014: PPUSH
18015: PPUSH
18016: PPUSH
18017: PPUSH
18018: PPUSH
18019: PPUSH
18020: PPUSH
18021: PPUSH
18022: PPUSH
18023: PPUSH
18024: PPUSH
// result := false ;
18025: LD_ADDR_VAR 0 3
18029: PUSH
18030: LD_INT 0
18032: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18033: LD_VAR 0 1
18037: NOT
18038: PUSH
18039: LD_VAR 0 1
18043: PPUSH
18044: CALL_OW 266
18048: PUSH
18049: LD_INT 32
18051: PUSH
18052: LD_INT 33
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: IN
18059: NOT
18060: OR
18061: IFFALSE 18065
// exit ;
18063: GO 19174
// nat := GetNation ( tower ) ;
18065: LD_ADDR_VAR 0 12
18069: PUSH
18070: LD_VAR 0 1
18074: PPUSH
18075: CALL_OW 248
18079: ST_TO_ADDR
// side := GetSide ( tower ) ;
18080: LD_ADDR_VAR 0 16
18084: PUSH
18085: LD_VAR 0 1
18089: PPUSH
18090: CALL_OW 255
18094: ST_TO_ADDR
// x := GetX ( tower ) ;
18095: LD_ADDR_VAR 0 10
18099: PUSH
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 250
18109: ST_TO_ADDR
// y := GetY ( tower ) ;
18110: LD_ADDR_VAR 0 11
18114: PUSH
18115: LD_VAR 0 1
18119: PPUSH
18120: CALL_OW 251
18124: ST_TO_ADDR
// if not x or not y then
18125: LD_VAR 0 10
18129: NOT
18130: PUSH
18131: LD_VAR 0 11
18135: NOT
18136: OR
18137: IFFALSE 18141
// exit ;
18139: GO 19174
// weapon := 0 ;
18141: LD_ADDR_VAR 0 18
18145: PUSH
18146: LD_INT 0
18148: ST_TO_ADDR
// fac_list := [ ] ;
18149: LD_ADDR_VAR 0 17
18153: PUSH
18154: EMPTY
18155: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18156: LD_ADDR_VAR 0 6
18160: PUSH
18161: LD_VAR 0 1
18165: PPUSH
18166: CALL_OW 274
18170: PPUSH
18171: LD_VAR 0 2
18175: PPUSH
18176: LD_INT 0
18178: PPUSH
18179: CALL 15745 0 3
18183: PPUSH
18184: LD_INT 30
18186: PUSH
18187: LD_INT 3
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PPUSH
18194: CALL_OW 72
18198: ST_TO_ADDR
// if not factories then
18199: LD_VAR 0 6
18203: NOT
18204: IFFALSE 18208
// exit ;
18206: GO 19174
// for i in factories do
18208: LD_ADDR_VAR 0 8
18212: PUSH
18213: LD_VAR 0 6
18217: PUSH
18218: FOR_IN
18219: IFFALSE 18244
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18221: LD_ADDR_VAR 0 17
18225: PUSH
18226: LD_VAR 0 17
18230: PUSH
18231: LD_VAR 0 8
18235: PPUSH
18236: CALL_OW 478
18240: UNION
18241: ST_TO_ADDR
18242: GO 18218
18244: POP
18245: POP
// if not fac_list then
18246: LD_VAR 0 17
18250: NOT
18251: IFFALSE 18255
// exit ;
18253: GO 19174
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18255: LD_ADDR_VAR 0 5
18259: PUSH
18260: LD_INT 4
18262: PUSH
18263: LD_INT 5
18265: PUSH
18266: LD_INT 9
18268: PUSH
18269: LD_INT 10
18271: PUSH
18272: LD_INT 6
18274: PUSH
18275: LD_INT 7
18277: PUSH
18278: LD_INT 11
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 27
18292: PUSH
18293: LD_INT 28
18295: PUSH
18296: LD_INT 26
18298: PUSH
18299: LD_INT 30
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 43
18310: PUSH
18311: LD_INT 44
18313: PUSH
18314: LD_INT 46
18316: PUSH
18317: LD_INT 45
18319: PUSH
18320: LD_INT 47
18322: PUSH
18323: LD_INT 49
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: LIST
18338: PUSH
18339: LD_VAR 0 12
18343: ARRAY
18344: ST_TO_ADDR
// list := list isect fac_list ;
18345: LD_ADDR_VAR 0 5
18349: PUSH
18350: LD_VAR 0 5
18354: PUSH
18355: LD_VAR 0 17
18359: ISECT
18360: ST_TO_ADDR
// if not list then
18361: LD_VAR 0 5
18365: NOT
18366: IFFALSE 18370
// exit ;
18368: GO 19174
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18370: LD_VAR 0 12
18374: PUSH
18375: LD_INT 3
18377: EQUAL
18378: PUSH
18379: LD_INT 49
18381: PUSH
18382: LD_VAR 0 5
18386: IN
18387: AND
18388: PUSH
18389: LD_INT 31
18391: PPUSH
18392: LD_VAR 0 16
18396: PPUSH
18397: CALL_OW 321
18401: PUSH
18402: LD_INT 2
18404: EQUAL
18405: AND
18406: IFFALSE 18466
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18408: LD_INT 22
18410: PUSH
18411: LD_VAR 0 16
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 35
18422: PUSH
18423: LD_INT 49
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 91
18432: PUSH
18433: LD_VAR 0 1
18437: PUSH
18438: LD_INT 10
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: LIST
18450: PPUSH
18451: CALL_OW 69
18455: NOT
18456: IFFALSE 18466
// weapon := ru_time_lapser ;
18458: LD_ADDR_VAR 0 18
18462: PUSH
18463: LD_INT 49
18465: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18466: LD_VAR 0 12
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: LD_INT 2
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: IN
18481: PUSH
18482: LD_INT 11
18484: PUSH
18485: LD_VAR 0 5
18489: IN
18490: PUSH
18491: LD_INT 30
18493: PUSH
18494: LD_VAR 0 5
18498: IN
18499: OR
18500: AND
18501: PUSH
18502: LD_INT 6
18504: PPUSH
18505: LD_VAR 0 16
18509: PPUSH
18510: CALL_OW 321
18514: PUSH
18515: LD_INT 2
18517: EQUAL
18518: AND
18519: IFFALSE 18684
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
18521: LD_INT 22
18523: PUSH
18524: LD_VAR 0 16
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 2
18535: PUSH
18536: LD_INT 35
18538: PUSH
18539: LD_INT 11
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 35
18548: PUSH
18549: LD_INT 30
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 91
18563: PUSH
18564: LD_VAR 0 1
18568: PUSH
18569: LD_INT 18
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: LIST
18581: PPUSH
18582: CALL_OW 69
18586: NOT
18587: PUSH
18588: LD_INT 22
18590: PUSH
18591: LD_VAR 0 16
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: LD_INT 30
18605: PUSH
18606: LD_INT 32
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 30
18615: PUSH
18616: LD_INT 33
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 91
18630: PUSH
18631: LD_VAR 0 1
18635: PUSH
18636: LD_INT 12
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: LIST
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: LIST
18648: PUSH
18649: EMPTY
18650: LIST
18651: PPUSH
18652: CALL_OW 69
18656: PUSH
18657: LD_INT 2
18659: GREATER
18660: AND
18661: IFFALSE 18684
// weapon := [ us_radar , ar_radar ] [ nat ] ;
18663: LD_ADDR_VAR 0 18
18667: PUSH
18668: LD_INT 11
18670: PUSH
18671: LD_INT 30
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_VAR 0 12
18682: ARRAY
18683: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
18684: LD_VAR 0 18
18688: NOT
18689: PUSH
18690: LD_INT 40
18692: PPUSH
18693: LD_VAR 0 16
18697: PPUSH
18698: CALL_OW 321
18702: PUSH
18703: LD_INT 2
18705: EQUAL
18706: AND
18707: PUSH
18708: LD_INT 7
18710: PUSH
18711: LD_VAR 0 5
18715: IN
18716: PUSH
18717: LD_INT 28
18719: PUSH
18720: LD_VAR 0 5
18724: IN
18725: OR
18726: PUSH
18727: LD_INT 45
18729: PUSH
18730: LD_VAR 0 5
18734: IN
18735: OR
18736: AND
18737: IFFALSE 18991
// begin hex := GetHexInfo ( x , y ) ;
18739: LD_ADDR_VAR 0 4
18743: PUSH
18744: LD_VAR 0 10
18748: PPUSH
18749: LD_VAR 0 11
18753: PPUSH
18754: CALL_OW 546
18758: ST_TO_ADDR
// if hex [ 1 ] then
18759: LD_VAR 0 4
18763: PUSH
18764: LD_INT 1
18766: ARRAY
18767: IFFALSE 18771
// exit ;
18769: GO 19174
// height := hex [ 2 ] ;
18771: LD_ADDR_VAR 0 15
18775: PUSH
18776: LD_VAR 0 4
18780: PUSH
18781: LD_INT 2
18783: ARRAY
18784: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
18785: LD_ADDR_VAR 0 14
18789: PUSH
18790: LD_INT 0
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 3
18798: PUSH
18799: LD_INT 5
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: ST_TO_ADDR
// for i in tmp do
18808: LD_ADDR_VAR 0 8
18812: PUSH
18813: LD_VAR 0 14
18817: PUSH
18818: FOR_IN
18819: IFFALSE 18989
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
18821: LD_ADDR_VAR 0 9
18825: PUSH
18826: LD_VAR 0 10
18830: PPUSH
18831: LD_VAR 0 8
18835: PPUSH
18836: LD_INT 5
18838: PPUSH
18839: CALL_OW 272
18843: PUSH
18844: LD_VAR 0 11
18848: PPUSH
18849: LD_VAR 0 8
18853: PPUSH
18854: LD_INT 5
18856: PPUSH
18857: CALL_OW 273
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
18866: LD_VAR 0 9
18870: PUSH
18871: LD_INT 1
18873: ARRAY
18874: PPUSH
18875: LD_VAR 0 9
18879: PUSH
18880: LD_INT 2
18882: ARRAY
18883: PPUSH
18884: CALL_OW 488
18888: IFFALSE 18987
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
18890: LD_ADDR_VAR 0 4
18894: PUSH
18895: LD_VAR 0 9
18899: PUSH
18900: LD_INT 1
18902: ARRAY
18903: PPUSH
18904: LD_VAR 0 9
18908: PUSH
18909: LD_INT 2
18911: ARRAY
18912: PPUSH
18913: CALL_OW 546
18917: ST_TO_ADDR
// if hex [ 1 ] then
18918: LD_VAR 0 4
18922: PUSH
18923: LD_INT 1
18925: ARRAY
18926: IFFALSE 18930
// continue ;
18928: GO 18818
// h := hex [ 2 ] ;
18930: LD_ADDR_VAR 0 13
18934: PUSH
18935: LD_VAR 0 4
18939: PUSH
18940: LD_INT 2
18942: ARRAY
18943: ST_TO_ADDR
// if h + 7 < height then
18944: LD_VAR 0 13
18948: PUSH
18949: LD_INT 7
18951: PLUS
18952: PUSH
18953: LD_VAR 0 15
18957: LESS
18958: IFFALSE 18987
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
18960: LD_ADDR_VAR 0 18
18964: PUSH
18965: LD_INT 7
18967: PUSH
18968: LD_INT 28
18970: PUSH
18971: LD_INT 45
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: LIST
18978: PUSH
18979: LD_VAR 0 12
18983: ARRAY
18984: ST_TO_ADDR
// break ;
18985: GO 18989
// end ; end ; end ;
18987: GO 18818
18989: POP
18990: POP
// end ; if not weapon then
18991: LD_VAR 0 18
18995: NOT
18996: IFFALSE 19056
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
18998: LD_ADDR_VAR 0 5
19002: PUSH
19003: LD_VAR 0 5
19007: PUSH
19008: LD_INT 11
19010: PUSH
19011: LD_INT 30
19013: PUSH
19014: LD_INT 49
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: DIFF
19022: ST_TO_ADDR
// if not list then
19023: LD_VAR 0 5
19027: NOT
19028: IFFALSE 19032
// exit ;
19030: GO 19174
// weapon := list [ rand ( 1 , list ) ] ;
19032: LD_ADDR_VAR 0 18
19036: PUSH
19037: LD_VAR 0 5
19041: PUSH
19042: LD_INT 1
19044: PPUSH
19045: LD_VAR 0 5
19049: PPUSH
19050: CALL_OW 12
19054: ARRAY
19055: ST_TO_ADDR
// end ; if weapon then
19056: LD_VAR 0 18
19060: IFFALSE 19174
// begin tmp := CostOfWeapon ( weapon ) ;
19062: LD_ADDR_VAR 0 14
19066: PUSH
19067: LD_VAR 0 18
19071: PPUSH
19072: CALL_OW 451
19076: ST_TO_ADDR
// j := GetBase ( tower ) ;
19077: LD_ADDR_VAR 0 9
19081: PUSH
19082: LD_VAR 0 1
19086: PPUSH
19087: CALL_OW 274
19091: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19092: LD_VAR 0 9
19096: PPUSH
19097: LD_INT 1
19099: PPUSH
19100: CALL_OW 275
19104: PUSH
19105: LD_VAR 0 14
19109: PUSH
19110: LD_INT 1
19112: ARRAY
19113: GREATEREQUAL
19114: PUSH
19115: LD_VAR 0 9
19119: PPUSH
19120: LD_INT 2
19122: PPUSH
19123: CALL_OW 275
19127: PUSH
19128: LD_VAR 0 14
19132: PUSH
19133: LD_INT 2
19135: ARRAY
19136: GREATEREQUAL
19137: AND
19138: PUSH
19139: LD_VAR 0 9
19143: PPUSH
19144: LD_INT 3
19146: PPUSH
19147: CALL_OW 275
19151: PUSH
19152: LD_VAR 0 14
19156: PUSH
19157: LD_INT 3
19159: ARRAY
19160: GREATEREQUAL
19161: AND
19162: IFFALSE 19174
// result := weapon ;
19164: LD_ADDR_VAR 0 3
19168: PUSH
19169: LD_VAR 0 18
19173: ST_TO_ADDR
// end ; end ;
19174: LD_VAR 0 3
19178: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19179: LD_INT 0
19181: PPUSH
19182: PPUSH
// result := true ;
19183: LD_ADDR_VAR 0 3
19187: PUSH
19188: LD_INT 1
19190: ST_TO_ADDR
// if array1 = array2 then
19191: LD_VAR 0 1
19195: PUSH
19196: LD_VAR 0 2
19200: EQUAL
19201: IFFALSE 19261
// begin for i = 1 to array1 do
19203: LD_ADDR_VAR 0 4
19207: PUSH
19208: DOUBLE
19209: LD_INT 1
19211: DEC
19212: ST_TO_ADDR
19213: LD_VAR 0 1
19217: PUSH
19218: FOR_TO
19219: IFFALSE 19257
// if array1 [ i ] <> array2 [ i ] then
19221: LD_VAR 0 1
19225: PUSH
19226: LD_VAR 0 4
19230: ARRAY
19231: PUSH
19232: LD_VAR 0 2
19236: PUSH
19237: LD_VAR 0 4
19241: ARRAY
19242: NONEQUAL
19243: IFFALSE 19255
// begin result := false ;
19245: LD_ADDR_VAR 0 3
19249: PUSH
19250: LD_INT 0
19252: ST_TO_ADDR
// break ;
19253: GO 19257
// end ;
19255: GO 19218
19257: POP
19258: POP
// end else
19259: GO 19269
// result := false ;
19261: LD_ADDR_VAR 0 3
19265: PUSH
19266: LD_INT 0
19268: ST_TO_ADDR
// end ;
19269: LD_VAR 0 3
19273: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19274: LD_INT 0
19276: PPUSH
19277: PPUSH
// if not array1 or not array2 then
19278: LD_VAR 0 1
19282: NOT
19283: PUSH
19284: LD_VAR 0 2
19288: NOT
19289: OR
19290: IFFALSE 19294
// exit ;
19292: GO 19358
// result := true ;
19294: LD_ADDR_VAR 0 3
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
// for i = 1 to array1 do
19302: LD_ADDR_VAR 0 4
19306: PUSH
19307: DOUBLE
19308: LD_INT 1
19310: DEC
19311: ST_TO_ADDR
19312: LD_VAR 0 1
19316: PUSH
19317: FOR_TO
19318: IFFALSE 19356
// if array1 [ i ] <> array2 [ i ] then
19320: LD_VAR 0 1
19324: PUSH
19325: LD_VAR 0 4
19329: ARRAY
19330: PUSH
19331: LD_VAR 0 2
19335: PUSH
19336: LD_VAR 0 4
19340: ARRAY
19341: NONEQUAL
19342: IFFALSE 19354
// begin result := false ;
19344: LD_ADDR_VAR 0 3
19348: PUSH
19349: LD_INT 0
19351: ST_TO_ADDR
// break ;
19352: GO 19356
// end ;
19354: GO 19317
19356: POP
19357: POP
// end ;
19358: LD_VAR 0 3
19362: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19363: LD_INT 0
19365: PPUSH
19366: PPUSH
19367: PPUSH
// pom := GetBase ( fac ) ;
19368: LD_ADDR_VAR 0 5
19372: PUSH
19373: LD_VAR 0 1
19377: PPUSH
19378: CALL_OW 274
19382: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19383: LD_ADDR_VAR 0 4
19387: PUSH
19388: LD_VAR 0 2
19392: PUSH
19393: LD_INT 1
19395: ARRAY
19396: PPUSH
19397: LD_VAR 0 2
19401: PUSH
19402: LD_INT 2
19404: ARRAY
19405: PPUSH
19406: LD_VAR 0 2
19410: PUSH
19411: LD_INT 3
19413: ARRAY
19414: PPUSH
19415: LD_VAR 0 2
19419: PUSH
19420: LD_INT 4
19422: ARRAY
19423: PPUSH
19424: CALL_OW 449
19428: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19429: LD_ADDR_VAR 0 3
19433: PUSH
19434: LD_VAR 0 5
19438: PPUSH
19439: LD_INT 1
19441: PPUSH
19442: CALL_OW 275
19446: PUSH
19447: LD_VAR 0 4
19451: PUSH
19452: LD_INT 1
19454: ARRAY
19455: GREATEREQUAL
19456: PUSH
19457: LD_VAR 0 5
19461: PPUSH
19462: LD_INT 2
19464: PPUSH
19465: CALL_OW 275
19469: PUSH
19470: LD_VAR 0 4
19474: PUSH
19475: LD_INT 2
19477: ARRAY
19478: GREATEREQUAL
19479: AND
19480: PUSH
19481: LD_VAR 0 5
19485: PPUSH
19486: LD_INT 3
19488: PPUSH
19489: CALL_OW 275
19493: PUSH
19494: LD_VAR 0 4
19498: PUSH
19499: LD_INT 3
19501: ARRAY
19502: GREATEREQUAL
19503: AND
19504: ST_TO_ADDR
// end ;
19505: LD_VAR 0 3
19509: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
19510: LD_INT 0
19512: PPUSH
19513: PPUSH
19514: PPUSH
19515: PPUSH
// pom := GetBase ( building ) ;
19516: LD_ADDR_VAR 0 3
19520: PUSH
19521: LD_VAR 0 1
19525: PPUSH
19526: CALL_OW 274
19530: ST_TO_ADDR
// if not pom then
19531: LD_VAR 0 3
19535: NOT
19536: IFFALSE 19540
// exit ;
19538: GO 19710
// btype := GetBType ( building ) ;
19540: LD_ADDR_VAR 0 5
19544: PUSH
19545: LD_VAR 0 1
19549: PPUSH
19550: CALL_OW 266
19554: ST_TO_ADDR
// if btype = b_armoury then
19555: LD_VAR 0 5
19559: PUSH
19560: LD_INT 4
19562: EQUAL
19563: IFFALSE 19573
// btype := b_barracks ;
19565: LD_ADDR_VAR 0 5
19569: PUSH
19570: LD_INT 5
19572: ST_TO_ADDR
// if btype = b_depot then
19573: LD_VAR 0 5
19577: PUSH
19578: LD_INT 0
19580: EQUAL
19581: IFFALSE 19591
// btype := b_warehouse ;
19583: LD_ADDR_VAR 0 5
19587: PUSH
19588: LD_INT 1
19590: ST_TO_ADDR
// if btype = b_workshop then
19591: LD_VAR 0 5
19595: PUSH
19596: LD_INT 2
19598: EQUAL
19599: IFFALSE 19609
// btype := b_factory ;
19601: LD_ADDR_VAR 0 5
19605: PUSH
19606: LD_INT 3
19608: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19609: LD_ADDR_VAR 0 4
19613: PUSH
19614: LD_VAR 0 5
19618: PPUSH
19619: LD_VAR 0 1
19623: PPUSH
19624: CALL_OW 248
19628: PPUSH
19629: CALL_OW 450
19633: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19634: LD_ADDR_VAR 0 2
19638: PUSH
19639: LD_VAR 0 3
19643: PPUSH
19644: LD_INT 1
19646: PPUSH
19647: CALL_OW 275
19651: PUSH
19652: LD_VAR 0 4
19656: PUSH
19657: LD_INT 1
19659: ARRAY
19660: GREATEREQUAL
19661: PUSH
19662: LD_VAR 0 3
19666: PPUSH
19667: LD_INT 2
19669: PPUSH
19670: CALL_OW 275
19674: PUSH
19675: LD_VAR 0 4
19679: PUSH
19680: LD_INT 2
19682: ARRAY
19683: GREATEREQUAL
19684: AND
19685: PUSH
19686: LD_VAR 0 3
19690: PPUSH
19691: LD_INT 3
19693: PPUSH
19694: CALL_OW 275
19698: PUSH
19699: LD_VAR 0 4
19703: PUSH
19704: LD_INT 3
19706: ARRAY
19707: GREATEREQUAL
19708: AND
19709: ST_TO_ADDR
// end ;
19710: LD_VAR 0 2
19714: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
19715: LD_INT 0
19717: PPUSH
19718: PPUSH
19719: PPUSH
// pom := GetBase ( building ) ;
19720: LD_ADDR_VAR 0 4
19724: PUSH
19725: LD_VAR 0 1
19729: PPUSH
19730: CALL_OW 274
19734: ST_TO_ADDR
// if not pom then
19735: LD_VAR 0 4
19739: NOT
19740: IFFALSE 19744
// exit ;
19742: GO 19845
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
19744: LD_ADDR_VAR 0 5
19748: PUSH
19749: LD_VAR 0 2
19753: PPUSH
19754: LD_VAR 0 1
19758: PPUSH
19759: CALL_OW 248
19763: PPUSH
19764: CALL_OW 450
19768: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19769: LD_ADDR_VAR 0 3
19773: PUSH
19774: LD_VAR 0 4
19778: PPUSH
19779: LD_INT 1
19781: PPUSH
19782: CALL_OW 275
19786: PUSH
19787: LD_VAR 0 5
19791: PUSH
19792: LD_INT 1
19794: ARRAY
19795: GREATEREQUAL
19796: PUSH
19797: LD_VAR 0 4
19801: PPUSH
19802: LD_INT 2
19804: PPUSH
19805: CALL_OW 275
19809: PUSH
19810: LD_VAR 0 5
19814: PUSH
19815: LD_INT 2
19817: ARRAY
19818: GREATEREQUAL
19819: AND
19820: PUSH
19821: LD_VAR 0 4
19825: PPUSH
19826: LD_INT 3
19828: PPUSH
19829: CALL_OW 275
19833: PUSH
19834: LD_VAR 0 5
19838: PUSH
19839: LD_INT 3
19841: ARRAY
19842: GREATEREQUAL
19843: AND
19844: ST_TO_ADDR
// end ;
19845: LD_VAR 0 3
19849: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
19850: LD_INT 0
19852: PPUSH
19853: PPUSH
19854: PPUSH
19855: PPUSH
19856: PPUSH
19857: PPUSH
19858: PPUSH
19859: PPUSH
19860: PPUSH
19861: PPUSH
19862: PPUSH
// result := false ;
19863: LD_ADDR_VAR 0 8
19867: PUSH
19868: LD_INT 0
19870: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
19871: LD_VAR 0 5
19875: NOT
19876: PUSH
19877: LD_VAR 0 1
19881: NOT
19882: OR
19883: PUSH
19884: LD_VAR 0 2
19888: NOT
19889: OR
19890: PUSH
19891: LD_VAR 0 3
19895: NOT
19896: OR
19897: IFFALSE 19901
// exit ;
19899: GO 20715
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
19901: LD_ADDR_VAR 0 14
19905: PUSH
19906: LD_VAR 0 1
19910: PPUSH
19911: LD_VAR 0 2
19915: PPUSH
19916: LD_VAR 0 3
19920: PPUSH
19921: LD_VAR 0 4
19925: PPUSH
19926: LD_VAR 0 5
19930: PUSH
19931: LD_INT 1
19933: ARRAY
19934: PPUSH
19935: CALL_OW 248
19939: PPUSH
19940: LD_INT 0
19942: PPUSH
19943: CALL 21952 0 6
19947: ST_TO_ADDR
// if not hexes then
19948: LD_VAR 0 14
19952: NOT
19953: IFFALSE 19957
// exit ;
19955: GO 20715
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19957: LD_ADDR_VAR 0 17
19961: PUSH
19962: LD_VAR 0 5
19966: PPUSH
19967: LD_INT 22
19969: PUSH
19970: LD_VAR 0 13
19974: PPUSH
19975: CALL_OW 255
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: LD_INT 30
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 30
19999: PUSH
20000: LD_INT 1
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: LIST
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: PPUSH
20016: CALL_OW 72
20020: ST_TO_ADDR
// for i = 1 to hexes do
20021: LD_ADDR_VAR 0 9
20025: PUSH
20026: DOUBLE
20027: LD_INT 1
20029: DEC
20030: ST_TO_ADDR
20031: LD_VAR 0 14
20035: PUSH
20036: FOR_TO
20037: IFFALSE 20713
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20039: LD_ADDR_VAR 0 13
20043: PUSH
20044: LD_VAR 0 14
20048: PUSH
20049: LD_VAR 0 9
20053: ARRAY
20054: PUSH
20055: LD_INT 1
20057: ARRAY
20058: PPUSH
20059: LD_VAR 0 14
20063: PUSH
20064: LD_VAR 0 9
20068: ARRAY
20069: PUSH
20070: LD_INT 2
20072: ARRAY
20073: PPUSH
20074: CALL_OW 428
20078: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20079: LD_VAR 0 14
20083: PUSH
20084: LD_VAR 0 9
20088: ARRAY
20089: PUSH
20090: LD_INT 1
20092: ARRAY
20093: PPUSH
20094: LD_VAR 0 14
20098: PUSH
20099: LD_VAR 0 9
20103: ARRAY
20104: PUSH
20105: LD_INT 2
20107: ARRAY
20108: PPUSH
20109: CALL_OW 351
20113: PUSH
20114: LD_VAR 0 14
20118: PUSH
20119: LD_VAR 0 9
20123: ARRAY
20124: PUSH
20125: LD_INT 1
20127: ARRAY
20128: PPUSH
20129: LD_VAR 0 14
20133: PUSH
20134: LD_VAR 0 9
20138: ARRAY
20139: PUSH
20140: LD_INT 2
20142: ARRAY
20143: PPUSH
20144: CALL_OW 488
20148: NOT
20149: OR
20150: PUSH
20151: LD_VAR 0 13
20155: PPUSH
20156: CALL_OW 247
20160: PUSH
20161: LD_INT 3
20163: EQUAL
20164: OR
20165: IFFALSE 20171
// exit ;
20167: POP
20168: POP
20169: GO 20715
// if not tmp then
20171: LD_VAR 0 13
20175: NOT
20176: IFFALSE 20180
// continue ;
20178: GO 20036
// result := true ;
20180: LD_ADDR_VAR 0 8
20184: PUSH
20185: LD_INT 1
20187: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20188: LD_VAR 0 6
20192: PUSH
20193: LD_VAR 0 13
20197: PPUSH
20198: CALL_OW 247
20202: PUSH
20203: LD_INT 2
20205: EQUAL
20206: AND
20207: PUSH
20208: LD_VAR 0 13
20212: PPUSH
20213: CALL_OW 263
20217: PUSH
20218: LD_INT 1
20220: EQUAL
20221: AND
20222: IFFALSE 20386
// begin if IsDrivenBy ( tmp ) then
20224: LD_VAR 0 13
20228: PPUSH
20229: CALL_OW 311
20233: IFFALSE 20237
// continue ;
20235: GO 20036
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20237: LD_VAR 0 6
20241: PPUSH
20242: LD_INT 3
20244: PUSH
20245: LD_INT 60
20247: PUSH
20248: EMPTY
20249: LIST
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 3
20257: PUSH
20258: LD_INT 55
20260: PUSH
20261: EMPTY
20262: LIST
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PPUSH
20272: CALL_OW 72
20276: IFFALSE 20384
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20278: LD_ADDR_VAR 0 18
20282: PUSH
20283: LD_VAR 0 6
20287: PPUSH
20288: LD_INT 3
20290: PUSH
20291: LD_INT 60
20293: PUSH
20294: EMPTY
20295: LIST
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 3
20303: PUSH
20304: LD_INT 55
20306: PUSH
20307: EMPTY
20308: LIST
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PPUSH
20318: CALL_OW 72
20322: PUSH
20323: LD_INT 1
20325: ARRAY
20326: ST_TO_ADDR
// if IsInUnit ( driver ) then
20327: LD_VAR 0 18
20331: PPUSH
20332: CALL_OW 310
20336: IFFALSE 20347
// ComExit ( driver ) ;
20338: LD_VAR 0 18
20342: PPUSH
20343: CALL 45080 0 1
// AddComEnterUnit ( driver , tmp ) ;
20347: LD_VAR 0 18
20351: PPUSH
20352: LD_VAR 0 13
20356: PPUSH
20357: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20361: LD_VAR 0 18
20365: PPUSH
20366: LD_VAR 0 7
20370: PPUSH
20371: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20375: LD_VAR 0 18
20379: PPUSH
20380: CALL_OW 181
// end ; continue ;
20384: GO 20036
// end ; if not cleaners or not tmp in cleaners then
20386: LD_VAR 0 6
20390: NOT
20391: PUSH
20392: LD_VAR 0 13
20396: PUSH
20397: LD_VAR 0 6
20401: IN
20402: NOT
20403: OR
20404: IFFALSE 20711
// begin if dep then
20406: LD_VAR 0 17
20410: IFFALSE 20546
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20412: LD_ADDR_VAR 0 16
20416: PUSH
20417: LD_VAR 0 17
20421: PUSH
20422: LD_INT 1
20424: ARRAY
20425: PPUSH
20426: CALL_OW 250
20430: PPUSH
20431: LD_VAR 0 17
20435: PUSH
20436: LD_INT 1
20438: ARRAY
20439: PPUSH
20440: CALL_OW 254
20444: PPUSH
20445: LD_INT 5
20447: PPUSH
20448: CALL_OW 272
20452: PUSH
20453: LD_VAR 0 17
20457: PUSH
20458: LD_INT 1
20460: ARRAY
20461: PPUSH
20462: CALL_OW 251
20466: PPUSH
20467: LD_VAR 0 17
20471: PUSH
20472: LD_INT 1
20474: ARRAY
20475: PPUSH
20476: CALL_OW 254
20480: PPUSH
20481: LD_INT 5
20483: PPUSH
20484: CALL_OW 273
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
20493: LD_VAR 0 16
20497: PUSH
20498: LD_INT 1
20500: ARRAY
20501: PPUSH
20502: LD_VAR 0 16
20506: PUSH
20507: LD_INT 2
20509: ARRAY
20510: PPUSH
20511: CALL_OW 488
20515: IFFALSE 20546
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
20517: LD_VAR 0 13
20521: PPUSH
20522: LD_VAR 0 16
20526: PUSH
20527: LD_INT 1
20529: ARRAY
20530: PPUSH
20531: LD_VAR 0 16
20535: PUSH
20536: LD_INT 2
20538: ARRAY
20539: PPUSH
20540: CALL_OW 111
// continue ;
20544: GO 20036
// end ; end ; r := GetDir ( tmp ) ;
20546: LD_ADDR_VAR 0 15
20550: PUSH
20551: LD_VAR 0 13
20555: PPUSH
20556: CALL_OW 254
20560: ST_TO_ADDR
// if r = 5 then
20561: LD_VAR 0 15
20565: PUSH
20566: LD_INT 5
20568: EQUAL
20569: IFFALSE 20579
// r := 0 ;
20571: LD_ADDR_VAR 0 15
20575: PUSH
20576: LD_INT 0
20578: ST_TO_ADDR
// for j = r to 5 do
20579: LD_ADDR_VAR 0 10
20583: PUSH
20584: DOUBLE
20585: LD_VAR 0 15
20589: DEC
20590: ST_TO_ADDR
20591: LD_INT 5
20593: PUSH
20594: FOR_TO
20595: IFFALSE 20709
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
20597: LD_ADDR_VAR 0 11
20601: PUSH
20602: LD_VAR 0 13
20606: PPUSH
20607: CALL_OW 250
20611: PPUSH
20612: LD_VAR 0 10
20616: PPUSH
20617: LD_INT 2
20619: PPUSH
20620: CALL_OW 272
20624: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
20625: LD_ADDR_VAR 0 12
20629: PUSH
20630: LD_VAR 0 13
20634: PPUSH
20635: CALL_OW 251
20639: PPUSH
20640: LD_VAR 0 10
20644: PPUSH
20645: LD_INT 2
20647: PPUSH
20648: CALL_OW 273
20652: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
20653: LD_VAR 0 11
20657: PPUSH
20658: LD_VAR 0 12
20662: PPUSH
20663: CALL_OW 488
20667: PUSH
20668: LD_VAR 0 11
20672: PPUSH
20673: LD_VAR 0 12
20677: PPUSH
20678: CALL_OW 428
20682: NOT
20683: AND
20684: IFFALSE 20707
// begin ComMoveXY ( tmp , _x , _y ) ;
20686: LD_VAR 0 13
20690: PPUSH
20691: LD_VAR 0 11
20695: PPUSH
20696: LD_VAR 0 12
20700: PPUSH
20701: CALL_OW 111
// break ;
20705: GO 20709
// end ; end ;
20707: GO 20594
20709: POP
20710: POP
// end ; end ;
20711: GO 20036
20713: POP
20714: POP
// end ;
20715: LD_VAR 0 8
20719: RET
// export function BuildingTechInvented ( side , btype ) ; begin
20720: LD_INT 0
20722: PPUSH
// result := true ;
20723: LD_ADDR_VAR 0 3
20727: PUSH
20728: LD_INT 1
20730: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
20731: LD_VAR 0 2
20735: PUSH
20736: LD_INT 24
20738: DOUBLE
20739: EQUAL
20740: IFTRUE 20750
20742: LD_INT 33
20744: DOUBLE
20745: EQUAL
20746: IFTRUE 20750
20748: GO 20775
20750: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
20751: LD_ADDR_VAR 0 3
20755: PUSH
20756: LD_INT 32
20758: PPUSH
20759: LD_VAR 0 1
20763: PPUSH
20764: CALL_OW 321
20768: PUSH
20769: LD_INT 2
20771: EQUAL
20772: ST_TO_ADDR
20773: GO 21095
20775: LD_INT 20
20777: DOUBLE
20778: EQUAL
20779: IFTRUE 20783
20781: GO 20808
20783: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
20784: LD_ADDR_VAR 0 3
20788: PUSH
20789: LD_INT 6
20791: PPUSH
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 321
20801: PUSH
20802: LD_INT 2
20804: EQUAL
20805: ST_TO_ADDR
20806: GO 21095
20808: LD_INT 22
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20822
20814: LD_INT 36
20816: DOUBLE
20817: EQUAL
20818: IFTRUE 20822
20820: GO 20847
20822: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
20823: LD_ADDR_VAR 0 3
20827: PUSH
20828: LD_INT 15
20830: PPUSH
20831: LD_VAR 0 1
20835: PPUSH
20836: CALL_OW 321
20840: PUSH
20841: LD_INT 2
20843: EQUAL
20844: ST_TO_ADDR
20845: GO 21095
20847: LD_INT 30
20849: DOUBLE
20850: EQUAL
20851: IFTRUE 20855
20853: GO 20880
20855: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
20856: LD_ADDR_VAR 0 3
20860: PUSH
20861: LD_INT 20
20863: PPUSH
20864: LD_VAR 0 1
20868: PPUSH
20869: CALL_OW 321
20873: PUSH
20874: LD_INT 2
20876: EQUAL
20877: ST_TO_ADDR
20878: GO 21095
20880: LD_INT 28
20882: DOUBLE
20883: EQUAL
20884: IFTRUE 20894
20886: LD_INT 21
20888: DOUBLE
20889: EQUAL
20890: IFTRUE 20894
20892: GO 20919
20894: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
20895: LD_ADDR_VAR 0 3
20899: PUSH
20900: LD_INT 21
20902: PPUSH
20903: LD_VAR 0 1
20907: PPUSH
20908: CALL_OW 321
20912: PUSH
20913: LD_INT 2
20915: EQUAL
20916: ST_TO_ADDR
20917: GO 21095
20919: LD_INT 16
20921: DOUBLE
20922: EQUAL
20923: IFTRUE 20927
20925: GO 20954
20927: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
20928: LD_ADDR_VAR 0 3
20932: PUSH
20933: LD_EXP 88
20937: PPUSH
20938: LD_VAR 0 1
20942: PPUSH
20943: CALL_OW 321
20947: PUSH
20948: LD_INT 2
20950: EQUAL
20951: ST_TO_ADDR
20952: GO 21095
20954: LD_INT 19
20956: DOUBLE
20957: EQUAL
20958: IFTRUE 20968
20960: LD_INT 23
20962: DOUBLE
20963: EQUAL
20964: IFTRUE 20968
20966: GO 20995
20968: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
20969: LD_ADDR_VAR 0 3
20973: PUSH
20974: LD_EXP 87
20978: PPUSH
20979: LD_VAR 0 1
20983: PPUSH
20984: CALL_OW 321
20988: PUSH
20989: LD_INT 2
20991: EQUAL
20992: ST_TO_ADDR
20993: GO 21095
20995: LD_INT 17
20997: DOUBLE
20998: EQUAL
20999: IFTRUE 21003
21001: GO 21028
21003: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21004: LD_ADDR_VAR 0 3
21008: PUSH
21009: LD_INT 39
21011: PPUSH
21012: LD_VAR 0 1
21016: PPUSH
21017: CALL_OW 321
21021: PUSH
21022: LD_INT 2
21024: EQUAL
21025: ST_TO_ADDR
21026: GO 21095
21028: LD_INT 18
21030: DOUBLE
21031: EQUAL
21032: IFTRUE 21036
21034: GO 21061
21036: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
21037: LD_ADDR_VAR 0 3
21041: PUSH
21042: LD_INT 40
21044: PPUSH
21045: LD_VAR 0 1
21049: PPUSH
21050: CALL_OW 321
21054: PUSH
21055: LD_INT 2
21057: EQUAL
21058: ST_TO_ADDR
21059: GO 21095
21061: LD_INT 27
21063: DOUBLE
21064: EQUAL
21065: IFTRUE 21069
21067: GO 21094
21069: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
21070: LD_ADDR_VAR 0 3
21074: PUSH
21075: LD_INT 35
21077: PPUSH
21078: LD_VAR 0 1
21082: PPUSH
21083: CALL_OW 321
21087: PUSH
21088: LD_INT 2
21090: EQUAL
21091: ST_TO_ADDR
21092: GO 21095
21094: POP
// end ;
21095: LD_VAR 0 3
21099: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21100: LD_INT 0
21102: PPUSH
21103: PPUSH
21104: PPUSH
21105: PPUSH
21106: PPUSH
21107: PPUSH
21108: PPUSH
21109: PPUSH
21110: PPUSH
21111: PPUSH
21112: PPUSH
// result := false ;
21113: LD_ADDR_VAR 0 6
21117: PUSH
21118: LD_INT 0
21120: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21121: LD_VAR 0 1
21125: NOT
21126: PUSH
21127: LD_VAR 0 1
21131: PPUSH
21132: CALL_OW 266
21136: PUSH
21137: LD_INT 0
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: IN
21147: NOT
21148: OR
21149: PUSH
21150: LD_VAR 0 2
21154: NOT
21155: OR
21156: PUSH
21157: LD_VAR 0 5
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: LD_INT 1
21167: PUSH
21168: LD_INT 2
21170: PUSH
21171: LD_INT 3
21173: PUSH
21174: LD_INT 4
21176: PUSH
21177: LD_INT 5
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: IN
21188: NOT
21189: OR
21190: PUSH
21191: LD_VAR 0 3
21195: PPUSH
21196: LD_VAR 0 4
21200: PPUSH
21201: CALL_OW 488
21205: NOT
21206: OR
21207: IFFALSE 21211
// exit ;
21209: GO 21947
// side := GetSide ( depot ) ;
21211: LD_ADDR_VAR 0 9
21215: PUSH
21216: LD_VAR 0 1
21220: PPUSH
21221: CALL_OW 255
21225: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21226: LD_VAR 0 9
21230: PPUSH
21231: LD_VAR 0 2
21235: PPUSH
21236: CALL 20720 0 2
21240: NOT
21241: IFFALSE 21245
// exit ;
21243: GO 21947
// pom := GetBase ( depot ) ;
21245: LD_ADDR_VAR 0 10
21249: PUSH
21250: LD_VAR 0 1
21254: PPUSH
21255: CALL_OW 274
21259: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21260: LD_ADDR_VAR 0 11
21264: PUSH
21265: LD_VAR 0 2
21269: PPUSH
21270: LD_VAR 0 1
21274: PPUSH
21275: CALL_OW 248
21279: PPUSH
21280: CALL_OW 450
21284: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21285: LD_VAR 0 10
21289: PPUSH
21290: LD_INT 1
21292: PPUSH
21293: CALL_OW 275
21297: PUSH
21298: LD_VAR 0 11
21302: PUSH
21303: LD_INT 1
21305: ARRAY
21306: GREATEREQUAL
21307: PUSH
21308: LD_VAR 0 10
21312: PPUSH
21313: LD_INT 2
21315: PPUSH
21316: CALL_OW 275
21320: PUSH
21321: LD_VAR 0 11
21325: PUSH
21326: LD_INT 2
21328: ARRAY
21329: GREATEREQUAL
21330: AND
21331: PUSH
21332: LD_VAR 0 10
21336: PPUSH
21337: LD_INT 3
21339: PPUSH
21340: CALL_OW 275
21344: PUSH
21345: LD_VAR 0 11
21349: PUSH
21350: LD_INT 3
21352: ARRAY
21353: GREATEREQUAL
21354: AND
21355: NOT
21356: IFFALSE 21360
// exit ;
21358: GO 21947
// if GetBType ( depot ) = b_depot then
21360: LD_VAR 0 1
21364: PPUSH
21365: CALL_OW 266
21369: PUSH
21370: LD_INT 0
21372: EQUAL
21373: IFFALSE 21385
// dist := 28 else
21375: LD_ADDR_VAR 0 14
21379: PUSH
21380: LD_INT 28
21382: ST_TO_ADDR
21383: GO 21393
// dist := 36 ;
21385: LD_ADDR_VAR 0 14
21389: PUSH
21390: LD_INT 36
21392: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21393: LD_VAR 0 1
21397: PPUSH
21398: LD_VAR 0 3
21402: PPUSH
21403: LD_VAR 0 4
21407: PPUSH
21408: CALL_OW 297
21412: PUSH
21413: LD_VAR 0 14
21417: GREATER
21418: IFFALSE 21422
// exit ;
21420: GO 21947
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21422: LD_ADDR_VAR 0 12
21426: PUSH
21427: LD_VAR 0 2
21431: PPUSH
21432: LD_VAR 0 3
21436: PPUSH
21437: LD_VAR 0 4
21441: PPUSH
21442: LD_VAR 0 5
21446: PPUSH
21447: LD_VAR 0 1
21451: PPUSH
21452: CALL_OW 248
21456: PPUSH
21457: LD_INT 0
21459: PPUSH
21460: CALL 21952 0 6
21464: ST_TO_ADDR
// if not hexes then
21465: LD_VAR 0 12
21469: NOT
21470: IFFALSE 21474
// exit ;
21472: GO 21947
// hex := GetHexInfo ( x , y ) ;
21474: LD_ADDR_VAR 0 15
21478: PUSH
21479: LD_VAR 0 3
21483: PPUSH
21484: LD_VAR 0 4
21488: PPUSH
21489: CALL_OW 546
21493: ST_TO_ADDR
// if hex [ 1 ] then
21494: LD_VAR 0 15
21498: PUSH
21499: LD_INT 1
21501: ARRAY
21502: IFFALSE 21506
// exit ;
21504: GO 21947
// height := hex [ 2 ] ;
21506: LD_ADDR_VAR 0 13
21510: PUSH
21511: LD_VAR 0 15
21515: PUSH
21516: LD_INT 2
21518: ARRAY
21519: ST_TO_ADDR
// for i = 1 to hexes do
21520: LD_ADDR_VAR 0 7
21524: PUSH
21525: DOUBLE
21526: LD_INT 1
21528: DEC
21529: ST_TO_ADDR
21530: LD_VAR 0 12
21534: PUSH
21535: FOR_TO
21536: IFFALSE 21866
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
21538: LD_VAR 0 12
21542: PUSH
21543: LD_VAR 0 7
21547: ARRAY
21548: PUSH
21549: LD_INT 1
21551: ARRAY
21552: PPUSH
21553: LD_VAR 0 12
21557: PUSH
21558: LD_VAR 0 7
21562: ARRAY
21563: PUSH
21564: LD_INT 2
21566: ARRAY
21567: PPUSH
21568: CALL_OW 488
21572: NOT
21573: PUSH
21574: LD_VAR 0 12
21578: PUSH
21579: LD_VAR 0 7
21583: ARRAY
21584: PUSH
21585: LD_INT 1
21587: ARRAY
21588: PPUSH
21589: LD_VAR 0 12
21593: PUSH
21594: LD_VAR 0 7
21598: ARRAY
21599: PUSH
21600: LD_INT 2
21602: ARRAY
21603: PPUSH
21604: CALL_OW 428
21608: PUSH
21609: LD_INT 0
21611: GREATER
21612: OR
21613: PUSH
21614: LD_VAR 0 12
21618: PUSH
21619: LD_VAR 0 7
21623: ARRAY
21624: PUSH
21625: LD_INT 1
21627: ARRAY
21628: PPUSH
21629: LD_VAR 0 12
21633: PUSH
21634: LD_VAR 0 7
21638: ARRAY
21639: PUSH
21640: LD_INT 2
21642: ARRAY
21643: PPUSH
21644: CALL_OW 351
21648: OR
21649: IFFALSE 21655
// exit ;
21651: POP
21652: POP
21653: GO 21947
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21655: LD_ADDR_VAR 0 8
21659: PUSH
21660: LD_VAR 0 12
21664: PUSH
21665: LD_VAR 0 7
21669: ARRAY
21670: PUSH
21671: LD_INT 1
21673: ARRAY
21674: PPUSH
21675: LD_VAR 0 12
21679: PUSH
21680: LD_VAR 0 7
21684: ARRAY
21685: PUSH
21686: LD_INT 2
21688: ARRAY
21689: PPUSH
21690: CALL_OW 546
21694: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
21695: LD_VAR 0 8
21699: PUSH
21700: LD_INT 1
21702: ARRAY
21703: PUSH
21704: LD_VAR 0 8
21708: PUSH
21709: LD_INT 2
21711: ARRAY
21712: PUSH
21713: LD_VAR 0 13
21717: PUSH
21718: LD_INT 2
21720: PLUS
21721: GREATER
21722: OR
21723: PUSH
21724: LD_VAR 0 8
21728: PUSH
21729: LD_INT 2
21731: ARRAY
21732: PUSH
21733: LD_VAR 0 13
21737: PUSH
21738: LD_INT 2
21740: MINUS
21741: LESS
21742: OR
21743: PUSH
21744: LD_VAR 0 8
21748: PUSH
21749: LD_INT 3
21751: ARRAY
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: LD_INT 8
21758: PUSH
21759: LD_INT 9
21761: PUSH
21762: LD_INT 10
21764: PUSH
21765: LD_INT 11
21767: PUSH
21768: LD_INT 12
21770: PUSH
21771: LD_INT 13
21773: PUSH
21774: LD_INT 16
21776: PUSH
21777: LD_INT 17
21779: PUSH
21780: LD_INT 18
21782: PUSH
21783: LD_INT 19
21785: PUSH
21786: LD_INT 20
21788: PUSH
21789: LD_INT 21
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: IN
21807: NOT
21808: OR
21809: PUSH
21810: LD_VAR 0 8
21814: PUSH
21815: LD_INT 5
21817: ARRAY
21818: NOT
21819: OR
21820: PUSH
21821: LD_VAR 0 8
21825: PUSH
21826: LD_INT 6
21828: ARRAY
21829: PUSH
21830: LD_INT 1
21832: PUSH
21833: LD_INT 2
21835: PUSH
21836: LD_INT 7
21838: PUSH
21839: LD_INT 9
21841: PUSH
21842: LD_INT 10
21844: PUSH
21845: LD_INT 11
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: IN
21856: NOT
21857: OR
21858: IFFALSE 21864
// exit ;
21860: POP
21861: POP
21862: GO 21947
// end ;
21864: GO 21535
21866: POP
21867: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
21868: LD_VAR 0 9
21872: PPUSH
21873: LD_VAR 0 3
21877: PPUSH
21878: LD_VAR 0 4
21882: PPUSH
21883: LD_INT 20
21885: PPUSH
21886: CALL 13893 0 4
21890: PUSH
21891: LD_INT 4
21893: ARRAY
21894: IFFALSE 21898
// exit ;
21896: GO 21947
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
21898: LD_VAR 0 2
21902: PUSH
21903: LD_INT 29
21905: PUSH
21906: LD_INT 30
21908: PUSH
21909: EMPTY
21910: LIST
21911: LIST
21912: IN
21913: PUSH
21914: LD_VAR 0 3
21918: PPUSH
21919: LD_VAR 0 4
21923: PPUSH
21924: LD_VAR 0 9
21928: PPUSH
21929: CALL_OW 440
21933: NOT
21934: AND
21935: IFFALSE 21939
// exit ;
21937: GO 21947
// result := true ;
21939: LD_ADDR_VAR 0 6
21943: PUSH
21944: LD_INT 1
21946: ST_TO_ADDR
// end ;
21947: LD_VAR 0 6
21951: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21952: LD_INT 0
21954: PPUSH
21955: PPUSH
21956: PPUSH
21957: PPUSH
21958: PPUSH
21959: PPUSH
21960: PPUSH
21961: PPUSH
21962: PPUSH
21963: PPUSH
21964: PPUSH
21965: PPUSH
21966: PPUSH
21967: PPUSH
21968: PPUSH
21969: PPUSH
21970: PPUSH
21971: PPUSH
21972: PPUSH
21973: PPUSH
21974: PPUSH
21975: PPUSH
21976: PPUSH
21977: PPUSH
21978: PPUSH
21979: PPUSH
21980: PPUSH
21981: PPUSH
21982: PPUSH
21983: PPUSH
21984: PPUSH
21985: PPUSH
21986: PPUSH
21987: PPUSH
21988: PPUSH
21989: PPUSH
21990: PPUSH
21991: PPUSH
21992: PPUSH
21993: PPUSH
21994: PPUSH
21995: PPUSH
21996: PPUSH
21997: PPUSH
21998: PPUSH
21999: PPUSH
22000: PPUSH
22001: PPUSH
22002: PPUSH
22003: PPUSH
22004: PPUSH
22005: PPUSH
22006: PPUSH
22007: PPUSH
22008: PPUSH
22009: PPUSH
22010: PPUSH
22011: PPUSH
// result = [ ] ;
22012: LD_ADDR_VAR 0 7
22016: PUSH
22017: EMPTY
22018: ST_TO_ADDR
// temp_list = [ ] ;
22019: LD_ADDR_VAR 0 9
22023: PUSH
22024: EMPTY
22025: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22026: LD_VAR 0 4
22030: PUSH
22031: LD_INT 0
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: LD_INT 2
22039: PUSH
22040: LD_INT 3
22042: PUSH
22043: LD_INT 4
22045: PUSH
22046: LD_INT 5
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: IN
22057: NOT
22058: PUSH
22059: LD_VAR 0 1
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: LD_INT 1
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: IN
22074: PUSH
22075: LD_VAR 0 5
22079: PUSH
22080: LD_INT 1
22082: PUSH
22083: LD_INT 2
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: LIST
22093: IN
22094: NOT
22095: AND
22096: OR
22097: IFFALSE 22101
// exit ;
22099: GO 40492
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22101: LD_VAR 0 1
22105: PUSH
22106: LD_INT 6
22108: PUSH
22109: LD_INT 7
22111: PUSH
22112: LD_INT 8
22114: PUSH
22115: LD_INT 13
22117: PUSH
22118: LD_INT 12
22120: PUSH
22121: LD_INT 15
22123: PUSH
22124: LD_INT 11
22126: PUSH
22127: LD_INT 14
22129: PUSH
22130: LD_INT 10
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: IN
22144: IFFALSE 22154
// btype = b_lab ;
22146: LD_ADDR_VAR 0 1
22150: PUSH
22151: LD_INT 6
22153: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22154: LD_VAR 0 6
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: LD_INT 2
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: LIST
22172: IN
22173: NOT
22174: PUSH
22175: LD_VAR 0 1
22179: PUSH
22180: LD_INT 0
22182: PUSH
22183: LD_INT 1
22185: PUSH
22186: LD_INT 2
22188: PUSH
22189: LD_INT 3
22191: PUSH
22192: LD_INT 6
22194: PUSH
22195: LD_INT 36
22197: PUSH
22198: LD_INT 4
22200: PUSH
22201: LD_INT 5
22203: PUSH
22204: LD_INT 31
22206: PUSH
22207: LD_INT 32
22209: PUSH
22210: LD_INT 33
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: LIST
22220: LIST
22221: LIST
22222: LIST
22223: LIST
22224: LIST
22225: IN
22226: NOT
22227: PUSH
22228: LD_VAR 0 6
22232: PUSH
22233: LD_INT 1
22235: EQUAL
22236: AND
22237: OR
22238: PUSH
22239: LD_VAR 0 1
22243: PUSH
22244: LD_INT 2
22246: PUSH
22247: LD_INT 3
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: IN
22254: NOT
22255: PUSH
22256: LD_VAR 0 6
22260: PUSH
22261: LD_INT 2
22263: EQUAL
22264: AND
22265: OR
22266: IFFALSE 22276
// mode = 0 ;
22268: LD_ADDR_VAR 0 6
22272: PUSH
22273: LD_INT 0
22275: ST_TO_ADDR
// case mode of 0 :
22276: LD_VAR 0 6
22280: PUSH
22281: LD_INT 0
22283: DOUBLE
22284: EQUAL
22285: IFTRUE 22289
22287: GO 33742
22289: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22290: LD_ADDR_VAR 0 11
22294: PUSH
22295: LD_INT 0
22297: PUSH
22298: LD_INT 0
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 0
22307: PUSH
22308: LD_INT 1
22310: NEG
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: LD_INT 0
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 1
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 0
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 1
22348: NEG
22349: PUSH
22350: LD_INT 0
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 1
22359: NEG
22360: PUSH
22361: LD_INT 1
22363: NEG
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 1
22371: NEG
22372: PUSH
22373: LD_INT 2
22375: NEG
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 0
22383: PUSH
22384: LD_INT 2
22386: NEG
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 1
22394: PUSH
22395: LD_INT 1
22397: NEG
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: LD_INT 2
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 0
22415: PUSH
22416: LD_INT 2
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: NEG
22426: PUSH
22427: LD_INT 1
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: LD_INT 1
22436: PUSH
22437: LD_INT 3
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 0
22446: PUSH
22447: LD_INT 3
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 1
22456: NEG
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22483: LD_ADDR_VAR 0 12
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 0
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 1
22511: PUSH
22512: LD_INT 0
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: LD_INT 1
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 0
22531: PUSH
22532: LD_INT 1
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: NEG
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 1
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 2
22575: PUSH
22576: LD_INT 0
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 2
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 2
22606: NEG
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 2
22617: NEG
22618: PUSH
22619: LD_INT 1
22621: NEG
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 2
22629: NEG
22630: PUSH
22631: LD_INT 1
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 3
22640: NEG
22641: PUSH
22642: LD_INT 0
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 3
22651: NEG
22652: PUSH
22653: LD_INT 1
22655: NEG
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22679: LD_ADDR_VAR 0 13
22683: PUSH
22684: LD_INT 0
22686: PUSH
22687: LD_INT 0
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 0
22696: PUSH
22697: LD_INT 1
22699: NEG
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 1
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 1
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 0
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: NEG
22738: PUSH
22739: LD_INT 0
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 1
22748: NEG
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: NEG
22761: PUSH
22762: LD_INT 2
22764: NEG
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 2
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 2
22782: PUSH
22783: LD_INT 2
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: LD_INT 1
22792: PUSH
22793: LD_INT 2
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 2
22802: NEG
22803: PUSH
22804: LD_INT 1
22806: NEG
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 2
22814: NEG
22815: PUSH
22816: LD_INT 2
22818: NEG
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 2
22826: NEG
22827: PUSH
22828: LD_INT 3
22830: NEG
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 3
22838: NEG
22839: PUSH
22840: LD_INT 2
22842: NEG
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: LD_INT 3
22850: NEG
22851: PUSH
22852: LD_INT 3
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: LIST
22877: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
22878: LD_ADDR_VAR 0 14
22882: PUSH
22883: LD_INT 0
22885: PUSH
22886: LD_INT 0
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 0
22895: PUSH
22896: LD_INT 1
22898: NEG
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: LD_INT 0
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 1
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 1
22936: NEG
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: NEG
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: NEG
22960: PUSH
22961: LD_INT 2
22963: NEG
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: LD_INT 2
22974: NEG
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 1
22982: PUSH
22983: LD_INT 1
22985: NEG
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 1
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 0
23003: PUSH
23004: LD_INT 2
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 1
23013: NEG
23014: PUSH
23015: LD_INT 1
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: NEG
23025: PUSH
23026: LD_INT 3
23028: NEG
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 0
23036: PUSH
23037: LD_INT 3
23039: NEG
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 1
23047: PUSH
23048: LD_INT 2
23050: NEG
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23074: LD_ADDR_VAR 0 15
23078: PUSH
23079: LD_INT 0
23081: PUSH
23082: LD_INT 0
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 0
23091: PUSH
23092: LD_INT 1
23094: NEG
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 1
23102: PUSH
23103: LD_INT 0
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 0
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 1
23132: NEG
23133: PUSH
23134: LD_INT 0
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: NEG
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 1
23155: PUSH
23156: LD_INT 1
23158: NEG
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 2
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: LD_INT 1
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 1
23186: NEG
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 2
23197: NEG
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 2
23208: NEG
23209: PUSH
23210: LD_INT 1
23212: NEG
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 2
23220: PUSH
23221: LD_INT 1
23223: NEG
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: PUSH
23229: LD_INT 3
23231: PUSH
23232: LD_INT 0
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 3
23241: PUSH
23242: LD_INT 1
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23267: LD_ADDR_VAR 0 16
23271: PUSH
23272: LD_INT 0
23274: PUSH
23275: LD_INT 0
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 0
23284: PUSH
23285: LD_INT 1
23287: NEG
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 1
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 1
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 0
23315: PUSH
23316: LD_INT 1
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: LD_INT 1
23325: NEG
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 1
23336: NEG
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 1
23348: NEG
23349: PUSH
23350: LD_INT 2
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 2
23370: PUSH
23371: LD_INT 2
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 2
23390: NEG
23391: PUSH
23392: LD_INT 1
23394: NEG
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 2
23402: NEG
23403: PUSH
23404: LD_INT 2
23406: NEG
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 3
23414: PUSH
23415: LD_INT 2
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 3
23424: PUSH
23425: LD_INT 3
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 2
23434: PUSH
23435: LD_INT 3
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23460: LD_ADDR_VAR 0 17
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: LD_INT 0
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 0
23477: PUSH
23478: LD_INT 1
23480: NEG
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 1
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: LD_INT 1
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 0
23508: PUSH
23509: LD_INT 1
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: PUSH
23520: LD_INT 0
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: LD_INT 1
23533: NEG
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: LD_INT 1
23541: NEG
23542: PUSH
23543: LD_INT 2
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 0
23553: PUSH
23554: LD_INT 2
23556: NEG
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 1
23564: PUSH
23565: LD_INT 1
23567: NEG
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 2
23575: PUSH
23576: LD_INT 0
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 2
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: LD_INT 2
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: PUSH
23606: LD_INT 2
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: LD_INT 2
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 2
23636: NEG
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 2
23647: NEG
23648: PUSH
23649: LD_INT 1
23651: NEG
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 2
23659: NEG
23660: PUSH
23661: LD_INT 2
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23690: LD_ADDR_VAR 0 18
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 0
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 0
23707: PUSH
23708: LD_INT 1
23710: NEG
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 1
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 1
23748: NEG
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 1
23759: NEG
23760: PUSH
23761: LD_INT 1
23763: NEG
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: LD_INT 2
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: LD_INT 2
23786: NEG
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 1
23797: NEG
23798: PUSH
23799: EMPTY
23800: LIST
23801: LIST
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 2
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: LD_INT 2
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 2
23866: NEG
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 2
23877: NEG
23878: PUSH
23879: LD_INT 1
23881: NEG
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: LD_INT 2
23889: NEG
23890: PUSH
23891: LD_INT 2
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23920: LD_ADDR_VAR 0 19
23924: PUSH
23925: LD_INT 0
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 0
23937: PUSH
23938: LD_INT 1
23940: NEG
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: LD_INT 0
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: LD_INT 1
23958: PUSH
23959: LD_INT 1
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 1
23978: NEG
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 1
23989: NEG
23990: PUSH
23991: LD_INT 1
23993: NEG
23994: PUSH
23995: EMPTY
23996: LIST
23997: LIST
23998: PUSH
23999: LD_INT 1
24001: NEG
24002: PUSH
24003: LD_INT 2
24005: NEG
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: LD_INT 2
24016: NEG
24017: PUSH
24018: EMPTY
24019: LIST
24020: LIST
24021: PUSH
24022: LD_INT 1
24024: PUSH
24025: LD_INT 1
24027: NEG
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: LD_INT 2
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: LD_INT 2
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: LD_INT 2
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: LD_INT 1
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 2
24096: NEG
24097: PUSH
24098: LD_INT 0
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 2
24107: NEG
24108: PUSH
24109: LD_INT 1
24111: NEG
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 2
24119: NEG
24120: PUSH
24121: LD_INT 2
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24150: LD_ADDR_VAR 0 20
24154: PUSH
24155: LD_INT 0
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: LD_INT 1
24170: NEG
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 0
24198: PUSH
24199: LD_INT 1
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 1
24231: NEG
24232: PUSH
24233: LD_INT 2
24235: NEG
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 0
24243: PUSH
24244: LD_INT 2
24246: NEG
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: LD_INT 1
24257: NEG
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 2
24265: PUSH
24266: LD_INT 0
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 2
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 2
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 1
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 0
24305: PUSH
24306: LD_INT 2
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 2
24326: NEG
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 2
24337: NEG
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: PUSH
24347: LD_INT 2
24349: NEG
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24380: LD_ADDR_VAR 0 21
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 0
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 1
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: LD_INT 1
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 1
24438: NEG
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 1
24449: NEG
24450: PUSH
24451: LD_INT 1
24453: NEG
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: LD_INT 2
24465: NEG
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: LD_INT 2
24476: NEG
24477: PUSH
24478: EMPTY
24479: LIST
24480: LIST
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: LD_INT 1
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 2
24495: PUSH
24496: LD_INT 0
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: LD_INT 2
24505: PUSH
24506: LD_INT 1
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: LD_INT 2
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: LD_INT 2
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 0
24535: PUSH
24536: LD_INT 2
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 1
24545: NEG
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 2
24556: NEG
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 2
24567: NEG
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 2
24579: NEG
24580: PUSH
24581: LD_INT 2
24583: NEG
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24610: LD_ADDR_VAR 0 22
24614: PUSH
24615: LD_INT 0
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 0
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 1
24648: PUSH
24649: LD_INT 1
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 0
24658: PUSH
24659: LD_INT 1
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 1
24668: NEG
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: LD_INT 1
24683: NEG
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 1
24691: NEG
24692: PUSH
24693: LD_INT 2
24695: NEG
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 0
24703: PUSH
24704: LD_INT 2
24706: NEG
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 1
24714: PUSH
24715: LD_INT 1
24717: NEG
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 2
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: LD_INT 2
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: LD_INT 2
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: PUSH
24777: LD_INT 1
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 2
24786: NEG
24787: PUSH
24788: LD_INT 0
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 2
24797: NEG
24798: PUSH
24799: LD_INT 1
24801: NEG
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 2
24809: NEG
24810: PUSH
24811: LD_INT 2
24813: NEG
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
24840: LD_ADDR_VAR 0 23
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: LD_INT 0
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: PUSH
24855: LD_INT 0
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: LD_INT 1
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 0
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 1
24898: NEG
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: NEG
24922: PUSH
24923: LD_INT 2
24925: NEG
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 0
24933: PUSH
24934: LD_INT 2
24936: NEG
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: LD_INT 1
24947: NEG
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: LD_INT 0
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: LD_INT 1
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 2
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: LD_INT 2
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 2
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 1
25005: NEG
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 2
25016: NEG
25017: PUSH
25018: LD_INT 0
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 2
25027: NEG
25028: PUSH
25029: LD_INT 1
25031: NEG
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 2
25039: NEG
25040: PUSH
25041: LD_INT 2
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 2
25051: NEG
25052: PUSH
25053: LD_INT 3
25055: NEG
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: LD_INT 3
25067: NEG
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 2
25078: NEG
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25120: LD_ADDR_VAR 0 24
25124: PUSH
25125: LD_INT 0
25127: PUSH
25128: LD_INT 0
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: LD_INT 1
25140: NEG
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: LD_INT 0
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: LD_INT 1
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: LD_INT 1
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: NEG
25190: PUSH
25191: LD_INT 1
25193: NEG
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: LD_INT 2
25205: NEG
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: LD_INT 2
25216: NEG
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 2
25235: PUSH
25236: LD_INT 0
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 2
25245: PUSH
25246: LD_INT 1
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 2
25255: PUSH
25256: LD_INT 2
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: LD_INT 2
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: LD_INT 2
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 2
25296: NEG
25297: PUSH
25298: LD_INT 0
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 2
25307: NEG
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 2
25319: NEG
25320: PUSH
25321: LD_INT 2
25323: NEG
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 2
25334: NEG
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 2
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: LD_INT 3
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 3
25363: PUSH
25364: LD_INT 2
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25396: LD_ADDR_VAR 0 25
25400: PUSH
25401: LD_INT 0
25403: PUSH
25404: LD_INT 0
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PUSH
25411: LD_INT 0
25413: PUSH
25414: LD_INT 1
25416: NEG
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: LD_INT 0
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: LD_INT 0
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: LD_INT 1
25469: NEG
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 1
25477: NEG
25478: PUSH
25479: LD_INT 2
25481: NEG
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: LD_INT 0
25489: PUSH
25490: LD_INT 2
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 2
25511: PUSH
25512: LD_INT 0
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: LD_INT 1
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: LD_INT 2
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: LD_INT 2
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: LD_INT 2
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: LD_INT 1
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 2
25595: NEG
25596: PUSH
25597: LD_INT 2
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 3
25607: PUSH
25608: LD_INT 1
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 3
25617: PUSH
25618: LD_INT 2
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 2
25627: PUSH
25628: LD_INT 3
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: LD_INT 3
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
25670: LD_ADDR_VAR 0 26
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: LD_INT 0
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: LD_INT 1
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: LD_INT 0
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 1
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 0
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 1
25728: NEG
25729: PUSH
25730: LD_INT 0
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: LD_INT 1
25743: NEG
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 1
25751: NEG
25752: PUSH
25753: LD_INT 2
25755: NEG
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: LD_INT 2
25766: NEG
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 1
25774: PUSH
25775: LD_INT 1
25777: NEG
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: LD_INT 0
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: LD_INT 1
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 2
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: LD_INT 2
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: LD_INT 2
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 2
25846: NEG
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 2
25857: NEG
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 2
25869: NEG
25870: PUSH
25871: LD_INT 2
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 2
25881: PUSH
25882: LD_INT 3
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: LD_INT 3
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 1
25901: NEG
25902: PUSH
25903: LD_INT 2
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 2
25912: NEG
25913: PUSH
25914: LD_INT 1
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25946: LD_ADDR_VAR 0 27
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: LD_INT 0
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: LD_INT 1
25966: NEG
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: LD_INT 1
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: LD_INT 1
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 2
26031: NEG
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 0
26039: PUSH
26040: LD_INT 2
26042: NEG
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 2
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 2
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 1
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 0
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 1
26111: NEG
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 2
26122: NEG
26123: PUSH
26124: LD_INT 0
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 2
26133: NEG
26134: PUSH
26135: LD_INT 1
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 2
26145: NEG
26146: PUSH
26147: LD_INT 2
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: LD_INT 2
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 2
26168: NEG
26169: PUSH
26170: LD_INT 1
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 3
26179: NEG
26180: PUSH
26181: LD_INT 1
26183: NEG
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 3
26191: NEG
26192: PUSH
26193: LD_INT 2
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26226: LD_ADDR_VAR 0 28
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 0
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 1
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 1
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: LD_INT 0
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: NEG
26296: PUSH
26297: LD_INT 1
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: LD_INT 2
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: LD_INT 2
26322: NEG
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: LD_INT 1
26333: NEG
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 2
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 2
26361: PUSH
26362: LD_INT 2
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: LD_INT 2
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: LD_INT 2
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 2
26402: NEG
26403: PUSH
26404: LD_INT 0
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: PUSH
26411: LD_INT 2
26413: NEG
26414: PUSH
26415: LD_INT 1
26417: NEG
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 2
26425: NEG
26426: PUSH
26427: LD_INT 2
26429: NEG
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 2
26437: NEG
26438: PUSH
26439: LD_INT 3
26441: NEG
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: LD_INT 3
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 3
26461: NEG
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 3
26473: NEG
26474: PUSH
26475: LD_INT 2
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26508: LD_ADDR_VAR 0 29
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: LD_INT 0
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: LD_INT 1
26528: NEG
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: LD_INT 1
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: LD_INT 1
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 1
26566: NEG
26567: PUSH
26568: LD_INT 0
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 1
26577: NEG
26578: PUSH
26579: LD_INT 1
26581: NEG
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 1
26589: NEG
26590: PUSH
26591: LD_INT 2
26593: NEG
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 0
26601: PUSH
26602: LD_INT 2
26604: NEG
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 1
26612: PUSH
26613: LD_INT 1
26615: NEG
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 2
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 2
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: LD_INT 2
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: LD_INT 2
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 1
26663: NEG
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 2
26674: NEG
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 2
26686: NEG
26687: PUSH
26688: LD_INT 2
26690: NEG
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: LD_INT 3
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 2
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 3
26721: PUSH
26722: LD_INT 1
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: PUSH
26732: LD_INT 3
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: NEG
26742: PUSH
26743: LD_INT 2
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 3
26752: NEG
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26787: LD_ADDR_VAR 0 30
26791: PUSH
26792: LD_INT 0
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: LD_INT 1
26807: NEG
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 0
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 1
26856: NEG
26857: PUSH
26858: LD_INT 1
26860: NEG
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: LD_INT 2
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: LD_INT 2
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 2
26912: PUSH
26913: LD_INT 1
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 2
26922: PUSH
26923: LD_INT 2
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 1
26932: PUSH
26933: LD_INT 2
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PUSH
26940: LD_INT 1
26942: NEG
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: PUSH
26951: LD_INT 2
26953: NEG
26954: PUSH
26955: LD_INT 0
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 2
26964: NEG
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: NEG
26977: PUSH
26978: LD_INT 3
26980: NEG
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: LD_INT 2
26991: NEG
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 3
26999: PUSH
27000: LD_INT 2
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: LD_INT 3
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 2
27019: NEG
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 3
27030: NEG
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27065: LD_ADDR_VAR 0 31
27069: PUSH
27070: LD_INT 0
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 1
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 1
27123: NEG
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: LIST
27130: LIST
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: LD_INT 2
27150: NEG
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 2
27169: PUSH
27170: LD_INT 0
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 2
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: LD_INT 2
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: LD_INT 2
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: LD_INT 0
27209: PUSH
27210: LD_INT 2
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 2
27230: NEG
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 2
27242: NEG
27243: PUSH
27244: LD_INT 2
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 2
27254: NEG
27255: PUSH
27256: LD_INT 3
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 3
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: LD_INT 3
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: LD_INT 2
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 3
27308: NEG
27309: PUSH
27310: LD_INT 2
27312: NEG
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27343: LD_ADDR_VAR 0 32
27347: PUSH
27348: LD_INT 0
27350: PUSH
27351: LD_INT 0
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: LD_INT 0
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: LD_INT 1
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 1
27412: NEG
27413: PUSH
27414: LD_INT 1
27416: NEG
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: LD_INT 2
27428: NEG
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 0
27436: PUSH
27437: LD_INT 2
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 2
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 2
27468: PUSH
27469: LD_INT 2
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: PUSH
27479: LD_INT 2
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: LD_INT 2
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: NEG
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: PUSH
27507: LD_INT 2
27509: NEG
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 2
27520: NEG
27521: PUSH
27522: LD_INT 1
27524: NEG
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 1
27532: NEG
27533: PUSH
27534: LD_INT 3
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PUSH
27553: LD_INT 3
27555: PUSH
27556: LD_INT 2
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 2
27565: PUSH
27566: LD_INT 3
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 2
27575: NEG
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 3
27586: NEG
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27621: LD_ADDR_VAR 0 33
27625: PUSH
27626: LD_INT 0
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 1
27649: PUSH
27650: LD_INT 0
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: LD_INT 1
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 1
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: LD_INT 0
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 1
27690: NEG
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: LD_INT 2
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: PUSH
27715: LD_INT 1
27717: NEG
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: LD_INT 0
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 1
27745: PUSH
27746: LD_INT 2
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 0
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 1
27765: NEG
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 2
27776: NEG
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 2
27787: NEG
27788: PUSH
27789: LD_INT 1
27791: NEG
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 2
27799: NEG
27800: PUSH
27801: LD_INT 2
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: NEG
27812: PUSH
27813: LD_INT 3
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: LD_INT 1
27826: NEG
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 3
27834: PUSH
27835: LD_INT 1
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: LD_INT 3
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 1
27854: NEG
27855: PUSH
27856: LD_INT 2
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 3
27865: NEG
27866: PUSH
27867: LD_INT 2
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27900: LD_ADDR_VAR 0 34
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: LD_INT 1
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: LD_INT 2
27985: NEG
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: LD_INT 2
27996: NEG
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 2
28015: PUSH
28016: LD_INT 1
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: LD_INT 2
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: LD_INT 2
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: NEG
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: LD_INT 2
28056: NEG
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 2
28067: NEG
28068: PUSH
28069: LD_INT 1
28071: NEG
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 2
28079: NEG
28080: PUSH
28081: LD_INT 2
28083: NEG
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 3
28095: NEG
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 1
28103: PUSH
28104: LD_INT 2
28106: NEG
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 3
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: LD_INT 3
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 2
28134: NEG
28135: PUSH
28136: LD_INT 1
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PUSH
28143: LD_INT 3
28145: NEG
28146: PUSH
28147: LD_INT 1
28149: NEG
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28180: LD_ADDR_VAR 0 35
28184: PUSH
28185: LD_INT 0
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 0
28228: PUSH
28229: LD_INT 1
28231: PUSH
28232: EMPTY
28233: LIST
28234: LIST
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: LD_INT 0
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: NEG
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 2
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: LD_INT 1
28275: NEG
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28292: LD_ADDR_VAR 0 36
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: LD_INT 1
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 1
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 1
28350: NEG
28351: PUSH
28352: LD_INT 0
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: LD_INT 1
28365: NEG
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: LD_INT 2
28377: NEG
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: LD_INT 2
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28404: LD_ADDR_VAR 0 37
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: LD_INT 1
28424: NEG
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: LD_INT 1
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: PUSH
28450: LD_INT 0
28452: PUSH
28453: LD_INT 1
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: NEG
28463: PUSH
28464: LD_INT 0
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 1
28473: NEG
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: NEG
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28516: LD_ADDR_VAR 0 38
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: LD_INT 1
28536: NEG
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 1
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 1
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 0
28564: PUSH
28565: LD_INT 1
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 1
28574: NEG
28575: PUSH
28576: LD_INT 0
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: LD_INT 1
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 2
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 2
28607: NEG
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28628: LD_ADDR_VAR 0 39
28632: PUSH
28633: LD_INT 0
28635: PUSH
28636: LD_INT 0
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: LD_INT 1
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 1
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 1
28666: PUSH
28667: LD_INT 1
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: LD_INT 1
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: PUSH
28684: LD_INT 1
28686: NEG
28687: PUSH
28688: LD_INT 0
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: NEG
28710: PUSH
28711: LD_INT 2
28713: NEG
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 1
28721: PUSH
28722: LD_INT 2
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28740: LD_ADDR_VAR 0 40
28744: PUSH
28745: LD_INT 0
28747: PUSH
28748: LD_INT 0
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: LD_INT 1
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: LD_INT 0
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 1
28778: PUSH
28779: LD_INT 1
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: PUSH
28811: LD_INT 1
28813: NEG
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 1
28821: PUSH
28822: LD_INT 1
28824: NEG
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28852: LD_ADDR_VAR 0 41
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 0
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: LD_INT 1
28872: NEG
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: LD_INT 0
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 0
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 1
28910: NEG
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: PUSH
28931: LD_INT 1
28933: NEG
28934: PUSH
28935: LD_INT 2
28937: NEG
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 2
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 2
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 2
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: LD_INT 2
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: NEG
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 2
29007: NEG
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 2
29018: NEG
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 2
29030: NEG
29031: PUSH
29032: LD_INT 2
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 2
29042: NEG
29043: PUSH
29044: LD_INT 3
29046: NEG
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 2
29054: PUSH
29055: LD_INT 1
29057: NEG
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 3
29065: PUSH
29066: LD_INT 0
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PUSH
29073: LD_INT 3
29075: PUSH
29076: LD_INT 1
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 3
29085: PUSH
29086: LD_INT 2
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 3
29095: PUSH
29096: LD_INT 3
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 2
29105: PUSH
29106: LD_INT 3
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 2
29115: NEG
29116: PUSH
29117: LD_INT 1
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 3
29126: NEG
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 3
29137: NEG
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 3
29149: NEG
29150: PUSH
29151: LD_INT 2
29153: NEG
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 3
29161: NEG
29162: PUSH
29163: LD_INT 3
29165: NEG
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: LIST
29200: LIST
29201: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29202: LD_ADDR_VAR 0 42
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: LD_INT 1
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: LD_INT 1
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: LD_INT 1
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 1
29260: NEG
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 1
29271: NEG
29272: PUSH
29273: LD_INT 1
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: LD_INT 2
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 0
29295: PUSH
29296: LD_INT 2
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 2
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 2
29327: PUSH
29328: LD_INT 2
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 1
29337: PUSH
29338: LD_INT 2
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 0
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: NEG
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 2
29368: NEG
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 2
29380: NEG
29381: PUSH
29382: LD_INT 2
29384: NEG
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 2
29392: NEG
29393: PUSH
29394: LD_INT 3
29396: NEG
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 1
29404: NEG
29405: PUSH
29406: LD_INT 3
29408: NEG
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 0
29416: PUSH
29417: LD_INT 3
29419: NEG
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: LD_INT 2
29430: NEG
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 3
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 3
29448: PUSH
29449: LD_INT 3
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 2
29458: PUSH
29459: LD_INT 3
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 1
29468: PUSH
29469: LD_INT 3
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 0
29478: PUSH
29479: LD_INT 3
29481: PUSH
29482: EMPTY
29483: LIST
29484: LIST
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 3
29499: NEG
29500: PUSH
29501: LD_INT 2
29503: NEG
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 3
29511: NEG
29512: PUSH
29513: LD_INT 3
29515: NEG
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29552: LD_ADDR_VAR 0 43
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: LD_INT 0
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: LD_INT 1
29572: NEG
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 1
29580: PUSH
29581: LD_INT 0
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: PUSH
29588: LD_INT 1
29590: PUSH
29591: LD_INT 1
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 0
29600: PUSH
29601: LD_INT 1
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 1
29610: NEG
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 1
29621: NEG
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 1
29633: NEG
29634: PUSH
29635: LD_INT 2
29637: NEG
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 2
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: LD_INT 1
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 2
29667: PUSH
29668: LD_INT 0
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 2
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 0
29697: PUSH
29698: LD_INT 2
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: NEG
29708: PUSH
29709: LD_INT 1
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 2
29718: NEG
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 2
29729: NEG
29730: PUSH
29731: LD_INT 1
29733: NEG
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: LD_INT 3
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 0
29753: PUSH
29754: LD_INT 3
29756: NEG
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: PUSH
29765: LD_INT 2
29767: NEG
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 2
29775: PUSH
29776: LD_INT 1
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 3
29786: PUSH
29787: LD_INT 0
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: LD_INT 1
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: LD_INT 3
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: NEG
29827: PUSH
29828: LD_INT 2
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 2
29837: NEG
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 3
29848: NEG
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 3
29859: NEG
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29900: LD_ADDR_VAR 0 44
29904: PUSH
29905: LD_INT 0
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 0
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 1
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: LD_INT 1
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 0
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: LD_INT 1
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: LD_INT 2
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: LD_INT 1
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: LD_INT 2
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: LD_INT 2
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: LD_INT 1
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 2
30055: NEG
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 2
30066: NEG
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 2
30078: NEG
30079: PUSH
30080: LD_INT 2
30082: NEG
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 2
30090: NEG
30091: PUSH
30092: LD_INT 3
30094: NEG
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 2
30102: PUSH
30103: LD_INT 1
30105: NEG
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 3
30113: PUSH
30114: LD_INT 0
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: PUSH
30121: LD_INT 3
30123: PUSH
30124: LD_INT 1
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 3
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 3
30143: PUSH
30144: LD_INT 3
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 2
30153: PUSH
30154: LD_INT 3
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 2
30163: NEG
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: PUSH
30172: LD_INT 3
30174: NEG
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: EMPTY
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 3
30185: NEG
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 3
30197: NEG
30198: PUSH
30199: LD_INT 2
30201: NEG
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 3
30209: NEG
30210: PUSH
30211: LD_INT 3
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30250: LD_ADDR_VAR 0 45
30254: PUSH
30255: LD_INT 0
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: LD_INT 1
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 0
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: PUSH
30317: LD_INT 1
30319: NEG
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 1
30331: NEG
30332: PUSH
30333: LD_INT 2
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 0
30343: PUSH
30344: LD_INT 2
30346: NEG
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: LD_INT 1
30357: NEG
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: LD_INT 2
30365: PUSH
30366: LD_INT 1
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 2
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: LD_INT 2
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: LD_INT 2
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 2
30416: NEG
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 2
30428: NEG
30429: PUSH
30430: LD_INT 2
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 2
30440: NEG
30441: PUSH
30442: LD_INT 3
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 1
30452: NEG
30453: PUSH
30454: LD_INT 3
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: LD_INT 3
30467: NEG
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 1
30475: PUSH
30476: LD_INT 2
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 3
30486: PUSH
30487: LD_INT 2
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 3
30496: PUSH
30497: LD_INT 3
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: LD_INT 3
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: LD_INT 3
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: LD_INT 3
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 1
30536: NEG
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 3
30547: NEG
30548: PUSH
30549: LD_INT 2
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 3
30559: NEG
30560: PUSH
30561: LD_INT 3
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30600: LD_ADDR_VAR 0 46
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 0
30617: PUSH
30618: LD_INT 1
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: LD_INT 0
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 0
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 1
30669: NEG
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: LD_INT 2
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: LD_INT 2
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: LD_INT 1
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 2
30715: PUSH
30716: LD_INT 0
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: PUSH
30736: LD_INT 2
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 1
30755: NEG
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 2
30766: NEG
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 2
30777: NEG
30778: PUSH
30779: LD_INT 1
30781: NEG
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 1
30789: NEG
30790: PUSH
30791: LD_INT 3
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: LD_INT 3
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 1
30812: PUSH
30813: LD_INT 2
30815: NEG
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 2
30823: PUSH
30824: LD_INT 1
30826: NEG
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 3
30834: PUSH
30835: LD_INT 0
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 3
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 1
30854: PUSH
30855: LD_INT 3
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 0
30864: PUSH
30865: LD_INT 3
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 2
30885: NEG
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 3
30896: NEG
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 3
30907: NEG
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30948: LD_ADDR_VAR 0 47
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: PUSH
30977: LD_INT 0
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 1
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 0
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 1
31017: NEG
31018: PUSH
31019: LD_INT 1
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: NEG
31030: PUSH
31031: LD_INT 2
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: LD_INT 2
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 1
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 2
31063: NEG
31064: PUSH
31065: LD_INT 1
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 2
31075: NEG
31076: PUSH
31077: LD_INT 2
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31099: LD_ADDR_VAR 0 48
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: LD_INT 1
31119: NEG
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: LD_INT 0
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 1
31137: PUSH
31138: LD_INT 1
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 1
31157: NEG
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 1
31168: NEG
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: LD_INT 2
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 0
31192: PUSH
31193: LD_INT 2
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 2
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 2
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31246: LD_ADDR_VAR 0 49
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: LD_INT 0
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 0
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: LD_INT 0
31308: PUSH
31309: EMPTY
31310: LIST
31311: LIST
31312: PUSH
31313: LD_INT 1
31315: NEG
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 2
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31390: LD_ADDR_VAR 0 50
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 0
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 0
31438: PUSH
31439: LD_INT 1
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 0
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 1
31459: NEG
31460: PUSH
31461: LD_INT 1
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 2
31471: PUSH
31472: LD_INT 1
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: LD_INT 2
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 0
31501: PUSH
31502: LD_INT 2
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 1
31511: NEG
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31534: LD_ADDR_VAR 0 51
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 0
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 0
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: LD_INT 0
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PUSH
31605: LD_INT 1
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: LD_INT 2
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 2
31646: NEG
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 2
31657: NEG
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31681: LD_ADDR_VAR 0 52
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: LD_INT 1
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 1
31739: NEG
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: NEG
31763: PUSH
31764: LD_INT 2
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 1
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 2
31785: NEG
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 2
31796: NEG
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 2
31808: NEG
31809: PUSH
31810: LD_INT 2
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31832: LD_ADDR_VAR 0 53
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 0
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: LD_INT 1
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: LD_INT 1
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: PUSH
31915: LD_INT 2
31917: NEG
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: LD_INT 2
31928: NEG
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 2
31947: PUSH
31948: LD_INT 0
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: LD_INT 2
31957: PUSH
31958: LD_INT 1
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 2
31967: PUSH
31968: LD_INT 2
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: LD_INT 2
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: LD_INT 2
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: NEG
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 2
32008: NEG
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 2
32019: NEG
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 2
32031: NEG
32032: PUSH
32033: LD_INT 2
32035: NEG
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32062: LD_ADDR_VAR 0 54
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 0
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: LD_INT 1
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: NEG
32132: PUSH
32133: LD_INT 1
32135: NEG
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 1
32143: NEG
32144: PUSH
32145: LD_INT 2
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: LD_INT 2
32158: NEG
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 1
32166: PUSH
32167: LD_INT 1
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 2
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 2
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: LD_INT 2
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: LD_INT 2
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 2
32238: NEG
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 2
32249: NEG
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 2
32261: NEG
32262: PUSH
32263: LD_INT 2
32265: NEG
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32292: LD_ADDR_VAR 0 55
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 1
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: LD_INT 2
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: LD_INT 2
32388: NEG
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 2
32407: PUSH
32408: LD_INT 0
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 2
32417: PUSH
32418: LD_INT 1
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 1
32437: PUSH
32438: LD_INT 2
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 0
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: NEG
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 2
32468: NEG
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 2
32479: NEG
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 2
32491: NEG
32492: PUSH
32493: LD_INT 2
32495: NEG
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32522: LD_ADDR_VAR 0 56
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: LD_INT 0
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: LD_INT 1
32542: NEG
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: LD_INT 1
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 1
32591: NEG
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: NEG
32604: PUSH
32605: LD_INT 2
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 0
32615: PUSH
32616: LD_INT 2
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: PUSH
32627: LD_INT 1
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 1
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: LD_INT 1
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 0
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 2
32709: NEG
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 2
32721: NEG
32722: PUSH
32723: LD_INT 2
32725: NEG
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32752: LD_ADDR_VAR 0 57
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: LD_INT 0
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 1
32810: NEG
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: LD_INT 2
32837: NEG
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 0
32845: PUSH
32846: LD_INT 2
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 1
32856: PUSH
32857: LD_INT 1
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 2
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 2
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 2
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 1
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: PUSH
32926: LD_INT 2
32928: NEG
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 2
32939: NEG
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 2
32951: NEG
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32982: LD_ADDR_VAR 0 58
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: LD_INT 0
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 0
32999: PUSH
33000: LD_INT 1
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: PUSH
33021: LD_INT 1
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: PUSH
33028: LD_INT 0
33030: PUSH
33031: LD_INT 1
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 1
33063: NEG
33064: PUSH
33065: LD_INT 2
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: LD_INT 2
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 2
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 2
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 1
33127: PUSH
33128: LD_INT 2
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: LD_INT 2
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 2
33158: NEG
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 2
33169: NEG
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: NEG
33182: PUSH
33183: LD_INT 2
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33212: LD_ADDR_VAR 0 59
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 1
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33300: LD_ADDR_VAR 0 60
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: LD_INT 1
33320: NEG
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 1
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: LD_INT 1
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 0
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 1
33358: NEG
33359: PUSH
33360: LD_INT 0
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33388: LD_ADDR_VAR 0 61
33392: PUSH
33393: LD_INT 0
33395: PUSH
33396: LD_INT 0
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: LD_INT 1
33408: NEG
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 1
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 1
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 1
33446: NEG
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33476: LD_ADDR_VAR 0 62
33480: PUSH
33481: LD_INT 0
33483: PUSH
33484: LD_INT 0
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: LD_INT 1
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: NEG
33546: PUSH
33547: LD_INT 1
33549: NEG
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33564: LD_ADDR_VAR 0 63
33568: PUSH
33569: LD_INT 0
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 1
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 1
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 1
33622: NEG
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: LD_INT 1
33637: NEG
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33652: LD_ADDR_VAR 0 64
33656: PUSH
33657: LD_INT 0
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: LD_INT 1
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: PUSH
33681: LD_INT 0
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 0
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 1
33710: NEG
33711: PUSH
33712: LD_INT 0
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 1
33721: NEG
33722: PUSH
33723: LD_INT 1
33725: NEG
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: ST_TO_ADDR
// end ; 1 :
33740: GO 39637
33742: LD_INT 1
33744: DOUBLE
33745: EQUAL
33746: IFTRUE 33750
33748: GO 36373
33750: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33751: LD_ADDR_VAR 0 11
33755: PUSH
33756: LD_INT 1
33758: NEG
33759: PUSH
33760: LD_INT 3
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: LD_INT 3
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: LD_INT 2
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: LIST
33794: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33795: LD_ADDR_VAR 0 12
33799: PUSH
33800: LD_INT 2
33802: PUSH
33803: LD_INT 1
33805: NEG
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 3
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 3
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33836: LD_ADDR_VAR 0 13
33840: PUSH
33841: LD_INT 3
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 3
33853: PUSH
33854: LD_INT 3
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 2
33863: PUSH
33864: LD_INT 3
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: LIST
33875: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33876: LD_ADDR_VAR 0 14
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: LD_INT 3
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 0
33893: PUSH
33894: LD_INT 3
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 1
33903: NEG
33904: PUSH
33905: LD_INT 2
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: LIST
33916: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33917: LD_ADDR_VAR 0 15
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: LD_INT 1
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 3
33935: NEG
33936: PUSH
33937: LD_INT 0
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 3
33946: NEG
33947: PUSH
33948: LD_INT 1
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33961: LD_ADDR_VAR 0 16
33965: PUSH
33966: LD_INT 2
33968: NEG
33969: PUSH
33970: LD_INT 3
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 3
33980: NEG
33981: PUSH
33982: LD_INT 2
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 3
33992: NEG
33993: PUSH
33994: LD_INT 3
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: LIST
34006: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34007: LD_ADDR_VAR 0 17
34011: PUSH
34012: LD_INT 1
34014: NEG
34015: PUSH
34016: LD_INT 3
34018: NEG
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 0
34026: PUSH
34027: LD_INT 3
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: LD_INT 2
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: LIST
34050: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34051: LD_ADDR_VAR 0 18
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 3
34069: PUSH
34070: LD_INT 0
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 3
34079: PUSH
34080: LD_INT 1
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: LIST
34091: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34092: LD_ADDR_VAR 0 19
34096: PUSH
34097: LD_INT 3
34099: PUSH
34100: LD_INT 2
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 3
34109: PUSH
34110: LD_INT 3
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 2
34119: PUSH
34120: LD_INT 3
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: LIST
34131: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34132: LD_ADDR_VAR 0 20
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: LD_INT 3
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 3
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: LIST
34172: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34173: LD_ADDR_VAR 0 21
34177: PUSH
34178: LD_INT 2
34180: NEG
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 3
34191: NEG
34192: PUSH
34193: LD_INT 0
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 3
34202: NEG
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: LIST
34216: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34217: LD_ADDR_VAR 0 22
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: LD_INT 3
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 3
34236: NEG
34237: PUSH
34238: LD_INT 2
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 3
34248: NEG
34249: PUSH
34250: LD_INT 3
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34263: LD_ADDR_VAR 0 23
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: LD_INT 3
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 1
34281: NEG
34282: PUSH
34283: LD_INT 4
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: LD_INT 3
34296: NEG
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: LIST
34306: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34307: LD_ADDR_VAR 0 24
34311: PUSH
34312: LD_INT 3
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 3
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 4
34335: PUSH
34336: LD_INT 1
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: LIST
34347: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34348: LD_ADDR_VAR 0 25
34352: PUSH
34353: LD_INT 3
34355: PUSH
34356: LD_INT 3
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 4
34365: PUSH
34366: LD_INT 3
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 3
34375: PUSH
34376: LD_INT 4
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: LIST
34387: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34388: LD_ADDR_VAR 0 26
34392: PUSH
34393: LD_INT 0
34395: PUSH
34396: LD_INT 3
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: PUSH
34406: LD_INT 4
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 1
34415: NEG
34416: PUSH
34417: LD_INT 3
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: LIST
34428: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34429: LD_ADDR_VAR 0 27
34433: PUSH
34434: LD_INT 3
34436: NEG
34437: PUSH
34438: LD_INT 0
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 3
34447: NEG
34448: PUSH
34449: LD_INT 1
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 4
34458: NEG
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: LIST
34472: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
34473: LD_ADDR_VAR 0 28
34477: PUSH
34478: LD_INT 3
34480: NEG
34481: PUSH
34482: LD_INT 3
34484: NEG
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 3
34492: NEG
34493: PUSH
34494: LD_INT 4
34496: NEG
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 4
34504: NEG
34505: PUSH
34506: LD_INT 3
34508: NEG
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
34519: LD_ADDR_VAR 0 29
34523: PUSH
34524: LD_INT 1
34526: NEG
34527: PUSH
34528: LD_INT 3
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: LD_INT 3
34541: NEG
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: LD_INT 2
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: LD_INT 4
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: LD_INT 4
34575: NEG
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: LD_INT 3
34586: NEG
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: LD_INT 5
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: LD_INT 5
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: PUSH
34618: LD_INT 4
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: LD_INT 6
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 0
34640: PUSH
34641: LD_INT 6
34643: NEG
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: LD_INT 5
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
34674: LD_ADDR_VAR 0 30
34678: PUSH
34679: LD_INT 2
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 3
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 3
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 4
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 4
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 4
34743: PUSH
34744: LD_INT 1
34746: NEG
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 5
34754: PUSH
34755: LD_INT 0
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 5
34764: PUSH
34765: LD_INT 1
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 5
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 6
34785: PUSH
34786: LD_INT 0
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 6
34795: PUSH
34796: LD_INT 1
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
34817: LD_ADDR_VAR 0 31
34821: PUSH
34822: LD_INT 3
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: LD_INT 3
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 2
34844: PUSH
34845: LD_INT 3
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 4
34854: PUSH
34855: LD_INT 3
34857: PUSH
34858: EMPTY
34859: LIST
34860: LIST
34861: PUSH
34862: LD_INT 4
34864: PUSH
34865: LD_INT 4
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 3
34874: PUSH
34875: LD_INT 4
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 5
34884: PUSH
34885: LD_INT 4
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 5
34894: PUSH
34895: LD_INT 5
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 4
34904: PUSH
34905: LD_INT 5
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 6
34914: PUSH
34915: LD_INT 5
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 6
34924: PUSH
34925: LD_INT 6
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 5
34934: PUSH
34935: LD_INT 6
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34956: LD_ADDR_VAR 0 32
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: LD_INT 3
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 0
34973: PUSH
34974: LD_INT 3
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 1
34983: NEG
34984: PUSH
34985: LD_INT 2
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 1
34994: PUSH
34995: LD_INT 4
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: LD_INT 4
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: LD_INT 3
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 1
35025: PUSH
35026: LD_INT 5
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: LD_INT 5
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: LD_INT 4
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: LD_INT 6
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: LD_INT 6
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: PUSH
35078: LD_INT 5
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35099: LD_ADDR_VAR 0 33
35103: PUSH
35104: LD_INT 2
35106: NEG
35107: PUSH
35108: LD_INT 1
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 3
35117: NEG
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 3
35128: NEG
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 3
35140: NEG
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 4
35151: NEG
35152: PUSH
35153: LD_INT 0
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 4
35162: NEG
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 4
35174: NEG
35175: PUSH
35176: LD_INT 1
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 5
35185: NEG
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 5
35196: NEG
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 5
35208: NEG
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 6
35219: NEG
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 6
35230: NEG
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35254: LD_ADDR_VAR 0 34
35258: PUSH
35259: LD_INT 2
35261: NEG
35262: PUSH
35263: LD_INT 3
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 3
35273: NEG
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 3
35285: NEG
35286: PUSH
35287: LD_INT 3
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 3
35297: NEG
35298: PUSH
35299: LD_INT 4
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 4
35309: NEG
35310: PUSH
35311: LD_INT 3
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 4
35321: NEG
35322: PUSH
35323: LD_INT 4
35325: NEG
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 4
35333: NEG
35334: PUSH
35335: LD_INT 5
35337: NEG
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 5
35345: NEG
35346: PUSH
35347: LD_INT 4
35349: NEG
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 5
35357: NEG
35358: PUSH
35359: LD_INT 5
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 5
35369: NEG
35370: PUSH
35371: LD_INT 6
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 6
35381: NEG
35382: PUSH
35383: LD_INT 5
35385: NEG
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 6
35393: NEG
35394: PUSH
35395: LD_INT 6
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35417: LD_ADDR_VAR 0 41
35421: PUSH
35422: LD_INT 0
35424: PUSH
35425: LD_INT 2
35427: NEG
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: PUSH
35437: LD_INT 3
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: PUSH
35448: LD_INT 2
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: LIST
35460: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35461: LD_ADDR_VAR 0 42
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: LD_INT 0
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 2
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 3
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: LIST
35501: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
35502: LD_ADDR_VAR 0 43
35506: PUSH
35507: LD_INT 2
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 3
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: LD_INT 3
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: LIST
35541: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
35542: LD_ADDR_VAR 0 44
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 1
35559: PUSH
35560: LD_INT 3
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: LD_INT 2
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35583: LD_ADDR_VAR 0 45
35587: PUSH
35588: LD_INT 2
35590: NEG
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 2
35601: NEG
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: LD_INT 3
35612: NEG
35613: PUSH
35614: LD_INT 1
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: LIST
35626: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
35627: LD_ADDR_VAR 0 46
35631: PUSH
35632: LD_INT 2
35634: NEG
35635: PUSH
35636: LD_INT 2
35638: NEG
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 2
35646: NEG
35647: PUSH
35648: LD_INT 3
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 3
35658: NEG
35659: PUSH
35660: LD_INT 2
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
35673: LD_ADDR_VAR 0 47
35677: PUSH
35678: LD_INT 2
35680: NEG
35681: PUSH
35682: LD_INT 3
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: NEG
35693: PUSH
35694: LD_INT 3
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35706: LD_ADDR_VAR 0 48
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: LD_INT 2
35716: NEG
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 2
35724: PUSH
35725: LD_INT 1
35727: NEG
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
35737: LD_ADDR_VAR 0 49
35741: PUSH
35742: LD_INT 3
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 3
35754: PUSH
35755: LD_INT 2
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
35766: LD_ADDR_VAR 0 50
35770: PUSH
35771: LD_INT 2
35773: PUSH
35774: LD_INT 3
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: PUSH
35784: LD_INT 3
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35795: LD_ADDR_VAR 0 51
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: LD_INT 2
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 2
35813: NEG
35814: PUSH
35815: LD_INT 1
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35826: LD_ADDR_VAR 0 52
35830: PUSH
35831: LD_INT 3
35833: NEG
35834: PUSH
35835: LD_INT 1
35837: NEG
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 3
35845: NEG
35846: PUSH
35847: LD_INT 2
35849: NEG
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35859: LD_ADDR_VAR 0 53
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: LD_INT 3
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 0
35878: PUSH
35879: LD_INT 3
35881: NEG
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 2
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: LIST
35902: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35903: LD_ADDR_VAR 0 54
35907: PUSH
35908: LD_INT 2
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: LD_INT 0
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 3
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: LIST
35943: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35944: LD_ADDR_VAR 0 55
35948: PUSH
35949: LD_INT 3
35951: PUSH
35952: LD_INT 2
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 3
35961: PUSH
35962: LD_INT 3
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 2
35971: PUSH
35972: LD_INT 3
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35984: LD_ADDR_VAR 0 56
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: LD_INT 3
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: LD_INT 3
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: LD_INT 2
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: LIST
36024: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36025: LD_ADDR_VAR 0 57
36029: PUSH
36030: LD_INT 2
36032: NEG
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 3
36043: NEG
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 3
36054: NEG
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: LIST
36068: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36069: LD_ADDR_VAR 0 58
36073: PUSH
36074: LD_INT 2
36076: NEG
36077: PUSH
36078: LD_INT 3
36080: NEG
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 3
36088: NEG
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 3
36100: NEG
36101: PUSH
36102: LD_INT 3
36104: NEG
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: LIST
36114: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36115: LD_ADDR_VAR 0 59
36119: PUSH
36120: LD_INT 1
36122: NEG
36123: PUSH
36124: LD_INT 2
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 0
36134: PUSH
36135: LD_INT 2
36137: NEG
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36159: LD_ADDR_VAR 0 60
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 2
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: LD_INT 1
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36200: LD_ADDR_VAR 0 61
36204: PUSH
36205: LD_INT 2
36207: PUSH
36208: LD_INT 1
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: LD_INT 2
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: LIST
36239: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36240: LD_ADDR_VAR 0 62
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 0
36257: PUSH
36258: LD_INT 2
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: LIST
36280: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36281: LD_ADDR_VAR 0 63
36285: PUSH
36286: LD_INT 1
36288: NEG
36289: PUSH
36290: LD_INT 1
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 2
36310: NEG
36311: PUSH
36312: LD_INT 1
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36325: LD_ADDR_VAR 0 64
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: LD_INT 2
36336: NEG
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: LD_INT 2
36344: NEG
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 2
36356: NEG
36357: PUSH
36358: LD_INT 2
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: LIST
36370: ST_TO_ADDR
// end ; 2 :
36371: GO 39637
36373: LD_INT 2
36375: DOUBLE
36376: EQUAL
36377: IFTRUE 36381
36379: GO 39636
36381: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36382: LD_ADDR_VAR 0 29
36386: PUSH
36387: LD_INT 4
36389: PUSH
36390: LD_INT 0
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 4
36399: PUSH
36400: LD_INT 1
36402: NEG
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 5
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 5
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 4
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 3
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 3
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 3
36461: PUSH
36462: LD_INT 2
36464: NEG
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 5
36472: PUSH
36473: LD_INT 2
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 3
36482: PUSH
36483: LD_INT 3
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 3
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 4
36502: PUSH
36503: LD_INT 3
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 4
36512: PUSH
36513: LD_INT 4
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 3
36522: PUSH
36523: LD_INT 4
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: LD_INT 3
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 4
36552: PUSH
36553: LD_INT 2
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 2
36562: PUSH
36563: LD_INT 4
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 0
36572: PUSH
36573: LD_INT 4
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: LD_INT 3
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: LD_INT 4
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 1
36602: PUSH
36603: LD_INT 5
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: LD_INT 5
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 1
36622: NEG
36623: PUSH
36624: LD_INT 4
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: LD_INT 3
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 2
36644: PUSH
36645: LD_INT 5
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: PUSH
36652: LD_INT 2
36654: NEG
36655: PUSH
36656: LD_INT 3
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 3
36665: NEG
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 3
36676: NEG
36677: PUSH
36678: LD_INT 1
36680: NEG
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 2
36688: NEG
36689: PUSH
36690: LD_INT 0
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 2
36699: NEG
36700: PUSH
36701: LD_INT 1
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PUSH
36708: LD_INT 3
36710: NEG
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 4
36721: NEG
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 4
36732: NEG
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 4
36744: NEG
36745: PUSH
36746: LD_INT 2
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 2
36756: NEG
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 4
36767: NEG
36768: PUSH
36769: LD_INT 4
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 4
36779: NEG
36780: PUSH
36781: LD_INT 5
36783: NEG
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 3
36791: NEG
36792: PUSH
36793: LD_INT 4
36795: NEG
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 3
36803: NEG
36804: PUSH
36805: LD_INT 3
36807: NEG
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 4
36815: NEG
36816: PUSH
36817: LD_INT 3
36819: NEG
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 5
36827: NEG
36828: PUSH
36829: LD_INT 4
36831: NEG
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 5
36839: NEG
36840: PUSH
36841: LD_INT 5
36843: NEG
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 3
36851: NEG
36852: PUSH
36853: LD_INT 5
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 5
36863: NEG
36864: PUSH
36865: LD_INT 3
36867: NEG
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
36920: LD_ADDR_VAR 0 30
36924: PUSH
36925: LD_INT 4
36927: PUSH
36928: LD_INT 4
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 4
36937: PUSH
36938: LD_INT 3
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 5
36947: PUSH
36948: LD_INT 4
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 5
36957: PUSH
36958: LD_INT 5
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 4
36967: PUSH
36968: LD_INT 5
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 3
36977: PUSH
36978: LD_INT 4
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: LD_INT 3
36987: PUSH
36988: LD_INT 3
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 5
36997: PUSH
36998: LD_INT 3
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 3
37007: PUSH
37008: LD_INT 5
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: LD_INT 3
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: LD_INT 2
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 3
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: LD_INT 4
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: LD_INT 4
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: LD_INT 3
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PUSH
37076: LD_INT 1
37078: NEG
37079: PUSH
37080: LD_INT 2
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 2
37089: PUSH
37090: LD_INT 4
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 2
37099: NEG
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 4
37110: NEG
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 4
37121: NEG
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 3
37133: NEG
37134: PUSH
37135: LD_INT 0
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 3
37144: NEG
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 4
37155: NEG
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 5
37166: NEG
37167: PUSH
37168: LD_INT 0
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 5
37177: NEG
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 5
37189: NEG
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 3
37201: NEG
37202: PUSH
37203: LD_INT 2
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 3
37212: NEG
37213: PUSH
37214: LD_INT 3
37216: NEG
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 3
37224: NEG
37225: PUSH
37226: LD_INT 4
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: NEG
37237: PUSH
37238: LD_INT 3
37240: NEG
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 2
37248: NEG
37249: PUSH
37250: LD_INT 2
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 3
37260: NEG
37261: PUSH
37262: LD_INT 2
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 4
37272: NEG
37273: PUSH
37274: LD_INT 3
37276: NEG
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 4
37284: NEG
37285: PUSH
37286: LD_INT 4
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 2
37296: NEG
37297: PUSH
37298: LD_INT 4
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 4
37308: NEG
37309: PUSH
37310: LD_INT 2
37312: NEG
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: LD_INT 4
37323: NEG
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 5
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 4
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 3
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 3
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: LD_INT 4
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: LD_INT 5
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 2
37399: PUSH
37400: LD_INT 3
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: NEG
37411: PUSH
37412: LD_INT 5
37414: NEG
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37467: LD_ADDR_VAR 0 31
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: LD_INT 4
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 0
37484: PUSH
37485: LD_INT 3
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: LD_INT 4
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 1
37504: PUSH
37505: LD_INT 5
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 5
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: LD_INT 4
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: PUSH
37537: LD_INT 3
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 2
37546: PUSH
37547: LD_INT 5
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: LD_INT 3
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 3
37567: NEG
37568: PUSH
37569: LD_INT 0
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 3
37578: NEG
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 2
37590: NEG
37591: PUSH
37592: LD_INT 0
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 2
37601: NEG
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 3
37612: NEG
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 4
37623: NEG
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 4
37634: NEG
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 4
37646: NEG
37647: PUSH
37648: LD_INT 2
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 2
37658: NEG
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 4
37669: NEG
37670: PUSH
37671: LD_INT 4
37673: NEG
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 4
37681: NEG
37682: PUSH
37683: LD_INT 5
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 3
37693: NEG
37694: PUSH
37695: LD_INT 4
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 3
37705: NEG
37706: PUSH
37707: LD_INT 3
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 4
37717: NEG
37718: PUSH
37719: LD_INT 3
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 5
37729: NEG
37730: PUSH
37731: LD_INT 4
37733: NEG
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 5
37741: NEG
37742: PUSH
37743: LD_INT 5
37745: NEG
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 3
37753: NEG
37754: PUSH
37755: LD_INT 5
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 5
37765: NEG
37766: PUSH
37767: LD_INT 3
37769: NEG
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: LD_INT 3
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: LD_INT 4
37791: NEG
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: LD_INT 3
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: LD_INT 3
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: LD_INT 4
37848: NEG
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 2
37859: NEG
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: LD_INT 2
37867: NEG
37868: PUSH
37869: LD_INT 4
37871: NEG
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 4
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 4
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 5
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 5
37910: PUSH
37911: LD_INT 1
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 4
37920: PUSH
37921: LD_INT 1
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 3
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 3
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 3
37951: PUSH
37952: LD_INT 2
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 5
37962: PUSH
37963: LD_INT 2
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38017: LD_ADDR_VAR 0 32
38021: PUSH
38022: LD_INT 4
38024: NEG
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 4
38035: NEG
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 3
38047: NEG
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 3
38058: NEG
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 4
38069: NEG
38070: PUSH
38071: LD_INT 1
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 5
38080: NEG
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 5
38091: NEG
38092: PUSH
38093: LD_INT 1
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 5
38103: NEG
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 3
38115: NEG
38116: PUSH
38117: LD_INT 2
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 3
38126: NEG
38127: PUSH
38128: LD_INT 3
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 3
38138: NEG
38139: PUSH
38140: LD_INT 4
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 2
38150: NEG
38151: PUSH
38152: LD_INT 3
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 2
38162: NEG
38163: PUSH
38164: LD_INT 2
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 3
38174: NEG
38175: PUSH
38176: LD_INT 2
38178: NEG
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 4
38186: NEG
38187: PUSH
38188: LD_INT 3
38190: NEG
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 4
38198: NEG
38199: PUSH
38200: LD_INT 4
38202: NEG
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: LD_INT 4
38214: NEG
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 4
38222: NEG
38223: PUSH
38224: LD_INT 2
38226: NEG
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 0
38234: PUSH
38235: LD_INT 4
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: LD_INT 5
38248: NEG
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 1
38256: PUSH
38257: LD_INT 4
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 1
38267: PUSH
38268: LD_INT 3
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 3
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: LD_INT 4
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: LD_INT 5
38305: NEG
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: LD_INT 3
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 2
38324: NEG
38325: PUSH
38326: LD_INT 5
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 3
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 3
38346: PUSH
38347: LD_INT 1
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 4
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 4
38367: PUSH
38368: LD_INT 1
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 3
38377: PUSH
38378: LD_INT 1
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 2
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 2
38408: PUSH
38409: LD_INT 2
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 4
38419: PUSH
38420: LD_INT 2
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 4
38429: PUSH
38430: LD_INT 4
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 4
38439: PUSH
38440: LD_INT 3
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 5
38449: PUSH
38450: LD_INT 4
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 5
38459: PUSH
38460: LD_INT 5
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 4
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 3
38479: PUSH
38480: LD_INT 4
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 3
38489: PUSH
38490: LD_INT 3
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 5
38499: PUSH
38500: LD_INT 3
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: LD_INT 5
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
38564: LD_ADDR_VAR 0 33
38568: PUSH
38569: LD_INT 4
38571: NEG
38572: PUSH
38573: LD_INT 4
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 4
38583: NEG
38584: PUSH
38585: LD_INT 5
38587: NEG
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 3
38595: NEG
38596: PUSH
38597: LD_INT 4
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 3
38607: NEG
38608: PUSH
38609: LD_INT 3
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 4
38619: NEG
38620: PUSH
38621: LD_INT 3
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 5
38631: NEG
38632: PUSH
38633: LD_INT 4
38635: NEG
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 5
38643: NEG
38644: PUSH
38645: LD_INT 5
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 3
38655: NEG
38656: PUSH
38657: LD_INT 5
38659: NEG
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 5
38667: NEG
38668: PUSH
38669: LD_INT 3
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: LD_INT 3
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: LD_INT 4
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: LD_INT 3
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: LD_INT 2
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: LD_INT 2
38726: NEG
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: LD_INT 3
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: NEG
38747: PUSH
38748: LD_INT 4
38750: NEG
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 2
38758: PUSH
38759: LD_INT 2
38761: NEG
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 2
38769: NEG
38770: PUSH
38771: LD_INT 4
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 4
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 4
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 5
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 5
38812: PUSH
38813: LD_INT 1
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 4
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 3
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 3
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 3
38853: PUSH
38854: LD_INT 2
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 5
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 3
38874: PUSH
38875: LD_INT 3
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 3
38884: PUSH
38885: LD_INT 2
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 4
38894: PUSH
38895: LD_INT 3
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 4
38904: PUSH
38905: LD_INT 4
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 3
38914: PUSH
38915: LD_INT 4
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 2
38924: PUSH
38925: LD_INT 3
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: LD_INT 2
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 4
38944: PUSH
38945: LD_INT 2
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: LD_INT 4
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: LD_INT 4
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 3
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 4
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: LD_INT 5
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: LD_INT 5
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: LD_INT 4
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 3
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: LD_INT 5
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: NEG
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39102: LD_ADDR_VAR 0 34
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: LD_INT 4
39112: NEG
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: LD_INT 5
39123: NEG
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: LD_INT 4
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: PUSH
39143: LD_INT 3
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: LD_INT 3
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: NEG
39165: PUSH
39166: LD_INT 4
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: LD_INT 5
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: LD_INT 3
39191: NEG
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 2
39199: NEG
39200: PUSH
39201: LD_INT 5
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 3
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 3
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 4
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 4
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 3
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 4
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 4
39304: PUSH
39305: LD_INT 4
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 4
39314: PUSH
39315: LD_INT 3
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 5
39324: PUSH
39325: LD_INT 4
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 5
39334: PUSH
39335: LD_INT 5
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 4
39344: PUSH
39345: LD_INT 5
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 3
39354: PUSH
39355: LD_INT 4
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 3
39364: PUSH
39365: LD_INT 3
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 5
39374: PUSH
39375: LD_INT 3
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 3
39384: PUSH
39385: LD_INT 5
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 3
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: LD_INT 2
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: LD_INT 3
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: LD_INT 4
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: LD_INT 4
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: NEG
39445: PUSH
39446: LD_INT 3
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: LD_INT 2
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: LD_INT 4
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: NEG
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 4
39487: NEG
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 4
39498: NEG
39499: PUSH
39500: LD_INT 1
39502: NEG
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 3
39510: NEG
39511: PUSH
39512: LD_INT 0
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 3
39521: NEG
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 4
39532: NEG
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 5
39543: NEG
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 5
39554: NEG
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 5
39566: NEG
39567: PUSH
39568: LD_INT 2
39570: NEG
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 3
39578: NEG
39579: PUSH
39580: LD_INT 2
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: ST_TO_ADDR
// end ; end ;
39634: GO 39637
39636: POP
// case btype of b_depot , b_warehouse :
39637: LD_VAR 0 1
39641: PUSH
39642: LD_INT 0
39644: DOUBLE
39645: EQUAL
39646: IFTRUE 39656
39648: LD_INT 1
39650: DOUBLE
39651: EQUAL
39652: IFTRUE 39656
39654: GO 39857
39656: POP
// case nation of nation_american :
39657: LD_VAR 0 5
39661: PUSH
39662: LD_INT 1
39664: DOUBLE
39665: EQUAL
39666: IFTRUE 39670
39668: GO 39726
39670: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
39671: LD_ADDR_VAR 0 9
39675: PUSH
39676: LD_VAR 0 11
39680: PUSH
39681: LD_VAR 0 12
39685: PUSH
39686: LD_VAR 0 13
39690: PUSH
39691: LD_VAR 0 14
39695: PUSH
39696: LD_VAR 0 15
39700: PUSH
39701: LD_VAR 0 16
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: PUSH
39714: LD_VAR 0 4
39718: PUSH
39719: LD_INT 1
39721: PLUS
39722: ARRAY
39723: ST_TO_ADDR
39724: GO 39855
39726: LD_INT 2
39728: DOUBLE
39729: EQUAL
39730: IFTRUE 39734
39732: GO 39790
39734: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
39735: LD_ADDR_VAR 0 9
39739: PUSH
39740: LD_VAR 0 17
39744: PUSH
39745: LD_VAR 0 18
39749: PUSH
39750: LD_VAR 0 19
39754: PUSH
39755: LD_VAR 0 20
39759: PUSH
39760: LD_VAR 0 21
39764: PUSH
39765: LD_VAR 0 22
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: PUSH
39778: LD_VAR 0 4
39782: PUSH
39783: LD_INT 1
39785: PLUS
39786: ARRAY
39787: ST_TO_ADDR
39788: GO 39855
39790: LD_INT 3
39792: DOUBLE
39793: EQUAL
39794: IFTRUE 39798
39796: GO 39854
39798: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
39799: LD_ADDR_VAR 0 9
39803: PUSH
39804: LD_VAR 0 23
39808: PUSH
39809: LD_VAR 0 24
39813: PUSH
39814: LD_VAR 0 25
39818: PUSH
39819: LD_VAR 0 26
39823: PUSH
39824: LD_VAR 0 27
39828: PUSH
39829: LD_VAR 0 28
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: PUSH
39842: LD_VAR 0 4
39846: PUSH
39847: LD_INT 1
39849: PLUS
39850: ARRAY
39851: ST_TO_ADDR
39852: GO 39855
39854: POP
39855: GO 40410
39857: LD_INT 2
39859: DOUBLE
39860: EQUAL
39861: IFTRUE 39871
39863: LD_INT 3
39865: DOUBLE
39866: EQUAL
39867: IFTRUE 39871
39869: GO 39927
39871: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
39872: LD_ADDR_VAR 0 9
39876: PUSH
39877: LD_VAR 0 29
39881: PUSH
39882: LD_VAR 0 30
39886: PUSH
39887: LD_VAR 0 31
39891: PUSH
39892: LD_VAR 0 32
39896: PUSH
39897: LD_VAR 0 33
39901: PUSH
39902: LD_VAR 0 34
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: PUSH
39915: LD_VAR 0 4
39919: PUSH
39920: LD_INT 1
39922: PLUS
39923: ARRAY
39924: ST_TO_ADDR
39925: GO 40410
39927: LD_INT 16
39929: DOUBLE
39930: EQUAL
39931: IFTRUE 39989
39933: LD_INT 17
39935: DOUBLE
39936: EQUAL
39937: IFTRUE 39989
39939: LD_INT 18
39941: DOUBLE
39942: EQUAL
39943: IFTRUE 39989
39945: LD_INT 19
39947: DOUBLE
39948: EQUAL
39949: IFTRUE 39989
39951: LD_INT 22
39953: DOUBLE
39954: EQUAL
39955: IFTRUE 39989
39957: LD_INT 20
39959: DOUBLE
39960: EQUAL
39961: IFTRUE 39989
39963: LD_INT 21
39965: DOUBLE
39966: EQUAL
39967: IFTRUE 39989
39969: LD_INT 23
39971: DOUBLE
39972: EQUAL
39973: IFTRUE 39989
39975: LD_INT 24
39977: DOUBLE
39978: EQUAL
39979: IFTRUE 39989
39981: LD_INT 25
39983: DOUBLE
39984: EQUAL
39985: IFTRUE 39989
39987: GO 40045
39989: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39990: LD_ADDR_VAR 0 9
39994: PUSH
39995: LD_VAR 0 35
39999: PUSH
40000: LD_VAR 0 36
40004: PUSH
40005: LD_VAR 0 37
40009: PUSH
40010: LD_VAR 0 38
40014: PUSH
40015: LD_VAR 0 39
40019: PUSH
40020: LD_VAR 0 40
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: PUSH
40033: LD_VAR 0 4
40037: PUSH
40038: LD_INT 1
40040: PLUS
40041: ARRAY
40042: ST_TO_ADDR
40043: GO 40410
40045: LD_INT 6
40047: DOUBLE
40048: EQUAL
40049: IFTRUE 40101
40051: LD_INT 7
40053: DOUBLE
40054: EQUAL
40055: IFTRUE 40101
40057: LD_INT 8
40059: DOUBLE
40060: EQUAL
40061: IFTRUE 40101
40063: LD_INT 13
40065: DOUBLE
40066: EQUAL
40067: IFTRUE 40101
40069: LD_INT 12
40071: DOUBLE
40072: EQUAL
40073: IFTRUE 40101
40075: LD_INT 15
40077: DOUBLE
40078: EQUAL
40079: IFTRUE 40101
40081: LD_INT 11
40083: DOUBLE
40084: EQUAL
40085: IFTRUE 40101
40087: LD_INT 14
40089: DOUBLE
40090: EQUAL
40091: IFTRUE 40101
40093: LD_INT 10
40095: DOUBLE
40096: EQUAL
40097: IFTRUE 40101
40099: GO 40157
40101: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40102: LD_ADDR_VAR 0 9
40106: PUSH
40107: LD_VAR 0 41
40111: PUSH
40112: LD_VAR 0 42
40116: PUSH
40117: LD_VAR 0 43
40121: PUSH
40122: LD_VAR 0 44
40126: PUSH
40127: LD_VAR 0 45
40131: PUSH
40132: LD_VAR 0 46
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: PUSH
40145: LD_VAR 0 4
40149: PUSH
40150: LD_INT 1
40152: PLUS
40153: ARRAY
40154: ST_TO_ADDR
40155: GO 40410
40157: LD_INT 36
40159: DOUBLE
40160: EQUAL
40161: IFTRUE 40165
40163: GO 40221
40165: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40166: LD_ADDR_VAR 0 9
40170: PUSH
40171: LD_VAR 0 47
40175: PUSH
40176: LD_VAR 0 48
40180: PUSH
40181: LD_VAR 0 49
40185: PUSH
40186: LD_VAR 0 50
40190: PUSH
40191: LD_VAR 0 51
40195: PUSH
40196: LD_VAR 0 52
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: PUSH
40209: LD_VAR 0 4
40213: PUSH
40214: LD_INT 1
40216: PLUS
40217: ARRAY
40218: ST_TO_ADDR
40219: GO 40410
40221: LD_INT 4
40223: DOUBLE
40224: EQUAL
40225: IFTRUE 40247
40227: LD_INT 5
40229: DOUBLE
40230: EQUAL
40231: IFTRUE 40247
40233: LD_INT 34
40235: DOUBLE
40236: EQUAL
40237: IFTRUE 40247
40239: LD_INT 37
40241: DOUBLE
40242: EQUAL
40243: IFTRUE 40247
40245: GO 40303
40247: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40248: LD_ADDR_VAR 0 9
40252: PUSH
40253: LD_VAR 0 53
40257: PUSH
40258: LD_VAR 0 54
40262: PUSH
40263: LD_VAR 0 55
40267: PUSH
40268: LD_VAR 0 56
40272: PUSH
40273: LD_VAR 0 57
40277: PUSH
40278: LD_VAR 0 58
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: PUSH
40291: LD_VAR 0 4
40295: PUSH
40296: LD_INT 1
40298: PLUS
40299: ARRAY
40300: ST_TO_ADDR
40301: GO 40410
40303: LD_INT 31
40305: DOUBLE
40306: EQUAL
40307: IFTRUE 40353
40309: LD_INT 32
40311: DOUBLE
40312: EQUAL
40313: IFTRUE 40353
40315: LD_INT 33
40317: DOUBLE
40318: EQUAL
40319: IFTRUE 40353
40321: LD_INT 27
40323: DOUBLE
40324: EQUAL
40325: IFTRUE 40353
40327: LD_INT 26
40329: DOUBLE
40330: EQUAL
40331: IFTRUE 40353
40333: LD_INT 28
40335: DOUBLE
40336: EQUAL
40337: IFTRUE 40353
40339: LD_INT 29
40341: DOUBLE
40342: EQUAL
40343: IFTRUE 40353
40345: LD_INT 30
40347: DOUBLE
40348: EQUAL
40349: IFTRUE 40353
40351: GO 40409
40353: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40354: LD_ADDR_VAR 0 9
40358: PUSH
40359: LD_VAR 0 59
40363: PUSH
40364: LD_VAR 0 60
40368: PUSH
40369: LD_VAR 0 61
40373: PUSH
40374: LD_VAR 0 62
40378: PUSH
40379: LD_VAR 0 63
40383: PUSH
40384: LD_VAR 0 64
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: PUSH
40397: LD_VAR 0 4
40401: PUSH
40402: LD_INT 1
40404: PLUS
40405: ARRAY
40406: ST_TO_ADDR
40407: GO 40410
40409: POP
// temp_list2 = [ ] ;
40410: LD_ADDR_VAR 0 10
40414: PUSH
40415: EMPTY
40416: ST_TO_ADDR
// for i in temp_list do
40417: LD_ADDR_VAR 0 8
40421: PUSH
40422: LD_VAR 0 9
40426: PUSH
40427: FOR_IN
40428: IFFALSE 40480
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40430: LD_ADDR_VAR 0 10
40434: PUSH
40435: LD_VAR 0 10
40439: PUSH
40440: LD_VAR 0 8
40444: PUSH
40445: LD_INT 1
40447: ARRAY
40448: PUSH
40449: LD_VAR 0 2
40453: PLUS
40454: PUSH
40455: LD_VAR 0 8
40459: PUSH
40460: LD_INT 2
40462: ARRAY
40463: PUSH
40464: LD_VAR 0 3
40468: PLUS
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: EMPTY
40475: LIST
40476: ADD
40477: ST_TO_ADDR
40478: GO 40427
40480: POP
40481: POP
// result = temp_list2 ;
40482: LD_ADDR_VAR 0 7
40486: PUSH
40487: LD_VAR 0 10
40491: ST_TO_ADDR
// end ;
40492: LD_VAR 0 7
40496: RET
// export function EnemyInRange ( unit , dist ) ; begin
40497: LD_INT 0
40499: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
40500: LD_ADDR_VAR 0 3
40504: PUSH
40505: LD_VAR 0 1
40509: PPUSH
40510: CALL_OW 255
40514: PPUSH
40515: LD_VAR 0 1
40519: PPUSH
40520: CALL_OW 250
40524: PPUSH
40525: LD_VAR 0 1
40529: PPUSH
40530: CALL_OW 251
40534: PPUSH
40535: LD_VAR 0 2
40539: PPUSH
40540: CALL 13893 0 4
40544: PUSH
40545: LD_INT 4
40547: ARRAY
40548: ST_TO_ADDR
// end ;
40549: LD_VAR 0 3
40553: RET
// export function PlayerSeeMe ( unit ) ; begin
40554: LD_INT 0
40556: PPUSH
// result := See ( your_side , unit ) ;
40557: LD_ADDR_VAR 0 2
40561: PUSH
40562: LD_OWVAR 2
40566: PPUSH
40567: LD_VAR 0 1
40571: PPUSH
40572: CALL_OW 292
40576: ST_TO_ADDR
// end ;
40577: LD_VAR 0 2
40581: RET
// export function ReverseDir ( unit ) ; begin
40582: LD_INT 0
40584: PPUSH
// if not unit then
40585: LD_VAR 0 1
40589: NOT
40590: IFFALSE 40594
// exit ;
40592: GO 40617
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
40594: LD_ADDR_VAR 0 2
40598: PUSH
40599: LD_VAR 0 1
40603: PPUSH
40604: CALL_OW 254
40608: PUSH
40609: LD_INT 3
40611: PLUS
40612: PUSH
40613: LD_INT 6
40615: MOD
40616: ST_TO_ADDR
// end ;
40617: LD_VAR 0 2
40621: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
40622: LD_INT 0
40624: PPUSH
40625: PPUSH
40626: PPUSH
40627: PPUSH
40628: PPUSH
// if not hexes then
40629: LD_VAR 0 2
40633: NOT
40634: IFFALSE 40638
// exit ;
40636: GO 40786
// dist := 9999 ;
40638: LD_ADDR_VAR 0 5
40642: PUSH
40643: LD_INT 9999
40645: ST_TO_ADDR
// for i = 1 to hexes do
40646: LD_ADDR_VAR 0 4
40650: PUSH
40651: DOUBLE
40652: LD_INT 1
40654: DEC
40655: ST_TO_ADDR
40656: LD_VAR 0 2
40660: PUSH
40661: FOR_TO
40662: IFFALSE 40774
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
40664: LD_VAR 0 1
40668: PPUSH
40669: LD_VAR 0 2
40673: PUSH
40674: LD_VAR 0 4
40678: ARRAY
40679: PUSH
40680: LD_INT 1
40682: ARRAY
40683: PPUSH
40684: LD_VAR 0 2
40688: PUSH
40689: LD_VAR 0 4
40693: ARRAY
40694: PUSH
40695: LD_INT 2
40697: ARRAY
40698: PPUSH
40699: CALL_OW 297
40703: PUSH
40704: LD_VAR 0 5
40708: LESS
40709: IFFALSE 40772
// begin hex := hexes [ i ] ;
40711: LD_ADDR_VAR 0 7
40715: PUSH
40716: LD_VAR 0 2
40720: PUSH
40721: LD_VAR 0 4
40725: ARRAY
40726: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40727: LD_ADDR_VAR 0 5
40731: PUSH
40732: LD_VAR 0 1
40736: PPUSH
40737: LD_VAR 0 2
40741: PUSH
40742: LD_VAR 0 4
40746: ARRAY
40747: PUSH
40748: LD_INT 1
40750: ARRAY
40751: PPUSH
40752: LD_VAR 0 2
40756: PUSH
40757: LD_VAR 0 4
40761: ARRAY
40762: PUSH
40763: LD_INT 2
40765: ARRAY
40766: PPUSH
40767: CALL_OW 297
40771: ST_TO_ADDR
// end ; end ;
40772: GO 40661
40774: POP
40775: POP
// result := hex ;
40776: LD_ADDR_VAR 0 3
40780: PUSH
40781: LD_VAR 0 7
40785: ST_TO_ADDR
// end ;
40786: LD_VAR 0 3
40790: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
40791: LD_INT 0
40793: PPUSH
40794: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
40795: LD_VAR 0 1
40799: NOT
40800: PUSH
40801: LD_VAR 0 1
40805: PUSH
40806: LD_INT 21
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 23
40818: PUSH
40819: LD_INT 2
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PPUSH
40830: CALL_OW 69
40834: IN
40835: NOT
40836: OR
40837: IFFALSE 40841
// exit ;
40839: GO 40888
// for i = 1 to 3 do
40841: LD_ADDR_VAR 0 3
40845: PUSH
40846: DOUBLE
40847: LD_INT 1
40849: DEC
40850: ST_TO_ADDR
40851: LD_INT 3
40853: PUSH
40854: FOR_TO
40855: IFFALSE 40886
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40857: LD_VAR 0 1
40861: PPUSH
40862: CALL_OW 250
40866: PPUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: CALL_OW 251
40876: PPUSH
40877: LD_INT 1
40879: PPUSH
40880: CALL_OW 453
40884: GO 40854
40886: POP
40887: POP
// end ;
40888: LD_VAR 0 2
40892: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40893: LD_INT 0
40895: PPUSH
40896: PPUSH
40897: PPUSH
40898: PPUSH
40899: PPUSH
40900: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
40901: LD_VAR 0 1
40905: NOT
40906: PUSH
40907: LD_VAR 0 2
40911: NOT
40912: OR
40913: PUSH
40914: LD_VAR 0 1
40918: PPUSH
40919: CALL_OW 314
40923: OR
40924: IFFALSE 40928
// exit ;
40926: GO 41369
// x := GetX ( enemy_unit ) ;
40928: LD_ADDR_VAR 0 7
40932: PUSH
40933: LD_VAR 0 2
40937: PPUSH
40938: CALL_OW 250
40942: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40943: LD_ADDR_VAR 0 8
40947: PUSH
40948: LD_VAR 0 2
40952: PPUSH
40953: CALL_OW 251
40957: ST_TO_ADDR
// if not x or not y then
40958: LD_VAR 0 7
40962: NOT
40963: PUSH
40964: LD_VAR 0 8
40968: NOT
40969: OR
40970: IFFALSE 40974
// exit ;
40972: GO 41369
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
40974: LD_ADDR_VAR 0 6
40978: PUSH
40979: LD_VAR 0 7
40983: PPUSH
40984: LD_INT 0
40986: PPUSH
40987: LD_INT 4
40989: PPUSH
40990: CALL_OW 272
40994: PUSH
40995: LD_VAR 0 8
40999: PPUSH
41000: LD_INT 0
41002: PPUSH
41003: LD_INT 4
41005: PPUSH
41006: CALL_OW 273
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_VAR 0 7
41019: PPUSH
41020: LD_INT 1
41022: PPUSH
41023: LD_INT 4
41025: PPUSH
41026: CALL_OW 272
41030: PUSH
41031: LD_VAR 0 8
41035: PPUSH
41036: LD_INT 1
41038: PPUSH
41039: LD_INT 4
41041: PPUSH
41042: CALL_OW 273
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_VAR 0 7
41055: PPUSH
41056: LD_INT 2
41058: PPUSH
41059: LD_INT 4
41061: PPUSH
41062: CALL_OW 272
41066: PUSH
41067: LD_VAR 0 8
41071: PPUSH
41072: LD_INT 2
41074: PPUSH
41075: LD_INT 4
41077: PPUSH
41078: CALL_OW 273
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_VAR 0 7
41091: PPUSH
41092: LD_INT 3
41094: PPUSH
41095: LD_INT 4
41097: PPUSH
41098: CALL_OW 272
41102: PUSH
41103: LD_VAR 0 8
41107: PPUSH
41108: LD_INT 3
41110: PPUSH
41111: LD_INT 4
41113: PPUSH
41114: CALL_OW 273
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_VAR 0 7
41127: PPUSH
41128: LD_INT 4
41130: PPUSH
41131: LD_INT 4
41133: PPUSH
41134: CALL_OW 272
41138: PUSH
41139: LD_VAR 0 8
41143: PPUSH
41144: LD_INT 4
41146: PPUSH
41147: LD_INT 4
41149: PPUSH
41150: CALL_OW 273
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_VAR 0 7
41163: PPUSH
41164: LD_INT 5
41166: PPUSH
41167: LD_INT 4
41169: PPUSH
41170: CALL_OW 272
41174: PUSH
41175: LD_VAR 0 8
41179: PPUSH
41180: LD_INT 5
41182: PPUSH
41183: LD_INT 4
41185: PPUSH
41186: CALL_OW 273
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: ST_TO_ADDR
// for i = tmp downto 1 do
41203: LD_ADDR_VAR 0 4
41207: PUSH
41208: DOUBLE
41209: LD_VAR 0 6
41213: INC
41214: ST_TO_ADDR
41215: LD_INT 1
41217: PUSH
41218: FOR_DOWNTO
41219: IFFALSE 41320
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41221: LD_VAR 0 6
41225: PUSH
41226: LD_VAR 0 4
41230: ARRAY
41231: PUSH
41232: LD_INT 1
41234: ARRAY
41235: PPUSH
41236: LD_VAR 0 6
41240: PUSH
41241: LD_VAR 0 4
41245: ARRAY
41246: PUSH
41247: LD_INT 2
41249: ARRAY
41250: PPUSH
41251: CALL_OW 488
41255: NOT
41256: PUSH
41257: LD_VAR 0 6
41261: PUSH
41262: LD_VAR 0 4
41266: ARRAY
41267: PUSH
41268: LD_INT 1
41270: ARRAY
41271: PPUSH
41272: LD_VAR 0 6
41276: PUSH
41277: LD_VAR 0 4
41281: ARRAY
41282: PUSH
41283: LD_INT 2
41285: ARRAY
41286: PPUSH
41287: CALL_OW 428
41291: PUSH
41292: LD_INT 0
41294: NONEQUAL
41295: OR
41296: IFFALSE 41318
// tmp := Delete ( tmp , i ) ;
41298: LD_ADDR_VAR 0 6
41302: PUSH
41303: LD_VAR 0 6
41307: PPUSH
41308: LD_VAR 0 4
41312: PPUSH
41313: CALL_OW 3
41317: ST_TO_ADDR
41318: GO 41218
41320: POP
41321: POP
// j := GetClosestHex ( unit , tmp ) ;
41322: LD_ADDR_VAR 0 5
41326: PUSH
41327: LD_VAR 0 1
41331: PPUSH
41332: LD_VAR 0 6
41336: PPUSH
41337: CALL 40622 0 2
41341: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41342: LD_VAR 0 1
41346: PPUSH
41347: LD_VAR 0 5
41351: PUSH
41352: LD_INT 1
41354: ARRAY
41355: PPUSH
41356: LD_VAR 0 5
41360: PUSH
41361: LD_INT 2
41363: ARRAY
41364: PPUSH
41365: CALL_OW 111
// end ;
41369: LD_VAR 0 3
41373: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41374: LD_INT 0
41376: PPUSH
41377: PPUSH
41378: PPUSH
// uc_side = 0 ;
41379: LD_ADDR_OWVAR 20
41383: PUSH
41384: LD_INT 0
41386: ST_TO_ADDR
// uc_nation = 0 ;
41387: LD_ADDR_OWVAR 21
41391: PUSH
41392: LD_INT 0
41394: ST_TO_ADDR
// InitHc_All ( ) ;
41395: CALL_OW 584
// InitVc ;
41399: CALL_OW 20
// if mastodonts then
41403: LD_VAR 0 6
41407: IFFALSE 41474
// for i = 1 to mastodonts do
41409: LD_ADDR_VAR 0 11
41413: PUSH
41414: DOUBLE
41415: LD_INT 1
41417: DEC
41418: ST_TO_ADDR
41419: LD_VAR 0 6
41423: PUSH
41424: FOR_TO
41425: IFFALSE 41472
// begin vc_chassis := 31 ;
41427: LD_ADDR_OWVAR 37
41431: PUSH
41432: LD_INT 31
41434: ST_TO_ADDR
// vc_control := control_rider ;
41435: LD_ADDR_OWVAR 38
41439: PUSH
41440: LD_INT 4
41442: ST_TO_ADDR
// animal := CreateVehicle ;
41443: LD_ADDR_VAR 0 12
41447: PUSH
41448: CALL_OW 45
41452: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41453: LD_VAR 0 12
41457: PPUSH
41458: LD_VAR 0 8
41462: PPUSH
41463: LD_INT 0
41465: PPUSH
41466: CALL 43609 0 3
// end ;
41470: GO 41424
41472: POP
41473: POP
// if horses then
41474: LD_VAR 0 5
41478: IFFALSE 41545
// for i = 1 to horses do
41480: LD_ADDR_VAR 0 11
41484: PUSH
41485: DOUBLE
41486: LD_INT 1
41488: DEC
41489: ST_TO_ADDR
41490: LD_VAR 0 5
41494: PUSH
41495: FOR_TO
41496: IFFALSE 41543
// begin hc_class := 21 ;
41498: LD_ADDR_OWVAR 28
41502: PUSH
41503: LD_INT 21
41505: ST_TO_ADDR
// hc_gallery :=  ;
41506: LD_ADDR_OWVAR 33
41510: PUSH
41511: LD_STRING 
41513: ST_TO_ADDR
// animal := CreateHuman ;
41514: LD_ADDR_VAR 0 12
41518: PUSH
41519: CALL_OW 44
41523: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41524: LD_VAR 0 12
41528: PPUSH
41529: LD_VAR 0 8
41533: PPUSH
41534: LD_INT 0
41536: PPUSH
41537: CALL 43609 0 3
// end ;
41541: GO 41495
41543: POP
41544: POP
// if birds then
41545: LD_VAR 0 1
41549: IFFALSE 41616
// for i = 1 to birds do
41551: LD_ADDR_VAR 0 11
41555: PUSH
41556: DOUBLE
41557: LD_INT 1
41559: DEC
41560: ST_TO_ADDR
41561: LD_VAR 0 1
41565: PUSH
41566: FOR_TO
41567: IFFALSE 41614
// begin hc_class = 18 ;
41569: LD_ADDR_OWVAR 28
41573: PUSH
41574: LD_INT 18
41576: ST_TO_ADDR
// hc_gallery =  ;
41577: LD_ADDR_OWVAR 33
41581: PUSH
41582: LD_STRING 
41584: ST_TO_ADDR
// animal := CreateHuman ;
41585: LD_ADDR_VAR 0 12
41589: PUSH
41590: CALL_OW 44
41594: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41595: LD_VAR 0 12
41599: PPUSH
41600: LD_VAR 0 8
41604: PPUSH
41605: LD_INT 0
41607: PPUSH
41608: CALL 43609 0 3
// end ;
41612: GO 41566
41614: POP
41615: POP
// if tigers then
41616: LD_VAR 0 2
41620: IFFALSE 41704
// for i = 1 to tigers do
41622: LD_ADDR_VAR 0 11
41626: PUSH
41627: DOUBLE
41628: LD_INT 1
41630: DEC
41631: ST_TO_ADDR
41632: LD_VAR 0 2
41636: PUSH
41637: FOR_TO
41638: IFFALSE 41702
// begin hc_class = class_tiger ;
41640: LD_ADDR_OWVAR 28
41644: PUSH
41645: LD_INT 14
41647: ST_TO_ADDR
// hc_gallery =  ;
41648: LD_ADDR_OWVAR 33
41652: PUSH
41653: LD_STRING 
41655: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41656: LD_ADDR_OWVAR 35
41660: PUSH
41661: LD_INT 7
41663: NEG
41664: PPUSH
41665: LD_INT 7
41667: PPUSH
41668: CALL_OW 12
41672: ST_TO_ADDR
// animal := CreateHuman ;
41673: LD_ADDR_VAR 0 12
41677: PUSH
41678: CALL_OW 44
41682: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41683: LD_VAR 0 12
41687: PPUSH
41688: LD_VAR 0 8
41692: PPUSH
41693: LD_INT 0
41695: PPUSH
41696: CALL 43609 0 3
// end ;
41700: GO 41637
41702: POP
41703: POP
// if apemans then
41704: LD_VAR 0 3
41708: IFFALSE 41831
// for i = 1 to apemans do
41710: LD_ADDR_VAR 0 11
41714: PUSH
41715: DOUBLE
41716: LD_INT 1
41718: DEC
41719: ST_TO_ADDR
41720: LD_VAR 0 3
41724: PUSH
41725: FOR_TO
41726: IFFALSE 41829
// begin hc_class = class_apeman ;
41728: LD_ADDR_OWVAR 28
41732: PUSH
41733: LD_INT 12
41735: ST_TO_ADDR
// hc_gallery =  ;
41736: LD_ADDR_OWVAR 33
41740: PUSH
41741: LD_STRING 
41743: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
41744: LD_ADDR_OWVAR 35
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PPUSH
41753: LD_INT 2
41755: PPUSH
41756: CALL_OW 12
41760: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41761: LD_ADDR_OWVAR 31
41765: PUSH
41766: LD_INT 1
41768: PPUSH
41769: LD_INT 3
41771: PPUSH
41772: CALL_OW 12
41776: PUSH
41777: LD_INT 1
41779: PPUSH
41780: LD_INT 3
41782: PPUSH
41783: CALL_OW 12
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: ST_TO_ADDR
// animal := CreateHuman ;
41800: LD_ADDR_VAR 0 12
41804: PUSH
41805: CALL_OW 44
41809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41810: LD_VAR 0 12
41814: PPUSH
41815: LD_VAR 0 8
41819: PPUSH
41820: LD_INT 0
41822: PPUSH
41823: CALL 43609 0 3
// end ;
41827: GO 41725
41829: POP
41830: POP
// if enchidnas then
41831: LD_VAR 0 4
41835: IFFALSE 41902
// for i = 1 to enchidnas do
41837: LD_ADDR_VAR 0 11
41841: PUSH
41842: DOUBLE
41843: LD_INT 1
41845: DEC
41846: ST_TO_ADDR
41847: LD_VAR 0 4
41851: PUSH
41852: FOR_TO
41853: IFFALSE 41900
// begin hc_class = 13 ;
41855: LD_ADDR_OWVAR 28
41859: PUSH
41860: LD_INT 13
41862: ST_TO_ADDR
// hc_gallery =  ;
41863: LD_ADDR_OWVAR 33
41867: PUSH
41868: LD_STRING 
41870: ST_TO_ADDR
// animal := CreateHuman ;
41871: LD_ADDR_VAR 0 12
41875: PUSH
41876: CALL_OW 44
41880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41881: LD_VAR 0 12
41885: PPUSH
41886: LD_VAR 0 8
41890: PPUSH
41891: LD_INT 0
41893: PPUSH
41894: CALL 43609 0 3
// end ;
41898: GO 41852
41900: POP
41901: POP
// if fishes then
41902: LD_VAR 0 7
41906: IFFALSE 41973
// for i = 1 to fishes do
41908: LD_ADDR_VAR 0 11
41912: PUSH
41913: DOUBLE
41914: LD_INT 1
41916: DEC
41917: ST_TO_ADDR
41918: LD_VAR 0 7
41922: PUSH
41923: FOR_TO
41924: IFFALSE 41971
// begin hc_class = 20 ;
41926: LD_ADDR_OWVAR 28
41930: PUSH
41931: LD_INT 20
41933: ST_TO_ADDR
// hc_gallery =  ;
41934: LD_ADDR_OWVAR 33
41938: PUSH
41939: LD_STRING 
41941: ST_TO_ADDR
// animal := CreateHuman ;
41942: LD_ADDR_VAR 0 12
41946: PUSH
41947: CALL_OW 44
41951: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41952: LD_VAR 0 12
41956: PPUSH
41957: LD_VAR 0 9
41961: PPUSH
41962: LD_INT 0
41964: PPUSH
41965: CALL 43609 0 3
// end ;
41969: GO 41923
41971: POP
41972: POP
// end ;
41973: LD_VAR 0 10
41977: RET
// export function WantHeal ( sci , unit ) ; begin
41978: LD_INT 0
41980: PPUSH
// if GetTaskList ( sci ) > 0 then
41981: LD_VAR 0 1
41985: PPUSH
41986: CALL_OW 437
41990: PUSH
41991: LD_INT 0
41993: GREATER
41994: IFFALSE 42064
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41996: LD_VAR 0 1
42000: PPUSH
42001: CALL_OW 437
42005: PUSH
42006: LD_INT 1
42008: ARRAY
42009: PUSH
42010: LD_INT 1
42012: ARRAY
42013: PUSH
42014: LD_STRING l
42016: EQUAL
42017: PUSH
42018: LD_VAR 0 1
42022: PPUSH
42023: CALL_OW 437
42027: PUSH
42028: LD_INT 1
42030: ARRAY
42031: PUSH
42032: LD_INT 4
42034: ARRAY
42035: PUSH
42036: LD_VAR 0 2
42040: EQUAL
42041: AND
42042: IFFALSE 42054
// result := true else
42044: LD_ADDR_VAR 0 3
42048: PUSH
42049: LD_INT 1
42051: ST_TO_ADDR
42052: GO 42062
// result := false ;
42054: LD_ADDR_VAR 0 3
42058: PUSH
42059: LD_INT 0
42061: ST_TO_ADDR
// end else
42062: GO 42072
// result := false ;
42064: LD_ADDR_VAR 0 3
42068: PUSH
42069: LD_INT 0
42071: ST_TO_ADDR
// end ;
42072: LD_VAR 0 3
42076: RET
// export function HealTarget ( sci ) ; begin
42077: LD_INT 0
42079: PPUSH
// if not sci then
42080: LD_VAR 0 1
42084: NOT
42085: IFFALSE 42089
// exit ;
42087: GO 42154
// result := 0 ;
42089: LD_ADDR_VAR 0 2
42093: PUSH
42094: LD_INT 0
42096: ST_TO_ADDR
// if GetTaskList ( sci ) then
42097: LD_VAR 0 1
42101: PPUSH
42102: CALL_OW 437
42106: IFFALSE 42154
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42108: LD_VAR 0 1
42112: PPUSH
42113: CALL_OW 437
42117: PUSH
42118: LD_INT 1
42120: ARRAY
42121: PUSH
42122: LD_INT 1
42124: ARRAY
42125: PUSH
42126: LD_STRING l
42128: EQUAL
42129: IFFALSE 42154
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42131: LD_ADDR_VAR 0 2
42135: PUSH
42136: LD_VAR 0 1
42140: PPUSH
42141: CALL_OW 437
42145: PUSH
42146: LD_INT 1
42148: ARRAY
42149: PUSH
42150: LD_INT 4
42152: ARRAY
42153: ST_TO_ADDR
// end ;
42154: LD_VAR 0 2
42158: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42159: LD_INT 0
42161: PPUSH
42162: PPUSH
42163: PPUSH
42164: PPUSH
// if not base_units then
42165: LD_VAR 0 1
42169: NOT
42170: IFFALSE 42174
// exit ;
42172: GO 42261
// result := false ;
42174: LD_ADDR_VAR 0 2
42178: PUSH
42179: LD_INT 0
42181: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42182: LD_ADDR_VAR 0 5
42186: PUSH
42187: LD_VAR 0 1
42191: PPUSH
42192: LD_INT 21
42194: PUSH
42195: LD_INT 3
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PPUSH
42202: CALL_OW 72
42206: ST_TO_ADDR
// if not tmp then
42207: LD_VAR 0 5
42211: NOT
42212: IFFALSE 42216
// exit ;
42214: GO 42261
// for i in tmp do
42216: LD_ADDR_VAR 0 3
42220: PUSH
42221: LD_VAR 0 5
42225: PUSH
42226: FOR_IN
42227: IFFALSE 42259
// begin result := EnemyInRange ( i , 22 ) ;
42229: LD_ADDR_VAR 0 2
42233: PUSH
42234: LD_VAR 0 3
42238: PPUSH
42239: LD_INT 22
42241: PPUSH
42242: CALL 40497 0 2
42246: ST_TO_ADDR
// if result then
42247: LD_VAR 0 2
42251: IFFALSE 42257
// exit ;
42253: POP
42254: POP
42255: GO 42261
// end ;
42257: GO 42226
42259: POP
42260: POP
// end ;
42261: LD_VAR 0 2
42265: RET
// export function FilterByTag ( units , tag ) ; begin
42266: LD_INT 0
42268: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
42269: LD_ADDR_VAR 0 3
42273: PUSH
42274: LD_VAR 0 1
42278: PPUSH
42279: LD_INT 120
42281: PUSH
42282: LD_VAR 0 2
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PPUSH
42291: CALL_OW 72
42295: ST_TO_ADDR
// end ;
42296: LD_VAR 0 3
42300: RET
// export function IsDriver ( un ) ; begin
42301: LD_INT 0
42303: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42304: LD_ADDR_VAR 0 2
42308: PUSH
42309: LD_VAR 0 1
42313: PUSH
42314: LD_INT 55
42316: PUSH
42317: EMPTY
42318: LIST
42319: PPUSH
42320: CALL_OW 69
42324: IN
42325: ST_TO_ADDR
// end ;
42326: LD_VAR 0 2
42330: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42331: LD_INT 0
42333: PPUSH
42334: PPUSH
// list := [ ] ;
42335: LD_ADDR_VAR 0 5
42339: PUSH
42340: EMPTY
42341: ST_TO_ADDR
// case d of 0 :
42342: LD_VAR 0 3
42346: PUSH
42347: LD_INT 0
42349: DOUBLE
42350: EQUAL
42351: IFTRUE 42355
42353: GO 42488
42355: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42356: LD_ADDR_VAR 0 5
42360: PUSH
42361: LD_VAR 0 1
42365: PUSH
42366: LD_INT 4
42368: MINUS
42369: PUSH
42370: LD_VAR 0 2
42374: PUSH
42375: LD_INT 4
42377: MINUS
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: PUSH
42387: LD_VAR 0 1
42391: PUSH
42392: LD_INT 3
42394: MINUS
42395: PUSH
42396: LD_VAR 0 2
42400: PUSH
42401: LD_INT 1
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: LIST
42408: PUSH
42409: LD_VAR 0 1
42413: PUSH
42414: LD_INT 4
42416: PLUS
42417: PUSH
42418: LD_VAR 0 2
42422: PUSH
42423: LD_INT 4
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: LIST
42430: PUSH
42431: LD_VAR 0 1
42435: PUSH
42436: LD_INT 3
42438: PLUS
42439: PUSH
42440: LD_VAR 0 2
42444: PUSH
42445: LD_INT 3
42447: PLUS
42448: PUSH
42449: LD_INT 5
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: LIST
42456: PUSH
42457: LD_VAR 0 1
42461: PUSH
42462: LD_VAR 0 2
42466: PUSH
42467: LD_INT 4
42469: PLUS
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: ST_TO_ADDR
// end ; 1 :
42486: GO 43186
42488: LD_INT 1
42490: DOUBLE
42491: EQUAL
42492: IFTRUE 42496
42494: GO 42629
42496: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42497: LD_ADDR_VAR 0 5
42501: PUSH
42502: LD_VAR 0 1
42506: PUSH
42507: LD_VAR 0 2
42511: PUSH
42512: LD_INT 4
42514: MINUS
42515: PUSH
42516: LD_INT 3
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: LIST
42523: PUSH
42524: LD_VAR 0 1
42528: PUSH
42529: LD_INT 3
42531: MINUS
42532: PUSH
42533: LD_VAR 0 2
42537: PUSH
42538: LD_INT 3
42540: MINUS
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: LIST
42549: PUSH
42550: LD_VAR 0 1
42554: PUSH
42555: LD_INT 4
42557: MINUS
42558: PUSH
42559: LD_VAR 0 2
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: LIST
42571: PUSH
42572: LD_VAR 0 1
42576: PUSH
42577: LD_VAR 0 2
42581: PUSH
42582: LD_INT 3
42584: PLUS
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: LIST
42593: PUSH
42594: LD_VAR 0 1
42598: PUSH
42599: LD_INT 4
42601: PLUS
42602: PUSH
42603: LD_VAR 0 2
42607: PUSH
42608: LD_INT 4
42610: PLUS
42611: PUSH
42612: LD_INT 5
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: ST_TO_ADDR
// end ; 2 :
42627: GO 43186
42629: LD_INT 2
42631: DOUBLE
42632: EQUAL
42633: IFTRUE 42637
42635: GO 42766
42637: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42638: LD_ADDR_VAR 0 5
42642: PUSH
42643: LD_VAR 0 1
42647: PUSH
42648: LD_VAR 0 2
42652: PUSH
42653: LD_INT 3
42655: MINUS
42656: PUSH
42657: LD_INT 3
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: LIST
42664: PUSH
42665: LD_VAR 0 1
42669: PUSH
42670: LD_INT 4
42672: PLUS
42673: PUSH
42674: LD_VAR 0 2
42678: PUSH
42679: LD_INT 4
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: LIST
42686: PUSH
42687: LD_VAR 0 1
42691: PUSH
42692: LD_VAR 0 2
42696: PUSH
42697: LD_INT 4
42699: PLUS
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: LIST
42708: PUSH
42709: LD_VAR 0 1
42713: PUSH
42714: LD_INT 3
42716: MINUS
42717: PUSH
42718: LD_VAR 0 2
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: LIST
42730: PUSH
42731: LD_VAR 0 1
42735: PUSH
42736: LD_INT 4
42738: MINUS
42739: PUSH
42740: LD_VAR 0 2
42744: PUSH
42745: LD_INT 4
42747: MINUS
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: ST_TO_ADDR
// end ; 3 :
42764: GO 43186
42766: LD_INT 3
42768: DOUBLE
42769: EQUAL
42770: IFTRUE 42774
42772: GO 42907
42774: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42775: LD_ADDR_VAR 0 5
42779: PUSH
42780: LD_VAR 0 1
42784: PUSH
42785: LD_INT 3
42787: PLUS
42788: PUSH
42789: LD_VAR 0 2
42793: PUSH
42794: LD_INT 4
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: LIST
42801: PUSH
42802: LD_VAR 0 1
42806: PUSH
42807: LD_INT 4
42809: PLUS
42810: PUSH
42811: LD_VAR 0 2
42815: PUSH
42816: LD_INT 4
42818: PLUS
42819: PUSH
42820: LD_INT 5
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: PUSH
42828: LD_VAR 0 1
42832: PUSH
42833: LD_INT 4
42835: MINUS
42836: PUSH
42837: LD_VAR 0 2
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: PUSH
42850: LD_VAR 0 1
42854: PUSH
42855: LD_VAR 0 2
42859: PUSH
42860: LD_INT 4
42862: MINUS
42863: PUSH
42864: LD_INT 3
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: PUSH
42872: LD_VAR 0 1
42876: PUSH
42877: LD_INT 3
42879: MINUS
42880: PUSH
42881: LD_VAR 0 2
42885: PUSH
42886: LD_INT 3
42888: MINUS
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: LIST
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: LIST
42904: ST_TO_ADDR
// end ; 4 :
42905: GO 43186
42907: LD_INT 4
42909: DOUBLE
42910: EQUAL
42911: IFTRUE 42915
42913: GO 43048
42915: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42916: LD_ADDR_VAR 0 5
42920: PUSH
42921: LD_VAR 0 1
42925: PUSH
42926: LD_VAR 0 2
42930: PUSH
42931: LD_INT 4
42933: PLUS
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: PUSH
42943: LD_VAR 0 1
42947: PUSH
42948: LD_INT 3
42950: PLUS
42951: PUSH
42952: LD_VAR 0 2
42956: PUSH
42957: LD_INT 3
42959: PLUS
42960: PUSH
42961: LD_INT 5
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: PUSH
42969: LD_VAR 0 1
42973: PUSH
42974: LD_INT 4
42976: PLUS
42977: PUSH
42978: LD_VAR 0 2
42982: PUSH
42983: LD_INT 4
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: LIST
42990: PUSH
42991: LD_VAR 0 1
42995: PUSH
42996: LD_VAR 0 2
43000: PUSH
43001: LD_INT 3
43003: MINUS
43004: PUSH
43005: LD_INT 3
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: LIST
43012: PUSH
43013: LD_VAR 0 1
43017: PUSH
43018: LD_INT 4
43020: MINUS
43021: PUSH
43022: LD_VAR 0 2
43026: PUSH
43027: LD_INT 4
43029: MINUS
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: ST_TO_ADDR
// end ; 5 :
43046: GO 43186
43048: LD_INT 5
43050: DOUBLE
43051: EQUAL
43052: IFTRUE 43056
43054: GO 43185
43056: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43057: LD_ADDR_VAR 0 5
43061: PUSH
43062: LD_VAR 0 1
43066: PUSH
43067: LD_INT 4
43069: MINUS
43070: PUSH
43071: LD_VAR 0 2
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: LIST
43083: PUSH
43084: LD_VAR 0 1
43088: PUSH
43089: LD_VAR 0 2
43093: PUSH
43094: LD_INT 4
43096: MINUS
43097: PUSH
43098: LD_INT 3
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: LIST
43105: PUSH
43106: LD_VAR 0 1
43110: PUSH
43111: LD_INT 4
43113: PLUS
43114: PUSH
43115: LD_VAR 0 2
43119: PUSH
43120: LD_INT 4
43122: PLUS
43123: PUSH
43124: LD_INT 5
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: PUSH
43132: LD_VAR 0 1
43136: PUSH
43137: LD_INT 3
43139: PLUS
43140: PUSH
43141: LD_VAR 0 2
43145: PUSH
43146: LD_INT 4
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: PUSH
43154: LD_VAR 0 1
43158: PUSH
43159: LD_VAR 0 2
43163: PUSH
43164: LD_INT 3
43166: PLUS
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: LIST
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: ST_TO_ADDR
// end ; end ;
43183: GO 43186
43185: POP
// result := list ;
43186: LD_ADDR_VAR 0 4
43190: PUSH
43191: LD_VAR 0 5
43195: ST_TO_ADDR
// end ;
43196: LD_VAR 0 4
43200: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43201: LD_INT 0
43203: PPUSH
43204: PPUSH
43205: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43206: LD_VAR 0 1
43210: NOT
43211: PUSH
43212: LD_VAR 0 2
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: LD_INT 3
43225: PUSH
43226: LD_INT 4
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: IN
43235: NOT
43236: OR
43237: IFFALSE 43241
// exit ;
43239: GO 43333
// tmp := [ ] ;
43241: LD_ADDR_VAR 0 5
43245: PUSH
43246: EMPTY
43247: ST_TO_ADDR
// for i in units do
43248: LD_ADDR_VAR 0 4
43252: PUSH
43253: LD_VAR 0 1
43257: PUSH
43258: FOR_IN
43259: IFFALSE 43302
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
43261: LD_ADDR_VAR 0 5
43265: PUSH
43266: LD_VAR 0 5
43270: PPUSH
43271: LD_VAR 0 5
43275: PUSH
43276: LD_INT 1
43278: PLUS
43279: PPUSH
43280: LD_VAR 0 4
43284: PPUSH
43285: LD_VAR 0 2
43289: PPUSH
43290: CALL_OW 259
43294: PPUSH
43295: CALL_OW 2
43299: ST_TO_ADDR
43300: GO 43258
43302: POP
43303: POP
// if not tmp then
43304: LD_VAR 0 5
43308: NOT
43309: IFFALSE 43313
// exit ;
43311: GO 43333
// result := SortListByListDesc ( units , tmp ) ;
43313: LD_ADDR_VAR 0 3
43317: PUSH
43318: LD_VAR 0 1
43322: PPUSH
43323: LD_VAR 0 5
43327: PPUSH
43328: CALL_OW 77
43332: ST_TO_ADDR
// end ;
43333: LD_VAR 0 3
43337: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43338: LD_INT 0
43340: PPUSH
43341: PPUSH
43342: PPUSH
// result := false ;
43343: LD_ADDR_VAR 0 3
43347: PUSH
43348: LD_INT 0
43350: ST_TO_ADDR
// x := GetX ( building ) ;
43351: LD_ADDR_VAR 0 4
43355: PUSH
43356: LD_VAR 0 2
43360: PPUSH
43361: CALL_OW 250
43365: ST_TO_ADDR
// y := GetY ( building ) ;
43366: LD_ADDR_VAR 0 5
43370: PUSH
43371: LD_VAR 0 2
43375: PPUSH
43376: CALL_OW 251
43380: ST_TO_ADDR
// if not building or not x or not y then
43381: LD_VAR 0 2
43385: NOT
43386: PUSH
43387: LD_VAR 0 4
43391: NOT
43392: OR
43393: PUSH
43394: LD_VAR 0 5
43398: NOT
43399: OR
43400: IFFALSE 43404
// exit ;
43402: GO 43496
// if GetTaskList ( unit ) then
43404: LD_VAR 0 1
43408: PPUSH
43409: CALL_OW 437
43413: IFFALSE 43496
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43415: LD_STRING e
43417: PUSH
43418: LD_VAR 0 1
43422: PPUSH
43423: CALL_OW 437
43427: PUSH
43428: LD_INT 1
43430: ARRAY
43431: PUSH
43432: LD_INT 1
43434: ARRAY
43435: EQUAL
43436: PUSH
43437: LD_VAR 0 4
43441: PUSH
43442: LD_VAR 0 1
43446: PPUSH
43447: CALL_OW 437
43451: PUSH
43452: LD_INT 1
43454: ARRAY
43455: PUSH
43456: LD_INT 2
43458: ARRAY
43459: EQUAL
43460: AND
43461: PUSH
43462: LD_VAR 0 5
43466: PUSH
43467: LD_VAR 0 1
43471: PPUSH
43472: CALL_OW 437
43476: PUSH
43477: LD_INT 1
43479: ARRAY
43480: PUSH
43481: LD_INT 3
43483: ARRAY
43484: EQUAL
43485: AND
43486: IFFALSE 43496
// result := true end ;
43488: LD_ADDR_VAR 0 3
43492: PUSH
43493: LD_INT 1
43495: ST_TO_ADDR
// end ;
43496: LD_VAR 0 3
43500: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43501: LD_INT 0
43503: PPUSH
// result := false ;
43504: LD_ADDR_VAR 0 4
43508: PUSH
43509: LD_INT 0
43511: ST_TO_ADDR
// if GetTaskList ( unit ) then
43512: LD_VAR 0 1
43516: PPUSH
43517: CALL_OW 437
43521: IFFALSE 43604
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43523: LD_STRING M
43525: PUSH
43526: LD_VAR 0 1
43530: PPUSH
43531: CALL_OW 437
43535: PUSH
43536: LD_INT 1
43538: ARRAY
43539: PUSH
43540: LD_INT 1
43542: ARRAY
43543: EQUAL
43544: PUSH
43545: LD_VAR 0 2
43549: PUSH
43550: LD_VAR 0 1
43554: PPUSH
43555: CALL_OW 437
43559: PUSH
43560: LD_INT 1
43562: ARRAY
43563: PUSH
43564: LD_INT 2
43566: ARRAY
43567: EQUAL
43568: AND
43569: PUSH
43570: LD_VAR 0 3
43574: PUSH
43575: LD_VAR 0 1
43579: PPUSH
43580: CALL_OW 437
43584: PUSH
43585: LD_INT 1
43587: ARRAY
43588: PUSH
43589: LD_INT 3
43591: ARRAY
43592: EQUAL
43593: AND
43594: IFFALSE 43604
// result := true ;
43596: LD_ADDR_VAR 0 4
43600: PUSH
43601: LD_INT 1
43603: ST_TO_ADDR
// end ; end ;
43604: LD_VAR 0 4
43608: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43609: LD_INT 0
43611: PPUSH
43612: PPUSH
43613: PPUSH
43614: PPUSH
// if not unit or not area then
43615: LD_VAR 0 1
43619: NOT
43620: PUSH
43621: LD_VAR 0 2
43625: NOT
43626: OR
43627: IFFALSE 43631
// exit ;
43629: GO 43795
// tmp := AreaToList ( area , i ) ;
43631: LD_ADDR_VAR 0 6
43635: PUSH
43636: LD_VAR 0 2
43640: PPUSH
43641: LD_VAR 0 5
43645: PPUSH
43646: CALL_OW 517
43650: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43651: LD_ADDR_VAR 0 5
43655: PUSH
43656: DOUBLE
43657: LD_INT 1
43659: DEC
43660: ST_TO_ADDR
43661: LD_VAR 0 6
43665: PUSH
43666: LD_INT 1
43668: ARRAY
43669: PUSH
43670: FOR_TO
43671: IFFALSE 43793
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43673: LD_ADDR_VAR 0 7
43677: PUSH
43678: LD_VAR 0 6
43682: PUSH
43683: LD_INT 1
43685: ARRAY
43686: PUSH
43687: LD_VAR 0 5
43691: ARRAY
43692: PUSH
43693: LD_VAR 0 6
43697: PUSH
43698: LD_INT 2
43700: ARRAY
43701: PUSH
43702: LD_VAR 0 5
43706: ARRAY
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
43712: LD_VAR 0 7
43716: PUSH
43717: LD_INT 1
43719: ARRAY
43720: PPUSH
43721: LD_VAR 0 7
43725: PUSH
43726: LD_INT 2
43728: ARRAY
43729: PPUSH
43730: CALL_OW 428
43734: PUSH
43735: LD_INT 0
43737: EQUAL
43738: IFFALSE 43791
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43740: LD_VAR 0 1
43744: PPUSH
43745: LD_VAR 0 7
43749: PUSH
43750: LD_INT 1
43752: ARRAY
43753: PPUSH
43754: LD_VAR 0 7
43758: PUSH
43759: LD_INT 2
43761: ARRAY
43762: PPUSH
43763: LD_VAR 0 3
43767: PPUSH
43768: CALL_OW 48
// result := IsPlaced ( unit ) ;
43772: LD_ADDR_VAR 0 4
43776: PUSH
43777: LD_VAR 0 1
43781: PPUSH
43782: CALL_OW 305
43786: ST_TO_ADDR
// exit ;
43787: POP
43788: POP
43789: GO 43795
// end ; end ;
43791: GO 43670
43793: POP
43794: POP
// end ;
43795: LD_VAR 0 4
43799: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43800: LD_INT 0
43802: PPUSH
43803: PPUSH
43804: PPUSH
// if not side or side > 8 then
43805: LD_VAR 0 1
43809: NOT
43810: PUSH
43811: LD_VAR 0 1
43815: PUSH
43816: LD_INT 8
43818: GREATER
43819: OR
43820: IFFALSE 43824
// exit ;
43822: GO 44011
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43824: LD_ADDR_VAR 0 4
43828: PUSH
43829: LD_INT 22
43831: PUSH
43832: LD_VAR 0 1
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 21
43843: PUSH
43844: LD_INT 3
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PPUSH
43855: CALL_OW 69
43859: ST_TO_ADDR
// if not tmp then
43860: LD_VAR 0 4
43864: NOT
43865: IFFALSE 43869
// exit ;
43867: GO 44011
// enable_addtolog := true ;
43869: LD_ADDR_OWVAR 81
43873: PUSH
43874: LD_INT 1
43876: ST_TO_ADDR
// AddToLog ( [ ) ;
43877: LD_STRING [
43879: PPUSH
43880: CALL_OW 561
// for i in tmp do
43884: LD_ADDR_VAR 0 3
43888: PUSH
43889: LD_VAR 0 4
43893: PUSH
43894: FOR_IN
43895: IFFALSE 44002
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43897: LD_STRING [
43899: PUSH
43900: LD_VAR 0 3
43904: PPUSH
43905: CALL_OW 266
43909: STR
43910: PUSH
43911: LD_STRING , 
43913: STR
43914: PUSH
43915: LD_VAR 0 3
43919: PPUSH
43920: CALL_OW 250
43924: STR
43925: PUSH
43926: LD_STRING , 
43928: STR
43929: PUSH
43930: LD_VAR 0 3
43934: PPUSH
43935: CALL_OW 251
43939: STR
43940: PUSH
43941: LD_STRING , 
43943: STR
43944: PUSH
43945: LD_VAR 0 3
43949: PPUSH
43950: CALL_OW 254
43954: STR
43955: PUSH
43956: LD_STRING , 
43958: STR
43959: PUSH
43960: LD_VAR 0 3
43964: PPUSH
43965: LD_INT 1
43967: PPUSH
43968: CALL_OW 268
43972: STR
43973: PUSH
43974: LD_STRING , 
43976: STR
43977: PUSH
43978: LD_VAR 0 3
43982: PPUSH
43983: LD_INT 2
43985: PPUSH
43986: CALL_OW 268
43990: STR
43991: PUSH
43992: LD_STRING ],
43994: STR
43995: PPUSH
43996: CALL_OW 561
// end ;
44000: GO 43894
44002: POP
44003: POP
// AddToLog ( ]; ) ;
44004: LD_STRING ];
44006: PPUSH
44007: CALL_OW 561
// end ;
44011: LD_VAR 0 2
44015: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
44016: LD_INT 0
44018: PPUSH
44019: PPUSH
44020: PPUSH
44021: PPUSH
44022: PPUSH
// if not area or not rate or not max then
44023: LD_VAR 0 1
44027: NOT
44028: PUSH
44029: LD_VAR 0 2
44033: NOT
44034: OR
44035: PUSH
44036: LD_VAR 0 4
44040: NOT
44041: OR
44042: IFFALSE 44046
// exit ;
44044: GO 44235
// while 1 do
44046: LD_INT 1
44048: IFFALSE 44235
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44050: LD_ADDR_VAR 0 9
44054: PUSH
44055: LD_VAR 0 1
44059: PPUSH
44060: LD_INT 1
44062: PPUSH
44063: CALL_OW 287
44067: PUSH
44068: LD_INT 10
44070: MUL
44071: ST_TO_ADDR
// r := rate / 10 ;
44072: LD_ADDR_VAR 0 7
44076: PUSH
44077: LD_VAR 0 2
44081: PUSH
44082: LD_INT 10
44084: DIVREAL
44085: ST_TO_ADDR
// time := 1 1$00 ;
44086: LD_ADDR_VAR 0 8
44090: PUSH
44091: LD_INT 2100
44093: ST_TO_ADDR
// if amount < min then
44094: LD_VAR 0 9
44098: PUSH
44099: LD_VAR 0 3
44103: LESS
44104: IFFALSE 44122
// r := r * 2 else
44106: LD_ADDR_VAR 0 7
44110: PUSH
44111: LD_VAR 0 7
44115: PUSH
44116: LD_INT 2
44118: MUL
44119: ST_TO_ADDR
44120: GO 44148
// if amount > max then
44122: LD_VAR 0 9
44126: PUSH
44127: LD_VAR 0 4
44131: GREATER
44132: IFFALSE 44148
// r := r / 2 ;
44134: LD_ADDR_VAR 0 7
44138: PUSH
44139: LD_VAR 0 7
44143: PUSH
44144: LD_INT 2
44146: DIVREAL
44147: ST_TO_ADDR
// time := time / r ;
44148: LD_ADDR_VAR 0 8
44152: PUSH
44153: LD_VAR 0 8
44157: PUSH
44158: LD_VAR 0 7
44162: DIVREAL
44163: ST_TO_ADDR
// if time < 0 then
44164: LD_VAR 0 8
44168: PUSH
44169: LD_INT 0
44171: LESS
44172: IFFALSE 44189
// time := time * - 1 ;
44174: LD_ADDR_VAR 0 8
44178: PUSH
44179: LD_VAR 0 8
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: MUL
44188: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
44189: LD_VAR 0 8
44193: PUSH
44194: LD_INT 35
44196: PPUSH
44197: LD_INT 875
44199: PPUSH
44200: CALL_OW 12
44204: PLUS
44205: PPUSH
44206: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44210: LD_INT 1
44212: PPUSH
44213: LD_INT 5
44215: PPUSH
44216: CALL_OW 12
44220: PPUSH
44221: LD_VAR 0 1
44225: PPUSH
44226: LD_INT 1
44228: PPUSH
44229: CALL_OW 55
// end ;
44233: GO 44046
// end ;
44235: LD_VAR 0 5
44239: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44240: LD_INT 0
44242: PPUSH
44243: PPUSH
44244: PPUSH
44245: PPUSH
44246: PPUSH
44247: PPUSH
44248: PPUSH
44249: PPUSH
// if not turrets or not factories then
44250: LD_VAR 0 1
44254: NOT
44255: PUSH
44256: LD_VAR 0 2
44260: NOT
44261: OR
44262: IFFALSE 44266
// exit ;
44264: GO 44573
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44266: LD_ADDR_VAR 0 10
44270: PUSH
44271: LD_INT 5
44273: PUSH
44274: LD_INT 6
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: LD_INT 4
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 3
44293: PUSH
44294: LD_INT 5
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 24
44308: PUSH
44309: LD_INT 25
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 23
44318: PUSH
44319: LD_INT 27
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 42
44332: PUSH
44333: LD_INT 43
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 44
44342: PUSH
44343: LD_INT 46
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 45
44352: PUSH
44353: LD_INT 47
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: LIST
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: LIST
44369: ST_TO_ADDR
// result := [ ] ;
44370: LD_ADDR_VAR 0 3
44374: PUSH
44375: EMPTY
44376: ST_TO_ADDR
// for i in turrets do
44377: LD_ADDR_VAR 0 4
44381: PUSH
44382: LD_VAR 0 1
44386: PUSH
44387: FOR_IN
44388: IFFALSE 44571
// begin nat := GetNation ( i ) ;
44390: LD_ADDR_VAR 0 7
44394: PUSH
44395: LD_VAR 0 4
44399: PPUSH
44400: CALL_OW 248
44404: ST_TO_ADDR
// weapon := 0 ;
44405: LD_ADDR_VAR 0 8
44409: PUSH
44410: LD_INT 0
44412: ST_TO_ADDR
// if not nat then
44413: LD_VAR 0 7
44417: NOT
44418: IFFALSE 44422
// continue ;
44420: GO 44387
// for j in list [ nat ] do
44422: LD_ADDR_VAR 0 5
44426: PUSH
44427: LD_VAR 0 10
44431: PUSH
44432: LD_VAR 0 7
44436: ARRAY
44437: PUSH
44438: FOR_IN
44439: IFFALSE 44480
// if GetBWeapon ( i ) = j [ 1 ] then
44441: LD_VAR 0 4
44445: PPUSH
44446: CALL_OW 269
44450: PUSH
44451: LD_VAR 0 5
44455: PUSH
44456: LD_INT 1
44458: ARRAY
44459: EQUAL
44460: IFFALSE 44478
// begin weapon := j [ 2 ] ;
44462: LD_ADDR_VAR 0 8
44466: PUSH
44467: LD_VAR 0 5
44471: PUSH
44472: LD_INT 2
44474: ARRAY
44475: ST_TO_ADDR
// break ;
44476: GO 44480
// end ;
44478: GO 44438
44480: POP
44481: POP
// if not weapon then
44482: LD_VAR 0 8
44486: NOT
44487: IFFALSE 44491
// continue ;
44489: GO 44387
// for k in factories do
44491: LD_ADDR_VAR 0 6
44495: PUSH
44496: LD_VAR 0 2
44500: PUSH
44501: FOR_IN
44502: IFFALSE 44567
// begin weapons := AvailableWeaponList ( k ) ;
44504: LD_ADDR_VAR 0 9
44508: PUSH
44509: LD_VAR 0 6
44513: PPUSH
44514: CALL_OW 478
44518: ST_TO_ADDR
// if not weapons then
44519: LD_VAR 0 9
44523: NOT
44524: IFFALSE 44528
// continue ;
44526: GO 44501
// if weapon in weapons then
44528: LD_VAR 0 8
44532: PUSH
44533: LD_VAR 0 9
44537: IN
44538: IFFALSE 44565
// begin result := [ i , weapon ] ;
44540: LD_ADDR_VAR 0 3
44544: PUSH
44545: LD_VAR 0 4
44549: PUSH
44550: LD_VAR 0 8
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: ST_TO_ADDR
// exit ;
44559: POP
44560: POP
44561: POP
44562: POP
44563: GO 44573
// end ; end ;
44565: GO 44501
44567: POP
44568: POP
// end ;
44569: GO 44387
44571: POP
44572: POP
// end ;
44573: LD_VAR 0 3
44577: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44578: LD_INT 0
44580: PPUSH
// if not side or side > 8 then
44581: LD_VAR 0 3
44585: NOT
44586: PUSH
44587: LD_VAR 0 3
44591: PUSH
44592: LD_INT 8
44594: GREATER
44595: OR
44596: IFFALSE 44600
// exit ;
44598: GO 44659
// if not range then
44600: LD_VAR 0 4
44604: NOT
44605: IFFALSE 44616
// range := - 12 ;
44607: LD_ADDR_VAR 0 4
44611: PUSH
44612: LD_INT 12
44614: NEG
44615: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44616: LD_VAR 0 1
44620: PPUSH
44621: LD_VAR 0 2
44625: PPUSH
44626: LD_VAR 0 3
44630: PPUSH
44631: LD_VAR 0 4
44635: PPUSH
44636: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44640: LD_VAR 0 1
44644: PPUSH
44645: LD_VAR 0 2
44649: PPUSH
44650: LD_VAR 0 3
44654: PPUSH
44655: CALL_OW 331
// end ;
44659: LD_VAR 0 5
44663: RET
// export function Video ( mode ) ; begin
44664: LD_INT 0
44666: PPUSH
// ingame_video = mode ;
44667: LD_ADDR_OWVAR 52
44671: PUSH
44672: LD_VAR 0 1
44676: ST_TO_ADDR
// interface_hidden = mode ;
44677: LD_ADDR_OWVAR 54
44681: PUSH
44682: LD_VAR 0 1
44686: ST_TO_ADDR
// end ;
44687: LD_VAR 0 2
44691: RET
// export function Join ( array , element ) ; begin
44692: LD_INT 0
44694: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44695: LD_ADDR_VAR 0 3
44699: PUSH
44700: LD_VAR 0 1
44704: PPUSH
44705: LD_VAR 0 1
44709: PUSH
44710: LD_INT 1
44712: PLUS
44713: PPUSH
44714: LD_VAR 0 2
44718: PPUSH
44719: CALL_OW 1
44723: ST_TO_ADDR
// end ;
44724: LD_VAR 0 3
44728: RET
// export function JoinUnion ( array , element ) ; begin
44729: LD_INT 0
44731: PPUSH
// result := array union element ;
44732: LD_ADDR_VAR 0 3
44736: PUSH
44737: LD_VAR 0 1
44741: PUSH
44742: LD_VAR 0 2
44746: UNION
44747: ST_TO_ADDR
// end ;
44748: LD_VAR 0 3
44752: RET
// export function GetBehemoths ( side ) ; begin
44753: LD_INT 0
44755: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
44756: LD_ADDR_VAR 0 2
44760: PUSH
44761: LD_INT 22
44763: PUSH
44764: LD_VAR 0 1
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 31
44775: PUSH
44776: LD_INT 25
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PPUSH
44787: CALL_OW 69
44791: ST_TO_ADDR
// end ;
44792: LD_VAR 0 2
44796: RET
// export function Shuffle ( array ) ; var i , index ; begin
44797: LD_INT 0
44799: PPUSH
44800: PPUSH
44801: PPUSH
// result := [ ] ;
44802: LD_ADDR_VAR 0 2
44806: PUSH
44807: EMPTY
44808: ST_TO_ADDR
// if not array then
44809: LD_VAR 0 1
44813: NOT
44814: IFFALSE 44818
// exit ;
44816: GO 44917
// Randomize ;
44818: CALL_OW 10
// for i = array downto 1 do
44822: LD_ADDR_VAR 0 3
44826: PUSH
44827: DOUBLE
44828: LD_VAR 0 1
44832: INC
44833: ST_TO_ADDR
44834: LD_INT 1
44836: PUSH
44837: FOR_DOWNTO
44838: IFFALSE 44915
// begin index := rand ( 1 , array ) ;
44840: LD_ADDR_VAR 0 4
44844: PUSH
44845: LD_INT 1
44847: PPUSH
44848: LD_VAR 0 1
44852: PPUSH
44853: CALL_OW 12
44857: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44858: LD_ADDR_VAR 0 2
44862: PUSH
44863: LD_VAR 0 2
44867: PPUSH
44868: LD_VAR 0 2
44872: PUSH
44873: LD_INT 1
44875: PLUS
44876: PPUSH
44877: LD_VAR 0 1
44881: PUSH
44882: LD_VAR 0 4
44886: ARRAY
44887: PPUSH
44888: CALL_OW 2
44892: ST_TO_ADDR
// array := Delete ( array , index ) ;
44893: LD_ADDR_VAR 0 1
44897: PUSH
44898: LD_VAR 0 1
44902: PPUSH
44903: LD_VAR 0 4
44907: PPUSH
44908: CALL_OW 3
44912: ST_TO_ADDR
// end ;
44913: GO 44837
44915: POP
44916: POP
// end ;
44917: LD_VAR 0 2
44921: RET
// export function GetBaseMaterials ( base ) ; begin
44922: LD_INT 0
44924: PPUSH
// result := [ 0 , 0 , 0 ] ;
44925: LD_ADDR_VAR 0 2
44929: PUSH
44930: LD_INT 0
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: ST_TO_ADDR
// if not base then
44944: LD_VAR 0 1
44948: NOT
44949: IFFALSE 44953
// exit ;
44951: GO 45002
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44953: LD_ADDR_VAR 0 2
44957: PUSH
44958: LD_VAR 0 1
44962: PPUSH
44963: LD_INT 1
44965: PPUSH
44966: CALL_OW 275
44970: PUSH
44971: LD_VAR 0 1
44975: PPUSH
44976: LD_INT 2
44978: PPUSH
44979: CALL_OW 275
44983: PUSH
44984: LD_VAR 0 1
44988: PPUSH
44989: LD_INT 3
44991: PPUSH
44992: CALL_OW 275
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: LIST
45001: ST_TO_ADDR
// end ;
45002: LD_VAR 0 2
45006: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
45007: LD_INT 0
45009: PPUSH
45010: PPUSH
// result := array ;
45011: LD_ADDR_VAR 0 3
45015: PUSH
45016: LD_VAR 0 1
45020: ST_TO_ADDR
// if size > 0 then
45021: LD_VAR 0 2
45025: PUSH
45026: LD_INT 0
45028: GREATER
45029: IFFALSE 45075
// for i := array downto size do
45031: LD_ADDR_VAR 0 4
45035: PUSH
45036: DOUBLE
45037: LD_VAR 0 1
45041: INC
45042: ST_TO_ADDR
45043: LD_VAR 0 2
45047: PUSH
45048: FOR_DOWNTO
45049: IFFALSE 45073
// result := Delete ( result , result ) ;
45051: LD_ADDR_VAR 0 3
45055: PUSH
45056: LD_VAR 0 3
45060: PPUSH
45061: LD_VAR 0 3
45065: PPUSH
45066: CALL_OW 3
45070: ST_TO_ADDR
45071: GO 45048
45073: POP
45074: POP
// end ;
45075: LD_VAR 0 3
45079: RET
// export function ComExit ( unit ) ; var tmp ; begin
45080: LD_INT 0
45082: PPUSH
45083: PPUSH
// if not IsInUnit ( unit ) then
45084: LD_VAR 0 1
45088: PPUSH
45089: CALL_OW 310
45093: NOT
45094: IFFALSE 45098
// exit ;
45096: GO 45158
// tmp := IsInUnit ( unit ) ;
45098: LD_ADDR_VAR 0 3
45102: PUSH
45103: LD_VAR 0 1
45107: PPUSH
45108: CALL_OW 310
45112: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45113: LD_VAR 0 3
45117: PPUSH
45118: CALL_OW 247
45122: PUSH
45123: LD_INT 2
45125: EQUAL
45126: IFFALSE 45139
// ComExitVehicle ( unit ) else
45128: LD_VAR 0 1
45132: PPUSH
45133: CALL_OW 121
45137: GO 45148
// ComExitBuilding ( unit ) ;
45139: LD_VAR 0 1
45143: PPUSH
45144: CALL_OW 122
// result := tmp ;
45148: LD_ADDR_VAR 0 2
45152: PUSH
45153: LD_VAR 0 3
45157: ST_TO_ADDR
// end ;
45158: LD_VAR 0 2
45162: RET
// export function ComExitAll ( units ) ; var i ; begin
45163: LD_INT 0
45165: PPUSH
45166: PPUSH
// if not units then
45167: LD_VAR 0 1
45171: NOT
45172: IFFALSE 45176
// exit ;
45174: GO 45202
// for i in units do
45176: LD_ADDR_VAR 0 3
45180: PUSH
45181: LD_VAR 0 1
45185: PUSH
45186: FOR_IN
45187: IFFALSE 45200
// ComExit ( i ) ;
45189: LD_VAR 0 3
45193: PPUSH
45194: CALL 45080 0 1
45198: GO 45186
45200: POP
45201: POP
// end ;
45202: LD_VAR 0 2
45206: RET
// export function ResetHc ; begin
45207: LD_INT 0
45209: PPUSH
// InitHc ;
45210: CALL_OW 19
// hc_importance := 0 ;
45214: LD_ADDR_OWVAR 32
45218: PUSH
45219: LD_INT 0
45221: ST_TO_ADDR
// end ;
45222: LD_VAR 0 1
45226: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45227: LD_INT 0
45229: PPUSH
45230: PPUSH
45231: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45232: LD_ADDR_VAR 0 6
45236: PUSH
45237: LD_VAR 0 1
45241: PUSH
45242: LD_VAR 0 3
45246: PLUS
45247: PUSH
45248: LD_INT 2
45250: DIV
45251: ST_TO_ADDR
// if _x < 0 then
45252: LD_VAR 0 6
45256: PUSH
45257: LD_INT 0
45259: LESS
45260: IFFALSE 45277
// _x := _x * - 1 ;
45262: LD_ADDR_VAR 0 6
45266: PUSH
45267: LD_VAR 0 6
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: MUL
45276: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45277: LD_ADDR_VAR 0 7
45281: PUSH
45282: LD_VAR 0 2
45286: PUSH
45287: LD_VAR 0 4
45291: PLUS
45292: PUSH
45293: LD_INT 2
45295: DIV
45296: ST_TO_ADDR
// if _y < 0 then
45297: LD_VAR 0 7
45301: PUSH
45302: LD_INT 0
45304: LESS
45305: IFFALSE 45322
// _y := _y * - 1 ;
45307: LD_ADDR_VAR 0 7
45311: PUSH
45312: LD_VAR 0 7
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: MUL
45321: ST_TO_ADDR
// result := [ _x , _y ] ;
45322: LD_ADDR_VAR 0 5
45326: PUSH
45327: LD_VAR 0 6
45331: PUSH
45332: LD_VAR 0 7
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: ST_TO_ADDR
// end ;
45341: LD_VAR 0 5
45345: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45346: LD_INT 0
45348: PPUSH
45349: PPUSH
45350: PPUSH
45351: PPUSH
// task := GetTaskList ( unit ) ;
45352: LD_ADDR_VAR 0 7
45356: PUSH
45357: LD_VAR 0 1
45361: PPUSH
45362: CALL_OW 437
45366: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45367: LD_VAR 0 7
45371: NOT
45372: PUSH
45373: LD_VAR 0 1
45377: PPUSH
45378: LD_VAR 0 2
45382: PPUSH
45383: CALL_OW 308
45387: NOT
45388: AND
45389: IFFALSE 45393
// exit ;
45391: GO 45511
// if IsInArea ( unit , area ) then
45393: LD_VAR 0 1
45397: PPUSH
45398: LD_VAR 0 2
45402: PPUSH
45403: CALL_OW 308
45407: IFFALSE 45425
// begin ComMoveToArea ( unit , goAway ) ;
45409: LD_VAR 0 1
45413: PPUSH
45414: LD_VAR 0 3
45418: PPUSH
45419: CALL_OW 113
// exit ;
45423: GO 45511
// end ; if task [ 1 ] [ 1 ] <> M then
45425: LD_VAR 0 7
45429: PUSH
45430: LD_INT 1
45432: ARRAY
45433: PUSH
45434: LD_INT 1
45436: ARRAY
45437: PUSH
45438: LD_STRING M
45440: NONEQUAL
45441: IFFALSE 45445
// exit ;
45443: GO 45511
// x := task [ 1 ] [ 2 ] ;
45445: LD_ADDR_VAR 0 5
45449: PUSH
45450: LD_VAR 0 7
45454: PUSH
45455: LD_INT 1
45457: ARRAY
45458: PUSH
45459: LD_INT 2
45461: ARRAY
45462: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45463: LD_ADDR_VAR 0 6
45467: PUSH
45468: LD_VAR 0 7
45472: PUSH
45473: LD_INT 1
45475: ARRAY
45476: PUSH
45477: LD_INT 3
45479: ARRAY
45480: ST_TO_ADDR
// if InArea ( x , y , area ) then
45481: LD_VAR 0 5
45485: PPUSH
45486: LD_VAR 0 6
45490: PPUSH
45491: LD_VAR 0 2
45495: PPUSH
45496: CALL_OW 309
45500: IFFALSE 45511
// ComStop ( unit ) ;
45502: LD_VAR 0 1
45506: PPUSH
45507: CALL_OW 141
// end ;
45511: LD_VAR 0 4
45515: RET
// export function Abs ( value ) ; begin
45516: LD_INT 0
45518: PPUSH
// result := value ;
45519: LD_ADDR_VAR 0 2
45523: PUSH
45524: LD_VAR 0 1
45528: ST_TO_ADDR
// if value < 0 then
45529: LD_VAR 0 1
45533: PUSH
45534: LD_INT 0
45536: LESS
45537: IFFALSE 45554
// result := value * - 1 ;
45539: LD_ADDR_VAR 0 2
45543: PUSH
45544: LD_VAR 0 1
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: MUL
45553: ST_TO_ADDR
// end ;
45554: LD_VAR 0 2
45558: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45559: LD_INT 0
45561: PPUSH
45562: PPUSH
45563: PPUSH
45564: PPUSH
45565: PPUSH
45566: PPUSH
45567: PPUSH
45568: PPUSH
// if not unit or not building then
45569: LD_VAR 0 1
45573: NOT
45574: PUSH
45575: LD_VAR 0 2
45579: NOT
45580: OR
45581: IFFALSE 45585
// exit ;
45583: GO 45811
// x := GetX ( building ) ;
45585: LD_ADDR_VAR 0 4
45589: PUSH
45590: LD_VAR 0 2
45594: PPUSH
45595: CALL_OW 250
45599: ST_TO_ADDR
// y := GetY ( building ) ;
45600: LD_ADDR_VAR 0 6
45604: PUSH
45605: LD_VAR 0 2
45609: PPUSH
45610: CALL_OW 251
45614: ST_TO_ADDR
// d := GetDir ( building ) ;
45615: LD_ADDR_VAR 0 8
45619: PUSH
45620: LD_VAR 0 2
45624: PPUSH
45625: CALL_OW 254
45629: ST_TO_ADDR
// r := 4 ;
45630: LD_ADDR_VAR 0 9
45634: PUSH
45635: LD_INT 4
45637: ST_TO_ADDR
// for i := 1 to 5 do
45638: LD_ADDR_VAR 0 10
45642: PUSH
45643: DOUBLE
45644: LD_INT 1
45646: DEC
45647: ST_TO_ADDR
45648: LD_INT 5
45650: PUSH
45651: FOR_TO
45652: IFFALSE 45809
// begin _x := ShiftX ( x , d , r + i ) ;
45654: LD_ADDR_VAR 0 5
45658: PUSH
45659: LD_VAR 0 4
45663: PPUSH
45664: LD_VAR 0 8
45668: PPUSH
45669: LD_VAR 0 9
45673: PUSH
45674: LD_VAR 0 10
45678: PLUS
45679: PPUSH
45680: CALL_OW 272
45684: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45685: LD_ADDR_VAR 0 7
45689: PUSH
45690: LD_VAR 0 6
45694: PPUSH
45695: LD_VAR 0 8
45699: PPUSH
45700: LD_VAR 0 9
45704: PUSH
45705: LD_VAR 0 10
45709: PLUS
45710: PPUSH
45711: CALL_OW 273
45715: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45716: LD_VAR 0 5
45720: PPUSH
45721: LD_VAR 0 7
45725: PPUSH
45726: CALL_OW 488
45730: PUSH
45731: LD_VAR 0 5
45735: PPUSH
45736: LD_VAR 0 7
45740: PPUSH
45741: CALL_OW 428
45745: PPUSH
45746: CALL_OW 247
45750: PUSH
45751: LD_INT 3
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: IN
45761: NOT
45762: AND
45763: IFFALSE 45807
// begin ComMoveXY ( unit , _x , _y ) ;
45765: LD_VAR 0 1
45769: PPUSH
45770: LD_VAR 0 5
45774: PPUSH
45775: LD_VAR 0 7
45779: PPUSH
45780: CALL_OW 111
// result := [ _x , _y ] ;
45784: LD_ADDR_VAR 0 3
45788: PUSH
45789: LD_VAR 0 5
45793: PUSH
45794: LD_VAR 0 7
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: ST_TO_ADDR
// exit ;
45803: POP
45804: POP
45805: GO 45811
// end ; end ;
45807: GO 45651
45809: POP
45810: POP
// end ;
45811: LD_VAR 0 3
45815: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45816: LD_INT 0
45818: PPUSH
45819: PPUSH
45820: PPUSH
// result := 0 ;
45821: LD_ADDR_VAR 0 3
45825: PUSH
45826: LD_INT 0
45828: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45829: LD_VAR 0 1
45833: PUSH
45834: LD_INT 0
45836: LESS
45837: PUSH
45838: LD_VAR 0 1
45842: PUSH
45843: LD_INT 8
45845: GREATER
45846: OR
45847: PUSH
45848: LD_VAR 0 2
45852: PUSH
45853: LD_INT 0
45855: LESS
45856: OR
45857: PUSH
45858: LD_VAR 0 2
45862: PUSH
45863: LD_INT 8
45865: GREATER
45866: OR
45867: IFFALSE 45871
// exit ;
45869: GO 45946
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45871: LD_ADDR_VAR 0 4
45875: PUSH
45876: LD_INT 22
45878: PUSH
45879: LD_VAR 0 2
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PPUSH
45888: CALL_OW 69
45892: PUSH
45893: FOR_IN
45894: IFFALSE 45944
// begin un := UnitShoot ( i ) ;
45896: LD_ADDR_VAR 0 5
45900: PUSH
45901: LD_VAR 0 4
45905: PPUSH
45906: CALL_OW 504
45910: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45911: LD_VAR 0 5
45915: PPUSH
45916: CALL_OW 255
45920: PUSH
45921: LD_VAR 0 1
45925: EQUAL
45926: IFFALSE 45942
// begin result := un ;
45928: LD_ADDR_VAR 0 3
45932: PUSH
45933: LD_VAR 0 5
45937: ST_TO_ADDR
// exit ;
45938: POP
45939: POP
45940: GO 45946
// end ; end ;
45942: GO 45893
45944: POP
45945: POP
// end ;
45946: LD_VAR 0 3
45950: RET
// export function GetCargoBay ( units ) ; begin
45951: LD_INT 0
45953: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45954: LD_ADDR_VAR 0 2
45958: PUSH
45959: LD_VAR 0 1
45963: PPUSH
45964: LD_INT 2
45966: PUSH
45967: LD_INT 34
45969: PUSH
45970: LD_INT 12
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 34
45979: PUSH
45980: LD_INT 51
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 34
45989: PUSH
45990: LD_INT 32
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 34
45999: PUSH
46000: LD_EXP 76
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: PPUSH
46016: CALL_OW 72
46020: ST_TO_ADDR
// end ;
46021: LD_VAR 0 2
46025: RET
// export function Negate ( value ) ; begin
46026: LD_INT 0
46028: PPUSH
// result := not value ;
46029: LD_ADDR_VAR 0 2
46033: PUSH
46034: LD_VAR 0 1
46038: NOT
46039: ST_TO_ADDR
// end ;
46040: LD_VAR 0 2
46044: RET
// export function Inc ( value ) ; begin
46045: LD_INT 0
46047: PPUSH
// result := value + 1 ;
46048: LD_ADDR_VAR 0 2
46052: PUSH
46053: LD_VAR 0 1
46057: PUSH
46058: LD_INT 1
46060: PLUS
46061: ST_TO_ADDR
// end ;
46062: LD_VAR 0 2
46066: RET
// export function Dec ( value ) ; begin
46067: LD_INT 0
46069: PPUSH
// result := value - 1 ;
46070: LD_ADDR_VAR 0 2
46074: PUSH
46075: LD_VAR 0 1
46079: PUSH
46080: LD_INT 1
46082: MINUS
46083: ST_TO_ADDR
// end ;
46084: LD_VAR 0 2
46088: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46089: LD_INT 0
46091: PPUSH
46092: PPUSH
46093: PPUSH
46094: PPUSH
46095: PPUSH
46096: PPUSH
46097: PPUSH
46098: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46099: LD_VAR 0 1
46103: PPUSH
46104: LD_VAR 0 2
46108: PPUSH
46109: CALL_OW 488
46113: NOT
46114: PUSH
46115: LD_VAR 0 3
46119: PPUSH
46120: LD_VAR 0 4
46124: PPUSH
46125: CALL_OW 488
46129: NOT
46130: OR
46131: IFFALSE 46144
// begin result := - 1 ;
46133: LD_ADDR_VAR 0 5
46137: PUSH
46138: LD_INT 1
46140: NEG
46141: ST_TO_ADDR
// exit ;
46142: GO 46379
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46144: LD_ADDR_VAR 0 12
46148: PUSH
46149: LD_VAR 0 1
46153: PPUSH
46154: LD_VAR 0 2
46158: PPUSH
46159: LD_VAR 0 3
46163: PPUSH
46164: LD_VAR 0 4
46168: PPUSH
46169: CALL 45227 0 4
46173: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46174: LD_ADDR_VAR 0 11
46178: PUSH
46179: LD_VAR 0 1
46183: PPUSH
46184: LD_VAR 0 2
46188: PPUSH
46189: LD_VAR 0 12
46193: PUSH
46194: LD_INT 1
46196: ARRAY
46197: PPUSH
46198: LD_VAR 0 12
46202: PUSH
46203: LD_INT 2
46205: ARRAY
46206: PPUSH
46207: CALL_OW 298
46211: ST_TO_ADDR
// distance := 9999 ;
46212: LD_ADDR_VAR 0 10
46216: PUSH
46217: LD_INT 9999
46219: ST_TO_ADDR
// for i := 0 to 5 do
46220: LD_ADDR_VAR 0 6
46224: PUSH
46225: DOUBLE
46226: LD_INT 0
46228: DEC
46229: ST_TO_ADDR
46230: LD_INT 5
46232: PUSH
46233: FOR_TO
46234: IFFALSE 46377
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46236: LD_ADDR_VAR 0 7
46240: PUSH
46241: LD_VAR 0 1
46245: PPUSH
46246: LD_VAR 0 6
46250: PPUSH
46251: LD_VAR 0 11
46255: PPUSH
46256: CALL_OW 272
46260: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46261: LD_ADDR_VAR 0 8
46265: PUSH
46266: LD_VAR 0 2
46270: PPUSH
46271: LD_VAR 0 6
46275: PPUSH
46276: LD_VAR 0 11
46280: PPUSH
46281: CALL_OW 273
46285: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46286: LD_VAR 0 7
46290: PPUSH
46291: LD_VAR 0 8
46295: PPUSH
46296: CALL_OW 488
46300: NOT
46301: IFFALSE 46305
// continue ;
46303: GO 46233
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
46305: LD_ADDR_VAR 0 9
46309: PUSH
46310: LD_VAR 0 12
46314: PUSH
46315: LD_INT 1
46317: ARRAY
46318: PPUSH
46319: LD_VAR 0 12
46323: PUSH
46324: LD_INT 2
46326: ARRAY
46327: PPUSH
46328: LD_VAR 0 7
46332: PPUSH
46333: LD_VAR 0 8
46337: PPUSH
46338: CALL_OW 298
46342: ST_TO_ADDR
// if tmp < distance then
46343: LD_VAR 0 9
46347: PUSH
46348: LD_VAR 0 10
46352: LESS
46353: IFFALSE 46375
// begin result := i ;
46355: LD_ADDR_VAR 0 5
46359: PUSH
46360: LD_VAR 0 6
46364: ST_TO_ADDR
// distance := tmp ;
46365: LD_ADDR_VAR 0 10
46369: PUSH
46370: LD_VAR 0 9
46374: ST_TO_ADDR
// end ; end ;
46375: GO 46233
46377: POP
46378: POP
// end ;
46379: LD_VAR 0 5
46383: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46384: LD_INT 0
46386: PPUSH
46387: PPUSH
// if not driver or not IsInUnit ( driver ) then
46388: LD_VAR 0 1
46392: NOT
46393: PUSH
46394: LD_VAR 0 1
46398: PPUSH
46399: CALL_OW 310
46403: NOT
46404: OR
46405: IFFALSE 46409
// exit ;
46407: GO 46499
// vehicle := IsInUnit ( driver ) ;
46409: LD_ADDR_VAR 0 3
46413: PUSH
46414: LD_VAR 0 1
46418: PPUSH
46419: CALL_OW 310
46423: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46424: LD_VAR 0 1
46428: PPUSH
46429: LD_STRING \
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: PUSH
46459: LD_STRING E
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_VAR 0 3
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PPUSH
46495: CALL_OW 446
// end ;
46499: LD_VAR 0 2
46503: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46504: LD_INT 0
46506: PPUSH
46507: PPUSH
// if not driver or not IsInUnit ( driver ) then
46508: LD_VAR 0 1
46512: NOT
46513: PUSH
46514: LD_VAR 0 1
46518: PPUSH
46519: CALL_OW 310
46523: NOT
46524: OR
46525: IFFALSE 46529
// exit ;
46527: GO 46619
// vehicle := IsInUnit ( driver ) ;
46529: LD_ADDR_VAR 0 3
46533: PUSH
46534: LD_VAR 0 1
46538: PPUSH
46539: CALL_OW 310
46543: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46544: LD_VAR 0 1
46548: PPUSH
46549: LD_STRING \
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: PUSH
46579: LD_STRING E
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_VAR 0 3
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PPUSH
46615: CALL_OW 447
// end ;
46619: LD_VAR 0 2
46623: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
46624: LD_INT 0
46626: PPUSH
46627: PPUSH
46628: PPUSH
// tmp := [ ] ;
46629: LD_ADDR_VAR 0 5
46633: PUSH
46634: EMPTY
46635: ST_TO_ADDR
// for i in units do
46636: LD_ADDR_VAR 0 4
46640: PUSH
46641: LD_VAR 0 1
46645: PUSH
46646: FOR_IN
46647: IFFALSE 46685
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
46649: LD_ADDR_VAR 0 5
46653: PUSH
46654: LD_VAR 0 5
46658: PPUSH
46659: LD_VAR 0 5
46663: PUSH
46664: LD_INT 1
46666: PLUS
46667: PPUSH
46668: LD_VAR 0 4
46672: PPUSH
46673: CALL_OW 256
46677: PPUSH
46678: CALL_OW 2
46682: ST_TO_ADDR
46683: GO 46646
46685: POP
46686: POP
// if not tmp then
46687: LD_VAR 0 5
46691: NOT
46692: IFFALSE 46696
// exit ;
46694: GO 46744
// if asc then
46696: LD_VAR 0 2
46700: IFFALSE 46724
// result := SortListByListAsc ( units , tmp ) else
46702: LD_ADDR_VAR 0 3
46706: PUSH
46707: LD_VAR 0 1
46711: PPUSH
46712: LD_VAR 0 5
46716: PPUSH
46717: CALL_OW 76
46721: ST_TO_ADDR
46722: GO 46744
// result := SortListByListDesc ( units , tmp ) ;
46724: LD_ADDR_VAR 0 3
46728: PUSH
46729: LD_VAR 0 1
46733: PPUSH
46734: LD_VAR 0 5
46738: PPUSH
46739: CALL_OW 77
46743: ST_TO_ADDR
// end ;
46744: LD_VAR 0 3
46748: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
46749: LD_INT 0
46751: PPUSH
46752: PPUSH
// task := GetTaskList ( mech ) ;
46753: LD_ADDR_VAR 0 4
46757: PUSH
46758: LD_VAR 0 1
46762: PPUSH
46763: CALL_OW 437
46767: ST_TO_ADDR
// if not task then
46768: LD_VAR 0 4
46772: NOT
46773: IFFALSE 46777
// exit ;
46775: GO 46819
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
46777: LD_ADDR_VAR 0 3
46781: PUSH
46782: LD_VAR 0 4
46786: PUSH
46787: LD_INT 1
46789: ARRAY
46790: PUSH
46791: LD_INT 1
46793: ARRAY
46794: PUSH
46795: LD_STRING r
46797: EQUAL
46798: PUSH
46799: LD_VAR 0 4
46803: PUSH
46804: LD_INT 1
46806: ARRAY
46807: PUSH
46808: LD_INT 4
46810: ARRAY
46811: PUSH
46812: LD_VAR 0 2
46816: EQUAL
46817: AND
46818: ST_TO_ADDR
// end ;
46819: LD_VAR 0 3
46823: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
46824: LD_INT 0
46826: PPUSH
// SetDir ( unit , d ) ;
46827: LD_VAR 0 1
46831: PPUSH
46832: LD_VAR 0 4
46836: PPUSH
46837: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
46841: LD_VAR 0 1
46845: PPUSH
46846: LD_VAR 0 2
46850: PPUSH
46851: LD_VAR 0 3
46855: PPUSH
46856: LD_VAR 0 5
46860: PPUSH
46861: CALL_OW 48
// end ;
46865: LD_VAR 0 6
46869: RET
// export function ToNaturalNumber ( number ) ; begin
46870: LD_INT 0
46872: PPUSH
// result := number div 1 ;
46873: LD_ADDR_VAR 0 2
46877: PUSH
46878: LD_VAR 0 1
46882: PUSH
46883: LD_INT 1
46885: DIV
46886: ST_TO_ADDR
// if number < 0 then
46887: LD_VAR 0 1
46891: PUSH
46892: LD_INT 0
46894: LESS
46895: IFFALSE 46905
// result := 0 ;
46897: LD_ADDR_VAR 0 2
46901: PUSH
46902: LD_INT 0
46904: ST_TO_ADDR
// end ;
46905: LD_VAR 0 2
46909: RET
// export function SortByClass ( units , class ) ; var un ; begin
46910: LD_INT 0
46912: PPUSH
46913: PPUSH
// if not units or not class then
46914: LD_VAR 0 1
46918: NOT
46919: PUSH
46920: LD_VAR 0 2
46924: NOT
46925: OR
46926: IFFALSE 46930
// exit ;
46928: GO 47025
// result := [ ] ;
46930: LD_ADDR_VAR 0 3
46934: PUSH
46935: EMPTY
46936: ST_TO_ADDR
// for un in units do
46937: LD_ADDR_VAR 0 4
46941: PUSH
46942: LD_VAR 0 1
46946: PUSH
46947: FOR_IN
46948: IFFALSE 47023
// if GetClass ( un ) = class then
46950: LD_VAR 0 4
46954: PPUSH
46955: CALL_OW 257
46959: PUSH
46960: LD_VAR 0 2
46964: EQUAL
46965: IFFALSE 46992
// result := Insert ( result , 1 , un ) else
46967: LD_ADDR_VAR 0 3
46971: PUSH
46972: LD_VAR 0 3
46976: PPUSH
46977: LD_INT 1
46979: PPUSH
46980: LD_VAR 0 4
46984: PPUSH
46985: CALL_OW 2
46989: ST_TO_ADDR
46990: GO 47021
// result := Replace ( result , result + 1 , un ) ;
46992: LD_ADDR_VAR 0 3
46996: PUSH
46997: LD_VAR 0 3
47001: PPUSH
47002: LD_VAR 0 3
47006: PUSH
47007: LD_INT 1
47009: PLUS
47010: PPUSH
47011: LD_VAR 0 4
47015: PPUSH
47016: CALL_OW 1
47020: ST_TO_ADDR
47021: GO 46947
47023: POP
47024: POP
// end ;
47025: LD_VAR 0 3
47029: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
47030: LD_INT 0
47032: PPUSH
47033: PPUSH
47034: PPUSH
47035: PPUSH
47036: PPUSH
47037: PPUSH
47038: PPUSH
// result := [ ] ;
47039: LD_ADDR_VAR 0 4
47043: PUSH
47044: EMPTY
47045: ST_TO_ADDR
// if x - r < 0 then
47046: LD_VAR 0 1
47050: PUSH
47051: LD_VAR 0 3
47055: MINUS
47056: PUSH
47057: LD_INT 0
47059: LESS
47060: IFFALSE 47072
// min_x := 0 else
47062: LD_ADDR_VAR 0 8
47066: PUSH
47067: LD_INT 0
47069: ST_TO_ADDR
47070: GO 47088
// min_x := x - r ;
47072: LD_ADDR_VAR 0 8
47076: PUSH
47077: LD_VAR 0 1
47081: PUSH
47082: LD_VAR 0 3
47086: MINUS
47087: ST_TO_ADDR
// if y - r < 0 then
47088: LD_VAR 0 2
47092: PUSH
47093: LD_VAR 0 3
47097: MINUS
47098: PUSH
47099: LD_INT 0
47101: LESS
47102: IFFALSE 47114
// min_y := 0 else
47104: LD_ADDR_VAR 0 7
47108: PUSH
47109: LD_INT 0
47111: ST_TO_ADDR
47112: GO 47130
// min_y := y - r ;
47114: LD_ADDR_VAR 0 7
47118: PUSH
47119: LD_VAR 0 2
47123: PUSH
47124: LD_VAR 0 3
47128: MINUS
47129: ST_TO_ADDR
// max_x := x + r ;
47130: LD_ADDR_VAR 0 9
47134: PUSH
47135: LD_VAR 0 1
47139: PUSH
47140: LD_VAR 0 3
47144: PLUS
47145: ST_TO_ADDR
// max_y := y + r ;
47146: LD_ADDR_VAR 0 10
47150: PUSH
47151: LD_VAR 0 2
47155: PUSH
47156: LD_VAR 0 3
47160: PLUS
47161: ST_TO_ADDR
// for _x = min_x to max_x do
47162: LD_ADDR_VAR 0 5
47166: PUSH
47167: DOUBLE
47168: LD_VAR 0 8
47172: DEC
47173: ST_TO_ADDR
47174: LD_VAR 0 9
47178: PUSH
47179: FOR_TO
47180: IFFALSE 47281
// for _y = min_y to max_y do
47182: LD_ADDR_VAR 0 6
47186: PUSH
47187: DOUBLE
47188: LD_VAR 0 7
47192: DEC
47193: ST_TO_ADDR
47194: LD_VAR 0 10
47198: PUSH
47199: FOR_TO
47200: IFFALSE 47277
// begin if not ValidHex ( _x , _y ) then
47202: LD_VAR 0 5
47206: PPUSH
47207: LD_VAR 0 6
47211: PPUSH
47212: CALL_OW 488
47216: NOT
47217: IFFALSE 47221
// continue ;
47219: GO 47199
// if GetResourceTypeXY ( _x , _y ) then
47221: LD_VAR 0 5
47225: PPUSH
47226: LD_VAR 0 6
47230: PPUSH
47231: CALL_OW 283
47235: IFFALSE 47275
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47237: LD_ADDR_VAR 0 4
47241: PUSH
47242: LD_VAR 0 4
47246: PPUSH
47247: LD_VAR 0 4
47251: PUSH
47252: LD_INT 1
47254: PLUS
47255: PPUSH
47256: LD_VAR 0 5
47260: PUSH
47261: LD_VAR 0 6
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PPUSH
47270: CALL_OW 1
47274: ST_TO_ADDR
// end ;
47275: GO 47199
47277: POP
47278: POP
47279: GO 47179
47281: POP
47282: POP
// end ;
47283: LD_VAR 0 4
47287: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47288: LD_INT 0
47290: PPUSH
47291: PPUSH
47292: PPUSH
47293: PPUSH
47294: PPUSH
47295: PPUSH
47296: PPUSH
47297: PPUSH
// if not units then
47298: LD_VAR 0 1
47302: NOT
47303: IFFALSE 47307
// exit ;
47305: GO 47732
// result := UnitFilter ( units , [ f_ok ] ) ;
47307: LD_ADDR_VAR 0 3
47311: PUSH
47312: LD_VAR 0 1
47316: PPUSH
47317: LD_INT 50
47319: PUSH
47320: EMPTY
47321: LIST
47322: PPUSH
47323: CALL_OW 72
47327: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
47328: LD_ADDR_VAR 0 8
47332: PUSH
47333: LD_VAR 0 1
47337: PUSH
47338: LD_INT 1
47340: ARRAY
47341: PPUSH
47342: CALL_OW 255
47346: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
47347: LD_ADDR_VAR 0 10
47351: PUSH
47352: LD_INT 29
47354: PUSH
47355: LD_EXP 79
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: ST_TO_ADDR
// if not result then
47364: LD_VAR 0 3
47368: NOT
47369: IFFALSE 47373
// exit ;
47371: GO 47732
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
47373: LD_ADDR_VAR 0 5
47377: PUSH
47378: LD_INT 81
47380: PUSH
47381: LD_VAR 0 8
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PPUSH
47390: CALL_OW 69
47394: ST_TO_ADDR
// for i in result do
47395: LD_ADDR_VAR 0 4
47399: PUSH
47400: LD_VAR 0 3
47404: PUSH
47405: FOR_IN
47406: IFFALSE 47730
// begin tag := GetTag ( i ) + 1 ;
47408: LD_ADDR_VAR 0 9
47412: PUSH
47413: LD_VAR 0 4
47417: PPUSH
47418: CALL_OW 110
47422: PUSH
47423: LD_INT 1
47425: PLUS
47426: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
47427: LD_ADDR_VAR 0 7
47431: PUSH
47432: LD_VAR 0 4
47436: PPUSH
47437: CALL_OW 250
47441: PPUSH
47442: LD_VAR 0 4
47446: PPUSH
47447: CALL_OW 251
47451: PPUSH
47452: LD_INT 6
47454: PPUSH
47455: CALL 47030 0 3
47459: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
47460: LD_VAR 0 7
47464: PUSH
47465: LD_VAR 0 4
47469: PPUSH
47470: CALL_OW 264
47474: PUSH
47475: LD_VAR 0 10
47479: IN
47480: NOT
47481: AND
47482: IFFALSE 47521
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
47484: LD_VAR 0 4
47488: PPUSH
47489: LD_VAR 0 7
47493: PUSH
47494: LD_INT 1
47496: ARRAY
47497: PUSH
47498: LD_INT 1
47500: ARRAY
47501: PPUSH
47502: LD_VAR 0 7
47506: PUSH
47507: LD_INT 1
47509: ARRAY
47510: PUSH
47511: LD_INT 2
47513: ARRAY
47514: PPUSH
47515: CALL_OW 116
47519: GO 47728
// if path > tag then
47521: LD_VAR 0 2
47525: PUSH
47526: LD_VAR 0 9
47530: GREATER
47531: IFFALSE 47698
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
47533: LD_ADDR_VAR 0 6
47537: PUSH
47538: LD_VAR 0 5
47542: PPUSH
47543: LD_INT 91
47545: PUSH
47546: LD_VAR 0 4
47550: PUSH
47551: LD_INT 12
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: LIST
47558: PPUSH
47559: CALL_OW 72
47563: ST_TO_ADDR
// if nearEnemy then
47564: LD_VAR 0 6
47568: IFFALSE 47596
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
47570: LD_VAR 0 4
47574: PPUSH
47575: LD_VAR 0 6
47579: PPUSH
47580: LD_VAR 0 4
47584: PPUSH
47585: CALL_OW 74
47589: PPUSH
47590: CALL_OW 115
47594: GO 47696
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
47596: LD_VAR 0 4
47600: PPUSH
47601: LD_VAR 0 2
47605: PUSH
47606: LD_VAR 0 9
47610: ARRAY
47611: PUSH
47612: LD_INT 1
47614: ARRAY
47615: PPUSH
47616: LD_VAR 0 2
47620: PUSH
47621: LD_VAR 0 9
47625: ARRAY
47626: PUSH
47627: LD_INT 2
47629: ARRAY
47630: PPUSH
47631: CALL_OW 297
47635: PUSH
47636: LD_INT 6
47638: GREATER
47639: IFFALSE 47682
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
47641: LD_VAR 0 4
47645: PPUSH
47646: LD_VAR 0 2
47650: PUSH
47651: LD_VAR 0 9
47655: ARRAY
47656: PUSH
47657: LD_INT 1
47659: ARRAY
47660: PPUSH
47661: LD_VAR 0 2
47665: PUSH
47666: LD_VAR 0 9
47670: ARRAY
47671: PUSH
47672: LD_INT 2
47674: ARRAY
47675: PPUSH
47676: CALL_OW 114
47680: GO 47696
// SetTag ( i , tag ) ;
47682: LD_VAR 0 4
47686: PPUSH
47687: LD_VAR 0 9
47691: PPUSH
47692: CALL_OW 109
// end else
47696: GO 47728
// if enemy then
47698: LD_VAR 0 5
47702: IFFALSE 47728
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
47704: LD_VAR 0 4
47708: PPUSH
47709: LD_VAR 0 5
47713: PPUSH
47714: LD_VAR 0 4
47718: PPUSH
47719: CALL_OW 74
47723: PPUSH
47724: CALL_OW 115
// end ;
47728: GO 47405
47730: POP
47731: POP
// end ;
47732: LD_VAR 0 3
47736: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
47737: LD_INT 0
47739: PPUSH
47740: PPUSH
47741: PPUSH
// if not unit or IsInUnit ( unit ) then
47742: LD_VAR 0 1
47746: NOT
47747: PUSH
47748: LD_VAR 0 1
47752: PPUSH
47753: CALL_OW 310
47757: OR
47758: IFFALSE 47762
// exit ;
47760: GO 47853
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
47762: LD_ADDR_VAR 0 4
47766: PUSH
47767: LD_VAR 0 1
47771: PPUSH
47772: CALL_OW 250
47776: PPUSH
47777: LD_VAR 0 2
47781: PPUSH
47782: LD_INT 1
47784: PPUSH
47785: CALL_OW 272
47789: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
47790: LD_ADDR_VAR 0 5
47794: PUSH
47795: LD_VAR 0 1
47799: PPUSH
47800: CALL_OW 251
47804: PPUSH
47805: LD_VAR 0 2
47809: PPUSH
47810: LD_INT 1
47812: PPUSH
47813: CALL_OW 273
47817: ST_TO_ADDR
// if ValidHex ( x , y ) then
47818: LD_VAR 0 4
47822: PPUSH
47823: LD_VAR 0 5
47827: PPUSH
47828: CALL_OW 488
47832: IFFALSE 47853
// ComTurnXY ( unit , x , y ) ;
47834: LD_VAR 0 1
47838: PPUSH
47839: LD_VAR 0 4
47843: PPUSH
47844: LD_VAR 0 5
47848: PPUSH
47849: CALL_OW 118
// end ;
47853: LD_VAR 0 3
47857: RET
// export function SeeUnits ( side , units ) ; var i ; begin
47858: LD_INT 0
47860: PPUSH
47861: PPUSH
// result := false ;
47862: LD_ADDR_VAR 0 3
47866: PUSH
47867: LD_INT 0
47869: ST_TO_ADDR
// if not units then
47870: LD_VAR 0 2
47874: NOT
47875: IFFALSE 47879
// exit ;
47877: GO 47924
// for i in units do
47879: LD_ADDR_VAR 0 4
47883: PUSH
47884: LD_VAR 0 2
47888: PUSH
47889: FOR_IN
47890: IFFALSE 47922
// if See ( side , i ) then
47892: LD_VAR 0 1
47896: PPUSH
47897: LD_VAR 0 4
47901: PPUSH
47902: CALL_OW 292
47906: IFFALSE 47920
// begin result := true ;
47908: LD_ADDR_VAR 0 3
47912: PUSH
47913: LD_INT 1
47915: ST_TO_ADDR
// exit ;
47916: POP
47917: POP
47918: GO 47924
// end ;
47920: GO 47889
47922: POP
47923: POP
// end ;
47924: LD_VAR 0 3
47928: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47929: LD_INT 0
47931: PPUSH
47932: PPUSH
47933: PPUSH
47934: PPUSH
// if not unit or not points then
47935: LD_VAR 0 1
47939: NOT
47940: PUSH
47941: LD_VAR 0 2
47945: NOT
47946: OR
47947: IFFALSE 47951
// exit ;
47949: GO 48041
// dist := 99999 ;
47951: LD_ADDR_VAR 0 5
47955: PUSH
47956: LD_INT 99999
47958: ST_TO_ADDR
// for i in points do
47959: LD_ADDR_VAR 0 4
47963: PUSH
47964: LD_VAR 0 2
47968: PUSH
47969: FOR_IN
47970: IFFALSE 48039
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47972: LD_ADDR_VAR 0 6
47976: PUSH
47977: LD_VAR 0 1
47981: PPUSH
47982: LD_VAR 0 4
47986: PUSH
47987: LD_INT 1
47989: ARRAY
47990: PPUSH
47991: LD_VAR 0 4
47995: PUSH
47996: LD_INT 2
47998: ARRAY
47999: PPUSH
48000: CALL_OW 297
48004: ST_TO_ADDR
// if tmpDist < dist then
48005: LD_VAR 0 6
48009: PUSH
48010: LD_VAR 0 5
48014: LESS
48015: IFFALSE 48037
// begin result := i ;
48017: LD_ADDR_VAR 0 3
48021: PUSH
48022: LD_VAR 0 4
48026: ST_TO_ADDR
// dist := tmpDist ;
48027: LD_ADDR_VAR 0 5
48031: PUSH
48032: LD_VAR 0 6
48036: ST_TO_ADDR
// end ; end ;
48037: GO 47969
48039: POP
48040: POP
// end ;
48041: LD_VAR 0 3
48045: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
48046: LD_INT 0
48048: PPUSH
// uc_side := side ;
48049: LD_ADDR_OWVAR 20
48053: PUSH
48054: LD_VAR 0 1
48058: ST_TO_ADDR
// uc_nation := 3 ;
48059: LD_ADDR_OWVAR 21
48063: PUSH
48064: LD_INT 3
48066: ST_TO_ADDR
// vc_chassis := 25 ;
48067: LD_ADDR_OWVAR 37
48071: PUSH
48072: LD_INT 25
48074: ST_TO_ADDR
// vc_engine := engine_siberite ;
48075: LD_ADDR_OWVAR 39
48079: PUSH
48080: LD_INT 3
48082: ST_TO_ADDR
// vc_control := control_computer ;
48083: LD_ADDR_OWVAR 38
48087: PUSH
48088: LD_INT 3
48090: ST_TO_ADDR
// vc_weapon := 59 ;
48091: LD_ADDR_OWVAR 40
48095: PUSH
48096: LD_INT 59
48098: ST_TO_ADDR
// result := CreateVehicle ;
48099: LD_ADDR_VAR 0 5
48103: PUSH
48104: CALL_OW 45
48108: ST_TO_ADDR
// SetDir ( result , d ) ;
48109: LD_VAR 0 5
48113: PPUSH
48114: LD_VAR 0 4
48118: PPUSH
48119: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
48123: LD_VAR 0 5
48127: PPUSH
48128: LD_VAR 0 2
48132: PPUSH
48133: LD_VAR 0 3
48137: PPUSH
48138: LD_INT 0
48140: PPUSH
48141: CALL_OW 48
// end ;
48145: LD_VAR 0 5
48149: RET
