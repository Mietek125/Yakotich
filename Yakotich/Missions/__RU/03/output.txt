// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// SetBname ( Ovsyenko , Ovsyenko ) ;
   8: LD_INT 74
  10: PPUSH
  11: LD_STRING Ovsyenko
  13: PPUSH
  14: CALL_OW 500
// AnimateTrees ( true ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 573
// Randomize ;
  25: CALL_OW 10
// RandomizeAll ;
  29: CALL_OW 11
// InitGlobalVariables ;
  33: CALL 224 0 0
// InitRussian ;
  37: CALL 1323 0 0
// Action ;
  41: CALL 5341 0 0
// InitAmerican ;
  45: CALL 4314 0 0
// InitTerminal ;
  49: CALL 3721 0 0
// DebugMode ;
  53: CALL 187 0 0
// game_speed = 7 ;
  57: LD_ADDR_OWVAR 65
  61: PUSH
  62: LD_INT 7
  64: ST_TO_ADDR
// end ;
  65: END
// export DimitriCrew , YakotichCrew , BurlakCrew , SikorskiTeam , WestTerminalCrew , MainTerminalCrew , newAttackers , Attackers ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Dimitri , Ivan , Jegor , Grigori , Anton , RusSol ; export Sevi , SeviGuy1 , SeviGuy2 , SeviGuy3 ; export Burlak , Karamazov , Petrovova , Lipshchin , Gleb , Titov , Petrosyan , Dolgov ; export BurlakVeh , KaramazovVeh , BurlakCrewVeh1 , BurlakCrewVeh2 , BurlakCrewVeh3 , BurlakCrewVeh4 , BurlakCrewVeh5 , BurlakCrewVeh6 ; export Sikorski , SikorskiMeat , Truman , Bobby , Cyrus , Gary , Lynch , McCreery , Walker , Jilian , Turner , Houten , NorthSold ; export Morozov , Platonov ; export BurlakTime ; export debug ; export mission_prefix ; export cutscene_ended , ovsyenko_captured , start_ended , lab_seen , lab_captured , rocket_researched , prediction_researched , buldozer_researched , flametank_saved , sikorski_dead , everything_researched ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 66
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// cutscene_ended = false ;
  77: LD_ADDR_EXP 67
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// ovsyenko_captured = false ;
  85: LD_ADDR_EXP 68
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// start_ended = false ;
  93: LD_ADDR_EXP 69
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// rocket_researched = false ;
 101: LD_ADDR_EXP 72
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// buldozer_researched = false ;
 109: LD_ADDR_EXP 74
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// prediction_researched = false ;
 117: LD_ADDR_EXP 73
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// flametank_saved = false ;
 125: LD_ADDR_EXP 75
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// lab_seen = false ;
 133: LD_ADDR_EXP 70
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// lab_captured = false ;
 141: LD_ADDR_EXP 71
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// everything_researched = false ;
 149: LD_ADDR_EXP 77
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// BurlakTime := [ 10 10$0 , 12 12$30 , 15 15$0 ] [ Difficulty ] ;
 157: LD_ADDR_EXP 64
 161: PUSH
 162: LD_INT 21000
 164: PUSH
 165: LD_INT 26250
 167: PUSH
 168: LD_INT 31500
 170: PUSH
 171: EMPTY
 172: LIST
 173: LIST
 174: LIST
 175: PUSH
 176: LD_OWVAR 67
 180: ARRAY
 181: ST_TO_ADDR
// end ;
 182: LD_VAR 0 1
 186: RET
// export function DebugMode ; begin
 187: LD_INT 0
 189: PPUSH
// if Debug = true then
 190: LD_EXP 65
 194: PUSH
 195: LD_INT 1
 197: EQUAL
 198: IFFALSE 219
// begin Difficulty := 3 ;
 200: LD_ADDR_OWVAR 67
 204: PUSH
 205: LD_INT 3
 207: ST_TO_ADDR
// TurnFogOff ( ) ;
 208: CALL_OW 537
// FogOff ( 3 ) ;
 212: LD_INT 3
 214: PPUSH
 215: CALL_OW 344
// end ; end ; end_of_file
 219: LD_VAR 0 1
 223: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
 224: LD_INT 0
 226: PPUSH
// ar_miner := 81 ;
 227: LD_ADDR_EXP 85
 231: PUSH
 232: LD_INT 81
 234: ST_TO_ADDR
// ar_crane := 88 ;
 235: LD_ADDR_EXP 84
 239: PUSH
 240: LD_INT 88
 242: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 243: LD_ADDR_EXP 79
 247: PUSH
 248: LD_INT 89
 250: ST_TO_ADDR
// us_hack := 99 ;
 251: LD_ADDR_EXP 80
 255: PUSH
 256: LD_INT 99
 258: ST_TO_ADDR
// us_artillery := 97 ;
 259: LD_ADDR_EXP 81
 263: PUSH
 264: LD_INT 97
 266: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 267: LD_ADDR_EXP 82
 271: PUSH
 272: LD_INT 91
 274: ST_TO_ADDR
// ar_mortar := 92 ;
 275: LD_ADDR_EXP 83
 279: PUSH
 280: LD_INT 92
 282: ST_TO_ADDR
// ru_flamethrower := 93 ;
 283: LD_ADDR_EXP 86
 287: PUSH
 288: LD_INT 93
 290: ST_TO_ADDR
// ru_radar := 98 ;
 291: LD_ADDR_EXP 78
 295: PUSH
 296: LD_INT 98
 298: ST_TO_ADDR
// tech_Artillery := 80 ;
 299: LD_ADDR_EXP 87
 303: PUSH
 304: LD_INT 80
 306: ST_TO_ADDR
// tech_RadMat := 81 ;
 307: LD_ADDR_EXP 88
 311: PUSH
 312: LD_INT 81
 314: ST_TO_ADDR
// tech_BasicTools := 82 ;
 315: LD_ADDR_EXP 89
 319: PUSH
 320: LD_INT 82
 322: ST_TO_ADDR
// tech_Cargo := 83 ;
 323: LD_ADDR_EXP 90
 327: PUSH
 328: LD_INT 83
 330: ST_TO_ADDR
// tech_Track := 84 ;
 331: LD_ADDR_EXP 91
 335: PUSH
 336: LD_INT 84
 338: ST_TO_ADDR
// tech_Crane := 85 ;
 339: LD_ADDR_EXP 92
 343: PUSH
 344: LD_INT 85
 346: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 347: LD_ADDR_EXP 93
 351: PUSH
 352: LD_INT 86
 354: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 355: LD_ADDR_EXP 94
 359: PUSH
 360: LD_INT 87
 362: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
 363: LD_ADDR_EXP 95
 367: PUSH
 368: LD_INT 88
 370: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
 371: LD_ADDR_EXP 96
 375: PUSH
 376: LD_INT 90
 378: ST_TO_ADDR
// class_mastodont := 31 ;
 379: LD_ADDR_EXP 97
 383: PUSH
 384: LD_INT 31
 386: ST_TO_ADDR
// class_horse := 21 ;
 387: LD_ADDR_EXP 98
 391: PUSH
 392: LD_INT 21
 394: ST_TO_ADDR
// end ; end_of_file
 395: LD_VAR 0 1
 399: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 400: LD_INT 0
 402: PPUSH
 403: PPUSH
 404: PPUSH
// uc_side := GetSide ( b ) ;
 405: LD_ADDR_OWVAR 20
 409: PUSH
 410: LD_VAR 0 2
 414: PPUSH
 415: CALL_OW 255
 419: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_VAR 0 2
 429: PPUSH
 430: CALL_OW 248
 434: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 435: LD_ADDR_VAR 0 5
 439: PUSH
 440: LD_VAR 0 2
 444: PPUSH
 445: CALL_OW 254
 449: PUSH
 450: LD_INT 3
 452: MINUS
 453: ST_TO_ADDR
// if dir < 0 then
 454: LD_VAR 0 5
 458: PUSH
 459: LD_INT 0
 461: LESS
 462: IFFALSE 478
// dir := 6 + dir ;
 464: LD_ADDR_VAR 0 5
 468: PUSH
 469: LD_INT 6
 471: PUSH
 472: LD_VAR 0 5
 476: PLUS
 477: ST_TO_ADDR
// un := CreateHuman ;
 478: LD_ADDR_VAR 0 4
 482: PUSH
 483: CALL_OW 44
 487: ST_TO_ADDR
// SetDir ( un , dir ) ;
 488: LD_VAR 0 4
 492: PPUSH
 493: LD_VAR 0 5
 497: PPUSH
 498: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 502: LD_VAR 0 4
 506: PPUSH
 507: LD_VAR 0 2
 511: PPUSH
 512: CALL_OW 52
// end ;
 516: LD_VAR 0 3
 520: RET
// export function GetClassFromStart ( ident ) ; var un ; begin
 521: LD_INT 0
 523: PPUSH
 524: PPUSH
// un := NewCharacter ( ident ) ;
 525: LD_ADDR_VAR 0 3
 529: PUSH
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 25
 539: ST_TO_ADDR
// if not un then
 540: LD_VAR 0 3
 544: NOT
 545: IFFALSE 549
// exit ;
 547: GO 573
// result := GetClass ( un ) ;
 549: LD_ADDR_VAR 0 2
 553: PUSH
 554: LD_VAR 0 3
 558: PPUSH
 559: CALL_OW 257
 563: ST_TO_ADDR
// DestroyUnit ( un ) ;
 564: LD_VAR 0 3
 568: PPUSH
 569: CALL_OW 65
// end ;
 573: LD_VAR 0 2
 577: RET
// every 1 trigger IsSelected ( Kvantovy ) do
 578: LD_INT 160
 580: PPUSH
 581: CALL_OW 306
 585: IFFALSE 682
 587: GO 589
 589: DISABLE
// begin KvantovyExp ( [ 1 , 2 , 3 , 4 ] ) ;
 590: LD_INT 1
 592: PUSH
 593: LD_INT 2
 595: PUSH
 596: LD_INT 3
 598: PUSH
 599: LD_INT 4
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: PPUSH
 608: CALL 683 0 1
// Wait ( 0 0$05 ) ;
 612: LD_INT 175
 614: PPUSH
 615: CALL_OW 67
// Say ( Kvantovy , 3Kvantovy-Sikret ) ;
 619: LD_INT 160
 621: PPUSH
 622: LD_STRING 3Kvantovy-Sikret
 624: PPUSH
 625: CALL_OW 88
// TeleportUnit ( Kvantovy , 120 , 237 , 300 , true ) ;
 629: LD_INT 160
 631: PPUSH
 632: LD_INT 120
 634: PPUSH
 635: LD_INT 237
 637: PPUSH
 638: LD_INT 300
 640: PPUSH
 641: LD_INT 1
 643: PPUSH
 644: CALL_OW 483
// Wait ( 0 0$05 ) ;
 648: LD_INT 175
 650: PPUSH
 651: CALL_OW 67
// RemoveUnit ( Kvantovy ) ;
 655: LD_INT 160
 657: PPUSH
 658: CALL_OW 64
// SaveVariable ( Kvantovy , KvantovySaved ) ;
 662: LD_INT 160
 664: PPUSH
 665: LD_STRING KvantovySaved
 667: PPUSH
 668: CALL_OW 39
// SaveCharacters ( Kvantovy , Kvantovy ) ;
 672: LD_INT 160
 674: PPUSH
 675: LD_STRING Kvantovy
 677: PPUSH
 678: CALL_OW 38
// end ;
 682: END
// export function KvantovyExp ( q ) ; var dec , q1 ; begin
 683: LD_INT 0
 685: PPUSH
 686: PPUSH
 687: PPUSH
// dec = SelectiveQuery ( KvantovyQuery , q ) ;
 688: LD_ADDR_VAR 0 3
 692: PUSH
 693: LD_STRING KvantovyQuery
 695: PPUSH
 696: LD_VAR 0 1
 700: PPUSH
 701: CALL_OW 98
 705: ST_TO_ADDR
// case dec of 1 :
 706: LD_VAR 0 3
 710: PUSH
 711: LD_INT 1
 713: DOUBLE
 714: EQUAL
 715: IFTRUE 719
 717: GO 737
 719: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 2000 ) ;
 720: LD_EXP 9
 724: PPUSH
 725: LD_INT 1
 727: PPUSH
 728: LD_INT 2000
 730: PPUSH
 731: CALL_OW 591
// end ; 2 :
 735: GO 816
 737: LD_INT 2
 739: DOUBLE
 740: EQUAL
 741: IFTRUE 745
 743: GO 763
 745: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 2000 ) ;
 746: LD_EXP 9
 750: PPUSH
 751: LD_INT 2
 753: PPUSH
 754: LD_INT 2000
 756: PPUSH
 757: CALL_OW 591
// end ; 3 :
 761: GO 816
 763: LD_INT 3
 765: DOUBLE
 766: EQUAL
 767: IFTRUE 771
 769: GO 789
 771: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 2000 ) ;
 772: LD_EXP 9
 776: PPUSH
 777: LD_INT 3
 779: PPUSH
 780: LD_INT 2000
 782: PPUSH
 783: CALL_OW 591
// end ; 4 :
 787: GO 816
 789: LD_INT 4
 791: DOUBLE
 792: EQUAL
 793: IFTRUE 797
 795: GO 815
 797: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 2000 ) ;
 798: LD_EXP 9
 802: PPUSH
 803: LD_INT 4
 805: PPUSH
 806: LD_INT 2000
 808: PPUSH
 809: CALL_OW 591
// end ; end ;
 813: GO 816
 815: POP
// end ;
 816: LD_VAR 0 2
 820: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
 821: LD_EXP 9
 825: PPUSH
 826: CALL_OW 301
 830: IFFALSE 842
 832: GO 834
 834: DISABLE
// begin YouLost ( YakotichDead ) ;
 835: LD_STRING YakotichDead
 837: PPUSH
 838: CALL_OW 104
// end ;
 842: END
// every 0 0$1 trigger IsDead ( Mietek ) do
 843: LD_EXP 10
 847: PPUSH
 848: CALL_OW 301
 852: IFFALSE 864
 854: GO 856
 856: DISABLE
// begin YouLost ( MietekDead ) ;
 857: LD_STRING MietekDead
 859: PPUSH
 860: CALL_OW 104
// end ;
 864: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
 865: LD_VAR 0 1
 869: PUSH
 870: LD_INT 22
 872: PUSH
 873: LD_INT 3
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: PUSH
 880: LD_INT 3
 882: PUSH
 883: LD_INT 23
 885: PUSH
 886: LD_INT 0
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: PUSH
 893: EMPTY
 894: LIST
 895: LIST
 896: PUSH
 897: LD_INT 21
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: LIST
 911: PPUSH
 912: CALL_OW 69
 916: IN
 917: IFFALSE 926
// YouLost ( PeopleDead ) ;
 919: LD_STRING PeopleDead
 921: PPUSH
 922: CALL_OW 104
// end ;
 926: PPOPN 1
 928: END
// every 0 0$1 trigger IsDead ( Ovsyenko ) do
 929: LD_INT 74
 931: PPUSH
 932: CALL_OW 301
 936: IFFALSE 948
 938: GO 940
 940: DISABLE
// begin YouLost ( OvsyenkoDead ) ;
 941: LD_STRING OvsyenkoDead
 943: PPUSH
 944: CALL_OW 104
// end ;
 948: END
// every 1 trigger start_ended = false do
 949: LD_EXP 69
 953: PUSH
 954: LD_INT 0
 956: EQUAL
 957: IFFALSE 1101
 959: GO 961
 961: DISABLE
// begin SetLives ( [ Gary , Bobby , Cyrus , Lynch , Walker , McCreery , Jilian , Turner ] , 1000 ) ;
 962: LD_EXP 54
 966: PUSH
 967: LD_EXP 52
 971: PUSH
 972: LD_EXP 53
 976: PUSH
 977: LD_EXP 55
 981: PUSH
 982: LD_EXP 57
 986: PUSH
 987: LD_EXP 56
 991: PUSH
 992: LD_EXP 58
 996: PUSH
 997: LD_EXP 59
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: LIST
1011: PPUSH
1012: LD_INT 1000
1014: PPUSH
1015: CALL_OW 234
// SetLives ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 1000 ) ;
1019: LD_INT 22
1021: PUSH
1022: LD_INT 3
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 21
1031: PUSH
1032: LD_INT 1
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PUSH
1039: EMPTY
1040: LIST
1041: LIST
1042: PPUSH
1043: CALL_OW 69
1047: PPUSH
1048: LD_INT 1000
1050: PPUSH
1051: CALL_OW 234
// SetLives ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , 1000 ) ;
1055: LD_INT 22
1057: PUSH
1058: LD_INT 3
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: PUSH
1065: LD_INT 21
1067: PUSH
1068: LD_INT 2
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: PPUSH
1079: CALL_OW 69
1083: PPUSH
1084: LD_INT 1000
1086: PPUSH
1087: CALL_OW 234
// CenterOnUnits ( Yakotich ) ;
1091: LD_EXP 9
1095: PPUSH
1096: CALL_OW 85
// enable ;
1100: ENABLE
// end ;
1101: END
// every 0 0$1 trigger ovsyenko_captured = true do
1102: LD_EXP 68
1106: PUSH
1107: LD_INT 1
1109: EQUAL
1110: IFFALSE 1170
1112: GO 1114
1114: DISABLE
// begin if BurlakTime then
1115: LD_EXP 64
1119: IFFALSE 1160
// begin BurlakTime := BurlakTime - 0 0$1 ;
1121: LD_ADDR_EXP 64
1125: PUSH
1126: LD_EXP 64
1130: PUSH
1131: LD_INT 35
1133: MINUS
1134: ST_TO_ADDR
// display_strings := display_strings ^ [ #BurlakForces , BurlakTime ] ;
1135: LD_ADDR_OWVAR 47
1139: PUSH
1140: LD_OWVAR 47
1144: PUSH
1145: LD_STRING #BurlakForces
1147: PUSH
1148: LD_EXP 64
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: ADD
1157: ST_TO_ADDR
// end else
1158: GO 1169
// begin display_strings :=  ;
1160: LD_ADDR_OWVAR 47
1164: PUSH
1165: LD_STRING 
1167: ST_TO_ADDR
// disable ;
1168: DISABLE
// end ; enable ;
1169: ENABLE
// end ;
1170: END
// every 1 trigger ovsyenko_captured = false and FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
1171: LD_EXP 68
1175: PUSH
1176: LD_INT 0
1178: EQUAL
1179: PUSH
1180: LD_INT 18
1182: PPUSH
1183: LD_INT 22
1185: PUSH
1186: LD_INT 3
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: PUSH
1193: LD_INT 2
1195: PUSH
1196: LD_INT 21
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 21
1208: PUSH
1209: LD_INT 2
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: LIST
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 70
1229: PUSH
1230: LD_INT 0
1232: GREATER
1233: AND
1234: IFFALSE 1320
1236: GO 1238
1238: DISABLE
1239: LD_INT 0
1241: PPUSH
// begin enable ;
1242: ENABLE
// for unit in FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1243: LD_ADDR_VAR 0 1
1247: PUSH
1248: LD_INT 18
1250: PPUSH
1251: LD_INT 22
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PUSH
1261: LD_INT 2
1263: PUSH
1264: LD_INT 21
1266: PUSH
1267: LD_INT 1
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 21
1276: PUSH
1277: LD_INT 2
1279: PUSH
1280: EMPTY
1281: LIST
1282: LIST
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: PPUSH
1293: CALL_OW 70
1297: PUSH
1298: FOR_IN
1299: IFFALSE 1318
// begin ComMoveXY ( unit , 101 , 116 ) ;
1301: LD_VAR 0 1
1305: PPUSH
1306: LD_INT 101
1308: PPUSH
1309: LD_INT 116
1311: PPUSH
1312: CALL_OW 111
// end ;
1316: GO 1298
1318: POP
1319: POP
// end ; end_of_file
1320: PPOPN 1
1322: END
// export function InitRussian ; begin
1323: LD_INT 0
1325: PPUSH
// Uc_Nation := 3 ;
1326: LD_ADDR_OWVAR 21
1330: PUSH
1331: LD_INT 3
1333: ST_TO_ADDR
// Uc_Side := 3 ;
1334: LD_ADDR_OWVAR 20
1338: PUSH
1339: LD_INT 3
1341: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 02_ ) ;
1342: LD_ADDR_EXP 9
1346: PUSH
1347: LD_STRING Yakotich
1349: PPUSH
1350: LD_INT 1
1352: PPUSH
1353: LD_STRING 02_
1355: PPUSH
1356: CALL 8541 0 3
1360: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 02_ ) ;
1361: LD_ADDR_EXP 10
1365: PUSH
1366: LD_STRING Mietek
1368: PPUSH
1369: LD_INT 1
1371: PPUSH
1372: LD_STRING 02_
1374: PPUSH
1375: CALL 8541 0 3
1379: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 02_ ) ;
1380: LD_ADDR_EXP 11
1384: PUSH
1385: LD_STRING Boris
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: LD_STRING 02_
1393: PPUSH
1394: CALL 8541 0 3
1398: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 02_ ) ;
1399: LD_ADDR_EXP 13
1403: PUSH
1404: LD_STRING Michail
1406: PPUSH
1407: LD_INT 1
1409: PPUSH
1410: LD_STRING 02_
1412: PPUSH
1413: CALL 8541 0 3
1417: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 02_ ) ;
1418: LD_ADDR_EXP 12
1422: PUSH
1423: LD_STRING Vasilij
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_STRING 02_
1431: PPUSH
1432: CALL 8541 0 3
1436: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 02_ ) ;
1437: LD_ADDR_EXP 14
1441: PUSH
1442: LD_STRING Constantin
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: LD_STRING 02_
1450: PPUSH
1451: CALL 8541 0 3
1455: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 02_ ) ;
1456: LD_ADDR_EXP 15
1460: PUSH
1461: LD_STRING Maksim
1463: PPUSH
1464: LD_INT 1
1466: PPUSH
1467: LD_STRING 02_
1469: PPUSH
1470: CALL 8541 0 3
1474: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 02_ ) ;
1475: LD_ADDR_EXP 16
1479: PUSH
1480: LD_STRING Fiodor
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: LD_STRING 02_
1488: PPUSH
1489: CALL 8541 0 3
1493: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 02_ ) ;
1494: LD_ADDR_EXP 19
1498: PUSH
1499: LD_STRING Aleksiej
1501: PPUSH
1502: LD_INT 1
1504: PPUSH
1505: LD_STRING 02_
1507: PPUSH
1508: CALL 8541 0 3
1512: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 02_ ) ;
1513: LD_ADDR_EXP 17
1517: PUSH
1518: LD_STRING Pavel
1520: PPUSH
1521: LD_INT 1
1523: PPUSH
1524: LD_STRING 02_
1526: PPUSH
1527: CALL 8541 0 3
1531: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 02_ ) ;
1532: LD_ADDR_EXP 18
1536: PUSH
1537: LD_STRING Zakhar
1539: PPUSH
1540: LD_INT 1
1542: PPUSH
1543: LD_STRING 02_
1545: PPUSH
1546: CALL 8541 0 3
1550: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 02_ ) ;
1551: LD_ADDR_EXP 20
1555: PUSH
1556: LD_STRING Aleksandr
1558: PPUSH
1559: LD_INT 1
1561: PPUSH
1562: LD_STRING 02_
1564: PPUSH
1565: CALL 8541 0 3
1569: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , true , 02_ ) ;
1570: LD_ADDR_EXP 22
1574: PUSH
1575: LD_STRING Stanislav
1577: PPUSH
1578: LD_INT 1
1580: PPUSH
1581: LD_STRING 02_
1583: PPUSH
1584: CALL 8541 0 3
1588: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , true , 02_ ) ;
1589: LD_ADDR_EXP 21
1593: PUSH
1594: LD_STRING Josif
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_STRING 02_
1602: PPUSH
1603: CALL 8541 0 3
1607: ST_TO_ADDR
// SetClass ( [ Yakotich , Mietek , Constantin , Maksim , Fiodor , Aleksiej , Zakhar , Aleksandr , Josif ] , 1 ) ;
1608: LD_EXP 9
1612: PUSH
1613: LD_EXP 10
1617: PUSH
1618: LD_EXP 14
1622: PUSH
1623: LD_EXP 15
1627: PUSH
1628: LD_EXP 16
1632: PUSH
1633: LD_EXP 19
1637: PUSH
1638: LD_EXP 18
1642: PUSH
1643: LD_EXP 20
1647: PUSH
1648: LD_EXP 21
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PPUSH
1664: LD_INT 1
1666: PPUSH
1667: CALL_OW 336
// SetClass ( Boris , 2 ) ;
1671: LD_EXP 11
1675: PPUSH
1676: LD_INT 2
1678: PPUSH
1679: CALL_OW 336
// SetClass ( [ Michail , Pavel ] , 3 ) ;
1683: LD_EXP 13
1687: PUSH
1688: LD_EXP 17
1692: PUSH
1693: EMPTY
1694: LIST
1695: LIST
1696: PPUSH
1697: LD_INT 3
1699: PPUSH
1700: CALL_OW 336
// SetClass ( [ Stanislav , Vasilij ] , 4 ) ;
1704: LD_EXP 22
1708: PUSH
1709: LD_EXP 12
1713: PUSH
1714: EMPTY
1715: LIST
1716: LIST
1717: PPUSH
1718: LD_INT 4
1720: PPUSH
1721: CALL_OW 336
// PlaceUnitArea ( Yakotich , EnterArea , false ) ;
1725: LD_EXP 9
1729: PPUSH
1730: LD_INT 1
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL_OW 49
// PlaceUnitArea ( Mietek , EnterArea , false ) ;
1740: LD_EXP 10
1744: PPUSH
1745: LD_INT 1
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 49
// PlaceUnitArea ( Boris , EnterArea , false ) ;
1755: LD_EXP 11
1759: PPUSH
1760: LD_INT 1
1762: PPUSH
1763: LD_INT 0
1765: PPUSH
1766: CALL_OW 49
// PlaceUnitArea ( Michail , EnterArea , false ) ;
1770: LD_EXP 13
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 49
// PlaceUnitArea ( Vasilij , EnterArea , false ) ;
1785: LD_EXP 12
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_INT 0
1795: PPUSH
1796: CALL_OW 49
// PlaceUnitArea ( Constantin , EnterArea , false ) ;
1800: LD_EXP 14
1804: PPUSH
1805: LD_INT 1
1807: PPUSH
1808: LD_INT 0
1810: PPUSH
1811: CALL_OW 49
// PlaceUnitArea ( Maksim , EnterArea , false ) ;
1815: LD_EXP 15
1819: PPUSH
1820: LD_INT 1
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: CALL_OW 49
// PlaceUnitArea ( Fiodor , EnterArea , false ) ;
1830: LD_EXP 16
1834: PPUSH
1835: LD_INT 1
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL_OW 49
// PlaceUnitArea ( Pavel , EnterArea , false ) ;
1845: LD_EXP 17
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 49
// PlaceUnitArea ( Zakhar , EnterArea , false ) ;
1860: LD_EXP 18
1864: PPUSH
1865: LD_INT 1
1867: PPUSH
1868: LD_INT 0
1870: PPUSH
1871: CALL_OW 49
// PlaceUnitArea ( Aleksandr , EnterArea , false ) ;
1875: LD_EXP 20
1879: PPUSH
1880: LD_INT 1
1882: PPUSH
1883: LD_INT 0
1885: PPUSH
1886: CALL_OW 49
// PlaceUnitArea ( Stanislav , EnterArea , false ) ;
1890: LD_EXP 22
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: LD_INT 0
1900: PPUSH
1901: CALL_OW 49
// PlaceUnitArea ( Josif , EnterArea , false ) ;
1905: LD_EXP 21
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_INT 0
1915: PPUSH
1916: CALL_OW 49
// Dimitri := PrepareUnit ( Dimitri , false ,  ) ;
1920: LD_ADDR_EXP 23
1924: PUSH
1925: LD_STRING Dimitri
1927: PPUSH
1928: LD_INT 0
1930: PPUSH
1931: LD_STRING 
1933: PPUSH
1934: CALL 8541 0 3
1938: ST_TO_ADDR
// Ivan := PrepareUnit ( Ivan , false ,  ) ;
1939: LD_ADDR_EXP 24
1943: PUSH
1944: LD_STRING Ivan
1946: PPUSH
1947: LD_INT 0
1949: PPUSH
1950: LD_STRING 
1952: PPUSH
1953: CALL 8541 0 3
1957: ST_TO_ADDR
// Jegor := PrepareUnit ( Jegor , false ,  ) ;
1958: LD_ADDR_EXP 25
1962: PUSH
1963: LD_STRING Jegor
1965: PPUSH
1966: LD_INT 0
1968: PPUSH
1969: LD_STRING 
1971: PPUSH
1972: CALL 8541 0 3
1976: ST_TO_ADDR
// Grigori := PrepareUnit ( Grigori , false ,  ) ;
1977: LD_ADDR_EXP 26
1981: PUSH
1982: LD_STRING Grigori
1984: PPUSH
1985: LD_INT 0
1987: PPUSH
1988: LD_STRING 
1990: PPUSH
1991: CALL 8541 0 3
1995: ST_TO_ADDR
// Anton := PrepareUnit ( Anton , false ,  ) ;
1996: LD_ADDR_EXP 27
2000: PUSH
2001: LD_STRING Anton
2003: PPUSH
2004: LD_INT 0
2006: PPUSH
2007: LD_STRING 
2009: PPUSH
2010: CALL 8541 0 3
2014: ST_TO_ADDR
// PlaceHumanInUnit ( Dimitri , Ovsyenko ) ;
2015: LD_EXP 23
2019: PPUSH
2020: LD_INT 74
2022: PPUSH
2023: CALL_OW 52
// PlaceHumanInUnit ( Anton , Ovsyenko ) ;
2027: LD_EXP 27
2031: PPUSH
2032: LD_INT 74
2034: PPUSH
2035: CALL_OW 52
// PlaceHumanInUnit ( Grigori , Ovsyenko ) ;
2039: LD_EXP 26
2043: PPUSH
2044: LD_INT 74
2046: PPUSH
2047: CALL_OW 52
// PlaceHumanInUnit ( Jegor , OB2 ) ;
2051: LD_EXP 25
2055: PPUSH
2056: LD_INT 79
2058: PPUSH
2059: CALL_OW 52
// PlaceHumanInUnit ( Ivan , OB3 ) ;
2063: LD_EXP 24
2067: PPUSH
2068: LD_INT 78
2070: PPUSH
2071: CALL_OW 52
// Uc_Side := 6 ;
2075: LD_ADDR_OWVAR 20
2079: PUSH
2080: LD_INT 6
2082: ST_TO_ADDR
// PrepareSoldier ( 0 , 3 ) ;
2083: LD_INT 0
2085: PPUSH
2086: LD_INT 3
2088: PPUSH
2089: CALL_OW 381
// RusSol = CreateHuman ;
2093: LD_ADDR_EXP 28
2097: PUSH
2098: CALL_OW 44
2102: ST_TO_ADDR
// PlaceHumanInUnit ( RusSol , OB1 ) ;
2103: LD_EXP 28
2107: PPUSH
2108: LD_INT 77
2110: PPUSH
2111: CALL_OW 52
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
2115: LD_ADDR_EXP 62
2119: PUSH
2120: LD_STRING Morozov
2122: PPUSH
2123: LD_INT 0
2125: PPUSH
2126: LD_STRING 
2128: PPUSH
2129: CALL 8541 0 3
2133: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
2134: LD_ADDR_EXP 63
2138: PUSH
2139: LD_STRING Platonov
2141: PPUSH
2142: LD_INT 0
2144: PPUSH
2145: LD_STRING 
2147: PPUSH
2148: CALL 8541 0 3
2152: ST_TO_ADDR
// end ;
2153: LD_VAR 0 1
2157: RET
// export function InitBurlak ; begin
2158: LD_INT 0
2160: PPUSH
// Uc_side := 3 ;
2161: LD_ADDR_OWVAR 20
2165: PUSH
2166: LD_INT 3
2168: ST_TO_ADDR
// Uc_nation := 3 ;
2169: LD_ADDR_OWVAR 21
2173: PUSH
2174: LD_INT 3
2176: ST_TO_ADDR
// Uc_Direction := 0 ;
2177: LD_ADDR_OWVAR 24
2181: PUSH
2182: LD_INT 0
2184: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2185: LD_ADDR_EXP 33
2189: PUSH
2190: LD_STRING Burlak
2192: PPUSH
2193: LD_INT 0
2195: PPUSH
2196: LD_STRING 
2198: PPUSH
2199: CALL 8541 0 3
2203: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2204: LD_ADDR_EXP 38
2208: PUSH
2209: LD_STRING Titov
2211: PPUSH
2212: LD_INT 0
2214: PPUSH
2215: LD_STRING 
2217: PPUSH
2218: CALL 8541 0 3
2222: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrovova , false ,  ) ;
2223: LD_ADDR_EXP 35
2227: PUSH
2228: LD_STRING Petrovova
2230: PPUSH
2231: LD_INT 0
2233: PPUSH
2234: LD_STRING 
2236: PPUSH
2237: CALL 8541 0 3
2241: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2242: LD_ADDR_EXP 36
2246: PUSH
2247: LD_STRING Lipshchin
2249: PPUSH
2250: LD_INT 0
2252: PPUSH
2253: LD_STRING 
2255: PPUSH
2256: CALL 8541 0 3
2260: ST_TO_ADDR
// Gleb := PrepareUnit ( Gleb , false ,  ) ;
2261: LD_ADDR_EXP 37
2265: PUSH
2266: LD_STRING Gleb
2268: PPUSH
2269: LD_INT 0
2271: PPUSH
2272: LD_STRING 
2274: PPUSH
2275: CALL 8541 0 3
2279: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , false ,  ) ;
2280: LD_ADDR_EXP 34
2284: PUSH
2285: LD_STRING Karamazov
2287: PPUSH
2288: LD_INT 0
2290: PPUSH
2291: LD_STRING 
2293: PPUSH
2294: CALL 8541 0 3
2298: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , false ,  ) ;
2299: LD_ADDR_EXP 39
2303: PUSH
2304: LD_STRING Petrosyan
2306: PPUSH
2307: LD_INT 0
2309: PPUSH
2310: LD_STRING 
2312: PPUSH
2313: CALL 8541 0 3
2317: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , false ,  ) ;
2318: LD_ADDR_EXP 40
2322: PUSH
2323: LD_STRING Dolgov
2325: PPUSH
2326: LD_INT 0
2328: PPUSH
2329: LD_STRING 
2331: PPUSH
2332: CALL 8541 0 3
2336: ST_TO_ADDR
// vc_chassis = 22 ;
2337: LD_ADDR_OWVAR 37
2341: PUSH
2342: LD_INT 22
2344: ST_TO_ADDR
// vc_control = 1 ;
2345: LD_ADDR_OWVAR 38
2349: PUSH
2350: LD_INT 1
2352: ST_TO_ADDR
// vc_engine = 1 ;
2353: LD_ADDR_OWVAR 39
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
// vc_fuel_battery = rand ( 15 , 30 ) ;
2361: LD_ADDR_OWVAR 41
2365: PUSH
2366: LD_INT 15
2368: PPUSH
2369: LD_INT 30
2371: PPUSH
2372: CALL_OW 12
2376: ST_TO_ADDR
// vc_weapon = rand ( 42 , 44 ) ;
2377: LD_ADDR_OWVAR 40
2381: PUSH
2382: LD_INT 42
2384: PPUSH
2385: LD_INT 44
2387: PPUSH
2388: CALL_OW 12
2392: ST_TO_ADDR
// BurlakCrewVeh1 = CreateVehicle ;
2393: LD_ADDR_EXP 43
2397: PUSH
2398: CALL_OW 45
2402: ST_TO_ADDR
// BurlakCrewVeh2 = CreateVehicle ;
2403: LD_ADDR_EXP 44
2407: PUSH
2408: CALL_OW 45
2412: ST_TO_ADDR
// BurlakCrewVeh3 = CreateVehicle ;
2413: LD_ADDR_EXP 45
2417: PUSH
2418: CALL_OW 45
2422: ST_TO_ADDR
// BurlakCrewVeh4 = CreateVehicle ;
2423: LD_ADDR_EXP 46
2427: PUSH
2428: CALL_OW 45
2432: ST_TO_ADDR
// BurlakCrewVeh5 = CreateVehicle ;
2433: LD_ADDR_EXP 47
2437: PUSH
2438: CALL_OW 45
2442: ST_TO_ADDR
// BurlakCrewVeh6 = CreateVehicle ;
2443: LD_ADDR_EXP 48
2447: PUSH
2448: CALL_OW 45
2452: ST_TO_ADDR
// PlaceUnitArea ( BurlakCrewVeh1 , BurlakArea , false ) ;
2453: LD_EXP 43
2457: PPUSH
2458: LD_INT 2
2460: PPUSH
2461: LD_INT 0
2463: PPUSH
2464: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh2 , BurlakArea , false ) ;
2468: LD_EXP 44
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: LD_INT 0
2478: PPUSH
2479: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh3 , BurlakArea , false ) ;
2483: LD_EXP 45
2487: PPUSH
2488: LD_INT 2
2490: PPUSH
2491: LD_INT 0
2493: PPUSH
2494: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh4 , BurlakArea , false ) ;
2498: LD_EXP 46
2502: PPUSH
2503: LD_INT 2
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh5 , BurlakArea , false ) ;
2513: LD_EXP 47
2517: PPUSH
2518: LD_INT 2
2520: PPUSH
2521: LD_INT 0
2523: PPUSH
2524: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh6 , BurlakArea , false ) ;
2528: LD_EXP 48
2532: PPUSH
2533: LD_INT 2
2535: PPUSH
2536: LD_INT 0
2538: PPUSH
2539: CALL_OW 49
// PlaceHumanInUnit ( Titov , BurlakCrewVeh1 ) ;
2543: LD_EXP 38
2547: PPUSH
2548: LD_EXP 43
2552: PPUSH
2553: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , BurlakCrewVeh2 ) ;
2557: LD_EXP 35
2561: PPUSH
2562: LD_EXP 44
2566: PPUSH
2567: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , BurlakCrewVeh3 ) ;
2571: LD_EXP 36
2575: PPUSH
2576: LD_EXP 45
2580: PPUSH
2581: CALL_OW 52
// PlaceHumanInUnit ( Gleb , BurlakCrewVeh4 ) ;
2585: LD_EXP 37
2589: PPUSH
2590: LD_EXP 46
2594: PPUSH
2595: CALL_OW 52
// PlaceHumanInUnit ( Dolgov , BurlakCrewVeh5 ) ;
2599: LD_EXP 40
2603: PPUSH
2604: LD_EXP 47
2608: PPUSH
2609: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , BurlakCrewVeh6 ) ;
2613: LD_EXP 39
2617: PPUSH
2618: LD_EXP 48
2622: PPUSH
2623: CALL_OW 52
// vc_chassis = 24 ;
2627: LD_ADDR_OWVAR 37
2631: PUSH
2632: LD_INT 24
2634: ST_TO_ADDR
// vc_weapon = 89 ;
2635: LD_ADDR_OWVAR 40
2639: PUSH
2640: LD_INT 89
2642: ST_TO_ADDR
// KaramazovVeh = CreateVehicle ;
2643: LD_ADDR_EXP 42
2647: PUSH
2648: CALL_OW 45
2652: ST_TO_ADDR
// AddCargo ( KaramazovVeh , mat_cans , 200 ) ;
2653: LD_EXP 42
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 200
2663: PPUSH
2664: CALL_OW 291
// PlaceUnitArea ( KaramazovVeh , BurlakArea , false ) ;
2668: LD_EXP 42
2672: PPUSH
2673: LD_INT 2
2675: PPUSH
2676: LD_INT 0
2678: PPUSH
2679: CALL_OW 49
// PlaceHumanInUnit ( Karamazov , KaramazovVeh ) ;
2683: LD_EXP 34
2687: PPUSH
2688: LD_EXP 42
2692: PPUSH
2693: CALL_OW 52
// Uc_Nation = 2 ;
2697: LD_ADDR_OWVAR 21
2701: PUSH
2702: LD_INT 2
2704: ST_TO_ADDR
// vc_chassis = 14 ;
2705: LD_ADDR_OWVAR 37
2709: PUSH
2710: LD_INT 14
2712: ST_TO_ADDR
// vc_weapon = 26 ;
2713: LD_ADDR_OWVAR 40
2717: PUSH
2718: LD_INT 26
2720: ST_TO_ADDR
// BurlakVeh = CreateVehicle ;
2721: LD_ADDR_EXP 41
2725: PUSH
2726: CALL_OW 45
2730: ST_TO_ADDR
// PlaceUnitArea ( BurlakVeh , BurlakArea , false ) ;
2731: LD_EXP 41
2735: PPUSH
2736: LD_INT 2
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
2746: LD_EXP 33
2750: PPUSH
2751: LD_EXP 41
2755: PPUSH
2756: CALL_OW 52
// end ; end_of_file
2760: LD_VAR 0 1
2764: RET
// export function InitSikorskiTeam ; var i , j ; begin
2765: LD_INT 0
2767: PPUSH
2768: PPUSH
2769: PPUSH
// SikorskiTeam := SikorskiTeam ^ Sikorski ^ Gary ^ Bobby ^ Cyrus ^ Walker ^ Lynch ^ Turner ^ Jilian ^ McCreery ;
2770: LD_ADDR_EXP 4
2774: PUSH
2775: LD_EXP 4
2779: PUSH
2780: LD_EXP 49
2784: ADD
2785: PUSH
2786: LD_EXP 54
2790: ADD
2791: PUSH
2792: LD_EXP 52
2796: ADD
2797: PUSH
2798: LD_EXP 53
2802: ADD
2803: PUSH
2804: LD_EXP 57
2808: ADD
2809: PUSH
2810: LD_EXP 55
2814: ADD
2815: PUSH
2816: LD_EXP 59
2820: ADD
2821: PUSH
2822: LD_EXP 58
2826: ADD
2827: PUSH
2828: LD_EXP 56
2832: ADD
2833: ST_TO_ADDR
// Uc_side := 4 ;
2834: LD_ADDR_OWVAR 20
2838: PUSH
2839: LD_INT 4
2841: ST_TO_ADDR
// Uc_Nation := 1 ;
2842: LD_ADDR_OWVAR 21
2846: PUSH
2847: LD_INT 1
2849: ST_TO_ADDR
// Hc_Name := Jeremy Sikorski ;
2850: LD_ADDR_OWVAR 26
2854: PUSH
2855: LD_STRING Jeremy Sikorski
2857: ST_TO_ADDR
// Hc_Class := 1 ;
2858: LD_ADDR_OWVAR 28
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// Hc_Sex := 1 ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// Hc_Basic_Skills := [ 0 , 0 , 0 , 0 ] ;
2874: LD_ADDR_OWVAR 30
2878: PUSH
2879: LD_INT 0
2881: PUSH
2882: LD_INT 0
2884: PUSH
2885: LD_INT 0
2887: PUSH
2888: LD_INT 0
2890: PUSH
2891: EMPTY
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: ST_TO_ADDR
// Hc_Skills := [ 6 , 3 , 4 , 1 ] ;
2897: LD_ADDR_OWVAR 31
2901: PUSH
2902: LD_INT 6
2904: PUSH
2905: LD_INT 3
2907: PUSH
2908: LD_INT 4
2910: PUSH
2911: LD_INT 1
2913: PUSH
2914: EMPTY
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: ST_TO_ADDR
// Hc_Gallery := us ;
2920: LD_ADDR_OWVAR 33
2924: PUSH
2925: LD_STRING us
2927: ST_TO_ADDR
// Hc_Face_Number := 19 ;
2928: LD_ADDR_OWVAR 34
2932: PUSH
2933: LD_INT 19
2935: ST_TO_ADDR
// Sikorski := CreateHuman ;
2936: LD_ADDR_EXP 49
2940: PUSH
2941: CALL_OW 44
2945: ST_TO_ADDR
// SikorskiMeat := CreateHuman ;
2946: LD_ADDR_EXP 50
2950: PUSH
2951: CALL_OW 44
2955: ST_TO_ADDR
// Hc_Name := Kpt. Jack Truman ;
2956: LD_ADDR_OWVAR 26
2960: PUSH
2961: LD_STRING Kpt. Jack Truman
2963: ST_TO_ADDR
// Hc_Skills := [ 8 , 5 , 3 , 1 ] ;
2964: LD_ADDR_OWVAR 31
2968: PUSH
2969: LD_INT 8
2971: PUSH
2972: LD_INT 5
2974: PUSH
2975: LD_INT 3
2977: PUSH
2978: LD_INT 1
2980: PUSH
2981: EMPTY
2982: LIST
2983: LIST
2984: LIST
2985: LIST
2986: ST_TO_ADDR
// Hc_Face_Number := 26 ;
2987: LD_ADDR_OWVAR 34
2991: PUSH
2992: LD_INT 26
2994: ST_TO_ADDR
// Truman := CreateHuman ;
2995: LD_ADDR_EXP 51
2999: PUSH
3000: CALL_OW 44
3004: ST_TO_ADDR
// Hc_Name := Cyrus Parker ;
3005: LD_ADDR_OWVAR 26
3009: PUSH
3010: LD_STRING Cyrus Parker
3012: ST_TO_ADDR
// Hc_Skills := [ 6 , 3 , 2 , 2 ] ;
3013: LD_ADDR_OWVAR 31
3017: PUSH
3018: LD_INT 6
3020: PUSH
3021: LD_INT 3
3023: PUSH
3024: LD_INT 2
3026: PUSH
3027: LD_INT 2
3029: PUSH
3030: EMPTY
3031: LIST
3032: LIST
3033: LIST
3034: LIST
3035: ST_TO_ADDR
// Hc_Face_Number := 8 ;
3036: LD_ADDR_OWVAR 34
3040: PUSH
3041: LD_INT 8
3043: ST_TO_ADDR
// Cyrus := CreateHuman ;
3044: LD_ADDR_EXP 53
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// Hc_Name := Bobby Brandon ;
3054: LD_ADDR_OWVAR 26
3058: PUSH
3059: LD_STRING Bobby Brandon
3061: ST_TO_ADDR
// Hc_Skills := [ 3 , 5 , 8 , 3 ] ;
3062: LD_ADDR_OWVAR 31
3066: PUSH
3067: LD_INT 3
3069: PUSH
3070: LD_INT 5
3072: PUSH
3073: LD_INT 8
3075: PUSH
3076: LD_INT 3
3078: PUSH
3079: EMPTY
3080: LIST
3081: LIST
3082: LIST
3083: LIST
3084: ST_TO_ADDR
// Hc_Face_Number := 9 ;
3085: LD_ADDR_OWVAR 34
3089: PUSH
3090: LD_INT 9
3092: ST_TO_ADDR
// Bobby := CreateHuman ;
3093: LD_ADDR_EXP 52
3097: PUSH
3098: CALL_OW 44
3102: ST_TO_ADDR
// Hc_Name := Gary Grant ;
3103: LD_ADDR_OWVAR 26
3107: PUSH
3108: LD_STRING Gary Grant
3110: ST_TO_ADDR
// Hc_Skills := [ 7 , 3 , 1 , 1 ] ;
3111: LD_ADDR_OWVAR 31
3115: PUSH
3116: LD_INT 7
3118: PUSH
3119: LD_INT 3
3121: PUSH
3122: LD_INT 1
3124: PUSH
3125: LD_INT 1
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: ST_TO_ADDR
// Hc_Face_Number := 20 ;
3134: LD_ADDR_OWVAR 34
3138: PUSH
3139: LD_INT 20
3141: ST_TO_ADDR
// Gary := CreateHuman ;
3142: LD_ADDR_EXP 54
3146: PUSH
3147: CALL_OW 44
3151: ST_TO_ADDR
// Hc_Name := Gary Grant ;
3152: LD_ADDR_OWVAR 26
3156: PUSH
3157: LD_STRING Gary Grant
3159: ST_TO_ADDR
// Hc_Skills := [ 7 , 3 , 1 , 1 ] ;
3160: LD_ADDR_OWVAR 31
3164: PUSH
3165: LD_INT 7
3167: PUSH
3168: LD_INT 3
3170: PUSH
3171: LD_INT 1
3173: PUSH
3174: LD_INT 1
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: LIST
3181: LIST
3182: ST_TO_ADDR
// Hc_Face_Number := 20 ;
3183: LD_ADDR_OWVAR 34
3187: PUSH
3188: LD_INT 20
3190: ST_TO_ADDR
// Gary := CreateHuman ;
3191: LD_ADDR_EXP 54
3195: PUSH
3196: CALL_OW 44
3200: ST_TO_ADDR
// Hc_Name := Henry Lynch ;
3201: LD_ADDR_OWVAR 26
3205: PUSH
3206: LD_STRING Henry Lynch
3208: ST_TO_ADDR
// Hc_Skills := [ 6 , 2 , 2 , 3 ] ;
3209: LD_ADDR_OWVAR 31
3213: PUSH
3214: LD_INT 6
3216: PUSH
3217: LD_INT 2
3219: PUSH
3220: LD_INT 2
3222: PUSH
3223: LD_INT 3
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: ST_TO_ADDR
// Hc_Gallery := SecondCharsGal ;
3232: LD_ADDR_OWVAR 33
3236: PUSH
3237: LD_STRING SecondCharsGal
3239: ST_TO_ADDR
// Hc_Face_Number := 49 ;
3240: LD_ADDR_OWVAR 34
3244: PUSH
3245: LD_INT 49
3247: ST_TO_ADDR
// Lynch := CreateHuman ;
3248: LD_ADDR_EXP 55
3252: PUSH
3253: CALL_OW 44
3257: ST_TO_ADDR
// Hc_Name := Mike Turner ;
3258: LD_ADDR_OWVAR 26
3262: PUSH
3263: LD_STRING Mike Turner
3265: ST_TO_ADDR
// Hc_Skills := [ 3 , 6 , 3 , 2 ] ;
3266: LD_ADDR_OWVAR 31
3270: PUSH
3271: LD_INT 3
3273: PUSH
3274: LD_INT 6
3276: PUSH
3277: LD_INT 3
3279: PUSH
3280: LD_INT 2
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: ST_TO_ADDR
// Hc_Face_Number := 62 ;
3289: LD_ADDR_OWVAR 34
3293: PUSH
3294: LD_INT 62
3296: ST_TO_ADDR
// Turner := CreateHuman ;
3297: LD_ADDR_EXP 59
3301: PUSH
3302: CALL_OW 44
3306: ST_TO_ADDR
// Hc_Name := Hallie Jilian ;
3307: LD_ADDR_OWVAR 26
3311: PUSH
3312: LD_STRING Hallie Jilian
3314: ST_TO_ADDR
// Hc_Skills := [ 2 , 5 , 2 , 2 ] ;
3315: LD_ADDR_OWVAR 31
3319: PUSH
3320: LD_INT 2
3322: PUSH
3323: LD_INT 5
3325: PUSH
3326: LD_INT 2
3328: PUSH
3329: LD_INT 2
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: LIST
3337: ST_TO_ADDR
// Hc_Sex := 2 ;
3338: LD_ADDR_OWVAR 27
3342: PUSH
3343: LD_INT 2
3345: ST_TO_ADDR
// Hc_Face_Number := 39 ;
3346: LD_ADDR_OWVAR 34
3350: PUSH
3351: LD_INT 39
3353: ST_TO_ADDR
// Jilian := CreateHuman ;
3354: LD_ADDR_EXP 58
3358: PUSH
3359: CALL_OW 44
3363: ST_TO_ADDR
// Hc_Name := Michael Walker ;
3364: LD_ADDR_OWVAR 26
3368: PUSH
3369: LD_STRING Michael Walker
3371: ST_TO_ADDR
// Hc_Skills := [ 2 , 2 , 3 , 5 ] ;
3372: LD_ADDR_OWVAR 31
3376: PUSH
3377: LD_INT 2
3379: PUSH
3380: LD_INT 2
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: LD_INT 5
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: ST_TO_ADDR
// Hc_Sex := 1 ;
3395: LD_ADDR_OWVAR 27
3399: PUSH
3400: LD_INT 1
3402: ST_TO_ADDR
// Hc_Class := 4 ;
3403: LD_ADDR_OWVAR 28
3407: PUSH
3408: LD_INT 4
3410: ST_TO_ADDR
// Hc_Face_Number := 48 ;
3411: LD_ADDR_OWVAR 34
3415: PUSH
3416: LD_INT 48
3418: ST_TO_ADDR
// Walker := CreateHuman ;
3419: LD_ADDR_EXP 57
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// Hc_Name := Peter McCreery ;
3429: LD_ADDR_OWVAR 26
3433: PUSH
3434: LD_STRING Peter McCreery
3436: ST_TO_ADDR
// Hc_Skills := [ 1 , 0 , 3 , 6 ] ;
3437: LD_ADDR_OWVAR 31
3441: PUSH
3442: LD_INT 1
3444: PUSH
3445: LD_INT 0
3447: PUSH
3448: LD_INT 3
3450: PUSH
3451: LD_INT 6
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: ST_TO_ADDR
// Hc_Face_Number := 58 ;
3460: LD_ADDR_OWVAR 34
3464: PUSH
3465: LD_INT 58
3467: ST_TO_ADDR
// McCreery := CreateHuman ;
3468: LD_ADDR_EXP 56
3472: PUSH
3473: CALL_OW 44
3477: ST_TO_ADDR
// SikorskiTeam := SikorskiTeam ^ Sikorski ^ Gary ^ Bobby ^ Cyrus ^ Walker ^ Lynch ^ Turner ^ Jilian ^ McCreery ;
3478: LD_ADDR_EXP 4
3482: PUSH
3483: LD_EXP 4
3487: PUSH
3488: LD_EXP 49
3492: ADD
3493: PUSH
3494: LD_EXP 54
3498: ADD
3499: PUSH
3500: LD_EXP 52
3504: ADD
3505: PUSH
3506: LD_EXP 53
3510: ADD
3511: PUSH
3512: LD_EXP 57
3516: ADD
3517: PUSH
3518: LD_EXP 55
3522: ADD
3523: PUSH
3524: LD_EXP 59
3528: ADD
3529: PUSH
3530: LD_EXP 58
3534: ADD
3535: PUSH
3536: LD_EXP 56
3540: ADD
3541: ST_TO_ADDR
// PlaceUnitArea ( Sikorski , SikorskiArea , false ) ;
3542: LD_EXP 49
3546: PPUSH
3547: LD_INT 9
3549: PPUSH
3550: LD_INT 0
3552: PPUSH
3553: CALL_OW 49
// PlaceUnitArea ( Cyrus , SikorskiArea , false ) ;
3557: LD_EXP 53
3561: PPUSH
3562: LD_INT 9
3564: PPUSH
3565: LD_INT 0
3567: PPUSH
3568: CALL_OW 49
// PlaceUnitArea ( Bobby , SikorskiArea , false ) ;
3572: LD_EXP 52
3576: PPUSH
3577: LD_INT 9
3579: PPUSH
3580: LD_INT 0
3582: PPUSH
3583: CALL_OW 49
// PlaceUnitArea ( Gary , SikorskiArea , false ) ;
3587: LD_EXP 54
3591: PPUSH
3592: LD_INT 9
3594: PPUSH
3595: LD_INT 0
3597: PPUSH
3598: CALL_OW 49
// PlaceUnitArea ( Lynch , SikorskiArea , false ) ;
3602: LD_EXP 55
3606: PPUSH
3607: LD_INT 9
3609: PPUSH
3610: LD_INT 0
3612: PPUSH
3613: CALL_OW 49
// PlaceUnitArea ( Turner , SikorskiArea , false ) ;
3617: LD_EXP 59
3621: PPUSH
3622: LD_INT 9
3624: PPUSH
3625: LD_INT 0
3627: PPUSH
3628: CALL_OW 49
// PlaceUnitArea ( Jilian , SikorskiArea , false ) ;
3632: LD_EXP 58
3636: PPUSH
3637: LD_INT 9
3639: PPUSH
3640: LD_INT 0
3642: PPUSH
3643: CALL_OW 49
// PlaceUnitArea ( Walker , SikorskiArea , false ) ;
3647: LD_EXP 57
3651: PPUSH
3652: LD_INT 9
3654: PPUSH
3655: LD_INT 0
3657: PPUSH
3658: CALL_OW 49
// PlaceUnitArea ( McCreery , SikorskiArea , false ) ;
3662: LD_EXP 56
3666: PPUSH
3667: LD_INT 9
3669: PPUSH
3670: LD_INT 0
3672: PPUSH
3673: CALL_OW 49
// end ;
3677: LD_VAR 0 1
3681: RET
// every 0 0$1 trigger start_ended = true do
3682: LD_EXP 69
3686: PUSH
3687: LD_INT 1
3689: EQUAL
3690: IFFALSE 3720
3692: GO 3694
3694: DISABLE
// begin AddResourceType ( GetBase ( Ovsyenko ) , mat_cans , 70 ) ;
3695: LD_INT 74
3697: PPUSH
3698: CALL_OW 274
3702: PPUSH
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 70
3708: PPUSH
3709: CALL_OW 276
// ComUpgrade ( Ovsyenko ) ;
3713: LD_INT 74
3715: PPUSH
3716: CALL_OW 146
// end ;
3720: END
// export function InitTerminal ; var i , y , turrety , lab , zbrojka ; begin
3721: LD_INT 0
3723: PPUSH
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
3728: PPUSH
// Hc_Gallery :=  ;
3729: LD_ADDR_OWVAR 33
3733: PUSH
3734: LD_STRING 
3736: ST_TO_ADDR
// Hc_Name :=  ;
3737: LD_ADDR_OWVAR 26
3741: PUSH
3742: LD_STRING 
3744: ST_TO_ADDR
// MainTerminalCrew := [ ] ;
3745: LD_ADDR_EXP 6
3749: PUSH
3750: EMPTY
3751: ST_TO_ADDR
// uc_side := 1 ;
3752: LD_ADDR_OWVAR 20
3756: PUSH
3757: LD_INT 1
3759: ST_TO_ADDR
// uc_nation := 1 ;
3760: LD_ADDR_OWVAR 21
3764: PUSH
3765: LD_INT 1
3767: ST_TO_ADDR
// PrepareSoldier ( rand ( 0 , 1 ) , 10 ) ;
3768: LD_INT 0
3770: PPUSH
3771: LD_INT 1
3773: PPUSH
3774: CALL_OW 12
3778: PPUSH
3779: LD_INT 10
3781: PPUSH
3782: CALL_OW 381
// NorthSold := CreateHuman ;
3786: LD_ADDR_EXP 61
3790: PUSH
3791: CALL_OW 44
3795: ST_TO_ADDR
// PlaceHumanInUnit ( NorthSold , AmB4 ) ;
3796: LD_EXP 61
3800: PPUSH
3801: LD_INT 104
3803: PPUSH
3804: CALL_OW 52
// for i = 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
3808: LD_ADDR_VAR 0 2
3812: PUSH
3813: DOUBLE
3814: LD_INT 1
3816: DEC
3817: ST_TO_ADDR
3818: LD_INT 8
3820: PUSH
3821: LD_INT 9
3823: PUSH
3824: LD_INT 10
3826: PUSH
3827: EMPTY
3828: LIST
3829: LIST
3830: LIST
3831: PUSH
3832: LD_OWVAR 67
3836: ARRAY
3837: PUSH
3838: FOR_TO
3839: IFFALSE 3894
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
3841: LD_INT 0
3843: PPUSH
3844: LD_INT 1
3846: PPUSH
3847: CALL_OW 12
3851: PPUSH
3852: LD_INT 2
3854: PUSH
3855: LD_INT 3
3857: PUSH
3858: LD_INT 6
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: LD_OWVAR 67
3870: ARRAY
3871: PPUSH
3872: CALL_OW 381
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
3876: LD_ADDR_EXP 6
3880: PUSH
3881: LD_EXP 6
3885: PUSH
3886: CALL_OW 44
3890: ADD
3891: ST_TO_ADDR
// end ;
3892: GO 3838
3894: POP
3895: POP
// for i = 1 to 1 do
3896: LD_ADDR_VAR 0 2
3900: PUSH
3901: DOUBLE
3902: LD_INT 1
3904: DEC
3905: ST_TO_ADDR
3906: LD_INT 1
3908: PUSH
3909: FOR_TO
3910: IFFALSE 3965
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
3912: LD_INT 0
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 12
3922: PPUSH
3923: LD_INT 2
3925: PUSH
3926: LD_INT 3
3928: PUSH
3929: LD_INT 6
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: LIST
3936: PUSH
3937: LD_OWVAR 67
3941: ARRAY
3942: PPUSH
3943: CALL_OW 382
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
3947: LD_ADDR_EXP 6
3951: PUSH
3952: LD_EXP 6
3956: PUSH
3957: CALL_OW 44
3961: ADD
3962: ST_TO_ADDR
// end ;
3963: GO 3909
3965: POP
3966: POP
// for i = 1 to 2 do
3967: LD_ADDR_VAR 0 2
3971: PUSH
3972: DOUBLE
3973: LD_INT 1
3975: DEC
3976: ST_TO_ADDR
3977: LD_INT 2
3979: PUSH
3980: FOR_TO
3981: IFFALSE 4036
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
3983: LD_INT 0
3985: PPUSH
3986: LD_INT 1
3988: PPUSH
3989: CALL_OW 12
3993: PPUSH
3994: LD_INT 2
3996: PUSH
3997: LD_INT 3
3999: PUSH
4000: LD_INT 6
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: LIST
4007: PUSH
4008: LD_OWVAR 67
4012: ARRAY
4013: PPUSH
4014: CALL_OW 384
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
4018: LD_ADDR_EXP 6
4022: PUSH
4023: LD_EXP 6
4027: PUSH
4028: CALL_OW 44
4032: ADD
4033: ST_TO_ADDR
// end ;
4034: GO 3980
4036: POP
4037: POP
// turrety := FilterUnitsInArea ( MainTerminalArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
4038: LD_ADDR_VAR 0 4
4042: PUSH
4043: LD_INT 16
4045: PPUSH
4046: LD_INT 2
4048: PUSH
4049: LD_INT 30
4051: PUSH
4052: LD_INT 31
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: LD_INT 30
4061: PUSH
4062: LD_INT 32
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: LIST
4073: PPUSH
4074: CALL_OW 70
4078: ST_TO_ADDR
// lab := FilterUnitsInArea ( MainTerminalArea , [ [ f_btype , b_lab_full ] ] ) ;
4079: LD_ADDR_VAR 0 5
4083: PUSH
4084: LD_INT 16
4086: PPUSH
4087: LD_INT 30
4089: PUSH
4090: LD_INT 8
4092: PUSH
4093: EMPTY
4094: LIST
4095: LIST
4096: PUSH
4097: EMPTY
4098: LIST
4099: PPUSH
4100: CALL_OW 70
4104: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( MainTerminalArea , [ [ f_btype , b_barracks ] ] ) ;
4105: LD_ADDR_VAR 0 6
4109: PUSH
4110: LD_INT 16
4112: PPUSH
4113: LD_INT 30
4115: PUSH
4116: LD_INT 5
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PUSH
4123: EMPTY
4124: LIST
4125: PPUSH
4126: CALL_OW 70
4130: ST_TO_ADDR
// y := 1 ;
4131: LD_ADDR_VAR 0 3
4135: PUSH
4136: LD_INT 1
4138: ST_TO_ADDR
// for i in MainTerminalCrew do
4139: LD_ADDR_VAR 0 2
4143: PUSH
4144: LD_EXP 6
4148: PUSH
4149: FOR_IN
4150: IFFALSE 4307
// begin PlaceUnitArea ( i , TerminalPersonel , false ) ;
4152: LD_VAR 0 2
4156: PPUSH
4157: LD_INT 15
4159: PPUSH
4160: LD_INT 0
4162: PPUSH
4163: CALL_OW 49
// case GetClass ( i ) of 1 :
4167: LD_VAR 0 2
4171: PPUSH
4172: CALL_OW 257
4176: PUSH
4177: LD_INT 1
4179: DOUBLE
4180: EQUAL
4181: IFTRUE 4185
4183: GO 4252
4185: POP
// begin if y > 7 then
4186: LD_VAR 0 3
4190: PUSH
4191: LD_INT 7
4193: GREATER
4194: IFFALSE 4216
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
4196: LD_VAR 0 2
4200: PPUSH
4201: LD_VAR 0 6
4205: PUSH
4206: LD_INT 1
4208: ARRAY
4209: PPUSH
4210: CALL_OW 120
4214: GO 4236
// ComEnterUnit ( i , turrety [ y ] ) ;
4216: LD_VAR 0 2
4220: PPUSH
4221: LD_VAR 0 4
4225: PUSH
4226: LD_VAR 0 3
4230: ARRAY
4231: PPUSH
4232: CALL_OW 120
// y = y + 1 ;
4236: LD_ADDR_VAR 0 3
4240: PUSH
4241: LD_VAR 0 3
4245: PUSH
4246: LD_INT 1
4248: PLUS
4249: ST_TO_ADDR
// end ; 2 :
4250: GO 4305
4252: LD_INT 2
4254: DOUBLE
4255: EQUAL
4256: IFTRUE 4260
4258: GO 4275
4260: POP
// ComEnterUnit ( i , MainTerminal ) ; 4 :
4261: LD_VAR 0 2
4265: PPUSH
4266: LD_INT 257
4268: PPUSH
4269: CALL_OW 120
4273: GO 4305
4275: LD_INT 4
4277: DOUBLE
4278: EQUAL
4279: IFTRUE 4283
4281: GO 4304
4283: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
4284: LD_VAR 0 2
4288: PPUSH
4289: LD_VAR 0 5
4293: PUSH
4294: LD_INT 1
4296: ARRAY
4297: PPUSH
4298: CALL_OW 120
4302: GO 4305
4304: POP
// end ;
4305: GO 4149
4307: POP
4308: POP
// end ;
4309: LD_VAR 0 1
4313: RET
// export function InitAmerican ; var i , z , y , turrety , fabryka , Wieza , lab , zbrojka ; begin
4314: LD_INT 0
4316: PPUSH
4317: PPUSH
4318: PPUSH
4319: PPUSH
4320: PPUSH
4321: PPUSH
4322: PPUSH
4323: PPUSH
4324: PPUSH
// Hc_Gallery :=  ;
4325: LD_ADDR_OWVAR 33
4329: PUSH
4330: LD_STRING 
4332: ST_TO_ADDR
// Hc_Name :=  ;
4333: LD_ADDR_OWVAR 26
4337: PUSH
4338: LD_STRING 
4340: ST_TO_ADDR
// WestTerminalCrew := [ ] ;
4341: LD_ADDR_EXP 5
4345: PUSH
4346: EMPTY
4347: ST_TO_ADDR
// uc_side := 1 ;
4348: LD_ADDR_OWVAR 20
4352: PUSH
4353: LD_INT 1
4355: ST_TO_ADDR
// uc_nation := 1 ;
4356: LD_ADDR_OWVAR 21
4360: PUSH
4361: LD_INT 1
4363: ST_TO_ADDR
// for i = 1 to [ 10 , 11 , 12 ] [ Difficulty ] do
4364: LD_ADDR_VAR 0 2
4368: PUSH
4369: DOUBLE
4370: LD_INT 1
4372: DEC
4373: ST_TO_ADDR
4374: LD_INT 10
4376: PUSH
4377: LD_INT 11
4379: PUSH
4380: LD_INT 12
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: LIST
4387: PUSH
4388: LD_OWVAR 67
4392: ARRAY
4393: PUSH
4394: FOR_TO
4395: IFFALSE 4450
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4397: LD_INT 0
4399: PPUSH
4400: LD_INT 1
4402: PPUSH
4403: CALL_OW 12
4407: PPUSH
4408: LD_INT 2
4410: PUSH
4411: LD_INT 3
4413: PUSH
4414: LD_INT 6
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: PUSH
4422: LD_OWVAR 67
4426: ARRAY
4427: PPUSH
4428: CALL_OW 381
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4432: LD_ADDR_EXP 5
4436: PUSH
4437: LD_EXP 5
4441: PUSH
4442: CALL_OW 44
4446: ADD
4447: ST_TO_ADDR
// end ;
4448: GO 4394
4450: POP
4451: POP
// for i = 1 to 2 do
4452: LD_ADDR_VAR 0 2
4456: PUSH
4457: DOUBLE
4458: LD_INT 1
4460: DEC
4461: ST_TO_ADDR
4462: LD_INT 2
4464: PUSH
4465: FOR_TO
4466: IFFALSE 4521
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4468: LD_INT 0
4470: PPUSH
4471: LD_INT 1
4473: PPUSH
4474: CALL_OW 12
4478: PPUSH
4479: LD_INT 2
4481: PUSH
4482: LD_INT 3
4484: PUSH
4485: LD_INT 6
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: LIST
4492: PUSH
4493: LD_OWVAR 67
4497: ARRAY
4498: PPUSH
4499: CALL_OW 382
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4503: LD_ADDR_EXP 5
4507: PUSH
4508: LD_EXP 5
4512: PUSH
4513: CALL_OW 44
4517: ADD
4518: ST_TO_ADDR
// end ;
4519: GO 4465
4521: POP
4522: POP
// for i = 1 to 6 do
4523: LD_ADDR_VAR 0 2
4527: PUSH
4528: DOUBLE
4529: LD_INT 1
4531: DEC
4532: ST_TO_ADDR
4533: LD_INT 6
4535: PUSH
4536: FOR_TO
4537: IFFALSE 4592
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4539: LD_INT 0
4541: PPUSH
4542: LD_INT 1
4544: PPUSH
4545: CALL_OW 12
4549: PPUSH
4550: LD_INT 2
4552: PUSH
4553: LD_INT 3
4555: PUSH
4556: LD_INT 6
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: PUSH
4564: LD_OWVAR 67
4568: ARRAY
4569: PPUSH
4570: CALL_OW 383
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4574: LD_ADDR_EXP 5
4578: PUSH
4579: LD_EXP 5
4583: PUSH
4584: CALL_OW 44
4588: ADD
4589: ST_TO_ADDR
// end ;
4590: GO 4536
4592: POP
4593: POP
// for i = 1 to 2 do
4594: LD_ADDR_VAR 0 2
4598: PUSH
4599: DOUBLE
4600: LD_INT 1
4602: DEC
4603: ST_TO_ADDR
4604: LD_INT 2
4606: PUSH
4607: FOR_TO
4608: IFFALSE 4663
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4610: LD_INT 0
4612: PPUSH
4613: LD_INT 1
4615: PPUSH
4616: CALL_OW 12
4620: PPUSH
4621: LD_INT 2
4623: PUSH
4624: LD_INT 3
4626: PUSH
4627: LD_INT 6
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: PUSH
4635: LD_OWVAR 67
4639: ARRAY
4640: PPUSH
4641: CALL_OW 384
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4645: LD_ADDR_EXP 5
4649: PUSH
4650: LD_EXP 5
4654: PUSH
4655: CALL_OW 44
4659: ADD
4660: ST_TO_ADDR
// end ;
4661: GO 4607
4663: POP
4664: POP
// turrety := FilterUnitsInArea ( WestTerminalArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
4665: LD_ADDR_VAR 0 5
4669: PUSH
4670: LD_INT 17
4672: PPUSH
4673: LD_INT 2
4675: PUSH
4676: LD_INT 30
4678: PUSH
4679: LD_INT 31
4681: PUSH
4682: EMPTY
4683: LIST
4684: LIST
4685: PUSH
4686: LD_INT 30
4688: PUSH
4689: LD_INT 32
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: LIST
4700: PPUSH
4701: CALL_OW 70
4705: ST_TO_ADDR
// lab := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_lab_full ] ] ) ;
4706: LD_ADDR_VAR 0 8
4710: PUSH
4711: LD_INT 17
4713: PPUSH
4714: LD_INT 30
4716: PUSH
4717: LD_INT 8
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: EMPTY
4725: LIST
4726: PPUSH
4727: CALL_OW 70
4731: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_factory ] ] ) ;
4732: LD_ADDR_VAR 0 6
4736: PUSH
4737: LD_INT 17
4739: PPUSH
4740: LD_INT 30
4742: PUSH
4743: LD_INT 3
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: EMPTY
4751: LIST
4752: PPUSH
4753: CALL_OW 70
4757: ST_TO_ADDR
// wieza := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_control_tower ] ] ) ;
4758: LD_ADDR_VAR 0 7
4762: PUSH
4763: LD_INT 17
4765: PPUSH
4766: LD_INT 30
4768: PUSH
4769: LD_INT 36
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: PPUSH
4779: CALL_OW 70
4783: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_barracks ] ] ) ;
4784: LD_ADDR_VAR 0 9
4788: PUSH
4789: LD_INT 17
4791: PPUSH
4792: LD_INT 30
4794: PUSH
4795: LD_INT 5
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: PPUSH
4805: CALL_OW 70
4809: ST_TO_ADDR
// y := 1 ;
4810: LD_ADDR_VAR 0 4
4814: PUSH
4815: LD_INT 1
4817: ST_TO_ADDR
// z := 1 ;
4818: LD_ADDR_VAR 0 3
4822: PUSH
4823: LD_INT 1
4825: ST_TO_ADDR
// for i in WestTerminalCrew do
4826: LD_ADDR_VAR 0 2
4830: PUSH
4831: LD_EXP 5
4835: PUSH
4836: FOR_IN
4837: IFFALSE 5067
// begin PlaceUnitArea ( i , TerminalPersonel , false ) ;
4839: LD_VAR 0 2
4843: PPUSH
4844: LD_INT 15
4846: PPUSH
4847: LD_INT 0
4849: PPUSH
4850: CALL_OW 49
// case GetClass ( i ) of 1 :
4854: LD_VAR 0 2
4858: PPUSH
4859: CALL_OW 257
4863: PUSH
4864: LD_INT 1
4866: DOUBLE
4867: EQUAL
4868: IFTRUE 4872
4870: GO 4939
4872: POP
// begin if y > 9 then
4873: LD_VAR 0 4
4877: PUSH
4878: LD_INT 9
4880: GREATER
4881: IFFALSE 4903
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
4883: LD_VAR 0 2
4887: PPUSH
4888: LD_VAR 0 9
4892: PUSH
4893: LD_INT 1
4895: ARRAY
4896: PPUSH
4897: CALL_OW 120
4901: GO 4923
// ComEnterUnit ( i , turrety [ y ] ) ;
4903: LD_VAR 0 2
4907: PPUSH
4908: LD_VAR 0 5
4912: PUSH
4913: LD_VAR 0 4
4917: ARRAY
4918: PPUSH
4919: CALL_OW 120
// y = y + 1 ;
4923: LD_ADDR_VAR 0 4
4927: PUSH
4928: LD_VAR 0 4
4932: PUSH
4933: LD_INT 1
4935: PLUS
4936: ST_TO_ADDR
// end ; 2 :
4937: GO 5065
4939: LD_INT 2
4941: DOUBLE
4942: EQUAL
4943: IFTRUE 4947
4945: GO 4962
4947: POP
// ComEnterUnit ( i , WestTerminal ) ; 3 :
4948: LD_VAR 0 2
4952: PPUSH
4953: LD_INT 123
4955: PPUSH
4956: CALL_OW 120
4960: GO 5065
4962: LD_INT 3
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 4970
4968: GO 5035
4970: POP
// begin if z > 3 then
4971: LD_VAR 0 3
4975: PUSH
4976: LD_INT 3
4978: GREATER
4979: IFFALSE 5001
// ComEnterUnit ( i , fabryka [ 1 ] ) else
4981: LD_VAR 0 2
4985: PPUSH
4986: LD_VAR 0 6
4990: PUSH
4991: LD_INT 1
4993: ARRAY
4994: PPUSH
4995: CALL_OW 120
4999: GO 5019
// ComEnterUnit ( i , wieza [ 1 ] ) ;
5001: LD_VAR 0 2
5005: PPUSH
5006: LD_VAR 0 7
5010: PUSH
5011: LD_INT 1
5013: ARRAY
5014: PPUSH
5015: CALL_OW 120
// z = z + 1 ;
5019: LD_ADDR_VAR 0 3
5023: PUSH
5024: LD_VAR 0 3
5028: PUSH
5029: LD_INT 1
5031: PLUS
5032: ST_TO_ADDR
// end ; 4 :
5033: GO 5065
5035: LD_INT 4
5037: DOUBLE
5038: EQUAL
5039: IFTRUE 5043
5041: GO 5064
5043: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
5044: LD_VAR 0 2
5048: PPUSH
5049: LD_VAR 0 8
5053: PUSH
5054: LD_INT 1
5056: ARRAY
5057: PPUSH
5058: CALL_OW 120
5062: GO 5065
5064: POP
// end ;
5065: GO 4836
5067: POP
5068: POP
// Uc_Side := 1 ;
5069: LD_ADDR_OWVAR 20
5073: PUSH
5074: LD_INT 1
5076: ST_TO_ADDR
// Uc_Nation := 1 ;
5077: LD_ADDR_OWVAR 21
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , false ,  ) ;
5085: LD_ADDR_EXP 60
5089: PUSH
5090: LD_STRING Houten
5092: PPUSH
5093: LD_INT 0
5095: PPUSH
5096: LD_STRING 
5098: PPUSH
5099: CALL 8541 0 3
5103: ST_TO_ADDR
// PlaceHumanInUnit ( Houten , WestTerminal ) ;
5104: LD_EXP 60
5108: PPUSH
5109: LD_INT 123
5111: PPUSH
5112: CALL_OW 52
// end ;
5116: LD_VAR 0 1
5120: RET
// every 10 10$0 trigger start_ended = true do var i ;
5121: LD_EXP 69
5125: PUSH
5126: LD_INT 1
5128: EQUAL
5129: IFFALSE 5218
5131: GO 5133
5133: DISABLE
5134: LD_INT 0
5136: PPUSH
// begin Uc_Nation = 1 ;
5137: LD_ADDR_OWVAR 21
5141: PUSH
5142: LD_INT 1
5144: ST_TO_ADDR
// Uc_Side = 1 ;
5145: LD_ADDR_OWVAR 20
5149: PUSH
5150: LD_INT 1
5152: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5153: LD_ADDR_VAR 0 1
5157: PUSH
5158: DOUBLE
5159: LD_INT 1
5161: DEC
5162: ST_TO_ADDR
5163: LD_INT 4
5165: PUSH
5166: LD_INT 5
5168: PUSH
5169: LD_INT 6
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: LIST
5176: PUSH
5177: LD_OWVAR 67
5181: ARRAY
5182: PUSH
5183: FOR_TO
5184: IFFALSE 5215
// AddComConstruct ( AmFactory , 4 , 1 , 2 , rand ( 4 , 6 ) ) ;
5186: LD_INT 239
5188: PPUSH
5189: LD_INT 4
5191: PPUSH
5192: LD_INT 1
5194: PPUSH
5195: LD_INT 2
5197: PPUSH
5198: LD_INT 4
5200: PPUSH
5201: LD_INT 6
5203: PPUSH
5204: CALL_OW 12
5208: PPUSH
5209: CALL_OW 185
5213: GO 5183
5215: POP
5216: POP
// enable ;
5217: ENABLE
// end ;
5218: PPOPN 1
5220: END
// every 0 0$1 trigger attackers >= [ 4 , 5 , 6 ] [ Difficulty ] do var enemy , attacker ;
5221: LD_EXP 8
5225: PUSH
5226: LD_INT 4
5228: PUSH
5229: LD_INT 5
5231: PUSH
5232: LD_INT 6
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: LD_OWVAR 67
5244: ARRAY
5245: GREATEREQUAL
5246: IFFALSE 5338
5248: GO 5250
5250: DISABLE
5251: LD_INT 0
5253: PPUSH
5254: PPUSH
// begin enable ;
5255: ENABLE
// enemy := Filterallunits ( [ f_side , 3 ] ) ;
5256: LD_ADDR_VAR 0 1
5260: PUSH
5261: LD_INT 22
5263: PUSH
5264: LD_INT 3
5266: PUSH
5267: EMPTY
5268: LIST
5269: LIST
5270: PPUSH
5271: CALL_OW 69
5275: ST_TO_ADDR
// for attacker in UnitFilter ( attackers , [ [ f_ok ] , [ f_linked ] ] ) do
5276: LD_ADDR_VAR 0 2
5280: PUSH
5281: LD_EXP 8
5285: PPUSH
5286: LD_INT 50
5288: PUSH
5289: EMPTY
5290: LIST
5291: PUSH
5292: LD_INT 61
5294: PUSH
5295: EMPTY
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: PPUSH
5302: CALL_OW 72
5306: PUSH
5307: FOR_IN
5308: IFFALSE 5336
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
5310: LD_VAR 0 2
5314: PPUSH
5315: LD_VAR 0 1
5319: PPUSH
5320: LD_VAR 0 2
5324: PPUSH
5325: CALL_OW 74
5329: PPUSH
5330: CALL_OW 115
5334: GO 5307
5336: POP
5337: POP
// end ; end_of_file
5338: PPOPN 2
5340: END
// export function Action ; begin
5341: LD_INT 0
5343: PPUSH
// ingame_video := true ;
5344: LD_ADDR_OWVAR 52
5348: PUSH
5349: LD_INT 1
5351: ST_TO_ADDR
// interface_hidden := true ;
5352: LD_ADDR_OWVAR 54
5356: PUSH
5357: LD_INT 1
5359: ST_TO_ADDR
// ComMoveToArea ( [ Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ] , PeopleStartArea ) ;
5360: LD_EXP 10
5364: PUSH
5365: LD_EXP 11
5369: PUSH
5370: LD_EXP 12
5374: PUSH
5375: LD_EXP 13
5379: PUSH
5380: LD_EXP 14
5384: PUSH
5385: LD_EXP 15
5389: PUSH
5390: LD_EXP 16
5394: PUSH
5395: LD_EXP 17
5399: PUSH
5400: LD_EXP 18
5404: PUSH
5405: LD_EXP 19
5409: PUSH
5410: LD_EXP 20
5414: PUSH
5415: LD_EXP 21
5419: PUSH
5420: LD_EXP 22
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: LIST
5429: LIST
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: PPUSH
5440: LD_INT 10
5442: PPUSH
5443: CALL_OW 113
// ComMoveToArea ( Yakotich , YakotichStartArea ) ;
5447: LD_EXP 9
5451: PPUSH
5452: LD_INT 11
5454: PPUSH
5455: CALL_OW 113
// end ;
5459: LD_VAR 0 1
5463: RET
// every 0 0$1 trigger IsInArea ( Yakotich , YakotichStartArea ) do
5464: LD_EXP 9
5468: PPUSH
5469: LD_INT 11
5471: PPUSH
5472: CALL_OW 308
5476: IFFALSE 5543
5478: GO 5480
5480: DISABLE
// begin ComTurnUnit ( Yakotich , Mietek ) ;
5481: LD_EXP 9
5485: PPUSH
5486: LD_EXP 10
5490: PPUSH
5491: CALL_OW 119
// Say ( Yakotich , 3Yak-01 ) ;
5495: LD_EXP 9
5499: PPUSH
5500: LD_STRING 3Yak-01
5502: PPUSH
5503: CALL_OW 88
// ComEnterUnit ( Yakotich , Ovsyenko ) ;
5507: LD_EXP 9
5511: PPUSH
5512: LD_INT 74
5514: PPUSH
5515: CALL_OW 120
// ComEnterUnit ( Mietek , Ovsyenko ) ;
5519: LD_EXP 10
5523: PPUSH
5524: LD_INT 74
5526: PPUSH
5527: CALL_OW 120
// ComEnterUnit ( Boris , Ovsyenko ) ;
5531: LD_EXP 11
5535: PPUSH
5536: LD_INT 74
5538: PPUSH
5539: CALL_OW 120
// end ;
5543: END
// export engs ; export function SikorskiAction ; var x , y , i , tmp , t , engs , un , speaker ; begin
5544: LD_INT 0
5546: PPUSH
5547: PPUSH
5548: PPUSH
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
5553: PPUSH
5554: PPUSH
// x := 101 ;
5555: LD_ADDR_VAR 0 2
5559: PUSH
5560: LD_INT 101
5562: ST_TO_ADDR
// y := 116 ;
5563: LD_ADDR_VAR 0 3
5567: PUSH
5568: LD_INT 116
5570: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 30 ) ;
5571: LD_VAR 0 2
5575: PPUSH
5576: LD_VAR 0 3
5580: PPUSH
5581: LD_INT 1
5583: PPUSH
5584: LD_INT 30
5586: NEG
5587: PPUSH
5588: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
5592: LD_VAR 0 2
5596: PPUSH
5597: LD_VAR 0 3
5601: PPUSH
5602: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Sikorski ;
5606: LD_ADDR_VAR 0 5
5610: PUSH
5611: LD_INT 22
5613: PUSH
5614: LD_INT 4
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 21
5623: PUSH
5624: LD_INT 1
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PPUSH
5635: CALL_OW 69
5639: PUSH
5640: LD_EXP 49
5644: DIFF
5645: ST_TO_ADDR
// AddComTurnXY ( tmp , 111 , 125 ) ;
5646: LD_VAR 0 5
5650: PPUSH
5651: LD_INT 111
5653: PPUSH
5654: LD_INT 125
5656: PPUSH
5657: CALL_OW 178
// wait ( 0 0$02 ) ;
5661: LD_INT 70
5663: PPUSH
5664: CALL_OW 67
// AddComMoveXY ( Sikorski , 105 , 111 ) ;
5668: LD_EXP 49
5672: PPUSH
5673: LD_INT 105
5675: PPUSH
5676: LD_INT 111
5678: PPUSH
5679: CALL_OW 171
// ComAgressiveMove ( tmp , 108 , 117 ) ;
5683: LD_VAR 0 5
5687: PPUSH
5688: LD_INT 108
5690: PPUSH
5691: LD_INT 117
5693: PPUSH
5694: CALL_OW 114
// Say ( Sikorski , 3Sik-01 ) ;
5698: LD_EXP 49
5702: PPUSH
5703: LD_STRING 3Sik-01
5705: PPUSH
5706: CALL_OW 88
// Say ( Yakotich , 3Yak-08 ) ;
5710: LD_EXP 9
5714: PPUSH
5715: LD_STRING 3Yak-08
5717: PPUSH
5718: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
5722: LD_INT 35
5724: PPUSH
5725: CALL_OW 67
// until See ( 3 , Sikorski ) ;
5729: LD_INT 3
5731: PPUSH
5732: LD_EXP 49
5736: PPUSH
5737: CALL_OW 292
5741: IFFALSE 5722
// un := UnitsInside ( NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , Sikorski ) ) [ 1 ] ;
5743: LD_ADDR_VAR 0 8
5747: PUSH
5748: LD_INT 30
5750: PUSH
5751: LD_INT 31
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PPUSH
5758: CALL_OW 69
5762: PPUSH
5763: LD_EXP 49
5767: PPUSH
5768: CALL_OW 74
5772: PPUSH
5773: CALL_OW 313
5777: PUSH
5778: LD_INT 1
5780: ARRAY
5781: ST_TO_ADDR
// AddComAttackUnit ( un , Sikorski ) ;
5782: LD_VAR 0 8
5786: PPUSH
5787: LD_EXP 49
5791: PPUSH
5792: CALL_OW 175
// wait ( 0 0$3 ) ;
5796: LD_INT 105
5798: PPUSH
5799: CALL_OW 67
// MineExplosion ( 111 , 116 , 1 ) ;
5803: LD_INT 111
5805: PPUSH
5806: LD_INT 116
5808: PPUSH
5809: LD_INT 1
5811: PPUSH
5812: CALL_OW 453
// repeat wait ( 0 0$01 ) ;
5816: LD_INT 35
5818: PPUSH
5819: CALL_OW 67
// until IsDying ( un ) ;
5823: LD_VAR 0 8
5827: PPUSH
5828: CALL_OW 303
5832: IFFALSE 5816
// DoNotAttack ( 3 , Sikorski ) ;
5834: LD_INT 3
5836: PPUSH
5837: LD_EXP 49
5841: PPUSH
5842: CALL_OW 471
// AddComMoveXY ( Sikorski , 110 , 120 ) ;
5846: LD_EXP 49
5850: PPUSH
5851: LD_INT 110
5853: PPUSH
5854: LD_INT 120
5856: PPUSH
5857: CALL_OW 171
// AddComAttackUnit ( Sikorski , Ovsyenko ) ;
5861: LD_EXP 49
5865: PPUSH
5866: LD_INT 74
5868: PPUSH
5869: CALL_OW 175
// Say ( Yakotich , 3Yak-09 ) ;
5873: LD_EXP 9
5877: PPUSH
5878: LD_STRING 3Yak-09
5880: PPUSH
5881: CALL_OW 88
// ComExitBuilding ( [ f_side , 3 ] ) ;
5885: LD_INT 22
5887: PUSH
5888: LD_INT 3
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 122
// AddComAgressiveMove ( [ f_side , 3 ] , 106 , 114 ) ;
5899: LD_INT 22
5901: PUSH
5902: LD_INT 3
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: PPUSH
5909: LD_INT 106
5911: PPUSH
5912: LD_INT 114
5914: PPUSH
5915: CALL_OW 174
// ComMoveXY ( tmp , 109 , 119 ) ;
5919: LD_VAR 0 5
5923: PPUSH
5924: LD_INT 109
5926: PPUSH
5927: LD_INT 119
5929: PPUSH
5930: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
5934: LD_VAR 0 5
5938: PPUSH
5939: LD_INT 111
5941: PPUSH
5942: LD_INT 125
5944: PPUSH
5945: CALL_OW 178
// ComExitBuilding ( Yakotich ) ;
5949: LD_EXP 9
5953: PPUSH
5954: CALL_OW 122
// AddComAttackUnit ( Yakotich , Sikorski ) ;
5958: LD_EXP 9
5962: PPUSH
5963: LD_EXP 49
5967: PPUSH
5968: CALL_OW 175
// Say ( Sikorski , 3Sik-02 ) ;
5972: LD_EXP 49
5976: PPUSH
5977: LD_STRING 3Sik-02
5979: PPUSH
5980: CALL_OW 88
// wait ( 0 0$2 ) ;
5984: LD_INT 70
5986: PPUSH
5987: CALL_OW 67
// SayEffect ( 3smrtsikora ) ;
5991: LD_STRING 3smrtsikora
5993: PPUSH
5994: CALL_OW 96
// KillUnit ( Sikorski ) ;
5998: LD_EXP 49
6002: PPUSH
6003: CALL_OW 66
// sikorski_dead = true ;
6007: LD_ADDR_EXP 76
6011: PUSH
6012: LD_INT 1
6014: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6015: LD_INT 35
6017: PPUSH
6018: CALL_OW 67
// engs := FilterAllUnits ( [ [ f_class , 2 ] , [ f_side , 3 ] ] ) ;
6022: LD_ADDR_VAR 0 7
6026: PUSH
6027: LD_INT 25
6029: PUSH
6030: LD_INT 2
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: PUSH
6037: LD_INT 22
6039: PUSH
6040: LD_INT 3
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: PPUSH
6051: CALL_OW 69
6055: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
6056: LD_VAR 0 7
6060: PPUSH
6061: CALL_OW 122
// for i = 1 to engs do
6065: LD_ADDR_VAR 0 4
6069: PUSH
6070: DOUBLE
6071: LD_INT 1
6073: DEC
6074: ST_TO_ADDR
6075: LD_VAR 0 7
6079: PUSH
6080: FOR_TO
6081: IFFALSE 6121
// AddComEnterUnit ( engs [ i ] , FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) [ i ] ) ;
6083: LD_VAR 0 7
6087: PUSH
6088: LD_VAR 0 4
6092: ARRAY
6093: PPUSH
6094: LD_INT 34
6096: PUSH
6097: LD_INT 51
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: PPUSH
6104: CALL_OW 69
6108: PUSH
6109: LD_VAR 0 4
6113: ARRAY
6114: PPUSH
6115: CALL_OW 180
6119: GO 6080
6121: POP
6122: POP
// AddComTransport ( Anton , Ovsyenko , mat_siberit ) ;
6123: LD_EXP 27
6127: PPUSH
6128: LD_INT 74
6130: PPUSH
6131: LD_INT 3
6133: PPUSH
6134: CALL_OW 211
// AddComWait ( Boris , 0 0$1 ) ;
6138: LD_EXP 11
6142: PPUSH
6143: LD_INT 35
6145: PPUSH
6146: CALL_OW 202
// AddComTransport ( Boris , Ovsyenko , mat_cans ) ;
6150: LD_EXP 11
6154: PPUSH
6155: LD_INT 74
6157: PPUSH
6158: LD_INT 1
6160: PPUSH
6161: CALL_OW 211
// AddComMoveXY ( engs , 147 , 220 ) ;
6165: LD_VAR 0 7
6169: PPUSH
6170: LD_INT 147
6172: PPUSH
6173: LD_INT 220
6175: PPUSH
6176: CALL_OW 171
// AddComExitVehicle ( engs ) ;
6180: LD_VAR 0 7
6184: PPUSH
6185: CALL_OW 181
// AddComMoveXY ( Yakotich , 148 , 208 ) ;
6189: LD_EXP 9
6193: PPUSH
6194: LD_INT 148
6196: PPUSH
6197: LD_INT 208
6199: PPUSH
6200: CALL_OW 171
// un := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
6204: LD_ADDR_VAR 0 8
6208: PUSH
6209: LD_INT 22
6211: PUSH
6212: LD_INT 3
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 25
6221: PUSH
6222: LD_INT 1
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PPUSH
6233: CALL_OW 69
6237: ST_TO_ADDR
// ComExitBuilding ( un ) ;
6238: LD_VAR 0 8
6242: PPUSH
6243: CALL_OW 122
// ComExitBuilding ( Grigori ) ;
6247: LD_EXP 26
6251: PPUSH
6252: CALL_OW 122
// AddComMoveXY ( un , 148 , 208 ) ;
6256: LD_VAR 0 8
6260: PPUSH
6261: LD_INT 148
6263: PPUSH
6264: LD_INT 208
6266: PPUSH
6267: CALL_OW 171
// AddComMoveXY ( Grigori , 148 , 208 ) ;
6271: LD_EXP 26
6275: PPUSH
6276: LD_INT 148
6278: PPUSH
6279: LD_INT 208
6281: PPUSH
6282: CALL_OW 171
// wait ( 5 ) ;
6286: LD_INT 5
6288: PPUSH
6289: CALL_OW 67
// Say ( Jilian , 3Rand-01 ) ;
6293: LD_EXP 58
6297: PPUSH
6298: LD_STRING 3Rand-01
6300: PPUSH
6301: CALL_OW 88
// ComMoveToArea ( SikorskiTeam , OvsyenkoArea ) ;
6305: LD_EXP 4
6309: PPUSH
6310: LD_INT 6
6312: PPUSH
6313: CALL_OW 113
// wait ( 0 0$7 ) ;
6317: LD_INT 245
6319: PPUSH
6320: CALL_OW 67
// t := [ [ 104 , 117 ] , [ 115 , 123 ] , [ 114 , 126 ] , [ 111 , 122 ] , [ 112 , 126 ] , [ 117 , 130 ] , [ 106 , 127 ] , [ 111 , 117 ] , [ 98 , 119 ] , [ 116 , 131 ] , [ 109 , 129 ] , [ 100 , 113 ] ] ;
6324: LD_ADDR_VAR 0 6
6328: PUSH
6329: LD_INT 104
6331: PUSH
6332: LD_INT 117
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 115
6341: PUSH
6342: LD_INT 123
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 114
6351: PUSH
6352: LD_INT 126
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: LD_INT 111
6361: PUSH
6362: LD_INT 122
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 112
6371: PUSH
6372: LD_INT 126
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PUSH
6379: LD_INT 117
6381: PUSH
6382: LD_INT 130
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 106
6391: PUSH
6392: LD_INT 127
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 111
6401: PUSH
6402: LD_INT 117
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: LD_INT 98
6411: PUSH
6412: LD_INT 119
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 116
6421: PUSH
6422: LD_INT 131
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PUSH
6429: LD_INT 109
6431: PUSH
6432: LD_INT 129
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PUSH
6439: LD_INT 100
6441: PUSH
6442: LD_INT 113
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: ST_TO_ADDR
// for i in t do
6463: LD_ADDR_VAR 0 4
6467: PUSH
6468: LD_VAR 0 6
6472: PUSH
6473: FOR_IN
6474: IFFALSE 6510
// begin wait ( 0 0$0.3 ) ;
6476: LD_INT 10
6478: PPUSH
6479: CALL_OW 67
// MineExplosion ( i [ 1 ] , i [ 2 ] , 1 ) ;
6483: LD_VAR 0 4
6487: PUSH
6488: LD_INT 1
6490: ARRAY
6491: PPUSH
6492: LD_VAR 0 4
6496: PUSH
6497: LD_INT 2
6499: ARRAY
6500: PPUSH
6501: LD_INT 1
6503: PPUSH
6504: CALL_OW 453
// end ;
6508: GO 6473
6510: POP
6511: POP
// wait ( 0 0$4 ) ;
6512: LD_INT 140
6514: PPUSH
6515: CALL_OW 67
// Say ( Turner , 3Rand-02 ) ;
6519: LD_EXP 59
6523: PPUSH
6524: LD_STRING 3Rand-02
6526: PPUSH
6527: CALL_OW 88
// wait ( 0 0$5 ) ;
6531: LD_INT 175
6533: PPUSH
6534: CALL_OW 67
// wait ( 0 0$2 ) ;
6538: LD_INT 70
6540: PPUSH
6541: CALL_OW 67
// SayRadio ( Yakotich , 3Yak-10 ) ;
6545: LD_EXP 9
6549: PPUSH
6550: LD_STRING 3Yak-10
6552: PPUSH
6553: CALL_OW 94
// SetLives ( Ovsyenko , 400 ) ;
6557: LD_INT 74
6559: PPUSH
6560: LD_INT 400
6562: PPUSH
6563: CALL_OW 234
// Cutscene_ended = true ;
6567: LD_ADDR_EXP 67
6571: PUSH
6572: LD_INT 1
6574: ST_TO_ADDR
// CenterOnXY ( 148 , 208 ) ;
6575: LD_INT 148
6577: PPUSH
6578: LD_INT 208
6580: PPUSH
6581: CALL_OW 84
// SayRadio ( Platonov , 3Plat-03 ) ;
6585: LD_EXP 63
6589: PPUSH
6590: LD_STRING 3Plat-03
6592: PPUSH
6593: CALL_OW 94
// SayRadio ( Platonov , 3Plat-04 ) ;
6597: LD_EXP 63
6601: PPUSH
6602: LD_STRING 3Plat-04
6604: PPUSH
6605: CALL_OW 94
// SayRadio ( Platonov , 3Plat-05 ) ;
6609: LD_EXP 63
6613: PPUSH
6614: LD_STRING 3Plat-05
6616: PPUSH
6617: CALL_OW 94
// SayRadio ( Platonov , 3Plat-06 ) ;
6621: LD_EXP 63
6625: PPUSH
6626: LD_STRING 3Plat-06
6628: PPUSH
6629: CALL_OW 94
// SayRadio ( Platonov , 3Plat-07 ) ;
6633: LD_EXP 63
6637: PPUSH
6638: LD_STRING 3Plat-07
6640: PPUSH
6641: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-11 ) ;
6645: LD_EXP 9
6649: PPUSH
6650: LD_STRING 3Yak-11
6652: PPUSH
6653: CALL_OW 94
// repeat Wait ( 0 0$1 ) until not IsInUnit ( Boris ) and not IsInUnit ( Anton ) ;
6657: LD_INT 35
6659: PPUSH
6660: CALL_OW 67
6664: LD_EXP 11
6668: PPUSH
6669: CALL_OW 310
6673: NOT
6674: PUSH
6675: LD_EXP 27
6679: PPUSH
6680: CALL_OW 310
6684: NOT
6685: AND
6686: IFFALSE 6657
// tmp := [ ] ;
6688: LD_ADDR_VAR 0 5
6692: PUSH
6693: EMPTY
6694: ST_TO_ADDR
// start_ended = true ;
6695: LD_ADDR_EXP 69
6699: PUSH
6700: LD_INT 1
6702: ST_TO_ADDR
// end ;
6703: LD_VAR 0 1
6707: RET
// every 0 0$1 trigger IsInUnit ( Yakotich ) do
6708: LD_EXP 9
6712: PPUSH
6713: CALL_OW 310
6717: IFFALSE 7026
6719: GO 6721
6721: DISABLE
// begin Say ( Yakotich , 3Yak-02 ) ;
6722: LD_EXP 9
6726: PPUSH
6727: LD_STRING 3Yak-02
6729: PPUSH
6730: CALL_OW 88
// Say ( Dimitri , 3Dim-01 ) ;
6734: LD_EXP 23
6738: PPUSH
6739: LD_STRING 3Dim-01
6741: PPUSH
6742: CALL_OW 88
// Say ( Yakotich , 3Yak-03 ) ;
6746: LD_EXP 9
6750: PPUSH
6751: LD_STRING 3Yak-03
6753: PPUSH
6754: CALL_OW 88
// Say ( Dimitri , 3Dim-02 ) ;
6758: LD_EXP 23
6762: PPUSH
6763: LD_STRING 3Dim-02
6765: PPUSH
6766: CALL_OW 88
// SayRadio ( Yakotich , 3Yak-04 ) ;
6770: LD_EXP 9
6774: PPUSH
6775: LD_STRING 3Yak-04
6777: PPUSH
6778: CALL_OW 94
// SayRadio ( Platonov , 3Plat-01 ) ;
6782: LD_EXP 63
6786: PPUSH
6787: LD_STRING 3Plat-01
6789: PPUSH
6790: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-05 ) ;
6794: LD_EXP 9
6798: PPUSH
6799: LD_STRING 3Yak-05
6801: PPUSH
6802: CALL_OW 94
// SayRadio ( Platonov , 3Plat-02 ) ;
6806: LD_EXP 63
6810: PPUSH
6811: LD_STRING 3Plat-02
6813: PPUSH
6814: CALL_OW 94
// Say ( Dimitri , 3Dim-03 ) ;
6818: LD_EXP 23
6822: PPUSH
6823: LD_STRING 3Dim-03
6825: PPUSH
6826: CALL_OW 88
// Say ( Dimitri , 3Dim-04 ) ;
6830: LD_EXP 23
6834: PPUSH
6835: LD_STRING 3Dim-04
6837: PPUSH
6838: CALL_OW 88
// Say ( Yakotich , 3Yak-06 ) ;
6842: LD_EXP 9
6846: PPUSH
6847: LD_STRING 3Yak-06
6849: PPUSH
6850: CALL_OW 88
// Say ( Dimitri , 3Dim-05 ) ;
6854: LD_EXP 23
6858: PPUSH
6859: LD_STRING 3Dim-05
6861: PPUSH
6862: CALL_OW 88
// Say ( Yakotich , 3Yak-07 ) ;
6866: LD_EXP 9
6870: PPUSH
6871: LD_STRING 3Yak-07
6873: PPUSH
6874: CALL_OW 88
// Wait ( 0 0$03 ) ;
6878: LD_INT 105
6880: PPUSH
6881: CALL_OW 67
// InitSikorskiTeam ;
6885: CALL 2765 0 0
// SikorskiAction ;
6889: CALL 5544 0 0
// ChangeMissionObjectives ( o1 ) ;
6893: LD_STRING o1
6895: PPUSH
6896: CALL_OW 337
// SetSide ( [ Ovsyenko , OB2 , OB3 , oil , eoil1 , eoil2 ] , 4 ) ;
6900: LD_INT 74
6902: PUSH
6903: LD_INT 79
6905: PUSH
6906: LD_INT 78
6908: PUSH
6909: LD_INT 76
6911: PUSH
6912: LD_INT 85
6914: PUSH
6915: LD_INT 86
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: PPUSH
6926: LD_INT 4
6928: PPUSH
6929: CALL_OW 235
// ComEnterUnit ( Cyrus , OB3 ) ;
6933: LD_EXP 53
6937: PPUSH
6938: LD_INT 78
6940: PPUSH
6941: CALL_OW 120
// ComEnterUnit ( Bobby , OB2 ) ;
6945: LD_EXP 52
6949: PPUSH
6950: LD_INT 79
6952: PPUSH
6953: CALL_OW 120
// SetClass ( [ Jilian , Turner ] , 2 ) ;
6957: LD_EXP 58
6961: PUSH
6962: LD_EXP 59
6966: PUSH
6967: EMPTY
6968: LIST
6969: LIST
6970: PPUSH
6971: LD_INT 2
6973: PPUSH
6974: CALL_OW 336
// ComWalk ( [ Jilian , Turner , McCreery , Lynch , Walker , Truman , Gary ] ) ;
6978: LD_EXP 58
6982: PUSH
6983: LD_EXP 59
6987: PUSH
6988: LD_EXP 56
6992: PUSH
6993: LD_EXP 55
6997: PUSH
6998: LD_EXP 57
7002: PUSH
7003: LD_EXP 51
7007: PUSH
7008: LD_EXP 54
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL_OW 138
// end ;
7026: END
// every 0 0$1 trigger start_ended = true do
7027: LD_EXP 69
7031: PUSH
7032: LD_INT 1
7034: EQUAL
7035: IFFALSE 7107
7037: GO 7039
7039: DISABLE
// begin Say ( Yakotich , 3Yak-12 ) ;
7040: LD_EXP 9
7044: PPUSH
7045: LD_STRING 3Yak-12
7047: PPUSH
7048: CALL_OW 88
// Say ( Vasilij , 3Vas-01 ) ;
7052: LD_EXP 12
7056: PPUSH
7057: LD_STRING 3Vas-01
7059: PPUSH
7060: CALL_OW 88
// Say ( Dimitri , 3Dim-06 ) ;
7064: LD_EXP 23
7068: PPUSH
7069: LD_STRING 3Dim-06
7071: PPUSH
7072: CALL_OW 88
// Say ( Dimitri , 3Dim-07 ) ;
7076: LD_EXP 23
7080: PPUSH
7081: LD_STRING 3Dim-07
7083: PPUSH
7084: CALL_OW 88
// Say ( Vasilij , 3Vas-02 ) ;
7088: LD_EXP 12
7092: PPUSH
7093: LD_STRING 3Vas-02
7095: PPUSH
7096: CALL_OW 88
// ChangeMissionObjectives ( rocket ) ;
7100: LD_STRING rocket
7102: PPUSH
7103: CALL_OW 337
// end ;
7107: END
// every 0 0$1 trigger GetSide ( Ovsyenko ) = 3 and start_ended = true do
7108: LD_INT 74
7110: PPUSH
7111: CALL_OW 255
7115: PUSH
7116: LD_INT 3
7118: EQUAL
7119: PUSH
7120: LD_EXP 69
7124: PUSH
7125: LD_INT 1
7127: EQUAL
7128: AND
7129: IFFALSE 7311
7131: GO 7133
7133: DISABLE
// begin DialogueOn ;
7134: CALL_OW 6
// InGameOn ;
7138: CALL_OW 8
// SayRadio ( Yakotich , 3Yak-13 ) ;
7142: LD_EXP 9
7146: PPUSH
7147: LD_STRING 3Yak-13
7149: PPUSH
7150: CALL_OW 94
// SayRadio ( Platonov , 3Plat-06 ) ;
7154: LD_EXP 63
7158: PPUSH
7159: LD_STRING 3Plat-06
7161: PPUSH
7162: CALL_OW 94
// SayRadio ( Platonov , 3Plat-07 ) ;
7166: LD_EXP 63
7170: PPUSH
7171: LD_STRING 3Plat-07
7173: PPUSH
7174: CALL_OW 94
// Say ( Mietek , 3Ryn-01 ) ;
7178: LD_EXP 10
7182: PPUSH
7183: LD_STRING 3Ryn-01
7185: PPUSH
7186: CALL_OW 88
// CenterNowOnXY ( 109 , 72 ) ;
7190: LD_INT 109
7192: PPUSH
7193: LD_INT 72
7195: PPUSH
7196: CALL_OW 86
// RevealFogArea ( 3 , EastPassage ) ;
7200: LD_INT 3
7202: PPUSH
7203: LD_INT 13
7205: PPUSH
7206: CALL_OW 332
// Say ( Mietek , 3Ryn-02 ) ;
7210: LD_EXP 10
7214: PPUSH
7215: LD_STRING 3Ryn-02
7217: PPUSH
7218: CALL_OW 88
// CenterNowOnXY ( 78 , 17 ) ;
7222: LD_INT 78
7224: PPUSH
7225: LD_INT 17
7227: PPUSH
7228: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
7232: LD_INT 3
7234: PPUSH
7235: LD_INT 14
7237: PPUSH
7238: CALL_OW 332
// Say ( Mietek , 3Ryn-03 ) ;
7242: LD_EXP 10
7246: PPUSH
7247: LD_STRING 3Ryn-03
7249: PPUSH
7250: CALL_OW 88
// Say ( Yakotich , 3Yak-14 ) ;
7254: LD_EXP 9
7258: PPUSH
7259: LD_STRING 3Yak-14
7261: PPUSH
7262: CALL_OW 88
// ChangeMissionObjectives ( [ o2a , o2b , o2c ] [ Difficulty ] ) ;
7266: LD_STRING o2a
7268: PUSH
7269: LD_STRING o2b
7271: PUSH
7272: LD_STRING o2c
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: LD_OWVAR 67
7284: ARRAY
7285: PPUSH
7286: CALL_OW 337
// SetTech ( 86 , 3 , 1 ) ;
7290: LD_INT 86
7292: PPUSH
7293: LD_INT 3
7295: PPUSH
7296: LD_INT 1
7298: PPUSH
7299: CALL_OW 322
// DialogueOff ;
7303: CALL_OW 7
// InGameOff ;
7307: CALL_OW 9
// end ;
7311: END
// every 0 0$1 trigger ovsyenko_captured = true do
7312: LD_EXP 68
7316: PUSH
7317: LD_INT 1
7319: EQUAL
7320: IFFALSE 7658
7322: GO 7324
7324: DISABLE
// begin Wait ( 15 15$0 ) ;
7325: LD_INT 31500
7327: PPUSH
7328: CALL_OW 67
// InitBurlak ;
7332: CALL 2158 0 0
// DialogueOn ;
7336: CALL_OW 6
// CenterNowOnXY ( 155 , 235 ) ;
7340: LD_INT 155
7342: PPUSH
7343: LD_INT 235
7345: PPUSH
7346: CALL_OW 86
// SayRadio ( Burlak , 3Bur-01 ) ;
7350: LD_EXP 33
7354: PPUSH
7355: LD_STRING 3Bur-01
7357: PPUSH
7358: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-15 ) ;
7362: LD_EXP 9
7366: PPUSH
7367: LD_STRING 3Yak-15
7369: PPUSH
7370: CALL_OW 94
// SayRadio ( Burlak , 3Bur-02 ) ;
7374: LD_EXP 33
7378: PPUSH
7379: LD_STRING 3Bur-02
7381: PPUSH
7382: CALL_OW 94
// CenterNowOnUnits ( BurlakVeh ) ;
7386: LD_EXP 41
7390: PPUSH
7391: CALL_OW 87
// SayRadio ( Vasilij , 3Vas-Flame-01 ) ;
7395: LD_EXP 12
7399: PPUSH
7400: LD_STRING 3Vas-Flame-01
7402: PPUSH
7403: CALL_OW 94
// SayRadio ( Burlak , 3Bur-Flame-01 ) ;
7407: LD_EXP 33
7411: PPUSH
7412: LD_STRING 3Bur-Flame-01
7414: PPUSH
7415: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-Flame-01 ) ;
7419: LD_EXP 9
7423: PPUSH
7424: LD_STRING 3Yak-Flame-01
7426: PPUSH
7427: CALL_OW 94
// SayRadio ( Burlak , 3Bur-Flame-02 ) ;
7431: LD_EXP 33
7435: PPUSH
7436: LD_STRING 3Bur-Flame-02
7438: PPUSH
7439: CALL_OW 94
// SayRadio ( Vasilij , 3Vas-Flame-02 ) ;
7443: LD_EXP 12
7447: PPUSH
7448: LD_STRING 3Vas-Flame-02
7450: PPUSH
7451: CALL_OW 94
// ChangeMissionObjectives ( o3 ) ;
7455: LD_STRING o3
7457: PPUSH
7458: CALL_OW 337
// DialogueOff ;
7462: CALL_OW 7
// Wait ( 0 0$15 ) ;
7466: LD_INT 525
7468: PPUSH
7469: CALL_OW 67
// DialogueOn ;
7473: CALL_OW 6
// Say ( Petrosyan , 3Pty-01 ) ;
7477: LD_EXP 39
7481: PPUSH
7482: LD_STRING 3Pty-01
7484: PPUSH
7485: CALL_OW 88
// Say ( Yakotich , 3Yak-16 ) ;
7489: LD_EXP 9
7493: PPUSH
7494: LD_STRING 3Yak-16
7496: PPUSH
7497: CALL_OW 88
// Say ( Platonov , 3Plat-08 ) ;
7501: LD_EXP 63
7505: PPUSH
7506: LD_STRING 3Plat-08
7508: PPUSH
7509: CALL_OW 88
// ChangeMissionObjectives ( o4 ) ;
7513: LD_STRING o4
7515: PPUSH
7516: CALL_OW 337
// SetRestrict ( 11 , 3 , 1 ) ;
7520: LD_INT 11
7522: PPUSH
7523: LD_INT 3
7525: PPUSH
7526: LD_INT 1
7528: PPUSH
7529: CALL_OW 324
// SetRestrict ( 14 , 3 , 1 ) ;
7533: LD_INT 14
7535: PPUSH
7536: LD_INT 3
7538: PPUSH
7539: LD_INT 1
7541: PPUSH
7542: CALL_OW 324
// SetRestrict ( 28 , 3 , 1 ) ;
7546: LD_INT 28
7548: PPUSH
7549: LD_INT 3
7551: PPUSH
7552: LD_INT 1
7554: PPUSH
7555: CALL_OW 324
// DialogueOff ;
7559: CALL_OW 7
// Wait ( 1 1$0 ) ;
7563: LD_INT 2100
7565: PPUSH
7566: CALL_OW 67
// DialogueOn ;
7570: CALL_OW 6
// Say ( Petrosyan , 3Pty-Comp-01 ) ;
7574: LD_EXP 39
7578: PPUSH
7579: LD_STRING 3Pty-Comp-01
7581: PPUSH
7582: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-01 ) ;
7586: LD_EXP 33
7590: PPUSH
7591: LD_STRING 3Bur-Comp-01
7593: PPUSH
7594: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-02 ) ;
7598: LD_EXP 39
7602: PPUSH
7603: LD_STRING 3Pty-Comp-02
7605: PPUSH
7606: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-02 ) ;
7610: LD_EXP 33
7614: PPUSH
7615: LD_STRING 3Bur-Comp-02
7617: PPUSH
7618: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-03 ) ;
7622: LD_EXP 39
7626: PPUSH
7627: LD_STRING 3Pty-Comp-03
7629: PPUSH
7630: CALL_OW 88
// SetRestrict ( 12 , 3 , 1 ) ;
7634: LD_INT 12
7636: PPUSH
7637: LD_INT 3
7639: PPUSH
7640: LD_INT 1
7642: PPUSH
7643: CALL_OW 324
// ChangeMissionObjectives ( o5 ) ;
7647: LD_STRING o5
7649: PPUSH
7650: CALL_OW 337
// DialogueOff ;
7654: CALL_OW 7
// end ; end_of_file
7658: END
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and start_ended then
7659: LD_VAR 0 1
7663: PPUSH
7664: CALL_OW 255
7668: PUSH
7669: LD_INT 3
7671: EQUAL
7672: PUSH
7673: LD_VAR 0 1
7677: PPUSH
7678: CALL_OW 266
7682: PUSH
7683: LD_INT 0
7685: EQUAL
7686: AND
7687: PUSH
7688: LD_EXP 69
7692: AND
7693: IFFALSE 7746
// begin RuDep := building ;
7695: LD_ADDR_EXP 100
7699: PUSH
7700: LD_VAR 0 1
7704: ST_TO_ADDR
// SetBName ( building , voroshilov ) ;
7705: LD_VAR 0 1
7709: PPUSH
7710: LD_STRING voroshilov
7712: PPUSH
7713: CALL_OW 500
// SetRestrict ( b_depot , 3 , false ) ;
7717: LD_INT 0
7719: PPUSH
7720: LD_INT 3
7722: PPUSH
7723: LD_INT 0
7725: PPUSH
7726: CALL_OW 324
// ingame_video := false ;
7730: LD_ADDR_OWVAR 52
7734: PUSH
7735: LD_INT 0
7737: ST_TO_ADDR
// interface_hidden := false ;
7738: LD_ADDR_OWVAR 54
7742: PUSH
7743: LD_INT 0
7745: ST_TO_ADDR
// end ; end ;
7746: PPOPN 2
7748: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetControl ( vehicle ) = control_remote and GetSide ( vehicle ) = 1 then
7749: LD_VAR 0 1
7753: PPUSH
7754: CALL_OW 263
7758: PUSH
7759: LD_INT 2
7761: EQUAL
7762: PUSH
7763: LD_VAR 0 1
7767: PPUSH
7768: CALL_OW 255
7772: PUSH
7773: LD_INT 1
7775: EQUAL
7776: AND
7777: IFFALSE 7874
// begin Wait ( 0 0$3 ) ;
7779: LD_INT 105
7781: PPUSH
7782: CALL_OW 67
// Connect ( vehicle ) ;
7786: LD_VAR 0 1
7790: PPUSH
7791: CALL 16498 0 1
// newAttackers := Replace ( newAttackers , newAttackers + 1 , vehicle ) ;
7795: LD_ADDR_EXP 7
7799: PUSH
7800: LD_EXP 7
7804: PPUSH
7805: LD_EXP 7
7809: PUSH
7810: LD_INT 1
7812: PLUS
7813: PPUSH
7814: LD_VAR 0 1
7818: PPUSH
7819: CALL_OW 1
7823: ST_TO_ADDR
// if newAttackers >= [ 4 , 5 , 6 ] [ Difficulty ] then
7824: LD_EXP 7
7828: PUSH
7829: LD_INT 4
7831: PUSH
7832: LD_INT 5
7834: PUSH
7835: LD_INT 6
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: LIST
7842: PUSH
7843: LD_OWVAR 67
7847: ARRAY
7848: GREATEREQUAL
7849: IFFALSE 7874
// begin attackers := attackers union newAttackers ;
7851: LD_ADDR_EXP 8
7855: PUSH
7856: LD_EXP 8
7860: PUSH
7861: LD_EXP 7
7865: UNION
7866: ST_TO_ADDR
// newAttackers := [ ] ;
7867: LD_ADDR_EXP 7
7871: PUSH
7872: EMPTY
7873: ST_TO_ADDR
// end ; end ; end ;
7874: PPOPN 2
7876: END
// every 0 0$1 trigger See ( 3 , AmLab1 ) and lab_seen = false do
7877: LD_INT 3
7879: PPUSH
7880: LD_INT 94
7882: PPUSH
7883: CALL_OW 292
7887: PUSH
7888: LD_EXP 70
7892: PUSH
7893: LD_INT 0
7895: EQUAL
7896: AND
7897: IFFALSE 7944
7899: GO 7901
7901: DISABLE
// begin lab_seen = true ;
7902: LD_ADDR_EXP 70
7906: PUSH
7907: LD_INT 1
7909: ST_TO_ADDR
// CenterNowOnUnits ( AmLab1 ) ;
7910: LD_INT 94
7912: PPUSH
7913: CALL_OW 87
// DialogueOn ;
7917: CALL_OW 6
// Say ( Vasilij , 3Vas-Lab-01 ) ;
7921: LD_EXP 12
7925: PPUSH
7926: LD_STRING 3Vas-Lab-01
7928: PPUSH
7929: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
7933: LD_STRING o6
7935: PPUSH
7936: CALL_OW 337
// DialogueOff ;
7940: CALL_OW 7
// end ;
7944: END
// every 0 0$1 trigger See ( 3 , AmLab2 ) and lab_seen = false do
7945: LD_INT 3
7947: PPUSH
7948: LD_INT 163
7950: PPUSH
7951: CALL_OW 292
7955: PUSH
7956: LD_EXP 70
7960: PUSH
7961: LD_INT 0
7963: EQUAL
7964: AND
7965: IFFALSE 8004
7967: GO 7969
7969: DISABLE
// begin CenterNowOnUnits ( AmLab2 ) ;
7970: LD_INT 163
7972: PPUSH
7973: CALL_OW 87
// DialogueOn ;
7977: CALL_OW 6
// Say ( Vasilij , 3Vas-Lab-01 ) ;
7981: LD_EXP 12
7985: PPUSH
7986: LD_STRING 3Vas-Lab-01
7988: PPUSH
7989: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
7993: LD_STRING o6
7995: PPUSH
7996: CALL_OW 337
// DialogueOff ;
8000: CALL_OW 7
// end ;
8004: END
// every 0 0$1 trigger GetSide ( AmLab1 ) = 3 or GetSide ( AmLab2 ) = 3 do
8005: LD_INT 94
8007: PPUSH
8008: CALL_OW 255
8012: PUSH
8013: LD_INT 3
8015: EQUAL
8016: PUSH
8017: LD_INT 163
8019: PPUSH
8020: CALL_OW 255
8024: PUSH
8025: LD_INT 3
8027: EQUAL
8028: OR
8029: IFFALSE 8049
8031: GO 8033
8033: DISABLE
// begin ChangeMissionObjectives ( labik2 ) ;
8034: LD_STRING labik2
8036: PPUSH
8037: CALL_OW 337
// lab_captured = true ;
8041: LD_ADDR_EXP 71
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// end ;
8049: END
// every 0 0$1 trigger Researched ( 3 , 86 ) do
8050: LD_INT 3
8052: PPUSH
8053: LD_INT 86
8055: PPUSH
8056: CALL_OW 325
8060: IFFALSE 8112
8062: GO 8064
8064: DISABLE
// begin DialogueOn ;
8065: CALL_OW 6
// Say ( Vasilij , 3Vas-Buldozer-01 ) ;
8069: LD_EXP 12
8073: PPUSH
8074: LD_STRING 3Vas-Buldozer-01
8076: PPUSH
8077: CALL_OW 88
// Say ( Vasilij , 3Vas-Buldozer-02 ) ;
8081: LD_EXP 12
8085: PPUSH
8086: LD_STRING 3Vas-Buldozer-02
8088: PPUSH
8089: CALL_OW 88
// ChangeMissionObjectives ( buld2 ) ;
8093: LD_STRING buld2
8095: PPUSH
8096: CALL_OW 337
// buldozer_researched = true ;
8100: LD_ADDR_EXP 74
8104: PUSH
8105: LD_INT 1
8107: ST_TO_ADDR
// DialogueOff ;
8108: CALL_OW 7
// end ;
8112: END
// every 0 0$1 trigger Researched ( 3 , 40 ) do
8113: LD_INT 3
8115: PPUSH
8116: LD_INT 40
8118: PPUSH
8119: CALL_OW 325
8123: IFFALSE 8167
8125: GO 8127
8127: DISABLE
// begin Say ( Vasilij , 3Vas-Rocket ) ;
8128: LD_EXP 12
8132: PPUSH
8133: LD_STRING 3Vas-Rocket
8135: PPUSH
8136: CALL_OW 88
// Say ( Stanislav , 3Stan-Rocket ) ;
8140: LD_EXP 22
8144: PPUSH
8145: LD_STRING 3Stan-Rocket
8147: PPUSH
8148: CALL_OW 88
// ChangeMissionObjectives ( rocket2 ) ;
8152: LD_STRING rocket2
8154: PPUSH
8155: CALL_OW 337
// rocket_researched = true ;
8159: LD_ADDR_EXP 72
8163: PUSH
8164: LD_INT 1
8166: ST_TO_ADDR
// end ;
8167: END
// every 0 0$1 trigger Researched ( 3 , 9 ) do
8168: LD_INT 3
8170: PPUSH
8171: LD_INT 9
8173: PPUSH
8174: CALL_OW 325
8178: IFFALSE 8254
8180: GO 8182
8182: DISABLE
// begin DialogueOn ;
8183: CALL_OW 6
// Say ( Petrosyan , 3Pty-Comp-04 ) ;
8187: LD_EXP 39
8191: PPUSH
8192: LD_STRING 3Pty-Comp-04
8194: PPUSH
8195: CALL_OW 88
// Say ( Yakotich , 3Yak-Comp-01 ) ;
8199: LD_EXP 9
8203: PPUSH
8204: LD_STRING 3Yak-Comp-01
8206: PPUSH
8207: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-05 ) ;
8211: LD_EXP 39
8215: PPUSH
8216: LD_STRING 3Pty-Comp-05
8218: PPUSH
8219: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-03 ) ;
8223: LD_EXP 33
8227: PPUSH
8228: LD_STRING 3Bur-Comp-03
8230: PPUSH
8231: CALL_OW 88
// ChangeMissionObjectives ( pred2 ) ;
8235: LD_STRING pred2
8237: PPUSH
8238: CALL_OW 337
// prediction_researched = true ;
8242: LD_ADDR_EXP 73
8246: PUSH
8247: LD_INT 1
8249: ST_TO_ADDR
// DialogueOff ;
8250: CALL_OW 7
// end ;
8254: END
// every 0 0$1 trigger Researched ( 3 , 30 ) do
8255: LD_INT 3
8257: PPUSH
8258: LD_INT 30
8260: PPUSH
8261: CALL_OW 325
8265: IFFALSE 8326
8267: GO 8269
8269: DISABLE
// begin DialogueOn ;
8270: CALL_OW 6
// Say ( Dolgov , 3Dol-Stasis-01 ) ;
8274: LD_EXP 40
8278: PPUSH
8279: LD_STRING 3Dol-Stasis-01
8281: PPUSH
8282: CALL_OW 88
// Say ( Burlak , 3Bur-Stasis-01 ) ;
8286: LD_EXP 33
8290: PPUSH
8291: LD_STRING 3Bur-Stasis-01
8293: PPUSH
8294: CALL_OW 88
// Say ( Dolgov , 3Dol-Stasis-02 ) ;
8298: LD_EXP 40
8302: PPUSH
8303: LD_STRING 3Dol-Stasis-02
8305: PPUSH
8306: CALL_OW 88
// Say ( Burlak , 3Bur-Stasis-02 ) ;
8310: LD_EXP 33
8314: PPUSH
8315: LD_STRING 3Bur-Stasis-02
8317: PPUSH
8318: CALL_OW 88
// DialogueOff ;
8322: CALL_OW 7
// end ;
8326: END
// every 0 0$1 trigger IsInArea ( Boris , SouthOfBase ) and start_ended = true do
8327: LD_EXP 11
8331: PPUSH
8332: LD_INT 12
8334: PPUSH
8335: CALL_OW 308
8339: PUSH
8340: LD_EXP 69
8344: PUSH
8345: LD_INT 1
8347: EQUAL
8348: AND
8349: IFFALSE 8384
8351: GO 8353
8353: DISABLE
// begin AddComBuild ( [ Boris , Anton ] , b_depot , 140 , 204 , 3 ) ;
8354: LD_EXP 11
8358: PUSH
8359: LD_EXP 27
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PPUSH
8368: LD_INT 0
8370: PPUSH
8371: LD_INT 140
8373: PPUSH
8374: LD_INT 204
8376: PPUSH
8377: LD_INT 3
8379: PPUSH
8380: CALL_OW 205
// end ;
8384: END
// every 0 0$1 trigger start_ended = true and GetSide ( Ovsyenko ) = 3 do
8385: LD_EXP 69
8389: PUSH
8390: LD_INT 1
8392: EQUAL
8393: PUSH
8394: LD_INT 74
8396: PPUSH
8397: CALL_OW 255
8401: PUSH
8402: LD_INT 3
8404: EQUAL
8405: AND
8406: IFFALSE 8419
8408: GO 8410
8410: DISABLE
// begin ovsyenko_captured = true ;
8411: LD_ADDR_EXP 68
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// end ;
8419: END
// every 0 0$1 trigger Researched ( 3 , 54 ) and Researched ( 3 , 21 ) and Researched ( 3 , 30 ) do
8420: LD_INT 3
8422: PPUSH
8423: LD_INT 54
8425: PPUSH
8426: CALL_OW 325
8430: PUSH
8431: LD_INT 3
8433: PPUSH
8434: LD_INT 21
8436: PPUSH
8437: CALL_OW 325
8441: AND
8442: PUSH
8443: LD_INT 3
8445: PPUSH
8446: LD_INT 30
8448: PPUSH
8449: CALL_OW 325
8453: AND
8454: IFFALSE 8467
8456: GO 8458
8458: DISABLE
// begin everything_researched = true ;
8459: LD_ADDR_EXP 77
8463: PUSH
8464: LD_INT 1
8466: ST_TO_ADDR
// end ; end_of_file
8467: END
// every 6 6$0 do var i , j ;
8468: GO 8470
8470: DISABLE
8471: LD_INT 0
8473: PPUSH
8474: PPUSH
// begin for i = 1 to 4 do
8475: LD_ADDR_VAR 0 1
8479: PUSH
8480: DOUBLE
8481: LD_INT 1
8483: DEC
8484: ST_TO_ADDR
8485: LD_INT 4
8487: PUSH
8488: FOR_TO
8489: IFFALSE 8514
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
8491: LD_INT 3
8493: PPUSH
8494: LD_INT 5
8496: PPUSH
8497: CALL_OW 12
8501: PPUSH
8502: LD_INT 4
8504: PPUSH
8505: LD_INT 1
8507: PPUSH
8508: CALL_OW 55
// end ;
8512: GO 8488
8514: POP
8515: POP
// CreateCratesArea ( rand ( 1 , 3 ) , AmCratesArea , true ) ;
8516: LD_INT 1
8518: PPUSH
8519: LD_INT 3
8521: PPUSH
8522: CALL_OW 12
8526: PPUSH
8527: LD_INT 7
8529: PPUSH
8530: LD_INT 1
8532: PPUSH
8533: CALL_OW 55
// enable ;
8537: ENABLE
// end ; end_of_file
8538: PPOPN 2
8540: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8541: LD_INT 0
8543: PPUSH
8544: PPUSH
// if exist_mode then
8545: LD_VAR 0 2
8549: IFFALSE 8574
// unit := CreateCharacter ( prefix & ident ) else
8551: LD_ADDR_VAR 0 5
8555: PUSH
8556: LD_VAR 0 3
8560: PUSH
8561: LD_VAR 0 1
8565: STR
8566: PPUSH
8567: CALL_OW 34
8571: ST_TO_ADDR
8572: GO 8589
// unit := NewCharacter ( ident ) ;
8574: LD_ADDR_VAR 0 5
8578: PUSH
8579: LD_VAR 0 1
8583: PPUSH
8584: CALL_OW 25
8588: ST_TO_ADDR
// result := unit ;
8589: LD_ADDR_VAR 0 4
8593: PUSH
8594: LD_VAR 0 5
8598: ST_TO_ADDR
// end ;
8599: LD_VAR 0 4
8603: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8604: LD_INT 0
8606: PPUSH
8607: PPUSH
// if not side or not nation then
8608: LD_VAR 0 1
8612: NOT
8613: PUSH
8614: LD_VAR 0 2
8618: NOT
8619: OR
8620: IFFALSE 8624
// exit ;
8622: GO 9392
// case nation of nation_american :
8624: LD_VAR 0 2
8628: PUSH
8629: LD_INT 1
8631: DOUBLE
8632: EQUAL
8633: IFTRUE 8637
8635: GO 8851
8637: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8638: LD_ADDR_VAR 0 4
8642: PUSH
8643: LD_INT 35
8645: PUSH
8646: LD_INT 45
8648: PUSH
8649: LD_INT 46
8651: PUSH
8652: LD_INT 47
8654: PUSH
8655: LD_INT 82
8657: PUSH
8658: LD_INT 83
8660: PUSH
8661: LD_INT 84
8663: PUSH
8664: LD_INT 85
8666: PUSH
8667: LD_INT 86
8669: PUSH
8670: LD_INT 1
8672: PUSH
8673: LD_INT 2
8675: PUSH
8676: LD_INT 6
8678: PUSH
8679: LD_INT 15
8681: PUSH
8682: LD_INT 16
8684: PUSH
8685: LD_INT 7
8687: PUSH
8688: LD_INT 12
8690: PUSH
8691: LD_INT 13
8693: PUSH
8694: LD_INT 10
8696: PUSH
8697: LD_INT 14
8699: PUSH
8700: LD_INT 20
8702: PUSH
8703: LD_INT 21
8705: PUSH
8706: LD_INT 22
8708: PUSH
8709: LD_INT 25
8711: PUSH
8712: LD_INT 32
8714: PUSH
8715: LD_INT 27
8717: PUSH
8718: LD_INT 36
8720: PUSH
8721: LD_INT 69
8723: PUSH
8724: LD_INT 39
8726: PUSH
8727: LD_INT 34
8729: PUSH
8730: LD_INT 40
8732: PUSH
8733: LD_INT 48
8735: PUSH
8736: LD_INT 49
8738: PUSH
8739: LD_INT 50
8741: PUSH
8742: LD_INT 51
8744: PUSH
8745: LD_INT 52
8747: PUSH
8748: LD_INT 53
8750: PUSH
8751: LD_INT 54
8753: PUSH
8754: LD_INT 55
8756: PUSH
8757: LD_INT 56
8759: PUSH
8760: LD_INT 57
8762: PUSH
8763: LD_INT 58
8765: PUSH
8766: LD_INT 59
8768: PUSH
8769: LD_INT 60
8771: PUSH
8772: LD_INT 61
8774: PUSH
8775: LD_INT 62
8777: PUSH
8778: LD_INT 80
8780: PUSH
8781: LD_INT 82
8783: PUSH
8784: LD_INT 83
8786: PUSH
8787: LD_INT 84
8789: PUSH
8790: LD_INT 85
8792: PUSH
8793: LD_INT 86
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: ST_TO_ADDR
8849: GO 9316
8851: LD_INT 2
8853: DOUBLE
8854: EQUAL
8855: IFTRUE 8859
8857: GO 9085
8859: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
8860: LD_ADDR_VAR 0 4
8864: PUSH
8865: LD_INT 35
8867: PUSH
8868: LD_INT 45
8870: PUSH
8871: LD_INT 46
8873: PUSH
8874: LD_INT 47
8876: PUSH
8877: LD_INT 82
8879: PUSH
8880: LD_INT 83
8882: PUSH
8883: LD_INT 84
8885: PUSH
8886: LD_INT 85
8888: PUSH
8889: LD_INT 87
8891: PUSH
8892: LD_INT 70
8894: PUSH
8895: LD_INT 1
8897: PUSH
8898: LD_INT 11
8900: PUSH
8901: LD_INT 3
8903: PUSH
8904: LD_INT 4
8906: PUSH
8907: LD_INT 5
8909: PUSH
8910: LD_INT 6
8912: PUSH
8913: LD_INT 15
8915: PUSH
8916: LD_INT 18
8918: PUSH
8919: LD_INT 7
8921: PUSH
8922: LD_INT 17
8924: PUSH
8925: LD_INT 8
8927: PUSH
8928: LD_INT 20
8930: PUSH
8931: LD_INT 21
8933: PUSH
8934: LD_INT 22
8936: PUSH
8937: LD_INT 72
8939: PUSH
8940: LD_INT 26
8942: PUSH
8943: LD_INT 69
8945: PUSH
8946: LD_INT 39
8948: PUSH
8949: LD_INT 40
8951: PUSH
8952: LD_INT 41
8954: PUSH
8955: LD_INT 42
8957: PUSH
8958: LD_INT 43
8960: PUSH
8961: LD_INT 48
8963: PUSH
8964: LD_INT 49
8966: PUSH
8967: LD_INT 50
8969: PUSH
8970: LD_INT 51
8972: PUSH
8973: LD_INT 52
8975: PUSH
8976: LD_INT 53
8978: PUSH
8979: LD_INT 54
8981: PUSH
8982: LD_INT 55
8984: PUSH
8985: LD_INT 56
8987: PUSH
8988: LD_INT 60
8990: PUSH
8991: LD_INT 61
8993: PUSH
8994: LD_INT 62
8996: PUSH
8997: LD_INT 66
8999: PUSH
9000: LD_INT 67
9002: PUSH
9003: LD_INT 68
9005: PUSH
9006: LD_INT 81
9008: PUSH
9009: LD_INT 82
9011: PUSH
9012: LD_INT 83
9014: PUSH
9015: LD_INT 84
9017: PUSH
9018: LD_INT 85
9020: PUSH
9021: LD_INT 87
9023: PUSH
9024: LD_INT 88
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: ST_TO_ADDR
9083: GO 9316
9085: LD_INT 3
9087: DOUBLE
9088: EQUAL
9089: IFTRUE 9093
9091: GO 9315
9093: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9094: LD_ADDR_VAR 0 4
9098: PUSH
9099: LD_INT 46
9101: PUSH
9102: LD_INT 47
9104: PUSH
9105: LD_INT 1
9107: PUSH
9108: LD_INT 2
9110: PUSH
9111: LD_INT 82
9113: PUSH
9114: LD_INT 83
9116: PUSH
9117: LD_INT 84
9119: PUSH
9120: LD_INT 85
9122: PUSH
9123: LD_INT 86
9125: PUSH
9126: LD_INT 11
9128: PUSH
9129: LD_INT 9
9131: PUSH
9132: LD_INT 20
9134: PUSH
9135: LD_INT 19
9137: PUSH
9138: LD_INT 21
9140: PUSH
9141: LD_INT 24
9143: PUSH
9144: LD_INT 22
9146: PUSH
9147: LD_INT 25
9149: PUSH
9150: LD_INT 28
9152: PUSH
9153: LD_INT 29
9155: PUSH
9156: LD_INT 30
9158: PUSH
9159: LD_INT 31
9161: PUSH
9162: LD_INT 37
9164: PUSH
9165: LD_INT 38
9167: PUSH
9168: LD_INT 32
9170: PUSH
9171: LD_INT 27
9173: PUSH
9174: LD_INT 33
9176: PUSH
9177: LD_INT 69
9179: PUSH
9180: LD_INT 39
9182: PUSH
9183: LD_INT 34
9185: PUSH
9186: LD_INT 40
9188: PUSH
9189: LD_INT 71
9191: PUSH
9192: LD_INT 23
9194: PUSH
9195: LD_INT 44
9197: PUSH
9198: LD_INT 48
9200: PUSH
9201: LD_INT 49
9203: PUSH
9204: LD_INT 50
9206: PUSH
9207: LD_INT 51
9209: PUSH
9210: LD_INT 52
9212: PUSH
9213: LD_INT 53
9215: PUSH
9216: LD_INT 54
9218: PUSH
9219: LD_INT 55
9221: PUSH
9222: LD_INT 56
9224: PUSH
9225: LD_INT 57
9227: PUSH
9228: LD_INT 58
9230: PUSH
9231: LD_INT 59
9233: PUSH
9234: LD_INT 63
9236: PUSH
9237: LD_INT 64
9239: PUSH
9240: LD_INT 65
9242: PUSH
9243: LD_INT 82
9245: PUSH
9246: LD_INT 83
9248: PUSH
9249: LD_INT 84
9251: PUSH
9252: LD_INT 85
9254: PUSH
9255: LD_INT 86
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: ST_TO_ADDR
9313: GO 9316
9315: POP
// if state > - 1 and state < 3 then
9316: LD_VAR 0 3
9320: PUSH
9321: LD_INT 1
9323: NEG
9324: GREATER
9325: PUSH
9326: LD_VAR 0 3
9330: PUSH
9331: LD_INT 3
9333: LESS
9334: AND
9335: IFFALSE 9392
// for i in result do
9337: LD_ADDR_VAR 0 5
9341: PUSH
9342: LD_VAR 0 4
9346: PUSH
9347: FOR_IN
9348: IFFALSE 9390
// if GetTech ( i , side ) <> state then
9350: LD_VAR 0 5
9354: PPUSH
9355: LD_VAR 0 1
9359: PPUSH
9360: CALL_OW 321
9364: PUSH
9365: LD_VAR 0 3
9369: NONEQUAL
9370: IFFALSE 9388
// result := result diff i ;
9372: LD_ADDR_VAR 0 4
9376: PUSH
9377: LD_VAR 0 4
9381: PUSH
9382: LD_VAR 0 5
9386: DIFF
9387: ST_TO_ADDR
9388: GO 9347
9390: POP
9391: POP
// end ;
9392: LD_VAR 0 4
9396: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9397: LD_INT 0
9399: PPUSH
9400: PPUSH
9401: PPUSH
// result := true ;
9402: LD_ADDR_VAR 0 3
9406: PUSH
9407: LD_INT 1
9409: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9410: LD_ADDR_VAR 0 5
9414: PUSH
9415: LD_VAR 0 2
9419: PPUSH
9420: CALL_OW 480
9424: ST_TO_ADDR
// if not tmp then
9425: LD_VAR 0 5
9429: NOT
9430: IFFALSE 9434
// exit ;
9432: GO 9483
// for i in tmp do
9434: LD_ADDR_VAR 0 4
9438: PUSH
9439: LD_VAR 0 5
9443: PUSH
9444: FOR_IN
9445: IFFALSE 9481
// if GetTech ( i , side ) <> state_researched then
9447: LD_VAR 0 4
9451: PPUSH
9452: LD_VAR 0 1
9456: PPUSH
9457: CALL_OW 321
9461: PUSH
9462: LD_INT 2
9464: NONEQUAL
9465: IFFALSE 9479
// begin result := false ;
9467: LD_ADDR_VAR 0 3
9471: PUSH
9472: LD_INT 0
9474: ST_TO_ADDR
// exit ;
9475: POP
9476: POP
9477: GO 9483
// end ;
9479: GO 9444
9481: POP
9482: POP
// end ;
9483: LD_VAR 0 3
9487: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9488: LD_INT 0
9490: PPUSH
9491: PPUSH
9492: PPUSH
9493: PPUSH
9494: PPUSH
9495: PPUSH
9496: PPUSH
9497: PPUSH
9498: PPUSH
9499: PPUSH
9500: PPUSH
9501: PPUSH
9502: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9503: LD_VAR 0 1
9507: NOT
9508: PUSH
9509: LD_VAR 0 1
9513: PPUSH
9514: CALL_OW 257
9518: PUSH
9519: LD_INT 9
9521: NONEQUAL
9522: OR
9523: IFFALSE 9527
// exit ;
9525: GO 10100
// side := GetSide ( unit ) ;
9527: LD_ADDR_VAR 0 9
9531: PUSH
9532: LD_VAR 0 1
9536: PPUSH
9537: CALL_OW 255
9541: ST_TO_ADDR
// tech_space := tech_spacanom ;
9542: LD_ADDR_VAR 0 12
9546: PUSH
9547: LD_INT 29
9549: ST_TO_ADDR
// tech_time := tech_taurad ;
9550: LD_ADDR_VAR 0 13
9554: PUSH
9555: LD_INT 28
9557: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9558: LD_ADDR_VAR 0 11
9562: PUSH
9563: LD_VAR 0 1
9567: PPUSH
9568: CALL_OW 310
9572: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9573: LD_VAR 0 11
9577: PPUSH
9578: CALL_OW 247
9582: PUSH
9583: LD_INT 2
9585: EQUAL
9586: IFFALSE 9590
// exit ;
9588: GO 10100
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9590: LD_ADDR_VAR 0 8
9594: PUSH
9595: LD_INT 81
9597: PUSH
9598: LD_VAR 0 9
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 3
9609: PUSH
9610: LD_INT 21
9612: PUSH
9613: LD_INT 3
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PPUSH
9628: CALL_OW 69
9632: ST_TO_ADDR
// if not tmp then
9633: LD_VAR 0 8
9637: NOT
9638: IFFALSE 9642
// exit ;
9640: GO 10100
// if in_unit then
9642: LD_VAR 0 11
9646: IFFALSE 9670
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9648: LD_ADDR_VAR 0 10
9652: PUSH
9653: LD_VAR 0 8
9657: PPUSH
9658: LD_VAR 0 11
9662: PPUSH
9663: CALL_OW 74
9667: ST_TO_ADDR
9668: GO 9690
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9670: LD_ADDR_VAR 0 10
9674: PUSH
9675: LD_VAR 0 8
9679: PPUSH
9680: LD_VAR 0 1
9684: PPUSH
9685: CALL_OW 74
9689: ST_TO_ADDR
// if not enemy then
9690: LD_VAR 0 10
9694: NOT
9695: IFFALSE 9699
// exit ;
9697: GO 10100
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9699: LD_VAR 0 11
9703: PUSH
9704: LD_VAR 0 11
9708: PPUSH
9709: LD_VAR 0 10
9713: PPUSH
9714: CALL_OW 296
9718: PUSH
9719: LD_INT 13
9721: GREATER
9722: AND
9723: PUSH
9724: LD_VAR 0 1
9728: PPUSH
9729: LD_VAR 0 10
9733: PPUSH
9734: CALL_OW 296
9738: PUSH
9739: LD_INT 12
9741: GREATER
9742: OR
9743: IFFALSE 9747
// exit ;
9745: GO 10100
// missile := [ 1 ] ;
9747: LD_ADDR_VAR 0 14
9751: PUSH
9752: LD_INT 1
9754: PUSH
9755: EMPTY
9756: LIST
9757: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9758: LD_VAR 0 9
9762: PPUSH
9763: LD_VAR 0 12
9767: PPUSH
9768: CALL_OW 325
9772: IFFALSE 9801
// missile := Replace ( missile , missile + 1 , 2 ) ;
9774: LD_ADDR_VAR 0 14
9778: PUSH
9779: LD_VAR 0 14
9783: PPUSH
9784: LD_VAR 0 14
9788: PUSH
9789: LD_INT 1
9791: PLUS
9792: PPUSH
9793: LD_INT 2
9795: PPUSH
9796: CALL_OW 1
9800: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9801: LD_VAR 0 9
9805: PPUSH
9806: LD_VAR 0 13
9810: PPUSH
9811: CALL_OW 325
9815: PUSH
9816: LD_VAR 0 10
9820: PPUSH
9821: CALL_OW 255
9825: PPUSH
9826: LD_VAR 0 13
9830: PPUSH
9831: CALL_OW 325
9835: NOT
9836: AND
9837: IFFALSE 9866
// missile := Replace ( missile , missile + 1 , 3 ) ;
9839: LD_ADDR_VAR 0 14
9843: PUSH
9844: LD_VAR 0 14
9848: PPUSH
9849: LD_VAR 0 14
9853: PUSH
9854: LD_INT 1
9856: PLUS
9857: PPUSH
9858: LD_INT 3
9860: PPUSH
9861: CALL_OW 1
9865: ST_TO_ADDR
// if missile < 2 then
9866: LD_VAR 0 14
9870: PUSH
9871: LD_INT 2
9873: LESS
9874: IFFALSE 9878
// exit ;
9876: GO 10100
// x := GetX ( enemy ) ;
9878: LD_ADDR_VAR 0 4
9882: PUSH
9883: LD_VAR 0 10
9887: PPUSH
9888: CALL_OW 250
9892: ST_TO_ADDR
// y := GetY ( enemy ) ;
9893: LD_ADDR_VAR 0 5
9897: PUSH
9898: LD_VAR 0 10
9902: PPUSH
9903: CALL_OW 251
9907: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
9908: LD_ADDR_VAR 0 6
9912: PUSH
9913: LD_VAR 0 4
9917: PUSH
9918: LD_INT 1
9920: NEG
9921: PPUSH
9922: LD_INT 1
9924: PPUSH
9925: CALL_OW 12
9929: PLUS
9930: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
9931: LD_ADDR_VAR 0 7
9935: PUSH
9936: LD_VAR 0 5
9940: PUSH
9941: LD_INT 1
9943: NEG
9944: PPUSH
9945: LD_INT 1
9947: PPUSH
9948: CALL_OW 12
9952: PLUS
9953: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
9954: LD_VAR 0 6
9958: PPUSH
9959: LD_VAR 0 7
9963: PPUSH
9964: CALL_OW 488
9968: NOT
9969: IFFALSE 9991
// begin _x := x ;
9971: LD_ADDR_VAR 0 6
9975: PUSH
9976: LD_VAR 0 4
9980: ST_TO_ADDR
// _y := y ;
9981: LD_ADDR_VAR 0 7
9985: PUSH
9986: LD_VAR 0 5
9990: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
9991: LD_ADDR_VAR 0 3
9995: PUSH
9996: LD_INT 1
9998: PPUSH
9999: LD_VAR 0 14
10003: PPUSH
10004: CALL_OW 12
10008: ST_TO_ADDR
// case i of 1 :
10009: LD_VAR 0 3
10013: PUSH
10014: LD_INT 1
10016: DOUBLE
10017: EQUAL
10018: IFTRUE 10022
10020: GO 10039
10022: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10023: LD_VAR 0 1
10027: PPUSH
10028: LD_VAR 0 10
10032: PPUSH
10033: CALL_OW 115
10037: GO 10100
10039: LD_INT 2
10041: DOUBLE
10042: EQUAL
10043: IFTRUE 10047
10045: GO 10069
10047: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10048: LD_VAR 0 1
10052: PPUSH
10053: LD_VAR 0 6
10057: PPUSH
10058: LD_VAR 0 7
10062: PPUSH
10063: CALL_OW 153
10067: GO 10100
10069: LD_INT 3
10071: DOUBLE
10072: EQUAL
10073: IFTRUE 10077
10075: GO 10099
10077: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10078: LD_VAR 0 1
10082: PPUSH
10083: LD_VAR 0 6
10087: PPUSH
10088: LD_VAR 0 7
10092: PPUSH
10093: CALL_OW 154
10097: GO 10100
10099: POP
// end ;
10100: LD_VAR 0 2
10104: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10105: LD_INT 0
10107: PPUSH
10108: PPUSH
10109: PPUSH
10110: PPUSH
10111: PPUSH
10112: PPUSH
// if not unit or not building then
10113: LD_VAR 0 1
10117: NOT
10118: PUSH
10119: LD_VAR 0 2
10123: NOT
10124: OR
10125: IFFALSE 10129
// exit ;
10127: GO 10287
// x := GetX ( building ) ;
10129: LD_ADDR_VAR 0 5
10133: PUSH
10134: LD_VAR 0 2
10138: PPUSH
10139: CALL_OW 250
10143: ST_TO_ADDR
// y := GetY ( building ) ;
10144: LD_ADDR_VAR 0 6
10148: PUSH
10149: LD_VAR 0 2
10153: PPUSH
10154: CALL_OW 251
10158: ST_TO_ADDR
// for i = 0 to 5 do
10159: LD_ADDR_VAR 0 4
10163: PUSH
10164: DOUBLE
10165: LD_INT 0
10167: DEC
10168: ST_TO_ADDR
10169: LD_INT 5
10171: PUSH
10172: FOR_TO
10173: IFFALSE 10285
// begin _x := ShiftX ( x , i , 3 ) ;
10175: LD_ADDR_VAR 0 7
10179: PUSH
10180: LD_VAR 0 5
10184: PPUSH
10185: LD_VAR 0 4
10189: PPUSH
10190: LD_INT 3
10192: PPUSH
10193: CALL_OW 272
10197: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10198: LD_ADDR_VAR 0 8
10202: PUSH
10203: LD_VAR 0 6
10207: PPUSH
10208: LD_VAR 0 4
10212: PPUSH
10213: LD_INT 3
10215: PPUSH
10216: CALL_OW 273
10220: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10221: LD_VAR 0 7
10225: PPUSH
10226: LD_VAR 0 8
10230: PPUSH
10231: CALL_OW 488
10235: NOT
10236: IFFALSE 10240
// continue ;
10238: GO 10172
// if HexInfo ( _x , _y ) = 0 then
10240: LD_VAR 0 7
10244: PPUSH
10245: LD_VAR 0 8
10249: PPUSH
10250: CALL_OW 428
10254: PUSH
10255: LD_INT 0
10257: EQUAL
10258: IFFALSE 10283
// begin ComMoveXY ( unit , _x , _y ) ;
10260: LD_VAR 0 1
10264: PPUSH
10265: LD_VAR 0 7
10269: PPUSH
10270: LD_VAR 0 8
10274: PPUSH
10275: CALL_OW 111
// exit ;
10279: POP
10280: POP
10281: GO 10287
// end ; end ;
10283: GO 10172
10285: POP
10286: POP
// end ;
10287: LD_VAR 0 3
10291: RET
// export function ScanBase ( side , base_area ) ; begin
10292: LD_INT 0
10294: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10295: LD_ADDR_VAR 0 3
10299: PUSH
10300: LD_VAR 0 2
10304: PPUSH
10305: LD_INT 81
10307: PUSH
10308: LD_VAR 0 1
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 70
10321: ST_TO_ADDR
// end ;
10322: LD_VAR 0 3
10326: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10327: LD_INT 0
10329: PPUSH
10330: PPUSH
10331: PPUSH
10332: PPUSH
// result := false ;
10333: LD_ADDR_VAR 0 2
10337: PUSH
10338: LD_INT 0
10340: ST_TO_ADDR
// side := GetSide ( unit ) ;
10341: LD_ADDR_VAR 0 3
10345: PUSH
10346: LD_VAR 0 1
10350: PPUSH
10351: CALL_OW 255
10355: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10356: LD_ADDR_VAR 0 4
10360: PUSH
10361: LD_VAR 0 1
10365: PPUSH
10366: CALL_OW 248
10370: ST_TO_ADDR
// case nat of 1 :
10371: LD_VAR 0 4
10375: PUSH
10376: LD_INT 1
10378: DOUBLE
10379: EQUAL
10380: IFTRUE 10384
10382: GO 10395
10384: POP
// tech := tech_lassight ; 2 :
10385: LD_ADDR_VAR 0 5
10389: PUSH
10390: LD_INT 12
10392: ST_TO_ADDR
10393: GO 10434
10395: LD_INT 2
10397: DOUBLE
10398: EQUAL
10399: IFTRUE 10403
10401: GO 10414
10403: POP
// tech := tech_mortar ; 3 :
10404: LD_ADDR_VAR 0 5
10408: PUSH
10409: LD_INT 41
10411: ST_TO_ADDR
10412: GO 10434
10414: LD_INT 3
10416: DOUBLE
10417: EQUAL
10418: IFTRUE 10422
10420: GO 10433
10422: POP
// tech := tech_bazooka ; end ;
10423: LD_ADDR_VAR 0 5
10427: PUSH
10428: LD_INT 44
10430: ST_TO_ADDR
10431: GO 10434
10433: POP
// if Researched ( side , tech ) then
10434: LD_VAR 0 3
10438: PPUSH
10439: LD_VAR 0 5
10443: PPUSH
10444: CALL_OW 325
10448: IFFALSE 10475
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10450: LD_ADDR_VAR 0 2
10454: PUSH
10455: LD_INT 5
10457: PUSH
10458: LD_INT 8
10460: PUSH
10461: LD_INT 9
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: PUSH
10469: LD_VAR 0 4
10473: ARRAY
10474: ST_TO_ADDR
// end ;
10475: LD_VAR 0 2
10479: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10480: LD_INT 0
10482: PPUSH
10483: PPUSH
10484: PPUSH
// if not mines then
10485: LD_VAR 0 2
10489: NOT
10490: IFFALSE 10494
// exit ;
10492: GO 10638
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10494: LD_ADDR_VAR 0 5
10498: PUSH
10499: LD_INT 81
10501: PUSH
10502: LD_VAR 0 1
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 3
10513: PUSH
10514: LD_INT 21
10516: PUSH
10517: LD_INT 3
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: PPUSH
10532: CALL_OW 69
10536: ST_TO_ADDR
// for i in mines do
10537: LD_ADDR_VAR 0 4
10541: PUSH
10542: LD_VAR 0 2
10546: PUSH
10547: FOR_IN
10548: IFFALSE 10636
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10550: LD_VAR 0 4
10554: PUSH
10555: LD_INT 1
10557: ARRAY
10558: PPUSH
10559: LD_VAR 0 4
10563: PUSH
10564: LD_INT 2
10566: ARRAY
10567: PPUSH
10568: CALL_OW 458
10572: NOT
10573: IFFALSE 10577
// continue ;
10575: GO 10547
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10577: LD_VAR 0 4
10581: PUSH
10582: LD_INT 1
10584: ARRAY
10585: PPUSH
10586: LD_VAR 0 4
10590: PUSH
10591: LD_INT 2
10593: ARRAY
10594: PPUSH
10595: CALL_OW 428
10599: PUSH
10600: LD_VAR 0 5
10604: IN
10605: IFFALSE 10634
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10607: LD_VAR 0 4
10611: PUSH
10612: LD_INT 1
10614: ARRAY
10615: PPUSH
10616: LD_VAR 0 4
10620: PUSH
10621: LD_INT 2
10623: ARRAY
10624: PPUSH
10625: LD_VAR 0 1
10629: PPUSH
10630: CALL_OW 456
// end ;
10634: GO 10547
10636: POP
10637: POP
// end ;
10638: LD_VAR 0 3
10642: RET
// export function Count ( array ) ; var i ; begin
10643: LD_INT 0
10645: PPUSH
10646: PPUSH
// result := 0 ;
10647: LD_ADDR_VAR 0 2
10651: PUSH
10652: LD_INT 0
10654: ST_TO_ADDR
// for i in array do
10655: LD_ADDR_VAR 0 3
10659: PUSH
10660: LD_VAR 0 1
10664: PUSH
10665: FOR_IN
10666: IFFALSE 10690
// if i then
10668: LD_VAR 0 3
10672: IFFALSE 10688
// result := result + 1 ;
10674: LD_ADDR_VAR 0 2
10678: PUSH
10679: LD_VAR 0 2
10683: PUSH
10684: LD_INT 1
10686: PLUS
10687: ST_TO_ADDR
10688: GO 10665
10690: POP
10691: POP
// end ;
10692: LD_VAR 0 2
10696: RET
// export function IsEmpty ( building ) ; begin
10697: LD_INT 0
10699: PPUSH
// if not building then
10700: LD_VAR 0 1
10704: NOT
10705: IFFALSE 10709
// exit ;
10707: GO 10752
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10709: LD_ADDR_VAR 0 2
10713: PUSH
10714: LD_VAR 0 1
10718: PUSH
10719: LD_INT 22
10721: PUSH
10722: LD_VAR 0 1
10726: PPUSH
10727: CALL_OW 255
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 58
10738: PUSH
10739: EMPTY
10740: LIST
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PPUSH
10746: CALL_OW 69
10750: IN
10751: ST_TO_ADDR
// end ;
10752: LD_VAR 0 2
10756: RET
// export function IsNotFull ( building ) ; begin
10757: LD_INT 0
10759: PPUSH
// if not building then
10760: LD_VAR 0 1
10764: NOT
10765: IFFALSE 10769
// exit ;
10767: GO 10788
// result := UnitsInside ( building ) < 6 ;
10769: LD_ADDR_VAR 0 2
10773: PUSH
10774: LD_VAR 0 1
10778: PPUSH
10779: CALL_OW 313
10783: PUSH
10784: LD_INT 6
10786: LESS
10787: ST_TO_ADDR
// end ;
10788: LD_VAR 0 2
10792: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10793: LD_INT 0
10795: PPUSH
10796: PPUSH
10797: PPUSH
10798: PPUSH
// tmp := [ ] ;
10799: LD_ADDR_VAR 0 3
10803: PUSH
10804: EMPTY
10805: ST_TO_ADDR
// list := [ ] ;
10806: LD_ADDR_VAR 0 5
10810: PUSH
10811: EMPTY
10812: ST_TO_ADDR
// for i = 16 to 25 do
10813: LD_ADDR_VAR 0 4
10817: PUSH
10818: DOUBLE
10819: LD_INT 16
10821: DEC
10822: ST_TO_ADDR
10823: LD_INT 25
10825: PUSH
10826: FOR_TO
10827: IFFALSE 10900
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
10829: LD_ADDR_VAR 0 3
10833: PUSH
10834: LD_VAR 0 3
10838: PUSH
10839: LD_INT 22
10841: PUSH
10842: LD_VAR 0 1
10846: PPUSH
10847: CALL_OW 255
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 91
10858: PUSH
10859: LD_VAR 0 1
10863: PUSH
10864: LD_INT 6
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: PUSH
10872: LD_INT 30
10874: PUSH
10875: LD_VAR 0 4
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: LIST
10888: PUSH
10889: EMPTY
10890: LIST
10891: PPUSH
10892: CALL_OW 69
10896: ADD
10897: ST_TO_ADDR
10898: GO 10826
10900: POP
10901: POP
// for i = 1 to tmp do
10902: LD_ADDR_VAR 0 4
10906: PUSH
10907: DOUBLE
10908: LD_INT 1
10910: DEC
10911: ST_TO_ADDR
10912: LD_VAR 0 3
10916: PUSH
10917: FOR_TO
10918: IFFALSE 11006
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
10920: LD_ADDR_VAR 0 5
10924: PUSH
10925: LD_VAR 0 5
10929: PUSH
10930: LD_VAR 0 3
10934: PUSH
10935: LD_VAR 0 4
10939: ARRAY
10940: PPUSH
10941: CALL_OW 266
10945: PUSH
10946: LD_VAR 0 3
10950: PUSH
10951: LD_VAR 0 4
10955: ARRAY
10956: PPUSH
10957: CALL_OW 250
10961: PUSH
10962: LD_VAR 0 3
10966: PUSH
10967: LD_VAR 0 4
10971: ARRAY
10972: PPUSH
10973: CALL_OW 251
10977: PUSH
10978: LD_VAR 0 3
10982: PUSH
10983: LD_VAR 0 4
10987: ARRAY
10988: PPUSH
10989: CALL_OW 254
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: ADD
11003: ST_TO_ADDR
11004: GO 10917
11006: POP
11007: POP
// result := list ;
11008: LD_ADDR_VAR 0 2
11012: PUSH
11013: LD_VAR 0 5
11017: ST_TO_ADDR
// end ;
11018: LD_VAR 0 2
11022: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11023: LD_INT 0
11025: PPUSH
11026: PPUSH
11027: PPUSH
11028: PPUSH
11029: PPUSH
11030: PPUSH
11031: PPUSH
// if not factory then
11032: LD_VAR 0 1
11036: NOT
11037: IFFALSE 11041
// exit ;
11039: GO 11634
// if control = control_apeman then
11041: LD_VAR 0 4
11045: PUSH
11046: LD_INT 5
11048: EQUAL
11049: IFFALSE 11158
// begin tmp := UnitsInside ( factory ) ;
11051: LD_ADDR_VAR 0 8
11055: PUSH
11056: LD_VAR 0 1
11060: PPUSH
11061: CALL_OW 313
11065: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11066: LD_VAR 0 8
11070: PPUSH
11071: LD_INT 25
11073: PUSH
11074: LD_INT 12
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PPUSH
11081: CALL_OW 72
11085: NOT
11086: IFFALSE 11096
// control := control_manual ;
11088: LD_ADDR_VAR 0 4
11092: PUSH
11093: LD_INT 1
11095: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11096: LD_ADDR_VAR 0 8
11100: PUSH
11101: LD_VAR 0 1
11105: PPUSH
11106: CALL 10793 0 1
11110: ST_TO_ADDR
// if tmp then
11111: LD_VAR 0 8
11115: IFFALSE 11158
// begin for i in tmp do
11117: LD_ADDR_VAR 0 7
11121: PUSH
11122: LD_VAR 0 8
11126: PUSH
11127: FOR_IN
11128: IFFALSE 11156
// if i [ 1 ] = b_ext_radio then
11130: LD_VAR 0 7
11134: PUSH
11135: LD_INT 1
11137: ARRAY
11138: PUSH
11139: LD_INT 22
11141: EQUAL
11142: IFFALSE 11154
// begin control := control_remote ;
11144: LD_ADDR_VAR 0 4
11148: PUSH
11149: LD_INT 2
11151: ST_TO_ADDR
// break ;
11152: GO 11156
// end ;
11154: GO 11127
11156: POP
11157: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11158: LD_VAR 0 1
11162: PPUSH
11163: LD_VAR 0 2
11167: PPUSH
11168: LD_VAR 0 3
11172: PPUSH
11173: LD_VAR 0 4
11177: PPUSH
11178: LD_VAR 0 5
11182: PPUSH
11183: CALL_OW 448
11187: IFFALSE 11222
// begin result := [ chassis , engine , control , weapon ] ;
11189: LD_ADDR_VAR 0 6
11193: PUSH
11194: LD_VAR 0 2
11198: PUSH
11199: LD_VAR 0 3
11203: PUSH
11204: LD_VAR 0 4
11208: PUSH
11209: LD_VAR 0 5
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: ST_TO_ADDR
// exit ;
11220: GO 11634
// end ; _chassis := AvailableChassisList ( factory ) ;
11222: LD_ADDR_VAR 0 9
11226: PUSH
11227: LD_VAR 0 1
11231: PPUSH
11232: CALL_OW 475
11236: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11237: LD_ADDR_VAR 0 11
11241: PUSH
11242: LD_VAR 0 1
11246: PPUSH
11247: CALL_OW 476
11251: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11252: LD_ADDR_VAR 0 12
11256: PUSH
11257: LD_VAR 0 1
11261: PPUSH
11262: CALL_OW 477
11266: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11267: LD_ADDR_VAR 0 10
11271: PUSH
11272: LD_VAR 0 1
11276: PPUSH
11277: CALL_OW 478
11281: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11282: LD_VAR 0 9
11286: NOT
11287: PUSH
11288: LD_VAR 0 11
11292: NOT
11293: OR
11294: PUSH
11295: LD_VAR 0 12
11299: NOT
11300: OR
11301: PUSH
11302: LD_VAR 0 10
11306: NOT
11307: OR
11308: IFFALSE 11343
// begin result := [ chassis , engine , control , weapon ] ;
11310: LD_ADDR_VAR 0 6
11314: PUSH
11315: LD_VAR 0 2
11319: PUSH
11320: LD_VAR 0 3
11324: PUSH
11325: LD_VAR 0 4
11329: PUSH
11330: LD_VAR 0 5
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: ST_TO_ADDR
// exit ;
11341: GO 11634
// end ; if not chassis in _chassis then
11343: LD_VAR 0 2
11347: PUSH
11348: LD_VAR 0 9
11352: IN
11353: NOT
11354: IFFALSE 11380
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11356: LD_ADDR_VAR 0 2
11360: PUSH
11361: LD_VAR 0 9
11365: PUSH
11366: LD_INT 1
11368: PPUSH
11369: LD_VAR 0 9
11373: PPUSH
11374: CALL_OW 12
11378: ARRAY
11379: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11380: LD_VAR 0 2
11384: PPUSH
11385: LD_VAR 0 3
11389: PPUSH
11390: CALL 11639 0 2
11394: NOT
11395: IFFALSE 11454
// repeat engine := _engine [ 1 ] ;
11397: LD_ADDR_VAR 0 3
11401: PUSH
11402: LD_VAR 0 11
11406: PUSH
11407: LD_INT 1
11409: ARRAY
11410: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11411: LD_ADDR_VAR 0 11
11415: PUSH
11416: LD_VAR 0 11
11420: PPUSH
11421: LD_INT 1
11423: PPUSH
11424: CALL_OW 3
11428: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11429: LD_VAR 0 2
11433: PPUSH
11434: LD_VAR 0 3
11438: PPUSH
11439: CALL 11639 0 2
11443: PUSH
11444: LD_VAR 0 11
11448: PUSH
11449: EMPTY
11450: EQUAL
11451: OR
11452: IFFALSE 11397
// if not control in _control then
11454: LD_VAR 0 4
11458: PUSH
11459: LD_VAR 0 12
11463: IN
11464: NOT
11465: IFFALSE 11491
// control := _control [ rand ( 1 , _control ) ] ;
11467: LD_ADDR_VAR 0 4
11471: PUSH
11472: LD_VAR 0 12
11476: PUSH
11477: LD_INT 1
11479: PPUSH
11480: LD_VAR 0 12
11484: PPUSH
11485: CALL_OW 12
11489: ARRAY
11490: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11491: LD_VAR 0 2
11495: PPUSH
11496: LD_VAR 0 5
11500: PPUSH
11501: CALL 11859 0 2
11505: NOT
11506: IFFALSE 11565
// repeat weapon := _weapon [ 1 ] ;
11508: LD_ADDR_VAR 0 5
11512: PUSH
11513: LD_VAR 0 10
11517: PUSH
11518: LD_INT 1
11520: ARRAY
11521: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11522: LD_ADDR_VAR 0 10
11526: PUSH
11527: LD_VAR 0 10
11531: PPUSH
11532: LD_INT 1
11534: PPUSH
11535: CALL_OW 3
11539: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11540: LD_VAR 0 2
11544: PPUSH
11545: LD_VAR 0 5
11549: PPUSH
11550: CALL 11859 0 2
11554: PUSH
11555: LD_VAR 0 10
11559: PUSH
11560: EMPTY
11561: EQUAL
11562: OR
11563: IFFALSE 11508
// result := [ ] ;
11565: LD_ADDR_VAR 0 6
11569: PUSH
11570: EMPTY
11571: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11572: LD_VAR 0 1
11576: PPUSH
11577: LD_VAR 0 2
11581: PPUSH
11582: LD_VAR 0 3
11586: PPUSH
11587: LD_VAR 0 4
11591: PPUSH
11592: LD_VAR 0 5
11596: PPUSH
11597: CALL_OW 448
11601: IFFALSE 11634
// result := [ chassis , engine , control , weapon ] ;
11603: LD_ADDR_VAR 0 6
11607: PUSH
11608: LD_VAR 0 2
11612: PUSH
11613: LD_VAR 0 3
11617: PUSH
11618: LD_VAR 0 4
11622: PUSH
11623: LD_VAR 0 5
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: ST_TO_ADDR
// end ;
11634: LD_VAR 0 6
11638: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11639: LD_INT 0
11641: PPUSH
// if not chassis or not engine then
11642: LD_VAR 0 1
11646: NOT
11647: PUSH
11648: LD_VAR 0 2
11652: NOT
11653: OR
11654: IFFALSE 11658
// exit ;
11656: GO 11854
// case engine of engine_solar :
11658: LD_VAR 0 2
11662: PUSH
11663: LD_INT 2
11665: DOUBLE
11666: EQUAL
11667: IFTRUE 11671
11669: GO 11709
11671: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11672: LD_ADDR_VAR 0 3
11676: PUSH
11677: LD_INT 11
11679: PUSH
11680: LD_INT 12
11682: PUSH
11683: LD_INT 13
11685: PUSH
11686: LD_INT 14
11688: PUSH
11689: LD_INT 1
11691: PUSH
11692: LD_INT 2
11694: PUSH
11695: LD_INT 3
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: ST_TO_ADDR
11707: GO 11838
11709: LD_INT 1
11711: DOUBLE
11712: EQUAL
11713: IFTRUE 11717
11715: GO 11779
11717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11718: LD_ADDR_VAR 0 3
11722: PUSH
11723: LD_INT 11
11725: PUSH
11726: LD_INT 12
11728: PUSH
11729: LD_INT 13
11731: PUSH
11732: LD_INT 14
11734: PUSH
11735: LD_INT 1
11737: PUSH
11738: LD_INT 2
11740: PUSH
11741: LD_INT 3
11743: PUSH
11744: LD_INT 4
11746: PUSH
11747: LD_INT 5
11749: PUSH
11750: LD_INT 21
11752: PUSH
11753: LD_INT 23
11755: PUSH
11756: LD_INT 22
11758: PUSH
11759: LD_INT 24
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: ST_TO_ADDR
11777: GO 11838
11779: LD_INT 3
11781: DOUBLE
11782: EQUAL
11783: IFTRUE 11787
11785: GO 11837
11787: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11788: LD_ADDR_VAR 0 3
11792: PUSH
11793: LD_INT 13
11795: PUSH
11796: LD_INT 14
11798: PUSH
11799: LD_INT 2
11801: PUSH
11802: LD_INT 3
11804: PUSH
11805: LD_INT 4
11807: PUSH
11808: LD_INT 5
11810: PUSH
11811: LD_INT 21
11813: PUSH
11814: LD_INT 22
11816: PUSH
11817: LD_INT 23
11819: PUSH
11820: LD_INT 24
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: ST_TO_ADDR
11835: GO 11838
11837: POP
// result := ( chassis in result ) ;
11838: LD_ADDR_VAR 0 3
11842: PUSH
11843: LD_VAR 0 1
11847: PUSH
11848: LD_VAR 0 3
11852: IN
11853: ST_TO_ADDR
// end ;
11854: LD_VAR 0 3
11858: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
11859: LD_INT 0
11861: PPUSH
// if not chassis or not weapon then
11862: LD_VAR 0 1
11866: NOT
11867: PUSH
11868: LD_VAR 0 2
11872: NOT
11873: OR
11874: IFFALSE 11878
// exit ;
11876: GO 12940
// case weapon of us_machine_gun :
11878: LD_VAR 0 2
11882: PUSH
11883: LD_INT 2
11885: DOUBLE
11886: EQUAL
11887: IFTRUE 11891
11889: GO 11921
11891: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
11892: LD_ADDR_VAR 0 3
11896: PUSH
11897: LD_INT 1
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: LD_INT 3
11905: PUSH
11906: LD_INT 4
11908: PUSH
11909: LD_INT 5
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: ST_TO_ADDR
11919: GO 12924
11921: LD_INT 3
11923: DOUBLE
11924: EQUAL
11925: IFTRUE 11929
11927: GO 11959
11929: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
11930: LD_ADDR_VAR 0 3
11934: PUSH
11935: LD_INT 1
11937: PUSH
11938: LD_INT 2
11940: PUSH
11941: LD_INT 3
11943: PUSH
11944: LD_INT 4
11946: PUSH
11947: LD_INT 5
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: ST_TO_ADDR
11957: GO 12924
11959: LD_INT 11
11961: DOUBLE
11962: EQUAL
11963: IFTRUE 11967
11965: GO 11997
11967: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
11968: LD_ADDR_VAR 0 3
11972: PUSH
11973: LD_INT 1
11975: PUSH
11976: LD_INT 2
11978: PUSH
11979: LD_INT 3
11981: PUSH
11982: LD_INT 4
11984: PUSH
11985: LD_INT 5
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: ST_TO_ADDR
11995: GO 12924
11997: LD_INT 4
11999: DOUBLE
12000: EQUAL
12001: IFTRUE 12005
12003: GO 12031
12005: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12006: LD_ADDR_VAR 0 3
12010: PUSH
12011: LD_INT 2
12013: PUSH
12014: LD_INT 3
12016: PUSH
12017: LD_INT 4
12019: PUSH
12020: LD_INT 5
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: ST_TO_ADDR
12029: GO 12924
12031: LD_INT 5
12033: DOUBLE
12034: EQUAL
12035: IFTRUE 12039
12037: GO 12065
12039: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12040: LD_ADDR_VAR 0 3
12044: PUSH
12045: LD_INT 2
12047: PUSH
12048: LD_INT 3
12050: PUSH
12051: LD_INT 4
12053: PUSH
12054: LD_INT 5
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: ST_TO_ADDR
12063: GO 12924
12065: LD_INT 9
12067: DOUBLE
12068: EQUAL
12069: IFTRUE 12073
12071: GO 12099
12073: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12074: LD_ADDR_VAR 0 3
12078: PUSH
12079: LD_INT 2
12081: PUSH
12082: LD_INT 3
12084: PUSH
12085: LD_INT 4
12087: PUSH
12088: LD_INT 5
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: ST_TO_ADDR
12097: GO 12924
12099: LD_INT 7
12101: DOUBLE
12102: EQUAL
12103: IFTRUE 12107
12105: GO 12133
12107: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12108: LD_ADDR_VAR 0 3
12112: PUSH
12113: LD_INT 2
12115: PUSH
12116: LD_INT 3
12118: PUSH
12119: LD_INT 4
12121: PUSH
12122: LD_INT 5
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: ST_TO_ADDR
12131: GO 12924
12133: LD_INT 12
12135: DOUBLE
12136: EQUAL
12137: IFTRUE 12141
12139: GO 12167
12141: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12142: LD_ADDR_VAR 0 3
12146: PUSH
12147: LD_INT 2
12149: PUSH
12150: LD_INT 3
12152: PUSH
12153: LD_INT 4
12155: PUSH
12156: LD_INT 5
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: ST_TO_ADDR
12165: GO 12924
12167: LD_INT 13
12169: DOUBLE
12170: EQUAL
12171: IFTRUE 12175
12173: GO 12201
12175: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12176: LD_ADDR_VAR 0 3
12180: PUSH
12181: LD_INT 2
12183: PUSH
12184: LD_INT 3
12186: PUSH
12187: LD_INT 4
12189: PUSH
12190: LD_INT 5
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: ST_TO_ADDR
12199: GO 12924
12201: LD_INT 14
12203: DOUBLE
12204: EQUAL
12205: IFTRUE 12209
12207: GO 12227
12209: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12210: LD_ADDR_VAR 0 3
12214: PUSH
12215: LD_INT 4
12217: PUSH
12218: LD_INT 5
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: ST_TO_ADDR
12225: GO 12924
12227: LD_INT 6
12229: DOUBLE
12230: EQUAL
12231: IFTRUE 12235
12233: GO 12253
12235: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12236: LD_ADDR_VAR 0 3
12240: PUSH
12241: LD_INT 4
12243: PUSH
12244: LD_INT 5
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: ST_TO_ADDR
12251: GO 12924
12253: LD_INT 10
12255: DOUBLE
12256: EQUAL
12257: IFTRUE 12261
12259: GO 12279
12261: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12262: LD_ADDR_VAR 0 3
12266: PUSH
12267: LD_INT 4
12269: PUSH
12270: LD_INT 5
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: ST_TO_ADDR
12277: GO 12924
12279: LD_INT 22
12281: DOUBLE
12282: EQUAL
12283: IFTRUE 12287
12285: GO 12313
12287: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12288: LD_ADDR_VAR 0 3
12292: PUSH
12293: LD_INT 11
12295: PUSH
12296: LD_INT 12
12298: PUSH
12299: LD_INT 13
12301: PUSH
12302: LD_INT 14
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: ST_TO_ADDR
12311: GO 12924
12313: LD_INT 23
12315: DOUBLE
12316: EQUAL
12317: IFTRUE 12321
12319: GO 12347
12321: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12322: LD_ADDR_VAR 0 3
12326: PUSH
12327: LD_INT 11
12329: PUSH
12330: LD_INT 12
12332: PUSH
12333: LD_INT 13
12335: PUSH
12336: LD_INT 14
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: ST_TO_ADDR
12345: GO 12924
12347: LD_INT 24
12349: DOUBLE
12350: EQUAL
12351: IFTRUE 12355
12353: GO 12381
12355: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12356: LD_ADDR_VAR 0 3
12360: PUSH
12361: LD_INT 11
12363: PUSH
12364: LD_INT 12
12366: PUSH
12367: LD_INT 13
12369: PUSH
12370: LD_INT 14
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: ST_TO_ADDR
12379: GO 12924
12381: LD_INT 30
12383: DOUBLE
12384: EQUAL
12385: IFTRUE 12389
12387: GO 12415
12389: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12390: LD_ADDR_VAR 0 3
12394: PUSH
12395: LD_INT 11
12397: PUSH
12398: LD_INT 12
12400: PUSH
12401: LD_INT 13
12403: PUSH
12404: LD_INT 14
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: ST_TO_ADDR
12413: GO 12924
12415: LD_INT 25
12417: DOUBLE
12418: EQUAL
12419: IFTRUE 12423
12421: GO 12441
12423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12424: LD_ADDR_VAR 0 3
12428: PUSH
12429: LD_INT 13
12431: PUSH
12432: LD_INT 14
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: ST_TO_ADDR
12439: GO 12924
12441: LD_INT 27
12443: DOUBLE
12444: EQUAL
12445: IFTRUE 12449
12447: GO 12467
12449: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12450: LD_ADDR_VAR 0 3
12454: PUSH
12455: LD_INT 13
12457: PUSH
12458: LD_INT 14
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: ST_TO_ADDR
12465: GO 12924
12467: LD_EXP 83
12471: DOUBLE
12472: EQUAL
12473: IFTRUE 12477
12475: GO 12503
12477: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12478: LD_ADDR_VAR 0 3
12482: PUSH
12483: LD_INT 11
12485: PUSH
12486: LD_INT 12
12488: PUSH
12489: LD_INT 13
12491: PUSH
12492: LD_INT 14
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: ST_TO_ADDR
12501: GO 12924
12503: LD_INT 28
12505: DOUBLE
12506: EQUAL
12507: IFTRUE 12511
12509: GO 12529
12511: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12512: LD_ADDR_VAR 0 3
12516: PUSH
12517: LD_INT 13
12519: PUSH
12520: LD_INT 14
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: ST_TO_ADDR
12527: GO 12924
12529: LD_INT 29
12531: DOUBLE
12532: EQUAL
12533: IFTRUE 12537
12535: GO 12555
12537: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12538: LD_ADDR_VAR 0 3
12542: PUSH
12543: LD_INT 13
12545: PUSH
12546: LD_INT 14
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: ST_TO_ADDR
12553: GO 12924
12555: LD_INT 31
12557: DOUBLE
12558: EQUAL
12559: IFTRUE 12563
12561: GO 12581
12563: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12564: LD_ADDR_VAR 0 3
12568: PUSH
12569: LD_INT 13
12571: PUSH
12572: LD_INT 14
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: ST_TO_ADDR
12579: GO 12924
12581: LD_INT 26
12583: DOUBLE
12584: EQUAL
12585: IFTRUE 12589
12587: GO 12607
12589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12590: LD_ADDR_VAR 0 3
12594: PUSH
12595: LD_INT 13
12597: PUSH
12598: LD_INT 14
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: ST_TO_ADDR
12605: GO 12924
12607: LD_INT 42
12609: DOUBLE
12610: EQUAL
12611: IFTRUE 12615
12613: GO 12641
12615: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12616: LD_ADDR_VAR 0 3
12620: PUSH
12621: LD_INT 21
12623: PUSH
12624: LD_INT 22
12626: PUSH
12627: LD_INT 23
12629: PUSH
12630: LD_INT 24
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: ST_TO_ADDR
12639: GO 12924
12641: LD_INT 43
12643: DOUBLE
12644: EQUAL
12645: IFTRUE 12649
12647: GO 12675
12649: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12650: LD_ADDR_VAR 0 3
12654: PUSH
12655: LD_INT 21
12657: PUSH
12658: LD_INT 22
12660: PUSH
12661: LD_INT 23
12663: PUSH
12664: LD_INT 24
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: ST_TO_ADDR
12673: GO 12924
12675: LD_INT 44
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12709
12683: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12684: LD_ADDR_VAR 0 3
12688: PUSH
12689: LD_INT 21
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_INT 23
12697: PUSH
12698: LD_INT 24
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: ST_TO_ADDR
12707: GO 12924
12709: LD_INT 45
12711: DOUBLE
12712: EQUAL
12713: IFTRUE 12717
12715: GO 12743
12717: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12718: LD_ADDR_VAR 0 3
12722: PUSH
12723: LD_INT 21
12725: PUSH
12726: LD_INT 22
12728: PUSH
12729: LD_INT 23
12731: PUSH
12732: LD_INT 24
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: ST_TO_ADDR
12741: GO 12924
12743: LD_INT 49
12745: DOUBLE
12746: EQUAL
12747: IFTRUE 12751
12749: GO 12777
12751: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12752: LD_ADDR_VAR 0 3
12756: PUSH
12757: LD_INT 21
12759: PUSH
12760: LD_INT 22
12762: PUSH
12763: LD_INT 23
12765: PUSH
12766: LD_INT 24
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: ST_TO_ADDR
12775: GO 12924
12777: LD_INT 51
12779: DOUBLE
12780: EQUAL
12781: IFTRUE 12785
12783: GO 12811
12785: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12786: LD_ADDR_VAR 0 3
12790: PUSH
12791: LD_INT 21
12793: PUSH
12794: LD_INT 22
12796: PUSH
12797: LD_INT 23
12799: PUSH
12800: LD_INT 24
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: ST_TO_ADDR
12809: GO 12924
12811: LD_INT 52
12813: DOUBLE
12814: EQUAL
12815: IFTRUE 12819
12817: GO 12845
12819: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12820: LD_ADDR_VAR 0 3
12824: PUSH
12825: LD_INT 21
12827: PUSH
12828: LD_INT 22
12830: PUSH
12831: LD_INT 23
12833: PUSH
12834: LD_INT 24
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: ST_TO_ADDR
12843: GO 12924
12845: LD_INT 53
12847: DOUBLE
12848: EQUAL
12849: IFTRUE 12853
12851: GO 12871
12853: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
12854: LD_ADDR_VAR 0 3
12858: PUSH
12859: LD_INT 23
12861: PUSH
12862: LD_INT 24
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: ST_TO_ADDR
12869: GO 12924
12871: LD_INT 46
12873: DOUBLE
12874: EQUAL
12875: IFTRUE 12879
12877: GO 12897
12879: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
12880: LD_ADDR_VAR 0 3
12884: PUSH
12885: LD_INT 23
12887: PUSH
12888: LD_INT 24
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: ST_TO_ADDR
12895: GO 12924
12897: LD_INT 47
12899: DOUBLE
12900: EQUAL
12901: IFTRUE 12905
12903: GO 12923
12905: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12906: LD_ADDR_VAR 0 3
12910: PUSH
12911: LD_INT 23
12913: PUSH
12914: LD_INT 24
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: ST_TO_ADDR
12921: GO 12924
12923: POP
// result := ( chassis in result ) ;
12924: LD_ADDR_VAR 0 3
12928: PUSH
12929: LD_VAR 0 1
12933: PUSH
12934: LD_VAR 0 3
12938: IN
12939: ST_TO_ADDR
// end ;
12940: LD_VAR 0 3
12944: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
12945: LD_INT 0
12947: PPUSH
12948: PPUSH
12949: PPUSH
12950: PPUSH
12951: PPUSH
12952: PPUSH
12953: PPUSH
// result := array ;
12954: LD_ADDR_VAR 0 5
12958: PUSH
12959: LD_VAR 0 1
12963: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
12964: LD_VAR 0 1
12968: NOT
12969: PUSH
12970: LD_VAR 0 2
12974: NOT
12975: OR
12976: PUSH
12977: LD_VAR 0 3
12981: NOT
12982: OR
12983: PUSH
12984: LD_VAR 0 2
12988: PUSH
12989: LD_VAR 0 1
12993: GREATER
12994: OR
12995: PUSH
12996: LD_VAR 0 3
13000: PUSH
13001: LD_VAR 0 1
13005: GREATER
13006: OR
13007: IFFALSE 13011
// exit ;
13009: GO 13307
// if direction then
13011: LD_VAR 0 4
13015: IFFALSE 13079
// begin d := 1 ;
13017: LD_ADDR_VAR 0 9
13021: PUSH
13022: LD_INT 1
13024: ST_TO_ADDR
// if i_from > i_to then
13025: LD_VAR 0 2
13029: PUSH
13030: LD_VAR 0 3
13034: GREATER
13035: IFFALSE 13061
// length := ( array - i_from ) + i_to else
13037: LD_ADDR_VAR 0 11
13041: PUSH
13042: LD_VAR 0 1
13046: PUSH
13047: LD_VAR 0 2
13051: MINUS
13052: PUSH
13053: LD_VAR 0 3
13057: PLUS
13058: ST_TO_ADDR
13059: GO 13077
// length := i_to - i_from ;
13061: LD_ADDR_VAR 0 11
13065: PUSH
13066: LD_VAR 0 3
13070: PUSH
13071: LD_VAR 0 2
13075: MINUS
13076: ST_TO_ADDR
// end else
13077: GO 13140
// begin d := - 1 ;
13079: LD_ADDR_VAR 0 9
13083: PUSH
13084: LD_INT 1
13086: NEG
13087: ST_TO_ADDR
// if i_from > i_to then
13088: LD_VAR 0 2
13092: PUSH
13093: LD_VAR 0 3
13097: GREATER
13098: IFFALSE 13118
// length := i_from - i_to else
13100: LD_ADDR_VAR 0 11
13104: PUSH
13105: LD_VAR 0 2
13109: PUSH
13110: LD_VAR 0 3
13114: MINUS
13115: ST_TO_ADDR
13116: GO 13140
// length := ( array - i_to ) + i_from ;
13118: LD_ADDR_VAR 0 11
13122: PUSH
13123: LD_VAR 0 1
13127: PUSH
13128: LD_VAR 0 3
13132: MINUS
13133: PUSH
13134: LD_VAR 0 2
13138: PLUS
13139: ST_TO_ADDR
// end ; if not length then
13140: LD_VAR 0 11
13144: NOT
13145: IFFALSE 13149
// exit ;
13147: GO 13307
// tmp := array ;
13149: LD_ADDR_VAR 0 10
13153: PUSH
13154: LD_VAR 0 1
13158: ST_TO_ADDR
// for i = 1 to length do
13159: LD_ADDR_VAR 0 6
13163: PUSH
13164: DOUBLE
13165: LD_INT 1
13167: DEC
13168: ST_TO_ADDR
13169: LD_VAR 0 11
13173: PUSH
13174: FOR_TO
13175: IFFALSE 13295
// begin for j = 1 to array do
13177: LD_ADDR_VAR 0 7
13181: PUSH
13182: DOUBLE
13183: LD_INT 1
13185: DEC
13186: ST_TO_ADDR
13187: LD_VAR 0 1
13191: PUSH
13192: FOR_TO
13193: IFFALSE 13281
// begin k := j + d ;
13195: LD_ADDR_VAR 0 8
13199: PUSH
13200: LD_VAR 0 7
13204: PUSH
13205: LD_VAR 0 9
13209: PLUS
13210: ST_TO_ADDR
// if k > array then
13211: LD_VAR 0 8
13215: PUSH
13216: LD_VAR 0 1
13220: GREATER
13221: IFFALSE 13231
// k := 1 ;
13223: LD_ADDR_VAR 0 8
13227: PUSH
13228: LD_INT 1
13230: ST_TO_ADDR
// if not k then
13231: LD_VAR 0 8
13235: NOT
13236: IFFALSE 13248
// k := array ;
13238: LD_ADDR_VAR 0 8
13242: PUSH
13243: LD_VAR 0 1
13247: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13248: LD_ADDR_VAR 0 10
13252: PUSH
13253: LD_VAR 0 10
13257: PPUSH
13258: LD_VAR 0 8
13262: PPUSH
13263: LD_VAR 0 1
13267: PUSH
13268: LD_VAR 0 7
13272: ARRAY
13273: PPUSH
13274: CALL_OW 1
13278: ST_TO_ADDR
// end ;
13279: GO 13192
13281: POP
13282: POP
// array := tmp ;
13283: LD_ADDR_VAR 0 1
13287: PUSH
13288: LD_VAR 0 10
13292: ST_TO_ADDR
// end ;
13293: GO 13174
13295: POP
13296: POP
// result := array ;
13297: LD_ADDR_VAR 0 5
13301: PUSH
13302: LD_VAR 0 1
13306: ST_TO_ADDR
// end ;
13307: LD_VAR 0 5
13311: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13312: LD_INT 0
13314: PPUSH
13315: PPUSH
// result := 0 ;
13316: LD_ADDR_VAR 0 3
13320: PUSH
13321: LD_INT 0
13323: ST_TO_ADDR
// if not array or not value in array then
13324: LD_VAR 0 1
13328: NOT
13329: PUSH
13330: LD_VAR 0 2
13334: PUSH
13335: LD_VAR 0 1
13339: IN
13340: NOT
13341: OR
13342: IFFALSE 13346
// exit ;
13344: GO 13400
// for i = 1 to array do
13346: LD_ADDR_VAR 0 4
13350: PUSH
13351: DOUBLE
13352: LD_INT 1
13354: DEC
13355: ST_TO_ADDR
13356: LD_VAR 0 1
13360: PUSH
13361: FOR_TO
13362: IFFALSE 13398
// if value = array [ i ] then
13364: LD_VAR 0 2
13368: PUSH
13369: LD_VAR 0 1
13373: PUSH
13374: LD_VAR 0 4
13378: ARRAY
13379: EQUAL
13380: IFFALSE 13396
// begin result := i ;
13382: LD_ADDR_VAR 0 3
13386: PUSH
13387: LD_VAR 0 4
13391: ST_TO_ADDR
// exit ;
13392: POP
13393: POP
13394: GO 13400
// end ;
13396: GO 13361
13398: POP
13399: POP
// end ;
13400: LD_VAR 0 3
13404: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13405: LD_INT 0
13407: PPUSH
// vc_chassis := chassis ;
13408: LD_ADDR_OWVAR 37
13412: PUSH
13413: LD_VAR 0 1
13417: ST_TO_ADDR
// vc_engine := engine ;
13418: LD_ADDR_OWVAR 39
13422: PUSH
13423: LD_VAR 0 2
13427: ST_TO_ADDR
// vc_control := control ;
13428: LD_ADDR_OWVAR 38
13432: PUSH
13433: LD_VAR 0 3
13437: ST_TO_ADDR
// vc_weapon := weapon ;
13438: LD_ADDR_OWVAR 40
13442: PUSH
13443: LD_VAR 0 4
13447: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13448: LD_ADDR_OWVAR 41
13452: PUSH
13453: LD_VAR 0 5
13457: ST_TO_ADDR
// end ;
13458: LD_VAR 0 6
13462: RET
// export function WantPlant ( unit ) ; var task ; begin
13463: LD_INT 0
13465: PPUSH
13466: PPUSH
// result := false ;
13467: LD_ADDR_VAR 0 2
13471: PUSH
13472: LD_INT 0
13474: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13475: LD_ADDR_VAR 0 3
13479: PUSH
13480: LD_VAR 0 1
13484: PPUSH
13485: CALL_OW 437
13489: ST_TO_ADDR
// if task then
13490: LD_VAR 0 3
13494: IFFALSE 13522
// if task [ 1 ] [ 1 ] = p then
13496: LD_VAR 0 3
13500: PUSH
13501: LD_INT 1
13503: ARRAY
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PUSH
13509: LD_STRING p
13511: EQUAL
13512: IFFALSE 13522
// result := true ;
13514: LD_ADDR_VAR 0 2
13518: PUSH
13519: LD_INT 1
13521: ST_TO_ADDR
// end ;
13522: LD_VAR 0 2
13526: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13527: LD_INT 0
13529: PPUSH
13530: PPUSH
13531: PPUSH
13532: PPUSH
// if pos < 1 then
13533: LD_VAR 0 2
13537: PUSH
13538: LD_INT 1
13540: LESS
13541: IFFALSE 13545
// exit ;
13543: GO 13848
// if pos = 1 then
13545: LD_VAR 0 2
13549: PUSH
13550: LD_INT 1
13552: EQUAL
13553: IFFALSE 13586
// result := Replace ( arr , pos [ 1 ] , value ) else
13555: LD_ADDR_VAR 0 4
13559: PUSH
13560: LD_VAR 0 1
13564: PPUSH
13565: LD_VAR 0 2
13569: PUSH
13570: LD_INT 1
13572: ARRAY
13573: PPUSH
13574: LD_VAR 0 3
13578: PPUSH
13579: CALL_OW 1
13583: ST_TO_ADDR
13584: GO 13848
// begin tmp := arr ;
13586: LD_ADDR_VAR 0 6
13590: PUSH
13591: LD_VAR 0 1
13595: ST_TO_ADDR
// s_arr := [ tmp ] ;
13596: LD_ADDR_VAR 0 7
13600: PUSH
13601: LD_VAR 0 6
13605: PUSH
13606: EMPTY
13607: LIST
13608: ST_TO_ADDR
// for i = 1 to pos - 1 do
13609: LD_ADDR_VAR 0 5
13613: PUSH
13614: DOUBLE
13615: LD_INT 1
13617: DEC
13618: ST_TO_ADDR
13619: LD_VAR 0 2
13623: PUSH
13624: LD_INT 1
13626: MINUS
13627: PUSH
13628: FOR_TO
13629: IFFALSE 13674
// begin tmp := tmp [ pos [ i ] ] ;
13631: LD_ADDR_VAR 0 6
13635: PUSH
13636: LD_VAR 0 6
13640: PUSH
13641: LD_VAR 0 2
13645: PUSH
13646: LD_VAR 0 5
13650: ARRAY
13651: ARRAY
13652: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13653: LD_ADDR_VAR 0 7
13657: PUSH
13658: LD_VAR 0 7
13662: PUSH
13663: LD_VAR 0 6
13667: PUSH
13668: EMPTY
13669: LIST
13670: ADD
13671: ST_TO_ADDR
// end ;
13672: GO 13628
13674: POP
13675: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13676: LD_ADDR_VAR 0 6
13680: PUSH
13681: LD_VAR 0 6
13685: PPUSH
13686: LD_VAR 0 2
13690: PUSH
13691: LD_VAR 0 2
13695: ARRAY
13696: PPUSH
13697: LD_VAR 0 3
13701: PPUSH
13702: CALL_OW 1
13706: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13707: LD_ADDR_VAR 0 7
13711: PUSH
13712: LD_VAR 0 7
13716: PPUSH
13717: LD_VAR 0 7
13721: PPUSH
13722: LD_VAR 0 6
13726: PPUSH
13727: CALL_OW 1
13731: ST_TO_ADDR
// for i = s_arr downto 2 do
13732: LD_ADDR_VAR 0 5
13736: PUSH
13737: DOUBLE
13738: LD_VAR 0 7
13742: INC
13743: ST_TO_ADDR
13744: LD_INT 2
13746: PUSH
13747: FOR_DOWNTO
13748: IFFALSE 13832
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13750: LD_ADDR_VAR 0 6
13754: PUSH
13755: LD_VAR 0 7
13759: PUSH
13760: LD_VAR 0 5
13764: PUSH
13765: LD_INT 1
13767: MINUS
13768: ARRAY
13769: PPUSH
13770: LD_VAR 0 2
13774: PUSH
13775: LD_VAR 0 5
13779: PUSH
13780: LD_INT 1
13782: MINUS
13783: ARRAY
13784: PPUSH
13785: LD_VAR 0 7
13789: PUSH
13790: LD_VAR 0 5
13794: ARRAY
13795: PPUSH
13796: CALL_OW 1
13800: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13801: LD_ADDR_VAR 0 7
13805: PUSH
13806: LD_VAR 0 7
13810: PPUSH
13811: LD_VAR 0 5
13815: PUSH
13816: LD_INT 1
13818: MINUS
13819: PPUSH
13820: LD_VAR 0 6
13824: PPUSH
13825: CALL_OW 1
13829: ST_TO_ADDR
// end ;
13830: GO 13747
13832: POP
13833: POP
// result := s_arr [ 1 ] ;
13834: LD_ADDR_VAR 0 4
13838: PUSH
13839: LD_VAR 0 7
13843: PUSH
13844: LD_INT 1
13846: ARRAY
13847: ST_TO_ADDR
// end ; end ;
13848: LD_VAR 0 4
13852: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
13853: LD_INT 0
13855: PPUSH
13856: PPUSH
// if not list then
13857: LD_VAR 0 1
13861: NOT
13862: IFFALSE 13866
// exit ;
13864: GO 13957
// i := list [ pos1 ] ;
13866: LD_ADDR_VAR 0 5
13870: PUSH
13871: LD_VAR 0 1
13875: PUSH
13876: LD_VAR 0 2
13880: ARRAY
13881: ST_TO_ADDR
// if not i then
13882: LD_VAR 0 5
13886: NOT
13887: IFFALSE 13891
// exit ;
13889: GO 13957
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
13891: LD_ADDR_VAR 0 1
13895: PUSH
13896: LD_VAR 0 1
13900: PPUSH
13901: LD_VAR 0 2
13905: PPUSH
13906: LD_VAR 0 1
13910: PUSH
13911: LD_VAR 0 3
13915: ARRAY
13916: PPUSH
13917: CALL_OW 1
13921: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
13922: LD_ADDR_VAR 0 1
13926: PUSH
13927: LD_VAR 0 1
13931: PPUSH
13932: LD_VAR 0 3
13936: PPUSH
13937: LD_VAR 0 5
13941: PPUSH
13942: CALL_OW 1
13946: ST_TO_ADDR
// result := list ;
13947: LD_ADDR_VAR 0 4
13951: PUSH
13952: LD_VAR 0 1
13956: ST_TO_ADDR
// end ;
13957: LD_VAR 0 4
13961: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
13962: LD_INT 0
13964: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
13965: LD_ADDR_VAR 0 5
13969: PUSH
13970: LD_VAR 0 1
13974: PPUSH
13975: CALL_OW 250
13979: PPUSH
13980: LD_VAR 0 1
13984: PPUSH
13985: CALL_OW 251
13989: PPUSH
13990: LD_VAR 0 2
13994: PPUSH
13995: LD_VAR 0 3
13999: PPUSH
14000: LD_VAR 0 4
14004: PPUSH
14005: CALL 14015 0 5
14009: ST_TO_ADDR
// end ;
14010: LD_VAR 0 5
14014: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14015: LD_INT 0
14017: PPUSH
14018: PPUSH
14019: PPUSH
14020: PPUSH
// if not list then
14021: LD_VAR 0 3
14025: NOT
14026: IFFALSE 14030
// exit ;
14028: GO 14418
// result := [ ] ;
14030: LD_ADDR_VAR 0 6
14034: PUSH
14035: EMPTY
14036: ST_TO_ADDR
// for i in list do
14037: LD_ADDR_VAR 0 7
14041: PUSH
14042: LD_VAR 0 3
14046: PUSH
14047: FOR_IN
14048: IFFALSE 14250
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14050: LD_ADDR_VAR 0 9
14054: PUSH
14055: LD_VAR 0 7
14059: PPUSH
14060: LD_VAR 0 1
14064: PPUSH
14065: LD_VAR 0 2
14069: PPUSH
14070: CALL_OW 297
14074: ST_TO_ADDR
// if not result then
14075: LD_VAR 0 6
14079: NOT
14080: IFFALSE 14106
// result := [ [ i , tmp ] ] else
14082: LD_ADDR_VAR 0 6
14086: PUSH
14087: LD_VAR 0 7
14091: PUSH
14092: LD_VAR 0 9
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: EMPTY
14102: LIST
14103: ST_TO_ADDR
14104: GO 14248
// begin if result [ result ] [ 2 ] < tmp then
14106: LD_VAR 0 6
14110: PUSH
14111: LD_VAR 0 6
14115: ARRAY
14116: PUSH
14117: LD_INT 2
14119: ARRAY
14120: PUSH
14121: LD_VAR 0 9
14125: LESS
14126: IFFALSE 14168
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14128: LD_ADDR_VAR 0 6
14132: PUSH
14133: LD_VAR 0 6
14137: PPUSH
14138: LD_VAR 0 6
14142: PUSH
14143: LD_INT 1
14145: PLUS
14146: PPUSH
14147: LD_VAR 0 7
14151: PUSH
14152: LD_VAR 0 9
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PPUSH
14161: CALL_OW 2
14165: ST_TO_ADDR
14166: GO 14248
// for j = 1 to result do
14168: LD_ADDR_VAR 0 8
14172: PUSH
14173: DOUBLE
14174: LD_INT 1
14176: DEC
14177: ST_TO_ADDR
14178: LD_VAR 0 6
14182: PUSH
14183: FOR_TO
14184: IFFALSE 14246
// begin if tmp < result [ j ] [ 2 ] then
14186: LD_VAR 0 9
14190: PUSH
14191: LD_VAR 0 6
14195: PUSH
14196: LD_VAR 0 8
14200: ARRAY
14201: PUSH
14202: LD_INT 2
14204: ARRAY
14205: LESS
14206: IFFALSE 14244
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14208: LD_ADDR_VAR 0 6
14212: PUSH
14213: LD_VAR 0 6
14217: PPUSH
14218: LD_VAR 0 8
14222: PPUSH
14223: LD_VAR 0 7
14227: PUSH
14228: LD_VAR 0 9
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PPUSH
14237: CALL_OW 2
14241: ST_TO_ADDR
// break ;
14242: GO 14246
// end ; end ;
14244: GO 14183
14246: POP
14247: POP
// end ; end ;
14248: GO 14047
14250: POP
14251: POP
// if result and not asc then
14252: LD_VAR 0 6
14256: PUSH
14257: LD_VAR 0 4
14261: NOT
14262: AND
14263: IFFALSE 14338
// begin tmp := result ;
14265: LD_ADDR_VAR 0 9
14269: PUSH
14270: LD_VAR 0 6
14274: ST_TO_ADDR
// for i = tmp downto 1 do
14275: LD_ADDR_VAR 0 7
14279: PUSH
14280: DOUBLE
14281: LD_VAR 0 9
14285: INC
14286: ST_TO_ADDR
14287: LD_INT 1
14289: PUSH
14290: FOR_DOWNTO
14291: IFFALSE 14336
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14293: LD_ADDR_VAR 0 6
14297: PUSH
14298: LD_VAR 0 6
14302: PPUSH
14303: LD_VAR 0 9
14307: PUSH
14308: LD_VAR 0 7
14312: MINUS
14313: PUSH
14314: LD_INT 1
14316: PLUS
14317: PPUSH
14318: LD_VAR 0 9
14322: PUSH
14323: LD_VAR 0 7
14327: ARRAY
14328: PPUSH
14329: CALL_OW 1
14333: ST_TO_ADDR
14334: GO 14290
14336: POP
14337: POP
// end ; tmp := [ ] ;
14338: LD_ADDR_VAR 0 9
14342: PUSH
14343: EMPTY
14344: ST_TO_ADDR
// if mode then
14345: LD_VAR 0 5
14349: IFFALSE 14418
// begin for i = 1 to result do
14351: LD_ADDR_VAR 0 7
14355: PUSH
14356: DOUBLE
14357: LD_INT 1
14359: DEC
14360: ST_TO_ADDR
14361: LD_VAR 0 6
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14406
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14369: LD_ADDR_VAR 0 9
14373: PUSH
14374: LD_VAR 0 9
14378: PPUSH
14379: LD_VAR 0 7
14383: PPUSH
14384: LD_VAR 0 6
14388: PUSH
14389: LD_VAR 0 7
14393: ARRAY
14394: PUSH
14395: LD_INT 1
14397: ARRAY
14398: PPUSH
14399: CALL_OW 1
14403: ST_TO_ADDR
14404: GO 14366
14406: POP
14407: POP
// result := tmp ;
14408: LD_ADDR_VAR 0 6
14412: PUSH
14413: LD_VAR 0 9
14417: ST_TO_ADDR
// end ; end ;
14418: LD_VAR 0 6
14422: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14423: LD_INT 0
14425: PPUSH
14426: PPUSH
14427: PPUSH
14428: PPUSH
14429: PPUSH
14430: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14431: LD_ADDR_VAR 0 5
14435: PUSH
14436: LD_INT 0
14438: PUSH
14439: LD_INT 0
14441: PUSH
14442: LD_INT 0
14444: PUSH
14445: EMPTY
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: ST_TO_ADDR
// if not x or not y then
14453: LD_VAR 0 2
14457: NOT
14458: PUSH
14459: LD_VAR 0 3
14463: NOT
14464: OR
14465: IFFALSE 14469
// exit ;
14467: GO 16121
// if not range then
14469: LD_VAR 0 4
14473: NOT
14474: IFFALSE 14484
// range := 10 ;
14476: LD_ADDR_VAR 0 4
14480: PUSH
14481: LD_INT 10
14483: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14484: LD_ADDR_VAR 0 8
14488: PUSH
14489: LD_INT 81
14491: PUSH
14492: LD_VAR 0 1
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PUSH
14501: LD_INT 92
14503: PUSH
14504: LD_VAR 0 2
14508: PUSH
14509: LD_VAR 0 3
14513: PUSH
14514: LD_VAR 0 4
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: PUSH
14525: LD_INT 3
14527: PUSH
14528: LD_INT 21
14530: PUSH
14531: LD_INT 3
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: LIST
14546: PPUSH
14547: CALL_OW 69
14551: ST_TO_ADDR
// if not tmp then
14552: LD_VAR 0 8
14556: NOT
14557: IFFALSE 14561
// exit ;
14559: GO 16121
// for i in tmp do
14561: LD_ADDR_VAR 0 6
14565: PUSH
14566: LD_VAR 0 8
14570: PUSH
14571: FOR_IN
14572: IFFALSE 16096
// begin points := [ 0 , 0 , 0 ] ;
14574: LD_ADDR_VAR 0 9
14578: PUSH
14579: LD_INT 0
14581: PUSH
14582: LD_INT 0
14584: PUSH
14585: LD_INT 0
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: ST_TO_ADDR
// bpoints := 1 ;
14593: LD_ADDR_VAR 0 10
14597: PUSH
14598: LD_INT 1
14600: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14601: LD_VAR 0 6
14605: PPUSH
14606: CALL_OW 247
14610: PUSH
14611: LD_INT 1
14613: DOUBLE
14614: EQUAL
14615: IFTRUE 14619
14617: GO 15197
14619: POP
// begin if GetClass ( i ) = 1 then
14620: LD_VAR 0 6
14624: PPUSH
14625: CALL_OW 257
14629: PUSH
14630: LD_INT 1
14632: EQUAL
14633: IFFALSE 14654
// points := [ 10 , 5 , 3 ] ;
14635: LD_ADDR_VAR 0 9
14639: PUSH
14640: LD_INT 10
14642: PUSH
14643: LD_INT 5
14645: PUSH
14646: LD_INT 3
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: LIST
14653: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14654: LD_VAR 0 6
14658: PPUSH
14659: CALL_OW 257
14663: PUSH
14664: LD_INT 2
14666: PUSH
14667: LD_INT 3
14669: PUSH
14670: LD_INT 4
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: IN
14678: IFFALSE 14699
// points := [ 3 , 2 , 1 ] ;
14680: LD_ADDR_VAR 0 9
14684: PUSH
14685: LD_INT 3
14687: PUSH
14688: LD_INT 2
14690: PUSH
14691: LD_INT 1
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14699: LD_VAR 0 6
14703: PPUSH
14704: CALL_OW 257
14708: PUSH
14709: LD_INT 5
14711: EQUAL
14712: IFFALSE 14733
// points := [ 130 , 5 , 2 ] ;
14714: LD_ADDR_VAR 0 9
14718: PUSH
14719: LD_INT 130
14721: PUSH
14722: LD_INT 5
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14733: LD_VAR 0 6
14737: PPUSH
14738: CALL_OW 257
14742: PUSH
14743: LD_INT 8
14745: EQUAL
14746: IFFALSE 14767
// points := [ 35 , 35 , 30 ] ;
14748: LD_ADDR_VAR 0 9
14752: PUSH
14753: LD_INT 35
14755: PUSH
14756: LD_INT 35
14758: PUSH
14759: LD_INT 30
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: LIST
14766: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14767: LD_VAR 0 6
14771: PPUSH
14772: CALL_OW 257
14776: PUSH
14777: LD_INT 9
14779: EQUAL
14780: IFFALSE 14801
// points := [ 20 , 55 , 40 ] ;
14782: LD_ADDR_VAR 0 9
14786: PUSH
14787: LD_INT 20
14789: PUSH
14790: LD_INT 55
14792: PUSH
14793: LD_INT 40
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14801: LD_VAR 0 6
14805: PPUSH
14806: CALL_OW 257
14810: PUSH
14811: LD_INT 12
14813: PUSH
14814: LD_INT 16
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: IN
14821: IFFALSE 14842
// points := [ 5 , 3 , 2 ] ;
14823: LD_ADDR_VAR 0 9
14827: PUSH
14828: LD_INT 5
14830: PUSH
14831: LD_INT 3
14833: PUSH
14834: LD_INT 2
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: ST_TO_ADDR
// if GetClass ( i ) = 17 then
14842: LD_VAR 0 6
14846: PPUSH
14847: CALL_OW 257
14851: PUSH
14852: LD_INT 17
14854: EQUAL
14855: IFFALSE 14876
// points := [ 100 , 50 , 75 ] ;
14857: LD_ADDR_VAR 0 9
14861: PUSH
14862: LD_INT 100
14864: PUSH
14865: LD_INT 50
14867: PUSH
14868: LD_INT 75
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: LIST
14875: ST_TO_ADDR
// if GetClass ( i ) = 15 then
14876: LD_VAR 0 6
14880: PPUSH
14881: CALL_OW 257
14885: PUSH
14886: LD_INT 15
14888: EQUAL
14889: IFFALSE 14910
// points := [ 10 , 5 , 3 ] ;
14891: LD_ADDR_VAR 0 9
14895: PUSH
14896: LD_INT 10
14898: PUSH
14899: LD_INT 5
14901: PUSH
14902: LD_INT 3
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: ST_TO_ADDR
// if GetClass ( i ) = 14 then
14910: LD_VAR 0 6
14914: PPUSH
14915: CALL_OW 257
14919: PUSH
14920: LD_INT 14
14922: EQUAL
14923: IFFALSE 14944
// points := [ 10 , 0 , 0 ] ;
14925: LD_ADDR_VAR 0 9
14929: PUSH
14930: LD_INT 10
14932: PUSH
14933: LD_INT 0
14935: PUSH
14936: LD_INT 0
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: ST_TO_ADDR
// if GetClass ( i ) = 11 then
14944: LD_VAR 0 6
14948: PPUSH
14949: CALL_OW 257
14953: PUSH
14954: LD_INT 11
14956: EQUAL
14957: IFFALSE 14978
// points := [ 30 , 10 , 5 ] ;
14959: LD_ADDR_VAR 0 9
14963: PUSH
14964: LD_INT 30
14966: PUSH
14967: LD_INT 10
14969: PUSH
14970: LD_INT 5
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: LIST
14977: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
14978: LD_VAR 0 1
14982: PPUSH
14983: LD_INT 5
14985: PPUSH
14986: CALL_OW 321
14990: PUSH
14991: LD_INT 2
14993: EQUAL
14994: IFFALSE 15011
// bpoints := bpoints * 1.8 ;
14996: LD_ADDR_VAR 0 10
15000: PUSH
15001: LD_VAR 0 10
15005: PUSH
15006: LD_REAL  1.80000000000000E+0000
15009: MUL
15010: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15011: LD_VAR 0 6
15015: PPUSH
15016: CALL_OW 257
15020: PUSH
15021: LD_INT 1
15023: PUSH
15024: LD_INT 2
15026: PUSH
15027: LD_INT 3
15029: PUSH
15030: LD_INT 4
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: IN
15039: PUSH
15040: LD_VAR 0 1
15044: PPUSH
15045: LD_INT 51
15047: PPUSH
15048: CALL_OW 321
15052: PUSH
15053: LD_INT 2
15055: EQUAL
15056: AND
15057: IFFALSE 15074
// bpoints := bpoints * 1.2 ;
15059: LD_ADDR_VAR 0 10
15063: PUSH
15064: LD_VAR 0 10
15068: PUSH
15069: LD_REAL  1.20000000000000E+0000
15072: MUL
15073: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15074: LD_VAR 0 6
15078: PPUSH
15079: CALL_OW 257
15083: PUSH
15084: LD_INT 5
15086: PUSH
15087: LD_INT 7
15089: PUSH
15090: LD_INT 9
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: LIST
15097: IN
15098: PUSH
15099: LD_VAR 0 1
15103: PPUSH
15104: LD_INT 52
15106: PPUSH
15107: CALL_OW 321
15111: PUSH
15112: LD_INT 2
15114: EQUAL
15115: AND
15116: IFFALSE 15133
// bpoints := bpoints * 1.5 ;
15118: LD_ADDR_VAR 0 10
15122: PUSH
15123: LD_VAR 0 10
15127: PUSH
15128: LD_REAL  1.50000000000000E+0000
15131: MUL
15132: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15133: LD_VAR 0 1
15137: PPUSH
15138: LD_INT 66
15140: PPUSH
15141: CALL_OW 321
15145: PUSH
15146: LD_INT 2
15148: EQUAL
15149: IFFALSE 15166
// bpoints := bpoints * 1.1 ;
15151: LD_ADDR_VAR 0 10
15155: PUSH
15156: LD_VAR 0 10
15160: PUSH
15161: LD_REAL  1.10000000000000E+0000
15164: MUL
15165: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15166: LD_ADDR_VAR 0 10
15170: PUSH
15171: LD_VAR 0 10
15175: PUSH
15176: LD_VAR 0 6
15180: PPUSH
15181: LD_INT 1
15183: PPUSH
15184: CALL_OW 259
15188: PUSH
15189: LD_REAL  1.15000000000000E+0000
15192: MUL
15193: MUL
15194: ST_TO_ADDR
// end ; unit_vehicle :
15195: GO 16025
15197: LD_INT 2
15199: DOUBLE
15200: EQUAL
15201: IFTRUE 15205
15203: GO 16013
15205: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15206: LD_VAR 0 6
15210: PPUSH
15211: CALL_OW 264
15215: PUSH
15216: LD_INT 2
15218: PUSH
15219: LD_INT 42
15221: PUSH
15222: LD_INT 24
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: LIST
15229: IN
15230: IFFALSE 15251
// points := [ 25 , 5 , 3 ] ;
15232: LD_ADDR_VAR 0 9
15236: PUSH
15237: LD_INT 25
15239: PUSH
15240: LD_INT 5
15242: PUSH
15243: LD_INT 3
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: LIST
15250: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15251: LD_VAR 0 6
15255: PPUSH
15256: CALL_OW 264
15260: PUSH
15261: LD_INT 4
15263: PUSH
15264: LD_INT 43
15266: PUSH
15267: LD_INT 25
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: LIST
15274: IN
15275: IFFALSE 15296
// points := [ 40 , 15 , 5 ] ;
15277: LD_ADDR_VAR 0 9
15281: PUSH
15282: LD_INT 40
15284: PUSH
15285: LD_INT 15
15287: PUSH
15288: LD_INT 5
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: LIST
15295: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15296: LD_VAR 0 6
15300: PPUSH
15301: CALL_OW 264
15305: PUSH
15306: LD_INT 3
15308: PUSH
15309: LD_INT 23
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: IN
15316: IFFALSE 15337
// points := [ 7 , 25 , 8 ] ;
15318: LD_ADDR_VAR 0 9
15322: PUSH
15323: LD_INT 7
15325: PUSH
15326: LD_INT 25
15328: PUSH
15329: LD_INT 8
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: LIST
15336: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15337: LD_VAR 0 6
15341: PPUSH
15342: CALL_OW 264
15346: PUSH
15347: LD_INT 5
15349: PUSH
15350: LD_INT 27
15352: PUSH
15353: LD_INT 44
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: IN
15361: IFFALSE 15382
// points := [ 14 , 50 , 16 ] ;
15363: LD_ADDR_VAR 0 9
15367: PUSH
15368: LD_INT 14
15370: PUSH
15371: LD_INT 50
15373: PUSH
15374: LD_INT 16
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15382: LD_VAR 0 6
15386: PPUSH
15387: CALL_OW 264
15391: PUSH
15392: LD_INT 6
15394: PUSH
15395: LD_INT 46
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: IN
15402: IFFALSE 15423
// points := [ 32 , 120 , 70 ] ;
15404: LD_ADDR_VAR 0 9
15408: PUSH
15409: LD_INT 32
15411: PUSH
15412: LD_INT 120
15414: PUSH
15415: LD_INT 70
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: LIST
15422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
15423: LD_VAR 0 6
15427: PPUSH
15428: CALL_OW 264
15432: PUSH
15433: LD_INT 7
15435: PUSH
15436: LD_INT 28
15438: PUSH
15439: LD_INT 45
15441: PUSH
15442: LD_EXP 83
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: IN
15453: IFFALSE 15474
// points := [ 35 , 20 , 45 ] ;
15455: LD_ADDR_VAR 0 9
15459: PUSH
15460: LD_INT 35
15462: PUSH
15463: LD_INT 20
15465: PUSH
15466: LD_INT 45
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: LIST
15473: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15474: LD_VAR 0 6
15478: PPUSH
15479: CALL_OW 264
15483: PUSH
15484: LD_INT 47
15486: PUSH
15487: EMPTY
15488: LIST
15489: IN
15490: IFFALSE 15511
// points := [ 67 , 45 , 75 ] ;
15492: LD_ADDR_VAR 0 9
15496: PUSH
15497: LD_INT 67
15499: PUSH
15500: LD_INT 45
15502: PUSH
15503: LD_INT 75
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15511: LD_VAR 0 6
15515: PPUSH
15516: CALL_OW 264
15520: PUSH
15521: LD_INT 26
15523: PUSH
15524: EMPTY
15525: LIST
15526: IN
15527: IFFALSE 15548
// points := [ 120 , 30 , 80 ] ;
15529: LD_ADDR_VAR 0 9
15533: PUSH
15534: LD_INT 120
15536: PUSH
15537: LD_INT 30
15539: PUSH
15540: LD_INT 80
15542: PUSH
15543: EMPTY
15544: LIST
15545: LIST
15546: LIST
15547: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15548: LD_VAR 0 6
15552: PPUSH
15553: CALL_OW 264
15557: PUSH
15558: LD_INT 22
15560: PUSH
15561: EMPTY
15562: LIST
15563: IN
15564: IFFALSE 15585
// points := [ 40 , 1 , 1 ] ;
15566: LD_ADDR_VAR 0 9
15570: PUSH
15571: LD_INT 40
15573: PUSH
15574: LD_INT 1
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: LIST
15584: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15585: LD_VAR 0 6
15589: PPUSH
15590: CALL_OW 264
15594: PUSH
15595: LD_INT 29
15597: PUSH
15598: EMPTY
15599: LIST
15600: IN
15601: IFFALSE 15622
// points := [ 70 , 200 , 400 ] ;
15603: LD_ADDR_VAR 0 9
15607: PUSH
15608: LD_INT 70
15610: PUSH
15611: LD_INT 200
15613: PUSH
15614: LD_INT 400
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15622: LD_VAR 0 6
15626: PPUSH
15627: CALL_OW 264
15631: PUSH
15632: LD_INT 14
15634: PUSH
15635: LD_INT 53
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: IN
15642: IFFALSE 15663
// points := [ 40 , 10 , 20 ] ;
15644: LD_ADDR_VAR 0 9
15648: PUSH
15649: LD_INT 40
15651: PUSH
15652: LD_INT 10
15654: PUSH
15655: LD_INT 20
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15663: LD_VAR 0 6
15667: PPUSH
15668: CALL_OW 264
15672: PUSH
15673: LD_INT 9
15675: PUSH
15676: EMPTY
15677: LIST
15678: IN
15679: IFFALSE 15700
// points := [ 5 , 70 , 20 ] ;
15681: LD_ADDR_VAR 0 9
15685: PUSH
15686: LD_INT 5
15688: PUSH
15689: LD_INT 70
15691: PUSH
15692: LD_INT 20
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: LIST
15699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15700: LD_VAR 0 6
15704: PPUSH
15705: CALL_OW 264
15709: PUSH
15710: LD_INT 10
15712: PUSH
15713: EMPTY
15714: LIST
15715: IN
15716: IFFALSE 15737
// points := [ 35 , 110 , 70 ] ;
15718: LD_ADDR_VAR 0 9
15722: PUSH
15723: LD_INT 35
15725: PUSH
15726: LD_INT 110
15728: PUSH
15729: LD_INT 70
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15737: LD_VAR 0 6
15741: PPUSH
15742: CALL_OW 265
15746: PUSH
15747: LD_INT 25
15749: EQUAL
15750: IFFALSE 15771
// points := [ 80 , 65 , 100 ] ;
15752: LD_ADDR_VAR 0 9
15756: PUSH
15757: LD_INT 80
15759: PUSH
15760: LD_INT 65
15762: PUSH
15763: LD_INT 100
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: LIST
15770: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15771: LD_VAR 0 6
15775: PPUSH
15776: CALL_OW 263
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: IFFALSE 15819
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15786: LD_ADDR_VAR 0 10
15790: PUSH
15791: LD_VAR 0 10
15795: PUSH
15796: LD_VAR 0 6
15800: PPUSH
15801: CALL_OW 311
15805: PPUSH
15806: LD_INT 3
15808: PPUSH
15809: CALL_OW 259
15813: PUSH
15814: LD_INT 4
15816: MUL
15817: MUL
15818: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15819: LD_VAR 0 6
15823: PPUSH
15824: CALL_OW 263
15828: PUSH
15829: LD_INT 2
15831: EQUAL
15832: IFFALSE 15883
// begin j := IsControledBy ( i ) ;
15834: LD_ADDR_VAR 0 7
15838: PUSH
15839: LD_VAR 0 6
15843: PPUSH
15844: CALL_OW 312
15848: ST_TO_ADDR
// if j then
15849: LD_VAR 0 7
15853: IFFALSE 15883
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
15855: LD_ADDR_VAR 0 10
15859: PUSH
15860: LD_VAR 0 10
15864: PUSH
15865: LD_VAR 0 7
15869: PPUSH
15870: LD_INT 3
15872: PPUSH
15873: CALL_OW 259
15877: PUSH
15878: LD_INT 3
15880: MUL
15881: MUL
15882: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
15883: LD_VAR 0 6
15887: PPUSH
15888: CALL_OW 264
15892: PUSH
15893: LD_INT 5
15895: PUSH
15896: LD_INT 6
15898: PUSH
15899: LD_INT 46
15901: PUSH
15902: LD_INT 44
15904: PUSH
15905: LD_INT 47
15907: PUSH
15908: LD_INT 45
15910: PUSH
15911: LD_INT 28
15913: PUSH
15914: LD_INT 7
15916: PUSH
15917: LD_INT 27
15919: PUSH
15920: LD_INT 29
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: IN
15935: PUSH
15936: LD_VAR 0 1
15940: PPUSH
15941: LD_INT 52
15943: PPUSH
15944: CALL_OW 321
15948: PUSH
15949: LD_INT 2
15951: EQUAL
15952: AND
15953: IFFALSE 15970
// bpoints := bpoints * 1.2 ;
15955: LD_ADDR_VAR 0 10
15959: PUSH
15960: LD_VAR 0 10
15964: PUSH
15965: LD_REAL  1.20000000000000E+0000
15968: MUL
15969: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
15970: LD_VAR 0 6
15974: PPUSH
15975: CALL_OW 264
15979: PUSH
15980: LD_INT 6
15982: PUSH
15983: LD_INT 46
15985: PUSH
15986: LD_INT 47
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: LIST
15993: IN
15994: IFFALSE 16011
// bpoints := bpoints * 1.2 ;
15996: LD_ADDR_VAR 0 10
16000: PUSH
16001: LD_VAR 0 10
16005: PUSH
16006: LD_REAL  1.20000000000000E+0000
16009: MUL
16010: ST_TO_ADDR
// end ; unit_building :
16011: GO 16025
16013: LD_INT 3
16015: DOUBLE
16016: EQUAL
16017: IFTRUE 16021
16019: GO 16024
16021: POP
// ; end ;
16022: GO 16025
16024: POP
// for j = 1 to 3 do
16025: LD_ADDR_VAR 0 7
16029: PUSH
16030: DOUBLE
16031: LD_INT 1
16033: DEC
16034: ST_TO_ADDR
16035: LD_INT 3
16037: PUSH
16038: FOR_TO
16039: IFFALSE 16092
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16041: LD_ADDR_VAR 0 5
16045: PUSH
16046: LD_VAR 0 5
16050: PPUSH
16051: LD_VAR 0 7
16055: PPUSH
16056: LD_VAR 0 5
16060: PUSH
16061: LD_VAR 0 7
16065: ARRAY
16066: PUSH
16067: LD_VAR 0 9
16071: PUSH
16072: LD_VAR 0 7
16076: ARRAY
16077: PUSH
16078: LD_VAR 0 10
16082: MUL
16083: PLUS
16084: PPUSH
16085: CALL_OW 1
16089: ST_TO_ADDR
16090: GO 16038
16092: POP
16093: POP
// end ;
16094: GO 14571
16096: POP
16097: POP
// result := Replace ( result , 4 , tmp ) ;
16098: LD_ADDR_VAR 0 5
16102: PUSH
16103: LD_VAR 0 5
16107: PPUSH
16108: LD_INT 4
16110: PPUSH
16111: LD_VAR 0 8
16115: PPUSH
16116: CALL_OW 1
16120: ST_TO_ADDR
// end ;
16121: LD_VAR 0 5
16125: RET
// export function DangerAtRange ( unit , range ) ; begin
16126: LD_INT 0
16128: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16129: LD_ADDR_VAR 0 3
16133: PUSH
16134: LD_VAR 0 1
16138: PPUSH
16139: CALL_OW 255
16143: PPUSH
16144: LD_VAR 0 1
16148: PPUSH
16149: CALL_OW 250
16153: PPUSH
16154: LD_VAR 0 1
16158: PPUSH
16159: CALL_OW 251
16163: PPUSH
16164: LD_VAR 0 2
16168: PPUSH
16169: CALL 14423 0 4
16173: ST_TO_ADDR
// end ;
16174: LD_VAR 0 3
16178: RET
// export function DangerInArea ( side , area ) ; begin
16179: LD_INT 0
16181: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: LD_VAR 0 2
16191: PPUSH
16192: LD_INT 81
16194: PUSH
16195: LD_VAR 0 1
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PPUSH
16204: CALL_OW 70
16208: ST_TO_ADDR
// end ;
16209: LD_VAR 0 3
16213: RET
// export function IsExtension ( b ) ; begin
16214: LD_INT 0
16216: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16217: LD_ADDR_VAR 0 2
16221: PUSH
16222: LD_VAR 0 1
16226: PUSH
16227: LD_INT 23
16229: PUSH
16230: LD_INT 20
16232: PUSH
16233: LD_INT 22
16235: PUSH
16236: LD_INT 17
16238: PUSH
16239: LD_INT 24
16241: PUSH
16242: LD_INT 21
16244: PUSH
16245: LD_INT 19
16247: PUSH
16248: LD_INT 16
16250: PUSH
16251: LD_INT 25
16253: PUSH
16254: LD_INT 18
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: IN
16269: ST_TO_ADDR
// end ;
16270: LD_VAR 0 2
16274: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16275: LD_INT 0
16277: PPUSH
16278: PPUSH
16279: PPUSH
// result := [ ] ;
16280: LD_ADDR_VAR 0 4
16284: PUSH
16285: EMPTY
16286: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16287: LD_ADDR_VAR 0 5
16291: PUSH
16292: LD_VAR 0 2
16296: PPUSH
16297: LD_INT 21
16299: PUSH
16300: LD_INT 3
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PPUSH
16307: CALL_OW 70
16311: ST_TO_ADDR
// if not tmp then
16312: LD_VAR 0 5
16316: NOT
16317: IFFALSE 16321
// exit ;
16319: GO 16385
// if checkLink then
16321: LD_VAR 0 3
16325: IFFALSE 16375
// begin for i in tmp do
16327: LD_ADDR_VAR 0 6
16331: PUSH
16332: LD_VAR 0 5
16336: PUSH
16337: FOR_IN
16338: IFFALSE 16373
// if GetBase ( i ) <> base then
16340: LD_VAR 0 6
16344: PPUSH
16345: CALL_OW 274
16349: PUSH
16350: LD_VAR 0 1
16354: NONEQUAL
16355: IFFALSE 16371
// ComLinkToBase ( base , i ) ;
16357: LD_VAR 0 1
16361: PPUSH
16362: LD_VAR 0 6
16366: PPUSH
16367: CALL_OW 169
16371: GO 16337
16373: POP
16374: POP
// end ; result := tmp ;
16375: LD_ADDR_VAR 0 4
16379: PUSH
16380: LD_VAR 0 5
16384: ST_TO_ADDR
// end ;
16385: LD_VAR 0 4
16389: RET
// export function ComComplete ( units , b ) ; var i ; begin
16390: LD_INT 0
16392: PPUSH
16393: PPUSH
// if not units then
16394: LD_VAR 0 1
16398: NOT
16399: IFFALSE 16403
// exit ;
16401: GO 16493
// for i in units do
16403: LD_ADDR_VAR 0 4
16407: PUSH
16408: LD_VAR 0 1
16412: PUSH
16413: FOR_IN
16414: IFFALSE 16491
// if BuildingStatus ( b ) = bs_build then
16416: LD_VAR 0 2
16420: PPUSH
16421: CALL_OW 461
16425: PUSH
16426: LD_INT 1
16428: EQUAL
16429: IFFALSE 16489
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16431: LD_VAR 0 4
16435: PPUSH
16436: LD_STRING h
16438: PUSH
16439: LD_VAR 0 2
16443: PPUSH
16444: CALL_OW 250
16448: PUSH
16449: LD_VAR 0 2
16453: PPUSH
16454: CALL_OW 251
16458: PUSH
16459: LD_VAR 0 2
16463: PUSH
16464: LD_INT 0
16466: PUSH
16467: LD_INT 0
16469: PUSH
16470: LD_INT 0
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: EMPTY
16483: LIST
16484: PPUSH
16485: CALL_OW 446
16489: GO 16413
16491: POP
16492: POP
// end ;
16493: LD_VAR 0 3
16497: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16498: LD_INT 0
16500: PPUSH
16501: PPUSH
16502: PPUSH
16503: PPUSH
16504: PPUSH
16505: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16506: LD_VAR 0 1
16510: NOT
16511: PUSH
16512: LD_VAR 0 1
16516: PPUSH
16517: CALL_OW 263
16521: PUSH
16522: LD_INT 2
16524: NONEQUAL
16525: OR
16526: IFFALSE 16530
// exit ;
16528: GO 16846
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16530: LD_ADDR_VAR 0 6
16534: PUSH
16535: LD_INT 22
16537: PUSH
16538: LD_VAR 0 1
16542: PPUSH
16543: CALL_OW 255
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 2
16554: PUSH
16555: LD_INT 30
16557: PUSH
16558: LD_INT 36
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 34
16567: PUSH
16568: LD_INT 31
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: LIST
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PPUSH
16584: CALL_OW 69
16588: ST_TO_ADDR
// if not tmp then
16589: LD_VAR 0 6
16593: NOT
16594: IFFALSE 16598
// exit ;
16596: GO 16846
// result := [ ] ;
16598: LD_ADDR_VAR 0 2
16602: PUSH
16603: EMPTY
16604: ST_TO_ADDR
// for i in tmp do
16605: LD_ADDR_VAR 0 3
16609: PUSH
16610: LD_VAR 0 6
16614: PUSH
16615: FOR_IN
16616: IFFALSE 16687
// begin t := UnitsInside ( i ) ;
16618: LD_ADDR_VAR 0 4
16622: PUSH
16623: LD_VAR 0 3
16627: PPUSH
16628: CALL_OW 313
16632: ST_TO_ADDR
// if t then
16633: LD_VAR 0 4
16637: IFFALSE 16685
// for j in t do
16639: LD_ADDR_VAR 0 7
16643: PUSH
16644: LD_VAR 0 4
16648: PUSH
16649: FOR_IN
16650: IFFALSE 16683
// result := Replace ( result , result + 1 , j ) ;
16652: LD_ADDR_VAR 0 2
16656: PUSH
16657: LD_VAR 0 2
16661: PPUSH
16662: LD_VAR 0 2
16666: PUSH
16667: LD_INT 1
16669: PLUS
16670: PPUSH
16671: LD_VAR 0 7
16675: PPUSH
16676: CALL_OW 1
16680: ST_TO_ADDR
16681: GO 16649
16683: POP
16684: POP
// end ;
16685: GO 16615
16687: POP
16688: POP
// if not result then
16689: LD_VAR 0 2
16693: NOT
16694: IFFALSE 16698
// exit ;
16696: GO 16846
// mech := result [ 1 ] ;
16698: LD_ADDR_VAR 0 5
16702: PUSH
16703: LD_VAR 0 2
16707: PUSH
16708: LD_INT 1
16710: ARRAY
16711: ST_TO_ADDR
// if result > 1 then
16712: LD_VAR 0 2
16716: PUSH
16717: LD_INT 1
16719: GREATER
16720: IFFALSE 16832
// begin for i = 2 to result do
16722: LD_ADDR_VAR 0 3
16726: PUSH
16727: DOUBLE
16728: LD_INT 2
16730: DEC
16731: ST_TO_ADDR
16732: LD_VAR 0 2
16736: PUSH
16737: FOR_TO
16738: IFFALSE 16830
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16740: LD_ADDR_VAR 0 4
16744: PUSH
16745: LD_VAR 0 2
16749: PUSH
16750: LD_VAR 0 3
16754: ARRAY
16755: PPUSH
16756: LD_INT 3
16758: PPUSH
16759: CALL_OW 259
16763: PUSH
16764: LD_VAR 0 2
16768: PUSH
16769: LD_VAR 0 3
16773: ARRAY
16774: PPUSH
16775: CALL_OW 432
16779: MINUS
16780: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16781: LD_VAR 0 4
16785: PUSH
16786: LD_VAR 0 5
16790: PPUSH
16791: LD_INT 3
16793: PPUSH
16794: CALL_OW 259
16798: PUSH
16799: LD_VAR 0 5
16803: PPUSH
16804: CALL_OW 432
16808: MINUS
16809: GREATEREQUAL
16810: IFFALSE 16828
// mech := result [ i ] ;
16812: LD_ADDR_VAR 0 5
16816: PUSH
16817: LD_VAR 0 2
16821: PUSH
16822: LD_VAR 0 3
16826: ARRAY
16827: ST_TO_ADDR
// end ;
16828: GO 16737
16830: POP
16831: POP
// end ; ComLinkTo ( vehicle , mech ) ;
16832: LD_VAR 0 1
16836: PPUSH
16837: LD_VAR 0 5
16841: PPUSH
16842: CALL_OW 135
// end ;
16846: LD_VAR 0 2
16850: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
16851: LD_INT 0
16853: PPUSH
16854: PPUSH
16855: PPUSH
16856: PPUSH
16857: PPUSH
16858: PPUSH
16859: PPUSH
16860: PPUSH
16861: PPUSH
16862: PPUSH
16863: PPUSH
16864: PPUSH
16865: PPUSH
// result := [ ] ;
16866: LD_ADDR_VAR 0 7
16870: PUSH
16871: EMPTY
16872: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
16873: LD_VAR 0 1
16877: PPUSH
16878: CALL_OW 266
16882: PUSH
16883: LD_INT 0
16885: PUSH
16886: LD_INT 1
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: IN
16893: NOT
16894: IFFALSE 16898
// exit ;
16896: GO 18532
// if name then
16898: LD_VAR 0 3
16902: IFFALSE 16918
// SetBName ( base_dep , name ) ;
16904: LD_VAR 0 1
16908: PPUSH
16909: LD_VAR 0 3
16913: PPUSH
16914: CALL_OW 500
// base := GetBase ( base_dep ) ;
16918: LD_ADDR_VAR 0 15
16922: PUSH
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL_OW 274
16932: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
16933: LD_ADDR_VAR 0 16
16937: PUSH
16938: LD_VAR 0 1
16942: PPUSH
16943: CALL_OW 255
16947: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
16948: LD_ADDR_VAR 0 17
16952: PUSH
16953: LD_VAR 0 1
16957: PPUSH
16958: CALL_OW 248
16962: ST_TO_ADDR
// if sources then
16963: LD_VAR 0 5
16967: IFFALSE 17014
// for i = 1 to 3 do
16969: LD_ADDR_VAR 0 8
16973: PUSH
16974: DOUBLE
16975: LD_INT 1
16977: DEC
16978: ST_TO_ADDR
16979: LD_INT 3
16981: PUSH
16982: FOR_TO
16983: IFFALSE 17012
// AddResourceType ( base , i , sources [ i ] ) ;
16985: LD_VAR 0 15
16989: PPUSH
16990: LD_VAR 0 8
16994: PPUSH
16995: LD_VAR 0 5
16999: PUSH
17000: LD_VAR 0 8
17004: ARRAY
17005: PPUSH
17006: CALL_OW 276
17010: GO 16982
17012: POP
17013: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17014: LD_ADDR_VAR 0 18
17018: PUSH
17019: LD_VAR 0 15
17023: PPUSH
17024: LD_VAR 0 2
17028: PPUSH
17029: LD_INT 1
17031: PPUSH
17032: CALL 16275 0 3
17036: ST_TO_ADDR
// InitHc ;
17037: CALL_OW 19
// InitUc ;
17041: CALL_OW 18
// uc_side := side ;
17045: LD_ADDR_OWVAR 20
17049: PUSH
17050: LD_VAR 0 16
17054: ST_TO_ADDR
// uc_nation := nation ;
17055: LD_ADDR_OWVAR 21
17059: PUSH
17060: LD_VAR 0 17
17064: ST_TO_ADDR
// if buildings then
17065: LD_VAR 0 18
17069: IFFALSE 18391
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17071: LD_ADDR_VAR 0 19
17075: PUSH
17076: LD_VAR 0 18
17080: PPUSH
17081: LD_INT 2
17083: PUSH
17084: LD_INT 30
17086: PUSH
17087: LD_INT 29
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 30
17096: PUSH
17097: LD_INT 30
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: LIST
17108: PPUSH
17109: CALL_OW 72
17113: ST_TO_ADDR
// if tmp then
17114: LD_VAR 0 19
17118: IFFALSE 17166
// for i in tmp do
17120: LD_ADDR_VAR 0 8
17124: PUSH
17125: LD_VAR 0 19
17129: PUSH
17130: FOR_IN
17131: IFFALSE 17164
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17133: LD_VAR 0 8
17137: PPUSH
17138: CALL_OW 250
17142: PPUSH
17143: LD_VAR 0 8
17147: PPUSH
17148: CALL_OW 251
17152: PPUSH
17153: LD_VAR 0 16
17157: PPUSH
17158: CALL_OW 441
17162: GO 17130
17164: POP
17165: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17166: LD_VAR 0 18
17170: PPUSH
17171: LD_INT 2
17173: PUSH
17174: LD_INT 30
17176: PUSH
17177: LD_INT 32
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 30
17186: PUSH
17187: LD_INT 33
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: PPUSH
17199: CALL_OW 72
17203: IFFALSE 17291
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17205: LD_ADDR_VAR 0 8
17209: PUSH
17210: LD_VAR 0 18
17214: PPUSH
17215: LD_INT 2
17217: PUSH
17218: LD_INT 30
17220: PUSH
17221: LD_INT 32
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 30
17230: PUSH
17231: LD_INT 33
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: LIST
17242: PPUSH
17243: CALL_OW 72
17247: PUSH
17248: FOR_IN
17249: IFFALSE 17289
// begin if not GetBWeapon ( i ) then
17251: LD_VAR 0 8
17255: PPUSH
17256: CALL_OW 269
17260: NOT
17261: IFFALSE 17287
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17263: LD_VAR 0 8
17267: PPUSH
17268: LD_VAR 0 8
17272: PPUSH
17273: LD_VAR 0 2
17277: PPUSH
17278: CALL 18537 0 2
17282: PPUSH
17283: CALL_OW 431
// end ;
17287: GO 17248
17289: POP
17290: POP
// end ; for i = 1 to personel do
17291: LD_ADDR_VAR 0 8
17295: PUSH
17296: DOUBLE
17297: LD_INT 1
17299: DEC
17300: ST_TO_ADDR
17301: LD_VAR 0 6
17305: PUSH
17306: FOR_TO
17307: IFFALSE 18371
// begin if i > 4 then
17309: LD_VAR 0 8
17313: PUSH
17314: LD_INT 4
17316: GREATER
17317: IFFALSE 17321
// break ;
17319: GO 18371
// case i of 1 :
17321: LD_VAR 0 8
17325: PUSH
17326: LD_INT 1
17328: DOUBLE
17329: EQUAL
17330: IFTRUE 17334
17332: GO 17414
17334: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17335: LD_ADDR_VAR 0 12
17339: PUSH
17340: LD_VAR 0 18
17344: PPUSH
17345: LD_INT 22
17347: PUSH
17348: LD_VAR 0 16
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PUSH
17357: LD_INT 58
17359: PUSH
17360: EMPTY
17361: LIST
17362: PUSH
17363: LD_INT 2
17365: PUSH
17366: LD_INT 30
17368: PUSH
17369: LD_INT 32
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 30
17378: PUSH
17379: LD_INT 4
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 30
17388: PUSH
17389: LD_INT 5
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: LIST
17406: PPUSH
17407: CALL_OW 72
17411: ST_TO_ADDR
17412: GO 17636
17414: LD_INT 2
17416: DOUBLE
17417: EQUAL
17418: IFTRUE 17422
17420: GO 17484
17422: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17423: LD_ADDR_VAR 0 12
17427: PUSH
17428: LD_VAR 0 18
17432: PPUSH
17433: LD_INT 22
17435: PUSH
17436: LD_VAR 0 16
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 2
17447: PUSH
17448: LD_INT 30
17450: PUSH
17451: LD_INT 0
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 30
17460: PUSH
17461: LD_INT 1
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: EMPTY
17469: LIST
17470: LIST
17471: LIST
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PPUSH
17477: CALL_OW 72
17481: ST_TO_ADDR
17482: GO 17636
17484: LD_INT 3
17486: DOUBLE
17487: EQUAL
17488: IFTRUE 17492
17490: GO 17554
17492: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17493: LD_ADDR_VAR 0 12
17497: PUSH
17498: LD_VAR 0 18
17502: PPUSH
17503: LD_INT 22
17505: PUSH
17506: LD_VAR 0 16
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PUSH
17515: LD_INT 2
17517: PUSH
17518: LD_INT 30
17520: PUSH
17521: LD_INT 2
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 30
17530: PUSH
17531: LD_INT 3
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PPUSH
17547: CALL_OW 72
17551: ST_TO_ADDR
17552: GO 17636
17554: LD_INT 4
17556: DOUBLE
17557: EQUAL
17558: IFTRUE 17562
17560: GO 17635
17562: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17563: LD_ADDR_VAR 0 12
17567: PUSH
17568: LD_VAR 0 18
17572: PPUSH
17573: LD_INT 22
17575: PUSH
17576: LD_VAR 0 16
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 2
17587: PUSH
17588: LD_INT 30
17590: PUSH
17591: LD_INT 6
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 30
17600: PUSH
17601: LD_INT 7
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 30
17610: PUSH
17611: LD_INT 8
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PPUSH
17628: CALL_OW 72
17632: ST_TO_ADDR
17633: GO 17636
17635: POP
// if i = 1 then
17636: LD_VAR 0 8
17640: PUSH
17641: LD_INT 1
17643: EQUAL
17644: IFFALSE 17755
// begin tmp := [ ] ;
17646: LD_ADDR_VAR 0 19
17650: PUSH
17651: EMPTY
17652: ST_TO_ADDR
// for j in f do
17653: LD_ADDR_VAR 0 9
17657: PUSH
17658: LD_VAR 0 12
17662: PUSH
17663: FOR_IN
17664: IFFALSE 17737
// if GetBType ( j ) = b_bunker then
17666: LD_VAR 0 9
17670: PPUSH
17671: CALL_OW 266
17675: PUSH
17676: LD_INT 32
17678: EQUAL
17679: IFFALSE 17706
// tmp := Insert ( tmp , 1 , j ) else
17681: LD_ADDR_VAR 0 19
17685: PUSH
17686: LD_VAR 0 19
17690: PPUSH
17691: LD_INT 1
17693: PPUSH
17694: LD_VAR 0 9
17698: PPUSH
17699: CALL_OW 2
17703: ST_TO_ADDR
17704: GO 17735
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17706: LD_ADDR_VAR 0 19
17710: PUSH
17711: LD_VAR 0 19
17715: PPUSH
17716: LD_VAR 0 19
17720: PUSH
17721: LD_INT 1
17723: PLUS
17724: PPUSH
17725: LD_VAR 0 9
17729: PPUSH
17730: CALL_OW 2
17734: ST_TO_ADDR
17735: GO 17663
17737: POP
17738: POP
// if tmp then
17739: LD_VAR 0 19
17743: IFFALSE 17755
// f := tmp ;
17745: LD_ADDR_VAR 0 12
17749: PUSH
17750: LD_VAR 0 19
17754: ST_TO_ADDR
// end ; x := personel [ i ] ;
17755: LD_ADDR_VAR 0 13
17759: PUSH
17760: LD_VAR 0 6
17764: PUSH
17765: LD_VAR 0 8
17769: ARRAY
17770: ST_TO_ADDR
// if x = - 1 then
17771: LD_VAR 0 13
17775: PUSH
17776: LD_INT 1
17778: NEG
17779: EQUAL
17780: IFFALSE 17989
// begin for j in f do
17782: LD_ADDR_VAR 0 9
17786: PUSH
17787: LD_VAR 0 12
17791: PUSH
17792: FOR_IN
17793: IFFALSE 17985
// repeat InitHc ;
17795: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17799: LD_VAR 0 9
17803: PPUSH
17804: CALL_OW 266
17808: PUSH
17809: LD_INT 5
17811: EQUAL
17812: IFFALSE 17882
// begin if UnitsInside ( j ) < 3 then
17814: LD_VAR 0 9
17818: PPUSH
17819: CALL_OW 313
17823: PUSH
17824: LD_INT 3
17826: LESS
17827: IFFALSE 17863
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
17829: LD_INT 0
17831: PPUSH
17832: LD_INT 5
17834: PUSH
17835: LD_INT 8
17837: PUSH
17838: LD_INT 9
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: PUSH
17846: LD_VAR 0 17
17850: ARRAY
17851: PPUSH
17852: LD_VAR 0 4
17856: PPUSH
17857: CALL_OW 380
17861: GO 17880
// PrepareHuman ( false , i , skill ) ;
17863: LD_INT 0
17865: PPUSH
17866: LD_VAR 0 8
17870: PPUSH
17871: LD_VAR 0 4
17875: PPUSH
17876: CALL_OW 380
// end else
17880: GO 17899
// PrepareHuman ( false , i , skill ) ;
17882: LD_INT 0
17884: PPUSH
17885: LD_VAR 0 8
17889: PPUSH
17890: LD_VAR 0 4
17894: PPUSH
17895: CALL_OW 380
// un := CreateHuman ;
17899: LD_ADDR_VAR 0 14
17903: PUSH
17904: CALL_OW 44
17908: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
17909: LD_ADDR_VAR 0 7
17913: PUSH
17914: LD_VAR 0 7
17918: PPUSH
17919: LD_INT 1
17921: PPUSH
17922: LD_VAR 0 14
17926: PPUSH
17927: CALL_OW 2
17931: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
17932: LD_VAR 0 14
17936: PPUSH
17937: LD_VAR 0 9
17941: PPUSH
17942: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
17946: LD_VAR 0 9
17950: PPUSH
17951: CALL_OW 313
17955: PUSH
17956: LD_INT 6
17958: EQUAL
17959: PUSH
17960: LD_VAR 0 9
17964: PPUSH
17965: CALL_OW 266
17969: PUSH
17970: LD_INT 32
17972: PUSH
17973: LD_INT 31
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: IN
17980: OR
17981: IFFALSE 17795
17983: GO 17792
17985: POP
17986: POP
// end else
17987: GO 18369
// for j = 1 to x do
17989: LD_ADDR_VAR 0 9
17993: PUSH
17994: DOUBLE
17995: LD_INT 1
17997: DEC
17998: ST_TO_ADDR
17999: LD_VAR 0 13
18003: PUSH
18004: FOR_TO
18005: IFFALSE 18367
// begin InitHc ;
18007: CALL_OW 19
// if not f then
18011: LD_VAR 0 12
18015: NOT
18016: IFFALSE 18105
// begin PrepareHuman ( false , i , skill ) ;
18018: LD_INT 0
18020: PPUSH
18021: LD_VAR 0 8
18025: PPUSH
18026: LD_VAR 0 4
18030: PPUSH
18031: CALL_OW 380
// un := CreateHuman ;
18035: LD_ADDR_VAR 0 14
18039: PUSH
18040: CALL_OW 44
18044: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18045: LD_ADDR_VAR 0 7
18049: PUSH
18050: LD_VAR 0 7
18054: PPUSH
18055: LD_INT 1
18057: PPUSH
18058: LD_VAR 0 14
18062: PPUSH
18063: CALL_OW 2
18067: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18068: LD_VAR 0 14
18072: PPUSH
18073: LD_VAR 0 1
18077: PPUSH
18078: CALL_OW 250
18082: PPUSH
18083: LD_VAR 0 1
18087: PPUSH
18088: CALL_OW 251
18092: PPUSH
18093: LD_INT 10
18095: PPUSH
18096: LD_INT 0
18098: PPUSH
18099: CALL_OW 50
// continue ;
18103: GO 18004
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18105: LD_VAR 0 12
18109: PUSH
18110: LD_INT 1
18112: ARRAY
18113: PPUSH
18114: CALL_OW 313
18118: PUSH
18119: LD_VAR 0 12
18123: PUSH
18124: LD_INT 1
18126: ARRAY
18127: PPUSH
18128: CALL_OW 266
18132: PUSH
18133: LD_INT 32
18135: PUSH
18136: LD_INT 31
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: IN
18143: AND
18144: PUSH
18145: LD_VAR 0 12
18149: PUSH
18150: LD_INT 1
18152: ARRAY
18153: PPUSH
18154: CALL_OW 313
18158: PUSH
18159: LD_INT 6
18161: EQUAL
18162: OR
18163: IFFALSE 18183
// f := Delete ( f , 1 ) ;
18165: LD_ADDR_VAR 0 12
18169: PUSH
18170: LD_VAR 0 12
18174: PPUSH
18175: LD_INT 1
18177: PPUSH
18178: CALL_OW 3
18182: ST_TO_ADDR
// if not f then
18183: LD_VAR 0 12
18187: NOT
18188: IFFALSE 18206
// begin x := x + 2 ;
18190: LD_ADDR_VAR 0 13
18194: PUSH
18195: LD_VAR 0 13
18199: PUSH
18200: LD_INT 2
18202: PLUS
18203: ST_TO_ADDR
// continue ;
18204: GO 18004
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18206: LD_VAR 0 12
18210: PUSH
18211: LD_INT 1
18213: ARRAY
18214: PPUSH
18215: CALL_OW 266
18219: PUSH
18220: LD_INT 5
18222: EQUAL
18223: IFFALSE 18297
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18225: LD_VAR 0 12
18229: PUSH
18230: LD_INT 1
18232: ARRAY
18233: PPUSH
18234: CALL_OW 313
18238: PUSH
18239: LD_INT 3
18241: LESS
18242: IFFALSE 18278
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18244: LD_INT 0
18246: PPUSH
18247: LD_INT 5
18249: PUSH
18250: LD_INT 8
18252: PUSH
18253: LD_INT 9
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: PUSH
18261: LD_VAR 0 17
18265: ARRAY
18266: PPUSH
18267: LD_VAR 0 4
18271: PPUSH
18272: CALL_OW 380
18276: GO 18295
// PrepareHuman ( false , i , skill ) ;
18278: LD_INT 0
18280: PPUSH
18281: LD_VAR 0 8
18285: PPUSH
18286: LD_VAR 0 4
18290: PPUSH
18291: CALL_OW 380
// end else
18295: GO 18314
// PrepareHuman ( false , i , skill ) ;
18297: LD_INT 0
18299: PPUSH
18300: LD_VAR 0 8
18304: PPUSH
18305: LD_VAR 0 4
18309: PPUSH
18310: CALL_OW 380
// un := CreateHuman ;
18314: LD_ADDR_VAR 0 14
18318: PUSH
18319: CALL_OW 44
18323: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18324: LD_ADDR_VAR 0 7
18328: PUSH
18329: LD_VAR 0 7
18333: PPUSH
18334: LD_INT 1
18336: PPUSH
18337: LD_VAR 0 14
18341: PPUSH
18342: CALL_OW 2
18346: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18347: LD_VAR 0 14
18351: PPUSH
18352: LD_VAR 0 12
18356: PUSH
18357: LD_INT 1
18359: ARRAY
18360: PPUSH
18361: CALL_OW 52
// end ;
18365: GO 18004
18367: POP
18368: POP
// end ;
18369: GO 17306
18371: POP
18372: POP
// result := result ^ buildings ;
18373: LD_ADDR_VAR 0 7
18377: PUSH
18378: LD_VAR 0 7
18382: PUSH
18383: LD_VAR 0 18
18387: ADD
18388: ST_TO_ADDR
// end else
18389: GO 18532
// begin for i = 1 to personel do
18391: LD_ADDR_VAR 0 8
18395: PUSH
18396: DOUBLE
18397: LD_INT 1
18399: DEC
18400: ST_TO_ADDR
18401: LD_VAR 0 6
18405: PUSH
18406: FOR_TO
18407: IFFALSE 18530
// begin if i > 4 then
18409: LD_VAR 0 8
18413: PUSH
18414: LD_INT 4
18416: GREATER
18417: IFFALSE 18421
// break ;
18419: GO 18530
// x := personel [ i ] ;
18421: LD_ADDR_VAR 0 13
18425: PUSH
18426: LD_VAR 0 6
18430: PUSH
18431: LD_VAR 0 8
18435: ARRAY
18436: ST_TO_ADDR
// if x = - 1 then
18437: LD_VAR 0 13
18441: PUSH
18442: LD_INT 1
18444: NEG
18445: EQUAL
18446: IFFALSE 18450
// continue ;
18448: GO 18406
// PrepareHuman ( false , i , skill ) ;
18450: LD_INT 0
18452: PPUSH
18453: LD_VAR 0 8
18457: PPUSH
18458: LD_VAR 0 4
18462: PPUSH
18463: CALL_OW 380
// un := CreateHuman ;
18467: LD_ADDR_VAR 0 14
18471: PUSH
18472: CALL_OW 44
18476: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18477: LD_VAR 0 14
18481: PPUSH
18482: LD_VAR 0 1
18486: PPUSH
18487: CALL_OW 250
18491: PPUSH
18492: LD_VAR 0 1
18496: PPUSH
18497: CALL_OW 251
18501: PPUSH
18502: LD_INT 10
18504: PPUSH
18505: LD_INT 0
18507: PPUSH
18508: CALL_OW 50
// result := result ^ un ;
18512: LD_ADDR_VAR 0 7
18516: PUSH
18517: LD_VAR 0 7
18521: PUSH
18522: LD_VAR 0 14
18526: ADD
18527: ST_TO_ADDR
// end ;
18528: GO 18406
18530: POP
18531: POP
// end ; end ;
18532: LD_VAR 0 7
18536: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18537: LD_INT 0
18539: PPUSH
18540: PPUSH
18541: PPUSH
18542: PPUSH
18543: PPUSH
18544: PPUSH
18545: PPUSH
18546: PPUSH
18547: PPUSH
18548: PPUSH
18549: PPUSH
18550: PPUSH
18551: PPUSH
18552: PPUSH
18553: PPUSH
18554: PPUSH
// result := false ;
18555: LD_ADDR_VAR 0 3
18559: PUSH
18560: LD_INT 0
18562: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18563: LD_VAR 0 1
18567: NOT
18568: PUSH
18569: LD_VAR 0 1
18573: PPUSH
18574: CALL_OW 266
18578: PUSH
18579: LD_INT 32
18581: PUSH
18582: LD_INT 33
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: IN
18589: NOT
18590: OR
18591: IFFALSE 18595
// exit ;
18593: GO 19704
// nat := GetNation ( tower ) ;
18595: LD_ADDR_VAR 0 12
18599: PUSH
18600: LD_VAR 0 1
18604: PPUSH
18605: CALL_OW 248
18609: ST_TO_ADDR
// side := GetSide ( tower ) ;
18610: LD_ADDR_VAR 0 16
18614: PUSH
18615: LD_VAR 0 1
18619: PPUSH
18620: CALL_OW 255
18624: ST_TO_ADDR
// x := GetX ( tower ) ;
18625: LD_ADDR_VAR 0 10
18629: PUSH
18630: LD_VAR 0 1
18634: PPUSH
18635: CALL_OW 250
18639: ST_TO_ADDR
// y := GetY ( tower ) ;
18640: LD_ADDR_VAR 0 11
18644: PUSH
18645: LD_VAR 0 1
18649: PPUSH
18650: CALL_OW 251
18654: ST_TO_ADDR
// if not x or not y then
18655: LD_VAR 0 10
18659: NOT
18660: PUSH
18661: LD_VAR 0 11
18665: NOT
18666: OR
18667: IFFALSE 18671
// exit ;
18669: GO 19704
// weapon := 0 ;
18671: LD_ADDR_VAR 0 18
18675: PUSH
18676: LD_INT 0
18678: ST_TO_ADDR
// fac_list := [ ] ;
18679: LD_ADDR_VAR 0 17
18683: PUSH
18684: EMPTY
18685: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18686: LD_ADDR_VAR 0 6
18690: PUSH
18691: LD_VAR 0 1
18695: PPUSH
18696: CALL_OW 274
18700: PPUSH
18701: LD_VAR 0 2
18705: PPUSH
18706: LD_INT 0
18708: PPUSH
18709: CALL 16275 0 3
18713: PPUSH
18714: LD_INT 30
18716: PUSH
18717: LD_INT 3
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PPUSH
18724: CALL_OW 72
18728: ST_TO_ADDR
// if not factories then
18729: LD_VAR 0 6
18733: NOT
18734: IFFALSE 18738
// exit ;
18736: GO 19704
// for i in factories do
18738: LD_ADDR_VAR 0 8
18742: PUSH
18743: LD_VAR 0 6
18747: PUSH
18748: FOR_IN
18749: IFFALSE 18774
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18751: LD_ADDR_VAR 0 17
18755: PUSH
18756: LD_VAR 0 17
18760: PUSH
18761: LD_VAR 0 8
18765: PPUSH
18766: CALL_OW 478
18770: UNION
18771: ST_TO_ADDR
18772: GO 18748
18774: POP
18775: POP
// if not fac_list then
18776: LD_VAR 0 17
18780: NOT
18781: IFFALSE 18785
// exit ;
18783: GO 19704
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18785: LD_ADDR_VAR 0 5
18789: PUSH
18790: LD_INT 4
18792: PUSH
18793: LD_INT 5
18795: PUSH
18796: LD_INT 9
18798: PUSH
18799: LD_INT 10
18801: PUSH
18802: LD_INT 6
18804: PUSH
18805: LD_INT 7
18807: PUSH
18808: LD_INT 11
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 27
18822: PUSH
18823: LD_INT 28
18825: PUSH
18826: LD_INT 26
18828: PUSH
18829: LD_INT 30
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: PUSH
18838: LD_INT 43
18840: PUSH
18841: LD_INT 44
18843: PUSH
18844: LD_INT 46
18846: PUSH
18847: LD_INT 45
18849: PUSH
18850: LD_INT 47
18852: PUSH
18853: LD_INT 49
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: PUSH
18869: LD_VAR 0 12
18873: ARRAY
18874: ST_TO_ADDR
// list := list isect fac_list ;
18875: LD_ADDR_VAR 0 5
18879: PUSH
18880: LD_VAR 0 5
18884: PUSH
18885: LD_VAR 0 17
18889: ISECT
18890: ST_TO_ADDR
// if not list then
18891: LD_VAR 0 5
18895: NOT
18896: IFFALSE 18900
// exit ;
18898: GO 19704
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
18900: LD_VAR 0 12
18904: PUSH
18905: LD_INT 3
18907: EQUAL
18908: PUSH
18909: LD_INT 49
18911: PUSH
18912: LD_VAR 0 5
18916: IN
18917: AND
18918: PUSH
18919: LD_INT 31
18921: PPUSH
18922: LD_VAR 0 16
18926: PPUSH
18927: CALL_OW 321
18931: PUSH
18932: LD_INT 2
18934: EQUAL
18935: AND
18936: IFFALSE 18996
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
18938: LD_INT 22
18940: PUSH
18941: LD_VAR 0 16
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 35
18952: PUSH
18953: LD_INT 49
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 91
18962: PUSH
18963: LD_VAR 0 1
18967: PUSH
18968: LD_INT 10
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: LIST
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: LIST
18980: PPUSH
18981: CALL_OW 69
18985: NOT
18986: IFFALSE 18996
// weapon := ru_time_lapser ;
18988: LD_ADDR_VAR 0 18
18992: PUSH
18993: LD_INT 49
18995: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
18996: LD_VAR 0 12
19000: PUSH
19001: LD_INT 1
19003: PUSH
19004: LD_INT 2
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: IN
19011: PUSH
19012: LD_INT 11
19014: PUSH
19015: LD_VAR 0 5
19019: IN
19020: PUSH
19021: LD_INT 30
19023: PUSH
19024: LD_VAR 0 5
19028: IN
19029: OR
19030: AND
19031: PUSH
19032: LD_INT 6
19034: PPUSH
19035: LD_VAR 0 16
19039: PPUSH
19040: CALL_OW 321
19044: PUSH
19045: LD_INT 2
19047: EQUAL
19048: AND
19049: IFFALSE 19214
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19051: LD_INT 22
19053: PUSH
19054: LD_VAR 0 16
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 2
19065: PUSH
19066: LD_INT 35
19068: PUSH
19069: LD_INT 11
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 35
19078: PUSH
19079: LD_INT 30
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 91
19093: PUSH
19094: LD_VAR 0 1
19098: PUSH
19099: LD_INT 18
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: PUSH
19107: EMPTY
19108: LIST
19109: LIST
19110: LIST
19111: PPUSH
19112: CALL_OW 69
19116: NOT
19117: PUSH
19118: LD_INT 22
19120: PUSH
19121: LD_VAR 0 16
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: PUSH
19130: LD_INT 2
19132: PUSH
19133: LD_INT 30
19135: PUSH
19136: LD_INT 32
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 30
19145: PUSH
19146: LD_INT 33
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 91
19160: PUSH
19161: LD_VAR 0 1
19165: PUSH
19166: LD_INT 12
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: PUSH
19179: EMPTY
19180: LIST
19181: PPUSH
19182: CALL_OW 69
19186: PUSH
19187: LD_INT 2
19189: GREATER
19190: AND
19191: IFFALSE 19214
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19193: LD_ADDR_VAR 0 18
19197: PUSH
19198: LD_INT 11
19200: PUSH
19201: LD_INT 30
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_VAR 0 12
19212: ARRAY
19213: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19214: LD_VAR 0 18
19218: NOT
19219: PUSH
19220: LD_INT 40
19222: PPUSH
19223: LD_VAR 0 16
19227: PPUSH
19228: CALL_OW 321
19232: PUSH
19233: LD_INT 2
19235: EQUAL
19236: AND
19237: PUSH
19238: LD_INT 7
19240: PUSH
19241: LD_VAR 0 5
19245: IN
19246: PUSH
19247: LD_INT 28
19249: PUSH
19250: LD_VAR 0 5
19254: IN
19255: OR
19256: PUSH
19257: LD_INT 45
19259: PUSH
19260: LD_VAR 0 5
19264: IN
19265: OR
19266: AND
19267: IFFALSE 19521
// begin hex := GetHexInfo ( x , y ) ;
19269: LD_ADDR_VAR 0 4
19273: PUSH
19274: LD_VAR 0 10
19278: PPUSH
19279: LD_VAR 0 11
19283: PPUSH
19284: CALL_OW 546
19288: ST_TO_ADDR
// if hex [ 1 ] then
19289: LD_VAR 0 4
19293: PUSH
19294: LD_INT 1
19296: ARRAY
19297: IFFALSE 19301
// exit ;
19299: GO 19704
// height := hex [ 2 ] ;
19301: LD_ADDR_VAR 0 15
19305: PUSH
19306: LD_VAR 0 4
19310: PUSH
19311: LD_INT 2
19313: ARRAY
19314: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19315: LD_ADDR_VAR 0 14
19319: PUSH
19320: LD_INT 0
19322: PUSH
19323: LD_INT 2
19325: PUSH
19326: LD_INT 3
19328: PUSH
19329: LD_INT 5
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: ST_TO_ADDR
// for i in tmp do
19338: LD_ADDR_VAR 0 8
19342: PUSH
19343: LD_VAR 0 14
19347: PUSH
19348: FOR_IN
19349: IFFALSE 19519
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19351: LD_ADDR_VAR 0 9
19355: PUSH
19356: LD_VAR 0 10
19360: PPUSH
19361: LD_VAR 0 8
19365: PPUSH
19366: LD_INT 5
19368: PPUSH
19369: CALL_OW 272
19373: PUSH
19374: LD_VAR 0 11
19378: PPUSH
19379: LD_VAR 0 8
19383: PPUSH
19384: LD_INT 5
19386: PPUSH
19387: CALL_OW 273
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19396: LD_VAR 0 9
19400: PUSH
19401: LD_INT 1
19403: ARRAY
19404: PPUSH
19405: LD_VAR 0 9
19409: PUSH
19410: LD_INT 2
19412: ARRAY
19413: PPUSH
19414: CALL_OW 488
19418: IFFALSE 19517
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19420: LD_ADDR_VAR 0 4
19424: PUSH
19425: LD_VAR 0 9
19429: PUSH
19430: LD_INT 1
19432: ARRAY
19433: PPUSH
19434: LD_VAR 0 9
19438: PUSH
19439: LD_INT 2
19441: ARRAY
19442: PPUSH
19443: CALL_OW 546
19447: ST_TO_ADDR
// if hex [ 1 ] then
19448: LD_VAR 0 4
19452: PUSH
19453: LD_INT 1
19455: ARRAY
19456: IFFALSE 19460
// continue ;
19458: GO 19348
// h := hex [ 2 ] ;
19460: LD_ADDR_VAR 0 13
19464: PUSH
19465: LD_VAR 0 4
19469: PUSH
19470: LD_INT 2
19472: ARRAY
19473: ST_TO_ADDR
// if h + 7 < height then
19474: LD_VAR 0 13
19478: PUSH
19479: LD_INT 7
19481: PLUS
19482: PUSH
19483: LD_VAR 0 15
19487: LESS
19488: IFFALSE 19517
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19490: LD_ADDR_VAR 0 18
19494: PUSH
19495: LD_INT 7
19497: PUSH
19498: LD_INT 28
19500: PUSH
19501: LD_INT 45
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: LIST
19508: PUSH
19509: LD_VAR 0 12
19513: ARRAY
19514: ST_TO_ADDR
// break ;
19515: GO 19519
// end ; end ; end ;
19517: GO 19348
19519: POP
19520: POP
// end ; if not weapon then
19521: LD_VAR 0 18
19525: NOT
19526: IFFALSE 19586
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19528: LD_ADDR_VAR 0 5
19532: PUSH
19533: LD_VAR 0 5
19537: PUSH
19538: LD_INT 11
19540: PUSH
19541: LD_INT 30
19543: PUSH
19544: LD_INT 49
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: LIST
19551: DIFF
19552: ST_TO_ADDR
// if not list then
19553: LD_VAR 0 5
19557: NOT
19558: IFFALSE 19562
// exit ;
19560: GO 19704
// weapon := list [ rand ( 1 , list ) ] ;
19562: LD_ADDR_VAR 0 18
19566: PUSH
19567: LD_VAR 0 5
19571: PUSH
19572: LD_INT 1
19574: PPUSH
19575: LD_VAR 0 5
19579: PPUSH
19580: CALL_OW 12
19584: ARRAY
19585: ST_TO_ADDR
// end ; if weapon then
19586: LD_VAR 0 18
19590: IFFALSE 19704
// begin tmp := CostOfWeapon ( weapon ) ;
19592: LD_ADDR_VAR 0 14
19596: PUSH
19597: LD_VAR 0 18
19601: PPUSH
19602: CALL_OW 451
19606: ST_TO_ADDR
// j := GetBase ( tower ) ;
19607: LD_ADDR_VAR 0 9
19611: PUSH
19612: LD_VAR 0 1
19616: PPUSH
19617: CALL_OW 274
19621: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19622: LD_VAR 0 9
19626: PPUSH
19627: LD_INT 1
19629: PPUSH
19630: CALL_OW 275
19634: PUSH
19635: LD_VAR 0 14
19639: PUSH
19640: LD_INT 1
19642: ARRAY
19643: GREATEREQUAL
19644: PUSH
19645: LD_VAR 0 9
19649: PPUSH
19650: LD_INT 2
19652: PPUSH
19653: CALL_OW 275
19657: PUSH
19658: LD_VAR 0 14
19662: PUSH
19663: LD_INT 2
19665: ARRAY
19666: GREATEREQUAL
19667: AND
19668: PUSH
19669: LD_VAR 0 9
19673: PPUSH
19674: LD_INT 3
19676: PPUSH
19677: CALL_OW 275
19681: PUSH
19682: LD_VAR 0 14
19686: PUSH
19687: LD_INT 3
19689: ARRAY
19690: GREATEREQUAL
19691: AND
19692: IFFALSE 19704
// result := weapon ;
19694: LD_ADDR_VAR 0 3
19698: PUSH
19699: LD_VAR 0 18
19703: ST_TO_ADDR
// end ; end ;
19704: LD_VAR 0 3
19708: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19709: LD_INT 0
19711: PPUSH
19712: PPUSH
// result := true ;
19713: LD_ADDR_VAR 0 3
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if array1 = array2 then
19721: LD_VAR 0 1
19725: PUSH
19726: LD_VAR 0 2
19730: EQUAL
19731: IFFALSE 19791
// begin for i = 1 to array1 do
19733: LD_ADDR_VAR 0 4
19737: PUSH
19738: DOUBLE
19739: LD_INT 1
19741: DEC
19742: ST_TO_ADDR
19743: LD_VAR 0 1
19747: PUSH
19748: FOR_TO
19749: IFFALSE 19787
// if array1 [ i ] <> array2 [ i ] then
19751: LD_VAR 0 1
19755: PUSH
19756: LD_VAR 0 4
19760: ARRAY
19761: PUSH
19762: LD_VAR 0 2
19766: PUSH
19767: LD_VAR 0 4
19771: ARRAY
19772: NONEQUAL
19773: IFFALSE 19785
// begin result := false ;
19775: LD_ADDR_VAR 0 3
19779: PUSH
19780: LD_INT 0
19782: ST_TO_ADDR
// break ;
19783: GO 19787
// end ;
19785: GO 19748
19787: POP
19788: POP
// end else
19789: GO 19799
// result := false ;
19791: LD_ADDR_VAR 0 3
19795: PUSH
19796: LD_INT 0
19798: ST_TO_ADDR
// end ;
19799: LD_VAR 0 3
19803: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19804: LD_INT 0
19806: PPUSH
19807: PPUSH
// if not array1 or not array2 then
19808: LD_VAR 0 1
19812: NOT
19813: PUSH
19814: LD_VAR 0 2
19818: NOT
19819: OR
19820: IFFALSE 19824
// exit ;
19822: GO 19888
// result := true ;
19824: LD_ADDR_VAR 0 3
19828: PUSH
19829: LD_INT 1
19831: ST_TO_ADDR
// for i = 1 to array1 do
19832: LD_ADDR_VAR 0 4
19836: PUSH
19837: DOUBLE
19838: LD_INT 1
19840: DEC
19841: ST_TO_ADDR
19842: LD_VAR 0 1
19846: PUSH
19847: FOR_TO
19848: IFFALSE 19886
// if array1 [ i ] <> array2 [ i ] then
19850: LD_VAR 0 1
19854: PUSH
19855: LD_VAR 0 4
19859: ARRAY
19860: PUSH
19861: LD_VAR 0 2
19865: PUSH
19866: LD_VAR 0 4
19870: ARRAY
19871: NONEQUAL
19872: IFFALSE 19884
// begin result := false ;
19874: LD_ADDR_VAR 0 3
19878: PUSH
19879: LD_INT 0
19881: ST_TO_ADDR
// break ;
19882: GO 19886
// end ;
19884: GO 19847
19886: POP
19887: POP
// end ;
19888: LD_VAR 0 3
19892: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
19893: LD_INT 0
19895: PPUSH
19896: PPUSH
19897: PPUSH
// pom := GetBase ( fac ) ;
19898: LD_ADDR_VAR 0 5
19902: PUSH
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 274
19912: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
19913: LD_ADDR_VAR 0 4
19917: PUSH
19918: LD_VAR 0 2
19922: PUSH
19923: LD_INT 1
19925: ARRAY
19926: PPUSH
19927: LD_VAR 0 2
19931: PUSH
19932: LD_INT 2
19934: ARRAY
19935: PPUSH
19936: LD_VAR 0 2
19940: PUSH
19941: LD_INT 3
19943: ARRAY
19944: PPUSH
19945: LD_VAR 0 2
19949: PUSH
19950: LD_INT 4
19952: ARRAY
19953: PPUSH
19954: CALL_OW 449
19958: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
19959: LD_ADDR_VAR 0 3
19963: PUSH
19964: LD_VAR 0 5
19968: PPUSH
19969: LD_INT 1
19971: PPUSH
19972: CALL_OW 275
19976: PUSH
19977: LD_VAR 0 4
19981: PUSH
19982: LD_INT 1
19984: ARRAY
19985: GREATEREQUAL
19986: PUSH
19987: LD_VAR 0 5
19991: PPUSH
19992: LD_INT 2
19994: PPUSH
19995: CALL_OW 275
19999: PUSH
20000: LD_VAR 0 4
20004: PUSH
20005: LD_INT 2
20007: ARRAY
20008: GREATEREQUAL
20009: AND
20010: PUSH
20011: LD_VAR 0 5
20015: PPUSH
20016: LD_INT 3
20018: PPUSH
20019: CALL_OW 275
20023: PUSH
20024: LD_VAR 0 4
20028: PUSH
20029: LD_INT 3
20031: ARRAY
20032: GREATEREQUAL
20033: AND
20034: ST_TO_ADDR
// end ;
20035: LD_VAR 0 3
20039: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20040: LD_INT 0
20042: PPUSH
20043: PPUSH
20044: PPUSH
20045: PPUSH
// pom := GetBase ( building ) ;
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_VAR 0 1
20055: PPUSH
20056: CALL_OW 274
20060: ST_TO_ADDR
// if not pom then
20061: LD_VAR 0 3
20065: NOT
20066: IFFALSE 20070
// exit ;
20068: GO 20240
// btype := GetBType ( building ) ;
20070: LD_ADDR_VAR 0 5
20074: PUSH
20075: LD_VAR 0 1
20079: PPUSH
20080: CALL_OW 266
20084: ST_TO_ADDR
// if btype = b_armoury then
20085: LD_VAR 0 5
20089: PUSH
20090: LD_INT 4
20092: EQUAL
20093: IFFALSE 20103
// btype := b_barracks ;
20095: LD_ADDR_VAR 0 5
20099: PUSH
20100: LD_INT 5
20102: ST_TO_ADDR
// if btype = b_depot then
20103: LD_VAR 0 5
20107: PUSH
20108: LD_INT 0
20110: EQUAL
20111: IFFALSE 20121
// btype := b_warehouse ;
20113: LD_ADDR_VAR 0 5
20117: PUSH
20118: LD_INT 1
20120: ST_TO_ADDR
// if btype = b_workshop then
20121: LD_VAR 0 5
20125: PUSH
20126: LD_INT 2
20128: EQUAL
20129: IFFALSE 20139
// btype := b_factory ;
20131: LD_ADDR_VAR 0 5
20135: PUSH
20136: LD_INT 3
20138: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20139: LD_ADDR_VAR 0 4
20143: PUSH
20144: LD_VAR 0 5
20148: PPUSH
20149: LD_VAR 0 1
20153: PPUSH
20154: CALL_OW 248
20158: PPUSH
20159: CALL_OW 450
20163: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20164: LD_ADDR_VAR 0 2
20168: PUSH
20169: LD_VAR 0 3
20173: PPUSH
20174: LD_INT 1
20176: PPUSH
20177: CALL_OW 275
20181: PUSH
20182: LD_VAR 0 4
20186: PUSH
20187: LD_INT 1
20189: ARRAY
20190: GREATEREQUAL
20191: PUSH
20192: LD_VAR 0 3
20196: PPUSH
20197: LD_INT 2
20199: PPUSH
20200: CALL_OW 275
20204: PUSH
20205: LD_VAR 0 4
20209: PUSH
20210: LD_INT 2
20212: ARRAY
20213: GREATEREQUAL
20214: AND
20215: PUSH
20216: LD_VAR 0 3
20220: PPUSH
20221: LD_INT 3
20223: PPUSH
20224: CALL_OW 275
20228: PUSH
20229: LD_VAR 0 4
20233: PUSH
20234: LD_INT 3
20236: ARRAY
20237: GREATEREQUAL
20238: AND
20239: ST_TO_ADDR
// end ;
20240: LD_VAR 0 2
20244: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20245: LD_INT 0
20247: PPUSH
20248: PPUSH
20249: PPUSH
// pom := GetBase ( building ) ;
20250: LD_ADDR_VAR 0 4
20254: PUSH
20255: LD_VAR 0 1
20259: PPUSH
20260: CALL_OW 274
20264: ST_TO_ADDR
// if not pom then
20265: LD_VAR 0 4
20269: NOT
20270: IFFALSE 20274
// exit ;
20272: GO 20375
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20274: LD_ADDR_VAR 0 5
20278: PUSH
20279: LD_VAR 0 2
20283: PPUSH
20284: LD_VAR 0 1
20288: PPUSH
20289: CALL_OW 248
20293: PPUSH
20294: CALL_OW 450
20298: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20299: LD_ADDR_VAR 0 3
20303: PUSH
20304: LD_VAR 0 4
20308: PPUSH
20309: LD_INT 1
20311: PPUSH
20312: CALL_OW 275
20316: PUSH
20317: LD_VAR 0 5
20321: PUSH
20322: LD_INT 1
20324: ARRAY
20325: GREATEREQUAL
20326: PUSH
20327: LD_VAR 0 4
20331: PPUSH
20332: LD_INT 2
20334: PPUSH
20335: CALL_OW 275
20339: PUSH
20340: LD_VAR 0 5
20344: PUSH
20345: LD_INT 2
20347: ARRAY
20348: GREATEREQUAL
20349: AND
20350: PUSH
20351: LD_VAR 0 4
20355: PPUSH
20356: LD_INT 3
20358: PPUSH
20359: CALL_OW 275
20363: PUSH
20364: LD_VAR 0 5
20368: PUSH
20369: LD_INT 3
20371: ARRAY
20372: GREATEREQUAL
20373: AND
20374: ST_TO_ADDR
// end ;
20375: LD_VAR 0 3
20379: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20380: LD_INT 0
20382: PPUSH
20383: PPUSH
20384: PPUSH
20385: PPUSH
20386: PPUSH
20387: PPUSH
20388: PPUSH
20389: PPUSH
20390: PPUSH
20391: PPUSH
20392: PPUSH
// result := false ;
20393: LD_ADDR_VAR 0 8
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
20401: LD_VAR 0 5
20405: NOT
20406: PUSH
20407: LD_VAR 0 1
20411: NOT
20412: OR
20413: PUSH
20414: LD_VAR 0 2
20418: NOT
20419: OR
20420: PUSH
20421: LD_VAR 0 3
20425: NOT
20426: OR
20427: IFFALSE 20431
// exit ;
20429: GO 21245
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20431: LD_ADDR_VAR 0 14
20435: PUSH
20436: LD_VAR 0 1
20440: PPUSH
20441: LD_VAR 0 2
20445: PPUSH
20446: LD_VAR 0 3
20450: PPUSH
20451: LD_VAR 0 4
20455: PPUSH
20456: LD_VAR 0 5
20460: PUSH
20461: LD_INT 1
20463: ARRAY
20464: PPUSH
20465: CALL_OW 248
20469: PPUSH
20470: LD_INT 0
20472: PPUSH
20473: CALL 22482 0 6
20477: ST_TO_ADDR
// if not hexes then
20478: LD_VAR 0 14
20482: NOT
20483: IFFALSE 20487
// exit ;
20485: GO 21245
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20487: LD_ADDR_VAR 0 17
20491: PUSH
20492: LD_VAR 0 5
20496: PPUSH
20497: LD_INT 22
20499: PUSH
20500: LD_VAR 0 13
20504: PPUSH
20505: CALL_OW 255
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 2
20516: PUSH
20517: LD_INT 30
20519: PUSH
20520: LD_INT 0
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 30
20529: PUSH
20530: LD_INT 1
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PPUSH
20546: CALL_OW 72
20550: ST_TO_ADDR
// for i = 1 to hexes do
20551: LD_ADDR_VAR 0 9
20555: PUSH
20556: DOUBLE
20557: LD_INT 1
20559: DEC
20560: ST_TO_ADDR
20561: LD_VAR 0 14
20565: PUSH
20566: FOR_TO
20567: IFFALSE 21243
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20569: LD_ADDR_VAR 0 13
20573: PUSH
20574: LD_VAR 0 14
20578: PUSH
20579: LD_VAR 0 9
20583: ARRAY
20584: PUSH
20585: LD_INT 1
20587: ARRAY
20588: PPUSH
20589: LD_VAR 0 14
20593: PUSH
20594: LD_VAR 0 9
20598: ARRAY
20599: PUSH
20600: LD_INT 2
20602: ARRAY
20603: PPUSH
20604: CALL_OW 428
20608: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20609: LD_VAR 0 14
20613: PUSH
20614: LD_VAR 0 9
20618: ARRAY
20619: PUSH
20620: LD_INT 1
20622: ARRAY
20623: PPUSH
20624: LD_VAR 0 14
20628: PUSH
20629: LD_VAR 0 9
20633: ARRAY
20634: PUSH
20635: LD_INT 2
20637: ARRAY
20638: PPUSH
20639: CALL_OW 351
20643: PUSH
20644: LD_VAR 0 14
20648: PUSH
20649: LD_VAR 0 9
20653: ARRAY
20654: PUSH
20655: LD_INT 1
20657: ARRAY
20658: PPUSH
20659: LD_VAR 0 14
20663: PUSH
20664: LD_VAR 0 9
20668: ARRAY
20669: PUSH
20670: LD_INT 2
20672: ARRAY
20673: PPUSH
20674: CALL_OW 488
20678: NOT
20679: OR
20680: PUSH
20681: LD_VAR 0 13
20685: PPUSH
20686: CALL_OW 247
20690: PUSH
20691: LD_INT 3
20693: EQUAL
20694: OR
20695: IFFALSE 20701
// exit ;
20697: POP
20698: POP
20699: GO 21245
// if not tmp then
20701: LD_VAR 0 13
20705: NOT
20706: IFFALSE 20710
// continue ;
20708: GO 20566
// result := true ;
20710: LD_ADDR_VAR 0 8
20714: PUSH
20715: LD_INT 1
20717: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20718: LD_VAR 0 6
20722: PUSH
20723: LD_VAR 0 13
20727: PPUSH
20728: CALL_OW 247
20732: PUSH
20733: LD_INT 2
20735: EQUAL
20736: AND
20737: PUSH
20738: LD_VAR 0 13
20742: PPUSH
20743: CALL_OW 263
20747: PUSH
20748: LD_INT 1
20750: EQUAL
20751: AND
20752: IFFALSE 20916
// begin if IsDrivenBy ( tmp ) then
20754: LD_VAR 0 13
20758: PPUSH
20759: CALL_OW 311
20763: IFFALSE 20767
// continue ;
20765: GO 20566
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20767: LD_VAR 0 6
20771: PPUSH
20772: LD_INT 3
20774: PUSH
20775: LD_INT 60
20777: PUSH
20778: EMPTY
20779: LIST
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 3
20787: PUSH
20788: LD_INT 55
20790: PUSH
20791: EMPTY
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PPUSH
20802: CALL_OW 72
20806: IFFALSE 20914
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20808: LD_ADDR_VAR 0 18
20812: PUSH
20813: LD_VAR 0 6
20817: PPUSH
20818: LD_INT 3
20820: PUSH
20821: LD_INT 60
20823: PUSH
20824: EMPTY
20825: LIST
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 3
20833: PUSH
20834: LD_INT 55
20836: PUSH
20837: EMPTY
20838: LIST
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PPUSH
20848: CALL_OW 72
20852: PUSH
20853: LD_INT 1
20855: ARRAY
20856: ST_TO_ADDR
// if IsInUnit ( driver ) then
20857: LD_VAR 0 18
20861: PPUSH
20862: CALL_OW 310
20866: IFFALSE 20877
// ComExit ( driver ) ;
20868: LD_VAR 0 18
20872: PPUSH
20873: CALL 45610 0 1
// AddComEnterUnit ( driver , tmp ) ;
20877: LD_VAR 0 18
20881: PPUSH
20882: LD_VAR 0 13
20886: PPUSH
20887: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
20891: LD_VAR 0 18
20895: PPUSH
20896: LD_VAR 0 7
20900: PPUSH
20901: CALL_OW 173
// AddComExitVehicle ( driver ) ;
20905: LD_VAR 0 18
20909: PPUSH
20910: CALL_OW 181
// end ; continue ;
20914: GO 20566
// end ; if not cleaners or not tmp in cleaners then
20916: LD_VAR 0 6
20920: NOT
20921: PUSH
20922: LD_VAR 0 13
20926: PUSH
20927: LD_VAR 0 6
20931: IN
20932: NOT
20933: OR
20934: IFFALSE 21241
// begin if dep then
20936: LD_VAR 0 17
20940: IFFALSE 21076
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
20942: LD_ADDR_VAR 0 16
20946: PUSH
20947: LD_VAR 0 17
20951: PUSH
20952: LD_INT 1
20954: ARRAY
20955: PPUSH
20956: CALL_OW 250
20960: PPUSH
20961: LD_VAR 0 17
20965: PUSH
20966: LD_INT 1
20968: ARRAY
20969: PPUSH
20970: CALL_OW 254
20974: PPUSH
20975: LD_INT 5
20977: PPUSH
20978: CALL_OW 272
20982: PUSH
20983: LD_VAR 0 17
20987: PUSH
20988: LD_INT 1
20990: ARRAY
20991: PPUSH
20992: CALL_OW 251
20996: PPUSH
20997: LD_VAR 0 17
21001: PUSH
21002: LD_INT 1
21004: ARRAY
21005: PPUSH
21006: CALL_OW 254
21010: PPUSH
21011: LD_INT 5
21013: PPUSH
21014: CALL_OW 273
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21023: LD_VAR 0 16
21027: PUSH
21028: LD_INT 1
21030: ARRAY
21031: PPUSH
21032: LD_VAR 0 16
21036: PUSH
21037: LD_INT 2
21039: ARRAY
21040: PPUSH
21041: CALL_OW 488
21045: IFFALSE 21076
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21047: LD_VAR 0 13
21051: PPUSH
21052: LD_VAR 0 16
21056: PUSH
21057: LD_INT 1
21059: ARRAY
21060: PPUSH
21061: LD_VAR 0 16
21065: PUSH
21066: LD_INT 2
21068: ARRAY
21069: PPUSH
21070: CALL_OW 111
// continue ;
21074: GO 20566
// end ; end ; r := GetDir ( tmp ) ;
21076: LD_ADDR_VAR 0 15
21080: PUSH
21081: LD_VAR 0 13
21085: PPUSH
21086: CALL_OW 254
21090: ST_TO_ADDR
// if r = 5 then
21091: LD_VAR 0 15
21095: PUSH
21096: LD_INT 5
21098: EQUAL
21099: IFFALSE 21109
// r := 0 ;
21101: LD_ADDR_VAR 0 15
21105: PUSH
21106: LD_INT 0
21108: ST_TO_ADDR
// for j = r to 5 do
21109: LD_ADDR_VAR 0 10
21113: PUSH
21114: DOUBLE
21115: LD_VAR 0 15
21119: DEC
21120: ST_TO_ADDR
21121: LD_INT 5
21123: PUSH
21124: FOR_TO
21125: IFFALSE 21239
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21127: LD_ADDR_VAR 0 11
21131: PUSH
21132: LD_VAR 0 13
21136: PPUSH
21137: CALL_OW 250
21141: PPUSH
21142: LD_VAR 0 10
21146: PPUSH
21147: LD_INT 2
21149: PPUSH
21150: CALL_OW 272
21154: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21155: LD_ADDR_VAR 0 12
21159: PUSH
21160: LD_VAR 0 13
21164: PPUSH
21165: CALL_OW 251
21169: PPUSH
21170: LD_VAR 0 10
21174: PPUSH
21175: LD_INT 2
21177: PPUSH
21178: CALL_OW 273
21182: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21183: LD_VAR 0 11
21187: PPUSH
21188: LD_VAR 0 12
21192: PPUSH
21193: CALL_OW 488
21197: PUSH
21198: LD_VAR 0 11
21202: PPUSH
21203: LD_VAR 0 12
21207: PPUSH
21208: CALL_OW 428
21212: NOT
21213: AND
21214: IFFALSE 21237
// begin ComMoveXY ( tmp , _x , _y ) ;
21216: LD_VAR 0 13
21220: PPUSH
21221: LD_VAR 0 11
21225: PPUSH
21226: LD_VAR 0 12
21230: PPUSH
21231: CALL_OW 111
// break ;
21235: GO 21239
// end ; end ;
21237: GO 21124
21239: POP
21240: POP
// end ; end ;
21241: GO 20566
21243: POP
21244: POP
// end ;
21245: LD_VAR 0 8
21249: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21250: LD_INT 0
21252: PPUSH
// result := true ;
21253: LD_ADDR_VAR 0 3
21257: PUSH
21258: LD_INT 1
21260: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21261: LD_VAR 0 2
21265: PUSH
21266: LD_INT 24
21268: DOUBLE
21269: EQUAL
21270: IFTRUE 21280
21272: LD_INT 33
21274: DOUBLE
21275: EQUAL
21276: IFTRUE 21280
21278: GO 21305
21280: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21281: LD_ADDR_VAR 0 3
21285: PUSH
21286: LD_INT 32
21288: PPUSH
21289: LD_VAR 0 1
21293: PPUSH
21294: CALL_OW 321
21298: PUSH
21299: LD_INT 2
21301: EQUAL
21302: ST_TO_ADDR
21303: GO 21625
21305: LD_INT 20
21307: DOUBLE
21308: EQUAL
21309: IFTRUE 21313
21311: GO 21338
21313: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21314: LD_ADDR_VAR 0 3
21318: PUSH
21319: LD_INT 6
21321: PPUSH
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 321
21331: PUSH
21332: LD_INT 2
21334: EQUAL
21335: ST_TO_ADDR
21336: GO 21625
21338: LD_INT 22
21340: DOUBLE
21341: EQUAL
21342: IFTRUE 21352
21344: LD_INT 36
21346: DOUBLE
21347: EQUAL
21348: IFTRUE 21352
21350: GO 21377
21352: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21353: LD_ADDR_VAR 0 3
21357: PUSH
21358: LD_INT 15
21360: PPUSH
21361: LD_VAR 0 1
21365: PPUSH
21366: CALL_OW 321
21370: PUSH
21371: LD_INT 2
21373: EQUAL
21374: ST_TO_ADDR
21375: GO 21625
21377: LD_INT 30
21379: DOUBLE
21380: EQUAL
21381: IFTRUE 21385
21383: GO 21410
21385: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21386: LD_ADDR_VAR 0 3
21390: PUSH
21391: LD_INT 20
21393: PPUSH
21394: LD_VAR 0 1
21398: PPUSH
21399: CALL_OW 321
21403: PUSH
21404: LD_INT 2
21406: EQUAL
21407: ST_TO_ADDR
21408: GO 21625
21410: LD_INT 28
21412: DOUBLE
21413: EQUAL
21414: IFTRUE 21424
21416: LD_INT 21
21418: DOUBLE
21419: EQUAL
21420: IFTRUE 21424
21422: GO 21449
21424: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21425: LD_ADDR_VAR 0 3
21429: PUSH
21430: LD_INT 21
21432: PPUSH
21433: LD_VAR 0 1
21437: PPUSH
21438: CALL_OW 321
21442: PUSH
21443: LD_INT 2
21445: EQUAL
21446: ST_TO_ADDR
21447: GO 21625
21449: LD_INT 16
21451: DOUBLE
21452: EQUAL
21453: IFTRUE 21457
21455: GO 21484
21457: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21458: LD_ADDR_VAR 0 3
21462: PUSH
21463: LD_EXP 91
21467: PPUSH
21468: LD_VAR 0 1
21472: PPUSH
21473: CALL_OW 321
21477: PUSH
21478: LD_INT 2
21480: EQUAL
21481: ST_TO_ADDR
21482: GO 21625
21484: LD_INT 19
21486: DOUBLE
21487: EQUAL
21488: IFTRUE 21498
21490: LD_INT 23
21492: DOUBLE
21493: EQUAL
21494: IFTRUE 21498
21496: GO 21525
21498: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21499: LD_ADDR_VAR 0 3
21503: PUSH
21504: LD_EXP 90
21508: PPUSH
21509: LD_VAR 0 1
21513: PPUSH
21514: CALL_OW 321
21518: PUSH
21519: LD_INT 2
21521: EQUAL
21522: ST_TO_ADDR
21523: GO 21625
21525: LD_INT 17
21527: DOUBLE
21528: EQUAL
21529: IFTRUE 21533
21531: GO 21558
21533: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21534: LD_ADDR_VAR 0 3
21538: PUSH
21539: LD_INT 39
21541: PPUSH
21542: LD_VAR 0 1
21546: PPUSH
21547: CALL_OW 321
21551: PUSH
21552: LD_INT 2
21554: EQUAL
21555: ST_TO_ADDR
21556: GO 21625
21558: LD_INT 18
21560: DOUBLE
21561: EQUAL
21562: IFTRUE 21566
21564: GO 21591
21566: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_INT 40
21574: PPUSH
21575: LD_VAR 0 1
21579: PPUSH
21580: CALL_OW 321
21584: PUSH
21585: LD_INT 2
21587: EQUAL
21588: ST_TO_ADDR
21589: GO 21625
21591: LD_INT 27
21593: DOUBLE
21594: EQUAL
21595: IFTRUE 21599
21597: GO 21624
21599: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
21600: LD_ADDR_VAR 0 3
21604: PUSH
21605: LD_INT 35
21607: PPUSH
21608: LD_VAR 0 1
21612: PPUSH
21613: CALL_OW 321
21617: PUSH
21618: LD_INT 2
21620: EQUAL
21621: ST_TO_ADDR
21622: GO 21625
21624: POP
// end ;
21625: LD_VAR 0 3
21629: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21630: LD_INT 0
21632: PPUSH
21633: PPUSH
21634: PPUSH
21635: PPUSH
21636: PPUSH
21637: PPUSH
21638: PPUSH
21639: PPUSH
21640: PPUSH
21641: PPUSH
21642: PPUSH
// result := false ;
21643: LD_ADDR_VAR 0 6
21647: PUSH
21648: LD_INT 0
21650: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21651: LD_VAR 0 1
21655: NOT
21656: PUSH
21657: LD_VAR 0 1
21661: PPUSH
21662: CALL_OW 266
21666: PUSH
21667: LD_INT 0
21669: PUSH
21670: LD_INT 1
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: IN
21677: NOT
21678: OR
21679: PUSH
21680: LD_VAR 0 2
21684: NOT
21685: OR
21686: PUSH
21687: LD_VAR 0 5
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: LD_INT 1
21697: PUSH
21698: LD_INT 2
21700: PUSH
21701: LD_INT 3
21703: PUSH
21704: LD_INT 4
21706: PUSH
21707: LD_INT 5
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: IN
21718: NOT
21719: OR
21720: PUSH
21721: LD_VAR 0 3
21725: PPUSH
21726: LD_VAR 0 4
21730: PPUSH
21731: CALL_OW 488
21735: NOT
21736: OR
21737: IFFALSE 21741
// exit ;
21739: GO 22477
// side := GetSide ( depot ) ;
21741: LD_ADDR_VAR 0 9
21745: PUSH
21746: LD_VAR 0 1
21750: PPUSH
21751: CALL_OW 255
21755: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21756: LD_VAR 0 9
21760: PPUSH
21761: LD_VAR 0 2
21765: PPUSH
21766: CALL 21250 0 2
21770: NOT
21771: IFFALSE 21775
// exit ;
21773: GO 22477
// pom := GetBase ( depot ) ;
21775: LD_ADDR_VAR 0 10
21779: PUSH
21780: LD_VAR 0 1
21784: PPUSH
21785: CALL_OW 274
21789: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21790: LD_ADDR_VAR 0 11
21794: PUSH
21795: LD_VAR 0 2
21799: PPUSH
21800: LD_VAR 0 1
21804: PPUSH
21805: CALL_OW 248
21809: PPUSH
21810: CALL_OW 450
21814: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21815: LD_VAR 0 10
21819: PPUSH
21820: LD_INT 1
21822: PPUSH
21823: CALL_OW 275
21827: PUSH
21828: LD_VAR 0 11
21832: PUSH
21833: LD_INT 1
21835: ARRAY
21836: GREATEREQUAL
21837: PUSH
21838: LD_VAR 0 10
21842: PPUSH
21843: LD_INT 2
21845: PPUSH
21846: CALL_OW 275
21850: PUSH
21851: LD_VAR 0 11
21855: PUSH
21856: LD_INT 2
21858: ARRAY
21859: GREATEREQUAL
21860: AND
21861: PUSH
21862: LD_VAR 0 10
21866: PPUSH
21867: LD_INT 3
21869: PPUSH
21870: CALL_OW 275
21874: PUSH
21875: LD_VAR 0 11
21879: PUSH
21880: LD_INT 3
21882: ARRAY
21883: GREATEREQUAL
21884: AND
21885: NOT
21886: IFFALSE 21890
// exit ;
21888: GO 22477
// if GetBType ( depot ) = b_depot then
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 266
21899: PUSH
21900: LD_INT 0
21902: EQUAL
21903: IFFALSE 21915
// dist := 28 else
21905: LD_ADDR_VAR 0 14
21909: PUSH
21910: LD_INT 28
21912: ST_TO_ADDR
21913: GO 21923
// dist := 36 ;
21915: LD_ADDR_VAR 0 14
21919: PUSH
21920: LD_INT 36
21922: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
21923: LD_VAR 0 1
21927: PPUSH
21928: LD_VAR 0 3
21932: PPUSH
21933: LD_VAR 0 4
21937: PPUSH
21938: CALL_OW 297
21942: PUSH
21943: LD_VAR 0 14
21947: GREATER
21948: IFFALSE 21952
// exit ;
21950: GO 22477
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
21952: LD_ADDR_VAR 0 12
21956: PUSH
21957: LD_VAR 0 2
21961: PPUSH
21962: LD_VAR 0 3
21966: PPUSH
21967: LD_VAR 0 4
21971: PPUSH
21972: LD_VAR 0 5
21976: PPUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: CALL_OW 248
21986: PPUSH
21987: LD_INT 0
21989: PPUSH
21990: CALL 22482 0 6
21994: ST_TO_ADDR
// if not hexes then
21995: LD_VAR 0 12
21999: NOT
22000: IFFALSE 22004
// exit ;
22002: GO 22477
// hex := GetHexInfo ( x , y ) ;
22004: LD_ADDR_VAR 0 15
22008: PUSH
22009: LD_VAR 0 3
22013: PPUSH
22014: LD_VAR 0 4
22018: PPUSH
22019: CALL_OW 546
22023: ST_TO_ADDR
// if hex [ 1 ] then
22024: LD_VAR 0 15
22028: PUSH
22029: LD_INT 1
22031: ARRAY
22032: IFFALSE 22036
// exit ;
22034: GO 22477
// height := hex [ 2 ] ;
22036: LD_ADDR_VAR 0 13
22040: PUSH
22041: LD_VAR 0 15
22045: PUSH
22046: LD_INT 2
22048: ARRAY
22049: ST_TO_ADDR
// for i = 1 to hexes do
22050: LD_ADDR_VAR 0 7
22054: PUSH
22055: DOUBLE
22056: LD_INT 1
22058: DEC
22059: ST_TO_ADDR
22060: LD_VAR 0 12
22064: PUSH
22065: FOR_TO
22066: IFFALSE 22396
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22068: LD_VAR 0 12
22072: PUSH
22073: LD_VAR 0 7
22077: ARRAY
22078: PUSH
22079: LD_INT 1
22081: ARRAY
22082: PPUSH
22083: LD_VAR 0 12
22087: PUSH
22088: LD_VAR 0 7
22092: ARRAY
22093: PUSH
22094: LD_INT 2
22096: ARRAY
22097: PPUSH
22098: CALL_OW 488
22102: NOT
22103: PUSH
22104: LD_VAR 0 12
22108: PUSH
22109: LD_VAR 0 7
22113: ARRAY
22114: PUSH
22115: LD_INT 1
22117: ARRAY
22118: PPUSH
22119: LD_VAR 0 12
22123: PUSH
22124: LD_VAR 0 7
22128: ARRAY
22129: PUSH
22130: LD_INT 2
22132: ARRAY
22133: PPUSH
22134: CALL_OW 428
22138: PUSH
22139: LD_INT 0
22141: GREATER
22142: OR
22143: PUSH
22144: LD_VAR 0 12
22148: PUSH
22149: LD_VAR 0 7
22153: ARRAY
22154: PUSH
22155: LD_INT 1
22157: ARRAY
22158: PPUSH
22159: LD_VAR 0 12
22163: PUSH
22164: LD_VAR 0 7
22168: ARRAY
22169: PUSH
22170: LD_INT 2
22172: ARRAY
22173: PPUSH
22174: CALL_OW 351
22178: OR
22179: IFFALSE 22185
// exit ;
22181: POP
22182: POP
22183: GO 22477
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22185: LD_ADDR_VAR 0 8
22189: PUSH
22190: LD_VAR 0 12
22194: PUSH
22195: LD_VAR 0 7
22199: ARRAY
22200: PUSH
22201: LD_INT 1
22203: ARRAY
22204: PPUSH
22205: LD_VAR 0 12
22209: PUSH
22210: LD_VAR 0 7
22214: ARRAY
22215: PUSH
22216: LD_INT 2
22218: ARRAY
22219: PPUSH
22220: CALL_OW 546
22224: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22225: LD_VAR 0 8
22229: PUSH
22230: LD_INT 1
22232: ARRAY
22233: PUSH
22234: LD_VAR 0 8
22238: PUSH
22239: LD_INT 2
22241: ARRAY
22242: PUSH
22243: LD_VAR 0 13
22247: PUSH
22248: LD_INT 2
22250: PLUS
22251: GREATER
22252: OR
22253: PUSH
22254: LD_VAR 0 8
22258: PUSH
22259: LD_INT 2
22261: ARRAY
22262: PUSH
22263: LD_VAR 0 13
22267: PUSH
22268: LD_INT 2
22270: MINUS
22271: LESS
22272: OR
22273: PUSH
22274: LD_VAR 0 8
22278: PUSH
22279: LD_INT 3
22281: ARRAY
22282: PUSH
22283: LD_INT 0
22285: PUSH
22286: LD_INT 8
22288: PUSH
22289: LD_INT 9
22291: PUSH
22292: LD_INT 10
22294: PUSH
22295: LD_INT 11
22297: PUSH
22298: LD_INT 12
22300: PUSH
22301: LD_INT 13
22303: PUSH
22304: LD_INT 16
22306: PUSH
22307: LD_INT 17
22309: PUSH
22310: LD_INT 18
22312: PUSH
22313: LD_INT 19
22315: PUSH
22316: LD_INT 20
22318: PUSH
22319: LD_INT 21
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: IN
22337: NOT
22338: OR
22339: PUSH
22340: LD_VAR 0 8
22344: PUSH
22345: LD_INT 5
22347: ARRAY
22348: NOT
22349: OR
22350: PUSH
22351: LD_VAR 0 8
22355: PUSH
22356: LD_INT 6
22358: ARRAY
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: LD_INT 2
22365: PUSH
22366: LD_INT 7
22368: PUSH
22369: LD_INT 9
22371: PUSH
22372: LD_INT 10
22374: PUSH
22375: LD_INT 11
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: IN
22386: NOT
22387: OR
22388: IFFALSE 22394
// exit ;
22390: POP
22391: POP
22392: GO 22477
// end ;
22394: GO 22065
22396: POP
22397: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22398: LD_VAR 0 9
22402: PPUSH
22403: LD_VAR 0 3
22407: PPUSH
22408: LD_VAR 0 4
22412: PPUSH
22413: LD_INT 20
22415: PPUSH
22416: CALL 14423 0 4
22420: PUSH
22421: LD_INT 4
22423: ARRAY
22424: IFFALSE 22428
// exit ;
22426: GO 22477
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22428: LD_VAR 0 2
22432: PUSH
22433: LD_INT 29
22435: PUSH
22436: LD_INT 30
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: IN
22443: PUSH
22444: LD_VAR 0 3
22448: PPUSH
22449: LD_VAR 0 4
22453: PPUSH
22454: LD_VAR 0 9
22458: PPUSH
22459: CALL_OW 440
22463: NOT
22464: AND
22465: IFFALSE 22469
// exit ;
22467: GO 22477
// result := true ;
22469: LD_ADDR_VAR 0 6
22473: PUSH
22474: LD_INT 1
22476: ST_TO_ADDR
// end ;
22477: LD_VAR 0 6
22481: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22482: LD_INT 0
22484: PPUSH
22485: PPUSH
22486: PPUSH
22487: PPUSH
22488: PPUSH
22489: PPUSH
22490: PPUSH
22491: PPUSH
22492: PPUSH
22493: PPUSH
22494: PPUSH
22495: PPUSH
22496: PPUSH
22497: PPUSH
22498: PPUSH
22499: PPUSH
22500: PPUSH
22501: PPUSH
22502: PPUSH
22503: PPUSH
22504: PPUSH
22505: PPUSH
22506: PPUSH
22507: PPUSH
22508: PPUSH
22509: PPUSH
22510: PPUSH
22511: PPUSH
22512: PPUSH
22513: PPUSH
22514: PPUSH
22515: PPUSH
22516: PPUSH
22517: PPUSH
22518: PPUSH
22519: PPUSH
22520: PPUSH
22521: PPUSH
22522: PPUSH
22523: PPUSH
22524: PPUSH
22525: PPUSH
22526: PPUSH
22527: PPUSH
22528: PPUSH
22529: PPUSH
22530: PPUSH
22531: PPUSH
22532: PPUSH
22533: PPUSH
22534: PPUSH
22535: PPUSH
22536: PPUSH
22537: PPUSH
22538: PPUSH
22539: PPUSH
22540: PPUSH
22541: PPUSH
// result = [ ] ;
22542: LD_ADDR_VAR 0 7
22546: PUSH
22547: EMPTY
22548: ST_TO_ADDR
// temp_list = [ ] ;
22549: LD_ADDR_VAR 0 9
22553: PUSH
22554: EMPTY
22555: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22556: LD_VAR 0 4
22560: PUSH
22561: LD_INT 0
22563: PUSH
22564: LD_INT 1
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: LD_INT 3
22572: PUSH
22573: LD_INT 4
22575: PUSH
22576: LD_INT 5
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: IN
22587: NOT
22588: PUSH
22589: LD_VAR 0 1
22593: PUSH
22594: LD_INT 0
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: IN
22604: PUSH
22605: LD_VAR 0 5
22609: PUSH
22610: LD_INT 1
22612: PUSH
22613: LD_INT 2
22615: PUSH
22616: LD_INT 3
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: LIST
22623: IN
22624: NOT
22625: AND
22626: OR
22627: IFFALSE 22631
// exit ;
22629: GO 41022
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22631: LD_VAR 0 1
22635: PUSH
22636: LD_INT 6
22638: PUSH
22639: LD_INT 7
22641: PUSH
22642: LD_INT 8
22644: PUSH
22645: LD_INT 13
22647: PUSH
22648: LD_INT 12
22650: PUSH
22651: LD_INT 15
22653: PUSH
22654: LD_INT 11
22656: PUSH
22657: LD_INT 14
22659: PUSH
22660: LD_INT 10
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: IN
22674: IFFALSE 22684
// btype = b_lab ;
22676: LD_ADDR_VAR 0 1
22680: PUSH
22681: LD_INT 6
22683: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22684: LD_VAR 0 6
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: LD_INT 1
22694: PUSH
22695: LD_INT 2
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: IN
22703: NOT
22704: PUSH
22705: LD_VAR 0 1
22709: PUSH
22710: LD_INT 0
22712: PUSH
22713: LD_INT 1
22715: PUSH
22716: LD_INT 2
22718: PUSH
22719: LD_INT 3
22721: PUSH
22722: LD_INT 6
22724: PUSH
22725: LD_INT 36
22727: PUSH
22728: LD_INT 4
22730: PUSH
22731: LD_INT 5
22733: PUSH
22734: LD_INT 31
22736: PUSH
22737: LD_INT 32
22739: PUSH
22740: LD_INT 33
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: IN
22756: NOT
22757: PUSH
22758: LD_VAR 0 6
22762: PUSH
22763: LD_INT 1
22765: EQUAL
22766: AND
22767: OR
22768: PUSH
22769: LD_VAR 0 1
22773: PUSH
22774: LD_INT 2
22776: PUSH
22777: LD_INT 3
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: IN
22784: NOT
22785: PUSH
22786: LD_VAR 0 6
22790: PUSH
22791: LD_INT 2
22793: EQUAL
22794: AND
22795: OR
22796: IFFALSE 22806
// mode = 0 ;
22798: LD_ADDR_VAR 0 6
22802: PUSH
22803: LD_INT 0
22805: ST_TO_ADDR
// case mode of 0 :
22806: LD_VAR 0 6
22810: PUSH
22811: LD_INT 0
22813: DOUBLE
22814: EQUAL
22815: IFTRUE 22819
22817: GO 34272
22819: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22820: LD_ADDR_VAR 0 11
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 0
22837: PUSH
22838: LD_INT 1
22840: NEG
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PUSH
22846: LD_INT 1
22848: PUSH
22849: LD_INT 0
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 1
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 0
22868: PUSH
22869: LD_INT 1
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 1
22878: NEG
22879: PUSH
22880: LD_INT 0
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 1
22889: NEG
22890: PUSH
22891: LD_INT 1
22893: NEG
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: LD_INT 2
22905: NEG
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: LD_INT 2
22916: NEG
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 1
22924: PUSH
22925: LD_INT 1
22927: NEG
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 1
22935: PUSH
22936: LD_INT 2
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 0
22945: PUSH
22946: LD_INT 2
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 1
22955: NEG
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: LD_INT 3
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 0
22976: PUSH
22977: LD_INT 3
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 1
22986: NEG
22987: PUSH
22988: LD_INT 2
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23013: LD_ADDR_VAR 0 12
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: LD_INT 0
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 0
23030: PUSH
23031: LD_INT 1
23033: NEG
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 1
23041: PUSH
23042: LD_INT 0
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 1
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 0
23061: PUSH
23062: LD_INT 1
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: LD_INT 1
23071: NEG
23072: PUSH
23073: LD_INT 0
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: LD_INT 1
23086: NEG
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 1
23094: PUSH
23095: LD_INT 1
23097: NEG
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 2
23105: PUSH
23106: LD_INT 0
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 2
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 2
23136: NEG
23137: PUSH
23138: LD_INT 0
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: LD_INT 2
23147: NEG
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: NEG
23160: PUSH
23161: LD_INT 1
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 3
23170: NEG
23171: PUSH
23172: LD_INT 0
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 3
23181: NEG
23182: PUSH
23183: LD_INT 1
23185: NEG
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23209: LD_ADDR_VAR 0 13
23213: PUSH
23214: LD_INT 0
23216: PUSH
23217: LD_INT 0
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 0
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 1
23267: NEG
23268: PUSH
23269: LD_INT 0
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: LD_INT 1
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: NEG
23291: PUSH
23292: LD_INT 2
23294: NEG
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 2
23302: PUSH
23303: LD_INT 1
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 2
23312: PUSH
23313: LD_INT 2
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: LD_INT 2
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 2
23332: NEG
23333: PUSH
23334: LD_INT 1
23336: NEG
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 2
23344: NEG
23345: PUSH
23346: LD_INT 2
23348: NEG
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 2
23356: NEG
23357: PUSH
23358: LD_INT 3
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 3
23368: NEG
23369: PUSH
23370: LD_INT 2
23372: NEG
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 3
23380: NEG
23381: PUSH
23382: LD_INT 3
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23408: LD_ADDR_VAR 0 14
23412: PUSH
23413: LD_INT 0
23415: PUSH
23416: LD_INT 0
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 1
23446: PUSH
23447: LD_INT 1
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: LD_INT 1
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 1
23466: NEG
23467: PUSH
23468: LD_INT 0
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 1
23477: NEG
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 1
23489: NEG
23490: PUSH
23491: LD_INT 2
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 0
23501: PUSH
23502: LD_INT 2
23504: NEG
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 1
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 0
23533: PUSH
23534: LD_INT 2
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 1
23543: NEG
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: NEG
23555: PUSH
23556: LD_INT 3
23558: NEG
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: LD_INT 3
23569: NEG
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: LD_INT 2
23580: NEG
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23604: LD_ADDR_VAR 0 15
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: LD_INT 1
23624: NEG
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 1
23632: PUSH
23633: LD_INT 0
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: PUSH
23643: LD_INT 1
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: LD_INT 0
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: LD_INT 1
23688: NEG
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 2
23696: PUSH
23697: LD_INT 0
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 2
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 1
23716: NEG
23717: PUSH
23718: LD_INT 1
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 2
23727: NEG
23728: PUSH
23729: LD_INT 0
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 2
23738: NEG
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 2
23750: PUSH
23751: LD_INT 1
23753: NEG
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 3
23761: PUSH
23762: LD_INT 0
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 3
23771: PUSH
23772: LD_INT 1
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23797: LD_ADDR_VAR 0 16
23801: PUSH
23802: LD_INT 0
23804: PUSH
23805: LD_INT 0
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 0
23814: PUSH
23815: LD_INT 1
23817: NEG
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 1
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: LD_INT 0
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: NEG
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 1
23878: NEG
23879: PUSH
23880: LD_INT 2
23882: NEG
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 2
23890: PUSH
23891: LD_INT 1
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 2
23900: PUSH
23901: LD_INT 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 1
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: NEG
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 2
23932: NEG
23933: PUSH
23934: LD_INT 2
23936: NEG
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 3
23944: PUSH
23945: LD_INT 2
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 3
23954: PUSH
23955: LD_INT 3
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PUSH
23962: LD_INT 2
23964: PUSH
23965: LD_INT 3
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23990: LD_ADDR_VAR 0 17
23994: PUSH
23995: LD_INT 0
23997: PUSH
23998: LD_INT 0
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 1
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 0
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: NEG
24049: PUSH
24050: LD_INT 0
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 1
24059: NEG
24060: PUSH
24061: LD_INT 1
24063: NEG
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: LD_INT 2
24075: NEG
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: LD_INT 2
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: LD_INT 2
24105: PUSH
24106: LD_INT 0
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 1
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: PUSH
24123: LD_INT 2
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: PUSH
24136: LD_INT 2
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 0
24145: PUSH
24146: LD_INT 2
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 1
24155: NEG
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 2
24166: NEG
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 2
24177: NEG
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 2
24189: NEG
24190: PUSH
24191: LD_INT 2
24193: NEG
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24220: LD_ADDR_VAR 0 18
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 0
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: LD_INT 0
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 0
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 1
24289: NEG
24290: PUSH
24291: LD_INT 1
24293: NEG
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 1
24301: NEG
24302: PUSH
24303: LD_INT 2
24305: NEG
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: LD_INT 2
24316: NEG
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 1
24324: PUSH
24325: LD_INT 1
24327: NEG
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: LD_INT 2
24345: PUSH
24346: LD_INT 1
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: LD_INT 2
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: PUSH
24366: LD_INT 2
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 0
24375: PUSH
24376: LD_INT 2
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: LD_INT 1
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 2
24396: NEG
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 2
24407: NEG
24408: PUSH
24409: LD_INT 1
24411: NEG
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: NEG
24420: PUSH
24421: LD_INT 2
24423: NEG
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24450: LD_ADDR_VAR 0 19
24454: PUSH
24455: LD_INT 0
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 0
24467: PUSH
24468: LD_INT 1
24470: NEG
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 0
24498: PUSH
24499: LD_INT 1
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 1
24508: NEG
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: NEG
24520: PUSH
24521: LD_INT 1
24523: NEG
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: NEG
24532: PUSH
24533: LD_INT 2
24535: NEG
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: LD_INT 1
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 2
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 2
24575: PUSH
24576: LD_INT 1
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 2
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 0
24605: PUSH
24606: LD_INT 2
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 1
24615: NEG
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 2
24626: NEG
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 2
24637: NEG
24638: PUSH
24639: LD_INT 1
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 2
24649: NEG
24650: PUSH
24651: LD_INT 2
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24680: LD_ADDR_VAR 0 20
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 0
24697: PUSH
24698: LD_INT 1
24700: NEG
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 1
24718: PUSH
24719: LD_INT 1
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 0
24728: PUSH
24729: LD_INT 1
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 1
24738: NEG
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 1
24761: NEG
24762: PUSH
24763: LD_INT 2
24765: NEG
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: LD_INT 2
24776: NEG
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 2
24795: PUSH
24796: LD_INT 0
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 2
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 2
24815: PUSH
24816: LD_INT 2
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: PUSH
24826: LD_INT 2
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: LD_INT 2
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 1
24845: NEG
24846: PUSH
24847: LD_INT 1
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 2
24856: NEG
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 2
24867: NEG
24868: PUSH
24869: LD_INT 1
24871: NEG
24872: PUSH
24873: EMPTY
24874: LIST
24875: LIST
24876: PUSH
24877: LD_INT 2
24879: NEG
24880: PUSH
24881: LD_INT 2
24883: NEG
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24910: LD_ADDR_VAR 0 21
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 0
24927: PUSH
24928: LD_INT 1
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PUSH
24946: LD_INT 1
24948: PUSH
24949: LD_INT 1
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 0
24958: PUSH
24959: LD_INT 1
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: PUSH
24966: LD_INT 1
24968: NEG
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 1
24991: NEG
24992: PUSH
24993: LD_INT 2
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 2
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 1
25017: NEG
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 2
25025: PUSH
25026: LD_INT 0
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 2
25035: PUSH
25036: LD_INT 1
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 2
25045: PUSH
25046: LD_INT 2
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: LD_INT 2
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 0
25065: PUSH
25066: LD_INT 2
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: NEG
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 2
25086: NEG
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 2
25097: NEG
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 2
25109: NEG
25110: PUSH
25111: LD_INT 2
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25140: LD_ADDR_VAR 0 22
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: LD_INT 1
25160: NEG
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: LD_INT 1
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 0
25188: PUSH
25189: LD_INT 1
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 1
25209: NEG
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 1
25221: NEG
25222: PUSH
25223: LD_INT 2
25225: NEG
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: LD_INT 2
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: LD_INT 1
25247: NEG
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 2
25255: PUSH
25256: LD_INT 0
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: LD_INT 1
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: LD_INT 2
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: LD_INT 2
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 0
25295: PUSH
25296: LD_INT 2
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: NEG
25306: PUSH
25307: LD_INT 1
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 2
25316: NEG
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: NEG
25328: PUSH
25329: LD_INT 1
25331: NEG
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 2
25339: NEG
25340: PUSH
25341: LD_INT 2
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25370: LD_ADDR_VAR 0 23
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: LD_INT 1
25390: NEG
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: LD_INT 1
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: NEG
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: LD_INT 1
25443: NEG
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 1
25451: NEG
25452: PUSH
25453: LD_INT 2
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 0
25463: PUSH
25464: LD_INT 2
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: LD_INT 1
25477: NEG
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 2
25485: PUSH
25486: LD_INT 0
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 2
25505: PUSH
25506: LD_INT 2
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: LD_INT 2
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 0
25525: PUSH
25526: LD_INT 2
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 1
25535: NEG
25536: PUSH
25537: LD_INT 1
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 2
25546: NEG
25547: PUSH
25548: LD_INT 0
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 2
25557: NEG
25558: PUSH
25559: LD_INT 1
25561: NEG
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PUSH
25567: LD_INT 2
25569: NEG
25570: PUSH
25571: LD_INT 2
25573: NEG
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 2
25581: NEG
25582: PUSH
25583: LD_INT 3
25585: NEG
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 1
25593: NEG
25594: PUSH
25595: LD_INT 3
25597: NEG
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: LD_INT 2
25608: NEG
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 2
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25650: LD_ADDR_VAR 0 24
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: LD_INT 0
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: LD_INT 1
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 1
25719: NEG
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 1
25731: NEG
25732: PUSH
25733: LD_INT 2
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 0
25743: PUSH
25744: LD_INT 2
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 2
25765: PUSH
25766: LD_INT 0
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 2
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 1
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 0
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 2
25826: NEG
25827: PUSH
25828: LD_INT 0
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 2
25837: NEG
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 2
25849: NEG
25850: PUSH
25851: LD_INT 2
25853: NEG
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: PUSH
25862: LD_INT 2
25864: NEG
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 2
25872: PUSH
25873: LD_INT 1
25875: NEG
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 3
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 3
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
25926: LD_ADDR_VAR 0 25
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: LD_INT 1
25946: NEG
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: LD_INT 1
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 1
25984: NEG
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: LD_INT 1
25999: NEG
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: LD_INT 2
26011: NEG
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 0
26019: PUSH
26020: LD_INT 2
26022: NEG
26023: PUSH
26024: EMPTY
26025: LIST
26026: LIST
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 2
26041: PUSH
26042: LD_INT 0
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: LD_INT 2
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: LD_INT 2
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: LD_INT 2
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 1
26091: NEG
26092: PUSH
26093: LD_INT 1
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 2
26102: NEG
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 2
26113: NEG
26114: PUSH
26115: LD_INT 1
26117: NEG
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 2
26125: NEG
26126: PUSH
26127: LD_INT 2
26129: NEG
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 3
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 3
26147: PUSH
26148: LD_INT 2
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 2
26157: PUSH
26158: LD_INT 3
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: LD_INT 3
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26200: LD_ADDR_VAR 0 26
26204: PUSH
26205: LD_INT 0
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: LD_INT 0
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 0
26248: PUSH
26249: LD_INT 1
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: LD_INT 1
26273: NEG
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: NEG
26282: PUSH
26283: LD_INT 2
26285: NEG
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: LD_INT 2
26296: NEG
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: LD_INT 1
26307: NEG
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 2
26315: PUSH
26316: LD_INT 0
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 2
26325: PUSH
26326: LD_INT 1
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: LD_INT 2
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: LD_INT 2
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 2
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: LD_INT 1
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: NEG
26377: PUSH
26378: LD_INT 0
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 2
26387: NEG
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 2
26399: NEG
26400: PUSH
26401: LD_INT 2
26403: NEG
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 2
26411: PUSH
26412: LD_INT 3
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: PUSH
26419: LD_INT 1
26421: PUSH
26422: LD_INT 3
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: LD_INT 2
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 2
26442: NEG
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26476: LD_ADDR_VAR 0 27
26480: PUSH
26481: LD_INT 0
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: LD_INT 2
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: LD_INT 1
26583: NEG
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 2
26591: PUSH
26592: LD_INT 0
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 2
26601: PUSH
26602: LD_INT 1
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 2
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 2
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 2
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: LD_INT 1
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 2
26652: NEG
26653: PUSH
26654: LD_INT 0
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 2
26663: NEG
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 2
26675: NEG
26676: PUSH
26677: LD_INT 2
26679: NEG
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: LD_INT 2
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 3
26709: NEG
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 3
26721: NEG
26722: PUSH
26723: LD_INT 2
26725: NEG
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26756: LD_ADDR_VAR 0 28
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 1
26776: NEG
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 1
26825: NEG
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: LD_INT 2
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: LD_INT 2
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: LD_INT 2
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 2
26932: NEG
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: LD_INT 2
26943: NEG
26944: PUSH
26945: LD_INT 1
26947: NEG
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 2
26955: NEG
26956: PUSH
26957: LD_INT 2
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 2
26967: NEG
26968: PUSH
26969: LD_INT 3
26971: NEG
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 3
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 3
26991: NEG
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 3
27003: NEG
27004: PUSH
27005: LD_INT 2
27007: NEG
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27038: LD_ADDR_VAR 0 29
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 1
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 1
27096: NEG
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: LD_INT 1
27111: NEG
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: LD_INT 2
27123: NEG
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: LD_INT 2
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: PUSH
27154: LD_INT 0
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 2
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: LD_INT 2
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: LD_INT 2
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: NEG
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 2
27204: NEG
27205: PUSH
27206: LD_INT 1
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 2
27216: NEG
27217: PUSH
27218: LD_INT 2
27220: NEG
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: LD_INT 2
27228: NEG
27229: PUSH
27230: LD_INT 3
27232: NEG
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 2
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: PUSH
27249: LD_INT 3
27251: PUSH
27252: LD_INT 1
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 1
27261: PUSH
27262: LD_INT 3
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 1
27271: NEG
27272: PUSH
27273: LD_INT 2
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 3
27282: NEG
27283: PUSH
27284: LD_INT 2
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27317: LD_ADDR_VAR 0 30
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: LD_INT 0
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: LD_INT 1
27337: NEG
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 1
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 1
27355: PUSH
27356: LD_INT 1
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 1
27375: NEG
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: LD_INT 1
27390: NEG
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: NEG
27399: PUSH
27400: LD_INT 2
27402: NEG
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: LD_INT 2
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 1
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PUSH
27430: LD_INT 2
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 2
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 2
27452: PUSH
27453: LD_INT 2
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 1
27462: PUSH
27463: LD_INT 2
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: PUSH
27470: LD_INT 1
27472: NEG
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 2
27494: NEG
27495: PUSH
27496: LD_INT 1
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 1
27506: NEG
27507: PUSH
27508: LD_INT 3
27510: NEG
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: LD_INT 2
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 3
27529: PUSH
27530: LD_INT 2
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 2
27539: PUSH
27540: LD_INT 3
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 2
27549: NEG
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 3
27560: NEG
27561: PUSH
27562: LD_INT 1
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27595: LD_ADDR_VAR 0 31
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 0
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: LD_INT 1
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: NEG
27677: PUSH
27678: LD_INT 2
27680: NEG
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 2
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 2
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 1
27729: PUSH
27730: LD_INT 2
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 2
27760: NEG
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 2
27772: NEG
27773: PUSH
27774: LD_INT 2
27776: NEG
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 2
27784: NEG
27785: PUSH
27786: LD_INT 3
27788: NEG
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: LD_INT 1
27799: NEG
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 3
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 1
27817: PUSH
27818: LD_INT 3
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: LD_INT 2
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 3
27838: NEG
27839: PUSH
27840: LD_INT 2
27842: NEG
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27873: LD_ADDR_VAR 0 32
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: LD_INT 0
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 1
27911: PUSH
27912: LD_INT 1
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 1
27931: NEG
27932: PUSH
27933: LD_INT 0
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 1
27942: NEG
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: LD_INT 2
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: LD_INT 2
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 2
27998: PUSH
27999: LD_INT 2
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: LD_INT 2
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: NEG
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 2
28039: NEG
28040: PUSH
28041: LD_INT 0
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 2
28050: NEG
28051: PUSH
28052: LD_INT 1
28054: NEG
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: NEG
28063: PUSH
28064: LD_INT 3
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: PUSH
28075: LD_INT 2
28077: NEG
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 3
28085: PUSH
28086: LD_INT 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: LD_INT 3
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 2
28105: NEG
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 3
28116: NEG
28117: PUSH
28118: LD_INT 1
28120: NEG
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: EMPTY
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28151: LD_ADDR_VAR 0 33
28155: PUSH
28156: LD_INT 0
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: LD_INT 1
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: LD_INT 1
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 1
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: NEG
28221: PUSH
28222: LD_INT 1
28224: NEG
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 1
28232: NEG
28233: PUSH
28234: LD_INT 2
28236: NEG
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 2
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 2
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: LD_INT 2
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: LD_INT 2
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 1
28295: NEG
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 2
28306: NEG
28307: PUSH
28308: LD_INT 0
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 2
28317: NEG
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 2
28329: NEG
28330: PUSH
28331: LD_INT 2
28333: NEG
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 2
28341: NEG
28342: PUSH
28343: LD_INT 3
28345: NEG
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 2
28353: PUSH
28354: LD_INT 1
28356: NEG
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 3
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: LD_INT 3
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 1
28384: NEG
28385: PUSH
28386: LD_INT 2
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 3
28395: NEG
28396: PUSH
28397: LD_INT 2
28399: NEG
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28430: LD_ADDR_VAR 0 34
28434: PUSH
28435: LD_INT 0
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: LD_INT 1
28450: NEG
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: LD_INT 0
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: LD_INT 1
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: LD_INT 1
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: LD_INT 0
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 1
28499: NEG
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 1
28511: NEG
28512: PUSH
28513: LD_INT 2
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: LD_INT 2
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 1
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 2
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: LD_INT 2
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 2
28586: NEG
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 2
28597: NEG
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 2
28609: NEG
28610: PUSH
28611: LD_INT 2
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 1
28621: NEG
28622: PUSH
28623: LD_INT 3
28625: NEG
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: LD_INT 2
28636: NEG
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 3
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: LD_INT 3
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 2
28664: NEG
28665: PUSH
28666: LD_INT 1
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 3
28675: NEG
28676: PUSH
28677: LD_INT 1
28679: NEG
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28710: LD_ADDR_VAR 0 35
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: LD_INT 0
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 0
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: LD_INT 0
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: LD_INT 1
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: LD_INT 1
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: LD_INT 0
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 1
28779: NEG
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 2
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28822: LD_ADDR_VAR 0 36
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 0
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 1
28850: PUSH
28851: LD_INT 0
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: NEG
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: LD_INT 1
28895: NEG
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: NEG
28904: PUSH
28905: LD_INT 2
28907: NEG
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 1
28915: PUSH
28916: LD_INT 2
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
28934: LD_ADDR_VAR 0 37
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 1
28992: NEG
28993: PUSH
28994: LD_INT 0
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: PUSH
29016: LD_INT 1
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 1
29026: NEG
29027: PUSH
29028: LD_INT 1
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29046: LD_ADDR_VAR 0 38
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 1
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 1
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 1
29104: NEG
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: NEG
29116: PUSH
29117: LD_INT 1
29119: NEG
29120: PUSH
29121: EMPTY
29122: LIST
29123: LIST
29124: PUSH
29125: LD_INT 2
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 2
29137: NEG
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29158: LD_ADDR_VAR 0 39
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 0
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: LD_INT 1
29178: NEG
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 1
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 1
29216: NEG
29217: PUSH
29218: LD_INT 0
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: LD_INT 2
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 1
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29270: LD_ADDR_VAR 0 40
29274: PUSH
29275: LD_INT 0
29277: PUSH
29278: LD_INT 0
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 0
29287: PUSH
29288: LD_INT 1
29290: NEG
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: LD_INT 0
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 1
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 0
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 1
29328: NEG
29329: PUSH
29330: LD_INT 0
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 1
29339: NEG
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: LD_INT 1
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29382: LD_ADDR_VAR 0 41
29386: PUSH
29387: LD_INT 0
29389: PUSH
29390: LD_INT 0
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: LD_INT 1
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: LD_INT 0
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 1
29420: PUSH
29421: LD_INT 1
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 0
29430: PUSH
29431: LD_INT 1
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: LD_INT 0
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 1
29451: NEG
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 2
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: EMPTY
29481: LIST
29482: LIST
29483: PUSH
29484: LD_INT 2
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 2
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 1
29526: NEG
29527: PUSH
29528: LD_INT 1
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 2
29537: NEG
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 2
29548: NEG
29549: PUSH
29550: LD_INT 1
29552: NEG
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 2
29560: NEG
29561: PUSH
29562: LD_INT 2
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 2
29572: NEG
29573: PUSH
29574: LD_INT 3
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: LD_INT 1
29587: NEG
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 3
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 3
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 3
29615: PUSH
29616: LD_INT 2
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 3
29625: PUSH
29626: LD_INT 3
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 2
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 2
29645: NEG
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: LD_INT 0
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 3
29667: NEG
29668: PUSH
29669: LD_INT 1
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 3
29679: NEG
29680: PUSH
29681: LD_INT 2
29683: NEG
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 3
29691: NEG
29692: PUSH
29693: LD_INT 3
29695: NEG
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29732: LD_ADDR_VAR 0 42
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: LD_INT 0
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 0
29749: PUSH
29750: LD_INT 1
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: LD_INT 0
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: LD_INT 1
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: NEG
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 1
29801: NEG
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: LD_INT 2
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: LD_INT 2
29828: NEG
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: LD_INT 1
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: LD_INT 2
29847: PUSH
29848: LD_INT 1
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 2
29857: PUSH
29858: LD_INT 2
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 1
29867: PUSH
29868: LD_INT 2
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 2
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: NEG
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: NEG
29899: PUSH
29900: LD_INT 1
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 2
29910: NEG
29911: PUSH
29912: LD_INT 2
29914: NEG
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 2
29922: NEG
29923: PUSH
29924: LD_INT 3
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: LD_INT 3
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: LD_INT 3
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: LD_INT 2
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 3
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 3
29978: PUSH
29979: LD_INT 3
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 2
29988: PUSH
29989: LD_INT 3
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: LD_INT 3
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: LD_INT 3
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: LD_INT 2
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 3
30029: NEG
30030: PUSH
30031: LD_INT 2
30033: NEG
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 3
30041: NEG
30042: PUSH
30043: LD_INT 3
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30082: LD_ADDR_VAR 0 43
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 0
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 1
30110: PUSH
30111: LD_INT 0
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: LD_INT 1
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: LD_INT 1
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 1
30151: NEG
30152: PUSH
30153: LD_INT 1
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 1
30163: NEG
30164: PUSH
30165: LD_INT 2
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 0
30175: PUSH
30176: LD_INT 2
30178: NEG
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 1
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: LD_INT 1
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 1
30217: PUSH
30218: LD_INT 2
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: LD_INT 2
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 1
30237: NEG
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 2
30248: NEG
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 2
30259: NEG
30260: PUSH
30261: LD_INT 1
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 1
30271: NEG
30272: PUSH
30273: LD_INT 3
30275: NEG
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 0
30283: PUSH
30284: LD_INT 3
30286: NEG
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 2
30297: NEG
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 2
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 3
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 1
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 3
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 2
30367: NEG
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: NEG
30379: PUSH
30380: LD_INT 0
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 3
30389: NEG
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30430: LD_ADDR_VAR 0 44
30434: PUSH
30435: LD_INT 0
30437: PUSH
30438: LD_INT 0
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: LD_INT 1
30450: NEG
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 1
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 1
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: PUSH
30486: LD_INT 1
30488: NEG
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 1
30499: NEG
30500: PUSH
30501: LD_INT 1
30503: NEG
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: PUSH
30513: LD_INT 2
30515: NEG
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 2
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: LD_INT 1
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 2
30554: PUSH
30555: LD_INT 2
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: PUSH
30565: LD_INT 2
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 1
30574: NEG
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: LD_INT 2
30585: NEG
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 2
30596: NEG
30597: PUSH
30598: LD_INT 1
30600: NEG
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 2
30608: NEG
30609: PUSH
30610: LD_INT 2
30612: NEG
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 2
30620: NEG
30621: PUSH
30622: LD_INT 3
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 3
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 3
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 3
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 3
30673: PUSH
30674: LD_INT 3
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: LD_INT 3
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 2
30693: NEG
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 3
30704: NEG
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 3
30715: NEG
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 3
30727: NEG
30728: PUSH
30729: LD_INT 2
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 3
30739: NEG
30740: PUSH
30741: LD_INT 3
30743: NEG
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30780: LD_ADDR_VAR 0 45
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: LD_INT 1
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: NEG
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 1
30861: NEG
30862: PUSH
30863: LD_INT 2
30865: NEG
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: LD_INT 2
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: LD_INT 1
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 2
30905: PUSH
30906: LD_INT 2
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 0
30925: PUSH
30926: LD_INT 2
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 2
30946: NEG
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 2
30958: NEG
30959: PUSH
30960: LD_INT 2
30962: NEG
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 2
30970: NEG
30971: PUSH
30972: LD_INT 3
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: NEG
30983: PUSH
30984: LD_INT 3
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 0
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: LD_INT 2
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 3
31016: PUSH
31017: LD_INT 2
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 3
31026: PUSH
31027: LD_INT 3
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 2
31036: PUSH
31037: LD_INT 3
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: LD_INT 3
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: LD_INT 3
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 1
31066: NEG
31067: PUSH
31068: LD_INT 2
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 3
31077: NEG
31078: PUSH
31079: LD_INT 2
31081: NEG
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 3
31089: NEG
31090: PUSH
31091: LD_INT 3
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31130: LD_ADDR_VAR 0 46
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 0
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 1
31188: NEG
31189: PUSH
31190: LD_INT 0
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: LD_INT 2
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: LD_INT 2
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 2
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 2
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 1
31265: PUSH
31266: LD_INT 2
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: LD_INT 2
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 1
31285: NEG
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 2
31296: NEG
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 2
31307: NEG
31308: PUSH
31309: LD_INT 1
31311: NEG
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: LD_INT 3
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 0
31331: PUSH
31332: LD_INT 3
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: LD_INT 2
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 2
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 3
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 3
31374: PUSH
31375: LD_INT 1
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 1
31384: PUSH
31385: LD_INT 3
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 0
31394: PUSH
31395: LD_INT 3
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: NEG
31405: PUSH
31406: LD_INT 2
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 2
31415: NEG
31416: PUSH
31417: LD_INT 1
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 3
31426: NEG
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 3
31437: NEG
31438: PUSH
31439: LD_INT 1
31441: NEG
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31478: LD_ADDR_VAR 0 47
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: LD_INT 2
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: LD_INT 1
31585: NEG
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: PUSH
31591: LD_INT 2
31593: NEG
31594: PUSH
31595: LD_INT 1
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 2
31605: NEG
31606: PUSH
31607: LD_INT 2
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31629: LD_ADDR_VAR 0 48
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: LD_INT 0
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: LD_INT 1
31649: NEG
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: LD_INT 0
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 0
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 1
31687: NEG
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: NEG
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: LD_INT 2
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: PUSH
31734: LD_INT 1
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: LD_INT 1
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31776: LD_ADDR_VAR 0 49
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 0
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: LD_INT 1
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: PUSH
31836: LD_INT 0
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: LD_INT 1
31860: NEG
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 2
31888: PUSH
31889: LD_INT 2
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31920: LD_ADDR_VAR 0 50
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: LD_INT 0
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: LD_INT 1
31940: NEG
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: LD_INT 0
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: LD_INT 1
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 2
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: LD_INT 2
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32064: LD_ADDR_VAR 0 51
32068: PUSH
32069: LD_INT 0
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: LD_INT 1
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: LD_INT 1
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: PUSH
32146: LD_INT 2
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: LD_INT 2
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: LD_INT 1
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 2
32176: NEG
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: LD_INT 1
32191: NEG
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32211: LD_ADDR_VAR 0 52
32215: PUSH
32216: LD_INT 0
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 0
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 1
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: LD_INT 0
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: NEG
32281: PUSH
32282: LD_INT 1
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: LD_INT 2
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 1
32304: NEG
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 2
32315: NEG
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 2
32326: NEG
32327: PUSH
32328: LD_INT 1
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: LD_INT 2
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32362: LD_ADDR_VAR 0 53
32366: PUSH
32367: LD_INT 0
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 0
32379: PUSH
32380: LD_INT 1
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 0
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: LD_INT 0
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: LD_INT 1
32435: NEG
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PUSH
32445: LD_INT 2
32447: NEG
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 0
32455: PUSH
32456: LD_INT 2
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: LD_INT 0
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: LD_INT 2
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 1
32507: PUSH
32508: LD_INT 2
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 0
32517: PUSH
32518: LD_INT 2
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 1
32527: NEG
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 2
32538: NEG
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 2
32549: NEG
32550: PUSH
32551: LD_INT 1
32553: NEG
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 2
32561: NEG
32562: PUSH
32563: LD_INT 2
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32592: LD_ADDR_VAR 0 54
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 0
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 0
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: PUSH
32631: LD_INT 1
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: LD_INT 1
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 1
32661: NEG
32662: PUSH
32663: LD_INT 1
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 1
32673: NEG
32674: PUSH
32675: LD_INT 2
32677: NEG
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: LD_INT 2
32688: NEG
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: PUSH
32697: LD_INT 1
32699: NEG
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 2
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 2
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 2
32727: PUSH
32728: LD_INT 2
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 1
32737: PUSH
32738: LD_INT 2
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 0
32747: PUSH
32748: LD_INT 2
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 1
32757: NEG
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 2
32768: NEG
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 2
32779: NEG
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: NEG
32792: PUSH
32793: LD_INT 2
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32822: LD_ADDR_VAR 0 55
32826: PUSH
32827: LD_INT 0
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 0
32839: PUSH
32840: LD_INT 1
32842: NEG
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 1
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 1
32860: PUSH
32861: LD_INT 1
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: LD_INT 1
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 1
32880: NEG
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 1
32891: NEG
32892: PUSH
32893: LD_INT 1
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: PUSH
32905: LD_INT 2
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 0
32915: PUSH
32916: LD_INT 2
32918: NEG
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: LD_INT 1
32929: NEG
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 2
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 2
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 2
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: LD_INT 2
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 2
32998: NEG
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 2
33009: NEG
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: NEG
33022: PUSH
33023: LD_INT 2
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33052: LD_ADDR_VAR 0 56
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: LD_INT 1
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 1
33110: NEG
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: LD_INT 1
33125: NEG
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 1
33133: NEG
33134: PUSH
33135: LD_INT 2
33137: NEG
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: LD_INT 2
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: LD_INT 0
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: LD_INT 2
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: LD_INT 2
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 0
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: LD_INT 1
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 2
33228: NEG
33229: PUSH
33230: LD_INT 0
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 2
33239: NEG
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: NEG
33252: PUSH
33253: LD_INT 2
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33282: LD_ADDR_VAR 0 57
33286: PUSH
33287: LD_INT 0
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 1
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 0
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 1
33340: NEG
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: PUSH
33353: LD_INT 1
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: LD_INT 2
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 0
33375: PUSH
33376: LD_INT 2
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: LD_INT 1
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 2
33397: PUSH
33398: LD_INT 0
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 2
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 1
33447: NEG
33448: PUSH
33449: LD_INT 1
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 2
33458: NEG
33459: PUSH
33460: LD_INT 0
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 2
33469: NEG
33470: PUSH
33471: LD_INT 1
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 2
33481: NEG
33482: PUSH
33483: LD_INT 2
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33512: LD_ADDR_VAR 0 58
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: LD_INT 1
33532: NEG
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: LD_INT 1
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: NEG
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: LD_INT 2
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 2
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: LD_INT 1
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 2
33647: PUSH
33648: LD_INT 2
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 2
33688: NEG
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 2
33699: NEG
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: NEG
33712: PUSH
33713: LD_INT 2
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33742: LD_ADDR_VAR 0 59
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 1
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 1
33800: NEG
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 1
33811: NEG
33812: PUSH
33813: LD_INT 1
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33830: LD_ADDR_VAR 0 60
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: LD_INT 0
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 1
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 0
33878: PUSH
33879: LD_INT 1
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: NEG
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 1
33899: NEG
33900: PUSH
33901: LD_INT 1
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33918: LD_ADDR_VAR 0 61
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: LD_INT 1
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: LD_INT 1
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: NEG
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: NEG
33988: PUSH
33989: LD_INT 1
33991: NEG
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34006: LD_ADDR_VAR 0 62
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 0
34023: PUSH
34024: LD_INT 1
34026: NEG
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: LD_INT 0
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: NEG
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 1
34075: NEG
34076: PUSH
34077: LD_INT 1
34079: NEG
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34094: LD_ADDR_VAR 0 63
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 0
34111: PUSH
34112: LD_INT 1
34114: NEG
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: LD_INT 1
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 0
34142: PUSH
34143: LD_INT 1
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: NEG
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: LD_INT 1
34167: NEG
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34182: LD_ADDR_VAR 0 64
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 1
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 1
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 0
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 1
34240: NEG
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 1
34251: NEG
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: ST_TO_ADDR
// end ; 1 :
34270: GO 40167
34272: LD_INT 1
34274: DOUBLE
34275: EQUAL
34276: IFTRUE 34280
34278: GO 36903
34280: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34281: LD_ADDR_VAR 0 11
34285: PUSH
34286: LD_INT 1
34288: NEG
34289: PUSH
34290: LD_INT 3
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 0
34300: PUSH
34301: LD_INT 3
34303: NEG
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: LD_INT 2
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: LIST
34324: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34325: LD_ADDR_VAR 0 12
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 3
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 3
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: LIST
34365: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34366: LD_ADDR_VAR 0 13
34370: PUSH
34371: LD_INT 3
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 3
34383: PUSH
34384: LD_INT 3
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: LD_INT 3
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: LIST
34405: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34406: LD_ADDR_VAR 0 14
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: LD_INT 3
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: LD_INT 3
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34447: LD_ADDR_VAR 0 15
34451: PUSH
34452: LD_INT 2
34454: NEG
34455: PUSH
34456: LD_INT 1
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 3
34465: NEG
34466: PUSH
34467: LD_INT 0
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: PUSH
34474: LD_INT 3
34476: NEG
34477: PUSH
34478: LD_INT 1
34480: NEG
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: LIST
34490: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34491: LD_ADDR_VAR 0 16
34495: PUSH
34496: LD_INT 2
34498: NEG
34499: PUSH
34500: LD_INT 3
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 3
34510: NEG
34511: PUSH
34512: LD_INT 2
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 3
34522: NEG
34523: PUSH
34524: LD_INT 3
34526: NEG
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: LIST
34536: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34537: LD_ADDR_VAR 0 17
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: LD_INT 3
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: LD_INT 3
34559: NEG
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: LD_INT 2
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: LIST
34580: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34581: LD_ADDR_VAR 0 18
34585: PUSH
34586: LD_INT 2
34588: PUSH
34589: LD_INT 1
34591: NEG
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 3
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 3
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: LIST
34621: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34622: LD_ADDR_VAR 0 19
34626: PUSH
34627: LD_INT 3
34629: PUSH
34630: LD_INT 2
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 3
34639: PUSH
34640: LD_INT 3
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 3
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: LIST
34661: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34662: LD_ADDR_VAR 0 20
34666: PUSH
34667: LD_INT 1
34669: PUSH
34670: LD_INT 3
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: LD_INT 3
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 1
34689: NEG
34690: PUSH
34691: LD_INT 2
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: LIST
34702: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34703: LD_ADDR_VAR 0 21
34707: PUSH
34708: LD_INT 2
34710: NEG
34711: PUSH
34712: LD_INT 1
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 3
34721: NEG
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 3
34732: NEG
34733: PUSH
34734: LD_INT 1
34736: NEG
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: LIST
34746: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34747: LD_ADDR_VAR 0 22
34751: PUSH
34752: LD_INT 2
34754: NEG
34755: PUSH
34756: LD_INT 3
34758: NEG
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 3
34766: NEG
34767: PUSH
34768: LD_INT 2
34770: NEG
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 3
34778: NEG
34779: PUSH
34780: LD_INT 3
34782: NEG
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: LIST
34792: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34793: LD_ADDR_VAR 0 23
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 3
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: LD_INT 4
34815: NEG
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 1
34823: PUSH
34824: LD_INT 3
34826: NEG
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: LIST
34836: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
34837: LD_ADDR_VAR 0 24
34841: PUSH
34842: LD_INT 3
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: PUSH
34852: LD_INT 3
34854: PUSH
34855: LD_INT 1
34857: NEG
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 4
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: LIST
34877: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
34878: LD_ADDR_VAR 0 25
34882: PUSH
34883: LD_INT 3
34885: PUSH
34886: LD_INT 3
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 4
34895: PUSH
34896: LD_INT 3
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 3
34905: PUSH
34906: LD_INT 4
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: LIST
34917: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
34918: LD_ADDR_VAR 0 26
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: LD_INT 3
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 1
34935: PUSH
34936: LD_INT 4
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: LD_INT 3
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
34959: LD_ADDR_VAR 0 27
34963: PUSH
34964: LD_INT 3
34966: NEG
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 3
34977: NEG
34978: PUSH
34979: LD_INT 1
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 4
34988: NEG
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35003: LD_ADDR_VAR 0 28
35007: PUSH
35008: LD_INT 3
35010: NEG
35011: PUSH
35012: LD_INT 3
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 3
35022: NEG
35023: PUSH
35024: LD_INT 4
35026: NEG
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 4
35034: NEG
35035: PUSH
35036: LD_INT 3
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: LIST
35048: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35049: LD_ADDR_VAR 0 29
35053: PUSH
35054: LD_INT 1
35056: NEG
35057: PUSH
35058: LD_INT 3
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 0
35068: PUSH
35069: LD_INT 3
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: PUSH
35080: LD_INT 2
35082: NEG
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: LD_INT 4
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: LD_INT 4
35105: NEG
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: PUSH
35114: LD_INT 3
35116: NEG
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: LD_INT 5
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: LD_INT 5
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: LD_INT 4
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: LD_INT 6
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 0
35170: PUSH
35171: LD_INT 6
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 1
35181: PUSH
35182: LD_INT 5
35184: NEG
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35204: LD_ADDR_VAR 0 30
35208: PUSH
35209: LD_INT 2
35211: PUSH
35212: LD_INT 1
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 3
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 3
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 3
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 4
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 4
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 4
35273: PUSH
35274: LD_INT 1
35276: NEG
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 5
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 5
35294: PUSH
35295: LD_INT 1
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 5
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 6
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 6
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35347: LD_ADDR_VAR 0 31
35351: PUSH
35352: LD_INT 3
35354: PUSH
35355: LD_INT 2
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 3
35364: PUSH
35365: LD_INT 3
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: LD_INT 3
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 4
35384: PUSH
35385: LD_INT 3
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 4
35394: PUSH
35395: LD_INT 4
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 3
35404: PUSH
35405: LD_INT 4
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 5
35414: PUSH
35415: LD_INT 4
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 5
35424: PUSH
35425: LD_INT 5
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 4
35434: PUSH
35435: LD_INT 5
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 6
35444: PUSH
35445: LD_INT 5
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 6
35454: PUSH
35455: LD_INT 6
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 5
35464: PUSH
35465: LD_INT 6
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35486: LD_ADDR_VAR 0 32
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: LD_INT 3
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: LD_INT 3
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 1
35513: NEG
35514: PUSH
35515: LD_INT 2
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: LD_INT 4
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 0
35534: PUSH
35535: LD_INT 4
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 1
35544: NEG
35545: PUSH
35546: LD_INT 3
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 5
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 5
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 1
35575: NEG
35576: PUSH
35577: LD_INT 4
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: PUSH
35587: LD_INT 6
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: LD_INT 6
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: LD_INT 5
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35629: LD_ADDR_VAR 0 33
35633: PUSH
35634: LD_INT 2
35636: NEG
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 3
35647: NEG
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 3
35658: NEG
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 3
35670: NEG
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 4
35681: NEG
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 4
35692: NEG
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 4
35704: NEG
35705: PUSH
35706: LD_INT 1
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 5
35715: NEG
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 5
35726: NEG
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 5
35738: NEG
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 6
35749: NEG
35750: PUSH
35751: LD_INT 0
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 6
35760: NEG
35761: PUSH
35762: LD_INT 1
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35784: LD_ADDR_VAR 0 34
35788: PUSH
35789: LD_INT 2
35791: NEG
35792: PUSH
35793: LD_INT 3
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 3
35803: NEG
35804: PUSH
35805: LD_INT 2
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 3
35815: NEG
35816: PUSH
35817: LD_INT 3
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 3
35827: NEG
35828: PUSH
35829: LD_INT 4
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 4
35839: NEG
35840: PUSH
35841: LD_INT 3
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 4
35851: NEG
35852: PUSH
35853: LD_INT 4
35855: NEG
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 4
35863: NEG
35864: PUSH
35865: LD_INT 5
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 5
35875: NEG
35876: PUSH
35877: LD_INT 4
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 5
35887: NEG
35888: PUSH
35889: LD_INT 5
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 5
35899: NEG
35900: PUSH
35901: LD_INT 6
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 6
35911: NEG
35912: PUSH
35913: LD_INT 5
35915: NEG
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 6
35923: NEG
35924: PUSH
35925: LD_INT 6
35927: NEG
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
35947: LD_ADDR_VAR 0 41
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: LD_INT 2
35957: NEG
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: LD_INT 3
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: LD_INT 2
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: LIST
35990: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
35991: LD_ADDR_VAR 0 42
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: LD_INT 0
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 3
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: LIST
36031: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36032: LD_ADDR_VAR 0 43
36036: PUSH
36037: LD_INT 2
36039: PUSH
36040: LD_INT 2
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 3
36049: PUSH
36050: LD_INT 2
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 2
36059: PUSH
36060: LD_INT 3
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36072: LD_ADDR_VAR 0 44
36076: PUSH
36077: LD_INT 0
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 3
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 1
36099: NEG
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36113: LD_ADDR_VAR 0 45
36117: PUSH
36118: LD_INT 2
36120: NEG
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 2
36131: NEG
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 3
36142: NEG
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: LIST
36156: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36157: LD_ADDR_VAR 0 46
36161: PUSH
36162: LD_INT 2
36164: NEG
36165: PUSH
36166: LD_INT 2
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 2
36176: NEG
36177: PUSH
36178: LD_INT 3
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 3
36188: NEG
36189: PUSH
36190: LD_INT 2
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36203: LD_ADDR_VAR 0 47
36207: PUSH
36208: LD_INT 2
36210: NEG
36211: PUSH
36212: LD_INT 3
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: LD_INT 3
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36236: LD_ADDR_VAR 0 48
36240: PUSH
36241: LD_INT 1
36243: PUSH
36244: LD_INT 2
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 2
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36267: LD_ADDR_VAR 0 49
36271: PUSH
36272: LD_INT 3
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 3
36284: PUSH
36285: LD_INT 2
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36296: LD_ADDR_VAR 0 50
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: LD_INT 3
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: LD_INT 3
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36325: LD_ADDR_VAR 0 51
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 2
36343: NEG
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36356: LD_ADDR_VAR 0 52
36360: PUSH
36361: LD_INT 3
36363: NEG
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 3
36375: NEG
36376: PUSH
36377: LD_INT 2
36379: NEG
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36389: LD_ADDR_VAR 0 53
36393: PUSH
36394: LD_INT 1
36396: NEG
36397: PUSH
36398: LD_INT 3
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: LD_INT 3
36411: NEG
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: PUSH
36420: LD_INT 2
36422: NEG
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: LIST
36432: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36433: LD_ADDR_VAR 0 54
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 3
36451: PUSH
36452: LD_INT 0
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 3
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: LIST
36473: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36474: LD_ADDR_VAR 0 55
36478: PUSH
36479: LD_INT 3
36481: PUSH
36482: LD_INT 2
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 3
36491: PUSH
36492: LD_INT 3
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 2
36501: PUSH
36502: LD_INT 3
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36514: LD_ADDR_VAR 0 56
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: LD_INT 3
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: LD_INT 3
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36555: LD_ADDR_VAR 0 57
36559: PUSH
36560: LD_INT 2
36562: NEG
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 3
36573: NEG
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 3
36584: NEG
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36599: LD_ADDR_VAR 0 58
36603: PUSH
36604: LD_INT 2
36606: NEG
36607: PUSH
36608: LD_INT 3
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 3
36618: NEG
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 3
36630: NEG
36631: PUSH
36632: LD_INT 3
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: LIST
36644: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36645: LD_ADDR_VAR 0 59
36649: PUSH
36650: LD_INT 1
36652: NEG
36653: PUSH
36654: LD_INT 2
36656: NEG
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: LD_INT 2
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: LD_INT 1
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36689: LD_ADDR_VAR 0 60
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 1
36699: NEG
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 2
36717: PUSH
36718: LD_INT 1
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: LIST
36729: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36730: LD_ADDR_VAR 0 61
36734: PUSH
36735: LD_INT 2
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 2
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: LIST
36769: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36770: LD_ADDR_VAR 0 62
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: LD_INT 2
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: LD_INT 0
36787: PUSH
36788: LD_INT 2
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 1
36797: NEG
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: LIST
36810: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36811: LD_ADDR_VAR 0 63
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: LIST
36854: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36855: LD_ADDR_VAR 0 64
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 2
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 2
36874: NEG
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: LD_INT 2
36890: NEG
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
// end ; 2 :
36901: GO 40167
36903: LD_INT 2
36905: DOUBLE
36906: EQUAL
36907: IFTRUE 36911
36909: GO 40166
36911: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
36912: LD_ADDR_VAR 0 29
36916: PUSH
36917: LD_INT 4
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 4
36929: PUSH
36930: LD_INT 1
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 5
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 5
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 4
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 3
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 3
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 3
36991: PUSH
36992: LD_INT 2
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 5
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 3
37012: PUSH
37013: LD_INT 3
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 3
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 4
37032: PUSH
37033: LD_INT 3
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 4
37042: PUSH
37043: LD_INT 4
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 3
37052: PUSH
37053: LD_INT 4
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: LD_INT 3
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 2
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 4
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 2
37092: PUSH
37093: LD_INT 4
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 0
37102: PUSH
37103: LD_INT 4
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 0
37112: PUSH
37113: LD_INT 3
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: LD_INT 4
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 1
37132: PUSH
37133: LD_INT 5
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: LD_INT 5
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: NEG
37153: PUSH
37154: LD_INT 4
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 1
37163: NEG
37164: PUSH
37165: LD_INT 3
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: LD_INT 5
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 2
37184: NEG
37185: PUSH
37186: LD_INT 3
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 3
37195: NEG
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 3
37206: NEG
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 2
37218: NEG
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 2
37229: NEG
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 3
37240: NEG
37241: PUSH
37242: LD_INT 1
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 4
37251: NEG
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 4
37262: NEG
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 4
37274: NEG
37275: PUSH
37276: LD_INT 2
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 4
37297: NEG
37298: PUSH
37299: LD_INT 4
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 4
37309: NEG
37310: PUSH
37311: LD_INT 5
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 3
37321: NEG
37322: PUSH
37323: LD_INT 4
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 3
37333: NEG
37334: PUSH
37335: LD_INT 3
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 4
37345: NEG
37346: PUSH
37347: LD_INT 3
37349: NEG
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 5
37357: NEG
37358: PUSH
37359: LD_INT 4
37361: NEG
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 5
37369: NEG
37370: PUSH
37371: LD_INT 5
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 3
37381: NEG
37382: PUSH
37383: LD_INT 5
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 5
37393: NEG
37394: PUSH
37395: LD_INT 3
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37450: LD_ADDR_VAR 0 30
37454: PUSH
37455: LD_INT 4
37457: PUSH
37458: LD_INT 4
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 4
37467: PUSH
37468: LD_INT 3
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: LD_INT 5
37477: PUSH
37478: LD_INT 4
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 5
37487: PUSH
37488: LD_INT 5
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 4
37497: PUSH
37498: LD_INT 5
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 3
37507: PUSH
37508: LD_INT 4
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 3
37517: PUSH
37518: LD_INT 3
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 5
37527: PUSH
37528: LD_INT 3
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 3
37537: PUSH
37538: LD_INT 5
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 0
37547: PUSH
37548: LD_INT 3
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: LD_INT 2
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: PUSH
37568: LD_INT 3
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: PUSH
37578: LD_INT 4
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 4
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: LD_INT 3
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: NEG
37609: PUSH
37610: LD_INT 2
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: LD_INT 4
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: NEG
37630: PUSH
37631: LD_INT 2
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 4
37640: NEG
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 4
37651: NEG
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 3
37663: NEG
37664: PUSH
37665: LD_INT 0
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 3
37674: NEG
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 4
37685: NEG
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 5
37696: NEG
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: LD_INT 5
37707: NEG
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 5
37719: NEG
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 3
37731: NEG
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 3
37742: NEG
37743: PUSH
37744: LD_INT 3
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 3
37754: NEG
37755: PUSH
37756: LD_INT 4
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: LD_INT 3
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 2
37778: NEG
37779: PUSH
37780: LD_INT 2
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 3
37790: NEG
37791: PUSH
37792: LD_INT 2
37794: NEG
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 4
37802: NEG
37803: PUSH
37804: LD_INT 3
37806: NEG
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 4
37814: NEG
37815: PUSH
37816: LD_INT 4
37818: NEG
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: LD_INT 4
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 4
37838: NEG
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: LD_INT 4
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: LD_INT 5
37864: NEG
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: LD_INT 4
37875: NEG
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: LD_INT 3
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: LD_INT 3
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 1
37905: NEG
37906: PUSH
37907: LD_INT 4
37909: NEG
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 1
37917: NEG
37918: PUSH
37919: LD_INT 5
37921: NEG
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 2
37929: PUSH
37930: LD_INT 3
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 2
37940: NEG
37941: PUSH
37942: LD_INT 5
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
37997: LD_ADDR_VAR 0 31
38001: PUSH
38002: LD_INT 0
38004: PUSH
38005: LD_INT 4
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: LD_INT 3
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: LD_INT 4
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: LD_INT 5
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: LD_INT 5
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: LD_INT 4
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: LD_INT 3
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: LD_INT 5
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 2
38086: NEG
38087: PUSH
38088: LD_INT 3
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 3
38097: NEG
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 3
38108: NEG
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 2
38120: NEG
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 2
38131: NEG
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 3
38142: NEG
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 4
38153: NEG
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 4
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 4
38176: NEG
38177: PUSH
38178: LD_INT 2
38180: NEG
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 2
38188: NEG
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 4
38199: NEG
38200: PUSH
38201: LD_INT 4
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 4
38211: NEG
38212: PUSH
38213: LD_INT 5
38215: NEG
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 3
38223: NEG
38224: PUSH
38225: LD_INT 4
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 3
38235: NEG
38236: PUSH
38237: LD_INT 3
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 4
38247: NEG
38248: PUSH
38249: LD_INT 3
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 5
38259: NEG
38260: PUSH
38261: LD_INT 4
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 5
38271: NEG
38272: PUSH
38273: LD_INT 5
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 3
38283: NEG
38284: PUSH
38285: LD_INT 5
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 5
38295: NEG
38296: PUSH
38297: LD_INT 3
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 0
38307: PUSH
38308: LD_INT 3
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: LD_INT 4
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: LD_INT 3
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: PUSH
38341: LD_INT 2
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 0
38351: PUSH
38352: LD_INT 2
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: NEG
38363: PUSH
38364: LD_INT 3
38366: NEG
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: LD_INT 4
38378: NEG
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: LD_INT 2
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: NEG
38398: PUSH
38399: LD_INT 4
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 4
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 4
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 5
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 5
38440: PUSH
38441: LD_INT 1
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 4
38450: PUSH
38451: LD_INT 1
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 3
38460: PUSH
38461: LD_INT 0
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 3
38470: PUSH
38471: LD_INT 1
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 3
38481: PUSH
38482: LD_INT 2
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 5
38492: PUSH
38493: LD_INT 2
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38547: LD_ADDR_VAR 0 32
38551: PUSH
38552: LD_INT 4
38554: NEG
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 4
38565: NEG
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 3
38577: NEG
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 3
38588: NEG
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 4
38599: NEG
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 5
38610: NEG
38611: PUSH
38612: LD_INT 0
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 5
38621: NEG
38622: PUSH
38623: LD_INT 1
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 5
38633: NEG
38634: PUSH
38635: LD_INT 2
38637: NEG
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 3
38645: NEG
38646: PUSH
38647: LD_INT 2
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 3
38656: NEG
38657: PUSH
38658: LD_INT 3
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 3
38668: NEG
38669: PUSH
38670: LD_INT 4
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: NEG
38681: PUSH
38682: LD_INT 3
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 2
38692: NEG
38693: PUSH
38694: LD_INT 2
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 3
38704: NEG
38705: PUSH
38706: LD_INT 2
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 4
38716: NEG
38717: PUSH
38718: LD_INT 3
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 4
38728: NEG
38729: PUSH
38730: LD_INT 4
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 2
38740: NEG
38741: PUSH
38742: LD_INT 4
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 4
38752: NEG
38753: PUSH
38754: LD_INT 2
38756: NEG
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: LD_INT 4
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: LD_INT 5
38778: NEG
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 1
38786: PUSH
38787: LD_INT 4
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 3
38800: NEG
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: LD_INT 3
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: LD_INT 4
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 1
38831: NEG
38832: PUSH
38833: LD_INT 5
38835: NEG
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 2
38843: PUSH
38844: LD_INT 3
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 2
38854: NEG
38855: PUSH
38856: LD_INT 5
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 3
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 3
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 4
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 4
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 3
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 2
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 2
38938: PUSH
38939: LD_INT 2
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 4
38949: PUSH
38950: LD_INT 2
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 4
38959: PUSH
38960: LD_INT 4
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 4
38969: PUSH
38970: LD_INT 3
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 5
38979: PUSH
38980: LD_INT 4
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 5
38989: PUSH
38990: LD_INT 5
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 4
38999: PUSH
39000: LD_INT 5
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 3
39009: PUSH
39010: LD_INT 4
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 3
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 5
39029: PUSH
39030: LD_INT 3
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 3
39039: PUSH
39040: LD_INT 5
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39094: LD_ADDR_VAR 0 33
39098: PUSH
39099: LD_INT 4
39101: NEG
39102: PUSH
39103: LD_INT 4
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 4
39113: NEG
39114: PUSH
39115: LD_INT 5
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 3
39125: NEG
39126: PUSH
39127: LD_INT 4
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 3
39137: NEG
39138: PUSH
39139: LD_INT 3
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 4
39149: NEG
39150: PUSH
39151: LD_INT 3
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 5
39161: NEG
39162: PUSH
39163: LD_INT 4
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 5
39173: NEG
39174: PUSH
39175: LD_INT 5
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 3
39185: NEG
39186: PUSH
39187: LD_INT 5
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 5
39197: NEG
39198: PUSH
39199: LD_INT 3
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: LD_INT 3
39212: NEG
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: LD_INT 4
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: LD_INT 3
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 2
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 0
39253: PUSH
39254: LD_INT 2
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: NEG
39265: PUSH
39266: LD_INT 3
39268: NEG
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: LD_INT 4
39280: NEG
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: LD_INT 2
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 2
39299: NEG
39300: PUSH
39301: LD_INT 4
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 4
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 4
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 5
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 5
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 4
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 3
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 3
39372: PUSH
39373: LD_INT 1
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 3
39383: PUSH
39384: LD_INT 2
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 5
39394: PUSH
39395: LD_INT 2
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 3
39404: PUSH
39405: LD_INT 3
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 3
39414: PUSH
39415: LD_INT 2
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 4
39424: PUSH
39425: LD_INT 3
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 4
39434: PUSH
39435: LD_INT 4
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 3
39444: PUSH
39445: LD_INT 4
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 2
39454: PUSH
39455: LD_INT 3
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 4
39474: PUSH
39475: LD_INT 2
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: LD_INT 4
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: LD_INT 4
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: LD_INT 3
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 4
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: LD_INT 5
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 5
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: LD_INT 4
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: LD_INT 3
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: LD_INT 5
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: LD_INT 3
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39632: LD_ADDR_VAR 0 34
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: LD_INT 4
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 5
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 4
39664: NEG
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: LD_INT 3
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: LD_INT 3
39686: NEG
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 1
39694: NEG
39695: PUSH
39696: LD_INT 4
39698: NEG
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: LD_INT 5
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: LD_INT 3
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 2
39729: NEG
39730: PUSH
39731: LD_INT 5
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 3
39741: PUSH
39742: LD_INT 0
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 3
39751: PUSH
39752: LD_INT 1
39754: NEG
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 4
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 4
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 3
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 2
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 4
39824: PUSH
39825: LD_INT 2
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 4
39834: PUSH
39835: LD_INT 4
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 4
39844: PUSH
39845: LD_INT 3
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 5
39854: PUSH
39855: LD_INT 4
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 5
39864: PUSH
39865: LD_INT 5
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 4
39874: PUSH
39875: LD_INT 5
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 3
39884: PUSH
39885: LD_INT 4
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 3
39894: PUSH
39895: LD_INT 3
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 5
39904: PUSH
39905: LD_INT 3
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 3
39914: PUSH
39915: LD_INT 5
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 3
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 0
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: LD_INT 3
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 4
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 0
39964: PUSH
39965: LD_INT 4
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: LD_INT 3
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: LD_INT 4
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 2
40006: NEG
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 4
40017: NEG
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 4
40028: NEG
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 3
40040: NEG
40041: PUSH
40042: LD_INT 0
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 3
40051: NEG
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 4
40062: NEG
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 5
40073: NEG
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 5
40084: NEG
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 5
40096: NEG
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 3
40108: NEG
40109: PUSH
40110: LD_INT 2
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: ST_TO_ADDR
// end ; end ;
40164: GO 40167
40166: POP
// case btype of b_depot , b_warehouse :
40167: LD_VAR 0 1
40171: PUSH
40172: LD_INT 0
40174: DOUBLE
40175: EQUAL
40176: IFTRUE 40186
40178: LD_INT 1
40180: DOUBLE
40181: EQUAL
40182: IFTRUE 40186
40184: GO 40387
40186: POP
// case nation of nation_american :
40187: LD_VAR 0 5
40191: PUSH
40192: LD_INT 1
40194: DOUBLE
40195: EQUAL
40196: IFTRUE 40200
40198: GO 40256
40200: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40201: LD_ADDR_VAR 0 9
40205: PUSH
40206: LD_VAR 0 11
40210: PUSH
40211: LD_VAR 0 12
40215: PUSH
40216: LD_VAR 0 13
40220: PUSH
40221: LD_VAR 0 14
40225: PUSH
40226: LD_VAR 0 15
40230: PUSH
40231: LD_VAR 0 16
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: PUSH
40244: LD_VAR 0 4
40248: PUSH
40249: LD_INT 1
40251: PLUS
40252: ARRAY
40253: ST_TO_ADDR
40254: GO 40385
40256: LD_INT 2
40258: DOUBLE
40259: EQUAL
40260: IFTRUE 40264
40262: GO 40320
40264: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40265: LD_ADDR_VAR 0 9
40269: PUSH
40270: LD_VAR 0 17
40274: PUSH
40275: LD_VAR 0 18
40279: PUSH
40280: LD_VAR 0 19
40284: PUSH
40285: LD_VAR 0 20
40289: PUSH
40290: LD_VAR 0 21
40294: PUSH
40295: LD_VAR 0 22
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: PUSH
40308: LD_VAR 0 4
40312: PUSH
40313: LD_INT 1
40315: PLUS
40316: ARRAY
40317: ST_TO_ADDR
40318: GO 40385
40320: LD_INT 3
40322: DOUBLE
40323: EQUAL
40324: IFTRUE 40328
40326: GO 40384
40328: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40329: LD_ADDR_VAR 0 9
40333: PUSH
40334: LD_VAR 0 23
40338: PUSH
40339: LD_VAR 0 24
40343: PUSH
40344: LD_VAR 0 25
40348: PUSH
40349: LD_VAR 0 26
40353: PUSH
40354: LD_VAR 0 27
40358: PUSH
40359: LD_VAR 0 28
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: PUSH
40372: LD_VAR 0 4
40376: PUSH
40377: LD_INT 1
40379: PLUS
40380: ARRAY
40381: ST_TO_ADDR
40382: GO 40385
40384: POP
40385: GO 40940
40387: LD_INT 2
40389: DOUBLE
40390: EQUAL
40391: IFTRUE 40401
40393: LD_INT 3
40395: DOUBLE
40396: EQUAL
40397: IFTRUE 40401
40399: GO 40457
40401: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40402: LD_ADDR_VAR 0 9
40406: PUSH
40407: LD_VAR 0 29
40411: PUSH
40412: LD_VAR 0 30
40416: PUSH
40417: LD_VAR 0 31
40421: PUSH
40422: LD_VAR 0 32
40426: PUSH
40427: LD_VAR 0 33
40431: PUSH
40432: LD_VAR 0 34
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: PUSH
40445: LD_VAR 0 4
40449: PUSH
40450: LD_INT 1
40452: PLUS
40453: ARRAY
40454: ST_TO_ADDR
40455: GO 40940
40457: LD_INT 16
40459: DOUBLE
40460: EQUAL
40461: IFTRUE 40519
40463: LD_INT 17
40465: DOUBLE
40466: EQUAL
40467: IFTRUE 40519
40469: LD_INT 18
40471: DOUBLE
40472: EQUAL
40473: IFTRUE 40519
40475: LD_INT 19
40477: DOUBLE
40478: EQUAL
40479: IFTRUE 40519
40481: LD_INT 22
40483: DOUBLE
40484: EQUAL
40485: IFTRUE 40519
40487: LD_INT 20
40489: DOUBLE
40490: EQUAL
40491: IFTRUE 40519
40493: LD_INT 21
40495: DOUBLE
40496: EQUAL
40497: IFTRUE 40519
40499: LD_INT 23
40501: DOUBLE
40502: EQUAL
40503: IFTRUE 40519
40505: LD_INT 24
40507: DOUBLE
40508: EQUAL
40509: IFTRUE 40519
40511: LD_INT 25
40513: DOUBLE
40514: EQUAL
40515: IFTRUE 40519
40517: GO 40575
40519: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40520: LD_ADDR_VAR 0 9
40524: PUSH
40525: LD_VAR 0 35
40529: PUSH
40530: LD_VAR 0 36
40534: PUSH
40535: LD_VAR 0 37
40539: PUSH
40540: LD_VAR 0 38
40544: PUSH
40545: LD_VAR 0 39
40549: PUSH
40550: LD_VAR 0 40
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: PUSH
40563: LD_VAR 0 4
40567: PUSH
40568: LD_INT 1
40570: PLUS
40571: ARRAY
40572: ST_TO_ADDR
40573: GO 40940
40575: LD_INT 6
40577: DOUBLE
40578: EQUAL
40579: IFTRUE 40631
40581: LD_INT 7
40583: DOUBLE
40584: EQUAL
40585: IFTRUE 40631
40587: LD_INT 8
40589: DOUBLE
40590: EQUAL
40591: IFTRUE 40631
40593: LD_INT 13
40595: DOUBLE
40596: EQUAL
40597: IFTRUE 40631
40599: LD_INT 12
40601: DOUBLE
40602: EQUAL
40603: IFTRUE 40631
40605: LD_INT 15
40607: DOUBLE
40608: EQUAL
40609: IFTRUE 40631
40611: LD_INT 11
40613: DOUBLE
40614: EQUAL
40615: IFTRUE 40631
40617: LD_INT 14
40619: DOUBLE
40620: EQUAL
40621: IFTRUE 40631
40623: LD_INT 10
40625: DOUBLE
40626: EQUAL
40627: IFTRUE 40631
40629: GO 40687
40631: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40632: LD_ADDR_VAR 0 9
40636: PUSH
40637: LD_VAR 0 41
40641: PUSH
40642: LD_VAR 0 42
40646: PUSH
40647: LD_VAR 0 43
40651: PUSH
40652: LD_VAR 0 44
40656: PUSH
40657: LD_VAR 0 45
40661: PUSH
40662: LD_VAR 0 46
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: PUSH
40675: LD_VAR 0 4
40679: PUSH
40680: LD_INT 1
40682: PLUS
40683: ARRAY
40684: ST_TO_ADDR
40685: GO 40940
40687: LD_INT 36
40689: DOUBLE
40690: EQUAL
40691: IFTRUE 40695
40693: GO 40751
40695: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40696: LD_ADDR_VAR 0 9
40700: PUSH
40701: LD_VAR 0 47
40705: PUSH
40706: LD_VAR 0 48
40710: PUSH
40711: LD_VAR 0 49
40715: PUSH
40716: LD_VAR 0 50
40720: PUSH
40721: LD_VAR 0 51
40725: PUSH
40726: LD_VAR 0 52
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: PUSH
40739: LD_VAR 0 4
40743: PUSH
40744: LD_INT 1
40746: PLUS
40747: ARRAY
40748: ST_TO_ADDR
40749: GO 40940
40751: LD_INT 4
40753: DOUBLE
40754: EQUAL
40755: IFTRUE 40777
40757: LD_INT 5
40759: DOUBLE
40760: EQUAL
40761: IFTRUE 40777
40763: LD_INT 34
40765: DOUBLE
40766: EQUAL
40767: IFTRUE 40777
40769: LD_INT 37
40771: DOUBLE
40772: EQUAL
40773: IFTRUE 40777
40775: GO 40833
40777: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40778: LD_ADDR_VAR 0 9
40782: PUSH
40783: LD_VAR 0 53
40787: PUSH
40788: LD_VAR 0 54
40792: PUSH
40793: LD_VAR 0 55
40797: PUSH
40798: LD_VAR 0 56
40802: PUSH
40803: LD_VAR 0 57
40807: PUSH
40808: LD_VAR 0 58
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: PUSH
40821: LD_VAR 0 4
40825: PUSH
40826: LD_INT 1
40828: PLUS
40829: ARRAY
40830: ST_TO_ADDR
40831: GO 40940
40833: LD_INT 31
40835: DOUBLE
40836: EQUAL
40837: IFTRUE 40883
40839: LD_INT 32
40841: DOUBLE
40842: EQUAL
40843: IFTRUE 40883
40845: LD_INT 33
40847: DOUBLE
40848: EQUAL
40849: IFTRUE 40883
40851: LD_INT 27
40853: DOUBLE
40854: EQUAL
40855: IFTRUE 40883
40857: LD_INT 26
40859: DOUBLE
40860: EQUAL
40861: IFTRUE 40883
40863: LD_INT 28
40865: DOUBLE
40866: EQUAL
40867: IFTRUE 40883
40869: LD_INT 29
40871: DOUBLE
40872: EQUAL
40873: IFTRUE 40883
40875: LD_INT 30
40877: DOUBLE
40878: EQUAL
40879: IFTRUE 40883
40881: GO 40939
40883: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
40884: LD_ADDR_VAR 0 9
40888: PUSH
40889: LD_VAR 0 59
40893: PUSH
40894: LD_VAR 0 60
40898: PUSH
40899: LD_VAR 0 61
40903: PUSH
40904: LD_VAR 0 62
40908: PUSH
40909: LD_VAR 0 63
40913: PUSH
40914: LD_VAR 0 64
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: PUSH
40927: LD_VAR 0 4
40931: PUSH
40932: LD_INT 1
40934: PLUS
40935: ARRAY
40936: ST_TO_ADDR
40937: GO 40940
40939: POP
// temp_list2 = [ ] ;
40940: LD_ADDR_VAR 0 10
40944: PUSH
40945: EMPTY
40946: ST_TO_ADDR
// for i in temp_list do
40947: LD_ADDR_VAR 0 8
40951: PUSH
40952: LD_VAR 0 9
40956: PUSH
40957: FOR_IN
40958: IFFALSE 41010
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
40960: LD_ADDR_VAR 0 10
40964: PUSH
40965: LD_VAR 0 10
40969: PUSH
40970: LD_VAR 0 8
40974: PUSH
40975: LD_INT 1
40977: ARRAY
40978: PUSH
40979: LD_VAR 0 2
40983: PLUS
40984: PUSH
40985: LD_VAR 0 8
40989: PUSH
40990: LD_INT 2
40992: ARRAY
40993: PUSH
40994: LD_VAR 0 3
40998: PLUS
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: EMPTY
41005: LIST
41006: ADD
41007: ST_TO_ADDR
41008: GO 40957
41010: POP
41011: POP
// result = temp_list2 ;
41012: LD_ADDR_VAR 0 7
41016: PUSH
41017: LD_VAR 0 10
41021: ST_TO_ADDR
// end ;
41022: LD_VAR 0 7
41026: RET
// export function EnemyInRange ( unit , dist ) ; begin
41027: LD_INT 0
41029: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41030: LD_ADDR_VAR 0 3
41034: PUSH
41035: LD_VAR 0 1
41039: PPUSH
41040: CALL_OW 255
41044: PPUSH
41045: LD_VAR 0 1
41049: PPUSH
41050: CALL_OW 250
41054: PPUSH
41055: LD_VAR 0 1
41059: PPUSH
41060: CALL_OW 251
41064: PPUSH
41065: LD_VAR 0 2
41069: PPUSH
41070: CALL 14423 0 4
41074: PUSH
41075: LD_INT 4
41077: ARRAY
41078: ST_TO_ADDR
// end ;
41079: LD_VAR 0 3
41083: RET
// export function PlayerSeeMe ( unit ) ; begin
41084: LD_INT 0
41086: PPUSH
// result := See ( your_side , unit ) ;
41087: LD_ADDR_VAR 0 2
41091: PUSH
41092: LD_OWVAR 2
41096: PPUSH
41097: LD_VAR 0 1
41101: PPUSH
41102: CALL_OW 292
41106: ST_TO_ADDR
// end ;
41107: LD_VAR 0 2
41111: RET
// export function ReverseDir ( unit ) ; begin
41112: LD_INT 0
41114: PPUSH
// if not unit then
41115: LD_VAR 0 1
41119: NOT
41120: IFFALSE 41124
// exit ;
41122: GO 41147
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41124: LD_ADDR_VAR 0 2
41128: PUSH
41129: LD_VAR 0 1
41133: PPUSH
41134: CALL_OW 254
41138: PUSH
41139: LD_INT 3
41141: PLUS
41142: PUSH
41143: LD_INT 6
41145: MOD
41146: ST_TO_ADDR
// end ;
41147: LD_VAR 0 2
41151: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
41152: LD_INT 0
41154: PPUSH
41155: PPUSH
41156: PPUSH
41157: PPUSH
41158: PPUSH
// if not hexes then
41159: LD_VAR 0 2
41163: NOT
41164: IFFALSE 41168
// exit ;
41166: GO 41316
// dist := 9999 ;
41168: LD_ADDR_VAR 0 5
41172: PUSH
41173: LD_INT 9999
41175: ST_TO_ADDR
// for i = 1 to hexes do
41176: LD_ADDR_VAR 0 4
41180: PUSH
41181: DOUBLE
41182: LD_INT 1
41184: DEC
41185: ST_TO_ADDR
41186: LD_VAR 0 2
41190: PUSH
41191: FOR_TO
41192: IFFALSE 41304
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
41194: LD_VAR 0 1
41198: PPUSH
41199: LD_VAR 0 2
41203: PUSH
41204: LD_VAR 0 4
41208: ARRAY
41209: PUSH
41210: LD_INT 1
41212: ARRAY
41213: PPUSH
41214: LD_VAR 0 2
41218: PUSH
41219: LD_VAR 0 4
41223: ARRAY
41224: PUSH
41225: LD_INT 2
41227: ARRAY
41228: PPUSH
41229: CALL_OW 297
41233: PUSH
41234: LD_VAR 0 5
41238: LESS
41239: IFFALSE 41302
// begin hex := hexes [ i ] ;
41241: LD_ADDR_VAR 0 7
41245: PUSH
41246: LD_VAR 0 2
41250: PUSH
41251: LD_VAR 0 4
41255: ARRAY
41256: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41257: LD_ADDR_VAR 0 5
41261: PUSH
41262: LD_VAR 0 1
41266: PPUSH
41267: LD_VAR 0 2
41271: PUSH
41272: LD_VAR 0 4
41276: ARRAY
41277: PUSH
41278: LD_INT 1
41280: ARRAY
41281: PPUSH
41282: LD_VAR 0 2
41286: PUSH
41287: LD_VAR 0 4
41291: ARRAY
41292: PUSH
41293: LD_INT 2
41295: ARRAY
41296: PPUSH
41297: CALL_OW 297
41301: ST_TO_ADDR
// end ; end ;
41302: GO 41191
41304: POP
41305: POP
// result := hex ;
41306: LD_ADDR_VAR 0 3
41310: PUSH
41311: LD_VAR 0 7
41315: ST_TO_ADDR
// end ;
41316: LD_VAR 0 3
41320: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41321: LD_INT 0
41323: PPUSH
41324: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41325: LD_VAR 0 1
41329: NOT
41330: PUSH
41331: LD_VAR 0 1
41335: PUSH
41336: LD_INT 21
41338: PUSH
41339: LD_INT 2
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 23
41348: PUSH
41349: LD_INT 2
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PPUSH
41360: CALL_OW 69
41364: IN
41365: NOT
41366: OR
41367: IFFALSE 41371
// exit ;
41369: GO 41418
// for i = 1 to 3 do
41371: LD_ADDR_VAR 0 3
41375: PUSH
41376: DOUBLE
41377: LD_INT 1
41379: DEC
41380: ST_TO_ADDR
41381: LD_INT 3
41383: PUSH
41384: FOR_TO
41385: IFFALSE 41416
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41387: LD_VAR 0 1
41391: PPUSH
41392: CALL_OW 250
41396: PPUSH
41397: LD_VAR 0 1
41401: PPUSH
41402: CALL_OW 251
41406: PPUSH
41407: LD_INT 1
41409: PPUSH
41410: CALL_OW 453
41414: GO 41384
41416: POP
41417: POP
// end ;
41418: LD_VAR 0 2
41422: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41423: LD_INT 0
41425: PPUSH
41426: PPUSH
41427: PPUSH
41428: PPUSH
41429: PPUSH
41430: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41431: LD_VAR 0 1
41435: NOT
41436: PUSH
41437: LD_VAR 0 2
41441: NOT
41442: OR
41443: PUSH
41444: LD_VAR 0 1
41448: PPUSH
41449: CALL_OW 314
41453: OR
41454: IFFALSE 41458
// exit ;
41456: GO 41899
// x := GetX ( enemy_unit ) ;
41458: LD_ADDR_VAR 0 7
41462: PUSH
41463: LD_VAR 0 2
41467: PPUSH
41468: CALL_OW 250
41472: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41473: LD_ADDR_VAR 0 8
41477: PUSH
41478: LD_VAR 0 2
41482: PPUSH
41483: CALL_OW 251
41487: ST_TO_ADDR
// if not x or not y then
41488: LD_VAR 0 7
41492: NOT
41493: PUSH
41494: LD_VAR 0 8
41498: NOT
41499: OR
41500: IFFALSE 41504
// exit ;
41502: GO 41899
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41504: LD_ADDR_VAR 0 6
41508: PUSH
41509: LD_VAR 0 7
41513: PPUSH
41514: LD_INT 0
41516: PPUSH
41517: LD_INT 4
41519: PPUSH
41520: CALL_OW 272
41524: PUSH
41525: LD_VAR 0 8
41529: PPUSH
41530: LD_INT 0
41532: PPUSH
41533: LD_INT 4
41535: PPUSH
41536: CALL_OW 273
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_VAR 0 7
41549: PPUSH
41550: LD_INT 1
41552: PPUSH
41553: LD_INT 4
41555: PPUSH
41556: CALL_OW 272
41560: PUSH
41561: LD_VAR 0 8
41565: PPUSH
41566: LD_INT 1
41568: PPUSH
41569: LD_INT 4
41571: PPUSH
41572: CALL_OW 273
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_VAR 0 7
41585: PPUSH
41586: LD_INT 2
41588: PPUSH
41589: LD_INT 4
41591: PPUSH
41592: CALL_OW 272
41596: PUSH
41597: LD_VAR 0 8
41601: PPUSH
41602: LD_INT 2
41604: PPUSH
41605: LD_INT 4
41607: PPUSH
41608: CALL_OW 273
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_VAR 0 7
41621: PPUSH
41622: LD_INT 3
41624: PPUSH
41625: LD_INT 4
41627: PPUSH
41628: CALL_OW 272
41632: PUSH
41633: LD_VAR 0 8
41637: PPUSH
41638: LD_INT 3
41640: PPUSH
41641: LD_INT 4
41643: PPUSH
41644: CALL_OW 273
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_VAR 0 7
41657: PPUSH
41658: LD_INT 4
41660: PPUSH
41661: LD_INT 4
41663: PPUSH
41664: CALL_OW 272
41668: PUSH
41669: LD_VAR 0 8
41673: PPUSH
41674: LD_INT 4
41676: PPUSH
41677: LD_INT 4
41679: PPUSH
41680: CALL_OW 273
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_VAR 0 7
41693: PPUSH
41694: LD_INT 5
41696: PPUSH
41697: LD_INT 4
41699: PPUSH
41700: CALL_OW 272
41704: PUSH
41705: LD_VAR 0 8
41709: PPUSH
41710: LD_INT 5
41712: PPUSH
41713: LD_INT 4
41715: PPUSH
41716: CALL_OW 273
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: ST_TO_ADDR
// for i = tmp downto 1 do
41733: LD_ADDR_VAR 0 4
41737: PUSH
41738: DOUBLE
41739: LD_VAR 0 6
41743: INC
41744: ST_TO_ADDR
41745: LD_INT 1
41747: PUSH
41748: FOR_DOWNTO
41749: IFFALSE 41850
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41751: LD_VAR 0 6
41755: PUSH
41756: LD_VAR 0 4
41760: ARRAY
41761: PUSH
41762: LD_INT 1
41764: ARRAY
41765: PPUSH
41766: LD_VAR 0 6
41770: PUSH
41771: LD_VAR 0 4
41775: ARRAY
41776: PUSH
41777: LD_INT 2
41779: ARRAY
41780: PPUSH
41781: CALL_OW 488
41785: NOT
41786: PUSH
41787: LD_VAR 0 6
41791: PUSH
41792: LD_VAR 0 4
41796: ARRAY
41797: PUSH
41798: LD_INT 1
41800: ARRAY
41801: PPUSH
41802: LD_VAR 0 6
41806: PUSH
41807: LD_VAR 0 4
41811: ARRAY
41812: PUSH
41813: LD_INT 2
41815: ARRAY
41816: PPUSH
41817: CALL_OW 428
41821: PUSH
41822: LD_INT 0
41824: NONEQUAL
41825: OR
41826: IFFALSE 41848
// tmp := Delete ( tmp , i ) ;
41828: LD_ADDR_VAR 0 6
41832: PUSH
41833: LD_VAR 0 6
41837: PPUSH
41838: LD_VAR 0 4
41842: PPUSH
41843: CALL_OW 3
41847: ST_TO_ADDR
41848: GO 41748
41850: POP
41851: POP
// j := GetClosestHex ( unit , tmp ) ;
41852: LD_ADDR_VAR 0 5
41856: PUSH
41857: LD_VAR 0 1
41861: PPUSH
41862: LD_VAR 0 6
41866: PPUSH
41867: CALL 41152 0 2
41871: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
41872: LD_VAR 0 1
41876: PPUSH
41877: LD_VAR 0 5
41881: PUSH
41882: LD_INT 1
41884: ARRAY
41885: PPUSH
41886: LD_VAR 0 5
41890: PUSH
41891: LD_INT 2
41893: ARRAY
41894: PPUSH
41895: CALL_OW 111
// end ;
41899: LD_VAR 0 3
41903: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41904: LD_INT 0
41906: PPUSH
41907: PPUSH
41908: PPUSH
// uc_side = 0 ;
41909: LD_ADDR_OWVAR 20
41913: PUSH
41914: LD_INT 0
41916: ST_TO_ADDR
// uc_nation = 0 ;
41917: LD_ADDR_OWVAR 21
41921: PUSH
41922: LD_INT 0
41924: ST_TO_ADDR
// InitHc_All ( ) ;
41925: CALL_OW 584
// InitVc ;
41929: CALL_OW 20
// if mastodonts then
41933: LD_VAR 0 6
41937: IFFALSE 42004
// for i = 1 to mastodonts do
41939: LD_ADDR_VAR 0 11
41943: PUSH
41944: DOUBLE
41945: LD_INT 1
41947: DEC
41948: ST_TO_ADDR
41949: LD_VAR 0 6
41953: PUSH
41954: FOR_TO
41955: IFFALSE 42002
// begin vc_chassis := 31 ;
41957: LD_ADDR_OWVAR 37
41961: PUSH
41962: LD_INT 31
41964: ST_TO_ADDR
// vc_control := control_rider ;
41965: LD_ADDR_OWVAR 38
41969: PUSH
41970: LD_INT 4
41972: ST_TO_ADDR
// animal := CreateVehicle ;
41973: LD_ADDR_VAR 0 12
41977: PUSH
41978: CALL_OW 45
41982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41983: LD_VAR 0 12
41987: PPUSH
41988: LD_VAR 0 8
41992: PPUSH
41993: LD_INT 0
41995: PPUSH
41996: CALL 44139 0 3
// end ;
42000: GO 41954
42002: POP
42003: POP
// if horses then
42004: LD_VAR 0 5
42008: IFFALSE 42075
// for i = 1 to horses do
42010: LD_ADDR_VAR 0 11
42014: PUSH
42015: DOUBLE
42016: LD_INT 1
42018: DEC
42019: ST_TO_ADDR
42020: LD_VAR 0 5
42024: PUSH
42025: FOR_TO
42026: IFFALSE 42073
// begin hc_class := 21 ;
42028: LD_ADDR_OWVAR 28
42032: PUSH
42033: LD_INT 21
42035: ST_TO_ADDR
// hc_gallery :=  ;
42036: LD_ADDR_OWVAR 33
42040: PUSH
42041: LD_STRING 
42043: ST_TO_ADDR
// animal := CreateHuman ;
42044: LD_ADDR_VAR 0 12
42048: PUSH
42049: CALL_OW 44
42053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42054: LD_VAR 0 12
42058: PPUSH
42059: LD_VAR 0 8
42063: PPUSH
42064: LD_INT 0
42066: PPUSH
42067: CALL 44139 0 3
// end ;
42071: GO 42025
42073: POP
42074: POP
// if birds then
42075: LD_VAR 0 1
42079: IFFALSE 42146
// for i = 1 to birds do
42081: LD_ADDR_VAR 0 11
42085: PUSH
42086: DOUBLE
42087: LD_INT 1
42089: DEC
42090: ST_TO_ADDR
42091: LD_VAR 0 1
42095: PUSH
42096: FOR_TO
42097: IFFALSE 42144
// begin hc_class = 18 ;
42099: LD_ADDR_OWVAR 28
42103: PUSH
42104: LD_INT 18
42106: ST_TO_ADDR
// hc_gallery =  ;
42107: LD_ADDR_OWVAR 33
42111: PUSH
42112: LD_STRING 
42114: ST_TO_ADDR
// animal := CreateHuman ;
42115: LD_ADDR_VAR 0 12
42119: PUSH
42120: CALL_OW 44
42124: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42125: LD_VAR 0 12
42129: PPUSH
42130: LD_VAR 0 8
42134: PPUSH
42135: LD_INT 0
42137: PPUSH
42138: CALL 44139 0 3
// end ;
42142: GO 42096
42144: POP
42145: POP
// if tigers then
42146: LD_VAR 0 2
42150: IFFALSE 42234
// for i = 1 to tigers do
42152: LD_ADDR_VAR 0 11
42156: PUSH
42157: DOUBLE
42158: LD_INT 1
42160: DEC
42161: ST_TO_ADDR
42162: LD_VAR 0 2
42166: PUSH
42167: FOR_TO
42168: IFFALSE 42232
// begin hc_class = class_tiger ;
42170: LD_ADDR_OWVAR 28
42174: PUSH
42175: LD_INT 14
42177: ST_TO_ADDR
// hc_gallery =  ;
42178: LD_ADDR_OWVAR 33
42182: PUSH
42183: LD_STRING 
42185: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42186: LD_ADDR_OWVAR 35
42190: PUSH
42191: LD_INT 7
42193: NEG
42194: PPUSH
42195: LD_INT 7
42197: PPUSH
42198: CALL_OW 12
42202: ST_TO_ADDR
// animal := CreateHuman ;
42203: LD_ADDR_VAR 0 12
42207: PUSH
42208: CALL_OW 44
42212: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42213: LD_VAR 0 12
42217: PPUSH
42218: LD_VAR 0 8
42222: PPUSH
42223: LD_INT 0
42225: PPUSH
42226: CALL 44139 0 3
// end ;
42230: GO 42167
42232: POP
42233: POP
// if apemans then
42234: LD_VAR 0 3
42238: IFFALSE 42361
// for i = 1 to apemans do
42240: LD_ADDR_VAR 0 11
42244: PUSH
42245: DOUBLE
42246: LD_INT 1
42248: DEC
42249: ST_TO_ADDR
42250: LD_VAR 0 3
42254: PUSH
42255: FOR_TO
42256: IFFALSE 42359
// begin hc_class = class_apeman ;
42258: LD_ADDR_OWVAR 28
42262: PUSH
42263: LD_INT 12
42265: ST_TO_ADDR
// hc_gallery =  ;
42266: LD_ADDR_OWVAR 33
42270: PUSH
42271: LD_STRING 
42273: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
42274: LD_ADDR_OWVAR 35
42278: PUSH
42279: LD_INT 2
42281: NEG
42282: PPUSH
42283: LD_INT 2
42285: PPUSH
42286: CALL_OW 12
42290: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
42291: LD_ADDR_OWVAR 31
42295: PUSH
42296: LD_INT 1
42298: PPUSH
42299: LD_INT 3
42301: PPUSH
42302: CALL_OW 12
42306: PUSH
42307: LD_INT 1
42309: PPUSH
42310: LD_INT 3
42312: PPUSH
42313: CALL_OW 12
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: ST_TO_ADDR
// animal := CreateHuman ;
42330: LD_ADDR_VAR 0 12
42334: PUSH
42335: CALL_OW 44
42339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42340: LD_VAR 0 12
42344: PPUSH
42345: LD_VAR 0 8
42349: PPUSH
42350: LD_INT 0
42352: PPUSH
42353: CALL 44139 0 3
// end ;
42357: GO 42255
42359: POP
42360: POP
// if enchidnas then
42361: LD_VAR 0 4
42365: IFFALSE 42432
// for i = 1 to enchidnas do
42367: LD_ADDR_VAR 0 11
42371: PUSH
42372: DOUBLE
42373: LD_INT 1
42375: DEC
42376: ST_TO_ADDR
42377: LD_VAR 0 4
42381: PUSH
42382: FOR_TO
42383: IFFALSE 42430
// begin hc_class = 13 ;
42385: LD_ADDR_OWVAR 28
42389: PUSH
42390: LD_INT 13
42392: ST_TO_ADDR
// hc_gallery =  ;
42393: LD_ADDR_OWVAR 33
42397: PUSH
42398: LD_STRING 
42400: ST_TO_ADDR
// animal := CreateHuman ;
42401: LD_ADDR_VAR 0 12
42405: PUSH
42406: CALL_OW 44
42410: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42411: LD_VAR 0 12
42415: PPUSH
42416: LD_VAR 0 8
42420: PPUSH
42421: LD_INT 0
42423: PPUSH
42424: CALL 44139 0 3
// end ;
42428: GO 42382
42430: POP
42431: POP
// if fishes then
42432: LD_VAR 0 7
42436: IFFALSE 42503
// for i = 1 to fishes do
42438: LD_ADDR_VAR 0 11
42442: PUSH
42443: DOUBLE
42444: LD_INT 1
42446: DEC
42447: ST_TO_ADDR
42448: LD_VAR 0 7
42452: PUSH
42453: FOR_TO
42454: IFFALSE 42501
// begin hc_class = 20 ;
42456: LD_ADDR_OWVAR 28
42460: PUSH
42461: LD_INT 20
42463: ST_TO_ADDR
// hc_gallery =  ;
42464: LD_ADDR_OWVAR 33
42468: PUSH
42469: LD_STRING 
42471: ST_TO_ADDR
// animal := CreateHuman ;
42472: LD_ADDR_VAR 0 12
42476: PUSH
42477: CALL_OW 44
42481: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
42482: LD_VAR 0 12
42486: PPUSH
42487: LD_VAR 0 9
42491: PPUSH
42492: LD_INT 0
42494: PPUSH
42495: CALL 44139 0 3
// end ;
42499: GO 42453
42501: POP
42502: POP
// end ;
42503: LD_VAR 0 10
42507: RET
// export function WantHeal ( sci , unit ) ; begin
42508: LD_INT 0
42510: PPUSH
// if GetTaskList ( sci ) > 0 then
42511: LD_VAR 0 1
42515: PPUSH
42516: CALL_OW 437
42520: PUSH
42521: LD_INT 0
42523: GREATER
42524: IFFALSE 42594
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
42526: LD_VAR 0 1
42530: PPUSH
42531: CALL_OW 437
42535: PUSH
42536: LD_INT 1
42538: ARRAY
42539: PUSH
42540: LD_INT 1
42542: ARRAY
42543: PUSH
42544: LD_STRING l
42546: EQUAL
42547: PUSH
42548: LD_VAR 0 1
42552: PPUSH
42553: CALL_OW 437
42557: PUSH
42558: LD_INT 1
42560: ARRAY
42561: PUSH
42562: LD_INT 4
42564: ARRAY
42565: PUSH
42566: LD_VAR 0 2
42570: EQUAL
42571: AND
42572: IFFALSE 42584
// result := true else
42574: LD_ADDR_VAR 0 3
42578: PUSH
42579: LD_INT 1
42581: ST_TO_ADDR
42582: GO 42592
// result := false ;
42584: LD_ADDR_VAR 0 3
42588: PUSH
42589: LD_INT 0
42591: ST_TO_ADDR
// end else
42592: GO 42602
// result := false ;
42594: LD_ADDR_VAR 0 3
42598: PUSH
42599: LD_INT 0
42601: ST_TO_ADDR
// end ;
42602: LD_VAR 0 3
42606: RET
// export function HealTarget ( sci ) ; begin
42607: LD_INT 0
42609: PPUSH
// if not sci then
42610: LD_VAR 0 1
42614: NOT
42615: IFFALSE 42619
// exit ;
42617: GO 42684
// result := 0 ;
42619: LD_ADDR_VAR 0 2
42623: PUSH
42624: LD_INT 0
42626: ST_TO_ADDR
// if GetTaskList ( sci ) then
42627: LD_VAR 0 1
42631: PPUSH
42632: CALL_OW 437
42636: IFFALSE 42684
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42638: LD_VAR 0 1
42642: PPUSH
42643: CALL_OW 437
42647: PUSH
42648: LD_INT 1
42650: ARRAY
42651: PUSH
42652: LD_INT 1
42654: ARRAY
42655: PUSH
42656: LD_STRING l
42658: EQUAL
42659: IFFALSE 42684
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42661: LD_ADDR_VAR 0 2
42665: PUSH
42666: LD_VAR 0 1
42670: PPUSH
42671: CALL_OW 437
42675: PUSH
42676: LD_INT 1
42678: ARRAY
42679: PUSH
42680: LD_INT 4
42682: ARRAY
42683: ST_TO_ADDR
// end ;
42684: LD_VAR 0 2
42688: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42689: LD_INT 0
42691: PPUSH
42692: PPUSH
42693: PPUSH
42694: PPUSH
// if not base_units then
42695: LD_VAR 0 1
42699: NOT
42700: IFFALSE 42704
// exit ;
42702: GO 42791
// result := false ;
42704: LD_ADDR_VAR 0 2
42708: PUSH
42709: LD_INT 0
42711: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42712: LD_ADDR_VAR 0 5
42716: PUSH
42717: LD_VAR 0 1
42721: PPUSH
42722: LD_INT 21
42724: PUSH
42725: LD_INT 3
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PPUSH
42732: CALL_OW 72
42736: ST_TO_ADDR
// if not tmp then
42737: LD_VAR 0 5
42741: NOT
42742: IFFALSE 42746
// exit ;
42744: GO 42791
// for i in tmp do
42746: LD_ADDR_VAR 0 3
42750: PUSH
42751: LD_VAR 0 5
42755: PUSH
42756: FOR_IN
42757: IFFALSE 42789
// begin result := EnemyInRange ( i , 22 ) ;
42759: LD_ADDR_VAR 0 2
42763: PUSH
42764: LD_VAR 0 3
42768: PPUSH
42769: LD_INT 22
42771: PPUSH
42772: CALL 41027 0 2
42776: ST_TO_ADDR
// if result then
42777: LD_VAR 0 2
42781: IFFALSE 42787
// exit ;
42783: POP
42784: POP
42785: GO 42791
// end ;
42787: GO 42756
42789: POP
42790: POP
// end ;
42791: LD_VAR 0 2
42795: RET
// export function FilterByTag ( units , tag ) ; begin
42796: LD_INT 0
42798: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
42799: LD_ADDR_VAR 0 3
42803: PUSH
42804: LD_VAR 0 1
42808: PPUSH
42809: LD_INT 120
42811: PUSH
42812: LD_VAR 0 2
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PPUSH
42821: CALL_OW 72
42825: ST_TO_ADDR
// end ;
42826: LD_VAR 0 3
42830: RET
// export function IsDriver ( un ) ; begin
42831: LD_INT 0
42833: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42834: LD_ADDR_VAR 0 2
42838: PUSH
42839: LD_VAR 0 1
42843: PUSH
42844: LD_INT 55
42846: PUSH
42847: EMPTY
42848: LIST
42849: PPUSH
42850: CALL_OW 69
42854: IN
42855: ST_TO_ADDR
// end ;
42856: LD_VAR 0 2
42860: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42861: LD_INT 0
42863: PPUSH
42864: PPUSH
// list := [ ] ;
42865: LD_ADDR_VAR 0 5
42869: PUSH
42870: EMPTY
42871: ST_TO_ADDR
// case d of 0 :
42872: LD_VAR 0 3
42876: PUSH
42877: LD_INT 0
42879: DOUBLE
42880: EQUAL
42881: IFTRUE 42885
42883: GO 43018
42885: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42886: LD_ADDR_VAR 0 5
42890: PUSH
42891: LD_VAR 0 1
42895: PUSH
42896: LD_INT 4
42898: MINUS
42899: PUSH
42900: LD_VAR 0 2
42904: PUSH
42905: LD_INT 4
42907: MINUS
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: LIST
42916: PUSH
42917: LD_VAR 0 1
42921: PUSH
42922: LD_INT 3
42924: MINUS
42925: PUSH
42926: LD_VAR 0 2
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: LIST
42938: PUSH
42939: LD_VAR 0 1
42943: PUSH
42944: LD_INT 4
42946: PLUS
42947: PUSH
42948: LD_VAR 0 2
42952: PUSH
42953: LD_INT 4
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: PUSH
42961: LD_VAR 0 1
42965: PUSH
42966: LD_INT 3
42968: PLUS
42969: PUSH
42970: LD_VAR 0 2
42974: PUSH
42975: LD_INT 3
42977: PLUS
42978: PUSH
42979: LD_INT 5
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: LIST
42986: PUSH
42987: LD_VAR 0 1
42991: PUSH
42992: LD_VAR 0 2
42996: PUSH
42997: LD_INT 4
42999: PLUS
43000: PUSH
43001: LD_INT 0
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: LIST
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: ST_TO_ADDR
// end ; 1 :
43016: GO 43716
43018: LD_INT 1
43020: DOUBLE
43021: EQUAL
43022: IFTRUE 43026
43024: GO 43159
43026: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
43027: LD_ADDR_VAR 0 5
43031: PUSH
43032: LD_VAR 0 1
43036: PUSH
43037: LD_VAR 0 2
43041: PUSH
43042: LD_INT 4
43044: MINUS
43045: PUSH
43046: LD_INT 3
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: LIST
43053: PUSH
43054: LD_VAR 0 1
43058: PUSH
43059: LD_INT 3
43061: MINUS
43062: PUSH
43063: LD_VAR 0 2
43067: PUSH
43068: LD_INT 3
43070: MINUS
43071: PUSH
43072: LD_INT 2
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: LIST
43079: PUSH
43080: LD_VAR 0 1
43084: PUSH
43085: LD_INT 4
43087: MINUS
43088: PUSH
43089: LD_VAR 0 2
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: PUSH
43102: LD_VAR 0 1
43106: PUSH
43107: LD_VAR 0 2
43111: PUSH
43112: LD_INT 3
43114: PLUS
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: PUSH
43124: LD_VAR 0 1
43128: PUSH
43129: LD_INT 4
43131: PLUS
43132: PUSH
43133: LD_VAR 0 2
43137: PUSH
43138: LD_INT 4
43140: PLUS
43141: PUSH
43142: LD_INT 5
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: ST_TO_ADDR
// end ; 2 :
43157: GO 43716
43159: LD_INT 2
43161: DOUBLE
43162: EQUAL
43163: IFTRUE 43167
43165: GO 43296
43167: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43168: LD_ADDR_VAR 0 5
43172: PUSH
43173: LD_VAR 0 1
43177: PUSH
43178: LD_VAR 0 2
43182: PUSH
43183: LD_INT 3
43185: MINUS
43186: PUSH
43187: LD_INT 3
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: LIST
43194: PUSH
43195: LD_VAR 0 1
43199: PUSH
43200: LD_INT 4
43202: PLUS
43203: PUSH
43204: LD_VAR 0 2
43208: PUSH
43209: LD_INT 4
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: LIST
43216: PUSH
43217: LD_VAR 0 1
43221: PUSH
43222: LD_VAR 0 2
43226: PUSH
43227: LD_INT 4
43229: PLUS
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: LIST
43238: PUSH
43239: LD_VAR 0 1
43243: PUSH
43244: LD_INT 3
43246: MINUS
43247: PUSH
43248: LD_VAR 0 2
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: LIST
43260: PUSH
43261: LD_VAR 0 1
43265: PUSH
43266: LD_INT 4
43268: MINUS
43269: PUSH
43270: LD_VAR 0 2
43274: PUSH
43275: LD_INT 4
43277: MINUS
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: LIST
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: ST_TO_ADDR
// end ; 3 :
43294: GO 43716
43296: LD_INT 3
43298: DOUBLE
43299: EQUAL
43300: IFTRUE 43304
43302: GO 43437
43304: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
43305: LD_ADDR_VAR 0 5
43309: PUSH
43310: LD_VAR 0 1
43314: PUSH
43315: LD_INT 3
43317: PLUS
43318: PUSH
43319: LD_VAR 0 2
43323: PUSH
43324: LD_INT 4
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: PUSH
43332: LD_VAR 0 1
43336: PUSH
43337: LD_INT 4
43339: PLUS
43340: PUSH
43341: LD_VAR 0 2
43345: PUSH
43346: LD_INT 4
43348: PLUS
43349: PUSH
43350: LD_INT 5
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: LIST
43357: PUSH
43358: LD_VAR 0 1
43362: PUSH
43363: LD_INT 4
43365: MINUS
43366: PUSH
43367: LD_VAR 0 2
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: LIST
43379: PUSH
43380: LD_VAR 0 1
43384: PUSH
43385: LD_VAR 0 2
43389: PUSH
43390: LD_INT 4
43392: MINUS
43393: PUSH
43394: LD_INT 3
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: LIST
43401: PUSH
43402: LD_VAR 0 1
43406: PUSH
43407: LD_INT 3
43409: MINUS
43410: PUSH
43411: LD_VAR 0 2
43415: PUSH
43416: LD_INT 3
43418: MINUS
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: ST_TO_ADDR
// end ; 4 :
43435: GO 43716
43437: LD_INT 4
43439: DOUBLE
43440: EQUAL
43441: IFTRUE 43445
43443: GO 43578
43445: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
43446: LD_ADDR_VAR 0 5
43450: PUSH
43451: LD_VAR 0 1
43455: PUSH
43456: LD_VAR 0 2
43460: PUSH
43461: LD_INT 4
43463: PLUS
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: PUSH
43473: LD_VAR 0 1
43477: PUSH
43478: LD_INT 3
43480: PLUS
43481: PUSH
43482: LD_VAR 0 2
43486: PUSH
43487: LD_INT 3
43489: PLUS
43490: PUSH
43491: LD_INT 5
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: LIST
43498: PUSH
43499: LD_VAR 0 1
43503: PUSH
43504: LD_INT 4
43506: PLUS
43507: PUSH
43508: LD_VAR 0 2
43512: PUSH
43513: LD_INT 4
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: PUSH
43521: LD_VAR 0 1
43525: PUSH
43526: LD_VAR 0 2
43530: PUSH
43531: LD_INT 3
43533: MINUS
43534: PUSH
43535: LD_INT 3
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: LIST
43542: PUSH
43543: LD_VAR 0 1
43547: PUSH
43548: LD_INT 4
43550: MINUS
43551: PUSH
43552: LD_VAR 0 2
43556: PUSH
43557: LD_INT 4
43559: MINUS
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: ST_TO_ADDR
// end ; 5 :
43576: GO 43716
43578: LD_INT 5
43580: DOUBLE
43581: EQUAL
43582: IFTRUE 43586
43584: GO 43715
43586: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43587: LD_ADDR_VAR 0 5
43591: PUSH
43592: LD_VAR 0 1
43596: PUSH
43597: LD_INT 4
43599: MINUS
43600: PUSH
43601: LD_VAR 0 2
43605: PUSH
43606: LD_INT 1
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: LIST
43613: PUSH
43614: LD_VAR 0 1
43618: PUSH
43619: LD_VAR 0 2
43623: PUSH
43624: LD_INT 4
43626: MINUS
43627: PUSH
43628: LD_INT 3
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: LIST
43635: PUSH
43636: LD_VAR 0 1
43640: PUSH
43641: LD_INT 4
43643: PLUS
43644: PUSH
43645: LD_VAR 0 2
43649: PUSH
43650: LD_INT 4
43652: PLUS
43653: PUSH
43654: LD_INT 5
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: PUSH
43662: LD_VAR 0 1
43666: PUSH
43667: LD_INT 3
43669: PLUS
43670: PUSH
43671: LD_VAR 0 2
43675: PUSH
43676: LD_INT 4
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: LIST
43683: PUSH
43684: LD_VAR 0 1
43688: PUSH
43689: LD_VAR 0 2
43693: PUSH
43694: LD_INT 3
43696: PLUS
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: LIST
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: ST_TO_ADDR
// end ; end ;
43713: GO 43716
43715: POP
// result := list ;
43716: LD_ADDR_VAR 0 4
43720: PUSH
43721: LD_VAR 0 5
43725: ST_TO_ADDR
// end ;
43726: LD_VAR 0 4
43730: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43731: LD_INT 0
43733: PPUSH
43734: PPUSH
43735: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43736: LD_VAR 0 1
43740: NOT
43741: PUSH
43742: LD_VAR 0 2
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: LD_INT 2
43752: PUSH
43753: LD_INT 3
43755: PUSH
43756: LD_INT 4
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: IN
43765: NOT
43766: OR
43767: IFFALSE 43771
// exit ;
43769: GO 43863
// tmp := [ ] ;
43771: LD_ADDR_VAR 0 5
43775: PUSH
43776: EMPTY
43777: ST_TO_ADDR
// for i in units do
43778: LD_ADDR_VAR 0 4
43782: PUSH
43783: LD_VAR 0 1
43787: PUSH
43788: FOR_IN
43789: IFFALSE 43832
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
43791: LD_ADDR_VAR 0 5
43795: PUSH
43796: LD_VAR 0 5
43800: PPUSH
43801: LD_VAR 0 5
43805: PUSH
43806: LD_INT 1
43808: PLUS
43809: PPUSH
43810: LD_VAR 0 4
43814: PPUSH
43815: LD_VAR 0 2
43819: PPUSH
43820: CALL_OW 259
43824: PPUSH
43825: CALL_OW 2
43829: ST_TO_ADDR
43830: GO 43788
43832: POP
43833: POP
// if not tmp then
43834: LD_VAR 0 5
43838: NOT
43839: IFFALSE 43843
// exit ;
43841: GO 43863
// result := SortListByListDesc ( units , tmp ) ;
43843: LD_ADDR_VAR 0 3
43847: PUSH
43848: LD_VAR 0 1
43852: PPUSH
43853: LD_VAR 0 5
43857: PPUSH
43858: CALL_OW 77
43862: ST_TO_ADDR
// end ;
43863: LD_VAR 0 3
43867: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43868: LD_INT 0
43870: PPUSH
43871: PPUSH
43872: PPUSH
// result := false ;
43873: LD_ADDR_VAR 0 3
43877: PUSH
43878: LD_INT 0
43880: ST_TO_ADDR
// x := GetX ( building ) ;
43881: LD_ADDR_VAR 0 4
43885: PUSH
43886: LD_VAR 0 2
43890: PPUSH
43891: CALL_OW 250
43895: ST_TO_ADDR
// y := GetY ( building ) ;
43896: LD_ADDR_VAR 0 5
43900: PUSH
43901: LD_VAR 0 2
43905: PPUSH
43906: CALL_OW 251
43910: ST_TO_ADDR
// if not building or not x or not y then
43911: LD_VAR 0 2
43915: NOT
43916: PUSH
43917: LD_VAR 0 4
43921: NOT
43922: OR
43923: PUSH
43924: LD_VAR 0 5
43928: NOT
43929: OR
43930: IFFALSE 43934
// exit ;
43932: GO 44026
// if GetTaskList ( unit ) then
43934: LD_VAR 0 1
43938: PPUSH
43939: CALL_OW 437
43943: IFFALSE 44026
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43945: LD_STRING e
43947: PUSH
43948: LD_VAR 0 1
43952: PPUSH
43953: CALL_OW 437
43957: PUSH
43958: LD_INT 1
43960: ARRAY
43961: PUSH
43962: LD_INT 1
43964: ARRAY
43965: EQUAL
43966: PUSH
43967: LD_VAR 0 4
43971: PUSH
43972: LD_VAR 0 1
43976: PPUSH
43977: CALL_OW 437
43981: PUSH
43982: LD_INT 1
43984: ARRAY
43985: PUSH
43986: LD_INT 2
43988: ARRAY
43989: EQUAL
43990: AND
43991: PUSH
43992: LD_VAR 0 5
43996: PUSH
43997: LD_VAR 0 1
44001: PPUSH
44002: CALL_OW 437
44006: PUSH
44007: LD_INT 1
44009: ARRAY
44010: PUSH
44011: LD_INT 3
44013: ARRAY
44014: EQUAL
44015: AND
44016: IFFALSE 44026
// result := true end ;
44018: LD_ADDR_VAR 0 3
44022: PUSH
44023: LD_INT 1
44025: ST_TO_ADDR
// end ;
44026: LD_VAR 0 3
44030: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
44031: LD_INT 0
44033: PPUSH
// result := false ;
44034: LD_ADDR_VAR 0 4
44038: PUSH
44039: LD_INT 0
44041: ST_TO_ADDR
// if GetTaskList ( unit ) then
44042: LD_VAR 0 1
44046: PPUSH
44047: CALL_OW 437
44051: IFFALSE 44134
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44053: LD_STRING M
44055: PUSH
44056: LD_VAR 0 1
44060: PPUSH
44061: CALL_OW 437
44065: PUSH
44066: LD_INT 1
44068: ARRAY
44069: PUSH
44070: LD_INT 1
44072: ARRAY
44073: EQUAL
44074: PUSH
44075: LD_VAR 0 2
44079: PUSH
44080: LD_VAR 0 1
44084: PPUSH
44085: CALL_OW 437
44089: PUSH
44090: LD_INT 1
44092: ARRAY
44093: PUSH
44094: LD_INT 2
44096: ARRAY
44097: EQUAL
44098: AND
44099: PUSH
44100: LD_VAR 0 3
44104: PUSH
44105: LD_VAR 0 1
44109: PPUSH
44110: CALL_OW 437
44114: PUSH
44115: LD_INT 1
44117: ARRAY
44118: PUSH
44119: LD_INT 3
44121: ARRAY
44122: EQUAL
44123: AND
44124: IFFALSE 44134
// result := true ;
44126: LD_ADDR_VAR 0 4
44130: PUSH
44131: LD_INT 1
44133: ST_TO_ADDR
// end ; end ;
44134: LD_VAR 0 4
44138: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
44139: LD_INT 0
44141: PPUSH
44142: PPUSH
44143: PPUSH
44144: PPUSH
// if not unit or not area then
44145: LD_VAR 0 1
44149: NOT
44150: PUSH
44151: LD_VAR 0 2
44155: NOT
44156: OR
44157: IFFALSE 44161
// exit ;
44159: GO 44325
// tmp := AreaToList ( area , i ) ;
44161: LD_ADDR_VAR 0 6
44165: PUSH
44166: LD_VAR 0 2
44170: PPUSH
44171: LD_VAR 0 5
44175: PPUSH
44176: CALL_OW 517
44180: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44181: LD_ADDR_VAR 0 5
44185: PUSH
44186: DOUBLE
44187: LD_INT 1
44189: DEC
44190: ST_TO_ADDR
44191: LD_VAR 0 6
44195: PUSH
44196: LD_INT 1
44198: ARRAY
44199: PUSH
44200: FOR_TO
44201: IFFALSE 44323
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44203: LD_ADDR_VAR 0 7
44207: PUSH
44208: LD_VAR 0 6
44212: PUSH
44213: LD_INT 1
44215: ARRAY
44216: PUSH
44217: LD_VAR 0 5
44221: ARRAY
44222: PUSH
44223: LD_VAR 0 6
44227: PUSH
44228: LD_INT 2
44230: ARRAY
44231: PUSH
44232: LD_VAR 0 5
44236: ARRAY
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
44242: LD_VAR 0 7
44246: PUSH
44247: LD_INT 1
44249: ARRAY
44250: PPUSH
44251: LD_VAR 0 7
44255: PUSH
44256: LD_INT 2
44258: ARRAY
44259: PPUSH
44260: CALL_OW 428
44264: PUSH
44265: LD_INT 0
44267: EQUAL
44268: IFFALSE 44321
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
44270: LD_VAR 0 1
44274: PPUSH
44275: LD_VAR 0 7
44279: PUSH
44280: LD_INT 1
44282: ARRAY
44283: PPUSH
44284: LD_VAR 0 7
44288: PUSH
44289: LD_INT 2
44291: ARRAY
44292: PPUSH
44293: LD_VAR 0 3
44297: PPUSH
44298: CALL_OW 48
// result := IsPlaced ( unit ) ;
44302: LD_ADDR_VAR 0 4
44306: PUSH
44307: LD_VAR 0 1
44311: PPUSH
44312: CALL_OW 305
44316: ST_TO_ADDR
// exit ;
44317: POP
44318: POP
44319: GO 44325
// end ; end ;
44321: GO 44200
44323: POP
44324: POP
// end ;
44325: LD_VAR 0 4
44329: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
44330: LD_INT 0
44332: PPUSH
44333: PPUSH
44334: PPUSH
// if not side or side > 8 then
44335: LD_VAR 0 1
44339: NOT
44340: PUSH
44341: LD_VAR 0 1
44345: PUSH
44346: LD_INT 8
44348: GREATER
44349: OR
44350: IFFALSE 44354
// exit ;
44352: GO 44541
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
44354: LD_ADDR_VAR 0 4
44358: PUSH
44359: LD_INT 22
44361: PUSH
44362: LD_VAR 0 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 21
44373: PUSH
44374: LD_INT 3
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PPUSH
44385: CALL_OW 69
44389: ST_TO_ADDR
// if not tmp then
44390: LD_VAR 0 4
44394: NOT
44395: IFFALSE 44399
// exit ;
44397: GO 44541
// enable_addtolog := true ;
44399: LD_ADDR_OWVAR 81
44403: PUSH
44404: LD_INT 1
44406: ST_TO_ADDR
// AddToLog ( [ ) ;
44407: LD_STRING [
44409: PPUSH
44410: CALL_OW 561
// for i in tmp do
44414: LD_ADDR_VAR 0 3
44418: PUSH
44419: LD_VAR 0 4
44423: PUSH
44424: FOR_IN
44425: IFFALSE 44532
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
44427: LD_STRING [
44429: PUSH
44430: LD_VAR 0 3
44434: PPUSH
44435: CALL_OW 266
44439: STR
44440: PUSH
44441: LD_STRING , 
44443: STR
44444: PUSH
44445: LD_VAR 0 3
44449: PPUSH
44450: CALL_OW 250
44454: STR
44455: PUSH
44456: LD_STRING , 
44458: STR
44459: PUSH
44460: LD_VAR 0 3
44464: PPUSH
44465: CALL_OW 251
44469: STR
44470: PUSH
44471: LD_STRING , 
44473: STR
44474: PUSH
44475: LD_VAR 0 3
44479: PPUSH
44480: CALL_OW 254
44484: STR
44485: PUSH
44486: LD_STRING , 
44488: STR
44489: PUSH
44490: LD_VAR 0 3
44494: PPUSH
44495: LD_INT 1
44497: PPUSH
44498: CALL_OW 268
44502: STR
44503: PUSH
44504: LD_STRING , 
44506: STR
44507: PUSH
44508: LD_VAR 0 3
44512: PPUSH
44513: LD_INT 2
44515: PPUSH
44516: CALL_OW 268
44520: STR
44521: PUSH
44522: LD_STRING ],
44524: STR
44525: PPUSH
44526: CALL_OW 561
// end ;
44530: GO 44424
44532: POP
44533: POP
// AddToLog ( ]; ) ;
44534: LD_STRING ];
44536: PPUSH
44537: CALL_OW 561
// end ;
44541: LD_VAR 0 2
44545: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
44546: LD_INT 0
44548: PPUSH
44549: PPUSH
44550: PPUSH
44551: PPUSH
44552: PPUSH
// if not area or not rate or not max then
44553: LD_VAR 0 1
44557: NOT
44558: PUSH
44559: LD_VAR 0 2
44563: NOT
44564: OR
44565: PUSH
44566: LD_VAR 0 4
44570: NOT
44571: OR
44572: IFFALSE 44576
// exit ;
44574: GO 44765
// while 1 do
44576: LD_INT 1
44578: IFFALSE 44765
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44580: LD_ADDR_VAR 0 9
44584: PUSH
44585: LD_VAR 0 1
44589: PPUSH
44590: LD_INT 1
44592: PPUSH
44593: CALL_OW 287
44597: PUSH
44598: LD_INT 10
44600: MUL
44601: ST_TO_ADDR
// r := rate / 10 ;
44602: LD_ADDR_VAR 0 7
44606: PUSH
44607: LD_VAR 0 2
44611: PUSH
44612: LD_INT 10
44614: DIVREAL
44615: ST_TO_ADDR
// time := 1 1$00 ;
44616: LD_ADDR_VAR 0 8
44620: PUSH
44621: LD_INT 2100
44623: ST_TO_ADDR
// if amount < min then
44624: LD_VAR 0 9
44628: PUSH
44629: LD_VAR 0 3
44633: LESS
44634: IFFALSE 44652
// r := r * 2 else
44636: LD_ADDR_VAR 0 7
44640: PUSH
44641: LD_VAR 0 7
44645: PUSH
44646: LD_INT 2
44648: MUL
44649: ST_TO_ADDR
44650: GO 44678
// if amount > max then
44652: LD_VAR 0 9
44656: PUSH
44657: LD_VAR 0 4
44661: GREATER
44662: IFFALSE 44678
// r := r / 2 ;
44664: LD_ADDR_VAR 0 7
44668: PUSH
44669: LD_VAR 0 7
44673: PUSH
44674: LD_INT 2
44676: DIVREAL
44677: ST_TO_ADDR
// time := time / r ;
44678: LD_ADDR_VAR 0 8
44682: PUSH
44683: LD_VAR 0 8
44687: PUSH
44688: LD_VAR 0 7
44692: DIVREAL
44693: ST_TO_ADDR
// if time < 0 then
44694: LD_VAR 0 8
44698: PUSH
44699: LD_INT 0
44701: LESS
44702: IFFALSE 44719
// time := time * - 1 ;
44704: LD_ADDR_VAR 0 8
44708: PUSH
44709: LD_VAR 0 8
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: MUL
44718: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
44719: LD_VAR 0 8
44723: PUSH
44724: LD_INT 35
44726: PPUSH
44727: LD_INT 875
44729: PPUSH
44730: CALL_OW 12
44734: PLUS
44735: PPUSH
44736: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44740: LD_INT 1
44742: PPUSH
44743: LD_INT 5
44745: PPUSH
44746: CALL_OW 12
44750: PPUSH
44751: LD_VAR 0 1
44755: PPUSH
44756: LD_INT 1
44758: PPUSH
44759: CALL_OW 55
// end ;
44763: GO 44576
// end ;
44765: LD_VAR 0 5
44769: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44770: LD_INT 0
44772: PPUSH
44773: PPUSH
44774: PPUSH
44775: PPUSH
44776: PPUSH
44777: PPUSH
44778: PPUSH
44779: PPUSH
// if not turrets or not factories then
44780: LD_VAR 0 1
44784: NOT
44785: PUSH
44786: LD_VAR 0 2
44790: NOT
44791: OR
44792: IFFALSE 44796
// exit ;
44794: GO 45103
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44796: LD_ADDR_VAR 0 10
44800: PUSH
44801: LD_INT 5
44803: PUSH
44804: LD_INT 6
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: LD_INT 4
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 3
44823: PUSH
44824: LD_INT 5
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 24
44838: PUSH
44839: LD_INT 25
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 23
44848: PUSH
44849: LD_INT 27
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 42
44862: PUSH
44863: LD_INT 43
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 44
44872: PUSH
44873: LD_INT 46
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 45
44882: PUSH
44883: LD_INT 47
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: LIST
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// result := [ ] ;
44900: LD_ADDR_VAR 0 3
44904: PUSH
44905: EMPTY
44906: ST_TO_ADDR
// for i in turrets do
44907: LD_ADDR_VAR 0 4
44911: PUSH
44912: LD_VAR 0 1
44916: PUSH
44917: FOR_IN
44918: IFFALSE 45101
// begin nat := GetNation ( i ) ;
44920: LD_ADDR_VAR 0 7
44924: PUSH
44925: LD_VAR 0 4
44929: PPUSH
44930: CALL_OW 248
44934: ST_TO_ADDR
// weapon := 0 ;
44935: LD_ADDR_VAR 0 8
44939: PUSH
44940: LD_INT 0
44942: ST_TO_ADDR
// if not nat then
44943: LD_VAR 0 7
44947: NOT
44948: IFFALSE 44952
// continue ;
44950: GO 44917
// for j in list [ nat ] do
44952: LD_ADDR_VAR 0 5
44956: PUSH
44957: LD_VAR 0 10
44961: PUSH
44962: LD_VAR 0 7
44966: ARRAY
44967: PUSH
44968: FOR_IN
44969: IFFALSE 45010
// if GetBWeapon ( i ) = j [ 1 ] then
44971: LD_VAR 0 4
44975: PPUSH
44976: CALL_OW 269
44980: PUSH
44981: LD_VAR 0 5
44985: PUSH
44986: LD_INT 1
44988: ARRAY
44989: EQUAL
44990: IFFALSE 45008
// begin weapon := j [ 2 ] ;
44992: LD_ADDR_VAR 0 8
44996: PUSH
44997: LD_VAR 0 5
45001: PUSH
45002: LD_INT 2
45004: ARRAY
45005: ST_TO_ADDR
// break ;
45006: GO 45010
// end ;
45008: GO 44968
45010: POP
45011: POP
// if not weapon then
45012: LD_VAR 0 8
45016: NOT
45017: IFFALSE 45021
// continue ;
45019: GO 44917
// for k in factories do
45021: LD_ADDR_VAR 0 6
45025: PUSH
45026: LD_VAR 0 2
45030: PUSH
45031: FOR_IN
45032: IFFALSE 45097
// begin weapons := AvailableWeaponList ( k ) ;
45034: LD_ADDR_VAR 0 9
45038: PUSH
45039: LD_VAR 0 6
45043: PPUSH
45044: CALL_OW 478
45048: ST_TO_ADDR
// if not weapons then
45049: LD_VAR 0 9
45053: NOT
45054: IFFALSE 45058
// continue ;
45056: GO 45031
// if weapon in weapons then
45058: LD_VAR 0 8
45062: PUSH
45063: LD_VAR 0 9
45067: IN
45068: IFFALSE 45095
// begin result := [ i , weapon ] ;
45070: LD_ADDR_VAR 0 3
45074: PUSH
45075: LD_VAR 0 4
45079: PUSH
45080: LD_VAR 0 8
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: ST_TO_ADDR
// exit ;
45089: POP
45090: POP
45091: POP
45092: POP
45093: GO 45103
// end ; end ;
45095: GO 45031
45097: POP
45098: POP
// end ;
45099: GO 44917
45101: POP
45102: POP
// end ;
45103: LD_VAR 0 3
45107: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
45108: LD_INT 0
45110: PPUSH
// if not side or side > 8 then
45111: LD_VAR 0 3
45115: NOT
45116: PUSH
45117: LD_VAR 0 3
45121: PUSH
45122: LD_INT 8
45124: GREATER
45125: OR
45126: IFFALSE 45130
// exit ;
45128: GO 45189
// if not range then
45130: LD_VAR 0 4
45134: NOT
45135: IFFALSE 45146
// range := - 12 ;
45137: LD_ADDR_VAR 0 4
45141: PUSH
45142: LD_INT 12
45144: NEG
45145: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
45146: LD_VAR 0 1
45150: PPUSH
45151: LD_VAR 0 2
45155: PPUSH
45156: LD_VAR 0 3
45160: PPUSH
45161: LD_VAR 0 4
45165: PPUSH
45166: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
45170: LD_VAR 0 1
45174: PPUSH
45175: LD_VAR 0 2
45179: PPUSH
45180: LD_VAR 0 3
45184: PPUSH
45185: CALL_OW 331
// end ;
45189: LD_VAR 0 5
45193: RET
// export function Video ( mode ) ; begin
45194: LD_INT 0
45196: PPUSH
// ingame_video = mode ;
45197: LD_ADDR_OWVAR 52
45201: PUSH
45202: LD_VAR 0 1
45206: ST_TO_ADDR
// interface_hidden = mode ;
45207: LD_ADDR_OWVAR 54
45211: PUSH
45212: LD_VAR 0 1
45216: ST_TO_ADDR
// end ;
45217: LD_VAR 0 2
45221: RET
// export function Join ( array , element ) ; begin
45222: LD_INT 0
45224: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45225: LD_ADDR_VAR 0 3
45229: PUSH
45230: LD_VAR 0 1
45234: PPUSH
45235: LD_VAR 0 1
45239: PUSH
45240: LD_INT 1
45242: PLUS
45243: PPUSH
45244: LD_VAR 0 2
45248: PPUSH
45249: CALL_OW 1
45253: ST_TO_ADDR
// end ;
45254: LD_VAR 0 3
45258: RET
// export function JoinUnion ( array , element ) ; begin
45259: LD_INT 0
45261: PPUSH
// result := array union element ;
45262: LD_ADDR_VAR 0 3
45266: PUSH
45267: LD_VAR 0 1
45271: PUSH
45272: LD_VAR 0 2
45276: UNION
45277: ST_TO_ADDR
// end ;
45278: LD_VAR 0 3
45282: RET
// export function GetBehemoths ( side ) ; begin
45283: LD_INT 0
45285: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
45286: LD_ADDR_VAR 0 2
45290: PUSH
45291: LD_INT 22
45293: PUSH
45294: LD_VAR 0 1
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 31
45305: PUSH
45306: LD_INT 25
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PPUSH
45317: CALL_OW 69
45321: ST_TO_ADDR
// end ;
45322: LD_VAR 0 2
45326: RET
// export function Shuffle ( array ) ; var i , index ; begin
45327: LD_INT 0
45329: PPUSH
45330: PPUSH
45331: PPUSH
// result := [ ] ;
45332: LD_ADDR_VAR 0 2
45336: PUSH
45337: EMPTY
45338: ST_TO_ADDR
// if not array then
45339: LD_VAR 0 1
45343: NOT
45344: IFFALSE 45348
// exit ;
45346: GO 45447
// Randomize ;
45348: CALL_OW 10
// for i = array downto 1 do
45352: LD_ADDR_VAR 0 3
45356: PUSH
45357: DOUBLE
45358: LD_VAR 0 1
45362: INC
45363: ST_TO_ADDR
45364: LD_INT 1
45366: PUSH
45367: FOR_DOWNTO
45368: IFFALSE 45445
// begin index := rand ( 1 , array ) ;
45370: LD_ADDR_VAR 0 4
45374: PUSH
45375: LD_INT 1
45377: PPUSH
45378: LD_VAR 0 1
45382: PPUSH
45383: CALL_OW 12
45387: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
45388: LD_ADDR_VAR 0 2
45392: PUSH
45393: LD_VAR 0 2
45397: PPUSH
45398: LD_VAR 0 2
45402: PUSH
45403: LD_INT 1
45405: PLUS
45406: PPUSH
45407: LD_VAR 0 1
45411: PUSH
45412: LD_VAR 0 4
45416: ARRAY
45417: PPUSH
45418: CALL_OW 2
45422: ST_TO_ADDR
// array := Delete ( array , index ) ;
45423: LD_ADDR_VAR 0 1
45427: PUSH
45428: LD_VAR 0 1
45432: PPUSH
45433: LD_VAR 0 4
45437: PPUSH
45438: CALL_OW 3
45442: ST_TO_ADDR
// end ;
45443: GO 45367
45445: POP
45446: POP
// end ;
45447: LD_VAR 0 2
45451: RET
// export function GetBaseMaterials ( base ) ; begin
45452: LD_INT 0
45454: PPUSH
// result := [ 0 , 0 , 0 ] ;
45455: LD_ADDR_VAR 0 2
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: ST_TO_ADDR
// if not base then
45474: LD_VAR 0 1
45478: NOT
45479: IFFALSE 45483
// exit ;
45481: GO 45532
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
45483: LD_ADDR_VAR 0 2
45487: PUSH
45488: LD_VAR 0 1
45492: PPUSH
45493: LD_INT 1
45495: PPUSH
45496: CALL_OW 275
45500: PUSH
45501: LD_VAR 0 1
45505: PPUSH
45506: LD_INT 2
45508: PPUSH
45509: CALL_OW 275
45513: PUSH
45514: LD_VAR 0 1
45518: PPUSH
45519: LD_INT 3
45521: PPUSH
45522: CALL_OW 275
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: LIST
45531: ST_TO_ADDR
// end ;
45532: LD_VAR 0 2
45536: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
45537: LD_INT 0
45539: PPUSH
45540: PPUSH
// result := array ;
45541: LD_ADDR_VAR 0 3
45545: PUSH
45546: LD_VAR 0 1
45550: ST_TO_ADDR
// if size > 0 then
45551: LD_VAR 0 2
45555: PUSH
45556: LD_INT 0
45558: GREATER
45559: IFFALSE 45605
// for i := array downto size do
45561: LD_ADDR_VAR 0 4
45565: PUSH
45566: DOUBLE
45567: LD_VAR 0 1
45571: INC
45572: ST_TO_ADDR
45573: LD_VAR 0 2
45577: PUSH
45578: FOR_DOWNTO
45579: IFFALSE 45603
// result := Delete ( result , result ) ;
45581: LD_ADDR_VAR 0 3
45585: PUSH
45586: LD_VAR 0 3
45590: PPUSH
45591: LD_VAR 0 3
45595: PPUSH
45596: CALL_OW 3
45600: ST_TO_ADDR
45601: GO 45578
45603: POP
45604: POP
// end ;
45605: LD_VAR 0 3
45609: RET
// export function ComExit ( unit ) ; var tmp ; begin
45610: LD_INT 0
45612: PPUSH
45613: PPUSH
// if not IsInUnit ( unit ) then
45614: LD_VAR 0 1
45618: PPUSH
45619: CALL_OW 310
45623: NOT
45624: IFFALSE 45628
// exit ;
45626: GO 45688
// tmp := IsInUnit ( unit ) ;
45628: LD_ADDR_VAR 0 3
45632: PUSH
45633: LD_VAR 0 1
45637: PPUSH
45638: CALL_OW 310
45642: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45643: LD_VAR 0 3
45647: PPUSH
45648: CALL_OW 247
45652: PUSH
45653: LD_INT 2
45655: EQUAL
45656: IFFALSE 45669
// ComExitVehicle ( unit ) else
45658: LD_VAR 0 1
45662: PPUSH
45663: CALL_OW 121
45667: GO 45678
// ComExitBuilding ( unit ) ;
45669: LD_VAR 0 1
45673: PPUSH
45674: CALL_OW 122
// result := tmp ;
45678: LD_ADDR_VAR 0 2
45682: PUSH
45683: LD_VAR 0 3
45687: ST_TO_ADDR
// end ;
45688: LD_VAR 0 2
45692: RET
// export function ComExitAll ( units ) ; var i ; begin
45693: LD_INT 0
45695: PPUSH
45696: PPUSH
// if not units then
45697: LD_VAR 0 1
45701: NOT
45702: IFFALSE 45706
// exit ;
45704: GO 45732
// for i in units do
45706: LD_ADDR_VAR 0 3
45710: PUSH
45711: LD_VAR 0 1
45715: PUSH
45716: FOR_IN
45717: IFFALSE 45730
// ComExit ( i ) ;
45719: LD_VAR 0 3
45723: PPUSH
45724: CALL 45610 0 1
45728: GO 45716
45730: POP
45731: POP
// end ;
45732: LD_VAR 0 2
45736: RET
// export function ResetHc ; begin
45737: LD_INT 0
45739: PPUSH
// InitHc ;
45740: CALL_OW 19
// hc_importance := 0 ;
45744: LD_ADDR_OWVAR 32
45748: PUSH
45749: LD_INT 0
45751: ST_TO_ADDR
// end ;
45752: LD_VAR 0 1
45756: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45757: LD_INT 0
45759: PPUSH
45760: PPUSH
45761: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45762: LD_ADDR_VAR 0 6
45766: PUSH
45767: LD_VAR 0 1
45771: PUSH
45772: LD_VAR 0 3
45776: PLUS
45777: PUSH
45778: LD_INT 2
45780: DIV
45781: ST_TO_ADDR
// if _x < 0 then
45782: LD_VAR 0 6
45786: PUSH
45787: LD_INT 0
45789: LESS
45790: IFFALSE 45807
// _x := _x * - 1 ;
45792: LD_ADDR_VAR 0 6
45796: PUSH
45797: LD_VAR 0 6
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: MUL
45806: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45807: LD_ADDR_VAR 0 7
45811: PUSH
45812: LD_VAR 0 2
45816: PUSH
45817: LD_VAR 0 4
45821: PLUS
45822: PUSH
45823: LD_INT 2
45825: DIV
45826: ST_TO_ADDR
// if _y < 0 then
45827: LD_VAR 0 7
45831: PUSH
45832: LD_INT 0
45834: LESS
45835: IFFALSE 45852
// _y := _y * - 1 ;
45837: LD_ADDR_VAR 0 7
45841: PUSH
45842: LD_VAR 0 7
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: MUL
45851: ST_TO_ADDR
// result := [ _x , _y ] ;
45852: LD_ADDR_VAR 0 5
45856: PUSH
45857: LD_VAR 0 6
45861: PUSH
45862: LD_VAR 0 7
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: ST_TO_ADDR
// end ;
45871: LD_VAR 0 5
45875: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45876: LD_INT 0
45878: PPUSH
45879: PPUSH
45880: PPUSH
45881: PPUSH
// task := GetTaskList ( unit ) ;
45882: LD_ADDR_VAR 0 7
45886: PUSH
45887: LD_VAR 0 1
45891: PPUSH
45892: CALL_OW 437
45896: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45897: LD_VAR 0 7
45901: NOT
45902: PUSH
45903: LD_VAR 0 1
45907: PPUSH
45908: LD_VAR 0 2
45912: PPUSH
45913: CALL_OW 308
45917: NOT
45918: AND
45919: IFFALSE 45923
// exit ;
45921: GO 46041
// if IsInArea ( unit , area ) then
45923: LD_VAR 0 1
45927: PPUSH
45928: LD_VAR 0 2
45932: PPUSH
45933: CALL_OW 308
45937: IFFALSE 45955
// begin ComMoveToArea ( unit , goAway ) ;
45939: LD_VAR 0 1
45943: PPUSH
45944: LD_VAR 0 3
45948: PPUSH
45949: CALL_OW 113
// exit ;
45953: GO 46041
// end ; if task [ 1 ] [ 1 ] <> M then
45955: LD_VAR 0 7
45959: PUSH
45960: LD_INT 1
45962: ARRAY
45963: PUSH
45964: LD_INT 1
45966: ARRAY
45967: PUSH
45968: LD_STRING M
45970: NONEQUAL
45971: IFFALSE 45975
// exit ;
45973: GO 46041
// x := task [ 1 ] [ 2 ] ;
45975: LD_ADDR_VAR 0 5
45979: PUSH
45980: LD_VAR 0 7
45984: PUSH
45985: LD_INT 1
45987: ARRAY
45988: PUSH
45989: LD_INT 2
45991: ARRAY
45992: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45993: LD_ADDR_VAR 0 6
45997: PUSH
45998: LD_VAR 0 7
46002: PUSH
46003: LD_INT 1
46005: ARRAY
46006: PUSH
46007: LD_INT 3
46009: ARRAY
46010: ST_TO_ADDR
// if InArea ( x , y , area ) then
46011: LD_VAR 0 5
46015: PPUSH
46016: LD_VAR 0 6
46020: PPUSH
46021: LD_VAR 0 2
46025: PPUSH
46026: CALL_OW 309
46030: IFFALSE 46041
// ComStop ( unit ) ;
46032: LD_VAR 0 1
46036: PPUSH
46037: CALL_OW 141
// end ;
46041: LD_VAR 0 4
46045: RET
// export function Abs ( value ) ; begin
46046: LD_INT 0
46048: PPUSH
// result := value ;
46049: LD_ADDR_VAR 0 2
46053: PUSH
46054: LD_VAR 0 1
46058: ST_TO_ADDR
// if value < 0 then
46059: LD_VAR 0 1
46063: PUSH
46064: LD_INT 0
46066: LESS
46067: IFFALSE 46084
// result := value * - 1 ;
46069: LD_ADDR_VAR 0 2
46073: PUSH
46074: LD_VAR 0 1
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: MUL
46083: ST_TO_ADDR
// end ;
46084: LD_VAR 0 2
46088: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
46089: LD_INT 0
46091: PPUSH
46092: PPUSH
46093: PPUSH
46094: PPUSH
46095: PPUSH
46096: PPUSH
46097: PPUSH
46098: PPUSH
// if not unit or not building then
46099: LD_VAR 0 1
46103: NOT
46104: PUSH
46105: LD_VAR 0 2
46109: NOT
46110: OR
46111: IFFALSE 46115
// exit ;
46113: GO 46341
// x := GetX ( building ) ;
46115: LD_ADDR_VAR 0 4
46119: PUSH
46120: LD_VAR 0 2
46124: PPUSH
46125: CALL_OW 250
46129: ST_TO_ADDR
// y := GetY ( building ) ;
46130: LD_ADDR_VAR 0 6
46134: PUSH
46135: LD_VAR 0 2
46139: PPUSH
46140: CALL_OW 251
46144: ST_TO_ADDR
// d := GetDir ( building ) ;
46145: LD_ADDR_VAR 0 8
46149: PUSH
46150: LD_VAR 0 2
46154: PPUSH
46155: CALL_OW 254
46159: ST_TO_ADDR
// r := 4 ;
46160: LD_ADDR_VAR 0 9
46164: PUSH
46165: LD_INT 4
46167: ST_TO_ADDR
// for i := 1 to 5 do
46168: LD_ADDR_VAR 0 10
46172: PUSH
46173: DOUBLE
46174: LD_INT 1
46176: DEC
46177: ST_TO_ADDR
46178: LD_INT 5
46180: PUSH
46181: FOR_TO
46182: IFFALSE 46339
// begin _x := ShiftX ( x , d , r + i ) ;
46184: LD_ADDR_VAR 0 5
46188: PUSH
46189: LD_VAR 0 4
46193: PPUSH
46194: LD_VAR 0 8
46198: PPUSH
46199: LD_VAR 0 9
46203: PUSH
46204: LD_VAR 0 10
46208: PLUS
46209: PPUSH
46210: CALL_OW 272
46214: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46215: LD_ADDR_VAR 0 7
46219: PUSH
46220: LD_VAR 0 6
46224: PPUSH
46225: LD_VAR 0 8
46229: PPUSH
46230: LD_VAR 0 9
46234: PUSH
46235: LD_VAR 0 10
46239: PLUS
46240: PPUSH
46241: CALL_OW 273
46245: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
46246: LD_VAR 0 5
46250: PPUSH
46251: LD_VAR 0 7
46255: PPUSH
46256: CALL_OW 488
46260: PUSH
46261: LD_VAR 0 5
46265: PPUSH
46266: LD_VAR 0 7
46270: PPUSH
46271: CALL_OW 428
46275: PPUSH
46276: CALL_OW 247
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: IN
46291: NOT
46292: AND
46293: IFFALSE 46337
// begin ComMoveXY ( unit , _x , _y ) ;
46295: LD_VAR 0 1
46299: PPUSH
46300: LD_VAR 0 5
46304: PPUSH
46305: LD_VAR 0 7
46309: PPUSH
46310: CALL_OW 111
// result := [ _x , _y ] ;
46314: LD_ADDR_VAR 0 3
46318: PUSH
46319: LD_VAR 0 5
46323: PUSH
46324: LD_VAR 0 7
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: ST_TO_ADDR
// exit ;
46333: POP
46334: POP
46335: GO 46341
// end ; end ;
46337: GO 46181
46339: POP
46340: POP
// end ;
46341: LD_VAR 0 3
46345: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
46346: LD_INT 0
46348: PPUSH
46349: PPUSH
46350: PPUSH
// result := 0 ;
46351: LD_ADDR_VAR 0 3
46355: PUSH
46356: LD_INT 0
46358: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
46359: LD_VAR 0 1
46363: PUSH
46364: LD_INT 0
46366: LESS
46367: PUSH
46368: LD_VAR 0 1
46372: PUSH
46373: LD_INT 8
46375: GREATER
46376: OR
46377: PUSH
46378: LD_VAR 0 2
46382: PUSH
46383: LD_INT 0
46385: LESS
46386: OR
46387: PUSH
46388: LD_VAR 0 2
46392: PUSH
46393: LD_INT 8
46395: GREATER
46396: OR
46397: IFFALSE 46401
// exit ;
46399: GO 46476
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
46401: LD_ADDR_VAR 0 4
46405: PUSH
46406: LD_INT 22
46408: PUSH
46409: LD_VAR 0 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PPUSH
46418: CALL_OW 69
46422: PUSH
46423: FOR_IN
46424: IFFALSE 46474
// begin un := UnitShoot ( i ) ;
46426: LD_ADDR_VAR 0 5
46430: PUSH
46431: LD_VAR 0 4
46435: PPUSH
46436: CALL_OW 504
46440: ST_TO_ADDR
// if GetSide ( un ) = side1 then
46441: LD_VAR 0 5
46445: PPUSH
46446: CALL_OW 255
46450: PUSH
46451: LD_VAR 0 1
46455: EQUAL
46456: IFFALSE 46472
// begin result := un ;
46458: LD_ADDR_VAR 0 3
46462: PUSH
46463: LD_VAR 0 5
46467: ST_TO_ADDR
// exit ;
46468: POP
46469: POP
46470: GO 46476
// end ; end ;
46472: GO 46423
46474: POP
46475: POP
// end ;
46476: LD_VAR 0 3
46480: RET
// export function GetCargoBay ( units ) ; begin
46481: LD_INT 0
46483: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
46484: LD_ADDR_VAR 0 2
46488: PUSH
46489: LD_VAR 0 1
46493: PPUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 34
46499: PUSH
46500: LD_INT 12
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 34
46509: PUSH
46510: LD_INT 51
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 34
46519: PUSH
46520: LD_INT 32
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 34
46529: PUSH
46530: LD_EXP 79
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: PPUSH
46546: CALL_OW 72
46550: ST_TO_ADDR
// end ;
46551: LD_VAR 0 2
46555: RET
// export function Negate ( value ) ; begin
46556: LD_INT 0
46558: PPUSH
// result := not value ;
46559: LD_ADDR_VAR 0 2
46563: PUSH
46564: LD_VAR 0 1
46568: NOT
46569: ST_TO_ADDR
// end ;
46570: LD_VAR 0 2
46574: RET
// export function Inc ( value ) ; begin
46575: LD_INT 0
46577: PPUSH
// result := value + 1 ;
46578: LD_ADDR_VAR 0 2
46582: PUSH
46583: LD_VAR 0 1
46587: PUSH
46588: LD_INT 1
46590: PLUS
46591: ST_TO_ADDR
// end ;
46592: LD_VAR 0 2
46596: RET
// export function Dec ( value ) ; begin
46597: LD_INT 0
46599: PPUSH
// result := value - 1 ;
46600: LD_ADDR_VAR 0 2
46604: PUSH
46605: LD_VAR 0 1
46609: PUSH
46610: LD_INT 1
46612: MINUS
46613: ST_TO_ADDR
// end ;
46614: LD_VAR 0 2
46618: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46619: LD_INT 0
46621: PPUSH
46622: PPUSH
46623: PPUSH
46624: PPUSH
46625: PPUSH
46626: PPUSH
46627: PPUSH
46628: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46629: LD_VAR 0 1
46633: PPUSH
46634: LD_VAR 0 2
46638: PPUSH
46639: CALL_OW 488
46643: NOT
46644: PUSH
46645: LD_VAR 0 3
46649: PPUSH
46650: LD_VAR 0 4
46654: PPUSH
46655: CALL_OW 488
46659: NOT
46660: OR
46661: IFFALSE 46674
// begin result := - 1 ;
46663: LD_ADDR_VAR 0 5
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: ST_TO_ADDR
// exit ;
46672: GO 46909
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46674: LD_ADDR_VAR 0 12
46678: PUSH
46679: LD_VAR 0 1
46683: PPUSH
46684: LD_VAR 0 2
46688: PPUSH
46689: LD_VAR 0 3
46693: PPUSH
46694: LD_VAR 0 4
46698: PPUSH
46699: CALL 45757 0 4
46703: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46704: LD_ADDR_VAR 0 11
46708: PUSH
46709: LD_VAR 0 1
46713: PPUSH
46714: LD_VAR 0 2
46718: PPUSH
46719: LD_VAR 0 12
46723: PUSH
46724: LD_INT 1
46726: ARRAY
46727: PPUSH
46728: LD_VAR 0 12
46732: PUSH
46733: LD_INT 2
46735: ARRAY
46736: PPUSH
46737: CALL_OW 298
46741: ST_TO_ADDR
// distance := 9999 ;
46742: LD_ADDR_VAR 0 10
46746: PUSH
46747: LD_INT 9999
46749: ST_TO_ADDR
// for i := 0 to 5 do
46750: LD_ADDR_VAR 0 6
46754: PUSH
46755: DOUBLE
46756: LD_INT 0
46758: DEC
46759: ST_TO_ADDR
46760: LD_INT 5
46762: PUSH
46763: FOR_TO
46764: IFFALSE 46907
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46766: LD_ADDR_VAR 0 7
46770: PUSH
46771: LD_VAR 0 1
46775: PPUSH
46776: LD_VAR 0 6
46780: PPUSH
46781: LD_VAR 0 11
46785: PPUSH
46786: CALL_OW 272
46790: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46791: LD_ADDR_VAR 0 8
46795: PUSH
46796: LD_VAR 0 2
46800: PPUSH
46801: LD_VAR 0 6
46805: PPUSH
46806: LD_VAR 0 11
46810: PPUSH
46811: CALL_OW 273
46815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46816: LD_VAR 0 7
46820: PPUSH
46821: LD_VAR 0 8
46825: PPUSH
46826: CALL_OW 488
46830: NOT
46831: IFFALSE 46835
// continue ;
46833: GO 46763
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
46835: LD_ADDR_VAR 0 9
46839: PUSH
46840: LD_VAR 0 12
46844: PUSH
46845: LD_INT 1
46847: ARRAY
46848: PPUSH
46849: LD_VAR 0 12
46853: PUSH
46854: LD_INT 2
46856: ARRAY
46857: PPUSH
46858: LD_VAR 0 7
46862: PPUSH
46863: LD_VAR 0 8
46867: PPUSH
46868: CALL_OW 298
46872: ST_TO_ADDR
// if tmp < distance then
46873: LD_VAR 0 9
46877: PUSH
46878: LD_VAR 0 10
46882: LESS
46883: IFFALSE 46905
// begin result := i ;
46885: LD_ADDR_VAR 0 5
46889: PUSH
46890: LD_VAR 0 6
46894: ST_TO_ADDR
// distance := tmp ;
46895: LD_ADDR_VAR 0 10
46899: PUSH
46900: LD_VAR 0 9
46904: ST_TO_ADDR
// end ; end ;
46905: GO 46763
46907: POP
46908: POP
// end ;
46909: LD_VAR 0 5
46913: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46914: LD_INT 0
46916: PPUSH
46917: PPUSH
// if not driver or not IsInUnit ( driver ) then
46918: LD_VAR 0 1
46922: NOT
46923: PUSH
46924: LD_VAR 0 1
46928: PPUSH
46929: CALL_OW 310
46933: NOT
46934: OR
46935: IFFALSE 46939
// exit ;
46937: GO 47029
// vehicle := IsInUnit ( driver ) ;
46939: LD_ADDR_VAR 0 3
46943: PUSH
46944: LD_VAR 0 1
46948: PPUSH
46949: CALL_OW 310
46953: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46954: LD_VAR 0 1
46958: PPUSH
46959: LD_STRING \
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: PUSH
46989: LD_STRING E
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_VAR 0 3
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PPUSH
47025: CALL_OW 446
// end ;
47029: LD_VAR 0 2
47033: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47034: LD_INT 0
47036: PPUSH
47037: PPUSH
// if not driver or not IsInUnit ( driver ) then
47038: LD_VAR 0 1
47042: NOT
47043: PUSH
47044: LD_VAR 0 1
47048: PPUSH
47049: CALL_OW 310
47053: NOT
47054: OR
47055: IFFALSE 47059
// exit ;
47057: GO 47149
// vehicle := IsInUnit ( driver ) ;
47059: LD_ADDR_VAR 0 3
47063: PUSH
47064: LD_VAR 0 1
47068: PPUSH
47069: CALL_OW 310
47073: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47074: LD_VAR 0 1
47078: PPUSH
47079: LD_STRING \
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 0
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: LD_INT 0
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: PUSH
47109: LD_STRING E
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: LD_VAR 0 3
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 0
47128: PUSH
47129: LD_INT 0
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PPUSH
47145: CALL_OW 447
// end ;
47149: LD_VAR 0 2
47153: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
47154: LD_INT 0
47156: PPUSH
47157: PPUSH
47158: PPUSH
// tmp := [ ] ;
47159: LD_ADDR_VAR 0 5
47163: PUSH
47164: EMPTY
47165: ST_TO_ADDR
// for i in units do
47166: LD_ADDR_VAR 0 4
47170: PUSH
47171: LD_VAR 0 1
47175: PUSH
47176: FOR_IN
47177: IFFALSE 47215
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
47179: LD_ADDR_VAR 0 5
47183: PUSH
47184: LD_VAR 0 5
47188: PPUSH
47189: LD_VAR 0 5
47193: PUSH
47194: LD_INT 1
47196: PLUS
47197: PPUSH
47198: LD_VAR 0 4
47202: PPUSH
47203: CALL_OW 256
47207: PPUSH
47208: CALL_OW 2
47212: ST_TO_ADDR
47213: GO 47176
47215: POP
47216: POP
// if not tmp then
47217: LD_VAR 0 5
47221: NOT
47222: IFFALSE 47226
// exit ;
47224: GO 47274
// if asc then
47226: LD_VAR 0 2
47230: IFFALSE 47254
// result := SortListByListAsc ( units , tmp ) else
47232: LD_ADDR_VAR 0 3
47236: PUSH
47237: LD_VAR 0 1
47241: PPUSH
47242: LD_VAR 0 5
47246: PPUSH
47247: CALL_OW 76
47251: ST_TO_ADDR
47252: GO 47274
// result := SortListByListDesc ( units , tmp ) ;
47254: LD_ADDR_VAR 0 3
47258: PUSH
47259: LD_VAR 0 1
47263: PPUSH
47264: LD_VAR 0 5
47268: PPUSH
47269: CALL_OW 77
47273: ST_TO_ADDR
// end ;
47274: LD_VAR 0 3
47278: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
47279: LD_INT 0
47281: PPUSH
47282: PPUSH
// task := GetTaskList ( mech ) ;
47283: LD_ADDR_VAR 0 4
47287: PUSH
47288: LD_VAR 0 1
47292: PPUSH
47293: CALL_OW 437
47297: ST_TO_ADDR
// if not task then
47298: LD_VAR 0 4
47302: NOT
47303: IFFALSE 47307
// exit ;
47305: GO 47349
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
47307: LD_ADDR_VAR 0 3
47311: PUSH
47312: LD_VAR 0 4
47316: PUSH
47317: LD_INT 1
47319: ARRAY
47320: PUSH
47321: LD_INT 1
47323: ARRAY
47324: PUSH
47325: LD_STRING r
47327: EQUAL
47328: PUSH
47329: LD_VAR 0 4
47333: PUSH
47334: LD_INT 1
47336: ARRAY
47337: PUSH
47338: LD_INT 4
47340: ARRAY
47341: PUSH
47342: LD_VAR 0 2
47346: EQUAL
47347: AND
47348: ST_TO_ADDR
// end ;
47349: LD_VAR 0 3
47353: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
47354: LD_INT 0
47356: PPUSH
// SetDir ( unit , d ) ;
47357: LD_VAR 0 1
47361: PPUSH
47362: LD_VAR 0 4
47366: PPUSH
47367: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
47371: LD_VAR 0 1
47375: PPUSH
47376: LD_VAR 0 2
47380: PPUSH
47381: LD_VAR 0 3
47385: PPUSH
47386: LD_VAR 0 5
47390: PPUSH
47391: CALL_OW 48
// end ;
47395: LD_VAR 0 6
47399: RET
// export function ToNaturalNumber ( number ) ; begin
47400: LD_INT 0
47402: PPUSH
// result := number div 1 ;
47403: LD_ADDR_VAR 0 2
47407: PUSH
47408: LD_VAR 0 1
47412: PUSH
47413: LD_INT 1
47415: DIV
47416: ST_TO_ADDR
// if number < 0 then
47417: LD_VAR 0 1
47421: PUSH
47422: LD_INT 0
47424: LESS
47425: IFFALSE 47435
// result := 0 ;
47427: LD_ADDR_VAR 0 2
47431: PUSH
47432: LD_INT 0
47434: ST_TO_ADDR
// end ;
47435: LD_VAR 0 2
47439: RET
// export function SortByClass ( units , class ) ; var un ; begin
47440: LD_INT 0
47442: PPUSH
47443: PPUSH
// if not units or not class then
47444: LD_VAR 0 1
47448: NOT
47449: PUSH
47450: LD_VAR 0 2
47454: NOT
47455: OR
47456: IFFALSE 47460
// exit ;
47458: GO 47555
// result := [ ] ;
47460: LD_ADDR_VAR 0 3
47464: PUSH
47465: EMPTY
47466: ST_TO_ADDR
// for un in units do
47467: LD_ADDR_VAR 0 4
47471: PUSH
47472: LD_VAR 0 1
47476: PUSH
47477: FOR_IN
47478: IFFALSE 47553
// if GetClass ( un ) = class then
47480: LD_VAR 0 4
47484: PPUSH
47485: CALL_OW 257
47489: PUSH
47490: LD_VAR 0 2
47494: EQUAL
47495: IFFALSE 47522
// result := Insert ( result , 1 , un ) else
47497: LD_ADDR_VAR 0 3
47501: PUSH
47502: LD_VAR 0 3
47506: PPUSH
47507: LD_INT 1
47509: PPUSH
47510: LD_VAR 0 4
47514: PPUSH
47515: CALL_OW 2
47519: ST_TO_ADDR
47520: GO 47551
// result := Replace ( result , result + 1 , un ) ;
47522: LD_ADDR_VAR 0 3
47526: PUSH
47527: LD_VAR 0 3
47531: PPUSH
47532: LD_VAR 0 3
47536: PUSH
47537: LD_INT 1
47539: PLUS
47540: PPUSH
47541: LD_VAR 0 4
47545: PPUSH
47546: CALL_OW 1
47550: ST_TO_ADDR
47551: GO 47477
47553: POP
47554: POP
// end ;
47555: LD_VAR 0 3
47559: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
47560: LD_INT 0
47562: PPUSH
47563: PPUSH
47564: PPUSH
47565: PPUSH
47566: PPUSH
47567: PPUSH
47568: PPUSH
// result := [ ] ;
47569: LD_ADDR_VAR 0 4
47573: PUSH
47574: EMPTY
47575: ST_TO_ADDR
// if x - r < 0 then
47576: LD_VAR 0 1
47580: PUSH
47581: LD_VAR 0 3
47585: MINUS
47586: PUSH
47587: LD_INT 0
47589: LESS
47590: IFFALSE 47602
// min_x := 0 else
47592: LD_ADDR_VAR 0 8
47596: PUSH
47597: LD_INT 0
47599: ST_TO_ADDR
47600: GO 47618
// min_x := x - r ;
47602: LD_ADDR_VAR 0 8
47606: PUSH
47607: LD_VAR 0 1
47611: PUSH
47612: LD_VAR 0 3
47616: MINUS
47617: ST_TO_ADDR
// if y - r < 0 then
47618: LD_VAR 0 2
47622: PUSH
47623: LD_VAR 0 3
47627: MINUS
47628: PUSH
47629: LD_INT 0
47631: LESS
47632: IFFALSE 47644
// min_y := 0 else
47634: LD_ADDR_VAR 0 7
47638: PUSH
47639: LD_INT 0
47641: ST_TO_ADDR
47642: GO 47660
// min_y := y - r ;
47644: LD_ADDR_VAR 0 7
47648: PUSH
47649: LD_VAR 0 2
47653: PUSH
47654: LD_VAR 0 3
47658: MINUS
47659: ST_TO_ADDR
// max_x := x + r ;
47660: LD_ADDR_VAR 0 9
47664: PUSH
47665: LD_VAR 0 1
47669: PUSH
47670: LD_VAR 0 3
47674: PLUS
47675: ST_TO_ADDR
// max_y := y + r ;
47676: LD_ADDR_VAR 0 10
47680: PUSH
47681: LD_VAR 0 2
47685: PUSH
47686: LD_VAR 0 3
47690: PLUS
47691: ST_TO_ADDR
// for _x = min_x to max_x do
47692: LD_ADDR_VAR 0 5
47696: PUSH
47697: DOUBLE
47698: LD_VAR 0 8
47702: DEC
47703: ST_TO_ADDR
47704: LD_VAR 0 9
47708: PUSH
47709: FOR_TO
47710: IFFALSE 47811
// for _y = min_y to max_y do
47712: LD_ADDR_VAR 0 6
47716: PUSH
47717: DOUBLE
47718: LD_VAR 0 7
47722: DEC
47723: ST_TO_ADDR
47724: LD_VAR 0 10
47728: PUSH
47729: FOR_TO
47730: IFFALSE 47807
// begin if not ValidHex ( _x , _y ) then
47732: LD_VAR 0 5
47736: PPUSH
47737: LD_VAR 0 6
47741: PPUSH
47742: CALL_OW 488
47746: NOT
47747: IFFALSE 47751
// continue ;
47749: GO 47729
// if GetResourceTypeXY ( _x , _y ) then
47751: LD_VAR 0 5
47755: PPUSH
47756: LD_VAR 0 6
47760: PPUSH
47761: CALL_OW 283
47765: IFFALSE 47805
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47767: LD_ADDR_VAR 0 4
47771: PUSH
47772: LD_VAR 0 4
47776: PPUSH
47777: LD_VAR 0 4
47781: PUSH
47782: LD_INT 1
47784: PLUS
47785: PPUSH
47786: LD_VAR 0 5
47790: PUSH
47791: LD_VAR 0 6
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PPUSH
47800: CALL_OW 1
47804: ST_TO_ADDR
// end ;
47805: GO 47729
47807: POP
47808: POP
47809: GO 47709
47811: POP
47812: POP
// end ;
47813: LD_VAR 0 4
47817: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47818: LD_INT 0
47820: PPUSH
47821: PPUSH
47822: PPUSH
47823: PPUSH
47824: PPUSH
47825: PPUSH
47826: PPUSH
47827: PPUSH
// if not units then
47828: LD_VAR 0 1
47832: NOT
47833: IFFALSE 47837
// exit ;
47835: GO 48262
// result := UnitFilter ( units , [ f_ok ] ) ;
47837: LD_ADDR_VAR 0 3
47841: PUSH
47842: LD_VAR 0 1
47846: PPUSH
47847: LD_INT 50
47849: PUSH
47850: EMPTY
47851: LIST
47852: PPUSH
47853: CALL_OW 72
47857: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
47858: LD_ADDR_VAR 0 8
47862: PUSH
47863: LD_VAR 0 1
47867: PUSH
47868: LD_INT 1
47870: ARRAY
47871: PPUSH
47872: CALL_OW 255
47876: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
47877: LD_ADDR_VAR 0 10
47881: PUSH
47882: LD_INT 29
47884: PUSH
47885: LD_EXP 82
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: ST_TO_ADDR
// if not result then
47894: LD_VAR 0 3
47898: NOT
47899: IFFALSE 47903
// exit ;
47901: GO 48262
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
47903: LD_ADDR_VAR 0 5
47907: PUSH
47908: LD_INT 81
47910: PUSH
47911: LD_VAR 0 8
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PPUSH
47920: CALL_OW 69
47924: ST_TO_ADDR
// for i in result do
47925: LD_ADDR_VAR 0 4
47929: PUSH
47930: LD_VAR 0 3
47934: PUSH
47935: FOR_IN
47936: IFFALSE 48260
// begin tag := GetTag ( i ) + 1 ;
47938: LD_ADDR_VAR 0 9
47942: PUSH
47943: LD_VAR 0 4
47947: PPUSH
47948: CALL_OW 110
47952: PUSH
47953: LD_INT 1
47955: PLUS
47956: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
47957: LD_ADDR_VAR 0 7
47961: PUSH
47962: LD_VAR 0 4
47966: PPUSH
47967: CALL_OW 250
47971: PPUSH
47972: LD_VAR 0 4
47976: PPUSH
47977: CALL_OW 251
47981: PPUSH
47982: LD_INT 6
47984: PPUSH
47985: CALL 47560 0 3
47989: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
47990: LD_VAR 0 7
47994: PUSH
47995: LD_VAR 0 4
47999: PPUSH
48000: CALL_OW 264
48004: PUSH
48005: LD_VAR 0 10
48009: IN
48010: NOT
48011: AND
48012: IFFALSE 48051
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
48014: LD_VAR 0 4
48018: PPUSH
48019: LD_VAR 0 7
48023: PUSH
48024: LD_INT 1
48026: ARRAY
48027: PUSH
48028: LD_INT 1
48030: ARRAY
48031: PPUSH
48032: LD_VAR 0 7
48036: PUSH
48037: LD_INT 1
48039: ARRAY
48040: PUSH
48041: LD_INT 2
48043: ARRAY
48044: PPUSH
48045: CALL_OW 116
48049: GO 48258
// if path > tag then
48051: LD_VAR 0 2
48055: PUSH
48056: LD_VAR 0 9
48060: GREATER
48061: IFFALSE 48228
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
48063: LD_ADDR_VAR 0 6
48067: PUSH
48068: LD_VAR 0 5
48072: PPUSH
48073: LD_INT 91
48075: PUSH
48076: LD_VAR 0 4
48080: PUSH
48081: LD_INT 12
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: PPUSH
48089: CALL_OW 72
48093: ST_TO_ADDR
// if nearEnemy then
48094: LD_VAR 0 6
48098: IFFALSE 48126
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
48100: LD_VAR 0 4
48104: PPUSH
48105: LD_VAR 0 6
48109: PPUSH
48110: LD_VAR 0 4
48114: PPUSH
48115: CALL_OW 74
48119: PPUSH
48120: CALL_OW 115
48124: GO 48226
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
48126: LD_VAR 0 4
48130: PPUSH
48131: LD_VAR 0 2
48135: PUSH
48136: LD_VAR 0 9
48140: ARRAY
48141: PUSH
48142: LD_INT 1
48144: ARRAY
48145: PPUSH
48146: LD_VAR 0 2
48150: PUSH
48151: LD_VAR 0 9
48155: ARRAY
48156: PUSH
48157: LD_INT 2
48159: ARRAY
48160: PPUSH
48161: CALL_OW 297
48165: PUSH
48166: LD_INT 6
48168: GREATER
48169: IFFALSE 48212
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
48171: LD_VAR 0 4
48175: PPUSH
48176: LD_VAR 0 2
48180: PUSH
48181: LD_VAR 0 9
48185: ARRAY
48186: PUSH
48187: LD_INT 1
48189: ARRAY
48190: PPUSH
48191: LD_VAR 0 2
48195: PUSH
48196: LD_VAR 0 9
48200: ARRAY
48201: PUSH
48202: LD_INT 2
48204: ARRAY
48205: PPUSH
48206: CALL_OW 114
48210: GO 48226
// SetTag ( i , tag ) ;
48212: LD_VAR 0 4
48216: PPUSH
48217: LD_VAR 0 9
48221: PPUSH
48222: CALL_OW 109
// end else
48226: GO 48258
// if enemy then
48228: LD_VAR 0 5
48232: IFFALSE 48258
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
48234: LD_VAR 0 4
48238: PPUSH
48239: LD_VAR 0 5
48243: PPUSH
48244: LD_VAR 0 4
48248: PPUSH
48249: CALL_OW 74
48253: PPUSH
48254: CALL_OW 115
// end ;
48258: GO 47935
48260: POP
48261: POP
// end ;
48262: LD_VAR 0 3
48266: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
48267: LD_INT 0
48269: PPUSH
48270: PPUSH
48271: PPUSH
// if not unit or IsInUnit ( unit ) then
48272: LD_VAR 0 1
48276: NOT
48277: PUSH
48278: LD_VAR 0 1
48282: PPUSH
48283: CALL_OW 310
48287: OR
48288: IFFALSE 48292
// exit ;
48290: GO 48383
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
48292: LD_ADDR_VAR 0 4
48296: PUSH
48297: LD_VAR 0 1
48301: PPUSH
48302: CALL_OW 250
48306: PPUSH
48307: LD_VAR 0 2
48311: PPUSH
48312: LD_INT 1
48314: PPUSH
48315: CALL_OW 272
48319: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
48320: LD_ADDR_VAR 0 5
48324: PUSH
48325: LD_VAR 0 1
48329: PPUSH
48330: CALL_OW 251
48334: PPUSH
48335: LD_VAR 0 2
48339: PPUSH
48340: LD_INT 1
48342: PPUSH
48343: CALL_OW 273
48347: ST_TO_ADDR
// if ValidHex ( x , y ) then
48348: LD_VAR 0 4
48352: PPUSH
48353: LD_VAR 0 5
48357: PPUSH
48358: CALL_OW 488
48362: IFFALSE 48383
// ComTurnXY ( unit , x , y ) ;
48364: LD_VAR 0 1
48368: PPUSH
48369: LD_VAR 0 4
48373: PPUSH
48374: LD_VAR 0 5
48378: PPUSH
48379: CALL_OW 118
// end ;
48383: LD_VAR 0 3
48387: RET
// export function SeeUnits ( side , units ) ; var i ; begin
48388: LD_INT 0
48390: PPUSH
48391: PPUSH
// result := false ;
48392: LD_ADDR_VAR 0 3
48396: PUSH
48397: LD_INT 0
48399: ST_TO_ADDR
// if not units then
48400: LD_VAR 0 2
48404: NOT
48405: IFFALSE 48409
// exit ;
48407: GO 48454
// for i in units do
48409: LD_ADDR_VAR 0 4
48413: PUSH
48414: LD_VAR 0 2
48418: PUSH
48419: FOR_IN
48420: IFFALSE 48452
// if See ( side , i ) then
48422: LD_VAR 0 1
48426: PPUSH
48427: LD_VAR 0 4
48431: PPUSH
48432: CALL_OW 292
48436: IFFALSE 48450
// begin result := true ;
48438: LD_ADDR_VAR 0 3
48442: PUSH
48443: LD_INT 1
48445: ST_TO_ADDR
// exit ;
48446: POP
48447: POP
48448: GO 48454
// end ;
48450: GO 48419
48452: POP
48453: POP
// end ;
48454: LD_VAR 0 3
48458: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
48459: LD_INT 0
48461: PPUSH
48462: PPUSH
48463: PPUSH
48464: PPUSH
// if not unit or not points then
48465: LD_VAR 0 1
48469: NOT
48470: PUSH
48471: LD_VAR 0 2
48475: NOT
48476: OR
48477: IFFALSE 48481
// exit ;
48479: GO 48571
// dist := 99999 ;
48481: LD_ADDR_VAR 0 5
48485: PUSH
48486: LD_INT 99999
48488: ST_TO_ADDR
// for i in points do
48489: LD_ADDR_VAR 0 4
48493: PUSH
48494: LD_VAR 0 2
48498: PUSH
48499: FOR_IN
48500: IFFALSE 48569
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48502: LD_ADDR_VAR 0 6
48506: PUSH
48507: LD_VAR 0 1
48511: PPUSH
48512: LD_VAR 0 4
48516: PUSH
48517: LD_INT 1
48519: ARRAY
48520: PPUSH
48521: LD_VAR 0 4
48525: PUSH
48526: LD_INT 2
48528: ARRAY
48529: PPUSH
48530: CALL_OW 297
48534: ST_TO_ADDR
// if tmpDist < dist then
48535: LD_VAR 0 6
48539: PUSH
48540: LD_VAR 0 5
48544: LESS
48545: IFFALSE 48567
// begin result := i ;
48547: LD_ADDR_VAR 0 3
48551: PUSH
48552: LD_VAR 0 4
48556: ST_TO_ADDR
// dist := tmpDist ;
48557: LD_ADDR_VAR 0 5
48561: PUSH
48562: LD_VAR 0 6
48566: ST_TO_ADDR
// end ; end ;
48567: GO 48499
48569: POP
48570: POP
// end ;
48571: LD_VAR 0 3
48575: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
48576: LD_INT 0
48578: PPUSH
// uc_side := side ;
48579: LD_ADDR_OWVAR 20
48583: PUSH
48584: LD_VAR 0 1
48588: ST_TO_ADDR
// uc_nation := 3 ;
48589: LD_ADDR_OWVAR 21
48593: PUSH
48594: LD_INT 3
48596: ST_TO_ADDR
// vc_chassis := 25 ;
48597: LD_ADDR_OWVAR 37
48601: PUSH
48602: LD_INT 25
48604: ST_TO_ADDR
// vc_engine := engine_siberite ;
48605: LD_ADDR_OWVAR 39
48609: PUSH
48610: LD_INT 3
48612: ST_TO_ADDR
// vc_control := control_computer ;
48613: LD_ADDR_OWVAR 38
48617: PUSH
48618: LD_INT 3
48620: ST_TO_ADDR
// vc_weapon := 59 ;
48621: LD_ADDR_OWVAR 40
48625: PUSH
48626: LD_INT 59
48628: ST_TO_ADDR
// result := CreateVehicle ;
48629: LD_ADDR_VAR 0 5
48633: PUSH
48634: CALL_OW 45
48638: ST_TO_ADDR
// SetDir ( result , d ) ;
48639: LD_VAR 0 5
48643: PPUSH
48644: LD_VAR 0 4
48648: PPUSH
48649: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
48653: LD_VAR 0 5
48657: PPUSH
48658: LD_VAR 0 2
48662: PPUSH
48663: LD_VAR 0 3
48667: PPUSH
48668: LD_INT 0
48670: PPUSH
48671: CALL_OW 48
// end ;
48675: LD_VAR 0 5
48679: RET
