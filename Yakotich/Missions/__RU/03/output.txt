// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// SetBname ( Ovsyenko , Ovsyenko ) ;
   8: LD_INT 74
  10: PPUSH
  11: LD_STRING Ovsyenko
  13: PPUSH
  14: CALL_OW 500
// AnimateTrees ( true ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 573
// Randomize ;
  25: CALL_OW 10
// RandomizeAll ;
  29: CALL_OW 11
// InitGlobalVariables ;
  33: CALL 51301 0 0
// InitRussian ;
  37: CALL 1329 0 0
// Action ;
  41: CALL 5409 0 0
// InitAmerican ;
  45: CALL 4362 0 0
// InitTerminal ;
  49: CALL 3757 0 0
// DebugMode ;
  53: CALL 235 0 0
// game_speed = 6 ;
  57: LD_ADDR_OWVAR 65
  61: PUSH
  62: LD_INT 6
  64: ST_TO_ADDR
// end ;
  65: END
// export DimitriCrew , YakotichCrew , BurlakCrew , SikorskiTeam , WestTerminalCrew , MainTerminalCrew , newAttackers , Attackers ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Dimitri , Ivan , Jegor , Grigori , Anton , RusSol ; export Sevi , SeviGuy1 , SeviGuy2 , SeviGuy3 ; export Burlak , Karamazov , Petrovova , Lipshchin , Gleb , Titov , Petrosyan , Dolgov ; export BurlakVeh , KaramazovVeh , BurlakCrewVeh1 , BurlakCrewVeh2 , BurlakCrewVeh3 , BurlakCrewVeh4 , BurlakCrewVeh5 , BurlakCrewVeh6 ; export Sikorski , SikorskiMeat , Truman , Bobby , Cyrus , Gary , Lynch , McCreery , Walker , Jilian , Turner , Houten , NorthSold ; export Morozov , Platonov ; export FlameCounter ; export BurlakTime , DepotCaptureTime ; export debug ; export mission_prefix ; export cutscene_ended , ovsyenko_captured , start_ended , lab_seen , lab_captured , rocket_researched , prediction_researched , buldozer_researched , flametank_saved , siberit_excavated , sikorski_dead , everything_researched , crane_triggered , crane_researched , end_of_the_mission , weapon_builded ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 68
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// cutscene_ended = false ;
  77: LD_ADDR_EXP 69
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// ovsyenko_captured = false ;
  85: LD_ADDR_EXP 70
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// start_ended = false ;
  93: LD_ADDR_EXP 71
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// rocket_researched = false ;
 101: LD_ADDR_EXP 74
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// buldozer_researched = false ;
 109: LD_ADDR_EXP 76
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// prediction_researched = false ;
 117: LD_ADDR_EXP 75
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// flametank_saved = false ;
 125: LD_ADDR_EXP 77
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// crane_triggered = false ;
 133: LD_ADDR_EXP 81
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// crane_researched = false ;
 141: LD_ADDR_EXP 82
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lab_seen = false ;
 149: LD_ADDR_EXP 72
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// lab_captured = false ;
 157: LD_ADDR_EXP 73
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// everything_researched = false ;
 165: LD_ADDR_EXP 80
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// end_of_the_mission = false ;
 173: LD_ADDR_EXP 83
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// weapon_builded = false ;
 181: LD_ADDR_EXP 84
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// BurlakTime := [ 15 15$0 , 17 17$30 , 20 20$0 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 65
 193: PUSH
 194: LD_INT 31500
 196: PUSH
 197: LD_INT 36750
 199: PUSH
 200: LD_INT 42000
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// DepotCaptureTime := 10 10$0 ;
 214: LD_ADDR_EXP 66
 218: PUSH
 219: LD_INT 21000
 221: ST_TO_ADDR
// FlameCounter := 0 ;
 222: LD_ADDR_EXP 64
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// end ;
 230: LD_VAR 0 1
 234: RET
// export function DebugMode ; begin
 235: LD_INT 0
 237: PPUSH
// if Debug = true then
 238: LD_EXP 67
 242: PUSH
 243: LD_INT 1
 245: EQUAL
 246: IFFALSE 267
// begin Difficulty := 3 ;
 248: LD_ADDR_OWVAR 67
 252: PUSH
 253: LD_INT 3
 255: ST_TO_ADDR
// TurnFogOff ( ) ;
 256: CALL_OW 537
// FogOff ( 3 ) ;
 260: LD_INT 3
 262: PPUSH
 263: CALL_OW 344
// end ; end ; end_of_file
 267: LD_VAR 0 1
 271: RET
// export function siblo ( side ) ; var i , tmp ; begin
 272: LD_INT 0
 274: PPUSH
 275: PPUSH
 276: PPUSH
// result := 0 ;
 277: LD_ADDR_VAR 0 2
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 285: LD_ADDR_VAR 0 4
 289: PUSH
 290: LD_INT 22
 292: PUSH
 293: LD_VAR 0 1
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 2
 304: PUSH
 305: LD_INT 30
 307: PUSH
 308: LD_INT 0
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: PUSH
 315: LD_INT 30
 317: PUSH
 318: LD_INT 1
 320: PUSH
 321: EMPTY
 322: LIST
 323: LIST
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// if not tmp then
 339: LD_VAR 0 4
 343: NOT
 344: IFFALSE 348
// exit ;
 346: GO 394
// for i in tmp do
 348: LD_ADDR_VAR 0 3
 352: PUSH
 353: LD_VAR 0 4
 357: PUSH
 358: FOR_IN
 359: IFFALSE 392
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
 361: LD_ADDR_VAR 0 2
 365: PUSH
 366: LD_VAR 0 2
 370: PUSH
 371: LD_VAR 0 3
 375: PPUSH
 376: CALL_OW 274
 380: PPUSH
 381: LD_INT 3
 383: PPUSH
 384: CALL_OW 275
 388: PLUS
 389: ST_TO_ADDR
 390: GO 358
 392: POP
 393: POP
// end ;
 394: LD_VAR 0 2
 398: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 399: LD_INT 0
 401: PPUSH
 402: PPUSH
 403: PPUSH
// uc_side := GetSide ( b ) ;
 404: LD_ADDR_OWVAR 20
 408: PUSH
 409: LD_VAR 0 2
 413: PPUSH
 414: CALL_OW 255
 418: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 419: LD_ADDR_OWVAR 21
 423: PUSH
 424: LD_VAR 0 2
 428: PPUSH
 429: CALL_OW 248
 433: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 434: LD_ADDR_VAR 0 5
 438: PUSH
 439: LD_VAR 0 2
 443: PPUSH
 444: CALL_OW 254
 448: PUSH
 449: LD_INT 3
 451: MINUS
 452: ST_TO_ADDR
// if dir < 0 then
 453: LD_VAR 0 5
 457: PUSH
 458: LD_INT 0
 460: LESS
 461: IFFALSE 477
// dir := 6 + dir ;
 463: LD_ADDR_VAR 0 5
 467: PUSH
 468: LD_INT 6
 470: PUSH
 471: LD_VAR 0 5
 475: PLUS
 476: ST_TO_ADDR
// un := CreateHuman ;
 477: LD_ADDR_VAR 0 4
 481: PUSH
 482: CALL_OW 44
 486: ST_TO_ADDR
// SetDir ( un , dir ) ;
 487: LD_VAR 0 4
 491: PPUSH
 492: LD_VAR 0 5
 496: PPUSH
 497: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 501: LD_VAR 0 4
 505: PPUSH
 506: LD_VAR 0 2
 510: PPUSH
 511: CALL_OW 52
// end ;
 515: LD_VAR 0 3
 519: RET
// export function GetClassFromStart ( ident ) ; var un ; begin
 520: LD_INT 0
 522: PPUSH
 523: PPUSH
// un := NewCharacter ( ident ) ;
 524: LD_ADDR_VAR 0 3
 528: PUSH
 529: LD_VAR 0 1
 533: PPUSH
 534: CALL_OW 25
 538: ST_TO_ADDR
// if not un then
 539: LD_VAR 0 3
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 572
// result := GetClass ( un ) ;
 548: LD_ADDR_VAR 0 2
 552: PUSH
 553: LD_VAR 0 3
 557: PPUSH
 558: CALL_OW 257
 562: ST_TO_ADDR
// DestroyUnit ( un ) ;
 563: LD_VAR 0 3
 567: PPUSH
 568: CALL_OW 65
// end ;
 572: LD_VAR 0 2
 576: RET
// every 1 trigger IsSelected ( Kvantovy ) do
 577: LD_INT 160
 579: PPUSH
 580: CALL_OW 306
 584: IFFALSE 688
 586: GO 588
 588: DISABLE
// begin KvantovyExp ( [ 1 , 2 , 3 , 4 ] ) ;
 589: LD_INT 1
 591: PUSH
 592: LD_INT 2
 594: PUSH
 595: LD_INT 3
 597: PUSH
 598: LD_INT 4
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: PPUSH
 607: CALL 689 0 1
// Wait ( 0 0$05 ) ;
 611: LD_INT 175
 613: PPUSH
 614: CALL_OW 67
// Say ( Kvantovy , 3Kvantovy-Sikret ) ;
 618: LD_INT 160
 620: PPUSH
 621: LD_STRING 3Kvantovy-Sikret
 623: PPUSH
 624: CALL_OW 88
// TeleportUnit ( Kvantovy , 120 , 237 , 300 , true ) ;
 628: LD_INT 160
 630: PPUSH
 631: LD_INT 120
 633: PPUSH
 634: LD_INT 237
 636: PPUSH
 637: LD_INT 300
 639: PPUSH
 640: LD_INT 1
 642: PPUSH
 643: CALL_OW 483
// Wait ( 0 0$05 ) ;
 647: LD_INT 175
 649: PPUSH
 650: CALL_OW 67
// RemoveUnit ( Kvantovy ) ;
 654: LD_INT 160
 656: PPUSH
 657: CALL_OW 64
// SaveVariable ( 1 , KvantovySaved ) ;
 661: LD_INT 1
 663: PPUSH
 664: LD_STRING KvantovySaved
 666: PPUSH
 667: CALL_OW 39
// SaveCharacters ( Kvantovy , Kvantovy ) ;
 671: LD_INT 160
 673: PPUSH
 674: LD_STRING Kvantovy
 676: PPUSH
 677: CALL_OW 38
// SetAchievement ( ACH_KVANTOVY ) ;
 681: LD_STRING ACH_KVANTOVY
 683: PPUSH
 684: CALL_OW 543
// end ;
 688: END
// export function KvantovyExp ( q ) ; var dec , q1 ; begin
 689: LD_INT 0
 691: PPUSH
 692: PPUSH
 693: PPUSH
// dec = SelectiveQuery ( KvantovyQuery , q ) ;
 694: LD_ADDR_VAR 0 3
 698: PUSH
 699: LD_STRING KvantovyQuery
 701: PPUSH
 702: LD_VAR 0 1
 706: PPUSH
 707: CALL_OW 98
 711: ST_TO_ADDR
// case dec of 1 :
 712: LD_VAR 0 3
 716: PUSH
 717: LD_INT 1
 719: DOUBLE
 720: EQUAL
 721: IFTRUE 725
 723: GO 743
 725: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 1500 ) ;
 726: LD_EXP 9
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: LD_INT 1500
 736: PPUSH
 737: CALL_OW 591
// end ; 2 :
 741: GO 822
 743: LD_INT 2
 745: DOUBLE
 746: EQUAL
 747: IFTRUE 751
 749: GO 769
 751: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 1500 ) ;
 752: LD_EXP 9
 756: PPUSH
 757: LD_INT 2
 759: PPUSH
 760: LD_INT 1500
 762: PPUSH
 763: CALL_OW 591
// end ; 3 :
 767: GO 822
 769: LD_INT 3
 771: DOUBLE
 772: EQUAL
 773: IFTRUE 777
 775: GO 795
 777: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 1500 ) ;
 778: LD_EXP 9
 782: PPUSH
 783: LD_INT 3
 785: PPUSH
 786: LD_INT 1500
 788: PPUSH
 789: CALL_OW 591
// end ; 4 :
 793: GO 822
 795: LD_INT 4
 797: DOUBLE
 798: EQUAL
 799: IFTRUE 803
 801: GO 821
 803: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 1500 ) ;
 804: LD_EXP 9
 808: PPUSH
 809: LD_INT 4
 811: PPUSH
 812: LD_INT 1500
 814: PPUSH
 815: CALL_OW 591
// end ; end ;
 819: GO 822
 821: POP
// end ;
 822: LD_VAR 0 2
 826: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
 827: LD_EXP 9
 831: PPUSH
 832: CALL_OW 301
 836: IFFALSE 848
 838: GO 840
 840: DISABLE
// begin YouLost ( YakotichDead ) ;
 841: LD_STRING YakotichDead
 843: PPUSH
 844: CALL_OW 104
// end ;
 848: END
// every 0 0$1 trigger IsDead ( Mietek ) do
 849: LD_EXP 10
 853: PPUSH
 854: CALL_OW 301
 858: IFFALSE 870
 860: GO 862
 862: DISABLE
// begin YouLost ( MietekDead ) ;
 863: LD_STRING MietekDead
 865: PPUSH
 866: CALL_OW 104
// end ;
 870: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_INT 22
 878: PUSH
 879: LD_INT 3
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 3
 888: PUSH
 889: LD_INT 23
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 21
 905: PUSH
 906: LD_INT 1
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: IN
 923: IFFALSE 932
// YouLost ( PeopleDead ) ;
 925: LD_STRING PeopleDead
 927: PPUSH
 928: CALL_OW 104
// end ;
 932: PPOPN 1
 934: END
// every 0 0$1 trigger IsDead ( Ovsyenko ) do
 935: LD_INT 74
 937: PPUSH
 938: CALL_OW 301
 942: IFFALSE 954
 944: GO 946
 946: DISABLE
// begin YouLost ( OvsyenkoDead ) ;
 947: LD_STRING OvsyenkoDead
 949: PPUSH
 950: CALL_OW 104
// end ;
 954: END
// every 1 trigger start_ended = false do
 955: LD_EXP 71
 959: PUSH
 960: LD_INT 0
 962: EQUAL
 963: IFFALSE 1107
 965: GO 967
 967: DISABLE
// begin SetLives ( [ Gary , Bobby , Cyrus , Lynch , Walker , McCreery , Jilian , Turner ] , 1000 ) ;
 968: LD_EXP 54
 972: PUSH
 973: LD_EXP 52
 977: PUSH
 978: LD_EXP 53
 982: PUSH
 983: LD_EXP 55
 987: PUSH
 988: LD_EXP 57
 992: PUSH
 993: LD_EXP 56
 997: PUSH
 998: LD_EXP 58
1002: PUSH
1003: LD_EXP 59
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PPUSH
1018: LD_INT 1000
1020: PPUSH
1021: CALL_OW 234
// SetLives ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 1000 ) ;
1025: LD_INT 22
1027: PUSH
1028: LD_INT 3
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 21
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PPUSH
1049: CALL_OW 69
1053: PPUSH
1054: LD_INT 1000
1056: PPUSH
1057: CALL_OW 234
// SetLives ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , 1000 ) ;
1061: LD_INT 22
1063: PUSH
1064: LD_INT 3
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 21
1073: PUSH
1074: LD_INT 2
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: PPUSH
1085: CALL_OW 69
1089: PPUSH
1090: LD_INT 1000
1092: PPUSH
1093: CALL_OW 234
// CenterOnUnits ( Yakotich ) ;
1097: LD_EXP 9
1101: PPUSH
1102: CALL_OW 85
// enable ;
1106: ENABLE
// end ;
1107: END
// every 0 0$1 trigger ovsyenko_captured = true do
1108: LD_EXP 70
1112: PUSH
1113: LD_INT 1
1115: EQUAL
1116: IFFALSE 1176
1118: GO 1120
1120: DISABLE
// begin if BurlakTime then
1121: LD_EXP 65
1125: IFFALSE 1166
// begin BurlakTime := BurlakTime - 0 0$1 ;
1127: LD_ADDR_EXP 65
1131: PUSH
1132: LD_EXP 65
1136: PUSH
1137: LD_INT 35
1139: MINUS
1140: ST_TO_ADDR
// display_strings := display_strings ^ [ #BurlakForces , BurlakTime ] ;
1141: LD_ADDR_OWVAR 47
1145: PUSH
1146: LD_OWVAR 47
1150: PUSH
1151: LD_STRING #BurlakForces
1153: PUSH
1154: LD_EXP 65
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: ADD
1163: ST_TO_ADDR
// end else
1164: GO 1175
// begin display_strings :=  ;
1166: LD_ADDR_OWVAR 47
1170: PUSH
1171: LD_STRING 
1173: ST_TO_ADDR
// disable ;
1174: DISABLE
// end ; enable ;
1175: ENABLE
// end ;
1176: END
// every 1 trigger ovsyenko_captured = false and FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
1177: LD_EXP 70
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: PUSH
1186: LD_INT 18
1188: PPUSH
1189: LD_INT 22
1191: PUSH
1192: LD_INT 3
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 2
1201: PUSH
1202: LD_INT 21
1204: PUSH
1205: LD_INT 1
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 21
1214: PUSH
1215: LD_INT 2
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PPUSH
1231: CALL_OW 70
1235: PUSH
1236: LD_INT 0
1238: GREATER
1239: AND
1240: IFFALSE 1326
1242: GO 1244
1244: DISABLE
1245: LD_INT 0
1247: PPUSH
// begin enable ;
1248: ENABLE
// for unit in FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1249: LD_ADDR_VAR 0 1
1253: PUSH
1254: LD_INT 18
1256: PPUSH
1257: LD_INT 22
1259: PUSH
1260: LD_INT 3
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: LD_INT 21
1272: PUSH
1273: LD_INT 1
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 21
1282: PUSH
1283: LD_INT 2
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 70
1303: PUSH
1304: FOR_IN
1305: IFFALSE 1324
// begin ComMoveXY ( unit , 101 , 116 ) ;
1307: LD_VAR 0 1
1311: PPUSH
1312: LD_INT 101
1314: PPUSH
1315: LD_INT 116
1317: PPUSH
1318: CALL_OW 111
// end ;
1322: GO 1304
1324: POP
1325: POP
// end ; end_of_file
1326: PPOPN 1
1328: END
// export function InitRussian ; begin
1329: LD_INT 0
1331: PPUSH
// Uc_Nation := 3 ;
1332: LD_ADDR_OWVAR 21
1336: PUSH
1337: LD_INT 3
1339: ST_TO_ADDR
// Uc_Side := 3 ;
1340: LD_ADDR_OWVAR 20
1344: PUSH
1345: LD_INT 3
1347: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 02_ ) ;
1348: LD_ADDR_EXP 9
1352: PUSH
1353: LD_STRING Yakotich
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_STRING 02_
1361: PPUSH
1362: CALL 10136 0 3
1366: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 02_ ) ;
1367: LD_ADDR_EXP 10
1371: PUSH
1372: LD_STRING Mietek
1374: PPUSH
1375: LD_INT 1
1377: PPUSH
1378: LD_STRING 02_
1380: PPUSH
1381: CALL 10136 0 3
1385: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 02_ ) ;
1386: LD_ADDR_EXP 11
1390: PUSH
1391: LD_STRING Boris
1393: PPUSH
1394: LD_INT 1
1396: PPUSH
1397: LD_STRING 02_
1399: PPUSH
1400: CALL 10136 0 3
1404: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 02_ ) ;
1405: LD_ADDR_EXP 13
1409: PUSH
1410: LD_STRING Michail
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: LD_STRING 02_
1418: PPUSH
1419: CALL 10136 0 3
1423: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 02_ ) ;
1424: LD_ADDR_EXP 12
1428: PUSH
1429: LD_STRING Vasilij
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: LD_STRING 02_
1437: PPUSH
1438: CALL 10136 0 3
1442: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 02_ ) ;
1443: LD_ADDR_EXP 14
1447: PUSH
1448: LD_STRING Constantin
1450: PPUSH
1451: LD_INT 1
1453: PPUSH
1454: LD_STRING 02_
1456: PPUSH
1457: CALL 10136 0 3
1461: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 02_ ) ;
1462: LD_ADDR_EXP 15
1466: PUSH
1467: LD_STRING Maksim
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: LD_STRING 02_
1475: PPUSH
1476: CALL 10136 0 3
1480: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 02_ ) ;
1481: LD_ADDR_EXP 16
1485: PUSH
1486: LD_STRING Fiodor
1488: PPUSH
1489: LD_INT 1
1491: PPUSH
1492: LD_STRING 02_
1494: PPUSH
1495: CALL 10136 0 3
1499: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 02_ ) ;
1500: LD_ADDR_EXP 19
1504: PUSH
1505: LD_STRING Aleksiej
1507: PPUSH
1508: LD_INT 1
1510: PPUSH
1511: LD_STRING 02_
1513: PPUSH
1514: CALL 10136 0 3
1518: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 02_ ) ;
1519: LD_ADDR_EXP 17
1523: PUSH
1524: LD_STRING Pavel
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: LD_STRING 02_
1532: PPUSH
1533: CALL 10136 0 3
1537: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 02_ ) ;
1538: LD_ADDR_EXP 18
1542: PUSH
1543: LD_STRING Zakhar
1545: PPUSH
1546: LD_INT 1
1548: PPUSH
1549: LD_STRING 02_
1551: PPUSH
1552: CALL 10136 0 3
1556: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 02_ ) ;
1557: LD_ADDR_EXP 20
1561: PUSH
1562: LD_STRING Aleksandr
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: LD_STRING 02_
1570: PPUSH
1571: CALL 10136 0 3
1575: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , true , 02_ ) ;
1576: LD_ADDR_EXP 22
1580: PUSH
1581: LD_STRING Stanislav
1583: PPUSH
1584: LD_INT 1
1586: PPUSH
1587: LD_STRING 02_
1589: PPUSH
1590: CALL 10136 0 3
1594: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , true , 02_ ) ;
1595: LD_ADDR_EXP 21
1599: PUSH
1600: LD_STRING Josif
1602: PPUSH
1603: LD_INT 1
1605: PPUSH
1606: LD_STRING 02_
1608: PPUSH
1609: CALL 10136 0 3
1613: ST_TO_ADDR
// SetClass ( [ Yakotich , Mietek , Constantin , Maksim , Fiodor , Aleksiej , Zakhar , Aleksandr , Josif ] , 1 ) ;
1614: LD_EXP 9
1618: PUSH
1619: LD_EXP 10
1623: PUSH
1624: LD_EXP 14
1628: PUSH
1629: LD_EXP 15
1633: PUSH
1634: LD_EXP 16
1638: PUSH
1639: LD_EXP 19
1643: PUSH
1644: LD_EXP 18
1648: PUSH
1649: LD_EXP 20
1653: PUSH
1654: LD_EXP 21
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: CALL_OW 336
// SetClass ( Boris , 2 ) ;
1677: LD_EXP 11
1681: PPUSH
1682: LD_INT 2
1684: PPUSH
1685: CALL_OW 336
// SetClass ( [ Michail , Pavel ] , 3 ) ;
1689: LD_EXP 13
1693: PUSH
1694: LD_EXP 17
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 336
// SetClass ( [ Stanislav , Vasilij ] , 4 ) ;
1710: LD_EXP 22
1714: PUSH
1715: LD_EXP 12
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PPUSH
1724: LD_INT 4
1726: PPUSH
1727: CALL_OW 336
// PlaceUnitArea ( Yakotich , EnterArea , false ) ;
1731: LD_EXP 9
1735: PPUSH
1736: LD_INT 1
1738: PPUSH
1739: LD_INT 0
1741: PPUSH
1742: CALL_OW 49
// PlaceUnitArea ( Mietek , EnterArea , false ) ;
1746: LD_EXP 10
1750: PPUSH
1751: LD_INT 1
1753: PPUSH
1754: LD_INT 0
1756: PPUSH
1757: CALL_OW 49
// PlaceUnitArea ( Boris , EnterArea , false ) ;
1761: LD_EXP 11
1765: PPUSH
1766: LD_INT 1
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 49
// PlaceUnitArea ( Michail , EnterArea , false ) ;
1776: LD_EXP 13
1780: PPUSH
1781: LD_INT 1
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 49
// PlaceUnitArea ( Vasilij , EnterArea , false ) ;
1791: LD_EXP 12
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 0
1801: PPUSH
1802: CALL_OW 49
// PlaceUnitArea ( Constantin , EnterArea , false ) ;
1806: LD_EXP 14
1810: PPUSH
1811: LD_INT 1
1813: PPUSH
1814: LD_INT 0
1816: PPUSH
1817: CALL_OW 49
// PlaceUnitArea ( Maksim , EnterArea , false ) ;
1821: LD_EXP 15
1825: PPUSH
1826: LD_INT 1
1828: PPUSH
1829: LD_INT 0
1831: PPUSH
1832: CALL_OW 49
// PlaceUnitArea ( Fiodor , EnterArea , false ) ;
1836: LD_EXP 16
1840: PPUSH
1841: LD_INT 1
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 49
// PlaceUnitArea ( Pavel , EnterArea , false ) ;
1851: LD_EXP 17
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 49
// PlaceUnitArea ( Zakhar , EnterArea , false ) ;
1866: LD_EXP 18
1870: PPUSH
1871: LD_INT 1
1873: PPUSH
1874: LD_INT 0
1876: PPUSH
1877: CALL_OW 49
// PlaceUnitArea ( Aleksandr , EnterArea , false ) ;
1881: LD_EXP 20
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 49
// PlaceUnitArea ( Stanislav , EnterArea , false ) ;
1896: LD_EXP 22
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 0
1906: PPUSH
1907: CALL_OW 49
// PlaceUnitArea ( Josif , EnterArea , false ) ;
1911: LD_EXP 21
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: LD_INT 0
1921: PPUSH
1922: CALL_OW 49
// Dimitri := PrepareUnit ( Dimitri , false ,  ) ;
1926: LD_ADDR_EXP 23
1930: PUSH
1931: LD_STRING Dimitri
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: LD_STRING 
1939: PPUSH
1940: CALL 10136 0 3
1944: ST_TO_ADDR
// Ivan := PrepareUnit ( Ivan , false ,  ) ;
1945: LD_ADDR_EXP 24
1949: PUSH
1950: LD_STRING Ivan
1952: PPUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_STRING 
1958: PPUSH
1959: CALL 10136 0 3
1963: ST_TO_ADDR
// Jegor := PrepareUnit ( Jegor , false ,  ) ;
1964: LD_ADDR_EXP 25
1968: PUSH
1969: LD_STRING Jegor
1971: PPUSH
1972: LD_INT 0
1974: PPUSH
1975: LD_STRING 
1977: PPUSH
1978: CALL 10136 0 3
1982: ST_TO_ADDR
// Grigori := PrepareUnit ( Grigori , false ,  ) ;
1983: LD_ADDR_EXP 26
1987: PUSH
1988: LD_STRING Grigori
1990: PPUSH
1991: LD_INT 0
1993: PPUSH
1994: LD_STRING 
1996: PPUSH
1997: CALL 10136 0 3
2001: ST_TO_ADDR
// Anton := PrepareUnit ( Anton , false ,  ) ;
2002: LD_ADDR_EXP 27
2006: PUSH
2007: LD_STRING Anton
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: LD_STRING 
2015: PPUSH
2016: CALL 10136 0 3
2020: ST_TO_ADDR
// PlaceHumanInUnit ( Dimitri , Ovsyenko ) ;
2021: LD_EXP 23
2025: PPUSH
2026: LD_INT 74
2028: PPUSH
2029: CALL_OW 52
// PlaceHumanInUnit ( Anton , Ovsyenko ) ;
2033: LD_EXP 27
2037: PPUSH
2038: LD_INT 74
2040: PPUSH
2041: CALL_OW 52
// PlaceHumanInUnit ( Grigori , Ovsyenko ) ;
2045: LD_EXP 26
2049: PPUSH
2050: LD_INT 74
2052: PPUSH
2053: CALL_OW 52
// PlaceHumanInUnit ( Jegor , OB2 ) ;
2057: LD_EXP 25
2061: PPUSH
2062: LD_INT 79
2064: PPUSH
2065: CALL_OW 52
// PlaceHumanInUnit ( Ivan , OB3 ) ;
2069: LD_EXP 24
2073: PPUSH
2074: LD_INT 78
2076: PPUSH
2077: CALL_OW 52
// Uc_Side := 6 ;
2081: LD_ADDR_OWVAR 20
2085: PUSH
2086: LD_INT 6
2088: ST_TO_ADDR
// PrepareSoldier ( 0 , 3 ) ;
2089: LD_INT 0
2091: PPUSH
2092: LD_INT 3
2094: PPUSH
2095: CALL_OW 381
// RusSol = CreateHuman ;
2099: LD_ADDR_EXP 28
2103: PUSH
2104: CALL_OW 44
2108: ST_TO_ADDR
// PlaceHumanInUnit ( RusSol , OB1 ) ;
2109: LD_EXP 28
2113: PPUSH
2114: LD_INT 77
2116: PPUSH
2117: CALL_OW 52
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
2121: LD_ADDR_EXP 62
2125: PUSH
2126: LD_STRING Morozov
2128: PPUSH
2129: LD_INT 0
2131: PPUSH
2132: LD_STRING 
2134: PPUSH
2135: CALL 10136 0 3
2139: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
2140: LD_ADDR_EXP 63
2144: PUSH
2145: LD_STRING Platonov
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: LD_STRING 
2153: PPUSH
2154: CALL 10136 0 3
2158: ST_TO_ADDR
// end ;
2159: LD_VAR 0 1
2163: RET
// export function InitBurlak ; begin
2164: LD_INT 0
2166: PPUSH
// Uc_side := 3 ;
2167: LD_ADDR_OWVAR 20
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// Uc_nation := 3 ;
2175: LD_ADDR_OWVAR 21
2179: PUSH
2180: LD_INT 3
2182: ST_TO_ADDR
// Uc_Direction := 0 ;
2183: LD_ADDR_OWVAR 24
2187: PUSH
2188: LD_INT 0
2190: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2191: LD_ADDR_EXP 33
2195: PUSH
2196: LD_STRING Burlak
2198: PPUSH
2199: LD_INT 0
2201: PPUSH
2202: LD_STRING 
2204: PPUSH
2205: CALL 10136 0 3
2209: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2210: LD_ADDR_EXP 38
2214: PUSH
2215: LD_STRING Titov
2217: PPUSH
2218: LD_INT 0
2220: PPUSH
2221: LD_STRING 
2223: PPUSH
2224: CALL 10136 0 3
2228: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrovova , false ,  ) ;
2229: LD_ADDR_EXP 35
2233: PUSH
2234: LD_STRING Petrovova
2236: PPUSH
2237: LD_INT 0
2239: PPUSH
2240: LD_STRING 
2242: PPUSH
2243: CALL 10136 0 3
2247: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2248: LD_ADDR_EXP 36
2252: PUSH
2253: LD_STRING Lipshchin
2255: PPUSH
2256: LD_INT 0
2258: PPUSH
2259: LD_STRING 
2261: PPUSH
2262: CALL 10136 0 3
2266: ST_TO_ADDR
// Gleb := PrepareUnit ( Gleb , false ,  ) ;
2267: LD_ADDR_EXP 37
2271: PUSH
2272: LD_STRING Gleb
2274: PPUSH
2275: LD_INT 0
2277: PPUSH
2278: LD_STRING 
2280: PPUSH
2281: CALL 10136 0 3
2285: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , false ,  ) ;
2286: LD_ADDR_EXP 34
2290: PUSH
2291: LD_STRING Karamazov
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: LD_STRING 
2299: PPUSH
2300: CALL 10136 0 3
2304: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , false ,  ) ;
2305: LD_ADDR_EXP 39
2309: PUSH
2310: LD_STRING Petrosyan
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: LD_STRING 
2318: PPUSH
2319: CALL 10136 0 3
2323: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , false ,  ) ;
2324: LD_ADDR_EXP 40
2328: PUSH
2329: LD_STRING Dolgov
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: LD_STRING 
2337: PPUSH
2338: CALL 10136 0 3
2342: ST_TO_ADDR
// vc_chassis = 22 ;
2343: LD_ADDR_OWVAR 37
2347: PUSH
2348: LD_INT 22
2350: ST_TO_ADDR
// vc_control = 1 ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 1
2358: ST_TO_ADDR
// vc_engine = 1 ;
2359: LD_ADDR_OWVAR 39
2363: PUSH
2364: LD_INT 1
2366: ST_TO_ADDR
// vc_fuel_battery = rand ( 15 , 30 ) ;
2367: LD_ADDR_OWVAR 41
2371: PUSH
2372: LD_INT 15
2374: PPUSH
2375: LD_INT 30
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// vc_weapon = [ 44 , 43 , 42 ] [ Difficulty ] ;
2383: LD_ADDR_OWVAR 40
2387: PUSH
2388: LD_INT 44
2390: PUSH
2391: LD_INT 43
2393: PUSH
2394: LD_INT 42
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: LIST
2401: PUSH
2402: LD_OWVAR 67
2406: ARRAY
2407: ST_TO_ADDR
// BurlakCrewVeh1 = CreateVehicle ;
2408: LD_ADDR_EXP 43
2412: PUSH
2413: CALL_OW 45
2417: ST_TO_ADDR
// BurlakCrewVeh2 = CreateVehicle ;
2418: LD_ADDR_EXP 44
2422: PUSH
2423: CALL_OW 45
2427: ST_TO_ADDR
// BurlakCrewVeh3 = CreateVehicle ;
2428: LD_ADDR_EXP 45
2432: PUSH
2433: CALL_OW 45
2437: ST_TO_ADDR
// BurlakCrewVeh4 = CreateVehicle ;
2438: LD_ADDR_EXP 46
2442: PUSH
2443: CALL_OW 45
2447: ST_TO_ADDR
// BurlakCrewVeh5 = CreateVehicle ;
2448: LD_ADDR_EXP 47
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// BurlakCrewVeh6 = CreateVehicle ;
2458: LD_ADDR_EXP 48
2462: PUSH
2463: CALL_OW 45
2467: ST_TO_ADDR
// PlaceUnitArea ( BurlakCrewVeh1 , BurlakArea , false ) ;
2468: LD_EXP 43
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: LD_INT 0
2478: PPUSH
2479: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh2 , BurlakArea , false ) ;
2483: LD_EXP 44
2487: PPUSH
2488: LD_INT 2
2490: PPUSH
2491: LD_INT 0
2493: PPUSH
2494: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh3 , BurlakArea , false ) ;
2498: LD_EXP 45
2502: PPUSH
2503: LD_INT 2
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh4 , BurlakArea , false ) ;
2513: LD_EXP 46
2517: PPUSH
2518: LD_INT 2
2520: PPUSH
2521: LD_INT 0
2523: PPUSH
2524: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh5 , BurlakArea , false ) ;
2528: LD_EXP 47
2532: PPUSH
2533: LD_INT 2
2535: PPUSH
2536: LD_INT 0
2538: PPUSH
2539: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh6 , BurlakArea , false ) ;
2543: LD_EXP 48
2547: PPUSH
2548: LD_INT 2
2550: PPUSH
2551: LD_INT 0
2553: PPUSH
2554: CALL_OW 49
// PlaceHumanInUnit ( Titov , BurlakCrewVeh1 ) ;
2558: LD_EXP 38
2562: PPUSH
2563: LD_EXP 43
2567: PPUSH
2568: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , BurlakCrewVeh2 ) ;
2572: LD_EXP 35
2576: PPUSH
2577: LD_EXP 44
2581: PPUSH
2582: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , BurlakCrewVeh3 ) ;
2586: LD_EXP 36
2590: PPUSH
2591: LD_EXP 45
2595: PPUSH
2596: CALL_OW 52
// PlaceHumanInUnit ( Gleb , BurlakCrewVeh4 ) ;
2600: LD_EXP 37
2604: PPUSH
2605: LD_EXP 46
2609: PPUSH
2610: CALL_OW 52
// PlaceHumanInUnit ( Dolgov , BurlakCrewVeh5 ) ;
2614: LD_EXP 40
2618: PPUSH
2619: LD_EXP 47
2623: PPUSH
2624: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , BurlakCrewVeh6 ) ;
2628: LD_EXP 39
2632: PPUSH
2633: LD_EXP 48
2637: PPUSH
2638: CALL_OW 52
// vc_chassis = 24 ;
2642: LD_ADDR_OWVAR 37
2646: PUSH
2647: LD_INT 24
2649: ST_TO_ADDR
// vc_weapon = 89 ;
2650: LD_ADDR_OWVAR 40
2654: PUSH
2655: LD_INT 89
2657: ST_TO_ADDR
// KaramazovVeh = CreateVehicle ;
2658: LD_ADDR_EXP 42
2662: PUSH
2663: CALL_OW 45
2667: ST_TO_ADDR
// AddCargo ( KaramazovVeh , mat_cans , 200 ) ;
2668: LD_EXP 42
2672: PPUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_INT 200
2678: PPUSH
2679: CALL_OW 291
// PlaceUnitArea ( KaramazovVeh , BurlakArea , false ) ;
2683: LD_EXP 42
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 49
// PlaceHumanInUnit ( Karamazov , KaramazovVeh ) ;
2698: LD_EXP 34
2702: PPUSH
2703: LD_EXP 42
2707: PPUSH
2708: CALL_OW 52
// Uc_Nation = 2 ;
2712: LD_ADDR_OWVAR 21
2716: PUSH
2717: LD_INT 2
2719: ST_TO_ADDR
// vc_chassis = 14 ;
2720: LD_ADDR_OWVAR 37
2724: PUSH
2725: LD_INT 14
2727: ST_TO_ADDR
// vc_weapon = 26 ;
2728: LD_ADDR_OWVAR 40
2732: PUSH
2733: LD_INT 26
2735: ST_TO_ADDR
// BurlakVeh = CreateVehicle ;
2736: LD_ADDR_EXP 41
2740: PUSH
2741: CALL_OW 45
2745: ST_TO_ADDR
// PlaceUnitArea ( BurlakVeh , BurlakArea , false ) ;
2746: LD_EXP 41
2750: PPUSH
2751: LD_INT 2
2753: PPUSH
2754: LD_INT 0
2756: PPUSH
2757: CALL_OW 49
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
2761: LD_EXP 33
2765: PPUSH
2766: LD_EXP 41
2770: PPUSH
2771: CALL_OW 52
// end ; end_of_file
2775: LD_VAR 0 1
2779: RET
// export function InitSikorskiTeam ; var i , j ; begin
2780: LD_INT 0
2782: PPUSH
2783: PPUSH
2784: PPUSH
// SikorskiTeam := SikorskiTeam ^ Sikorski ^ Gary ^ Bobby ^ Cyrus ^ Walker ^ Lynch ^ Turner ^ Jilian ^ McCreery ;
2785: LD_ADDR_EXP 4
2789: PUSH
2790: LD_EXP 4
2794: PUSH
2795: LD_EXP 49
2799: ADD
2800: PUSH
2801: LD_EXP 54
2805: ADD
2806: PUSH
2807: LD_EXP 52
2811: ADD
2812: PUSH
2813: LD_EXP 53
2817: ADD
2818: PUSH
2819: LD_EXP 57
2823: ADD
2824: PUSH
2825: LD_EXP 55
2829: ADD
2830: PUSH
2831: LD_EXP 59
2835: ADD
2836: PUSH
2837: LD_EXP 58
2841: ADD
2842: PUSH
2843: LD_EXP 56
2847: ADD
2848: ST_TO_ADDR
// Uc_side := 4 ;
2849: LD_ADDR_OWVAR 20
2853: PUSH
2854: LD_INT 4
2856: ST_TO_ADDR
// Uc_Nation := 1 ;
2857: LD_ADDR_OWVAR 21
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// Hc_Name := Jeremy Sikorski ;
2865: LD_ADDR_OWVAR 26
2869: PUSH
2870: LD_STRING Jeremy Sikorski
2872: ST_TO_ADDR
// Hc_Class := 1 ;
2873: LD_ADDR_OWVAR 28
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// Hc_Sex := 1 ;
2881: LD_ADDR_OWVAR 27
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// Hc_Basic_Skills := [ 0 , 0 , 0 , 0 ] ;
2889: LD_ADDR_OWVAR 30
2893: PUSH
2894: LD_INT 0
2896: PUSH
2897: LD_INT 0
2899: PUSH
2900: LD_INT 0
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: ST_TO_ADDR
// Hc_Skills := [ 6 , 3 , 4 , 1 ] ;
2912: LD_ADDR_OWVAR 31
2916: PUSH
2917: LD_INT 6
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: LD_INT 4
2925: PUSH
2926: LD_INT 1
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// Hc_Gallery := us ;
2935: LD_ADDR_OWVAR 33
2939: PUSH
2940: LD_STRING us
2942: ST_TO_ADDR
// Hc_Face_Number := 19 ;
2943: LD_ADDR_OWVAR 34
2947: PUSH
2948: LD_INT 19
2950: ST_TO_ADDR
// Sikorski := CreateHuman ;
2951: LD_ADDR_EXP 49
2955: PUSH
2956: CALL_OW 44
2960: ST_TO_ADDR
// SikorskiMeat := CreateHuman ;
2961: LD_ADDR_EXP 50
2965: PUSH
2966: CALL_OW 44
2970: ST_TO_ADDR
// Hc_Name := Kpt. Jack Truman ;
2971: LD_ADDR_OWVAR 26
2975: PUSH
2976: LD_STRING Kpt. Jack Truman
2978: ST_TO_ADDR
// Hc_Skills := [ 8 , 5 , 3 , 1 ] ;
2979: LD_ADDR_OWVAR 31
2983: PUSH
2984: LD_INT 8
2986: PUSH
2987: LD_INT 5
2989: PUSH
2990: LD_INT 3
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// Hc_Face_Number := 26 ;
3002: LD_ADDR_OWVAR 34
3006: PUSH
3007: LD_INT 26
3009: ST_TO_ADDR
// Truman := CreateHuman ;
3010: LD_ADDR_EXP 51
3014: PUSH
3015: CALL_OW 44
3019: ST_TO_ADDR
// Hc_Name := Cyrus Parker ;
3020: LD_ADDR_OWVAR 26
3024: PUSH
3025: LD_STRING Cyrus Parker
3027: ST_TO_ADDR
// Hc_Skills := [ 6 , 3 , 2 , 2 ] ;
3028: LD_ADDR_OWVAR 31
3032: PUSH
3033: LD_INT 6
3035: PUSH
3036: LD_INT 3
3038: PUSH
3039: LD_INT 2
3041: PUSH
3042: LD_INT 2
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: ST_TO_ADDR
// Hc_Face_Number := 8 ;
3051: LD_ADDR_OWVAR 34
3055: PUSH
3056: LD_INT 8
3058: ST_TO_ADDR
// Cyrus := CreateHuman ;
3059: LD_ADDR_EXP 53
3063: PUSH
3064: CALL_OW 44
3068: ST_TO_ADDR
// Hc_Name := Bobby Brandon ;
3069: LD_ADDR_OWVAR 26
3073: PUSH
3074: LD_STRING Bobby Brandon
3076: ST_TO_ADDR
// Hc_Skills := [ 3 , 5 , 8 , 3 ] ;
3077: LD_ADDR_OWVAR 31
3081: PUSH
3082: LD_INT 3
3084: PUSH
3085: LD_INT 5
3087: PUSH
3088: LD_INT 8
3090: PUSH
3091: LD_INT 3
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: ST_TO_ADDR
// Hc_Face_Number := 9 ;
3100: LD_ADDR_OWVAR 34
3104: PUSH
3105: LD_INT 9
3107: ST_TO_ADDR
// Bobby := CreateHuman ;
3108: LD_ADDR_EXP 52
3112: PUSH
3113: CALL_OW 44
3117: ST_TO_ADDR
// Hc_Name := Gary Grant ;
3118: LD_ADDR_OWVAR 26
3122: PUSH
3123: LD_STRING Gary Grant
3125: ST_TO_ADDR
// Hc_Skills := [ 7 , 3 , 1 , 1 ] ;
3126: LD_ADDR_OWVAR 31
3130: PUSH
3131: LD_INT 7
3133: PUSH
3134: LD_INT 3
3136: PUSH
3137: LD_INT 1
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: ST_TO_ADDR
// Hc_Face_Number := 20 ;
3149: LD_ADDR_OWVAR 34
3153: PUSH
3154: LD_INT 20
3156: ST_TO_ADDR
// Gary := CreateHuman ;
3157: LD_ADDR_EXP 54
3161: PUSH
3162: CALL_OW 44
3166: ST_TO_ADDR
// Hc_Name := Gary Grant ;
3167: LD_ADDR_OWVAR 26
3171: PUSH
3172: LD_STRING Gary Grant
3174: ST_TO_ADDR
// Hc_Skills := [ 7 , 3 , 1 , 1 ] ;
3175: LD_ADDR_OWVAR 31
3179: PUSH
3180: LD_INT 7
3182: PUSH
3183: LD_INT 3
3185: PUSH
3186: LD_INT 1
3188: PUSH
3189: LD_INT 1
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: ST_TO_ADDR
// Hc_Face_Number := 20 ;
3198: LD_ADDR_OWVAR 34
3202: PUSH
3203: LD_INT 20
3205: ST_TO_ADDR
// Gary := CreateHuman ;
3206: LD_ADDR_EXP 54
3210: PUSH
3211: CALL_OW 44
3215: ST_TO_ADDR
// Hc_Name := Henry Lynch ;
3216: LD_ADDR_OWVAR 26
3220: PUSH
3221: LD_STRING Henry Lynch
3223: ST_TO_ADDR
// Hc_Skills := [ 6 , 2 , 2 , 3 ] ;
3224: LD_ADDR_OWVAR 31
3228: PUSH
3229: LD_INT 6
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: LD_INT 2
3237: PUSH
3238: LD_INT 3
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: ST_TO_ADDR
// Hc_Gallery := SecondCharsGal ;
3247: LD_ADDR_OWVAR 33
3251: PUSH
3252: LD_STRING SecondCharsGal
3254: ST_TO_ADDR
// Hc_Face_Number := 49 ;
3255: LD_ADDR_OWVAR 34
3259: PUSH
3260: LD_INT 49
3262: ST_TO_ADDR
// Lynch := CreateHuman ;
3263: LD_ADDR_EXP 55
3267: PUSH
3268: CALL_OW 44
3272: ST_TO_ADDR
// Hc_Name := Mike Turner ;
3273: LD_ADDR_OWVAR 26
3277: PUSH
3278: LD_STRING Mike Turner
3280: ST_TO_ADDR
// Hc_Skills := [ 3 , 6 , 3 , 2 ] ;
3281: LD_ADDR_OWVAR 31
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: LD_INT 6
3291: PUSH
3292: LD_INT 3
3294: PUSH
3295: LD_INT 2
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: ST_TO_ADDR
// Hc_Face_Number := 62 ;
3304: LD_ADDR_OWVAR 34
3308: PUSH
3309: LD_INT 62
3311: ST_TO_ADDR
// Turner := CreateHuman ;
3312: LD_ADDR_EXP 59
3316: PUSH
3317: CALL_OW 44
3321: ST_TO_ADDR
// Hc_Name := Hallie Jilian ;
3322: LD_ADDR_OWVAR 26
3326: PUSH
3327: LD_STRING Hallie Jilian
3329: ST_TO_ADDR
// Hc_Skills := [ 2 , 5 , 2 , 2 ] ;
3330: LD_ADDR_OWVAR 31
3334: PUSH
3335: LD_INT 2
3337: PUSH
3338: LD_INT 5
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: LD_INT 2
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: ST_TO_ADDR
// Hc_Sex := 2 ;
3353: LD_ADDR_OWVAR 27
3357: PUSH
3358: LD_INT 2
3360: ST_TO_ADDR
// Hc_Face_Number := 39 ;
3361: LD_ADDR_OWVAR 34
3365: PUSH
3366: LD_INT 39
3368: ST_TO_ADDR
// Jilian := CreateHuman ;
3369: LD_ADDR_EXP 58
3373: PUSH
3374: CALL_OW 44
3378: ST_TO_ADDR
// Hc_Name := Michael Walker ;
3379: LD_ADDR_OWVAR 26
3383: PUSH
3384: LD_STRING Michael Walker
3386: ST_TO_ADDR
// Hc_Skills := [ 2 , 2 , 3 , 5 ] ;
3387: LD_ADDR_OWVAR 31
3391: PUSH
3392: LD_INT 2
3394: PUSH
3395: LD_INT 2
3397: PUSH
3398: LD_INT 3
3400: PUSH
3401: LD_INT 5
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: ST_TO_ADDR
// Hc_Sex := 1 ;
3410: LD_ADDR_OWVAR 27
3414: PUSH
3415: LD_INT 1
3417: ST_TO_ADDR
// Hc_Class := 4 ;
3418: LD_ADDR_OWVAR 28
3422: PUSH
3423: LD_INT 4
3425: ST_TO_ADDR
// Hc_Face_Number := 48 ;
3426: LD_ADDR_OWVAR 34
3430: PUSH
3431: LD_INT 48
3433: ST_TO_ADDR
// Walker := CreateHuman ;
3434: LD_ADDR_EXP 57
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// Hc_Name := Peter McCreery ;
3444: LD_ADDR_OWVAR 26
3448: PUSH
3449: LD_STRING Peter McCreery
3451: ST_TO_ADDR
// Hc_Skills := [ 1 , 0 , 3 , 6 ] ;
3452: LD_ADDR_OWVAR 31
3456: PUSH
3457: LD_INT 1
3459: PUSH
3460: LD_INT 0
3462: PUSH
3463: LD_INT 3
3465: PUSH
3466: LD_INT 6
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: ST_TO_ADDR
// Hc_Face_Number := 58 ;
3475: LD_ADDR_OWVAR 34
3479: PUSH
3480: LD_INT 58
3482: ST_TO_ADDR
// McCreery := CreateHuman ;
3483: LD_ADDR_EXP 56
3487: PUSH
3488: CALL_OW 44
3492: ST_TO_ADDR
// SikorskiTeam := SikorskiTeam ^ Sikorski ^ Truman ^ Gary ^ Bobby ^ Cyrus ^ Walker ^ Lynch ^ Turner ^ Jilian ^ McCreery ;
3493: LD_ADDR_EXP 4
3497: PUSH
3498: LD_EXP 4
3502: PUSH
3503: LD_EXP 49
3507: ADD
3508: PUSH
3509: LD_EXP 51
3513: ADD
3514: PUSH
3515: LD_EXP 54
3519: ADD
3520: PUSH
3521: LD_EXP 52
3525: ADD
3526: PUSH
3527: LD_EXP 53
3531: ADD
3532: PUSH
3533: LD_EXP 57
3537: ADD
3538: PUSH
3539: LD_EXP 55
3543: ADD
3544: PUSH
3545: LD_EXP 59
3549: ADD
3550: PUSH
3551: LD_EXP 58
3555: ADD
3556: PUSH
3557: LD_EXP 56
3561: ADD
3562: ST_TO_ADDR
// PlaceUnitArea ( Sikorski , SikorskiArea , false ) ;
3563: LD_EXP 49
3567: PPUSH
3568: LD_INT 9
3570: PPUSH
3571: LD_INT 0
3573: PPUSH
3574: CALL_OW 49
// PlaceUnitArea ( Truman , SikorskiArea , false ) ;
3578: LD_EXP 51
3582: PPUSH
3583: LD_INT 9
3585: PPUSH
3586: LD_INT 0
3588: PPUSH
3589: CALL_OW 49
// PlaceUnitArea ( Cyrus , SikorskiArea , false ) ;
3593: LD_EXP 53
3597: PPUSH
3598: LD_INT 9
3600: PPUSH
3601: LD_INT 0
3603: PPUSH
3604: CALL_OW 49
// PlaceUnitArea ( Bobby , SikorskiArea , false ) ;
3608: LD_EXP 52
3612: PPUSH
3613: LD_INT 9
3615: PPUSH
3616: LD_INT 0
3618: PPUSH
3619: CALL_OW 49
// PlaceUnitArea ( Gary , SikorskiArea , false ) ;
3623: LD_EXP 54
3627: PPUSH
3628: LD_INT 9
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL_OW 49
// PlaceUnitArea ( Lynch , SikorskiArea , false ) ;
3638: LD_EXP 55
3642: PPUSH
3643: LD_INT 9
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL_OW 49
// PlaceUnitArea ( Turner , SikorskiArea , false ) ;
3653: LD_EXP 59
3657: PPUSH
3658: LD_INT 9
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: CALL_OW 49
// PlaceUnitArea ( Jilian , SikorskiArea , false ) ;
3668: LD_EXP 58
3672: PPUSH
3673: LD_INT 9
3675: PPUSH
3676: LD_INT 0
3678: PPUSH
3679: CALL_OW 49
// PlaceUnitArea ( Walker , SikorskiArea , false ) ;
3683: LD_EXP 57
3687: PPUSH
3688: LD_INT 9
3690: PPUSH
3691: LD_INT 0
3693: PPUSH
3694: CALL_OW 49
// PlaceUnitArea ( McCreery , SikorskiArea , false ) ;
3698: LD_EXP 56
3702: PPUSH
3703: LD_INT 9
3705: PPUSH
3706: LD_INT 0
3708: PPUSH
3709: CALL_OW 49
// end ;
3713: LD_VAR 0 1
3717: RET
// every 0 0$1 trigger start_ended = true do
3718: LD_EXP 71
3722: PUSH
3723: LD_INT 1
3725: EQUAL
3726: IFFALSE 3756
3728: GO 3730
3730: DISABLE
// begin AddResourceType ( GetBase ( Ovsyenko ) , mat_cans , 100 ) ;
3731: LD_INT 74
3733: PPUSH
3734: CALL_OW 274
3738: PPUSH
3739: LD_INT 1
3741: PPUSH
3742: LD_INT 100
3744: PPUSH
3745: CALL_OW 276
// ComUpgrade ( Ovsyenko ) ;
3749: LD_INT 74
3751: PPUSH
3752: CALL_OW 146
// end ;
3756: END
// export function InitTerminal ; var i , y , turrety , lab , zbrojka ; begin
3757: LD_INT 0
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
3763: PPUSH
3764: PPUSH
// Hc_Gallery :=  ;
3765: LD_ADDR_OWVAR 33
3769: PUSH
3770: LD_STRING 
3772: ST_TO_ADDR
// Hc_Name :=  ;
3773: LD_ADDR_OWVAR 26
3777: PUSH
3778: LD_STRING 
3780: ST_TO_ADDR
// MainTerminalCrew := [ ] ;
3781: LD_ADDR_EXP 6
3785: PUSH
3786: EMPTY
3787: ST_TO_ADDR
// uc_side := 1 ;
3788: LD_ADDR_OWVAR 20
3792: PUSH
3793: LD_INT 1
3795: ST_TO_ADDR
// uc_nation := 1 ;
3796: LD_ADDR_OWVAR 21
3800: PUSH
3801: LD_INT 1
3803: ST_TO_ADDR
// PrepareSoldier ( rand ( 0 , 1 ) , 10 ) ;
3804: LD_INT 0
3806: PPUSH
3807: LD_INT 1
3809: PPUSH
3810: CALL_OW 12
3814: PPUSH
3815: LD_INT 10
3817: PPUSH
3818: CALL_OW 381
// NorthSold := CreateHuman ;
3822: LD_ADDR_EXP 61
3826: PUSH
3827: CALL_OW 44
3831: ST_TO_ADDR
// PlaceHumanInUnit ( NorthSold , AmB4 ) ;
3832: LD_EXP 61
3836: PPUSH
3837: LD_INT 104
3839: PPUSH
3840: CALL_OW 52
// for i = 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
3844: LD_ADDR_VAR 0 2
3848: PUSH
3849: DOUBLE
3850: LD_INT 1
3852: DEC
3853: ST_TO_ADDR
3854: LD_INT 8
3856: PUSH
3857: LD_INT 9
3859: PUSH
3860: LD_INT 10
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: PUSH
3868: LD_OWVAR 67
3872: ARRAY
3873: PUSH
3874: FOR_TO
3875: IFFALSE 3934
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 6 , 7 ] [ Difficulty ] ) ;
3877: LD_INT 0
3879: PPUSH
3880: LD_INT 1
3882: PPUSH
3883: CALL_OW 12
3887: PPUSH
3888: LD_INT 2
3890: PUSH
3891: LD_INT 3
3893: PUSH
3894: LD_INT 6
3896: PUSH
3897: LD_INT 7
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: PUSH
3906: LD_OWVAR 67
3910: ARRAY
3911: PPUSH
3912: CALL_OW 381
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
3916: LD_ADDR_EXP 6
3920: PUSH
3921: LD_EXP 6
3925: PUSH
3926: CALL_OW 44
3930: ADD
3931: ST_TO_ADDR
// end ;
3932: GO 3874
3934: POP
3935: POP
// for i = 1 to 1 do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: DOUBLE
3942: LD_INT 1
3944: DEC
3945: ST_TO_ADDR
3946: LD_INT 1
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4009
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 2 , 3 , 6 , 7 ] [ Difficulty ] ) ;
3952: LD_INT 0
3954: PPUSH
3955: LD_INT 1
3957: PPUSH
3958: CALL_OW 12
3962: PPUSH
3963: LD_INT 2
3965: PUSH
3966: LD_INT 3
3968: PUSH
3969: LD_INT 6
3971: PUSH
3972: LD_INT 7
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: PUSH
3981: LD_OWVAR 67
3985: ARRAY
3986: PPUSH
3987: CALL_OW 382
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
3991: LD_ADDR_EXP 6
3995: PUSH
3996: LD_EXP 6
4000: PUSH
4001: CALL_OW 44
4005: ADD
4006: ST_TO_ADDR
// end ;
4007: GO 3949
4009: POP
4010: POP
// for i = 1 to 2 do
4011: LD_ADDR_VAR 0 2
4015: PUSH
4016: DOUBLE
4017: LD_INT 1
4019: DEC
4020: ST_TO_ADDR
4021: LD_INT 2
4023: PUSH
4024: FOR_TO
4025: IFFALSE 4084
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 2 , 3 , 6 , 7 ] [ Difficulty ] ) ;
4027: LD_INT 0
4029: PPUSH
4030: LD_INT 1
4032: PPUSH
4033: CALL_OW 12
4037: PPUSH
4038: LD_INT 2
4040: PUSH
4041: LD_INT 3
4043: PUSH
4044: LD_INT 6
4046: PUSH
4047: LD_INT 7
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: PUSH
4056: LD_OWVAR 67
4060: ARRAY
4061: PPUSH
4062: CALL_OW 384
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
4066: LD_ADDR_EXP 6
4070: PUSH
4071: LD_EXP 6
4075: PUSH
4076: CALL_OW 44
4080: ADD
4081: ST_TO_ADDR
// end ;
4082: GO 4024
4084: POP
4085: POP
// turrety := FilterUnitsInArea ( MainTerminalArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
4086: LD_ADDR_VAR 0 4
4090: PUSH
4091: LD_INT 16
4093: PPUSH
4094: LD_INT 2
4096: PUSH
4097: LD_INT 30
4099: PUSH
4100: LD_INT 31
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: PUSH
4107: LD_INT 30
4109: PUSH
4110: LD_INT 32
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: PPUSH
4122: CALL_OW 70
4126: ST_TO_ADDR
// lab := FilterUnitsInArea ( MainTerminalArea , [ [ f_btype , b_lab_full ] ] ) ;
4127: LD_ADDR_VAR 0 5
4131: PUSH
4132: LD_INT 16
4134: PPUSH
4135: LD_INT 30
4137: PUSH
4138: LD_INT 8
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: PUSH
4145: EMPTY
4146: LIST
4147: PPUSH
4148: CALL_OW 70
4152: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( MainTerminalArea , [ [ f_btype , b_barracks ] ] ) ;
4153: LD_ADDR_VAR 0 6
4157: PUSH
4158: LD_INT 16
4160: PPUSH
4161: LD_INT 30
4163: PUSH
4164: LD_INT 5
4166: PUSH
4167: EMPTY
4168: LIST
4169: LIST
4170: PUSH
4171: EMPTY
4172: LIST
4173: PPUSH
4174: CALL_OW 70
4178: ST_TO_ADDR
// y := 1 ;
4179: LD_ADDR_VAR 0 3
4183: PUSH
4184: LD_INT 1
4186: ST_TO_ADDR
// for i in MainTerminalCrew do
4187: LD_ADDR_VAR 0 2
4191: PUSH
4192: LD_EXP 6
4196: PUSH
4197: FOR_IN
4198: IFFALSE 4355
// begin PlaceUnitArea ( i , TerminalPersonel , false ) ;
4200: LD_VAR 0 2
4204: PPUSH
4205: LD_INT 15
4207: PPUSH
4208: LD_INT 0
4210: PPUSH
4211: CALL_OW 49
// case GetClass ( i ) of 1 :
4215: LD_VAR 0 2
4219: PPUSH
4220: CALL_OW 257
4224: PUSH
4225: LD_INT 1
4227: DOUBLE
4228: EQUAL
4229: IFTRUE 4233
4231: GO 4300
4233: POP
// begin if y > 7 then
4234: LD_VAR 0 3
4238: PUSH
4239: LD_INT 7
4241: GREATER
4242: IFFALSE 4264
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
4244: LD_VAR 0 2
4248: PPUSH
4249: LD_VAR 0 6
4253: PUSH
4254: LD_INT 1
4256: ARRAY
4257: PPUSH
4258: CALL_OW 120
4262: GO 4284
// ComEnterUnit ( i , turrety [ y ] ) ;
4264: LD_VAR 0 2
4268: PPUSH
4269: LD_VAR 0 4
4273: PUSH
4274: LD_VAR 0 3
4278: ARRAY
4279: PPUSH
4280: CALL_OW 120
// y = y + 1 ;
4284: LD_ADDR_VAR 0 3
4288: PUSH
4289: LD_VAR 0 3
4293: PUSH
4294: LD_INT 1
4296: PLUS
4297: ST_TO_ADDR
// end ; 2 :
4298: GO 4353
4300: LD_INT 2
4302: DOUBLE
4303: EQUAL
4304: IFTRUE 4308
4306: GO 4323
4308: POP
// ComEnterUnit ( i , MainTerminal ) ; 4 :
4309: LD_VAR 0 2
4313: PPUSH
4314: LD_INT 257
4316: PPUSH
4317: CALL_OW 120
4321: GO 4353
4323: LD_INT 4
4325: DOUBLE
4326: EQUAL
4327: IFTRUE 4331
4329: GO 4352
4331: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
4332: LD_VAR 0 2
4336: PPUSH
4337: LD_VAR 0 5
4341: PUSH
4342: LD_INT 1
4344: ARRAY
4345: PPUSH
4346: CALL_OW 120
4350: GO 4353
4352: POP
// end ;
4353: GO 4197
4355: POP
4356: POP
// end ;
4357: LD_VAR 0 1
4361: RET
// export function InitAmerican ; var i , z , y , turrety , fabryka , Wieza , lab , zbrojka ; begin
4362: LD_INT 0
4364: PPUSH
4365: PPUSH
4366: PPUSH
4367: PPUSH
4368: PPUSH
4369: PPUSH
4370: PPUSH
4371: PPUSH
4372: PPUSH
// Hc_Gallery :=  ;
4373: LD_ADDR_OWVAR 33
4377: PUSH
4378: LD_STRING 
4380: ST_TO_ADDR
// Hc_Name :=  ;
4381: LD_ADDR_OWVAR 26
4385: PUSH
4386: LD_STRING 
4388: ST_TO_ADDR
// WestTerminalCrew := [ ] ;
4389: LD_ADDR_EXP 5
4393: PUSH
4394: EMPTY
4395: ST_TO_ADDR
// uc_side := 1 ;
4396: LD_ADDR_OWVAR 20
4400: PUSH
4401: LD_INT 1
4403: ST_TO_ADDR
// uc_nation := 1 ;
4404: LD_ADDR_OWVAR 21
4408: PUSH
4409: LD_INT 1
4411: ST_TO_ADDR
// for i = 1 to [ 10 , 11 , 12 ] [ Difficulty ] do
4412: LD_ADDR_VAR 0 2
4416: PUSH
4417: DOUBLE
4418: LD_INT 1
4420: DEC
4421: ST_TO_ADDR
4422: LD_INT 10
4424: PUSH
4425: LD_INT 11
4427: PUSH
4428: LD_INT 12
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: LIST
4435: PUSH
4436: LD_OWVAR 67
4440: ARRAY
4441: PUSH
4442: FOR_TO
4443: IFFALSE 4502
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 6 , 7 ] [ Difficulty ] ) ;
4445: LD_INT 0
4447: PPUSH
4448: LD_INT 1
4450: PPUSH
4451: CALL_OW 12
4455: PPUSH
4456: LD_INT 2
4458: PUSH
4459: LD_INT 3
4461: PUSH
4462: LD_INT 6
4464: PUSH
4465: LD_INT 7
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: PUSH
4474: LD_OWVAR 67
4478: ARRAY
4479: PPUSH
4480: CALL_OW 381
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4484: LD_ADDR_EXP 5
4488: PUSH
4489: LD_EXP 5
4493: PUSH
4494: CALL_OW 44
4498: ADD
4499: ST_TO_ADDR
// end ;
4500: GO 4442
4502: POP
4503: POP
// for i = 1 to 2 do
4504: LD_ADDR_VAR 0 2
4508: PUSH
4509: DOUBLE
4510: LD_INT 1
4512: DEC
4513: ST_TO_ADDR
4514: LD_INT 2
4516: PUSH
4517: FOR_TO
4518: IFFALSE 4577
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 2 , 3 , 6 , 7 ] [ Difficulty ] ) ;
4520: LD_INT 0
4522: PPUSH
4523: LD_INT 1
4525: PPUSH
4526: CALL_OW 12
4530: PPUSH
4531: LD_INT 2
4533: PUSH
4534: LD_INT 3
4536: PUSH
4537: LD_INT 6
4539: PUSH
4540: LD_INT 7
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: PUSH
4549: LD_OWVAR 67
4553: ARRAY
4554: PPUSH
4555: CALL_OW 382
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4559: LD_ADDR_EXP 5
4563: PUSH
4564: LD_EXP 5
4568: PUSH
4569: CALL_OW 44
4573: ADD
4574: ST_TO_ADDR
// end ;
4575: GO 4517
4577: POP
4578: POP
// for i = 1 to 6 do
4579: LD_ADDR_VAR 0 2
4583: PUSH
4584: DOUBLE
4585: LD_INT 1
4587: DEC
4588: ST_TO_ADDR
4589: LD_INT 6
4591: PUSH
4592: FOR_TO
4593: IFFALSE 4652
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 2 , 3 , 6 , 7 ] [ Difficulty ] ) ;
4595: LD_INT 0
4597: PPUSH
4598: LD_INT 1
4600: PPUSH
4601: CALL_OW 12
4605: PPUSH
4606: LD_INT 2
4608: PUSH
4609: LD_INT 3
4611: PUSH
4612: LD_INT 6
4614: PUSH
4615: LD_INT 7
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: PUSH
4624: LD_OWVAR 67
4628: ARRAY
4629: PPUSH
4630: CALL_OW 383
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4634: LD_ADDR_EXP 5
4638: PUSH
4639: LD_EXP 5
4643: PUSH
4644: CALL_OW 44
4648: ADD
4649: ST_TO_ADDR
// end ;
4650: GO 4592
4652: POP
4653: POP
// for i = 1 to 2 do
4654: LD_ADDR_VAR 0 2
4658: PUSH
4659: DOUBLE
4660: LD_INT 1
4662: DEC
4663: ST_TO_ADDR
4664: LD_INT 2
4666: PUSH
4667: FOR_TO
4668: IFFALSE 4727
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 2 , 3 , 6 , 7 ] [ Difficulty ] ) ;
4670: LD_INT 0
4672: PPUSH
4673: LD_INT 1
4675: PPUSH
4676: CALL_OW 12
4680: PPUSH
4681: LD_INT 2
4683: PUSH
4684: LD_INT 3
4686: PUSH
4687: LD_INT 6
4689: PUSH
4690: LD_INT 7
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: PUSH
4699: LD_OWVAR 67
4703: ARRAY
4704: PPUSH
4705: CALL_OW 384
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4709: LD_ADDR_EXP 5
4713: PUSH
4714: LD_EXP 5
4718: PUSH
4719: CALL_OW 44
4723: ADD
4724: ST_TO_ADDR
// end ;
4725: GO 4667
4727: POP
4728: POP
// turrety := FilterUnitsInArea ( WestTerminalArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
4729: LD_ADDR_VAR 0 5
4733: PUSH
4734: LD_INT 17
4736: PPUSH
4737: LD_INT 2
4739: PUSH
4740: LD_INT 30
4742: PUSH
4743: LD_INT 31
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PUSH
4750: LD_INT 30
4752: PUSH
4753: LD_INT 32
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: LIST
4764: PPUSH
4765: CALL_OW 70
4769: ST_TO_ADDR
// lab := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_lab_full ] ] ) ;
4770: LD_ADDR_VAR 0 8
4774: PUSH
4775: LD_INT 17
4777: PPUSH
4778: LD_INT 30
4780: PUSH
4781: LD_INT 8
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: PUSH
4788: EMPTY
4789: LIST
4790: PPUSH
4791: CALL_OW 70
4795: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_factory ] ] ) ;
4796: LD_ADDR_VAR 0 6
4800: PUSH
4801: LD_INT 17
4803: PPUSH
4804: LD_INT 30
4806: PUSH
4807: LD_INT 3
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PUSH
4814: EMPTY
4815: LIST
4816: PPUSH
4817: CALL_OW 70
4821: ST_TO_ADDR
// wieza := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_control_tower ] ] ) ;
4822: LD_ADDR_VAR 0 7
4826: PUSH
4827: LD_INT 17
4829: PPUSH
4830: LD_INT 30
4832: PUSH
4833: LD_INT 36
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: PUSH
4840: EMPTY
4841: LIST
4842: PPUSH
4843: CALL_OW 70
4847: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_barracks ] ] ) ;
4848: LD_ADDR_VAR 0 9
4852: PUSH
4853: LD_INT 17
4855: PPUSH
4856: LD_INT 30
4858: PUSH
4859: LD_INT 5
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: PPUSH
4869: CALL_OW 70
4873: ST_TO_ADDR
// y := 1 ;
4874: LD_ADDR_VAR 0 4
4878: PUSH
4879: LD_INT 1
4881: ST_TO_ADDR
// z := 1 ;
4882: LD_ADDR_VAR 0 3
4886: PUSH
4887: LD_INT 1
4889: ST_TO_ADDR
// for i in WestTerminalCrew do
4890: LD_ADDR_VAR 0 2
4894: PUSH
4895: LD_EXP 5
4899: PUSH
4900: FOR_IN
4901: IFFALSE 5131
// begin PlaceUnitArea ( i , TerminalPersonel , false ) ;
4903: LD_VAR 0 2
4907: PPUSH
4908: LD_INT 15
4910: PPUSH
4911: LD_INT 0
4913: PPUSH
4914: CALL_OW 49
// case GetClass ( i ) of 1 :
4918: LD_VAR 0 2
4922: PPUSH
4923: CALL_OW 257
4927: PUSH
4928: LD_INT 1
4930: DOUBLE
4931: EQUAL
4932: IFTRUE 4936
4934: GO 5003
4936: POP
// begin if y > 9 then
4937: LD_VAR 0 4
4941: PUSH
4942: LD_INT 9
4944: GREATER
4945: IFFALSE 4967
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
4947: LD_VAR 0 2
4951: PPUSH
4952: LD_VAR 0 9
4956: PUSH
4957: LD_INT 1
4959: ARRAY
4960: PPUSH
4961: CALL_OW 120
4965: GO 4987
// ComEnterUnit ( i , turrety [ y ] ) ;
4967: LD_VAR 0 2
4971: PPUSH
4972: LD_VAR 0 5
4976: PUSH
4977: LD_VAR 0 4
4981: ARRAY
4982: PPUSH
4983: CALL_OW 120
// y = y + 1 ;
4987: LD_ADDR_VAR 0 4
4991: PUSH
4992: LD_VAR 0 4
4996: PUSH
4997: LD_INT 1
4999: PLUS
5000: ST_TO_ADDR
// end ; 2 :
5001: GO 5129
5003: LD_INT 2
5005: DOUBLE
5006: EQUAL
5007: IFTRUE 5011
5009: GO 5026
5011: POP
// ComEnterUnit ( i , WestTerminal ) ; 3 :
5012: LD_VAR 0 2
5016: PPUSH
5017: LD_INT 123
5019: PPUSH
5020: CALL_OW 120
5024: GO 5129
5026: LD_INT 3
5028: DOUBLE
5029: EQUAL
5030: IFTRUE 5034
5032: GO 5099
5034: POP
// begin if z > 3 then
5035: LD_VAR 0 3
5039: PUSH
5040: LD_INT 3
5042: GREATER
5043: IFFALSE 5065
// ComEnterUnit ( i , fabryka [ 1 ] ) else
5045: LD_VAR 0 2
5049: PPUSH
5050: LD_VAR 0 6
5054: PUSH
5055: LD_INT 1
5057: ARRAY
5058: PPUSH
5059: CALL_OW 120
5063: GO 5083
// ComEnterUnit ( i , wieza [ 1 ] ) ;
5065: LD_VAR 0 2
5069: PPUSH
5070: LD_VAR 0 7
5074: PUSH
5075: LD_INT 1
5077: ARRAY
5078: PPUSH
5079: CALL_OW 120
// z = z + 1 ;
5083: LD_ADDR_VAR 0 3
5087: PUSH
5088: LD_VAR 0 3
5092: PUSH
5093: LD_INT 1
5095: PLUS
5096: ST_TO_ADDR
// end ; 4 :
5097: GO 5129
5099: LD_INT 4
5101: DOUBLE
5102: EQUAL
5103: IFTRUE 5107
5105: GO 5128
5107: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
5108: LD_VAR 0 2
5112: PPUSH
5113: LD_VAR 0 8
5117: PUSH
5118: LD_INT 1
5120: ARRAY
5121: PPUSH
5122: CALL_OW 120
5126: GO 5129
5128: POP
// end ;
5129: GO 4900
5131: POP
5132: POP
// Uc_Side := 1 ;
5133: LD_ADDR_OWVAR 20
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// Uc_Nation := 1 ;
5141: LD_ADDR_OWVAR 21
5145: PUSH
5146: LD_INT 1
5148: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , false ,  ) ;
5149: LD_ADDR_EXP 60
5153: PUSH
5154: LD_STRING Houten
5156: PPUSH
5157: LD_INT 0
5159: PPUSH
5160: LD_STRING 
5162: PPUSH
5163: CALL 10136 0 3
5167: ST_TO_ADDR
// PlaceHumanInUnit ( Houten , WestTerminal ) ;
5168: LD_EXP 60
5172: PPUSH
5173: LD_INT 123
5175: PPUSH
5176: CALL_OW 52
// end ;
5180: LD_VAR 0 1
5184: RET
// every 10 10$0 trigger start_ended = true do var i ;
5185: LD_EXP 71
5189: PUSH
5190: LD_INT 1
5192: EQUAL
5193: IFFALSE 5282
5195: GO 5197
5197: DISABLE
5198: LD_INT 0
5200: PPUSH
// begin Uc_Nation = 1 ;
5201: LD_ADDR_OWVAR 21
5205: PUSH
5206: LD_INT 1
5208: ST_TO_ADDR
// Uc_Side = 1 ;
5209: LD_ADDR_OWVAR 20
5213: PUSH
5214: LD_INT 1
5216: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5217: LD_ADDR_VAR 0 1
5221: PUSH
5222: DOUBLE
5223: LD_INT 1
5225: DEC
5226: ST_TO_ADDR
5227: LD_INT 4
5229: PUSH
5230: LD_INT 5
5232: PUSH
5233: LD_INT 6
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: PUSH
5241: LD_OWVAR 67
5245: ARRAY
5246: PUSH
5247: FOR_TO
5248: IFFALSE 5279
// AddComConstruct ( AmFactory , 4 , 1 , 2 , rand ( 4 , 6 ) ) ;
5250: LD_INT 239
5252: PPUSH
5253: LD_INT 4
5255: PPUSH
5256: LD_INT 1
5258: PPUSH
5259: LD_INT 2
5261: PPUSH
5262: LD_INT 4
5264: PPUSH
5265: LD_INT 6
5267: PPUSH
5268: CALL_OW 12
5272: PPUSH
5273: CALL_OW 185
5277: GO 5247
5279: POP
5280: POP
// enable ;
5281: ENABLE
// end ;
5282: PPOPN 1
5284: END
// every 0 0$1 trigger attackers >= [ 4 , 5 , 6 , 8 ] [ Difficulty ] do var enemy , attacker ;
5285: LD_EXP 8
5289: PUSH
5290: LD_INT 4
5292: PUSH
5293: LD_INT 5
5295: PUSH
5296: LD_INT 6
5298: PUSH
5299: LD_INT 8
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: PUSH
5308: LD_OWVAR 67
5312: ARRAY
5313: GREATEREQUAL
5314: IFFALSE 5406
5316: GO 5318
5318: DISABLE
5319: LD_INT 0
5321: PPUSH
5322: PPUSH
// begin enable ;
5323: ENABLE
// enemy := Filterallunits ( [ f_side , 3 ] ) ;
5324: LD_ADDR_VAR 0 1
5328: PUSH
5329: LD_INT 22
5331: PUSH
5332: LD_INT 3
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PPUSH
5339: CALL_OW 69
5343: ST_TO_ADDR
// for attacker in UnitFilter ( attackers , [ [ f_ok ] , [ f_linked ] ] ) do
5344: LD_ADDR_VAR 0 2
5348: PUSH
5349: LD_EXP 8
5353: PPUSH
5354: LD_INT 50
5356: PUSH
5357: EMPTY
5358: LIST
5359: PUSH
5360: LD_INT 61
5362: PUSH
5363: EMPTY
5364: LIST
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PPUSH
5370: CALL_OW 72
5374: PUSH
5375: FOR_IN
5376: IFFALSE 5404
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
5378: LD_VAR 0 2
5382: PPUSH
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_VAR 0 2
5392: PPUSH
5393: CALL_OW 74
5397: PPUSH
5398: CALL_OW 115
5402: GO 5375
5404: POP
5405: POP
// end ; end_of_file
5406: PPOPN 2
5408: END
// export function Action ; begin
5409: LD_INT 0
5411: PPUSH
// ingame_video := true ;
5412: LD_ADDR_OWVAR 52
5416: PUSH
5417: LD_INT 1
5419: ST_TO_ADDR
// interface_hidden := true ;
5420: LD_ADDR_OWVAR 54
5424: PUSH
5425: LD_INT 1
5427: ST_TO_ADDR
// ComMoveToArea ( [ Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ] , PeopleStartArea ) ;
5428: LD_EXP 10
5432: PUSH
5433: LD_EXP 11
5437: PUSH
5438: LD_EXP 12
5442: PUSH
5443: LD_EXP 13
5447: PUSH
5448: LD_EXP 14
5452: PUSH
5453: LD_EXP 15
5457: PUSH
5458: LD_EXP 16
5462: PUSH
5463: LD_EXP 17
5467: PUSH
5468: LD_EXP 18
5472: PUSH
5473: LD_EXP 19
5477: PUSH
5478: LD_EXP 20
5482: PUSH
5483: LD_EXP 21
5487: PUSH
5488: LD_EXP 22
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: PPUSH
5508: LD_INT 10
5510: PPUSH
5511: CALL_OW 113
// ComMoveToArea ( Yakotich , YakotichStartArea ) ;
5515: LD_EXP 9
5519: PPUSH
5520: LD_INT 11
5522: PPUSH
5523: CALL_OW 113
// end ;
5527: LD_VAR 0 1
5531: RET
// every 0 0$1 trigger IsInArea ( Yakotich , YakotichStartArea ) do
5532: LD_EXP 9
5536: PPUSH
5537: LD_INT 11
5539: PPUSH
5540: CALL_OW 308
5544: IFFALSE 5611
5546: GO 5548
5548: DISABLE
// begin ComTurnUnit ( Yakotich , Mietek ) ;
5549: LD_EXP 9
5553: PPUSH
5554: LD_EXP 10
5558: PPUSH
5559: CALL_OW 119
// Say ( Yakotich , 3Yak-01 ) ;
5563: LD_EXP 9
5567: PPUSH
5568: LD_STRING 3Yak-01
5570: PPUSH
5571: CALL_OW 88
// ComEnterUnit ( Yakotich , Ovsyenko ) ;
5575: LD_EXP 9
5579: PPUSH
5580: LD_INT 74
5582: PPUSH
5583: CALL_OW 120
// ComEnterUnit ( Mietek , Ovsyenko ) ;
5587: LD_EXP 10
5591: PPUSH
5592: LD_INT 74
5594: PPUSH
5595: CALL_OW 120
// ComEnterUnit ( Boris , Ovsyenko ) ;
5599: LD_EXP 11
5603: PPUSH
5604: LD_INT 74
5606: PPUSH
5607: CALL_OW 120
// end ;
5611: END
// export engs ; export function SikorskiAction ; var x , y , i , tmp , t , engs , un , speaker ; begin
5612: LD_INT 0
5614: PPUSH
5615: PPUSH
5616: PPUSH
5617: PPUSH
5618: PPUSH
5619: PPUSH
5620: PPUSH
5621: PPUSH
5622: PPUSH
// x := 101 ;
5623: LD_ADDR_VAR 0 2
5627: PUSH
5628: LD_INT 101
5630: ST_TO_ADDR
// y := 116 ;
5631: LD_ADDR_VAR 0 3
5635: PUSH
5636: LD_INT 116
5638: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 30 ) ;
5639: LD_VAR 0 2
5643: PPUSH
5644: LD_VAR 0 3
5648: PPUSH
5649: LD_INT 1
5651: PPUSH
5652: LD_INT 30
5654: NEG
5655: PPUSH
5656: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
5660: LD_VAR 0 2
5664: PPUSH
5665: LD_VAR 0 3
5669: PPUSH
5670: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Sikorski ;
5674: LD_ADDR_VAR 0 5
5678: PUSH
5679: LD_INT 22
5681: PUSH
5682: LD_INT 4
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 21
5691: PUSH
5692: LD_INT 1
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: PPUSH
5703: CALL_OW 69
5707: PUSH
5708: LD_EXP 49
5712: DIFF
5713: ST_TO_ADDR
// AddComTurnXY ( tmp , 111 , 125 ) ;
5714: LD_VAR 0 5
5718: PPUSH
5719: LD_INT 111
5721: PPUSH
5722: LD_INT 125
5724: PPUSH
5725: CALL_OW 178
// wait ( 0 0$02 ) ;
5729: LD_INT 70
5731: PPUSH
5732: CALL_OW 67
// AddComMoveXY ( Sikorski , 105 , 111 ) ;
5736: LD_EXP 49
5740: PPUSH
5741: LD_INT 105
5743: PPUSH
5744: LD_INT 111
5746: PPUSH
5747: CALL_OW 171
// ComAgressiveMove ( tmp , 108 , 117 ) ;
5751: LD_VAR 0 5
5755: PPUSH
5756: LD_INT 108
5758: PPUSH
5759: LD_INT 117
5761: PPUSH
5762: CALL_OW 114
// Say ( Sikorski , 3Sik-01 ) ;
5766: LD_EXP 49
5770: PPUSH
5771: LD_STRING 3Sik-01
5773: PPUSH
5774: CALL_OW 88
// Say ( Yakotich , 3Yak-08 ) ;
5778: LD_EXP 9
5782: PPUSH
5783: LD_STRING 3Yak-08
5785: PPUSH
5786: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
5790: LD_INT 35
5792: PPUSH
5793: CALL_OW 67
// until See ( 3 , Sikorski ) ;
5797: LD_INT 3
5799: PPUSH
5800: LD_EXP 49
5804: PPUSH
5805: CALL_OW 292
5809: IFFALSE 5790
// un := UnitsInside ( NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , Sikorski ) ) [ 1 ] ;
5811: LD_ADDR_VAR 0 8
5815: PUSH
5816: LD_INT 30
5818: PUSH
5819: LD_INT 31
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PPUSH
5826: CALL_OW 69
5830: PPUSH
5831: LD_EXP 49
5835: PPUSH
5836: CALL_OW 74
5840: PPUSH
5841: CALL_OW 313
5845: PUSH
5846: LD_INT 1
5848: ARRAY
5849: ST_TO_ADDR
// AddComAttackUnit ( un , Sikorski ) ;
5850: LD_VAR 0 8
5854: PPUSH
5855: LD_EXP 49
5859: PPUSH
5860: CALL_OW 175
// wait ( 0 0$3 ) ;
5864: LD_INT 105
5866: PPUSH
5867: CALL_OW 67
// MineExplosion ( 111 , 116 , 1 ) ;
5871: LD_INT 111
5873: PPUSH
5874: LD_INT 116
5876: PPUSH
5877: LD_INT 1
5879: PPUSH
5880: CALL_OW 453
// repeat wait ( 0 0$01 ) ;
5884: LD_INT 35
5886: PPUSH
5887: CALL_OW 67
// until IsDying ( un ) ;
5891: LD_VAR 0 8
5895: PPUSH
5896: CALL_OW 303
5900: IFFALSE 5884
// DoNotAttack ( 3 , Sikorski ) ;
5902: LD_INT 3
5904: PPUSH
5905: LD_EXP 49
5909: PPUSH
5910: CALL_OW 471
// AddComMoveXY ( Sikorski , 110 , 120 ) ;
5914: LD_EXP 49
5918: PPUSH
5919: LD_INT 110
5921: PPUSH
5922: LD_INT 120
5924: PPUSH
5925: CALL_OW 171
// AddComAttackUnit ( Sikorski , Ovsyenko ) ;
5929: LD_EXP 49
5933: PPUSH
5934: LD_INT 74
5936: PPUSH
5937: CALL_OW 175
// Say ( Yakotich , 3Yak-09 ) ;
5941: LD_EXP 9
5945: PPUSH
5946: LD_STRING 3Yak-09
5948: PPUSH
5949: CALL_OW 88
// ComExitBuilding ( [ f_side , 3 ] ) ;
5953: LD_INT 22
5955: PUSH
5956: LD_INT 3
5958: PUSH
5959: EMPTY
5960: LIST
5961: LIST
5962: PPUSH
5963: CALL_OW 122
// AddComAgressiveMove ( [ f_side , 3 ] , 106 , 114 ) ;
5967: LD_INT 22
5969: PUSH
5970: LD_INT 3
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PPUSH
5977: LD_INT 106
5979: PPUSH
5980: LD_INT 114
5982: PPUSH
5983: CALL_OW 174
// ComMoveXY ( tmp , 109 , 119 ) ;
5987: LD_VAR 0 5
5991: PPUSH
5992: LD_INT 109
5994: PPUSH
5995: LD_INT 119
5997: PPUSH
5998: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
6002: LD_VAR 0 5
6006: PPUSH
6007: LD_INT 111
6009: PPUSH
6010: LD_INT 125
6012: PPUSH
6013: CALL_OW 178
// ComExitBuilding ( Yakotich ) ;
6017: LD_EXP 9
6021: PPUSH
6022: CALL_OW 122
// AddComAttackUnit ( Yakotich , Sikorski ) ;
6026: LD_EXP 9
6030: PPUSH
6031: LD_EXP 49
6035: PPUSH
6036: CALL_OW 175
// Say ( Sikorski , 3Sik-02 ) ;
6040: LD_EXP 49
6044: PPUSH
6045: LD_STRING 3Sik-02
6047: PPUSH
6048: CALL_OW 88
// wait ( 0 0$2 ) ;
6052: LD_INT 70
6054: PPUSH
6055: CALL_OW 67
// SayEffect ( 3smrtsikora ) ;
6059: LD_STRING 3smrtsikora
6061: PPUSH
6062: CALL_OW 96
// KillUnit ( Sikorski ) ;
6066: LD_EXP 49
6070: PPUSH
6071: CALL_OW 66
// sikorski_dead = true ;
6075: LD_ADDR_EXP 79
6079: PUSH
6080: LD_INT 1
6082: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6083: LD_INT 35
6085: PPUSH
6086: CALL_OW 67
// engs := FilterAllUnits ( [ [ f_class , 2 ] , [ f_side , 3 ] ] ) ;
6090: LD_ADDR_VAR 0 7
6094: PUSH
6095: LD_INT 25
6097: PUSH
6098: LD_INT 2
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PUSH
6105: LD_INT 22
6107: PUSH
6108: LD_INT 3
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: PPUSH
6119: CALL_OW 69
6123: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
6124: LD_VAR 0 7
6128: PPUSH
6129: CALL_OW 122
// for i = 1 to engs do
6133: LD_ADDR_VAR 0 4
6137: PUSH
6138: DOUBLE
6139: LD_INT 1
6141: DEC
6142: ST_TO_ADDR
6143: LD_VAR 0 7
6147: PUSH
6148: FOR_TO
6149: IFFALSE 6189
// AddComEnterUnit ( engs [ i ] , FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) [ i ] ) ;
6151: LD_VAR 0 7
6155: PUSH
6156: LD_VAR 0 4
6160: ARRAY
6161: PPUSH
6162: LD_INT 34
6164: PUSH
6165: LD_INT 51
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PPUSH
6172: CALL_OW 69
6176: PUSH
6177: LD_VAR 0 4
6181: ARRAY
6182: PPUSH
6183: CALL_OW 180
6187: GO 6148
6189: POP
6190: POP
// AddComTransport ( Anton , Ovsyenko , mat_siberit ) ;
6191: LD_EXP 27
6195: PPUSH
6196: LD_INT 74
6198: PPUSH
6199: LD_INT 3
6201: PPUSH
6202: CALL_OW 211
// AddComWait ( Boris , 0 0$1 ) ;
6206: LD_EXP 11
6210: PPUSH
6211: LD_INT 35
6213: PPUSH
6214: CALL_OW 202
// AddComTransport ( Boris , Ovsyenko , mat_cans ) ;
6218: LD_EXP 11
6222: PPUSH
6223: LD_INT 74
6225: PPUSH
6226: LD_INT 1
6228: PPUSH
6229: CALL_OW 211
// AddComMoveXY ( engs , 147 , 220 ) ;
6233: LD_VAR 0 7
6237: PPUSH
6238: LD_INT 147
6240: PPUSH
6241: LD_INT 220
6243: PPUSH
6244: CALL_OW 171
// AddComExitVehicle ( engs ) ;
6248: LD_VAR 0 7
6252: PPUSH
6253: CALL_OW 181
// AddComMoveXY ( Yakotich , 148 , 208 ) ;
6257: LD_EXP 9
6261: PPUSH
6262: LD_INT 148
6264: PPUSH
6265: LD_INT 208
6267: PPUSH
6268: CALL_OW 171
// un := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
6272: LD_ADDR_VAR 0 8
6276: PUSH
6277: LD_INT 22
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: CALL_OW 69
6305: ST_TO_ADDR
// ComExitBuilding ( un ) ;
6306: LD_VAR 0 8
6310: PPUSH
6311: CALL_OW 122
// ComExitBuilding ( Grigori ) ;
6315: LD_EXP 26
6319: PPUSH
6320: CALL_OW 122
// AddComMoveXY ( un , 148 , 208 ) ;
6324: LD_VAR 0 8
6328: PPUSH
6329: LD_INT 148
6331: PPUSH
6332: LD_INT 208
6334: PPUSH
6335: CALL_OW 171
// AddComMoveXY ( Grigori , 148 , 208 ) ;
6339: LD_EXP 26
6343: PPUSH
6344: LD_INT 148
6346: PPUSH
6347: LD_INT 208
6349: PPUSH
6350: CALL_OW 171
// wait ( 5 ) ;
6354: LD_INT 5
6356: PPUSH
6357: CALL_OW 67
// Say ( Jilian , 3Rand-01 ) ;
6361: LD_EXP 58
6365: PPUSH
6366: LD_STRING 3Rand-01
6368: PPUSH
6369: CALL_OW 88
// ComMoveToArea ( SikorskiTeam , OvsyenkoArea ) ;
6373: LD_EXP 4
6377: PPUSH
6378: LD_INT 6
6380: PPUSH
6381: CALL_OW 113
// wait ( 0 0$7 ) ;
6385: LD_INT 245
6387: PPUSH
6388: CALL_OW 67
// t := [ [ 104 , 117 ] , [ 115 , 123 ] , [ 114 , 126 ] , [ 111 , 122 ] , [ 112 , 126 ] , [ 117 , 130 ] , [ 106 , 127 ] , [ 111 , 117 ] , [ 98 , 119 ] , [ 116 , 131 ] , [ 109 , 129 ] , [ 100 , 113 ] ] ;
6392: LD_ADDR_VAR 0 6
6396: PUSH
6397: LD_INT 104
6399: PUSH
6400: LD_INT 117
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 115
6409: PUSH
6410: LD_INT 123
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PUSH
6417: LD_INT 114
6419: PUSH
6420: LD_INT 126
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: PUSH
6427: LD_INT 111
6429: PUSH
6430: LD_INT 122
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 112
6439: PUSH
6440: LD_INT 126
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_INT 117
6449: PUSH
6450: LD_INT 130
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PUSH
6457: LD_INT 106
6459: PUSH
6460: LD_INT 127
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PUSH
6467: LD_INT 111
6469: PUSH
6470: LD_INT 117
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PUSH
6477: LD_INT 98
6479: PUSH
6480: LD_INT 119
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 116
6489: PUSH
6490: LD_INT 131
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 109
6499: PUSH
6500: LD_INT 129
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 100
6509: PUSH
6510: LD_INT 113
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: ST_TO_ADDR
// for i in t do
6531: LD_ADDR_VAR 0 4
6535: PUSH
6536: LD_VAR 0 6
6540: PUSH
6541: FOR_IN
6542: IFFALSE 6578
// begin wait ( 0 0$0.3 ) ;
6544: LD_INT 10
6546: PPUSH
6547: CALL_OW 67
// MineExplosion ( i [ 1 ] , i [ 2 ] , 1 ) ;
6551: LD_VAR 0 4
6555: PUSH
6556: LD_INT 1
6558: ARRAY
6559: PPUSH
6560: LD_VAR 0 4
6564: PUSH
6565: LD_INT 2
6567: ARRAY
6568: PPUSH
6569: LD_INT 1
6571: PPUSH
6572: CALL_OW 453
// end ;
6576: GO 6541
6578: POP
6579: POP
// wait ( 0 0$4 ) ;
6580: LD_INT 140
6582: PPUSH
6583: CALL_OW 67
// Say ( Turner , 3Rand-02 ) ;
6587: LD_EXP 59
6591: PPUSH
6592: LD_STRING 3Rand-02
6594: PPUSH
6595: CALL_OW 88
// wait ( 0 0$5 ) ;
6599: LD_INT 175
6601: PPUSH
6602: CALL_OW 67
// wait ( 0 0$2 ) ;
6606: LD_INT 70
6608: PPUSH
6609: CALL_OW 67
// SayRadio ( Yakotich , 3Yak-10 ) ;
6613: LD_EXP 9
6617: PPUSH
6618: LD_STRING 3Yak-10
6620: PPUSH
6621: CALL_OW 94
// SetLives ( Ovsyenko , 400 ) ;
6625: LD_INT 74
6627: PPUSH
6628: LD_INT 400
6630: PPUSH
6631: CALL_OW 234
// Cutscene_ended = true ;
6635: LD_ADDR_EXP 69
6639: PUSH
6640: LD_INT 1
6642: ST_TO_ADDR
// CenterOnXY ( 148 , 208 ) ;
6643: LD_INT 148
6645: PPUSH
6646: LD_INT 208
6648: PPUSH
6649: CALL_OW 84
// SayRadio ( Platonov , 3Plat-03 ) ;
6653: LD_EXP 63
6657: PPUSH
6658: LD_STRING 3Plat-03
6660: PPUSH
6661: CALL_OW 94
// SayRadio ( Platonov , 3Plat-04 ) ;
6665: LD_EXP 63
6669: PPUSH
6670: LD_STRING 3Plat-04
6672: PPUSH
6673: CALL_OW 94
// SayRadio ( Platonov , 3Plat-05 ) ;
6677: LD_EXP 63
6681: PPUSH
6682: LD_STRING 3Plat-05
6684: PPUSH
6685: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-11 ) ;
6689: LD_EXP 9
6693: PPUSH
6694: LD_STRING 3Yak-11
6696: PPUSH
6697: CALL_OW 94
// repeat Wait ( 0 0$1 ) until not IsInUnit ( Boris ) and not IsInUnit ( Anton ) ;
6701: LD_INT 35
6703: PPUSH
6704: CALL_OW 67
6708: LD_EXP 11
6712: PPUSH
6713: CALL_OW 310
6717: NOT
6718: PUSH
6719: LD_EXP 27
6723: PPUSH
6724: CALL_OW 310
6728: NOT
6729: AND
6730: IFFALSE 6701
// tmp := [ ] ;
6732: LD_ADDR_VAR 0 5
6736: PUSH
6737: EMPTY
6738: ST_TO_ADDR
// start_ended = true ;
6739: LD_ADDR_EXP 71
6743: PUSH
6744: LD_INT 1
6746: ST_TO_ADDR
// end ;
6747: LD_VAR 0 1
6751: RET
// every 0 0$1 trigger IsInUnit ( Yakotich ) do
6752: LD_EXP 9
6756: PPUSH
6757: CALL_OW 310
6761: IFFALSE 7070
6763: GO 6765
6765: DISABLE
// begin Say ( Yakotich , 3Yak-02 ) ;
6766: LD_EXP 9
6770: PPUSH
6771: LD_STRING 3Yak-02
6773: PPUSH
6774: CALL_OW 88
// Say ( Dimitri , 3Dim-01 ) ;
6778: LD_EXP 23
6782: PPUSH
6783: LD_STRING 3Dim-01
6785: PPUSH
6786: CALL_OW 88
// Say ( Yakotich , 3Yak-03 ) ;
6790: LD_EXP 9
6794: PPUSH
6795: LD_STRING 3Yak-03
6797: PPUSH
6798: CALL_OW 88
// Say ( Dimitri , 3Dim-02 ) ;
6802: LD_EXP 23
6806: PPUSH
6807: LD_STRING 3Dim-02
6809: PPUSH
6810: CALL_OW 88
// SayRadio ( Yakotich , 3Yak-04 ) ;
6814: LD_EXP 9
6818: PPUSH
6819: LD_STRING 3Yak-04
6821: PPUSH
6822: CALL_OW 94
// SayRadio ( Platonov , 3Plat-01 ) ;
6826: LD_EXP 63
6830: PPUSH
6831: LD_STRING 3Plat-01
6833: PPUSH
6834: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-05 ) ;
6838: LD_EXP 9
6842: PPUSH
6843: LD_STRING 3Yak-05
6845: PPUSH
6846: CALL_OW 94
// SayRadio ( Platonov , 3Plat-02 ) ;
6850: LD_EXP 63
6854: PPUSH
6855: LD_STRING 3Plat-02
6857: PPUSH
6858: CALL_OW 94
// Say ( Dimitri , 3Dim-03 ) ;
6862: LD_EXP 23
6866: PPUSH
6867: LD_STRING 3Dim-03
6869: PPUSH
6870: CALL_OW 88
// Say ( Dimitri , 3Dim-04 ) ;
6874: LD_EXP 23
6878: PPUSH
6879: LD_STRING 3Dim-04
6881: PPUSH
6882: CALL_OW 88
// Say ( Yakotich , 3Yak-06 ) ;
6886: LD_EXP 9
6890: PPUSH
6891: LD_STRING 3Yak-06
6893: PPUSH
6894: CALL_OW 88
// Say ( Dimitri , 3Dim-05 ) ;
6898: LD_EXP 23
6902: PPUSH
6903: LD_STRING 3Dim-05
6905: PPUSH
6906: CALL_OW 88
// Say ( Yakotich , 3Yak-07 ) ;
6910: LD_EXP 9
6914: PPUSH
6915: LD_STRING 3Yak-07
6917: PPUSH
6918: CALL_OW 88
// Wait ( 0 0$03 ) ;
6922: LD_INT 105
6924: PPUSH
6925: CALL_OW 67
// InitSikorskiTeam ;
6929: CALL 2780 0 0
// SikorskiAction ;
6933: CALL 5612 0 0
// ChangeMissionObjectives ( o1 ) ;
6937: LD_STRING o1
6939: PPUSH
6940: CALL_OW 337
// SetSide ( [ Ovsyenko , OB2 , OB3 , oil , eoil1 , eoil2 ] , 4 ) ;
6944: LD_INT 74
6946: PUSH
6947: LD_INT 79
6949: PUSH
6950: LD_INT 78
6952: PUSH
6953: LD_INT 76
6955: PUSH
6956: LD_INT 85
6958: PUSH
6959: LD_INT 86
6961: PUSH
6962: EMPTY
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: PPUSH
6970: LD_INT 4
6972: PPUSH
6973: CALL_OW 235
// ComEnterUnit ( Cyrus , OB3 ) ;
6977: LD_EXP 53
6981: PPUSH
6982: LD_INT 78
6984: PPUSH
6985: CALL_OW 120
// ComEnterUnit ( Bobby , OB2 ) ;
6989: LD_EXP 52
6993: PPUSH
6994: LD_INT 79
6996: PPUSH
6997: CALL_OW 120
// SetClass ( [ Jilian , Turner ] , 2 ) ;
7001: LD_EXP 58
7005: PUSH
7006: LD_EXP 59
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PPUSH
7015: LD_INT 2
7017: PPUSH
7018: CALL_OW 336
// ComWalk ( [ Jilian , Turner , McCreery , Lynch , Walker , Truman , Gary ] ) ;
7022: LD_EXP 58
7026: PUSH
7027: LD_EXP 59
7031: PUSH
7032: LD_EXP 56
7036: PUSH
7037: LD_EXP 55
7041: PUSH
7042: LD_EXP 57
7046: PUSH
7047: LD_EXP 51
7051: PUSH
7052: LD_EXP 54
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: PPUSH
7066: CALL_OW 138
// end ;
7070: END
// every 0 0$1 trigger start_ended = true do
7071: LD_EXP 71
7075: PUSH
7076: LD_INT 1
7078: EQUAL
7079: IFFALSE 7151
7081: GO 7083
7083: DISABLE
// begin Say ( Yakotich , 3Yak-12 ) ;
7084: LD_EXP 9
7088: PPUSH
7089: LD_STRING 3Yak-12
7091: PPUSH
7092: CALL_OW 88
// Say ( Vasilij , 3Vas-01 ) ;
7096: LD_EXP 12
7100: PPUSH
7101: LD_STRING 3Vas-01
7103: PPUSH
7104: CALL_OW 88
// Say ( Dimitri , 3Dim-06 ) ;
7108: LD_EXP 23
7112: PPUSH
7113: LD_STRING 3Dim-06
7115: PPUSH
7116: CALL_OW 88
// Say ( Dimitri , 3Dim-07 ) ;
7120: LD_EXP 23
7124: PPUSH
7125: LD_STRING 3Dim-07
7127: PPUSH
7128: CALL_OW 88
// Say ( Vasilij , 3Vas-02 ) ;
7132: LD_EXP 12
7136: PPUSH
7137: LD_STRING 3Vas-02
7139: PPUSH
7140: CALL_OW 88
// ChangeMissionObjectives ( rocket ) ;
7144: LD_STRING rocket
7146: PPUSH
7147: CALL_OW 337
// end ;
7151: END
// every 0 0$1 trigger GetSide ( Ovsyenko ) = 3 and start_ended = true do
7152: LD_INT 74
7154: PPUSH
7155: CALL_OW 255
7159: PUSH
7160: LD_INT 3
7162: EQUAL
7163: PUSH
7164: LD_EXP 71
7168: PUSH
7169: LD_INT 1
7171: EQUAL
7172: AND
7173: IFFALSE 7355
7175: GO 7177
7177: DISABLE
// begin DialogueOn ;
7178: CALL_OW 6
// InGameOn ;
7182: CALL_OW 8
// SayRadio ( Yakotich , 3Yak-13 ) ;
7186: LD_EXP 9
7190: PPUSH
7191: LD_STRING 3Yak-13
7193: PPUSH
7194: CALL_OW 94
// SayRadio ( Platonov , 3Plat-06 ) ;
7198: LD_EXP 63
7202: PPUSH
7203: LD_STRING 3Plat-06
7205: PPUSH
7206: CALL_OW 94
// SayRadio ( Platonov , 3Plat-07 ) ;
7210: LD_EXP 63
7214: PPUSH
7215: LD_STRING 3Plat-07
7217: PPUSH
7218: CALL_OW 94
// Say ( Mietek , 3Ryn-01 ) ;
7222: LD_EXP 10
7226: PPUSH
7227: LD_STRING 3Ryn-01
7229: PPUSH
7230: CALL_OW 88
// CenterNowOnXY ( 109 , 72 ) ;
7234: LD_INT 109
7236: PPUSH
7237: LD_INT 72
7239: PPUSH
7240: CALL_OW 86
// RevealFogArea ( 3 , EastPassage ) ;
7244: LD_INT 3
7246: PPUSH
7247: LD_INT 13
7249: PPUSH
7250: CALL_OW 332
// Say ( Mietek , 3Ryn-02 ) ;
7254: LD_EXP 10
7258: PPUSH
7259: LD_STRING 3Ryn-02
7261: PPUSH
7262: CALL_OW 88
// CenterNowOnXY ( 78 , 17 ) ;
7266: LD_INT 78
7268: PPUSH
7269: LD_INT 17
7271: PPUSH
7272: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
7276: LD_INT 3
7278: PPUSH
7279: LD_INT 14
7281: PPUSH
7282: CALL_OW 332
// Say ( Mietek , 3Ryn-03 ) ;
7286: LD_EXP 10
7290: PPUSH
7291: LD_STRING 3Ryn-03
7293: PPUSH
7294: CALL_OW 88
// Say ( Yakotich , 3Yak-14 ) ;
7298: LD_EXP 9
7302: PPUSH
7303: LD_STRING 3Yak-14
7305: PPUSH
7306: CALL_OW 88
// ChangeMissionObjectives ( [ o2a , o2b , o2c ] [ Difficulty ] ) ;
7310: LD_STRING o2a
7312: PUSH
7313: LD_STRING o2b
7315: PUSH
7316: LD_STRING o2c
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: LIST
7323: PUSH
7324: LD_OWVAR 67
7328: ARRAY
7329: PPUSH
7330: CALL_OW 337
// SetTech ( 86 , 3 , 1 ) ;
7334: LD_INT 86
7336: PPUSH
7337: LD_INT 3
7339: PPUSH
7340: LD_INT 1
7342: PPUSH
7343: CALL_OW 322
// DialogueOff ;
7347: CALL_OW 7
// InGameOff ;
7351: CALL_OW 9
// end ;
7355: END
// every 0 0$1 trigger ovsyenko_captured = true do
7356: LD_EXP 70
7360: PUSH
7361: LD_INT 1
7363: EQUAL
7364: IFFALSE 7702
7366: GO 7368
7368: DISABLE
// begin Wait ( 15 15$0 ) ;
7369: LD_INT 31500
7371: PPUSH
7372: CALL_OW 67
// InitBurlak ;
7376: CALL 2164 0 0
// DialogueOn ;
7380: CALL_OW 6
// CenterNowOnXY ( 155 , 235 ) ;
7384: LD_INT 155
7386: PPUSH
7387: LD_INT 235
7389: PPUSH
7390: CALL_OW 86
// SayRadio ( Burlak , 3Bur-01 ) ;
7394: LD_EXP 33
7398: PPUSH
7399: LD_STRING 3Bur-01
7401: PPUSH
7402: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-15 ) ;
7406: LD_EXP 9
7410: PPUSH
7411: LD_STRING 3Yak-15
7413: PPUSH
7414: CALL_OW 94
// SayRadio ( Burlak , 3Bur-02 ) ;
7418: LD_EXP 33
7422: PPUSH
7423: LD_STRING 3Bur-02
7425: PPUSH
7426: CALL_OW 94
// CenterNowOnUnits ( BurlakVeh ) ;
7430: LD_EXP 41
7434: PPUSH
7435: CALL_OW 87
// SayRadio ( Vasilij , 3Vas-Flame-01 ) ;
7439: LD_EXP 12
7443: PPUSH
7444: LD_STRING 3Vas-Flame-01
7446: PPUSH
7447: CALL_OW 94
// SayRadio ( Burlak , 3Bur-Flame-01 ) ;
7451: LD_EXP 33
7455: PPUSH
7456: LD_STRING 3Bur-Flame-01
7458: PPUSH
7459: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-Flame-01 ) ;
7463: LD_EXP 9
7467: PPUSH
7468: LD_STRING 3Yak-Flame-01
7470: PPUSH
7471: CALL_OW 94
// SayRadio ( Burlak , 3Bur-Flame-02 ) ;
7475: LD_EXP 33
7479: PPUSH
7480: LD_STRING 3Bur-Flame-02
7482: PPUSH
7483: CALL_OW 94
// SayRadio ( Vasilij , 3Vas-Flame-02 ) ;
7487: LD_EXP 12
7491: PPUSH
7492: LD_STRING 3Vas-Flame-02
7494: PPUSH
7495: CALL_OW 94
// ChangeMissionObjectives ( o3 ) ;
7499: LD_STRING o3
7501: PPUSH
7502: CALL_OW 337
// DialogueOff ;
7506: CALL_OW 7
// Wait ( 0 0$15 ) ;
7510: LD_INT 525
7512: PPUSH
7513: CALL_OW 67
// DialogueOn ;
7517: CALL_OW 6
// Say ( Petrosyan , 3Pty-01 ) ;
7521: LD_EXP 39
7525: PPUSH
7526: LD_STRING 3Pty-01
7528: PPUSH
7529: CALL_OW 88
// Say ( Yakotich , 3Yak-16 ) ;
7533: LD_EXP 9
7537: PPUSH
7538: LD_STRING 3Yak-16
7540: PPUSH
7541: CALL_OW 88
// Say ( Platonov , 3Plat-08 ) ;
7545: LD_EXP 63
7549: PPUSH
7550: LD_STRING 3Plat-08
7552: PPUSH
7553: CALL_OW 88
// ChangeMissionObjectives ( o4 ) ;
7557: LD_STRING o4
7559: PPUSH
7560: CALL_OW 337
// SetRestrict ( 11 , 3 , 1 ) ;
7564: LD_INT 11
7566: PPUSH
7567: LD_INT 3
7569: PPUSH
7570: LD_INT 1
7572: PPUSH
7573: CALL_OW 324
// SetRestrict ( 14 , 3 , 1 ) ;
7577: LD_INT 14
7579: PPUSH
7580: LD_INT 3
7582: PPUSH
7583: LD_INT 1
7585: PPUSH
7586: CALL_OW 324
// SetRestrict ( 28 , 3 , 1 ) ;
7590: LD_INT 28
7592: PPUSH
7593: LD_INT 3
7595: PPUSH
7596: LD_INT 1
7598: PPUSH
7599: CALL_OW 324
// DialogueOff ;
7603: CALL_OW 7
// Wait ( 1 1$0 ) ;
7607: LD_INT 2100
7609: PPUSH
7610: CALL_OW 67
// DialogueOn ;
7614: CALL_OW 6
// Say ( Petrosyan , 3Pty-Comp-01 ) ;
7618: LD_EXP 39
7622: PPUSH
7623: LD_STRING 3Pty-Comp-01
7625: PPUSH
7626: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-01 ) ;
7630: LD_EXP 33
7634: PPUSH
7635: LD_STRING 3Bur-Comp-01
7637: PPUSH
7638: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-02 ) ;
7642: LD_EXP 39
7646: PPUSH
7647: LD_STRING 3Pty-Comp-02
7649: PPUSH
7650: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-02 ) ;
7654: LD_EXP 33
7658: PPUSH
7659: LD_STRING 3Bur-Comp-02
7661: PPUSH
7662: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-03 ) ;
7666: LD_EXP 39
7670: PPUSH
7671: LD_STRING 3Pty-Comp-03
7673: PPUSH
7674: CALL_OW 88
// SetRestrict ( 12 , 3 , 1 ) ;
7678: LD_INT 12
7680: PPUSH
7681: LD_INT 3
7683: PPUSH
7684: LD_INT 1
7686: PPUSH
7687: CALL_OW 324
// ChangeMissionObjectives ( o5 ) ;
7691: LD_STRING o5
7693: PPUSH
7694: CALL_OW 337
// DialogueOff ;
7698: CALL_OW 7
// end ;
7702: END
// every 0 0$1 trigger everything_researched = true and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 0 and siberit_excavated = true do
7703: LD_EXP 80
7707: PUSH
7708: LD_INT 1
7710: EQUAL
7711: PUSH
7712: LD_INT 22
7714: PUSH
7715: LD_INT 1
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: LD_INT 21
7724: PUSH
7725: LD_INT 1
7727: PUSH
7728: EMPTY
7729: LIST
7730: LIST
7731: PUSH
7732: EMPTY
7733: LIST
7734: LIST
7735: PPUSH
7736: CALL_OW 69
7740: PUSH
7741: LD_INT 0
7743: LESSEQUAL
7744: AND
7745: PUSH
7746: LD_EXP 78
7750: PUSH
7751: LD_INT 1
7753: EQUAL
7754: AND
7755: IFFALSE 7772
7757: GO 7759
7759: DISABLE
// begin end_of_the_mission = true ;
7760: LD_ADDR_EXP 83
7764: PUSH
7765: LD_INT 1
7767: ST_TO_ADDR
// Ending ;
7768: CALL 7773 0 0
// end ;
7772: END
// export function Ending ; begin
7773: LD_INT 0
7775: PPUSH
// CenterOnUnits ( Yakotich ) ;
7776: LD_EXP 9
7780: PPUSH
7781: CALL_OW 85
// InGameOn ;
7785: CALL_OW 8
// SayRadio ( Platonov , 3Plat-09 ) ;
7789: LD_EXP 63
7793: PPUSH
7794: LD_STRING 3Plat-09
7796: PPUSH
7797: CALL_OW 94
// SayRadio ( Platonov , 3Plat-10 ) ;
7801: LD_EXP 63
7805: PPUSH
7806: LD_STRING 3Plat-10
7808: PPUSH
7809: CALL_OW 94
// SayRadio ( Burlak , 3Bur-03 ) ;
7813: LD_EXP 33
7817: PPUSH
7818: LD_STRING 3Bur-03
7820: PPUSH
7821: CALL_OW 94
// SetSide ( [ Burlak , Petrosyan , Dolgov , Karamazov , Titov , Gleb , Petrovova , Lipshchin ] , 6 ) ;
7825: LD_EXP 33
7829: PUSH
7830: LD_EXP 39
7834: PUSH
7835: LD_EXP 40
7839: PUSH
7840: LD_EXP 34
7844: PUSH
7845: LD_EXP 38
7849: PUSH
7850: LD_EXP 37
7854: PUSH
7855: LD_EXP 35
7859: PUSH
7860: LD_EXP 36
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: PPUSH
7875: LD_INT 6
7877: PPUSH
7878: CALL_OW 235
// ComMoveToArea ( [ Burlak , Petrosyan , Dolgov , Karamazov , Titov , Gleb , Petrovova , Lipshchin ] , ExitArea ) ;
7882: LD_EXP 33
7886: PUSH
7887: LD_EXP 39
7891: PUSH
7892: LD_EXP 40
7896: PUSH
7897: LD_EXP 34
7901: PUSH
7902: LD_EXP 38
7906: PUSH
7907: LD_EXP 37
7911: PUSH
7912: LD_EXP 35
7916: PUSH
7917: LD_EXP 36
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: PPUSH
7932: LD_INT 3
7934: PPUSH
7935: CALL_OW 113
// SayRadio ( Platonov , 3Plat-11 ) ;
7939: LD_EXP 63
7943: PPUSH
7944: LD_STRING 3Plat-11
7946: PPUSH
7947: CALL_OW 94
// SayRadio ( Platonov , 3Plat-12 ) ;
7951: LD_EXP 63
7955: PPUSH
7956: LD_STRING 3Plat-12
7958: PPUSH
7959: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-17 ) ;
7963: LD_EXP 9
7967: PPUSH
7968: LD_STRING 3Yak-17
7970: PPUSH
7971: CALL_OW 94
// Say ( Yakotich , 3Yak-18 ) ;
7975: LD_EXP 9
7979: PPUSH
7980: LD_STRING 3Yak-18
7982: PPUSH
7983: CALL_OW 88
// Say ( Dimitri , 3Dim-08 ) ;
7987: LD_EXP 23
7991: PPUSH
7992: LD_STRING 3Dim-08
7994: PPUSH
7995: CALL_OW 88
// InGameOff ;
7999: CALL_OW 9
// if weapon_builded = false then
8003: LD_EXP 84
8007: PUSH
8008: LD_INT 0
8010: EQUAL
8011: IFFALSE 8020
// SetAchievement ( ACH_NEW_WEAPONS ) ;
8013: LD_STRING ACH_NEW_WEAPONS
8015: PPUSH
8016: CALL_OW 543
// AddMedal ( SibExcavated , 1 ) ;
8020: LD_STRING SibExcavated
8022: PPUSH
8023: LD_INT 1
8025: PPUSH
8026: CALL_OW 101
// if IsOk ( BurlakVeh ) then
8030: LD_EXP 41
8034: PPUSH
8035: CALL_OW 302
8039: IFFALSE 8053
// AddMedal ( FlameSaved , 1 ) else
8041: LD_STRING FlameSaved
8043: PPUSH
8044: LD_INT 1
8046: PPUSH
8047: CALL_OW 101
8051: GO 8064
// AddMedal ( FlameSaved , - 1 ) ;
8053: LD_STRING FlameSaved
8055: PPUSH
8056: LD_INT 1
8058: NEG
8059: PPUSH
8060: CALL_OW 101
// if crane_researched = true and buldozer_researched = true and lab_captured = true and prediction_researched = true and rocket_researched = true then
8064: LD_EXP 82
8068: PUSH
8069: LD_INT 1
8071: EQUAL
8072: PUSH
8073: LD_EXP 76
8077: PUSH
8078: LD_INT 1
8080: EQUAL
8081: AND
8082: PUSH
8083: LD_EXP 73
8087: PUSH
8088: LD_INT 1
8090: EQUAL
8091: AND
8092: PUSH
8093: LD_EXP 75
8097: PUSH
8098: LD_INT 1
8100: EQUAL
8101: AND
8102: PUSH
8103: LD_EXP 74
8107: PUSH
8108: LD_INT 1
8110: EQUAL
8111: AND
8112: IFFALSE 8126
// AddMedal ( Secondary , 1 ) else
8114: LD_STRING Secondary
8116: PPUSH
8117: LD_INT 1
8119: PPUSH
8120: CALL_OW 101
8124: GO 8137
// AddMedal ( Secondary , - 1 ) ;
8126: LD_STRING Secondary
8128: PPUSH
8129: LD_INT 1
8131: NEG
8132: PPUSH
8133: CALL_OW 101
// GiveMedals ( Medals ) ;
8137: LD_STRING Medals
8139: PPUSH
8140: CALL_OW 102
// if IsOk ( BurlakVeh ) then
8144: LD_EXP 41
8148: PPUSH
8149: CALL_OW 302
8153: IFFALSE 8165
// SaveVariable ( 1 , 03_FlameSaved ) ;
8155: LD_INT 1
8157: PPUSH
8158: LD_STRING 03_FlameSaved
8160: PPUSH
8161: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
8165: LD_INT 22
8167: PUSH
8168: LD_INT 3
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: PUSH
8175: LD_INT 23
8177: PUSH
8178: LD_INT 3
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: PUSH
8185: LD_INT 21
8187: PUSH
8188: LD_INT 1
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: PPUSH
8200: CALL_OW 69
8204: PUSH
8205: LD_INT 22
8207: PUSH
8208: LD_INT 6
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: LD_INT 23
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PUSH
8225: LD_INT 21
8227: PUSH
8228: LD_INT 1
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: AND
8245: PPUSH
8246: CALL_OW 43
// SaveCharacters ( Yakotich , 03_Yakotich ) ;
8250: LD_EXP 9
8254: PPUSH
8255: LD_STRING 03_Yakotich
8257: PPUSH
8258: CALL_OW 38
// SaveCharacters ( Mietek , 03_Mietek ) ;
8262: LD_EXP 10
8266: PPUSH
8267: LD_STRING 03_Mietek
8269: PPUSH
8270: CALL_OW 38
// SaveCharacters ( Maksim , 03_Maksim ) ;
8274: LD_EXP 15
8278: PPUSH
8279: LD_STRING 03_Maksim
8281: PPUSH
8282: CALL_OW 38
// SaveCharacters ( Vasilij , 03_Vasilij ) ;
8286: LD_EXP 12
8290: PPUSH
8291: LD_STRING 03_Vasilij
8293: PPUSH
8294: CALL_OW 38
// SaveCharacters ( Michail , 03_Michail ) ;
8298: LD_EXP 13
8302: PPUSH
8303: LD_STRING 03_Michail
8305: PPUSH
8306: CALL_OW 38
// SaveCharacters ( Boris , 03_Boris ) ;
8310: LD_EXP 11
8314: PPUSH
8315: LD_STRING 03_Boris
8317: PPUSH
8318: CALL_OW 38
// SaveCharacters ( Constantin , 03_Constantin ) ;
8322: LD_EXP 14
8326: PPUSH
8327: LD_STRING 03_Constantin
8329: PPUSH
8330: CALL_OW 38
// SaveCharacters ( Fiodor , 03_Fiodor ) ;
8334: LD_EXP 16
8338: PPUSH
8339: LD_STRING 03_Fiodor
8341: PPUSH
8342: CALL_OW 38
// SaveCharacters ( Aleksiej , 03_Aleksiej ) ;
8346: LD_EXP 19
8350: PPUSH
8351: LD_STRING 03_Aleksiej
8353: PPUSH
8354: CALL_OW 38
// SaveCharacters ( Pavel , 03_Pavel ) ;
8358: LD_EXP 17
8362: PPUSH
8363: LD_STRING 03_Pavel
8365: PPUSH
8366: CALL_OW 38
// SaveCharacters ( Zakhar , 03_Zakhar ) ;
8370: LD_EXP 18
8374: PPUSH
8375: LD_STRING 03_Zakhar
8377: PPUSH
8378: CALL_OW 38
// SaveCharacters ( Aleksandr , 03_Aleksandr ) ;
8382: LD_EXP 20
8386: PPUSH
8387: LD_STRING 03_Aleksandr
8389: PPUSH
8390: CALL_OW 38
// SaveCharacters ( Stanislav , 03_Stanislav ) ;
8394: LD_EXP 22
8398: PPUSH
8399: LD_STRING 03_Stanislav
8401: PPUSH
8402: CALL_OW 38
// SaveCharacters ( Josif , 03_Josif ) ;
8406: LD_EXP 21
8410: PPUSH
8411: LD_STRING 03_Josif
8413: PPUSH
8414: CALL_OW 38
// SaveCharacters ( Grigori , 03_Grigori ) ;
8418: LD_EXP 26
8422: PPUSH
8423: LD_STRING 03_Grigori
8425: PPUSH
8426: CALL_OW 38
// SaveCharacters ( Jegor , 03_Jegor ) ;
8430: LD_EXP 25
8434: PPUSH
8435: LD_STRING 03_Jegor
8437: PPUSH
8438: CALL_OW 38
// SaveCharacters ( Anton , 03_Anton ) ;
8442: LD_EXP 27
8446: PPUSH
8447: LD_STRING 03_Anton
8449: PPUSH
8450: CALL_OW 38
// SaveCharacters ( Dimitri , 03_Dimitri ) ;
8454: LD_EXP 23
8458: PPUSH
8459: LD_STRING 03_Dimitri
8461: PPUSH
8462: CALL_OW 38
// SaveCharacters ( Ivan , 03_Ivan ) ;
8466: LD_EXP 24
8470: PPUSH
8471: LD_STRING 03_Ivan
8473: PPUSH
8474: CALL_OW 38
// SaveCharacters ( Burlak , 03_Burlak ) ;
8478: LD_EXP 33
8482: PPUSH
8483: LD_STRING 03_Burlak
8485: PPUSH
8486: CALL_OW 38
// SaveCharacters ( Karamazov , 03_Karamazov ) ;
8490: LD_EXP 34
8494: PPUSH
8495: LD_STRING 03_Karamazov
8497: PPUSH
8498: CALL_OW 38
// SaveCharacters ( Titov , 03_Titov ) ;
8502: LD_EXP 38
8506: PPUSH
8507: LD_STRING 03_Titov
8509: PPUSH
8510: CALL_OW 38
// SaveCharacters ( Petrovova , 03_Petrovova ) ;
8514: LD_EXP 35
8518: PPUSH
8519: LD_STRING 03_Petrovova
8521: PPUSH
8522: CALL_OW 38
// SaveCharacters ( Gleb , 03_Gleb ) ;
8526: LD_EXP 37
8530: PPUSH
8531: LD_STRING 03_Gleb
8533: PPUSH
8534: CALL_OW 38
// SaveCharacters ( Lipshchin , 03_Lipshchin ) ;
8538: LD_EXP 36
8542: PPUSH
8543: LD_STRING 03_Lipshchin
8545: PPUSH
8546: CALL_OW 38
// SaveCharacters ( Dolgov , 03_Dolgov ) ;
8550: LD_EXP 40
8554: PPUSH
8555: LD_STRING 03_Dolgov
8557: PPUSH
8558: CALL_OW 38
// SaveCharacters ( Petrosyan , 03_Petrosyan ) ;
8562: LD_EXP 39
8566: PPUSH
8567: LD_STRING 03_Petrosyan
8569: PPUSH
8570: CALL_OW 38
// YouWin ;
8574: CALL_OW 103
// end ; end_of_file
8578: LD_VAR 0 1
8582: RET
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and start_ended then
8583: LD_VAR 0 1
8587: PPUSH
8588: CALL_OW 255
8592: PUSH
8593: LD_INT 3
8595: EQUAL
8596: PUSH
8597: LD_VAR 0 1
8601: PPUSH
8602: CALL_OW 266
8606: PUSH
8607: LD_INT 0
8609: EQUAL
8610: AND
8611: PUSH
8612: LD_EXP 71
8616: AND
8617: IFFALSE 8670
// begin RuDep := building ;
8619: LD_ADDR_EXP 86
8623: PUSH
8624: LD_VAR 0 1
8628: ST_TO_ADDR
// SetBName ( building , voroshilov ) ;
8629: LD_VAR 0 1
8633: PPUSH
8634: LD_STRING voroshilov
8636: PPUSH
8637: CALL_OW 500
// SetRestrict ( b_depot , 3 , false ) ;
8641: LD_INT 0
8643: PPUSH
8644: LD_INT 3
8646: PPUSH
8647: LD_INT 0
8649: PPUSH
8650: CALL_OW 324
// ingame_video := false ;
8654: LD_ADDR_OWVAR 52
8658: PUSH
8659: LD_INT 0
8661: ST_TO_ADDR
// interface_hidden := false ;
8662: LD_ADDR_OWVAR 54
8666: PUSH
8667: LD_INT 0
8669: ST_TO_ADDR
// end ; end ;
8670: PPOPN 2
8672: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = b_armoury and GetSide ( building ) = 3 and crane_triggered = false then
8673: LD_VAR 0 1
8677: PPUSH
8678: CALL_OW 266
8682: PUSH
8683: LD_INT 4
8685: EQUAL
8686: PUSH
8687: LD_VAR 0 1
8691: PPUSH
8692: CALL_OW 255
8696: PUSH
8697: LD_INT 3
8699: EQUAL
8700: AND
8701: PUSH
8702: LD_EXP 81
8706: PUSH
8707: LD_INT 0
8709: EQUAL
8710: AND
8711: IFFALSE 8773
// begin crane_triggered = true ;
8713: LD_ADDR_EXP 81
8717: PUSH
8718: LD_INT 1
8720: ST_TO_ADDR
// DialogueOn ;
8721: CALL_OW 6
// Say ( Boris , 3Boris-Crane-01 ) ;
8725: LD_EXP 11
8729: PPUSH
8730: LD_STRING 3Boris-Crane-01
8732: PPUSH
8733: CALL_OW 88
// Say ( Vasilij , 3Vas-Crane-01 ) ;
8737: LD_EXP 12
8741: PPUSH
8742: LD_STRING 3Vas-Crane-01
8744: PPUSH
8745: CALL_OW 88
// ChangeMissionObjectives ( crane ) ;
8749: LD_STRING crane
8751: PPUSH
8752: CALL_OW 337
// SetTech ( 3 , 85 , 1 ) ;
8756: LD_INT 3
8758: PPUSH
8759: LD_INT 85
8761: PPUSH
8762: LD_INT 1
8764: PPUSH
8765: CALL_OW 322
// DialogueOff ;
8769: CALL_OW 7
// end ; end ;
8773: PPOPN 1
8775: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetControl ( vehicle ) = control_remote and GetSide ( vehicle ) = 1 then
8776: LD_VAR 0 1
8780: PPUSH
8781: CALL_OW 263
8785: PUSH
8786: LD_INT 2
8788: EQUAL
8789: PUSH
8790: LD_VAR 0 1
8794: PPUSH
8795: CALL_OW 255
8799: PUSH
8800: LD_INT 1
8802: EQUAL
8803: AND
8804: IFFALSE 9028
// begin Wait ( 0 0$3 ) ;
8806: LD_INT 105
8808: PPUSH
8809: CALL_OW 67
// Connect ( vehicle ) ;
8813: LD_VAR 0 1
8817: PPUSH
8818: CALL 18246 0 1
// newAttackers := Replace ( newAttackers , newAttackers + 1 , vehicle ) ;
8822: LD_ADDR_EXP 7
8826: PUSH
8827: LD_EXP 7
8831: PPUSH
8832: LD_EXP 7
8836: PUSH
8837: LD_INT 1
8839: PLUS
8840: PPUSH
8841: LD_VAR 0 1
8845: PPUSH
8846: CALL_OW 1
8850: ST_TO_ADDR
// if newAttackers >= [ 4 , 5 , 6 , 8 ] [ Difficulty ] then
8851: LD_EXP 7
8855: PUSH
8856: LD_INT 4
8858: PUSH
8859: LD_INT 5
8861: PUSH
8862: LD_INT 6
8864: PUSH
8865: LD_INT 8
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: PUSH
8874: LD_OWVAR 67
8878: ARRAY
8879: GREATEREQUAL
8880: IFFALSE 8905
// begin attackers := attackers union newAttackers ;
8882: LD_ADDR_EXP 8
8886: PUSH
8887: LD_EXP 8
8891: PUSH
8892: LD_EXP 7
8896: UNION
8897: ST_TO_ADDR
// newAttackers := [ ] ;
8898: LD_ADDR_EXP 7
8902: PUSH
8903: EMPTY
8904: ST_TO_ADDR
// end ; if See ( 3 , vehicle ) then
8905: LD_INT 3
8907: PPUSH
8908: LD_VAR 0 1
8912: PPUSH
8913: CALL_OW 292
8917: IFFALSE 8960
// begin DialogueOn ;
8919: CALL_OW 6
// CenterNowOnUnits ( vehicle ) ;
8923: LD_VAR 0 1
8927: PPUSH
8928: CALL_OW 87
// Say ( Yakotich , 3Yak-Remote-Control ) ;
8932: LD_EXP 9
8936: PPUSH
8937: LD_STRING 3Yak-Remote-Control
8939: PPUSH
8940: CALL_OW 88
// Say ( Vasilij , 3Vas-Remote-Control ) ;
8944: LD_EXP 12
8948: PPUSH
8949: LD_STRING 3Vas-Remote-Control
8951: PPUSH
8952: CALL_OW 88
// DialogueOff ;
8956: CALL_OW 7
// end ; if GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 52 or GetWeapon ( vehicle ) = 53 and GetSide ( vehicle ) = 3 then
8960: LD_VAR 0 1
8964: PPUSH
8965: CALL_OW 264
8969: PUSH
8970: LD_INT 45
8972: EQUAL
8973: PUSH
8974: LD_VAR 0 1
8978: PPUSH
8979: CALL_OW 264
8983: PUSH
8984: LD_INT 52
8986: EQUAL
8987: OR
8988: PUSH
8989: LD_VAR 0 1
8993: PPUSH
8994: CALL_OW 264
8998: PUSH
8999: LD_INT 53
9001: EQUAL
9002: PUSH
9003: LD_VAR 0 1
9007: PPUSH
9008: CALL_OW 255
9012: PUSH
9013: LD_INT 3
9015: EQUAL
9016: AND
9017: OR
9018: IFFALSE 9028
// begin weapon_builded = true ;
9020: LD_ADDR_EXP 84
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// end ; end ; end ;
9028: PPOPN 2
9030: END
// on WeaponPlaced ( b , f ) do begin if GetBWeapon ( b ) = 45 then
9031: LD_VAR 0 1
9035: PPUSH
9036: CALL_OW 269
9040: PUSH
9041: LD_INT 45
9043: EQUAL
9044: IFFALSE 9054
// begin weapon_builded = true ;
9046: LD_ADDR_EXP 84
9050: PUSH
9051: LD_INT 1
9053: ST_TO_ADDR
// end ; end ;
9054: PPOPN 2
9056: END
// on UnitDestroyed_Extra ( un , ks , ku ) do begin if GetWeapon ( ku ) = ar_flame_thrower and GetSide ( un ) = 1 and GetType ( un ) = unit_building then
9057: LD_VAR 0 3
9061: PPUSH
9062: CALL_OW 264
9066: PUSH
9067: LD_INT 26
9069: EQUAL
9070: PUSH
9071: LD_VAR 0 1
9075: PPUSH
9076: CALL_OW 255
9080: PUSH
9081: LD_INT 1
9083: EQUAL
9084: AND
9085: PUSH
9086: LD_VAR 0 1
9090: PPUSH
9091: CALL_OW 247
9095: PUSH
9096: LD_INT 3
9098: EQUAL
9099: AND
9100: IFFALSE 9128
// begin FlameCounter := FlameCounter + 1 ;
9102: LD_ADDR_EXP 64
9106: PUSH
9107: LD_EXP 64
9111: PUSH
9112: LD_INT 1
9114: PLUS
9115: ST_TO_ADDR
// SetAchievementEX ( ACH_FLAME , FlameCounter ) ;
9116: LD_STRING ACH_FLAME
9118: PPUSH
9119: LD_EXP 64
9123: PPUSH
9124: CALL_OW 564
// end ; end ;
9128: PPOPN 3
9130: END
// every 0 0$1 trigger Researched ( 3 , 85 ) do
9131: LD_INT 3
9133: PPUSH
9134: LD_INT 85
9136: PPUSH
9137: CALL_OW 325
9141: IFFALSE 9173
9143: GO 9145
9145: DISABLE
// begin crane_researched = true ;
9146: LD_ADDR_EXP 82
9150: PUSH
9151: LD_INT 1
9153: ST_TO_ADDR
// Say ( Vasilij , 3Vas-Crane-02 ) ;
9154: LD_EXP 12
9158: PPUSH
9159: LD_STRING 3Vas-Crane-02
9161: PPUSH
9162: CALL_OW 88
// ChangeMissionObjectives ( crane2 ) ;
9166: LD_STRING crane2
9168: PPUSH
9169: CALL_OW 337
// end ;
9173: END
// every 0 0$1 trigger See ( 3 , AmLab1 ) and lab_seen = false do
9174: LD_INT 3
9176: PPUSH
9177: LD_INT 94
9179: PPUSH
9180: CALL_OW 292
9184: PUSH
9185: LD_EXP 72
9189: PUSH
9190: LD_INT 0
9192: EQUAL
9193: AND
9194: IFFALSE 9241
9196: GO 9198
9198: DISABLE
// begin lab_seen = true ;
9199: LD_ADDR_EXP 72
9203: PUSH
9204: LD_INT 1
9206: ST_TO_ADDR
// CenterNowOnUnits ( AmLab1 ) ;
9207: LD_INT 94
9209: PPUSH
9210: CALL_OW 87
// DialogueOn ;
9214: CALL_OW 6
// Say ( Vasilij , 3Vas-Lab-01 ) ;
9218: LD_EXP 12
9222: PPUSH
9223: LD_STRING 3Vas-Lab-01
9225: PPUSH
9226: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
9230: LD_STRING o6
9232: PPUSH
9233: CALL_OW 337
// DialogueOff ;
9237: CALL_OW 7
// end ;
9241: END
// every 0 0$1 trigger See ( 3 , AmLab2 ) and lab_seen = false do
9242: LD_INT 3
9244: PPUSH
9245: LD_INT 163
9247: PPUSH
9248: CALL_OW 292
9252: PUSH
9253: LD_EXP 72
9257: PUSH
9258: LD_INT 0
9260: EQUAL
9261: AND
9262: IFFALSE 9309
9264: GO 9266
9266: DISABLE
// begin lab_seen = true ;
9267: LD_ADDR_EXP 72
9271: PUSH
9272: LD_INT 1
9274: ST_TO_ADDR
// CenterNowOnUnits ( AmLab2 ) ;
9275: LD_INT 163
9277: PPUSH
9278: CALL_OW 87
// DialogueOn ;
9282: CALL_OW 6
// Say ( Vasilij , 3Vas-Lab-01 ) ;
9286: LD_EXP 12
9290: PPUSH
9291: LD_STRING 3Vas-Lab-01
9293: PPUSH
9294: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
9298: LD_STRING o6
9300: PPUSH
9301: CALL_OW 337
// DialogueOff ;
9305: CALL_OW 7
// end ;
9309: END
// every 0 0$1 trigger GetSide ( AmLab1 ) = 3 or GetSide ( AmLab2 ) = 3 do
9310: LD_INT 94
9312: PPUSH
9313: CALL_OW 255
9317: PUSH
9318: LD_INT 3
9320: EQUAL
9321: PUSH
9322: LD_INT 163
9324: PPUSH
9325: CALL_OW 255
9329: PUSH
9330: LD_INT 3
9332: EQUAL
9333: OR
9334: IFFALSE 9364
9336: GO 9338
9338: DISABLE
// begin ChangeMissionObjectives ( labik2 ) ;
9339: LD_STRING labik2
9341: PPUSH
9342: CALL_OW 337
// lab_captured = true ;
9346: LD_ADDR_EXP 73
9350: PUSH
9351: LD_INT 1
9353: ST_TO_ADDR
// SaveVariable ( 1 , 03_AmLab ) ;
9354: LD_INT 1
9356: PPUSH
9357: LD_STRING 03_AmLab
9359: PPUSH
9360: CALL_OW 39
// end ;
9364: END
// every 0 0$1 trigger Researched ( 3 , 86 ) do
9365: LD_INT 3
9367: PPUSH
9368: LD_INT 86
9370: PPUSH
9371: CALL_OW 325
9375: IFFALSE 9427
9377: GO 9379
9379: DISABLE
// begin DialogueOn ;
9380: CALL_OW 6
// Say ( Vasilij , 3Vas-Buldozer-01 ) ;
9384: LD_EXP 12
9388: PPUSH
9389: LD_STRING 3Vas-Buldozer-01
9391: PPUSH
9392: CALL_OW 88
// Say ( Vasilij , 3Vas-Buldozer-02 ) ;
9396: LD_EXP 12
9400: PPUSH
9401: LD_STRING 3Vas-Buldozer-02
9403: PPUSH
9404: CALL_OW 88
// ChangeMissionObjectives ( buld2 ) ;
9408: LD_STRING buld2
9410: PPUSH
9411: CALL_OW 337
// buldozer_researched = true ;
9415: LD_ADDR_EXP 76
9419: PUSH
9420: LD_INT 1
9422: ST_TO_ADDR
// DialogueOff ;
9423: CALL_OW 7
// end ;
9427: END
// every 0 0$1 trigger Researched ( 3 , 40 ) do
9428: LD_INT 3
9430: PPUSH
9431: LD_INT 40
9433: PPUSH
9434: CALL_OW 325
9438: IFFALSE 9482
9440: GO 9442
9442: DISABLE
// begin Say ( Vasilij , 3Vas-Rocket ) ;
9443: LD_EXP 12
9447: PPUSH
9448: LD_STRING 3Vas-Rocket
9450: PPUSH
9451: CALL_OW 88
// Say ( Stanislav , 3Stan-Rocket ) ;
9455: LD_EXP 22
9459: PPUSH
9460: LD_STRING 3Stan-Rocket
9462: PPUSH
9463: CALL_OW 88
// ChangeMissionObjectives ( rocket2 ) ;
9467: LD_STRING rocket2
9469: PPUSH
9470: CALL_OW 337
// rocket_researched = true ;
9474: LD_ADDR_EXP 74
9478: PUSH
9479: LD_INT 1
9481: ST_TO_ADDR
// end ;
9482: END
// every 0 0$1 trigger Researched ( 3 , 9 ) do
9483: LD_INT 3
9485: PPUSH
9486: LD_INT 9
9488: PPUSH
9489: CALL_OW 325
9493: IFFALSE 9569
9495: GO 9497
9497: DISABLE
// begin DialogueOn ;
9498: CALL_OW 6
// Say ( Petrosyan , 3Pty-Comp-04 ) ;
9502: LD_EXP 39
9506: PPUSH
9507: LD_STRING 3Pty-Comp-04
9509: PPUSH
9510: CALL_OW 88
// Say ( Yakotich , 3Yak-Comp-01 ) ;
9514: LD_EXP 9
9518: PPUSH
9519: LD_STRING 3Yak-Comp-01
9521: PPUSH
9522: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-05 ) ;
9526: LD_EXP 39
9530: PPUSH
9531: LD_STRING 3Pty-Comp-05
9533: PPUSH
9534: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-03 ) ;
9538: LD_EXP 33
9542: PPUSH
9543: LD_STRING 3Bur-Comp-03
9545: PPUSH
9546: CALL_OW 88
// ChangeMissionObjectives ( pred2 ) ;
9550: LD_STRING pred2
9552: PPUSH
9553: CALL_OW 337
// prediction_researched = true ;
9557: LD_ADDR_EXP 75
9561: PUSH
9562: LD_INT 1
9564: ST_TO_ADDR
// DialogueOff ;
9565: CALL_OW 7
// end ;
9569: END
// every 0 0$1 trigger Researched ( 3 , 30 ) do
9570: LD_INT 3
9572: PPUSH
9573: LD_INT 30
9575: PPUSH
9576: CALL_OW 325
9580: IFFALSE 9641
9582: GO 9584
9584: DISABLE
// begin DialogueOn ;
9585: CALL_OW 6
// Say ( Dolgov , 3Dol-Stasis-01 ) ;
9589: LD_EXP 40
9593: PPUSH
9594: LD_STRING 3Dol-Stasis-01
9596: PPUSH
9597: CALL_OW 88
// Say ( Burlak , 3Bur-Stasis-01 ) ;
9601: LD_EXP 33
9605: PPUSH
9606: LD_STRING 3Bur-Stasis-01
9608: PPUSH
9609: CALL_OW 88
// Say ( Dolgov , 3Dol-Stasis-02 ) ;
9613: LD_EXP 40
9617: PPUSH
9618: LD_STRING 3Dol-Stasis-02
9620: PPUSH
9621: CALL_OW 88
// Say ( Burlak , 3Bur-Stasis-02 ) ;
9625: LD_EXP 33
9629: PPUSH
9630: LD_STRING 3Bur-Stasis-02
9632: PPUSH
9633: CALL_OW 88
// DialogueOff ;
9637: CALL_OW 7
// end ;
9641: END
// every 0 0$1 trigger IsInArea ( Boris , SouthOfBase ) and start_ended = true do
9642: LD_EXP 11
9646: PPUSH
9647: LD_INT 12
9649: PPUSH
9650: CALL_OW 308
9654: PUSH
9655: LD_EXP 71
9659: PUSH
9660: LD_INT 1
9662: EQUAL
9663: AND
9664: IFFALSE 9699
9666: GO 9668
9668: DISABLE
// begin AddComBuild ( [ Boris , Anton ] , b_depot , 144 , 207 , 3 ) ;
9669: LD_EXP 11
9673: PUSH
9674: LD_EXP 27
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PPUSH
9683: LD_INT 0
9685: PPUSH
9686: LD_INT 144
9688: PPUSH
9689: LD_INT 207
9691: PPUSH
9692: LD_INT 3
9694: PPUSH
9695: CALL_OW 205
// end ;
9699: END
// every 0 0$1 trigger start_ended = true and GetSide ( Ovsyenko ) = 3 do
9700: LD_EXP 71
9704: PUSH
9705: LD_INT 1
9707: EQUAL
9708: PUSH
9709: LD_INT 74
9711: PPUSH
9712: CALL_OW 255
9716: PUSH
9717: LD_INT 3
9719: EQUAL
9720: AND
9721: IFFALSE 9734
9723: GO 9725
9725: DISABLE
// begin ovsyenko_captured = true ;
9726: LD_ADDR_EXP 70
9730: PUSH
9731: LD_INT 1
9733: ST_TO_ADDR
// end ;
9734: END
// every 0 0$1 trigger Researched ( 3 , 54 ) and Researched ( 3 , 21 ) and Researched ( 3 , 30 ) do
9735: LD_INT 3
9737: PPUSH
9738: LD_INT 54
9740: PPUSH
9741: CALL_OW 325
9745: PUSH
9746: LD_INT 3
9748: PPUSH
9749: LD_INT 21
9751: PPUSH
9752: CALL_OW 325
9756: AND
9757: PUSH
9758: LD_INT 3
9760: PPUSH
9761: LD_INT 30
9763: PPUSH
9764: CALL_OW 325
9768: AND
9769: IFFALSE 9789
9771: GO 9773
9773: DISABLE
// begin everything_researched = true ;
9774: LD_ADDR_EXP 80
9778: PUSH
9779: LD_INT 1
9781: ST_TO_ADDR
// ChangeMissionObjectives ( o4a ) ;
9782: LD_STRING o4a
9784: PPUSH
9785: CALL_OW 337
// end ;
9789: END
// every 0 0$1 trigger Siblo ( 3 ) >= [ 100 , 150 , 200 ] [ Difficulty ] do
9790: LD_INT 3
9792: PPUSH
9793: CALL 272 0 1
9797: PUSH
9798: LD_INT 100
9800: PUSH
9801: LD_INT 150
9803: PUSH
9804: LD_INT 200
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: LIST
9811: PUSH
9812: LD_OWVAR 67
9816: ARRAY
9817: GREATEREQUAL
9818: IFFALSE 9838
9820: GO 9822
9822: DISABLE
// begin siberit_excavated = true ;
9823: LD_ADDR_EXP 78
9827: PUSH
9828: LD_INT 1
9830: ST_TO_ADDR
// ChangeMissionObjectives ( sib2 ) ;
9831: LD_STRING sib2
9833: PPUSH
9834: CALL_OW 337
// end ;
9838: END
// every 0 0$1 trigger end_of_the_mission = true do var un ;
9839: LD_EXP 83
9843: PUSH
9844: LD_INT 1
9846: EQUAL
9847: IFFALSE 9981
9849: GO 9851
9851: DISABLE
9852: LD_INT 0
9854: PPUSH
// begin for un in FilterUnitsInArea ( ExitArea , [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
9855: LD_ADDR_VAR 0 1
9859: PUSH
9860: LD_INT 3
9862: PPUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 6
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 2
9875: PUSH
9876: LD_INT 21
9878: PUSH
9879: LD_INT 1
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 21
9888: PUSH
9889: LD_INT 2
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: LIST
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: PPUSH
9905: CALL_OW 70
9909: PUSH
9910: FOR_IN
9911: IFFALSE 9978
// begin if IsInArea ( un , ExitArea ) then
9913: LD_VAR 0 1
9917: PPUSH
9918: LD_INT 3
9920: PPUSH
9921: CALL_OW 308
9925: IFFALSE 9976
// begin if GetType ( un ) = unit_vehicle then
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 247
9936: PUSH
9937: LD_INT 2
9939: EQUAL
9940: IFFALSE 9967
// begin RemoveUnit ( IsDrivenBy ( un ) ) ;
9942: LD_VAR 0 1
9946: PPUSH
9947: CALL_OW 311
9951: PPUSH
9952: CALL_OW 64
// RemoveUnit ( un ) ;
9956: LD_VAR 0 1
9960: PPUSH
9961: CALL_OW 64
// end else
9965: GO 9976
// begin RemoveUnit ( un ) ;
9967: LD_VAR 0 1
9971: PPUSH
9972: CALL_OW 64
// end ; end ; end ;
9976: GO 9910
9978: POP
9979: POP
// enable ;
9980: ENABLE
// end ;
9981: PPOPN 1
9983: END
// every 0 0$1 trigger start_ended = true and DepotCaptureTime do
9984: LD_EXP 71
9988: PUSH
9989: LD_INT 1
9991: EQUAL
9992: PUSH
9993: LD_EXP 66
9997: AND
9998: IFFALSE 10018
10000: GO 10002
10002: DISABLE
// begin DepotCaptureTime := DepotCaptureTime - 0 0$1 ;
10003: LD_ADDR_EXP 66
10007: PUSH
10008: LD_EXP 66
10012: PUSH
10013: LD_INT 35
10015: MINUS
10016: ST_TO_ADDR
// enable ;
10017: ENABLE
// end ;
10018: END
// every 0 0$1 trigger DepotCaptureTime >= 0 0$1 and GetSide ( Ovsyenko ) = 3 and start_ended = true do
10019: LD_EXP 66
10023: PUSH
10024: LD_INT 35
10026: GREATEREQUAL
10027: PUSH
10028: LD_INT 74
10030: PPUSH
10031: CALL_OW 255
10035: PUSH
10036: LD_INT 3
10038: EQUAL
10039: AND
10040: PUSH
10041: LD_EXP 71
10045: PUSH
10046: LD_INT 1
10048: EQUAL
10049: AND
10050: IFFALSE 10062
10052: GO 10054
10054: DISABLE
// begin SetAchievement ( ACH_OVSYENKO ) ;
10055: LD_STRING ACH_OVSYENKO
10057: PPUSH
10058: CALL_OW 543
// end ; end_of_file
10062: END
// every 6 6$0 do var i , j ;
10063: GO 10065
10065: DISABLE
10066: LD_INT 0
10068: PPUSH
10069: PPUSH
// begin for i = 1 to 4 do
10070: LD_ADDR_VAR 0 1
10074: PUSH
10075: DOUBLE
10076: LD_INT 1
10078: DEC
10079: ST_TO_ADDR
10080: LD_INT 4
10082: PUSH
10083: FOR_TO
10084: IFFALSE 10109
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10086: LD_INT 3
10088: PPUSH
10089: LD_INT 5
10091: PPUSH
10092: CALL_OW 12
10096: PPUSH
10097: LD_INT 4
10099: PPUSH
10100: LD_INT 1
10102: PPUSH
10103: CALL_OW 55
// end ;
10107: GO 10083
10109: POP
10110: POP
// CreateCratesArea ( rand ( 1 , 3 ) , AmCratesArea , true ) ;
10111: LD_INT 1
10113: PPUSH
10114: LD_INT 3
10116: PPUSH
10117: CALL_OW 12
10121: PPUSH
10122: LD_INT 7
10124: PPUSH
10125: LD_INT 1
10127: PPUSH
10128: CALL_OW 55
// enable ;
10132: ENABLE
// end ; end_of_file
10133: PPOPN 2
10135: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10136: LD_INT 0
10138: PPUSH
10139: PPUSH
// if exist_mode then
10140: LD_VAR 0 2
10144: IFFALSE 10169
// unit := CreateCharacter ( prefix & ident ) else
10146: LD_ADDR_VAR 0 5
10150: PUSH
10151: LD_VAR 0 3
10155: PUSH
10156: LD_VAR 0 1
10160: STR
10161: PPUSH
10162: CALL_OW 34
10166: ST_TO_ADDR
10167: GO 10184
// unit := NewCharacter ( ident ) ;
10169: LD_ADDR_VAR 0 5
10173: PUSH
10174: LD_VAR 0 1
10178: PPUSH
10179: CALL_OW 25
10183: ST_TO_ADDR
// result := unit ;
10184: LD_ADDR_VAR 0 4
10188: PUSH
10189: LD_VAR 0 5
10193: ST_TO_ADDR
// end ;
10194: LD_VAR 0 4
10198: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10199: LD_INT 0
10201: PPUSH
10202: PPUSH
// if not side or not nation then
10203: LD_VAR 0 1
10207: NOT
10208: PUSH
10209: LD_VAR 0 2
10213: NOT
10214: OR
10215: IFFALSE 10219
// exit ;
10217: GO 10987
// case nation of nation_american :
10219: LD_VAR 0 2
10223: PUSH
10224: LD_INT 1
10226: DOUBLE
10227: EQUAL
10228: IFTRUE 10232
10230: GO 10446
10232: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10233: LD_ADDR_VAR 0 4
10237: PUSH
10238: LD_INT 35
10240: PUSH
10241: LD_INT 45
10243: PUSH
10244: LD_INT 46
10246: PUSH
10247: LD_INT 47
10249: PUSH
10250: LD_INT 82
10252: PUSH
10253: LD_INT 83
10255: PUSH
10256: LD_INT 84
10258: PUSH
10259: LD_INT 85
10261: PUSH
10262: LD_INT 86
10264: PUSH
10265: LD_INT 1
10267: PUSH
10268: LD_INT 2
10270: PUSH
10271: LD_INT 6
10273: PUSH
10274: LD_INT 15
10276: PUSH
10277: LD_INT 16
10279: PUSH
10280: LD_INT 7
10282: PUSH
10283: LD_INT 12
10285: PUSH
10286: LD_INT 13
10288: PUSH
10289: LD_INT 10
10291: PUSH
10292: LD_INT 14
10294: PUSH
10295: LD_INT 20
10297: PUSH
10298: LD_INT 21
10300: PUSH
10301: LD_INT 22
10303: PUSH
10304: LD_INT 25
10306: PUSH
10307: LD_INT 32
10309: PUSH
10310: LD_INT 27
10312: PUSH
10313: LD_INT 36
10315: PUSH
10316: LD_INT 69
10318: PUSH
10319: LD_INT 39
10321: PUSH
10322: LD_INT 34
10324: PUSH
10325: LD_INT 40
10327: PUSH
10328: LD_INT 48
10330: PUSH
10331: LD_INT 49
10333: PUSH
10334: LD_INT 50
10336: PUSH
10337: LD_INT 51
10339: PUSH
10340: LD_INT 52
10342: PUSH
10343: LD_INT 53
10345: PUSH
10346: LD_INT 54
10348: PUSH
10349: LD_INT 55
10351: PUSH
10352: LD_INT 56
10354: PUSH
10355: LD_INT 57
10357: PUSH
10358: LD_INT 58
10360: PUSH
10361: LD_INT 59
10363: PUSH
10364: LD_INT 60
10366: PUSH
10367: LD_INT 61
10369: PUSH
10370: LD_INT 62
10372: PUSH
10373: LD_INT 80
10375: PUSH
10376: LD_INT 82
10378: PUSH
10379: LD_INT 83
10381: PUSH
10382: LD_INT 84
10384: PUSH
10385: LD_INT 85
10387: PUSH
10388: LD_INT 86
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: ST_TO_ADDR
10444: GO 10911
10446: LD_INT 2
10448: DOUBLE
10449: EQUAL
10450: IFTRUE 10454
10452: GO 10680
10454: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10455: LD_ADDR_VAR 0 4
10459: PUSH
10460: LD_INT 35
10462: PUSH
10463: LD_INT 45
10465: PUSH
10466: LD_INT 46
10468: PUSH
10469: LD_INT 47
10471: PUSH
10472: LD_INT 82
10474: PUSH
10475: LD_INT 83
10477: PUSH
10478: LD_INT 84
10480: PUSH
10481: LD_INT 85
10483: PUSH
10484: LD_INT 87
10486: PUSH
10487: LD_INT 70
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: LD_INT 11
10495: PUSH
10496: LD_INT 3
10498: PUSH
10499: LD_INT 4
10501: PUSH
10502: LD_INT 5
10504: PUSH
10505: LD_INT 6
10507: PUSH
10508: LD_INT 15
10510: PUSH
10511: LD_INT 18
10513: PUSH
10514: LD_INT 7
10516: PUSH
10517: LD_INT 17
10519: PUSH
10520: LD_INT 8
10522: PUSH
10523: LD_INT 20
10525: PUSH
10526: LD_INT 21
10528: PUSH
10529: LD_INT 22
10531: PUSH
10532: LD_INT 72
10534: PUSH
10535: LD_INT 26
10537: PUSH
10538: LD_INT 69
10540: PUSH
10541: LD_INT 39
10543: PUSH
10544: LD_INT 40
10546: PUSH
10547: LD_INT 41
10549: PUSH
10550: LD_INT 42
10552: PUSH
10553: LD_INT 43
10555: PUSH
10556: LD_INT 48
10558: PUSH
10559: LD_INT 49
10561: PUSH
10562: LD_INT 50
10564: PUSH
10565: LD_INT 51
10567: PUSH
10568: LD_INT 52
10570: PUSH
10571: LD_INT 53
10573: PUSH
10574: LD_INT 54
10576: PUSH
10577: LD_INT 55
10579: PUSH
10580: LD_INT 56
10582: PUSH
10583: LD_INT 60
10585: PUSH
10586: LD_INT 61
10588: PUSH
10589: LD_INT 62
10591: PUSH
10592: LD_INT 66
10594: PUSH
10595: LD_INT 67
10597: PUSH
10598: LD_INT 68
10600: PUSH
10601: LD_INT 81
10603: PUSH
10604: LD_INT 82
10606: PUSH
10607: LD_INT 83
10609: PUSH
10610: LD_INT 84
10612: PUSH
10613: LD_INT 85
10615: PUSH
10616: LD_INT 87
10618: PUSH
10619: LD_INT 88
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: ST_TO_ADDR
10678: GO 10911
10680: LD_INT 3
10682: DOUBLE
10683: EQUAL
10684: IFTRUE 10688
10686: GO 10910
10688: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10689: LD_ADDR_VAR 0 4
10693: PUSH
10694: LD_INT 46
10696: PUSH
10697: LD_INT 47
10699: PUSH
10700: LD_INT 1
10702: PUSH
10703: LD_INT 2
10705: PUSH
10706: LD_INT 82
10708: PUSH
10709: LD_INT 83
10711: PUSH
10712: LD_INT 84
10714: PUSH
10715: LD_INT 85
10717: PUSH
10718: LD_INT 86
10720: PUSH
10721: LD_INT 11
10723: PUSH
10724: LD_INT 9
10726: PUSH
10727: LD_INT 20
10729: PUSH
10730: LD_INT 19
10732: PUSH
10733: LD_INT 21
10735: PUSH
10736: LD_INT 24
10738: PUSH
10739: LD_INT 22
10741: PUSH
10742: LD_INT 25
10744: PUSH
10745: LD_INT 28
10747: PUSH
10748: LD_INT 29
10750: PUSH
10751: LD_INT 30
10753: PUSH
10754: LD_INT 31
10756: PUSH
10757: LD_INT 37
10759: PUSH
10760: LD_INT 38
10762: PUSH
10763: LD_INT 32
10765: PUSH
10766: LD_INT 27
10768: PUSH
10769: LD_INT 33
10771: PUSH
10772: LD_INT 69
10774: PUSH
10775: LD_INT 39
10777: PUSH
10778: LD_INT 34
10780: PUSH
10781: LD_INT 40
10783: PUSH
10784: LD_INT 71
10786: PUSH
10787: LD_INT 23
10789: PUSH
10790: LD_INT 44
10792: PUSH
10793: LD_INT 48
10795: PUSH
10796: LD_INT 49
10798: PUSH
10799: LD_INT 50
10801: PUSH
10802: LD_INT 51
10804: PUSH
10805: LD_INT 52
10807: PUSH
10808: LD_INT 53
10810: PUSH
10811: LD_INT 54
10813: PUSH
10814: LD_INT 55
10816: PUSH
10817: LD_INT 56
10819: PUSH
10820: LD_INT 57
10822: PUSH
10823: LD_INT 58
10825: PUSH
10826: LD_INT 59
10828: PUSH
10829: LD_INT 63
10831: PUSH
10832: LD_INT 64
10834: PUSH
10835: LD_INT 65
10837: PUSH
10838: LD_INT 82
10840: PUSH
10841: LD_INT 83
10843: PUSH
10844: LD_INT 84
10846: PUSH
10847: LD_INT 85
10849: PUSH
10850: LD_INT 86
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: ST_TO_ADDR
10908: GO 10911
10910: POP
// if state > - 1 and state < 3 then
10911: LD_VAR 0 3
10915: PUSH
10916: LD_INT 1
10918: NEG
10919: GREATER
10920: PUSH
10921: LD_VAR 0 3
10925: PUSH
10926: LD_INT 3
10928: LESS
10929: AND
10930: IFFALSE 10987
// for i in result do
10932: LD_ADDR_VAR 0 5
10936: PUSH
10937: LD_VAR 0 4
10941: PUSH
10942: FOR_IN
10943: IFFALSE 10985
// if GetTech ( i , side ) <> state then
10945: LD_VAR 0 5
10949: PPUSH
10950: LD_VAR 0 1
10954: PPUSH
10955: CALL_OW 321
10959: PUSH
10960: LD_VAR 0 3
10964: NONEQUAL
10965: IFFALSE 10983
// result := result diff i ;
10967: LD_ADDR_VAR 0 4
10971: PUSH
10972: LD_VAR 0 4
10976: PUSH
10977: LD_VAR 0 5
10981: DIFF
10982: ST_TO_ADDR
10983: GO 10942
10985: POP
10986: POP
// end ;
10987: LD_VAR 0 4
10991: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10992: LD_INT 0
10994: PPUSH
10995: PPUSH
10996: PPUSH
// result := true ;
10997: LD_ADDR_VAR 0 3
11001: PUSH
11002: LD_INT 1
11004: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11005: LD_ADDR_VAR 0 5
11009: PUSH
11010: LD_VAR 0 2
11014: PPUSH
11015: CALL_OW 480
11019: ST_TO_ADDR
// if not tmp then
11020: LD_VAR 0 5
11024: NOT
11025: IFFALSE 11029
// exit ;
11027: GO 11078
// for i in tmp do
11029: LD_ADDR_VAR 0 4
11033: PUSH
11034: LD_VAR 0 5
11038: PUSH
11039: FOR_IN
11040: IFFALSE 11076
// if GetTech ( i , side ) <> state_researched then
11042: LD_VAR 0 4
11046: PPUSH
11047: LD_VAR 0 1
11051: PPUSH
11052: CALL_OW 321
11056: PUSH
11057: LD_INT 2
11059: NONEQUAL
11060: IFFALSE 11074
// begin result := false ;
11062: LD_ADDR_VAR 0 3
11066: PUSH
11067: LD_INT 0
11069: ST_TO_ADDR
// exit ;
11070: POP
11071: POP
11072: GO 11078
// end ;
11074: GO 11039
11076: POP
11077: POP
// end ;
11078: LD_VAR 0 3
11082: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11083: LD_INT 0
11085: PPUSH
11086: PPUSH
11087: PPUSH
11088: PPUSH
11089: PPUSH
11090: PPUSH
11091: PPUSH
11092: PPUSH
11093: PPUSH
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11098: LD_VAR 0 1
11102: NOT
11103: PUSH
11104: LD_VAR 0 1
11108: PPUSH
11109: CALL_OW 257
11113: PUSH
11114: LD_INT 9
11116: NONEQUAL
11117: OR
11118: IFFALSE 11122
// exit ;
11120: GO 11695
// side := GetSide ( unit ) ;
11122: LD_ADDR_VAR 0 9
11126: PUSH
11127: LD_VAR 0 1
11131: PPUSH
11132: CALL_OW 255
11136: ST_TO_ADDR
// tech_space := tech_spacanom ;
11137: LD_ADDR_VAR 0 12
11141: PUSH
11142: LD_INT 29
11144: ST_TO_ADDR
// tech_time := tech_taurad ;
11145: LD_ADDR_VAR 0 13
11149: PUSH
11150: LD_INT 28
11152: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11153: LD_ADDR_VAR 0 11
11157: PUSH
11158: LD_VAR 0 1
11162: PPUSH
11163: CALL_OW 310
11167: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11168: LD_VAR 0 11
11172: PPUSH
11173: CALL_OW 247
11177: PUSH
11178: LD_INT 2
11180: EQUAL
11181: IFFALSE 11185
// exit ;
11183: GO 11695
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11185: LD_ADDR_VAR 0 8
11189: PUSH
11190: LD_INT 81
11192: PUSH
11193: LD_VAR 0 9
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 3
11204: PUSH
11205: LD_INT 21
11207: PUSH
11208: LD_INT 3
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 69
11227: ST_TO_ADDR
// if not tmp then
11228: LD_VAR 0 8
11232: NOT
11233: IFFALSE 11237
// exit ;
11235: GO 11695
// if in_unit then
11237: LD_VAR 0 11
11241: IFFALSE 11265
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11243: LD_ADDR_VAR 0 10
11247: PUSH
11248: LD_VAR 0 8
11252: PPUSH
11253: LD_VAR 0 11
11257: PPUSH
11258: CALL_OW 74
11262: ST_TO_ADDR
11263: GO 11285
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11265: LD_ADDR_VAR 0 10
11269: PUSH
11270: LD_VAR 0 8
11274: PPUSH
11275: LD_VAR 0 1
11279: PPUSH
11280: CALL_OW 74
11284: ST_TO_ADDR
// if not enemy then
11285: LD_VAR 0 10
11289: NOT
11290: IFFALSE 11294
// exit ;
11292: GO 11695
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11294: LD_VAR 0 11
11298: PUSH
11299: LD_VAR 0 11
11303: PPUSH
11304: LD_VAR 0 10
11308: PPUSH
11309: CALL_OW 296
11313: PUSH
11314: LD_INT 13
11316: GREATER
11317: AND
11318: PUSH
11319: LD_VAR 0 1
11323: PPUSH
11324: LD_VAR 0 10
11328: PPUSH
11329: CALL_OW 296
11333: PUSH
11334: LD_INT 12
11336: GREATER
11337: OR
11338: IFFALSE 11342
// exit ;
11340: GO 11695
// missile := [ 1 ] ;
11342: LD_ADDR_VAR 0 14
11346: PUSH
11347: LD_INT 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11353: LD_VAR 0 9
11357: PPUSH
11358: LD_VAR 0 12
11362: PPUSH
11363: CALL_OW 325
11367: IFFALSE 11396
// missile := Replace ( missile , missile + 1 , 2 ) ;
11369: LD_ADDR_VAR 0 14
11373: PUSH
11374: LD_VAR 0 14
11378: PPUSH
11379: LD_VAR 0 14
11383: PUSH
11384: LD_INT 1
11386: PLUS
11387: PPUSH
11388: LD_INT 2
11390: PPUSH
11391: CALL_OW 1
11395: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11396: LD_VAR 0 9
11400: PPUSH
11401: LD_VAR 0 13
11405: PPUSH
11406: CALL_OW 325
11410: PUSH
11411: LD_VAR 0 10
11415: PPUSH
11416: CALL_OW 255
11420: PPUSH
11421: LD_VAR 0 13
11425: PPUSH
11426: CALL_OW 325
11430: NOT
11431: AND
11432: IFFALSE 11461
// missile := Replace ( missile , missile + 1 , 3 ) ;
11434: LD_ADDR_VAR 0 14
11438: PUSH
11439: LD_VAR 0 14
11443: PPUSH
11444: LD_VAR 0 14
11448: PUSH
11449: LD_INT 1
11451: PLUS
11452: PPUSH
11453: LD_INT 3
11455: PPUSH
11456: CALL_OW 1
11460: ST_TO_ADDR
// if missile < 2 then
11461: LD_VAR 0 14
11465: PUSH
11466: LD_INT 2
11468: LESS
11469: IFFALSE 11473
// exit ;
11471: GO 11695
// x := GetX ( enemy ) ;
11473: LD_ADDR_VAR 0 4
11477: PUSH
11478: LD_VAR 0 10
11482: PPUSH
11483: CALL_OW 250
11487: ST_TO_ADDR
// y := GetY ( enemy ) ;
11488: LD_ADDR_VAR 0 5
11492: PUSH
11493: LD_VAR 0 10
11497: PPUSH
11498: CALL_OW 251
11502: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11503: LD_ADDR_VAR 0 6
11507: PUSH
11508: LD_VAR 0 4
11512: PUSH
11513: LD_INT 1
11515: NEG
11516: PPUSH
11517: LD_INT 1
11519: PPUSH
11520: CALL_OW 12
11524: PLUS
11525: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11526: LD_ADDR_VAR 0 7
11530: PUSH
11531: LD_VAR 0 5
11535: PUSH
11536: LD_INT 1
11538: NEG
11539: PPUSH
11540: LD_INT 1
11542: PPUSH
11543: CALL_OW 12
11547: PLUS
11548: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11549: LD_VAR 0 6
11553: PPUSH
11554: LD_VAR 0 7
11558: PPUSH
11559: CALL_OW 488
11563: NOT
11564: IFFALSE 11586
// begin _x := x ;
11566: LD_ADDR_VAR 0 6
11570: PUSH
11571: LD_VAR 0 4
11575: ST_TO_ADDR
// _y := y ;
11576: LD_ADDR_VAR 0 7
11580: PUSH
11581: LD_VAR 0 5
11585: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11586: LD_ADDR_VAR 0 3
11590: PUSH
11591: LD_INT 1
11593: PPUSH
11594: LD_VAR 0 14
11598: PPUSH
11599: CALL_OW 12
11603: ST_TO_ADDR
// case i of 1 :
11604: LD_VAR 0 3
11608: PUSH
11609: LD_INT 1
11611: DOUBLE
11612: EQUAL
11613: IFTRUE 11617
11615: GO 11634
11617: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11618: LD_VAR 0 1
11622: PPUSH
11623: LD_VAR 0 10
11627: PPUSH
11628: CALL_OW 115
11632: GO 11695
11634: LD_INT 2
11636: DOUBLE
11637: EQUAL
11638: IFTRUE 11642
11640: GO 11664
11642: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11643: LD_VAR 0 1
11647: PPUSH
11648: LD_VAR 0 6
11652: PPUSH
11653: LD_VAR 0 7
11657: PPUSH
11658: CALL_OW 153
11662: GO 11695
11664: LD_INT 3
11666: DOUBLE
11667: EQUAL
11668: IFTRUE 11672
11670: GO 11694
11672: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11673: LD_VAR 0 1
11677: PPUSH
11678: LD_VAR 0 6
11682: PPUSH
11683: LD_VAR 0 7
11687: PPUSH
11688: CALL_OW 154
11692: GO 11695
11694: POP
// end ;
11695: LD_VAR 0 2
11699: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11700: LD_INT 0
11702: PPUSH
11703: PPUSH
11704: PPUSH
11705: PPUSH
11706: PPUSH
11707: PPUSH
// if not unit or not building then
11708: LD_VAR 0 1
11712: NOT
11713: PUSH
11714: LD_VAR 0 2
11718: NOT
11719: OR
11720: IFFALSE 11724
// exit ;
11722: GO 11882
// x := GetX ( building ) ;
11724: LD_ADDR_VAR 0 5
11728: PUSH
11729: LD_VAR 0 2
11733: PPUSH
11734: CALL_OW 250
11738: ST_TO_ADDR
// y := GetY ( building ) ;
11739: LD_ADDR_VAR 0 6
11743: PUSH
11744: LD_VAR 0 2
11748: PPUSH
11749: CALL_OW 251
11753: ST_TO_ADDR
// for i = 0 to 5 do
11754: LD_ADDR_VAR 0 4
11758: PUSH
11759: DOUBLE
11760: LD_INT 0
11762: DEC
11763: ST_TO_ADDR
11764: LD_INT 5
11766: PUSH
11767: FOR_TO
11768: IFFALSE 11880
// begin _x := ShiftX ( x , i , 3 ) ;
11770: LD_ADDR_VAR 0 7
11774: PUSH
11775: LD_VAR 0 5
11779: PPUSH
11780: LD_VAR 0 4
11784: PPUSH
11785: LD_INT 3
11787: PPUSH
11788: CALL_OW 272
11792: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11793: LD_ADDR_VAR 0 8
11797: PUSH
11798: LD_VAR 0 6
11802: PPUSH
11803: LD_VAR 0 4
11807: PPUSH
11808: LD_INT 3
11810: PPUSH
11811: CALL_OW 273
11815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11816: LD_VAR 0 7
11820: PPUSH
11821: LD_VAR 0 8
11825: PPUSH
11826: CALL_OW 488
11830: NOT
11831: IFFALSE 11835
// continue ;
11833: GO 11767
// if HexInfo ( _x , _y ) = 0 then
11835: LD_VAR 0 7
11839: PPUSH
11840: LD_VAR 0 8
11844: PPUSH
11845: CALL_OW 428
11849: PUSH
11850: LD_INT 0
11852: EQUAL
11853: IFFALSE 11878
// begin ComMoveXY ( unit , _x , _y ) ;
11855: LD_VAR 0 1
11859: PPUSH
11860: LD_VAR 0 7
11864: PPUSH
11865: LD_VAR 0 8
11869: PPUSH
11870: CALL_OW 111
// exit ;
11874: POP
11875: POP
11876: GO 11882
// end ; end ;
11878: GO 11767
11880: POP
11881: POP
// end ;
11882: LD_VAR 0 3
11886: RET
// export function ScanBase ( side , base_area ) ; begin
11887: LD_INT 0
11889: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: LD_INT 81
11902: PUSH
11903: LD_VAR 0 1
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PPUSH
11912: CALL_OW 70
11916: ST_TO_ADDR
// end ;
11917: LD_VAR 0 3
11921: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11922: LD_INT 0
11924: PPUSH
11925: PPUSH
11926: PPUSH
11927: PPUSH
// result := false ;
11928: LD_ADDR_VAR 0 2
11932: PUSH
11933: LD_INT 0
11935: ST_TO_ADDR
// side := GetSide ( unit ) ;
11936: LD_ADDR_VAR 0 3
11940: PUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 255
11950: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11951: LD_ADDR_VAR 0 4
11955: PUSH
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL_OW 248
11965: ST_TO_ADDR
// case nat of 1 :
11966: LD_VAR 0 4
11970: PUSH
11971: LD_INT 1
11973: DOUBLE
11974: EQUAL
11975: IFTRUE 11979
11977: GO 11990
11979: POP
// tech := tech_lassight ; 2 :
11980: LD_ADDR_VAR 0 5
11984: PUSH
11985: LD_INT 12
11987: ST_TO_ADDR
11988: GO 12029
11990: LD_INT 2
11992: DOUBLE
11993: EQUAL
11994: IFTRUE 11998
11996: GO 12009
11998: POP
// tech := tech_mortar ; 3 :
11999: LD_ADDR_VAR 0 5
12003: PUSH
12004: LD_INT 41
12006: ST_TO_ADDR
12007: GO 12029
12009: LD_INT 3
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12028
12017: POP
// tech := tech_bazooka ; end ;
12018: LD_ADDR_VAR 0 5
12022: PUSH
12023: LD_INT 44
12025: ST_TO_ADDR
12026: GO 12029
12028: POP
// if Researched ( side , tech ) then
12029: LD_VAR 0 3
12033: PPUSH
12034: LD_VAR 0 5
12038: PPUSH
12039: CALL_OW 325
12043: IFFALSE 12070
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12045: LD_ADDR_VAR 0 2
12049: PUSH
12050: LD_INT 5
12052: PUSH
12053: LD_INT 8
12055: PUSH
12056: LD_INT 9
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: PUSH
12064: LD_VAR 0 4
12068: ARRAY
12069: ST_TO_ADDR
// end ;
12070: LD_VAR 0 2
12074: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12075: LD_INT 0
12077: PPUSH
12078: PPUSH
12079: PPUSH
// if not mines then
12080: LD_VAR 0 2
12084: NOT
12085: IFFALSE 12089
// exit ;
12087: GO 12233
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12089: LD_ADDR_VAR 0 5
12093: PUSH
12094: LD_INT 81
12096: PUSH
12097: LD_VAR 0 1
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 3
12108: PUSH
12109: LD_INT 21
12111: PUSH
12112: LD_INT 3
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PPUSH
12127: CALL_OW 69
12131: ST_TO_ADDR
// for i in mines do
12132: LD_ADDR_VAR 0 4
12136: PUSH
12137: LD_VAR 0 2
12141: PUSH
12142: FOR_IN
12143: IFFALSE 12231
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12145: LD_VAR 0 4
12149: PUSH
12150: LD_INT 1
12152: ARRAY
12153: PPUSH
12154: LD_VAR 0 4
12158: PUSH
12159: LD_INT 2
12161: ARRAY
12162: PPUSH
12163: CALL_OW 458
12167: NOT
12168: IFFALSE 12172
// continue ;
12170: GO 12142
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12172: LD_VAR 0 4
12176: PUSH
12177: LD_INT 1
12179: ARRAY
12180: PPUSH
12181: LD_VAR 0 4
12185: PUSH
12186: LD_INT 2
12188: ARRAY
12189: PPUSH
12190: CALL_OW 428
12194: PUSH
12195: LD_VAR 0 5
12199: IN
12200: IFFALSE 12229
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12202: LD_VAR 0 4
12206: PUSH
12207: LD_INT 1
12209: ARRAY
12210: PPUSH
12211: LD_VAR 0 4
12215: PUSH
12216: LD_INT 2
12218: ARRAY
12219: PPUSH
12220: LD_VAR 0 1
12224: PPUSH
12225: CALL_OW 456
// end ;
12229: GO 12142
12231: POP
12232: POP
// end ;
12233: LD_VAR 0 3
12237: RET
// export function Count ( array ) ; var i ; begin
12238: LD_INT 0
12240: PPUSH
12241: PPUSH
// result := 0 ;
12242: LD_ADDR_VAR 0 2
12246: PUSH
12247: LD_INT 0
12249: ST_TO_ADDR
// for i in array do
12250: LD_ADDR_VAR 0 3
12254: PUSH
12255: LD_VAR 0 1
12259: PUSH
12260: FOR_IN
12261: IFFALSE 12285
// if i then
12263: LD_VAR 0 3
12267: IFFALSE 12283
// result := result + 1 ;
12269: LD_ADDR_VAR 0 2
12273: PUSH
12274: LD_VAR 0 2
12278: PUSH
12279: LD_INT 1
12281: PLUS
12282: ST_TO_ADDR
12283: GO 12260
12285: POP
12286: POP
// end ;
12287: LD_VAR 0 2
12291: RET
// export function IsEmpty ( building ) ; begin
12292: LD_INT 0
12294: PPUSH
// if not building then
12295: LD_VAR 0 1
12299: NOT
12300: IFFALSE 12304
// exit ;
12302: GO 12347
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12304: LD_ADDR_VAR 0 2
12308: PUSH
12309: LD_VAR 0 1
12313: PUSH
12314: LD_INT 22
12316: PUSH
12317: LD_VAR 0 1
12321: PPUSH
12322: CALL_OW 255
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 58
12333: PUSH
12334: EMPTY
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PPUSH
12341: CALL_OW 69
12345: IN
12346: ST_TO_ADDR
// end ;
12347: LD_VAR 0 2
12351: RET
// export function IsNotFull ( building ) ; var places ; begin
12352: LD_INT 0
12354: PPUSH
12355: PPUSH
// if not building then
12356: LD_VAR 0 1
12360: NOT
12361: IFFALSE 12365
// exit ;
12363: GO 12536
// result := false ;
12365: LD_ADDR_VAR 0 2
12369: PUSH
12370: LD_INT 0
12372: ST_TO_ADDR
// places := 0 ;
12373: LD_ADDR_VAR 0 3
12377: PUSH
12378: LD_INT 0
12380: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
12381: LD_VAR 0 1
12385: PPUSH
12386: CALL_OW 266
12390: PUSH
12391: LD_INT 0
12393: DOUBLE
12394: EQUAL
12395: IFTRUE 12453
12397: LD_INT 1
12399: DOUBLE
12400: EQUAL
12401: IFTRUE 12453
12403: LD_INT 6
12405: DOUBLE
12406: EQUAL
12407: IFTRUE 12453
12409: LD_INT 7
12411: DOUBLE
12412: EQUAL
12413: IFTRUE 12453
12415: LD_INT 8
12417: DOUBLE
12418: EQUAL
12419: IFTRUE 12453
12421: LD_INT 4
12423: DOUBLE
12424: EQUAL
12425: IFTRUE 12453
12427: LD_INT 5
12429: DOUBLE
12430: EQUAL
12431: IFTRUE 12453
12433: LD_INT 2
12435: DOUBLE
12436: EQUAL
12437: IFTRUE 12453
12439: LD_INT 3
12441: DOUBLE
12442: EQUAL
12443: IFTRUE 12453
12445: LD_INT 35
12447: DOUBLE
12448: EQUAL
12449: IFTRUE 12453
12451: GO 12464
12453: POP
// places := 6 ; b_bunker , b_breastwork :
12454: LD_ADDR_VAR 0 3
12458: PUSH
12459: LD_INT 6
12461: ST_TO_ADDR
12462: GO 12509
12464: LD_INT 32
12466: DOUBLE
12467: EQUAL
12468: IFTRUE 12478
12470: LD_INT 31
12472: DOUBLE
12473: EQUAL
12474: IFTRUE 12478
12476: GO 12489
12478: POP
// places := 1 ; b_control_tower :
12479: LD_ADDR_VAR 0 3
12483: PUSH
12484: LD_INT 1
12486: ST_TO_ADDR
12487: GO 12509
12489: LD_INT 36
12491: DOUBLE
12492: EQUAL
12493: IFTRUE 12497
12495: GO 12508
12497: POP
// places := 3 ; end ;
12498: LD_ADDR_VAR 0 3
12502: PUSH
12503: LD_INT 3
12505: ST_TO_ADDR
12506: GO 12509
12508: POP
// if places then
12509: LD_VAR 0 3
12513: IFFALSE 12536
// result := UnitsInside ( building ) < places ;
12515: LD_ADDR_VAR 0 2
12519: PUSH
12520: LD_VAR 0 1
12524: PPUSH
12525: CALL_OW 313
12529: PUSH
12530: LD_VAR 0 3
12534: LESS
12535: ST_TO_ADDR
// end ;
12536: LD_VAR 0 2
12540: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12541: LD_INT 0
12543: PPUSH
12544: PPUSH
12545: PPUSH
12546: PPUSH
// tmp := [ ] ;
12547: LD_ADDR_VAR 0 3
12551: PUSH
12552: EMPTY
12553: ST_TO_ADDR
// list := [ ] ;
12554: LD_ADDR_VAR 0 5
12558: PUSH
12559: EMPTY
12560: ST_TO_ADDR
// for i = 16 to 25 do
12561: LD_ADDR_VAR 0 4
12565: PUSH
12566: DOUBLE
12567: LD_INT 16
12569: DEC
12570: ST_TO_ADDR
12571: LD_INT 25
12573: PUSH
12574: FOR_TO
12575: IFFALSE 12648
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12577: LD_ADDR_VAR 0 3
12581: PUSH
12582: LD_VAR 0 3
12586: PUSH
12587: LD_INT 22
12589: PUSH
12590: LD_VAR 0 1
12594: PPUSH
12595: CALL_OW 255
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: LD_INT 91
12606: PUSH
12607: LD_VAR 0 1
12611: PUSH
12612: LD_INT 6
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 30
12622: PUSH
12623: LD_VAR 0 4
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: PUSH
12637: EMPTY
12638: LIST
12639: PPUSH
12640: CALL_OW 69
12644: ADD
12645: ST_TO_ADDR
12646: GO 12574
12648: POP
12649: POP
// for i = 1 to tmp do
12650: LD_ADDR_VAR 0 4
12654: PUSH
12655: DOUBLE
12656: LD_INT 1
12658: DEC
12659: ST_TO_ADDR
12660: LD_VAR 0 3
12664: PUSH
12665: FOR_TO
12666: IFFALSE 12754
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12668: LD_ADDR_VAR 0 5
12672: PUSH
12673: LD_VAR 0 5
12677: PUSH
12678: LD_VAR 0 3
12682: PUSH
12683: LD_VAR 0 4
12687: ARRAY
12688: PPUSH
12689: CALL_OW 266
12693: PUSH
12694: LD_VAR 0 3
12698: PUSH
12699: LD_VAR 0 4
12703: ARRAY
12704: PPUSH
12705: CALL_OW 250
12709: PUSH
12710: LD_VAR 0 3
12714: PUSH
12715: LD_VAR 0 4
12719: ARRAY
12720: PPUSH
12721: CALL_OW 251
12725: PUSH
12726: LD_VAR 0 3
12730: PUSH
12731: LD_VAR 0 4
12735: ARRAY
12736: PPUSH
12737: CALL_OW 254
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: ADD
12751: ST_TO_ADDR
12752: GO 12665
12754: POP
12755: POP
// result := list ;
12756: LD_ADDR_VAR 0 2
12760: PUSH
12761: LD_VAR 0 5
12765: ST_TO_ADDR
// end ;
12766: LD_VAR 0 2
12770: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12771: LD_INT 0
12773: PPUSH
12774: PPUSH
12775: PPUSH
12776: PPUSH
12777: PPUSH
12778: PPUSH
12779: PPUSH
// if not factory then
12780: LD_VAR 0 1
12784: NOT
12785: IFFALSE 12789
// exit ;
12787: GO 13382
// if control = control_apeman then
12789: LD_VAR 0 4
12793: PUSH
12794: LD_INT 5
12796: EQUAL
12797: IFFALSE 12906
// begin tmp := UnitsInside ( factory ) ;
12799: LD_ADDR_VAR 0 8
12803: PUSH
12804: LD_VAR 0 1
12808: PPUSH
12809: CALL_OW 313
12813: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12814: LD_VAR 0 8
12818: PPUSH
12819: LD_INT 25
12821: PUSH
12822: LD_INT 12
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 72
12833: NOT
12834: IFFALSE 12844
// control := control_manual ;
12836: LD_ADDR_VAR 0 4
12840: PUSH
12841: LD_INT 1
12843: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12844: LD_ADDR_VAR 0 8
12848: PUSH
12849: LD_VAR 0 1
12853: PPUSH
12854: CALL 12541 0 1
12858: ST_TO_ADDR
// if tmp then
12859: LD_VAR 0 8
12863: IFFALSE 12906
// begin for i in tmp do
12865: LD_ADDR_VAR 0 7
12869: PUSH
12870: LD_VAR 0 8
12874: PUSH
12875: FOR_IN
12876: IFFALSE 12904
// if i [ 1 ] = b_ext_radio then
12878: LD_VAR 0 7
12882: PUSH
12883: LD_INT 1
12885: ARRAY
12886: PUSH
12887: LD_INT 22
12889: EQUAL
12890: IFFALSE 12902
// begin control := control_remote ;
12892: LD_ADDR_VAR 0 4
12896: PUSH
12897: LD_INT 2
12899: ST_TO_ADDR
// break ;
12900: GO 12904
// end ;
12902: GO 12875
12904: POP
12905: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12906: LD_VAR 0 1
12910: PPUSH
12911: LD_VAR 0 2
12915: PPUSH
12916: LD_VAR 0 3
12920: PPUSH
12921: LD_VAR 0 4
12925: PPUSH
12926: LD_VAR 0 5
12930: PPUSH
12931: CALL_OW 448
12935: IFFALSE 12970
// begin result := [ chassis , engine , control , weapon ] ;
12937: LD_ADDR_VAR 0 6
12941: PUSH
12942: LD_VAR 0 2
12946: PUSH
12947: LD_VAR 0 3
12951: PUSH
12952: LD_VAR 0 4
12956: PUSH
12957: LD_VAR 0 5
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: ST_TO_ADDR
// exit ;
12968: GO 13382
// end ; _chassis := AvailableChassisList ( factory ) ;
12970: LD_ADDR_VAR 0 9
12974: PUSH
12975: LD_VAR 0 1
12979: PPUSH
12980: CALL_OW 475
12984: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12985: LD_ADDR_VAR 0 11
12989: PUSH
12990: LD_VAR 0 1
12994: PPUSH
12995: CALL_OW 476
12999: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13000: LD_ADDR_VAR 0 12
13004: PUSH
13005: LD_VAR 0 1
13009: PPUSH
13010: CALL_OW 477
13014: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13015: LD_ADDR_VAR 0 10
13019: PUSH
13020: LD_VAR 0 1
13024: PPUSH
13025: CALL_OW 478
13029: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13030: LD_VAR 0 9
13034: NOT
13035: PUSH
13036: LD_VAR 0 11
13040: NOT
13041: OR
13042: PUSH
13043: LD_VAR 0 12
13047: NOT
13048: OR
13049: PUSH
13050: LD_VAR 0 10
13054: NOT
13055: OR
13056: IFFALSE 13091
// begin result := [ chassis , engine , control , weapon ] ;
13058: LD_ADDR_VAR 0 6
13062: PUSH
13063: LD_VAR 0 2
13067: PUSH
13068: LD_VAR 0 3
13072: PUSH
13073: LD_VAR 0 4
13077: PUSH
13078: LD_VAR 0 5
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: ST_TO_ADDR
// exit ;
13089: GO 13382
// end ; if not chassis in _chassis then
13091: LD_VAR 0 2
13095: PUSH
13096: LD_VAR 0 9
13100: IN
13101: NOT
13102: IFFALSE 13128
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13104: LD_ADDR_VAR 0 2
13108: PUSH
13109: LD_VAR 0 9
13113: PUSH
13114: LD_INT 1
13116: PPUSH
13117: LD_VAR 0 9
13121: PPUSH
13122: CALL_OW 12
13126: ARRAY
13127: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13128: LD_VAR 0 2
13132: PPUSH
13133: LD_VAR 0 3
13137: PPUSH
13138: CALL 13387 0 2
13142: NOT
13143: IFFALSE 13202
// repeat engine := _engine [ 1 ] ;
13145: LD_ADDR_VAR 0 3
13149: PUSH
13150: LD_VAR 0 11
13154: PUSH
13155: LD_INT 1
13157: ARRAY
13158: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13159: LD_ADDR_VAR 0 11
13163: PUSH
13164: LD_VAR 0 11
13168: PPUSH
13169: LD_INT 1
13171: PPUSH
13172: CALL_OW 3
13176: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13177: LD_VAR 0 2
13181: PPUSH
13182: LD_VAR 0 3
13186: PPUSH
13187: CALL 13387 0 2
13191: PUSH
13192: LD_VAR 0 11
13196: PUSH
13197: EMPTY
13198: EQUAL
13199: OR
13200: IFFALSE 13145
// if not control in _control then
13202: LD_VAR 0 4
13206: PUSH
13207: LD_VAR 0 12
13211: IN
13212: NOT
13213: IFFALSE 13239
// control := _control [ rand ( 1 , _control ) ] ;
13215: LD_ADDR_VAR 0 4
13219: PUSH
13220: LD_VAR 0 12
13224: PUSH
13225: LD_INT 1
13227: PPUSH
13228: LD_VAR 0 12
13232: PPUSH
13233: CALL_OW 12
13237: ARRAY
13238: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13239: LD_VAR 0 2
13243: PPUSH
13244: LD_VAR 0 5
13248: PPUSH
13249: CALL 13607 0 2
13253: NOT
13254: IFFALSE 13313
// repeat weapon := _weapon [ 1 ] ;
13256: LD_ADDR_VAR 0 5
13260: PUSH
13261: LD_VAR 0 10
13265: PUSH
13266: LD_INT 1
13268: ARRAY
13269: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13270: LD_ADDR_VAR 0 10
13274: PUSH
13275: LD_VAR 0 10
13279: PPUSH
13280: LD_INT 1
13282: PPUSH
13283: CALL_OW 3
13287: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13288: LD_VAR 0 2
13292: PPUSH
13293: LD_VAR 0 5
13297: PPUSH
13298: CALL 13607 0 2
13302: PUSH
13303: LD_VAR 0 10
13307: PUSH
13308: EMPTY
13309: EQUAL
13310: OR
13311: IFFALSE 13256
// result := [ ] ;
13313: LD_ADDR_VAR 0 6
13317: PUSH
13318: EMPTY
13319: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13320: LD_VAR 0 1
13324: PPUSH
13325: LD_VAR 0 2
13329: PPUSH
13330: LD_VAR 0 3
13334: PPUSH
13335: LD_VAR 0 4
13339: PPUSH
13340: LD_VAR 0 5
13344: PPUSH
13345: CALL_OW 448
13349: IFFALSE 13382
// result := [ chassis , engine , control , weapon ] ;
13351: LD_ADDR_VAR 0 6
13355: PUSH
13356: LD_VAR 0 2
13360: PUSH
13361: LD_VAR 0 3
13365: PUSH
13366: LD_VAR 0 4
13370: PUSH
13371: LD_VAR 0 5
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: ST_TO_ADDR
// end ;
13382: LD_VAR 0 6
13386: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13387: LD_INT 0
13389: PPUSH
// if not chassis or not engine then
13390: LD_VAR 0 1
13394: NOT
13395: PUSH
13396: LD_VAR 0 2
13400: NOT
13401: OR
13402: IFFALSE 13406
// exit ;
13404: GO 13602
// case engine of engine_solar :
13406: LD_VAR 0 2
13410: PUSH
13411: LD_INT 2
13413: DOUBLE
13414: EQUAL
13415: IFTRUE 13419
13417: GO 13457
13419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13420: LD_ADDR_VAR 0 3
13424: PUSH
13425: LD_INT 11
13427: PUSH
13428: LD_INT 12
13430: PUSH
13431: LD_INT 13
13433: PUSH
13434: LD_INT 14
13436: PUSH
13437: LD_INT 1
13439: PUSH
13440: LD_INT 2
13442: PUSH
13443: LD_INT 3
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: ST_TO_ADDR
13455: GO 13586
13457: LD_INT 1
13459: DOUBLE
13460: EQUAL
13461: IFTRUE 13465
13463: GO 13527
13465: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13466: LD_ADDR_VAR 0 3
13470: PUSH
13471: LD_INT 11
13473: PUSH
13474: LD_INT 12
13476: PUSH
13477: LD_INT 13
13479: PUSH
13480: LD_INT 14
13482: PUSH
13483: LD_INT 1
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: LD_INT 3
13491: PUSH
13492: LD_INT 4
13494: PUSH
13495: LD_INT 5
13497: PUSH
13498: LD_INT 21
13500: PUSH
13501: LD_INT 23
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: LD_INT 24
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: ST_TO_ADDR
13525: GO 13586
13527: LD_INT 3
13529: DOUBLE
13530: EQUAL
13531: IFTRUE 13535
13533: GO 13585
13535: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13536: LD_ADDR_VAR 0 3
13540: PUSH
13541: LD_INT 13
13543: PUSH
13544: LD_INT 14
13546: PUSH
13547: LD_INT 2
13549: PUSH
13550: LD_INT 3
13552: PUSH
13553: LD_INT 4
13555: PUSH
13556: LD_INT 5
13558: PUSH
13559: LD_INT 21
13561: PUSH
13562: LD_INT 22
13564: PUSH
13565: LD_INT 23
13567: PUSH
13568: LD_INT 24
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: ST_TO_ADDR
13583: GO 13586
13585: POP
// result := ( chassis in result ) ;
13586: LD_ADDR_VAR 0 3
13590: PUSH
13591: LD_VAR 0 1
13595: PUSH
13596: LD_VAR 0 3
13600: IN
13601: ST_TO_ADDR
// end ;
13602: LD_VAR 0 3
13606: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13607: LD_INT 0
13609: PPUSH
// if not chassis or not weapon then
13610: LD_VAR 0 1
13614: NOT
13615: PUSH
13616: LD_VAR 0 2
13620: NOT
13621: OR
13622: IFFALSE 13626
// exit ;
13624: GO 14688
// case weapon of us_machine_gun :
13626: LD_VAR 0 2
13630: PUSH
13631: LD_INT 2
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13669
13639: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13640: LD_ADDR_VAR 0 3
13644: PUSH
13645: LD_INT 1
13647: PUSH
13648: LD_INT 2
13650: PUSH
13651: LD_INT 3
13653: PUSH
13654: LD_INT 4
13656: PUSH
13657: LD_INT 5
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: ST_TO_ADDR
13667: GO 14672
13669: LD_INT 3
13671: DOUBLE
13672: EQUAL
13673: IFTRUE 13677
13675: GO 13707
13677: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13678: LD_ADDR_VAR 0 3
13682: PUSH
13683: LD_INT 1
13685: PUSH
13686: LD_INT 2
13688: PUSH
13689: LD_INT 3
13691: PUSH
13692: LD_INT 4
13694: PUSH
13695: LD_INT 5
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: ST_TO_ADDR
13705: GO 14672
13707: LD_INT 11
13709: DOUBLE
13710: EQUAL
13711: IFTRUE 13715
13713: GO 13745
13715: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13716: LD_ADDR_VAR 0 3
13720: PUSH
13721: LD_INT 1
13723: PUSH
13724: LD_INT 2
13726: PUSH
13727: LD_INT 3
13729: PUSH
13730: LD_INT 4
13732: PUSH
13733: LD_INT 5
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: ST_TO_ADDR
13743: GO 14672
13745: LD_INT 4
13747: DOUBLE
13748: EQUAL
13749: IFTRUE 13753
13751: GO 13779
13753: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13754: LD_ADDR_VAR 0 3
13758: PUSH
13759: LD_INT 2
13761: PUSH
13762: LD_INT 3
13764: PUSH
13765: LD_INT 4
13767: PUSH
13768: LD_INT 5
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: ST_TO_ADDR
13777: GO 14672
13779: LD_INT 5
13781: DOUBLE
13782: EQUAL
13783: IFTRUE 13787
13785: GO 13813
13787: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13788: LD_ADDR_VAR 0 3
13792: PUSH
13793: LD_INT 2
13795: PUSH
13796: LD_INT 3
13798: PUSH
13799: LD_INT 4
13801: PUSH
13802: LD_INT 5
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: ST_TO_ADDR
13811: GO 14672
13813: LD_INT 9
13815: DOUBLE
13816: EQUAL
13817: IFTRUE 13821
13819: GO 13847
13821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13822: LD_ADDR_VAR 0 3
13826: PUSH
13827: LD_INT 2
13829: PUSH
13830: LD_INT 3
13832: PUSH
13833: LD_INT 4
13835: PUSH
13836: LD_INT 5
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: ST_TO_ADDR
13845: GO 14672
13847: LD_INT 7
13849: DOUBLE
13850: EQUAL
13851: IFTRUE 13855
13853: GO 13881
13855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_INT 2
13863: PUSH
13864: LD_INT 3
13866: PUSH
13867: LD_INT 4
13869: PUSH
13870: LD_INT 5
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: ST_TO_ADDR
13879: GO 14672
13881: LD_INT 12
13883: DOUBLE
13884: EQUAL
13885: IFTRUE 13889
13887: GO 13915
13889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13890: LD_ADDR_VAR 0 3
13894: PUSH
13895: LD_INT 2
13897: PUSH
13898: LD_INT 3
13900: PUSH
13901: LD_INT 4
13903: PUSH
13904: LD_INT 5
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: ST_TO_ADDR
13913: GO 14672
13915: LD_INT 13
13917: DOUBLE
13918: EQUAL
13919: IFTRUE 13923
13921: GO 13949
13923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13924: LD_ADDR_VAR 0 3
13928: PUSH
13929: LD_INT 2
13931: PUSH
13932: LD_INT 3
13934: PUSH
13935: LD_INT 4
13937: PUSH
13938: LD_INT 5
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: ST_TO_ADDR
13947: GO 14672
13949: LD_INT 14
13951: DOUBLE
13952: EQUAL
13953: IFTRUE 13957
13955: GO 13975
13957: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13958: LD_ADDR_VAR 0 3
13962: PUSH
13963: LD_INT 4
13965: PUSH
13966: LD_INT 5
13968: PUSH
13969: EMPTY
13970: LIST
13971: LIST
13972: ST_TO_ADDR
13973: GO 14672
13975: LD_INT 6
13977: DOUBLE
13978: EQUAL
13979: IFTRUE 13983
13981: GO 14001
13983: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13984: LD_ADDR_VAR 0 3
13988: PUSH
13989: LD_INT 4
13991: PUSH
13992: LD_INT 5
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: ST_TO_ADDR
13999: GO 14672
14001: LD_INT 10
14003: DOUBLE
14004: EQUAL
14005: IFTRUE 14009
14007: GO 14027
14009: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14010: LD_ADDR_VAR 0 3
14014: PUSH
14015: LD_INT 4
14017: PUSH
14018: LD_INT 5
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: ST_TO_ADDR
14025: GO 14672
14027: LD_INT 22
14029: DOUBLE
14030: EQUAL
14031: IFTRUE 14035
14033: GO 14061
14035: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14036: LD_ADDR_VAR 0 3
14040: PUSH
14041: LD_INT 11
14043: PUSH
14044: LD_INT 12
14046: PUSH
14047: LD_INT 13
14049: PUSH
14050: LD_INT 14
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: ST_TO_ADDR
14059: GO 14672
14061: LD_INT 23
14063: DOUBLE
14064: EQUAL
14065: IFTRUE 14069
14067: GO 14095
14069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14070: LD_ADDR_VAR 0 3
14074: PUSH
14075: LD_INT 11
14077: PUSH
14078: LD_INT 12
14080: PUSH
14081: LD_INT 13
14083: PUSH
14084: LD_INT 14
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: ST_TO_ADDR
14093: GO 14672
14095: LD_INT 24
14097: DOUBLE
14098: EQUAL
14099: IFTRUE 14103
14101: GO 14129
14103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_INT 11
14111: PUSH
14112: LD_INT 12
14114: PUSH
14115: LD_INT 13
14117: PUSH
14118: LD_INT 14
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: ST_TO_ADDR
14127: GO 14672
14129: LD_INT 30
14131: DOUBLE
14132: EQUAL
14133: IFTRUE 14137
14135: GO 14163
14137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14138: LD_ADDR_VAR 0 3
14142: PUSH
14143: LD_INT 11
14145: PUSH
14146: LD_INT 12
14148: PUSH
14149: LD_INT 13
14151: PUSH
14152: LD_INT 14
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: ST_TO_ADDR
14161: GO 14672
14163: LD_INT 25
14165: DOUBLE
14166: EQUAL
14167: IFTRUE 14171
14169: GO 14189
14171: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14172: LD_ADDR_VAR 0 3
14176: PUSH
14177: LD_INT 13
14179: PUSH
14180: LD_INT 14
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: ST_TO_ADDR
14187: GO 14672
14189: LD_INT 27
14191: DOUBLE
14192: EQUAL
14193: IFTRUE 14197
14195: GO 14215
14197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14198: LD_ADDR_VAR 0 3
14202: PUSH
14203: LD_INT 13
14205: PUSH
14206: LD_INT 14
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: ST_TO_ADDR
14213: GO 14672
14215: LD_EXP 92
14219: DOUBLE
14220: EQUAL
14221: IFTRUE 14225
14223: GO 14251
14225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14226: LD_ADDR_VAR 0 3
14230: PUSH
14231: LD_INT 11
14233: PUSH
14234: LD_INT 12
14236: PUSH
14237: LD_INT 13
14239: PUSH
14240: LD_INT 14
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: ST_TO_ADDR
14249: GO 14672
14251: LD_INT 28
14253: DOUBLE
14254: EQUAL
14255: IFTRUE 14259
14257: GO 14277
14259: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14260: LD_ADDR_VAR 0 3
14264: PUSH
14265: LD_INT 13
14267: PUSH
14268: LD_INT 14
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: ST_TO_ADDR
14275: GO 14672
14277: LD_INT 29
14279: DOUBLE
14280: EQUAL
14281: IFTRUE 14285
14283: GO 14303
14285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14286: LD_ADDR_VAR 0 3
14290: PUSH
14291: LD_INT 13
14293: PUSH
14294: LD_INT 14
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: ST_TO_ADDR
14301: GO 14672
14303: LD_INT 31
14305: DOUBLE
14306: EQUAL
14307: IFTRUE 14311
14309: GO 14329
14311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14312: LD_ADDR_VAR 0 3
14316: PUSH
14317: LD_INT 13
14319: PUSH
14320: LD_INT 14
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: ST_TO_ADDR
14327: GO 14672
14329: LD_INT 26
14331: DOUBLE
14332: EQUAL
14333: IFTRUE 14337
14335: GO 14355
14337: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14338: LD_ADDR_VAR 0 3
14342: PUSH
14343: LD_INT 13
14345: PUSH
14346: LD_INT 14
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: ST_TO_ADDR
14353: GO 14672
14355: LD_INT 42
14357: DOUBLE
14358: EQUAL
14359: IFTRUE 14363
14361: GO 14389
14363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14364: LD_ADDR_VAR 0 3
14368: PUSH
14369: LD_INT 21
14371: PUSH
14372: LD_INT 22
14374: PUSH
14375: LD_INT 23
14377: PUSH
14378: LD_INT 24
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: ST_TO_ADDR
14387: GO 14672
14389: LD_INT 43
14391: DOUBLE
14392: EQUAL
14393: IFTRUE 14397
14395: GO 14423
14397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14398: LD_ADDR_VAR 0 3
14402: PUSH
14403: LD_INT 21
14405: PUSH
14406: LD_INT 22
14408: PUSH
14409: LD_INT 23
14411: PUSH
14412: LD_INT 24
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: ST_TO_ADDR
14421: GO 14672
14423: LD_INT 44
14425: DOUBLE
14426: EQUAL
14427: IFTRUE 14431
14429: GO 14457
14431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14432: LD_ADDR_VAR 0 3
14436: PUSH
14437: LD_INT 21
14439: PUSH
14440: LD_INT 22
14442: PUSH
14443: LD_INT 23
14445: PUSH
14446: LD_INT 24
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: ST_TO_ADDR
14455: GO 14672
14457: LD_INT 45
14459: DOUBLE
14460: EQUAL
14461: IFTRUE 14465
14463: GO 14491
14465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14466: LD_ADDR_VAR 0 3
14470: PUSH
14471: LD_INT 21
14473: PUSH
14474: LD_INT 22
14476: PUSH
14477: LD_INT 23
14479: PUSH
14480: LD_INT 24
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: ST_TO_ADDR
14489: GO 14672
14491: LD_INT 49
14493: DOUBLE
14494: EQUAL
14495: IFTRUE 14499
14497: GO 14525
14499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14500: LD_ADDR_VAR 0 3
14504: PUSH
14505: LD_INT 21
14507: PUSH
14508: LD_INT 22
14510: PUSH
14511: LD_INT 23
14513: PUSH
14514: LD_INT 24
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: ST_TO_ADDR
14523: GO 14672
14525: LD_INT 51
14527: DOUBLE
14528: EQUAL
14529: IFTRUE 14533
14531: GO 14559
14533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14534: LD_ADDR_VAR 0 3
14538: PUSH
14539: LD_INT 21
14541: PUSH
14542: LD_INT 22
14544: PUSH
14545: LD_INT 23
14547: PUSH
14548: LD_INT 24
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: ST_TO_ADDR
14557: GO 14672
14559: LD_INT 52
14561: DOUBLE
14562: EQUAL
14563: IFTRUE 14567
14565: GO 14593
14567: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14568: LD_ADDR_VAR 0 3
14572: PUSH
14573: LD_INT 21
14575: PUSH
14576: LD_INT 22
14578: PUSH
14579: LD_INT 23
14581: PUSH
14582: LD_INT 24
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: ST_TO_ADDR
14591: GO 14672
14593: LD_INT 53
14595: DOUBLE
14596: EQUAL
14597: IFTRUE 14601
14599: GO 14619
14601: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14602: LD_ADDR_VAR 0 3
14606: PUSH
14607: LD_INT 23
14609: PUSH
14610: LD_INT 24
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: ST_TO_ADDR
14617: GO 14672
14619: LD_INT 46
14621: DOUBLE
14622: EQUAL
14623: IFTRUE 14627
14625: GO 14645
14627: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14628: LD_ADDR_VAR 0 3
14632: PUSH
14633: LD_INT 23
14635: PUSH
14636: LD_INT 24
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: ST_TO_ADDR
14643: GO 14672
14645: LD_INT 47
14647: DOUBLE
14648: EQUAL
14649: IFTRUE 14653
14651: GO 14671
14653: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14654: LD_ADDR_VAR 0 3
14658: PUSH
14659: LD_INT 23
14661: PUSH
14662: LD_INT 24
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: ST_TO_ADDR
14669: GO 14672
14671: POP
// result := ( chassis in result ) ;
14672: LD_ADDR_VAR 0 3
14676: PUSH
14677: LD_VAR 0 1
14681: PUSH
14682: LD_VAR 0 3
14686: IN
14687: ST_TO_ADDR
// end ;
14688: LD_VAR 0 3
14692: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14693: LD_INT 0
14695: PPUSH
14696: PPUSH
14697: PPUSH
14698: PPUSH
14699: PPUSH
14700: PPUSH
14701: PPUSH
// result := array ;
14702: LD_ADDR_VAR 0 5
14706: PUSH
14707: LD_VAR 0 1
14711: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14712: LD_VAR 0 1
14716: NOT
14717: PUSH
14718: LD_VAR 0 2
14722: NOT
14723: OR
14724: PUSH
14725: LD_VAR 0 3
14729: NOT
14730: OR
14731: PUSH
14732: LD_VAR 0 2
14736: PUSH
14737: LD_VAR 0 1
14741: GREATER
14742: OR
14743: PUSH
14744: LD_VAR 0 3
14748: PUSH
14749: LD_VAR 0 1
14753: GREATER
14754: OR
14755: IFFALSE 14759
// exit ;
14757: GO 15055
// if direction then
14759: LD_VAR 0 4
14763: IFFALSE 14827
// begin d := 1 ;
14765: LD_ADDR_VAR 0 9
14769: PUSH
14770: LD_INT 1
14772: ST_TO_ADDR
// if i_from > i_to then
14773: LD_VAR 0 2
14777: PUSH
14778: LD_VAR 0 3
14782: GREATER
14783: IFFALSE 14809
// length := ( array - i_from ) + i_to else
14785: LD_ADDR_VAR 0 11
14789: PUSH
14790: LD_VAR 0 1
14794: PUSH
14795: LD_VAR 0 2
14799: MINUS
14800: PUSH
14801: LD_VAR 0 3
14805: PLUS
14806: ST_TO_ADDR
14807: GO 14825
// length := i_to - i_from ;
14809: LD_ADDR_VAR 0 11
14813: PUSH
14814: LD_VAR 0 3
14818: PUSH
14819: LD_VAR 0 2
14823: MINUS
14824: ST_TO_ADDR
// end else
14825: GO 14888
// begin d := - 1 ;
14827: LD_ADDR_VAR 0 9
14831: PUSH
14832: LD_INT 1
14834: NEG
14835: ST_TO_ADDR
// if i_from > i_to then
14836: LD_VAR 0 2
14840: PUSH
14841: LD_VAR 0 3
14845: GREATER
14846: IFFALSE 14866
// length := i_from - i_to else
14848: LD_ADDR_VAR 0 11
14852: PUSH
14853: LD_VAR 0 2
14857: PUSH
14858: LD_VAR 0 3
14862: MINUS
14863: ST_TO_ADDR
14864: GO 14888
// length := ( array - i_to ) + i_from ;
14866: LD_ADDR_VAR 0 11
14870: PUSH
14871: LD_VAR 0 1
14875: PUSH
14876: LD_VAR 0 3
14880: MINUS
14881: PUSH
14882: LD_VAR 0 2
14886: PLUS
14887: ST_TO_ADDR
// end ; if not length then
14888: LD_VAR 0 11
14892: NOT
14893: IFFALSE 14897
// exit ;
14895: GO 15055
// tmp := array ;
14897: LD_ADDR_VAR 0 10
14901: PUSH
14902: LD_VAR 0 1
14906: ST_TO_ADDR
// for i = 1 to length do
14907: LD_ADDR_VAR 0 6
14911: PUSH
14912: DOUBLE
14913: LD_INT 1
14915: DEC
14916: ST_TO_ADDR
14917: LD_VAR 0 11
14921: PUSH
14922: FOR_TO
14923: IFFALSE 15043
// begin for j = 1 to array do
14925: LD_ADDR_VAR 0 7
14929: PUSH
14930: DOUBLE
14931: LD_INT 1
14933: DEC
14934: ST_TO_ADDR
14935: LD_VAR 0 1
14939: PUSH
14940: FOR_TO
14941: IFFALSE 15029
// begin k := j + d ;
14943: LD_ADDR_VAR 0 8
14947: PUSH
14948: LD_VAR 0 7
14952: PUSH
14953: LD_VAR 0 9
14957: PLUS
14958: ST_TO_ADDR
// if k > array then
14959: LD_VAR 0 8
14963: PUSH
14964: LD_VAR 0 1
14968: GREATER
14969: IFFALSE 14979
// k := 1 ;
14971: LD_ADDR_VAR 0 8
14975: PUSH
14976: LD_INT 1
14978: ST_TO_ADDR
// if not k then
14979: LD_VAR 0 8
14983: NOT
14984: IFFALSE 14996
// k := array ;
14986: LD_ADDR_VAR 0 8
14990: PUSH
14991: LD_VAR 0 1
14995: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14996: LD_ADDR_VAR 0 10
15000: PUSH
15001: LD_VAR 0 10
15005: PPUSH
15006: LD_VAR 0 8
15010: PPUSH
15011: LD_VAR 0 1
15015: PUSH
15016: LD_VAR 0 7
15020: ARRAY
15021: PPUSH
15022: CALL_OW 1
15026: ST_TO_ADDR
// end ;
15027: GO 14940
15029: POP
15030: POP
// array := tmp ;
15031: LD_ADDR_VAR 0 1
15035: PUSH
15036: LD_VAR 0 10
15040: ST_TO_ADDR
// end ;
15041: GO 14922
15043: POP
15044: POP
// result := array ;
15045: LD_ADDR_VAR 0 5
15049: PUSH
15050: LD_VAR 0 1
15054: ST_TO_ADDR
// end ;
15055: LD_VAR 0 5
15059: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15060: LD_INT 0
15062: PPUSH
15063: PPUSH
// result := 0 ;
15064: LD_ADDR_VAR 0 3
15068: PUSH
15069: LD_INT 0
15071: ST_TO_ADDR
// if not array or not value in array then
15072: LD_VAR 0 1
15076: NOT
15077: PUSH
15078: LD_VAR 0 2
15082: PUSH
15083: LD_VAR 0 1
15087: IN
15088: NOT
15089: OR
15090: IFFALSE 15094
// exit ;
15092: GO 15148
// for i = 1 to array do
15094: LD_ADDR_VAR 0 4
15098: PUSH
15099: DOUBLE
15100: LD_INT 1
15102: DEC
15103: ST_TO_ADDR
15104: LD_VAR 0 1
15108: PUSH
15109: FOR_TO
15110: IFFALSE 15146
// if value = array [ i ] then
15112: LD_VAR 0 2
15116: PUSH
15117: LD_VAR 0 1
15121: PUSH
15122: LD_VAR 0 4
15126: ARRAY
15127: EQUAL
15128: IFFALSE 15144
// begin result := i ;
15130: LD_ADDR_VAR 0 3
15134: PUSH
15135: LD_VAR 0 4
15139: ST_TO_ADDR
// exit ;
15140: POP
15141: POP
15142: GO 15148
// end ;
15144: GO 15109
15146: POP
15147: POP
// end ;
15148: LD_VAR 0 3
15152: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15153: LD_INT 0
15155: PPUSH
// vc_chassis := chassis ;
15156: LD_ADDR_OWVAR 37
15160: PUSH
15161: LD_VAR 0 1
15165: ST_TO_ADDR
// vc_engine := engine ;
15166: LD_ADDR_OWVAR 39
15170: PUSH
15171: LD_VAR 0 2
15175: ST_TO_ADDR
// vc_control := control ;
15176: LD_ADDR_OWVAR 38
15180: PUSH
15181: LD_VAR 0 3
15185: ST_TO_ADDR
// vc_weapon := weapon ;
15186: LD_ADDR_OWVAR 40
15190: PUSH
15191: LD_VAR 0 4
15195: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15196: LD_ADDR_OWVAR 41
15200: PUSH
15201: LD_VAR 0 5
15205: ST_TO_ADDR
// end ;
15206: LD_VAR 0 6
15210: RET
// export function WantPlant ( unit ) ; var task ; begin
15211: LD_INT 0
15213: PPUSH
15214: PPUSH
// result := false ;
15215: LD_ADDR_VAR 0 2
15219: PUSH
15220: LD_INT 0
15222: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15223: LD_ADDR_VAR 0 3
15227: PUSH
15228: LD_VAR 0 1
15232: PPUSH
15233: CALL_OW 437
15237: ST_TO_ADDR
// if task then
15238: LD_VAR 0 3
15242: IFFALSE 15270
// if task [ 1 ] [ 1 ] = p then
15244: LD_VAR 0 3
15248: PUSH
15249: LD_INT 1
15251: ARRAY
15252: PUSH
15253: LD_INT 1
15255: ARRAY
15256: PUSH
15257: LD_STRING p
15259: EQUAL
15260: IFFALSE 15270
// result := true ;
15262: LD_ADDR_VAR 0 2
15266: PUSH
15267: LD_INT 1
15269: ST_TO_ADDR
// end ;
15270: LD_VAR 0 2
15274: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15275: LD_INT 0
15277: PPUSH
15278: PPUSH
15279: PPUSH
15280: PPUSH
// if pos < 1 then
15281: LD_VAR 0 2
15285: PUSH
15286: LD_INT 1
15288: LESS
15289: IFFALSE 15293
// exit ;
15291: GO 15596
// if pos = 1 then
15293: LD_VAR 0 2
15297: PUSH
15298: LD_INT 1
15300: EQUAL
15301: IFFALSE 15334
// result := Replace ( arr , pos [ 1 ] , value ) else
15303: LD_ADDR_VAR 0 4
15307: PUSH
15308: LD_VAR 0 1
15312: PPUSH
15313: LD_VAR 0 2
15317: PUSH
15318: LD_INT 1
15320: ARRAY
15321: PPUSH
15322: LD_VAR 0 3
15326: PPUSH
15327: CALL_OW 1
15331: ST_TO_ADDR
15332: GO 15596
// begin tmp := arr ;
15334: LD_ADDR_VAR 0 6
15338: PUSH
15339: LD_VAR 0 1
15343: ST_TO_ADDR
// s_arr := [ tmp ] ;
15344: LD_ADDR_VAR 0 7
15348: PUSH
15349: LD_VAR 0 6
15353: PUSH
15354: EMPTY
15355: LIST
15356: ST_TO_ADDR
// for i = 1 to pos - 1 do
15357: LD_ADDR_VAR 0 5
15361: PUSH
15362: DOUBLE
15363: LD_INT 1
15365: DEC
15366: ST_TO_ADDR
15367: LD_VAR 0 2
15371: PUSH
15372: LD_INT 1
15374: MINUS
15375: PUSH
15376: FOR_TO
15377: IFFALSE 15422
// begin tmp := tmp [ pos [ i ] ] ;
15379: LD_ADDR_VAR 0 6
15383: PUSH
15384: LD_VAR 0 6
15388: PUSH
15389: LD_VAR 0 2
15393: PUSH
15394: LD_VAR 0 5
15398: ARRAY
15399: ARRAY
15400: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15401: LD_ADDR_VAR 0 7
15405: PUSH
15406: LD_VAR 0 7
15410: PUSH
15411: LD_VAR 0 6
15415: PUSH
15416: EMPTY
15417: LIST
15418: ADD
15419: ST_TO_ADDR
// end ;
15420: GO 15376
15422: POP
15423: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15424: LD_ADDR_VAR 0 6
15428: PUSH
15429: LD_VAR 0 6
15433: PPUSH
15434: LD_VAR 0 2
15438: PUSH
15439: LD_VAR 0 2
15443: ARRAY
15444: PPUSH
15445: LD_VAR 0 3
15449: PPUSH
15450: CALL_OW 1
15454: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15455: LD_ADDR_VAR 0 7
15459: PUSH
15460: LD_VAR 0 7
15464: PPUSH
15465: LD_VAR 0 7
15469: PPUSH
15470: LD_VAR 0 6
15474: PPUSH
15475: CALL_OW 1
15479: ST_TO_ADDR
// for i = s_arr downto 2 do
15480: LD_ADDR_VAR 0 5
15484: PUSH
15485: DOUBLE
15486: LD_VAR 0 7
15490: INC
15491: ST_TO_ADDR
15492: LD_INT 2
15494: PUSH
15495: FOR_DOWNTO
15496: IFFALSE 15580
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15498: LD_ADDR_VAR 0 6
15502: PUSH
15503: LD_VAR 0 7
15507: PUSH
15508: LD_VAR 0 5
15512: PUSH
15513: LD_INT 1
15515: MINUS
15516: ARRAY
15517: PPUSH
15518: LD_VAR 0 2
15522: PUSH
15523: LD_VAR 0 5
15527: PUSH
15528: LD_INT 1
15530: MINUS
15531: ARRAY
15532: PPUSH
15533: LD_VAR 0 7
15537: PUSH
15538: LD_VAR 0 5
15542: ARRAY
15543: PPUSH
15544: CALL_OW 1
15548: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15549: LD_ADDR_VAR 0 7
15553: PUSH
15554: LD_VAR 0 7
15558: PPUSH
15559: LD_VAR 0 5
15563: PUSH
15564: LD_INT 1
15566: MINUS
15567: PPUSH
15568: LD_VAR 0 6
15572: PPUSH
15573: CALL_OW 1
15577: ST_TO_ADDR
// end ;
15578: GO 15495
15580: POP
15581: POP
// result := s_arr [ 1 ] ;
15582: LD_ADDR_VAR 0 4
15586: PUSH
15587: LD_VAR 0 7
15591: PUSH
15592: LD_INT 1
15594: ARRAY
15595: ST_TO_ADDR
// end ; end ;
15596: LD_VAR 0 4
15600: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15601: LD_INT 0
15603: PPUSH
15604: PPUSH
// if not list then
15605: LD_VAR 0 1
15609: NOT
15610: IFFALSE 15614
// exit ;
15612: GO 15705
// i := list [ pos1 ] ;
15614: LD_ADDR_VAR 0 5
15618: PUSH
15619: LD_VAR 0 1
15623: PUSH
15624: LD_VAR 0 2
15628: ARRAY
15629: ST_TO_ADDR
// if not i then
15630: LD_VAR 0 5
15634: NOT
15635: IFFALSE 15639
// exit ;
15637: GO 15705
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15639: LD_ADDR_VAR 0 1
15643: PUSH
15644: LD_VAR 0 1
15648: PPUSH
15649: LD_VAR 0 2
15653: PPUSH
15654: LD_VAR 0 1
15658: PUSH
15659: LD_VAR 0 3
15663: ARRAY
15664: PPUSH
15665: CALL_OW 1
15669: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15670: LD_ADDR_VAR 0 1
15674: PUSH
15675: LD_VAR 0 1
15679: PPUSH
15680: LD_VAR 0 3
15684: PPUSH
15685: LD_VAR 0 5
15689: PPUSH
15690: CALL_OW 1
15694: ST_TO_ADDR
// result := list ;
15695: LD_ADDR_VAR 0 4
15699: PUSH
15700: LD_VAR 0 1
15704: ST_TO_ADDR
// end ;
15705: LD_VAR 0 4
15709: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15710: LD_INT 0
15712: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15713: LD_ADDR_VAR 0 5
15717: PUSH
15718: LD_VAR 0 1
15722: PPUSH
15723: CALL_OW 250
15727: PPUSH
15728: LD_VAR 0 1
15732: PPUSH
15733: CALL_OW 251
15737: PPUSH
15738: LD_VAR 0 2
15742: PPUSH
15743: LD_VAR 0 3
15747: PPUSH
15748: LD_VAR 0 4
15752: PPUSH
15753: CALL 15763 0 5
15757: ST_TO_ADDR
// end ;
15758: LD_VAR 0 5
15762: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15763: LD_INT 0
15765: PPUSH
15766: PPUSH
15767: PPUSH
15768: PPUSH
// if not list then
15769: LD_VAR 0 3
15773: NOT
15774: IFFALSE 15778
// exit ;
15776: GO 16166
// result := [ ] ;
15778: LD_ADDR_VAR 0 6
15782: PUSH
15783: EMPTY
15784: ST_TO_ADDR
// for i in list do
15785: LD_ADDR_VAR 0 7
15789: PUSH
15790: LD_VAR 0 3
15794: PUSH
15795: FOR_IN
15796: IFFALSE 15998
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15798: LD_ADDR_VAR 0 9
15802: PUSH
15803: LD_VAR 0 7
15807: PPUSH
15808: LD_VAR 0 1
15812: PPUSH
15813: LD_VAR 0 2
15817: PPUSH
15818: CALL_OW 297
15822: ST_TO_ADDR
// if not result then
15823: LD_VAR 0 6
15827: NOT
15828: IFFALSE 15854
// result := [ [ i , tmp ] ] else
15830: LD_ADDR_VAR 0 6
15834: PUSH
15835: LD_VAR 0 7
15839: PUSH
15840: LD_VAR 0 9
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: ST_TO_ADDR
15852: GO 15996
// begin if result [ result ] [ 2 ] < tmp then
15854: LD_VAR 0 6
15858: PUSH
15859: LD_VAR 0 6
15863: ARRAY
15864: PUSH
15865: LD_INT 2
15867: ARRAY
15868: PUSH
15869: LD_VAR 0 9
15873: LESS
15874: IFFALSE 15916
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15876: LD_ADDR_VAR 0 6
15880: PUSH
15881: LD_VAR 0 6
15885: PPUSH
15886: LD_VAR 0 6
15890: PUSH
15891: LD_INT 1
15893: PLUS
15894: PPUSH
15895: LD_VAR 0 7
15899: PUSH
15900: LD_VAR 0 9
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: PPUSH
15909: CALL_OW 2
15913: ST_TO_ADDR
15914: GO 15996
// for j = 1 to result do
15916: LD_ADDR_VAR 0 8
15920: PUSH
15921: DOUBLE
15922: LD_INT 1
15924: DEC
15925: ST_TO_ADDR
15926: LD_VAR 0 6
15930: PUSH
15931: FOR_TO
15932: IFFALSE 15994
// begin if tmp < result [ j ] [ 2 ] then
15934: LD_VAR 0 9
15938: PUSH
15939: LD_VAR 0 6
15943: PUSH
15944: LD_VAR 0 8
15948: ARRAY
15949: PUSH
15950: LD_INT 2
15952: ARRAY
15953: LESS
15954: IFFALSE 15992
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15956: LD_ADDR_VAR 0 6
15960: PUSH
15961: LD_VAR 0 6
15965: PPUSH
15966: LD_VAR 0 8
15970: PPUSH
15971: LD_VAR 0 7
15975: PUSH
15976: LD_VAR 0 9
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PPUSH
15985: CALL_OW 2
15989: ST_TO_ADDR
// break ;
15990: GO 15994
// end ; end ;
15992: GO 15931
15994: POP
15995: POP
// end ; end ;
15996: GO 15795
15998: POP
15999: POP
// if result and not asc then
16000: LD_VAR 0 6
16004: PUSH
16005: LD_VAR 0 4
16009: NOT
16010: AND
16011: IFFALSE 16086
// begin tmp := result ;
16013: LD_ADDR_VAR 0 9
16017: PUSH
16018: LD_VAR 0 6
16022: ST_TO_ADDR
// for i = tmp downto 1 do
16023: LD_ADDR_VAR 0 7
16027: PUSH
16028: DOUBLE
16029: LD_VAR 0 9
16033: INC
16034: ST_TO_ADDR
16035: LD_INT 1
16037: PUSH
16038: FOR_DOWNTO
16039: IFFALSE 16084
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16041: LD_ADDR_VAR 0 6
16045: PUSH
16046: LD_VAR 0 6
16050: PPUSH
16051: LD_VAR 0 9
16055: PUSH
16056: LD_VAR 0 7
16060: MINUS
16061: PUSH
16062: LD_INT 1
16064: PLUS
16065: PPUSH
16066: LD_VAR 0 9
16070: PUSH
16071: LD_VAR 0 7
16075: ARRAY
16076: PPUSH
16077: CALL_OW 1
16081: ST_TO_ADDR
16082: GO 16038
16084: POP
16085: POP
// end ; tmp := [ ] ;
16086: LD_ADDR_VAR 0 9
16090: PUSH
16091: EMPTY
16092: ST_TO_ADDR
// if mode then
16093: LD_VAR 0 5
16097: IFFALSE 16166
// begin for i = 1 to result do
16099: LD_ADDR_VAR 0 7
16103: PUSH
16104: DOUBLE
16105: LD_INT 1
16107: DEC
16108: ST_TO_ADDR
16109: LD_VAR 0 6
16113: PUSH
16114: FOR_TO
16115: IFFALSE 16154
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16117: LD_ADDR_VAR 0 9
16121: PUSH
16122: LD_VAR 0 9
16126: PPUSH
16127: LD_VAR 0 7
16131: PPUSH
16132: LD_VAR 0 6
16136: PUSH
16137: LD_VAR 0 7
16141: ARRAY
16142: PUSH
16143: LD_INT 1
16145: ARRAY
16146: PPUSH
16147: CALL_OW 1
16151: ST_TO_ADDR
16152: GO 16114
16154: POP
16155: POP
// result := tmp ;
16156: LD_ADDR_VAR 0 6
16160: PUSH
16161: LD_VAR 0 9
16165: ST_TO_ADDR
// end ; end ;
16166: LD_VAR 0 6
16170: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16171: LD_INT 0
16173: PPUSH
16174: PPUSH
16175: PPUSH
16176: PPUSH
16177: PPUSH
16178: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16179: LD_ADDR_VAR 0 5
16183: PUSH
16184: LD_INT 0
16186: PUSH
16187: LD_INT 0
16189: PUSH
16190: LD_INT 0
16192: PUSH
16193: EMPTY
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: ST_TO_ADDR
// if not x or not y then
16201: LD_VAR 0 2
16205: NOT
16206: PUSH
16207: LD_VAR 0 3
16211: NOT
16212: OR
16213: IFFALSE 16217
// exit ;
16215: GO 17869
// if not range then
16217: LD_VAR 0 4
16221: NOT
16222: IFFALSE 16232
// range := 10 ;
16224: LD_ADDR_VAR 0 4
16228: PUSH
16229: LD_INT 10
16231: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16232: LD_ADDR_VAR 0 8
16236: PUSH
16237: LD_INT 81
16239: PUSH
16240: LD_VAR 0 1
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 92
16251: PUSH
16252: LD_VAR 0 2
16256: PUSH
16257: LD_VAR 0 3
16261: PUSH
16262: LD_VAR 0 4
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: PUSH
16273: LD_INT 3
16275: PUSH
16276: LD_INT 21
16278: PUSH
16279: LD_INT 3
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: PPUSH
16295: CALL_OW 69
16299: ST_TO_ADDR
// if not tmp then
16300: LD_VAR 0 8
16304: NOT
16305: IFFALSE 16309
// exit ;
16307: GO 17869
// for i in tmp do
16309: LD_ADDR_VAR 0 6
16313: PUSH
16314: LD_VAR 0 8
16318: PUSH
16319: FOR_IN
16320: IFFALSE 17844
// begin points := [ 0 , 0 , 0 ] ;
16322: LD_ADDR_VAR 0 9
16326: PUSH
16327: LD_INT 0
16329: PUSH
16330: LD_INT 0
16332: PUSH
16333: LD_INT 0
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: LIST
16340: ST_TO_ADDR
// bpoints := 1 ;
16341: LD_ADDR_VAR 0 10
16345: PUSH
16346: LD_INT 1
16348: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16349: LD_VAR 0 6
16353: PPUSH
16354: CALL_OW 247
16358: PUSH
16359: LD_INT 1
16361: DOUBLE
16362: EQUAL
16363: IFTRUE 16367
16365: GO 16945
16367: POP
// begin if GetClass ( i ) = 1 then
16368: LD_VAR 0 6
16372: PPUSH
16373: CALL_OW 257
16377: PUSH
16378: LD_INT 1
16380: EQUAL
16381: IFFALSE 16402
// points := [ 10 , 5 , 3 ] ;
16383: LD_ADDR_VAR 0 9
16387: PUSH
16388: LD_INT 10
16390: PUSH
16391: LD_INT 5
16393: PUSH
16394: LD_INT 3
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: LIST
16401: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16402: LD_VAR 0 6
16406: PPUSH
16407: CALL_OW 257
16411: PUSH
16412: LD_INT 2
16414: PUSH
16415: LD_INT 3
16417: PUSH
16418: LD_INT 4
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: LIST
16425: IN
16426: IFFALSE 16447
// points := [ 3 , 2 , 1 ] ;
16428: LD_ADDR_VAR 0 9
16432: PUSH
16433: LD_INT 3
16435: PUSH
16436: LD_INT 2
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: LIST
16446: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16447: LD_VAR 0 6
16451: PPUSH
16452: CALL_OW 257
16456: PUSH
16457: LD_INT 5
16459: EQUAL
16460: IFFALSE 16481
// points := [ 130 , 5 , 2 ] ;
16462: LD_ADDR_VAR 0 9
16466: PUSH
16467: LD_INT 130
16469: PUSH
16470: LD_INT 5
16472: PUSH
16473: LD_INT 2
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16481: LD_VAR 0 6
16485: PPUSH
16486: CALL_OW 257
16490: PUSH
16491: LD_INT 8
16493: EQUAL
16494: IFFALSE 16515
// points := [ 35 , 35 , 30 ] ;
16496: LD_ADDR_VAR 0 9
16500: PUSH
16501: LD_INT 35
16503: PUSH
16504: LD_INT 35
16506: PUSH
16507: LD_INT 30
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16515: LD_VAR 0 6
16519: PPUSH
16520: CALL_OW 257
16524: PUSH
16525: LD_INT 9
16527: EQUAL
16528: IFFALSE 16549
// points := [ 20 , 55 , 40 ] ;
16530: LD_ADDR_VAR 0 9
16534: PUSH
16535: LD_INT 20
16537: PUSH
16538: LD_INT 55
16540: PUSH
16541: LD_INT 40
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16549: LD_VAR 0 6
16553: PPUSH
16554: CALL_OW 257
16558: PUSH
16559: LD_INT 12
16561: PUSH
16562: LD_INT 16
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: IN
16569: IFFALSE 16590
// points := [ 5 , 3 , 2 ] ;
16571: LD_ADDR_VAR 0 9
16575: PUSH
16576: LD_INT 5
16578: PUSH
16579: LD_INT 3
16581: PUSH
16582: LD_INT 2
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: LIST
16589: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16590: LD_VAR 0 6
16594: PPUSH
16595: CALL_OW 257
16599: PUSH
16600: LD_INT 17
16602: EQUAL
16603: IFFALSE 16624
// points := [ 100 , 50 , 75 ] ;
16605: LD_ADDR_VAR 0 9
16609: PUSH
16610: LD_INT 100
16612: PUSH
16613: LD_INT 50
16615: PUSH
16616: LD_INT 75
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: LIST
16623: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16624: LD_VAR 0 6
16628: PPUSH
16629: CALL_OW 257
16633: PUSH
16634: LD_INT 15
16636: EQUAL
16637: IFFALSE 16658
// points := [ 10 , 5 , 3 ] ;
16639: LD_ADDR_VAR 0 9
16643: PUSH
16644: LD_INT 10
16646: PUSH
16647: LD_INT 5
16649: PUSH
16650: LD_INT 3
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16658: LD_VAR 0 6
16662: PPUSH
16663: CALL_OW 257
16667: PUSH
16668: LD_INT 14
16670: EQUAL
16671: IFFALSE 16692
// points := [ 10 , 0 , 0 ] ;
16673: LD_ADDR_VAR 0 9
16677: PUSH
16678: LD_INT 10
16680: PUSH
16681: LD_INT 0
16683: PUSH
16684: LD_INT 0
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: LIST
16691: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16692: LD_VAR 0 6
16696: PPUSH
16697: CALL_OW 257
16701: PUSH
16702: LD_INT 11
16704: EQUAL
16705: IFFALSE 16726
// points := [ 30 , 10 , 5 ] ;
16707: LD_ADDR_VAR 0 9
16711: PUSH
16712: LD_INT 30
16714: PUSH
16715: LD_INT 10
16717: PUSH
16718: LD_INT 5
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16726: LD_VAR 0 1
16730: PPUSH
16731: LD_INT 5
16733: PPUSH
16734: CALL_OW 321
16738: PUSH
16739: LD_INT 2
16741: EQUAL
16742: IFFALSE 16759
// bpoints := bpoints * 1.8 ;
16744: LD_ADDR_VAR 0 10
16748: PUSH
16749: LD_VAR 0 10
16753: PUSH
16754: LD_REAL  1.80000000000000E+0000
16757: MUL
16758: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16759: LD_VAR 0 6
16763: PPUSH
16764: CALL_OW 257
16768: PUSH
16769: LD_INT 1
16771: PUSH
16772: LD_INT 2
16774: PUSH
16775: LD_INT 3
16777: PUSH
16778: LD_INT 4
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: IN
16787: PUSH
16788: LD_VAR 0 1
16792: PPUSH
16793: LD_INT 51
16795: PPUSH
16796: CALL_OW 321
16800: PUSH
16801: LD_INT 2
16803: EQUAL
16804: AND
16805: IFFALSE 16822
// bpoints := bpoints * 1.2 ;
16807: LD_ADDR_VAR 0 10
16811: PUSH
16812: LD_VAR 0 10
16816: PUSH
16817: LD_REAL  1.20000000000000E+0000
16820: MUL
16821: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16822: LD_VAR 0 6
16826: PPUSH
16827: CALL_OW 257
16831: PUSH
16832: LD_INT 5
16834: PUSH
16835: LD_INT 7
16837: PUSH
16838: LD_INT 9
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: IN
16846: PUSH
16847: LD_VAR 0 1
16851: PPUSH
16852: LD_INT 52
16854: PPUSH
16855: CALL_OW 321
16859: PUSH
16860: LD_INT 2
16862: EQUAL
16863: AND
16864: IFFALSE 16881
// bpoints := bpoints * 1.5 ;
16866: LD_ADDR_VAR 0 10
16870: PUSH
16871: LD_VAR 0 10
16875: PUSH
16876: LD_REAL  1.50000000000000E+0000
16879: MUL
16880: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16881: LD_VAR 0 1
16885: PPUSH
16886: LD_INT 66
16888: PPUSH
16889: CALL_OW 321
16893: PUSH
16894: LD_INT 2
16896: EQUAL
16897: IFFALSE 16914
// bpoints := bpoints * 1.1 ;
16899: LD_ADDR_VAR 0 10
16903: PUSH
16904: LD_VAR 0 10
16908: PUSH
16909: LD_REAL  1.10000000000000E+0000
16912: MUL
16913: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16914: LD_ADDR_VAR 0 10
16918: PUSH
16919: LD_VAR 0 10
16923: PUSH
16924: LD_VAR 0 6
16928: PPUSH
16929: LD_INT 1
16931: PPUSH
16932: CALL_OW 259
16936: PUSH
16937: LD_REAL  1.15000000000000E+0000
16940: MUL
16941: MUL
16942: ST_TO_ADDR
// end ; unit_vehicle :
16943: GO 17773
16945: LD_INT 2
16947: DOUBLE
16948: EQUAL
16949: IFTRUE 16953
16951: GO 17761
16953: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16954: LD_VAR 0 6
16958: PPUSH
16959: CALL_OW 264
16963: PUSH
16964: LD_INT 2
16966: PUSH
16967: LD_INT 42
16969: PUSH
16970: LD_INT 24
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: LIST
16977: IN
16978: IFFALSE 16999
// points := [ 25 , 5 , 3 ] ;
16980: LD_ADDR_VAR 0 9
16984: PUSH
16985: LD_INT 25
16987: PUSH
16988: LD_INT 5
16990: PUSH
16991: LD_INT 3
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: LIST
16998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16999: LD_VAR 0 6
17003: PPUSH
17004: CALL_OW 264
17008: PUSH
17009: LD_INT 4
17011: PUSH
17012: LD_INT 43
17014: PUSH
17015: LD_INT 25
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: IN
17023: IFFALSE 17044
// points := [ 40 , 15 , 5 ] ;
17025: LD_ADDR_VAR 0 9
17029: PUSH
17030: LD_INT 40
17032: PUSH
17033: LD_INT 15
17035: PUSH
17036: LD_INT 5
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: LIST
17043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17044: LD_VAR 0 6
17048: PPUSH
17049: CALL_OW 264
17053: PUSH
17054: LD_INT 3
17056: PUSH
17057: LD_INT 23
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: IN
17064: IFFALSE 17085
// points := [ 7 , 25 , 8 ] ;
17066: LD_ADDR_VAR 0 9
17070: PUSH
17071: LD_INT 7
17073: PUSH
17074: LD_INT 25
17076: PUSH
17077: LD_INT 8
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17085: LD_VAR 0 6
17089: PPUSH
17090: CALL_OW 264
17094: PUSH
17095: LD_INT 5
17097: PUSH
17098: LD_INT 27
17100: PUSH
17101: LD_INT 44
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: LIST
17108: IN
17109: IFFALSE 17130
// points := [ 14 , 50 , 16 ] ;
17111: LD_ADDR_VAR 0 9
17115: PUSH
17116: LD_INT 14
17118: PUSH
17119: LD_INT 50
17121: PUSH
17122: LD_INT 16
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: LIST
17129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17130: LD_VAR 0 6
17134: PPUSH
17135: CALL_OW 264
17139: PUSH
17140: LD_INT 6
17142: PUSH
17143: LD_INT 46
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: IN
17150: IFFALSE 17171
// points := [ 32 , 120 , 70 ] ;
17152: LD_ADDR_VAR 0 9
17156: PUSH
17157: LD_INT 32
17159: PUSH
17160: LD_INT 120
17162: PUSH
17163: LD_INT 70
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: LIST
17170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17171: LD_VAR 0 6
17175: PPUSH
17176: CALL_OW 264
17180: PUSH
17181: LD_INT 7
17183: PUSH
17184: LD_INT 28
17186: PUSH
17187: LD_INT 45
17189: PUSH
17190: LD_EXP 92
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: IN
17201: IFFALSE 17222
// points := [ 35 , 20 , 45 ] ;
17203: LD_ADDR_VAR 0 9
17207: PUSH
17208: LD_INT 35
17210: PUSH
17211: LD_INT 20
17213: PUSH
17214: LD_INT 45
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: LIST
17221: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17222: LD_VAR 0 6
17226: PPUSH
17227: CALL_OW 264
17231: PUSH
17232: LD_INT 47
17234: PUSH
17235: EMPTY
17236: LIST
17237: IN
17238: IFFALSE 17259
// points := [ 67 , 45 , 75 ] ;
17240: LD_ADDR_VAR 0 9
17244: PUSH
17245: LD_INT 67
17247: PUSH
17248: LD_INT 45
17250: PUSH
17251: LD_INT 75
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: LIST
17258: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17259: LD_VAR 0 6
17263: PPUSH
17264: CALL_OW 264
17268: PUSH
17269: LD_INT 26
17271: PUSH
17272: EMPTY
17273: LIST
17274: IN
17275: IFFALSE 17296
// points := [ 120 , 30 , 80 ] ;
17277: LD_ADDR_VAR 0 9
17281: PUSH
17282: LD_INT 120
17284: PUSH
17285: LD_INT 30
17287: PUSH
17288: LD_INT 80
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: LIST
17295: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17296: LD_VAR 0 6
17300: PPUSH
17301: CALL_OW 264
17305: PUSH
17306: LD_INT 22
17308: PUSH
17309: EMPTY
17310: LIST
17311: IN
17312: IFFALSE 17333
// points := [ 40 , 1 , 1 ] ;
17314: LD_ADDR_VAR 0 9
17318: PUSH
17319: LD_INT 40
17321: PUSH
17322: LD_INT 1
17324: PUSH
17325: LD_INT 1
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17333: LD_VAR 0 6
17337: PPUSH
17338: CALL_OW 264
17342: PUSH
17343: LD_INT 29
17345: PUSH
17346: EMPTY
17347: LIST
17348: IN
17349: IFFALSE 17370
// points := [ 70 , 200 , 400 ] ;
17351: LD_ADDR_VAR 0 9
17355: PUSH
17356: LD_INT 70
17358: PUSH
17359: LD_INT 200
17361: PUSH
17362: LD_INT 400
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: LIST
17369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17370: LD_VAR 0 6
17374: PPUSH
17375: CALL_OW 264
17379: PUSH
17380: LD_INT 14
17382: PUSH
17383: LD_INT 53
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: IN
17390: IFFALSE 17411
// points := [ 40 , 10 , 20 ] ;
17392: LD_ADDR_VAR 0 9
17396: PUSH
17397: LD_INT 40
17399: PUSH
17400: LD_INT 10
17402: PUSH
17403: LD_INT 20
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17411: LD_VAR 0 6
17415: PPUSH
17416: CALL_OW 264
17420: PUSH
17421: LD_INT 9
17423: PUSH
17424: EMPTY
17425: LIST
17426: IN
17427: IFFALSE 17448
// points := [ 5 , 70 , 20 ] ;
17429: LD_ADDR_VAR 0 9
17433: PUSH
17434: LD_INT 5
17436: PUSH
17437: LD_INT 70
17439: PUSH
17440: LD_INT 20
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17448: LD_VAR 0 6
17452: PPUSH
17453: CALL_OW 264
17457: PUSH
17458: LD_INT 10
17460: PUSH
17461: EMPTY
17462: LIST
17463: IN
17464: IFFALSE 17485
// points := [ 35 , 110 , 70 ] ;
17466: LD_ADDR_VAR 0 9
17470: PUSH
17471: LD_INT 35
17473: PUSH
17474: LD_INT 110
17476: PUSH
17477: LD_INT 70
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17485: LD_VAR 0 6
17489: PPUSH
17490: CALL_OW 265
17494: PUSH
17495: LD_INT 25
17497: EQUAL
17498: IFFALSE 17519
// points := [ 80 , 65 , 100 ] ;
17500: LD_ADDR_VAR 0 9
17504: PUSH
17505: LD_INT 80
17507: PUSH
17508: LD_INT 65
17510: PUSH
17511: LD_INT 100
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: LIST
17518: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17519: LD_VAR 0 6
17523: PPUSH
17524: CALL_OW 263
17528: PUSH
17529: LD_INT 1
17531: EQUAL
17532: IFFALSE 17567
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17534: LD_ADDR_VAR 0 10
17538: PUSH
17539: LD_VAR 0 10
17543: PUSH
17544: LD_VAR 0 6
17548: PPUSH
17549: CALL_OW 311
17553: PPUSH
17554: LD_INT 3
17556: PPUSH
17557: CALL_OW 259
17561: PUSH
17562: LD_INT 4
17564: MUL
17565: MUL
17566: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17567: LD_VAR 0 6
17571: PPUSH
17572: CALL_OW 263
17576: PUSH
17577: LD_INT 2
17579: EQUAL
17580: IFFALSE 17631
// begin j := IsControledBy ( i ) ;
17582: LD_ADDR_VAR 0 7
17586: PUSH
17587: LD_VAR 0 6
17591: PPUSH
17592: CALL_OW 312
17596: ST_TO_ADDR
// if j then
17597: LD_VAR 0 7
17601: IFFALSE 17631
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17603: LD_ADDR_VAR 0 10
17607: PUSH
17608: LD_VAR 0 10
17612: PUSH
17613: LD_VAR 0 7
17617: PPUSH
17618: LD_INT 3
17620: PPUSH
17621: CALL_OW 259
17625: PUSH
17626: LD_INT 3
17628: MUL
17629: MUL
17630: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17631: LD_VAR 0 6
17635: PPUSH
17636: CALL_OW 264
17640: PUSH
17641: LD_INT 5
17643: PUSH
17644: LD_INT 6
17646: PUSH
17647: LD_INT 46
17649: PUSH
17650: LD_INT 44
17652: PUSH
17653: LD_INT 47
17655: PUSH
17656: LD_INT 45
17658: PUSH
17659: LD_INT 28
17661: PUSH
17662: LD_INT 7
17664: PUSH
17665: LD_INT 27
17667: PUSH
17668: LD_INT 29
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: IN
17683: PUSH
17684: LD_VAR 0 1
17688: PPUSH
17689: LD_INT 52
17691: PPUSH
17692: CALL_OW 321
17696: PUSH
17697: LD_INT 2
17699: EQUAL
17700: AND
17701: IFFALSE 17718
// bpoints := bpoints * 1.2 ;
17703: LD_ADDR_VAR 0 10
17707: PUSH
17708: LD_VAR 0 10
17712: PUSH
17713: LD_REAL  1.20000000000000E+0000
17716: MUL
17717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17718: LD_VAR 0 6
17722: PPUSH
17723: CALL_OW 264
17727: PUSH
17728: LD_INT 6
17730: PUSH
17731: LD_INT 46
17733: PUSH
17734: LD_INT 47
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: LIST
17741: IN
17742: IFFALSE 17759
// bpoints := bpoints * 1.2 ;
17744: LD_ADDR_VAR 0 10
17748: PUSH
17749: LD_VAR 0 10
17753: PUSH
17754: LD_REAL  1.20000000000000E+0000
17757: MUL
17758: ST_TO_ADDR
// end ; unit_building :
17759: GO 17773
17761: LD_INT 3
17763: DOUBLE
17764: EQUAL
17765: IFTRUE 17769
17767: GO 17772
17769: POP
// ; end ;
17770: GO 17773
17772: POP
// for j = 1 to 3 do
17773: LD_ADDR_VAR 0 7
17777: PUSH
17778: DOUBLE
17779: LD_INT 1
17781: DEC
17782: ST_TO_ADDR
17783: LD_INT 3
17785: PUSH
17786: FOR_TO
17787: IFFALSE 17840
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17789: LD_ADDR_VAR 0 5
17793: PUSH
17794: LD_VAR 0 5
17798: PPUSH
17799: LD_VAR 0 7
17803: PPUSH
17804: LD_VAR 0 5
17808: PUSH
17809: LD_VAR 0 7
17813: ARRAY
17814: PUSH
17815: LD_VAR 0 9
17819: PUSH
17820: LD_VAR 0 7
17824: ARRAY
17825: PUSH
17826: LD_VAR 0 10
17830: MUL
17831: PLUS
17832: PPUSH
17833: CALL_OW 1
17837: ST_TO_ADDR
17838: GO 17786
17840: POP
17841: POP
// end ;
17842: GO 16319
17844: POP
17845: POP
// result := Replace ( result , 4 , tmp ) ;
17846: LD_ADDR_VAR 0 5
17850: PUSH
17851: LD_VAR 0 5
17855: PPUSH
17856: LD_INT 4
17858: PPUSH
17859: LD_VAR 0 8
17863: PPUSH
17864: CALL_OW 1
17868: ST_TO_ADDR
// end ;
17869: LD_VAR 0 5
17873: RET
// export function DangerAtRange ( unit , range ) ; begin
17874: LD_INT 0
17876: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17877: LD_ADDR_VAR 0 3
17881: PUSH
17882: LD_VAR 0 1
17886: PPUSH
17887: CALL_OW 255
17891: PPUSH
17892: LD_VAR 0 1
17896: PPUSH
17897: CALL_OW 250
17901: PPUSH
17902: LD_VAR 0 1
17906: PPUSH
17907: CALL_OW 251
17911: PPUSH
17912: LD_VAR 0 2
17916: PPUSH
17917: CALL 16171 0 4
17921: ST_TO_ADDR
// end ;
17922: LD_VAR 0 3
17926: RET
// export function DangerInArea ( side , area ) ; begin
17927: LD_INT 0
17929: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17930: LD_ADDR_VAR 0 3
17934: PUSH
17935: LD_VAR 0 2
17939: PPUSH
17940: LD_INT 81
17942: PUSH
17943: LD_VAR 0 1
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PPUSH
17952: CALL_OW 70
17956: ST_TO_ADDR
// end ;
17957: LD_VAR 0 3
17961: RET
// export function IsExtension ( b ) ; begin
17962: LD_INT 0
17964: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17965: LD_ADDR_VAR 0 2
17969: PUSH
17970: LD_VAR 0 1
17974: PUSH
17975: LD_INT 23
17977: PUSH
17978: LD_INT 20
17980: PUSH
17981: LD_INT 22
17983: PUSH
17984: LD_INT 17
17986: PUSH
17987: LD_INT 24
17989: PUSH
17990: LD_INT 21
17992: PUSH
17993: LD_INT 19
17995: PUSH
17996: LD_INT 16
17998: PUSH
17999: LD_INT 25
18001: PUSH
18002: LD_INT 18
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: IN
18017: ST_TO_ADDR
// end ;
18018: LD_VAR 0 2
18022: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18023: LD_INT 0
18025: PPUSH
18026: PPUSH
18027: PPUSH
// result := [ ] ;
18028: LD_ADDR_VAR 0 4
18032: PUSH
18033: EMPTY
18034: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18035: LD_ADDR_VAR 0 5
18039: PUSH
18040: LD_VAR 0 2
18044: PPUSH
18045: LD_INT 21
18047: PUSH
18048: LD_INT 3
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PPUSH
18055: CALL_OW 70
18059: ST_TO_ADDR
// if not tmp then
18060: LD_VAR 0 5
18064: NOT
18065: IFFALSE 18069
// exit ;
18067: GO 18133
// if checkLink then
18069: LD_VAR 0 3
18073: IFFALSE 18123
// begin for i in tmp do
18075: LD_ADDR_VAR 0 6
18079: PUSH
18080: LD_VAR 0 5
18084: PUSH
18085: FOR_IN
18086: IFFALSE 18121
// if GetBase ( i ) <> base then
18088: LD_VAR 0 6
18092: PPUSH
18093: CALL_OW 274
18097: PUSH
18098: LD_VAR 0 1
18102: NONEQUAL
18103: IFFALSE 18119
// ComLinkToBase ( base , i ) ;
18105: LD_VAR 0 1
18109: PPUSH
18110: LD_VAR 0 6
18114: PPUSH
18115: CALL_OW 169
18119: GO 18085
18121: POP
18122: POP
// end ; result := tmp ;
18123: LD_ADDR_VAR 0 4
18127: PUSH
18128: LD_VAR 0 5
18132: ST_TO_ADDR
// end ;
18133: LD_VAR 0 4
18137: RET
// export function ComComplete ( units , b ) ; var i ; begin
18138: LD_INT 0
18140: PPUSH
18141: PPUSH
// if not units then
18142: LD_VAR 0 1
18146: NOT
18147: IFFALSE 18151
// exit ;
18149: GO 18241
// for i in units do
18151: LD_ADDR_VAR 0 4
18155: PUSH
18156: LD_VAR 0 1
18160: PUSH
18161: FOR_IN
18162: IFFALSE 18239
// if BuildingStatus ( b ) = bs_build then
18164: LD_VAR 0 2
18168: PPUSH
18169: CALL_OW 461
18173: PUSH
18174: LD_INT 1
18176: EQUAL
18177: IFFALSE 18237
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18179: LD_VAR 0 4
18183: PPUSH
18184: LD_STRING h
18186: PUSH
18187: LD_VAR 0 2
18191: PPUSH
18192: CALL_OW 250
18196: PUSH
18197: LD_VAR 0 2
18201: PPUSH
18202: CALL_OW 251
18206: PUSH
18207: LD_VAR 0 2
18211: PUSH
18212: LD_INT 0
18214: PUSH
18215: LD_INT 0
18217: PUSH
18218: LD_INT 0
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: PUSH
18230: EMPTY
18231: LIST
18232: PPUSH
18233: CALL_OW 446
18237: GO 18161
18239: POP
18240: POP
// end ;
18241: LD_VAR 0 3
18245: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18246: LD_INT 0
18248: PPUSH
18249: PPUSH
18250: PPUSH
18251: PPUSH
18252: PPUSH
18253: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18254: LD_VAR 0 1
18258: NOT
18259: PUSH
18260: LD_VAR 0 1
18264: PPUSH
18265: CALL_OW 263
18269: PUSH
18270: LD_INT 2
18272: NONEQUAL
18273: OR
18274: IFFALSE 18278
// exit ;
18276: GO 18594
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18278: LD_ADDR_VAR 0 6
18282: PUSH
18283: LD_INT 22
18285: PUSH
18286: LD_VAR 0 1
18290: PPUSH
18291: CALL_OW 255
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 2
18302: PUSH
18303: LD_INT 30
18305: PUSH
18306: LD_INT 36
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 34
18315: PUSH
18316: LD_INT 31
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PPUSH
18332: CALL_OW 69
18336: ST_TO_ADDR
// if not tmp then
18337: LD_VAR 0 6
18341: NOT
18342: IFFALSE 18346
// exit ;
18344: GO 18594
// result := [ ] ;
18346: LD_ADDR_VAR 0 2
18350: PUSH
18351: EMPTY
18352: ST_TO_ADDR
// for i in tmp do
18353: LD_ADDR_VAR 0 3
18357: PUSH
18358: LD_VAR 0 6
18362: PUSH
18363: FOR_IN
18364: IFFALSE 18435
// begin t := UnitsInside ( i ) ;
18366: LD_ADDR_VAR 0 4
18370: PUSH
18371: LD_VAR 0 3
18375: PPUSH
18376: CALL_OW 313
18380: ST_TO_ADDR
// if t then
18381: LD_VAR 0 4
18385: IFFALSE 18433
// for j in t do
18387: LD_ADDR_VAR 0 7
18391: PUSH
18392: LD_VAR 0 4
18396: PUSH
18397: FOR_IN
18398: IFFALSE 18431
// result := Replace ( result , result + 1 , j ) ;
18400: LD_ADDR_VAR 0 2
18404: PUSH
18405: LD_VAR 0 2
18409: PPUSH
18410: LD_VAR 0 2
18414: PUSH
18415: LD_INT 1
18417: PLUS
18418: PPUSH
18419: LD_VAR 0 7
18423: PPUSH
18424: CALL_OW 1
18428: ST_TO_ADDR
18429: GO 18397
18431: POP
18432: POP
// end ;
18433: GO 18363
18435: POP
18436: POP
// if not result then
18437: LD_VAR 0 2
18441: NOT
18442: IFFALSE 18446
// exit ;
18444: GO 18594
// mech := result [ 1 ] ;
18446: LD_ADDR_VAR 0 5
18450: PUSH
18451: LD_VAR 0 2
18455: PUSH
18456: LD_INT 1
18458: ARRAY
18459: ST_TO_ADDR
// if result > 1 then
18460: LD_VAR 0 2
18464: PUSH
18465: LD_INT 1
18467: GREATER
18468: IFFALSE 18580
// begin for i = 2 to result do
18470: LD_ADDR_VAR 0 3
18474: PUSH
18475: DOUBLE
18476: LD_INT 2
18478: DEC
18479: ST_TO_ADDR
18480: LD_VAR 0 2
18484: PUSH
18485: FOR_TO
18486: IFFALSE 18578
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18488: LD_ADDR_VAR 0 4
18492: PUSH
18493: LD_VAR 0 2
18497: PUSH
18498: LD_VAR 0 3
18502: ARRAY
18503: PPUSH
18504: LD_INT 3
18506: PPUSH
18507: CALL_OW 259
18511: PUSH
18512: LD_VAR 0 2
18516: PUSH
18517: LD_VAR 0 3
18521: ARRAY
18522: PPUSH
18523: CALL_OW 432
18527: MINUS
18528: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18529: LD_VAR 0 4
18533: PUSH
18534: LD_VAR 0 5
18538: PPUSH
18539: LD_INT 3
18541: PPUSH
18542: CALL_OW 259
18546: PUSH
18547: LD_VAR 0 5
18551: PPUSH
18552: CALL_OW 432
18556: MINUS
18557: GREATEREQUAL
18558: IFFALSE 18576
// mech := result [ i ] ;
18560: LD_ADDR_VAR 0 5
18564: PUSH
18565: LD_VAR 0 2
18569: PUSH
18570: LD_VAR 0 3
18574: ARRAY
18575: ST_TO_ADDR
// end ;
18576: GO 18485
18578: POP
18579: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18580: LD_VAR 0 1
18584: PPUSH
18585: LD_VAR 0 5
18589: PPUSH
18590: CALL_OW 135
// end ;
18594: LD_VAR 0 2
18598: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18599: LD_INT 0
18601: PPUSH
18602: PPUSH
18603: PPUSH
18604: PPUSH
18605: PPUSH
18606: PPUSH
18607: PPUSH
18608: PPUSH
18609: PPUSH
18610: PPUSH
18611: PPUSH
18612: PPUSH
18613: PPUSH
// result := [ ] ;
18614: LD_ADDR_VAR 0 7
18618: PUSH
18619: EMPTY
18620: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18621: LD_VAR 0 1
18625: PPUSH
18626: CALL_OW 266
18630: PUSH
18631: LD_INT 0
18633: PUSH
18634: LD_INT 1
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: IN
18641: NOT
18642: IFFALSE 18646
// exit ;
18644: GO 20280
// if name then
18646: LD_VAR 0 3
18650: IFFALSE 18666
// SetBName ( base_dep , name ) ;
18652: LD_VAR 0 1
18656: PPUSH
18657: LD_VAR 0 3
18661: PPUSH
18662: CALL_OW 500
// base := GetBase ( base_dep ) ;
18666: LD_ADDR_VAR 0 15
18670: PUSH
18671: LD_VAR 0 1
18675: PPUSH
18676: CALL_OW 274
18680: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18681: LD_ADDR_VAR 0 16
18685: PUSH
18686: LD_VAR 0 1
18690: PPUSH
18691: CALL_OW 255
18695: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18696: LD_ADDR_VAR 0 17
18700: PUSH
18701: LD_VAR 0 1
18705: PPUSH
18706: CALL_OW 248
18710: ST_TO_ADDR
// if sources then
18711: LD_VAR 0 5
18715: IFFALSE 18762
// for i = 1 to 3 do
18717: LD_ADDR_VAR 0 8
18721: PUSH
18722: DOUBLE
18723: LD_INT 1
18725: DEC
18726: ST_TO_ADDR
18727: LD_INT 3
18729: PUSH
18730: FOR_TO
18731: IFFALSE 18760
// AddResourceType ( base , i , sources [ i ] ) ;
18733: LD_VAR 0 15
18737: PPUSH
18738: LD_VAR 0 8
18742: PPUSH
18743: LD_VAR 0 5
18747: PUSH
18748: LD_VAR 0 8
18752: ARRAY
18753: PPUSH
18754: CALL_OW 276
18758: GO 18730
18760: POP
18761: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18762: LD_ADDR_VAR 0 18
18766: PUSH
18767: LD_VAR 0 15
18771: PPUSH
18772: LD_VAR 0 2
18776: PPUSH
18777: LD_INT 1
18779: PPUSH
18780: CALL 18023 0 3
18784: ST_TO_ADDR
// InitHc ;
18785: CALL_OW 19
// InitUc ;
18789: CALL_OW 18
// uc_side := side ;
18793: LD_ADDR_OWVAR 20
18797: PUSH
18798: LD_VAR 0 16
18802: ST_TO_ADDR
// uc_nation := nation ;
18803: LD_ADDR_OWVAR 21
18807: PUSH
18808: LD_VAR 0 17
18812: ST_TO_ADDR
// if buildings then
18813: LD_VAR 0 18
18817: IFFALSE 20139
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18819: LD_ADDR_VAR 0 19
18823: PUSH
18824: LD_VAR 0 18
18828: PPUSH
18829: LD_INT 2
18831: PUSH
18832: LD_INT 30
18834: PUSH
18835: LD_INT 29
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: LD_INT 30
18844: PUSH
18845: LD_INT 30
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: LIST
18856: PPUSH
18857: CALL_OW 72
18861: ST_TO_ADDR
// if tmp then
18862: LD_VAR 0 19
18866: IFFALSE 18914
// for i in tmp do
18868: LD_ADDR_VAR 0 8
18872: PUSH
18873: LD_VAR 0 19
18877: PUSH
18878: FOR_IN
18879: IFFALSE 18912
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18881: LD_VAR 0 8
18885: PPUSH
18886: CALL_OW 250
18890: PPUSH
18891: LD_VAR 0 8
18895: PPUSH
18896: CALL_OW 251
18900: PPUSH
18901: LD_VAR 0 16
18905: PPUSH
18906: CALL_OW 441
18910: GO 18878
18912: POP
18913: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18914: LD_VAR 0 18
18918: PPUSH
18919: LD_INT 2
18921: PUSH
18922: LD_INT 30
18924: PUSH
18925: LD_INT 32
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 30
18934: PUSH
18935: LD_INT 33
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: PPUSH
18947: CALL_OW 72
18951: IFFALSE 19039
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18953: LD_ADDR_VAR 0 8
18957: PUSH
18958: LD_VAR 0 18
18962: PPUSH
18963: LD_INT 2
18965: PUSH
18966: LD_INT 30
18968: PUSH
18969: LD_INT 32
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 30
18978: PUSH
18979: LD_INT 33
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: LIST
18990: PPUSH
18991: CALL_OW 72
18995: PUSH
18996: FOR_IN
18997: IFFALSE 19037
// begin if not GetBWeapon ( i ) then
18999: LD_VAR 0 8
19003: PPUSH
19004: CALL_OW 269
19008: NOT
19009: IFFALSE 19035
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19011: LD_VAR 0 8
19015: PPUSH
19016: LD_VAR 0 8
19020: PPUSH
19021: LD_VAR 0 2
19025: PPUSH
19026: CALL 20285 0 2
19030: PPUSH
19031: CALL_OW 431
// end ;
19035: GO 18996
19037: POP
19038: POP
// end ; for i = 1 to personel do
19039: LD_ADDR_VAR 0 8
19043: PUSH
19044: DOUBLE
19045: LD_INT 1
19047: DEC
19048: ST_TO_ADDR
19049: LD_VAR 0 6
19053: PUSH
19054: FOR_TO
19055: IFFALSE 20119
// begin if i > 4 then
19057: LD_VAR 0 8
19061: PUSH
19062: LD_INT 4
19064: GREATER
19065: IFFALSE 19069
// break ;
19067: GO 20119
// case i of 1 :
19069: LD_VAR 0 8
19073: PUSH
19074: LD_INT 1
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19162
19082: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19083: LD_ADDR_VAR 0 12
19087: PUSH
19088: LD_VAR 0 18
19092: PPUSH
19093: LD_INT 22
19095: PUSH
19096: LD_VAR 0 16
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 58
19107: PUSH
19108: EMPTY
19109: LIST
19110: PUSH
19111: LD_INT 2
19113: PUSH
19114: LD_INT 30
19116: PUSH
19117: LD_INT 32
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 30
19126: PUSH
19127: LD_INT 4
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 30
19136: PUSH
19137: LD_INT 5
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: PPUSH
19155: CALL_OW 72
19159: ST_TO_ADDR
19160: GO 19384
19162: LD_INT 2
19164: DOUBLE
19165: EQUAL
19166: IFTRUE 19170
19168: GO 19232
19170: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19171: LD_ADDR_VAR 0 12
19175: PUSH
19176: LD_VAR 0 18
19180: PPUSH
19181: LD_INT 22
19183: PUSH
19184: LD_VAR 0 16
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: LD_INT 30
19198: PUSH
19199: LD_INT 0
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 30
19208: PUSH
19209: LD_INT 1
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 72
19229: ST_TO_ADDR
19230: GO 19384
19232: LD_INT 3
19234: DOUBLE
19235: EQUAL
19236: IFTRUE 19240
19238: GO 19302
19240: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19241: LD_ADDR_VAR 0 12
19245: PUSH
19246: LD_VAR 0 18
19250: PPUSH
19251: LD_INT 22
19253: PUSH
19254: LD_VAR 0 16
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: LD_INT 30
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 30
19278: PUSH
19279: LD_INT 3
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: LIST
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PPUSH
19295: CALL_OW 72
19299: ST_TO_ADDR
19300: GO 19384
19302: LD_INT 4
19304: DOUBLE
19305: EQUAL
19306: IFTRUE 19310
19308: GO 19383
19310: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19311: LD_ADDR_VAR 0 12
19315: PUSH
19316: LD_VAR 0 18
19320: PPUSH
19321: LD_INT 22
19323: PUSH
19324: LD_VAR 0 16
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: LD_INT 2
19335: PUSH
19336: LD_INT 30
19338: PUSH
19339: LD_INT 6
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 30
19348: PUSH
19349: LD_INT 7
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 30
19358: PUSH
19359: LD_INT 8
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PPUSH
19376: CALL_OW 72
19380: ST_TO_ADDR
19381: GO 19384
19383: POP
// if i = 1 then
19384: LD_VAR 0 8
19388: PUSH
19389: LD_INT 1
19391: EQUAL
19392: IFFALSE 19503
// begin tmp := [ ] ;
19394: LD_ADDR_VAR 0 19
19398: PUSH
19399: EMPTY
19400: ST_TO_ADDR
// for j in f do
19401: LD_ADDR_VAR 0 9
19405: PUSH
19406: LD_VAR 0 12
19410: PUSH
19411: FOR_IN
19412: IFFALSE 19485
// if GetBType ( j ) = b_bunker then
19414: LD_VAR 0 9
19418: PPUSH
19419: CALL_OW 266
19423: PUSH
19424: LD_INT 32
19426: EQUAL
19427: IFFALSE 19454
// tmp := Insert ( tmp , 1 , j ) else
19429: LD_ADDR_VAR 0 19
19433: PUSH
19434: LD_VAR 0 19
19438: PPUSH
19439: LD_INT 1
19441: PPUSH
19442: LD_VAR 0 9
19446: PPUSH
19447: CALL_OW 2
19451: ST_TO_ADDR
19452: GO 19483
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19454: LD_ADDR_VAR 0 19
19458: PUSH
19459: LD_VAR 0 19
19463: PPUSH
19464: LD_VAR 0 19
19468: PUSH
19469: LD_INT 1
19471: PLUS
19472: PPUSH
19473: LD_VAR 0 9
19477: PPUSH
19478: CALL_OW 2
19482: ST_TO_ADDR
19483: GO 19411
19485: POP
19486: POP
// if tmp then
19487: LD_VAR 0 19
19491: IFFALSE 19503
// f := tmp ;
19493: LD_ADDR_VAR 0 12
19497: PUSH
19498: LD_VAR 0 19
19502: ST_TO_ADDR
// end ; x := personel [ i ] ;
19503: LD_ADDR_VAR 0 13
19507: PUSH
19508: LD_VAR 0 6
19512: PUSH
19513: LD_VAR 0 8
19517: ARRAY
19518: ST_TO_ADDR
// if x = - 1 then
19519: LD_VAR 0 13
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: EQUAL
19528: IFFALSE 19737
// begin for j in f do
19530: LD_ADDR_VAR 0 9
19534: PUSH
19535: LD_VAR 0 12
19539: PUSH
19540: FOR_IN
19541: IFFALSE 19733
// repeat InitHc ;
19543: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19547: LD_VAR 0 9
19551: PPUSH
19552: CALL_OW 266
19556: PUSH
19557: LD_INT 5
19559: EQUAL
19560: IFFALSE 19630
// begin if UnitsInside ( j ) < 3 then
19562: LD_VAR 0 9
19566: PPUSH
19567: CALL_OW 313
19571: PUSH
19572: LD_INT 3
19574: LESS
19575: IFFALSE 19611
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19577: LD_INT 0
19579: PPUSH
19580: LD_INT 5
19582: PUSH
19583: LD_INT 8
19585: PUSH
19586: LD_INT 9
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: PUSH
19594: LD_VAR 0 17
19598: ARRAY
19599: PPUSH
19600: LD_VAR 0 4
19604: PPUSH
19605: CALL_OW 380
19609: GO 19628
// PrepareHuman ( false , i , skill ) ;
19611: LD_INT 0
19613: PPUSH
19614: LD_VAR 0 8
19618: PPUSH
19619: LD_VAR 0 4
19623: PPUSH
19624: CALL_OW 380
// end else
19628: GO 19647
// PrepareHuman ( false , i , skill ) ;
19630: LD_INT 0
19632: PPUSH
19633: LD_VAR 0 8
19637: PPUSH
19638: LD_VAR 0 4
19642: PPUSH
19643: CALL_OW 380
// un := CreateHuman ;
19647: LD_ADDR_VAR 0 14
19651: PUSH
19652: CALL_OW 44
19656: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19657: LD_ADDR_VAR 0 7
19661: PUSH
19662: LD_VAR 0 7
19666: PPUSH
19667: LD_INT 1
19669: PPUSH
19670: LD_VAR 0 14
19674: PPUSH
19675: CALL_OW 2
19679: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19680: LD_VAR 0 14
19684: PPUSH
19685: LD_VAR 0 9
19689: PPUSH
19690: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19694: LD_VAR 0 9
19698: PPUSH
19699: CALL_OW 313
19703: PUSH
19704: LD_INT 6
19706: EQUAL
19707: PUSH
19708: LD_VAR 0 9
19712: PPUSH
19713: CALL_OW 266
19717: PUSH
19718: LD_INT 32
19720: PUSH
19721: LD_INT 31
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: IN
19728: OR
19729: IFFALSE 19543
19731: GO 19540
19733: POP
19734: POP
// end else
19735: GO 20117
// for j = 1 to x do
19737: LD_ADDR_VAR 0 9
19741: PUSH
19742: DOUBLE
19743: LD_INT 1
19745: DEC
19746: ST_TO_ADDR
19747: LD_VAR 0 13
19751: PUSH
19752: FOR_TO
19753: IFFALSE 20115
// begin InitHc ;
19755: CALL_OW 19
// if not f then
19759: LD_VAR 0 12
19763: NOT
19764: IFFALSE 19853
// begin PrepareHuman ( false , i , skill ) ;
19766: LD_INT 0
19768: PPUSH
19769: LD_VAR 0 8
19773: PPUSH
19774: LD_VAR 0 4
19778: PPUSH
19779: CALL_OW 380
// un := CreateHuman ;
19783: LD_ADDR_VAR 0 14
19787: PUSH
19788: CALL_OW 44
19792: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19793: LD_ADDR_VAR 0 7
19797: PUSH
19798: LD_VAR 0 7
19802: PPUSH
19803: LD_INT 1
19805: PPUSH
19806: LD_VAR 0 14
19810: PPUSH
19811: CALL_OW 2
19815: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19816: LD_VAR 0 14
19820: PPUSH
19821: LD_VAR 0 1
19825: PPUSH
19826: CALL_OW 250
19830: PPUSH
19831: LD_VAR 0 1
19835: PPUSH
19836: CALL_OW 251
19840: PPUSH
19841: LD_INT 10
19843: PPUSH
19844: LD_INT 0
19846: PPUSH
19847: CALL_OW 50
// continue ;
19851: GO 19752
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19853: LD_VAR 0 12
19857: PUSH
19858: LD_INT 1
19860: ARRAY
19861: PPUSH
19862: CALL_OW 313
19866: PUSH
19867: LD_VAR 0 12
19871: PUSH
19872: LD_INT 1
19874: ARRAY
19875: PPUSH
19876: CALL_OW 266
19880: PUSH
19881: LD_INT 32
19883: PUSH
19884: LD_INT 31
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: IN
19891: AND
19892: PUSH
19893: LD_VAR 0 12
19897: PUSH
19898: LD_INT 1
19900: ARRAY
19901: PPUSH
19902: CALL_OW 313
19906: PUSH
19907: LD_INT 6
19909: EQUAL
19910: OR
19911: IFFALSE 19931
// f := Delete ( f , 1 ) ;
19913: LD_ADDR_VAR 0 12
19917: PUSH
19918: LD_VAR 0 12
19922: PPUSH
19923: LD_INT 1
19925: PPUSH
19926: CALL_OW 3
19930: ST_TO_ADDR
// if not f then
19931: LD_VAR 0 12
19935: NOT
19936: IFFALSE 19954
// begin x := x + 2 ;
19938: LD_ADDR_VAR 0 13
19942: PUSH
19943: LD_VAR 0 13
19947: PUSH
19948: LD_INT 2
19950: PLUS
19951: ST_TO_ADDR
// continue ;
19952: GO 19752
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19954: LD_VAR 0 12
19958: PUSH
19959: LD_INT 1
19961: ARRAY
19962: PPUSH
19963: CALL_OW 266
19967: PUSH
19968: LD_INT 5
19970: EQUAL
19971: IFFALSE 20045
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19973: LD_VAR 0 12
19977: PUSH
19978: LD_INT 1
19980: ARRAY
19981: PPUSH
19982: CALL_OW 313
19986: PUSH
19987: LD_INT 3
19989: LESS
19990: IFFALSE 20026
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19992: LD_INT 0
19994: PPUSH
19995: LD_INT 5
19997: PUSH
19998: LD_INT 8
20000: PUSH
20001: LD_INT 9
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: PUSH
20009: LD_VAR 0 17
20013: ARRAY
20014: PPUSH
20015: LD_VAR 0 4
20019: PPUSH
20020: CALL_OW 380
20024: GO 20043
// PrepareHuman ( false , i , skill ) ;
20026: LD_INT 0
20028: PPUSH
20029: LD_VAR 0 8
20033: PPUSH
20034: LD_VAR 0 4
20038: PPUSH
20039: CALL_OW 380
// end else
20043: GO 20062
// PrepareHuman ( false , i , skill ) ;
20045: LD_INT 0
20047: PPUSH
20048: LD_VAR 0 8
20052: PPUSH
20053: LD_VAR 0 4
20057: PPUSH
20058: CALL_OW 380
// un := CreateHuman ;
20062: LD_ADDR_VAR 0 14
20066: PUSH
20067: CALL_OW 44
20071: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20072: LD_ADDR_VAR 0 7
20076: PUSH
20077: LD_VAR 0 7
20081: PPUSH
20082: LD_INT 1
20084: PPUSH
20085: LD_VAR 0 14
20089: PPUSH
20090: CALL_OW 2
20094: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20095: LD_VAR 0 14
20099: PPUSH
20100: LD_VAR 0 12
20104: PUSH
20105: LD_INT 1
20107: ARRAY
20108: PPUSH
20109: CALL_OW 52
// end ;
20113: GO 19752
20115: POP
20116: POP
// end ;
20117: GO 19054
20119: POP
20120: POP
// result := result ^ buildings ;
20121: LD_ADDR_VAR 0 7
20125: PUSH
20126: LD_VAR 0 7
20130: PUSH
20131: LD_VAR 0 18
20135: ADD
20136: ST_TO_ADDR
// end else
20137: GO 20280
// begin for i = 1 to personel do
20139: LD_ADDR_VAR 0 8
20143: PUSH
20144: DOUBLE
20145: LD_INT 1
20147: DEC
20148: ST_TO_ADDR
20149: LD_VAR 0 6
20153: PUSH
20154: FOR_TO
20155: IFFALSE 20278
// begin if i > 4 then
20157: LD_VAR 0 8
20161: PUSH
20162: LD_INT 4
20164: GREATER
20165: IFFALSE 20169
// break ;
20167: GO 20278
// x := personel [ i ] ;
20169: LD_ADDR_VAR 0 13
20173: PUSH
20174: LD_VAR 0 6
20178: PUSH
20179: LD_VAR 0 8
20183: ARRAY
20184: ST_TO_ADDR
// if x = - 1 then
20185: LD_VAR 0 13
20189: PUSH
20190: LD_INT 1
20192: NEG
20193: EQUAL
20194: IFFALSE 20198
// continue ;
20196: GO 20154
// PrepareHuman ( false , i , skill ) ;
20198: LD_INT 0
20200: PPUSH
20201: LD_VAR 0 8
20205: PPUSH
20206: LD_VAR 0 4
20210: PPUSH
20211: CALL_OW 380
// un := CreateHuman ;
20215: LD_ADDR_VAR 0 14
20219: PUSH
20220: CALL_OW 44
20224: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20225: LD_VAR 0 14
20229: PPUSH
20230: LD_VAR 0 1
20234: PPUSH
20235: CALL_OW 250
20239: PPUSH
20240: LD_VAR 0 1
20244: PPUSH
20245: CALL_OW 251
20249: PPUSH
20250: LD_INT 10
20252: PPUSH
20253: LD_INT 0
20255: PPUSH
20256: CALL_OW 50
// result := result ^ un ;
20260: LD_ADDR_VAR 0 7
20264: PUSH
20265: LD_VAR 0 7
20269: PUSH
20270: LD_VAR 0 14
20274: ADD
20275: ST_TO_ADDR
// end ;
20276: GO 20154
20278: POP
20279: POP
// end ; end ;
20280: LD_VAR 0 7
20284: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20285: LD_INT 0
20287: PPUSH
20288: PPUSH
20289: PPUSH
20290: PPUSH
20291: PPUSH
20292: PPUSH
20293: PPUSH
20294: PPUSH
20295: PPUSH
20296: PPUSH
20297: PPUSH
20298: PPUSH
20299: PPUSH
20300: PPUSH
20301: PPUSH
20302: PPUSH
// result := false ;
20303: LD_ADDR_VAR 0 3
20307: PUSH
20308: LD_INT 0
20310: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20311: LD_VAR 0 1
20315: NOT
20316: PUSH
20317: LD_VAR 0 1
20321: PPUSH
20322: CALL_OW 266
20326: PUSH
20327: LD_INT 32
20329: PUSH
20330: LD_INT 33
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: IN
20337: NOT
20338: OR
20339: IFFALSE 20343
// exit ;
20341: GO 21452
// nat := GetNation ( tower ) ;
20343: LD_ADDR_VAR 0 12
20347: PUSH
20348: LD_VAR 0 1
20352: PPUSH
20353: CALL_OW 248
20357: ST_TO_ADDR
// side := GetSide ( tower ) ;
20358: LD_ADDR_VAR 0 16
20362: PUSH
20363: LD_VAR 0 1
20367: PPUSH
20368: CALL_OW 255
20372: ST_TO_ADDR
// x := GetX ( tower ) ;
20373: LD_ADDR_VAR 0 10
20377: PUSH
20378: LD_VAR 0 1
20382: PPUSH
20383: CALL_OW 250
20387: ST_TO_ADDR
// y := GetY ( tower ) ;
20388: LD_ADDR_VAR 0 11
20392: PUSH
20393: LD_VAR 0 1
20397: PPUSH
20398: CALL_OW 251
20402: ST_TO_ADDR
// if not x or not y then
20403: LD_VAR 0 10
20407: NOT
20408: PUSH
20409: LD_VAR 0 11
20413: NOT
20414: OR
20415: IFFALSE 20419
// exit ;
20417: GO 21452
// weapon := 0 ;
20419: LD_ADDR_VAR 0 18
20423: PUSH
20424: LD_INT 0
20426: ST_TO_ADDR
// fac_list := [ ] ;
20427: LD_ADDR_VAR 0 17
20431: PUSH
20432: EMPTY
20433: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20434: LD_ADDR_VAR 0 6
20438: PUSH
20439: LD_VAR 0 1
20443: PPUSH
20444: CALL_OW 274
20448: PPUSH
20449: LD_VAR 0 2
20453: PPUSH
20454: LD_INT 0
20456: PPUSH
20457: CALL 18023 0 3
20461: PPUSH
20462: LD_INT 30
20464: PUSH
20465: LD_INT 3
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PPUSH
20472: CALL_OW 72
20476: ST_TO_ADDR
// if not factories then
20477: LD_VAR 0 6
20481: NOT
20482: IFFALSE 20486
// exit ;
20484: GO 21452
// for i in factories do
20486: LD_ADDR_VAR 0 8
20490: PUSH
20491: LD_VAR 0 6
20495: PUSH
20496: FOR_IN
20497: IFFALSE 20522
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20499: LD_ADDR_VAR 0 17
20503: PUSH
20504: LD_VAR 0 17
20508: PUSH
20509: LD_VAR 0 8
20513: PPUSH
20514: CALL_OW 478
20518: UNION
20519: ST_TO_ADDR
20520: GO 20496
20522: POP
20523: POP
// if not fac_list then
20524: LD_VAR 0 17
20528: NOT
20529: IFFALSE 20533
// exit ;
20531: GO 21452
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20533: LD_ADDR_VAR 0 5
20537: PUSH
20538: LD_INT 4
20540: PUSH
20541: LD_INT 5
20543: PUSH
20544: LD_INT 9
20546: PUSH
20547: LD_INT 10
20549: PUSH
20550: LD_INT 6
20552: PUSH
20553: LD_INT 7
20555: PUSH
20556: LD_INT 11
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 27
20570: PUSH
20571: LD_INT 28
20573: PUSH
20574: LD_INT 26
20576: PUSH
20577: LD_INT 30
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 43
20588: PUSH
20589: LD_INT 44
20591: PUSH
20592: LD_INT 46
20594: PUSH
20595: LD_INT 45
20597: PUSH
20598: LD_INT 47
20600: PUSH
20601: LD_INT 49
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: LD_VAR 0 12
20621: ARRAY
20622: ST_TO_ADDR
// list := list isect fac_list ;
20623: LD_ADDR_VAR 0 5
20627: PUSH
20628: LD_VAR 0 5
20632: PUSH
20633: LD_VAR 0 17
20637: ISECT
20638: ST_TO_ADDR
// if not list then
20639: LD_VAR 0 5
20643: NOT
20644: IFFALSE 20648
// exit ;
20646: GO 21452
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20648: LD_VAR 0 12
20652: PUSH
20653: LD_INT 3
20655: EQUAL
20656: PUSH
20657: LD_INT 49
20659: PUSH
20660: LD_VAR 0 5
20664: IN
20665: AND
20666: PUSH
20667: LD_INT 31
20669: PPUSH
20670: LD_VAR 0 16
20674: PPUSH
20675: CALL_OW 321
20679: PUSH
20680: LD_INT 2
20682: EQUAL
20683: AND
20684: IFFALSE 20744
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20686: LD_INT 22
20688: PUSH
20689: LD_VAR 0 16
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: PUSH
20698: LD_INT 35
20700: PUSH
20701: LD_INT 49
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 91
20710: PUSH
20711: LD_VAR 0 1
20715: PUSH
20716: LD_INT 10
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: LIST
20728: PPUSH
20729: CALL_OW 69
20733: NOT
20734: IFFALSE 20744
// weapon := ru_time_lapser ;
20736: LD_ADDR_VAR 0 18
20740: PUSH
20741: LD_INT 49
20743: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20744: LD_VAR 0 12
20748: PUSH
20749: LD_INT 1
20751: PUSH
20752: LD_INT 2
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: IN
20759: PUSH
20760: LD_INT 11
20762: PUSH
20763: LD_VAR 0 5
20767: IN
20768: PUSH
20769: LD_INT 30
20771: PUSH
20772: LD_VAR 0 5
20776: IN
20777: OR
20778: AND
20779: PUSH
20780: LD_INT 6
20782: PPUSH
20783: LD_VAR 0 16
20787: PPUSH
20788: CALL_OW 321
20792: PUSH
20793: LD_INT 2
20795: EQUAL
20796: AND
20797: IFFALSE 20962
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20799: LD_INT 22
20801: PUSH
20802: LD_VAR 0 16
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: LD_INT 35
20816: PUSH
20817: LD_INT 11
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 35
20826: PUSH
20827: LD_INT 30
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 91
20841: PUSH
20842: LD_VAR 0 1
20846: PUSH
20847: LD_INT 18
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: LIST
20859: PPUSH
20860: CALL_OW 69
20864: NOT
20865: PUSH
20866: LD_INT 22
20868: PUSH
20869: LD_VAR 0 16
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 2
20880: PUSH
20881: LD_INT 30
20883: PUSH
20884: LD_INT 32
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 30
20893: PUSH
20894: LD_INT 33
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 91
20908: PUSH
20909: LD_VAR 0 1
20913: PUSH
20914: LD_INT 12
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: PPUSH
20930: CALL_OW 69
20934: PUSH
20935: LD_INT 2
20937: GREATER
20938: AND
20939: IFFALSE 20962
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20941: LD_ADDR_VAR 0 18
20945: PUSH
20946: LD_INT 11
20948: PUSH
20949: LD_INT 30
20951: PUSH
20952: EMPTY
20953: LIST
20954: LIST
20955: PUSH
20956: LD_VAR 0 12
20960: ARRAY
20961: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20962: LD_VAR 0 18
20966: NOT
20967: PUSH
20968: LD_INT 40
20970: PPUSH
20971: LD_VAR 0 16
20975: PPUSH
20976: CALL_OW 321
20980: PUSH
20981: LD_INT 2
20983: EQUAL
20984: AND
20985: PUSH
20986: LD_INT 7
20988: PUSH
20989: LD_VAR 0 5
20993: IN
20994: PUSH
20995: LD_INT 28
20997: PUSH
20998: LD_VAR 0 5
21002: IN
21003: OR
21004: PUSH
21005: LD_INT 45
21007: PUSH
21008: LD_VAR 0 5
21012: IN
21013: OR
21014: AND
21015: IFFALSE 21269
// begin hex := GetHexInfo ( x , y ) ;
21017: LD_ADDR_VAR 0 4
21021: PUSH
21022: LD_VAR 0 10
21026: PPUSH
21027: LD_VAR 0 11
21031: PPUSH
21032: CALL_OW 546
21036: ST_TO_ADDR
// if hex [ 1 ] then
21037: LD_VAR 0 4
21041: PUSH
21042: LD_INT 1
21044: ARRAY
21045: IFFALSE 21049
// exit ;
21047: GO 21452
// height := hex [ 2 ] ;
21049: LD_ADDR_VAR 0 15
21053: PUSH
21054: LD_VAR 0 4
21058: PUSH
21059: LD_INT 2
21061: ARRAY
21062: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21063: LD_ADDR_VAR 0 14
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: LD_INT 3
21076: PUSH
21077: LD_INT 5
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: ST_TO_ADDR
// for i in tmp do
21086: LD_ADDR_VAR 0 8
21090: PUSH
21091: LD_VAR 0 14
21095: PUSH
21096: FOR_IN
21097: IFFALSE 21267
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21099: LD_ADDR_VAR 0 9
21103: PUSH
21104: LD_VAR 0 10
21108: PPUSH
21109: LD_VAR 0 8
21113: PPUSH
21114: LD_INT 5
21116: PPUSH
21117: CALL_OW 272
21121: PUSH
21122: LD_VAR 0 11
21126: PPUSH
21127: LD_VAR 0 8
21131: PPUSH
21132: LD_INT 5
21134: PPUSH
21135: CALL_OW 273
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21144: LD_VAR 0 9
21148: PUSH
21149: LD_INT 1
21151: ARRAY
21152: PPUSH
21153: LD_VAR 0 9
21157: PUSH
21158: LD_INT 2
21160: ARRAY
21161: PPUSH
21162: CALL_OW 488
21166: IFFALSE 21265
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21168: LD_ADDR_VAR 0 4
21172: PUSH
21173: LD_VAR 0 9
21177: PUSH
21178: LD_INT 1
21180: ARRAY
21181: PPUSH
21182: LD_VAR 0 9
21186: PUSH
21187: LD_INT 2
21189: ARRAY
21190: PPUSH
21191: CALL_OW 546
21195: ST_TO_ADDR
// if hex [ 1 ] then
21196: LD_VAR 0 4
21200: PUSH
21201: LD_INT 1
21203: ARRAY
21204: IFFALSE 21208
// continue ;
21206: GO 21096
// h := hex [ 2 ] ;
21208: LD_ADDR_VAR 0 13
21212: PUSH
21213: LD_VAR 0 4
21217: PUSH
21218: LD_INT 2
21220: ARRAY
21221: ST_TO_ADDR
// if h + 7 < height then
21222: LD_VAR 0 13
21226: PUSH
21227: LD_INT 7
21229: PLUS
21230: PUSH
21231: LD_VAR 0 15
21235: LESS
21236: IFFALSE 21265
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21238: LD_ADDR_VAR 0 18
21242: PUSH
21243: LD_INT 7
21245: PUSH
21246: LD_INT 28
21248: PUSH
21249: LD_INT 45
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: PUSH
21257: LD_VAR 0 12
21261: ARRAY
21262: ST_TO_ADDR
// break ;
21263: GO 21267
// end ; end ; end ;
21265: GO 21096
21267: POP
21268: POP
// end ; if not weapon then
21269: LD_VAR 0 18
21273: NOT
21274: IFFALSE 21334
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21276: LD_ADDR_VAR 0 5
21280: PUSH
21281: LD_VAR 0 5
21285: PUSH
21286: LD_INT 11
21288: PUSH
21289: LD_INT 30
21291: PUSH
21292: LD_INT 49
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: DIFF
21300: ST_TO_ADDR
// if not list then
21301: LD_VAR 0 5
21305: NOT
21306: IFFALSE 21310
// exit ;
21308: GO 21452
// weapon := list [ rand ( 1 , list ) ] ;
21310: LD_ADDR_VAR 0 18
21314: PUSH
21315: LD_VAR 0 5
21319: PUSH
21320: LD_INT 1
21322: PPUSH
21323: LD_VAR 0 5
21327: PPUSH
21328: CALL_OW 12
21332: ARRAY
21333: ST_TO_ADDR
// end ; if weapon then
21334: LD_VAR 0 18
21338: IFFALSE 21452
// begin tmp := CostOfWeapon ( weapon ) ;
21340: LD_ADDR_VAR 0 14
21344: PUSH
21345: LD_VAR 0 18
21349: PPUSH
21350: CALL_OW 451
21354: ST_TO_ADDR
// j := GetBase ( tower ) ;
21355: LD_ADDR_VAR 0 9
21359: PUSH
21360: LD_VAR 0 1
21364: PPUSH
21365: CALL_OW 274
21369: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21370: LD_VAR 0 9
21374: PPUSH
21375: LD_INT 1
21377: PPUSH
21378: CALL_OW 275
21382: PUSH
21383: LD_VAR 0 14
21387: PUSH
21388: LD_INT 1
21390: ARRAY
21391: GREATEREQUAL
21392: PUSH
21393: LD_VAR 0 9
21397: PPUSH
21398: LD_INT 2
21400: PPUSH
21401: CALL_OW 275
21405: PUSH
21406: LD_VAR 0 14
21410: PUSH
21411: LD_INT 2
21413: ARRAY
21414: GREATEREQUAL
21415: AND
21416: PUSH
21417: LD_VAR 0 9
21421: PPUSH
21422: LD_INT 3
21424: PPUSH
21425: CALL_OW 275
21429: PUSH
21430: LD_VAR 0 14
21434: PUSH
21435: LD_INT 3
21437: ARRAY
21438: GREATEREQUAL
21439: AND
21440: IFFALSE 21452
// result := weapon ;
21442: LD_ADDR_VAR 0 3
21446: PUSH
21447: LD_VAR 0 18
21451: ST_TO_ADDR
// end ; end ;
21452: LD_VAR 0 3
21456: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21457: LD_INT 0
21459: PPUSH
21460: PPUSH
// result := true ;
21461: LD_ADDR_VAR 0 3
21465: PUSH
21466: LD_INT 1
21468: ST_TO_ADDR
// if array1 = array2 then
21469: LD_VAR 0 1
21473: PUSH
21474: LD_VAR 0 2
21478: EQUAL
21479: IFFALSE 21539
// begin for i = 1 to array1 do
21481: LD_ADDR_VAR 0 4
21485: PUSH
21486: DOUBLE
21487: LD_INT 1
21489: DEC
21490: ST_TO_ADDR
21491: LD_VAR 0 1
21495: PUSH
21496: FOR_TO
21497: IFFALSE 21535
// if array1 [ i ] <> array2 [ i ] then
21499: LD_VAR 0 1
21503: PUSH
21504: LD_VAR 0 4
21508: ARRAY
21509: PUSH
21510: LD_VAR 0 2
21514: PUSH
21515: LD_VAR 0 4
21519: ARRAY
21520: NONEQUAL
21521: IFFALSE 21533
// begin result := false ;
21523: LD_ADDR_VAR 0 3
21527: PUSH
21528: LD_INT 0
21530: ST_TO_ADDR
// break ;
21531: GO 21535
// end ;
21533: GO 21496
21535: POP
21536: POP
// end else
21537: GO 21547
// result := false ;
21539: LD_ADDR_VAR 0 3
21543: PUSH
21544: LD_INT 0
21546: ST_TO_ADDR
// end ;
21547: LD_VAR 0 3
21551: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21552: LD_INT 0
21554: PPUSH
21555: PPUSH
// if not array1 or not array2 then
21556: LD_VAR 0 1
21560: NOT
21561: PUSH
21562: LD_VAR 0 2
21566: NOT
21567: OR
21568: IFFALSE 21572
// exit ;
21570: GO 21636
// result := true ;
21572: LD_ADDR_VAR 0 3
21576: PUSH
21577: LD_INT 1
21579: ST_TO_ADDR
// for i = 1 to array1 do
21580: LD_ADDR_VAR 0 4
21584: PUSH
21585: DOUBLE
21586: LD_INT 1
21588: DEC
21589: ST_TO_ADDR
21590: LD_VAR 0 1
21594: PUSH
21595: FOR_TO
21596: IFFALSE 21634
// if array1 [ i ] <> array2 [ i ] then
21598: LD_VAR 0 1
21602: PUSH
21603: LD_VAR 0 4
21607: ARRAY
21608: PUSH
21609: LD_VAR 0 2
21613: PUSH
21614: LD_VAR 0 4
21618: ARRAY
21619: NONEQUAL
21620: IFFALSE 21632
// begin result := false ;
21622: LD_ADDR_VAR 0 3
21626: PUSH
21627: LD_INT 0
21629: ST_TO_ADDR
// break ;
21630: GO 21634
// end ;
21632: GO 21595
21634: POP
21635: POP
// end ;
21636: LD_VAR 0 3
21640: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21641: LD_INT 0
21643: PPUSH
21644: PPUSH
21645: PPUSH
// pom := GetBase ( fac ) ;
21646: LD_ADDR_VAR 0 5
21650: PUSH
21651: LD_VAR 0 1
21655: PPUSH
21656: CALL_OW 274
21660: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21661: LD_ADDR_VAR 0 4
21665: PUSH
21666: LD_VAR 0 2
21670: PUSH
21671: LD_INT 1
21673: ARRAY
21674: PPUSH
21675: LD_VAR 0 2
21679: PUSH
21680: LD_INT 2
21682: ARRAY
21683: PPUSH
21684: LD_VAR 0 2
21688: PUSH
21689: LD_INT 3
21691: ARRAY
21692: PPUSH
21693: LD_VAR 0 2
21697: PUSH
21698: LD_INT 4
21700: ARRAY
21701: PPUSH
21702: CALL_OW 449
21706: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21707: LD_ADDR_VAR 0 3
21711: PUSH
21712: LD_VAR 0 5
21716: PPUSH
21717: LD_INT 1
21719: PPUSH
21720: CALL_OW 275
21724: PUSH
21725: LD_VAR 0 4
21729: PUSH
21730: LD_INT 1
21732: ARRAY
21733: GREATEREQUAL
21734: PUSH
21735: LD_VAR 0 5
21739: PPUSH
21740: LD_INT 2
21742: PPUSH
21743: CALL_OW 275
21747: PUSH
21748: LD_VAR 0 4
21752: PUSH
21753: LD_INT 2
21755: ARRAY
21756: GREATEREQUAL
21757: AND
21758: PUSH
21759: LD_VAR 0 5
21763: PPUSH
21764: LD_INT 3
21766: PPUSH
21767: CALL_OW 275
21771: PUSH
21772: LD_VAR 0 4
21776: PUSH
21777: LD_INT 3
21779: ARRAY
21780: GREATEREQUAL
21781: AND
21782: ST_TO_ADDR
// end ;
21783: LD_VAR 0 3
21787: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21788: LD_INT 0
21790: PPUSH
21791: PPUSH
21792: PPUSH
21793: PPUSH
// pom := GetBase ( building ) ;
21794: LD_ADDR_VAR 0 3
21798: PUSH
21799: LD_VAR 0 1
21803: PPUSH
21804: CALL_OW 274
21808: ST_TO_ADDR
// if not pom then
21809: LD_VAR 0 3
21813: NOT
21814: IFFALSE 21818
// exit ;
21816: GO 21988
// btype := GetBType ( building ) ;
21818: LD_ADDR_VAR 0 5
21822: PUSH
21823: LD_VAR 0 1
21827: PPUSH
21828: CALL_OW 266
21832: ST_TO_ADDR
// if btype = b_armoury then
21833: LD_VAR 0 5
21837: PUSH
21838: LD_INT 4
21840: EQUAL
21841: IFFALSE 21851
// btype := b_barracks ;
21843: LD_ADDR_VAR 0 5
21847: PUSH
21848: LD_INT 5
21850: ST_TO_ADDR
// if btype = b_depot then
21851: LD_VAR 0 5
21855: PUSH
21856: LD_INT 0
21858: EQUAL
21859: IFFALSE 21869
// btype := b_warehouse ;
21861: LD_ADDR_VAR 0 5
21865: PUSH
21866: LD_INT 1
21868: ST_TO_ADDR
// if btype = b_workshop then
21869: LD_VAR 0 5
21873: PUSH
21874: LD_INT 2
21876: EQUAL
21877: IFFALSE 21887
// btype := b_factory ;
21879: LD_ADDR_VAR 0 5
21883: PUSH
21884: LD_INT 3
21886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21887: LD_ADDR_VAR 0 4
21891: PUSH
21892: LD_VAR 0 5
21896: PPUSH
21897: LD_VAR 0 1
21901: PPUSH
21902: CALL_OW 248
21906: PPUSH
21907: CALL_OW 450
21911: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21912: LD_ADDR_VAR 0 2
21916: PUSH
21917: LD_VAR 0 3
21921: PPUSH
21922: LD_INT 1
21924: PPUSH
21925: CALL_OW 275
21929: PUSH
21930: LD_VAR 0 4
21934: PUSH
21935: LD_INT 1
21937: ARRAY
21938: GREATEREQUAL
21939: PUSH
21940: LD_VAR 0 3
21944: PPUSH
21945: LD_INT 2
21947: PPUSH
21948: CALL_OW 275
21952: PUSH
21953: LD_VAR 0 4
21957: PUSH
21958: LD_INT 2
21960: ARRAY
21961: GREATEREQUAL
21962: AND
21963: PUSH
21964: LD_VAR 0 3
21968: PPUSH
21969: LD_INT 3
21971: PPUSH
21972: CALL_OW 275
21976: PUSH
21977: LD_VAR 0 4
21981: PUSH
21982: LD_INT 3
21984: ARRAY
21985: GREATEREQUAL
21986: AND
21987: ST_TO_ADDR
// end ;
21988: LD_VAR 0 2
21992: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21993: LD_INT 0
21995: PPUSH
21996: PPUSH
21997: PPUSH
// pom := GetBase ( building ) ;
21998: LD_ADDR_VAR 0 4
22002: PUSH
22003: LD_VAR 0 1
22007: PPUSH
22008: CALL_OW 274
22012: ST_TO_ADDR
// if not pom then
22013: LD_VAR 0 4
22017: NOT
22018: IFFALSE 22022
// exit ;
22020: GO 22123
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22022: LD_ADDR_VAR 0 5
22026: PUSH
22027: LD_VAR 0 2
22031: PPUSH
22032: LD_VAR 0 1
22036: PPUSH
22037: CALL_OW 248
22041: PPUSH
22042: CALL_OW 450
22046: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22047: LD_ADDR_VAR 0 3
22051: PUSH
22052: LD_VAR 0 4
22056: PPUSH
22057: LD_INT 1
22059: PPUSH
22060: CALL_OW 275
22064: PUSH
22065: LD_VAR 0 5
22069: PUSH
22070: LD_INT 1
22072: ARRAY
22073: GREATEREQUAL
22074: PUSH
22075: LD_VAR 0 4
22079: PPUSH
22080: LD_INT 2
22082: PPUSH
22083: CALL_OW 275
22087: PUSH
22088: LD_VAR 0 5
22092: PUSH
22093: LD_INT 2
22095: ARRAY
22096: GREATEREQUAL
22097: AND
22098: PUSH
22099: LD_VAR 0 4
22103: PPUSH
22104: LD_INT 3
22106: PPUSH
22107: CALL_OW 275
22111: PUSH
22112: LD_VAR 0 5
22116: PUSH
22117: LD_INT 3
22119: ARRAY
22120: GREATEREQUAL
22121: AND
22122: ST_TO_ADDR
// end ;
22123: LD_VAR 0 3
22127: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22128: LD_INT 0
22130: PPUSH
22131: PPUSH
22132: PPUSH
22133: PPUSH
22134: PPUSH
22135: PPUSH
22136: PPUSH
22137: PPUSH
22138: PPUSH
22139: PPUSH
22140: PPUSH
// result := false ;
22141: LD_ADDR_VAR 0 8
22145: PUSH
22146: LD_INT 0
22148: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22149: LD_VAR 0 5
22153: NOT
22154: PUSH
22155: LD_VAR 0 1
22159: NOT
22160: OR
22161: PUSH
22162: LD_VAR 0 2
22166: NOT
22167: OR
22168: PUSH
22169: LD_VAR 0 3
22173: NOT
22174: OR
22175: IFFALSE 22179
// exit ;
22177: GO 22993
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22179: LD_ADDR_VAR 0 14
22183: PUSH
22184: LD_VAR 0 1
22188: PPUSH
22189: LD_VAR 0 2
22193: PPUSH
22194: LD_VAR 0 3
22198: PPUSH
22199: LD_VAR 0 4
22203: PPUSH
22204: LD_VAR 0 5
22208: PUSH
22209: LD_INT 1
22211: ARRAY
22212: PPUSH
22213: CALL_OW 248
22217: PPUSH
22218: LD_INT 0
22220: PPUSH
22221: CALL 24230 0 6
22225: ST_TO_ADDR
// if not hexes then
22226: LD_VAR 0 14
22230: NOT
22231: IFFALSE 22235
// exit ;
22233: GO 22993
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22235: LD_ADDR_VAR 0 17
22239: PUSH
22240: LD_VAR 0 5
22244: PPUSH
22245: LD_INT 22
22247: PUSH
22248: LD_VAR 0 13
22252: PPUSH
22253: CALL_OW 255
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 2
22264: PUSH
22265: LD_INT 30
22267: PUSH
22268: LD_INT 0
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 30
22277: PUSH
22278: LD_INT 1
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: LIST
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: PPUSH
22294: CALL_OW 72
22298: ST_TO_ADDR
// for i = 1 to hexes do
22299: LD_ADDR_VAR 0 9
22303: PUSH
22304: DOUBLE
22305: LD_INT 1
22307: DEC
22308: ST_TO_ADDR
22309: LD_VAR 0 14
22313: PUSH
22314: FOR_TO
22315: IFFALSE 22991
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22317: LD_ADDR_VAR 0 13
22321: PUSH
22322: LD_VAR 0 14
22326: PUSH
22327: LD_VAR 0 9
22331: ARRAY
22332: PUSH
22333: LD_INT 1
22335: ARRAY
22336: PPUSH
22337: LD_VAR 0 14
22341: PUSH
22342: LD_VAR 0 9
22346: ARRAY
22347: PUSH
22348: LD_INT 2
22350: ARRAY
22351: PPUSH
22352: CALL_OW 428
22356: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22357: LD_VAR 0 14
22361: PUSH
22362: LD_VAR 0 9
22366: ARRAY
22367: PUSH
22368: LD_INT 1
22370: ARRAY
22371: PPUSH
22372: LD_VAR 0 14
22376: PUSH
22377: LD_VAR 0 9
22381: ARRAY
22382: PUSH
22383: LD_INT 2
22385: ARRAY
22386: PPUSH
22387: CALL_OW 351
22391: PUSH
22392: LD_VAR 0 14
22396: PUSH
22397: LD_VAR 0 9
22401: ARRAY
22402: PUSH
22403: LD_INT 1
22405: ARRAY
22406: PPUSH
22407: LD_VAR 0 14
22411: PUSH
22412: LD_VAR 0 9
22416: ARRAY
22417: PUSH
22418: LD_INT 2
22420: ARRAY
22421: PPUSH
22422: CALL_OW 488
22426: NOT
22427: OR
22428: PUSH
22429: LD_VAR 0 13
22433: PPUSH
22434: CALL_OW 247
22438: PUSH
22439: LD_INT 3
22441: EQUAL
22442: OR
22443: IFFALSE 22449
// exit ;
22445: POP
22446: POP
22447: GO 22993
// if not tmp then
22449: LD_VAR 0 13
22453: NOT
22454: IFFALSE 22458
// continue ;
22456: GO 22314
// result := true ;
22458: LD_ADDR_VAR 0 8
22462: PUSH
22463: LD_INT 1
22465: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22466: LD_VAR 0 6
22470: PUSH
22471: LD_VAR 0 13
22475: PPUSH
22476: CALL_OW 247
22480: PUSH
22481: LD_INT 2
22483: EQUAL
22484: AND
22485: PUSH
22486: LD_VAR 0 13
22490: PPUSH
22491: CALL_OW 263
22495: PUSH
22496: LD_INT 1
22498: EQUAL
22499: AND
22500: IFFALSE 22664
// begin if IsDrivenBy ( tmp ) then
22502: LD_VAR 0 13
22506: PPUSH
22507: CALL_OW 311
22511: IFFALSE 22515
// continue ;
22513: GO 22314
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22515: LD_VAR 0 6
22519: PPUSH
22520: LD_INT 3
22522: PUSH
22523: LD_INT 60
22525: PUSH
22526: EMPTY
22527: LIST
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 3
22535: PUSH
22536: LD_INT 55
22538: PUSH
22539: EMPTY
22540: LIST
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PPUSH
22550: CALL_OW 72
22554: IFFALSE 22662
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22556: LD_ADDR_VAR 0 18
22560: PUSH
22561: LD_VAR 0 6
22565: PPUSH
22566: LD_INT 3
22568: PUSH
22569: LD_INT 60
22571: PUSH
22572: EMPTY
22573: LIST
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 3
22581: PUSH
22582: LD_INT 55
22584: PUSH
22585: EMPTY
22586: LIST
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PPUSH
22596: CALL_OW 72
22600: PUSH
22601: LD_INT 1
22603: ARRAY
22604: ST_TO_ADDR
// if IsInUnit ( driver ) then
22605: LD_VAR 0 18
22609: PPUSH
22610: CALL_OW 310
22614: IFFALSE 22625
// ComExit ( driver ) ;
22616: LD_VAR 0 18
22620: PPUSH
22621: CALL 47935 0 1
// AddComEnterUnit ( driver , tmp ) ;
22625: LD_VAR 0 18
22629: PPUSH
22630: LD_VAR 0 13
22634: PPUSH
22635: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22639: LD_VAR 0 18
22643: PPUSH
22644: LD_VAR 0 7
22648: PPUSH
22649: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22653: LD_VAR 0 18
22657: PPUSH
22658: CALL_OW 181
// end ; continue ;
22662: GO 22314
// end ; if not cleaners or not tmp in cleaners then
22664: LD_VAR 0 6
22668: NOT
22669: PUSH
22670: LD_VAR 0 13
22674: PUSH
22675: LD_VAR 0 6
22679: IN
22680: NOT
22681: OR
22682: IFFALSE 22989
// begin if dep then
22684: LD_VAR 0 17
22688: IFFALSE 22824
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22690: LD_ADDR_VAR 0 16
22694: PUSH
22695: LD_VAR 0 17
22699: PUSH
22700: LD_INT 1
22702: ARRAY
22703: PPUSH
22704: CALL_OW 250
22708: PPUSH
22709: LD_VAR 0 17
22713: PUSH
22714: LD_INT 1
22716: ARRAY
22717: PPUSH
22718: CALL_OW 254
22722: PPUSH
22723: LD_INT 5
22725: PPUSH
22726: CALL_OW 272
22730: PUSH
22731: LD_VAR 0 17
22735: PUSH
22736: LD_INT 1
22738: ARRAY
22739: PPUSH
22740: CALL_OW 251
22744: PPUSH
22745: LD_VAR 0 17
22749: PUSH
22750: LD_INT 1
22752: ARRAY
22753: PPUSH
22754: CALL_OW 254
22758: PPUSH
22759: LD_INT 5
22761: PPUSH
22762: CALL_OW 273
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22771: LD_VAR 0 16
22775: PUSH
22776: LD_INT 1
22778: ARRAY
22779: PPUSH
22780: LD_VAR 0 16
22784: PUSH
22785: LD_INT 2
22787: ARRAY
22788: PPUSH
22789: CALL_OW 488
22793: IFFALSE 22824
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22795: LD_VAR 0 13
22799: PPUSH
22800: LD_VAR 0 16
22804: PUSH
22805: LD_INT 1
22807: ARRAY
22808: PPUSH
22809: LD_VAR 0 16
22813: PUSH
22814: LD_INT 2
22816: ARRAY
22817: PPUSH
22818: CALL_OW 111
// continue ;
22822: GO 22314
// end ; end ; r := GetDir ( tmp ) ;
22824: LD_ADDR_VAR 0 15
22828: PUSH
22829: LD_VAR 0 13
22833: PPUSH
22834: CALL_OW 254
22838: ST_TO_ADDR
// if r = 5 then
22839: LD_VAR 0 15
22843: PUSH
22844: LD_INT 5
22846: EQUAL
22847: IFFALSE 22857
// r := 0 ;
22849: LD_ADDR_VAR 0 15
22853: PUSH
22854: LD_INT 0
22856: ST_TO_ADDR
// for j = r to 5 do
22857: LD_ADDR_VAR 0 10
22861: PUSH
22862: DOUBLE
22863: LD_VAR 0 15
22867: DEC
22868: ST_TO_ADDR
22869: LD_INT 5
22871: PUSH
22872: FOR_TO
22873: IFFALSE 22987
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22875: LD_ADDR_VAR 0 11
22879: PUSH
22880: LD_VAR 0 13
22884: PPUSH
22885: CALL_OW 250
22889: PPUSH
22890: LD_VAR 0 10
22894: PPUSH
22895: LD_INT 2
22897: PPUSH
22898: CALL_OW 272
22902: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22903: LD_ADDR_VAR 0 12
22907: PUSH
22908: LD_VAR 0 13
22912: PPUSH
22913: CALL_OW 251
22917: PPUSH
22918: LD_VAR 0 10
22922: PPUSH
22923: LD_INT 2
22925: PPUSH
22926: CALL_OW 273
22930: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22931: LD_VAR 0 11
22935: PPUSH
22936: LD_VAR 0 12
22940: PPUSH
22941: CALL_OW 488
22945: PUSH
22946: LD_VAR 0 11
22950: PPUSH
22951: LD_VAR 0 12
22955: PPUSH
22956: CALL_OW 428
22960: NOT
22961: AND
22962: IFFALSE 22985
// begin ComMoveXY ( tmp , _x , _y ) ;
22964: LD_VAR 0 13
22968: PPUSH
22969: LD_VAR 0 11
22973: PPUSH
22974: LD_VAR 0 12
22978: PPUSH
22979: CALL_OW 111
// break ;
22983: GO 22987
// end ; end ;
22985: GO 22872
22987: POP
22988: POP
// end ; end ;
22989: GO 22314
22991: POP
22992: POP
// end ;
22993: LD_VAR 0 8
22997: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22998: LD_INT 0
23000: PPUSH
// result := true ;
23001: LD_ADDR_VAR 0 3
23005: PUSH
23006: LD_INT 1
23008: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23009: LD_VAR 0 2
23013: PUSH
23014: LD_INT 24
23016: DOUBLE
23017: EQUAL
23018: IFTRUE 23028
23020: LD_INT 33
23022: DOUBLE
23023: EQUAL
23024: IFTRUE 23028
23026: GO 23053
23028: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23029: LD_ADDR_VAR 0 3
23033: PUSH
23034: LD_INT 32
23036: PPUSH
23037: LD_VAR 0 1
23041: PPUSH
23042: CALL_OW 321
23046: PUSH
23047: LD_INT 2
23049: EQUAL
23050: ST_TO_ADDR
23051: GO 23373
23053: LD_INT 20
23055: DOUBLE
23056: EQUAL
23057: IFTRUE 23061
23059: GO 23086
23061: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23062: LD_ADDR_VAR 0 3
23066: PUSH
23067: LD_INT 6
23069: PPUSH
23070: LD_VAR 0 1
23074: PPUSH
23075: CALL_OW 321
23079: PUSH
23080: LD_INT 2
23082: EQUAL
23083: ST_TO_ADDR
23084: GO 23373
23086: LD_INT 22
23088: DOUBLE
23089: EQUAL
23090: IFTRUE 23100
23092: LD_INT 36
23094: DOUBLE
23095: EQUAL
23096: IFTRUE 23100
23098: GO 23125
23100: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23101: LD_ADDR_VAR 0 3
23105: PUSH
23106: LD_INT 15
23108: PPUSH
23109: LD_VAR 0 1
23113: PPUSH
23114: CALL_OW 321
23118: PUSH
23119: LD_INT 2
23121: EQUAL
23122: ST_TO_ADDR
23123: GO 23373
23125: LD_INT 30
23127: DOUBLE
23128: EQUAL
23129: IFTRUE 23133
23131: GO 23158
23133: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23134: LD_ADDR_VAR 0 3
23138: PUSH
23139: LD_INT 20
23141: PPUSH
23142: LD_VAR 0 1
23146: PPUSH
23147: CALL_OW 321
23151: PUSH
23152: LD_INT 2
23154: EQUAL
23155: ST_TO_ADDR
23156: GO 23373
23158: LD_INT 28
23160: DOUBLE
23161: EQUAL
23162: IFTRUE 23172
23164: LD_INT 21
23166: DOUBLE
23167: EQUAL
23168: IFTRUE 23172
23170: GO 23197
23172: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23173: LD_ADDR_VAR 0 3
23177: PUSH
23178: LD_INT 21
23180: PPUSH
23181: LD_VAR 0 1
23185: PPUSH
23186: CALL_OW 321
23190: PUSH
23191: LD_INT 2
23193: EQUAL
23194: ST_TO_ADDR
23195: GO 23373
23197: LD_INT 16
23199: DOUBLE
23200: EQUAL
23201: IFTRUE 23205
23203: GO 23232
23205: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23206: LD_ADDR_VAR 0 3
23210: PUSH
23211: LD_EXP 100
23215: PPUSH
23216: LD_VAR 0 1
23220: PPUSH
23221: CALL_OW 321
23225: PUSH
23226: LD_INT 2
23228: EQUAL
23229: ST_TO_ADDR
23230: GO 23373
23232: LD_INT 19
23234: DOUBLE
23235: EQUAL
23236: IFTRUE 23246
23238: LD_INT 23
23240: DOUBLE
23241: EQUAL
23242: IFTRUE 23246
23244: GO 23273
23246: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23247: LD_ADDR_VAR 0 3
23251: PUSH
23252: LD_EXP 99
23256: PPUSH
23257: LD_VAR 0 1
23261: PPUSH
23262: CALL_OW 321
23266: PUSH
23267: LD_INT 2
23269: EQUAL
23270: ST_TO_ADDR
23271: GO 23373
23273: LD_INT 17
23275: DOUBLE
23276: EQUAL
23277: IFTRUE 23281
23279: GO 23306
23281: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23282: LD_ADDR_VAR 0 3
23286: PUSH
23287: LD_INT 39
23289: PPUSH
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 321
23299: PUSH
23300: LD_INT 2
23302: EQUAL
23303: ST_TO_ADDR
23304: GO 23373
23306: LD_INT 18
23308: DOUBLE
23309: EQUAL
23310: IFTRUE 23314
23312: GO 23339
23314: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23315: LD_ADDR_VAR 0 3
23319: PUSH
23320: LD_INT 40
23322: PPUSH
23323: LD_VAR 0 1
23327: PPUSH
23328: CALL_OW 321
23332: PUSH
23333: LD_INT 2
23335: EQUAL
23336: ST_TO_ADDR
23337: GO 23373
23339: LD_INT 27
23341: DOUBLE
23342: EQUAL
23343: IFTRUE 23347
23345: GO 23372
23347: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23348: LD_ADDR_VAR 0 3
23352: PUSH
23353: LD_INT 35
23355: PPUSH
23356: LD_VAR 0 1
23360: PPUSH
23361: CALL_OW 321
23365: PUSH
23366: LD_INT 2
23368: EQUAL
23369: ST_TO_ADDR
23370: GO 23373
23372: POP
// end ;
23373: LD_VAR 0 3
23377: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23378: LD_INT 0
23380: PPUSH
23381: PPUSH
23382: PPUSH
23383: PPUSH
23384: PPUSH
23385: PPUSH
23386: PPUSH
23387: PPUSH
23388: PPUSH
23389: PPUSH
23390: PPUSH
// result := false ;
23391: LD_ADDR_VAR 0 6
23395: PUSH
23396: LD_INT 0
23398: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23399: LD_VAR 0 1
23403: NOT
23404: PUSH
23405: LD_VAR 0 1
23409: PPUSH
23410: CALL_OW 266
23414: PUSH
23415: LD_INT 0
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: IN
23425: NOT
23426: OR
23427: PUSH
23428: LD_VAR 0 2
23432: NOT
23433: OR
23434: PUSH
23435: LD_VAR 0 5
23439: PUSH
23440: LD_INT 0
23442: PUSH
23443: LD_INT 1
23445: PUSH
23446: LD_INT 2
23448: PUSH
23449: LD_INT 3
23451: PUSH
23452: LD_INT 4
23454: PUSH
23455: LD_INT 5
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: IN
23466: NOT
23467: OR
23468: PUSH
23469: LD_VAR 0 3
23473: PPUSH
23474: LD_VAR 0 4
23478: PPUSH
23479: CALL_OW 488
23483: NOT
23484: OR
23485: IFFALSE 23489
// exit ;
23487: GO 24225
// side := GetSide ( depot ) ;
23489: LD_ADDR_VAR 0 9
23493: PUSH
23494: LD_VAR 0 1
23498: PPUSH
23499: CALL_OW 255
23503: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23504: LD_VAR 0 9
23508: PPUSH
23509: LD_VAR 0 2
23513: PPUSH
23514: CALL 22998 0 2
23518: NOT
23519: IFFALSE 23523
// exit ;
23521: GO 24225
// pom := GetBase ( depot ) ;
23523: LD_ADDR_VAR 0 10
23527: PUSH
23528: LD_VAR 0 1
23532: PPUSH
23533: CALL_OW 274
23537: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23538: LD_ADDR_VAR 0 11
23542: PUSH
23543: LD_VAR 0 2
23547: PPUSH
23548: LD_VAR 0 1
23552: PPUSH
23553: CALL_OW 248
23557: PPUSH
23558: CALL_OW 450
23562: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23563: LD_VAR 0 10
23567: PPUSH
23568: LD_INT 1
23570: PPUSH
23571: CALL_OW 275
23575: PUSH
23576: LD_VAR 0 11
23580: PUSH
23581: LD_INT 1
23583: ARRAY
23584: GREATEREQUAL
23585: PUSH
23586: LD_VAR 0 10
23590: PPUSH
23591: LD_INT 2
23593: PPUSH
23594: CALL_OW 275
23598: PUSH
23599: LD_VAR 0 11
23603: PUSH
23604: LD_INT 2
23606: ARRAY
23607: GREATEREQUAL
23608: AND
23609: PUSH
23610: LD_VAR 0 10
23614: PPUSH
23615: LD_INT 3
23617: PPUSH
23618: CALL_OW 275
23622: PUSH
23623: LD_VAR 0 11
23627: PUSH
23628: LD_INT 3
23630: ARRAY
23631: GREATEREQUAL
23632: AND
23633: NOT
23634: IFFALSE 23638
// exit ;
23636: GO 24225
// if GetBType ( depot ) = b_depot then
23638: LD_VAR 0 1
23642: PPUSH
23643: CALL_OW 266
23647: PUSH
23648: LD_INT 0
23650: EQUAL
23651: IFFALSE 23663
// dist := 28 else
23653: LD_ADDR_VAR 0 14
23657: PUSH
23658: LD_INT 28
23660: ST_TO_ADDR
23661: GO 23671
// dist := 36 ;
23663: LD_ADDR_VAR 0 14
23667: PUSH
23668: LD_INT 36
23670: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23671: LD_VAR 0 1
23675: PPUSH
23676: LD_VAR 0 3
23680: PPUSH
23681: LD_VAR 0 4
23685: PPUSH
23686: CALL_OW 297
23690: PUSH
23691: LD_VAR 0 14
23695: GREATER
23696: IFFALSE 23700
// exit ;
23698: GO 24225
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23700: LD_ADDR_VAR 0 12
23704: PUSH
23705: LD_VAR 0 2
23709: PPUSH
23710: LD_VAR 0 3
23714: PPUSH
23715: LD_VAR 0 4
23719: PPUSH
23720: LD_VAR 0 5
23724: PPUSH
23725: LD_VAR 0 1
23729: PPUSH
23730: CALL_OW 248
23734: PPUSH
23735: LD_INT 0
23737: PPUSH
23738: CALL 24230 0 6
23742: ST_TO_ADDR
// if not hexes then
23743: LD_VAR 0 12
23747: NOT
23748: IFFALSE 23752
// exit ;
23750: GO 24225
// hex := GetHexInfo ( x , y ) ;
23752: LD_ADDR_VAR 0 15
23756: PUSH
23757: LD_VAR 0 3
23761: PPUSH
23762: LD_VAR 0 4
23766: PPUSH
23767: CALL_OW 546
23771: ST_TO_ADDR
// if hex [ 1 ] then
23772: LD_VAR 0 15
23776: PUSH
23777: LD_INT 1
23779: ARRAY
23780: IFFALSE 23784
// exit ;
23782: GO 24225
// height := hex [ 2 ] ;
23784: LD_ADDR_VAR 0 13
23788: PUSH
23789: LD_VAR 0 15
23793: PUSH
23794: LD_INT 2
23796: ARRAY
23797: ST_TO_ADDR
// for i = 1 to hexes do
23798: LD_ADDR_VAR 0 7
23802: PUSH
23803: DOUBLE
23804: LD_INT 1
23806: DEC
23807: ST_TO_ADDR
23808: LD_VAR 0 12
23812: PUSH
23813: FOR_TO
23814: IFFALSE 24144
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23816: LD_VAR 0 12
23820: PUSH
23821: LD_VAR 0 7
23825: ARRAY
23826: PUSH
23827: LD_INT 1
23829: ARRAY
23830: PPUSH
23831: LD_VAR 0 12
23835: PUSH
23836: LD_VAR 0 7
23840: ARRAY
23841: PUSH
23842: LD_INT 2
23844: ARRAY
23845: PPUSH
23846: CALL_OW 488
23850: NOT
23851: PUSH
23852: LD_VAR 0 12
23856: PUSH
23857: LD_VAR 0 7
23861: ARRAY
23862: PUSH
23863: LD_INT 1
23865: ARRAY
23866: PPUSH
23867: LD_VAR 0 12
23871: PUSH
23872: LD_VAR 0 7
23876: ARRAY
23877: PUSH
23878: LD_INT 2
23880: ARRAY
23881: PPUSH
23882: CALL_OW 428
23886: PUSH
23887: LD_INT 0
23889: GREATER
23890: OR
23891: PUSH
23892: LD_VAR 0 12
23896: PUSH
23897: LD_VAR 0 7
23901: ARRAY
23902: PUSH
23903: LD_INT 1
23905: ARRAY
23906: PPUSH
23907: LD_VAR 0 12
23911: PUSH
23912: LD_VAR 0 7
23916: ARRAY
23917: PUSH
23918: LD_INT 2
23920: ARRAY
23921: PPUSH
23922: CALL_OW 351
23926: OR
23927: IFFALSE 23933
// exit ;
23929: POP
23930: POP
23931: GO 24225
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23933: LD_ADDR_VAR 0 8
23937: PUSH
23938: LD_VAR 0 12
23942: PUSH
23943: LD_VAR 0 7
23947: ARRAY
23948: PUSH
23949: LD_INT 1
23951: ARRAY
23952: PPUSH
23953: LD_VAR 0 12
23957: PUSH
23958: LD_VAR 0 7
23962: ARRAY
23963: PUSH
23964: LD_INT 2
23966: ARRAY
23967: PPUSH
23968: CALL_OW 546
23972: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23973: LD_VAR 0 8
23977: PUSH
23978: LD_INT 1
23980: ARRAY
23981: PUSH
23982: LD_VAR 0 8
23986: PUSH
23987: LD_INT 2
23989: ARRAY
23990: PUSH
23991: LD_VAR 0 13
23995: PUSH
23996: LD_INT 2
23998: PLUS
23999: GREATER
24000: OR
24001: PUSH
24002: LD_VAR 0 8
24006: PUSH
24007: LD_INT 2
24009: ARRAY
24010: PUSH
24011: LD_VAR 0 13
24015: PUSH
24016: LD_INT 2
24018: MINUS
24019: LESS
24020: OR
24021: PUSH
24022: LD_VAR 0 8
24026: PUSH
24027: LD_INT 3
24029: ARRAY
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: LD_INT 8
24036: PUSH
24037: LD_INT 9
24039: PUSH
24040: LD_INT 10
24042: PUSH
24043: LD_INT 11
24045: PUSH
24046: LD_INT 12
24048: PUSH
24049: LD_INT 13
24051: PUSH
24052: LD_INT 16
24054: PUSH
24055: LD_INT 17
24057: PUSH
24058: LD_INT 18
24060: PUSH
24061: LD_INT 19
24063: PUSH
24064: LD_INT 20
24066: PUSH
24067: LD_INT 21
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: IN
24085: NOT
24086: OR
24087: PUSH
24088: LD_VAR 0 8
24092: PUSH
24093: LD_INT 5
24095: ARRAY
24096: NOT
24097: OR
24098: PUSH
24099: LD_VAR 0 8
24103: PUSH
24104: LD_INT 6
24106: ARRAY
24107: PUSH
24108: LD_INT 1
24110: PUSH
24111: LD_INT 2
24113: PUSH
24114: LD_INT 7
24116: PUSH
24117: LD_INT 9
24119: PUSH
24120: LD_INT 10
24122: PUSH
24123: LD_INT 11
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: IN
24134: NOT
24135: OR
24136: IFFALSE 24142
// exit ;
24138: POP
24139: POP
24140: GO 24225
// end ;
24142: GO 23813
24144: POP
24145: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24146: LD_VAR 0 9
24150: PPUSH
24151: LD_VAR 0 3
24155: PPUSH
24156: LD_VAR 0 4
24160: PPUSH
24161: LD_INT 20
24163: PPUSH
24164: CALL 16171 0 4
24168: PUSH
24169: LD_INT 4
24171: ARRAY
24172: IFFALSE 24176
// exit ;
24174: GO 24225
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24176: LD_VAR 0 2
24180: PUSH
24181: LD_INT 29
24183: PUSH
24184: LD_INT 30
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: IN
24191: PUSH
24192: LD_VAR 0 3
24196: PPUSH
24197: LD_VAR 0 4
24201: PPUSH
24202: LD_VAR 0 9
24206: PPUSH
24207: CALL_OW 440
24211: NOT
24212: AND
24213: IFFALSE 24217
// exit ;
24215: GO 24225
// result := true ;
24217: LD_ADDR_VAR 0 6
24221: PUSH
24222: LD_INT 1
24224: ST_TO_ADDR
// end ;
24225: LD_VAR 0 6
24229: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24230: LD_INT 0
24232: PPUSH
24233: PPUSH
24234: PPUSH
24235: PPUSH
24236: PPUSH
24237: PPUSH
24238: PPUSH
24239: PPUSH
24240: PPUSH
24241: PPUSH
24242: PPUSH
24243: PPUSH
24244: PPUSH
24245: PPUSH
24246: PPUSH
24247: PPUSH
24248: PPUSH
24249: PPUSH
24250: PPUSH
24251: PPUSH
24252: PPUSH
24253: PPUSH
24254: PPUSH
24255: PPUSH
24256: PPUSH
24257: PPUSH
24258: PPUSH
24259: PPUSH
24260: PPUSH
24261: PPUSH
24262: PPUSH
24263: PPUSH
24264: PPUSH
24265: PPUSH
24266: PPUSH
24267: PPUSH
24268: PPUSH
24269: PPUSH
24270: PPUSH
24271: PPUSH
24272: PPUSH
24273: PPUSH
24274: PPUSH
24275: PPUSH
24276: PPUSH
24277: PPUSH
24278: PPUSH
24279: PPUSH
24280: PPUSH
24281: PPUSH
24282: PPUSH
24283: PPUSH
24284: PPUSH
24285: PPUSH
24286: PPUSH
24287: PPUSH
24288: PPUSH
24289: PPUSH
// result = [ ] ;
24290: LD_ADDR_VAR 0 7
24294: PUSH
24295: EMPTY
24296: ST_TO_ADDR
// temp_list = [ ] ;
24297: LD_ADDR_VAR 0 9
24301: PUSH
24302: EMPTY
24303: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24304: LD_VAR 0 4
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: LD_INT 2
24317: PUSH
24318: LD_INT 3
24320: PUSH
24321: LD_INT 4
24323: PUSH
24324: LD_INT 5
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: IN
24335: NOT
24336: PUSH
24337: LD_VAR 0 1
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: LD_INT 1
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: IN
24352: PUSH
24353: LD_VAR 0 5
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: LD_INT 2
24363: PUSH
24364: LD_INT 3
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: LIST
24371: IN
24372: NOT
24373: AND
24374: OR
24375: IFFALSE 24379
// exit ;
24377: GO 42770
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24379: LD_VAR 0 1
24383: PUSH
24384: LD_INT 6
24386: PUSH
24387: LD_INT 7
24389: PUSH
24390: LD_INT 8
24392: PUSH
24393: LD_INT 13
24395: PUSH
24396: LD_INT 12
24398: PUSH
24399: LD_INT 15
24401: PUSH
24402: LD_INT 11
24404: PUSH
24405: LD_INT 14
24407: PUSH
24408: LD_INT 10
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: IN
24422: IFFALSE 24432
// btype = b_lab ;
24424: LD_ADDR_VAR 0 1
24428: PUSH
24429: LD_INT 6
24431: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24432: LD_VAR 0 6
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: LD_INT 1
24442: PUSH
24443: LD_INT 2
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: LIST
24450: IN
24451: NOT
24452: PUSH
24453: LD_VAR 0 1
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: LD_INT 1
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: LD_INT 3
24469: PUSH
24470: LD_INT 6
24472: PUSH
24473: LD_INT 36
24475: PUSH
24476: LD_INT 4
24478: PUSH
24479: LD_INT 5
24481: PUSH
24482: LD_INT 31
24484: PUSH
24485: LD_INT 32
24487: PUSH
24488: LD_INT 33
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: IN
24504: NOT
24505: PUSH
24506: LD_VAR 0 6
24510: PUSH
24511: LD_INT 1
24513: EQUAL
24514: AND
24515: OR
24516: PUSH
24517: LD_VAR 0 1
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: LD_INT 3
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: IN
24532: NOT
24533: PUSH
24534: LD_VAR 0 6
24538: PUSH
24539: LD_INT 2
24541: EQUAL
24542: AND
24543: OR
24544: IFFALSE 24554
// mode = 0 ;
24546: LD_ADDR_VAR 0 6
24550: PUSH
24551: LD_INT 0
24553: ST_TO_ADDR
// case mode of 0 :
24554: LD_VAR 0 6
24558: PUSH
24559: LD_INT 0
24561: DOUBLE
24562: EQUAL
24563: IFTRUE 24567
24565: GO 36020
24567: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24568: LD_ADDR_VAR 0 11
24572: PUSH
24573: LD_INT 0
24575: PUSH
24576: LD_INT 0
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: LD_INT 1
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: LD_INT 0
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: LD_INT 1
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 1
24637: NEG
24638: PUSH
24639: LD_INT 1
24641: NEG
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 1
24649: NEG
24650: PUSH
24651: LD_INT 2
24653: NEG
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: LD_INT 2
24664: NEG
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 1
24683: PUSH
24684: LD_INT 2
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: LD_INT 2
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 1
24703: NEG
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 1
24714: PUSH
24715: LD_INT 3
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 0
24724: PUSH
24725: LD_INT 3
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: NEG
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24761: LD_ADDR_VAR 0 12
24765: PUSH
24766: LD_INT 0
24768: PUSH
24769: LD_INT 0
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: LD_INT 1
24781: NEG
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PUSH
24807: LD_INT 0
24809: PUSH
24810: LD_INT 1
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 1
24845: NEG
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 2
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: LD_INT 1
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 2
24884: NEG
24885: PUSH
24886: LD_INT 0
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 2
24895: NEG
24896: PUSH
24897: LD_INT 1
24899: NEG
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 2
24907: NEG
24908: PUSH
24909: LD_INT 1
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 3
24918: NEG
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 3
24929: NEG
24930: PUSH
24931: LD_INT 1
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24957: LD_ADDR_VAR 0 13
24961: PUSH
24962: LD_INT 0
24964: PUSH
24965: LD_INT 0
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: LD_INT 1
24977: NEG
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 1
24985: PUSH
24986: LD_INT 0
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 1
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 1
25015: NEG
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 1
25026: NEG
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: NEG
25039: PUSH
25040: LD_INT 2
25042: NEG
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: LD_INT 2
25050: PUSH
25051: LD_INT 1
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 2
25060: PUSH
25061: LD_INT 2
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 1
25070: PUSH
25071: LD_INT 2
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 2
25080: NEG
25081: PUSH
25082: LD_INT 1
25084: NEG
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 2
25092: NEG
25093: PUSH
25094: LD_INT 2
25096: NEG
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 2
25104: NEG
25105: PUSH
25106: LD_INT 3
25108: NEG
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 3
25116: NEG
25117: PUSH
25118: LD_INT 2
25120: NEG
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 3
25128: NEG
25129: PUSH
25130: LD_INT 3
25132: NEG
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25156: LD_ADDR_VAR 0 14
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: LD_INT 0
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 0
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 1
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: LD_INT 1
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: NEG
25215: PUSH
25216: LD_INT 0
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 1
25225: NEG
25226: PUSH
25227: LD_INT 1
25229: NEG
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: LD_INT 1
25237: NEG
25238: PUSH
25239: LD_INT 2
25241: NEG
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 0
25249: PUSH
25250: LD_INT 2
25252: NEG
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: LD_INT 1
25263: NEG
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: PUSH
25272: LD_INT 2
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: LD_INT 2
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 1
25291: NEG
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: LD_INT 3
25306: NEG
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: LD_INT 3
25317: NEG
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: PUSH
25326: LD_INT 2
25328: NEG
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25352: LD_ADDR_VAR 0 15
25356: PUSH
25357: LD_INT 0
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 0
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 1
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: NEG
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 1
25421: NEG
25422: PUSH
25423: LD_INT 1
25425: NEG
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 1
25433: PUSH
25434: LD_INT 1
25436: NEG
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 2
25444: PUSH
25445: LD_INT 0
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: LD_INT 1
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 2
25475: NEG
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: PUSH
25499: LD_INT 1
25501: NEG
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 3
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 3
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25545: LD_ADDR_VAR 0 16
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: LD_INT 0
25562: PUSH
25563: LD_INT 1
25565: NEG
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: LD_INT 0
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: LD_INT 1
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 0
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: EMPTY
25598: LIST
25599: LIST
25600: PUSH
25601: LD_INT 1
25603: NEG
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: LD_INT 1
25618: NEG
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 1
25626: NEG
25627: PUSH
25628: LD_INT 2
25630: NEG
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 2
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 2
25648: PUSH
25649: LD_INT 2
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 2
25668: NEG
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 2
25680: NEG
25681: PUSH
25682: LD_INT 2
25684: NEG
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 3
25692: PUSH
25693: LD_INT 2
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 3
25702: PUSH
25703: LD_INT 3
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: LD_INT 3
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25738: LD_ADDR_VAR 0 17
25742: PUSH
25743: LD_INT 0
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: LD_INT 1
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: LD_INT 1
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: NEG
25820: PUSH
25821: LD_INT 2
25823: NEG
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: LD_INT 2
25834: NEG
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 1
25842: PUSH
25843: LD_INT 1
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 2
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 2
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 2
25873: PUSH
25874: LD_INT 2
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: LD_INT 2
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 2
25914: NEG
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: NEG
25926: PUSH
25927: LD_INT 1
25929: NEG
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 2
25937: NEG
25938: PUSH
25939: LD_INT 2
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25968: LD_ADDR_VAR 0 18
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: LD_INT 1
25988: NEG
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 1
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 1
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 1
26026: NEG
26027: PUSH
26028: LD_INT 0
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: LD_INT 1
26041: NEG
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 1
26049: NEG
26050: PUSH
26051: LD_INT 2
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 0
26061: PUSH
26062: LD_INT 2
26064: NEG
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 1
26072: PUSH
26073: LD_INT 1
26075: NEG
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 2
26083: PUSH
26084: LD_INT 0
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 2
26093: PUSH
26094: LD_INT 1
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 2
26103: PUSH
26104: LD_INT 2
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: LD_INT 2
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 0
26123: PUSH
26124: LD_INT 2
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 2
26144: NEG
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 2
26155: NEG
26156: PUSH
26157: LD_INT 1
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 2
26167: NEG
26168: PUSH
26169: LD_INT 2
26171: NEG
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26198: LD_ADDR_VAR 0 19
26202: PUSH
26203: LD_INT 0
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: LD_INT 1
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 1
26226: PUSH
26227: LD_INT 0
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: PUSH
26234: LD_INT 1
26236: PUSH
26237: LD_INT 1
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 0
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 1
26256: NEG
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: LD_INT 1
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: LD_INT 2
26294: NEG
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 1
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 2
26313: PUSH
26314: LD_INT 0
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 2
26323: PUSH
26324: LD_INT 1
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 2
26333: PUSH
26334: LD_INT 2
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: LD_INT 2
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: LD_INT 2
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 2
26374: NEG
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 2
26385: NEG
26386: PUSH
26387: LD_INT 1
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 2
26397: NEG
26398: PUSH
26399: LD_INT 2
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26428: LD_ADDR_VAR 0 20
26432: PUSH
26433: LD_INT 0
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: PUSH
26457: LD_INT 0
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 1
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 0
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 1
26486: NEG
26487: PUSH
26488: LD_INT 0
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: LD_INT 2
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 0
26521: PUSH
26522: LD_INT 2
26524: NEG
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 2
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 2
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 2
26563: PUSH
26564: LD_INT 2
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 2
26604: NEG
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 2
26615: NEG
26616: PUSH
26617: LD_INT 1
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 2
26627: NEG
26628: PUSH
26629: LD_INT 2
26631: NEG
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26658: LD_ADDR_VAR 0 21
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 0
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 1
26716: NEG
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 1
26727: NEG
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: PUSH
26741: LD_INT 2
26743: NEG
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 0
26751: PUSH
26752: LD_INT 2
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 2
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 2
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 2
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 0
26813: PUSH
26814: LD_INT 2
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: LD_INT 1
26823: NEG
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 2
26834: NEG
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 2
26845: NEG
26846: PUSH
26847: LD_INT 1
26849: NEG
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 2
26857: NEG
26858: PUSH
26859: LD_INT 2
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26888: LD_ADDR_VAR 0 22
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: LD_INT 1
26908: NEG
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 1
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 1
26946: NEG
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: LD_INT 1
26961: NEG
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: LD_INT 2
26973: NEG
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: LD_INT 2
26984: NEG
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 2
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 2
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 2
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: LD_INT 2
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: LD_INT 2
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: LD_INT 1
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 2
27064: NEG
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 2
27075: NEG
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 2
27087: NEG
27088: PUSH
27089: LD_INT 2
27091: NEG
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27118: LD_ADDR_VAR 0 23
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: LD_INT 0
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: LD_INT 0
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 0
27166: PUSH
27167: LD_INT 1
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: NEG
27200: PUSH
27201: LD_INT 2
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: LD_INT 2
27214: NEG
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: LD_INT 2
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: LD_INT 0
27273: PUSH
27274: LD_INT 2
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 2
27305: NEG
27306: PUSH
27307: LD_INT 1
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 2
27329: NEG
27330: PUSH
27331: LD_INT 3
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: LD_INT 3
27345: NEG
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 1
27353: PUSH
27354: LD_INT 2
27356: NEG
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27398: LD_ADDR_VAR 0 24
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 1
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: NEG
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 2
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: LD_INT 2
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: PUSH
27610: LD_INT 2
27612: NEG
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 2
27620: PUSH
27621: LD_INT 1
27623: NEG
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 3
27631: PUSH
27632: LD_INT 1
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 3
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27674: LD_ADDR_VAR 0 25
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 2
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 2
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 2
27809: PUSH
27810: LD_INT 2
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 0
27829: PUSH
27830: LD_INT 2
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 1
27839: NEG
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 2
27850: NEG
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: NEG
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: LD_INT 2
27877: NEG
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 3
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 3
27895: PUSH
27896: LD_INT 2
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 3
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: LD_INT 3
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27948: LD_ADDR_VAR 0 26
27952: PUSH
27953: LD_INT 0
27955: PUSH
27956: LD_INT 0
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 1
27976: PUSH
27977: LD_INT 0
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: LD_INT 1
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: NEG
28007: PUSH
28008: LD_INT 0
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: LD_INT 1
28021: NEG
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: LD_INT 2
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 2
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 2
28073: PUSH
28074: LD_INT 1
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 2
28083: PUSH
28084: LD_INT 2
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: LD_INT 2
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: LD_INT 2
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: LD_INT 1
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 2
28124: NEG
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 2
28147: NEG
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 2
28159: PUSH
28160: LD_INT 3
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: LD_INT 3
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PUSH
28181: LD_INT 2
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 2
28190: NEG
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28224: LD_ADDR_VAR 0 27
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: LD_INT 0
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: NEG
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: LD_INT 2
28309: NEG
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 2
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: LD_INT 1
28331: NEG
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 2
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 2
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 2
28359: PUSH
28360: LD_INT 2
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 2
28400: NEG
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 2
28411: NEG
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 2
28423: NEG
28424: PUSH
28425: LD_INT 2
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: LD_INT 2
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 2
28446: NEG
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 3
28457: NEG
28458: PUSH
28459: LD_INT 1
28461: NEG
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 3
28469: NEG
28470: PUSH
28471: LD_INT 2
28473: NEG
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28504: LD_ADDR_VAR 0 28
28508: PUSH
28509: LD_INT 0
28511: PUSH
28512: LD_INT 0
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: LD_INT 0
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: LD_INT 2
28589: NEG
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: LD_INT 2
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: LD_INT 2
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: LD_INT 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: LD_INT 2
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 2
28680: NEG
28681: PUSH
28682: LD_INT 0
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 2
28691: NEG
28692: PUSH
28693: LD_INT 1
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 2
28703: NEG
28704: PUSH
28705: LD_INT 2
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 2
28715: NEG
28716: PUSH
28717: LD_INT 3
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: LD_INT 1
28727: NEG
28728: PUSH
28729: LD_INT 3
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 3
28739: NEG
28740: PUSH
28741: LD_INT 1
28743: NEG
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 3
28751: NEG
28752: PUSH
28753: LD_INT 2
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28786: LD_ADDR_VAR 0 29
28790: PUSH
28791: LD_INT 0
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 0
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 1
28814: PUSH
28815: LD_INT 0
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PUSH
28822: LD_INT 1
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: EMPTY
28829: LIST
28830: LIST
28831: PUSH
28832: LD_INT 0
28834: PUSH
28835: LD_INT 1
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 1
28844: NEG
28845: PUSH
28846: LD_INT 0
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: LD_INT 1
28859: NEG
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 1
28867: NEG
28868: PUSH
28869: LD_INT 2
28871: NEG
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: LD_INT 2
28882: NEG
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: LD_INT 1
28893: NEG
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 2
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 2
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: LD_INT 2
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 2
28952: NEG
28953: PUSH
28954: LD_INT 1
28956: NEG
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 2
28964: NEG
28965: PUSH
28966: LD_INT 2
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 2
28976: NEG
28977: PUSH
28978: LD_INT 3
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 2
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 3
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: LD_INT 3
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: LD_INT 3
29030: NEG
29031: PUSH
29032: LD_INT 2
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29065: LD_ADDR_VAR 0 30
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: LD_INT 0
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 0
29113: PUSH
29114: LD_INT 1
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PUSH
29121: LD_INT 1
29123: NEG
29124: PUSH
29125: LD_INT 0
29127: PUSH
29128: EMPTY
29129: LIST
29130: LIST
29131: PUSH
29132: LD_INT 1
29134: NEG
29135: PUSH
29136: LD_INT 1
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: LD_INT 2
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 0
29158: PUSH
29159: LD_INT 2
29161: NEG
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: LD_INT 1
29172: NEG
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 2
29180: PUSH
29181: LD_INT 0
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 2
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 2
29200: PUSH
29201: LD_INT 2
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: PUSH
29211: LD_INT 2
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 2
29231: NEG
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 2
29242: NEG
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: LD_INT 3
29258: NEG
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 1
29266: PUSH
29267: LD_INT 2
29269: NEG
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 3
29277: PUSH
29278: LD_INT 2
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 2
29287: PUSH
29288: LD_INT 3
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 2
29297: NEG
29298: PUSH
29299: LD_INT 1
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 3
29308: NEG
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29343: LD_ADDR_VAR 0 31
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: LD_INT 1
29363: NEG
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 1
29436: PUSH
29437: LD_INT 1
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 2
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 2
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 2
29467: PUSH
29468: LD_INT 2
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 0
29487: PUSH
29488: LD_INT 2
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: NEG
29509: PUSH
29510: LD_INT 1
29512: NEG
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 2
29520: NEG
29521: PUSH
29522: LD_INT 2
29524: NEG
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 2
29532: NEG
29533: PUSH
29534: LD_INT 3
29536: NEG
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 2
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 3
29555: PUSH
29556: LD_INT 1
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: LD_INT 3
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 1
29575: NEG
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 3
29586: NEG
29587: PUSH
29588: LD_INT 2
29590: NEG
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29621: LD_ADDR_VAR 0 32
29625: PUSH
29626: LD_INT 0
29628: PUSH
29629: LD_INT 0
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: LD_INT 1
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: LD_INT 1
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: LD_INT 1
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 1
29679: NEG
29680: PUSH
29681: LD_INT 0
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 1
29702: NEG
29703: PUSH
29704: LD_INT 2
29706: NEG
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: LD_INT 2
29717: NEG
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 2
29736: PUSH
29737: LD_INT 1
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: LD_INT 2
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 1
29756: PUSH
29757: LD_INT 2
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: NEG
29777: PUSH
29778: LD_INT 1
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 2
29787: NEG
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 2
29798: NEG
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: LD_INT 3
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: LD_INT 2
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 3
29833: PUSH
29834: LD_INT 2
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 2
29843: PUSH
29844: LD_INT 3
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 2
29853: NEG
29854: PUSH
29855: LD_INT 1
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 3
29864: NEG
29865: PUSH
29866: LD_INT 1
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29899: LD_ADDR_VAR 0 33
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: LD_INT 0
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: LD_INT 1
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 1
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 0
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 1
29968: NEG
29969: PUSH
29970: LD_INT 1
29972: NEG
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 1
29980: NEG
29981: PUSH
29982: LD_INT 2
29984: NEG
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: PUSH
29993: LD_INT 1
29995: NEG
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: LD_INT 0
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 2
30013: PUSH
30014: LD_INT 1
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 1
30023: PUSH
30024: LD_INT 2
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: LD_INT 2
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: NEG
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 2
30054: NEG
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 2
30065: NEG
30066: PUSH
30067: LD_INT 1
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 2
30077: NEG
30078: PUSH
30079: LD_INT 2
30081: NEG
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: PUSH
30087: LD_INT 2
30089: NEG
30090: PUSH
30091: LD_INT 3
30093: NEG
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 2
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 3
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: LD_INT 3
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 1
30132: NEG
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: EMPTY
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 3
30143: NEG
30144: PUSH
30145: LD_INT 2
30147: NEG
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30178: LD_ADDR_VAR 0 34
30182: PUSH
30183: LD_INT 0
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 0
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: LD_INT 1
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: LD_INT 1
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 1
30236: NEG
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 1
30247: NEG
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: LD_INT 2
30263: NEG
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 0
30271: PUSH
30272: LD_INT 2
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: LD_INT 1
30285: NEG
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 2
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 2
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: LD_INT 2
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: NEG
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 2
30334: NEG
30335: PUSH
30336: LD_INT 0
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 2
30345: NEG
30346: PUSH
30347: LD_INT 1
30349: NEG
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 2
30357: NEG
30358: PUSH
30359: LD_INT 2
30361: NEG
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 1
30369: NEG
30370: PUSH
30371: LD_INT 3
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: LD_INT 2
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 3
30392: PUSH
30393: LD_INT 2
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 2
30402: PUSH
30403: LD_INT 3
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 2
30412: NEG
30413: PUSH
30414: LD_INT 1
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: NEG
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30458: LD_ADDR_VAR 0 35
30462: PUSH
30463: LD_INT 0
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: LD_INT 1
30478: NEG
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: LD_INT 0
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: LD_INT 1
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 0
30506: PUSH
30507: LD_INT 1
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 1
30527: NEG
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 2
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 2
30549: NEG
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30570: LD_ADDR_VAR 0 36
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: LD_INT 1
30590: NEG
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 0
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 1
30628: NEG
30629: PUSH
30630: LD_INT 0
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 1
30639: NEG
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: NEG
30652: PUSH
30653: LD_INT 2
30655: NEG
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 1
30663: PUSH
30664: LD_INT 2
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30682: LD_ADDR_VAR 0 37
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: LD_INT 0
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: LD_INT 1
30702: NEG
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 1
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 1
30740: NEG
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 1
30751: NEG
30752: PUSH
30753: LD_INT 1
30755: NEG
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 1
30763: PUSH
30764: LD_INT 1
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30794: LD_ADDR_VAR 0 38
30798: PUSH
30799: LD_INT 0
30801: PUSH
30802: LD_INT 0
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: LD_INT 1
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 2
30885: NEG
30886: PUSH
30887: LD_INT 1
30889: NEG
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30906: LD_ADDR_VAR 0 39
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: LD_INT 1
30926: NEG
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 1
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: LD_INT 0
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: LD_INT 1
30979: NEG
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: LD_INT 2
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31018: LD_ADDR_VAR 0 40
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: LD_INT 0
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: LD_INT 1
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 1
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 1
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: LD_INT 1
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: NEG
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 1
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 1
31110: NEG
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31130: LD_ADDR_VAR 0 41
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: LD_INT 0
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 1
31168: PUSH
31169: LD_INT 1
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 0
31178: PUSH
31179: LD_INT 1
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 1
31188: NEG
31189: PUSH
31190: LD_INT 0
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: LD_INT 1
31203: NEG
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: LD_INT 2
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 2
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 2
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 2
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: PUSH
31265: LD_INT 2
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 2
31285: NEG
31286: PUSH
31287: LD_INT 0
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 2
31296: NEG
31297: PUSH
31298: LD_INT 1
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 2
31308: NEG
31309: PUSH
31310: LD_INT 2
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: LD_INT 3
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 2
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 3
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 3
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 3
31363: PUSH
31364: LD_INT 2
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 3
31373: PUSH
31374: LD_INT 3
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 2
31383: PUSH
31384: LD_INT 3
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 3
31404: NEG
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 3
31415: NEG
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 3
31427: NEG
31428: PUSH
31429: LD_INT 2
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 3
31439: NEG
31440: PUSH
31441: LD_INT 3
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31480: LD_ADDR_VAR 0 42
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: LD_INT 1
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 1
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: NEG
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: LD_INT 1
31587: NEG
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 2
31595: PUSH
31596: LD_INT 1
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 2
31605: PUSH
31606: LD_INT 2
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: LD_INT 2
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 2
31646: NEG
31647: PUSH
31648: LD_INT 1
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: NEG
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: LD_INT 3
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: LD_INT 3
31686: NEG
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: LD_INT 3
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 1
31705: PUSH
31706: LD_INT 2
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 3
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 3
31726: PUSH
31727: LD_INT 3
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 2
31736: PUSH
31737: LD_INT 3
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: LD_INT 3
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 0
31756: PUSH
31757: LD_INT 3
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 1
31766: NEG
31767: PUSH
31768: LD_INT 2
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 3
31777: NEG
31778: PUSH
31779: LD_INT 2
31781: NEG
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 3
31789: NEG
31790: PUSH
31791: LD_INT 3
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31830: LD_ADDR_VAR 0 43
31834: PUSH
31835: LD_INT 0
31837: PUSH
31838: LD_INT 0
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: LD_INT 1
31850: NEG
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: LD_INT 0
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 1
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: LD_INT 1
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 1
31888: NEG
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 1
31899: NEG
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 1
31911: NEG
31912: PUSH
31913: LD_INT 2
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 1
31934: PUSH
31935: LD_INT 1
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 2
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: PUSH
31966: LD_INT 2
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 1
31985: NEG
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 2
31996: NEG
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 2
32007: NEG
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: LD_INT 3
32023: NEG
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: LD_INT 3
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: LD_INT 2
32045: NEG
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 3
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 3
32074: PUSH
32075: LD_INT 1
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: LD_INT 3
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: LD_INT 3
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 1
32104: NEG
32105: PUSH
32106: LD_INT 2
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 2
32115: NEG
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 3
32126: NEG
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 3
32137: NEG
32138: PUSH
32139: LD_INT 1
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32178: LD_ADDR_VAR 0 44
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: LD_INT 1
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 1
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: NEG
32248: PUSH
32249: LD_INT 1
32251: NEG
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: LD_INT 2
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: LD_INT 1
32274: NEG
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 2
32292: PUSH
32293: LD_INT 1
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: LD_INT 2
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: LD_INT 2
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 1
32322: NEG
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 2
32333: NEG
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: NEG
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 2
32356: NEG
32357: PUSH
32358: LD_INT 2
32360: NEG
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 2
32368: NEG
32369: PUSH
32370: LD_INT 3
32372: NEG
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 3
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 3
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 3
32411: PUSH
32412: LD_INT 2
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 3
32421: PUSH
32422: LD_INT 3
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 2
32431: PUSH
32432: LD_INT 3
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 2
32441: NEG
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 3
32452: NEG
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 3
32463: NEG
32464: PUSH
32465: LD_INT 1
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 3
32475: NEG
32476: PUSH
32477: LD_INT 2
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 3
32487: NEG
32488: PUSH
32489: LD_INT 3
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32528: LD_ADDR_VAR 0 45
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: LD_INT 0
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 1
32586: NEG
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: PUSH
32654: LD_INT 2
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: LD_INT 2
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 2
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 1
32683: NEG
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 2
32694: NEG
32695: PUSH
32696: LD_INT 1
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 2
32706: NEG
32707: PUSH
32708: LD_INT 2
32710: NEG
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_INT 2
32718: NEG
32719: PUSH
32720: LD_INT 3
32722: NEG
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: LD_INT 3
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: LD_INT 3
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: LD_INT 2
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 3
32764: PUSH
32765: LD_INT 2
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 3
32774: PUSH
32775: LD_INT 3
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: LD_INT 3
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: LD_INT 3
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: LD_INT 3
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 1
32814: NEG
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 3
32825: NEG
32826: PUSH
32827: LD_INT 2
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 3
32837: NEG
32838: PUSH
32839: LD_INT 3
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32878: LD_ADDR_VAR 0 46
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 0
32895: PUSH
32896: LD_INT 1
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 1
32936: NEG
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 1
32947: NEG
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 1
32959: NEG
32960: PUSH
32961: LD_INT 2
32963: NEG
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 0
32971: PUSH
32972: LD_INT 2
32974: NEG
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 1
32982: PUSH
32983: LD_INT 1
32985: NEG
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 2
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 2
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 0
33023: PUSH
33024: LD_INT 2
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 2
33044: NEG
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 2
33055: NEG
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: LD_INT 3
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: LD_INT 3
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: LD_INT 2
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: LD_INT 1
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 3
33112: PUSH
33113: LD_INT 0
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 3
33122: PUSH
33123: LD_INT 1
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 1
33132: PUSH
33133: LD_INT 3
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: LD_INT 3
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: LD_INT 2
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 2
33163: NEG
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 3
33174: NEG
33175: PUSH
33176: LD_INT 0
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 3
33185: NEG
33186: PUSH
33187: LD_INT 1
33189: NEG
33190: PUSH
33191: EMPTY
33192: LIST
33193: LIST
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33226: LD_ADDR_VAR 0 47
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: LD_INT 1
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 1
33284: NEG
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: LD_INT 2
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 2
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 2
33341: NEG
33342: PUSH
33343: LD_INT 1
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: LD_INT 2
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33377: LD_ADDR_VAR 0 48
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 0
33425: PUSH
33426: LD_INT 1
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: PUSH
33444: LD_INT 1
33446: NEG
33447: PUSH
33448: LD_INT 1
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 1
33458: NEG
33459: PUSH
33460: LD_INT 2
33462: NEG
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 0
33470: PUSH
33471: LD_INT 2
33473: NEG
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: PUSH
33482: LD_INT 1
33484: NEG
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 2
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 2
33502: PUSH
33503: LD_INT 1
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33524: LD_ADDR_VAR 0 49
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: LD_INT 1
33544: NEG
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: LD_INT 1
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 1
33605: PUSH
33606: LD_INT 1
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 2
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33668: LD_ADDR_VAR 0 50
33672: PUSH
33673: LD_INT 0
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 0
33716: PUSH
33717: LD_INT 1
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: NEG
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 2
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 1
33769: PUSH
33770: LD_INT 2
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33812: LD_ADDR_VAR 0 51
33816: PUSH
33817: LD_INT 0
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 1
33850: PUSH
33851: LD_INT 1
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 0
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 1
33870: NEG
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: LD_INT 1
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: LD_INT 2
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 0
33903: PUSH
33904: LD_INT 2
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: LD_INT 1
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 2
33924: NEG
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 2
33935: NEG
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33959: LD_ADDR_VAR 0 52
33963: PUSH
33964: LD_INT 0
33966: PUSH
33967: LD_INT 0
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 0
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 0
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 1
34028: NEG
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: PUSH
34038: LD_INT 1
34040: NEG
34041: PUSH
34042: LD_INT 2
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: NEG
34053: PUSH
34054: LD_INT 1
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 2
34063: NEG
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 1
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 2
34086: NEG
34087: PUSH
34088: LD_INT 2
34090: NEG
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34110: LD_ADDR_VAR 0 53
34114: PUSH
34115: LD_INT 0
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 1
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 1
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: LD_INT 1
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 1
34179: NEG
34180: PUSH
34181: LD_INT 1
34183: NEG
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 1
34191: NEG
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: LD_INT 2
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: LD_INT 1
34217: NEG
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: LD_INT 1
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 2
34245: PUSH
34246: LD_INT 2
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: LD_INT 2
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 0
34265: PUSH
34266: LD_INT 2
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 2
34286: NEG
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 2
34297: NEG
34298: PUSH
34299: LD_INT 1
34301: NEG
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 2
34309: NEG
34310: PUSH
34311: LD_INT 2
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: EMPTY
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34340: LD_ADDR_VAR 0 54
34344: PUSH
34345: LD_INT 0
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 1
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: LD_INT 1
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: LD_INT 1
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: NEG
34399: PUSH
34400: LD_INT 0
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 1
34409: NEG
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PUSH
34423: LD_INT 2
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 0
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: LD_INT 1
34447: NEG
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: PUSH
34456: LD_INT 0
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 2
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: LD_INT 2
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: LD_INT 2
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 0
34495: PUSH
34496: LD_INT 2
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 2
34516: NEG
34517: PUSH
34518: LD_INT 0
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 2
34527: NEG
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 2
34539: NEG
34540: PUSH
34541: LD_INT 2
34543: NEG
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34570: LD_ADDR_VAR 0 55
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: LD_INT 1
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: LD_INT 0
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: PUSH
34609: LD_INT 1
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: NEG
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 1
34639: NEG
34640: PUSH
34641: LD_INT 1
34643: NEG
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 2
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: LD_INT 1
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 2
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 2
34746: NEG
34747: PUSH
34748: LD_INT 0
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 2
34757: NEG
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 2
34769: NEG
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34800: LD_ADDR_VAR 0 56
34804: PUSH
34805: LD_INT 0
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 0
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 0
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: LD_INT 1
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 1
34858: NEG
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 1
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 1
34881: NEG
34882: PUSH
34883: LD_INT 2
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: LD_INT 2
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 2
34925: PUSH
34926: LD_INT 1
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 2
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: PUSH
34946: LD_INT 2
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 2
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 1
34965: NEG
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: NEG
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 2
34987: NEG
34988: PUSH
34989: LD_INT 1
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 2
34999: NEG
35000: PUSH
35001: LD_INT 2
35003: NEG
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: EMPTY
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35030: LD_ADDR_VAR 0 57
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: LD_INT 0
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: LD_INT 1
35050: NEG
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: LD_INT 1
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 1
35099: NEG
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: NEG
35112: PUSH
35113: LD_INT 2
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: LD_INT 2
35126: NEG
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 1
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 2
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 2
35206: NEG
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 2
35217: NEG
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: NEG
35230: PUSH
35231: LD_INT 2
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35260: LD_ADDR_VAR 0 58
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: LD_INT 0
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: NEG
35330: PUSH
35331: LD_INT 1
35333: NEG
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 1
35341: NEG
35342: PUSH
35343: LD_INT 2
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: LD_INT 2
35356: NEG
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 2
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 2
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 2
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 2
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 0
35415: PUSH
35416: LD_INT 2
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: NEG
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 2
35447: NEG
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 2
35459: NEG
35460: PUSH
35461: LD_INT 2
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35490: LD_ADDR_VAR 0 59
35494: PUSH
35495: LD_INT 0
35497: PUSH
35498: LD_INT 0
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: LD_INT 1
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 1
35559: NEG
35560: PUSH
35561: LD_INT 1
35563: NEG
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35578: LD_ADDR_VAR 0 60
35582: PUSH
35583: LD_INT 0
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: LD_INT 1
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 1
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 1
35647: NEG
35648: PUSH
35649: LD_INT 1
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35666: LD_ADDR_VAR 0 61
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: LD_INT 0
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: LD_INT 0
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: PUSH
35705: LD_INT 1
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 0
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PUSH
35722: LD_INT 1
35724: NEG
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 1
35735: NEG
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35754: LD_ADDR_VAR 0 62
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: LD_INT 0
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 0
35771: PUSH
35772: LD_INT 1
35774: NEG
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: LD_INT 1
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: NEG
35824: PUSH
35825: LD_INT 1
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35842: LD_ADDR_VAR 0 63
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 0
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 1
35900: NEG
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: NEG
35912: PUSH
35913: LD_INT 1
35915: NEG
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35930: LD_ADDR_VAR 0 64
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 1
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 1
35999: NEG
36000: PUSH
36001: LD_INT 1
36003: NEG
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: ST_TO_ADDR
// end ; 1 :
36018: GO 41915
36020: LD_INT 1
36022: DOUBLE
36023: EQUAL
36024: IFTRUE 36028
36026: GO 38651
36028: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36029: LD_ADDR_VAR 0 11
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: LD_INT 3
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: LD_INT 3
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 1
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36073: LD_ADDR_VAR 0 12
36077: PUSH
36078: LD_INT 2
36080: PUSH
36081: LD_INT 1
36083: NEG
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 3
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 3
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36114: LD_ADDR_VAR 0 13
36118: PUSH
36119: LD_INT 3
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 3
36131: PUSH
36132: LD_INT 3
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 2
36141: PUSH
36142: LD_INT 3
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36154: LD_ADDR_VAR 0 14
36158: PUSH
36159: LD_INT 1
36161: PUSH
36162: LD_INT 3
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 0
36171: PUSH
36172: LD_INT 3
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 1
36181: NEG
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: LIST
36194: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36195: LD_ADDR_VAR 0 15
36199: PUSH
36200: LD_INT 2
36202: NEG
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 3
36213: NEG
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 3
36224: NEG
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36239: LD_ADDR_VAR 0 16
36243: PUSH
36244: LD_INT 2
36246: NEG
36247: PUSH
36248: LD_INT 3
36250: NEG
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 3
36258: NEG
36259: PUSH
36260: LD_INT 2
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 3
36270: NEG
36271: PUSH
36272: LD_INT 3
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: LIST
36284: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36285: LD_ADDR_VAR 0 17
36289: PUSH
36290: LD_INT 1
36292: NEG
36293: PUSH
36294: LD_INT 3
36296: NEG
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: LD_INT 3
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: LD_INT 2
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: LIST
36328: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36329: LD_ADDR_VAR 0 18
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: LD_INT 1
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 3
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 3
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36370: LD_ADDR_VAR 0 19
36374: PUSH
36375: LD_INT 3
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 3
36387: PUSH
36388: LD_INT 3
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: LD_INT 3
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36410: LD_ADDR_VAR 0 20
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: LD_INT 3
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: LD_INT 3
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: LIST
36450: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36451: LD_ADDR_VAR 0 21
36455: PUSH
36456: LD_INT 2
36458: NEG
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 3
36469: NEG
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 3
36480: NEG
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: LIST
36494: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36495: LD_ADDR_VAR 0 22
36499: PUSH
36500: LD_INT 2
36502: NEG
36503: PUSH
36504: LD_INT 3
36506: NEG
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: LD_INT 3
36514: NEG
36515: PUSH
36516: LD_INT 2
36518: NEG
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: PUSH
36524: LD_INT 3
36526: NEG
36527: PUSH
36528: LD_INT 3
36530: NEG
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: LIST
36540: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36541: LD_ADDR_VAR 0 23
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: LD_INT 3
36551: NEG
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: NEG
36560: PUSH
36561: LD_INT 4
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 3
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: LIST
36584: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36585: LD_ADDR_VAR 0 24
36589: PUSH
36590: LD_INT 3
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 3
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 4
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36626: LD_ADDR_VAR 0 25
36630: PUSH
36631: LD_INT 3
36633: PUSH
36634: LD_INT 3
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 4
36643: PUSH
36644: LD_INT 3
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 3
36653: PUSH
36654: LD_INT 4
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: LIST
36665: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36666: LD_ADDR_VAR 0 26
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 3
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: LD_INT 4
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: LD_INT 3
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: LIST
36706: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36707: LD_ADDR_VAR 0 27
36711: PUSH
36712: LD_INT 3
36714: NEG
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 3
36725: NEG
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 4
36736: NEG
36737: PUSH
36738: LD_INT 1
36740: NEG
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36751: LD_ADDR_VAR 0 28
36755: PUSH
36756: LD_INT 3
36758: NEG
36759: PUSH
36760: LD_INT 3
36762: NEG
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 3
36770: NEG
36771: PUSH
36772: LD_INT 4
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 4
36782: NEG
36783: PUSH
36784: LD_INT 3
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: LIST
36796: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36797: LD_ADDR_VAR 0 29
36801: PUSH
36802: LD_INT 1
36804: NEG
36805: PUSH
36806: LD_INT 3
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: LD_INT 3
36819: NEG
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: LD_INT 2
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: LD_INT 4
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 0
36850: PUSH
36851: LD_INT 4
36853: NEG
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: PUSH
36862: LD_INT 3
36864: NEG
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: LD_INT 5
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 5
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: LD_INT 4
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: LD_INT 6
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 6
36921: NEG
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: LD_INT 5
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36952: LD_ADDR_VAR 0 30
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: LD_INT 1
36962: NEG
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: PUSH
36968: LD_INT 3
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 3
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 3
36990: PUSH
36991: LD_INT 1
36993: NEG
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 4
37001: PUSH
37002: LD_INT 0
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 4
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 4
37021: PUSH
37022: LD_INT 1
37024: NEG
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: LD_INT 5
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 5
37042: PUSH
37043: LD_INT 1
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 5
37052: PUSH
37053: LD_INT 1
37055: NEG
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 6
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 6
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37095: LD_ADDR_VAR 0 31
37099: PUSH
37100: LD_INT 3
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 3
37112: PUSH
37113: LD_INT 3
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 2
37122: PUSH
37123: LD_INT 3
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 4
37132: PUSH
37133: LD_INT 3
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 4
37142: PUSH
37143: LD_INT 4
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 3
37152: PUSH
37153: LD_INT 4
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 5
37162: PUSH
37163: LD_INT 4
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 5
37172: PUSH
37173: LD_INT 5
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 4
37182: PUSH
37183: LD_INT 5
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 6
37192: PUSH
37193: LD_INT 5
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 6
37202: PUSH
37203: LD_INT 6
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 5
37212: PUSH
37213: LD_INT 6
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37234: LD_ADDR_VAR 0 32
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: LD_INT 3
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: LD_INT 3
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: LD_INT 4
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: LD_INT 4
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: LD_INT 3
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: LD_INT 5
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: LD_INT 5
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: LD_INT 4
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: LD_INT 6
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: LD_INT 6
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 1
37354: NEG
37355: PUSH
37356: LD_INT 5
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37377: LD_ADDR_VAR 0 33
37381: PUSH
37382: LD_INT 2
37384: NEG
37385: PUSH
37386: LD_INT 1
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 3
37395: NEG
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 3
37406: NEG
37407: PUSH
37408: LD_INT 1
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 3
37418: NEG
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 4
37429: NEG
37430: PUSH
37431: LD_INT 0
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 4
37440: NEG
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 4
37452: NEG
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 5
37463: NEG
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 5
37474: NEG
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 5
37486: NEG
37487: PUSH
37488: LD_INT 1
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 6
37497: NEG
37498: PUSH
37499: LD_INT 0
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 6
37508: NEG
37509: PUSH
37510: LD_INT 1
37512: NEG
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37532: LD_ADDR_VAR 0 34
37536: PUSH
37537: LD_INT 2
37539: NEG
37540: PUSH
37541: LD_INT 3
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 3
37551: NEG
37552: PUSH
37553: LD_INT 2
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 3
37563: NEG
37564: PUSH
37565: LD_INT 3
37567: NEG
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 3
37575: NEG
37576: PUSH
37577: LD_INT 4
37579: NEG
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 4
37587: NEG
37588: PUSH
37589: LD_INT 3
37591: NEG
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 4
37599: NEG
37600: PUSH
37601: LD_INT 4
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 4
37611: NEG
37612: PUSH
37613: LD_INT 5
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 5
37623: NEG
37624: PUSH
37625: LD_INT 4
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 5
37635: NEG
37636: PUSH
37637: LD_INT 5
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 5
37647: NEG
37648: PUSH
37649: LD_INT 6
37651: NEG
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 6
37659: NEG
37660: PUSH
37661: LD_INT 5
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 6
37671: NEG
37672: PUSH
37673: LD_INT 6
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37695: LD_ADDR_VAR 0 41
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: LD_INT 2
37705: NEG
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: LD_INT 3
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: LD_INT 2
37728: NEG
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: LIST
37738: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37739: LD_ADDR_VAR 0 42
37743: PUSH
37744: LD_INT 2
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 3
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37780: LD_ADDR_VAR 0 43
37784: PUSH
37785: LD_INT 2
37787: PUSH
37788: LD_INT 2
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 3
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: LD_INT 3
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: LIST
37819: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37820: LD_ADDR_VAR 0 44
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 2
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 1
37847: NEG
37848: PUSH
37849: LD_INT 2
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: LIST
37860: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37861: LD_ADDR_VAR 0 45
37865: PUSH
37866: LD_INT 2
37868: NEG
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 2
37879: NEG
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 3
37890: NEG
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: LIST
37904: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37905: LD_ADDR_VAR 0 46
37909: PUSH
37910: LD_INT 2
37912: NEG
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 2
37924: NEG
37925: PUSH
37926: LD_INT 3
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 3
37936: NEG
37937: PUSH
37938: LD_INT 2
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: LIST
37950: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37951: LD_ADDR_VAR 0 47
37955: PUSH
37956: LD_INT 2
37958: NEG
37959: PUSH
37960: LD_INT 3
37962: NEG
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 1
37970: NEG
37971: PUSH
37972: LD_INT 3
37974: NEG
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37984: LD_ADDR_VAR 0 48
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: LD_INT 2
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 2
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38015: LD_ADDR_VAR 0 49
38019: PUSH
38020: LD_INT 3
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38044: LD_ADDR_VAR 0 50
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 3
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 3
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38073: LD_ADDR_VAR 0 51
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38104: LD_ADDR_VAR 0 52
38108: PUSH
38109: LD_INT 3
38111: NEG
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 3
38123: NEG
38124: PUSH
38125: LD_INT 2
38127: NEG
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38137: LD_ADDR_VAR 0 53
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: PUSH
38146: LD_INT 3
38148: NEG
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: LD_INT 3
38159: NEG
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: LD_INT 2
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: LIST
38180: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38181: LD_ADDR_VAR 0 54
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 3
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 3
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: LIST
38221: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38222: LD_ADDR_VAR 0 55
38226: PUSH
38227: LD_INT 3
38229: PUSH
38230: LD_INT 2
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 3
38239: PUSH
38240: LD_INT 3
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: LD_INT 3
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38262: LD_ADDR_VAR 0 56
38266: PUSH
38267: LD_INT 1
38269: PUSH
38270: LD_INT 3
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: LD_INT 3
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: LD_INT 2
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: LIST
38302: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38303: LD_ADDR_VAR 0 57
38307: PUSH
38308: LD_INT 2
38310: NEG
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 3
38321: NEG
38322: PUSH
38323: LD_INT 0
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 3
38332: NEG
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: LIST
38346: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38347: LD_ADDR_VAR 0 58
38351: PUSH
38352: LD_INT 2
38354: NEG
38355: PUSH
38356: LD_INT 3
38358: NEG
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 3
38366: NEG
38367: PUSH
38368: LD_INT 2
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 3
38378: NEG
38379: PUSH
38380: LD_INT 3
38382: NEG
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: LIST
38392: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38393: LD_ADDR_VAR 0 59
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: LD_INT 2
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: LD_INT 2
38415: NEG
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 1
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: EMPTY
38433: LIST
38434: LIST
38435: LIST
38436: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38437: LD_ADDR_VAR 0 60
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: LD_INT 1
38447: NEG
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 2
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 2
38465: PUSH
38466: LD_INT 1
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: LIST
38477: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38478: LD_ADDR_VAR 0 61
38482: PUSH
38483: LD_INT 2
38485: PUSH
38486: LD_INT 1
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 2
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: PUSH
38503: LD_INT 1
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38518: LD_ADDR_VAR 0 62
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: LD_INT 2
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: NEG
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38559: LD_ADDR_VAR 0 63
38563: PUSH
38564: LD_INT 1
38566: NEG
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: LD_INT 2
38577: NEG
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 2
38588: NEG
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: LIST
38602: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38603: LD_ADDR_VAR 0 64
38607: PUSH
38608: LD_INT 1
38610: NEG
38611: PUSH
38612: LD_INT 2
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: NEG
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 2
38634: NEG
38635: PUSH
38636: LD_INT 2
38638: NEG
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: LIST
38648: ST_TO_ADDR
// end ; 2 :
38649: GO 41915
38651: LD_INT 2
38653: DOUBLE
38654: EQUAL
38655: IFTRUE 38659
38657: GO 41914
38659: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38660: LD_ADDR_VAR 0 29
38664: PUSH
38665: LD_INT 4
38667: PUSH
38668: LD_INT 0
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 4
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 5
38688: PUSH
38689: LD_INT 0
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 5
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 4
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 3
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 3
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 3
38739: PUSH
38740: LD_INT 2
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 5
38750: PUSH
38751: LD_INT 2
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 3
38760: PUSH
38761: LD_INT 3
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 3
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 4
38780: PUSH
38781: LD_INT 3
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 4
38790: PUSH
38791: LD_INT 4
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 3
38800: PUSH
38801: LD_INT 4
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 2
38810: PUSH
38811: LD_INT 3
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 2
38820: PUSH
38821: LD_INT 2
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 4
38830: PUSH
38831: LD_INT 2
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: PUSH
38841: LD_INT 4
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 0
38850: PUSH
38851: LD_INT 4
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: LD_INT 3
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: LD_INT 4
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 1
38880: PUSH
38881: LD_INT 5
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: LD_INT 5
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: LD_INT 4
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 1
38911: NEG
38912: PUSH
38913: LD_INT 3
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 2
38922: PUSH
38923: LD_INT 5
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 2
38932: NEG
38933: PUSH
38934: LD_INT 3
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 3
38943: NEG
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 3
38954: NEG
38955: PUSH
38956: LD_INT 1
38958: NEG
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 2
38966: NEG
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 2
38977: NEG
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 3
38988: NEG
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 4
38999: NEG
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 4
39010: NEG
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 4
39022: NEG
39023: PUSH
39024: LD_INT 2
39026: NEG
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 2
39034: NEG
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 4
39045: NEG
39046: PUSH
39047: LD_INT 4
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 4
39057: NEG
39058: PUSH
39059: LD_INT 5
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 3
39069: NEG
39070: PUSH
39071: LD_INT 4
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 3
39081: NEG
39082: PUSH
39083: LD_INT 3
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 4
39093: NEG
39094: PUSH
39095: LD_INT 3
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 5
39105: NEG
39106: PUSH
39107: LD_INT 4
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 5
39117: NEG
39118: PUSH
39119: LD_INT 5
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 3
39129: NEG
39130: PUSH
39131: LD_INT 5
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 5
39141: NEG
39142: PUSH
39143: LD_INT 3
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39198: LD_ADDR_VAR 0 30
39202: PUSH
39203: LD_INT 4
39205: PUSH
39206: LD_INT 4
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 4
39215: PUSH
39216: LD_INT 3
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 5
39225: PUSH
39226: LD_INT 4
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 5
39235: PUSH
39236: LD_INT 5
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 4
39245: PUSH
39246: LD_INT 5
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: LD_INT 4
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: LD_INT 3
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 5
39275: PUSH
39276: LD_INT 3
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 3
39285: PUSH
39286: LD_INT 5
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 0
39295: PUSH
39296: LD_INT 3
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: LD_INT 3
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: LD_INT 4
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: LD_INT 4
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: LD_INT 3
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: LD_INT 2
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: LD_INT 4
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 4
39388: NEG
39389: PUSH
39390: LD_INT 0
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 4
39399: NEG
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 3
39411: NEG
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 3
39422: NEG
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 4
39433: NEG
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 5
39444: NEG
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 5
39455: NEG
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 5
39467: NEG
39468: PUSH
39469: LD_INT 2
39471: NEG
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 3
39479: NEG
39480: PUSH
39481: LD_INT 2
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 3
39490: NEG
39491: PUSH
39492: LD_INT 3
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 3
39502: NEG
39503: PUSH
39504: LD_INT 4
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 2
39514: NEG
39515: PUSH
39516: LD_INT 3
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: LD_INT 2
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 3
39538: NEG
39539: PUSH
39540: LD_INT 2
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 4
39550: NEG
39551: PUSH
39552: LD_INT 3
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 4
39562: NEG
39563: PUSH
39564: LD_INT 4
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 2
39574: NEG
39575: PUSH
39576: LD_INT 4
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 4
39586: NEG
39587: PUSH
39588: LD_INT 2
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: LD_INT 4
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: LD_INT 5
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: LD_INT 4
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: LD_INT 3
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: LD_INT 3
39645: NEG
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: LD_INT 4
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: LD_INT 5
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: LD_INT 3
39680: NEG
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 2
39688: NEG
39689: PUSH
39690: LD_INT 5
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39745: LD_ADDR_VAR 0 31
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: LD_INT 4
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 3
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: LD_INT 4
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: LD_INT 5
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: LD_INT 5
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: NEG
39803: PUSH
39804: LD_INT 4
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: LD_INT 3
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 2
39824: PUSH
39825: LD_INT 5
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: LD_INT 3
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 3
39845: NEG
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 3
39856: NEG
39857: PUSH
39858: LD_INT 1
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 2
39868: NEG
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 2
39879: NEG
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 3
39890: NEG
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 4
39901: NEG
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 4
39912: NEG
39913: PUSH
39914: LD_INT 1
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 4
39924: NEG
39925: PUSH
39926: LD_INT 2
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: LD_INT 2
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 4
39947: NEG
39948: PUSH
39949: LD_INT 4
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 4
39959: NEG
39960: PUSH
39961: LD_INT 5
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 3
39971: NEG
39972: PUSH
39973: LD_INT 4
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 3
39983: NEG
39984: PUSH
39985: LD_INT 3
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 4
39995: NEG
39996: PUSH
39997: LD_INT 3
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 5
40007: NEG
40008: PUSH
40009: LD_INT 4
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 5
40019: NEG
40020: PUSH
40021: LD_INT 5
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 3
40031: NEG
40032: PUSH
40033: LD_INT 5
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 5
40043: NEG
40044: PUSH
40045: LD_INT 3
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 0
40055: PUSH
40056: LD_INT 3
40058: NEG
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: LD_INT 4
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: PUSH
40078: LD_INT 3
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: LD_INT 2
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: LD_INT 3
40114: NEG
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: LD_INT 4
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: LD_INT 4
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 4
40157: PUSH
40158: LD_INT 0
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 4
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 5
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 5
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 4
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 3
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 3
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 3
40229: PUSH
40230: LD_INT 2
40232: NEG
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 5
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40295: LD_ADDR_VAR 0 32
40299: PUSH
40300: LD_INT 4
40302: NEG
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 4
40313: NEG
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 3
40325: NEG
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 3
40336: NEG
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 4
40347: NEG
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 5
40358: NEG
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 5
40369: NEG
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 5
40381: NEG
40382: PUSH
40383: LD_INT 2
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 3
40393: NEG
40394: PUSH
40395: LD_INT 2
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 3
40404: NEG
40405: PUSH
40406: LD_INT 3
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 3
40416: NEG
40417: PUSH
40418: LD_INT 4
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 2
40428: NEG
40429: PUSH
40430: LD_INT 3
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 2
40440: NEG
40441: PUSH
40442: LD_INT 2
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 3
40452: NEG
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 4
40464: NEG
40465: PUSH
40466: LD_INT 3
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 4
40476: NEG
40477: PUSH
40478: LD_INT 4
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: NEG
40489: PUSH
40490: LD_INT 4
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 4
40500: NEG
40501: PUSH
40502: LD_INT 2
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: LD_INT 4
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 5
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 1
40534: PUSH
40535: LD_INT 4
40537: NEG
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: LD_INT 3
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 3
40559: NEG
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: NEG
40568: PUSH
40569: LD_INT 4
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: LD_INT 5
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 2
40591: PUSH
40592: LD_INT 3
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 2
40602: NEG
40603: PUSH
40604: LD_INT 5
40606: NEG
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 3
40614: PUSH
40615: LD_INT 0
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 3
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 4
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 4
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 3
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 2
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 2
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 4
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 4
40707: PUSH
40708: LD_INT 4
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 4
40717: PUSH
40718: LD_INT 3
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 5
40727: PUSH
40728: LD_INT 4
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 5
40737: PUSH
40738: LD_INT 5
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 4
40747: PUSH
40748: LD_INT 5
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 3
40757: PUSH
40758: LD_INT 4
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 3
40767: PUSH
40768: LD_INT 3
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 5
40777: PUSH
40778: LD_INT 3
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 3
40787: PUSH
40788: LD_INT 5
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40842: LD_ADDR_VAR 0 33
40846: PUSH
40847: LD_INT 4
40849: NEG
40850: PUSH
40851: LD_INT 4
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 4
40861: NEG
40862: PUSH
40863: LD_INT 5
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 3
40873: NEG
40874: PUSH
40875: LD_INT 4
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 3
40885: NEG
40886: PUSH
40887: LD_INT 3
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 4
40897: NEG
40898: PUSH
40899: LD_INT 3
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 5
40909: NEG
40910: PUSH
40911: LD_INT 4
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 5
40921: NEG
40922: PUSH
40923: LD_INT 5
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 3
40933: NEG
40934: PUSH
40935: LD_INT 5
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 5
40945: NEG
40946: PUSH
40947: LD_INT 3
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 3
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: LD_INT 4
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: LD_INT 3
40982: NEG
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: LD_INT 2
40993: NEG
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 2
41004: NEG
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 3
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: LD_INT 4
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: LD_INT 4
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 4
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 4
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 5
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 5
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 4
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 3
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 3
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 3
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 5
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 3
41152: PUSH
41153: LD_INT 3
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 3
41162: PUSH
41163: LD_INT 2
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 4
41172: PUSH
41173: LD_INT 3
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 4
41182: PUSH
41183: LD_INT 4
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 3
41192: PUSH
41193: LD_INT 4
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: LD_INT 3
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 2
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 4
41222: PUSH
41223: LD_INT 2
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 4
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 0
41242: PUSH
41243: LD_INT 4
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: LD_INT 3
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 4
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 5
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 5
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 4
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: LD_INT 3
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 2
41314: PUSH
41315: LD_INT 5
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 2
41324: NEG
41325: PUSH
41326: LD_INT 3
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41380: LD_ADDR_VAR 0 34
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 4
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 5
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: LD_INT 4
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 3
41423: NEG
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: LD_INT 3
41434: NEG
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: LD_INT 4
41446: NEG
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: LD_INT 5
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: LD_INT 3
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: LD_INT 5
41481: NEG
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 3
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 3
41499: PUSH
41500: LD_INT 1
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 4
41510: PUSH
41511: LD_INT 0
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 4
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 3
41530: PUSH
41531: LD_INT 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: LD_INT 0
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: LD_INT 2
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 4
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 4
41582: PUSH
41583: LD_INT 4
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 4
41592: PUSH
41593: LD_INT 3
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 5
41602: PUSH
41603: LD_INT 4
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 5
41612: PUSH
41613: LD_INT 5
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 4
41622: PUSH
41623: LD_INT 5
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 3
41632: PUSH
41633: LD_INT 4
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 3
41642: PUSH
41643: LD_INT 3
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 5
41652: PUSH
41653: LD_INT 3
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 3
41662: PUSH
41663: LD_INT 5
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 3
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 3
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: LD_INT 4
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 4
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: NEG
41723: PUSH
41724: LD_INT 3
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 2
41744: PUSH
41745: LD_INT 4
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 4
41765: NEG
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 4
41776: NEG
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 3
41788: NEG
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: LD_INT 3
41799: NEG
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 4
41810: NEG
41811: PUSH
41812: LD_INT 1
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 5
41821: NEG
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 5
41832: NEG
41833: PUSH
41834: LD_INT 1
41836: NEG
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 5
41844: NEG
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 3
41856: NEG
41857: PUSH
41858: LD_INT 2
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: ST_TO_ADDR
// end ; end ;
41912: GO 41915
41914: POP
// case btype of b_depot , b_warehouse :
41915: LD_VAR 0 1
41919: PUSH
41920: LD_INT 0
41922: DOUBLE
41923: EQUAL
41924: IFTRUE 41934
41926: LD_INT 1
41928: DOUBLE
41929: EQUAL
41930: IFTRUE 41934
41932: GO 42135
41934: POP
// case nation of nation_american :
41935: LD_VAR 0 5
41939: PUSH
41940: LD_INT 1
41942: DOUBLE
41943: EQUAL
41944: IFTRUE 41948
41946: GO 42004
41948: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41949: LD_ADDR_VAR 0 9
41953: PUSH
41954: LD_VAR 0 11
41958: PUSH
41959: LD_VAR 0 12
41963: PUSH
41964: LD_VAR 0 13
41968: PUSH
41969: LD_VAR 0 14
41973: PUSH
41974: LD_VAR 0 15
41978: PUSH
41979: LD_VAR 0 16
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: PUSH
41992: LD_VAR 0 4
41996: PUSH
41997: LD_INT 1
41999: PLUS
42000: ARRAY
42001: ST_TO_ADDR
42002: GO 42133
42004: LD_INT 2
42006: DOUBLE
42007: EQUAL
42008: IFTRUE 42012
42010: GO 42068
42012: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42013: LD_ADDR_VAR 0 9
42017: PUSH
42018: LD_VAR 0 17
42022: PUSH
42023: LD_VAR 0 18
42027: PUSH
42028: LD_VAR 0 19
42032: PUSH
42033: LD_VAR 0 20
42037: PUSH
42038: LD_VAR 0 21
42042: PUSH
42043: LD_VAR 0 22
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: PUSH
42056: LD_VAR 0 4
42060: PUSH
42061: LD_INT 1
42063: PLUS
42064: ARRAY
42065: ST_TO_ADDR
42066: GO 42133
42068: LD_INT 3
42070: DOUBLE
42071: EQUAL
42072: IFTRUE 42076
42074: GO 42132
42076: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42077: LD_ADDR_VAR 0 9
42081: PUSH
42082: LD_VAR 0 23
42086: PUSH
42087: LD_VAR 0 24
42091: PUSH
42092: LD_VAR 0 25
42096: PUSH
42097: LD_VAR 0 26
42101: PUSH
42102: LD_VAR 0 27
42106: PUSH
42107: LD_VAR 0 28
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: PUSH
42120: LD_VAR 0 4
42124: PUSH
42125: LD_INT 1
42127: PLUS
42128: ARRAY
42129: ST_TO_ADDR
42130: GO 42133
42132: POP
42133: GO 42688
42135: LD_INT 2
42137: DOUBLE
42138: EQUAL
42139: IFTRUE 42149
42141: LD_INT 3
42143: DOUBLE
42144: EQUAL
42145: IFTRUE 42149
42147: GO 42205
42149: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42150: LD_ADDR_VAR 0 9
42154: PUSH
42155: LD_VAR 0 29
42159: PUSH
42160: LD_VAR 0 30
42164: PUSH
42165: LD_VAR 0 31
42169: PUSH
42170: LD_VAR 0 32
42174: PUSH
42175: LD_VAR 0 33
42179: PUSH
42180: LD_VAR 0 34
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: PUSH
42193: LD_VAR 0 4
42197: PUSH
42198: LD_INT 1
42200: PLUS
42201: ARRAY
42202: ST_TO_ADDR
42203: GO 42688
42205: LD_INT 16
42207: DOUBLE
42208: EQUAL
42209: IFTRUE 42267
42211: LD_INT 17
42213: DOUBLE
42214: EQUAL
42215: IFTRUE 42267
42217: LD_INT 18
42219: DOUBLE
42220: EQUAL
42221: IFTRUE 42267
42223: LD_INT 19
42225: DOUBLE
42226: EQUAL
42227: IFTRUE 42267
42229: LD_INT 22
42231: DOUBLE
42232: EQUAL
42233: IFTRUE 42267
42235: LD_INT 20
42237: DOUBLE
42238: EQUAL
42239: IFTRUE 42267
42241: LD_INT 21
42243: DOUBLE
42244: EQUAL
42245: IFTRUE 42267
42247: LD_INT 23
42249: DOUBLE
42250: EQUAL
42251: IFTRUE 42267
42253: LD_INT 24
42255: DOUBLE
42256: EQUAL
42257: IFTRUE 42267
42259: LD_INT 25
42261: DOUBLE
42262: EQUAL
42263: IFTRUE 42267
42265: GO 42323
42267: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42268: LD_ADDR_VAR 0 9
42272: PUSH
42273: LD_VAR 0 35
42277: PUSH
42278: LD_VAR 0 36
42282: PUSH
42283: LD_VAR 0 37
42287: PUSH
42288: LD_VAR 0 38
42292: PUSH
42293: LD_VAR 0 39
42297: PUSH
42298: LD_VAR 0 40
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: PUSH
42311: LD_VAR 0 4
42315: PUSH
42316: LD_INT 1
42318: PLUS
42319: ARRAY
42320: ST_TO_ADDR
42321: GO 42688
42323: LD_INT 6
42325: DOUBLE
42326: EQUAL
42327: IFTRUE 42379
42329: LD_INT 7
42331: DOUBLE
42332: EQUAL
42333: IFTRUE 42379
42335: LD_INT 8
42337: DOUBLE
42338: EQUAL
42339: IFTRUE 42379
42341: LD_INT 13
42343: DOUBLE
42344: EQUAL
42345: IFTRUE 42379
42347: LD_INT 12
42349: DOUBLE
42350: EQUAL
42351: IFTRUE 42379
42353: LD_INT 15
42355: DOUBLE
42356: EQUAL
42357: IFTRUE 42379
42359: LD_INT 11
42361: DOUBLE
42362: EQUAL
42363: IFTRUE 42379
42365: LD_INT 14
42367: DOUBLE
42368: EQUAL
42369: IFTRUE 42379
42371: LD_INT 10
42373: DOUBLE
42374: EQUAL
42375: IFTRUE 42379
42377: GO 42435
42379: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42380: LD_ADDR_VAR 0 9
42384: PUSH
42385: LD_VAR 0 41
42389: PUSH
42390: LD_VAR 0 42
42394: PUSH
42395: LD_VAR 0 43
42399: PUSH
42400: LD_VAR 0 44
42404: PUSH
42405: LD_VAR 0 45
42409: PUSH
42410: LD_VAR 0 46
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: PUSH
42423: LD_VAR 0 4
42427: PUSH
42428: LD_INT 1
42430: PLUS
42431: ARRAY
42432: ST_TO_ADDR
42433: GO 42688
42435: LD_INT 36
42437: DOUBLE
42438: EQUAL
42439: IFTRUE 42443
42441: GO 42499
42443: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42444: LD_ADDR_VAR 0 9
42448: PUSH
42449: LD_VAR 0 47
42453: PUSH
42454: LD_VAR 0 48
42458: PUSH
42459: LD_VAR 0 49
42463: PUSH
42464: LD_VAR 0 50
42468: PUSH
42469: LD_VAR 0 51
42473: PUSH
42474: LD_VAR 0 52
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: PUSH
42487: LD_VAR 0 4
42491: PUSH
42492: LD_INT 1
42494: PLUS
42495: ARRAY
42496: ST_TO_ADDR
42497: GO 42688
42499: LD_INT 4
42501: DOUBLE
42502: EQUAL
42503: IFTRUE 42525
42505: LD_INT 5
42507: DOUBLE
42508: EQUAL
42509: IFTRUE 42525
42511: LD_INT 34
42513: DOUBLE
42514: EQUAL
42515: IFTRUE 42525
42517: LD_INT 37
42519: DOUBLE
42520: EQUAL
42521: IFTRUE 42525
42523: GO 42581
42525: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42526: LD_ADDR_VAR 0 9
42530: PUSH
42531: LD_VAR 0 53
42535: PUSH
42536: LD_VAR 0 54
42540: PUSH
42541: LD_VAR 0 55
42545: PUSH
42546: LD_VAR 0 56
42550: PUSH
42551: LD_VAR 0 57
42555: PUSH
42556: LD_VAR 0 58
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: PUSH
42569: LD_VAR 0 4
42573: PUSH
42574: LD_INT 1
42576: PLUS
42577: ARRAY
42578: ST_TO_ADDR
42579: GO 42688
42581: LD_INT 31
42583: DOUBLE
42584: EQUAL
42585: IFTRUE 42631
42587: LD_INT 32
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42631
42593: LD_INT 33
42595: DOUBLE
42596: EQUAL
42597: IFTRUE 42631
42599: LD_INT 27
42601: DOUBLE
42602: EQUAL
42603: IFTRUE 42631
42605: LD_INT 26
42607: DOUBLE
42608: EQUAL
42609: IFTRUE 42631
42611: LD_INT 28
42613: DOUBLE
42614: EQUAL
42615: IFTRUE 42631
42617: LD_INT 29
42619: DOUBLE
42620: EQUAL
42621: IFTRUE 42631
42623: LD_INT 30
42625: DOUBLE
42626: EQUAL
42627: IFTRUE 42631
42629: GO 42687
42631: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42632: LD_ADDR_VAR 0 9
42636: PUSH
42637: LD_VAR 0 59
42641: PUSH
42642: LD_VAR 0 60
42646: PUSH
42647: LD_VAR 0 61
42651: PUSH
42652: LD_VAR 0 62
42656: PUSH
42657: LD_VAR 0 63
42661: PUSH
42662: LD_VAR 0 64
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: PUSH
42675: LD_VAR 0 4
42679: PUSH
42680: LD_INT 1
42682: PLUS
42683: ARRAY
42684: ST_TO_ADDR
42685: GO 42688
42687: POP
// temp_list2 = [ ] ;
42688: LD_ADDR_VAR 0 10
42692: PUSH
42693: EMPTY
42694: ST_TO_ADDR
// for i in temp_list do
42695: LD_ADDR_VAR 0 8
42699: PUSH
42700: LD_VAR 0 9
42704: PUSH
42705: FOR_IN
42706: IFFALSE 42758
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42708: LD_ADDR_VAR 0 10
42712: PUSH
42713: LD_VAR 0 10
42717: PUSH
42718: LD_VAR 0 8
42722: PUSH
42723: LD_INT 1
42725: ARRAY
42726: PUSH
42727: LD_VAR 0 2
42731: PLUS
42732: PUSH
42733: LD_VAR 0 8
42737: PUSH
42738: LD_INT 2
42740: ARRAY
42741: PUSH
42742: LD_VAR 0 3
42746: PLUS
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: EMPTY
42753: LIST
42754: ADD
42755: ST_TO_ADDR
42756: GO 42705
42758: POP
42759: POP
// result = temp_list2 ;
42760: LD_ADDR_VAR 0 7
42764: PUSH
42765: LD_VAR 0 10
42769: ST_TO_ADDR
// end ;
42770: LD_VAR 0 7
42774: RET
// export function EnemyInRange ( unit , dist ) ; begin
42775: LD_INT 0
42777: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42778: LD_ADDR_VAR 0 3
42782: PUSH
42783: LD_VAR 0 1
42787: PPUSH
42788: CALL_OW 255
42792: PPUSH
42793: LD_VAR 0 1
42797: PPUSH
42798: CALL_OW 250
42802: PPUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: CALL_OW 251
42812: PPUSH
42813: LD_VAR 0 2
42817: PPUSH
42818: CALL 16171 0 4
42822: PUSH
42823: LD_INT 4
42825: ARRAY
42826: ST_TO_ADDR
// end ;
42827: LD_VAR 0 3
42831: RET
// export function PlayerSeeMe ( unit ) ; begin
42832: LD_INT 0
42834: PPUSH
// result := See ( your_side , unit ) ;
42835: LD_ADDR_VAR 0 2
42839: PUSH
42840: LD_OWVAR 2
42844: PPUSH
42845: LD_VAR 0 1
42849: PPUSH
42850: CALL_OW 292
42854: ST_TO_ADDR
// end ;
42855: LD_VAR 0 2
42859: RET
// export function ReverseDir ( unit ) ; begin
42860: LD_INT 0
42862: PPUSH
// if not unit then
42863: LD_VAR 0 1
42867: NOT
42868: IFFALSE 42872
// exit ;
42870: GO 42895
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42872: LD_ADDR_VAR 0 2
42876: PUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 254
42886: PUSH
42887: LD_INT 3
42889: PLUS
42890: PUSH
42891: LD_INT 6
42893: MOD
42894: ST_TO_ADDR
// end ;
42895: LD_VAR 0 2
42899: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
42900: LD_INT 0
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
42906: PPUSH
// if not hexes then
42907: LD_VAR 0 2
42911: NOT
42912: IFFALSE 42916
// exit ;
42914: GO 43064
// dist := 9999 ;
42916: LD_ADDR_VAR 0 5
42920: PUSH
42921: LD_INT 9999
42923: ST_TO_ADDR
// for i = 1 to hexes do
42924: LD_ADDR_VAR 0 4
42928: PUSH
42929: DOUBLE
42930: LD_INT 1
42932: DEC
42933: ST_TO_ADDR
42934: LD_VAR 0 2
42938: PUSH
42939: FOR_TO
42940: IFFALSE 43052
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
42942: LD_VAR 0 1
42946: PPUSH
42947: LD_VAR 0 2
42951: PUSH
42952: LD_VAR 0 4
42956: ARRAY
42957: PUSH
42958: LD_INT 1
42960: ARRAY
42961: PPUSH
42962: LD_VAR 0 2
42966: PUSH
42967: LD_VAR 0 4
42971: ARRAY
42972: PUSH
42973: LD_INT 2
42975: ARRAY
42976: PPUSH
42977: CALL_OW 297
42981: PUSH
42982: LD_VAR 0 5
42986: LESS
42987: IFFALSE 43050
// begin hex := hexes [ i ] ;
42989: LD_ADDR_VAR 0 7
42993: PUSH
42994: LD_VAR 0 2
42998: PUSH
42999: LD_VAR 0 4
43003: ARRAY
43004: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43005: LD_ADDR_VAR 0 5
43009: PUSH
43010: LD_VAR 0 1
43014: PPUSH
43015: LD_VAR 0 2
43019: PUSH
43020: LD_VAR 0 4
43024: ARRAY
43025: PUSH
43026: LD_INT 1
43028: ARRAY
43029: PPUSH
43030: LD_VAR 0 2
43034: PUSH
43035: LD_VAR 0 4
43039: ARRAY
43040: PUSH
43041: LD_INT 2
43043: ARRAY
43044: PPUSH
43045: CALL_OW 297
43049: ST_TO_ADDR
// end ; end ;
43050: GO 42939
43052: POP
43053: POP
// result := hex ;
43054: LD_ADDR_VAR 0 3
43058: PUSH
43059: LD_VAR 0 7
43063: ST_TO_ADDR
// end ;
43064: LD_VAR 0 3
43068: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43069: LD_INT 0
43071: PPUSH
43072: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43073: LD_VAR 0 1
43077: NOT
43078: PUSH
43079: LD_VAR 0 1
43083: PUSH
43084: LD_INT 21
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 23
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PPUSH
43108: CALL_OW 69
43112: IN
43113: NOT
43114: OR
43115: IFFALSE 43119
// exit ;
43117: GO 43166
// for i = 1 to 3 do
43119: LD_ADDR_VAR 0 3
43123: PUSH
43124: DOUBLE
43125: LD_INT 1
43127: DEC
43128: ST_TO_ADDR
43129: LD_INT 3
43131: PUSH
43132: FOR_TO
43133: IFFALSE 43164
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43135: LD_VAR 0 1
43139: PPUSH
43140: CALL_OW 250
43144: PPUSH
43145: LD_VAR 0 1
43149: PPUSH
43150: CALL_OW 251
43154: PPUSH
43155: LD_INT 1
43157: PPUSH
43158: CALL_OW 453
43162: GO 43132
43164: POP
43165: POP
// end ;
43166: LD_VAR 0 2
43170: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43171: LD_INT 0
43173: PPUSH
43174: PPUSH
43175: PPUSH
43176: PPUSH
43177: PPUSH
43178: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
43179: LD_VAR 0 1
43183: NOT
43184: PUSH
43185: LD_VAR 0 2
43189: NOT
43190: OR
43191: PUSH
43192: LD_VAR 0 1
43196: PPUSH
43197: CALL_OW 314
43201: OR
43202: IFFALSE 43206
// exit ;
43204: GO 43647
// x := GetX ( enemy_unit ) ;
43206: LD_ADDR_VAR 0 7
43210: PUSH
43211: LD_VAR 0 2
43215: PPUSH
43216: CALL_OW 250
43220: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43221: LD_ADDR_VAR 0 8
43225: PUSH
43226: LD_VAR 0 2
43230: PPUSH
43231: CALL_OW 251
43235: ST_TO_ADDR
// if not x or not y then
43236: LD_VAR 0 7
43240: NOT
43241: PUSH
43242: LD_VAR 0 8
43246: NOT
43247: OR
43248: IFFALSE 43252
// exit ;
43250: GO 43647
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43252: LD_ADDR_VAR 0 6
43256: PUSH
43257: LD_VAR 0 7
43261: PPUSH
43262: LD_INT 0
43264: PPUSH
43265: LD_INT 4
43267: PPUSH
43268: CALL_OW 272
43272: PUSH
43273: LD_VAR 0 8
43277: PPUSH
43278: LD_INT 0
43280: PPUSH
43281: LD_INT 4
43283: PPUSH
43284: CALL_OW 273
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_VAR 0 7
43297: PPUSH
43298: LD_INT 1
43300: PPUSH
43301: LD_INT 4
43303: PPUSH
43304: CALL_OW 272
43308: PUSH
43309: LD_VAR 0 8
43313: PPUSH
43314: LD_INT 1
43316: PPUSH
43317: LD_INT 4
43319: PPUSH
43320: CALL_OW 273
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_VAR 0 7
43333: PPUSH
43334: LD_INT 2
43336: PPUSH
43337: LD_INT 4
43339: PPUSH
43340: CALL_OW 272
43344: PUSH
43345: LD_VAR 0 8
43349: PPUSH
43350: LD_INT 2
43352: PPUSH
43353: LD_INT 4
43355: PPUSH
43356: CALL_OW 273
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_VAR 0 7
43369: PPUSH
43370: LD_INT 3
43372: PPUSH
43373: LD_INT 4
43375: PPUSH
43376: CALL_OW 272
43380: PUSH
43381: LD_VAR 0 8
43385: PPUSH
43386: LD_INT 3
43388: PPUSH
43389: LD_INT 4
43391: PPUSH
43392: CALL_OW 273
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_VAR 0 7
43405: PPUSH
43406: LD_INT 4
43408: PPUSH
43409: LD_INT 4
43411: PPUSH
43412: CALL_OW 272
43416: PUSH
43417: LD_VAR 0 8
43421: PPUSH
43422: LD_INT 4
43424: PPUSH
43425: LD_INT 4
43427: PPUSH
43428: CALL_OW 273
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_VAR 0 7
43441: PPUSH
43442: LD_INT 5
43444: PPUSH
43445: LD_INT 4
43447: PPUSH
43448: CALL_OW 272
43452: PUSH
43453: LD_VAR 0 8
43457: PPUSH
43458: LD_INT 5
43460: PPUSH
43461: LD_INT 4
43463: PPUSH
43464: CALL_OW 273
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: ST_TO_ADDR
// for i = tmp downto 1 do
43481: LD_ADDR_VAR 0 4
43485: PUSH
43486: DOUBLE
43487: LD_VAR 0 6
43491: INC
43492: ST_TO_ADDR
43493: LD_INT 1
43495: PUSH
43496: FOR_DOWNTO
43497: IFFALSE 43598
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43499: LD_VAR 0 6
43503: PUSH
43504: LD_VAR 0 4
43508: ARRAY
43509: PUSH
43510: LD_INT 1
43512: ARRAY
43513: PPUSH
43514: LD_VAR 0 6
43518: PUSH
43519: LD_VAR 0 4
43523: ARRAY
43524: PUSH
43525: LD_INT 2
43527: ARRAY
43528: PPUSH
43529: CALL_OW 488
43533: NOT
43534: PUSH
43535: LD_VAR 0 6
43539: PUSH
43540: LD_VAR 0 4
43544: ARRAY
43545: PUSH
43546: LD_INT 1
43548: ARRAY
43549: PPUSH
43550: LD_VAR 0 6
43554: PUSH
43555: LD_VAR 0 4
43559: ARRAY
43560: PUSH
43561: LD_INT 2
43563: ARRAY
43564: PPUSH
43565: CALL_OW 428
43569: PUSH
43570: LD_INT 0
43572: NONEQUAL
43573: OR
43574: IFFALSE 43596
// tmp := Delete ( tmp , i ) ;
43576: LD_ADDR_VAR 0 6
43580: PUSH
43581: LD_VAR 0 6
43585: PPUSH
43586: LD_VAR 0 4
43590: PPUSH
43591: CALL_OW 3
43595: ST_TO_ADDR
43596: GO 43496
43598: POP
43599: POP
// j := GetClosestHex ( unit , tmp ) ;
43600: LD_ADDR_VAR 0 5
43604: PUSH
43605: LD_VAR 0 1
43609: PPUSH
43610: LD_VAR 0 6
43614: PPUSH
43615: CALL 42900 0 2
43619: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43620: LD_VAR 0 1
43624: PPUSH
43625: LD_VAR 0 5
43629: PUSH
43630: LD_INT 1
43632: ARRAY
43633: PPUSH
43634: LD_VAR 0 5
43638: PUSH
43639: LD_INT 2
43641: ARRAY
43642: PPUSH
43643: CALL_OW 111
// end ;
43647: LD_VAR 0 3
43651: RET
// export function PrepareApemanSoldier ( ) ; begin
43652: LD_INT 0
43654: PPUSH
// uc_nation := 0 ;
43655: LD_ADDR_OWVAR 21
43659: PUSH
43660: LD_INT 0
43662: ST_TO_ADDR
// hc_sex := sex_male ;
43663: LD_ADDR_OWVAR 27
43667: PUSH
43668: LD_INT 1
43670: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43671: LD_ADDR_OWVAR 28
43675: PUSH
43676: LD_INT 15
43678: ST_TO_ADDR
// hc_gallery :=  ;
43679: LD_ADDR_OWVAR 33
43683: PUSH
43684: LD_STRING 
43686: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43687: LD_ADDR_OWVAR 31
43691: PUSH
43692: LD_INT 0
43694: PPUSH
43695: LD_INT 3
43697: PPUSH
43698: CALL_OW 12
43702: PUSH
43703: LD_INT 0
43705: PPUSH
43706: LD_INT 3
43708: PPUSH
43709: CALL_OW 12
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: ST_TO_ADDR
// end ;
43726: LD_VAR 0 1
43730: RET
// export function PrepareApemanEngineer ( ) ; begin
43731: LD_INT 0
43733: PPUSH
// uc_nation := 0 ;
43734: LD_ADDR_OWVAR 21
43738: PUSH
43739: LD_INT 0
43741: ST_TO_ADDR
// hc_sex := sex_male ;
43742: LD_ADDR_OWVAR 27
43746: PUSH
43747: LD_INT 1
43749: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43750: LD_ADDR_OWVAR 28
43754: PUSH
43755: LD_INT 16
43757: ST_TO_ADDR
// hc_gallery :=  ;
43758: LD_ADDR_OWVAR 33
43762: PUSH
43763: LD_STRING 
43765: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43766: LD_ADDR_OWVAR 31
43770: PUSH
43771: LD_INT 0
43773: PPUSH
43774: LD_INT 3
43776: PPUSH
43777: CALL_OW 12
43781: PUSH
43782: LD_INT 0
43784: PPUSH
43785: LD_INT 3
43787: PPUSH
43788: CALL_OW 12
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: ST_TO_ADDR
// end ;
43805: LD_VAR 0 1
43809: RET
// export function PrepareApeman ( agressivity ) ; begin
43810: LD_INT 0
43812: PPUSH
// uc_side := 0 ;
43813: LD_ADDR_OWVAR 20
43817: PUSH
43818: LD_INT 0
43820: ST_TO_ADDR
// uc_nation := 0 ;
43821: LD_ADDR_OWVAR 21
43825: PUSH
43826: LD_INT 0
43828: ST_TO_ADDR
// hc_sex := sex_male ;
43829: LD_ADDR_OWVAR 27
43833: PUSH
43834: LD_INT 1
43836: ST_TO_ADDR
// hc_class := class_apeman ;
43837: LD_ADDR_OWVAR 28
43841: PUSH
43842: LD_INT 12
43844: ST_TO_ADDR
// hc_gallery :=  ;
43845: LD_ADDR_OWVAR 33
43849: PUSH
43850: LD_STRING 
43852: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43853: LD_ADDR_OWVAR 35
43857: PUSH
43858: LD_VAR 0 1
43862: NEG
43863: PPUSH
43864: LD_VAR 0 1
43868: PPUSH
43869: CALL_OW 12
43873: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43874: LD_ADDR_OWVAR 31
43878: PUSH
43879: LD_INT 0
43881: PPUSH
43882: LD_INT 3
43884: PPUSH
43885: CALL_OW 12
43889: PUSH
43890: LD_INT 0
43892: PPUSH
43893: LD_INT 3
43895: PPUSH
43896: CALL_OW 12
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: ST_TO_ADDR
// end ;
43913: LD_VAR 0 2
43917: RET
// export function PrepareTiger ( agressivity ) ; begin
43918: LD_INT 0
43920: PPUSH
// uc_side := 0 ;
43921: LD_ADDR_OWVAR 20
43925: PUSH
43926: LD_INT 0
43928: ST_TO_ADDR
// uc_nation := 0 ;
43929: LD_ADDR_OWVAR 21
43933: PUSH
43934: LD_INT 0
43936: ST_TO_ADDR
// hc_class := class_tiger ;
43937: LD_ADDR_OWVAR 28
43941: PUSH
43942: LD_INT 14
43944: ST_TO_ADDR
// hc_gallery :=  ;
43945: LD_ADDR_OWVAR 33
43949: PUSH
43950: LD_STRING 
43952: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43953: LD_ADDR_OWVAR 35
43957: PUSH
43958: LD_VAR 0 1
43962: NEG
43963: PPUSH
43964: LD_VAR 0 1
43968: PPUSH
43969: CALL_OW 12
43973: ST_TO_ADDR
// end ;
43974: LD_VAR 0 2
43978: RET
// export function PrepareEnchidna ( ) ; begin
43979: LD_INT 0
43981: PPUSH
// uc_side := 0 ;
43982: LD_ADDR_OWVAR 20
43986: PUSH
43987: LD_INT 0
43989: ST_TO_ADDR
// uc_nation := 0 ;
43990: LD_ADDR_OWVAR 21
43994: PUSH
43995: LD_INT 0
43997: ST_TO_ADDR
// hc_class := class_baggie ;
43998: LD_ADDR_OWVAR 28
44002: PUSH
44003: LD_INT 13
44005: ST_TO_ADDR
// hc_gallery :=  ;
44006: LD_ADDR_OWVAR 33
44010: PUSH
44011: LD_STRING 
44013: ST_TO_ADDR
// end ;
44014: LD_VAR 0 1
44018: RET
// export function PrepareFrog ( ) ; begin
44019: LD_INT 0
44021: PPUSH
// uc_side := 0 ;
44022: LD_ADDR_OWVAR 20
44026: PUSH
44027: LD_INT 0
44029: ST_TO_ADDR
// uc_nation := 0 ;
44030: LD_ADDR_OWVAR 21
44034: PUSH
44035: LD_INT 0
44037: ST_TO_ADDR
// hc_class := class_frog ;
44038: LD_ADDR_OWVAR 28
44042: PUSH
44043: LD_INT 19
44045: ST_TO_ADDR
// hc_gallery :=  ;
44046: LD_ADDR_OWVAR 33
44050: PUSH
44051: LD_STRING 
44053: ST_TO_ADDR
// end ;
44054: LD_VAR 0 1
44058: RET
// export function PrepareFish ( ) ; begin
44059: LD_INT 0
44061: PPUSH
// uc_side := 0 ;
44062: LD_ADDR_OWVAR 20
44066: PUSH
44067: LD_INT 0
44069: ST_TO_ADDR
// uc_nation := 0 ;
44070: LD_ADDR_OWVAR 21
44074: PUSH
44075: LD_INT 0
44077: ST_TO_ADDR
// hc_class := class_fish ;
44078: LD_ADDR_OWVAR 28
44082: PUSH
44083: LD_INT 20
44085: ST_TO_ADDR
// hc_gallery :=  ;
44086: LD_ADDR_OWVAR 33
44090: PUSH
44091: LD_STRING 
44093: ST_TO_ADDR
// end ;
44094: LD_VAR 0 1
44098: RET
// export function PrepareBird ( ) ; begin
44099: LD_INT 0
44101: PPUSH
// uc_side := 0 ;
44102: LD_ADDR_OWVAR 20
44106: PUSH
44107: LD_INT 0
44109: ST_TO_ADDR
// uc_nation := 0 ;
44110: LD_ADDR_OWVAR 21
44114: PUSH
44115: LD_INT 0
44117: ST_TO_ADDR
// hc_class := class_phororhacos ;
44118: LD_ADDR_OWVAR 28
44122: PUSH
44123: LD_INT 18
44125: ST_TO_ADDR
// hc_gallery :=  ;
44126: LD_ADDR_OWVAR 33
44130: PUSH
44131: LD_STRING 
44133: ST_TO_ADDR
// end ;
44134: LD_VAR 0 1
44138: RET
// export function PrepareHorse ( ) ; begin
44139: LD_INT 0
44141: PPUSH
// uc_side := 0 ;
44142: LD_ADDR_OWVAR 20
44146: PUSH
44147: LD_INT 0
44149: ST_TO_ADDR
// uc_nation := 0 ;
44150: LD_ADDR_OWVAR 21
44154: PUSH
44155: LD_INT 0
44157: ST_TO_ADDR
// hc_class := 21 ;
44158: LD_ADDR_OWVAR 28
44162: PUSH
44163: LD_INT 21
44165: ST_TO_ADDR
// hc_gallery :=  ;
44166: LD_ADDR_OWVAR 33
44170: PUSH
44171: LD_STRING 
44173: ST_TO_ADDR
// end ;
44174: LD_VAR 0 1
44178: RET
// export function PrepareMastodont ( ) ; begin
44179: LD_INT 0
44181: PPUSH
// uc_side := 0 ;
44182: LD_ADDR_OWVAR 20
44186: PUSH
44187: LD_INT 0
44189: ST_TO_ADDR
// uc_nation := 0 ;
44190: LD_ADDR_OWVAR 21
44194: PUSH
44195: LD_INT 0
44197: ST_TO_ADDR
// vc_chassis := 31 ;
44198: LD_ADDR_OWVAR 37
44202: PUSH
44203: LD_INT 31
44205: ST_TO_ADDR
// vc_control := control_rider ;
44206: LD_ADDR_OWVAR 38
44210: PUSH
44211: LD_INT 4
44213: ST_TO_ADDR
// end ;
44214: LD_VAR 0 1
44218: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44219: LD_INT 0
44221: PPUSH
44222: PPUSH
44223: PPUSH
// uc_side = 0 ;
44224: LD_ADDR_OWVAR 20
44228: PUSH
44229: LD_INT 0
44231: ST_TO_ADDR
// uc_nation = 0 ;
44232: LD_ADDR_OWVAR 21
44236: PUSH
44237: LD_INT 0
44239: ST_TO_ADDR
// InitHc_All ( ) ;
44240: CALL_OW 584
// InitVc ;
44244: CALL_OW 20
// if mastodonts then
44248: LD_VAR 0 6
44252: IFFALSE 44319
// for i = 1 to mastodonts do
44254: LD_ADDR_VAR 0 11
44258: PUSH
44259: DOUBLE
44260: LD_INT 1
44262: DEC
44263: ST_TO_ADDR
44264: LD_VAR 0 6
44268: PUSH
44269: FOR_TO
44270: IFFALSE 44317
// begin vc_chassis := 31 ;
44272: LD_ADDR_OWVAR 37
44276: PUSH
44277: LD_INT 31
44279: ST_TO_ADDR
// vc_control := control_rider ;
44280: LD_ADDR_OWVAR 38
44284: PUSH
44285: LD_INT 4
44287: ST_TO_ADDR
// animal := CreateVehicle ;
44288: LD_ADDR_VAR 0 12
44292: PUSH
44293: CALL_OW 45
44297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44298: LD_VAR 0 12
44302: PPUSH
44303: LD_VAR 0 8
44307: PPUSH
44308: LD_INT 0
44310: PPUSH
44311: CALL 46454 0 3
// end ;
44315: GO 44269
44317: POP
44318: POP
// if horses then
44319: LD_VAR 0 5
44323: IFFALSE 44390
// for i = 1 to horses do
44325: LD_ADDR_VAR 0 11
44329: PUSH
44330: DOUBLE
44331: LD_INT 1
44333: DEC
44334: ST_TO_ADDR
44335: LD_VAR 0 5
44339: PUSH
44340: FOR_TO
44341: IFFALSE 44388
// begin hc_class := 21 ;
44343: LD_ADDR_OWVAR 28
44347: PUSH
44348: LD_INT 21
44350: ST_TO_ADDR
// hc_gallery :=  ;
44351: LD_ADDR_OWVAR 33
44355: PUSH
44356: LD_STRING 
44358: ST_TO_ADDR
// animal := CreateHuman ;
44359: LD_ADDR_VAR 0 12
44363: PUSH
44364: CALL_OW 44
44368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44369: LD_VAR 0 12
44373: PPUSH
44374: LD_VAR 0 8
44378: PPUSH
44379: LD_INT 0
44381: PPUSH
44382: CALL 46454 0 3
// end ;
44386: GO 44340
44388: POP
44389: POP
// if birds then
44390: LD_VAR 0 1
44394: IFFALSE 44461
// for i = 1 to birds do
44396: LD_ADDR_VAR 0 11
44400: PUSH
44401: DOUBLE
44402: LD_INT 1
44404: DEC
44405: ST_TO_ADDR
44406: LD_VAR 0 1
44410: PUSH
44411: FOR_TO
44412: IFFALSE 44459
// begin hc_class = 18 ;
44414: LD_ADDR_OWVAR 28
44418: PUSH
44419: LD_INT 18
44421: ST_TO_ADDR
// hc_gallery =  ;
44422: LD_ADDR_OWVAR 33
44426: PUSH
44427: LD_STRING 
44429: ST_TO_ADDR
// animal := CreateHuman ;
44430: LD_ADDR_VAR 0 12
44434: PUSH
44435: CALL_OW 44
44439: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44440: LD_VAR 0 12
44444: PPUSH
44445: LD_VAR 0 8
44449: PPUSH
44450: LD_INT 0
44452: PPUSH
44453: CALL 46454 0 3
// end ;
44457: GO 44411
44459: POP
44460: POP
// if tigers then
44461: LD_VAR 0 2
44465: IFFALSE 44549
// for i = 1 to tigers do
44467: LD_ADDR_VAR 0 11
44471: PUSH
44472: DOUBLE
44473: LD_INT 1
44475: DEC
44476: ST_TO_ADDR
44477: LD_VAR 0 2
44481: PUSH
44482: FOR_TO
44483: IFFALSE 44547
// begin hc_class = class_tiger ;
44485: LD_ADDR_OWVAR 28
44489: PUSH
44490: LD_INT 14
44492: ST_TO_ADDR
// hc_gallery =  ;
44493: LD_ADDR_OWVAR 33
44497: PUSH
44498: LD_STRING 
44500: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44501: LD_ADDR_OWVAR 35
44505: PUSH
44506: LD_INT 7
44508: NEG
44509: PPUSH
44510: LD_INT 7
44512: PPUSH
44513: CALL_OW 12
44517: ST_TO_ADDR
// animal := CreateHuman ;
44518: LD_ADDR_VAR 0 12
44522: PUSH
44523: CALL_OW 44
44527: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44528: LD_VAR 0 12
44532: PPUSH
44533: LD_VAR 0 8
44537: PPUSH
44538: LD_INT 0
44540: PPUSH
44541: CALL 46454 0 3
// end ;
44545: GO 44482
44547: POP
44548: POP
// if apemans then
44549: LD_VAR 0 3
44553: IFFALSE 44676
// for i = 1 to apemans do
44555: LD_ADDR_VAR 0 11
44559: PUSH
44560: DOUBLE
44561: LD_INT 1
44563: DEC
44564: ST_TO_ADDR
44565: LD_VAR 0 3
44569: PUSH
44570: FOR_TO
44571: IFFALSE 44674
// begin hc_class = class_apeman ;
44573: LD_ADDR_OWVAR 28
44577: PUSH
44578: LD_INT 12
44580: ST_TO_ADDR
// hc_gallery =  ;
44581: LD_ADDR_OWVAR 33
44585: PUSH
44586: LD_STRING 
44588: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44589: LD_ADDR_OWVAR 35
44593: PUSH
44594: LD_INT 2
44596: NEG
44597: PPUSH
44598: LD_INT 2
44600: PPUSH
44601: CALL_OW 12
44605: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44606: LD_ADDR_OWVAR 31
44610: PUSH
44611: LD_INT 1
44613: PPUSH
44614: LD_INT 3
44616: PPUSH
44617: CALL_OW 12
44621: PUSH
44622: LD_INT 1
44624: PPUSH
44625: LD_INT 3
44627: PPUSH
44628: CALL_OW 12
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: ST_TO_ADDR
// animal := CreateHuman ;
44645: LD_ADDR_VAR 0 12
44649: PUSH
44650: CALL_OW 44
44654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44655: LD_VAR 0 12
44659: PPUSH
44660: LD_VAR 0 8
44664: PPUSH
44665: LD_INT 0
44667: PPUSH
44668: CALL 46454 0 3
// end ;
44672: GO 44570
44674: POP
44675: POP
// if enchidnas then
44676: LD_VAR 0 4
44680: IFFALSE 44747
// for i = 1 to enchidnas do
44682: LD_ADDR_VAR 0 11
44686: PUSH
44687: DOUBLE
44688: LD_INT 1
44690: DEC
44691: ST_TO_ADDR
44692: LD_VAR 0 4
44696: PUSH
44697: FOR_TO
44698: IFFALSE 44745
// begin hc_class = 13 ;
44700: LD_ADDR_OWVAR 28
44704: PUSH
44705: LD_INT 13
44707: ST_TO_ADDR
// hc_gallery =  ;
44708: LD_ADDR_OWVAR 33
44712: PUSH
44713: LD_STRING 
44715: ST_TO_ADDR
// animal := CreateHuman ;
44716: LD_ADDR_VAR 0 12
44720: PUSH
44721: CALL_OW 44
44725: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44726: LD_VAR 0 12
44730: PPUSH
44731: LD_VAR 0 8
44735: PPUSH
44736: LD_INT 0
44738: PPUSH
44739: CALL 46454 0 3
// end ;
44743: GO 44697
44745: POP
44746: POP
// if fishes then
44747: LD_VAR 0 7
44751: IFFALSE 44818
// for i = 1 to fishes do
44753: LD_ADDR_VAR 0 11
44757: PUSH
44758: DOUBLE
44759: LD_INT 1
44761: DEC
44762: ST_TO_ADDR
44763: LD_VAR 0 7
44767: PUSH
44768: FOR_TO
44769: IFFALSE 44816
// begin hc_class = 20 ;
44771: LD_ADDR_OWVAR 28
44775: PUSH
44776: LD_INT 20
44778: ST_TO_ADDR
// hc_gallery =  ;
44779: LD_ADDR_OWVAR 33
44783: PUSH
44784: LD_STRING 
44786: ST_TO_ADDR
// animal := CreateHuman ;
44787: LD_ADDR_VAR 0 12
44791: PUSH
44792: CALL_OW 44
44796: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44797: LD_VAR 0 12
44801: PPUSH
44802: LD_VAR 0 9
44806: PPUSH
44807: LD_INT 0
44809: PPUSH
44810: CALL 46454 0 3
// end ;
44814: GO 44768
44816: POP
44817: POP
// end ;
44818: LD_VAR 0 10
44822: RET
// export function WantHeal ( sci , unit ) ; begin
44823: LD_INT 0
44825: PPUSH
// if GetTaskList ( sci ) > 0 then
44826: LD_VAR 0 1
44830: PPUSH
44831: CALL_OW 437
44835: PUSH
44836: LD_INT 0
44838: GREATER
44839: IFFALSE 44909
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44841: LD_VAR 0 1
44845: PPUSH
44846: CALL_OW 437
44850: PUSH
44851: LD_INT 1
44853: ARRAY
44854: PUSH
44855: LD_INT 1
44857: ARRAY
44858: PUSH
44859: LD_STRING l
44861: EQUAL
44862: PUSH
44863: LD_VAR 0 1
44867: PPUSH
44868: CALL_OW 437
44872: PUSH
44873: LD_INT 1
44875: ARRAY
44876: PUSH
44877: LD_INT 4
44879: ARRAY
44880: PUSH
44881: LD_VAR 0 2
44885: EQUAL
44886: AND
44887: IFFALSE 44899
// result := true else
44889: LD_ADDR_VAR 0 3
44893: PUSH
44894: LD_INT 1
44896: ST_TO_ADDR
44897: GO 44907
// result := false ;
44899: LD_ADDR_VAR 0 3
44903: PUSH
44904: LD_INT 0
44906: ST_TO_ADDR
// end else
44907: GO 44917
// result := false ;
44909: LD_ADDR_VAR 0 3
44913: PUSH
44914: LD_INT 0
44916: ST_TO_ADDR
// end ;
44917: LD_VAR 0 3
44921: RET
// export function HealTarget ( sci ) ; begin
44922: LD_INT 0
44924: PPUSH
// if not sci then
44925: LD_VAR 0 1
44929: NOT
44930: IFFALSE 44934
// exit ;
44932: GO 44999
// result := 0 ;
44934: LD_ADDR_VAR 0 2
44938: PUSH
44939: LD_INT 0
44941: ST_TO_ADDR
// if GetTaskList ( sci ) then
44942: LD_VAR 0 1
44946: PPUSH
44947: CALL_OW 437
44951: IFFALSE 44999
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44953: LD_VAR 0 1
44957: PPUSH
44958: CALL_OW 437
44962: PUSH
44963: LD_INT 1
44965: ARRAY
44966: PUSH
44967: LD_INT 1
44969: ARRAY
44970: PUSH
44971: LD_STRING l
44973: EQUAL
44974: IFFALSE 44999
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44976: LD_ADDR_VAR 0 2
44980: PUSH
44981: LD_VAR 0 1
44985: PPUSH
44986: CALL_OW 437
44990: PUSH
44991: LD_INT 1
44993: ARRAY
44994: PUSH
44995: LD_INT 4
44997: ARRAY
44998: ST_TO_ADDR
// end ;
44999: LD_VAR 0 2
45003: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45004: LD_INT 0
45006: PPUSH
45007: PPUSH
45008: PPUSH
45009: PPUSH
// if not base_units then
45010: LD_VAR 0 1
45014: NOT
45015: IFFALSE 45019
// exit ;
45017: GO 45106
// result := false ;
45019: LD_ADDR_VAR 0 2
45023: PUSH
45024: LD_INT 0
45026: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45027: LD_ADDR_VAR 0 5
45031: PUSH
45032: LD_VAR 0 1
45036: PPUSH
45037: LD_INT 21
45039: PUSH
45040: LD_INT 3
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PPUSH
45047: CALL_OW 72
45051: ST_TO_ADDR
// if not tmp then
45052: LD_VAR 0 5
45056: NOT
45057: IFFALSE 45061
// exit ;
45059: GO 45106
// for i in tmp do
45061: LD_ADDR_VAR 0 3
45065: PUSH
45066: LD_VAR 0 5
45070: PUSH
45071: FOR_IN
45072: IFFALSE 45104
// begin result := EnemyInRange ( i , 22 ) ;
45074: LD_ADDR_VAR 0 2
45078: PUSH
45079: LD_VAR 0 3
45083: PPUSH
45084: LD_INT 22
45086: PPUSH
45087: CALL 42775 0 2
45091: ST_TO_ADDR
// if result then
45092: LD_VAR 0 2
45096: IFFALSE 45102
// exit ;
45098: POP
45099: POP
45100: GO 45106
// end ;
45102: GO 45071
45104: POP
45105: POP
// end ;
45106: LD_VAR 0 2
45110: RET
// export function FilterByTag ( units , tag ) ; begin
45111: LD_INT 0
45113: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45114: LD_ADDR_VAR 0 3
45118: PUSH
45119: LD_VAR 0 1
45123: PPUSH
45124: LD_INT 120
45126: PUSH
45127: LD_VAR 0 2
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PPUSH
45136: CALL_OW 72
45140: ST_TO_ADDR
// end ;
45141: LD_VAR 0 3
45145: RET
// export function IsDriver ( un ) ; begin
45146: LD_INT 0
45148: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45149: LD_ADDR_VAR 0 2
45153: PUSH
45154: LD_VAR 0 1
45158: PUSH
45159: LD_INT 55
45161: PUSH
45162: EMPTY
45163: LIST
45164: PPUSH
45165: CALL_OW 69
45169: IN
45170: ST_TO_ADDR
// end ;
45171: LD_VAR 0 2
45175: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45176: LD_INT 0
45178: PPUSH
45179: PPUSH
// list := [ ] ;
45180: LD_ADDR_VAR 0 5
45184: PUSH
45185: EMPTY
45186: ST_TO_ADDR
// case d of 0 :
45187: LD_VAR 0 3
45191: PUSH
45192: LD_INT 0
45194: DOUBLE
45195: EQUAL
45196: IFTRUE 45200
45198: GO 45333
45200: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45201: LD_ADDR_VAR 0 5
45205: PUSH
45206: LD_VAR 0 1
45210: PUSH
45211: LD_INT 4
45213: MINUS
45214: PUSH
45215: LD_VAR 0 2
45219: PUSH
45220: LD_INT 4
45222: MINUS
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: LIST
45231: PUSH
45232: LD_VAR 0 1
45236: PUSH
45237: LD_INT 3
45239: MINUS
45240: PUSH
45241: LD_VAR 0 2
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: LIST
45253: PUSH
45254: LD_VAR 0 1
45258: PUSH
45259: LD_INT 4
45261: PLUS
45262: PUSH
45263: LD_VAR 0 2
45267: PUSH
45268: LD_INT 4
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: LIST
45275: PUSH
45276: LD_VAR 0 1
45280: PUSH
45281: LD_INT 3
45283: PLUS
45284: PUSH
45285: LD_VAR 0 2
45289: PUSH
45290: LD_INT 3
45292: PLUS
45293: PUSH
45294: LD_INT 5
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: LIST
45301: PUSH
45302: LD_VAR 0 1
45306: PUSH
45307: LD_VAR 0 2
45311: PUSH
45312: LD_INT 4
45314: PLUS
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: LIST
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: ST_TO_ADDR
// end ; 1 :
45331: GO 46031
45333: LD_INT 1
45335: DOUBLE
45336: EQUAL
45337: IFTRUE 45341
45339: GO 45474
45341: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45342: LD_ADDR_VAR 0 5
45346: PUSH
45347: LD_VAR 0 1
45351: PUSH
45352: LD_VAR 0 2
45356: PUSH
45357: LD_INT 4
45359: MINUS
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: PUSH
45369: LD_VAR 0 1
45373: PUSH
45374: LD_INT 3
45376: MINUS
45377: PUSH
45378: LD_VAR 0 2
45382: PUSH
45383: LD_INT 3
45385: MINUS
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: PUSH
45395: LD_VAR 0 1
45399: PUSH
45400: LD_INT 4
45402: MINUS
45403: PUSH
45404: LD_VAR 0 2
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: LIST
45416: PUSH
45417: LD_VAR 0 1
45421: PUSH
45422: LD_VAR 0 2
45426: PUSH
45427: LD_INT 3
45429: PLUS
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: LIST
45438: PUSH
45439: LD_VAR 0 1
45443: PUSH
45444: LD_INT 4
45446: PLUS
45447: PUSH
45448: LD_VAR 0 2
45452: PUSH
45453: LD_INT 4
45455: PLUS
45456: PUSH
45457: LD_INT 5
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: LIST
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: ST_TO_ADDR
// end ; 2 :
45472: GO 46031
45474: LD_INT 2
45476: DOUBLE
45477: EQUAL
45478: IFTRUE 45482
45480: GO 45611
45482: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45483: LD_ADDR_VAR 0 5
45487: PUSH
45488: LD_VAR 0 1
45492: PUSH
45493: LD_VAR 0 2
45497: PUSH
45498: LD_INT 3
45500: MINUS
45501: PUSH
45502: LD_INT 3
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: LIST
45509: PUSH
45510: LD_VAR 0 1
45514: PUSH
45515: LD_INT 4
45517: PLUS
45518: PUSH
45519: LD_VAR 0 2
45523: PUSH
45524: LD_INT 4
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: LIST
45531: PUSH
45532: LD_VAR 0 1
45536: PUSH
45537: LD_VAR 0 2
45541: PUSH
45542: LD_INT 4
45544: PLUS
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: LIST
45553: PUSH
45554: LD_VAR 0 1
45558: PUSH
45559: LD_INT 3
45561: MINUS
45562: PUSH
45563: LD_VAR 0 2
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: PUSH
45576: LD_VAR 0 1
45580: PUSH
45581: LD_INT 4
45583: MINUS
45584: PUSH
45585: LD_VAR 0 2
45589: PUSH
45590: LD_INT 4
45592: MINUS
45593: PUSH
45594: LD_INT 2
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: LIST
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: ST_TO_ADDR
// end ; 3 :
45609: GO 46031
45611: LD_INT 3
45613: DOUBLE
45614: EQUAL
45615: IFTRUE 45619
45617: GO 45752
45619: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45620: LD_ADDR_VAR 0 5
45624: PUSH
45625: LD_VAR 0 1
45629: PUSH
45630: LD_INT 3
45632: PLUS
45633: PUSH
45634: LD_VAR 0 2
45638: PUSH
45639: LD_INT 4
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: LIST
45646: PUSH
45647: LD_VAR 0 1
45651: PUSH
45652: LD_INT 4
45654: PLUS
45655: PUSH
45656: LD_VAR 0 2
45660: PUSH
45661: LD_INT 4
45663: PLUS
45664: PUSH
45665: LD_INT 5
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: PUSH
45673: LD_VAR 0 1
45677: PUSH
45678: LD_INT 4
45680: MINUS
45681: PUSH
45682: LD_VAR 0 2
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: LIST
45694: PUSH
45695: LD_VAR 0 1
45699: PUSH
45700: LD_VAR 0 2
45704: PUSH
45705: LD_INT 4
45707: MINUS
45708: PUSH
45709: LD_INT 3
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: LIST
45716: PUSH
45717: LD_VAR 0 1
45721: PUSH
45722: LD_INT 3
45724: MINUS
45725: PUSH
45726: LD_VAR 0 2
45730: PUSH
45731: LD_INT 3
45733: MINUS
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: LIST
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: ST_TO_ADDR
// end ; 4 :
45750: GO 46031
45752: LD_INT 4
45754: DOUBLE
45755: EQUAL
45756: IFTRUE 45760
45758: GO 45893
45760: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45761: LD_ADDR_VAR 0 5
45765: PUSH
45766: LD_VAR 0 1
45770: PUSH
45771: LD_VAR 0 2
45775: PUSH
45776: LD_INT 4
45778: PLUS
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: LIST
45787: PUSH
45788: LD_VAR 0 1
45792: PUSH
45793: LD_INT 3
45795: PLUS
45796: PUSH
45797: LD_VAR 0 2
45801: PUSH
45802: LD_INT 3
45804: PLUS
45805: PUSH
45806: LD_INT 5
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: LIST
45813: PUSH
45814: LD_VAR 0 1
45818: PUSH
45819: LD_INT 4
45821: PLUS
45822: PUSH
45823: LD_VAR 0 2
45827: PUSH
45828: LD_INT 4
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: PUSH
45836: LD_VAR 0 1
45840: PUSH
45841: LD_VAR 0 2
45845: PUSH
45846: LD_INT 3
45848: MINUS
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: LIST
45857: PUSH
45858: LD_VAR 0 1
45862: PUSH
45863: LD_INT 4
45865: MINUS
45866: PUSH
45867: LD_VAR 0 2
45871: PUSH
45872: LD_INT 4
45874: MINUS
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: LIST
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: ST_TO_ADDR
// end ; 5 :
45891: GO 46031
45893: LD_INT 5
45895: DOUBLE
45896: EQUAL
45897: IFTRUE 45901
45899: GO 46030
45901: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45902: LD_ADDR_VAR 0 5
45906: PUSH
45907: LD_VAR 0 1
45911: PUSH
45912: LD_INT 4
45914: MINUS
45915: PUSH
45916: LD_VAR 0 2
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: LIST
45928: PUSH
45929: LD_VAR 0 1
45933: PUSH
45934: LD_VAR 0 2
45938: PUSH
45939: LD_INT 4
45941: MINUS
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: LIST
45950: PUSH
45951: LD_VAR 0 1
45955: PUSH
45956: LD_INT 4
45958: PLUS
45959: PUSH
45960: LD_VAR 0 2
45964: PUSH
45965: LD_INT 4
45967: PLUS
45968: PUSH
45969: LD_INT 5
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: PUSH
45977: LD_VAR 0 1
45981: PUSH
45982: LD_INT 3
45984: PLUS
45985: PUSH
45986: LD_VAR 0 2
45990: PUSH
45991: LD_INT 4
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: PUSH
45999: LD_VAR 0 1
46003: PUSH
46004: LD_VAR 0 2
46008: PUSH
46009: LD_INT 3
46011: PLUS
46012: PUSH
46013: LD_INT 0
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: ST_TO_ADDR
// end ; end ;
46028: GO 46031
46030: POP
// result := list ;
46031: LD_ADDR_VAR 0 4
46035: PUSH
46036: LD_VAR 0 5
46040: ST_TO_ADDR
// end ;
46041: LD_VAR 0 4
46045: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46046: LD_INT 0
46048: PPUSH
46049: PPUSH
46050: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46051: LD_VAR 0 1
46055: NOT
46056: PUSH
46057: LD_VAR 0 2
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: LD_INT 3
46070: PUSH
46071: LD_INT 4
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: IN
46080: NOT
46081: OR
46082: IFFALSE 46086
// exit ;
46084: GO 46178
// tmp := [ ] ;
46086: LD_ADDR_VAR 0 5
46090: PUSH
46091: EMPTY
46092: ST_TO_ADDR
// for i in units do
46093: LD_ADDR_VAR 0 4
46097: PUSH
46098: LD_VAR 0 1
46102: PUSH
46103: FOR_IN
46104: IFFALSE 46147
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
46106: LD_ADDR_VAR 0 5
46110: PUSH
46111: LD_VAR 0 5
46115: PPUSH
46116: LD_VAR 0 5
46120: PUSH
46121: LD_INT 1
46123: PLUS
46124: PPUSH
46125: LD_VAR 0 4
46129: PPUSH
46130: LD_VAR 0 2
46134: PPUSH
46135: CALL_OW 259
46139: PPUSH
46140: CALL_OW 2
46144: ST_TO_ADDR
46145: GO 46103
46147: POP
46148: POP
// if not tmp then
46149: LD_VAR 0 5
46153: NOT
46154: IFFALSE 46158
// exit ;
46156: GO 46178
// result := SortListByListDesc ( units , tmp ) ;
46158: LD_ADDR_VAR 0 3
46162: PUSH
46163: LD_VAR 0 1
46167: PPUSH
46168: LD_VAR 0 5
46172: PPUSH
46173: CALL_OW 77
46177: ST_TO_ADDR
// end ;
46178: LD_VAR 0 3
46182: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46183: LD_INT 0
46185: PPUSH
46186: PPUSH
46187: PPUSH
// result := false ;
46188: LD_ADDR_VAR 0 3
46192: PUSH
46193: LD_INT 0
46195: ST_TO_ADDR
// x := GetX ( building ) ;
46196: LD_ADDR_VAR 0 4
46200: PUSH
46201: LD_VAR 0 2
46205: PPUSH
46206: CALL_OW 250
46210: ST_TO_ADDR
// y := GetY ( building ) ;
46211: LD_ADDR_VAR 0 5
46215: PUSH
46216: LD_VAR 0 2
46220: PPUSH
46221: CALL_OW 251
46225: ST_TO_ADDR
// if not building or not x or not y then
46226: LD_VAR 0 2
46230: NOT
46231: PUSH
46232: LD_VAR 0 4
46236: NOT
46237: OR
46238: PUSH
46239: LD_VAR 0 5
46243: NOT
46244: OR
46245: IFFALSE 46249
// exit ;
46247: GO 46341
// if GetTaskList ( unit ) then
46249: LD_VAR 0 1
46253: PPUSH
46254: CALL_OW 437
46258: IFFALSE 46341
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46260: LD_STRING e
46262: PUSH
46263: LD_VAR 0 1
46267: PPUSH
46268: CALL_OW 437
46272: PUSH
46273: LD_INT 1
46275: ARRAY
46276: PUSH
46277: LD_INT 1
46279: ARRAY
46280: EQUAL
46281: PUSH
46282: LD_VAR 0 4
46286: PUSH
46287: LD_VAR 0 1
46291: PPUSH
46292: CALL_OW 437
46296: PUSH
46297: LD_INT 1
46299: ARRAY
46300: PUSH
46301: LD_INT 2
46303: ARRAY
46304: EQUAL
46305: AND
46306: PUSH
46307: LD_VAR 0 5
46311: PUSH
46312: LD_VAR 0 1
46316: PPUSH
46317: CALL_OW 437
46321: PUSH
46322: LD_INT 1
46324: ARRAY
46325: PUSH
46326: LD_INT 3
46328: ARRAY
46329: EQUAL
46330: AND
46331: IFFALSE 46341
// result := true end ;
46333: LD_ADDR_VAR 0 3
46337: PUSH
46338: LD_INT 1
46340: ST_TO_ADDR
// end ;
46341: LD_VAR 0 3
46345: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46346: LD_INT 0
46348: PPUSH
// result := false ;
46349: LD_ADDR_VAR 0 4
46353: PUSH
46354: LD_INT 0
46356: ST_TO_ADDR
// if GetTaskList ( unit ) then
46357: LD_VAR 0 1
46361: PPUSH
46362: CALL_OW 437
46366: IFFALSE 46449
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46368: LD_STRING M
46370: PUSH
46371: LD_VAR 0 1
46375: PPUSH
46376: CALL_OW 437
46380: PUSH
46381: LD_INT 1
46383: ARRAY
46384: PUSH
46385: LD_INT 1
46387: ARRAY
46388: EQUAL
46389: PUSH
46390: LD_VAR 0 2
46394: PUSH
46395: LD_VAR 0 1
46399: PPUSH
46400: CALL_OW 437
46404: PUSH
46405: LD_INT 1
46407: ARRAY
46408: PUSH
46409: LD_INT 2
46411: ARRAY
46412: EQUAL
46413: AND
46414: PUSH
46415: LD_VAR 0 3
46419: PUSH
46420: LD_VAR 0 1
46424: PPUSH
46425: CALL_OW 437
46429: PUSH
46430: LD_INT 1
46432: ARRAY
46433: PUSH
46434: LD_INT 3
46436: ARRAY
46437: EQUAL
46438: AND
46439: IFFALSE 46449
// result := true ;
46441: LD_ADDR_VAR 0 4
46445: PUSH
46446: LD_INT 1
46448: ST_TO_ADDR
// end ; end ;
46449: LD_VAR 0 4
46453: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46454: LD_INT 0
46456: PPUSH
46457: PPUSH
46458: PPUSH
46459: PPUSH
// if not unit or not area then
46460: LD_VAR 0 1
46464: NOT
46465: PUSH
46466: LD_VAR 0 2
46470: NOT
46471: OR
46472: IFFALSE 46476
// exit ;
46474: GO 46640
// tmp := AreaToList ( area , i ) ;
46476: LD_ADDR_VAR 0 6
46480: PUSH
46481: LD_VAR 0 2
46485: PPUSH
46486: LD_VAR 0 5
46490: PPUSH
46491: CALL_OW 517
46495: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46496: LD_ADDR_VAR 0 5
46500: PUSH
46501: DOUBLE
46502: LD_INT 1
46504: DEC
46505: ST_TO_ADDR
46506: LD_VAR 0 6
46510: PUSH
46511: LD_INT 1
46513: ARRAY
46514: PUSH
46515: FOR_TO
46516: IFFALSE 46638
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46518: LD_ADDR_VAR 0 7
46522: PUSH
46523: LD_VAR 0 6
46527: PUSH
46528: LD_INT 1
46530: ARRAY
46531: PUSH
46532: LD_VAR 0 5
46536: ARRAY
46537: PUSH
46538: LD_VAR 0 6
46542: PUSH
46543: LD_INT 2
46545: ARRAY
46546: PUSH
46547: LD_VAR 0 5
46551: ARRAY
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
46557: LD_VAR 0 7
46561: PUSH
46562: LD_INT 1
46564: ARRAY
46565: PPUSH
46566: LD_VAR 0 7
46570: PUSH
46571: LD_INT 2
46573: ARRAY
46574: PPUSH
46575: CALL_OW 428
46579: PUSH
46580: LD_INT 0
46582: EQUAL
46583: IFFALSE 46636
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46585: LD_VAR 0 1
46589: PPUSH
46590: LD_VAR 0 7
46594: PUSH
46595: LD_INT 1
46597: ARRAY
46598: PPUSH
46599: LD_VAR 0 7
46603: PUSH
46604: LD_INT 2
46606: ARRAY
46607: PPUSH
46608: LD_VAR 0 3
46612: PPUSH
46613: CALL_OW 48
// result := IsPlaced ( unit ) ;
46617: LD_ADDR_VAR 0 4
46621: PUSH
46622: LD_VAR 0 1
46626: PPUSH
46627: CALL_OW 305
46631: ST_TO_ADDR
// exit ;
46632: POP
46633: POP
46634: GO 46640
// end ; end ;
46636: GO 46515
46638: POP
46639: POP
// end ;
46640: LD_VAR 0 4
46644: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46645: LD_INT 0
46647: PPUSH
46648: PPUSH
46649: PPUSH
// if not side or side > 8 then
46650: LD_VAR 0 1
46654: NOT
46655: PUSH
46656: LD_VAR 0 1
46660: PUSH
46661: LD_INT 8
46663: GREATER
46664: OR
46665: IFFALSE 46669
// exit ;
46667: GO 46856
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46669: LD_ADDR_VAR 0 4
46673: PUSH
46674: LD_INT 22
46676: PUSH
46677: LD_VAR 0 1
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 21
46688: PUSH
46689: LD_INT 3
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PPUSH
46700: CALL_OW 69
46704: ST_TO_ADDR
// if not tmp then
46705: LD_VAR 0 4
46709: NOT
46710: IFFALSE 46714
// exit ;
46712: GO 46856
// enable_addtolog := true ;
46714: LD_ADDR_OWVAR 81
46718: PUSH
46719: LD_INT 1
46721: ST_TO_ADDR
// AddToLog ( [ ) ;
46722: LD_STRING [
46724: PPUSH
46725: CALL_OW 561
// for i in tmp do
46729: LD_ADDR_VAR 0 3
46733: PUSH
46734: LD_VAR 0 4
46738: PUSH
46739: FOR_IN
46740: IFFALSE 46847
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46742: LD_STRING [
46744: PUSH
46745: LD_VAR 0 3
46749: PPUSH
46750: CALL_OW 266
46754: STR
46755: PUSH
46756: LD_STRING , 
46758: STR
46759: PUSH
46760: LD_VAR 0 3
46764: PPUSH
46765: CALL_OW 250
46769: STR
46770: PUSH
46771: LD_STRING , 
46773: STR
46774: PUSH
46775: LD_VAR 0 3
46779: PPUSH
46780: CALL_OW 251
46784: STR
46785: PUSH
46786: LD_STRING , 
46788: STR
46789: PUSH
46790: LD_VAR 0 3
46794: PPUSH
46795: CALL_OW 254
46799: STR
46800: PUSH
46801: LD_STRING , 
46803: STR
46804: PUSH
46805: LD_VAR 0 3
46809: PPUSH
46810: LD_INT 1
46812: PPUSH
46813: CALL_OW 268
46817: STR
46818: PUSH
46819: LD_STRING , 
46821: STR
46822: PUSH
46823: LD_VAR 0 3
46827: PPUSH
46828: LD_INT 2
46830: PPUSH
46831: CALL_OW 268
46835: STR
46836: PUSH
46837: LD_STRING ],
46839: STR
46840: PPUSH
46841: CALL_OW 561
// end ;
46845: GO 46739
46847: POP
46848: POP
// AddToLog ( ]; ) ;
46849: LD_STRING ];
46851: PPUSH
46852: CALL_OW 561
// end ;
46856: LD_VAR 0 2
46860: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46861: LD_INT 0
46863: PPUSH
46864: PPUSH
46865: PPUSH
46866: PPUSH
46867: PPUSH
// if not area or not rate or not max then
46868: LD_VAR 0 1
46872: NOT
46873: PUSH
46874: LD_VAR 0 2
46878: NOT
46879: OR
46880: PUSH
46881: LD_VAR 0 4
46885: NOT
46886: OR
46887: IFFALSE 46891
// exit ;
46889: GO 47080
// while 1 do
46891: LD_INT 1
46893: IFFALSE 47080
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46895: LD_ADDR_VAR 0 9
46899: PUSH
46900: LD_VAR 0 1
46904: PPUSH
46905: LD_INT 1
46907: PPUSH
46908: CALL_OW 287
46912: PUSH
46913: LD_INT 10
46915: MUL
46916: ST_TO_ADDR
// r := rate / 10 ;
46917: LD_ADDR_VAR 0 7
46921: PUSH
46922: LD_VAR 0 2
46926: PUSH
46927: LD_INT 10
46929: DIVREAL
46930: ST_TO_ADDR
// time := 1 1$00 ;
46931: LD_ADDR_VAR 0 8
46935: PUSH
46936: LD_INT 2100
46938: ST_TO_ADDR
// if amount < min then
46939: LD_VAR 0 9
46943: PUSH
46944: LD_VAR 0 3
46948: LESS
46949: IFFALSE 46967
// r := r * 2 else
46951: LD_ADDR_VAR 0 7
46955: PUSH
46956: LD_VAR 0 7
46960: PUSH
46961: LD_INT 2
46963: MUL
46964: ST_TO_ADDR
46965: GO 46993
// if amount > max then
46967: LD_VAR 0 9
46971: PUSH
46972: LD_VAR 0 4
46976: GREATER
46977: IFFALSE 46993
// r := r / 2 ;
46979: LD_ADDR_VAR 0 7
46983: PUSH
46984: LD_VAR 0 7
46988: PUSH
46989: LD_INT 2
46991: DIVREAL
46992: ST_TO_ADDR
// time := time / r ;
46993: LD_ADDR_VAR 0 8
46997: PUSH
46998: LD_VAR 0 8
47002: PUSH
47003: LD_VAR 0 7
47007: DIVREAL
47008: ST_TO_ADDR
// if time < 0 then
47009: LD_VAR 0 8
47013: PUSH
47014: LD_INT 0
47016: LESS
47017: IFFALSE 47034
// time := time * - 1 ;
47019: LD_ADDR_VAR 0 8
47023: PUSH
47024: LD_VAR 0 8
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: MUL
47033: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47034: LD_VAR 0 8
47038: PUSH
47039: LD_INT 35
47041: PPUSH
47042: LD_INT 875
47044: PPUSH
47045: CALL_OW 12
47049: PLUS
47050: PPUSH
47051: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47055: LD_INT 1
47057: PPUSH
47058: LD_INT 5
47060: PPUSH
47061: CALL_OW 12
47065: PPUSH
47066: LD_VAR 0 1
47070: PPUSH
47071: LD_INT 1
47073: PPUSH
47074: CALL_OW 55
// end ;
47078: GO 46891
// end ;
47080: LD_VAR 0 5
47084: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47085: LD_INT 0
47087: PPUSH
47088: PPUSH
47089: PPUSH
47090: PPUSH
47091: PPUSH
47092: PPUSH
47093: PPUSH
47094: PPUSH
// if not turrets or not factories then
47095: LD_VAR 0 1
47099: NOT
47100: PUSH
47101: LD_VAR 0 2
47105: NOT
47106: OR
47107: IFFALSE 47111
// exit ;
47109: GO 47418
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47111: LD_ADDR_VAR 0 10
47115: PUSH
47116: LD_INT 5
47118: PUSH
47119: LD_INT 6
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: LD_INT 4
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 3
47138: PUSH
47139: LD_INT 5
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 24
47153: PUSH
47154: LD_INT 25
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 23
47163: PUSH
47164: LD_INT 27
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 42
47177: PUSH
47178: LD_INT 43
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 44
47187: PUSH
47188: LD_INT 46
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 45
47197: PUSH
47198: LD_INT 47
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: ST_TO_ADDR
// result := [ ] ;
47215: LD_ADDR_VAR 0 3
47219: PUSH
47220: EMPTY
47221: ST_TO_ADDR
// for i in turrets do
47222: LD_ADDR_VAR 0 4
47226: PUSH
47227: LD_VAR 0 1
47231: PUSH
47232: FOR_IN
47233: IFFALSE 47416
// begin nat := GetNation ( i ) ;
47235: LD_ADDR_VAR 0 7
47239: PUSH
47240: LD_VAR 0 4
47244: PPUSH
47245: CALL_OW 248
47249: ST_TO_ADDR
// weapon := 0 ;
47250: LD_ADDR_VAR 0 8
47254: PUSH
47255: LD_INT 0
47257: ST_TO_ADDR
// if not nat then
47258: LD_VAR 0 7
47262: NOT
47263: IFFALSE 47267
// continue ;
47265: GO 47232
// for j in list [ nat ] do
47267: LD_ADDR_VAR 0 5
47271: PUSH
47272: LD_VAR 0 10
47276: PUSH
47277: LD_VAR 0 7
47281: ARRAY
47282: PUSH
47283: FOR_IN
47284: IFFALSE 47325
// if GetBWeapon ( i ) = j [ 1 ] then
47286: LD_VAR 0 4
47290: PPUSH
47291: CALL_OW 269
47295: PUSH
47296: LD_VAR 0 5
47300: PUSH
47301: LD_INT 1
47303: ARRAY
47304: EQUAL
47305: IFFALSE 47323
// begin weapon := j [ 2 ] ;
47307: LD_ADDR_VAR 0 8
47311: PUSH
47312: LD_VAR 0 5
47316: PUSH
47317: LD_INT 2
47319: ARRAY
47320: ST_TO_ADDR
// break ;
47321: GO 47325
// end ;
47323: GO 47283
47325: POP
47326: POP
// if not weapon then
47327: LD_VAR 0 8
47331: NOT
47332: IFFALSE 47336
// continue ;
47334: GO 47232
// for k in factories do
47336: LD_ADDR_VAR 0 6
47340: PUSH
47341: LD_VAR 0 2
47345: PUSH
47346: FOR_IN
47347: IFFALSE 47412
// begin weapons := AvailableWeaponList ( k ) ;
47349: LD_ADDR_VAR 0 9
47353: PUSH
47354: LD_VAR 0 6
47358: PPUSH
47359: CALL_OW 478
47363: ST_TO_ADDR
// if not weapons then
47364: LD_VAR 0 9
47368: NOT
47369: IFFALSE 47373
// continue ;
47371: GO 47346
// if weapon in weapons then
47373: LD_VAR 0 8
47377: PUSH
47378: LD_VAR 0 9
47382: IN
47383: IFFALSE 47410
// begin result := [ i , weapon ] ;
47385: LD_ADDR_VAR 0 3
47389: PUSH
47390: LD_VAR 0 4
47394: PUSH
47395: LD_VAR 0 8
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: ST_TO_ADDR
// exit ;
47404: POP
47405: POP
47406: POP
47407: POP
47408: GO 47418
// end ; end ;
47410: GO 47346
47412: POP
47413: POP
// end ;
47414: GO 47232
47416: POP
47417: POP
// end ;
47418: LD_VAR 0 3
47422: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47423: LD_INT 0
47425: PPUSH
// if not side or side > 8 then
47426: LD_VAR 0 3
47430: NOT
47431: PUSH
47432: LD_VAR 0 3
47436: PUSH
47437: LD_INT 8
47439: GREATER
47440: OR
47441: IFFALSE 47445
// exit ;
47443: GO 47504
// if not range then
47445: LD_VAR 0 4
47449: NOT
47450: IFFALSE 47461
// range := - 12 ;
47452: LD_ADDR_VAR 0 4
47456: PUSH
47457: LD_INT 12
47459: NEG
47460: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47461: LD_VAR 0 1
47465: PPUSH
47466: LD_VAR 0 2
47470: PPUSH
47471: LD_VAR 0 3
47475: PPUSH
47476: LD_VAR 0 4
47480: PPUSH
47481: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47485: LD_VAR 0 1
47489: PPUSH
47490: LD_VAR 0 2
47494: PPUSH
47495: LD_VAR 0 3
47499: PPUSH
47500: CALL_OW 331
// end ;
47504: LD_VAR 0 5
47508: RET
// export function Video ( mode ) ; begin
47509: LD_INT 0
47511: PPUSH
// ingame_video = mode ;
47512: LD_ADDR_OWVAR 52
47516: PUSH
47517: LD_VAR 0 1
47521: ST_TO_ADDR
// interface_hidden = mode ;
47522: LD_ADDR_OWVAR 54
47526: PUSH
47527: LD_VAR 0 1
47531: ST_TO_ADDR
// end ;
47532: LD_VAR 0 2
47536: RET
// export function Join ( array , element ) ; begin
47537: LD_INT 0
47539: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47540: LD_ADDR_VAR 0 3
47544: PUSH
47545: LD_VAR 0 1
47549: PPUSH
47550: LD_VAR 0 1
47554: PUSH
47555: LD_INT 1
47557: PLUS
47558: PPUSH
47559: LD_VAR 0 2
47563: PPUSH
47564: CALL_OW 1
47568: ST_TO_ADDR
// end ;
47569: LD_VAR 0 3
47573: RET
// export function JoinUnion ( array , element ) ; begin
47574: LD_INT 0
47576: PPUSH
// result := array union element ;
47577: LD_ADDR_VAR 0 3
47581: PUSH
47582: LD_VAR 0 1
47586: PUSH
47587: LD_VAR 0 2
47591: UNION
47592: ST_TO_ADDR
// end ;
47593: LD_VAR 0 3
47597: RET
// export function GetBehemoths ( side ) ; begin
47598: LD_INT 0
47600: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
47601: LD_ADDR_VAR 0 2
47605: PUSH
47606: LD_INT 22
47608: PUSH
47609: LD_VAR 0 1
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 31
47620: PUSH
47621: LD_INT 25
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PPUSH
47632: CALL_OW 69
47636: ST_TO_ADDR
// end ;
47637: LD_VAR 0 2
47641: RET
// export function Shuffle ( array ) ; var i , index ; begin
47642: LD_INT 0
47644: PPUSH
47645: PPUSH
47646: PPUSH
// result := [ ] ;
47647: LD_ADDR_VAR 0 2
47651: PUSH
47652: EMPTY
47653: ST_TO_ADDR
// if not array then
47654: LD_VAR 0 1
47658: NOT
47659: IFFALSE 47663
// exit ;
47661: GO 47762
// Randomize ;
47663: CALL_OW 10
// for i = array downto 1 do
47667: LD_ADDR_VAR 0 3
47671: PUSH
47672: DOUBLE
47673: LD_VAR 0 1
47677: INC
47678: ST_TO_ADDR
47679: LD_INT 1
47681: PUSH
47682: FOR_DOWNTO
47683: IFFALSE 47760
// begin index := rand ( 1 , array ) ;
47685: LD_ADDR_VAR 0 4
47689: PUSH
47690: LD_INT 1
47692: PPUSH
47693: LD_VAR 0 1
47697: PPUSH
47698: CALL_OW 12
47702: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47703: LD_ADDR_VAR 0 2
47707: PUSH
47708: LD_VAR 0 2
47712: PPUSH
47713: LD_VAR 0 2
47717: PUSH
47718: LD_INT 1
47720: PLUS
47721: PPUSH
47722: LD_VAR 0 1
47726: PUSH
47727: LD_VAR 0 4
47731: ARRAY
47732: PPUSH
47733: CALL_OW 2
47737: ST_TO_ADDR
// array := Delete ( array , index ) ;
47738: LD_ADDR_VAR 0 1
47742: PUSH
47743: LD_VAR 0 1
47747: PPUSH
47748: LD_VAR 0 4
47752: PPUSH
47753: CALL_OW 3
47757: ST_TO_ADDR
// end ;
47758: GO 47682
47760: POP
47761: POP
// end ;
47762: LD_VAR 0 2
47766: RET
// export function GetBaseMaterials ( base ) ; begin
47767: LD_INT 0
47769: PPUSH
// result := [ 0 , 0 , 0 ] ;
47770: LD_ADDR_VAR 0 2
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: LIST
47788: ST_TO_ADDR
// if not base then
47789: LD_VAR 0 1
47793: NOT
47794: IFFALSE 47798
// exit ;
47796: GO 47847
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47798: LD_ADDR_VAR 0 2
47802: PUSH
47803: LD_VAR 0 1
47807: PPUSH
47808: LD_INT 1
47810: PPUSH
47811: CALL_OW 275
47815: PUSH
47816: LD_VAR 0 1
47820: PPUSH
47821: LD_INT 2
47823: PPUSH
47824: CALL_OW 275
47828: PUSH
47829: LD_VAR 0 1
47833: PPUSH
47834: LD_INT 3
47836: PPUSH
47837: CALL_OW 275
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: LIST
47846: ST_TO_ADDR
// end ;
47847: LD_VAR 0 2
47851: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47852: LD_INT 0
47854: PPUSH
47855: PPUSH
// result := array ;
47856: LD_ADDR_VAR 0 3
47860: PUSH
47861: LD_VAR 0 1
47865: ST_TO_ADDR
// if size >= result then
47866: LD_VAR 0 2
47870: PUSH
47871: LD_VAR 0 3
47875: GREATEREQUAL
47876: IFFALSE 47880
// exit ;
47878: GO 47930
// if size then
47880: LD_VAR 0 2
47884: IFFALSE 47930
// for i := array downto size do
47886: LD_ADDR_VAR 0 4
47890: PUSH
47891: DOUBLE
47892: LD_VAR 0 1
47896: INC
47897: ST_TO_ADDR
47898: LD_VAR 0 2
47902: PUSH
47903: FOR_DOWNTO
47904: IFFALSE 47928
// result := Delete ( result , result ) ;
47906: LD_ADDR_VAR 0 3
47910: PUSH
47911: LD_VAR 0 3
47915: PPUSH
47916: LD_VAR 0 3
47920: PPUSH
47921: CALL_OW 3
47925: ST_TO_ADDR
47926: GO 47903
47928: POP
47929: POP
// end ;
47930: LD_VAR 0 3
47934: RET
// export function ComExit ( unit ) ; var tmp ; begin
47935: LD_INT 0
47937: PPUSH
47938: PPUSH
// if not IsInUnit ( unit ) then
47939: LD_VAR 0 1
47943: PPUSH
47944: CALL_OW 310
47948: NOT
47949: IFFALSE 47953
// exit ;
47951: GO 48013
// tmp := IsInUnit ( unit ) ;
47953: LD_ADDR_VAR 0 3
47957: PUSH
47958: LD_VAR 0 1
47962: PPUSH
47963: CALL_OW 310
47967: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47968: LD_VAR 0 3
47972: PPUSH
47973: CALL_OW 247
47977: PUSH
47978: LD_INT 2
47980: EQUAL
47981: IFFALSE 47994
// ComExitVehicle ( unit ) else
47983: LD_VAR 0 1
47987: PPUSH
47988: CALL_OW 121
47992: GO 48003
// ComExitBuilding ( unit ) ;
47994: LD_VAR 0 1
47998: PPUSH
47999: CALL_OW 122
// result := tmp ;
48003: LD_ADDR_VAR 0 2
48007: PUSH
48008: LD_VAR 0 3
48012: ST_TO_ADDR
// end ;
48013: LD_VAR 0 2
48017: RET
// export function ComExitAll ( units ) ; var i ; begin
48018: LD_INT 0
48020: PPUSH
48021: PPUSH
// if not units then
48022: LD_VAR 0 1
48026: NOT
48027: IFFALSE 48031
// exit ;
48029: GO 48057
// for i in units do
48031: LD_ADDR_VAR 0 3
48035: PUSH
48036: LD_VAR 0 1
48040: PUSH
48041: FOR_IN
48042: IFFALSE 48055
// ComExit ( i ) ;
48044: LD_VAR 0 3
48048: PPUSH
48049: CALL 47935 0 1
48053: GO 48041
48055: POP
48056: POP
// end ;
48057: LD_VAR 0 2
48061: RET
// export function ResetHc ; begin
48062: LD_INT 0
48064: PPUSH
// InitHc ;
48065: CALL_OW 19
// hc_importance := 0 ;
48069: LD_ADDR_OWVAR 32
48073: PUSH
48074: LD_INT 0
48076: ST_TO_ADDR
// end ;
48077: LD_VAR 0 1
48081: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48082: LD_INT 0
48084: PPUSH
48085: PPUSH
48086: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48087: LD_ADDR_VAR 0 6
48091: PUSH
48092: LD_VAR 0 1
48096: PUSH
48097: LD_VAR 0 3
48101: PLUS
48102: PUSH
48103: LD_INT 2
48105: DIV
48106: ST_TO_ADDR
// if _x < 0 then
48107: LD_VAR 0 6
48111: PUSH
48112: LD_INT 0
48114: LESS
48115: IFFALSE 48132
// _x := _x * - 1 ;
48117: LD_ADDR_VAR 0 6
48121: PUSH
48122: LD_VAR 0 6
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: MUL
48131: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48132: LD_ADDR_VAR 0 7
48136: PUSH
48137: LD_VAR 0 2
48141: PUSH
48142: LD_VAR 0 4
48146: PLUS
48147: PUSH
48148: LD_INT 2
48150: DIV
48151: ST_TO_ADDR
// if _y < 0 then
48152: LD_VAR 0 7
48156: PUSH
48157: LD_INT 0
48159: LESS
48160: IFFALSE 48177
// _y := _y * - 1 ;
48162: LD_ADDR_VAR 0 7
48166: PUSH
48167: LD_VAR 0 7
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: MUL
48176: ST_TO_ADDR
// result := [ _x , _y ] ;
48177: LD_ADDR_VAR 0 5
48181: PUSH
48182: LD_VAR 0 6
48186: PUSH
48187: LD_VAR 0 7
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: ST_TO_ADDR
// end ;
48196: LD_VAR 0 5
48200: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48201: LD_INT 0
48203: PPUSH
48204: PPUSH
48205: PPUSH
48206: PPUSH
// task := GetTaskList ( unit ) ;
48207: LD_ADDR_VAR 0 7
48211: PUSH
48212: LD_VAR 0 1
48216: PPUSH
48217: CALL_OW 437
48221: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48222: LD_VAR 0 7
48226: NOT
48227: PUSH
48228: LD_VAR 0 1
48232: PPUSH
48233: LD_VAR 0 2
48237: PPUSH
48238: CALL_OW 308
48242: NOT
48243: AND
48244: IFFALSE 48248
// exit ;
48246: GO 48366
// if IsInArea ( unit , area ) then
48248: LD_VAR 0 1
48252: PPUSH
48253: LD_VAR 0 2
48257: PPUSH
48258: CALL_OW 308
48262: IFFALSE 48280
// begin ComMoveToArea ( unit , goAway ) ;
48264: LD_VAR 0 1
48268: PPUSH
48269: LD_VAR 0 3
48273: PPUSH
48274: CALL_OW 113
// exit ;
48278: GO 48366
// end ; if task [ 1 ] [ 1 ] <> M then
48280: LD_VAR 0 7
48284: PUSH
48285: LD_INT 1
48287: ARRAY
48288: PUSH
48289: LD_INT 1
48291: ARRAY
48292: PUSH
48293: LD_STRING M
48295: NONEQUAL
48296: IFFALSE 48300
// exit ;
48298: GO 48366
// x := task [ 1 ] [ 2 ] ;
48300: LD_ADDR_VAR 0 5
48304: PUSH
48305: LD_VAR 0 7
48309: PUSH
48310: LD_INT 1
48312: ARRAY
48313: PUSH
48314: LD_INT 2
48316: ARRAY
48317: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48318: LD_ADDR_VAR 0 6
48322: PUSH
48323: LD_VAR 0 7
48327: PUSH
48328: LD_INT 1
48330: ARRAY
48331: PUSH
48332: LD_INT 3
48334: ARRAY
48335: ST_TO_ADDR
// if InArea ( x , y , area ) then
48336: LD_VAR 0 5
48340: PPUSH
48341: LD_VAR 0 6
48345: PPUSH
48346: LD_VAR 0 2
48350: PPUSH
48351: CALL_OW 309
48355: IFFALSE 48366
// ComStop ( unit ) ;
48357: LD_VAR 0 1
48361: PPUSH
48362: CALL_OW 141
// end ;
48366: LD_VAR 0 4
48370: RET
// export function Abs ( value ) ; begin
48371: LD_INT 0
48373: PPUSH
// result := value ;
48374: LD_ADDR_VAR 0 2
48378: PUSH
48379: LD_VAR 0 1
48383: ST_TO_ADDR
// if value < 0 then
48384: LD_VAR 0 1
48388: PUSH
48389: LD_INT 0
48391: LESS
48392: IFFALSE 48409
// result := value * - 1 ;
48394: LD_ADDR_VAR 0 2
48398: PUSH
48399: LD_VAR 0 1
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: MUL
48408: ST_TO_ADDR
// end ;
48409: LD_VAR 0 2
48413: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48414: LD_INT 0
48416: PPUSH
48417: PPUSH
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
48423: PPUSH
// if not unit or not building then
48424: LD_VAR 0 1
48428: NOT
48429: PUSH
48430: LD_VAR 0 2
48434: NOT
48435: OR
48436: IFFALSE 48440
// exit ;
48438: GO 48666
// x := GetX ( building ) ;
48440: LD_ADDR_VAR 0 4
48444: PUSH
48445: LD_VAR 0 2
48449: PPUSH
48450: CALL_OW 250
48454: ST_TO_ADDR
// y := GetY ( building ) ;
48455: LD_ADDR_VAR 0 6
48459: PUSH
48460: LD_VAR 0 2
48464: PPUSH
48465: CALL_OW 251
48469: ST_TO_ADDR
// d := GetDir ( building ) ;
48470: LD_ADDR_VAR 0 8
48474: PUSH
48475: LD_VAR 0 2
48479: PPUSH
48480: CALL_OW 254
48484: ST_TO_ADDR
// r := 4 ;
48485: LD_ADDR_VAR 0 9
48489: PUSH
48490: LD_INT 4
48492: ST_TO_ADDR
// for i := 1 to 5 do
48493: LD_ADDR_VAR 0 10
48497: PUSH
48498: DOUBLE
48499: LD_INT 1
48501: DEC
48502: ST_TO_ADDR
48503: LD_INT 5
48505: PUSH
48506: FOR_TO
48507: IFFALSE 48664
// begin _x := ShiftX ( x , d , r + i ) ;
48509: LD_ADDR_VAR 0 5
48513: PUSH
48514: LD_VAR 0 4
48518: PPUSH
48519: LD_VAR 0 8
48523: PPUSH
48524: LD_VAR 0 9
48528: PUSH
48529: LD_VAR 0 10
48533: PLUS
48534: PPUSH
48535: CALL_OW 272
48539: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48540: LD_ADDR_VAR 0 7
48544: PUSH
48545: LD_VAR 0 6
48549: PPUSH
48550: LD_VAR 0 8
48554: PPUSH
48555: LD_VAR 0 9
48559: PUSH
48560: LD_VAR 0 10
48564: PLUS
48565: PPUSH
48566: CALL_OW 273
48570: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48571: LD_VAR 0 5
48575: PPUSH
48576: LD_VAR 0 7
48580: PPUSH
48581: CALL_OW 488
48585: PUSH
48586: LD_VAR 0 5
48590: PPUSH
48591: LD_VAR 0 7
48595: PPUSH
48596: CALL_OW 428
48600: PPUSH
48601: CALL_OW 247
48605: PUSH
48606: LD_INT 3
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: IN
48616: NOT
48617: AND
48618: IFFALSE 48662
// begin ComMoveXY ( unit , _x , _y ) ;
48620: LD_VAR 0 1
48624: PPUSH
48625: LD_VAR 0 5
48629: PPUSH
48630: LD_VAR 0 7
48634: PPUSH
48635: CALL_OW 111
// result := [ _x , _y ] ;
48639: LD_ADDR_VAR 0 3
48643: PUSH
48644: LD_VAR 0 5
48648: PUSH
48649: LD_VAR 0 7
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: ST_TO_ADDR
// exit ;
48658: POP
48659: POP
48660: GO 48666
// end ; end ;
48662: GO 48506
48664: POP
48665: POP
// end ;
48666: LD_VAR 0 3
48670: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48671: LD_INT 0
48673: PPUSH
48674: PPUSH
48675: PPUSH
// result := 0 ;
48676: LD_ADDR_VAR 0 3
48680: PUSH
48681: LD_INT 0
48683: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48684: LD_VAR 0 1
48688: PUSH
48689: LD_INT 0
48691: LESS
48692: PUSH
48693: LD_VAR 0 1
48697: PUSH
48698: LD_INT 8
48700: GREATER
48701: OR
48702: PUSH
48703: LD_VAR 0 2
48707: PUSH
48708: LD_INT 0
48710: LESS
48711: OR
48712: PUSH
48713: LD_VAR 0 2
48717: PUSH
48718: LD_INT 8
48720: GREATER
48721: OR
48722: IFFALSE 48726
// exit ;
48724: GO 48801
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48726: LD_ADDR_VAR 0 4
48730: PUSH
48731: LD_INT 22
48733: PUSH
48734: LD_VAR 0 2
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PPUSH
48743: CALL_OW 69
48747: PUSH
48748: FOR_IN
48749: IFFALSE 48799
// begin un := UnitShoot ( i ) ;
48751: LD_ADDR_VAR 0 5
48755: PUSH
48756: LD_VAR 0 4
48760: PPUSH
48761: CALL_OW 504
48765: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48766: LD_VAR 0 5
48770: PPUSH
48771: CALL_OW 255
48775: PUSH
48776: LD_VAR 0 1
48780: EQUAL
48781: IFFALSE 48797
// begin result := un ;
48783: LD_ADDR_VAR 0 3
48787: PUSH
48788: LD_VAR 0 5
48792: ST_TO_ADDR
// exit ;
48793: POP
48794: POP
48795: GO 48801
// end ; end ;
48797: GO 48748
48799: POP
48800: POP
// end ;
48801: LD_VAR 0 3
48805: RET
// export function GetCargoBay ( units ) ; begin
48806: LD_INT 0
48808: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48809: LD_ADDR_VAR 0 2
48813: PUSH
48814: LD_VAR 0 1
48818: PPUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 34
48824: PUSH
48825: LD_INT 12
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 34
48834: PUSH
48835: LD_INT 51
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 34
48844: PUSH
48845: LD_INT 32
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 34
48854: PUSH
48855: LD_EXP 88
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: PPUSH
48871: CALL_OW 72
48875: ST_TO_ADDR
// end ;
48876: LD_VAR 0 2
48880: RET
// export function Negate ( value ) ; begin
48881: LD_INT 0
48883: PPUSH
// result := not value ;
48884: LD_ADDR_VAR 0 2
48888: PUSH
48889: LD_VAR 0 1
48893: NOT
48894: ST_TO_ADDR
// end ;
48895: LD_VAR 0 2
48899: RET
// export function Inc ( value ) ; begin
48900: LD_INT 0
48902: PPUSH
// result := value + 1 ;
48903: LD_ADDR_VAR 0 2
48907: PUSH
48908: LD_VAR 0 1
48912: PUSH
48913: LD_INT 1
48915: PLUS
48916: ST_TO_ADDR
// end ;
48917: LD_VAR 0 2
48921: RET
// export function Dec ( value ) ; begin
48922: LD_INT 0
48924: PPUSH
// result := value - 1 ;
48925: LD_ADDR_VAR 0 2
48929: PUSH
48930: LD_VAR 0 1
48934: PUSH
48935: LD_INT 1
48937: MINUS
48938: ST_TO_ADDR
// end ;
48939: LD_VAR 0 2
48943: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48944: LD_INT 0
48946: PPUSH
48947: PPUSH
48948: PPUSH
48949: PPUSH
48950: PPUSH
48951: PPUSH
48952: PPUSH
48953: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48954: LD_VAR 0 1
48958: PPUSH
48959: LD_VAR 0 2
48963: PPUSH
48964: CALL_OW 488
48968: NOT
48969: PUSH
48970: LD_VAR 0 3
48974: PPUSH
48975: LD_VAR 0 4
48979: PPUSH
48980: CALL_OW 488
48984: NOT
48985: OR
48986: IFFALSE 48999
// begin result := - 1 ;
48988: LD_ADDR_VAR 0 5
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: ST_TO_ADDR
// exit ;
48997: GO 49234
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48999: LD_ADDR_VAR 0 12
49003: PUSH
49004: LD_VAR 0 1
49008: PPUSH
49009: LD_VAR 0 2
49013: PPUSH
49014: LD_VAR 0 3
49018: PPUSH
49019: LD_VAR 0 4
49023: PPUSH
49024: CALL 48082 0 4
49028: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49029: LD_ADDR_VAR 0 11
49033: PUSH
49034: LD_VAR 0 1
49038: PPUSH
49039: LD_VAR 0 2
49043: PPUSH
49044: LD_VAR 0 12
49048: PUSH
49049: LD_INT 1
49051: ARRAY
49052: PPUSH
49053: LD_VAR 0 12
49057: PUSH
49058: LD_INT 2
49060: ARRAY
49061: PPUSH
49062: CALL_OW 298
49066: ST_TO_ADDR
// distance := 9999 ;
49067: LD_ADDR_VAR 0 10
49071: PUSH
49072: LD_INT 9999
49074: ST_TO_ADDR
// for i := 0 to 5 do
49075: LD_ADDR_VAR 0 6
49079: PUSH
49080: DOUBLE
49081: LD_INT 0
49083: DEC
49084: ST_TO_ADDR
49085: LD_INT 5
49087: PUSH
49088: FOR_TO
49089: IFFALSE 49232
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49091: LD_ADDR_VAR 0 7
49095: PUSH
49096: LD_VAR 0 1
49100: PPUSH
49101: LD_VAR 0 6
49105: PPUSH
49106: LD_VAR 0 11
49110: PPUSH
49111: CALL_OW 272
49115: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49116: LD_ADDR_VAR 0 8
49120: PUSH
49121: LD_VAR 0 2
49125: PPUSH
49126: LD_VAR 0 6
49130: PPUSH
49131: LD_VAR 0 11
49135: PPUSH
49136: CALL_OW 273
49140: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49141: LD_VAR 0 7
49145: PPUSH
49146: LD_VAR 0 8
49150: PPUSH
49151: CALL_OW 488
49155: NOT
49156: IFFALSE 49160
// continue ;
49158: GO 49088
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49160: LD_ADDR_VAR 0 9
49164: PUSH
49165: LD_VAR 0 12
49169: PUSH
49170: LD_INT 1
49172: ARRAY
49173: PPUSH
49174: LD_VAR 0 12
49178: PUSH
49179: LD_INT 2
49181: ARRAY
49182: PPUSH
49183: LD_VAR 0 7
49187: PPUSH
49188: LD_VAR 0 8
49192: PPUSH
49193: CALL_OW 298
49197: ST_TO_ADDR
// if tmp < distance then
49198: LD_VAR 0 9
49202: PUSH
49203: LD_VAR 0 10
49207: LESS
49208: IFFALSE 49230
// begin result := i ;
49210: LD_ADDR_VAR 0 5
49214: PUSH
49215: LD_VAR 0 6
49219: ST_TO_ADDR
// distance := tmp ;
49220: LD_ADDR_VAR 0 10
49224: PUSH
49225: LD_VAR 0 9
49229: ST_TO_ADDR
// end ; end ;
49230: GO 49088
49232: POP
49233: POP
// end ;
49234: LD_VAR 0 5
49238: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49239: LD_INT 0
49241: PPUSH
49242: PPUSH
// if not driver or not IsInUnit ( driver ) then
49243: LD_VAR 0 1
49247: NOT
49248: PUSH
49249: LD_VAR 0 1
49253: PPUSH
49254: CALL_OW 310
49258: NOT
49259: OR
49260: IFFALSE 49264
// exit ;
49262: GO 49354
// vehicle := IsInUnit ( driver ) ;
49264: LD_ADDR_VAR 0 3
49268: PUSH
49269: LD_VAR 0 1
49273: PPUSH
49274: CALL_OW 310
49278: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49279: LD_VAR 0 1
49283: PPUSH
49284: LD_STRING \
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: PUSH
49314: LD_STRING E
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_VAR 0 3
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PPUSH
49350: CALL_OW 446
// end ;
49354: LD_VAR 0 2
49358: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49359: LD_INT 0
49361: PPUSH
49362: PPUSH
// if not driver or not IsInUnit ( driver ) then
49363: LD_VAR 0 1
49367: NOT
49368: PUSH
49369: LD_VAR 0 1
49373: PPUSH
49374: CALL_OW 310
49378: NOT
49379: OR
49380: IFFALSE 49384
// exit ;
49382: GO 49474
// vehicle := IsInUnit ( driver ) ;
49384: LD_ADDR_VAR 0 3
49388: PUSH
49389: LD_VAR 0 1
49393: PPUSH
49394: CALL_OW 310
49398: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49399: LD_VAR 0 1
49403: PPUSH
49404: LD_STRING \
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: LD_INT 0
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: PUSH
49434: LD_STRING E
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: LD_INT 0
49442: PUSH
49443: LD_VAR 0 3
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PPUSH
49470: CALL_OW 447
// end ;
49474: LD_VAR 0 2
49478: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49479: LD_INT 0
49481: PPUSH
49482: PPUSH
49483: PPUSH
// tmp := [ ] ;
49484: LD_ADDR_VAR 0 5
49488: PUSH
49489: EMPTY
49490: ST_TO_ADDR
// for i in units do
49491: LD_ADDR_VAR 0 4
49495: PUSH
49496: LD_VAR 0 1
49500: PUSH
49501: FOR_IN
49502: IFFALSE 49540
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49504: LD_ADDR_VAR 0 5
49508: PUSH
49509: LD_VAR 0 5
49513: PPUSH
49514: LD_VAR 0 5
49518: PUSH
49519: LD_INT 1
49521: PLUS
49522: PPUSH
49523: LD_VAR 0 4
49527: PPUSH
49528: CALL_OW 256
49532: PPUSH
49533: CALL_OW 2
49537: ST_TO_ADDR
49538: GO 49501
49540: POP
49541: POP
// if not tmp then
49542: LD_VAR 0 5
49546: NOT
49547: IFFALSE 49551
// exit ;
49549: GO 49599
// if asc then
49551: LD_VAR 0 2
49555: IFFALSE 49579
// result := SortListByListAsc ( units , tmp ) else
49557: LD_ADDR_VAR 0 3
49561: PUSH
49562: LD_VAR 0 1
49566: PPUSH
49567: LD_VAR 0 5
49571: PPUSH
49572: CALL_OW 76
49576: ST_TO_ADDR
49577: GO 49599
// result := SortListByListDesc ( units , tmp ) ;
49579: LD_ADDR_VAR 0 3
49583: PUSH
49584: LD_VAR 0 1
49588: PPUSH
49589: LD_VAR 0 5
49593: PPUSH
49594: CALL_OW 77
49598: ST_TO_ADDR
// end ;
49599: LD_VAR 0 3
49603: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49604: LD_INT 0
49606: PPUSH
49607: PPUSH
// task := GetTaskList ( mech ) ;
49608: LD_ADDR_VAR 0 4
49612: PUSH
49613: LD_VAR 0 1
49617: PPUSH
49618: CALL_OW 437
49622: ST_TO_ADDR
// if not task then
49623: LD_VAR 0 4
49627: NOT
49628: IFFALSE 49632
// exit ;
49630: GO 49674
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49632: LD_ADDR_VAR 0 3
49636: PUSH
49637: LD_VAR 0 4
49641: PUSH
49642: LD_INT 1
49644: ARRAY
49645: PUSH
49646: LD_INT 1
49648: ARRAY
49649: PUSH
49650: LD_STRING r
49652: EQUAL
49653: PUSH
49654: LD_VAR 0 4
49658: PUSH
49659: LD_INT 1
49661: ARRAY
49662: PUSH
49663: LD_INT 4
49665: ARRAY
49666: PUSH
49667: LD_VAR 0 2
49671: EQUAL
49672: AND
49673: ST_TO_ADDR
// end ;
49674: LD_VAR 0 3
49678: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49679: LD_INT 0
49681: PPUSH
// SetDir ( unit , d ) ;
49682: LD_VAR 0 1
49686: PPUSH
49687: LD_VAR 0 4
49691: PPUSH
49692: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
49696: LD_VAR 0 1
49700: PPUSH
49701: LD_VAR 0 2
49705: PPUSH
49706: LD_VAR 0 3
49710: PPUSH
49711: LD_VAR 0 5
49715: PPUSH
49716: CALL_OW 48
// end ;
49720: LD_VAR 0 6
49724: RET
// export function ToNaturalNumber ( number ) ; begin
49725: LD_INT 0
49727: PPUSH
// result := number div 1 ;
49728: LD_ADDR_VAR 0 2
49732: PUSH
49733: LD_VAR 0 1
49737: PUSH
49738: LD_INT 1
49740: DIV
49741: ST_TO_ADDR
// if number < 0 then
49742: LD_VAR 0 1
49746: PUSH
49747: LD_INT 0
49749: LESS
49750: IFFALSE 49760
// result := 0 ;
49752: LD_ADDR_VAR 0 2
49756: PUSH
49757: LD_INT 0
49759: ST_TO_ADDR
// end ;
49760: LD_VAR 0 2
49764: RET
// export function SortByClass ( units , class ) ; var un ; begin
49765: LD_INT 0
49767: PPUSH
49768: PPUSH
// if not units or not class then
49769: LD_VAR 0 1
49773: NOT
49774: PUSH
49775: LD_VAR 0 2
49779: NOT
49780: OR
49781: IFFALSE 49785
// exit ;
49783: GO 49880
// result := [ ] ;
49785: LD_ADDR_VAR 0 3
49789: PUSH
49790: EMPTY
49791: ST_TO_ADDR
// for un in units do
49792: LD_ADDR_VAR 0 4
49796: PUSH
49797: LD_VAR 0 1
49801: PUSH
49802: FOR_IN
49803: IFFALSE 49878
// if GetClass ( un ) = class then
49805: LD_VAR 0 4
49809: PPUSH
49810: CALL_OW 257
49814: PUSH
49815: LD_VAR 0 2
49819: EQUAL
49820: IFFALSE 49847
// result := Insert ( result , 1 , un ) else
49822: LD_ADDR_VAR 0 3
49826: PUSH
49827: LD_VAR 0 3
49831: PPUSH
49832: LD_INT 1
49834: PPUSH
49835: LD_VAR 0 4
49839: PPUSH
49840: CALL_OW 2
49844: ST_TO_ADDR
49845: GO 49876
// result := Replace ( result , result + 1 , un ) ;
49847: LD_ADDR_VAR 0 3
49851: PUSH
49852: LD_VAR 0 3
49856: PPUSH
49857: LD_VAR 0 3
49861: PUSH
49862: LD_INT 1
49864: PLUS
49865: PPUSH
49866: LD_VAR 0 4
49870: PPUSH
49871: CALL_OW 1
49875: ST_TO_ADDR
49876: GO 49802
49878: POP
49879: POP
// end ;
49880: LD_VAR 0 3
49884: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49885: LD_INT 0
49887: PPUSH
49888: PPUSH
49889: PPUSH
49890: PPUSH
49891: PPUSH
49892: PPUSH
49893: PPUSH
// result := [ ] ;
49894: LD_ADDR_VAR 0 4
49898: PUSH
49899: EMPTY
49900: ST_TO_ADDR
// if x - r < 0 then
49901: LD_VAR 0 1
49905: PUSH
49906: LD_VAR 0 3
49910: MINUS
49911: PUSH
49912: LD_INT 0
49914: LESS
49915: IFFALSE 49927
// min_x := 0 else
49917: LD_ADDR_VAR 0 8
49921: PUSH
49922: LD_INT 0
49924: ST_TO_ADDR
49925: GO 49943
// min_x := x - r ;
49927: LD_ADDR_VAR 0 8
49931: PUSH
49932: LD_VAR 0 1
49936: PUSH
49937: LD_VAR 0 3
49941: MINUS
49942: ST_TO_ADDR
// if y - r < 0 then
49943: LD_VAR 0 2
49947: PUSH
49948: LD_VAR 0 3
49952: MINUS
49953: PUSH
49954: LD_INT 0
49956: LESS
49957: IFFALSE 49969
// min_y := 0 else
49959: LD_ADDR_VAR 0 7
49963: PUSH
49964: LD_INT 0
49966: ST_TO_ADDR
49967: GO 49985
// min_y := y - r ;
49969: LD_ADDR_VAR 0 7
49973: PUSH
49974: LD_VAR 0 2
49978: PUSH
49979: LD_VAR 0 3
49983: MINUS
49984: ST_TO_ADDR
// max_x := x + r ;
49985: LD_ADDR_VAR 0 9
49989: PUSH
49990: LD_VAR 0 1
49994: PUSH
49995: LD_VAR 0 3
49999: PLUS
50000: ST_TO_ADDR
// max_y := y + r ;
50001: LD_ADDR_VAR 0 10
50005: PUSH
50006: LD_VAR 0 2
50010: PUSH
50011: LD_VAR 0 3
50015: PLUS
50016: ST_TO_ADDR
// for _x = min_x to max_x do
50017: LD_ADDR_VAR 0 5
50021: PUSH
50022: DOUBLE
50023: LD_VAR 0 8
50027: DEC
50028: ST_TO_ADDR
50029: LD_VAR 0 9
50033: PUSH
50034: FOR_TO
50035: IFFALSE 50136
// for _y = min_y to max_y do
50037: LD_ADDR_VAR 0 6
50041: PUSH
50042: DOUBLE
50043: LD_VAR 0 7
50047: DEC
50048: ST_TO_ADDR
50049: LD_VAR 0 10
50053: PUSH
50054: FOR_TO
50055: IFFALSE 50132
// begin if not ValidHex ( _x , _y ) then
50057: LD_VAR 0 5
50061: PPUSH
50062: LD_VAR 0 6
50066: PPUSH
50067: CALL_OW 488
50071: NOT
50072: IFFALSE 50076
// continue ;
50074: GO 50054
// if GetResourceTypeXY ( _x , _y ) then
50076: LD_VAR 0 5
50080: PPUSH
50081: LD_VAR 0 6
50085: PPUSH
50086: CALL_OW 283
50090: IFFALSE 50130
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50092: LD_ADDR_VAR 0 4
50096: PUSH
50097: LD_VAR 0 4
50101: PPUSH
50102: LD_VAR 0 4
50106: PUSH
50107: LD_INT 1
50109: PLUS
50110: PPUSH
50111: LD_VAR 0 5
50115: PUSH
50116: LD_VAR 0 6
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PPUSH
50125: CALL_OW 1
50129: ST_TO_ADDR
// end ;
50130: GO 50054
50132: POP
50133: POP
50134: GO 50034
50136: POP
50137: POP
// end ;
50138: LD_VAR 0 4
50142: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50143: LD_INT 0
50145: PPUSH
50146: PPUSH
50147: PPUSH
50148: PPUSH
50149: PPUSH
50150: PPUSH
50151: PPUSH
50152: PPUSH
// if not units then
50153: LD_VAR 0 1
50157: NOT
50158: IFFALSE 50162
// exit ;
50160: GO 50688
// result := UnitFilter ( units , [ f_ok ] ) ;
50162: LD_ADDR_VAR 0 3
50166: PUSH
50167: LD_VAR 0 1
50171: PPUSH
50172: LD_INT 50
50174: PUSH
50175: EMPTY
50176: LIST
50177: PPUSH
50178: CALL_OW 72
50182: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50183: LD_ADDR_VAR 0 8
50187: PUSH
50188: LD_VAR 0 1
50192: PUSH
50193: LD_INT 1
50195: ARRAY
50196: PPUSH
50197: CALL_OW 255
50201: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50202: LD_ADDR_VAR 0 10
50206: PUSH
50207: LD_INT 29
50209: PUSH
50210: LD_EXP 91
50214: PUSH
50215: LD_INT 49
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: ST_TO_ADDR
// if not result then
50223: LD_VAR 0 3
50227: NOT
50228: IFFALSE 50232
// exit ;
50230: GO 50688
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50232: LD_ADDR_VAR 0 5
50236: PUSH
50237: LD_INT 81
50239: PUSH
50240: LD_VAR 0 8
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PPUSH
50249: CALL_OW 69
50253: ST_TO_ADDR
// for i in result do
50254: LD_ADDR_VAR 0 4
50258: PUSH
50259: LD_VAR 0 3
50263: PUSH
50264: FOR_IN
50265: IFFALSE 50686
// begin tag := GetTag ( i ) + 1 ;
50267: LD_ADDR_VAR 0 9
50271: PUSH
50272: LD_VAR 0 4
50276: PPUSH
50277: CALL_OW 110
50281: PUSH
50282: LD_INT 1
50284: PLUS
50285: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
50286: LD_ADDR_VAR 0 7
50290: PUSH
50291: LD_VAR 0 4
50295: PPUSH
50296: CALL_OW 250
50300: PPUSH
50301: LD_VAR 0 4
50305: PPUSH
50306: CALL_OW 251
50310: PPUSH
50311: LD_INT 6
50313: PPUSH
50314: CALL 49885 0 3
50318: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
50319: LD_VAR 0 4
50323: PPUSH
50324: CALL_OW 247
50328: PUSH
50329: LD_INT 2
50331: EQUAL
50332: PUSH
50333: LD_VAR 0 7
50337: AND
50338: PUSH
50339: LD_VAR 0 4
50343: PPUSH
50344: CALL_OW 264
50348: PUSH
50349: LD_VAR 0 10
50353: IN
50354: NOT
50355: AND
50356: IFFALSE 50395
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50358: LD_VAR 0 4
50362: PPUSH
50363: LD_VAR 0 7
50367: PUSH
50368: LD_INT 1
50370: ARRAY
50371: PUSH
50372: LD_INT 1
50374: ARRAY
50375: PPUSH
50376: LD_VAR 0 7
50380: PUSH
50381: LD_INT 1
50383: ARRAY
50384: PUSH
50385: LD_INT 2
50387: ARRAY
50388: PPUSH
50389: CALL_OW 116
50393: GO 50684
// if path > tag then
50395: LD_VAR 0 2
50399: PUSH
50400: LD_VAR 0 9
50404: GREATER
50405: IFFALSE 50613
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
50407: LD_ADDR_VAR 0 6
50411: PUSH
50412: LD_VAR 0 5
50416: PPUSH
50417: LD_INT 91
50419: PUSH
50420: LD_VAR 0 4
50424: PUSH
50425: LD_INT 8
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: LIST
50432: PPUSH
50433: CALL_OW 72
50437: ST_TO_ADDR
// if nearEnemy then
50438: LD_VAR 0 6
50442: IFFALSE 50511
// begin if GetWeapon ( i ) = ru_time_lapser then
50444: LD_VAR 0 4
50448: PPUSH
50449: CALL_OW 264
50453: PUSH
50454: LD_INT 49
50456: EQUAL
50457: IFFALSE 50485
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50459: LD_VAR 0 4
50463: PPUSH
50464: LD_VAR 0 6
50468: PPUSH
50469: LD_VAR 0 4
50473: PPUSH
50474: CALL_OW 74
50478: PPUSH
50479: CALL_OW 112
50483: GO 50509
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50485: LD_VAR 0 4
50489: PPUSH
50490: LD_VAR 0 6
50494: PPUSH
50495: LD_VAR 0 4
50499: PPUSH
50500: CALL_OW 74
50504: PPUSH
50505: CALL_OW 115
// end else
50509: GO 50611
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50511: LD_VAR 0 4
50515: PPUSH
50516: LD_VAR 0 2
50520: PUSH
50521: LD_VAR 0 9
50525: ARRAY
50526: PUSH
50527: LD_INT 1
50529: ARRAY
50530: PPUSH
50531: LD_VAR 0 2
50535: PUSH
50536: LD_VAR 0 9
50540: ARRAY
50541: PUSH
50542: LD_INT 2
50544: ARRAY
50545: PPUSH
50546: CALL_OW 297
50550: PUSH
50551: LD_INT 6
50553: GREATER
50554: IFFALSE 50597
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50556: LD_VAR 0 4
50560: PPUSH
50561: LD_VAR 0 2
50565: PUSH
50566: LD_VAR 0 9
50570: ARRAY
50571: PUSH
50572: LD_INT 1
50574: ARRAY
50575: PPUSH
50576: LD_VAR 0 2
50580: PUSH
50581: LD_VAR 0 9
50585: ARRAY
50586: PUSH
50587: LD_INT 2
50589: ARRAY
50590: PPUSH
50591: CALL_OW 114
50595: GO 50611
// SetTag ( i , tag ) ;
50597: LD_VAR 0 4
50601: PPUSH
50602: LD_VAR 0 9
50606: PPUSH
50607: CALL_OW 109
// end else
50611: GO 50684
// if enemy then
50613: LD_VAR 0 5
50617: IFFALSE 50684
// begin if GetWeapon ( i ) = ru_time_lapser then
50619: LD_VAR 0 4
50623: PPUSH
50624: CALL_OW 264
50628: PUSH
50629: LD_INT 49
50631: EQUAL
50632: IFFALSE 50660
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50634: LD_VAR 0 4
50638: PPUSH
50639: LD_VAR 0 5
50643: PPUSH
50644: LD_VAR 0 4
50648: PPUSH
50649: CALL_OW 74
50653: PPUSH
50654: CALL_OW 112
50658: GO 50684
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50660: LD_VAR 0 4
50664: PPUSH
50665: LD_VAR 0 5
50669: PPUSH
50670: LD_VAR 0 4
50674: PPUSH
50675: CALL_OW 74
50679: PPUSH
50680: CALL_OW 115
// end ; end ;
50684: GO 50264
50686: POP
50687: POP
// end ;
50688: LD_VAR 0 3
50692: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50693: LD_INT 0
50695: PPUSH
50696: PPUSH
50697: PPUSH
// if not unit or IsInUnit ( unit ) then
50698: LD_VAR 0 1
50702: NOT
50703: PUSH
50704: LD_VAR 0 1
50708: PPUSH
50709: CALL_OW 310
50713: OR
50714: IFFALSE 50718
// exit ;
50716: GO 50809
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50718: LD_ADDR_VAR 0 4
50722: PUSH
50723: LD_VAR 0 1
50727: PPUSH
50728: CALL_OW 250
50732: PPUSH
50733: LD_VAR 0 2
50737: PPUSH
50738: LD_INT 1
50740: PPUSH
50741: CALL_OW 272
50745: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50746: LD_ADDR_VAR 0 5
50750: PUSH
50751: LD_VAR 0 1
50755: PPUSH
50756: CALL_OW 251
50760: PPUSH
50761: LD_VAR 0 2
50765: PPUSH
50766: LD_INT 1
50768: PPUSH
50769: CALL_OW 273
50773: ST_TO_ADDR
// if ValidHex ( x , y ) then
50774: LD_VAR 0 4
50778: PPUSH
50779: LD_VAR 0 5
50783: PPUSH
50784: CALL_OW 488
50788: IFFALSE 50809
// ComTurnXY ( unit , x , y ) ;
50790: LD_VAR 0 1
50794: PPUSH
50795: LD_VAR 0 4
50799: PPUSH
50800: LD_VAR 0 5
50804: PPUSH
50805: CALL_OW 118
// end ;
50809: LD_VAR 0 3
50813: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50814: LD_INT 0
50816: PPUSH
50817: PPUSH
// result := false ;
50818: LD_ADDR_VAR 0 3
50822: PUSH
50823: LD_INT 0
50825: ST_TO_ADDR
// if not units then
50826: LD_VAR 0 2
50830: NOT
50831: IFFALSE 50835
// exit ;
50833: GO 50880
// for i in units do
50835: LD_ADDR_VAR 0 4
50839: PUSH
50840: LD_VAR 0 2
50844: PUSH
50845: FOR_IN
50846: IFFALSE 50878
// if See ( side , i ) then
50848: LD_VAR 0 1
50852: PPUSH
50853: LD_VAR 0 4
50857: PPUSH
50858: CALL_OW 292
50862: IFFALSE 50876
// begin result := true ;
50864: LD_ADDR_VAR 0 3
50868: PUSH
50869: LD_INT 1
50871: ST_TO_ADDR
// exit ;
50872: POP
50873: POP
50874: GO 50880
// end ;
50876: GO 50845
50878: POP
50879: POP
// end ;
50880: LD_VAR 0 3
50884: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50885: LD_INT 0
50887: PPUSH
50888: PPUSH
50889: PPUSH
50890: PPUSH
// if not unit or not points then
50891: LD_VAR 0 1
50895: NOT
50896: PUSH
50897: LD_VAR 0 2
50901: NOT
50902: OR
50903: IFFALSE 50907
// exit ;
50905: GO 50997
// dist := 99999 ;
50907: LD_ADDR_VAR 0 5
50911: PUSH
50912: LD_INT 99999
50914: ST_TO_ADDR
// for i in points do
50915: LD_ADDR_VAR 0 4
50919: PUSH
50920: LD_VAR 0 2
50924: PUSH
50925: FOR_IN
50926: IFFALSE 50995
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50928: LD_ADDR_VAR 0 6
50932: PUSH
50933: LD_VAR 0 1
50937: PPUSH
50938: LD_VAR 0 4
50942: PUSH
50943: LD_INT 1
50945: ARRAY
50946: PPUSH
50947: LD_VAR 0 4
50951: PUSH
50952: LD_INT 2
50954: ARRAY
50955: PPUSH
50956: CALL_OW 297
50960: ST_TO_ADDR
// if tmpDist < dist then
50961: LD_VAR 0 6
50965: PUSH
50966: LD_VAR 0 5
50970: LESS
50971: IFFALSE 50993
// begin result := i ;
50973: LD_ADDR_VAR 0 3
50977: PUSH
50978: LD_VAR 0 4
50982: ST_TO_ADDR
// dist := tmpDist ;
50983: LD_ADDR_VAR 0 5
50987: PUSH
50988: LD_VAR 0 6
50992: ST_TO_ADDR
// end ; end ;
50993: GO 50925
50995: POP
50996: POP
// end ;
50997: LD_VAR 0 3
51001: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51002: LD_INT 0
51004: PPUSH
// uc_side := side ;
51005: LD_ADDR_OWVAR 20
51009: PUSH
51010: LD_VAR 0 1
51014: ST_TO_ADDR
// uc_nation := 3 ;
51015: LD_ADDR_OWVAR 21
51019: PUSH
51020: LD_INT 3
51022: ST_TO_ADDR
// vc_chassis := 25 ;
51023: LD_ADDR_OWVAR 37
51027: PUSH
51028: LD_INT 25
51030: ST_TO_ADDR
// vc_engine := engine_siberite ;
51031: LD_ADDR_OWVAR 39
51035: PUSH
51036: LD_INT 3
51038: ST_TO_ADDR
// vc_control := control_computer ;
51039: LD_ADDR_OWVAR 38
51043: PUSH
51044: LD_INT 3
51046: ST_TO_ADDR
// vc_weapon := 59 ;
51047: LD_ADDR_OWVAR 40
51051: PUSH
51052: LD_INT 59
51054: ST_TO_ADDR
// result := CreateVehicle ;
51055: LD_ADDR_VAR 0 5
51059: PUSH
51060: CALL_OW 45
51064: ST_TO_ADDR
// SetDir ( result , d ) ;
51065: LD_VAR 0 5
51069: PPUSH
51070: LD_VAR 0 4
51074: PPUSH
51075: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51079: LD_VAR 0 5
51083: PPUSH
51084: LD_VAR 0 2
51088: PPUSH
51089: LD_VAR 0 3
51093: PPUSH
51094: LD_INT 0
51096: PPUSH
51097: CALL_OW 48
// end ;
51101: LD_VAR 0 5
51105: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51106: LD_INT 0
51108: PPUSH
51109: PPUSH
51110: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51111: LD_ADDR_VAR 0 2
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51134: LD_VAR 0 1
51138: NOT
51139: PUSH
51140: LD_VAR 0 1
51144: PPUSH
51145: CALL_OW 264
51149: PUSH
51150: LD_INT 12
51152: PUSH
51153: LD_INT 51
51155: PUSH
51156: LD_INT 32
51158: PUSH
51159: LD_EXP 88
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: IN
51170: NOT
51171: OR
51172: IFFALSE 51176
// exit ;
51174: GO 51274
// for i := 1 to 3 do
51176: LD_ADDR_VAR 0 3
51180: PUSH
51181: DOUBLE
51182: LD_INT 1
51184: DEC
51185: ST_TO_ADDR
51186: LD_INT 3
51188: PUSH
51189: FOR_TO
51190: IFFALSE 51272
// begin tmp := GetCargo ( cargo , i ) ;
51192: LD_ADDR_VAR 0 4
51196: PUSH
51197: LD_VAR 0 1
51201: PPUSH
51202: LD_VAR 0 3
51206: PPUSH
51207: CALL_OW 289
51211: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51212: LD_ADDR_VAR 0 2
51216: PUSH
51217: LD_VAR 0 2
51221: PPUSH
51222: LD_VAR 0 3
51226: PPUSH
51227: LD_VAR 0 4
51231: PPUSH
51232: CALL_OW 1
51236: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51237: LD_ADDR_VAR 0 2
51241: PUSH
51242: LD_VAR 0 2
51246: PPUSH
51247: LD_INT 4
51249: PPUSH
51250: LD_VAR 0 2
51254: PUSH
51255: LD_INT 4
51257: ARRAY
51258: PUSH
51259: LD_VAR 0 4
51263: PLUS
51264: PPUSH
51265: CALL_OW 1
51269: ST_TO_ADDR
// end ;
51270: GO 51189
51272: POP
51273: POP
// end ;
51274: LD_VAR 0 2
51278: RET
// export function Length ( array ) ; begin
51279: LD_INT 0
51281: PPUSH
// result := array + 0 ;
51282: LD_ADDR_VAR 0 2
51286: PUSH
51287: LD_VAR 0 1
51291: PUSH
51292: LD_INT 0
51294: PLUS
51295: ST_TO_ADDR
// end ; end_of_file
51296: LD_VAR 0 2
51300: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export function InitGlobalVariables ; begin
51301: LD_INT 0
51303: PPUSH
// ar_miner := 81 ;
51304: LD_ADDR_EXP 94
51308: PUSH
51309: LD_INT 81
51311: ST_TO_ADDR
// ar_crane := 88 ;
51312: LD_ADDR_EXP 93
51316: PUSH
51317: LD_INT 88
51319: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
51320: LD_ADDR_EXP 88
51324: PUSH
51325: LD_INT 89
51327: ST_TO_ADDR
// us_hack := 99 ;
51328: LD_ADDR_EXP 89
51332: PUSH
51333: LD_INT 99
51335: ST_TO_ADDR
// us_artillery := 97 ;
51336: LD_ADDR_EXP 90
51340: PUSH
51341: LD_INT 97
51343: ST_TO_ADDR
// ar_bio_bomb := 91 ;
51344: LD_ADDR_EXP 91
51348: PUSH
51349: LD_INT 91
51351: ST_TO_ADDR
// ar_mortar := 92 ;
51352: LD_ADDR_EXP 92
51356: PUSH
51357: LD_INT 92
51359: ST_TO_ADDR
// ru_flamethrower := 93 ;
51360: LD_ADDR_EXP 95
51364: PUSH
51365: LD_INT 93
51367: ST_TO_ADDR
// ru_radar := 98 ;
51368: LD_ADDR_EXP 87
51372: PUSH
51373: LD_INT 98
51375: ST_TO_ADDR
// tech_Artillery := 80 ;
51376: LD_ADDR_EXP 96
51380: PUSH
51381: LD_INT 80
51383: ST_TO_ADDR
// tech_RadMat := 81 ;
51384: LD_ADDR_EXP 97
51388: PUSH
51389: LD_INT 81
51391: ST_TO_ADDR
// tech_BasicTools := 82 ;
51392: LD_ADDR_EXP 98
51396: PUSH
51397: LD_INT 82
51399: ST_TO_ADDR
// tech_Cargo := 83 ;
51400: LD_ADDR_EXP 99
51404: PUSH
51405: LD_INT 83
51407: ST_TO_ADDR
// tech_Track := 84 ;
51408: LD_ADDR_EXP 100
51412: PUSH
51413: LD_INT 84
51415: ST_TO_ADDR
// tech_Crane := 85 ;
51416: LD_ADDR_EXP 101
51420: PUSH
51421: LD_INT 85
51423: ST_TO_ADDR
// tech_Bulldozer := 86 ;
51424: LD_ADDR_EXP 102
51428: PUSH
51429: LD_INT 86
51431: ST_TO_ADDR
// tech_Hovercraft := 87 ;
51432: LD_ADDR_EXP 103
51436: PUSH
51437: LD_INT 87
51439: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
51440: LD_ADDR_EXP 104
51444: PUSH
51445: LD_INT 88
51447: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
51448: LD_ADDR_EXP 105
51452: PUSH
51453: LD_INT 90
51455: ST_TO_ADDR
// end ; end_of_file
51456: LD_VAR 0 1
51460: RET
// every 0 0$1 do
51461: GO 51463
51463: DISABLE
// begin enable ;
51464: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
51465: LD_STRING updateTimer(
51467: PUSH
51468: LD_OWVAR 1
51472: STR
51473: PUSH
51474: LD_STRING );
51476: STR
51477: PPUSH
51478: CALL_OW 559
// end ;
51482: END
// export function SOS_MapStart ( ) ; begin
51483: LD_INT 0
51485: PPUSH
// if streamModeActive then
51486: LD_EXP 106
51490: IFFALSE 51499
// DefineStreamItems ( true ) ;
51492: LD_INT 1
51494: PPUSH
51495: CALL 53153 0 1
// UpdateFactoryWaypoints ( ) ;
51499: CALL 66014 0 0
// UpdateWarhouseGatheringPoints ( ) ;
51503: CALL 66267 0 0
// end ;
51507: LD_VAR 0 1
51511: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51512: LD_INT 0
51514: PPUSH
// if p2 = 100 then
51515: LD_VAR 0 2
51519: PUSH
51520: LD_INT 100
51522: EQUAL
51523: IFFALSE 52526
// begin if not StreamModeActive then
51525: LD_EXP 106
51529: NOT
51530: IFFALSE 51540
// StreamModeActive := true ;
51532: LD_ADDR_EXP 106
51536: PUSH
51537: LD_INT 1
51539: ST_TO_ADDR
// if p3 = 0 then
51540: LD_VAR 0 3
51544: PUSH
51545: LD_INT 0
51547: EQUAL
51548: IFFALSE 51554
// InitStreamMode ;
51550: CALL 52689 0 0
// if p3 = 1 then
51554: LD_VAR 0 3
51558: PUSH
51559: LD_INT 1
51561: EQUAL
51562: IFFALSE 51572
// sRocket := true ;
51564: LD_ADDR_EXP 111
51568: PUSH
51569: LD_INT 1
51571: ST_TO_ADDR
// if p3 = 2 then
51572: LD_VAR 0 3
51576: PUSH
51577: LD_INT 2
51579: EQUAL
51580: IFFALSE 51590
// sSpeed := true ;
51582: LD_ADDR_EXP 110
51586: PUSH
51587: LD_INT 1
51589: ST_TO_ADDR
// if p3 = 3 then
51590: LD_VAR 0 3
51594: PUSH
51595: LD_INT 3
51597: EQUAL
51598: IFFALSE 51608
// sEngine := true ;
51600: LD_ADDR_EXP 112
51604: PUSH
51605: LD_INT 1
51607: ST_TO_ADDR
// if p3 = 4 then
51608: LD_VAR 0 3
51612: PUSH
51613: LD_INT 4
51615: EQUAL
51616: IFFALSE 51626
// sSpec := true ;
51618: LD_ADDR_EXP 109
51622: PUSH
51623: LD_INT 1
51625: ST_TO_ADDR
// if p3 = 5 then
51626: LD_VAR 0 3
51630: PUSH
51631: LD_INT 5
51633: EQUAL
51634: IFFALSE 51644
// sLevel := true ;
51636: LD_ADDR_EXP 113
51640: PUSH
51641: LD_INT 1
51643: ST_TO_ADDR
// if p3 = 6 then
51644: LD_VAR 0 3
51648: PUSH
51649: LD_INT 6
51651: EQUAL
51652: IFFALSE 51662
// sArmoury := true ;
51654: LD_ADDR_EXP 114
51658: PUSH
51659: LD_INT 1
51661: ST_TO_ADDR
// if p3 = 7 then
51662: LD_VAR 0 3
51666: PUSH
51667: LD_INT 7
51669: EQUAL
51670: IFFALSE 51680
// sRadar := true ;
51672: LD_ADDR_EXP 115
51676: PUSH
51677: LD_INT 1
51679: ST_TO_ADDR
// if p3 = 8 then
51680: LD_VAR 0 3
51684: PUSH
51685: LD_INT 8
51687: EQUAL
51688: IFFALSE 51698
// sBunker := true ;
51690: LD_ADDR_EXP 116
51694: PUSH
51695: LD_INT 1
51697: ST_TO_ADDR
// if p3 = 9 then
51698: LD_VAR 0 3
51702: PUSH
51703: LD_INT 9
51705: EQUAL
51706: IFFALSE 51716
// sHack := true ;
51708: LD_ADDR_EXP 117
51712: PUSH
51713: LD_INT 1
51715: ST_TO_ADDR
// if p3 = 10 then
51716: LD_VAR 0 3
51720: PUSH
51721: LD_INT 10
51723: EQUAL
51724: IFFALSE 51734
// sFire := true ;
51726: LD_ADDR_EXP 118
51730: PUSH
51731: LD_INT 1
51733: ST_TO_ADDR
// if p3 = 11 then
51734: LD_VAR 0 3
51738: PUSH
51739: LD_INT 11
51741: EQUAL
51742: IFFALSE 51752
// sRefresh := true ;
51744: LD_ADDR_EXP 119
51748: PUSH
51749: LD_INT 1
51751: ST_TO_ADDR
// if p3 = 12 then
51752: LD_VAR 0 3
51756: PUSH
51757: LD_INT 12
51759: EQUAL
51760: IFFALSE 51770
// sExp := true ;
51762: LD_ADDR_EXP 120
51766: PUSH
51767: LD_INT 1
51769: ST_TO_ADDR
// if p3 = 13 then
51770: LD_VAR 0 3
51774: PUSH
51775: LD_INT 13
51777: EQUAL
51778: IFFALSE 51788
// sDepot := true ;
51780: LD_ADDR_EXP 121
51784: PUSH
51785: LD_INT 1
51787: ST_TO_ADDR
// if p3 = 14 then
51788: LD_VAR 0 3
51792: PUSH
51793: LD_INT 14
51795: EQUAL
51796: IFFALSE 51806
// sFlag := true ;
51798: LD_ADDR_EXP 122
51802: PUSH
51803: LD_INT 1
51805: ST_TO_ADDR
// if p3 = 15 then
51806: LD_VAR 0 3
51810: PUSH
51811: LD_INT 15
51813: EQUAL
51814: IFFALSE 51824
// sKamikadze := true ;
51816: LD_ADDR_EXP 130
51820: PUSH
51821: LD_INT 1
51823: ST_TO_ADDR
// if p3 = 16 then
51824: LD_VAR 0 3
51828: PUSH
51829: LD_INT 16
51831: EQUAL
51832: IFFALSE 51842
// sTroll := true ;
51834: LD_ADDR_EXP 131
51838: PUSH
51839: LD_INT 1
51841: ST_TO_ADDR
// if p3 = 17 then
51842: LD_VAR 0 3
51846: PUSH
51847: LD_INT 17
51849: EQUAL
51850: IFFALSE 51860
// sSlow := true ;
51852: LD_ADDR_EXP 132
51856: PUSH
51857: LD_INT 1
51859: ST_TO_ADDR
// if p3 = 18 then
51860: LD_VAR 0 3
51864: PUSH
51865: LD_INT 18
51867: EQUAL
51868: IFFALSE 51878
// sLack := true ;
51870: LD_ADDR_EXP 133
51874: PUSH
51875: LD_INT 1
51877: ST_TO_ADDR
// if p3 = 19 then
51878: LD_VAR 0 3
51882: PUSH
51883: LD_INT 19
51885: EQUAL
51886: IFFALSE 51896
// sTank := true ;
51888: LD_ADDR_EXP 135
51892: PUSH
51893: LD_INT 1
51895: ST_TO_ADDR
// if p3 = 20 then
51896: LD_VAR 0 3
51900: PUSH
51901: LD_INT 20
51903: EQUAL
51904: IFFALSE 51914
// sRemote := true ;
51906: LD_ADDR_EXP 136
51910: PUSH
51911: LD_INT 1
51913: ST_TO_ADDR
// if p3 = 21 then
51914: LD_VAR 0 3
51918: PUSH
51919: LD_INT 21
51921: EQUAL
51922: IFFALSE 51932
// sPowell := true ;
51924: LD_ADDR_EXP 137
51928: PUSH
51929: LD_INT 1
51931: ST_TO_ADDR
// if p3 = 22 then
51932: LD_VAR 0 3
51936: PUSH
51937: LD_INT 22
51939: EQUAL
51940: IFFALSE 51950
// sTeleport := true ;
51942: LD_ADDR_EXP 140
51946: PUSH
51947: LD_INT 1
51949: ST_TO_ADDR
// if p3 = 23 then
51950: LD_VAR 0 3
51954: PUSH
51955: LD_INT 23
51957: EQUAL
51958: IFFALSE 51968
// sOilTower := true ;
51960: LD_ADDR_EXP 142
51964: PUSH
51965: LD_INT 1
51967: ST_TO_ADDR
// if p3 = 24 then
51968: LD_VAR 0 3
51972: PUSH
51973: LD_INT 24
51975: EQUAL
51976: IFFALSE 51986
// sShovel := true ;
51978: LD_ADDR_EXP 143
51982: PUSH
51983: LD_INT 1
51985: ST_TO_ADDR
// if p3 = 25 then
51986: LD_VAR 0 3
51990: PUSH
51991: LD_INT 25
51993: EQUAL
51994: IFFALSE 52004
// sSheik := true ;
51996: LD_ADDR_EXP 144
52000: PUSH
52001: LD_INT 1
52003: ST_TO_ADDR
// if p3 = 26 then
52004: LD_VAR 0 3
52008: PUSH
52009: LD_INT 26
52011: EQUAL
52012: IFFALSE 52022
// sEarthquake := true ;
52014: LD_ADDR_EXP 146
52018: PUSH
52019: LD_INT 1
52021: ST_TO_ADDR
// if p3 = 27 then
52022: LD_VAR 0 3
52026: PUSH
52027: LD_INT 27
52029: EQUAL
52030: IFFALSE 52040
// sAI := true ;
52032: LD_ADDR_EXP 147
52036: PUSH
52037: LD_INT 1
52039: ST_TO_ADDR
// if p3 = 28 then
52040: LD_VAR 0 3
52044: PUSH
52045: LD_INT 28
52047: EQUAL
52048: IFFALSE 52058
// sCargo := true ;
52050: LD_ADDR_EXP 150
52054: PUSH
52055: LD_INT 1
52057: ST_TO_ADDR
// if p3 = 29 then
52058: LD_VAR 0 3
52062: PUSH
52063: LD_INT 29
52065: EQUAL
52066: IFFALSE 52076
// sDLaser := true ;
52068: LD_ADDR_EXP 151
52072: PUSH
52073: LD_INT 1
52075: ST_TO_ADDR
// if p3 = 30 then
52076: LD_VAR 0 3
52080: PUSH
52081: LD_INT 30
52083: EQUAL
52084: IFFALSE 52094
// sExchange := true ;
52086: LD_ADDR_EXP 152
52090: PUSH
52091: LD_INT 1
52093: ST_TO_ADDR
// if p3 = 31 then
52094: LD_VAR 0 3
52098: PUSH
52099: LD_INT 31
52101: EQUAL
52102: IFFALSE 52112
// sFac := true ;
52104: LD_ADDR_EXP 153
52108: PUSH
52109: LD_INT 1
52111: ST_TO_ADDR
// if p3 = 32 then
52112: LD_VAR 0 3
52116: PUSH
52117: LD_INT 32
52119: EQUAL
52120: IFFALSE 52130
// sPower := true ;
52122: LD_ADDR_EXP 154
52126: PUSH
52127: LD_INT 1
52129: ST_TO_ADDR
// if p3 = 33 then
52130: LD_VAR 0 3
52134: PUSH
52135: LD_INT 33
52137: EQUAL
52138: IFFALSE 52148
// sRandom := true ;
52140: LD_ADDR_EXP 155
52144: PUSH
52145: LD_INT 1
52147: ST_TO_ADDR
// if p3 = 34 then
52148: LD_VAR 0 3
52152: PUSH
52153: LD_INT 34
52155: EQUAL
52156: IFFALSE 52166
// sShield := true ;
52158: LD_ADDR_EXP 156
52162: PUSH
52163: LD_INT 1
52165: ST_TO_ADDR
// if p3 = 35 then
52166: LD_VAR 0 3
52170: PUSH
52171: LD_INT 35
52173: EQUAL
52174: IFFALSE 52184
// sTime := true ;
52176: LD_ADDR_EXP 157
52180: PUSH
52181: LD_INT 1
52183: ST_TO_ADDR
// if p3 = 36 then
52184: LD_VAR 0 3
52188: PUSH
52189: LD_INT 36
52191: EQUAL
52192: IFFALSE 52202
// sTools := true ;
52194: LD_ADDR_EXP 158
52198: PUSH
52199: LD_INT 1
52201: ST_TO_ADDR
// if p3 = 101 then
52202: LD_VAR 0 3
52206: PUSH
52207: LD_INT 101
52209: EQUAL
52210: IFFALSE 52220
// sSold := true ;
52212: LD_ADDR_EXP 123
52216: PUSH
52217: LD_INT 1
52219: ST_TO_ADDR
// if p3 = 102 then
52220: LD_VAR 0 3
52224: PUSH
52225: LD_INT 102
52227: EQUAL
52228: IFFALSE 52238
// sDiff := true ;
52230: LD_ADDR_EXP 124
52234: PUSH
52235: LD_INT 1
52237: ST_TO_ADDR
// if p3 = 103 then
52238: LD_VAR 0 3
52242: PUSH
52243: LD_INT 103
52245: EQUAL
52246: IFFALSE 52256
// sFog := true ;
52248: LD_ADDR_EXP 127
52252: PUSH
52253: LD_INT 1
52255: ST_TO_ADDR
// if p3 = 104 then
52256: LD_VAR 0 3
52260: PUSH
52261: LD_INT 104
52263: EQUAL
52264: IFFALSE 52274
// sReset := true ;
52266: LD_ADDR_EXP 128
52270: PUSH
52271: LD_INT 1
52273: ST_TO_ADDR
// if p3 = 105 then
52274: LD_VAR 0 3
52278: PUSH
52279: LD_INT 105
52281: EQUAL
52282: IFFALSE 52292
// sSun := true ;
52284: LD_ADDR_EXP 129
52288: PUSH
52289: LD_INT 1
52291: ST_TO_ADDR
// if p3 = 106 then
52292: LD_VAR 0 3
52296: PUSH
52297: LD_INT 106
52299: EQUAL
52300: IFFALSE 52310
// sTiger := true ;
52302: LD_ADDR_EXP 125
52306: PUSH
52307: LD_INT 1
52309: ST_TO_ADDR
// if p3 = 107 then
52310: LD_VAR 0 3
52314: PUSH
52315: LD_INT 107
52317: EQUAL
52318: IFFALSE 52328
// sBomb := true ;
52320: LD_ADDR_EXP 126
52324: PUSH
52325: LD_INT 1
52327: ST_TO_ADDR
// if p3 = 108 then
52328: LD_VAR 0 3
52332: PUSH
52333: LD_INT 108
52335: EQUAL
52336: IFFALSE 52346
// sWound := true ;
52338: LD_ADDR_EXP 134
52342: PUSH
52343: LD_INT 1
52345: ST_TO_ADDR
// if p3 = 109 then
52346: LD_VAR 0 3
52350: PUSH
52351: LD_INT 109
52353: EQUAL
52354: IFFALSE 52364
// sBetray := true ;
52356: LD_ADDR_EXP 138
52360: PUSH
52361: LD_INT 1
52363: ST_TO_ADDR
// if p3 = 110 then
52364: LD_VAR 0 3
52368: PUSH
52369: LD_INT 110
52371: EQUAL
52372: IFFALSE 52382
// sContamin := true ;
52374: LD_ADDR_EXP 139
52378: PUSH
52379: LD_INT 1
52381: ST_TO_ADDR
// if p3 = 111 then
52382: LD_VAR 0 3
52386: PUSH
52387: LD_INT 111
52389: EQUAL
52390: IFFALSE 52400
// sOil := true ;
52392: LD_ADDR_EXP 141
52396: PUSH
52397: LD_INT 1
52399: ST_TO_ADDR
// if p3 = 112 then
52400: LD_VAR 0 3
52404: PUSH
52405: LD_INT 112
52407: EQUAL
52408: IFFALSE 52418
// sStu := true ;
52410: LD_ADDR_EXP 145
52414: PUSH
52415: LD_INT 1
52417: ST_TO_ADDR
// if p3 = 113 then
52418: LD_VAR 0 3
52422: PUSH
52423: LD_INT 113
52425: EQUAL
52426: IFFALSE 52436
// sBazooka := true ;
52428: LD_ADDR_EXP 148
52432: PUSH
52433: LD_INT 1
52435: ST_TO_ADDR
// if p3 = 114 then
52436: LD_VAR 0 3
52440: PUSH
52441: LD_INT 114
52443: EQUAL
52444: IFFALSE 52454
// sMortar := true ;
52446: LD_ADDR_EXP 149
52450: PUSH
52451: LD_INT 1
52453: ST_TO_ADDR
// if p3 = 115 then
52454: LD_VAR 0 3
52458: PUSH
52459: LD_INT 115
52461: EQUAL
52462: IFFALSE 52472
// sRanger := true ;
52464: LD_ADDR_EXP 159
52468: PUSH
52469: LD_INT 1
52471: ST_TO_ADDR
// if p3 = 116 then
52472: LD_VAR 0 3
52476: PUSH
52477: LD_INT 116
52479: EQUAL
52480: IFFALSE 52490
// sComputer := true ;
52482: LD_ADDR_EXP 160
52486: PUSH
52487: LD_INT 1
52489: ST_TO_ADDR
// if p3 = 117 then
52490: LD_VAR 0 3
52494: PUSH
52495: LD_INT 117
52497: EQUAL
52498: IFFALSE 52508
// s30 := true ;
52500: LD_ADDR_EXP 161
52504: PUSH
52505: LD_INT 1
52507: ST_TO_ADDR
// if p3 = 118 then
52508: LD_VAR 0 3
52512: PUSH
52513: LD_INT 118
52515: EQUAL
52516: IFFALSE 52526
// s60 := true ;
52518: LD_ADDR_EXP 162
52522: PUSH
52523: LD_INT 1
52525: ST_TO_ADDR
// end ; if p2 = 101 then
52526: LD_VAR 0 2
52530: PUSH
52531: LD_INT 101
52533: EQUAL
52534: IFFALSE 52662
// begin case p3 of 1 :
52536: LD_VAR 0 3
52540: PUSH
52541: LD_INT 1
52543: DOUBLE
52544: EQUAL
52545: IFTRUE 52549
52547: GO 52556
52549: POP
// hHackUnlimitedResources ; 2 :
52550: CALL 64760 0 0
52554: GO 52662
52556: LD_INT 2
52558: DOUBLE
52559: EQUAL
52560: IFTRUE 52564
52562: GO 52571
52564: POP
// hHackSetLevel10 ; 3 :
52565: CALL 64893 0 0
52569: GO 52662
52571: LD_INT 3
52573: DOUBLE
52574: EQUAL
52575: IFTRUE 52579
52577: GO 52586
52579: POP
// hHackSetLevel10YourUnits ; 4 :
52580: CALL 64978 0 0
52584: GO 52662
52586: LD_INT 4
52588: DOUBLE
52589: EQUAL
52590: IFTRUE 52594
52592: GO 52601
52594: POP
// hHackInvincible ; 5 :
52595: CALL 65426 0 0
52599: GO 52662
52601: LD_INT 5
52603: DOUBLE
52604: EQUAL
52605: IFTRUE 52609
52607: GO 52616
52609: POP
// hHackInvisible ; 6 :
52610: CALL 65537 0 0
52614: GO 52662
52616: LD_INT 6
52618: DOUBLE
52619: EQUAL
52620: IFTRUE 52624
52622: GO 52631
52624: POP
// hHackChangeYourSide ; 7 :
52625: CALL 65594 0 0
52629: GO 52662
52631: LD_INT 7
52633: DOUBLE
52634: EQUAL
52635: IFTRUE 52639
52637: GO 52646
52639: POP
// hHackChangeUnitSide ; 8 :
52640: CALL 65636 0 0
52644: GO 52662
52646: LD_INT 8
52648: DOUBLE
52649: EQUAL
52650: IFTRUE 52654
52652: GO 52661
52654: POP
// hHackFog ; end ;
52655: CALL 65737 0 0
52659: GO 52662
52661: POP
// end ; end ;
52662: LD_VAR 0 7
52666: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
52667: GO 52669
52669: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
52670: LD_STRING initStreamRollete();
52672: PPUSH
52673: CALL_OW 559
// InitStreamMode ;
52677: CALL 52689 0 0
// DefineStreamItems ( false ) ;
52681: LD_INT 0
52683: PPUSH
52684: CALL 53153 0 1
// end ;
52688: END
// function InitStreamMode ; begin
52689: LD_INT 0
52691: PPUSH
// streamModeActive := false ;
52692: LD_ADDR_EXP 106
52696: PUSH
52697: LD_INT 0
52699: ST_TO_ADDR
// normalCounter := 36 ;
52700: LD_ADDR_EXP 107
52704: PUSH
52705: LD_INT 36
52707: ST_TO_ADDR
// hardcoreCounter := 18 ;
52708: LD_ADDR_EXP 108
52712: PUSH
52713: LD_INT 18
52715: ST_TO_ADDR
// sRocket := false ;
52716: LD_ADDR_EXP 111
52720: PUSH
52721: LD_INT 0
52723: ST_TO_ADDR
// sSpeed := false ;
52724: LD_ADDR_EXP 110
52728: PUSH
52729: LD_INT 0
52731: ST_TO_ADDR
// sEngine := false ;
52732: LD_ADDR_EXP 112
52736: PUSH
52737: LD_INT 0
52739: ST_TO_ADDR
// sSpec := false ;
52740: LD_ADDR_EXP 109
52744: PUSH
52745: LD_INT 0
52747: ST_TO_ADDR
// sLevel := false ;
52748: LD_ADDR_EXP 113
52752: PUSH
52753: LD_INT 0
52755: ST_TO_ADDR
// sArmoury := false ;
52756: LD_ADDR_EXP 114
52760: PUSH
52761: LD_INT 0
52763: ST_TO_ADDR
// sRadar := false ;
52764: LD_ADDR_EXP 115
52768: PUSH
52769: LD_INT 0
52771: ST_TO_ADDR
// sBunker := false ;
52772: LD_ADDR_EXP 116
52776: PUSH
52777: LD_INT 0
52779: ST_TO_ADDR
// sHack := false ;
52780: LD_ADDR_EXP 117
52784: PUSH
52785: LD_INT 0
52787: ST_TO_ADDR
// sFire := false ;
52788: LD_ADDR_EXP 118
52792: PUSH
52793: LD_INT 0
52795: ST_TO_ADDR
// sRefresh := false ;
52796: LD_ADDR_EXP 119
52800: PUSH
52801: LD_INT 0
52803: ST_TO_ADDR
// sExp := false ;
52804: LD_ADDR_EXP 120
52808: PUSH
52809: LD_INT 0
52811: ST_TO_ADDR
// sDepot := false ;
52812: LD_ADDR_EXP 121
52816: PUSH
52817: LD_INT 0
52819: ST_TO_ADDR
// sFlag := false ;
52820: LD_ADDR_EXP 122
52824: PUSH
52825: LD_INT 0
52827: ST_TO_ADDR
// sKamikadze := false ;
52828: LD_ADDR_EXP 130
52832: PUSH
52833: LD_INT 0
52835: ST_TO_ADDR
// sTroll := false ;
52836: LD_ADDR_EXP 131
52840: PUSH
52841: LD_INT 0
52843: ST_TO_ADDR
// sSlow := false ;
52844: LD_ADDR_EXP 132
52848: PUSH
52849: LD_INT 0
52851: ST_TO_ADDR
// sLack := false ;
52852: LD_ADDR_EXP 133
52856: PUSH
52857: LD_INT 0
52859: ST_TO_ADDR
// sTank := false ;
52860: LD_ADDR_EXP 135
52864: PUSH
52865: LD_INT 0
52867: ST_TO_ADDR
// sRemote := false ;
52868: LD_ADDR_EXP 136
52872: PUSH
52873: LD_INT 0
52875: ST_TO_ADDR
// sPowell := false ;
52876: LD_ADDR_EXP 137
52880: PUSH
52881: LD_INT 0
52883: ST_TO_ADDR
// sTeleport := false ;
52884: LD_ADDR_EXP 140
52888: PUSH
52889: LD_INT 0
52891: ST_TO_ADDR
// sOilTower := false ;
52892: LD_ADDR_EXP 142
52896: PUSH
52897: LD_INT 0
52899: ST_TO_ADDR
// sShovel := false ;
52900: LD_ADDR_EXP 143
52904: PUSH
52905: LD_INT 0
52907: ST_TO_ADDR
// sSheik := false ;
52908: LD_ADDR_EXP 144
52912: PUSH
52913: LD_INT 0
52915: ST_TO_ADDR
// sEarthquake := false ;
52916: LD_ADDR_EXP 146
52920: PUSH
52921: LD_INT 0
52923: ST_TO_ADDR
// sAI := false ;
52924: LD_ADDR_EXP 147
52928: PUSH
52929: LD_INT 0
52931: ST_TO_ADDR
// sCargo := false ;
52932: LD_ADDR_EXP 150
52936: PUSH
52937: LD_INT 0
52939: ST_TO_ADDR
// sDLaser := false ;
52940: LD_ADDR_EXP 151
52944: PUSH
52945: LD_INT 0
52947: ST_TO_ADDR
// sExchange := false ;
52948: LD_ADDR_EXP 152
52952: PUSH
52953: LD_INT 0
52955: ST_TO_ADDR
// sFac := false ;
52956: LD_ADDR_EXP 153
52960: PUSH
52961: LD_INT 0
52963: ST_TO_ADDR
// sPower := false ;
52964: LD_ADDR_EXP 154
52968: PUSH
52969: LD_INT 0
52971: ST_TO_ADDR
// sRandom := false ;
52972: LD_ADDR_EXP 155
52976: PUSH
52977: LD_INT 0
52979: ST_TO_ADDR
// sShield := false ;
52980: LD_ADDR_EXP 156
52984: PUSH
52985: LD_INT 0
52987: ST_TO_ADDR
// sTime := false ;
52988: LD_ADDR_EXP 157
52992: PUSH
52993: LD_INT 0
52995: ST_TO_ADDR
// sTools := false ;
52996: LD_ADDR_EXP 158
53000: PUSH
53001: LD_INT 0
53003: ST_TO_ADDR
// sSold := false ;
53004: LD_ADDR_EXP 123
53008: PUSH
53009: LD_INT 0
53011: ST_TO_ADDR
// sDiff := false ;
53012: LD_ADDR_EXP 124
53016: PUSH
53017: LD_INT 0
53019: ST_TO_ADDR
// sFog := false ;
53020: LD_ADDR_EXP 127
53024: PUSH
53025: LD_INT 0
53027: ST_TO_ADDR
// sReset := false ;
53028: LD_ADDR_EXP 128
53032: PUSH
53033: LD_INT 0
53035: ST_TO_ADDR
// sSun := false ;
53036: LD_ADDR_EXP 129
53040: PUSH
53041: LD_INT 0
53043: ST_TO_ADDR
// sTiger := false ;
53044: LD_ADDR_EXP 125
53048: PUSH
53049: LD_INT 0
53051: ST_TO_ADDR
// sBomb := false ;
53052: LD_ADDR_EXP 126
53056: PUSH
53057: LD_INT 0
53059: ST_TO_ADDR
// sWound := false ;
53060: LD_ADDR_EXP 134
53064: PUSH
53065: LD_INT 0
53067: ST_TO_ADDR
// sBetray := false ;
53068: LD_ADDR_EXP 138
53072: PUSH
53073: LD_INT 0
53075: ST_TO_ADDR
// sContamin := false ;
53076: LD_ADDR_EXP 139
53080: PUSH
53081: LD_INT 0
53083: ST_TO_ADDR
// sOil := false ;
53084: LD_ADDR_EXP 141
53088: PUSH
53089: LD_INT 0
53091: ST_TO_ADDR
// sStu := false ;
53092: LD_ADDR_EXP 145
53096: PUSH
53097: LD_INT 0
53099: ST_TO_ADDR
// sBazooka := false ;
53100: LD_ADDR_EXP 148
53104: PUSH
53105: LD_INT 0
53107: ST_TO_ADDR
// sMortar := false ;
53108: LD_ADDR_EXP 149
53112: PUSH
53113: LD_INT 0
53115: ST_TO_ADDR
// sRanger := false ;
53116: LD_ADDR_EXP 159
53120: PUSH
53121: LD_INT 0
53123: ST_TO_ADDR
// sComputer := false ;
53124: LD_ADDR_EXP 160
53128: PUSH
53129: LD_INT 0
53131: ST_TO_ADDR
// s30 := false ;
53132: LD_ADDR_EXP 161
53136: PUSH
53137: LD_INT 0
53139: ST_TO_ADDR
// s60 := false ;
53140: LD_ADDR_EXP 162
53144: PUSH
53145: LD_INT 0
53147: ST_TO_ADDR
// end ;
53148: LD_VAR 0 1
53152: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
53153: LD_INT 0
53155: PPUSH
53156: PPUSH
53157: PPUSH
53158: PPUSH
53159: PPUSH
53160: PPUSH
53161: PPUSH
// result := [ ] ;
53162: LD_ADDR_VAR 0 2
53166: PUSH
53167: EMPTY
53168: ST_TO_ADDR
// if campaign_id = 1 then
53169: LD_OWVAR 69
53173: PUSH
53174: LD_INT 1
53176: EQUAL
53177: IFFALSE 56343
// begin case mission_number of 1 :
53179: LD_OWVAR 70
53183: PUSH
53184: LD_INT 1
53186: DOUBLE
53187: EQUAL
53188: IFTRUE 53192
53190: GO 53268
53192: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
53193: LD_ADDR_VAR 0 2
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: LD_INT 4
53203: PUSH
53204: LD_INT 11
53206: PUSH
53207: LD_INT 12
53209: PUSH
53210: LD_INT 15
53212: PUSH
53213: LD_INT 16
53215: PUSH
53216: LD_INT 22
53218: PUSH
53219: LD_INT 23
53221: PUSH
53222: LD_INT 26
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 101
53238: PUSH
53239: LD_INT 102
53241: PUSH
53242: LD_INT 106
53244: PUSH
53245: LD_INT 116
53247: PUSH
53248: LD_INT 117
53250: PUSH
53251: LD_INT 118
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: ST_TO_ADDR
53266: GO 56341
53268: LD_INT 2
53270: DOUBLE
53271: EQUAL
53272: IFTRUE 53276
53274: GO 53360
53276: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
53277: LD_ADDR_VAR 0 2
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: LD_INT 4
53287: PUSH
53288: LD_INT 11
53290: PUSH
53291: LD_INT 12
53293: PUSH
53294: LD_INT 15
53296: PUSH
53297: LD_INT 16
53299: PUSH
53300: LD_INT 22
53302: PUSH
53303: LD_INT 23
53305: PUSH
53306: LD_INT 26
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 101
53322: PUSH
53323: LD_INT 102
53325: PUSH
53326: LD_INT 105
53328: PUSH
53329: LD_INT 106
53331: PUSH
53332: LD_INT 108
53334: PUSH
53335: LD_INT 116
53337: PUSH
53338: LD_INT 117
53340: PUSH
53341: LD_INT 118
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: ST_TO_ADDR
53358: GO 56341
53360: LD_INT 3
53362: DOUBLE
53363: EQUAL
53364: IFTRUE 53368
53366: GO 53456
53368: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
53369: LD_ADDR_VAR 0 2
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: LD_INT 4
53379: PUSH
53380: LD_INT 5
53382: PUSH
53383: LD_INT 11
53385: PUSH
53386: LD_INT 12
53388: PUSH
53389: LD_INT 15
53391: PUSH
53392: LD_INT 16
53394: PUSH
53395: LD_INT 22
53397: PUSH
53398: LD_INT 26
53400: PUSH
53401: LD_INT 36
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 101
53418: PUSH
53419: LD_INT 102
53421: PUSH
53422: LD_INT 105
53424: PUSH
53425: LD_INT 106
53427: PUSH
53428: LD_INT 108
53430: PUSH
53431: LD_INT 116
53433: PUSH
53434: LD_INT 117
53436: PUSH
53437: LD_INT 118
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: ST_TO_ADDR
53454: GO 56341
53456: LD_INT 4
53458: DOUBLE
53459: EQUAL
53460: IFTRUE 53464
53462: GO 53560
53464: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
53465: LD_ADDR_VAR 0 2
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: LD_INT 4
53475: PUSH
53476: LD_INT 5
53478: PUSH
53479: LD_INT 8
53481: PUSH
53482: LD_INT 11
53484: PUSH
53485: LD_INT 12
53487: PUSH
53488: LD_INT 15
53490: PUSH
53491: LD_INT 16
53493: PUSH
53494: LD_INT 22
53496: PUSH
53497: LD_INT 23
53499: PUSH
53500: LD_INT 26
53502: PUSH
53503: LD_INT 36
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 101
53522: PUSH
53523: LD_INT 102
53525: PUSH
53526: LD_INT 105
53528: PUSH
53529: LD_INT 106
53531: PUSH
53532: LD_INT 108
53534: PUSH
53535: LD_INT 116
53537: PUSH
53538: LD_INT 117
53540: PUSH
53541: LD_INT 118
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: ST_TO_ADDR
53558: GO 56341
53560: LD_INT 5
53562: DOUBLE
53563: EQUAL
53564: IFTRUE 53568
53566: GO 53680
53568: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
53569: LD_ADDR_VAR 0 2
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: LD_INT 4
53579: PUSH
53580: LD_INT 5
53582: PUSH
53583: LD_INT 6
53585: PUSH
53586: LD_INT 8
53588: PUSH
53589: LD_INT 11
53591: PUSH
53592: LD_INT 12
53594: PUSH
53595: LD_INT 15
53597: PUSH
53598: LD_INT 16
53600: PUSH
53601: LD_INT 22
53603: PUSH
53604: LD_INT 23
53606: PUSH
53607: LD_INT 25
53609: PUSH
53610: LD_INT 26
53612: PUSH
53613: LD_INT 36
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 101
53634: PUSH
53635: LD_INT 102
53637: PUSH
53638: LD_INT 105
53640: PUSH
53641: LD_INT 106
53643: PUSH
53644: LD_INT 108
53646: PUSH
53647: LD_INT 109
53649: PUSH
53650: LD_INT 112
53652: PUSH
53653: LD_INT 116
53655: PUSH
53656: LD_INT 117
53658: PUSH
53659: LD_INT 118
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: ST_TO_ADDR
53678: GO 56341
53680: LD_INT 6
53682: DOUBLE
53683: EQUAL
53684: IFTRUE 53688
53686: GO 53820
53688: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
53689: LD_ADDR_VAR 0 2
53693: PUSH
53694: LD_INT 2
53696: PUSH
53697: LD_INT 4
53699: PUSH
53700: LD_INT 5
53702: PUSH
53703: LD_INT 6
53705: PUSH
53706: LD_INT 8
53708: PUSH
53709: LD_INT 11
53711: PUSH
53712: LD_INT 12
53714: PUSH
53715: LD_INT 15
53717: PUSH
53718: LD_INT 16
53720: PUSH
53721: LD_INT 20
53723: PUSH
53724: LD_INT 21
53726: PUSH
53727: LD_INT 22
53729: PUSH
53730: LD_INT 23
53732: PUSH
53733: LD_INT 25
53735: PUSH
53736: LD_INT 26
53738: PUSH
53739: LD_INT 30
53741: PUSH
53742: LD_INT 31
53744: PUSH
53745: LD_INT 32
53747: PUSH
53748: LD_INT 36
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 101
53774: PUSH
53775: LD_INT 102
53777: PUSH
53778: LD_INT 105
53780: PUSH
53781: LD_INT 106
53783: PUSH
53784: LD_INT 108
53786: PUSH
53787: LD_INT 109
53789: PUSH
53790: LD_INT 112
53792: PUSH
53793: LD_INT 116
53795: PUSH
53796: LD_INT 117
53798: PUSH
53799: LD_INT 118
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: ST_TO_ADDR
53818: GO 56341
53820: LD_INT 7
53822: DOUBLE
53823: EQUAL
53824: IFTRUE 53828
53826: GO 53940
53828: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
53829: LD_ADDR_VAR 0 2
53833: PUSH
53834: LD_INT 2
53836: PUSH
53837: LD_INT 4
53839: PUSH
53840: LD_INT 5
53842: PUSH
53843: LD_INT 7
53845: PUSH
53846: LD_INT 11
53848: PUSH
53849: LD_INT 12
53851: PUSH
53852: LD_INT 15
53854: PUSH
53855: LD_INT 16
53857: PUSH
53858: LD_INT 20
53860: PUSH
53861: LD_INT 21
53863: PUSH
53864: LD_INT 22
53866: PUSH
53867: LD_INT 23
53869: PUSH
53870: LD_INT 25
53872: PUSH
53873: LD_INT 26
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 101
53894: PUSH
53895: LD_INT 102
53897: PUSH
53898: LD_INT 103
53900: PUSH
53901: LD_INT 105
53903: PUSH
53904: LD_INT 106
53906: PUSH
53907: LD_INT 108
53909: PUSH
53910: LD_INT 112
53912: PUSH
53913: LD_INT 116
53915: PUSH
53916: LD_INT 117
53918: PUSH
53919: LD_INT 118
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: ST_TO_ADDR
53938: GO 56341
53940: LD_INT 8
53942: DOUBLE
53943: EQUAL
53944: IFTRUE 53948
53946: GO 54088
53948: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
53949: LD_ADDR_VAR 0 2
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: LD_INT 4
53959: PUSH
53960: LD_INT 5
53962: PUSH
53963: LD_INT 6
53965: PUSH
53966: LD_INT 7
53968: PUSH
53969: LD_INT 8
53971: PUSH
53972: LD_INT 11
53974: PUSH
53975: LD_INT 12
53977: PUSH
53978: LD_INT 15
53980: PUSH
53981: LD_INT 16
53983: PUSH
53984: LD_INT 20
53986: PUSH
53987: LD_INT 21
53989: PUSH
53990: LD_INT 22
53992: PUSH
53993: LD_INT 23
53995: PUSH
53996: LD_INT 25
53998: PUSH
53999: LD_INT 26
54001: PUSH
54002: LD_INT 30
54004: PUSH
54005: LD_INT 31
54007: PUSH
54008: LD_INT 32
54010: PUSH
54011: LD_INT 36
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 101
54038: PUSH
54039: LD_INT 102
54041: PUSH
54042: LD_INT 103
54044: PUSH
54045: LD_INT 105
54047: PUSH
54048: LD_INT 106
54050: PUSH
54051: LD_INT 108
54053: PUSH
54054: LD_INT 109
54056: PUSH
54057: LD_INT 112
54059: PUSH
54060: LD_INT 116
54062: PUSH
54063: LD_INT 117
54065: PUSH
54066: LD_INT 118
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: ST_TO_ADDR
54086: GO 56341
54088: LD_INT 9
54090: DOUBLE
54091: EQUAL
54092: IFTRUE 54096
54094: GO 54244
54096: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
54097: LD_ADDR_VAR 0 2
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: LD_INT 4
54107: PUSH
54108: LD_INT 5
54110: PUSH
54111: LD_INT 6
54113: PUSH
54114: LD_INT 7
54116: PUSH
54117: LD_INT 8
54119: PUSH
54120: LD_INT 11
54122: PUSH
54123: LD_INT 12
54125: PUSH
54126: LD_INT 15
54128: PUSH
54129: LD_INT 16
54131: PUSH
54132: LD_INT 20
54134: PUSH
54135: LD_INT 21
54137: PUSH
54138: LD_INT 22
54140: PUSH
54141: LD_INT 23
54143: PUSH
54144: LD_INT 25
54146: PUSH
54147: LD_INT 26
54149: PUSH
54150: LD_INT 28
54152: PUSH
54153: LD_INT 30
54155: PUSH
54156: LD_INT 31
54158: PUSH
54159: LD_INT 32
54161: PUSH
54162: LD_INT 36
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 101
54190: PUSH
54191: LD_INT 102
54193: PUSH
54194: LD_INT 103
54196: PUSH
54197: LD_INT 105
54199: PUSH
54200: LD_INT 106
54202: PUSH
54203: LD_INT 108
54205: PUSH
54206: LD_INT 109
54208: PUSH
54209: LD_INT 112
54211: PUSH
54212: LD_INT 114
54214: PUSH
54215: LD_INT 116
54217: PUSH
54218: LD_INT 117
54220: PUSH
54221: LD_INT 118
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: ST_TO_ADDR
54242: GO 56341
54244: LD_INT 10
54246: DOUBLE
54247: EQUAL
54248: IFTRUE 54252
54250: GO 54448
54252: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
54253: LD_ADDR_VAR 0 2
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: LD_INT 4
54263: PUSH
54264: LD_INT 5
54266: PUSH
54267: LD_INT 6
54269: PUSH
54270: LD_INT 7
54272: PUSH
54273: LD_INT 8
54275: PUSH
54276: LD_INT 9
54278: PUSH
54279: LD_INT 10
54281: PUSH
54282: LD_INT 11
54284: PUSH
54285: LD_INT 12
54287: PUSH
54288: LD_INT 13
54290: PUSH
54291: LD_INT 14
54293: PUSH
54294: LD_INT 15
54296: PUSH
54297: LD_INT 16
54299: PUSH
54300: LD_INT 17
54302: PUSH
54303: LD_INT 18
54305: PUSH
54306: LD_INT 19
54308: PUSH
54309: LD_INT 20
54311: PUSH
54312: LD_INT 21
54314: PUSH
54315: LD_INT 22
54317: PUSH
54318: LD_INT 23
54320: PUSH
54321: LD_INT 24
54323: PUSH
54324: LD_INT 25
54326: PUSH
54327: LD_INT 26
54329: PUSH
54330: LD_INT 28
54332: PUSH
54333: LD_INT 30
54335: PUSH
54336: LD_INT 31
54338: PUSH
54339: LD_INT 32
54341: PUSH
54342: LD_INT 36
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 101
54378: PUSH
54379: LD_INT 102
54381: PUSH
54382: LD_INT 103
54384: PUSH
54385: LD_INT 104
54387: PUSH
54388: LD_INT 105
54390: PUSH
54391: LD_INT 106
54393: PUSH
54394: LD_INT 107
54396: PUSH
54397: LD_INT 108
54399: PUSH
54400: LD_INT 109
54402: PUSH
54403: LD_INT 110
54405: PUSH
54406: LD_INT 111
54408: PUSH
54409: LD_INT 112
54411: PUSH
54412: LD_INT 114
54414: PUSH
54415: LD_INT 116
54417: PUSH
54418: LD_INT 117
54420: PUSH
54421: LD_INT 118
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: ST_TO_ADDR
54446: GO 56341
54448: LD_INT 11
54450: DOUBLE
54451: EQUAL
54452: IFTRUE 54456
54454: GO 54660
54456: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
54457: LD_ADDR_VAR 0 2
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: LD_INT 4
54470: PUSH
54471: LD_INT 5
54473: PUSH
54474: LD_INT 6
54476: PUSH
54477: LD_INT 7
54479: PUSH
54480: LD_INT 8
54482: PUSH
54483: LD_INT 9
54485: PUSH
54486: LD_INT 10
54488: PUSH
54489: LD_INT 11
54491: PUSH
54492: LD_INT 12
54494: PUSH
54495: LD_INT 13
54497: PUSH
54498: LD_INT 14
54500: PUSH
54501: LD_INT 15
54503: PUSH
54504: LD_INT 16
54506: PUSH
54507: LD_INT 17
54509: PUSH
54510: LD_INT 18
54512: PUSH
54513: LD_INT 19
54515: PUSH
54516: LD_INT 20
54518: PUSH
54519: LD_INT 21
54521: PUSH
54522: LD_INT 22
54524: PUSH
54525: LD_INT 23
54527: PUSH
54528: LD_INT 24
54530: PUSH
54531: LD_INT 25
54533: PUSH
54534: LD_INT 26
54536: PUSH
54537: LD_INT 28
54539: PUSH
54540: LD_INT 30
54542: PUSH
54543: LD_INT 31
54545: PUSH
54546: LD_INT 32
54548: PUSH
54549: LD_INT 34
54551: PUSH
54552: LD_INT 36
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 101
54590: PUSH
54591: LD_INT 102
54593: PUSH
54594: LD_INT 103
54596: PUSH
54597: LD_INT 104
54599: PUSH
54600: LD_INT 105
54602: PUSH
54603: LD_INT 106
54605: PUSH
54606: LD_INT 107
54608: PUSH
54609: LD_INT 108
54611: PUSH
54612: LD_INT 109
54614: PUSH
54615: LD_INT 110
54617: PUSH
54618: LD_INT 111
54620: PUSH
54621: LD_INT 112
54623: PUSH
54624: LD_INT 114
54626: PUSH
54627: LD_INT 116
54629: PUSH
54630: LD_INT 117
54632: PUSH
54633: LD_INT 118
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: ST_TO_ADDR
54658: GO 56341
54660: LD_INT 12
54662: DOUBLE
54663: EQUAL
54664: IFTRUE 54668
54666: GO 54888
54668: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
54669: LD_ADDR_VAR 0 2
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 2
54679: PUSH
54680: LD_INT 3
54682: PUSH
54683: LD_INT 4
54685: PUSH
54686: LD_INT 5
54688: PUSH
54689: LD_INT 6
54691: PUSH
54692: LD_INT 7
54694: PUSH
54695: LD_INT 8
54697: PUSH
54698: LD_INT 9
54700: PUSH
54701: LD_INT 10
54703: PUSH
54704: LD_INT 11
54706: PUSH
54707: LD_INT 12
54709: PUSH
54710: LD_INT 13
54712: PUSH
54713: LD_INT 14
54715: PUSH
54716: LD_INT 15
54718: PUSH
54719: LD_INT 16
54721: PUSH
54722: LD_INT 17
54724: PUSH
54725: LD_INT 18
54727: PUSH
54728: LD_INT 19
54730: PUSH
54731: LD_INT 20
54733: PUSH
54734: LD_INT 21
54736: PUSH
54737: LD_INT 22
54739: PUSH
54740: LD_INT 23
54742: PUSH
54743: LD_INT 24
54745: PUSH
54746: LD_INT 25
54748: PUSH
54749: LD_INT 26
54751: PUSH
54752: LD_INT 27
54754: PUSH
54755: LD_INT 28
54757: PUSH
54758: LD_INT 30
54760: PUSH
54761: LD_INT 31
54763: PUSH
54764: LD_INT 32
54766: PUSH
54767: LD_INT 33
54769: PUSH
54770: LD_INT 34
54772: PUSH
54773: LD_INT 36
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 101
54814: PUSH
54815: LD_INT 102
54817: PUSH
54818: LD_INT 103
54820: PUSH
54821: LD_INT 104
54823: PUSH
54824: LD_INT 105
54826: PUSH
54827: LD_INT 106
54829: PUSH
54830: LD_INT 107
54832: PUSH
54833: LD_INT 108
54835: PUSH
54836: LD_INT 109
54838: PUSH
54839: LD_INT 110
54841: PUSH
54842: LD_INT 111
54844: PUSH
54845: LD_INT 112
54847: PUSH
54848: LD_INT 113
54850: PUSH
54851: LD_INT 114
54853: PUSH
54854: LD_INT 116
54856: PUSH
54857: LD_INT 117
54859: PUSH
54860: LD_INT 118
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: ST_TO_ADDR
54886: GO 56341
54888: LD_INT 13
54890: DOUBLE
54891: EQUAL
54892: IFTRUE 54896
54894: GO 55104
54896: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
54897: LD_ADDR_VAR 0 2
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: LD_INT 3
54910: PUSH
54911: LD_INT 4
54913: PUSH
54914: LD_INT 5
54916: PUSH
54917: LD_INT 8
54919: PUSH
54920: LD_INT 9
54922: PUSH
54923: LD_INT 10
54925: PUSH
54926: LD_INT 11
54928: PUSH
54929: LD_INT 12
54931: PUSH
54932: LD_INT 14
54934: PUSH
54935: LD_INT 15
54937: PUSH
54938: LD_INT 16
54940: PUSH
54941: LD_INT 17
54943: PUSH
54944: LD_INT 18
54946: PUSH
54947: LD_INT 19
54949: PUSH
54950: LD_INT 20
54952: PUSH
54953: LD_INT 21
54955: PUSH
54956: LD_INT 22
54958: PUSH
54959: LD_INT 23
54961: PUSH
54962: LD_INT 24
54964: PUSH
54965: LD_INT 25
54967: PUSH
54968: LD_INT 26
54970: PUSH
54971: LD_INT 27
54973: PUSH
54974: LD_INT 28
54976: PUSH
54977: LD_INT 30
54979: PUSH
54980: LD_INT 31
54982: PUSH
54983: LD_INT 32
54985: PUSH
54986: LD_INT 33
54988: PUSH
54989: LD_INT 34
54991: PUSH
54992: LD_INT 36
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 101
55030: PUSH
55031: LD_INT 102
55033: PUSH
55034: LD_INT 103
55036: PUSH
55037: LD_INT 104
55039: PUSH
55040: LD_INT 105
55042: PUSH
55043: LD_INT 106
55045: PUSH
55046: LD_INT 107
55048: PUSH
55049: LD_INT 108
55051: PUSH
55052: LD_INT 109
55054: PUSH
55055: LD_INT 110
55057: PUSH
55058: LD_INT 111
55060: PUSH
55061: LD_INT 112
55063: PUSH
55064: LD_INT 113
55066: PUSH
55067: LD_INT 114
55069: PUSH
55070: LD_INT 116
55072: PUSH
55073: LD_INT 117
55075: PUSH
55076: LD_INT 118
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: ST_TO_ADDR
55102: GO 56341
55104: LD_INT 14
55106: DOUBLE
55107: EQUAL
55108: IFTRUE 55112
55110: GO 55336
55112: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
55113: LD_ADDR_VAR 0 2
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: LD_INT 2
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: LD_INT 4
55129: PUSH
55130: LD_INT 5
55132: PUSH
55133: LD_INT 6
55135: PUSH
55136: LD_INT 7
55138: PUSH
55139: LD_INT 8
55141: PUSH
55142: LD_INT 9
55144: PUSH
55145: LD_INT 10
55147: PUSH
55148: LD_INT 11
55150: PUSH
55151: LD_INT 12
55153: PUSH
55154: LD_INT 13
55156: PUSH
55157: LD_INT 14
55159: PUSH
55160: LD_INT 15
55162: PUSH
55163: LD_INT 16
55165: PUSH
55166: LD_INT 17
55168: PUSH
55169: LD_INT 18
55171: PUSH
55172: LD_INT 19
55174: PUSH
55175: LD_INT 20
55177: PUSH
55178: LD_INT 21
55180: PUSH
55181: LD_INT 22
55183: PUSH
55184: LD_INT 23
55186: PUSH
55187: LD_INT 24
55189: PUSH
55190: LD_INT 25
55192: PUSH
55193: LD_INT 26
55195: PUSH
55196: LD_INT 27
55198: PUSH
55199: LD_INT 28
55201: PUSH
55202: LD_INT 29
55204: PUSH
55205: LD_INT 30
55207: PUSH
55208: LD_INT 31
55210: PUSH
55211: LD_INT 32
55213: PUSH
55214: LD_INT 33
55216: PUSH
55217: LD_INT 34
55219: PUSH
55220: LD_INT 36
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 101
55262: PUSH
55263: LD_INT 102
55265: PUSH
55266: LD_INT 103
55268: PUSH
55269: LD_INT 104
55271: PUSH
55272: LD_INT 105
55274: PUSH
55275: LD_INT 106
55277: PUSH
55278: LD_INT 107
55280: PUSH
55281: LD_INT 108
55283: PUSH
55284: LD_INT 109
55286: PUSH
55287: LD_INT 110
55289: PUSH
55290: LD_INT 111
55292: PUSH
55293: LD_INT 112
55295: PUSH
55296: LD_INT 113
55298: PUSH
55299: LD_INT 114
55301: PUSH
55302: LD_INT 116
55304: PUSH
55305: LD_INT 117
55307: PUSH
55308: LD_INT 118
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: ST_TO_ADDR
55334: GO 56341
55336: LD_INT 15
55338: DOUBLE
55339: EQUAL
55340: IFTRUE 55344
55342: GO 55568
55344: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
55345: LD_ADDR_VAR 0 2
55349: PUSH
55350: LD_INT 1
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: LD_INT 4
55361: PUSH
55362: LD_INT 5
55364: PUSH
55365: LD_INT 6
55367: PUSH
55368: LD_INT 7
55370: PUSH
55371: LD_INT 8
55373: PUSH
55374: LD_INT 9
55376: PUSH
55377: LD_INT 10
55379: PUSH
55380: LD_INT 11
55382: PUSH
55383: LD_INT 12
55385: PUSH
55386: LD_INT 13
55388: PUSH
55389: LD_INT 14
55391: PUSH
55392: LD_INT 15
55394: PUSH
55395: LD_INT 16
55397: PUSH
55398: LD_INT 17
55400: PUSH
55401: LD_INT 18
55403: PUSH
55404: LD_INT 19
55406: PUSH
55407: LD_INT 20
55409: PUSH
55410: LD_INT 21
55412: PUSH
55413: LD_INT 22
55415: PUSH
55416: LD_INT 23
55418: PUSH
55419: LD_INT 24
55421: PUSH
55422: LD_INT 25
55424: PUSH
55425: LD_INT 26
55427: PUSH
55428: LD_INT 27
55430: PUSH
55431: LD_INT 28
55433: PUSH
55434: LD_INT 29
55436: PUSH
55437: LD_INT 30
55439: PUSH
55440: LD_INT 31
55442: PUSH
55443: LD_INT 32
55445: PUSH
55446: LD_INT 33
55448: PUSH
55449: LD_INT 34
55451: PUSH
55452: LD_INT 36
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 101
55494: PUSH
55495: LD_INT 102
55497: PUSH
55498: LD_INT 103
55500: PUSH
55501: LD_INT 104
55503: PUSH
55504: LD_INT 105
55506: PUSH
55507: LD_INT 106
55509: PUSH
55510: LD_INT 107
55512: PUSH
55513: LD_INT 108
55515: PUSH
55516: LD_INT 109
55518: PUSH
55519: LD_INT 110
55521: PUSH
55522: LD_INT 111
55524: PUSH
55525: LD_INT 112
55527: PUSH
55528: LD_INT 113
55530: PUSH
55531: LD_INT 114
55533: PUSH
55534: LD_INT 116
55536: PUSH
55537: LD_INT 117
55539: PUSH
55540: LD_INT 118
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: ST_TO_ADDR
55566: GO 56341
55568: LD_INT 16
55570: DOUBLE
55571: EQUAL
55572: IFTRUE 55576
55574: GO 55712
55576: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
55577: LD_ADDR_VAR 0 2
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: LD_INT 4
55587: PUSH
55588: LD_INT 5
55590: PUSH
55591: LD_INT 7
55593: PUSH
55594: LD_INT 11
55596: PUSH
55597: LD_INT 12
55599: PUSH
55600: LD_INT 15
55602: PUSH
55603: LD_INT 16
55605: PUSH
55606: LD_INT 20
55608: PUSH
55609: LD_INT 21
55611: PUSH
55612: LD_INT 22
55614: PUSH
55615: LD_INT 23
55617: PUSH
55618: LD_INT 25
55620: PUSH
55621: LD_INT 26
55623: PUSH
55624: LD_INT 30
55626: PUSH
55627: LD_INT 31
55629: PUSH
55630: LD_INT 32
55632: PUSH
55633: LD_INT 33
55635: PUSH
55636: LD_INT 34
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 101
55662: PUSH
55663: LD_INT 102
55665: PUSH
55666: LD_INT 103
55668: PUSH
55669: LD_INT 106
55671: PUSH
55672: LD_INT 108
55674: PUSH
55675: LD_INT 112
55677: PUSH
55678: LD_INT 113
55680: PUSH
55681: LD_INT 114
55683: PUSH
55684: LD_INT 116
55686: PUSH
55687: LD_INT 117
55689: PUSH
55690: LD_INT 118
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: ST_TO_ADDR
55710: GO 56341
55712: LD_INT 17
55714: DOUBLE
55715: EQUAL
55716: IFTRUE 55720
55718: GO 55944
55720: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
55721: LD_ADDR_VAR 0 2
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 3
55734: PUSH
55735: LD_INT 4
55737: PUSH
55738: LD_INT 5
55740: PUSH
55741: LD_INT 6
55743: PUSH
55744: LD_INT 7
55746: PUSH
55747: LD_INT 8
55749: PUSH
55750: LD_INT 9
55752: PUSH
55753: LD_INT 10
55755: PUSH
55756: LD_INT 11
55758: PUSH
55759: LD_INT 12
55761: PUSH
55762: LD_INT 13
55764: PUSH
55765: LD_INT 14
55767: PUSH
55768: LD_INT 15
55770: PUSH
55771: LD_INT 16
55773: PUSH
55774: LD_INT 17
55776: PUSH
55777: LD_INT 18
55779: PUSH
55780: LD_INT 19
55782: PUSH
55783: LD_INT 20
55785: PUSH
55786: LD_INT 21
55788: PUSH
55789: LD_INT 22
55791: PUSH
55792: LD_INT 23
55794: PUSH
55795: LD_INT 24
55797: PUSH
55798: LD_INT 25
55800: PUSH
55801: LD_INT 26
55803: PUSH
55804: LD_INT 27
55806: PUSH
55807: LD_INT 28
55809: PUSH
55810: LD_INT 29
55812: PUSH
55813: LD_INT 30
55815: PUSH
55816: LD_INT 31
55818: PUSH
55819: LD_INT 32
55821: PUSH
55822: LD_INT 33
55824: PUSH
55825: LD_INT 34
55827: PUSH
55828: LD_INT 36
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 101
55870: PUSH
55871: LD_INT 102
55873: PUSH
55874: LD_INT 103
55876: PUSH
55877: LD_INT 104
55879: PUSH
55880: LD_INT 105
55882: PUSH
55883: LD_INT 106
55885: PUSH
55886: LD_INT 107
55888: PUSH
55889: LD_INT 108
55891: PUSH
55892: LD_INT 109
55894: PUSH
55895: LD_INT 110
55897: PUSH
55898: LD_INT 111
55900: PUSH
55901: LD_INT 112
55903: PUSH
55904: LD_INT 113
55906: PUSH
55907: LD_INT 114
55909: PUSH
55910: LD_INT 116
55912: PUSH
55913: LD_INT 117
55915: PUSH
55916: LD_INT 118
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: ST_TO_ADDR
55942: GO 56341
55944: LD_INT 18
55946: DOUBLE
55947: EQUAL
55948: IFTRUE 55952
55950: GO 56100
55952: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
55953: LD_ADDR_VAR 0 2
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 4
55963: PUSH
55964: LD_INT 5
55966: PUSH
55967: LD_INT 7
55969: PUSH
55970: LD_INT 11
55972: PUSH
55973: LD_INT 12
55975: PUSH
55976: LD_INT 15
55978: PUSH
55979: LD_INT 16
55981: PUSH
55982: LD_INT 20
55984: PUSH
55985: LD_INT 21
55987: PUSH
55988: LD_INT 22
55990: PUSH
55991: LD_INT 23
55993: PUSH
55994: LD_INT 25
55996: PUSH
55997: LD_INT 26
55999: PUSH
56000: LD_INT 30
56002: PUSH
56003: LD_INT 31
56005: PUSH
56006: LD_INT 32
56008: PUSH
56009: LD_INT 33
56011: PUSH
56012: LD_INT 34
56014: PUSH
56015: LD_INT 35
56017: PUSH
56018: LD_INT 36
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 101
56046: PUSH
56047: LD_INT 102
56049: PUSH
56050: LD_INT 103
56052: PUSH
56053: LD_INT 106
56055: PUSH
56056: LD_INT 108
56058: PUSH
56059: LD_INT 112
56061: PUSH
56062: LD_INT 113
56064: PUSH
56065: LD_INT 114
56067: PUSH
56068: LD_INT 115
56070: PUSH
56071: LD_INT 116
56073: PUSH
56074: LD_INT 117
56076: PUSH
56077: LD_INT 118
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: ST_TO_ADDR
56098: GO 56341
56100: LD_INT 19
56102: DOUBLE
56103: EQUAL
56104: IFTRUE 56108
56106: GO 56340
56108: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
56109: LD_ADDR_VAR 0 2
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: LD_INT 3
56122: PUSH
56123: LD_INT 4
56125: PUSH
56126: LD_INT 5
56128: PUSH
56129: LD_INT 6
56131: PUSH
56132: LD_INT 7
56134: PUSH
56135: LD_INT 8
56137: PUSH
56138: LD_INT 9
56140: PUSH
56141: LD_INT 10
56143: PUSH
56144: LD_INT 11
56146: PUSH
56147: LD_INT 12
56149: PUSH
56150: LD_INT 13
56152: PUSH
56153: LD_INT 14
56155: PUSH
56156: LD_INT 15
56158: PUSH
56159: LD_INT 16
56161: PUSH
56162: LD_INT 17
56164: PUSH
56165: LD_INT 18
56167: PUSH
56168: LD_INT 19
56170: PUSH
56171: LD_INT 20
56173: PUSH
56174: LD_INT 21
56176: PUSH
56177: LD_INT 22
56179: PUSH
56180: LD_INT 23
56182: PUSH
56183: LD_INT 24
56185: PUSH
56186: LD_INT 25
56188: PUSH
56189: LD_INT 26
56191: PUSH
56192: LD_INT 27
56194: PUSH
56195: LD_INT 28
56197: PUSH
56198: LD_INT 29
56200: PUSH
56201: LD_INT 30
56203: PUSH
56204: LD_INT 31
56206: PUSH
56207: LD_INT 32
56209: PUSH
56210: LD_INT 33
56212: PUSH
56213: LD_INT 34
56215: PUSH
56216: LD_INT 35
56218: PUSH
56219: LD_INT 36
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 101
56262: PUSH
56263: LD_INT 102
56265: PUSH
56266: LD_INT 103
56268: PUSH
56269: LD_INT 104
56271: PUSH
56272: LD_INT 105
56274: PUSH
56275: LD_INT 106
56277: PUSH
56278: LD_INT 107
56280: PUSH
56281: LD_INT 108
56283: PUSH
56284: LD_INT 109
56286: PUSH
56287: LD_INT 110
56289: PUSH
56290: LD_INT 111
56292: PUSH
56293: LD_INT 112
56295: PUSH
56296: LD_INT 113
56298: PUSH
56299: LD_INT 114
56301: PUSH
56302: LD_INT 115
56304: PUSH
56305: LD_INT 116
56307: PUSH
56308: LD_INT 117
56310: PUSH
56311: LD_INT 118
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: ST_TO_ADDR
56338: GO 56341
56340: POP
// end else
56341: GO 56572
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
56343: LD_ADDR_VAR 0 2
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: LD_INT 4
56359: PUSH
56360: LD_INT 5
56362: PUSH
56363: LD_INT 6
56365: PUSH
56366: LD_INT 7
56368: PUSH
56369: LD_INT 8
56371: PUSH
56372: LD_INT 9
56374: PUSH
56375: LD_INT 10
56377: PUSH
56378: LD_INT 11
56380: PUSH
56381: LD_INT 12
56383: PUSH
56384: LD_INT 13
56386: PUSH
56387: LD_INT 14
56389: PUSH
56390: LD_INT 15
56392: PUSH
56393: LD_INT 16
56395: PUSH
56396: LD_INT 17
56398: PUSH
56399: LD_INT 18
56401: PUSH
56402: LD_INT 19
56404: PUSH
56405: LD_INT 20
56407: PUSH
56408: LD_INT 21
56410: PUSH
56411: LD_INT 22
56413: PUSH
56414: LD_INT 23
56416: PUSH
56417: LD_INT 24
56419: PUSH
56420: LD_INT 25
56422: PUSH
56423: LD_INT 26
56425: PUSH
56426: LD_INT 27
56428: PUSH
56429: LD_INT 28
56431: PUSH
56432: LD_INT 29
56434: PUSH
56435: LD_INT 30
56437: PUSH
56438: LD_INT 31
56440: PUSH
56441: LD_INT 32
56443: PUSH
56444: LD_INT 33
56446: PUSH
56447: LD_INT 34
56449: PUSH
56450: LD_INT 35
56452: PUSH
56453: LD_INT 36
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 101
56496: PUSH
56497: LD_INT 102
56499: PUSH
56500: LD_INT 103
56502: PUSH
56503: LD_INT 104
56505: PUSH
56506: LD_INT 105
56508: PUSH
56509: LD_INT 106
56511: PUSH
56512: LD_INT 107
56514: PUSH
56515: LD_INT 108
56517: PUSH
56518: LD_INT 109
56520: PUSH
56521: LD_INT 110
56523: PUSH
56524: LD_INT 111
56526: PUSH
56527: LD_INT 112
56529: PUSH
56530: LD_INT 113
56532: PUSH
56533: LD_INT 114
56535: PUSH
56536: LD_INT 115
56538: PUSH
56539: LD_INT 116
56541: PUSH
56542: LD_INT 117
56544: PUSH
56545: LD_INT 118
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: ST_TO_ADDR
// if result then
56572: LD_VAR 0 2
56576: IFFALSE 57362
// begin normal :=  ;
56578: LD_ADDR_VAR 0 5
56582: PUSH
56583: LD_STRING 
56585: ST_TO_ADDR
// hardcore :=  ;
56586: LD_ADDR_VAR 0 6
56590: PUSH
56591: LD_STRING 
56593: ST_TO_ADDR
// active :=  ;
56594: LD_ADDR_VAR 0 7
56598: PUSH
56599: LD_STRING 
56601: ST_TO_ADDR
// for i = 1 to normalCounter do
56602: LD_ADDR_VAR 0 8
56606: PUSH
56607: DOUBLE
56608: LD_INT 1
56610: DEC
56611: ST_TO_ADDR
56612: LD_EXP 107
56616: PUSH
56617: FOR_TO
56618: IFFALSE 56719
// begin tmp := 0 ;
56620: LD_ADDR_VAR 0 3
56624: PUSH
56625: LD_STRING 0
56627: ST_TO_ADDR
// if result [ 1 ] then
56628: LD_VAR 0 2
56632: PUSH
56633: LD_INT 1
56635: ARRAY
56636: IFFALSE 56701
// if result [ 1 ] [ 1 ] = i then
56638: LD_VAR 0 2
56642: PUSH
56643: LD_INT 1
56645: ARRAY
56646: PUSH
56647: LD_INT 1
56649: ARRAY
56650: PUSH
56651: LD_VAR 0 8
56655: EQUAL
56656: IFFALSE 56701
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
56658: LD_ADDR_VAR 0 2
56662: PUSH
56663: LD_VAR 0 2
56667: PPUSH
56668: LD_INT 1
56670: PPUSH
56671: LD_VAR 0 2
56675: PUSH
56676: LD_INT 1
56678: ARRAY
56679: PPUSH
56680: LD_INT 1
56682: PPUSH
56683: CALL_OW 3
56687: PPUSH
56688: CALL_OW 1
56692: ST_TO_ADDR
// tmp := 1 ;
56693: LD_ADDR_VAR 0 3
56697: PUSH
56698: LD_STRING 1
56700: ST_TO_ADDR
// end ; normal := normal & tmp ;
56701: LD_ADDR_VAR 0 5
56705: PUSH
56706: LD_VAR 0 5
56710: PUSH
56711: LD_VAR 0 3
56715: STR
56716: ST_TO_ADDR
// end ;
56717: GO 56617
56719: POP
56720: POP
// for i = 1 to hardcoreCounter do
56721: LD_ADDR_VAR 0 8
56725: PUSH
56726: DOUBLE
56727: LD_INT 1
56729: DEC
56730: ST_TO_ADDR
56731: LD_EXP 108
56735: PUSH
56736: FOR_TO
56737: IFFALSE 56842
// begin tmp := 0 ;
56739: LD_ADDR_VAR 0 3
56743: PUSH
56744: LD_STRING 0
56746: ST_TO_ADDR
// if result [ 2 ] then
56747: LD_VAR 0 2
56751: PUSH
56752: LD_INT 2
56754: ARRAY
56755: IFFALSE 56824
// if result [ 2 ] [ 1 ] = 100 + i then
56757: LD_VAR 0 2
56761: PUSH
56762: LD_INT 2
56764: ARRAY
56765: PUSH
56766: LD_INT 1
56768: ARRAY
56769: PUSH
56770: LD_INT 100
56772: PUSH
56773: LD_VAR 0 8
56777: PLUS
56778: EQUAL
56779: IFFALSE 56824
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
56781: LD_ADDR_VAR 0 2
56785: PUSH
56786: LD_VAR 0 2
56790: PPUSH
56791: LD_INT 2
56793: PPUSH
56794: LD_VAR 0 2
56798: PUSH
56799: LD_INT 2
56801: ARRAY
56802: PPUSH
56803: LD_INT 1
56805: PPUSH
56806: CALL_OW 3
56810: PPUSH
56811: CALL_OW 1
56815: ST_TO_ADDR
// tmp := 1 ;
56816: LD_ADDR_VAR 0 3
56820: PUSH
56821: LD_STRING 1
56823: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
56824: LD_ADDR_VAR 0 6
56828: PUSH
56829: LD_VAR 0 6
56833: PUSH
56834: LD_VAR 0 3
56838: STR
56839: ST_TO_ADDR
// end ;
56840: GO 56736
56842: POP
56843: POP
// if isGameLoad then
56844: LD_VAR 0 1
56848: IFFALSE 57323
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
56850: LD_ADDR_VAR 0 4
56854: PUSH
56855: LD_EXP 111
56859: PUSH
56860: LD_EXP 110
56864: PUSH
56865: LD_EXP 112
56869: PUSH
56870: LD_EXP 109
56874: PUSH
56875: LD_EXP 113
56879: PUSH
56880: LD_EXP 114
56884: PUSH
56885: LD_EXP 115
56889: PUSH
56890: LD_EXP 116
56894: PUSH
56895: LD_EXP 117
56899: PUSH
56900: LD_EXP 118
56904: PUSH
56905: LD_EXP 119
56909: PUSH
56910: LD_EXP 120
56914: PUSH
56915: LD_EXP 121
56919: PUSH
56920: LD_EXP 122
56924: PUSH
56925: LD_EXP 130
56929: PUSH
56930: LD_EXP 131
56934: PUSH
56935: LD_EXP 132
56939: PUSH
56940: LD_EXP 133
56944: PUSH
56945: LD_EXP 135
56949: PUSH
56950: LD_EXP 136
56954: PUSH
56955: LD_EXP 137
56959: PUSH
56960: LD_EXP 140
56964: PUSH
56965: LD_EXP 142
56969: PUSH
56970: LD_EXP 143
56974: PUSH
56975: LD_EXP 144
56979: PUSH
56980: LD_EXP 146
56984: PUSH
56985: LD_EXP 147
56989: PUSH
56990: LD_EXP 150
56994: PUSH
56995: LD_EXP 151
56999: PUSH
57000: LD_EXP 152
57004: PUSH
57005: LD_EXP 153
57009: PUSH
57010: LD_EXP 154
57014: PUSH
57015: LD_EXP 155
57019: PUSH
57020: LD_EXP 156
57024: PUSH
57025: LD_EXP 157
57029: PUSH
57030: LD_EXP 158
57034: PUSH
57035: LD_EXP 123
57039: PUSH
57040: LD_EXP 124
57044: PUSH
57045: LD_EXP 127
57049: PUSH
57050: LD_EXP 128
57054: PUSH
57055: LD_EXP 129
57059: PUSH
57060: LD_EXP 125
57064: PUSH
57065: LD_EXP 126
57069: PUSH
57070: LD_EXP 134
57074: PUSH
57075: LD_EXP 138
57079: PUSH
57080: LD_EXP 139
57084: PUSH
57085: LD_EXP 141
57089: PUSH
57090: LD_EXP 145
57094: PUSH
57095: LD_EXP 148
57099: PUSH
57100: LD_EXP 149
57104: PUSH
57105: LD_EXP 159
57109: PUSH
57110: LD_EXP 160
57114: PUSH
57115: LD_EXP 161
57119: PUSH
57120: LD_EXP 162
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: ST_TO_ADDR
// tmp :=  ;
57181: LD_ADDR_VAR 0 3
57185: PUSH
57186: LD_STRING 
57188: ST_TO_ADDR
// for i = 1 to normalCounter do
57189: LD_ADDR_VAR 0 8
57193: PUSH
57194: DOUBLE
57195: LD_INT 1
57197: DEC
57198: ST_TO_ADDR
57199: LD_EXP 107
57203: PUSH
57204: FOR_TO
57205: IFFALSE 57241
// begin if flags [ i ] then
57207: LD_VAR 0 4
57211: PUSH
57212: LD_VAR 0 8
57216: ARRAY
57217: IFFALSE 57239
// tmp := tmp & i & ; ;
57219: LD_ADDR_VAR 0 3
57223: PUSH
57224: LD_VAR 0 3
57228: PUSH
57229: LD_VAR 0 8
57233: STR
57234: PUSH
57235: LD_STRING ;
57237: STR
57238: ST_TO_ADDR
// end ;
57239: GO 57204
57241: POP
57242: POP
// for i = 1 to hardcoreCounter do
57243: LD_ADDR_VAR 0 8
57247: PUSH
57248: DOUBLE
57249: LD_INT 1
57251: DEC
57252: ST_TO_ADDR
57253: LD_EXP 108
57257: PUSH
57258: FOR_TO
57259: IFFALSE 57305
// begin if flags [ normalCounter + i ] then
57261: LD_VAR 0 4
57265: PUSH
57266: LD_EXP 107
57270: PUSH
57271: LD_VAR 0 8
57275: PLUS
57276: ARRAY
57277: IFFALSE 57303
// tmp := tmp & ( 100 + i ) & ; ;
57279: LD_ADDR_VAR 0 3
57283: PUSH
57284: LD_VAR 0 3
57288: PUSH
57289: LD_INT 100
57291: PUSH
57292: LD_VAR 0 8
57296: PLUS
57297: STR
57298: PUSH
57299: LD_STRING ;
57301: STR
57302: ST_TO_ADDR
// end ;
57303: GO 57258
57305: POP
57306: POP
// if tmp then
57307: LD_VAR 0 3
57311: IFFALSE 57323
// active := tmp ;
57313: LD_ADDR_VAR 0 7
57317: PUSH
57318: LD_VAR 0 3
57322: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
57323: LD_STRING getStreamItemsFromMission("
57325: PUSH
57326: LD_VAR 0 5
57330: STR
57331: PUSH
57332: LD_STRING ","
57334: STR
57335: PUSH
57336: LD_VAR 0 6
57340: STR
57341: PUSH
57342: LD_STRING ","
57344: STR
57345: PUSH
57346: LD_VAR 0 7
57350: STR
57351: PUSH
57352: LD_STRING ")
57354: STR
57355: PPUSH
57356: CALL_OW 559
// end else
57360: GO 57369
// ToLua ( getStreamItemsFromMission("","","") ) ;
57362: LD_STRING getStreamItemsFromMission("","","")
57364: PPUSH
57365: CALL_OW 559
// end ;
57369: LD_VAR 0 2
57373: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
57374: LD_EXP 106
57378: PUSH
57379: LD_EXP 111
57383: AND
57384: IFFALSE 57508
57386: GO 57388
57388: DISABLE
57389: LD_INT 0
57391: PPUSH
57392: PPUSH
// begin enable ;
57393: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
57394: LD_ADDR_VAR 0 2
57398: PUSH
57399: LD_INT 22
57401: PUSH
57402: LD_OWVAR 2
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 34
57416: PUSH
57417: LD_INT 7
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 34
57426: PUSH
57427: LD_INT 45
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 34
57436: PUSH
57437: LD_INT 28
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 34
57446: PUSH
57447: LD_INT 47
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PPUSH
57465: CALL_OW 69
57469: ST_TO_ADDR
// if not tmp then
57470: LD_VAR 0 2
57474: NOT
57475: IFFALSE 57479
// exit ;
57477: GO 57508
// for i in tmp do
57479: LD_ADDR_VAR 0 1
57483: PUSH
57484: LD_VAR 0 2
57488: PUSH
57489: FOR_IN
57490: IFFALSE 57506
// begin SetLives ( i , 0 ) ;
57492: LD_VAR 0 1
57496: PPUSH
57497: LD_INT 0
57499: PPUSH
57500: CALL_OW 234
// end ;
57504: GO 57489
57506: POP
57507: POP
// end ;
57508: PPOPN 2
57510: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57511: LD_EXP 106
57515: PUSH
57516: LD_EXP 112
57520: AND
57521: IFFALSE 57605
57523: GO 57525
57525: DISABLE
57526: LD_INT 0
57528: PPUSH
57529: PPUSH
// begin enable ;
57530: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57531: LD_ADDR_VAR 0 2
57535: PUSH
57536: LD_INT 22
57538: PUSH
57539: LD_OWVAR 2
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 32
57550: PUSH
57551: LD_INT 3
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PPUSH
57562: CALL_OW 69
57566: ST_TO_ADDR
// if not tmp then
57567: LD_VAR 0 2
57571: NOT
57572: IFFALSE 57576
// exit ;
57574: GO 57605
// for i in tmp do
57576: LD_ADDR_VAR 0 1
57580: PUSH
57581: LD_VAR 0 2
57585: PUSH
57586: FOR_IN
57587: IFFALSE 57603
// begin SetLives ( i , 0 ) ;
57589: LD_VAR 0 1
57593: PPUSH
57594: LD_INT 0
57596: PPUSH
57597: CALL_OW 234
// end ;
57601: GO 57586
57603: POP
57604: POP
// end ;
57605: PPOPN 2
57607: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
57608: LD_EXP 106
57612: PUSH
57613: LD_EXP 109
57617: AND
57618: IFFALSE 57711
57620: GO 57622
57622: DISABLE
57623: LD_INT 0
57625: PPUSH
// begin enable ;
57626: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
57627: LD_ADDR_VAR 0 1
57631: PUSH
57632: LD_INT 22
57634: PUSH
57635: LD_OWVAR 2
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: PUSH
57647: LD_INT 25
57649: PUSH
57650: LD_INT 5
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 25
57659: PUSH
57660: LD_INT 9
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 25
57669: PUSH
57670: LD_INT 8
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PPUSH
57687: CALL_OW 69
57691: PUSH
57692: FOR_IN
57693: IFFALSE 57709
// begin SetClass ( i , 1 ) ;
57695: LD_VAR 0 1
57699: PPUSH
57700: LD_INT 1
57702: PPUSH
57703: CALL_OW 336
// end ;
57707: GO 57692
57709: POP
57710: POP
// end ;
57711: PPOPN 1
57713: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
57714: LD_EXP 106
57718: PUSH
57719: LD_EXP 110
57723: AND
57724: PUSH
57725: LD_OWVAR 65
57729: PUSH
57730: LD_INT 7
57732: LESS
57733: AND
57734: IFFALSE 57748
57736: GO 57738
57738: DISABLE
// begin enable ;
57739: ENABLE
// game_speed := 7 ;
57740: LD_ADDR_OWVAR 65
57744: PUSH
57745: LD_INT 7
57747: ST_TO_ADDR
// end ;
57748: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
57749: LD_EXP 106
57753: PUSH
57754: LD_EXP 113
57758: AND
57759: IFFALSE 57961
57761: GO 57763
57763: DISABLE
57764: LD_INT 0
57766: PPUSH
57767: PPUSH
57768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57769: LD_ADDR_VAR 0 3
57773: PUSH
57774: LD_INT 81
57776: PUSH
57777: LD_OWVAR 2
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 21
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PPUSH
57800: CALL_OW 69
57804: ST_TO_ADDR
// if not tmp then
57805: LD_VAR 0 3
57809: NOT
57810: IFFALSE 57814
// exit ;
57812: GO 57961
// if tmp > 5 then
57814: LD_VAR 0 3
57818: PUSH
57819: LD_INT 5
57821: GREATER
57822: IFFALSE 57834
// k := 5 else
57824: LD_ADDR_VAR 0 2
57828: PUSH
57829: LD_INT 5
57831: ST_TO_ADDR
57832: GO 57844
// k := tmp ;
57834: LD_ADDR_VAR 0 2
57838: PUSH
57839: LD_VAR 0 3
57843: ST_TO_ADDR
// for i := 1 to k do
57844: LD_ADDR_VAR 0 1
57848: PUSH
57849: DOUBLE
57850: LD_INT 1
57852: DEC
57853: ST_TO_ADDR
57854: LD_VAR 0 2
57858: PUSH
57859: FOR_TO
57860: IFFALSE 57959
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
57862: LD_VAR 0 3
57866: PUSH
57867: LD_VAR 0 1
57871: ARRAY
57872: PPUSH
57873: LD_VAR 0 1
57877: PUSH
57878: LD_INT 4
57880: MOD
57881: PUSH
57882: LD_INT 1
57884: PLUS
57885: PPUSH
57886: CALL_OW 259
57890: PUSH
57891: LD_INT 10
57893: LESS
57894: IFFALSE 57957
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
57896: LD_VAR 0 3
57900: PUSH
57901: LD_VAR 0 1
57905: ARRAY
57906: PPUSH
57907: LD_VAR 0 1
57911: PUSH
57912: LD_INT 4
57914: MOD
57915: PUSH
57916: LD_INT 1
57918: PLUS
57919: PPUSH
57920: LD_VAR 0 3
57924: PUSH
57925: LD_VAR 0 1
57929: ARRAY
57930: PPUSH
57931: LD_VAR 0 1
57935: PUSH
57936: LD_INT 4
57938: MOD
57939: PUSH
57940: LD_INT 1
57942: PLUS
57943: PPUSH
57944: CALL_OW 259
57948: PUSH
57949: LD_INT 1
57951: PLUS
57952: PPUSH
57953: CALL_OW 237
57957: GO 57859
57959: POP
57960: POP
// end ;
57961: PPOPN 3
57963: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
57964: LD_EXP 106
57968: PUSH
57969: LD_EXP 114
57973: AND
57974: IFFALSE 57994
57976: GO 57978
57978: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
57979: LD_INT 4
57981: PPUSH
57982: LD_OWVAR 2
57986: PPUSH
57987: LD_INT 0
57989: PPUSH
57990: CALL_OW 324
57994: END
// every 0 0$1 trigger StreamModeActive and sShovel do
57995: LD_EXP 106
57999: PUSH
58000: LD_EXP 143
58004: AND
58005: IFFALSE 58025
58007: GO 58009
58009: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
58010: LD_INT 19
58012: PPUSH
58013: LD_OWVAR 2
58017: PPUSH
58018: LD_INT 0
58020: PPUSH
58021: CALL_OW 324
58025: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
58026: LD_EXP 106
58030: PUSH
58031: LD_EXP 115
58035: AND
58036: IFFALSE 58138
58038: GO 58040
58040: DISABLE
58041: LD_INT 0
58043: PPUSH
58044: PPUSH
// begin enable ;
58045: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
58046: LD_ADDR_VAR 0 2
58050: PUSH
58051: LD_INT 22
58053: PUSH
58054: LD_OWVAR 2
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 34
58068: PUSH
58069: LD_INT 11
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 34
58078: PUSH
58079: LD_INT 30
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: LIST
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PPUSH
58095: CALL_OW 69
58099: ST_TO_ADDR
// if not tmp then
58100: LD_VAR 0 2
58104: NOT
58105: IFFALSE 58109
// exit ;
58107: GO 58138
// for i in tmp do
58109: LD_ADDR_VAR 0 1
58113: PUSH
58114: LD_VAR 0 2
58118: PUSH
58119: FOR_IN
58120: IFFALSE 58136
// begin SetLives ( i , 0 ) ;
58122: LD_VAR 0 1
58126: PPUSH
58127: LD_INT 0
58129: PPUSH
58130: CALL_OW 234
// end ;
58134: GO 58119
58136: POP
58137: POP
// end ;
58138: PPOPN 2
58140: END
// every 0 0$1 trigger StreamModeActive and sBunker do
58141: LD_EXP 106
58145: PUSH
58146: LD_EXP 116
58150: AND
58151: IFFALSE 58171
58153: GO 58155
58155: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
58156: LD_INT 32
58158: PPUSH
58159: LD_OWVAR 2
58163: PPUSH
58164: LD_INT 0
58166: PPUSH
58167: CALL_OW 324
58171: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
58172: LD_EXP 106
58176: PUSH
58177: LD_EXP 117
58181: AND
58182: IFFALSE 58363
58184: GO 58186
58186: DISABLE
58187: LD_INT 0
58189: PPUSH
58190: PPUSH
58191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
58192: LD_ADDR_VAR 0 2
58196: PUSH
58197: LD_INT 22
58199: PUSH
58200: LD_OWVAR 2
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 33
58211: PUSH
58212: LD_INT 3
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PPUSH
58223: CALL_OW 69
58227: ST_TO_ADDR
// if not tmp then
58228: LD_VAR 0 2
58232: NOT
58233: IFFALSE 58237
// exit ;
58235: GO 58363
// side := 0 ;
58237: LD_ADDR_VAR 0 3
58241: PUSH
58242: LD_INT 0
58244: ST_TO_ADDR
// for i := 1 to 8 do
58245: LD_ADDR_VAR 0 1
58249: PUSH
58250: DOUBLE
58251: LD_INT 1
58253: DEC
58254: ST_TO_ADDR
58255: LD_INT 8
58257: PUSH
58258: FOR_TO
58259: IFFALSE 58307
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
58261: LD_OWVAR 2
58265: PUSH
58266: LD_VAR 0 1
58270: NONEQUAL
58271: PUSH
58272: LD_OWVAR 2
58276: PPUSH
58277: LD_VAR 0 1
58281: PPUSH
58282: CALL_OW 81
58286: PUSH
58287: LD_INT 2
58289: EQUAL
58290: AND
58291: IFFALSE 58305
// begin side := i ;
58293: LD_ADDR_VAR 0 3
58297: PUSH
58298: LD_VAR 0 1
58302: ST_TO_ADDR
// break ;
58303: GO 58307
// end ;
58305: GO 58258
58307: POP
58308: POP
// if not side then
58309: LD_VAR 0 3
58313: NOT
58314: IFFALSE 58318
// exit ;
58316: GO 58363
// for i := 1 to tmp do
58318: LD_ADDR_VAR 0 1
58322: PUSH
58323: DOUBLE
58324: LD_INT 1
58326: DEC
58327: ST_TO_ADDR
58328: LD_VAR 0 2
58332: PUSH
58333: FOR_TO
58334: IFFALSE 58361
// if Prob ( 60 ) then
58336: LD_INT 60
58338: PPUSH
58339: CALL_OW 13
58343: IFFALSE 58359
// SetSide ( i , side ) ;
58345: LD_VAR 0 1
58349: PPUSH
58350: LD_VAR 0 3
58354: PPUSH
58355: CALL_OW 235
58359: GO 58333
58361: POP
58362: POP
// end ;
58363: PPOPN 3
58365: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
58366: LD_EXP 106
58370: PUSH
58371: LD_EXP 119
58375: AND
58376: IFFALSE 58495
58378: GO 58380
58380: DISABLE
58381: LD_INT 0
58383: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
58384: LD_ADDR_VAR 0 1
58388: PUSH
58389: LD_INT 22
58391: PUSH
58392: LD_OWVAR 2
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 21
58403: PUSH
58404: LD_INT 1
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 3
58413: PUSH
58414: LD_INT 23
58416: PUSH
58417: LD_INT 0
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: LIST
58432: PPUSH
58433: CALL_OW 69
58437: PUSH
58438: FOR_IN
58439: IFFALSE 58493
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58441: LD_VAR 0 1
58445: PPUSH
58446: CALL_OW 257
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: LD_INT 4
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: IN
58469: IFFALSE 58491
// SetClass ( un , rand ( 1 , 4 ) ) ;
58471: LD_VAR 0 1
58475: PPUSH
58476: LD_INT 1
58478: PPUSH
58479: LD_INT 4
58481: PPUSH
58482: CALL_OW 12
58486: PPUSH
58487: CALL_OW 336
58491: GO 58438
58493: POP
58494: POP
// end ;
58495: PPOPN 1
58497: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58498: LD_EXP 106
58502: PUSH
58503: LD_EXP 118
58507: AND
58508: IFFALSE 58587
58510: GO 58512
58512: DISABLE
58513: LD_INT 0
58515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58516: LD_ADDR_VAR 0 1
58520: PUSH
58521: LD_INT 22
58523: PUSH
58524: LD_OWVAR 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 21
58535: PUSH
58536: LD_INT 3
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PPUSH
58547: CALL_OW 69
58551: ST_TO_ADDR
// if not tmp then
58552: LD_VAR 0 1
58556: NOT
58557: IFFALSE 58561
// exit ;
58559: GO 58587
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58561: LD_VAR 0 1
58565: PUSH
58566: LD_INT 1
58568: PPUSH
58569: LD_VAR 0 1
58573: PPUSH
58574: CALL_OW 12
58578: ARRAY
58579: PPUSH
58580: LD_INT 100
58582: PPUSH
58583: CALL_OW 234
// end ;
58587: PPOPN 1
58589: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
58590: LD_EXP 106
58594: PUSH
58595: LD_EXP 120
58599: AND
58600: IFFALSE 58698
58602: GO 58604
58604: DISABLE
58605: LD_INT 0
58607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58608: LD_ADDR_VAR 0 1
58612: PUSH
58613: LD_INT 22
58615: PUSH
58616: LD_OWVAR 2
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 21
58627: PUSH
58628: LD_INT 1
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PPUSH
58639: CALL_OW 69
58643: ST_TO_ADDR
// if not tmp then
58644: LD_VAR 0 1
58648: NOT
58649: IFFALSE 58653
// exit ;
58651: GO 58698
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
58653: LD_VAR 0 1
58657: PUSH
58658: LD_INT 1
58660: PPUSH
58661: LD_VAR 0 1
58665: PPUSH
58666: CALL_OW 12
58670: ARRAY
58671: PPUSH
58672: LD_INT 1
58674: PPUSH
58675: LD_INT 4
58677: PPUSH
58678: CALL_OW 12
58682: PPUSH
58683: LD_INT 3000
58685: PPUSH
58686: LD_INT 9000
58688: PPUSH
58689: CALL_OW 12
58693: PPUSH
58694: CALL_OW 492
// end ;
58698: PPOPN 1
58700: END
// every 0 0$1 trigger StreamModeActive and sDepot do
58701: LD_EXP 106
58705: PUSH
58706: LD_EXP 121
58710: AND
58711: IFFALSE 58731
58713: GO 58715
58715: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
58716: LD_INT 1
58718: PPUSH
58719: LD_OWVAR 2
58723: PPUSH
58724: LD_INT 0
58726: PPUSH
58727: CALL_OW 324
58731: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
58732: LD_EXP 106
58736: PUSH
58737: LD_EXP 122
58741: AND
58742: IFFALSE 58825
58744: GO 58746
58746: DISABLE
58747: LD_INT 0
58749: PPUSH
58750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58751: LD_ADDR_VAR 0 2
58755: PUSH
58756: LD_INT 22
58758: PUSH
58759: LD_OWVAR 2
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 21
58770: PUSH
58771: LD_INT 3
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PPUSH
58782: CALL_OW 69
58786: ST_TO_ADDR
// if not tmp then
58787: LD_VAR 0 2
58791: NOT
58792: IFFALSE 58796
// exit ;
58794: GO 58825
// for i in tmp do
58796: LD_ADDR_VAR 0 1
58800: PUSH
58801: LD_VAR 0 2
58805: PUSH
58806: FOR_IN
58807: IFFALSE 58823
// SetBLevel ( i , 10 ) ;
58809: LD_VAR 0 1
58813: PPUSH
58814: LD_INT 10
58816: PPUSH
58817: CALL_OW 241
58821: GO 58806
58823: POP
58824: POP
// end ;
58825: PPOPN 2
58827: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
58828: LD_EXP 106
58832: PUSH
58833: LD_EXP 123
58837: AND
58838: IFFALSE 58949
58840: GO 58842
58842: DISABLE
58843: LD_INT 0
58845: PPUSH
58846: PPUSH
58847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58848: LD_ADDR_VAR 0 3
58852: PUSH
58853: LD_INT 22
58855: PUSH
58856: LD_OWVAR 2
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 25
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PPUSH
58879: CALL_OW 69
58883: ST_TO_ADDR
// if not tmp then
58884: LD_VAR 0 3
58888: NOT
58889: IFFALSE 58893
// exit ;
58891: GO 58949
// un := tmp [ rand ( 1 , tmp ) ] ;
58893: LD_ADDR_VAR 0 2
58897: PUSH
58898: LD_VAR 0 3
58902: PUSH
58903: LD_INT 1
58905: PPUSH
58906: LD_VAR 0 3
58910: PPUSH
58911: CALL_OW 12
58915: ARRAY
58916: ST_TO_ADDR
// if Crawls ( un ) then
58917: LD_VAR 0 2
58921: PPUSH
58922: CALL_OW 318
58926: IFFALSE 58937
// ComWalk ( un ) ;
58928: LD_VAR 0 2
58932: PPUSH
58933: CALL_OW 138
// SetClass ( un , class_sniper ) ;
58937: LD_VAR 0 2
58941: PPUSH
58942: LD_INT 5
58944: PPUSH
58945: CALL_OW 336
// end ;
58949: PPOPN 3
58951: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
58952: LD_EXP 106
58956: PUSH
58957: LD_EXP 124
58961: AND
58962: PUSH
58963: LD_OWVAR 67
58967: PUSH
58968: LD_INT 4
58970: LESS
58971: AND
58972: IFFALSE 58991
58974: GO 58976
58976: DISABLE
// begin Difficulty := Difficulty + 1 ;
58977: LD_ADDR_OWVAR 67
58981: PUSH
58982: LD_OWVAR 67
58986: PUSH
58987: LD_INT 1
58989: PLUS
58990: ST_TO_ADDR
// end ;
58991: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
58992: LD_EXP 106
58996: PUSH
58997: LD_EXP 125
59001: AND
59002: IFFALSE 59105
59004: GO 59006
59006: DISABLE
59007: LD_INT 0
59009: PPUSH
// begin for i := 1 to 5 do
59010: LD_ADDR_VAR 0 1
59014: PUSH
59015: DOUBLE
59016: LD_INT 1
59018: DEC
59019: ST_TO_ADDR
59020: LD_INT 5
59022: PUSH
59023: FOR_TO
59024: IFFALSE 59103
// begin uc_nation := nation_nature ;
59026: LD_ADDR_OWVAR 21
59030: PUSH
59031: LD_INT 0
59033: ST_TO_ADDR
// uc_side := 0 ;
59034: LD_ADDR_OWVAR 20
59038: PUSH
59039: LD_INT 0
59041: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59042: LD_ADDR_OWVAR 29
59046: PUSH
59047: LD_INT 12
59049: PUSH
59050: LD_INT 12
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: ST_TO_ADDR
// hc_agressivity := 20 ;
59057: LD_ADDR_OWVAR 35
59061: PUSH
59062: LD_INT 20
59064: ST_TO_ADDR
// hc_class := class_tiger ;
59065: LD_ADDR_OWVAR 28
59069: PUSH
59070: LD_INT 14
59072: ST_TO_ADDR
// hc_gallery :=  ;
59073: LD_ADDR_OWVAR 33
59077: PUSH
59078: LD_STRING 
59080: ST_TO_ADDR
// hc_name :=  ;
59081: LD_ADDR_OWVAR 26
59085: PUSH
59086: LD_STRING 
59088: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59089: CALL_OW 44
59093: PPUSH
59094: LD_INT 0
59096: PPUSH
59097: CALL_OW 51
// end ;
59101: GO 59023
59103: POP
59104: POP
// end ;
59105: PPOPN 1
59107: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59108: LD_EXP 106
59112: PUSH
59113: LD_EXP 126
59117: AND
59118: IFFALSE 59127
59120: GO 59122
59122: DISABLE
// StreamSibBomb ;
59123: CALL 59128 0 0
59127: END
// export function StreamSibBomb ; var i , x , y ; begin
59128: LD_INT 0
59130: PPUSH
59131: PPUSH
59132: PPUSH
59133: PPUSH
// result := false ;
59134: LD_ADDR_VAR 0 1
59138: PUSH
59139: LD_INT 0
59141: ST_TO_ADDR
// for i := 1 to 16 do
59142: LD_ADDR_VAR 0 2
59146: PUSH
59147: DOUBLE
59148: LD_INT 1
59150: DEC
59151: ST_TO_ADDR
59152: LD_INT 16
59154: PUSH
59155: FOR_TO
59156: IFFALSE 59355
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59158: LD_ADDR_VAR 0 3
59162: PUSH
59163: LD_INT 10
59165: PUSH
59166: LD_INT 20
59168: PUSH
59169: LD_INT 30
59171: PUSH
59172: LD_INT 40
59174: PUSH
59175: LD_INT 50
59177: PUSH
59178: LD_INT 60
59180: PUSH
59181: LD_INT 70
59183: PUSH
59184: LD_INT 80
59186: PUSH
59187: LD_INT 90
59189: PUSH
59190: LD_INT 100
59192: PUSH
59193: LD_INT 110
59195: PUSH
59196: LD_INT 120
59198: PUSH
59199: LD_INT 130
59201: PUSH
59202: LD_INT 140
59204: PUSH
59205: LD_INT 150
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PPUSH
59228: LD_INT 15
59230: PPUSH
59231: CALL_OW 12
59235: ARRAY
59236: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59237: LD_ADDR_VAR 0 4
59241: PUSH
59242: LD_INT 10
59244: PUSH
59245: LD_INT 20
59247: PUSH
59248: LD_INT 30
59250: PUSH
59251: LD_INT 40
59253: PUSH
59254: LD_INT 50
59256: PUSH
59257: LD_INT 60
59259: PUSH
59260: LD_INT 70
59262: PUSH
59263: LD_INT 80
59265: PUSH
59266: LD_INT 90
59268: PUSH
59269: LD_INT 100
59271: PUSH
59272: LD_INT 110
59274: PUSH
59275: LD_INT 120
59277: PUSH
59278: LD_INT 130
59280: PUSH
59281: LD_INT 140
59283: PUSH
59284: LD_INT 150
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 1
59306: PPUSH
59307: LD_INT 15
59309: PPUSH
59310: CALL_OW 12
59314: ARRAY
59315: ST_TO_ADDR
// if ValidHex ( x , y ) then
59316: LD_VAR 0 3
59320: PPUSH
59321: LD_VAR 0 4
59325: PPUSH
59326: CALL_OW 488
59330: IFFALSE 59353
// begin result := [ x , y ] ;
59332: LD_ADDR_VAR 0 1
59336: PUSH
59337: LD_VAR 0 3
59341: PUSH
59342: LD_VAR 0 4
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: ST_TO_ADDR
// break ;
59351: GO 59355
// end ; end ;
59353: GO 59155
59355: POP
59356: POP
// if result then
59357: LD_VAR 0 1
59361: IFFALSE 59421
// begin ToLua ( playSibBomb() ) ;
59363: LD_STRING playSibBomb()
59365: PPUSH
59366: CALL_OW 559
// wait ( 0 0$14 ) ;
59370: LD_INT 490
59372: PPUSH
59373: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
59377: LD_VAR 0 1
59381: PUSH
59382: LD_INT 1
59384: ARRAY
59385: PPUSH
59386: LD_VAR 0 1
59390: PUSH
59391: LD_INT 2
59393: ARRAY
59394: PPUSH
59395: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
59399: LD_VAR 0 1
59403: PUSH
59404: LD_INT 1
59406: ARRAY
59407: PPUSH
59408: LD_VAR 0 1
59412: PUSH
59413: LD_INT 2
59415: ARRAY
59416: PPUSH
59417: CALL_OW 429
// end ; end ;
59421: LD_VAR 0 1
59425: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59426: LD_EXP 106
59430: PUSH
59431: LD_EXP 128
59435: AND
59436: IFFALSE 59448
59438: GO 59440
59440: DISABLE
// YouLost (  ) ;
59441: LD_STRING 
59443: PPUSH
59444: CALL_OW 104
59448: END
// every 0 0$1 trigger StreamModeActive and sFog do
59449: LD_EXP 106
59453: PUSH
59454: LD_EXP 127
59458: AND
59459: IFFALSE 59473
59461: GO 59463
59463: DISABLE
// FogOff ( your_side ) ;
59464: LD_OWVAR 2
59468: PPUSH
59469: CALL_OW 344
59473: END
// every 0 0$1 trigger StreamModeActive and sSun do
59474: LD_EXP 106
59478: PUSH
59479: LD_EXP 129
59483: AND
59484: IFFALSE 59512
59486: GO 59488
59488: DISABLE
// begin solar_recharge_percent := 0 ;
59489: LD_ADDR_OWVAR 79
59493: PUSH
59494: LD_INT 0
59496: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59497: LD_INT 10500
59499: PPUSH
59500: CALL_OW 67
// solar_recharge_percent := 100 ;
59504: LD_ADDR_OWVAR 79
59508: PUSH
59509: LD_INT 100
59511: ST_TO_ADDR
// end ;
59512: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59513: LD_EXP 106
59517: PUSH
59518: LD_EXP 130
59522: AND
59523: IFFALSE 59762
59525: GO 59527
59527: DISABLE
59528: LD_INT 0
59530: PPUSH
59531: PPUSH
59532: PPUSH
// begin tmp := [ ] ;
59533: LD_ADDR_VAR 0 3
59537: PUSH
59538: EMPTY
59539: ST_TO_ADDR
// for i := 1 to 6 do
59540: LD_ADDR_VAR 0 1
59544: PUSH
59545: DOUBLE
59546: LD_INT 1
59548: DEC
59549: ST_TO_ADDR
59550: LD_INT 6
59552: PUSH
59553: FOR_TO
59554: IFFALSE 59659
// begin uc_nation := nation_nature ;
59556: LD_ADDR_OWVAR 21
59560: PUSH
59561: LD_INT 0
59563: ST_TO_ADDR
// uc_side := 0 ;
59564: LD_ADDR_OWVAR 20
59568: PUSH
59569: LD_INT 0
59571: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59572: LD_ADDR_OWVAR 29
59576: PUSH
59577: LD_INT 12
59579: PUSH
59580: LD_INT 12
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: ST_TO_ADDR
// hc_agressivity := 20 ;
59587: LD_ADDR_OWVAR 35
59591: PUSH
59592: LD_INT 20
59594: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
59595: LD_ADDR_OWVAR 28
59599: PUSH
59600: LD_INT 17
59602: ST_TO_ADDR
// hc_gallery :=  ;
59603: LD_ADDR_OWVAR 33
59607: PUSH
59608: LD_STRING 
59610: ST_TO_ADDR
// hc_name :=  ;
59611: LD_ADDR_OWVAR 26
59615: PUSH
59616: LD_STRING 
59618: ST_TO_ADDR
// un := CreateHuman ;
59619: LD_ADDR_VAR 0 2
59623: PUSH
59624: CALL_OW 44
59628: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
59629: LD_VAR 0 2
59633: PPUSH
59634: LD_INT 1
59636: PPUSH
59637: CALL_OW 51
// tmp := tmp ^ un ;
59641: LD_ADDR_VAR 0 3
59645: PUSH
59646: LD_VAR 0 3
59650: PUSH
59651: LD_VAR 0 2
59655: ADD
59656: ST_TO_ADDR
// end ;
59657: GO 59553
59659: POP
59660: POP
// repeat wait ( 0 0$1 ) ;
59661: LD_INT 35
59663: PPUSH
59664: CALL_OW 67
// for un in tmp do
59668: LD_ADDR_VAR 0 2
59672: PUSH
59673: LD_VAR 0 3
59677: PUSH
59678: FOR_IN
59679: IFFALSE 59753
// begin if IsDead ( un ) then
59681: LD_VAR 0 2
59685: PPUSH
59686: CALL_OW 301
59690: IFFALSE 59710
// begin tmp := tmp diff un ;
59692: LD_ADDR_VAR 0 3
59696: PUSH
59697: LD_VAR 0 3
59701: PUSH
59702: LD_VAR 0 2
59706: DIFF
59707: ST_TO_ADDR
// continue ;
59708: GO 59678
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
59710: LD_VAR 0 2
59714: PPUSH
59715: LD_INT 3
59717: PUSH
59718: LD_INT 22
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PPUSH
59732: CALL_OW 69
59736: PPUSH
59737: LD_VAR 0 2
59741: PPUSH
59742: CALL_OW 74
59746: PPUSH
59747: CALL_OW 115
// end ;
59751: GO 59678
59753: POP
59754: POP
// until not tmp ;
59755: LD_VAR 0 3
59759: NOT
59760: IFFALSE 59661
// end ;
59762: PPOPN 3
59764: END
// every 0 0$1 trigger StreamModeActive and sTroll do
59765: LD_EXP 106
59769: PUSH
59770: LD_EXP 131
59774: AND
59775: IFFALSE 59829
59777: GO 59779
59779: DISABLE
// begin ToLua ( displayTroll(); ) ;
59780: LD_STRING displayTroll();
59782: PPUSH
59783: CALL_OW 559
// wait ( 3 3$00 ) ;
59787: LD_INT 6300
59789: PPUSH
59790: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59794: LD_STRING hideTroll();
59796: PPUSH
59797: CALL_OW 559
// wait ( 1 1$00 ) ;
59801: LD_INT 2100
59803: PPUSH
59804: CALL_OW 67
// ToLua ( displayTroll(); ) ;
59808: LD_STRING displayTroll();
59810: PPUSH
59811: CALL_OW 559
// wait ( 1 1$00 ) ;
59815: LD_INT 2100
59817: PPUSH
59818: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59822: LD_STRING hideTroll();
59824: PPUSH
59825: CALL_OW 559
// end ;
59829: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
59830: LD_EXP 106
59834: PUSH
59835: LD_EXP 132
59839: AND
59840: IFFALSE 59903
59842: GO 59844
59844: DISABLE
59845: LD_INT 0
59847: PPUSH
// begin p := 0 ;
59848: LD_ADDR_VAR 0 1
59852: PUSH
59853: LD_INT 0
59855: ST_TO_ADDR
// repeat game_speed := 1 ;
59856: LD_ADDR_OWVAR 65
59860: PUSH
59861: LD_INT 1
59863: ST_TO_ADDR
// wait ( 0 0$1 ) ;
59864: LD_INT 35
59866: PPUSH
59867: CALL_OW 67
// p := p + 1 ;
59871: LD_ADDR_VAR 0 1
59875: PUSH
59876: LD_VAR 0 1
59880: PUSH
59881: LD_INT 1
59883: PLUS
59884: ST_TO_ADDR
// until p >= 60 ;
59885: LD_VAR 0 1
59889: PUSH
59890: LD_INT 60
59892: GREATEREQUAL
59893: IFFALSE 59856
// game_speed := 4 ;
59895: LD_ADDR_OWVAR 65
59899: PUSH
59900: LD_INT 4
59902: ST_TO_ADDR
// end ;
59903: PPOPN 1
59905: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
59906: LD_EXP 106
59910: PUSH
59911: LD_EXP 133
59915: AND
59916: IFFALSE 60062
59918: GO 59920
59920: DISABLE
59921: LD_INT 0
59923: PPUSH
59924: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59925: LD_ADDR_VAR 0 1
59929: PUSH
59930: LD_INT 22
59932: PUSH
59933: LD_OWVAR 2
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 30
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 30
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: LIST
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PPUSH
59974: CALL_OW 69
59978: ST_TO_ADDR
// if not depot then
59979: LD_VAR 0 1
59983: NOT
59984: IFFALSE 59988
// exit ;
59986: GO 60062
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59988: LD_ADDR_VAR 0 2
59992: PUSH
59993: LD_VAR 0 1
59997: PUSH
59998: LD_INT 1
60000: PPUSH
60001: LD_VAR 0 1
60005: PPUSH
60006: CALL_OW 12
60010: ARRAY
60011: PPUSH
60012: CALL_OW 274
60016: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
60017: LD_VAR 0 2
60021: PPUSH
60022: LD_INT 1
60024: PPUSH
60025: LD_INT 0
60027: PPUSH
60028: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
60032: LD_VAR 0 2
60036: PPUSH
60037: LD_INT 2
60039: PPUSH
60040: LD_INT 0
60042: PPUSH
60043: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
60047: LD_VAR 0 2
60051: PPUSH
60052: LD_INT 3
60054: PPUSH
60055: LD_INT 0
60057: PPUSH
60058: CALL_OW 277
// end ;
60062: PPOPN 2
60064: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60065: LD_EXP 106
60069: PUSH
60070: LD_EXP 134
60074: AND
60075: IFFALSE 60172
60077: GO 60079
60079: DISABLE
60080: LD_INT 0
60082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60083: LD_ADDR_VAR 0 1
60087: PUSH
60088: LD_INT 22
60090: PUSH
60091: LD_OWVAR 2
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 21
60102: PUSH
60103: LD_INT 1
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 3
60112: PUSH
60113: LD_INT 23
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: LIST
60131: PPUSH
60132: CALL_OW 69
60136: ST_TO_ADDR
// if not tmp then
60137: LD_VAR 0 1
60141: NOT
60142: IFFALSE 60146
// exit ;
60144: GO 60172
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
60146: LD_VAR 0 1
60150: PUSH
60151: LD_INT 1
60153: PPUSH
60154: LD_VAR 0 1
60158: PPUSH
60159: CALL_OW 12
60163: ARRAY
60164: PPUSH
60165: LD_INT 200
60167: PPUSH
60168: CALL_OW 234
// end ;
60172: PPOPN 1
60174: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
60175: LD_EXP 106
60179: PUSH
60180: LD_EXP 135
60184: AND
60185: IFFALSE 60264
60187: GO 60189
60189: DISABLE
60190: LD_INT 0
60192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
60193: LD_ADDR_VAR 0 1
60197: PUSH
60198: LD_INT 22
60200: PUSH
60201: LD_OWVAR 2
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 21
60212: PUSH
60213: LD_INT 2
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PPUSH
60224: CALL_OW 69
60228: ST_TO_ADDR
// if not tmp then
60229: LD_VAR 0 1
60233: NOT
60234: IFFALSE 60238
// exit ;
60236: GO 60264
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
60238: LD_VAR 0 1
60242: PUSH
60243: LD_INT 1
60245: PPUSH
60246: LD_VAR 0 1
60250: PPUSH
60251: CALL_OW 12
60255: ARRAY
60256: PPUSH
60257: LD_INT 60
60259: PPUSH
60260: CALL_OW 234
// end ;
60264: PPOPN 1
60266: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
60267: LD_EXP 106
60271: PUSH
60272: LD_EXP 136
60276: AND
60277: IFFALSE 60376
60279: GO 60281
60281: DISABLE
60282: LD_INT 0
60284: PPUSH
60285: PPUSH
// begin enable ;
60286: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
60287: LD_ADDR_VAR 0 1
60291: PUSH
60292: LD_INT 22
60294: PUSH
60295: LD_OWVAR 2
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 61
60306: PUSH
60307: EMPTY
60308: LIST
60309: PUSH
60310: LD_INT 33
60312: PUSH
60313: LD_INT 2
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: LIST
60324: PPUSH
60325: CALL_OW 69
60329: ST_TO_ADDR
// if not tmp then
60330: LD_VAR 0 1
60334: NOT
60335: IFFALSE 60339
// exit ;
60337: GO 60376
// for i in tmp do
60339: LD_ADDR_VAR 0 2
60343: PUSH
60344: LD_VAR 0 1
60348: PUSH
60349: FOR_IN
60350: IFFALSE 60374
// if IsControledBy ( i ) then
60352: LD_VAR 0 2
60356: PPUSH
60357: CALL_OW 312
60361: IFFALSE 60372
// ComUnlink ( i ) ;
60363: LD_VAR 0 2
60367: PPUSH
60368: CALL_OW 136
60372: GO 60349
60374: POP
60375: POP
// end ;
60376: PPOPN 2
60378: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
60379: LD_EXP 106
60383: PUSH
60384: LD_EXP 137
60388: AND
60389: IFFALSE 60529
60391: GO 60393
60393: DISABLE
60394: LD_INT 0
60396: PPUSH
60397: PPUSH
// begin ToLua ( displayPowell(); ) ;
60398: LD_STRING displayPowell();
60400: PPUSH
60401: CALL_OW 559
// uc_side := 0 ;
60405: LD_ADDR_OWVAR 20
60409: PUSH
60410: LD_INT 0
60412: ST_TO_ADDR
// uc_nation := 2 ;
60413: LD_ADDR_OWVAR 21
60417: PUSH
60418: LD_INT 2
60420: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60421: LD_ADDR_OWVAR 37
60425: PUSH
60426: LD_INT 14
60428: ST_TO_ADDR
// vc_engine := engine_siberite ;
60429: LD_ADDR_OWVAR 39
60433: PUSH
60434: LD_INT 3
60436: ST_TO_ADDR
// vc_control := control_apeman ;
60437: LD_ADDR_OWVAR 38
60441: PUSH
60442: LD_INT 5
60444: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60445: LD_ADDR_OWVAR 40
60449: PUSH
60450: LD_INT 29
60452: ST_TO_ADDR
// un := CreateVehicle ;
60453: LD_ADDR_VAR 0 2
60457: PUSH
60458: CALL_OW 45
60462: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60463: LD_VAR 0 2
60467: PPUSH
60468: LD_INT 1
60470: PPUSH
60471: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60475: LD_INT 35
60477: PPUSH
60478: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60482: LD_VAR 0 2
60486: PPUSH
60487: LD_INT 22
60489: PUSH
60490: LD_OWVAR 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PPUSH
60499: CALL_OW 69
60503: PPUSH
60504: LD_VAR 0 2
60508: PPUSH
60509: CALL_OW 74
60513: PPUSH
60514: CALL_OW 115
// until IsDead ( un ) ;
60518: LD_VAR 0 2
60522: PPUSH
60523: CALL_OW 301
60527: IFFALSE 60475
// end ;
60529: PPOPN 2
60531: END
// every 0 0$1 trigger StreamModeActive and sStu do
60532: LD_EXP 106
60536: PUSH
60537: LD_EXP 145
60541: AND
60542: IFFALSE 60558
60544: GO 60546
60546: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60547: LD_STRING displayStucuk();
60549: PPUSH
60550: CALL_OW 559
// ResetFog ;
60554: CALL_OW 335
// end ;
60558: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60559: LD_EXP 106
60563: PUSH
60564: LD_EXP 138
60568: AND
60569: IFFALSE 60710
60571: GO 60573
60573: DISABLE
60574: LD_INT 0
60576: PPUSH
60577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60578: LD_ADDR_VAR 0 2
60582: PUSH
60583: LD_INT 22
60585: PUSH
60586: LD_OWVAR 2
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 21
60597: PUSH
60598: LD_INT 1
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PPUSH
60609: CALL_OW 69
60613: ST_TO_ADDR
// if not tmp then
60614: LD_VAR 0 2
60618: NOT
60619: IFFALSE 60623
// exit ;
60621: GO 60710
// un := tmp [ rand ( 1 , tmp ) ] ;
60623: LD_ADDR_VAR 0 1
60627: PUSH
60628: LD_VAR 0 2
60632: PUSH
60633: LD_INT 1
60635: PPUSH
60636: LD_VAR 0 2
60640: PPUSH
60641: CALL_OW 12
60645: ARRAY
60646: ST_TO_ADDR
// SetSide ( un , 0 ) ;
60647: LD_VAR 0 1
60651: PPUSH
60652: LD_INT 0
60654: PPUSH
60655: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
60659: LD_VAR 0 1
60663: PPUSH
60664: LD_OWVAR 3
60668: PUSH
60669: LD_VAR 0 1
60673: DIFF
60674: PPUSH
60675: LD_VAR 0 1
60679: PPUSH
60680: CALL_OW 74
60684: PPUSH
60685: CALL_OW 115
// wait ( 0 0$20 ) ;
60689: LD_INT 700
60691: PPUSH
60692: CALL_OW 67
// SetSide ( un , your_side ) ;
60696: LD_VAR 0 1
60700: PPUSH
60701: LD_OWVAR 2
60705: PPUSH
60706: CALL_OW 235
// end ;
60710: PPOPN 2
60712: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
60713: LD_EXP 106
60717: PUSH
60718: LD_EXP 139
60722: AND
60723: IFFALSE 60829
60725: GO 60727
60727: DISABLE
60728: LD_INT 0
60730: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60731: LD_ADDR_VAR 0 1
60735: PUSH
60736: LD_INT 22
60738: PUSH
60739: LD_OWVAR 2
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 2
60750: PUSH
60751: LD_INT 30
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 30
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: LIST
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PPUSH
60780: CALL_OW 69
60784: ST_TO_ADDR
// if not depot then
60785: LD_VAR 0 1
60789: NOT
60790: IFFALSE 60794
// exit ;
60792: GO 60829
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
60794: LD_VAR 0 1
60798: PUSH
60799: LD_INT 1
60801: ARRAY
60802: PPUSH
60803: CALL_OW 250
60807: PPUSH
60808: LD_VAR 0 1
60812: PUSH
60813: LD_INT 1
60815: ARRAY
60816: PPUSH
60817: CALL_OW 251
60821: PPUSH
60822: LD_INT 70
60824: PPUSH
60825: CALL_OW 495
// end ;
60829: PPOPN 1
60831: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
60832: LD_EXP 106
60836: PUSH
60837: LD_EXP 140
60841: AND
60842: IFFALSE 61053
60844: GO 60846
60846: DISABLE
60847: LD_INT 0
60849: PPUSH
60850: PPUSH
60851: PPUSH
60852: PPUSH
60853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60854: LD_ADDR_VAR 0 5
60858: PUSH
60859: LD_INT 22
60861: PUSH
60862: LD_OWVAR 2
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 21
60873: PUSH
60874: LD_INT 1
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PPUSH
60885: CALL_OW 69
60889: ST_TO_ADDR
// if not tmp then
60890: LD_VAR 0 5
60894: NOT
60895: IFFALSE 60899
// exit ;
60897: GO 61053
// for i in tmp do
60899: LD_ADDR_VAR 0 1
60903: PUSH
60904: LD_VAR 0 5
60908: PUSH
60909: FOR_IN
60910: IFFALSE 61051
// begin d := rand ( 0 , 5 ) ;
60912: LD_ADDR_VAR 0 4
60916: PUSH
60917: LD_INT 0
60919: PPUSH
60920: LD_INT 5
60922: PPUSH
60923: CALL_OW 12
60927: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
60928: LD_ADDR_VAR 0 2
60932: PUSH
60933: LD_VAR 0 1
60937: PPUSH
60938: CALL_OW 250
60942: PPUSH
60943: LD_VAR 0 4
60947: PPUSH
60948: LD_INT 3
60950: PPUSH
60951: LD_INT 12
60953: PPUSH
60954: CALL_OW 12
60958: PPUSH
60959: CALL_OW 272
60963: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
60964: LD_ADDR_VAR 0 3
60968: PUSH
60969: LD_VAR 0 1
60973: PPUSH
60974: CALL_OW 251
60978: PPUSH
60979: LD_VAR 0 4
60983: PPUSH
60984: LD_INT 3
60986: PPUSH
60987: LD_INT 12
60989: PPUSH
60990: CALL_OW 12
60994: PPUSH
60995: CALL_OW 273
60999: ST_TO_ADDR
// if ValidHex ( x , y ) then
61000: LD_VAR 0 2
61004: PPUSH
61005: LD_VAR 0 3
61009: PPUSH
61010: CALL_OW 488
61014: IFFALSE 61049
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
61016: LD_VAR 0 1
61020: PPUSH
61021: LD_VAR 0 2
61025: PPUSH
61026: LD_VAR 0 3
61030: PPUSH
61031: LD_INT 3
61033: PPUSH
61034: LD_INT 6
61036: PPUSH
61037: CALL_OW 12
61041: PPUSH
61042: LD_INT 1
61044: PPUSH
61045: CALL_OW 483
// end ;
61049: GO 60909
61051: POP
61052: POP
// end ;
61053: PPOPN 5
61055: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
61056: LD_EXP 106
61060: PUSH
61061: LD_EXP 141
61065: AND
61066: IFFALSE 61160
61068: GO 61070
61070: DISABLE
61071: LD_INT 0
61073: PPUSH
61074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61075: LD_ADDR_VAR 0 2
61079: PUSH
61080: LD_INT 22
61082: PUSH
61083: LD_OWVAR 2
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 32
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 21
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: PPUSH
61117: CALL_OW 69
61121: ST_TO_ADDR
// if not tmp then
61122: LD_VAR 0 2
61126: NOT
61127: IFFALSE 61131
// exit ;
61129: GO 61160
// for i in tmp do
61131: LD_ADDR_VAR 0 1
61135: PUSH
61136: LD_VAR 0 2
61140: PUSH
61141: FOR_IN
61142: IFFALSE 61158
// SetFuel ( i , 0 ) ;
61144: LD_VAR 0 1
61148: PPUSH
61149: LD_INT 0
61151: PPUSH
61152: CALL_OW 240
61156: GO 61141
61158: POP
61159: POP
// end ;
61160: PPOPN 2
61162: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
61163: LD_EXP 106
61167: PUSH
61168: LD_EXP 142
61172: AND
61173: IFFALSE 61239
61175: GO 61177
61177: DISABLE
61178: LD_INT 0
61180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61181: LD_ADDR_VAR 0 1
61185: PUSH
61186: LD_INT 22
61188: PUSH
61189: LD_OWVAR 2
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 30
61200: PUSH
61201: LD_INT 29
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PPUSH
61212: CALL_OW 69
61216: ST_TO_ADDR
// if not tmp then
61217: LD_VAR 0 1
61221: NOT
61222: IFFALSE 61226
// exit ;
61224: GO 61239
// DestroyUnit ( tmp [ 1 ] ) ;
61226: LD_VAR 0 1
61230: PUSH
61231: LD_INT 1
61233: ARRAY
61234: PPUSH
61235: CALL_OW 65
// end ;
61239: PPOPN 1
61241: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
61242: LD_EXP 106
61246: PUSH
61247: LD_EXP 144
61251: AND
61252: IFFALSE 61381
61254: GO 61256
61256: DISABLE
61257: LD_INT 0
61259: PPUSH
// begin uc_side := 0 ;
61260: LD_ADDR_OWVAR 20
61264: PUSH
61265: LD_INT 0
61267: ST_TO_ADDR
// uc_nation := nation_arabian ;
61268: LD_ADDR_OWVAR 21
61272: PUSH
61273: LD_INT 2
61275: ST_TO_ADDR
// hc_gallery :=  ;
61276: LD_ADDR_OWVAR 33
61280: PUSH
61281: LD_STRING 
61283: ST_TO_ADDR
// hc_name :=  ;
61284: LD_ADDR_OWVAR 26
61288: PUSH
61289: LD_STRING 
61291: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
61292: LD_INT 1
61294: PPUSH
61295: LD_INT 11
61297: PPUSH
61298: LD_INT 10
61300: PPUSH
61301: CALL_OW 380
// un := CreateHuman ;
61305: LD_ADDR_VAR 0 1
61309: PUSH
61310: CALL_OW 44
61314: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61315: LD_VAR 0 1
61319: PPUSH
61320: LD_INT 1
61322: PPUSH
61323: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61327: LD_INT 35
61329: PPUSH
61330: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61334: LD_VAR 0 1
61338: PPUSH
61339: LD_INT 22
61341: PUSH
61342: LD_OWVAR 2
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PPUSH
61351: CALL_OW 69
61355: PPUSH
61356: LD_VAR 0 1
61360: PPUSH
61361: CALL_OW 74
61365: PPUSH
61366: CALL_OW 115
// until IsDead ( un ) ;
61370: LD_VAR 0 1
61374: PPUSH
61375: CALL_OW 301
61379: IFFALSE 61327
// end ;
61381: PPOPN 1
61383: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
61384: LD_EXP 106
61388: PUSH
61389: LD_EXP 146
61393: AND
61394: IFFALSE 61406
61396: GO 61398
61398: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61399: LD_STRING earthquake(getX(game), 0, 32)
61401: PPUSH
61402: CALL_OW 559
61406: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61407: LD_EXP 106
61411: PUSH
61412: LD_EXP 147
61416: AND
61417: IFFALSE 61508
61419: GO 61421
61421: DISABLE
61422: LD_INT 0
61424: PPUSH
// begin enable ;
61425: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61426: LD_ADDR_VAR 0 1
61430: PUSH
61431: LD_INT 22
61433: PUSH
61434: LD_OWVAR 2
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 21
61445: PUSH
61446: LD_INT 2
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 33
61455: PUSH
61456: LD_INT 3
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: LIST
61467: PPUSH
61468: CALL_OW 69
61472: ST_TO_ADDR
// if not tmp then
61473: LD_VAR 0 1
61477: NOT
61478: IFFALSE 61482
// exit ;
61480: GO 61508
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61482: LD_VAR 0 1
61486: PUSH
61487: LD_INT 1
61489: PPUSH
61490: LD_VAR 0 1
61494: PPUSH
61495: CALL_OW 12
61499: ARRAY
61500: PPUSH
61501: LD_INT 1
61503: PPUSH
61504: CALL_OW 234
// end ;
61508: PPOPN 1
61510: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61511: LD_EXP 106
61515: PUSH
61516: LD_EXP 148
61520: AND
61521: IFFALSE 61662
61523: GO 61525
61525: DISABLE
61526: LD_INT 0
61528: PPUSH
61529: PPUSH
61530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61531: LD_ADDR_VAR 0 3
61535: PUSH
61536: LD_INT 22
61538: PUSH
61539: LD_OWVAR 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 25
61550: PUSH
61551: LD_INT 1
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PPUSH
61562: CALL_OW 69
61566: ST_TO_ADDR
// if not tmp then
61567: LD_VAR 0 3
61571: NOT
61572: IFFALSE 61576
// exit ;
61574: GO 61662
// un := tmp [ rand ( 1 , tmp ) ] ;
61576: LD_ADDR_VAR 0 2
61580: PUSH
61581: LD_VAR 0 3
61585: PUSH
61586: LD_INT 1
61588: PPUSH
61589: LD_VAR 0 3
61593: PPUSH
61594: CALL_OW 12
61598: ARRAY
61599: ST_TO_ADDR
// if Crawls ( un ) then
61600: LD_VAR 0 2
61604: PPUSH
61605: CALL_OW 318
61609: IFFALSE 61620
// ComWalk ( un ) ;
61611: LD_VAR 0 2
61615: PPUSH
61616: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
61620: LD_VAR 0 2
61624: PPUSH
61625: LD_INT 9
61627: PPUSH
61628: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
61632: LD_INT 28
61634: PPUSH
61635: LD_OWVAR 2
61639: PPUSH
61640: LD_INT 2
61642: PPUSH
61643: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
61647: LD_INT 29
61649: PPUSH
61650: LD_OWVAR 2
61654: PPUSH
61655: LD_INT 2
61657: PPUSH
61658: CALL_OW 322
// end ;
61662: PPOPN 3
61664: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
61665: LD_EXP 106
61669: PUSH
61670: LD_EXP 149
61674: AND
61675: IFFALSE 61786
61677: GO 61679
61679: DISABLE
61680: LD_INT 0
61682: PPUSH
61683: PPUSH
61684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61685: LD_ADDR_VAR 0 3
61689: PUSH
61690: LD_INT 22
61692: PUSH
61693: LD_OWVAR 2
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 25
61704: PUSH
61705: LD_INT 1
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PPUSH
61716: CALL_OW 69
61720: ST_TO_ADDR
// if not tmp then
61721: LD_VAR 0 3
61725: NOT
61726: IFFALSE 61730
// exit ;
61728: GO 61786
// un := tmp [ rand ( 1 , tmp ) ] ;
61730: LD_ADDR_VAR 0 2
61734: PUSH
61735: LD_VAR 0 3
61739: PUSH
61740: LD_INT 1
61742: PPUSH
61743: LD_VAR 0 3
61747: PPUSH
61748: CALL_OW 12
61752: ARRAY
61753: ST_TO_ADDR
// if Crawls ( un ) then
61754: LD_VAR 0 2
61758: PPUSH
61759: CALL_OW 318
61763: IFFALSE 61774
// ComWalk ( un ) ;
61765: LD_VAR 0 2
61769: PPUSH
61770: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61774: LD_VAR 0 2
61778: PPUSH
61779: LD_INT 8
61781: PPUSH
61782: CALL_OW 336
// end ;
61786: PPOPN 3
61788: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
61789: LD_EXP 106
61793: PUSH
61794: LD_EXP 150
61798: AND
61799: IFFALSE 61943
61801: GO 61803
61803: DISABLE
61804: LD_INT 0
61806: PPUSH
61807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
61808: LD_ADDR_VAR 0 2
61812: PUSH
61813: LD_INT 22
61815: PUSH
61816: LD_OWVAR 2
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 21
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 2
61837: PUSH
61838: LD_INT 34
61840: PUSH
61841: LD_INT 12
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 34
61850: PUSH
61851: LD_INT 51
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 34
61860: PUSH
61861: LD_INT 32
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: LIST
61878: PPUSH
61879: CALL_OW 69
61883: ST_TO_ADDR
// if not tmp then
61884: LD_VAR 0 2
61888: NOT
61889: IFFALSE 61893
// exit ;
61891: GO 61943
// for i in tmp do
61893: LD_ADDR_VAR 0 1
61897: PUSH
61898: LD_VAR 0 2
61902: PUSH
61903: FOR_IN
61904: IFFALSE 61941
// if GetCargo ( i , mat_artifact ) = 0 then
61906: LD_VAR 0 1
61910: PPUSH
61911: LD_INT 4
61913: PPUSH
61914: CALL_OW 289
61918: PUSH
61919: LD_INT 0
61921: EQUAL
61922: IFFALSE 61939
// SetCargo ( i , mat_siberit , 100 ) ;
61924: LD_VAR 0 1
61928: PPUSH
61929: LD_INT 3
61931: PPUSH
61932: LD_INT 100
61934: PPUSH
61935: CALL_OW 290
61939: GO 61903
61941: POP
61942: POP
// end ;
61943: PPOPN 2
61945: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
61946: LD_EXP 106
61950: PUSH
61951: LD_EXP 151
61955: AND
61956: IFFALSE 62139
61958: GO 61960
61960: DISABLE
61961: LD_INT 0
61963: PPUSH
61964: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61965: LD_ADDR_VAR 0 2
61969: PUSH
61970: LD_INT 22
61972: PUSH
61973: LD_OWVAR 2
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PPUSH
61982: CALL_OW 69
61986: ST_TO_ADDR
// if not tmp then
61987: LD_VAR 0 2
61991: NOT
61992: IFFALSE 61996
// exit ;
61994: GO 62139
// for i := 1 to 2 do
61996: LD_ADDR_VAR 0 1
62000: PUSH
62001: DOUBLE
62002: LD_INT 1
62004: DEC
62005: ST_TO_ADDR
62006: LD_INT 2
62008: PUSH
62009: FOR_TO
62010: IFFALSE 62137
// begin uc_side := your_side ;
62012: LD_ADDR_OWVAR 20
62016: PUSH
62017: LD_OWVAR 2
62021: ST_TO_ADDR
// uc_nation := nation_american ;
62022: LD_ADDR_OWVAR 21
62026: PUSH
62027: LD_INT 1
62029: ST_TO_ADDR
// vc_chassis := us_morphling ;
62030: LD_ADDR_OWVAR 37
62034: PUSH
62035: LD_INT 5
62037: ST_TO_ADDR
// vc_engine := engine_siberite ;
62038: LD_ADDR_OWVAR 39
62042: PUSH
62043: LD_INT 3
62045: ST_TO_ADDR
// vc_control := control_computer ;
62046: LD_ADDR_OWVAR 38
62050: PUSH
62051: LD_INT 3
62053: ST_TO_ADDR
// vc_weapon := us_double_laser ;
62054: LD_ADDR_OWVAR 40
62058: PUSH
62059: LD_INT 10
62061: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62062: LD_VAR 0 2
62066: PUSH
62067: LD_INT 1
62069: ARRAY
62070: PPUSH
62071: CALL_OW 310
62075: NOT
62076: IFFALSE 62123
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62078: CALL_OW 45
62082: PPUSH
62083: LD_VAR 0 2
62087: PUSH
62088: LD_INT 1
62090: ARRAY
62091: PPUSH
62092: CALL_OW 250
62096: PPUSH
62097: LD_VAR 0 2
62101: PUSH
62102: LD_INT 1
62104: ARRAY
62105: PPUSH
62106: CALL_OW 251
62110: PPUSH
62111: LD_INT 12
62113: PPUSH
62114: LD_INT 1
62116: PPUSH
62117: CALL_OW 50
62121: GO 62135
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
62123: CALL_OW 45
62127: PPUSH
62128: LD_INT 1
62130: PPUSH
62131: CALL_OW 51
// end ;
62135: GO 62009
62137: POP
62138: POP
// end ;
62139: PPOPN 2
62141: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
62142: LD_EXP 106
62146: PUSH
62147: LD_EXP 152
62151: AND
62152: IFFALSE 62374
62154: GO 62156
62156: DISABLE
62157: LD_INT 0
62159: PPUSH
62160: PPUSH
62161: PPUSH
62162: PPUSH
62163: PPUSH
62164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62165: LD_ADDR_VAR 0 6
62169: PUSH
62170: LD_INT 22
62172: PUSH
62173: LD_OWVAR 2
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 21
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 3
62194: PUSH
62195: LD_INT 23
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: PPUSH
62214: CALL_OW 69
62218: ST_TO_ADDR
// if not tmp then
62219: LD_VAR 0 6
62223: NOT
62224: IFFALSE 62228
// exit ;
62226: GO 62374
// s1 := rand ( 1 , 4 ) ;
62228: LD_ADDR_VAR 0 2
62232: PUSH
62233: LD_INT 1
62235: PPUSH
62236: LD_INT 4
62238: PPUSH
62239: CALL_OW 12
62243: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
62244: LD_ADDR_VAR 0 4
62248: PUSH
62249: LD_VAR 0 6
62253: PUSH
62254: LD_INT 1
62256: ARRAY
62257: PPUSH
62258: LD_VAR 0 2
62262: PPUSH
62263: CALL_OW 259
62267: ST_TO_ADDR
// if s1 = 1 then
62268: LD_VAR 0 2
62272: PUSH
62273: LD_INT 1
62275: EQUAL
62276: IFFALSE 62296
// s2 := rand ( 2 , 4 ) else
62278: LD_ADDR_VAR 0 3
62282: PUSH
62283: LD_INT 2
62285: PPUSH
62286: LD_INT 4
62288: PPUSH
62289: CALL_OW 12
62293: ST_TO_ADDR
62294: GO 62304
// s2 := 1 ;
62296: LD_ADDR_VAR 0 3
62300: PUSH
62301: LD_INT 1
62303: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
62304: LD_ADDR_VAR 0 5
62308: PUSH
62309: LD_VAR 0 6
62313: PUSH
62314: LD_INT 1
62316: ARRAY
62317: PPUSH
62318: LD_VAR 0 3
62322: PPUSH
62323: CALL_OW 259
62327: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
62328: LD_VAR 0 6
62332: PUSH
62333: LD_INT 1
62335: ARRAY
62336: PPUSH
62337: LD_VAR 0 2
62341: PPUSH
62342: LD_VAR 0 5
62346: PPUSH
62347: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
62351: LD_VAR 0 6
62355: PUSH
62356: LD_INT 1
62358: ARRAY
62359: PPUSH
62360: LD_VAR 0 3
62364: PPUSH
62365: LD_VAR 0 4
62369: PPUSH
62370: CALL_OW 237
// end ;
62374: PPOPN 6
62376: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62377: LD_EXP 106
62381: PUSH
62382: LD_EXP 153
62386: AND
62387: IFFALSE 62466
62389: GO 62391
62391: DISABLE
62392: LD_INT 0
62394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62395: LD_ADDR_VAR 0 1
62399: PUSH
62400: LD_INT 22
62402: PUSH
62403: LD_OWVAR 2
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 30
62414: PUSH
62415: LD_INT 3
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PPUSH
62426: CALL_OW 69
62430: ST_TO_ADDR
// if not tmp then
62431: LD_VAR 0 1
62435: NOT
62436: IFFALSE 62440
// exit ;
62438: GO 62466
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62440: LD_VAR 0 1
62444: PUSH
62445: LD_INT 1
62447: PPUSH
62448: LD_VAR 0 1
62452: PPUSH
62453: CALL_OW 12
62457: ARRAY
62458: PPUSH
62459: LD_INT 1
62461: PPUSH
62462: CALL_OW 234
// end ;
62466: PPOPN 1
62468: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62469: LD_EXP 106
62473: PUSH
62474: LD_EXP 154
62478: AND
62479: IFFALSE 62591
62481: GO 62483
62483: DISABLE
62484: LD_INT 0
62486: PPUSH
62487: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62488: LD_ADDR_VAR 0 2
62492: PUSH
62493: LD_INT 22
62495: PUSH
62496: LD_OWVAR 2
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 2
62507: PUSH
62508: LD_INT 30
62510: PUSH
62511: LD_INT 27
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 30
62520: PUSH
62521: LD_INT 26
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 30
62530: PUSH
62531: LD_INT 28
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PPUSH
62548: CALL_OW 69
62552: ST_TO_ADDR
// if not tmp then
62553: LD_VAR 0 2
62557: NOT
62558: IFFALSE 62562
// exit ;
62560: GO 62591
// for i in tmp do
62562: LD_ADDR_VAR 0 1
62566: PUSH
62567: LD_VAR 0 2
62571: PUSH
62572: FOR_IN
62573: IFFALSE 62589
// SetLives ( i , 1 ) ;
62575: LD_VAR 0 1
62579: PPUSH
62580: LD_INT 1
62582: PPUSH
62583: CALL_OW 234
62587: GO 62572
62589: POP
62590: POP
// end ;
62591: PPOPN 2
62593: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
62594: LD_EXP 106
62598: PUSH
62599: LD_EXP 155
62603: AND
62604: IFFALSE 62891
62606: GO 62608
62608: DISABLE
62609: LD_INT 0
62611: PPUSH
62612: PPUSH
62613: PPUSH
// begin i := rand ( 1 , 7 ) ;
62614: LD_ADDR_VAR 0 1
62618: PUSH
62619: LD_INT 1
62621: PPUSH
62622: LD_INT 7
62624: PPUSH
62625: CALL_OW 12
62629: ST_TO_ADDR
// case i of 1 :
62630: LD_VAR 0 1
62634: PUSH
62635: LD_INT 1
62637: DOUBLE
62638: EQUAL
62639: IFTRUE 62643
62641: GO 62653
62643: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
62644: LD_STRING earthquake(getX(game), 0, 32)
62646: PPUSH
62647: CALL_OW 559
62651: GO 62891
62653: LD_INT 2
62655: DOUBLE
62656: EQUAL
62657: IFTRUE 62661
62659: GO 62675
62661: POP
// begin ToLua ( displayStucuk(); ) ;
62662: LD_STRING displayStucuk();
62664: PPUSH
62665: CALL_OW 559
// ResetFog ;
62669: CALL_OW 335
// end ; 3 :
62673: GO 62891
62675: LD_INT 3
62677: DOUBLE
62678: EQUAL
62679: IFTRUE 62683
62681: GO 62787
62683: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62684: LD_ADDR_VAR 0 2
62688: PUSH
62689: LD_INT 22
62691: PUSH
62692: LD_OWVAR 2
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 25
62703: PUSH
62704: LD_INT 1
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PPUSH
62715: CALL_OW 69
62719: ST_TO_ADDR
// if not tmp then
62720: LD_VAR 0 2
62724: NOT
62725: IFFALSE 62729
// exit ;
62727: GO 62891
// un := tmp [ rand ( 1 , tmp ) ] ;
62729: LD_ADDR_VAR 0 3
62733: PUSH
62734: LD_VAR 0 2
62738: PUSH
62739: LD_INT 1
62741: PPUSH
62742: LD_VAR 0 2
62746: PPUSH
62747: CALL_OW 12
62751: ARRAY
62752: ST_TO_ADDR
// if Crawls ( un ) then
62753: LD_VAR 0 3
62757: PPUSH
62758: CALL_OW 318
62762: IFFALSE 62773
// ComWalk ( un ) ;
62764: LD_VAR 0 3
62768: PPUSH
62769: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62773: LD_VAR 0 3
62777: PPUSH
62778: LD_INT 8
62780: PPUSH
62781: CALL_OW 336
// end ; 4 :
62785: GO 62891
62787: LD_INT 4
62789: DOUBLE
62790: EQUAL
62791: IFTRUE 62795
62793: GO 62869
62795: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62796: LD_ADDR_VAR 0 2
62800: PUSH
62801: LD_INT 22
62803: PUSH
62804: LD_OWVAR 2
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 30
62815: PUSH
62816: LD_INT 29
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PPUSH
62827: CALL_OW 69
62831: ST_TO_ADDR
// if not tmp then
62832: LD_VAR 0 2
62836: NOT
62837: IFFALSE 62841
// exit ;
62839: GO 62891
// CenterNowOnUnits ( tmp [ 1 ] ) ;
62841: LD_VAR 0 2
62845: PUSH
62846: LD_INT 1
62848: ARRAY
62849: PPUSH
62850: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
62854: LD_VAR 0 2
62858: PUSH
62859: LD_INT 1
62861: ARRAY
62862: PPUSH
62863: CALL_OW 65
// end ; 5 .. 7 :
62867: GO 62891
62869: LD_INT 5
62871: DOUBLE
62872: GREATEREQUAL
62873: IFFALSE 62881
62875: LD_INT 7
62877: DOUBLE
62878: LESSEQUAL
62879: IFTRUE 62883
62881: GO 62890
62883: POP
// StreamSibBomb ; end ;
62884: CALL 59128 0 0
62888: GO 62891
62890: POP
// end ;
62891: PPOPN 3
62893: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
62894: LD_EXP 106
62898: PUSH
62899: LD_EXP 156
62903: AND
62904: IFFALSE 63060
62906: GO 62908
62908: DISABLE
62909: LD_INT 0
62911: PPUSH
62912: PPUSH
62913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
62914: LD_ADDR_VAR 0 2
62918: PUSH
62919: LD_INT 81
62921: PUSH
62922: LD_OWVAR 2
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 2
62933: PUSH
62934: LD_INT 21
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: PUSH
62944: LD_INT 21
62946: PUSH
62947: LD_INT 2
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PPUSH
62963: CALL_OW 69
62967: ST_TO_ADDR
// if not tmp then
62968: LD_VAR 0 2
62972: NOT
62973: IFFALSE 62977
// exit ;
62975: GO 63060
// p := 0 ;
62977: LD_ADDR_VAR 0 3
62981: PUSH
62982: LD_INT 0
62984: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62985: LD_INT 35
62987: PPUSH
62988: CALL_OW 67
// p := p + 1 ;
62992: LD_ADDR_VAR 0 3
62996: PUSH
62997: LD_VAR 0 3
63001: PUSH
63002: LD_INT 1
63004: PLUS
63005: ST_TO_ADDR
// for i in tmp do
63006: LD_ADDR_VAR 0 1
63010: PUSH
63011: LD_VAR 0 2
63015: PUSH
63016: FOR_IN
63017: IFFALSE 63048
// if GetLives ( i ) < 1000 then
63019: LD_VAR 0 1
63023: PPUSH
63024: CALL_OW 256
63028: PUSH
63029: LD_INT 1000
63031: LESS
63032: IFFALSE 63046
// SetLives ( i , 1000 ) ;
63034: LD_VAR 0 1
63038: PPUSH
63039: LD_INT 1000
63041: PPUSH
63042: CALL_OW 234
63046: GO 63016
63048: POP
63049: POP
// until p > 20 ;
63050: LD_VAR 0 3
63054: PUSH
63055: LD_INT 20
63057: GREATER
63058: IFFALSE 62985
// end ;
63060: PPOPN 3
63062: END
// every 0 0$1 trigger StreamModeActive and sTime do
63063: LD_EXP 106
63067: PUSH
63068: LD_EXP 157
63072: AND
63073: IFFALSE 63108
63075: GO 63077
63077: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63078: LD_INT 28
63080: PPUSH
63081: LD_OWVAR 2
63085: PPUSH
63086: LD_INT 2
63088: PPUSH
63089: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63093: LD_INT 30
63095: PPUSH
63096: LD_OWVAR 2
63100: PPUSH
63101: LD_INT 2
63103: PPUSH
63104: CALL_OW 322
// end ;
63108: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63109: LD_EXP 106
63113: PUSH
63114: LD_EXP 158
63118: AND
63119: IFFALSE 63240
63121: GO 63123
63123: DISABLE
63124: LD_INT 0
63126: PPUSH
63127: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63128: LD_ADDR_VAR 0 2
63132: PUSH
63133: LD_INT 22
63135: PUSH
63136: LD_OWVAR 2
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 21
63147: PUSH
63148: LD_INT 1
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 3
63157: PUSH
63158: LD_INT 23
63160: PUSH
63161: LD_INT 0
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: EMPTY
63169: LIST
63170: LIST
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: LIST
63176: PPUSH
63177: CALL_OW 69
63181: ST_TO_ADDR
// if not tmp then
63182: LD_VAR 0 2
63186: NOT
63187: IFFALSE 63191
// exit ;
63189: GO 63240
// for i in tmp do
63191: LD_ADDR_VAR 0 1
63195: PUSH
63196: LD_VAR 0 2
63200: PUSH
63201: FOR_IN
63202: IFFALSE 63238
// begin if Crawls ( i ) then
63204: LD_VAR 0 1
63208: PPUSH
63209: CALL_OW 318
63213: IFFALSE 63224
// ComWalk ( i ) ;
63215: LD_VAR 0 1
63219: PPUSH
63220: CALL_OW 138
// SetClass ( i , 2 ) ;
63224: LD_VAR 0 1
63228: PPUSH
63229: LD_INT 2
63231: PPUSH
63232: CALL_OW 336
// end ;
63236: GO 63201
63238: POP
63239: POP
// end ;
63240: PPOPN 2
63242: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
63243: LD_EXP 106
63247: PUSH
63248: LD_EXP 159
63252: AND
63253: IFFALSE 63541
63255: GO 63257
63257: DISABLE
63258: LD_INT 0
63260: PPUSH
63261: PPUSH
63262: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
63263: LD_OWVAR 2
63267: PPUSH
63268: LD_INT 9
63270: PPUSH
63271: LD_INT 1
63273: PPUSH
63274: LD_INT 1
63276: PPUSH
63277: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
63281: LD_INT 9
63283: PPUSH
63284: LD_OWVAR 2
63288: PPUSH
63289: CALL_OW 343
// uc_side := 9 ;
63293: LD_ADDR_OWVAR 20
63297: PUSH
63298: LD_INT 9
63300: ST_TO_ADDR
// uc_nation := 2 ;
63301: LD_ADDR_OWVAR 21
63305: PUSH
63306: LD_INT 2
63308: ST_TO_ADDR
// hc_name := Dark Warrior ;
63309: LD_ADDR_OWVAR 26
63313: PUSH
63314: LD_STRING Dark Warrior
63316: ST_TO_ADDR
// hc_gallery :=  ;
63317: LD_ADDR_OWVAR 33
63321: PUSH
63322: LD_STRING 
63324: ST_TO_ADDR
// hc_noskilllimit := true ;
63325: LD_ADDR_OWVAR 76
63329: PUSH
63330: LD_INT 1
63332: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
63333: LD_ADDR_OWVAR 31
63337: PUSH
63338: LD_INT 30
63340: PUSH
63341: LD_INT 30
63343: PUSH
63344: LD_INT 30
63346: PUSH
63347: LD_INT 30
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: ST_TO_ADDR
// un := CreateHuman ;
63356: LD_ADDR_VAR 0 3
63360: PUSH
63361: CALL_OW 44
63365: ST_TO_ADDR
// hc_noskilllimit := false ;
63366: LD_ADDR_OWVAR 76
63370: PUSH
63371: LD_INT 0
63373: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63374: LD_VAR 0 3
63378: PPUSH
63379: LD_INT 1
63381: PPUSH
63382: CALL_OW 51
// ToLua ( playRanger() ) ;
63386: LD_STRING playRanger()
63388: PPUSH
63389: CALL_OW 559
// p := 0 ;
63393: LD_ADDR_VAR 0 2
63397: PUSH
63398: LD_INT 0
63400: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63401: LD_INT 35
63403: PPUSH
63404: CALL_OW 67
// p := p + 1 ;
63408: LD_ADDR_VAR 0 2
63412: PUSH
63413: LD_VAR 0 2
63417: PUSH
63418: LD_INT 1
63420: PLUS
63421: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63422: LD_VAR 0 3
63426: PPUSH
63427: CALL_OW 256
63431: PUSH
63432: LD_INT 1000
63434: LESS
63435: IFFALSE 63449
// SetLives ( un , 1000 ) ;
63437: LD_VAR 0 3
63441: PPUSH
63442: LD_INT 1000
63444: PPUSH
63445: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63449: LD_VAR 0 3
63453: PPUSH
63454: LD_INT 81
63456: PUSH
63457: LD_OWVAR 2
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 91
63468: PUSH
63469: LD_VAR 0 3
63473: PUSH
63474: LD_INT 30
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: LIST
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PPUSH
63486: CALL_OW 69
63490: PPUSH
63491: LD_VAR 0 3
63495: PPUSH
63496: CALL_OW 74
63500: PPUSH
63501: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63505: LD_VAR 0 2
63509: PUSH
63510: LD_INT 80
63512: GREATER
63513: PUSH
63514: LD_VAR 0 3
63518: PPUSH
63519: CALL_OW 301
63523: OR
63524: IFFALSE 63401
// if un then
63526: LD_VAR 0 3
63530: IFFALSE 63541
// RemoveUnit ( un ) ;
63532: LD_VAR 0 3
63536: PPUSH
63537: CALL_OW 64
// end ;
63541: PPOPN 3
63543: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63544: LD_EXP 160
63548: IFFALSE 63664
63550: GO 63552
63552: DISABLE
63553: LD_INT 0
63555: PPUSH
63556: PPUSH
63557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63558: LD_ADDR_VAR 0 2
63562: PUSH
63563: LD_INT 81
63565: PUSH
63566: LD_OWVAR 2
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 21
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PPUSH
63589: CALL_OW 69
63593: ST_TO_ADDR
// ToLua ( playComputer() ) ;
63594: LD_STRING playComputer()
63596: PPUSH
63597: CALL_OW 559
// if not tmp then
63601: LD_VAR 0 2
63605: NOT
63606: IFFALSE 63610
// exit ;
63608: GO 63664
// for i in tmp do
63610: LD_ADDR_VAR 0 1
63614: PUSH
63615: LD_VAR 0 2
63619: PUSH
63620: FOR_IN
63621: IFFALSE 63662
// for j := 1 to 4 do
63623: LD_ADDR_VAR 0 3
63627: PUSH
63628: DOUBLE
63629: LD_INT 1
63631: DEC
63632: ST_TO_ADDR
63633: LD_INT 4
63635: PUSH
63636: FOR_TO
63637: IFFALSE 63658
// SetSkill ( i , j , 10 ) ;
63639: LD_VAR 0 1
63643: PPUSH
63644: LD_VAR 0 3
63648: PPUSH
63649: LD_INT 10
63651: PPUSH
63652: CALL_OW 237
63656: GO 63636
63658: POP
63659: POP
63660: GO 63620
63662: POP
63663: POP
// end ;
63664: PPOPN 3
63666: END
// every 0 0$1 trigger s30 do var i , tmp ;
63667: LD_EXP 161
63671: IFFALSE 63740
63673: GO 63675
63675: DISABLE
63676: LD_INT 0
63678: PPUSH
63679: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63680: LD_ADDR_VAR 0 2
63684: PUSH
63685: LD_INT 22
63687: PUSH
63688: LD_OWVAR 2
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PPUSH
63697: CALL_OW 69
63701: ST_TO_ADDR
// if not tmp then
63702: LD_VAR 0 2
63706: NOT
63707: IFFALSE 63711
// exit ;
63709: GO 63740
// for i in tmp do
63711: LD_ADDR_VAR 0 1
63715: PUSH
63716: LD_VAR 0 2
63720: PUSH
63721: FOR_IN
63722: IFFALSE 63738
// SetLives ( i , 300 ) ;
63724: LD_VAR 0 1
63728: PPUSH
63729: LD_INT 300
63731: PPUSH
63732: CALL_OW 234
63736: GO 63721
63738: POP
63739: POP
// end ;
63740: PPOPN 2
63742: END
// every 0 0$1 trigger s60 do var i , tmp ;
63743: LD_EXP 162
63747: IFFALSE 63816
63749: GO 63751
63751: DISABLE
63752: LD_INT 0
63754: PPUSH
63755: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63756: LD_ADDR_VAR 0 2
63760: PUSH
63761: LD_INT 22
63763: PUSH
63764: LD_OWVAR 2
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PPUSH
63773: CALL_OW 69
63777: ST_TO_ADDR
// if not tmp then
63778: LD_VAR 0 2
63782: NOT
63783: IFFALSE 63787
// exit ;
63785: GO 63816
// for i in tmp do
63787: LD_ADDR_VAR 0 1
63791: PUSH
63792: LD_VAR 0 2
63796: PUSH
63797: FOR_IN
63798: IFFALSE 63814
// SetLives ( i , 600 ) ;
63800: LD_VAR 0 1
63804: PPUSH
63805: LD_INT 600
63807: PPUSH
63808: CALL_OW 234
63812: GO 63797
63814: POP
63815: POP
// end ;
63816: PPOPN 2
63818: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63819: LD_INT 0
63821: PPUSH
// case cmd of 301 :
63822: LD_VAR 0 1
63826: PUSH
63827: LD_INT 301
63829: DOUBLE
63830: EQUAL
63831: IFTRUE 63835
63833: GO 63867
63835: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
63836: LD_VAR 0 6
63840: PPUSH
63841: LD_VAR 0 7
63845: PPUSH
63846: LD_VAR 0 8
63850: PPUSH
63851: LD_VAR 0 4
63855: PPUSH
63856: LD_VAR 0 5
63860: PPUSH
63861: CALL 65068 0 5
63865: GO 63988
63867: LD_INT 302
63869: DOUBLE
63870: EQUAL
63871: IFTRUE 63875
63873: GO 63912
63875: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
63876: LD_VAR 0 6
63880: PPUSH
63881: LD_VAR 0 7
63885: PPUSH
63886: LD_VAR 0 8
63890: PPUSH
63891: LD_VAR 0 9
63895: PPUSH
63896: LD_VAR 0 4
63900: PPUSH
63901: LD_VAR 0 5
63905: PPUSH
63906: CALL 65159 0 6
63910: GO 63988
63912: LD_INT 303
63914: DOUBLE
63915: EQUAL
63916: IFTRUE 63920
63918: GO 63957
63920: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
63921: LD_VAR 0 6
63925: PPUSH
63926: LD_VAR 0 7
63930: PPUSH
63931: LD_VAR 0 8
63935: PPUSH
63936: LD_VAR 0 9
63940: PPUSH
63941: LD_VAR 0 4
63945: PPUSH
63946: LD_VAR 0 5
63950: PPUSH
63951: CALL 63993 0 6
63955: GO 63988
63957: LD_INT 304
63959: DOUBLE
63960: EQUAL
63961: IFTRUE 63965
63963: GO 63987
63965: POP
// hHackTeleport ( unit , x , y ) ; end ;
63966: LD_VAR 0 2
63970: PPUSH
63971: LD_VAR 0 4
63975: PPUSH
63976: LD_VAR 0 5
63980: PPUSH
63981: CALL 65752 0 3
63985: GO 63988
63987: POP
// end ;
63988: LD_VAR 0 12
63992: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
63993: LD_INT 0
63995: PPUSH
63996: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
63997: LD_VAR 0 1
64001: PUSH
64002: LD_INT 1
64004: LESS
64005: PUSH
64006: LD_VAR 0 1
64010: PUSH
64011: LD_INT 3
64013: GREATER
64014: OR
64015: PUSH
64016: LD_VAR 0 5
64020: PPUSH
64021: LD_VAR 0 6
64025: PPUSH
64026: CALL_OW 428
64030: OR
64031: IFFALSE 64035
// exit ;
64033: GO 64755
// uc_side := your_side ;
64035: LD_ADDR_OWVAR 20
64039: PUSH
64040: LD_OWVAR 2
64044: ST_TO_ADDR
// uc_nation := nation ;
64045: LD_ADDR_OWVAR 21
64049: PUSH
64050: LD_VAR 0 1
64054: ST_TO_ADDR
// bc_level = 1 ;
64055: LD_ADDR_OWVAR 43
64059: PUSH
64060: LD_INT 1
64062: ST_TO_ADDR
// case btype of 1 :
64063: LD_VAR 0 2
64067: PUSH
64068: LD_INT 1
64070: DOUBLE
64071: EQUAL
64072: IFTRUE 64076
64074: GO 64087
64076: POP
// bc_type := b_depot ; 2 :
64077: LD_ADDR_OWVAR 42
64081: PUSH
64082: LD_INT 0
64084: ST_TO_ADDR
64085: GO 64699
64087: LD_INT 2
64089: DOUBLE
64090: EQUAL
64091: IFTRUE 64095
64093: GO 64106
64095: POP
// bc_type := b_warehouse ; 3 :
64096: LD_ADDR_OWVAR 42
64100: PUSH
64101: LD_INT 1
64103: ST_TO_ADDR
64104: GO 64699
64106: LD_INT 3
64108: DOUBLE
64109: EQUAL
64110: IFTRUE 64114
64112: GO 64125
64114: POP
// bc_type := b_lab ; 4 .. 9 :
64115: LD_ADDR_OWVAR 42
64119: PUSH
64120: LD_INT 6
64122: ST_TO_ADDR
64123: GO 64699
64125: LD_INT 4
64127: DOUBLE
64128: GREATEREQUAL
64129: IFFALSE 64137
64131: LD_INT 9
64133: DOUBLE
64134: LESSEQUAL
64135: IFTRUE 64139
64137: GO 64191
64139: POP
// begin bc_type := b_lab_half ;
64140: LD_ADDR_OWVAR 42
64144: PUSH
64145: LD_INT 7
64147: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
64148: LD_ADDR_OWVAR 44
64152: PUSH
64153: LD_INT 10
64155: PUSH
64156: LD_INT 11
64158: PUSH
64159: LD_INT 12
64161: PUSH
64162: LD_INT 15
64164: PUSH
64165: LD_INT 14
64167: PUSH
64168: LD_INT 13
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: LIST
64178: PUSH
64179: LD_VAR 0 2
64183: PUSH
64184: LD_INT 3
64186: MINUS
64187: ARRAY
64188: ST_TO_ADDR
// end ; 10 .. 13 :
64189: GO 64699
64191: LD_INT 10
64193: DOUBLE
64194: GREATEREQUAL
64195: IFFALSE 64203
64197: LD_INT 13
64199: DOUBLE
64200: LESSEQUAL
64201: IFTRUE 64205
64203: GO 64282
64205: POP
// begin bc_type := b_lab_full ;
64206: LD_ADDR_OWVAR 42
64210: PUSH
64211: LD_INT 8
64213: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
64214: LD_ADDR_OWVAR 44
64218: PUSH
64219: LD_INT 10
64221: PUSH
64222: LD_INT 12
64224: PUSH
64225: LD_INT 14
64227: PUSH
64228: LD_INT 13
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: PUSH
64237: LD_VAR 0 2
64241: PUSH
64242: LD_INT 9
64244: MINUS
64245: ARRAY
64246: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
64247: LD_ADDR_OWVAR 45
64251: PUSH
64252: LD_INT 11
64254: PUSH
64255: LD_INT 15
64257: PUSH
64258: LD_INT 12
64260: PUSH
64261: LD_INT 15
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: PUSH
64270: LD_VAR 0 2
64274: PUSH
64275: LD_INT 9
64277: MINUS
64278: ARRAY
64279: ST_TO_ADDR
// end ; 14 :
64280: GO 64699
64282: LD_INT 14
64284: DOUBLE
64285: EQUAL
64286: IFTRUE 64290
64288: GO 64301
64290: POP
// bc_type := b_workshop ; 15 :
64291: LD_ADDR_OWVAR 42
64295: PUSH
64296: LD_INT 2
64298: ST_TO_ADDR
64299: GO 64699
64301: LD_INT 15
64303: DOUBLE
64304: EQUAL
64305: IFTRUE 64309
64307: GO 64320
64309: POP
// bc_type := b_factory ; 16 :
64310: LD_ADDR_OWVAR 42
64314: PUSH
64315: LD_INT 3
64317: ST_TO_ADDR
64318: GO 64699
64320: LD_INT 16
64322: DOUBLE
64323: EQUAL
64324: IFTRUE 64328
64326: GO 64339
64328: POP
// bc_type := b_ext_gun ; 17 :
64329: LD_ADDR_OWVAR 42
64333: PUSH
64334: LD_INT 17
64336: ST_TO_ADDR
64337: GO 64699
64339: LD_INT 17
64341: DOUBLE
64342: EQUAL
64343: IFTRUE 64347
64345: GO 64375
64347: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64348: LD_ADDR_OWVAR 42
64352: PUSH
64353: LD_INT 19
64355: PUSH
64356: LD_INT 23
64358: PUSH
64359: LD_INT 19
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: LIST
64366: PUSH
64367: LD_VAR 0 1
64371: ARRAY
64372: ST_TO_ADDR
64373: GO 64699
64375: LD_INT 18
64377: DOUBLE
64378: EQUAL
64379: IFTRUE 64383
64381: GO 64394
64383: POP
// bc_type := b_ext_radar ; 19 :
64384: LD_ADDR_OWVAR 42
64388: PUSH
64389: LD_INT 20
64391: ST_TO_ADDR
64392: GO 64699
64394: LD_INT 19
64396: DOUBLE
64397: EQUAL
64398: IFTRUE 64402
64400: GO 64413
64402: POP
// bc_type := b_ext_radio ; 20 :
64403: LD_ADDR_OWVAR 42
64407: PUSH
64408: LD_INT 22
64410: ST_TO_ADDR
64411: GO 64699
64413: LD_INT 20
64415: DOUBLE
64416: EQUAL
64417: IFTRUE 64421
64419: GO 64432
64421: POP
// bc_type := b_ext_siberium ; 21 :
64422: LD_ADDR_OWVAR 42
64426: PUSH
64427: LD_INT 21
64429: ST_TO_ADDR
64430: GO 64699
64432: LD_INT 21
64434: DOUBLE
64435: EQUAL
64436: IFTRUE 64440
64438: GO 64451
64440: POP
// bc_type := b_ext_computer ; 22 :
64441: LD_ADDR_OWVAR 42
64445: PUSH
64446: LD_INT 24
64448: ST_TO_ADDR
64449: GO 64699
64451: LD_INT 22
64453: DOUBLE
64454: EQUAL
64455: IFTRUE 64459
64457: GO 64470
64459: POP
// bc_type := b_ext_track ; 23 :
64460: LD_ADDR_OWVAR 42
64464: PUSH
64465: LD_INT 16
64467: ST_TO_ADDR
64468: GO 64699
64470: LD_INT 23
64472: DOUBLE
64473: EQUAL
64474: IFTRUE 64478
64476: GO 64489
64478: POP
// bc_type := b_ext_laser ; 24 :
64479: LD_ADDR_OWVAR 42
64483: PUSH
64484: LD_INT 25
64486: ST_TO_ADDR
64487: GO 64699
64489: LD_INT 24
64491: DOUBLE
64492: EQUAL
64493: IFTRUE 64497
64495: GO 64508
64497: POP
// bc_type := b_control_tower ; 25 :
64498: LD_ADDR_OWVAR 42
64502: PUSH
64503: LD_INT 36
64505: ST_TO_ADDR
64506: GO 64699
64508: LD_INT 25
64510: DOUBLE
64511: EQUAL
64512: IFTRUE 64516
64514: GO 64527
64516: POP
// bc_type := b_breastwork ; 26 :
64517: LD_ADDR_OWVAR 42
64521: PUSH
64522: LD_INT 31
64524: ST_TO_ADDR
64525: GO 64699
64527: LD_INT 26
64529: DOUBLE
64530: EQUAL
64531: IFTRUE 64535
64533: GO 64546
64535: POP
// bc_type := b_bunker ; 27 :
64536: LD_ADDR_OWVAR 42
64540: PUSH
64541: LD_INT 32
64543: ST_TO_ADDR
64544: GO 64699
64546: LD_INT 27
64548: DOUBLE
64549: EQUAL
64550: IFTRUE 64554
64552: GO 64565
64554: POP
// bc_type := b_turret ; 28 :
64555: LD_ADDR_OWVAR 42
64559: PUSH
64560: LD_INT 33
64562: ST_TO_ADDR
64563: GO 64699
64565: LD_INT 28
64567: DOUBLE
64568: EQUAL
64569: IFTRUE 64573
64571: GO 64584
64573: POP
// bc_type := b_armoury ; 29 :
64574: LD_ADDR_OWVAR 42
64578: PUSH
64579: LD_INT 4
64581: ST_TO_ADDR
64582: GO 64699
64584: LD_INT 29
64586: DOUBLE
64587: EQUAL
64588: IFTRUE 64592
64590: GO 64603
64592: POP
// bc_type := b_barracks ; 30 :
64593: LD_ADDR_OWVAR 42
64597: PUSH
64598: LD_INT 5
64600: ST_TO_ADDR
64601: GO 64699
64603: LD_INT 30
64605: DOUBLE
64606: EQUAL
64607: IFTRUE 64611
64609: GO 64622
64611: POP
// bc_type := b_solar_power ; 31 :
64612: LD_ADDR_OWVAR 42
64616: PUSH
64617: LD_INT 27
64619: ST_TO_ADDR
64620: GO 64699
64622: LD_INT 31
64624: DOUBLE
64625: EQUAL
64626: IFTRUE 64630
64628: GO 64641
64630: POP
// bc_type := b_oil_power ; 32 :
64631: LD_ADDR_OWVAR 42
64635: PUSH
64636: LD_INT 26
64638: ST_TO_ADDR
64639: GO 64699
64641: LD_INT 32
64643: DOUBLE
64644: EQUAL
64645: IFTRUE 64649
64647: GO 64660
64649: POP
// bc_type := b_siberite_power ; 33 :
64650: LD_ADDR_OWVAR 42
64654: PUSH
64655: LD_INT 28
64657: ST_TO_ADDR
64658: GO 64699
64660: LD_INT 33
64662: DOUBLE
64663: EQUAL
64664: IFTRUE 64668
64666: GO 64679
64668: POP
// bc_type := b_oil_mine ; 34 :
64669: LD_ADDR_OWVAR 42
64673: PUSH
64674: LD_INT 29
64676: ST_TO_ADDR
64677: GO 64699
64679: LD_INT 34
64681: DOUBLE
64682: EQUAL
64683: IFTRUE 64687
64685: GO 64698
64687: POP
// bc_type := b_siberite_mine ; end ;
64688: LD_ADDR_OWVAR 42
64692: PUSH
64693: LD_INT 30
64695: ST_TO_ADDR
64696: GO 64699
64698: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64699: LD_ADDR_VAR 0 8
64703: PUSH
64704: LD_VAR 0 5
64708: PPUSH
64709: LD_VAR 0 6
64713: PPUSH
64714: LD_VAR 0 3
64718: PPUSH
64719: CALL_OW 47
64723: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
64724: LD_OWVAR 42
64728: PUSH
64729: LD_INT 32
64731: PUSH
64732: LD_INT 33
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: IN
64739: IFFALSE 64755
// PlaceWeaponTurret ( b , weapon ) ;
64741: LD_VAR 0 8
64745: PPUSH
64746: LD_VAR 0 4
64750: PPUSH
64751: CALL_OW 431
// end ;
64755: LD_VAR 0 7
64759: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
64760: LD_INT 0
64762: PPUSH
64763: PPUSH
64764: PPUSH
64765: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64766: LD_ADDR_VAR 0 4
64770: PUSH
64771: LD_INT 22
64773: PUSH
64774: LD_OWVAR 2
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 2
64785: PUSH
64786: LD_INT 30
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 30
64798: PUSH
64799: LD_INT 1
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: LIST
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PPUSH
64815: CALL_OW 69
64819: ST_TO_ADDR
// if not tmp then
64820: LD_VAR 0 4
64824: NOT
64825: IFFALSE 64829
// exit ;
64827: GO 64888
// for i in tmp do
64829: LD_ADDR_VAR 0 2
64833: PUSH
64834: LD_VAR 0 4
64838: PUSH
64839: FOR_IN
64840: IFFALSE 64886
// for j = 1 to 3 do
64842: LD_ADDR_VAR 0 3
64846: PUSH
64847: DOUBLE
64848: LD_INT 1
64850: DEC
64851: ST_TO_ADDR
64852: LD_INT 3
64854: PUSH
64855: FOR_TO
64856: IFFALSE 64882
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
64858: LD_VAR 0 2
64862: PPUSH
64863: CALL_OW 274
64867: PPUSH
64868: LD_VAR 0 3
64872: PPUSH
64873: LD_INT 99999
64875: PPUSH
64876: CALL_OW 277
64880: GO 64855
64882: POP
64883: POP
64884: GO 64839
64886: POP
64887: POP
// end ;
64888: LD_VAR 0 1
64892: RET
// export function hHackSetLevel10 ; var i , j ; begin
64893: LD_INT 0
64895: PPUSH
64896: PPUSH
64897: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64898: LD_ADDR_VAR 0 2
64902: PUSH
64903: LD_INT 21
64905: PUSH
64906: LD_INT 1
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PPUSH
64913: CALL_OW 69
64917: PUSH
64918: FOR_IN
64919: IFFALSE 64971
// if IsSelected ( i ) then
64921: LD_VAR 0 2
64925: PPUSH
64926: CALL_OW 306
64930: IFFALSE 64969
// begin for j := 1 to 4 do
64932: LD_ADDR_VAR 0 3
64936: PUSH
64937: DOUBLE
64938: LD_INT 1
64940: DEC
64941: ST_TO_ADDR
64942: LD_INT 4
64944: PUSH
64945: FOR_TO
64946: IFFALSE 64967
// SetSkill ( i , j , 10 ) ;
64948: LD_VAR 0 2
64952: PPUSH
64953: LD_VAR 0 3
64957: PPUSH
64958: LD_INT 10
64960: PPUSH
64961: CALL_OW 237
64965: GO 64945
64967: POP
64968: POP
// end ;
64969: GO 64918
64971: POP
64972: POP
// end ;
64973: LD_VAR 0 1
64977: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
64978: LD_INT 0
64980: PPUSH
64981: PPUSH
64982: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
64983: LD_ADDR_VAR 0 2
64987: PUSH
64988: LD_INT 22
64990: PUSH
64991: LD_OWVAR 2
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 21
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PPUSH
65014: CALL_OW 69
65018: PUSH
65019: FOR_IN
65020: IFFALSE 65061
// begin for j := 1 to 4 do
65022: LD_ADDR_VAR 0 3
65026: PUSH
65027: DOUBLE
65028: LD_INT 1
65030: DEC
65031: ST_TO_ADDR
65032: LD_INT 4
65034: PUSH
65035: FOR_TO
65036: IFFALSE 65057
// SetSkill ( i , j , 10 ) ;
65038: LD_VAR 0 2
65042: PPUSH
65043: LD_VAR 0 3
65047: PPUSH
65048: LD_INT 10
65050: PPUSH
65051: CALL_OW 237
65055: GO 65035
65057: POP
65058: POP
// end ;
65059: GO 65019
65061: POP
65062: POP
// end ;
65063: LD_VAR 0 1
65067: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65068: LD_INT 0
65070: PPUSH
// uc_side := your_side ;
65071: LD_ADDR_OWVAR 20
65075: PUSH
65076: LD_OWVAR 2
65080: ST_TO_ADDR
// uc_nation := nation ;
65081: LD_ADDR_OWVAR 21
65085: PUSH
65086: LD_VAR 0 1
65090: ST_TO_ADDR
// InitHc ;
65091: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65095: LD_INT 0
65097: PPUSH
65098: LD_VAR 0 2
65102: PPUSH
65103: LD_VAR 0 3
65107: PPUSH
65108: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
65112: LD_VAR 0 4
65116: PPUSH
65117: LD_VAR 0 5
65121: PPUSH
65122: CALL_OW 428
65126: PUSH
65127: LD_INT 0
65129: EQUAL
65130: IFFALSE 65154
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
65132: CALL_OW 44
65136: PPUSH
65137: LD_VAR 0 4
65141: PPUSH
65142: LD_VAR 0 5
65146: PPUSH
65147: LD_INT 1
65149: PPUSH
65150: CALL_OW 48
// end ;
65154: LD_VAR 0 6
65158: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
65159: LD_INT 0
65161: PPUSH
65162: PPUSH
// uc_side := your_side ;
65163: LD_ADDR_OWVAR 20
65167: PUSH
65168: LD_OWVAR 2
65172: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
65173: LD_VAR 0 1
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: LD_INT 2
65183: PUSH
65184: LD_INT 3
65186: PUSH
65187: LD_INT 4
65189: PUSH
65190: LD_INT 5
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: IN
65200: IFFALSE 65212
// uc_nation := nation_american else
65202: LD_ADDR_OWVAR 21
65206: PUSH
65207: LD_INT 1
65209: ST_TO_ADDR
65210: GO 65255
// if chassis in [ 11 , 12 , 13 , 14 ] then
65212: LD_VAR 0 1
65216: PUSH
65217: LD_INT 11
65219: PUSH
65220: LD_INT 12
65222: PUSH
65223: LD_INT 13
65225: PUSH
65226: LD_INT 14
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: IN
65235: IFFALSE 65247
// uc_nation := nation_arabian else
65237: LD_ADDR_OWVAR 21
65241: PUSH
65242: LD_INT 2
65244: ST_TO_ADDR
65245: GO 65255
// uc_nation := nation_russian ;
65247: LD_ADDR_OWVAR 21
65251: PUSH
65252: LD_INT 3
65254: ST_TO_ADDR
// vc_chassis := chassis ;
65255: LD_ADDR_OWVAR 37
65259: PUSH
65260: LD_VAR 0 1
65264: ST_TO_ADDR
// vc_engine := engine ;
65265: LD_ADDR_OWVAR 39
65269: PUSH
65270: LD_VAR 0 2
65274: ST_TO_ADDR
// vc_control := control ;
65275: LD_ADDR_OWVAR 38
65279: PUSH
65280: LD_VAR 0 3
65284: ST_TO_ADDR
// vc_weapon := weapon ;
65285: LD_ADDR_OWVAR 40
65289: PUSH
65290: LD_VAR 0 4
65294: ST_TO_ADDR
// un := CreateVehicle ;
65295: LD_ADDR_VAR 0 8
65299: PUSH
65300: CALL_OW 45
65304: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
65305: LD_VAR 0 8
65309: PPUSH
65310: LD_INT 0
65312: PPUSH
65313: LD_INT 5
65315: PPUSH
65316: CALL_OW 12
65320: PPUSH
65321: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
65325: LD_VAR 0 8
65329: PPUSH
65330: LD_VAR 0 5
65334: PPUSH
65335: LD_VAR 0 6
65339: PPUSH
65340: LD_INT 1
65342: PPUSH
65343: CALL_OW 48
// end ;
65347: LD_VAR 0 7
65351: RET
// export hInvincible ; every 1 do
65352: GO 65354
65354: DISABLE
// hInvincible := [ ] ;
65355: LD_ADDR_EXP 163
65359: PUSH
65360: EMPTY
65361: ST_TO_ADDR
65362: END
// every 10 do var i ;
65363: GO 65365
65365: DISABLE
65366: LD_INT 0
65368: PPUSH
// begin enable ;
65369: ENABLE
// if not hInvincible then
65370: LD_EXP 163
65374: NOT
65375: IFFALSE 65379
// exit ;
65377: GO 65423
// for i in hInvincible do
65379: LD_ADDR_VAR 0 1
65383: PUSH
65384: LD_EXP 163
65388: PUSH
65389: FOR_IN
65390: IFFALSE 65421
// if GetLives ( i ) < 1000 then
65392: LD_VAR 0 1
65396: PPUSH
65397: CALL_OW 256
65401: PUSH
65402: LD_INT 1000
65404: LESS
65405: IFFALSE 65419
// SetLives ( i , 1000 ) ;
65407: LD_VAR 0 1
65411: PPUSH
65412: LD_INT 1000
65414: PPUSH
65415: CALL_OW 234
65419: GO 65389
65421: POP
65422: POP
// end ;
65423: PPOPN 1
65425: END
// export function hHackInvincible ; var i ; begin
65426: LD_INT 0
65428: PPUSH
65429: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65430: LD_ADDR_VAR 0 2
65434: PUSH
65435: LD_INT 2
65437: PUSH
65438: LD_INT 21
65440: PUSH
65441: LD_INT 1
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 21
65450: PUSH
65451: LD_INT 2
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: LIST
65462: PPUSH
65463: CALL_OW 69
65467: PUSH
65468: FOR_IN
65469: IFFALSE 65530
// if IsSelected ( i ) then
65471: LD_VAR 0 2
65475: PPUSH
65476: CALL_OW 306
65480: IFFALSE 65528
// begin if i in hInvincible then
65482: LD_VAR 0 2
65486: PUSH
65487: LD_EXP 163
65491: IN
65492: IFFALSE 65512
// hInvincible := hInvincible diff i else
65494: LD_ADDR_EXP 163
65498: PUSH
65499: LD_EXP 163
65503: PUSH
65504: LD_VAR 0 2
65508: DIFF
65509: ST_TO_ADDR
65510: GO 65528
// hInvincible := hInvincible union i ;
65512: LD_ADDR_EXP 163
65516: PUSH
65517: LD_EXP 163
65521: PUSH
65522: LD_VAR 0 2
65526: UNION
65527: ST_TO_ADDR
// end ;
65528: GO 65468
65530: POP
65531: POP
// end ;
65532: LD_VAR 0 1
65536: RET
// export function hHackInvisible ; var i , j ; begin
65537: LD_INT 0
65539: PPUSH
65540: PPUSH
65541: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65542: LD_ADDR_VAR 0 2
65546: PUSH
65547: LD_INT 21
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: EMPTY
65554: LIST
65555: LIST
65556: PPUSH
65557: CALL_OW 69
65561: PUSH
65562: FOR_IN
65563: IFFALSE 65587
// if IsSelected ( i ) then
65565: LD_VAR 0 2
65569: PPUSH
65570: CALL_OW 306
65574: IFFALSE 65585
// ComForceInvisible ( i ) ;
65576: LD_VAR 0 2
65580: PPUSH
65581: CALL_OW 496
65585: GO 65562
65587: POP
65588: POP
// end ;
65589: LD_VAR 0 1
65593: RET
// export function hHackChangeYourSide ; begin
65594: LD_INT 0
65596: PPUSH
// if your_side = 8 then
65597: LD_OWVAR 2
65601: PUSH
65602: LD_INT 8
65604: EQUAL
65605: IFFALSE 65617
// your_side := 0 else
65607: LD_ADDR_OWVAR 2
65611: PUSH
65612: LD_INT 0
65614: ST_TO_ADDR
65615: GO 65631
// your_side := your_side + 1 ;
65617: LD_ADDR_OWVAR 2
65621: PUSH
65622: LD_OWVAR 2
65626: PUSH
65627: LD_INT 1
65629: PLUS
65630: ST_TO_ADDR
// end ;
65631: LD_VAR 0 1
65635: RET
// export function hHackChangeUnitSide ; var i , j ; begin
65636: LD_INT 0
65638: PPUSH
65639: PPUSH
65640: PPUSH
// for i in all_units do
65641: LD_ADDR_VAR 0 2
65645: PUSH
65646: LD_OWVAR 3
65650: PUSH
65651: FOR_IN
65652: IFFALSE 65730
// if IsSelected ( i ) then
65654: LD_VAR 0 2
65658: PPUSH
65659: CALL_OW 306
65663: IFFALSE 65728
// begin j := GetSide ( i ) ;
65665: LD_ADDR_VAR 0 3
65669: PUSH
65670: LD_VAR 0 2
65674: PPUSH
65675: CALL_OW 255
65679: ST_TO_ADDR
// if j = 8 then
65680: LD_VAR 0 3
65684: PUSH
65685: LD_INT 8
65687: EQUAL
65688: IFFALSE 65700
// j := 0 else
65690: LD_ADDR_VAR 0 3
65694: PUSH
65695: LD_INT 0
65697: ST_TO_ADDR
65698: GO 65714
// j := j + 1 ;
65700: LD_ADDR_VAR 0 3
65704: PUSH
65705: LD_VAR 0 3
65709: PUSH
65710: LD_INT 1
65712: PLUS
65713: ST_TO_ADDR
// SetSide ( i , j ) ;
65714: LD_VAR 0 2
65718: PPUSH
65719: LD_VAR 0 3
65723: PPUSH
65724: CALL_OW 235
// end ;
65728: GO 65651
65730: POP
65731: POP
// end ;
65732: LD_VAR 0 1
65736: RET
// export function hHackFog ; begin
65737: LD_INT 0
65739: PPUSH
// FogOff ( true ) ;
65740: LD_INT 1
65742: PPUSH
65743: CALL_OW 344
// end ;
65747: LD_VAR 0 1
65751: RET
// export function hHackTeleport ( unit , x , y ) ; begin
65752: LD_INT 0
65754: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65755: LD_VAR 0 1
65759: PPUSH
65760: LD_VAR 0 2
65764: PPUSH
65765: LD_VAR 0 3
65769: PPUSH
65770: LD_INT 1
65772: PPUSH
65773: LD_INT 1
65775: PPUSH
65776: CALL_OW 483
// CenterOnXY ( x , y ) ;
65780: LD_VAR 0 2
65784: PPUSH
65785: LD_VAR 0 3
65789: PPUSH
65790: CALL_OW 84
// end ;
65794: LD_VAR 0 4
65798: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65799: LD_INT 0
65801: PPUSH
65802: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65803: LD_VAR 0 1
65807: NOT
65808: PUSH
65809: LD_VAR 0 2
65813: PPUSH
65814: LD_VAR 0 3
65818: PPUSH
65819: CALL_OW 488
65823: NOT
65824: OR
65825: PUSH
65826: LD_VAR 0 1
65830: PPUSH
65831: CALL_OW 266
65835: PUSH
65836: LD_INT 3
65838: NONEQUAL
65839: PUSH
65840: LD_VAR 0 1
65844: PPUSH
65845: CALL_OW 247
65849: PUSH
65850: LD_INT 1
65852: EQUAL
65853: NOT
65854: AND
65855: OR
65856: IFFALSE 65860
// exit ;
65858: GO 66009
// if GetType ( factory ) = unit_human then
65860: LD_VAR 0 1
65864: PPUSH
65865: CALL_OW 247
65869: PUSH
65870: LD_INT 1
65872: EQUAL
65873: IFFALSE 65890
// factory := IsInUnit ( factory ) ;
65875: LD_ADDR_VAR 0 1
65879: PUSH
65880: LD_VAR 0 1
65884: PPUSH
65885: CALL_OW 310
65889: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65890: LD_VAR 0 1
65894: PPUSH
65895: CALL_OW 266
65899: PUSH
65900: LD_INT 3
65902: NONEQUAL
65903: IFFALSE 65907
// exit ;
65905: GO 66009
// if HexInfo ( x , y ) = factory then
65907: LD_VAR 0 2
65911: PPUSH
65912: LD_VAR 0 3
65916: PPUSH
65917: CALL_OW 428
65921: PUSH
65922: LD_VAR 0 1
65926: EQUAL
65927: IFFALSE 65954
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
65929: LD_ADDR_EXP 164
65933: PUSH
65934: LD_EXP 164
65938: PPUSH
65939: LD_VAR 0 1
65943: PPUSH
65944: LD_INT 0
65946: PPUSH
65947: CALL_OW 1
65951: ST_TO_ADDR
65952: GO 66005
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
65954: LD_ADDR_EXP 164
65958: PUSH
65959: LD_EXP 164
65963: PPUSH
65964: LD_VAR 0 1
65968: PPUSH
65969: LD_VAR 0 1
65973: PPUSH
65974: CALL_OW 255
65978: PUSH
65979: LD_VAR 0 1
65983: PUSH
65984: LD_VAR 0 2
65988: PUSH
65989: LD_VAR 0 3
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: PPUSH
66000: CALL_OW 1
66004: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66005: CALL 66014 0 0
// end ;
66009: LD_VAR 0 4
66013: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
66014: LD_INT 0
66016: PPUSH
66017: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66018: LD_STRING resetFactoryWaypoint();
66020: PPUSH
66021: CALL_OW 559
// if factoryWaypoints then
66025: LD_EXP 164
66029: IFFALSE 66152
// begin for i := 1 to factoryWaypoints do
66031: LD_ADDR_VAR 0 2
66035: PUSH
66036: DOUBLE
66037: LD_INT 1
66039: DEC
66040: ST_TO_ADDR
66041: LD_EXP 164
66045: PUSH
66046: FOR_TO
66047: IFFALSE 66150
// if factoryWaypoints [ i ] then
66049: LD_EXP 164
66053: PUSH
66054: LD_VAR 0 2
66058: ARRAY
66059: IFFALSE 66148
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
66061: LD_STRING setFactoryWaypointXY(
66063: PUSH
66064: LD_EXP 164
66068: PUSH
66069: LD_VAR 0 2
66073: ARRAY
66074: PUSH
66075: LD_INT 1
66077: ARRAY
66078: STR
66079: PUSH
66080: LD_STRING ,
66082: STR
66083: PUSH
66084: LD_EXP 164
66088: PUSH
66089: LD_VAR 0 2
66093: ARRAY
66094: PUSH
66095: LD_INT 2
66097: ARRAY
66098: STR
66099: PUSH
66100: LD_STRING ,
66102: STR
66103: PUSH
66104: LD_EXP 164
66108: PUSH
66109: LD_VAR 0 2
66113: ARRAY
66114: PUSH
66115: LD_INT 3
66117: ARRAY
66118: STR
66119: PUSH
66120: LD_STRING ,
66122: STR
66123: PUSH
66124: LD_EXP 164
66128: PUSH
66129: LD_VAR 0 2
66133: ARRAY
66134: PUSH
66135: LD_INT 4
66137: ARRAY
66138: STR
66139: PUSH
66140: LD_STRING )
66142: STR
66143: PPUSH
66144: CALL_OW 559
66148: GO 66046
66150: POP
66151: POP
// end ; end ;
66152: LD_VAR 0 1
66156: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarhouseGatheringPoint ( warehouse , x , y ) ; begin
66157: LD_INT 0
66159: PPUSH
// if HexInfo ( x , y ) = warehouse then
66160: LD_VAR 0 2
66164: PPUSH
66165: LD_VAR 0 3
66169: PPUSH
66170: CALL_OW 428
66174: PUSH
66175: LD_VAR 0 1
66179: EQUAL
66180: IFFALSE 66207
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66182: LD_ADDR_EXP 165
66186: PUSH
66187: LD_EXP 165
66191: PPUSH
66192: LD_VAR 0 1
66196: PPUSH
66197: LD_INT 0
66199: PPUSH
66200: CALL_OW 1
66204: ST_TO_ADDR
66205: GO 66258
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66207: LD_ADDR_EXP 165
66211: PUSH
66212: LD_EXP 165
66216: PPUSH
66217: LD_VAR 0 1
66221: PPUSH
66222: LD_VAR 0 1
66226: PPUSH
66227: CALL_OW 255
66231: PUSH
66232: LD_VAR 0 1
66236: PUSH
66237: LD_VAR 0 2
66241: PUSH
66242: LD_VAR 0 3
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: PPUSH
66253: CALL_OW 1
66257: ST_TO_ADDR
// UpdateWarhouseGatheringPoints ;
66258: CALL 66267 0 0
// end ;
66262: LD_VAR 0 4
66266: RET
// export function UpdateWarhouseGatheringPoints ( ) ; var i ; begin
66267: LD_INT 0
66269: PPUSH
66270: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66271: LD_STRING resetWarehouseGatheringPoints();
66273: PPUSH
66274: CALL_OW 559
// if warehouseGatheringPoints then
66278: LD_EXP 165
66282: IFFALSE 66405
// begin for i := 1 to warehouseGatheringPoints do
66284: LD_ADDR_VAR 0 2
66288: PUSH
66289: DOUBLE
66290: LD_INT 1
66292: DEC
66293: ST_TO_ADDR
66294: LD_EXP 165
66298: PUSH
66299: FOR_TO
66300: IFFALSE 66403
// if warehouseGatheringPoints [ i ] then
66302: LD_EXP 165
66306: PUSH
66307: LD_VAR 0 2
66311: ARRAY
66312: IFFALSE 66401
// ToLua ( setWarhouseGatheringPointXY( & warehouseGatheringPoints [ i ] [ 1 ] & , & warehouseGatheringPoints [ i ] [ 2 ] & , & warehouseGatheringPoints [ i ] [ 3 ] & , & warehouseGatheringPoints [ i ] [ 4 ] & ) ) ;
66314: LD_STRING setWarhouseGatheringPointXY(
66316: PUSH
66317: LD_EXP 165
66321: PUSH
66322: LD_VAR 0 2
66326: ARRAY
66327: PUSH
66328: LD_INT 1
66330: ARRAY
66331: STR
66332: PUSH
66333: LD_STRING ,
66335: STR
66336: PUSH
66337: LD_EXP 165
66341: PUSH
66342: LD_VAR 0 2
66346: ARRAY
66347: PUSH
66348: LD_INT 2
66350: ARRAY
66351: STR
66352: PUSH
66353: LD_STRING ,
66355: STR
66356: PUSH
66357: LD_EXP 165
66361: PUSH
66362: LD_VAR 0 2
66366: ARRAY
66367: PUSH
66368: LD_INT 3
66370: ARRAY
66371: STR
66372: PUSH
66373: LD_STRING ,
66375: STR
66376: PUSH
66377: LD_EXP 165
66381: PUSH
66382: LD_VAR 0 2
66386: ARRAY
66387: PUSH
66388: LD_INT 4
66390: ARRAY
66391: STR
66392: PUSH
66393: LD_STRING )
66395: STR
66396: PPUSH
66397: CALL_OW 559
66401: GO 66299
66403: POP
66404: POP
// end ; end ;
66405: LD_VAR 0 1
66409: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
66410: LD_EXP 165
66414: IFFALSE 67043
66416: GO 66418
66418: DISABLE
66419: LD_INT 0
66421: PPUSH
66422: PPUSH
66423: PPUSH
66424: PPUSH
66425: PPUSH
66426: PPUSH
66427: PPUSH
66428: PPUSH
66429: PPUSH
// begin enable ;
66430: ENABLE
// list := warehouseGatheringPoints diff 0 ;
66431: LD_ADDR_VAR 0 3
66435: PUSH
66436: LD_EXP 165
66440: PUSH
66441: LD_INT 0
66443: DIFF
66444: ST_TO_ADDR
// for i := 1 to list do
66445: LD_ADDR_VAR 0 1
66449: PUSH
66450: DOUBLE
66451: LD_INT 1
66453: DEC
66454: ST_TO_ADDR
66455: LD_VAR 0 3
66459: PUSH
66460: FOR_TO
66461: IFFALSE 67041
// begin if not list [ i ] then
66463: LD_VAR 0 3
66467: PUSH
66468: LD_VAR 0 1
66472: ARRAY
66473: NOT
66474: IFFALSE 66478
// continue ;
66476: GO 66460
// depot := list [ i ] [ 2 ] ;
66478: LD_ADDR_VAR 0 8
66482: PUSH
66483: LD_VAR 0 3
66487: PUSH
66488: LD_VAR 0 1
66492: ARRAY
66493: PUSH
66494: LD_INT 2
66496: ARRAY
66497: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
66498: LD_ADDR_VAR 0 5
66502: PUSH
66503: LD_VAR 0 3
66507: PUSH
66508: LD_VAR 0 1
66512: ARRAY
66513: PUSH
66514: LD_INT 1
66516: ARRAY
66517: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
66518: LD_VAR 0 8
66522: PPUSH
66523: CALL_OW 301
66527: PUSH
66528: LD_VAR 0 5
66532: PUSH
66533: LD_VAR 0 8
66537: PPUSH
66538: CALL_OW 255
66542: NONEQUAL
66543: OR
66544: IFFALSE 66573
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
66546: LD_ADDR_EXP 165
66550: PUSH
66551: LD_EXP 165
66555: PPUSH
66556: LD_VAR 0 8
66560: PPUSH
66561: LD_INT 0
66563: PPUSH
66564: CALL_OW 1
66568: ST_TO_ADDR
// exit ;
66569: POP
66570: POP
66571: GO 67043
// end ; x := list [ i ] [ 3 ] ;
66573: LD_ADDR_VAR 0 6
66577: PUSH
66578: LD_VAR 0 3
66582: PUSH
66583: LD_VAR 0 1
66587: ARRAY
66588: PUSH
66589: LD_INT 3
66591: ARRAY
66592: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
66593: LD_ADDR_VAR 0 7
66597: PUSH
66598: LD_VAR 0 3
66602: PUSH
66603: LD_VAR 0 1
66607: ARRAY
66608: PUSH
66609: LD_INT 4
66611: ARRAY
66612: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
66613: LD_ADDR_VAR 0 9
66617: PUSH
66618: LD_VAR 0 6
66622: PPUSH
66623: LD_VAR 0 7
66627: PPUSH
66628: LD_INT 12
66630: PPUSH
66631: CALL 49885 0 3
66635: ST_TO_ADDR
// if not cratesNearbyPoint then
66636: LD_VAR 0 9
66640: NOT
66641: IFFALSE 66647
// exit ;
66643: POP
66644: POP
66645: GO 67043
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
66647: LD_ADDR_VAR 0 4
66651: PUSH
66652: LD_INT 22
66654: PUSH
66655: LD_VAR 0 5
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: LD_INT 3
66666: PUSH
66667: LD_INT 60
66669: PUSH
66670: EMPTY
66671: LIST
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 2
66679: PUSH
66680: LD_INT 25
66682: PUSH
66683: LD_INT 2
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: LD_INT 25
66692: PUSH
66693: LD_INT 16
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: LIST
66709: PPUSH
66710: CALL_OW 69
66714: PUSH
66715: LD_VAR 0 8
66719: PPUSH
66720: CALL_OW 313
66724: PPUSH
66725: LD_INT 3
66727: PUSH
66728: LD_INT 60
66730: PUSH
66731: EMPTY
66732: LIST
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 2
66740: PUSH
66741: LD_INT 25
66743: PUSH
66744: LD_INT 2
66746: PUSH
66747: EMPTY
66748: LIST
66749: LIST
66750: PUSH
66751: LD_INT 25
66753: PUSH
66754: LD_INT 16
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: LIST
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PPUSH
66770: CALL_OW 72
66774: UNION
66775: ST_TO_ADDR
// if tmp then
66776: LD_VAR 0 4
66780: IFFALSE 66860
// begin tmp := ShrinkArray ( tmp , 3 ) ;
66782: LD_ADDR_VAR 0 4
66786: PUSH
66787: LD_VAR 0 4
66791: PPUSH
66792: LD_INT 3
66794: PPUSH
66795: CALL 47852 0 2
66799: ST_TO_ADDR
// for j in tmp do
66800: LD_ADDR_VAR 0 2
66804: PUSH
66805: LD_VAR 0 4
66809: PUSH
66810: FOR_IN
66811: IFFALSE 66854
// begin if IsInUnit ( j ) then
66813: LD_VAR 0 2
66817: PPUSH
66818: CALL_OW 310
66822: IFFALSE 66833
// ComExit ( j ) ;
66824: LD_VAR 0 2
66828: PPUSH
66829: CALL 47935 0 1
// AddComCollect ( j , x , y ) ;
66833: LD_VAR 0 2
66837: PPUSH
66838: LD_VAR 0 6
66842: PPUSH
66843: LD_VAR 0 7
66847: PPUSH
66848: CALL_OW 177
// end ;
66852: GO 66810
66854: POP
66855: POP
// exit ;
66856: POP
66857: POP
66858: GO 67043
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
66860: LD_ADDR_VAR 0 4
66864: PUSH
66865: LD_INT 22
66867: PUSH
66868: LD_VAR 0 5
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 2
66879: PUSH
66880: LD_INT 34
66882: PUSH
66883: LD_INT 12
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 34
66892: PUSH
66893: LD_INT 51
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 34
66902: PUSH
66903: LD_INT 32
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 34
66912: PUSH
66913: LD_EXP 88
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PPUSH
66933: CALL_OW 69
66937: ST_TO_ADDR
// if tmp then
66938: LD_VAR 0 4
66942: IFFALSE 67039
// begin for j in tmp do
66944: LD_ADDR_VAR 0 2
66948: PUSH
66949: LD_VAR 0 4
66953: PUSH
66954: FOR_IN
66955: IFFALSE 67037
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
66957: LD_VAR 0 1
66961: PPUSH
66962: CALL_OW 261
66966: PUSH
66967: LD_INT 20
66969: GREATER
66970: PUSH
66971: LD_VAR 0 1
66975: PPUSH
66976: CALL_OW 314
66980: NOT
66981: AND
66982: PUSH
66983: LD_VAR 0 1
66987: PPUSH
66988: CALL_OW 263
66992: PUSH
66993: LD_INT 1
66995: NONEQUAL
66996: PUSH
66997: LD_VAR 0 1
67001: PPUSH
67002: CALL_OW 311
67006: OR
67007: AND
67008: IFFALSE 67035
// begin ComCollect ( j , x , y ) ;
67010: LD_VAR 0 2
67014: PPUSH
67015: LD_VAR 0 6
67019: PPUSH
67020: LD_VAR 0 7
67024: PPUSH
67025: CALL_OW 117
// exit ;
67029: POP
67030: POP
67031: POP
67032: POP
67033: GO 67043
// end ;
67035: GO 66954
67037: POP
67038: POP
// end ; end ;
67039: GO 66460
67041: POP
67042: POP
// end ;
67043: PPOPN 9
67045: END
