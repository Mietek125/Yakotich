// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// SetBname ( Ovsyenko , Ovsyenko ) ;
   8: LD_INT 74
  10: PPUSH
  11: LD_STRING Ovsyenko
  13: PPUSH
  14: CALL_OW 500
// AnimateTrees ( true ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 573
// Randomize ;
  25: CALL_OW 10
// RandomizeAll ;
  29: CALL_OW 11
// InitGlobalVariables ;
  33: CALL 248 0 0
// InitRussian ;
  37: CALL 1474 0 0
// Action ;
  41: CALL 5522 0 0
// InitAmerican ;
  45: CALL 4495 0 0
// InitTerminal ;
  49: CALL 3902 0 0
// DebugMode ;
  53: CALL 211 0 0
// game_speed = 7 ;
  57: LD_ADDR_OWVAR 65
  61: PUSH
  62: LD_INT 7
  64: ST_TO_ADDR
// end ;
  65: END
// export DimitriCrew , YakotichCrew , BurlakCrew , SikorskiTeam , WestTerminalCrew , MainTerminalCrew , newAttackers , Attackers ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Dimitri , Ivan , Jegor , Grigori , Anton , RusSol ; export Sevi , SeviGuy1 , SeviGuy2 , SeviGuy3 ; export Burlak , Karamazov , Petrovova , Lipshchin , Gleb , Titov , Petrosyan , Dolgov ; export BurlakVeh , KaramazovVeh , BurlakCrewVeh1 , BurlakCrewVeh2 , BurlakCrewVeh3 , BurlakCrewVeh4 , BurlakCrewVeh5 , BurlakCrewVeh6 ; export Sikorski , SikorskiMeat , Truman , Bobby , Cyrus , Gary , Lynch , McCreery , Walker , Jilian , Turner , Houten , NorthSold ; export Morozov , Platonov ; export BurlakTime ; export debug ; export mission_prefix ; export cutscene_ended , ovsyenko_captured , start_ended , lab_seen , lab_captured , rocket_researched , prediction_researched , buldozer_researched , flametank_saved , siberit_excavated , sikorski_dead , everything_researched , crane_triggered , crane_researched , end_of_the_mission ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 66
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// cutscene_ended = false ;
  77: LD_ADDR_EXP 67
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// ovsyenko_captured = false ;
  85: LD_ADDR_EXP 68
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// start_ended = false ;
  93: LD_ADDR_EXP 69
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// rocket_researched = false ;
 101: LD_ADDR_EXP 72
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// buldozer_researched = false ;
 109: LD_ADDR_EXP 74
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// prediction_researched = false ;
 117: LD_ADDR_EXP 73
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// flametank_saved = false ;
 125: LD_ADDR_EXP 75
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// crane_triggered = false ;
 133: LD_ADDR_EXP 79
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// crane_researched = false ;
 141: LD_ADDR_EXP 80
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lab_seen = false ;
 149: LD_ADDR_EXP 70
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// lab_captured = false ;
 157: LD_ADDR_EXP 71
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// everything_researched = false ;
 165: LD_ADDR_EXP 78
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// end_of_the_mission = false ;
 173: LD_ADDR_EXP 81
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// BurlakTime := [ 10 10$0 , 12 12$30 , 15 15$0 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 64
 185: PUSH
 186: LD_INT 21000
 188: PUSH
 189: LD_INT 26250
 191: PUSH
 192: LD_INT 31500
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: ST_TO_ADDR
// end ;
 206: LD_VAR 0 1
 210: RET
// export function DebugMode ; begin
 211: LD_INT 0
 213: PPUSH
// if Debug = true then
 214: LD_EXP 65
 218: PUSH
 219: LD_INT 1
 221: EQUAL
 222: IFFALSE 243
// begin Difficulty := 3 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 3
 231: ST_TO_ADDR
// TurnFogOff ( ) ;
 232: CALL_OW 537
// FogOff ( 3 ) ;
 236: LD_INT 3
 238: PPUSH
 239: CALL_OW 344
// end ; end ; end_of_file
 243: LD_VAR 0 1
 247: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
 248: LD_INT 0
 250: PPUSH
// ar_miner := 81 ;
 251: LD_ADDR_EXP 89
 255: PUSH
 256: LD_INT 81
 258: ST_TO_ADDR
// ar_crane := 88 ;
 259: LD_ADDR_EXP 88
 263: PUSH
 264: LD_INT 88
 266: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 267: LD_ADDR_EXP 83
 271: PUSH
 272: LD_INT 89
 274: ST_TO_ADDR
// us_hack := 99 ;
 275: LD_ADDR_EXP 84
 279: PUSH
 280: LD_INT 99
 282: ST_TO_ADDR
// us_artillery := 97 ;
 283: LD_ADDR_EXP 85
 287: PUSH
 288: LD_INT 97
 290: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 291: LD_ADDR_EXP 86
 295: PUSH
 296: LD_INT 91
 298: ST_TO_ADDR
// ar_mortar := 92 ;
 299: LD_ADDR_EXP 87
 303: PUSH
 304: LD_INT 92
 306: ST_TO_ADDR
// ru_flamethrower := 93 ;
 307: LD_ADDR_EXP 90
 311: PUSH
 312: LD_INT 93
 314: ST_TO_ADDR
// ru_radar := 98 ;
 315: LD_ADDR_EXP 82
 319: PUSH
 320: LD_INT 98
 322: ST_TO_ADDR
// tech_Artillery := 80 ;
 323: LD_ADDR_EXP 91
 327: PUSH
 328: LD_INT 80
 330: ST_TO_ADDR
// tech_RadMat := 81 ;
 331: LD_ADDR_EXP 92
 335: PUSH
 336: LD_INT 81
 338: ST_TO_ADDR
// tech_BasicTools := 82 ;
 339: LD_ADDR_EXP 93
 343: PUSH
 344: LD_INT 82
 346: ST_TO_ADDR
// tech_Cargo := 83 ;
 347: LD_ADDR_EXP 94
 351: PUSH
 352: LD_INT 83
 354: ST_TO_ADDR
// tech_Track := 84 ;
 355: LD_ADDR_EXP 95
 359: PUSH
 360: LD_INT 84
 362: ST_TO_ADDR
// tech_Crane := 85 ;
 363: LD_ADDR_EXP 96
 367: PUSH
 368: LD_INT 85
 370: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 371: LD_ADDR_EXP 97
 375: PUSH
 376: LD_INT 86
 378: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 379: LD_ADDR_EXP 98
 383: PUSH
 384: LD_INT 87
 386: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
 387: LD_ADDR_EXP 99
 391: PUSH
 392: LD_INT 88
 394: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
 395: LD_ADDR_EXP 100
 399: PUSH
 400: LD_INT 90
 402: ST_TO_ADDR
// class_mastodont := 31 ;
 403: LD_ADDR_EXP 101
 407: PUSH
 408: LD_INT 31
 410: ST_TO_ADDR
// class_horse := 21 ;
 411: LD_ADDR_EXP 102
 415: PUSH
 416: LD_INT 21
 418: ST_TO_ADDR
// end ; end_of_file
 419: LD_VAR 0 1
 423: RET
// export function siblo ( side ) ; var i , tmp ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
 428: PPUSH
// result := 0 ;
 429: LD_ADDR_VAR 0 2
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: LD_INT 22
 444: PUSH
 445: LD_VAR 0 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: ST_TO_ADDR
// if not tmp then
 491: LD_VAR 0 4
 495: NOT
 496: IFFALSE 500
// exit ;
 498: GO 546
// for i in tmp do
 500: LD_ADDR_VAR 0 3
 504: PUSH
 505: LD_VAR 0 4
 509: PUSH
 510: FOR_IN
 511: IFFALSE 544
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
 513: LD_ADDR_VAR 0 2
 517: PUSH
 518: LD_VAR 0 2
 522: PUSH
 523: LD_VAR 0 3
 527: PPUSH
 528: CALL_OW 274
 532: PPUSH
 533: LD_INT 3
 535: PPUSH
 536: CALL_OW 275
 540: PLUS
 541: ST_TO_ADDR
 542: GO 510
 544: POP
 545: POP
// end ;
 546: LD_VAR 0 2
 550: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 551: LD_INT 0
 553: PPUSH
 554: PPUSH
 555: PPUSH
// uc_side := GetSide ( b ) ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_VAR 0 2
 565: PPUSH
 566: CALL_OW 255
 570: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_VAR 0 2
 580: PPUSH
 581: CALL_OW 248
 585: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 586: LD_ADDR_VAR 0 5
 590: PUSH
 591: LD_VAR 0 2
 595: PPUSH
 596: CALL_OW 254
 600: PUSH
 601: LD_INT 3
 603: MINUS
 604: ST_TO_ADDR
// if dir < 0 then
 605: LD_VAR 0 5
 609: PUSH
 610: LD_INT 0
 612: LESS
 613: IFFALSE 629
// dir := 6 + dir ;
 615: LD_ADDR_VAR 0 5
 619: PUSH
 620: LD_INT 6
 622: PUSH
 623: LD_VAR 0 5
 627: PLUS
 628: ST_TO_ADDR
// un := CreateHuman ;
 629: LD_ADDR_VAR 0 4
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// SetDir ( un , dir ) ;
 639: LD_VAR 0 4
 643: PPUSH
 644: LD_VAR 0 5
 648: PPUSH
 649: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 653: LD_VAR 0 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 52
// end ;
 667: LD_VAR 0 3
 671: RET
// export function GetClassFromStart ( ident ) ; var un ; begin
 672: LD_INT 0
 674: PPUSH
 675: PPUSH
// un := NewCharacter ( ident ) ;
 676: LD_ADDR_VAR 0 3
 680: PUSH
 681: LD_VAR 0 1
 685: PPUSH
 686: CALL_OW 25
 690: ST_TO_ADDR
// if not un then
 691: LD_VAR 0 3
 695: NOT
 696: IFFALSE 700
// exit ;
 698: GO 724
// result := GetClass ( un ) ;
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: LD_VAR 0 3
 709: PPUSH
 710: CALL_OW 257
 714: ST_TO_ADDR
// DestroyUnit ( un ) ;
 715: LD_VAR 0 3
 719: PPUSH
 720: CALL_OW 65
// end ;
 724: LD_VAR 0 2
 728: RET
// every 1 trigger IsSelected ( Kvantovy ) do
 729: LD_INT 160
 731: PPUSH
 732: CALL_OW 306
 736: IFFALSE 833
 738: GO 740
 740: DISABLE
// begin KvantovyExp ( [ 1 , 2 , 3 , 4 ] ) ;
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: LD_INT 3
 749: PUSH
 750: LD_INT 4
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: PPUSH
 759: CALL 834 0 1
// Wait ( 0 0$05 ) ;
 763: LD_INT 175
 765: PPUSH
 766: CALL_OW 67
// Say ( Kvantovy , 3Kvantovy-Sikret ) ;
 770: LD_INT 160
 772: PPUSH
 773: LD_STRING 3Kvantovy-Sikret
 775: PPUSH
 776: CALL_OW 88
// TeleportUnit ( Kvantovy , 120 , 237 , 300 , true ) ;
 780: LD_INT 160
 782: PPUSH
 783: LD_INT 120
 785: PPUSH
 786: LD_INT 237
 788: PPUSH
 789: LD_INT 300
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: CALL_OW 483
// Wait ( 0 0$05 ) ;
 799: LD_INT 175
 801: PPUSH
 802: CALL_OW 67
// RemoveUnit ( Kvantovy ) ;
 806: LD_INT 160
 808: PPUSH
 809: CALL_OW 64
// SaveVariable ( Kvantovy , KvantovySaved ) ;
 813: LD_INT 160
 815: PPUSH
 816: LD_STRING KvantovySaved
 818: PPUSH
 819: CALL_OW 39
// SaveCharacters ( Kvantovy , Kvantovy ) ;
 823: LD_INT 160
 825: PPUSH
 826: LD_STRING Kvantovy
 828: PPUSH
 829: CALL_OW 38
// end ;
 833: END
// export function KvantovyExp ( q ) ; var dec , q1 ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
// dec = SelectiveQuery ( KvantovyQuery , q ) ;
 839: LD_ADDR_VAR 0 3
 843: PUSH
 844: LD_STRING KvantovyQuery
 846: PPUSH
 847: LD_VAR 0 1
 851: PPUSH
 852: CALL_OW 98
 856: ST_TO_ADDR
// case dec of 1 :
 857: LD_VAR 0 3
 861: PUSH
 862: LD_INT 1
 864: DOUBLE
 865: EQUAL
 866: IFTRUE 870
 868: GO 888
 870: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 2000 ) ;
 871: LD_EXP 9
 875: PPUSH
 876: LD_INT 1
 878: PPUSH
 879: LD_INT 2000
 881: PPUSH
 882: CALL_OW 591
// end ; 2 :
 886: GO 967
 888: LD_INT 2
 890: DOUBLE
 891: EQUAL
 892: IFTRUE 896
 894: GO 914
 896: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 2000 ) ;
 897: LD_EXP 9
 901: PPUSH
 902: LD_INT 2
 904: PPUSH
 905: LD_INT 2000
 907: PPUSH
 908: CALL_OW 591
// end ; 3 :
 912: GO 967
 914: LD_INT 3
 916: DOUBLE
 917: EQUAL
 918: IFTRUE 922
 920: GO 940
 922: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 2000 ) ;
 923: LD_EXP 9
 927: PPUSH
 928: LD_INT 3
 930: PPUSH
 931: LD_INT 2000
 933: PPUSH
 934: CALL_OW 591
// end ; 4 :
 938: GO 967
 940: LD_INT 4
 942: DOUBLE
 943: EQUAL
 944: IFTRUE 948
 946: GO 966
 948: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 2000 ) ;
 949: LD_EXP 9
 953: PPUSH
 954: LD_INT 4
 956: PPUSH
 957: LD_INT 2000
 959: PPUSH
 960: CALL_OW 591
// end ; end ;
 964: GO 967
 966: POP
// end ;
 967: LD_VAR 0 2
 971: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
 972: LD_EXP 9
 976: PPUSH
 977: CALL_OW 301
 981: IFFALSE 993
 983: GO 985
 985: DISABLE
// begin YouLost ( YakotichDead ) ;
 986: LD_STRING YakotichDead
 988: PPUSH
 989: CALL_OW 104
// end ;
 993: END
// every 0 0$1 trigger IsDead ( Mietek ) do
 994: LD_EXP 10
 998: PPUSH
 999: CALL_OW 301
1003: IFFALSE 1015
1005: GO 1007
1007: DISABLE
// begin YouLost ( MietekDead ) ;
1008: LD_STRING MietekDead
1010: PPUSH
1011: CALL_OW 104
// end ;
1015: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
1016: LD_VAR 0 1
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: LD_INT 3
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 3
1033: PUSH
1034: LD_INT 23
1036: PUSH
1037: LD_INT 0
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PUSH
1048: LD_INT 21
1050: PUSH
1051: LD_INT 1
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: PPUSH
1063: CALL_OW 69
1067: IN
1068: IFFALSE 1077
// YouLost ( PeopleDead ) ;
1070: LD_STRING PeopleDead
1072: PPUSH
1073: CALL_OW 104
// end ;
1077: PPOPN 1
1079: END
// every 0 0$1 trigger IsDead ( Ovsyenko ) do
1080: LD_INT 74
1082: PPUSH
1083: CALL_OW 301
1087: IFFALSE 1099
1089: GO 1091
1091: DISABLE
// begin YouLost ( OvsyenkoDead ) ;
1092: LD_STRING OvsyenkoDead
1094: PPUSH
1095: CALL_OW 104
// end ;
1099: END
// every 1 trigger start_ended = false do
1100: LD_EXP 69
1104: PUSH
1105: LD_INT 0
1107: EQUAL
1108: IFFALSE 1252
1110: GO 1112
1112: DISABLE
// begin SetLives ( [ Gary , Bobby , Cyrus , Lynch , Walker , McCreery , Jilian , Turner ] , 1000 ) ;
1113: LD_EXP 54
1117: PUSH
1118: LD_EXP 52
1122: PUSH
1123: LD_EXP 53
1127: PUSH
1128: LD_EXP 55
1132: PUSH
1133: LD_EXP 57
1137: PUSH
1138: LD_EXP 56
1142: PUSH
1143: LD_EXP 58
1147: PUSH
1148: LD_EXP 59
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PPUSH
1163: LD_INT 1000
1165: PPUSH
1166: CALL_OW 234
// SetLives ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 1000 ) ;
1170: LD_INT 22
1172: PUSH
1173: LD_INT 3
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: LD_INT 21
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PPUSH
1194: CALL_OW 69
1198: PPUSH
1199: LD_INT 1000
1201: PPUSH
1202: CALL_OW 234
// SetLives ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , 1000 ) ;
1206: LD_INT 22
1208: PUSH
1209: LD_INT 3
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: LD_INT 21
1218: PUSH
1219: LD_INT 2
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PPUSH
1230: CALL_OW 69
1234: PPUSH
1235: LD_INT 1000
1237: PPUSH
1238: CALL_OW 234
// CenterOnUnits ( Yakotich ) ;
1242: LD_EXP 9
1246: PPUSH
1247: CALL_OW 85
// enable ;
1251: ENABLE
// end ;
1252: END
// every 0 0$1 trigger ovsyenko_captured = true do
1253: LD_EXP 68
1257: PUSH
1258: LD_INT 1
1260: EQUAL
1261: IFFALSE 1321
1263: GO 1265
1265: DISABLE
// begin if BurlakTime then
1266: LD_EXP 64
1270: IFFALSE 1311
// begin BurlakTime := BurlakTime - 0 0$1 ;
1272: LD_ADDR_EXP 64
1276: PUSH
1277: LD_EXP 64
1281: PUSH
1282: LD_INT 35
1284: MINUS
1285: ST_TO_ADDR
// display_strings := display_strings ^ [ #BurlakForces , BurlakTime ] ;
1286: LD_ADDR_OWVAR 47
1290: PUSH
1291: LD_OWVAR 47
1295: PUSH
1296: LD_STRING #BurlakForces
1298: PUSH
1299: LD_EXP 64
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: ADD
1308: ST_TO_ADDR
// end else
1309: GO 1320
// begin display_strings :=  ;
1311: LD_ADDR_OWVAR 47
1315: PUSH
1316: LD_STRING 
1318: ST_TO_ADDR
// disable ;
1319: DISABLE
// end ; enable ;
1320: ENABLE
// end ;
1321: END
// every 1 trigger ovsyenko_captured = false and FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
1322: LD_EXP 68
1326: PUSH
1327: LD_INT 0
1329: EQUAL
1330: PUSH
1331: LD_INT 18
1333: PPUSH
1334: LD_INT 22
1336: PUSH
1337: LD_INT 3
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: LD_INT 2
1346: PUSH
1347: LD_INT 21
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: LD_INT 21
1359: PUSH
1360: LD_INT 2
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PPUSH
1376: CALL_OW 70
1380: PUSH
1381: LD_INT 0
1383: GREATER
1384: AND
1385: IFFALSE 1471
1387: GO 1389
1389: DISABLE
1390: LD_INT 0
1392: PPUSH
// begin enable ;
1393: ENABLE
// for unit in FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1394: LD_ADDR_VAR 0 1
1398: PUSH
1399: LD_INT 18
1401: PPUSH
1402: LD_INT 22
1404: PUSH
1405: LD_INT 3
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: LD_INT 21
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PUSH
1425: LD_INT 21
1427: PUSH
1428: LD_INT 2
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PPUSH
1444: CALL_OW 70
1448: PUSH
1449: FOR_IN
1450: IFFALSE 1469
// begin ComMoveXY ( unit , 101 , 116 ) ;
1452: LD_VAR 0 1
1456: PPUSH
1457: LD_INT 101
1459: PPUSH
1460: LD_INT 116
1462: PPUSH
1463: CALL_OW 111
// end ;
1467: GO 1449
1469: POP
1470: POP
// end ; end_of_file
1471: PPOPN 1
1473: END
// export function InitRussian ; begin
1474: LD_INT 0
1476: PPUSH
// Uc_Nation := 3 ;
1477: LD_ADDR_OWVAR 21
1481: PUSH
1482: LD_INT 3
1484: ST_TO_ADDR
// Uc_Side := 3 ;
1485: LD_ADDR_OWVAR 20
1489: PUSH
1490: LD_INT 3
1492: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 02_ ) ;
1493: LD_ADDR_EXP 9
1497: PUSH
1498: LD_STRING Yakotich
1500: PPUSH
1501: LD_INT 1
1503: PPUSH
1504: LD_STRING 02_
1506: PPUSH
1507: CALL 9960 0 3
1511: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 02_ ) ;
1512: LD_ADDR_EXP 10
1516: PUSH
1517: LD_STRING Mietek
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_STRING 02_
1525: PPUSH
1526: CALL 9960 0 3
1530: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 02_ ) ;
1531: LD_ADDR_EXP 11
1535: PUSH
1536: LD_STRING Boris
1538: PPUSH
1539: LD_INT 1
1541: PPUSH
1542: LD_STRING 02_
1544: PPUSH
1545: CALL 9960 0 3
1549: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 02_ ) ;
1550: LD_ADDR_EXP 13
1554: PUSH
1555: LD_STRING Michail
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_STRING 02_
1563: PPUSH
1564: CALL 9960 0 3
1568: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 02_ ) ;
1569: LD_ADDR_EXP 12
1573: PUSH
1574: LD_STRING Vasilij
1576: PPUSH
1577: LD_INT 1
1579: PPUSH
1580: LD_STRING 02_
1582: PPUSH
1583: CALL 9960 0 3
1587: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 02_ ) ;
1588: LD_ADDR_EXP 14
1592: PUSH
1593: LD_STRING Constantin
1595: PPUSH
1596: LD_INT 1
1598: PPUSH
1599: LD_STRING 02_
1601: PPUSH
1602: CALL 9960 0 3
1606: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 02_ ) ;
1607: LD_ADDR_EXP 15
1611: PUSH
1612: LD_STRING Maksim
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_STRING 02_
1620: PPUSH
1621: CALL 9960 0 3
1625: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 02_ ) ;
1626: LD_ADDR_EXP 16
1630: PUSH
1631: LD_STRING Fiodor
1633: PPUSH
1634: LD_INT 1
1636: PPUSH
1637: LD_STRING 02_
1639: PPUSH
1640: CALL 9960 0 3
1644: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 02_ ) ;
1645: LD_ADDR_EXP 19
1649: PUSH
1650: LD_STRING Aleksiej
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: LD_STRING 02_
1658: PPUSH
1659: CALL 9960 0 3
1663: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 02_ ) ;
1664: LD_ADDR_EXP 17
1668: PUSH
1669: LD_STRING Pavel
1671: PPUSH
1672: LD_INT 1
1674: PPUSH
1675: LD_STRING 02_
1677: PPUSH
1678: CALL 9960 0 3
1682: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 02_ ) ;
1683: LD_ADDR_EXP 18
1687: PUSH
1688: LD_STRING Zakhar
1690: PPUSH
1691: LD_INT 1
1693: PPUSH
1694: LD_STRING 02_
1696: PPUSH
1697: CALL 9960 0 3
1701: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 02_ ) ;
1702: LD_ADDR_EXP 20
1706: PUSH
1707: LD_STRING Aleksandr
1709: PPUSH
1710: LD_INT 1
1712: PPUSH
1713: LD_STRING 02_
1715: PPUSH
1716: CALL 9960 0 3
1720: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , true , 02_ ) ;
1721: LD_ADDR_EXP 22
1725: PUSH
1726: LD_STRING Stanislav
1728: PPUSH
1729: LD_INT 1
1731: PPUSH
1732: LD_STRING 02_
1734: PPUSH
1735: CALL 9960 0 3
1739: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , true , 02_ ) ;
1740: LD_ADDR_EXP 21
1744: PUSH
1745: LD_STRING Josif
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: LD_STRING 02_
1753: PPUSH
1754: CALL 9960 0 3
1758: ST_TO_ADDR
// SetClass ( [ Yakotich , Mietek , Constantin , Maksim , Fiodor , Aleksiej , Zakhar , Aleksandr , Josif ] , 1 ) ;
1759: LD_EXP 9
1763: PUSH
1764: LD_EXP 10
1768: PUSH
1769: LD_EXP 14
1773: PUSH
1774: LD_EXP 15
1778: PUSH
1779: LD_EXP 16
1783: PUSH
1784: LD_EXP 19
1788: PUSH
1789: LD_EXP 18
1793: PUSH
1794: LD_EXP 20
1798: PUSH
1799: LD_EXP 21
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: CALL_OW 336
// SetClass ( Boris , 2 ) ;
1822: LD_EXP 11
1826: PPUSH
1827: LD_INT 2
1829: PPUSH
1830: CALL_OW 336
// SetClass ( [ Michail , Pavel ] , 3 ) ;
1834: LD_EXP 13
1838: PUSH
1839: LD_EXP 17
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PPUSH
1848: LD_INT 3
1850: PPUSH
1851: CALL_OW 336
// SetClass ( [ Stanislav , Vasilij ] , 4 ) ;
1855: LD_EXP 22
1859: PUSH
1860: LD_EXP 12
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PPUSH
1869: LD_INT 4
1871: PPUSH
1872: CALL_OW 336
// PlaceUnitArea ( Yakotich , EnterArea , false ) ;
1876: LD_EXP 9
1880: PPUSH
1881: LD_INT 1
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: CALL_OW 49
// PlaceUnitArea ( Mietek , EnterArea , false ) ;
1891: LD_EXP 10
1895: PPUSH
1896: LD_INT 1
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// PlaceUnitArea ( Boris , EnterArea , false ) ;
1906: LD_EXP 11
1910: PPUSH
1911: LD_INT 1
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL_OW 49
// PlaceUnitArea ( Michail , EnterArea , false ) ;
1921: LD_EXP 13
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: LD_INT 0
1931: PPUSH
1932: CALL_OW 49
// PlaceUnitArea ( Vasilij , EnterArea , false ) ;
1936: LD_EXP 12
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// PlaceUnitArea ( Constantin , EnterArea , false ) ;
1951: LD_EXP 14
1955: PPUSH
1956: LD_INT 1
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 49
// PlaceUnitArea ( Maksim , EnterArea , false ) ;
1966: LD_EXP 15
1970: PPUSH
1971: LD_INT 1
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// PlaceUnitArea ( Fiodor , EnterArea , false ) ;
1981: LD_EXP 16
1985: PPUSH
1986: LD_INT 1
1988: PPUSH
1989: LD_INT 0
1991: PPUSH
1992: CALL_OW 49
// PlaceUnitArea ( Pavel , EnterArea , false ) ;
1996: LD_EXP 17
2000: PPUSH
2001: LD_INT 1
2003: PPUSH
2004: LD_INT 0
2006: PPUSH
2007: CALL_OW 49
// PlaceUnitArea ( Zakhar , EnterArea , false ) ;
2011: LD_EXP 18
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: LD_INT 0
2021: PPUSH
2022: CALL_OW 49
// PlaceUnitArea ( Aleksandr , EnterArea , false ) ;
2026: LD_EXP 20
2030: PPUSH
2031: LD_INT 1
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL_OW 49
// PlaceUnitArea ( Stanislav , EnterArea , false ) ;
2041: LD_EXP 22
2045: PPUSH
2046: LD_INT 1
2048: PPUSH
2049: LD_INT 0
2051: PPUSH
2052: CALL_OW 49
// PlaceUnitArea ( Josif , EnterArea , false ) ;
2056: LD_EXP 21
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 49
// Dimitri := PrepareUnit ( Dimitri , false ,  ) ;
2071: LD_ADDR_EXP 23
2075: PUSH
2076: LD_STRING Dimitri
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: LD_STRING 
2084: PPUSH
2085: CALL 9960 0 3
2089: ST_TO_ADDR
// Ivan := PrepareUnit ( Ivan , false ,  ) ;
2090: LD_ADDR_EXP 24
2094: PUSH
2095: LD_STRING Ivan
2097: PPUSH
2098: LD_INT 0
2100: PPUSH
2101: LD_STRING 
2103: PPUSH
2104: CALL 9960 0 3
2108: ST_TO_ADDR
// Jegor := PrepareUnit ( Jegor , false ,  ) ;
2109: LD_ADDR_EXP 25
2113: PUSH
2114: LD_STRING Jegor
2116: PPUSH
2117: LD_INT 0
2119: PPUSH
2120: LD_STRING 
2122: PPUSH
2123: CALL 9960 0 3
2127: ST_TO_ADDR
// Grigori := PrepareUnit ( Grigori , false ,  ) ;
2128: LD_ADDR_EXP 26
2132: PUSH
2133: LD_STRING Grigori
2135: PPUSH
2136: LD_INT 0
2138: PPUSH
2139: LD_STRING 
2141: PPUSH
2142: CALL 9960 0 3
2146: ST_TO_ADDR
// Anton := PrepareUnit ( Anton , false ,  ) ;
2147: LD_ADDR_EXP 27
2151: PUSH
2152: LD_STRING Anton
2154: PPUSH
2155: LD_INT 0
2157: PPUSH
2158: LD_STRING 
2160: PPUSH
2161: CALL 9960 0 3
2165: ST_TO_ADDR
// PlaceHumanInUnit ( Dimitri , Ovsyenko ) ;
2166: LD_EXP 23
2170: PPUSH
2171: LD_INT 74
2173: PPUSH
2174: CALL_OW 52
// PlaceHumanInUnit ( Anton , Ovsyenko ) ;
2178: LD_EXP 27
2182: PPUSH
2183: LD_INT 74
2185: PPUSH
2186: CALL_OW 52
// PlaceHumanInUnit ( Grigori , Ovsyenko ) ;
2190: LD_EXP 26
2194: PPUSH
2195: LD_INT 74
2197: PPUSH
2198: CALL_OW 52
// PlaceHumanInUnit ( Jegor , OB2 ) ;
2202: LD_EXP 25
2206: PPUSH
2207: LD_INT 79
2209: PPUSH
2210: CALL_OW 52
// PlaceHumanInUnit ( Ivan , OB3 ) ;
2214: LD_EXP 24
2218: PPUSH
2219: LD_INT 78
2221: PPUSH
2222: CALL_OW 52
// Uc_Side := 6 ;
2226: LD_ADDR_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: ST_TO_ADDR
// PrepareSoldier ( 0 , 3 ) ;
2234: LD_INT 0
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: CALL_OW 381
// RusSol = CreateHuman ;
2244: LD_ADDR_EXP 28
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceHumanInUnit ( RusSol , OB1 ) ;
2254: LD_EXP 28
2258: PPUSH
2259: LD_INT 77
2261: PPUSH
2262: CALL_OW 52
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
2266: LD_ADDR_EXP 62
2270: PUSH
2271: LD_STRING Morozov
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: LD_STRING 
2279: PPUSH
2280: CALL 9960 0 3
2284: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
2285: LD_ADDR_EXP 63
2289: PUSH
2290: LD_STRING Platonov
2292: PPUSH
2293: LD_INT 0
2295: PPUSH
2296: LD_STRING 
2298: PPUSH
2299: CALL 9960 0 3
2303: ST_TO_ADDR
// end ;
2304: LD_VAR 0 1
2308: RET
// export function InitBurlak ; begin
2309: LD_INT 0
2311: PPUSH
// Uc_side := 3 ;
2312: LD_ADDR_OWVAR 20
2316: PUSH
2317: LD_INT 3
2319: ST_TO_ADDR
// Uc_nation := 3 ;
2320: LD_ADDR_OWVAR 21
2324: PUSH
2325: LD_INT 3
2327: ST_TO_ADDR
// Uc_Direction := 0 ;
2328: LD_ADDR_OWVAR 24
2332: PUSH
2333: LD_INT 0
2335: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2336: LD_ADDR_EXP 33
2340: PUSH
2341: LD_STRING Burlak
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: LD_STRING 
2349: PPUSH
2350: CALL 9960 0 3
2354: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2355: LD_ADDR_EXP 38
2359: PUSH
2360: LD_STRING Titov
2362: PPUSH
2363: LD_INT 0
2365: PPUSH
2366: LD_STRING 
2368: PPUSH
2369: CALL 9960 0 3
2373: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrovova , false ,  ) ;
2374: LD_ADDR_EXP 35
2378: PUSH
2379: LD_STRING Petrovova
2381: PPUSH
2382: LD_INT 0
2384: PPUSH
2385: LD_STRING 
2387: PPUSH
2388: CALL 9960 0 3
2392: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2393: LD_ADDR_EXP 36
2397: PUSH
2398: LD_STRING Lipshchin
2400: PPUSH
2401: LD_INT 0
2403: PPUSH
2404: LD_STRING 
2406: PPUSH
2407: CALL 9960 0 3
2411: ST_TO_ADDR
// Gleb := PrepareUnit ( Gleb , false ,  ) ;
2412: LD_ADDR_EXP 37
2416: PUSH
2417: LD_STRING Gleb
2419: PPUSH
2420: LD_INT 0
2422: PPUSH
2423: LD_STRING 
2425: PPUSH
2426: CALL 9960 0 3
2430: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , false ,  ) ;
2431: LD_ADDR_EXP 34
2435: PUSH
2436: LD_STRING Karamazov
2438: PPUSH
2439: LD_INT 0
2441: PPUSH
2442: LD_STRING 
2444: PPUSH
2445: CALL 9960 0 3
2449: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , false ,  ) ;
2450: LD_ADDR_EXP 39
2454: PUSH
2455: LD_STRING Petrosyan
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: LD_STRING 
2463: PPUSH
2464: CALL 9960 0 3
2468: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , false ,  ) ;
2469: LD_ADDR_EXP 40
2473: PUSH
2474: LD_STRING Dolgov
2476: PPUSH
2477: LD_INT 0
2479: PPUSH
2480: LD_STRING 
2482: PPUSH
2483: CALL 9960 0 3
2487: ST_TO_ADDR
// vc_chassis = 22 ;
2488: LD_ADDR_OWVAR 37
2492: PUSH
2493: LD_INT 22
2495: ST_TO_ADDR
// vc_control = 1 ;
2496: LD_ADDR_OWVAR 38
2500: PUSH
2501: LD_INT 1
2503: ST_TO_ADDR
// vc_engine = 1 ;
2504: LD_ADDR_OWVAR 39
2508: PUSH
2509: LD_INT 1
2511: ST_TO_ADDR
// vc_fuel_battery = rand ( 15 , 30 ) ;
2512: LD_ADDR_OWVAR 41
2516: PUSH
2517: LD_INT 15
2519: PPUSH
2520: LD_INT 30
2522: PPUSH
2523: CALL_OW 12
2527: ST_TO_ADDR
// vc_weapon = [ 44 , 43 , 42 ] [ Difficulty ] ;
2528: LD_ADDR_OWVAR 40
2532: PUSH
2533: LD_INT 44
2535: PUSH
2536: LD_INT 43
2538: PUSH
2539: LD_INT 42
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: LIST
2546: PUSH
2547: LD_OWVAR 67
2551: ARRAY
2552: ST_TO_ADDR
// BurlakCrewVeh1 = CreateVehicle ;
2553: LD_ADDR_EXP 43
2557: PUSH
2558: CALL_OW 45
2562: ST_TO_ADDR
// BurlakCrewVeh2 = CreateVehicle ;
2563: LD_ADDR_EXP 44
2567: PUSH
2568: CALL_OW 45
2572: ST_TO_ADDR
// BurlakCrewVeh3 = CreateVehicle ;
2573: LD_ADDR_EXP 45
2577: PUSH
2578: CALL_OW 45
2582: ST_TO_ADDR
// BurlakCrewVeh4 = CreateVehicle ;
2583: LD_ADDR_EXP 46
2587: PUSH
2588: CALL_OW 45
2592: ST_TO_ADDR
// BurlakCrewVeh5 = CreateVehicle ;
2593: LD_ADDR_EXP 47
2597: PUSH
2598: CALL_OW 45
2602: ST_TO_ADDR
// BurlakCrewVeh6 = CreateVehicle ;
2603: LD_ADDR_EXP 48
2607: PUSH
2608: CALL_OW 45
2612: ST_TO_ADDR
// PlaceUnitArea ( BurlakCrewVeh1 , BurlakArea , false ) ;
2613: LD_EXP 43
2617: PPUSH
2618: LD_INT 2
2620: PPUSH
2621: LD_INT 0
2623: PPUSH
2624: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh2 , BurlakArea , false ) ;
2628: LD_EXP 44
2632: PPUSH
2633: LD_INT 2
2635: PPUSH
2636: LD_INT 0
2638: PPUSH
2639: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh3 , BurlakArea , false ) ;
2643: LD_EXP 45
2647: PPUSH
2648: LD_INT 2
2650: PPUSH
2651: LD_INT 0
2653: PPUSH
2654: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh4 , BurlakArea , false ) ;
2658: LD_EXP 46
2662: PPUSH
2663: LD_INT 2
2665: PPUSH
2666: LD_INT 0
2668: PPUSH
2669: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh5 , BurlakArea , false ) ;
2673: LD_EXP 47
2677: PPUSH
2678: LD_INT 2
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh6 , BurlakArea , false ) ;
2688: LD_EXP 48
2692: PPUSH
2693: LD_INT 2
2695: PPUSH
2696: LD_INT 0
2698: PPUSH
2699: CALL_OW 49
// PlaceHumanInUnit ( Titov , BurlakCrewVeh1 ) ;
2703: LD_EXP 38
2707: PPUSH
2708: LD_EXP 43
2712: PPUSH
2713: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , BurlakCrewVeh2 ) ;
2717: LD_EXP 35
2721: PPUSH
2722: LD_EXP 44
2726: PPUSH
2727: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , BurlakCrewVeh3 ) ;
2731: LD_EXP 36
2735: PPUSH
2736: LD_EXP 45
2740: PPUSH
2741: CALL_OW 52
// PlaceHumanInUnit ( Gleb , BurlakCrewVeh4 ) ;
2745: LD_EXP 37
2749: PPUSH
2750: LD_EXP 46
2754: PPUSH
2755: CALL_OW 52
// PlaceHumanInUnit ( Dolgov , BurlakCrewVeh5 ) ;
2759: LD_EXP 40
2763: PPUSH
2764: LD_EXP 47
2768: PPUSH
2769: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , BurlakCrewVeh6 ) ;
2773: LD_EXP 39
2777: PPUSH
2778: LD_EXP 48
2782: PPUSH
2783: CALL_OW 52
// vc_chassis = 24 ;
2787: LD_ADDR_OWVAR 37
2791: PUSH
2792: LD_INT 24
2794: ST_TO_ADDR
// vc_weapon = 89 ;
2795: LD_ADDR_OWVAR 40
2799: PUSH
2800: LD_INT 89
2802: ST_TO_ADDR
// KaramazovVeh = CreateVehicle ;
2803: LD_ADDR_EXP 42
2807: PUSH
2808: CALL_OW 45
2812: ST_TO_ADDR
// AddCargo ( KaramazovVeh , mat_cans , 200 ) ;
2813: LD_EXP 42
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: LD_INT 200
2823: PPUSH
2824: CALL_OW 291
// PlaceUnitArea ( KaramazovVeh , BurlakArea , false ) ;
2828: LD_EXP 42
2832: PPUSH
2833: LD_INT 2
2835: PPUSH
2836: LD_INT 0
2838: PPUSH
2839: CALL_OW 49
// PlaceHumanInUnit ( Karamazov , KaramazovVeh ) ;
2843: LD_EXP 34
2847: PPUSH
2848: LD_EXP 42
2852: PPUSH
2853: CALL_OW 52
// Uc_Nation = 2 ;
2857: LD_ADDR_OWVAR 21
2861: PUSH
2862: LD_INT 2
2864: ST_TO_ADDR
// vc_chassis = 14 ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 14
2872: ST_TO_ADDR
// vc_weapon = 26 ;
2873: LD_ADDR_OWVAR 40
2877: PUSH
2878: LD_INT 26
2880: ST_TO_ADDR
// BurlakVeh = CreateVehicle ;
2881: LD_ADDR_EXP 41
2885: PUSH
2886: CALL_OW 45
2890: ST_TO_ADDR
// PlaceUnitArea ( BurlakVeh , BurlakArea , false ) ;
2891: LD_EXP 41
2895: PPUSH
2896: LD_INT 2
2898: PPUSH
2899: LD_INT 0
2901: PPUSH
2902: CALL_OW 49
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
2906: LD_EXP 33
2910: PPUSH
2911: LD_EXP 41
2915: PPUSH
2916: CALL_OW 52
// end ; end_of_file
2920: LD_VAR 0 1
2924: RET
// export function InitSikorskiTeam ; var i , j ; begin
2925: LD_INT 0
2927: PPUSH
2928: PPUSH
2929: PPUSH
// SikorskiTeam := SikorskiTeam ^ Sikorski ^ Gary ^ Bobby ^ Cyrus ^ Walker ^ Lynch ^ Turner ^ Jilian ^ McCreery ;
2930: LD_ADDR_EXP 4
2934: PUSH
2935: LD_EXP 4
2939: PUSH
2940: LD_EXP 49
2944: ADD
2945: PUSH
2946: LD_EXP 54
2950: ADD
2951: PUSH
2952: LD_EXP 52
2956: ADD
2957: PUSH
2958: LD_EXP 53
2962: ADD
2963: PUSH
2964: LD_EXP 57
2968: ADD
2969: PUSH
2970: LD_EXP 55
2974: ADD
2975: PUSH
2976: LD_EXP 59
2980: ADD
2981: PUSH
2982: LD_EXP 58
2986: ADD
2987: PUSH
2988: LD_EXP 56
2992: ADD
2993: ST_TO_ADDR
// Uc_side := 4 ;
2994: LD_ADDR_OWVAR 20
2998: PUSH
2999: LD_INT 4
3001: ST_TO_ADDR
// Uc_Nation := 1 ;
3002: LD_ADDR_OWVAR 21
3006: PUSH
3007: LD_INT 1
3009: ST_TO_ADDR
// Hc_Name := Jeremy Sikorski ;
3010: LD_ADDR_OWVAR 26
3014: PUSH
3015: LD_STRING Jeremy Sikorski
3017: ST_TO_ADDR
// Hc_Class := 1 ;
3018: LD_ADDR_OWVAR 28
3022: PUSH
3023: LD_INT 1
3025: ST_TO_ADDR
// Hc_Sex := 1 ;
3026: LD_ADDR_OWVAR 27
3030: PUSH
3031: LD_INT 1
3033: ST_TO_ADDR
// Hc_Basic_Skills := [ 0 , 0 , 0 , 0 ] ;
3034: LD_ADDR_OWVAR 30
3038: PUSH
3039: LD_INT 0
3041: PUSH
3042: LD_INT 0
3044: PUSH
3045: LD_INT 0
3047: PUSH
3048: LD_INT 0
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: ST_TO_ADDR
// Hc_Skills := [ 6 , 3 , 4 , 1 ] ;
3057: LD_ADDR_OWVAR 31
3061: PUSH
3062: LD_INT 6
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: LD_INT 4
3070: PUSH
3071: LD_INT 1
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: ST_TO_ADDR
// Hc_Gallery := us ;
3080: LD_ADDR_OWVAR 33
3084: PUSH
3085: LD_STRING us
3087: ST_TO_ADDR
// Hc_Face_Number := 19 ;
3088: LD_ADDR_OWVAR 34
3092: PUSH
3093: LD_INT 19
3095: ST_TO_ADDR
// Sikorski := CreateHuman ;
3096: LD_ADDR_EXP 49
3100: PUSH
3101: CALL_OW 44
3105: ST_TO_ADDR
// SikorskiMeat := CreateHuman ;
3106: LD_ADDR_EXP 50
3110: PUSH
3111: CALL_OW 44
3115: ST_TO_ADDR
// Hc_Name := Kpt. Jack Truman ;
3116: LD_ADDR_OWVAR 26
3120: PUSH
3121: LD_STRING Kpt. Jack Truman
3123: ST_TO_ADDR
// Hc_Skills := [ 8 , 5 , 3 , 1 ] ;
3124: LD_ADDR_OWVAR 31
3128: PUSH
3129: LD_INT 8
3131: PUSH
3132: LD_INT 5
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: LD_INT 1
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: ST_TO_ADDR
// Hc_Face_Number := 26 ;
3147: LD_ADDR_OWVAR 34
3151: PUSH
3152: LD_INT 26
3154: ST_TO_ADDR
// Truman := CreateHuman ;
3155: LD_ADDR_EXP 51
3159: PUSH
3160: CALL_OW 44
3164: ST_TO_ADDR
// Hc_Name := Cyrus Parker ;
3165: LD_ADDR_OWVAR 26
3169: PUSH
3170: LD_STRING Cyrus Parker
3172: ST_TO_ADDR
// Hc_Skills := [ 6 , 3 , 2 , 2 ] ;
3173: LD_ADDR_OWVAR 31
3177: PUSH
3178: LD_INT 6
3180: PUSH
3181: LD_INT 3
3183: PUSH
3184: LD_INT 2
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: ST_TO_ADDR
// Hc_Face_Number := 8 ;
3196: LD_ADDR_OWVAR 34
3200: PUSH
3201: LD_INT 8
3203: ST_TO_ADDR
// Cyrus := CreateHuman ;
3204: LD_ADDR_EXP 53
3208: PUSH
3209: CALL_OW 44
3213: ST_TO_ADDR
// Hc_Name := Bobby Brandon ;
3214: LD_ADDR_OWVAR 26
3218: PUSH
3219: LD_STRING Bobby Brandon
3221: ST_TO_ADDR
// Hc_Skills := [ 3 , 5 , 8 , 3 ] ;
3222: LD_ADDR_OWVAR 31
3226: PUSH
3227: LD_INT 3
3229: PUSH
3230: LD_INT 5
3232: PUSH
3233: LD_INT 8
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: ST_TO_ADDR
// Hc_Face_Number := 9 ;
3245: LD_ADDR_OWVAR 34
3249: PUSH
3250: LD_INT 9
3252: ST_TO_ADDR
// Bobby := CreateHuman ;
3253: LD_ADDR_EXP 52
3257: PUSH
3258: CALL_OW 44
3262: ST_TO_ADDR
// Hc_Name := Gary Grant ;
3263: LD_ADDR_OWVAR 26
3267: PUSH
3268: LD_STRING Gary Grant
3270: ST_TO_ADDR
// Hc_Skills := [ 7 , 3 , 1 , 1 ] ;
3271: LD_ADDR_OWVAR 31
3275: PUSH
3276: LD_INT 7
3278: PUSH
3279: LD_INT 3
3281: PUSH
3282: LD_INT 1
3284: PUSH
3285: LD_INT 1
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: ST_TO_ADDR
// Hc_Face_Number := 20 ;
3294: LD_ADDR_OWVAR 34
3298: PUSH
3299: LD_INT 20
3301: ST_TO_ADDR
// Gary := CreateHuman ;
3302: LD_ADDR_EXP 54
3306: PUSH
3307: CALL_OW 44
3311: ST_TO_ADDR
// Hc_Name := Gary Grant ;
3312: LD_ADDR_OWVAR 26
3316: PUSH
3317: LD_STRING Gary Grant
3319: ST_TO_ADDR
// Hc_Skills := [ 7 , 3 , 1 , 1 ] ;
3320: LD_ADDR_OWVAR 31
3324: PUSH
3325: LD_INT 7
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: LD_INT 1
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: ST_TO_ADDR
// Hc_Face_Number := 20 ;
3343: LD_ADDR_OWVAR 34
3347: PUSH
3348: LD_INT 20
3350: ST_TO_ADDR
// Gary := CreateHuman ;
3351: LD_ADDR_EXP 54
3355: PUSH
3356: CALL_OW 44
3360: ST_TO_ADDR
// Hc_Name := Henry Lynch ;
3361: LD_ADDR_OWVAR 26
3365: PUSH
3366: LD_STRING Henry Lynch
3368: ST_TO_ADDR
// Hc_Skills := [ 6 , 2 , 2 , 3 ] ;
3369: LD_ADDR_OWVAR 31
3373: PUSH
3374: LD_INT 6
3376: PUSH
3377: LD_INT 2
3379: PUSH
3380: LD_INT 2
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: ST_TO_ADDR
// Hc_Gallery := SecondCharsGal ;
3392: LD_ADDR_OWVAR 33
3396: PUSH
3397: LD_STRING SecondCharsGal
3399: ST_TO_ADDR
// Hc_Face_Number := 49 ;
3400: LD_ADDR_OWVAR 34
3404: PUSH
3405: LD_INT 49
3407: ST_TO_ADDR
// Lynch := CreateHuman ;
3408: LD_ADDR_EXP 55
3412: PUSH
3413: CALL_OW 44
3417: ST_TO_ADDR
// Hc_Name := Mike Turner ;
3418: LD_ADDR_OWVAR 26
3422: PUSH
3423: LD_STRING Mike Turner
3425: ST_TO_ADDR
// Hc_Skills := [ 3 , 6 , 3 , 2 ] ;
3426: LD_ADDR_OWVAR 31
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: LD_INT 6
3436: PUSH
3437: LD_INT 3
3439: PUSH
3440: LD_INT 2
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: ST_TO_ADDR
// Hc_Face_Number := 62 ;
3449: LD_ADDR_OWVAR 34
3453: PUSH
3454: LD_INT 62
3456: ST_TO_ADDR
// Turner := CreateHuman ;
3457: LD_ADDR_EXP 59
3461: PUSH
3462: CALL_OW 44
3466: ST_TO_ADDR
// Hc_Name := Hallie Jilian ;
3467: LD_ADDR_OWVAR 26
3471: PUSH
3472: LD_STRING Hallie Jilian
3474: ST_TO_ADDR
// Hc_Skills := [ 2 , 5 , 2 , 2 ] ;
3475: LD_ADDR_OWVAR 31
3479: PUSH
3480: LD_INT 2
3482: PUSH
3483: LD_INT 5
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: LD_INT 2
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: ST_TO_ADDR
// Hc_Sex := 2 ;
3498: LD_ADDR_OWVAR 27
3502: PUSH
3503: LD_INT 2
3505: ST_TO_ADDR
// Hc_Face_Number := 39 ;
3506: LD_ADDR_OWVAR 34
3510: PUSH
3511: LD_INT 39
3513: ST_TO_ADDR
// Jilian := CreateHuman ;
3514: LD_ADDR_EXP 58
3518: PUSH
3519: CALL_OW 44
3523: ST_TO_ADDR
// Hc_Name := Michael Walker ;
3524: LD_ADDR_OWVAR 26
3528: PUSH
3529: LD_STRING Michael Walker
3531: ST_TO_ADDR
// Hc_Skills := [ 2 , 2 , 3 , 5 ] ;
3532: LD_ADDR_OWVAR 31
3536: PUSH
3537: LD_INT 2
3539: PUSH
3540: LD_INT 2
3542: PUSH
3543: LD_INT 3
3545: PUSH
3546: LD_INT 5
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: ST_TO_ADDR
// Hc_Sex := 1 ;
3555: LD_ADDR_OWVAR 27
3559: PUSH
3560: LD_INT 1
3562: ST_TO_ADDR
// Hc_Class := 4 ;
3563: LD_ADDR_OWVAR 28
3567: PUSH
3568: LD_INT 4
3570: ST_TO_ADDR
// Hc_Face_Number := 48 ;
3571: LD_ADDR_OWVAR 34
3575: PUSH
3576: LD_INT 48
3578: ST_TO_ADDR
// Walker := CreateHuman ;
3579: LD_ADDR_EXP 57
3583: PUSH
3584: CALL_OW 44
3588: ST_TO_ADDR
// Hc_Name := Peter McCreery ;
3589: LD_ADDR_OWVAR 26
3593: PUSH
3594: LD_STRING Peter McCreery
3596: ST_TO_ADDR
// Hc_Skills := [ 1 , 0 , 3 , 6 ] ;
3597: LD_ADDR_OWVAR 31
3601: PUSH
3602: LD_INT 1
3604: PUSH
3605: LD_INT 0
3607: PUSH
3608: LD_INT 3
3610: PUSH
3611: LD_INT 6
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: ST_TO_ADDR
// Hc_Face_Number := 58 ;
3620: LD_ADDR_OWVAR 34
3624: PUSH
3625: LD_INT 58
3627: ST_TO_ADDR
// McCreery := CreateHuman ;
3628: LD_ADDR_EXP 56
3632: PUSH
3633: CALL_OW 44
3637: ST_TO_ADDR
// SikorskiTeam := SikorskiTeam ^ Sikorski ^ Truman ^ Gary ^ Bobby ^ Cyrus ^ Walker ^ Lynch ^ Turner ^ Jilian ^ McCreery ;
3638: LD_ADDR_EXP 4
3642: PUSH
3643: LD_EXP 4
3647: PUSH
3648: LD_EXP 49
3652: ADD
3653: PUSH
3654: LD_EXP 51
3658: ADD
3659: PUSH
3660: LD_EXP 54
3664: ADD
3665: PUSH
3666: LD_EXP 52
3670: ADD
3671: PUSH
3672: LD_EXP 53
3676: ADD
3677: PUSH
3678: LD_EXP 57
3682: ADD
3683: PUSH
3684: LD_EXP 55
3688: ADD
3689: PUSH
3690: LD_EXP 59
3694: ADD
3695: PUSH
3696: LD_EXP 58
3700: ADD
3701: PUSH
3702: LD_EXP 56
3706: ADD
3707: ST_TO_ADDR
// PlaceUnitArea ( Sikorski , SikorskiArea , false ) ;
3708: LD_EXP 49
3712: PPUSH
3713: LD_INT 9
3715: PPUSH
3716: LD_INT 0
3718: PPUSH
3719: CALL_OW 49
// PlaceUnitArea ( Truman , SikorskiArea , false ) ;
3723: LD_EXP 51
3727: PPUSH
3728: LD_INT 9
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 49
// PlaceUnitArea ( Cyrus , SikorskiArea , false ) ;
3738: LD_EXP 53
3742: PPUSH
3743: LD_INT 9
3745: PPUSH
3746: LD_INT 0
3748: PPUSH
3749: CALL_OW 49
// PlaceUnitArea ( Bobby , SikorskiArea , false ) ;
3753: LD_EXP 52
3757: PPUSH
3758: LD_INT 9
3760: PPUSH
3761: LD_INT 0
3763: PPUSH
3764: CALL_OW 49
// PlaceUnitArea ( Gary , SikorskiArea , false ) ;
3768: LD_EXP 54
3772: PPUSH
3773: LD_INT 9
3775: PPUSH
3776: LD_INT 0
3778: PPUSH
3779: CALL_OW 49
// PlaceUnitArea ( Lynch , SikorskiArea , false ) ;
3783: LD_EXP 55
3787: PPUSH
3788: LD_INT 9
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 49
// PlaceUnitArea ( Turner , SikorskiArea , false ) ;
3798: LD_EXP 59
3802: PPUSH
3803: LD_INT 9
3805: PPUSH
3806: LD_INT 0
3808: PPUSH
3809: CALL_OW 49
// PlaceUnitArea ( Jilian , SikorskiArea , false ) ;
3813: LD_EXP 58
3817: PPUSH
3818: LD_INT 9
3820: PPUSH
3821: LD_INT 0
3823: PPUSH
3824: CALL_OW 49
// PlaceUnitArea ( Walker , SikorskiArea , false ) ;
3828: LD_EXP 57
3832: PPUSH
3833: LD_INT 9
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 49
// PlaceUnitArea ( McCreery , SikorskiArea , false ) ;
3843: LD_EXP 56
3847: PPUSH
3848: LD_INT 9
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: LD_VAR 0 1
3862: RET
// every 0 0$1 trigger start_ended = true do
3863: LD_EXP 69
3867: PUSH
3868: LD_INT 1
3870: EQUAL
3871: IFFALSE 3901
3873: GO 3875
3875: DISABLE
// begin AddResourceType ( GetBase ( Ovsyenko ) , mat_cans , 100 ) ;
3876: LD_INT 74
3878: PPUSH
3879: CALL_OW 274
3883: PPUSH
3884: LD_INT 1
3886: PPUSH
3887: LD_INT 100
3889: PPUSH
3890: CALL_OW 276
// ComUpgrade ( Ovsyenko ) ;
3894: LD_INT 74
3896: PPUSH
3897: CALL_OW 146
// end ;
3901: END
// export function InitTerminal ; var i , y , turrety , lab , zbrojka ; begin
3902: LD_INT 0
3904: PPUSH
3905: PPUSH
3906: PPUSH
3907: PPUSH
3908: PPUSH
3909: PPUSH
// Hc_Gallery :=  ;
3910: LD_ADDR_OWVAR 33
3914: PUSH
3915: LD_STRING 
3917: ST_TO_ADDR
// Hc_Name :=  ;
3918: LD_ADDR_OWVAR 26
3922: PUSH
3923: LD_STRING 
3925: ST_TO_ADDR
// MainTerminalCrew := [ ] ;
3926: LD_ADDR_EXP 6
3930: PUSH
3931: EMPTY
3932: ST_TO_ADDR
// uc_side := 1 ;
3933: LD_ADDR_OWVAR 20
3937: PUSH
3938: LD_INT 1
3940: ST_TO_ADDR
// uc_nation := 1 ;
3941: LD_ADDR_OWVAR 21
3945: PUSH
3946: LD_INT 1
3948: ST_TO_ADDR
// PrepareSoldier ( rand ( 0 , 1 ) , 10 ) ;
3949: LD_INT 0
3951: PPUSH
3952: LD_INT 1
3954: PPUSH
3955: CALL_OW 12
3959: PPUSH
3960: LD_INT 10
3962: PPUSH
3963: CALL_OW 381
// NorthSold := CreateHuman ;
3967: LD_ADDR_EXP 61
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceHumanInUnit ( NorthSold , AmB4 ) ;
3977: LD_EXP 61
3981: PPUSH
3982: LD_INT 104
3984: PPUSH
3985: CALL_OW 52
// for i = 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
3989: LD_ADDR_VAR 0 2
3993: PUSH
3994: DOUBLE
3995: LD_INT 1
3997: DEC
3998: ST_TO_ADDR
3999: LD_INT 8
4001: PUSH
4002: LD_INT 9
4004: PUSH
4005: LD_INT 10
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: LIST
4012: PUSH
4013: LD_OWVAR 67
4017: ARRAY
4018: PUSH
4019: FOR_TO
4020: IFFALSE 4075
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4022: LD_INT 0
4024: PPUSH
4025: LD_INT 1
4027: PPUSH
4028: CALL_OW 12
4032: PPUSH
4033: LD_INT 2
4035: PUSH
4036: LD_INT 3
4038: PUSH
4039: LD_INT 6
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: PUSH
4047: LD_OWVAR 67
4051: ARRAY
4052: PPUSH
4053: CALL_OW 381
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
4057: LD_ADDR_EXP 6
4061: PUSH
4062: LD_EXP 6
4066: PUSH
4067: CALL_OW 44
4071: ADD
4072: ST_TO_ADDR
// end ;
4073: GO 4019
4075: POP
4076: POP
// for i = 1 to 1 do
4077: LD_ADDR_VAR 0 2
4081: PUSH
4082: DOUBLE
4083: LD_INT 1
4085: DEC
4086: ST_TO_ADDR
4087: LD_INT 1
4089: PUSH
4090: FOR_TO
4091: IFFALSE 4146
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4093: LD_INT 0
4095: PPUSH
4096: LD_INT 1
4098: PPUSH
4099: CALL_OW 12
4103: PPUSH
4104: LD_INT 2
4106: PUSH
4107: LD_INT 3
4109: PUSH
4110: LD_INT 6
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: PPUSH
4124: CALL_OW 382
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: LD_EXP 6
4137: PUSH
4138: CALL_OW 44
4142: ADD
4143: ST_TO_ADDR
// end ;
4144: GO 4090
4146: POP
4147: POP
// for i = 1 to 2 do
4148: LD_ADDR_VAR 0 2
4152: PUSH
4153: DOUBLE
4154: LD_INT 1
4156: DEC
4157: ST_TO_ADDR
4158: LD_INT 2
4160: PUSH
4161: FOR_TO
4162: IFFALSE 4217
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4164: LD_INT 0
4166: PPUSH
4167: LD_INT 1
4169: PPUSH
4170: CALL_OW 12
4174: PPUSH
4175: LD_INT 2
4177: PUSH
4178: LD_INT 3
4180: PUSH
4181: LD_INT 6
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: PUSH
4189: LD_OWVAR 67
4193: ARRAY
4194: PPUSH
4195: CALL_OW 384
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
4199: LD_ADDR_EXP 6
4203: PUSH
4204: LD_EXP 6
4208: PUSH
4209: CALL_OW 44
4213: ADD
4214: ST_TO_ADDR
// end ;
4215: GO 4161
4217: POP
4218: POP
// turrety := FilterUnitsInArea ( MainTerminalArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
4219: LD_ADDR_VAR 0 4
4223: PUSH
4224: LD_INT 16
4226: PPUSH
4227: LD_INT 2
4229: PUSH
4230: LD_INT 30
4232: PUSH
4233: LD_INT 31
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 30
4242: PUSH
4243: LD_INT 32
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: PPUSH
4255: CALL_OW 70
4259: ST_TO_ADDR
// lab := FilterUnitsInArea ( MainTerminalArea , [ [ f_btype , b_lab_full ] ] ) ;
4260: LD_ADDR_VAR 0 5
4264: PUSH
4265: LD_INT 16
4267: PPUSH
4268: LD_INT 30
4270: PUSH
4271: LD_INT 8
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PUSH
4278: EMPTY
4279: LIST
4280: PPUSH
4281: CALL_OW 70
4285: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( MainTerminalArea , [ [ f_btype , b_barracks ] ] ) ;
4286: LD_ADDR_VAR 0 6
4290: PUSH
4291: LD_INT 16
4293: PPUSH
4294: LD_INT 30
4296: PUSH
4297: LD_INT 5
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: PUSH
4304: EMPTY
4305: LIST
4306: PPUSH
4307: CALL_OW 70
4311: ST_TO_ADDR
// y := 1 ;
4312: LD_ADDR_VAR 0 3
4316: PUSH
4317: LD_INT 1
4319: ST_TO_ADDR
// for i in MainTerminalCrew do
4320: LD_ADDR_VAR 0 2
4324: PUSH
4325: LD_EXP 6
4329: PUSH
4330: FOR_IN
4331: IFFALSE 4488
// begin PlaceUnitArea ( i , TerminalPersonel , false ) ;
4333: LD_VAR 0 2
4337: PPUSH
4338: LD_INT 15
4340: PPUSH
4341: LD_INT 0
4343: PPUSH
4344: CALL_OW 49
// case GetClass ( i ) of 1 :
4348: LD_VAR 0 2
4352: PPUSH
4353: CALL_OW 257
4357: PUSH
4358: LD_INT 1
4360: DOUBLE
4361: EQUAL
4362: IFTRUE 4366
4364: GO 4433
4366: POP
// begin if y > 7 then
4367: LD_VAR 0 3
4371: PUSH
4372: LD_INT 7
4374: GREATER
4375: IFFALSE 4397
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
4377: LD_VAR 0 2
4381: PPUSH
4382: LD_VAR 0 6
4386: PUSH
4387: LD_INT 1
4389: ARRAY
4390: PPUSH
4391: CALL_OW 120
4395: GO 4417
// ComEnterUnit ( i , turrety [ y ] ) ;
4397: LD_VAR 0 2
4401: PPUSH
4402: LD_VAR 0 4
4406: PUSH
4407: LD_VAR 0 3
4411: ARRAY
4412: PPUSH
4413: CALL_OW 120
// y = y + 1 ;
4417: LD_ADDR_VAR 0 3
4421: PUSH
4422: LD_VAR 0 3
4426: PUSH
4427: LD_INT 1
4429: PLUS
4430: ST_TO_ADDR
// end ; 2 :
4431: GO 4486
4433: LD_INT 2
4435: DOUBLE
4436: EQUAL
4437: IFTRUE 4441
4439: GO 4456
4441: POP
// ComEnterUnit ( i , MainTerminal ) ; 4 :
4442: LD_VAR 0 2
4446: PPUSH
4447: LD_INT 257
4449: PPUSH
4450: CALL_OW 120
4454: GO 4486
4456: LD_INT 4
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4485
4464: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_VAR 0 5
4474: PUSH
4475: LD_INT 1
4477: ARRAY
4478: PPUSH
4479: CALL_OW 120
4483: GO 4486
4485: POP
// end ;
4486: GO 4330
4488: POP
4489: POP
// end ;
4490: LD_VAR 0 1
4494: RET
// export function InitAmerican ; var i , z , y , turrety , fabryka , Wieza , lab , zbrojka ; begin
4495: LD_INT 0
4497: PPUSH
4498: PPUSH
4499: PPUSH
4500: PPUSH
4501: PPUSH
4502: PPUSH
4503: PPUSH
4504: PPUSH
4505: PPUSH
// Hc_Gallery :=  ;
4506: LD_ADDR_OWVAR 33
4510: PUSH
4511: LD_STRING 
4513: ST_TO_ADDR
// Hc_Name :=  ;
4514: LD_ADDR_OWVAR 26
4518: PUSH
4519: LD_STRING 
4521: ST_TO_ADDR
// WestTerminalCrew := [ ] ;
4522: LD_ADDR_EXP 5
4526: PUSH
4527: EMPTY
4528: ST_TO_ADDR
// uc_side := 1 ;
4529: LD_ADDR_OWVAR 20
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// uc_nation := 1 ;
4537: LD_ADDR_OWVAR 21
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// for i = 1 to [ 10 , 11 , 12 ] [ Difficulty ] do
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: DOUBLE
4551: LD_INT 1
4553: DEC
4554: ST_TO_ADDR
4555: LD_INT 10
4557: PUSH
4558: LD_INT 11
4560: PUSH
4561: LD_INT 12
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: PUSH
4569: LD_OWVAR 67
4573: ARRAY
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4631
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4578: LD_INT 0
4580: PPUSH
4581: LD_INT 1
4583: PPUSH
4584: CALL_OW 12
4588: PPUSH
4589: LD_INT 2
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: LD_INT 6
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: PUSH
4603: LD_OWVAR 67
4607: ARRAY
4608: PPUSH
4609: CALL_OW 381
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4613: LD_ADDR_EXP 5
4617: PUSH
4618: LD_EXP 5
4622: PUSH
4623: CALL_OW 44
4627: ADD
4628: ST_TO_ADDR
// end ;
4629: GO 4575
4631: POP
4632: POP
// for i = 1 to 2 do
4633: LD_ADDR_VAR 0 2
4637: PUSH
4638: DOUBLE
4639: LD_INT 1
4641: DEC
4642: ST_TO_ADDR
4643: LD_INT 2
4645: PUSH
4646: FOR_TO
4647: IFFALSE 4702
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4649: LD_INT 0
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: CALL_OW 12
4659: PPUSH
4660: LD_INT 2
4662: PUSH
4663: LD_INT 3
4665: PUSH
4666: LD_INT 6
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: PPUSH
4680: CALL_OW 382
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4684: LD_ADDR_EXP 5
4688: PUSH
4689: LD_EXP 5
4693: PUSH
4694: CALL_OW 44
4698: ADD
4699: ST_TO_ADDR
// end ;
4700: GO 4646
4702: POP
4703: POP
// for i = 1 to 6 do
4704: LD_ADDR_VAR 0 2
4708: PUSH
4709: DOUBLE
4710: LD_INT 1
4712: DEC
4713: ST_TO_ADDR
4714: LD_INT 6
4716: PUSH
4717: FOR_TO
4718: IFFALSE 4773
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4720: LD_INT 0
4722: PPUSH
4723: LD_INT 1
4725: PPUSH
4726: CALL_OW 12
4730: PPUSH
4731: LD_INT 2
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 6
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: PUSH
4745: LD_OWVAR 67
4749: ARRAY
4750: PPUSH
4751: CALL_OW 383
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4755: LD_ADDR_EXP 5
4759: PUSH
4760: LD_EXP 5
4764: PUSH
4765: CALL_OW 44
4769: ADD
4770: ST_TO_ADDR
// end ;
4771: GO 4717
4773: POP
4774: POP
// for i = 1 to 2 do
4775: LD_ADDR_VAR 0 2
4779: PUSH
4780: DOUBLE
4781: LD_INT 1
4783: DEC
4784: ST_TO_ADDR
4785: LD_INT 2
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4844
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4791: LD_INT 0
4793: PPUSH
4794: LD_INT 1
4796: PPUSH
4797: CALL_OW 12
4801: PPUSH
4802: LD_INT 2
4804: PUSH
4805: LD_INT 3
4807: PUSH
4808: LD_INT 6
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: PUSH
4816: LD_OWVAR 67
4820: ARRAY
4821: PPUSH
4822: CALL_OW 384
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4826: LD_ADDR_EXP 5
4830: PUSH
4831: LD_EXP 5
4835: PUSH
4836: CALL_OW 44
4840: ADD
4841: ST_TO_ADDR
// end ;
4842: GO 4788
4844: POP
4845: POP
// turrety := FilterUnitsInArea ( WestTerminalArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
4846: LD_ADDR_VAR 0 5
4850: PUSH
4851: LD_INT 17
4853: PPUSH
4854: LD_INT 2
4856: PUSH
4857: LD_INT 30
4859: PUSH
4860: LD_INT 31
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: LD_INT 30
4869: PUSH
4870: LD_INT 32
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 70
4886: ST_TO_ADDR
// lab := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_lab_full ] ] ) ;
4887: LD_ADDR_VAR 0 8
4891: PUSH
4892: LD_INT 17
4894: PPUSH
4895: LD_INT 30
4897: PUSH
4898: LD_INT 8
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: EMPTY
4906: LIST
4907: PPUSH
4908: CALL_OW 70
4912: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_factory ] ] ) ;
4913: LD_ADDR_VAR 0 6
4917: PUSH
4918: LD_INT 17
4920: PPUSH
4921: LD_INT 30
4923: PUSH
4924: LD_INT 3
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: PPUSH
4934: CALL_OW 70
4938: ST_TO_ADDR
// wieza := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_control_tower ] ] ) ;
4939: LD_ADDR_VAR 0 7
4943: PUSH
4944: LD_INT 17
4946: PPUSH
4947: LD_INT 30
4949: PUSH
4950: LD_INT 36
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: EMPTY
4958: LIST
4959: PPUSH
4960: CALL_OW 70
4964: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_barracks ] ] ) ;
4965: LD_ADDR_VAR 0 9
4969: PUSH
4970: LD_INT 17
4972: PPUSH
4973: LD_INT 30
4975: PUSH
4976: LD_INT 5
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: PPUSH
4986: CALL_OW 70
4990: ST_TO_ADDR
// y := 1 ;
4991: LD_ADDR_VAR 0 4
4995: PUSH
4996: LD_INT 1
4998: ST_TO_ADDR
// z := 1 ;
4999: LD_ADDR_VAR 0 3
5003: PUSH
5004: LD_INT 1
5006: ST_TO_ADDR
// for i in WestTerminalCrew do
5007: LD_ADDR_VAR 0 2
5011: PUSH
5012: LD_EXP 5
5016: PUSH
5017: FOR_IN
5018: IFFALSE 5248
// begin PlaceUnitArea ( i , TerminalPersonel , false ) ;
5020: LD_VAR 0 2
5024: PPUSH
5025: LD_INT 15
5027: PPUSH
5028: LD_INT 0
5030: PPUSH
5031: CALL_OW 49
// case GetClass ( i ) of 1 :
5035: LD_VAR 0 2
5039: PPUSH
5040: CALL_OW 257
5044: PUSH
5045: LD_INT 1
5047: DOUBLE
5048: EQUAL
5049: IFTRUE 5053
5051: GO 5120
5053: POP
// begin if y > 9 then
5054: LD_VAR 0 4
5058: PUSH
5059: LD_INT 9
5061: GREATER
5062: IFFALSE 5084
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
5064: LD_VAR 0 2
5068: PPUSH
5069: LD_VAR 0 9
5073: PUSH
5074: LD_INT 1
5076: ARRAY
5077: PPUSH
5078: CALL_OW 120
5082: GO 5104
// ComEnterUnit ( i , turrety [ y ] ) ;
5084: LD_VAR 0 2
5088: PPUSH
5089: LD_VAR 0 5
5093: PUSH
5094: LD_VAR 0 4
5098: ARRAY
5099: PPUSH
5100: CALL_OW 120
// y = y + 1 ;
5104: LD_ADDR_VAR 0 4
5108: PUSH
5109: LD_VAR 0 4
5113: PUSH
5114: LD_INT 1
5116: PLUS
5117: ST_TO_ADDR
// end ; 2 :
5118: GO 5246
5120: LD_INT 2
5122: DOUBLE
5123: EQUAL
5124: IFTRUE 5128
5126: GO 5143
5128: POP
// ComEnterUnit ( i , WestTerminal ) ; 3 :
5129: LD_VAR 0 2
5133: PPUSH
5134: LD_INT 123
5136: PPUSH
5137: CALL_OW 120
5141: GO 5246
5143: LD_INT 3
5145: DOUBLE
5146: EQUAL
5147: IFTRUE 5151
5149: GO 5216
5151: POP
// begin if z > 3 then
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 3
5159: GREATER
5160: IFFALSE 5182
// ComEnterUnit ( i , fabryka [ 1 ] ) else
5162: LD_VAR 0 2
5166: PPUSH
5167: LD_VAR 0 6
5171: PUSH
5172: LD_INT 1
5174: ARRAY
5175: PPUSH
5176: CALL_OW 120
5180: GO 5200
// ComEnterUnit ( i , wieza [ 1 ] ) ;
5182: LD_VAR 0 2
5186: PPUSH
5187: LD_VAR 0 7
5191: PUSH
5192: LD_INT 1
5194: ARRAY
5195: PPUSH
5196: CALL_OW 120
// z = z + 1 ;
5200: LD_ADDR_VAR 0 3
5204: PUSH
5205: LD_VAR 0 3
5209: PUSH
5210: LD_INT 1
5212: PLUS
5213: ST_TO_ADDR
// end ; 4 :
5214: GO 5246
5216: LD_INT 4
5218: DOUBLE
5219: EQUAL
5220: IFTRUE 5224
5222: GO 5245
5224: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
5225: LD_VAR 0 2
5229: PPUSH
5230: LD_VAR 0 8
5234: PUSH
5235: LD_INT 1
5237: ARRAY
5238: PPUSH
5239: CALL_OW 120
5243: GO 5246
5245: POP
// end ;
5246: GO 5017
5248: POP
5249: POP
// Uc_Side := 1 ;
5250: LD_ADDR_OWVAR 20
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// Uc_Nation := 1 ;
5258: LD_ADDR_OWVAR 21
5262: PUSH
5263: LD_INT 1
5265: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , false ,  ) ;
5266: LD_ADDR_EXP 60
5270: PUSH
5271: LD_STRING Houten
5273: PPUSH
5274: LD_INT 0
5276: PPUSH
5277: LD_STRING 
5279: PPUSH
5280: CALL 9960 0 3
5284: ST_TO_ADDR
// PlaceHumanInUnit ( Houten , WestTerminal ) ;
5285: LD_EXP 60
5289: PPUSH
5290: LD_INT 123
5292: PPUSH
5293: CALL_OW 52
// end ;
5297: LD_VAR 0 1
5301: RET
// every 10 10$0 trigger start_ended = true do var i ;
5302: LD_EXP 69
5306: PUSH
5307: LD_INT 1
5309: EQUAL
5310: IFFALSE 5399
5312: GO 5314
5314: DISABLE
5315: LD_INT 0
5317: PPUSH
// begin Uc_Nation = 1 ;
5318: LD_ADDR_OWVAR 21
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// Uc_Side = 1 ;
5326: LD_ADDR_OWVAR 20
5330: PUSH
5331: LD_INT 1
5333: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5334: LD_ADDR_VAR 0 1
5338: PUSH
5339: DOUBLE
5340: LD_INT 1
5342: DEC
5343: ST_TO_ADDR
5344: LD_INT 4
5346: PUSH
5347: LD_INT 5
5349: PUSH
5350: LD_INT 6
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: LIST
5357: PUSH
5358: LD_OWVAR 67
5362: ARRAY
5363: PUSH
5364: FOR_TO
5365: IFFALSE 5396
// AddComConstruct ( AmFactory , 4 , 1 , 2 , rand ( 4 , 6 ) ) ;
5367: LD_INT 239
5369: PPUSH
5370: LD_INT 4
5372: PPUSH
5373: LD_INT 1
5375: PPUSH
5376: LD_INT 2
5378: PPUSH
5379: LD_INT 4
5381: PPUSH
5382: LD_INT 6
5384: PPUSH
5385: CALL_OW 12
5389: PPUSH
5390: CALL_OW 185
5394: GO 5364
5396: POP
5397: POP
// enable ;
5398: ENABLE
// end ;
5399: PPOPN 1
5401: END
// every 0 0$1 trigger attackers >= [ 4 , 5 , 6 ] [ Difficulty ] do var enemy , attacker ;
5402: LD_EXP 8
5406: PUSH
5407: LD_INT 4
5409: PUSH
5410: LD_INT 5
5412: PUSH
5413: LD_INT 6
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: LD_OWVAR 67
5425: ARRAY
5426: GREATEREQUAL
5427: IFFALSE 5519
5429: GO 5431
5431: DISABLE
5432: LD_INT 0
5434: PPUSH
5435: PPUSH
// begin enable ;
5436: ENABLE
// enemy := Filterallunits ( [ f_side , 3 ] ) ;
5437: LD_ADDR_VAR 0 1
5441: PUSH
5442: LD_INT 22
5444: PUSH
5445: LD_INT 3
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PPUSH
5452: CALL_OW 69
5456: ST_TO_ADDR
// for attacker in UnitFilter ( attackers , [ [ f_ok ] , [ f_linked ] ] ) do
5457: LD_ADDR_VAR 0 2
5461: PUSH
5462: LD_EXP 8
5466: PPUSH
5467: LD_INT 50
5469: PUSH
5470: EMPTY
5471: LIST
5472: PUSH
5473: LD_INT 61
5475: PUSH
5476: EMPTY
5477: LIST
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PPUSH
5483: CALL_OW 72
5487: PUSH
5488: FOR_IN
5489: IFFALSE 5517
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
5491: LD_VAR 0 2
5495: PPUSH
5496: LD_VAR 0 1
5500: PPUSH
5501: LD_VAR 0 2
5505: PPUSH
5506: CALL_OW 74
5510: PPUSH
5511: CALL_OW 115
5515: GO 5488
5517: POP
5518: POP
// end ; end_of_file
5519: PPOPN 2
5521: END
// export function Action ; begin
5522: LD_INT 0
5524: PPUSH
// ingame_video := true ;
5525: LD_ADDR_OWVAR 52
5529: PUSH
5530: LD_INT 1
5532: ST_TO_ADDR
// interface_hidden := true ;
5533: LD_ADDR_OWVAR 54
5537: PUSH
5538: LD_INT 1
5540: ST_TO_ADDR
// ComMoveToArea ( [ Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ] , PeopleStartArea ) ;
5541: LD_EXP 10
5545: PUSH
5546: LD_EXP 11
5550: PUSH
5551: LD_EXP 12
5555: PUSH
5556: LD_EXP 13
5560: PUSH
5561: LD_EXP 14
5565: PUSH
5566: LD_EXP 15
5570: PUSH
5571: LD_EXP 16
5575: PUSH
5576: LD_EXP 17
5580: PUSH
5581: LD_EXP 18
5585: PUSH
5586: LD_EXP 19
5590: PUSH
5591: LD_EXP 20
5595: PUSH
5596: LD_EXP 21
5600: PUSH
5601: LD_EXP 22
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: PPUSH
5621: LD_INT 10
5623: PPUSH
5624: CALL_OW 113
// ComMoveToArea ( Yakotich , YakotichStartArea ) ;
5628: LD_EXP 9
5632: PPUSH
5633: LD_INT 11
5635: PPUSH
5636: CALL_OW 113
// end ;
5640: LD_VAR 0 1
5644: RET
// every 0 0$1 trigger IsInArea ( Yakotich , YakotichStartArea ) do
5645: LD_EXP 9
5649: PPUSH
5650: LD_INT 11
5652: PPUSH
5653: CALL_OW 308
5657: IFFALSE 5724
5659: GO 5661
5661: DISABLE
// begin ComTurnUnit ( Yakotich , Mietek ) ;
5662: LD_EXP 9
5666: PPUSH
5667: LD_EXP 10
5671: PPUSH
5672: CALL_OW 119
// Say ( Yakotich , 3Yak-01 ) ;
5676: LD_EXP 9
5680: PPUSH
5681: LD_STRING 3Yak-01
5683: PPUSH
5684: CALL_OW 88
// ComEnterUnit ( Yakotich , Ovsyenko ) ;
5688: LD_EXP 9
5692: PPUSH
5693: LD_INT 74
5695: PPUSH
5696: CALL_OW 120
// ComEnterUnit ( Mietek , Ovsyenko ) ;
5700: LD_EXP 10
5704: PPUSH
5705: LD_INT 74
5707: PPUSH
5708: CALL_OW 120
// ComEnterUnit ( Boris , Ovsyenko ) ;
5712: LD_EXP 11
5716: PPUSH
5717: LD_INT 74
5719: PPUSH
5720: CALL_OW 120
// end ;
5724: END
// export engs ; export function SikorskiAction ; var x , y , i , tmp , t , engs , un , speaker ; begin
5725: LD_INT 0
5727: PPUSH
5728: PPUSH
5729: PPUSH
5730: PPUSH
5731: PPUSH
5732: PPUSH
5733: PPUSH
5734: PPUSH
5735: PPUSH
// x := 101 ;
5736: LD_ADDR_VAR 0 2
5740: PUSH
5741: LD_INT 101
5743: ST_TO_ADDR
// y := 116 ;
5744: LD_ADDR_VAR 0 3
5748: PUSH
5749: LD_INT 116
5751: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 30 ) ;
5752: LD_VAR 0 2
5756: PPUSH
5757: LD_VAR 0 3
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: LD_INT 30
5767: NEG
5768: PPUSH
5769: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
5773: LD_VAR 0 2
5777: PPUSH
5778: LD_VAR 0 3
5782: PPUSH
5783: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Sikorski ;
5787: LD_ADDR_VAR 0 5
5791: PUSH
5792: LD_INT 22
5794: PUSH
5795: LD_INT 4
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 21
5804: PUSH
5805: LD_INT 1
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: PUSH
5821: LD_EXP 49
5825: DIFF
5826: ST_TO_ADDR
// AddComTurnXY ( tmp , 111 , 125 ) ;
5827: LD_VAR 0 5
5831: PPUSH
5832: LD_INT 111
5834: PPUSH
5835: LD_INT 125
5837: PPUSH
5838: CALL_OW 178
// wait ( 0 0$02 ) ;
5842: LD_INT 70
5844: PPUSH
5845: CALL_OW 67
// AddComMoveXY ( Sikorski , 105 , 111 ) ;
5849: LD_EXP 49
5853: PPUSH
5854: LD_INT 105
5856: PPUSH
5857: LD_INT 111
5859: PPUSH
5860: CALL_OW 171
// ComAgressiveMove ( tmp , 108 , 117 ) ;
5864: LD_VAR 0 5
5868: PPUSH
5869: LD_INT 108
5871: PPUSH
5872: LD_INT 117
5874: PPUSH
5875: CALL_OW 114
// Say ( Sikorski , 3Sik-01 ) ;
5879: LD_EXP 49
5883: PPUSH
5884: LD_STRING 3Sik-01
5886: PPUSH
5887: CALL_OW 88
// Say ( Yakotich , 3Yak-08 ) ;
5891: LD_EXP 9
5895: PPUSH
5896: LD_STRING 3Yak-08
5898: PPUSH
5899: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
5903: LD_INT 35
5905: PPUSH
5906: CALL_OW 67
// until See ( 3 , Sikorski ) ;
5910: LD_INT 3
5912: PPUSH
5913: LD_EXP 49
5917: PPUSH
5918: CALL_OW 292
5922: IFFALSE 5903
// un := UnitsInside ( NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , Sikorski ) ) [ 1 ] ;
5924: LD_ADDR_VAR 0 8
5928: PUSH
5929: LD_INT 30
5931: PUSH
5932: LD_INT 31
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PPUSH
5939: CALL_OW 69
5943: PPUSH
5944: LD_EXP 49
5948: PPUSH
5949: CALL_OW 74
5953: PPUSH
5954: CALL_OW 313
5958: PUSH
5959: LD_INT 1
5961: ARRAY
5962: ST_TO_ADDR
// AddComAttackUnit ( un , Sikorski ) ;
5963: LD_VAR 0 8
5967: PPUSH
5968: LD_EXP 49
5972: PPUSH
5973: CALL_OW 175
// wait ( 0 0$3 ) ;
5977: LD_INT 105
5979: PPUSH
5980: CALL_OW 67
// MineExplosion ( 111 , 116 , 1 ) ;
5984: LD_INT 111
5986: PPUSH
5987: LD_INT 116
5989: PPUSH
5990: LD_INT 1
5992: PPUSH
5993: CALL_OW 453
// repeat wait ( 0 0$01 ) ;
5997: LD_INT 35
5999: PPUSH
6000: CALL_OW 67
// until IsDying ( un ) ;
6004: LD_VAR 0 8
6008: PPUSH
6009: CALL_OW 303
6013: IFFALSE 5997
// DoNotAttack ( 3 , Sikorski ) ;
6015: LD_INT 3
6017: PPUSH
6018: LD_EXP 49
6022: PPUSH
6023: CALL_OW 471
// AddComMoveXY ( Sikorski , 110 , 120 ) ;
6027: LD_EXP 49
6031: PPUSH
6032: LD_INT 110
6034: PPUSH
6035: LD_INT 120
6037: PPUSH
6038: CALL_OW 171
// AddComAttackUnit ( Sikorski , Ovsyenko ) ;
6042: LD_EXP 49
6046: PPUSH
6047: LD_INT 74
6049: PPUSH
6050: CALL_OW 175
// Say ( Yakotich , 3Yak-09 ) ;
6054: LD_EXP 9
6058: PPUSH
6059: LD_STRING 3Yak-09
6061: PPUSH
6062: CALL_OW 88
// ComExitBuilding ( [ f_side , 3 ] ) ;
6066: LD_INT 22
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PPUSH
6076: CALL_OW 122
// AddComAgressiveMove ( [ f_side , 3 ] , 106 , 114 ) ;
6080: LD_INT 22
6082: PUSH
6083: LD_INT 3
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PPUSH
6090: LD_INT 106
6092: PPUSH
6093: LD_INT 114
6095: PPUSH
6096: CALL_OW 174
// ComMoveXY ( tmp , 109 , 119 ) ;
6100: LD_VAR 0 5
6104: PPUSH
6105: LD_INT 109
6107: PPUSH
6108: LD_INT 119
6110: PPUSH
6111: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
6115: LD_VAR 0 5
6119: PPUSH
6120: LD_INT 111
6122: PPUSH
6123: LD_INT 125
6125: PPUSH
6126: CALL_OW 178
// ComExitBuilding ( Yakotich ) ;
6130: LD_EXP 9
6134: PPUSH
6135: CALL_OW 122
// AddComAttackUnit ( Yakotich , Sikorski ) ;
6139: LD_EXP 9
6143: PPUSH
6144: LD_EXP 49
6148: PPUSH
6149: CALL_OW 175
// Say ( Sikorski , 3Sik-02 ) ;
6153: LD_EXP 49
6157: PPUSH
6158: LD_STRING 3Sik-02
6160: PPUSH
6161: CALL_OW 88
// wait ( 0 0$2 ) ;
6165: LD_INT 70
6167: PPUSH
6168: CALL_OW 67
// SayEffect ( 3smrtsikora ) ;
6172: LD_STRING 3smrtsikora
6174: PPUSH
6175: CALL_OW 96
// KillUnit ( Sikorski ) ;
6179: LD_EXP 49
6183: PPUSH
6184: CALL_OW 66
// sikorski_dead = true ;
6188: LD_ADDR_EXP 77
6192: PUSH
6193: LD_INT 1
6195: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6196: LD_INT 35
6198: PPUSH
6199: CALL_OW 67
// engs := FilterAllUnits ( [ [ f_class , 2 ] , [ f_side , 3 ] ] ) ;
6203: LD_ADDR_VAR 0 7
6207: PUSH
6208: LD_INT 25
6210: PUSH
6211: LD_INT 2
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 22
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PPUSH
6232: CALL_OW 69
6236: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
6237: LD_VAR 0 7
6241: PPUSH
6242: CALL_OW 122
// for i = 1 to engs do
6246: LD_ADDR_VAR 0 4
6250: PUSH
6251: DOUBLE
6252: LD_INT 1
6254: DEC
6255: ST_TO_ADDR
6256: LD_VAR 0 7
6260: PUSH
6261: FOR_TO
6262: IFFALSE 6302
// AddComEnterUnit ( engs [ i ] , FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) [ i ] ) ;
6264: LD_VAR 0 7
6268: PUSH
6269: LD_VAR 0 4
6273: ARRAY
6274: PPUSH
6275: LD_INT 34
6277: PUSH
6278: LD_INT 51
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PPUSH
6285: CALL_OW 69
6289: PUSH
6290: LD_VAR 0 4
6294: ARRAY
6295: PPUSH
6296: CALL_OW 180
6300: GO 6261
6302: POP
6303: POP
// AddComTransport ( Anton , Ovsyenko , mat_siberit ) ;
6304: LD_EXP 27
6308: PPUSH
6309: LD_INT 74
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: CALL_OW 211
// AddComWait ( Boris , 0 0$1 ) ;
6319: LD_EXP 11
6323: PPUSH
6324: LD_INT 35
6326: PPUSH
6327: CALL_OW 202
// AddComTransport ( Boris , Ovsyenko , mat_cans ) ;
6331: LD_EXP 11
6335: PPUSH
6336: LD_INT 74
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 211
// AddComMoveXY ( engs , 147 , 220 ) ;
6346: LD_VAR 0 7
6350: PPUSH
6351: LD_INT 147
6353: PPUSH
6354: LD_INT 220
6356: PPUSH
6357: CALL_OW 171
// AddComExitVehicle ( engs ) ;
6361: LD_VAR 0 7
6365: PPUSH
6366: CALL_OW 181
// AddComMoveXY ( Yakotich , 148 , 208 ) ;
6370: LD_EXP 9
6374: PPUSH
6375: LD_INT 148
6377: PPUSH
6378: LD_INT 208
6380: PPUSH
6381: CALL_OW 171
// un := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
6385: LD_ADDR_VAR 0 8
6389: PUSH
6390: LD_INT 22
6392: PUSH
6393: LD_INT 3
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 25
6402: PUSH
6403: LD_INT 1
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PPUSH
6414: CALL_OW 69
6418: ST_TO_ADDR
// ComExitBuilding ( un ) ;
6419: LD_VAR 0 8
6423: PPUSH
6424: CALL_OW 122
// ComExitBuilding ( Grigori ) ;
6428: LD_EXP 26
6432: PPUSH
6433: CALL_OW 122
// AddComMoveXY ( un , 148 , 208 ) ;
6437: LD_VAR 0 8
6441: PPUSH
6442: LD_INT 148
6444: PPUSH
6445: LD_INT 208
6447: PPUSH
6448: CALL_OW 171
// AddComMoveXY ( Grigori , 148 , 208 ) ;
6452: LD_EXP 26
6456: PPUSH
6457: LD_INT 148
6459: PPUSH
6460: LD_INT 208
6462: PPUSH
6463: CALL_OW 171
// wait ( 5 ) ;
6467: LD_INT 5
6469: PPUSH
6470: CALL_OW 67
// Say ( Jilian , 3Rand-01 ) ;
6474: LD_EXP 58
6478: PPUSH
6479: LD_STRING 3Rand-01
6481: PPUSH
6482: CALL_OW 88
// ComMoveToArea ( SikorskiTeam , OvsyenkoArea ) ;
6486: LD_EXP 4
6490: PPUSH
6491: LD_INT 6
6493: PPUSH
6494: CALL_OW 113
// wait ( 0 0$7 ) ;
6498: LD_INT 245
6500: PPUSH
6501: CALL_OW 67
// t := [ [ 104 , 117 ] , [ 115 , 123 ] , [ 114 , 126 ] , [ 111 , 122 ] , [ 112 , 126 ] , [ 117 , 130 ] , [ 106 , 127 ] , [ 111 , 117 ] , [ 98 , 119 ] , [ 116 , 131 ] , [ 109 , 129 ] , [ 100 , 113 ] ] ;
6505: LD_ADDR_VAR 0 6
6509: PUSH
6510: LD_INT 104
6512: PUSH
6513: LD_INT 117
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: PUSH
6520: LD_INT 115
6522: PUSH
6523: LD_INT 123
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 114
6532: PUSH
6533: LD_INT 126
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 111
6542: PUSH
6543: LD_INT 122
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 112
6552: PUSH
6553: LD_INT 126
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 117
6562: PUSH
6563: LD_INT 130
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: LD_INT 106
6572: PUSH
6573: LD_INT 127
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 111
6582: PUSH
6583: LD_INT 117
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 98
6592: PUSH
6593: LD_INT 119
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 116
6602: PUSH
6603: LD_INT 131
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: LD_INT 109
6612: PUSH
6613: LD_INT 129
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 100
6622: PUSH
6623: LD_INT 113
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: ST_TO_ADDR
// for i in t do
6644: LD_ADDR_VAR 0 4
6648: PUSH
6649: LD_VAR 0 6
6653: PUSH
6654: FOR_IN
6655: IFFALSE 6691
// begin wait ( 0 0$0.3 ) ;
6657: LD_INT 10
6659: PPUSH
6660: CALL_OW 67
// MineExplosion ( i [ 1 ] , i [ 2 ] , 1 ) ;
6664: LD_VAR 0 4
6668: PUSH
6669: LD_INT 1
6671: ARRAY
6672: PPUSH
6673: LD_VAR 0 4
6677: PUSH
6678: LD_INT 2
6680: ARRAY
6681: PPUSH
6682: LD_INT 1
6684: PPUSH
6685: CALL_OW 453
// end ;
6689: GO 6654
6691: POP
6692: POP
// wait ( 0 0$4 ) ;
6693: LD_INT 140
6695: PPUSH
6696: CALL_OW 67
// Say ( Turner , 3Rand-02 ) ;
6700: LD_EXP 59
6704: PPUSH
6705: LD_STRING 3Rand-02
6707: PPUSH
6708: CALL_OW 88
// wait ( 0 0$5 ) ;
6712: LD_INT 175
6714: PPUSH
6715: CALL_OW 67
// wait ( 0 0$2 ) ;
6719: LD_INT 70
6721: PPUSH
6722: CALL_OW 67
// SayRadio ( Yakotich , 3Yak-10 ) ;
6726: LD_EXP 9
6730: PPUSH
6731: LD_STRING 3Yak-10
6733: PPUSH
6734: CALL_OW 94
// SetLives ( Ovsyenko , 400 ) ;
6738: LD_INT 74
6740: PPUSH
6741: LD_INT 400
6743: PPUSH
6744: CALL_OW 234
// Cutscene_ended = true ;
6748: LD_ADDR_EXP 67
6752: PUSH
6753: LD_INT 1
6755: ST_TO_ADDR
// CenterOnXY ( 148 , 208 ) ;
6756: LD_INT 148
6758: PPUSH
6759: LD_INT 208
6761: PPUSH
6762: CALL_OW 84
// SayRadio ( Platonov , 3Plat-03 ) ;
6766: LD_EXP 63
6770: PPUSH
6771: LD_STRING 3Plat-03
6773: PPUSH
6774: CALL_OW 94
// SayRadio ( Platonov , 3Plat-04 ) ;
6778: LD_EXP 63
6782: PPUSH
6783: LD_STRING 3Plat-04
6785: PPUSH
6786: CALL_OW 94
// SayRadio ( Platonov , 3Plat-05 ) ;
6790: LD_EXP 63
6794: PPUSH
6795: LD_STRING 3Plat-05
6797: PPUSH
6798: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-11 ) ;
6802: LD_EXP 9
6806: PPUSH
6807: LD_STRING 3Yak-11
6809: PPUSH
6810: CALL_OW 94
// repeat Wait ( 0 0$1 ) until not IsInUnit ( Boris ) and not IsInUnit ( Anton ) ;
6814: LD_INT 35
6816: PPUSH
6817: CALL_OW 67
6821: LD_EXP 11
6825: PPUSH
6826: CALL_OW 310
6830: NOT
6831: PUSH
6832: LD_EXP 27
6836: PPUSH
6837: CALL_OW 310
6841: NOT
6842: AND
6843: IFFALSE 6814
// tmp := [ ] ;
6845: LD_ADDR_VAR 0 5
6849: PUSH
6850: EMPTY
6851: ST_TO_ADDR
// start_ended = true ;
6852: LD_ADDR_EXP 69
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// end ;
6860: LD_VAR 0 1
6864: RET
// every 0 0$1 trigger IsInUnit ( Yakotich ) do
6865: LD_EXP 9
6869: PPUSH
6870: CALL_OW 310
6874: IFFALSE 7183
6876: GO 6878
6878: DISABLE
// begin Say ( Yakotich , 3Yak-02 ) ;
6879: LD_EXP 9
6883: PPUSH
6884: LD_STRING 3Yak-02
6886: PPUSH
6887: CALL_OW 88
// Say ( Dimitri , 3Dim-01 ) ;
6891: LD_EXP 23
6895: PPUSH
6896: LD_STRING 3Dim-01
6898: PPUSH
6899: CALL_OW 88
// Say ( Yakotich , 3Yak-03 ) ;
6903: LD_EXP 9
6907: PPUSH
6908: LD_STRING 3Yak-03
6910: PPUSH
6911: CALL_OW 88
// Say ( Dimitri , 3Dim-02 ) ;
6915: LD_EXP 23
6919: PPUSH
6920: LD_STRING 3Dim-02
6922: PPUSH
6923: CALL_OW 88
// SayRadio ( Yakotich , 3Yak-04 ) ;
6927: LD_EXP 9
6931: PPUSH
6932: LD_STRING 3Yak-04
6934: PPUSH
6935: CALL_OW 94
// SayRadio ( Platonov , 3Plat-01 ) ;
6939: LD_EXP 63
6943: PPUSH
6944: LD_STRING 3Plat-01
6946: PPUSH
6947: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-05 ) ;
6951: LD_EXP 9
6955: PPUSH
6956: LD_STRING 3Yak-05
6958: PPUSH
6959: CALL_OW 94
// SayRadio ( Platonov , 3Plat-02 ) ;
6963: LD_EXP 63
6967: PPUSH
6968: LD_STRING 3Plat-02
6970: PPUSH
6971: CALL_OW 94
// Say ( Dimitri , 3Dim-03 ) ;
6975: LD_EXP 23
6979: PPUSH
6980: LD_STRING 3Dim-03
6982: PPUSH
6983: CALL_OW 88
// Say ( Dimitri , 3Dim-04 ) ;
6987: LD_EXP 23
6991: PPUSH
6992: LD_STRING 3Dim-04
6994: PPUSH
6995: CALL_OW 88
// Say ( Yakotich , 3Yak-06 ) ;
6999: LD_EXP 9
7003: PPUSH
7004: LD_STRING 3Yak-06
7006: PPUSH
7007: CALL_OW 88
// Say ( Dimitri , 3Dim-05 ) ;
7011: LD_EXP 23
7015: PPUSH
7016: LD_STRING 3Dim-05
7018: PPUSH
7019: CALL_OW 88
// Say ( Yakotich , 3Yak-07 ) ;
7023: LD_EXP 9
7027: PPUSH
7028: LD_STRING 3Yak-07
7030: PPUSH
7031: CALL_OW 88
// Wait ( 0 0$03 ) ;
7035: LD_INT 105
7037: PPUSH
7038: CALL_OW 67
// InitSikorskiTeam ;
7042: CALL 2925 0 0
// SikorskiAction ;
7046: CALL 5725 0 0
// ChangeMissionObjectives ( o1 ) ;
7050: LD_STRING o1
7052: PPUSH
7053: CALL_OW 337
// SetSide ( [ Ovsyenko , OB2 , OB3 , oil , eoil1 , eoil2 ] , 4 ) ;
7057: LD_INT 74
7059: PUSH
7060: LD_INT 79
7062: PUSH
7063: LD_INT 78
7065: PUSH
7066: LD_INT 76
7068: PUSH
7069: LD_INT 85
7071: PUSH
7072: LD_INT 86
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: CALL_OW 235
// ComEnterUnit ( Cyrus , OB3 ) ;
7090: LD_EXP 53
7094: PPUSH
7095: LD_INT 78
7097: PPUSH
7098: CALL_OW 120
// ComEnterUnit ( Bobby , OB2 ) ;
7102: LD_EXP 52
7106: PPUSH
7107: LD_INT 79
7109: PPUSH
7110: CALL_OW 120
// SetClass ( [ Jilian , Turner ] , 2 ) ;
7114: LD_EXP 58
7118: PUSH
7119: LD_EXP 59
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: LD_INT 2
7130: PPUSH
7131: CALL_OW 336
// ComWalk ( [ Jilian , Turner , McCreery , Lynch , Walker , Truman , Gary ] ) ;
7135: LD_EXP 58
7139: PUSH
7140: LD_EXP 59
7144: PUSH
7145: LD_EXP 56
7149: PUSH
7150: LD_EXP 55
7154: PUSH
7155: LD_EXP 57
7159: PUSH
7160: LD_EXP 51
7164: PUSH
7165: LD_EXP 54
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: PPUSH
7179: CALL_OW 138
// end ;
7183: END
// every 0 0$1 trigger start_ended = true do
7184: LD_EXP 69
7188: PUSH
7189: LD_INT 1
7191: EQUAL
7192: IFFALSE 7264
7194: GO 7196
7196: DISABLE
// begin Say ( Yakotich , 3Yak-12 ) ;
7197: LD_EXP 9
7201: PPUSH
7202: LD_STRING 3Yak-12
7204: PPUSH
7205: CALL_OW 88
// Say ( Vasilij , 3Vas-01 ) ;
7209: LD_EXP 12
7213: PPUSH
7214: LD_STRING 3Vas-01
7216: PPUSH
7217: CALL_OW 88
// Say ( Dimitri , 3Dim-06 ) ;
7221: LD_EXP 23
7225: PPUSH
7226: LD_STRING 3Dim-06
7228: PPUSH
7229: CALL_OW 88
// Say ( Dimitri , 3Dim-07 ) ;
7233: LD_EXP 23
7237: PPUSH
7238: LD_STRING 3Dim-07
7240: PPUSH
7241: CALL_OW 88
// Say ( Vasilij , 3Vas-02 ) ;
7245: LD_EXP 12
7249: PPUSH
7250: LD_STRING 3Vas-02
7252: PPUSH
7253: CALL_OW 88
// ChangeMissionObjectives ( rocket ) ;
7257: LD_STRING rocket
7259: PPUSH
7260: CALL_OW 337
// end ;
7264: END
// every 0 0$1 trigger GetSide ( Ovsyenko ) = 3 and start_ended = true do
7265: LD_INT 74
7267: PPUSH
7268: CALL_OW 255
7272: PUSH
7273: LD_INT 3
7275: EQUAL
7276: PUSH
7277: LD_EXP 69
7281: PUSH
7282: LD_INT 1
7284: EQUAL
7285: AND
7286: IFFALSE 7468
7288: GO 7290
7290: DISABLE
// begin DialogueOn ;
7291: CALL_OW 6
// InGameOn ;
7295: CALL_OW 8
// SayRadio ( Yakotich , 3Yak-13 ) ;
7299: LD_EXP 9
7303: PPUSH
7304: LD_STRING 3Yak-13
7306: PPUSH
7307: CALL_OW 94
// SayRadio ( Platonov , 3Plat-06 ) ;
7311: LD_EXP 63
7315: PPUSH
7316: LD_STRING 3Plat-06
7318: PPUSH
7319: CALL_OW 94
// SayRadio ( Platonov , 3Plat-07 ) ;
7323: LD_EXP 63
7327: PPUSH
7328: LD_STRING 3Plat-07
7330: PPUSH
7331: CALL_OW 94
// Say ( Mietek , 3Ryn-01 ) ;
7335: LD_EXP 10
7339: PPUSH
7340: LD_STRING 3Ryn-01
7342: PPUSH
7343: CALL_OW 88
// CenterNowOnXY ( 109 , 72 ) ;
7347: LD_INT 109
7349: PPUSH
7350: LD_INT 72
7352: PPUSH
7353: CALL_OW 86
// RevealFogArea ( 3 , EastPassage ) ;
7357: LD_INT 3
7359: PPUSH
7360: LD_INT 13
7362: PPUSH
7363: CALL_OW 332
// Say ( Mietek , 3Ryn-02 ) ;
7367: LD_EXP 10
7371: PPUSH
7372: LD_STRING 3Ryn-02
7374: PPUSH
7375: CALL_OW 88
// CenterNowOnXY ( 78 , 17 ) ;
7379: LD_INT 78
7381: PPUSH
7382: LD_INT 17
7384: PPUSH
7385: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
7389: LD_INT 3
7391: PPUSH
7392: LD_INT 14
7394: PPUSH
7395: CALL_OW 332
// Say ( Mietek , 3Ryn-03 ) ;
7399: LD_EXP 10
7403: PPUSH
7404: LD_STRING 3Ryn-03
7406: PPUSH
7407: CALL_OW 88
// Say ( Yakotich , 3Yak-14 ) ;
7411: LD_EXP 9
7415: PPUSH
7416: LD_STRING 3Yak-14
7418: PPUSH
7419: CALL_OW 88
// ChangeMissionObjectives ( [ o2a , o2b , o2c ] [ Difficulty ] ) ;
7423: LD_STRING o2a
7425: PUSH
7426: LD_STRING o2b
7428: PUSH
7429: LD_STRING o2c
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: PUSH
7437: LD_OWVAR 67
7441: ARRAY
7442: PPUSH
7443: CALL_OW 337
// SetTech ( 86 , 3 , 1 ) ;
7447: LD_INT 86
7449: PPUSH
7450: LD_INT 3
7452: PPUSH
7453: LD_INT 1
7455: PPUSH
7456: CALL_OW 322
// DialogueOff ;
7460: CALL_OW 7
// InGameOff ;
7464: CALL_OW 9
// end ;
7468: END
// every 0 0$1 trigger ovsyenko_captured = true do
7469: LD_EXP 68
7473: PUSH
7474: LD_INT 1
7476: EQUAL
7477: IFFALSE 7815
7479: GO 7481
7481: DISABLE
// begin Wait ( 15 15$0 ) ;
7482: LD_INT 31500
7484: PPUSH
7485: CALL_OW 67
// InitBurlak ;
7489: CALL 2309 0 0
// DialogueOn ;
7493: CALL_OW 6
// CenterNowOnXY ( 155 , 235 ) ;
7497: LD_INT 155
7499: PPUSH
7500: LD_INT 235
7502: PPUSH
7503: CALL_OW 86
// SayRadio ( Burlak , 3Bur-01 ) ;
7507: LD_EXP 33
7511: PPUSH
7512: LD_STRING 3Bur-01
7514: PPUSH
7515: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-15 ) ;
7519: LD_EXP 9
7523: PPUSH
7524: LD_STRING 3Yak-15
7526: PPUSH
7527: CALL_OW 94
// SayRadio ( Burlak , 3Bur-02 ) ;
7531: LD_EXP 33
7535: PPUSH
7536: LD_STRING 3Bur-02
7538: PPUSH
7539: CALL_OW 94
// CenterNowOnUnits ( BurlakVeh ) ;
7543: LD_EXP 41
7547: PPUSH
7548: CALL_OW 87
// SayRadio ( Vasilij , 3Vas-Flame-01 ) ;
7552: LD_EXP 12
7556: PPUSH
7557: LD_STRING 3Vas-Flame-01
7559: PPUSH
7560: CALL_OW 94
// SayRadio ( Burlak , 3Bur-Flame-01 ) ;
7564: LD_EXP 33
7568: PPUSH
7569: LD_STRING 3Bur-Flame-01
7571: PPUSH
7572: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-Flame-01 ) ;
7576: LD_EXP 9
7580: PPUSH
7581: LD_STRING 3Yak-Flame-01
7583: PPUSH
7584: CALL_OW 94
// SayRadio ( Burlak , 3Bur-Flame-02 ) ;
7588: LD_EXP 33
7592: PPUSH
7593: LD_STRING 3Bur-Flame-02
7595: PPUSH
7596: CALL_OW 94
// SayRadio ( Vasilij , 3Vas-Flame-02 ) ;
7600: LD_EXP 12
7604: PPUSH
7605: LD_STRING 3Vas-Flame-02
7607: PPUSH
7608: CALL_OW 94
// ChangeMissionObjectives ( o3 ) ;
7612: LD_STRING o3
7614: PPUSH
7615: CALL_OW 337
// DialogueOff ;
7619: CALL_OW 7
// Wait ( 0 0$15 ) ;
7623: LD_INT 525
7625: PPUSH
7626: CALL_OW 67
// DialogueOn ;
7630: CALL_OW 6
// Say ( Petrosyan , 3Pty-01 ) ;
7634: LD_EXP 39
7638: PPUSH
7639: LD_STRING 3Pty-01
7641: PPUSH
7642: CALL_OW 88
// Say ( Yakotich , 3Yak-16 ) ;
7646: LD_EXP 9
7650: PPUSH
7651: LD_STRING 3Yak-16
7653: PPUSH
7654: CALL_OW 88
// Say ( Platonov , 3Plat-08 ) ;
7658: LD_EXP 63
7662: PPUSH
7663: LD_STRING 3Plat-08
7665: PPUSH
7666: CALL_OW 88
// ChangeMissionObjectives ( o4 ) ;
7670: LD_STRING o4
7672: PPUSH
7673: CALL_OW 337
// SetRestrict ( 11 , 3 , 1 ) ;
7677: LD_INT 11
7679: PPUSH
7680: LD_INT 3
7682: PPUSH
7683: LD_INT 1
7685: PPUSH
7686: CALL_OW 324
// SetRestrict ( 14 , 3 , 1 ) ;
7690: LD_INT 14
7692: PPUSH
7693: LD_INT 3
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: CALL_OW 324
// SetRestrict ( 28 , 3 , 1 ) ;
7703: LD_INT 28
7705: PPUSH
7706: LD_INT 3
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: CALL_OW 324
// DialogueOff ;
7716: CALL_OW 7
// Wait ( 1 1$0 ) ;
7720: LD_INT 2100
7722: PPUSH
7723: CALL_OW 67
// DialogueOn ;
7727: CALL_OW 6
// Say ( Petrosyan , 3Pty-Comp-01 ) ;
7731: LD_EXP 39
7735: PPUSH
7736: LD_STRING 3Pty-Comp-01
7738: PPUSH
7739: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-01 ) ;
7743: LD_EXP 33
7747: PPUSH
7748: LD_STRING 3Bur-Comp-01
7750: PPUSH
7751: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-02 ) ;
7755: LD_EXP 39
7759: PPUSH
7760: LD_STRING 3Pty-Comp-02
7762: PPUSH
7763: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-02 ) ;
7767: LD_EXP 33
7771: PPUSH
7772: LD_STRING 3Bur-Comp-02
7774: PPUSH
7775: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-03 ) ;
7779: LD_EXP 39
7783: PPUSH
7784: LD_STRING 3Pty-Comp-03
7786: PPUSH
7787: CALL_OW 88
// SetRestrict ( 12 , 3 , 1 ) ;
7791: LD_INT 12
7793: PPUSH
7794: LD_INT 3
7796: PPUSH
7797: LD_INT 1
7799: PPUSH
7800: CALL_OW 324
// ChangeMissionObjectives ( o5 ) ;
7804: LD_STRING o5
7806: PPUSH
7807: CALL_OW 337
// DialogueOff ;
7811: CALL_OW 7
// end ;
7815: END
// every 0 0$1 trigger everything_researched = true and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 0 and siberit_excavated = true do
7816: LD_EXP 78
7820: PUSH
7821: LD_INT 1
7823: EQUAL
7824: PUSH
7825: LD_INT 22
7827: PUSH
7828: LD_INT 1
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 21
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PPUSH
7849: CALL_OW 69
7853: PUSH
7854: LD_INT 0
7856: LESSEQUAL
7857: AND
7858: PUSH
7859: LD_EXP 76
7863: PUSH
7864: LD_INT 1
7866: EQUAL
7867: AND
7868: IFFALSE 7885
7870: GO 7872
7872: DISABLE
// begin end_of_the_mission = true ;
7873: LD_ADDR_EXP 81
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// Ending ;
7881: CALL 7886 0 0
// end ;
7885: END
// export function Ending ; begin
7886: LD_INT 0
7888: PPUSH
// CenterOnUnits ( Yakotich ) ;
7889: LD_EXP 9
7893: PPUSH
7894: CALL_OW 85
// InGameOn ;
7898: CALL_OW 8
// SayRadio ( Platonov , 3Plat-09 ) ;
7902: LD_EXP 63
7906: PPUSH
7907: LD_STRING 3Plat-09
7909: PPUSH
7910: CALL_OW 94
// SayRadio ( Platonov , 3Plat-10 ) ;
7914: LD_EXP 63
7918: PPUSH
7919: LD_STRING 3Plat-10
7921: PPUSH
7922: CALL_OW 94
// SayRadio ( Burlak , 3Bur-03 ) ;
7926: LD_EXP 33
7930: PPUSH
7931: LD_STRING 3Bur-03
7933: PPUSH
7934: CALL_OW 94
// SetSide ( [ Burlak , Petrosyan , Dolgov , Karamazov , Titov , Gleb , Petrovova , Lipshchin ] , 6 ) ;
7938: LD_EXP 33
7942: PUSH
7943: LD_EXP 39
7947: PUSH
7948: LD_EXP 40
7952: PUSH
7953: LD_EXP 34
7957: PUSH
7958: LD_EXP 38
7962: PUSH
7963: LD_EXP 37
7967: PUSH
7968: LD_EXP 35
7972: PUSH
7973: LD_EXP 36
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: PPUSH
7988: LD_INT 6
7990: PPUSH
7991: CALL_OW 235
// ComMoveToArea ( [ Burlak , Petrosyan , Dolgov , Karamazov , Titov , Gleb , Petrovova , Lipshchin ] , ExitArea ) ;
7995: LD_EXP 33
7999: PUSH
8000: LD_EXP 39
8004: PUSH
8005: LD_EXP 40
8009: PUSH
8010: LD_EXP 34
8014: PUSH
8015: LD_EXP 38
8019: PUSH
8020: LD_EXP 37
8024: PUSH
8025: LD_EXP 35
8029: PUSH
8030: LD_EXP 36
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: PPUSH
8045: LD_INT 3
8047: PPUSH
8048: CALL_OW 113
// SayRadio ( Platonov , 3Plat-11 ) ;
8052: LD_EXP 63
8056: PPUSH
8057: LD_STRING 3Plat-11
8059: PPUSH
8060: CALL_OW 94
// SayRadio ( Platonov , 3Plat-12 ) ;
8064: LD_EXP 63
8068: PPUSH
8069: LD_STRING 3Plat-12
8071: PPUSH
8072: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-17 ) ;
8076: LD_EXP 9
8080: PPUSH
8081: LD_STRING 3Yak-17
8083: PPUSH
8084: CALL_OW 94
// Say ( Yakotich , 3Yak-18 ) ;
8088: LD_EXP 9
8092: PPUSH
8093: LD_STRING 3Yak-18
8095: PPUSH
8096: CALL_OW 88
// Say ( Dimitri , 3Dim-08 ) ;
8100: LD_EXP 23
8104: PPUSH
8105: LD_STRING 3Dim-08
8107: PPUSH
8108: CALL_OW 88
// InGameOff ;
8112: CALL_OW 9
// AddMedal ( SibExcavated , 1 ) ;
8116: LD_STRING SibExcavated
8118: PPUSH
8119: LD_INT 1
8121: PPUSH
8122: CALL_OW 101
// if IsOk ( BurlakVeh ) then
8126: LD_EXP 41
8130: PPUSH
8131: CALL_OW 302
8135: IFFALSE 8149
// AddMedal ( FlameSaved , 1 ) else
8137: LD_STRING FlameSaved
8139: PPUSH
8140: LD_INT 1
8142: PPUSH
8143: CALL_OW 101
8147: GO 8160
// AddMedal ( FlameSaved , - 1 ) ;
8149: LD_STRING FlameSaved
8151: PPUSH
8152: LD_INT 1
8154: NEG
8155: PPUSH
8156: CALL_OW 101
// if crane_researched = true and buldozer_researched = true and lab_captured = true and prediction_researched = true and rocket_researched = true then
8160: LD_EXP 80
8164: PUSH
8165: LD_INT 1
8167: EQUAL
8168: PUSH
8169: LD_EXP 74
8173: PUSH
8174: LD_INT 1
8176: EQUAL
8177: AND
8178: PUSH
8179: LD_EXP 71
8183: PUSH
8184: LD_INT 1
8186: EQUAL
8187: AND
8188: PUSH
8189: LD_EXP 73
8193: PUSH
8194: LD_INT 1
8196: EQUAL
8197: AND
8198: PUSH
8199: LD_EXP 72
8203: PUSH
8204: LD_INT 1
8206: EQUAL
8207: AND
8208: IFFALSE 8222
// AddMedal ( Secondary , 1 ) else
8210: LD_STRING Secondary
8212: PPUSH
8213: LD_INT 1
8215: PPUSH
8216: CALL_OW 101
8220: GO 8233
// AddMedal ( Secondary , - 1 ) ;
8222: LD_STRING Secondary
8224: PPUSH
8225: LD_INT 1
8227: NEG
8228: PPUSH
8229: CALL_OW 101
// GiveMedals ( Medals ) ;
8233: LD_STRING Medals
8235: PPUSH
8236: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
8240: LD_INT 22
8242: PUSH
8243: LD_INT 3
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: PUSH
8250: LD_INT 23
8252: PUSH
8253: LD_INT 3
8255: PUSH
8256: EMPTY
8257: LIST
8258: LIST
8259: PUSH
8260: LD_INT 21
8262: PUSH
8263: LD_INT 1
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: PUSH
8270: EMPTY
8271: LIST
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 69
8279: PUSH
8280: LD_INT 22
8282: PUSH
8283: LD_INT 6
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: LD_INT 23
8292: PUSH
8293: LD_INT 3
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 21
8302: PUSH
8303: LD_INT 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: EMPTY
8311: LIST
8312: LIST
8313: LIST
8314: PPUSH
8315: CALL_OW 69
8319: AND
8320: PPUSH
8321: CALL_OW 43
// SaveCharacters ( Yakotich , 03_Yakotich ) ;
8325: LD_EXP 9
8329: PPUSH
8330: LD_STRING 03_Yakotich
8332: PPUSH
8333: CALL_OW 38
// SaveCharacters ( Mietek , 03_Mietek ) ;
8337: LD_EXP 10
8341: PPUSH
8342: LD_STRING 03_Mietek
8344: PPUSH
8345: CALL_OW 38
// SaveCharacters ( Maksim , 03_Maksim ) ;
8349: LD_EXP 15
8353: PPUSH
8354: LD_STRING 03_Maksim
8356: PPUSH
8357: CALL_OW 38
// SaveCharacters ( Vasilij , 03_Vasilij ) ;
8361: LD_EXP 12
8365: PPUSH
8366: LD_STRING 03_Vasilij
8368: PPUSH
8369: CALL_OW 38
// SaveCharacters ( Michail , 03_Michail ) ;
8373: LD_EXP 13
8377: PPUSH
8378: LD_STRING 03_Michail
8380: PPUSH
8381: CALL_OW 38
// SaveCharacters ( Boris , 03_Boris ) ;
8385: LD_EXP 11
8389: PPUSH
8390: LD_STRING 03_Boris
8392: PPUSH
8393: CALL_OW 38
// SaveCharacters ( Constantin , 03_Constantin ) ;
8397: LD_EXP 14
8401: PPUSH
8402: LD_STRING 03_Constantin
8404: PPUSH
8405: CALL_OW 38
// SaveCharacters ( Fiodor , 03_Fiodor ) ;
8409: LD_EXP 16
8413: PPUSH
8414: LD_STRING 03_Fiodor
8416: PPUSH
8417: CALL_OW 38
// SaveCharacters ( Aleksiej , 03_Aleksiej ) ;
8421: LD_EXP 19
8425: PPUSH
8426: LD_STRING 03_Aleksiej
8428: PPUSH
8429: CALL_OW 38
// SaveCharacters ( Pavel , 03_Pavel ) ;
8433: LD_EXP 17
8437: PPUSH
8438: LD_STRING 03_Pavel
8440: PPUSH
8441: CALL_OW 38
// SaveCharacters ( Zakhar , 03_Zakhar ) ;
8445: LD_EXP 18
8449: PPUSH
8450: LD_STRING 03_Zakhar
8452: PPUSH
8453: CALL_OW 38
// SaveCharacters ( Aleksandr , 03_Aleksandr ) ;
8457: LD_EXP 20
8461: PPUSH
8462: LD_STRING 03_Aleksandr
8464: PPUSH
8465: CALL_OW 38
// SaveCharacters ( Stanislav , 03_Stanislav ) ;
8469: LD_EXP 22
8473: PPUSH
8474: LD_STRING 03_Stanislav
8476: PPUSH
8477: CALL_OW 38
// SaveCharacters ( Josif , 03_Josif ) ;
8481: LD_EXP 21
8485: PPUSH
8486: LD_STRING 03_Josif
8488: PPUSH
8489: CALL_OW 38
// SaveCharacters ( Grigori , 03_Grigori ) ;
8493: LD_EXP 26
8497: PPUSH
8498: LD_STRING 03_Grigori
8500: PPUSH
8501: CALL_OW 38
// SaveCharacters ( Jegor , 03_Jegor ) ;
8505: LD_EXP 25
8509: PPUSH
8510: LD_STRING 03_Jegor
8512: PPUSH
8513: CALL_OW 38
// SaveCharacters ( Anton , 03_Anton ) ;
8517: LD_EXP 27
8521: PPUSH
8522: LD_STRING 03_Anton
8524: PPUSH
8525: CALL_OW 38
// SaveCharacters ( Dimitri , 03_Dimitri ) ;
8529: LD_EXP 23
8533: PPUSH
8534: LD_STRING 03_Dimitri
8536: PPUSH
8537: CALL_OW 38
// SaveCharacters ( Ivan , 03_Ivan ) ;
8541: LD_EXP 24
8545: PPUSH
8546: LD_STRING 03_Ivan
8548: PPUSH
8549: CALL_OW 38
// SaveCharacters ( Burlak , 03_Burlak ) ;
8553: LD_EXP 33
8557: PPUSH
8558: LD_STRING 03_Burlak
8560: PPUSH
8561: CALL_OW 38
// SaveCharacters ( Karamazov , 03_Karamazov ) ;
8565: LD_EXP 34
8569: PPUSH
8570: LD_STRING 03_Karamazov
8572: PPUSH
8573: CALL_OW 38
// SaveCharacters ( Titov , 03_Titov ) ;
8577: LD_EXP 38
8581: PPUSH
8582: LD_STRING 03_Titov
8584: PPUSH
8585: CALL_OW 38
// SaveCharacters ( Petrovova , 03_Petrovova ) ;
8589: LD_EXP 35
8593: PPUSH
8594: LD_STRING 03_Petrovova
8596: PPUSH
8597: CALL_OW 38
// SaveCharacters ( Gleb , 03_Gleb ) ;
8601: LD_EXP 37
8605: PPUSH
8606: LD_STRING 03_Gleb
8608: PPUSH
8609: CALL_OW 38
// SaveCharacters ( Lipshchin , 03_Lipshchin ) ;
8613: LD_EXP 36
8617: PPUSH
8618: LD_STRING 03_Lipshchin
8620: PPUSH
8621: CALL_OW 38
// SaveCharacters ( Dolgov , 03_Dolgov ) ;
8625: LD_EXP 40
8629: PPUSH
8630: LD_STRING 03_Dolgov
8632: PPUSH
8633: CALL_OW 38
// SaveCharacters ( Petrosyan , 03_Petrosyan ) ;
8637: LD_EXP 39
8641: PPUSH
8642: LD_STRING 03_Petrosyan
8644: PPUSH
8645: CALL_OW 38
// YouWin ;
8649: CALL_OW 103
// end ; end_of_file
8653: LD_VAR 0 1
8657: RET
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and start_ended then
8658: LD_VAR 0 1
8662: PPUSH
8663: CALL_OW 255
8667: PUSH
8668: LD_INT 3
8670: EQUAL
8671: PUSH
8672: LD_VAR 0 1
8676: PPUSH
8677: CALL_OW 266
8681: PUSH
8682: LD_INT 0
8684: EQUAL
8685: AND
8686: PUSH
8687: LD_EXP 69
8691: AND
8692: IFFALSE 8745
// begin RuDep := building ;
8694: LD_ADDR_EXP 104
8698: PUSH
8699: LD_VAR 0 1
8703: ST_TO_ADDR
// SetBName ( building , voroshilov ) ;
8704: LD_VAR 0 1
8708: PPUSH
8709: LD_STRING voroshilov
8711: PPUSH
8712: CALL_OW 500
// SetRestrict ( b_depot , 3 , false ) ;
8716: LD_INT 0
8718: PPUSH
8719: LD_INT 3
8721: PPUSH
8722: LD_INT 0
8724: PPUSH
8725: CALL_OW 324
// ingame_video := false ;
8729: LD_ADDR_OWVAR 52
8733: PUSH
8734: LD_INT 0
8736: ST_TO_ADDR
// interface_hidden := false ;
8737: LD_ADDR_OWVAR 54
8741: PUSH
8742: LD_INT 0
8744: ST_TO_ADDR
// end ; end ;
8745: PPOPN 2
8747: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = b_armoury and GetSide ( building ) = 3 and crane_triggered = false then
8748: LD_VAR 0 1
8752: PPUSH
8753: CALL_OW 266
8757: PUSH
8758: LD_INT 4
8760: EQUAL
8761: PUSH
8762: LD_VAR 0 1
8766: PPUSH
8767: CALL_OW 255
8771: PUSH
8772: LD_INT 3
8774: EQUAL
8775: AND
8776: PUSH
8777: LD_EXP 79
8781: PUSH
8782: LD_INT 0
8784: EQUAL
8785: AND
8786: IFFALSE 8848
// begin crane_triggered = true ;
8788: LD_ADDR_EXP 79
8792: PUSH
8793: LD_INT 1
8795: ST_TO_ADDR
// DialogueOn ;
8796: CALL_OW 6
// Say ( Boris , 3Boris-Crane-01 ) ;
8800: LD_EXP 11
8804: PPUSH
8805: LD_STRING 3Boris-Crane-01
8807: PPUSH
8808: CALL_OW 88
// Say ( Vasilij , 3Vas-Crane-01 ) ;
8812: LD_EXP 12
8816: PPUSH
8817: LD_STRING 3Vas-Crane-01
8819: PPUSH
8820: CALL_OW 88
// ChangeMissionObjectives ( crane ) ;
8824: LD_STRING crane
8826: PPUSH
8827: CALL_OW 337
// SetTech ( 3 , 85 , 1 ) ;
8831: LD_INT 3
8833: PPUSH
8834: LD_INT 85
8836: PPUSH
8837: LD_INT 1
8839: PPUSH
8840: CALL_OW 322
// DialogueOff ;
8844: CALL_OW 7
// end ; end ;
8848: PPOPN 1
8850: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetControl ( vehicle ) = control_remote and GetSide ( vehicle ) = 1 then
8851: LD_VAR 0 1
8855: PPUSH
8856: CALL_OW 263
8860: PUSH
8861: LD_INT 2
8863: EQUAL
8864: PUSH
8865: LD_VAR 0 1
8869: PPUSH
8870: CALL_OW 255
8874: PUSH
8875: LD_INT 1
8877: EQUAL
8878: AND
8879: IFFALSE 9031
// begin Wait ( 0 0$3 ) ;
8881: LD_INT 105
8883: PPUSH
8884: CALL_OW 67
// Connect ( vehicle ) ;
8888: LD_VAR 0 1
8892: PPUSH
8893: CALL 17917 0 1
// newAttackers := Replace ( newAttackers , newAttackers + 1 , vehicle ) ;
8897: LD_ADDR_EXP 7
8901: PUSH
8902: LD_EXP 7
8906: PPUSH
8907: LD_EXP 7
8911: PUSH
8912: LD_INT 1
8914: PLUS
8915: PPUSH
8916: LD_VAR 0 1
8920: PPUSH
8921: CALL_OW 1
8925: ST_TO_ADDR
// if newAttackers >= [ 4 , 5 , 6 ] [ Difficulty ] then
8926: LD_EXP 7
8930: PUSH
8931: LD_INT 4
8933: PUSH
8934: LD_INT 5
8936: PUSH
8937: LD_INT 6
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: LD_OWVAR 67
8949: ARRAY
8950: GREATEREQUAL
8951: IFFALSE 8976
// begin attackers := attackers union newAttackers ;
8953: LD_ADDR_EXP 8
8957: PUSH
8958: LD_EXP 8
8962: PUSH
8963: LD_EXP 7
8967: UNION
8968: ST_TO_ADDR
// newAttackers := [ ] ;
8969: LD_ADDR_EXP 7
8973: PUSH
8974: EMPTY
8975: ST_TO_ADDR
// end ; if See ( 3 , vehicle ) then
8976: LD_INT 3
8978: PPUSH
8979: LD_VAR 0 1
8983: PPUSH
8984: CALL_OW 292
8988: IFFALSE 9031
// begin DialogueOn ;
8990: CALL_OW 6
// CenterNowOnUnits ( vehicle ) ;
8994: LD_VAR 0 1
8998: PPUSH
8999: CALL_OW 87
// Say ( Yakotich , 3Yak-Remote-Control ) ;
9003: LD_EXP 9
9007: PPUSH
9008: LD_STRING 3Yak-Remote-Control
9010: PPUSH
9011: CALL_OW 88
// Say ( Vasilij , 3Vas-Remote-Control ) ;
9015: LD_EXP 12
9019: PPUSH
9020: LD_STRING 3Vas-Remote-Control
9022: PPUSH
9023: CALL_OW 88
// DialogueOff ;
9027: CALL_OW 7
// end ; end ; end ;
9031: PPOPN 2
9033: END
// every 0 0$1 trigger Researched ( 3 , 85 ) do
9034: LD_INT 3
9036: PPUSH
9037: LD_INT 85
9039: PPUSH
9040: CALL_OW 325
9044: IFFALSE 9076
9046: GO 9048
9048: DISABLE
// begin crane_researched = true ;
9049: LD_ADDR_EXP 80
9053: PUSH
9054: LD_INT 1
9056: ST_TO_ADDR
// Say ( Vasilij , 3Vas-Crane-02 ) ;
9057: LD_EXP 12
9061: PPUSH
9062: LD_STRING 3Vas-Crane-02
9064: PPUSH
9065: CALL_OW 88
// ChangeMissionObjectives ( crane2 ) ;
9069: LD_STRING crane2
9071: PPUSH
9072: CALL_OW 337
// end ;
9076: END
// every 0 0$1 trigger See ( 3 , AmLab1 ) and lab_seen = false do
9077: LD_INT 3
9079: PPUSH
9080: LD_INT 94
9082: PPUSH
9083: CALL_OW 292
9087: PUSH
9088: LD_EXP 70
9092: PUSH
9093: LD_INT 0
9095: EQUAL
9096: AND
9097: IFFALSE 9144
9099: GO 9101
9101: DISABLE
// begin lab_seen = true ;
9102: LD_ADDR_EXP 70
9106: PUSH
9107: LD_INT 1
9109: ST_TO_ADDR
// CenterNowOnUnits ( AmLab1 ) ;
9110: LD_INT 94
9112: PPUSH
9113: CALL_OW 87
// DialogueOn ;
9117: CALL_OW 6
// Say ( Vasilij , 3Vas-Lab-01 ) ;
9121: LD_EXP 12
9125: PPUSH
9126: LD_STRING 3Vas-Lab-01
9128: PPUSH
9129: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
9133: LD_STRING o6
9135: PPUSH
9136: CALL_OW 337
// DialogueOff ;
9140: CALL_OW 7
// end ;
9144: END
// every 0 0$1 trigger See ( 3 , AmLab2 ) and lab_seen = false do
9145: LD_INT 3
9147: PPUSH
9148: LD_INT 163
9150: PPUSH
9151: CALL_OW 292
9155: PUSH
9156: LD_EXP 70
9160: PUSH
9161: LD_INT 0
9163: EQUAL
9164: AND
9165: IFFALSE 9212
9167: GO 9169
9169: DISABLE
// begin lab_seen = true ;
9170: LD_ADDR_EXP 70
9174: PUSH
9175: LD_INT 1
9177: ST_TO_ADDR
// CenterNowOnUnits ( AmLab2 ) ;
9178: LD_INT 163
9180: PPUSH
9181: CALL_OW 87
// DialogueOn ;
9185: CALL_OW 6
// Say ( Vasilij , 3Vas-Lab-01 ) ;
9189: LD_EXP 12
9193: PPUSH
9194: LD_STRING 3Vas-Lab-01
9196: PPUSH
9197: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
9201: LD_STRING o6
9203: PPUSH
9204: CALL_OW 337
// DialogueOff ;
9208: CALL_OW 7
// end ;
9212: END
// every 0 0$1 trigger GetSide ( AmLab1 ) = 3 or GetSide ( AmLab2 ) = 3 do
9213: LD_INT 94
9215: PPUSH
9216: CALL_OW 255
9220: PUSH
9221: LD_INT 3
9223: EQUAL
9224: PUSH
9225: LD_INT 163
9227: PPUSH
9228: CALL_OW 255
9232: PUSH
9233: LD_INT 3
9235: EQUAL
9236: OR
9237: IFFALSE 9267
9239: GO 9241
9241: DISABLE
// begin ChangeMissionObjectives ( labik2 ) ;
9242: LD_STRING labik2
9244: PPUSH
9245: CALL_OW 337
// lab_captured = true ;
9249: LD_ADDR_EXP 71
9253: PUSH
9254: LD_INT 1
9256: ST_TO_ADDR
// SaveVariable ( AmLab1 , 03_AmLab ) ;
9257: LD_INT 94
9259: PPUSH
9260: LD_STRING 03_AmLab
9262: PPUSH
9263: CALL_OW 39
// end ;
9267: END
// every 0 0$1 trigger Researched ( 3 , 86 ) do
9268: LD_INT 3
9270: PPUSH
9271: LD_INT 86
9273: PPUSH
9274: CALL_OW 325
9278: IFFALSE 9330
9280: GO 9282
9282: DISABLE
// begin DialogueOn ;
9283: CALL_OW 6
// Say ( Vasilij , 3Vas-Buldozer-01 ) ;
9287: LD_EXP 12
9291: PPUSH
9292: LD_STRING 3Vas-Buldozer-01
9294: PPUSH
9295: CALL_OW 88
// Say ( Vasilij , 3Vas-Buldozer-02 ) ;
9299: LD_EXP 12
9303: PPUSH
9304: LD_STRING 3Vas-Buldozer-02
9306: PPUSH
9307: CALL_OW 88
// ChangeMissionObjectives ( buld2 ) ;
9311: LD_STRING buld2
9313: PPUSH
9314: CALL_OW 337
// buldozer_researched = true ;
9318: LD_ADDR_EXP 74
9322: PUSH
9323: LD_INT 1
9325: ST_TO_ADDR
// DialogueOff ;
9326: CALL_OW 7
// end ;
9330: END
// every 0 0$1 trigger Researched ( 3 , 40 ) do
9331: LD_INT 3
9333: PPUSH
9334: LD_INT 40
9336: PPUSH
9337: CALL_OW 325
9341: IFFALSE 9385
9343: GO 9345
9345: DISABLE
// begin Say ( Vasilij , 3Vas-Rocket ) ;
9346: LD_EXP 12
9350: PPUSH
9351: LD_STRING 3Vas-Rocket
9353: PPUSH
9354: CALL_OW 88
// Say ( Stanislav , 3Stan-Rocket ) ;
9358: LD_EXP 22
9362: PPUSH
9363: LD_STRING 3Stan-Rocket
9365: PPUSH
9366: CALL_OW 88
// ChangeMissionObjectives ( rocket2 ) ;
9370: LD_STRING rocket2
9372: PPUSH
9373: CALL_OW 337
// rocket_researched = true ;
9377: LD_ADDR_EXP 72
9381: PUSH
9382: LD_INT 1
9384: ST_TO_ADDR
// end ;
9385: END
// every 0 0$1 trigger Researched ( 3 , 9 ) do
9386: LD_INT 3
9388: PPUSH
9389: LD_INT 9
9391: PPUSH
9392: CALL_OW 325
9396: IFFALSE 9472
9398: GO 9400
9400: DISABLE
// begin DialogueOn ;
9401: CALL_OW 6
// Say ( Petrosyan , 3Pty-Comp-04 ) ;
9405: LD_EXP 39
9409: PPUSH
9410: LD_STRING 3Pty-Comp-04
9412: PPUSH
9413: CALL_OW 88
// Say ( Yakotich , 3Yak-Comp-01 ) ;
9417: LD_EXP 9
9421: PPUSH
9422: LD_STRING 3Yak-Comp-01
9424: PPUSH
9425: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-05 ) ;
9429: LD_EXP 39
9433: PPUSH
9434: LD_STRING 3Pty-Comp-05
9436: PPUSH
9437: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-03 ) ;
9441: LD_EXP 33
9445: PPUSH
9446: LD_STRING 3Bur-Comp-03
9448: PPUSH
9449: CALL_OW 88
// ChangeMissionObjectives ( pred2 ) ;
9453: LD_STRING pred2
9455: PPUSH
9456: CALL_OW 337
// prediction_researched = true ;
9460: LD_ADDR_EXP 73
9464: PUSH
9465: LD_INT 1
9467: ST_TO_ADDR
// DialogueOff ;
9468: CALL_OW 7
// end ;
9472: END
// every 0 0$1 trigger Researched ( 3 , 30 ) do
9473: LD_INT 3
9475: PPUSH
9476: LD_INT 30
9478: PPUSH
9479: CALL_OW 325
9483: IFFALSE 9544
9485: GO 9487
9487: DISABLE
// begin DialogueOn ;
9488: CALL_OW 6
// Say ( Dolgov , 3Dol-Stasis-01 ) ;
9492: LD_EXP 40
9496: PPUSH
9497: LD_STRING 3Dol-Stasis-01
9499: PPUSH
9500: CALL_OW 88
// Say ( Burlak , 3Bur-Stasis-01 ) ;
9504: LD_EXP 33
9508: PPUSH
9509: LD_STRING 3Bur-Stasis-01
9511: PPUSH
9512: CALL_OW 88
// Say ( Dolgov , 3Dol-Stasis-02 ) ;
9516: LD_EXP 40
9520: PPUSH
9521: LD_STRING 3Dol-Stasis-02
9523: PPUSH
9524: CALL_OW 88
// Say ( Burlak , 3Bur-Stasis-02 ) ;
9528: LD_EXP 33
9532: PPUSH
9533: LD_STRING 3Bur-Stasis-02
9535: PPUSH
9536: CALL_OW 88
// DialogueOff ;
9540: CALL_OW 7
// end ;
9544: END
// every 0 0$1 trigger IsInArea ( Boris , SouthOfBase ) and start_ended = true do
9545: LD_EXP 11
9549: PPUSH
9550: LD_INT 12
9552: PPUSH
9553: CALL_OW 308
9557: PUSH
9558: LD_EXP 69
9562: PUSH
9563: LD_INT 1
9565: EQUAL
9566: AND
9567: IFFALSE 9602
9569: GO 9571
9571: DISABLE
// begin AddComBuild ( [ Boris , Anton ] , b_depot , 140 , 204 , 3 ) ;
9572: LD_EXP 11
9576: PUSH
9577: LD_EXP 27
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PPUSH
9586: LD_INT 0
9588: PPUSH
9589: LD_INT 140
9591: PPUSH
9592: LD_INT 204
9594: PPUSH
9595: LD_INT 3
9597: PPUSH
9598: CALL_OW 205
// end ;
9602: END
// every 0 0$1 trigger start_ended = true and GetSide ( Ovsyenko ) = 3 do
9603: LD_EXP 69
9607: PUSH
9608: LD_INT 1
9610: EQUAL
9611: PUSH
9612: LD_INT 74
9614: PPUSH
9615: CALL_OW 255
9619: PUSH
9620: LD_INT 3
9622: EQUAL
9623: AND
9624: IFFALSE 9637
9626: GO 9628
9628: DISABLE
// begin ovsyenko_captured = true ;
9629: LD_ADDR_EXP 68
9633: PUSH
9634: LD_INT 1
9636: ST_TO_ADDR
// end ;
9637: END
// every 0 0$1 trigger Researched ( 3 , 54 ) and Researched ( 3 , 21 ) and Researched ( 3 , 30 ) do
9638: LD_INT 3
9640: PPUSH
9641: LD_INT 54
9643: PPUSH
9644: CALL_OW 325
9648: PUSH
9649: LD_INT 3
9651: PPUSH
9652: LD_INT 21
9654: PPUSH
9655: CALL_OW 325
9659: AND
9660: PUSH
9661: LD_INT 3
9663: PPUSH
9664: LD_INT 30
9666: PPUSH
9667: CALL_OW 325
9671: AND
9672: IFFALSE 9692
9674: GO 9676
9676: DISABLE
// begin everything_researched = true ;
9677: LD_ADDR_EXP 78
9681: PUSH
9682: LD_INT 1
9684: ST_TO_ADDR
// ChangeMissionObjectives ( o4a ) ;
9685: LD_STRING o4a
9687: PPUSH
9688: CALL_OW 337
// end ;
9692: END
// every 0 0$1 trigger Siblo ( 3 ) >= [ 100 , 150 , 200 ] [ Difficulty ] do
9693: LD_INT 3
9695: PPUSH
9696: CALL 424 0 1
9700: PUSH
9701: LD_INT 100
9703: PUSH
9704: LD_INT 150
9706: PUSH
9707: LD_INT 200
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: LIST
9714: PUSH
9715: LD_OWVAR 67
9719: ARRAY
9720: GREATEREQUAL
9721: IFFALSE 9741
9723: GO 9725
9725: DISABLE
// begin siberit_excavated = true ;
9726: LD_ADDR_EXP 76
9730: PUSH
9731: LD_INT 1
9733: ST_TO_ADDR
// ChangeMissionObjectives ( sib2 ) ;
9734: LD_STRING sib2
9736: PPUSH
9737: CALL_OW 337
// end ;
9741: END
// every 0 0$1 trigger end_of_the_mission = true do var un ;
9742: LD_EXP 81
9746: PUSH
9747: LD_INT 1
9749: EQUAL
9750: IFFALSE 9884
9752: GO 9754
9754: DISABLE
9755: LD_INT 0
9757: PPUSH
// begin for un in FilterUnitsInArea ( ExitArea , [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
9758: LD_ADDR_VAR 0 1
9762: PUSH
9763: LD_INT 3
9765: PPUSH
9766: LD_INT 22
9768: PUSH
9769: LD_INT 6
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: LD_INT 21
9781: PUSH
9782: LD_INT 1
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 21
9791: PUSH
9792: LD_INT 2
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 70
9812: PUSH
9813: FOR_IN
9814: IFFALSE 9881
// begin if IsInArea ( un , ExitArea ) then
9816: LD_VAR 0 1
9820: PPUSH
9821: LD_INT 3
9823: PPUSH
9824: CALL_OW 308
9828: IFFALSE 9879
// begin if GetType ( un ) = unit_vehicle then
9830: LD_VAR 0 1
9834: PPUSH
9835: CALL_OW 247
9839: PUSH
9840: LD_INT 2
9842: EQUAL
9843: IFFALSE 9870
// begin RemoveUnit ( IsDrivenBy ( un ) ) ;
9845: LD_VAR 0 1
9849: PPUSH
9850: CALL_OW 311
9854: PPUSH
9855: CALL_OW 64
// RemoveUnit ( un ) ;
9859: LD_VAR 0 1
9863: PPUSH
9864: CALL_OW 64
// end else
9868: GO 9879
// begin RemoveUnit ( un ) ;
9870: LD_VAR 0 1
9874: PPUSH
9875: CALL_OW 64
// end ; end ; end ;
9879: GO 9813
9881: POP
9882: POP
// enable ;
9883: ENABLE
// end ; end_of_file
9884: PPOPN 1
9886: END
// every 6 6$0 do var i , j ;
9887: GO 9889
9889: DISABLE
9890: LD_INT 0
9892: PPUSH
9893: PPUSH
// begin for i = 1 to 4 do
9894: LD_ADDR_VAR 0 1
9898: PUSH
9899: DOUBLE
9900: LD_INT 1
9902: DEC
9903: ST_TO_ADDR
9904: LD_INT 4
9906: PUSH
9907: FOR_TO
9908: IFFALSE 9933
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
9910: LD_INT 3
9912: PPUSH
9913: LD_INT 5
9915: PPUSH
9916: CALL_OW 12
9920: PPUSH
9921: LD_INT 4
9923: PPUSH
9924: LD_INT 1
9926: PPUSH
9927: CALL_OW 55
// end ;
9931: GO 9907
9933: POP
9934: POP
// CreateCratesArea ( rand ( 1 , 3 ) , AmCratesArea , true ) ;
9935: LD_INT 1
9937: PPUSH
9938: LD_INT 3
9940: PPUSH
9941: CALL_OW 12
9945: PPUSH
9946: LD_INT 7
9948: PPUSH
9949: LD_INT 1
9951: PPUSH
9952: CALL_OW 55
// enable ;
9956: ENABLE
// end ; end_of_file
9957: PPOPN 2
9959: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9960: LD_INT 0
9962: PPUSH
9963: PPUSH
// if exist_mode then
9964: LD_VAR 0 2
9968: IFFALSE 9993
// unit := CreateCharacter ( prefix & ident ) else
9970: LD_ADDR_VAR 0 5
9974: PUSH
9975: LD_VAR 0 3
9979: PUSH
9980: LD_VAR 0 1
9984: STR
9985: PPUSH
9986: CALL_OW 34
9990: ST_TO_ADDR
9991: GO 10008
// unit := NewCharacter ( ident ) ;
9993: LD_ADDR_VAR 0 5
9997: PUSH
9998: LD_VAR 0 1
10002: PPUSH
10003: CALL_OW 25
10007: ST_TO_ADDR
// result := unit ;
10008: LD_ADDR_VAR 0 4
10012: PUSH
10013: LD_VAR 0 5
10017: ST_TO_ADDR
// end ;
10018: LD_VAR 0 4
10022: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10023: LD_INT 0
10025: PPUSH
10026: PPUSH
// if not side or not nation then
10027: LD_VAR 0 1
10031: NOT
10032: PUSH
10033: LD_VAR 0 2
10037: NOT
10038: OR
10039: IFFALSE 10043
// exit ;
10041: GO 10811
// case nation of nation_american :
10043: LD_VAR 0 2
10047: PUSH
10048: LD_INT 1
10050: DOUBLE
10051: EQUAL
10052: IFTRUE 10056
10054: GO 10270
10056: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10057: LD_ADDR_VAR 0 4
10061: PUSH
10062: LD_INT 35
10064: PUSH
10065: LD_INT 45
10067: PUSH
10068: LD_INT 46
10070: PUSH
10071: LD_INT 47
10073: PUSH
10074: LD_INT 82
10076: PUSH
10077: LD_INT 83
10079: PUSH
10080: LD_INT 84
10082: PUSH
10083: LD_INT 85
10085: PUSH
10086: LD_INT 86
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: LD_INT 2
10094: PUSH
10095: LD_INT 6
10097: PUSH
10098: LD_INT 15
10100: PUSH
10101: LD_INT 16
10103: PUSH
10104: LD_INT 7
10106: PUSH
10107: LD_INT 12
10109: PUSH
10110: LD_INT 13
10112: PUSH
10113: LD_INT 10
10115: PUSH
10116: LD_INT 14
10118: PUSH
10119: LD_INT 20
10121: PUSH
10122: LD_INT 21
10124: PUSH
10125: LD_INT 22
10127: PUSH
10128: LD_INT 25
10130: PUSH
10131: LD_INT 32
10133: PUSH
10134: LD_INT 27
10136: PUSH
10137: LD_INT 36
10139: PUSH
10140: LD_INT 69
10142: PUSH
10143: LD_INT 39
10145: PUSH
10146: LD_INT 34
10148: PUSH
10149: LD_INT 40
10151: PUSH
10152: LD_INT 48
10154: PUSH
10155: LD_INT 49
10157: PUSH
10158: LD_INT 50
10160: PUSH
10161: LD_INT 51
10163: PUSH
10164: LD_INT 52
10166: PUSH
10167: LD_INT 53
10169: PUSH
10170: LD_INT 54
10172: PUSH
10173: LD_INT 55
10175: PUSH
10176: LD_INT 56
10178: PUSH
10179: LD_INT 57
10181: PUSH
10182: LD_INT 58
10184: PUSH
10185: LD_INT 59
10187: PUSH
10188: LD_INT 60
10190: PUSH
10191: LD_INT 61
10193: PUSH
10194: LD_INT 62
10196: PUSH
10197: LD_INT 80
10199: PUSH
10200: LD_INT 82
10202: PUSH
10203: LD_INT 83
10205: PUSH
10206: LD_INT 84
10208: PUSH
10209: LD_INT 85
10211: PUSH
10212: LD_INT 86
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: ST_TO_ADDR
10268: GO 10735
10270: LD_INT 2
10272: DOUBLE
10273: EQUAL
10274: IFTRUE 10278
10276: GO 10504
10278: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10279: LD_ADDR_VAR 0 4
10283: PUSH
10284: LD_INT 35
10286: PUSH
10287: LD_INT 45
10289: PUSH
10290: LD_INT 46
10292: PUSH
10293: LD_INT 47
10295: PUSH
10296: LD_INT 82
10298: PUSH
10299: LD_INT 83
10301: PUSH
10302: LD_INT 84
10304: PUSH
10305: LD_INT 85
10307: PUSH
10308: LD_INT 87
10310: PUSH
10311: LD_INT 70
10313: PUSH
10314: LD_INT 1
10316: PUSH
10317: LD_INT 11
10319: PUSH
10320: LD_INT 3
10322: PUSH
10323: LD_INT 4
10325: PUSH
10326: LD_INT 5
10328: PUSH
10329: LD_INT 6
10331: PUSH
10332: LD_INT 15
10334: PUSH
10335: LD_INT 18
10337: PUSH
10338: LD_INT 7
10340: PUSH
10341: LD_INT 17
10343: PUSH
10344: LD_INT 8
10346: PUSH
10347: LD_INT 20
10349: PUSH
10350: LD_INT 21
10352: PUSH
10353: LD_INT 22
10355: PUSH
10356: LD_INT 72
10358: PUSH
10359: LD_INT 26
10361: PUSH
10362: LD_INT 69
10364: PUSH
10365: LD_INT 39
10367: PUSH
10368: LD_INT 40
10370: PUSH
10371: LD_INT 41
10373: PUSH
10374: LD_INT 42
10376: PUSH
10377: LD_INT 43
10379: PUSH
10380: LD_INT 48
10382: PUSH
10383: LD_INT 49
10385: PUSH
10386: LD_INT 50
10388: PUSH
10389: LD_INT 51
10391: PUSH
10392: LD_INT 52
10394: PUSH
10395: LD_INT 53
10397: PUSH
10398: LD_INT 54
10400: PUSH
10401: LD_INT 55
10403: PUSH
10404: LD_INT 56
10406: PUSH
10407: LD_INT 60
10409: PUSH
10410: LD_INT 61
10412: PUSH
10413: LD_INT 62
10415: PUSH
10416: LD_INT 66
10418: PUSH
10419: LD_INT 67
10421: PUSH
10422: LD_INT 68
10424: PUSH
10425: LD_INT 81
10427: PUSH
10428: LD_INT 82
10430: PUSH
10431: LD_INT 83
10433: PUSH
10434: LD_INT 84
10436: PUSH
10437: LD_INT 85
10439: PUSH
10440: LD_INT 87
10442: PUSH
10443: LD_INT 88
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: ST_TO_ADDR
10502: GO 10735
10504: LD_INT 3
10506: DOUBLE
10507: EQUAL
10508: IFTRUE 10512
10510: GO 10734
10512: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10513: LD_ADDR_VAR 0 4
10517: PUSH
10518: LD_INT 46
10520: PUSH
10521: LD_INT 47
10523: PUSH
10524: LD_INT 1
10526: PUSH
10527: LD_INT 2
10529: PUSH
10530: LD_INT 82
10532: PUSH
10533: LD_INT 83
10535: PUSH
10536: LD_INT 84
10538: PUSH
10539: LD_INT 85
10541: PUSH
10542: LD_INT 86
10544: PUSH
10545: LD_INT 11
10547: PUSH
10548: LD_INT 9
10550: PUSH
10551: LD_INT 20
10553: PUSH
10554: LD_INT 19
10556: PUSH
10557: LD_INT 21
10559: PUSH
10560: LD_INT 24
10562: PUSH
10563: LD_INT 22
10565: PUSH
10566: LD_INT 25
10568: PUSH
10569: LD_INT 28
10571: PUSH
10572: LD_INT 29
10574: PUSH
10575: LD_INT 30
10577: PUSH
10578: LD_INT 31
10580: PUSH
10581: LD_INT 37
10583: PUSH
10584: LD_INT 38
10586: PUSH
10587: LD_INT 32
10589: PUSH
10590: LD_INT 27
10592: PUSH
10593: LD_INT 33
10595: PUSH
10596: LD_INT 69
10598: PUSH
10599: LD_INT 39
10601: PUSH
10602: LD_INT 34
10604: PUSH
10605: LD_INT 40
10607: PUSH
10608: LD_INT 71
10610: PUSH
10611: LD_INT 23
10613: PUSH
10614: LD_INT 44
10616: PUSH
10617: LD_INT 48
10619: PUSH
10620: LD_INT 49
10622: PUSH
10623: LD_INT 50
10625: PUSH
10626: LD_INT 51
10628: PUSH
10629: LD_INT 52
10631: PUSH
10632: LD_INT 53
10634: PUSH
10635: LD_INT 54
10637: PUSH
10638: LD_INT 55
10640: PUSH
10641: LD_INT 56
10643: PUSH
10644: LD_INT 57
10646: PUSH
10647: LD_INT 58
10649: PUSH
10650: LD_INT 59
10652: PUSH
10653: LD_INT 63
10655: PUSH
10656: LD_INT 64
10658: PUSH
10659: LD_INT 65
10661: PUSH
10662: LD_INT 82
10664: PUSH
10665: LD_INT 83
10667: PUSH
10668: LD_INT 84
10670: PUSH
10671: LD_INT 85
10673: PUSH
10674: LD_INT 86
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: ST_TO_ADDR
10732: GO 10735
10734: POP
// if state > - 1 and state < 3 then
10735: LD_VAR 0 3
10739: PUSH
10740: LD_INT 1
10742: NEG
10743: GREATER
10744: PUSH
10745: LD_VAR 0 3
10749: PUSH
10750: LD_INT 3
10752: LESS
10753: AND
10754: IFFALSE 10811
// for i in result do
10756: LD_ADDR_VAR 0 5
10760: PUSH
10761: LD_VAR 0 4
10765: PUSH
10766: FOR_IN
10767: IFFALSE 10809
// if GetTech ( i , side ) <> state then
10769: LD_VAR 0 5
10773: PPUSH
10774: LD_VAR 0 1
10778: PPUSH
10779: CALL_OW 321
10783: PUSH
10784: LD_VAR 0 3
10788: NONEQUAL
10789: IFFALSE 10807
// result := result diff i ;
10791: LD_ADDR_VAR 0 4
10795: PUSH
10796: LD_VAR 0 4
10800: PUSH
10801: LD_VAR 0 5
10805: DIFF
10806: ST_TO_ADDR
10807: GO 10766
10809: POP
10810: POP
// end ;
10811: LD_VAR 0 4
10815: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10816: LD_INT 0
10818: PPUSH
10819: PPUSH
10820: PPUSH
// result := true ;
10821: LD_ADDR_VAR 0 3
10825: PUSH
10826: LD_INT 1
10828: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10829: LD_ADDR_VAR 0 5
10833: PUSH
10834: LD_VAR 0 2
10838: PPUSH
10839: CALL_OW 480
10843: ST_TO_ADDR
// if not tmp then
10844: LD_VAR 0 5
10848: NOT
10849: IFFALSE 10853
// exit ;
10851: GO 10902
// for i in tmp do
10853: LD_ADDR_VAR 0 4
10857: PUSH
10858: LD_VAR 0 5
10862: PUSH
10863: FOR_IN
10864: IFFALSE 10900
// if GetTech ( i , side ) <> state_researched then
10866: LD_VAR 0 4
10870: PPUSH
10871: LD_VAR 0 1
10875: PPUSH
10876: CALL_OW 321
10880: PUSH
10881: LD_INT 2
10883: NONEQUAL
10884: IFFALSE 10898
// begin result := false ;
10886: LD_ADDR_VAR 0 3
10890: PUSH
10891: LD_INT 0
10893: ST_TO_ADDR
// exit ;
10894: POP
10895: POP
10896: GO 10902
// end ;
10898: GO 10863
10900: POP
10901: POP
// end ;
10902: LD_VAR 0 3
10906: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10907: LD_INT 0
10909: PPUSH
10910: PPUSH
10911: PPUSH
10912: PPUSH
10913: PPUSH
10914: PPUSH
10915: PPUSH
10916: PPUSH
10917: PPUSH
10918: PPUSH
10919: PPUSH
10920: PPUSH
10921: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10922: LD_VAR 0 1
10926: NOT
10927: PUSH
10928: LD_VAR 0 1
10932: PPUSH
10933: CALL_OW 257
10937: PUSH
10938: LD_INT 9
10940: NONEQUAL
10941: OR
10942: IFFALSE 10946
// exit ;
10944: GO 11519
// side := GetSide ( unit ) ;
10946: LD_ADDR_VAR 0 9
10950: PUSH
10951: LD_VAR 0 1
10955: PPUSH
10956: CALL_OW 255
10960: ST_TO_ADDR
// tech_space := tech_spacanom ;
10961: LD_ADDR_VAR 0 12
10965: PUSH
10966: LD_INT 29
10968: ST_TO_ADDR
// tech_time := tech_taurad ;
10969: LD_ADDR_VAR 0 13
10973: PUSH
10974: LD_INT 28
10976: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10977: LD_ADDR_VAR 0 11
10981: PUSH
10982: LD_VAR 0 1
10986: PPUSH
10987: CALL_OW 310
10991: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10992: LD_VAR 0 11
10996: PPUSH
10997: CALL_OW 247
11001: PUSH
11002: LD_INT 2
11004: EQUAL
11005: IFFALSE 11009
// exit ;
11007: GO 11519
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11009: LD_ADDR_VAR 0 8
11013: PUSH
11014: LD_INT 81
11016: PUSH
11017: LD_VAR 0 9
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 3
11028: PUSH
11029: LD_INT 21
11031: PUSH
11032: LD_INT 3
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PPUSH
11047: CALL_OW 69
11051: ST_TO_ADDR
// if not tmp then
11052: LD_VAR 0 8
11056: NOT
11057: IFFALSE 11061
// exit ;
11059: GO 11519
// if in_unit then
11061: LD_VAR 0 11
11065: IFFALSE 11089
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11067: LD_ADDR_VAR 0 10
11071: PUSH
11072: LD_VAR 0 8
11076: PPUSH
11077: LD_VAR 0 11
11081: PPUSH
11082: CALL_OW 74
11086: ST_TO_ADDR
11087: GO 11109
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11089: LD_ADDR_VAR 0 10
11093: PUSH
11094: LD_VAR 0 8
11098: PPUSH
11099: LD_VAR 0 1
11103: PPUSH
11104: CALL_OW 74
11108: ST_TO_ADDR
// if not enemy then
11109: LD_VAR 0 10
11113: NOT
11114: IFFALSE 11118
// exit ;
11116: GO 11519
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11118: LD_VAR 0 11
11122: PUSH
11123: LD_VAR 0 11
11127: PPUSH
11128: LD_VAR 0 10
11132: PPUSH
11133: CALL_OW 296
11137: PUSH
11138: LD_INT 13
11140: GREATER
11141: AND
11142: PUSH
11143: LD_VAR 0 1
11147: PPUSH
11148: LD_VAR 0 10
11152: PPUSH
11153: CALL_OW 296
11157: PUSH
11158: LD_INT 12
11160: GREATER
11161: OR
11162: IFFALSE 11166
// exit ;
11164: GO 11519
// missile := [ 1 ] ;
11166: LD_ADDR_VAR 0 14
11170: PUSH
11171: LD_INT 1
11173: PUSH
11174: EMPTY
11175: LIST
11176: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11177: LD_VAR 0 9
11181: PPUSH
11182: LD_VAR 0 12
11186: PPUSH
11187: CALL_OW 325
11191: IFFALSE 11220
// missile := Replace ( missile , missile + 1 , 2 ) ;
11193: LD_ADDR_VAR 0 14
11197: PUSH
11198: LD_VAR 0 14
11202: PPUSH
11203: LD_VAR 0 14
11207: PUSH
11208: LD_INT 1
11210: PLUS
11211: PPUSH
11212: LD_INT 2
11214: PPUSH
11215: CALL_OW 1
11219: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11220: LD_VAR 0 9
11224: PPUSH
11225: LD_VAR 0 13
11229: PPUSH
11230: CALL_OW 325
11234: PUSH
11235: LD_VAR 0 10
11239: PPUSH
11240: CALL_OW 255
11244: PPUSH
11245: LD_VAR 0 13
11249: PPUSH
11250: CALL_OW 325
11254: NOT
11255: AND
11256: IFFALSE 11285
// missile := Replace ( missile , missile + 1 , 3 ) ;
11258: LD_ADDR_VAR 0 14
11262: PUSH
11263: LD_VAR 0 14
11267: PPUSH
11268: LD_VAR 0 14
11272: PUSH
11273: LD_INT 1
11275: PLUS
11276: PPUSH
11277: LD_INT 3
11279: PPUSH
11280: CALL_OW 1
11284: ST_TO_ADDR
// if missile < 2 then
11285: LD_VAR 0 14
11289: PUSH
11290: LD_INT 2
11292: LESS
11293: IFFALSE 11297
// exit ;
11295: GO 11519
// x := GetX ( enemy ) ;
11297: LD_ADDR_VAR 0 4
11301: PUSH
11302: LD_VAR 0 10
11306: PPUSH
11307: CALL_OW 250
11311: ST_TO_ADDR
// y := GetY ( enemy ) ;
11312: LD_ADDR_VAR 0 5
11316: PUSH
11317: LD_VAR 0 10
11321: PPUSH
11322: CALL_OW 251
11326: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11327: LD_ADDR_VAR 0 6
11331: PUSH
11332: LD_VAR 0 4
11336: PUSH
11337: LD_INT 1
11339: NEG
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 12
11348: PLUS
11349: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11350: LD_ADDR_VAR 0 7
11354: PUSH
11355: LD_VAR 0 5
11359: PUSH
11360: LD_INT 1
11362: NEG
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: CALL_OW 12
11371: PLUS
11372: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11373: LD_VAR 0 6
11377: PPUSH
11378: LD_VAR 0 7
11382: PPUSH
11383: CALL_OW 488
11387: NOT
11388: IFFALSE 11410
// begin _x := x ;
11390: LD_ADDR_VAR 0 6
11394: PUSH
11395: LD_VAR 0 4
11399: ST_TO_ADDR
// _y := y ;
11400: LD_ADDR_VAR 0 7
11404: PUSH
11405: LD_VAR 0 5
11409: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11410: LD_ADDR_VAR 0 3
11414: PUSH
11415: LD_INT 1
11417: PPUSH
11418: LD_VAR 0 14
11422: PPUSH
11423: CALL_OW 12
11427: ST_TO_ADDR
// case i of 1 :
11428: LD_VAR 0 3
11432: PUSH
11433: LD_INT 1
11435: DOUBLE
11436: EQUAL
11437: IFTRUE 11441
11439: GO 11458
11441: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11442: LD_VAR 0 1
11446: PPUSH
11447: LD_VAR 0 10
11451: PPUSH
11452: CALL_OW 115
11456: GO 11519
11458: LD_INT 2
11460: DOUBLE
11461: EQUAL
11462: IFTRUE 11466
11464: GO 11488
11466: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11467: LD_VAR 0 1
11471: PPUSH
11472: LD_VAR 0 6
11476: PPUSH
11477: LD_VAR 0 7
11481: PPUSH
11482: CALL_OW 153
11486: GO 11519
11488: LD_INT 3
11490: DOUBLE
11491: EQUAL
11492: IFTRUE 11496
11494: GO 11518
11496: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11497: LD_VAR 0 1
11501: PPUSH
11502: LD_VAR 0 6
11506: PPUSH
11507: LD_VAR 0 7
11511: PPUSH
11512: CALL_OW 154
11516: GO 11519
11518: POP
// end ;
11519: LD_VAR 0 2
11523: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11524: LD_INT 0
11526: PPUSH
11527: PPUSH
11528: PPUSH
11529: PPUSH
11530: PPUSH
11531: PPUSH
// if not unit or not building then
11532: LD_VAR 0 1
11536: NOT
11537: PUSH
11538: LD_VAR 0 2
11542: NOT
11543: OR
11544: IFFALSE 11548
// exit ;
11546: GO 11706
// x := GetX ( building ) ;
11548: LD_ADDR_VAR 0 5
11552: PUSH
11553: LD_VAR 0 2
11557: PPUSH
11558: CALL_OW 250
11562: ST_TO_ADDR
// y := GetY ( building ) ;
11563: LD_ADDR_VAR 0 6
11567: PUSH
11568: LD_VAR 0 2
11572: PPUSH
11573: CALL_OW 251
11577: ST_TO_ADDR
// for i = 0 to 5 do
11578: LD_ADDR_VAR 0 4
11582: PUSH
11583: DOUBLE
11584: LD_INT 0
11586: DEC
11587: ST_TO_ADDR
11588: LD_INT 5
11590: PUSH
11591: FOR_TO
11592: IFFALSE 11704
// begin _x := ShiftX ( x , i , 3 ) ;
11594: LD_ADDR_VAR 0 7
11598: PUSH
11599: LD_VAR 0 5
11603: PPUSH
11604: LD_VAR 0 4
11608: PPUSH
11609: LD_INT 3
11611: PPUSH
11612: CALL_OW 272
11616: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11617: LD_ADDR_VAR 0 8
11621: PUSH
11622: LD_VAR 0 6
11626: PPUSH
11627: LD_VAR 0 4
11631: PPUSH
11632: LD_INT 3
11634: PPUSH
11635: CALL_OW 273
11639: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11640: LD_VAR 0 7
11644: PPUSH
11645: LD_VAR 0 8
11649: PPUSH
11650: CALL_OW 488
11654: NOT
11655: IFFALSE 11659
// continue ;
11657: GO 11591
// if HexInfo ( _x , _y ) = 0 then
11659: LD_VAR 0 7
11663: PPUSH
11664: LD_VAR 0 8
11668: PPUSH
11669: CALL_OW 428
11673: PUSH
11674: LD_INT 0
11676: EQUAL
11677: IFFALSE 11702
// begin ComMoveXY ( unit , _x , _y ) ;
11679: LD_VAR 0 1
11683: PPUSH
11684: LD_VAR 0 7
11688: PPUSH
11689: LD_VAR 0 8
11693: PPUSH
11694: CALL_OW 111
// exit ;
11698: POP
11699: POP
11700: GO 11706
// end ; end ;
11702: GO 11591
11704: POP
11705: POP
// end ;
11706: LD_VAR 0 3
11710: RET
// export function ScanBase ( side , base_area ) ; begin
11711: LD_INT 0
11713: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11714: LD_ADDR_VAR 0 3
11718: PUSH
11719: LD_VAR 0 2
11723: PPUSH
11724: LD_INT 81
11726: PUSH
11727: LD_VAR 0 1
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PPUSH
11736: CALL_OW 70
11740: ST_TO_ADDR
// end ;
11741: LD_VAR 0 3
11745: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11746: LD_INT 0
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
// result := false ;
11752: LD_ADDR_VAR 0 2
11756: PUSH
11757: LD_INT 0
11759: ST_TO_ADDR
// side := GetSide ( unit ) ;
11760: LD_ADDR_VAR 0 3
11764: PUSH
11765: LD_VAR 0 1
11769: PPUSH
11770: CALL_OW 255
11774: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11775: LD_ADDR_VAR 0 4
11779: PUSH
11780: LD_VAR 0 1
11784: PPUSH
11785: CALL_OW 248
11789: ST_TO_ADDR
// case nat of 1 :
11790: LD_VAR 0 4
11794: PUSH
11795: LD_INT 1
11797: DOUBLE
11798: EQUAL
11799: IFTRUE 11803
11801: GO 11814
11803: POP
// tech := tech_lassight ; 2 :
11804: LD_ADDR_VAR 0 5
11808: PUSH
11809: LD_INT 12
11811: ST_TO_ADDR
11812: GO 11853
11814: LD_INT 2
11816: DOUBLE
11817: EQUAL
11818: IFTRUE 11822
11820: GO 11833
11822: POP
// tech := tech_mortar ; 3 :
11823: LD_ADDR_VAR 0 5
11827: PUSH
11828: LD_INT 41
11830: ST_TO_ADDR
11831: GO 11853
11833: LD_INT 3
11835: DOUBLE
11836: EQUAL
11837: IFTRUE 11841
11839: GO 11852
11841: POP
// tech := tech_bazooka ; end ;
11842: LD_ADDR_VAR 0 5
11846: PUSH
11847: LD_INT 44
11849: ST_TO_ADDR
11850: GO 11853
11852: POP
// if Researched ( side , tech ) then
11853: LD_VAR 0 3
11857: PPUSH
11858: LD_VAR 0 5
11862: PPUSH
11863: CALL_OW 325
11867: IFFALSE 11894
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11869: LD_ADDR_VAR 0 2
11873: PUSH
11874: LD_INT 5
11876: PUSH
11877: LD_INT 8
11879: PUSH
11880: LD_INT 9
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: PUSH
11888: LD_VAR 0 4
11892: ARRAY
11893: ST_TO_ADDR
// end ;
11894: LD_VAR 0 2
11898: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11899: LD_INT 0
11901: PPUSH
11902: PPUSH
11903: PPUSH
// if not mines then
11904: LD_VAR 0 2
11908: NOT
11909: IFFALSE 11913
// exit ;
11911: GO 12057
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11913: LD_ADDR_VAR 0 5
11917: PUSH
11918: LD_INT 81
11920: PUSH
11921: LD_VAR 0 1
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: LD_INT 3
11932: PUSH
11933: LD_INT 21
11935: PUSH
11936: LD_INT 3
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PPUSH
11951: CALL_OW 69
11955: ST_TO_ADDR
// for i in mines do
11956: LD_ADDR_VAR 0 4
11960: PUSH
11961: LD_VAR 0 2
11965: PUSH
11966: FOR_IN
11967: IFFALSE 12055
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11969: LD_VAR 0 4
11973: PUSH
11974: LD_INT 1
11976: ARRAY
11977: PPUSH
11978: LD_VAR 0 4
11982: PUSH
11983: LD_INT 2
11985: ARRAY
11986: PPUSH
11987: CALL_OW 458
11991: NOT
11992: IFFALSE 11996
// continue ;
11994: GO 11966
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11996: LD_VAR 0 4
12000: PUSH
12001: LD_INT 1
12003: ARRAY
12004: PPUSH
12005: LD_VAR 0 4
12009: PUSH
12010: LD_INT 2
12012: ARRAY
12013: PPUSH
12014: CALL_OW 428
12018: PUSH
12019: LD_VAR 0 5
12023: IN
12024: IFFALSE 12053
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12026: LD_VAR 0 4
12030: PUSH
12031: LD_INT 1
12033: ARRAY
12034: PPUSH
12035: LD_VAR 0 4
12039: PUSH
12040: LD_INT 2
12042: ARRAY
12043: PPUSH
12044: LD_VAR 0 1
12048: PPUSH
12049: CALL_OW 456
// end ;
12053: GO 11966
12055: POP
12056: POP
// end ;
12057: LD_VAR 0 3
12061: RET
// export function Count ( array ) ; var i ; begin
12062: LD_INT 0
12064: PPUSH
12065: PPUSH
// result := 0 ;
12066: LD_ADDR_VAR 0 2
12070: PUSH
12071: LD_INT 0
12073: ST_TO_ADDR
// for i in array do
12074: LD_ADDR_VAR 0 3
12078: PUSH
12079: LD_VAR 0 1
12083: PUSH
12084: FOR_IN
12085: IFFALSE 12109
// if i then
12087: LD_VAR 0 3
12091: IFFALSE 12107
// result := result + 1 ;
12093: LD_ADDR_VAR 0 2
12097: PUSH
12098: LD_VAR 0 2
12102: PUSH
12103: LD_INT 1
12105: PLUS
12106: ST_TO_ADDR
12107: GO 12084
12109: POP
12110: POP
// end ;
12111: LD_VAR 0 2
12115: RET
// export function IsEmpty ( building ) ; begin
12116: LD_INT 0
12118: PPUSH
// if not building then
12119: LD_VAR 0 1
12123: NOT
12124: IFFALSE 12128
// exit ;
12126: GO 12171
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12128: LD_ADDR_VAR 0 2
12132: PUSH
12133: LD_VAR 0 1
12137: PUSH
12138: LD_INT 22
12140: PUSH
12141: LD_VAR 0 1
12145: PPUSH
12146: CALL_OW 255
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 58
12157: PUSH
12158: EMPTY
12159: LIST
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PPUSH
12165: CALL_OW 69
12169: IN
12170: ST_TO_ADDR
// end ;
12171: LD_VAR 0 2
12175: RET
// export function IsNotFull ( building ) ; begin
12176: LD_INT 0
12178: PPUSH
// if not building then
12179: LD_VAR 0 1
12183: NOT
12184: IFFALSE 12188
// exit ;
12186: GO 12207
// result := UnitsInside ( building ) < 6 ;
12188: LD_ADDR_VAR 0 2
12192: PUSH
12193: LD_VAR 0 1
12197: PPUSH
12198: CALL_OW 313
12202: PUSH
12203: LD_INT 6
12205: LESS
12206: ST_TO_ADDR
// end ;
12207: LD_VAR 0 2
12211: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12212: LD_INT 0
12214: PPUSH
12215: PPUSH
12216: PPUSH
12217: PPUSH
// tmp := [ ] ;
12218: LD_ADDR_VAR 0 3
12222: PUSH
12223: EMPTY
12224: ST_TO_ADDR
// list := [ ] ;
12225: LD_ADDR_VAR 0 5
12229: PUSH
12230: EMPTY
12231: ST_TO_ADDR
// for i = 16 to 25 do
12232: LD_ADDR_VAR 0 4
12236: PUSH
12237: DOUBLE
12238: LD_INT 16
12240: DEC
12241: ST_TO_ADDR
12242: LD_INT 25
12244: PUSH
12245: FOR_TO
12246: IFFALSE 12319
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12248: LD_ADDR_VAR 0 3
12252: PUSH
12253: LD_VAR 0 3
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_VAR 0 1
12265: PPUSH
12266: CALL_OW 255
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 91
12277: PUSH
12278: LD_VAR 0 1
12282: PUSH
12283: LD_INT 6
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 30
12293: PUSH
12294: LD_VAR 0 4
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: LIST
12307: PUSH
12308: EMPTY
12309: LIST
12310: PPUSH
12311: CALL_OW 69
12315: ADD
12316: ST_TO_ADDR
12317: GO 12245
12319: POP
12320: POP
// for i = 1 to tmp do
12321: LD_ADDR_VAR 0 4
12325: PUSH
12326: DOUBLE
12327: LD_INT 1
12329: DEC
12330: ST_TO_ADDR
12331: LD_VAR 0 3
12335: PUSH
12336: FOR_TO
12337: IFFALSE 12425
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12339: LD_ADDR_VAR 0 5
12343: PUSH
12344: LD_VAR 0 5
12348: PUSH
12349: LD_VAR 0 3
12353: PUSH
12354: LD_VAR 0 4
12358: ARRAY
12359: PPUSH
12360: CALL_OW 266
12364: PUSH
12365: LD_VAR 0 3
12369: PUSH
12370: LD_VAR 0 4
12374: ARRAY
12375: PPUSH
12376: CALL_OW 250
12380: PUSH
12381: LD_VAR 0 3
12385: PUSH
12386: LD_VAR 0 4
12390: ARRAY
12391: PPUSH
12392: CALL_OW 251
12396: PUSH
12397: LD_VAR 0 3
12401: PUSH
12402: LD_VAR 0 4
12406: ARRAY
12407: PPUSH
12408: CALL_OW 254
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: ADD
12422: ST_TO_ADDR
12423: GO 12336
12425: POP
12426: POP
// result := list ;
12427: LD_ADDR_VAR 0 2
12431: PUSH
12432: LD_VAR 0 5
12436: ST_TO_ADDR
// end ;
12437: LD_VAR 0 2
12441: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12442: LD_INT 0
12444: PPUSH
12445: PPUSH
12446: PPUSH
12447: PPUSH
12448: PPUSH
12449: PPUSH
12450: PPUSH
// if not factory then
12451: LD_VAR 0 1
12455: NOT
12456: IFFALSE 12460
// exit ;
12458: GO 13053
// if control = control_apeman then
12460: LD_VAR 0 4
12464: PUSH
12465: LD_INT 5
12467: EQUAL
12468: IFFALSE 12577
// begin tmp := UnitsInside ( factory ) ;
12470: LD_ADDR_VAR 0 8
12474: PUSH
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL_OW 313
12484: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12485: LD_VAR 0 8
12489: PPUSH
12490: LD_INT 25
12492: PUSH
12493: LD_INT 12
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PPUSH
12500: CALL_OW 72
12504: NOT
12505: IFFALSE 12515
// control := control_manual ;
12507: LD_ADDR_VAR 0 4
12511: PUSH
12512: LD_INT 1
12514: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12515: LD_ADDR_VAR 0 8
12519: PUSH
12520: LD_VAR 0 1
12524: PPUSH
12525: CALL 12212 0 1
12529: ST_TO_ADDR
// if tmp then
12530: LD_VAR 0 8
12534: IFFALSE 12577
// begin for i in tmp do
12536: LD_ADDR_VAR 0 7
12540: PUSH
12541: LD_VAR 0 8
12545: PUSH
12546: FOR_IN
12547: IFFALSE 12575
// if i [ 1 ] = b_ext_radio then
12549: LD_VAR 0 7
12553: PUSH
12554: LD_INT 1
12556: ARRAY
12557: PUSH
12558: LD_INT 22
12560: EQUAL
12561: IFFALSE 12573
// begin control := control_remote ;
12563: LD_ADDR_VAR 0 4
12567: PUSH
12568: LD_INT 2
12570: ST_TO_ADDR
// break ;
12571: GO 12575
// end ;
12573: GO 12546
12575: POP
12576: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12577: LD_VAR 0 1
12581: PPUSH
12582: LD_VAR 0 2
12586: PPUSH
12587: LD_VAR 0 3
12591: PPUSH
12592: LD_VAR 0 4
12596: PPUSH
12597: LD_VAR 0 5
12601: PPUSH
12602: CALL_OW 448
12606: IFFALSE 12641
// begin result := [ chassis , engine , control , weapon ] ;
12608: LD_ADDR_VAR 0 6
12612: PUSH
12613: LD_VAR 0 2
12617: PUSH
12618: LD_VAR 0 3
12622: PUSH
12623: LD_VAR 0 4
12627: PUSH
12628: LD_VAR 0 5
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: ST_TO_ADDR
// exit ;
12639: GO 13053
// end ; _chassis := AvailableChassisList ( factory ) ;
12641: LD_ADDR_VAR 0 9
12645: PUSH
12646: LD_VAR 0 1
12650: PPUSH
12651: CALL_OW 475
12655: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12656: LD_ADDR_VAR 0 11
12660: PUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: CALL_OW 476
12670: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12671: LD_ADDR_VAR 0 12
12675: PUSH
12676: LD_VAR 0 1
12680: PPUSH
12681: CALL_OW 477
12685: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12686: LD_ADDR_VAR 0 10
12690: PUSH
12691: LD_VAR 0 1
12695: PPUSH
12696: CALL_OW 478
12700: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12701: LD_VAR 0 9
12705: NOT
12706: PUSH
12707: LD_VAR 0 11
12711: NOT
12712: OR
12713: PUSH
12714: LD_VAR 0 12
12718: NOT
12719: OR
12720: PUSH
12721: LD_VAR 0 10
12725: NOT
12726: OR
12727: IFFALSE 12762
// begin result := [ chassis , engine , control , weapon ] ;
12729: LD_ADDR_VAR 0 6
12733: PUSH
12734: LD_VAR 0 2
12738: PUSH
12739: LD_VAR 0 3
12743: PUSH
12744: LD_VAR 0 4
12748: PUSH
12749: LD_VAR 0 5
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: ST_TO_ADDR
// exit ;
12760: GO 13053
// end ; if not chassis in _chassis then
12762: LD_VAR 0 2
12766: PUSH
12767: LD_VAR 0 9
12771: IN
12772: NOT
12773: IFFALSE 12799
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12775: LD_ADDR_VAR 0 2
12779: PUSH
12780: LD_VAR 0 9
12784: PUSH
12785: LD_INT 1
12787: PPUSH
12788: LD_VAR 0 9
12792: PPUSH
12793: CALL_OW 12
12797: ARRAY
12798: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12799: LD_VAR 0 2
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: CALL 13058 0 2
12813: NOT
12814: IFFALSE 12873
// repeat engine := _engine [ 1 ] ;
12816: LD_ADDR_VAR 0 3
12820: PUSH
12821: LD_VAR 0 11
12825: PUSH
12826: LD_INT 1
12828: ARRAY
12829: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12830: LD_ADDR_VAR 0 11
12834: PUSH
12835: LD_VAR 0 11
12839: PPUSH
12840: LD_INT 1
12842: PPUSH
12843: CALL_OW 3
12847: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12848: LD_VAR 0 2
12852: PPUSH
12853: LD_VAR 0 3
12857: PPUSH
12858: CALL 13058 0 2
12862: PUSH
12863: LD_VAR 0 11
12867: PUSH
12868: EMPTY
12869: EQUAL
12870: OR
12871: IFFALSE 12816
// if not control in _control then
12873: LD_VAR 0 4
12877: PUSH
12878: LD_VAR 0 12
12882: IN
12883: NOT
12884: IFFALSE 12910
// control := _control [ rand ( 1 , _control ) ] ;
12886: LD_ADDR_VAR 0 4
12890: PUSH
12891: LD_VAR 0 12
12895: PUSH
12896: LD_INT 1
12898: PPUSH
12899: LD_VAR 0 12
12903: PPUSH
12904: CALL_OW 12
12908: ARRAY
12909: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12910: LD_VAR 0 2
12914: PPUSH
12915: LD_VAR 0 5
12919: PPUSH
12920: CALL 13278 0 2
12924: NOT
12925: IFFALSE 12984
// repeat weapon := _weapon [ 1 ] ;
12927: LD_ADDR_VAR 0 5
12931: PUSH
12932: LD_VAR 0 10
12936: PUSH
12937: LD_INT 1
12939: ARRAY
12940: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12941: LD_ADDR_VAR 0 10
12945: PUSH
12946: LD_VAR 0 10
12950: PPUSH
12951: LD_INT 1
12953: PPUSH
12954: CALL_OW 3
12958: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12959: LD_VAR 0 2
12963: PPUSH
12964: LD_VAR 0 5
12968: PPUSH
12969: CALL 13278 0 2
12973: PUSH
12974: LD_VAR 0 10
12978: PUSH
12979: EMPTY
12980: EQUAL
12981: OR
12982: IFFALSE 12927
// result := [ ] ;
12984: LD_ADDR_VAR 0 6
12988: PUSH
12989: EMPTY
12990: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12991: LD_VAR 0 1
12995: PPUSH
12996: LD_VAR 0 2
13000: PPUSH
13001: LD_VAR 0 3
13005: PPUSH
13006: LD_VAR 0 4
13010: PPUSH
13011: LD_VAR 0 5
13015: PPUSH
13016: CALL_OW 448
13020: IFFALSE 13053
// result := [ chassis , engine , control , weapon ] ;
13022: LD_ADDR_VAR 0 6
13026: PUSH
13027: LD_VAR 0 2
13031: PUSH
13032: LD_VAR 0 3
13036: PUSH
13037: LD_VAR 0 4
13041: PUSH
13042: LD_VAR 0 5
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: ST_TO_ADDR
// end ;
13053: LD_VAR 0 6
13057: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13058: LD_INT 0
13060: PPUSH
// if not chassis or not engine then
13061: LD_VAR 0 1
13065: NOT
13066: PUSH
13067: LD_VAR 0 2
13071: NOT
13072: OR
13073: IFFALSE 13077
// exit ;
13075: GO 13273
// case engine of engine_solar :
13077: LD_VAR 0 2
13081: PUSH
13082: LD_INT 2
13084: DOUBLE
13085: EQUAL
13086: IFTRUE 13090
13088: GO 13128
13090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13091: LD_ADDR_VAR 0 3
13095: PUSH
13096: LD_INT 11
13098: PUSH
13099: LD_INT 12
13101: PUSH
13102: LD_INT 13
13104: PUSH
13105: LD_INT 14
13107: PUSH
13108: LD_INT 1
13110: PUSH
13111: LD_INT 2
13113: PUSH
13114: LD_INT 3
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: ST_TO_ADDR
13126: GO 13257
13128: LD_INT 1
13130: DOUBLE
13131: EQUAL
13132: IFTRUE 13136
13134: GO 13198
13136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13137: LD_ADDR_VAR 0 3
13141: PUSH
13142: LD_INT 11
13144: PUSH
13145: LD_INT 12
13147: PUSH
13148: LD_INT 13
13150: PUSH
13151: LD_INT 14
13153: PUSH
13154: LD_INT 1
13156: PUSH
13157: LD_INT 2
13159: PUSH
13160: LD_INT 3
13162: PUSH
13163: LD_INT 4
13165: PUSH
13166: LD_INT 5
13168: PUSH
13169: LD_INT 21
13171: PUSH
13172: LD_INT 23
13174: PUSH
13175: LD_INT 22
13177: PUSH
13178: LD_INT 24
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: ST_TO_ADDR
13196: GO 13257
13198: LD_INT 3
13200: DOUBLE
13201: EQUAL
13202: IFTRUE 13206
13204: GO 13256
13206: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13207: LD_ADDR_VAR 0 3
13211: PUSH
13212: LD_INT 13
13214: PUSH
13215: LD_INT 14
13217: PUSH
13218: LD_INT 2
13220: PUSH
13221: LD_INT 3
13223: PUSH
13224: LD_INT 4
13226: PUSH
13227: LD_INT 5
13229: PUSH
13230: LD_INT 21
13232: PUSH
13233: LD_INT 22
13235: PUSH
13236: LD_INT 23
13238: PUSH
13239: LD_INT 24
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: ST_TO_ADDR
13254: GO 13257
13256: POP
// result := ( chassis in result ) ;
13257: LD_ADDR_VAR 0 3
13261: PUSH
13262: LD_VAR 0 1
13266: PUSH
13267: LD_VAR 0 3
13271: IN
13272: ST_TO_ADDR
// end ;
13273: LD_VAR 0 3
13277: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13278: LD_INT 0
13280: PPUSH
// if not chassis or not weapon then
13281: LD_VAR 0 1
13285: NOT
13286: PUSH
13287: LD_VAR 0 2
13291: NOT
13292: OR
13293: IFFALSE 13297
// exit ;
13295: GO 14359
// case weapon of us_machine_gun :
13297: LD_VAR 0 2
13301: PUSH
13302: LD_INT 2
13304: DOUBLE
13305: EQUAL
13306: IFTRUE 13310
13308: GO 13340
13310: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13311: LD_ADDR_VAR 0 3
13315: PUSH
13316: LD_INT 1
13318: PUSH
13319: LD_INT 2
13321: PUSH
13322: LD_INT 3
13324: PUSH
13325: LD_INT 4
13327: PUSH
13328: LD_INT 5
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: ST_TO_ADDR
13338: GO 14343
13340: LD_INT 3
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13378
13348: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13349: LD_ADDR_VAR 0 3
13353: PUSH
13354: LD_INT 1
13356: PUSH
13357: LD_INT 2
13359: PUSH
13360: LD_INT 3
13362: PUSH
13363: LD_INT 4
13365: PUSH
13366: LD_INT 5
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: ST_TO_ADDR
13376: GO 14343
13378: LD_INT 11
13380: DOUBLE
13381: EQUAL
13382: IFTRUE 13386
13384: GO 13416
13386: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13387: LD_ADDR_VAR 0 3
13391: PUSH
13392: LD_INT 1
13394: PUSH
13395: LD_INT 2
13397: PUSH
13398: LD_INT 3
13400: PUSH
13401: LD_INT 4
13403: PUSH
13404: LD_INT 5
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: ST_TO_ADDR
13414: GO 14343
13416: LD_INT 4
13418: DOUBLE
13419: EQUAL
13420: IFTRUE 13424
13422: GO 13450
13424: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13425: LD_ADDR_VAR 0 3
13429: PUSH
13430: LD_INT 2
13432: PUSH
13433: LD_INT 3
13435: PUSH
13436: LD_INT 4
13438: PUSH
13439: LD_INT 5
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: ST_TO_ADDR
13448: GO 14343
13450: LD_INT 5
13452: DOUBLE
13453: EQUAL
13454: IFTRUE 13458
13456: GO 13484
13458: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13459: LD_ADDR_VAR 0 3
13463: PUSH
13464: LD_INT 2
13466: PUSH
13467: LD_INT 3
13469: PUSH
13470: LD_INT 4
13472: PUSH
13473: LD_INT 5
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: ST_TO_ADDR
13482: GO 14343
13484: LD_INT 9
13486: DOUBLE
13487: EQUAL
13488: IFTRUE 13492
13490: GO 13518
13492: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13493: LD_ADDR_VAR 0 3
13497: PUSH
13498: LD_INT 2
13500: PUSH
13501: LD_INT 3
13503: PUSH
13504: LD_INT 4
13506: PUSH
13507: LD_INT 5
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: ST_TO_ADDR
13516: GO 14343
13518: LD_INT 7
13520: DOUBLE
13521: EQUAL
13522: IFTRUE 13526
13524: GO 13552
13526: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13527: LD_ADDR_VAR 0 3
13531: PUSH
13532: LD_INT 2
13534: PUSH
13535: LD_INT 3
13537: PUSH
13538: LD_INT 4
13540: PUSH
13541: LD_INT 5
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: ST_TO_ADDR
13550: GO 14343
13552: LD_INT 12
13554: DOUBLE
13555: EQUAL
13556: IFTRUE 13560
13558: GO 13586
13560: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13561: LD_ADDR_VAR 0 3
13565: PUSH
13566: LD_INT 2
13568: PUSH
13569: LD_INT 3
13571: PUSH
13572: LD_INT 4
13574: PUSH
13575: LD_INT 5
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: ST_TO_ADDR
13584: GO 14343
13586: LD_INT 13
13588: DOUBLE
13589: EQUAL
13590: IFTRUE 13594
13592: GO 13620
13594: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13595: LD_ADDR_VAR 0 3
13599: PUSH
13600: LD_INT 2
13602: PUSH
13603: LD_INT 3
13605: PUSH
13606: LD_INT 4
13608: PUSH
13609: LD_INT 5
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: LIST
13616: LIST
13617: ST_TO_ADDR
13618: GO 14343
13620: LD_INT 14
13622: DOUBLE
13623: EQUAL
13624: IFTRUE 13628
13626: GO 13646
13628: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13629: LD_ADDR_VAR 0 3
13633: PUSH
13634: LD_INT 4
13636: PUSH
13637: LD_INT 5
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: ST_TO_ADDR
13644: GO 14343
13646: LD_INT 6
13648: DOUBLE
13649: EQUAL
13650: IFTRUE 13654
13652: GO 13672
13654: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13655: LD_ADDR_VAR 0 3
13659: PUSH
13660: LD_INT 4
13662: PUSH
13663: LD_INT 5
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: ST_TO_ADDR
13670: GO 14343
13672: LD_INT 10
13674: DOUBLE
13675: EQUAL
13676: IFTRUE 13680
13678: GO 13698
13680: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13681: LD_ADDR_VAR 0 3
13685: PUSH
13686: LD_INT 4
13688: PUSH
13689: LD_INT 5
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: ST_TO_ADDR
13696: GO 14343
13698: LD_INT 22
13700: DOUBLE
13701: EQUAL
13702: IFTRUE 13706
13704: GO 13732
13706: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13707: LD_ADDR_VAR 0 3
13711: PUSH
13712: LD_INT 11
13714: PUSH
13715: LD_INT 12
13717: PUSH
13718: LD_INT 13
13720: PUSH
13721: LD_INT 14
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: ST_TO_ADDR
13730: GO 14343
13732: LD_INT 23
13734: DOUBLE
13735: EQUAL
13736: IFTRUE 13740
13738: GO 13766
13740: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13741: LD_ADDR_VAR 0 3
13745: PUSH
13746: LD_INT 11
13748: PUSH
13749: LD_INT 12
13751: PUSH
13752: LD_INT 13
13754: PUSH
13755: LD_INT 14
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: ST_TO_ADDR
13764: GO 14343
13766: LD_INT 24
13768: DOUBLE
13769: EQUAL
13770: IFTRUE 13774
13772: GO 13800
13774: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13775: LD_ADDR_VAR 0 3
13779: PUSH
13780: LD_INT 11
13782: PUSH
13783: LD_INT 12
13785: PUSH
13786: LD_INT 13
13788: PUSH
13789: LD_INT 14
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: ST_TO_ADDR
13798: GO 14343
13800: LD_INT 30
13802: DOUBLE
13803: EQUAL
13804: IFTRUE 13808
13806: GO 13834
13808: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13809: LD_ADDR_VAR 0 3
13813: PUSH
13814: LD_INT 11
13816: PUSH
13817: LD_INT 12
13819: PUSH
13820: LD_INT 13
13822: PUSH
13823: LD_INT 14
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: ST_TO_ADDR
13832: GO 14343
13834: LD_INT 25
13836: DOUBLE
13837: EQUAL
13838: IFTRUE 13842
13840: GO 13860
13842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13843: LD_ADDR_VAR 0 3
13847: PUSH
13848: LD_INT 13
13850: PUSH
13851: LD_INT 14
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: ST_TO_ADDR
13858: GO 14343
13860: LD_INT 27
13862: DOUBLE
13863: EQUAL
13864: IFTRUE 13868
13866: GO 13886
13868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13869: LD_ADDR_VAR 0 3
13873: PUSH
13874: LD_INT 13
13876: PUSH
13877: LD_INT 14
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: ST_TO_ADDR
13884: GO 14343
13886: LD_EXP 87
13890: DOUBLE
13891: EQUAL
13892: IFTRUE 13896
13894: GO 13922
13896: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13897: LD_ADDR_VAR 0 3
13901: PUSH
13902: LD_INT 11
13904: PUSH
13905: LD_INT 12
13907: PUSH
13908: LD_INT 13
13910: PUSH
13911: LD_INT 14
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: ST_TO_ADDR
13920: GO 14343
13922: LD_INT 28
13924: DOUBLE
13925: EQUAL
13926: IFTRUE 13930
13928: GO 13948
13930: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13931: LD_ADDR_VAR 0 3
13935: PUSH
13936: LD_INT 13
13938: PUSH
13939: LD_INT 14
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: ST_TO_ADDR
13946: GO 14343
13948: LD_INT 29
13950: DOUBLE
13951: EQUAL
13952: IFTRUE 13956
13954: GO 13974
13956: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13957: LD_ADDR_VAR 0 3
13961: PUSH
13962: LD_INT 13
13964: PUSH
13965: LD_INT 14
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: ST_TO_ADDR
13972: GO 14343
13974: LD_INT 31
13976: DOUBLE
13977: EQUAL
13978: IFTRUE 13982
13980: GO 14000
13982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13983: LD_ADDR_VAR 0 3
13987: PUSH
13988: LD_INT 13
13990: PUSH
13991: LD_INT 14
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: ST_TO_ADDR
13998: GO 14343
14000: LD_INT 26
14002: DOUBLE
14003: EQUAL
14004: IFTRUE 14008
14006: GO 14026
14008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14009: LD_ADDR_VAR 0 3
14013: PUSH
14014: LD_INT 13
14016: PUSH
14017: LD_INT 14
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: ST_TO_ADDR
14024: GO 14343
14026: LD_INT 42
14028: DOUBLE
14029: EQUAL
14030: IFTRUE 14034
14032: GO 14060
14034: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14035: LD_ADDR_VAR 0 3
14039: PUSH
14040: LD_INT 21
14042: PUSH
14043: LD_INT 22
14045: PUSH
14046: LD_INT 23
14048: PUSH
14049: LD_INT 24
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: ST_TO_ADDR
14058: GO 14343
14060: LD_INT 43
14062: DOUBLE
14063: EQUAL
14064: IFTRUE 14068
14066: GO 14094
14068: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14069: LD_ADDR_VAR 0 3
14073: PUSH
14074: LD_INT 21
14076: PUSH
14077: LD_INT 22
14079: PUSH
14080: LD_INT 23
14082: PUSH
14083: LD_INT 24
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: ST_TO_ADDR
14092: GO 14343
14094: LD_INT 44
14096: DOUBLE
14097: EQUAL
14098: IFTRUE 14102
14100: GO 14128
14102: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14103: LD_ADDR_VAR 0 3
14107: PUSH
14108: LD_INT 21
14110: PUSH
14111: LD_INT 22
14113: PUSH
14114: LD_INT 23
14116: PUSH
14117: LD_INT 24
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: ST_TO_ADDR
14126: GO 14343
14128: LD_INT 45
14130: DOUBLE
14131: EQUAL
14132: IFTRUE 14136
14134: GO 14162
14136: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14137: LD_ADDR_VAR 0 3
14141: PUSH
14142: LD_INT 21
14144: PUSH
14145: LD_INT 22
14147: PUSH
14148: LD_INT 23
14150: PUSH
14151: LD_INT 24
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: ST_TO_ADDR
14160: GO 14343
14162: LD_INT 49
14164: DOUBLE
14165: EQUAL
14166: IFTRUE 14170
14168: GO 14196
14170: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14171: LD_ADDR_VAR 0 3
14175: PUSH
14176: LD_INT 21
14178: PUSH
14179: LD_INT 22
14181: PUSH
14182: LD_INT 23
14184: PUSH
14185: LD_INT 24
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: ST_TO_ADDR
14194: GO 14343
14196: LD_INT 51
14198: DOUBLE
14199: EQUAL
14200: IFTRUE 14204
14202: GO 14230
14204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14205: LD_ADDR_VAR 0 3
14209: PUSH
14210: LD_INT 21
14212: PUSH
14213: LD_INT 22
14215: PUSH
14216: LD_INT 23
14218: PUSH
14219: LD_INT 24
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: ST_TO_ADDR
14228: GO 14343
14230: LD_INT 52
14232: DOUBLE
14233: EQUAL
14234: IFTRUE 14238
14236: GO 14264
14238: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14239: LD_ADDR_VAR 0 3
14243: PUSH
14244: LD_INT 21
14246: PUSH
14247: LD_INT 22
14249: PUSH
14250: LD_INT 23
14252: PUSH
14253: LD_INT 24
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: ST_TO_ADDR
14262: GO 14343
14264: LD_INT 53
14266: DOUBLE
14267: EQUAL
14268: IFTRUE 14272
14270: GO 14290
14272: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14273: LD_ADDR_VAR 0 3
14277: PUSH
14278: LD_INT 23
14280: PUSH
14281: LD_INT 24
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: ST_TO_ADDR
14288: GO 14343
14290: LD_INT 46
14292: DOUBLE
14293: EQUAL
14294: IFTRUE 14298
14296: GO 14316
14298: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14299: LD_ADDR_VAR 0 3
14303: PUSH
14304: LD_INT 23
14306: PUSH
14307: LD_INT 24
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: ST_TO_ADDR
14314: GO 14343
14316: LD_INT 47
14318: DOUBLE
14319: EQUAL
14320: IFTRUE 14324
14322: GO 14342
14324: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14325: LD_ADDR_VAR 0 3
14329: PUSH
14330: LD_INT 23
14332: PUSH
14333: LD_INT 24
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: ST_TO_ADDR
14340: GO 14343
14342: POP
// result := ( chassis in result ) ;
14343: LD_ADDR_VAR 0 3
14347: PUSH
14348: LD_VAR 0 1
14352: PUSH
14353: LD_VAR 0 3
14357: IN
14358: ST_TO_ADDR
// end ;
14359: LD_VAR 0 3
14363: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14364: LD_INT 0
14366: PPUSH
14367: PPUSH
14368: PPUSH
14369: PPUSH
14370: PPUSH
14371: PPUSH
14372: PPUSH
// result := array ;
14373: LD_ADDR_VAR 0 5
14377: PUSH
14378: LD_VAR 0 1
14382: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14383: LD_VAR 0 1
14387: NOT
14388: PUSH
14389: LD_VAR 0 2
14393: NOT
14394: OR
14395: PUSH
14396: LD_VAR 0 3
14400: NOT
14401: OR
14402: PUSH
14403: LD_VAR 0 2
14407: PUSH
14408: LD_VAR 0 1
14412: GREATER
14413: OR
14414: PUSH
14415: LD_VAR 0 3
14419: PUSH
14420: LD_VAR 0 1
14424: GREATER
14425: OR
14426: IFFALSE 14430
// exit ;
14428: GO 14726
// if direction then
14430: LD_VAR 0 4
14434: IFFALSE 14498
// begin d := 1 ;
14436: LD_ADDR_VAR 0 9
14440: PUSH
14441: LD_INT 1
14443: ST_TO_ADDR
// if i_from > i_to then
14444: LD_VAR 0 2
14448: PUSH
14449: LD_VAR 0 3
14453: GREATER
14454: IFFALSE 14480
// length := ( array - i_from ) + i_to else
14456: LD_ADDR_VAR 0 11
14460: PUSH
14461: LD_VAR 0 1
14465: PUSH
14466: LD_VAR 0 2
14470: MINUS
14471: PUSH
14472: LD_VAR 0 3
14476: PLUS
14477: ST_TO_ADDR
14478: GO 14496
// length := i_to - i_from ;
14480: LD_ADDR_VAR 0 11
14484: PUSH
14485: LD_VAR 0 3
14489: PUSH
14490: LD_VAR 0 2
14494: MINUS
14495: ST_TO_ADDR
// end else
14496: GO 14559
// begin d := - 1 ;
14498: LD_ADDR_VAR 0 9
14502: PUSH
14503: LD_INT 1
14505: NEG
14506: ST_TO_ADDR
// if i_from > i_to then
14507: LD_VAR 0 2
14511: PUSH
14512: LD_VAR 0 3
14516: GREATER
14517: IFFALSE 14537
// length := i_from - i_to else
14519: LD_ADDR_VAR 0 11
14523: PUSH
14524: LD_VAR 0 2
14528: PUSH
14529: LD_VAR 0 3
14533: MINUS
14534: ST_TO_ADDR
14535: GO 14559
// length := ( array - i_to ) + i_from ;
14537: LD_ADDR_VAR 0 11
14541: PUSH
14542: LD_VAR 0 1
14546: PUSH
14547: LD_VAR 0 3
14551: MINUS
14552: PUSH
14553: LD_VAR 0 2
14557: PLUS
14558: ST_TO_ADDR
// end ; if not length then
14559: LD_VAR 0 11
14563: NOT
14564: IFFALSE 14568
// exit ;
14566: GO 14726
// tmp := array ;
14568: LD_ADDR_VAR 0 10
14572: PUSH
14573: LD_VAR 0 1
14577: ST_TO_ADDR
// for i = 1 to length do
14578: LD_ADDR_VAR 0 6
14582: PUSH
14583: DOUBLE
14584: LD_INT 1
14586: DEC
14587: ST_TO_ADDR
14588: LD_VAR 0 11
14592: PUSH
14593: FOR_TO
14594: IFFALSE 14714
// begin for j = 1 to array do
14596: LD_ADDR_VAR 0 7
14600: PUSH
14601: DOUBLE
14602: LD_INT 1
14604: DEC
14605: ST_TO_ADDR
14606: LD_VAR 0 1
14610: PUSH
14611: FOR_TO
14612: IFFALSE 14700
// begin k := j + d ;
14614: LD_ADDR_VAR 0 8
14618: PUSH
14619: LD_VAR 0 7
14623: PUSH
14624: LD_VAR 0 9
14628: PLUS
14629: ST_TO_ADDR
// if k > array then
14630: LD_VAR 0 8
14634: PUSH
14635: LD_VAR 0 1
14639: GREATER
14640: IFFALSE 14650
// k := 1 ;
14642: LD_ADDR_VAR 0 8
14646: PUSH
14647: LD_INT 1
14649: ST_TO_ADDR
// if not k then
14650: LD_VAR 0 8
14654: NOT
14655: IFFALSE 14667
// k := array ;
14657: LD_ADDR_VAR 0 8
14661: PUSH
14662: LD_VAR 0 1
14666: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14667: LD_ADDR_VAR 0 10
14671: PUSH
14672: LD_VAR 0 10
14676: PPUSH
14677: LD_VAR 0 8
14681: PPUSH
14682: LD_VAR 0 1
14686: PUSH
14687: LD_VAR 0 7
14691: ARRAY
14692: PPUSH
14693: CALL_OW 1
14697: ST_TO_ADDR
// end ;
14698: GO 14611
14700: POP
14701: POP
// array := tmp ;
14702: LD_ADDR_VAR 0 1
14706: PUSH
14707: LD_VAR 0 10
14711: ST_TO_ADDR
// end ;
14712: GO 14593
14714: POP
14715: POP
// result := array ;
14716: LD_ADDR_VAR 0 5
14720: PUSH
14721: LD_VAR 0 1
14725: ST_TO_ADDR
// end ;
14726: LD_VAR 0 5
14730: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14731: LD_INT 0
14733: PPUSH
14734: PPUSH
// result := 0 ;
14735: LD_ADDR_VAR 0 3
14739: PUSH
14740: LD_INT 0
14742: ST_TO_ADDR
// if not array or not value in array then
14743: LD_VAR 0 1
14747: NOT
14748: PUSH
14749: LD_VAR 0 2
14753: PUSH
14754: LD_VAR 0 1
14758: IN
14759: NOT
14760: OR
14761: IFFALSE 14765
// exit ;
14763: GO 14819
// for i = 1 to array do
14765: LD_ADDR_VAR 0 4
14769: PUSH
14770: DOUBLE
14771: LD_INT 1
14773: DEC
14774: ST_TO_ADDR
14775: LD_VAR 0 1
14779: PUSH
14780: FOR_TO
14781: IFFALSE 14817
// if value = array [ i ] then
14783: LD_VAR 0 2
14787: PUSH
14788: LD_VAR 0 1
14792: PUSH
14793: LD_VAR 0 4
14797: ARRAY
14798: EQUAL
14799: IFFALSE 14815
// begin result := i ;
14801: LD_ADDR_VAR 0 3
14805: PUSH
14806: LD_VAR 0 4
14810: ST_TO_ADDR
// exit ;
14811: POP
14812: POP
14813: GO 14819
// end ;
14815: GO 14780
14817: POP
14818: POP
// end ;
14819: LD_VAR 0 3
14823: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14824: LD_INT 0
14826: PPUSH
// vc_chassis := chassis ;
14827: LD_ADDR_OWVAR 37
14831: PUSH
14832: LD_VAR 0 1
14836: ST_TO_ADDR
// vc_engine := engine ;
14837: LD_ADDR_OWVAR 39
14841: PUSH
14842: LD_VAR 0 2
14846: ST_TO_ADDR
// vc_control := control ;
14847: LD_ADDR_OWVAR 38
14851: PUSH
14852: LD_VAR 0 3
14856: ST_TO_ADDR
// vc_weapon := weapon ;
14857: LD_ADDR_OWVAR 40
14861: PUSH
14862: LD_VAR 0 4
14866: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14867: LD_ADDR_OWVAR 41
14871: PUSH
14872: LD_VAR 0 5
14876: ST_TO_ADDR
// end ;
14877: LD_VAR 0 6
14881: RET
// export function WantPlant ( unit ) ; var task ; begin
14882: LD_INT 0
14884: PPUSH
14885: PPUSH
// result := false ;
14886: LD_ADDR_VAR 0 2
14890: PUSH
14891: LD_INT 0
14893: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14894: LD_ADDR_VAR 0 3
14898: PUSH
14899: LD_VAR 0 1
14903: PPUSH
14904: CALL_OW 437
14908: ST_TO_ADDR
// if task then
14909: LD_VAR 0 3
14913: IFFALSE 14941
// if task [ 1 ] [ 1 ] = p then
14915: LD_VAR 0 3
14919: PUSH
14920: LD_INT 1
14922: ARRAY
14923: PUSH
14924: LD_INT 1
14926: ARRAY
14927: PUSH
14928: LD_STRING p
14930: EQUAL
14931: IFFALSE 14941
// result := true ;
14933: LD_ADDR_VAR 0 2
14937: PUSH
14938: LD_INT 1
14940: ST_TO_ADDR
// end ;
14941: LD_VAR 0 2
14945: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14946: LD_INT 0
14948: PPUSH
14949: PPUSH
14950: PPUSH
14951: PPUSH
// if pos < 1 then
14952: LD_VAR 0 2
14956: PUSH
14957: LD_INT 1
14959: LESS
14960: IFFALSE 14964
// exit ;
14962: GO 15267
// if pos = 1 then
14964: LD_VAR 0 2
14968: PUSH
14969: LD_INT 1
14971: EQUAL
14972: IFFALSE 15005
// result := Replace ( arr , pos [ 1 ] , value ) else
14974: LD_ADDR_VAR 0 4
14978: PUSH
14979: LD_VAR 0 1
14983: PPUSH
14984: LD_VAR 0 2
14988: PUSH
14989: LD_INT 1
14991: ARRAY
14992: PPUSH
14993: LD_VAR 0 3
14997: PPUSH
14998: CALL_OW 1
15002: ST_TO_ADDR
15003: GO 15267
// begin tmp := arr ;
15005: LD_ADDR_VAR 0 6
15009: PUSH
15010: LD_VAR 0 1
15014: ST_TO_ADDR
// s_arr := [ tmp ] ;
15015: LD_ADDR_VAR 0 7
15019: PUSH
15020: LD_VAR 0 6
15024: PUSH
15025: EMPTY
15026: LIST
15027: ST_TO_ADDR
// for i = 1 to pos - 1 do
15028: LD_ADDR_VAR 0 5
15032: PUSH
15033: DOUBLE
15034: LD_INT 1
15036: DEC
15037: ST_TO_ADDR
15038: LD_VAR 0 2
15042: PUSH
15043: LD_INT 1
15045: MINUS
15046: PUSH
15047: FOR_TO
15048: IFFALSE 15093
// begin tmp := tmp [ pos [ i ] ] ;
15050: LD_ADDR_VAR 0 6
15054: PUSH
15055: LD_VAR 0 6
15059: PUSH
15060: LD_VAR 0 2
15064: PUSH
15065: LD_VAR 0 5
15069: ARRAY
15070: ARRAY
15071: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15072: LD_ADDR_VAR 0 7
15076: PUSH
15077: LD_VAR 0 7
15081: PUSH
15082: LD_VAR 0 6
15086: PUSH
15087: EMPTY
15088: LIST
15089: ADD
15090: ST_TO_ADDR
// end ;
15091: GO 15047
15093: POP
15094: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15095: LD_ADDR_VAR 0 6
15099: PUSH
15100: LD_VAR 0 6
15104: PPUSH
15105: LD_VAR 0 2
15109: PUSH
15110: LD_VAR 0 2
15114: ARRAY
15115: PPUSH
15116: LD_VAR 0 3
15120: PPUSH
15121: CALL_OW 1
15125: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15126: LD_ADDR_VAR 0 7
15130: PUSH
15131: LD_VAR 0 7
15135: PPUSH
15136: LD_VAR 0 7
15140: PPUSH
15141: LD_VAR 0 6
15145: PPUSH
15146: CALL_OW 1
15150: ST_TO_ADDR
// for i = s_arr downto 2 do
15151: LD_ADDR_VAR 0 5
15155: PUSH
15156: DOUBLE
15157: LD_VAR 0 7
15161: INC
15162: ST_TO_ADDR
15163: LD_INT 2
15165: PUSH
15166: FOR_DOWNTO
15167: IFFALSE 15251
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15169: LD_ADDR_VAR 0 6
15173: PUSH
15174: LD_VAR 0 7
15178: PUSH
15179: LD_VAR 0 5
15183: PUSH
15184: LD_INT 1
15186: MINUS
15187: ARRAY
15188: PPUSH
15189: LD_VAR 0 2
15193: PUSH
15194: LD_VAR 0 5
15198: PUSH
15199: LD_INT 1
15201: MINUS
15202: ARRAY
15203: PPUSH
15204: LD_VAR 0 7
15208: PUSH
15209: LD_VAR 0 5
15213: ARRAY
15214: PPUSH
15215: CALL_OW 1
15219: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15220: LD_ADDR_VAR 0 7
15224: PUSH
15225: LD_VAR 0 7
15229: PPUSH
15230: LD_VAR 0 5
15234: PUSH
15235: LD_INT 1
15237: MINUS
15238: PPUSH
15239: LD_VAR 0 6
15243: PPUSH
15244: CALL_OW 1
15248: ST_TO_ADDR
// end ;
15249: GO 15166
15251: POP
15252: POP
// result := s_arr [ 1 ] ;
15253: LD_ADDR_VAR 0 4
15257: PUSH
15258: LD_VAR 0 7
15262: PUSH
15263: LD_INT 1
15265: ARRAY
15266: ST_TO_ADDR
// end ; end ;
15267: LD_VAR 0 4
15271: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15272: LD_INT 0
15274: PPUSH
15275: PPUSH
// if not list then
15276: LD_VAR 0 1
15280: NOT
15281: IFFALSE 15285
// exit ;
15283: GO 15376
// i := list [ pos1 ] ;
15285: LD_ADDR_VAR 0 5
15289: PUSH
15290: LD_VAR 0 1
15294: PUSH
15295: LD_VAR 0 2
15299: ARRAY
15300: ST_TO_ADDR
// if not i then
15301: LD_VAR 0 5
15305: NOT
15306: IFFALSE 15310
// exit ;
15308: GO 15376
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15310: LD_ADDR_VAR 0 1
15314: PUSH
15315: LD_VAR 0 1
15319: PPUSH
15320: LD_VAR 0 2
15324: PPUSH
15325: LD_VAR 0 1
15329: PUSH
15330: LD_VAR 0 3
15334: ARRAY
15335: PPUSH
15336: CALL_OW 1
15340: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15341: LD_ADDR_VAR 0 1
15345: PUSH
15346: LD_VAR 0 1
15350: PPUSH
15351: LD_VAR 0 3
15355: PPUSH
15356: LD_VAR 0 5
15360: PPUSH
15361: CALL_OW 1
15365: ST_TO_ADDR
// result := list ;
15366: LD_ADDR_VAR 0 4
15370: PUSH
15371: LD_VAR 0 1
15375: ST_TO_ADDR
// end ;
15376: LD_VAR 0 4
15380: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15381: LD_INT 0
15383: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15384: LD_ADDR_VAR 0 5
15388: PUSH
15389: LD_VAR 0 1
15393: PPUSH
15394: CALL_OW 250
15398: PPUSH
15399: LD_VAR 0 1
15403: PPUSH
15404: CALL_OW 251
15408: PPUSH
15409: LD_VAR 0 2
15413: PPUSH
15414: LD_VAR 0 3
15418: PPUSH
15419: LD_VAR 0 4
15423: PPUSH
15424: CALL 15434 0 5
15428: ST_TO_ADDR
// end ;
15429: LD_VAR 0 5
15433: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15434: LD_INT 0
15436: PPUSH
15437: PPUSH
15438: PPUSH
15439: PPUSH
// if not list then
15440: LD_VAR 0 3
15444: NOT
15445: IFFALSE 15449
// exit ;
15447: GO 15837
// result := [ ] ;
15449: LD_ADDR_VAR 0 6
15453: PUSH
15454: EMPTY
15455: ST_TO_ADDR
// for i in list do
15456: LD_ADDR_VAR 0 7
15460: PUSH
15461: LD_VAR 0 3
15465: PUSH
15466: FOR_IN
15467: IFFALSE 15669
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15469: LD_ADDR_VAR 0 9
15473: PUSH
15474: LD_VAR 0 7
15478: PPUSH
15479: LD_VAR 0 1
15483: PPUSH
15484: LD_VAR 0 2
15488: PPUSH
15489: CALL_OW 297
15493: ST_TO_ADDR
// if not result then
15494: LD_VAR 0 6
15498: NOT
15499: IFFALSE 15525
// result := [ [ i , tmp ] ] else
15501: LD_ADDR_VAR 0 6
15505: PUSH
15506: LD_VAR 0 7
15510: PUSH
15511: LD_VAR 0 9
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: EMPTY
15521: LIST
15522: ST_TO_ADDR
15523: GO 15667
// begin if result [ result ] [ 2 ] < tmp then
15525: LD_VAR 0 6
15529: PUSH
15530: LD_VAR 0 6
15534: ARRAY
15535: PUSH
15536: LD_INT 2
15538: ARRAY
15539: PUSH
15540: LD_VAR 0 9
15544: LESS
15545: IFFALSE 15587
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15547: LD_ADDR_VAR 0 6
15551: PUSH
15552: LD_VAR 0 6
15556: PPUSH
15557: LD_VAR 0 6
15561: PUSH
15562: LD_INT 1
15564: PLUS
15565: PPUSH
15566: LD_VAR 0 7
15570: PUSH
15571: LD_VAR 0 9
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PPUSH
15580: CALL_OW 2
15584: ST_TO_ADDR
15585: GO 15667
// for j = 1 to result do
15587: LD_ADDR_VAR 0 8
15591: PUSH
15592: DOUBLE
15593: LD_INT 1
15595: DEC
15596: ST_TO_ADDR
15597: LD_VAR 0 6
15601: PUSH
15602: FOR_TO
15603: IFFALSE 15665
// begin if tmp < result [ j ] [ 2 ] then
15605: LD_VAR 0 9
15609: PUSH
15610: LD_VAR 0 6
15614: PUSH
15615: LD_VAR 0 8
15619: ARRAY
15620: PUSH
15621: LD_INT 2
15623: ARRAY
15624: LESS
15625: IFFALSE 15663
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15627: LD_ADDR_VAR 0 6
15631: PUSH
15632: LD_VAR 0 6
15636: PPUSH
15637: LD_VAR 0 8
15641: PPUSH
15642: LD_VAR 0 7
15646: PUSH
15647: LD_VAR 0 9
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PPUSH
15656: CALL_OW 2
15660: ST_TO_ADDR
// break ;
15661: GO 15665
// end ; end ;
15663: GO 15602
15665: POP
15666: POP
// end ; end ;
15667: GO 15466
15669: POP
15670: POP
// if result and not asc then
15671: LD_VAR 0 6
15675: PUSH
15676: LD_VAR 0 4
15680: NOT
15681: AND
15682: IFFALSE 15757
// begin tmp := result ;
15684: LD_ADDR_VAR 0 9
15688: PUSH
15689: LD_VAR 0 6
15693: ST_TO_ADDR
// for i = tmp downto 1 do
15694: LD_ADDR_VAR 0 7
15698: PUSH
15699: DOUBLE
15700: LD_VAR 0 9
15704: INC
15705: ST_TO_ADDR
15706: LD_INT 1
15708: PUSH
15709: FOR_DOWNTO
15710: IFFALSE 15755
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15712: LD_ADDR_VAR 0 6
15716: PUSH
15717: LD_VAR 0 6
15721: PPUSH
15722: LD_VAR 0 9
15726: PUSH
15727: LD_VAR 0 7
15731: MINUS
15732: PUSH
15733: LD_INT 1
15735: PLUS
15736: PPUSH
15737: LD_VAR 0 9
15741: PUSH
15742: LD_VAR 0 7
15746: ARRAY
15747: PPUSH
15748: CALL_OW 1
15752: ST_TO_ADDR
15753: GO 15709
15755: POP
15756: POP
// end ; tmp := [ ] ;
15757: LD_ADDR_VAR 0 9
15761: PUSH
15762: EMPTY
15763: ST_TO_ADDR
// if mode then
15764: LD_VAR 0 5
15768: IFFALSE 15837
// begin for i = 1 to result do
15770: LD_ADDR_VAR 0 7
15774: PUSH
15775: DOUBLE
15776: LD_INT 1
15778: DEC
15779: ST_TO_ADDR
15780: LD_VAR 0 6
15784: PUSH
15785: FOR_TO
15786: IFFALSE 15825
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15788: LD_ADDR_VAR 0 9
15792: PUSH
15793: LD_VAR 0 9
15797: PPUSH
15798: LD_VAR 0 7
15802: PPUSH
15803: LD_VAR 0 6
15807: PUSH
15808: LD_VAR 0 7
15812: ARRAY
15813: PUSH
15814: LD_INT 1
15816: ARRAY
15817: PPUSH
15818: CALL_OW 1
15822: ST_TO_ADDR
15823: GO 15785
15825: POP
15826: POP
// result := tmp ;
15827: LD_ADDR_VAR 0 6
15831: PUSH
15832: LD_VAR 0 9
15836: ST_TO_ADDR
// end ; end ;
15837: LD_VAR 0 6
15841: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15842: LD_INT 0
15844: PPUSH
15845: PPUSH
15846: PPUSH
15847: PPUSH
15848: PPUSH
15849: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15850: LD_ADDR_VAR 0 5
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: LD_INT 0
15860: PUSH
15861: LD_INT 0
15863: PUSH
15864: EMPTY
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: ST_TO_ADDR
// if not x or not y then
15872: LD_VAR 0 2
15876: NOT
15877: PUSH
15878: LD_VAR 0 3
15882: NOT
15883: OR
15884: IFFALSE 15888
// exit ;
15886: GO 17540
// if not range then
15888: LD_VAR 0 4
15892: NOT
15893: IFFALSE 15903
// range := 10 ;
15895: LD_ADDR_VAR 0 4
15899: PUSH
15900: LD_INT 10
15902: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15903: LD_ADDR_VAR 0 8
15907: PUSH
15908: LD_INT 81
15910: PUSH
15911: LD_VAR 0 1
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 92
15922: PUSH
15923: LD_VAR 0 2
15927: PUSH
15928: LD_VAR 0 3
15932: PUSH
15933: LD_VAR 0 4
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: PUSH
15944: LD_INT 3
15946: PUSH
15947: LD_INT 21
15949: PUSH
15950: LD_INT 3
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: LIST
15965: PPUSH
15966: CALL_OW 69
15970: ST_TO_ADDR
// if not tmp then
15971: LD_VAR 0 8
15975: NOT
15976: IFFALSE 15980
// exit ;
15978: GO 17540
// for i in tmp do
15980: LD_ADDR_VAR 0 6
15984: PUSH
15985: LD_VAR 0 8
15989: PUSH
15990: FOR_IN
15991: IFFALSE 17515
// begin points := [ 0 , 0 , 0 ] ;
15993: LD_ADDR_VAR 0 9
15997: PUSH
15998: LD_INT 0
16000: PUSH
16001: LD_INT 0
16003: PUSH
16004: LD_INT 0
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: LIST
16011: ST_TO_ADDR
// bpoints := 1 ;
16012: LD_ADDR_VAR 0 10
16016: PUSH
16017: LD_INT 1
16019: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16020: LD_VAR 0 6
16024: PPUSH
16025: CALL_OW 247
16029: PUSH
16030: LD_INT 1
16032: DOUBLE
16033: EQUAL
16034: IFTRUE 16038
16036: GO 16616
16038: POP
// begin if GetClass ( i ) = 1 then
16039: LD_VAR 0 6
16043: PPUSH
16044: CALL_OW 257
16048: PUSH
16049: LD_INT 1
16051: EQUAL
16052: IFFALSE 16073
// points := [ 10 , 5 , 3 ] ;
16054: LD_ADDR_VAR 0 9
16058: PUSH
16059: LD_INT 10
16061: PUSH
16062: LD_INT 5
16064: PUSH
16065: LD_INT 3
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: LIST
16072: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16073: LD_VAR 0 6
16077: PPUSH
16078: CALL_OW 257
16082: PUSH
16083: LD_INT 2
16085: PUSH
16086: LD_INT 3
16088: PUSH
16089: LD_INT 4
16091: PUSH
16092: EMPTY
16093: LIST
16094: LIST
16095: LIST
16096: IN
16097: IFFALSE 16118
// points := [ 3 , 2 , 1 ] ;
16099: LD_ADDR_VAR 0 9
16103: PUSH
16104: LD_INT 3
16106: PUSH
16107: LD_INT 2
16109: PUSH
16110: LD_INT 1
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: LIST
16117: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16118: LD_VAR 0 6
16122: PPUSH
16123: CALL_OW 257
16127: PUSH
16128: LD_INT 5
16130: EQUAL
16131: IFFALSE 16152
// points := [ 130 , 5 , 2 ] ;
16133: LD_ADDR_VAR 0 9
16137: PUSH
16138: LD_INT 130
16140: PUSH
16141: LD_INT 5
16143: PUSH
16144: LD_INT 2
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: LIST
16151: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16152: LD_VAR 0 6
16156: PPUSH
16157: CALL_OW 257
16161: PUSH
16162: LD_INT 8
16164: EQUAL
16165: IFFALSE 16186
// points := [ 35 , 35 , 30 ] ;
16167: LD_ADDR_VAR 0 9
16171: PUSH
16172: LD_INT 35
16174: PUSH
16175: LD_INT 35
16177: PUSH
16178: LD_INT 30
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: LIST
16185: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16186: LD_VAR 0 6
16190: PPUSH
16191: CALL_OW 257
16195: PUSH
16196: LD_INT 9
16198: EQUAL
16199: IFFALSE 16220
// points := [ 20 , 55 , 40 ] ;
16201: LD_ADDR_VAR 0 9
16205: PUSH
16206: LD_INT 20
16208: PUSH
16209: LD_INT 55
16211: PUSH
16212: LD_INT 40
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: LIST
16219: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16220: LD_VAR 0 6
16224: PPUSH
16225: CALL_OW 257
16229: PUSH
16230: LD_INT 12
16232: PUSH
16233: LD_INT 16
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: IN
16240: IFFALSE 16261
// points := [ 5 , 3 , 2 ] ;
16242: LD_ADDR_VAR 0 9
16246: PUSH
16247: LD_INT 5
16249: PUSH
16250: LD_INT 3
16252: PUSH
16253: LD_INT 2
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: LIST
16260: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16261: LD_VAR 0 6
16265: PPUSH
16266: CALL_OW 257
16270: PUSH
16271: LD_INT 17
16273: EQUAL
16274: IFFALSE 16295
// points := [ 100 , 50 , 75 ] ;
16276: LD_ADDR_VAR 0 9
16280: PUSH
16281: LD_INT 100
16283: PUSH
16284: LD_INT 50
16286: PUSH
16287: LD_INT 75
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16295: LD_VAR 0 6
16299: PPUSH
16300: CALL_OW 257
16304: PUSH
16305: LD_INT 15
16307: EQUAL
16308: IFFALSE 16329
// points := [ 10 , 5 , 3 ] ;
16310: LD_ADDR_VAR 0 9
16314: PUSH
16315: LD_INT 10
16317: PUSH
16318: LD_INT 5
16320: PUSH
16321: LD_INT 3
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: LIST
16328: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16329: LD_VAR 0 6
16333: PPUSH
16334: CALL_OW 257
16338: PUSH
16339: LD_INT 14
16341: EQUAL
16342: IFFALSE 16363
// points := [ 10 , 0 , 0 ] ;
16344: LD_ADDR_VAR 0 9
16348: PUSH
16349: LD_INT 10
16351: PUSH
16352: LD_INT 0
16354: PUSH
16355: LD_INT 0
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: LIST
16362: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16363: LD_VAR 0 6
16367: PPUSH
16368: CALL_OW 257
16372: PUSH
16373: LD_INT 11
16375: EQUAL
16376: IFFALSE 16397
// points := [ 30 , 10 , 5 ] ;
16378: LD_ADDR_VAR 0 9
16382: PUSH
16383: LD_INT 30
16385: PUSH
16386: LD_INT 10
16388: PUSH
16389: LD_INT 5
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: LIST
16396: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16397: LD_VAR 0 1
16401: PPUSH
16402: LD_INT 5
16404: PPUSH
16405: CALL_OW 321
16409: PUSH
16410: LD_INT 2
16412: EQUAL
16413: IFFALSE 16430
// bpoints := bpoints * 1.8 ;
16415: LD_ADDR_VAR 0 10
16419: PUSH
16420: LD_VAR 0 10
16424: PUSH
16425: LD_REAL  1.80000000000000E+0000
16428: MUL
16429: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16430: LD_VAR 0 6
16434: PPUSH
16435: CALL_OW 257
16439: PUSH
16440: LD_INT 1
16442: PUSH
16443: LD_INT 2
16445: PUSH
16446: LD_INT 3
16448: PUSH
16449: LD_INT 4
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: IN
16458: PUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: LD_INT 51
16466: PPUSH
16467: CALL_OW 321
16471: PUSH
16472: LD_INT 2
16474: EQUAL
16475: AND
16476: IFFALSE 16493
// bpoints := bpoints * 1.2 ;
16478: LD_ADDR_VAR 0 10
16482: PUSH
16483: LD_VAR 0 10
16487: PUSH
16488: LD_REAL  1.20000000000000E+0000
16491: MUL
16492: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16493: LD_VAR 0 6
16497: PPUSH
16498: CALL_OW 257
16502: PUSH
16503: LD_INT 5
16505: PUSH
16506: LD_INT 7
16508: PUSH
16509: LD_INT 9
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: LIST
16516: IN
16517: PUSH
16518: LD_VAR 0 1
16522: PPUSH
16523: LD_INT 52
16525: PPUSH
16526: CALL_OW 321
16530: PUSH
16531: LD_INT 2
16533: EQUAL
16534: AND
16535: IFFALSE 16552
// bpoints := bpoints * 1.5 ;
16537: LD_ADDR_VAR 0 10
16541: PUSH
16542: LD_VAR 0 10
16546: PUSH
16547: LD_REAL  1.50000000000000E+0000
16550: MUL
16551: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16552: LD_VAR 0 1
16556: PPUSH
16557: LD_INT 66
16559: PPUSH
16560: CALL_OW 321
16564: PUSH
16565: LD_INT 2
16567: EQUAL
16568: IFFALSE 16585
// bpoints := bpoints * 1.1 ;
16570: LD_ADDR_VAR 0 10
16574: PUSH
16575: LD_VAR 0 10
16579: PUSH
16580: LD_REAL  1.10000000000000E+0000
16583: MUL
16584: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16585: LD_ADDR_VAR 0 10
16589: PUSH
16590: LD_VAR 0 10
16594: PUSH
16595: LD_VAR 0 6
16599: PPUSH
16600: LD_INT 1
16602: PPUSH
16603: CALL_OW 259
16607: PUSH
16608: LD_REAL  1.15000000000000E+0000
16611: MUL
16612: MUL
16613: ST_TO_ADDR
// end ; unit_vehicle :
16614: GO 17444
16616: LD_INT 2
16618: DOUBLE
16619: EQUAL
16620: IFTRUE 16624
16622: GO 17432
16624: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16625: LD_VAR 0 6
16629: PPUSH
16630: CALL_OW 264
16634: PUSH
16635: LD_INT 2
16637: PUSH
16638: LD_INT 42
16640: PUSH
16641: LD_INT 24
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: LIST
16648: IN
16649: IFFALSE 16670
// points := [ 25 , 5 , 3 ] ;
16651: LD_ADDR_VAR 0 9
16655: PUSH
16656: LD_INT 25
16658: PUSH
16659: LD_INT 5
16661: PUSH
16662: LD_INT 3
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16670: LD_VAR 0 6
16674: PPUSH
16675: CALL_OW 264
16679: PUSH
16680: LD_INT 4
16682: PUSH
16683: LD_INT 43
16685: PUSH
16686: LD_INT 25
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: LIST
16693: IN
16694: IFFALSE 16715
// points := [ 40 , 15 , 5 ] ;
16696: LD_ADDR_VAR 0 9
16700: PUSH
16701: LD_INT 40
16703: PUSH
16704: LD_INT 15
16706: PUSH
16707: LD_INT 5
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16715: LD_VAR 0 6
16719: PPUSH
16720: CALL_OW 264
16724: PUSH
16725: LD_INT 3
16727: PUSH
16728: LD_INT 23
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: IN
16735: IFFALSE 16756
// points := [ 7 , 25 , 8 ] ;
16737: LD_ADDR_VAR 0 9
16741: PUSH
16742: LD_INT 7
16744: PUSH
16745: LD_INT 25
16747: PUSH
16748: LD_INT 8
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: LIST
16755: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16756: LD_VAR 0 6
16760: PPUSH
16761: CALL_OW 264
16765: PUSH
16766: LD_INT 5
16768: PUSH
16769: LD_INT 27
16771: PUSH
16772: LD_INT 44
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: LIST
16779: IN
16780: IFFALSE 16801
// points := [ 14 , 50 , 16 ] ;
16782: LD_ADDR_VAR 0 9
16786: PUSH
16787: LD_INT 14
16789: PUSH
16790: LD_INT 50
16792: PUSH
16793: LD_INT 16
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16801: LD_VAR 0 6
16805: PPUSH
16806: CALL_OW 264
16810: PUSH
16811: LD_INT 6
16813: PUSH
16814: LD_INT 46
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: IN
16821: IFFALSE 16842
// points := [ 32 , 120 , 70 ] ;
16823: LD_ADDR_VAR 0 9
16827: PUSH
16828: LD_INT 32
16830: PUSH
16831: LD_INT 120
16833: PUSH
16834: LD_INT 70
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: LIST
16841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16842: LD_VAR 0 6
16846: PPUSH
16847: CALL_OW 264
16851: PUSH
16852: LD_INT 7
16854: PUSH
16855: LD_INT 28
16857: PUSH
16858: LD_INT 45
16860: PUSH
16861: LD_EXP 87
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: IN
16872: IFFALSE 16893
// points := [ 35 , 20 , 45 ] ;
16874: LD_ADDR_VAR 0 9
16878: PUSH
16879: LD_INT 35
16881: PUSH
16882: LD_INT 20
16884: PUSH
16885: LD_INT 45
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: LIST
16892: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16893: LD_VAR 0 6
16897: PPUSH
16898: CALL_OW 264
16902: PUSH
16903: LD_INT 47
16905: PUSH
16906: EMPTY
16907: LIST
16908: IN
16909: IFFALSE 16930
// points := [ 67 , 45 , 75 ] ;
16911: LD_ADDR_VAR 0 9
16915: PUSH
16916: LD_INT 67
16918: PUSH
16919: LD_INT 45
16921: PUSH
16922: LD_INT 75
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16930: LD_VAR 0 6
16934: PPUSH
16935: CALL_OW 264
16939: PUSH
16940: LD_INT 26
16942: PUSH
16943: EMPTY
16944: LIST
16945: IN
16946: IFFALSE 16967
// points := [ 120 , 30 , 80 ] ;
16948: LD_ADDR_VAR 0 9
16952: PUSH
16953: LD_INT 120
16955: PUSH
16956: LD_INT 30
16958: PUSH
16959: LD_INT 80
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: LIST
16966: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16967: LD_VAR 0 6
16971: PPUSH
16972: CALL_OW 264
16976: PUSH
16977: LD_INT 22
16979: PUSH
16980: EMPTY
16981: LIST
16982: IN
16983: IFFALSE 17004
// points := [ 40 , 1 , 1 ] ;
16985: LD_ADDR_VAR 0 9
16989: PUSH
16990: LD_INT 40
16992: PUSH
16993: LD_INT 1
16995: PUSH
16996: LD_INT 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17004: LD_VAR 0 6
17008: PPUSH
17009: CALL_OW 264
17013: PUSH
17014: LD_INT 29
17016: PUSH
17017: EMPTY
17018: LIST
17019: IN
17020: IFFALSE 17041
// points := [ 70 , 200 , 400 ] ;
17022: LD_ADDR_VAR 0 9
17026: PUSH
17027: LD_INT 70
17029: PUSH
17030: LD_INT 200
17032: PUSH
17033: LD_INT 400
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17041: LD_VAR 0 6
17045: PPUSH
17046: CALL_OW 264
17050: PUSH
17051: LD_INT 14
17053: PUSH
17054: LD_INT 53
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: IN
17061: IFFALSE 17082
// points := [ 40 , 10 , 20 ] ;
17063: LD_ADDR_VAR 0 9
17067: PUSH
17068: LD_INT 40
17070: PUSH
17071: LD_INT 10
17073: PUSH
17074: LD_INT 20
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: LIST
17081: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17082: LD_VAR 0 6
17086: PPUSH
17087: CALL_OW 264
17091: PUSH
17092: LD_INT 9
17094: PUSH
17095: EMPTY
17096: LIST
17097: IN
17098: IFFALSE 17119
// points := [ 5 , 70 , 20 ] ;
17100: LD_ADDR_VAR 0 9
17104: PUSH
17105: LD_INT 5
17107: PUSH
17108: LD_INT 70
17110: PUSH
17111: LD_INT 20
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17119: LD_VAR 0 6
17123: PPUSH
17124: CALL_OW 264
17128: PUSH
17129: LD_INT 10
17131: PUSH
17132: EMPTY
17133: LIST
17134: IN
17135: IFFALSE 17156
// points := [ 35 , 110 , 70 ] ;
17137: LD_ADDR_VAR 0 9
17141: PUSH
17142: LD_INT 35
17144: PUSH
17145: LD_INT 110
17147: PUSH
17148: LD_INT 70
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: LIST
17155: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17156: LD_VAR 0 6
17160: PPUSH
17161: CALL_OW 265
17165: PUSH
17166: LD_INT 25
17168: EQUAL
17169: IFFALSE 17190
// points := [ 80 , 65 , 100 ] ;
17171: LD_ADDR_VAR 0 9
17175: PUSH
17176: LD_INT 80
17178: PUSH
17179: LD_INT 65
17181: PUSH
17182: LD_INT 100
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17190: LD_VAR 0 6
17194: PPUSH
17195: CALL_OW 263
17199: PUSH
17200: LD_INT 1
17202: EQUAL
17203: IFFALSE 17238
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17205: LD_ADDR_VAR 0 10
17209: PUSH
17210: LD_VAR 0 10
17214: PUSH
17215: LD_VAR 0 6
17219: PPUSH
17220: CALL_OW 311
17224: PPUSH
17225: LD_INT 3
17227: PPUSH
17228: CALL_OW 259
17232: PUSH
17233: LD_INT 4
17235: MUL
17236: MUL
17237: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17238: LD_VAR 0 6
17242: PPUSH
17243: CALL_OW 263
17247: PUSH
17248: LD_INT 2
17250: EQUAL
17251: IFFALSE 17302
// begin j := IsControledBy ( i ) ;
17253: LD_ADDR_VAR 0 7
17257: PUSH
17258: LD_VAR 0 6
17262: PPUSH
17263: CALL_OW 312
17267: ST_TO_ADDR
// if j then
17268: LD_VAR 0 7
17272: IFFALSE 17302
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17274: LD_ADDR_VAR 0 10
17278: PUSH
17279: LD_VAR 0 10
17283: PUSH
17284: LD_VAR 0 7
17288: PPUSH
17289: LD_INT 3
17291: PPUSH
17292: CALL_OW 259
17296: PUSH
17297: LD_INT 3
17299: MUL
17300: MUL
17301: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17302: LD_VAR 0 6
17306: PPUSH
17307: CALL_OW 264
17311: PUSH
17312: LD_INT 5
17314: PUSH
17315: LD_INT 6
17317: PUSH
17318: LD_INT 46
17320: PUSH
17321: LD_INT 44
17323: PUSH
17324: LD_INT 47
17326: PUSH
17327: LD_INT 45
17329: PUSH
17330: LD_INT 28
17332: PUSH
17333: LD_INT 7
17335: PUSH
17336: LD_INT 27
17338: PUSH
17339: LD_INT 29
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: IN
17354: PUSH
17355: LD_VAR 0 1
17359: PPUSH
17360: LD_INT 52
17362: PPUSH
17363: CALL_OW 321
17367: PUSH
17368: LD_INT 2
17370: EQUAL
17371: AND
17372: IFFALSE 17389
// bpoints := bpoints * 1.2 ;
17374: LD_ADDR_VAR 0 10
17378: PUSH
17379: LD_VAR 0 10
17383: PUSH
17384: LD_REAL  1.20000000000000E+0000
17387: MUL
17388: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17389: LD_VAR 0 6
17393: PPUSH
17394: CALL_OW 264
17398: PUSH
17399: LD_INT 6
17401: PUSH
17402: LD_INT 46
17404: PUSH
17405: LD_INT 47
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: LIST
17412: IN
17413: IFFALSE 17430
// bpoints := bpoints * 1.2 ;
17415: LD_ADDR_VAR 0 10
17419: PUSH
17420: LD_VAR 0 10
17424: PUSH
17425: LD_REAL  1.20000000000000E+0000
17428: MUL
17429: ST_TO_ADDR
// end ; unit_building :
17430: GO 17444
17432: LD_INT 3
17434: DOUBLE
17435: EQUAL
17436: IFTRUE 17440
17438: GO 17443
17440: POP
// ; end ;
17441: GO 17444
17443: POP
// for j = 1 to 3 do
17444: LD_ADDR_VAR 0 7
17448: PUSH
17449: DOUBLE
17450: LD_INT 1
17452: DEC
17453: ST_TO_ADDR
17454: LD_INT 3
17456: PUSH
17457: FOR_TO
17458: IFFALSE 17511
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17460: LD_ADDR_VAR 0 5
17464: PUSH
17465: LD_VAR 0 5
17469: PPUSH
17470: LD_VAR 0 7
17474: PPUSH
17475: LD_VAR 0 5
17479: PUSH
17480: LD_VAR 0 7
17484: ARRAY
17485: PUSH
17486: LD_VAR 0 9
17490: PUSH
17491: LD_VAR 0 7
17495: ARRAY
17496: PUSH
17497: LD_VAR 0 10
17501: MUL
17502: PLUS
17503: PPUSH
17504: CALL_OW 1
17508: ST_TO_ADDR
17509: GO 17457
17511: POP
17512: POP
// end ;
17513: GO 15990
17515: POP
17516: POP
// result := Replace ( result , 4 , tmp ) ;
17517: LD_ADDR_VAR 0 5
17521: PUSH
17522: LD_VAR 0 5
17526: PPUSH
17527: LD_INT 4
17529: PPUSH
17530: LD_VAR 0 8
17534: PPUSH
17535: CALL_OW 1
17539: ST_TO_ADDR
// end ;
17540: LD_VAR 0 5
17544: RET
// export function DangerAtRange ( unit , range ) ; begin
17545: LD_INT 0
17547: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17548: LD_ADDR_VAR 0 3
17552: PUSH
17553: LD_VAR 0 1
17557: PPUSH
17558: CALL_OW 255
17562: PPUSH
17563: LD_VAR 0 1
17567: PPUSH
17568: CALL_OW 250
17572: PPUSH
17573: LD_VAR 0 1
17577: PPUSH
17578: CALL_OW 251
17582: PPUSH
17583: LD_VAR 0 2
17587: PPUSH
17588: CALL 15842 0 4
17592: ST_TO_ADDR
// end ;
17593: LD_VAR 0 3
17597: RET
// export function DangerInArea ( side , area ) ; begin
17598: LD_INT 0
17600: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17601: LD_ADDR_VAR 0 3
17605: PUSH
17606: LD_VAR 0 2
17610: PPUSH
17611: LD_INT 81
17613: PUSH
17614: LD_VAR 0 1
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PPUSH
17623: CALL_OW 70
17627: ST_TO_ADDR
// end ;
17628: LD_VAR 0 3
17632: RET
// export function IsExtension ( b ) ; begin
17633: LD_INT 0
17635: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17636: LD_ADDR_VAR 0 2
17640: PUSH
17641: LD_VAR 0 1
17645: PUSH
17646: LD_INT 23
17648: PUSH
17649: LD_INT 20
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_INT 17
17657: PUSH
17658: LD_INT 24
17660: PUSH
17661: LD_INT 21
17663: PUSH
17664: LD_INT 19
17666: PUSH
17667: LD_INT 16
17669: PUSH
17670: LD_INT 25
17672: PUSH
17673: LD_INT 18
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: IN
17688: ST_TO_ADDR
// end ;
17689: LD_VAR 0 2
17693: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17694: LD_INT 0
17696: PPUSH
17697: PPUSH
17698: PPUSH
// result := [ ] ;
17699: LD_ADDR_VAR 0 4
17703: PUSH
17704: EMPTY
17705: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17706: LD_ADDR_VAR 0 5
17710: PUSH
17711: LD_VAR 0 2
17715: PPUSH
17716: LD_INT 21
17718: PUSH
17719: LD_INT 3
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PPUSH
17726: CALL_OW 70
17730: ST_TO_ADDR
// if not tmp then
17731: LD_VAR 0 5
17735: NOT
17736: IFFALSE 17740
// exit ;
17738: GO 17804
// if checkLink then
17740: LD_VAR 0 3
17744: IFFALSE 17794
// begin for i in tmp do
17746: LD_ADDR_VAR 0 6
17750: PUSH
17751: LD_VAR 0 5
17755: PUSH
17756: FOR_IN
17757: IFFALSE 17792
// if GetBase ( i ) <> base then
17759: LD_VAR 0 6
17763: PPUSH
17764: CALL_OW 274
17768: PUSH
17769: LD_VAR 0 1
17773: NONEQUAL
17774: IFFALSE 17790
// ComLinkToBase ( base , i ) ;
17776: LD_VAR 0 1
17780: PPUSH
17781: LD_VAR 0 6
17785: PPUSH
17786: CALL_OW 169
17790: GO 17756
17792: POP
17793: POP
// end ; result := tmp ;
17794: LD_ADDR_VAR 0 4
17798: PUSH
17799: LD_VAR 0 5
17803: ST_TO_ADDR
// end ;
17804: LD_VAR 0 4
17808: RET
// export function ComComplete ( units , b ) ; var i ; begin
17809: LD_INT 0
17811: PPUSH
17812: PPUSH
// if not units then
17813: LD_VAR 0 1
17817: NOT
17818: IFFALSE 17822
// exit ;
17820: GO 17912
// for i in units do
17822: LD_ADDR_VAR 0 4
17826: PUSH
17827: LD_VAR 0 1
17831: PUSH
17832: FOR_IN
17833: IFFALSE 17910
// if BuildingStatus ( b ) = bs_build then
17835: LD_VAR 0 2
17839: PPUSH
17840: CALL_OW 461
17844: PUSH
17845: LD_INT 1
17847: EQUAL
17848: IFFALSE 17908
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17850: LD_VAR 0 4
17854: PPUSH
17855: LD_STRING h
17857: PUSH
17858: LD_VAR 0 2
17862: PPUSH
17863: CALL_OW 250
17867: PUSH
17868: LD_VAR 0 2
17872: PPUSH
17873: CALL_OW 251
17877: PUSH
17878: LD_VAR 0 2
17882: PUSH
17883: LD_INT 0
17885: PUSH
17886: LD_INT 0
17888: PUSH
17889: LD_INT 0
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: PUSH
17901: EMPTY
17902: LIST
17903: PPUSH
17904: CALL_OW 446
17908: GO 17832
17910: POP
17911: POP
// end ;
17912: LD_VAR 0 3
17916: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17917: LD_INT 0
17919: PPUSH
17920: PPUSH
17921: PPUSH
17922: PPUSH
17923: PPUSH
17924: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17925: LD_VAR 0 1
17929: NOT
17930: PUSH
17931: LD_VAR 0 1
17935: PPUSH
17936: CALL_OW 263
17940: PUSH
17941: LD_INT 2
17943: NONEQUAL
17944: OR
17945: IFFALSE 17949
// exit ;
17947: GO 18265
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17949: LD_ADDR_VAR 0 6
17953: PUSH
17954: LD_INT 22
17956: PUSH
17957: LD_VAR 0 1
17961: PPUSH
17962: CALL_OW 255
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 2
17973: PUSH
17974: LD_INT 30
17976: PUSH
17977: LD_INT 36
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 34
17986: PUSH
17987: LD_INT 31
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: LIST
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PPUSH
18003: CALL_OW 69
18007: ST_TO_ADDR
// if not tmp then
18008: LD_VAR 0 6
18012: NOT
18013: IFFALSE 18017
// exit ;
18015: GO 18265
// result := [ ] ;
18017: LD_ADDR_VAR 0 2
18021: PUSH
18022: EMPTY
18023: ST_TO_ADDR
// for i in tmp do
18024: LD_ADDR_VAR 0 3
18028: PUSH
18029: LD_VAR 0 6
18033: PUSH
18034: FOR_IN
18035: IFFALSE 18106
// begin t := UnitsInside ( i ) ;
18037: LD_ADDR_VAR 0 4
18041: PUSH
18042: LD_VAR 0 3
18046: PPUSH
18047: CALL_OW 313
18051: ST_TO_ADDR
// if t then
18052: LD_VAR 0 4
18056: IFFALSE 18104
// for j in t do
18058: LD_ADDR_VAR 0 7
18062: PUSH
18063: LD_VAR 0 4
18067: PUSH
18068: FOR_IN
18069: IFFALSE 18102
// result := Replace ( result , result + 1 , j ) ;
18071: LD_ADDR_VAR 0 2
18075: PUSH
18076: LD_VAR 0 2
18080: PPUSH
18081: LD_VAR 0 2
18085: PUSH
18086: LD_INT 1
18088: PLUS
18089: PPUSH
18090: LD_VAR 0 7
18094: PPUSH
18095: CALL_OW 1
18099: ST_TO_ADDR
18100: GO 18068
18102: POP
18103: POP
// end ;
18104: GO 18034
18106: POP
18107: POP
// if not result then
18108: LD_VAR 0 2
18112: NOT
18113: IFFALSE 18117
// exit ;
18115: GO 18265
// mech := result [ 1 ] ;
18117: LD_ADDR_VAR 0 5
18121: PUSH
18122: LD_VAR 0 2
18126: PUSH
18127: LD_INT 1
18129: ARRAY
18130: ST_TO_ADDR
// if result > 1 then
18131: LD_VAR 0 2
18135: PUSH
18136: LD_INT 1
18138: GREATER
18139: IFFALSE 18251
// begin for i = 2 to result do
18141: LD_ADDR_VAR 0 3
18145: PUSH
18146: DOUBLE
18147: LD_INT 2
18149: DEC
18150: ST_TO_ADDR
18151: LD_VAR 0 2
18155: PUSH
18156: FOR_TO
18157: IFFALSE 18249
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18159: LD_ADDR_VAR 0 4
18163: PUSH
18164: LD_VAR 0 2
18168: PUSH
18169: LD_VAR 0 3
18173: ARRAY
18174: PPUSH
18175: LD_INT 3
18177: PPUSH
18178: CALL_OW 259
18182: PUSH
18183: LD_VAR 0 2
18187: PUSH
18188: LD_VAR 0 3
18192: ARRAY
18193: PPUSH
18194: CALL_OW 432
18198: MINUS
18199: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18200: LD_VAR 0 4
18204: PUSH
18205: LD_VAR 0 5
18209: PPUSH
18210: LD_INT 3
18212: PPUSH
18213: CALL_OW 259
18217: PUSH
18218: LD_VAR 0 5
18222: PPUSH
18223: CALL_OW 432
18227: MINUS
18228: GREATEREQUAL
18229: IFFALSE 18247
// mech := result [ i ] ;
18231: LD_ADDR_VAR 0 5
18235: PUSH
18236: LD_VAR 0 2
18240: PUSH
18241: LD_VAR 0 3
18245: ARRAY
18246: ST_TO_ADDR
// end ;
18247: GO 18156
18249: POP
18250: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18251: LD_VAR 0 1
18255: PPUSH
18256: LD_VAR 0 5
18260: PPUSH
18261: CALL_OW 135
// end ;
18265: LD_VAR 0 2
18269: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18270: LD_INT 0
18272: PPUSH
18273: PPUSH
18274: PPUSH
18275: PPUSH
18276: PPUSH
18277: PPUSH
18278: PPUSH
18279: PPUSH
18280: PPUSH
18281: PPUSH
18282: PPUSH
18283: PPUSH
18284: PPUSH
// result := [ ] ;
18285: LD_ADDR_VAR 0 7
18289: PUSH
18290: EMPTY
18291: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18292: LD_VAR 0 1
18296: PPUSH
18297: CALL_OW 266
18301: PUSH
18302: LD_INT 0
18304: PUSH
18305: LD_INT 1
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: IN
18312: NOT
18313: IFFALSE 18317
// exit ;
18315: GO 19951
// if name then
18317: LD_VAR 0 3
18321: IFFALSE 18337
// SetBName ( base_dep , name ) ;
18323: LD_VAR 0 1
18327: PPUSH
18328: LD_VAR 0 3
18332: PPUSH
18333: CALL_OW 500
// base := GetBase ( base_dep ) ;
18337: LD_ADDR_VAR 0 15
18341: PUSH
18342: LD_VAR 0 1
18346: PPUSH
18347: CALL_OW 274
18351: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18352: LD_ADDR_VAR 0 16
18356: PUSH
18357: LD_VAR 0 1
18361: PPUSH
18362: CALL_OW 255
18366: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18367: LD_ADDR_VAR 0 17
18371: PUSH
18372: LD_VAR 0 1
18376: PPUSH
18377: CALL_OW 248
18381: ST_TO_ADDR
// if sources then
18382: LD_VAR 0 5
18386: IFFALSE 18433
// for i = 1 to 3 do
18388: LD_ADDR_VAR 0 8
18392: PUSH
18393: DOUBLE
18394: LD_INT 1
18396: DEC
18397: ST_TO_ADDR
18398: LD_INT 3
18400: PUSH
18401: FOR_TO
18402: IFFALSE 18431
// AddResourceType ( base , i , sources [ i ] ) ;
18404: LD_VAR 0 15
18408: PPUSH
18409: LD_VAR 0 8
18413: PPUSH
18414: LD_VAR 0 5
18418: PUSH
18419: LD_VAR 0 8
18423: ARRAY
18424: PPUSH
18425: CALL_OW 276
18429: GO 18401
18431: POP
18432: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18433: LD_ADDR_VAR 0 18
18437: PUSH
18438: LD_VAR 0 15
18442: PPUSH
18443: LD_VAR 0 2
18447: PPUSH
18448: LD_INT 1
18450: PPUSH
18451: CALL 17694 0 3
18455: ST_TO_ADDR
// InitHc ;
18456: CALL_OW 19
// InitUc ;
18460: CALL_OW 18
// uc_side := side ;
18464: LD_ADDR_OWVAR 20
18468: PUSH
18469: LD_VAR 0 16
18473: ST_TO_ADDR
// uc_nation := nation ;
18474: LD_ADDR_OWVAR 21
18478: PUSH
18479: LD_VAR 0 17
18483: ST_TO_ADDR
// if buildings then
18484: LD_VAR 0 18
18488: IFFALSE 19810
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18490: LD_ADDR_VAR 0 19
18494: PUSH
18495: LD_VAR 0 18
18499: PPUSH
18500: LD_INT 2
18502: PUSH
18503: LD_INT 30
18505: PUSH
18506: LD_INT 29
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 30
18515: PUSH
18516: LD_INT 30
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: LIST
18527: PPUSH
18528: CALL_OW 72
18532: ST_TO_ADDR
// if tmp then
18533: LD_VAR 0 19
18537: IFFALSE 18585
// for i in tmp do
18539: LD_ADDR_VAR 0 8
18543: PUSH
18544: LD_VAR 0 19
18548: PUSH
18549: FOR_IN
18550: IFFALSE 18583
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18552: LD_VAR 0 8
18556: PPUSH
18557: CALL_OW 250
18561: PPUSH
18562: LD_VAR 0 8
18566: PPUSH
18567: CALL_OW 251
18571: PPUSH
18572: LD_VAR 0 16
18576: PPUSH
18577: CALL_OW 441
18581: GO 18549
18583: POP
18584: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18585: LD_VAR 0 18
18589: PPUSH
18590: LD_INT 2
18592: PUSH
18593: LD_INT 30
18595: PUSH
18596: LD_INT 32
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 30
18605: PUSH
18606: LD_INT 33
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: PPUSH
18618: CALL_OW 72
18622: IFFALSE 18710
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18624: LD_ADDR_VAR 0 8
18628: PUSH
18629: LD_VAR 0 18
18633: PPUSH
18634: LD_INT 2
18636: PUSH
18637: LD_INT 30
18639: PUSH
18640: LD_INT 32
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 30
18649: PUSH
18650: LD_INT 33
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: LIST
18661: PPUSH
18662: CALL_OW 72
18666: PUSH
18667: FOR_IN
18668: IFFALSE 18708
// begin if not GetBWeapon ( i ) then
18670: LD_VAR 0 8
18674: PPUSH
18675: CALL_OW 269
18679: NOT
18680: IFFALSE 18706
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18682: LD_VAR 0 8
18686: PPUSH
18687: LD_VAR 0 8
18691: PPUSH
18692: LD_VAR 0 2
18696: PPUSH
18697: CALL 19956 0 2
18701: PPUSH
18702: CALL_OW 431
// end ;
18706: GO 18667
18708: POP
18709: POP
// end ; for i = 1 to personel do
18710: LD_ADDR_VAR 0 8
18714: PUSH
18715: DOUBLE
18716: LD_INT 1
18718: DEC
18719: ST_TO_ADDR
18720: LD_VAR 0 6
18724: PUSH
18725: FOR_TO
18726: IFFALSE 19790
// begin if i > 4 then
18728: LD_VAR 0 8
18732: PUSH
18733: LD_INT 4
18735: GREATER
18736: IFFALSE 18740
// break ;
18738: GO 19790
// case i of 1 :
18740: LD_VAR 0 8
18744: PUSH
18745: LD_INT 1
18747: DOUBLE
18748: EQUAL
18749: IFTRUE 18753
18751: GO 18833
18753: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18754: LD_ADDR_VAR 0 12
18758: PUSH
18759: LD_VAR 0 18
18763: PPUSH
18764: LD_INT 22
18766: PUSH
18767: LD_VAR 0 16
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 58
18778: PUSH
18779: EMPTY
18780: LIST
18781: PUSH
18782: LD_INT 2
18784: PUSH
18785: LD_INT 30
18787: PUSH
18788: LD_INT 32
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 30
18797: PUSH
18798: LD_INT 4
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 30
18807: PUSH
18808: LD_INT 5
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: LIST
18825: PPUSH
18826: CALL_OW 72
18830: ST_TO_ADDR
18831: GO 19055
18833: LD_INT 2
18835: DOUBLE
18836: EQUAL
18837: IFTRUE 18841
18839: GO 18903
18841: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18842: LD_ADDR_VAR 0 12
18846: PUSH
18847: LD_VAR 0 18
18851: PPUSH
18852: LD_INT 22
18854: PUSH
18855: LD_VAR 0 16
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 2
18866: PUSH
18867: LD_INT 30
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 30
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PPUSH
18896: CALL_OW 72
18900: ST_TO_ADDR
18901: GO 19055
18903: LD_INT 3
18905: DOUBLE
18906: EQUAL
18907: IFTRUE 18911
18909: GO 18973
18911: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18912: LD_ADDR_VAR 0 12
18916: PUSH
18917: LD_VAR 0 18
18921: PPUSH
18922: LD_INT 22
18924: PUSH
18925: LD_VAR 0 16
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 2
18936: PUSH
18937: LD_INT 30
18939: PUSH
18940: LD_INT 2
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 30
18949: PUSH
18950: LD_INT 3
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 72
18970: ST_TO_ADDR
18971: GO 19055
18973: LD_INT 4
18975: DOUBLE
18976: EQUAL
18977: IFTRUE 18981
18979: GO 19054
18981: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18982: LD_ADDR_VAR 0 12
18986: PUSH
18987: LD_VAR 0 18
18991: PPUSH
18992: LD_INT 22
18994: PUSH
18995: LD_VAR 0 16
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 2
19006: PUSH
19007: LD_INT 30
19009: PUSH
19010: LD_INT 6
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 30
19019: PUSH
19020: LD_INT 7
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 30
19029: PUSH
19030: LD_INT 8
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PPUSH
19047: CALL_OW 72
19051: ST_TO_ADDR
19052: GO 19055
19054: POP
// if i = 1 then
19055: LD_VAR 0 8
19059: PUSH
19060: LD_INT 1
19062: EQUAL
19063: IFFALSE 19174
// begin tmp := [ ] ;
19065: LD_ADDR_VAR 0 19
19069: PUSH
19070: EMPTY
19071: ST_TO_ADDR
// for j in f do
19072: LD_ADDR_VAR 0 9
19076: PUSH
19077: LD_VAR 0 12
19081: PUSH
19082: FOR_IN
19083: IFFALSE 19156
// if GetBType ( j ) = b_bunker then
19085: LD_VAR 0 9
19089: PPUSH
19090: CALL_OW 266
19094: PUSH
19095: LD_INT 32
19097: EQUAL
19098: IFFALSE 19125
// tmp := Insert ( tmp , 1 , j ) else
19100: LD_ADDR_VAR 0 19
19104: PUSH
19105: LD_VAR 0 19
19109: PPUSH
19110: LD_INT 1
19112: PPUSH
19113: LD_VAR 0 9
19117: PPUSH
19118: CALL_OW 2
19122: ST_TO_ADDR
19123: GO 19154
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19125: LD_ADDR_VAR 0 19
19129: PUSH
19130: LD_VAR 0 19
19134: PPUSH
19135: LD_VAR 0 19
19139: PUSH
19140: LD_INT 1
19142: PLUS
19143: PPUSH
19144: LD_VAR 0 9
19148: PPUSH
19149: CALL_OW 2
19153: ST_TO_ADDR
19154: GO 19082
19156: POP
19157: POP
// if tmp then
19158: LD_VAR 0 19
19162: IFFALSE 19174
// f := tmp ;
19164: LD_ADDR_VAR 0 12
19168: PUSH
19169: LD_VAR 0 19
19173: ST_TO_ADDR
// end ; x := personel [ i ] ;
19174: LD_ADDR_VAR 0 13
19178: PUSH
19179: LD_VAR 0 6
19183: PUSH
19184: LD_VAR 0 8
19188: ARRAY
19189: ST_TO_ADDR
// if x = - 1 then
19190: LD_VAR 0 13
19194: PUSH
19195: LD_INT 1
19197: NEG
19198: EQUAL
19199: IFFALSE 19408
// begin for j in f do
19201: LD_ADDR_VAR 0 9
19205: PUSH
19206: LD_VAR 0 12
19210: PUSH
19211: FOR_IN
19212: IFFALSE 19404
// repeat InitHc ;
19214: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19218: LD_VAR 0 9
19222: PPUSH
19223: CALL_OW 266
19227: PUSH
19228: LD_INT 5
19230: EQUAL
19231: IFFALSE 19301
// begin if UnitsInside ( j ) < 3 then
19233: LD_VAR 0 9
19237: PPUSH
19238: CALL_OW 313
19242: PUSH
19243: LD_INT 3
19245: LESS
19246: IFFALSE 19282
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19248: LD_INT 0
19250: PPUSH
19251: LD_INT 5
19253: PUSH
19254: LD_INT 8
19256: PUSH
19257: LD_INT 9
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: PUSH
19265: LD_VAR 0 17
19269: ARRAY
19270: PPUSH
19271: LD_VAR 0 4
19275: PPUSH
19276: CALL_OW 380
19280: GO 19299
// PrepareHuman ( false , i , skill ) ;
19282: LD_INT 0
19284: PPUSH
19285: LD_VAR 0 8
19289: PPUSH
19290: LD_VAR 0 4
19294: PPUSH
19295: CALL_OW 380
// end else
19299: GO 19318
// PrepareHuman ( false , i , skill ) ;
19301: LD_INT 0
19303: PPUSH
19304: LD_VAR 0 8
19308: PPUSH
19309: LD_VAR 0 4
19313: PPUSH
19314: CALL_OW 380
// un := CreateHuman ;
19318: LD_ADDR_VAR 0 14
19322: PUSH
19323: CALL_OW 44
19327: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19328: LD_ADDR_VAR 0 7
19332: PUSH
19333: LD_VAR 0 7
19337: PPUSH
19338: LD_INT 1
19340: PPUSH
19341: LD_VAR 0 14
19345: PPUSH
19346: CALL_OW 2
19350: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19351: LD_VAR 0 14
19355: PPUSH
19356: LD_VAR 0 9
19360: PPUSH
19361: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19365: LD_VAR 0 9
19369: PPUSH
19370: CALL_OW 313
19374: PUSH
19375: LD_INT 6
19377: EQUAL
19378: PUSH
19379: LD_VAR 0 9
19383: PPUSH
19384: CALL_OW 266
19388: PUSH
19389: LD_INT 32
19391: PUSH
19392: LD_INT 31
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: IN
19399: OR
19400: IFFALSE 19214
19402: GO 19211
19404: POP
19405: POP
// end else
19406: GO 19788
// for j = 1 to x do
19408: LD_ADDR_VAR 0 9
19412: PUSH
19413: DOUBLE
19414: LD_INT 1
19416: DEC
19417: ST_TO_ADDR
19418: LD_VAR 0 13
19422: PUSH
19423: FOR_TO
19424: IFFALSE 19786
// begin InitHc ;
19426: CALL_OW 19
// if not f then
19430: LD_VAR 0 12
19434: NOT
19435: IFFALSE 19524
// begin PrepareHuman ( false , i , skill ) ;
19437: LD_INT 0
19439: PPUSH
19440: LD_VAR 0 8
19444: PPUSH
19445: LD_VAR 0 4
19449: PPUSH
19450: CALL_OW 380
// un := CreateHuman ;
19454: LD_ADDR_VAR 0 14
19458: PUSH
19459: CALL_OW 44
19463: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19464: LD_ADDR_VAR 0 7
19468: PUSH
19469: LD_VAR 0 7
19473: PPUSH
19474: LD_INT 1
19476: PPUSH
19477: LD_VAR 0 14
19481: PPUSH
19482: CALL_OW 2
19486: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19487: LD_VAR 0 14
19491: PPUSH
19492: LD_VAR 0 1
19496: PPUSH
19497: CALL_OW 250
19501: PPUSH
19502: LD_VAR 0 1
19506: PPUSH
19507: CALL_OW 251
19511: PPUSH
19512: LD_INT 10
19514: PPUSH
19515: LD_INT 0
19517: PPUSH
19518: CALL_OW 50
// continue ;
19522: GO 19423
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19524: LD_VAR 0 12
19528: PUSH
19529: LD_INT 1
19531: ARRAY
19532: PPUSH
19533: CALL_OW 313
19537: PUSH
19538: LD_VAR 0 12
19542: PUSH
19543: LD_INT 1
19545: ARRAY
19546: PPUSH
19547: CALL_OW 266
19551: PUSH
19552: LD_INT 32
19554: PUSH
19555: LD_INT 31
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: IN
19562: AND
19563: PUSH
19564: LD_VAR 0 12
19568: PUSH
19569: LD_INT 1
19571: ARRAY
19572: PPUSH
19573: CALL_OW 313
19577: PUSH
19578: LD_INT 6
19580: EQUAL
19581: OR
19582: IFFALSE 19602
// f := Delete ( f , 1 ) ;
19584: LD_ADDR_VAR 0 12
19588: PUSH
19589: LD_VAR 0 12
19593: PPUSH
19594: LD_INT 1
19596: PPUSH
19597: CALL_OW 3
19601: ST_TO_ADDR
// if not f then
19602: LD_VAR 0 12
19606: NOT
19607: IFFALSE 19625
// begin x := x + 2 ;
19609: LD_ADDR_VAR 0 13
19613: PUSH
19614: LD_VAR 0 13
19618: PUSH
19619: LD_INT 2
19621: PLUS
19622: ST_TO_ADDR
// continue ;
19623: GO 19423
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19625: LD_VAR 0 12
19629: PUSH
19630: LD_INT 1
19632: ARRAY
19633: PPUSH
19634: CALL_OW 266
19638: PUSH
19639: LD_INT 5
19641: EQUAL
19642: IFFALSE 19716
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19644: LD_VAR 0 12
19648: PUSH
19649: LD_INT 1
19651: ARRAY
19652: PPUSH
19653: CALL_OW 313
19657: PUSH
19658: LD_INT 3
19660: LESS
19661: IFFALSE 19697
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19663: LD_INT 0
19665: PPUSH
19666: LD_INT 5
19668: PUSH
19669: LD_INT 8
19671: PUSH
19672: LD_INT 9
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: LIST
19679: PUSH
19680: LD_VAR 0 17
19684: ARRAY
19685: PPUSH
19686: LD_VAR 0 4
19690: PPUSH
19691: CALL_OW 380
19695: GO 19714
// PrepareHuman ( false , i , skill ) ;
19697: LD_INT 0
19699: PPUSH
19700: LD_VAR 0 8
19704: PPUSH
19705: LD_VAR 0 4
19709: PPUSH
19710: CALL_OW 380
// end else
19714: GO 19733
// PrepareHuman ( false , i , skill ) ;
19716: LD_INT 0
19718: PPUSH
19719: LD_VAR 0 8
19723: PPUSH
19724: LD_VAR 0 4
19728: PPUSH
19729: CALL_OW 380
// un := CreateHuman ;
19733: LD_ADDR_VAR 0 14
19737: PUSH
19738: CALL_OW 44
19742: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19743: LD_ADDR_VAR 0 7
19747: PUSH
19748: LD_VAR 0 7
19752: PPUSH
19753: LD_INT 1
19755: PPUSH
19756: LD_VAR 0 14
19760: PPUSH
19761: CALL_OW 2
19765: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19766: LD_VAR 0 14
19770: PPUSH
19771: LD_VAR 0 12
19775: PUSH
19776: LD_INT 1
19778: ARRAY
19779: PPUSH
19780: CALL_OW 52
// end ;
19784: GO 19423
19786: POP
19787: POP
// end ;
19788: GO 18725
19790: POP
19791: POP
// result := result ^ buildings ;
19792: LD_ADDR_VAR 0 7
19796: PUSH
19797: LD_VAR 0 7
19801: PUSH
19802: LD_VAR 0 18
19806: ADD
19807: ST_TO_ADDR
// end else
19808: GO 19951
// begin for i = 1 to personel do
19810: LD_ADDR_VAR 0 8
19814: PUSH
19815: DOUBLE
19816: LD_INT 1
19818: DEC
19819: ST_TO_ADDR
19820: LD_VAR 0 6
19824: PUSH
19825: FOR_TO
19826: IFFALSE 19949
// begin if i > 4 then
19828: LD_VAR 0 8
19832: PUSH
19833: LD_INT 4
19835: GREATER
19836: IFFALSE 19840
// break ;
19838: GO 19949
// x := personel [ i ] ;
19840: LD_ADDR_VAR 0 13
19844: PUSH
19845: LD_VAR 0 6
19849: PUSH
19850: LD_VAR 0 8
19854: ARRAY
19855: ST_TO_ADDR
// if x = - 1 then
19856: LD_VAR 0 13
19860: PUSH
19861: LD_INT 1
19863: NEG
19864: EQUAL
19865: IFFALSE 19869
// continue ;
19867: GO 19825
// PrepareHuman ( false , i , skill ) ;
19869: LD_INT 0
19871: PPUSH
19872: LD_VAR 0 8
19876: PPUSH
19877: LD_VAR 0 4
19881: PPUSH
19882: CALL_OW 380
// un := CreateHuman ;
19886: LD_ADDR_VAR 0 14
19890: PUSH
19891: CALL_OW 44
19895: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19896: LD_VAR 0 14
19900: PPUSH
19901: LD_VAR 0 1
19905: PPUSH
19906: CALL_OW 250
19910: PPUSH
19911: LD_VAR 0 1
19915: PPUSH
19916: CALL_OW 251
19920: PPUSH
19921: LD_INT 10
19923: PPUSH
19924: LD_INT 0
19926: PPUSH
19927: CALL_OW 50
// result := result ^ un ;
19931: LD_ADDR_VAR 0 7
19935: PUSH
19936: LD_VAR 0 7
19940: PUSH
19941: LD_VAR 0 14
19945: ADD
19946: ST_TO_ADDR
// end ;
19947: GO 19825
19949: POP
19950: POP
// end ; end ;
19951: LD_VAR 0 7
19955: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19956: LD_INT 0
19958: PPUSH
19959: PPUSH
19960: PPUSH
19961: PPUSH
19962: PPUSH
19963: PPUSH
19964: PPUSH
19965: PPUSH
19966: PPUSH
19967: PPUSH
19968: PPUSH
19969: PPUSH
19970: PPUSH
19971: PPUSH
19972: PPUSH
19973: PPUSH
// result := false ;
19974: LD_ADDR_VAR 0 3
19978: PUSH
19979: LD_INT 0
19981: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19982: LD_VAR 0 1
19986: NOT
19987: PUSH
19988: LD_VAR 0 1
19992: PPUSH
19993: CALL_OW 266
19997: PUSH
19998: LD_INT 32
20000: PUSH
20001: LD_INT 33
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: IN
20008: NOT
20009: OR
20010: IFFALSE 20014
// exit ;
20012: GO 21123
// nat := GetNation ( tower ) ;
20014: LD_ADDR_VAR 0 12
20018: PUSH
20019: LD_VAR 0 1
20023: PPUSH
20024: CALL_OW 248
20028: ST_TO_ADDR
// side := GetSide ( tower ) ;
20029: LD_ADDR_VAR 0 16
20033: PUSH
20034: LD_VAR 0 1
20038: PPUSH
20039: CALL_OW 255
20043: ST_TO_ADDR
// x := GetX ( tower ) ;
20044: LD_ADDR_VAR 0 10
20048: PUSH
20049: LD_VAR 0 1
20053: PPUSH
20054: CALL_OW 250
20058: ST_TO_ADDR
// y := GetY ( tower ) ;
20059: LD_ADDR_VAR 0 11
20063: PUSH
20064: LD_VAR 0 1
20068: PPUSH
20069: CALL_OW 251
20073: ST_TO_ADDR
// if not x or not y then
20074: LD_VAR 0 10
20078: NOT
20079: PUSH
20080: LD_VAR 0 11
20084: NOT
20085: OR
20086: IFFALSE 20090
// exit ;
20088: GO 21123
// weapon := 0 ;
20090: LD_ADDR_VAR 0 18
20094: PUSH
20095: LD_INT 0
20097: ST_TO_ADDR
// fac_list := [ ] ;
20098: LD_ADDR_VAR 0 17
20102: PUSH
20103: EMPTY
20104: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20105: LD_ADDR_VAR 0 6
20109: PUSH
20110: LD_VAR 0 1
20114: PPUSH
20115: CALL_OW 274
20119: PPUSH
20120: LD_VAR 0 2
20124: PPUSH
20125: LD_INT 0
20127: PPUSH
20128: CALL 17694 0 3
20132: PPUSH
20133: LD_INT 30
20135: PUSH
20136: LD_INT 3
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PPUSH
20143: CALL_OW 72
20147: ST_TO_ADDR
// if not factories then
20148: LD_VAR 0 6
20152: NOT
20153: IFFALSE 20157
// exit ;
20155: GO 21123
// for i in factories do
20157: LD_ADDR_VAR 0 8
20161: PUSH
20162: LD_VAR 0 6
20166: PUSH
20167: FOR_IN
20168: IFFALSE 20193
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20170: LD_ADDR_VAR 0 17
20174: PUSH
20175: LD_VAR 0 17
20179: PUSH
20180: LD_VAR 0 8
20184: PPUSH
20185: CALL_OW 478
20189: UNION
20190: ST_TO_ADDR
20191: GO 20167
20193: POP
20194: POP
// if not fac_list then
20195: LD_VAR 0 17
20199: NOT
20200: IFFALSE 20204
// exit ;
20202: GO 21123
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20204: LD_ADDR_VAR 0 5
20208: PUSH
20209: LD_INT 4
20211: PUSH
20212: LD_INT 5
20214: PUSH
20215: LD_INT 9
20217: PUSH
20218: LD_INT 10
20220: PUSH
20221: LD_INT 6
20223: PUSH
20224: LD_INT 7
20226: PUSH
20227: LD_INT 11
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: PUSH
20239: LD_INT 27
20241: PUSH
20242: LD_INT 28
20244: PUSH
20245: LD_INT 26
20247: PUSH
20248: LD_INT 30
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 43
20259: PUSH
20260: LD_INT 44
20262: PUSH
20263: LD_INT 46
20265: PUSH
20266: LD_INT 45
20268: PUSH
20269: LD_INT 47
20271: PUSH
20272: LD_INT 49
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: LIST
20287: PUSH
20288: LD_VAR 0 12
20292: ARRAY
20293: ST_TO_ADDR
// list := list isect fac_list ;
20294: LD_ADDR_VAR 0 5
20298: PUSH
20299: LD_VAR 0 5
20303: PUSH
20304: LD_VAR 0 17
20308: ISECT
20309: ST_TO_ADDR
// if not list then
20310: LD_VAR 0 5
20314: NOT
20315: IFFALSE 20319
// exit ;
20317: GO 21123
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20319: LD_VAR 0 12
20323: PUSH
20324: LD_INT 3
20326: EQUAL
20327: PUSH
20328: LD_INT 49
20330: PUSH
20331: LD_VAR 0 5
20335: IN
20336: AND
20337: PUSH
20338: LD_INT 31
20340: PPUSH
20341: LD_VAR 0 16
20345: PPUSH
20346: CALL_OW 321
20350: PUSH
20351: LD_INT 2
20353: EQUAL
20354: AND
20355: IFFALSE 20415
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20357: LD_INT 22
20359: PUSH
20360: LD_VAR 0 16
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 35
20371: PUSH
20372: LD_INT 49
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 91
20381: PUSH
20382: LD_VAR 0 1
20386: PUSH
20387: LD_INT 10
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: LIST
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: PPUSH
20400: CALL_OW 69
20404: NOT
20405: IFFALSE 20415
// weapon := ru_time_lapser ;
20407: LD_ADDR_VAR 0 18
20411: PUSH
20412: LD_INT 49
20414: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20415: LD_VAR 0 12
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: IN
20430: PUSH
20431: LD_INT 11
20433: PUSH
20434: LD_VAR 0 5
20438: IN
20439: PUSH
20440: LD_INT 30
20442: PUSH
20443: LD_VAR 0 5
20447: IN
20448: OR
20449: AND
20450: PUSH
20451: LD_INT 6
20453: PPUSH
20454: LD_VAR 0 16
20458: PPUSH
20459: CALL_OW 321
20463: PUSH
20464: LD_INT 2
20466: EQUAL
20467: AND
20468: IFFALSE 20633
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20470: LD_INT 22
20472: PUSH
20473: LD_VAR 0 16
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 2
20484: PUSH
20485: LD_INT 35
20487: PUSH
20488: LD_INT 11
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 35
20497: PUSH
20498: LD_INT 30
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: PUSH
20510: LD_INT 91
20512: PUSH
20513: LD_VAR 0 1
20517: PUSH
20518: LD_INT 18
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: LIST
20530: PPUSH
20531: CALL_OW 69
20535: NOT
20536: PUSH
20537: LD_INT 22
20539: PUSH
20540: LD_VAR 0 16
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: LD_INT 2
20551: PUSH
20552: LD_INT 30
20554: PUSH
20555: LD_INT 32
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 30
20564: PUSH
20565: LD_INT 33
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 91
20579: PUSH
20580: LD_VAR 0 1
20584: PUSH
20585: LD_INT 12
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: LIST
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: LIST
20597: PUSH
20598: EMPTY
20599: LIST
20600: PPUSH
20601: CALL_OW 69
20605: PUSH
20606: LD_INT 2
20608: GREATER
20609: AND
20610: IFFALSE 20633
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20612: LD_ADDR_VAR 0 18
20616: PUSH
20617: LD_INT 11
20619: PUSH
20620: LD_INT 30
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PUSH
20627: LD_VAR 0 12
20631: ARRAY
20632: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20633: LD_VAR 0 18
20637: NOT
20638: PUSH
20639: LD_INT 40
20641: PPUSH
20642: LD_VAR 0 16
20646: PPUSH
20647: CALL_OW 321
20651: PUSH
20652: LD_INT 2
20654: EQUAL
20655: AND
20656: PUSH
20657: LD_INT 7
20659: PUSH
20660: LD_VAR 0 5
20664: IN
20665: PUSH
20666: LD_INT 28
20668: PUSH
20669: LD_VAR 0 5
20673: IN
20674: OR
20675: PUSH
20676: LD_INT 45
20678: PUSH
20679: LD_VAR 0 5
20683: IN
20684: OR
20685: AND
20686: IFFALSE 20940
// begin hex := GetHexInfo ( x , y ) ;
20688: LD_ADDR_VAR 0 4
20692: PUSH
20693: LD_VAR 0 10
20697: PPUSH
20698: LD_VAR 0 11
20702: PPUSH
20703: CALL_OW 546
20707: ST_TO_ADDR
// if hex [ 1 ] then
20708: LD_VAR 0 4
20712: PUSH
20713: LD_INT 1
20715: ARRAY
20716: IFFALSE 20720
// exit ;
20718: GO 21123
// height := hex [ 2 ] ;
20720: LD_ADDR_VAR 0 15
20724: PUSH
20725: LD_VAR 0 4
20729: PUSH
20730: LD_INT 2
20732: ARRAY
20733: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20734: LD_ADDR_VAR 0 14
20738: PUSH
20739: LD_INT 0
20741: PUSH
20742: LD_INT 2
20744: PUSH
20745: LD_INT 3
20747: PUSH
20748: LD_INT 5
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: ST_TO_ADDR
// for i in tmp do
20757: LD_ADDR_VAR 0 8
20761: PUSH
20762: LD_VAR 0 14
20766: PUSH
20767: FOR_IN
20768: IFFALSE 20938
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20770: LD_ADDR_VAR 0 9
20774: PUSH
20775: LD_VAR 0 10
20779: PPUSH
20780: LD_VAR 0 8
20784: PPUSH
20785: LD_INT 5
20787: PPUSH
20788: CALL_OW 272
20792: PUSH
20793: LD_VAR 0 11
20797: PPUSH
20798: LD_VAR 0 8
20802: PPUSH
20803: LD_INT 5
20805: PPUSH
20806: CALL_OW 273
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20815: LD_VAR 0 9
20819: PUSH
20820: LD_INT 1
20822: ARRAY
20823: PPUSH
20824: LD_VAR 0 9
20828: PUSH
20829: LD_INT 2
20831: ARRAY
20832: PPUSH
20833: CALL_OW 488
20837: IFFALSE 20936
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20839: LD_ADDR_VAR 0 4
20843: PUSH
20844: LD_VAR 0 9
20848: PUSH
20849: LD_INT 1
20851: ARRAY
20852: PPUSH
20853: LD_VAR 0 9
20857: PUSH
20858: LD_INT 2
20860: ARRAY
20861: PPUSH
20862: CALL_OW 546
20866: ST_TO_ADDR
// if hex [ 1 ] then
20867: LD_VAR 0 4
20871: PUSH
20872: LD_INT 1
20874: ARRAY
20875: IFFALSE 20879
// continue ;
20877: GO 20767
// h := hex [ 2 ] ;
20879: LD_ADDR_VAR 0 13
20883: PUSH
20884: LD_VAR 0 4
20888: PUSH
20889: LD_INT 2
20891: ARRAY
20892: ST_TO_ADDR
// if h + 7 < height then
20893: LD_VAR 0 13
20897: PUSH
20898: LD_INT 7
20900: PLUS
20901: PUSH
20902: LD_VAR 0 15
20906: LESS
20907: IFFALSE 20936
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20909: LD_ADDR_VAR 0 18
20913: PUSH
20914: LD_INT 7
20916: PUSH
20917: LD_INT 28
20919: PUSH
20920: LD_INT 45
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: PUSH
20928: LD_VAR 0 12
20932: ARRAY
20933: ST_TO_ADDR
// break ;
20934: GO 20938
// end ; end ; end ;
20936: GO 20767
20938: POP
20939: POP
// end ; if not weapon then
20940: LD_VAR 0 18
20944: NOT
20945: IFFALSE 21005
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20947: LD_ADDR_VAR 0 5
20951: PUSH
20952: LD_VAR 0 5
20956: PUSH
20957: LD_INT 11
20959: PUSH
20960: LD_INT 30
20962: PUSH
20963: LD_INT 49
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: LIST
20970: DIFF
20971: ST_TO_ADDR
// if not list then
20972: LD_VAR 0 5
20976: NOT
20977: IFFALSE 20981
// exit ;
20979: GO 21123
// weapon := list [ rand ( 1 , list ) ] ;
20981: LD_ADDR_VAR 0 18
20985: PUSH
20986: LD_VAR 0 5
20990: PUSH
20991: LD_INT 1
20993: PPUSH
20994: LD_VAR 0 5
20998: PPUSH
20999: CALL_OW 12
21003: ARRAY
21004: ST_TO_ADDR
// end ; if weapon then
21005: LD_VAR 0 18
21009: IFFALSE 21123
// begin tmp := CostOfWeapon ( weapon ) ;
21011: LD_ADDR_VAR 0 14
21015: PUSH
21016: LD_VAR 0 18
21020: PPUSH
21021: CALL_OW 451
21025: ST_TO_ADDR
// j := GetBase ( tower ) ;
21026: LD_ADDR_VAR 0 9
21030: PUSH
21031: LD_VAR 0 1
21035: PPUSH
21036: CALL_OW 274
21040: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21041: LD_VAR 0 9
21045: PPUSH
21046: LD_INT 1
21048: PPUSH
21049: CALL_OW 275
21053: PUSH
21054: LD_VAR 0 14
21058: PUSH
21059: LD_INT 1
21061: ARRAY
21062: GREATEREQUAL
21063: PUSH
21064: LD_VAR 0 9
21068: PPUSH
21069: LD_INT 2
21071: PPUSH
21072: CALL_OW 275
21076: PUSH
21077: LD_VAR 0 14
21081: PUSH
21082: LD_INT 2
21084: ARRAY
21085: GREATEREQUAL
21086: AND
21087: PUSH
21088: LD_VAR 0 9
21092: PPUSH
21093: LD_INT 3
21095: PPUSH
21096: CALL_OW 275
21100: PUSH
21101: LD_VAR 0 14
21105: PUSH
21106: LD_INT 3
21108: ARRAY
21109: GREATEREQUAL
21110: AND
21111: IFFALSE 21123
// result := weapon ;
21113: LD_ADDR_VAR 0 3
21117: PUSH
21118: LD_VAR 0 18
21122: ST_TO_ADDR
// end ; end ;
21123: LD_VAR 0 3
21127: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21128: LD_INT 0
21130: PPUSH
21131: PPUSH
// result := true ;
21132: LD_ADDR_VAR 0 3
21136: PUSH
21137: LD_INT 1
21139: ST_TO_ADDR
// if array1 = array2 then
21140: LD_VAR 0 1
21144: PUSH
21145: LD_VAR 0 2
21149: EQUAL
21150: IFFALSE 21210
// begin for i = 1 to array1 do
21152: LD_ADDR_VAR 0 4
21156: PUSH
21157: DOUBLE
21158: LD_INT 1
21160: DEC
21161: ST_TO_ADDR
21162: LD_VAR 0 1
21166: PUSH
21167: FOR_TO
21168: IFFALSE 21206
// if array1 [ i ] <> array2 [ i ] then
21170: LD_VAR 0 1
21174: PUSH
21175: LD_VAR 0 4
21179: ARRAY
21180: PUSH
21181: LD_VAR 0 2
21185: PUSH
21186: LD_VAR 0 4
21190: ARRAY
21191: NONEQUAL
21192: IFFALSE 21204
// begin result := false ;
21194: LD_ADDR_VAR 0 3
21198: PUSH
21199: LD_INT 0
21201: ST_TO_ADDR
// break ;
21202: GO 21206
// end ;
21204: GO 21167
21206: POP
21207: POP
// end else
21208: GO 21218
// result := false ;
21210: LD_ADDR_VAR 0 3
21214: PUSH
21215: LD_INT 0
21217: ST_TO_ADDR
// end ;
21218: LD_VAR 0 3
21222: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21223: LD_INT 0
21225: PPUSH
21226: PPUSH
// if not array1 or not array2 then
21227: LD_VAR 0 1
21231: NOT
21232: PUSH
21233: LD_VAR 0 2
21237: NOT
21238: OR
21239: IFFALSE 21243
// exit ;
21241: GO 21307
// result := true ;
21243: LD_ADDR_VAR 0 3
21247: PUSH
21248: LD_INT 1
21250: ST_TO_ADDR
// for i = 1 to array1 do
21251: LD_ADDR_VAR 0 4
21255: PUSH
21256: DOUBLE
21257: LD_INT 1
21259: DEC
21260: ST_TO_ADDR
21261: LD_VAR 0 1
21265: PUSH
21266: FOR_TO
21267: IFFALSE 21305
// if array1 [ i ] <> array2 [ i ] then
21269: LD_VAR 0 1
21273: PUSH
21274: LD_VAR 0 4
21278: ARRAY
21279: PUSH
21280: LD_VAR 0 2
21284: PUSH
21285: LD_VAR 0 4
21289: ARRAY
21290: NONEQUAL
21291: IFFALSE 21303
// begin result := false ;
21293: LD_ADDR_VAR 0 3
21297: PUSH
21298: LD_INT 0
21300: ST_TO_ADDR
// break ;
21301: GO 21305
// end ;
21303: GO 21266
21305: POP
21306: POP
// end ;
21307: LD_VAR 0 3
21311: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21312: LD_INT 0
21314: PPUSH
21315: PPUSH
21316: PPUSH
// pom := GetBase ( fac ) ;
21317: LD_ADDR_VAR 0 5
21321: PUSH
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 274
21331: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21332: LD_ADDR_VAR 0 4
21336: PUSH
21337: LD_VAR 0 2
21341: PUSH
21342: LD_INT 1
21344: ARRAY
21345: PPUSH
21346: LD_VAR 0 2
21350: PUSH
21351: LD_INT 2
21353: ARRAY
21354: PPUSH
21355: LD_VAR 0 2
21359: PUSH
21360: LD_INT 3
21362: ARRAY
21363: PPUSH
21364: LD_VAR 0 2
21368: PUSH
21369: LD_INT 4
21371: ARRAY
21372: PPUSH
21373: CALL_OW 449
21377: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21378: LD_ADDR_VAR 0 3
21382: PUSH
21383: LD_VAR 0 5
21387: PPUSH
21388: LD_INT 1
21390: PPUSH
21391: CALL_OW 275
21395: PUSH
21396: LD_VAR 0 4
21400: PUSH
21401: LD_INT 1
21403: ARRAY
21404: GREATEREQUAL
21405: PUSH
21406: LD_VAR 0 5
21410: PPUSH
21411: LD_INT 2
21413: PPUSH
21414: CALL_OW 275
21418: PUSH
21419: LD_VAR 0 4
21423: PUSH
21424: LD_INT 2
21426: ARRAY
21427: GREATEREQUAL
21428: AND
21429: PUSH
21430: LD_VAR 0 5
21434: PPUSH
21435: LD_INT 3
21437: PPUSH
21438: CALL_OW 275
21442: PUSH
21443: LD_VAR 0 4
21447: PUSH
21448: LD_INT 3
21450: ARRAY
21451: GREATEREQUAL
21452: AND
21453: ST_TO_ADDR
// end ;
21454: LD_VAR 0 3
21458: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21459: LD_INT 0
21461: PPUSH
21462: PPUSH
21463: PPUSH
21464: PPUSH
// pom := GetBase ( building ) ;
21465: LD_ADDR_VAR 0 3
21469: PUSH
21470: LD_VAR 0 1
21474: PPUSH
21475: CALL_OW 274
21479: ST_TO_ADDR
// if not pom then
21480: LD_VAR 0 3
21484: NOT
21485: IFFALSE 21489
// exit ;
21487: GO 21659
// btype := GetBType ( building ) ;
21489: LD_ADDR_VAR 0 5
21493: PUSH
21494: LD_VAR 0 1
21498: PPUSH
21499: CALL_OW 266
21503: ST_TO_ADDR
// if btype = b_armoury then
21504: LD_VAR 0 5
21508: PUSH
21509: LD_INT 4
21511: EQUAL
21512: IFFALSE 21522
// btype := b_barracks ;
21514: LD_ADDR_VAR 0 5
21518: PUSH
21519: LD_INT 5
21521: ST_TO_ADDR
// if btype = b_depot then
21522: LD_VAR 0 5
21526: PUSH
21527: LD_INT 0
21529: EQUAL
21530: IFFALSE 21540
// btype := b_warehouse ;
21532: LD_ADDR_VAR 0 5
21536: PUSH
21537: LD_INT 1
21539: ST_TO_ADDR
// if btype = b_workshop then
21540: LD_VAR 0 5
21544: PUSH
21545: LD_INT 2
21547: EQUAL
21548: IFFALSE 21558
// btype := b_factory ;
21550: LD_ADDR_VAR 0 5
21554: PUSH
21555: LD_INT 3
21557: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21558: LD_ADDR_VAR 0 4
21562: PUSH
21563: LD_VAR 0 5
21567: PPUSH
21568: LD_VAR 0 1
21572: PPUSH
21573: CALL_OW 248
21577: PPUSH
21578: CALL_OW 450
21582: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21583: LD_ADDR_VAR 0 2
21587: PUSH
21588: LD_VAR 0 3
21592: PPUSH
21593: LD_INT 1
21595: PPUSH
21596: CALL_OW 275
21600: PUSH
21601: LD_VAR 0 4
21605: PUSH
21606: LD_INT 1
21608: ARRAY
21609: GREATEREQUAL
21610: PUSH
21611: LD_VAR 0 3
21615: PPUSH
21616: LD_INT 2
21618: PPUSH
21619: CALL_OW 275
21623: PUSH
21624: LD_VAR 0 4
21628: PUSH
21629: LD_INT 2
21631: ARRAY
21632: GREATEREQUAL
21633: AND
21634: PUSH
21635: LD_VAR 0 3
21639: PPUSH
21640: LD_INT 3
21642: PPUSH
21643: CALL_OW 275
21647: PUSH
21648: LD_VAR 0 4
21652: PUSH
21653: LD_INT 3
21655: ARRAY
21656: GREATEREQUAL
21657: AND
21658: ST_TO_ADDR
// end ;
21659: LD_VAR 0 2
21663: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21664: LD_INT 0
21666: PPUSH
21667: PPUSH
21668: PPUSH
// pom := GetBase ( building ) ;
21669: LD_ADDR_VAR 0 4
21673: PUSH
21674: LD_VAR 0 1
21678: PPUSH
21679: CALL_OW 274
21683: ST_TO_ADDR
// if not pom then
21684: LD_VAR 0 4
21688: NOT
21689: IFFALSE 21693
// exit ;
21691: GO 21794
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21693: LD_ADDR_VAR 0 5
21697: PUSH
21698: LD_VAR 0 2
21702: PPUSH
21703: LD_VAR 0 1
21707: PPUSH
21708: CALL_OW 248
21712: PPUSH
21713: CALL_OW 450
21717: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21718: LD_ADDR_VAR 0 3
21722: PUSH
21723: LD_VAR 0 4
21727: PPUSH
21728: LD_INT 1
21730: PPUSH
21731: CALL_OW 275
21735: PUSH
21736: LD_VAR 0 5
21740: PUSH
21741: LD_INT 1
21743: ARRAY
21744: GREATEREQUAL
21745: PUSH
21746: LD_VAR 0 4
21750: PPUSH
21751: LD_INT 2
21753: PPUSH
21754: CALL_OW 275
21758: PUSH
21759: LD_VAR 0 5
21763: PUSH
21764: LD_INT 2
21766: ARRAY
21767: GREATEREQUAL
21768: AND
21769: PUSH
21770: LD_VAR 0 4
21774: PPUSH
21775: LD_INT 3
21777: PPUSH
21778: CALL_OW 275
21782: PUSH
21783: LD_VAR 0 5
21787: PUSH
21788: LD_INT 3
21790: ARRAY
21791: GREATEREQUAL
21792: AND
21793: ST_TO_ADDR
// end ;
21794: LD_VAR 0 3
21798: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21799: LD_INT 0
21801: PPUSH
21802: PPUSH
21803: PPUSH
21804: PPUSH
21805: PPUSH
21806: PPUSH
21807: PPUSH
21808: PPUSH
21809: PPUSH
21810: PPUSH
21811: PPUSH
// result := false ;
21812: LD_ADDR_VAR 0 8
21816: PUSH
21817: LD_INT 0
21819: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21820: LD_VAR 0 5
21824: NOT
21825: PUSH
21826: LD_VAR 0 1
21830: NOT
21831: OR
21832: PUSH
21833: LD_VAR 0 2
21837: NOT
21838: OR
21839: PUSH
21840: LD_VAR 0 3
21844: NOT
21845: OR
21846: IFFALSE 21850
// exit ;
21848: GO 22664
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21850: LD_ADDR_VAR 0 14
21854: PUSH
21855: LD_VAR 0 1
21859: PPUSH
21860: LD_VAR 0 2
21864: PPUSH
21865: LD_VAR 0 3
21869: PPUSH
21870: LD_VAR 0 4
21874: PPUSH
21875: LD_VAR 0 5
21879: PUSH
21880: LD_INT 1
21882: ARRAY
21883: PPUSH
21884: CALL_OW 248
21888: PPUSH
21889: LD_INT 0
21891: PPUSH
21892: CALL 23901 0 6
21896: ST_TO_ADDR
// if not hexes then
21897: LD_VAR 0 14
21901: NOT
21902: IFFALSE 21906
// exit ;
21904: GO 22664
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21906: LD_ADDR_VAR 0 17
21910: PUSH
21911: LD_VAR 0 5
21915: PPUSH
21916: LD_INT 22
21918: PUSH
21919: LD_VAR 0 13
21923: PPUSH
21924: CALL_OW 255
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 2
21935: PUSH
21936: LD_INT 30
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: LD_INT 30
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: LIST
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PPUSH
21965: CALL_OW 72
21969: ST_TO_ADDR
// for i = 1 to hexes do
21970: LD_ADDR_VAR 0 9
21974: PUSH
21975: DOUBLE
21976: LD_INT 1
21978: DEC
21979: ST_TO_ADDR
21980: LD_VAR 0 14
21984: PUSH
21985: FOR_TO
21986: IFFALSE 22662
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21988: LD_ADDR_VAR 0 13
21992: PUSH
21993: LD_VAR 0 14
21997: PUSH
21998: LD_VAR 0 9
22002: ARRAY
22003: PUSH
22004: LD_INT 1
22006: ARRAY
22007: PPUSH
22008: LD_VAR 0 14
22012: PUSH
22013: LD_VAR 0 9
22017: ARRAY
22018: PUSH
22019: LD_INT 2
22021: ARRAY
22022: PPUSH
22023: CALL_OW 428
22027: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22028: LD_VAR 0 14
22032: PUSH
22033: LD_VAR 0 9
22037: ARRAY
22038: PUSH
22039: LD_INT 1
22041: ARRAY
22042: PPUSH
22043: LD_VAR 0 14
22047: PUSH
22048: LD_VAR 0 9
22052: ARRAY
22053: PUSH
22054: LD_INT 2
22056: ARRAY
22057: PPUSH
22058: CALL_OW 351
22062: PUSH
22063: LD_VAR 0 14
22067: PUSH
22068: LD_VAR 0 9
22072: ARRAY
22073: PUSH
22074: LD_INT 1
22076: ARRAY
22077: PPUSH
22078: LD_VAR 0 14
22082: PUSH
22083: LD_VAR 0 9
22087: ARRAY
22088: PUSH
22089: LD_INT 2
22091: ARRAY
22092: PPUSH
22093: CALL_OW 488
22097: NOT
22098: OR
22099: PUSH
22100: LD_VAR 0 13
22104: PPUSH
22105: CALL_OW 247
22109: PUSH
22110: LD_INT 3
22112: EQUAL
22113: OR
22114: IFFALSE 22120
// exit ;
22116: POP
22117: POP
22118: GO 22664
// if not tmp then
22120: LD_VAR 0 13
22124: NOT
22125: IFFALSE 22129
// continue ;
22127: GO 21985
// result := true ;
22129: LD_ADDR_VAR 0 8
22133: PUSH
22134: LD_INT 1
22136: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22137: LD_VAR 0 6
22141: PUSH
22142: LD_VAR 0 13
22146: PPUSH
22147: CALL_OW 247
22151: PUSH
22152: LD_INT 2
22154: EQUAL
22155: AND
22156: PUSH
22157: LD_VAR 0 13
22161: PPUSH
22162: CALL_OW 263
22166: PUSH
22167: LD_INT 1
22169: EQUAL
22170: AND
22171: IFFALSE 22335
// begin if IsDrivenBy ( tmp ) then
22173: LD_VAR 0 13
22177: PPUSH
22178: CALL_OW 311
22182: IFFALSE 22186
// continue ;
22184: GO 21985
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22186: LD_VAR 0 6
22190: PPUSH
22191: LD_INT 3
22193: PUSH
22194: LD_INT 60
22196: PUSH
22197: EMPTY
22198: LIST
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 3
22206: PUSH
22207: LD_INT 55
22209: PUSH
22210: EMPTY
22211: LIST
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PPUSH
22221: CALL_OW 72
22225: IFFALSE 22333
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22227: LD_ADDR_VAR 0 18
22231: PUSH
22232: LD_VAR 0 6
22236: PPUSH
22237: LD_INT 3
22239: PUSH
22240: LD_INT 60
22242: PUSH
22243: EMPTY
22244: LIST
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 3
22252: PUSH
22253: LD_INT 55
22255: PUSH
22256: EMPTY
22257: LIST
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PPUSH
22267: CALL_OW 72
22271: PUSH
22272: LD_INT 1
22274: ARRAY
22275: ST_TO_ADDR
// if IsInUnit ( driver ) then
22276: LD_VAR 0 18
22280: PPUSH
22281: CALL_OW 310
22285: IFFALSE 22296
// ComExit ( driver ) ;
22287: LD_VAR 0 18
22291: PPUSH
22292: CALL 47029 0 1
// AddComEnterUnit ( driver , tmp ) ;
22296: LD_VAR 0 18
22300: PPUSH
22301: LD_VAR 0 13
22305: PPUSH
22306: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22310: LD_VAR 0 18
22314: PPUSH
22315: LD_VAR 0 7
22319: PPUSH
22320: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22324: LD_VAR 0 18
22328: PPUSH
22329: CALL_OW 181
// end ; continue ;
22333: GO 21985
// end ; if not cleaners or not tmp in cleaners then
22335: LD_VAR 0 6
22339: NOT
22340: PUSH
22341: LD_VAR 0 13
22345: PUSH
22346: LD_VAR 0 6
22350: IN
22351: NOT
22352: OR
22353: IFFALSE 22660
// begin if dep then
22355: LD_VAR 0 17
22359: IFFALSE 22495
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22361: LD_ADDR_VAR 0 16
22365: PUSH
22366: LD_VAR 0 17
22370: PUSH
22371: LD_INT 1
22373: ARRAY
22374: PPUSH
22375: CALL_OW 250
22379: PPUSH
22380: LD_VAR 0 17
22384: PUSH
22385: LD_INT 1
22387: ARRAY
22388: PPUSH
22389: CALL_OW 254
22393: PPUSH
22394: LD_INT 5
22396: PPUSH
22397: CALL_OW 272
22401: PUSH
22402: LD_VAR 0 17
22406: PUSH
22407: LD_INT 1
22409: ARRAY
22410: PPUSH
22411: CALL_OW 251
22415: PPUSH
22416: LD_VAR 0 17
22420: PUSH
22421: LD_INT 1
22423: ARRAY
22424: PPUSH
22425: CALL_OW 254
22429: PPUSH
22430: LD_INT 5
22432: PPUSH
22433: CALL_OW 273
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22442: LD_VAR 0 16
22446: PUSH
22447: LD_INT 1
22449: ARRAY
22450: PPUSH
22451: LD_VAR 0 16
22455: PUSH
22456: LD_INT 2
22458: ARRAY
22459: PPUSH
22460: CALL_OW 488
22464: IFFALSE 22495
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22466: LD_VAR 0 13
22470: PPUSH
22471: LD_VAR 0 16
22475: PUSH
22476: LD_INT 1
22478: ARRAY
22479: PPUSH
22480: LD_VAR 0 16
22484: PUSH
22485: LD_INT 2
22487: ARRAY
22488: PPUSH
22489: CALL_OW 111
// continue ;
22493: GO 21985
// end ; end ; r := GetDir ( tmp ) ;
22495: LD_ADDR_VAR 0 15
22499: PUSH
22500: LD_VAR 0 13
22504: PPUSH
22505: CALL_OW 254
22509: ST_TO_ADDR
// if r = 5 then
22510: LD_VAR 0 15
22514: PUSH
22515: LD_INT 5
22517: EQUAL
22518: IFFALSE 22528
// r := 0 ;
22520: LD_ADDR_VAR 0 15
22524: PUSH
22525: LD_INT 0
22527: ST_TO_ADDR
// for j = r to 5 do
22528: LD_ADDR_VAR 0 10
22532: PUSH
22533: DOUBLE
22534: LD_VAR 0 15
22538: DEC
22539: ST_TO_ADDR
22540: LD_INT 5
22542: PUSH
22543: FOR_TO
22544: IFFALSE 22658
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22546: LD_ADDR_VAR 0 11
22550: PUSH
22551: LD_VAR 0 13
22555: PPUSH
22556: CALL_OW 250
22560: PPUSH
22561: LD_VAR 0 10
22565: PPUSH
22566: LD_INT 2
22568: PPUSH
22569: CALL_OW 272
22573: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22574: LD_ADDR_VAR 0 12
22578: PUSH
22579: LD_VAR 0 13
22583: PPUSH
22584: CALL_OW 251
22588: PPUSH
22589: LD_VAR 0 10
22593: PPUSH
22594: LD_INT 2
22596: PPUSH
22597: CALL_OW 273
22601: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22602: LD_VAR 0 11
22606: PPUSH
22607: LD_VAR 0 12
22611: PPUSH
22612: CALL_OW 488
22616: PUSH
22617: LD_VAR 0 11
22621: PPUSH
22622: LD_VAR 0 12
22626: PPUSH
22627: CALL_OW 428
22631: NOT
22632: AND
22633: IFFALSE 22656
// begin ComMoveXY ( tmp , _x , _y ) ;
22635: LD_VAR 0 13
22639: PPUSH
22640: LD_VAR 0 11
22644: PPUSH
22645: LD_VAR 0 12
22649: PPUSH
22650: CALL_OW 111
// break ;
22654: GO 22658
// end ; end ;
22656: GO 22543
22658: POP
22659: POP
// end ; end ;
22660: GO 21985
22662: POP
22663: POP
// end ;
22664: LD_VAR 0 8
22668: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22669: LD_INT 0
22671: PPUSH
// result := true ;
22672: LD_ADDR_VAR 0 3
22676: PUSH
22677: LD_INT 1
22679: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22680: LD_VAR 0 2
22684: PUSH
22685: LD_INT 24
22687: DOUBLE
22688: EQUAL
22689: IFTRUE 22699
22691: LD_INT 33
22693: DOUBLE
22694: EQUAL
22695: IFTRUE 22699
22697: GO 22724
22699: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22700: LD_ADDR_VAR 0 3
22704: PUSH
22705: LD_INT 32
22707: PPUSH
22708: LD_VAR 0 1
22712: PPUSH
22713: CALL_OW 321
22717: PUSH
22718: LD_INT 2
22720: EQUAL
22721: ST_TO_ADDR
22722: GO 23044
22724: LD_INT 20
22726: DOUBLE
22727: EQUAL
22728: IFTRUE 22732
22730: GO 22757
22732: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22733: LD_ADDR_VAR 0 3
22737: PUSH
22738: LD_INT 6
22740: PPUSH
22741: LD_VAR 0 1
22745: PPUSH
22746: CALL_OW 321
22750: PUSH
22751: LD_INT 2
22753: EQUAL
22754: ST_TO_ADDR
22755: GO 23044
22757: LD_INT 22
22759: DOUBLE
22760: EQUAL
22761: IFTRUE 22771
22763: LD_INT 36
22765: DOUBLE
22766: EQUAL
22767: IFTRUE 22771
22769: GO 22796
22771: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22772: LD_ADDR_VAR 0 3
22776: PUSH
22777: LD_INT 15
22779: PPUSH
22780: LD_VAR 0 1
22784: PPUSH
22785: CALL_OW 321
22789: PUSH
22790: LD_INT 2
22792: EQUAL
22793: ST_TO_ADDR
22794: GO 23044
22796: LD_INT 30
22798: DOUBLE
22799: EQUAL
22800: IFTRUE 22804
22802: GO 22829
22804: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22805: LD_ADDR_VAR 0 3
22809: PUSH
22810: LD_INT 20
22812: PPUSH
22813: LD_VAR 0 1
22817: PPUSH
22818: CALL_OW 321
22822: PUSH
22823: LD_INT 2
22825: EQUAL
22826: ST_TO_ADDR
22827: GO 23044
22829: LD_INT 28
22831: DOUBLE
22832: EQUAL
22833: IFTRUE 22843
22835: LD_INT 21
22837: DOUBLE
22838: EQUAL
22839: IFTRUE 22843
22841: GO 22868
22843: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22844: LD_ADDR_VAR 0 3
22848: PUSH
22849: LD_INT 21
22851: PPUSH
22852: LD_VAR 0 1
22856: PPUSH
22857: CALL_OW 321
22861: PUSH
22862: LD_INT 2
22864: EQUAL
22865: ST_TO_ADDR
22866: GO 23044
22868: LD_INT 16
22870: DOUBLE
22871: EQUAL
22872: IFTRUE 22876
22874: GO 22903
22876: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22877: LD_ADDR_VAR 0 3
22881: PUSH
22882: LD_EXP 95
22886: PPUSH
22887: LD_VAR 0 1
22891: PPUSH
22892: CALL_OW 321
22896: PUSH
22897: LD_INT 2
22899: EQUAL
22900: ST_TO_ADDR
22901: GO 23044
22903: LD_INT 19
22905: DOUBLE
22906: EQUAL
22907: IFTRUE 22917
22909: LD_INT 23
22911: DOUBLE
22912: EQUAL
22913: IFTRUE 22917
22915: GO 22944
22917: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22918: LD_ADDR_VAR 0 3
22922: PUSH
22923: LD_EXP 94
22927: PPUSH
22928: LD_VAR 0 1
22932: PPUSH
22933: CALL_OW 321
22937: PUSH
22938: LD_INT 2
22940: EQUAL
22941: ST_TO_ADDR
22942: GO 23044
22944: LD_INT 17
22946: DOUBLE
22947: EQUAL
22948: IFTRUE 22952
22950: GO 22977
22952: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22953: LD_ADDR_VAR 0 3
22957: PUSH
22958: LD_INT 39
22960: PPUSH
22961: LD_VAR 0 1
22965: PPUSH
22966: CALL_OW 321
22970: PUSH
22971: LD_INT 2
22973: EQUAL
22974: ST_TO_ADDR
22975: GO 23044
22977: LD_INT 18
22979: DOUBLE
22980: EQUAL
22981: IFTRUE 22985
22983: GO 23010
22985: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22986: LD_ADDR_VAR 0 3
22990: PUSH
22991: LD_INT 40
22993: PPUSH
22994: LD_VAR 0 1
22998: PPUSH
22999: CALL_OW 321
23003: PUSH
23004: LD_INT 2
23006: EQUAL
23007: ST_TO_ADDR
23008: GO 23044
23010: LD_INT 27
23012: DOUBLE
23013: EQUAL
23014: IFTRUE 23018
23016: GO 23043
23018: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23019: LD_ADDR_VAR 0 3
23023: PUSH
23024: LD_INT 35
23026: PPUSH
23027: LD_VAR 0 1
23031: PPUSH
23032: CALL_OW 321
23036: PUSH
23037: LD_INT 2
23039: EQUAL
23040: ST_TO_ADDR
23041: GO 23044
23043: POP
// end ;
23044: LD_VAR 0 3
23048: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23049: LD_INT 0
23051: PPUSH
23052: PPUSH
23053: PPUSH
23054: PPUSH
23055: PPUSH
23056: PPUSH
23057: PPUSH
23058: PPUSH
23059: PPUSH
23060: PPUSH
23061: PPUSH
// result := false ;
23062: LD_ADDR_VAR 0 6
23066: PUSH
23067: LD_INT 0
23069: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23070: LD_VAR 0 1
23074: NOT
23075: PUSH
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 266
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: LD_INT 1
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: IN
23096: NOT
23097: OR
23098: PUSH
23099: LD_VAR 0 2
23103: NOT
23104: OR
23105: PUSH
23106: LD_VAR 0 5
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: LD_INT 1
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: LD_INT 3
23122: PUSH
23123: LD_INT 4
23125: PUSH
23126: LD_INT 5
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: IN
23137: NOT
23138: OR
23139: PUSH
23140: LD_VAR 0 3
23144: PPUSH
23145: LD_VAR 0 4
23149: PPUSH
23150: CALL_OW 488
23154: NOT
23155: OR
23156: IFFALSE 23160
// exit ;
23158: GO 23896
// side := GetSide ( depot ) ;
23160: LD_ADDR_VAR 0 9
23164: PUSH
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 255
23174: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23175: LD_VAR 0 9
23179: PPUSH
23180: LD_VAR 0 2
23184: PPUSH
23185: CALL 22669 0 2
23189: NOT
23190: IFFALSE 23194
// exit ;
23192: GO 23896
// pom := GetBase ( depot ) ;
23194: LD_ADDR_VAR 0 10
23198: PUSH
23199: LD_VAR 0 1
23203: PPUSH
23204: CALL_OW 274
23208: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23209: LD_ADDR_VAR 0 11
23213: PUSH
23214: LD_VAR 0 2
23218: PPUSH
23219: LD_VAR 0 1
23223: PPUSH
23224: CALL_OW 248
23228: PPUSH
23229: CALL_OW 450
23233: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23234: LD_VAR 0 10
23238: PPUSH
23239: LD_INT 1
23241: PPUSH
23242: CALL_OW 275
23246: PUSH
23247: LD_VAR 0 11
23251: PUSH
23252: LD_INT 1
23254: ARRAY
23255: GREATEREQUAL
23256: PUSH
23257: LD_VAR 0 10
23261: PPUSH
23262: LD_INT 2
23264: PPUSH
23265: CALL_OW 275
23269: PUSH
23270: LD_VAR 0 11
23274: PUSH
23275: LD_INT 2
23277: ARRAY
23278: GREATEREQUAL
23279: AND
23280: PUSH
23281: LD_VAR 0 10
23285: PPUSH
23286: LD_INT 3
23288: PPUSH
23289: CALL_OW 275
23293: PUSH
23294: LD_VAR 0 11
23298: PUSH
23299: LD_INT 3
23301: ARRAY
23302: GREATEREQUAL
23303: AND
23304: NOT
23305: IFFALSE 23309
// exit ;
23307: GO 23896
// if GetBType ( depot ) = b_depot then
23309: LD_VAR 0 1
23313: PPUSH
23314: CALL_OW 266
23318: PUSH
23319: LD_INT 0
23321: EQUAL
23322: IFFALSE 23334
// dist := 28 else
23324: LD_ADDR_VAR 0 14
23328: PUSH
23329: LD_INT 28
23331: ST_TO_ADDR
23332: GO 23342
// dist := 36 ;
23334: LD_ADDR_VAR 0 14
23338: PUSH
23339: LD_INT 36
23341: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23342: LD_VAR 0 1
23346: PPUSH
23347: LD_VAR 0 3
23351: PPUSH
23352: LD_VAR 0 4
23356: PPUSH
23357: CALL_OW 297
23361: PUSH
23362: LD_VAR 0 14
23366: GREATER
23367: IFFALSE 23371
// exit ;
23369: GO 23896
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23371: LD_ADDR_VAR 0 12
23375: PUSH
23376: LD_VAR 0 2
23380: PPUSH
23381: LD_VAR 0 3
23385: PPUSH
23386: LD_VAR 0 4
23390: PPUSH
23391: LD_VAR 0 5
23395: PPUSH
23396: LD_VAR 0 1
23400: PPUSH
23401: CALL_OW 248
23405: PPUSH
23406: LD_INT 0
23408: PPUSH
23409: CALL 23901 0 6
23413: ST_TO_ADDR
// if not hexes then
23414: LD_VAR 0 12
23418: NOT
23419: IFFALSE 23423
// exit ;
23421: GO 23896
// hex := GetHexInfo ( x , y ) ;
23423: LD_ADDR_VAR 0 15
23427: PUSH
23428: LD_VAR 0 3
23432: PPUSH
23433: LD_VAR 0 4
23437: PPUSH
23438: CALL_OW 546
23442: ST_TO_ADDR
// if hex [ 1 ] then
23443: LD_VAR 0 15
23447: PUSH
23448: LD_INT 1
23450: ARRAY
23451: IFFALSE 23455
// exit ;
23453: GO 23896
// height := hex [ 2 ] ;
23455: LD_ADDR_VAR 0 13
23459: PUSH
23460: LD_VAR 0 15
23464: PUSH
23465: LD_INT 2
23467: ARRAY
23468: ST_TO_ADDR
// for i = 1 to hexes do
23469: LD_ADDR_VAR 0 7
23473: PUSH
23474: DOUBLE
23475: LD_INT 1
23477: DEC
23478: ST_TO_ADDR
23479: LD_VAR 0 12
23483: PUSH
23484: FOR_TO
23485: IFFALSE 23815
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23487: LD_VAR 0 12
23491: PUSH
23492: LD_VAR 0 7
23496: ARRAY
23497: PUSH
23498: LD_INT 1
23500: ARRAY
23501: PPUSH
23502: LD_VAR 0 12
23506: PUSH
23507: LD_VAR 0 7
23511: ARRAY
23512: PUSH
23513: LD_INT 2
23515: ARRAY
23516: PPUSH
23517: CALL_OW 488
23521: NOT
23522: PUSH
23523: LD_VAR 0 12
23527: PUSH
23528: LD_VAR 0 7
23532: ARRAY
23533: PUSH
23534: LD_INT 1
23536: ARRAY
23537: PPUSH
23538: LD_VAR 0 12
23542: PUSH
23543: LD_VAR 0 7
23547: ARRAY
23548: PUSH
23549: LD_INT 2
23551: ARRAY
23552: PPUSH
23553: CALL_OW 428
23557: PUSH
23558: LD_INT 0
23560: GREATER
23561: OR
23562: PUSH
23563: LD_VAR 0 12
23567: PUSH
23568: LD_VAR 0 7
23572: ARRAY
23573: PUSH
23574: LD_INT 1
23576: ARRAY
23577: PPUSH
23578: LD_VAR 0 12
23582: PUSH
23583: LD_VAR 0 7
23587: ARRAY
23588: PUSH
23589: LD_INT 2
23591: ARRAY
23592: PPUSH
23593: CALL_OW 351
23597: OR
23598: IFFALSE 23604
// exit ;
23600: POP
23601: POP
23602: GO 23896
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23604: LD_ADDR_VAR 0 8
23608: PUSH
23609: LD_VAR 0 12
23613: PUSH
23614: LD_VAR 0 7
23618: ARRAY
23619: PUSH
23620: LD_INT 1
23622: ARRAY
23623: PPUSH
23624: LD_VAR 0 12
23628: PUSH
23629: LD_VAR 0 7
23633: ARRAY
23634: PUSH
23635: LD_INT 2
23637: ARRAY
23638: PPUSH
23639: CALL_OW 546
23643: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23644: LD_VAR 0 8
23648: PUSH
23649: LD_INT 1
23651: ARRAY
23652: PUSH
23653: LD_VAR 0 8
23657: PUSH
23658: LD_INT 2
23660: ARRAY
23661: PUSH
23662: LD_VAR 0 13
23666: PUSH
23667: LD_INT 2
23669: PLUS
23670: GREATER
23671: OR
23672: PUSH
23673: LD_VAR 0 8
23677: PUSH
23678: LD_INT 2
23680: ARRAY
23681: PUSH
23682: LD_VAR 0 13
23686: PUSH
23687: LD_INT 2
23689: MINUS
23690: LESS
23691: OR
23692: PUSH
23693: LD_VAR 0 8
23697: PUSH
23698: LD_INT 3
23700: ARRAY
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: LD_INT 8
23707: PUSH
23708: LD_INT 9
23710: PUSH
23711: LD_INT 10
23713: PUSH
23714: LD_INT 11
23716: PUSH
23717: LD_INT 12
23719: PUSH
23720: LD_INT 13
23722: PUSH
23723: LD_INT 16
23725: PUSH
23726: LD_INT 17
23728: PUSH
23729: LD_INT 18
23731: PUSH
23732: LD_INT 19
23734: PUSH
23735: LD_INT 20
23737: PUSH
23738: LD_INT 21
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: IN
23756: NOT
23757: OR
23758: PUSH
23759: LD_VAR 0 8
23763: PUSH
23764: LD_INT 5
23766: ARRAY
23767: NOT
23768: OR
23769: PUSH
23770: LD_VAR 0 8
23774: PUSH
23775: LD_INT 6
23777: ARRAY
23778: PUSH
23779: LD_INT 1
23781: PUSH
23782: LD_INT 2
23784: PUSH
23785: LD_INT 7
23787: PUSH
23788: LD_INT 9
23790: PUSH
23791: LD_INT 10
23793: PUSH
23794: LD_INT 11
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: IN
23805: NOT
23806: OR
23807: IFFALSE 23813
// exit ;
23809: POP
23810: POP
23811: GO 23896
// end ;
23813: GO 23484
23815: POP
23816: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23817: LD_VAR 0 9
23821: PPUSH
23822: LD_VAR 0 3
23826: PPUSH
23827: LD_VAR 0 4
23831: PPUSH
23832: LD_INT 20
23834: PPUSH
23835: CALL 15842 0 4
23839: PUSH
23840: LD_INT 4
23842: ARRAY
23843: IFFALSE 23847
// exit ;
23845: GO 23896
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23847: LD_VAR 0 2
23851: PUSH
23852: LD_INT 29
23854: PUSH
23855: LD_INT 30
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: IN
23862: PUSH
23863: LD_VAR 0 3
23867: PPUSH
23868: LD_VAR 0 4
23872: PPUSH
23873: LD_VAR 0 9
23877: PPUSH
23878: CALL_OW 440
23882: NOT
23883: AND
23884: IFFALSE 23888
// exit ;
23886: GO 23896
// result := true ;
23888: LD_ADDR_VAR 0 6
23892: PUSH
23893: LD_INT 1
23895: ST_TO_ADDR
// end ;
23896: LD_VAR 0 6
23900: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23901: LD_INT 0
23903: PPUSH
23904: PPUSH
23905: PPUSH
23906: PPUSH
23907: PPUSH
23908: PPUSH
23909: PPUSH
23910: PPUSH
23911: PPUSH
23912: PPUSH
23913: PPUSH
23914: PPUSH
23915: PPUSH
23916: PPUSH
23917: PPUSH
23918: PPUSH
23919: PPUSH
23920: PPUSH
23921: PPUSH
23922: PPUSH
23923: PPUSH
23924: PPUSH
23925: PPUSH
23926: PPUSH
23927: PPUSH
23928: PPUSH
23929: PPUSH
23930: PPUSH
23931: PPUSH
23932: PPUSH
23933: PPUSH
23934: PPUSH
23935: PPUSH
23936: PPUSH
23937: PPUSH
23938: PPUSH
23939: PPUSH
23940: PPUSH
23941: PPUSH
23942: PPUSH
23943: PPUSH
23944: PPUSH
23945: PPUSH
23946: PPUSH
23947: PPUSH
23948: PPUSH
23949: PPUSH
23950: PPUSH
23951: PPUSH
23952: PPUSH
23953: PPUSH
23954: PPUSH
23955: PPUSH
23956: PPUSH
23957: PPUSH
23958: PPUSH
23959: PPUSH
23960: PPUSH
// result = [ ] ;
23961: LD_ADDR_VAR 0 7
23965: PUSH
23966: EMPTY
23967: ST_TO_ADDR
// temp_list = [ ] ;
23968: LD_ADDR_VAR 0 9
23972: PUSH
23973: EMPTY
23974: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23975: LD_VAR 0 4
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: LD_INT 1
23985: PUSH
23986: LD_INT 2
23988: PUSH
23989: LD_INT 3
23991: PUSH
23992: LD_INT 4
23994: PUSH
23995: LD_INT 5
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: IN
24006: NOT
24007: PUSH
24008: LD_VAR 0 1
24012: PUSH
24013: LD_INT 0
24015: PUSH
24016: LD_INT 1
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: IN
24023: PUSH
24024: LD_VAR 0 5
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: LD_INT 2
24034: PUSH
24035: LD_INT 3
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: LIST
24042: IN
24043: NOT
24044: AND
24045: OR
24046: IFFALSE 24050
// exit ;
24048: GO 42441
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24050: LD_VAR 0 1
24054: PUSH
24055: LD_INT 6
24057: PUSH
24058: LD_INT 7
24060: PUSH
24061: LD_INT 8
24063: PUSH
24064: LD_INT 13
24066: PUSH
24067: LD_INT 12
24069: PUSH
24070: LD_INT 15
24072: PUSH
24073: LD_INT 11
24075: PUSH
24076: LD_INT 14
24078: PUSH
24079: LD_INT 10
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: IN
24093: IFFALSE 24103
// btype = b_lab ;
24095: LD_ADDR_VAR 0 1
24099: PUSH
24100: LD_INT 6
24102: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24103: LD_VAR 0 6
24107: PUSH
24108: LD_INT 0
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 2
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: LIST
24121: IN
24122: NOT
24123: PUSH
24124: LD_VAR 0 1
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: LD_INT 3
24140: PUSH
24141: LD_INT 6
24143: PUSH
24144: LD_INT 36
24146: PUSH
24147: LD_INT 4
24149: PUSH
24150: LD_INT 5
24152: PUSH
24153: LD_INT 31
24155: PUSH
24156: LD_INT 32
24158: PUSH
24159: LD_INT 33
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: IN
24175: NOT
24176: PUSH
24177: LD_VAR 0 6
24181: PUSH
24182: LD_INT 1
24184: EQUAL
24185: AND
24186: OR
24187: PUSH
24188: LD_VAR 0 1
24192: PUSH
24193: LD_INT 2
24195: PUSH
24196: LD_INT 3
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: IN
24203: NOT
24204: PUSH
24205: LD_VAR 0 6
24209: PUSH
24210: LD_INT 2
24212: EQUAL
24213: AND
24214: OR
24215: IFFALSE 24225
// mode = 0 ;
24217: LD_ADDR_VAR 0 6
24221: PUSH
24222: LD_INT 0
24224: ST_TO_ADDR
// case mode of 0 :
24225: LD_VAR 0 6
24229: PUSH
24230: LD_INT 0
24232: DOUBLE
24233: EQUAL
24234: IFTRUE 24238
24236: GO 35691
24238: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24239: LD_ADDR_VAR 0 11
24243: PUSH
24244: LD_INT 0
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 0
24256: PUSH
24257: LD_INT 1
24259: NEG
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 1
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 0
24287: PUSH
24288: LD_INT 1
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 1
24297: NEG
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 1
24308: NEG
24309: PUSH
24310: LD_INT 1
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: NEG
24321: PUSH
24322: LD_INT 2
24324: NEG
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: LD_INT 2
24335: NEG
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 1
24343: PUSH
24344: LD_INT 1
24346: NEG
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 1
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 0
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 1
24374: NEG
24375: PUSH
24376: LD_INT 1
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 1
24385: PUSH
24386: LD_INT 3
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: LD_INT 3
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 1
24405: NEG
24406: PUSH
24407: LD_INT 2
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24432: LD_ADDR_VAR 0 12
24436: PUSH
24437: LD_INT 0
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: LD_INT 1
24452: NEG
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 1
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: LD_INT 1
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 1
24490: NEG
24491: PUSH
24492: LD_INT 0
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 1
24501: NEG
24502: PUSH
24503: LD_INT 1
24505: NEG
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 2
24524: PUSH
24525: LD_INT 0
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 2
24534: PUSH
24535: LD_INT 1
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 1
24544: NEG
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 2
24555: NEG
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: NEG
24567: PUSH
24568: LD_INT 1
24570: NEG
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: PUSH
24576: LD_INT 2
24578: NEG
24579: PUSH
24580: LD_INT 1
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 3
24589: NEG
24590: PUSH
24591: LD_INT 0
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 3
24600: NEG
24601: PUSH
24602: LD_INT 1
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24628: LD_ADDR_VAR 0 13
24632: PUSH
24633: LD_INT 0
24635: PUSH
24636: LD_INT 0
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 0
24645: PUSH
24646: LD_INT 1
24648: NEG
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 1
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: LD_INT 1
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: NEG
24687: PUSH
24688: LD_INT 0
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 1
24697: NEG
24698: PUSH
24699: LD_INT 1
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 1
24709: NEG
24710: PUSH
24711: LD_INT 2
24713: NEG
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 2
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 2
24731: PUSH
24732: LD_INT 2
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 1
24741: PUSH
24742: LD_INT 2
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 2
24751: NEG
24752: PUSH
24753: LD_INT 1
24755: NEG
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 2
24763: NEG
24764: PUSH
24765: LD_INT 2
24767: NEG
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 2
24775: NEG
24776: PUSH
24777: LD_INT 3
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 3
24787: NEG
24788: PUSH
24789: LD_INT 2
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 3
24799: NEG
24800: PUSH
24801: LD_INT 3
24803: NEG
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24827: LD_ADDR_VAR 0 14
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: LD_INT 0
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: LD_INT 1
24847: NEG
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: LD_INT 1
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 1
24896: NEG
24897: PUSH
24898: LD_INT 1
24900: NEG
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 2
24912: NEG
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: LD_INT 2
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 1
24942: PUSH
24943: LD_INT 2
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: LD_INT 2
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: NEG
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 1
24973: NEG
24974: PUSH
24975: LD_INT 3
24977: NEG
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 0
24985: PUSH
24986: LD_INT 3
24988: NEG
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 1
24996: PUSH
24997: LD_INT 2
24999: NEG
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25023: LD_ADDR_VAR 0 15
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: LD_INT 0
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: LD_INT 1
25043: NEG
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: LD_INT 1
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 1
25081: NEG
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: NEG
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 2
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 2
25125: PUSH
25126: LD_INT 1
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 2
25146: NEG
25147: PUSH
25148: LD_INT 0
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 2
25157: NEG
25158: PUSH
25159: LD_INT 1
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 2
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 3
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 3
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25216: LD_ADDR_VAR 0 16
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: LD_INT 1
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 1
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: LD_INT 1
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: NEG
25286: PUSH
25287: LD_INT 1
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 1
25297: NEG
25298: PUSH
25299: LD_INT 2
25301: NEG
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: LD_INT 1
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 2
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 1
25329: PUSH
25330: LD_INT 2
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 2
25339: NEG
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 2
25351: NEG
25352: PUSH
25353: LD_INT 2
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 3
25363: PUSH
25364: LD_INT 2
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 3
25373: PUSH
25374: LD_INT 3
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 2
25383: PUSH
25384: LD_INT 3
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25409: LD_ADDR_VAR 0 17
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 0
25426: PUSH
25427: LD_INT 1
25429: NEG
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 1
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: LD_INT 1
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 1
25467: NEG
25468: PUSH
25469: LD_INT 0
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: LD_INT 1
25482: NEG
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: LD_INT 2
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: LD_INT 2
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: LD_INT 1
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 2
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 2
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 2
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: LD_INT 2
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 0
25564: PUSH
25565: LD_INT 2
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 1
25574: NEG
25575: PUSH
25576: LD_INT 1
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 2
25585: NEG
25586: PUSH
25587: LD_INT 0
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 2
25596: NEG
25597: PUSH
25598: LD_INT 1
25600: NEG
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 2
25608: NEG
25609: PUSH
25610: LD_INT 2
25612: NEG
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25639: LD_ADDR_VAR 0 18
25643: PUSH
25644: LD_INT 0
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: LD_INT 0
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 1
25697: NEG
25698: PUSH
25699: LD_INT 0
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 1
25708: NEG
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: PUSH
25722: LD_INT 2
25724: NEG
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 0
25732: PUSH
25733: LD_INT 2
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: LD_INT 1
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 2
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 2
25764: PUSH
25765: LD_INT 1
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 2
25774: PUSH
25775: LD_INT 2
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 1
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 0
25794: PUSH
25795: LD_INT 2
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: NEG
25805: PUSH
25806: LD_INT 1
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 2
25815: NEG
25816: PUSH
25817: LD_INT 0
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 2
25826: NEG
25827: PUSH
25828: LD_INT 1
25830: NEG
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 2
25838: NEG
25839: PUSH
25840: LD_INT 2
25842: NEG
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25869: LD_ADDR_VAR 0 19
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: LD_INT 1
25889: NEG
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: PUSH
25952: LD_INT 2
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: LD_INT 1
25976: NEG
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 2
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 2
26004: PUSH
26005: LD_INT 2
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: LD_INT 2
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 0
26024: PUSH
26025: LD_INT 2
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 1
26034: NEG
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 2
26045: NEG
26046: PUSH
26047: LD_INT 0
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 2
26056: NEG
26057: PUSH
26058: LD_INT 1
26060: NEG
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 2
26068: NEG
26069: PUSH
26070: LD_INT 2
26072: NEG
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26099: LD_ADDR_VAR 0 20
26103: PUSH
26104: LD_INT 0
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 0
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 1
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: LD_INT 1
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 0
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: LD_INT 0
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 1
26168: NEG
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: PUSH
26174: EMPTY
26175: LIST
26176: LIST
26177: PUSH
26178: LD_INT 1
26180: NEG
26181: PUSH
26182: LD_INT 2
26184: NEG
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 0
26192: PUSH
26193: LD_INT 2
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 1
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 2
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 2
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: LD_INT 2
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: LD_INT 2
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 0
26254: PUSH
26255: LD_INT 2
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 1
26264: NEG
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 2
26275: NEG
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 2
26286: NEG
26287: PUSH
26288: LD_INT 1
26290: NEG
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 2
26298: NEG
26299: PUSH
26300: LD_INT 2
26302: NEG
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: LIST
26327: LIST
26328: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26329: LD_ADDR_VAR 0 21
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 0
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 1
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 1
26367: PUSH
26368: LD_INT 1
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 0
26377: PUSH
26378: LD_INT 1
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 1
26387: NEG
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: NEG
26399: PUSH
26400: LD_INT 1
26402: NEG
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: NEG
26411: PUSH
26412: LD_INT 2
26414: NEG
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: LD_INT 2
26425: NEG
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 1
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 2
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: PUSH
26465: LD_INT 2
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: LD_INT 2
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 2
26505: NEG
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 2
26516: NEG
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 2
26528: NEG
26529: PUSH
26530: LD_INT 2
26532: NEG
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26559: LD_ADDR_VAR 0 22
26563: PUSH
26564: LD_INT 0
26566: PUSH
26567: LD_INT 0
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: LD_INT 1
26579: NEG
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: NEG
26618: PUSH
26619: LD_INT 0
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 1
26628: NEG
26629: PUSH
26630: LD_INT 1
26632: NEG
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 1
26640: NEG
26641: PUSH
26642: LD_INT 2
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: LD_INT 2
26655: NEG
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: LD_INT 1
26666: NEG
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 2
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 2
26684: PUSH
26685: LD_INT 1
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 2
26694: PUSH
26695: LD_INT 2
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: LD_INT 2
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: LD_INT 2
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: PUSH
26722: LD_INT 1
26724: NEG
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 2
26735: NEG
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 2
26746: NEG
26747: PUSH
26748: LD_INT 1
26750: NEG
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 2
26758: NEG
26759: PUSH
26760: LD_INT 2
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26789: LD_ADDR_VAR 0 23
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 1
26858: NEG
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: NEG
26871: PUSH
26872: LD_INT 2
26874: NEG
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PUSH
26880: LD_INT 0
26882: PUSH
26883: LD_INT 2
26885: NEG
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 2
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 2
26924: PUSH
26925: LD_INT 2
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: LD_INT 2
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: LD_INT 2
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: NEG
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 2
26965: NEG
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 2
26976: NEG
26977: PUSH
26978: LD_INT 1
26980: NEG
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 2
26988: NEG
26989: PUSH
26990: LD_INT 2
26992: NEG
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 2
27000: NEG
27001: PUSH
27002: LD_INT 3
27004: NEG
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: LD_INT 3
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: LD_INT 2
27027: NEG
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: LD_INT 1
27038: NEG
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27069: LD_ADDR_VAR 0 24
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: PUSH
27084: LD_INT 0
27086: PUSH
27087: LD_INT 1
27089: NEG
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 1
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 1
27138: NEG
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 2
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: LD_INT 2
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 2
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 2
27194: PUSH
27195: LD_INT 1
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 2
27204: PUSH
27205: LD_INT 2
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: PUSH
27215: LD_INT 2
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: LD_INT 1
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 2
27245: NEG
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 2
27256: NEG
27257: PUSH
27258: LD_INT 1
27260: NEG
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 2
27268: NEG
27269: PUSH
27270: LD_INT 2
27272: NEG
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: LD_INT 2
27283: NEG
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 2
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 3
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 3
27312: PUSH
27313: LD_INT 2
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27345: LD_ADDR_VAR 0 25
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 1
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: LD_INT 1
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: NEG
27404: PUSH
27405: LD_INT 0
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 1
27414: NEG
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 1
27426: NEG
27427: PUSH
27428: LD_INT 2
27430: NEG
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 0
27438: PUSH
27439: LD_INT 2
27441: NEG
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: LD_INT 1
27452: NEG
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 2
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 2
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 2
27480: PUSH
27481: LD_INT 2
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: LD_INT 2
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: LD_INT 2
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: NEG
27511: PUSH
27512: LD_INT 1
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 2
27521: NEG
27522: PUSH
27523: LD_INT 0
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: LD_INT 2
27532: NEG
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 2
27544: NEG
27545: PUSH
27546: LD_INT 2
27548: NEG
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 3
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 3
27566: PUSH
27567: LD_INT 2
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 2
27576: PUSH
27577: LD_INT 3
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: PUSH
27587: LD_INT 3
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27619: LD_ADDR_VAR 0 26
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 0
27636: PUSH
27637: LD_INT 1
27639: NEG
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 1
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: NEG
27689: PUSH
27690: LD_INT 1
27692: NEG
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 1
27700: NEG
27701: PUSH
27702: LD_INT 2
27704: NEG
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 0
27712: PUSH
27713: LD_INT 2
27715: NEG
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 2
27734: PUSH
27735: LD_INT 0
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 2
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 2
27754: PUSH
27755: LD_INT 2
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 1
27764: PUSH
27765: LD_INT 2
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: LD_INT 2
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 1
27784: NEG
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 2
27795: NEG
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 2
27806: NEG
27807: PUSH
27808: LD_INT 1
27810: NEG
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 2
27818: NEG
27819: PUSH
27820: LD_INT 2
27822: NEG
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: LD_INT 3
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: NEG
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27895: LD_ADDR_VAR 0 27
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: NEG
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 1
27976: NEG
27977: PUSH
27978: LD_INT 2
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: LD_INT 2
27991: NEG
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 2
28020: PUSH
28021: LD_INT 1
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: LD_INT 2
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: LD_INT 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: LD_INT 2
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 1
28060: NEG
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 2
28071: NEG
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 2
28082: NEG
28083: PUSH
28084: LD_INT 1
28086: NEG
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 2
28094: NEG
28095: PUSH
28096: LD_INT 2
28098: NEG
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 1
28106: NEG
28107: PUSH
28108: LD_INT 2
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: NEG
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 3
28128: NEG
28129: PUSH
28130: LD_INT 1
28132: NEG
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 3
28140: NEG
28141: PUSH
28142: LD_INT 2
28144: NEG
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28175: LD_ADDR_VAR 0 28
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: LD_INT 2
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: NEG
28341: PUSH
28342: LD_INT 1
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 2
28351: NEG
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: LD_INT 2
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 2
28386: NEG
28387: PUSH
28388: LD_INT 3
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: NEG
28399: PUSH
28400: LD_INT 3
28402: NEG
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 3
28410: NEG
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PUSH
28420: LD_INT 3
28422: NEG
28423: PUSH
28424: LD_INT 2
28426: NEG
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28457: LD_ADDR_VAR 0 29
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 0
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: LD_INT 1
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: LD_INT 1
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: LD_INT 0
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: NEG
28539: PUSH
28540: LD_INT 2
28542: NEG
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 0
28550: PUSH
28551: LD_INT 2
28553: NEG
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 1
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 2
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 2
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 1
28592: PUSH
28593: LD_INT 2
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 0
28602: PUSH
28603: LD_INT 2
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 1
28612: NEG
28613: PUSH
28614: LD_INT 1
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 2
28623: NEG
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 2
28635: NEG
28636: PUSH
28637: LD_INT 2
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 2
28647: NEG
28648: PUSH
28649: LD_INT 3
28651: NEG
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 3
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: LD_INT 3
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: LD_INT 2
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 3
28701: NEG
28702: PUSH
28703: LD_INT 2
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28736: LD_ADDR_VAR 0 30
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: LD_INT 1
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: NEG
28818: PUSH
28819: LD_INT 2
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: LD_INT 2
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 2
28851: PUSH
28852: LD_INT 0
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 2
28861: PUSH
28862: LD_INT 1
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 2
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: LD_INT 1
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 2
28902: NEG
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 2
28913: NEG
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 1
28925: NEG
28926: PUSH
28927: LD_INT 3
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: LD_INT 2
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 3
28948: PUSH
28949: LD_INT 2
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 2
28958: PUSH
28959: LD_INT 3
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 2
28968: NEG
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 3
28979: NEG
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29014: LD_ADDR_VAR 0 31
29018: PUSH
29019: LD_INT 0
29021: PUSH
29022: LD_INT 0
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: EMPTY
29037: LIST
29038: LIST
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 1
29072: NEG
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 1
29083: NEG
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 1
29095: NEG
29096: PUSH
29097: LD_INT 2
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 1
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 2
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 2
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: EMPTY
29133: LIST
29134: LIST
29135: PUSH
29136: LD_INT 2
29138: PUSH
29139: LD_INT 2
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: LD_INT 1
29148: PUSH
29149: LD_INT 2
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 0
29158: PUSH
29159: LD_INT 2
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PUSH
29166: LD_INT 1
29168: NEG
29169: PUSH
29170: LD_INT 1
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 2
29179: NEG
29180: PUSH
29181: LD_INT 1
29183: NEG
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 2
29191: NEG
29192: PUSH
29193: LD_INT 2
29195: NEG
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 2
29203: NEG
29204: PUSH
29205: LD_INT 3
29207: NEG
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: LD_INT 2
29215: PUSH
29216: LD_INT 1
29218: NEG
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 3
29226: PUSH
29227: LD_INT 1
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: LD_INT 3
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: LD_INT 2
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 3
29257: NEG
29258: PUSH
29259: LD_INT 2
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29292: LD_ADDR_VAR 0 32
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: LD_INT 0
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: LD_INT 1
29312: NEG
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 1
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 0
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 1
29350: NEG
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 1
29361: NEG
29362: PUSH
29363: LD_INT 1
29365: NEG
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: LD_INT 2
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: LD_INT 2
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 1
29396: PUSH
29397: LD_INT 1
29399: NEG
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 2
29407: PUSH
29408: LD_INT 1
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 2
29417: PUSH
29418: LD_INT 2
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: LD_INT 2
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: LD_INT 2
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: NEG
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 2
29458: NEG
29459: PUSH
29460: LD_INT 0
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 2
29469: NEG
29470: PUSH
29471: LD_INT 1
29473: NEG
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: LD_INT 3
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 2
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 3
29504: PUSH
29505: LD_INT 2
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: LD_INT 3
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 2
29524: NEG
29525: PUSH
29526: LD_INT 1
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 3
29535: NEG
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29570: LD_ADDR_VAR 0 33
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: LD_INT 0
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: LD_INT 1
29590: NEG
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: LD_INT 1
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 1
29639: NEG
29640: PUSH
29641: LD_INT 1
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 1
29651: NEG
29652: PUSH
29653: LD_INT 2
29655: NEG
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PUSH
29661: LD_INT 1
29663: PUSH
29664: LD_INT 1
29666: NEG
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 2
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 1
29694: PUSH
29695: LD_INT 2
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 2
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: LD_INT 1
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 2
29725: NEG
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 2
29736: NEG
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 2
29748: NEG
29749: PUSH
29750: LD_INT 2
29752: NEG
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 2
29760: NEG
29761: PUSH
29762: LD_INT 3
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 3
29783: PUSH
29784: LD_INT 1
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: LD_INT 3
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: NEG
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 3
29814: NEG
29815: PUSH
29816: LD_INT 2
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29849: LD_ADDR_VAR 0 34
29853: PUSH
29854: LD_INT 0
29856: PUSH
29857: LD_INT 0
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 0
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: LD_INT 0
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 1
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 1
29907: NEG
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: LD_INT 2
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: LD_INT 2
29945: NEG
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 1
29953: PUSH
29954: LD_INT 1
29956: NEG
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 2
29974: PUSH
29975: LD_INT 2
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: LD_INT 2
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: LD_INT 1
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 2
30005: NEG
30006: PUSH
30007: LD_INT 0
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 2
30016: NEG
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 2
30028: NEG
30029: PUSH
30030: LD_INT 2
30032: NEG
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: LD_INT 3
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: LD_INT 2
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 3
30063: PUSH
30064: LD_INT 2
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: LD_INT 3
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 2
30083: NEG
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 3
30094: NEG
30095: PUSH
30096: LD_INT 1
30098: NEG
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30129: LD_ADDR_VAR 0 35
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 0
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: LD_INT 1
30187: NEG
30188: PUSH
30189: LD_INT 0
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: LD_INT 1
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 2
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 2
30220: NEG
30221: PUSH
30222: LD_INT 1
30224: NEG
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30241: LD_ADDR_VAR 0 36
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 1
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: LD_INT 1
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 1
30299: NEG
30300: PUSH
30301: LD_INT 0
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 1
30322: NEG
30323: PUSH
30324: LD_INT 2
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 1
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30353: LD_ADDR_VAR 0 37
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: LD_INT 0
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: LD_INT 1
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 1
30445: NEG
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30465: LD_ADDR_VAR 0 38
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 1
30493: PUSH
30494: LD_INT 0
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 2
30546: PUSH
30547: LD_INT 1
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 2
30556: NEG
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30577: LD_ADDR_VAR 0 39
30581: PUSH
30582: LD_INT 0
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 1
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 0
30625: PUSH
30626: LD_INT 1
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: NEG
30636: PUSH
30637: LD_INT 0
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 1
30646: NEG
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: LD_INT 2
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 1
30670: PUSH
30671: LD_INT 2
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30689: LD_ADDR_VAR 0 40
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: LD_INT 1
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: LD_INT 1
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 1
30747: NEG
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: LD_INT 1
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 1
30781: NEG
30782: PUSH
30783: LD_INT 1
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30801: LD_ADDR_VAR 0 41
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 0
30818: PUSH
30819: LD_INT 1
30821: NEG
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 1
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: LD_INT 1
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 1
30859: NEG
30860: PUSH
30861: LD_INT 0
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 1
30870: NEG
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 1
30882: NEG
30883: PUSH
30884: LD_INT 2
30886: NEG
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 2
30905: PUSH
30906: LD_INT 0
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 2
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 2
30925: PUSH
30926: LD_INT 2
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: LD_INT 2
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 2
30956: NEG
30957: PUSH
30958: LD_INT 0
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 2
30967: NEG
30968: PUSH
30969: LD_INT 1
30971: NEG
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 2
30979: NEG
30980: PUSH
30981: LD_INT 2
30983: NEG
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: LD_INT 3
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 2
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 3
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 3
31024: PUSH
31025: LD_INT 1
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 3
31034: PUSH
31035: LD_INT 2
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: LD_INT 3
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: LD_INT 3
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 2
31064: NEG
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 3
31075: NEG
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 3
31086: NEG
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 3
31098: NEG
31099: PUSH
31100: LD_INT 2
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 3
31110: NEG
31111: PUSH
31112: LD_INT 3
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31151: LD_ADDR_VAR 0 42
31155: PUSH
31156: LD_INT 0
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: LD_INT 1
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 1
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 1
31220: NEG
31221: PUSH
31222: LD_INT 1
31224: NEG
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: LD_INT 2
31236: NEG
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: LD_INT 2
31247: NEG
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: LD_INT 1
31258: NEG
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 2
31266: PUSH
31267: LD_INT 1
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 2
31276: PUSH
31277: LD_INT 2
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: LD_INT 2
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 0
31296: PUSH
31297: LD_INT 2
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 1
31306: NEG
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 2
31317: NEG
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 2
31329: NEG
31330: PUSH
31331: LD_INT 2
31333: NEG
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 2
31341: NEG
31342: PUSH
31343: LD_INT 3
31345: NEG
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 1
31353: NEG
31354: PUSH
31355: LD_INT 3
31357: NEG
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 0
31365: PUSH
31366: LD_INT 3
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: LD_INT 2
31379: NEG
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 3
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 3
31397: PUSH
31398: LD_INT 3
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: LD_INT 3
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 3
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 3
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 2
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 3
31448: NEG
31449: PUSH
31450: LD_INT 2
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 3
31460: NEG
31461: PUSH
31462: LD_INT 3
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31501: LD_ADDR_VAR 0 43
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: LD_INT 1
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 0
31549: PUSH
31550: LD_INT 1
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: NEG
31560: PUSH
31561: LD_INT 0
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 1
31582: NEG
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 0
31594: PUSH
31595: LD_INT 2
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 1
31605: PUSH
31606: LD_INT 1
31608: NEG
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 2
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: LD_INT 2
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: NEG
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 2
31667: NEG
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 2
31678: NEG
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: LD_INT 3
31694: NEG
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: LD_INT 3
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: LD_INT 2
31716: NEG
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: PUSH
31722: LD_INT 2
31724: PUSH
31725: LD_INT 1
31727: NEG
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: PUSH
31733: LD_INT 3
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 3
31745: PUSH
31746: LD_INT 1
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 1
31755: PUSH
31756: LD_INT 3
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: LD_INT 3
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: PUSH
31777: LD_INT 2
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 2
31786: NEG
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 3
31797: NEG
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 3
31808: NEG
31809: PUSH
31810: LD_INT 1
31812: NEG
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31849: LD_ADDR_VAR 0 44
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 1
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 1
31993: NEG
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: LD_INT 0
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 2
32015: NEG
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 2
32027: NEG
32028: PUSH
32029: LD_INT 2
32031: NEG
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 2
32039: NEG
32040: PUSH
32041: LD_INT 3
32043: NEG
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 2
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 3
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 3
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 3
32082: PUSH
32083: LD_INT 2
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 3
32092: PUSH
32093: LD_INT 3
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 2
32102: PUSH
32103: LD_INT 3
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 2
32112: NEG
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 3
32123: NEG
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 3
32134: NEG
32135: PUSH
32136: LD_INT 1
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 3
32146: NEG
32147: PUSH
32148: LD_INT 2
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 3
32158: NEG
32159: PUSH
32160: LD_INT 3
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32199: LD_ADDR_VAR 0 45
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 0
32216: PUSH
32217: LD_INT 1
32219: NEG
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 1
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: LD_INT 1
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 0
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: NEG
32258: PUSH
32259: LD_INT 0
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: NEG
32269: PUSH
32270: LD_INT 1
32272: NEG
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 1
32280: NEG
32281: PUSH
32282: LD_INT 2
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: LD_INT 2
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 2
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 2
32324: PUSH
32325: LD_INT 2
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: LD_INT 2
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: LD_INT 2
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 1
32354: NEG
32355: PUSH
32356: LD_INT 1
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 2
32365: NEG
32366: PUSH
32367: LD_INT 1
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 2
32377: NEG
32378: PUSH
32379: LD_INT 2
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 2
32389: NEG
32390: PUSH
32391: LD_INT 3
32393: NEG
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: LD_INT 3
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: LD_INT 3
32416: NEG
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 1
32424: PUSH
32425: LD_INT 2
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 3
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 3
32445: PUSH
32446: LD_INT 3
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 2
32455: PUSH
32456: LD_INT 3
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 1
32465: PUSH
32466: LD_INT 3
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: LD_INT 3
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: LD_INT 2
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 3
32496: NEG
32497: PUSH
32498: LD_INT 2
32500: NEG
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 3
32508: NEG
32509: PUSH
32510: LD_INT 3
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32549: LD_ADDR_VAR 0 46
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 0
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 1
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: LD_INT 1
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: LD_INT 0
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: LD_INT 1
32622: NEG
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 1
32630: NEG
32631: PUSH
32632: LD_INT 2
32634: NEG
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: LD_INT 2
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 1
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 2
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: LD_INT 1
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: NEG
32716: PUSH
32717: LD_INT 0
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 2
32726: NEG
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 1
32738: NEG
32739: PUSH
32740: LD_INT 3
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: LD_INT 3
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 2
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 3
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 3
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: LD_INT 3
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 0
32813: PUSH
32814: LD_INT 3
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 2
32834: NEG
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 3
32845: NEG
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 3
32856: NEG
32857: PUSH
32858: LD_INT 1
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32897: LD_ADDR_VAR 0 47
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 1
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: LD_INT 1
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: NEG
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 1
32966: NEG
32967: PUSH
32968: LD_INT 1
32970: NEG
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 1
32978: NEG
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: LD_INT 2
32993: NEG
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: LD_INT 1
33004: NEG
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 2
33024: NEG
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33048: LD_ADDR_VAR 0 48
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: NEG
33130: PUSH
33131: LD_INT 2
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 2
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 2
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 2
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33195: LD_ADDR_VAR 0 49
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: LD_INT 0
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 2
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 1
33317: PUSH
33318: LD_INT 2
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33339: LD_ADDR_VAR 0 50
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: LD_INT 0
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: LD_INT 1
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 1
33408: NEG
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: NEG
33461: PUSH
33462: LD_INT 1
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33483: LD_ADDR_VAR 0 51
33487: PUSH
33488: LD_INT 0
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 0
33500: PUSH
33501: LD_INT 1
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 1
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: LD_INT 1
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 1
33541: NEG
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: LD_INT 1
33556: NEG
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: LD_INT 2
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: LD_INT 2
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: LD_INT 1
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 2
33595: NEG
33596: PUSH
33597: LD_INT 0
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 2
33606: NEG
33607: PUSH
33608: LD_INT 1
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33630: LD_ADDR_VAR 0 52
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 1
33699: NEG
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: LD_INT 2
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 2
33734: NEG
33735: PUSH
33736: LD_INT 0
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 2
33745: NEG
33746: PUSH
33747: LD_INT 1
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 2
33757: NEG
33758: PUSH
33759: LD_INT 2
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33781: LD_ADDR_VAR 0 53
33785: PUSH
33786: LD_INT 0
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 0
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 1
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 1
33839: NEG
33840: PUSH
33841: LD_INT 0
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 1
33850: NEG
33851: PUSH
33852: LD_INT 1
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 1
33862: NEG
33863: PUSH
33864: LD_INT 2
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: LD_INT 2
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 1
33885: PUSH
33886: LD_INT 1
33888: NEG
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 2
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 2
33906: PUSH
33907: LD_INT 1
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 2
33916: PUSH
33917: LD_INT 2
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: LD_INT 2
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: NEG
33947: PUSH
33948: LD_INT 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: NEG
33958: PUSH
33959: LD_INT 0
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 2
33968: NEG
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 2
33980: NEG
33981: PUSH
33982: LD_INT 2
33984: NEG
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34011: LD_ADDR_VAR 0 54
34015: PUSH
34016: LD_INT 0
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 0
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 1
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 0
34059: PUSH
34060: LD_INT 1
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: NEG
34070: PUSH
34071: LD_INT 0
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: LD_INT 2
34096: NEG
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 0
34104: PUSH
34105: LD_INT 2
34107: NEG
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PUSH
34113: LD_INT 1
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 2
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 2
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 1
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 1
34176: NEG
34177: PUSH
34178: LD_INT 1
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 2
34187: NEG
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 2
34198: NEG
34199: PUSH
34200: LD_INT 1
34202: NEG
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 2
34210: NEG
34211: PUSH
34212: LD_INT 2
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34241: LD_ADDR_VAR 0 55
34245: PUSH
34246: LD_INT 0
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 0
34289: PUSH
34290: LD_INT 1
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 1
34299: NEG
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 1
34310: NEG
34311: PUSH
34312: LD_INT 1
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 1
34322: NEG
34323: PUSH
34324: LD_INT 2
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: LD_INT 2
34337: NEG
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 2
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 2
34366: PUSH
34367: LD_INT 1
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: LD_INT 2
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: LD_INT 2
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: LD_INT 2
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 1
34406: NEG
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PUSH
34438: LD_INT 2
34440: NEG
34441: PUSH
34442: LD_INT 2
34444: NEG
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34471: LD_ADDR_VAR 0 56
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 1
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: LD_INT 1
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: NEG
34553: PUSH
34554: LD_INT 2
34556: NEG
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: LD_INT 2
34567: NEG
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 2
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: LD_INT 2
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: LD_INT 2
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: LD_INT 2
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 1
34636: NEG
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 2
34647: NEG
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 2
34658: NEG
34659: PUSH
34660: LD_INT 1
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 2
34670: NEG
34671: PUSH
34672: LD_INT 2
34674: NEG
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34701: LD_ADDR_VAR 0 57
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: LD_INT 1
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 1
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: LD_INT 1
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 1
34759: NEG
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: NEG
34783: PUSH
34784: LD_INT 2
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 2
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 1
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: LD_INT 0
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 2
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: LD_INT 2
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: LD_INT 2
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 1
34866: NEG
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 2
34877: NEG
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 2
34888: NEG
34889: PUSH
34890: LD_INT 1
34892: NEG
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 2
34900: NEG
34901: PUSH
34902: LD_INT 2
34904: NEG
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34931: LD_ADDR_VAR 0 58
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: EMPTY
34943: LIST
34944: LIST
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: LD_INT 1
34951: NEG
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: LD_INT 1
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: LD_INT 0
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: NEG
35001: PUSH
35002: LD_INT 1
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: LD_INT 2
35016: NEG
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: LD_INT 2
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: LD_INT 0
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 2
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 2
35066: PUSH
35067: LD_INT 2
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: LD_INT 2
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: LD_INT 2
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 1
35096: NEG
35097: PUSH
35098: LD_INT 1
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 2
35107: NEG
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 2
35118: NEG
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 2
35130: NEG
35131: PUSH
35132: LD_INT 2
35134: NEG
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35161: LD_ADDR_VAR 0 59
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35249: LD_ADDR_VAR 0 60
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 1
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 1
35318: NEG
35319: PUSH
35320: LD_INT 1
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35337: LD_ADDR_VAR 0 61
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 1
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: LD_INT 1
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: LD_INT 1
35410: NEG
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35425: LD_ADDR_VAR 0 62
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: PUSH
35464: LD_INT 1
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 1
35494: NEG
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35513: LD_ADDR_VAR 0 63
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: LD_INT 0
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 0
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: LD_INT 1
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: NEG
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 1
35582: NEG
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35601: LD_ADDR_VAR 0 64
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: LD_INT 0
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: LD_INT 1
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 0
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 1
35659: NEG
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: NEG
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: ST_TO_ADDR
// end ; 1 :
35689: GO 41586
35691: LD_INT 1
35693: DOUBLE
35694: EQUAL
35695: IFTRUE 35699
35697: GO 38322
35699: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35700: LD_ADDR_VAR 0 11
35704: PUSH
35705: LD_INT 1
35707: NEG
35708: PUSH
35709: LD_INT 3
35711: NEG
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: LD_INT 3
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: LD_INT 2
35733: NEG
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: LIST
35743: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35744: LD_ADDR_VAR 0 12
35748: PUSH
35749: LD_INT 2
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 3
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 3
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35785: LD_ADDR_VAR 0 13
35789: PUSH
35790: LD_INT 3
35792: PUSH
35793: LD_INT 2
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 3
35802: PUSH
35803: LD_INT 3
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 2
35812: PUSH
35813: LD_INT 3
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: LIST
35824: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35825: LD_ADDR_VAR 0 14
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: LD_INT 3
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 3
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: NEG
35853: PUSH
35854: LD_INT 2
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: LIST
35865: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35866: LD_ADDR_VAR 0 15
35870: PUSH
35871: LD_INT 2
35873: NEG
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 3
35884: NEG
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 3
35895: NEG
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35910: LD_ADDR_VAR 0 16
35914: PUSH
35915: LD_INT 2
35917: NEG
35918: PUSH
35919: LD_INT 3
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 3
35929: NEG
35930: PUSH
35931: LD_INT 2
35933: NEG
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 3
35941: NEG
35942: PUSH
35943: LD_INT 3
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: LIST
35955: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35956: LD_ADDR_VAR 0 17
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: LD_INT 3
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: LD_INT 3
35978: NEG
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 1
35986: PUSH
35987: LD_INT 2
35989: NEG
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36000: LD_ADDR_VAR 0 18
36004: PUSH
36005: LD_INT 2
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 3
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 3
36028: PUSH
36029: LD_INT 1
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: LIST
36040: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36041: LD_ADDR_VAR 0 19
36045: PUSH
36046: LD_INT 3
36048: PUSH
36049: LD_INT 2
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 3
36058: PUSH
36059: LD_INT 3
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 2
36068: PUSH
36069: LD_INT 3
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36081: LD_ADDR_VAR 0 20
36085: PUSH
36086: LD_INT 1
36088: PUSH
36089: LD_INT 3
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: LD_INT 3
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 1
36108: NEG
36109: PUSH
36110: LD_INT 2
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36122: LD_ADDR_VAR 0 21
36126: PUSH
36127: LD_INT 2
36129: NEG
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 3
36140: NEG
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 3
36151: NEG
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36166: LD_ADDR_VAR 0 22
36170: PUSH
36171: LD_INT 2
36173: NEG
36174: PUSH
36175: LD_INT 3
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 3
36185: NEG
36186: PUSH
36187: LD_INT 2
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 3
36197: NEG
36198: PUSH
36199: LD_INT 3
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: LIST
36211: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36212: LD_ADDR_VAR 0 23
36216: PUSH
36217: LD_INT 0
36219: PUSH
36220: LD_INT 3
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: LD_INT 4
36234: NEG
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: LD_INT 3
36245: NEG
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36256: LD_ADDR_VAR 0 24
36260: PUSH
36261: LD_INT 3
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 3
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 4
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36297: LD_ADDR_VAR 0 25
36301: PUSH
36302: LD_INT 3
36304: PUSH
36305: LD_INT 3
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 4
36314: PUSH
36315: LD_INT 3
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 3
36324: PUSH
36325: LD_INT 4
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: LIST
36336: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36337: LD_ADDR_VAR 0 26
36341: PUSH
36342: LD_INT 0
36344: PUSH
36345: LD_INT 3
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: LD_INT 4
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: LD_INT 3
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36378: LD_ADDR_VAR 0 27
36382: PUSH
36383: LD_INT 3
36385: NEG
36386: PUSH
36387: LD_INT 0
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 3
36396: NEG
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 4
36407: NEG
36408: PUSH
36409: LD_INT 1
36411: NEG
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36422: LD_ADDR_VAR 0 28
36426: PUSH
36427: LD_INT 3
36429: NEG
36430: PUSH
36431: LD_INT 3
36433: NEG
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 3
36441: NEG
36442: PUSH
36443: LD_INT 4
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 4
36453: NEG
36454: PUSH
36455: LD_INT 3
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36468: LD_ADDR_VAR 0 29
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PUSH
36477: LD_INT 3
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: LD_INT 3
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 1
36498: PUSH
36499: LD_INT 2
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 1
36509: NEG
36510: PUSH
36511: LD_INT 4
36513: NEG
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 0
36521: PUSH
36522: LD_INT 4
36524: NEG
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: LD_INT 3
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: LD_INT 5
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 0
36555: PUSH
36556: LD_INT 5
36558: NEG
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: LD_INT 4
36569: NEG
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 1
36577: NEG
36578: PUSH
36579: LD_INT 6
36581: NEG
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: LD_INT 6
36592: NEG
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: LD_INT 5
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36623: LD_ADDR_VAR 0 30
36627: PUSH
36628: LD_INT 2
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 3
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 3
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 3
36661: PUSH
36662: LD_INT 1
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 4
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 4
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 4
36692: PUSH
36693: LD_INT 1
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 5
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 5
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 5
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 6
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 6
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36766: LD_ADDR_VAR 0 31
36770: PUSH
36771: LD_INT 3
36773: PUSH
36774: LD_INT 2
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 3
36783: PUSH
36784: LD_INT 3
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 2
36793: PUSH
36794: LD_INT 3
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 4
36803: PUSH
36804: LD_INT 3
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 4
36813: PUSH
36814: LD_INT 4
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 3
36823: PUSH
36824: LD_INT 4
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 5
36833: PUSH
36834: LD_INT 4
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 5
36843: PUSH
36844: LD_INT 5
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 4
36853: PUSH
36854: LD_INT 5
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 6
36863: PUSH
36864: LD_INT 5
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 6
36873: PUSH
36874: LD_INT 6
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 5
36883: PUSH
36884: LD_INT 6
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36905: LD_ADDR_VAR 0 32
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: LD_INT 3
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 0
36922: PUSH
36923: LD_INT 3
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: NEG
36933: PUSH
36934: LD_INT 2
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: LD_INT 4
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: LD_INT 4
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: LD_INT 3
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: PUSH
36975: LD_INT 5
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: LD_INT 5
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: LD_INT 4
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 1
37005: PUSH
37006: LD_INT 6
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: LD_INT 6
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 1
37025: NEG
37026: PUSH
37027: LD_INT 5
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37048: LD_ADDR_VAR 0 33
37052: PUSH
37053: LD_INT 2
37055: NEG
37056: PUSH
37057: LD_INT 1
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 3
37066: NEG
37067: PUSH
37068: LD_INT 0
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: LD_INT 3
37077: NEG
37078: PUSH
37079: LD_INT 1
37081: NEG
37082: PUSH
37083: EMPTY
37084: LIST
37085: LIST
37086: PUSH
37087: LD_INT 3
37089: NEG
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 4
37100: NEG
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 4
37111: NEG
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 4
37123: NEG
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 5
37134: NEG
37135: PUSH
37136: LD_INT 0
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 5
37145: NEG
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 5
37157: NEG
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 6
37168: NEG
37169: PUSH
37170: LD_INT 0
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 6
37179: NEG
37180: PUSH
37181: LD_INT 1
37183: NEG
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37203: LD_ADDR_VAR 0 34
37207: PUSH
37208: LD_INT 2
37210: NEG
37211: PUSH
37212: LD_INT 3
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 3
37222: NEG
37223: PUSH
37224: LD_INT 2
37226: NEG
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 3
37234: NEG
37235: PUSH
37236: LD_INT 3
37238: NEG
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 3
37246: NEG
37247: PUSH
37248: LD_INT 4
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 4
37258: NEG
37259: PUSH
37260: LD_INT 3
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 4
37270: NEG
37271: PUSH
37272: LD_INT 4
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 4
37282: NEG
37283: PUSH
37284: LD_INT 5
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 5
37294: NEG
37295: PUSH
37296: LD_INT 4
37298: NEG
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 5
37306: NEG
37307: PUSH
37308: LD_INT 5
37310: NEG
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 5
37318: NEG
37319: PUSH
37320: LD_INT 6
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 6
37330: NEG
37331: PUSH
37332: LD_INT 5
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 6
37342: NEG
37343: PUSH
37344: LD_INT 6
37346: NEG
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37366: LD_ADDR_VAR 0 41
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: LD_INT 2
37376: NEG
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: LD_INT 3
37388: NEG
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: LIST
37409: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37410: LD_ADDR_VAR 0 42
37414: PUSH
37415: LD_INT 2
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 2
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 3
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37451: LD_ADDR_VAR 0 43
37455: PUSH
37456: LD_INT 2
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 3
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 2
37478: PUSH
37479: LD_INT 3
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37491: LD_ADDR_VAR 0 44
37495: PUSH
37496: LD_INT 0
37498: PUSH
37499: LD_INT 2
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: LD_INT 3
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: LIST
37531: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37532: LD_ADDR_VAR 0 45
37536: PUSH
37537: LD_INT 2
37539: NEG
37540: PUSH
37541: LD_INT 0
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 3
37561: NEG
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: LIST
37575: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37576: LD_ADDR_VAR 0 46
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: LD_INT 2
37587: NEG
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 2
37595: NEG
37596: PUSH
37597: LD_INT 3
37599: NEG
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 3
37607: NEG
37608: PUSH
37609: LD_INT 2
37611: NEG
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37622: LD_ADDR_VAR 0 47
37626: PUSH
37627: LD_INT 2
37629: NEG
37630: PUSH
37631: LD_INT 3
37633: NEG
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: NEG
37642: PUSH
37643: LD_INT 3
37645: NEG
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37655: LD_ADDR_VAR 0 48
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37686: LD_ADDR_VAR 0 49
37690: PUSH
37691: LD_INT 3
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 3
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37715: LD_ADDR_VAR 0 50
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: LD_INT 3
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: LD_INT 3
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37744: LD_ADDR_VAR 0 51
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37775: LD_ADDR_VAR 0 52
37779: PUSH
37780: LD_INT 3
37782: NEG
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 3
37794: NEG
37795: PUSH
37796: LD_INT 2
37798: NEG
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37808: LD_ADDR_VAR 0 53
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: LD_INT 3
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 0
37827: PUSH
37828: LD_INT 3
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: LD_INT 2
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: LIST
37851: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37852: LD_ADDR_VAR 0 54
37856: PUSH
37857: LD_INT 2
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 3
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 3
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: LIST
37892: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37893: LD_ADDR_VAR 0 55
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: LD_INT 2
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 3
37910: PUSH
37911: LD_INT 3
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: LD_INT 3
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: LIST
37932: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37933: LD_ADDR_VAR 0 56
37937: PUSH
37938: LD_INT 1
37940: PUSH
37941: LD_INT 3
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: LD_INT 3
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: NEG
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: LIST
37973: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37974: LD_ADDR_VAR 0 57
37978: PUSH
37979: LD_INT 2
37981: NEG
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 3
37992: NEG
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 3
38003: NEG
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: LIST
38017: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38018: LD_ADDR_VAR 0 58
38022: PUSH
38023: LD_INT 2
38025: NEG
38026: PUSH
38027: LD_INT 3
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 3
38037: NEG
38038: PUSH
38039: LD_INT 2
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 3
38049: NEG
38050: PUSH
38051: LD_INT 3
38053: NEG
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: LIST
38063: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38064: LD_ADDR_VAR 0 59
38068: PUSH
38069: LD_INT 1
38071: NEG
38072: PUSH
38073: LD_INT 2
38075: NEG
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: LD_INT 2
38086: NEG
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: LD_INT 1
38097: NEG
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: LIST
38107: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38108: LD_ADDR_VAR 0 60
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 2
38126: PUSH
38127: LD_INT 0
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38149: LD_ADDR_VAR 0 61
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: LD_INT 2
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38189: LD_ADDR_VAR 0 62
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: LD_INT 2
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: LIST
38229: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38230: LD_ADDR_VAR 0 63
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 2
38248: NEG
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 2
38259: NEG
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38274: LD_ADDR_VAR 0 64
38278: PUSH
38279: LD_INT 1
38281: NEG
38282: PUSH
38283: LD_INT 2
38285: NEG
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: LD_INT 1
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 2
38305: NEG
38306: PUSH
38307: LD_INT 2
38309: NEG
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: ST_TO_ADDR
// end ; 2 :
38320: GO 41586
38322: LD_INT 2
38324: DOUBLE
38325: EQUAL
38326: IFTRUE 38330
38328: GO 41585
38330: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38331: LD_ADDR_VAR 0 29
38335: PUSH
38336: LD_INT 4
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 4
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 5
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 5
38369: PUSH
38370: LD_INT 1
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 4
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 3
38389: PUSH
38390: LD_INT 0
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 3
38399: PUSH
38400: LD_INT 1
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 3
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 5
38421: PUSH
38422: LD_INT 2
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 3
38431: PUSH
38432: LD_INT 3
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 3
38441: PUSH
38442: LD_INT 2
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 4
38451: PUSH
38452: LD_INT 3
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 4
38461: PUSH
38462: LD_INT 4
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 3
38471: PUSH
38472: LD_INT 4
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 2
38481: PUSH
38482: LD_INT 3
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 4
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: PUSH
38512: LD_INT 4
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: LD_INT 4
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: LD_INT 3
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: LD_INT 4
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 5
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: LD_INT 5
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: LD_INT 4
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: NEG
38583: PUSH
38584: LD_INT 3
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: PUSH
38594: LD_INT 5
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: NEG
38604: PUSH
38605: LD_INT 3
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 3
38614: NEG
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 3
38625: NEG
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 2
38637: NEG
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 2
38648: NEG
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 3
38659: NEG
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 4
38670: NEG
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 4
38681: NEG
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 4
38693: NEG
38694: PUSH
38695: LD_INT 2
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 4
38716: NEG
38717: PUSH
38718: LD_INT 4
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 4
38728: NEG
38729: PUSH
38730: LD_INT 5
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 3
38740: NEG
38741: PUSH
38742: LD_INT 4
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 3
38752: NEG
38753: PUSH
38754: LD_INT 3
38756: NEG
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 4
38764: NEG
38765: PUSH
38766: LD_INT 3
38768: NEG
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 5
38776: NEG
38777: PUSH
38778: LD_INT 4
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 5
38788: NEG
38789: PUSH
38790: LD_INT 5
38792: NEG
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 3
38800: NEG
38801: PUSH
38802: LD_INT 5
38804: NEG
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 5
38812: NEG
38813: PUSH
38814: LD_INT 3
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38869: LD_ADDR_VAR 0 30
38873: PUSH
38874: LD_INT 4
38876: PUSH
38877: LD_INT 4
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 4
38886: PUSH
38887: LD_INT 3
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 5
38896: PUSH
38897: LD_INT 4
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 5
38906: PUSH
38907: LD_INT 5
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 4
38916: PUSH
38917: LD_INT 5
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 3
38926: PUSH
38927: LD_INT 4
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 3
38936: PUSH
38937: LD_INT 3
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 5
38946: PUSH
38947: LD_INT 3
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 3
38956: PUSH
38957: LD_INT 5
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 0
38966: PUSH
38967: LD_INT 3
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 0
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 1
38986: PUSH
38987: LD_INT 3
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: LD_INT 1
38996: PUSH
38997: LD_INT 4
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: LD_INT 4
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: LD_INT 3
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: LD_INT 4
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 2
39048: NEG
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 4
39059: NEG
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 4
39070: NEG
39071: PUSH
39072: LD_INT 1
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 3
39082: NEG
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 3
39093: NEG
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 4
39104: NEG
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 5
39115: NEG
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 5
39126: NEG
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 5
39138: NEG
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 3
39150: NEG
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 3
39161: NEG
39162: PUSH
39163: LD_INT 3
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 3
39173: NEG
39174: PUSH
39175: LD_INT 4
39177: NEG
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 2
39185: NEG
39186: PUSH
39187: LD_INT 3
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 2
39197: NEG
39198: PUSH
39199: LD_INT 2
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 3
39209: NEG
39210: PUSH
39211: LD_INT 2
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 4
39221: NEG
39222: PUSH
39223: LD_INT 3
39225: NEG
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 4
39233: NEG
39234: PUSH
39235: LD_INT 4
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 2
39245: NEG
39246: PUSH
39247: LD_INT 4
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 4
39257: NEG
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 4
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 5
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: LD_INT 4
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: LD_INT 3
39305: NEG
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 0
39313: PUSH
39314: LD_INT 3
39316: NEG
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: LD_INT 4
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: LD_INT 5
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: LD_INT 3
39351: NEG
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: LD_INT 5
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39416: LD_ADDR_VAR 0 31
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: LD_INT 4
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: LD_INT 3
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 4
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: LD_INT 5
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 0
39463: PUSH
39464: LD_INT 5
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: LD_INT 4
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: LD_INT 3
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 2
39495: PUSH
39496: LD_INT 5
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 2
39505: NEG
39506: PUSH
39507: LD_INT 3
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 3
39516: NEG
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 3
39527: NEG
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 2
39539: NEG
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 3
39561: NEG
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 4
39572: NEG
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 4
39583: NEG
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 4
39595: NEG
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 4
39618: NEG
39619: PUSH
39620: LD_INT 4
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 4
39630: NEG
39631: PUSH
39632: LD_INT 5
39634: NEG
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 3
39642: NEG
39643: PUSH
39644: LD_INT 4
39646: NEG
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 3
39654: NEG
39655: PUSH
39656: LD_INT 3
39658: NEG
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 4
39666: NEG
39667: PUSH
39668: LD_INT 3
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 5
39678: NEG
39679: PUSH
39680: LD_INT 4
39682: NEG
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 5
39690: NEG
39691: PUSH
39692: LD_INT 5
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 3
39702: NEG
39703: PUSH
39704: LD_INT 5
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 5
39714: NEG
39715: PUSH
39716: LD_INT 3
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 3
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 4
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 3
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: LD_INT 2
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 2
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 3
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: LD_INT 4
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: LD_INT 2
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: LD_INT 4
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 4
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 4
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 5
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 5
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 4
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 3
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 3
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 3
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 5
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39966: LD_ADDR_VAR 0 32
39970: PUSH
39971: LD_INT 4
39973: NEG
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 4
39984: NEG
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 3
39996: NEG
39997: PUSH
39998: LD_INT 0
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 3
40007: NEG
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 4
40018: NEG
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 5
40029: NEG
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 5
40040: NEG
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 5
40052: NEG
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 3
40064: NEG
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 3
40075: NEG
40076: PUSH
40077: LD_INT 3
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 3
40087: NEG
40088: PUSH
40089: LD_INT 4
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: LD_INT 3
40103: NEG
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: NEG
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 3
40123: NEG
40124: PUSH
40125: LD_INT 2
40127: NEG
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 4
40135: NEG
40136: PUSH
40137: LD_INT 3
40139: NEG
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 4
40147: NEG
40148: PUSH
40149: LD_INT 4
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: LD_INT 4
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 4
40171: NEG
40172: PUSH
40173: LD_INT 2
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 4
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 5
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 4
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: PUSH
40217: LD_INT 3
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 3
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: LD_INT 4
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 5
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 2
40262: PUSH
40263: LD_INT 3
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: NEG
40274: PUSH
40275: LD_INT 5
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 3
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 3
40295: PUSH
40296: LD_INT 1
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 4
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 4
40316: PUSH
40317: LD_INT 1
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 3
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 2
40336: PUSH
40337: LD_INT 0
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 2
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 4
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 4
40378: PUSH
40379: LD_INT 4
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 4
40388: PUSH
40389: LD_INT 3
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 5
40398: PUSH
40399: LD_INT 4
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 5
40408: PUSH
40409: LD_INT 5
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 4
40418: PUSH
40419: LD_INT 5
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 3
40428: PUSH
40429: LD_INT 4
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 3
40438: PUSH
40439: LD_INT 3
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 5
40448: PUSH
40449: LD_INT 3
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 3
40458: PUSH
40459: LD_INT 5
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40513: LD_ADDR_VAR 0 33
40517: PUSH
40518: LD_INT 4
40520: NEG
40521: PUSH
40522: LD_INT 4
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 4
40532: NEG
40533: PUSH
40534: LD_INT 5
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 3
40544: NEG
40545: PUSH
40546: LD_INT 4
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 3
40556: NEG
40557: PUSH
40558: LD_INT 3
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 4
40568: NEG
40569: PUSH
40570: LD_INT 3
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 5
40580: NEG
40581: PUSH
40582: LD_INT 4
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 5
40592: NEG
40593: PUSH
40594: LD_INT 5
40596: NEG
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 3
40604: NEG
40605: PUSH
40606: LD_INT 5
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 5
40616: NEG
40617: PUSH
40618: LD_INT 3
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: LD_INT 3
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: LD_INT 4
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 3
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 2
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: LD_INT 3
40687: NEG
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: LD_INT 4
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: LD_INT 2
40710: NEG
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: LD_INT 4
40722: NEG
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 4
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 4
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 5
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 5
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 4
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 3
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 3
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 3
40802: PUSH
40803: LD_INT 2
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 5
40813: PUSH
40814: LD_INT 2
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 3
40823: PUSH
40824: LD_INT 3
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 3
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 4
40843: PUSH
40844: LD_INT 3
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 4
40853: PUSH
40854: LD_INT 4
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 3
40863: PUSH
40864: LD_INT 4
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 3
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 4
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: PUSH
40904: LD_INT 4
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 4
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 0
40923: PUSH
40924: LD_INT 3
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 4
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 5
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 5
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: LD_INT 4
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: NEG
40975: PUSH
40976: LD_INT 3
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: LD_INT 5
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 2
40995: NEG
40996: PUSH
40997: LD_INT 3
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41051: LD_ADDR_VAR 0 34
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 4
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 5
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: LD_INT 4
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: LD_INT 3
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 3
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: LD_INT 4
41117: NEG
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: LD_INT 5
41129: NEG
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 2
41137: PUSH
41138: LD_INT 3
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: NEG
41149: PUSH
41150: LD_INT 5
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 3
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 3
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 4
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 4
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 3
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: LD_INT 0
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 2
41235: NEG
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 4
41243: PUSH
41244: LD_INT 2
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 4
41253: PUSH
41254: LD_INT 4
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 4
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 5
41273: PUSH
41274: LD_INT 4
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 5
41283: PUSH
41284: LD_INT 5
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 4
41293: PUSH
41294: LD_INT 5
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 3
41303: PUSH
41304: LD_INT 4
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 3
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 5
41323: PUSH
41324: LD_INT 3
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 3
41333: PUSH
41334: LD_INT 5
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 3
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 3
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: LD_INT 4
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 4
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 3
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: LD_INT 2
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: LD_INT 4
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 2
41425: NEG
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 4
41436: NEG
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 4
41447: NEG
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 3
41459: NEG
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 3
41470: NEG
41471: PUSH
41472: LD_INT 1
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 4
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 5
41492: NEG
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 5
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 5
41515: NEG
41516: PUSH
41517: LD_INT 2
41519: NEG
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 3
41527: NEG
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: ST_TO_ADDR
// end ; end ;
41583: GO 41586
41585: POP
// case btype of b_depot , b_warehouse :
41586: LD_VAR 0 1
41590: PUSH
41591: LD_INT 0
41593: DOUBLE
41594: EQUAL
41595: IFTRUE 41605
41597: LD_INT 1
41599: DOUBLE
41600: EQUAL
41601: IFTRUE 41605
41603: GO 41806
41605: POP
// case nation of nation_american :
41606: LD_VAR 0 5
41610: PUSH
41611: LD_INT 1
41613: DOUBLE
41614: EQUAL
41615: IFTRUE 41619
41617: GO 41675
41619: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41620: LD_ADDR_VAR 0 9
41624: PUSH
41625: LD_VAR 0 11
41629: PUSH
41630: LD_VAR 0 12
41634: PUSH
41635: LD_VAR 0 13
41639: PUSH
41640: LD_VAR 0 14
41644: PUSH
41645: LD_VAR 0 15
41649: PUSH
41650: LD_VAR 0 16
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: PUSH
41663: LD_VAR 0 4
41667: PUSH
41668: LD_INT 1
41670: PLUS
41671: ARRAY
41672: ST_TO_ADDR
41673: GO 41804
41675: LD_INT 2
41677: DOUBLE
41678: EQUAL
41679: IFTRUE 41683
41681: GO 41739
41683: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41684: LD_ADDR_VAR 0 9
41688: PUSH
41689: LD_VAR 0 17
41693: PUSH
41694: LD_VAR 0 18
41698: PUSH
41699: LD_VAR 0 19
41703: PUSH
41704: LD_VAR 0 20
41708: PUSH
41709: LD_VAR 0 21
41713: PUSH
41714: LD_VAR 0 22
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: PUSH
41727: LD_VAR 0 4
41731: PUSH
41732: LD_INT 1
41734: PLUS
41735: ARRAY
41736: ST_TO_ADDR
41737: GO 41804
41739: LD_INT 3
41741: DOUBLE
41742: EQUAL
41743: IFTRUE 41747
41745: GO 41803
41747: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41748: LD_ADDR_VAR 0 9
41752: PUSH
41753: LD_VAR 0 23
41757: PUSH
41758: LD_VAR 0 24
41762: PUSH
41763: LD_VAR 0 25
41767: PUSH
41768: LD_VAR 0 26
41772: PUSH
41773: LD_VAR 0 27
41777: PUSH
41778: LD_VAR 0 28
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: PUSH
41791: LD_VAR 0 4
41795: PUSH
41796: LD_INT 1
41798: PLUS
41799: ARRAY
41800: ST_TO_ADDR
41801: GO 41804
41803: POP
41804: GO 42359
41806: LD_INT 2
41808: DOUBLE
41809: EQUAL
41810: IFTRUE 41820
41812: LD_INT 3
41814: DOUBLE
41815: EQUAL
41816: IFTRUE 41820
41818: GO 41876
41820: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41821: LD_ADDR_VAR 0 9
41825: PUSH
41826: LD_VAR 0 29
41830: PUSH
41831: LD_VAR 0 30
41835: PUSH
41836: LD_VAR 0 31
41840: PUSH
41841: LD_VAR 0 32
41845: PUSH
41846: LD_VAR 0 33
41850: PUSH
41851: LD_VAR 0 34
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: PUSH
41864: LD_VAR 0 4
41868: PUSH
41869: LD_INT 1
41871: PLUS
41872: ARRAY
41873: ST_TO_ADDR
41874: GO 42359
41876: LD_INT 16
41878: DOUBLE
41879: EQUAL
41880: IFTRUE 41938
41882: LD_INT 17
41884: DOUBLE
41885: EQUAL
41886: IFTRUE 41938
41888: LD_INT 18
41890: DOUBLE
41891: EQUAL
41892: IFTRUE 41938
41894: LD_INT 19
41896: DOUBLE
41897: EQUAL
41898: IFTRUE 41938
41900: LD_INT 22
41902: DOUBLE
41903: EQUAL
41904: IFTRUE 41938
41906: LD_INT 20
41908: DOUBLE
41909: EQUAL
41910: IFTRUE 41938
41912: LD_INT 21
41914: DOUBLE
41915: EQUAL
41916: IFTRUE 41938
41918: LD_INT 23
41920: DOUBLE
41921: EQUAL
41922: IFTRUE 41938
41924: LD_INT 24
41926: DOUBLE
41927: EQUAL
41928: IFTRUE 41938
41930: LD_INT 25
41932: DOUBLE
41933: EQUAL
41934: IFTRUE 41938
41936: GO 41994
41938: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41939: LD_ADDR_VAR 0 9
41943: PUSH
41944: LD_VAR 0 35
41948: PUSH
41949: LD_VAR 0 36
41953: PUSH
41954: LD_VAR 0 37
41958: PUSH
41959: LD_VAR 0 38
41963: PUSH
41964: LD_VAR 0 39
41968: PUSH
41969: LD_VAR 0 40
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: PUSH
41982: LD_VAR 0 4
41986: PUSH
41987: LD_INT 1
41989: PLUS
41990: ARRAY
41991: ST_TO_ADDR
41992: GO 42359
41994: LD_INT 6
41996: DOUBLE
41997: EQUAL
41998: IFTRUE 42050
42000: LD_INT 7
42002: DOUBLE
42003: EQUAL
42004: IFTRUE 42050
42006: LD_INT 8
42008: DOUBLE
42009: EQUAL
42010: IFTRUE 42050
42012: LD_INT 13
42014: DOUBLE
42015: EQUAL
42016: IFTRUE 42050
42018: LD_INT 12
42020: DOUBLE
42021: EQUAL
42022: IFTRUE 42050
42024: LD_INT 15
42026: DOUBLE
42027: EQUAL
42028: IFTRUE 42050
42030: LD_INT 11
42032: DOUBLE
42033: EQUAL
42034: IFTRUE 42050
42036: LD_INT 14
42038: DOUBLE
42039: EQUAL
42040: IFTRUE 42050
42042: LD_INT 10
42044: DOUBLE
42045: EQUAL
42046: IFTRUE 42050
42048: GO 42106
42050: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42051: LD_ADDR_VAR 0 9
42055: PUSH
42056: LD_VAR 0 41
42060: PUSH
42061: LD_VAR 0 42
42065: PUSH
42066: LD_VAR 0 43
42070: PUSH
42071: LD_VAR 0 44
42075: PUSH
42076: LD_VAR 0 45
42080: PUSH
42081: LD_VAR 0 46
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: PUSH
42094: LD_VAR 0 4
42098: PUSH
42099: LD_INT 1
42101: PLUS
42102: ARRAY
42103: ST_TO_ADDR
42104: GO 42359
42106: LD_INT 36
42108: DOUBLE
42109: EQUAL
42110: IFTRUE 42114
42112: GO 42170
42114: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42115: LD_ADDR_VAR 0 9
42119: PUSH
42120: LD_VAR 0 47
42124: PUSH
42125: LD_VAR 0 48
42129: PUSH
42130: LD_VAR 0 49
42134: PUSH
42135: LD_VAR 0 50
42139: PUSH
42140: LD_VAR 0 51
42144: PUSH
42145: LD_VAR 0 52
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: PUSH
42158: LD_VAR 0 4
42162: PUSH
42163: LD_INT 1
42165: PLUS
42166: ARRAY
42167: ST_TO_ADDR
42168: GO 42359
42170: LD_INT 4
42172: DOUBLE
42173: EQUAL
42174: IFTRUE 42196
42176: LD_INT 5
42178: DOUBLE
42179: EQUAL
42180: IFTRUE 42196
42182: LD_INT 34
42184: DOUBLE
42185: EQUAL
42186: IFTRUE 42196
42188: LD_INT 37
42190: DOUBLE
42191: EQUAL
42192: IFTRUE 42196
42194: GO 42252
42196: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42197: LD_ADDR_VAR 0 9
42201: PUSH
42202: LD_VAR 0 53
42206: PUSH
42207: LD_VAR 0 54
42211: PUSH
42212: LD_VAR 0 55
42216: PUSH
42217: LD_VAR 0 56
42221: PUSH
42222: LD_VAR 0 57
42226: PUSH
42227: LD_VAR 0 58
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: PUSH
42240: LD_VAR 0 4
42244: PUSH
42245: LD_INT 1
42247: PLUS
42248: ARRAY
42249: ST_TO_ADDR
42250: GO 42359
42252: LD_INT 31
42254: DOUBLE
42255: EQUAL
42256: IFTRUE 42302
42258: LD_INT 32
42260: DOUBLE
42261: EQUAL
42262: IFTRUE 42302
42264: LD_INT 33
42266: DOUBLE
42267: EQUAL
42268: IFTRUE 42302
42270: LD_INT 27
42272: DOUBLE
42273: EQUAL
42274: IFTRUE 42302
42276: LD_INT 26
42278: DOUBLE
42279: EQUAL
42280: IFTRUE 42302
42282: LD_INT 28
42284: DOUBLE
42285: EQUAL
42286: IFTRUE 42302
42288: LD_INT 29
42290: DOUBLE
42291: EQUAL
42292: IFTRUE 42302
42294: LD_INT 30
42296: DOUBLE
42297: EQUAL
42298: IFTRUE 42302
42300: GO 42358
42302: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42303: LD_ADDR_VAR 0 9
42307: PUSH
42308: LD_VAR 0 59
42312: PUSH
42313: LD_VAR 0 60
42317: PUSH
42318: LD_VAR 0 61
42322: PUSH
42323: LD_VAR 0 62
42327: PUSH
42328: LD_VAR 0 63
42332: PUSH
42333: LD_VAR 0 64
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: PUSH
42346: LD_VAR 0 4
42350: PUSH
42351: LD_INT 1
42353: PLUS
42354: ARRAY
42355: ST_TO_ADDR
42356: GO 42359
42358: POP
// temp_list2 = [ ] ;
42359: LD_ADDR_VAR 0 10
42363: PUSH
42364: EMPTY
42365: ST_TO_ADDR
// for i in temp_list do
42366: LD_ADDR_VAR 0 8
42370: PUSH
42371: LD_VAR 0 9
42375: PUSH
42376: FOR_IN
42377: IFFALSE 42429
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42379: LD_ADDR_VAR 0 10
42383: PUSH
42384: LD_VAR 0 10
42388: PUSH
42389: LD_VAR 0 8
42393: PUSH
42394: LD_INT 1
42396: ARRAY
42397: PUSH
42398: LD_VAR 0 2
42402: PLUS
42403: PUSH
42404: LD_VAR 0 8
42408: PUSH
42409: LD_INT 2
42411: ARRAY
42412: PUSH
42413: LD_VAR 0 3
42417: PLUS
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: EMPTY
42424: LIST
42425: ADD
42426: ST_TO_ADDR
42427: GO 42376
42429: POP
42430: POP
// result = temp_list2 ;
42431: LD_ADDR_VAR 0 7
42435: PUSH
42436: LD_VAR 0 10
42440: ST_TO_ADDR
// end ;
42441: LD_VAR 0 7
42445: RET
// export function EnemyInRange ( unit , dist ) ; begin
42446: LD_INT 0
42448: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42449: LD_ADDR_VAR 0 3
42453: PUSH
42454: LD_VAR 0 1
42458: PPUSH
42459: CALL_OW 255
42463: PPUSH
42464: LD_VAR 0 1
42468: PPUSH
42469: CALL_OW 250
42473: PPUSH
42474: LD_VAR 0 1
42478: PPUSH
42479: CALL_OW 251
42483: PPUSH
42484: LD_VAR 0 2
42488: PPUSH
42489: CALL 15842 0 4
42493: PUSH
42494: LD_INT 4
42496: ARRAY
42497: ST_TO_ADDR
// end ;
42498: LD_VAR 0 3
42502: RET
// export function PlayerSeeMe ( unit ) ; begin
42503: LD_INT 0
42505: PPUSH
// result := See ( your_side , unit ) ;
42506: LD_ADDR_VAR 0 2
42510: PUSH
42511: LD_OWVAR 2
42515: PPUSH
42516: LD_VAR 0 1
42520: PPUSH
42521: CALL_OW 292
42525: ST_TO_ADDR
// end ;
42526: LD_VAR 0 2
42530: RET
// export function ReverseDir ( unit ) ; begin
42531: LD_INT 0
42533: PPUSH
// if not unit then
42534: LD_VAR 0 1
42538: NOT
42539: IFFALSE 42543
// exit ;
42541: GO 42566
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42543: LD_ADDR_VAR 0 2
42547: PUSH
42548: LD_VAR 0 1
42552: PPUSH
42553: CALL_OW 254
42557: PUSH
42558: LD_INT 3
42560: PLUS
42561: PUSH
42562: LD_INT 6
42564: MOD
42565: ST_TO_ADDR
// end ;
42566: LD_VAR 0 2
42570: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
42571: LD_INT 0
42573: PPUSH
42574: PPUSH
42575: PPUSH
42576: PPUSH
42577: PPUSH
// if not hexes then
42578: LD_VAR 0 2
42582: NOT
42583: IFFALSE 42587
// exit ;
42585: GO 42735
// dist := 9999 ;
42587: LD_ADDR_VAR 0 5
42591: PUSH
42592: LD_INT 9999
42594: ST_TO_ADDR
// for i = 1 to hexes do
42595: LD_ADDR_VAR 0 4
42599: PUSH
42600: DOUBLE
42601: LD_INT 1
42603: DEC
42604: ST_TO_ADDR
42605: LD_VAR 0 2
42609: PUSH
42610: FOR_TO
42611: IFFALSE 42723
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
42613: LD_VAR 0 1
42617: PPUSH
42618: LD_VAR 0 2
42622: PUSH
42623: LD_VAR 0 4
42627: ARRAY
42628: PUSH
42629: LD_INT 1
42631: ARRAY
42632: PPUSH
42633: LD_VAR 0 2
42637: PUSH
42638: LD_VAR 0 4
42642: ARRAY
42643: PUSH
42644: LD_INT 2
42646: ARRAY
42647: PPUSH
42648: CALL_OW 297
42652: PUSH
42653: LD_VAR 0 5
42657: LESS
42658: IFFALSE 42721
// begin hex := hexes [ i ] ;
42660: LD_ADDR_VAR 0 7
42664: PUSH
42665: LD_VAR 0 2
42669: PUSH
42670: LD_VAR 0 4
42674: ARRAY
42675: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42676: LD_ADDR_VAR 0 5
42680: PUSH
42681: LD_VAR 0 1
42685: PPUSH
42686: LD_VAR 0 2
42690: PUSH
42691: LD_VAR 0 4
42695: ARRAY
42696: PUSH
42697: LD_INT 1
42699: ARRAY
42700: PPUSH
42701: LD_VAR 0 2
42705: PUSH
42706: LD_VAR 0 4
42710: ARRAY
42711: PUSH
42712: LD_INT 2
42714: ARRAY
42715: PPUSH
42716: CALL_OW 297
42720: ST_TO_ADDR
// end ; end ;
42721: GO 42610
42723: POP
42724: POP
// result := hex ;
42725: LD_ADDR_VAR 0 3
42729: PUSH
42730: LD_VAR 0 7
42734: ST_TO_ADDR
// end ;
42735: LD_VAR 0 3
42739: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42740: LD_INT 0
42742: PPUSH
42743: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42744: LD_VAR 0 1
42748: NOT
42749: PUSH
42750: LD_VAR 0 1
42754: PUSH
42755: LD_INT 21
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 23
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PPUSH
42779: CALL_OW 69
42783: IN
42784: NOT
42785: OR
42786: IFFALSE 42790
// exit ;
42788: GO 42837
// for i = 1 to 3 do
42790: LD_ADDR_VAR 0 3
42794: PUSH
42795: DOUBLE
42796: LD_INT 1
42798: DEC
42799: ST_TO_ADDR
42800: LD_INT 3
42802: PUSH
42803: FOR_TO
42804: IFFALSE 42835
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42806: LD_VAR 0 1
42810: PPUSH
42811: CALL_OW 250
42815: PPUSH
42816: LD_VAR 0 1
42820: PPUSH
42821: CALL_OW 251
42825: PPUSH
42826: LD_INT 1
42828: PPUSH
42829: CALL_OW 453
42833: GO 42803
42835: POP
42836: POP
// end ;
42837: LD_VAR 0 2
42841: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42842: LD_INT 0
42844: PPUSH
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
42849: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
42850: LD_VAR 0 1
42854: NOT
42855: PUSH
42856: LD_VAR 0 2
42860: NOT
42861: OR
42862: PUSH
42863: LD_VAR 0 1
42867: PPUSH
42868: CALL_OW 314
42872: OR
42873: IFFALSE 42877
// exit ;
42875: GO 43318
// x := GetX ( enemy_unit ) ;
42877: LD_ADDR_VAR 0 7
42881: PUSH
42882: LD_VAR 0 2
42886: PPUSH
42887: CALL_OW 250
42891: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42892: LD_ADDR_VAR 0 8
42896: PUSH
42897: LD_VAR 0 2
42901: PPUSH
42902: CALL_OW 251
42906: ST_TO_ADDR
// if not x or not y then
42907: LD_VAR 0 7
42911: NOT
42912: PUSH
42913: LD_VAR 0 8
42917: NOT
42918: OR
42919: IFFALSE 42923
// exit ;
42921: GO 43318
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42923: LD_ADDR_VAR 0 6
42927: PUSH
42928: LD_VAR 0 7
42932: PPUSH
42933: LD_INT 0
42935: PPUSH
42936: LD_INT 4
42938: PPUSH
42939: CALL_OW 272
42943: PUSH
42944: LD_VAR 0 8
42948: PPUSH
42949: LD_INT 0
42951: PPUSH
42952: LD_INT 4
42954: PPUSH
42955: CALL_OW 273
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_VAR 0 7
42968: PPUSH
42969: LD_INT 1
42971: PPUSH
42972: LD_INT 4
42974: PPUSH
42975: CALL_OW 272
42979: PUSH
42980: LD_VAR 0 8
42984: PPUSH
42985: LD_INT 1
42987: PPUSH
42988: LD_INT 4
42990: PPUSH
42991: CALL_OW 273
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_VAR 0 7
43004: PPUSH
43005: LD_INT 2
43007: PPUSH
43008: LD_INT 4
43010: PPUSH
43011: CALL_OW 272
43015: PUSH
43016: LD_VAR 0 8
43020: PPUSH
43021: LD_INT 2
43023: PPUSH
43024: LD_INT 4
43026: PPUSH
43027: CALL_OW 273
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_VAR 0 7
43040: PPUSH
43041: LD_INT 3
43043: PPUSH
43044: LD_INT 4
43046: PPUSH
43047: CALL_OW 272
43051: PUSH
43052: LD_VAR 0 8
43056: PPUSH
43057: LD_INT 3
43059: PPUSH
43060: LD_INT 4
43062: PPUSH
43063: CALL_OW 273
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_VAR 0 7
43076: PPUSH
43077: LD_INT 4
43079: PPUSH
43080: LD_INT 4
43082: PPUSH
43083: CALL_OW 272
43087: PUSH
43088: LD_VAR 0 8
43092: PPUSH
43093: LD_INT 4
43095: PPUSH
43096: LD_INT 4
43098: PPUSH
43099: CALL_OW 273
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_VAR 0 7
43112: PPUSH
43113: LD_INT 5
43115: PPUSH
43116: LD_INT 4
43118: PPUSH
43119: CALL_OW 272
43123: PUSH
43124: LD_VAR 0 8
43128: PPUSH
43129: LD_INT 5
43131: PPUSH
43132: LD_INT 4
43134: PPUSH
43135: CALL_OW 273
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: ST_TO_ADDR
// for i = tmp downto 1 do
43152: LD_ADDR_VAR 0 4
43156: PUSH
43157: DOUBLE
43158: LD_VAR 0 6
43162: INC
43163: ST_TO_ADDR
43164: LD_INT 1
43166: PUSH
43167: FOR_DOWNTO
43168: IFFALSE 43269
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43170: LD_VAR 0 6
43174: PUSH
43175: LD_VAR 0 4
43179: ARRAY
43180: PUSH
43181: LD_INT 1
43183: ARRAY
43184: PPUSH
43185: LD_VAR 0 6
43189: PUSH
43190: LD_VAR 0 4
43194: ARRAY
43195: PUSH
43196: LD_INT 2
43198: ARRAY
43199: PPUSH
43200: CALL_OW 488
43204: NOT
43205: PUSH
43206: LD_VAR 0 6
43210: PUSH
43211: LD_VAR 0 4
43215: ARRAY
43216: PUSH
43217: LD_INT 1
43219: ARRAY
43220: PPUSH
43221: LD_VAR 0 6
43225: PUSH
43226: LD_VAR 0 4
43230: ARRAY
43231: PUSH
43232: LD_INT 2
43234: ARRAY
43235: PPUSH
43236: CALL_OW 428
43240: PUSH
43241: LD_INT 0
43243: NONEQUAL
43244: OR
43245: IFFALSE 43267
// tmp := Delete ( tmp , i ) ;
43247: LD_ADDR_VAR 0 6
43251: PUSH
43252: LD_VAR 0 6
43256: PPUSH
43257: LD_VAR 0 4
43261: PPUSH
43262: CALL_OW 3
43266: ST_TO_ADDR
43267: GO 43167
43269: POP
43270: POP
// j := GetClosestHex ( unit , tmp ) ;
43271: LD_ADDR_VAR 0 5
43275: PUSH
43276: LD_VAR 0 1
43280: PPUSH
43281: LD_VAR 0 6
43285: PPUSH
43286: CALL 42571 0 2
43290: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43291: LD_VAR 0 1
43295: PPUSH
43296: LD_VAR 0 5
43300: PUSH
43301: LD_INT 1
43303: ARRAY
43304: PPUSH
43305: LD_VAR 0 5
43309: PUSH
43310: LD_INT 2
43312: ARRAY
43313: PPUSH
43314: CALL_OW 111
// end ;
43318: LD_VAR 0 3
43322: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43323: LD_INT 0
43325: PPUSH
43326: PPUSH
43327: PPUSH
// uc_side = 0 ;
43328: LD_ADDR_OWVAR 20
43332: PUSH
43333: LD_INT 0
43335: ST_TO_ADDR
// uc_nation = 0 ;
43336: LD_ADDR_OWVAR 21
43340: PUSH
43341: LD_INT 0
43343: ST_TO_ADDR
// InitHc_All ( ) ;
43344: CALL_OW 584
// InitVc ;
43348: CALL_OW 20
// if mastodonts then
43352: LD_VAR 0 6
43356: IFFALSE 43423
// for i = 1 to mastodonts do
43358: LD_ADDR_VAR 0 11
43362: PUSH
43363: DOUBLE
43364: LD_INT 1
43366: DEC
43367: ST_TO_ADDR
43368: LD_VAR 0 6
43372: PUSH
43373: FOR_TO
43374: IFFALSE 43421
// begin vc_chassis := 31 ;
43376: LD_ADDR_OWVAR 37
43380: PUSH
43381: LD_INT 31
43383: ST_TO_ADDR
// vc_control := control_rider ;
43384: LD_ADDR_OWVAR 38
43388: PUSH
43389: LD_INT 4
43391: ST_TO_ADDR
// animal := CreateVehicle ;
43392: LD_ADDR_VAR 0 12
43396: PUSH
43397: CALL_OW 45
43401: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43402: LD_VAR 0 12
43406: PPUSH
43407: LD_VAR 0 8
43411: PPUSH
43412: LD_INT 0
43414: PPUSH
43415: CALL 45558 0 3
// end ;
43419: GO 43373
43421: POP
43422: POP
// if horses then
43423: LD_VAR 0 5
43427: IFFALSE 43494
// for i = 1 to horses do
43429: LD_ADDR_VAR 0 11
43433: PUSH
43434: DOUBLE
43435: LD_INT 1
43437: DEC
43438: ST_TO_ADDR
43439: LD_VAR 0 5
43443: PUSH
43444: FOR_TO
43445: IFFALSE 43492
// begin hc_class := 21 ;
43447: LD_ADDR_OWVAR 28
43451: PUSH
43452: LD_INT 21
43454: ST_TO_ADDR
// hc_gallery :=  ;
43455: LD_ADDR_OWVAR 33
43459: PUSH
43460: LD_STRING 
43462: ST_TO_ADDR
// animal := CreateHuman ;
43463: LD_ADDR_VAR 0 12
43467: PUSH
43468: CALL_OW 44
43472: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43473: LD_VAR 0 12
43477: PPUSH
43478: LD_VAR 0 8
43482: PPUSH
43483: LD_INT 0
43485: PPUSH
43486: CALL 45558 0 3
// end ;
43490: GO 43444
43492: POP
43493: POP
// if birds then
43494: LD_VAR 0 1
43498: IFFALSE 43565
// for i = 1 to birds do
43500: LD_ADDR_VAR 0 11
43504: PUSH
43505: DOUBLE
43506: LD_INT 1
43508: DEC
43509: ST_TO_ADDR
43510: LD_VAR 0 1
43514: PUSH
43515: FOR_TO
43516: IFFALSE 43563
// begin hc_class = 18 ;
43518: LD_ADDR_OWVAR 28
43522: PUSH
43523: LD_INT 18
43525: ST_TO_ADDR
// hc_gallery =  ;
43526: LD_ADDR_OWVAR 33
43530: PUSH
43531: LD_STRING 
43533: ST_TO_ADDR
// animal := CreateHuman ;
43534: LD_ADDR_VAR 0 12
43538: PUSH
43539: CALL_OW 44
43543: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43544: LD_VAR 0 12
43548: PPUSH
43549: LD_VAR 0 8
43553: PPUSH
43554: LD_INT 0
43556: PPUSH
43557: CALL 45558 0 3
// end ;
43561: GO 43515
43563: POP
43564: POP
// if tigers then
43565: LD_VAR 0 2
43569: IFFALSE 43653
// for i = 1 to tigers do
43571: LD_ADDR_VAR 0 11
43575: PUSH
43576: DOUBLE
43577: LD_INT 1
43579: DEC
43580: ST_TO_ADDR
43581: LD_VAR 0 2
43585: PUSH
43586: FOR_TO
43587: IFFALSE 43651
// begin hc_class = class_tiger ;
43589: LD_ADDR_OWVAR 28
43593: PUSH
43594: LD_INT 14
43596: ST_TO_ADDR
// hc_gallery =  ;
43597: LD_ADDR_OWVAR 33
43601: PUSH
43602: LD_STRING 
43604: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43605: LD_ADDR_OWVAR 35
43609: PUSH
43610: LD_INT 7
43612: NEG
43613: PPUSH
43614: LD_INT 7
43616: PPUSH
43617: CALL_OW 12
43621: ST_TO_ADDR
// animal := CreateHuman ;
43622: LD_ADDR_VAR 0 12
43626: PUSH
43627: CALL_OW 44
43631: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43632: LD_VAR 0 12
43636: PPUSH
43637: LD_VAR 0 8
43641: PPUSH
43642: LD_INT 0
43644: PPUSH
43645: CALL 45558 0 3
// end ;
43649: GO 43586
43651: POP
43652: POP
// if apemans then
43653: LD_VAR 0 3
43657: IFFALSE 43780
// for i = 1 to apemans do
43659: LD_ADDR_VAR 0 11
43663: PUSH
43664: DOUBLE
43665: LD_INT 1
43667: DEC
43668: ST_TO_ADDR
43669: LD_VAR 0 3
43673: PUSH
43674: FOR_TO
43675: IFFALSE 43778
// begin hc_class = class_apeman ;
43677: LD_ADDR_OWVAR 28
43681: PUSH
43682: LD_INT 12
43684: ST_TO_ADDR
// hc_gallery =  ;
43685: LD_ADDR_OWVAR 33
43689: PUSH
43690: LD_STRING 
43692: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43693: LD_ADDR_OWVAR 35
43697: PUSH
43698: LD_INT 2
43700: NEG
43701: PPUSH
43702: LD_INT 2
43704: PPUSH
43705: CALL_OW 12
43709: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43710: LD_ADDR_OWVAR 31
43714: PUSH
43715: LD_INT 1
43717: PPUSH
43718: LD_INT 3
43720: PPUSH
43721: CALL_OW 12
43725: PUSH
43726: LD_INT 1
43728: PPUSH
43729: LD_INT 3
43731: PPUSH
43732: CALL_OW 12
43736: PUSH
43737: LD_INT 0
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: ST_TO_ADDR
// animal := CreateHuman ;
43749: LD_ADDR_VAR 0 12
43753: PUSH
43754: CALL_OW 44
43758: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43759: LD_VAR 0 12
43763: PPUSH
43764: LD_VAR 0 8
43768: PPUSH
43769: LD_INT 0
43771: PPUSH
43772: CALL 45558 0 3
// end ;
43776: GO 43674
43778: POP
43779: POP
// if enchidnas then
43780: LD_VAR 0 4
43784: IFFALSE 43851
// for i = 1 to enchidnas do
43786: LD_ADDR_VAR 0 11
43790: PUSH
43791: DOUBLE
43792: LD_INT 1
43794: DEC
43795: ST_TO_ADDR
43796: LD_VAR 0 4
43800: PUSH
43801: FOR_TO
43802: IFFALSE 43849
// begin hc_class = 13 ;
43804: LD_ADDR_OWVAR 28
43808: PUSH
43809: LD_INT 13
43811: ST_TO_ADDR
// hc_gallery =  ;
43812: LD_ADDR_OWVAR 33
43816: PUSH
43817: LD_STRING 
43819: ST_TO_ADDR
// animal := CreateHuman ;
43820: LD_ADDR_VAR 0 12
43824: PUSH
43825: CALL_OW 44
43829: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43830: LD_VAR 0 12
43834: PPUSH
43835: LD_VAR 0 8
43839: PPUSH
43840: LD_INT 0
43842: PPUSH
43843: CALL 45558 0 3
// end ;
43847: GO 43801
43849: POP
43850: POP
// if fishes then
43851: LD_VAR 0 7
43855: IFFALSE 43922
// for i = 1 to fishes do
43857: LD_ADDR_VAR 0 11
43861: PUSH
43862: DOUBLE
43863: LD_INT 1
43865: DEC
43866: ST_TO_ADDR
43867: LD_VAR 0 7
43871: PUSH
43872: FOR_TO
43873: IFFALSE 43920
// begin hc_class = 20 ;
43875: LD_ADDR_OWVAR 28
43879: PUSH
43880: LD_INT 20
43882: ST_TO_ADDR
// hc_gallery =  ;
43883: LD_ADDR_OWVAR 33
43887: PUSH
43888: LD_STRING 
43890: ST_TO_ADDR
// animal := CreateHuman ;
43891: LD_ADDR_VAR 0 12
43895: PUSH
43896: CALL_OW 44
43900: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43901: LD_VAR 0 12
43905: PPUSH
43906: LD_VAR 0 9
43910: PPUSH
43911: LD_INT 0
43913: PPUSH
43914: CALL 45558 0 3
// end ;
43918: GO 43872
43920: POP
43921: POP
// end ;
43922: LD_VAR 0 10
43926: RET
// export function WantHeal ( sci , unit ) ; begin
43927: LD_INT 0
43929: PPUSH
// if GetTaskList ( sci ) > 0 then
43930: LD_VAR 0 1
43934: PPUSH
43935: CALL_OW 437
43939: PUSH
43940: LD_INT 0
43942: GREATER
43943: IFFALSE 44013
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43945: LD_VAR 0 1
43949: PPUSH
43950: CALL_OW 437
43954: PUSH
43955: LD_INT 1
43957: ARRAY
43958: PUSH
43959: LD_INT 1
43961: ARRAY
43962: PUSH
43963: LD_STRING l
43965: EQUAL
43966: PUSH
43967: LD_VAR 0 1
43971: PPUSH
43972: CALL_OW 437
43976: PUSH
43977: LD_INT 1
43979: ARRAY
43980: PUSH
43981: LD_INT 4
43983: ARRAY
43984: PUSH
43985: LD_VAR 0 2
43989: EQUAL
43990: AND
43991: IFFALSE 44003
// result := true else
43993: LD_ADDR_VAR 0 3
43997: PUSH
43998: LD_INT 1
44000: ST_TO_ADDR
44001: GO 44011
// result := false ;
44003: LD_ADDR_VAR 0 3
44007: PUSH
44008: LD_INT 0
44010: ST_TO_ADDR
// end else
44011: GO 44021
// result := false ;
44013: LD_ADDR_VAR 0 3
44017: PUSH
44018: LD_INT 0
44020: ST_TO_ADDR
// end ;
44021: LD_VAR 0 3
44025: RET
// export function HealTarget ( sci ) ; begin
44026: LD_INT 0
44028: PPUSH
// if not sci then
44029: LD_VAR 0 1
44033: NOT
44034: IFFALSE 44038
// exit ;
44036: GO 44103
// result := 0 ;
44038: LD_ADDR_VAR 0 2
44042: PUSH
44043: LD_INT 0
44045: ST_TO_ADDR
// if GetTaskList ( sci ) then
44046: LD_VAR 0 1
44050: PPUSH
44051: CALL_OW 437
44055: IFFALSE 44103
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44057: LD_VAR 0 1
44061: PPUSH
44062: CALL_OW 437
44066: PUSH
44067: LD_INT 1
44069: ARRAY
44070: PUSH
44071: LD_INT 1
44073: ARRAY
44074: PUSH
44075: LD_STRING l
44077: EQUAL
44078: IFFALSE 44103
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44080: LD_ADDR_VAR 0 2
44084: PUSH
44085: LD_VAR 0 1
44089: PPUSH
44090: CALL_OW 437
44094: PUSH
44095: LD_INT 1
44097: ARRAY
44098: PUSH
44099: LD_INT 4
44101: ARRAY
44102: ST_TO_ADDR
// end ;
44103: LD_VAR 0 2
44107: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44108: LD_INT 0
44110: PPUSH
44111: PPUSH
44112: PPUSH
44113: PPUSH
// if not base_units then
44114: LD_VAR 0 1
44118: NOT
44119: IFFALSE 44123
// exit ;
44121: GO 44210
// result := false ;
44123: LD_ADDR_VAR 0 2
44127: PUSH
44128: LD_INT 0
44130: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44131: LD_ADDR_VAR 0 5
44135: PUSH
44136: LD_VAR 0 1
44140: PPUSH
44141: LD_INT 21
44143: PUSH
44144: LD_INT 3
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PPUSH
44151: CALL_OW 72
44155: ST_TO_ADDR
// if not tmp then
44156: LD_VAR 0 5
44160: NOT
44161: IFFALSE 44165
// exit ;
44163: GO 44210
// for i in tmp do
44165: LD_ADDR_VAR 0 3
44169: PUSH
44170: LD_VAR 0 5
44174: PUSH
44175: FOR_IN
44176: IFFALSE 44208
// begin result := EnemyInRange ( i , 22 ) ;
44178: LD_ADDR_VAR 0 2
44182: PUSH
44183: LD_VAR 0 3
44187: PPUSH
44188: LD_INT 22
44190: PPUSH
44191: CALL 42446 0 2
44195: ST_TO_ADDR
// if result then
44196: LD_VAR 0 2
44200: IFFALSE 44206
// exit ;
44202: POP
44203: POP
44204: GO 44210
// end ;
44206: GO 44175
44208: POP
44209: POP
// end ;
44210: LD_VAR 0 2
44214: RET
// export function FilterByTag ( units , tag ) ; begin
44215: LD_INT 0
44217: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44218: LD_ADDR_VAR 0 3
44222: PUSH
44223: LD_VAR 0 1
44227: PPUSH
44228: LD_INT 120
44230: PUSH
44231: LD_VAR 0 2
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PPUSH
44240: CALL_OW 72
44244: ST_TO_ADDR
// end ;
44245: LD_VAR 0 3
44249: RET
// export function IsDriver ( un ) ; begin
44250: LD_INT 0
44252: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44253: LD_ADDR_VAR 0 2
44257: PUSH
44258: LD_VAR 0 1
44262: PUSH
44263: LD_INT 55
44265: PUSH
44266: EMPTY
44267: LIST
44268: PPUSH
44269: CALL_OW 69
44273: IN
44274: ST_TO_ADDR
// end ;
44275: LD_VAR 0 2
44279: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44280: LD_INT 0
44282: PPUSH
44283: PPUSH
// list := [ ] ;
44284: LD_ADDR_VAR 0 5
44288: PUSH
44289: EMPTY
44290: ST_TO_ADDR
// case d of 0 :
44291: LD_VAR 0 3
44295: PUSH
44296: LD_INT 0
44298: DOUBLE
44299: EQUAL
44300: IFTRUE 44304
44302: GO 44437
44304: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44305: LD_ADDR_VAR 0 5
44309: PUSH
44310: LD_VAR 0 1
44314: PUSH
44315: LD_INT 4
44317: MINUS
44318: PUSH
44319: LD_VAR 0 2
44323: PUSH
44324: LD_INT 4
44326: MINUS
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: LIST
44335: PUSH
44336: LD_VAR 0 1
44340: PUSH
44341: LD_INT 3
44343: MINUS
44344: PUSH
44345: LD_VAR 0 2
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: LIST
44357: PUSH
44358: LD_VAR 0 1
44362: PUSH
44363: LD_INT 4
44365: PLUS
44366: PUSH
44367: LD_VAR 0 2
44371: PUSH
44372: LD_INT 4
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: LIST
44379: PUSH
44380: LD_VAR 0 1
44384: PUSH
44385: LD_INT 3
44387: PLUS
44388: PUSH
44389: LD_VAR 0 2
44393: PUSH
44394: LD_INT 3
44396: PLUS
44397: PUSH
44398: LD_INT 5
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: PUSH
44406: LD_VAR 0 1
44410: PUSH
44411: LD_VAR 0 2
44415: PUSH
44416: LD_INT 4
44418: PLUS
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: LIST
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: ST_TO_ADDR
// end ; 1 :
44435: GO 45135
44437: LD_INT 1
44439: DOUBLE
44440: EQUAL
44441: IFTRUE 44445
44443: GO 44578
44445: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44446: LD_ADDR_VAR 0 5
44450: PUSH
44451: LD_VAR 0 1
44455: PUSH
44456: LD_VAR 0 2
44460: PUSH
44461: LD_INT 4
44463: MINUS
44464: PUSH
44465: LD_INT 3
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: PUSH
44473: LD_VAR 0 1
44477: PUSH
44478: LD_INT 3
44480: MINUS
44481: PUSH
44482: LD_VAR 0 2
44486: PUSH
44487: LD_INT 3
44489: MINUS
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: LIST
44498: PUSH
44499: LD_VAR 0 1
44503: PUSH
44504: LD_INT 4
44506: MINUS
44507: PUSH
44508: LD_VAR 0 2
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: LIST
44520: PUSH
44521: LD_VAR 0 1
44525: PUSH
44526: LD_VAR 0 2
44530: PUSH
44531: LD_INT 3
44533: PLUS
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: PUSH
44543: LD_VAR 0 1
44547: PUSH
44548: LD_INT 4
44550: PLUS
44551: PUSH
44552: LD_VAR 0 2
44556: PUSH
44557: LD_INT 4
44559: PLUS
44560: PUSH
44561: LD_INT 5
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: ST_TO_ADDR
// end ; 2 :
44576: GO 45135
44578: LD_INT 2
44580: DOUBLE
44581: EQUAL
44582: IFTRUE 44586
44584: GO 44715
44586: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44587: LD_ADDR_VAR 0 5
44591: PUSH
44592: LD_VAR 0 1
44596: PUSH
44597: LD_VAR 0 2
44601: PUSH
44602: LD_INT 3
44604: MINUS
44605: PUSH
44606: LD_INT 3
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: LIST
44613: PUSH
44614: LD_VAR 0 1
44618: PUSH
44619: LD_INT 4
44621: PLUS
44622: PUSH
44623: LD_VAR 0 2
44627: PUSH
44628: LD_INT 4
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: PUSH
44636: LD_VAR 0 1
44640: PUSH
44641: LD_VAR 0 2
44645: PUSH
44646: LD_INT 4
44648: PLUS
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: PUSH
44658: LD_VAR 0 1
44662: PUSH
44663: LD_INT 3
44665: MINUS
44666: PUSH
44667: LD_VAR 0 2
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: PUSH
44680: LD_VAR 0 1
44684: PUSH
44685: LD_INT 4
44687: MINUS
44688: PUSH
44689: LD_VAR 0 2
44693: PUSH
44694: LD_INT 4
44696: MINUS
44697: PUSH
44698: LD_INT 2
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: LIST
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: ST_TO_ADDR
// end ; 3 :
44713: GO 45135
44715: LD_INT 3
44717: DOUBLE
44718: EQUAL
44719: IFTRUE 44723
44721: GO 44856
44723: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44724: LD_ADDR_VAR 0 5
44728: PUSH
44729: LD_VAR 0 1
44733: PUSH
44734: LD_INT 3
44736: PLUS
44737: PUSH
44738: LD_VAR 0 2
44742: PUSH
44743: LD_INT 4
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: PUSH
44751: LD_VAR 0 1
44755: PUSH
44756: LD_INT 4
44758: PLUS
44759: PUSH
44760: LD_VAR 0 2
44764: PUSH
44765: LD_INT 4
44767: PLUS
44768: PUSH
44769: LD_INT 5
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: PUSH
44777: LD_VAR 0 1
44781: PUSH
44782: LD_INT 4
44784: MINUS
44785: PUSH
44786: LD_VAR 0 2
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: PUSH
44799: LD_VAR 0 1
44803: PUSH
44804: LD_VAR 0 2
44808: PUSH
44809: LD_INT 4
44811: MINUS
44812: PUSH
44813: LD_INT 3
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: PUSH
44821: LD_VAR 0 1
44825: PUSH
44826: LD_INT 3
44828: MINUS
44829: PUSH
44830: LD_VAR 0 2
44834: PUSH
44835: LD_INT 3
44837: MINUS
44838: PUSH
44839: LD_INT 2
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: LIST
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: ST_TO_ADDR
// end ; 4 :
44854: GO 45135
44856: LD_INT 4
44858: DOUBLE
44859: EQUAL
44860: IFTRUE 44864
44862: GO 44997
44864: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44865: LD_ADDR_VAR 0 5
44869: PUSH
44870: LD_VAR 0 1
44874: PUSH
44875: LD_VAR 0 2
44879: PUSH
44880: LD_INT 4
44882: PLUS
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: LIST
44891: PUSH
44892: LD_VAR 0 1
44896: PUSH
44897: LD_INT 3
44899: PLUS
44900: PUSH
44901: LD_VAR 0 2
44905: PUSH
44906: LD_INT 3
44908: PLUS
44909: PUSH
44910: LD_INT 5
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: PUSH
44918: LD_VAR 0 1
44922: PUSH
44923: LD_INT 4
44925: PLUS
44926: PUSH
44927: LD_VAR 0 2
44931: PUSH
44932: LD_INT 4
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: LIST
44939: PUSH
44940: LD_VAR 0 1
44944: PUSH
44945: LD_VAR 0 2
44949: PUSH
44950: LD_INT 3
44952: MINUS
44953: PUSH
44954: LD_INT 3
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: PUSH
44962: LD_VAR 0 1
44966: PUSH
44967: LD_INT 4
44969: MINUS
44970: PUSH
44971: LD_VAR 0 2
44975: PUSH
44976: LD_INT 4
44978: MINUS
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: ST_TO_ADDR
// end ; 5 :
44995: GO 45135
44997: LD_INT 5
44999: DOUBLE
45000: EQUAL
45001: IFTRUE 45005
45003: GO 45134
45005: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45006: LD_ADDR_VAR 0 5
45010: PUSH
45011: LD_VAR 0 1
45015: PUSH
45016: LD_INT 4
45018: MINUS
45019: PUSH
45020: LD_VAR 0 2
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: LIST
45032: PUSH
45033: LD_VAR 0 1
45037: PUSH
45038: LD_VAR 0 2
45042: PUSH
45043: LD_INT 4
45045: MINUS
45046: PUSH
45047: LD_INT 3
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: LIST
45054: PUSH
45055: LD_VAR 0 1
45059: PUSH
45060: LD_INT 4
45062: PLUS
45063: PUSH
45064: LD_VAR 0 2
45068: PUSH
45069: LD_INT 4
45071: PLUS
45072: PUSH
45073: LD_INT 5
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: LIST
45080: PUSH
45081: LD_VAR 0 1
45085: PUSH
45086: LD_INT 3
45088: PLUS
45089: PUSH
45090: LD_VAR 0 2
45094: PUSH
45095: LD_INT 4
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: PUSH
45103: LD_VAR 0 1
45107: PUSH
45108: LD_VAR 0 2
45112: PUSH
45113: LD_INT 3
45115: PLUS
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: LIST
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: ST_TO_ADDR
// end ; end ;
45132: GO 45135
45134: POP
// result := list ;
45135: LD_ADDR_VAR 0 4
45139: PUSH
45140: LD_VAR 0 5
45144: ST_TO_ADDR
// end ;
45145: LD_VAR 0 4
45149: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45150: LD_INT 0
45152: PPUSH
45153: PPUSH
45154: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45155: LD_VAR 0 1
45159: NOT
45160: PUSH
45161: LD_VAR 0 2
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 2
45171: PUSH
45172: LD_INT 3
45174: PUSH
45175: LD_INT 4
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: IN
45184: NOT
45185: OR
45186: IFFALSE 45190
// exit ;
45188: GO 45282
// tmp := [ ] ;
45190: LD_ADDR_VAR 0 5
45194: PUSH
45195: EMPTY
45196: ST_TO_ADDR
// for i in units do
45197: LD_ADDR_VAR 0 4
45201: PUSH
45202: LD_VAR 0 1
45206: PUSH
45207: FOR_IN
45208: IFFALSE 45251
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
45210: LD_ADDR_VAR 0 5
45214: PUSH
45215: LD_VAR 0 5
45219: PPUSH
45220: LD_VAR 0 5
45224: PUSH
45225: LD_INT 1
45227: PLUS
45228: PPUSH
45229: LD_VAR 0 4
45233: PPUSH
45234: LD_VAR 0 2
45238: PPUSH
45239: CALL_OW 259
45243: PPUSH
45244: CALL_OW 2
45248: ST_TO_ADDR
45249: GO 45207
45251: POP
45252: POP
// if not tmp then
45253: LD_VAR 0 5
45257: NOT
45258: IFFALSE 45262
// exit ;
45260: GO 45282
// result := SortListByListDesc ( units , tmp ) ;
45262: LD_ADDR_VAR 0 3
45266: PUSH
45267: LD_VAR 0 1
45271: PPUSH
45272: LD_VAR 0 5
45276: PPUSH
45277: CALL_OW 77
45281: ST_TO_ADDR
// end ;
45282: LD_VAR 0 3
45286: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45287: LD_INT 0
45289: PPUSH
45290: PPUSH
45291: PPUSH
// result := false ;
45292: LD_ADDR_VAR 0 3
45296: PUSH
45297: LD_INT 0
45299: ST_TO_ADDR
// x := GetX ( building ) ;
45300: LD_ADDR_VAR 0 4
45304: PUSH
45305: LD_VAR 0 2
45309: PPUSH
45310: CALL_OW 250
45314: ST_TO_ADDR
// y := GetY ( building ) ;
45315: LD_ADDR_VAR 0 5
45319: PUSH
45320: LD_VAR 0 2
45324: PPUSH
45325: CALL_OW 251
45329: ST_TO_ADDR
// if not building or not x or not y then
45330: LD_VAR 0 2
45334: NOT
45335: PUSH
45336: LD_VAR 0 4
45340: NOT
45341: OR
45342: PUSH
45343: LD_VAR 0 5
45347: NOT
45348: OR
45349: IFFALSE 45353
// exit ;
45351: GO 45445
// if GetTaskList ( unit ) then
45353: LD_VAR 0 1
45357: PPUSH
45358: CALL_OW 437
45362: IFFALSE 45445
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45364: LD_STRING e
45366: PUSH
45367: LD_VAR 0 1
45371: PPUSH
45372: CALL_OW 437
45376: PUSH
45377: LD_INT 1
45379: ARRAY
45380: PUSH
45381: LD_INT 1
45383: ARRAY
45384: EQUAL
45385: PUSH
45386: LD_VAR 0 4
45390: PUSH
45391: LD_VAR 0 1
45395: PPUSH
45396: CALL_OW 437
45400: PUSH
45401: LD_INT 1
45403: ARRAY
45404: PUSH
45405: LD_INT 2
45407: ARRAY
45408: EQUAL
45409: AND
45410: PUSH
45411: LD_VAR 0 5
45415: PUSH
45416: LD_VAR 0 1
45420: PPUSH
45421: CALL_OW 437
45425: PUSH
45426: LD_INT 1
45428: ARRAY
45429: PUSH
45430: LD_INT 3
45432: ARRAY
45433: EQUAL
45434: AND
45435: IFFALSE 45445
// result := true end ;
45437: LD_ADDR_VAR 0 3
45441: PUSH
45442: LD_INT 1
45444: ST_TO_ADDR
// end ;
45445: LD_VAR 0 3
45449: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45450: LD_INT 0
45452: PPUSH
// result := false ;
45453: LD_ADDR_VAR 0 4
45457: PUSH
45458: LD_INT 0
45460: ST_TO_ADDR
// if GetTaskList ( unit ) then
45461: LD_VAR 0 1
45465: PPUSH
45466: CALL_OW 437
45470: IFFALSE 45553
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45472: LD_STRING M
45474: PUSH
45475: LD_VAR 0 1
45479: PPUSH
45480: CALL_OW 437
45484: PUSH
45485: LD_INT 1
45487: ARRAY
45488: PUSH
45489: LD_INT 1
45491: ARRAY
45492: EQUAL
45493: PUSH
45494: LD_VAR 0 2
45498: PUSH
45499: LD_VAR 0 1
45503: PPUSH
45504: CALL_OW 437
45508: PUSH
45509: LD_INT 1
45511: ARRAY
45512: PUSH
45513: LD_INT 2
45515: ARRAY
45516: EQUAL
45517: AND
45518: PUSH
45519: LD_VAR 0 3
45523: PUSH
45524: LD_VAR 0 1
45528: PPUSH
45529: CALL_OW 437
45533: PUSH
45534: LD_INT 1
45536: ARRAY
45537: PUSH
45538: LD_INT 3
45540: ARRAY
45541: EQUAL
45542: AND
45543: IFFALSE 45553
// result := true ;
45545: LD_ADDR_VAR 0 4
45549: PUSH
45550: LD_INT 1
45552: ST_TO_ADDR
// end ; end ;
45553: LD_VAR 0 4
45557: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45558: LD_INT 0
45560: PPUSH
45561: PPUSH
45562: PPUSH
45563: PPUSH
// if not unit or not area then
45564: LD_VAR 0 1
45568: NOT
45569: PUSH
45570: LD_VAR 0 2
45574: NOT
45575: OR
45576: IFFALSE 45580
// exit ;
45578: GO 45744
// tmp := AreaToList ( area , i ) ;
45580: LD_ADDR_VAR 0 6
45584: PUSH
45585: LD_VAR 0 2
45589: PPUSH
45590: LD_VAR 0 5
45594: PPUSH
45595: CALL_OW 517
45599: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45600: LD_ADDR_VAR 0 5
45604: PUSH
45605: DOUBLE
45606: LD_INT 1
45608: DEC
45609: ST_TO_ADDR
45610: LD_VAR 0 6
45614: PUSH
45615: LD_INT 1
45617: ARRAY
45618: PUSH
45619: FOR_TO
45620: IFFALSE 45742
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45622: LD_ADDR_VAR 0 7
45626: PUSH
45627: LD_VAR 0 6
45631: PUSH
45632: LD_INT 1
45634: ARRAY
45635: PUSH
45636: LD_VAR 0 5
45640: ARRAY
45641: PUSH
45642: LD_VAR 0 6
45646: PUSH
45647: LD_INT 2
45649: ARRAY
45650: PUSH
45651: LD_VAR 0 5
45655: ARRAY
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
45661: LD_VAR 0 7
45665: PUSH
45666: LD_INT 1
45668: ARRAY
45669: PPUSH
45670: LD_VAR 0 7
45674: PUSH
45675: LD_INT 2
45677: ARRAY
45678: PPUSH
45679: CALL_OW 428
45683: PUSH
45684: LD_INT 0
45686: EQUAL
45687: IFFALSE 45740
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45689: LD_VAR 0 1
45693: PPUSH
45694: LD_VAR 0 7
45698: PUSH
45699: LD_INT 1
45701: ARRAY
45702: PPUSH
45703: LD_VAR 0 7
45707: PUSH
45708: LD_INT 2
45710: ARRAY
45711: PPUSH
45712: LD_VAR 0 3
45716: PPUSH
45717: CALL_OW 48
// result := IsPlaced ( unit ) ;
45721: LD_ADDR_VAR 0 4
45725: PUSH
45726: LD_VAR 0 1
45730: PPUSH
45731: CALL_OW 305
45735: ST_TO_ADDR
// exit ;
45736: POP
45737: POP
45738: GO 45744
// end ; end ;
45740: GO 45619
45742: POP
45743: POP
// end ;
45744: LD_VAR 0 4
45748: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45749: LD_INT 0
45751: PPUSH
45752: PPUSH
45753: PPUSH
// if not side or side > 8 then
45754: LD_VAR 0 1
45758: NOT
45759: PUSH
45760: LD_VAR 0 1
45764: PUSH
45765: LD_INT 8
45767: GREATER
45768: OR
45769: IFFALSE 45773
// exit ;
45771: GO 45960
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45773: LD_ADDR_VAR 0 4
45777: PUSH
45778: LD_INT 22
45780: PUSH
45781: LD_VAR 0 1
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 21
45792: PUSH
45793: LD_INT 3
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PPUSH
45804: CALL_OW 69
45808: ST_TO_ADDR
// if not tmp then
45809: LD_VAR 0 4
45813: NOT
45814: IFFALSE 45818
// exit ;
45816: GO 45960
// enable_addtolog := true ;
45818: LD_ADDR_OWVAR 81
45822: PUSH
45823: LD_INT 1
45825: ST_TO_ADDR
// AddToLog ( [ ) ;
45826: LD_STRING [
45828: PPUSH
45829: CALL_OW 561
// for i in tmp do
45833: LD_ADDR_VAR 0 3
45837: PUSH
45838: LD_VAR 0 4
45842: PUSH
45843: FOR_IN
45844: IFFALSE 45951
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45846: LD_STRING [
45848: PUSH
45849: LD_VAR 0 3
45853: PPUSH
45854: CALL_OW 266
45858: STR
45859: PUSH
45860: LD_STRING , 
45862: STR
45863: PUSH
45864: LD_VAR 0 3
45868: PPUSH
45869: CALL_OW 250
45873: STR
45874: PUSH
45875: LD_STRING , 
45877: STR
45878: PUSH
45879: LD_VAR 0 3
45883: PPUSH
45884: CALL_OW 251
45888: STR
45889: PUSH
45890: LD_STRING , 
45892: STR
45893: PUSH
45894: LD_VAR 0 3
45898: PPUSH
45899: CALL_OW 254
45903: STR
45904: PUSH
45905: LD_STRING , 
45907: STR
45908: PUSH
45909: LD_VAR 0 3
45913: PPUSH
45914: LD_INT 1
45916: PPUSH
45917: CALL_OW 268
45921: STR
45922: PUSH
45923: LD_STRING , 
45925: STR
45926: PUSH
45927: LD_VAR 0 3
45931: PPUSH
45932: LD_INT 2
45934: PPUSH
45935: CALL_OW 268
45939: STR
45940: PUSH
45941: LD_STRING ],
45943: STR
45944: PPUSH
45945: CALL_OW 561
// end ;
45949: GO 45843
45951: POP
45952: POP
// AddToLog ( ]; ) ;
45953: LD_STRING ];
45955: PPUSH
45956: CALL_OW 561
// end ;
45960: LD_VAR 0 2
45964: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45965: LD_INT 0
45967: PPUSH
45968: PPUSH
45969: PPUSH
45970: PPUSH
45971: PPUSH
// if not area or not rate or not max then
45972: LD_VAR 0 1
45976: NOT
45977: PUSH
45978: LD_VAR 0 2
45982: NOT
45983: OR
45984: PUSH
45985: LD_VAR 0 4
45989: NOT
45990: OR
45991: IFFALSE 45995
// exit ;
45993: GO 46184
// while 1 do
45995: LD_INT 1
45997: IFFALSE 46184
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45999: LD_ADDR_VAR 0 9
46003: PUSH
46004: LD_VAR 0 1
46008: PPUSH
46009: LD_INT 1
46011: PPUSH
46012: CALL_OW 287
46016: PUSH
46017: LD_INT 10
46019: MUL
46020: ST_TO_ADDR
// r := rate / 10 ;
46021: LD_ADDR_VAR 0 7
46025: PUSH
46026: LD_VAR 0 2
46030: PUSH
46031: LD_INT 10
46033: DIVREAL
46034: ST_TO_ADDR
// time := 1 1$00 ;
46035: LD_ADDR_VAR 0 8
46039: PUSH
46040: LD_INT 2100
46042: ST_TO_ADDR
// if amount < min then
46043: LD_VAR 0 9
46047: PUSH
46048: LD_VAR 0 3
46052: LESS
46053: IFFALSE 46071
// r := r * 2 else
46055: LD_ADDR_VAR 0 7
46059: PUSH
46060: LD_VAR 0 7
46064: PUSH
46065: LD_INT 2
46067: MUL
46068: ST_TO_ADDR
46069: GO 46097
// if amount > max then
46071: LD_VAR 0 9
46075: PUSH
46076: LD_VAR 0 4
46080: GREATER
46081: IFFALSE 46097
// r := r / 2 ;
46083: LD_ADDR_VAR 0 7
46087: PUSH
46088: LD_VAR 0 7
46092: PUSH
46093: LD_INT 2
46095: DIVREAL
46096: ST_TO_ADDR
// time := time / r ;
46097: LD_ADDR_VAR 0 8
46101: PUSH
46102: LD_VAR 0 8
46106: PUSH
46107: LD_VAR 0 7
46111: DIVREAL
46112: ST_TO_ADDR
// if time < 0 then
46113: LD_VAR 0 8
46117: PUSH
46118: LD_INT 0
46120: LESS
46121: IFFALSE 46138
// time := time * - 1 ;
46123: LD_ADDR_VAR 0 8
46127: PUSH
46128: LD_VAR 0 8
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: MUL
46137: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46138: LD_VAR 0 8
46142: PUSH
46143: LD_INT 35
46145: PPUSH
46146: LD_INT 875
46148: PPUSH
46149: CALL_OW 12
46153: PLUS
46154: PPUSH
46155: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46159: LD_INT 1
46161: PPUSH
46162: LD_INT 5
46164: PPUSH
46165: CALL_OW 12
46169: PPUSH
46170: LD_VAR 0 1
46174: PPUSH
46175: LD_INT 1
46177: PPUSH
46178: CALL_OW 55
// end ;
46182: GO 45995
// end ;
46184: LD_VAR 0 5
46188: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46189: LD_INT 0
46191: PPUSH
46192: PPUSH
46193: PPUSH
46194: PPUSH
46195: PPUSH
46196: PPUSH
46197: PPUSH
46198: PPUSH
// if not turrets or not factories then
46199: LD_VAR 0 1
46203: NOT
46204: PUSH
46205: LD_VAR 0 2
46209: NOT
46210: OR
46211: IFFALSE 46215
// exit ;
46213: GO 46522
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46215: LD_ADDR_VAR 0 10
46219: PUSH
46220: LD_INT 5
46222: PUSH
46223: LD_INT 6
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: LD_INT 4
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 3
46242: PUSH
46243: LD_INT 5
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 24
46257: PUSH
46258: LD_INT 25
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 23
46267: PUSH
46268: LD_INT 27
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 42
46281: PUSH
46282: LD_INT 43
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 44
46291: PUSH
46292: LD_INT 46
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 45
46301: PUSH
46302: LD_INT 47
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: LIST
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: LIST
46318: ST_TO_ADDR
// result := [ ] ;
46319: LD_ADDR_VAR 0 3
46323: PUSH
46324: EMPTY
46325: ST_TO_ADDR
// for i in turrets do
46326: LD_ADDR_VAR 0 4
46330: PUSH
46331: LD_VAR 0 1
46335: PUSH
46336: FOR_IN
46337: IFFALSE 46520
// begin nat := GetNation ( i ) ;
46339: LD_ADDR_VAR 0 7
46343: PUSH
46344: LD_VAR 0 4
46348: PPUSH
46349: CALL_OW 248
46353: ST_TO_ADDR
// weapon := 0 ;
46354: LD_ADDR_VAR 0 8
46358: PUSH
46359: LD_INT 0
46361: ST_TO_ADDR
// if not nat then
46362: LD_VAR 0 7
46366: NOT
46367: IFFALSE 46371
// continue ;
46369: GO 46336
// for j in list [ nat ] do
46371: LD_ADDR_VAR 0 5
46375: PUSH
46376: LD_VAR 0 10
46380: PUSH
46381: LD_VAR 0 7
46385: ARRAY
46386: PUSH
46387: FOR_IN
46388: IFFALSE 46429
// if GetBWeapon ( i ) = j [ 1 ] then
46390: LD_VAR 0 4
46394: PPUSH
46395: CALL_OW 269
46399: PUSH
46400: LD_VAR 0 5
46404: PUSH
46405: LD_INT 1
46407: ARRAY
46408: EQUAL
46409: IFFALSE 46427
// begin weapon := j [ 2 ] ;
46411: LD_ADDR_VAR 0 8
46415: PUSH
46416: LD_VAR 0 5
46420: PUSH
46421: LD_INT 2
46423: ARRAY
46424: ST_TO_ADDR
// break ;
46425: GO 46429
// end ;
46427: GO 46387
46429: POP
46430: POP
// if not weapon then
46431: LD_VAR 0 8
46435: NOT
46436: IFFALSE 46440
// continue ;
46438: GO 46336
// for k in factories do
46440: LD_ADDR_VAR 0 6
46444: PUSH
46445: LD_VAR 0 2
46449: PUSH
46450: FOR_IN
46451: IFFALSE 46516
// begin weapons := AvailableWeaponList ( k ) ;
46453: LD_ADDR_VAR 0 9
46457: PUSH
46458: LD_VAR 0 6
46462: PPUSH
46463: CALL_OW 478
46467: ST_TO_ADDR
// if not weapons then
46468: LD_VAR 0 9
46472: NOT
46473: IFFALSE 46477
// continue ;
46475: GO 46450
// if weapon in weapons then
46477: LD_VAR 0 8
46481: PUSH
46482: LD_VAR 0 9
46486: IN
46487: IFFALSE 46514
// begin result := [ i , weapon ] ;
46489: LD_ADDR_VAR 0 3
46493: PUSH
46494: LD_VAR 0 4
46498: PUSH
46499: LD_VAR 0 8
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: ST_TO_ADDR
// exit ;
46508: POP
46509: POP
46510: POP
46511: POP
46512: GO 46522
// end ; end ;
46514: GO 46450
46516: POP
46517: POP
// end ;
46518: GO 46336
46520: POP
46521: POP
// end ;
46522: LD_VAR 0 3
46526: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46527: LD_INT 0
46529: PPUSH
// if not side or side > 8 then
46530: LD_VAR 0 3
46534: NOT
46535: PUSH
46536: LD_VAR 0 3
46540: PUSH
46541: LD_INT 8
46543: GREATER
46544: OR
46545: IFFALSE 46549
// exit ;
46547: GO 46608
// if not range then
46549: LD_VAR 0 4
46553: NOT
46554: IFFALSE 46565
// range := - 12 ;
46556: LD_ADDR_VAR 0 4
46560: PUSH
46561: LD_INT 12
46563: NEG
46564: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46565: LD_VAR 0 1
46569: PPUSH
46570: LD_VAR 0 2
46574: PPUSH
46575: LD_VAR 0 3
46579: PPUSH
46580: LD_VAR 0 4
46584: PPUSH
46585: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46589: LD_VAR 0 1
46593: PPUSH
46594: LD_VAR 0 2
46598: PPUSH
46599: LD_VAR 0 3
46603: PPUSH
46604: CALL_OW 331
// end ;
46608: LD_VAR 0 5
46612: RET
// export function Video ( mode ) ; begin
46613: LD_INT 0
46615: PPUSH
// ingame_video = mode ;
46616: LD_ADDR_OWVAR 52
46620: PUSH
46621: LD_VAR 0 1
46625: ST_TO_ADDR
// interface_hidden = mode ;
46626: LD_ADDR_OWVAR 54
46630: PUSH
46631: LD_VAR 0 1
46635: ST_TO_ADDR
// end ;
46636: LD_VAR 0 2
46640: RET
// export function Join ( array , element ) ; begin
46641: LD_INT 0
46643: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46644: LD_ADDR_VAR 0 3
46648: PUSH
46649: LD_VAR 0 1
46653: PPUSH
46654: LD_VAR 0 1
46658: PUSH
46659: LD_INT 1
46661: PLUS
46662: PPUSH
46663: LD_VAR 0 2
46667: PPUSH
46668: CALL_OW 1
46672: ST_TO_ADDR
// end ;
46673: LD_VAR 0 3
46677: RET
// export function JoinUnion ( array , element ) ; begin
46678: LD_INT 0
46680: PPUSH
// result := array union element ;
46681: LD_ADDR_VAR 0 3
46685: PUSH
46686: LD_VAR 0 1
46690: PUSH
46691: LD_VAR 0 2
46695: UNION
46696: ST_TO_ADDR
// end ;
46697: LD_VAR 0 3
46701: RET
// export function GetBehemoths ( side ) ; begin
46702: LD_INT 0
46704: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
46705: LD_ADDR_VAR 0 2
46709: PUSH
46710: LD_INT 22
46712: PUSH
46713: LD_VAR 0 1
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 31
46724: PUSH
46725: LD_INT 25
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PPUSH
46736: CALL_OW 69
46740: ST_TO_ADDR
// end ;
46741: LD_VAR 0 2
46745: RET
// export function Shuffle ( array ) ; var i , index ; begin
46746: LD_INT 0
46748: PPUSH
46749: PPUSH
46750: PPUSH
// result := [ ] ;
46751: LD_ADDR_VAR 0 2
46755: PUSH
46756: EMPTY
46757: ST_TO_ADDR
// if not array then
46758: LD_VAR 0 1
46762: NOT
46763: IFFALSE 46767
// exit ;
46765: GO 46866
// Randomize ;
46767: CALL_OW 10
// for i = array downto 1 do
46771: LD_ADDR_VAR 0 3
46775: PUSH
46776: DOUBLE
46777: LD_VAR 0 1
46781: INC
46782: ST_TO_ADDR
46783: LD_INT 1
46785: PUSH
46786: FOR_DOWNTO
46787: IFFALSE 46864
// begin index := rand ( 1 , array ) ;
46789: LD_ADDR_VAR 0 4
46793: PUSH
46794: LD_INT 1
46796: PPUSH
46797: LD_VAR 0 1
46801: PPUSH
46802: CALL_OW 12
46806: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46807: LD_ADDR_VAR 0 2
46811: PUSH
46812: LD_VAR 0 2
46816: PPUSH
46817: LD_VAR 0 2
46821: PUSH
46822: LD_INT 1
46824: PLUS
46825: PPUSH
46826: LD_VAR 0 1
46830: PUSH
46831: LD_VAR 0 4
46835: ARRAY
46836: PPUSH
46837: CALL_OW 2
46841: ST_TO_ADDR
// array := Delete ( array , index ) ;
46842: LD_ADDR_VAR 0 1
46846: PUSH
46847: LD_VAR 0 1
46851: PPUSH
46852: LD_VAR 0 4
46856: PPUSH
46857: CALL_OW 3
46861: ST_TO_ADDR
// end ;
46862: GO 46786
46864: POP
46865: POP
// end ;
46866: LD_VAR 0 2
46870: RET
// export function GetBaseMaterials ( base ) ; begin
46871: LD_INT 0
46873: PPUSH
// result := [ 0 , 0 , 0 ] ;
46874: LD_ADDR_VAR 0 2
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: LIST
46892: ST_TO_ADDR
// if not base then
46893: LD_VAR 0 1
46897: NOT
46898: IFFALSE 46902
// exit ;
46900: GO 46951
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46902: LD_ADDR_VAR 0 2
46906: PUSH
46907: LD_VAR 0 1
46911: PPUSH
46912: LD_INT 1
46914: PPUSH
46915: CALL_OW 275
46919: PUSH
46920: LD_VAR 0 1
46924: PPUSH
46925: LD_INT 2
46927: PPUSH
46928: CALL_OW 275
46932: PUSH
46933: LD_VAR 0 1
46937: PPUSH
46938: LD_INT 3
46940: PPUSH
46941: CALL_OW 275
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: ST_TO_ADDR
// end ;
46951: LD_VAR 0 2
46955: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46956: LD_INT 0
46958: PPUSH
46959: PPUSH
// result := array ;
46960: LD_ADDR_VAR 0 3
46964: PUSH
46965: LD_VAR 0 1
46969: ST_TO_ADDR
// if size > 0 then
46970: LD_VAR 0 2
46974: PUSH
46975: LD_INT 0
46977: GREATER
46978: IFFALSE 47024
// for i := array downto size do
46980: LD_ADDR_VAR 0 4
46984: PUSH
46985: DOUBLE
46986: LD_VAR 0 1
46990: INC
46991: ST_TO_ADDR
46992: LD_VAR 0 2
46996: PUSH
46997: FOR_DOWNTO
46998: IFFALSE 47022
// result := Delete ( result , result ) ;
47000: LD_ADDR_VAR 0 3
47004: PUSH
47005: LD_VAR 0 3
47009: PPUSH
47010: LD_VAR 0 3
47014: PPUSH
47015: CALL_OW 3
47019: ST_TO_ADDR
47020: GO 46997
47022: POP
47023: POP
// end ;
47024: LD_VAR 0 3
47028: RET
// export function ComExit ( unit ) ; var tmp ; begin
47029: LD_INT 0
47031: PPUSH
47032: PPUSH
// if not IsInUnit ( unit ) then
47033: LD_VAR 0 1
47037: PPUSH
47038: CALL_OW 310
47042: NOT
47043: IFFALSE 47047
// exit ;
47045: GO 47107
// tmp := IsInUnit ( unit ) ;
47047: LD_ADDR_VAR 0 3
47051: PUSH
47052: LD_VAR 0 1
47056: PPUSH
47057: CALL_OW 310
47061: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47062: LD_VAR 0 3
47066: PPUSH
47067: CALL_OW 247
47071: PUSH
47072: LD_INT 2
47074: EQUAL
47075: IFFALSE 47088
// ComExitVehicle ( unit ) else
47077: LD_VAR 0 1
47081: PPUSH
47082: CALL_OW 121
47086: GO 47097
// ComExitBuilding ( unit ) ;
47088: LD_VAR 0 1
47092: PPUSH
47093: CALL_OW 122
// result := tmp ;
47097: LD_ADDR_VAR 0 2
47101: PUSH
47102: LD_VAR 0 3
47106: ST_TO_ADDR
// end ;
47107: LD_VAR 0 2
47111: RET
// export function ComExitAll ( units ) ; var i ; begin
47112: LD_INT 0
47114: PPUSH
47115: PPUSH
// if not units then
47116: LD_VAR 0 1
47120: NOT
47121: IFFALSE 47125
// exit ;
47123: GO 47151
// for i in units do
47125: LD_ADDR_VAR 0 3
47129: PUSH
47130: LD_VAR 0 1
47134: PUSH
47135: FOR_IN
47136: IFFALSE 47149
// ComExit ( i ) ;
47138: LD_VAR 0 3
47142: PPUSH
47143: CALL 47029 0 1
47147: GO 47135
47149: POP
47150: POP
// end ;
47151: LD_VAR 0 2
47155: RET
// export function ResetHc ; begin
47156: LD_INT 0
47158: PPUSH
// InitHc ;
47159: CALL_OW 19
// hc_importance := 0 ;
47163: LD_ADDR_OWVAR 32
47167: PUSH
47168: LD_INT 0
47170: ST_TO_ADDR
// end ;
47171: LD_VAR 0 1
47175: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47176: LD_INT 0
47178: PPUSH
47179: PPUSH
47180: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47181: LD_ADDR_VAR 0 6
47185: PUSH
47186: LD_VAR 0 1
47190: PUSH
47191: LD_VAR 0 3
47195: PLUS
47196: PUSH
47197: LD_INT 2
47199: DIV
47200: ST_TO_ADDR
// if _x < 0 then
47201: LD_VAR 0 6
47205: PUSH
47206: LD_INT 0
47208: LESS
47209: IFFALSE 47226
// _x := _x * - 1 ;
47211: LD_ADDR_VAR 0 6
47215: PUSH
47216: LD_VAR 0 6
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: MUL
47225: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47226: LD_ADDR_VAR 0 7
47230: PUSH
47231: LD_VAR 0 2
47235: PUSH
47236: LD_VAR 0 4
47240: PLUS
47241: PUSH
47242: LD_INT 2
47244: DIV
47245: ST_TO_ADDR
// if _y < 0 then
47246: LD_VAR 0 7
47250: PUSH
47251: LD_INT 0
47253: LESS
47254: IFFALSE 47271
// _y := _y * - 1 ;
47256: LD_ADDR_VAR 0 7
47260: PUSH
47261: LD_VAR 0 7
47265: PUSH
47266: LD_INT 1
47268: NEG
47269: MUL
47270: ST_TO_ADDR
// result := [ _x , _y ] ;
47271: LD_ADDR_VAR 0 5
47275: PUSH
47276: LD_VAR 0 6
47280: PUSH
47281: LD_VAR 0 7
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: ST_TO_ADDR
// end ;
47290: LD_VAR 0 5
47294: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47295: LD_INT 0
47297: PPUSH
47298: PPUSH
47299: PPUSH
47300: PPUSH
// task := GetTaskList ( unit ) ;
47301: LD_ADDR_VAR 0 7
47305: PUSH
47306: LD_VAR 0 1
47310: PPUSH
47311: CALL_OW 437
47315: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47316: LD_VAR 0 7
47320: NOT
47321: PUSH
47322: LD_VAR 0 1
47326: PPUSH
47327: LD_VAR 0 2
47331: PPUSH
47332: CALL_OW 308
47336: NOT
47337: AND
47338: IFFALSE 47342
// exit ;
47340: GO 47460
// if IsInArea ( unit , area ) then
47342: LD_VAR 0 1
47346: PPUSH
47347: LD_VAR 0 2
47351: PPUSH
47352: CALL_OW 308
47356: IFFALSE 47374
// begin ComMoveToArea ( unit , goAway ) ;
47358: LD_VAR 0 1
47362: PPUSH
47363: LD_VAR 0 3
47367: PPUSH
47368: CALL_OW 113
// exit ;
47372: GO 47460
// end ; if task [ 1 ] [ 1 ] <> M then
47374: LD_VAR 0 7
47378: PUSH
47379: LD_INT 1
47381: ARRAY
47382: PUSH
47383: LD_INT 1
47385: ARRAY
47386: PUSH
47387: LD_STRING M
47389: NONEQUAL
47390: IFFALSE 47394
// exit ;
47392: GO 47460
// x := task [ 1 ] [ 2 ] ;
47394: LD_ADDR_VAR 0 5
47398: PUSH
47399: LD_VAR 0 7
47403: PUSH
47404: LD_INT 1
47406: ARRAY
47407: PUSH
47408: LD_INT 2
47410: ARRAY
47411: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47412: LD_ADDR_VAR 0 6
47416: PUSH
47417: LD_VAR 0 7
47421: PUSH
47422: LD_INT 1
47424: ARRAY
47425: PUSH
47426: LD_INT 3
47428: ARRAY
47429: ST_TO_ADDR
// if InArea ( x , y , area ) then
47430: LD_VAR 0 5
47434: PPUSH
47435: LD_VAR 0 6
47439: PPUSH
47440: LD_VAR 0 2
47444: PPUSH
47445: CALL_OW 309
47449: IFFALSE 47460
// ComStop ( unit ) ;
47451: LD_VAR 0 1
47455: PPUSH
47456: CALL_OW 141
// end ;
47460: LD_VAR 0 4
47464: RET
// export function Abs ( value ) ; begin
47465: LD_INT 0
47467: PPUSH
// result := value ;
47468: LD_ADDR_VAR 0 2
47472: PUSH
47473: LD_VAR 0 1
47477: ST_TO_ADDR
// if value < 0 then
47478: LD_VAR 0 1
47482: PUSH
47483: LD_INT 0
47485: LESS
47486: IFFALSE 47503
// result := value * - 1 ;
47488: LD_ADDR_VAR 0 2
47492: PUSH
47493: LD_VAR 0 1
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: MUL
47502: ST_TO_ADDR
// end ;
47503: LD_VAR 0 2
47507: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47508: LD_INT 0
47510: PPUSH
47511: PPUSH
47512: PPUSH
47513: PPUSH
47514: PPUSH
47515: PPUSH
47516: PPUSH
47517: PPUSH
// if not unit or not building then
47518: LD_VAR 0 1
47522: NOT
47523: PUSH
47524: LD_VAR 0 2
47528: NOT
47529: OR
47530: IFFALSE 47534
// exit ;
47532: GO 47760
// x := GetX ( building ) ;
47534: LD_ADDR_VAR 0 4
47538: PUSH
47539: LD_VAR 0 2
47543: PPUSH
47544: CALL_OW 250
47548: ST_TO_ADDR
// y := GetY ( building ) ;
47549: LD_ADDR_VAR 0 6
47553: PUSH
47554: LD_VAR 0 2
47558: PPUSH
47559: CALL_OW 251
47563: ST_TO_ADDR
// d := GetDir ( building ) ;
47564: LD_ADDR_VAR 0 8
47568: PUSH
47569: LD_VAR 0 2
47573: PPUSH
47574: CALL_OW 254
47578: ST_TO_ADDR
// r := 4 ;
47579: LD_ADDR_VAR 0 9
47583: PUSH
47584: LD_INT 4
47586: ST_TO_ADDR
// for i := 1 to 5 do
47587: LD_ADDR_VAR 0 10
47591: PUSH
47592: DOUBLE
47593: LD_INT 1
47595: DEC
47596: ST_TO_ADDR
47597: LD_INT 5
47599: PUSH
47600: FOR_TO
47601: IFFALSE 47758
// begin _x := ShiftX ( x , d , r + i ) ;
47603: LD_ADDR_VAR 0 5
47607: PUSH
47608: LD_VAR 0 4
47612: PPUSH
47613: LD_VAR 0 8
47617: PPUSH
47618: LD_VAR 0 9
47622: PUSH
47623: LD_VAR 0 10
47627: PLUS
47628: PPUSH
47629: CALL_OW 272
47633: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47634: LD_ADDR_VAR 0 7
47638: PUSH
47639: LD_VAR 0 6
47643: PPUSH
47644: LD_VAR 0 8
47648: PPUSH
47649: LD_VAR 0 9
47653: PUSH
47654: LD_VAR 0 10
47658: PLUS
47659: PPUSH
47660: CALL_OW 273
47664: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47665: LD_VAR 0 5
47669: PPUSH
47670: LD_VAR 0 7
47674: PPUSH
47675: CALL_OW 488
47679: PUSH
47680: LD_VAR 0 5
47684: PPUSH
47685: LD_VAR 0 7
47689: PPUSH
47690: CALL_OW 428
47694: PPUSH
47695: CALL_OW 247
47699: PUSH
47700: LD_INT 3
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: IN
47710: NOT
47711: AND
47712: IFFALSE 47756
// begin ComMoveXY ( unit , _x , _y ) ;
47714: LD_VAR 0 1
47718: PPUSH
47719: LD_VAR 0 5
47723: PPUSH
47724: LD_VAR 0 7
47728: PPUSH
47729: CALL_OW 111
// result := [ _x , _y ] ;
47733: LD_ADDR_VAR 0 3
47737: PUSH
47738: LD_VAR 0 5
47742: PUSH
47743: LD_VAR 0 7
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: ST_TO_ADDR
// exit ;
47752: POP
47753: POP
47754: GO 47760
// end ; end ;
47756: GO 47600
47758: POP
47759: POP
// end ;
47760: LD_VAR 0 3
47764: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47765: LD_INT 0
47767: PPUSH
47768: PPUSH
47769: PPUSH
// result := 0 ;
47770: LD_ADDR_VAR 0 3
47774: PUSH
47775: LD_INT 0
47777: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47778: LD_VAR 0 1
47782: PUSH
47783: LD_INT 0
47785: LESS
47786: PUSH
47787: LD_VAR 0 1
47791: PUSH
47792: LD_INT 8
47794: GREATER
47795: OR
47796: PUSH
47797: LD_VAR 0 2
47801: PUSH
47802: LD_INT 0
47804: LESS
47805: OR
47806: PUSH
47807: LD_VAR 0 2
47811: PUSH
47812: LD_INT 8
47814: GREATER
47815: OR
47816: IFFALSE 47820
// exit ;
47818: GO 47895
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47820: LD_ADDR_VAR 0 4
47824: PUSH
47825: LD_INT 22
47827: PUSH
47828: LD_VAR 0 2
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PPUSH
47837: CALL_OW 69
47841: PUSH
47842: FOR_IN
47843: IFFALSE 47893
// begin un := UnitShoot ( i ) ;
47845: LD_ADDR_VAR 0 5
47849: PUSH
47850: LD_VAR 0 4
47854: PPUSH
47855: CALL_OW 504
47859: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47860: LD_VAR 0 5
47864: PPUSH
47865: CALL_OW 255
47869: PUSH
47870: LD_VAR 0 1
47874: EQUAL
47875: IFFALSE 47891
// begin result := un ;
47877: LD_ADDR_VAR 0 3
47881: PUSH
47882: LD_VAR 0 5
47886: ST_TO_ADDR
// exit ;
47887: POP
47888: POP
47889: GO 47895
// end ; end ;
47891: GO 47842
47893: POP
47894: POP
// end ;
47895: LD_VAR 0 3
47899: RET
// export function GetCargoBay ( units ) ; begin
47900: LD_INT 0
47902: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47903: LD_ADDR_VAR 0 2
47907: PUSH
47908: LD_VAR 0 1
47912: PPUSH
47913: LD_INT 2
47915: PUSH
47916: LD_INT 34
47918: PUSH
47919: LD_INT 12
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 34
47928: PUSH
47929: LD_INT 51
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 34
47938: PUSH
47939: LD_INT 32
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 34
47948: PUSH
47949: LD_EXP 83
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: PPUSH
47965: CALL_OW 72
47969: ST_TO_ADDR
// end ;
47970: LD_VAR 0 2
47974: RET
// export function Negate ( value ) ; begin
47975: LD_INT 0
47977: PPUSH
// result := not value ;
47978: LD_ADDR_VAR 0 2
47982: PUSH
47983: LD_VAR 0 1
47987: NOT
47988: ST_TO_ADDR
// end ;
47989: LD_VAR 0 2
47993: RET
// export function Inc ( value ) ; begin
47994: LD_INT 0
47996: PPUSH
// result := value + 1 ;
47997: LD_ADDR_VAR 0 2
48001: PUSH
48002: LD_VAR 0 1
48006: PUSH
48007: LD_INT 1
48009: PLUS
48010: ST_TO_ADDR
// end ;
48011: LD_VAR 0 2
48015: RET
// export function Dec ( value ) ; begin
48016: LD_INT 0
48018: PPUSH
// result := value - 1 ;
48019: LD_ADDR_VAR 0 2
48023: PUSH
48024: LD_VAR 0 1
48028: PUSH
48029: LD_INT 1
48031: MINUS
48032: ST_TO_ADDR
// end ;
48033: LD_VAR 0 2
48037: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48038: LD_INT 0
48040: PPUSH
48041: PPUSH
48042: PPUSH
48043: PPUSH
48044: PPUSH
48045: PPUSH
48046: PPUSH
48047: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48048: LD_VAR 0 1
48052: PPUSH
48053: LD_VAR 0 2
48057: PPUSH
48058: CALL_OW 488
48062: NOT
48063: PUSH
48064: LD_VAR 0 3
48068: PPUSH
48069: LD_VAR 0 4
48073: PPUSH
48074: CALL_OW 488
48078: NOT
48079: OR
48080: IFFALSE 48093
// begin result := - 1 ;
48082: LD_ADDR_VAR 0 5
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: ST_TO_ADDR
// exit ;
48091: GO 48328
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48093: LD_ADDR_VAR 0 12
48097: PUSH
48098: LD_VAR 0 1
48102: PPUSH
48103: LD_VAR 0 2
48107: PPUSH
48108: LD_VAR 0 3
48112: PPUSH
48113: LD_VAR 0 4
48117: PPUSH
48118: CALL 47176 0 4
48122: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48123: LD_ADDR_VAR 0 11
48127: PUSH
48128: LD_VAR 0 1
48132: PPUSH
48133: LD_VAR 0 2
48137: PPUSH
48138: LD_VAR 0 12
48142: PUSH
48143: LD_INT 1
48145: ARRAY
48146: PPUSH
48147: LD_VAR 0 12
48151: PUSH
48152: LD_INT 2
48154: ARRAY
48155: PPUSH
48156: CALL_OW 298
48160: ST_TO_ADDR
// distance := 9999 ;
48161: LD_ADDR_VAR 0 10
48165: PUSH
48166: LD_INT 9999
48168: ST_TO_ADDR
// for i := 0 to 5 do
48169: LD_ADDR_VAR 0 6
48173: PUSH
48174: DOUBLE
48175: LD_INT 0
48177: DEC
48178: ST_TO_ADDR
48179: LD_INT 5
48181: PUSH
48182: FOR_TO
48183: IFFALSE 48326
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48185: LD_ADDR_VAR 0 7
48189: PUSH
48190: LD_VAR 0 1
48194: PPUSH
48195: LD_VAR 0 6
48199: PPUSH
48200: LD_VAR 0 11
48204: PPUSH
48205: CALL_OW 272
48209: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48210: LD_ADDR_VAR 0 8
48214: PUSH
48215: LD_VAR 0 2
48219: PPUSH
48220: LD_VAR 0 6
48224: PPUSH
48225: LD_VAR 0 11
48229: PPUSH
48230: CALL_OW 273
48234: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48235: LD_VAR 0 7
48239: PPUSH
48240: LD_VAR 0 8
48244: PPUSH
48245: CALL_OW 488
48249: NOT
48250: IFFALSE 48254
// continue ;
48252: GO 48182
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48254: LD_ADDR_VAR 0 9
48258: PUSH
48259: LD_VAR 0 12
48263: PUSH
48264: LD_INT 1
48266: ARRAY
48267: PPUSH
48268: LD_VAR 0 12
48272: PUSH
48273: LD_INT 2
48275: ARRAY
48276: PPUSH
48277: LD_VAR 0 7
48281: PPUSH
48282: LD_VAR 0 8
48286: PPUSH
48287: CALL_OW 298
48291: ST_TO_ADDR
// if tmp < distance then
48292: LD_VAR 0 9
48296: PUSH
48297: LD_VAR 0 10
48301: LESS
48302: IFFALSE 48324
// begin result := i ;
48304: LD_ADDR_VAR 0 5
48308: PUSH
48309: LD_VAR 0 6
48313: ST_TO_ADDR
// distance := tmp ;
48314: LD_ADDR_VAR 0 10
48318: PUSH
48319: LD_VAR 0 9
48323: ST_TO_ADDR
// end ; end ;
48324: GO 48182
48326: POP
48327: POP
// end ;
48328: LD_VAR 0 5
48332: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48333: LD_INT 0
48335: PPUSH
48336: PPUSH
// if not driver or not IsInUnit ( driver ) then
48337: LD_VAR 0 1
48341: NOT
48342: PUSH
48343: LD_VAR 0 1
48347: PPUSH
48348: CALL_OW 310
48352: NOT
48353: OR
48354: IFFALSE 48358
// exit ;
48356: GO 48448
// vehicle := IsInUnit ( driver ) ;
48358: LD_ADDR_VAR 0 3
48362: PUSH
48363: LD_VAR 0 1
48367: PPUSH
48368: CALL_OW 310
48372: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48373: LD_VAR 0 1
48377: PPUSH
48378: LD_STRING \
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: PUSH
48408: LD_STRING E
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_VAR 0 3
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 0
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PPUSH
48444: CALL_OW 446
// end ;
48448: LD_VAR 0 2
48452: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48453: LD_INT 0
48455: PPUSH
48456: PPUSH
// if not driver or not IsInUnit ( driver ) then
48457: LD_VAR 0 1
48461: NOT
48462: PUSH
48463: LD_VAR 0 1
48467: PPUSH
48468: CALL_OW 310
48472: NOT
48473: OR
48474: IFFALSE 48478
// exit ;
48476: GO 48568
// vehicle := IsInUnit ( driver ) ;
48478: LD_ADDR_VAR 0 3
48482: PUSH
48483: LD_VAR 0 1
48487: PPUSH
48488: CALL_OW 310
48492: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48493: LD_VAR 0 1
48497: PPUSH
48498: LD_STRING \
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 0
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: PUSH
48528: LD_STRING E
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: LD_VAR 0 3
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PPUSH
48564: CALL_OW 447
// end ;
48568: LD_VAR 0 2
48572: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48573: LD_INT 0
48575: PPUSH
48576: PPUSH
48577: PPUSH
// tmp := [ ] ;
48578: LD_ADDR_VAR 0 5
48582: PUSH
48583: EMPTY
48584: ST_TO_ADDR
// for i in units do
48585: LD_ADDR_VAR 0 4
48589: PUSH
48590: LD_VAR 0 1
48594: PUSH
48595: FOR_IN
48596: IFFALSE 48634
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48598: LD_ADDR_VAR 0 5
48602: PUSH
48603: LD_VAR 0 5
48607: PPUSH
48608: LD_VAR 0 5
48612: PUSH
48613: LD_INT 1
48615: PLUS
48616: PPUSH
48617: LD_VAR 0 4
48621: PPUSH
48622: CALL_OW 256
48626: PPUSH
48627: CALL_OW 2
48631: ST_TO_ADDR
48632: GO 48595
48634: POP
48635: POP
// if not tmp then
48636: LD_VAR 0 5
48640: NOT
48641: IFFALSE 48645
// exit ;
48643: GO 48693
// if asc then
48645: LD_VAR 0 2
48649: IFFALSE 48673
// result := SortListByListAsc ( units , tmp ) else
48651: LD_ADDR_VAR 0 3
48655: PUSH
48656: LD_VAR 0 1
48660: PPUSH
48661: LD_VAR 0 5
48665: PPUSH
48666: CALL_OW 76
48670: ST_TO_ADDR
48671: GO 48693
// result := SortListByListDesc ( units , tmp ) ;
48673: LD_ADDR_VAR 0 3
48677: PUSH
48678: LD_VAR 0 1
48682: PPUSH
48683: LD_VAR 0 5
48687: PPUSH
48688: CALL_OW 77
48692: ST_TO_ADDR
// end ;
48693: LD_VAR 0 3
48697: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48698: LD_INT 0
48700: PPUSH
48701: PPUSH
// task := GetTaskList ( mech ) ;
48702: LD_ADDR_VAR 0 4
48706: PUSH
48707: LD_VAR 0 1
48711: PPUSH
48712: CALL_OW 437
48716: ST_TO_ADDR
// if not task then
48717: LD_VAR 0 4
48721: NOT
48722: IFFALSE 48726
// exit ;
48724: GO 48768
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48726: LD_ADDR_VAR 0 3
48730: PUSH
48731: LD_VAR 0 4
48735: PUSH
48736: LD_INT 1
48738: ARRAY
48739: PUSH
48740: LD_INT 1
48742: ARRAY
48743: PUSH
48744: LD_STRING r
48746: EQUAL
48747: PUSH
48748: LD_VAR 0 4
48752: PUSH
48753: LD_INT 1
48755: ARRAY
48756: PUSH
48757: LD_INT 4
48759: ARRAY
48760: PUSH
48761: LD_VAR 0 2
48765: EQUAL
48766: AND
48767: ST_TO_ADDR
// end ;
48768: LD_VAR 0 3
48772: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48773: LD_INT 0
48775: PPUSH
// SetDir ( unit , d ) ;
48776: LD_VAR 0 1
48780: PPUSH
48781: LD_VAR 0 4
48785: PPUSH
48786: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48790: LD_VAR 0 1
48794: PPUSH
48795: LD_VAR 0 2
48799: PPUSH
48800: LD_VAR 0 3
48804: PPUSH
48805: LD_VAR 0 5
48809: PPUSH
48810: CALL_OW 48
// end ;
48814: LD_VAR 0 6
48818: RET
// export function ToNaturalNumber ( number ) ; begin
48819: LD_INT 0
48821: PPUSH
// result := number div 1 ;
48822: LD_ADDR_VAR 0 2
48826: PUSH
48827: LD_VAR 0 1
48831: PUSH
48832: LD_INT 1
48834: DIV
48835: ST_TO_ADDR
// if number < 0 then
48836: LD_VAR 0 1
48840: PUSH
48841: LD_INT 0
48843: LESS
48844: IFFALSE 48854
// result := 0 ;
48846: LD_ADDR_VAR 0 2
48850: PUSH
48851: LD_INT 0
48853: ST_TO_ADDR
// end ;
48854: LD_VAR 0 2
48858: RET
// export function SortByClass ( units , class ) ; var un ; begin
48859: LD_INT 0
48861: PPUSH
48862: PPUSH
// if not units or not class then
48863: LD_VAR 0 1
48867: NOT
48868: PUSH
48869: LD_VAR 0 2
48873: NOT
48874: OR
48875: IFFALSE 48879
// exit ;
48877: GO 48974
// result := [ ] ;
48879: LD_ADDR_VAR 0 3
48883: PUSH
48884: EMPTY
48885: ST_TO_ADDR
// for un in units do
48886: LD_ADDR_VAR 0 4
48890: PUSH
48891: LD_VAR 0 1
48895: PUSH
48896: FOR_IN
48897: IFFALSE 48972
// if GetClass ( un ) = class then
48899: LD_VAR 0 4
48903: PPUSH
48904: CALL_OW 257
48908: PUSH
48909: LD_VAR 0 2
48913: EQUAL
48914: IFFALSE 48941
// result := Insert ( result , 1 , un ) else
48916: LD_ADDR_VAR 0 3
48920: PUSH
48921: LD_VAR 0 3
48925: PPUSH
48926: LD_INT 1
48928: PPUSH
48929: LD_VAR 0 4
48933: PPUSH
48934: CALL_OW 2
48938: ST_TO_ADDR
48939: GO 48970
// result := Replace ( result , result + 1 , un ) ;
48941: LD_ADDR_VAR 0 3
48945: PUSH
48946: LD_VAR 0 3
48950: PPUSH
48951: LD_VAR 0 3
48955: PUSH
48956: LD_INT 1
48958: PLUS
48959: PPUSH
48960: LD_VAR 0 4
48964: PPUSH
48965: CALL_OW 1
48969: ST_TO_ADDR
48970: GO 48896
48972: POP
48973: POP
// end ;
48974: LD_VAR 0 3
48978: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48979: LD_INT 0
48981: PPUSH
48982: PPUSH
48983: PPUSH
48984: PPUSH
48985: PPUSH
48986: PPUSH
48987: PPUSH
// result := [ ] ;
48988: LD_ADDR_VAR 0 4
48992: PUSH
48993: EMPTY
48994: ST_TO_ADDR
// if x - r < 0 then
48995: LD_VAR 0 1
48999: PUSH
49000: LD_VAR 0 3
49004: MINUS
49005: PUSH
49006: LD_INT 0
49008: LESS
49009: IFFALSE 49021
// min_x := 0 else
49011: LD_ADDR_VAR 0 8
49015: PUSH
49016: LD_INT 0
49018: ST_TO_ADDR
49019: GO 49037
// min_x := x - r ;
49021: LD_ADDR_VAR 0 8
49025: PUSH
49026: LD_VAR 0 1
49030: PUSH
49031: LD_VAR 0 3
49035: MINUS
49036: ST_TO_ADDR
// if y - r < 0 then
49037: LD_VAR 0 2
49041: PUSH
49042: LD_VAR 0 3
49046: MINUS
49047: PUSH
49048: LD_INT 0
49050: LESS
49051: IFFALSE 49063
// min_y := 0 else
49053: LD_ADDR_VAR 0 7
49057: PUSH
49058: LD_INT 0
49060: ST_TO_ADDR
49061: GO 49079
// min_y := y - r ;
49063: LD_ADDR_VAR 0 7
49067: PUSH
49068: LD_VAR 0 2
49072: PUSH
49073: LD_VAR 0 3
49077: MINUS
49078: ST_TO_ADDR
// max_x := x + r ;
49079: LD_ADDR_VAR 0 9
49083: PUSH
49084: LD_VAR 0 1
49088: PUSH
49089: LD_VAR 0 3
49093: PLUS
49094: ST_TO_ADDR
// max_y := y + r ;
49095: LD_ADDR_VAR 0 10
49099: PUSH
49100: LD_VAR 0 2
49104: PUSH
49105: LD_VAR 0 3
49109: PLUS
49110: ST_TO_ADDR
// for _x = min_x to max_x do
49111: LD_ADDR_VAR 0 5
49115: PUSH
49116: DOUBLE
49117: LD_VAR 0 8
49121: DEC
49122: ST_TO_ADDR
49123: LD_VAR 0 9
49127: PUSH
49128: FOR_TO
49129: IFFALSE 49230
// for _y = min_y to max_y do
49131: LD_ADDR_VAR 0 6
49135: PUSH
49136: DOUBLE
49137: LD_VAR 0 7
49141: DEC
49142: ST_TO_ADDR
49143: LD_VAR 0 10
49147: PUSH
49148: FOR_TO
49149: IFFALSE 49226
// begin if not ValidHex ( _x , _y ) then
49151: LD_VAR 0 5
49155: PPUSH
49156: LD_VAR 0 6
49160: PPUSH
49161: CALL_OW 488
49165: NOT
49166: IFFALSE 49170
// continue ;
49168: GO 49148
// if GetResourceTypeXY ( _x , _y ) then
49170: LD_VAR 0 5
49174: PPUSH
49175: LD_VAR 0 6
49179: PPUSH
49180: CALL_OW 283
49184: IFFALSE 49224
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49186: LD_ADDR_VAR 0 4
49190: PUSH
49191: LD_VAR 0 4
49195: PPUSH
49196: LD_VAR 0 4
49200: PUSH
49201: LD_INT 1
49203: PLUS
49204: PPUSH
49205: LD_VAR 0 5
49209: PUSH
49210: LD_VAR 0 6
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PPUSH
49219: CALL_OW 1
49223: ST_TO_ADDR
// end ;
49224: GO 49148
49226: POP
49227: POP
49228: GO 49128
49230: POP
49231: POP
// end ;
49232: LD_VAR 0 4
49236: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49237: LD_INT 0
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
49244: PPUSH
49245: PPUSH
49246: PPUSH
// if not units then
49247: LD_VAR 0 1
49251: NOT
49252: IFFALSE 49256
// exit ;
49254: GO 49681
// result := UnitFilter ( units , [ f_ok ] ) ;
49256: LD_ADDR_VAR 0 3
49260: PUSH
49261: LD_VAR 0 1
49265: PPUSH
49266: LD_INT 50
49268: PUSH
49269: EMPTY
49270: LIST
49271: PPUSH
49272: CALL_OW 72
49276: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49277: LD_ADDR_VAR 0 8
49281: PUSH
49282: LD_VAR 0 1
49286: PUSH
49287: LD_INT 1
49289: ARRAY
49290: PPUSH
49291: CALL_OW 255
49295: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
49296: LD_ADDR_VAR 0 10
49300: PUSH
49301: LD_INT 29
49303: PUSH
49304: LD_EXP 86
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: ST_TO_ADDR
// if not result then
49313: LD_VAR 0 3
49317: NOT
49318: IFFALSE 49322
// exit ;
49320: GO 49681
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49322: LD_ADDR_VAR 0 5
49326: PUSH
49327: LD_INT 81
49329: PUSH
49330: LD_VAR 0 8
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PPUSH
49339: CALL_OW 69
49343: ST_TO_ADDR
// for i in result do
49344: LD_ADDR_VAR 0 4
49348: PUSH
49349: LD_VAR 0 3
49353: PUSH
49354: FOR_IN
49355: IFFALSE 49679
// begin tag := GetTag ( i ) + 1 ;
49357: LD_ADDR_VAR 0 9
49361: PUSH
49362: LD_VAR 0 4
49366: PPUSH
49367: CALL_OW 110
49371: PUSH
49372: LD_INT 1
49374: PLUS
49375: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
49376: LD_ADDR_VAR 0 7
49380: PUSH
49381: LD_VAR 0 4
49385: PPUSH
49386: CALL_OW 250
49390: PPUSH
49391: LD_VAR 0 4
49395: PPUSH
49396: CALL_OW 251
49400: PPUSH
49401: LD_INT 6
49403: PPUSH
49404: CALL 48979 0 3
49408: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
49409: LD_VAR 0 7
49413: PUSH
49414: LD_VAR 0 4
49418: PPUSH
49419: CALL_OW 264
49423: PUSH
49424: LD_VAR 0 10
49428: IN
49429: NOT
49430: AND
49431: IFFALSE 49470
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49433: LD_VAR 0 4
49437: PPUSH
49438: LD_VAR 0 7
49442: PUSH
49443: LD_INT 1
49445: ARRAY
49446: PUSH
49447: LD_INT 1
49449: ARRAY
49450: PPUSH
49451: LD_VAR 0 7
49455: PUSH
49456: LD_INT 1
49458: ARRAY
49459: PUSH
49460: LD_INT 2
49462: ARRAY
49463: PPUSH
49464: CALL_OW 116
49468: GO 49677
// if path > tag then
49470: LD_VAR 0 2
49474: PUSH
49475: LD_VAR 0 9
49479: GREATER
49480: IFFALSE 49647
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
49482: LD_ADDR_VAR 0 6
49486: PUSH
49487: LD_VAR 0 5
49491: PPUSH
49492: LD_INT 91
49494: PUSH
49495: LD_VAR 0 4
49499: PUSH
49500: LD_INT 12
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: LIST
49507: PPUSH
49508: CALL_OW 72
49512: ST_TO_ADDR
// if nearEnemy then
49513: LD_VAR 0 6
49517: IFFALSE 49545
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49519: LD_VAR 0 4
49523: PPUSH
49524: LD_VAR 0 6
49528: PPUSH
49529: LD_VAR 0 4
49533: PPUSH
49534: CALL_OW 74
49538: PPUSH
49539: CALL_OW 115
49543: GO 49645
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49545: LD_VAR 0 4
49549: PPUSH
49550: LD_VAR 0 2
49554: PUSH
49555: LD_VAR 0 9
49559: ARRAY
49560: PUSH
49561: LD_INT 1
49563: ARRAY
49564: PPUSH
49565: LD_VAR 0 2
49569: PUSH
49570: LD_VAR 0 9
49574: ARRAY
49575: PUSH
49576: LD_INT 2
49578: ARRAY
49579: PPUSH
49580: CALL_OW 297
49584: PUSH
49585: LD_INT 6
49587: GREATER
49588: IFFALSE 49631
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49590: LD_VAR 0 4
49594: PPUSH
49595: LD_VAR 0 2
49599: PUSH
49600: LD_VAR 0 9
49604: ARRAY
49605: PUSH
49606: LD_INT 1
49608: ARRAY
49609: PPUSH
49610: LD_VAR 0 2
49614: PUSH
49615: LD_VAR 0 9
49619: ARRAY
49620: PUSH
49621: LD_INT 2
49623: ARRAY
49624: PPUSH
49625: CALL_OW 114
49629: GO 49645
// SetTag ( i , tag ) ;
49631: LD_VAR 0 4
49635: PPUSH
49636: LD_VAR 0 9
49640: PPUSH
49641: CALL_OW 109
// end else
49645: GO 49677
// if enemy then
49647: LD_VAR 0 5
49651: IFFALSE 49677
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49653: LD_VAR 0 4
49657: PPUSH
49658: LD_VAR 0 5
49662: PPUSH
49663: LD_VAR 0 4
49667: PPUSH
49668: CALL_OW 74
49672: PPUSH
49673: CALL_OW 115
// end ;
49677: GO 49354
49679: POP
49680: POP
// end ;
49681: LD_VAR 0 3
49685: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49686: LD_INT 0
49688: PPUSH
49689: PPUSH
49690: PPUSH
// if not unit or IsInUnit ( unit ) then
49691: LD_VAR 0 1
49695: NOT
49696: PUSH
49697: LD_VAR 0 1
49701: PPUSH
49702: CALL_OW 310
49706: OR
49707: IFFALSE 49711
// exit ;
49709: GO 49802
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49711: LD_ADDR_VAR 0 4
49715: PUSH
49716: LD_VAR 0 1
49720: PPUSH
49721: CALL_OW 250
49725: PPUSH
49726: LD_VAR 0 2
49730: PPUSH
49731: LD_INT 1
49733: PPUSH
49734: CALL_OW 272
49738: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49739: LD_ADDR_VAR 0 5
49743: PUSH
49744: LD_VAR 0 1
49748: PPUSH
49749: CALL_OW 251
49753: PPUSH
49754: LD_VAR 0 2
49758: PPUSH
49759: LD_INT 1
49761: PPUSH
49762: CALL_OW 273
49766: ST_TO_ADDR
// if ValidHex ( x , y ) then
49767: LD_VAR 0 4
49771: PPUSH
49772: LD_VAR 0 5
49776: PPUSH
49777: CALL_OW 488
49781: IFFALSE 49802
// ComTurnXY ( unit , x , y ) ;
49783: LD_VAR 0 1
49787: PPUSH
49788: LD_VAR 0 4
49792: PPUSH
49793: LD_VAR 0 5
49797: PPUSH
49798: CALL_OW 118
// end ;
49802: LD_VAR 0 3
49806: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49807: LD_INT 0
49809: PPUSH
49810: PPUSH
// result := false ;
49811: LD_ADDR_VAR 0 3
49815: PUSH
49816: LD_INT 0
49818: ST_TO_ADDR
// if not units then
49819: LD_VAR 0 2
49823: NOT
49824: IFFALSE 49828
// exit ;
49826: GO 49873
// for i in units do
49828: LD_ADDR_VAR 0 4
49832: PUSH
49833: LD_VAR 0 2
49837: PUSH
49838: FOR_IN
49839: IFFALSE 49871
// if See ( side , i ) then
49841: LD_VAR 0 1
49845: PPUSH
49846: LD_VAR 0 4
49850: PPUSH
49851: CALL_OW 292
49855: IFFALSE 49869
// begin result := true ;
49857: LD_ADDR_VAR 0 3
49861: PUSH
49862: LD_INT 1
49864: ST_TO_ADDR
// exit ;
49865: POP
49866: POP
49867: GO 49873
// end ;
49869: GO 49838
49871: POP
49872: POP
// end ;
49873: LD_VAR 0 3
49877: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49878: LD_INT 0
49880: PPUSH
49881: PPUSH
49882: PPUSH
49883: PPUSH
// if not unit or not points then
49884: LD_VAR 0 1
49888: NOT
49889: PUSH
49890: LD_VAR 0 2
49894: NOT
49895: OR
49896: IFFALSE 49900
// exit ;
49898: GO 49990
// dist := 99999 ;
49900: LD_ADDR_VAR 0 5
49904: PUSH
49905: LD_INT 99999
49907: ST_TO_ADDR
// for i in points do
49908: LD_ADDR_VAR 0 4
49912: PUSH
49913: LD_VAR 0 2
49917: PUSH
49918: FOR_IN
49919: IFFALSE 49988
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49921: LD_ADDR_VAR 0 6
49925: PUSH
49926: LD_VAR 0 1
49930: PPUSH
49931: LD_VAR 0 4
49935: PUSH
49936: LD_INT 1
49938: ARRAY
49939: PPUSH
49940: LD_VAR 0 4
49944: PUSH
49945: LD_INT 2
49947: ARRAY
49948: PPUSH
49949: CALL_OW 297
49953: ST_TO_ADDR
// if tmpDist < dist then
49954: LD_VAR 0 6
49958: PUSH
49959: LD_VAR 0 5
49963: LESS
49964: IFFALSE 49986
// begin result := i ;
49966: LD_ADDR_VAR 0 3
49970: PUSH
49971: LD_VAR 0 4
49975: ST_TO_ADDR
// dist := tmpDist ;
49976: LD_ADDR_VAR 0 5
49980: PUSH
49981: LD_VAR 0 6
49985: ST_TO_ADDR
// end ; end ;
49986: GO 49918
49988: POP
49989: POP
// end ;
49990: LD_VAR 0 3
49994: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49995: LD_INT 0
49997: PPUSH
// uc_side := side ;
49998: LD_ADDR_OWVAR 20
50002: PUSH
50003: LD_VAR 0 1
50007: ST_TO_ADDR
// uc_nation := 3 ;
50008: LD_ADDR_OWVAR 21
50012: PUSH
50013: LD_INT 3
50015: ST_TO_ADDR
// vc_chassis := 25 ;
50016: LD_ADDR_OWVAR 37
50020: PUSH
50021: LD_INT 25
50023: ST_TO_ADDR
// vc_engine := engine_siberite ;
50024: LD_ADDR_OWVAR 39
50028: PUSH
50029: LD_INT 3
50031: ST_TO_ADDR
// vc_control := control_computer ;
50032: LD_ADDR_OWVAR 38
50036: PUSH
50037: LD_INT 3
50039: ST_TO_ADDR
// vc_weapon := 59 ;
50040: LD_ADDR_OWVAR 40
50044: PUSH
50045: LD_INT 59
50047: ST_TO_ADDR
// result := CreateVehicle ;
50048: LD_ADDR_VAR 0 5
50052: PUSH
50053: CALL_OW 45
50057: ST_TO_ADDR
// SetDir ( result , d ) ;
50058: LD_VAR 0 5
50062: PPUSH
50063: LD_VAR 0 4
50067: PPUSH
50068: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50072: LD_VAR 0 5
50076: PPUSH
50077: LD_VAR 0 2
50081: PPUSH
50082: LD_VAR 0 3
50086: PPUSH
50087: LD_INT 0
50089: PPUSH
50090: CALL_OW 48
// end ;
50094: LD_VAR 0 5
50098: RET
