// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// SetBname ( Ovsyenko , Ovsyenko ) ;
   8: LD_INT 74
  10: PPUSH
  11: LD_STRING Ovsyenko
  13: PPUSH
  14: CALL_OW 500
// AnimateTrees ( true ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 573
// Randomize ;
  25: CALL_OW 10
// RandomizeAll ;
  29: CALL_OW 11
// InitGlobalVariables ;
  33: CALL 248 0 0
// InitRussian ;
  37: CALL 1474 0 0
// Action ;
  41: CALL 5522 0 0
// InitAmerican ;
  45: CALL 4495 0 0
// InitTerminal ;
  49: CALL 3902 0 0
// DebugMode ;
  53: CALL 211 0 0
// game_speed = 7 ;
  57: LD_ADDR_OWVAR 65
  61: PUSH
  62: LD_INT 7
  64: ST_TO_ADDR
// end ;
  65: END
// export DimitriCrew , YakotichCrew , BurlakCrew , SikorskiTeam , WestTerminalCrew , MainTerminalCrew , newAttackers , Attackers ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Dimitri , Ivan , Jegor , Grigori , Anton , RusSol ; export Sevi , SeviGuy1 , SeviGuy2 , SeviGuy3 ; export Burlak , Karamazov , Petrovova , Lipshchin , Gleb , Titov , Petrosyan , Dolgov ; export BurlakVeh , KaramazovVeh , BurlakCrewVeh1 , BurlakCrewVeh2 , BurlakCrewVeh3 , BurlakCrewVeh4 , BurlakCrewVeh5 , BurlakCrewVeh6 ; export Sikorski , SikorskiMeat , Truman , Bobby , Cyrus , Gary , Lynch , McCreery , Walker , Jilian , Turner , Houten , NorthSold ; export Morozov , Platonov ; export BurlakTime ; export debug ; export mission_prefix ; export cutscene_ended , ovsyenko_captured , start_ended , lab_seen , lab_captured , rocket_researched , prediction_researched , buldozer_researched , flametank_saved , siberit_excavated , sikorski_dead , everything_researched , crane_triggered , crane_researched , end_of_the_mission ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 66
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// cutscene_ended = false ;
  77: LD_ADDR_EXP 67
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// ovsyenko_captured = false ;
  85: LD_ADDR_EXP 68
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// start_ended = false ;
  93: LD_ADDR_EXP 69
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// rocket_researched = false ;
 101: LD_ADDR_EXP 72
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// buldozer_researched = false ;
 109: LD_ADDR_EXP 74
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// prediction_researched = false ;
 117: LD_ADDR_EXP 73
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// flametank_saved = false ;
 125: LD_ADDR_EXP 75
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// crane_triggered = false ;
 133: LD_ADDR_EXP 79
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// crane_researched = false ;
 141: LD_ADDR_EXP 80
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lab_seen = false ;
 149: LD_ADDR_EXP 70
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// lab_captured = false ;
 157: LD_ADDR_EXP 71
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// everything_researched = false ;
 165: LD_ADDR_EXP 78
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// end_of_the_mission = false ;
 173: LD_ADDR_EXP 81
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// BurlakTime := [ 10 10$0 , 12 12$30 , 15 15$0 ] [ Difficulty ] ;
 181: LD_ADDR_EXP 64
 185: PUSH
 186: LD_INT 21000
 188: PUSH
 189: LD_INT 26250
 191: PUSH
 192: LD_INT 31500
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: LIST
 199: PUSH
 200: LD_OWVAR 67
 204: ARRAY
 205: ST_TO_ADDR
// end ;
 206: LD_VAR 0 1
 210: RET
// export function DebugMode ; begin
 211: LD_INT 0
 213: PPUSH
// if Debug = true then
 214: LD_EXP 65
 218: PUSH
 219: LD_INT 1
 221: EQUAL
 222: IFFALSE 243
// begin Difficulty := 3 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 3
 231: ST_TO_ADDR
// TurnFogOff ( ) ;
 232: CALL_OW 537
// FogOff ( 3 ) ;
 236: LD_INT 3
 238: PPUSH
 239: CALL_OW 344
// end ; end ; end_of_file
 243: LD_VAR 0 1
 247: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
 248: LD_INT 0
 250: PPUSH
// ar_miner := 81 ;
 251: LD_ADDR_EXP 89
 255: PUSH
 256: LD_INT 81
 258: ST_TO_ADDR
// ar_crane := 88 ;
 259: LD_ADDR_EXP 88
 263: PUSH
 264: LD_INT 88
 266: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 267: LD_ADDR_EXP 83
 271: PUSH
 272: LD_INT 89
 274: ST_TO_ADDR
// us_hack := 99 ;
 275: LD_ADDR_EXP 84
 279: PUSH
 280: LD_INT 99
 282: ST_TO_ADDR
// us_artillery := 97 ;
 283: LD_ADDR_EXP 85
 287: PUSH
 288: LD_INT 97
 290: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 291: LD_ADDR_EXP 86
 295: PUSH
 296: LD_INT 91
 298: ST_TO_ADDR
// ar_mortar := 92 ;
 299: LD_ADDR_EXP 87
 303: PUSH
 304: LD_INT 92
 306: ST_TO_ADDR
// ru_flamethrower := 93 ;
 307: LD_ADDR_EXP 90
 311: PUSH
 312: LD_INT 93
 314: ST_TO_ADDR
// ru_radar := 98 ;
 315: LD_ADDR_EXP 82
 319: PUSH
 320: LD_INT 98
 322: ST_TO_ADDR
// tech_Artillery := 80 ;
 323: LD_ADDR_EXP 91
 327: PUSH
 328: LD_INT 80
 330: ST_TO_ADDR
// tech_RadMat := 81 ;
 331: LD_ADDR_EXP 92
 335: PUSH
 336: LD_INT 81
 338: ST_TO_ADDR
// tech_BasicTools := 82 ;
 339: LD_ADDR_EXP 93
 343: PUSH
 344: LD_INT 82
 346: ST_TO_ADDR
// tech_Cargo := 83 ;
 347: LD_ADDR_EXP 94
 351: PUSH
 352: LD_INT 83
 354: ST_TO_ADDR
// tech_Track := 84 ;
 355: LD_ADDR_EXP 95
 359: PUSH
 360: LD_INT 84
 362: ST_TO_ADDR
// tech_Crane := 85 ;
 363: LD_ADDR_EXP 96
 367: PUSH
 368: LD_INT 85
 370: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 371: LD_ADDR_EXP 97
 375: PUSH
 376: LD_INT 86
 378: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 379: LD_ADDR_EXP 98
 383: PUSH
 384: LD_INT 87
 386: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
 387: LD_ADDR_EXP 99
 391: PUSH
 392: LD_INT 88
 394: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
 395: LD_ADDR_EXP 100
 399: PUSH
 400: LD_INT 90
 402: ST_TO_ADDR
// class_mastodont := 31 ;
 403: LD_ADDR_EXP 101
 407: PUSH
 408: LD_INT 31
 410: ST_TO_ADDR
// class_horse := 21 ;
 411: LD_ADDR_EXP 102
 415: PUSH
 416: LD_INT 21
 418: ST_TO_ADDR
// end ; end_of_file
 419: LD_VAR 0 1
 423: RET
// export function siblo ( side ) ; var i , tmp ; begin
 424: LD_INT 0
 426: PPUSH
 427: PPUSH
 428: PPUSH
// result := 0 ;
 429: LD_ADDR_VAR 0 2
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: LD_INT 22
 444: PUSH
 445: LD_VAR 0 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: ST_TO_ADDR
// if not tmp then
 491: LD_VAR 0 4
 495: NOT
 496: IFFALSE 500
// exit ;
 498: GO 546
// for i in tmp do
 500: LD_ADDR_VAR 0 3
 504: PUSH
 505: LD_VAR 0 4
 509: PUSH
 510: FOR_IN
 511: IFFALSE 544
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
 513: LD_ADDR_VAR 0 2
 517: PUSH
 518: LD_VAR 0 2
 522: PUSH
 523: LD_VAR 0 3
 527: PPUSH
 528: CALL_OW 274
 532: PPUSH
 533: LD_INT 3
 535: PPUSH
 536: CALL_OW 275
 540: PLUS
 541: ST_TO_ADDR
 542: GO 510
 544: POP
 545: POP
// end ;
 546: LD_VAR 0 2
 550: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 551: LD_INT 0
 553: PPUSH
 554: PPUSH
 555: PPUSH
// uc_side := GetSide ( b ) ;
 556: LD_ADDR_OWVAR 20
 560: PUSH
 561: LD_VAR 0 2
 565: PPUSH
 566: CALL_OW 255
 570: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 571: LD_ADDR_OWVAR 21
 575: PUSH
 576: LD_VAR 0 2
 580: PPUSH
 581: CALL_OW 248
 585: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 586: LD_ADDR_VAR 0 5
 590: PUSH
 591: LD_VAR 0 2
 595: PPUSH
 596: CALL_OW 254
 600: PUSH
 601: LD_INT 3
 603: MINUS
 604: ST_TO_ADDR
// if dir < 0 then
 605: LD_VAR 0 5
 609: PUSH
 610: LD_INT 0
 612: LESS
 613: IFFALSE 629
// dir := 6 + dir ;
 615: LD_ADDR_VAR 0 5
 619: PUSH
 620: LD_INT 6
 622: PUSH
 623: LD_VAR 0 5
 627: PLUS
 628: ST_TO_ADDR
// un := CreateHuman ;
 629: LD_ADDR_VAR 0 4
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// SetDir ( un , dir ) ;
 639: LD_VAR 0 4
 643: PPUSH
 644: LD_VAR 0 5
 648: PPUSH
 649: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 653: LD_VAR 0 4
 657: PPUSH
 658: LD_VAR 0 2
 662: PPUSH
 663: CALL_OW 52
// end ;
 667: LD_VAR 0 3
 671: RET
// export function GetClassFromStart ( ident ) ; var un ; begin
 672: LD_INT 0
 674: PPUSH
 675: PPUSH
// un := NewCharacter ( ident ) ;
 676: LD_ADDR_VAR 0 3
 680: PUSH
 681: LD_VAR 0 1
 685: PPUSH
 686: CALL_OW 25
 690: ST_TO_ADDR
// if not un then
 691: LD_VAR 0 3
 695: NOT
 696: IFFALSE 700
// exit ;
 698: GO 724
// result := GetClass ( un ) ;
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: LD_VAR 0 3
 709: PPUSH
 710: CALL_OW 257
 714: ST_TO_ADDR
// DestroyUnit ( un ) ;
 715: LD_VAR 0 3
 719: PPUSH
 720: CALL_OW 65
// end ;
 724: LD_VAR 0 2
 728: RET
// every 1 trigger IsSelected ( Kvantovy ) do
 729: LD_INT 160
 731: PPUSH
 732: CALL_OW 306
 736: IFFALSE 833
 738: GO 740
 740: DISABLE
// begin KvantovyExp ( [ 1 , 2 , 3 , 4 ] ) ;
 741: LD_INT 1
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: LD_INT 3
 749: PUSH
 750: LD_INT 4
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: PPUSH
 759: CALL 834 0 1
// Wait ( 0 0$05 ) ;
 763: LD_INT 175
 765: PPUSH
 766: CALL_OW 67
// Say ( Kvantovy , 3Kvantovy-Sikret ) ;
 770: LD_INT 160
 772: PPUSH
 773: LD_STRING 3Kvantovy-Sikret
 775: PPUSH
 776: CALL_OW 88
// TeleportUnit ( Kvantovy , 120 , 237 , 300 , true ) ;
 780: LD_INT 160
 782: PPUSH
 783: LD_INT 120
 785: PPUSH
 786: LD_INT 237
 788: PPUSH
 789: LD_INT 300
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: CALL_OW 483
// Wait ( 0 0$05 ) ;
 799: LD_INT 175
 801: PPUSH
 802: CALL_OW 67
// RemoveUnit ( Kvantovy ) ;
 806: LD_INT 160
 808: PPUSH
 809: CALL_OW 64
// SaveVariable ( 1 , KvantovySaved ) ;
 813: LD_INT 1
 815: PPUSH
 816: LD_STRING KvantovySaved
 818: PPUSH
 819: CALL_OW 39
// SaveCharacters ( Kvantovy , Kvantovy ) ;
 823: LD_INT 160
 825: PPUSH
 826: LD_STRING Kvantovy
 828: PPUSH
 829: CALL_OW 38
// end ;
 833: END
// export function KvantovyExp ( q ) ; var dec , q1 ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
// dec = SelectiveQuery ( KvantovyQuery , q ) ;
 839: LD_ADDR_VAR 0 3
 843: PUSH
 844: LD_STRING KvantovyQuery
 846: PPUSH
 847: LD_VAR 0 1
 851: PPUSH
 852: CALL_OW 98
 856: ST_TO_ADDR
// case dec of 1 :
 857: LD_VAR 0 3
 861: PUSH
 862: LD_INT 1
 864: DOUBLE
 865: EQUAL
 866: IFTRUE 870
 868: GO 888
 870: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 2000 ) ;
 871: LD_EXP 9
 875: PPUSH
 876: LD_INT 1
 878: PPUSH
 879: LD_INT 2000
 881: PPUSH
 882: CALL_OW 591
// end ; 2 :
 886: GO 967
 888: LD_INT 2
 890: DOUBLE
 891: EQUAL
 892: IFTRUE 896
 894: GO 914
 896: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 2000 ) ;
 897: LD_EXP 9
 901: PPUSH
 902: LD_INT 2
 904: PPUSH
 905: LD_INT 2000
 907: PPUSH
 908: CALL_OW 591
// end ; 3 :
 912: GO 967
 914: LD_INT 3
 916: DOUBLE
 917: EQUAL
 918: IFTRUE 922
 920: GO 940
 922: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 2000 ) ;
 923: LD_EXP 9
 927: PPUSH
 928: LD_INT 3
 930: PPUSH
 931: LD_INT 2000
 933: PPUSH
 934: CALL_OW 591
// end ; 4 :
 938: GO 967
 940: LD_INT 4
 942: DOUBLE
 943: EQUAL
 944: IFTRUE 948
 946: GO 966
 948: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 2000 ) ;
 949: LD_EXP 9
 953: PPUSH
 954: LD_INT 4
 956: PPUSH
 957: LD_INT 2000
 959: PPUSH
 960: CALL_OW 591
// end ; end ;
 964: GO 967
 966: POP
// end ;
 967: LD_VAR 0 2
 971: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
 972: LD_EXP 9
 976: PPUSH
 977: CALL_OW 301
 981: IFFALSE 993
 983: GO 985
 985: DISABLE
// begin YouLost ( YakotichDead ) ;
 986: LD_STRING YakotichDead
 988: PPUSH
 989: CALL_OW 104
// end ;
 993: END
// every 0 0$1 trigger IsDead ( Mietek ) do
 994: LD_EXP 10
 998: PPUSH
 999: CALL_OW 301
1003: IFFALSE 1015
1005: GO 1007
1007: DISABLE
// begin YouLost ( MietekDead ) ;
1008: LD_STRING MietekDead
1010: PPUSH
1011: CALL_OW 104
// end ;
1015: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
1016: LD_VAR 0 1
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: LD_INT 3
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 3
1033: PUSH
1034: LD_INT 23
1036: PUSH
1037: LD_INT 0
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PUSH
1048: LD_INT 21
1050: PUSH
1051: LD_INT 1
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: LIST
1062: PPUSH
1063: CALL_OW 69
1067: IN
1068: IFFALSE 1077
// YouLost ( PeopleDead ) ;
1070: LD_STRING PeopleDead
1072: PPUSH
1073: CALL_OW 104
// end ;
1077: PPOPN 1
1079: END
// every 0 0$1 trigger IsDead ( Ovsyenko ) do
1080: LD_INT 74
1082: PPUSH
1083: CALL_OW 301
1087: IFFALSE 1099
1089: GO 1091
1091: DISABLE
// begin YouLost ( OvsyenkoDead ) ;
1092: LD_STRING OvsyenkoDead
1094: PPUSH
1095: CALL_OW 104
// end ;
1099: END
// every 1 trigger start_ended = false do
1100: LD_EXP 69
1104: PUSH
1105: LD_INT 0
1107: EQUAL
1108: IFFALSE 1252
1110: GO 1112
1112: DISABLE
// begin SetLives ( [ Gary , Bobby , Cyrus , Lynch , Walker , McCreery , Jilian , Turner ] , 1000 ) ;
1113: LD_EXP 54
1117: PUSH
1118: LD_EXP 52
1122: PUSH
1123: LD_EXP 53
1127: PUSH
1128: LD_EXP 55
1132: PUSH
1133: LD_EXP 57
1137: PUSH
1138: LD_EXP 56
1142: PUSH
1143: LD_EXP 58
1147: PUSH
1148: LD_EXP 59
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: LIST
1162: PPUSH
1163: LD_INT 1000
1165: PPUSH
1166: CALL_OW 234
// SetLives ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 1000 ) ;
1170: LD_INT 22
1172: PUSH
1173: LD_INT 3
1175: PUSH
1176: EMPTY
1177: LIST
1178: LIST
1179: PUSH
1180: LD_INT 21
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PPUSH
1194: CALL_OW 69
1198: PPUSH
1199: LD_INT 1000
1201: PPUSH
1202: CALL_OW 234
// SetLives ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , 1000 ) ;
1206: LD_INT 22
1208: PUSH
1209: LD_INT 3
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: LD_INT 21
1218: PUSH
1219: LD_INT 2
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PPUSH
1230: CALL_OW 69
1234: PPUSH
1235: LD_INT 1000
1237: PPUSH
1238: CALL_OW 234
// CenterOnUnits ( Yakotich ) ;
1242: LD_EXP 9
1246: PPUSH
1247: CALL_OW 85
// enable ;
1251: ENABLE
// end ;
1252: END
// every 0 0$1 trigger ovsyenko_captured = true do
1253: LD_EXP 68
1257: PUSH
1258: LD_INT 1
1260: EQUAL
1261: IFFALSE 1321
1263: GO 1265
1265: DISABLE
// begin if BurlakTime then
1266: LD_EXP 64
1270: IFFALSE 1311
// begin BurlakTime := BurlakTime - 0 0$1 ;
1272: LD_ADDR_EXP 64
1276: PUSH
1277: LD_EXP 64
1281: PUSH
1282: LD_INT 35
1284: MINUS
1285: ST_TO_ADDR
// display_strings := display_strings ^ [ #BurlakForces , BurlakTime ] ;
1286: LD_ADDR_OWVAR 47
1290: PUSH
1291: LD_OWVAR 47
1295: PUSH
1296: LD_STRING #BurlakForces
1298: PUSH
1299: LD_EXP 64
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: ADD
1308: ST_TO_ADDR
// end else
1309: GO 1320
// begin display_strings :=  ;
1311: LD_ADDR_OWVAR 47
1315: PUSH
1316: LD_STRING 
1318: ST_TO_ADDR
// disable ;
1319: DISABLE
// end ; enable ;
1320: ENABLE
// end ;
1321: END
// every 1 trigger ovsyenko_captured = false and FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
1322: LD_EXP 68
1326: PUSH
1327: LD_INT 0
1329: EQUAL
1330: PUSH
1331: LD_INT 18
1333: PPUSH
1334: LD_INT 22
1336: PUSH
1337: LD_INT 3
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: LD_INT 2
1346: PUSH
1347: LD_INT 21
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: LD_INT 21
1359: PUSH
1360: LD_INT 2
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PPUSH
1376: CALL_OW 70
1380: PUSH
1381: LD_INT 0
1383: GREATER
1384: AND
1385: IFFALSE 1471
1387: GO 1389
1389: DISABLE
1390: LD_INT 0
1392: PPUSH
// begin enable ;
1393: ENABLE
// for unit in FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1394: LD_ADDR_VAR 0 1
1398: PUSH
1399: LD_INT 18
1401: PPUSH
1402: LD_INT 22
1404: PUSH
1405: LD_INT 3
1407: PUSH
1408: EMPTY
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 2
1414: PUSH
1415: LD_INT 21
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PUSH
1425: LD_INT 21
1427: PUSH
1428: LD_INT 2
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: PUSH
1440: EMPTY
1441: LIST
1442: LIST
1443: PPUSH
1444: CALL_OW 70
1448: PUSH
1449: FOR_IN
1450: IFFALSE 1469
// begin ComMoveXY ( unit , 101 , 116 ) ;
1452: LD_VAR 0 1
1456: PPUSH
1457: LD_INT 101
1459: PPUSH
1460: LD_INT 116
1462: PPUSH
1463: CALL_OW 111
// end ;
1467: GO 1449
1469: POP
1470: POP
// end ; end_of_file
1471: PPOPN 1
1473: END
// export function InitRussian ; begin
1474: LD_INT 0
1476: PPUSH
// Uc_Nation := 3 ;
1477: LD_ADDR_OWVAR 21
1481: PUSH
1482: LD_INT 3
1484: ST_TO_ADDR
// Uc_Side := 3 ;
1485: LD_ADDR_OWVAR 20
1489: PUSH
1490: LD_INT 3
1492: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 02_ ) ;
1493: LD_ADDR_EXP 9
1497: PUSH
1498: LD_STRING Yakotich
1500: PPUSH
1501: LD_INT 1
1503: PPUSH
1504: LD_STRING 02_
1506: PPUSH
1507: CALL 9981 0 3
1511: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 02_ ) ;
1512: LD_ADDR_EXP 10
1516: PUSH
1517: LD_STRING Mietek
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_STRING 02_
1525: PPUSH
1526: CALL 9981 0 3
1530: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 02_ ) ;
1531: LD_ADDR_EXP 11
1535: PUSH
1536: LD_STRING Boris
1538: PPUSH
1539: LD_INT 1
1541: PPUSH
1542: LD_STRING 02_
1544: PPUSH
1545: CALL 9981 0 3
1549: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 02_ ) ;
1550: LD_ADDR_EXP 13
1554: PUSH
1555: LD_STRING Michail
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: LD_STRING 02_
1563: PPUSH
1564: CALL 9981 0 3
1568: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 02_ ) ;
1569: LD_ADDR_EXP 12
1573: PUSH
1574: LD_STRING Vasilij
1576: PPUSH
1577: LD_INT 1
1579: PPUSH
1580: LD_STRING 02_
1582: PPUSH
1583: CALL 9981 0 3
1587: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 02_ ) ;
1588: LD_ADDR_EXP 14
1592: PUSH
1593: LD_STRING Constantin
1595: PPUSH
1596: LD_INT 1
1598: PPUSH
1599: LD_STRING 02_
1601: PPUSH
1602: CALL 9981 0 3
1606: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 02_ ) ;
1607: LD_ADDR_EXP 15
1611: PUSH
1612: LD_STRING Maksim
1614: PPUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_STRING 02_
1620: PPUSH
1621: CALL 9981 0 3
1625: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 02_ ) ;
1626: LD_ADDR_EXP 16
1630: PUSH
1631: LD_STRING Fiodor
1633: PPUSH
1634: LD_INT 1
1636: PPUSH
1637: LD_STRING 02_
1639: PPUSH
1640: CALL 9981 0 3
1644: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 02_ ) ;
1645: LD_ADDR_EXP 19
1649: PUSH
1650: LD_STRING Aleksiej
1652: PPUSH
1653: LD_INT 1
1655: PPUSH
1656: LD_STRING 02_
1658: PPUSH
1659: CALL 9981 0 3
1663: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 02_ ) ;
1664: LD_ADDR_EXP 17
1668: PUSH
1669: LD_STRING Pavel
1671: PPUSH
1672: LD_INT 1
1674: PPUSH
1675: LD_STRING 02_
1677: PPUSH
1678: CALL 9981 0 3
1682: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 02_ ) ;
1683: LD_ADDR_EXP 18
1687: PUSH
1688: LD_STRING Zakhar
1690: PPUSH
1691: LD_INT 1
1693: PPUSH
1694: LD_STRING 02_
1696: PPUSH
1697: CALL 9981 0 3
1701: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 02_ ) ;
1702: LD_ADDR_EXP 20
1706: PUSH
1707: LD_STRING Aleksandr
1709: PPUSH
1710: LD_INT 1
1712: PPUSH
1713: LD_STRING 02_
1715: PPUSH
1716: CALL 9981 0 3
1720: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , true , 02_ ) ;
1721: LD_ADDR_EXP 22
1725: PUSH
1726: LD_STRING Stanislav
1728: PPUSH
1729: LD_INT 1
1731: PPUSH
1732: LD_STRING 02_
1734: PPUSH
1735: CALL 9981 0 3
1739: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , true , 02_ ) ;
1740: LD_ADDR_EXP 21
1744: PUSH
1745: LD_STRING Josif
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: LD_STRING 02_
1753: PPUSH
1754: CALL 9981 0 3
1758: ST_TO_ADDR
// SetClass ( [ Yakotich , Mietek , Constantin , Maksim , Fiodor , Aleksiej , Zakhar , Aleksandr , Josif ] , 1 ) ;
1759: LD_EXP 9
1763: PUSH
1764: LD_EXP 10
1768: PUSH
1769: LD_EXP 14
1773: PUSH
1774: LD_EXP 15
1778: PUSH
1779: LD_EXP 16
1783: PUSH
1784: LD_EXP 19
1788: PUSH
1789: LD_EXP 18
1793: PUSH
1794: LD_EXP 20
1798: PUSH
1799: LD_EXP 21
1803: PUSH
1804: EMPTY
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: CALL_OW 336
// SetClass ( Boris , 2 ) ;
1822: LD_EXP 11
1826: PPUSH
1827: LD_INT 2
1829: PPUSH
1830: CALL_OW 336
// SetClass ( [ Michail , Pavel ] , 3 ) ;
1834: LD_EXP 13
1838: PUSH
1839: LD_EXP 17
1843: PUSH
1844: EMPTY
1845: LIST
1846: LIST
1847: PPUSH
1848: LD_INT 3
1850: PPUSH
1851: CALL_OW 336
// SetClass ( [ Stanislav , Vasilij ] , 4 ) ;
1855: LD_EXP 22
1859: PUSH
1860: LD_EXP 12
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: PPUSH
1869: LD_INT 4
1871: PPUSH
1872: CALL_OW 336
// PlaceUnitArea ( Yakotich , EnterArea , false ) ;
1876: LD_EXP 9
1880: PPUSH
1881: LD_INT 1
1883: PPUSH
1884: LD_INT 0
1886: PPUSH
1887: CALL_OW 49
// PlaceUnitArea ( Mietek , EnterArea , false ) ;
1891: LD_EXP 10
1895: PPUSH
1896: LD_INT 1
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// PlaceUnitArea ( Boris , EnterArea , false ) ;
1906: LD_EXP 11
1910: PPUSH
1911: LD_INT 1
1913: PPUSH
1914: LD_INT 0
1916: PPUSH
1917: CALL_OW 49
// PlaceUnitArea ( Michail , EnterArea , false ) ;
1921: LD_EXP 13
1925: PPUSH
1926: LD_INT 1
1928: PPUSH
1929: LD_INT 0
1931: PPUSH
1932: CALL_OW 49
// PlaceUnitArea ( Vasilij , EnterArea , false ) ;
1936: LD_EXP 12
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: LD_INT 0
1946: PPUSH
1947: CALL_OW 49
// PlaceUnitArea ( Constantin , EnterArea , false ) ;
1951: LD_EXP 14
1955: PPUSH
1956: LD_INT 1
1958: PPUSH
1959: LD_INT 0
1961: PPUSH
1962: CALL_OW 49
// PlaceUnitArea ( Maksim , EnterArea , false ) ;
1966: LD_EXP 15
1970: PPUSH
1971: LD_INT 1
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 49
// PlaceUnitArea ( Fiodor , EnterArea , false ) ;
1981: LD_EXP 16
1985: PPUSH
1986: LD_INT 1
1988: PPUSH
1989: LD_INT 0
1991: PPUSH
1992: CALL_OW 49
// PlaceUnitArea ( Pavel , EnterArea , false ) ;
1996: LD_EXP 17
2000: PPUSH
2001: LD_INT 1
2003: PPUSH
2004: LD_INT 0
2006: PPUSH
2007: CALL_OW 49
// PlaceUnitArea ( Zakhar , EnterArea , false ) ;
2011: LD_EXP 18
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: LD_INT 0
2021: PPUSH
2022: CALL_OW 49
// PlaceUnitArea ( Aleksandr , EnterArea , false ) ;
2026: LD_EXP 20
2030: PPUSH
2031: LD_INT 1
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL_OW 49
// PlaceUnitArea ( Stanislav , EnterArea , false ) ;
2041: LD_EXP 22
2045: PPUSH
2046: LD_INT 1
2048: PPUSH
2049: LD_INT 0
2051: PPUSH
2052: CALL_OW 49
// PlaceUnitArea ( Josif , EnterArea , false ) ;
2056: LD_EXP 21
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 49
// Dimitri := PrepareUnit ( Dimitri , false ,  ) ;
2071: LD_ADDR_EXP 23
2075: PUSH
2076: LD_STRING Dimitri
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: LD_STRING 
2084: PPUSH
2085: CALL 9981 0 3
2089: ST_TO_ADDR
// Ivan := PrepareUnit ( Ivan , false ,  ) ;
2090: LD_ADDR_EXP 24
2094: PUSH
2095: LD_STRING Ivan
2097: PPUSH
2098: LD_INT 0
2100: PPUSH
2101: LD_STRING 
2103: PPUSH
2104: CALL 9981 0 3
2108: ST_TO_ADDR
// Jegor := PrepareUnit ( Jegor , false ,  ) ;
2109: LD_ADDR_EXP 25
2113: PUSH
2114: LD_STRING Jegor
2116: PPUSH
2117: LD_INT 0
2119: PPUSH
2120: LD_STRING 
2122: PPUSH
2123: CALL 9981 0 3
2127: ST_TO_ADDR
// Grigori := PrepareUnit ( Grigori , false ,  ) ;
2128: LD_ADDR_EXP 26
2132: PUSH
2133: LD_STRING Grigori
2135: PPUSH
2136: LD_INT 0
2138: PPUSH
2139: LD_STRING 
2141: PPUSH
2142: CALL 9981 0 3
2146: ST_TO_ADDR
// Anton := PrepareUnit ( Anton , false ,  ) ;
2147: LD_ADDR_EXP 27
2151: PUSH
2152: LD_STRING Anton
2154: PPUSH
2155: LD_INT 0
2157: PPUSH
2158: LD_STRING 
2160: PPUSH
2161: CALL 9981 0 3
2165: ST_TO_ADDR
// PlaceHumanInUnit ( Dimitri , Ovsyenko ) ;
2166: LD_EXP 23
2170: PPUSH
2171: LD_INT 74
2173: PPUSH
2174: CALL_OW 52
// PlaceHumanInUnit ( Anton , Ovsyenko ) ;
2178: LD_EXP 27
2182: PPUSH
2183: LD_INT 74
2185: PPUSH
2186: CALL_OW 52
// PlaceHumanInUnit ( Grigori , Ovsyenko ) ;
2190: LD_EXP 26
2194: PPUSH
2195: LD_INT 74
2197: PPUSH
2198: CALL_OW 52
// PlaceHumanInUnit ( Jegor , OB2 ) ;
2202: LD_EXP 25
2206: PPUSH
2207: LD_INT 79
2209: PPUSH
2210: CALL_OW 52
// PlaceHumanInUnit ( Ivan , OB3 ) ;
2214: LD_EXP 24
2218: PPUSH
2219: LD_INT 78
2221: PPUSH
2222: CALL_OW 52
// Uc_Side := 6 ;
2226: LD_ADDR_OWVAR 20
2230: PUSH
2231: LD_INT 6
2233: ST_TO_ADDR
// PrepareSoldier ( 0 , 3 ) ;
2234: LD_INT 0
2236: PPUSH
2237: LD_INT 3
2239: PPUSH
2240: CALL_OW 381
// RusSol = CreateHuman ;
2244: LD_ADDR_EXP 28
2248: PUSH
2249: CALL_OW 44
2253: ST_TO_ADDR
// PlaceHumanInUnit ( RusSol , OB1 ) ;
2254: LD_EXP 28
2258: PPUSH
2259: LD_INT 77
2261: PPUSH
2262: CALL_OW 52
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
2266: LD_ADDR_EXP 62
2270: PUSH
2271: LD_STRING Morozov
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: LD_STRING 
2279: PPUSH
2280: CALL 9981 0 3
2284: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
2285: LD_ADDR_EXP 63
2289: PUSH
2290: LD_STRING Platonov
2292: PPUSH
2293: LD_INT 0
2295: PPUSH
2296: LD_STRING 
2298: PPUSH
2299: CALL 9981 0 3
2303: ST_TO_ADDR
// end ;
2304: LD_VAR 0 1
2308: RET
// export function InitBurlak ; begin
2309: LD_INT 0
2311: PPUSH
// Uc_side := 3 ;
2312: LD_ADDR_OWVAR 20
2316: PUSH
2317: LD_INT 3
2319: ST_TO_ADDR
// Uc_nation := 3 ;
2320: LD_ADDR_OWVAR 21
2324: PUSH
2325: LD_INT 3
2327: ST_TO_ADDR
// Uc_Direction := 0 ;
2328: LD_ADDR_OWVAR 24
2332: PUSH
2333: LD_INT 0
2335: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2336: LD_ADDR_EXP 33
2340: PUSH
2341: LD_STRING Burlak
2343: PPUSH
2344: LD_INT 0
2346: PPUSH
2347: LD_STRING 
2349: PPUSH
2350: CALL 9981 0 3
2354: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2355: LD_ADDR_EXP 38
2359: PUSH
2360: LD_STRING Titov
2362: PPUSH
2363: LD_INT 0
2365: PPUSH
2366: LD_STRING 
2368: PPUSH
2369: CALL 9981 0 3
2373: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrovova , false ,  ) ;
2374: LD_ADDR_EXP 35
2378: PUSH
2379: LD_STRING Petrovova
2381: PPUSH
2382: LD_INT 0
2384: PPUSH
2385: LD_STRING 
2387: PPUSH
2388: CALL 9981 0 3
2392: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2393: LD_ADDR_EXP 36
2397: PUSH
2398: LD_STRING Lipshchin
2400: PPUSH
2401: LD_INT 0
2403: PPUSH
2404: LD_STRING 
2406: PPUSH
2407: CALL 9981 0 3
2411: ST_TO_ADDR
// Gleb := PrepareUnit ( Gleb , false ,  ) ;
2412: LD_ADDR_EXP 37
2416: PUSH
2417: LD_STRING Gleb
2419: PPUSH
2420: LD_INT 0
2422: PPUSH
2423: LD_STRING 
2425: PPUSH
2426: CALL 9981 0 3
2430: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , false ,  ) ;
2431: LD_ADDR_EXP 34
2435: PUSH
2436: LD_STRING Karamazov
2438: PPUSH
2439: LD_INT 0
2441: PPUSH
2442: LD_STRING 
2444: PPUSH
2445: CALL 9981 0 3
2449: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , false ,  ) ;
2450: LD_ADDR_EXP 39
2454: PUSH
2455: LD_STRING Petrosyan
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: LD_STRING 
2463: PPUSH
2464: CALL 9981 0 3
2468: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , false ,  ) ;
2469: LD_ADDR_EXP 40
2473: PUSH
2474: LD_STRING Dolgov
2476: PPUSH
2477: LD_INT 0
2479: PPUSH
2480: LD_STRING 
2482: PPUSH
2483: CALL 9981 0 3
2487: ST_TO_ADDR
// vc_chassis = 22 ;
2488: LD_ADDR_OWVAR 37
2492: PUSH
2493: LD_INT 22
2495: ST_TO_ADDR
// vc_control = 1 ;
2496: LD_ADDR_OWVAR 38
2500: PUSH
2501: LD_INT 1
2503: ST_TO_ADDR
// vc_engine = 1 ;
2504: LD_ADDR_OWVAR 39
2508: PUSH
2509: LD_INT 1
2511: ST_TO_ADDR
// vc_fuel_battery = rand ( 15 , 30 ) ;
2512: LD_ADDR_OWVAR 41
2516: PUSH
2517: LD_INT 15
2519: PPUSH
2520: LD_INT 30
2522: PPUSH
2523: CALL_OW 12
2527: ST_TO_ADDR
// vc_weapon = [ 44 , 43 , 42 ] [ Difficulty ] ;
2528: LD_ADDR_OWVAR 40
2532: PUSH
2533: LD_INT 44
2535: PUSH
2536: LD_INT 43
2538: PUSH
2539: LD_INT 42
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: LIST
2546: PUSH
2547: LD_OWVAR 67
2551: ARRAY
2552: ST_TO_ADDR
// BurlakCrewVeh1 = CreateVehicle ;
2553: LD_ADDR_EXP 43
2557: PUSH
2558: CALL_OW 45
2562: ST_TO_ADDR
// BurlakCrewVeh2 = CreateVehicle ;
2563: LD_ADDR_EXP 44
2567: PUSH
2568: CALL_OW 45
2572: ST_TO_ADDR
// BurlakCrewVeh3 = CreateVehicle ;
2573: LD_ADDR_EXP 45
2577: PUSH
2578: CALL_OW 45
2582: ST_TO_ADDR
// BurlakCrewVeh4 = CreateVehicle ;
2583: LD_ADDR_EXP 46
2587: PUSH
2588: CALL_OW 45
2592: ST_TO_ADDR
// BurlakCrewVeh5 = CreateVehicle ;
2593: LD_ADDR_EXP 47
2597: PUSH
2598: CALL_OW 45
2602: ST_TO_ADDR
// BurlakCrewVeh6 = CreateVehicle ;
2603: LD_ADDR_EXP 48
2607: PUSH
2608: CALL_OW 45
2612: ST_TO_ADDR
// PlaceUnitArea ( BurlakCrewVeh1 , BurlakArea , false ) ;
2613: LD_EXP 43
2617: PPUSH
2618: LD_INT 2
2620: PPUSH
2621: LD_INT 0
2623: PPUSH
2624: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh2 , BurlakArea , false ) ;
2628: LD_EXP 44
2632: PPUSH
2633: LD_INT 2
2635: PPUSH
2636: LD_INT 0
2638: PPUSH
2639: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh3 , BurlakArea , false ) ;
2643: LD_EXP 45
2647: PPUSH
2648: LD_INT 2
2650: PPUSH
2651: LD_INT 0
2653: PPUSH
2654: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh4 , BurlakArea , false ) ;
2658: LD_EXP 46
2662: PPUSH
2663: LD_INT 2
2665: PPUSH
2666: LD_INT 0
2668: PPUSH
2669: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh5 , BurlakArea , false ) ;
2673: LD_EXP 47
2677: PPUSH
2678: LD_INT 2
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh6 , BurlakArea , false ) ;
2688: LD_EXP 48
2692: PPUSH
2693: LD_INT 2
2695: PPUSH
2696: LD_INT 0
2698: PPUSH
2699: CALL_OW 49
// PlaceHumanInUnit ( Titov , BurlakCrewVeh1 ) ;
2703: LD_EXP 38
2707: PPUSH
2708: LD_EXP 43
2712: PPUSH
2713: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , BurlakCrewVeh2 ) ;
2717: LD_EXP 35
2721: PPUSH
2722: LD_EXP 44
2726: PPUSH
2727: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , BurlakCrewVeh3 ) ;
2731: LD_EXP 36
2735: PPUSH
2736: LD_EXP 45
2740: PPUSH
2741: CALL_OW 52
// PlaceHumanInUnit ( Gleb , BurlakCrewVeh4 ) ;
2745: LD_EXP 37
2749: PPUSH
2750: LD_EXP 46
2754: PPUSH
2755: CALL_OW 52
// PlaceHumanInUnit ( Dolgov , BurlakCrewVeh5 ) ;
2759: LD_EXP 40
2763: PPUSH
2764: LD_EXP 47
2768: PPUSH
2769: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , BurlakCrewVeh6 ) ;
2773: LD_EXP 39
2777: PPUSH
2778: LD_EXP 48
2782: PPUSH
2783: CALL_OW 52
// vc_chassis = 24 ;
2787: LD_ADDR_OWVAR 37
2791: PUSH
2792: LD_INT 24
2794: ST_TO_ADDR
// vc_weapon = 89 ;
2795: LD_ADDR_OWVAR 40
2799: PUSH
2800: LD_INT 89
2802: ST_TO_ADDR
// KaramazovVeh = CreateVehicle ;
2803: LD_ADDR_EXP 42
2807: PUSH
2808: CALL_OW 45
2812: ST_TO_ADDR
// AddCargo ( KaramazovVeh , mat_cans , 200 ) ;
2813: LD_EXP 42
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: LD_INT 200
2823: PPUSH
2824: CALL_OW 291
// PlaceUnitArea ( KaramazovVeh , BurlakArea , false ) ;
2828: LD_EXP 42
2832: PPUSH
2833: LD_INT 2
2835: PPUSH
2836: LD_INT 0
2838: PPUSH
2839: CALL_OW 49
// PlaceHumanInUnit ( Karamazov , KaramazovVeh ) ;
2843: LD_EXP 34
2847: PPUSH
2848: LD_EXP 42
2852: PPUSH
2853: CALL_OW 52
// Uc_Nation = 2 ;
2857: LD_ADDR_OWVAR 21
2861: PUSH
2862: LD_INT 2
2864: ST_TO_ADDR
// vc_chassis = 14 ;
2865: LD_ADDR_OWVAR 37
2869: PUSH
2870: LD_INT 14
2872: ST_TO_ADDR
// vc_weapon = 26 ;
2873: LD_ADDR_OWVAR 40
2877: PUSH
2878: LD_INT 26
2880: ST_TO_ADDR
// BurlakVeh = CreateVehicle ;
2881: LD_ADDR_EXP 41
2885: PUSH
2886: CALL_OW 45
2890: ST_TO_ADDR
// PlaceUnitArea ( BurlakVeh , BurlakArea , false ) ;
2891: LD_EXP 41
2895: PPUSH
2896: LD_INT 2
2898: PPUSH
2899: LD_INT 0
2901: PPUSH
2902: CALL_OW 49
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
2906: LD_EXP 33
2910: PPUSH
2911: LD_EXP 41
2915: PPUSH
2916: CALL_OW 52
// end ; end_of_file
2920: LD_VAR 0 1
2924: RET
// export function InitSikorskiTeam ; var i , j ; begin
2925: LD_INT 0
2927: PPUSH
2928: PPUSH
2929: PPUSH
// SikorskiTeam := SikorskiTeam ^ Sikorski ^ Gary ^ Bobby ^ Cyrus ^ Walker ^ Lynch ^ Turner ^ Jilian ^ McCreery ;
2930: LD_ADDR_EXP 4
2934: PUSH
2935: LD_EXP 4
2939: PUSH
2940: LD_EXP 49
2944: ADD
2945: PUSH
2946: LD_EXP 54
2950: ADD
2951: PUSH
2952: LD_EXP 52
2956: ADD
2957: PUSH
2958: LD_EXP 53
2962: ADD
2963: PUSH
2964: LD_EXP 57
2968: ADD
2969: PUSH
2970: LD_EXP 55
2974: ADD
2975: PUSH
2976: LD_EXP 59
2980: ADD
2981: PUSH
2982: LD_EXP 58
2986: ADD
2987: PUSH
2988: LD_EXP 56
2992: ADD
2993: ST_TO_ADDR
// Uc_side := 4 ;
2994: LD_ADDR_OWVAR 20
2998: PUSH
2999: LD_INT 4
3001: ST_TO_ADDR
// Uc_Nation := 1 ;
3002: LD_ADDR_OWVAR 21
3006: PUSH
3007: LD_INT 1
3009: ST_TO_ADDR
// Hc_Name := Jeremy Sikorski ;
3010: LD_ADDR_OWVAR 26
3014: PUSH
3015: LD_STRING Jeremy Sikorski
3017: ST_TO_ADDR
// Hc_Class := 1 ;
3018: LD_ADDR_OWVAR 28
3022: PUSH
3023: LD_INT 1
3025: ST_TO_ADDR
// Hc_Sex := 1 ;
3026: LD_ADDR_OWVAR 27
3030: PUSH
3031: LD_INT 1
3033: ST_TO_ADDR
// Hc_Basic_Skills := [ 0 , 0 , 0 , 0 ] ;
3034: LD_ADDR_OWVAR 30
3038: PUSH
3039: LD_INT 0
3041: PUSH
3042: LD_INT 0
3044: PUSH
3045: LD_INT 0
3047: PUSH
3048: LD_INT 0
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: LIST
3055: LIST
3056: ST_TO_ADDR
// Hc_Skills := [ 6 , 3 , 4 , 1 ] ;
3057: LD_ADDR_OWVAR 31
3061: PUSH
3062: LD_INT 6
3064: PUSH
3065: LD_INT 3
3067: PUSH
3068: LD_INT 4
3070: PUSH
3071: LD_INT 1
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: LIST
3078: LIST
3079: ST_TO_ADDR
// Hc_Gallery := us ;
3080: LD_ADDR_OWVAR 33
3084: PUSH
3085: LD_STRING us
3087: ST_TO_ADDR
// Hc_Face_Number := 19 ;
3088: LD_ADDR_OWVAR 34
3092: PUSH
3093: LD_INT 19
3095: ST_TO_ADDR
// Sikorski := CreateHuman ;
3096: LD_ADDR_EXP 49
3100: PUSH
3101: CALL_OW 44
3105: ST_TO_ADDR
// SikorskiMeat := CreateHuman ;
3106: LD_ADDR_EXP 50
3110: PUSH
3111: CALL_OW 44
3115: ST_TO_ADDR
// Hc_Name := Kpt. Jack Truman ;
3116: LD_ADDR_OWVAR 26
3120: PUSH
3121: LD_STRING Kpt. Jack Truman
3123: ST_TO_ADDR
// Hc_Skills := [ 8 , 5 , 3 , 1 ] ;
3124: LD_ADDR_OWVAR 31
3128: PUSH
3129: LD_INT 8
3131: PUSH
3132: LD_INT 5
3134: PUSH
3135: LD_INT 3
3137: PUSH
3138: LD_INT 1
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: ST_TO_ADDR
// Hc_Face_Number := 26 ;
3147: LD_ADDR_OWVAR 34
3151: PUSH
3152: LD_INT 26
3154: ST_TO_ADDR
// Truman := CreateHuman ;
3155: LD_ADDR_EXP 51
3159: PUSH
3160: CALL_OW 44
3164: ST_TO_ADDR
// Hc_Name := Cyrus Parker ;
3165: LD_ADDR_OWVAR 26
3169: PUSH
3170: LD_STRING Cyrus Parker
3172: ST_TO_ADDR
// Hc_Skills := [ 6 , 3 , 2 , 2 ] ;
3173: LD_ADDR_OWVAR 31
3177: PUSH
3178: LD_INT 6
3180: PUSH
3181: LD_INT 3
3183: PUSH
3184: LD_INT 2
3186: PUSH
3187: LD_INT 2
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: LIST
3194: LIST
3195: ST_TO_ADDR
// Hc_Face_Number := 8 ;
3196: LD_ADDR_OWVAR 34
3200: PUSH
3201: LD_INT 8
3203: ST_TO_ADDR
// Cyrus := CreateHuman ;
3204: LD_ADDR_EXP 53
3208: PUSH
3209: CALL_OW 44
3213: ST_TO_ADDR
// Hc_Name := Bobby Brandon ;
3214: LD_ADDR_OWVAR 26
3218: PUSH
3219: LD_STRING Bobby Brandon
3221: ST_TO_ADDR
// Hc_Skills := [ 3 , 5 , 8 , 3 ] ;
3222: LD_ADDR_OWVAR 31
3226: PUSH
3227: LD_INT 3
3229: PUSH
3230: LD_INT 5
3232: PUSH
3233: LD_INT 8
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: ST_TO_ADDR
// Hc_Face_Number := 9 ;
3245: LD_ADDR_OWVAR 34
3249: PUSH
3250: LD_INT 9
3252: ST_TO_ADDR
// Bobby := CreateHuman ;
3253: LD_ADDR_EXP 52
3257: PUSH
3258: CALL_OW 44
3262: ST_TO_ADDR
// Hc_Name := Gary Grant ;
3263: LD_ADDR_OWVAR 26
3267: PUSH
3268: LD_STRING Gary Grant
3270: ST_TO_ADDR
// Hc_Skills := [ 7 , 3 , 1 , 1 ] ;
3271: LD_ADDR_OWVAR 31
3275: PUSH
3276: LD_INT 7
3278: PUSH
3279: LD_INT 3
3281: PUSH
3282: LD_INT 1
3284: PUSH
3285: LD_INT 1
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: ST_TO_ADDR
// Hc_Face_Number := 20 ;
3294: LD_ADDR_OWVAR 34
3298: PUSH
3299: LD_INT 20
3301: ST_TO_ADDR
// Gary := CreateHuman ;
3302: LD_ADDR_EXP 54
3306: PUSH
3307: CALL_OW 44
3311: ST_TO_ADDR
// Hc_Name := Gary Grant ;
3312: LD_ADDR_OWVAR 26
3316: PUSH
3317: LD_STRING Gary Grant
3319: ST_TO_ADDR
// Hc_Skills := [ 7 , 3 , 1 , 1 ] ;
3320: LD_ADDR_OWVAR 31
3324: PUSH
3325: LD_INT 7
3327: PUSH
3328: LD_INT 3
3330: PUSH
3331: LD_INT 1
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: LIST
3341: LIST
3342: ST_TO_ADDR
// Hc_Face_Number := 20 ;
3343: LD_ADDR_OWVAR 34
3347: PUSH
3348: LD_INT 20
3350: ST_TO_ADDR
// Gary := CreateHuman ;
3351: LD_ADDR_EXP 54
3355: PUSH
3356: CALL_OW 44
3360: ST_TO_ADDR
// Hc_Name := Henry Lynch ;
3361: LD_ADDR_OWVAR 26
3365: PUSH
3366: LD_STRING Henry Lynch
3368: ST_TO_ADDR
// Hc_Skills := [ 6 , 2 , 2 , 3 ] ;
3369: LD_ADDR_OWVAR 31
3373: PUSH
3374: LD_INT 6
3376: PUSH
3377: LD_INT 2
3379: PUSH
3380: LD_INT 2
3382: PUSH
3383: LD_INT 3
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: ST_TO_ADDR
// Hc_Gallery := SecondCharsGal ;
3392: LD_ADDR_OWVAR 33
3396: PUSH
3397: LD_STRING SecondCharsGal
3399: ST_TO_ADDR
// Hc_Face_Number := 49 ;
3400: LD_ADDR_OWVAR 34
3404: PUSH
3405: LD_INT 49
3407: ST_TO_ADDR
// Lynch := CreateHuman ;
3408: LD_ADDR_EXP 55
3412: PUSH
3413: CALL_OW 44
3417: ST_TO_ADDR
// Hc_Name := Mike Turner ;
3418: LD_ADDR_OWVAR 26
3422: PUSH
3423: LD_STRING Mike Turner
3425: ST_TO_ADDR
// Hc_Skills := [ 3 , 6 , 3 , 2 ] ;
3426: LD_ADDR_OWVAR 31
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: LD_INT 6
3436: PUSH
3437: LD_INT 3
3439: PUSH
3440: LD_INT 2
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: ST_TO_ADDR
// Hc_Face_Number := 62 ;
3449: LD_ADDR_OWVAR 34
3453: PUSH
3454: LD_INT 62
3456: ST_TO_ADDR
// Turner := CreateHuman ;
3457: LD_ADDR_EXP 59
3461: PUSH
3462: CALL_OW 44
3466: ST_TO_ADDR
// Hc_Name := Hallie Jilian ;
3467: LD_ADDR_OWVAR 26
3471: PUSH
3472: LD_STRING Hallie Jilian
3474: ST_TO_ADDR
// Hc_Skills := [ 2 , 5 , 2 , 2 ] ;
3475: LD_ADDR_OWVAR 31
3479: PUSH
3480: LD_INT 2
3482: PUSH
3483: LD_INT 5
3485: PUSH
3486: LD_INT 2
3488: PUSH
3489: LD_INT 2
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: LIST
3496: LIST
3497: ST_TO_ADDR
// Hc_Sex := 2 ;
3498: LD_ADDR_OWVAR 27
3502: PUSH
3503: LD_INT 2
3505: ST_TO_ADDR
// Hc_Face_Number := 39 ;
3506: LD_ADDR_OWVAR 34
3510: PUSH
3511: LD_INT 39
3513: ST_TO_ADDR
// Jilian := CreateHuman ;
3514: LD_ADDR_EXP 58
3518: PUSH
3519: CALL_OW 44
3523: ST_TO_ADDR
// Hc_Name := Michael Walker ;
3524: LD_ADDR_OWVAR 26
3528: PUSH
3529: LD_STRING Michael Walker
3531: ST_TO_ADDR
// Hc_Skills := [ 2 , 2 , 3 , 5 ] ;
3532: LD_ADDR_OWVAR 31
3536: PUSH
3537: LD_INT 2
3539: PUSH
3540: LD_INT 2
3542: PUSH
3543: LD_INT 3
3545: PUSH
3546: LD_INT 5
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: ST_TO_ADDR
// Hc_Sex := 1 ;
3555: LD_ADDR_OWVAR 27
3559: PUSH
3560: LD_INT 1
3562: ST_TO_ADDR
// Hc_Class := 4 ;
3563: LD_ADDR_OWVAR 28
3567: PUSH
3568: LD_INT 4
3570: ST_TO_ADDR
// Hc_Face_Number := 48 ;
3571: LD_ADDR_OWVAR 34
3575: PUSH
3576: LD_INT 48
3578: ST_TO_ADDR
// Walker := CreateHuman ;
3579: LD_ADDR_EXP 57
3583: PUSH
3584: CALL_OW 44
3588: ST_TO_ADDR
// Hc_Name := Peter McCreery ;
3589: LD_ADDR_OWVAR 26
3593: PUSH
3594: LD_STRING Peter McCreery
3596: ST_TO_ADDR
// Hc_Skills := [ 1 , 0 , 3 , 6 ] ;
3597: LD_ADDR_OWVAR 31
3601: PUSH
3602: LD_INT 1
3604: PUSH
3605: LD_INT 0
3607: PUSH
3608: LD_INT 3
3610: PUSH
3611: LD_INT 6
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: ST_TO_ADDR
// Hc_Face_Number := 58 ;
3620: LD_ADDR_OWVAR 34
3624: PUSH
3625: LD_INT 58
3627: ST_TO_ADDR
// McCreery := CreateHuman ;
3628: LD_ADDR_EXP 56
3632: PUSH
3633: CALL_OW 44
3637: ST_TO_ADDR
// SikorskiTeam := SikorskiTeam ^ Sikorski ^ Truman ^ Gary ^ Bobby ^ Cyrus ^ Walker ^ Lynch ^ Turner ^ Jilian ^ McCreery ;
3638: LD_ADDR_EXP 4
3642: PUSH
3643: LD_EXP 4
3647: PUSH
3648: LD_EXP 49
3652: ADD
3653: PUSH
3654: LD_EXP 51
3658: ADD
3659: PUSH
3660: LD_EXP 54
3664: ADD
3665: PUSH
3666: LD_EXP 52
3670: ADD
3671: PUSH
3672: LD_EXP 53
3676: ADD
3677: PUSH
3678: LD_EXP 57
3682: ADD
3683: PUSH
3684: LD_EXP 55
3688: ADD
3689: PUSH
3690: LD_EXP 59
3694: ADD
3695: PUSH
3696: LD_EXP 58
3700: ADD
3701: PUSH
3702: LD_EXP 56
3706: ADD
3707: ST_TO_ADDR
// PlaceUnitArea ( Sikorski , SikorskiArea , false ) ;
3708: LD_EXP 49
3712: PPUSH
3713: LD_INT 9
3715: PPUSH
3716: LD_INT 0
3718: PPUSH
3719: CALL_OW 49
// PlaceUnitArea ( Truman , SikorskiArea , false ) ;
3723: LD_EXP 51
3727: PPUSH
3728: LD_INT 9
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 49
// PlaceUnitArea ( Cyrus , SikorskiArea , false ) ;
3738: LD_EXP 53
3742: PPUSH
3743: LD_INT 9
3745: PPUSH
3746: LD_INT 0
3748: PPUSH
3749: CALL_OW 49
// PlaceUnitArea ( Bobby , SikorskiArea , false ) ;
3753: LD_EXP 52
3757: PPUSH
3758: LD_INT 9
3760: PPUSH
3761: LD_INT 0
3763: PPUSH
3764: CALL_OW 49
// PlaceUnitArea ( Gary , SikorskiArea , false ) ;
3768: LD_EXP 54
3772: PPUSH
3773: LD_INT 9
3775: PPUSH
3776: LD_INT 0
3778: PPUSH
3779: CALL_OW 49
// PlaceUnitArea ( Lynch , SikorskiArea , false ) ;
3783: LD_EXP 55
3787: PPUSH
3788: LD_INT 9
3790: PPUSH
3791: LD_INT 0
3793: PPUSH
3794: CALL_OW 49
// PlaceUnitArea ( Turner , SikorskiArea , false ) ;
3798: LD_EXP 59
3802: PPUSH
3803: LD_INT 9
3805: PPUSH
3806: LD_INT 0
3808: PPUSH
3809: CALL_OW 49
// PlaceUnitArea ( Jilian , SikorskiArea , false ) ;
3813: LD_EXP 58
3817: PPUSH
3818: LD_INT 9
3820: PPUSH
3821: LD_INT 0
3823: PPUSH
3824: CALL_OW 49
// PlaceUnitArea ( Walker , SikorskiArea , false ) ;
3828: LD_EXP 57
3832: PPUSH
3833: LD_INT 9
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 49
// PlaceUnitArea ( McCreery , SikorskiArea , false ) ;
3843: LD_EXP 56
3847: PPUSH
3848: LD_INT 9
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 49
// end ;
3858: LD_VAR 0 1
3862: RET
// every 0 0$1 trigger start_ended = true do
3863: LD_EXP 69
3867: PUSH
3868: LD_INT 1
3870: EQUAL
3871: IFFALSE 3901
3873: GO 3875
3875: DISABLE
// begin AddResourceType ( GetBase ( Ovsyenko ) , mat_cans , 100 ) ;
3876: LD_INT 74
3878: PPUSH
3879: CALL_OW 274
3883: PPUSH
3884: LD_INT 1
3886: PPUSH
3887: LD_INT 100
3889: PPUSH
3890: CALL_OW 276
// ComUpgrade ( Ovsyenko ) ;
3894: LD_INT 74
3896: PPUSH
3897: CALL_OW 146
// end ;
3901: END
// export function InitTerminal ; var i , y , turrety , lab , zbrojka ; begin
3902: LD_INT 0
3904: PPUSH
3905: PPUSH
3906: PPUSH
3907: PPUSH
3908: PPUSH
3909: PPUSH
// Hc_Gallery :=  ;
3910: LD_ADDR_OWVAR 33
3914: PUSH
3915: LD_STRING 
3917: ST_TO_ADDR
// Hc_Name :=  ;
3918: LD_ADDR_OWVAR 26
3922: PUSH
3923: LD_STRING 
3925: ST_TO_ADDR
// MainTerminalCrew := [ ] ;
3926: LD_ADDR_EXP 6
3930: PUSH
3931: EMPTY
3932: ST_TO_ADDR
// uc_side := 1 ;
3933: LD_ADDR_OWVAR 20
3937: PUSH
3938: LD_INT 1
3940: ST_TO_ADDR
// uc_nation := 1 ;
3941: LD_ADDR_OWVAR 21
3945: PUSH
3946: LD_INT 1
3948: ST_TO_ADDR
// PrepareSoldier ( rand ( 0 , 1 ) , 10 ) ;
3949: LD_INT 0
3951: PPUSH
3952: LD_INT 1
3954: PPUSH
3955: CALL_OW 12
3959: PPUSH
3960: LD_INT 10
3962: PPUSH
3963: CALL_OW 381
// NorthSold := CreateHuman ;
3967: LD_ADDR_EXP 61
3971: PUSH
3972: CALL_OW 44
3976: ST_TO_ADDR
// PlaceHumanInUnit ( NorthSold , AmB4 ) ;
3977: LD_EXP 61
3981: PPUSH
3982: LD_INT 104
3984: PPUSH
3985: CALL_OW 52
// for i = 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
3989: LD_ADDR_VAR 0 2
3993: PUSH
3994: DOUBLE
3995: LD_INT 1
3997: DEC
3998: ST_TO_ADDR
3999: LD_INT 8
4001: PUSH
4002: LD_INT 9
4004: PUSH
4005: LD_INT 10
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: LIST
4012: PUSH
4013: LD_OWVAR 67
4017: ARRAY
4018: PUSH
4019: FOR_TO
4020: IFFALSE 4075
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4022: LD_INT 0
4024: PPUSH
4025: LD_INT 1
4027: PPUSH
4028: CALL_OW 12
4032: PPUSH
4033: LD_INT 2
4035: PUSH
4036: LD_INT 3
4038: PUSH
4039: LD_INT 6
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: LIST
4046: PUSH
4047: LD_OWVAR 67
4051: ARRAY
4052: PPUSH
4053: CALL_OW 381
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
4057: LD_ADDR_EXP 6
4061: PUSH
4062: LD_EXP 6
4066: PUSH
4067: CALL_OW 44
4071: ADD
4072: ST_TO_ADDR
// end ;
4073: GO 4019
4075: POP
4076: POP
// for i = 1 to 1 do
4077: LD_ADDR_VAR 0 2
4081: PUSH
4082: DOUBLE
4083: LD_INT 1
4085: DEC
4086: ST_TO_ADDR
4087: LD_INT 1
4089: PUSH
4090: FOR_TO
4091: IFFALSE 4146
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4093: LD_INT 0
4095: PPUSH
4096: LD_INT 1
4098: PPUSH
4099: CALL_OW 12
4103: PPUSH
4104: LD_INT 2
4106: PUSH
4107: LD_INT 3
4109: PUSH
4110: LD_INT 6
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: PUSH
4118: LD_OWVAR 67
4122: ARRAY
4123: PPUSH
4124: CALL_OW 382
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
4128: LD_ADDR_EXP 6
4132: PUSH
4133: LD_EXP 6
4137: PUSH
4138: CALL_OW 44
4142: ADD
4143: ST_TO_ADDR
// end ;
4144: GO 4090
4146: POP
4147: POP
// for i = 1 to 2 do
4148: LD_ADDR_VAR 0 2
4152: PUSH
4153: DOUBLE
4154: LD_INT 1
4156: DEC
4157: ST_TO_ADDR
4158: LD_INT 2
4160: PUSH
4161: FOR_TO
4162: IFFALSE 4217
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4164: LD_INT 0
4166: PPUSH
4167: LD_INT 1
4169: PPUSH
4170: CALL_OW 12
4174: PPUSH
4175: LD_INT 2
4177: PUSH
4178: LD_INT 3
4180: PUSH
4181: LD_INT 6
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: PUSH
4189: LD_OWVAR 67
4193: ARRAY
4194: PPUSH
4195: CALL_OW 384
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
4199: LD_ADDR_EXP 6
4203: PUSH
4204: LD_EXP 6
4208: PUSH
4209: CALL_OW 44
4213: ADD
4214: ST_TO_ADDR
// end ;
4215: GO 4161
4217: POP
4218: POP
// turrety := FilterUnitsInArea ( MainTerminalArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
4219: LD_ADDR_VAR 0 4
4223: PUSH
4224: LD_INT 16
4226: PPUSH
4227: LD_INT 2
4229: PUSH
4230: LD_INT 30
4232: PUSH
4233: LD_INT 31
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 30
4242: PUSH
4243: LD_INT 32
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: LIST
4254: PPUSH
4255: CALL_OW 70
4259: ST_TO_ADDR
// lab := FilterUnitsInArea ( MainTerminalArea , [ [ f_btype , b_lab_full ] ] ) ;
4260: LD_ADDR_VAR 0 5
4264: PUSH
4265: LD_INT 16
4267: PPUSH
4268: LD_INT 30
4270: PUSH
4271: LD_INT 8
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PUSH
4278: EMPTY
4279: LIST
4280: PPUSH
4281: CALL_OW 70
4285: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( MainTerminalArea , [ [ f_btype , b_barracks ] ] ) ;
4286: LD_ADDR_VAR 0 6
4290: PUSH
4291: LD_INT 16
4293: PPUSH
4294: LD_INT 30
4296: PUSH
4297: LD_INT 5
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: PUSH
4304: EMPTY
4305: LIST
4306: PPUSH
4307: CALL_OW 70
4311: ST_TO_ADDR
// y := 1 ;
4312: LD_ADDR_VAR 0 3
4316: PUSH
4317: LD_INT 1
4319: ST_TO_ADDR
// for i in MainTerminalCrew do
4320: LD_ADDR_VAR 0 2
4324: PUSH
4325: LD_EXP 6
4329: PUSH
4330: FOR_IN
4331: IFFALSE 4488
// begin PlaceUnitArea ( i , TerminalPersonel , false ) ;
4333: LD_VAR 0 2
4337: PPUSH
4338: LD_INT 15
4340: PPUSH
4341: LD_INT 0
4343: PPUSH
4344: CALL_OW 49
// case GetClass ( i ) of 1 :
4348: LD_VAR 0 2
4352: PPUSH
4353: CALL_OW 257
4357: PUSH
4358: LD_INT 1
4360: DOUBLE
4361: EQUAL
4362: IFTRUE 4366
4364: GO 4433
4366: POP
// begin if y > 7 then
4367: LD_VAR 0 3
4371: PUSH
4372: LD_INT 7
4374: GREATER
4375: IFFALSE 4397
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
4377: LD_VAR 0 2
4381: PPUSH
4382: LD_VAR 0 6
4386: PUSH
4387: LD_INT 1
4389: ARRAY
4390: PPUSH
4391: CALL_OW 120
4395: GO 4417
// ComEnterUnit ( i , turrety [ y ] ) ;
4397: LD_VAR 0 2
4401: PPUSH
4402: LD_VAR 0 4
4406: PUSH
4407: LD_VAR 0 3
4411: ARRAY
4412: PPUSH
4413: CALL_OW 120
// y = y + 1 ;
4417: LD_ADDR_VAR 0 3
4421: PUSH
4422: LD_VAR 0 3
4426: PUSH
4427: LD_INT 1
4429: PLUS
4430: ST_TO_ADDR
// end ; 2 :
4431: GO 4486
4433: LD_INT 2
4435: DOUBLE
4436: EQUAL
4437: IFTRUE 4441
4439: GO 4456
4441: POP
// ComEnterUnit ( i , MainTerminal ) ; 4 :
4442: LD_VAR 0 2
4446: PPUSH
4447: LD_INT 257
4449: PPUSH
4450: CALL_OW 120
4454: GO 4486
4456: LD_INT 4
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4485
4464: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_VAR 0 5
4474: PUSH
4475: LD_INT 1
4477: ARRAY
4478: PPUSH
4479: CALL_OW 120
4483: GO 4486
4485: POP
// end ;
4486: GO 4330
4488: POP
4489: POP
// end ;
4490: LD_VAR 0 1
4494: RET
// export function InitAmerican ; var i , z , y , turrety , fabryka , Wieza , lab , zbrojka ; begin
4495: LD_INT 0
4497: PPUSH
4498: PPUSH
4499: PPUSH
4500: PPUSH
4501: PPUSH
4502: PPUSH
4503: PPUSH
4504: PPUSH
4505: PPUSH
// Hc_Gallery :=  ;
4506: LD_ADDR_OWVAR 33
4510: PUSH
4511: LD_STRING 
4513: ST_TO_ADDR
// Hc_Name :=  ;
4514: LD_ADDR_OWVAR 26
4518: PUSH
4519: LD_STRING 
4521: ST_TO_ADDR
// WestTerminalCrew := [ ] ;
4522: LD_ADDR_EXP 5
4526: PUSH
4527: EMPTY
4528: ST_TO_ADDR
// uc_side := 1 ;
4529: LD_ADDR_OWVAR 20
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// uc_nation := 1 ;
4537: LD_ADDR_OWVAR 21
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// for i = 1 to [ 10 , 11 , 12 ] [ Difficulty ] do
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: DOUBLE
4551: LD_INT 1
4553: DEC
4554: ST_TO_ADDR
4555: LD_INT 10
4557: PUSH
4558: LD_INT 11
4560: PUSH
4561: LD_INT 12
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: PUSH
4569: LD_OWVAR 67
4573: ARRAY
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4631
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4578: LD_INT 0
4580: PPUSH
4581: LD_INT 1
4583: PPUSH
4584: CALL_OW 12
4588: PPUSH
4589: LD_INT 2
4591: PUSH
4592: LD_INT 3
4594: PUSH
4595: LD_INT 6
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: PUSH
4603: LD_OWVAR 67
4607: ARRAY
4608: PPUSH
4609: CALL_OW 381
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4613: LD_ADDR_EXP 5
4617: PUSH
4618: LD_EXP 5
4622: PUSH
4623: CALL_OW 44
4627: ADD
4628: ST_TO_ADDR
// end ;
4629: GO 4575
4631: POP
4632: POP
// for i = 1 to 2 do
4633: LD_ADDR_VAR 0 2
4637: PUSH
4638: DOUBLE
4639: LD_INT 1
4641: DEC
4642: ST_TO_ADDR
4643: LD_INT 2
4645: PUSH
4646: FOR_TO
4647: IFFALSE 4702
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4649: LD_INT 0
4651: PPUSH
4652: LD_INT 1
4654: PPUSH
4655: CALL_OW 12
4659: PPUSH
4660: LD_INT 2
4662: PUSH
4663: LD_INT 3
4665: PUSH
4666: LD_INT 6
4668: PUSH
4669: EMPTY
4670: LIST
4671: LIST
4672: LIST
4673: PUSH
4674: LD_OWVAR 67
4678: ARRAY
4679: PPUSH
4680: CALL_OW 382
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4684: LD_ADDR_EXP 5
4688: PUSH
4689: LD_EXP 5
4693: PUSH
4694: CALL_OW 44
4698: ADD
4699: ST_TO_ADDR
// end ;
4700: GO 4646
4702: POP
4703: POP
// for i = 1 to 6 do
4704: LD_ADDR_VAR 0 2
4708: PUSH
4709: DOUBLE
4710: LD_INT 1
4712: DEC
4713: ST_TO_ADDR
4714: LD_INT 6
4716: PUSH
4717: FOR_TO
4718: IFFALSE 4773
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4720: LD_INT 0
4722: PPUSH
4723: LD_INT 1
4725: PPUSH
4726: CALL_OW 12
4730: PPUSH
4731: LD_INT 2
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 6
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: LIST
4744: PUSH
4745: LD_OWVAR 67
4749: ARRAY
4750: PPUSH
4751: CALL_OW 383
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4755: LD_ADDR_EXP 5
4759: PUSH
4760: LD_EXP 5
4764: PUSH
4765: CALL_OW 44
4769: ADD
4770: ST_TO_ADDR
// end ;
4771: GO 4717
4773: POP
4774: POP
// for i = 1 to 2 do
4775: LD_ADDR_VAR 0 2
4779: PUSH
4780: DOUBLE
4781: LD_INT 1
4783: DEC
4784: ST_TO_ADDR
4785: LD_INT 2
4787: PUSH
4788: FOR_TO
4789: IFFALSE 4844
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4791: LD_INT 0
4793: PPUSH
4794: LD_INT 1
4796: PPUSH
4797: CALL_OW 12
4801: PPUSH
4802: LD_INT 2
4804: PUSH
4805: LD_INT 3
4807: PUSH
4808: LD_INT 6
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: LIST
4815: PUSH
4816: LD_OWVAR 67
4820: ARRAY
4821: PPUSH
4822: CALL_OW 384
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4826: LD_ADDR_EXP 5
4830: PUSH
4831: LD_EXP 5
4835: PUSH
4836: CALL_OW 44
4840: ADD
4841: ST_TO_ADDR
// end ;
4842: GO 4788
4844: POP
4845: POP
// turrety := FilterUnitsInArea ( WestTerminalArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
4846: LD_ADDR_VAR 0 5
4850: PUSH
4851: LD_INT 17
4853: PPUSH
4854: LD_INT 2
4856: PUSH
4857: LD_INT 30
4859: PUSH
4860: LD_INT 31
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: LD_INT 30
4869: PUSH
4870: LD_INT 32
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 70
4886: ST_TO_ADDR
// lab := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_lab_full ] ] ) ;
4887: LD_ADDR_VAR 0 8
4891: PUSH
4892: LD_INT 17
4894: PPUSH
4895: LD_INT 30
4897: PUSH
4898: LD_INT 8
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: EMPTY
4906: LIST
4907: PPUSH
4908: CALL_OW 70
4912: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_factory ] ] ) ;
4913: LD_ADDR_VAR 0 6
4917: PUSH
4918: LD_INT 17
4920: PPUSH
4921: LD_INT 30
4923: PUSH
4924: LD_INT 3
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: EMPTY
4932: LIST
4933: PPUSH
4934: CALL_OW 70
4938: ST_TO_ADDR
// wieza := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_control_tower ] ] ) ;
4939: LD_ADDR_VAR 0 7
4943: PUSH
4944: LD_INT 17
4946: PPUSH
4947: LD_INT 30
4949: PUSH
4950: LD_INT 36
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: EMPTY
4958: LIST
4959: PPUSH
4960: CALL_OW 70
4964: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_barracks ] ] ) ;
4965: LD_ADDR_VAR 0 9
4969: PUSH
4970: LD_INT 17
4972: PPUSH
4973: LD_INT 30
4975: PUSH
4976: LD_INT 5
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: PPUSH
4986: CALL_OW 70
4990: ST_TO_ADDR
// y := 1 ;
4991: LD_ADDR_VAR 0 4
4995: PUSH
4996: LD_INT 1
4998: ST_TO_ADDR
// z := 1 ;
4999: LD_ADDR_VAR 0 3
5003: PUSH
5004: LD_INT 1
5006: ST_TO_ADDR
// for i in WestTerminalCrew do
5007: LD_ADDR_VAR 0 2
5011: PUSH
5012: LD_EXP 5
5016: PUSH
5017: FOR_IN
5018: IFFALSE 5248
// begin PlaceUnitArea ( i , TerminalPersonel , false ) ;
5020: LD_VAR 0 2
5024: PPUSH
5025: LD_INT 15
5027: PPUSH
5028: LD_INT 0
5030: PPUSH
5031: CALL_OW 49
// case GetClass ( i ) of 1 :
5035: LD_VAR 0 2
5039: PPUSH
5040: CALL_OW 257
5044: PUSH
5045: LD_INT 1
5047: DOUBLE
5048: EQUAL
5049: IFTRUE 5053
5051: GO 5120
5053: POP
// begin if y > 9 then
5054: LD_VAR 0 4
5058: PUSH
5059: LD_INT 9
5061: GREATER
5062: IFFALSE 5084
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
5064: LD_VAR 0 2
5068: PPUSH
5069: LD_VAR 0 9
5073: PUSH
5074: LD_INT 1
5076: ARRAY
5077: PPUSH
5078: CALL_OW 120
5082: GO 5104
// ComEnterUnit ( i , turrety [ y ] ) ;
5084: LD_VAR 0 2
5088: PPUSH
5089: LD_VAR 0 5
5093: PUSH
5094: LD_VAR 0 4
5098: ARRAY
5099: PPUSH
5100: CALL_OW 120
// y = y + 1 ;
5104: LD_ADDR_VAR 0 4
5108: PUSH
5109: LD_VAR 0 4
5113: PUSH
5114: LD_INT 1
5116: PLUS
5117: ST_TO_ADDR
// end ; 2 :
5118: GO 5246
5120: LD_INT 2
5122: DOUBLE
5123: EQUAL
5124: IFTRUE 5128
5126: GO 5143
5128: POP
// ComEnterUnit ( i , WestTerminal ) ; 3 :
5129: LD_VAR 0 2
5133: PPUSH
5134: LD_INT 123
5136: PPUSH
5137: CALL_OW 120
5141: GO 5246
5143: LD_INT 3
5145: DOUBLE
5146: EQUAL
5147: IFTRUE 5151
5149: GO 5216
5151: POP
// begin if z > 3 then
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 3
5159: GREATER
5160: IFFALSE 5182
// ComEnterUnit ( i , fabryka [ 1 ] ) else
5162: LD_VAR 0 2
5166: PPUSH
5167: LD_VAR 0 6
5171: PUSH
5172: LD_INT 1
5174: ARRAY
5175: PPUSH
5176: CALL_OW 120
5180: GO 5200
// ComEnterUnit ( i , wieza [ 1 ] ) ;
5182: LD_VAR 0 2
5186: PPUSH
5187: LD_VAR 0 7
5191: PUSH
5192: LD_INT 1
5194: ARRAY
5195: PPUSH
5196: CALL_OW 120
// z = z + 1 ;
5200: LD_ADDR_VAR 0 3
5204: PUSH
5205: LD_VAR 0 3
5209: PUSH
5210: LD_INT 1
5212: PLUS
5213: ST_TO_ADDR
// end ; 4 :
5214: GO 5246
5216: LD_INT 4
5218: DOUBLE
5219: EQUAL
5220: IFTRUE 5224
5222: GO 5245
5224: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
5225: LD_VAR 0 2
5229: PPUSH
5230: LD_VAR 0 8
5234: PUSH
5235: LD_INT 1
5237: ARRAY
5238: PPUSH
5239: CALL_OW 120
5243: GO 5246
5245: POP
// end ;
5246: GO 5017
5248: POP
5249: POP
// Uc_Side := 1 ;
5250: LD_ADDR_OWVAR 20
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// Uc_Nation := 1 ;
5258: LD_ADDR_OWVAR 21
5262: PUSH
5263: LD_INT 1
5265: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , false ,  ) ;
5266: LD_ADDR_EXP 60
5270: PUSH
5271: LD_STRING Houten
5273: PPUSH
5274: LD_INT 0
5276: PPUSH
5277: LD_STRING 
5279: PPUSH
5280: CALL 9981 0 3
5284: ST_TO_ADDR
// PlaceHumanInUnit ( Houten , WestTerminal ) ;
5285: LD_EXP 60
5289: PPUSH
5290: LD_INT 123
5292: PPUSH
5293: CALL_OW 52
// end ;
5297: LD_VAR 0 1
5301: RET
// every 10 10$0 trigger start_ended = true do var i ;
5302: LD_EXP 69
5306: PUSH
5307: LD_INT 1
5309: EQUAL
5310: IFFALSE 5399
5312: GO 5314
5314: DISABLE
5315: LD_INT 0
5317: PPUSH
// begin Uc_Nation = 1 ;
5318: LD_ADDR_OWVAR 21
5322: PUSH
5323: LD_INT 1
5325: ST_TO_ADDR
// Uc_Side = 1 ;
5326: LD_ADDR_OWVAR 20
5330: PUSH
5331: LD_INT 1
5333: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5334: LD_ADDR_VAR 0 1
5338: PUSH
5339: DOUBLE
5340: LD_INT 1
5342: DEC
5343: ST_TO_ADDR
5344: LD_INT 4
5346: PUSH
5347: LD_INT 5
5349: PUSH
5350: LD_INT 6
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: LIST
5357: PUSH
5358: LD_OWVAR 67
5362: ARRAY
5363: PUSH
5364: FOR_TO
5365: IFFALSE 5396
// AddComConstruct ( AmFactory , 4 , 1 , 2 , rand ( 4 , 6 ) ) ;
5367: LD_INT 239
5369: PPUSH
5370: LD_INT 4
5372: PPUSH
5373: LD_INT 1
5375: PPUSH
5376: LD_INT 2
5378: PPUSH
5379: LD_INT 4
5381: PPUSH
5382: LD_INT 6
5384: PPUSH
5385: CALL_OW 12
5389: PPUSH
5390: CALL_OW 185
5394: GO 5364
5396: POP
5397: POP
// enable ;
5398: ENABLE
// end ;
5399: PPOPN 1
5401: END
// every 0 0$1 trigger attackers >= [ 4 , 5 , 6 ] [ Difficulty ] do var enemy , attacker ;
5402: LD_EXP 8
5406: PUSH
5407: LD_INT 4
5409: PUSH
5410: LD_INT 5
5412: PUSH
5413: LD_INT 6
5415: PUSH
5416: EMPTY
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: LD_OWVAR 67
5425: ARRAY
5426: GREATEREQUAL
5427: IFFALSE 5519
5429: GO 5431
5431: DISABLE
5432: LD_INT 0
5434: PPUSH
5435: PPUSH
// begin enable ;
5436: ENABLE
// enemy := Filterallunits ( [ f_side , 3 ] ) ;
5437: LD_ADDR_VAR 0 1
5441: PUSH
5442: LD_INT 22
5444: PUSH
5445: LD_INT 3
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PPUSH
5452: CALL_OW 69
5456: ST_TO_ADDR
// for attacker in UnitFilter ( attackers , [ [ f_ok ] , [ f_linked ] ] ) do
5457: LD_ADDR_VAR 0 2
5461: PUSH
5462: LD_EXP 8
5466: PPUSH
5467: LD_INT 50
5469: PUSH
5470: EMPTY
5471: LIST
5472: PUSH
5473: LD_INT 61
5475: PUSH
5476: EMPTY
5477: LIST
5478: PUSH
5479: EMPTY
5480: LIST
5481: LIST
5482: PPUSH
5483: CALL_OW 72
5487: PUSH
5488: FOR_IN
5489: IFFALSE 5517
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
5491: LD_VAR 0 2
5495: PPUSH
5496: LD_VAR 0 1
5500: PPUSH
5501: LD_VAR 0 2
5505: PPUSH
5506: CALL_OW 74
5510: PPUSH
5511: CALL_OW 115
5515: GO 5488
5517: POP
5518: POP
// end ; end_of_file
5519: PPOPN 2
5521: END
// export function Action ; begin
5522: LD_INT 0
5524: PPUSH
// ingame_video := true ;
5525: LD_ADDR_OWVAR 52
5529: PUSH
5530: LD_INT 1
5532: ST_TO_ADDR
// interface_hidden := true ;
5533: LD_ADDR_OWVAR 54
5537: PUSH
5538: LD_INT 1
5540: ST_TO_ADDR
// ComMoveToArea ( [ Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ] , PeopleStartArea ) ;
5541: LD_EXP 10
5545: PUSH
5546: LD_EXP 11
5550: PUSH
5551: LD_EXP 12
5555: PUSH
5556: LD_EXP 13
5560: PUSH
5561: LD_EXP 14
5565: PUSH
5566: LD_EXP 15
5570: PUSH
5571: LD_EXP 16
5575: PUSH
5576: LD_EXP 17
5580: PUSH
5581: LD_EXP 18
5585: PUSH
5586: LD_EXP 19
5590: PUSH
5591: LD_EXP 20
5595: PUSH
5596: LD_EXP 21
5600: PUSH
5601: LD_EXP 22
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: PPUSH
5621: LD_INT 10
5623: PPUSH
5624: CALL_OW 113
// ComMoveToArea ( Yakotich , YakotichStartArea ) ;
5628: LD_EXP 9
5632: PPUSH
5633: LD_INT 11
5635: PPUSH
5636: CALL_OW 113
// end ;
5640: LD_VAR 0 1
5644: RET
// every 0 0$1 trigger IsInArea ( Yakotich , YakotichStartArea ) do
5645: LD_EXP 9
5649: PPUSH
5650: LD_INT 11
5652: PPUSH
5653: CALL_OW 308
5657: IFFALSE 5724
5659: GO 5661
5661: DISABLE
// begin ComTurnUnit ( Yakotich , Mietek ) ;
5662: LD_EXP 9
5666: PPUSH
5667: LD_EXP 10
5671: PPUSH
5672: CALL_OW 119
// Say ( Yakotich , 3Yak-01 ) ;
5676: LD_EXP 9
5680: PPUSH
5681: LD_STRING 3Yak-01
5683: PPUSH
5684: CALL_OW 88
// ComEnterUnit ( Yakotich , Ovsyenko ) ;
5688: LD_EXP 9
5692: PPUSH
5693: LD_INT 74
5695: PPUSH
5696: CALL_OW 120
// ComEnterUnit ( Mietek , Ovsyenko ) ;
5700: LD_EXP 10
5704: PPUSH
5705: LD_INT 74
5707: PPUSH
5708: CALL_OW 120
// ComEnterUnit ( Boris , Ovsyenko ) ;
5712: LD_EXP 11
5716: PPUSH
5717: LD_INT 74
5719: PPUSH
5720: CALL_OW 120
// end ;
5724: END
// export engs ; export function SikorskiAction ; var x , y , i , tmp , t , engs , un , speaker ; begin
5725: LD_INT 0
5727: PPUSH
5728: PPUSH
5729: PPUSH
5730: PPUSH
5731: PPUSH
5732: PPUSH
5733: PPUSH
5734: PPUSH
5735: PPUSH
// x := 101 ;
5736: LD_ADDR_VAR 0 2
5740: PUSH
5741: LD_INT 101
5743: ST_TO_ADDR
// y := 116 ;
5744: LD_ADDR_VAR 0 3
5748: PUSH
5749: LD_INT 116
5751: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 30 ) ;
5752: LD_VAR 0 2
5756: PPUSH
5757: LD_VAR 0 3
5761: PPUSH
5762: LD_INT 1
5764: PPUSH
5765: LD_INT 30
5767: NEG
5768: PPUSH
5769: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
5773: LD_VAR 0 2
5777: PPUSH
5778: LD_VAR 0 3
5782: PPUSH
5783: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Sikorski ;
5787: LD_ADDR_VAR 0 5
5791: PUSH
5792: LD_INT 22
5794: PUSH
5795: LD_INT 4
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 21
5804: PUSH
5805: LD_INT 1
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PPUSH
5816: CALL_OW 69
5820: PUSH
5821: LD_EXP 49
5825: DIFF
5826: ST_TO_ADDR
// AddComTurnXY ( tmp , 111 , 125 ) ;
5827: LD_VAR 0 5
5831: PPUSH
5832: LD_INT 111
5834: PPUSH
5835: LD_INT 125
5837: PPUSH
5838: CALL_OW 178
// wait ( 0 0$02 ) ;
5842: LD_INT 70
5844: PPUSH
5845: CALL_OW 67
// AddComMoveXY ( Sikorski , 105 , 111 ) ;
5849: LD_EXP 49
5853: PPUSH
5854: LD_INT 105
5856: PPUSH
5857: LD_INT 111
5859: PPUSH
5860: CALL_OW 171
// ComAgressiveMove ( tmp , 108 , 117 ) ;
5864: LD_VAR 0 5
5868: PPUSH
5869: LD_INT 108
5871: PPUSH
5872: LD_INT 117
5874: PPUSH
5875: CALL_OW 114
// Say ( Sikorski , 3Sik-01 ) ;
5879: LD_EXP 49
5883: PPUSH
5884: LD_STRING 3Sik-01
5886: PPUSH
5887: CALL_OW 88
// Say ( Yakotich , 3Yak-08 ) ;
5891: LD_EXP 9
5895: PPUSH
5896: LD_STRING 3Yak-08
5898: PPUSH
5899: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
5903: LD_INT 35
5905: PPUSH
5906: CALL_OW 67
// until See ( 3 , Sikorski ) ;
5910: LD_INT 3
5912: PPUSH
5913: LD_EXP 49
5917: PPUSH
5918: CALL_OW 292
5922: IFFALSE 5903
// un := UnitsInside ( NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , Sikorski ) ) [ 1 ] ;
5924: LD_ADDR_VAR 0 8
5928: PUSH
5929: LD_INT 30
5931: PUSH
5932: LD_INT 31
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PPUSH
5939: CALL_OW 69
5943: PPUSH
5944: LD_EXP 49
5948: PPUSH
5949: CALL_OW 74
5953: PPUSH
5954: CALL_OW 313
5958: PUSH
5959: LD_INT 1
5961: ARRAY
5962: ST_TO_ADDR
// AddComAttackUnit ( un , Sikorski ) ;
5963: LD_VAR 0 8
5967: PPUSH
5968: LD_EXP 49
5972: PPUSH
5973: CALL_OW 175
// wait ( 0 0$3 ) ;
5977: LD_INT 105
5979: PPUSH
5980: CALL_OW 67
// MineExplosion ( 111 , 116 , 1 ) ;
5984: LD_INT 111
5986: PPUSH
5987: LD_INT 116
5989: PPUSH
5990: LD_INT 1
5992: PPUSH
5993: CALL_OW 453
// repeat wait ( 0 0$01 ) ;
5997: LD_INT 35
5999: PPUSH
6000: CALL_OW 67
// until IsDying ( un ) ;
6004: LD_VAR 0 8
6008: PPUSH
6009: CALL_OW 303
6013: IFFALSE 5997
// DoNotAttack ( 3 , Sikorski ) ;
6015: LD_INT 3
6017: PPUSH
6018: LD_EXP 49
6022: PPUSH
6023: CALL_OW 471
// AddComMoveXY ( Sikorski , 110 , 120 ) ;
6027: LD_EXP 49
6031: PPUSH
6032: LD_INT 110
6034: PPUSH
6035: LD_INT 120
6037: PPUSH
6038: CALL_OW 171
// AddComAttackUnit ( Sikorski , Ovsyenko ) ;
6042: LD_EXP 49
6046: PPUSH
6047: LD_INT 74
6049: PPUSH
6050: CALL_OW 175
// Say ( Yakotich , 3Yak-09 ) ;
6054: LD_EXP 9
6058: PPUSH
6059: LD_STRING 3Yak-09
6061: PPUSH
6062: CALL_OW 88
// ComExitBuilding ( [ f_side , 3 ] ) ;
6066: LD_INT 22
6068: PUSH
6069: LD_INT 3
6071: PUSH
6072: EMPTY
6073: LIST
6074: LIST
6075: PPUSH
6076: CALL_OW 122
// AddComAgressiveMove ( [ f_side , 3 ] , 106 , 114 ) ;
6080: LD_INT 22
6082: PUSH
6083: LD_INT 3
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PPUSH
6090: LD_INT 106
6092: PPUSH
6093: LD_INT 114
6095: PPUSH
6096: CALL_OW 174
// ComMoveXY ( tmp , 109 , 119 ) ;
6100: LD_VAR 0 5
6104: PPUSH
6105: LD_INT 109
6107: PPUSH
6108: LD_INT 119
6110: PPUSH
6111: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
6115: LD_VAR 0 5
6119: PPUSH
6120: LD_INT 111
6122: PPUSH
6123: LD_INT 125
6125: PPUSH
6126: CALL_OW 178
// ComExitBuilding ( Yakotich ) ;
6130: LD_EXP 9
6134: PPUSH
6135: CALL_OW 122
// AddComAttackUnit ( Yakotich , Sikorski ) ;
6139: LD_EXP 9
6143: PPUSH
6144: LD_EXP 49
6148: PPUSH
6149: CALL_OW 175
// Say ( Sikorski , 3Sik-02 ) ;
6153: LD_EXP 49
6157: PPUSH
6158: LD_STRING 3Sik-02
6160: PPUSH
6161: CALL_OW 88
// wait ( 0 0$2 ) ;
6165: LD_INT 70
6167: PPUSH
6168: CALL_OW 67
// SayEffect ( 3smrtsikora ) ;
6172: LD_STRING 3smrtsikora
6174: PPUSH
6175: CALL_OW 96
// KillUnit ( Sikorski ) ;
6179: LD_EXP 49
6183: PPUSH
6184: CALL_OW 66
// sikorski_dead = true ;
6188: LD_ADDR_EXP 77
6192: PUSH
6193: LD_INT 1
6195: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6196: LD_INT 35
6198: PPUSH
6199: CALL_OW 67
// engs := FilterAllUnits ( [ [ f_class , 2 ] , [ f_side , 3 ] ] ) ;
6203: LD_ADDR_VAR 0 7
6207: PUSH
6208: LD_INT 25
6210: PUSH
6211: LD_INT 2
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: LD_INT 22
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PPUSH
6232: CALL_OW 69
6236: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
6237: LD_VAR 0 7
6241: PPUSH
6242: CALL_OW 122
// for i = 1 to engs do
6246: LD_ADDR_VAR 0 4
6250: PUSH
6251: DOUBLE
6252: LD_INT 1
6254: DEC
6255: ST_TO_ADDR
6256: LD_VAR 0 7
6260: PUSH
6261: FOR_TO
6262: IFFALSE 6302
// AddComEnterUnit ( engs [ i ] , FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) [ i ] ) ;
6264: LD_VAR 0 7
6268: PUSH
6269: LD_VAR 0 4
6273: ARRAY
6274: PPUSH
6275: LD_INT 34
6277: PUSH
6278: LD_INT 51
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PPUSH
6285: CALL_OW 69
6289: PUSH
6290: LD_VAR 0 4
6294: ARRAY
6295: PPUSH
6296: CALL_OW 180
6300: GO 6261
6302: POP
6303: POP
// AddComTransport ( Anton , Ovsyenko , mat_siberit ) ;
6304: LD_EXP 27
6308: PPUSH
6309: LD_INT 74
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: CALL_OW 211
// AddComWait ( Boris , 0 0$1 ) ;
6319: LD_EXP 11
6323: PPUSH
6324: LD_INT 35
6326: PPUSH
6327: CALL_OW 202
// AddComTransport ( Boris , Ovsyenko , mat_cans ) ;
6331: LD_EXP 11
6335: PPUSH
6336: LD_INT 74
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 211
// AddComMoveXY ( engs , 147 , 220 ) ;
6346: LD_VAR 0 7
6350: PPUSH
6351: LD_INT 147
6353: PPUSH
6354: LD_INT 220
6356: PPUSH
6357: CALL_OW 171
// AddComExitVehicle ( engs ) ;
6361: LD_VAR 0 7
6365: PPUSH
6366: CALL_OW 181
// AddComMoveXY ( Yakotich , 148 , 208 ) ;
6370: LD_EXP 9
6374: PPUSH
6375: LD_INT 148
6377: PPUSH
6378: LD_INT 208
6380: PPUSH
6381: CALL_OW 171
// un := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
6385: LD_ADDR_VAR 0 8
6389: PUSH
6390: LD_INT 22
6392: PUSH
6393: LD_INT 3
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 25
6402: PUSH
6403: LD_INT 1
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: EMPTY
6411: LIST
6412: LIST
6413: PPUSH
6414: CALL_OW 69
6418: ST_TO_ADDR
// ComExitBuilding ( un ) ;
6419: LD_VAR 0 8
6423: PPUSH
6424: CALL_OW 122
// ComExitBuilding ( Grigori ) ;
6428: LD_EXP 26
6432: PPUSH
6433: CALL_OW 122
// AddComMoveXY ( un , 148 , 208 ) ;
6437: LD_VAR 0 8
6441: PPUSH
6442: LD_INT 148
6444: PPUSH
6445: LD_INT 208
6447: PPUSH
6448: CALL_OW 171
// AddComMoveXY ( Grigori , 148 , 208 ) ;
6452: LD_EXP 26
6456: PPUSH
6457: LD_INT 148
6459: PPUSH
6460: LD_INT 208
6462: PPUSH
6463: CALL_OW 171
// wait ( 5 ) ;
6467: LD_INT 5
6469: PPUSH
6470: CALL_OW 67
// Say ( Jilian , 3Rand-01 ) ;
6474: LD_EXP 58
6478: PPUSH
6479: LD_STRING 3Rand-01
6481: PPUSH
6482: CALL_OW 88
// ComMoveToArea ( SikorskiTeam , OvsyenkoArea ) ;
6486: LD_EXP 4
6490: PPUSH
6491: LD_INT 6
6493: PPUSH
6494: CALL_OW 113
// wait ( 0 0$7 ) ;
6498: LD_INT 245
6500: PPUSH
6501: CALL_OW 67
// t := [ [ 104 , 117 ] , [ 115 , 123 ] , [ 114 , 126 ] , [ 111 , 122 ] , [ 112 , 126 ] , [ 117 , 130 ] , [ 106 , 127 ] , [ 111 , 117 ] , [ 98 , 119 ] , [ 116 , 131 ] , [ 109 , 129 ] , [ 100 , 113 ] ] ;
6505: LD_ADDR_VAR 0 6
6509: PUSH
6510: LD_INT 104
6512: PUSH
6513: LD_INT 117
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: PUSH
6520: LD_INT 115
6522: PUSH
6523: LD_INT 123
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PUSH
6530: LD_INT 114
6532: PUSH
6533: LD_INT 126
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 111
6542: PUSH
6543: LD_INT 122
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 112
6552: PUSH
6553: LD_INT 126
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 117
6562: PUSH
6563: LD_INT 130
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: LD_INT 106
6572: PUSH
6573: LD_INT 127
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 111
6582: PUSH
6583: LD_INT 117
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 98
6592: PUSH
6593: LD_INT 119
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 116
6602: PUSH
6603: LD_INT 131
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: LD_INT 109
6612: PUSH
6613: LD_INT 129
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: PUSH
6620: LD_INT 100
6622: PUSH
6623: LD_INT 113
6625: PUSH
6626: EMPTY
6627: LIST
6628: LIST
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: ST_TO_ADDR
// for i in t do
6644: LD_ADDR_VAR 0 4
6648: PUSH
6649: LD_VAR 0 6
6653: PUSH
6654: FOR_IN
6655: IFFALSE 6691
// begin wait ( 0 0$0.3 ) ;
6657: LD_INT 10
6659: PPUSH
6660: CALL_OW 67
// MineExplosion ( i [ 1 ] , i [ 2 ] , 1 ) ;
6664: LD_VAR 0 4
6668: PUSH
6669: LD_INT 1
6671: ARRAY
6672: PPUSH
6673: LD_VAR 0 4
6677: PUSH
6678: LD_INT 2
6680: ARRAY
6681: PPUSH
6682: LD_INT 1
6684: PPUSH
6685: CALL_OW 453
// end ;
6689: GO 6654
6691: POP
6692: POP
// wait ( 0 0$4 ) ;
6693: LD_INT 140
6695: PPUSH
6696: CALL_OW 67
// Say ( Turner , 3Rand-02 ) ;
6700: LD_EXP 59
6704: PPUSH
6705: LD_STRING 3Rand-02
6707: PPUSH
6708: CALL_OW 88
// wait ( 0 0$5 ) ;
6712: LD_INT 175
6714: PPUSH
6715: CALL_OW 67
// wait ( 0 0$2 ) ;
6719: LD_INT 70
6721: PPUSH
6722: CALL_OW 67
// SayRadio ( Yakotich , 3Yak-10 ) ;
6726: LD_EXP 9
6730: PPUSH
6731: LD_STRING 3Yak-10
6733: PPUSH
6734: CALL_OW 94
// SetLives ( Ovsyenko , 400 ) ;
6738: LD_INT 74
6740: PPUSH
6741: LD_INT 400
6743: PPUSH
6744: CALL_OW 234
// Cutscene_ended = true ;
6748: LD_ADDR_EXP 67
6752: PUSH
6753: LD_INT 1
6755: ST_TO_ADDR
// CenterOnXY ( 148 , 208 ) ;
6756: LD_INT 148
6758: PPUSH
6759: LD_INT 208
6761: PPUSH
6762: CALL_OW 84
// SayRadio ( Platonov , 3Plat-03 ) ;
6766: LD_EXP 63
6770: PPUSH
6771: LD_STRING 3Plat-03
6773: PPUSH
6774: CALL_OW 94
// SayRadio ( Platonov , 3Plat-04 ) ;
6778: LD_EXP 63
6782: PPUSH
6783: LD_STRING 3Plat-04
6785: PPUSH
6786: CALL_OW 94
// SayRadio ( Platonov , 3Plat-05 ) ;
6790: LD_EXP 63
6794: PPUSH
6795: LD_STRING 3Plat-05
6797: PPUSH
6798: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-11 ) ;
6802: LD_EXP 9
6806: PPUSH
6807: LD_STRING 3Yak-11
6809: PPUSH
6810: CALL_OW 94
// repeat Wait ( 0 0$1 ) until not IsInUnit ( Boris ) and not IsInUnit ( Anton ) ;
6814: LD_INT 35
6816: PPUSH
6817: CALL_OW 67
6821: LD_EXP 11
6825: PPUSH
6826: CALL_OW 310
6830: NOT
6831: PUSH
6832: LD_EXP 27
6836: PPUSH
6837: CALL_OW 310
6841: NOT
6842: AND
6843: IFFALSE 6814
// tmp := [ ] ;
6845: LD_ADDR_VAR 0 5
6849: PUSH
6850: EMPTY
6851: ST_TO_ADDR
// start_ended = true ;
6852: LD_ADDR_EXP 69
6856: PUSH
6857: LD_INT 1
6859: ST_TO_ADDR
// end ;
6860: LD_VAR 0 1
6864: RET
// every 0 0$1 trigger IsInUnit ( Yakotich ) do
6865: LD_EXP 9
6869: PPUSH
6870: CALL_OW 310
6874: IFFALSE 7183
6876: GO 6878
6878: DISABLE
// begin Say ( Yakotich , 3Yak-02 ) ;
6879: LD_EXP 9
6883: PPUSH
6884: LD_STRING 3Yak-02
6886: PPUSH
6887: CALL_OW 88
// Say ( Dimitri , 3Dim-01 ) ;
6891: LD_EXP 23
6895: PPUSH
6896: LD_STRING 3Dim-01
6898: PPUSH
6899: CALL_OW 88
// Say ( Yakotich , 3Yak-03 ) ;
6903: LD_EXP 9
6907: PPUSH
6908: LD_STRING 3Yak-03
6910: PPUSH
6911: CALL_OW 88
// Say ( Dimitri , 3Dim-02 ) ;
6915: LD_EXP 23
6919: PPUSH
6920: LD_STRING 3Dim-02
6922: PPUSH
6923: CALL_OW 88
// SayRadio ( Yakotich , 3Yak-04 ) ;
6927: LD_EXP 9
6931: PPUSH
6932: LD_STRING 3Yak-04
6934: PPUSH
6935: CALL_OW 94
// SayRadio ( Platonov , 3Plat-01 ) ;
6939: LD_EXP 63
6943: PPUSH
6944: LD_STRING 3Plat-01
6946: PPUSH
6947: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-05 ) ;
6951: LD_EXP 9
6955: PPUSH
6956: LD_STRING 3Yak-05
6958: PPUSH
6959: CALL_OW 94
// SayRadio ( Platonov , 3Plat-02 ) ;
6963: LD_EXP 63
6967: PPUSH
6968: LD_STRING 3Plat-02
6970: PPUSH
6971: CALL_OW 94
// Say ( Dimitri , 3Dim-03 ) ;
6975: LD_EXP 23
6979: PPUSH
6980: LD_STRING 3Dim-03
6982: PPUSH
6983: CALL_OW 88
// Say ( Dimitri , 3Dim-04 ) ;
6987: LD_EXP 23
6991: PPUSH
6992: LD_STRING 3Dim-04
6994: PPUSH
6995: CALL_OW 88
// Say ( Yakotich , 3Yak-06 ) ;
6999: LD_EXP 9
7003: PPUSH
7004: LD_STRING 3Yak-06
7006: PPUSH
7007: CALL_OW 88
// Say ( Dimitri , 3Dim-05 ) ;
7011: LD_EXP 23
7015: PPUSH
7016: LD_STRING 3Dim-05
7018: PPUSH
7019: CALL_OW 88
// Say ( Yakotich , 3Yak-07 ) ;
7023: LD_EXP 9
7027: PPUSH
7028: LD_STRING 3Yak-07
7030: PPUSH
7031: CALL_OW 88
// Wait ( 0 0$03 ) ;
7035: LD_INT 105
7037: PPUSH
7038: CALL_OW 67
// InitSikorskiTeam ;
7042: CALL 2925 0 0
// SikorskiAction ;
7046: CALL 5725 0 0
// ChangeMissionObjectives ( o1 ) ;
7050: LD_STRING o1
7052: PPUSH
7053: CALL_OW 337
// SetSide ( [ Ovsyenko , OB2 , OB3 , oil , eoil1 , eoil2 ] , 4 ) ;
7057: LD_INT 74
7059: PUSH
7060: LD_INT 79
7062: PUSH
7063: LD_INT 78
7065: PUSH
7066: LD_INT 76
7068: PUSH
7069: LD_INT 85
7071: PUSH
7072: LD_INT 86
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PPUSH
7083: LD_INT 4
7085: PPUSH
7086: CALL_OW 235
// ComEnterUnit ( Cyrus , OB3 ) ;
7090: LD_EXP 53
7094: PPUSH
7095: LD_INT 78
7097: PPUSH
7098: CALL_OW 120
// ComEnterUnit ( Bobby , OB2 ) ;
7102: LD_EXP 52
7106: PPUSH
7107: LD_INT 79
7109: PPUSH
7110: CALL_OW 120
// SetClass ( [ Jilian , Turner ] , 2 ) ;
7114: LD_EXP 58
7118: PUSH
7119: LD_EXP 59
7123: PUSH
7124: EMPTY
7125: LIST
7126: LIST
7127: PPUSH
7128: LD_INT 2
7130: PPUSH
7131: CALL_OW 336
// ComWalk ( [ Jilian , Turner , McCreery , Lynch , Walker , Truman , Gary ] ) ;
7135: LD_EXP 58
7139: PUSH
7140: LD_EXP 59
7144: PUSH
7145: LD_EXP 56
7149: PUSH
7150: LD_EXP 55
7154: PUSH
7155: LD_EXP 57
7159: PUSH
7160: LD_EXP 51
7164: PUSH
7165: LD_EXP 54
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: PPUSH
7179: CALL_OW 138
// end ;
7183: END
// every 0 0$1 trigger start_ended = true do
7184: LD_EXP 69
7188: PUSH
7189: LD_INT 1
7191: EQUAL
7192: IFFALSE 7264
7194: GO 7196
7196: DISABLE
// begin Say ( Yakotich , 3Yak-12 ) ;
7197: LD_EXP 9
7201: PPUSH
7202: LD_STRING 3Yak-12
7204: PPUSH
7205: CALL_OW 88
// Say ( Vasilij , 3Vas-01 ) ;
7209: LD_EXP 12
7213: PPUSH
7214: LD_STRING 3Vas-01
7216: PPUSH
7217: CALL_OW 88
// Say ( Dimitri , 3Dim-06 ) ;
7221: LD_EXP 23
7225: PPUSH
7226: LD_STRING 3Dim-06
7228: PPUSH
7229: CALL_OW 88
// Say ( Dimitri , 3Dim-07 ) ;
7233: LD_EXP 23
7237: PPUSH
7238: LD_STRING 3Dim-07
7240: PPUSH
7241: CALL_OW 88
// Say ( Vasilij , 3Vas-02 ) ;
7245: LD_EXP 12
7249: PPUSH
7250: LD_STRING 3Vas-02
7252: PPUSH
7253: CALL_OW 88
// ChangeMissionObjectives ( rocket ) ;
7257: LD_STRING rocket
7259: PPUSH
7260: CALL_OW 337
// end ;
7264: END
// every 0 0$1 trigger GetSide ( Ovsyenko ) = 3 and start_ended = true do
7265: LD_INT 74
7267: PPUSH
7268: CALL_OW 255
7272: PUSH
7273: LD_INT 3
7275: EQUAL
7276: PUSH
7277: LD_EXP 69
7281: PUSH
7282: LD_INT 1
7284: EQUAL
7285: AND
7286: IFFALSE 7468
7288: GO 7290
7290: DISABLE
// begin DialogueOn ;
7291: CALL_OW 6
// InGameOn ;
7295: CALL_OW 8
// SayRadio ( Yakotich , 3Yak-13 ) ;
7299: LD_EXP 9
7303: PPUSH
7304: LD_STRING 3Yak-13
7306: PPUSH
7307: CALL_OW 94
// SayRadio ( Platonov , 3Plat-06 ) ;
7311: LD_EXP 63
7315: PPUSH
7316: LD_STRING 3Plat-06
7318: PPUSH
7319: CALL_OW 94
// SayRadio ( Platonov , 3Plat-07 ) ;
7323: LD_EXP 63
7327: PPUSH
7328: LD_STRING 3Plat-07
7330: PPUSH
7331: CALL_OW 94
// Say ( Mietek , 3Ryn-01 ) ;
7335: LD_EXP 10
7339: PPUSH
7340: LD_STRING 3Ryn-01
7342: PPUSH
7343: CALL_OW 88
// CenterNowOnXY ( 109 , 72 ) ;
7347: LD_INT 109
7349: PPUSH
7350: LD_INT 72
7352: PPUSH
7353: CALL_OW 86
// RevealFogArea ( 3 , EastPassage ) ;
7357: LD_INT 3
7359: PPUSH
7360: LD_INT 13
7362: PPUSH
7363: CALL_OW 332
// Say ( Mietek , 3Ryn-02 ) ;
7367: LD_EXP 10
7371: PPUSH
7372: LD_STRING 3Ryn-02
7374: PPUSH
7375: CALL_OW 88
// CenterNowOnXY ( 78 , 17 ) ;
7379: LD_INT 78
7381: PPUSH
7382: LD_INT 17
7384: PPUSH
7385: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
7389: LD_INT 3
7391: PPUSH
7392: LD_INT 14
7394: PPUSH
7395: CALL_OW 332
// Say ( Mietek , 3Ryn-03 ) ;
7399: LD_EXP 10
7403: PPUSH
7404: LD_STRING 3Ryn-03
7406: PPUSH
7407: CALL_OW 88
// Say ( Yakotich , 3Yak-14 ) ;
7411: LD_EXP 9
7415: PPUSH
7416: LD_STRING 3Yak-14
7418: PPUSH
7419: CALL_OW 88
// ChangeMissionObjectives ( [ o2a , o2b , o2c ] [ Difficulty ] ) ;
7423: LD_STRING o2a
7425: PUSH
7426: LD_STRING o2b
7428: PUSH
7429: LD_STRING o2c
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: LIST
7436: PUSH
7437: LD_OWVAR 67
7441: ARRAY
7442: PPUSH
7443: CALL_OW 337
// SetTech ( 86 , 3 , 1 ) ;
7447: LD_INT 86
7449: PPUSH
7450: LD_INT 3
7452: PPUSH
7453: LD_INT 1
7455: PPUSH
7456: CALL_OW 322
// DialogueOff ;
7460: CALL_OW 7
// InGameOff ;
7464: CALL_OW 9
// end ;
7468: END
// every 0 0$1 trigger ovsyenko_captured = true do
7469: LD_EXP 68
7473: PUSH
7474: LD_INT 1
7476: EQUAL
7477: IFFALSE 7815
7479: GO 7481
7481: DISABLE
// begin Wait ( 15 15$0 ) ;
7482: LD_INT 31500
7484: PPUSH
7485: CALL_OW 67
// InitBurlak ;
7489: CALL 2309 0 0
// DialogueOn ;
7493: CALL_OW 6
// CenterNowOnXY ( 155 , 235 ) ;
7497: LD_INT 155
7499: PPUSH
7500: LD_INT 235
7502: PPUSH
7503: CALL_OW 86
// SayRadio ( Burlak , 3Bur-01 ) ;
7507: LD_EXP 33
7511: PPUSH
7512: LD_STRING 3Bur-01
7514: PPUSH
7515: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-15 ) ;
7519: LD_EXP 9
7523: PPUSH
7524: LD_STRING 3Yak-15
7526: PPUSH
7527: CALL_OW 94
// SayRadio ( Burlak , 3Bur-02 ) ;
7531: LD_EXP 33
7535: PPUSH
7536: LD_STRING 3Bur-02
7538: PPUSH
7539: CALL_OW 94
// CenterNowOnUnits ( BurlakVeh ) ;
7543: LD_EXP 41
7547: PPUSH
7548: CALL_OW 87
// SayRadio ( Vasilij , 3Vas-Flame-01 ) ;
7552: LD_EXP 12
7556: PPUSH
7557: LD_STRING 3Vas-Flame-01
7559: PPUSH
7560: CALL_OW 94
// SayRadio ( Burlak , 3Bur-Flame-01 ) ;
7564: LD_EXP 33
7568: PPUSH
7569: LD_STRING 3Bur-Flame-01
7571: PPUSH
7572: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-Flame-01 ) ;
7576: LD_EXP 9
7580: PPUSH
7581: LD_STRING 3Yak-Flame-01
7583: PPUSH
7584: CALL_OW 94
// SayRadio ( Burlak , 3Bur-Flame-02 ) ;
7588: LD_EXP 33
7592: PPUSH
7593: LD_STRING 3Bur-Flame-02
7595: PPUSH
7596: CALL_OW 94
// SayRadio ( Vasilij , 3Vas-Flame-02 ) ;
7600: LD_EXP 12
7604: PPUSH
7605: LD_STRING 3Vas-Flame-02
7607: PPUSH
7608: CALL_OW 94
// ChangeMissionObjectives ( o3 ) ;
7612: LD_STRING o3
7614: PPUSH
7615: CALL_OW 337
// DialogueOff ;
7619: CALL_OW 7
// Wait ( 0 0$15 ) ;
7623: LD_INT 525
7625: PPUSH
7626: CALL_OW 67
// DialogueOn ;
7630: CALL_OW 6
// Say ( Petrosyan , 3Pty-01 ) ;
7634: LD_EXP 39
7638: PPUSH
7639: LD_STRING 3Pty-01
7641: PPUSH
7642: CALL_OW 88
// Say ( Yakotich , 3Yak-16 ) ;
7646: LD_EXP 9
7650: PPUSH
7651: LD_STRING 3Yak-16
7653: PPUSH
7654: CALL_OW 88
// Say ( Platonov , 3Plat-08 ) ;
7658: LD_EXP 63
7662: PPUSH
7663: LD_STRING 3Plat-08
7665: PPUSH
7666: CALL_OW 88
// ChangeMissionObjectives ( o4 ) ;
7670: LD_STRING o4
7672: PPUSH
7673: CALL_OW 337
// SetRestrict ( 11 , 3 , 1 ) ;
7677: LD_INT 11
7679: PPUSH
7680: LD_INT 3
7682: PPUSH
7683: LD_INT 1
7685: PPUSH
7686: CALL_OW 324
// SetRestrict ( 14 , 3 , 1 ) ;
7690: LD_INT 14
7692: PPUSH
7693: LD_INT 3
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: CALL_OW 324
// SetRestrict ( 28 , 3 , 1 ) ;
7703: LD_INT 28
7705: PPUSH
7706: LD_INT 3
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: CALL_OW 324
// DialogueOff ;
7716: CALL_OW 7
// Wait ( 1 1$0 ) ;
7720: LD_INT 2100
7722: PPUSH
7723: CALL_OW 67
// DialogueOn ;
7727: CALL_OW 6
// Say ( Petrosyan , 3Pty-Comp-01 ) ;
7731: LD_EXP 39
7735: PPUSH
7736: LD_STRING 3Pty-Comp-01
7738: PPUSH
7739: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-01 ) ;
7743: LD_EXP 33
7747: PPUSH
7748: LD_STRING 3Bur-Comp-01
7750: PPUSH
7751: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-02 ) ;
7755: LD_EXP 39
7759: PPUSH
7760: LD_STRING 3Pty-Comp-02
7762: PPUSH
7763: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-02 ) ;
7767: LD_EXP 33
7771: PPUSH
7772: LD_STRING 3Bur-Comp-02
7774: PPUSH
7775: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-03 ) ;
7779: LD_EXP 39
7783: PPUSH
7784: LD_STRING 3Pty-Comp-03
7786: PPUSH
7787: CALL_OW 88
// SetRestrict ( 12 , 3 , 1 ) ;
7791: LD_INT 12
7793: PPUSH
7794: LD_INT 3
7796: PPUSH
7797: LD_INT 1
7799: PPUSH
7800: CALL_OW 324
// ChangeMissionObjectives ( o5 ) ;
7804: LD_STRING o5
7806: PPUSH
7807: CALL_OW 337
// DialogueOff ;
7811: CALL_OW 7
// end ;
7815: END
// every 0 0$1 trigger everything_researched = true and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 0 and siberit_excavated = true do
7816: LD_EXP 78
7820: PUSH
7821: LD_INT 1
7823: EQUAL
7824: PUSH
7825: LD_INT 22
7827: PUSH
7828: LD_INT 1
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 21
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: PPUSH
7849: CALL_OW 69
7853: PUSH
7854: LD_INT 0
7856: LESSEQUAL
7857: AND
7858: PUSH
7859: LD_EXP 76
7863: PUSH
7864: LD_INT 1
7866: EQUAL
7867: AND
7868: IFFALSE 7885
7870: GO 7872
7872: DISABLE
// begin end_of_the_mission = true ;
7873: LD_ADDR_EXP 81
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// Ending ;
7881: CALL 7886 0 0
// end ;
7885: END
// export function Ending ; begin
7886: LD_INT 0
7888: PPUSH
// CenterOnUnits ( Yakotich ) ;
7889: LD_EXP 9
7893: PPUSH
7894: CALL_OW 85
// InGameOn ;
7898: CALL_OW 8
// SayRadio ( Platonov , 3Plat-09 ) ;
7902: LD_EXP 63
7906: PPUSH
7907: LD_STRING 3Plat-09
7909: PPUSH
7910: CALL_OW 94
// SayRadio ( Platonov , 3Plat-10 ) ;
7914: LD_EXP 63
7918: PPUSH
7919: LD_STRING 3Plat-10
7921: PPUSH
7922: CALL_OW 94
// SayRadio ( Burlak , 3Bur-03 ) ;
7926: LD_EXP 33
7930: PPUSH
7931: LD_STRING 3Bur-03
7933: PPUSH
7934: CALL_OW 94
// SetSide ( [ Burlak , Petrosyan , Dolgov , Karamazov , Titov , Gleb , Petrovova , Lipshchin ] , 6 ) ;
7938: LD_EXP 33
7942: PUSH
7943: LD_EXP 39
7947: PUSH
7948: LD_EXP 40
7952: PUSH
7953: LD_EXP 34
7957: PUSH
7958: LD_EXP 38
7962: PUSH
7963: LD_EXP 37
7967: PUSH
7968: LD_EXP 35
7972: PUSH
7973: LD_EXP 36
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: PPUSH
7988: LD_INT 6
7990: PPUSH
7991: CALL_OW 235
// ComMoveToArea ( [ Burlak , Petrosyan , Dolgov , Karamazov , Titov , Gleb , Petrovova , Lipshchin ] , ExitArea ) ;
7995: LD_EXP 33
7999: PUSH
8000: LD_EXP 39
8004: PUSH
8005: LD_EXP 40
8009: PUSH
8010: LD_EXP 34
8014: PUSH
8015: LD_EXP 38
8019: PUSH
8020: LD_EXP 37
8024: PUSH
8025: LD_EXP 35
8029: PUSH
8030: LD_EXP 36
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: PPUSH
8045: LD_INT 3
8047: PPUSH
8048: CALL_OW 113
// SayRadio ( Platonov , 3Plat-11 ) ;
8052: LD_EXP 63
8056: PPUSH
8057: LD_STRING 3Plat-11
8059: PPUSH
8060: CALL_OW 94
// SayRadio ( Platonov , 3Plat-12 ) ;
8064: LD_EXP 63
8068: PPUSH
8069: LD_STRING 3Plat-12
8071: PPUSH
8072: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-17 ) ;
8076: LD_EXP 9
8080: PPUSH
8081: LD_STRING 3Yak-17
8083: PPUSH
8084: CALL_OW 94
// Say ( Yakotich , 3Yak-18 ) ;
8088: LD_EXP 9
8092: PPUSH
8093: LD_STRING 3Yak-18
8095: PPUSH
8096: CALL_OW 88
// Say ( Dimitri , 3Dim-08 ) ;
8100: LD_EXP 23
8104: PPUSH
8105: LD_STRING 3Dim-08
8107: PPUSH
8108: CALL_OW 88
// InGameOff ;
8112: CALL_OW 9
// AddMedal ( SibExcavated , 1 ) ;
8116: LD_STRING SibExcavated
8118: PPUSH
8119: LD_INT 1
8121: PPUSH
8122: CALL_OW 101
// if IsOk ( BurlakVeh ) then
8126: LD_EXP 41
8130: PPUSH
8131: CALL_OW 302
8135: IFFALSE 8149
// AddMedal ( FlameSaved , 1 ) else
8137: LD_STRING FlameSaved
8139: PPUSH
8140: LD_INT 1
8142: PPUSH
8143: CALL_OW 101
8147: GO 8160
// AddMedal ( FlameSaved , - 1 ) ;
8149: LD_STRING FlameSaved
8151: PPUSH
8152: LD_INT 1
8154: NEG
8155: PPUSH
8156: CALL_OW 101
// if crane_researched = true and buldozer_researched = true and lab_captured = true and prediction_researched = true and rocket_researched = true then
8160: LD_EXP 80
8164: PUSH
8165: LD_INT 1
8167: EQUAL
8168: PUSH
8169: LD_EXP 74
8173: PUSH
8174: LD_INT 1
8176: EQUAL
8177: AND
8178: PUSH
8179: LD_EXP 71
8183: PUSH
8184: LD_INT 1
8186: EQUAL
8187: AND
8188: PUSH
8189: LD_EXP 73
8193: PUSH
8194: LD_INT 1
8196: EQUAL
8197: AND
8198: PUSH
8199: LD_EXP 72
8203: PUSH
8204: LD_INT 1
8206: EQUAL
8207: AND
8208: IFFALSE 8222
// AddMedal ( Secondary , 1 ) else
8210: LD_STRING Secondary
8212: PPUSH
8213: LD_INT 1
8215: PPUSH
8216: CALL_OW 101
8220: GO 8233
// AddMedal ( Secondary , - 1 ) ;
8222: LD_STRING Secondary
8224: PPUSH
8225: LD_INT 1
8227: NEG
8228: PPUSH
8229: CALL_OW 101
// GiveMedals ( Medals ) ;
8233: LD_STRING Medals
8235: PPUSH
8236: CALL_OW 102
// if IsOk ( BurlakVeh ) then
8240: LD_EXP 41
8244: PPUSH
8245: CALL_OW 302
8249: IFFALSE 8261
// SaveVariable ( 1 , 03_FlameSaved ) ;
8251: LD_INT 1
8253: PPUSH
8254: LD_STRING 03_FlameSaved
8256: PPUSH
8257: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
8261: LD_INT 22
8263: PUSH
8264: LD_INT 3
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 23
8273: PUSH
8274: LD_INT 3
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 21
8283: PUSH
8284: LD_INT 1
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: LIST
8295: PPUSH
8296: CALL_OW 69
8300: PUSH
8301: LD_INT 22
8303: PUSH
8304: LD_INT 6
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: LD_INT 23
8313: PUSH
8314: LD_INT 3
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: LD_INT 21
8323: PUSH
8324: LD_INT 1
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: LIST
8335: PPUSH
8336: CALL_OW 69
8340: AND
8341: PPUSH
8342: CALL_OW 43
// SaveCharacters ( Yakotich , 03_Yakotich ) ;
8346: LD_EXP 9
8350: PPUSH
8351: LD_STRING 03_Yakotich
8353: PPUSH
8354: CALL_OW 38
// SaveCharacters ( Mietek , 03_Mietek ) ;
8358: LD_EXP 10
8362: PPUSH
8363: LD_STRING 03_Mietek
8365: PPUSH
8366: CALL_OW 38
// SaveCharacters ( Maksim , 03_Maksim ) ;
8370: LD_EXP 15
8374: PPUSH
8375: LD_STRING 03_Maksim
8377: PPUSH
8378: CALL_OW 38
// SaveCharacters ( Vasilij , 03_Vasilij ) ;
8382: LD_EXP 12
8386: PPUSH
8387: LD_STRING 03_Vasilij
8389: PPUSH
8390: CALL_OW 38
// SaveCharacters ( Michail , 03_Michail ) ;
8394: LD_EXP 13
8398: PPUSH
8399: LD_STRING 03_Michail
8401: PPUSH
8402: CALL_OW 38
// SaveCharacters ( Boris , 03_Boris ) ;
8406: LD_EXP 11
8410: PPUSH
8411: LD_STRING 03_Boris
8413: PPUSH
8414: CALL_OW 38
// SaveCharacters ( Constantin , 03_Constantin ) ;
8418: LD_EXP 14
8422: PPUSH
8423: LD_STRING 03_Constantin
8425: PPUSH
8426: CALL_OW 38
// SaveCharacters ( Fiodor , 03_Fiodor ) ;
8430: LD_EXP 16
8434: PPUSH
8435: LD_STRING 03_Fiodor
8437: PPUSH
8438: CALL_OW 38
// SaveCharacters ( Aleksiej , 03_Aleksiej ) ;
8442: LD_EXP 19
8446: PPUSH
8447: LD_STRING 03_Aleksiej
8449: PPUSH
8450: CALL_OW 38
// SaveCharacters ( Pavel , 03_Pavel ) ;
8454: LD_EXP 17
8458: PPUSH
8459: LD_STRING 03_Pavel
8461: PPUSH
8462: CALL_OW 38
// SaveCharacters ( Zakhar , 03_Zakhar ) ;
8466: LD_EXP 18
8470: PPUSH
8471: LD_STRING 03_Zakhar
8473: PPUSH
8474: CALL_OW 38
// SaveCharacters ( Aleksandr , 03_Aleksandr ) ;
8478: LD_EXP 20
8482: PPUSH
8483: LD_STRING 03_Aleksandr
8485: PPUSH
8486: CALL_OW 38
// SaveCharacters ( Stanislav , 03_Stanislav ) ;
8490: LD_EXP 22
8494: PPUSH
8495: LD_STRING 03_Stanislav
8497: PPUSH
8498: CALL_OW 38
// SaveCharacters ( Josif , 03_Josif ) ;
8502: LD_EXP 21
8506: PPUSH
8507: LD_STRING 03_Josif
8509: PPUSH
8510: CALL_OW 38
// SaveCharacters ( Grigori , 03_Grigori ) ;
8514: LD_EXP 26
8518: PPUSH
8519: LD_STRING 03_Grigori
8521: PPUSH
8522: CALL_OW 38
// SaveCharacters ( Jegor , 03_Jegor ) ;
8526: LD_EXP 25
8530: PPUSH
8531: LD_STRING 03_Jegor
8533: PPUSH
8534: CALL_OW 38
// SaveCharacters ( Anton , 03_Anton ) ;
8538: LD_EXP 27
8542: PPUSH
8543: LD_STRING 03_Anton
8545: PPUSH
8546: CALL_OW 38
// SaveCharacters ( Dimitri , 03_Dimitri ) ;
8550: LD_EXP 23
8554: PPUSH
8555: LD_STRING 03_Dimitri
8557: PPUSH
8558: CALL_OW 38
// SaveCharacters ( Ivan , 03_Ivan ) ;
8562: LD_EXP 24
8566: PPUSH
8567: LD_STRING 03_Ivan
8569: PPUSH
8570: CALL_OW 38
// SaveCharacters ( Burlak , 03_Burlak ) ;
8574: LD_EXP 33
8578: PPUSH
8579: LD_STRING 03_Burlak
8581: PPUSH
8582: CALL_OW 38
// SaveCharacters ( Karamazov , 03_Karamazov ) ;
8586: LD_EXP 34
8590: PPUSH
8591: LD_STRING 03_Karamazov
8593: PPUSH
8594: CALL_OW 38
// SaveCharacters ( Titov , 03_Titov ) ;
8598: LD_EXP 38
8602: PPUSH
8603: LD_STRING 03_Titov
8605: PPUSH
8606: CALL_OW 38
// SaveCharacters ( Petrovova , 03_Petrovova ) ;
8610: LD_EXP 35
8614: PPUSH
8615: LD_STRING 03_Petrovova
8617: PPUSH
8618: CALL_OW 38
// SaveCharacters ( Gleb , 03_Gleb ) ;
8622: LD_EXP 37
8626: PPUSH
8627: LD_STRING 03_Gleb
8629: PPUSH
8630: CALL_OW 38
// SaveCharacters ( Lipshchin , 03_Lipshchin ) ;
8634: LD_EXP 36
8638: PPUSH
8639: LD_STRING 03_Lipshchin
8641: PPUSH
8642: CALL_OW 38
// SaveCharacters ( Dolgov , 03_Dolgov ) ;
8646: LD_EXP 40
8650: PPUSH
8651: LD_STRING 03_Dolgov
8653: PPUSH
8654: CALL_OW 38
// SaveCharacters ( Petrosyan , 03_Petrosyan ) ;
8658: LD_EXP 39
8662: PPUSH
8663: LD_STRING 03_Petrosyan
8665: PPUSH
8666: CALL_OW 38
// YouWin ;
8670: CALL_OW 103
// end ; end_of_file
8674: LD_VAR 0 1
8678: RET
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and start_ended then
8679: LD_VAR 0 1
8683: PPUSH
8684: CALL_OW 255
8688: PUSH
8689: LD_INT 3
8691: EQUAL
8692: PUSH
8693: LD_VAR 0 1
8697: PPUSH
8698: CALL_OW 266
8702: PUSH
8703: LD_INT 0
8705: EQUAL
8706: AND
8707: PUSH
8708: LD_EXP 69
8712: AND
8713: IFFALSE 8766
// begin RuDep := building ;
8715: LD_ADDR_EXP 104
8719: PUSH
8720: LD_VAR 0 1
8724: ST_TO_ADDR
// SetBName ( building , voroshilov ) ;
8725: LD_VAR 0 1
8729: PPUSH
8730: LD_STRING voroshilov
8732: PPUSH
8733: CALL_OW 500
// SetRestrict ( b_depot , 3 , false ) ;
8737: LD_INT 0
8739: PPUSH
8740: LD_INT 3
8742: PPUSH
8743: LD_INT 0
8745: PPUSH
8746: CALL_OW 324
// ingame_video := false ;
8750: LD_ADDR_OWVAR 52
8754: PUSH
8755: LD_INT 0
8757: ST_TO_ADDR
// interface_hidden := false ;
8758: LD_ADDR_OWVAR 54
8762: PUSH
8763: LD_INT 0
8765: ST_TO_ADDR
// end ; end ;
8766: PPOPN 2
8768: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = b_armoury and GetSide ( building ) = 3 and crane_triggered = false then
8769: LD_VAR 0 1
8773: PPUSH
8774: CALL_OW 266
8778: PUSH
8779: LD_INT 4
8781: EQUAL
8782: PUSH
8783: LD_VAR 0 1
8787: PPUSH
8788: CALL_OW 255
8792: PUSH
8793: LD_INT 3
8795: EQUAL
8796: AND
8797: PUSH
8798: LD_EXP 79
8802: PUSH
8803: LD_INT 0
8805: EQUAL
8806: AND
8807: IFFALSE 8869
// begin crane_triggered = true ;
8809: LD_ADDR_EXP 79
8813: PUSH
8814: LD_INT 1
8816: ST_TO_ADDR
// DialogueOn ;
8817: CALL_OW 6
// Say ( Boris , 3Boris-Crane-01 ) ;
8821: LD_EXP 11
8825: PPUSH
8826: LD_STRING 3Boris-Crane-01
8828: PPUSH
8829: CALL_OW 88
// Say ( Vasilij , 3Vas-Crane-01 ) ;
8833: LD_EXP 12
8837: PPUSH
8838: LD_STRING 3Vas-Crane-01
8840: PPUSH
8841: CALL_OW 88
// ChangeMissionObjectives ( crane ) ;
8845: LD_STRING crane
8847: PPUSH
8848: CALL_OW 337
// SetTech ( 3 , 85 , 1 ) ;
8852: LD_INT 3
8854: PPUSH
8855: LD_INT 85
8857: PPUSH
8858: LD_INT 1
8860: PPUSH
8861: CALL_OW 322
// DialogueOff ;
8865: CALL_OW 7
// end ; end ;
8869: PPOPN 1
8871: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetControl ( vehicle ) = control_remote and GetSide ( vehicle ) = 1 then
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 263
8881: PUSH
8882: LD_INT 2
8884: EQUAL
8885: PUSH
8886: LD_VAR 0 1
8890: PPUSH
8891: CALL_OW 255
8895: PUSH
8896: LD_INT 1
8898: EQUAL
8899: AND
8900: IFFALSE 9052
// begin Wait ( 0 0$3 ) ;
8902: LD_INT 105
8904: PPUSH
8905: CALL_OW 67
// Connect ( vehicle ) ;
8909: LD_VAR 0 1
8913: PPUSH
8914: CALL 17938 0 1
// newAttackers := Replace ( newAttackers , newAttackers + 1 , vehicle ) ;
8918: LD_ADDR_EXP 7
8922: PUSH
8923: LD_EXP 7
8927: PPUSH
8928: LD_EXP 7
8932: PUSH
8933: LD_INT 1
8935: PLUS
8936: PPUSH
8937: LD_VAR 0 1
8941: PPUSH
8942: CALL_OW 1
8946: ST_TO_ADDR
// if newAttackers >= [ 4 , 5 , 6 ] [ Difficulty ] then
8947: LD_EXP 7
8951: PUSH
8952: LD_INT 4
8954: PUSH
8955: LD_INT 5
8957: PUSH
8958: LD_INT 6
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: PUSH
8966: LD_OWVAR 67
8970: ARRAY
8971: GREATEREQUAL
8972: IFFALSE 8997
// begin attackers := attackers union newAttackers ;
8974: LD_ADDR_EXP 8
8978: PUSH
8979: LD_EXP 8
8983: PUSH
8984: LD_EXP 7
8988: UNION
8989: ST_TO_ADDR
// newAttackers := [ ] ;
8990: LD_ADDR_EXP 7
8994: PUSH
8995: EMPTY
8996: ST_TO_ADDR
// end ; if See ( 3 , vehicle ) then
8997: LD_INT 3
8999: PPUSH
9000: LD_VAR 0 1
9004: PPUSH
9005: CALL_OW 292
9009: IFFALSE 9052
// begin DialogueOn ;
9011: CALL_OW 6
// CenterNowOnUnits ( vehicle ) ;
9015: LD_VAR 0 1
9019: PPUSH
9020: CALL_OW 87
// Say ( Yakotich , 3Yak-Remote-Control ) ;
9024: LD_EXP 9
9028: PPUSH
9029: LD_STRING 3Yak-Remote-Control
9031: PPUSH
9032: CALL_OW 88
// Say ( Vasilij , 3Vas-Remote-Control ) ;
9036: LD_EXP 12
9040: PPUSH
9041: LD_STRING 3Vas-Remote-Control
9043: PPUSH
9044: CALL_OW 88
// DialogueOff ;
9048: CALL_OW 7
// end ; end ; end ;
9052: PPOPN 2
9054: END
// every 0 0$1 trigger Researched ( 3 , 85 ) do
9055: LD_INT 3
9057: PPUSH
9058: LD_INT 85
9060: PPUSH
9061: CALL_OW 325
9065: IFFALSE 9097
9067: GO 9069
9069: DISABLE
// begin crane_researched = true ;
9070: LD_ADDR_EXP 80
9074: PUSH
9075: LD_INT 1
9077: ST_TO_ADDR
// Say ( Vasilij , 3Vas-Crane-02 ) ;
9078: LD_EXP 12
9082: PPUSH
9083: LD_STRING 3Vas-Crane-02
9085: PPUSH
9086: CALL_OW 88
// ChangeMissionObjectives ( crane2 ) ;
9090: LD_STRING crane2
9092: PPUSH
9093: CALL_OW 337
// end ;
9097: END
// every 0 0$1 trigger See ( 3 , AmLab1 ) and lab_seen = false do
9098: LD_INT 3
9100: PPUSH
9101: LD_INT 94
9103: PPUSH
9104: CALL_OW 292
9108: PUSH
9109: LD_EXP 70
9113: PUSH
9114: LD_INT 0
9116: EQUAL
9117: AND
9118: IFFALSE 9165
9120: GO 9122
9122: DISABLE
// begin lab_seen = true ;
9123: LD_ADDR_EXP 70
9127: PUSH
9128: LD_INT 1
9130: ST_TO_ADDR
// CenterNowOnUnits ( AmLab1 ) ;
9131: LD_INT 94
9133: PPUSH
9134: CALL_OW 87
// DialogueOn ;
9138: CALL_OW 6
// Say ( Vasilij , 3Vas-Lab-01 ) ;
9142: LD_EXP 12
9146: PPUSH
9147: LD_STRING 3Vas-Lab-01
9149: PPUSH
9150: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
9154: LD_STRING o6
9156: PPUSH
9157: CALL_OW 337
// DialogueOff ;
9161: CALL_OW 7
// end ;
9165: END
// every 0 0$1 trigger See ( 3 , AmLab2 ) and lab_seen = false do
9166: LD_INT 3
9168: PPUSH
9169: LD_INT 163
9171: PPUSH
9172: CALL_OW 292
9176: PUSH
9177: LD_EXP 70
9181: PUSH
9182: LD_INT 0
9184: EQUAL
9185: AND
9186: IFFALSE 9233
9188: GO 9190
9190: DISABLE
// begin lab_seen = true ;
9191: LD_ADDR_EXP 70
9195: PUSH
9196: LD_INT 1
9198: ST_TO_ADDR
// CenterNowOnUnits ( AmLab2 ) ;
9199: LD_INT 163
9201: PPUSH
9202: CALL_OW 87
// DialogueOn ;
9206: CALL_OW 6
// Say ( Vasilij , 3Vas-Lab-01 ) ;
9210: LD_EXP 12
9214: PPUSH
9215: LD_STRING 3Vas-Lab-01
9217: PPUSH
9218: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
9222: LD_STRING o6
9224: PPUSH
9225: CALL_OW 337
// DialogueOff ;
9229: CALL_OW 7
// end ;
9233: END
// every 0 0$1 trigger GetSide ( AmLab1 ) = 3 or GetSide ( AmLab2 ) = 3 do
9234: LD_INT 94
9236: PPUSH
9237: CALL_OW 255
9241: PUSH
9242: LD_INT 3
9244: EQUAL
9245: PUSH
9246: LD_INT 163
9248: PPUSH
9249: CALL_OW 255
9253: PUSH
9254: LD_INT 3
9256: EQUAL
9257: OR
9258: IFFALSE 9288
9260: GO 9262
9262: DISABLE
// begin ChangeMissionObjectives ( labik2 ) ;
9263: LD_STRING labik2
9265: PPUSH
9266: CALL_OW 337
// lab_captured = true ;
9270: LD_ADDR_EXP 71
9274: PUSH
9275: LD_INT 1
9277: ST_TO_ADDR
// SaveVariable ( 1 , 03_AmLab ) ;
9278: LD_INT 1
9280: PPUSH
9281: LD_STRING 03_AmLab
9283: PPUSH
9284: CALL_OW 39
// end ;
9288: END
// every 0 0$1 trigger Researched ( 3 , 86 ) do
9289: LD_INT 3
9291: PPUSH
9292: LD_INT 86
9294: PPUSH
9295: CALL_OW 325
9299: IFFALSE 9351
9301: GO 9303
9303: DISABLE
// begin DialogueOn ;
9304: CALL_OW 6
// Say ( Vasilij , 3Vas-Buldozer-01 ) ;
9308: LD_EXP 12
9312: PPUSH
9313: LD_STRING 3Vas-Buldozer-01
9315: PPUSH
9316: CALL_OW 88
// Say ( Vasilij , 3Vas-Buldozer-02 ) ;
9320: LD_EXP 12
9324: PPUSH
9325: LD_STRING 3Vas-Buldozer-02
9327: PPUSH
9328: CALL_OW 88
// ChangeMissionObjectives ( buld2 ) ;
9332: LD_STRING buld2
9334: PPUSH
9335: CALL_OW 337
// buldozer_researched = true ;
9339: LD_ADDR_EXP 74
9343: PUSH
9344: LD_INT 1
9346: ST_TO_ADDR
// DialogueOff ;
9347: CALL_OW 7
// end ;
9351: END
// every 0 0$1 trigger Researched ( 3 , 40 ) do
9352: LD_INT 3
9354: PPUSH
9355: LD_INT 40
9357: PPUSH
9358: CALL_OW 325
9362: IFFALSE 9406
9364: GO 9366
9366: DISABLE
// begin Say ( Vasilij , 3Vas-Rocket ) ;
9367: LD_EXP 12
9371: PPUSH
9372: LD_STRING 3Vas-Rocket
9374: PPUSH
9375: CALL_OW 88
// Say ( Stanislav , 3Stan-Rocket ) ;
9379: LD_EXP 22
9383: PPUSH
9384: LD_STRING 3Stan-Rocket
9386: PPUSH
9387: CALL_OW 88
// ChangeMissionObjectives ( rocket2 ) ;
9391: LD_STRING rocket2
9393: PPUSH
9394: CALL_OW 337
// rocket_researched = true ;
9398: LD_ADDR_EXP 72
9402: PUSH
9403: LD_INT 1
9405: ST_TO_ADDR
// end ;
9406: END
// every 0 0$1 trigger Researched ( 3 , 9 ) do
9407: LD_INT 3
9409: PPUSH
9410: LD_INT 9
9412: PPUSH
9413: CALL_OW 325
9417: IFFALSE 9493
9419: GO 9421
9421: DISABLE
// begin DialogueOn ;
9422: CALL_OW 6
// Say ( Petrosyan , 3Pty-Comp-04 ) ;
9426: LD_EXP 39
9430: PPUSH
9431: LD_STRING 3Pty-Comp-04
9433: PPUSH
9434: CALL_OW 88
// Say ( Yakotich , 3Yak-Comp-01 ) ;
9438: LD_EXP 9
9442: PPUSH
9443: LD_STRING 3Yak-Comp-01
9445: PPUSH
9446: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-05 ) ;
9450: LD_EXP 39
9454: PPUSH
9455: LD_STRING 3Pty-Comp-05
9457: PPUSH
9458: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-03 ) ;
9462: LD_EXP 33
9466: PPUSH
9467: LD_STRING 3Bur-Comp-03
9469: PPUSH
9470: CALL_OW 88
// ChangeMissionObjectives ( pred2 ) ;
9474: LD_STRING pred2
9476: PPUSH
9477: CALL_OW 337
// prediction_researched = true ;
9481: LD_ADDR_EXP 73
9485: PUSH
9486: LD_INT 1
9488: ST_TO_ADDR
// DialogueOff ;
9489: CALL_OW 7
// end ;
9493: END
// every 0 0$1 trigger Researched ( 3 , 30 ) do
9494: LD_INT 3
9496: PPUSH
9497: LD_INT 30
9499: PPUSH
9500: CALL_OW 325
9504: IFFALSE 9565
9506: GO 9508
9508: DISABLE
// begin DialogueOn ;
9509: CALL_OW 6
// Say ( Dolgov , 3Dol-Stasis-01 ) ;
9513: LD_EXP 40
9517: PPUSH
9518: LD_STRING 3Dol-Stasis-01
9520: PPUSH
9521: CALL_OW 88
// Say ( Burlak , 3Bur-Stasis-01 ) ;
9525: LD_EXP 33
9529: PPUSH
9530: LD_STRING 3Bur-Stasis-01
9532: PPUSH
9533: CALL_OW 88
// Say ( Dolgov , 3Dol-Stasis-02 ) ;
9537: LD_EXP 40
9541: PPUSH
9542: LD_STRING 3Dol-Stasis-02
9544: PPUSH
9545: CALL_OW 88
// Say ( Burlak , 3Bur-Stasis-02 ) ;
9549: LD_EXP 33
9553: PPUSH
9554: LD_STRING 3Bur-Stasis-02
9556: PPUSH
9557: CALL_OW 88
// DialogueOff ;
9561: CALL_OW 7
// end ;
9565: END
// every 0 0$1 trigger IsInArea ( Boris , SouthOfBase ) and start_ended = true do
9566: LD_EXP 11
9570: PPUSH
9571: LD_INT 12
9573: PPUSH
9574: CALL_OW 308
9578: PUSH
9579: LD_EXP 69
9583: PUSH
9584: LD_INT 1
9586: EQUAL
9587: AND
9588: IFFALSE 9623
9590: GO 9592
9592: DISABLE
// begin AddComBuild ( [ Boris , Anton ] , b_depot , 144 , 207 , 3 ) ;
9593: LD_EXP 11
9597: PUSH
9598: LD_EXP 27
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: LD_INT 0
9609: PPUSH
9610: LD_INT 144
9612: PPUSH
9613: LD_INT 207
9615: PPUSH
9616: LD_INT 3
9618: PPUSH
9619: CALL_OW 205
// end ;
9623: END
// every 0 0$1 trigger start_ended = true and GetSide ( Ovsyenko ) = 3 do
9624: LD_EXP 69
9628: PUSH
9629: LD_INT 1
9631: EQUAL
9632: PUSH
9633: LD_INT 74
9635: PPUSH
9636: CALL_OW 255
9640: PUSH
9641: LD_INT 3
9643: EQUAL
9644: AND
9645: IFFALSE 9658
9647: GO 9649
9649: DISABLE
// begin ovsyenko_captured = true ;
9650: LD_ADDR_EXP 68
9654: PUSH
9655: LD_INT 1
9657: ST_TO_ADDR
// end ;
9658: END
// every 0 0$1 trigger Researched ( 3 , 54 ) and Researched ( 3 , 21 ) and Researched ( 3 , 30 ) do
9659: LD_INT 3
9661: PPUSH
9662: LD_INT 54
9664: PPUSH
9665: CALL_OW 325
9669: PUSH
9670: LD_INT 3
9672: PPUSH
9673: LD_INT 21
9675: PPUSH
9676: CALL_OW 325
9680: AND
9681: PUSH
9682: LD_INT 3
9684: PPUSH
9685: LD_INT 30
9687: PPUSH
9688: CALL_OW 325
9692: AND
9693: IFFALSE 9713
9695: GO 9697
9697: DISABLE
// begin everything_researched = true ;
9698: LD_ADDR_EXP 78
9702: PUSH
9703: LD_INT 1
9705: ST_TO_ADDR
// ChangeMissionObjectives ( o4a ) ;
9706: LD_STRING o4a
9708: PPUSH
9709: CALL_OW 337
// end ;
9713: END
// every 0 0$1 trigger Siblo ( 3 ) >= [ 100 , 150 , 200 ] [ Difficulty ] do
9714: LD_INT 3
9716: PPUSH
9717: CALL 424 0 1
9721: PUSH
9722: LD_INT 100
9724: PUSH
9725: LD_INT 150
9727: PUSH
9728: LD_INT 200
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: LIST
9735: PUSH
9736: LD_OWVAR 67
9740: ARRAY
9741: GREATEREQUAL
9742: IFFALSE 9762
9744: GO 9746
9746: DISABLE
// begin siberit_excavated = true ;
9747: LD_ADDR_EXP 76
9751: PUSH
9752: LD_INT 1
9754: ST_TO_ADDR
// ChangeMissionObjectives ( sib2 ) ;
9755: LD_STRING sib2
9757: PPUSH
9758: CALL_OW 337
// end ;
9762: END
// every 0 0$1 trigger end_of_the_mission = true do var un ;
9763: LD_EXP 81
9767: PUSH
9768: LD_INT 1
9770: EQUAL
9771: IFFALSE 9905
9773: GO 9775
9775: DISABLE
9776: LD_INT 0
9778: PPUSH
// begin for un in FilterUnitsInArea ( ExitArea , [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
9779: LD_ADDR_VAR 0 1
9783: PUSH
9784: LD_INT 3
9786: PPUSH
9787: LD_INT 22
9789: PUSH
9790: LD_INT 6
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: LD_INT 2
9799: PUSH
9800: LD_INT 21
9802: PUSH
9803: LD_INT 1
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: PUSH
9810: LD_INT 21
9812: PUSH
9813: LD_INT 2
9815: PUSH
9816: EMPTY
9817: LIST
9818: LIST
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PPUSH
9829: CALL_OW 70
9833: PUSH
9834: FOR_IN
9835: IFFALSE 9902
// begin if IsInArea ( un , ExitArea ) then
9837: LD_VAR 0 1
9841: PPUSH
9842: LD_INT 3
9844: PPUSH
9845: CALL_OW 308
9849: IFFALSE 9900
// begin if GetType ( un ) = unit_vehicle then
9851: LD_VAR 0 1
9855: PPUSH
9856: CALL_OW 247
9860: PUSH
9861: LD_INT 2
9863: EQUAL
9864: IFFALSE 9891
// begin RemoveUnit ( IsDrivenBy ( un ) ) ;
9866: LD_VAR 0 1
9870: PPUSH
9871: CALL_OW 311
9875: PPUSH
9876: CALL_OW 64
// RemoveUnit ( un ) ;
9880: LD_VAR 0 1
9884: PPUSH
9885: CALL_OW 64
// end else
9889: GO 9900
// begin RemoveUnit ( un ) ;
9891: LD_VAR 0 1
9895: PPUSH
9896: CALL_OW 64
// end ; end ; end ;
9900: GO 9834
9902: POP
9903: POP
// enable ;
9904: ENABLE
// end ; end_of_file
9905: PPOPN 1
9907: END
// every 6 6$0 do var i , j ;
9908: GO 9910
9910: DISABLE
9911: LD_INT 0
9913: PPUSH
9914: PPUSH
// begin for i = 1 to 4 do
9915: LD_ADDR_VAR 0 1
9919: PUSH
9920: DOUBLE
9921: LD_INT 1
9923: DEC
9924: ST_TO_ADDR
9925: LD_INT 4
9927: PUSH
9928: FOR_TO
9929: IFFALSE 9954
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
9931: LD_INT 3
9933: PPUSH
9934: LD_INT 5
9936: PPUSH
9937: CALL_OW 12
9941: PPUSH
9942: LD_INT 4
9944: PPUSH
9945: LD_INT 1
9947: PPUSH
9948: CALL_OW 55
// end ;
9952: GO 9928
9954: POP
9955: POP
// CreateCratesArea ( rand ( 1 , 3 ) , AmCratesArea , true ) ;
9956: LD_INT 1
9958: PPUSH
9959: LD_INT 3
9961: PPUSH
9962: CALL_OW 12
9966: PPUSH
9967: LD_INT 7
9969: PPUSH
9970: LD_INT 1
9972: PPUSH
9973: CALL_OW 55
// enable ;
9977: ENABLE
// end ; end_of_file
9978: PPOPN 2
9980: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9981: LD_INT 0
9983: PPUSH
9984: PPUSH
// if exist_mode then
9985: LD_VAR 0 2
9989: IFFALSE 10014
// unit := CreateCharacter ( prefix & ident ) else
9991: LD_ADDR_VAR 0 5
9995: PUSH
9996: LD_VAR 0 3
10000: PUSH
10001: LD_VAR 0 1
10005: STR
10006: PPUSH
10007: CALL_OW 34
10011: ST_TO_ADDR
10012: GO 10029
// unit := NewCharacter ( ident ) ;
10014: LD_ADDR_VAR 0 5
10018: PUSH
10019: LD_VAR 0 1
10023: PPUSH
10024: CALL_OW 25
10028: ST_TO_ADDR
// result := unit ;
10029: LD_ADDR_VAR 0 4
10033: PUSH
10034: LD_VAR 0 5
10038: ST_TO_ADDR
// end ;
10039: LD_VAR 0 4
10043: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10044: LD_INT 0
10046: PPUSH
10047: PPUSH
// if not side or not nation then
10048: LD_VAR 0 1
10052: NOT
10053: PUSH
10054: LD_VAR 0 2
10058: NOT
10059: OR
10060: IFFALSE 10064
// exit ;
10062: GO 10832
// case nation of nation_american :
10064: LD_VAR 0 2
10068: PUSH
10069: LD_INT 1
10071: DOUBLE
10072: EQUAL
10073: IFTRUE 10077
10075: GO 10291
10077: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10078: LD_ADDR_VAR 0 4
10082: PUSH
10083: LD_INT 35
10085: PUSH
10086: LD_INT 45
10088: PUSH
10089: LD_INT 46
10091: PUSH
10092: LD_INT 47
10094: PUSH
10095: LD_INT 82
10097: PUSH
10098: LD_INT 83
10100: PUSH
10101: LD_INT 84
10103: PUSH
10104: LD_INT 85
10106: PUSH
10107: LD_INT 86
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: LD_INT 2
10115: PUSH
10116: LD_INT 6
10118: PUSH
10119: LD_INT 15
10121: PUSH
10122: LD_INT 16
10124: PUSH
10125: LD_INT 7
10127: PUSH
10128: LD_INT 12
10130: PUSH
10131: LD_INT 13
10133: PUSH
10134: LD_INT 10
10136: PUSH
10137: LD_INT 14
10139: PUSH
10140: LD_INT 20
10142: PUSH
10143: LD_INT 21
10145: PUSH
10146: LD_INT 22
10148: PUSH
10149: LD_INT 25
10151: PUSH
10152: LD_INT 32
10154: PUSH
10155: LD_INT 27
10157: PUSH
10158: LD_INT 36
10160: PUSH
10161: LD_INT 69
10163: PUSH
10164: LD_INT 39
10166: PUSH
10167: LD_INT 34
10169: PUSH
10170: LD_INT 40
10172: PUSH
10173: LD_INT 48
10175: PUSH
10176: LD_INT 49
10178: PUSH
10179: LD_INT 50
10181: PUSH
10182: LD_INT 51
10184: PUSH
10185: LD_INT 52
10187: PUSH
10188: LD_INT 53
10190: PUSH
10191: LD_INT 54
10193: PUSH
10194: LD_INT 55
10196: PUSH
10197: LD_INT 56
10199: PUSH
10200: LD_INT 57
10202: PUSH
10203: LD_INT 58
10205: PUSH
10206: LD_INT 59
10208: PUSH
10209: LD_INT 60
10211: PUSH
10212: LD_INT 61
10214: PUSH
10215: LD_INT 62
10217: PUSH
10218: LD_INT 80
10220: PUSH
10221: LD_INT 82
10223: PUSH
10224: LD_INT 83
10226: PUSH
10227: LD_INT 84
10229: PUSH
10230: LD_INT 85
10232: PUSH
10233: LD_INT 86
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: ST_TO_ADDR
10289: GO 10756
10291: LD_INT 2
10293: DOUBLE
10294: EQUAL
10295: IFTRUE 10299
10297: GO 10525
10299: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10300: LD_ADDR_VAR 0 4
10304: PUSH
10305: LD_INT 35
10307: PUSH
10308: LD_INT 45
10310: PUSH
10311: LD_INT 46
10313: PUSH
10314: LD_INT 47
10316: PUSH
10317: LD_INT 82
10319: PUSH
10320: LD_INT 83
10322: PUSH
10323: LD_INT 84
10325: PUSH
10326: LD_INT 85
10328: PUSH
10329: LD_INT 87
10331: PUSH
10332: LD_INT 70
10334: PUSH
10335: LD_INT 1
10337: PUSH
10338: LD_INT 11
10340: PUSH
10341: LD_INT 3
10343: PUSH
10344: LD_INT 4
10346: PUSH
10347: LD_INT 5
10349: PUSH
10350: LD_INT 6
10352: PUSH
10353: LD_INT 15
10355: PUSH
10356: LD_INT 18
10358: PUSH
10359: LD_INT 7
10361: PUSH
10362: LD_INT 17
10364: PUSH
10365: LD_INT 8
10367: PUSH
10368: LD_INT 20
10370: PUSH
10371: LD_INT 21
10373: PUSH
10374: LD_INT 22
10376: PUSH
10377: LD_INT 72
10379: PUSH
10380: LD_INT 26
10382: PUSH
10383: LD_INT 69
10385: PUSH
10386: LD_INT 39
10388: PUSH
10389: LD_INT 40
10391: PUSH
10392: LD_INT 41
10394: PUSH
10395: LD_INT 42
10397: PUSH
10398: LD_INT 43
10400: PUSH
10401: LD_INT 48
10403: PUSH
10404: LD_INT 49
10406: PUSH
10407: LD_INT 50
10409: PUSH
10410: LD_INT 51
10412: PUSH
10413: LD_INT 52
10415: PUSH
10416: LD_INT 53
10418: PUSH
10419: LD_INT 54
10421: PUSH
10422: LD_INT 55
10424: PUSH
10425: LD_INT 56
10427: PUSH
10428: LD_INT 60
10430: PUSH
10431: LD_INT 61
10433: PUSH
10434: LD_INT 62
10436: PUSH
10437: LD_INT 66
10439: PUSH
10440: LD_INT 67
10442: PUSH
10443: LD_INT 68
10445: PUSH
10446: LD_INT 81
10448: PUSH
10449: LD_INT 82
10451: PUSH
10452: LD_INT 83
10454: PUSH
10455: LD_INT 84
10457: PUSH
10458: LD_INT 85
10460: PUSH
10461: LD_INT 87
10463: PUSH
10464: LD_INT 88
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: ST_TO_ADDR
10523: GO 10756
10525: LD_INT 3
10527: DOUBLE
10528: EQUAL
10529: IFTRUE 10533
10531: GO 10755
10533: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10534: LD_ADDR_VAR 0 4
10538: PUSH
10539: LD_INT 46
10541: PUSH
10542: LD_INT 47
10544: PUSH
10545: LD_INT 1
10547: PUSH
10548: LD_INT 2
10550: PUSH
10551: LD_INT 82
10553: PUSH
10554: LD_INT 83
10556: PUSH
10557: LD_INT 84
10559: PUSH
10560: LD_INT 85
10562: PUSH
10563: LD_INT 86
10565: PUSH
10566: LD_INT 11
10568: PUSH
10569: LD_INT 9
10571: PUSH
10572: LD_INT 20
10574: PUSH
10575: LD_INT 19
10577: PUSH
10578: LD_INT 21
10580: PUSH
10581: LD_INT 24
10583: PUSH
10584: LD_INT 22
10586: PUSH
10587: LD_INT 25
10589: PUSH
10590: LD_INT 28
10592: PUSH
10593: LD_INT 29
10595: PUSH
10596: LD_INT 30
10598: PUSH
10599: LD_INT 31
10601: PUSH
10602: LD_INT 37
10604: PUSH
10605: LD_INT 38
10607: PUSH
10608: LD_INT 32
10610: PUSH
10611: LD_INT 27
10613: PUSH
10614: LD_INT 33
10616: PUSH
10617: LD_INT 69
10619: PUSH
10620: LD_INT 39
10622: PUSH
10623: LD_INT 34
10625: PUSH
10626: LD_INT 40
10628: PUSH
10629: LD_INT 71
10631: PUSH
10632: LD_INT 23
10634: PUSH
10635: LD_INT 44
10637: PUSH
10638: LD_INT 48
10640: PUSH
10641: LD_INT 49
10643: PUSH
10644: LD_INT 50
10646: PUSH
10647: LD_INT 51
10649: PUSH
10650: LD_INT 52
10652: PUSH
10653: LD_INT 53
10655: PUSH
10656: LD_INT 54
10658: PUSH
10659: LD_INT 55
10661: PUSH
10662: LD_INT 56
10664: PUSH
10665: LD_INT 57
10667: PUSH
10668: LD_INT 58
10670: PUSH
10671: LD_INT 59
10673: PUSH
10674: LD_INT 63
10676: PUSH
10677: LD_INT 64
10679: PUSH
10680: LD_INT 65
10682: PUSH
10683: LD_INT 82
10685: PUSH
10686: LD_INT 83
10688: PUSH
10689: LD_INT 84
10691: PUSH
10692: LD_INT 85
10694: PUSH
10695: LD_INT 86
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: ST_TO_ADDR
10753: GO 10756
10755: POP
// if state > - 1 and state < 3 then
10756: LD_VAR 0 3
10760: PUSH
10761: LD_INT 1
10763: NEG
10764: GREATER
10765: PUSH
10766: LD_VAR 0 3
10770: PUSH
10771: LD_INT 3
10773: LESS
10774: AND
10775: IFFALSE 10832
// for i in result do
10777: LD_ADDR_VAR 0 5
10781: PUSH
10782: LD_VAR 0 4
10786: PUSH
10787: FOR_IN
10788: IFFALSE 10830
// if GetTech ( i , side ) <> state then
10790: LD_VAR 0 5
10794: PPUSH
10795: LD_VAR 0 1
10799: PPUSH
10800: CALL_OW 321
10804: PUSH
10805: LD_VAR 0 3
10809: NONEQUAL
10810: IFFALSE 10828
// result := result diff i ;
10812: LD_ADDR_VAR 0 4
10816: PUSH
10817: LD_VAR 0 4
10821: PUSH
10822: LD_VAR 0 5
10826: DIFF
10827: ST_TO_ADDR
10828: GO 10787
10830: POP
10831: POP
// end ;
10832: LD_VAR 0 4
10836: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10837: LD_INT 0
10839: PPUSH
10840: PPUSH
10841: PPUSH
// result := true ;
10842: LD_ADDR_VAR 0 3
10846: PUSH
10847: LD_INT 1
10849: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10850: LD_ADDR_VAR 0 5
10854: PUSH
10855: LD_VAR 0 2
10859: PPUSH
10860: CALL_OW 480
10864: ST_TO_ADDR
// if not tmp then
10865: LD_VAR 0 5
10869: NOT
10870: IFFALSE 10874
// exit ;
10872: GO 10923
// for i in tmp do
10874: LD_ADDR_VAR 0 4
10878: PUSH
10879: LD_VAR 0 5
10883: PUSH
10884: FOR_IN
10885: IFFALSE 10921
// if GetTech ( i , side ) <> state_researched then
10887: LD_VAR 0 4
10891: PPUSH
10892: LD_VAR 0 1
10896: PPUSH
10897: CALL_OW 321
10901: PUSH
10902: LD_INT 2
10904: NONEQUAL
10905: IFFALSE 10919
// begin result := false ;
10907: LD_ADDR_VAR 0 3
10911: PUSH
10912: LD_INT 0
10914: ST_TO_ADDR
// exit ;
10915: POP
10916: POP
10917: GO 10923
// end ;
10919: GO 10884
10921: POP
10922: POP
// end ;
10923: LD_VAR 0 3
10927: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10928: LD_INT 0
10930: PPUSH
10931: PPUSH
10932: PPUSH
10933: PPUSH
10934: PPUSH
10935: PPUSH
10936: PPUSH
10937: PPUSH
10938: PPUSH
10939: PPUSH
10940: PPUSH
10941: PPUSH
10942: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10943: LD_VAR 0 1
10947: NOT
10948: PUSH
10949: LD_VAR 0 1
10953: PPUSH
10954: CALL_OW 257
10958: PUSH
10959: LD_INT 9
10961: NONEQUAL
10962: OR
10963: IFFALSE 10967
// exit ;
10965: GO 11540
// side := GetSide ( unit ) ;
10967: LD_ADDR_VAR 0 9
10971: PUSH
10972: LD_VAR 0 1
10976: PPUSH
10977: CALL_OW 255
10981: ST_TO_ADDR
// tech_space := tech_spacanom ;
10982: LD_ADDR_VAR 0 12
10986: PUSH
10987: LD_INT 29
10989: ST_TO_ADDR
// tech_time := tech_taurad ;
10990: LD_ADDR_VAR 0 13
10994: PUSH
10995: LD_INT 28
10997: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10998: LD_ADDR_VAR 0 11
11002: PUSH
11003: LD_VAR 0 1
11007: PPUSH
11008: CALL_OW 310
11012: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11013: LD_VAR 0 11
11017: PPUSH
11018: CALL_OW 247
11022: PUSH
11023: LD_INT 2
11025: EQUAL
11026: IFFALSE 11030
// exit ;
11028: GO 11540
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11030: LD_ADDR_VAR 0 8
11034: PUSH
11035: LD_INT 81
11037: PUSH
11038: LD_VAR 0 9
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: LD_INT 3
11049: PUSH
11050: LD_INT 21
11052: PUSH
11053: LD_INT 3
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PPUSH
11068: CALL_OW 69
11072: ST_TO_ADDR
// if not tmp then
11073: LD_VAR 0 8
11077: NOT
11078: IFFALSE 11082
// exit ;
11080: GO 11540
// if in_unit then
11082: LD_VAR 0 11
11086: IFFALSE 11110
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11088: LD_ADDR_VAR 0 10
11092: PUSH
11093: LD_VAR 0 8
11097: PPUSH
11098: LD_VAR 0 11
11102: PPUSH
11103: CALL_OW 74
11107: ST_TO_ADDR
11108: GO 11130
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11110: LD_ADDR_VAR 0 10
11114: PUSH
11115: LD_VAR 0 8
11119: PPUSH
11120: LD_VAR 0 1
11124: PPUSH
11125: CALL_OW 74
11129: ST_TO_ADDR
// if not enemy then
11130: LD_VAR 0 10
11134: NOT
11135: IFFALSE 11139
// exit ;
11137: GO 11540
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11139: LD_VAR 0 11
11143: PUSH
11144: LD_VAR 0 11
11148: PPUSH
11149: LD_VAR 0 10
11153: PPUSH
11154: CALL_OW 296
11158: PUSH
11159: LD_INT 13
11161: GREATER
11162: AND
11163: PUSH
11164: LD_VAR 0 1
11168: PPUSH
11169: LD_VAR 0 10
11173: PPUSH
11174: CALL_OW 296
11178: PUSH
11179: LD_INT 12
11181: GREATER
11182: OR
11183: IFFALSE 11187
// exit ;
11185: GO 11540
// missile := [ 1 ] ;
11187: LD_ADDR_VAR 0 14
11191: PUSH
11192: LD_INT 1
11194: PUSH
11195: EMPTY
11196: LIST
11197: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11198: LD_VAR 0 9
11202: PPUSH
11203: LD_VAR 0 12
11207: PPUSH
11208: CALL_OW 325
11212: IFFALSE 11241
// missile := Replace ( missile , missile + 1 , 2 ) ;
11214: LD_ADDR_VAR 0 14
11218: PUSH
11219: LD_VAR 0 14
11223: PPUSH
11224: LD_VAR 0 14
11228: PUSH
11229: LD_INT 1
11231: PLUS
11232: PPUSH
11233: LD_INT 2
11235: PPUSH
11236: CALL_OW 1
11240: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11241: LD_VAR 0 9
11245: PPUSH
11246: LD_VAR 0 13
11250: PPUSH
11251: CALL_OW 325
11255: PUSH
11256: LD_VAR 0 10
11260: PPUSH
11261: CALL_OW 255
11265: PPUSH
11266: LD_VAR 0 13
11270: PPUSH
11271: CALL_OW 325
11275: NOT
11276: AND
11277: IFFALSE 11306
// missile := Replace ( missile , missile + 1 , 3 ) ;
11279: LD_ADDR_VAR 0 14
11283: PUSH
11284: LD_VAR 0 14
11288: PPUSH
11289: LD_VAR 0 14
11293: PUSH
11294: LD_INT 1
11296: PLUS
11297: PPUSH
11298: LD_INT 3
11300: PPUSH
11301: CALL_OW 1
11305: ST_TO_ADDR
// if missile < 2 then
11306: LD_VAR 0 14
11310: PUSH
11311: LD_INT 2
11313: LESS
11314: IFFALSE 11318
// exit ;
11316: GO 11540
// x := GetX ( enemy ) ;
11318: LD_ADDR_VAR 0 4
11322: PUSH
11323: LD_VAR 0 10
11327: PPUSH
11328: CALL_OW 250
11332: ST_TO_ADDR
// y := GetY ( enemy ) ;
11333: LD_ADDR_VAR 0 5
11337: PUSH
11338: LD_VAR 0 10
11342: PPUSH
11343: CALL_OW 251
11347: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11348: LD_ADDR_VAR 0 6
11352: PUSH
11353: LD_VAR 0 4
11357: PUSH
11358: LD_INT 1
11360: NEG
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: CALL_OW 12
11369: PLUS
11370: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11371: LD_ADDR_VAR 0 7
11375: PUSH
11376: LD_VAR 0 5
11380: PUSH
11381: LD_INT 1
11383: NEG
11384: PPUSH
11385: LD_INT 1
11387: PPUSH
11388: CALL_OW 12
11392: PLUS
11393: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11394: LD_VAR 0 6
11398: PPUSH
11399: LD_VAR 0 7
11403: PPUSH
11404: CALL_OW 488
11408: NOT
11409: IFFALSE 11431
// begin _x := x ;
11411: LD_ADDR_VAR 0 6
11415: PUSH
11416: LD_VAR 0 4
11420: ST_TO_ADDR
// _y := y ;
11421: LD_ADDR_VAR 0 7
11425: PUSH
11426: LD_VAR 0 5
11430: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11431: LD_ADDR_VAR 0 3
11435: PUSH
11436: LD_INT 1
11438: PPUSH
11439: LD_VAR 0 14
11443: PPUSH
11444: CALL_OW 12
11448: ST_TO_ADDR
// case i of 1 :
11449: LD_VAR 0 3
11453: PUSH
11454: LD_INT 1
11456: DOUBLE
11457: EQUAL
11458: IFTRUE 11462
11460: GO 11479
11462: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11463: LD_VAR 0 1
11467: PPUSH
11468: LD_VAR 0 10
11472: PPUSH
11473: CALL_OW 115
11477: GO 11540
11479: LD_INT 2
11481: DOUBLE
11482: EQUAL
11483: IFTRUE 11487
11485: GO 11509
11487: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11488: LD_VAR 0 1
11492: PPUSH
11493: LD_VAR 0 6
11497: PPUSH
11498: LD_VAR 0 7
11502: PPUSH
11503: CALL_OW 153
11507: GO 11540
11509: LD_INT 3
11511: DOUBLE
11512: EQUAL
11513: IFTRUE 11517
11515: GO 11539
11517: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11518: LD_VAR 0 1
11522: PPUSH
11523: LD_VAR 0 6
11527: PPUSH
11528: LD_VAR 0 7
11532: PPUSH
11533: CALL_OW 154
11537: GO 11540
11539: POP
// end ;
11540: LD_VAR 0 2
11544: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11545: LD_INT 0
11547: PPUSH
11548: PPUSH
11549: PPUSH
11550: PPUSH
11551: PPUSH
11552: PPUSH
// if not unit or not building then
11553: LD_VAR 0 1
11557: NOT
11558: PUSH
11559: LD_VAR 0 2
11563: NOT
11564: OR
11565: IFFALSE 11569
// exit ;
11567: GO 11727
// x := GetX ( building ) ;
11569: LD_ADDR_VAR 0 5
11573: PUSH
11574: LD_VAR 0 2
11578: PPUSH
11579: CALL_OW 250
11583: ST_TO_ADDR
// y := GetY ( building ) ;
11584: LD_ADDR_VAR 0 6
11588: PUSH
11589: LD_VAR 0 2
11593: PPUSH
11594: CALL_OW 251
11598: ST_TO_ADDR
// for i = 0 to 5 do
11599: LD_ADDR_VAR 0 4
11603: PUSH
11604: DOUBLE
11605: LD_INT 0
11607: DEC
11608: ST_TO_ADDR
11609: LD_INT 5
11611: PUSH
11612: FOR_TO
11613: IFFALSE 11725
// begin _x := ShiftX ( x , i , 3 ) ;
11615: LD_ADDR_VAR 0 7
11619: PUSH
11620: LD_VAR 0 5
11624: PPUSH
11625: LD_VAR 0 4
11629: PPUSH
11630: LD_INT 3
11632: PPUSH
11633: CALL_OW 272
11637: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11638: LD_ADDR_VAR 0 8
11642: PUSH
11643: LD_VAR 0 6
11647: PPUSH
11648: LD_VAR 0 4
11652: PPUSH
11653: LD_INT 3
11655: PPUSH
11656: CALL_OW 273
11660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11661: LD_VAR 0 7
11665: PPUSH
11666: LD_VAR 0 8
11670: PPUSH
11671: CALL_OW 488
11675: NOT
11676: IFFALSE 11680
// continue ;
11678: GO 11612
// if HexInfo ( _x , _y ) = 0 then
11680: LD_VAR 0 7
11684: PPUSH
11685: LD_VAR 0 8
11689: PPUSH
11690: CALL_OW 428
11694: PUSH
11695: LD_INT 0
11697: EQUAL
11698: IFFALSE 11723
// begin ComMoveXY ( unit , _x , _y ) ;
11700: LD_VAR 0 1
11704: PPUSH
11705: LD_VAR 0 7
11709: PPUSH
11710: LD_VAR 0 8
11714: PPUSH
11715: CALL_OW 111
// exit ;
11719: POP
11720: POP
11721: GO 11727
// end ; end ;
11723: GO 11612
11725: POP
11726: POP
// end ;
11727: LD_VAR 0 3
11731: RET
// export function ScanBase ( side , base_area ) ; begin
11732: LD_INT 0
11734: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11735: LD_ADDR_VAR 0 3
11739: PUSH
11740: LD_VAR 0 2
11744: PPUSH
11745: LD_INT 81
11747: PUSH
11748: LD_VAR 0 1
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PPUSH
11757: CALL_OW 70
11761: ST_TO_ADDR
// end ;
11762: LD_VAR 0 3
11766: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11767: LD_INT 0
11769: PPUSH
11770: PPUSH
11771: PPUSH
11772: PPUSH
// result := false ;
11773: LD_ADDR_VAR 0 2
11777: PUSH
11778: LD_INT 0
11780: ST_TO_ADDR
// side := GetSide ( unit ) ;
11781: LD_ADDR_VAR 0 3
11785: PUSH
11786: LD_VAR 0 1
11790: PPUSH
11791: CALL_OW 255
11795: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11796: LD_ADDR_VAR 0 4
11800: PUSH
11801: LD_VAR 0 1
11805: PPUSH
11806: CALL_OW 248
11810: ST_TO_ADDR
// case nat of 1 :
11811: LD_VAR 0 4
11815: PUSH
11816: LD_INT 1
11818: DOUBLE
11819: EQUAL
11820: IFTRUE 11824
11822: GO 11835
11824: POP
// tech := tech_lassight ; 2 :
11825: LD_ADDR_VAR 0 5
11829: PUSH
11830: LD_INT 12
11832: ST_TO_ADDR
11833: GO 11874
11835: LD_INT 2
11837: DOUBLE
11838: EQUAL
11839: IFTRUE 11843
11841: GO 11854
11843: POP
// tech := tech_mortar ; 3 :
11844: LD_ADDR_VAR 0 5
11848: PUSH
11849: LD_INT 41
11851: ST_TO_ADDR
11852: GO 11874
11854: LD_INT 3
11856: DOUBLE
11857: EQUAL
11858: IFTRUE 11862
11860: GO 11873
11862: POP
// tech := tech_bazooka ; end ;
11863: LD_ADDR_VAR 0 5
11867: PUSH
11868: LD_INT 44
11870: ST_TO_ADDR
11871: GO 11874
11873: POP
// if Researched ( side , tech ) then
11874: LD_VAR 0 3
11878: PPUSH
11879: LD_VAR 0 5
11883: PPUSH
11884: CALL_OW 325
11888: IFFALSE 11915
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11890: LD_ADDR_VAR 0 2
11894: PUSH
11895: LD_INT 5
11897: PUSH
11898: LD_INT 8
11900: PUSH
11901: LD_INT 9
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: PUSH
11909: LD_VAR 0 4
11913: ARRAY
11914: ST_TO_ADDR
// end ;
11915: LD_VAR 0 2
11919: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11920: LD_INT 0
11922: PPUSH
11923: PPUSH
11924: PPUSH
// if not mines then
11925: LD_VAR 0 2
11929: NOT
11930: IFFALSE 11934
// exit ;
11932: GO 12078
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11934: LD_ADDR_VAR 0 5
11938: PUSH
11939: LD_INT 81
11941: PUSH
11942: LD_VAR 0 1
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: LD_INT 3
11953: PUSH
11954: LD_INT 21
11956: PUSH
11957: LD_INT 3
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PPUSH
11972: CALL_OW 69
11976: ST_TO_ADDR
// for i in mines do
11977: LD_ADDR_VAR 0 4
11981: PUSH
11982: LD_VAR 0 2
11986: PUSH
11987: FOR_IN
11988: IFFALSE 12076
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11990: LD_VAR 0 4
11994: PUSH
11995: LD_INT 1
11997: ARRAY
11998: PPUSH
11999: LD_VAR 0 4
12003: PUSH
12004: LD_INT 2
12006: ARRAY
12007: PPUSH
12008: CALL_OW 458
12012: NOT
12013: IFFALSE 12017
// continue ;
12015: GO 11987
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12017: LD_VAR 0 4
12021: PUSH
12022: LD_INT 1
12024: ARRAY
12025: PPUSH
12026: LD_VAR 0 4
12030: PUSH
12031: LD_INT 2
12033: ARRAY
12034: PPUSH
12035: CALL_OW 428
12039: PUSH
12040: LD_VAR 0 5
12044: IN
12045: IFFALSE 12074
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12047: LD_VAR 0 4
12051: PUSH
12052: LD_INT 1
12054: ARRAY
12055: PPUSH
12056: LD_VAR 0 4
12060: PUSH
12061: LD_INT 2
12063: ARRAY
12064: PPUSH
12065: LD_VAR 0 1
12069: PPUSH
12070: CALL_OW 456
// end ;
12074: GO 11987
12076: POP
12077: POP
// end ;
12078: LD_VAR 0 3
12082: RET
// export function Count ( array ) ; var i ; begin
12083: LD_INT 0
12085: PPUSH
12086: PPUSH
// result := 0 ;
12087: LD_ADDR_VAR 0 2
12091: PUSH
12092: LD_INT 0
12094: ST_TO_ADDR
// for i in array do
12095: LD_ADDR_VAR 0 3
12099: PUSH
12100: LD_VAR 0 1
12104: PUSH
12105: FOR_IN
12106: IFFALSE 12130
// if i then
12108: LD_VAR 0 3
12112: IFFALSE 12128
// result := result + 1 ;
12114: LD_ADDR_VAR 0 2
12118: PUSH
12119: LD_VAR 0 2
12123: PUSH
12124: LD_INT 1
12126: PLUS
12127: ST_TO_ADDR
12128: GO 12105
12130: POP
12131: POP
// end ;
12132: LD_VAR 0 2
12136: RET
// export function IsEmpty ( building ) ; begin
12137: LD_INT 0
12139: PPUSH
// if not building then
12140: LD_VAR 0 1
12144: NOT
12145: IFFALSE 12149
// exit ;
12147: GO 12192
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12149: LD_ADDR_VAR 0 2
12153: PUSH
12154: LD_VAR 0 1
12158: PUSH
12159: LD_INT 22
12161: PUSH
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 255
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: PUSH
12176: LD_INT 58
12178: PUSH
12179: EMPTY
12180: LIST
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PPUSH
12186: CALL_OW 69
12190: IN
12191: ST_TO_ADDR
// end ;
12192: LD_VAR 0 2
12196: RET
// export function IsNotFull ( building ) ; begin
12197: LD_INT 0
12199: PPUSH
// if not building then
12200: LD_VAR 0 1
12204: NOT
12205: IFFALSE 12209
// exit ;
12207: GO 12228
// result := UnitsInside ( building ) < 6 ;
12209: LD_ADDR_VAR 0 2
12213: PUSH
12214: LD_VAR 0 1
12218: PPUSH
12219: CALL_OW 313
12223: PUSH
12224: LD_INT 6
12226: LESS
12227: ST_TO_ADDR
// end ;
12228: LD_VAR 0 2
12232: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12233: LD_INT 0
12235: PPUSH
12236: PPUSH
12237: PPUSH
12238: PPUSH
// tmp := [ ] ;
12239: LD_ADDR_VAR 0 3
12243: PUSH
12244: EMPTY
12245: ST_TO_ADDR
// list := [ ] ;
12246: LD_ADDR_VAR 0 5
12250: PUSH
12251: EMPTY
12252: ST_TO_ADDR
// for i = 16 to 25 do
12253: LD_ADDR_VAR 0 4
12257: PUSH
12258: DOUBLE
12259: LD_INT 16
12261: DEC
12262: ST_TO_ADDR
12263: LD_INT 25
12265: PUSH
12266: FOR_TO
12267: IFFALSE 12340
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12269: LD_ADDR_VAR 0 3
12273: PUSH
12274: LD_VAR 0 3
12278: PUSH
12279: LD_INT 22
12281: PUSH
12282: LD_VAR 0 1
12286: PPUSH
12287: CALL_OW 255
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 91
12298: PUSH
12299: LD_VAR 0 1
12303: PUSH
12304: LD_INT 6
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 30
12314: PUSH
12315: LD_VAR 0 4
12319: PUSH
12320: EMPTY
12321: LIST
12322: LIST
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: PPUSH
12332: CALL_OW 69
12336: ADD
12337: ST_TO_ADDR
12338: GO 12266
12340: POP
12341: POP
// for i = 1 to tmp do
12342: LD_ADDR_VAR 0 4
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 3
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12446
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12360: LD_ADDR_VAR 0 5
12364: PUSH
12365: LD_VAR 0 5
12369: PUSH
12370: LD_VAR 0 3
12374: PUSH
12375: LD_VAR 0 4
12379: ARRAY
12380: PPUSH
12381: CALL_OW 266
12385: PUSH
12386: LD_VAR 0 3
12390: PUSH
12391: LD_VAR 0 4
12395: ARRAY
12396: PPUSH
12397: CALL_OW 250
12401: PUSH
12402: LD_VAR 0 3
12406: PUSH
12407: LD_VAR 0 4
12411: ARRAY
12412: PPUSH
12413: CALL_OW 251
12417: PUSH
12418: LD_VAR 0 3
12422: PUSH
12423: LD_VAR 0 4
12427: ARRAY
12428: PPUSH
12429: CALL_OW 254
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: ADD
12443: ST_TO_ADDR
12444: GO 12357
12446: POP
12447: POP
// result := list ;
12448: LD_ADDR_VAR 0 2
12452: PUSH
12453: LD_VAR 0 5
12457: ST_TO_ADDR
// end ;
12458: LD_VAR 0 2
12462: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12463: LD_INT 0
12465: PPUSH
12466: PPUSH
12467: PPUSH
12468: PPUSH
12469: PPUSH
12470: PPUSH
12471: PPUSH
// if not factory then
12472: LD_VAR 0 1
12476: NOT
12477: IFFALSE 12481
// exit ;
12479: GO 13074
// if control = control_apeman then
12481: LD_VAR 0 4
12485: PUSH
12486: LD_INT 5
12488: EQUAL
12489: IFFALSE 12598
// begin tmp := UnitsInside ( factory ) ;
12491: LD_ADDR_VAR 0 8
12495: PUSH
12496: LD_VAR 0 1
12500: PPUSH
12501: CALL_OW 313
12505: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12506: LD_VAR 0 8
12510: PPUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 12
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PPUSH
12521: CALL_OW 72
12525: NOT
12526: IFFALSE 12536
// control := control_manual ;
12528: LD_ADDR_VAR 0 4
12532: PUSH
12533: LD_INT 1
12535: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12536: LD_ADDR_VAR 0 8
12540: PUSH
12541: LD_VAR 0 1
12545: PPUSH
12546: CALL 12233 0 1
12550: ST_TO_ADDR
// if tmp then
12551: LD_VAR 0 8
12555: IFFALSE 12598
// begin for i in tmp do
12557: LD_ADDR_VAR 0 7
12561: PUSH
12562: LD_VAR 0 8
12566: PUSH
12567: FOR_IN
12568: IFFALSE 12596
// if i [ 1 ] = b_ext_radio then
12570: LD_VAR 0 7
12574: PUSH
12575: LD_INT 1
12577: ARRAY
12578: PUSH
12579: LD_INT 22
12581: EQUAL
12582: IFFALSE 12594
// begin control := control_remote ;
12584: LD_ADDR_VAR 0 4
12588: PUSH
12589: LD_INT 2
12591: ST_TO_ADDR
// break ;
12592: GO 12596
// end ;
12594: GO 12567
12596: POP
12597: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12598: LD_VAR 0 1
12602: PPUSH
12603: LD_VAR 0 2
12607: PPUSH
12608: LD_VAR 0 3
12612: PPUSH
12613: LD_VAR 0 4
12617: PPUSH
12618: LD_VAR 0 5
12622: PPUSH
12623: CALL_OW 448
12627: IFFALSE 12662
// begin result := [ chassis , engine , control , weapon ] ;
12629: LD_ADDR_VAR 0 6
12633: PUSH
12634: LD_VAR 0 2
12638: PUSH
12639: LD_VAR 0 3
12643: PUSH
12644: LD_VAR 0 4
12648: PUSH
12649: LD_VAR 0 5
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: ST_TO_ADDR
// exit ;
12660: GO 13074
// end ; _chassis := AvailableChassisList ( factory ) ;
12662: LD_ADDR_VAR 0 9
12666: PUSH
12667: LD_VAR 0 1
12671: PPUSH
12672: CALL_OW 475
12676: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12677: LD_ADDR_VAR 0 11
12681: PUSH
12682: LD_VAR 0 1
12686: PPUSH
12687: CALL_OW 476
12691: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12692: LD_ADDR_VAR 0 12
12696: PUSH
12697: LD_VAR 0 1
12701: PPUSH
12702: CALL_OW 477
12706: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12707: LD_ADDR_VAR 0 10
12711: PUSH
12712: LD_VAR 0 1
12716: PPUSH
12717: CALL_OW 478
12721: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12722: LD_VAR 0 9
12726: NOT
12727: PUSH
12728: LD_VAR 0 11
12732: NOT
12733: OR
12734: PUSH
12735: LD_VAR 0 12
12739: NOT
12740: OR
12741: PUSH
12742: LD_VAR 0 10
12746: NOT
12747: OR
12748: IFFALSE 12783
// begin result := [ chassis , engine , control , weapon ] ;
12750: LD_ADDR_VAR 0 6
12754: PUSH
12755: LD_VAR 0 2
12759: PUSH
12760: LD_VAR 0 3
12764: PUSH
12765: LD_VAR 0 4
12769: PUSH
12770: LD_VAR 0 5
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: ST_TO_ADDR
// exit ;
12781: GO 13074
// end ; if not chassis in _chassis then
12783: LD_VAR 0 2
12787: PUSH
12788: LD_VAR 0 9
12792: IN
12793: NOT
12794: IFFALSE 12820
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12796: LD_ADDR_VAR 0 2
12800: PUSH
12801: LD_VAR 0 9
12805: PUSH
12806: LD_INT 1
12808: PPUSH
12809: LD_VAR 0 9
12813: PPUSH
12814: CALL_OW 12
12818: ARRAY
12819: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12820: LD_VAR 0 2
12824: PPUSH
12825: LD_VAR 0 3
12829: PPUSH
12830: CALL 13079 0 2
12834: NOT
12835: IFFALSE 12894
// repeat engine := _engine [ 1 ] ;
12837: LD_ADDR_VAR 0 3
12841: PUSH
12842: LD_VAR 0 11
12846: PUSH
12847: LD_INT 1
12849: ARRAY
12850: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12851: LD_ADDR_VAR 0 11
12855: PUSH
12856: LD_VAR 0 11
12860: PPUSH
12861: LD_INT 1
12863: PPUSH
12864: CALL_OW 3
12868: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12869: LD_VAR 0 2
12873: PPUSH
12874: LD_VAR 0 3
12878: PPUSH
12879: CALL 13079 0 2
12883: PUSH
12884: LD_VAR 0 11
12888: PUSH
12889: EMPTY
12890: EQUAL
12891: OR
12892: IFFALSE 12837
// if not control in _control then
12894: LD_VAR 0 4
12898: PUSH
12899: LD_VAR 0 12
12903: IN
12904: NOT
12905: IFFALSE 12931
// control := _control [ rand ( 1 , _control ) ] ;
12907: LD_ADDR_VAR 0 4
12911: PUSH
12912: LD_VAR 0 12
12916: PUSH
12917: LD_INT 1
12919: PPUSH
12920: LD_VAR 0 12
12924: PPUSH
12925: CALL_OW 12
12929: ARRAY
12930: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12931: LD_VAR 0 2
12935: PPUSH
12936: LD_VAR 0 5
12940: PPUSH
12941: CALL 13299 0 2
12945: NOT
12946: IFFALSE 13005
// repeat weapon := _weapon [ 1 ] ;
12948: LD_ADDR_VAR 0 5
12952: PUSH
12953: LD_VAR 0 10
12957: PUSH
12958: LD_INT 1
12960: ARRAY
12961: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12962: LD_ADDR_VAR 0 10
12966: PUSH
12967: LD_VAR 0 10
12971: PPUSH
12972: LD_INT 1
12974: PPUSH
12975: CALL_OW 3
12979: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12980: LD_VAR 0 2
12984: PPUSH
12985: LD_VAR 0 5
12989: PPUSH
12990: CALL 13299 0 2
12994: PUSH
12995: LD_VAR 0 10
12999: PUSH
13000: EMPTY
13001: EQUAL
13002: OR
13003: IFFALSE 12948
// result := [ ] ;
13005: LD_ADDR_VAR 0 6
13009: PUSH
13010: EMPTY
13011: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13012: LD_VAR 0 1
13016: PPUSH
13017: LD_VAR 0 2
13021: PPUSH
13022: LD_VAR 0 3
13026: PPUSH
13027: LD_VAR 0 4
13031: PPUSH
13032: LD_VAR 0 5
13036: PPUSH
13037: CALL_OW 448
13041: IFFALSE 13074
// result := [ chassis , engine , control , weapon ] ;
13043: LD_ADDR_VAR 0 6
13047: PUSH
13048: LD_VAR 0 2
13052: PUSH
13053: LD_VAR 0 3
13057: PUSH
13058: LD_VAR 0 4
13062: PUSH
13063: LD_VAR 0 5
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: ST_TO_ADDR
// end ;
13074: LD_VAR 0 6
13078: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13079: LD_INT 0
13081: PPUSH
// if not chassis or not engine then
13082: LD_VAR 0 1
13086: NOT
13087: PUSH
13088: LD_VAR 0 2
13092: NOT
13093: OR
13094: IFFALSE 13098
// exit ;
13096: GO 13294
// case engine of engine_solar :
13098: LD_VAR 0 2
13102: PUSH
13103: LD_INT 2
13105: DOUBLE
13106: EQUAL
13107: IFTRUE 13111
13109: GO 13149
13111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13112: LD_ADDR_VAR 0 3
13116: PUSH
13117: LD_INT 11
13119: PUSH
13120: LD_INT 12
13122: PUSH
13123: LD_INT 13
13125: PUSH
13126: LD_INT 14
13128: PUSH
13129: LD_INT 1
13131: PUSH
13132: LD_INT 2
13134: PUSH
13135: LD_INT 3
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: ST_TO_ADDR
13147: GO 13278
13149: LD_INT 1
13151: DOUBLE
13152: EQUAL
13153: IFTRUE 13157
13155: GO 13219
13157: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13158: LD_ADDR_VAR 0 3
13162: PUSH
13163: LD_INT 11
13165: PUSH
13166: LD_INT 12
13168: PUSH
13169: LD_INT 13
13171: PUSH
13172: LD_INT 14
13174: PUSH
13175: LD_INT 1
13177: PUSH
13178: LD_INT 2
13180: PUSH
13181: LD_INT 3
13183: PUSH
13184: LD_INT 4
13186: PUSH
13187: LD_INT 5
13189: PUSH
13190: LD_INT 21
13192: PUSH
13193: LD_INT 23
13195: PUSH
13196: LD_INT 22
13198: PUSH
13199: LD_INT 24
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: ST_TO_ADDR
13217: GO 13278
13219: LD_INT 3
13221: DOUBLE
13222: EQUAL
13223: IFTRUE 13227
13225: GO 13277
13227: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13228: LD_ADDR_VAR 0 3
13232: PUSH
13233: LD_INT 13
13235: PUSH
13236: LD_INT 14
13238: PUSH
13239: LD_INT 2
13241: PUSH
13242: LD_INT 3
13244: PUSH
13245: LD_INT 4
13247: PUSH
13248: LD_INT 5
13250: PUSH
13251: LD_INT 21
13253: PUSH
13254: LD_INT 22
13256: PUSH
13257: LD_INT 23
13259: PUSH
13260: LD_INT 24
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: ST_TO_ADDR
13275: GO 13278
13277: POP
// result := ( chassis in result ) ;
13278: LD_ADDR_VAR 0 3
13282: PUSH
13283: LD_VAR 0 1
13287: PUSH
13288: LD_VAR 0 3
13292: IN
13293: ST_TO_ADDR
// end ;
13294: LD_VAR 0 3
13298: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13299: LD_INT 0
13301: PPUSH
// if not chassis or not weapon then
13302: LD_VAR 0 1
13306: NOT
13307: PUSH
13308: LD_VAR 0 2
13312: NOT
13313: OR
13314: IFFALSE 13318
// exit ;
13316: GO 14380
// case weapon of us_machine_gun :
13318: LD_VAR 0 2
13322: PUSH
13323: LD_INT 2
13325: DOUBLE
13326: EQUAL
13327: IFTRUE 13331
13329: GO 13361
13331: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13332: LD_ADDR_VAR 0 3
13336: PUSH
13337: LD_INT 1
13339: PUSH
13340: LD_INT 2
13342: PUSH
13343: LD_INT 3
13345: PUSH
13346: LD_INT 4
13348: PUSH
13349: LD_INT 5
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: ST_TO_ADDR
13359: GO 14364
13361: LD_INT 3
13363: DOUBLE
13364: EQUAL
13365: IFTRUE 13369
13367: GO 13399
13369: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13370: LD_ADDR_VAR 0 3
13374: PUSH
13375: LD_INT 1
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: LD_INT 3
13383: PUSH
13384: LD_INT 4
13386: PUSH
13387: LD_INT 5
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: ST_TO_ADDR
13397: GO 14364
13399: LD_INT 11
13401: DOUBLE
13402: EQUAL
13403: IFTRUE 13407
13405: GO 13437
13407: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13408: LD_ADDR_VAR 0 3
13412: PUSH
13413: LD_INT 1
13415: PUSH
13416: LD_INT 2
13418: PUSH
13419: LD_INT 3
13421: PUSH
13422: LD_INT 4
13424: PUSH
13425: LD_INT 5
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: ST_TO_ADDR
13435: GO 14364
13437: LD_INT 4
13439: DOUBLE
13440: EQUAL
13441: IFTRUE 13445
13443: GO 13471
13445: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13446: LD_ADDR_VAR 0 3
13450: PUSH
13451: LD_INT 2
13453: PUSH
13454: LD_INT 3
13456: PUSH
13457: LD_INT 4
13459: PUSH
13460: LD_INT 5
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: ST_TO_ADDR
13469: GO 14364
13471: LD_INT 5
13473: DOUBLE
13474: EQUAL
13475: IFTRUE 13479
13477: GO 13505
13479: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13480: LD_ADDR_VAR 0 3
13484: PUSH
13485: LD_INT 2
13487: PUSH
13488: LD_INT 3
13490: PUSH
13491: LD_INT 4
13493: PUSH
13494: LD_INT 5
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: ST_TO_ADDR
13503: GO 14364
13505: LD_INT 9
13507: DOUBLE
13508: EQUAL
13509: IFTRUE 13513
13511: GO 13539
13513: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13514: LD_ADDR_VAR 0 3
13518: PUSH
13519: LD_INT 2
13521: PUSH
13522: LD_INT 3
13524: PUSH
13525: LD_INT 4
13527: PUSH
13528: LD_INT 5
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: LIST
13535: LIST
13536: ST_TO_ADDR
13537: GO 14364
13539: LD_INT 7
13541: DOUBLE
13542: EQUAL
13543: IFTRUE 13547
13545: GO 13573
13547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13548: LD_ADDR_VAR 0 3
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: LD_INT 3
13558: PUSH
13559: LD_INT 4
13561: PUSH
13562: LD_INT 5
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: LIST
13570: ST_TO_ADDR
13571: GO 14364
13573: LD_INT 12
13575: DOUBLE
13576: EQUAL
13577: IFTRUE 13581
13579: GO 13607
13581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13582: LD_ADDR_VAR 0 3
13586: PUSH
13587: LD_INT 2
13589: PUSH
13590: LD_INT 3
13592: PUSH
13593: LD_INT 4
13595: PUSH
13596: LD_INT 5
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: ST_TO_ADDR
13605: GO 14364
13607: LD_INT 13
13609: DOUBLE
13610: EQUAL
13611: IFTRUE 13615
13613: GO 13641
13615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13616: LD_ADDR_VAR 0 3
13620: PUSH
13621: LD_INT 2
13623: PUSH
13624: LD_INT 3
13626: PUSH
13627: LD_INT 4
13629: PUSH
13630: LD_INT 5
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: ST_TO_ADDR
13639: GO 14364
13641: LD_INT 14
13643: DOUBLE
13644: EQUAL
13645: IFTRUE 13649
13647: GO 13667
13649: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13650: LD_ADDR_VAR 0 3
13654: PUSH
13655: LD_INT 4
13657: PUSH
13658: LD_INT 5
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: ST_TO_ADDR
13665: GO 14364
13667: LD_INT 6
13669: DOUBLE
13670: EQUAL
13671: IFTRUE 13675
13673: GO 13693
13675: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13676: LD_ADDR_VAR 0 3
13680: PUSH
13681: LD_INT 4
13683: PUSH
13684: LD_INT 5
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: ST_TO_ADDR
13691: GO 14364
13693: LD_INT 10
13695: DOUBLE
13696: EQUAL
13697: IFTRUE 13701
13699: GO 13719
13701: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13702: LD_ADDR_VAR 0 3
13706: PUSH
13707: LD_INT 4
13709: PUSH
13710: LD_INT 5
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: ST_TO_ADDR
13717: GO 14364
13719: LD_INT 22
13721: DOUBLE
13722: EQUAL
13723: IFTRUE 13727
13725: GO 13753
13727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13728: LD_ADDR_VAR 0 3
13732: PUSH
13733: LD_INT 11
13735: PUSH
13736: LD_INT 12
13738: PUSH
13739: LD_INT 13
13741: PUSH
13742: LD_INT 14
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: ST_TO_ADDR
13751: GO 14364
13753: LD_INT 23
13755: DOUBLE
13756: EQUAL
13757: IFTRUE 13761
13759: GO 13787
13761: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13762: LD_ADDR_VAR 0 3
13766: PUSH
13767: LD_INT 11
13769: PUSH
13770: LD_INT 12
13772: PUSH
13773: LD_INT 13
13775: PUSH
13776: LD_INT 14
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: ST_TO_ADDR
13785: GO 14364
13787: LD_INT 24
13789: DOUBLE
13790: EQUAL
13791: IFTRUE 13795
13793: GO 13821
13795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13796: LD_ADDR_VAR 0 3
13800: PUSH
13801: LD_INT 11
13803: PUSH
13804: LD_INT 12
13806: PUSH
13807: LD_INT 13
13809: PUSH
13810: LD_INT 14
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: ST_TO_ADDR
13819: GO 14364
13821: LD_INT 30
13823: DOUBLE
13824: EQUAL
13825: IFTRUE 13829
13827: GO 13855
13829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13830: LD_ADDR_VAR 0 3
13834: PUSH
13835: LD_INT 11
13837: PUSH
13838: LD_INT 12
13840: PUSH
13841: LD_INT 13
13843: PUSH
13844: LD_INT 14
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: ST_TO_ADDR
13853: GO 14364
13855: LD_INT 25
13857: DOUBLE
13858: EQUAL
13859: IFTRUE 13863
13861: GO 13881
13863: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13864: LD_ADDR_VAR 0 3
13868: PUSH
13869: LD_INT 13
13871: PUSH
13872: LD_INT 14
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: ST_TO_ADDR
13879: GO 14364
13881: LD_INT 27
13883: DOUBLE
13884: EQUAL
13885: IFTRUE 13889
13887: GO 13907
13889: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13890: LD_ADDR_VAR 0 3
13894: PUSH
13895: LD_INT 13
13897: PUSH
13898: LD_INT 14
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: ST_TO_ADDR
13905: GO 14364
13907: LD_EXP 87
13911: DOUBLE
13912: EQUAL
13913: IFTRUE 13917
13915: GO 13943
13917: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13918: LD_ADDR_VAR 0 3
13922: PUSH
13923: LD_INT 11
13925: PUSH
13926: LD_INT 12
13928: PUSH
13929: LD_INT 13
13931: PUSH
13932: LD_INT 14
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: ST_TO_ADDR
13941: GO 14364
13943: LD_INT 28
13945: DOUBLE
13946: EQUAL
13947: IFTRUE 13951
13949: GO 13969
13951: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13952: LD_ADDR_VAR 0 3
13956: PUSH
13957: LD_INT 13
13959: PUSH
13960: LD_INT 14
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: ST_TO_ADDR
13967: GO 14364
13969: LD_INT 29
13971: DOUBLE
13972: EQUAL
13973: IFTRUE 13977
13975: GO 13995
13977: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13978: LD_ADDR_VAR 0 3
13982: PUSH
13983: LD_INT 13
13985: PUSH
13986: LD_INT 14
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: ST_TO_ADDR
13993: GO 14364
13995: LD_INT 31
13997: DOUBLE
13998: EQUAL
13999: IFTRUE 14003
14001: GO 14021
14003: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14004: LD_ADDR_VAR 0 3
14008: PUSH
14009: LD_INT 13
14011: PUSH
14012: LD_INT 14
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: ST_TO_ADDR
14019: GO 14364
14021: LD_INT 26
14023: DOUBLE
14024: EQUAL
14025: IFTRUE 14029
14027: GO 14047
14029: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14030: LD_ADDR_VAR 0 3
14034: PUSH
14035: LD_INT 13
14037: PUSH
14038: LD_INT 14
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: ST_TO_ADDR
14045: GO 14364
14047: LD_INT 42
14049: DOUBLE
14050: EQUAL
14051: IFTRUE 14055
14053: GO 14081
14055: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14056: LD_ADDR_VAR 0 3
14060: PUSH
14061: LD_INT 21
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_INT 23
14069: PUSH
14070: LD_INT 24
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: ST_TO_ADDR
14079: GO 14364
14081: LD_INT 43
14083: DOUBLE
14084: EQUAL
14085: IFTRUE 14089
14087: GO 14115
14089: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14090: LD_ADDR_VAR 0 3
14094: PUSH
14095: LD_INT 21
14097: PUSH
14098: LD_INT 22
14100: PUSH
14101: LD_INT 23
14103: PUSH
14104: LD_INT 24
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: ST_TO_ADDR
14113: GO 14364
14115: LD_INT 44
14117: DOUBLE
14118: EQUAL
14119: IFTRUE 14123
14121: GO 14149
14123: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14124: LD_ADDR_VAR 0 3
14128: PUSH
14129: LD_INT 21
14131: PUSH
14132: LD_INT 22
14134: PUSH
14135: LD_INT 23
14137: PUSH
14138: LD_INT 24
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: ST_TO_ADDR
14147: GO 14364
14149: LD_INT 45
14151: DOUBLE
14152: EQUAL
14153: IFTRUE 14157
14155: GO 14183
14157: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14158: LD_ADDR_VAR 0 3
14162: PUSH
14163: LD_INT 21
14165: PUSH
14166: LD_INT 22
14168: PUSH
14169: LD_INT 23
14171: PUSH
14172: LD_INT 24
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: ST_TO_ADDR
14181: GO 14364
14183: LD_INT 49
14185: DOUBLE
14186: EQUAL
14187: IFTRUE 14191
14189: GO 14217
14191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14192: LD_ADDR_VAR 0 3
14196: PUSH
14197: LD_INT 21
14199: PUSH
14200: LD_INT 22
14202: PUSH
14203: LD_INT 23
14205: PUSH
14206: LD_INT 24
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: ST_TO_ADDR
14215: GO 14364
14217: LD_INT 51
14219: DOUBLE
14220: EQUAL
14221: IFTRUE 14225
14223: GO 14251
14225: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14226: LD_ADDR_VAR 0 3
14230: PUSH
14231: LD_INT 21
14233: PUSH
14234: LD_INT 22
14236: PUSH
14237: LD_INT 23
14239: PUSH
14240: LD_INT 24
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: ST_TO_ADDR
14249: GO 14364
14251: LD_INT 52
14253: DOUBLE
14254: EQUAL
14255: IFTRUE 14259
14257: GO 14285
14259: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14260: LD_ADDR_VAR 0 3
14264: PUSH
14265: LD_INT 21
14267: PUSH
14268: LD_INT 22
14270: PUSH
14271: LD_INT 23
14273: PUSH
14274: LD_INT 24
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: ST_TO_ADDR
14283: GO 14364
14285: LD_INT 53
14287: DOUBLE
14288: EQUAL
14289: IFTRUE 14293
14291: GO 14311
14293: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14294: LD_ADDR_VAR 0 3
14298: PUSH
14299: LD_INT 23
14301: PUSH
14302: LD_INT 24
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: ST_TO_ADDR
14309: GO 14364
14311: LD_INT 46
14313: DOUBLE
14314: EQUAL
14315: IFTRUE 14319
14317: GO 14337
14319: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14320: LD_ADDR_VAR 0 3
14324: PUSH
14325: LD_INT 23
14327: PUSH
14328: LD_INT 24
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: ST_TO_ADDR
14335: GO 14364
14337: LD_INT 47
14339: DOUBLE
14340: EQUAL
14341: IFTRUE 14345
14343: GO 14363
14345: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14346: LD_ADDR_VAR 0 3
14350: PUSH
14351: LD_INT 23
14353: PUSH
14354: LD_INT 24
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: ST_TO_ADDR
14361: GO 14364
14363: POP
// result := ( chassis in result ) ;
14364: LD_ADDR_VAR 0 3
14368: PUSH
14369: LD_VAR 0 1
14373: PUSH
14374: LD_VAR 0 3
14378: IN
14379: ST_TO_ADDR
// end ;
14380: LD_VAR 0 3
14384: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14385: LD_INT 0
14387: PPUSH
14388: PPUSH
14389: PPUSH
14390: PPUSH
14391: PPUSH
14392: PPUSH
14393: PPUSH
// result := array ;
14394: LD_ADDR_VAR 0 5
14398: PUSH
14399: LD_VAR 0 1
14403: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14404: LD_VAR 0 1
14408: NOT
14409: PUSH
14410: LD_VAR 0 2
14414: NOT
14415: OR
14416: PUSH
14417: LD_VAR 0 3
14421: NOT
14422: OR
14423: PUSH
14424: LD_VAR 0 2
14428: PUSH
14429: LD_VAR 0 1
14433: GREATER
14434: OR
14435: PUSH
14436: LD_VAR 0 3
14440: PUSH
14441: LD_VAR 0 1
14445: GREATER
14446: OR
14447: IFFALSE 14451
// exit ;
14449: GO 14747
// if direction then
14451: LD_VAR 0 4
14455: IFFALSE 14519
// begin d := 1 ;
14457: LD_ADDR_VAR 0 9
14461: PUSH
14462: LD_INT 1
14464: ST_TO_ADDR
// if i_from > i_to then
14465: LD_VAR 0 2
14469: PUSH
14470: LD_VAR 0 3
14474: GREATER
14475: IFFALSE 14501
// length := ( array - i_from ) + i_to else
14477: LD_ADDR_VAR 0 11
14481: PUSH
14482: LD_VAR 0 1
14486: PUSH
14487: LD_VAR 0 2
14491: MINUS
14492: PUSH
14493: LD_VAR 0 3
14497: PLUS
14498: ST_TO_ADDR
14499: GO 14517
// length := i_to - i_from ;
14501: LD_ADDR_VAR 0 11
14505: PUSH
14506: LD_VAR 0 3
14510: PUSH
14511: LD_VAR 0 2
14515: MINUS
14516: ST_TO_ADDR
// end else
14517: GO 14580
// begin d := - 1 ;
14519: LD_ADDR_VAR 0 9
14523: PUSH
14524: LD_INT 1
14526: NEG
14527: ST_TO_ADDR
// if i_from > i_to then
14528: LD_VAR 0 2
14532: PUSH
14533: LD_VAR 0 3
14537: GREATER
14538: IFFALSE 14558
// length := i_from - i_to else
14540: LD_ADDR_VAR 0 11
14544: PUSH
14545: LD_VAR 0 2
14549: PUSH
14550: LD_VAR 0 3
14554: MINUS
14555: ST_TO_ADDR
14556: GO 14580
// length := ( array - i_to ) + i_from ;
14558: LD_ADDR_VAR 0 11
14562: PUSH
14563: LD_VAR 0 1
14567: PUSH
14568: LD_VAR 0 3
14572: MINUS
14573: PUSH
14574: LD_VAR 0 2
14578: PLUS
14579: ST_TO_ADDR
// end ; if not length then
14580: LD_VAR 0 11
14584: NOT
14585: IFFALSE 14589
// exit ;
14587: GO 14747
// tmp := array ;
14589: LD_ADDR_VAR 0 10
14593: PUSH
14594: LD_VAR 0 1
14598: ST_TO_ADDR
// for i = 1 to length do
14599: LD_ADDR_VAR 0 6
14603: PUSH
14604: DOUBLE
14605: LD_INT 1
14607: DEC
14608: ST_TO_ADDR
14609: LD_VAR 0 11
14613: PUSH
14614: FOR_TO
14615: IFFALSE 14735
// begin for j = 1 to array do
14617: LD_ADDR_VAR 0 7
14621: PUSH
14622: DOUBLE
14623: LD_INT 1
14625: DEC
14626: ST_TO_ADDR
14627: LD_VAR 0 1
14631: PUSH
14632: FOR_TO
14633: IFFALSE 14721
// begin k := j + d ;
14635: LD_ADDR_VAR 0 8
14639: PUSH
14640: LD_VAR 0 7
14644: PUSH
14645: LD_VAR 0 9
14649: PLUS
14650: ST_TO_ADDR
// if k > array then
14651: LD_VAR 0 8
14655: PUSH
14656: LD_VAR 0 1
14660: GREATER
14661: IFFALSE 14671
// k := 1 ;
14663: LD_ADDR_VAR 0 8
14667: PUSH
14668: LD_INT 1
14670: ST_TO_ADDR
// if not k then
14671: LD_VAR 0 8
14675: NOT
14676: IFFALSE 14688
// k := array ;
14678: LD_ADDR_VAR 0 8
14682: PUSH
14683: LD_VAR 0 1
14687: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14688: LD_ADDR_VAR 0 10
14692: PUSH
14693: LD_VAR 0 10
14697: PPUSH
14698: LD_VAR 0 8
14702: PPUSH
14703: LD_VAR 0 1
14707: PUSH
14708: LD_VAR 0 7
14712: ARRAY
14713: PPUSH
14714: CALL_OW 1
14718: ST_TO_ADDR
// end ;
14719: GO 14632
14721: POP
14722: POP
// array := tmp ;
14723: LD_ADDR_VAR 0 1
14727: PUSH
14728: LD_VAR 0 10
14732: ST_TO_ADDR
// end ;
14733: GO 14614
14735: POP
14736: POP
// result := array ;
14737: LD_ADDR_VAR 0 5
14741: PUSH
14742: LD_VAR 0 1
14746: ST_TO_ADDR
// end ;
14747: LD_VAR 0 5
14751: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14752: LD_INT 0
14754: PPUSH
14755: PPUSH
// result := 0 ;
14756: LD_ADDR_VAR 0 3
14760: PUSH
14761: LD_INT 0
14763: ST_TO_ADDR
// if not array or not value in array then
14764: LD_VAR 0 1
14768: NOT
14769: PUSH
14770: LD_VAR 0 2
14774: PUSH
14775: LD_VAR 0 1
14779: IN
14780: NOT
14781: OR
14782: IFFALSE 14786
// exit ;
14784: GO 14840
// for i = 1 to array do
14786: LD_ADDR_VAR 0 4
14790: PUSH
14791: DOUBLE
14792: LD_INT 1
14794: DEC
14795: ST_TO_ADDR
14796: LD_VAR 0 1
14800: PUSH
14801: FOR_TO
14802: IFFALSE 14838
// if value = array [ i ] then
14804: LD_VAR 0 2
14808: PUSH
14809: LD_VAR 0 1
14813: PUSH
14814: LD_VAR 0 4
14818: ARRAY
14819: EQUAL
14820: IFFALSE 14836
// begin result := i ;
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: LD_VAR 0 4
14831: ST_TO_ADDR
// exit ;
14832: POP
14833: POP
14834: GO 14840
// end ;
14836: GO 14801
14838: POP
14839: POP
// end ;
14840: LD_VAR 0 3
14844: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14845: LD_INT 0
14847: PPUSH
// vc_chassis := chassis ;
14848: LD_ADDR_OWVAR 37
14852: PUSH
14853: LD_VAR 0 1
14857: ST_TO_ADDR
// vc_engine := engine ;
14858: LD_ADDR_OWVAR 39
14862: PUSH
14863: LD_VAR 0 2
14867: ST_TO_ADDR
// vc_control := control ;
14868: LD_ADDR_OWVAR 38
14872: PUSH
14873: LD_VAR 0 3
14877: ST_TO_ADDR
// vc_weapon := weapon ;
14878: LD_ADDR_OWVAR 40
14882: PUSH
14883: LD_VAR 0 4
14887: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14888: LD_ADDR_OWVAR 41
14892: PUSH
14893: LD_VAR 0 5
14897: ST_TO_ADDR
// end ;
14898: LD_VAR 0 6
14902: RET
// export function WantPlant ( unit ) ; var task ; begin
14903: LD_INT 0
14905: PPUSH
14906: PPUSH
// result := false ;
14907: LD_ADDR_VAR 0 2
14911: PUSH
14912: LD_INT 0
14914: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14915: LD_ADDR_VAR 0 3
14919: PUSH
14920: LD_VAR 0 1
14924: PPUSH
14925: CALL_OW 437
14929: ST_TO_ADDR
// if task then
14930: LD_VAR 0 3
14934: IFFALSE 14962
// if task [ 1 ] [ 1 ] = p then
14936: LD_VAR 0 3
14940: PUSH
14941: LD_INT 1
14943: ARRAY
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PUSH
14949: LD_STRING p
14951: EQUAL
14952: IFFALSE 14962
// result := true ;
14954: LD_ADDR_VAR 0 2
14958: PUSH
14959: LD_INT 1
14961: ST_TO_ADDR
// end ;
14962: LD_VAR 0 2
14966: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14967: LD_INT 0
14969: PPUSH
14970: PPUSH
14971: PPUSH
14972: PPUSH
// if pos < 1 then
14973: LD_VAR 0 2
14977: PUSH
14978: LD_INT 1
14980: LESS
14981: IFFALSE 14985
// exit ;
14983: GO 15288
// if pos = 1 then
14985: LD_VAR 0 2
14989: PUSH
14990: LD_INT 1
14992: EQUAL
14993: IFFALSE 15026
// result := Replace ( arr , pos [ 1 ] , value ) else
14995: LD_ADDR_VAR 0 4
14999: PUSH
15000: LD_VAR 0 1
15004: PPUSH
15005: LD_VAR 0 2
15009: PUSH
15010: LD_INT 1
15012: ARRAY
15013: PPUSH
15014: LD_VAR 0 3
15018: PPUSH
15019: CALL_OW 1
15023: ST_TO_ADDR
15024: GO 15288
// begin tmp := arr ;
15026: LD_ADDR_VAR 0 6
15030: PUSH
15031: LD_VAR 0 1
15035: ST_TO_ADDR
// s_arr := [ tmp ] ;
15036: LD_ADDR_VAR 0 7
15040: PUSH
15041: LD_VAR 0 6
15045: PUSH
15046: EMPTY
15047: LIST
15048: ST_TO_ADDR
// for i = 1 to pos - 1 do
15049: LD_ADDR_VAR 0 5
15053: PUSH
15054: DOUBLE
15055: LD_INT 1
15057: DEC
15058: ST_TO_ADDR
15059: LD_VAR 0 2
15063: PUSH
15064: LD_INT 1
15066: MINUS
15067: PUSH
15068: FOR_TO
15069: IFFALSE 15114
// begin tmp := tmp [ pos [ i ] ] ;
15071: LD_ADDR_VAR 0 6
15075: PUSH
15076: LD_VAR 0 6
15080: PUSH
15081: LD_VAR 0 2
15085: PUSH
15086: LD_VAR 0 5
15090: ARRAY
15091: ARRAY
15092: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15093: LD_ADDR_VAR 0 7
15097: PUSH
15098: LD_VAR 0 7
15102: PUSH
15103: LD_VAR 0 6
15107: PUSH
15108: EMPTY
15109: LIST
15110: ADD
15111: ST_TO_ADDR
// end ;
15112: GO 15068
15114: POP
15115: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15116: LD_ADDR_VAR 0 6
15120: PUSH
15121: LD_VAR 0 6
15125: PPUSH
15126: LD_VAR 0 2
15130: PUSH
15131: LD_VAR 0 2
15135: ARRAY
15136: PPUSH
15137: LD_VAR 0 3
15141: PPUSH
15142: CALL_OW 1
15146: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15147: LD_ADDR_VAR 0 7
15151: PUSH
15152: LD_VAR 0 7
15156: PPUSH
15157: LD_VAR 0 7
15161: PPUSH
15162: LD_VAR 0 6
15166: PPUSH
15167: CALL_OW 1
15171: ST_TO_ADDR
// for i = s_arr downto 2 do
15172: LD_ADDR_VAR 0 5
15176: PUSH
15177: DOUBLE
15178: LD_VAR 0 7
15182: INC
15183: ST_TO_ADDR
15184: LD_INT 2
15186: PUSH
15187: FOR_DOWNTO
15188: IFFALSE 15272
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15190: LD_ADDR_VAR 0 6
15194: PUSH
15195: LD_VAR 0 7
15199: PUSH
15200: LD_VAR 0 5
15204: PUSH
15205: LD_INT 1
15207: MINUS
15208: ARRAY
15209: PPUSH
15210: LD_VAR 0 2
15214: PUSH
15215: LD_VAR 0 5
15219: PUSH
15220: LD_INT 1
15222: MINUS
15223: ARRAY
15224: PPUSH
15225: LD_VAR 0 7
15229: PUSH
15230: LD_VAR 0 5
15234: ARRAY
15235: PPUSH
15236: CALL_OW 1
15240: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15241: LD_ADDR_VAR 0 7
15245: PUSH
15246: LD_VAR 0 7
15250: PPUSH
15251: LD_VAR 0 5
15255: PUSH
15256: LD_INT 1
15258: MINUS
15259: PPUSH
15260: LD_VAR 0 6
15264: PPUSH
15265: CALL_OW 1
15269: ST_TO_ADDR
// end ;
15270: GO 15187
15272: POP
15273: POP
// result := s_arr [ 1 ] ;
15274: LD_ADDR_VAR 0 4
15278: PUSH
15279: LD_VAR 0 7
15283: PUSH
15284: LD_INT 1
15286: ARRAY
15287: ST_TO_ADDR
// end ; end ;
15288: LD_VAR 0 4
15292: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15293: LD_INT 0
15295: PPUSH
15296: PPUSH
// if not list then
15297: LD_VAR 0 1
15301: NOT
15302: IFFALSE 15306
// exit ;
15304: GO 15397
// i := list [ pos1 ] ;
15306: LD_ADDR_VAR 0 5
15310: PUSH
15311: LD_VAR 0 1
15315: PUSH
15316: LD_VAR 0 2
15320: ARRAY
15321: ST_TO_ADDR
// if not i then
15322: LD_VAR 0 5
15326: NOT
15327: IFFALSE 15331
// exit ;
15329: GO 15397
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15331: LD_ADDR_VAR 0 1
15335: PUSH
15336: LD_VAR 0 1
15340: PPUSH
15341: LD_VAR 0 2
15345: PPUSH
15346: LD_VAR 0 1
15350: PUSH
15351: LD_VAR 0 3
15355: ARRAY
15356: PPUSH
15357: CALL_OW 1
15361: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15362: LD_ADDR_VAR 0 1
15366: PUSH
15367: LD_VAR 0 1
15371: PPUSH
15372: LD_VAR 0 3
15376: PPUSH
15377: LD_VAR 0 5
15381: PPUSH
15382: CALL_OW 1
15386: ST_TO_ADDR
// result := list ;
15387: LD_ADDR_VAR 0 4
15391: PUSH
15392: LD_VAR 0 1
15396: ST_TO_ADDR
// end ;
15397: LD_VAR 0 4
15401: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15402: LD_INT 0
15404: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15405: LD_ADDR_VAR 0 5
15409: PUSH
15410: LD_VAR 0 1
15414: PPUSH
15415: CALL_OW 250
15419: PPUSH
15420: LD_VAR 0 1
15424: PPUSH
15425: CALL_OW 251
15429: PPUSH
15430: LD_VAR 0 2
15434: PPUSH
15435: LD_VAR 0 3
15439: PPUSH
15440: LD_VAR 0 4
15444: PPUSH
15445: CALL 15455 0 5
15449: ST_TO_ADDR
// end ;
15450: LD_VAR 0 5
15454: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15455: LD_INT 0
15457: PPUSH
15458: PPUSH
15459: PPUSH
15460: PPUSH
// if not list then
15461: LD_VAR 0 3
15465: NOT
15466: IFFALSE 15470
// exit ;
15468: GO 15858
// result := [ ] ;
15470: LD_ADDR_VAR 0 6
15474: PUSH
15475: EMPTY
15476: ST_TO_ADDR
// for i in list do
15477: LD_ADDR_VAR 0 7
15481: PUSH
15482: LD_VAR 0 3
15486: PUSH
15487: FOR_IN
15488: IFFALSE 15690
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15490: LD_ADDR_VAR 0 9
15494: PUSH
15495: LD_VAR 0 7
15499: PPUSH
15500: LD_VAR 0 1
15504: PPUSH
15505: LD_VAR 0 2
15509: PPUSH
15510: CALL_OW 297
15514: ST_TO_ADDR
// if not result then
15515: LD_VAR 0 6
15519: NOT
15520: IFFALSE 15546
// result := [ [ i , tmp ] ] else
15522: LD_ADDR_VAR 0 6
15526: PUSH
15527: LD_VAR 0 7
15531: PUSH
15532: LD_VAR 0 9
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: ST_TO_ADDR
15544: GO 15688
// begin if result [ result ] [ 2 ] < tmp then
15546: LD_VAR 0 6
15550: PUSH
15551: LD_VAR 0 6
15555: ARRAY
15556: PUSH
15557: LD_INT 2
15559: ARRAY
15560: PUSH
15561: LD_VAR 0 9
15565: LESS
15566: IFFALSE 15608
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15568: LD_ADDR_VAR 0 6
15572: PUSH
15573: LD_VAR 0 6
15577: PPUSH
15578: LD_VAR 0 6
15582: PUSH
15583: LD_INT 1
15585: PLUS
15586: PPUSH
15587: LD_VAR 0 7
15591: PUSH
15592: LD_VAR 0 9
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PPUSH
15601: CALL_OW 2
15605: ST_TO_ADDR
15606: GO 15688
// for j = 1 to result do
15608: LD_ADDR_VAR 0 8
15612: PUSH
15613: DOUBLE
15614: LD_INT 1
15616: DEC
15617: ST_TO_ADDR
15618: LD_VAR 0 6
15622: PUSH
15623: FOR_TO
15624: IFFALSE 15686
// begin if tmp < result [ j ] [ 2 ] then
15626: LD_VAR 0 9
15630: PUSH
15631: LD_VAR 0 6
15635: PUSH
15636: LD_VAR 0 8
15640: ARRAY
15641: PUSH
15642: LD_INT 2
15644: ARRAY
15645: LESS
15646: IFFALSE 15684
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15648: LD_ADDR_VAR 0 6
15652: PUSH
15653: LD_VAR 0 6
15657: PPUSH
15658: LD_VAR 0 8
15662: PPUSH
15663: LD_VAR 0 7
15667: PUSH
15668: LD_VAR 0 9
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PPUSH
15677: CALL_OW 2
15681: ST_TO_ADDR
// break ;
15682: GO 15686
// end ; end ;
15684: GO 15623
15686: POP
15687: POP
// end ; end ;
15688: GO 15487
15690: POP
15691: POP
// if result and not asc then
15692: LD_VAR 0 6
15696: PUSH
15697: LD_VAR 0 4
15701: NOT
15702: AND
15703: IFFALSE 15778
// begin tmp := result ;
15705: LD_ADDR_VAR 0 9
15709: PUSH
15710: LD_VAR 0 6
15714: ST_TO_ADDR
// for i = tmp downto 1 do
15715: LD_ADDR_VAR 0 7
15719: PUSH
15720: DOUBLE
15721: LD_VAR 0 9
15725: INC
15726: ST_TO_ADDR
15727: LD_INT 1
15729: PUSH
15730: FOR_DOWNTO
15731: IFFALSE 15776
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15733: LD_ADDR_VAR 0 6
15737: PUSH
15738: LD_VAR 0 6
15742: PPUSH
15743: LD_VAR 0 9
15747: PUSH
15748: LD_VAR 0 7
15752: MINUS
15753: PUSH
15754: LD_INT 1
15756: PLUS
15757: PPUSH
15758: LD_VAR 0 9
15762: PUSH
15763: LD_VAR 0 7
15767: ARRAY
15768: PPUSH
15769: CALL_OW 1
15773: ST_TO_ADDR
15774: GO 15730
15776: POP
15777: POP
// end ; tmp := [ ] ;
15778: LD_ADDR_VAR 0 9
15782: PUSH
15783: EMPTY
15784: ST_TO_ADDR
// if mode then
15785: LD_VAR 0 5
15789: IFFALSE 15858
// begin for i = 1 to result do
15791: LD_ADDR_VAR 0 7
15795: PUSH
15796: DOUBLE
15797: LD_INT 1
15799: DEC
15800: ST_TO_ADDR
15801: LD_VAR 0 6
15805: PUSH
15806: FOR_TO
15807: IFFALSE 15846
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15809: LD_ADDR_VAR 0 9
15813: PUSH
15814: LD_VAR 0 9
15818: PPUSH
15819: LD_VAR 0 7
15823: PPUSH
15824: LD_VAR 0 6
15828: PUSH
15829: LD_VAR 0 7
15833: ARRAY
15834: PUSH
15835: LD_INT 1
15837: ARRAY
15838: PPUSH
15839: CALL_OW 1
15843: ST_TO_ADDR
15844: GO 15806
15846: POP
15847: POP
// result := tmp ;
15848: LD_ADDR_VAR 0 6
15852: PUSH
15853: LD_VAR 0 9
15857: ST_TO_ADDR
// end ; end ;
15858: LD_VAR 0 6
15862: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15863: LD_INT 0
15865: PPUSH
15866: PPUSH
15867: PPUSH
15868: PPUSH
15869: PPUSH
15870: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15871: LD_ADDR_VAR 0 5
15875: PUSH
15876: LD_INT 0
15878: PUSH
15879: LD_INT 0
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: EMPTY
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: ST_TO_ADDR
// if not x or not y then
15893: LD_VAR 0 2
15897: NOT
15898: PUSH
15899: LD_VAR 0 3
15903: NOT
15904: OR
15905: IFFALSE 15909
// exit ;
15907: GO 17561
// if not range then
15909: LD_VAR 0 4
15913: NOT
15914: IFFALSE 15924
// range := 10 ;
15916: LD_ADDR_VAR 0 4
15920: PUSH
15921: LD_INT 10
15923: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15924: LD_ADDR_VAR 0 8
15928: PUSH
15929: LD_INT 81
15931: PUSH
15932: LD_VAR 0 1
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 92
15943: PUSH
15944: LD_VAR 0 2
15948: PUSH
15949: LD_VAR 0 3
15953: PUSH
15954: LD_VAR 0 4
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 3
15967: PUSH
15968: LD_INT 21
15970: PUSH
15971: LD_INT 3
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: LIST
15986: PPUSH
15987: CALL_OW 69
15991: ST_TO_ADDR
// if not tmp then
15992: LD_VAR 0 8
15996: NOT
15997: IFFALSE 16001
// exit ;
15999: GO 17561
// for i in tmp do
16001: LD_ADDR_VAR 0 6
16005: PUSH
16006: LD_VAR 0 8
16010: PUSH
16011: FOR_IN
16012: IFFALSE 17536
// begin points := [ 0 , 0 , 0 ] ;
16014: LD_ADDR_VAR 0 9
16018: PUSH
16019: LD_INT 0
16021: PUSH
16022: LD_INT 0
16024: PUSH
16025: LD_INT 0
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: LIST
16032: ST_TO_ADDR
// bpoints := 1 ;
16033: LD_ADDR_VAR 0 10
16037: PUSH
16038: LD_INT 1
16040: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16041: LD_VAR 0 6
16045: PPUSH
16046: CALL_OW 247
16050: PUSH
16051: LD_INT 1
16053: DOUBLE
16054: EQUAL
16055: IFTRUE 16059
16057: GO 16637
16059: POP
// begin if GetClass ( i ) = 1 then
16060: LD_VAR 0 6
16064: PPUSH
16065: CALL_OW 257
16069: PUSH
16070: LD_INT 1
16072: EQUAL
16073: IFFALSE 16094
// points := [ 10 , 5 , 3 ] ;
16075: LD_ADDR_VAR 0 9
16079: PUSH
16080: LD_INT 10
16082: PUSH
16083: LD_INT 5
16085: PUSH
16086: LD_INT 3
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: LIST
16093: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16094: LD_VAR 0 6
16098: PPUSH
16099: CALL_OW 257
16103: PUSH
16104: LD_INT 2
16106: PUSH
16107: LD_INT 3
16109: PUSH
16110: LD_INT 4
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: LIST
16117: IN
16118: IFFALSE 16139
// points := [ 3 , 2 , 1 ] ;
16120: LD_ADDR_VAR 0 9
16124: PUSH
16125: LD_INT 3
16127: PUSH
16128: LD_INT 2
16130: PUSH
16131: LD_INT 1
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: LIST
16138: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16139: LD_VAR 0 6
16143: PPUSH
16144: CALL_OW 257
16148: PUSH
16149: LD_INT 5
16151: EQUAL
16152: IFFALSE 16173
// points := [ 130 , 5 , 2 ] ;
16154: LD_ADDR_VAR 0 9
16158: PUSH
16159: LD_INT 130
16161: PUSH
16162: LD_INT 5
16164: PUSH
16165: LD_INT 2
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16173: LD_VAR 0 6
16177: PPUSH
16178: CALL_OW 257
16182: PUSH
16183: LD_INT 8
16185: EQUAL
16186: IFFALSE 16207
// points := [ 35 , 35 , 30 ] ;
16188: LD_ADDR_VAR 0 9
16192: PUSH
16193: LD_INT 35
16195: PUSH
16196: LD_INT 35
16198: PUSH
16199: LD_INT 30
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: LIST
16206: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16207: LD_VAR 0 6
16211: PPUSH
16212: CALL_OW 257
16216: PUSH
16217: LD_INT 9
16219: EQUAL
16220: IFFALSE 16241
// points := [ 20 , 55 , 40 ] ;
16222: LD_ADDR_VAR 0 9
16226: PUSH
16227: LD_INT 20
16229: PUSH
16230: LD_INT 55
16232: PUSH
16233: LD_INT 40
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: LIST
16240: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16241: LD_VAR 0 6
16245: PPUSH
16246: CALL_OW 257
16250: PUSH
16251: LD_INT 12
16253: PUSH
16254: LD_INT 16
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: IN
16261: IFFALSE 16282
// points := [ 5 , 3 , 2 ] ;
16263: LD_ADDR_VAR 0 9
16267: PUSH
16268: LD_INT 5
16270: PUSH
16271: LD_INT 3
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16282: LD_VAR 0 6
16286: PPUSH
16287: CALL_OW 257
16291: PUSH
16292: LD_INT 17
16294: EQUAL
16295: IFFALSE 16316
// points := [ 100 , 50 , 75 ] ;
16297: LD_ADDR_VAR 0 9
16301: PUSH
16302: LD_INT 100
16304: PUSH
16305: LD_INT 50
16307: PUSH
16308: LD_INT 75
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16316: LD_VAR 0 6
16320: PPUSH
16321: CALL_OW 257
16325: PUSH
16326: LD_INT 15
16328: EQUAL
16329: IFFALSE 16350
// points := [ 10 , 5 , 3 ] ;
16331: LD_ADDR_VAR 0 9
16335: PUSH
16336: LD_INT 10
16338: PUSH
16339: LD_INT 5
16341: PUSH
16342: LD_INT 3
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: LIST
16349: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16350: LD_VAR 0 6
16354: PPUSH
16355: CALL_OW 257
16359: PUSH
16360: LD_INT 14
16362: EQUAL
16363: IFFALSE 16384
// points := [ 10 , 0 , 0 ] ;
16365: LD_ADDR_VAR 0 9
16369: PUSH
16370: LD_INT 10
16372: PUSH
16373: LD_INT 0
16375: PUSH
16376: LD_INT 0
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: LIST
16383: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16384: LD_VAR 0 6
16388: PPUSH
16389: CALL_OW 257
16393: PUSH
16394: LD_INT 11
16396: EQUAL
16397: IFFALSE 16418
// points := [ 30 , 10 , 5 ] ;
16399: LD_ADDR_VAR 0 9
16403: PUSH
16404: LD_INT 30
16406: PUSH
16407: LD_INT 10
16409: PUSH
16410: LD_INT 5
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: LIST
16417: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16418: LD_VAR 0 1
16422: PPUSH
16423: LD_INT 5
16425: PPUSH
16426: CALL_OW 321
16430: PUSH
16431: LD_INT 2
16433: EQUAL
16434: IFFALSE 16451
// bpoints := bpoints * 1.8 ;
16436: LD_ADDR_VAR 0 10
16440: PUSH
16441: LD_VAR 0 10
16445: PUSH
16446: LD_REAL  1.80000000000000E+0000
16449: MUL
16450: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16451: LD_VAR 0 6
16455: PPUSH
16456: CALL_OW 257
16460: PUSH
16461: LD_INT 1
16463: PUSH
16464: LD_INT 2
16466: PUSH
16467: LD_INT 3
16469: PUSH
16470: LD_INT 4
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: IN
16479: PUSH
16480: LD_VAR 0 1
16484: PPUSH
16485: LD_INT 51
16487: PPUSH
16488: CALL_OW 321
16492: PUSH
16493: LD_INT 2
16495: EQUAL
16496: AND
16497: IFFALSE 16514
// bpoints := bpoints * 1.2 ;
16499: LD_ADDR_VAR 0 10
16503: PUSH
16504: LD_VAR 0 10
16508: PUSH
16509: LD_REAL  1.20000000000000E+0000
16512: MUL
16513: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16514: LD_VAR 0 6
16518: PPUSH
16519: CALL_OW 257
16523: PUSH
16524: LD_INT 5
16526: PUSH
16527: LD_INT 7
16529: PUSH
16530: LD_INT 9
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: IN
16538: PUSH
16539: LD_VAR 0 1
16543: PPUSH
16544: LD_INT 52
16546: PPUSH
16547: CALL_OW 321
16551: PUSH
16552: LD_INT 2
16554: EQUAL
16555: AND
16556: IFFALSE 16573
// bpoints := bpoints * 1.5 ;
16558: LD_ADDR_VAR 0 10
16562: PUSH
16563: LD_VAR 0 10
16567: PUSH
16568: LD_REAL  1.50000000000000E+0000
16571: MUL
16572: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16573: LD_VAR 0 1
16577: PPUSH
16578: LD_INT 66
16580: PPUSH
16581: CALL_OW 321
16585: PUSH
16586: LD_INT 2
16588: EQUAL
16589: IFFALSE 16606
// bpoints := bpoints * 1.1 ;
16591: LD_ADDR_VAR 0 10
16595: PUSH
16596: LD_VAR 0 10
16600: PUSH
16601: LD_REAL  1.10000000000000E+0000
16604: MUL
16605: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16606: LD_ADDR_VAR 0 10
16610: PUSH
16611: LD_VAR 0 10
16615: PUSH
16616: LD_VAR 0 6
16620: PPUSH
16621: LD_INT 1
16623: PPUSH
16624: CALL_OW 259
16628: PUSH
16629: LD_REAL  1.15000000000000E+0000
16632: MUL
16633: MUL
16634: ST_TO_ADDR
// end ; unit_vehicle :
16635: GO 17465
16637: LD_INT 2
16639: DOUBLE
16640: EQUAL
16641: IFTRUE 16645
16643: GO 17453
16645: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16646: LD_VAR 0 6
16650: PPUSH
16651: CALL_OW 264
16655: PUSH
16656: LD_INT 2
16658: PUSH
16659: LD_INT 42
16661: PUSH
16662: LD_INT 24
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: IN
16670: IFFALSE 16691
// points := [ 25 , 5 , 3 ] ;
16672: LD_ADDR_VAR 0 9
16676: PUSH
16677: LD_INT 25
16679: PUSH
16680: LD_INT 5
16682: PUSH
16683: LD_INT 3
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: LIST
16690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16691: LD_VAR 0 6
16695: PPUSH
16696: CALL_OW 264
16700: PUSH
16701: LD_INT 4
16703: PUSH
16704: LD_INT 43
16706: PUSH
16707: LD_INT 25
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: IN
16715: IFFALSE 16736
// points := [ 40 , 15 , 5 ] ;
16717: LD_ADDR_VAR 0 9
16721: PUSH
16722: LD_INT 40
16724: PUSH
16725: LD_INT 15
16727: PUSH
16728: LD_INT 5
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16736: LD_VAR 0 6
16740: PPUSH
16741: CALL_OW 264
16745: PUSH
16746: LD_INT 3
16748: PUSH
16749: LD_INT 23
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: IN
16756: IFFALSE 16777
// points := [ 7 , 25 , 8 ] ;
16758: LD_ADDR_VAR 0 9
16762: PUSH
16763: LD_INT 7
16765: PUSH
16766: LD_INT 25
16768: PUSH
16769: LD_INT 8
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16777: LD_VAR 0 6
16781: PPUSH
16782: CALL_OW 264
16786: PUSH
16787: LD_INT 5
16789: PUSH
16790: LD_INT 27
16792: PUSH
16793: LD_INT 44
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: IN
16801: IFFALSE 16822
// points := [ 14 , 50 , 16 ] ;
16803: LD_ADDR_VAR 0 9
16807: PUSH
16808: LD_INT 14
16810: PUSH
16811: LD_INT 50
16813: PUSH
16814: LD_INT 16
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16822: LD_VAR 0 6
16826: PPUSH
16827: CALL_OW 264
16831: PUSH
16832: LD_INT 6
16834: PUSH
16835: LD_INT 46
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: IN
16842: IFFALSE 16863
// points := [ 32 , 120 , 70 ] ;
16844: LD_ADDR_VAR 0 9
16848: PUSH
16849: LD_INT 32
16851: PUSH
16852: LD_INT 120
16854: PUSH
16855: LD_INT 70
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16863: LD_VAR 0 6
16867: PPUSH
16868: CALL_OW 264
16872: PUSH
16873: LD_INT 7
16875: PUSH
16876: LD_INT 28
16878: PUSH
16879: LD_INT 45
16881: PUSH
16882: LD_EXP 87
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: IN
16893: IFFALSE 16914
// points := [ 35 , 20 , 45 ] ;
16895: LD_ADDR_VAR 0 9
16899: PUSH
16900: LD_INT 35
16902: PUSH
16903: LD_INT 20
16905: PUSH
16906: LD_INT 45
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: LIST
16913: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16914: LD_VAR 0 6
16918: PPUSH
16919: CALL_OW 264
16923: PUSH
16924: LD_INT 47
16926: PUSH
16927: EMPTY
16928: LIST
16929: IN
16930: IFFALSE 16951
// points := [ 67 , 45 , 75 ] ;
16932: LD_ADDR_VAR 0 9
16936: PUSH
16937: LD_INT 67
16939: PUSH
16940: LD_INT 45
16942: PUSH
16943: LD_INT 75
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: LIST
16950: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16951: LD_VAR 0 6
16955: PPUSH
16956: CALL_OW 264
16960: PUSH
16961: LD_INT 26
16963: PUSH
16964: EMPTY
16965: LIST
16966: IN
16967: IFFALSE 16988
// points := [ 120 , 30 , 80 ] ;
16969: LD_ADDR_VAR 0 9
16973: PUSH
16974: LD_INT 120
16976: PUSH
16977: LD_INT 30
16979: PUSH
16980: LD_INT 80
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16988: LD_VAR 0 6
16992: PPUSH
16993: CALL_OW 264
16997: PUSH
16998: LD_INT 22
17000: PUSH
17001: EMPTY
17002: LIST
17003: IN
17004: IFFALSE 17025
// points := [ 40 , 1 , 1 ] ;
17006: LD_ADDR_VAR 0 9
17010: PUSH
17011: LD_INT 40
17013: PUSH
17014: LD_INT 1
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: LIST
17024: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17025: LD_VAR 0 6
17029: PPUSH
17030: CALL_OW 264
17034: PUSH
17035: LD_INT 29
17037: PUSH
17038: EMPTY
17039: LIST
17040: IN
17041: IFFALSE 17062
// points := [ 70 , 200 , 400 ] ;
17043: LD_ADDR_VAR 0 9
17047: PUSH
17048: LD_INT 70
17050: PUSH
17051: LD_INT 200
17053: PUSH
17054: LD_INT 400
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17062: LD_VAR 0 6
17066: PPUSH
17067: CALL_OW 264
17071: PUSH
17072: LD_INT 14
17074: PUSH
17075: LD_INT 53
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: IN
17082: IFFALSE 17103
// points := [ 40 , 10 , 20 ] ;
17084: LD_ADDR_VAR 0 9
17088: PUSH
17089: LD_INT 40
17091: PUSH
17092: LD_INT 10
17094: PUSH
17095: LD_INT 20
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17103: LD_VAR 0 6
17107: PPUSH
17108: CALL_OW 264
17112: PUSH
17113: LD_INT 9
17115: PUSH
17116: EMPTY
17117: LIST
17118: IN
17119: IFFALSE 17140
// points := [ 5 , 70 , 20 ] ;
17121: LD_ADDR_VAR 0 9
17125: PUSH
17126: LD_INT 5
17128: PUSH
17129: LD_INT 70
17131: PUSH
17132: LD_INT 20
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17140: LD_VAR 0 6
17144: PPUSH
17145: CALL_OW 264
17149: PUSH
17150: LD_INT 10
17152: PUSH
17153: EMPTY
17154: LIST
17155: IN
17156: IFFALSE 17177
// points := [ 35 , 110 , 70 ] ;
17158: LD_ADDR_VAR 0 9
17162: PUSH
17163: LD_INT 35
17165: PUSH
17166: LD_INT 110
17168: PUSH
17169: LD_INT 70
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: LIST
17176: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17177: LD_VAR 0 6
17181: PPUSH
17182: CALL_OW 265
17186: PUSH
17187: LD_INT 25
17189: EQUAL
17190: IFFALSE 17211
// points := [ 80 , 65 , 100 ] ;
17192: LD_ADDR_VAR 0 9
17196: PUSH
17197: LD_INT 80
17199: PUSH
17200: LD_INT 65
17202: PUSH
17203: LD_INT 100
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17211: LD_VAR 0 6
17215: PPUSH
17216: CALL_OW 263
17220: PUSH
17221: LD_INT 1
17223: EQUAL
17224: IFFALSE 17259
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17226: LD_ADDR_VAR 0 10
17230: PUSH
17231: LD_VAR 0 10
17235: PUSH
17236: LD_VAR 0 6
17240: PPUSH
17241: CALL_OW 311
17245: PPUSH
17246: LD_INT 3
17248: PPUSH
17249: CALL_OW 259
17253: PUSH
17254: LD_INT 4
17256: MUL
17257: MUL
17258: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17259: LD_VAR 0 6
17263: PPUSH
17264: CALL_OW 263
17268: PUSH
17269: LD_INT 2
17271: EQUAL
17272: IFFALSE 17323
// begin j := IsControledBy ( i ) ;
17274: LD_ADDR_VAR 0 7
17278: PUSH
17279: LD_VAR 0 6
17283: PPUSH
17284: CALL_OW 312
17288: ST_TO_ADDR
// if j then
17289: LD_VAR 0 7
17293: IFFALSE 17323
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17295: LD_ADDR_VAR 0 10
17299: PUSH
17300: LD_VAR 0 10
17304: PUSH
17305: LD_VAR 0 7
17309: PPUSH
17310: LD_INT 3
17312: PPUSH
17313: CALL_OW 259
17317: PUSH
17318: LD_INT 3
17320: MUL
17321: MUL
17322: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17323: LD_VAR 0 6
17327: PPUSH
17328: CALL_OW 264
17332: PUSH
17333: LD_INT 5
17335: PUSH
17336: LD_INT 6
17338: PUSH
17339: LD_INT 46
17341: PUSH
17342: LD_INT 44
17344: PUSH
17345: LD_INT 47
17347: PUSH
17348: LD_INT 45
17350: PUSH
17351: LD_INT 28
17353: PUSH
17354: LD_INT 7
17356: PUSH
17357: LD_INT 27
17359: PUSH
17360: LD_INT 29
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: IN
17375: PUSH
17376: LD_VAR 0 1
17380: PPUSH
17381: LD_INT 52
17383: PPUSH
17384: CALL_OW 321
17388: PUSH
17389: LD_INT 2
17391: EQUAL
17392: AND
17393: IFFALSE 17410
// bpoints := bpoints * 1.2 ;
17395: LD_ADDR_VAR 0 10
17399: PUSH
17400: LD_VAR 0 10
17404: PUSH
17405: LD_REAL  1.20000000000000E+0000
17408: MUL
17409: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17410: LD_VAR 0 6
17414: PPUSH
17415: CALL_OW 264
17419: PUSH
17420: LD_INT 6
17422: PUSH
17423: LD_INT 46
17425: PUSH
17426: LD_INT 47
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: LIST
17433: IN
17434: IFFALSE 17451
// bpoints := bpoints * 1.2 ;
17436: LD_ADDR_VAR 0 10
17440: PUSH
17441: LD_VAR 0 10
17445: PUSH
17446: LD_REAL  1.20000000000000E+0000
17449: MUL
17450: ST_TO_ADDR
// end ; unit_building :
17451: GO 17465
17453: LD_INT 3
17455: DOUBLE
17456: EQUAL
17457: IFTRUE 17461
17459: GO 17464
17461: POP
// ; end ;
17462: GO 17465
17464: POP
// for j = 1 to 3 do
17465: LD_ADDR_VAR 0 7
17469: PUSH
17470: DOUBLE
17471: LD_INT 1
17473: DEC
17474: ST_TO_ADDR
17475: LD_INT 3
17477: PUSH
17478: FOR_TO
17479: IFFALSE 17532
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17481: LD_ADDR_VAR 0 5
17485: PUSH
17486: LD_VAR 0 5
17490: PPUSH
17491: LD_VAR 0 7
17495: PPUSH
17496: LD_VAR 0 5
17500: PUSH
17501: LD_VAR 0 7
17505: ARRAY
17506: PUSH
17507: LD_VAR 0 9
17511: PUSH
17512: LD_VAR 0 7
17516: ARRAY
17517: PUSH
17518: LD_VAR 0 10
17522: MUL
17523: PLUS
17524: PPUSH
17525: CALL_OW 1
17529: ST_TO_ADDR
17530: GO 17478
17532: POP
17533: POP
// end ;
17534: GO 16011
17536: POP
17537: POP
// result := Replace ( result , 4 , tmp ) ;
17538: LD_ADDR_VAR 0 5
17542: PUSH
17543: LD_VAR 0 5
17547: PPUSH
17548: LD_INT 4
17550: PPUSH
17551: LD_VAR 0 8
17555: PPUSH
17556: CALL_OW 1
17560: ST_TO_ADDR
// end ;
17561: LD_VAR 0 5
17565: RET
// export function DangerAtRange ( unit , range ) ; begin
17566: LD_INT 0
17568: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17569: LD_ADDR_VAR 0 3
17573: PUSH
17574: LD_VAR 0 1
17578: PPUSH
17579: CALL_OW 255
17583: PPUSH
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 250
17593: PPUSH
17594: LD_VAR 0 1
17598: PPUSH
17599: CALL_OW 251
17603: PPUSH
17604: LD_VAR 0 2
17608: PPUSH
17609: CALL 15863 0 4
17613: ST_TO_ADDR
// end ;
17614: LD_VAR 0 3
17618: RET
// export function DangerInArea ( side , area ) ; begin
17619: LD_INT 0
17621: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17622: LD_ADDR_VAR 0 3
17626: PUSH
17627: LD_VAR 0 2
17631: PPUSH
17632: LD_INT 81
17634: PUSH
17635: LD_VAR 0 1
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PPUSH
17644: CALL_OW 70
17648: ST_TO_ADDR
// end ;
17649: LD_VAR 0 3
17653: RET
// export function IsExtension ( b ) ; begin
17654: LD_INT 0
17656: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17657: LD_ADDR_VAR 0 2
17661: PUSH
17662: LD_VAR 0 1
17666: PUSH
17667: LD_INT 23
17669: PUSH
17670: LD_INT 20
17672: PUSH
17673: LD_INT 22
17675: PUSH
17676: LD_INT 17
17678: PUSH
17679: LD_INT 24
17681: PUSH
17682: LD_INT 21
17684: PUSH
17685: LD_INT 19
17687: PUSH
17688: LD_INT 16
17690: PUSH
17691: LD_INT 25
17693: PUSH
17694: LD_INT 18
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: IN
17709: ST_TO_ADDR
// end ;
17710: LD_VAR 0 2
17714: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17715: LD_INT 0
17717: PPUSH
17718: PPUSH
17719: PPUSH
// result := [ ] ;
17720: LD_ADDR_VAR 0 4
17724: PUSH
17725: EMPTY
17726: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17727: LD_ADDR_VAR 0 5
17731: PUSH
17732: LD_VAR 0 2
17736: PPUSH
17737: LD_INT 21
17739: PUSH
17740: LD_INT 3
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PPUSH
17747: CALL_OW 70
17751: ST_TO_ADDR
// if not tmp then
17752: LD_VAR 0 5
17756: NOT
17757: IFFALSE 17761
// exit ;
17759: GO 17825
// if checkLink then
17761: LD_VAR 0 3
17765: IFFALSE 17815
// begin for i in tmp do
17767: LD_ADDR_VAR 0 6
17771: PUSH
17772: LD_VAR 0 5
17776: PUSH
17777: FOR_IN
17778: IFFALSE 17813
// if GetBase ( i ) <> base then
17780: LD_VAR 0 6
17784: PPUSH
17785: CALL_OW 274
17789: PUSH
17790: LD_VAR 0 1
17794: NONEQUAL
17795: IFFALSE 17811
// ComLinkToBase ( base , i ) ;
17797: LD_VAR 0 1
17801: PPUSH
17802: LD_VAR 0 6
17806: PPUSH
17807: CALL_OW 169
17811: GO 17777
17813: POP
17814: POP
// end ; result := tmp ;
17815: LD_ADDR_VAR 0 4
17819: PUSH
17820: LD_VAR 0 5
17824: ST_TO_ADDR
// end ;
17825: LD_VAR 0 4
17829: RET
// export function ComComplete ( units , b ) ; var i ; begin
17830: LD_INT 0
17832: PPUSH
17833: PPUSH
// if not units then
17834: LD_VAR 0 1
17838: NOT
17839: IFFALSE 17843
// exit ;
17841: GO 17933
// for i in units do
17843: LD_ADDR_VAR 0 4
17847: PUSH
17848: LD_VAR 0 1
17852: PUSH
17853: FOR_IN
17854: IFFALSE 17931
// if BuildingStatus ( b ) = bs_build then
17856: LD_VAR 0 2
17860: PPUSH
17861: CALL_OW 461
17865: PUSH
17866: LD_INT 1
17868: EQUAL
17869: IFFALSE 17929
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17871: LD_VAR 0 4
17875: PPUSH
17876: LD_STRING h
17878: PUSH
17879: LD_VAR 0 2
17883: PPUSH
17884: CALL_OW 250
17888: PUSH
17889: LD_VAR 0 2
17893: PPUSH
17894: CALL_OW 251
17898: PUSH
17899: LD_VAR 0 2
17903: PUSH
17904: LD_INT 0
17906: PUSH
17907: LD_INT 0
17909: PUSH
17910: LD_INT 0
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: PUSH
17922: EMPTY
17923: LIST
17924: PPUSH
17925: CALL_OW 446
17929: GO 17853
17931: POP
17932: POP
// end ;
17933: LD_VAR 0 3
17937: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17938: LD_INT 0
17940: PPUSH
17941: PPUSH
17942: PPUSH
17943: PPUSH
17944: PPUSH
17945: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17946: LD_VAR 0 1
17950: NOT
17951: PUSH
17952: LD_VAR 0 1
17956: PPUSH
17957: CALL_OW 263
17961: PUSH
17962: LD_INT 2
17964: NONEQUAL
17965: OR
17966: IFFALSE 17970
// exit ;
17968: GO 18286
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17970: LD_ADDR_VAR 0 6
17974: PUSH
17975: LD_INT 22
17977: PUSH
17978: LD_VAR 0 1
17982: PPUSH
17983: CALL_OW 255
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: LD_INT 2
17994: PUSH
17995: LD_INT 30
17997: PUSH
17998: LD_INT 36
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 34
18007: PUSH
18008: LD_INT 31
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PPUSH
18024: CALL_OW 69
18028: ST_TO_ADDR
// if not tmp then
18029: LD_VAR 0 6
18033: NOT
18034: IFFALSE 18038
// exit ;
18036: GO 18286
// result := [ ] ;
18038: LD_ADDR_VAR 0 2
18042: PUSH
18043: EMPTY
18044: ST_TO_ADDR
// for i in tmp do
18045: LD_ADDR_VAR 0 3
18049: PUSH
18050: LD_VAR 0 6
18054: PUSH
18055: FOR_IN
18056: IFFALSE 18127
// begin t := UnitsInside ( i ) ;
18058: LD_ADDR_VAR 0 4
18062: PUSH
18063: LD_VAR 0 3
18067: PPUSH
18068: CALL_OW 313
18072: ST_TO_ADDR
// if t then
18073: LD_VAR 0 4
18077: IFFALSE 18125
// for j in t do
18079: LD_ADDR_VAR 0 7
18083: PUSH
18084: LD_VAR 0 4
18088: PUSH
18089: FOR_IN
18090: IFFALSE 18123
// result := Replace ( result , result + 1 , j ) ;
18092: LD_ADDR_VAR 0 2
18096: PUSH
18097: LD_VAR 0 2
18101: PPUSH
18102: LD_VAR 0 2
18106: PUSH
18107: LD_INT 1
18109: PLUS
18110: PPUSH
18111: LD_VAR 0 7
18115: PPUSH
18116: CALL_OW 1
18120: ST_TO_ADDR
18121: GO 18089
18123: POP
18124: POP
// end ;
18125: GO 18055
18127: POP
18128: POP
// if not result then
18129: LD_VAR 0 2
18133: NOT
18134: IFFALSE 18138
// exit ;
18136: GO 18286
// mech := result [ 1 ] ;
18138: LD_ADDR_VAR 0 5
18142: PUSH
18143: LD_VAR 0 2
18147: PUSH
18148: LD_INT 1
18150: ARRAY
18151: ST_TO_ADDR
// if result > 1 then
18152: LD_VAR 0 2
18156: PUSH
18157: LD_INT 1
18159: GREATER
18160: IFFALSE 18272
// begin for i = 2 to result do
18162: LD_ADDR_VAR 0 3
18166: PUSH
18167: DOUBLE
18168: LD_INT 2
18170: DEC
18171: ST_TO_ADDR
18172: LD_VAR 0 2
18176: PUSH
18177: FOR_TO
18178: IFFALSE 18270
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18180: LD_ADDR_VAR 0 4
18184: PUSH
18185: LD_VAR 0 2
18189: PUSH
18190: LD_VAR 0 3
18194: ARRAY
18195: PPUSH
18196: LD_INT 3
18198: PPUSH
18199: CALL_OW 259
18203: PUSH
18204: LD_VAR 0 2
18208: PUSH
18209: LD_VAR 0 3
18213: ARRAY
18214: PPUSH
18215: CALL_OW 432
18219: MINUS
18220: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18221: LD_VAR 0 4
18225: PUSH
18226: LD_VAR 0 5
18230: PPUSH
18231: LD_INT 3
18233: PPUSH
18234: CALL_OW 259
18238: PUSH
18239: LD_VAR 0 5
18243: PPUSH
18244: CALL_OW 432
18248: MINUS
18249: GREATEREQUAL
18250: IFFALSE 18268
// mech := result [ i ] ;
18252: LD_ADDR_VAR 0 5
18256: PUSH
18257: LD_VAR 0 2
18261: PUSH
18262: LD_VAR 0 3
18266: ARRAY
18267: ST_TO_ADDR
// end ;
18268: GO 18177
18270: POP
18271: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18272: LD_VAR 0 1
18276: PPUSH
18277: LD_VAR 0 5
18281: PPUSH
18282: CALL_OW 135
// end ;
18286: LD_VAR 0 2
18290: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18291: LD_INT 0
18293: PPUSH
18294: PPUSH
18295: PPUSH
18296: PPUSH
18297: PPUSH
18298: PPUSH
18299: PPUSH
18300: PPUSH
18301: PPUSH
18302: PPUSH
18303: PPUSH
18304: PPUSH
18305: PPUSH
// result := [ ] ;
18306: LD_ADDR_VAR 0 7
18310: PUSH
18311: EMPTY
18312: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 266
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: LD_INT 1
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: IN
18333: NOT
18334: IFFALSE 18338
// exit ;
18336: GO 19972
// if name then
18338: LD_VAR 0 3
18342: IFFALSE 18358
// SetBName ( base_dep , name ) ;
18344: LD_VAR 0 1
18348: PPUSH
18349: LD_VAR 0 3
18353: PPUSH
18354: CALL_OW 500
// base := GetBase ( base_dep ) ;
18358: LD_ADDR_VAR 0 15
18362: PUSH
18363: LD_VAR 0 1
18367: PPUSH
18368: CALL_OW 274
18372: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18373: LD_ADDR_VAR 0 16
18377: PUSH
18378: LD_VAR 0 1
18382: PPUSH
18383: CALL_OW 255
18387: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18388: LD_ADDR_VAR 0 17
18392: PUSH
18393: LD_VAR 0 1
18397: PPUSH
18398: CALL_OW 248
18402: ST_TO_ADDR
// if sources then
18403: LD_VAR 0 5
18407: IFFALSE 18454
// for i = 1 to 3 do
18409: LD_ADDR_VAR 0 8
18413: PUSH
18414: DOUBLE
18415: LD_INT 1
18417: DEC
18418: ST_TO_ADDR
18419: LD_INT 3
18421: PUSH
18422: FOR_TO
18423: IFFALSE 18452
// AddResourceType ( base , i , sources [ i ] ) ;
18425: LD_VAR 0 15
18429: PPUSH
18430: LD_VAR 0 8
18434: PPUSH
18435: LD_VAR 0 5
18439: PUSH
18440: LD_VAR 0 8
18444: ARRAY
18445: PPUSH
18446: CALL_OW 276
18450: GO 18422
18452: POP
18453: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18454: LD_ADDR_VAR 0 18
18458: PUSH
18459: LD_VAR 0 15
18463: PPUSH
18464: LD_VAR 0 2
18468: PPUSH
18469: LD_INT 1
18471: PPUSH
18472: CALL 17715 0 3
18476: ST_TO_ADDR
// InitHc ;
18477: CALL_OW 19
// InitUc ;
18481: CALL_OW 18
// uc_side := side ;
18485: LD_ADDR_OWVAR 20
18489: PUSH
18490: LD_VAR 0 16
18494: ST_TO_ADDR
// uc_nation := nation ;
18495: LD_ADDR_OWVAR 21
18499: PUSH
18500: LD_VAR 0 17
18504: ST_TO_ADDR
// if buildings then
18505: LD_VAR 0 18
18509: IFFALSE 19831
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18511: LD_ADDR_VAR 0 19
18515: PUSH
18516: LD_VAR 0 18
18520: PPUSH
18521: LD_INT 2
18523: PUSH
18524: LD_INT 30
18526: PUSH
18527: LD_INT 29
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 30
18536: PUSH
18537: LD_INT 30
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 72
18553: ST_TO_ADDR
// if tmp then
18554: LD_VAR 0 19
18558: IFFALSE 18606
// for i in tmp do
18560: LD_ADDR_VAR 0 8
18564: PUSH
18565: LD_VAR 0 19
18569: PUSH
18570: FOR_IN
18571: IFFALSE 18604
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18573: LD_VAR 0 8
18577: PPUSH
18578: CALL_OW 250
18582: PPUSH
18583: LD_VAR 0 8
18587: PPUSH
18588: CALL_OW 251
18592: PPUSH
18593: LD_VAR 0 16
18597: PPUSH
18598: CALL_OW 441
18602: GO 18570
18604: POP
18605: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18606: LD_VAR 0 18
18610: PPUSH
18611: LD_INT 2
18613: PUSH
18614: LD_INT 30
18616: PUSH
18617: LD_INT 32
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 30
18626: PUSH
18627: LD_INT 33
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: LIST
18638: PPUSH
18639: CALL_OW 72
18643: IFFALSE 18731
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18645: LD_ADDR_VAR 0 8
18649: PUSH
18650: LD_VAR 0 18
18654: PPUSH
18655: LD_INT 2
18657: PUSH
18658: LD_INT 30
18660: PUSH
18661: LD_INT 32
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 30
18670: PUSH
18671: LD_INT 33
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: PPUSH
18683: CALL_OW 72
18687: PUSH
18688: FOR_IN
18689: IFFALSE 18729
// begin if not GetBWeapon ( i ) then
18691: LD_VAR 0 8
18695: PPUSH
18696: CALL_OW 269
18700: NOT
18701: IFFALSE 18727
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18703: LD_VAR 0 8
18707: PPUSH
18708: LD_VAR 0 8
18712: PPUSH
18713: LD_VAR 0 2
18717: PPUSH
18718: CALL 19977 0 2
18722: PPUSH
18723: CALL_OW 431
// end ;
18727: GO 18688
18729: POP
18730: POP
// end ; for i = 1 to personel do
18731: LD_ADDR_VAR 0 8
18735: PUSH
18736: DOUBLE
18737: LD_INT 1
18739: DEC
18740: ST_TO_ADDR
18741: LD_VAR 0 6
18745: PUSH
18746: FOR_TO
18747: IFFALSE 19811
// begin if i > 4 then
18749: LD_VAR 0 8
18753: PUSH
18754: LD_INT 4
18756: GREATER
18757: IFFALSE 18761
// break ;
18759: GO 19811
// case i of 1 :
18761: LD_VAR 0 8
18765: PUSH
18766: LD_INT 1
18768: DOUBLE
18769: EQUAL
18770: IFTRUE 18774
18772: GO 18854
18774: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18775: LD_ADDR_VAR 0 12
18779: PUSH
18780: LD_VAR 0 18
18784: PPUSH
18785: LD_INT 22
18787: PUSH
18788: LD_VAR 0 16
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 58
18799: PUSH
18800: EMPTY
18801: LIST
18802: PUSH
18803: LD_INT 2
18805: PUSH
18806: LD_INT 30
18808: PUSH
18809: LD_INT 32
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 30
18818: PUSH
18819: LD_INT 4
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 30
18828: PUSH
18829: LD_INT 5
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: PPUSH
18847: CALL_OW 72
18851: ST_TO_ADDR
18852: GO 19076
18854: LD_INT 2
18856: DOUBLE
18857: EQUAL
18858: IFTRUE 18862
18860: GO 18924
18862: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18863: LD_ADDR_VAR 0 12
18867: PUSH
18868: LD_VAR 0 18
18872: PPUSH
18873: LD_INT 22
18875: PUSH
18876: LD_VAR 0 16
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 2
18887: PUSH
18888: LD_INT 30
18890: PUSH
18891: LD_INT 0
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PUSH
18898: LD_INT 30
18900: PUSH
18901: LD_INT 1
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: LIST
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PPUSH
18917: CALL_OW 72
18921: ST_TO_ADDR
18922: GO 19076
18924: LD_INT 3
18926: DOUBLE
18927: EQUAL
18928: IFTRUE 18932
18930: GO 18994
18932: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18933: LD_ADDR_VAR 0 12
18937: PUSH
18938: LD_VAR 0 18
18942: PPUSH
18943: LD_INT 22
18945: PUSH
18946: LD_VAR 0 16
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 2
18957: PUSH
18958: LD_INT 30
18960: PUSH
18961: LD_INT 2
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 30
18970: PUSH
18971: LD_INT 3
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PPUSH
18987: CALL_OW 72
18991: ST_TO_ADDR
18992: GO 19076
18994: LD_INT 4
18996: DOUBLE
18997: EQUAL
18998: IFTRUE 19002
19000: GO 19075
19002: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19003: LD_ADDR_VAR 0 12
19007: PUSH
19008: LD_VAR 0 18
19012: PPUSH
19013: LD_INT 22
19015: PUSH
19016: LD_VAR 0 16
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 30
19030: PUSH
19031: LD_INT 6
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 30
19040: PUSH
19041: LD_INT 7
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 30
19050: PUSH
19051: LD_INT 8
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PPUSH
19068: CALL_OW 72
19072: ST_TO_ADDR
19073: GO 19076
19075: POP
// if i = 1 then
19076: LD_VAR 0 8
19080: PUSH
19081: LD_INT 1
19083: EQUAL
19084: IFFALSE 19195
// begin tmp := [ ] ;
19086: LD_ADDR_VAR 0 19
19090: PUSH
19091: EMPTY
19092: ST_TO_ADDR
// for j in f do
19093: LD_ADDR_VAR 0 9
19097: PUSH
19098: LD_VAR 0 12
19102: PUSH
19103: FOR_IN
19104: IFFALSE 19177
// if GetBType ( j ) = b_bunker then
19106: LD_VAR 0 9
19110: PPUSH
19111: CALL_OW 266
19115: PUSH
19116: LD_INT 32
19118: EQUAL
19119: IFFALSE 19146
// tmp := Insert ( tmp , 1 , j ) else
19121: LD_ADDR_VAR 0 19
19125: PUSH
19126: LD_VAR 0 19
19130: PPUSH
19131: LD_INT 1
19133: PPUSH
19134: LD_VAR 0 9
19138: PPUSH
19139: CALL_OW 2
19143: ST_TO_ADDR
19144: GO 19175
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19146: LD_ADDR_VAR 0 19
19150: PUSH
19151: LD_VAR 0 19
19155: PPUSH
19156: LD_VAR 0 19
19160: PUSH
19161: LD_INT 1
19163: PLUS
19164: PPUSH
19165: LD_VAR 0 9
19169: PPUSH
19170: CALL_OW 2
19174: ST_TO_ADDR
19175: GO 19103
19177: POP
19178: POP
// if tmp then
19179: LD_VAR 0 19
19183: IFFALSE 19195
// f := tmp ;
19185: LD_ADDR_VAR 0 12
19189: PUSH
19190: LD_VAR 0 19
19194: ST_TO_ADDR
// end ; x := personel [ i ] ;
19195: LD_ADDR_VAR 0 13
19199: PUSH
19200: LD_VAR 0 6
19204: PUSH
19205: LD_VAR 0 8
19209: ARRAY
19210: ST_TO_ADDR
// if x = - 1 then
19211: LD_VAR 0 13
19215: PUSH
19216: LD_INT 1
19218: NEG
19219: EQUAL
19220: IFFALSE 19429
// begin for j in f do
19222: LD_ADDR_VAR 0 9
19226: PUSH
19227: LD_VAR 0 12
19231: PUSH
19232: FOR_IN
19233: IFFALSE 19425
// repeat InitHc ;
19235: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19239: LD_VAR 0 9
19243: PPUSH
19244: CALL_OW 266
19248: PUSH
19249: LD_INT 5
19251: EQUAL
19252: IFFALSE 19322
// begin if UnitsInside ( j ) < 3 then
19254: LD_VAR 0 9
19258: PPUSH
19259: CALL_OW 313
19263: PUSH
19264: LD_INT 3
19266: LESS
19267: IFFALSE 19303
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19269: LD_INT 0
19271: PPUSH
19272: LD_INT 5
19274: PUSH
19275: LD_INT 8
19277: PUSH
19278: LD_INT 9
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: LIST
19285: PUSH
19286: LD_VAR 0 17
19290: ARRAY
19291: PPUSH
19292: LD_VAR 0 4
19296: PPUSH
19297: CALL_OW 380
19301: GO 19320
// PrepareHuman ( false , i , skill ) ;
19303: LD_INT 0
19305: PPUSH
19306: LD_VAR 0 8
19310: PPUSH
19311: LD_VAR 0 4
19315: PPUSH
19316: CALL_OW 380
// end else
19320: GO 19339
// PrepareHuman ( false , i , skill ) ;
19322: LD_INT 0
19324: PPUSH
19325: LD_VAR 0 8
19329: PPUSH
19330: LD_VAR 0 4
19334: PPUSH
19335: CALL_OW 380
// un := CreateHuman ;
19339: LD_ADDR_VAR 0 14
19343: PUSH
19344: CALL_OW 44
19348: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19349: LD_ADDR_VAR 0 7
19353: PUSH
19354: LD_VAR 0 7
19358: PPUSH
19359: LD_INT 1
19361: PPUSH
19362: LD_VAR 0 14
19366: PPUSH
19367: CALL_OW 2
19371: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19372: LD_VAR 0 14
19376: PPUSH
19377: LD_VAR 0 9
19381: PPUSH
19382: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19386: LD_VAR 0 9
19390: PPUSH
19391: CALL_OW 313
19395: PUSH
19396: LD_INT 6
19398: EQUAL
19399: PUSH
19400: LD_VAR 0 9
19404: PPUSH
19405: CALL_OW 266
19409: PUSH
19410: LD_INT 32
19412: PUSH
19413: LD_INT 31
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: IN
19420: OR
19421: IFFALSE 19235
19423: GO 19232
19425: POP
19426: POP
// end else
19427: GO 19809
// for j = 1 to x do
19429: LD_ADDR_VAR 0 9
19433: PUSH
19434: DOUBLE
19435: LD_INT 1
19437: DEC
19438: ST_TO_ADDR
19439: LD_VAR 0 13
19443: PUSH
19444: FOR_TO
19445: IFFALSE 19807
// begin InitHc ;
19447: CALL_OW 19
// if not f then
19451: LD_VAR 0 12
19455: NOT
19456: IFFALSE 19545
// begin PrepareHuman ( false , i , skill ) ;
19458: LD_INT 0
19460: PPUSH
19461: LD_VAR 0 8
19465: PPUSH
19466: LD_VAR 0 4
19470: PPUSH
19471: CALL_OW 380
// un := CreateHuman ;
19475: LD_ADDR_VAR 0 14
19479: PUSH
19480: CALL_OW 44
19484: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19485: LD_ADDR_VAR 0 7
19489: PUSH
19490: LD_VAR 0 7
19494: PPUSH
19495: LD_INT 1
19497: PPUSH
19498: LD_VAR 0 14
19502: PPUSH
19503: CALL_OW 2
19507: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19508: LD_VAR 0 14
19512: PPUSH
19513: LD_VAR 0 1
19517: PPUSH
19518: CALL_OW 250
19522: PPUSH
19523: LD_VAR 0 1
19527: PPUSH
19528: CALL_OW 251
19532: PPUSH
19533: LD_INT 10
19535: PPUSH
19536: LD_INT 0
19538: PPUSH
19539: CALL_OW 50
// continue ;
19543: GO 19444
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19545: LD_VAR 0 12
19549: PUSH
19550: LD_INT 1
19552: ARRAY
19553: PPUSH
19554: CALL_OW 313
19558: PUSH
19559: LD_VAR 0 12
19563: PUSH
19564: LD_INT 1
19566: ARRAY
19567: PPUSH
19568: CALL_OW 266
19572: PUSH
19573: LD_INT 32
19575: PUSH
19576: LD_INT 31
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: IN
19583: AND
19584: PUSH
19585: LD_VAR 0 12
19589: PUSH
19590: LD_INT 1
19592: ARRAY
19593: PPUSH
19594: CALL_OW 313
19598: PUSH
19599: LD_INT 6
19601: EQUAL
19602: OR
19603: IFFALSE 19623
// f := Delete ( f , 1 ) ;
19605: LD_ADDR_VAR 0 12
19609: PUSH
19610: LD_VAR 0 12
19614: PPUSH
19615: LD_INT 1
19617: PPUSH
19618: CALL_OW 3
19622: ST_TO_ADDR
// if not f then
19623: LD_VAR 0 12
19627: NOT
19628: IFFALSE 19646
// begin x := x + 2 ;
19630: LD_ADDR_VAR 0 13
19634: PUSH
19635: LD_VAR 0 13
19639: PUSH
19640: LD_INT 2
19642: PLUS
19643: ST_TO_ADDR
// continue ;
19644: GO 19444
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19646: LD_VAR 0 12
19650: PUSH
19651: LD_INT 1
19653: ARRAY
19654: PPUSH
19655: CALL_OW 266
19659: PUSH
19660: LD_INT 5
19662: EQUAL
19663: IFFALSE 19737
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19665: LD_VAR 0 12
19669: PUSH
19670: LD_INT 1
19672: ARRAY
19673: PPUSH
19674: CALL_OW 313
19678: PUSH
19679: LD_INT 3
19681: LESS
19682: IFFALSE 19718
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19684: LD_INT 0
19686: PPUSH
19687: LD_INT 5
19689: PUSH
19690: LD_INT 8
19692: PUSH
19693: LD_INT 9
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: LIST
19700: PUSH
19701: LD_VAR 0 17
19705: ARRAY
19706: PPUSH
19707: LD_VAR 0 4
19711: PPUSH
19712: CALL_OW 380
19716: GO 19735
// PrepareHuman ( false , i , skill ) ;
19718: LD_INT 0
19720: PPUSH
19721: LD_VAR 0 8
19725: PPUSH
19726: LD_VAR 0 4
19730: PPUSH
19731: CALL_OW 380
// end else
19735: GO 19754
// PrepareHuman ( false , i , skill ) ;
19737: LD_INT 0
19739: PPUSH
19740: LD_VAR 0 8
19744: PPUSH
19745: LD_VAR 0 4
19749: PPUSH
19750: CALL_OW 380
// un := CreateHuman ;
19754: LD_ADDR_VAR 0 14
19758: PUSH
19759: CALL_OW 44
19763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19764: LD_ADDR_VAR 0 7
19768: PUSH
19769: LD_VAR 0 7
19773: PPUSH
19774: LD_INT 1
19776: PPUSH
19777: LD_VAR 0 14
19781: PPUSH
19782: CALL_OW 2
19786: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19787: LD_VAR 0 14
19791: PPUSH
19792: LD_VAR 0 12
19796: PUSH
19797: LD_INT 1
19799: ARRAY
19800: PPUSH
19801: CALL_OW 52
// end ;
19805: GO 19444
19807: POP
19808: POP
// end ;
19809: GO 18746
19811: POP
19812: POP
// result := result ^ buildings ;
19813: LD_ADDR_VAR 0 7
19817: PUSH
19818: LD_VAR 0 7
19822: PUSH
19823: LD_VAR 0 18
19827: ADD
19828: ST_TO_ADDR
// end else
19829: GO 19972
// begin for i = 1 to personel do
19831: LD_ADDR_VAR 0 8
19835: PUSH
19836: DOUBLE
19837: LD_INT 1
19839: DEC
19840: ST_TO_ADDR
19841: LD_VAR 0 6
19845: PUSH
19846: FOR_TO
19847: IFFALSE 19970
// begin if i > 4 then
19849: LD_VAR 0 8
19853: PUSH
19854: LD_INT 4
19856: GREATER
19857: IFFALSE 19861
// break ;
19859: GO 19970
// x := personel [ i ] ;
19861: LD_ADDR_VAR 0 13
19865: PUSH
19866: LD_VAR 0 6
19870: PUSH
19871: LD_VAR 0 8
19875: ARRAY
19876: ST_TO_ADDR
// if x = - 1 then
19877: LD_VAR 0 13
19881: PUSH
19882: LD_INT 1
19884: NEG
19885: EQUAL
19886: IFFALSE 19890
// continue ;
19888: GO 19846
// PrepareHuman ( false , i , skill ) ;
19890: LD_INT 0
19892: PPUSH
19893: LD_VAR 0 8
19897: PPUSH
19898: LD_VAR 0 4
19902: PPUSH
19903: CALL_OW 380
// un := CreateHuman ;
19907: LD_ADDR_VAR 0 14
19911: PUSH
19912: CALL_OW 44
19916: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19917: LD_VAR 0 14
19921: PPUSH
19922: LD_VAR 0 1
19926: PPUSH
19927: CALL_OW 250
19931: PPUSH
19932: LD_VAR 0 1
19936: PPUSH
19937: CALL_OW 251
19941: PPUSH
19942: LD_INT 10
19944: PPUSH
19945: LD_INT 0
19947: PPUSH
19948: CALL_OW 50
// result := result ^ un ;
19952: LD_ADDR_VAR 0 7
19956: PUSH
19957: LD_VAR 0 7
19961: PUSH
19962: LD_VAR 0 14
19966: ADD
19967: ST_TO_ADDR
// end ;
19968: GO 19846
19970: POP
19971: POP
// end ; end ;
19972: LD_VAR 0 7
19976: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19977: LD_INT 0
19979: PPUSH
19980: PPUSH
19981: PPUSH
19982: PPUSH
19983: PPUSH
19984: PPUSH
19985: PPUSH
19986: PPUSH
19987: PPUSH
19988: PPUSH
19989: PPUSH
19990: PPUSH
19991: PPUSH
19992: PPUSH
19993: PPUSH
19994: PPUSH
// result := false ;
19995: LD_ADDR_VAR 0 3
19999: PUSH
20000: LD_INT 0
20002: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20003: LD_VAR 0 1
20007: NOT
20008: PUSH
20009: LD_VAR 0 1
20013: PPUSH
20014: CALL_OW 266
20018: PUSH
20019: LD_INT 32
20021: PUSH
20022: LD_INT 33
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: IN
20029: NOT
20030: OR
20031: IFFALSE 20035
// exit ;
20033: GO 21144
// nat := GetNation ( tower ) ;
20035: LD_ADDR_VAR 0 12
20039: PUSH
20040: LD_VAR 0 1
20044: PPUSH
20045: CALL_OW 248
20049: ST_TO_ADDR
// side := GetSide ( tower ) ;
20050: LD_ADDR_VAR 0 16
20054: PUSH
20055: LD_VAR 0 1
20059: PPUSH
20060: CALL_OW 255
20064: ST_TO_ADDR
// x := GetX ( tower ) ;
20065: LD_ADDR_VAR 0 10
20069: PUSH
20070: LD_VAR 0 1
20074: PPUSH
20075: CALL_OW 250
20079: ST_TO_ADDR
// y := GetY ( tower ) ;
20080: LD_ADDR_VAR 0 11
20084: PUSH
20085: LD_VAR 0 1
20089: PPUSH
20090: CALL_OW 251
20094: ST_TO_ADDR
// if not x or not y then
20095: LD_VAR 0 10
20099: NOT
20100: PUSH
20101: LD_VAR 0 11
20105: NOT
20106: OR
20107: IFFALSE 20111
// exit ;
20109: GO 21144
// weapon := 0 ;
20111: LD_ADDR_VAR 0 18
20115: PUSH
20116: LD_INT 0
20118: ST_TO_ADDR
// fac_list := [ ] ;
20119: LD_ADDR_VAR 0 17
20123: PUSH
20124: EMPTY
20125: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20126: LD_ADDR_VAR 0 6
20130: PUSH
20131: LD_VAR 0 1
20135: PPUSH
20136: CALL_OW 274
20140: PPUSH
20141: LD_VAR 0 2
20145: PPUSH
20146: LD_INT 0
20148: PPUSH
20149: CALL 17715 0 3
20153: PPUSH
20154: LD_INT 30
20156: PUSH
20157: LD_INT 3
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PPUSH
20164: CALL_OW 72
20168: ST_TO_ADDR
// if not factories then
20169: LD_VAR 0 6
20173: NOT
20174: IFFALSE 20178
// exit ;
20176: GO 21144
// for i in factories do
20178: LD_ADDR_VAR 0 8
20182: PUSH
20183: LD_VAR 0 6
20187: PUSH
20188: FOR_IN
20189: IFFALSE 20214
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20191: LD_ADDR_VAR 0 17
20195: PUSH
20196: LD_VAR 0 17
20200: PUSH
20201: LD_VAR 0 8
20205: PPUSH
20206: CALL_OW 478
20210: UNION
20211: ST_TO_ADDR
20212: GO 20188
20214: POP
20215: POP
// if not fac_list then
20216: LD_VAR 0 17
20220: NOT
20221: IFFALSE 20225
// exit ;
20223: GO 21144
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20225: LD_ADDR_VAR 0 5
20229: PUSH
20230: LD_INT 4
20232: PUSH
20233: LD_INT 5
20235: PUSH
20236: LD_INT 9
20238: PUSH
20239: LD_INT 10
20241: PUSH
20242: LD_INT 6
20244: PUSH
20245: LD_INT 7
20247: PUSH
20248: LD_INT 11
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 27
20262: PUSH
20263: LD_INT 28
20265: PUSH
20266: LD_INT 26
20268: PUSH
20269: LD_INT 30
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: PUSH
20278: LD_INT 43
20280: PUSH
20281: LD_INT 44
20283: PUSH
20284: LD_INT 46
20286: PUSH
20287: LD_INT 45
20289: PUSH
20290: LD_INT 47
20292: PUSH
20293: LD_INT 49
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: LIST
20308: PUSH
20309: LD_VAR 0 12
20313: ARRAY
20314: ST_TO_ADDR
// list := list isect fac_list ;
20315: LD_ADDR_VAR 0 5
20319: PUSH
20320: LD_VAR 0 5
20324: PUSH
20325: LD_VAR 0 17
20329: ISECT
20330: ST_TO_ADDR
// if not list then
20331: LD_VAR 0 5
20335: NOT
20336: IFFALSE 20340
// exit ;
20338: GO 21144
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20340: LD_VAR 0 12
20344: PUSH
20345: LD_INT 3
20347: EQUAL
20348: PUSH
20349: LD_INT 49
20351: PUSH
20352: LD_VAR 0 5
20356: IN
20357: AND
20358: PUSH
20359: LD_INT 31
20361: PPUSH
20362: LD_VAR 0 16
20366: PPUSH
20367: CALL_OW 321
20371: PUSH
20372: LD_INT 2
20374: EQUAL
20375: AND
20376: IFFALSE 20436
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20378: LD_INT 22
20380: PUSH
20381: LD_VAR 0 16
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 35
20392: PUSH
20393: LD_INT 49
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 91
20402: PUSH
20403: LD_VAR 0 1
20407: PUSH
20408: LD_INT 10
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: LIST
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: LIST
20420: PPUSH
20421: CALL_OW 69
20425: NOT
20426: IFFALSE 20436
// weapon := ru_time_lapser ;
20428: LD_ADDR_VAR 0 18
20432: PUSH
20433: LD_INT 49
20435: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20436: LD_VAR 0 12
20440: PUSH
20441: LD_INT 1
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: IN
20451: PUSH
20452: LD_INT 11
20454: PUSH
20455: LD_VAR 0 5
20459: IN
20460: PUSH
20461: LD_INT 30
20463: PUSH
20464: LD_VAR 0 5
20468: IN
20469: OR
20470: AND
20471: PUSH
20472: LD_INT 6
20474: PPUSH
20475: LD_VAR 0 16
20479: PPUSH
20480: CALL_OW 321
20484: PUSH
20485: LD_INT 2
20487: EQUAL
20488: AND
20489: IFFALSE 20654
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20491: LD_INT 22
20493: PUSH
20494: LD_VAR 0 16
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 2
20505: PUSH
20506: LD_INT 35
20508: PUSH
20509: LD_INT 11
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 35
20518: PUSH
20519: LD_INT 30
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 91
20533: PUSH
20534: LD_VAR 0 1
20538: PUSH
20539: LD_INT 18
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: LIST
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: LIST
20551: PPUSH
20552: CALL_OW 69
20556: NOT
20557: PUSH
20558: LD_INT 22
20560: PUSH
20561: LD_VAR 0 16
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: LD_INT 30
20575: PUSH
20576: LD_INT 32
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 30
20585: PUSH
20586: LD_INT 33
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 91
20600: PUSH
20601: LD_VAR 0 1
20605: PUSH
20606: LD_INT 12
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: LIST
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: PUSH
20619: EMPTY
20620: LIST
20621: PPUSH
20622: CALL_OW 69
20626: PUSH
20627: LD_INT 2
20629: GREATER
20630: AND
20631: IFFALSE 20654
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20633: LD_ADDR_VAR 0 18
20637: PUSH
20638: LD_INT 11
20640: PUSH
20641: LD_INT 30
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_VAR 0 12
20652: ARRAY
20653: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20654: LD_VAR 0 18
20658: NOT
20659: PUSH
20660: LD_INT 40
20662: PPUSH
20663: LD_VAR 0 16
20667: PPUSH
20668: CALL_OW 321
20672: PUSH
20673: LD_INT 2
20675: EQUAL
20676: AND
20677: PUSH
20678: LD_INT 7
20680: PUSH
20681: LD_VAR 0 5
20685: IN
20686: PUSH
20687: LD_INT 28
20689: PUSH
20690: LD_VAR 0 5
20694: IN
20695: OR
20696: PUSH
20697: LD_INT 45
20699: PUSH
20700: LD_VAR 0 5
20704: IN
20705: OR
20706: AND
20707: IFFALSE 20961
// begin hex := GetHexInfo ( x , y ) ;
20709: LD_ADDR_VAR 0 4
20713: PUSH
20714: LD_VAR 0 10
20718: PPUSH
20719: LD_VAR 0 11
20723: PPUSH
20724: CALL_OW 546
20728: ST_TO_ADDR
// if hex [ 1 ] then
20729: LD_VAR 0 4
20733: PUSH
20734: LD_INT 1
20736: ARRAY
20737: IFFALSE 20741
// exit ;
20739: GO 21144
// height := hex [ 2 ] ;
20741: LD_ADDR_VAR 0 15
20745: PUSH
20746: LD_VAR 0 4
20750: PUSH
20751: LD_INT 2
20753: ARRAY
20754: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20755: LD_ADDR_VAR 0 14
20759: PUSH
20760: LD_INT 0
20762: PUSH
20763: LD_INT 2
20765: PUSH
20766: LD_INT 3
20768: PUSH
20769: LD_INT 5
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: ST_TO_ADDR
// for i in tmp do
20778: LD_ADDR_VAR 0 8
20782: PUSH
20783: LD_VAR 0 14
20787: PUSH
20788: FOR_IN
20789: IFFALSE 20959
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20791: LD_ADDR_VAR 0 9
20795: PUSH
20796: LD_VAR 0 10
20800: PPUSH
20801: LD_VAR 0 8
20805: PPUSH
20806: LD_INT 5
20808: PPUSH
20809: CALL_OW 272
20813: PUSH
20814: LD_VAR 0 11
20818: PPUSH
20819: LD_VAR 0 8
20823: PPUSH
20824: LD_INT 5
20826: PPUSH
20827: CALL_OW 273
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20836: LD_VAR 0 9
20840: PUSH
20841: LD_INT 1
20843: ARRAY
20844: PPUSH
20845: LD_VAR 0 9
20849: PUSH
20850: LD_INT 2
20852: ARRAY
20853: PPUSH
20854: CALL_OW 488
20858: IFFALSE 20957
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20860: LD_ADDR_VAR 0 4
20864: PUSH
20865: LD_VAR 0 9
20869: PUSH
20870: LD_INT 1
20872: ARRAY
20873: PPUSH
20874: LD_VAR 0 9
20878: PUSH
20879: LD_INT 2
20881: ARRAY
20882: PPUSH
20883: CALL_OW 546
20887: ST_TO_ADDR
// if hex [ 1 ] then
20888: LD_VAR 0 4
20892: PUSH
20893: LD_INT 1
20895: ARRAY
20896: IFFALSE 20900
// continue ;
20898: GO 20788
// h := hex [ 2 ] ;
20900: LD_ADDR_VAR 0 13
20904: PUSH
20905: LD_VAR 0 4
20909: PUSH
20910: LD_INT 2
20912: ARRAY
20913: ST_TO_ADDR
// if h + 7 < height then
20914: LD_VAR 0 13
20918: PUSH
20919: LD_INT 7
20921: PLUS
20922: PUSH
20923: LD_VAR 0 15
20927: LESS
20928: IFFALSE 20957
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20930: LD_ADDR_VAR 0 18
20934: PUSH
20935: LD_INT 7
20937: PUSH
20938: LD_INT 28
20940: PUSH
20941: LD_INT 45
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: LIST
20948: PUSH
20949: LD_VAR 0 12
20953: ARRAY
20954: ST_TO_ADDR
// break ;
20955: GO 20959
// end ; end ; end ;
20957: GO 20788
20959: POP
20960: POP
// end ; if not weapon then
20961: LD_VAR 0 18
20965: NOT
20966: IFFALSE 21026
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20968: LD_ADDR_VAR 0 5
20972: PUSH
20973: LD_VAR 0 5
20977: PUSH
20978: LD_INT 11
20980: PUSH
20981: LD_INT 30
20983: PUSH
20984: LD_INT 49
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: DIFF
20992: ST_TO_ADDR
// if not list then
20993: LD_VAR 0 5
20997: NOT
20998: IFFALSE 21002
// exit ;
21000: GO 21144
// weapon := list [ rand ( 1 , list ) ] ;
21002: LD_ADDR_VAR 0 18
21006: PUSH
21007: LD_VAR 0 5
21011: PUSH
21012: LD_INT 1
21014: PPUSH
21015: LD_VAR 0 5
21019: PPUSH
21020: CALL_OW 12
21024: ARRAY
21025: ST_TO_ADDR
// end ; if weapon then
21026: LD_VAR 0 18
21030: IFFALSE 21144
// begin tmp := CostOfWeapon ( weapon ) ;
21032: LD_ADDR_VAR 0 14
21036: PUSH
21037: LD_VAR 0 18
21041: PPUSH
21042: CALL_OW 451
21046: ST_TO_ADDR
// j := GetBase ( tower ) ;
21047: LD_ADDR_VAR 0 9
21051: PUSH
21052: LD_VAR 0 1
21056: PPUSH
21057: CALL_OW 274
21061: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21062: LD_VAR 0 9
21066: PPUSH
21067: LD_INT 1
21069: PPUSH
21070: CALL_OW 275
21074: PUSH
21075: LD_VAR 0 14
21079: PUSH
21080: LD_INT 1
21082: ARRAY
21083: GREATEREQUAL
21084: PUSH
21085: LD_VAR 0 9
21089: PPUSH
21090: LD_INT 2
21092: PPUSH
21093: CALL_OW 275
21097: PUSH
21098: LD_VAR 0 14
21102: PUSH
21103: LD_INT 2
21105: ARRAY
21106: GREATEREQUAL
21107: AND
21108: PUSH
21109: LD_VAR 0 9
21113: PPUSH
21114: LD_INT 3
21116: PPUSH
21117: CALL_OW 275
21121: PUSH
21122: LD_VAR 0 14
21126: PUSH
21127: LD_INT 3
21129: ARRAY
21130: GREATEREQUAL
21131: AND
21132: IFFALSE 21144
// result := weapon ;
21134: LD_ADDR_VAR 0 3
21138: PUSH
21139: LD_VAR 0 18
21143: ST_TO_ADDR
// end ; end ;
21144: LD_VAR 0 3
21148: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21149: LD_INT 0
21151: PPUSH
21152: PPUSH
// result := true ;
21153: LD_ADDR_VAR 0 3
21157: PUSH
21158: LD_INT 1
21160: ST_TO_ADDR
// if array1 = array2 then
21161: LD_VAR 0 1
21165: PUSH
21166: LD_VAR 0 2
21170: EQUAL
21171: IFFALSE 21231
// begin for i = 1 to array1 do
21173: LD_ADDR_VAR 0 4
21177: PUSH
21178: DOUBLE
21179: LD_INT 1
21181: DEC
21182: ST_TO_ADDR
21183: LD_VAR 0 1
21187: PUSH
21188: FOR_TO
21189: IFFALSE 21227
// if array1 [ i ] <> array2 [ i ] then
21191: LD_VAR 0 1
21195: PUSH
21196: LD_VAR 0 4
21200: ARRAY
21201: PUSH
21202: LD_VAR 0 2
21206: PUSH
21207: LD_VAR 0 4
21211: ARRAY
21212: NONEQUAL
21213: IFFALSE 21225
// begin result := false ;
21215: LD_ADDR_VAR 0 3
21219: PUSH
21220: LD_INT 0
21222: ST_TO_ADDR
// break ;
21223: GO 21227
// end ;
21225: GO 21188
21227: POP
21228: POP
// end else
21229: GO 21239
// result := false ;
21231: LD_ADDR_VAR 0 3
21235: PUSH
21236: LD_INT 0
21238: ST_TO_ADDR
// end ;
21239: LD_VAR 0 3
21243: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21244: LD_INT 0
21246: PPUSH
21247: PPUSH
// if not array1 or not array2 then
21248: LD_VAR 0 1
21252: NOT
21253: PUSH
21254: LD_VAR 0 2
21258: NOT
21259: OR
21260: IFFALSE 21264
// exit ;
21262: GO 21328
// result := true ;
21264: LD_ADDR_VAR 0 3
21268: PUSH
21269: LD_INT 1
21271: ST_TO_ADDR
// for i = 1 to array1 do
21272: LD_ADDR_VAR 0 4
21276: PUSH
21277: DOUBLE
21278: LD_INT 1
21280: DEC
21281: ST_TO_ADDR
21282: LD_VAR 0 1
21286: PUSH
21287: FOR_TO
21288: IFFALSE 21326
// if array1 [ i ] <> array2 [ i ] then
21290: LD_VAR 0 1
21294: PUSH
21295: LD_VAR 0 4
21299: ARRAY
21300: PUSH
21301: LD_VAR 0 2
21305: PUSH
21306: LD_VAR 0 4
21310: ARRAY
21311: NONEQUAL
21312: IFFALSE 21324
// begin result := false ;
21314: LD_ADDR_VAR 0 3
21318: PUSH
21319: LD_INT 0
21321: ST_TO_ADDR
// break ;
21322: GO 21326
// end ;
21324: GO 21287
21326: POP
21327: POP
// end ;
21328: LD_VAR 0 3
21332: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21333: LD_INT 0
21335: PPUSH
21336: PPUSH
21337: PPUSH
// pom := GetBase ( fac ) ;
21338: LD_ADDR_VAR 0 5
21342: PUSH
21343: LD_VAR 0 1
21347: PPUSH
21348: CALL_OW 274
21352: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21353: LD_ADDR_VAR 0 4
21357: PUSH
21358: LD_VAR 0 2
21362: PUSH
21363: LD_INT 1
21365: ARRAY
21366: PPUSH
21367: LD_VAR 0 2
21371: PUSH
21372: LD_INT 2
21374: ARRAY
21375: PPUSH
21376: LD_VAR 0 2
21380: PUSH
21381: LD_INT 3
21383: ARRAY
21384: PPUSH
21385: LD_VAR 0 2
21389: PUSH
21390: LD_INT 4
21392: ARRAY
21393: PPUSH
21394: CALL_OW 449
21398: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21399: LD_ADDR_VAR 0 3
21403: PUSH
21404: LD_VAR 0 5
21408: PPUSH
21409: LD_INT 1
21411: PPUSH
21412: CALL_OW 275
21416: PUSH
21417: LD_VAR 0 4
21421: PUSH
21422: LD_INT 1
21424: ARRAY
21425: GREATEREQUAL
21426: PUSH
21427: LD_VAR 0 5
21431: PPUSH
21432: LD_INT 2
21434: PPUSH
21435: CALL_OW 275
21439: PUSH
21440: LD_VAR 0 4
21444: PUSH
21445: LD_INT 2
21447: ARRAY
21448: GREATEREQUAL
21449: AND
21450: PUSH
21451: LD_VAR 0 5
21455: PPUSH
21456: LD_INT 3
21458: PPUSH
21459: CALL_OW 275
21463: PUSH
21464: LD_VAR 0 4
21468: PUSH
21469: LD_INT 3
21471: ARRAY
21472: GREATEREQUAL
21473: AND
21474: ST_TO_ADDR
// end ;
21475: LD_VAR 0 3
21479: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21480: LD_INT 0
21482: PPUSH
21483: PPUSH
21484: PPUSH
21485: PPUSH
// pom := GetBase ( building ) ;
21486: LD_ADDR_VAR 0 3
21490: PUSH
21491: LD_VAR 0 1
21495: PPUSH
21496: CALL_OW 274
21500: ST_TO_ADDR
// if not pom then
21501: LD_VAR 0 3
21505: NOT
21506: IFFALSE 21510
// exit ;
21508: GO 21680
// btype := GetBType ( building ) ;
21510: LD_ADDR_VAR 0 5
21514: PUSH
21515: LD_VAR 0 1
21519: PPUSH
21520: CALL_OW 266
21524: ST_TO_ADDR
// if btype = b_armoury then
21525: LD_VAR 0 5
21529: PUSH
21530: LD_INT 4
21532: EQUAL
21533: IFFALSE 21543
// btype := b_barracks ;
21535: LD_ADDR_VAR 0 5
21539: PUSH
21540: LD_INT 5
21542: ST_TO_ADDR
// if btype = b_depot then
21543: LD_VAR 0 5
21547: PUSH
21548: LD_INT 0
21550: EQUAL
21551: IFFALSE 21561
// btype := b_warehouse ;
21553: LD_ADDR_VAR 0 5
21557: PUSH
21558: LD_INT 1
21560: ST_TO_ADDR
// if btype = b_workshop then
21561: LD_VAR 0 5
21565: PUSH
21566: LD_INT 2
21568: EQUAL
21569: IFFALSE 21579
// btype := b_factory ;
21571: LD_ADDR_VAR 0 5
21575: PUSH
21576: LD_INT 3
21578: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21579: LD_ADDR_VAR 0 4
21583: PUSH
21584: LD_VAR 0 5
21588: PPUSH
21589: LD_VAR 0 1
21593: PPUSH
21594: CALL_OW 248
21598: PPUSH
21599: CALL_OW 450
21603: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21604: LD_ADDR_VAR 0 2
21608: PUSH
21609: LD_VAR 0 3
21613: PPUSH
21614: LD_INT 1
21616: PPUSH
21617: CALL_OW 275
21621: PUSH
21622: LD_VAR 0 4
21626: PUSH
21627: LD_INT 1
21629: ARRAY
21630: GREATEREQUAL
21631: PUSH
21632: LD_VAR 0 3
21636: PPUSH
21637: LD_INT 2
21639: PPUSH
21640: CALL_OW 275
21644: PUSH
21645: LD_VAR 0 4
21649: PUSH
21650: LD_INT 2
21652: ARRAY
21653: GREATEREQUAL
21654: AND
21655: PUSH
21656: LD_VAR 0 3
21660: PPUSH
21661: LD_INT 3
21663: PPUSH
21664: CALL_OW 275
21668: PUSH
21669: LD_VAR 0 4
21673: PUSH
21674: LD_INT 3
21676: ARRAY
21677: GREATEREQUAL
21678: AND
21679: ST_TO_ADDR
// end ;
21680: LD_VAR 0 2
21684: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21685: LD_INT 0
21687: PPUSH
21688: PPUSH
21689: PPUSH
// pom := GetBase ( building ) ;
21690: LD_ADDR_VAR 0 4
21694: PUSH
21695: LD_VAR 0 1
21699: PPUSH
21700: CALL_OW 274
21704: ST_TO_ADDR
// if not pom then
21705: LD_VAR 0 4
21709: NOT
21710: IFFALSE 21714
// exit ;
21712: GO 21815
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21714: LD_ADDR_VAR 0 5
21718: PUSH
21719: LD_VAR 0 2
21723: PPUSH
21724: LD_VAR 0 1
21728: PPUSH
21729: CALL_OW 248
21733: PPUSH
21734: CALL_OW 450
21738: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21739: LD_ADDR_VAR 0 3
21743: PUSH
21744: LD_VAR 0 4
21748: PPUSH
21749: LD_INT 1
21751: PPUSH
21752: CALL_OW 275
21756: PUSH
21757: LD_VAR 0 5
21761: PUSH
21762: LD_INT 1
21764: ARRAY
21765: GREATEREQUAL
21766: PUSH
21767: LD_VAR 0 4
21771: PPUSH
21772: LD_INT 2
21774: PPUSH
21775: CALL_OW 275
21779: PUSH
21780: LD_VAR 0 5
21784: PUSH
21785: LD_INT 2
21787: ARRAY
21788: GREATEREQUAL
21789: AND
21790: PUSH
21791: LD_VAR 0 4
21795: PPUSH
21796: LD_INT 3
21798: PPUSH
21799: CALL_OW 275
21803: PUSH
21804: LD_VAR 0 5
21808: PUSH
21809: LD_INT 3
21811: ARRAY
21812: GREATEREQUAL
21813: AND
21814: ST_TO_ADDR
// end ;
21815: LD_VAR 0 3
21819: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21820: LD_INT 0
21822: PPUSH
21823: PPUSH
21824: PPUSH
21825: PPUSH
21826: PPUSH
21827: PPUSH
21828: PPUSH
21829: PPUSH
21830: PPUSH
21831: PPUSH
21832: PPUSH
// result := false ;
21833: LD_ADDR_VAR 0 8
21837: PUSH
21838: LD_INT 0
21840: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21841: LD_VAR 0 5
21845: NOT
21846: PUSH
21847: LD_VAR 0 1
21851: NOT
21852: OR
21853: PUSH
21854: LD_VAR 0 2
21858: NOT
21859: OR
21860: PUSH
21861: LD_VAR 0 3
21865: NOT
21866: OR
21867: IFFALSE 21871
// exit ;
21869: GO 22685
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21871: LD_ADDR_VAR 0 14
21875: PUSH
21876: LD_VAR 0 1
21880: PPUSH
21881: LD_VAR 0 2
21885: PPUSH
21886: LD_VAR 0 3
21890: PPUSH
21891: LD_VAR 0 4
21895: PPUSH
21896: LD_VAR 0 5
21900: PUSH
21901: LD_INT 1
21903: ARRAY
21904: PPUSH
21905: CALL_OW 248
21909: PPUSH
21910: LD_INT 0
21912: PPUSH
21913: CALL 23922 0 6
21917: ST_TO_ADDR
// if not hexes then
21918: LD_VAR 0 14
21922: NOT
21923: IFFALSE 21927
// exit ;
21925: GO 22685
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21927: LD_ADDR_VAR 0 17
21931: PUSH
21932: LD_VAR 0 5
21936: PPUSH
21937: LD_INT 22
21939: PUSH
21940: LD_VAR 0 13
21944: PPUSH
21945: CALL_OW 255
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: LD_INT 30
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 30
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PPUSH
21986: CALL_OW 72
21990: ST_TO_ADDR
// for i = 1 to hexes do
21991: LD_ADDR_VAR 0 9
21995: PUSH
21996: DOUBLE
21997: LD_INT 1
21999: DEC
22000: ST_TO_ADDR
22001: LD_VAR 0 14
22005: PUSH
22006: FOR_TO
22007: IFFALSE 22683
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22009: LD_ADDR_VAR 0 13
22013: PUSH
22014: LD_VAR 0 14
22018: PUSH
22019: LD_VAR 0 9
22023: ARRAY
22024: PUSH
22025: LD_INT 1
22027: ARRAY
22028: PPUSH
22029: LD_VAR 0 14
22033: PUSH
22034: LD_VAR 0 9
22038: ARRAY
22039: PUSH
22040: LD_INT 2
22042: ARRAY
22043: PPUSH
22044: CALL_OW 428
22048: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22049: LD_VAR 0 14
22053: PUSH
22054: LD_VAR 0 9
22058: ARRAY
22059: PUSH
22060: LD_INT 1
22062: ARRAY
22063: PPUSH
22064: LD_VAR 0 14
22068: PUSH
22069: LD_VAR 0 9
22073: ARRAY
22074: PUSH
22075: LD_INT 2
22077: ARRAY
22078: PPUSH
22079: CALL_OW 351
22083: PUSH
22084: LD_VAR 0 14
22088: PUSH
22089: LD_VAR 0 9
22093: ARRAY
22094: PUSH
22095: LD_INT 1
22097: ARRAY
22098: PPUSH
22099: LD_VAR 0 14
22103: PUSH
22104: LD_VAR 0 9
22108: ARRAY
22109: PUSH
22110: LD_INT 2
22112: ARRAY
22113: PPUSH
22114: CALL_OW 488
22118: NOT
22119: OR
22120: PUSH
22121: LD_VAR 0 13
22125: PPUSH
22126: CALL_OW 247
22130: PUSH
22131: LD_INT 3
22133: EQUAL
22134: OR
22135: IFFALSE 22141
// exit ;
22137: POP
22138: POP
22139: GO 22685
// if not tmp then
22141: LD_VAR 0 13
22145: NOT
22146: IFFALSE 22150
// continue ;
22148: GO 22006
// result := true ;
22150: LD_ADDR_VAR 0 8
22154: PUSH
22155: LD_INT 1
22157: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22158: LD_VAR 0 6
22162: PUSH
22163: LD_VAR 0 13
22167: PPUSH
22168: CALL_OW 247
22172: PUSH
22173: LD_INT 2
22175: EQUAL
22176: AND
22177: PUSH
22178: LD_VAR 0 13
22182: PPUSH
22183: CALL_OW 263
22187: PUSH
22188: LD_INT 1
22190: EQUAL
22191: AND
22192: IFFALSE 22356
// begin if IsDrivenBy ( tmp ) then
22194: LD_VAR 0 13
22198: PPUSH
22199: CALL_OW 311
22203: IFFALSE 22207
// continue ;
22205: GO 22006
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22207: LD_VAR 0 6
22211: PPUSH
22212: LD_INT 3
22214: PUSH
22215: LD_INT 60
22217: PUSH
22218: EMPTY
22219: LIST
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 3
22227: PUSH
22228: LD_INT 55
22230: PUSH
22231: EMPTY
22232: LIST
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PPUSH
22242: CALL_OW 72
22246: IFFALSE 22354
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22248: LD_ADDR_VAR 0 18
22252: PUSH
22253: LD_VAR 0 6
22257: PPUSH
22258: LD_INT 3
22260: PUSH
22261: LD_INT 60
22263: PUSH
22264: EMPTY
22265: LIST
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 3
22273: PUSH
22274: LD_INT 55
22276: PUSH
22277: EMPTY
22278: LIST
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PPUSH
22288: CALL_OW 72
22292: PUSH
22293: LD_INT 1
22295: ARRAY
22296: ST_TO_ADDR
// if IsInUnit ( driver ) then
22297: LD_VAR 0 18
22301: PPUSH
22302: CALL_OW 310
22306: IFFALSE 22317
// ComExit ( driver ) ;
22308: LD_VAR 0 18
22312: PPUSH
22313: CALL 47050 0 1
// AddComEnterUnit ( driver , tmp ) ;
22317: LD_VAR 0 18
22321: PPUSH
22322: LD_VAR 0 13
22326: PPUSH
22327: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22331: LD_VAR 0 18
22335: PPUSH
22336: LD_VAR 0 7
22340: PPUSH
22341: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22345: LD_VAR 0 18
22349: PPUSH
22350: CALL_OW 181
// end ; continue ;
22354: GO 22006
// end ; if not cleaners or not tmp in cleaners then
22356: LD_VAR 0 6
22360: NOT
22361: PUSH
22362: LD_VAR 0 13
22366: PUSH
22367: LD_VAR 0 6
22371: IN
22372: NOT
22373: OR
22374: IFFALSE 22681
// begin if dep then
22376: LD_VAR 0 17
22380: IFFALSE 22516
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22382: LD_ADDR_VAR 0 16
22386: PUSH
22387: LD_VAR 0 17
22391: PUSH
22392: LD_INT 1
22394: ARRAY
22395: PPUSH
22396: CALL_OW 250
22400: PPUSH
22401: LD_VAR 0 17
22405: PUSH
22406: LD_INT 1
22408: ARRAY
22409: PPUSH
22410: CALL_OW 254
22414: PPUSH
22415: LD_INT 5
22417: PPUSH
22418: CALL_OW 272
22422: PUSH
22423: LD_VAR 0 17
22427: PUSH
22428: LD_INT 1
22430: ARRAY
22431: PPUSH
22432: CALL_OW 251
22436: PPUSH
22437: LD_VAR 0 17
22441: PUSH
22442: LD_INT 1
22444: ARRAY
22445: PPUSH
22446: CALL_OW 254
22450: PPUSH
22451: LD_INT 5
22453: PPUSH
22454: CALL_OW 273
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22463: LD_VAR 0 16
22467: PUSH
22468: LD_INT 1
22470: ARRAY
22471: PPUSH
22472: LD_VAR 0 16
22476: PUSH
22477: LD_INT 2
22479: ARRAY
22480: PPUSH
22481: CALL_OW 488
22485: IFFALSE 22516
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22487: LD_VAR 0 13
22491: PPUSH
22492: LD_VAR 0 16
22496: PUSH
22497: LD_INT 1
22499: ARRAY
22500: PPUSH
22501: LD_VAR 0 16
22505: PUSH
22506: LD_INT 2
22508: ARRAY
22509: PPUSH
22510: CALL_OW 111
// continue ;
22514: GO 22006
// end ; end ; r := GetDir ( tmp ) ;
22516: LD_ADDR_VAR 0 15
22520: PUSH
22521: LD_VAR 0 13
22525: PPUSH
22526: CALL_OW 254
22530: ST_TO_ADDR
// if r = 5 then
22531: LD_VAR 0 15
22535: PUSH
22536: LD_INT 5
22538: EQUAL
22539: IFFALSE 22549
// r := 0 ;
22541: LD_ADDR_VAR 0 15
22545: PUSH
22546: LD_INT 0
22548: ST_TO_ADDR
// for j = r to 5 do
22549: LD_ADDR_VAR 0 10
22553: PUSH
22554: DOUBLE
22555: LD_VAR 0 15
22559: DEC
22560: ST_TO_ADDR
22561: LD_INT 5
22563: PUSH
22564: FOR_TO
22565: IFFALSE 22679
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22567: LD_ADDR_VAR 0 11
22571: PUSH
22572: LD_VAR 0 13
22576: PPUSH
22577: CALL_OW 250
22581: PPUSH
22582: LD_VAR 0 10
22586: PPUSH
22587: LD_INT 2
22589: PPUSH
22590: CALL_OW 272
22594: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22595: LD_ADDR_VAR 0 12
22599: PUSH
22600: LD_VAR 0 13
22604: PPUSH
22605: CALL_OW 251
22609: PPUSH
22610: LD_VAR 0 10
22614: PPUSH
22615: LD_INT 2
22617: PPUSH
22618: CALL_OW 273
22622: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22623: LD_VAR 0 11
22627: PPUSH
22628: LD_VAR 0 12
22632: PPUSH
22633: CALL_OW 488
22637: PUSH
22638: LD_VAR 0 11
22642: PPUSH
22643: LD_VAR 0 12
22647: PPUSH
22648: CALL_OW 428
22652: NOT
22653: AND
22654: IFFALSE 22677
// begin ComMoveXY ( tmp , _x , _y ) ;
22656: LD_VAR 0 13
22660: PPUSH
22661: LD_VAR 0 11
22665: PPUSH
22666: LD_VAR 0 12
22670: PPUSH
22671: CALL_OW 111
// break ;
22675: GO 22679
// end ; end ;
22677: GO 22564
22679: POP
22680: POP
// end ; end ;
22681: GO 22006
22683: POP
22684: POP
// end ;
22685: LD_VAR 0 8
22689: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22690: LD_INT 0
22692: PPUSH
// result := true ;
22693: LD_ADDR_VAR 0 3
22697: PUSH
22698: LD_INT 1
22700: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22701: LD_VAR 0 2
22705: PUSH
22706: LD_INT 24
22708: DOUBLE
22709: EQUAL
22710: IFTRUE 22720
22712: LD_INT 33
22714: DOUBLE
22715: EQUAL
22716: IFTRUE 22720
22718: GO 22745
22720: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22721: LD_ADDR_VAR 0 3
22725: PUSH
22726: LD_INT 32
22728: PPUSH
22729: LD_VAR 0 1
22733: PPUSH
22734: CALL_OW 321
22738: PUSH
22739: LD_INT 2
22741: EQUAL
22742: ST_TO_ADDR
22743: GO 23065
22745: LD_INT 20
22747: DOUBLE
22748: EQUAL
22749: IFTRUE 22753
22751: GO 22778
22753: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22754: LD_ADDR_VAR 0 3
22758: PUSH
22759: LD_INT 6
22761: PPUSH
22762: LD_VAR 0 1
22766: PPUSH
22767: CALL_OW 321
22771: PUSH
22772: LD_INT 2
22774: EQUAL
22775: ST_TO_ADDR
22776: GO 23065
22778: LD_INT 22
22780: DOUBLE
22781: EQUAL
22782: IFTRUE 22792
22784: LD_INT 36
22786: DOUBLE
22787: EQUAL
22788: IFTRUE 22792
22790: GO 22817
22792: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22793: LD_ADDR_VAR 0 3
22797: PUSH
22798: LD_INT 15
22800: PPUSH
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL_OW 321
22810: PUSH
22811: LD_INT 2
22813: EQUAL
22814: ST_TO_ADDR
22815: GO 23065
22817: LD_INT 30
22819: DOUBLE
22820: EQUAL
22821: IFTRUE 22825
22823: GO 22850
22825: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22826: LD_ADDR_VAR 0 3
22830: PUSH
22831: LD_INT 20
22833: PPUSH
22834: LD_VAR 0 1
22838: PPUSH
22839: CALL_OW 321
22843: PUSH
22844: LD_INT 2
22846: EQUAL
22847: ST_TO_ADDR
22848: GO 23065
22850: LD_INT 28
22852: DOUBLE
22853: EQUAL
22854: IFTRUE 22864
22856: LD_INT 21
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 22889
22864: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22865: LD_ADDR_VAR 0 3
22869: PUSH
22870: LD_INT 21
22872: PPUSH
22873: LD_VAR 0 1
22877: PPUSH
22878: CALL_OW 321
22882: PUSH
22883: LD_INT 2
22885: EQUAL
22886: ST_TO_ADDR
22887: GO 23065
22889: LD_INT 16
22891: DOUBLE
22892: EQUAL
22893: IFTRUE 22897
22895: GO 22924
22897: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22898: LD_ADDR_VAR 0 3
22902: PUSH
22903: LD_EXP 95
22907: PPUSH
22908: LD_VAR 0 1
22912: PPUSH
22913: CALL_OW 321
22917: PUSH
22918: LD_INT 2
22920: EQUAL
22921: ST_TO_ADDR
22922: GO 23065
22924: LD_INT 19
22926: DOUBLE
22927: EQUAL
22928: IFTRUE 22938
22930: LD_INT 23
22932: DOUBLE
22933: EQUAL
22934: IFTRUE 22938
22936: GO 22965
22938: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22939: LD_ADDR_VAR 0 3
22943: PUSH
22944: LD_EXP 94
22948: PPUSH
22949: LD_VAR 0 1
22953: PPUSH
22954: CALL_OW 321
22958: PUSH
22959: LD_INT 2
22961: EQUAL
22962: ST_TO_ADDR
22963: GO 23065
22965: LD_INT 17
22967: DOUBLE
22968: EQUAL
22969: IFTRUE 22973
22971: GO 22998
22973: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22974: LD_ADDR_VAR 0 3
22978: PUSH
22979: LD_INT 39
22981: PPUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL_OW 321
22991: PUSH
22992: LD_INT 2
22994: EQUAL
22995: ST_TO_ADDR
22996: GO 23065
22998: LD_INT 18
23000: DOUBLE
23001: EQUAL
23002: IFTRUE 23006
23004: GO 23031
23006: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23007: LD_ADDR_VAR 0 3
23011: PUSH
23012: LD_INT 40
23014: PPUSH
23015: LD_VAR 0 1
23019: PPUSH
23020: CALL_OW 321
23024: PUSH
23025: LD_INT 2
23027: EQUAL
23028: ST_TO_ADDR
23029: GO 23065
23031: LD_INT 27
23033: DOUBLE
23034: EQUAL
23035: IFTRUE 23039
23037: GO 23064
23039: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23040: LD_ADDR_VAR 0 3
23044: PUSH
23045: LD_INT 35
23047: PPUSH
23048: LD_VAR 0 1
23052: PPUSH
23053: CALL_OW 321
23057: PUSH
23058: LD_INT 2
23060: EQUAL
23061: ST_TO_ADDR
23062: GO 23065
23064: POP
// end ;
23065: LD_VAR 0 3
23069: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23070: LD_INT 0
23072: PPUSH
23073: PPUSH
23074: PPUSH
23075: PPUSH
23076: PPUSH
23077: PPUSH
23078: PPUSH
23079: PPUSH
23080: PPUSH
23081: PPUSH
23082: PPUSH
// result := false ;
23083: LD_ADDR_VAR 0 6
23087: PUSH
23088: LD_INT 0
23090: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23091: LD_VAR 0 1
23095: NOT
23096: PUSH
23097: LD_VAR 0 1
23101: PPUSH
23102: CALL_OW 266
23106: PUSH
23107: LD_INT 0
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: IN
23117: NOT
23118: OR
23119: PUSH
23120: LD_VAR 0 2
23124: NOT
23125: OR
23126: PUSH
23127: LD_VAR 0 5
23131: PUSH
23132: LD_INT 0
23134: PUSH
23135: LD_INT 1
23137: PUSH
23138: LD_INT 2
23140: PUSH
23141: LD_INT 3
23143: PUSH
23144: LD_INT 4
23146: PUSH
23147: LD_INT 5
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: IN
23158: NOT
23159: OR
23160: PUSH
23161: LD_VAR 0 3
23165: PPUSH
23166: LD_VAR 0 4
23170: PPUSH
23171: CALL_OW 488
23175: NOT
23176: OR
23177: IFFALSE 23181
// exit ;
23179: GO 23917
// side := GetSide ( depot ) ;
23181: LD_ADDR_VAR 0 9
23185: PUSH
23186: LD_VAR 0 1
23190: PPUSH
23191: CALL_OW 255
23195: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23196: LD_VAR 0 9
23200: PPUSH
23201: LD_VAR 0 2
23205: PPUSH
23206: CALL 22690 0 2
23210: NOT
23211: IFFALSE 23215
// exit ;
23213: GO 23917
// pom := GetBase ( depot ) ;
23215: LD_ADDR_VAR 0 10
23219: PUSH
23220: LD_VAR 0 1
23224: PPUSH
23225: CALL_OW 274
23229: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23230: LD_ADDR_VAR 0 11
23234: PUSH
23235: LD_VAR 0 2
23239: PPUSH
23240: LD_VAR 0 1
23244: PPUSH
23245: CALL_OW 248
23249: PPUSH
23250: CALL_OW 450
23254: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23255: LD_VAR 0 10
23259: PPUSH
23260: LD_INT 1
23262: PPUSH
23263: CALL_OW 275
23267: PUSH
23268: LD_VAR 0 11
23272: PUSH
23273: LD_INT 1
23275: ARRAY
23276: GREATEREQUAL
23277: PUSH
23278: LD_VAR 0 10
23282: PPUSH
23283: LD_INT 2
23285: PPUSH
23286: CALL_OW 275
23290: PUSH
23291: LD_VAR 0 11
23295: PUSH
23296: LD_INT 2
23298: ARRAY
23299: GREATEREQUAL
23300: AND
23301: PUSH
23302: LD_VAR 0 10
23306: PPUSH
23307: LD_INT 3
23309: PPUSH
23310: CALL_OW 275
23314: PUSH
23315: LD_VAR 0 11
23319: PUSH
23320: LD_INT 3
23322: ARRAY
23323: GREATEREQUAL
23324: AND
23325: NOT
23326: IFFALSE 23330
// exit ;
23328: GO 23917
// if GetBType ( depot ) = b_depot then
23330: LD_VAR 0 1
23334: PPUSH
23335: CALL_OW 266
23339: PUSH
23340: LD_INT 0
23342: EQUAL
23343: IFFALSE 23355
// dist := 28 else
23345: LD_ADDR_VAR 0 14
23349: PUSH
23350: LD_INT 28
23352: ST_TO_ADDR
23353: GO 23363
// dist := 36 ;
23355: LD_ADDR_VAR 0 14
23359: PUSH
23360: LD_INT 36
23362: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23363: LD_VAR 0 1
23367: PPUSH
23368: LD_VAR 0 3
23372: PPUSH
23373: LD_VAR 0 4
23377: PPUSH
23378: CALL_OW 297
23382: PUSH
23383: LD_VAR 0 14
23387: GREATER
23388: IFFALSE 23392
// exit ;
23390: GO 23917
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23392: LD_ADDR_VAR 0 12
23396: PUSH
23397: LD_VAR 0 2
23401: PPUSH
23402: LD_VAR 0 3
23406: PPUSH
23407: LD_VAR 0 4
23411: PPUSH
23412: LD_VAR 0 5
23416: PPUSH
23417: LD_VAR 0 1
23421: PPUSH
23422: CALL_OW 248
23426: PPUSH
23427: LD_INT 0
23429: PPUSH
23430: CALL 23922 0 6
23434: ST_TO_ADDR
// if not hexes then
23435: LD_VAR 0 12
23439: NOT
23440: IFFALSE 23444
// exit ;
23442: GO 23917
// hex := GetHexInfo ( x , y ) ;
23444: LD_ADDR_VAR 0 15
23448: PUSH
23449: LD_VAR 0 3
23453: PPUSH
23454: LD_VAR 0 4
23458: PPUSH
23459: CALL_OW 546
23463: ST_TO_ADDR
// if hex [ 1 ] then
23464: LD_VAR 0 15
23468: PUSH
23469: LD_INT 1
23471: ARRAY
23472: IFFALSE 23476
// exit ;
23474: GO 23917
// height := hex [ 2 ] ;
23476: LD_ADDR_VAR 0 13
23480: PUSH
23481: LD_VAR 0 15
23485: PUSH
23486: LD_INT 2
23488: ARRAY
23489: ST_TO_ADDR
// for i = 1 to hexes do
23490: LD_ADDR_VAR 0 7
23494: PUSH
23495: DOUBLE
23496: LD_INT 1
23498: DEC
23499: ST_TO_ADDR
23500: LD_VAR 0 12
23504: PUSH
23505: FOR_TO
23506: IFFALSE 23836
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23508: LD_VAR 0 12
23512: PUSH
23513: LD_VAR 0 7
23517: ARRAY
23518: PUSH
23519: LD_INT 1
23521: ARRAY
23522: PPUSH
23523: LD_VAR 0 12
23527: PUSH
23528: LD_VAR 0 7
23532: ARRAY
23533: PUSH
23534: LD_INT 2
23536: ARRAY
23537: PPUSH
23538: CALL_OW 488
23542: NOT
23543: PUSH
23544: LD_VAR 0 12
23548: PUSH
23549: LD_VAR 0 7
23553: ARRAY
23554: PUSH
23555: LD_INT 1
23557: ARRAY
23558: PPUSH
23559: LD_VAR 0 12
23563: PUSH
23564: LD_VAR 0 7
23568: ARRAY
23569: PUSH
23570: LD_INT 2
23572: ARRAY
23573: PPUSH
23574: CALL_OW 428
23578: PUSH
23579: LD_INT 0
23581: GREATER
23582: OR
23583: PUSH
23584: LD_VAR 0 12
23588: PUSH
23589: LD_VAR 0 7
23593: ARRAY
23594: PUSH
23595: LD_INT 1
23597: ARRAY
23598: PPUSH
23599: LD_VAR 0 12
23603: PUSH
23604: LD_VAR 0 7
23608: ARRAY
23609: PUSH
23610: LD_INT 2
23612: ARRAY
23613: PPUSH
23614: CALL_OW 351
23618: OR
23619: IFFALSE 23625
// exit ;
23621: POP
23622: POP
23623: GO 23917
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23625: LD_ADDR_VAR 0 8
23629: PUSH
23630: LD_VAR 0 12
23634: PUSH
23635: LD_VAR 0 7
23639: ARRAY
23640: PUSH
23641: LD_INT 1
23643: ARRAY
23644: PPUSH
23645: LD_VAR 0 12
23649: PUSH
23650: LD_VAR 0 7
23654: ARRAY
23655: PUSH
23656: LD_INT 2
23658: ARRAY
23659: PPUSH
23660: CALL_OW 546
23664: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23665: LD_VAR 0 8
23669: PUSH
23670: LD_INT 1
23672: ARRAY
23673: PUSH
23674: LD_VAR 0 8
23678: PUSH
23679: LD_INT 2
23681: ARRAY
23682: PUSH
23683: LD_VAR 0 13
23687: PUSH
23688: LD_INT 2
23690: PLUS
23691: GREATER
23692: OR
23693: PUSH
23694: LD_VAR 0 8
23698: PUSH
23699: LD_INT 2
23701: ARRAY
23702: PUSH
23703: LD_VAR 0 13
23707: PUSH
23708: LD_INT 2
23710: MINUS
23711: LESS
23712: OR
23713: PUSH
23714: LD_VAR 0 8
23718: PUSH
23719: LD_INT 3
23721: ARRAY
23722: PUSH
23723: LD_INT 0
23725: PUSH
23726: LD_INT 8
23728: PUSH
23729: LD_INT 9
23731: PUSH
23732: LD_INT 10
23734: PUSH
23735: LD_INT 11
23737: PUSH
23738: LD_INT 12
23740: PUSH
23741: LD_INT 13
23743: PUSH
23744: LD_INT 16
23746: PUSH
23747: LD_INT 17
23749: PUSH
23750: LD_INT 18
23752: PUSH
23753: LD_INT 19
23755: PUSH
23756: LD_INT 20
23758: PUSH
23759: LD_INT 21
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: IN
23777: NOT
23778: OR
23779: PUSH
23780: LD_VAR 0 8
23784: PUSH
23785: LD_INT 5
23787: ARRAY
23788: NOT
23789: OR
23790: PUSH
23791: LD_VAR 0 8
23795: PUSH
23796: LD_INT 6
23798: ARRAY
23799: PUSH
23800: LD_INT 1
23802: PUSH
23803: LD_INT 2
23805: PUSH
23806: LD_INT 7
23808: PUSH
23809: LD_INT 9
23811: PUSH
23812: LD_INT 10
23814: PUSH
23815: LD_INT 11
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: IN
23826: NOT
23827: OR
23828: IFFALSE 23834
// exit ;
23830: POP
23831: POP
23832: GO 23917
// end ;
23834: GO 23505
23836: POP
23837: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23838: LD_VAR 0 9
23842: PPUSH
23843: LD_VAR 0 3
23847: PPUSH
23848: LD_VAR 0 4
23852: PPUSH
23853: LD_INT 20
23855: PPUSH
23856: CALL 15863 0 4
23860: PUSH
23861: LD_INT 4
23863: ARRAY
23864: IFFALSE 23868
// exit ;
23866: GO 23917
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23868: LD_VAR 0 2
23872: PUSH
23873: LD_INT 29
23875: PUSH
23876: LD_INT 30
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: IN
23883: PUSH
23884: LD_VAR 0 3
23888: PPUSH
23889: LD_VAR 0 4
23893: PPUSH
23894: LD_VAR 0 9
23898: PPUSH
23899: CALL_OW 440
23903: NOT
23904: AND
23905: IFFALSE 23909
// exit ;
23907: GO 23917
// result := true ;
23909: LD_ADDR_VAR 0 6
23913: PUSH
23914: LD_INT 1
23916: ST_TO_ADDR
// end ;
23917: LD_VAR 0 6
23921: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23922: LD_INT 0
23924: PPUSH
23925: PPUSH
23926: PPUSH
23927: PPUSH
23928: PPUSH
23929: PPUSH
23930: PPUSH
23931: PPUSH
23932: PPUSH
23933: PPUSH
23934: PPUSH
23935: PPUSH
23936: PPUSH
23937: PPUSH
23938: PPUSH
23939: PPUSH
23940: PPUSH
23941: PPUSH
23942: PPUSH
23943: PPUSH
23944: PPUSH
23945: PPUSH
23946: PPUSH
23947: PPUSH
23948: PPUSH
23949: PPUSH
23950: PPUSH
23951: PPUSH
23952: PPUSH
23953: PPUSH
23954: PPUSH
23955: PPUSH
23956: PPUSH
23957: PPUSH
23958: PPUSH
23959: PPUSH
23960: PPUSH
23961: PPUSH
23962: PPUSH
23963: PPUSH
23964: PPUSH
23965: PPUSH
23966: PPUSH
23967: PPUSH
23968: PPUSH
23969: PPUSH
23970: PPUSH
23971: PPUSH
23972: PPUSH
23973: PPUSH
23974: PPUSH
23975: PPUSH
23976: PPUSH
23977: PPUSH
23978: PPUSH
23979: PPUSH
23980: PPUSH
23981: PPUSH
// result = [ ] ;
23982: LD_ADDR_VAR 0 7
23986: PUSH
23987: EMPTY
23988: ST_TO_ADDR
// temp_list = [ ] ;
23989: LD_ADDR_VAR 0 9
23993: PUSH
23994: EMPTY
23995: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23996: LD_VAR 0 4
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: LD_INT 2
24009: PUSH
24010: LD_INT 3
24012: PUSH
24013: LD_INT 4
24015: PUSH
24016: LD_INT 5
24018: PUSH
24019: EMPTY
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: IN
24027: NOT
24028: PUSH
24029: LD_VAR 0 1
24033: PUSH
24034: LD_INT 0
24036: PUSH
24037: LD_INT 1
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: IN
24044: PUSH
24045: LD_VAR 0 5
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: LD_INT 3
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: LIST
24063: IN
24064: NOT
24065: AND
24066: OR
24067: IFFALSE 24071
// exit ;
24069: GO 42462
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24071: LD_VAR 0 1
24075: PUSH
24076: LD_INT 6
24078: PUSH
24079: LD_INT 7
24081: PUSH
24082: LD_INT 8
24084: PUSH
24085: LD_INT 13
24087: PUSH
24088: LD_INT 12
24090: PUSH
24091: LD_INT 15
24093: PUSH
24094: LD_INT 11
24096: PUSH
24097: LD_INT 14
24099: PUSH
24100: LD_INT 10
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: IN
24114: IFFALSE 24124
// btype = b_lab ;
24116: LD_ADDR_VAR 0 1
24120: PUSH
24121: LD_INT 6
24123: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24124: LD_VAR 0 6
24128: PUSH
24129: LD_INT 0
24131: PUSH
24132: LD_INT 1
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: LIST
24142: IN
24143: NOT
24144: PUSH
24145: LD_VAR 0 1
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: LD_INT 2
24158: PUSH
24159: LD_INT 3
24161: PUSH
24162: LD_INT 6
24164: PUSH
24165: LD_INT 36
24167: PUSH
24168: LD_INT 4
24170: PUSH
24171: LD_INT 5
24173: PUSH
24174: LD_INT 31
24176: PUSH
24177: LD_INT 32
24179: PUSH
24180: LD_INT 33
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: IN
24196: NOT
24197: PUSH
24198: LD_VAR 0 6
24202: PUSH
24203: LD_INT 1
24205: EQUAL
24206: AND
24207: OR
24208: PUSH
24209: LD_VAR 0 1
24213: PUSH
24214: LD_INT 2
24216: PUSH
24217: LD_INT 3
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: IN
24224: NOT
24225: PUSH
24226: LD_VAR 0 6
24230: PUSH
24231: LD_INT 2
24233: EQUAL
24234: AND
24235: OR
24236: IFFALSE 24246
// mode = 0 ;
24238: LD_ADDR_VAR 0 6
24242: PUSH
24243: LD_INT 0
24245: ST_TO_ADDR
// case mode of 0 :
24246: LD_VAR 0 6
24250: PUSH
24251: LD_INT 0
24253: DOUBLE
24254: EQUAL
24255: IFTRUE 24259
24257: GO 35712
24259: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24260: LD_ADDR_VAR 0 11
24264: PUSH
24265: LD_INT 0
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 0
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: LD_INT 0
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 1
24318: NEG
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 1
24341: NEG
24342: PUSH
24343: LD_INT 2
24345: NEG
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 0
24353: PUSH
24354: LD_INT 2
24356: NEG
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 1
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 1
24375: PUSH
24376: LD_INT 2
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 0
24385: PUSH
24386: LD_INT 2
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 1
24395: NEG
24396: PUSH
24397: LD_INT 1
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: LD_INT 3
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 0
24416: PUSH
24417: LD_INT 3
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: NEG
24427: PUSH
24428: LD_INT 2
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24453: LD_ADDR_VAR 0 12
24457: PUSH
24458: LD_INT 0
24460: PUSH
24461: LD_INT 0
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 0
24470: PUSH
24471: LD_INT 1
24473: NEG
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: LD_INT 0
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 1
24511: NEG
24512: PUSH
24513: LD_INT 0
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: LD_INT 1
24526: NEG
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: PUSH
24535: LD_INT 1
24537: NEG
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 2
24545: PUSH
24546: LD_INT 0
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 2
24555: PUSH
24556: LD_INT 1
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 1
24565: NEG
24566: PUSH
24567: LD_INT 1
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 2
24576: NEG
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 2
24587: NEG
24588: PUSH
24589: LD_INT 1
24591: NEG
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 2
24599: NEG
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 3
24610: NEG
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 3
24621: NEG
24622: PUSH
24623: LD_INT 1
24625: NEG
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24649: LD_ADDR_VAR 0 13
24653: PUSH
24654: LD_INT 0
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 0
24666: PUSH
24667: LD_INT 1
24669: NEG
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 0
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 1
24707: NEG
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 1
24718: NEG
24719: PUSH
24720: LD_INT 1
24722: NEG
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PUSH
24732: LD_INT 2
24734: NEG
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 2
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 2
24752: PUSH
24753: LD_INT 2
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 1
24762: PUSH
24763: LD_INT 2
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 2
24772: NEG
24773: PUSH
24774: LD_INT 1
24776: NEG
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 2
24784: NEG
24785: PUSH
24786: LD_INT 2
24788: NEG
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: LD_INT 3
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 3
24808: NEG
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 3
24820: NEG
24821: PUSH
24822: LD_INT 3
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24848: LD_ADDR_VAR 0 14
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: LD_INT 1
24868: NEG
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 1
24886: PUSH
24887: LD_INT 1
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: LD_INT 1
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 1
24906: NEG
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 1
24917: NEG
24918: PUSH
24919: LD_INT 1
24921: NEG
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 1
24929: NEG
24930: PUSH
24931: LD_INT 2
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 2
24944: NEG
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 1
24952: PUSH
24953: LD_INT 1
24955: NEG
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: LD_INT 2
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 0
24973: PUSH
24974: LD_INT 2
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: LD_INT 1
24983: NEG
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: LD_INT 3
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 3
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: LD_INT 2
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25044: LD_ADDR_VAR 0 15
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 0
25061: PUSH
25062: LD_INT 1
25064: NEG
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 1
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: NEG
25103: PUSH
25104: LD_INT 0
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: LD_INT 1
25117: NEG
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: LD_INT 1
25128: NEG
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 2
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 2
25146: PUSH
25147: LD_INT 1
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 1
25156: NEG
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 2
25167: NEG
25168: PUSH
25169: LD_INT 0
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 2
25178: NEG
25179: PUSH
25180: LD_INT 1
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 2
25190: PUSH
25191: LD_INT 1
25193: NEG
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 3
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 3
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25237: LD_ADDR_VAR 0 16
25241: PUSH
25242: LD_INT 0
25244: PUSH
25245: LD_INT 0
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: PUSH
25276: LD_INT 1
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: NEG
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: NEG
25307: PUSH
25308: LD_INT 1
25310: NEG
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 1
25318: NEG
25319: PUSH
25320: LD_INT 2
25322: NEG
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: PUSH
25328: LD_INT 2
25330: PUSH
25331: LD_INT 1
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 2
25340: PUSH
25341: LD_INT 2
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: LD_INT 2
25353: PUSH
25354: EMPTY
25355: LIST
25356: LIST
25357: PUSH
25358: LD_INT 2
25360: NEG
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: NEG
25373: PUSH
25374: LD_INT 2
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 3
25384: PUSH
25385: LD_INT 2
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 3
25394: PUSH
25395: LD_INT 3
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 3
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25430: LD_ADDR_VAR 0 17
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 0
25447: PUSH
25448: LD_INT 1
25450: NEG
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: LD_INT 0
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: LD_INT 1
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: LD_INT 0
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 1
25499: NEG
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: LD_INT 2
25515: NEG
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 0
25523: PUSH
25524: LD_INT 2
25526: NEG
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 1
25534: PUSH
25535: LD_INT 1
25537: NEG
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: LD_INT 1
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: LD_INT 2
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: LD_INT 2
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 2
25606: NEG
25607: PUSH
25608: LD_INT 0
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 2
25617: NEG
25618: PUSH
25619: LD_INT 1
25621: NEG
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: NEG
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25660: LD_ADDR_VAR 0 18
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: LD_INT 0
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: LD_INT 1
25680: NEG
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: LD_INT 0
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 0
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: NEG
25719: PUSH
25720: LD_INT 0
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 1
25729: NEG
25730: PUSH
25731: LD_INT 1
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: LD_INT 2
25745: NEG
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 0
25753: PUSH
25754: LD_INT 2
25756: NEG
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: LD_INT 1
25767: NEG
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 2
25775: PUSH
25776: LD_INT 0
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 2
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: LD_INT 2
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 0
25815: PUSH
25816: LD_INT 2
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: LD_INT 1
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: LD_INT 2
25836: NEG
25837: PUSH
25838: LD_INT 0
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 2
25847: NEG
25848: PUSH
25849: LD_INT 1
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 2
25859: NEG
25860: PUSH
25861: LD_INT 2
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25890: LD_ADDR_VAR 0 19
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: LD_INT 1
25910: NEG
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: LD_INT 0
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 0
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 0
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 1
25959: NEG
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 1
25971: NEG
25972: PUSH
25973: LD_INT 2
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 0
25983: PUSH
25984: LD_INT 2
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 2
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: PUSH
26026: LD_INT 2
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: LD_INT 2
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: LD_INT 0
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 2
26077: NEG
26078: PUSH
26079: LD_INT 1
26081: NEG
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 2
26089: NEG
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26120: LD_ADDR_VAR 0 20
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: LD_INT 0
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: PUSH
26135: LD_INT 0
26137: PUSH
26138: LD_INT 1
26140: NEG
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: PUSH
26149: LD_INT 0
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 0
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: NEG
26179: PUSH
26180: LD_INT 0
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: LD_INT 2
26205: NEG
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: LD_INT 2
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 1
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 2
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: PUSH
26266: LD_INT 2
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 0
26275: PUSH
26276: LD_INT 2
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: PUSH
26283: LD_INT 1
26285: NEG
26286: PUSH
26287: LD_INT 1
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 2
26296: NEG
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 2
26307: NEG
26308: PUSH
26309: LD_INT 1
26311: NEG
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: LD_INT 2
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26350: LD_ADDR_VAR 0 21
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 1
26388: PUSH
26389: LD_INT 1
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: NEG
26420: PUSH
26421: LD_INT 1
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: LD_INT 2
26435: NEG
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: LD_INT 2
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 2
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 2
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: LD_INT 2
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 2
26526: NEG
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: NEG
26538: PUSH
26539: LD_INT 1
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 2
26549: NEG
26550: PUSH
26551: LD_INT 2
26553: NEG
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26580: LD_ADDR_VAR 0 22
26584: PUSH
26585: LD_INT 0
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 0
26597: PUSH
26598: LD_INT 1
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 1
26608: PUSH
26609: LD_INT 0
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 0
26628: PUSH
26629: LD_INT 1
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: NEG
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 1
26661: NEG
26662: PUSH
26663: LD_INT 2
26665: NEG
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 0
26673: PUSH
26674: LD_INT 2
26676: NEG
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 2
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 2
26715: PUSH
26716: LD_INT 2
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: LD_INT 2
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: LD_INT 2
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: LD_INT 1
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 2
26756: NEG
26757: PUSH
26758: LD_INT 0
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 2
26779: NEG
26780: PUSH
26781: LD_INT 2
26783: NEG
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26810: LD_ADDR_VAR 0 23
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 1
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: LD_INT 0
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: NEG
26880: PUSH
26881: LD_INT 1
26883: NEG
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: LD_INT 2
26895: NEG
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: LD_INT 2
26906: NEG
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 2
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: EMPTY
26930: LIST
26931: LIST
26932: PUSH
26933: LD_INT 2
26935: PUSH
26936: LD_INT 1
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 2
26945: PUSH
26946: LD_INT 2
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: LD_INT 2
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: NEG
26976: PUSH
26977: LD_INT 1
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 2
26986: NEG
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 2
26997: NEG
26998: PUSH
26999: LD_INT 1
27001: NEG
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 2
27009: NEG
27010: PUSH
27011: LD_INT 2
27013: NEG
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 2
27021: NEG
27022: PUSH
27023: LD_INT 3
27025: NEG
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: LD_INT 3
27037: NEG
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: LD_INT 2
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 2
27056: PUSH
27057: LD_INT 1
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27090: LD_ADDR_VAR 0 24
27094: PUSH
27095: LD_INT 0
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 1
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: LD_INT 1
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: NEG
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: NEG
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: LD_INT 2
27175: NEG
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: LD_INT 2
27186: NEG
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: PUSH
27195: LD_INT 1
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 2
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: LD_INT 1
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 2
27225: PUSH
27226: LD_INT 2
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: LD_INT 2
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: NEG
27256: PUSH
27257: LD_INT 1
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 2
27266: NEG
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 2
27277: NEG
27278: PUSH
27279: LD_INT 1
27281: NEG
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 2
27289: NEG
27290: PUSH
27291: LD_INT 2
27293: NEG
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: LD_INT 2
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 2
27312: PUSH
27313: LD_INT 1
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 3
27323: PUSH
27324: LD_INT 1
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 3
27333: PUSH
27334: LD_INT 2
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27366: LD_ADDR_VAR 0 25
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: LD_INT 0
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: LD_INT 1
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: LD_INT 1
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: LD_INT 0
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 1
27447: NEG
27448: PUSH
27449: LD_INT 2
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 0
27459: PUSH
27460: LD_INT 2
27462: NEG
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 2
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 2
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 2
27501: PUSH
27502: LD_INT 2
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: LD_INT 2
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 0
27521: PUSH
27522: LD_INT 2
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 1
27531: NEG
27532: PUSH
27533: LD_INT 1
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 2
27542: NEG
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 2
27553: NEG
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PUSH
27563: LD_INT 2
27565: NEG
27566: PUSH
27567: LD_INT 2
27569: NEG
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 3
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 3
27587: PUSH
27588: LD_INT 2
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: PUSH
27598: LD_INT 3
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: LD_INT 3
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27640: LD_ADDR_VAR 0 26
27644: PUSH
27645: LD_INT 0
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 1
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 1
27709: NEG
27710: PUSH
27711: LD_INT 1
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: LD_INT 2
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: LD_INT 2
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 2
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 2
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: LD_INT 2
27775: PUSH
27776: LD_INT 2
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: LD_INT 2
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 0
27795: PUSH
27796: LD_INT 2
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 1
27805: NEG
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 2
27816: NEG
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 2
27827: NEG
27828: PUSH
27829: LD_INT 1
27831: NEG
27832: PUSH
27833: EMPTY
27834: LIST
27835: LIST
27836: PUSH
27837: LD_INT 2
27839: NEG
27840: PUSH
27841: LD_INT 2
27843: NEG
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 2
27851: PUSH
27852: LD_INT 3
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 1
27861: PUSH
27862: LD_INT 3
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: LD_INT 2
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 2
27882: NEG
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27916: LD_ADDR_VAR 0 27
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 1
27936: NEG
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: LD_INT 1
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: LD_INT 1
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: LD_INT 1
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: LD_INT 1
27989: NEG
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 1
27997: NEG
27998: PUSH
27999: LD_INT 2
28001: NEG
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: LD_INT 0
28009: PUSH
28010: LD_INT 2
28012: NEG
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: LD_INT 1
28023: NEG
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 2
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 2
28041: PUSH
28042: LD_INT 1
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: LD_INT 2
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: LD_INT 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 0
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 1
28081: NEG
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 2
28092: NEG
28093: PUSH
28094: LD_INT 0
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 2
28103: NEG
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 2
28115: NEG
28116: PUSH
28117: LD_INT 2
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 2
28138: NEG
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 3
28149: NEG
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 3
28161: NEG
28162: PUSH
28163: LD_INT 2
28165: NEG
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28196: LD_ADDR_VAR 0 28
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: LD_INT 1
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 0
28244: PUSH
28245: LD_INT 1
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 1
28265: NEG
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: LD_INT 2
28281: NEG
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 0
28289: PUSH
28290: LD_INT 2
28292: NEG
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: LD_INT 1
28303: NEG
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: LD_INT 2
28311: PUSH
28312: LD_INT 0
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: LD_INT 1
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 2
28331: PUSH
28332: LD_INT 2
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: LD_INT 2
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: LD_INT 2
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: LD_INT 1
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 2
28372: NEG
28373: PUSH
28374: LD_INT 0
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 2
28383: NEG
28384: PUSH
28385: LD_INT 1
28387: NEG
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: PUSH
28393: LD_INT 2
28395: NEG
28396: PUSH
28397: LD_INT 2
28399: NEG
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: LD_INT 2
28407: NEG
28408: PUSH
28409: LD_INT 3
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: NEG
28420: PUSH
28421: LD_INT 3
28423: NEG
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 3
28431: NEG
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 3
28443: NEG
28444: PUSH
28445: LD_INT 2
28447: NEG
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28478: LD_ADDR_VAR 0 29
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: LD_INT 1
28498: NEG
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: LD_INT 0
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 1
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 0
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 1
28536: NEG
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: NEG
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: LD_INT 2
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 0
28571: PUSH
28572: LD_INT 2
28574: NEG
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 1
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 2
28593: PUSH
28594: LD_INT 0
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: LD_INT 1
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 2
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 2
28644: NEG
28645: PUSH
28646: LD_INT 1
28648: NEG
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: PUSH
28654: LD_INT 2
28656: NEG
28657: PUSH
28658: LD_INT 2
28660: NEG
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 2
28668: NEG
28669: PUSH
28670: LD_INT 3
28672: NEG
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 2
28680: PUSH
28681: LD_INT 1
28683: NEG
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 3
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: LD_INT 2
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 3
28722: NEG
28723: PUSH
28724: LD_INT 2
28726: NEG
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28757: LD_ADDR_VAR 0 30
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 1
28826: NEG
28827: PUSH
28828: LD_INT 1
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 2
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 2
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 2
28872: PUSH
28873: LD_INT 0
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 2
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: LD_INT 2
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: LD_INT 2
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: NEG
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 2
28923: NEG
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 2
28934: NEG
28935: PUSH
28936: LD_INT 1
28938: NEG
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: NEG
28947: PUSH
28948: LD_INT 3
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 3
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 2
28979: PUSH
28980: LD_INT 3
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 2
28989: NEG
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 3
29000: NEG
29001: PUSH
29002: LD_INT 1
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29035: LD_ADDR_VAR 0 31
29039: PUSH
29040: LD_INT 0
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 1
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 1
29093: NEG
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PUSH
29102: LD_INT 1
29104: NEG
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 1
29116: NEG
29117: PUSH
29118: LD_INT 2
29120: NEG
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: LD_INT 1
29131: NEG
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 2
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 2
29159: PUSH
29160: LD_INT 2
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 1
29169: PUSH
29170: LD_INT 2
29172: PUSH
29173: EMPTY
29174: LIST
29175: LIST
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: LD_INT 2
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 1
29189: NEG
29190: PUSH
29191: LD_INT 1
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 2
29200: NEG
29201: PUSH
29202: LD_INT 1
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 2
29212: NEG
29213: PUSH
29214: LD_INT 2
29216: NEG
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 2
29224: NEG
29225: PUSH
29226: LD_INT 3
29228: NEG
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 2
29236: PUSH
29237: LD_INT 1
29239: NEG
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 3
29247: PUSH
29248: LD_INT 1
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 1
29257: PUSH
29258: LD_INT 3
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 3
29278: NEG
29279: PUSH
29280: LD_INT 2
29282: NEG
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29313: LD_ADDR_VAR 0 32
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 0
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: NEG
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: NEG
29383: PUSH
29384: LD_INT 1
29386: NEG
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 1
29394: NEG
29395: PUSH
29396: LD_INT 2
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: LD_INT 2
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 1
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: LD_INT 1
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 2
29479: NEG
29480: PUSH
29481: LD_INT 0
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 2
29490: NEG
29491: PUSH
29492: LD_INT 1
29494: NEG
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 1
29502: NEG
29503: PUSH
29504: LD_INT 3
29506: NEG
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 1
29514: PUSH
29515: LD_INT 2
29517: NEG
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 3
29525: PUSH
29526: LD_INT 2
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 2
29535: PUSH
29536: LD_INT 3
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: PUSH
29543: LD_INT 2
29545: NEG
29546: PUSH
29547: LD_INT 1
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 3
29556: NEG
29557: PUSH
29558: LD_INT 1
29560: NEG
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29591: LD_ADDR_VAR 0 33
29595: PUSH
29596: LD_INT 0
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: NEG
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 1
29660: NEG
29661: PUSH
29662: LD_INT 1
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 1
29672: NEG
29673: PUSH
29674: LD_INT 2
29676: NEG
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 1
29684: PUSH
29685: LD_INT 1
29687: NEG
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PUSH
29693: LD_INT 2
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 2
29705: PUSH
29706: LD_INT 1
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 1
29715: PUSH
29716: LD_INT 2
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: LD_INT 2
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: LD_INT 1
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: NEG
29747: PUSH
29748: LD_INT 0
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 2
29757: NEG
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 2
29769: NEG
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 2
29781: NEG
29782: PUSH
29783: LD_INT 3
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: LD_INT 2
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 3
29804: PUSH
29805: LD_INT 1
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: LD_INT 3
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: LD_INT 2
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 3
29835: NEG
29836: PUSH
29837: LD_INT 2
29839: NEG
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29870: LD_ADDR_VAR 0 34
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 0
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 1
29928: NEG
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: LD_INT 1
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 1
29951: NEG
29952: PUSH
29953: LD_INT 2
29955: NEG
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: LD_INT 2
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 2
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 2
29995: PUSH
29996: LD_INT 2
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 1
30015: NEG
30016: PUSH
30017: LD_INT 1
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 2
30026: NEG
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 2
30037: NEG
30038: PUSH
30039: LD_INT 1
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 2
30049: NEG
30050: PUSH
30051: LD_INT 2
30053: NEG
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: LD_INT 3
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: LD_INT 2
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 3
30084: PUSH
30085: LD_INT 2
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 2
30094: PUSH
30095: LD_INT 3
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 2
30104: NEG
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 3
30115: NEG
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30150: LD_ADDR_VAR 0 35
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: LD_INT 1
30170: NEG
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 1
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 0
30198: PUSH
30199: LD_INT 1
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 1
30208: NEG
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 1
30219: NEG
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 2
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 2
30241: NEG
30242: PUSH
30243: LD_INT 1
30245: NEG
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30262: LD_ADDR_VAR 0 36
30266: PUSH
30267: LD_INT 0
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: LD_INT 1
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 1
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: LD_INT 1
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 0
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 1
30320: NEG
30321: PUSH
30322: LD_INT 0
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: LD_INT 1
30331: NEG
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: LD_INT 2
30347: NEG
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30374: LD_ADDR_VAR 0 37
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 0
30391: PUSH
30392: LD_INT 1
30394: NEG
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 1
30443: NEG
30444: PUSH
30445: LD_INT 1
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 1
30466: NEG
30467: PUSH
30468: LD_INT 1
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30486: LD_ADDR_VAR 0 38
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: LD_INT 0
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 0
30503: PUSH
30504: LD_INT 1
30506: NEG
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 1
30514: PUSH
30515: LD_INT 0
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 0
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 1
30544: NEG
30545: PUSH
30546: LD_INT 0
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: LD_INT 1
30559: NEG
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 2
30567: PUSH
30568: LD_INT 1
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 2
30577: NEG
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30598: LD_ADDR_VAR 0 39
30602: PUSH
30603: LD_INT 0
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 0
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: PUSH
30627: LD_INT 0
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: LD_INT 1
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 1
30656: NEG
30657: PUSH
30658: LD_INT 0
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 1
30667: NEG
30668: PUSH
30669: LD_INT 1
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 1
30679: NEG
30680: PUSH
30681: LD_INT 2
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 1
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30710: LD_ADDR_VAR 0 40
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: LD_INT 0
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 0
30727: PUSH
30728: LD_INT 1
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: LD_INT 1
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 0
30758: PUSH
30759: LD_INT 1
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 1
30768: NEG
30769: PUSH
30770: LD_INT 0
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: LD_INT 1
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 1
30791: PUSH
30792: LD_INT 1
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: NEG
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30822: LD_ADDR_VAR 0 41
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 0
30870: PUSH
30871: LD_INT 1
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 1
30880: NEG
30881: PUSH
30882: LD_INT 0
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 1
30891: NEG
30892: PUSH
30893: LD_INT 1
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 1
30903: NEG
30904: PUSH
30905: LD_INT 2
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 2
30926: PUSH
30927: LD_INT 0
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 2
30946: PUSH
30947: LD_INT 2
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 1
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: NEG
30967: PUSH
30968: LD_INT 1
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: NEG
30978: PUSH
30979: LD_INT 0
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 2
30988: NEG
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 2
31000: NEG
31001: PUSH
31002: LD_INT 2
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 2
31012: NEG
31013: PUSH
31014: LD_INT 3
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 2
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 3
31035: PUSH
31036: LD_INT 0
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 3
31045: PUSH
31046: LD_INT 1
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 3
31055: PUSH
31056: LD_INT 2
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 3
31065: PUSH
31066: LD_INT 3
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 2
31075: PUSH
31076: LD_INT 3
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 2
31085: NEG
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 3
31096: NEG
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 3
31107: NEG
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 3
31119: NEG
31120: PUSH
31121: LD_INT 2
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 3
31131: NEG
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31172: LD_ADDR_VAR 0 42
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: LD_INT 1
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: LD_INT 0
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 0
31220: PUSH
31221: LD_INT 1
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 1
31241: NEG
31242: PUSH
31243: LD_INT 1
31245: NEG
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 1
31253: NEG
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: LD_INT 2
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 2
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: LD_INT 2
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: LD_INT 2
31338: NEG
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 2
31350: NEG
31351: PUSH
31352: LD_INT 2
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 2
31362: NEG
31363: PUSH
31364: LD_INT 3
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: NEG
31375: PUSH
31376: LD_INT 3
31378: NEG
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: LD_INT 3
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: LD_INT 2
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 3
31408: PUSH
31409: LD_INT 2
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 3
31418: PUSH
31419: LD_INT 3
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 2
31428: PUSH
31429: LD_INT 3
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: LD_INT 3
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 0
31448: PUSH
31449: LD_INT 3
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 3
31469: NEG
31470: PUSH
31471: LD_INT 2
31473: NEG
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 3
31481: NEG
31482: PUSH
31483: LD_INT 3
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31522: LD_ADDR_VAR 0 43
31526: PUSH
31527: LD_INT 0
31529: PUSH
31530: LD_INT 0
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 1
31560: PUSH
31561: LD_INT 1
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: LD_INT 1
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: LD_INT 1
31595: NEG
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 1
31603: NEG
31604: PUSH
31605: LD_INT 2
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: LD_INT 1
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 2
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 2
31647: PUSH
31648: LD_INT 1
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: LD_INT 2
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 1
31677: NEG
31678: PUSH
31679: LD_INT 1
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 2
31688: NEG
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 2
31699: NEG
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: NEG
31712: PUSH
31713: LD_INT 3
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 0
31723: PUSH
31724: LD_INT 3
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 2
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 3
31756: PUSH
31757: LD_INT 0
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 3
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: LD_INT 3
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: LD_INT 0
31786: PUSH
31787: LD_INT 3
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 2
31807: NEG
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 3
31818: NEG
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: PUSH
31827: LD_INT 3
31829: NEG
31830: PUSH
31831: LD_INT 1
31833: NEG
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31870: LD_ADDR_VAR 0 44
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 0
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: LD_INT 0
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: LD_INT 2
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 2
31974: PUSH
31975: LD_INT 0
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 2
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: PUSH
31995: LD_INT 2
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 2
32025: NEG
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: NEG
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: LD_INT 3
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 3
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 3
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 3
32113: PUSH
32114: LD_INT 3
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 2
32123: PUSH
32124: LD_INT 3
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 2
32133: NEG
32134: PUSH
32135: LD_INT 1
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 3
32144: NEG
32145: PUSH
32146: LD_INT 0
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 3
32155: NEG
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 3
32167: NEG
32168: PUSH
32169: LD_INT 2
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 3
32179: NEG
32180: PUSH
32181: LD_INT 3
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32220: LD_ADDR_VAR 0 45
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 1
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 1
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: NEG
32302: PUSH
32303: LD_INT 2
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: LD_INT 2
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 1
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 2
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: LD_INT 2
32345: PUSH
32346: LD_INT 2
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: LD_INT 2
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: LD_INT 2
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: LD_INT 1
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: LD_INT 2
32386: NEG
32387: PUSH
32388: LD_INT 1
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 2
32398: NEG
32399: PUSH
32400: LD_INT 2
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 2
32410: NEG
32411: PUSH
32412: LD_INT 3
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: LD_INT 3
32426: NEG
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 0
32434: PUSH
32435: LD_INT 3
32437: NEG
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: LD_INT 2
32448: NEG
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_INT 3
32456: PUSH
32457: LD_INT 2
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 3
32466: PUSH
32467: LD_INT 3
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 2
32476: PUSH
32477: LD_INT 3
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 1
32486: PUSH
32487: LD_INT 3
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: LD_INT 0
32496: PUSH
32497: LD_INT 3
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: LD_INT 2
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 3
32517: NEG
32518: PUSH
32519: LD_INT 2
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 3
32529: NEG
32530: PUSH
32531: LD_INT 3
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32570: LD_ADDR_VAR 0 46
32574: PUSH
32575: LD_INT 0
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: LD_INT 1
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 1
32651: NEG
32652: PUSH
32653: LD_INT 2
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: LD_INT 2
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: LD_INT 1
32677: NEG
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 2
32685: PUSH
32686: LD_INT 0
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 2
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: LD_INT 2
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: LD_INT 2
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: LD_INT 1
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 2
32736: NEG
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 2
32747: NEG
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 1
32759: NEG
32760: PUSH
32761: LD_INT 3
32763: NEG
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 3
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 1
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 2
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 3
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 3
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: PUSH
32825: LD_INT 3
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 0
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 2
32855: NEG
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 3
32866: NEG
32867: PUSH
32868: LD_INT 0
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 3
32877: NEG
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32918: LD_ADDR_VAR 0 47
32922: PUSH
32923: LD_INT 0
32925: PUSH
32926: LD_INT 0
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: LD_INT 1
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 1
32946: PUSH
32947: LD_INT 0
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: LD_INT 1
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 0
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 1
32976: NEG
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: LD_INT 2
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 2
33033: NEG
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 2
33045: NEG
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33069: LD_ADDR_VAR 0 48
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: LD_INT 1
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 1
33127: NEG
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: LD_INT 1
33142: NEG
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 1
33150: NEG
33151: PUSH
33152: LD_INT 2
33154: NEG
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: LD_INT 2
33165: NEG
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: LD_INT 0
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 2
33194: PUSH
33195: LD_INT 1
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33216: LD_ADDR_VAR 0 49
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 1
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: LD_INT 0
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: LD_INT 1
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 0
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 1
33274: NEG
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 1
33285: NEG
33286: PUSH
33287: LD_INT 1
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: LD_INT 1
33300: NEG
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 2
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 2
33328: PUSH
33329: LD_INT 2
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: LD_INT 2
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33360: LD_ADDR_VAR 0 50
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: LD_INT 1
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: LD_INT 1
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: LD_INT 1
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: NEG
33419: PUSH
33420: LD_INT 0
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: NEG
33430: PUSH
33431: LD_INT 1
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: LD_INT 2
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 0
33471: PUSH
33472: LD_INT 2
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: NEG
33482: PUSH
33483: LD_INT 1
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33504: LD_ADDR_VAR 0 51
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: LD_INT 0
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: LD_INT 1
33524: NEG
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: PUSH
33533: LD_INT 0
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: LD_INT 0
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: LD_INT 2
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: LD_INT 2
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 1
33605: NEG
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 2
33616: NEG
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 2
33627: NEG
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33651: LD_ADDR_VAR 0 52
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 0
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 1
33689: PUSH
33690: LD_INT 1
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: LD_INT 1
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: NEG
33710: PUSH
33711: LD_INT 0
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 1
33720: NEG
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: NEG
33733: PUSH
33734: LD_INT 2
33736: NEG
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: NEG
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 2
33755: NEG
33756: PUSH
33757: LD_INT 0
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 2
33766: NEG
33767: PUSH
33768: LD_INT 1
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 2
33778: NEG
33779: PUSH
33780: LD_INT 2
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33802: LD_ADDR_VAR 0 53
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 0
33819: PUSH
33820: LD_INT 1
33822: NEG
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 1
33830: PUSH
33831: LD_INT 0
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: LD_INT 1
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 0
33850: PUSH
33851: LD_INT 1
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: NEG
33861: PUSH
33862: LD_INT 0
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 1
33871: NEG
33872: PUSH
33873: LD_INT 1
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: LD_INT 2
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 2
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: LD_INT 1
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 2
33937: PUSH
33938: LD_INT 2
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: PUSH
33948: LD_INT 2
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: LD_INT 2
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 1
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: PUSH
33976: LD_INT 2
33978: NEG
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 2
33989: NEG
33990: PUSH
33991: LD_INT 1
33993: NEG
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 2
34001: NEG
34002: PUSH
34003: LD_INT 2
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34032: LD_ADDR_VAR 0 54
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: LD_INT 0
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: LD_INT 0
34049: PUSH
34050: LD_INT 1
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: LD_INT 0
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 1
34090: NEG
34091: PUSH
34092: LD_INT 0
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: LD_INT 2
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 0
34125: PUSH
34126: LD_INT 2
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 1
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 2
34147: PUSH
34148: LD_INT 0
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 2
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 2
34167: PUSH
34168: LD_INT 2
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: PUSH
34178: LD_INT 2
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: LD_INT 2
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: LD_INT 1
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: NEG
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34262: LD_ADDR_VAR 0 55
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 0
34279: PUSH
34280: LD_INT 1
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: LD_INT 0
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 0
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: LD_INT 0
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 1
34343: NEG
34344: PUSH
34345: LD_INT 2
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: LD_INT 2
34358: NEG
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 1
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: LD_INT 0
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: PUSH
34385: LD_INT 2
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 2
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: LD_INT 2
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 2
34438: NEG
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: NEG
34450: PUSH
34451: LD_INT 1
34453: NEG
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 2
34461: NEG
34462: PUSH
34463: LD_INT 2
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34492: LD_ADDR_VAR 0 56
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 0
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: NEG
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 1
34573: NEG
34574: PUSH
34575: LD_INT 2
34577: NEG
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: LD_INT 2
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 1
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 2
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 0
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 2
34668: NEG
34669: PUSH
34670: LD_INT 0
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 2
34679: NEG
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 2
34691: NEG
34692: PUSH
34693: LD_INT 2
34695: NEG
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34722: LD_ADDR_VAR 0 57
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 1
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: LD_INT 2
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: LD_INT 2
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: LD_INT 1
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 2
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 2
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 0
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 2
34898: NEG
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: LD_INT 1
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 2
34921: NEG
34922: PUSH
34923: LD_INT 2
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34952: LD_ADDR_VAR 0 58
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 0
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: LD_INT 1
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: LD_INT 1
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: NEG
35022: PUSH
35023: LD_INT 1
35025: NEG
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: LD_INT 2
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 0
35045: PUSH
35046: LD_INT 2
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 2
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: LD_INT 2
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 1
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 2
35128: NEG
35129: PUSH
35130: LD_INT 0
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: LD_INT 1
35143: NEG
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 2
35151: NEG
35152: PUSH
35153: LD_INT 2
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35182: LD_ADDR_VAR 0 59
35186: PUSH
35187: LD_INT 0
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 0
35199: PUSH
35200: LD_INT 1
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 0
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 1
35240: NEG
35241: PUSH
35242: LD_INT 0
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 1
35251: NEG
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35270: LD_ADDR_VAR 0 60
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: LD_INT 1
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 1
35343: NEG
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35358: LD_ADDR_VAR 0 61
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: LD_INT 0
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: LD_INT 1
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: LD_INT 0
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: LD_INT 1
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35446: LD_ADDR_VAR 0 62
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: LD_INT 1
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: LD_INT 1
35519: NEG
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35534: LD_ADDR_VAR 0 63
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: LD_INT 1
35554: NEG
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 1
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 1
35572: PUSH
35573: LD_INT 1
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: LD_INT 1
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 1
35592: NEG
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35622: LD_ADDR_VAR 0 64
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 0
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 1
35642: NEG
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 1
35691: NEG
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: ST_TO_ADDR
// end ; 1 :
35710: GO 41607
35712: LD_INT 1
35714: DOUBLE
35715: EQUAL
35716: IFTRUE 35720
35718: GO 38343
35720: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35721: LD_ADDR_VAR 0 11
35725: PUSH
35726: LD_INT 1
35728: NEG
35729: PUSH
35730: LD_INT 3
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: LD_INT 3
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: LD_INT 2
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35765: LD_ADDR_VAR 0 12
35769: PUSH
35770: LD_INT 2
35772: PUSH
35773: LD_INT 1
35775: NEG
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 3
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 3
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35806: LD_ADDR_VAR 0 13
35810: PUSH
35811: LD_INT 3
35813: PUSH
35814: LD_INT 2
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 3
35823: PUSH
35824: LD_INT 3
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: LD_INT 3
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35846: LD_ADDR_VAR 0 14
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: LD_INT 3
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 0
35863: PUSH
35864: LD_INT 3
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 1
35873: NEG
35874: PUSH
35875: LD_INT 2
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35887: LD_ADDR_VAR 0 15
35891: PUSH
35892: LD_INT 2
35894: NEG
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: PUSH
35903: LD_INT 3
35905: NEG
35906: PUSH
35907: LD_INT 0
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 3
35916: NEG
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: LIST
35930: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35931: LD_ADDR_VAR 0 16
35935: PUSH
35936: LD_INT 2
35938: NEG
35939: PUSH
35940: LD_INT 3
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 3
35950: NEG
35951: PUSH
35952: LD_INT 2
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 3
35962: NEG
35963: PUSH
35964: LD_INT 3
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: LIST
35976: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35977: LD_ADDR_VAR 0 17
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 3
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: LD_INT 3
35999: NEG
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 1
36007: PUSH
36008: LD_INT 2
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36021: LD_ADDR_VAR 0 18
36025: PUSH
36026: LD_INT 2
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 3
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 3
36049: PUSH
36050: LD_INT 1
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: LIST
36061: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36062: LD_ADDR_VAR 0 19
36066: PUSH
36067: LD_INT 3
36069: PUSH
36070: LD_INT 2
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 3
36079: PUSH
36080: LD_INT 3
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: PUSH
36090: LD_INT 3
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36102: LD_ADDR_VAR 0 20
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: LD_INT 3
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 0
36119: PUSH
36120: LD_INT 3
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: PUSH
36131: LD_INT 2
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: LIST
36142: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36143: LD_ADDR_VAR 0 21
36147: PUSH
36148: LD_INT 2
36150: NEG
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 3
36161: NEG
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 3
36172: NEG
36173: PUSH
36174: LD_INT 1
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36187: LD_ADDR_VAR 0 22
36191: PUSH
36192: LD_INT 2
36194: NEG
36195: PUSH
36196: LD_INT 3
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 3
36206: NEG
36207: PUSH
36208: LD_INT 2
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 3
36218: NEG
36219: PUSH
36220: LD_INT 3
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: LIST
36232: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36233: LD_ADDR_VAR 0 23
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: LD_INT 3
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: PUSH
36253: LD_INT 4
36255: NEG
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: LD_INT 3
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: LIST
36276: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36277: LD_ADDR_VAR 0 24
36281: PUSH
36282: LD_INT 3
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 3
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 4
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: LIST
36317: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36318: LD_ADDR_VAR 0 25
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: LD_INT 3
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 4
36335: PUSH
36336: LD_INT 3
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 3
36345: PUSH
36346: LD_INT 4
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: LIST
36357: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36358: LD_ADDR_VAR 0 26
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: LD_INT 3
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: PUSH
36376: LD_INT 4
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 1
36385: NEG
36386: PUSH
36387: LD_INT 3
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36399: LD_ADDR_VAR 0 27
36403: PUSH
36404: LD_INT 3
36406: NEG
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 3
36417: NEG
36418: PUSH
36419: LD_INT 1
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 4
36428: NEG
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: LIST
36442: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36443: LD_ADDR_VAR 0 28
36447: PUSH
36448: LD_INT 3
36450: NEG
36451: PUSH
36452: LD_INT 3
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 3
36462: NEG
36463: PUSH
36464: LD_INT 4
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 4
36474: NEG
36475: PUSH
36476: LD_INT 3
36478: NEG
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: LIST
36488: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36489: LD_ADDR_VAR 0 29
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: LD_INT 3
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: LD_INT 3
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: NEG
36531: PUSH
36532: LD_INT 4
36534: NEG
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 4
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 3
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: NEG
36565: PUSH
36566: LD_INT 5
36568: NEG
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: LD_INT 5
36579: NEG
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: LD_INT 4
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: LD_INT 6
36602: NEG
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: LD_INT 6
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: LD_INT 5
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36644: LD_ADDR_VAR 0 30
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: LD_INT 1
36654: NEG
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 3
36662: PUSH
36663: LD_INT 0
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 3
36672: PUSH
36673: LD_INT 1
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 3
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 4
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 4
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 4
36713: PUSH
36714: LD_INT 1
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 5
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 5
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 5
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 6
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 6
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36787: LD_ADDR_VAR 0 31
36791: PUSH
36792: LD_INT 3
36794: PUSH
36795: LD_INT 2
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 3
36804: PUSH
36805: LD_INT 3
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 2
36814: PUSH
36815: LD_INT 3
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 4
36824: PUSH
36825: LD_INT 3
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 4
36834: PUSH
36835: LD_INT 4
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 3
36844: PUSH
36845: LD_INT 4
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 5
36854: PUSH
36855: LD_INT 4
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 5
36864: PUSH
36865: LD_INT 5
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 4
36874: PUSH
36875: LD_INT 5
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 6
36884: PUSH
36885: LD_INT 5
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 6
36894: PUSH
36895: LD_INT 6
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 5
36904: PUSH
36905: LD_INT 6
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36926: LD_ADDR_VAR 0 32
36930: PUSH
36931: LD_INT 1
36933: PUSH
36934: LD_INT 3
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: LD_INT 3
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 1
36953: NEG
36954: PUSH
36955: LD_INT 2
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 1
36964: PUSH
36965: LD_INT 4
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: LD_INT 4
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: LD_INT 3
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: LD_INT 5
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: LD_INT 5
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 1
37015: NEG
37016: PUSH
37017: LD_INT 4
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: LD_INT 6
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 6
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: NEG
37047: PUSH
37048: LD_INT 5
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37069: LD_ADDR_VAR 0 33
37073: PUSH
37074: LD_INT 2
37076: NEG
37077: PUSH
37078: LD_INT 1
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 3
37087: NEG
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 3
37098: NEG
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 3
37110: NEG
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 4
37121: NEG
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 4
37132: NEG
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 4
37144: NEG
37145: PUSH
37146: LD_INT 1
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 5
37155: NEG
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 5
37166: NEG
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 5
37178: NEG
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 6
37189: NEG
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 6
37200: NEG
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37224: LD_ADDR_VAR 0 34
37228: PUSH
37229: LD_INT 2
37231: NEG
37232: PUSH
37233: LD_INT 3
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 3
37243: NEG
37244: PUSH
37245: LD_INT 2
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 3
37255: NEG
37256: PUSH
37257: LD_INT 3
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 3
37267: NEG
37268: PUSH
37269: LD_INT 4
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 4
37279: NEG
37280: PUSH
37281: LD_INT 3
37283: NEG
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 4
37291: NEG
37292: PUSH
37293: LD_INT 4
37295: NEG
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 4
37303: NEG
37304: PUSH
37305: LD_INT 5
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 5
37315: NEG
37316: PUSH
37317: LD_INT 4
37319: NEG
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 5
37327: NEG
37328: PUSH
37329: LD_INT 5
37331: NEG
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 5
37339: NEG
37340: PUSH
37341: LD_INT 6
37343: NEG
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 6
37351: NEG
37352: PUSH
37353: LD_INT 5
37355: NEG
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 6
37363: NEG
37364: PUSH
37365: LD_INT 6
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37387: LD_ADDR_VAR 0 41
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 2
37397: NEG
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: LD_INT 3
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: LD_INT 2
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37431: LD_ADDR_VAR 0 42
37435: PUSH
37436: LD_INT 2
37438: PUSH
37439: LD_INT 0
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 3
37459: PUSH
37460: LD_INT 1
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: LIST
37471: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37472: LD_ADDR_VAR 0 43
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: LD_INT 2
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 3
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 2
37499: PUSH
37500: LD_INT 3
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: LIST
37511: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37512: LD_ADDR_VAR 0 44
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: LD_INT 2
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: LD_INT 3
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 1
37539: NEG
37540: PUSH
37541: LD_INT 2
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37553: LD_ADDR_VAR 0 45
37557: PUSH
37558: LD_INT 2
37560: NEG
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 2
37571: NEG
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 3
37582: NEG
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: LIST
37596: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37597: LD_ADDR_VAR 0 46
37601: PUSH
37602: LD_INT 2
37604: NEG
37605: PUSH
37606: LD_INT 2
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 2
37616: NEG
37617: PUSH
37618: LD_INT 3
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 3
37628: NEG
37629: PUSH
37630: LD_INT 2
37632: NEG
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: LIST
37642: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37643: LD_ADDR_VAR 0 47
37647: PUSH
37648: LD_INT 2
37650: NEG
37651: PUSH
37652: LD_INT 3
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: LD_INT 3
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37676: LD_ADDR_VAR 0 48
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: LD_INT 2
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37707: LD_ADDR_VAR 0 49
37711: PUSH
37712: LD_INT 3
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 3
37724: PUSH
37725: LD_INT 2
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37736: LD_ADDR_VAR 0 50
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: LD_INT 3
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 1
37753: PUSH
37754: LD_INT 3
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37765: LD_ADDR_VAR 0 51
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: LD_INT 2
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 2
37783: NEG
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37796: LD_ADDR_VAR 0 52
37800: PUSH
37801: LD_INT 3
37803: NEG
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 3
37815: NEG
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37829: LD_ADDR_VAR 0 53
37833: PUSH
37834: LD_INT 1
37836: NEG
37837: PUSH
37838: LD_INT 3
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: LD_INT 3
37851: NEG
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: LD_INT 2
37862: NEG
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37873: LD_ADDR_VAR 0 54
37877: PUSH
37878: LD_INT 2
37880: PUSH
37881: LD_INT 1
37883: NEG
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 3
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 3
37901: PUSH
37902: LD_INT 1
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: LIST
37913: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37914: LD_ADDR_VAR 0 55
37918: PUSH
37919: LD_INT 3
37921: PUSH
37922: LD_INT 2
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 3
37931: PUSH
37932: LD_INT 3
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 2
37941: PUSH
37942: LD_INT 3
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37954: LD_ADDR_VAR 0 56
37958: PUSH
37959: LD_INT 1
37961: PUSH
37962: LD_INT 3
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 0
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: LD_INT 2
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37995: LD_ADDR_VAR 0 57
37999: PUSH
38000: LD_INT 2
38002: NEG
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 3
38013: NEG
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 3
38024: NEG
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: LIST
38038: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38039: LD_ADDR_VAR 0 58
38043: PUSH
38044: LD_INT 2
38046: NEG
38047: PUSH
38048: LD_INT 3
38050: NEG
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: LD_INT 3
38058: NEG
38059: PUSH
38060: LD_INT 2
38062: NEG
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 3
38070: NEG
38071: PUSH
38072: LD_INT 3
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38085: LD_ADDR_VAR 0 59
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: LD_INT 2
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: LIST
38128: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38129: LD_ADDR_VAR 0 60
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: LD_INT 1
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 2
38147: PUSH
38148: LD_INT 0
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 2
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38170: LD_ADDR_VAR 0 61
38174: PUSH
38175: LD_INT 2
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 2
38187: PUSH
38188: LD_INT 2
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: PUSH
38198: LD_INT 2
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38210: LD_ADDR_VAR 0 62
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: LD_INT 2
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 2
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: LIST
38250: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38251: LD_ADDR_VAR 0 63
38255: PUSH
38256: LD_INT 1
38258: NEG
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 2
38269: NEG
38270: PUSH
38271: LD_INT 0
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 2
38280: NEG
38281: PUSH
38282: LD_INT 1
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38295: LD_ADDR_VAR 0 64
38299: PUSH
38300: LD_INT 1
38302: NEG
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 2
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: ST_TO_ADDR
// end ; 2 :
38341: GO 41607
38343: LD_INT 2
38345: DOUBLE
38346: EQUAL
38347: IFTRUE 38351
38349: GO 41606
38351: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38352: LD_ADDR_VAR 0 29
38356: PUSH
38357: LD_INT 4
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 4
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 5
38380: PUSH
38381: LD_INT 0
38383: PUSH
38384: EMPTY
38385: LIST
38386: LIST
38387: PUSH
38388: LD_INT 5
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 4
38400: PUSH
38401: LD_INT 1
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 3
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 3
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 3
38431: PUSH
38432: LD_INT 2
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 5
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 3
38452: PUSH
38453: LD_INT 3
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 3
38462: PUSH
38463: LD_INT 2
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 4
38472: PUSH
38473: LD_INT 3
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 4
38482: PUSH
38483: LD_INT 4
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 3
38492: PUSH
38493: LD_INT 4
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: LD_INT 3
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 2
38512: PUSH
38513: LD_INT 2
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 4
38522: PUSH
38523: LD_INT 2
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: PUSH
38533: LD_INT 4
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 0
38542: PUSH
38543: LD_INT 4
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: LD_INT 3
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 1
38562: PUSH
38563: LD_INT 4
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 5
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 5
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: NEG
38593: PUSH
38594: LD_INT 4
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 1
38603: NEG
38604: PUSH
38605: LD_INT 3
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 2
38614: PUSH
38615: LD_INT 5
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 2
38624: NEG
38625: PUSH
38626: LD_INT 3
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 3
38635: NEG
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 3
38646: NEG
38647: PUSH
38648: LD_INT 1
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 2
38658: NEG
38659: PUSH
38660: LD_INT 0
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: NEG
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 3
38680: NEG
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 4
38691: NEG
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 4
38702: NEG
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 4
38714: NEG
38715: PUSH
38716: LD_INT 2
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 2
38726: NEG
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 4
38737: NEG
38738: PUSH
38739: LD_INT 4
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 4
38749: NEG
38750: PUSH
38751: LD_INT 5
38753: NEG
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 3
38761: NEG
38762: PUSH
38763: LD_INT 4
38765: NEG
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 3
38773: NEG
38774: PUSH
38775: LD_INT 3
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 4
38785: NEG
38786: PUSH
38787: LD_INT 3
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 5
38797: NEG
38798: PUSH
38799: LD_INT 4
38801: NEG
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 5
38809: NEG
38810: PUSH
38811: LD_INT 5
38813: NEG
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 3
38821: NEG
38822: PUSH
38823: LD_INT 5
38825: NEG
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 5
38833: NEG
38834: PUSH
38835: LD_INT 3
38837: NEG
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38890: LD_ADDR_VAR 0 30
38894: PUSH
38895: LD_INT 4
38897: PUSH
38898: LD_INT 4
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 4
38907: PUSH
38908: LD_INT 3
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 5
38917: PUSH
38918: LD_INT 4
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 5
38927: PUSH
38928: LD_INT 5
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 4
38937: PUSH
38938: LD_INT 5
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 3
38947: PUSH
38948: LD_INT 4
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 3
38957: PUSH
38958: LD_INT 3
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 5
38967: PUSH
38968: LD_INT 3
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 3
38977: PUSH
38978: LD_INT 5
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: LD_INT 3
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 2
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: LD_INT 3
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: LD_INT 4
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: LD_INT 4
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: LD_INT 3
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: NEG
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: LD_INT 4
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 2
39069: NEG
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 4
39080: NEG
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 4
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 3
39103: NEG
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 3
39114: NEG
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 4
39125: NEG
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 5
39136: NEG
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 5
39147: NEG
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 5
39159: NEG
39160: PUSH
39161: LD_INT 2
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 3
39171: NEG
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 3
39182: NEG
39183: PUSH
39184: LD_INT 3
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 3
39194: NEG
39195: PUSH
39196: LD_INT 4
39198: NEG
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: LD_INT 3
39210: NEG
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 3
39230: NEG
39231: PUSH
39232: LD_INT 2
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 4
39242: NEG
39243: PUSH
39244: LD_INT 3
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 4
39254: NEG
39255: PUSH
39256: LD_INT 4
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 2
39266: NEG
39267: PUSH
39268: LD_INT 4
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 4
39278: NEG
39279: PUSH
39280: LD_INT 2
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 4
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: LD_INT 5
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: LD_INT 4
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: PUSH
39324: LD_INT 3
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 3
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: LD_INT 4
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: LD_INT 5
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: LD_INT 3
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: LD_INT 5
39384: NEG
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39437: LD_ADDR_VAR 0 31
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 4
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: LD_INT 3
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: LD_INT 4
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: LD_INT 5
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: LD_INT 5
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: LD_INT 4
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: LD_INT 3
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 2
39516: PUSH
39517: LD_INT 5
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: LD_INT 3
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 3
39537: NEG
39538: PUSH
39539: LD_INT 0
39541: PUSH
39542: EMPTY
39543: LIST
39544: LIST
39545: PUSH
39546: LD_INT 3
39548: NEG
39549: PUSH
39550: LD_INT 1
39552: NEG
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 2
39571: NEG
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 3
39582: NEG
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PUSH
39591: LD_INT 4
39593: NEG
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 4
39604: NEG
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 4
39616: NEG
39617: PUSH
39618: LD_INT 2
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: NEG
39629: PUSH
39630: LD_INT 2
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 4
39639: NEG
39640: PUSH
39641: LD_INT 4
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 4
39651: NEG
39652: PUSH
39653: LD_INT 5
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 3
39663: NEG
39664: PUSH
39665: LD_INT 4
39667: NEG
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 3
39675: NEG
39676: PUSH
39677: LD_INT 3
39679: NEG
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 4
39687: NEG
39688: PUSH
39689: LD_INT 3
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 5
39699: NEG
39700: PUSH
39701: LD_INT 4
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 5
39711: NEG
39712: PUSH
39713: LD_INT 5
39715: NEG
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 3
39723: NEG
39724: PUSH
39725: LD_INT 5
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 5
39735: NEG
39736: PUSH
39737: LD_INT 3
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: LD_INT 3
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 4
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: LD_INT 3
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: NEG
39803: PUSH
39804: LD_INT 3
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: LD_INT 4
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 2
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: NEG
39838: PUSH
39839: LD_INT 4
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 4
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 4
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 5
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 5
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 4
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 3
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 3
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 3
39921: PUSH
39922: LD_INT 2
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 5
39932: PUSH
39933: LD_INT 2
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39987: LD_ADDR_VAR 0 32
39991: PUSH
39992: LD_INT 4
39994: NEG
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 4
40005: NEG
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 3
40017: NEG
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 3
40028: NEG
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 4
40039: NEG
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 5
40050: NEG
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 5
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 5
40073: NEG
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 3
40085: NEG
40086: PUSH
40087: LD_INT 2
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 3
40096: NEG
40097: PUSH
40098: LD_INT 3
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 3
40108: NEG
40109: PUSH
40110: LD_INT 4
40112: NEG
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 2
40120: NEG
40121: PUSH
40122: LD_INT 3
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 2
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 3
40144: NEG
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 4
40156: NEG
40157: PUSH
40158: LD_INT 3
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 4
40168: NEG
40169: PUSH
40170: LD_INT 4
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: LD_INT 4
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 4
40192: NEG
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 0
40204: PUSH
40205: LD_INT 4
40207: NEG
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 5
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: PUSH
40227: LD_INT 4
40229: NEG
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: LD_INT 3
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: LD_INT 3
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: LD_INT 4
40263: NEG
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: LD_INT 5
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 3
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 2
40294: NEG
40295: PUSH
40296: LD_INT 5
40298: NEG
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 3
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 3
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 4
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 4
40337: PUSH
40338: LD_INT 1
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 3
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 2
40378: PUSH
40379: LD_INT 2
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 4
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 4
40399: PUSH
40400: LD_INT 4
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 4
40409: PUSH
40410: LD_INT 3
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 5
40419: PUSH
40420: LD_INT 4
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 5
40429: PUSH
40430: LD_INT 5
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 4
40439: PUSH
40440: LD_INT 5
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 3
40449: PUSH
40450: LD_INT 4
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 3
40459: PUSH
40460: LD_INT 3
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 5
40469: PUSH
40470: LD_INT 3
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 3
40479: PUSH
40480: LD_INT 5
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40534: LD_ADDR_VAR 0 33
40538: PUSH
40539: LD_INT 4
40541: NEG
40542: PUSH
40543: LD_INT 4
40545: NEG
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 4
40553: NEG
40554: PUSH
40555: LD_INT 5
40557: NEG
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 3
40565: NEG
40566: PUSH
40567: LD_INT 4
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 3
40577: NEG
40578: PUSH
40579: LD_INT 3
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 4
40589: NEG
40590: PUSH
40591: LD_INT 3
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 5
40601: NEG
40602: PUSH
40603: LD_INT 4
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 5
40613: NEG
40614: PUSH
40615: LD_INT 5
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 3
40625: NEG
40626: PUSH
40627: LD_INT 5
40629: NEG
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 5
40637: NEG
40638: PUSH
40639: LD_INT 3
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 3
40652: NEG
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: LD_INT 4
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 3
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 2
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: LD_INT 2
40696: NEG
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: LD_INT 3
40708: NEG
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: LD_INT 4
40720: NEG
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 2
40728: PUSH
40729: LD_INT 2
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: LD_INT 4
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 4
40751: PUSH
40752: LD_INT 0
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 4
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 5
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 5
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 4
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 3
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: LD_INT 3
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 3
40823: PUSH
40824: LD_INT 2
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 5
40834: PUSH
40835: LD_INT 2
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 3
40844: PUSH
40845: LD_INT 3
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 3
40854: PUSH
40855: LD_INT 2
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 4
40864: PUSH
40865: LD_INT 3
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 4
40874: PUSH
40875: LD_INT 4
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 3
40884: PUSH
40885: LD_INT 4
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: PUSH
40895: LD_INT 3
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: LD_INT 2
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: LD_INT 4
40914: PUSH
40915: LD_INT 2
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: PUSH
40925: LD_INT 4
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: LD_INT 4
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: LD_INT 3
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: LD_INT 4
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: LD_INT 5
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: LD_INT 5
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: LD_INT 4
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: LD_INT 3
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: LD_INT 5
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: LD_INT 3
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41072: LD_ADDR_VAR 0 34
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 4
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 0
41090: PUSH
41091: LD_INT 5
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 4
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 3
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 3
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: LD_INT 4
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: LD_INT 5
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 2
41158: PUSH
41159: LD_INT 3
41161: NEG
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 2
41169: NEG
41170: PUSH
41171: LD_INT 5
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 3
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 3
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 4
41202: PUSH
41203: LD_INT 0
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 4
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 3
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 2
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: LD_INT 2
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 4
41264: PUSH
41265: LD_INT 2
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 4
41274: PUSH
41275: LD_INT 4
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 4
41284: PUSH
41285: LD_INT 3
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 5
41294: PUSH
41295: LD_INT 4
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 5
41304: PUSH
41305: LD_INT 5
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 4
41314: PUSH
41315: LD_INT 5
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 3
41324: PUSH
41325: LD_INT 4
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 3
41334: PUSH
41335: LD_INT 3
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 5
41344: PUSH
41345: LD_INT 3
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 3
41354: PUSH
41355: LD_INT 5
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 0
41364: PUSH
41365: LD_INT 3
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: LD_INT 2
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: LD_INT 3
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: LD_INT 4
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 4
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: LD_INT 3
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 2
41436: PUSH
41437: LD_INT 4
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 2
41446: NEG
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 4
41457: NEG
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 4
41468: NEG
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 3
41480: NEG
41481: PUSH
41482: LD_INT 0
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 3
41491: NEG
41492: PUSH
41493: LD_INT 1
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 4
41502: NEG
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 5
41513: NEG
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 5
41524: NEG
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 5
41536: NEG
41537: PUSH
41538: LD_INT 2
41540: NEG
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 3
41548: NEG
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: ST_TO_ADDR
// end ; end ;
41604: GO 41607
41606: POP
// case btype of b_depot , b_warehouse :
41607: LD_VAR 0 1
41611: PUSH
41612: LD_INT 0
41614: DOUBLE
41615: EQUAL
41616: IFTRUE 41626
41618: LD_INT 1
41620: DOUBLE
41621: EQUAL
41622: IFTRUE 41626
41624: GO 41827
41626: POP
// case nation of nation_american :
41627: LD_VAR 0 5
41631: PUSH
41632: LD_INT 1
41634: DOUBLE
41635: EQUAL
41636: IFTRUE 41640
41638: GO 41696
41640: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41641: LD_ADDR_VAR 0 9
41645: PUSH
41646: LD_VAR 0 11
41650: PUSH
41651: LD_VAR 0 12
41655: PUSH
41656: LD_VAR 0 13
41660: PUSH
41661: LD_VAR 0 14
41665: PUSH
41666: LD_VAR 0 15
41670: PUSH
41671: LD_VAR 0 16
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: PUSH
41684: LD_VAR 0 4
41688: PUSH
41689: LD_INT 1
41691: PLUS
41692: ARRAY
41693: ST_TO_ADDR
41694: GO 41825
41696: LD_INT 2
41698: DOUBLE
41699: EQUAL
41700: IFTRUE 41704
41702: GO 41760
41704: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41705: LD_ADDR_VAR 0 9
41709: PUSH
41710: LD_VAR 0 17
41714: PUSH
41715: LD_VAR 0 18
41719: PUSH
41720: LD_VAR 0 19
41724: PUSH
41725: LD_VAR 0 20
41729: PUSH
41730: LD_VAR 0 21
41734: PUSH
41735: LD_VAR 0 22
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: PUSH
41748: LD_VAR 0 4
41752: PUSH
41753: LD_INT 1
41755: PLUS
41756: ARRAY
41757: ST_TO_ADDR
41758: GO 41825
41760: LD_INT 3
41762: DOUBLE
41763: EQUAL
41764: IFTRUE 41768
41766: GO 41824
41768: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41769: LD_ADDR_VAR 0 9
41773: PUSH
41774: LD_VAR 0 23
41778: PUSH
41779: LD_VAR 0 24
41783: PUSH
41784: LD_VAR 0 25
41788: PUSH
41789: LD_VAR 0 26
41793: PUSH
41794: LD_VAR 0 27
41798: PUSH
41799: LD_VAR 0 28
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: PUSH
41812: LD_VAR 0 4
41816: PUSH
41817: LD_INT 1
41819: PLUS
41820: ARRAY
41821: ST_TO_ADDR
41822: GO 41825
41824: POP
41825: GO 42380
41827: LD_INT 2
41829: DOUBLE
41830: EQUAL
41831: IFTRUE 41841
41833: LD_INT 3
41835: DOUBLE
41836: EQUAL
41837: IFTRUE 41841
41839: GO 41897
41841: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41842: LD_ADDR_VAR 0 9
41846: PUSH
41847: LD_VAR 0 29
41851: PUSH
41852: LD_VAR 0 30
41856: PUSH
41857: LD_VAR 0 31
41861: PUSH
41862: LD_VAR 0 32
41866: PUSH
41867: LD_VAR 0 33
41871: PUSH
41872: LD_VAR 0 34
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: PUSH
41885: LD_VAR 0 4
41889: PUSH
41890: LD_INT 1
41892: PLUS
41893: ARRAY
41894: ST_TO_ADDR
41895: GO 42380
41897: LD_INT 16
41899: DOUBLE
41900: EQUAL
41901: IFTRUE 41959
41903: LD_INT 17
41905: DOUBLE
41906: EQUAL
41907: IFTRUE 41959
41909: LD_INT 18
41911: DOUBLE
41912: EQUAL
41913: IFTRUE 41959
41915: LD_INT 19
41917: DOUBLE
41918: EQUAL
41919: IFTRUE 41959
41921: LD_INT 22
41923: DOUBLE
41924: EQUAL
41925: IFTRUE 41959
41927: LD_INT 20
41929: DOUBLE
41930: EQUAL
41931: IFTRUE 41959
41933: LD_INT 21
41935: DOUBLE
41936: EQUAL
41937: IFTRUE 41959
41939: LD_INT 23
41941: DOUBLE
41942: EQUAL
41943: IFTRUE 41959
41945: LD_INT 24
41947: DOUBLE
41948: EQUAL
41949: IFTRUE 41959
41951: LD_INT 25
41953: DOUBLE
41954: EQUAL
41955: IFTRUE 41959
41957: GO 42015
41959: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41960: LD_ADDR_VAR 0 9
41964: PUSH
41965: LD_VAR 0 35
41969: PUSH
41970: LD_VAR 0 36
41974: PUSH
41975: LD_VAR 0 37
41979: PUSH
41980: LD_VAR 0 38
41984: PUSH
41985: LD_VAR 0 39
41989: PUSH
41990: LD_VAR 0 40
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: PUSH
42003: LD_VAR 0 4
42007: PUSH
42008: LD_INT 1
42010: PLUS
42011: ARRAY
42012: ST_TO_ADDR
42013: GO 42380
42015: LD_INT 6
42017: DOUBLE
42018: EQUAL
42019: IFTRUE 42071
42021: LD_INT 7
42023: DOUBLE
42024: EQUAL
42025: IFTRUE 42071
42027: LD_INT 8
42029: DOUBLE
42030: EQUAL
42031: IFTRUE 42071
42033: LD_INT 13
42035: DOUBLE
42036: EQUAL
42037: IFTRUE 42071
42039: LD_INT 12
42041: DOUBLE
42042: EQUAL
42043: IFTRUE 42071
42045: LD_INT 15
42047: DOUBLE
42048: EQUAL
42049: IFTRUE 42071
42051: LD_INT 11
42053: DOUBLE
42054: EQUAL
42055: IFTRUE 42071
42057: LD_INT 14
42059: DOUBLE
42060: EQUAL
42061: IFTRUE 42071
42063: LD_INT 10
42065: DOUBLE
42066: EQUAL
42067: IFTRUE 42071
42069: GO 42127
42071: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42072: LD_ADDR_VAR 0 9
42076: PUSH
42077: LD_VAR 0 41
42081: PUSH
42082: LD_VAR 0 42
42086: PUSH
42087: LD_VAR 0 43
42091: PUSH
42092: LD_VAR 0 44
42096: PUSH
42097: LD_VAR 0 45
42101: PUSH
42102: LD_VAR 0 46
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: PUSH
42115: LD_VAR 0 4
42119: PUSH
42120: LD_INT 1
42122: PLUS
42123: ARRAY
42124: ST_TO_ADDR
42125: GO 42380
42127: LD_INT 36
42129: DOUBLE
42130: EQUAL
42131: IFTRUE 42135
42133: GO 42191
42135: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42136: LD_ADDR_VAR 0 9
42140: PUSH
42141: LD_VAR 0 47
42145: PUSH
42146: LD_VAR 0 48
42150: PUSH
42151: LD_VAR 0 49
42155: PUSH
42156: LD_VAR 0 50
42160: PUSH
42161: LD_VAR 0 51
42165: PUSH
42166: LD_VAR 0 52
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: PUSH
42179: LD_VAR 0 4
42183: PUSH
42184: LD_INT 1
42186: PLUS
42187: ARRAY
42188: ST_TO_ADDR
42189: GO 42380
42191: LD_INT 4
42193: DOUBLE
42194: EQUAL
42195: IFTRUE 42217
42197: LD_INT 5
42199: DOUBLE
42200: EQUAL
42201: IFTRUE 42217
42203: LD_INT 34
42205: DOUBLE
42206: EQUAL
42207: IFTRUE 42217
42209: LD_INT 37
42211: DOUBLE
42212: EQUAL
42213: IFTRUE 42217
42215: GO 42273
42217: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42218: LD_ADDR_VAR 0 9
42222: PUSH
42223: LD_VAR 0 53
42227: PUSH
42228: LD_VAR 0 54
42232: PUSH
42233: LD_VAR 0 55
42237: PUSH
42238: LD_VAR 0 56
42242: PUSH
42243: LD_VAR 0 57
42247: PUSH
42248: LD_VAR 0 58
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: PUSH
42261: LD_VAR 0 4
42265: PUSH
42266: LD_INT 1
42268: PLUS
42269: ARRAY
42270: ST_TO_ADDR
42271: GO 42380
42273: LD_INT 31
42275: DOUBLE
42276: EQUAL
42277: IFTRUE 42323
42279: LD_INT 32
42281: DOUBLE
42282: EQUAL
42283: IFTRUE 42323
42285: LD_INT 33
42287: DOUBLE
42288: EQUAL
42289: IFTRUE 42323
42291: LD_INT 27
42293: DOUBLE
42294: EQUAL
42295: IFTRUE 42323
42297: LD_INT 26
42299: DOUBLE
42300: EQUAL
42301: IFTRUE 42323
42303: LD_INT 28
42305: DOUBLE
42306: EQUAL
42307: IFTRUE 42323
42309: LD_INT 29
42311: DOUBLE
42312: EQUAL
42313: IFTRUE 42323
42315: LD_INT 30
42317: DOUBLE
42318: EQUAL
42319: IFTRUE 42323
42321: GO 42379
42323: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42324: LD_ADDR_VAR 0 9
42328: PUSH
42329: LD_VAR 0 59
42333: PUSH
42334: LD_VAR 0 60
42338: PUSH
42339: LD_VAR 0 61
42343: PUSH
42344: LD_VAR 0 62
42348: PUSH
42349: LD_VAR 0 63
42353: PUSH
42354: LD_VAR 0 64
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: PUSH
42367: LD_VAR 0 4
42371: PUSH
42372: LD_INT 1
42374: PLUS
42375: ARRAY
42376: ST_TO_ADDR
42377: GO 42380
42379: POP
// temp_list2 = [ ] ;
42380: LD_ADDR_VAR 0 10
42384: PUSH
42385: EMPTY
42386: ST_TO_ADDR
// for i in temp_list do
42387: LD_ADDR_VAR 0 8
42391: PUSH
42392: LD_VAR 0 9
42396: PUSH
42397: FOR_IN
42398: IFFALSE 42450
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42400: LD_ADDR_VAR 0 10
42404: PUSH
42405: LD_VAR 0 10
42409: PUSH
42410: LD_VAR 0 8
42414: PUSH
42415: LD_INT 1
42417: ARRAY
42418: PUSH
42419: LD_VAR 0 2
42423: PLUS
42424: PUSH
42425: LD_VAR 0 8
42429: PUSH
42430: LD_INT 2
42432: ARRAY
42433: PUSH
42434: LD_VAR 0 3
42438: PLUS
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: EMPTY
42445: LIST
42446: ADD
42447: ST_TO_ADDR
42448: GO 42397
42450: POP
42451: POP
// result = temp_list2 ;
42452: LD_ADDR_VAR 0 7
42456: PUSH
42457: LD_VAR 0 10
42461: ST_TO_ADDR
// end ;
42462: LD_VAR 0 7
42466: RET
// export function EnemyInRange ( unit , dist ) ; begin
42467: LD_INT 0
42469: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42470: LD_ADDR_VAR 0 3
42474: PUSH
42475: LD_VAR 0 1
42479: PPUSH
42480: CALL_OW 255
42484: PPUSH
42485: LD_VAR 0 1
42489: PPUSH
42490: CALL_OW 250
42494: PPUSH
42495: LD_VAR 0 1
42499: PPUSH
42500: CALL_OW 251
42504: PPUSH
42505: LD_VAR 0 2
42509: PPUSH
42510: CALL 15863 0 4
42514: PUSH
42515: LD_INT 4
42517: ARRAY
42518: ST_TO_ADDR
// end ;
42519: LD_VAR 0 3
42523: RET
// export function PlayerSeeMe ( unit ) ; begin
42524: LD_INT 0
42526: PPUSH
// result := See ( your_side , unit ) ;
42527: LD_ADDR_VAR 0 2
42531: PUSH
42532: LD_OWVAR 2
42536: PPUSH
42537: LD_VAR 0 1
42541: PPUSH
42542: CALL_OW 292
42546: ST_TO_ADDR
// end ;
42547: LD_VAR 0 2
42551: RET
// export function ReverseDir ( unit ) ; begin
42552: LD_INT 0
42554: PPUSH
// if not unit then
42555: LD_VAR 0 1
42559: NOT
42560: IFFALSE 42564
// exit ;
42562: GO 42587
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42564: LD_ADDR_VAR 0 2
42568: PUSH
42569: LD_VAR 0 1
42573: PPUSH
42574: CALL_OW 254
42578: PUSH
42579: LD_INT 3
42581: PLUS
42582: PUSH
42583: LD_INT 6
42585: MOD
42586: ST_TO_ADDR
// end ;
42587: LD_VAR 0 2
42591: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
42592: LD_INT 0
42594: PPUSH
42595: PPUSH
42596: PPUSH
42597: PPUSH
42598: PPUSH
// if not hexes then
42599: LD_VAR 0 2
42603: NOT
42604: IFFALSE 42608
// exit ;
42606: GO 42756
// dist := 9999 ;
42608: LD_ADDR_VAR 0 5
42612: PUSH
42613: LD_INT 9999
42615: ST_TO_ADDR
// for i = 1 to hexes do
42616: LD_ADDR_VAR 0 4
42620: PUSH
42621: DOUBLE
42622: LD_INT 1
42624: DEC
42625: ST_TO_ADDR
42626: LD_VAR 0 2
42630: PUSH
42631: FOR_TO
42632: IFFALSE 42744
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
42634: LD_VAR 0 1
42638: PPUSH
42639: LD_VAR 0 2
42643: PUSH
42644: LD_VAR 0 4
42648: ARRAY
42649: PUSH
42650: LD_INT 1
42652: ARRAY
42653: PPUSH
42654: LD_VAR 0 2
42658: PUSH
42659: LD_VAR 0 4
42663: ARRAY
42664: PUSH
42665: LD_INT 2
42667: ARRAY
42668: PPUSH
42669: CALL_OW 297
42673: PUSH
42674: LD_VAR 0 5
42678: LESS
42679: IFFALSE 42742
// begin hex := hexes [ i ] ;
42681: LD_ADDR_VAR 0 7
42685: PUSH
42686: LD_VAR 0 2
42690: PUSH
42691: LD_VAR 0 4
42695: ARRAY
42696: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42697: LD_ADDR_VAR 0 5
42701: PUSH
42702: LD_VAR 0 1
42706: PPUSH
42707: LD_VAR 0 2
42711: PUSH
42712: LD_VAR 0 4
42716: ARRAY
42717: PUSH
42718: LD_INT 1
42720: ARRAY
42721: PPUSH
42722: LD_VAR 0 2
42726: PUSH
42727: LD_VAR 0 4
42731: ARRAY
42732: PUSH
42733: LD_INT 2
42735: ARRAY
42736: PPUSH
42737: CALL_OW 297
42741: ST_TO_ADDR
// end ; end ;
42742: GO 42631
42744: POP
42745: POP
// result := hex ;
42746: LD_ADDR_VAR 0 3
42750: PUSH
42751: LD_VAR 0 7
42755: ST_TO_ADDR
// end ;
42756: LD_VAR 0 3
42760: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42761: LD_INT 0
42763: PPUSH
42764: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42765: LD_VAR 0 1
42769: NOT
42770: PUSH
42771: LD_VAR 0 1
42775: PUSH
42776: LD_INT 21
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 23
42788: PUSH
42789: LD_INT 2
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PPUSH
42800: CALL_OW 69
42804: IN
42805: NOT
42806: OR
42807: IFFALSE 42811
// exit ;
42809: GO 42858
// for i = 1 to 3 do
42811: LD_ADDR_VAR 0 3
42815: PUSH
42816: DOUBLE
42817: LD_INT 1
42819: DEC
42820: ST_TO_ADDR
42821: LD_INT 3
42823: PUSH
42824: FOR_TO
42825: IFFALSE 42856
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42827: LD_VAR 0 1
42831: PPUSH
42832: CALL_OW 250
42836: PPUSH
42837: LD_VAR 0 1
42841: PPUSH
42842: CALL_OW 251
42846: PPUSH
42847: LD_INT 1
42849: PPUSH
42850: CALL_OW 453
42854: GO 42824
42856: POP
42857: POP
// end ;
42858: LD_VAR 0 2
42862: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42863: LD_INT 0
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
42869: PPUSH
42870: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
42871: LD_VAR 0 1
42875: NOT
42876: PUSH
42877: LD_VAR 0 2
42881: NOT
42882: OR
42883: PUSH
42884: LD_VAR 0 1
42888: PPUSH
42889: CALL_OW 314
42893: OR
42894: IFFALSE 42898
// exit ;
42896: GO 43339
// x := GetX ( enemy_unit ) ;
42898: LD_ADDR_VAR 0 7
42902: PUSH
42903: LD_VAR 0 2
42907: PPUSH
42908: CALL_OW 250
42912: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42913: LD_ADDR_VAR 0 8
42917: PUSH
42918: LD_VAR 0 2
42922: PPUSH
42923: CALL_OW 251
42927: ST_TO_ADDR
// if not x or not y then
42928: LD_VAR 0 7
42932: NOT
42933: PUSH
42934: LD_VAR 0 8
42938: NOT
42939: OR
42940: IFFALSE 42944
// exit ;
42942: GO 43339
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42944: LD_ADDR_VAR 0 6
42948: PUSH
42949: LD_VAR 0 7
42953: PPUSH
42954: LD_INT 0
42956: PPUSH
42957: LD_INT 4
42959: PPUSH
42960: CALL_OW 272
42964: PUSH
42965: LD_VAR 0 8
42969: PPUSH
42970: LD_INT 0
42972: PPUSH
42973: LD_INT 4
42975: PPUSH
42976: CALL_OW 273
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_VAR 0 7
42989: PPUSH
42990: LD_INT 1
42992: PPUSH
42993: LD_INT 4
42995: PPUSH
42996: CALL_OW 272
43000: PUSH
43001: LD_VAR 0 8
43005: PPUSH
43006: LD_INT 1
43008: PPUSH
43009: LD_INT 4
43011: PPUSH
43012: CALL_OW 273
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_VAR 0 7
43025: PPUSH
43026: LD_INT 2
43028: PPUSH
43029: LD_INT 4
43031: PPUSH
43032: CALL_OW 272
43036: PUSH
43037: LD_VAR 0 8
43041: PPUSH
43042: LD_INT 2
43044: PPUSH
43045: LD_INT 4
43047: PPUSH
43048: CALL_OW 273
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_VAR 0 7
43061: PPUSH
43062: LD_INT 3
43064: PPUSH
43065: LD_INT 4
43067: PPUSH
43068: CALL_OW 272
43072: PUSH
43073: LD_VAR 0 8
43077: PPUSH
43078: LD_INT 3
43080: PPUSH
43081: LD_INT 4
43083: PPUSH
43084: CALL_OW 273
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_VAR 0 7
43097: PPUSH
43098: LD_INT 4
43100: PPUSH
43101: LD_INT 4
43103: PPUSH
43104: CALL_OW 272
43108: PUSH
43109: LD_VAR 0 8
43113: PPUSH
43114: LD_INT 4
43116: PPUSH
43117: LD_INT 4
43119: PPUSH
43120: CALL_OW 273
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_VAR 0 7
43133: PPUSH
43134: LD_INT 5
43136: PPUSH
43137: LD_INT 4
43139: PPUSH
43140: CALL_OW 272
43144: PUSH
43145: LD_VAR 0 8
43149: PPUSH
43150: LD_INT 5
43152: PPUSH
43153: LD_INT 4
43155: PPUSH
43156: CALL_OW 273
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: ST_TO_ADDR
// for i = tmp downto 1 do
43173: LD_ADDR_VAR 0 4
43177: PUSH
43178: DOUBLE
43179: LD_VAR 0 6
43183: INC
43184: ST_TO_ADDR
43185: LD_INT 1
43187: PUSH
43188: FOR_DOWNTO
43189: IFFALSE 43290
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43191: LD_VAR 0 6
43195: PUSH
43196: LD_VAR 0 4
43200: ARRAY
43201: PUSH
43202: LD_INT 1
43204: ARRAY
43205: PPUSH
43206: LD_VAR 0 6
43210: PUSH
43211: LD_VAR 0 4
43215: ARRAY
43216: PUSH
43217: LD_INT 2
43219: ARRAY
43220: PPUSH
43221: CALL_OW 488
43225: NOT
43226: PUSH
43227: LD_VAR 0 6
43231: PUSH
43232: LD_VAR 0 4
43236: ARRAY
43237: PUSH
43238: LD_INT 1
43240: ARRAY
43241: PPUSH
43242: LD_VAR 0 6
43246: PUSH
43247: LD_VAR 0 4
43251: ARRAY
43252: PUSH
43253: LD_INT 2
43255: ARRAY
43256: PPUSH
43257: CALL_OW 428
43261: PUSH
43262: LD_INT 0
43264: NONEQUAL
43265: OR
43266: IFFALSE 43288
// tmp := Delete ( tmp , i ) ;
43268: LD_ADDR_VAR 0 6
43272: PUSH
43273: LD_VAR 0 6
43277: PPUSH
43278: LD_VAR 0 4
43282: PPUSH
43283: CALL_OW 3
43287: ST_TO_ADDR
43288: GO 43188
43290: POP
43291: POP
// j := GetClosestHex ( unit , tmp ) ;
43292: LD_ADDR_VAR 0 5
43296: PUSH
43297: LD_VAR 0 1
43301: PPUSH
43302: LD_VAR 0 6
43306: PPUSH
43307: CALL 42592 0 2
43311: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43312: LD_VAR 0 1
43316: PPUSH
43317: LD_VAR 0 5
43321: PUSH
43322: LD_INT 1
43324: ARRAY
43325: PPUSH
43326: LD_VAR 0 5
43330: PUSH
43331: LD_INT 2
43333: ARRAY
43334: PPUSH
43335: CALL_OW 111
// end ;
43339: LD_VAR 0 3
43343: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43344: LD_INT 0
43346: PPUSH
43347: PPUSH
43348: PPUSH
// uc_side = 0 ;
43349: LD_ADDR_OWVAR 20
43353: PUSH
43354: LD_INT 0
43356: ST_TO_ADDR
// uc_nation = 0 ;
43357: LD_ADDR_OWVAR 21
43361: PUSH
43362: LD_INT 0
43364: ST_TO_ADDR
// InitHc_All ( ) ;
43365: CALL_OW 584
// InitVc ;
43369: CALL_OW 20
// if mastodonts then
43373: LD_VAR 0 6
43377: IFFALSE 43444
// for i = 1 to mastodonts do
43379: LD_ADDR_VAR 0 11
43383: PUSH
43384: DOUBLE
43385: LD_INT 1
43387: DEC
43388: ST_TO_ADDR
43389: LD_VAR 0 6
43393: PUSH
43394: FOR_TO
43395: IFFALSE 43442
// begin vc_chassis := 31 ;
43397: LD_ADDR_OWVAR 37
43401: PUSH
43402: LD_INT 31
43404: ST_TO_ADDR
// vc_control := control_rider ;
43405: LD_ADDR_OWVAR 38
43409: PUSH
43410: LD_INT 4
43412: ST_TO_ADDR
// animal := CreateVehicle ;
43413: LD_ADDR_VAR 0 12
43417: PUSH
43418: CALL_OW 45
43422: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43423: LD_VAR 0 12
43427: PPUSH
43428: LD_VAR 0 8
43432: PPUSH
43433: LD_INT 0
43435: PPUSH
43436: CALL 45579 0 3
// end ;
43440: GO 43394
43442: POP
43443: POP
// if horses then
43444: LD_VAR 0 5
43448: IFFALSE 43515
// for i = 1 to horses do
43450: LD_ADDR_VAR 0 11
43454: PUSH
43455: DOUBLE
43456: LD_INT 1
43458: DEC
43459: ST_TO_ADDR
43460: LD_VAR 0 5
43464: PUSH
43465: FOR_TO
43466: IFFALSE 43513
// begin hc_class := 21 ;
43468: LD_ADDR_OWVAR 28
43472: PUSH
43473: LD_INT 21
43475: ST_TO_ADDR
// hc_gallery :=  ;
43476: LD_ADDR_OWVAR 33
43480: PUSH
43481: LD_STRING 
43483: ST_TO_ADDR
// animal := CreateHuman ;
43484: LD_ADDR_VAR 0 12
43488: PUSH
43489: CALL_OW 44
43493: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43494: LD_VAR 0 12
43498: PPUSH
43499: LD_VAR 0 8
43503: PPUSH
43504: LD_INT 0
43506: PPUSH
43507: CALL 45579 0 3
// end ;
43511: GO 43465
43513: POP
43514: POP
// if birds then
43515: LD_VAR 0 1
43519: IFFALSE 43586
// for i = 1 to birds do
43521: LD_ADDR_VAR 0 11
43525: PUSH
43526: DOUBLE
43527: LD_INT 1
43529: DEC
43530: ST_TO_ADDR
43531: LD_VAR 0 1
43535: PUSH
43536: FOR_TO
43537: IFFALSE 43584
// begin hc_class = 18 ;
43539: LD_ADDR_OWVAR 28
43543: PUSH
43544: LD_INT 18
43546: ST_TO_ADDR
// hc_gallery =  ;
43547: LD_ADDR_OWVAR 33
43551: PUSH
43552: LD_STRING 
43554: ST_TO_ADDR
// animal := CreateHuman ;
43555: LD_ADDR_VAR 0 12
43559: PUSH
43560: CALL_OW 44
43564: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43565: LD_VAR 0 12
43569: PPUSH
43570: LD_VAR 0 8
43574: PPUSH
43575: LD_INT 0
43577: PPUSH
43578: CALL 45579 0 3
// end ;
43582: GO 43536
43584: POP
43585: POP
// if tigers then
43586: LD_VAR 0 2
43590: IFFALSE 43674
// for i = 1 to tigers do
43592: LD_ADDR_VAR 0 11
43596: PUSH
43597: DOUBLE
43598: LD_INT 1
43600: DEC
43601: ST_TO_ADDR
43602: LD_VAR 0 2
43606: PUSH
43607: FOR_TO
43608: IFFALSE 43672
// begin hc_class = class_tiger ;
43610: LD_ADDR_OWVAR 28
43614: PUSH
43615: LD_INT 14
43617: ST_TO_ADDR
// hc_gallery =  ;
43618: LD_ADDR_OWVAR 33
43622: PUSH
43623: LD_STRING 
43625: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43626: LD_ADDR_OWVAR 35
43630: PUSH
43631: LD_INT 7
43633: NEG
43634: PPUSH
43635: LD_INT 7
43637: PPUSH
43638: CALL_OW 12
43642: ST_TO_ADDR
// animal := CreateHuman ;
43643: LD_ADDR_VAR 0 12
43647: PUSH
43648: CALL_OW 44
43652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43653: LD_VAR 0 12
43657: PPUSH
43658: LD_VAR 0 8
43662: PPUSH
43663: LD_INT 0
43665: PPUSH
43666: CALL 45579 0 3
// end ;
43670: GO 43607
43672: POP
43673: POP
// if apemans then
43674: LD_VAR 0 3
43678: IFFALSE 43801
// for i = 1 to apemans do
43680: LD_ADDR_VAR 0 11
43684: PUSH
43685: DOUBLE
43686: LD_INT 1
43688: DEC
43689: ST_TO_ADDR
43690: LD_VAR 0 3
43694: PUSH
43695: FOR_TO
43696: IFFALSE 43799
// begin hc_class = class_apeman ;
43698: LD_ADDR_OWVAR 28
43702: PUSH
43703: LD_INT 12
43705: ST_TO_ADDR
// hc_gallery =  ;
43706: LD_ADDR_OWVAR 33
43710: PUSH
43711: LD_STRING 
43713: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43714: LD_ADDR_OWVAR 35
43718: PUSH
43719: LD_INT 2
43721: NEG
43722: PPUSH
43723: LD_INT 2
43725: PPUSH
43726: CALL_OW 12
43730: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43731: LD_ADDR_OWVAR 31
43735: PUSH
43736: LD_INT 1
43738: PPUSH
43739: LD_INT 3
43741: PPUSH
43742: CALL_OW 12
43746: PUSH
43747: LD_INT 1
43749: PPUSH
43750: LD_INT 3
43752: PPUSH
43753: CALL_OW 12
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: ST_TO_ADDR
// animal := CreateHuman ;
43770: LD_ADDR_VAR 0 12
43774: PUSH
43775: CALL_OW 44
43779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43780: LD_VAR 0 12
43784: PPUSH
43785: LD_VAR 0 8
43789: PPUSH
43790: LD_INT 0
43792: PPUSH
43793: CALL 45579 0 3
// end ;
43797: GO 43695
43799: POP
43800: POP
// if enchidnas then
43801: LD_VAR 0 4
43805: IFFALSE 43872
// for i = 1 to enchidnas do
43807: LD_ADDR_VAR 0 11
43811: PUSH
43812: DOUBLE
43813: LD_INT 1
43815: DEC
43816: ST_TO_ADDR
43817: LD_VAR 0 4
43821: PUSH
43822: FOR_TO
43823: IFFALSE 43870
// begin hc_class = 13 ;
43825: LD_ADDR_OWVAR 28
43829: PUSH
43830: LD_INT 13
43832: ST_TO_ADDR
// hc_gallery =  ;
43833: LD_ADDR_OWVAR 33
43837: PUSH
43838: LD_STRING 
43840: ST_TO_ADDR
// animal := CreateHuman ;
43841: LD_ADDR_VAR 0 12
43845: PUSH
43846: CALL_OW 44
43850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43851: LD_VAR 0 12
43855: PPUSH
43856: LD_VAR 0 8
43860: PPUSH
43861: LD_INT 0
43863: PPUSH
43864: CALL 45579 0 3
// end ;
43868: GO 43822
43870: POP
43871: POP
// if fishes then
43872: LD_VAR 0 7
43876: IFFALSE 43943
// for i = 1 to fishes do
43878: LD_ADDR_VAR 0 11
43882: PUSH
43883: DOUBLE
43884: LD_INT 1
43886: DEC
43887: ST_TO_ADDR
43888: LD_VAR 0 7
43892: PUSH
43893: FOR_TO
43894: IFFALSE 43941
// begin hc_class = 20 ;
43896: LD_ADDR_OWVAR 28
43900: PUSH
43901: LD_INT 20
43903: ST_TO_ADDR
// hc_gallery =  ;
43904: LD_ADDR_OWVAR 33
43908: PUSH
43909: LD_STRING 
43911: ST_TO_ADDR
// animal := CreateHuman ;
43912: LD_ADDR_VAR 0 12
43916: PUSH
43917: CALL_OW 44
43921: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43922: LD_VAR 0 12
43926: PPUSH
43927: LD_VAR 0 9
43931: PPUSH
43932: LD_INT 0
43934: PPUSH
43935: CALL 45579 0 3
// end ;
43939: GO 43893
43941: POP
43942: POP
// end ;
43943: LD_VAR 0 10
43947: RET
// export function WantHeal ( sci , unit ) ; begin
43948: LD_INT 0
43950: PPUSH
// if GetTaskList ( sci ) > 0 then
43951: LD_VAR 0 1
43955: PPUSH
43956: CALL_OW 437
43960: PUSH
43961: LD_INT 0
43963: GREATER
43964: IFFALSE 44034
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43966: LD_VAR 0 1
43970: PPUSH
43971: CALL_OW 437
43975: PUSH
43976: LD_INT 1
43978: ARRAY
43979: PUSH
43980: LD_INT 1
43982: ARRAY
43983: PUSH
43984: LD_STRING l
43986: EQUAL
43987: PUSH
43988: LD_VAR 0 1
43992: PPUSH
43993: CALL_OW 437
43997: PUSH
43998: LD_INT 1
44000: ARRAY
44001: PUSH
44002: LD_INT 4
44004: ARRAY
44005: PUSH
44006: LD_VAR 0 2
44010: EQUAL
44011: AND
44012: IFFALSE 44024
// result := true else
44014: LD_ADDR_VAR 0 3
44018: PUSH
44019: LD_INT 1
44021: ST_TO_ADDR
44022: GO 44032
// result := false ;
44024: LD_ADDR_VAR 0 3
44028: PUSH
44029: LD_INT 0
44031: ST_TO_ADDR
// end else
44032: GO 44042
// result := false ;
44034: LD_ADDR_VAR 0 3
44038: PUSH
44039: LD_INT 0
44041: ST_TO_ADDR
// end ;
44042: LD_VAR 0 3
44046: RET
// export function HealTarget ( sci ) ; begin
44047: LD_INT 0
44049: PPUSH
// if not sci then
44050: LD_VAR 0 1
44054: NOT
44055: IFFALSE 44059
// exit ;
44057: GO 44124
// result := 0 ;
44059: LD_ADDR_VAR 0 2
44063: PUSH
44064: LD_INT 0
44066: ST_TO_ADDR
// if GetTaskList ( sci ) then
44067: LD_VAR 0 1
44071: PPUSH
44072: CALL_OW 437
44076: IFFALSE 44124
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44078: LD_VAR 0 1
44082: PPUSH
44083: CALL_OW 437
44087: PUSH
44088: LD_INT 1
44090: ARRAY
44091: PUSH
44092: LD_INT 1
44094: ARRAY
44095: PUSH
44096: LD_STRING l
44098: EQUAL
44099: IFFALSE 44124
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44101: LD_ADDR_VAR 0 2
44105: PUSH
44106: LD_VAR 0 1
44110: PPUSH
44111: CALL_OW 437
44115: PUSH
44116: LD_INT 1
44118: ARRAY
44119: PUSH
44120: LD_INT 4
44122: ARRAY
44123: ST_TO_ADDR
// end ;
44124: LD_VAR 0 2
44128: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44129: LD_INT 0
44131: PPUSH
44132: PPUSH
44133: PPUSH
44134: PPUSH
// if not base_units then
44135: LD_VAR 0 1
44139: NOT
44140: IFFALSE 44144
// exit ;
44142: GO 44231
// result := false ;
44144: LD_ADDR_VAR 0 2
44148: PUSH
44149: LD_INT 0
44151: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44152: LD_ADDR_VAR 0 5
44156: PUSH
44157: LD_VAR 0 1
44161: PPUSH
44162: LD_INT 21
44164: PUSH
44165: LD_INT 3
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PPUSH
44172: CALL_OW 72
44176: ST_TO_ADDR
// if not tmp then
44177: LD_VAR 0 5
44181: NOT
44182: IFFALSE 44186
// exit ;
44184: GO 44231
// for i in tmp do
44186: LD_ADDR_VAR 0 3
44190: PUSH
44191: LD_VAR 0 5
44195: PUSH
44196: FOR_IN
44197: IFFALSE 44229
// begin result := EnemyInRange ( i , 22 ) ;
44199: LD_ADDR_VAR 0 2
44203: PUSH
44204: LD_VAR 0 3
44208: PPUSH
44209: LD_INT 22
44211: PPUSH
44212: CALL 42467 0 2
44216: ST_TO_ADDR
// if result then
44217: LD_VAR 0 2
44221: IFFALSE 44227
// exit ;
44223: POP
44224: POP
44225: GO 44231
// end ;
44227: GO 44196
44229: POP
44230: POP
// end ;
44231: LD_VAR 0 2
44235: RET
// export function FilterByTag ( units , tag ) ; begin
44236: LD_INT 0
44238: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44239: LD_ADDR_VAR 0 3
44243: PUSH
44244: LD_VAR 0 1
44248: PPUSH
44249: LD_INT 120
44251: PUSH
44252: LD_VAR 0 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PPUSH
44261: CALL_OW 72
44265: ST_TO_ADDR
// end ;
44266: LD_VAR 0 3
44270: RET
// export function IsDriver ( un ) ; begin
44271: LD_INT 0
44273: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44274: LD_ADDR_VAR 0 2
44278: PUSH
44279: LD_VAR 0 1
44283: PUSH
44284: LD_INT 55
44286: PUSH
44287: EMPTY
44288: LIST
44289: PPUSH
44290: CALL_OW 69
44294: IN
44295: ST_TO_ADDR
// end ;
44296: LD_VAR 0 2
44300: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44301: LD_INT 0
44303: PPUSH
44304: PPUSH
// list := [ ] ;
44305: LD_ADDR_VAR 0 5
44309: PUSH
44310: EMPTY
44311: ST_TO_ADDR
// case d of 0 :
44312: LD_VAR 0 3
44316: PUSH
44317: LD_INT 0
44319: DOUBLE
44320: EQUAL
44321: IFTRUE 44325
44323: GO 44458
44325: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44326: LD_ADDR_VAR 0 5
44330: PUSH
44331: LD_VAR 0 1
44335: PUSH
44336: LD_INT 4
44338: MINUS
44339: PUSH
44340: LD_VAR 0 2
44344: PUSH
44345: LD_INT 4
44347: MINUS
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: PUSH
44357: LD_VAR 0 1
44361: PUSH
44362: LD_INT 3
44364: MINUS
44365: PUSH
44366: LD_VAR 0 2
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: LIST
44378: PUSH
44379: LD_VAR 0 1
44383: PUSH
44384: LD_INT 4
44386: PLUS
44387: PUSH
44388: LD_VAR 0 2
44392: PUSH
44393: LD_INT 4
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: PUSH
44401: LD_VAR 0 1
44405: PUSH
44406: LD_INT 3
44408: PLUS
44409: PUSH
44410: LD_VAR 0 2
44414: PUSH
44415: LD_INT 3
44417: PLUS
44418: PUSH
44419: LD_INT 5
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: LIST
44426: PUSH
44427: LD_VAR 0 1
44431: PUSH
44432: LD_VAR 0 2
44436: PUSH
44437: LD_INT 4
44439: PLUS
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: LIST
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: ST_TO_ADDR
// end ; 1 :
44456: GO 45156
44458: LD_INT 1
44460: DOUBLE
44461: EQUAL
44462: IFTRUE 44466
44464: GO 44599
44466: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44467: LD_ADDR_VAR 0 5
44471: PUSH
44472: LD_VAR 0 1
44476: PUSH
44477: LD_VAR 0 2
44481: PUSH
44482: LD_INT 4
44484: MINUS
44485: PUSH
44486: LD_INT 3
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: PUSH
44494: LD_VAR 0 1
44498: PUSH
44499: LD_INT 3
44501: MINUS
44502: PUSH
44503: LD_VAR 0 2
44507: PUSH
44508: LD_INT 3
44510: MINUS
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: PUSH
44520: LD_VAR 0 1
44524: PUSH
44525: LD_INT 4
44527: MINUS
44528: PUSH
44529: LD_VAR 0 2
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: PUSH
44542: LD_VAR 0 1
44546: PUSH
44547: LD_VAR 0 2
44551: PUSH
44552: LD_INT 3
44554: PLUS
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: LIST
44563: PUSH
44564: LD_VAR 0 1
44568: PUSH
44569: LD_INT 4
44571: PLUS
44572: PUSH
44573: LD_VAR 0 2
44577: PUSH
44578: LD_INT 4
44580: PLUS
44581: PUSH
44582: LD_INT 5
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: LIST
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: ST_TO_ADDR
// end ; 2 :
44597: GO 45156
44599: LD_INT 2
44601: DOUBLE
44602: EQUAL
44603: IFTRUE 44607
44605: GO 44736
44607: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44608: LD_ADDR_VAR 0 5
44612: PUSH
44613: LD_VAR 0 1
44617: PUSH
44618: LD_VAR 0 2
44622: PUSH
44623: LD_INT 3
44625: MINUS
44626: PUSH
44627: LD_INT 3
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: LIST
44634: PUSH
44635: LD_VAR 0 1
44639: PUSH
44640: LD_INT 4
44642: PLUS
44643: PUSH
44644: LD_VAR 0 2
44648: PUSH
44649: LD_INT 4
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: LIST
44656: PUSH
44657: LD_VAR 0 1
44661: PUSH
44662: LD_VAR 0 2
44666: PUSH
44667: LD_INT 4
44669: PLUS
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: LIST
44678: PUSH
44679: LD_VAR 0 1
44683: PUSH
44684: LD_INT 3
44686: MINUS
44687: PUSH
44688: LD_VAR 0 2
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: LIST
44700: PUSH
44701: LD_VAR 0 1
44705: PUSH
44706: LD_INT 4
44708: MINUS
44709: PUSH
44710: LD_VAR 0 2
44714: PUSH
44715: LD_INT 4
44717: MINUS
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: LIST
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: ST_TO_ADDR
// end ; 3 :
44734: GO 45156
44736: LD_INT 3
44738: DOUBLE
44739: EQUAL
44740: IFTRUE 44744
44742: GO 44877
44744: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44745: LD_ADDR_VAR 0 5
44749: PUSH
44750: LD_VAR 0 1
44754: PUSH
44755: LD_INT 3
44757: PLUS
44758: PUSH
44759: LD_VAR 0 2
44763: PUSH
44764: LD_INT 4
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: PUSH
44772: LD_VAR 0 1
44776: PUSH
44777: LD_INT 4
44779: PLUS
44780: PUSH
44781: LD_VAR 0 2
44785: PUSH
44786: LD_INT 4
44788: PLUS
44789: PUSH
44790: LD_INT 5
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: PUSH
44798: LD_VAR 0 1
44802: PUSH
44803: LD_INT 4
44805: MINUS
44806: PUSH
44807: LD_VAR 0 2
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: PUSH
44820: LD_VAR 0 1
44824: PUSH
44825: LD_VAR 0 2
44829: PUSH
44830: LD_INT 4
44832: MINUS
44833: PUSH
44834: LD_INT 3
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: LIST
44841: PUSH
44842: LD_VAR 0 1
44846: PUSH
44847: LD_INT 3
44849: MINUS
44850: PUSH
44851: LD_VAR 0 2
44855: PUSH
44856: LD_INT 3
44858: MINUS
44859: PUSH
44860: LD_INT 2
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: LIST
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: ST_TO_ADDR
// end ; 4 :
44875: GO 45156
44877: LD_INT 4
44879: DOUBLE
44880: EQUAL
44881: IFTRUE 44885
44883: GO 45018
44885: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44886: LD_ADDR_VAR 0 5
44890: PUSH
44891: LD_VAR 0 1
44895: PUSH
44896: LD_VAR 0 2
44900: PUSH
44901: LD_INT 4
44903: PLUS
44904: PUSH
44905: LD_INT 0
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: LIST
44912: PUSH
44913: LD_VAR 0 1
44917: PUSH
44918: LD_INT 3
44920: PLUS
44921: PUSH
44922: LD_VAR 0 2
44926: PUSH
44927: LD_INT 3
44929: PLUS
44930: PUSH
44931: LD_INT 5
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: LIST
44938: PUSH
44939: LD_VAR 0 1
44943: PUSH
44944: LD_INT 4
44946: PLUS
44947: PUSH
44948: LD_VAR 0 2
44952: PUSH
44953: LD_INT 4
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: LIST
44960: PUSH
44961: LD_VAR 0 1
44965: PUSH
44966: LD_VAR 0 2
44970: PUSH
44971: LD_INT 3
44973: MINUS
44974: PUSH
44975: LD_INT 3
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: PUSH
44983: LD_VAR 0 1
44987: PUSH
44988: LD_INT 4
44990: MINUS
44991: PUSH
44992: LD_VAR 0 2
44996: PUSH
44997: LD_INT 4
44999: MINUS
45000: PUSH
45001: LD_INT 2
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: LIST
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: ST_TO_ADDR
// end ; 5 :
45016: GO 45156
45018: LD_INT 5
45020: DOUBLE
45021: EQUAL
45022: IFTRUE 45026
45024: GO 45155
45026: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45027: LD_ADDR_VAR 0 5
45031: PUSH
45032: LD_VAR 0 1
45036: PUSH
45037: LD_INT 4
45039: MINUS
45040: PUSH
45041: LD_VAR 0 2
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: PUSH
45054: LD_VAR 0 1
45058: PUSH
45059: LD_VAR 0 2
45063: PUSH
45064: LD_INT 4
45066: MINUS
45067: PUSH
45068: LD_INT 3
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: LIST
45075: PUSH
45076: LD_VAR 0 1
45080: PUSH
45081: LD_INT 4
45083: PLUS
45084: PUSH
45085: LD_VAR 0 2
45089: PUSH
45090: LD_INT 4
45092: PLUS
45093: PUSH
45094: LD_INT 5
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: LIST
45101: PUSH
45102: LD_VAR 0 1
45106: PUSH
45107: LD_INT 3
45109: PLUS
45110: PUSH
45111: LD_VAR 0 2
45115: PUSH
45116: LD_INT 4
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: LIST
45123: PUSH
45124: LD_VAR 0 1
45128: PUSH
45129: LD_VAR 0 2
45133: PUSH
45134: LD_INT 3
45136: PLUS
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: ST_TO_ADDR
// end ; end ;
45153: GO 45156
45155: POP
// result := list ;
45156: LD_ADDR_VAR 0 4
45160: PUSH
45161: LD_VAR 0 5
45165: ST_TO_ADDR
// end ;
45166: LD_VAR 0 4
45170: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45171: LD_INT 0
45173: PPUSH
45174: PPUSH
45175: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45176: LD_VAR 0 1
45180: NOT
45181: PUSH
45182: LD_VAR 0 2
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: LD_INT 3
45195: PUSH
45196: LD_INT 4
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: IN
45205: NOT
45206: OR
45207: IFFALSE 45211
// exit ;
45209: GO 45303
// tmp := [ ] ;
45211: LD_ADDR_VAR 0 5
45215: PUSH
45216: EMPTY
45217: ST_TO_ADDR
// for i in units do
45218: LD_ADDR_VAR 0 4
45222: PUSH
45223: LD_VAR 0 1
45227: PUSH
45228: FOR_IN
45229: IFFALSE 45272
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
45231: LD_ADDR_VAR 0 5
45235: PUSH
45236: LD_VAR 0 5
45240: PPUSH
45241: LD_VAR 0 5
45245: PUSH
45246: LD_INT 1
45248: PLUS
45249: PPUSH
45250: LD_VAR 0 4
45254: PPUSH
45255: LD_VAR 0 2
45259: PPUSH
45260: CALL_OW 259
45264: PPUSH
45265: CALL_OW 2
45269: ST_TO_ADDR
45270: GO 45228
45272: POP
45273: POP
// if not tmp then
45274: LD_VAR 0 5
45278: NOT
45279: IFFALSE 45283
// exit ;
45281: GO 45303
// result := SortListByListDesc ( units , tmp ) ;
45283: LD_ADDR_VAR 0 3
45287: PUSH
45288: LD_VAR 0 1
45292: PPUSH
45293: LD_VAR 0 5
45297: PPUSH
45298: CALL_OW 77
45302: ST_TO_ADDR
// end ;
45303: LD_VAR 0 3
45307: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45308: LD_INT 0
45310: PPUSH
45311: PPUSH
45312: PPUSH
// result := false ;
45313: LD_ADDR_VAR 0 3
45317: PUSH
45318: LD_INT 0
45320: ST_TO_ADDR
// x := GetX ( building ) ;
45321: LD_ADDR_VAR 0 4
45325: PUSH
45326: LD_VAR 0 2
45330: PPUSH
45331: CALL_OW 250
45335: ST_TO_ADDR
// y := GetY ( building ) ;
45336: LD_ADDR_VAR 0 5
45340: PUSH
45341: LD_VAR 0 2
45345: PPUSH
45346: CALL_OW 251
45350: ST_TO_ADDR
// if not building or not x or not y then
45351: LD_VAR 0 2
45355: NOT
45356: PUSH
45357: LD_VAR 0 4
45361: NOT
45362: OR
45363: PUSH
45364: LD_VAR 0 5
45368: NOT
45369: OR
45370: IFFALSE 45374
// exit ;
45372: GO 45466
// if GetTaskList ( unit ) then
45374: LD_VAR 0 1
45378: PPUSH
45379: CALL_OW 437
45383: IFFALSE 45466
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45385: LD_STRING e
45387: PUSH
45388: LD_VAR 0 1
45392: PPUSH
45393: CALL_OW 437
45397: PUSH
45398: LD_INT 1
45400: ARRAY
45401: PUSH
45402: LD_INT 1
45404: ARRAY
45405: EQUAL
45406: PUSH
45407: LD_VAR 0 4
45411: PUSH
45412: LD_VAR 0 1
45416: PPUSH
45417: CALL_OW 437
45421: PUSH
45422: LD_INT 1
45424: ARRAY
45425: PUSH
45426: LD_INT 2
45428: ARRAY
45429: EQUAL
45430: AND
45431: PUSH
45432: LD_VAR 0 5
45436: PUSH
45437: LD_VAR 0 1
45441: PPUSH
45442: CALL_OW 437
45446: PUSH
45447: LD_INT 1
45449: ARRAY
45450: PUSH
45451: LD_INT 3
45453: ARRAY
45454: EQUAL
45455: AND
45456: IFFALSE 45466
// result := true end ;
45458: LD_ADDR_VAR 0 3
45462: PUSH
45463: LD_INT 1
45465: ST_TO_ADDR
// end ;
45466: LD_VAR 0 3
45470: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45471: LD_INT 0
45473: PPUSH
// result := false ;
45474: LD_ADDR_VAR 0 4
45478: PUSH
45479: LD_INT 0
45481: ST_TO_ADDR
// if GetTaskList ( unit ) then
45482: LD_VAR 0 1
45486: PPUSH
45487: CALL_OW 437
45491: IFFALSE 45574
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45493: LD_STRING M
45495: PUSH
45496: LD_VAR 0 1
45500: PPUSH
45501: CALL_OW 437
45505: PUSH
45506: LD_INT 1
45508: ARRAY
45509: PUSH
45510: LD_INT 1
45512: ARRAY
45513: EQUAL
45514: PUSH
45515: LD_VAR 0 2
45519: PUSH
45520: LD_VAR 0 1
45524: PPUSH
45525: CALL_OW 437
45529: PUSH
45530: LD_INT 1
45532: ARRAY
45533: PUSH
45534: LD_INT 2
45536: ARRAY
45537: EQUAL
45538: AND
45539: PUSH
45540: LD_VAR 0 3
45544: PUSH
45545: LD_VAR 0 1
45549: PPUSH
45550: CALL_OW 437
45554: PUSH
45555: LD_INT 1
45557: ARRAY
45558: PUSH
45559: LD_INT 3
45561: ARRAY
45562: EQUAL
45563: AND
45564: IFFALSE 45574
// result := true ;
45566: LD_ADDR_VAR 0 4
45570: PUSH
45571: LD_INT 1
45573: ST_TO_ADDR
// end ; end ;
45574: LD_VAR 0 4
45578: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45579: LD_INT 0
45581: PPUSH
45582: PPUSH
45583: PPUSH
45584: PPUSH
// if not unit or not area then
45585: LD_VAR 0 1
45589: NOT
45590: PUSH
45591: LD_VAR 0 2
45595: NOT
45596: OR
45597: IFFALSE 45601
// exit ;
45599: GO 45765
// tmp := AreaToList ( area , i ) ;
45601: LD_ADDR_VAR 0 6
45605: PUSH
45606: LD_VAR 0 2
45610: PPUSH
45611: LD_VAR 0 5
45615: PPUSH
45616: CALL_OW 517
45620: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45621: LD_ADDR_VAR 0 5
45625: PUSH
45626: DOUBLE
45627: LD_INT 1
45629: DEC
45630: ST_TO_ADDR
45631: LD_VAR 0 6
45635: PUSH
45636: LD_INT 1
45638: ARRAY
45639: PUSH
45640: FOR_TO
45641: IFFALSE 45763
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45643: LD_ADDR_VAR 0 7
45647: PUSH
45648: LD_VAR 0 6
45652: PUSH
45653: LD_INT 1
45655: ARRAY
45656: PUSH
45657: LD_VAR 0 5
45661: ARRAY
45662: PUSH
45663: LD_VAR 0 6
45667: PUSH
45668: LD_INT 2
45670: ARRAY
45671: PUSH
45672: LD_VAR 0 5
45676: ARRAY
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
45682: LD_VAR 0 7
45686: PUSH
45687: LD_INT 1
45689: ARRAY
45690: PPUSH
45691: LD_VAR 0 7
45695: PUSH
45696: LD_INT 2
45698: ARRAY
45699: PPUSH
45700: CALL_OW 428
45704: PUSH
45705: LD_INT 0
45707: EQUAL
45708: IFFALSE 45761
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45710: LD_VAR 0 1
45714: PPUSH
45715: LD_VAR 0 7
45719: PUSH
45720: LD_INT 1
45722: ARRAY
45723: PPUSH
45724: LD_VAR 0 7
45728: PUSH
45729: LD_INT 2
45731: ARRAY
45732: PPUSH
45733: LD_VAR 0 3
45737: PPUSH
45738: CALL_OW 48
// result := IsPlaced ( unit ) ;
45742: LD_ADDR_VAR 0 4
45746: PUSH
45747: LD_VAR 0 1
45751: PPUSH
45752: CALL_OW 305
45756: ST_TO_ADDR
// exit ;
45757: POP
45758: POP
45759: GO 45765
// end ; end ;
45761: GO 45640
45763: POP
45764: POP
// end ;
45765: LD_VAR 0 4
45769: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45770: LD_INT 0
45772: PPUSH
45773: PPUSH
45774: PPUSH
// if not side or side > 8 then
45775: LD_VAR 0 1
45779: NOT
45780: PUSH
45781: LD_VAR 0 1
45785: PUSH
45786: LD_INT 8
45788: GREATER
45789: OR
45790: IFFALSE 45794
// exit ;
45792: GO 45981
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45794: LD_ADDR_VAR 0 4
45798: PUSH
45799: LD_INT 22
45801: PUSH
45802: LD_VAR 0 1
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 21
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PPUSH
45825: CALL_OW 69
45829: ST_TO_ADDR
// if not tmp then
45830: LD_VAR 0 4
45834: NOT
45835: IFFALSE 45839
// exit ;
45837: GO 45981
// enable_addtolog := true ;
45839: LD_ADDR_OWVAR 81
45843: PUSH
45844: LD_INT 1
45846: ST_TO_ADDR
// AddToLog ( [ ) ;
45847: LD_STRING [
45849: PPUSH
45850: CALL_OW 561
// for i in tmp do
45854: LD_ADDR_VAR 0 3
45858: PUSH
45859: LD_VAR 0 4
45863: PUSH
45864: FOR_IN
45865: IFFALSE 45972
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45867: LD_STRING [
45869: PUSH
45870: LD_VAR 0 3
45874: PPUSH
45875: CALL_OW 266
45879: STR
45880: PUSH
45881: LD_STRING , 
45883: STR
45884: PUSH
45885: LD_VAR 0 3
45889: PPUSH
45890: CALL_OW 250
45894: STR
45895: PUSH
45896: LD_STRING , 
45898: STR
45899: PUSH
45900: LD_VAR 0 3
45904: PPUSH
45905: CALL_OW 251
45909: STR
45910: PUSH
45911: LD_STRING , 
45913: STR
45914: PUSH
45915: LD_VAR 0 3
45919: PPUSH
45920: CALL_OW 254
45924: STR
45925: PUSH
45926: LD_STRING , 
45928: STR
45929: PUSH
45930: LD_VAR 0 3
45934: PPUSH
45935: LD_INT 1
45937: PPUSH
45938: CALL_OW 268
45942: STR
45943: PUSH
45944: LD_STRING , 
45946: STR
45947: PUSH
45948: LD_VAR 0 3
45952: PPUSH
45953: LD_INT 2
45955: PPUSH
45956: CALL_OW 268
45960: STR
45961: PUSH
45962: LD_STRING ],
45964: STR
45965: PPUSH
45966: CALL_OW 561
// end ;
45970: GO 45864
45972: POP
45973: POP
// AddToLog ( ]; ) ;
45974: LD_STRING ];
45976: PPUSH
45977: CALL_OW 561
// end ;
45981: LD_VAR 0 2
45985: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45986: LD_INT 0
45988: PPUSH
45989: PPUSH
45990: PPUSH
45991: PPUSH
45992: PPUSH
// if not area or not rate or not max then
45993: LD_VAR 0 1
45997: NOT
45998: PUSH
45999: LD_VAR 0 2
46003: NOT
46004: OR
46005: PUSH
46006: LD_VAR 0 4
46010: NOT
46011: OR
46012: IFFALSE 46016
// exit ;
46014: GO 46205
// while 1 do
46016: LD_INT 1
46018: IFFALSE 46205
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46020: LD_ADDR_VAR 0 9
46024: PUSH
46025: LD_VAR 0 1
46029: PPUSH
46030: LD_INT 1
46032: PPUSH
46033: CALL_OW 287
46037: PUSH
46038: LD_INT 10
46040: MUL
46041: ST_TO_ADDR
// r := rate / 10 ;
46042: LD_ADDR_VAR 0 7
46046: PUSH
46047: LD_VAR 0 2
46051: PUSH
46052: LD_INT 10
46054: DIVREAL
46055: ST_TO_ADDR
// time := 1 1$00 ;
46056: LD_ADDR_VAR 0 8
46060: PUSH
46061: LD_INT 2100
46063: ST_TO_ADDR
// if amount < min then
46064: LD_VAR 0 9
46068: PUSH
46069: LD_VAR 0 3
46073: LESS
46074: IFFALSE 46092
// r := r * 2 else
46076: LD_ADDR_VAR 0 7
46080: PUSH
46081: LD_VAR 0 7
46085: PUSH
46086: LD_INT 2
46088: MUL
46089: ST_TO_ADDR
46090: GO 46118
// if amount > max then
46092: LD_VAR 0 9
46096: PUSH
46097: LD_VAR 0 4
46101: GREATER
46102: IFFALSE 46118
// r := r / 2 ;
46104: LD_ADDR_VAR 0 7
46108: PUSH
46109: LD_VAR 0 7
46113: PUSH
46114: LD_INT 2
46116: DIVREAL
46117: ST_TO_ADDR
// time := time / r ;
46118: LD_ADDR_VAR 0 8
46122: PUSH
46123: LD_VAR 0 8
46127: PUSH
46128: LD_VAR 0 7
46132: DIVREAL
46133: ST_TO_ADDR
// if time < 0 then
46134: LD_VAR 0 8
46138: PUSH
46139: LD_INT 0
46141: LESS
46142: IFFALSE 46159
// time := time * - 1 ;
46144: LD_ADDR_VAR 0 8
46148: PUSH
46149: LD_VAR 0 8
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: MUL
46158: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46159: LD_VAR 0 8
46163: PUSH
46164: LD_INT 35
46166: PPUSH
46167: LD_INT 875
46169: PPUSH
46170: CALL_OW 12
46174: PLUS
46175: PPUSH
46176: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46180: LD_INT 1
46182: PPUSH
46183: LD_INT 5
46185: PPUSH
46186: CALL_OW 12
46190: PPUSH
46191: LD_VAR 0 1
46195: PPUSH
46196: LD_INT 1
46198: PPUSH
46199: CALL_OW 55
// end ;
46203: GO 46016
// end ;
46205: LD_VAR 0 5
46209: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46210: LD_INT 0
46212: PPUSH
46213: PPUSH
46214: PPUSH
46215: PPUSH
46216: PPUSH
46217: PPUSH
46218: PPUSH
46219: PPUSH
// if not turrets or not factories then
46220: LD_VAR 0 1
46224: NOT
46225: PUSH
46226: LD_VAR 0 2
46230: NOT
46231: OR
46232: IFFALSE 46236
// exit ;
46234: GO 46543
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46236: LD_ADDR_VAR 0 10
46240: PUSH
46241: LD_INT 5
46243: PUSH
46244: LD_INT 6
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: LD_INT 4
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 3
46263: PUSH
46264: LD_INT 5
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 24
46278: PUSH
46279: LD_INT 25
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 23
46288: PUSH
46289: LD_INT 27
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 42
46302: PUSH
46303: LD_INT 43
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 44
46312: PUSH
46313: LD_INT 46
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 45
46322: PUSH
46323: LD_INT 47
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: LIST
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: LIST
46339: ST_TO_ADDR
// result := [ ] ;
46340: LD_ADDR_VAR 0 3
46344: PUSH
46345: EMPTY
46346: ST_TO_ADDR
// for i in turrets do
46347: LD_ADDR_VAR 0 4
46351: PUSH
46352: LD_VAR 0 1
46356: PUSH
46357: FOR_IN
46358: IFFALSE 46541
// begin nat := GetNation ( i ) ;
46360: LD_ADDR_VAR 0 7
46364: PUSH
46365: LD_VAR 0 4
46369: PPUSH
46370: CALL_OW 248
46374: ST_TO_ADDR
// weapon := 0 ;
46375: LD_ADDR_VAR 0 8
46379: PUSH
46380: LD_INT 0
46382: ST_TO_ADDR
// if not nat then
46383: LD_VAR 0 7
46387: NOT
46388: IFFALSE 46392
// continue ;
46390: GO 46357
// for j in list [ nat ] do
46392: LD_ADDR_VAR 0 5
46396: PUSH
46397: LD_VAR 0 10
46401: PUSH
46402: LD_VAR 0 7
46406: ARRAY
46407: PUSH
46408: FOR_IN
46409: IFFALSE 46450
// if GetBWeapon ( i ) = j [ 1 ] then
46411: LD_VAR 0 4
46415: PPUSH
46416: CALL_OW 269
46420: PUSH
46421: LD_VAR 0 5
46425: PUSH
46426: LD_INT 1
46428: ARRAY
46429: EQUAL
46430: IFFALSE 46448
// begin weapon := j [ 2 ] ;
46432: LD_ADDR_VAR 0 8
46436: PUSH
46437: LD_VAR 0 5
46441: PUSH
46442: LD_INT 2
46444: ARRAY
46445: ST_TO_ADDR
// break ;
46446: GO 46450
// end ;
46448: GO 46408
46450: POP
46451: POP
// if not weapon then
46452: LD_VAR 0 8
46456: NOT
46457: IFFALSE 46461
// continue ;
46459: GO 46357
// for k in factories do
46461: LD_ADDR_VAR 0 6
46465: PUSH
46466: LD_VAR 0 2
46470: PUSH
46471: FOR_IN
46472: IFFALSE 46537
// begin weapons := AvailableWeaponList ( k ) ;
46474: LD_ADDR_VAR 0 9
46478: PUSH
46479: LD_VAR 0 6
46483: PPUSH
46484: CALL_OW 478
46488: ST_TO_ADDR
// if not weapons then
46489: LD_VAR 0 9
46493: NOT
46494: IFFALSE 46498
// continue ;
46496: GO 46471
// if weapon in weapons then
46498: LD_VAR 0 8
46502: PUSH
46503: LD_VAR 0 9
46507: IN
46508: IFFALSE 46535
// begin result := [ i , weapon ] ;
46510: LD_ADDR_VAR 0 3
46514: PUSH
46515: LD_VAR 0 4
46519: PUSH
46520: LD_VAR 0 8
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: ST_TO_ADDR
// exit ;
46529: POP
46530: POP
46531: POP
46532: POP
46533: GO 46543
// end ; end ;
46535: GO 46471
46537: POP
46538: POP
// end ;
46539: GO 46357
46541: POP
46542: POP
// end ;
46543: LD_VAR 0 3
46547: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46548: LD_INT 0
46550: PPUSH
// if not side or side > 8 then
46551: LD_VAR 0 3
46555: NOT
46556: PUSH
46557: LD_VAR 0 3
46561: PUSH
46562: LD_INT 8
46564: GREATER
46565: OR
46566: IFFALSE 46570
// exit ;
46568: GO 46629
// if not range then
46570: LD_VAR 0 4
46574: NOT
46575: IFFALSE 46586
// range := - 12 ;
46577: LD_ADDR_VAR 0 4
46581: PUSH
46582: LD_INT 12
46584: NEG
46585: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46586: LD_VAR 0 1
46590: PPUSH
46591: LD_VAR 0 2
46595: PPUSH
46596: LD_VAR 0 3
46600: PPUSH
46601: LD_VAR 0 4
46605: PPUSH
46606: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46610: LD_VAR 0 1
46614: PPUSH
46615: LD_VAR 0 2
46619: PPUSH
46620: LD_VAR 0 3
46624: PPUSH
46625: CALL_OW 331
// end ;
46629: LD_VAR 0 5
46633: RET
// export function Video ( mode ) ; begin
46634: LD_INT 0
46636: PPUSH
// ingame_video = mode ;
46637: LD_ADDR_OWVAR 52
46641: PUSH
46642: LD_VAR 0 1
46646: ST_TO_ADDR
// interface_hidden = mode ;
46647: LD_ADDR_OWVAR 54
46651: PUSH
46652: LD_VAR 0 1
46656: ST_TO_ADDR
// end ;
46657: LD_VAR 0 2
46661: RET
// export function Join ( array , element ) ; begin
46662: LD_INT 0
46664: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46665: LD_ADDR_VAR 0 3
46669: PUSH
46670: LD_VAR 0 1
46674: PPUSH
46675: LD_VAR 0 1
46679: PUSH
46680: LD_INT 1
46682: PLUS
46683: PPUSH
46684: LD_VAR 0 2
46688: PPUSH
46689: CALL_OW 1
46693: ST_TO_ADDR
// end ;
46694: LD_VAR 0 3
46698: RET
// export function JoinUnion ( array , element ) ; begin
46699: LD_INT 0
46701: PPUSH
// result := array union element ;
46702: LD_ADDR_VAR 0 3
46706: PUSH
46707: LD_VAR 0 1
46711: PUSH
46712: LD_VAR 0 2
46716: UNION
46717: ST_TO_ADDR
// end ;
46718: LD_VAR 0 3
46722: RET
// export function GetBehemoths ( side ) ; begin
46723: LD_INT 0
46725: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
46726: LD_ADDR_VAR 0 2
46730: PUSH
46731: LD_INT 22
46733: PUSH
46734: LD_VAR 0 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 31
46745: PUSH
46746: LD_INT 25
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PPUSH
46757: CALL_OW 69
46761: ST_TO_ADDR
// end ;
46762: LD_VAR 0 2
46766: RET
// export function Shuffle ( array ) ; var i , index ; begin
46767: LD_INT 0
46769: PPUSH
46770: PPUSH
46771: PPUSH
// result := [ ] ;
46772: LD_ADDR_VAR 0 2
46776: PUSH
46777: EMPTY
46778: ST_TO_ADDR
// if not array then
46779: LD_VAR 0 1
46783: NOT
46784: IFFALSE 46788
// exit ;
46786: GO 46887
// Randomize ;
46788: CALL_OW 10
// for i = array downto 1 do
46792: LD_ADDR_VAR 0 3
46796: PUSH
46797: DOUBLE
46798: LD_VAR 0 1
46802: INC
46803: ST_TO_ADDR
46804: LD_INT 1
46806: PUSH
46807: FOR_DOWNTO
46808: IFFALSE 46885
// begin index := rand ( 1 , array ) ;
46810: LD_ADDR_VAR 0 4
46814: PUSH
46815: LD_INT 1
46817: PPUSH
46818: LD_VAR 0 1
46822: PPUSH
46823: CALL_OW 12
46827: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46828: LD_ADDR_VAR 0 2
46832: PUSH
46833: LD_VAR 0 2
46837: PPUSH
46838: LD_VAR 0 2
46842: PUSH
46843: LD_INT 1
46845: PLUS
46846: PPUSH
46847: LD_VAR 0 1
46851: PUSH
46852: LD_VAR 0 4
46856: ARRAY
46857: PPUSH
46858: CALL_OW 2
46862: ST_TO_ADDR
// array := Delete ( array , index ) ;
46863: LD_ADDR_VAR 0 1
46867: PUSH
46868: LD_VAR 0 1
46872: PPUSH
46873: LD_VAR 0 4
46877: PPUSH
46878: CALL_OW 3
46882: ST_TO_ADDR
// end ;
46883: GO 46807
46885: POP
46886: POP
// end ;
46887: LD_VAR 0 2
46891: RET
// export function GetBaseMaterials ( base ) ; begin
46892: LD_INT 0
46894: PPUSH
// result := [ 0 , 0 , 0 ] ;
46895: LD_ADDR_VAR 0 2
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: LIST
46913: ST_TO_ADDR
// if not base then
46914: LD_VAR 0 1
46918: NOT
46919: IFFALSE 46923
// exit ;
46921: GO 46972
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46923: LD_ADDR_VAR 0 2
46927: PUSH
46928: LD_VAR 0 1
46932: PPUSH
46933: LD_INT 1
46935: PPUSH
46936: CALL_OW 275
46940: PUSH
46941: LD_VAR 0 1
46945: PPUSH
46946: LD_INT 2
46948: PPUSH
46949: CALL_OW 275
46953: PUSH
46954: LD_VAR 0 1
46958: PPUSH
46959: LD_INT 3
46961: PPUSH
46962: CALL_OW 275
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: LIST
46971: ST_TO_ADDR
// end ;
46972: LD_VAR 0 2
46976: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46977: LD_INT 0
46979: PPUSH
46980: PPUSH
// result := array ;
46981: LD_ADDR_VAR 0 3
46985: PUSH
46986: LD_VAR 0 1
46990: ST_TO_ADDR
// if size > 0 then
46991: LD_VAR 0 2
46995: PUSH
46996: LD_INT 0
46998: GREATER
46999: IFFALSE 47045
// for i := array downto size do
47001: LD_ADDR_VAR 0 4
47005: PUSH
47006: DOUBLE
47007: LD_VAR 0 1
47011: INC
47012: ST_TO_ADDR
47013: LD_VAR 0 2
47017: PUSH
47018: FOR_DOWNTO
47019: IFFALSE 47043
// result := Delete ( result , result ) ;
47021: LD_ADDR_VAR 0 3
47025: PUSH
47026: LD_VAR 0 3
47030: PPUSH
47031: LD_VAR 0 3
47035: PPUSH
47036: CALL_OW 3
47040: ST_TO_ADDR
47041: GO 47018
47043: POP
47044: POP
// end ;
47045: LD_VAR 0 3
47049: RET
// export function ComExit ( unit ) ; var tmp ; begin
47050: LD_INT 0
47052: PPUSH
47053: PPUSH
// if not IsInUnit ( unit ) then
47054: LD_VAR 0 1
47058: PPUSH
47059: CALL_OW 310
47063: NOT
47064: IFFALSE 47068
// exit ;
47066: GO 47128
// tmp := IsInUnit ( unit ) ;
47068: LD_ADDR_VAR 0 3
47072: PUSH
47073: LD_VAR 0 1
47077: PPUSH
47078: CALL_OW 310
47082: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47083: LD_VAR 0 3
47087: PPUSH
47088: CALL_OW 247
47092: PUSH
47093: LD_INT 2
47095: EQUAL
47096: IFFALSE 47109
// ComExitVehicle ( unit ) else
47098: LD_VAR 0 1
47102: PPUSH
47103: CALL_OW 121
47107: GO 47118
// ComExitBuilding ( unit ) ;
47109: LD_VAR 0 1
47113: PPUSH
47114: CALL_OW 122
// result := tmp ;
47118: LD_ADDR_VAR 0 2
47122: PUSH
47123: LD_VAR 0 3
47127: ST_TO_ADDR
// end ;
47128: LD_VAR 0 2
47132: RET
// export function ComExitAll ( units ) ; var i ; begin
47133: LD_INT 0
47135: PPUSH
47136: PPUSH
// if not units then
47137: LD_VAR 0 1
47141: NOT
47142: IFFALSE 47146
// exit ;
47144: GO 47172
// for i in units do
47146: LD_ADDR_VAR 0 3
47150: PUSH
47151: LD_VAR 0 1
47155: PUSH
47156: FOR_IN
47157: IFFALSE 47170
// ComExit ( i ) ;
47159: LD_VAR 0 3
47163: PPUSH
47164: CALL 47050 0 1
47168: GO 47156
47170: POP
47171: POP
// end ;
47172: LD_VAR 0 2
47176: RET
// export function ResetHc ; begin
47177: LD_INT 0
47179: PPUSH
// InitHc ;
47180: CALL_OW 19
// hc_importance := 0 ;
47184: LD_ADDR_OWVAR 32
47188: PUSH
47189: LD_INT 0
47191: ST_TO_ADDR
// end ;
47192: LD_VAR 0 1
47196: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47197: LD_INT 0
47199: PPUSH
47200: PPUSH
47201: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47202: LD_ADDR_VAR 0 6
47206: PUSH
47207: LD_VAR 0 1
47211: PUSH
47212: LD_VAR 0 3
47216: PLUS
47217: PUSH
47218: LD_INT 2
47220: DIV
47221: ST_TO_ADDR
// if _x < 0 then
47222: LD_VAR 0 6
47226: PUSH
47227: LD_INT 0
47229: LESS
47230: IFFALSE 47247
// _x := _x * - 1 ;
47232: LD_ADDR_VAR 0 6
47236: PUSH
47237: LD_VAR 0 6
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: MUL
47246: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47247: LD_ADDR_VAR 0 7
47251: PUSH
47252: LD_VAR 0 2
47256: PUSH
47257: LD_VAR 0 4
47261: PLUS
47262: PUSH
47263: LD_INT 2
47265: DIV
47266: ST_TO_ADDR
// if _y < 0 then
47267: LD_VAR 0 7
47271: PUSH
47272: LD_INT 0
47274: LESS
47275: IFFALSE 47292
// _y := _y * - 1 ;
47277: LD_ADDR_VAR 0 7
47281: PUSH
47282: LD_VAR 0 7
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: MUL
47291: ST_TO_ADDR
// result := [ _x , _y ] ;
47292: LD_ADDR_VAR 0 5
47296: PUSH
47297: LD_VAR 0 6
47301: PUSH
47302: LD_VAR 0 7
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: ST_TO_ADDR
// end ;
47311: LD_VAR 0 5
47315: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47316: LD_INT 0
47318: PPUSH
47319: PPUSH
47320: PPUSH
47321: PPUSH
// task := GetTaskList ( unit ) ;
47322: LD_ADDR_VAR 0 7
47326: PUSH
47327: LD_VAR 0 1
47331: PPUSH
47332: CALL_OW 437
47336: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47337: LD_VAR 0 7
47341: NOT
47342: PUSH
47343: LD_VAR 0 1
47347: PPUSH
47348: LD_VAR 0 2
47352: PPUSH
47353: CALL_OW 308
47357: NOT
47358: AND
47359: IFFALSE 47363
// exit ;
47361: GO 47481
// if IsInArea ( unit , area ) then
47363: LD_VAR 0 1
47367: PPUSH
47368: LD_VAR 0 2
47372: PPUSH
47373: CALL_OW 308
47377: IFFALSE 47395
// begin ComMoveToArea ( unit , goAway ) ;
47379: LD_VAR 0 1
47383: PPUSH
47384: LD_VAR 0 3
47388: PPUSH
47389: CALL_OW 113
// exit ;
47393: GO 47481
// end ; if task [ 1 ] [ 1 ] <> M then
47395: LD_VAR 0 7
47399: PUSH
47400: LD_INT 1
47402: ARRAY
47403: PUSH
47404: LD_INT 1
47406: ARRAY
47407: PUSH
47408: LD_STRING M
47410: NONEQUAL
47411: IFFALSE 47415
// exit ;
47413: GO 47481
// x := task [ 1 ] [ 2 ] ;
47415: LD_ADDR_VAR 0 5
47419: PUSH
47420: LD_VAR 0 7
47424: PUSH
47425: LD_INT 1
47427: ARRAY
47428: PUSH
47429: LD_INT 2
47431: ARRAY
47432: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47433: LD_ADDR_VAR 0 6
47437: PUSH
47438: LD_VAR 0 7
47442: PUSH
47443: LD_INT 1
47445: ARRAY
47446: PUSH
47447: LD_INT 3
47449: ARRAY
47450: ST_TO_ADDR
// if InArea ( x , y , area ) then
47451: LD_VAR 0 5
47455: PPUSH
47456: LD_VAR 0 6
47460: PPUSH
47461: LD_VAR 0 2
47465: PPUSH
47466: CALL_OW 309
47470: IFFALSE 47481
// ComStop ( unit ) ;
47472: LD_VAR 0 1
47476: PPUSH
47477: CALL_OW 141
// end ;
47481: LD_VAR 0 4
47485: RET
// export function Abs ( value ) ; begin
47486: LD_INT 0
47488: PPUSH
// result := value ;
47489: LD_ADDR_VAR 0 2
47493: PUSH
47494: LD_VAR 0 1
47498: ST_TO_ADDR
// if value < 0 then
47499: LD_VAR 0 1
47503: PUSH
47504: LD_INT 0
47506: LESS
47507: IFFALSE 47524
// result := value * - 1 ;
47509: LD_ADDR_VAR 0 2
47513: PUSH
47514: LD_VAR 0 1
47518: PUSH
47519: LD_INT 1
47521: NEG
47522: MUL
47523: ST_TO_ADDR
// end ;
47524: LD_VAR 0 2
47528: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47529: LD_INT 0
47531: PPUSH
47532: PPUSH
47533: PPUSH
47534: PPUSH
47535: PPUSH
47536: PPUSH
47537: PPUSH
47538: PPUSH
// if not unit or not building then
47539: LD_VAR 0 1
47543: NOT
47544: PUSH
47545: LD_VAR 0 2
47549: NOT
47550: OR
47551: IFFALSE 47555
// exit ;
47553: GO 47781
// x := GetX ( building ) ;
47555: LD_ADDR_VAR 0 4
47559: PUSH
47560: LD_VAR 0 2
47564: PPUSH
47565: CALL_OW 250
47569: ST_TO_ADDR
// y := GetY ( building ) ;
47570: LD_ADDR_VAR 0 6
47574: PUSH
47575: LD_VAR 0 2
47579: PPUSH
47580: CALL_OW 251
47584: ST_TO_ADDR
// d := GetDir ( building ) ;
47585: LD_ADDR_VAR 0 8
47589: PUSH
47590: LD_VAR 0 2
47594: PPUSH
47595: CALL_OW 254
47599: ST_TO_ADDR
// r := 4 ;
47600: LD_ADDR_VAR 0 9
47604: PUSH
47605: LD_INT 4
47607: ST_TO_ADDR
// for i := 1 to 5 do
47608: LD_ADDR_VAR 0 10
47612: PUSH
47613: DOUBLE
47614: LD_INT 1
47616: DEC
47617: ST_TO_ADDR
47618: LD_INT 5
47620: PUSH
47621: FOR_TO
47622: IFFALSE 47779
// begin _x := ShiftX ( x , d , r + i ) ;
47624: LD_ADDR_VAR 0 5
47628: PUSH
47629: LD_VAR 0 4
47633: PPUSH
47634: LD_VAR 0 8
47638: PPUSH
47639: LD_VAR 0 9
47643: PUSH
47644: LD_VAR 0 10
47648: PLUS
47649: PPUSH
47650: CALL_OW 272
47654: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47655: LD_ADDR_VAR 0 7
47659: PUSH
47660: LD_VAR 0 6
47664: PPUSH
47665: LD_VAR 0 8
47669: PPUSH
47670: LD_VAR 0 9
47674: PUSH
47675: LD_VAR 0 10
47679: PLUS
47680: PPUSH
47681: CALL_OW 273
47685: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47686: LD_VAR 0 5
47690: PPUSH
47691: LD_VAR 0 7
47695: PPUSH
47696: CALL_OW 488
47700: PUSH
47701: LD_VAR 0 5
47705: PPUSH
47706: LD_VAR 0 7
47710: PPUSH
47711: CALL_OW 428
47715: PPUSH
47716: CALL_OW 247
47720: PUSH
47721: LD_INT 3
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: IN
47731: NOT
47732: AND
47733: IFFALSE 47777
// begin ComMoveXY ( unit , _x , _y ) ;
47735: LD_VAR 0 1
47739: PPUSH
47740: LD_VAR 0 5
47744: PPUSH
47745: LD_VAR 0 7
47749: PPUSH
47750: CALL_OW 111
// result := [ _x , _y ] ;
47754: LD_ADDR_VAR 0 3
47758: PUSH
47759: LD_VAR 0 5
47763: PUSH
47764: LD_VAR 0 7
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: ST_TO_ADDR
// exit ;
47773: POP
47774: POP
47775: GO 47781
// end ; end ;
47777: GO 47621
47779: POP
47780: POP
// end ;
47781: LD_VAR 0 3
47785: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47786: LD_INT 0
47788: PPUSH
47789: PPUSH
47790: PPUSH
// result := 0 ;
47791: LD_ADDR_VAR 0 3
47795: PUSH
47796: LD_INT 0
47798: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47799: LD_VAR 0 1
47803: PUSH
47804: LD_INT 0
47806: LESS
47807: PUSH
47808: LD_VAR 0 1
47812: PUSH
47813: LD_INT 8
47815: GREATER
47816: OR
47817: PUSH
47818: LD_VAR 0 2
47822: PUSH
47823: LD_INT 0
47825: LESS
47826: OR
47827: PUSH
47828: LD_VAR 0 2
47832: PUSH
47833: LD_INT 8
47835: GREATER
47836: OR
47837: IFFALSE 47841
// exit ;
47839: GO 47916
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47841: LD_ADDR_VAR 0 4
47845: PUSH
47846: LD_INT 22
47848: PUSH
47849: LD_VAR 0 2
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PPUSH
47858: CALL_OW 69
47862: PUSH
47863: FOR_IN
47864: IFFALSE 47914
// begin un := UnitShoot ( i ) ;
47866: LD_ADDR_VAR 0 5
47870: PUSH
47871: LD_VAR 0 4
47875: PPUSH
47876: CALL_OW 504
47880: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47881: LD_VAR 0 5
47885: PPUSH
47886: CALL_OW 255
47890: PUSH
47891: LD_VAR 0 1
47895: EQUAL
47896: IFFALSE 47912
// begin result := un ;
47898: LD_ADDR_VAR 0 3
47902: PUSH
47903: LD_VAR 0 5
47907: ST_TO_ADDR
// exit ;
47908: POP
47909: POP
47910: GO 47916
// end ; end ;
47912: GO 47863
47914: POP
47915: POP
// end ;
47916: LD_VAR 0 3
47920: RET
// export function GetCargoBay ( units ) ; begin
47921: LD_INT 0
47923: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47924: LD_ADDR_VAR 0 2
47928: PUSH
47929: LD_VAR 0 1
47933: PPUSH
47934: LD_INT 2
47936: PUSH
47937: LD_INT 34
47939: PUSH
47940: LD_INT 12
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 34
47949: PUSH
47950: LD_INT 51
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 34
47959: PUSH
47960: LD_INT 32
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 34
47969: PUSH
47970: LD_EXP 83
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: PPUSH
47986: CALL_OW 72
47990: ST_TO_ADDR
// end ;
47991: LD_VAR 0 2
47995: RET
// export function Negate ( value ) ; begin
47996: LD_INT 0
47998: PPUSH
// result := not value ;
47999: LD_ADDR_VAR 0 2
48003: PUSH
48004: LD_VAR 0 1
48008: NOT
48009: ST_TO_ADDR
// end ;
48010: LD_VAR 0 2
48014: RET
// export function Inc ( value ) ; begin
48015: LD_INT 0
48017: PPUSH
// result := value + 1 ;
48018: LD_ADDR_VAR 0 2
48022: PUSH
48023: LD_VAR 0 1
48027: PUSH
48028: LD_INT 1
48030: PLUS
48031: ST_TO_ADDR
// end ;
48032: LD_VAR 0 2
48036: RET
// export function Dec ( value ) ; begin
48037: LD_INT 0
48039: PPUSH
// result := value - 1 ;
48040: LD_ADDR_VAR 0 2
48044: PUSH
48045: LD_VAR 0 1
48049: PUSH
48050: LD_INT 1
48052: MINUS
48053: ST_TO_ADDR
// end ;
48054: LD_VAR 0 2
48058: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48059: LD_INT 0
48061: PPUSH
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
48066: PPUSH
48067: PPUSH
48068: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48069: LD_VAR 0 1
48073: PPUSH
48074: LD_VAR 0 2
48078: PPUSH
48079: CALL_OW 488
48083: NOT
48084: PUSH
48085: LD_VAR 0 3
48089: PPUSH
48090: LD_VAR 0 4
48094: PPUSH
48095: CALL_OW 488
48099: NOT
48100: OR
48101: IFFALSE 48114
// begin result := - 1 ;
48103: LD_ADDR_VAR 0 5
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: ST_TO_ADDR
// exit ;
48112: GO 48349
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48114: LD_ADDR_VAR 0 12
48118: PUSH
48119: LD_VAR 0 1
48123: PPUSH
48124: LD_VAR 0 2
48128: PPUSH
48129: LD_VAR 0 3
48133: PPUSH
48134: LD_VAR 0 4
48138: PPUSH
48139: CALL 47197 0 4
48143: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48144: LD_ADDR_VAR 0 11
48148: PUSH
48149: LD_VAR 0 1
48153: PPUSH
48154: LD_VAR 0 2
48158: PPUSH
48159: LD_VAR 0 12
48163: PUSH
48164: LD_INT 1
48166: ARRAY
48167: PPUSH
48168: LD_VAR 0 12
48172: PUSH
48173: LD_INT 2
48175: ARRAY
48176: PPUSH
48177: CALL_OW 298
48181: ST_TO_ADDR
// distance := 9999 ;
48182: LD_ADDR_VAR 0 10
48186: PUSH
48187: LD_INT 9999
48189: ST_TO_ADDR
// for i := 0 to 5 do
48190: LD_ADDR_VAR 0 6
48194: PUSH
48195: DOUBLE
48196: LD_INT 0
48198: DEC
48199: ST_TO_ADDR
48200: LD_INT 5
48202: PUSH
48203: FOR_TO
48204: IFFALSE 48347
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48206: LD_ADDR_VAR 0 7
48210: PUSH
48211: LD_VAR 0 1
48215: PPUSH
48216: LD_VAR 0 6
48220: PPUSH
48221: LD_VAR 0 11
48225: PPUSH
48226: CALL_OW 272
48230: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48231: LD_ADDR_VAR 0 8
48235: PUSH
48236: LD_VAR 0 2
48240: PPUSH
48241: LD_VAR 0 6
48245: PPUSH
48246: LD_VAR 0 11
48250: PPUSH
48251: CALL_OW 273
48255: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48256: LD_VAR 0 7
48260: PPUSH
48261: LD_VAR 0 8
48265: PPUSH
48266: CALL_OW 488
48270: NOT
48271: IFFALSE 48275
// continue ;
48273: GO 48203
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48275: LD_ADDR_VAR 0 9
48279: PUSH
48280: LD_VAR 0 12
48284: PUSH
48285: LD_INT 1
48287: ARRAY
48288: PPUSH
48289: LD_VAR 0 12
48293: PUSH
48294: LD_INT 2
48296: ARRAY
48297: PPUSH
48298: LD_VAR 0 7
48302: PPUSH
48303: LD_VAR 0 8
48307: PPUSH
48308: CALL_OW 298
48312: ST_TO_ADDR
// if tmp < distance then
48313: LD_VAR 0 9
48317: PUSH
48318: LD_VAR 0 10
48322: LESS
48323: IFFALSE 48345
// begin result := i ;
48325: LD_ADDR_VAR 0 5
48329: PUSH
48330: LD_VAR 0 6
48334: ST_TO_ADDR
// distance := tmp ;
48335: LD_ADDR_VAR 0 10
48339: PUSH
48340: LD_VAR 0 9
48344: ST_TO_ADDR
// end ; end ;
48345: GO 48203
48347: POP
48348: POP
// end ;
48349: LD_VAR 0 5
48353: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48354: LD_INT 0
48356: PPUSH
48357: PPUSH
// if not driver or not IsInUnit ( driver ) then
48358: LD_VAR 0 1
48362: NOT
48363: PUSH
48364: LD_VAR 0 1
48368: PPUSH
48369: CALL_OW 310
48373: NOT
48374: OR
48375: IFFALSE 48379
// exit ;
48377: GO 48469
// vehicle := IsInUnit ( driver ) ;
48379: LD_ADDR_VAR 0 3
48383: PUSH
48384: LD_VAR 0 1
48388: PPUSH
48389: CALL_OW 310
48393: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48394: LD_VAR 0 1
48398: PPUSH
48399: LD_STRING \
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: PUSH
48429: LD_STRING E
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_VAR 0 3
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PPUSH
48465: CALL_OW 446
// end ;
48469: LD_VAR 0 2
48473: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48474: LD_INT 0
48476: PPUSH
48477: PPUSH
// if not driver or not IsInUnit ( driver ) then
48478: LD_VAR 0 1
48482: NOT
48483: PUSH
48484: LD_VAR 0 1
48488: PPUSH
48489: CALL_OW 310
48493: NOT
48494: OR
48495: IFFALSE 48499
// exit ;
48497: GO 48589
// vehicle := IsInUnit ( driver ) ;
48499: LD_ADDR_VAR 0 3
48503: PUSH
48504: LD_VAR 0 1
48508: PPUSH
48509: CALL_OW 310
48513: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48514: LD_VAR 0 1
48518: PPUSH
48519: LD_STRING \
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 0
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: PUSH
48549: LD_STRING E
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: LD_VAR 0 3
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PPUSH
48585: CALL_OW 447
// end ;
48589: LD_VAR 0 2
48593: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48594: LD_INT 0
48596: PPUSH
48597: PPUSH
48598: PPUSH
// tmp := [ ] ;
48599: LD_ADDR_VAR 0 5
48603: PUSH
48604: EMPTY
48605: ST_TO_ADDR
// for i in units do
48606: LD_ADDR_VAR 0 4
48610: PUSH
48611: LD_VAR 0 1
48615: PUSH
48616: FOR_IN
48617: IFFALSE 48655
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48619: LD_ADDR_VAR 0 5
48623: PUSH
48624: LD_VAR 0 5
48628: PPUSH
48629: LD_VAR 0 5
48633: PUSH
48634: LD_INT 1
48636: PLUS
48637: PPUSH
48638: LD_VAR 0 4
48642: PPUSH
48643: CALL_OW 256
48647: PPUSH
48648: CALL_OW 2
48652: ST_TO_ADDR
48653: GO 48616
48655: POP
48656: POP
// if not tmp then
48657: LD_VAR 0 5
48661: NOT
48662: IFFALSE 48666
// exit ;
48664: GO 48714
// if asc then
48666: LD_VAR 0 2
48670: IFFALSE 48694
// result := SortListByListAsc ( units , tmp ) else
48672: LD_ADDR_VAR 0 3
48676: PUSH
48677: LD_VAR 0 1
48681: PPUSH
48682: LD_VAR 0 5
48686: PPUSH
48687: CALL_OW 76
48691: ST_TO_ADDR
48692: GO 48714
// result := SortListByListDesc ( units , tmp ) ;
48694: LD_ADDR_VAR 0 3
48698: PUSH
48699: LD_VAR 0 1
48703: PPUSH
48704: LD_VAR 0 5
48708: PPUSH
48709: CALL_OW 77
48713: ST_TO_ADDR
// end ;
48714: LD_VAR 0 3
48718: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48719: LD_INT 0
48721: PPUSH
48722: PPUSH
// task := GetTaskList ( mech ) ;
48723: LD_ADDR_VAR 0 4
48727: PUSH
48728: LD_VAR 0 1
48732: PPUSH
48733: CALL_OW 437
48737: ST_TO_ADDR
// if not task then
48738: LD_VAR 0 4
48742: NOT
48743: IFFALSE 48747
// exit ;
48745: GO 48789
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48747: LD_ADDR_VAR 0 3
48751: PUSH
48752: LD_VAR 0 4
48756: PUSH
48757: LD_INT 1
48759: ARRAY
48760: PUSH
48761: LD_INT 1
48763: ARRAY
48764: PUSH
48765: LD_STRING r
48767: EQUAL
48768: PUSH
48769: LD_VAR 0 4
48773: PUSH
48774: LD_INT 1
48776: ARRAY
48777: PUSH
48778: LD_INT 4
48780: ARRAY
48781: PUSH
48782: LD_VAR 0 2
48786: EQUAL
48787: AND
48788: ST_TO_ADDR
// end ;
48789: LD_VAR 0 3
48793: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48794: LD_INT 0
48796: PPUSH
// SetDir ( unit , d ) ;
48797: LD_VAR 0 1
48801: PPUSH
48802: LD_VAR 0 4
48806: PPUSH
48807: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48811: LD_VAR 0 1
48815: PPUSH
48816: LD_VAR 0 2
48820: PPUSH
48821: LD_VAR 0 3
48825: PPUSH
48826: LD_VAR 0 5
48830: PPUSH
48831: CALL_OW 48
// end ;
48835: LD_VAR 0 6
48839: RET
// export function ToNaturalNumber ( number ) ; begin
48840: LD_INT 0
48842: PPUSH
// result := number div 1 ;
48843: LD_ADDR_VAR 0 2
48847: PUSH
48848: LD_VAR 0 1
48852: PUSH
48853: LD_INT 1
48855: DIV
48856: ST_TO_ADDR
// if number < 0 then
48857: LD_VAR 0 1
48861: PUSH
48862: LD_INT 0
48864: LESS
48865: IFFALSE 48875
// result := 0 ;
48867: LD_ADDR_VAR 0 2
48871: PUSH
48872: LD_INT 0
48874: ST_TO_ADDR
// end ;
48875: LD_VAR 0 2
48879: RET
// export function SortByClass ( units , class ) ; var un ; begin
48880: LD_INT 0
48882: PPUSH
48883: PPUSH
// if not units or not class then
48884: LD_VAR 0 1
48888: NOT
48889: PUSH
48890: LD_VAR 0 2
48894: NOT
48895: OR
48896: IFFALSE 48900
// exit ;
48898: GO 48995
// result := [ ] ;
48900: LD_ADDR_VAR 0 3
48904: PUSH
48905: EMPTY
48906: ST_TO_ADDR
// for un in units do
48907: LD_ADDR_VAR 0 4
48911: PUSH
48912: LD_VAR 0 1
48916: PUSH
48917: FOR_IN
48918: IFFALSE 48993
// if GetClass ( un ) = class then
48920: LD_VAR 0 4
48924: PPUSH
48925: CALL_OW 257
48929: PUSH
48930: LD_VAR 0 2
48934: EQUAL
48935: IFFALSE 48962
// result := Insert ( result , 1 , un ) else
48937: LD_ADDR_VAR 0 3
48941: PUSH
48942: LD_VAR 0 3
48946: PPUSH
48947: LD_INT 1
48949: PPUSH
48950: LD_VAR 0 4
48954: PPUSH
48955: CALL_OW 2
48959: ST_TO_ADDR
48960: GO 48991
// result := Replace ( result , result + 1 , un ) ;
48962: LD_ADDR_VAR 0 3
48966: PUSH
48967: LD_VAR 0 3
48971: PPUSH
48972: LD_VAR 0 3
48976: PUSH
48977: LD_INT 1
48979: PLUS
48980: PPUSH
48981: LD_VAR 0 4
48985: PPUSH
48986: CALL_OW 1
48990: ST_TO_ADDR
48991: GO 48917
48993: POP
48994: POP
// end ;
48995: LD_VAR 0 3
48999: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49000: LD_INT 0
49002: PPUSH
49003: PPUSH
49004: PPUSH
49005: PPUSH
49006: PPUSH
49007: PPUSH
49008: PPUSH
// result := [ ] ;
49009: LD_ADDR_VAR 0 4
49013: PUSH
49014: EMPTY
49015: ST_TO_ADDR
// if x - r < 0 then
49016: LD_VAR 0 1
49020: PUSH
49021: LD_VAR 0 3
49025: MINUS
49026: PUSH
49027: LD_INT 0
49029: LESS
49030: IFFALSE 49042
// min_x := 0 else
49032: LD_ADDR_VAR 0 8
49036: PUSH
49037: LD_INT 0
49039: ST_TO_ADDR
49040: GO 49058
// min_x := x - r ;
49042: LD_ADDR_VAR 0 8
49046: PUSH
49047: LD_VAR 0 1
49051: PUSH
49052: LD_VAR 0 3
49056: MINUS
49057: ST_TO_ADDR
// if y - r < 0 then
49058: LD_VAR 0 2
49062: PUSH
49063: LD_VAR 0 3
49067: MINUS
49068: PUSH
49069: LD_INT 0
49071: LESS
49072: IFFALSE 49084
// min_y := 0 else
49074: LD_ADDR_VAR 0 7
49078: PUSH
49079: LD_INT 0
49081: ST_TO_ADDR
49082: GO 49100
// min_y := y - r ;
49084: LD_ADDR_VAR 0 7
49088: PUSH
49089: LD_VAR 0 2
49093: PUSH
49094: LD_VAR 0 3
49098: MINUS
49099: ST_TO_ADDR
// max_x := x + r ;
49100: LD_ADDR_VAR 0 9
49104: PUSH
49105: LD_VAR 0 1
49109: PUSH
49110: LD_VAR 0 3
49114: PLUS
49115: ST_TO_ADDR
// max_y := y + r ;
49116: LD_ADDR_VAR 0 10
49120: PUSH
49121: LD_VAR 0 2
49125: PUSH
49126: LD_VAR 0 3
49130: PLUS
49131: ST_TO_ADDR
// for _x = min_x to max_x do
49132: LD_ADDR_VAR 0 5
49136: PUSH
49137: DOUBLE
49138: LD_VAR 0 8
49142: DEC
49143: ST_TO_ADDR
49144: LD_VAR 0 9
49148: PUSH
49149: FOR_TO
49150: IFFALSE 49251
// for _y = min_y to max_y do
49152: LD_ADDR_VAR 0 6
49156: PUSH
49157: DOUBLE
49158: LD_VAR 0 7
49162: DEC
49163: ST_TO_ADDR
49164: LD_VAR 0 10
49168: PUSH
49169: FOR_TO
49170: IFFALSE 49247
// begin if not ValidHex ( _x , _y ) then
49172: LD_VAR 0 5
49176: PPUSH
49177: LD_VAR 0 6
49181: PPUSH
49182: CALL_OW 488
49186: NOT
49187: IFFALSE 49191
// continue ;
49189: GO 49169
// if GetResourceTypeXY ( _x , _y ) then
49191: LD_VAR 0 5
49195: PPUSH
49196: LD_VAR 0 6
49200: PPUSH
49201: CALL_OW 283
49205: IFFALSE 49245
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49207: LD_ADDR_VAR 0 4
49211: PUSH
49212: LD_VAR 0 4
49216: PPUSH
49217: LD_VAR 0 4
49221: PUSH
49222: LD_INT 1
49224: PLUS
49225: PPUSH
49226: LD_VAR 0 5
49230: PUSH
49231: LD_VAR 0 6
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PPUSH
49240: CALL_OW 1
49244: ST_TO_ADDR
// end ;
49245: GO 49169
49247: POP
49248: POP
49249: GO 49149
49251: POP
49252: POP
// end ;
49253: LD_VAR 0 4
49257: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49258: LD_INT 0
49260: PPUSH
49261: PPUSH
49262: PPUSH
49263: PPUSH
49264: PPUSH
49265: PPUSH
49266: PPUSH
49267: PPUSH
// if not units then
49268: LD_VAR 0 1
49272: NOT
49273: IFFALSE 49277
// exit ;
49275: GO 49702
// result := UnitFilter ( units , [ f_ok ] ) ;
49277: LD_ADDR_VAR 0 3
49281: PUSH
49282: LD_VAR 0 1
49286: PPUSH
49287: LD_INT 50
49289: PUSH
49290: EMPTY
49291: LIST
49292: PPUSH
49293: CALL_OW 72
49297: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49298: LD_ADDR_VAR 0 8
49302: PUSH
49303: LD_VAR 0 1
49307: PUSH
49308: LD_INT 1
49310: ARRAY
49311: PPUSH
49312: CALL_OW 255
49316: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
49317: LD_ADDR_VAR 0 10
49321: PUSH
49322: LD_INT 29
49324: PUSH
49325: LD_EXP 86
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: ST_TO_ADDR
// if not result then
49334: LD_VAR 0 3
49338: NOT
49339: IFFALSE 49343
// exit ;
49341: GO 49702
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49343: LD_ADDR_VAR 0 5
49347: PUSH
49348: LD_INT 81
49350: PUSH
49351: LD_VAR 0 8
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PPUSH
49360: CALL_OW 69
49364: ST_TO_ADDR
// for i in result do
49365: LD_ADDR_VAR 0 4
49369: PUSH
49370: LD_VAR 0 3
49374: PUSH
49375: FOR_IN
49376: IFFALSE 49700
// begin tag := GetTag ( i ) + 1 ;
49378: LD_ADDR_VAR 0 9
49382: PUSH
49383: LD_VAR 0 4
49387: PPUSH
49388: CALL_OW 110
49392: PUSH
49393: LD_INT 1
49395: PLUS
49396: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
49397: LD_ADDR_VAR 0 7
49401: PUSH
49402: LD_VAR 0 4
49406: PPUSH
49407: CALL_OW 250
49411: PPUSH
49412: LD_VAR 0 4
49416: PPUSH
49417: CALL_OW 251
49421: PPUSH
49422: LD_INT 6
49424: PPUSH
49425: CALL 49000 0 3
49429: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
49430: LD_VAR 0 7
49434: PUSH
49435: LD_VAR 0 4
49439: PPUSH
49440: CALL_OW 264
49444: PUSH
49445: LD_VAR 0 10
49449: IN
49450: NOT
49451: AND
49452: IFFALSE 49491
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49454: LD_VAR 0 4
49458: PPUSH
49459: LD_VAR 0 7
49463: PUSH
49464: LD_INT 1
49466: ARRAY
49467: PUSH
49468: LD_INT 1
49470: ARRAY
49471: PPUSH
49472: LD_VAR 0 7
49476: PUSH
49477: LD_INT 1
49479: ARRAY
49480: PUSH
49481: LD_INT 2
49483: ARRAY
49484: PPUSH
49485: CALL_OW 116
49489: GO 49698
// if path > tag then
49491: LD_VAR 0 2
49495: PUSH
49496: LD_VAR 0 9
49500: GREATER
49501: IFFALSE 49668
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
49503: LD_ADDR_VAR 0 6
49507: PUSH
49508: LD_VAR 0 5
49512: PPUSH
49513: LD_INT 91
49515: PUSH
49516: LD_VAR 0 4
49520: PUSH
49521: LD_INT 12
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: LIST
49528: PPUSH
49529: CALL_OW 72
49533: ST_TO_ADDR
// if nearEnemy then
49534: LD_VAR 0 6
49538: IFFALSE 49566
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49540: LD_VAR 0 4
49544: PPUSH
49545: LD_VAR 0 6
49549: PPUSH
49550: LD_VAR 0 4
49554: PPUSH
49555: CALL_OW 74
49559: PPUSH
49560: CALL_OW 115
49564: GO 49666
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49566: LD_VAR 0 4
49570: PPUSH
49571: LD_VAR 0 2
49575: PUSH
49576: LD_VAR 0 9
49580: ARRAY
49581: PUSH
49582: LD_INT 1
49584: ARRAY
49585: PPUSH
49586: LD_VAR 0 2
49590: PUSH
49591: LD_VAR 0 9
49595: ARRAY
49596: PUSH
49597: LD_INT 2
49599: ARRAY
49600: PPUSH
49601: CALL_OW 297
49605: PUSH
49606: LD_INT 6
49608: GREATER
49609: IFFALSE 49652
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49611: LD_VAR 0 4
49615: PPUSH
49616: LD_VAR 0 2
49620: PUSH
49621: LD_VAR 0 9
49625: ARRAY
49626: PUSH
49627: LD_INT 1
49629: ARRAY
49630: PPUSH
49631: LD_VAR 0 2
49635: PUSH
49636: LD_VAR 0 9
49640: ARRAY
49641: PUSH
49642: LD_INT 2
49644: ARRAY
49645: PPUSH
49646: CALL_OW 114
49650: GO 49666
// SetTag ( i , tag ) ;
49652: LD_VAR 0 4
49656: PPUSH
49657: LD_VAR 0 9
49661: PPUSH
49662: CALL_OW 109
// end else
49666: GO 49698
// if enemy then
49668: LD_VAR 0 5
49672: IFFALSE 49698
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49674: LD_VAR 0 4
49678: PPUSH
49679: LD_VAR 0 5
49683: PPUSH
49684: LD_VAR 0 4
49688: PPUSH
49689: CALL_OW 74
49693: PPUSH
49694: CALL_OW 115
// end ;
49698: GO 49375
49700: POP
49701: POP
// end ;
49702: LD_VAR 0 3
49706: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49707: LD_INT 0
49709: PPUSH
49710: PPUSH
49711: PPUSH
// if not unit or IsInUnit ( unit ) then
49712: LD_VAR 0 1
49716: NOT
49717: PUSH
49718: LD_VAR 0 1
49722: PPUSH
49723: CALL_OW 310
49727: OR
49728: IFFALSE 49732
// exit ;
49730: GO 49823
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49732: LD_ADDR_VAR 0 4
49736: PUSH
49737: LD_VAR 0 1
49741: PPUSH
49742: CALL_OW 250
49746: PPUSH
49747: LD_VAR 0 2
49751: PPUSH
49752: LD_INT 1
49754: PPUSH
49755: CALL_OW 272
49759: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49760: LD_ADDR_VAR 0 5
49764: PUSH
49765: LD_VAR 0 1
49769: PPUSH
49770: CALL_OW 251
49774: PPUSH
49775: LD_VAR 0 2
49779: PPUSH
49780: LD_INT 1
49782: PPUSH
49783: CALL_OW 273
49787: ST_TO_ADDR
// if ValidHex ( x , y ) then
49788: LD_VAR 0 4
49792: PPUSH
49793: LD_VAR 0 5
49797: PPUSH
49798: CALL_OW 488
49802: IFFALSE 49823
// ComTurnXY ( unit , x , y ) ;
49804: LD_VAR 0 1
49808: PPUSH
49809: LD_VAR 0 4
49813: PPUSH
49814: LD_VAR 0 5
49818: PPUSH
49819: CALL_OW 118
// end ;
49823: LD_VAR 0 3
49827: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49828: LD_INT 0
49830: PPUSH
49831: PPUSH
// result := false ;
49832: LD_ADDR_VAR 0 3
49836: PUSH
49837: LD_INT 0
49839: ST_TO_ADDR
// if not units then
49840: LD_VAR 0 2
49844: NOT
49845: IFFALSE 49849
// exit ;
49847: GO 49894
// for i in units do
49849: LD_ADDR_VAR 0 4
49853: PUSH
49854: LD_VAR 0 2
49858: PUSH
49859: FOR_IN
49860: IFFALSE 49892
// if See ( side , i ) then
49862: LD_VAR 0 1
49866: PPUSH
49867: LD_VAR 0 4
49871: PPUSH
49872: CALL_OW 292
49876: IFFALSE 49890
// begin result := true ;
49878: LD_ADDR_VAR 0 3
49882: PUSH
49883: LD_INT 1
49885: ST_TO_ADDR
// exit ;
49886: POP
49887: POP
49888: GO 49894
// end ;
49890: GO 49859
49892: POP
49893: POP
// end ;
49894: LD_VAR 0 3
49898: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49899: LD_INT 0
49901: PPUSH
49902: PPUSH
49903: PPUSH
49904: PPUSH
// if not unit or not points then
49905: LD_VAR 0 1
49909: NOT
49910: PUSH
49911: LD_VAR 0 2
49915: NOT
49916: OR
49917: IFFALSE 49921
// exit ;
49919: GO 50011
// dist := 99999 ;
49921: LD_ADDR_VAR 0 5
49925: PUSH
49926: LD_INT 99999
49928: ST_TO_ADDR
// for i in points do
49929: LD_ADDR_VAR 0 4
49933: PUSH
49934: LD_VAR 0 2
49938: PUSH
49939: FOR_IN
49940: IFFALSE 50009
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49942: LD_ADDR_VAR 0 6
49946: PUSH
49947: LD_VAR 0 1
49951: PPUSH
49952: LD_VAR 0 4
49956: PUSH
49957: LD_INT 1
49959: ARRAY
49960: PPUSH
49961: LD_VAR 0 4
49965: PUSH
49966: LD_INT 2
49968: ARRAY
49969: PPUSH
49970: CALL_OW 297
49974: ST_TO_ADDR
// if tmpDist < dist then
49975: LD_VAR 0 6
49979: PUSH
49980: LD_VAR 0 5
49984: LESS
49985: IFFALSE 50007
// begin result := i ;
49987: LD_ADDR_VAR 0 3
49991: PUSH
49992: LD_VAR 0 4
49996: ST_TO_ADDR
// dist := tmpDist ;
49997: LD_ADDR_VAR 0 5
50001: PUSH
50002: LD_VAR 0 6
50006: ST_TO_ADDR
// end ; end ;
50007: GO 49939
50009: POP
50010: POP
// end ;
50011: LD_VAR 0 3
50015: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50016: LD_INT 0
50018: PPUSH
// uc_side := side ;
50019: LD_ADDR_OWVAR 20
50023: PUSH
50024: LD_VAR 0 1
50028: ST_TO_ADDR
// uc_nation := 3 ;
50029: LD_ADDR_OWVAR 21
50033: PUSH
50034: LD_INT 3
50036: ST_TO_ADDR
// vc_chassis := 25 ;
50037: LD_ADDR_OWVAR 37
50041: PUSH
50042: LD_INT 25
50044: ST_TO_ADDR
// vc_engine := engine_siberite ;
50045: LD_ADDR_OWVAR 39
50049: PUSH
50050: LD_INT 3
50052: ST_TO_ADDR
// vc_control := control_computer ;
50053: LD_ADDR_OWVAR 38
50057: PUSH
50058: LD_INT 3
50060: ST_TO_ADDR
// vc_weapon := 59 ;
50061: LD_ADDR_OWVAR 40
50065: PUSH
50066: LD_INT 59
50068: ST_TO_ADDR
// result := CreateVehicle ;
50069: LD_ADDR_VAR 0 5
50073: PUSH
50074: CALL_OW 45
50078: ST_TO_ADDR
// SetDir ( result , d ) ;
50079: LD_VAR 0 5
50083: PPUSH
50084: LD_VAR 0 4
50088: PPUSH
50089: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50093: LD_VAR 0 5
50097: PPUSH
50098: LD_VAR 0 2
50102: PPUSH
50103: LD_VAR 0 3
50107: PPUSH
50108: LD_INT 0
50110: PPUSH
50111: CALL_OW 48
// end ;
50115: LD_VAR 0 5
50119: RET
