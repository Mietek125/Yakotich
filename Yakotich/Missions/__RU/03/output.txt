// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 66 0 0
// SetBname ( Ovsyenko , Ovsyenko ) ;
   8: LD_INT 74
  10: PPUSH
  11: LD_STRING Ovsyenko
  13: PPUSH
  14: CALL_OW 500
// AnimateTrees ( true ) ;
  18: LD_INT 1
  20: PPUSH
  21: CALL_OW 573
// Randomize ;
  25: CALL_OW 10
// RandomizeAll ;
  29: CALL_OW 11
// InitGlobalVariables ;
  33: CALL 51265 0 0
// InitRussian ;
  37: CALL 1329 0 0
// Action ;
  41: CALL 5377 0 0
// InitAmerican ;
  45: CALL 4350 0 0
// InitTerminal ;
  49: CALL 3757 0 0
// DebugMode ;
  53: CALL 235 0 0
// game_speed = 6 ;
  57: LD_ADDR_OWVAR 65
  61: PUSH
  62: LD_INT 6
  64: ST_TO_ADDR
// end ;
  65: END
// export DimitriCrew , YakotichCrew , BurlakCrew , SikorskiTeam , WestTerminalCrew , MainTerminalCrew , newAttackers , Attackers ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Dimitri , Ivan , Jegor , Grigori , Anton , RusSol ; export Sevi , SeviGuy1 , SeviGuy2 , SeviGuy3 ; export Burlak , Karamazov , Petrovova , Lipshchin , Gleb , Titov , Petrosyan , Dolgov ; export BurlakVeh , KaramazovVeh , BurlakCrewVeh1 , BurlakCrewVeh2 , BurlakCrewVeh3 , BurlakCrewVeh4 , BurlakCrewVeh5 , BurlakCrewVeh6 ; export Sikorski , SikorskiMeat , Truman , Bobby , Cyrus , Gary , Lynch , McCreery , Walker , Jilian , Turner , Houten , NorthSold ; export Morozov , Platonov ; export FlameCounter ; export BurlakTime , DepotCaptureTime ; export debug ; export mission_prefix ; export cutscene_ended , ovsyenko_captured , start_ended , lab_seen , lab_captured , rocket_researched , prediction_researched , buldozer_researched , flametank_saved , siberit_excavated , sikorski_dead , everything_researched , crane_triggered , crane_researched , end_of_the_mission , weapon_builded ; function Init ; begin
  66: LD_INT 0
  68: PPUSH
// mission_prefix := 03_ ;
  69: LD_ADDR_EXP 68
  73: PUSH
  74: LD_STRING 03_
  76: ST_TO_ADDR
// cutscene_ended = false ;
  77: LD_ADDR_EXP 69
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// ovsyenko_captured = false ;
  85: LD_ADDR_EXP 70
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// start_ended = false ;
  93: LD_ADDR_EXP 71
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// rocket_researched = false ;
 101: LD_ADDR_EXP 74
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// buldozer_researched = false ;
 109: LD_ADDR_EXP 76
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// prediction_researched = false ;
 117: LD_ADDR_EXP 75
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// flametank_saved = false ;
 125: LD_ADDR_EXP 77
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// crane_triggered = false ;
 133: LD_ADDR_EXP 81
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// crane_researched = false ;
 141: LD_ADDR_EXP 82
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// lab_seen = false ;
 149: LD_ADDR_EXP 72
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// lab_captured = false ;
 157: LD_ADDR_EXP 73
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// everything_researched = false ;
 165: LD_ADDR_EXP 80
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// end_of_the_mission = false ;
 173: LD_ADDR_EXP 83
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// weapon_builded = false ;
 181: LD_ADDR_EXP 84
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// BurlakTime := [ 15 15$0 , 17 17$30 , 20 20$0 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 65
 193: PUSH
 194: LD_INT 31500
 196: PUSH
 197: LD_INT 36750
 199: PUSH
 200: LD_INT 42000
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// DepotCaptureTime := 10 10$0 ;
 214: LD_ADDR_EXP 66
 218: PUSH
 219: LD_INT 21000
 221: ST_TO_ADDR
// FlameCounter := 0 ;
 222: LD_ADDR_EXP 64
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// end ;
 230: LD_VAR 0 1
 234: RET
// export function DebugMode ; begin
 235: LD_INT 0
 237: PPUSH
// if Debug = true then
 238: LD_EXP 67
 242: PUSH
 243: LD_INT 1
 245: EQUAL
 246: IFFALSE 267
// begin Difficulty := 3 ;
 248: LD_ADDR_OWVAR 67
 252: PUSH
 253: LD_INT 3
 255: ST_TO_ADDR
// TurnFogOff ( ) ;
 256: CALL_OW 537
// FogOff ( 3 ) ;
 260: LD_INT 3
 262: PPUSH
 263: CALL_OW 344
// end ; end ; end_of_file
 267: LD_VAR 0 1
 271: RET
// export function siblo ( side ) ; var i , tmp ; begin
 272: LD_INT 0
 274: PPUSH
 275: PPUSH
 276: PPUSH
// result := 0 ;
 277: LD_ADDR_VAR 0 2
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
 285: LD_ADDR_VAR 0 4
 289: PUSH
 290: LD_INT 22
 292: PUSH
 293: LD_VAR 0 1
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 2
 304: PUSH
 305: LD_INT 30
 307: PUSH
 308: LD_INT 0
 310: PUSH
 311: EMPTY
 312: LIST
 313: LIST
 314: PUSH
 315: LD_INT 30
 317: PUSH
 318: LD_INT 1
 320: PUSH
 321: EMPTY
 322: LIST
 323: LIST
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: LIST
 329: PUSH
 330: EMPTY
 331: LIST
 332: LIST
 333: PPUSH
 334: CALL_OW 69
 338: ST_TO_ADDR
// if not tmp then
 339: LD_VAR 0 4
 343: NOT
 344: IFFALSE 348
// exit ;
 346: GO 394
// for i in tmp do
 348: LD_ADDR_VAR 0 3
 352: PUSH
 353: LD_VAR 0 4
 357: PUSH
 358: FOR_IN
 359: IFFALSE 392
// result := result + GetResourceType ( GetBase ( i ) , mat_siberit ) ;
 361: LD_ADDR_VAR 0 2
 365: PUSH
 366: LD_VAR 0 2
 370: PUSH
 371: LD_VAR 0 3
 375: PPUSH
 376: CALL_OW 274
 380: PPUSH
 381: LD_INT 3
 383: PPUSH
 384: CALL_OW 275
 388: PLUS
 389: ST_TO_ADDR
 390: GO 358
 392: POP
 393: POP
// end ;
 394: LD_VAR 0 2
 398: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 399: LD_INT 0
 401: PPUSH
 402: PPUSH
 403: PPUSH
// uc_side := GetSide ( b ) ;
 404: LD_ADDR_OWVAR 20
 408: PUSH
 409: LD_VAR 0 2
 413: PPUSH
 414: CALL_OW 255
 418: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 419: LD_ADDR_OWVAR 21
 423: PUSH
 424: LD_VAR 0 2
 428: PPUSH
 429: CALL_OW 248
 433: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 434: LD_ADDR_VAR 0 5
 438: PUSH
 439: LD_VAR 0 2
 443: PPUSH
 444: CALL_OW 254
 448: PUSH
 449: LD_INT 3
 451: MINUS
 452: ST_TO_ADDR
// if dir < 0 then
 453: LD_VAR 0 5
 457: PUSH
 458: LD_INT 0
 460: LESS
 461: IFFALSE 477
// dir := 6 + dir ;
 463: LD_ADDR_VAR 0 5
 467: PUSH
 468: LD_INT 6
 470: PUSH
 471: LD_VAR 0 5
 475: PLUS
 476: ST_TO_ADDR
// un := CreateHuman ;
 477: LD_ADDR_VAR 0 4
 481: PUSH
 482: CALL_OW 44
 486: ST_TO_ADDR
// SetDir ( un , dir ) ;
 487: LD_VAR 0 4
 491: PPUSH
 492: LD_VAR 0 5
 496: PPUSH
 497: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 501: LD_VAR 0 4
 505: PPUSH
 506: LD_VAR 0 2
 510: PPUSH
 511: CALL_OW 52
// end ;
 515: LD_VAR 0 3
 519: RET
// export function GetClassFromStart ( ident ) ; var un ; begin
 520: LD_INT 0
 522: PPUSH
 523: PPUSH
// un := NewCharacter ( ident ) ;
 524: LD_ADDR_VAR 0 3
 528: PUSH
 529: LD_VAR 0 1
 533: PPUSH
 534: CALL_OW 25
 538: ST_TO_ADDR
// if not un then
 539: LD_VAR 0 3
 543: NOT
 544: IFFALSE 548
// exit ;
 546: GO 572
// result := GetClass ( un ) ;
 548: LD_ADDR_VAR 0 2
 552: PUSH
 553: LD_VAR 0 3
 557: PPUSH
 558: CALL_OW 257
 562: ST_TO_ADDR
// DestroyUnit ( un ) ;
 563: LD_VAR 0 3
 567: PPUSH
 568: CALL_OW 65
// end ;
 572: LD_VAR 0 2
 576: RET
// every 1 trigger IsSelected ( Kvantovy ) do
 577: LD_INT 160
 579: PPUSH
 580: CALL_OW 306
 584: IFFALSE 688
 586: GO 588
 588: DISABLE
// begin KvantovyExp ( [ 1 , 2 , 3 , 4 ] ) ;
 589: LD_INT 1
 591: PUSH
 592: LD_INT 2
 594: PUSH
 595: LD_INT 3
 597: PUSH
 598: LD_INT 4
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: PPUSH
 607: CALL 689 0 1
// Wait ( 0 0$05 ) ;
 611: LD_INT 175
 613: PPUSH
 614: CALL_OW 67
// Say ( Kvantovy , 3Kvantovy-Sikret ) ;
 618: LD_INT 160
 620: PPUSH
 621: LD_STRING 3Kvantovy-Sikret
 623: PPUSH
 624: CALL_OW 88
// TeleportUnit ( Kvantovy , 120 , 237 , 300 , true ) ;
 628: LD_INT 160
 630: PPUSH
 631: LD_INT 120
 633: PPUSH
 634: LD_INT 237
 636: PPUSH
 637: LD_INT 300
 639: PPUSH
 640: LD_INT 1
 642: PPUSH
 643: CALL_OW 483
// Wait ( 0 0$05 ) ;
 647: LD_INT 175
 649: PPUSH
 650: CALL_OW 67
// RemoveUnit ( Kvantovy ) ;
 654: LD_INT 160
 656: PPUSH
 657: CALL_OW 64
// SaveVariable ( 1 , KvantovySaved ) ;
 661: LD_INT 1
 663: PPUSH
 664: LD_STRING KvantovySaved
 666: PPUSH
 667: CALL_OW 39
// SaveCharacters ( Kvantovy , Kvantovy ) ;
 671: LD_INT 160
 673: PPUSH
 674: LD_STRING Kvantovy
 676: PPUSH
 677: CALL_OW 38
// SetAchievement ( ACH_KVANTOVY ) ;
 681: LD_STRING ACH_KVANTOVY
 683: PPUSH
 684: CALL_OW 543
// end ;
 688: END
// export function KvantovyExp ( q ) ; var dec , q1 ; begin
 689: LD_INT 0
 691: PPUSH
 692: PPUSH
 693: PPUSH
// dec = SelectiveQuery ( KvantovyQuery , q ) ;
 694: LD_ADDR_VAR 0 3
 698: PUSH
 699: LD_STRING KvantovyQuery
 701: PPUSH
 702: LD_VAR 0 1
 706: PPUSH
 707: CALL_OW 98
 711: ST_TO_ADDR
// case dec of 1 :
 712: LD_VAR 0 3
 716: PUSH
 717: LD_INT 1
 719: DOUBLE
 720: EQUAL
 721: IFTRUE 725
 723: GO 743
 725: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 1500 ) ;
 726: LD_EXP 9
 730: PPUSH
 731: LD_INT 1
 733: PPUSH
 734: LD_INT 1500
 736: PPUSH
 737: CALL_OW 591
// end ; 2 :
 741: GO 822
 743: LD_INT 2
 745: DOUBLE
 746: EQUAL
 747: IFTRUE 751
 749: GO 769
 751: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 1500 ) ;
 752: LD_EXP 9
 756: PPUSH
 757: LD_INT 2
 759: PPUSH
 760: LD_INT 1500
 762: PPUSH
 763: CALL_OW 591
// end ; 3 :
 767: GO 822
 769: LD_INT 3
 771: DOUBLE
 772: EQUAL
 773: IFTRUE 777
 775: GO 795
 777: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 1500 ) ;
 778: LD_EXP 9
 782: PPUSH
 783: LD_INT 3
 785: PPUSH
 786: LD_INT 1500
 788: PPUSH
 789: CALL_OW 591
// end ; 4 :
 793: GO 822
 795: LD_INT 4
 797: DOUBLE
 798: EQUAL
 799: IFTRUE 803
 801: GO 821
 803: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 1500 ) ;
 804: LD_EXP 9
 808: PPUSH
 809: LD_INT 4
 811: PPUSH
 812: LD_INT 1500
 814: PPUSH
 815: CALL_OW 591
// end ; end ;
 819: GO 822
 821: POP
// end ;
 822: LD_VAR 0 2
 826: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
 827: LD_EXP 9
 831: PPUSH
 832: CALL_OW 301
 836: IFFALSE 848
 838: GO 840
 840: DISABLE
// begin YouLost ( YakotichDead ) ;
 841: LD_STRING YakotichDead
 843: PPUSH
 844: CALL_OW 104
// end ;
 848: END
// every 0 0$1 trigger IsDead ( Mietek ) do
 849: LD_EXP 10
 853: PPUSH
 854: CALL_OW 301
 858: IFFALSE 870
 860: GO 862
 862: DISABLE
// begin YouLost ( MietekDead ) ;
 863: LD_STRING MietekDead
 865: PPUSH
 866: CALL_OW 104
// end ;
 870: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
 871: LD_VAR 0 1
 875: PUSH
 876: LD_INT 22
 878: PUSH
 879: LD_INT 3
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 3
 888: PUSH
 889: LD_INT 23
 891: PUSH
 892: LD_INT 0
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 21
 905: PUSH
 906: LD_INT 1
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: IN
 923: IFFALSE 932
// YouLost ( PeopleDead ) ;
 925: LD_STRING PeopleDead
 927: PPUSH
 928: CALL_OW 104
// end ;
 932: PPOPN 1
 934: END
// every 0 0$1 trigger IsDead ( Ovsyenko ) do
 935: LD_INT 74
 937: PPUSH
 938: CALL_OW 301
 942: IFFALSE 954
 944: GO 946
 946: DISABLE
// begin YouLost ( OvsyenkoDead ) ;
 947: LD_STRING OvsyenkoDead
 949: PPUSH
 950: CALL_OW 104
// end ;
 954: END
// every 1 trigger start_ended = false do
 955: LD_EXP 71
 959: PUSH
 960: LD_INT 0
 962: EQUAL
 963: IFFALSE 1107
 965: GO 967
 967: DISABLE
// begin SetLives ( [ Gary , Bobby , Cyrus , Lynch , Walker , McCreery , Jilian , Turner ] , 1000 ) ;
 968: LD_EXP 54
 972: PUSH
 973: LD_EXP 52
 977: PUSH
 978: LD_EXP 53
 982: PUSH
 983: LD_EXP 55
 987: PUSH
 988: LD_EXP 57
 992: PUSH
 993: LD_EXP 56
 997: PUSH
 998: LD_EXP 58
1002: PUSH
1003: LD_EXP 59
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PPUSH
1018: LD_INT 1000
1020: PPUSH
1021: CALL_OW 234
// SetLives ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 1000 ) ;
1025: LD_INT 22
1027: PUSH
1028: LD_INT 3
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 21
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PPUSH
1049: CALL_OW 69
1053: PPUSH
1054: LD_INT 1000
1056: PPUSH
1057: CALL_OW 234
// SetLives ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) , 1000 ) ;
1061: LD_INT 22
1063: PUSH
1064: LD_INT 3
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: LD_INT 21
1073: PUSH
1074: LD_INT 2
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: PUSH
1081: EMPTY
1082: LIST
1083: LIST
1084: PPUSH
1085: CALL_OW 69
1089: PPUSH
1090: LD_INT 1000
1092: PPUSH
1093: CALL_OW 234
// CenterOnUnits ( Yakotich ) ;
1097: LD_EXP 9
1101: PPUSH
1102: CALL_OW 85
// enable ;
1106: ENABLE
// end ;
1107: END
// every 0 0$1 trigger ovsyenko_captured = true do
1108: LD_EXP 70
1112: PUSH
1113: LD_INT 1
1115: EQUAL
1116: IFFALSE 1176
1118: GO 1120
1120: DISABLE
// begin if BurlakTime then
1121: LD_EXP 65
1125: IFFALSE 1166
// begin BurlakTime := BurlakTime - 0 0$1 ;
1127: LD_ADDR_EXP 65
1131: PUSH
1132: LD_EXP 65
1136: PUSH
1137: LD_INT 35
1139: MINUS
1140: ST_TO_ADDR
// display_strings := display_strings ^ [ #BurlakForces , BurlakTime ] ;
1141: LD_ADDR_OWVAR 47
1145: PUSH
1146: LD_OWVAR 47
1150: PUSH
1151: LD_STRING #BurlakForces
1153: PUSH
1154: LD_EXP 65
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: ADD
1163: ST_TO_ADDR
// end else
1164: GO 1175
// begin display_strings :=  ;
1166: LD_ADDR_OWVAR 47
1170: PUSH
1171: LD_STRING 
1173: ST_TO_ADDR
// disable ;
1174: DISABLE
// end ; enable ;
1175: ENABLE
// end ;
1176: END
// every 1 trigger ovsyenko_captured = false and FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
1177: LD_EXP 70
1181: PUSH
1182: LD_INT 0
1184: EQUAL
1185: PUSH
1186: LD_INT 18
1188: PPUSH
1189: LD_INT 22
1191: PUSH
1192: LD_INT 3
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 2
1201: PUSH
1202: LD_INT 21
1204: PUSH
1205: LD_INT 1
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: PUSH
1212: LD_INT 21
1214: PUSH
1215: LD_INT 2
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PPUSH
1231: CALL_OW 70
1235: PUSH
1236: LD_INT 0
1238: GREATER
1239: AND
1240: IFFALSE 1326
1242: GO 1244
1244: DISABLE
1245: LD_INT 0
1247: PPUSH
// begin enable ;
1248: ENABLE
// for unit in FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
1249: LD_ADDR_VAR 0 1
1253: PUSH
1254: LD_INT 18
1256: PPUSH
1257: LD_INT 22
1259: PUSH
1260: LD_INT 3
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 2
1269: PUSH
1270: LD_INT 21
1272: PUSH
1273: LD_INT 1
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 21
1282: PUSH
1283: LD_INT 2
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: LIST
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 70
1303: PUSH
1304: FOR_IN
1305: IFFALSE 1324
// begin ComMoveXY ( unit , 101 , 116 ) ;
1307: LD_VAR 0 1
1311: PPUSH
1312: LD_INT 101
1314: PPUSH
1315: LD_INT 116
1317: PPUSH
1318: CALL_OW 111
// end ;
1322: GO 1304
1324: POP
1325: POP
// end ; end_of_file
1326: PPOPN 1
1328: END
// export function InitRussian ; begin
1329: LD_INT 0
1331: PPUSH
// Uc_Nation := 3 ;
1332: LD_ADDR_OWVAR 21
1336: PUSH
1337: LD_INT 3
1339: ST_TO_ADDR
// Uc_Side := 3 ;
1340: LD_ADDR_OWVAR 20
1344: PUSH
1345: LD_INT 3
1347: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 02_ ) ;
1348: LD_ADDR_EXP 9
1352: PUSH
1353: LD_STRING Yakotich
1355: PPUSH
1356: LD_INT 1
1358: PPUSH
1359: LD_STRING 02_
1361: PPUSH
1362: CALL 10100 0 3
1366: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 02_ ) ;
1367: LD_ADDR_EXP 10
1371: PUSH
1372: LD_STRING Mietek
1374: PPUSH
1375: LD_INT 1
1377: PPUSH
1378: LD_STRING 02_
1380: PPUSH
1381: CALL 10100 0 3
1385: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 02_ ) ;
1386: LD_ADDR_EXP 11
1390: PUSH
1391: LD_STRING Boris
1393: PPUSH
1394: LD_INT 1
1396: PPUSH
1397: LD_STRING 02_
1399: PPUSH
1400: CALL 10100 0 3
1404: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 02_ ) ;
1405: LD_ADDR_EXP 13
1409: PUSH
1410: LD_STRING Michail
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: LD_STRING 02_
1418: PPUSH
1419: CALL 10100 0 3
1423: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 02_ ) ;
1424: LD_ADDR_EXP 12
1428: PUSH
1429: LD_STRING Vasilij
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: LD_STRING 02_
1437: PPUSH
1438: CALL 10100 0 3
1442: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 02_ ) ;
1443: LD_ADDR_EXP 14
1447: PUSH
1448: LD_STRING Constantin
1450: PPUSH
1451: LD_INT 1
1453: PPUSH
1454: LD_STRING 02_
1456: PPUSH
1457: CALL 10100 0 3
1461: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 02_ ) ;
1462: LD_ADDR_EXP 15
1466: PUSH
1467: LD_STRING Maksim
1469: PPUSH
1470: LD_INT 1
1472: PPUSH
1473: LD_STRING 02_
1475: PPUSH
1476: CALL 10100 0 3
1480: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 02_ ) ;
1481: LD_ADDR_EXP 16
1485: PUSH
1486: LD_STRING Fiodor
1488: PPUSH
1489: LD_INT 1
1491: PPUSH
1492: LD_STRING 02_
1494: PPUSH
1495: CALL 10100 0 3
1499: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 02_ ) ;
1500: LD_ADDR_EXP 19
1504: PUSH
1505: LD_STRING Aleksiej
1507: PPUSH
1508: LD_INT 1
1510: PPUSH
1511: LD_STRING 02_
1513: PPUSH
1514: CALL 10100 0 3
1518: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 02_ ) ;
1519: LD_ADDR_EXP 17
1523: PUSH
1524: LD_STRING Pavel
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: LD_STRING 02_
1532: PPUSH
1533: CALL 10100 0 3
1537: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 02_ ) ;
1538: LD_ADDR_EXP 18
1542: PUSH
1543: LD_STRING Zakhar
1545: PPUSH
1546: LD_INT 1
1548: PPUSH
1549: LD_STRING 02_
1551: PPUSH
1552: CALL 10100 0 3
1556: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 02_ ) ;
1557: LD_ADDR_EXP 20
1561: PUSH
1562: LD_STRING Aleksandr
1564: PPUSH
1565: LD_INT 1
1567: PPUSH
1568: LD_STRING 02_
1570: PPUSH
1571: CALL 10100 0 3
1575: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , true , 02_ ) ;
1576: LD_ADDR_EXP 22
1580: PUSH
1581: LD_STRING Stanislav
1583: PPUSH
1584: LD_INT 1
1586: PPUSH
1587: LD_STRING 02_
1589: PPUSH
1590: CALL 10100 0 3
1594: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , true , 02_ ) ;
1595: LD_ADDR_EXP 21
1599: PUSH
1600: LD_STRING Josif
1602: PPUSH
1603: LD_INT 1
1605: PPUSH
1606: LD_STRING 02_
1608: PPUSH
1609: CALL 10100 0 3
1613: ST_TO_ADDR
// SetClass ( [ Yakotich , Mietek , Constantin , Maksim , Fiodor , Aleksiej , Zakhar , Aleksandr , Josif ] , 1 ) ;
1614: LD_EXP 9
1618: PUSH
1619: LD_EXP 10
1623: PUSH
1624: LD_EXP 14
1628: PUSH
1629: LD_EXP 15
1633: PUSH
1634: LD_EXP 16
1638: PUSH
1639: LD_EXP 19
1643: PUSH
1644: LD_EXP 18
1648: PUSH
1649: LD_EXP 20
1653: PUSH
1654: LD_EXP 21
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: LIST
1667: LIST
1668: LIST
1669: PPUSH
1670: LD_INT 1
1672: PPUSH
1673: CALL_OW 336
// SetClass ( Boris , 2 ) ;
1677: LD_EXP 11
1681: PPUSH
1682: LD_INT 2
1684: PPUSH
1685: CALL_OW 336
// SetClass ( [ Michail , Pavel ] , 3 ) ;
1689: LD_EXP 13
1693: PUSH
1694: LD_EXP 17
1698: PUSH
1699: EMPTY
1700: LIST
1701: LIST
1702: PPUSH
1703: LD_INT 3
1705: PPUSH
1706: CALL_OW 336
// SetClass ( [ Stanislav , Vasilij ] , 4 ) ;
1710: LD_EXP 22
1714: PUSH
1715: LD_EXP 12
1719: PUSH
1720: EMPTY
1721: LIST
1722: LIST
1723: PPUSH
1724: LD_INT 4
1726: PPUSH
1727: CALL_OW 336
// PlaceUnitArea ( Yakotich , EnterArea , false ) ;
1731: LD_EXP 9
1735: PPUSH
1736: LD_INT 1
1738: PPUSH
1739: LD_INT 0
1741: PPUSH
1742: CALL_OW 49
// PlaceUnitArea ( Mietek , EnterArea , false ) ;
1746: LD_EXP 10
1750: PPUSH
1751: LD_INT 1
1753: PPUSH
1754: LD_INT 0
1756: PPUSH
1757: CALL_OW 49
// PlaceUnitArea ( Boris , EnterArea , false ) ;
1761: LD_EXP 11
1765: PPUSH
1766: LD_INT 1
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 49
// PlaceUnitArea ( Michail , EnterArea , false ) ;
1776: LD_EXP 13
1780: PPUSH
1781: LD_INT 1
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL_OW 49
// PlaceUnitArea ( Vasilij , EnterArea , false ) ;
1791: LD_EXP 12
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 0
1801: PPUSH
1802: CALL_OW 49
// PlaceUnitArea ( Constantin , EnterArea , false ) ;
1806: LD_EXP 14
1810: PPUSH
1811: LD_INT 1
1813: PPUSH
1814: LD_INT 0
1816: PPUSH
1817: CALL_OW 49
// PlaceUnitArea ( Maksim , EnterArea , false ) ;
1821: LD_EXP 15
1825: PPUSH
1826: LD_INT 1
1828: PPUSH
1829: LD_INT 0
1831: PPUSH
1832: CALL_OW 49
// PlaceUnitArea ( Fiodor , EnterArea , false ) ;
1836: LD_EXP 16
1840: PPUSH
1841: LD_INT 1
1843: PPUSH
1844: LD_INT 0
1846: PPUSH
1847: CALL_OW 49
// PlaceUnitArea ( Pavel , EnterArea , false ) ;
1851: LD_EXP 17
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 49
// PlaceUnitArea ( Zakhar , EnterArea , false ) ;
1866: LD_EXP 18
1870: PPUSH
1871: LD_INT 1
1873: PPUSH
1874: LD_INT 0
1876: PPUSH
1877: CALL_OW 49
// PlaceUnitArea ( Aleksandr , EnterArea , false ) ;
1881: LD_EXP 20
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_INT 0
1891: PPUSH
1892: CALL_OW 49
// PlaceUnitArea ( Stanislav , EnterArea , false ) ;
1896: LD_EXP 22
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 0
1906: PPUSH
1907: CALL_OW 49
// PlaceUnitArea ( Josif , EnterArea , false ) ;
1911: LD_EXP 21
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: LD_INT 0
1921: PPUSH
1922: CALL_OW 49
// Dimitri := PrepareUnit ( Dimitri , false ,  ) ;
1926: LD_ADDR_EXP 23
1930: PUSH
1931: LD_STRING Dimitri
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: LD_STRING 
1939: PPUSH
1940: CALL 10100 0 3
1944: ST_TO_ADDR
// Ivan := PrepareUnit ( Ivan , false ,  ) ;
1945: LD_ADDR_EXP 24
1949: PUSH
1950: LD_STRING Ivan
1952: PPUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_STRING 
1958: PPUSH
1959: CALL 10100 0 3
1963: ST_TO_ADDR
// Jegor := PrepareUnit ( Jegor , false ,  ) ;
1964: LD_ADDR_EXP 25
1968: PUSH
1969: LD_STRING Jegor
1971: PPUSH
1972: LD_INT 0
1974: PPUSH
1975: LD_STRING 
1977: PPUSH
1978: CALL 10100 0 3
1982: ST_TO_ADDR
// Grigori := PrepareUnit ( Grigori , false ,  ) ;
1983: LD_ADDR_EXP 26
1987: PUSH
1988: LD_STRING Grigori
1990: PPUSH
1991: LD_INT 0
1993: PPUSH
1994: LD_STRING 
1996: PPUSH
1997: CALL 10100 0 3
2001: ST_TO_ADDR
// Anton := PrepareUnit ( Anton , false ,  ) ;
2002: LD_ADDR_EXP 27
2006: PUSH
2007: LD_STRING Anton
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: LD_STRING 
2015: PPUSH
2016: CALL 10100 0 3
2020: ST_TO_ADDR
// PlaceHumanInUnit ( Dimitri , Ovsyenko ) ;
2021: LD_EXP 23
2025: PPUSH
2026: LD_INT 74
2028: PPUSH
2029: CALL_OW 52
// PlaceHumanInUnit ( Anton , Ovsyenko ) ;
2033: LD_EXP 27
2037: PPUSH
2038: LD_INT 74
2040: PPUSH
2041: CALL_OW 52
// PlaceHumanInUnit ( Grigori , Ovsyenko ) ;
2045: LD_EXP 26
2049: PPUSH
2050: LD_INT 74
2052: PPUSH
2053: CALL_OW 52
// PlaceHumanInUnit ( Jegor , OB2 ) ;
2057: LD_EXP 25
2061: PPUSH
2062: LD_INT 79
2064: PPUSH
2065: CALL_OW 52
// PlaceHumanInUnit ( Ivan , OB3 ) ;
2069: LD_EXP 24
2073: PPUSH
2074: LD_INT 78
2076: PPUSH
2077: CALL_OW 52
// Uc_Side := 6 ;
2081: LD_ADDR_OWVAR 20
2085: PUSH
2086: LD_INT 6
2088: ST_TO_ADDR
// PrepareSoldier ( 0 , 3 ) ;
2089: LD_INT 0
2091: PPUSH
2092: LD_INT 3
2094: PPUSH
2095: CALL_OW 381
// RusSol = CreateHuman ;
2099: LD_ADDR_EXP 28
2103: PUSH
2104: CALL_OW 44
2108: ST_TO_ADDR
// PlaceHumanInUnit ( RusSol , OB1 ) ;
2109: LD_EXP 28
2113: PPUSH
2114: LD_INT 77
2116: PPUSH
2117: CALL_OW 52
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
2121: LD_ADDR_EXP 62
2125: PUSH
2126: LD_STRING Morozov
2128: PPUSH
2129: LD_INT 0
2131: PPUSH
2132: LD_STRING 
2134: PPUSH
2135: CALL 10100 0 3
2139: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
2140: LD_ADDR_EXP 63
2144: PUSH
2145: LD_STRING Platonov
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: LD_STRING 
2153: PPUSH
2154: CALL 10100 0 3
2158: ST_TO_ADDR
// end ;
2159: LD_VAR 0 1
2163: RET
// export function InitBurlak ; begin
2164: LD_INT 0
2166: PPUSH
// Uc_side := 3 ;
2167: LD_ADDR_OWVAR 20
2171: PUSH
2172: LD_INT 3
2174: ST_TO_ADDR
// Uc_nation := 3 ;
2175: LD_ADDR_OWVAR 21
2179: PUSH
2180: LD_INT 3
2182: ST_TO_ADDR
// Uc_Direction := 0 ;
2183: LD_ADDR_OWVAR 24
2187: PUSH
2188: LD_INT 0
2190: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2191: LD_ADDR_EXP 33
2195: PUSH
2196: LD_STRING Burlak
2198: PPUSH
2199: LD_INT 0
2201: PPUSH
2202: LD_STRING 
2204: PPUSH
2205: CALL 10100 0 3
2209: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , false ,  ) ;
2210: LD_ADDR_EXP 38
2214: PUSH
2215: LD_STRING Titov
2217: PPUSH
2218: LD_INT 0
2220: PPUSH
2221: LD_STRING 
2223: PPUSH
2224: CALL 10100 0 3
2228: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrovova , false ,  ) ;
2229: LD_ADDR_EXP 35
2233: PUSH
2234: LD_STRING Petrovova
2236: PPUSH
2237: LD_INT 0
2239: PPUSH
2240: LD_STRING 
2242: PPUSH
2243: CALL 10100 0 3
2247: ST_TO_ADDR
// Lipshchin := PrepareUnit ( Lipshchin , false ,  ) ;
2248: LD_ADDR_EXP 36
2252: PUSH
2253: LD_STRING Lipshchin
2255: PPUSH
2256: LD_INT 0
2258: PPUSH
2259: LD_STRING 
2261: PPUSH
2262: CALL 10100 0 3
2266: ST_TO_ADDR
// Gleb := PrepareUnit ( Gleb , false ,  ) ;
2267: LD_ADDR_EXP 37
2271: PUSH
2272: LD_STRING Gleb
2274: PPUSH
2275: LD_INT 0
2277: PPUSH
2278: LD_STRING 
2280: PPUSH
2281: CALL 10100 0 3
2285: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , false ,  ) ;
2286: LD_ADDR_EXP 34
2290: PUSH
2291: LD_STRING Karamazov
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: LD_STRING 
2299: PPUSH
2300: CALL 10100 0 3
2304: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , false ,  ) ;
2305: LD_ADDR_EXP 39
2309: PUSH
2310: LD_STRING Petrosyan
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: LD_STRING 
2318: PPUSH
2319: CALL 10100 0 3
2323: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , false ,  ) ;
2324: LD_ADDR_EXP 40
2328: PUSH
2329: LD_STRING Dolgov
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: LD_STRING 
2337: PPUSH
2338: CALL 10100 0 3
2342: ST_TO_ADDR
// vc_chassis = 22 ;
2343: LD_ADDR_OWVAR 37
2347: PUSH
2348: LD_INT 22
2350: ST_TO_ADDR
// vc_control = 1 ;
2351: LD_ADDR_OWVAR 38
2355: PUSH
2356: LD_INT 1
2358: ST_TO_ADDR
// vc_engine = 1 ;
2359: LD_ADDR_OWVAR 39
2363: PUSH
2364: LD_INT 1
2366: ST_TO_ADDR
// vc_fuel_battery = rand ( 15 , 30 ) ;
2367: LD_ADDR_OWVAR 41
2371: PUSH
2372: LD_INT 15
2374: PPUSH
2375: LD_INT 30
2377: PPUSH
2378: CALL_OW 12
2382: ST_TO_ADDR
// vc_weapon = [ 44 , 43 , 42 ] [ Difficulty ] ;
2383: LD_ADDR_OWVAR 40
2387: PUSH
2388: LD_INT 44
2390: PUSH
2391: LD_INT 43
2393: PUSH
2394: LD_INT 42
2396: PUSH
2397: EMPTY
2398: LIST
2399: LIST
2400: LIST
2401: PUSH
2402: LD_OWVAR 67
2406: ARRAY
2407: ST_TO_ADDR
// BurlakCrewVeh1 = CreateVehicle ;
2408: LD_ADDR_EXP 43
2412: PUSH
2413: CALL_OW 45
2417: ST_TO_ADDR
// BurlakCrewVeh2 = CreateVehicle ;
2418: LD_ADDR_EXP 44
2422: PUSH
2423: CALL_OW 45
2427: ST_TO_ADDR
// BurlakCrewVeh3 = CreateVehicle ;
2428: LD_ADDR_EXP 45
2432: PUSH
2433: CALL_OW 45
2437: ST_TO_ADDR
// BurlakCrewVeh4 = CreateVehicle ;
2438: LD_ADDR_EXP 46
2442: PUSH
2443: CALL_OW 45
2447: ST_TO_ADDR
// BurlakCrewVeh5 = CreateVehicle ;
2448: LD_ADDR_EXP 47
2452: PUSH
2453: CALL_OW 45
2457: ST_TO_ADDR
// BurlakCrewVeh6 = CreateVehicle ;
2458: LD_ADDR_EXP 48
2462: PUSH
2463: CALL_OW 45
2467: ST_TO_ADDR
// PlaceUnitArea ( BurlakCrewVeh1 , BurlakArea , false ) ;
2468: LD_EXP 43
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: LD_INT 0
2478: PPUSH
2479: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh2 , BurlakArea , false ) ;
2483: LD_EXP 44
2487: PPUSH
2488: LD_INT 2
2490: PPUSH
2491: LD_INT 0
2493: PPUSH
2494: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh3 , BurlakArea , false ) ;
2498: LD_EXP 45
2502: PPUSH
2503: LD_INT 2
2505: PPUSH
2506: LD_INT 0
2508: PPUSH
2509: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh4 , BurlakArea , false ) ;
2513: LD_EXP 46
2517: PPUSH
2518: LD_INT 2
2520: PPUSH
2521: LD_INT 0
2523: PPUSH
2524: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh5 , BurlakArea , false ) ;
2528: LD_EXP 47
2532: PPUSH
2533: LD_INT 2
2535: PPUSH
2536: LD_INT 0
2538: PPUSH
2539: CALL_OW 49
// PlaceUnitArea ( BurlakCrewVeh6 , BurlakArea , false ) ;
2543: LD_EXP 48
2547: PPUSH
2548: LD_INT 2
2550: PPUSH
2551: LD_INT 0
2553: PPUSH
2554: CALL_OW 49
// PlaceHumanInUnit ( Titov , BurlakCrewVeh1 ) ;
2558: LD_EXP 38
2562: PPUSH
2563: LD_EXP 43
2567: PPUSH
2568: CALL_OW 52
// PlaceHumanInUnit ( Petrovova , BurlakCrewVeh2 ) ;
2572: LD_EXP 35
2576: PPUSH
2577: LD_EXP 44
2581: PPUSH
2582: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , BurlakCrewVeh3 ) ;
2586: LD_EXP 36
2590: PPUSH
2591: LD_EXP 45
2595: PPUSH
2596: CALL_OW 52
// PlaceHumanInUnit ( Gleb , BurlakCrewVeh4 ) ;
2600: LD_EXP 37
2604: PPUSH
2605: LD_EXP 46
2609: PPUSH
2610: CALL_OW 52
// PlaceHumanInUnit ( Dolgov , BurlakCrewVeh5 ) ;
2614: LD_EXP 40
2618: PPUSH
2619: LD_EXP 47
2623: PPUSH
2624: CALL_OW 52
// PlaceHumanInUnit ( Petrosyan , BurlakCrewVeh6 ) ;
2628: LD_EXP 39
2632: PPUSH
2633: LD_EXP 48
2637: PPUSH
2638: CALL_OW 52
// vc_chassis = 24 ;
2642: LD_ADDR_OWVAR 37
2646: PUSH
2647: LD_INT 24
2649: ST_TO_ADDR
// vc_weapon = 89 ;
2650: LD_ADDR_OWVAR 40
2654: PUSH
2655: LD_INT 89
2657: ST_TO_ADDR
// KaramazovVeh = CreateVehicle ;
2658: LD_ADDR_EXP 42
2662: PUSH
2663: CALL_OW 45
2667: ST_TO_ADDR
// AddCargo ( KaramazovVeh , mat_cans , 200 ) ;
2668: LD_EXP 42
2672: PPUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_INT 200
2678: PPUSH
2679: CALL_OW 291
// PlaceUnitArea ( KaramazovVeh , BurlakArea , false ) ;
2683: LD_EXP 42
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 49
// PlaceHumanInUnit ( Karamazov , KaramazovVeh ) ;
2698: LD_EXP 34
2702: PPUSH
2703: LD_EXP 42
2707: PPUSH
2708: CALL_OW 52
// Uc_Nation = 2 ;
2712: LD_ADDR_OWVAR 21
2716: PUSH
2717: LD_INT 2
2719: ST_TO_ADDR
// vc_chassis = 14 ;
2720: LD_ADDR_OWVAR 37
2724: PUSH
2725: LD_INT 14
2727: ST_TO_ADDR
// vc_weapon = 26 ;
2728: LD_ADDR_OWVAR 40
2732: PUSH
2733: LD_INT 26
2735: ST_TO_ADDR
// BurlakVeh = CreateVehicle ;
2736: LD_ADDR_EXP 41
2740: PUSH
2741: CALL_OW 45
2745: ST_TO_ADDR
// PlaceUnitArea ( BurlakVeh , BurlakArea , false ) ;
2746: LD_EXP 41
2750: PPUSH
2751: LD_INT 2
2753: PPUSH
2754: LD_INT 0
2756: PPUSH
2757: CALL_OW 49
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
2761: LD_EXP 33
2765: PPUSH
2766: LD_EXP 41
2770: PPUSH
2771: CALL_OW 52
// end ; end_of_file
2775: LD_VAR 0 1
2779: RET
// export function InitSikorskiTeam ; var i , j ; begin
2780: LD_INT 0
2782: PPUSH
2783: PPUSH
2784: PPUSH
// SikorskiTeam := SikorskiTeam ^ Sikorski ^ Gary ^ Bobby ^ Cyrus ^ Walker ^ Lynch ^ Turner ^ Jilian ^ McCreery ;
2785: LD_ADDR_EXP 4
2789: PUSH
2790: LD_EXP 4
2794: PUSH
2795: LD_EXP 49
2799: ADD
2800: PUSH
2801: LD_EXP 54
2805: ADD
2806: PUSH
2807: LD_EXP 52
2811: ADD
2812: PUSH
2813: LD_EXP 53
2817: ADD
2818: PUSH
2819: LD_EXP 57
2823: ADD
2824: PUSH
2825: LD_EXP 55
2829: ADD
2830: PUSH
2831: LD_EXP 59
2835: ADD
2836: PUSH
2837: LD_EXP 58
2841: ADD
2842: PUSH
2843: LD_EXP 56
2847: ADD
2848: ST_TO_ADDR
// Uc_side := 4 ;
2849: LD_ADDR_OWVAR 20
2853: PUSH
2854: LD_INT 4
2856: ST_TO_ADDR
// Uc_Nation := 1 ;
2857: LD_ADDR_OWVAR 21
2861: PUSH
2862: LD_INT 1
2864: ST_TO_ADDR
// Hc_Name := Jeremy Sikorski ;
2865: LD_ADDR_OWVAR 26
2869: PUSH
2870: LD_STRING Jeremy Sikorski
2872: ST_TO_ADDR
// Hc_Class := 1 ;
2873: LD_ADDR_OWVAR 28
2877: PUSH
2878: LD_INT 1
2880: ST_TO_ADDR
// Hc_Sex := 1 ;
2881: LD_ADDR_OWVAR 27
2885: PUSH
2886: LD_INT 1
2888: ST_TO_ADDR
// Hc_Basic_Skills := [ 0 , 0 , 0 , 0 ] ;
2889: LD_ADDR_OWVAR 30
2893: PUSH
2894: LD_INT 0
2896: PUSH
2897: LD_INT 0
2899: PUSH
2900: LD_INT 0
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: ST_TO_ADDR
// Hc_Skills := [ 6 , 3 , 4 , 1 ] ;
2912: LD_ADDR_OWVAR 31
2916: PUSH
2917: LD_INT 6
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: LD_INT 4
2925: PUSH
2926: LD_INT 1
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: LIST
2933: LIST
2934: ST_TO_ADDR
// Hc_Gallery := us ;
2935: LD_ADDR_OWVAR 33
2939: PUSH
2940: LD_STRING us
2942: ST_TO_ADDR
// Hc_Face_Number := 19 ;
2943: LD_ADDR_OWVAR 34
2947: PUSH
2948: LD_INT 19
2950: ST_TO_ADDR
// Sikorski := CreateHuman ;
2951: LD_ADDR_EXP 49
2955: PUSH
2956: CALL_OW 44
2960: ST_TO_ADDR
// SikorskiMeat := CreateHuman ;
2961: LD_ADDR_EXP 50
2965: PUSH
2966: CALL_OW 44
2970: ST_TO_ADDR
// Hc_Name := Kpt. Jack Truman ;
2971: LD_ADDR_OWVAR 26
2975: PUSH
2976: LD_STRING Kpt. Jack Truman
2978: ST_TO_ADDR
// Hc_Skills := [ 8 , 5 , 3 , 1 ] ;
2979: LD_ADDR_OWVAR 31
2983: PUSH
2984: LD_INT 8
2986: PUSH
2987: LD_INT 5
2989: PUSH
2990: LD_INT 3
2992: PUSH
2993: LD_INT 1
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: ST_TO_ADDR
// Hc_Face_Number := 26 ;
3002: LD_ADDR_OWVAR 34
3006: PUSH
3007: LD_INT 26
3009: ST_TO_ADDR
// Truman := CreateHuman ;
3010: LD_ADDR_EXP 51
3014: PUSH
3015: CALL_OW 44
3019: ST_TO_ADDR
// Hc_Name := Cyrus Parker ;
3020: LD_ADDR_OWVAR 26
3024: PUSH
3025: LD_STRING Cyrus Parker
3027: ST_TO_ADDR
// Hc_Skills := [ 6 , 3 , 2 , 2 ] ;
3028: LD_ADDR_OWVAR 31
3032: PUSH
3033: LD_INT 6
3035: PUSH
3036: LD_INT 3
3038: PUSH
3039: LD_INT 2
3041: PUSH
3042: LD_INT 2
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: LIST
3049: LIST
3050: ST_TO_ADDR
// Hc_Face_Number := 8 ;
3051: LD_ADDR_OWVAR 34
3055: PUSH
3056: LD_INT 8
3058: ST_TO_ADDR
// Cyrus := CreateHuman ;
3059: LD_ADDR_EXP 53
3063: PUSH
3064: CALL_OW 44
3068: ST_TO_ADDR
// Hc_Name := Bobby Brandon ;
3069: LD_ADDR_OWVAR 26
3073: PUSH
3074: LD_STRING Bobby Brandon
3076: ST_TO_ADDR
// Hc_Skills := [ 3 , 5 , 8 , 3 ] ;
3077: LD_ADDR_OWVAR 31
3081: PUSH
3082: LD_INT 3
3084: PUSH
3085: LD_INT 5
3087: PUSH
3088: LD_INT 8
3090: PUSH
3091: LD_INT 3
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: ST_TO_ADDR
// Hc_Face_Number := 9 ;
3100: LD_ADDR_OWVAR 34
3104: PUSH
3105: LD_INT 9
3107: ST_TO_ADDR
// Bobby := CreateHuman ;
3108: LD_ADDR_EXP 52
3112: PUSH
3113: CALL_OW 44
3117: ST_TO_ADDR
// Hc_Name := Gary Grant ;
3118: LD_ADDR_OWVAR 26
3122: PUSH
3123: LD_STRING Gary Grant
3125: ST_TO_ADDR
// Hc_Skills := [ 7 , 3 , 1 , 1 ] ;
3126: LD_ADDR_OWVAR 31
3130: PUSH
3131: LD_INT 7
3133: PUSH
3134: LD_INT 3
3136: PUSH
3137: LD_INT 1
3139: PUSH
3140: LD_INT 1
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: ST_TO_ADDR
// Hc_Face_Number := 20 ;
3149: LD_ADDR_OWVAR 34
3153: PUSH
3154: LD_INT 20
3156: ST_TO_ADDR
// Gary := CreateHuman ;
3157: LD_ADDR_EXP 54
3161: PUSH
3162: CALL_OW 44
3166: ST_TO_ADDR
// Hc_Name := Gary Grant ;
3167: LD_ADDR_OWVAR 26
3171: PUSH
3172: LD_STRING Gary Grant
3174: ST_TO_ADDR
// Hc_Skills := [ 7 , 3 , 1 , 1 ] ;
3175: LD_ADDR_OWVAR 31
3179: PUSH
3180: LD_INT 7
3182: PUSH
3183: LD_INT 3
3185: PUSH
3186: LD_INT 1
3188: PUSH
3189: LD_INT 1
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: ST_TO_ADDR
// Hc_Face_Number := 20 ;
3198: LD_ADDR_OWVAR 34
3202: PUSH
3203: LD_INT 20
3205: ST_TO_ADDR
// Gary := CreateHuman ;
3206: LD_ADDR_EXP 54
3210: PUSH
3211: CALL_OW 44
3215: ST_TO_ADDR
// Hc_Name := Henry Lynch ;
3216: LD_ADDR_OWVAR 26
3220: PUSH
3221: LD_STRING Henry Lynch
3223: ST_TO_ADDR
// Hc_Skills := [ 6 , 2 , 2 , 3 ] ;
3224: LD_ADDR_OWVAR 31
3228: PUSH
3229: LD_INT 6
3231: PUSH
3232: LD_INT 2
3234: PUSH
3235: LD_INT 2
3237: PUSH
3238: LD_INT 3
3240: PUSH
3241: EMPTY
3242: LIST
3243: LIST
3244: LIST
3245: LIST
3246: ST_TO_ADDR
// Hc_Gallery := SecondCharsGal ;
3247: LD_ADDR_OWVAR 33
3251: PUSH
3252: LD_STRING SecondCharsGal
3254: ST_TO_ADDR
// Hc_Face_Number := 49 ;
3255: LD_ADDR_OWVAR 34
3259: PUSH
3260: LD_INT 49
3262: ST_TO_ADDR
// Lynch := CreateHuman ;
3263: LD_ADDR_EXP 55
3267: PUSH
3268: CALL_OW 44
3272: ST_TO_ADDR
// Hc_Name := Mike Turner ;
3273: LD_ADDR_OWVAR 26
3277: PUSH
3278: LD_STRING Mike Turner
3280: ST_TO_ADDR
// Hc_Skills := [ 3 , 6 , 3 , 2 ] ;
3281: LD_ADDR_OWVAR 31
3285: PUSH
3286: LD_INT 3
3288: PUSH
3289: LD_INT 6
3291: PUSH
3292: LD_INT 3
3294: PUSH
3295: LD_INT 2
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: ST_TO_ADDR
// Hc_Face_Number := 62 ;
3304: LD_ADDR_OWVAR 34
3308: PUSH
3309: LD_INT 62
3311: ST_TO_ADDR
// Turner := CreateHuman ;
3312: LD_ADDR_EXP 59
3316: PUSH
3317: CALL_OW 44
3321: ST_TO_ADDR
// Hc_Name := Hallie Jilian ;
3322: LD_ADDR_OWVAR 26
3326: PUSH
3327: LD_STRING Hallie Jilian
3329: ST_TO_ADDR
// Hc_Skills := [ 2 , 5 , 2 , 2 ] ;
3330: LD_ADDR_OWVAR 31
3334: PUSH
3335: LD_INT 2
3337: PUSH
3338: LD_INT 5
3340: PUSH
3341: LD_INT 2
3343: PUSH
3344: LD_INT 2
3346: PUSH
3347: EMPTY
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: ST_TO_ADDR
// Hc_Sex := 2 ;
3353: LD_ADDR_OWVAR 27
3357: PUSH
3358: LD_INT 2
3360: ST_TO_ADDR
// Hc_Face_Number := 39 ;
3361: LD_ADDR_OWVAR 34
3365: PUSH
3366: LD_INT 39
3368: ST_TO_ADDR
// Jilian := CreateHuman ;
3369: LD_ADDR_EXP 58
3373: PUSH
3374: CALL_OW 44
3378: ST_TO_ADDR
// Hc_Name := Michael Walker ;
3379: LD_ADDR_OWVAR 26
3383: PUSH
3384: LD_STRING Michael Walker
3386: ST_TO_ADDR
// Hc_Skills := [ 2 , 2 , 3 , 5 ] ;
3387: LD_ADDR_OWVAR 31
3391: PUSH
3392: LD_INT 2
3394: PUSH
3395: LD_INT 2
3397: PUSH
3398: LD_INT 3
3400: PUSH
3401: LD_INT 5
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: ST_TO_ADDR
// Hc_Sex := 1 ;
3410: LD_ADDR_OWVAR 27
3414: PUSH
3415: LD_INT 1
3417: ST_TO_ADDR
// Hc_Class := 4 ;
3418: LD_ADDR_OWVAR 28
3422: PUSH
3423: LD_INT 4
3425: ST_TO_ADDR
// Hc_Face_Number := 48 ;
3426: LD_ADDR_OWVAR 34
3430: PUSH
3431: LD_INT 48
3433: ST_TO_ADDR
// Walker := CreateHuman ;
3434: LD_ADDR_EXP 57
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// Hc_Name := Peter McCreery ;
3444: LD_ADDR_OWVAR 26
3448: PUSH
3449: LD_STRING Peter McCreery
3451: ST_TO_ADDR
// Hc_Skills := [ 1 , 0 , 3 , 6 ] ;
3452: LD_ADDR_OWVAR 31
3456: PUSH
3457: LD_INT 1
3459: PUSH
3460: LD_INT 0
3462: PUSH
3463: LD_INT 3
3465: PUSH
3466: LD_INT 6
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: LIST
3473: LIST
3474: ST_TO_ADDR
// Hc_Face_Number := 58 ;
3475: LD_ADDR_OWVAR 34
3479: PUSH
3480: LD_INT 58
3482: ST_TO_ADDR
// McCreery := CreateHuman ;
3483: LD_ADDR_EXP 56
3487: PUSH
3488: CALL_OW 44
3492: ST_TO_ADDR
// SikorskiTeam := SikorskiTeam ^ Sikorski ^ Truman ^ Gary ^ Bobby ^ Cyrus ^ Walker ^ Lynch ^ Turner ^ Jilian ^ McCreery ;
3493: LD_ADDR_EXP 4
3497: PUSH
3498: LD_EXP 4
3502: PUSH
3503: LD_EXP 49
3507: ADD
3508: PUSH
3509: LD_EXP 51
3513: ADD
3514: PUSH
3515: LD_EXP 54
3519: ADD
3520: PUSH
3521: LD_EXP 52
3525: ADD
3526: PUSH
3527: LD_EXP 53
3531: ADD
3532: PUSH
3533: LD_EXP 57
3537: ADD
3538: PUSH
3539: LD_EXP 55
3543: ADD
3544: PUSH
3545: LD_EXP 59
3549: ADD
3550: PUSH
3551: LD_EXP 58
3555: ADD
3556: PUSH
3557: LD_EXP 56
3561: ADD
3562: ST_TO_ADDR
// PlaceUnitArea ( Sikorski , SikorskiArea , false ) ;
3563: LD_EXP 49
3567: PPUSH
3568: LD_INT 9
3570: PPUSH
3571: LD_INT 0
3573: PPUSH
3574: CALL_OW 49
// PlaceUnitArea ( Truman , SikorskiArea , false ) ;
3578: LD_EXP 51
3582: PPUSH
3583: LD_INT 9
3585: PPUSH
3586: LD_INT 0
3588: PPUSH
3589: CALL_OW 49
// PlaceUnitArea ( Cyrus , SikorskiArea , false ) ;
3593: LD_EXP 53
3597: PPUSH
3598: LD_INT 9
3600: PPUSH
3601: LD_INT 0
3603: PPUSH
3604: CALL_OW 49
// PlaceUnitArea ( Bobby , SikorskiArea , false ) ;
3608: LD_EXP 52
3612: PPUSH
3613: LD_INT 9
3615: PPUSH
3616: LD_INT 0
3618: PPUSH
3619: CALL_OW 49
// PlaceUnitArea ( Gary , SikorskiArea , false ) ;
3623: LD_EXP 54
3627: PPUSH
3628: LD_INT 9
3630: PPUSH
3631: LD_INT 0
3633: PPUSH
3634: CALL_OW 49
// PlaceUnitArea ( Lynch , SikorskiArea , false ) ;
3638: LD_EXP 55
3642: PPUSH
3643: LD_INT 9
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL_OW 49
// PlaceUnitArea ( Turner , SikorskiArea , false ) ;
3653: LD_EXP 59
3657: PPUSH
3658: LD_INT 9
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: CALL_OW 49
// PlaceUnitArea ( Jilian , SikorskiArea , false ) ;
3668: LD_EXP 58
3672: PPUSH
3673: LD_INT 9
3675: PPUSH
3676: LD_INT 0
3678: PPUSH
3679: CALL_OW 49
// PlaceUnitArea ( Walker , SikorskiArea , false ) ;
3683: LD_EXP 57
3687: PPUSH
3688: LD_INT 9
3690: PPUSH
3691: LD_INT 0
3693: PPUSH
3694: CALL_OW 49
// PlaceUnitArea ( McCreery , SikorskiArea , false ) ;
3698: LD_EXP 56
3702: PPUSH
3703: LD_INT 9
3705: PPUSH
3706: LD_INT 0
3708: PPUSH
3709: CALL_OW 49
// end ;
3713: LD_VAR 0 1
3717: RET
// every 0 0$1 trigger start_ended = true do
3718: LD_EXP 71
3722: PUSH
3723: LD_INT 1
3725: EQUAL
3726: IFFALSE 3756
3728: GO 3730
3730: DISABLE
// begin AddResourceType ( GetBase ( Ovsyenko ) , mat_cans , 100 ) ;
3731: LD_INT 74
3733: PPUSH
3734: CALL_OW 274
3738: PPUSH
3739: LD_INT 1
3741: PPUSH
3742: LD_INT 100
3744: PPUSH
3745: CALL_OW 276
// ComUpgrade ( Ovsyenko ) ;
3749: LD_INT 74
3751: PPUSH
3752: CALL_OW 146
// end ;
3756: END
// export function InitTerminal ; var i , y , turrety , lab , zbrojka ; begin
3757: LD_INT 0
3759: PPUSH
3760: PPUSH
3761: PPUSH
3762: PPUSH
3763: PPUSH
3764: PPUSH
// Hc_Gallery :=  ;
3765: LD_ADDR_OWVAR 33
3769: PUSH
3770: LD_STRING 
3772: ST_TO_ADDR
// Hc_Name :=  ;
3773: LD_ADDR_OWVAR 26
3777: PUSH
3778: LD_STRING 
3780: ST_TO_ADDR
// MainTerminalCrew := [ ] ;
3781: LD_ADDR_EXP 6
3785: PUSH
3786: EMPTY
3787: ST_TO_ADDR
// uc_side := 1 ;
3788: LD_ADDR_OWVAR 20
3792: PUSH
3793: LD_INT 1
3795: ST_TO_ADDR
// uc_nation := 1 ;
3796: LD_ADDR_OWVAR 21
3800: PUSH
3801: LD_INT 1
3803: ST_TO_ADDR
// PrepareSoldier ( rand ( 0 , 1 ) , 10 ) ;
3804: LD_INT 0
3806: PPUSH
3807: LD_INT 1
3809: PPUSH
3810: CALL_OW 12
3814: PPUSH
3815: LD_INT 10
3817: PPUSH
3818: CALL_OW 381
// NorthSold := CreateHuman ;
3822: LD_ADDR_EXP 61
3826: PUSH
3827: CALL_OW 44
3831: ST_TO_ADDR
// PlaceHumanInUnit ( NorthSold , AmB4 ) ;
3832: LD_EXP 61
3836: PPUSH
3837: LD_INT 104
3839: PPUSH
3840: CALL_OW 52
// for i = 1 to [ 8 , 9 , 10 ] [ Difficulty ] do
3844: LD_ADDR_VAR 0 2
3848: PUSH
3849: DOUBLE
3850: LD_INT 1
3852: DEC
3853: ST_TO_ADDR
3854: LD_INT 8
3856: PUSH
3857: LD_INT 9
3859: PUSH
3860: LD_INT 10
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: PUSH
3868: LD_OWVAR 67
3872: ARRAY
3873: PUSH
3874: FOR_TO
3875: IFFALSE 3930
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
3877: LD_INT 0
3879: PPUSH
3880: LD_INT 1
3882: PPUSH
3883: CALL_OW 12
3887: PPUSH
3888: LD_INT 2
3890: PUSH
3891: LD_INT 3
3893: PUSH
3894: LD_INT 6
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: PUSH
3902: LD_OWVAR 67
3906: ARRAY
3907: PPUSH
3908: CALL_OW 381
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
3912: LD_ADDR_EXP 6
3916: PUSH
3917: LD_EXP 6
3921: PUSH
3922: CALL_OW 44
3926: ADD
3927: ST_TO_ADDR
// end ;
3928: GO 3874
3930: POP
3931: POP
// for i = 1 to 1 do
3932: LD_ADDR_VAR 0 2
3936: PUSH
3937: DOUBLE
3938: LD_INT 1
3940: DEC
3941: ST_TO_ADDR
3942: LD_INT 1
3944: PUSH
3945: FOR_TO
3946: IFFALSE 4001
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
3948: LD_INT 0
3950: PPUSH
3951: LD_INT 1
3953: PPUSH
3954: CALL_OW 12
3958: PPUSH
3959: LD_INT 2
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: LD_INT 6
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_OWVAR 67
3977: ARRAY
3978: PPUSH
3979: CALL_OW 382
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
3983: LD_ADDR_EXP 6
3987: PUSH
3988: LD_EXP 6
3992: PUSH
3993: CALL_OW 44
3997: ADD
3998: ST_TO_ADDR
// end ;
3999: GO 3945
4001: POP
4002: POP
// for i = 1 to 2 do
4003: LD_ADDR_VAR 0 2
4007: PUSH
4008: DOUBLE
4009: LD_INT 1
4011: DEC
4012: ST_TO_ADDR
4013: LD_INT 2
4015: PUSH
4016: FOR_TO
4017: IFFALSE 4072
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4019: LD_INT 0
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: CALL_OW 12
4029: PPUSH
4030: LD_INT 2
4032: PUSH
4033: LD_INT 3
4035: PUSH
4036: LD_INT 6
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: PUSH
4044: LD_OWVAR 67
4048: ARRAY
4049: PPUSH
4050: CALL_OW 384
// MainTerminalCrew := MainTerminalCrew ^ CreateHuman ;
4054: LD_ADDR_EXP 6
4058: PUSH
4059: LD_EXP 6
4063: PUSH
4064: CALL_OW 44
4068: ADD
4069: ST_TO_ADDR
// end ;
4070: GO 4016
4072: POP
4073: POP
// turrety := FilterUnitsInArea ( MainTerminalArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
4074: LD_ADDR_VAR 0 4
4078: PUSH
4079: LD_INT 16
4081: PPUSH
4082: LD_INT 2
4084: PUSH
4085: LD_INT 30
4087: PUSH
4088: LD_INT 31
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PUSH
4095: LD_INT 30
4097: PUSH
4098: LD_INT 32
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: LIST
4109: PPUSH
4110: CALL_OW 70
4114: ST_TO_ADDR
// lab := FilterUnitsInArea ( MainTerminalArea , [ [ f_btype , b_lab_full ] ] ) ;
4115: LD_ADDR_VAR 0 5
4119: PUSH
4120: LD_INT 16
4122: PPUSH
4123: LD_INT 30
4125: PUSH
4126: LD_INT 8
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: PPUSH
4136: CALL_OW 70
4140: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( MainTerminalArea , [ [ f_btype , b_barracks ] ] ) ;
4141: LD_ADDR_VAR 0 6
4145: PUSH
4146: LD_INT 16
4148: PPUSH
4149: LD_INT 30
4151: PUSH
4152: LD_INT 5
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PUSH
4159: EMPTY
4160: LIST
4161: PPUSH
4162: CALL_OW 70
4166: ST_TO_ADDR
// y := 1 ;
4167: LD_ADDR_VAR 0 3
4171: PUSH
4172: LD_INT 1
4174: ST_TO_ADDR
// for i in MainTerminalCrew do
4175: LD_ADDR_VAR 0 2
4179: PUSH
4180: LD_EXP 6
4184: PUSH
4185: FOR_IN
4186: IFFALSE 4343
// begin PlaceUnitArea ( i , TerminalPersonel , false ) ;
4188: LD_VAR 0 2
4192: PPUSH
4193: LD_INT 15
4195: PPUSH
4196: LD_INT 0
4198: PPUSH
4199: CALL_OW 49
// case GetClass ( i ) of 1 :
4203: LD_VAR 0 2
4207: PPUSH
4208: CALL_OW 257
4212: PUSH
4213: LD_INT 1
4215: DOUBLE
4216: EQUAL
4217: IFTRUE 4221
4219: GO 4288
4221: POP
// begin if y > 7 then
4222: LD_VAR 0 3
4226: PUSH
4227: LD_INT 7
4229: GREATER
4230: IFFALSE 4252
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
4232: LD_VAR 0 2
4236: PPUSH
4237: LD_VAR 0 6
4241: PUSH
4242: LD_INT 1
4244: ARRAY
4245: PPUSH
4246: CALL_OW 120
4250: GO 4272
// ComEnterUnit ( i , turrety [ y ] ) ;
4252: LD_VAR 0 2
4256: PPUSH
4257: LD_VAR 0 4
4261: PUSH
4262: LD_VAR 0 3
4266: ARRAY
4267: PPUSH
4268: CALL_OW 120
// y = y + 1 ;
4272: LD_ADDR_VAR 0 3
4276: PUSH
4277: LD_VAR 0 3
4281: PUSH
4282: LD_INT 1
4284: PLUS
4285: ST_TO_ADDR
// end ; 2 :
4286: GO 4341
4288: LD_INT 2
4290: DOUBLE
4291: EQUAL
4292: IFTRUE 4296
4294: GO 4311
4296: POP
// ComEnterUnit ( i , MainTerminal ) ; 4 :
4297: LD_VAR 0 2
4301: PPUSH
4302: LD_INT 257
4304: PPUSH
4305: CALL_OW 120
4309: GO 4341
4311: LD_INT 4
4313: DOUBLE
4314: EQUAL
4315: IFTRUE 4319
4317: GO 4340
4319: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
4320: LD_VAR 0 2
4324: PPUSH
4325: LD_VAR 0 5
4329: PUSH
4330: LD_INT 1
4332: ARRAY
4333: PPUSH
4334: CALL_OW 120
4338: GO 4341
4340: POP
// end ;
4341: GO 4185
4343: POP
4344: POP
// end ;
4345: LD_VAR 0 1
4349: RET
// export function InitAmerican ; var i , z , y , turrety , fabryka , Wieza , lab , zbrojka ; begin
4350: LD_INT 0
4352: PPUSH
4353: PPUSH
4354: PPUSH
4355: PPUSH
4356: PPUSH
4357: PPUSH
4358: PPUSH
4359: PPUSH
4360: PPUSH
// Hc_Gallery :=  ;
4361: LD_ADDR_OWVAR 33
4365: PUSH
4366: LD_STRING 
4368: ST_TO_ADDR
// Hc_Name :=  ;
4369: LD_ADDR_OWVAR 26
4373: PUSH
4374: LD_STRING 
4376: ST_TO_ADDR
// WestTerminalCrew := [ ] ;
4377: LD_ADDR_EXP 5
4381: PUSH
4382: EMPTY
4383: ST_TO_ADDR
// uc_side := 1 ;
4384: LD_ADDR_OWVAR 20
4388: PUSH
4389: LD_INT 1
4391: ST_TO_ADDR
// uc_nation := 1 ;
4392: LD_ADDR_OWVAR 21
4396: PUSH
4397: LD_INT 1
4399: ST_TO_ADDR
// for i = 1 to [ 10 , 11 , 12 ] [ Difficulty ] do
4400: LD_ADDR_VAR 0 2
4404: PUSH
4405: DOUBLE
4406: LD_INT 1
4408: DEC
4409: ST_TO_ADDR
4410: LD_INT 10
4412: PUSH
4413: LD_INT 11
4415: PUSH
4416: LD_INT 12
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: LIST
4423: PUSH
4424: LD_OWVAR 67
4428: ARRAY
4429: PUSH
4430: FOR_TO
4431: IFFALSE 4486
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4433: LD_INT 0
4435: PPUSH
4436: LD_INT 1
4438: PPUSH
4439: CALL_OW 12
4443: PPUSH
4444: LD_INT 2
4446: PUSH
4447: LD_INT 3
4449: PUSH
4450: LD_INT 6
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: LIST
4457: PUSH
4458: LD_OWVAR 67
4462: ARRAY
4463: PPUSH
4464: CALL_OW 381
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4468: LD_ADDR_EXP 5
4472: PUSH
4473: LD_EXP 5
4477: PUSH
4478: CALL_OW 44
4482: ADD
4483: ST_TO_ADDR
// end ;
4484: GO 4430
4486: POP
4487: POP
// for i = 1 to 2 do
4488: LD_ADDR_VAR 0 2
4492: PUSH
4493: DOUBLE
4494: LD_INT 1
4496: DEC
4497: ST_TO_ADDR
4498: LD_INT 2
4500: PUSH
4501: FOR_TO
4502: IFFALSE 4557
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4504: LD_INT 0
4506: PPUSH
4507: LD_INT 1
4509: PPUSH
4510: CALL_OW 12
4514: PPUSH
4515: LD_INT 2
4517: PUSH
4518: LD_INT 3
4520: PUSH
4521: LD_INT 6
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PUSH
4529: LD_OWVAR 67
4533: ARRAY
4534: PPUSH
4535: CALL_OW 382
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4539: LD_ADDR_EXP 5
4543: PUSH
4544: LD_EXP 5
4548: PUSH
4549: CALL_OW 44
4553: ADD
4554: ST_TO_ADDR
// end ;
4555: GO 4501
4557: POP
4558: POP
// for i = 1 to 6 do
4559: LD_ADDR_VAR 0 2
4563: PUSH
4564: DOUBLE
4565: LD_INT 1
4567: DEC
4568: ST_TO_ADDR
4569: LD_INT 6
4571: PUSH
4572: FOR_TO
4573: IFFALSE 4628
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4575: LD_INT 0
4577: PPUSH
4578: LD_INT 1
4580: PPUSH
4581: CALL_OW 12
4585: PPUSH
4586: LD_INT 2
4588: PUSH
4589: LD_INT 3
4591: PUSH
4592: LD_INT 6
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: LIST
4599: PUSH
4600: LD_OWVAR 67
4604: ARRAY
4605: PPUSH
4606: CALL_OW 383
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4610: LD_ADDR_EXP 5
4614: PUSH
4615: LD_EXP 5
4619: PUSH
4620: CALL_OW 44
4624: ADD
4625: ST_TO_ADDR
// end ;
4626: GO 4572
4628: POP
4629: POP
// for i = 1 to 2 do
4630: LD_ADDR_VAR 0 2
4634: PUSH
4635: DOUBLE
4636: LD_INT 1
4638: DEC
4639: ST_TO_ADDR
4640: LD_INT 2
4642: PUSH
4643: FOR_TO
4644: IFFALSE 4699
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 2 , 3 , 6 ] [ Difficulty ] ) ;
4646: LD_INT 0
4648: PPUSH
4649: LD_INT 1
4651: PPUSH
4652: CALL_OW 12
4656: PPUSH
4657: LD_INT 2
4659: PUSH
4660: LD_INT 3
4662: PUSH
4663: LD_INT 6
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: LIST
4670: PUSH
4671: LD_OWVAR 67
4675: ARRAY
4676: PPUSH
4677: CALL_OW 384
// WestTerminalCrew := WestTerminalCrew ^ CreateHuman ;
4681: LD_ADDR_EXP 5
4685: PUSH
4686: LD_EXP 5
4690: PUSH
4691: CALL_OW 44
4695: ADD
4696: ST_TO_ADDR
// end ;
4697: GO 4643
4699: POP
4700: POP
// turrety := FilterUnitsInArea ( WestTerminalArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
4701: LD_ADDR_VAR 0 5
4705: PUSH
4706: LD_INT 17
4708: PPUSH
4709: LD_INT 2
4711: PUSH
4712: LD_INT 30
4714: PUSH
4715: LD_INT 31
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 30
4724: PUSH
4725: LD_INT 32
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: PPUSH
4737: CALL_OW 70
4741: ST_TO_ADDR
// lab := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_lab_full ] ] ) ;
4742: LD_ADDR_VAR 0 8
4746: PUSH
4747: LD_INT 17
4749: PPUSH
4750: LD_INT 30
4752: PUSH
4753: LD_INT 8
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: PUSH
4760: EMPTY
4761: LIST
4762: PPUSH
4763: CALL_OW 70
4767: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_factory ] ] ) ;
4768: LD_ADDR_VAR 0 6
4772: PUSH
4773: LD_INT 17
4775: PPUSH
4776: LD_INT 30
4778: PUSH
4779: LD_INT 3
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: EMPTY
4787: LIST
4788: PPUSH
4789: CALL_OW 70
4793: ST_TO_ADDR
// wieza := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_control_tower ] ] ) ;
4794: LD_ADDR_VAR 0 7
4798: PUSH
4799: LD_INT 17
4801: PPUSH
4802: LD_INT 30
4804: PUSH
4805: LD_INT 36
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: EMPTY
4813: LIST
4814: PPUSH
4815: CALL_OW 70
4819: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( WestTerminalArea , [ [ f_btype , b_barracks ] ] ) ;
4820: LD_ADDR_VAR 0 9
4824: PUSH
4825: LD_INT 17
4827: PPUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 5
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: EMPTY
4839: LIST
4840: PPUSH
4841: CALL_OW 70
4845: ST_TO_ADDR
// y := 1 ;
4846: LD_ADDR_VAR 0 4
4850: PUSH
4851: LD_INT 1
4853: ST_TO_ADDR
// z := 1 ;
4854: LD_ADDR_VAR 0 3
4858: PUSH
4859: LD_INT 1
4861: ST_TO_ADDR
// for i in WestTerminalCrew do
4862: LD_ADDR_VAR 0 2
4866: PUSH
4867: LD_EXP 5
4871: PUSH
4872: FOR_IN
4873: IFFALSE 5103
// begin PlaceUnitArea ( i , TerminalPersonel , false ) ;
4875: LD_VAR 0 2
4879: PPUSH
4880: LD_INT 15
4882: PPUSH
4883: LD_INT 0
4885: PPUSH
4886: CALL_OW 49
// case GetClass ( i ) of 1 :
4890: LD_VAR 0 2
4894: PPUSH
4895: CALL_OW 257
4899: PUSH
4900: LD_INT 1
4902: DOUBLE
4903: EQUAL
4904: IFTRUE 4908
4906: GO 4975
4908: POP
// begin if y > 9 then
4909: LD_VAR 0 4
4913: PUSH
4914: LD_INT 9
4916: GREATER
4917: IFFALSE 4939
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
4919: LD_VAR 0 2
4923: PPUSH
4924: LD_VAR 0 9
4928: PUSH
4929: LD_INT 1
4931: ARRAY
4932: PPUSH
4933: CALL_OW 120
4937: GO 4959
// ComEnterUnit ( i , turrety [ y ] ) ;
4939: LD_VAR 0 2
4943: PPUSH
4944: LD_VAR 0 5
4948: PUSH
4949: LD_VAR 0 4
4953: ARRAY
4954: PPUSH
4955: CALL_OW 120
// y = y + 1 ;
4959: LD_ADDR_VAR 0 4
4963: PUSH
4964: LD_VAR 0 4
4968: PUSH
4969: LD_INT 1
4971: PLUS
4972: ST_TO_ADDR
// end ; 2 :
4973: GO 5101
4975: LD_INT 2
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 4983
4981: GO 4998
4983: POP
// ComEnterUnit ( i , WestTerminal ) ; 3 :
4984: LD_VAR 0 2
4988: PPUSH
4989: LD_INT 123
4991: PPUSH
4992: CALL_OW 120
4996: GO 5101
4998: LD_INT 3
5000: DOUBLE
5001: EQUAL
5002: IFTRUE 5006
5004: GO 5071
5006: POP
// begin if z > 3 then
5007: LD_VAR 0 3
5011: PUSH
5012: LD_INT 3
5014: GREATER
5015: IFFALSE 5037
// ComEnterUnit ( i , fabryka [ 1 ] ) else
5017: LD_VAR 0 2
5021: PPUSH
5022: LD_VAR 0 6
5026: PUSH
5027: LD_INT 1
5029: ARRAY
5030: PPUSH
5031: CALL_OW 120
5035: GO 5055
// ComEnterUnit ( i , wieza [ 1 ] ) ;
5037: LD_VAR 0 2
5041: PPUSH
5042: LD_VAR 0 7
5046: PUSH
5047: LD_INT 1
5049: ARRAY
5050: PPUSH
5051: CALL_OW 120
// z = z + 1 ;
5055: LD_ADDR_VAR 0 3
5059: PUSH
5060: LD_VAR 0 3
5064: PUSH
5065: LD_INT 1
5067: PLUS
5068: ST_TO_ADDR
// end ; 4 :
5069: GO 5101
5071: LD_INT 4
5073: DOUBLE
5074: EQUAL
5075: IFTRUE 5079
5077: GO 5100
5079: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
5080: LD_VAR 0 2
5084: PPUSH
5085: LD_VAR 0 8
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: CALL_OW 120
5098: GO 5101
5100: POP
// end ;
5101: GO 4872
5103: POP
5104: POP
// Uc_Side := 1 ;
5105: LD_ADDR_OWVAR 20
5109: PUSH
5110: LD_INT 1
5112: ST_TO_ADDR
// Uc_Nation := 1 ;
5113: LD_ADDR_OWVAR 21
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , false ,  ) ;
5121: LD_ADDR_EXP 60
5125: PUSH
5126: LD_STRING Houten
5128: PPUSH
5129: LD_INT 0
5131: PPUSH
5132: LD_STRING 
5134: PPUSH
5135: CALL 10100 0 3
5139: ST_TO_ADDR
// PlaceHumanInUnit ( Houten , WestTerminal ) ;
5140: LD_EXP 60
5144: PPUSH
5145: LD_INT 123
5147: PPUSH
5148: CALL_OW 52
// end ;
5152: LD_VAR 0 1
5156: RET
// every 10 10$0 trigger start_ended = true do var i ;
5157: LD_EXP 71
5161: PUSH
5162: LD_INT 1
5164: EQUAL
5165: IFFALSE 5254
5167: GO 5169
5169: DISABLE
5170: LD_INT 0
5172: PPUSH
// begin Uc_Nation = 1 ;
5173: LD_ADDR_OWVAR 21
5177: PUSH
5178: LD_INT 1
5180: ST_TO_ADDR
// Uc_Side = 1 ;
5181: LD_ADDR_OWVAR 20
5185: PUSH
5186: LD_INT 1
5188: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
5189: LD_ADDR_VAR 0 1
5193: PUSH
5194: DOUBLE
5195: LD_INT 1
5197: DEC
5198: ST_TO_ADDR
5199: LD_INT 4
5201: PUSH
5202: LD_INT 5
5204: PUSH
5205: LD_INT 6
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: LIST
5212: PUSH
5213: LD_OWVAR 67
5217: ARRAY
5218: PUSH
5219: FOR_TO
5220: IFFALSE 5251
// AddComConstruct ( AmFactory , 4 , 1 , 2 , rand ( 4 , 6 ) ) ;
5222: LD_INT 239
5224: PPUSH
5225: LD_INT 4
5227: PPUSH
5228: LD_INT 1
5230: PPUSH
5231: LD_INT 2
5233: PPUSH
5234: LD_INT 4
5236: PPUSH
5237: LD_INT 6
5239: PPUSH
5240: CALL_OW 12
5244: PPUSH
5245: CALL_OW 185
5249: GO 5219
5251: POP
5252: POP
// enable ;
5253: ENABLE
// end ;
5254: PPOPN 1
5256: END
// every 0 0$1 trigger attackers >= [ 4 , 5 , 6 ] [ Difficulty ] do var enemy , attacker ;
5257: LD_EXP 8
5261: PUSH
5262: LD_INT 4
5264: PUSH
5265: LD_INT 5
5267: PUSH
5268: LD_INT 6
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: LIST
5275: PUSH
5276: LD_OWVAR 67
5280: ARRAY
5281: GREATEREQUAL
5282: IFFALSE 5374
5284: GO 5286
5286: DISABLE
5287: LD_INT 0
5289: PPUSH
5290: PPUSH
// begin enable ;
5291: ENABLE
// enemy := Filterallunits ( [ f_side , 3 ] ) ;
5292: LD_ADDR_VAR 0 1
5296: PUSH
5297: LD_INT 22
5299: PUSH
5300: LD_INT 3
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PPUSH
5307: CALL_OW 69
5311: ST_TO_ADDR
// for attacker in UnitFilter ( attackers , [ [ f_ok ] , [ f_linked ] ] ) do
5312: LD_ADDR_VAR 0 2
5316: PUSH
5317: LD_EXP 8
5321: PPUSH
5322: LD_INT 50
5324: PUSH
5325: EMPTY
5326: LIST
5327: PUSH
5328: LD_INT 61
5330: PUSH
5331: EMPTY
5332: LIST
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PPUSH
5338: CALL_OW 72
5342: PUSH
5343: FOR_IN
5344: IFFALSE 5372
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
5346: LD_VAR 0 2
5350: PPUSH
5351: LD_VAR 0 1
5355: PPUSH
5356: LD_VAR 0 2
5360: PPUSH
5361: CALL_OW 74
5365: PPUSH
5366: CALL_OW 115
5370: GO 5343
5372: POP
5373: POP
// end ; end_of_file
5374: PPOPN 2
5376: END
// export function Action ; begin
5377: LD_INT 0
5379: PPUSH
// ingame_video := true ;
5380: LD_ADDR_OWVAR 52
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// interface_hidden := true ;
5388: LD_ADDR_OWVAR 54
5392: PUSH
5393: LD_INT 1
5395: ST_TO_ADDR
// ComMoveToArea ( [ Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ] , PeopleStartArea ) ;
5396: LD_EXP 10
5400: PUSH
5401: LD_EXP 11
5405: PUSH
5406: LD_EXP 12
5410: PUSH
5411: LD_EXP 13
5415: PUSH
5416: LD_EXP 14
5420: PUSH
5421: LD_EXP 15
5425: PUSH
5426: LD_EXP 16
5430: PUSH
5431: LD_EXP 17
5435: PUSH
5436: LD_EXP 18
5440: PUSH
5441: LD_EXP 19
5445: PUSH
5446: LD_EXP 20
5450: PUSH
5451: LD_EXP 21
5455: PUSH
5456: LD_EXP 22
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: LIST
5475: PPUSH
5476: LD_INT 10
5478: PPUSH
5479: CALL_OW 113
// ComMoveToArea ( Yakotich , YakotichStartArea ) ;
5483: LD_EXP 9
5487: PPUSH
5488: LD_INT 11
5490: PPUSH
5491: CALL_OW 113
// end ;
5495: LD_VAR 0 1
5499: RET
// every 0 0$1 trigger IsInArea ( Yakotich , YakotichStartArea ) do
5500: LD_EXP 9
5504: PPUSH
5505: LD_INT 11
5507: PPUSH
5508: CALL_OW 308
5512: IFFALSE 5579
5514: GO 5516
5516: DISABLE
// begin ComTurnUnit ( Yakotich , Mietek ) ;
5517: LD_EXP 9
5521: PPUSH
5522: LD_EXP 10
5526: PPUSH
5527: CALL_OW 119
// Say ( Yakotich , 3Yak-01 ) ;
5531: LD_EXP 9
5535: PPUSH
5536: LD_STRING 3Yak-01
5538: PPUSH
5539: CALL_OW 88
// ComEnterUnit ( Yakotich , Ovsyenko ) ;
5543: LD_EXP 9
5547: PPUSH
5548: LD_INT 74
5550: PPUSH
5551: CALL_OW 120
// ComEnterUnit ( Mietek , Ovsyenko ) ;
5555: LD_EXP 10
5559: PPUSH
5560: LD_INT 74
5562: PPUSH
5563: CALL_OW 120
// ComEnterUnit ( Boris , Ovsyenko ) ;
5567: LD_EXP 11
5571: PPUSH
5572: LD_INT 74
5574: PPUSH
5575: CALL_OW 120
// end ;
5579: END
// export engs ; export function SikorskiAction ; var x , y , i , tmp , t , engs , un , speaker ; begin
5580: LD_INT 0
5582: PPUSH
5583: PPUSH
5584: PPUSH
5585: PPUSH
5586: PPUSH
5587: PPUSH
5588: PPUSH
5589: PPUSH
5590: PPUSH
// x := 101 ;
5591: LD_ADDR_VAR 0 2
5595: PUSH
5596: LD_INT 101
5598: ST_TO_ADDR
// y := 116 ;
5599: LD_ADDR_VAR 0 3
5603: PUSH
5604: LD_INT 116
5606: ST_TO_ADDR
// PlaceSeeing ( x , y , 1 , - 30 ) ;
5607: LD_VAR 0 2
5611: PPUSH
5612: LD_VAR 0 3
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: LD_INT 30
5622: NEG
5623: PPUSH
5624: CALL_OW 330
// CenterNowOnXY ( x , y ) ;
5628: LD_VAR 0 2
5632: PPUSH
5633: LD_VAR 0 3
5637: PPUSH
5638: CALL_OW 86
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) diff Sikorski ;
5642: LD_ADDR_VAR 0 5
5646: PUSH
5647: LD_INT 22
5649: PUSH
5650: LD_INT 4
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: PUSH
5657: LD_INT 21
5659: PUSH
5660: LD_INT 1
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PPUSH
5671: CALL_OW 69
5675: PUSH
5676: LD_EXP 49
5680: DIFF
5681: ST_TO_ADDR
// AddComTurnXY ( tmp , 111 , 125 ) ;
5682: LD_VAR 0 5
5686: PPUSH
5687: LD_INT 111
5689: PPUSH
5690: LD_INT 125
5692: PPUSH
5693: CALL_OW 178
// wait ( 0 0$02 ) ;
5697: LD_INT 70
5699: PPUSH
5700: CALL_OW 67
// AddComMoveXY ( Sikorski , 105 , 111 ) ;
5704: LD_EXP 49
5708: PPUSH
5709: LD_INT 105
5711: PPUSH
5712: LD_INT 111
5714: PPUSH
5715: CALL_OW 171
// ComAgressiveMove ( tmp , 108 , 117 ) ;
5719: LD_VAR 0 5
5723: PPUSH
5724: LD_INT 108
5726: PPUSH
5727: LD_INT 117
5729: PPUSH
5730: CALL_OW 114
// Say ( Sikorski , 3Sik-01 ) ;
5734: LD_EXP 49
5738: PPUSH
5739: LD_STRING 3Sik-01
5741: PPUSH
5742: CALL_OW 88
// Say ( Yakotich , 3Yak-08 ) ;
5746: LD_EXP 9
5750: PPUSH
5751: LD_STRING 3Yak-08
5753: PPUSH
5754: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
5758: LD_INT 35
5760: PPUSH
5761: CALL_OW 67
// until See ( 3 , Sikorski ) ;
5765: LD_INT 3
5767: PPUSH
5768: LD_EXP 49
5772: PPUSH
5773: CALL_OW 292
5777: IFFALSE 5758
// un := UnitsInside ( NearestUnitToUnit ( FilterAllUnits ( [ f_btype , b_breastwork ] ) , Sikorski ) ) [ 1 ] ;
5779: LD_ADDR_VAR 0 8
5783: PUSH
5784: LD_INT 30
5786: PUSH
5787: LD_INT 31
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 69
5798: PPUSH
5799: LD_EXP 49
5803: PPUSH
5804: CALL_OW 74
5808: PPUSH
5809: CALL_OW 313
5813: PUSH
5814: LD_INT 1
5816: ARRAY
5817: ST_TO_ADDR
// AddComAttackUnit ( un , Sikorski ) ;
5818: LD_VAR 0 8
5822: PPUSH
5823: LD_EXP 49
5827: PPUSH
5828: CALL_OW 175
// wait ( 0 0$3 ) ;
5832: LD_INT 105
5834: PPUSH
5835: CALL_OW 67
// MineExplosion ( 111 , 116 , 1 ) ;
5839: LD_INT 111
5841: PPUSH
5842: LD_INT 116
5844: PPUSH
5845: LD_INT 1
5847: PPUSH
5848: CALL_OW 453
// repeat wait ( 0 0$01 ) ;
5852: LD_INT 35
5854: PPUSH
5855: CALL_OW 67
// until IsDying ( un ) ;
5859: LD_VAR 0 8
5863: PPUSH
5864: CALL_OW 303
5868: IFFALSE 5852
// DoNotAttack ( 3 , Sikorski ) ;
5870: LD_INT 3
5872: PPUSH
5873: LD_EXP 49
5877: PPUSH
5878: CALL_OW 471
// AddComMoveXY ( Sikorski , 110 , 120 ) ;
5882: LD_EXP 49
5886: PPUSH
5887: LD_INT 110
5889: PPUSH
5890: LD_INT 120
5892: PPUSH
5893: CALL_OW 171
// AddComAttackUnit ( Sikorski , Ovsyenko ) ;
5897: LD_EXP 49
5901: PPUSH
5902: LD_INT 74
5904: PPUSH
5905: CALL_OW 175
// Say ( Yakotich , 3Yak-09 ) ;
5909: LD_EXP 9
5913: PPUSH
5914: LD_STRING 3Yak-09
5916: PPUSH
5917: CALL_OW 88
// ComExitBuilding ( [ f_side , 3 ] ) ;
5921: LD_INT 22
5923: PUSH
5924: LD_INT 3
5926: PUSH
5927: EMPTY
5928: LIST
5929: LIST
5930: PPUSH
5931: CALL_OW 122
// AddComAgressiveMove ( [ f_side , 3 ] , 106 , 114 ) ;
5935: LD_INT 22
5937: PUSH
5938: LD_INT 3
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PPUSH
5945: LD_INT 106
5947: PPUSH
5948: LD_INT 114
5950: PPUSH
5951: CALL_OW 174
// ComMoveXY ( tmp , 109 , 119 ) ;
5955: LD_VAR 0 5
5959: PPUSH
5960: LD_INT 109
5962: PPUSH
5963: LD_INT 119
5965: PPUSH
5966: CALL_OW 111
// AddComTurnXY ( tmp , 111 , 125 ) ;
5970: LD_VAR 0 5
5974: PPUSH
5975: LD_INT 111
5977: PPUSH
5978: LD_INT 125
5980: PPUSH
5981: CALL_OW 178
// ComExitBuilding ( Yakotich ) ;
5985: LD_EXP 9
5989: PPUSH
5990: CALL_OW 122
// AddComAttackUnit ( Yakotich , Sikorski ) ;
5994: LD_EXP 9
5998: PPUSH
5999: LD_EXP 49
6003: PPUSH
6004: CALL_OW 175
// Say ( Sikorski , 3Sik-02 ) ;
6008: LD_EXP 49
6012: PPUSH
6013: LD_STRING 3Sik-02
6015: PPUSH
6016: CALL_OW 88
// wait ( 0 0$2 ) ;
6020: LD_INT 70
6022: PPUSH
6023: CALL_OW 67
// SayEffect ( 3smrtsikora ) ;
6027: LD_STRING 3smrtsikora
6029: PPUSH
6030: CALL_OW 96
// KillUnit ( Sikorski ) ;
6034: LD_EXP 49
6038: PPUSH
6039: CALL_OW 66
// sikorski_dead = true ;
6043: LD_ADDR_EXP 79
6047: PUSH
6048: LD_INT 1
6050: ST_TO_ADDR
// wait ( 0 0$1 ) ;
6051: LD_INT 35
6053: PPUSH
6054: CALL_OW 67
// engs := FilterAllUnits ( [ [ f_class , 2 ] , [ f_side , 3 ] ] ) ;
6058: LD_ADDR_VAR 0 7
6062: PUSH
6063: LD_INT 25
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 22
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PPUSH
6087: CALL_OW 69
6091: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
6092: LD_VAR 0 7
6096: PPUSH
6097: CALL_OW 122
// for i = 1 to engs do
6101: LD_ADDR_VAR 0 4
6105: PUSH
6106: DOUBLE
6107: LD_INT 1
6109: DEC
6110: ST_TO_ADDR
6111: LD_VAR 0 7
6115: PUSH
6116: FOR_TO
6117: IFFALSE 6157
// AddComEnterUnit ( engs [ i ] , FilterAllUnits ( [ f_weapon , ru_cargo_bay ] ) [ i ] ) ;
6119: LD_VAR 0 7
6123: PUSH
6124: LD_VAR 0 4
6128: ARRAY
6129: PPUSH
6130: LD_INT 34
6132: PUSH
6133: LD_INT 51
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: PPUSH
6140: CALL_OW 69
6144: PUSH
6145: LD_VAR 0 4
6149: ARRAY
6150: PPUSH
6151: CALL_OW 180
6155: GO 6116
6157: POP
6158: POP
// AddComTransport ( Anton , Ovsyenko , mat_siberit ) ;
6159: LD_EXP 27
6163: PPUSH
6164: LD_INT 74
6166: PPUSH
6167: LD_INT 3
6169: PPUSH
6170: CALL_OW 211
// AddComWait ( Boris , 0 0$1 ) ;
6174: LD_EXP 11
6178: PPUSH
6179: LD_INT 35
6181: PPUSH
6182: CALL_OW 202
// AddComTransport ( Boris , Ovsyenko , mat_cans ) ;
6186: LD_EXP 11
6190: PPUSH
6191: LD_INT 74
6193: PPUSH
6194: LD_INT 1
6196: PPUSH
6197: CALL_OW 211
// AddComMoveXY ( engs , 147 , 220 ) ;
6201: LD_VAR 0 7
6205: PPUSH
6206: LD_INT 147
6208: PPUSH
6209: LD_INT 220
6211: PPUSH
6212: CALL_OW 171
// AddComExitVehicle ( engs ) ;
6216: LD_VAR 0 7
6220: PPUSH
6221: CALL_OW 181
// AddComMoveXY ( Yakotich , 148 , 208 ) ;
6225: LD_EXP 9
6229: PPUSH
6230: LD_INT 148
6232: PPUSH
6233: LD_INT 208
6235: PPUSH
6236: CALL_OW 171
// un := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
6240: LD_ADDR_VAR 0 8
6244: PUSH
6245: LD_INT 22
6247: PUSH
6248: LD_INT 3
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 25
6257: PUSH
6258: LD_INT 1
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PPUSH
6269: CALL_OW 69
6273: ST_TO_ADDR
// ComExitBuilding ( un ) ;
6274: LD_VAR 0 8
6278: PPUSH
6279: CALL_OW 122
// ComExitBuilding ( Grigori ) ;
6283: LD_EXP 26
6287: PPUSH
6288: CALL_OW 122
// AddComMoveXY ( un , 148 , 208 ) ;
6292: LD_VAR 0 8
6296: PPUSH
6297: LD_INT 148
6299: PPUSH
6300: LD_INT 208
6302: PPUSH
6303: CALL_OW 171
// AddComMoveXY ( Grigori , 148 , 208 ) ;
6307: LD_EXP 26
6311: PPUSH
6312: LD_INT 148
6314: PPUSH
6315: LD_INT 208
6317: PPUSH
6318: CALL_OW 171
// wait ( 5 ) ;
6322: LD_INT 5
6324: PPUSH
6325: CALL_OW 67
// Say ( Jilian , 3Rand-01 ) ;
6329: LD_EXP 58
6333: PPUSH
6334: LD_STRING 3Rand-01
6336: PPUSH
6337: CALL_OW 88
// ComMoveToArea ( SikorskiTeam , OvsyenkoArea ) ;
6341: LD_EXP 4
6345: PPUSH
6346: LD_INT 6
6348: PPUSH
6349: CALL_OW 113
// wait ( 0 0$7 ) ;
6353: LD_INT 245
6355: PPUSH
6356: CALL_OW 67
// t := [ [ 104 , 117 ] , [ 115 , 123 ] , [ 114 , 126 ] , [ 111 , 122 ] , [ 112 , 126 ] , [ 117 , 130 ] , [ 106 , 127 ] , [ 111 , 117 ] , [ 98 , 119 ] , [ 116 , 131 ] , [ 109 , 129 ] , [ 100 , 113 ] ] ;
6360: LD_ADDR_VAR 0 6
6364: PUSH
6365: LD_INT 104
6367: PUSH
6368: LD_INT 117
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: LD_INT 115
6377: PUSH
6378: LD_INT 123
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 114
6387: PUSH
6388: LD_INT 126
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: LD_INT 111
6397: PUSH
6398: LD_INT 122
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PUSH
6405: LD_INT 112
6407: PUSH
6408: LD_INT 126
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PUSH
6415: LD_INT 117
6417: PUSH
6418: LD_INT 130
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 106
6427: PUSH
6428: LD_INT 127
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 111
6437: PUSH
6438: LD_INT 117
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: LD_INT 98
6447: PUSH
6448: LD_INT 119
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 116
6457: PUSH
6458: LD_INT 131
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: LD_INT 109
6467: PUSH
6468: LD_INT 129
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 100
6477: PUSH
6478: LD_INT 113
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: ST_TO_ADDR
// for i in t do
6499: LD_ADDR_VAR 0 4
6503: PUSH
6504: LD_VAR 0 6
6508: PUSH
6509: FOR_IN
6510: IFFALSE 6546
// begin wait ( 0 0$0.3 ) ;
6512: LD_INT 10
6514: PPUSH
6515: CALL_OW 67
// MineExplosion ( i [ 1 ] , i [ 2 ] , 1 ) ;
6519: LD_VAR 0 4
6523: PUSH
6524: LD_INT 1
6526: ARRAY
6527: PPUSH
6528: LD_VAR 0 4
6532: PUSH
6533: LD_INT 2
6535: ARRAY
6536: PPUSH
6537: LD_INT 1
6539: PPUSH
6540: CALL_OW 453
// end ;
6544: GO 6509
6546: POP
6547: POP
// wait ( 0 0$4 ) ;
6548: LD_INT 140
6550: PPUSH
6551: CALL_OW 67
// Say ( Turner , 3Rand-02 ) ;
6555: LD_EXP 59
6559: PPUSH
6560: LD_STRING 3Rand-02
6562: PPUSH
6563: CALL_OW 88
// wait ( 0 0$5 ) ;
6567: LD_INT 175
6569: PPUSH
6570: CALL_OW 67
// wait ( 0 0$2 ) ;
6574: LD_INT 70
6576: PPUSH
6577: CALL_OW 67
// SayRadio ( Yakotich , 3Yak-10 ) ;
6581: LD_EXP 9
6585: PPUSH
6586: LD_STRING 3Yak-10
6588: PPUSH
6589: CALL_OW 94
// SetLives ( Ovsyenko , 400 ) ;
6593: LD_INT 74
6595: PPUSH
6596: LD_INT 400
6598: PPUSH
6599: CALL_OW 234
// Cutscene_ended = true ;
6603: LD_ADDR_EXP 69
6607: PUSH
6608: LD_INT 1
6610: ST_TO_ADDR
// CenterOnXY ( 148 , 208 ) ;
6611: LD_INT 148
6613: PPUSH
6614: LD_INT 208
6616: PPUSH
6617: CALL_OW 84
// SayRadio ( Platonov , 3Plat-03 ) ;
6621: LD_EXP 63
6625: PPUSH
6626: LD_STRING 3Plat-03
6628: PPUSH
6629: CALL_OW 94
// SayRadio ( Platonov , 3Plat-04 ) ;
6633: LD_EXP 63
6637: PPUSH
6638: LD_STRING 3Plat-04
6640: PPUSH
6641: CALL_OW 94
// SayRadio ( Platonov , 3Plat-05 ) ;
6645: LD_EXP 63
6649: PPUSH
6650: LD_STRING 3Plat-05
6652: PPUSH
6653: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-11 ) ;
6657: LD_EXP 9
6661: PPUSH
6662: LD_STRING 3Yak-11
6664: PPUSH
6665: CALL_OW 94
// repeat Wait ( 0 0$1 ) until not IsInUnit ( Boris ) and not IsInUnit ( Anton ) ;
6669: LD_INT 35
6671: PPUSH
6672: CALL_OW 67
6676: LD_EXP 11
6680: PPUSH
6681: CALL_OW 310
6685: NOT
6686: PUSH
6687: LD_EXP 27
6691: PPUSH
6692: CALL_OW 310
6696: NOT
6697: AND
6698: IFFALSE 6669
// tmp := [ ] ;
6700: LD_ADDR_VAR 0 5
6704: PUSH
6705: EMPTY
6706: ST_TO_ADDR
// start_ended = true ;
6707: LD_ADDR_EXP 71
6711: PUSH
6712: LD_INT 1
6714: ST_TO_ADDR
// end ;
6715: LD_VAR 0 1
6719: RET
// every 0 0$1 trigger IsInUnit ( Yakotich ) do
6720: LD_EXP 9
6724: PPUSH
6725: CALL_OW 310
6729: IFFALSE 7038
6731: GO 6733
6733: DISABLE
// begin Say ( Yakotich , 3Yak-02 ) ;
6734: LD_EXP 9
6738: PPUSH
6739: LD_STRING 3Yak-02
6741: PPUSH
6742: CALL_OW 88
// Say ( Dimitri , 3Dim-01 ) ;
6746: LD_EXP 23
6750: PPUSH
6751: LD_STRING 3Dim-01
6753: PPUSH
6754: CALL_OW 88
// Say ( Yakotich , 3Yak-03 ) ;
6758: LD_EXP 9
6762: PPUSH
6763: LD_STRING 3Yak-03
6765: PPUSH
6766: CALL_OW 88
// Say ( Dimitri , 3Dim-02 ) ;
6770: LD_EXP 23
6774: PPUSH
6775: LD_STRING 3Dim-02
6777: PPUSH
6778: CALL_OW 88
// SayRadio ( Yakotich , 3Yak-04 ) ;
6782: LD_EXP 9
6786: PPUSH
6787: LD_STRING 3Yak-04
6789: PPUSH
6790: CALL_OW 94
// SayRadio ( Platonov , 3Plat-01 ) ;
6794: LD_EXP 63
6798: PPUSH
6799: LD_STRING 3Plat-01
6801: PPUSH
6802: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-05 ) ;
6806: LD_EXP 9
6810: PPUSH
6811: LD_STRING 3Yak-05
6813: PPUSH
6814: CALL_OW 94
// SayRadio ( Platonov , 3Plat-02 ) ;
6818: LD_EXP 63
6822: PPUSH
6823: LD_STRING 3Plat-02
6825: PPUSH
6826: CALL_OW 94
// Say ( Dimitri , 3Dim-03 ) ;
6830: LD_EXP 23
6834: PPUSH
6835: LD_STRING 3Dim-03
6837: PPUSH
6838: CALL_OW 88
// Say ( Dimitri , 3Dim-04 ) ;
6842: LD_EXP 23
6846: PPUSH
6847: LD_STRING 3Dim-04
6849: PPUSH
6850: CALL_OW 88
// Say ( Yakotich , 3Yak-06 ) ;
6854: LD_EXP 9
6858: PPUSH
6859: LD_STRING 3Yak-06
6861: PPUSH
6862: CALL_OW 88
// Say ( Dimitri , 3Dim-05 ) ;
6866: LD_EXP 23
6870: PPUSH
6871: LD_STRING 3Dim-05
6873: PPUSH
6874: CALL_OW 88
// Say ( Yakotich , 3Yak-07 ) ;
6878: LD_EXP 9
6882: PPUSH
6883: LD_STRING 3Yak-07
6885: PPUSH
6886: CALL_OW 88
// Wait ( 0 0$03 ) ;
6890: LD_INT 105
6892: PPUSH
6893: CALL_OW 67
// InitSikorskiTeam ;
6897: CALL 2780 0 0
// SikorskiAction ;
6901: CALL 5580 0 0
// ChangeMissionObjectives ( o1 ) ;
6905: LD_STRING o1
6907: PPUSH
6908: CALL_OW 337
// SetSide ( [ Ovsyenko , OB2 , OB3 , oil , eoil1 , eoil2 ] , 4 ) ;
6912: LD_INT 74
6914: PUSH
6915: LD_INT 79
6917: PUSH
6918: LD_INT 78
6920: PUSH
6921: LD_INT 76
6923: PUSH
6924: LD_INT 85
6926: PUSH
6927: LD_INT 86
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: PPUSH
6938: LD_INT 4
6940: PPUSH
6941: CALL_OW 235
// ComEnterUnit ( Cyrus , OB3 ) ;
6945: LD_EXP 53
6949: PPUSH
6950: LD_INT 78
6952: PPUSH
6953: CALL_OW 120
// ComEnterUnit ( Bobby , OB2 ) ;
6957: LD_EXP 52
6961: PPUSH
6962: LD_INT 79
6964: PPUSH
6965: CALL_OW 120
// SetClass ( [ Jilian , Turner ] , 2 ) ;
6969: LD_EXP 58
6973: PUSH
6974: LD_EXP 59
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PPUSH
6983: LD_INT 2
6985: PPUSH
6986: CALL_OW 336
// ComWalk ( [ Jilian , Turner , McCreery , Lynch , Walker , Truman , Gary ] ) ;
6990: LD_EXP 58
6994: PUSH
6995: LD_EXP 59
6999: PUSH
7000: LD_EXP 56
7004: PUSH
7005: LD_EXP 55
7009: PUSH
7010: LD_EXP 57
7014: PUSH
7015: LD_EXP 51
7019: PUSH
7020: LD_EXP 54
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: PPUSH
7034: CALL_OW 138
// end ;
7038: END
// every 0 0$1 trigger start_ended = true do
7039: LD_EXP 71
7043: PUSH
7044: LD_INT 1
7046: EQUAL
7047: IFFALSE 7119
7049: GO 7051
7051: DISABLE
// begin Say ( Yakotich , 3Yak-12 ) ;
7052: LD_EXP 9
7056: PPUSH
7057: LD_STRING 3Yak-12
7059: PPUSH
7060: CALL_OW 88
// Say ( Vasilij , 3Vas-01 ) ;
7064: LD_EXP 12
7068: PPUSH
7069: LD_STRING 3Vas-01
7071: PPUSH
7072: CALL_OW 88
// Say ( Dimitri , 3Dim-06 ) ;
7076: LD_EXP 23
7080: PPUSH
7081: LD_STRING 3Dim-06
7083: PPUSH
7084: CALL_OW 88
// Say ( Dimitri , 3Dim-07 ) ;
7088: LD_EXP 23
7092: PPUSH
7093: LD_STRING 3Dim-07
7095: PPUSH
7096: CALL_OW 88
// Say ( Vasilij , 3Vas-02 ) ;
7100: LD_EXP 12
7104: PPUSH
7105: LD_STRING 3Vas-02
7107: PPUSH
7108: CALL_OW 88
// ChangeMissionObjectives ( rocket ) ;
7112: LD_STRING rocket
7114: PPUSH
7115: CALL_OW 337
// end ;
7119: END
// every 0 0$1 trigger GetSide ( Ovsyenko ) = 3 and start_ended = true do
7120: LD_INT 74
7122: PPUSH
7123: CALL_OW 255
7127: PUSH
7128: LD_INT 3
7130: EQUAL
7131: PUSH
7132: LD_EXP 71
7136: PUSH
7137: LD_INT 1
7139: EQUAL
7140: AND
7141: IFFALSE 7323
7143: GO 7145
7145: DISABLE
// begin DialogueOn ;
7146: CALL_OW 6
// InGameOn ;
7150: CALL_OW 8
// SayRadio ( Yakotich , 3Yak-13 ) ;
7154: LD_EXP 9
7158: PPUSH
7159: LD_STRING 3Yak-13
7161: PPUSH
7162: CALL_OW 94
// SayRadio ( Platonov , 3Plat-06 ) ;
7166: LD_EXP 63
7170: PPUSH
7171: LD_STRING 3Plat-06
7173: PPUSH
7174: CALL_OW 94
// SayRadio ( Platonov , 3Plat-07 ) ;
7178: LD_EXP 63
7182: PPUSH
7183: LD_STRING 3Plat-07
7185: PPUSH
7186: CALL_OW 94
// Say ( Mietek , 3Ryn-01 ) ;
7190: LD_EXP 10
7194: PPUSH
7195: LD_STRING 3Ryn-01
7197: PPUSH
7198: CALL_OW 88
// CenterNowOnXY ( 109 , 72 ) ;
7202: LD_INT 109
7204: PPUSH
7205: LD_INT 72
7207: PPUSH
7208: CALL_OW 86
// RevealFogArea ( 3 , EastPassage ) ;
7212: LD_INT 3
7214: PPUSH
7215: LD_INT 13
7217: PPUSH
7218: CALL_OW 332
// Say ( Mietek , 3Ryn-02 ) ;
7222: LD_EXP 10
7226: PPUSH
7227: LD_STRING 3Ryn-02
7229: PPUSH
7230: CALL_OW 88
// CenterNowOnXY ( 78 , 17 ) ;
7234: LD_INT 78
7236: PPUSH
7237: LD_INT 17
7239: PPUSH
7240: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
7244: LD_INT 3
7246: PPUSH
7247: LD_INT 14
7249: PPUSH
7250: CALL_OW 332
// Say ( Mietek , 3Ryn-03 ) ;
7254: LD_EXP 10
7258: PPUSH
7259: LD_STRING 3Ryn-03
7261: PPUSH
7262: CALL_OW 88
// Say ( Yakotich , 3Yak-14 ) ;
7266: LD_EXP 9
7270: PPUSH
7271: LD_STRING 3Yak-14
7273: PPUSH
7274: CALL_OW 88
// ChangeMissionObjectives ( [ o2a , o2b , o2c ] [ Difficulty ] ) ;
7278: LD_STRING o2a
7280: PUSH
7281: LD_STRING o2b
7283: PUSH
7284: LD_STRING o2c
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: PUSH
7292: LD_OWVAR 67
7296: ARRAY
7297: PPUSH
7298: CALL_OW 337
// SetTech ( 86 , 3 , 1 ) ;
7302: LD_INT 86
7304: PPUSH
7305: LD_INT 3
7307: PPUSH
7308: LD_INT 1
7310: PPUSH
7311: CALL_OW 322
// DialogueOff ;
7315: CALL_OW 7
// InGameOff ;
7319: CALL_OW 9
// end ;
7323: END
// every 0 0$1 trigger ovsyenko_captured = true do
7324: LD_EXP 70
7328: PUSH
7329: LD_INT 1
7331: EQUAL
7332: IFFALSE 7670
7334: GO 7336
7336: DISABLE
// begin Wait ( 15 15$0 ) ;
7337: LD_INT 31500
7339: PPUSH
7340: CALL_OW 67
// InitBurlak ;
7344: CALL 2164 0 0
// DialogueOn ;
7348: CALL_OW 6
// CenterNowOnXY ( 155 , 235 ) ;
7352: LD_INT 155
7354: PPUSH
7355: LD_INT 235
7357: PPUSH
7358: CALL_OW 86
// SayRadio ( Burlak , 3Bur-01 ) ;
7362: LD_EXP 33
7366: PPUSH
7367: LD_STRING 3Bur-01
7369: PPUSH
7370: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-15 ) ;
7374: LD_EXP 9
7378: PPUSH
7379: LD_STRING 3Yak-15
7381: PPUSH
7382: CALL_OW 94
// SayRadio ( Burlak , 3Bur-02 ) ;
7386: LD_EXP 33
7390: PPUSH
7391: LD_STRING 3Bur-02
7393: PPUSH
7394: CALL_OW 94
// CenterNowOnUnits ( BurlakVeh ) ;
7398: LD_EXP 41
7402: PPUSH
7403: CALL_OW 87
// SayRadio ( Vasilij , 3Vas-Flame-01 ) ;
7407: LD_EXP 12
7411: PPUSH
7412: LD_STRING 3Vas-Flame-01
7414: PPUSH
7415: CALL_OW 94
// SayRadio ( Burlak , 3Bur-Flame-01 ) ;
7419: LD_EXP 33
7423: PPUSH
7424: LD_STRING 3Bur-Flame-01
7426: PPUSH
7427: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-Flame-01 ) ;
7431: LD_EXP 9
7435: PPUSH
7436: LD_STRING 3Yak-Flame-01
7438: PPUSH
7439: CALL_OW 94
// SayRadio ( Burlak , 3Bur-Flame-02 ) ;
7443: LD_EXP 33
7447: PPUSH
7448: LD_STRING 3Bur-Flame-02
7450: PPUSH
7451: CALL_OW 94
// SayRadio ( Vasilij , 3Vas-Flame-02 ) ;
7455: LD_EXP 12
7459: PPUSH
7460: LD_STRING 3Vas-Flame-02
7462: PPUSH
7463: CALL_OW 94
// ChangeMissionObjectives ( o3 ) ;
7467: LD_STRING o3
7469: PPUSH
7470: CALL_OW 337
// DialogueOff ;
7474: CALL_OW 7
// Wait ( 0 0$15 ) ;
7478: LD_INT 525
7480: PPUSH
7481: CALL_OW 67
// DialogueOn ;
7485: CALL_OW 6
// Say ( Petrosyan , 3Pty-01 ) ;
7489: LD_EXP 39
7493: PPUSH
7494: LD_STRING 3Pty-01
7496: PPUSH
7497: CALL_OW 88
// Say ( Yakotich , 3Yak-16 ) ;
7501: LD_EXP 9
7505: PPUSH
7506: LD_STRING 3Yak-16
7508: PPUSH
7509: CALL_OW 88
// Say ( Platonov , 3Plat-08 ) ;
7513: LD_EXP 63
7517: PPUSH
7518: LD_STRING 3Plat-08
7520: PPUSH
7521: CALL_OW 88
// ChangeMissionObjectives ( o4 ) ;
7525: LD_STRING o4
7527: PPUSH
7528: CALL_OW 337
// SetRestrict ( 11 , 3 , 1 ) ;
7532: LD_INT 11
7534: PPUSH
7535: LD_INT 3
7537: PPUSH
7538: LD_INT 1
7540: PPUSH
7541: CALL_OW 324
// SetRestrict ( 14 , 3 , 1 ) ;
7545: LD_INT 14
7547: PPUSH
7548: LD_INT 3
7550: PPUSH
7551: LD_INT 1
7553: PPUSH
7554: CALL_OW 324
// SetRestrict ( 28 , 3 , 1 ) ;
7558: LD_INT 28
7560: PPUSH
7561: LD_INT 3
7563: PPUSH
7564: LD_INT 1
7566: PPUSH
7567: CALL_OW 324
// DialogueOff ;
7571: CALL_OW 7
// Wait ( 1 1$0 ) ;
7575: LD_INT 2100
7577: PPUSH
7578: CALL_OW 67
// DialogueOn ;
7582: CALL_OW 6
// Say ( Petrosyan , 3Pty-Comp-01 ) ;
7586: LD_EXP 39
7590: PPUSH
7591: LD_STRING 3Pty-Comp-01
7593: PPUSH
7594: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-01 ) ;
7598: LD_EXP 33
7602: PPUSH
7603: LD_STRING 3Bur-Comp-01
7605: PPUSH
7606: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-02 ) ;
7610: LD_EXP 39
7614: PPUSH
7615: LD_STRING 3Pty-Comp-02
7617: PPUSH
7618: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-02 ) ;
7622: LD_EXP 33
7626: PPUSH
7627: LD_STRING 3Bur-Comp-02
7629: PPUSH
7630: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-03 ) ;
7634: LD_EXP 39
7638: PPUSH
7639: LD_STRING 3Pty-Comp-03
7641: PPUSH
7642: CALL_OW 88
// SetRestrict ( 12 , 3 , 1 ) ;
7646: LD_INT 12
7648: PPUSH
7649: LD_INT 3
7651: PPUSH
7652: LD_INT 1
7654: PPUSH
7655: CALL_OW 324
// ChangeMissionObjectives ( o5 ) ;
7659: LD_STRING o5
7661: PPUSH
7662: CALL_OW 337
// DialogueOff ;
7666: CALL_OW 7
// end ;
7670: END
// every 0 0$1 trigger everything_researched = true and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) <= 0 and siberit_excavated = true do
7671: LD_EXP 80
7675: PUSH
7676: LD_INT 1
7678: EQUAL
7679: PUSH
7680: LD_INT 22
7682: PUSH
7683: LD_INT 1
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 21
7692: PUSH
7693: LD_INT 1
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PPUSH
7704: CALL_OW 69
7708: PUSH
7709: LD_INT 0
7711: LESSEQUAL
7712: AND
7713: PUSH
7714: LD_EXP 78
7718: PUSH
7719: LD_INT 1
7721: EQUAL
7722: AND
7723: IFFALSE 7740
7725: GO 7727
7727: DISABLE
// begin end_of_the_mission = true ;
7728: LD_ADDR_EXP 83
7732: PUSH
7733: LD_INT 1
7735: ST_TO_ADDR
// Ending ;
7736: CALL 7741 0 0
// end ;
7740: END
// export function Ending ; begin
7741: LD_INT 0
7743: PPUSH
// CenterOnUnits ( Yakotich ) ;
7744: LD_EXP 9
7748: PPUSH
7749: CALL_OW 85
// InGameOn ;
7753: CALL_OW 8
// SayRadio ( Platonov , 3Plat-09 ) ;
7757: LD_EXP 63
7761: PPUSH
7762: LD_STRING 3Plat-09
7764: PPUSH
7765: CALL_OW 94
// SayRadio ( Platonov , 3Plat-10 ) ;
7769: LD_EXP 63
7773: PPUSH
7774: LD_STRING 3Plat-10
7776: PPUSH
7777: CALL_OW 94
// SayRadio ( Burlak , 3Bur-03 ) ;
7781: LD_EXP 33
7785: PPUSH
7786: LD_STRING 3Bur-03
7788: PPUSH
7789: CALL_OW 94
// SetSide ( [ Burlak , Petrosyan , Dolgov , Karamazov , Titov , Gleb , Petrovova , Lipshchin ] , 6 ) ;
7793: LD_EXP 33
7797: PUSH
7798: LD_EXP 39
7802: PUSH
7803: LD_EXP 40
7807: PUSH
7808: LD_EXP 34
7812: PUSH
7813: LD_EXP 38
7817: PUSH
7818: LD_EXP 37
7822: PUSH
7823: LD_EXP 35
7827: PUSH
7828: LD_EXP 36
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: PPUSH
7843: LD_INT 6
7845: PPUSH
7846: CALL_OW 235
// ComMoveToArea ( [ Burlak , Petrosyan , Dolgov , Karamazov , Titov , Gleb , Petrovova , Lipshchin ] , ExitArea ) ;
7850: LD_EXP 33
7854: PUSH
7855: LD_EXP 39
7859: PUSH
7860: LD_EXP 40
7864: PUSH
7865: LD_EXP 34
7869: PUSH
7870: LD_EXP 38
7874: PUSH
7875: LD_EXP 37
7879: PUSH
7880: LD_EXP 35
7884: PUSH
7885: LD_EXP 36
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: PPUSH
7900: LD_INT 3
7902: PPUSH
7903: CALL_OW 113
// SayRadio ( Platonov , 3Plat-11 ) ;
7907: LD_EXP 63
7911: PPUSH
7912: LD_STRING 3Plat-11
7914: PPUSH
7915: CALL_OW 94
// SayRadio ( Platonov , 3Plat-12 ) ;
7919: LD_EXP 63
7923: PPUSH
7924: LD_STRING 3Plat-12
7926: PPUSH
7927: CALL_OW 94
// SayRadio ( Yakotich , 3Yak-17 ) ;
7931: LD_EXP 9
7935: PPUSH
7936: LD_STRING 3Yak-17
7938: PPUSH
7939: CALL_OW 94
// Say ( Yakotich , 3Yak-18 ) ;
7943: LD_EXP 9
7947: PPUSH
7948: LD_STRING 3Yak-18
7950: PPUSH
7951: CALL_OW 88
// Say ( Dimitri , 3Dim-08 ) ;
7955: LD_EXP 23
7959: PPUSH
7960: LD_STRING 3Dim-08
7962: PPUSH
7963: CALL_OW 88
// InGameOff ;
7967: CALL_OW 9
// if weapon_builded = false then
7971: LD_EXP 84
7975: PUSH
7976: LD_INT 0
7978: EQUAL
7979: IFFALSE 7988
// SetAchievement ( ACH_NEW_WEAPONS ) ;
7981: LD_STRING ACH_NEW_WEAPONS
7983: PPUSH
7984: CALL_OW 543
// AddMedal ( SibExcavated , 1 ) ;
7988: LD_STRING SibExcavated
7990: PPUSH
7991: LD_INT 1
7993: PPUSH
7994: CALL_OW 101
// if IsOk ( BurlakVeh ) then
7998: LD_EXP 41
8002: PPUSH
8003: CALL_OW 302
8007: IFFALSE 8021
// AddMedal ( FlameSaved , 1 ) else
8009: LD_STRING FlameSaved
8011: PPUSH
8012: LD_INT 1
8014: PPUSH
8015: CALL_OW 101
8019: GO 8032
// AddMedal ( FlameSaved , - 1 ) ;
8021: LD_STRING FlameSaved
8023: PPUSH
8024: LD_INT 1
8026: NEG
8027: PPUSH
8028: CALL_OW 101
// if crane_researched = true and buldozer_researched = true and lab_captured = true and prediction_researched = true and rocket_researched = true then
8032: LD_EXP 82
8036: PUSH
8037: LD_INT 1
8039: EQUAL
8040: PUSH
8041: LD_EXP 76
8045: PUSH
8046: LD_INT 1
8048: EQUAL
8049: AND
8050: PUSH
8051: LD_EXP 73
8055: PUSH
8056: LD_INT 1
8058: EQUAL
8059: AND
8060: PUSH
8061: LD_EXP 75
8065: PUSH
8066: LD_INT 1
8068: EQUAL
8069: AND
8070: PUSH
8071: LD_EXP 74
8075: PUSH
8076: LD_INT 1
8078: EQUAL
8079: AND
8080: IFFALSE 8094
// AddMedal ( Secondary , 1 ) else
8082: LD_STRING Secondary
8084: PPUSH
8085: LD_INT 1
8087: PPUSH
8088: CALL_OW 101
8092: GO 8105
// AddMedal ( Secondary , - 1 ) ;
8094: LD_STRING Secondary
8096: PPUSH
8097: LD_INT 1
8099: NEG
8100: PPUSH
8101: CALL_OW 101
// GiveMedals ( Medals ) ;
8105: LD_STRING Medals
8107: PPUSH
8108: CALL_OW 102
// if IsOk ( BurlakVeh ) then
8112: LD_EXP 41
8116: PPUSH
8117: CALL_OW 302
8121: IFFALSE 8133
// SaveVariable ( 1 , 03_FlameSaved ) ;
8123: LD_INT 1
8125: PPUSH
8126: LD_STRING 03_FlameSaved
8128: PPUSH
8129: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) and FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
8133: LD_INT 22
8135: PUSH
8136: LD_INT 3
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 23
8145: PUSH
8146: LD_INT 3
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: LD_INT 21
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: LIST
8167: PPUSH
8168: CALL_OW 69
8172: PUSH
8173: LD_INT 22
8175: PUSH
8176: LD_INT 6
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: PUSH
8183: LD_INT 23
8185: PUSH
8186: LD_INT 3
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: PUSH
8193: LD_INT 21
8195: PUSH
8196: LD_INT 1
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: LIST
8207: PPUSH
8208: CALL_OW 69
8212: AND
8213: PPUSH
8214: CALL_OW 43
// SaveCharacters ( Yakotich , 03_Yakotich ) ;
8218: LD_EXP 9
8222: PPUSH
8223: LD_STRING 03_Yakotich
8225: PPUSH
8226: CALL_OW 38
// SaveCharacters ( Mietek , 03_Mietek ) ;
8230: LD_EXP 10
8234: PPUSH
8235: LD_STRING 03_Mietek
8237: PPUSH
8238: CALL_OW 38
// SaveCharacters ( Maksim , 03_Maksim ) ;
8242: LD_EXP 15
8246: PPUSH
8247: LD_STRING 03_Maksim
8249: PPUSH
8250: CALL_OW 38
// SaveCharacters ( Vasilij , 03_Vasilij ) ;
8254: LD_EXP 12
8258: PPUSH
8259: LD_STRING 03_Vasilij
8261: PPUSH
8262: CALL_OW 38
// SaveCharacters ( Michail , 03_Michail ) ;
8266: LD_EXP 13
8270: PPUSH
8271: LD_STRING 03_Michail
8273: PPUSH
8274: CALL_OW 38
// SaveCharacters ( Boris , 03_Boris ) ;
8278: LD_EXP 11
8282: PPUSH
8283: LD_STRING 03_Boris
8285: PPUSH
8286: CALL_OW 38
// SaveCharacters ( Constantin , 03_Constantin ) ;
8290: LD_EXP 14
8294: PPUSH
8295: LD_STRING 03_Constantin
8297: PPUSH
8298: CALL_OW 38
// SaveCharacters ( Fiodor , 03_Fiodor ) ;
8302: LD_EXP 16
8306: PPUSH
8307: LD_STRING 03_Fiodor
8309: PPUSH
8310: CALL_OW 38
// SaveCharacters ( Aleksiej , 03_Aleksiej ) ;
8314: LD_EXP 19
8318: PPUSH
8319: LD_STRING 03_Aleksiej
8321: PPUSH
8322: CALL_OW 38
// SaveCharacters ( Pavel , 03_Pavel ) ;
8326: LD_EXP 17
8330: PPUSH
8331: LD_STRING 03_Pavel
8333: PPUSH
8334: CALL_OW 38
// SaveCharacters ( Zakhar , 03_Zakhar ) ;
8338: LD_EXP 18
8342: PPUSH
8343: LD_STRING 03_Zakhar
8345: PPUSH
8346: CALL_OW 38
// SaveCharacters ( Aleksandr , 03_Aleksandr ) ;
8350: LD_EXP 20
8354: PPUSH
8355: LD_STRING 03_Aleksandr
8357: PPUSH
8358: CALL_OW 38
// SaveCharacters ( Stanislav , 03_Stanislav ) ;
8362: LD_EXP 22
8366: PPUSH
8367: LD_STRING 03_Stanislav
8369: PPUSH
8370: CALL_OW 38
// SaveCharacters ( Josif , 03_Josif ) ;
8374: LD_EXP 21
8378: PPUSH
8379: LD_STRING 03_Josif
8381: PPUSH
8382: CALL_OW 38
// SaveCharacters ( Grigori , 03_Grigori ) ;
8386: LD_EXP 26
8390: PPUSH
8391: LD_STRING 03_Grigori
8393: PPUSH
8394: CALL_OW 38
// SaveCharacters ( Jegor , 03_Jegor ) ;
8398: LD_EXP 25
8402: PPUSH
8403: LD_STRING 03_Jegor
8405: PPUSH
8406: CALL_OW 38
// SaveCharacters ( Anton , 03_Anton ) ;
8410: LD_EXP 27
8414: PPUSH
8415: LD_STRING 03_Anton
8417: PPUSH
8418: CALL_OW 38
// SaveCharacters ( Dimitri , 03_Dimitri ) ;
8422: LD_EXP 23
8426: PPUSH
8427: LD_STRING 03_Dimitri
8429: PPUSH
8430: CALL_OW 38
// SaveCharacters ( Ivan , 03_Ivan ) ;
8434: LD_EXP 24
8438: PPUSH
8439: LD_STRING 03_Ivan
8441: PPUSH
8442: CALL_OW 38
// SaveCharacters ( Burlak , 03_Burlak ) ;
8446: LD_EXP 33
8450: PPUSH
8451: LD_STRING 03_Burlak
8453: PPUSH
8454: CALL_OW 38
// SaveCharacters ( Karamazov , 03_Karamazov ) ;
8458: LD_EXP 34
8462: PPUSH
8463: LD_STRING 03_Karamazov
8465: PPUSH
8466: CALL_OW 38
// SaveCharacters ( Titov , 03_Titov ) ;
8470: LD_EXP 38
8474: PPUSH
8475: LD_STRING 03_Titov
8477: PPUSH
8478: CALL_OW 38
// SaveCharacters ( Petrovova , 03_Petrovova ) ;
8482: LD_EXP 35
8486: PPUSH
8487: LD_STRING 03_Petrovova
8489: PPUSH
8490: CALL_OW 38
// SaveCharacters ( Gleb , 03_Gleb ) ;
8494: LD_EXP 37
8498: PPUSH
8499: LD_STRING 03_Gleb
8501: PPUSH
8502: CALL_OW 38
// SaveCharacters ( Lipshchin , 03_Lipshchin ) ;
8506: LD_EXP 36
8510: PPUSH
8511: LD_STRING 03_Lipshchin
8513: PPUSH
8514: CALL_OW 38
// SaveCharacters ( Dolgov , 03_Dolgov ) ;
8518: LD_EXP 40
8522: PPUSH
8523: LD_STRING 03_Dolgov
8525: PPUSH
8526: CALL_OW 38
// SaveCharacters ( Petrosyan , 03_Petrosyan ) ;
8530: LD_EXP 39
8534: PPUSH
8535: LD_STRING 03_Petrosyan
8537: PPUSH
8538: CALL_OW 38
// YouWin ;
8542: CALL_OW 103
// end ; end_of_file
8546: LD_VAR 0 1
8550: RET
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot and start_ended then
8551: LD_VAR 0 1
8555: PPUSH
8556: CALL_OW 255
8560: PUSH
8561: LD_INT 3
8563: EQUAL
8564: PUSH
8565: LD_VAR 0 1
8569: PPUSH
8570: CALL_OW 266
8574: PUSH
8575: LD_INT 0
8577: EQUAL
8578: AND
8579: PUSH
8580: LD_EXP 71
8584: AND
8585: IFFALSE 8638
// begin RuDep := building ;
8587: LD_ADDR_EXP 86
8591: PUSH
8592: LD_VAR 0 1
8596: ST_TO_ADDR
// SetBName ( building , voroshilov ) ;
8597: LD_VAR 0 1
8601: PPUSH
8602: LD_STRING voroshilov
8604: PPUSH
8605: CALL_OW 500
// SetRestrict ( b_depot , 3 , false ) ;
8609: LD_INT 0
8611: PPUSH
8612: LD_INT 3
8614: PPUSH
8615: LD_INT 0
8617: PPUSH
8618: CALL_OW 324
// ingame_video := false ;
8622: LD_ADDR_OWVAR 52
8626: PUSH
8627: LD_INT 0
8629: ST_TO_ADDR
// interface_hidden := false ;
8630: LD_ADDR_OWVAR 54
8634: PUSH
8635: LD_INT 0
8637: ST_TO_ADDR
// end ; end ;
8638: PPOPN 2
8640: END
// on BuildingComplete ( building ) do begin if GetBType ( building ) = b_armoury and GetSide ( building ) = 3 and crane_triggered = false then
8641: LD_VAR 0 1
8645: PPUSH
8646: CALL_OW 266
8650: PUSH
8651: LD_INT 4
8653: EQUAL
8654: PUSH
8655: LD_VAR 0 1
8659: PPUSH
8660: CALL_OW 255
8664: PUSH
8665: LD_INT 3
8667: EQUAL
8668: AND
8669: PUSH
8670: LD_EXP 81
8674: PUSH
8675: LD_INT 0
8677: EQUAL
8678: AND
8679: IFFALSE 8741
// begin crane_triggered = true ;
8681: LD_ADDR_EXP 81
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// DialogueOn ;
8689: CALL_OW 6
// Say ( Boris , 3Boris-Crane-01 ) ;
8693: LD_EXP 11
8697: PPUSH
8698: LD_STRING 3Boris-Crane-01
8700: PPUSH
8701: CALL_OW 88
// Say ( Vasilij , 3Vas-Crane-01 ) ;
8705: LD_EXP 12
8709: PPUSH
8710: LD_STRING 3Vas-Crane-01
8712: PPUSH
8713: CALL_OW 88
// ChangeMissionObjectives ( crane ) ;
8717: LD_STRING crane
8719: PPUSH
8720: CALL_OW 337
// SetTech ( 3 , 85 , 1 ) ;
8724: LD_INT 3
8726: PPUSH
8727: LD_INT 85
8729: PPUSH
8730: LD_INT 1
8732: PPUSH
8733: CALL_OW 322
// DialogueOff ;
8737: CALL_OW 7
// end ; end ;
8741: PPOPN 1
8743: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetControl ( vehicle ) = control_remote and GetSide ( vehicle ) = 1 then
8744: LD_VAR 0 1
8748: PPUSH
8749: CALL_OW 263
8753: PUSH
8754: LD_INT 2
8756: EQUAL
8757: PUSH
8758: LD_VAR 0 1
8762: PPUSH
8763: CALL_OW 255
8767: PUSH
8768: LD_INT 1
8770: EQUAL
8771: AND
8772: IFFALSE 8992
// begin Wait ( 0 0$3 ) ;
8774: LD_INT 105
8776: PPUSH
8777: CALL_OW 67
// Connect ( vehicle ) ;
8781: LD_VAR 0 1
8785: PPUSH
8786: CALL 18210 0 1
// newAttackers := Replace ( newAttackers , newAttackers + 1 , vehicle ) ;
8790: LD_ADDR_EXP 7
8794: PUSH
8795: LD_EXP 7
8799: PPUSH
8800: LD_EXP 7
8804: PUSH
8805: LD_INT 1
8807: PLUS
8808: PPUSH
8809: LD_VAR 0 1
8813: PPUSH
8814: CALL_OW 1
8818: ST_TO_ADDR
// if newAttackers >= [ 4 , 5 , 6 ] [ Difficulty ] then
8819: LD_EXP 7
8823: PUSH
8824: LD_INT 4
8826: PUSH
8827: LD_INT 5
8829: PUSH
8830: LD_INT 6
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: PUSH
8838: LD_OWVAR 67
8842: ARRAY
8843: GREATEREQUAL
8844: IFFALSE 8869
// begin attackers := attackers union newAttackers ;
8846: LD_ADDR_EXP 8
8850: PUSH
8851: LD_EXP 8
8855: PUSH
8856: LD_EXP 7
8860: UNION
8861: ST_TO_ADDR
// newAttackers := [ ] ;
8862: LD_ADDR_EXP 7
8866: PUSH
8867: EMPTY
8868: ST_TO_ADDR
// end ; if See ( 3 , vehicle ) then
8869: LD_INT 3
8871: PPUSH
8872: LD_VAR 0 1
8876: PPUSH
8877: CALL_OW 292
8881: IFFALSE 8924
// begin DialogueOn ;
8883: CALL_OW 6
// CenterNowOnUnits ( vehicle ) ;
8887: LD_VAR 0 1
8891: PPUSH
8892: CALL_OW 87
// Say ( Yakotich , 3Yak-Remote-Control ) ;
8896: LD_EXP 9
8900: PPUSH
8901: LD_STRING 3Yak-Remote-Control
8903: PPUSH
8904: CALL_OW 88
// Say ( Vasilij , 3Vas-Remote-Control ) ;
8908: LD_EXP 12
8912: PPUSH
8913: LD_STRING 3Vas-Remote-Control
8915: PPUSH
8916: CALL_OW 88
// DialogueOff ;
8920: CALL_OW 7
// end ; if GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 52 or GetWeapon ( vehicle ) = 53 and GetSide ( vehicle ) = 3 then
8924: LD_VAR 0 1
8928: PPUSH
8929: CALL_OW 264
8933: PUSH
8934: LD_INT 45
8936: EQUAL
8937: PUSH
8938: LD_VAR 0 1
8942: PPUSH
8943: CALL_OW 264
8947: PUSH
8948: LD_INT 52
8950: EQUAL
8951: OR
8952: PUSH
8953: LD_VAR 0 1
8957: PPUSH
8958: CALL_OW 264
8962: PUSH
8963: LD_INT 53
8965: EQUAL
8966: PUSH
8967: LD_VAR 0 1
8971: PPUSH
8972: CALL_OW 255
8976: PUSH
8977: LD_INT 3
8979: EQUAL
8980: AND
8981: OR
8982: IFFALSE 8992
// begin weapon_builded = true ;
8984: LD_ADDR_EXP 84
8988: PUSH
8989: LD_INT 1
8991: ST_TO_ADDR
// end ; end ; end ;
8992: PPOPN 2
8994: END
// on WeaponPlaced ( b , f ) do begin if GetBWeapon ( b ) = 45 then
8995: LD_VAR 0 1
8999: PPUSH
9000: CALL_OW 269
9004: PUSH
9005: LD_INT 45
9007: EQUAL
9008: IFFALSE 9018
// begin weapon_builded = true ;
9010: LD_ADDR_EXP 84
9014: PUSH
9015: LD_INT 1
9017: ST_TO_ADDR
// end ; end ;
9018: PPOPN 2
9020: END
// on UnitDestroyed_Extra ( un , ks , ku ) do begin if GetWeapon ( ku ) = ar_flame_thrower and GetSide ( un ) = 1 and GetType ( un ) = unit_building then
9021: LD_VAR 0 3
9025: PPUSH
9026: CALL_OW 264
9030: PUSH
9031: LD_INT 26
9033: EQUAL
9034: PUSH
9035: LD_VAR 0 1
9039: PPUSH
9040: CALL_OW 255
9044: PUSH
9045: LD_INT 1
9047: EQUAL
9048: AND
9049: PUSH
9050: LD_VAR 0 1
9054: PPUSH
9055: CALL_OW 247
9059: PUSH
9060: LD_INT 3
9062: EQUAL
9063: AND
9064: IFFALSE 9092
// begin FlameCounter := FlameCounter + 1 ;
9066: LD_ADDR_EXP 64
9070: PUSH
9071: LD_EXP 64
9075: PUSH
9076: LD_INT 1
9078: PLUS
9079: ST_TO_ADDR
// SetAchievementEX ( ACH_FLAME , FlameCounter ) ;
9080: LD_STRING ACH_FLAME
9082: PPUSH
9083: LD_EXP 64
9087: PPUSH
9088: CALL_OW 564
// end ; end ;
9092: PPOPN 3
9094: END
// every 0 0$1 trigger Researched ( 3 , 85 ) do
9095: LD_INT 3
9097: PPUSH
9098: LD_INT 85
9100: PPUSH
9101: CALL_OW 325
9105: IFFALSE 9137
9107: GO 9109
9109: DISABLE
// begin crane_researched = true ;
9110: LD_ADDR_EXP 82
9114: PUSH
9115: LD_INT 1
9117: ST_TO_ADDR
// Say ( Vasilij , 3Vas-Crane-02 ) ;
9118: LD_EXP 12
9122: PPUSH
9123: LD_STRING 3Vas-Crane-02
9125: PPUSH
9126: CALL_OW 88
// ChangeMissionObjectives ( crane2 ) ;
9130: LD_STRING crane2
9132: PPUSH
9133: CALL_OW 337
// end ;
9137: END
// every 0 0$1 trigger See ( 3 , AmLab1 ) and lab_seen = false do
9138: LD_INT 3
9140: PPUSH
9141: LD_INT 94
9143: PPUSH
9144: CALL_OW 292
9148: PUSH
9149: LD_EXP 72
9153: PUSH
9154: LD_INT 0
9156: EQUAL
9157: AND
9158: IFFALSE 9205
9160: GO 9162
9162: DISABLE
// begin lab_seen = true ;
9163: LD_ADDR_EXP 72
9167: PUSH
9168: LD_INT 1
9170: ST_TO_ADDR
// CenterNowOnUnits ( AmLab1 ) ;
9171: LD_INT 94
9173: PPUSH
9174: CALL_OW 87
// DialogueOn ;
9178: CALL_OW 6
// Say ( Vasilij , 3Vas-Lab-01 ) ;
9182: LD_EXP 12
9186: PPUSH
9187: LD_STRING 3Vas-Lab-01
9189: PPUSH
9190: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
9194: LD_STRING o6
9196: PPUSH
9197: CALL_OW 337
// DialogueOff ;
9201: CALL_OW 7
// end ;
9205: END
// every 0 0$1 trigger See ( 3 , AmLab2 ) and lab_seen = false do
9206: LD_INT 3
9208: PPUSH
9209: LD_INT 163
9211: PPUSH
9212: CALL_OW 292
9216: PUSH
9217: LD_EXP 72
9221: PUSH
9222: LD_INT 0
9224: EQUAL
9225: AND
9226: IFFALSE 9273
9228: GO 9230
9230: DISABLE
// begin lab_seen = true ;
9231: LD_ADDR_EXP 72
9235: PUSH
9236: LD_INT 1
9238: ST_TO_ADDR
// CenterNowOnUnits ( AmLab2 ) ;
9239: LD_INT 163
9241: PPUSH
9242: CALL_OW 87
// DialogueOn ;
9246: CALL_OW 6
// Say ( Vasilij , 3Vas-Lab-01 ) ;
9250: LD_EXP 12
9254: PPUSH
9255: LD_STRING 3Vas-Lab-01
9257: PPUSH
9258: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
9262: LD_STRING o6
9264: PPUSH
9265: CALL_OW 337
// DialogueOff ;
9269: CALL_OW 7
// end ;
9273: END
// every 0 0$1 trigger GetSide ( AmLab1 ) = 3 or GetSide ( AmLab2 ) = 3 do
9274: LD_INT 94
9276: PPUSH
9277: CALL_OW 255
9281: PUSH
9282: LD_INT 3
9284: EQUAL
9285: PUSH
9286: LD_INT 163
9288: PPUSH
9289: CALL_OW 255
9293: PUSH
9294: LD_INT 3
9296: EQUAL
9297: OR
9298: IFFALSE 9328
9300: GO 9302
9302: DISABLE
// begin ChangeMissionObjectives ( labik2 ) ;
9303: LD_STRING labik2
9305: PPUSH
9306: CALL_OW 337
// lab_captured = true ;
9310: LD_ADDR_EXP 73
9314: PUSH
9315: LD_INT 1
9317: ST_TO_ADDR
// SaveVariable ( 1 , 03_AmLab ) ;
9318: LD_INT 1
9320: PPUSH
9321: LD_STRING 03_AmLab
9323: PPUSH
9324: CALL_OW 39
// end ;
9328: END
// every 0 0$1 trigger Researched ( 3 , 86 ) do
9329: LD_INT 3
9331: PPUSH
9332: LD_INT 86
9334: PPUSH
9335: CALL_OW 325
9339: IFFALSE 9391
9341: GO 9343
9343: DISABLE
// begin DialogueOn ;
9344: CALL_OW 6
// Say ( Vasilij , 3Vas-Buldozer-01 ) ;
9348: LD_EXP 12
9352: PPUSH
9353: LD_STRING 3Vas-Buldozer-01
9355: PPUSH
9356: CALL_OW 88
// Say ( Vasilij , 3Vas-Buldozer-02 ) ;
9360: LD_EXP 12
9364: PPUSH
9365: LD_STRING 3Vas-Buldozer-02
9367: PPUSH
9368: CALL_OW 88
// ChangeMissionObjectives ( buld2 ) ;
9372: LD_STRING buld2
9374: PPUSH
9375: CALL_OW 337
// buldozer_researched = true ;
9379: LD_ADDR_EXP 76
9383: PUSH
9384: LD_INT 1
9386: ST_TO_ADDR
// DialogueOff ;
9387: CALL_OW 7
// end ;
9391: END
// every 0 0$1 trigger Researched ( 3 , 40 ) do
9392: LD_INT 3
9394: PPUSH
9395: LD_INT 40
9397: PPUSH
9398: CALL_OW 325
9402: IFFALSE 9446
9404: GO 9406
9406: DISABLE
// begin Say ( Vasilij , 3Vas-Rocket ) ;
9407: LD_EXP 12
9411: PPUSH
9412: LD_STRING 3Vas-Rocket
9414: PPUSH
9415: CALL_OW 88
// Say ( Stanislav , 3Stan-Rocket ) ;
9419: LD_EXP 22
9423: PPUSH
9424: LD_STRING 3Stan-Rocket
9426: PPUSH
9427: CALL_OW 88
// ChangeMissionObjectives ( rocket2 ) ;
9431: LD_STRING rocket2
9433: PPUSH
9434: CALL_OW 337
// rocket_researched = true ;
9438: LD_ADDR_EXP 74
9442: PUSH
9443: LD_INT 1
9445: ST_TO_ADDR
// end ;
9446: END
// every 0 0$1 trigger Researched ( 3 , 9 ) do
9447: LD_INT 3
9449: PPUSH
9450: LD_INT 9
9452: PPUSH
9453: CALL_OW 325
9457: IFFALSE 9533
9459: GO 9461
9461: DISABLE
// begin DialogueOn ;
9462: CALL_OW 6
// Say ( Petrosyan , 3Pty-Comp-04 ) ;
9466: LD_EXP 39
9470: PPUSH
9471: LD_STRING 3Pty-Comp-04
9473: PPUSH
9474: CALL_OW 88
// Say ( Yakotich , 3Yak-Comp-01 ) ;
9478: LD_EXP 9
9482: PPUSH
9483: LD_STRING 3Yak-Comp-01
9485: PPUSH
9486: CALL_OW 88
// Say ( Petrosyan , 3Pty-Comp-05 ) ;
9490: LD_EXP 39
9494: PPUSH
9495: LD_STRING 3Pty-Comp-05
9497: PPUSH
9498: CALL_OW 88
// Say ( Burlak , 3Bur-Comp-03 ) ;
9502: LD_EXP 33
9506: PPUSH
9507: LD_STRING 3Bur-Comp-03
9509: PPUSH
9510: CALL_OW 88
// ChangeMissionObjectives ( pred2 ) ;
9514: LD_STRING pred2
9516: PPUSH
9517: CALL_OW 337
// prediction_researched = true ;
9521: LD_ADDR_EXP 75
9525: PUSH
9526: LD_INT 1
9528: ST_TO_ADDR
// DialogueOff ;
9529: CALL_OW 7
// end ;
9533: END
// every 0 0$1 trigger Researched ( 3 , 30 ) do
9534: LD_INT 3
9536: PPUSH
9537: LD_INT 30
9539: PPUSH
9540: CALL_OW 325
9544: IFFALSE 9605
9546: GO 9548
9548: DISABLE
// begin DialogueOn ;
9549: CALL_OW 6
// Say ( Dolgov , 3Dol-Stasis-01 ) ;
9553: LD_EXP 40
9557: PPUSH
9558: LD_STRING 3Dol-Stasis-01
9560: PPUSH
9561: CALL_OW 88
// Say ( Burlak , 3Bur-Stasis-01 ) ;
9565: LD_EXP 33
9569: PPUSH
9570: LD_STRING 3Bur-Stasis-01
9572: PPUSH
9573: CALL_OW 88
// Say ( Dolgov , 3Dol-Stasis-02 ) ;
9577: LD_EXP 40
9581: PPUSH
9582: LD_STRING 3Dol-Stasis-02
9584: PPUSH
9585: CALL_OW 88
// Say ( Burlak , 3Bur-Stasis-02 ) ;
9589: LD_EXP 33
9593: PPUSH
9594: LD_STRING 3Bur-Stasis-02
9596: PPUSH
9597: CALL_OW 88
// DialogueOff ;
9601: CALL_OW 7
// end ;
9605: END
// every 0 0$1 trigger IsInArea ( Boris , SouthOfBase ) and start_ended = true do
9606: LD_EXP 11
9610: PPUSH
9611: LD_INT 12
9613: PPUSH
9614: CALL_OW 308
9618: PUSH
9619: LD_EXP 71
9623: PUSH
9624: LD_INT 1
9626: EQUAL
9627: AND
9628: IFFALSE 9663
9630: GO 9632
9632: DISABLE
// begin AddComBuild ( [ Boris , Anton ] , b_depot , 144 , 207 , 3 ) ;
9633: LD_EXP 11
9637: PUSH
9638: LD_EXP 27
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PPUSH
9647: LD_INT 0
9649: PPUSH
9650: LD_INT 144
9652: PPUSH
9653: LD_INT 207
9655: PPUSH
9656: LD_INT 3
9658: PPUSH
9659: CALL_OW 205
// end ;
9663: END
// every 0 0$1 trigger start_ended = true and GetSide ( Ovsyenko ) = 3 do
9664: LD_EXP 71
9668: PUSH
9669: LD_INT 1
9671: EQUAL
9672: PUSH
9673: LD_INT 74
9675: PPUSH
9676: CALL_OW 255
9680: PUSH
9681: LD_INT 3
9683: EQUAL
9684: AND
9685: IFFALSE 9698
9687: GO 9689
9689: DISABLE
// begin ovsyenko_captured = true ;
9690: LD_ADDR_EXP 70
9694: PUSH
9695: LD_INT 1
9697: ST_TO_ADDR
// end ;
9698: END
// every 0 0$1 trigger Researched ( 3 , 54 ) and Researched ( 3 , 21 ) and Researched ( 3 , 30 ) do
9699: LD_INT 3
9701: PPUSH
9702: LD_INT 54
9704: PPUSH
9705: CALL_OW 325
9709: PUSH
9710: LD_INT 3
9712: PPUSH
9713: LD_INT 21
9715: PPUSH
9716: CALL_OW 325
9720: AND
9721: PUSH
9722: LD_INT 3
9724: PPUSH
9725: LD_INT 30
9727: PPUSH
9728: CALL_OW 325
9732: AND
9733: IFFALSE 9753
9735: GO 9737
9737: DISABLE
// begin everything_researched = true ;
9738: LD_ADDR_EXP 80
9742: PUSH
9743: LD_INT 1
9745: ST_TO_ADDR
// ChangeMissionObjectives ( o4a ) ;
9746: LD_STRING o4a
9748: PPUSH
9749: CALL_OW 337
// end ;
9753: END
// every 0 0$1 trigger Siblo ( 3 ) >= [ 100 , 150 , 200 ] [ Difficulty ] do
9754: LD_INT 3
9756: PPUSH
9757: CALL 272 0 1
9761: PUSH
9762: LD_INT 100
9764: PUSH
9765: LD_INT 150
9767: PUSH
9768: LD_INT 200
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: PUSH
9776: LD_OWVAR 67
9780: ARRAY
9781: GREATEREQUAL
9782: IFFALSE 9802
9784: GO 9786
9786: DISABLE
// begin siberit_excavated = true ;
9787: LD_ADDR_EXP 78
9791: PUSH
9792: LD_INT 1
9794: ST_TO_ADDR
// ChangeMissionObjectives ( sib2 ) ;
9795: LD_STRING sib2
9797: PPUSH
9798: CALL_OW 337
// end ;
9802: END
// every 0 0$1 trigger end_of_the_mission = true do var un ;
9803: LD_EXP 83
9807: PUSH
9808: LD_INT 1
9810: EQUAL
9811: IFFALSE 9945
9813: GO 9815
9815: DISABLE
9816: LD_INT 0
9818: PPUSH
// begin for un in FilterUnitsInArea ( ExitArea , [ [ f_side , 6 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
9819: LD_ADDR_VAR 0 1
9823: PUSH
9824: LD_INT 3
9826: PPUSH
9827: LD_INT 22
9829: PUSH
9830: LD_INT 6
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 2
9839: PUSH
9840: LD_INT 21
9842: PUSH
9843: LD_INT 1
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 21
9852: PUSH
9853: LD_INT 2
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: LIST
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PPUSH
9869: CALL_OW 70
9873: PUSH
9874: FOR_IN
9875: IFFALSE 9942
// begin if IsInArea ( un , ExitArea ) then
9877: LD_VAR 0 1
9881: PPUSH
9882: LD_INT 3
9884: PPUSH
9885: CALL_OW 308
9889: IFFALSE 9940
// begin if GetType ( un ) = unit_vehicle then
9891: LD_VAR 0 1
9895: PPUSH
9896: CALL_OW 247
9900: PUSH
9901: LD_INT 2
9903: EQUAL
9904: IFFALSE 9931
// begin RemoveUnit ( IsDrivenBy ( un ) ) ;
9906: LD_VAR 0 1
9910: PPUSH
9911: CALL_OW 311
9915: PPUSH
9916: CALL_OW 64
// RemoveUnit ( un ) ;
9920: LD_VAR 0 1
9924: PPUSH
9925: CALL_OW 64
// end else
9929: GO 9940
// begin RemoveUnit ( un ) ;
9931: LD_VAR 0 1
9935: PPUSH
9936: CALL_OW 64
// end ; end ; end ;
9940: GO 9874
9942: POP
9943: POP
// enable ;
9944: ENABLE
// end ;
9945: PPOPN 1
9947: END
// every 0 0$1 trigger start_ended = true and DepotCaptureTime do
9948: LD_EXP 71
9952: PUSH
9953: LD_INT 1
9955: EQUAL
9956: PUSH
9957: LD_EXP 66
9961: AND
9962: IFFALSE 9982
9964: GO 9966
9966: DISABLE
// begin DepotCaptureTime := DepotCaptureTime - 0 0$1 ;
9967: LD_ADDR_EXP 66
9971: PUSH
9972: LD_EXP 66
9976: PUSH
9977: LD_INT 35
9979: MINUS
9980: ST_TO_ADDR
// enable ;
9981: ENABLE
// end ;
9982: END
// every 0 0$1 trigger DepotCaptureTime >= 0 0$1 and GetSide ( Ovsyenko ) = 3 and start_ended = true do
9983: LD_EXP 66
9987: PUSH
9988: LD_INT 35
9990: GREATEREQUAL
9991: PUSH
9992: LD_INT 74
9994: PPUSH
9995: CALL_OW 255
9999: PUSH
10000: LD_INT 3
10002: EQUAL
10003: AND
10004: PUSH
10005: LD_EXP 71
10009: PUSH
10010: LD_INT 1
10012: EQUAL
10013: AND
10014: IFFALSE 10026
10016: GO 10018
10018: DISABLE
// begin SetAchievement ( ACH_OVSYENKO ) ;
10019: LD_STRING ACH_OVSYENKO
10021: PPUSH
10022: CALL_OW 543
// end ; end_of_file
10026: END
// every 6 6$0 do var i , j ;
10027: GO 10029
10029: DISABLE
10030: LD_INT 0
10032: PPUSH
10033: PPUSH
// begin for i = 1 to 4 do
10034: LD_ADDR_VAR 0 1
10038: PUSH
10039: DOUBLE
10040: LD_INT 1
10042: DEC
10043: ST_TO_ADDR
10044: LD_INT 4
10046: PUSH
10047: FOR_TO
10048: IFFALSE 10073
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
10050: LD_INT 3
10052: PPUSH
10053: LD_INT 5
10055: PPUSH
10056: CALL_OW 12
10060: PPUSH
10061: LD_INT 4
10063: PPUSH
10064: LD_INT 1
10066: PPUSH
10067: CALL_OW 55
// end ;
10071: GO 10047
10073: POP
10074: POP
// CreateCratesArea ( rand ( 1 , 3 ) , AmCratesArea , true ) ;
10075: LD_INT 1
10077: PPUSH
10078: LD_INT 3
10080: PPUSH
10081: CALL_OW 12
10085: PPUSH
10086: LD_INT 7
10088: PPUSH
10089: LD_INT 1
10091: PPUSH
10092: CALL_OW 55
// enable ;
10096: ENABLE
// end ; end_of_file
10097: PPOPN 2
10099: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10100: LD_INT 0
10102: PPUSH
10103: PPUSH
// if exist_mode then
10104: LD_VAR 0 2
10108: IFFALSE 10133
// unit := CreateCharacter ( prefix & ident ) else
10110: LD_ADDR_VAR 0 5
10114: PUSH
10115: LD_VAR 0 3
10119: PUSH
10120: LD_VAR 0 1
10124: STR
10125: PPUSH
10126: CALL_OW 34
10130: ST_TO_ADDR
10131: GO 10148
// unit := NewCharacter ( ident ) ;
10133: LD_ADDR_VAR 0 5
10137: PUSH
10138: LD_VAR 0 1
10142: PPUSH
10143: CALL_OW 25
10147: ST_TO_ADDR
// result := unit ;
10148: LD_ADDR_VAR 0 4
10152: PUSH
10153: LD_VAR 0 5
10157: ST_TO_ADDR
// end ;
10158: LD_VAR 0 4
10162: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10163: LD_INT 0
10165: PPUSH
10166: PPUSH
// if not side or not nation then
10167: LD_VAR 0 1
10171: NOT
10172: PUSH
10173: LD_VAR 0 2
10177: NOT
10178: OR
10179: IFFALSE 10183
// exit ;
10181: GO 10951
// case nation of nation_american :
10183: LD_VAR 0 2
10187: PUSH
10188: LD_INT 1
10190: DOUBLE
10191: EQUAL
10192: IFTRUE 10196
10194: GO 10410
10196: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10197: LD_ADDR_VAR 0 4
10201: PUSH
10202: LD_INT 35
10204: PUSH
10205: LD_INT 45
10207: PUSH
10208: LD_INT 46
10210: PUSH
10211: LD_INT 47
10213: PUSH
10214: LD_INT 82
10216: PUSH
10217: LD_INT 83
10219: PUSH
10220: LD_INT 84
10222: PUSH
10223: LD_INT 85
10225: PUSH
10226: LD_INT 86
10228: PUSH
10229: LD_INT 1
10231: PUSH
10232: LD_INT 2
10234: PUSH
10235: LD_INT 6
10237: PUSH
10238: LD_INT 15
10240: PUSH
10241: LD_INT 16
10243: PUSH
10244: LD_INT 7
10246: PUSH
10247: LD_INT 12
10249: PUSH
10250: LD_INT 13
10252: PUSH
10253: LD_INT 10
10255: PUSH
10256: LD_INT 14
10258: PUSH
10259: LD_INT 20
10261: PUSH
10262: LD_INT 21
10264: PUSH
10265: LD_INT 22
10267: PUSH
10268: LD_INT 25
10270: PUSH
10271: LD_INT 32
10273: PUSH
10274: LD_INT 27
10276: PUSH
10277: LD_INT 36
10279: PUSH
10280: LD_INT 69
10282: PUSH
10283: LD_INT 39
10285: PUSH
10286: LD_INT 34
10288: PUSH
10289: LD_INT 40
10291: PUSH
10292: LD_INT 48
10294: PUSH
10295: LD_INT 49
10297: PUSH
10298: LD_INT 50
10300: PUSH
10301: LD_INT 51
10303: PUSH
10304: LD_INT 52
10306: PUSH
10307: LD_INT 53
10309: PUSH
10310: LD_INT 54
10312: PUSH
10313: LD_INT 55
10315: PUSH
10316: LD_INT 56
10318: PUSH
10319: LD_INT 57
10321: PUSH
10322: LD_INT 58
10324: PUSH
10325: LD_INT 59
10327: PUSH
10328: LD_INT 60
10330: PUSH
10331: LD_INT 61
10333: PUSH
10334: LD_INT 62
10336: PUSH
10337: LD_INT 80
10339: PUSH
10340: LD_INT 82
10342: PUSH
10343: LD_INT 83
10345: PUSH
10346: LD_INT 84
10348: PUSH
10349: LD_INT 85
10351: PUSH
10352: LD_INT 86
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: ST_TO_ADDR
10408: GO 10875
10410: LD_INT 2
10412: DOUBLE
10413: EQUAL
10414: IFTRUE 10418
10416: GO 10644
10418: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10419: LD_ADDR_VAR 0 4
10423: PUSH
10424: LD_INT 35
10426: PUSH
10427: LD_INT 45
10429: PUSH
10430: LD_INT 46
10432: PUSH
10433: LD_INT 47
10435: PUSH
10436: LD_INT 82
10438: PUSH
10439: LD_INT 83
10441: PUSH
10442: LD_INT 84
10444: PUSH
10445: LD_INT 85
10447: PUSH
10448: LD_INT 87
10450: PUSH
10451: LD_INT 70
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: LD_INT 11
10459: PUSH
10460: LD_INT 3
10462: PUSH
10463: LD_INT 4
10465: PUSH
10466: LD_INT 5
10468: PUSH
10469: LD_INT 6
10471: PUSH
10472: LD_INT 15
10474: PUSH
10475: LD_INT 18
10477: PUSH
10478: LD_INT 7
10480: PUSH
10481: LD_INT 17
10483: PUSH
10484: LD_INT 8
10486: PUSH
10487: LD_INT 20
10489: PUSH
10490: LD_INT 21
10492: PUSH
10493: LD_INT 22
10495: PUSH
10496: LD_INT 72
10498: PUSH
10499: LD_INT 26
10501: PUSH
10502: LD_INT 69
10504: PUSH
10505: LD_INT 39
10507: PUSH
10508: LD_INT 40
10510: PUSH
10511: LD_INT 41
10513: PUSH
10514: LD_INT 42
10516: PUSH
10517: LD_INT 43
10519: PUSH
10520: LD_INT 48
10522: PUSH
10523: LD_INT 49
10525: PUSH
10526: LD_INT 50
10528: PUSH
10529: LD_INT 51
10531: PUSH
10532: LD_INT 52
10534: PUSH
10535: LD_INT 53
10537: PUSH
10538: LD_INT 54
10540: PUSH
10541: LD_INT 55
10543: PUSH
10544: LD_INT 56
10546: PUSH
10547: LD_INT 60
10549: PUSH
10550: LD_INT 61
10552: PUSH
10553: LD_INT 62
10555: PUSH
10556: LD_INT 66
10558: PUSH
10559: LD_INT 67
10561: PUSH
10562: LD_INT 68
10564: PUSH
10565: LD_INT 81
10567: PUSH
10568: LD_INT 82
10570: PUSH
10571: LD_INT 83
10573: PUSH
10574: LD_INT 84
10576: PUSH
10577: LD_INT 85
10579: PUSH
10580: LD_INT 87
10582: PUSH
10583: LD_INT 88
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: ST_TO_ADDR
10642: GO 10875
10644: LD_INT 3
10646: DOUBLE
10647: EQUAL
10648: IFTRUE 10652
10650: GO 10874
10652: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10653: LD_ADDR_VAR 0 4
10657: PUSH
10658: LD_INT 46
10660: PUSH
10661: LD_INT 47
10663: PUSH
10664: LD_INT 1
10666: PUSH
10667: LD_INT 2
10669: PUSH
10670: LD_INT 82
10672: PUSH
10673: LD_INT 83
10675: PUSH
10676: LD_INT 84
10678: PUSH
10679: LD_INT 85
10681: PUSH
10682: LD_INT 86
10684: PUSH
10685: LD_INT 11
10687: PUSH
10688: LD_INT 9
10690: PUSH
10691: LD_INT 20
10693: PUSH
10694: LD_INT 19
10696: PUSH
10697: LD_INT 21
10699: PUSH
10700: LD_INT 24
10702: PUSH
10703: LD_INT 22
10705: PUSH
10706: LD_INT 25
10708: PUSH
10709: LD_INT 28
10711: PUSH
10712: LD_INT 29
10714: PUSH
10715: LD_INT 30
10717: PUSH
10718: LD_INT 31
10720: PUSH
10721: LD_INT 37
10723: PUSH
10724: LD_INT 38
10726: PUSH
10727: LD_INT 32
10729: PUSH
10730: LD_INT 27
10732: PUSH
10733: LD_INT 33
10735: PUSH
10736: LD_INT 69
10738: PUSH
10739: LD_INT 39
10741: PUSH
10742: LD_INT 34
10744: PUSH
10745: LD_INT 40
10747: PUSH
10748: LD_INT 71
10750: PUSH
10751: LD_INT 23
10753: PUSH
10754: LD_INT 44
10756: PUSH
10757: LD_INT 48
10759: PUSH
10760: LD_INT 49
10762: PUSH
10763: LD_INT 50
10765: PUSH
10766: LD_INT 51
10768: PUSH
10769: LD_INT 52
10771: PUSH
10772: LD_INT 53
10774: PUSH
10775: LD_INT 54
10777: PUSH
10778: LD_INT 55
10780: PUSH
10781: LD_INT 56
10783: PUSH
10784: LD_INT 57
10786: PUSH
10787: LD_INT 58
10789: PUSH
10790: LD_INT 59
10792: PUSH
10793: LD_INT 63
10795: PUSH
10796: LD_INT 64
10798: PUSH
10799: LD_INT 65
10801: PUSH
10802: LD_INT 82
10804: PUSH
10805: LD_INT 83
10807: PUSH
10808: LD_INT 84
10810: PUSH
10811: LD_INT 85
10813: PUSH
10814: LD_INT 86
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: ST_TO_ADDR
10872: GO 10875
10874: POP
// if state > - 1 and state < 3 then
10875: LD_VAR 0 3
10879: PUSH
10880: LD_INT 1
10882: NEG
10883: GREATER
10884: PUSH
10885: LD_VAR 0 3
10889: PUSH
10890: LD_INT 3
10892: LESS
10893: AND
10894: IFFALSE 10951
// for i in result do
10896: LD_ADDR_VAR 0 5
10900: PUSH
10901: LD_VAR 0 4
10905: PUSH
10906: FOR_IN
10907: IFFALSE 10949
// if GetTech ( i , side ) <> state then
10909: LD_VAR 0 5
10913: PPUSH
10914: LD_VAR 0 1
10918: PPUSH
10919: CALL_OW 321
10923: PUSH
10924: LD_VAR 0 3
10928: NONEQUAL
10929: IFFALSE 10947
// result := result diff i ;
10931: LD_ADDR_VAR 0 4
10935: PUSH
10936: LD_VAR 0 4
10940: PUSH
10941: LD_VAR 0 5
10945: DIFF
10946: ST_TO_ADDR
10947: GO 10906
10949: POP
10950: POP
// end ;
10951: LD_VAR 0 4
10955: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10956: LD_INT 0
10958: PPUSH
10959: PPUSH
10960: PPUSH
// result := true ;
10961: LD_ADDR_VAR 0 3
10965: PUSH
10966: LD_INT 1
10968: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10969: LD_ADDR_VAR 0 5
10973: PUSH
10974: LD_VAR 0 2
10978: PPUSH
10979: CALL_OW 480
10983: ST_TO_ADDR
// if not tmp then
10984: LD_VAR 0 5
10988: NOT
10989: IFFALSE 10993
// exit ;
10991: GO 11042
// for i in tmp do
10993: LD_ADDR_VAR 0 4
10997: PUSH
10998: LD_VAR 0 5
11002: PUSH
11003: FOR_IN
11004: IFFALSE 11040
// if GetTech ( i , side ) <> state_researched then
11006: LD_VAR 0 4
11010: PPUSH
11011: LD_VAR 0 1
11015: PPUSH
11016: CALL_OW 321
11020: PUSH
11021: LD_INT 2
11023: NONEQUAL
11024: IFFALSE 11038
// begin result := false ;
11026: LD_ADDR_VAR 0 3
11030: PUSH
11031: LD_INT 0
11033: ST_TO_ADDR
// exit ;
11034: POP
11035: POP
11036: GO 11042
// end ;
11038: GO 11003
11040: POP
11041: POP
// end ;
11042: LD_VAR 0 3
11046: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11047: LD_INT 0
11049: PPUSH
11050: PPUSH
11051: PPUSH
11052: PPUSH
11053: PPUSH
11054: PPUSH
11055: PPUSH
11056: PPUSH
11057: PPUSH
11058: PPUSH
11059: PPUSH
11060: PPUSH
11061: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11062: LD_VAR 0 1
11066: NOT
11067: PUSH
11068: LD_VAR 0 1
11072: PPUSH
11073: CALL_OW 257
11077: PUSH
11078: LD_INT 9
11080: NONEQUAL
11081: OR
11082: IFFALSE 11086
// exit ;
11084: GO 11659
// side := GetSide ( unit ) ;
11086: LD_ADDR_VAR 0 9
11090: PUSH
11091: LD_VAR 0 1
11095: PPUSH
11096: CALL_OW 255
11100: ST_TO_ADDR
// tech_space := tech_spacanom ;
11101: LD_ADDR_VAR 0 12
11105: PUSH
11106: LD_INT 29
11108: ST_TO_ADDR
// tech_time := tech_taurad ;
11109: LD_ADDR_VAR 0 13
11113: PUSH
11114: LD_INT 28
11116: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11117: LD_ADDR_VAR 0 11
11121: PUSH
11122: LD_VAR 0 1
11126: PPUSH
11127: CALL_OW 310
11131: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11132: LD_VAR 0 11
11136: PPUSH
11137: CALL_OW 247
11141: PUSH
11142: LD_INT 2
11144: EQUAL
11145: IFFALSE 11149
// exit ;
11147: GO 11659
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11149: LD_ADDR_VAR 0 8
11153: PUSH
11154: LD_INT 81
11156: PUSH
11157: LD_VAR 0 9
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 3
11168: PUSH
11169: LD_INT 21
11171: PUSH
11172: LD_INT 3
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 69
11191: ST_TO_ADDR
// if not tmp then
11192: LD_VAR 0 8
11196: NOT
11197: IFFALSE 11201
// exit ;
11199: GO 11659
// if in_unit then
11201: LD_VAR 0 11
11205: IFFALSE 11229
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11207: LD_ADDR_VAR 0 10
11211: PUSH
11212: LD_VAR 0 8
11216: PPUSH
11217: LD_VAR 0 11
11221: PPUSH
11222: CALL_OW 74
11226: ST_TO_ADDR
11227: GO 11249
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11229: LD_ADDR_VAR 0 10
11233: PUSH
11234: LD_VAR 0 8
11238: PPUSH
11239: LD_VAR 0 1
11243: PPUSH
11244: CALL_OW 74
11248: ST_TO_ADDR
// if not enemy then
11249: LD_VAR 0 10
11253: NOT
11254: IFFALSE 11258
// exit ;
11256: GO 11659
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11258: LD_VAR 0 11
11262: PUSH
11263: LD_VAR 0 11
11267: PPUSH
11268: LD_VAR 0 10
11272: PPUSH
11273: CALL_OW 296
11277: PUSH
11278: LD_INT 13
11280: GREATER
11281: AND
11282: PUSH
11283: LD_VAR 0 1
11287: PPUSH
11288: LD_VAR 0 10
11292: PPUSH
11293: CALL_OW 296
11297: PUSH
11298: LD_INT 12
11300: GREATER
11301: OR
11302: IFFALSE 11306
// exit ;
11304: GO 11659
// missile := [ 1 ] ;
11306: LD_ADDR_VAR 0 14
11310: PUSH
11311: LD_INT 1
11313: PUSH
11314: EMPTY
11315: LIST
11316: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11317: LD_VAR 0 9
11321: PPUSH
11322: LD_VAR 0 12
11326: PPUSH
11327: CALL_OW 325
11331: IFFALSE 11360
// missile := Replace ( missile , missile + 1 , 2 ) ;
11333: LD_ADDR_VAR 0 14
11337: PUSH
11338: LD_VAR 0 14
11342: PPUSH
11343: LD_VAR 0 14
11347: PUSH
11348: LD_INT 1
11350: PLUS
11351: PPUSH
11352: LD_INT 2
11354: PPUSH
11355: CALL_OW 1
11359: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11360: LD_VAR 0 9
11364: PPUSH
11365: LD_VAR 0 13
11369: PPUSH
11370: CALL_OW 325
11374: PUSH
11375: LD_VAR 0 10
11379: PPUSH
11380: CALL_OW 255
11384: PPUSH
11385: LD_VAR 0 13
11389: PPUSH
11390: CALL_OW 325
11394: NOT
11395: AND
11396: IFFALSE 11425
// missile := Replace ( missile , missile + 1 , 3 ) ;
11398: LD_ADDR_VAR 0 14
11402: PUSH
11403: LD_VAR 0 14
11407: PPUSH
11408: LD_VAR 0 14
11412: PUSH
11413: LD_INT 1
11415: PLUS
11416: PPUSH
11417: LD_INT 3
11419: PPUSH
11420: CALL_OW 1
11424: ST_TO_ADDR
// if missile < 2 then
11425: LD_VAR 0 14
11429: PUSH
11430: LD_INT 2
11432: LESS
11433: IFFALSE 11437
// exit ;
11435: GO 11659
// x := GetX ( enemy ) ;
11437: LD_ADDR_VAR 0 4
11441: PUSH
11442: LD_VAR 0 10
11446: PPUSH
11447: CALL_OW 250
11451: ST_TO_ADDR
// y := GetY ( enemy ) ;
11452: LD_ADDR_VAR 0 5
11456: PUSH
11457: LD_VAR 0 10
11461: PPUSH
11462: CALL_OW 251
11466: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11467: LD_ADDR_VAR 0 6
11471: PUSH
11472: LD_VAR 0 4
11476: PUSH
11477: LD_INT 1
11479: NEG
11480: PPUSH
11481: LD_INT 1
11483: PPUSH
11484: CALL_OW 12
11488: PLUS
11489: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11490: LD_ADDR_VAR 0 7
11494: PUSH
11495: LD_VAR 0 5
11499: PUSH
11500: LD_INT 1
11502: NEG
11503: PPUSH
11504: LD_INT 1
11506: PPUSH
11507: CALL_OW 12
11511: PLUS
11512: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11513: LD_VAR 0 6
11517: PPUSH
11518: LD_VAR 0 7
11522: PPUSH
11523: CALL_OW 488
11527: NOT
11528: IFFALSE 11550
// begin _x := x ;
11530: LD_ADDR_VAR 0 6
11534: PUSH
11535: LD_VAR 0 4
11539: ST_TO_ADDR
// _y := y ;
11540: LD_ADDR_VAR 0 7
11544: PUSH
11545: LD_VAR 0 5
11549: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11550: LD_ADDR_VAR 0 3
11554: PUSH
11555: LD_INT 1
11557: PPUSH
11558: LD_VAR 0 14
11562: PPUSH
11563: CALL_OW 12
11567: ST_TO_ADDR
// case i of 1 :
11568: LD_VAR 0 3
11572: PUSH
11573: LD_INT 1
11575: DOUBLE
11576: EQUAL
11577: IFTRUE 11581
11579: GO 11598
11581: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11582: LD_VAR 0 1
11586: PPUSH
11587: LD_VAR 0 10
11591: PPUSH
11592: CALL_OW 115
11596: GO 11659
11598: LD_INT 2
11600: DOUBLE
11601: EQUAL
11602: IFTRUE 11606
11604: GO 11628
11606: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11607: LD_VAR 0 1
11611: PPUSH
11612: LD_VAR 0 6
11616: PPUSH
11617: LD_VAR 0 7
11621: PPUSH
11622: CALL_OW 153
11626: GO 11659
11628: LD_INT 3
11630: DOUBLE
11631: EQUAL
11632: IFTRUE 11636
11634: GO 11658
11636: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11637: LD_VAR 0 1
11641: PPUSH
11642: LD_VAR 0 6
11646: PPUSH
11647: LD_VAR 0 7
11651: PPUSH
11652: CALL_OW 154
11656: GO 11659
11658: POP
// end ;
11659: LD_VAR 0 2
11663: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11664: LD_INT 0
11666: PPUSH
11667: PPUSH
11668: PPUSH
11669: PPUSH
11670: PPUSH
11671: PPUSH
// if not unit or not building then
11672: LD_VAR 0 1
11676: NOT
11677: PUSH
11678: LD_VAR 0 2
11682: NOT
11683: OR
11684: IFFALSE 11688
// exit ;
11686: GO 11846
// x := GetX ( building ) ;
11688: LD_ADDR_VAR 0 5
11692: PUSH
11693: LD_VAR 0 2
11697: PPUSH
11698: CALL_OW 250
11702: ST_TO_ADDR
// y := GetY ( building ) ;
11703: LD_ADDR_VAR 0 6
11707: PUSH
11708: LD_VAR 0 2
11712: PPUSH
11713: CALL_OW 251
11717: ST_TO_ADDR
// for i = 0 to 5 do
11718: LD_ADDR_VAR 0 4
11722: PUSH
11723: DOUBLE
11724: LD_INT 0
11726: DEC
11727: ST_TO_ADDR
11728: LD_INT 5
11730: PUSH
11731: FOR_TO
11732: IFFALSE 11844
// begin _x := ShiftX ( x , i , 3 ) ;
11734: LD_ADDR_VAR 0 7
11738: PUSH
11739: LD_VAR 0 5
11743: PPUSH
11744: LD_VAR 0 4
11748: PPUSH
11749: LD_INT 3
11751: PPUSH
11752: CALL_OW 272
11756: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11757: LD_ADDR_VAR 0 8
11761: PUSH
11762: LD_VAR 0 6
11766: PPUSH
11767: LD_VAR 0 4
11771: PPUSH
11772: LD_INT 3
11774: PPUSH
11775: CALL_OW 273
11779: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11780: LD_VAR 0 7
11784: PPUSH
11785: LD_VAR 0 8
11789: PPUSH
11790: CALL_OW 488
11794: NOT
11795: IFFALSE 11799
// continue ;
11797: GO 11731
// if HexInfo ( _x , _y ) = 0 then
11799: LD_VAR 0 7
11803: PPUSH
11804: LD_VAR 0 8
11808: PPUSH
11809: CALL_OW 428
11813: PUSH
11814: LD_INT 0
11816: EQUAL
11817: IFFALSE 11842
// begin ComMoveXY ( unit , _x , _y ) ;
11819: LD_VAR 0 1
11823: PPUSH
11824: LD_VAR 0 7
11828: PPUSH
11829: LD_VAR 0 8
11833: PPUSH
11834: CALL_OW 111
// exit ;
11838: POP
11839: POP
11840: GO 11846
// end ; end ;
11842: GO 11731
11844: POP
11845: POP
// end ;
11846: LD_VAR 0 3
11850: RET
// export function ScanBase ( side , base_area ) ; begin
11851: LD_INT 0
11853: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11854: LD_ADDR_VAR 0 3
11858: PUSH
11859: LD_VAR 0 2
11863: PPUSH
11864: LD_INT 81
11866: PUSH
11867: LD_VAR 0 1
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 70
11880: ST_TO_ADDR
// end ;
11881: LD_VAR 0 3
11885: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11886: LD_INT 0
11888: PPUSH
11889: PPUSH
11890: PPUSH
11891: PPUSH
// result := false ;
11892: LD_ADDR_VAR 0 2
11896: PUSH
11897: LD_INT 0
11899: ST_TO_ADDR
// side := GetSide ( unit ) ;
11900: LD_ADDR_VAR 0 3
11904: PUSH
11905: LD_VAR 0 1
11909: PPUSH
11910: CALL_OW 255
11914: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11915: LD_ADDR_VAR 0 4
11919: PUSH
11920: LD_VAR 0 1
11924: PPUSH
11925: CALL_OW 248
11929: ST_TO_ADDR
// case nat of 1 :
11930: LD_VAR 0 4
11934: PUSH
11935: LD_INT 1
11937: DOUBLE
11938: EQUAL
11939: IFTRUE 11943
11941: GO 11954
11943: POP
// tech := tech_lassight ; 2 :
11944: LD_ADDR_VAR 0 5
11948: PUSH
11949: LD_INT 12
11951: ST_TO_ADDR
11952: GO 11993
11954: LD_INT 2
11956: DOUBLE
11957: EQUAL
11958: IFTRUE 11962
11960: GO 11973
11962: POP
// tech := tech_mortar ; 3 :
11963: LD_ADDR_VAR 0 5
11967: PUSH
11968: LD_INT 41
11970: ST_TO_ADDR
11971: GO 11993
11973: LD_INT 3
11975: DOUBLE
11976: EQUAL
11977: IFTRUE 11981
11979: GO 11992
11981: POP
// tech := tech_bazooka ; end ;
11982: LD_ADDR_VAR 0 5
11986: PUSH
11987: LD_INT 44
11989: ST_TO_ADDR
11990: GO 11993
11992: POP
// if Researched ( side , tech ) then
11993: LD_VAR 0 3
11997: PPUSH
11998: LD_VAR 0 5
12002: PPUSH
12003: CALL_OW 325
12007: IFFALSE 12034
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12009: LD_ADDR_VAR 0 2
12013: PUSH
12014: LD_INT 5
12016: PUSH
12017: LD_INT 8
12019: PUSH
12020: LD_INT 9
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: LD_VAR 0 4
12032: ARRAY
12033: ST_TO_ADDR
// end ;
12034: LD_VAR 0 2
12038: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12039: LD_INT 0
12041: PPUSH
12042: PPUSH
12043: PPUSH
// if not mines then
12044: LD_VAR 0 2
12048: NOT
12049: IFFALSE 12053
// exit ;
12051: GO 12197
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12053: LD_ADDR_VAR 0 5
12057: PUSH
12058: LD_INT 81
12060: PUSH
12061: LD_VAR 0 1
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 3
12072: PUSH
12073: LD_INT 21
12075: PUSH
12076: LD_INT 3
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: PPUSH
12091: CALL_OW 69
12095: ST_TO_ADDR
// for i in mines do
12096: LD_ADDR_VAR 0 4
12100: PUSH
12101: LD_VAR 0 2
12105: PUSH
12106: FOR_IN
12107: IFFALSE 12195
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12109: LD_VAR 0 4
12113: PUSH
12114: LD_INT 1
12116: ARRAY
12117: PPUSH
12118: LD_VAR 0 4
12122: PUSH
12123: LD_INT 2
12125: ARRAY
12126: PPUSH
12127: CALL_OW 458
12131: NOT
12132: IFFALSE 12136
// continue ;
12134: GO 12106
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12136: LD_VAR 0 4
12140: PUSH
12141: LD_INT 1
12143: ARRAY
12144: PPUSH
12145: LD_VAR 0 4
12149: PUSH
12150: LD_INT 2
12152: ARRAY
12153: PPUSH
12154: CALL_OW 428
12158: PUSH
12159: LD_VAR 0 5
12163: IN
12164: IFFALSE 12193
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12166: LD_VAR 0 4
12170: PUSH
12171: LD_INT 1
12173: ARRAY
12174: PPUSH
12175: LD_VAR 0 4
12179: PUSH
12180: LD_INT 2
12182: ARRAY
12183: PPUSH
12184: LD_VAR 0 1
12188: PPUSH
12189: CALL_OW 456
// end ;
12193: GO 12106
12195: POP
12196: POP
// end ;
12197: LD_VAR 0 3
12201: RET
// export function Count ( array ) ; var i ; begin
12202: LD_INT 0
12204: PPUSH
12205: PPUSH
// result := 0 ;
12206: LD_ADDR_VAR 0 2
12210: PUSH
12211: LD_INT 0
12213: ST_TO_ADDR
// for i in array do
12214: LD_ADDR_VAR 0 3
12218: PUSH
12219: LD_VAR 0 1
12223: PUSH
12224: FOR_IN
12225: IFFALSE 12249
// if i then
12227: LD_VAR 0 3
12231: IFFALSE 12247
// result := result + 1 ;
12233: LD_ADDR_VAR 0 2
12237: PUSH
12238: LD_VAR 0 2
12242: PUSH
12243: LD_INT 1
12245: PLUS
12246: ST_TO_ADDR
12247: GO 12224
12249: POP
12250: POP
// end ;
12251: LD_VAR 0 2
12255: RET
// export function IsEmpty ( building ) ; begin
12256: LD_INT 0
12258: PPUSH
// if not building then
12259: LD_VAR 0 1
12263: NOT
12264: IFFALSE 12268
// exit ;
12266: GO 12311
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12268: LD_ADDR_VAR 0 2
12272: PUSH
12273: LD_VAR 0 1
12277: PUSH
12278: LD_INT 22
12280: PUSH
12281: LD_VAR 0 1
12285: PPUSH
12286: CALL_OW 255
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PUSH
12295: LD_INT 58
12297: PUSH
12298: EMPTY
12299: LIST
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PPUSH
12305: CALL_OW 69
12309: IN
12310: ST_TO_ADDR
// end ;
12311: LD_VAR 0 2
12315: RET
// export function IsNotFull ( building ) ; var places ; begin
12316: LD_INT 0
12318: PPUSH
12319: PPUSH
// if not building then
12320: LD_VAR 0 1
12324: NOT
12325: IFFALSE 12329
// exit ;
12327: GO 12500
// result := false ;
12329: LD_ADDR_VAR 0 2
12333: PUSH
12334: LD_INT 0
12336: ST_TO_ADDR
// places := 0 ;
12337: LD_ADDR_VAR 0 3
12341: PUSH
12342: LD_INT 0
12344: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
12345: LD_VAR 0 1
12349: PPUSH
12350: CALL_OW 266
12354: PUSH
12355: LD_INT 0
12357: DOUBLE
12358: EQUAL
12359: IFTRUE 12417
12361: LD_INT 1
12363: DOUBLE
12364: EQUAL
12365: IFTRUE 12417
12367: LD_INT 6
12369: DOUBLE
12370: EQUAL
12371: IFTRUE 12417
12373: LD_INT 7
12375: DOUBLE
12376: EQUAL
12377: IFTRUE 12417
12379: LD_INT 8
12381: DOUBLE
12382: EQUAL
12383: IFTRUE 12417
12385: LD_INT 4
12387: DOUBLE
12388: EQUAL
12389: IFTRUE 12417
12391: LD_INT 5
12393: DOUBLE
12394: EQUAL
12395: IFTRUE 12417
12397: LD_INT 2
12399: DOUBLE
12400: EQUAL
12401: IFTRUE 12417
12403: LD_INT 3
12405: DOUBLE
12406: EQUAL
12407: IFTRUE 12417
12409: LD_INT 35
12411: DOUBLE
12412: EQUAL
12413: IFTRUE 12417
12415: GO 12428
12417: POP
// places := 6 ; b_bunker , b_breastwork :
12418: LD_ADDR_VAR 0 3
12422: PUSH
12423: LD_INT 6
12425: ST_TO_ADDR
12426: GO 12473
12428: LD_INT 32
12430: DOUBLE
12431: EQUAL
12432: IFTRUE 12442
12434: LD_INT 31
12436: DOUBLE
12437: EQUAL
12438: IFTRUE 12442
12440: GO 12453
12442: POP
// places := 1 ; b_control_tower :
12443: LD_ADDR_VAR 0 3
12447: PUSH
12448: LD_INT 1
12450: ST_TO_ADDR
12451: GO 12473
12453: LD_INT 36
12455: DOUBLE
12456: EQUAL
12457: IFTRUE 12461
12459: GO 12472
12461: POP
// places := 3 ; end ;
12462: LD_ADDR_VAR 0 3
12466: PUSH
12467: LD_INT 3
12469: ST_TO_ADDR
12470: GO 12473
12472: POP
// if places then
12473: LD_VAR 0 3
12477: IFFALSE 12500
// result := UnitsInside ( building ) < places ;
12479: LD_ADDR_VAR 0 2
12483: PUSH
12484: LD_VAR 0 1
12488: PPUSH
12489: CALL_OW 313
12493: PUSH
12494: LD_VAR 0 3
12498: LESS
12499: ST_TO_ADDR
// end ;
12500: LD_VAR 0 2
12504: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12505: LD_INT 0
12507: PPUSH
12508: PPUSH
12509: PPUSH
12510: PPUSH
// tmp := [ ] ;
12511: LD_ADDR_VAR 0 3
12515: PUSH
12516: EMPTY
12517: ST_TO_ADDR
// list := [ ] ;
12518: LD_ADDR_VAR 0 5
12522: PUSH
12523: EMPTY
12524: ST_TO_ADDR
// for i = 16 to 25 do
12525: LD_ADDR_VAR 0 4
12529: PUSH
12530: DOUBLE
12531: LD_INT 16
12533: DEC
12534: ST_TO_ADDR
12535: LD_INT 25
12537: PUSH
12538: FOR_TO
12539: IFFALSE 12612
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12541: LD_ADDR_VAR 0 3
12545: PUSH
12546: LD_VAR 0 3
12550: PUSH
12551: LD_INT 22
12553: PUSH
12554: LD_VAR 0 1
12558: PPUSH
12559: CALL_OW 255
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 91
12570: PUSH
12571: LD_VAR 0 1
12575: PUSH
12576: LD_INT 6
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 30
12586: PUSH
12587: LD_VAR 0 4
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: PPUSH
12604: CALL_OW 69
12608: ADD
12609: ST_TO_ADDR
12610: GO 12538
12612: POP
12613: POP
// for i = 1 to tmp do
12614: LD_ADDR_VAR 0 4
12618: PUSH
12619: DOUBLE
12620: LD_INT 1
12622: DEC
12623: ST_TO_ADDR
12624: LD_VAR 0 3
12628: PUSH
12629: FOR_TO
12630: IFFALSE 12718
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12632: LD_ADDR_VAR 0 5
12636: PUSH
12637: LD_VAR 0 5
12641: PUSH
12642: LD_VAR 0 3
12646: PUSH
12647: LD_VAR 0 4
12651: ARRAY
12652: PPUSH
12653: CALL_OW 266
12657: PUSH
12658: LD_VAR 0 3
12662: PUSH
12663: LD_VAR 0 4
12667: ARRAY
12668: PPUSH
12669: CALL_OW 250
12673: PUSH
12674: LD_VAR 0 3
12678: PUSH
12679: LD_VAR 0 4
12683: ARRAY
12684: PPUSH
12685: CALL_OW 251
12689: PUSH
12690: LD_VAR 0 3
12694: PUSH
12695: LD_VAR 0 4
12699: ARRAY
12700: PPUSH
12701: CALL_OW 254
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: PUSH
12712: EMPTY
12713: LIST
12714: ADD
12715: ST_TO_ADDR
12716: GO 12629
12718: POP
12719: POP
// result := list ;
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: LD_VAR 0 5
12729: ST_TO_ADDR
// end ;
12730: LD_VAR 0 2
12734: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12735: LD_INT 0
12737: PPUSH
12738: PPUSH
12739: PPUSH
12740: PPUSH
12741: PPUSH
12742: PPUSH
12743: PPUSH
// if not factory then
12744: LD_VAR 0 1
12748: NOT
12749: IFFALSE 12753
// exit ;
12751: GO 13346
// if control = control_apeman then
12753: LD_VAR 0 4
12757: PUSH
12758: LD_INT 5
12760: EQUAL
12761: IFFALSE 12870
// begin tmp := UnitsInside ( factory ) ;
12763: LD_ADDR_VAR 0 8
12767: PUSH
12768: LD_VAR 0 1
12772: PPUSH
12773: CALL_OW 313
12777: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12778: LD_VAR 0 8
12782: PPUSH
12783: LD_INT 25
12785: PUSH
12786: LD_INT 12
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PPUSH
12793: CALL_OW 72
12797: NOT
12798: IFFALSE 12808
// control := control_manual ;
12800: LD_ADDR_VAR 0 4
12804: PUSH
12805: LD_INT 1
12807: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12808: LD_ADDR_VAR 0 8
12812: PUSH
12813: LD_VAR 0 1
12817: PPUSH
12818: CALL 12505 0 1
12822: ST_TO_ADDR
// if tmp then
12823: LD_VAR 0 8
12827: IFFALSE 12870
// begin for i in tmp do
12829: LD_ADDR_VAR 0 7
12833: PUSH
12834: LD_VAR 0 8
12838: PUSH
12839: FOR_IN
12840: IFFALSE 12868
// if i [ 1 ] = b_ext_radio then
12842: LD_VAR 0 7
12846: PUSH
12847: LD_INT 1
12849: ARRAY
12850: PUSH
12851: LD_INT 22
12853: EQUAL
12854: IFFALSE 12866
// begin control := control_remote ;
12856: LD_ADDR_VAR 0 4
12860: PUSH
12861: LD_INT 2
12863: ST_TO_ADDR
// break ;
12864: GO 12868
// end ;
12866: GO 12839
12868: POP
12869: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12870: LD_VAR 0 1
12874: PPUSH
12875: LD_VAR 0 2
12879: PPUSH
12880: LD_VAR 0 3
12884: PPUSH
12885: LD_VAR 0 4
12889: PPUSH
12890: LD_VAR 0 5
12894: PPUSH
12895: CALL_OW 448
12899: IFFALSE 12934
// begin result := [ chassis , engine , control , weapon ] ;
12901: LD_ADDR_VAR 0 6
12905: PUSH
12906: LD_VAR 0 2
12910: PUSH
12911: LD_VAR 0 3
12915: PUSH
12916: LD_VAR 0 4
12920: PUSH
12921: LD_VAR 0 5
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: ST_TO_ADDR
// exit ;
12932: GO 13346
// end ; _chassis := AvailableChassisList ( factory ) ;
12934: LD_ADDR_VAR 0 9
12938: PUSH
12939: LD_VAR 0 1
12943: PPUSH
12944: CALL_OW 475
12948: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12949: LD_ADDR_VAR 0 11
12953: PUSH
12954: LD_VAR 0 1
12958: PPUSH
12959: CALL_OW 476
12963: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12964: LD_ADDR_VAR 0 12
12968: PUSH
12969: LD_VAR 0 1
12973: PPUSH
12974: CALL_OW 477
12978: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12979: LD_ADDR_VAR 0 10
12983: PUSH
12984: LD_VAR 0 1
12988: PPUSH
12989: CALL_OW 478
12993: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12994: LD_VAR 0 9
12998: NOT
12999: PUSH
13000: LD_VAR 0 11
13004: NOT
13005: OR
13006: PUSH
13007: LD_VAR 0 12
13011: NOT
13012: OR
13013: PUSH
13014: LD_VAR 0 10
13018: NOT
13019: OR
13020: IFFALSE 13055
// begin result := [ chassis , engine , control , weapon ] ;
13022: LD_ADDR_VAR 0 6
13026: PUSH
13027: LD_VAR 0 2
13031: PUSH
13032: LD_VAR 0 3
13036: PUSH
13037: LD_VAR 0 4
13041: PUSH
13042: LD_VAR 0 5
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: ST_TO_ADDR
// exit ;
13053: GO 13346
// end ; if not chassis in _chassis then
13055: LD_VAR 0 2
13059: PUSH
13060: LD_VAR 0 9
13064: IN
13065: NOT
13066: IFFALSE 13092
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13068: LD_ADDR_VAR 0 2
13072: PUSH
13073: LD_VAR 0 9
13077: PUSH
13078: LD_INT 1
13080: PPUSH
13081: LD_VAR 0 9
13085: PPUSH
13086: CALL_OW 12
13090: ARRAY
13091: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13092: LD_VAR 0 2
13096: PPUSH
13097: LD_VAR 0 3
13101: PPUSH
13102: CALL 13351 0 2
13106: NOT
13107: IFFALSE 13166
// repeat engine := _engine [ 1 ] ;
13109: LD_ADDR_VAR 0 3
13113: PUSH
13114: LD_VAR 0 11
13118: PUSH
13119: LD_INT 1
13121: ARRAY
13122: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13123: LD_ADDR_VAR 0 11
13127: PUSH
13128: LD_VAR 0 11
13132: PPUSH
13133: LD_INT 1
13135: PPUSH
13136: CALL_OW 3
13140: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13141: LD_VAR 0 2
13145: PPUSH
13146: LD_VAR 0 3
13150: PPUSH
13151: CALL 13351 0 2
13155: PUSH
13156: LD_VAR 0 11
13160: PUSH
13161: EMPTY
13162: EQUAL
13163: OR
13164: IFFALSE 13109
// if not control in _control then
13166: LD_VAR 0 4
13170: PUSH
13171: LD_VAR 0 12
13175: IN
13176: NOT
13177: IFFALSE 13203
// control := _control [ rand ( 1 , _control ) ] ;
13179: LD_ADDR_VAR 0 4
13183: PUSH
13184: LD_VAR 0 12
13188: PUSH
13189: LD_INT 1
13191: PPUSH
13192: LD_VAR 0 12
13196: PPUSH
13197: CALL_OW 12
13201: ARRAY
13202: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13203: LD_VAR 0 2
13207: PPUSH
13208: LD_VAR 0 5
13212: PPUSH
13213: CALL 13571 0 2
13217: NOT
13218: IFFALSE 13277
// repeat weapon := _weapon [ 1 ] ;
13220: LD_ADDR_VAR 0 5
13224: PUSH
13225: LD_VAR 0 10
13229: PUSH
13230: LD_INT 1
13232: ARRAY
13233: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13234: LD_ADDR_VAR 0 10
13238: PUSH
13239: LD_VAR 0 10
13243: PPUSH
13244: LD_INT 1
13246: PPUSH
13247: CALL_OW 3
13251: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13252: LD_VAR 0 2
13256: PPUSH
13257: LD_VAR 0 5
13261: PPUSH
13262: CALL 13571 0 2
13266: PUSH
13267: LD_VAR 0 10
13271: PUSH
13272: EMPTY
13273: EQUAL
13274: OR
13275: IFFALSE 13220
// result := [ ] ;
13277: LD_ADDR_VAR 0 6
13281: PUSH
13282: EMPTY
13283: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13284: LD_VAR 0 1
13288: PPUSH
13289: LD_VAR 0 2
13293: PPUSH
13294: LD_VAR 0 3
13298: PPUSH
13299: LD_VAR 0 4
13303: PPUSH
13304: LD_VAR 0 5
13308: PPUSH
13309: CALL_OW 448
13313: IFFALSE 13346
// result := [ chassis , engine , control , weapon ] ;
13315: LD_ADDR_VAR 0 6
13319: PUSH
13320: LD_VAR 0 2
13324: PUSH
13325: LD_VAR 0 3
13329: PUSH
13330: LD_VAR 0 4
13334: PUSH
13335: LD_VAR 0 5
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: ST_TO_ADDR
// end ;
13346: LD_VAR 0 6
13350: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13351: LD_INT 0
13353: PPUSH
// if not chassis or not engine then
13354: LD_VAR 0 1
13358: NOT
13359: PUSH
13360: LD_VAR 0 2
13364: NOT
13365: OR
13366: IFFALSE 13370
// exit ;
13368: GO 13566
// case engine of engine_solar :
13370: LD_VAR 0 2
13374: PUSH
13375: LD_INT 2
13377: DOUBLE
13378: EQUAL
13379: IFTRUE 13383
13381: GO 13421
13383: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13384: LD_ADDR_VAR 0 3
13388: PUSH
13389: LD_INT 11
13391: PUSH
13392: LD_INT 12
13394: PUSH
13395: LD_INT 13
13397: PUSH
13398: LD_INT 14
13400: PUSH
13401: LD_INT 1
13403: PUSH
13404: LD_INT 2
13406: PUSH
13407: LD_INT 3
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: ST_TO_ADDR
13419: GO 13550
13421: LD_INT 1
13423: DOUBLE
13424: EQUAL
13425: IFTRUE 13429
13427: GO 13491
13429: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13430: LD_ADDR_VAR 0 3
13434: PUSH
13435: LD_INT 11
13437: PUSH
13438: LD_INT 12
13440: PUSH
13441: LD_INT 13
13443: PUSH
13444: LD_INT 14
13446: PUSH
13447: LD_INT 1
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: LD_INT 3
13455: PUSH
13456: LD_INT 4
13458: PUSH
13459: LD_INT 5
13461: PUSH
13462: LD_INT 21
13464: PUSH
13465: LD_INT 23
13467: PUSH
13468: LD_INT 22
13470: PUSH
13471: LD_INT 24
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: ST_TO_ADDR
13489: GO 13550
13491: LD_INT 3
13493: DOUBLE
13494: EQUAL
13495: IFTRUE 13499
13497: GO 13549
13499: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13500: LD_ADDR_VAR 0 3
13504: PUSH
13505: LD_INT 13
13507: PUSH
13508: LD_INT 14
13510: PUSH
13511: LD_INT 2
13513: PUSH
13514: LD_INT 3
13516: PUSH
13517: LD_INT 4
13519: PUSH
13520: LD_INT 5
13522: PUSH
13523: LD_INT 21
13525: PUSH
13526: LD_INT 22
13528: PUSH
13529: LD_INT 23
13531: PUSH
13532: LD_INT 24
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: ST_TO_ADDR
13547: GO 13550
13549: POP
// result := ( chassis in result ) ;
13550: LD_ADDR_VAR 0 3
13554: PUSH
13555: LD_VAR 0 1
13559: PUSH
13560: LD_VAR 0 3
13564: IN
13565: ST_TO_ADDR
// end ;
13566: LD_VAR 0 3
13570: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13571: LD_INT 0
13573: PPUSH
// if not chassis or not weapon then
13574: LD_VAR 0 1
13578: NOT
13579: PUSH
13580: LD_VAR 0 2
13584: NOT
13585: OR
13586: IFFALSE 13590
// exit ;
13588: GO 14652
// case weapon of us_machine_gun :
13590: LD_VAR 0 2
13594: PUSH
13595: LD_INT 2
13597: DOUBLE
13598: EQUAL
13599: IFTRUE 13603
13601: GO 13633
13603: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13604: LD_ADDR_VAR 0 3
13608: PUSH
13609: LD_INT 1
13611: PUSH
13612: LD_INT 2
13614: PUSH
13615: LD_INT 3
13617: PUSH
13618: LD_INT 4
13620: PUSH
13621: LD_INT 5
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: ST_TO_ADDR
13631: GO 14636
13633: LD_INT 3
13635: DOUBLE
13636: EQUAL
13637: IFTRUE 13641
13639: GO 13671
13641: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13642: LD_ADDR_VAR 0 3
13646: PUSH
13647: LD_INT 1
13649: PUSH
13650: LD_INT 2
13652: PUSH
13653: LD_INT 3
13655: PUSH
13656: LD_INT 4
13658: PUSH
13659: LD_INT 5
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: ST_TO_ADDR
13669: GO 14636
13671: LD_INT 11
13673: DOUBLE
13674: EQUAL
13675: IFTRUE 13679
13677: GO 13709
13679: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13680: LD_ADDR_VAR 0 3
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: LD_INT 2
13690: PUSH
13691: LD_INT 3
13693: PUSH
13694: LD_INT 4
13696: PUSH
13697: LD_INT 5
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: ST_TO_ADDR
13707: GO 14636
13709: LD_INT 4
13711: DOUBLE
13712: EQUAL
13713: IFTRUE 13717
13715: GO 13743
13717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13718: LD_ADDR_VAR 0 3
13722: PUSH
13723: LD_INT 2
13725: PUSH
13726: LD_INT 3
13728: PUSH
13729: LD_INT 4
13731: PUSH
13732: LD_INT 5
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: ST_TO_ADDR
13741: GO 14636
13743: LD_INT 5
13745: DOUBLE
13746: EQUAL
13747: IFTRUE 13751
13749: GO 13777
13751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13752: LD_ADDR_VAR 0 3
13756: PUSH
13757: LD_INT 2
13759: PUSH
13760: LD_INT 3
13762: PUSH
13763: LD_INT 4
13765: PUSH
13766: LD_INT 5
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: ST_TO_ADDR
13775: GO 14636
13777: LD_INT 9
13779: DOUBLE
13780: EQUAL
13781: IFTRUE 13785
13783: GO 13811
13785: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13786: LD_ADDR_VAR 0 3
13790: PUSH
13791: LD_INT 2
13793: PUSH
13794: LD_INT 3
13796: PUSH
13797: LD_INT 4
13799: PUSH
13800: LD_INT 5
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: ST_TO_ADDR
13809: GO 14636
13811: LD_INT 7
13813: DOUBLE
13814: EQUAL
13815: IFTRUE 13819
13817: GO 13845
13819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13820: LD_ADDR_VAR 0 3
13824: PUSH
13825: LD_INT 2
13827: PUSH
13828: LD_INT 3
13830: PUSH
13831: LD_INT 4
13833: PUSH
13834: LD_INT 5
13836: PUSH
13837: EMPTY
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: ST_TO_ADDR
13843: GO 14636
13845: LD_INT 12
13847: DOUBLE
13848: EQUAL
13849: IFTRUE 13853
13851: GO 13879
13853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13854: LD_ADDR_VAR 0 3
13858: PUSH
13859: LD_INT 2
13861: PUSH
13862: LD_INT 3
13864: PUSH
13865: LD_INT 4
13867: PUSH
13868: LD_INT 5
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: ST_TO_ADDR
13877: GO 14636
13879: LD_INT 13
13881: DOUBLE
13882: EQUAL
13883: IFTRUE 13887
13885: GO 13913
13887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13888: LD_ADDR_VAR 0 3
13892: PUSH
13893: LD_INT 2
13895: PUSH
13896: LD_INT 3
13898: PUSH
13899: LD_INT 4
13901: PUSH
13902: LD_INT 5
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: ST_TO_ADDR
13911: GO 14636
13913: LD_INT 14
13915: DOUBLE
13916: EQUAL
13917: IFTRUE 13921
13919: GO 13939
13921: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13922: LD_ADDR_VAR 0 3
13926: PUSH
13927: LD_INT 4
13929: PUSH
13930: LD_INT 5
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: ST_TO_ADDR
13937: GO 14636
13939: LD_INT 6
13941: DOUBLE
13942: EQUAL
13943: IFTRUE 13947
13945: GO 13965
13947: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13948: LD_ADDR_VAR 0 3
13952: PUSH
13953: LD_INT 4
13955: PUSH
13956: LD_INT 5
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: ST_TO_ADDR
13963: GO 14636
13965: LD_INT 10
13967: DOUBLE
13968: EQUAL
13969: IFTRUE 13973
13971: GO 13991
13973: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13974: LD_ADDR_VAR 0 3
13978: PUSH
13979: LD_INT 4
13981: PUSH
13982: LD_INT 5
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: ST_TO_ADDR
13989: GO 14636
13991: LD_INT 22
13993: DOUBLE
13994: EQUAL
13995: IFTRUE 13999
13997: GO 14025
13999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14000: LD_ADDR_VAR 0 3
14004: PUSH
14005: LD_INT 11
14007: PUSH
14008: LD_INT 12
14010: PUSH
14011: LD_INT 13
14013: PUSH
14014: LD_INT 14
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: ST_TO_ADDR
14023: GO 14636
14025: LD_INT 23
14027: DOUBLE
14028: EQUAL
14029: IFTRUE 14033
14031: GO 14059
14033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14034: LD_ADDR_VAR 0 3
14038: PUSH
14039: LD_INT 11
14041: PUSH
14042: LD_INT 12
14044: PUSH
14045: LD_INT 13
14047: PUSH
14048: LD_INT 14
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: ST_TO_ADDR
14057: GO 14636
14059: LD_INT 24
14061: DOUBLE
14062: EQUAL
14063: IFTRUE 14067
14065: GO 14093
14067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14068: LD_ADDR_VAR 0 3
14072: PUSH
14073: LD_INT 11
14075: PUSH
14076: LD_INT 12
14078: PUSH
14079: LD_INT 13
14081: PUSH
14082: LD_INT 14
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: ST_TO_ADDR
14091: GO 14636
14093: LD_INT 30
14095: DOUBLE
14096: EQUAL
14097: IFTRUE 14101
14099: GO 14127
14101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14102: LD_ADDR_VAR 0 3
14106: PUSH
14107: LD_INT 11
14109: PUSH
14110: LD_INT 12
14112: PUSH
14113: LD_INT 13
14115: PUSH
14116: LD_INT 14
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: ST_TO_ADDR
14125: GO 14636
14127: LD_INT 25
14129: DOUBLE
14130: EQUAL
14131: IFTRUE 14135
14133: GO 14153
14135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14136: LD_ADDR_VAR 0 3
14140: PUSH
14141: LD_INT 13
14143: PUSH
14144: LD_INT 14
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: ST_TO_ADDR
14151: GO 14636
14153: LD_INT 27
14155: DOUBLE
14156: EQUAL
14157: IFTRUE 14161
14159: GO 14179
14161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14162: LD_ADDR_VAR 0 3
14166: PUSH
14167: LD_INT 13
14169: PUSH
14170: LD_INT 14
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: ST_TO_ADDR
14177: GO 14636
14179: LD_EXP 92
14183: DOUBLE
14184: EQUAL
14185: IFTRUE 14189
14187: GO 14215
14189: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14190: LD_ADDR_VAR 0 3
14194: PUSH
14195: LD_INT 11
14197: PUSH
14198: LD_INT 12
14200: PUSH
14201: LD_INT 13
14203: PUSH
14204: LD_INT 14
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: ST_TO_ADDR
14213: GO 14636
14215: LD_INT 28
14217: DOUBLE
14218: EQUAL
14219: IFTRUE 14223
14221: GO 14241
14223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14224: LD_ADDR_VAR 0 3
14228: PUSH
14229: LD_INT 13
14231: PUSH
14232: LD_INT 14
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: ST_TO_ADDR
14239: GO 14636
14241: LD_INT 29
14243: DOUBLE
14244: EQUAL
14245: IFTRUE 14249
14247: GO 14267
14249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14250: LD_ADDR_VAR 0 3
14254: PUSH
14255: LD_INT 13
14257: PUSH
14258: LD_INT 14
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: ST_TO_ADDR
14265: GO 14636
14267: LD_INT 31
14269: DOUBLE
14270: EQUAL
14271: IFTRUE 14275
14273: GO 14293
14275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14276: LD_ADDR_VAR 0 3
14280: PUSH
14281: LD_INT 13
14283: PUSH
14284: LD_INT 14
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: ST_TO_ADDR
14291: GO 14636
14293: LD_INT 26
14295: DOUBLE
14296: EQUAL
14297: IFTRUE 14301
14299: GO 14319
14301: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14302: LD_ADDR_VAR 0 3
14306: PUSH
14307: LD_INT 13
14309: PUSH
14310: LD_INT 14
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: ST_TO_ADDR
14317: GO 14636
14319: LD_INT 42
14321: DOUBLE
14322: EQUAL
14323: IFTRUE 14327
14325: GO 14353
14327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14328: LD_ADDR_VAR 0 3
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 22
14338: PUSH
14339: LD_INT 23
14341: PUSH
14342: LD_INT 24
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: ST_TO_ADDR
14351: GO 14636
14353: LD_INT 43
14355: DOUBLE
14356: EQUAL
14357: IFTRUE 14361
14359: GO 14387
14361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14362: LD_ADDR_VAR 0 3
14366: PUSH
14367: LD_INT 21
14369: PUSH
14370: LD_INT 22
14372: PUSH
14373: LD_INT 23
14375: PUSH
14376: LD_INT 24
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: ST_TO_ADDR
14385: GO 14636
14387: LD_INT 44
14389: DOUBLE
14390: EQUAL
14391: IFTRUE 14395
14393: GO 14421
14395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14396: LD_ADDR_VAR 0 3
14400: PUSH
14401: LD_INT 21
14403: PUSH
14404: LD_INT 22
14406: PUSH
14407: LD_INT 23
14409: PUSH
14410: LD_INT 24
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: ST_TO_ADDR
14419: GO 14636
14421: LD_INT 45
14423: DOUBLE
14424: EQUAL
14425: IFTRUE 14429
14427: GO 14455
14429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14430: LD_ADDR_VAR 0 3
14434: PUSH
14435: LD_INT 21
14437: PUSH
14438: LD_INT 22
14440: PUSH
14441: LD_INT 23
14443: PUSH
14444: LD_INT 24
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: ST_TO_ADDR
14453: GO 14636
14455: LD_INT 49
14457: DOUBLE
14458: EQUAL
14459: IFTRUE 14463
14461: GO 14489
14463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14464: LD_ADDR_VAR 0 3
14468: PUSH
14469: LD_INT 21
14471: PUSH
14472: LD_INT 22
14474: PUSH
14475: LD_INT 23
14477: PUSH
14478: LD_INT 24
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: ST_TO_ADDR
14487: GO 14636
14489: LD_INT 51
14491: DOUBLE
14492: EQUAL
14493: IFTRUE 14497
14495: GO 14523
14497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14498: LD_ADDR_VAR 0 3
14502: PUSH
14503: LD_INT 21
14505: PUSH
14506: LD_INT 22
14508: PUSH
14509: LD_INT 23
14511: PUSH
14512: LD_INT 24
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: ST_TO_ADDR
14521: GO 14636
14523: LD_INT 52
14525: DOUBLE
14526: EQUAL
14527: IFTRUE 14531
14529: GO 14557
14531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14532: LD_ADDR_VAR 0 3
14536: PUSH
14537: LD_INT 21
14539: PUSH
14540: LD_INT 22
14542: PUSH
14543: LD_INT 23
14545: PUSH
14546: LD_INT 24
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: ST_TO_ADDR
14555: GO 14636
14557: LD_INT 53
14559: DOUBLE
14560: EQUAL
14561: IFTRUE 14565
14563: GO 14583
14565: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14566: LD_ADDR_VAR 0 3
14570: PUSH
14571: LD_INT 23
14573: PUSH
14574: LD_INT 24
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: ST_TO_ADDR
14581: GO 14636
14583: LD_INT 46
14585: DOUBLE
14586: EQUAL
14587: IFTRUE 14591
14589: GO 14609
14591: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14592: LD_ADDR_VAR 0 3
14596: PUSH
14597: LD_INT 23
14599: PUSH
14600: LD_INT 24
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: ST_TO_ADDR
14607: GO 14636
14609: LD_INT 47
14611: DOUBLE
14612: EQUAL
14613: IFTRUE 14617
14615: GO 14635
14617: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14618: LD_ADDR_VAR 0 3
14622: PUSH
14623: LD_INT 23
14625: PUSH
14626: LD_INT 24
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: ST_TO_ADDR
14633: GO 14636
14635: POP
// result := ( chassis in result ) ;
14636: LD_ADDR_VAR 0 3
14640: PUSH
14641: LD_VAR 0 1
14645: PUSH
14646: LD_VAR 0 3
14650: IN
14651: ST_TO_ADDR
// end ;
14652: LD_VAR 0 3
14656: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14657: LD_INT 0
14659: PPUSH
14660: PPUSH
14661: PPUSH
14662: PPUSH
14663: PPUSH
14664: PPUSH
14665: PPUSH
// result := array ;
14666: LD_ADDR_VAR 0 5
14670: PUSH
14671: LD_VAR 0 1
14675: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14676: LD_VAR 0 1
14680: NOT
14681: PUSH
14682: LD_VAR 0 2
14686: NOT
14687: OR
14688: PUSH
14689: LD_VAR 0 3
14693: NOT
14694: OR
14695: PUSH
14696: LD_VAR 0 2
14700: PUSH
14701: LD_VAR 0 1
14705: GREATER
14706: OR
14707: PUSH
14708: LD_VAR 0 3
14712: PUSH
14713: LD_VAR 0 1
14717: GREATER
14718: OR
14719: IFFALSE 14723
// exit ;
14721: GO 15019
// if direction then
14723: LD_VAR 0 4
14727: IFFALSE 14791
// begin d := 1 ;
14729: LD_ADDR_VAR 0 9
14733: PUSH
14734: LD_INT 1
14736: ST_TO_ADDR
// if i_from > i_to then
14737: LD_VAR 0 2
14741: PUSH
14742: LD_VAR 0 3
14746: GREATER
14747: IFFALSE 14773
// length := ( array - i_from ) + i_to else
14749: LD_ADDR_VAR 0 11
14753: PUSH
14754: LD_VAR 0 1
14758: PUSH
14759: LD_VAR 0 2
14763: MINUS
14764: PUSH
14765: LD_VAR 0 3
14769: PLUS
14770: ST_TO_ADDR
14771: GO 14789
// length := i_to - i_from ;
14773: LD_ADDR_VAR 0 11
14777: PUSH
14778: LD_VAR 0 3
14782: PUSH
14783: LD_VAR 0 2
14787: MINUS
14788: ST_TO_ADDR
// end else
14789: GO 14852
// begin d := - 1 ;
14791: LD_ADDR_VAR 0 9
14795: PUSH
14796: LD_INT 1
14798: NEG
14799: ST_TO_ADDR
// if i_from > i_to then
14800: LD_VAR 0 2
14804: PUSH
14805: LD_VAR 0 3
14809: GREATER
14810: IFFALSE 14830
// length := i_from - i_to else
14812: LD_ADDR_VAR 0 11
14816: PUSH
14817: LD_VAR 0 2
14821: PUSH
14822: LD_VAR 0 3
14826: MINUS
14827: ST_TO_ADDR
14828: GO 14852
// length := ( array - i_to ) + i_from ;
14830: LD_ADDR_VAR 0 11
14834: PUSH
14835: LD_VAR 0 1
14839: PUSH
14840: LD_VAR 0 3
14844: MINUS
14845: PUSH
14846: LD_VAR 0 2
14850: PLUS
14851: ST_TO_ADDR
// end ; if not length then
14852: LD_VAR 0 11
14856: NOT
14857: IFFALSE 14861
// exit ;
14859: GO 15019
// tmp := array ;
14861: LD_ADDR_VAR 0 10
14865: PUSH
14866: LD_VAR 0 1
14870: ST_TO_ADDR
// for i = 1 to length do
14871: LD_ADDR_VAR 0 6
14875: PUSH
14876: DOUBLE
14877: LD_INT 1
14879: DEC
14880: ST_TO_ADDR
14881: LD_VAR 0 11
14885: PUSH
14886: FOR_TO
14887: IFFALSE 15007
// begin for j = 1 to array do
14889: LD_ADDR_VAR 0 7
14893: PUSH
14894: DOUBLE
14895: LD_INT 1
14897: DEC
14898: ST_TO_ADDR
14899: LD_VAR 0 1
14903: PUSH
14904: FOR_TO
14905: IFFALSE 14993
// begin k := j + d ;
14907: LD_ADDR_VAR 0 8
14911: PUSH
14912: LD_VAR 0 7
14916: PUSH
14917: LD_VAR 0 9
14921: PLUS
14922: ST_TO_ADDR
// if k > array then
14923: LD_VAR 0 8
14927: PUSH
14928: LD_VAR 0 1
14932: GREATER
14933: IFFALSE 14943
// k := 1 ;
14935: LD_ADDR_VAR 0 8
14939: PUSH
14940: LD_INT 1
14942: ST_TO_ADDR
// if not k then
14943: LD_VAR 0 8
14947: NOT
14948: IFFALSE 14960
// k := array ;
14950: LD_ADDR_VAR 0 8
14954: PUSH
14955: LD_VAR 0 1
14959: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14960: LD_ADDR_VAR 0 10
14964: PUSH
14965: LD_VAR 0 10
14969: PPUSH
14970: LD_VAR 0 8
14974: PPUSH
14975: LD_VAR 0 1
14979: PUSH
14980: LD_VAR 0 7
14984: ARRAY
14985: PPUSH
14986: CALL_OW 1
14990: ST_TO_ADDR
// end ;
14991: GO 14904
14993: POP
14994: POP
// array := tmp ;
14995: LD_ADDR_VAR 0 1
14999: PUSH
15000: LD_VAR 0 10
15004: ST_TO_ADDR
// end ;
15005: GO 14886
15007: POP
15008: POP
// result := array ;
15009: LD_ADDR_VAR 0 5
15013: PUSH
15014: LD_VAR 0 1
15018: ST_TO_ADDR
// end ;
15019: LD_VAR 0 5
15023: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15024: LD_INT 0
15026: PPUSH
15027: PPUSH
// result := 0 ;
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_INT 0
15035: ST_TO_ADDR
// if not array or not value in array then
15036: LD_VAR 0 1
15040: NOT
15041: PUSH
15042: LD_VAR 0 2
15046: PUSH
15047: LD_VAR 0 1
15051: IN
15052: NOT
15053: OR
15054: IFFALSE 15058
// exit ;
15056: GO 15112
// for i = 1 to array do
15058: LD_ADDR_VAR 0 4
15062: PUSH
15063: DOUBLE
15064: LD_INT 1
15066: DEC
15067: ST_TO_ADDR
15068: LD_VAR 0 1
15072: PUSH
15073: FOR_TO
15074: IFFALSE 15110
// if value = array [ i ] then
15076: LD_VAR 0 2
15080: PUSH
15081: LD_VAR 0 1
15085: PUSH
15086: LD_VAR 0 4
15090: ARRAY
15091: EQUAL
15092: IFFALSE 15108
// begin result := i ;
15094: LD_ADDR_VAR 0 3
15098: PUSH
15099: LD_VAR 0 4
15103: ST_TO_ADDR
// exit ;
15104: POP
15105: POP
15106: GO 15112
// end ;
15108: GO 15073
15110: POP
15111: POP
// end ;
15112: LD_VAR 0 3
15116: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15117: LD_INT 0
15119: PPUSH
// vc_chassis := chassis ;
15120: LD_ADDR_OWVAR 37
15124: PUSH
15125: LD_VAR 0 1
15129: ST_TO_ADDR
// vc_engine := engine ;
15130: LD_ADDR_OWVAR 39
15134: PUSH
15135: LD_VAR 0 2
15139: ST_TO_ADDR
// vc_control := control ;
15140: LD_ADDR_OWVAR 38
15144: PUSH
15145: LD_VAR 0 3
15149: ST_TO_ADDR
// vc_weapon := weapon ;
15150: LD_ADDR_OWVAR 40
15154: PUSH
15155: LD_VAR 0 4
15159: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15160: LD_ADDR_OWVAR 41
15164: PUSH
15165: LD_VAR 0 5
15169: ST_TO_ADDR
// end ;
15170: LD_VAR 0 6
15174: RET
// export function WantPlant ( unit ) ; var task ; begin
15175: LD_INT 0
15177: PPUSH
15178: PPUSH
// result := false ;
15179: LD_ADDR_VAR 0 2
15183: PUSH
15184: LD_INT 0
15186: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15187: LD_ADDR_VAR 0 3
15191: PUSH
15192: LD_VAR 0 1
15196: PPUSH
15197: CALL_OW 437
15201: ST_TO_ADDR
// if task then
15202: LD_VAR 0 3
15206: IFFALSE 15234
// if task [ 1 ] [ 1 ] = p then
15208: LD_VAR 0 3
15212: PUSH
15213: LD_INT 1
15215: ARRAY
15216: PUSH
15217: LD_INT 1
15219: ARRAY
15220: PUSH
15221: LD_STRING p
15223: EQUAL
15224: IFFALSE 15234
// result := true ;
15226: LD_ADDR_VAR 0 2
15230: PUSH
15231: LD_INT 1
15233: ST_TO_ADDR
// end ;
15234: LD_VAR 0 2
15238: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15239: LD_INT 0
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
// if pos < 1 then
15245: LD_VAR 0 2
15249: PUSH
15250: LD_INT 1
15252: LESS
15253: IFFALSE 15257
// exit ;
15255: GO 15560
// if pos = 1 then
15257: LD_VAR 0 2
15261: PUSH
15262: LD_INT 1
15264: EQUAL
15265: IFFALSE 15298
// result := Replace ( arr , pos [ 1 ] , value ) else
15267: LD_ADDR_VAR 0 4
15271: PUSH
15272: LD_VAR 0 1
15276: PPUSH
15277: LD_VAR 0 2
15281: PUSH
15282: LD_INT 1
15284: ARRAY
15285: PPUSH
15286: LD_VAR 0 3
15290: PPUSH
15291: CALL_OW 1
15295: ST_TO_ADDR
15296: GO 15560
// begin tmp := arr ;
15298: LD_ADDR_VAR 0 6
15302: PUSH
15303: LD_VAR 0 1
15307: ST_TO_ADDR
// s_arr := [ tmp ] ;
15308: LD_ADDR_VAR 0 7
15312: PUSH
15313: LD_VAR 0 6
15317: PUSH
15318: EMPTY
15319: LIST
15320: ST_TO_ADDR
// for i = 1 to pos - 1 do
15321: LD_ADDR_VAR 0 5
15325: PUSH
15326: DOUBLE
15327: LD_INT 1
15329: DEC
15330: ST_TO_ADDR
15331: LD_VAR 0 2
15335: PUSH
15336: LD_INT 1
15338: MINUS
15339: PUSH
15340: FOR_TO
15341: IFFALSE 15386
// begin tmp := tmp [ pos [ i ] ] ;
15343: LD_ADDR_VAR 0 6
15347: PUSH
15348: LD_VAR 0 6
15352: PUSH
15353: LD_VAR 0 2
15357: PUSH
15358: LD_VAR 0 5
15362: ARRAY
15363: ARRAY
15364: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15365: LD_ADDR_VAR 0 7
15369: PUSH
15370: LD_VAR 0 7
15374: PUSH
15375: LD_VAR 0 6
15379: PUSH
15380: EMPTY
15381: LIST
15382: ADD
15383: ST_TO_ADDR
// end ;
15384: GO 15340
15386: POP
15387: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15388: LD_ADDR_VAR 0 6
15392: PUSH
15393: LD_VAR 0 6
15397: PPUSH
15398: LD_VAR 0 2
15402: PUSH
15403: LD_VAR 0 2
15407: ARRAY
15408: PPUSH
15409: LD_VAR 0 3
15413: PPUSH
15414: CALL_OW 1
15418: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15419: LD_ADDR_VAR 0 7
15423: PUSH
15424: LD_VAR 0 7
15428: PPUSH
15429: LD_VAR 0 7
15433: PPUSH
15434: LD_VAR 0 6
15438: PPUSH
15439: CALL_OW 1
15443: ST_TO_ADDR
// for i = s_arr downto 2 do
15444: LD_ADDR_VAR 0 5
15448: PUSH
15449: DOUBLE
15450: LD_VAR 0 7
15454: INC
15455: ST_TO_ADDR
15456: LD_INT 2
15458: PUSH
15459: FOR_DOWNTO
15460: IFFALSE 15544
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15462: LD_ADDR_VAR 0 6
15466: PUSH
15467: LD_VAR 0 7
15471: PUSH
15472: LD_VAR 0 5
15476: PUSH
15477: LD_INT 1
15479: MINUS
15480: ARRAY
15481: PPUSH
15482: LD_VAR 0 2
15486: PUSH
15487: LD_VAR 0 5
15491: PUSH
15492: LD_INT 1
15494: MINUS
15495: ARRAY
15496: PPUSH
15497: LD_VAR 0 7
15501: PUSH
15502: LD_VAR 0 5
15506: ARRAY
15507: PPUSH
15508: CALL_OW 1
15512: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15513: LD_ADDR_VAR 0 7
15517: PUSH
15518: LD_VAR 0 7
15522: PPUSH
15523: LD_VAR 0 5
15527: PUSH
15528: LD_INT 1
15530: MINUS
15531: PPUSH
15532: LD_VAR 0 6
15536: PPUSH
15537: CALL_OW 1
15541: ST_TO_ADDR
// end ;
15542: GO 15459
15544: POP
15545: POP
// result := s_arr [ 1 ] ;
15546: LD_ADDR_VAR 0 4
15550: PUSH
15551: LD_VAR 0 7
15555: PUSH
15556: LD_INT 1
15558: ARRAY
15559: ST_TO_ADDR
// end ; end ;
15560: LD_VAR 0 4
15564: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15565: LD_INT 0
15567: PPUSH
15568: PPUSH
// if not list then
15569: LD_VAR 0 1
15573: NOT
15574: IFFALSE 15578
// exit ;
15576: GO 15669
// i := list [ pos1 ] ;
15578: LD_ADDR_VAR 0 5
15582: PUSH
15583: LD_VAR 0 1
15587: PUSH
15588: LD_VAR 0 2
15592: ARRAY
15593: ST_TO_ADDR
// if not i then
15594: LD_VAR 0 5
15598: NOT
15599: IFFALSE 15603
// exit ;
15601: GO 15669
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15603: LD_ADDR_VAR 0 1
15607: PUSH
15608: LD_VAR 0 1
15612: PPUSH
15613: LD_VAR 0 2
15617: PPUSH
15618: LD_VAR 0 1
15622: PUSH
15623: LD_VAR 0 3
15627: ARRAY
15628: PPUSH
15629: CALL_OW 1
15633: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15634: LD_ADDR_VAR 0 1
15638: PUSH
15639: LD_VAR 0 1
15643: PPUSH
15644: LD_VAR 0 3
15648: PPUSH
15649: LD_VAR 0 5
15653: PPUSH
15654: CALL_OW 1
15658: ST_TO_ADDR
// result := list ;
15659: LD_ADDR_VAR 0 4
15663: PUSH
15664: LD_VAR 0 1
15668: ST_TO_ADDR
// end ;
15669: LD_VAR 0 4
15673: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15674: LD_INT 0
15676: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15677: LD_ADDR_VAR 0 5
15681: PUSH
15682: LD_VAR 0 1
15686: PPUSH
15687: CALL_OW 250
15691: PPUSH
15692: LD_VAR 0 1
15696: PPUSH
15697: CALL_OW 251
15701: PPUSH
15702: LD_VAR 0 2
15706: PPUSH
15707: LD_VAR 0 3
15711: PPUSH
15712: LD_VAR 0 4
15716: PPUSH
15717: CALL 15727 0 5
15721: ST_TO_ADDR
// end ;
15722: LD_VAR 0 5
15726: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15727: LD_INT 0
15729: PPUSH
15730: PPUSH
15731: PPUSH
15732: PPUSH
// if not list then
15733: LD_VAR 0 3
15737: NOT
15738: IFFALSE 15742
// exit ;
15740: GO 16130
// result := [ ] ;
15742: LD_ADDR_VAR 0 6
15746: PUSH
15747: EMPTY
15748: ST_TO_ADDR
// for i in list do
15749: LD_ADDR_VAR 0 7
15753: PUSH
15754: LD_VAR 0 3
15758: PUSH
15759: FOR_IN
15760: IFFALSE 15962
// begin tmp := GetDistUnitXY ( i , x , y ) ;
15762: LD_ADDR_VAR 0 9
15766: PUSH
15767: LD_VAR 0 7
15771: PPUSH
15772: LD_VAR 0 1
15776: PPUSH
15777: LD_VAR 0 2
15781: PPUSH
15782: CALL_OW 297
15786: ST_TO_ADDR
// if not result then
15787: LD_VAR 0 6
15791: NOT
15792: IFFALSE 15818
// result := [ [ i , tmp ] ] else
15794: LD_ADDR_VAR 0 6
15798: PUSH
15799: LD_VAR 0 7
15803: PUSH
15804: LD_VAR 0 9
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: EMPTY
15814: LIST
15815: ST_TO_ADDR
15816: GO 15960
// begin if result [ result ] [ 2 ] < tmp then
15818: LD_VAR 0 6
15822: PUSH
15823: LD_VAR 0 6
15827: ARRAY
15828: PUSH
15829: LD_INT 2
15831: ARRAY
15832: PUSH
15833: LD_VAR 0 9
15837: LESS
15838: IFFALSE 15880
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15840: LD_ADDR_VAR 0 6
15844: PUSH
15845: LD_VAR 0 6
15849: PPUSH
15850: LD_VAR 0 6
15854: PUSH
15855: LD_INT 1
15857: PLUS
15858: PPUSH
15859: LD_VAR 0 7
15863: PUSH
15864: LD_VAR 0 9
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PPUSH
15873: CALL_OW 2
15877: ST_TO_ADDR
15878: GO 15960
// for j = 1 to result do
15880: LD_ADDR_VAR 0 8
15884: PUSH
15885: DOUBLE
15886: LD_INT 1
15888: DEC
15889: ST_TO_ADDR
15890: LD_VAR 0 6
15894: PUSH
15895: FOR_TO
15896: IFFALSE 15958
// begin if tmp < result [ j ] [ 2 ] then
15898: LD_VAR 0 9
15902: PUSH
15903: LD_VAR 0 6
15907: PUSH
15908: LD_VAR 0 8
15912: ARRAY
15913: PUSH
15914: LD_INT 2
15916: ARRAY
15917: LESS
15918: IFFALSE 15956
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15920: LD_ADDR_VAR 0 6
15924: PUSH
15925: LD_VAR 0 6
15929: PPUSH
15930: LD_VAR 0 8
15934: PPUSH
15935: LD_VAR 0 7
15939: PUSH
15940: LD_VAR 0 9
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PPUSH
15949: CALL_OW 2
15953: ST_TO_ADDR
// break ;
15954: GO 15958
// end ; end ;
15956: GO 15895
15958: POP
15959: POP
// end ; end ;
15960: GO 15759
15962: POP
15963: POP
// if result and not asc then
15964: LD_VAR 0 6
15968: PUSH
15969: LD_VAR 0 4
15973: NOT
15974: AND
15975: IFFALSE 16050
// begin tmp := result ;
15977: LD_ADDR_VAR 0 9
15981: PUSH
15982: LD_VAR 0 6
15986: ST_TO_ADDR
// for i = tmp downto 1 do
15987: LD_ADDR_VAR 0 7
15991: PUSH
15992: DOUBLE
15993: LD_VAR 0 9
15997: INC
15998: ST_TO_ADDR
15999: LD_INT 1
16001: PUSH
16002: FOR_DOWNTO
16003: IFFALSE 16048
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16005: LD_ADDR_VAR 0 6
16009: PUSH
16010: LD_VAR 0 6
16014: PPUSH
16015: LD_VAR 0 9
16019: PUSH
16020: LD_VAR 0 7
16024: MINUS
16025: PUSH
16026: LD_INT 1
16028: PLUS
16029: PPUSH
16030: LD_VAR 0 9
16034: PUSH
16035: LD_VAR 0 7
16039: ARRAY
16040: PPUSH
16041: CALL_OW 1
16045: ST_TO_ADDR
16046: GO 16002
16048: POP
16049: POP
// end ; tmp := [ ] ;
16050: LD_ADDR_VAR 0 9
16054: PUSH
16055: EMPTY
16056: ST_TO_ADDR
// if mode then
16057: LD_VAR 0 5
16061: IFFALSE 16130
// begin for i = 1 to result do
16063: LD_ADDR_VAR 0 7
16067: PUSH
16068: DOUBLE
16069: LD_INT 1
16071: DEC
16072: ST_TO_ADDR
16073: LD_VAR 0 6
16077: PUSH
16078: FOR_TO
16079: IFFALSE 16118
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16081: LD_ADDR_VAR 0 9
16085: PUSH
16086: LD_VAR 0 9
16090: PPUSH
16091: LD_VAR 0 7
16095: PPUSH
16096: LD_VAR 0 6
16100: PUSH
16101: LD_VAR 0 7
16105: ARRAY
16106: PUSH
16107: LD_INT 1
16109: ARRAY
16110: PPUSH
16111: CALL_OW 1
16115: ST_TO_ADDR
16116: GO 16078
16118: POP
16119: POP
// result := tmp ;
16120: LD_ADDR_VAR 0 6
16124: PUSH
16125: LD_VAR 0 9
16129: ST_TO_ADDR
// end ; end ;
16130: LD_VAR 0 6
16134: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16135: LD_INT 0
16137: PPUSH
16138: PPUSH
16139: PPUSH
16140: PPUSH
16141: PPUSH
16142: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16143: LD_ADDR_VAR 0 5
16147: PUSH
16148: LD_INT 0
16150: PUSH
16151: LD_INT 0
16153: PUSH
16154: LD_INT 0
16156: PUSH
16157: EMPTY
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: ST_TO_ADDR
// if not x or not y then
16165: LD_VAR 0 2
16169: NOT
16170: PUSH
16171: LD_VAR 0 3
16175: NOT
16176: OR
16177: IFFALSE 16181
// exit ;
16179: GO 17833
// if not range then
16181: LD_VAR 0 4
16185: NOT
16186: IFFALSE 16196
// range := 10 ;
16188: LD_ADDR_VAR 0 4
16192: PUSH
16193: LD_INT 10
16195: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16196: LD_ADDR_VAR 0 8
16200: PUSH
16201: LD_INT 81
16203: PUSH
16204: LD_VAR 0 1
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 92
16215: PUSH
16216: LD_VAR 0 2
16220: PUSH
16221: LD_VAR 0 3
16225: PUSH
16226: LD_VAR 0 4
16230: PUSH
16231: EMPTY
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 3
16239: PUSH
16240: LD_INT 21
16242: PUSH
16243: LD_INT 3
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: PPUSH
16259: CALL_OW 69
16263: ST_TO_ADDR
// if not tmp then
16264: LD_VAR 0 8
16268: NOT
16269: IFFALSE 16273
// exit ;
16271: GO 17833
// for i in tmp do
16273: LD_ADDR_VAR 0 6
16277: PUSH
16278: LD_VAR 0 8
16282: PUSH
16283: FOR_IN
16284: IFFALSE 17808
// begin points := [ 0 , 0 , 0 ] ;
16286: LD_ADDR_VAR 0 9
16290: PUSH
16291: LD_INT 0
16293: PUSH
16294: LD_INT 0
16296: PUSH
16297: LD_INT 0
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: LIST
16304: ST_TO_ADDR
// bpoints := 1 ;
16305: LD_ADDR_VAR 0 10
16309: PUSH
16310: LD_INT 1
16312: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16313: LD_VAR 0 6
16317: PPUSH
16318: CALL_OW 247
16322: PUSH
16323: LD_INT 1
16325: DOUBLE
16326: EQUAL
16327: IFTRUE 16331
16329: GO 16909
16331: POP
// begin if GetClass ( i ) = 1 then
16332: LD_VAR 0 6
16336: PPUSH
16337: CALL_OW 257
16341: PUSH
16342: LD_INT 1
16344: EQUAL
16345: IFFALSE 16366
// points := [ 10 , 5 , 3 ] ;
16347: LD_ADDR_VAR 0 9
16351: PUSH
16352: LD_INT 10
16354: PUSH
16355: LD_INT 5
16357: PUSH
16358: LD_INT 3
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: LIST
16365: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16366: LD_VAR 0 6
16370: PPUSH
16371: CALL_OW 257
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: LD_INT 3
16381: PUSH
16382: LD_INT 4
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: LIST
16389: IN
16390: IFFALSE 16411
// points := [ 3 , 2 , 1 ] ;
16392: LD_ADDR_VAR 0 9
16396: PUSH
16397: LD_INT 3
16399: PUSH
16400: LD_INT 2
16402: PUSH
16403: LD_INT 1
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: LIST
16410: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16411: LD_VAR 0 6
16415: PPUSH
16416: CALL_OW 257
16420: PUSH
16421: LD_INT 5
16423: EQUAL
16424: IFFALSE 16445
// points := [ 130 , 5 , 2 ] ;
16426: LD_ADDR_VAR 0 9
16430: PUSH
16431: LD_INT 130
16433: PUSH
16434: LD_INT 5
16436: PUSH
16437: LD_INT 2
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: LIST
16444: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16445: LD_VAR 0 6
16449: PPUSH
16450: CALL_OW 257
16454: PUSH
16455: LD_INT 8
16457: EQUAL
16458: IFFALSE 16479
// points := [ 35 , 35 , 30 ] ;
16460: LD_ADDR_VAR 0 9
16464: PUSH
16465: LD_INT 35
16467: PUSH
16468: LD_INT 35
16470: PUSH
16471: LD_INT 30
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: LIST
16478: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16479: LD_VAR 0 6
16483: PPUSH
16484: CALL_OW 257
16488: PUSH
16489: LD_INT 9
16491: EQUAL
16492: IFFALSE 16513
// points := [ 20 , 55 , 40 ] ;
16494: LD_ADDR_VAR 0 9
16498: PUSH
16499: LD_INT 20
16501: PUSH
16502: LD_INT 55
16504: PUSH
16505: LD_INT 40
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: LIST
16512: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16513: LD_VAR 0 6
16517: PPUSH
16518: CALL_OW 257
16522: PUSH
16523: LD_INT 12
16525: PUSH
16526: LD_INT 16
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: IN
16533: IFFALSE 16554
// points := [ 5 , 3 , 2 ] ;
16535: LD_ADDR_VAR 0 9
16539: PUSH
16540: LD_INT 5
16542: PUSH
16543: LD_INT 3
16545: PUSH
16546: LD_INT 2
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: LIST
16553: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16554: LD_VAR 0 6
16558: PPUSH
16559: CALL_OW 257
16563: PUSH
16564: LD_INT 17
16566: EQUAL
16567: IFFALSE 16588
// points := [ 100 , 50 , 75 ] ;
16569: LD_ADDR_VAR 0 9
16573: PUSH
16574: LD_INT 100
16576: PUSH
16577: LD_INT 50
16579: PUSH
16580: LD_INT 75
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16588: LD_VAR 0 6
16592: PPUSH
16593: CALL_OW 257
16597: PUSH
16598: LD_INT 15
16600: EQUAL
16601: IFFALSE 16622
// points := [ 10 , 5 , 3 ] ;
16603: LD_ADDR_VAR 0 9
16607: PUSH
16608: LD_INT 10
16610: PUSH
16611: LD_INT 5
16613: PUSH
16614: LD_INT 3
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16622: LD_VAR 0 6
16626: PPUSH
16627: CALL_OW 257
16631: PUSH
16632: LD_INT 14
16634: EQUAL
16635: IFFALSE 16656
// points := [ 10 , 0 , 0 ] ;
16637: LD_ADDR_VAR 0 9
16641: PUSH
16642: LD_INT 10
16644: PUSH
16645: LD_INT 0
16647: PUSH
16648: LD_INT 0
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16656: LD_VAR 0 6
16660: PPUSH
16661: CALL_OW 257
16665: PUSH
16666: LD_INT 11
16668: EQUAL
16669: IFFALSE 16690
// points := [ 30 , 10 , 5 ] ;
16671: LD_ADDR_VAR 0 9
16675: PUSH
16676: LD_INT 30
16678: PUSH
16679: LD_INT 10
16681: PUSH
16682: LD_INT 5
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16690: LD_VAR 0 1
16694: PPUSH
16695: LD_INT 5
16697: PPUSH
16698: CALL_OW 321
16702: PUSH
16703: LD_INT 2
16705: EQUAL
16706: IFFALSE 16723
// bpoints := bpoints * 1.8 ;
16708: LD_ADDR_VAR 0 10
16712: PUSH
16713: LD_VAR 0 10
16717: PUSH
16718: LD_REAL  1.80000000000000E+0000
16721: MUL
16722: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16723: LD_VAR 0 6
16727: PPUSH
16728: CALL_OW 257
16732: PUSH
16733: LD_INT 1
16735: PUSH
16736: LD_INT 2
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: LD_INT 4
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: IN
16751: PUSH
16752: LD_VAR 0 1
16756: PPUSH
16757: LD_INT 51
16759: PPUSH
16760: CALL_OW 321
16764: PUSH
16765: LD_INT 2
16767: EQUAL
16768: AND
16769: IFFALSE 16786
// bpoints := bpoints * 1.2 ;
16771: LD_ADDR_VAR 0 10
16775: PUSH
16776: LD_VAR 0 10
16780: PUSH
16781: LD_REAL  1.20000000000000E+0000
16784: MUL
16785: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
16786: LD_VAR 0 6
16790: PPUSH
16791: CALL_OW 257
16795: PUSH
16796: LD_INT 5
16798: PUSH
16799: LD_INT 7
16801: PUSH
16802: LD_INT 9
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: LIST
16809: IN
16810: PUSH
16811: LD_VAR 0 1
16815: PPUSH
16816: LD_INT 52
16818: PPUSH
16819: CALL_OW 321
16823: PUSH
16824: LD_INT 2
16826: EQUAL
16827: AND
16828: IFFALSE 16845
// bpoints := bpoints * 1.5 ;
16830: LD_ADDR_VAR 0 10
16834: PUSH
16835: LD_VAR 0 10
16839: PUSH
16840: LD_REAL  1.50000000000000E+0000
16843: MUL
16844: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16845: LD_VAR 0 1
16849: PPUSH
16850: LD_INT 66
16852: PPUSH
16853: CALL_OW 321
16857: PUSH
16858: LD_INT 2
16860: EQUAL
16861: IFFALSE 16878
// bpoints := bpoints * 1.1 ;
16863: LD_ADDR_VAR 0 10
16867: PUSH
16868: LD_VAR 0 10
16872: PUSH
16873: LD_REAL  1.10000000000000E+0000
16876: MUL
16877: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16878: LD_ADDR_VAR 0 10
16882: PUSH
16883: LD_VAR 0 10
16887: PUSH
16888: LD_VAR 0 6
16892: PPUSH
16893: LD_INT 1
16895: PPUSH
16896: CALL_OW 259
16900: PUSH
16901: LD_REAL  1.15000000000000E+0000
16904: MUL
16905: MUL
16906: ST_TO_ADDR
// end ; unit_vehicle :
16907: GO 17737
16909: LD_INT 2
16911: DOUBLE
16912: EQUAL
16913: IFTRUE 16917
16915: GO 17725
16917: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16918: LD_VAR 0 6
16922: PPUSH
16923: CALL_OW 264
16927: PUSH
16928: LD_INT 2
16930: PUSH
16931: LD_INT 42
16933: PUSH
16934: LD_INT 24
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: LIST
16941: IN
16942: IFFALSE 16963
// points := [ 25 , 5 , 3 ] ;
16944: LD_ADDR_VAR 0 9
16948: PUSH
16949: LD_INT 25
16951: PUSH
16952: LD_INT 5
16954: PUSH
16955: LD_INT 3
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: LIST
16962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16963: LD_VAR 0 6
16967: PPUSH
16968: CALL_OW 264
16972: PUSH
16973: LD_INT 4
16975: PUSH
16976: LD_INT 43
16978: PUSH
16979: LD_INT 25
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: LIST
16986: IN
16987: IFFALSE 17008
// points := [ 40 , 15 , 5 ] ;
16989: LD_ADDR_VAR 0 9
16993: PUSH
16994: LD_INT 40
16996: PUSH
16997: LD_INT 15
16999: PUSH
17000: LD_INT 5
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: LIST
17007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17008: LD_VAR 0 6
17012: PPUSH
17013: CALL_OW 264
17017: PUSH
17018: LD_INT 3
17020: PUSH
17021: LD_INT 23
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: IN
17028: IFFALSE 17049
// points := [ 7 , 25 , 8 ] ;
17030: LD_ADDR_VAR 0 9
17034: PUSH
17035: LD_INT 7
17037: PUSH
17038: LD_INT 25
17040: PUSH
17041: LD_INT 8
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: LIST
17048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17049: LD_VAR 0 6
17053: PPUSH
17054: CALL_OW 264
17058: PUSH
17059: LD_INT 5
17061: PUSH
17062: LD_INT 27
17064: PUSH
17065: LD_INT 44
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: LIST
17072: IN
17073: IFFALSE 17094
// points := [ 14 , 50 , 16 ] ;
17075: LD_ADDR_VAR 0 9
17079: PUSH
17080: LD_INT 14
17082: PUSH
17083: LD_INT 50
17085: PUSH
17086: LD_INT 16
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17094: LD_VAR 0 6
17098: PPUSH
17099: CALL_OW 264
17103: PUSH
17104: LD_INT 6
17106: PUSH
17107: LD_INT 46
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: IN
17114: IFFALSE 17135
// points := [ 32 , 120 , 70 ] ;
17116: LD_ADDR_VAR 0 9
17120: PUSH
17121: LD_INT 32
17123: PUSH
17124: LD_INT 120
17126: PUSH
17127: LD_INT 70
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: LIST
17134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17135: LD_VAR 0 6
17139: PPUSH
17140: CALL_OW 264
17144: PUSH
17145: LD_INT 7
17147: PUSH
17148: LD_INT 28
17150: PUSH
17151: LD_INT 45
17153: PUSH
17154: LD_EXP 92
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: IN
17165: IFFALSE 17186
// points := [ 35 , 20 , 45 ] ;
17167: LD_ADDR_VAR 0 9
17171: PUSH
17172: LD_INT 35
17174: PUSH
17175: LD_INT 20
17177: PUSH
17178: LD_INT 45
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: LIST
17185: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17186: LD_VAR 0 6
17190: PPUSH
17191: CALL_OW 264
17195: PUSH
17196: LD_INT 47
17198: PUSH
17199: EMPTY
17200: LIST
17201: IN
17202: IFFALSE 17223
// points := [ 67 , 45 , 75 ] ;
17204: LD_ADDR_VAR 0 9
17208: PUSH
17209: LD_INT 67
17211: PUSH
17212: LD_INT 45
17214: PUSH
17215: LD_INT 75
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17223: LD_VAR 0 6
17227: PPUSH
17228: CALL_OW 264
17232: PUSH
17233: LD_INT 26
17235: PUSH
17236: EMPTY
17237: LIST
17238: IN
17239: IFFALSE 17260
// points := [ 120 , 30 , 80 ] ;
17241: LD_ADDR_VAR 0 9
17245: PUSH
17246: LD_INT 120
17248: PUSH
17249: LD_INT 30
17251: PUSH
17252: LD_INT 80
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17260: LD_VAR 0 6
17264: PPUSH
17265: CALL_OW 264
17269: PUSH
17270: LD_INT 22
17272: PUSH
17273: EMPTY
17274: LIST
17275: IN
17276: IFFALSE 17297
// points := [ 40 , 1 , 1 ] ;
17278: LD_ADDR_VAR 0 9
17282: PUSH
17283: LD_INT 40
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 1
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: LIST
17296: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17297: LD_VAR 0 6
17301: PPUSH
17302: CALL_OW 264
17306: PUSH
17307: LD_INT 29
17309: PUSH
17310: EMPTY
17311: LIST
17312: IN
17313: IFFALSE 17334
// points := [ 70 , 200 , 400 ] ;
17315: LD_ADDR_VAR 0 9
17319: PUSH
17320: LD_INT 70
17322: PUSH
17323: LD_INT 200
17325: PUSH
17326: LD_INT 400
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17334: LD_VAR 0 6
17338: PPUSH
17339: CALL_OW 264
17343: PUSH
17344: LD_INT 14
17346: PUSH
17347: LD_INT 53
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: IN
17354: IFFALSE 17375
// points := [ 40 , 10 , 20 ] ;
17356: LD_ADDR_VAR 0 9
17360: PUSH
17361: LD_INT 40
17363: PUSH
17364: LD_INT 10
17366: PUSH
17367: LD_INT 20
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: LIST
17374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17375: LD_VAR 0 6
17379: PPUSH
17380: CALL_OW 264
17384: PUSH
17385: LD_INT 9
17387: PUSH
17388: EMPTY
17389: LIST
17390: IN
17391: IFFALSE 17412
// points := [ 5 , 70 , 20 ] ;
17393: LD_ADDR_VAR 0 9
17397: PUSH
17398: LD_INT 5
17400: PUSH
17401: LD_INT 70
17403: PUSH
17404: LD_INT 20
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: LIST
17411: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17412: LD_VAR 0 6
17416: PPUSH
17417: CALL_OW 264
17421: PUSH
17422: LD_INT 10
17424: PUSH
17425: EMPTY
17426: LIST
17427: IN
17428: IFFALSE 17449
// points := [ 35 , 110 , 70 ] ;
17430: LD_ADDR_VAR 0 9
17434: PUSH
17435: LD_INT 35
17437: PUSH
17438: LD_INT 110
17440: PUSH
17441: LD_INT 70
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: LIST
17448: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17449: LD_VAR 0 6
17453: PPUSH
17454: CALL_OW 265
17458: PUSH
17459: LD_INT 25
17461: EQUAL
17462: IFFALSE 17483
// points := [ 80 , 65 , 100 ] ;
17464: LD_ADDR_VAR 0 9
17468: PUSH
17469: LD_INT 80
17471: PUSH
17472: LD_INT 65
17474: PUSH
17475: LD_INT 100
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17483: LD_VAR 0 6
17487: PPUSH
17488: CALL_OW 263
17492: PUSH
17493: LD_INT 1
17495: EQUAL
17496: IFFALSE 17531
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17498: LD_ADDR_VAR 0 10
17502: PUSH
17503: LD_VAR 0 10
17507: PUSH
17508: LD_VAR 0 6
17512: PPUSH
17513: CALL_OW 311
17517: PPUSH
17518: LD_INT 3
17520: PPUSH
17521: CALL_OW 259
17525: PUSH
17526: LD_INT 4
17528: MUL
17529: MUL
17530: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17531: LD_VAR 0 6
17535: PPUSH
17536: CALL_OW 263
17540: PUSH
17541: LD_INT 2
17543: EQUAL
17544: IFFALSE 17595
// begin j := IsControledBy ( i ) ;
17546: LD_ADDR_VAR 0 7
17550: PUSH
17551: LD_VAR 0 6
17555: PPUSH
17556: CALL_OW 312
17560: ST_TO_ADDR
// if j then
17561: LD_VAR 0 7
17565: IFFALSE 17595
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17567: LD_ADDR_VAR 0 10
17571: PUSH
17572: LD_VAR 0 10
17576: PUSH
17577: LD_VAR 0 7
17581: PPUSH
17582: LD_INT 3
17584: PPUSH
17585: CALL_OW 259
17589: PUSH
17590: LD_INT 3
17592: MUL
17593: MUL
17594: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17595: LD_VAR 0 6
17599: PPUSH
17600: CALL_OW 264
17604: PUSH
17605: LD_INT 5
17607: PUSH
17608: LD_INT 6
17610: PUSH
17611: LD_INT 46
17613: PUSH
17614: LD_INT 44
17616: PUSH
17617: LD_INT 47
17619: PUSH
17620: LD_INT 45
17622: PUSH
17623: LD_INT 28
17625: PUSH
17626: LD_INT 7
17628: PUSH
17629: LD_INT 27
17631: PUSH
17632: LD_INT 29
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: IN
17647: PUSH
17648: LD_VAR 0 1
17652: PPUSH
17653: LD_INT 52
17655: PPUSH
17656: CALL_OW 321
17660: PUSH
17661: LD_INT 2
17663: EQUAL
17664: AND
17665: IFFALSE 17682
// bpoints := bpoints * 1.2 ;
17667: LD_ADDR_VAR 0 10
17671: PUSH
17672: LD_VAR 0 10
17676: PUSH
17677: LD_REAL  1.20000000000000E+0000
17680: MUL
17681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17682: LD_VAR 0 6
17686: PPUSH
17687: CALL_OW 264
17691: PUSH
17692: LD_INT 6
17694: PUSH
17695: LD_INT 46
17697: PUSH
17698: LD_INT 47
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: LIST
17705: IN
17706: IFFALSE 17723
// bpoints := bpoints * 1.2 ;
17708: LD_ADDR_VAR 0 10
17712: PUSH
17713: LD_VAR 0 10
17717: PUSH
17718: LD_REAL  1.20000000000000E+0000
17721: MUL
17722: ST_TO_ADDR
// end ; unit_building :
17723: GO 17737
17725: LD_INT 3
17727: DOUBLE
17728: EQUAL
17729: IFTRUE 17733
17731: GO 17736
17733: POP
// ; end ;
17734: GO 17737
17736: POP
// for j = 1 to 3 do
17737: LD_ADDR_VAR 0 7
17741: PUSH
17742: DOUBLE
17743: LD_INT 1
17745: DEC
17746: ST_TO_ADDR
17747: LD_INT 3
17749: PUSH
17750: FOR_TO
17751: IFFALSE 17804
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17753: LD_ADDR_VAR 0 5
17757: PUSH
17758: LD_VAR 0 5
17762: PPUSH
17763: LD_VAR 0 7
17767: PPUSH
17768: LD_VAR 0 5
17772: PUSH
17773: LD_VAR 0 7
17777: ARRAY
17778: PUSH
17779: LD_VAR 0 9
17783: PUSH
17784: LD_VAR 0 7
17788: ARRAY
17789: PUSH
17790: LD_VAR 0 10
17794: MUL
17795: PLUS
17796: PPUSH
17797: CALL_OW 1
17801: ST_TO_ADDR
17802: GO 17750
17804: POP
17805: POP
// end ;
17806: GO 16283
17808: POP
17809: POP
// result := Replace ( result , 4 , tmp ) ;
17810: LD_ADDR_VAR 0 5
17814: PUSH
17815: LD_VAR 0 5
17819: PPUSH
17820: LD_INT 4
17822: PPUSH
17823: LD_VAR 0 8
17827: PPUSH
17828: CALL_OW 1
17832: ST_TO_ADDR
// end ;
17833: LD_VAR 0 5
17837: RET
// export function DangerAtRange ( unit , range ) ; begin
17838: LD_INT 0
17840: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17841: LD_ADDR_VAR 0 3
17845: PUSH
17846: LD_VAR 0 1
17850: PPUSH
17851: CALL_OW 255
17855: PPUSH
17856: LD_VAR 0 1
17860: PPUSH
17861: CALL_OW 250
17865: PPUSH
17866: LD_VAR 0 1
17870: PPUSH
17871: CALL_OW 251
17875: PPUSH
17876: LD_VAR 0 2
17880: PPUSH
17881: CALL 16135 0 4
17885: ST_TO_ADDR
// end ;
17886: LD_VAR 0 3
17890: RET
// export function DangerInArea ( side , area ) ; begin
17891: LD_INT 0
17893: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17894: LD_ADDR_VAR 0 3
17898: PUSH
17899: LD_VAR 0 2
17903: PPUSH
17904: LD_INT 81
17906: PUSH
17907: LD_VAR 0 1
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PPUSH
17916: CALL_OW 70
17920: ST_TO_ADDR
// end ;
17921: LD_VAR 0 3
17925: RET
// export function IsExtension ( b ) ; begin
17926: LD_INT 0
17928: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17929: LD_ADDR_VAR 0 2
17933: PUSH
17934: LD_VAR 0 1
17938: PUSH
17939: LD_INT 23
17941: PUSH
17942: LD_INT 20
17944: PUSH
17945: LD_INT 22
17947: PUSH
17948: LD_INT 17
17950: PUSH
17951: LD_INT 24
17953: PUSH
17954: LD_INT 21
17956: PUSH
17957: LD_INT 19
17959: PUSH
17960: LD_INT 16
17962: PUSH
17963: LD_INT 25
17965: PUSH
17966: LD_INT 18
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: IN
17981: ST_TO_ADDR
// end ;
17982: LD_VAR 0 2
17986: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17987: LD_INT 0
17989: PPUSH
17990: PPUSH
17991: PPUSH
// result := [ ] ;
17992: LD_ADDR_VAR 0 4
17996: PUSH
17997: EMPTY
17998: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17999: LD_ADDR_VAR 0 5
18003: PUSH
18004: LD_VAR 0 2
18008: PPUSH
18009: LD_INT 21
18011: PUSH
18012: LD_INT 3
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PPUSH
18019: CALL_OW 70
18023: ST_TO_ADDR
// if not tmp then
18024: LD_VAR 0 5
18028: NOT
18029: IFFALSE 18033
// exit ;
18031: GO 18097
// if checkLink then
18033: LD_VAR 0 3
18037: IFFALSE 18087
// begin for i in tmp do
18039: LD_ADDR_VAR 0 6
18043: PUSH
18044: LD_VAR 0 5
18048: PUSH
18049: FOR_IN
18050: IFFALSE 18085
// if GetBase ( i ) <> base then
18052: LD_VAR 0 6
18056: PPUSH
18057: CALL_OW 274
18061: PUSH
18062: LD_VAR 0 1
18066: NONEQUAL
18067: IFFALSE 18083
// ComLinkToBase ( base , i ) ;
18069: LD_VAR 0 1
18073: PPUSH
18074: LD_VAR 0 6
18078: PPUSH
18079: CALL_OW 169
18083: GO 18049
18085: POP
18086: POP
// end ; result := tmp ;
18087: LD_ADDR_VAR 0 4
18091: PUSH
18092: LD_VAR 0 5
18096: ST_TO_ADDR
// end ;
18097: LD_VAR 0 4
18101: RET
// export function ComComplete ( units , b ) ; var i ; begin
18102: LD_INT 0
18104: PPUSH
18105: PPUSH
// if not units then
18106: LD_VAR 0 1
18110: NOT
18111: IFFALSE 18115
// exit ;
18113: GO 18205
// for i in units do
18115: LD_ADDR_VAR 0 4
18119: PUSH
18120: LD_VAR 0 1
18124: PUSH
18125: FOR_IN
18126: IFFALSE 18203
// if BuildingStatus ( b ) = bs_build then
18128: LD_VAR 0 2
18132: PPUSH
18133: CALL_OW 461
18137: PUSH
18138: LD_INT 1
18140: EQUAL
18141: IFFALSE 18201
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18143: LD_VAR 0 4
18147: PPUSH
18148: LD_STRING h
18150: PUSH
18151: LD_VAR 0 2
18155: PPUSH
18156: CALL_OW 250
18160: PUSH
18161: LD_VAR 0 2
18165: PPUSH
18166: CALL_OW 251
18170: PUSH
18171: LD_VAR 0 2
18175: PUSH
18176: LD_INT 0
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: LD_INT 0
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: PPUSH
18197: CALL_OW 446
18201: GO 18125
18203: POP
18204: POP
// end ;
18205: LD_VAR 0 3
18209: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18210: LD_INT 0
18212: PPUSH
18213: PPUSH
18214: PPUSH
18215: PPUSH
18216: PPUSH
18217: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18218: LD_VAR 0 1
18222: NOT
18223: PUSH
18224: LD_VAR 0 1
18228: PPUSH
18229: CALL_OW 263
18233: PUSH
18234: LD_INT 2
18236: NONEQUAL
18237: OR
18238: IFFALSE 18242
// exit ;
18240: GO 18558
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18242: LD_ADDR_VAR 0 6
18246: PUSH
18247: LD_INT 22
18249: PUSH
18250: LD_VAR 0 1
18254: PPUSH
18255: CALL_OW 255
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 2
18266: PUSH
18267: LD_INT 30
18269: PUSH
18270: LD_INT 36
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 34
18279: PUSH
18280: LD_INT 31
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: LIST
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PPUSH
18296: CALL_OW 69
18300: ST_TO_ADDR
// if not tmp then
18301: LD_VAR 0 6
18305: NOT
18306: IFFALSE 18310
// exit ;
18308: GO 18558
// result := [ ] ;
18310: LD_ADDR_VAR 0 2
18314: PUSH
18315: EMPTY
18316: ST_TO_ADDR
// for i in tmp do
18317: LD_ADDR_VAR 0 3
18321: PUSH
18322: LD_VAR 0 6
18326: PUSH
18327: FOR_IN
18328: IFFALSE 18399
// begin t := UnitsInside ( i ) ;
18330: LD_ADDR_VAR 0 4
18334: PUSH
18335: LD_VAR 0 3
18339: PPUSH
18340: CALL_OW 313
18344: ST_TO_ADDR
// if t then
18345: LD_VAR 0 4
18349: IFFALSE 18397
// for j in t do
18351: LD_ADDR_VAR 0 7
18355: PUSH
18356: LD_VAR 0 4
18360: PUSH
18361: FOR_IN
18362: IFFALSE 18395
// result := Replace ( result , result + 1 , j ) ;
18364: LD_ADDR_VAR 0 2
18368: PUSH
18369: LD_VAR 0 2
18373: PPUSH
18374: LD_VAR 0 2
18378: PUSH
18379: LD_INT 1
18381: PLUS
18382: PPUSH
18383: LD_VAR 0 7
18387: PPUSH
18388: CALL_OW 1
18392: ST_TO_ADDR
18393: GO 18361
18395: POP
18396: POP
// end ;
18397: GO 18327
18399: POP
18400: POP
// if not result then
18401: LD_VAR 0 2
18405: NOT
18406: IFFALSE 18410
// exit ;
18408: GO 18558
// mech := result [ 1 ] ;
18410: LD_ADDR_VAR 0 5
18414: PUSH
18415: LD_VAR 0 2
18419: PUSH
18420: LD_INT 1
18422: ARRAY
18423: ST_TO_ADDR
// if result > 1 then
18424: LD_VAR 0 2
18428: PUSH
18429: LD_INT 1
18431: GREATER
18432: IFFALSE 18544
// begin for i = 2 to result do
18434: LD_ADDR_VAR 0 3
18438: PUSH
18439: DOUBLE
18440: LD_INT 2
18442: DEC
18443: ST_TO_ADDR
18444: LD_VAR 0 2
18448: PUSH
18449: FOR_TO
18450: IFFALSE 18542
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18452: LD_ADDR_VAR 0 4
18456: PUSH
18457: LD_VAR 0 2
18461: PUSH
18462: LD_VAR 0 3
18466: ARRAY
18467: PPUSH
18468: LD_INT 3
18470: PPUSH
18471: CALL_OW 259
18475: PUSH
18476: LD_VAR 0 2
18480: PUSH
18481: LD_VAR 0 3
18485: ARRAY
18486: PPUSH
18487: CALL_OW 432
18491: MINUS
18492: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18493: LD_VAR 0 4
18497: PUSH
18498: LD_VAR 0 5
18502: PPUSH
18503: LD_INT 3
18505: PPUSH
18506: CALL_OW 259
18510: PUSH
18511: LD_VAR 0 5
18515: PPUSH
18516: CALL_OW 432
18520: MINUS
18521: GREATEREQUAL
18522: IFFALSE 18540
// mech := result [ i ] ;
18524: LD_ADDR_VAR 0 5
18528: PUSH
18529: LD_VAR 0 2
18533: PUSH
18534: LD_VAR 0 3
18538: ARRAY
18539: ST_TO_ADDR
// end ;
18540: GO 18449
18542: POP
18543: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18544: LD_VAR 0 1
18548: PPUSH
18549: LD_VAR 0 5
18553: PPUSH
18554: CALL_OW 135
// end ;
18558: LD_VAR 0 2
18562: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18563: LD_INT 0
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
18571: PPUSH
18572: PPUSH
18573: PPUSH
18574: PPUSH
18575: PPUSH
18576: PPUSH
18577: PPUSH
// result := [ ] ;
18578: LD_ADDR_VAR 0 7
18582: PUSH
18583: EMPTY
18584: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18585: LD_VAR 0 1
18589: PPUSH
18590: CALL_OW 266
18594: PUSH
18595: LD_INT 0
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: IN
18605: NOT
18606: IFFALSE 18610
// exit ;
18608: GO 20244
// if name then
18610: LD_VAR 0 3
18614: IFFALSE 18630
// SetBName ( base_dep , name ) ;
18616: LD_VAR 0 1
18620: PPUSH
18621: LD_VAR 0 3
18625: PPUSH
18626: CALL_OW 500
// base := GetBase ( base_dep ) ;
18630: LD_ADDR_VAR 0 15
18634: PUSH
18635: LD_VAR 0 1
18639: PPUSH
18640: CALL_OW 274
18644: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18645: LD_ADDR_VAR 0 16
18649: PUSH
18650: LD_VAR 0 1
18654: PPUSH
18655: CALL_OW 255
18659: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18660: LD_ADDR_VAR 0 17
18664: PUSH
18665: LD_VAR 0 1
18669: PPUSH
18670: CALL_OW 248
18674: ST_TO_ADDR
// if sources then
18675: LD_VAR 0 5
18679: IFFALSE 18726
// for i = 1 to 3 do
18681: LD_ADDR_VAR 0 8
18685: PUSH
18686: DOUBLE
18687: LD_INT 1
18689: DEC
18690: ST_TO_ADDR
18691: LD_INT 3
18693: PUSH
18694: FOR_TO
18695: IFFALSE 18724
// AddResourceType ( base , i , sources [ i ] ) ;
18697: LD_VAR 0 15
18701: PPUSH
18702: LD_VAR 0 8
18706: PPUSH
18707: LD_VAR 0 5
18711: PUSH
18712: LD_VAR 0 8
18716: ARRAY
18717: PPUSH
18718: CALL_OW 276
18722: GO 18694
18724: POP
18725: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18726: LD_ADDR_VAR 0 18
18730: PUSH
18731: LD_VAR 0 15
18735: PPUSH
18736: LD_VAR 0 2
18740: PPUSH
18741: LD_INT 1
18743: PPUSH
18744: CALL 17987 0 3
18748: ST_TO_ADDR
// InitHc ;
18749: CALL_OW 19
// InitUc ;
18753: CALL_OW 18
// uc_side := side ;
18757: LD_ADDR_OWVAR 20
18761: PUSH
18762: LD_VAR 0 16
18766: ST_TO_ADDR
// uc_nation := nation ;
18767: LD_ADDR_OWVAR 21
18771: PUSH
18772: LD_VAR 0 17
18776: ST_TO_ADDR
// if buildings then
18777: LD_VAR 0 18
18781: IFFALSE 20103
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
18783: LD_ADDR_VAR 0 19
18787: PUSH
18788: LD_VAR 0 18
18792: PPUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 30
18798: PUSH
18799: LD_INT 29
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 30
18808: PUSH
18809: LD_INT 30
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: PPUSH
18821: CALL_OW 72
18825: ST_TO_ADDR
// if tmp then
18826: LD_VAR 0 19
18830: IFFALSE 18878
// for i in tmp do
18832: LD_ADDR_VAR 0 8
18836: PUSH
18837: LD_VAR 0 19
18841: PUSH
18842: FOR_IN
18843: IFFALSE 18876
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18845: LD_VAR 0 8
18849: PPUSH
18850: CALL_OW 250
18854: PPUSH
18855: LD_VAR 0 8
18859: PPUSH
18860: CALL_OW 251
18864: PPUSH
18865: LD_VAR 0 16
18869: PPUSH
18870: CALL_OW 441
18874: GO 18842
18876: POP
18877: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18878: LD_VAR 0 18
18882: PPUSH
18883: LD_INT 2
18885: PUSH
18886: LD_INT 30
18888: PUSH
18889: LD_INT 32
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 30
18898: PUSH
18899: LD_INT 33
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: LIST
18910: PPUSH
18911: CALL_OW 72
18915: IFFALSE 19003
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18917: LD_ADDR_VAR 0 8
18921: PUSH
18922: LD_VAR 0 18
18926: PPUSH
18927: LD_INT 2
18929: PUSH
18930: LD_INT 30
18932: PUSH
18933: LD_INT 32
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 30
18942: PUSH
18943: LD_INT 33
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 72
18959: PUSH
18960: FOR_IN
18961: IFFALSE 19001
// begin if not GetBWeapon ( i ) then
18963: LD_VAR 0 8
18967: PPUSH
18968: CALL_OW 269
18972: NOT
18973: IFFALSE 18999
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18975: LD_VAR 0 8
18979: PPUSH
18980: LD_VAR 0 8
18984: PPUSH
18985: LD_VAR 0 2
18989: PPUSH
18990: CALL 20249 0 2
18994: PPUSH
18995: CALL_OW 431
// end ;
18999: GO 18960
19001: POP
19002: POP
// end ; for i = 1 to personel do
19003: LD_ADDR_VAR 0 8
19007: PUSH
19008: DOUBLE
19009: LD_INT 1
19011: DEC
19012: ST_TO_ADDR
19013: LD_VAR 0 6
19017: PUSH
19018: FOR_TO
19019: IFFALSE 20083
// begin if i > 4 then
19021: LD_VAR 0 8
19025: PUSH
19026: LD_INT 4
19028: GREATER
19029: IFFALSE 19033
// break ;
19031: GO 20083
// case i of 1 :
19033: LD_VAR 0 8
19037: PUSH
19038: LD_INT 1
19040: DOUBLE
19041: EQUAL
19042: IFTRUE 19046
19044: GO 19126
19046: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19047: LD_ADDR_VAR 0 12
19051: PUSH
19052: LD_VAR 0 18
19056: PPUSH
19057: LD_INT 22
19059: PUSH
19060: LD_VAR 0 16
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PUSH
19069: LD_INT 58
19071: PUSH
19072: EMPTY
19073: LIST
19074: PUSH
19075: LD_INT 2
19077: PUSH
19078: LD_INT 30
19080: PUSH
19081: LD_INT 32
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 30
19090: PUSH
19091: LD_INT 4
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: LD_INT 30
19100: PUSH
19101: LD_INT 5
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: LIST
19118: PPUSH
19119: CALL_OW 72
19123: ST_TO_ADDR
19124: GO 19348
19126: LD_INT 2
19128: DOUBLE
19129: EQUAL
19130: IFTRUE 19134
19132: GO 19196
19134: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19135: LD_ADDR_VAR 0 12
19139: PUSH
19140: LD_VAR 0 18
19144: PPUSH
19145: LD_INT 22
19147: PUSH
19148: LD_VAR 0 16
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 2
19159: PUSH
19160: LD_INT 30
19162: PUSH
19163: LD_INT 0
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 30
19172: PUSH
19173: LD_INT 1
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PPUSH
19189: CALL_OW 72
19193: ST_TO_ADDR
19194: GO 19348
19196: LD_INT 3
19198: DOUBLE
19199: EQUAL
19200: IFTRUE 19204
19202: GO 19266
19204: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19205: LD_ADDR_VAR 0 12
19209: PUSH
19210: LD_VAR 0 18
19214: PPUSH
19215: LD_INT 22
19217: PUSH
19218: LD_VAR 0 16
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 2
19229: PUSH
19230: LD_INT 30
19232: PUSH
19233: LD_INT 2
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 30
19242: PUSH
19243: LD_INT 3
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: LIST
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PPUSH
19259: CALL_OW 72
19263: ST_TO_ADDR
19264: GO 19348
19266: LD_INT 4
19268: DOUBLE
19269: EQUAL
19270: IFTRUE 19274
19272: GO 19347
19274: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19275: LD_ADDR_VAR 0 12
19279: PUSH
19280: LD_VAR 0 18
19284: PPUSH
19285: LD_INT 22
19287: PUSH
19288: LD_VAR 0 16
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: LD_INT 30
19302: PUSH
19303: LD_INT 6
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 30
19312: PUSH
19313: LD_INT 7
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 30
19322: PUSH
19323: LD_INT 8
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PPUSH
19340: CALL_OW 72
19344: ST_TO_ADDR
19345: GO 19348
19347: POP
// if i = 1 then
19348: LD_VAR 0 8
19352: PUSH
19353: LD_INT 1
19355: EQUAL
19356: IFFALSE 19467
// begin tmp := [ ] ;
19358: LD_ADDR_VAR 0 19
19362: PUSH
19363: EMPTY
19364: ST_TO_ADDR
// for j in f do
19365: LD_ADDR_VAR 0 9
19369: PUSH
19370: LD_VAR 0 12
19374: PUSH
19375: FOR_IN
19376: IFFALSE 19449
// if GetBType ( j ) = b_bunker then
19378: LD_VAR 0 9
19382: PPUSH
19383: CALL_OW 266
19387: PUSH
19388: LD_INT 32
19390: EQUAL
19391: IFFALSE 19418
// tmp := Insert ( tmp , 1 , j ) else
19393: LD_ADDR_VAR 0 19
19397: PUSH
19398: LD_VAR 0 19
19402: PPUSH
19403: LD_INT 1
19405: PPUSH
19406: LD_VAR 0 9
19410: PPUSH
19411: CALL_OW 2
19415: ST_TO_ADDR
19416: GO 19447
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19418: LD_ADDR_VAR 0 19
19422: PUSH
19423: LD_VAR 0 19
19427: PPUSH
19428: LD_VAR 0 19
19432: PUSH
19433: LD_INT 1
19435: PLUS
19436: PPUSH
19437: LD_VAR 0 9
19441: PPUSH
19442: CALL_OW 2
19446: ST_TO_ADDR
19447: GO 19375
19449: POP
19450: POP
// if tmp then
19451: LD_VAR 0 19
19455: IFFALSE 19467
// f := tmp ;
19457: LD_ADDR_VAR 0 12
19461: PUSH
19462: LD_VAR 0 19
19466: ST_TO_ADDR
// end ; x := personel [ i ] ;
19467: LD_ADDR_VAR 0 13
19471: PUSH
19472: LD_VAR 0 6
19476: PUSH
19477: LD_VAR 0 8
19481: ARRAY
19482: ST_TO_ADDR
// if x = - 1 then
19483: LD_VAR 0 13
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: EQUAL
19492: IFFALSE 19701
// begin for j in f do
19494: LD_ADDR_VAR 0 9
19498: PUSH
19499: LD_VAR 0 12
19503: PUSH
19504: FOR_IN
19505: IFFALSE 19697
// repeat InitHc ;
19507: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19511: LD_VAR 0 9
19515: PPUSH
19516: CALL_OW 266
19520: PUSH
19521: LD_INT 5
19523: EQUAL
19524: IFFALSE 19594
// begin if UnitsInside ( j ) < 3 then
19526: LD_VAR 0 9
19530: PPUSH
19531: CALL_OW 313
19535: PUSH
19536: LD_INT 3
19538: LESS
19539: IFFALSE 19575
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19541: LD_INT 0
19543: PPUSH
19544: LD_INT 5
19546: PUSH
19547: LD_INT 8
19549: PUSH
19550: LD_INT 9
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: LIST
19557: PUSH
19558: LD_VAR 0 17
19562: ARRAY
19563: PPUSH
19564: LD_VAR 0 4
19568: PPUSH
19569: CALL_OW 380
19573: GO 19592
// PrepareHuman ( false , i , skill ) ;
19575: LD_INT 0
19577: PPUSH
19578: LD_VAR 0 8
19582: PPUSH
19583: LD_VAR 0 4
19587: PPUSH
19588: CALL_OW 380
// end else
19592: GO 19611
// PrepareHuman ( false , i , skill ) ;
19594: LD_INT 0
19596: PPUSH
19597: LD_VAR 0 8
19601: PPUSH
19602: LD_VAR 0 4
19606: PPUSH
19607: CALL_OW 380
// un := CreateHuman ;
19611: LD_ADDR_VAR 0 14
19615: PUSH
19616: CALL_OW 44
19620: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19621: LD_ADDR_VAR 0 7
19625: PUSH
19626: LD_VAR 0 7
19630: PPUSH
19631: LD_INT 1
19633: PPUSH
19634: LD_VAR 0 14
19638: PPUSH
19639: CALL_OW 2
19643: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19644: LD_VAR 0 14
19648: PPUSH
19649: LD_VAR 0 9
19653: PPUSH
19654: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19658: LD_VAR 0 9
19662: PPUSH
19663: CALL_OW 313
19667: PUSH
19668: LD_INT 6
19670: EQUAL
19671: PUSH
19672: LD_VAR 0 9
19676: PPUSH
19677: CALL_OW 266
19681: PUSH
19682: LD_INT 32
19684: PUSH
19685: LD_INT 31
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: IN
19692: OR
19693: IFFALSE 19507
19695: GO 19504
19697: POP
19698: POP
// end else
19699: GO 20081
// for j = 1 to x do
19701: LD_ADDR_VAR 0 9
19705: PUSH
19706: DOUBLE
19707: LD_INT 1
19709: DEC
19710: ST_TO_ADDR
19711: LD_VAR 0 13
19715: PUSH
19716: FOR_TO
19717: IFFALSE 20079
// begin InitHc ;
19719: CALL_OW 19
// if not f then
19723: LD_VAR 0 12
19727: NOT
19728: IFFALSE 19817
// begin PrepareHuman ( false , i , skill ) ;
19730: LD_INT 0
19732: PPUSH
19733: LD_VAR 0 8
19737: PPUSH
19738: LD_VAR 0 4
19742: PPUSH
19743: CALL_OW 380
// un := CreateHuman ;
19747: LD_ADDR_VAR 0 14
19751: PUSH
19752: CALL_OW 44
19756: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19757: LD_ADDR_VAR 0 7
19761: PUSH
19762: LD_VAR 0 7
19766: PPUSH
19767: LD_INT 1
19769: PPUSH
19770: LD_VAR 0 14
19774: PPUSH
19775: CALL_OW 2
19779: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19780: LD_VAR 0 14
19784: PPUSH
19785: LD_VAR 0 1
19789: PPUSH
19790: CALL_OW 250
19794: PPUSH
19795: LD_VAR 0 1
19799: PPUSH
19800: CALL_OW 251
19804: PPUSH
19805: LD_INT 10
19807: PPUSH
19808: LD_INT 0
19810: PPUSH
19811: CALL_OW 50
// continue ;
19815: GO 19716
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19817: LD_VAR 0 12
19821: PUSH
19822: LD_INT 1
19824: ARRAY
19825: PPUSH
19826: CALL_OW 313
19830: PUSH
19831: LD_VAR 0 12
19835: PUSH
19836: LD_INT 1
19838: ARRAY
19839: PPUSH
19840: CALL_OW 266
19844: PUSH
19845: LD_INT 32
19847: PUSH
19848: LD_INT 31
19850: PUSH
19851: EMPTY
19852: LIST
19853: LIST
19854: IN
19855: AND
19856: PUSH
19857: LD_VAR 0 12
19861: PUSH
19862: LD_INT 1
19864: ARRAY
19865: PPUSH
19866: CALL_OW 313
19870: PUSH
19871: LD_INT 6
19873: EQUAL
19874: OR
19875: IFFALSE 19895
// f := Delete ( f , 1 ) ;
19877: LD_ADDR_VAR 0 12
19881: PUSH
19882: LD_VAR 0 12
19886: PPUSH
19887: LD_INT 1
19889: PPUSH
19890: CALL_OW 3
19894: ST_TO_ADDR
// if not f then
19895: LD_VAR 0 12
19899: NOT
19900: IFFALSE 19918
// begin x := x + 2 ;
19902: LD_ADDR_VAR 0 13
19906: PUSH
19907: LD_VAR 0 13
19911: PUSH
19912: LD_INT 2
19914: PLUS
19915: ST_TO_ADDR
// continue ;
19916: GO 19716
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19918: LD_VAR 0 12
19922: PUSH
19923: LD_INT 1
19925: ARRAY
19926: PPUSH
19927: CALL_OW 266
19931: PUSH
19932: LD_INT 5
19934: EQUAL
19935: IFFALSE 20009
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19937: LD_VAR 0 12
19941: PUSH
19942: LD_INT 1
19944: ARRAY
19945: PPUSH
19946: CALL_OW 313
19950: PUSH
19951: LD_INT 3
19953: LESS
19954: IFFALSE 19990
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19956: LD_INT 0
19958: PPUSH
19959: LD_INT 5
19961: PUSH
19962: LD_INT 8
19964: PUSH
19965: LD_INT 9
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: PUSH
19973: LD_VAR 0 17
19977: ARRAY
19978: PPUSH
19979: LD_VAR 0 4
19983: PPUSH
19984: CALL_OW 380
19988: GO 20007
// PrepareHuman ( false , i , skill ) ;
19990: LD_INT 0
19992: PPUSH
19993: LD_VAR 0 8
19997: PPUSH
19998: LD_VAR 0 4
20002: PPUSH
20003: CALL_OW 380
// end else
20007: GO 20026
// PrepareHuman ( false , i , skill ) ;
20009: LD_INT 0
20011: PPUSH
20012: LD_VAR 0 8
20016: PPUSH
20017: LD_VAR 0 4
20021: PPUSH
20022: CALL_OW 380
// un := CreateHuman ;
20026: LD_ADDR_VAR 0 14
20030: PUSH
20031: CALL_OW 44
20035: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20036: LD_ADDR_VAR 0 7
20040: PUSH
20041: LD_VAR 0 7
20045: PPUSH
20046: LD_INT 1
20048: PPUSH
20049: LD_VAR 0 14
20053: PPUSH
20054: CALL_OW 2
20058: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20059: LD_VAR 0 14
20063: PPUSH
20064: LD_VAR 0 12
20068: PUSH
20069: LD_INT 1
20071: ARRAY
20072: PPUSH
20073: CALL_OW 52
// end ;
20077: GO 19716
20079: POP
20080: POP
// end ;
20081: GO 19018
20083: POP
20084: POP
// result := result ^ buildings ;
20085: LD_ADDR_VAR 0 7
20089: PUSH
20090: LD_VAR 0 7
20094: PUSH
20095: LD_VAR 0 18
20099: ADD
20100: ST_TO_ADDR
// end else
20101: GO 20244
// begin for i = 1 to personel do
20103: LD_ADDR_VAR 0 8
20107: PUSH
20108: DOUBLE
20109: LD_INT 1
20111: DEC
20112: ST_TO_ADDR
20113: LD_VAR 0 6
20117: PUSH
20118: FOR_TO
20119: IFFALSE 20242
// begin if i > 4 then
20121: LD_VAR 0 8
20125: PUSH
20126: LD_INT 4
20128: GREATER
20129: IFFALSE 20133
// break ;
20131: GO 20242
// x := personel [ i ] ;
20133: LD_ADDR_VAR 0 13
20137: PUSH
20138: LD_VAR 0 6
20142: PUSH
20143: LD_VAR 0 8
20147: ARRAY
20148: ST_TO_ADDR
// if x = - 1 then
20149: LD_VAR 0 13
20153: PUSH
20154: LD_INT 1
20156: NEG
20157: EQUAL
20158: IFFALSE 20162
// continue ;
20160: GO 20118
// PrepareHuman ( false , i , skill ) ;
20162: LD_INT 0
20164: PPUSH
20165: LD_VAR 0 8
20169: PPUSH
20170: LD_VAR 0 4
20174: PPUSH
20175: CALL_OW 380
// un := CreateHuman ;
20179: LD_ADDR_VAR 0 14
20183: PUSH
20184: CALL_OW 44
20188: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20189: LD_VAR 0 14
20193: PPUSH
20194: LD_VAR 0 1
20198: PPUSH
20199: CALL_OW 250
20203: PPUSH
20204: LD_VAR 0 1
20208: PPUSH
20209: CALL_OW 251
20213: PPUSH
20214: LD_INT 10
20216: PPUSH
20217: LD_INT 0
20219: PPUSH
20220: CALL_OW 50
// result := result ^ un ;
20224: LD_ADDR_VAR 0 7
20228: PUSH
20229: LD_VAR 0 7
20233: PUSH
20234: LD_VAR 0 14
20238: ADD
20239: ST_TO_ADDR
// end ;
20240: GO 20118
20242: POP
20243: POP
// end ; end ;
20244: LD_VAR 0 7
20248: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20249: LD_INT 0
20251: PPUSH
20252: PPUSH
20253: PPUSH
20254: PPUSH
20255: PPUSH
20256: PPUSH
20257: PPUSH
20258: PPUSH
20259: PPUSH
20260: PPUSH
20261: PPUSH
20262: PPUSH
20263: PPUSH
20264: PPUSH
20265: PPUSH
20266: PPUSH
// result := false ;
20267: LD_ADDR_VAR 0 3
20271: PUSH
20272: LD_INT 0
20274: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20275: LD_VAR 0 1
20279: NOT
20280: PUSH
20281: LD_VAR 0 1
20285: PPUSH
20286: CALL_OW 266
20290: PUSH
20291: LD_INT 32
20293: PUSH
20294: LD_INT 33
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: IN
20301: NOT
20302: OR
20303: IFFALSE 20307
// exit ;
20305: GO 21416
// nat := GetNation ( tower ) ;
20307: LD_ADDR_VAR 0 12
20311: PUSH
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 248
20321: ST_TO_ADDR
// side := GetSide ( tower ) ;
20322: LD_ADDR_VAR 0 16
20326: PUSH
20327: LD_VAR 0 1
20331: PPUSH
20332: CALL_OW 255
20336: ST_TO_ADDR
// x := GetX ( tower ) ;
20337: LD_ADDR_VAR 0 10
20341: PUSH
20342: LD_VAR 0 1
20346: PPUSH
20347: CALL_OW 250
20351: ST_TO_ADDR
// y := GetY ( tower ) ;
20352: LD_ADDR_VAR 0 11
20356: PUSH
20357: LD_VAR 0 1
20361: PPUSH
20362: CALL_OW 251
20366: ST_TO_ADDR
// if not x or not y then
20367: LD_VAR 0 10
20371: NOT
20372: PUSH
20373: LD_VAR 0 11
20377: NOT
20378: OR
20379: IFFALSE 20383
// exit ;
20381: GO 21416
// weapon := 0 ;
20383: LD_ADDR_VAR 0 18
20387: PUSH
20388: LD_INT 0
20390: ST_TO_ADDR
// fac_list := [ ] ;
20391: LD_ADDR_VAR 0 17
20395: PUSH
20396: EMPTY
20397: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20398: LD_ADDR_VAR 0 6
20402: PUSH
20403: LD_VAR 0 1
20407: PPUSH
20408: CALL_OW 274
20412: PPUSH
20413: LD_VAR 0 2
20417: PPUSH
20418: LD_INT 0
20420: PPUSH
20421: CALL 17987 0 3
20425: PPUSH
20426: LD_INT 30
20428: PUSH
20429: LD_INT 3
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PPUSH
20436: CALL_OW 72
20440: ST_TO_ADDR
// if not factories then
20441: LD_VAR 0 6
20445: NOT
20446: IFFALSE 20450
// exit ;
20448: GO 21416
// for i in factories do
20450: LD_ADDR_VAR 0 8
20454: PUSH
20455: LD_VAR 0 6
20459: PUSH
20460: FOR_IN
20461: IFFALSE 20486
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20463: LD_ADDR_VAR 0 17
20467: PUSH
20468: LD_VAR 0 17
20472: PUSH
20473: LD_VAR 0 8
20477: PPUSH
20478: CALL_OW 478
20482: UNION
20483: ST_TO_ADDR
20484: GO 20460
20486: POP
20487: POP
// if not fac_list then
20488: LD_VAR 0 17
20492: NOT
20493: IFFALSE 20497
// exit ;
20495: GO 21416
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20497: LD_ADDR_VAR 0 5
20501: PUSH
20502: LD_INT 4
20504: PUSH
20505: LD_INT 5
20507: PUSH
20508: LD_INT 9
20510: PUSH
20511: LD_INT 10
20513: PUSH
20514: LD_INT 6
20516: PUSH
20517: LD_INT 7
20519: PUSH
20520: LD_INT 11
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 27
20534: PUSH
20535: LD_INT 28
20537: PUSH
20538: LD_INT 26
20540: PUSH
20541: LD_INT 30
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 43
20552: PUSH
20553: LD_INT 44
20555: PUSH
20556: LD_INT 46
20558: PUSH
20559: LD_INT 45
20561: PUSH
20562: LD_INT 47
20564: PUSH
20565: LD_INT 49
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: LIST
20574: LIST
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: LIST
20580: PUSH
20581: LD_VAR 0 12
20585: ARRAY
20586: ST_TO_ADDR
// list := list isect fac_list ;
20587: LD_ADDR_VAR 0 5
20591: PUSH
20592: LD_VAR 0 5
20596: PUSH
20597: LD_VAR 0 17
20601: ISECT
20602: ST_TO_ADDR
// if not list then
20603: LD_VAR 0 5
20607: NOT
20608: IFFALSE 20612
// exit ;
20610: GO 21416
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20612: LD_VAR 0 12
20616: PUSH
20617: LD_INT 3
20619: EQUAL
20620: PUSH
20621: LD_INT 49
20623: PUSH
20624: LD_VAR 0 5
20628: IN
20629: AND
20630: PUSH
20631: LD_INT 31
20633: PPUSH
20634: LD_VAR 0 16
20638: PPUSH
20639: CALL_OW 321
20643: PUSH
20644: LD_INT 2
20646: EQUAL
20647: AND
20648: IFFALSE 20708
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20650: LD_INT 22
20652: PUSH
20653: LD_VAR 0 16
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 35
20664: PUSH
20665: LD_INT 49
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 91
20674: PUSH
20675: LD_VAR 0 1
20679: PUSH
20680: LD_INT 10
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: LIST
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: LIST
20692: PPUSH
20693: CALL_OW 69
20697: NOT
20698: IFFALSE 20708
// weapon := ru_time_lapser ;
20700: LD_ADDR_VAR 0 18
20704: PUSH
20705: LD_INT 49
20707: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20708: LD_VAR 0 12
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: LD_INT 2
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: IN
20723: PUSH
20724: LD_INT 11
20726: PUSH
20727: LD_VAR 0 5
20731: IN
20732: PUSH
20733: LD_INT 30
20735: PUSH
20736: LD_VAR 0 5
20740: IN
20741: OR
20742: AND
20743: PUSH
20744: LD_INT 6
20746: PPUSH
20747: LD_VAR 0 16
20751: PPUSH
20752: CALL_OW 321
20756: PUSH
20757: LD_INT 2
20759: EQUAL
20760: AND
20761: IFFALSE 20926
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
20763: LD_INT 22
20765: PUSH
20766: LD_VAR 0 16
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 2
20777: PUSH
20778: LD_INT 35
20780: PUSH
20781: LD_INT 11
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 35
20790: PUSH
20791: LD_INT 30
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 91
20805: PUSH
20806: LD_VAR 0 1
20810: PUSH
20811: LD_INT 18
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: LIST
20823: PPUSH
20824: CALL_OW 69
20828: NOT
20829: PUSH
20830: LD_INT 22
20832: PUSH
20833: LD_VAR 0 16
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 2
20844: PUSH
20845: LD_INT 30
20847: PUSH
20848: LD_INT 32
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: LD_INT 33
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 91
20872: PUSH
20873: LD_VAR 0 1
20877: PUSH
20878: LD_INT 12
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: LIST
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: LIST
20890: PUSH
20891: EMPTY
20892: LIST
20893: PPUSH
20894: CALL_OW 69
20898: PUSH
20899: LD_INT 2
20901: GREATER
20902: AND
20903: IFFALSE 20926
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20905: LD_ADDR_VAR 0 18
20909: PUSH
20910: LD_INT 11
20912: PUSH
20913: LD_INT 30
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_VAR 0 12
20924: ARRAY
20925: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20926: LD_VAR 0 18
20930: NOT
20931: PUSH
20932: LD_INT 40
20934: PPUSH
20935: LD_VAR 0 16
20939: PPUSH
20940: CALL_OW 321
20944: PUSH
20945: LD_INT 2
20947: EQUAL
20948: AND
20949: PUSH
20950: LD_INT 7
20952: PUSH
20953: LD_VAR 0 5
20957: IN
20958: PUSH
20959: LD_INT 28
20961: PUSH
20962: LD_VAR 0 5
20966: IN
20967: OR
20968: PUSH
20969: LD_INT 45
20971: PUSH
20972: LD_VAR 0 5
20976: IN
20977: OR
20978: AND
20979: IFFALSE 21233
// begin hex := GetHexInfo ( x , y ) ;
20981: LD_ADDR_VAR 0 4
20985: PUSH
20986: LD_VAR 0 10
20990: PPUSH
20991: LD_VAR 0 11
20995: PPUSH
20996: CALL_OW 546
21000: ST_TO_ADDR
// if hex [ 1 ] then
21001: LD_VAR 0 4
21005: PUSH
21006: LD_INT 1
21008: ARRAY
21009: IFFALSE 21013
// exit ;
21011: GO 21416
// height := hex [ 2 ] ;
21013: LD_ADDR_VAR 0 15
21017: PUSH
21018: LD_VAR 0 4
21022: PUSH
21023: LD_INT 2
21025: ARRAY
21026: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21027: LD_ADDR_VAR 0 14
21031: PUSH
21032: LD_INT 0
21034: PUSH
21035: LD_INT 2
21037: PUSH
21038: LD_INT 3
21040: PUSH
21041: LD_INT 5
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: ST_TO_ADDR
// for i in tmp do
21050: LD_ADDR_VAR 0 8
21054: PUSH
21055: LD_VAR 0 14
21059: PUSH
21060: FOR_IN
21061: IFFALSE 21231
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21063: LD_ADDR_VAR 0 9
21067: PUSH
21068: LD_VAR 0 10
21072: PPUSH
21073: LD_VAR 0 8
21077: PPUSH
21078: LD_INT 5
21080: PPUSH
21081: CALL_OW 272
21085: PUSH
21086: LD_VAR 0 11
21090: PPUSH
21091: LD_VAR 0 8
21095: PPUSH
21096: LD_INT 5
21098: PPUSH
21099: CALL_OW 273
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21108: LD_VAR 0 9
21112: PUSH
21113: LD_INT 1
21115: ARRAY
21116: PPUSH
21117: LD_VAR 0 9
21121: PUSH
21122: LD_INT 2
21124: ARRAY
21125: PPUSH
21126: CALL_OW 488
21130: IFFALSE 21229
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21132: LD_ADDR_VAR 0 4
21136: PUSH
21137: LD_VAR 0 9
21141: PUSH
21142: LD_INT 1
21144: ARRAY
21145: PPUSH
21146: LD_VAR 0 9
21150: PUSH
21151: LD_INT 2
21153: ARRAY
21154: PPUSH
21155: CALL_OW 546
21159: ST_TO_ADDR
// if hex [ 1 ] then
21160: LD_VAR 0 4
21164: PUSH
21165: LD_INT 1
21167: ARRAY
21168: IFFALSE 21172
// continue ;
21170: GO 21060
// h := hex [ 2 ] ;
21172: LD_ADDR_VAR 0 13
21176: PUSH
21177: LD_VAR 0 4
21181: PUSH
21182: LD_INT 2
21184: ARRAY
21185: ST_TO_ADDR
// if h + 7 < height then
21186: LD_VAR 0 13
21190: PUSH
21191: LD_INT 7
21193: PLUS
21194: PUSH
21195: LD_VAR 0 15
21199: LESS
21200: IFFALSE 21229
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21202: LD_ADDR_VAR 0 18
21206: PUSH
21207: LD_INT 7
21209: PUSH
21210: LD_INT 28
21212: PUSH
21213: LD_INT 45
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: PUSH
21221: LD_VAR 0 12
21225: ARRAY
21226: ST_TO_ADDR
// break ;
21227: GO 21231
// end ; end ; end ;
21229: GO 21060
21231: POP
21232: POP
// end ; if not weapon then
21233: LD_VAR 0 18
21237: NOT
21238: IFFALSE 21298
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21240: LD_ADDR_VAR 0 5
21244: PUSH
21245: LD_VAR 0 5
21249: PUSH
21250: LD_INT 11
21252: PUSH
21253: LD_INT 30
21255: PUSH
21256: LD_INT 49
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: LIST
21263: DIFF
21264: ST_TO_ADDR
// if not list then
21265: LD_VAR 0 5
21269: NOT
21270: IFFALSE 21274
// exit ;
21272: GO 21416
// weapon := list [ rand ( 1 , list ) ] ;
21274: LD_ADDR_VAR 0 18
21278: PUSH
21279: LD_VAR 0 5
21283: PUSH
21284: LD_INT 1
21286: PPUSH
21287: LD_VAR 0 5
21291: PPUSH
21292: CALL_OW 12
21296: ARRAY
21297: ST_TO_ADDR
// end ; if weapon then
21298: LD_VAR 0 18
21302: IFFALSE 21416
// begin tmp := CostOfWeapon ( weapon ) ;
21304: LD_ADDR_VAR 0 14
21308: PUSH
21309: LD_VAR 0 18
21313: PPUSH
21314: CALL_OW 451
21318: ST_TO_ADDR
// j := GetBase ( tower ) ;
21319: LD_ADDR_VAR 0 9
21323: PUSH
21324: LD_VAR 0 1
21328: PPUSH
21329: CALL_OW 274
21333: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21334: LD_VAR 0 9
21338: PPUSH
21339: LD_INT 1
21341: PPUSH
21342: CALL_OW 275
21346: PUSH
21347: LD_VAR 0 14
21351: PUSH
21352: LD_INT 1
21354: ARRAY
21355: GREATEREQUAL
21356: PUSH
21357: LD_VAR 0 9
21361: PPUSH
21362: LD_INT 2
21364: PPUSH
21365: CALL_OW 275
21369: PUSH
21370: LD_VAR 0 14
21374: PUSH
21375: LD_INT 2
21377: ARRAY
21378: GREATEREQUAL
21379: AND
21380: PUSH
21381: LD_VAR 0 9
21385: PPUSH
21386: LD_INT 3
21388: PPUSH
21389: CALL_OW 275
21393: PUSH
21394: LD_VAR 0 14
21398: PUSH
21399: LD_INT 3
21401: ARRAY
21402: GREATEREQUAL
21403: AND
21404: IFFALSE 21416
// result := weapon ;
21406: LD_ADDR_VAR 0 3
21410: PUSH
21411: LD_VAR 0 18
21415: ST_TO_ADDR
// end ; end ;
21416: LD_VAR 0 3
21420: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21421: LD_INT 0
21423: PPUSH
21424: PPUSH
// result := true ;
21425: LD_ADDR_VAR 0 3
21429: PUSH
21430: LD_INT 1
21432: ST_TO_ADDR
// if array1 = array2 then
21433: LD_VAR 0 1
21437: PUSH
21438: LD_VAR 0 2
21442: EQUAL
21443: IFFALSE 21503
// begin for i = 1 to array1 do
21445: LD_ADDR_VAR 0 4
21449: PUSH
21450: DOUBLE
21451: LD_INT 1
21453: DEC
21454: ST_TO_ADDR
21455: LD_VAR 0 1
21459: PUSH
21460: FOR_TO
21461: IFFALSE 21499
// if array1 [ i ] <> array2 [ i ] then
21463: LD_VAR 0 1
21467: PUSH
21468: LD_VAR 0 4
21472: ARRAY
21473: PUSH
21474: LD_VAR 0 2
21478: PUSH
21479: LD_VAR 0 4
21483: ARRAY
21484: NONEQUAL
21485: IFFALSE 21497
// begin result := false ;
21487: LD_ADDR_VAR 0 3
21491: PUSH
21492: LD_INT 0
21494: ST_TO_ADDR
// break ;
21495: GO 21499
// end ;
21497: GO 21460
21499: POP
21500: POP
// end else
21501: GO 21511
// result := false ;
21503: LD_ADDR_VAR 0 3
21507: PUSH
21508: LD_INT 0
21510: ST_TO_ADDR
// end ;
21511: LD_VAR 0 3
21515: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21516: LD_INT 0
21518: PPUSH
21519: PPUSH
// if not array1 or not array2 then
21520: LD_VAR 0 1
21524: NOT
21525: PUSH
21526: LD_VAR 0 2
21530: NOT
21531: OR
21532: IFFALSE 21536
// exit ;
21534: GO 21600
// result := true ;
21536: LD_ADDR_VAR 0 3
21540: PUSH
21541: LD_INT 1
21543: ST_TO_ADDR
// for i = 1 to array1 do
21544: LD_ADDR_VAR 0 4
21548: PUSH
21549: DOUBLE
21550: LD_INT 1
21552: DEC
21553: ST_TO_ADDR
21554: LD_VAR 0 1
21558: PUSH
21559: FOR_TO
21560: IFFALSE 21598
// if array1 [ i ] <> array2 [ i ] then
21562: LD_VAR 0 1
21566: PUSH
21567: LD_VAR 0 4
21571: ARRAY
21572: PUSH
21573: LD_VAR 0 2
21577: PUSH
21578: LD_VAR 0 4
21582: ARRAY
21583: NONEQUAL
21584: IFFALSE 21596
// begin result := false ;
21586: LD_ADDR_VAR 0 3
21590: PUSH
21591: LD_INT 0
21593: ST_TO_ADDR
// break ;
21594: GO 21598
// end ;
21596: GO 21559
21598: POP
21599: POP
// end ;
21600: LD_VAR 0 3
21604: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21605: LD_INT 0
21607: PPUSH
21608: PPUSH
21609: PPUSH
// pom := GetBase ( fac ) ;
21610: LD_ADDR_VAR 0 5
21614: PUSH
21615: LD_VAR 0 1
21619: PPUSH
21620: CALL_OW 274
21624: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21625: LD_ADDR_VAR 0 4
21629: PUSH
21630: LD_VAR 0 2
21634: PUSH
21635: LD_INT 1
21637: ARRAY
21638: PPUSH
21639: LD_VAR 0 2
21643: PUSH
21644: LD_INT 2
21646: ARRAY
21647: PPUSH
21648: LD_VAR 0 2
21652: PUSH
21653: LD_INT 3
21655: ARRAY
21656: PPUSH
21657: LD_VAR 0 2
21661: PUSH
21662: LD_INT 4
21664: ARRAY
21665: PPUSH
21666: CALL_OW 449
21670: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21671: LD_ADDR_VAR 0 3
21675: PUSH
21676: LD_VAR 0 5
21680: PPUSH
21681: LD_INT 1
21683: PPUSH
21684: CALL_OW 275
21688: PUSH
21689: LD_VAR 0 4
21693: PUSH
21694: LD_INT 1
21696: ARRAY
21697: GREATEREQUAL
21698: PUSH
21699: LD_VAR 0 5
21703: PPUSH
21704: LD_INT 2
21706: PPUSH
21707: CALL_OW 275
21711: PUSH
21712: LD_VAR 0 4
21716: PUSH
21717: LD_INT 2
21719: ARRAY
21720: GREATEREQUAL
21721: AND
21722: PUSH
21723: LD_VAR 0 5
21727: PPUSH
21728: LD_INT 3
21730: PPUSH
21731: CALL_OW 275
21735: PUSH
21736: LD_VAR 0 4
21740: PUSH
21741: LD_INT 3
21743: ARRAY
21744: GREATEREQUAL
21745: AND
21746: ST_TO_ADDR
// end ;
21747: LD_VAR 0 3
21751: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
21752: LD_INT 0
21754: PPUSH
21755: PPUSH
21756: PPUSH
21757: PPUSH
// pom := GetBase ( building ) ;
21758: LD_ADDR_VAR 0 3
21762: PUSH
21763: LD_VAR 0 1
21767: PPUSH
21768: CALL_OW 274
21772: ST_TO_ADDR
// if not pom then
21773: LD_VAR 0 3
21777: NOT
21778: IFFALSE 21782
// exit ;
21780: GO 21952
// btype := GetBType ( building ) ;
21782: LD_ADDR_VAR 0 5
21786: PUSH
21787: LD_VAR 0 1
21791: PPUSH
21792: CALL_OW 266
21796: ST_TO_ADDR
// if btype = b_armoury then
21797: LD_VAR 0 5
21801: PUSH
21802: LD_INT 4
21804: EQUAL
21805: IFFALSE 21815
// btype := b_barracks ;
21807: LD_ADDR_VAR 0 5
21811: PUSH
21812: LD_INT 5
21814: ST_TO_ADDR
// if btype = b_depot then
21815: LD_VAR 0 5
21819: PUSH
21820: LD_INT 0
21822: EQUAL
21823: IFFALSE 21833
// btype := b_warehouse ;
21825: LD_ADDR_VAR 0 5
21829: PUSH
21830: LD_INT 1
21832: ST_TO_ADDR
// if btype = b_workshop then
21833: LD_VAR 0 5
21837: PUSH
21838: LD_INT 2
21840: EQUAL
21841: IFFALSE 21851
// btype := b_factory ;
21843: LD_ADDR_VAR 0 5
21847: PUSH
21848: LD_INT 3
21850: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21851: LD_ADDR_VAR 0 4
21855: PUSH
21856: LD_VAR 0 5
21860: PPUSH
21861: LD_VAR 0 1
21865: PPUSH
21866: CALL_OW 248
21870: PPUSH
21871: CALL_OW 450
21875: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21876: LD_ADDR_VAR 0 2
21880: PUSH
21881: LD_VAR 0 3
21885: PPUSH
21886: LD_INT 1
21888: PPUSH
21889: CALL_OW 275
21893: PUSH
21894: LD_VAR 0 4
21898: PUSH
21899: LD_INT 1
21901: ARRAY
21902: GREATEREQUAL
21903: PUSH
21904: LD_VAR 0 3
21908: PPUSH
21909: LD_INT 2
21911: PPUSH
21912: CALL_OW 275
21916: PUSH
21917: LD_VAR 0 4
21921: PUSH
21922: LD_INT 2
21924: ARRAY
21925: GREATEREQUAL
21926: AND
21927: PUSH
21928: LD_VAR 0 3
21932: PPUSH
21933: LD_INT 3
21935: PPUSH
21936: CALL_OW 275
21940: PUSH
21941: LD_VAR 0 4
21945: PUSH
21946: LD_INT 3
21948: ARRAY
21949: GREATEREQUAL
21950: AND
21951: ST_TO_ADDR
// end ;
21952: LD_VAR 0 2
21956: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21957: LD_INT 0
21959: PPUSH
21960: PPUSH
21961: PPUSH
// pom := GetBase ( building ) ;
21962: LD_ADDR_VAR 0 4
21966: PUSH
21967: LD_VAR 0 1
21971: PPUSH
21972: CALL_OW 274
21976: ST_TO_ADDR
// if not pom then
21977: LD_VAR 0 4
21981: NOT
21982: IFFALSE 21986
// exit ;
21984: GO 22087
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21986: LD_ADDR_VAR 0 5
21990: PUSH
21991: LD_VAR 0 2
21995: PPUSH
21996: LD_VAR 0 1
22000: PPUSH
22001: CALL_OW 248
22005: PPUSH
22006: CALL_OW 450
22010: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22011: LD_ADDR_VAR 0 3
22015: PUSH
22016: LD_VAR 0 4
22020: PPUSH
22021: LD_INT 1
22023: PPUSH
22024: CALL_OW 275
22028: PUSH
22029: LD_VAR 0 5
22033: PUSH
22034: LD_INT 1
22036: ARRAY
22037: GREATEREQUAL
22038: PUSH
22039: LD_VAR 0 4
22043: PPUSH
22044: LD_INT 2
22046: PPUSH
22047: CALL_OW 275
22051: PUSH
22052: LD_VAR 0 5
22056: PUSH
22057: LD_INT 2
22059: ARRAY
22060: GREATEREQUAL
22061: AND
22062: PUSH
22063: LD_VAR 0 4
22067: PPUSH
22068: LD_INT 3
22070: PPUSH
22071: CALL_OW 275
22075: PUSH
22076: LD_VAR 0 5
22080: PUSH
22081: LD_INT 3
22083: ARRAY
22084: GREATEREQUAL
22085: AND
22086: ST_TO_ADDR
// end ;
22087: LD_VAR 0 3
22091: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22092: LD_INT 0
22094: PPUSH
22095: PPUSH
22096: PPUSH
22097: PPUSH
22098: PPUSH
22099: PPUSH
22100: PPUSH
22101: PPUSH
22102: PPUSH
22103: PPUSH
22104: PPUSH
// result := false ;
22105: LD_ADDR_VAR 0 8
22109: PUSH
22110: LD_INT 0
22112: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22113: LD_VAR 0 5
22117: NOT
22118: PUSH
22119: LD_VAR 0 1
22123: NOT
22124: OR
22125: PUSH
22126: LD_VAR 0 2
22130: NOT
22131: OR
22132: PUSH
22133: LD_VAR 0 3
22137: NOT
22138: OR
22139: IFFALSE 22143
// exit ;
22141: GO 22957
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22143: LD_ADDR_VAR 0 14
22147: PUSH
22148: LD_VAR 0 1
22152: PPUSH
22153: LD_VAR 0 2
22157: PPUSH
22158: LD_VAR 0 3
22162: PPUSH
22163: LD_VAR 0 4
22167: PPUSH
22168: LD_VAR 0 5
22172: PUSH
22173: LD_INT 1
22175: ARRAY
22176: PPUSH
22177: CALL_OW 248
22181: PPUSH
22182: LD_INT 0
22184: PPUSH
22185: CALL 24194 0 6
22189: ST_TO_ADDR
// if not hexes then
22190: LD_VAR 0 14
22194: NOT
22195: IFFALSE 22199
// exit ;
22197: GO 22957
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22199: LD_ADDR_VAR 0 17
22203: PUSH
22204: LD_VAR 0 5
22208: PPUSH
22209: LD_INT 22
22211: PUSH
22212: LD_VAR 0 13
22216: PPUSH
22217: CALL_OW 255
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 30
22231: PUSH
22232: LD_INT 0
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: LD_INT 30
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: LIST
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PPUSH
22258: CALL_OW 72
22262: ST_TO_ADDR
// for i = 1 to hexes do
22263: LD_ADDR_VAR 0 9
22267: PUSH
22268: DOUBLE
22269: LD_INT 1
22271: DEC
22272: ST_TO_ADDR
22273: LD_VAR 0 14
22277: PUSH
22278: FOR_TO
22279: IFFALSE 22955
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22281: LD_ADDR_VAR 0 13
22285: PUSH
22286: LD_VAR 0 14
22290: PUSH
22291: LD_VAR 0 9
22295: ARRAY
22296: PUSH
22297: LD_INT 1
22299: ARRAY
22300: PPUSH
22301: LD_VAR 0 14
22305: PUSH
22306: LD_VAR 0 9
22310: ARRAY
22311: PUSH
22312: LD_INT 2
22314: ARRAY
22315: PPUSH
22316: CALL_OW 428
22320: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22321: LD_VAR 0 14
22325: PUSH
22326: LD_VAR 0 9
22330: ARRAY
22331: PUSH
22332: LD_INT 1
22334: ARRAY
22335: PPUSH
22336: LD_VAR 0 14
22340: PUSH
22341: LD_VAR 0 9
22345: ARRAY
22346: PUSH
22347: LD_INT 2
22349: ARRAY
22350: PPUSH
22351: CALL_OW 351
22355: PUSH
22356: LD_VAR 0 14
22360: PUSH
22361: LD_VAR 0 9
22365: ARRAY
22366: PUSH
22367: LD_INT 1
22369: ARRAY
22370: PPUSH
22371: LD_VAR 0 14
22375: PUSH
22376: LD_VAR 0 9
22380: ARRAY
22381: PUSH
22382: LD_INT 2
22384: ARRAY
22385: PPUSH
22386: CALL_OW 488
22390: NOT
22391: OR
22392: PUSH
22393: LD_VAR 0 13
22397: PPUSH
22398: CALL_OW 247
22402: PUSH
22403: LD_INT 3
22405: EQUAL
22406: OR
22407: IFFALSE 22413
// exit ;
22409: POP
22410: POP
22411: GO 22957
// if not tmp then
22413: LD_VAR 0 13
22417: NOT
22418: IFFALSE 22422
// continue ;
22420: GO 22278
// result := true ;
22422: LD_ADDR_VAR 0 8
22426: PUSH
22427: LD_INT 1
22429: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22430: LD_VAR 0 6
22434: PUSH
22435: LD_VAR 0 13
22439: PPUSH
22440: CALL_OW 247
22444: PUSH
22445: LD_INT 2
22447: EQUAL
22448: AND
22449: PUSH
22450: LD_VAR 0 13
22454: PPUSH
22455: CALL_OW 263
22459: PUSH
22460: LD_INT 1
22462: EQUAL
22463: AND
22464: IFFALSE 22628
// begin if IsDrivenBy ( tmp ) then
22466: LD_VAR 0 13
22470: PPUSH
22471: CALL_OW 311
22475: IFFALSE 22479
// continue ;
22477: GO 22278
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22479: LD_VAR 0 6
22483: PPUSH
22484: LD_INT 3
22486: PUSH
22487: LD_INT 60
22489: PUSH
22490: EMPTY
22491: LIST
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 3
22499: PUSH
22500: LD_INT 55
22502: PUSH
22503: EMPTY
22504: LIST
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PPUSH
22514: CALL_OW 72
22518: IFFALSE 22626
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22520: LD_ADDR_VAR 0 18
22524: PUSH
22525: LD_VAR 0 6
22529: PPUSH
22530: LD_INT 3
22532: PUSH
22533: LD_INT 60
22535: PUSH
22536: EMPTY
22537: LIST
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 3
22545: PUSH
22546: LD_INT 55
22548: PUSH
22549: EMPTY
22550: LIST
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PPUSH
22560: CALL_OW 72
22564: PUSH
22565: LD_INT 1
22567: ARRAY
22568: ST_TO_ADDR
// if IsInUnit ( driver ) then
22569: LD_VAR 0 18
22573: PPUSH
22574: CALL_OW 310
22578: IFFALSE 22589
// ComExit ( driver ) ;
22580: LD_VAR 0 18
22584: PPUSH
22585: CALL 47899 0 1
// AddComEnterUnit ( driver , tmp ) ;
22589: LD_VAR 0 18
22593: PPUSH
22594: LD_VAR 0 13
22598: PPUSH
22599: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22603: LD_VAR 0 18
22607: PPUSH
22608: LD_VAR 0 7
22612: PPUSH
22613: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22617: LD_VAR 0 18
22621: PPUSH
22622: CALL_OW 181
// end ; continue ;
22626: GO 22278
// end ; if not cleaners or not tmp in cleaners then
22628: LD_VAR 0 6
22632: NOT
22633: PUSH
22634: LD_VAR 0 13
22638: PUSH
22639: LD_VAR 0 6
22643: IN
22644: NOT
22645: OR
22646: IFFALSE 22953
// begin if dep then
22648: LD_VAR 0 17
22652: IFFALSE 22788
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22654: LD_ADDR_VAR 0 16
22658: PUSH
22659: LD_VAR 0 17
22663: PUSH
22664: LD_INT 1
22666: ARRAY
22667: PPUSH
22668: CALL_OW 250
22672: PPUSH
22673: LD_VAR 0 17
22677: PUSH
22678: LD_INT 1
22680: ARRAY
22681: PPUSH
22682: CALL_OW 254
22686: PPUSH
22687: LD_INT 5
22689: PPUSH
22690: CALL_OW 272
22694: PUSH
22695: LD_VAR 0 17
22699: PUSH
22700: LD_INT 1
22702: ARRAY
22703: PPUSH
22704: CALL_OW 251
22708: PPUSH
22709: LD_VAR 0 17
22713: PUSH
22714: LD_INT 1
22716: ARRAY
22717: PPUSH
22718: CALL_OW 254
22722: PPUSH
22723: LD_INT 5
22725: PPUSH
22726: CALL_OW 273
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22735: LD_VAR 0 16
22739: PUSH
22740: LD_INT 1
22742: ARRAY
22743: PPUSH
22744: LD_VAR 0 16
22748: PUSH
22749: LD_INT 2
22751: ARRAY
22752: PPUSH
22753: CALL_OW 488
22757: IFFALSE 22788
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
22759: LD_VAR 0 13
22763: PPUSH
22764: LD_VAR 0 16
22768: PUSH
22769: LD_INT 1
22771: ARRAY
22772: PPUSH
22773: LD_VAR 0 16
22777: PUSH
22778: LD_INT 2
22780: ARRAY
22781: PPUSH
22782: CALL_OW 111
// continue ;
22786: GO 22278
// end ; end ; r := GetDir ( tmp ) ;
22788: LD_ADDR_VAR 0 15
22792: PUSH
22793: LD_VAR 0 13
22797: PPUSH
22798: CALL_OW 254
22802: ST_TO_ADDR
// if r = 5 then
22803: LD_VAR 0 15
22807: PUSH
22808: LD_INT 5
22810: EQUAL
22811: IFFALSE 22821
// r := 0 ;
22813: LD_ADDR_VAR 0 15
22817: PUSH
22818: LD_INT 0
22820: ST_TO_ADDR
// for j = r to 5 do
22821: LD_ADDR_VAR 0 10
22825: PUSH
22826: DOUBLE
22827: LD_VAR 0 15
22831: DEC
22832: ST_TO_ADDR
22833: LD_INT 5
22835: PUSH
22836: FOR_TO
22837: IFFALSE 22951
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22839: LD_ADDR_VAR 0 11
22843: PUSH
22844: LD_VAR 0 13
22848: PPUSH
22849: CALL_OW 250
22853: PPUSH
22854: LD_VAR 0 10
22858: PPUSH
22859: LD_INT 2
22861: PPUSH
22862: CALL_OW 272
22866: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22867: LD_ADDR_VAR 0 12
22871: PUSH
22872: LD_VAR 0 13
22876: PPUSH
22877: CALL_OW 251
22881: PPUSH
22882: LD_VAR 0 10
22886: PPUSH
22887: LD_INT 2
22889: PPUSH
22890: CALL_OW 273
22894: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22895: LD_VAR 0 11
22899: PPUSH
22900: LD_VAR 0 12
22904: PPUSH
22905: CALL_OW 488
22909: PUSH
22910: LD_VAR 0 11
22914: PPUSH
22915: LD_VAR 0 12
22919: PPUSH
22920: CALL_OW 428
22924: NOT
22925: AND
22926: IFFALSE 22949
// begin ComMoveXY ( tmp , _x , _y ) ;
22928: LD_VAR 0 13
22932: PPUSH
22933: LD_VAR 0 11
22937: PPUSH
22938: LD_VAR 0 12
22942: PPUSH
22943: CALL_OW 111
// break ;
22947: GO 22951
// end ; end ;
22949: GO 22836
22951: POP
22952: POP
// end ; end ;
22953: GO 22278
22955: POP
22956: POP
// end ;
22957: LD_VAR 0 8
22961: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22962: LD_INT 0
22964: PPUSH
// result := true ;
22965: LD_ADDR_VAR 0 3
22969: PUSH
22970: LD_INT 1
22972: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22973: LD_VAR 0 2
22977: PUSH
22978: LD_INT 24
22980: DOUBLE
22981: EQUAL
22982: IFTRUE 22992
22984: LD_INT 33
22986: DOUBLE
22987: EQUAL
22988: IFTRUE 22992
22990: GO 23017
22992: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22993: LD_ADDR_VAR 0 3
22997: PUSH
22998: LD_INT 32
23000: PPUSH
23001: LD_VAR 0 1
23005: PPUSH
23006: CALL_OW 321
23010: PUSH
23011: LD_INT 2
23013: EQUAL
23014: ST_TO_ADDR
23015: GO 23337
23017: LD_INT 20
23019: DOUBLE
23020: EQUAL
23021: IFTRUE 23025
23023: GO 23050
23025: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23026: LD_ADDR_VAR 0 3
23030: PUSH
23031: LD_INT 6
23033: PPUSH
23034: LD_VAR 0 1
23038: PPUSH
23039: CALL_OW 321
23043: PUSH
23044: LD_INT 2
23046: EQUAL
23047: ST_TO_ADDR
23048: GO 23337
23050: LD_INT 22
23052: DOUBLE
23053: EQUAL
23054: IFTRUE 23064
23056: LD_INT 36
23058: DOUBLE
23059: EQUAL
23060: IFTRUE 23064
23062: GO 23089
23064: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23065: LD_ADDR_VAR 0 3
23069: PUSH
23070: LD_INT 15
23072: PPUSH
23073: LD_VAR 0 1
23077: PPUSH
23078: CALL_OW 321
23082: PUSH
23083: LD_INT 2
23085: EQUAL
23086: ST_TO_ADDR
23087: GO 23337
23089: LD_INT 30
23091: DOUBLE
23092: EQUAL
23093: IFTRUE 23097
23095: GO 23122
23097: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23098: LD_ADDR_VAR 0 3
23102: PUSH
23103: LD_INT 20
23105: PPUSH
23106: LD_VAR 0 1
23110: PPUSH
23111: CALL_OW 321
23115: PUSH
23116: LD_INT 2
23118: EQUAL
23119: ST_TO_ADDR
23120: GO 23337
23122: LD_INT 28
23124: DOUBLE
23125: EQUAL
23126: IFTRUE 23136
23128: LD_INT 21
23130: DOUBLE
23131: EQUAL
23132: IFTRUE 23136
23134: GO 23161
23136: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23137: LD_ADDR_VAR 0 3
23141: PUSH
23142: LD_INT 21
23144: PPUSH
23145: LD_VAR 0 1
23149: PPUSH
23150: CALL_OW 321
23154: PUSH
23155: LD_INT 2
23157: EQUAL
23158: ST_TO_ADDR
23159: GO 23337
23161: LD_INT 16
23163: DOUBLE
23164: EQUAL
23165: IFTRUE 23169
23167: GO 23196
23169: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23170: LD_ADDR_VAR 0 3
23174: PUSH
23175: LD_EXP 100
23179: PPUSH
23180: LD_VAR 0 1
23184: PPUSH
23185: CALL_OW 321
23189: PUSH
23190: LD_INT 2
23192: EQUAL
23193: ST_TO_ADDR
23194: GO 23337
23196: LD_INT 19
23198: DOUBLE
23199: EQUAL
23200: IFTRUE 23210
23202: LD_INT 23
23204: DOUBLE
23205: EQUAL
23206: IFTRUE 23210
23208: GO 23237
23210: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23211: LD_ADDR_VAR 0 3
23215: PUSH
23216: LD_EXP 99
23220: PPUSH
23221: LD_VAR 0 1
23225: PPUSH
23226: CALL_OW 321
23230: PUSH
23231: LD_INT 2
23233: EQUAL
23234: ST_TO_ADDR
23235: GO 23337
23237: LD_INT 17
23239: DOUBLE
23240: EQUAL
23241: IFTRUE 23245
23243: GO 23270
23245: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23246: LD_ADDR_VAR 0 3
23250: PUSH
23251: LD_INT 39
23253: PPUSH
23254: LD_VAR 0 1
23258: PPUSH
23259: CALL_OW 321
23263: PUSH
23264: LD_INT 2
23266: EQUAL
23267: ST_TO_ADDR
23268: GO 23337
23270: LD_INT 18
23272: DOUBLE
23273: EQUAL
23274: IFTRUE 23278
23276: GO 23303
23278: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23279: LD_ADDR_VAR 0 3
23283: PUSH
23284: LD_INT 40
23286: PPUSH
23287: LD_VAR 0 1
23291: PPUSH
23292: CALL_OW 321
23296: PUSH
23297: LD_INT 2
23299: EQUAL
23300: ST_TO_ADDR
23301: GO 23337
23303: LD_INT 27
23305: DOUBLE
23306: EQUAL
23307: IFTRUE 23311
23309: GO 23336
23311: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23312: LD_ADDR_VAR 0 3
23316: PUSH
23317: LD_INT 35
23319: PPUSH
23320: LD_VAR 0 1
23324: PPUSH
23325: CALL_OW 321
23329: PUSH
23330: LD_INT 2
23332: EQUAL
23333: ST_TO_ADDR
23334: GO 23337
23336: POP
// end ;
23337: LD_VAR 0 3
23341: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23342: LD_INT 0
23344: PPUSH
23345: PPUSH
23346: PPUSH
23347: PPUSH
23348: PPUSH
23349: PPUSH
23350: PPUSH
23351: PPUSH
23352: PPUSH
23353: PPUSH
23354: PPUSH
// result := false ;
23355: LD_ADDR_VAR 0 6
23359: PUSH
23360: LD_INT 0
23362: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23363: LD_VAR 0 1
23367: NOT
23368: PUSH
23369: LD_VAR 0 1
23373: PPUSH
23374: CALL_OW 266
23378: PUSH
23379: LD_INT 0
23381: PUSH
23382: LD_INT 1
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: IN
23389: NOT
23390: OR
23391: PUSH
23392: LD_VAR 0 2
23396: NOT
23397: OR
23398: PUSH
23399: LD_VAR 0 5
23403: PUSH
23404: LD_INT 0
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: LD_INT 2
23412: PUSH
23413: LD_INT 3
23415: PUSH
23416: LD_INT 4
23418: PUSH
23419: LD_INT 5
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: IN
23430: NOT
23431: OR
23432: PUSH
23433: LD_VAR 0 3
23437: PPUSH
23438: LD_VAR 0 4
23442: PPUSH
23443: CALL_OW 488
23447: NOT
23448: OR
23449: IFFALSE 23453
// exit ;
23451: GO 24189
// side := GetSide ( depot ) ;
23453: LD_ADDR_VAR 0 9
23457: PUSH
23458: LD_VAR 0 1
23462: PPUSH
23463: CALL_OW 255
23467: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23468: LD_VAR 0 9
23472: PPUSH
23473: LD_VAR 0 2
23477: PPUSH
23478: CALL 22962 0 2
23482: NOT
23483: IFFALSE 23487
// exit ;
23485: GO 24189
// pom := GetBase ( depot ) ;
23487: LD_ADDR_VAR 0 10
23491: PUSH
23492: LD_VAR 0 1
23496: PPUSH
23497: CALL_OW 274
23501: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23502: LD_ADDR_VAR 0 11
23506: PUSH
23507: LD_VAR 0 2
23511: PPUSH
23512: LD_VAR 0 1
23516: PPUSH
23517: CALL_OW 248
23521: PPUSH
23522: CALL_OW 450
23526: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23527: LD_VAR 0 10
23531: PPUSH
23532: LD_INT 1
23534: PPUSH
23535: CALL_OW 275
23539: PUSH
23540: LD_VAR 0 11
23544: PUSH
23545: LD_INT 1
23547: ARRAY
23548: GREATEREQUAL
23549: PUSH
23550: LD_VAR 0 10
23554: PPUSH
23555: LD_INT 2
23557: PPUSH
23558: CALL_OW 275
23562: PUSH
23563: LD_VAR 0 11
23567: PUSH
23568: LD_INT 2
23570: ARRAY
23571: GREATEREQUAL
23572: AND
23573: PUSH
23574: LD_VAR 0 10
23578: PPUSH
23579: LD_INT 3
23581: PPUSH
23582: CALL_OW 275
23586: PUSH
23587: LD_VAR 0 11
23591: PUSH
23592: LD_INT 3
23594: ARRAY
23595: GREATEREQUAL
23596: AND
23597: NOT
23598: IFFALSE 23602
// exit ;
23600: GO 24189
// if GetBType ( depot ) = b_depot then
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 266
23611: PUSH
23612: LD_INT 0
23614: EQUAL
23615: IFFALSE 23627
// dist := 28 else
23617: LD_ADDR_VAR 0 14
23621: PUSH
23622: LD_INT 28
23624: ST_TO_ADDR
23625: GO 23635
// dist := 36 ;
23627: LD_ADDR_VAR 0 14
23631: PUSH
23632: LD_INT 36
23634: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23635: LD_VAR 0 1
23639: PPUSH
23640: LD_VAR 0 3
23644: PPUSH
23645: LD_VAR 0 4
23649: PPUSH
23650: CALL_OW 297
23654: PUSH
23655: LD_VAR 0 14
23659: GREATER
23660: IFFALSE 23664
// exit ;
23662: GO 24189
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23664: LD_ADDR_VAR 0 12
23668: PUSH
23669: LD_VAR 0 2
23673: PPUSH
23674: LD_VAR 0 3
23678: PPUSH
23679: LD_VAR 0 4
23683: PPUSH
23684: LD_VAR 0 5
23688: PPUSH
23689: LD_VAR 0 1
23693: PPUSH
23694: CALL_OW 248
23698: PPUSH
23699: LD_INT 0
23701: PPUSH
23702: CALL 24194 0 6
23706: ST_TO_ADDR
// if not hexes then
23707: LD_VAR 0 12
23711: NOT
23712: IFFALSE 23716
// exit ;
23714: GO 24189
// hex := GetHexInfo ( x , y ) ;
23716: LD_ADDR_VAR 0 15
23720: PUSH
23721: LD_VAR 0 3
23725: PPUSH
23726: LD_VAR 0 4
23730: PPUSH
23731: CALL_OW 546
23735: ST_TO_ADDR
// if hex [ 1 ] then
23736: LD_VAR 0 15
23740: PUSH
23741: LD_INT 1
23743: ARRAY
23744: IFFALSE 23748
// exit ;
23746: GO 24189
// height := hex [ 2 ] ;
23748: LD_ADDR_VAR 0 13
23752: PUSH
23753: LD_VAR 0 15
23757: PUSH
23758: LD_INT 2
23760: ARRAY
23761: ST_TO_ADDR
// for i = 1 to hexes do
23762: LD_ADDR_VAR 0 7
23766: PUSH
23767: DOUBLE
23768: LD_INT 1
23770: DEC
23771: ST_TO_ADDR
23772: LD_VAR 0 12
23776: PUSH
23777: FOR_TO
23778: IFFALSE 24108
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
23780: LD_VAR 0 12
23784: PUSH
23785: LD_VAR 0 7
23789: ARRAY
23790: PUSH
23791: LD_INT 1
23793: ARRAY
23794: PPUSH
23795: LD_VAR 0 12
23799: PUSH
23800: LD_VAR 0 7
23804: ARRAY
23805: PUSH
23806: LD_INT 2
23808: ARRAY
23809: PPUSH
23810: CALL_OW 488
23814: NOT
23815: PUSH
23816: LD_VAR 0 12
23820: PUSH
23821: LD_VAR 0 7
23825: ARRAY
23826: PUSH
23827: LD_INT 1
23829: ARRAY
23830: PPUSH
23831: LD_VAR 0 12
23835: PUSH
23836: LD_VAR 0 7
23840: ARRAY
23841: PUSH
23842: LD_INT 2
23844: ARRAY
23845: PPUSH
23846: CALL_OW 428
23850: PUSH
23851: LD_INT 0
23853: GREATER
23854: OR
23855: PUSH
23856: LD_VAR 0 12
23860: PUSH
23861: LD_VAR 0 7
23865: ARRAY
23866: PUSH
23867: LD_INT 1
23869: ARRAY
23870: PPUSH
23871: LD_VAR 0 12
23875: PUSH
23876: LD_VAR 0 7
23880: ARRAY
23881: PUSH
23882: LD_INT 2
23884: ARRAY
23885: PPUSH
23886: CALL_OW 351
23890: OR
23891: IFFALSE 23897
// exit ;
23893: POP
23894: POP
23895: GO 24189
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23897: LD_ADDR_VAR 0 8
23901: PUSH
23902: LD_VAR 0 12
23906: PUSH
23907: LD_VAR 0 7
23911: ARRAY
23912: PUSH
23913: LD_INT 1
23915: ARRAY
23916: PPUSH
23917: LD_VAR 0 12
23921: PUSH
23922: LD_VAR 0 7
23926: ARRAY
23927: PUSH
23928: LD_INT 2
23930: ARRAY
23931: PPUSH
23932: CALL_OW 546
23936: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23937: LD_VAR 0 8
23941: PUSH
23942: LD_INT 1
23944: ARRAY
23945: PUSH
23946: LD_VAR 0 8
23950: PUSH
23951: LD_INT 2
23953: ARRAY
23954: PUSH
23955: LD_VAR 0 13
23959: PUSH
23960: LD_INT 2
23962: PLUS
23963: GREATER
23964: OR
23965: PUSH
23966: LD_VAR 0 8
23970: PUSH
23971: LD_INT 2
23973: ARRAY
23974: PUSH
23975: LD_VAR 0 13
23979: PUSH
23980: LD_INT 2
23982: MINUS
23983: LESS
23984: OR
23985: PUSH
23986: LD_VAR 0 8
23990: PUSH
23991: LD_INT 3
23993: ARRAY
23994: PUSH
23995: LD_INT 0
23997: PUSH
23998: LD_INT 8
24000: PUSH
24001: LD_INT 9
24003: PUSH
24004: LD_INT 10
24006: PUSH
24007: LD_INT 11
24009: PUSH
24010: LD_INT 12
24012: PUSH
24013: LD_INT 13
24015: PUSH
24016: LD_INT 16
24018: PUSH
24019: LD_INT 17
24021: PUSH
24022: LD_INT 18
24024: PUSH
24025: LD_INT 19
24027: PUSH
24028: LD_INT 20
24030: PUSH
24031: LD_INT 21
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: IN
24049: NOT
24050: OR
24051: PUSH
24052: LD_VAR 0 8
24056: PUSH
24057: LD_INT 5
24059: ARRAY
24060: NOT
24061: OR
24062: PUSH
24063: LD_VAR 0 8
24067: PUSH
24068: LD_INT 6
24070: ARRAY
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: LD_INT 7
24080: PUSH
24081: LD_INT 9
24083: PUSH
24084: LD_INT 10
24086: PUSH
24087: LD_INT 11
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: IN
24098: NOT
24099: OR
24100: IFFALSE 24106
// exit ;
24102: POP
24103: POP
24104: GO 24189
// end ;
24106: GO 23777
24108: POP
24109: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24110: LD_VAR 0 9
24114: PPUSH
24115: LD_VAR 0 3
24119: PPUSH
24120: LD_VAR 0 4
24124: PPUSH
24125: LD_INT 20
24127: PPUSH
24128: CALL 16135 0 4
24132: PUSH
24133: LD_INT 4
24135: ARRAY
24136: IFFALSE 24140
// exit ;
24138: GO 24189
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24140: LD_VAR 0 2
24144: PUSH
24145: LD_INT 29
24147: PUSH
24148: LD_INT 30
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: IN
24155: PUSH
24156: LD_VAR 0 3
24160: PPUSH
24161: LD_VAR 0 4
24165: PPUSH
24166: LD_VAR 0 9
24170: PPUSH
24171: CALL_OW 440
24175: NOT
24176: AND
24177: IFFALSE 24181
// exit ;
24179: GO 24189
// result := true ;
24181: LD_ADDR_VAR 0 6
24185: PUSH
24186: LD_INT 1
24188: ST_TO_ADDR
// end ;
24189: LD_VAR 0 6
24193: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24194: LD_INT 0
24196: PPUSH
24197: PPUSH
24198: PPUSH
24199: PPUSH
24200: PPUSH
24201: PPUSH
24202: PPUSH
24203: PPUSH
24204: PPUSH
24205: PPUSH
24206: PPUSH
24207: PPUSH
24208: PPUSH
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
24213: PPUSH
24214: PPUSH
24215: PPUSH
24216: PPUSH
24217: PPUSH
24218: PPUSH
24219: PPUSH
24220: PPUSH
24221: PPUSH
24222: PPUSH
24223: PPUSH
24224: PPUSH
24225: PPUSH
24226: PPUSH
24227: PPUSH
24228: PPUSH
24229: PPUSH
24230: PPUSH
24231: PPUSH
24232: PPUSH
24233: PPUSH
24234: PPUSH
24235: PPUSH
24236: PPUSH
24237: PPUSH
24238: PPUSH
24239: PPUSH
24240: PPUSH
24241: PPUSH
24242: PPUSH
24243: PPUSH
24244: PPUSH
24245: PPUSH
24246: PPUSH
24247: PPUSH
24248: PPUSH
24249: PPUSH
24250: PPUSH
24251: PPUSH
24252: PPUSH
24253: PPUSH
// result = [ ] ;
24254: LD_ADDR_VAR 0 7
24258: PUSH
24259: EMPTY
24260: ST_TO_ADDR
// temp_list = [ ] ;
24261: LD_ADDR_VAR 0 9
24265: PUSH
24266: EMPTY
24267: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24268: LD_VAR 0 4
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: LD_INT 1
24278: PUSH
24279: LD_INT 2
24281: PUSH
24282: LD_INT 3
24284: PUSH
24285: LD_INT 4
24287: PUSH
24288: LD_INT 5
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: IN
24299: NOT
24300: PUSH
24301: LD_VAR 0 1
24305: PUSH
24306: LD_INT 0
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: IN
24316: PUSH
24317: LD_VAR 0 5
24321: PUSH
24322: LD_INT 1
24324: PUSH
24325: LD_INT 2
24327: PUSH
24328: LD_INT 3
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: LIST
24335: IN
24336: NOT
24337: AND
24338: OR
24339: IFFALSE 24343
// exit ;
24341: GO 42734
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24343: LD_VAR 0 1
24347: PUSH
24348: LD_INT 6
24350: PUSH
24351: LD_INT 7
24353: PUSH
24354: LD_INT 8
24356: PUSH
24357: LD_INT 13
24359: PUSH
24360: LD_INT 12
24362: PUSH
24363: LD_INT 15
24365: PUSH
24366: LD_INT 11
24368: PUSH
24369: LD_INT 14
24371: PUSH
24372: LD_INT 10
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: IN
24386: IFFALSE 24396
// btype = b_lab ;
24388: LD_ADDR_VAR 0 1
24392: PUSH
24393: LD_INT 6
24395: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24396: LD_VAR 0 6
24400: PUSH
24401: LD_INT 0
24403: PUSH
24404: LD_INT 1
24406: PUSH
24407: LD_INT 2
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: LIST
24414: IN
24415: NOT
24416: PUSH
24417: LD_VAR 0 1
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: LD_INT 1
24427: PUSH
24428: LD_INT 2
24430: PUSH
24431: LD_INT 3
24433: PUSH
24434: LD_INT 6
24436: PUSH
24437: LD_INT 36
24439: PUSH
24440: LD_INT 4
24442: PUSH
24443: LD_INT 5
24445: PUSH
24446: LD_INT 31
24448: PUSH
24449: LD_INT 32
24451: PUSH
24452: LD_INT 33
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: IN
24468: NOT
24469: PUSH
24470: LD_VAR 0 6
24474: PUSH
24475: LD_INT 1
24477: EQUAL
24478: AND
24479: OR
24480: PUSH
24481: LD_VAR 0 1
24485: PUSH
24486: LD_INT 2
24488: PUSH
24489: LD_INT 3
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: IN
24496: NOT
24497: PUSH
24498: LD_VAR 0 6
24502: PUSH
24503: LD_INT 2
24505: EQUAL
24506: AND
24507: OR
24508: IFFALSE 24518
// mode = 0 ;
24510: LD_ADDR_VAR 0 6
24514: PUSH
24515: LD_INT 0
24517: ST_TO_ADDR
// case mode of 0 :
24518: LD_VAR 0 6
24522: PUSH
24523: LD_INT 0
24525: DOUBLE
24526: EQUAL
24527: IFTRUE 24531
24529: GO 35984
24531: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24532: LD_ADDR_VAR 0 11
24536: PUSH
24537: LD_INT 0
24539: PUSH
24540: LD_INT 0
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: LD_INT 1
24552: NEG
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: EMPTY
24575: LIST
24576: LIST
24577: PUSH
24578: LD_INT 0
24580: PUSH
24581: LD_INT 1
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 1
24601: NEG
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: NEG
24614: PUSH
24615: LD_INT 2
24617: NEG
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 0
24625: PUSH
24626: LD_INT 2
24628: NEG
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: LD_INT 1
24639: NEG
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: LD_INT 2
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: LD_INT 2
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 1
24678: PUSH
24679: LD_INT 3
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: LD_INT 3
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: PUSH
24700: LD_INT 2
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24725: LD_ADDR_VAR 0 12
24729: PUSH
24730: LD_INT 0
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: LD_INT 1
24745: NEG
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 1
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 1
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 0
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: NEG
24784: PUSH
24785: LD_INT 0
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 1
24794: NEG
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: LD_INT 1
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 2
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: LD_INT 1
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 1
24837: NEG
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 2
24848: NEG
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: NEG
24860: PUSH
24861: LD_INT 1
24863: NEG
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 2
24871: NEG
24872: PUSH
24873: LD_INT 1
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 3
24882: NEG
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 3
24893: NEG
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24921: LD_ADDR_VAR 0 13
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: LD_INT 1
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: LD_INT 1
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 0
24969: PUSH
24970: LD_INT 1
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 1
24990: NEG
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 1
25002: NEG
25003: PUSH
25004: LD_INT 2
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 2
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 2
25024: PUSH
25025: LD_INT 2
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: LD_INT 2
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 2
25044: NEG
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 2
25056: NEG
25057: PUSH
25058: LD_INT 2
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 2
25068: NEG
25069: PUSH
25070: LD_INT 3
25072: NEG
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 3
25080: NEG
25081: PUSH
25082: LD_INT 2
25084: NEG
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 3
25092: NEG
25093: PUSH
25094: LD_INT 3
25096: NEG
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: LIST
25117: LIST
25118: LIST
25119: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25120: LD_ADDR_VAR 0 14
25124: PUSH
25125: LD_INT 0
25127: PUSH
25128: LD_INT 0
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 0
25137: PUSH
25138: LD_INT 1
25140: NEG
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: LD_INT 0
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: LD_INT 1
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 0
25168: PUSH
25169: LD_INT 1
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: NEG
25190: PUSH
25191: LD_INT 1
25193: NEG
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: LD_INT 2
25205: NEG
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: LD_INT 2
25216: NEG
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: PUSH
25225: LD_INT 1
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 1
25235: PUSH
25236: LD_INT 2
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 0
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 1
25255: NEG
25256: PUSH
25257: LD_INT 1
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: PUSH
25268: LD_INT 3
25270: NEG
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: LD_INT 3
25281: NEG
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25316: LD_ADDR_VAR 0 15
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: LD_INT 1
25336: NEG
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 1
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: NEG
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 1
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 2
25408: PUSH
25409: LD_INT 0
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 2
25418: PUSH
25419: LD_INT 1
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: NEG
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 2
25439: NEG
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 2
25450: NEG
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 2
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 3
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 3
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: LIST
25506: LIST
25507: LIST
25508: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25509: LD_ADDR_VAR 0 16
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 0
25526: PUSH
25527: LD_INT 1
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 1
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: NEG
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: NEG
25579: PUSH
25580: LD_INT 1
25582: NEG
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: NEG
25591: PUSH
25592: LD_INT 2
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 2
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 2
25612: PUSH
25613: LD_INT 2
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 2
25632: NEG
25633: PUSH
25634: LD_INT 1
25636: NEG
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 2
25644: NEG
25645: PUSH
25646: LD_INT 2
25648: NEG
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 3
25656: PUSH
25657: LD_INT 2
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 3
25666: PUSH
25667: LD_INT 3
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 2
25676: PUSH
25677: LD_INT 3
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25702: LD_ADDR_VAR 0 17
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: LD_INT 0
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 0
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: LD_INT 0
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: LD_INT 1
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: LD_INT 1
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 1
25760: NEG
25761: PUSH
25762: LD_INT 0
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 1
25771: NEG
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 1
25783: NEG
25784: PUSH
25785: LD_INT 2
25787: NEG
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 0
25795: PUSH
25796: LD_INT 2
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: PUSH
25807: LD_INT 1
25809: NEG
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 2
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 2
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: LD_INT 2
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: LD_INT 2
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 2
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 1
25867: NEG
25868: PUSH
25869: LD_INT 1
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 2
25878: NEG
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 2
25889: NEG
25890: PUSH
25891: LD_INT 1
25893: NEG
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 2
25901: NEG
25902: PUSH
25903: LD_INT 2
25905: NEG
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25932: LD_ADDR_VAR 0 18
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 0
25949: PUSH
25950: LD_INT 1
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: LD_INT 0
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: LD_INT 1
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: LD_INT 0
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: NEG
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 1
26013: NEG
26014: PUSH
26015: LD_INT 2
26017: NEG
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 0
26025: PUSH
26026: LD_INT 2
26028: NEG
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 1
26036: PUSH
26037: LD_INT 1
26039: NEG
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 2
26047: PUSH
26048: LD_INT 0
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 2
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 2
26067: PUSH
26068: LD_INT 2
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: LD_INT 2
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 0
26087: PUSH
26088: LD_INT 2
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 2
26108: NEG
26109: PUSH
26110: LD_INT 0
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 2
26119: NEG
26120: PUSH
26121: LD_INT 1
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 2
26131: NEG
26132: PUSH
26133: LD_INT 2
26135: NEG
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26162: LD_ADDR_VAR 0 19
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: LD_INT 1
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 1
26243: NEG
26244: PUSH
26245: LD_INT 2
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: LD_INT 2
26258: NEG
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 1
26266: PUSH
26267: LD_INT 1
26269: NEG
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 2
26287: PUSH
26288: LD_INT 1
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 2
26297: PUSH
26298: LD_INT 2
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: LD_INT 2
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: LD_INT 2
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 2
26338: NEG
26339: PUSH
26340: LD_INT 0
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 2
26349: NEG
26350: PUSH
26351: LD_INT 1
26353: NEG
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 2
26361: NEG
26362: PUSH
26363: LD_INT 2
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26392: LD_ADDR_VAR 0 20
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: LD_INT 1
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 1
26461: NEG
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 1
26473: NEG
26474: PUSH
26475: LD_INT 2
26477: NEG
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: LD_INT 2
26488: NEG
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 1
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: LD_INT 0
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 2
26517: PUSH
26518: LD_INT 1
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 2
26527: PUSH
26528: LD_INT 2
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: LD_INT 2
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 0
26547: PUSH
26548: LD_INT 2
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 1
26557: NEG
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 2
26568: NEG
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 2
26579: NEG
26580: PUSH
26581: LD_INT 1
26583: NEG
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: PUSH
26589: LD_INT 2
26591: NEG
26592: PUSH
26593: LD_INT 2
26595: NEG
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26622: LD_ADDR_VAR 0 21
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: LD_INT 1
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 0
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: LD_INT 1
26695: NEG
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 1
26703: NEG
26704: PUSH
26705: LD_INT 2
26707: NEG
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: LD_INT 2
26718: NEG
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 1
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 2
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 2
26757: PUSH
26758: LD_INT 2
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: LD_INT 2
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: LD_INT 2
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 2
26798: NEG
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 2
26809: NEG
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 2
26821: NEG
26822: PUSH
26823: LD_INT 2
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26852: LD_ADDR_VAR 0 22
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 1
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: LD_INT 1
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: LD_INT 0
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: LD_INT 1
26925: NEG
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: LD_INT 2
26937: NEG
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 0
26945: PUSH
26946: LD_INT 2
26948: NEG
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: LD_INT 1
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 2
26977: PUSH
26978: LD_INT 1
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 2
26987: PUSH
26988: LD_INT 2
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: LD_INT 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 2
27028: NEG
27029: PUSH
27030: LD_INT 0
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 2
27039: NEG
27040: PUSH
27041: LD_INT 1
27043: NEG
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 2
27051: NEG
27052: PUSH
27053: LD_INT 2
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27082: LD_ADDR_VAR 0 23
27086: PUSH
27087: LD_INT 0
27089: PUSH
27090: LD_INT 0
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 0
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 1
27110: PUSH
27111: LD_INT 0
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: LD_INT 1
27155: NEG
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: LD_INT 2
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 0
27175: PUSH
27176: LD_INT 2
27178: NEG
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: LD_INT 1
27189: NEG
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 2
27197: PUSH
27198: LD_INT 0
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 2
27207: PUSH
27208: LD_INT 1
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 2
27217: PUSH
27218: LD_INT 2
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 1
27227: PUSH
27228: LD_INT 2
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: LD_INT 2
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: LD_INT 1
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 2
27258: NEG
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: PUSH
27267: LD_INT 2
27269: NEG
27270: PUSH
27271: LD_INT 1
27273: NEG
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 2
27281: NEG
27282: PUSH
27283: LD_INT 2
27285: NEG
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 2
27293: NEG
27294: PUSH
27295: LD_INT 3
27297: NEG
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: LD_INT 3
27309: NEG
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 1
27317: PUSH
27318: LD_INT 2
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 2
27328: PUSH
27329: LD_INT 1
27331: NEG
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27362: LD_ADDR_VAR 0 24
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: LD_INT 0
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 1
27431: NEG
27432: PUSH
27433: LD_INT 1
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: LD_INT 2
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 0
27455: PUSH
27456: LD_INT 2
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 2
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 2
27487: PUSH
27488: LD_INT 1
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 2
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 0
27517: PUSH
27518: LD_INT 2
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: LD_INT 1
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 2
27538: NEG
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 2
27549: NEG
27550: PUSH
27551: LD_INT 1
27553: NEG
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: PUSH
27559: LD_INT 2
27561: NEG
27562: PUSH
27563: LD_INT 2
27565: NEG
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: LD_INT 2
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 2
27584: PUSH
27585: LD_INT 1
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 3
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 3
27605: PUSH
27606: LD_INT 2
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27638: LD_ADDR_VAR 0 25
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 0
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 1
27696: NEG
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: NEG
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 1
27719: NEG
27720: PUSH
27721: LD_INT 2
27723: NEG
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: LD_INT 2
27734: NEG
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: LD_INT 1
27745: NEG
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 2
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 2
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 1
27783: PUSH
27784: LD_INT 2
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 0
27793: PUSH
27794: LD_INT 2
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: LD_INT 1
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 2
27814: NEG
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 2
27825: NEG
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 2
27837: NEG
27838: PUSH
27839: LD_INT 2
27841: NEG
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 3
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 3
27859: PUSH
27860: LD_INT 2
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 2
27869: PUSH
27870: LD_INT 3
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 1
27879: PUSH
27880: LD_INT 3
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27912: LD_ADDR_VAR 0 26
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 0
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 0
27960: PUSH
27961: LD_INT 1
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: NEG
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: LD_INT 1
27985: NEG
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: LD_INT 2
27997: NEG
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: LD_INT 2
28008: NEG
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: LD_INT 1
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 2
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: LD_INT 2
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 1
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 0
28067: PUSH
28068: LD_INT 2
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: LD_INT 1
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PUSH
28086: LD_INT 2
28088: NEG
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 2
28099: NEG
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 2
28111: NEG
28112: PUSH
28113: LD_INT 2
28115: NEG
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 2
28123: PUSH
28124: LD_INT 3
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: LD_INT 3
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: LD_INT 2
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 2
28154: NEG
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: EMPTY
28160: LIST
28161: LIST
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28188: LD_ADDR_VAR 0 27
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: LD_INT 1
28208: NEG
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: LD_INT 0
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: LD_INT 0
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: PUSH
28255: LD_INT 1
28257: NEG
28258: PUSH
28259: LD_INT 1
28261: NEG
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: LD_INT 2
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: LD_INT 2
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: LD_INT 1
28295: NEG
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: LD_INT 1
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: LD_INT 2
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: LD_INT 1
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 2
28375: NEG
28376: PUSH
28377: LD_INT 1
28379: NEG
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 2
28387: NEG
28388: PUSH
28389: LD_INT 2
28391: NEG
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 1
28399: NEG
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 2
28410: NEG
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 3
28421: NEG
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 3
28433: NEG
28434: PUSH
28435: LD_INT 2
28437: NEG
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28468: LD_ADDR_VAR 0 28
28472: PUSH
28473: LD_INT 0
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 1
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: LD_INT 0
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: LD_INT 2
28553: NEG
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 0
28561: PUSH
28562: LD_INT 2
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 2
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 2
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 1
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 0
28623: PUSH
28624: LD_INT 2
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 1
28633: NEG
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 2
28644: NEG
28645: PUSH
28646: LD_INT 0
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 2
28655: NEG
28656: PUSH
28657: LD_INT 1
28659: NEG
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 2
28667: NEG
28668: PUSH
28669: LD_INT 2
28671: NEG
28672: PUSH
28673: EMPTY
28674: LIST
28675: LIST
28676: PUSH
28677: LD_INT 2
28679: NEG
28680: PUSH
28681: LD_INT 3
28683: NEG
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 1
28691: NEG
28692: PUSH
28693: LD_INT 3
28695: NEG
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 3
28703: NEG
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 3
28715: NEG
28716: PUSH
28717: LD_INT 2
28719: NEG
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28750: LD_ADDR_VAR 0 29
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: LD_INT 0
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: LD_INT 1
28770: NEG
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 1
28778: PUSH
28779: LD_INT 0
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 1
28808: NEG
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 1
28819: NEG
28820: PUSH
28821: LD_INT 1
28823: NEG
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: LD_INT 2
28835: NEG
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 2
28846: NEG
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 1
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 2
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 2
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: LD_INT 2
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: LD_INT 2
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 1
28905: NEG
28906: PUSH
28907: LD_INT 1
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 2
28916: NEG
28917: PUSH
28918: LD_INT 1
28920: NEG
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 2
28928: NEG
28929: PUSH
28930: LD_INT 2
28932: NEG
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 2
28940: NEG
28941: PUSH
28942: LD_INT 3
28944: NEG
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 2
28952: PUSH
28953: LD_INT 1
28955: NEG
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 3
28963: PUSH
28964: LD_INT 1
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PUSH
28971: LD_INT 1
28973: PUSH
28974: LD_INT 3
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: LD_INT 2
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: LD_INT 3
28994: NEG
28995: PUSH
28996: LD_INT 2
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29029: LD_ADDR_VAR 0 30
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: LD_INT 0
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 0
29046: PUSH
29047: LD_INT 1
29049: NEG
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 1
29057: PUSH
29058: LD_INT 0
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: PUSH
29068: LD_INT 1
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: LD_INT 0
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 1
29098: NEG
29099: PUSH
29100: LD_INT 1
29102: NEG
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: LD_INT 2
29114: NEG
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: LD_INT 2
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: LD_INT 1
29136: NEG
29137: PUSH
29138: EMPTY
29139: LIST
29140: LIST
29141: PUSH
29142: LD_INT 2
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 2
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: LD_INT 2
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 2
29195: NEG
29196: PUSH
29197: LD_INT 0
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 2
29206: NEG
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 1
29218: NEG
29219: PUSH
29220: LD_INT 3
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: LD_INT 2
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 3
29241: PUSH
29242: LD_INT 2
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: LD_INT 3
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 2
29261: NEG
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 3
29272: NEG
29273: PUSH
29274: LD_INT 1
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29307: LD_ADDR_VAR 0 31
29311: PUSH
29312: LD_INT 0
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 1
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 1
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: LD_INT 0
29355: PUSH
29356: LD_INT 1
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 1
29365: NEG
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 1
29376: NEG
29377: PUSH
29378: LD_INT 1
29380: NEG
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 1
29388: NEG
29389: PUSH
29390: LD_INT 2
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 1
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 2
29411: PUSH
29412: LD_INT 0
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 2
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 2
29431: PUSH
29432: LD_INT 2
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 1
29441: PUSH
29442: LD_INT 2
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 2
29472: NEG
29473: PUSH
29474: LD_INT 1
29476: NEG
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 2
29484: NEG
29485: PUSH
29486: LD_INT 2
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 2
29496: NEG
29497: PUSH
29498: LD_INT 3
29500: NEG
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: PUSH
29509: LD_INT 1
29511: NEG
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 3
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: LD_INT 3
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: LD_INT 2
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 3
29550: NEG
29551: PUSH
29552: LD_INT 2
29554: NEG
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29585: LD_ADDR_VAR 0 32
29589: PUSH
29590: LD_INT 0
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: LD_INT 1
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: LD_INT 0
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 1
29623: PUSH
29624: LD_INT 1
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: LD_INT 1
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: LD_INT 1
29643: NEG
29644: PUSH
29645: LD_INT 0
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 1
29654: NEG
29655: PUSH
29656: LD_INT 1
29658: NEG
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: NEG
29667: PUSH
29668: LD_INT 2
29670: NEG
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 0
29678: PUSH
29679: LD_INT 2
29681: NEG
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 2
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 2
29710: PUSH
29711: LD_INT 2
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 2
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 0
29730: PUSH
29731: LD_INT 2
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: LD_INT 1
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 2
29751: NEG
29752: PUSH
29753: LD_INT 0
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: NEG
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 1
29774: NEG
29775: PUSH
29776: LD_INT 3
29778: NEG
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 1
29786: PUSH
29787: LD_INT 2
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 3
29797: PUSH
29798: LD_INT 2
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 2
29817: NEG
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 3
29828: NEG
29829: PUSH
29830: LD_INT 1
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29863: LD_ADDR_VAR 0 33
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: LD_INT 0
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 0
29880: PUSH
29881: LD_INT 1
29883: NEG
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: LD_INT 0
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: LD_INT 1
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: LD_INT 0
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 1
29932: NEG
29933: PUSH
29934: LD_INT 1
29936: NEG
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 1
29944: NEG
29945: PUSH
29946: LD_INT 2
29948: NEG
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 1
29956: PUSH
29957: LD_INT 1
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 2
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 2
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: LD_INT 2
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: LD_INT 1
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 2
30018: NEG
30019: PUSH
30020: LD_INT 0
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 2
30029: NEG
30030: PUSH
30031: LD_INT 1
30033: NEG
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 2
30041: NEG
30042: PUSH
30043: LD_INT 2
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 2
30053: NEG
30054: PUSH
30055: LD_INT 3
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 3
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: NEG
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 3
30107: NEG
30108: PUSH
30109: LD_INT 2
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30142: LD_ADDR_VAR 0 34
30146: PUSH
30147: LD_INT 0
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: LD_INT 1
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 0
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: LD_INT 2
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: LD_INT 2
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 1
30246: PUSH
30247: LD_INT 1
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 2
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 2
30267: PUSH
30268: LD_INT 2
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: PUSH
30278: LD_INT 2
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 1
30287: NEG
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 2
30298: NEG
30299: PUSH
30300: LD_INT 0
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 2
30309: NEG
30310: PUSH
30311: LD_INT 1
30313: NEG
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 2
30321: NEG
30322: PUSH
30323: LD_INT 2
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: PUSH
30335: LD_INT 3
30337: NEG
30338: PUSH
30339: EMPTY
30340: LIST
30341: LIST
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: LD_INT 2
30348: NEG
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: LD_INT 3
30356: PUSH
30357: LD_INT 2
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 2
30366: PUSH
30367: LD_INT 3
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 2
30376: NEG
30377: PUSH
30378: LD_INT 1
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 3
30387: NEG
30388: PUSH
30389: LD_INT 1
30391: NEG
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30422: LD_ADDR_VAR 0 35
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: LD_INT 0
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: LD_INT 0
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: LD_INT 1
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 1
30480: NEG
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 1
30491: NEG
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 2
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 2
30513: NEG
30514: PUSH
30515: LD_INT 1
30517: NEG
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30534: LD_ADDR_VAR 0 36
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: LD_INT 1
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: NEG
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 1
30603: NEG
30604: PUSH
30605: LD_INT 1
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: LD_INT 2
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 1
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30646: LD_ADDR_VAR 0 37
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: LD_INT 0
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: LD_INT 0
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: NEG
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: NEG
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: LD_INT 1
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 1
30738: NEG
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: EMPTY
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30758: LD_ADDR_VAR 0 38
30762: PUSH
30763: LD_INT 0
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PUSH
30784: LD_INT 1
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 1
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: LD_INT 1
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: LD_INT 0
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 1
30827: NEG
30828: PUSH
30829: LD_INT 1
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 2
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 2
30849: NEG
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30870: LD_ADDR_VAR 0 39
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: LD_INT 0
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 0
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 1
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: LD_INT 1
30911: PUSH
30912: EMPTY
30913: LIST
30914: LIST
30915: PUSH
30916: LD_INT 0
30918: PUSH
30919: LD_INT 1
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: LD_INT 1
30928: NEG
30929: PUSH
30930: LD_INT 0
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 1
30951: NEG
30952: PUSH
30953: LD_INT 2
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 1
30963: PUSH
30964: LD_INT 2
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30982: LD_ADDR_VAR 0 40
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: LD_INT 0
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 0
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 0
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: LD_INT 1
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: NEG
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31094: LD_ADDR_VAR 0 41
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 0
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 1
31152: NEG
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 1
31163: NEG
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: NEG
31176: PUSH
31177: LD_INT 2
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 1
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 2
31208: PUSH
31209: LD_INT 1
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 2
31218: PUSH
31219: LD_INT 2
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 2
31249: NEG
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 2
31260: NEG
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 2
31272: NEG
31273: PUSH
31274: LD_INT 2
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 2
31284: NEG
31285: PUSH
31286: LD_INT 3
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 2
31296: PUSH
31297: LD_INT 1
31299: NEG
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 3
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 3
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 3
31327: PUSH
31328: LD_INT 2
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 3
31337: PUSH
31338: LD_INT 3
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: LD_INT 3
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 2
31357: NEG
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 3
31368: NEG
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 3
31379: NEG
31380: PUSH
31381: LD_INT 1
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 3
31391: NEG
31392: PUSH
31393: LD_INT 2
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 3
31403: NEG
31404: PUSH
31405: LD_INT 3
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31444: LD_ADDR_VAR 0 42
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: LD_INT 1
31464: NEG
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: LD_INT 0
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 1
31482: PUSH
31483: LD_INT 1
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 1
31502: NEG
31503: PUSH
31504: LD_INT 0
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 1
31513: NEG
31514: PUSH
31515: LD_INT 1
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 2
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: LD_INT 2
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: LD_INT 2
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 1
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: LD_INT 2
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 1
31599: NEG
31600: PUSH
31601: LD_INT 1
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 2
31610: NEG
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 2
31622: NEG
31623: PUSH
31624: LD_INT 2
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 2
31634: NEG
31635: PUSH
31636: LD_INT 3
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: LD_INT 3
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: LD_INT 3
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: LD_INT 2
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 3
31680: PUSH
31681: LD_INT 2
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 3
31690: PUSH
31691: LD_INT 3
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: LD_INT 3
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: PUSH
31711: LD_INT 3
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 0
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: NEG
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 3
31741: NEG
31742: PUSH
31743: LD_INT 2
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 3
31753: NEG
31754: PUSH
31755: LD_INT 3
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31794: LD_ADDR_VAR 0 43
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: LD_INT 1
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: LD_INT 1
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 1
31863: NEG
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: LD_INT 2
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 2
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 2
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: LD_INT 1
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: PUSH
31930: LD_INT 2
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 2
31960: NEG
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 2
31971: NEG
31972: PUSH
31973: LD_INT 1
31975: NEG
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 1
31983: NEG
31984: PUSH
31985: LD_INT 3
31987: NEG
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: LD_INT 3
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: PUSH
32007: LD_INT 2
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: LD_INT 1
32020: NEG
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 3
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 3
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: LD_INT 3
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 0
32058: PUSH
32059: LD_INT 3
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 1
32068: NEG
32069: PUSH
32070: LD_INT 2
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 2
32079: NEG
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 3
32090: NEG
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 3
32101: NEG
32102: PUSH
32103: LD_INT 1
32105: NEG
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32142: LD_ADDR_VAR 0 44
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 0
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 1
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: LD_INT 1
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 1
32200: NEG
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: NEG
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 1
32223: NEG
32224: PUSH
32225: LD_INT 2
32227: NEG
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PUSH
32233: LD_INT 1
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: LD_INT 2
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 2
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 2
32266: PUSH
32267: LD_INT 2
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 1
32286: NEG
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 2
32297: NEG
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 2
32308: NEG
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 2
32320: NEG
32321: PUSH
32322: LD_INT 2
32324: NEG
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: NEG
32333: PUSH
32334: LD_INT 3
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 3
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 3
32365: PUSH
32366: LD_INT 1
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 3
32375: PUSH
32376: LD_INT 2
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: LD_INT 3
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 2
32395: PUSH
32396: LD_INT 3
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 2
32405: NEG
32406: PUSH
32407: LD_INT 1
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 3
32416: NEG
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 3
32427: NEG
32428: PUSH
32429: LD_INT 1
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 3
32439: NEG
32440: PUSH
32441: LD_INT 2
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 3
32451: NEG
32452: PUSH
32453: LD_INT 3
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32492: LD_ADDR_VAR 0 45
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 1
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: LD_INT 1
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 1
32550: NEG
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 1
32561: NEG
32562: PUSH
32563: LD_INT 1
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 1
32573: NEG
32574: PUSH
32575: LD_INT 2
32577: NEG
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: LD_INT 2
32588: NEG
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: LD_INT 1
32599: NEG
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 2
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 2
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: LD_INT 2
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 1
32647: NEG
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 2
32658: NEG
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 2
32670: NEG
32671: PUSH
32672: LD_INT 2
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 2
32682: NEG
32683: PUSH
32684: LD_INT 3
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: LD_INT 3
32698: NEG
32699: PUSH
32700: EMPTY
32701: LIST
32702: LIST
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: LD_INT 3
32709: NEG
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: LD_INT 2
32720: NEG
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 3
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 3
32738: PUSH
32739: LD_INT 3
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: LD_INT 3
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: LD_INT 3
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: LD_INT 3
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 3
32789: NEG
32790: PUSH
32791: LD_INT 2
32793: NEG
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 3
32801: NEG
32802: PUSH
32803: LD_INT 3
32805: NEG
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32842: LD_ADDR_VAR 0 46
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 1
32911: NEG
32912: PUSH
32913: LD_INT 1
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: LD_INT 2
32927: NEG
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 0
32935: PUSH
32936: LD_INT 2
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 1
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 2
32957: PUSH
32958: LD_INT 0
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: LD_INT 1
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: LD_INT 2
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: LD_INT 2
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 1
32997: NEG
32998: PUSH
32999: LD_INT 1
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 2
33008: NEG
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 2
33019: NEG
33020: PUSH
33021: LD_INT 1
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 1
33031: NEG
33032: PUSH
33033: LD_INT 3
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: LD_INT 3
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: LD_INT 2
33057: NEG
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 2
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 3
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 3
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: LD_INT 3
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 0
33106: PUSH
33107: LD_INT 3
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 1
33116: NEG
33117: PUSH
33118: LD_INT 2
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 2
33127: NEG
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 3
33138: NEG
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 3
33149: NEG
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33190: LD_ADDR_VAR 0 47
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 0
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 1
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: LD_INT 1
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 1
33248: NEG
33249: PUSH
33250: LD_INT 0
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 1
33259: NEG
33260: PUSH
33261: LD_INT 1
33263: NEG
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 1
33271: NEG
33272: PUSH
33273: LD_INT 2
33275: NEG
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: LD_INT 2
33286: NEG
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 1
33294: PUSH
33295: LD_INT 1
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 2
33305: NEG
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 2
33317: NEG
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33341: LD_ADDR_VAR 0 48
33345: PUSH
33346: LD_INT 0
33348: PUSH
33349: LD_INT 0
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: LD_INT 1
33361: NEG
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: LD_INT 0
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: NEG
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: NEG
33423: PUSH
33424: LD_INT 2
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: LD_INT 2
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 1
33445: PUSH
33446: LD_INT 1
33448: NEG
33449: PUSH
33450: EMPTY
33451: LIST
33452: LIST
33453: PUSH
33454: LD_INT 2
33456: PUSH
33457: LD_INT 0
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 2
33466: PUSH
33467: LD_INT 1
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33488: LD_ADDR_VAR 0 49
33492: PUSH
33493: LD_INT 0
33495: PUSH
33496: LD_INT 0
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: LD_INT 1
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: LD_INT 0
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: LD_INT 1
33561: NEG
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: LD_INT 1
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: LD_INT 2
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33632: LD_ADDR_VAR 0 50
33636: PUSH
33637: LD_INT 0
33639: PUSH
33640: LD_INT 0
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 0
33649: PUSH
33650: LD_INT 1
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: NEG
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 1
33733: PUSH
33734: LD_INT 2
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: LD_INT 2
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 1
33753: NEG
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
33776: LD_ADDR_VAR 0 51
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: LD_INT 0
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 0
33793: PUSH
33794: LD_INT 1
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: LD_INT 1
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: LD_INT 0
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 1
33845: NEG
33846: PUSH
33847: LD_INT 1
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 1
33877: NEG
33878: PUSH
33879: LD_INT 1
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 2
33888: NEG
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 2
33899: NEG
33900: PUSH
33901: LD_INT 1
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33923: LD_ADDR_VAR 0 52
33927: PUSH
33928: LD_INT 0
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 0
33940: PUSH
33941: LD_INT 1
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 0
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: LD_INT 0
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 1
33992: NEG
33993: PUSH
33994: LD_INT 1
33996: NEG
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: LD_INT 2
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 2
34027: NEG
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 2
34038: NEG
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: NEG
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34074: LD_ADDR_VAR 0 53
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: LD_INT 1
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: LD_INT 1
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 0
34122: PUSH
34123: LD_INT 1
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 1
34132: NEG
34133: PUSH
34134: LD_INT 0
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: LD_INT 1
34147: NEG
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: LD_INT 2
34159: NEG
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 0
34167: PUSH
34168: LD_INT 2
34170: NEG
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 1
34178: PUSH
34179: LD_INT 1
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 2
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 2
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 2
34209: PUSH
34210: LD_INT 2
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: LD_INT 2
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: LD_INT 2
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 2
34250: NEG
34251: PUSH
34252: LD_INT 0
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 2
34261: NEG
34262: PUSH
34263: LD_INT 1
34265: NEG
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 2
34273: NEG
34274: PUSH
34275: LD_INT 2
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34304: LD_ADDR_VAR 0 54
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: LD_INT 0
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 0
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 1
34332: PUSH
34333: LD_INT 0
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: LD_INT 1
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: LD_INT 1
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: NEG
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 1
34373: NEG
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: LD_INT 2
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 0
34397: PUSH
34398: LD_INT 2
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: LD_INT 1
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 2
34419: PUSH
34420: LD_INT 0
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: LD_INT 2
34429: PUSH
34430: LD_INT 1
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: LD_INT 2
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: LD_INT 2
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 1
34469: NEG
34470: PUSH
34471: LD_INT 1
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 2
34480: NEG
34481: PUSH
34482: LD_INT 0
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 2
34491: NEG
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 2
34503: NEG
34504: PUSH
34505: LD_INT 2
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34534: LD_ADDR_VAR 0 55
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: NEG
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: NEG
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 1
34615: NEG
34616: PUSH
34617: LD_INT 2
34619: NEG
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 0
34627: PUSH
34628: LD_INT 2
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 2
34669: PUSH
34670: LD_INT 2
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: LD_INT 2
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 2
34710: NEG
34711: PUSH
34712: LD_INT 0
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 2
34721: NEG
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 2
34733: NEG
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34764: LD_ADDR_VAR 0 56
34768: PUSH
34769: LD_INT 0
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 0
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: LD_INT 0
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: LD_INT 1
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: NEG
34834: PUSH
34835: LD_INT 1
34837: NEG
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 1
34845: NEG
34846: PUSH
34847: LD_INT 2
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: LD_INT 2
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: LD_INT 1
34871: NEG
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 2
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 2
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: LD_INT 2
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: LD_INT 2
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: NEG
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 2
34951: NEG
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 2
34963: NEG
34964: PUSH
34965: LD_INT 2
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34994: LD_ADDR_VAR 0 57
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 0
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: LD_INT 1
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: LD_INT 2
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: LD_INT 2
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 2
35109: PUSH
35110: LD_INT 0
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 2
35119: PUSH
35120: LD_INT 1
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 2
35129: PUSH
35130: LD_INT 2
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: LD_INT 2
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: LD_INT 2
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 2
35170: NEG
35171: PUSH
35172: LD_INT 0
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 2
35193: NEG
35194: PUSH
35195: LD_INT 2
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35224: LD_ADDR_VAR 0 58
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: LD_INT 0
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 0
35241: PUSH
35242: LD_INT 1
35244: NEG
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: LD_INT 1
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: LD_INT 1
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 1
35305: NEG
35306: PUSH
35307: LD_INT 2
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 2
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: LD_INT 2
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 1
35369: PUSH
35370: LD_INT 2
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: LD_INT 2
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 2
35400: NEG
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 2
35411: NEG
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 2
35423: NEG
35424: PUSH
35425: LD_INT 2
35427: NEG
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35454: LD_ADDR_VAR 0 59
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 0
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: PUSH
35483: LD_INT 0
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 0
35502: PUSH
35503: LD_INT 1
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: LD_INT 0
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: NEG
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35542: LD_ADDR_VAR 0 60
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: LD_INT 1
35562: NEG
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 1
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 1
35600: NEG
35601: PUSH
35602: LD_INT 0
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35630: LD_ADDR_VAR 0 61
35634: PUSH
35635: LD_INT 0
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 1
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: NEG
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35718: LD_ADDR_VAR 0 62
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: EMPTY
35730: LIST
35731: LIST
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: LD_INT 1
35738: NEG
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 1
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 1
35776: NEG
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35806: LD_ADDR_VAR 0 63
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35894: LD_ADDR_VAR 0 64
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: LD_INT 0
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: NEG
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: ST_TO_ADDR
// end ; 1 :
35982: GO 41879
35984: LD_INT 1
35986: DOUBLE
35987: EQUAL
35988: IFTRUE 35992
35990: GO 38615
35992: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35993: LD_ADDR_VAR 0 11
35997: PUSH
35998: LD_INT 1
36000: NEG
36001: PUSH
36002: LD_INT 3
36004: NEG
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 3
36015: NEG
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 2
36026: NEG
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36037: LD_ADDR_VAR 0 12
36041: PUSH
36042: LD_INT 2
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 3
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 3
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: LIST
36077: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36078: LD_ADDR_VAR 0 13
36082: PUSH
36083: LD_INT 3
36085: PUSH
36086: LD_INT 2
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 3
36095: PUSH
36096: LD_INT 3
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: LD_INT 3
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: LIST
36117: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36118: LD_ADDR_VAR 0 14
36122: PUSH
36123: LD_INT 1
36125: PUSH
36126: LD_INT 3
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: LD_INT 3
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 1
36145: NEG
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: LIST
36158: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36159: LD_ADDR_VAR 0 15
36163: PUSH
36164: LD_INT 2
36166: NEG
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 3
36177: NEG
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 3
36188: NEG
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36203: LD_ADDR_VAR 0 16
36207: PUSH
36208: LD_INT 2
36210: NEG
36211: PUSH
36212: LD_INT 3
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 3
36222: NEG
36223: PUSH
36224: LD_INT 2
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 3
36234: NEG
36235: PUSH
36236: LD_INT 3
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: LIST
36248: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36249: LD_ADDR_VAR 0 17
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: LD_INT 3
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: LD_INT 3
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: PUSH
36280: LD_INT 2
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: LIST
36292: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36293: LD_ADDR_VAR 0 18
36297: PUSH
36298: LD_INT 2
36300: PUSH
36301: LD_INT 1
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 3
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 3
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: LIST
36333: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36334: LD_ADDR_VAR 0 19
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: LD_INT 2
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 3
36351: PUSH
36352: LD_INT 3
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: LD_INT 3
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: LIST
36373: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36374: LD_ADDR_VAR 0 20
36378: PUSH
36379: LD_INT 1
36381: PUSH
36382: LD_INT 3
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: LD_INT 3
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: LD_INT 2
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36415: LD_ADDR_VAR 0 21
36419: PUSH
36420: LD_INT 2
36422: NEG
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 3
36433: NEG
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 3
36444: NEG
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36459: LD_ADDR_VAR 0 22
36463: PUSH
36464: LD_INT 2
36466: NEG
36467: PUSH
36468: LD_INT 3
36470: NEG
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 3
36478: NEG
36479: PUSH
36480: LD_INT 2
36482: NEG
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 3
36490: NEG
36491: PUSH
36492: LD_INT 3
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: LIST
36504: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36505: LD_ADDR_VAR 0 23
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: LD_INT 3
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: LD_INT 4
36527: NEG
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: PUSH
36536: LD_INT 3
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: LIST
36548: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36549: LD_ADDR_VAR 0 24
36553: PUSH
36554: LD_INT 3
36556: PUSH
36557: LD_INT 0
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 3
36566: PUSH
36567: LD_INT 1
36569: NEG
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 4
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36590: LD_ADDR_VAR 0 25
36594: PUSH
36595: LD_INT 3
36597: PUSH
36598: LD_INT 3
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 4
36607: PUSH
36608: LD_INT 3
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 3
36617: PUSH
36618: LD_INT 4
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: LIST
36629: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36630: LD_ADDR_VAR 0 26
36634: PUSH
36635: LD_INT 0
36637: PUSH
36638: LD_INT 3
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 1
36647: PUSH
36648: LD_INT 4
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: LD_INT 3
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: LIST
36670: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36671: LD_ADDR_VAR 0 27
36675: PUSH
36676: LD_INT 3
36678: NEG
36679: PUSH
36680: LD_INT 0
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 3
36689: NEG
36690: PUSH
36691: LD_INT 1
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: LD_INT 4
36700: NEG
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36715: LD_ADDR_VAR 0 28
36719: PUSH
36720: LD_INT 3
36722: NEG
36723: PUSH
36724: LD_INT 3
36726: NEG
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 3
36734: NEG
36735: PUSH
36736: LD_INT 4
36738: NEG
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 4
36746: NEG
36747: PUSH
36748: LD_INT 3
36750: NEG
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
36761: LD_ADDR_VAR 0 29
36765: PUSH
36766: LD_INT 1
36768: NEG
36769: PUSH
36770: LD_INT 3
36772: NEG
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: LD_INT 3
36783: NEG
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: LD_INT 2
36794: NEG
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: LD_INT 4
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: LD_INT 4
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: LD_INT 3
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: LD_INT 5
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 0
36848: PUSH
36849: LD_INT 5
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 4
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: LD_INT 6
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: LD_INT 6
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: PUSH
36894: LD_INT 5
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36916: LD_ADDR_VAR 0 30
36920: PUSH
36921: LD_INT 2
36923: PUSH
36924: LD_INT 1
36926: NEG
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 3
36934: PUSH
36935: LD_INT 0
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 3
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 3
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 4
36965: PUSH
36966: LD_INT 0
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 4
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 4
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 5
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 5
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 5
37016: PUSH
37017: LD_INT 1
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 6
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 6
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37059: LD_ADDR_VAR 0 31
37063: PUSH
37064: LD_INT 3
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 3
37076: PUSH
37077: LD_INT 3
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 2
37086: PUSH
37087: LD_INT 3
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 4
37096: PUSH
37097: LD_INT 3
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 4
37106: PUSH
37107: LD_INT 4
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 3
37116: PUSH
37117: LD_INT 4
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 5
37126: PUSH
37127: LD_INT 4
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 5
37136: PUSH
37137: LD_INT 5
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 4
37146: PUSH
37147: LD_INT 5
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 6
37156: PUSH
37157: LD_INT 5
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 6
37166: PUSH
37167: LD_INT 6
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 5
37176: PUSH
37177: LD_INT 6
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37198: LD_ADDR_VAR 0 32
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: LD_INT 3
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 3
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: PUSH
37237: LD_INT 4
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 0
37246: PUSH
37247: LD_INT 4
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 1
37256: NEG
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 5
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: LD_INT 5
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 1
37287: NEG
37288: PUSH
37289: LD_INT 4
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 1
37298: PUSH
37299: LD_INT 6
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 6
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: LD_INT 5
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37341: LD_ADDR_VAR 0 33
37345: PUSH
37346: LD_INT 2
37348: NEG
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 3
37359: NEG
37360: PUSH
37361: LD_INT 0
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 3
37370: NEG
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 3
37382: NEG
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 4
37393: NEG
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 4
37404: NEG
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 4
37416: NEG
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 5
37427: NEG
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 5
37438: NEG
37439: PUSH
37440: LD_INT 1
37442: NEG
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 5
37450: NEG
37451: PUSH
37452: LD_INT 1
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: PUSH
37459: LD_INT 6
37461: NEG
37462: PUSH
37463: LD_INT 0
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 6
37472: NEG
37473: PUSH
37474: LD_INT 1
37476: NEG
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37496: LD_ADDR_VAR 0 34
37500: PUSH
37501: LD_INT 2
37503: NEG
37504: PUSH
37505: LD_INT 3
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 3
37515: NEG
37516: PUSH
37517: LD_INT 2
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 3
37527: NEG
37528: PUSH
37529: LD_INT 3
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 3
37539: NEG
37540: PUSH
37541: LD_INT 4
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 4
37551: NEG
37552: PUSH
37553: LD_INT 3
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 4
37563: NEG
37564: PUSH
37565: LD_INT 4
37567: NEG
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 4
37575: NEG
37576: PUSH
37577: LD_INT 5
37579: NEG
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 5
37587: NEG
37588: PUSH
37589: LD_INT 4
37591: NEG
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 5
37599: NEG
37600: PUSH
37601: LD_INT 5
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 5
37611: NEG
37612: PUSH
37613: LD_INT 6
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 6
37623: NEG
37624: PUSH
37625: LD_INT 5
37627: NEG
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 6
37635: NEG
37636: PUSH
37637: LD_INT 6
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37659: LD_ADDR_VAR 0 41
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: LD_INT 2
37669: NEG
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 1
37677: NEG
37678: PUSH
37679: LD_INT 3
37681: NEG
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: LD_INT 2
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: LIST
37702: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37703: LD_ADDR_VAR 0 42
37707: PUSH
37708: LD_INT 2
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 2
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 3
37731: PUSH
37732: LD_INT 1
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
37744: LD_ADDR_VAR 0 43
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 3
37761: PUSH
37762: LD_INT 2
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 2
37771: PUSH
37772: LD_INT 3
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: LIST
37783: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
37784: LD_ADDR_VAR 0 44
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: LD_INT 2
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: LD_INT 3
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: LIST
37824: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37825: LD_ADDR_VAR 0 45
37829: PUSH
37830: LD_INT 2
37832: NEG
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 2
37843: NEG
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 3
37854: NEG
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37869: LD_ADDR_VAR 0 46
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: LD_INT 2
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: LD_INT 3
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 3
37900: NEG
37901: PUSH
37902: LD_INT 2
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37915: LD_ADDR_VAR 0 47
37919: PUSH
37920: LD_INT 2
37922: NEG
37923: PUSH
37924: LD_INT 3
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: NEG
37935: PUSH
37936: LD_INT 3
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37948: LD_ADDR_VAR 0 48
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 2
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 2
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37979: LD_ADDR_VAR 0 49
37983: PUSH
37984: LD_INT 3
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 3
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38008: LD_ADDR_VAR 0 50
38012: PUSH
38013: LD_INT 2
38015: PUSH
38016: LD_INT 3
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: LD_INT 3
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38037: LD_ADDR_VAR 0 51
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: LD_INT 2
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: NEG
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38068: LD_ADDR_VAR 0 52
38072: PUSH
38073: LD_INT 3
38075: NEG
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 3
38087: NEG
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38101: LD_ADDR_VAR 0 53
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: LD_INT 3
38112: NEG
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 0
38120: PUSH
38121: LD_INT 3
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: LIST
38144: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38145: LD_ADDR_VAR 0 54
38149: PUSH
38150: LD_INT 2
38152: PUSH
38153: LD_INT 1
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 3
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 3
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: LIST
38185: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38186: LD_ADDR_VAR 0 55
38190: PUSH
38191: LD_INT 3
38193: PUSH
38194: LD_INT 2
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 3
38203: PUSH
38204: LD_INT 3
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: PUSH
38214: LD_INT 3
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: LIST
38225: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38226: LD_ADDR_VAR 0 56
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: LD_INT 3
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 3
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: LD_INT 2
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: LIST
38266: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38267: LD_ADDR_VAR 0 57
38271: PUSH
38272: LD_INT 2
38274: NEG
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 3
38285: NEG
38286: PUSH
38287: LD_INT 0
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 3
38296: NEG
38297: PUSH
38298: LD_INT 1
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: LIST
38310: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38311: LD_ADDR_VAR 0 58
38315: PUSH
38316: LD_INT 2
38318: NEG
38319: PUSH
38320: LD_INT 3
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 3
38330: NEG
38331: PUSH
38332: LD_INT 2
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 3
38342: NEG
38343: PUSH
38344: LD_INT 3
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: LIST
38356: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38357: LD_ADDR_VAR 0 59
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: LD_INT 2
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: LD_INT 2
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 1
38387: PUSH
38388: LD_INT 1
38390: NEG
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: LIST
38400: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38401: LD_ADDR_VAR 0 60
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: LD_INT 0
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 2
38429: PUSH
38430: LD_INT 1
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: LIST
38441: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38442: LD_ADDR_VAR 0 61
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 2
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: LD_INT 2
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38482: LD_ADDR_VAR 0 62
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 2
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 2
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 1
38509: NEG
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: LIST
38522: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38523: LD_ADDR_VAR 0 63
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: LD_INT 1
38556: NEG
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: LIST
38566: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38567: LD_ADDR_VAR 0 64
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: LD_INT 2
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 2
38586: NEG
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: LD_INT 2
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: ST_TO_ADDR
// end ; 2 :
38613: GO 41879
38615: LD_INT 2
38617: DOUBLE
38618: EQUAL
38619: IFTRUE 38623
38621: GO 41878
38623: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38624: LD_ADDR_VAR 0 29
38628: PUSH
38629: LD_INT 4
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 4
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 5
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 5
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 4
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 3
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 3
38692: PUSH
38693: LD_INT 1
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 3
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 5
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: LD_INT 3
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 3
38734: PUSH
38735: LD_INT 2
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 4
38744: PUSH
38745: LD_INT 3
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 4
38754: PUSH
38755: LD_INT 4
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 3
38764: PUSH
38765: LD_INT 4
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 2
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 2
38784: PUSH
38785: LD_INT 2
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 4
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: LD_INT 4
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: LD_INT 4
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: LD_INT 3
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 4
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: LD_INT 5
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: LD_INT 5
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: LD_INT 4
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: NEG
38876: PUSH
38877: LD_INT 3
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 2
38886: PUSH
38887: LD_INT 5
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 2
38896: NEG
38897: PUSH
38898: LD_INT 3
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 3
38907: NEG
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 3
38918: NEG
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 2
38941: NEG
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: LD_INT 3
38952: NEG
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 4
38963: NEG
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 4
38974: NEG
38975: PUSH
38976: LD_INT 1
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 4
38986: NEG
38987: PUSH
38988: LD_INT 2
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: LD_INT 2
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 4
39009: NEG
39010: PUSH
39011: LD_INT 4
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 4
39021: NEG
39022: PUSH
39023: LD_INT 5
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 3
39033: NEG
39034: PUSH
39035: LD_INT 4
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 3
39045: NEG
39046: PUSH
39047: LD_INT 3
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 4
39057: NEG
39058: PUSH
39059: LD_INT 3
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 5
39069: NEG
39070: PUSH
39071: LD_INT 4
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 5
39081: NEG
39082: PUSH
39083: LD_INT 5
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 3
39093: NEG
39094: PUSH
39095: LD_INT 5
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 5
39105: NEG
39106: PUSH
39107: LD_INT 3
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39162: LD_ADDR_VAR 0 30
39166: PUSH
39167: LD_INT 4
39169: PUSH
39170: LD_INT 4
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 4
39179: PUSH
39180: LD_INT 3
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 5
39189: PUSH
39190: LD_INT 4
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 5
39199: PUSH
39200: LD_INT 5
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 4
39209: PUSH
39210: LD_INT 5
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 3
39219: PUSH
39220: LD_INT 4
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 3
39229: PUSH
39230: LD_INT 3
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 5
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 3
39249: PUSH
39250: LD_INT 5
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 3
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: LD_INT 3
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: LD_INT 4
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: LD_INT 4
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: LD_INT 3
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: NEG
39321: PUSH
39322: LD_INT 2
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: LD_INT 4
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: NEG
39342: PUSH
39343: LD_INT 2
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 4
39352: NEG
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 4
39363: NEG
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 3
39375: NEG
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 3
39386: NEG
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 4
39397: NEG
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 5
39408: NEG
39409: PUSH
39410: LD_INT 0
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 5
39419: NEG
39420: PUSH
39421: LD_INT 1
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 5
39431: NEG
39432: PUSH
39433: LD_INT 2
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 3
39443: NEG
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 3
39454: NEG
39455: PUSH
39456: LD_INT 3
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 3
39466: NEG
39467: PUSH
39468: LD_INT 4
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 2
39478: NEG
39479: PUSH
39480: LD_INT 3
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 2
39490: NEG
39491: PUSH
39492: LD_INT 2
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 3
39502: NEG
39503: PUSH
39504: LD_INT 2
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 4
39514: NEG
39515: PUSH
39516: LD_INT 3
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 4
39526: NEG
39527: PUSH
39528: LD_INT 4
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: LD_INT 4
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 4
39550: NEG
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: LD_INT 4
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: LD_INT 5
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: LD_INT 4
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: LD_INT 3
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: LD_INT 3
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: LD_INT 4
39621: NEG
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: LD_INT 5
39633: NEG
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: LD_INT 3
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: LD_INT 5
39656: NEG
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39709: LD_ADDR_VAR 0 31
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 4
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 3
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: LD_INT 4
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: LD_INT 5
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 5
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: LD_INT 4
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: LD_INT 3
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 2
39788: PUSH
39789: LD_INT 5
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 2
39798: NEG
39799: PUSH
39800: LD_INT 3
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 3
39809: NEG
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 3
39820: NEG
39821: PUSH
39822: LD_INT 1
39824: NEG
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 2
39832: NEG
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 3
39854: NEG
39855: PUSH
39856: LD_INT 1
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 4
39865: NEG
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 4
39876: NEG
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 4
39888: NEG
39889: PUSH
39890: LD_INT 2
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 2
39900: NEG
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 4
39911: NEG
39912: PUSH
39913: LD_INT 4
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 4
39923: NEG
39924: PUSH
39925: LD_INT 5
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 3
39935: NEG
39936: PUSH
39937: LD_INT 4
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 3
39947: NEG
39948: PUSH
39949: LD_INT 3
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 4
39959: NEG
39960: PUSH
39961: LD_INT 3
39963: NEG
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 5
39971: NEG
39972: PUSH
39973: LD_INT 4
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 5
39983: NEG
39984: PUSH
39985: LD_INT 5
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 3
39995: NEG
39996: PUSH
39997: LD_INT 5
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 5
40007: NEG
40008: PUSH
40009: LD_INT 3
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 3
40022: NEG
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: LD_INT 4
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 3
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: LD_INT 2
40055: NEG
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: LD_INT 2
40066: NEG
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 1
40074: NEG
40075: PUSH
40076: LD_INT 3
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 4
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 2
40098: PUSH
40099: LD_INT 2
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 2
40109: NEG
40110: PUSH
40111: LD_INT 4
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 4
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 4
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 5
40142: PUSH
40143: LD_INT 0
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 5
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 4
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 3
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 3
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 3
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 5
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40259: LD_ADDR_VAR 0 32
40263: PUSH
40264: LD_INT 4
40266: NEG
40267: PUSH
40268: LD_INT 0
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 4
40277: NEG
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 3
40289: NEG
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 3
40300: NEG
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 4
40311: NEG
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 5
40322: NEG
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 5
40333: NEG
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 5
40345: NEG
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 3
40357: NEG
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 3
40368: NEG
40369: PUSH
40370: LD_INT 3
40372: NEG
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 3
40380: NEG
40381: PUSH
40382: LD_INT 4
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: LD_INT 3
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 3
40416: NEG
40417: PUSH
40418: LD_INT 2
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 4
40428: NEG
40429: PUSH
40430: LD_INT 3
40432: NEG
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 4
40440: NEG
40441: PUSH
40442: LD_INT 4
40444: NEG
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: LD_INT 4
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 4
40464: NEG
40465: PUSH
40466: LD_INT 2
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 4
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 5
40490: NEG
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: PUSH
40499: LD_INT 4
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: PUSH
40510: LD_INT 3
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: LD_INT 3
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PUSH
40533: LD_INT 4
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: LD_INT 5
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: LD_INT 3
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: LD_INT 5
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: LD_INT 3
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 4
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 4
40609: PUSH
40610: LD_INT 1
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 3
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 2
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 2
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 4
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 4
40671: PUSH
40672: LD_INT 4
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 4
40681: PUSH
40682: LD_INT 3
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 5
40691: PUSH
40692: LD_INT 4
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 5
40701: PUSH
40702: LD_INT 5
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 4
40711: PUSH
40712: LD_INT 5
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 3
40721: PUSH
40722: LD_INT 4
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 3
40731: PUSH
40732: LD_INT 3
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 5
40741: PUSH
40742: LD_INT 3
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 3
40751: PUSH
40752: LD_INT 5
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40806: LD_ADDR_VAR 0 33
40810: PUSH
40811: LD_INT 4
40813: NEG
40814: PUSH
40815: LD_INT 4
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 4
40825: NEG
40826: PUSH
40827: LD_INT 5
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 3
40837: NEG
40838: PUSH
40839: LD_INT 4
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 3
40849: NEG
40850: PUSH
40851: LD_INT 3
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 4
40861: NEG
40862: PUSH
40863: LD_INT 3
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 5
40873: NEG
40874: PUSH
40875: LD_INT 4
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 5
40885: NEG
40886: PUSH
40887: LD_INT 5
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 3
40897: NEG
40898: PUSH
40899: LD_INT 5
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 5
40909: NEG
40910: PUSH
40911: LD_INT 3
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 0
40921: PUSH
40922: LD_INT 3
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 4
40935: NEG
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: LD_INT 3
40946: NEG
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 2
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: LD_INT 3
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 1
40988: NEG
40989: PUSH
40990: LD_INT 4
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: LD_INT 2
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 2
41011: NEG
41012: PUSH
41013: LD_INT 4
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 4
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 4
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 5
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 5
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 4
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 3
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 3
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 3
41095: PUSH
41096: LD_INT 2
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 5
41106: PUSH
41107: LD_INT 2
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 3
41116: PUSH
41117: LD_INT 3
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 3
41126: PUSH
41127: LD_INT 2
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 4
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 4
41146: PUSH
41147: LD_INT 4
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 3
41156: PUSH
41157: LD_INT 4
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: LD_INT 3
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: LD_INT 2
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 4
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: LD_INT 4
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 0
41206: PUSH
41207: LD_INT 4
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 3
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 1
41226: PUSH
41227: LD_INT 4
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 5
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 0
41246: PUSH
41247: LD_INT 5
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 4
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: LD_INT 3
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: LD_INT 5
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: NEG
41289: PUSH
41290: LD_INT 3
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41344: LD_ADDR_VAR 0 34
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: LD_INT 4
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: LD_INT 5
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: LD_INT 4
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: LD_INT 3
41387: NEG
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: LD_INT 3
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: NEG
41407: PUSH
41408: LD_INT 4
41410: NEG
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 5
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 2
41430: PUSH
41431: LD_INT 3
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 2
41441: NEG
41442: PUSH
41443: LD_INT 5
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 3
41453: PUSH
41454: LD_INT 0
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 3
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 4
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 4
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 3
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 2
41528: NEG
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 4
41536: PUSH
41537: LD_INT 2
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 4
41546: PUSH
41547: LD_INT 4
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 4
41556: PUSH
41557: LD_INT 3
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 5
41566: PUSH
41567: LD_INT 4
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 5
41576: PUSH
41577: LD_INT 5
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 4
41586: PUSH
41587: LD_INT 5
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: PUSH
41594: LD_INT 3
41596: PUSH
41597: LD_INT 4
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: LD_INT 3
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 5
41616: PUSH
41617: LD_INT 3
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 3
41626: PUSH
41627: LD_INT 5
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: LD_INT 3
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: LD_INT 3
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: PUSH
41667: LD_INT 4
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 4
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 3
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: NEG
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: LD_INT 4
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 4
41729: NEG
41730: PUSH
41731: LD_INT 0
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 4
41740: NEG
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 3
41752: NEG
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 3
41763: NEG
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 4
41774: NEG
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 5
41785: NEG
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 5
41796: NEG
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 5
41808: NEG
41809: PUSH
41810: LD_INT 2
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 3
41820: NEG
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: ST_TO_ADDR
// end ; end ;
41876: GO 41879
41878: POP
// case btype of b_depot , b_warehouse :
41879: LD_VAR 0 1
41883: PUSH
41884: LD_INT 0
41886: DOUBLE
41887: EQUAL
41888: IFTRUE 41898
41890: LD_INT 1
41892: DOUBLE
41893: EQUAL
41894: IFTRUE 41898
41896: GO 42099
41898: POP
// case nation of nation_american :
41899: LD_VAR 0 5
41903: PUSH
41904: LD_INT 1
41906: DOUBLE
41907: EQUAL
41908: IFTRUE 41912
41910: GO 41968
41912: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41913: LD_ADDR_VAR 0 9
41917: PUSH
41918: LD_VAR 0 11
41922: PUSH
41923: LD_VAR 0 12
41927: PUSH
41928: LD_VAR 0 13
41932: PUSH
41933: LD_VAR 0 14
41937: PUSH
41938: LD_VAR 0 15
41942: PUSH
41943: LD_VAR 0 16
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: PUSH
41956: LD_VAR 0 4
41960: PUSH
41961: LD_INT 1
41963: PLUS
41964: ARRAY
41965: ST_TO_ADDR
41966: GO 42097
41968: LD_INT 2
41970: DOUBLE
41971: EQUAL
41972: IFTRUE 41976
41974: GO 42032
41976: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41977: LD_ADDR_VAR 0 9
41981: PUSH
41982: LD_VAR 0 17
41986: PUSH
41987: LD_VAR 0 18
41991: PUSH
41992: LD_VAR 0 19
41996: PUSH
41997: LD_VAR 0 20
42001: PUSH
42002: LD_VAR 0 21
42006: PUSH
42007: LD_VAR 0 22
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: PUSH
42020: LD_VAR 0 4
42024: PUSH
42025: LD_INT 1
42027: PLUS
42028: ARRAY
42029: ST_TO_ADDR
42030: GO 42097
42032: LD_INT 3
42034: DOUBLE
42035: EQUAL
42036: IFTRUE 42040
42038: GO 42096
42040: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42041: LD_ADDR_VAR 0 9
42045: PUSH
42046: LD_VAR 0 23
42050: PUSH
42051: LD_VAR 0 24
42055: PUSH
42056: LD_VAR 0 25
42060: PUSH
42061: LD_VAR 0 26
42065: PUSH
42066: LD_VAR 0 27
42070: PUSH
42071: LD_VAR 0 28
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: PUSH
42084: LD_VAR 0 4
42088: PUSH
42089: LD_INT 1
42091: PLUS
42092: ARRAY
42093: ST_TO_ADDR
42094: GO 42097
42096: POP
42097: GO 42652
42099: LD_INT 2
42101: DOUBLE
42102: EQUAL
42103: IFTRUE 42113
42105: LD_INT 3
42107: DOUBLE
42108: EQUAL
42109: IFTRUE 42113
42111: GO 42169
42113: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42114: LD_ADDR_VAR 0 9
42118: PUSH
42119: LD_VAR 0 29
42123: PUSH
42124: LD_VAR 0 30
42128: PUSH
42129: LD_VAR 0 31
42133: PUSH
42134: LD_VAR 0 32
42138: PUSH
42139: LD_VAR 0 33
42143: PUSH
42144: LD_VAR 0 34
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: PUSH
42157: LD_VAR 0 4
42161: PUSH
42162: LD_INT 1
42164: PLUS
42165: ARRAY
42166: ST_TO_ADDR
42167: GO 42652
42169: LD_INT 16
42171: DOUBLE
42172: EQUAL
42173: IFTRUE 42231
42175: LD_INT 17
42177: DOUBLE
42178: EQUAL
42179: IFTRUE 42231
42181: LD_INT 18
42183: DOUBLE
42184: EQUAL
42185: IFTRUE 42231
42187: LD_INT 19
42189: DOUBLE
42190: EQUAL
42191: IFTRUE 42231
42193: LD_INT 22
42195: DOUBLE
42196: EQUAL
42197: IFTRUE 42231
42199: LD_INT 20
42201: DOUBLE
42202: EQUAL
42203: IFTRUE 42231
42205: LD_INT 21
42207: DOUBLE
42208: EQUAL
42209: IFTRUE 42231
42211: LD_INT 23
42213: DOUBLE
42214: EQUAL
42215: IFTRUE 42231
42217: LD_INT 24
42219: DOUBLE
42220: EQUAL
42221: IFTRUE 42231
42223: LD_INT 25
42225: DOUBLE
42226: EQUAL
42227: IFTRUE 42231
42229: GO 42287
42231: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42232: LD_ADDR_VAR 0 9
42236: PUSH
42237: LD_VAR 0 35
42241: PUSH
42242: LD_VAR 0 36
42246: PUSH
42247: LD_VAR 0 37
42251: PUSH
42252: LD_VAR 0 38
42256: PUSH
42257: LD_VAR 0 39
42261: PUSH
42262: LD_VAR 0 40
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: PUSH
42275: LD_VAR 0 4
42279: PUSH
42280: LD_INT 1
42282: PLUS
42283: ARRAY
42284: ST_TO_ADDR
42285: GO 42652
42287: LD_INT 6
42289: DOUBLE
42290: EQUAL
42291: IFTRUE 42343
42293: LD_INT 7
42295: DOUBLE
42296: EQUAL
42297: IFTRUE 42343
42299: LD_INT 8
42301: DOUBLE
42302: EQUAL
42303: IFTRUE 42343
42305: LD_INT 13
42307: DOUBLE
42308: EQUAL
42309: IFTRUE 42343
42311: LD_INT 12
42313: DOUBLE
42314: EQUAL
42315: IFTRUE 42343
42317: LD_INT 15
42319: DOUBLE
42320: EQUAL
42321: IFTRUE 42343
42323: LD_INT 11
42325: DOUBLE
42326: EQUAL
42327: IFTRUE 42343
42329: LD_INT 14
42331: DOUBLE
42332: EQUAL
42333: IFTRUE 42343
42335: LD_INT 10
42337: DOUBLE
42338: EQUAL
42339: IFTRUE 42343
42341: GO 42399
42343: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42344: LD_ADDR_VAR 0 9
42348: PUSH
42349: LD_VAR 0 41
42353: PUSH
42354: LD_VAR 0 42
42358: PUSH
42359: LD_VAR 0 43
42363: PUSH
42364: LD_VAR 0 44
42368: PUSH
42369: LD_VAR 0 45
42373: PUSH
42374: LD_VAR 0 46
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: PUSH
42387: LD_VAR 0 4
42391: PUSH
42392: LD_INT 1
42394: PLUS
42395: ARRAY
42396: ST_TO_ADDR
42397: GO 42652
42399: LD_INT 36
42401: DOUBLE
42402: EQUAL
42403: IFTRUE 42407
42405: GO 42463
42407: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42408: LD_ADDR_VAR 0 9
42412: PUSH
42413: LD_VAR 0 47
42417: PUSH
42418: LD_VAR 0 48
42422: PUSH
42423: LD_VAR 0 49
42427: PUSH
42428: LD_VAR 0 50
42432: PUSH
42433: LD_VAR 0 51
42437: PUSH
42438: LD_VAR 0 52
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: PUSH
42451: LD_VAR 0 4
42455: PUSH
42456: LD_INT 1
42458: PLUS
42459: ARRAY
42460: ST_TO_ADDR
42461: GO 42652
42463: LD_INT 4
42465: DOUBLE
42466: EQUAL
42467: IFTRUE 42489
42469: LD_INT 5
42471: DOUBLE
42472: EQUAL
42473: IFTRUE 42489
42475: LD_INT 34
42477: DOUBLE
42478: EQUAL
42479: IFTRUE 42489
42481: LD_INT 37
42483: DOUBLE
42484: EQUAL
42485: IFTRUE 42489
42487: GO 42545
42489: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42490: LD_ADDR_VAR 0 9
42494: PUSH
42495: LD_VAR 0 53
42499: PUSH
42500: LD_VAR 0 54
42504: PUSH
42505: LD_VAR 0 55
42509: PUSH
42510: LD_VAR 0 56
42514: PUSH
42515: LD_VAR 0 57
42519: PUSH
42520: LD_VAR 0 58
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: PUSH
42533: LD_VAR 0 4
42537: PUSH
42538: LD_INT 1
42540: PLUS
42541: ARRAY
42542: ST_TO_ADDR
42543: GO 42652
42545: LD_INT 31
42547: DOUBLE
42548: EQUAL
42549: IFTRUE 42595
42551: LD_INT 32
42553: DOUBLE
42554: EQUAL
42555: IFTRUE 42595
42557: LD_INT 33
42559: DOUBLE
42560: EQUAL
42561: IFTRUE 42595
42563: LD_INT 27
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42595
42569: LD_INT 26
42571: DOUBLE
42572: EQUAL
42573: IFTRUE 42595
42575: LD_INT 28
42577: DOUBLE
42578: EQUAL
42579: IFTRUE 42595
42581: LD_INT 29
42583: DOUBLE
42584: EQUAL
42585: IFTRUE 42595
42587: LD_INT 30
42589: DOUBLE
42590: EQUAL
42591: IFTRUE 42595
42593: GO 42651
42595: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42596: LD_ADDR_VAR 0 9
42600: PUSH
42601: LD_VAR 0 59
42605: PUSH
42606: LD_VAR 0 60
42610: PUSH
42611: LD_VAR 0 61
42615: PUSH
42616: LD_VAR 0 62
42620: PUSH
42621: LD_VAR 0 63
42625: PUSH
42626: LD_VAR 0 64
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: PUSH
42639: LD_VAR 0 4
42643: PUSH
42644: LD_INT 1
42646: PLUS
42647: ARRAY
42648: ST_TO_ADDR
42649: GO 42652
42651: POP
// temp_list2 = [ ] ;
42652: LD_ADDR_VAR 0 10
42656: PUSH
42657: EMPTY
42658: ST_TO_ADDR
// for i in temp_list do
42659: LD_ADDR_VAR 0 8
42663: PUSH
42664: LD_VAR 0 9
42668: PUSH
42669: FOR_IN
42670: IFFALSE 42722
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42672: LD_ADDR_VAR 0 10
42676: PUSH
42677: LD_VAR 0 10
42681: PUSH
42682: LD_VAR 0 8
42686: PUSH
42687: LD_INT 1
42689: ARRAY
42690: PUSH
42691: LD_VAR 0 2
42695: PLUS
42696: PUSH
42697: LD_VAR 0 8
42701: PUSH
42702: LD_INT 2
42704: ARRAY
42705: PUSH
42706: LD_VAR 0 3
42710: PLUS
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: EMPTY
42717: LIST
42718: ADD
42719: ST_TO_ADDR
42720: GO 42669
42722: POP
42723: POP
// result = temp_list2 ;
42724: LD_ADDR_VAR 0 7
42728: PUSH
42729: LD_VAR 0 10
42733: ST_TO_ADDR
// end ;
42734: LD_VAR 0 7
42738: RET
// export function EnemyInRange ( unit , dist ) ; begin
42739: LD_INT 0
42741: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
42742: LD_ADDR_VAR 0 3
42746: PUSH
42747: LD_VAR 0 1
42751: PPUSH
42752: CALL_OW 255
42756: PPUSH
42757: LD_VAR 0 1
42761: PPUSH
42762: CALL_OW 250
42766: PPUSH
42767: LD_VAR 0 1
42771: PPUSH
42772: CALL_OW 251
42776: PPUSH
42777: LD_VAR 0 2
42781: PPUSH
42782: CALL 16135 0 4
42786: PUSH
42787: LD_INT 4
42789: ARRAY
42790: ST_TO_ADDR
// end ;
42791: LD_VAR 0 3
42795: RET
// export function PlayerSeeMe ( unit ) ; begin
42796: LD_INT 0
42798: PPUSH
// result := See ( your_side , unit ) ;
42799: LD_ADDR_VAR 0 2
42803: PUSH
42804: LD_OWVAR 2
42808: PPUSH
42809: LD_VAR 0 1
42813: PPUSH
42814: CALL_OW 292
42818: ST_TO_ADDR
// end ;
42819: LD_VAR 0 2
42823: RET
// export function ReverseDir ( unit ) ; begin
42824: LD_INT 0
42826: PPUSH
// if not unit then
42827: LD_VAR 0 1
42831: NOT
42832: IFFALSE 42836
// exit ;
42834: GO 42859
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42836: LD_ADDR_VAR 0 2
42840: PUSH
42841: LD_VAR 0 1
42845: PPUSH
42846: CALL_OW 254
42850: PUSH
42851: LD_INT 3
42853: PLUS
42854: PUSH
42855: LD_INT 6
42857: MOD
42858: ST_TO_ADDR
// end ;
42859: LD_VAR 0 2
42863: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
42864: LD_INT 0
42866: PPUSH
42867: PPUSH
42868: PPUSH
42869: PPUSH
42870: PPUSH
// if not hexes then
42871: LD_VAR 0 2
42875: NOT
42876: IFFALSE 42880
// exit ;
42878: GO 43028
// dist := 9999 ;
42880: LD_ADDR_VAR 0 5
42884: PUSH
42885: LD_INT 9999
42887: ST_TO_ADDR
// for i = 1 to hexes do
42888: LD_ADDR_VAR 0 4
42892: PUSH
42893: DOUBLE
42894: LD_INT 1
42896: DEC
42897: ST_TO_ADDR
42898: LD_VAR 0 2
42902: PUSH
42903: FOR_TO
42904: IFFALSE 43016
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
42906: LD_VAR 0 1
42910: PPUSH
42911: LD_VAR 0 2
42915: PUSH
42916: LD_VAR 0 4
42920: ARRAY
42921: PUSH
42922: LD_INT 1
42924: ARRAY
42925: PPUSH
42926: LD_VAR 0 2
42930: PUSH
42931: LD_VAR 0 4
42935: ARRAY
42936: PUSH
42937: LD_INT 2
42939: ARRAY
42940: PPUSH
42941: CALL_OW 297
42945: PUSH
42946: LD_VAR 0 5
42950: LESS
42951: IFFALSE 43014
// begin hex := hexes [ i ] ;
42953: LD_ADDR_VAR 0 7
42957: PUSH
42958: LD_VAR 0 2
42962: PUSH
42963: LD_VAR 0 4
42967: ARRAY
42968: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42969: LD_ADDR_VAR 0 5
42973: PUSH
42974: LD_VAR 0 1
42978: PPUSH
42979: LD_VAR 0 2
42983: PUSH
42984: LD_VAR 0 4
42988: ARRAY
42989: PUSH
42990: LD_INT 1
42992: ARRAY
42993: PPUSH
42994: LD_VAR 0 2
42998: PUSH
42999: LD_VAR 0 4
43003: ARRAY
43004: PUSH
43005: LD_INT 2
43007: ARRAY
43008: PPUSH
43009: CALL_OW 297
43013: ST_TO_ADDR
// end ; end ;
43014: GO 42903
43016: POP
43017: POP
// result := hex ;
43018: LD_ADDR_VAR 0 3
43022: PUSH
43023: LD_VAR 0 7
43027: ST_TO_ADDR
// end ;
43028: LD_VAR 0 3
43032: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43033: LD_INT 0
43035: PPUSH
43036: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43037: LD_VAR 0 1
43041: NOT
43042: PUSH
43043: LD_VAR 0 1
43047: PUSH
43048: LD_INT 21
43050: PUSH
43051: LD_INT 2
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 23
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PPUSH
43072: CALL_OW 69
43076: IN
43077: NOT
43078: OR
43079: IFFALSE 43083
// exit ;
43081: GO 43130
// for i = 1 to 3 do
43083: LD_ADDR_VAR 0 3
43087: PUSH
43088: DOUBLE
43089: LD_INT 1
43091: DEC
43092: ST_TO_ADDR
43093: LD_INT 3
43095: PUSH
43096: FOR_TO
43097: IFFALSE 43128
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43099: LD_VAR 0 1
43103: PPUSH
43104: CALL_OW 250
43108: PPUSH
43109: LD_VAR 0 1
43113: PPUSH
43114: CALL_OW 251
43118: PPUSH
43119: LD_INT 1
43121: PPUSH
43122: CALL_OW 453
43126: GO 43096
43128: POP
43129: POP
// end ;
43130: LD_VAR 0 2
43134: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43135: LD_INT 0
43137: PPUSH
43138: PPUSH
43139: PPUSH
43140: PPUSH
43141: PPUSH
43142: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
43143: LD_VAR 0 1
43147: NOT
43148: PUSH
43149: LD_VAR 0 2
43153: NOT
43154: OR
43155: PUSH
43156: LD_VAR 0 1
43160: PPUSH
43161: CALL_OW 314
43165: OR
43166: IFFALSE 43170
// exit ;
43168: GO 43611
// x := GetX ( enemy_unit ) ;
43170: LD_ADDR_VAR 0 7
43174: PUSH
43175: LD_VAR 0 2
43179: PPUSH
43180: CALL_OW 250
43184: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43185: LD_ADDR_VAR 0 8
43189: PUSH
43190: LD_VAR 0 2
43194: PPUSH
43195: CALL_OW 251
43199: ST_TO_ADDR
// if not x or not y then
43200: LD_VAR 0 7
43204: NOT
43205: PUSH
43206: LD_VAR 0 8
43210: NOT
43211: OR
43212: IFFALSE 43216
// exit ;
43214: GO 43611
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43216: LD_ADDR_VAR 0 6
43220: PUSH
43221: LD_VAR 0 7
43225: PPUSH
43226: LD_INT 0
43228: PPUSH
43229: LD_INT 4
43231: PPUSH
43232: CALL_OW 272
43236: PUSH
43237: LD_VAR 0 8
43241: PPUSH
43242: LD_INT 0
43244: PPUSH
43245: LD_INT 4
43247: PPUSH
43248: CALL_OW 273
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_VAR 0 7
43261: PPUSH
43262: LD_INT 1
43264: PPUSH
43265: LD_INT 4
43267: PPUSH
43268: CALL_OW 272
43272: PUSH
43273: LD_VAR 0 8
43277: PPUSH
43278: LD_INT 1
43280: PPUSH
43281: LD_INT 4
43283: PPUSH
43284: CALL_OW 273
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_VAR 0 7
43297: PPUSH
43298: LD_INT 2
43300: PPUSH
43301: LD_INT 4
43303: PPUSH
43304: CALL_OW 272
43308: PUSH
43309: LD_VAR 0 8
43313: PPUSH
43314: LD_INT 2
43316: PPUSH
43317: LD_INT 4
43319: PPUSH
43320: CALL_OW 273
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_VAR 0 7
43333: PPUSH
43334: LD_INT 3
43336: PPUSH
43337: LD_INT 4
43339: PPUSH
43340: CALL_OW 272
43344: PUSH
43345: LD_VAR 0 8
43349: PPUSH
43350: LD_INT 3
43352: PPUSH
43353: LD_INT 4
43355: PPUSH
43356: CALL_OW 273
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_VAR 0 7
43369: PPUSH
43370: LD_INT 4
43372: PPUSH
43373: LD_INT 4
43375: PPUSH
43376: CALL_OW 272
43380: PUSH
43381: LD_VAR 0 8
43385: PPUSH
43386: LD_INT 4
43388: PPUSH
43389: LD_INT 4
43391: PPUSH
43392: CALL_OW 273
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_VAR 0 7
43405: PPUSH
43406: LD_INT 5
43408: PPUSH
43409: LD_INT 4
43411: PPUSH
43412: CALL_OW 272
43416: PUSH
43417: LD_VAR 0 8
43421: PPUSH
43422: LD_INT 5
43424: PPUSH
43425: LD_INT 4
43427: PPUSH
43428: CALL_OW 273
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: ST_TO_ADDR
// for i = tmp downto 1 do
43445: LD_ADDR_VAR 0 4
43449: PUSH
43450: DOUBLE
43451: LD_VAR 0 6
43455: INC
43456: ST_TO_ADDR
43457: LD_INT 1
43459: PUSH
43460: FOR_DOWNTO
43461: IFFALSE 43562
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43463: LD_VAR 0 6
43467: PUSH
43468: LD_VAR 0 4
43472: ARRAY
43473: PUSH
43474: LD_INT 1
43476: ARRAY
43477: PPUSH
43478: LD_VAR 0 6
43482: PUSH
43483: LD_VAR 0 4
43487: ARRAY
43488: PUSH
43489: LD_INT 2
43491: ARRAY
43492: PPUSH
43493: CALL_OW 488
43497: NOT
43498: PUSH
43499: LD_VAR 0 6
43503: PUSH
43504: LD_VAR 0 4
43508: ARRAY
43509: PUSH
43510: LD_INT 1
43512: ARRAY
43513: PPUSH
43514: LD_VAR 0 6
43518: PUSH
43519: LD_VAR 0 4
43523: ARRAY
43524: PUSH
43525: LD_INT 2
43527: ARRAY
43528: PPUSH
43529: CALL_OW 428
43533: PUSH
43534: LD_INT 0
43536: NONEQUAL
43537: OR
43538: IFFALSE 43560
// tmp := Delete ( tmp , i ) ;
43540: LD_ADDR_VAR 0 6
43544: PUSH
43545: LD_VAR 0 6
43549: PPUSH
43550: LD_VAR 0 4
43554: PPUSH
43555: CALL_OW 3
43559: ST_TO_ADDR
43560: GO 43460
43562: POP
43563: POP
// j := GetClosestHex ( unit , tmp ) ;
43564: LD_ADDR_VAR 0 5
43568: PUSH
43569: LD_VAR 0 1
43573: PPUSH
43574: LD_VAR 0 6
43578: PPUSH
43579: CALL 42864 0 2
43583: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43584: LD_VAR 0 1
43588: PPUSH
43589: LD_VAR 0 5
43593: PUSH
43594: LD_INT 1
43596: ARRAY
43597: PPUSH
43598: LD_VAR 0 5
43602: PUSH
43603: LD_INT 2
43605: ARRAY
43606: PPUSH
43607: CALL_OW 111
// end ;
43611: LD_VAR 0 3
43615: RET
// export function PrepareApemanSoldier ( ) ; begin
43616: LD_INT 0
43618: PPUSH
// uc_nation := 0 ;
43619: LD_ADDR_OWVAR 21
43623: PUSH
43624: LD_INT 0
43626: ST_TO_ADDR
// hc_sex := sex_male ;
43627: LD_ADDR_OWVAR 27
43631: PUSH
43632: LD_INT 1
43634: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43635: LD_ADDR_OWVAR 28
43639: PUSH
43640: LD_INT 15
43642: ST_TO_ADDR
// hc_gallery :=  ;
43643: LD_ADDR_OWVAR 33
43647: PUSH
43648: LD_STRING 
43650: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43651: LD_ADDR_OWVAR 31
43655: PUSH
43656: LD_INT 0
43658: PPUSH
43659: LD_INT 3
43661: PPUSH
43662: CALL_OW 12
43666: PUSH
43667: LD_INT 0
43669: PPUSH
43670: LD_INT 3
43672: PPUSH
43673: CALL_OW 12
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: ST_TO_ADDR
// end ;
43690: LD_VAR 0 1
43694: RET
// export function PrepareApemanEngineer ( ) ; begin
43695: LD_INT 0
43697: PPUSH
// uc_nation := 0 ;
43698: LD_ADDR_OWVAR 21
43702: PUSH
43703: LD_INT 0
43705: ST_TO_ADDR
// hc_sex := sex_male ;
43706: LD_ADDR_OWVAR 27
43710: PUSH
43711: LD_INT 1
43713: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
43714: LD_ADDR_OWVAR 28
43718: PUSH
43719: LD_INT 16
43721: ST_TO_ADDR
// hc_gallery :=  ;
43722: LD_ADDR_OWVAR 33
43726: PUSH
43727: LD_STRING 
43729: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43730: LD_ADDR_OWVAR 31
43734: PUSH
43735: LD_INT 0
43737: PPUSH
43738: LD_INT 3
43740: PPUSH
43741: CALL_OW 12
43745: PUSH
43746: LD_INT 0
43748: PPUSH
43749: LD_INT 3
43751: PPUSH
43752: CALL_OW 12
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: ST_TO_ADDR
// end ;
43769: LD_VAR 0 1
43773: RET
// export function PrepareApeman ( agressivity ) ; begin
43774: LD_INT 0
43776: PPUSH
// uc_side := 0 ;
43777: LD_ADDR_OWVAR 20
43781: PUSH
43782: LD_INT 0
43784: ST_TO_ADDR
// uc_nation := 0 ;
43785: LD_ADDR_OWVAR 21
43789: PUSH
43790: LD_INT 0
43792: ST_TO_ADDR
// hc_sex := sex_male ;
43793: LD_ADDR_OWVAR 27
43797: PUSH
43798: LD_INT 1
43800: ST_TO_ADDR
// hc_class := class_apeman ;
43801: LD_ADDR_OWVAR 28
43805: PUSH
43806: LD_INT 12
43808: ST_TO_ADDR
// hc_gallery :=  ;
43809: LD_ADDR_OWVAR 33
43813: PUSH
43814: LD_STRING 
43816: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43817: LD_ADDR_OWVAR 35
43821: PUSH
43822: LD_VAR 0 1
43826: NEG
43827: PPUSH
43828: LD_VAR 0 1
43832: PPUSH
43833: CALL_OW 12
43837: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43838: LD_ADDR_OWVAR 31
43842: PUSH
43843: LD_INT 0
43845: PPUSH
43846: LD_INT 3
43848: PPUSH
43849: CALL_OW 12
43853: PUSH
43854: LD_INT 0
43856: PPUSH
43857: LD_INT 3
43859: PPUSH
43860: CALL_OW 12
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: ST_TO_ADDR
// end ;
43877: LD_VAR 0 2
43881: RET
// export function PrepareTiger ( agressivity ) ; begin
43882: LD_INT 0
43884: PPUSH
// uc_side := 0 ;
43885: LD_ADDR_OWVAR 20
43889: PUSH
43890: LD_INT 0
43892: ST_TO_ADDR
// uc_nation := 0 ;
43893: LD_ADDR_OWVAR 21
43897: PUSH
43898: LD_INT 0
43900: ST_TO_ADDR
// hc_class := class_tiger ;
43901: LD_ADDR_OWVAR 28
43905: PUSH
43906: LD_INT 14
43908: ST_TO_ADDR
// hc_gallery :=  ;
43909: LD_ADDR_OWVAR 33
43913: PUSH
43914: LD_STRING 
43916: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43917: LD_ADDR_OWVAR 35
43921: PUSH
43922: LD_VAR 0 1
43926: NEG
43927: PPUSH
43928: LD_VAR 0 1
43932: PPUSH
43933: CALL_OW 12
43937: ST_TO_ADDR
// end ;
43938: LD_VAR 0 2
43942: RET
// export function PrepareEnchidna ( ) ; begin
43943: LD_INT 0
43945: PPUSH
// uc_side := 0 ;
43946: LD_ADDR_OWVAR 20
43950: PUSH
43951: LD_INT 0
43953: ST_TO_ADDR
// uc_nation := 0 ;
43954: LD_ADDR_OWVAR 21
43958: PUSH
43959: LD_INT 0
43961: ST_TO_ADDR
// hc_class := class_baggie ;
43962: LD_ADDR_OWVAR 28
43966: PUSH
43967: LD_INT 13
43969: ST_TO_ADDR
// hc_gallery :=  ;
43970: LD_ADDR_OWVAR 33
43974: PUSH
43975: LD_STRING 
43977: ST_TO_ADDR
// end ;
43978: LD_VAR 0 1
43982: RET
// export function PrepareFrog ( ) ; begin
43983: LD_INT 0
43985: PPUSH
// uc_side := 0 ;
43986: LD_ADDR_OWVAR 20
43990: PUSH
43991: LD_INT 0
43993: ST_TO_ADDR
// uc_nation := 0 ;
43994: LD_ADDR_OWVAR 21
43998: PUSH
43999: LD_INT 0
44001: ST_TO_ADDR
// hc_class := class_frog ;
44002: LD_ADDR_OWVAR 28
44006: PUSH
44007: LD_INT 19
44009: ST_TO_ADDR
// hc_gallery :=  ;
44010: LD_ADDR_OWVAR 33
44014: PUSH
44015: LD_STRING 
44017: ST_TO_ADDR
// end ;
44018: LD_VAR 0 1
44022: RET
// export function PrepareFish ( ) ; begin
44023: LD_INT 0
44025: PPUSH
// uc_side := 0 ;
44026: LD_ADDR_OWVAR 20
44030: PUSH
44031: LD_INT 0
44033: ST_TO_ADDR
// uc_nation := 0 ;
44034: LD_ADDR_OWVAR 21
44038: PUSH
44039: LD_INT 0
44041: ST_TO_ADDR
// hc_class := class_fish ;
44042: LD_ADDR_OWVAR 28
44046: PUSH
44047: LD_INT 20
44049: ST_TO_ADDR
// hc_gallery :=  ;
44050: LD_ADDR_OWVAR 33
44054: PUSH
44055: LD_STRING 
44057: ST_TO_ADDR
// end ;
44058: LD_VAR 0 1
44062: RET
// export function PrepareBird ( ) ; begin
44063: LD_INT 0
44065: PPUSH
// uc_side := 0 ;
44066: LD_ADDR_OWVAR 20
44070: PUSH
44071: LD_INT 0
44073: ST_TO_ADDR
// uc_nation := 0 ;
44074: LD_ADDR_OWVAR 21
44078: PUSH
44079: LD_INT 0
44081: ST_TO_ADDR
// hc_class := class_phororhacos ;
44082: LD_ADDR_OWVAR 28
44086: PUSH
44087: LD_INT 18
44089: ST_TO_ADDR
// hc_gallery :=  ;
44090: LD_ADDR_OWVAR 33
44094: PUSH
44095: LD_STRING 
44097: ST_TO_ADDR
// end ;
44098: LD_VAR 0 1
44102: RET
// export function PrepareHorse ( ) ; begin
44103: LD_INT 0
44105: PPUSH
// uc_side := 0 ;
44106: LD_ADDR_OWVAR 20
44110: PUSH
44111: LD_INT 0
44113: ST_TO_ADDR
// uc_nation := 0 ;
44114: LD_ADDR_OWVAR 21
44118: PUSH
44119: LD_INT 0
44121: ST_TO_ADDR
// hc_class := 21 ;
44122: LD_ADDR_OWVAR 28
44126: PUSH
44127: LD_INT 21
44129: ST_TO_ADDR
// hc_gallery :=  ;
44130: LD_ADDR_OWVAR 33
44134: PUSH
44135: LD_STRING 
44137: ST_TO_ADDR
// end ;
44138: LD_VAR 0 1
44142: RET
// export function PrepareMastodont ( ) ; begin
44143: LD_INT 0
44145: PPUSH
// uc_side := 0 ;
44146: LD_ADDR_OWVAR 20
44150: PUSH
44151: LD_INT 0
44153: ST_TO_ADDR
// uc_nation := 0 ;
44154: LD_ADDR_OWVAR 21
44158: PUSH
44159: LD_INT 0
44161: ST_TO_ADDR
// vc_chassis := 31 ;
44162: LD_ADDR_OWVAR 37
44166: PUSH
44167: LD_INT 31
44169: ST_TO_ADDR
// vc_control := control_rider ;
44170: LD_ADDR_OWVAR 38
44174: PUSH
44175: LD_INT 4
44177: ST_TO_ADDR
// end ;
44178: LD_VAR 0 1
44182: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44183: LD_INT 0
44185: PPUSH
44186: PPUSH
44187: PPUSH
// uc_side = 0 ;
44188: LD_ADDR_OWVAR 20
44192: PUSH
44193: LD_INT 0
44195: ST_TO_ADDR
// uc_nation = 0 ;
44196: LD_ADDR_OWVAR 21
44200: PUSH
44201: LD_INT 0
44203: ST_TO_ADDR
// InitHc_All ( ) ;
44204: CALL_OW 584
// InitVc ;
44208: CALL_OW 20
// if mastodonts then
44212: LD_VAR 0 6
44216: IFFALSE 44283
// for i = 1 to mastodonts do
44218: LD_ADDR_VAR 0 11
44222: PUSH
44223: DOUBLE
44224: LD_INT 1
44226: DEC
44227: ST_TO_ADDR
44228: LD_VAR 0 6
44232: PUSH
44233: FOR_TO
44234: IFFALSE 44281
// begin vc_chassis := 31 ;
44236: LD_ADDR_OWVAR 37
44240: PUSH
44241: LD_INT 31
44243: ST_TO_ADDR
// vc_control := control_rider ;
44244: LD_ADDR_OWVAR 38
44248: PUSH
44249: LD_INT 4
44251: ST_TO_ADDR
// animal := CreateVehicle ;
44252: LD_ADDR_VAR 0 12
44256: PUSH
44257: CALL_OW 45
44261: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44262: LD_VAR 0 12
44266: PPUSH
44267: LD_VAR 0 8
44271: PPUSH
44272: LD_INT 0
44274: PPUSH
44275: CALL 46418 0 3
// end ;
44279: GO 44233
44281: POP
44282: POP
// if horses then
44283: LD_VAR 0 5
44287: IFFALSE 44354
// for i = 1 to horses do
44289: LD_ADDR_VAR 0 11
44293: PUSH
44294: DOUBLE
44295: LD_INT 1
44297: DEC
44298: ST_TO_ADDR
44299: LD_VAR 0 5
44303: PUSH
44304: FOR_TO
44305: IFFALSE 44352
// begin hc_class := 21 ;
44307: LD_ADDR_OWVAR 28
44311: PUSH
44312: LD_INT 21
44314: ST_TO_ADDR
// hc_gallery :=  ;
44315: LD_ADDR_OWVAR 33
44319: PUSH
44320: LD_STRING 
44322: ST_TO_ADDR
// animal := CreateHuman ;
44323: LD_ADDR_VAR 0 12
44327: PUSH
44328: CALL_OW 44
44332: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44333: LD_VAR 0 12
44337: PPUSH
44338: LD_VAR 0 8
44342: PPUSH
44343: LD_INT 0
44345: PPUSH
44346: CALL 46418 0 3
// end ;
44350: GO 44304
44352: POP
44353: POP
// if birds then
44354: LD_VAR 0 1
44358: IFFALSE 44425
// for i = 1 to birds do
44360: LD_ADDR_VAR 0 11
44364: PUSH
44365: DOUBLE
44366: LD_INT 1
44368: DEC
44369: ST_TO_ADDR
44370: LD_VAR 0 1
44374: PUSH
44375: FOR_TO
44376: IFFALSE 44423
// begin hc_class = 18 ;
44378: LD_ADDR_OWVAR 28
44382: PUSH
44383: LD_INT 18
44385: ST_TO_ADDR
// hc_gallery =  ;
44386: LD_ADDR_OWVAR 33
44390: PUSH
44391: LD_STRING 
44393: ST_TO_ADDR
// animal := CreateHuman ;
44394: LD_ADDR_VAR 0 12
44398: PUSH
44399: CALL_OW 44
44403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44404: LD_VAR 0 12
44408: PPUSH
44409: LD_VAR 0 8
44413: PPUSH
44414: LD_INT 0
44416: PPUSH
44417: CALL 46418 0 3
// end ;
44421: GO 44375
44423: POP
44424: POP
// if tigers then
44425: LD_VAR 0 2
44429: IFFALSE 44513
// for i = 1 to tigers do
44431: LD_ADDR_VAR 0 11
44435: PUSH
44436: DOUBLE
44437: LD_INT 1
44439: DEC
44440: ST_TO_ADDR
44441: LD_VAR 0 2
44445: PUSH
44446: FOR_TO
44447: IFFALSE 44511
// begin hc_class = class_tiger ;
44449: LD_ADDR_OWVAR 28
44453: PUSH
44454: LD_INT 14
44456: ST_TO_ADDR
// hc_gallery =  ;
44457: LD_ADDR_OWVAR 33
44461: PUSH
44462: LD_STRING 
44464: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44465: LD_ADDR_OWVAR 35
44469: PUSH
44470: LD_INT 7
44472: NEG
44473: PPUSH
44474: LD_INT 7
44476: PPUSH
44477: CALL_OW 12
44481: ST_TO_ADDR
// animal := CreateHuman ;
44482: LD_ADDR_VAR 0 12
44486: PUSH
44487: CALL_OW 44
44491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44492: LD_VAR 0 12
44496: PPUSH
44497: LD_VAR 0 8
44501: PPUSH
44502: LD_INT 0
44504: PPUSH
44505: CALL 46418 0 3
// end ;
44509: GO 44446
44511: POP
44512: POP
// if apemans then
44513: LD_VAR 0 3
44517: IFFALSE 44640
// for i = 1 to apemans do
44519: LD_ADDR_VAR 0 11
44523: PUSH
44524: DOUBLE
44525: LD_INT 1
44527: DEC
44528: ST_TO_ADDR
44529: LD_VAR 0 3
44533: PUSH
44534: FOR_TO
44535: IFFALSE 44638
// begin hc_class = class_apeman ;
44537: LD_ADDR_OWVAR 28
44541: PUSH
44542: LD_INT 12
44544: ST_TO_ADDR
// hc_gallery =  ;
44545: LD_ADDR_OWVAR 33
44549: PUSH
44550: LD_STRING 
44552: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44553: LD_ADDR_OWVAR 35
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PPUSH
44562: LD_INT 2
44564: PPUSH
44565: CALL_OW 12
44569: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
44570: LD_ADDR_OWVAR 31
44574: PUSH
44575: LD_INT 1
44577: PPUSH
44578: LD_INT 3
44580: PPUSH
44581: CALL_OW 12
44585: PUSH
44586: LD_INT 1
44588: PPUSH
44589: LD_INT 3
44591: PPUSH
44592: CALL_OW 12
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: ST_TO_ADDR
// animal := CreateHuman ;
44609: LD_ADDR_VAR 0 12
44613: PUSH
44614: CALL_OW 44
44618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44619: LD_VAR 0 12
44623: PPUSH
44624: LD_VAR 0 8
44628: PPUSH
44629: LD_INT 0
44631: PPUSH
44632: CALL 46418 0 3
// end ;
44636: GO 44534
44638: POP
44639: POP
// if enchidnas then
44640: LD_VAR 0 4
44644: IFFALSE 44711
// for i = 1 to enchidnas do
44646: LD_ADDR_VAR 0 11
44650: PUSH
44651: DOUBLE
44652: LD_INT 1
44654: DEC
44655: ST_TO_ADDR
44656: LD_VAR 0 4
44660: PUSH
44661: FOR_TO
44662: IFFALSE 44709
// begin hc_class = 13 ;
44664: LD_ADDR_OWVAR 28
44668: PUSH
44669: LD_INT 13
44671: ST_TO_ADDR
// hc_gallery =  ;
44672: LD_ADDR_OWVAR 33
44676: PUSH
44677: LD_STRING 
44679: ST_TO_ADDR
// animal := CreateHuman ;
44680: LD_ADDR_VAR 0 12
44684: PUSH
44685: CALL_OW 44
44689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44690: LD_VAR 0 12
44694: PPUSH
44695: LD_VAR 0 8
44699: PPUSH
44700: LD_INT 0
44702: PPUSH
44703: CALL 46418 0 3
// end ;
44707: GO 44661
44709: POP
44710: POP
// if fishes then
44711: LD_VAR 0 7
44715: IFFALSE 44782
// for i = 1 to fishes do
44717: LD_ADDR_VAR 0 11
44721: PUSH
44722: DOUBLE
44723: LD_INT 1
44725: DEC
44726: ST_TO_ADDR
44727: LD_VAR 0 7
44731: PUSH
44732: FOR_TO
44733: IFFALSE 44780
// begin hc_class = 20 ;
44735: LD_ADDR_OWVAR 28
44739: PUSH
44740: LD_INT 20
44742: ST_TO_ADDR
// hc_gallery =  ;
44743: LD_ADDR_OWVAR 33
44747: PUSH
44748: LD_STRING 
44750: ST_TO_ADDR
// animal := CreateHuman ;
44751: LD_ADDR_VAR 0 12
44755: PUSH
44756: CALL_OW 44
44760: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
44761: LD_VAR 0 12
44765: PPUSH
44766: LD_VAR 0 9
44770: PPUSH
44771: LD_INT 0
44773: PPUSH
44774: CALL 46418 0 3
// end ;
44778: GO 44732
44780: POP
44781: POP
// end ;
44782: LD_VAR 0 10
44786: RET
// export function WantHeal ( sci , unit ) ; begin
44787: LD_INT 0
44789: PPUSH
// if GetTaskList ( sci ) > 0 then
44790: LD_VAR 0 1
44794: PPUSH
44795: CALL_OW 437
44799: PUSH
44800: LD_INT 0
44802: GREATER
44803: IFFALSE 44873
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44805: LD_VAR 0 1
44809: PPUSH
44810: CALL_OW 437
44814: PUSH
44815: LD_INT 1
44817: ARRAY
44818: PUSH
44819: LD_INT 1
44821: ARRAY
44822: PUSH
44823: LD_STRING l
44825: EQUAL
44826: PUSH
44827: LD_VAR 0 1
44831: PPUSH
44832: CALL_OW 437
44836: PUSH
44837: LD_INT 1
44839: ARRAY
44840: PUSH
44841: LD_INT 4
44843: ARRAY
44844: PUSH
44845: LD_VAR 0 2
44849: EQUAL
44850: AND
44851: IFFALSE 44863
// result := true else
44853: LD_ADDR_VAR 0 3
44857: PUSH
44858: LD_INT 1
44860: ST_TO_ADDR
44861: GO 44871
// result := false ;
44863: LD_ADDR_VAR 0 3
44867: PUSH
44868: LD_INT 0
44870: ST_TO_ADDR
// end else
44871: GO 44881
// result := false ;
44873: LD_ADDR_VAR 0 3
44877: PUSH
44878: LD_INT 0
44880: ST_TO_ADDR
// end ;
44881: LD_VAR 0 3
44885: RET
// export function HealTarget ( sci ) ; begin
44886: LD_INT 0
44888: PPUSH
// if not sci then
44889: LD_VAR 0 1
44893: NOT
44894: IFFALSE 44898
// exit ;
44896: GO 44963
// result := 0 ;
44898: LD_ADDR_VAR 0 2
44902: PUSH
44903: LD_INT 0
44905: ST_TO_ADDR
// if GetTaskList ( sci ) then
44906: LD_VAR 0 1
44910: PPUSH
44911: CALL_OW 437
44915: IFFALSE 44963
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44917: LD_VAR 0 1
44921: PPUSH
44922: CALL_OW 437
44926: PUSH
44927: LD_INT 1
44929: ARRAY
44930: PUSH
44931: LD_INT 1
44933: ARRAY
44934: PUSH
44935: LD_STRING l
44937: EQUAL
44938: IFFALSE 44963
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44940: LD_ADDR_VAR 0 2
44944: PUSH
44945: LD_VAR 0 1
44949: PPUSH
44950: CALL_OW 437
44954: PUSH
44955: LD_INT 1
44957: ARRAY
44958: PUSH
44959: LD_INT 4
44961: ARRAY
44962: ST_TO_ADDR
// end ;
44963: LD_VAR 0 2
44967: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44968: LD_INT 0
44970: PPUSH
44971: PPUSH
44972: PPUSH
44973: PPUSH
// if not base_units then
44974: LD_VAR 0 1
44978: NOT
44979: IFFALSE 44983
// exit ;
44981: GO 45070
// result := false ;
44983: LD_ADDR_VAR 0 2
44987: PUSH
44988: LD_INT 0
44990: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44991: LD_ADDR_VAR 0 5
44995: PUSH
44996: LD_VAR 0 1
45000: PPUSH
45001: LD_INT 21
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PPUSH
45011: CALL_OW 72
45015: ST_TO_ADDR
// if not tmp then
45016: LD_VAR 0 5
45020: NOT
45021: IFFALSE 45025
// exit ;
45023: GO 45070
// for i in tmp do
45025: LD_ADDR_VAR 0 3
45029: PUSH
45030: LD_VAR 0 5
45034: PUSH
45035: FOR_IN
45036: IFFALSE 45068
// begin result := EnemyInRange ( i , 22 ) ;
45038: LD_ADDR_VAR 0 2
45042: PUSH
45043: LD_VAR 0 3
45047: PPUSH
45048: LD_INT 22
45050: PPUSH
45051: CALL 42739 0 2
45055: ST_TO_ADDR
// if result then
45056: LD_VAR 0 2
45060: IFFALSE 45066
// exit ;
45062: POP
45063: POP
45064: GO 45070
// end ;
45066: GO 45035
45068: POP
45069: POP
// end ;
45070: LD_VAR 0 2
45074: RET
// export function FilterByTag ( units , tag ) ; begin
45075: LD_INT 0
45077: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45078: LD_ADDR_VAR 0 3
45082: PUSH
45083: LD_VAR 0 1
45087: PPUSH
45088: LD_INT 120
45090: PUSH
45091: LD_VAR 0 2
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PPUSH
45100: CALL_OW 72
45104: ST_TO_ADDR
// end ;
45105: LD_VAR 0 3
45109: RET
// export function IsDriver ( un ) ; begin
45110: LD_INT 0
45112: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45113: LD_ADDR_VAR 0 2
45117: PUSH
45118: LD_VAR 0 1
45122: PUSH
45123: LD_INT 55
45125: PUSH
45126: EMPTY
45127: LIST
45128: PPUSH
45129: CALL_OW 69
45133: IN
45134: ST_TO_ADDR
// end ;
45135: LD_VAR 0 2
45139: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45140: LD_INT 0
45142: PPUSH
45143: PPUSH
// list := [ ] ;
45144: LD_ADDR_VAR 0 5
45148: PUSH
45149: EMPTY
45150: ST_TO_ADDR
// case d of 0 :
45151: LD_VAR 0 3
45155: PUSH
45156: LD_INT 0
45158: DOUBLE
45159: EQUAL
45160: IFTRUE 45164
45162: GO 45297
45164: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45165: LD_ADDR_VAR 0 5
45169: PUSH
45170: LD_VAR 0 1
45174: PUSH
45175: LD_INT 4
45177: MINUS
45178: PUSH
45179: LD_VAR 0 2
45183: PUSH
45184: LD_INT 4
45186: MINUS
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: LIST
45195: PUSH
45196: LD_VAR 0 1
45200: PUSH
45201: LD_INT 3
45203: MINUS
45204: PUSH
45205: LD_VAR 0 2
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: LIST
45217: PUSH
45218: LD_VAR 0 1
45222: PUSH
45223: LD_INT 4
45225: PLUS
45226: PUSH
45227: LD_VAR 0 2
45231: PUSH
45232: LD_INT 4
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: LIST
45239: PUSH
45240: LD_VAR 0 1
45244: PUSH
45245: LD_INT 3
45247: PLUS
45248: PUSH
45249: LD_VAR 0 2
45253: PUSH
45254: LD_INT 3
45256: PLUS
45257: PUSH
45258: LD_INT 5
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: PUSH
45266: LD_VAR 0 1
45270: PUSH
45271: LD_VAR 0 2
45275: PUSH
45276: LD_INT 4
45278: PLUS
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: ST_TO_ADDR
// end ; 1 :
45295: GO 45995
45297: LD_INT 1
45299: DOUBLE
45300: EQUAL
45301: IFTRUE 45305
45303: GO 45438
45305: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45306: LD_ADDR_VAR 0 5
45310: PUSH
45311: LD_VAR 0 1
45315: PUSH
45316: LD_VAR 0 2
45320: PUSH
45321: LD_INT 4
45323: MINUS
45324: PUSH
45325: LD_INT 3
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: LIST
45332: PUSH
45333: LD_VAR 0 1
45337: PUSH
45338: LD_INT 3
45340: MINUS
45341: PUSH
45342: LD_VAR 0 2
45346: PUSH
45347: LD_INT 3
45349: MINUS
45350: PUSH
45351: LD_INT 2
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: LIST
45358: PUSH
45359: LD_VAR 0 1
45363: PUSH
45364: LD_INT 4
45366: MINUS
45367: PUSH
45368: LD_VAR 0 2
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: LIST
45380: PUSH
45381: LD_VAR 0 1
45385: PUSH
45386: LD_VAR 0 2
45390: PUSH
45391: LD_INT 3
45393: PLUS
45394: PUSH
45395: LD_INT 0
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: LIST
45402: PUSH
45403: LD_VAR 0 1
45407: PUSH
45408: LD_INT 4
45410: PLUS
45411: PUSH
45412: LD_VAR 0 2
45416: PUSH
45417: LD_INT 4
45419: PLUS
45420: PUSH
45421: LD_INT 5
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: ST_TO_ADDR
// end ; 2 :
45436: GO 45995
45438: LD_INT 2
45440: DOUBLE
45441: EQUAL
45442: IFTRUE 45446
45444: GO 45575
45446: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45447: LD_ADDR_VAR 0 5
45451: PUSH
45452: LD_VAR 0 1
45456: PUSH
45457: LD_VAR 0 2
45461: PUSH
45462: LD_INT 3
45464: MINUS
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: PUSH
45474: LD_VAR 0 1
45478: PUSH
45479: LD_INT 4
45481: PLUS
45482: PUSH
45483: LD_VAR 0 2
45487: PUSH
45488: LD_INT 4
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: LIST
45495: PUSH
45496: LD_VAR 0 1
45500: PUSH
45501: LD_VAR 0 2
45505: PUSH
45506: LD_INT 4
45508: PLUS
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: PUSH
45518: LD_VAR 0 1
45522: PUSH
45523: LD_INT 3
45525: MINUS
45526: PUSH
45527: LD_VAR 0 2
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: LIST
45539: PUSH
45540: LD_VAR 0 1
45544: PUSH
45545: LD_INT 4
45547: MINUS
45548: PUSH
45549: LD_VAR 0 2
45553: PUSH
45554: LD_INT 4
45556: MINUS
45557: PUSH
45558: LD_INT 2
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: LIST
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: ST_TO_ADDR
// end ; 3 :
45573: GO 45995
45575: LD_INT 3
45577: DOUBLE
45578: EQUAL
45579: IFTRUE 45583
45581: GO 45716
45583: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
45584: LD_ADDR_VAR 0 5
45588: PUSH
45589: LD_VAR 0 1
45593: PUSH
45594: LD_INT 3
45596: PLUS
45597: PUSH
45598: LD_VAR 0 2
45602: PUSH
45603: LD_INT 4
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: LIST
45610: PUSH
45611: LD_VAR 0 1
45615: PUSH
45616: LD_INT 4
45618: PLUS
45619: PUSH
45620: LD_VAR 0 2
45624: PUSH
45625: LD_INT 4
45627: PLUS
45628: PUSH
45629: LD_INT 5
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: LIST
45636: PUSH
45637: LD_VAR 0 1
45641: PUSH
45642: LD_INT 4
45644: MINUS
45645: PUSH
45646: LD_VAR 0 2
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: LIST
45658: PUSH
45659: LD_VAR 0 1
45663: PUSH
45664: LD_VAR 0 2
45668: PUSH
45669: LD_INT 4
45671: MINUS
45672: PUSH
45673: LD_INT 3
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: LIST
45680: PUSH
45681: LD_VAR 0 1
45685: PUSH
45686: LD_INT 3
45688: MINUS
45689: PUSH
45690: LD_VAR 0 2
45694: PUSH
45695: LD_INT 3
45697: MINUS
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: LIST
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: ST_TO_ADDR
// end ; 4 :
45714: GO 45995
45716: LD_INT 4
45718: DOUBLE
45719: EQUAL
45720: IFTRUE 45724
45722: GO 45857
45724: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
45725: LD_ADDR_VAR 0 5
45729: PUSH
45730: LD_VAR 0 1
45734: PUSH
45735: LD_VAR 0 2
45739: PUSH
45740: LD_INT 4
45742: PLUS
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: LIST
45751: PUSH
45752: LD_VAR 0 1
45756: PUSH
45757: LD_INT 3
45759: PLUS
45760: PUSH
45761: LD_VAR 0 2
45765: PUSH
45766: LD_INT 3
45768: PLUS
45769: PUSH
45770: LD_INT 5
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: LIST
45777: PUSH
45778: LD_VAR 0 1
45782: PUSH
45783: LD_INT 4
45785: PLUS
45786: PUSH
45787: LD_VAR 0 2
45791: PUSH
45792: LD_INT 4
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: LIST
45799: PUSH
45800: LD_VAR 0 1
45804: PUSH
45805: LD_VAR 0 2
45809: PUSH
45810: LD_INT 3
45812: MINUS
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: PUSH
45822: LD_VAR 0 1
45826: PUSH
45827: LD_INT 4
45829: MINUS
45830: PUSH
45831: LD_VAR 0 2
45835: PUSH
45836: LD_INT 4
45838: MINUS
45839: PUSH
45840: LD_INT 2
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: LIST
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: ST_TO_ADDR
// end ; 5 :
45855: GO 45995
45857: LD_INT 5
45859: DOUBLE
45860: EQUAL
45861: IFTRUE 45865
45863: GO 45994
45865: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45866: LD_ADDR_VAR 0 5
45870: PUSH
45871: LD_VAR 0 1
45875: PUSH
45876: LD_INT 4
45878: MINUS
45879: PUSH
45880: LD_VAR 0 2
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: PUSH
45893: LD_VAR 0 1
45897: PUSH
45898: LD_VAR 0 2
45902: PUSH
45903: LD_INT 4
45905: MINUS
45906: PUSH
45907: LD_INT 3
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: LIST
45914: PUSH
45915: LD_VAR 0 1
45919: PUSH
45920: LD_INT 4
45922: PLUS
45923: PUSH
45924: LD_VAR 0 2
45928: PUSH
45929: LD_INT 4
45931: PLUS
45932: PUSH
45933: LD_INT 5
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: LIST
45940: PUSH
45941: LD_VAR 0 1
45945: PUSH
45946: LD_INT 3
45948: PLUS
45949: PUSH
45950: LD_VAR 0 2
45954: PUSH
45955: LD_INT 4
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: PUSH
45963: LD_VAR 0 1
45967: PUSH
45968: LD_VAR 0 2
45972: PUSH
45973: LD_INT 3
45975: PLUS
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: LIST
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: ST_TO_ADDR
// end ; end ;
45992: GO 45995
45994: POP
// result := list ;
45995: LD_ADDR_VAR 0 4
45999: PUSH
46000: LD_VAR 0 5
46004: ST_TO_ADDR
// end ;
46005: LD_VAR 0 4
46009: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46010: LD_INT 0
46012: PPUSH
46013: PPUSH
46014: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46015: LD_VAR 0 1
46019: NOT
46020: PUSH
46021: LD_VAR 0 2
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 3
46034: PUSH
46035: LD_INT 4
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: IN
46044: NOT
46045: OR
46046: IFFALSE 46050
// exit ;
46048: GO 46142
// tmp := [ ] ;
46050: LD_ADDR_VAR 0 5
46054: PUSH
46055: EMPTY
46056: ST_TO_ADDR
// for i in units do
46057: LD_ADDR_VAR 0 4
46061: PUSH
46062: LD_VAR 0 1
46066: PUSH
46067: FOR_IN
46068: IFFALSE 46111
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
46070: LD_ADDR_VAR 0 5
46074: PUSH
46075: LD_VAR 0 5
46079: PPUSH
46080: LD_VAR 0 5
46084: PUSH
46085: LD_INT 1
46087: PLUS
46088: PPUSH
46089: LD_VAR 0 4
46093: PPUSH
46094: LD_VAR 0 2
46098: PPUSH
46099: CALL_OW 259
46103: PPUSH
46104: CALL_OW 2
46108: ST_TO_ADDR
46109: GO 46067
46111: POP
46112: POP
// if not tmp then
46113: LD_VAR 0 5
46117: NOT
46118: IFFALSE 46122
// exit ;
46120: GO 46142
// result := SortListByListDesc ( units , tmp ) ;
46122: LD_ADDR_VAR 0 3
46126: PUSH
46127: LD_VAR 0 1
46131: PPUSH
46132: LD_VAR 0 5
46136: PPUSH
46137: CALL_OW 77
46141: ST_TO_ADDR
// end ;
46142: LD_VAR 0 3
46146: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46147: LD_INT 0
46149: PPUSH
46150: PPUSH
46151: PPUSH
// result := false ;
46152: LD_ADDR_VAR 0 3
46156: PUSH
46157: LD_INT 0
46159: ST_TO_ADDR
// x := GetX ( building ) ;
46160: LD_ADDR_VAR 0 4
46164: PUSH
46165: LD_VAR 0 2
46169: PPUSH
46170: CALL_OW 250
46174: ST_TO_ADDR
// y := GetY ( building ) ;
46175: LD_ADDR_VAR 0 5
46179: PUSH
46180: LD_VAR 0 2
46184: PPUSH
46185: CALL_OW 251
46189: ST_TO_ADDR
// if not building or not x or not y then
46190: LD_VAR 0 2
46194: NOT
46195: PUSH
46196: LD_VAR 0 4
46200: NOT
46201: OR
46202: PUSH
46203: LD_VAR 0 5
46207: NOT
46208: OR
46209: IFFALSE 46213
// exit ;
46211: GO 46305
// if GetTaskList ( unit ) then
46213: LD_VAR 0 1
46217: PPUSH
46218: CALL_OW 437
46222: IFFALSE 46305
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46224: LD_STRING e
46226: PUSH
46227: LD_VAR 0 1
46231: PPUSH
46232: CALL_OW 437
46236: PUSH
46237: LD_INT 1
46239: ARRAY
46240: PUSH
46241: LD_INT 1
46243: ARRAY
46244: EQUAL
46245: PUSH
46246: LD_VAR 0 4
46250: PUSH
46251: LD_VAR 0 1
46255: PPUSH
46256: CALL_OW 437
46260: PUSH
46261: LD_INT 1
46263: ARRAY
46264: PUSH
46265: LD_INT 2
46267: ARRAY
46268: EQUAL
46269: AND
46270: PUSH
46271: LD_VAR 0 5
46275: PUSH
46276: LD_VAR 0 1
46280: PPUSH
46281: CALL_OW 437
46285: PUSH
46286: LD_INT 1
46288: ARRAY
46289: PUSH
46290: LD_INT 3
46292: ARRAY
46293: EQUAL
46294: AND
46295: IFFALSE 46305
// result := true end ;
46297: LD_ADDR_VAR 0 3
46301: PUSH
46302: LD_INT 1
46304: ST_TO_ADDR
// end ;
46305: LD_VAR 0 3
46309: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46310: LD_INT 0
46312: PPUSH
// result := false ;
46313: LD_ADDR_VAR 0 4
46317: PUSH
46318: LD_INT 0
46320: ST_TO_ADDR
// if GetTaskList ( unit ) then
46321: LD_VAR 0 1
46325: PPUSH
46326: CALL_OW 437
46330: IFFALSE 46413
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46332: LD_STRING M
46334: PUSH
46335: LD_VAR 0 1
46339: PPUSH
46340: CALL_OW 437
46344: PUSH
46345: LD_INT 1
46347: ARRAY
46348: PUSH
46349: LD_INT 1
46351: ARRAY
46352: EQUAL
46353: PUSH
46354: LD_VAR 0 2
46358: PUSH
46359: LD_VAR 0 1
46363: PPUSH
46364: CALL_OW 437
46368: PUSH
46369: LD_INT 1
46371: ARRAY
46372: PUSH
46373: LD_INT 2
46375: ARRAY
46376: EQUAL
46377: AND
46378: PUSH
46379: LD_VAR 0 3
46383: PUSH
46384: LD_VAR 0 1
46388: PPUSH
46389: CALL_OW 437
46393: PUSH
46394: LD_INT 1
46396: ARRAY
46397: PUSH
46398: LD_INT 3
46400: ARRAY
46401: EQUAL
46402: AND
46403: IFFALSE 46413
// result := true ;
46405: LD_ADDR_VAR 0 4
46409: PUSH
46410: LD_INT 1
46412: ST_TO_ADDR
// end ; end ;
46413: LD_VAR 0 4
46417: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46418: LD_INT 0
46420: PPUSH
46421: PPUSH
46422: PPUSH
46423: PPUSH
// if not unit or not area then
46424: LD_VAR 0 1
46428: NOT
46429: PUSH
46430: LD_VAR 0 2
46434: NOT
46435: OR
46436: IFFALSE 46440
// exit ;
46438: GO 46604
// tmp := AreaToList ( area , i ) ;
46440: LD_ADDR_VAR 0 6
46444: PUSH
46445: LD_VAR 0 2
46449: PPUSH
46450: LD_VAR 0 5
46454: PPUSH
46455: CALL_OW 517
46459: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46460: LD_ADDR_VAR 0 5
46464: PUSH
46465: DOUBLE
46466: LD_INT 1
46468: DEC
46469: ST_TO_ADDR
46470: LD_VAR 0 6
46474: PUSH
46475: LD_INT 1
46477: ARRAY
46478: PUSH
46479: FOR_TO
46480: IFFALSE 46602
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46482: LD_ADDR_VAR 0 7
46486: PUSH
46487: LD_VAR 0 6
46491: PUSH
46492: LD_INT 1
46494: ARRAY
46495: PUSH
46496: LD_VAR 0 5
46500: ARRAY
46501: PUSH
46502: LD_VAR 0 6
46506: PUSH
46507: LD_INT 2
46509: ARRAY
46510: PUSH
46511: LD_VAR 0 5
46515: ARRAY
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
46521: LD_VAR 0 7
46525: PUSH
46526: LD_INT 1
46528: ARRAY
46529: PPUSH
46530: LD_VAR 0 7
46534: PUSH
46535: LD_INT 2
46537: ARRAY
46538: PPUSH
46539: CALL_OW 428
46543: PUSH
46544: LD_INT 0
46546: EQUAL
46547: IFFALSE 46600
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46549: LD_VAR 0 1
46553: PPUSH
46554: LD_VAR 0 7
46558: PUSH
46559: LD_INT 1
46561: ARRAY
46562: PPUSH
46563: LD_VAR 0 7
46567: PUSH
46568: LD_INT 2
46570: ARRAY
46571: PPUSH
46572: LD_VAR 0 3
46576: PPUSH
46577: CALL_OW 48
// result := IsPlaced ( unit ) ;
46581: LD_ADDR_VAR 0 4
46585: PUSH
46586: LD_VAR 0 1
46590: PPUSH
46591: CALL_OW 305
46595: ST_TO_ADDR
// exit ;
46596: POP
46597: POP
46598: GO 46604
// end ; end ;
46600: GO 46479
46602: POP
46603: POP
// end ;
46604: LD_VAR 0 4
46608: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
46609: LD_INT 0
46611: PPUSH
46612: PPUSH
46613: PPUSH
// if not side or side > 8 then
46614: LD_VAR 0 1
46618: NOT
46619: PUSH
46620: LD_VAR 0 1
46624: PUSH
46625: LD_INT 8
46627: GREATER
46628: OR
46629: IFFALSE 46633
// exit ;
46631: GO 46820
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
46633: LD_ADDR_VAR 0 4
46637: PUSH
46638: LD_INT 22
46640: PUSH
46641: LD_VAR 0 1
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 21
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PPUSH
46664: CALL_OW 69
46668: ST_TO_ADDR
// if not tmp then
46669: LD_VAR 0 4
46673: NOT
46674: IFFALSE 46678
// exit ;
46676: GO 46820
// enable_addtolog := true ;
46678: LD_ADDR_OWVAR 81
46682: PUSH
46683: LD_INT 1
46685: ST_TO_ADDR
// AddToLog ( [ ) ;
46686: LD_STRING [
46688: PPUSH
46689: CALL_OW 561
// for i in tmp do
46693: LD_ADDR_VAR 0 3
46697: PUSH
46698: LD_VAR 0 4
46702: PUSH
46703: FOR_IN
46704: IFFALSE 46811
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
46706: LD_STRING [
46708: PUSH
46709: LD_VAR 0 3
46713: PPUSH
46714: CALL_OW 266
46718: STR
46719: PUSH
46720: LD_STRING , 
46722: STR
46723: PUSH
46724: LD_VAR 0 3
46728: PPUSH
46729: CALL_OW 250
46733: STR
46734: PUSH
46735: LD_STRING , 
46737: STR
46738: PUSH
46739: LD_VAR 0 3
46743: PPUSH
46744: CALL_OW 251
46748: STR
46749: PUSH
46750: LD_STRING , 
46752: STR
46753: PUSH
46754: LD_VAR 0 3
46758: PPUSH
46759: CALL_OW 254
46763: STR
46764: PUSH
46765: LD_STRING , 
46767: STR
46768: PUSH
46769: LD_VAR 0 3
46773: PPUSH
46774: LD_INT 1
46776: PPUSH
46777: CALL_OW 268
46781: STR
46782: PUSH
46783: LD_STRING , 
46785: STR
46786: PUSH
46787: LD_VAR 0 3
46791: PPUSH
46792: LD_INT 2
46794: PPUSH
46795: CALL_OW 268
46799: STR
46800: PUSH
46801: LD_STRING ],
46803: STR
46804: PPUSH
46805: CALL_OW 561
// end ;
46809: GO 46703
46811: POP
46812: POP
// AddToLog ( ]; ) ;
46813: LD_STRING ];
46815: PPUSH
46816: CALL_OW 561
// end ;
46820: LD_VAR 0 2
46824: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46825: LD_INT 0
46827: PPUSH
46828: PPUSH
46829: PPUSH
46830: PPUSH
46831: PPUSH
// if not area or not rate or not max then
46832: LD_VAR 0 1
46836: NOT
46837: PUSH
46838: LD_VAR 0 2
46842: NOT
46843: OR
46844: PUSH
46845: LD_VAR 0 4
46849: NOT
46850: OR
46851: IFFALSE 46855
// exit ;
46853: GO 47044
// while 1 do
46855: LD_INT 1
46857: IFFALSE 47044
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46859: LD_ADDR_VAR 0 9
46863: PUSH
46864: LD_VAR 0 1
46868: PPUSH
46869: LD_INT 1
46871: PPUSH
46872: CALL_OW 287
46876: PUSH
46877: LD_INT 10
46879: MUL
46880: ST_TO_ADDR
// r := rate / 10 ;
46881: LD_ADDR_VAR 0 7
46885: PUSH
46886: LD_VAR 0 2
46890: PUSH
46891: LD_INT 10
46893: DIVREAL
46894: ST_TO_ADDR
// time := 1 1$00 ;
46895: LD_ADDR_VAR 0 8
46899: PUSH
46900: LD_INT 2100
46902: ST_TO_ADDR
// if amount < min then
46903: LD_VAR 0 9
46907: PUSH
46908: LD_VAR 0 3
46912: LESS
46913: IFFALSE 46931
// r := r * 2 else
46915: LD_ADDR_VAR 0 7
46919: PUSH
46920: LD_VAR 0 7
46924: PUSH
46925: LD_INT 2
46927: MUL
46928: ST_TO_ADDR
46929: GO 46957
// if amount > max then
46931: LD_VAR 0 9
46935: PUSH
46936: LD_VAR 0 4
46940: GREATER
46941: IFFALSE 46957
// r := r / 2 ;
46943: LD_ADDR_VAR 0 7
46947: PUSH
46948: LD_VAR 0 7
46952: PUSH
46953: LD_INT 2
46955: DIVREAL
46956: ST_TO_ADDR
// time := time / r ;
46957: LD_ADDR_VAR 0 8
46961: PUSH
46962: LD_VAR 0 8
46966: PUSH
46967: LD_VAR 0 7
46971: DIVREAL
46972: ST_TO_ADDR
// if time < 0 then
46973: LD_VAR 0 8
46977: PUSH
46978: LD_INT 0
46980: LESS
46981: IFFALSE 46998
// time := time * - 1 ;
46983: LD_ADDR_VAR 0 8
46987: PUSH
46988: LD_VAR 0 8
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: MUL
46997: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46998: LD_VAR 0 8
47002: PUSH
47003: LD_INT 35
47005: PPUSH
47006: LD_INT 875
47008: PPUSH
47009: CALL_OW 12
47013: PLUS
47014: PPUSH
47015: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47019: LD_INT 1
47021: PPUSH
47022: LD_INT 5
47024: PPUSH
47025: CALL_OW 12
47029: PPUSH
47030: LD_VAR 0 1
47034: PPUSH
47035: LD_INT 1
47037: PPUSH
47038: CALL_OW 55
// end ;
47042: GO 46855
// end ;
47044: LD_VAR 0 5
47048: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47049: LD_INT 0
47051: PPUSH
47052: PPUSH
47053: PPUSH
47054: PPUSH
47055: PPUSH
47056: PPUSH
47057: PPUSH
47058: PPUSH
// if not turrets or not factories then
47059: LD_VAR 0 1
47063: NOT
47064: PUSH
47065: LD_VAR 0 2
47069: NOT
47070: OR
47071: IFFALSE 47075
// exit ;
47073: GO 47382
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47075: LD_ADDR_VAR 0 10
47079: PUSH
47080: LD_INT 5
47082: PUSH
47083: LD_INT 6
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: LD_INT 4
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: LD_INT 5
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 24
47117: PUSH
47118: LD_INT 25
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 23
47127: PUSH
47128: LD_INT 27
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 42
47141: PUSH
47142: LD_INT 43
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 44
47151: PUSH
47152: LD_INT 46
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 45
47161: PUSH
47162: LD_INT 47
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: ST_TO_ADDR
// result := [ ] ;
47179: LD_ADDR_VAR 0 3
47183: PUSH
47184: EMPTY
47185: ST_TO_ADDR
// for i in turrets do
47186: LD_ADDR_VAR 0 4
47190: PUSH
47191: LD_VAR 0 1
47195: PUSH
47196: FOR_IN
47197: IFFALSE 47380
// begin nat := GetNation ( i ) ;
47199: LD_ADDR_VAR 0 7
47203: PUSH
47204: LD_VAR 0 4
47208: PPUSH
47209: CALL_OW 248
47213: ST_TO_ADDR
// weapon := 0 ;
47214: LD_ADDR_VAR 0 8
47218: PUSH
47219: LD_INT 0
47221: ST_TO_ADDR
// if not nat then
47222: LD_VAR 0 7
47226: NOT
47227: IFFALSE 47231
// continue ;
47229: GO 47196
// for j in list [ nat ] do
47231: LD_ADDR_VAR 0 5
47235: PUSH
47236: LD_VAR 0 10
47240: PUSH
47241: LD_VAR 0 7
47245: ARRAY
47246: PUSH
47247: FOR_IN
47248: IFFALSE 47289
// if GetBWeapon ( i ) = j [ 1 ] then
47250: LD_VAR 0 4
47254: PPUSH
47255: CALL_OW 269
47259: PUSH
47260: LD_VAR 0 5
47264: PUSH
47265: LD_INT 1
47267: ARRAY
47268: EQUAL
47269: IFFALSE 47287
// begin weapon := j [ 2 ] ;
47271: LD_ADDR_VAR 0 8
47275: PUSH
47276: LD_VAR 0 5
47280: PUSH
47281: LD_INT 2
47283: ARRAY
47284: ST_TO_ADDR
// break ;
47285: GO 47289
// end ;
47287: GO 47247
47289: POP
47290: POP
// if not weapon then
47291: LD_VAR 0 8
47295: NOT
47296: IFFALSE 47300
// continue ;
47298: GO 47196
// for k in factories do
47300: LD_ADDR_VAR 0 6
47304: PUSH
47305: LD_VAR 0 2
47309: PUSH
47310: FOR_IN
47311: IFFALSE 47376
// begin weapons := AvailableWeaponList ( k ) ;
47313: LD_ADDR_VAR 0 9
47317: PUSH
47318: LD_VAR 0 6
47322: PPUSH
47323: CALL_OW 478
47327: ST_TO_ADDR
// if not weapons then
47328: LD_VAR 0 9
47332: NOT
47333: IFFALSE 47337
// continue ;
47335: GO 47310
// if weapon in weapons then
47337: LD_VAR 0 8
47341: PUSH
47342: LD_VAR 0 9
47346: IN
47347: IFFALSE 47374
// begin result := [ i , weapon ] ;
47349: LD_ADDR_VAR 0 3
47353: PUSH
47354: LD_VAR 0 4
47358: PUSH
47359: LD_VAR 0 8
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: ST_TO_ADDR
// exit ;
47368: POP
47369: POP
47370: POP
47371: POP
47372: GO 47382
// end ; end ;
47374: GO 47310
47376: POP
47377: POP
// end ;
47378: GO 47196
47380: POP
47381: POP
// end ;
47382: LD_VAR 0 3
47386: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47387: LD_INT 0
47389: PPUSH
// if not side or side > 8 then
47390: LD_VAR 0 3
47394: NOT
47395: PUSH
47396: LD_VAR 0 3
47400: PUSH
47401: LD_INT 8
47403: GREATER
47404: OR
47405: IFFALSE 47409
// exit ;
47407: GO 47468
// if not range then
47409: LD_VAR 0 4
47413: NOT
47414: IFFALSE 47425
// range := - 12 ;
47416: LD_ADDR_VAR 0 4
47420: PUSH
47421: LD_INT 12
47423: NEG
47424: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47425: LD_VAR 0 1
47429: PPUSH
47430: LD_VAR 0 2
47434: PPUSH
47435: LD_VAR 0 3
47439: PPUSH
47440: LD_VAR 0 4
47444: PPUSH
47445: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47449: LD_VAR 0 1
47453: PPUSH
47454: LD_VAR 0 2
47458: PPUSH
47459: LD_VAR 0 3
47463: PPUSH
47464: CALL_OW 331
// end ;
47468: LD_VAR 0 5
47472: RET
// export function Video ( mode ) ; begin
47473: LD_INT 0
47475: PPUSH
// ingame_video = mode ;
47476: LD_ADDR_OWVAR 52
47480: PUSH
47481: LD_VAR 0 1
47485: ST_TO_ADDR
// interface_hidden = mode ;
47486: LD_ADDR_OWVAR 54
47490: PUSH
47491: LD_VAR 0 1
47495: ST_TO_ADDR
// end ;
47496: LD_VAR 0 2
47500: RET
// export function Join ( array , element ) ; begin
47501: LD_INT 0
47503: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47504: LD_ADDR_VAR 0 3
47508: PUSH
47509: LD_VAR 0 1
47513: PPUSH
47514: LD_VAR 0 1
47518: PUSH
47519: LD_INT 1
47521: PLUS
47522: PPUSH
47523: LD_VAR 0 2
47527: PPUSH
47528: CALL_OW 1
47532: ST_TO_ADDR
// end ;
47533: LD_VAR 0 3
47537: RET
// export function JoinUnion ( array , element ) ; begin
47538: LD_INT 0
47540: PPUSH
// result := array union element ;
47541: LD_ADDR_VAR 0 3
47545: PUSH
47546: LD_VAR 0 1
47550: PUSH
47551: LD_VAR 0 2
47555: UNION
47556: ST_TO_ADDR
// end ;
47557: LD_VAR 0 3
47561: RET
// export function GetBehemoths ( side ) ; begin
47562: LD_INT 0
47564: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
47565: LD_ADDR_VAR 0 2
47569: PUSH
47570: LD_INT 22
47572: PUSH
47573: LD_VAR 0 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 31
47584: PUSH
47585: LD_INT 25
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PPUSH
47596: CALL_OW 69
47600: ST_TO_ADDR
// end ;
47601: LD_VAR 0 2
47605: RET
// export function Shuffle ( array ) ; var i , index ; begin
47606: LD_INT 0
47608: PPUSH
47609: PPUSH
47610: PPUSH
// result := [ ] ;
47611: LD_ADDR_VAR 0 2
47615: PUSH
47616: EMPTY
47617: ST_TO_ADDR
// if not array then
47618: LD_VAR 0 1
47622: NOT
47623: IFFALSE 47627
// exit ;
47625: GO 47726
// Randomize ;
47627: CALL_OW 10
// for i = array downto 1 do
47631: LD_ADDR_VAR 0 3
47635: PUSH
47636: DOUBLE
47637: LD_VAR 0 1
47641: INC
47642: ST_TO_ADDR
47643: LD_INT 1
47645: PUSH
47646: FOR_DOWNTO
47647: IFFALSE 47724
// begin index := rand ( 1 , array ) ;
47649: LD_ADDR_VAR 0 4
47653: PUSH
47654: LD_INT 1
47656: PPUSH
47657: LD_VAR 0 1
47661: PPUSH
47662: CALL_OW 12
47666: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
47667: LD_ADDR_VAR 0 2
47671: PUSH
47672: LD_VAR 0 2
47676: PPUSH
47677: LD_VAR 0 2
47681: PUSH
47682: LD_INT 1
47684: PLUS
47685: PPUSH
47686: LD_VAR 0 1
47690: PUSH
47691: LD_VAR 0 4
47695: ARRAY
47696: PPUSH
47697: CALL_OW 2
47701: ST_TO_ADDR
// array := Delete ( array , index ) ;
47702: LD_ADDR_VAR 0 1
47706: PUSH
47707: LD_VAR 0 1
47711: PPUSH
47712: LD_VAR 0 4
47716: PPUSH
47717: CALL_OW 3
47721: ST_TO_ADDR
// end ;
47722: GO 47646
47724: POP
47725: POP
// end ;
47726: LD_VAR 0 2
47730: RET
// export function GetBaseMaterials ( base ) ; begin
47731: LD_INT 0
47733: PPUSH
// result := [ 0 , 0 , 0 ] ;
47734: LD_ADDR_VAR 0 2
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: ST_TO_ADDR
// if not base then
47753: LD_VAR 0 1
47757: NOT
47758: IFFALSE 47762
// exit ;
47760: GO 47811
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
47762: LD_ADDR_VAR 0 2
47766: PUSH
47767: LD_VAR 0 1
47771: PPUSH
47772: LD_INT 1
47774: PPUSH
47775: CALL_OW 275
47779: PUSH
47780: LD_VAR 0 1
47784: PPUSH
47785: LD_INT 2
47787: PPUSH
47788: CALL_OW 275
47792: PUSH
47793: LD_VAR 0 1
47797: PPUSH
47798: LD_INT 3
47800: PPUSH
47801: CALL_OW 275
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: LIST
47810: ST_TO_ADDR
// end ;
47811: LD_VAR 0 2
47815: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47816: LD_INT 0
47818: PPUSH
47819: PPUSH
// result := array ;
47820: LD_ADDR_VAR 0 3
47824: PUSH
47825: LD_VAR 0 1
47829: ST_TO_ADDR
// if size >= result then
47830: LD_VAR 0 2
47834: PUSH
47835: LD_VAR 0 3
47839: GREATEREQUAL
47840: IFFALSE 47844
// exit ;
47842: GO 47894
// if size then
47844: LD_VAR 0 2
47848: IFFALSE 47894
// for i := array downto size do
47850: LD_ADDR_VAR 0 4
47854: PUSH
47855: DOUBLE
47856: LD_VAR 0 1
47860: INC
47861: ST_TO_ADDR
47862: LD_VAR 0 2
47866: PUSH
47867: FOR_DOWNTO
47868: IFFALSE 47892
// result := Delete ( result , result ) ;
47870: LD_ADDR_VAR 0 3
47874: PUSH
47875: LD_VAR 0 3
47879: PPUSH
47880: LD_VAR 0 3
47884: PPUSH
47885: CALL_OW 3
47889: ST_TO_ADDR
47890: GO 47867
47892: POP
47893: POP
// end ;
47894: LD_VAR 0 3
47898: RET
// export function ComExit ( unit ) ; var tmp ; begin
47899: LD_INT 0
47901: PPUSH
47902: PPUSH
// if not IsInUnit ( unit ) then
47903: LD_VAR 0 1
47907: PPUSH
47908: CALL_OW 310
47912: NOT
47913: IFFALSE 47917
// exit ;
47915: GO 47977
// tmp := IsInUnit ( unit ) ;
47917: LD_ADDR_VAR 0 3
47921: PUSH
47922: LD_VAR 0 1
47926: PPUSH
47927: CALL_OW 310
47931: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47932: LD_VAR 0 3
47936: PPUSH
47937: CALL_OW 247
47941: PUSH
47942: LD_INT 2
47944: EQUAL
47945: IFFALSE 47958
// ComExitVehicle ( unit ) else
47947: LD_VAR 0 1
47951: PPUSH
47952: CALL_OW 121
47956: GO 47967
// ComExitBuilding ( unit ) ;
47958: LD_VAR 0 1
47962: PPUSH
47963: CALL_OW 122
// result := tmp ;
47967: LD_ADDR_VAR 0 2
47971: PUSH
47972: LD_VAR 0 3
47976: ST_TO_ADDR
// end ;
47977: LD_VAR 0 2
47981: RET
// export function ComExitAll ( units ) ; var i ; begin
47982: LD_INT 0
47984: PPUSH
47985: PPUSH
// if not units then
47986: LD_VAR 0 1
47990: NOT
47991: IFFALSE 47995
// exit ;
47993: GO 48021
// for i in units do
47995: LD_ADDR_VAR 0 3
47999: PUSH
48000: LD_VAR 0 1
48004: PUSH
48005: FOR_IN
48006: IFFALSE 48019
// ComExit ( i ) ;
48008: LD_VAR 0 3
48012: PPUSH
48013: CALL 47899 0 1
48017: GO 48005
48019: POP
48020: POP
// end ;
48021: LD_VAR 0 2
48025: RET
// export function ResetHc ; begin
48026: LD_INT 0
48028: PPUSH
// InitHc ;
48029: CALL_OW 19
// hc_importance := 0 ;
48033: LD_ADDR_OWVAR 32
48037: PUSH
48038: LD_INT 0
48040: ST_TO_ADDR
// end ;
48041: LD_VAR 0 1
48045: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48046: LD_INT 0
48048: PPUSH
48049: PPUSH
48050: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48051: LD_ADDR_VAR 0 6
48055: PUSH
48056: LD_VAR 0 1
48060: PUSH
48061: LD_VAR 0 3
48065: PLUS
48066: PUSH
48067: LD_INT 2
48069: DIV
48070: ST_TO_ADDR
// if _x < 0 then
48071: LD_VAR 0 6
48075: PUSH
48076: LD_INT 0
48078: LESS
48079: IFFALSE 48096
// _x := _x * - 1 ;
48081: LD_ADDR_VAR 0 6
48085: PUSH
48086: LD_VAR 0 6
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: MUL
48095: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48096: LD_ADDR_VAR 0 7
48100: PUSH
48101: LD_VAR 0 2
48105: PUSH
48106: LD_VAR 0 4
48110: PLUS
48111: PUSH
48112: LD_INT 2
48114: DIV
48115: ST_TO_ADDR
// if _y < 0 then
48116: LD_VAR 0 7
48120: PUSH
48121: LD_INT 0
48123: LESS
48124: IFFALSE 48141
// _y := _y * - 1 ;
48126: LD_ADDR_VAR 0 7
48130: PUSH
48131: LD_VAR 0 7
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: MUL
48140: ST_TO_ADDR
// result := [ _x , _y ] ;
48141: LD_ADDR_VAR 0 5
48145: PUSH
48146: LD_VAR 0 6
48150: PUSH
48151: LD_VAR 0 7
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: ST_TO_ADDR
// end ;
48160: LD_VAR 0 5
48164: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48165: LD_INT 0
48167: PPUSH
48168: PPUSH
48169: PPUSH
48170: PPUSH
// task := GetTaskList ( unit ) ;
48171: LD_ADDR_VAR 0 7
48175: PUSH
48176: LD_VAR 0 1
48180: PPUSH
48181: CALL_OW 437
48185: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48186: LD_VAR 0 7
48190: NOT
48191: PUSH
48192: LD_VAR 0 1
48196: PPUSH
48197: LD_VAR 0 2
48201: PPUSH
48202: CALL_OW 308
48206: NOT
48207: AND
48208: IFFALSE 48212
// exit ;
48210: GO 48330
// if IsInArea ( unit , area ) then
48212: LD_VAR 0 1
48216: PPUSH
48217: LD_VAR 0 2
48221: PPUSH
48222: CALL_OW 308
48226: IFFALSE 48244
// begin ComMoveToArea ( unit , goAway ) ;
48228: LD_VAR 0 1
48232: PPUSH
48233: LD_VAR 0 3
48237: PPUSH
48238: CALL_OW 113
// exit ;
48242: GO 48330
// end ; if task [ 1 ] [ 1 ] <> M then
48244: LD_VAR 0 7
48248: PUSH
48249: LD_INT 1
48251: ARRAY
48252: PUSH
48253: LD_INT 1
48255: ARRAY
48256: PUSH
48257: LD_STRING M
48259: NONEQUAL
48260: IFFALSE 48264
// exit ;
48262: GO 48330
// x := task [ 1 ] [ 2 ] ;
48264: LD_ADDR_VAR 0 5
48268: PUSH
48269: LD_VAR 0 7
48273: PUSH
48274: LD_INT 1
48276: ARRAY
48277: PUSH
48278: LD_INT 2
48280: ARRAY
48281: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48282: LD_ADDR_VAR 0 6
48286: PUSH
48287: LD_VAR 0 7
48291: PUSH
48292: LD_INT 1
48294: ARRAY
48295: PUSH
48296: LD_INT 3
48298: ARRAY
48299: ST_TO_ADDR
// if InArea ( x , y , area ) then
48300: LD_VAR 0 5
48304: PPUSH
48305: LD_VAR 0 6
48309: PPUSH
48310: LD_VAR 0 2
48314: PPUSH
48315: CALL_OW 309
48319: IFFALSE 48330
// ComStop ( unit ) ;
48321: LD_VAR 0 1
48325: PPUSH
48326: CALL_OW 141
// end ;
48330: LD_VAR 0 4
48334: RET
// export function Abs ( value ) ; begin
48335: LD_INT 0
48337: PPUSH
// result := value ;
48338: LD_ADDR_VAR 0 2
48342: PUSH
48343: LD_VAR 0 1
48347: ST_TO_ADDR
// if value < 0 then
48348: LD_VAR 0 1
48352: PUSH
48353: LD_INT 0
48355: LESS
48356: IFFALSE 48373
// result := value * - 1 ;
48358: LD_ADDR_VAR 0 2
48362: PUSH
48363: LD_VAR 0 1
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: MUL
48372: ST_TO_ADDR
// end ;
48373: LD_VAR 0 2
48377: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48378: LD_INT 0
48380: PPUSH
48381: PPUSH
48382: PPUSH
48383: PPUSH
48384: PPUSH
48385: PPUSH
48386: PPUSH
48387: PPUSH
// if not unit or not building then
48388: LD_VAR 0 1
48392: NOT
48393: PUSH
48394: LD_VAR 0 2
48398: NOT
48399: OR
48400: IFFALSE 48404
// exit ;
48402: GO 48630
// x := GetX ( building ) ;
48404: LD_ADDR_VAR 0 4
48408: PUSH
48409: LD_VAR 0 2
48413: PPUSH
48414: CALL_OW 250
48418: ST_TO_ADDR
// y := GetY ( building ) ;
48419: LD_ADDR_VAR 0 6
48423: PUSH
48424: LD_VAR 0 2
48428: PPUSH
48429: CALL_OW 251
48433: ST_TO_ADDR
// d := GetDir ( building ) ;
48434: LD_ADDR_VAR 0 8
48438: PUSH
48439: LD_VAR 0 2
48443: PPUSH
48444: CALL_OW 254
48448: ST_TO_ADDR
// r := 4 ;
48449: LD_ADDR_VAR 0 9
48453: PUSH
48454: LD_INT 4
48456: ST_TO_ADDR
// for i := 1 to 5 do
48457: LD_ADDR_VAR 0 10
48461: PUSH
48462: DOUBLE
48463: LD_INT 1
48465: DEC
48466: ST_TO_ADDR
48467: LD_INT 5
48469: PUSH
48470: FOR_TO
48471: IFFALSE 48628
// begin _x := ShiftX ( x , d , r + i ) ;
48473: LD_ADDR_VAR 0 5
48477: PUSH
48478: LD_VAR 0 4
48482: PPUSH
48483: LD_VAR 0 8
48487: PPUSH
48488: LD_VAR 0 9
48492: PUSH
48493: LD_VAR 0 10
48497: PLUS
48498: PPUSH
48499: CALL_OW 272
48503: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48504: LD_ADDR_VAR 0 7
48508: PUSH
48509: LD_VAR 0 6
48513: PPUSH
48514: LD_VAR 0 8
48518: PPUSH
48519: LD_VAR 0 9
48523: PUSH
48524: LD_VAR 0 10
48528: PLUS
48529: PPUSH
48530: CALL_OW 273
48534: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48535: LD_VAR 0 5
48539: PPUSH
48540: LD_VAR 0 7
48544: PPUSH
48545: CALL_OW 488
48549: PUSH
48550: LD_VAR 0 5
48554: PPUSH
48555: LD_VAR 0 7
48559: PPUSH
48560: CALL_OW 428
48564: PPUSH
48565: CALL_OW 247
48569: PUSH
48570: LD_INT 3
48572: PUSH
48573: LD_INT 2
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: IN
48580: NOT
48581: AND
48582: IFFALSE 48626
// begin ComMoveXY ( unit , _x , _y ) ;
48584: LD_VAR 0 1
48588: PPUSH
48589: LD_VAR 0 5
48593: PPUSH
48594: LD_VAR 0 7
48598: PPUSH
48599: CALL_OW 111
// result := [ _x , _y ] ;
48603: LD_ADDR_VAR 0 3
48607: PUSH
48608: LD_VAR 0 5
48612: PUSH
48613: LD_VAR 0 7
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: ST_TO_ADDR
// exit ;
48622: POP
48623: POP
48624: GO 48630
// end ; end ;
48626: GO 48470
48628: POP
48629: POP
// end ;
48630: LD_VAR 0 3
48634: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
48635: LD_INT 0
48637: PPUSH
48638: PPUSH
48639: PPUSH
// result := 0 ;
48640: LD_ADDR_VAR 0 3
48644: PUSH
48645: LD_INT 0
48647: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
48648: LD_VAR 0 1
48652: PUSH
48653: LD_INT 0
48655: LESS
48656: PUSH
48657: LD_VAR 0 1
48661: PUSH
48662: LD_INT 8
48664: GREATER
48665: OR
48666: PUSH
48667: LD_VAR 0 2
48671: PUSH
48672: LD_INT 0
48674: LESS
48675: OR
48676: PUSH
48677: LD_VAR 0 2
48681: PUSH
48682: LD_INT 8
48684: GREATER
48685: OR
48686: IFFALSE 48690
// exit ;
48688: GO 48765
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
48690: LD_ADDR_VAR 0 4
48694: PUSH
48695: LD_INT 22
48697: PUSH
48698: LD_VAR 0 2
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PPUSH
48707: CALL_OW 69
48711: PUSH
48712: FOR_IN
48713: IFFALSE 48763
// begin un := UnitShoot ( i ) ;
48715: LD_ADDR_VAR 0 5
48719: PUSH
48720: LD_VAR 0 4
48724: PPUSH
48725: CALL_OW 504
48729: ST_TO_ADDR
// if GetSide ( un ) = side1 then
48730: LD_VAR 0 5
48734: PPUSH
48735: CALL_OW 255
48739: PUSH
48740: LD_VAR 0 1
48744: EQUAL
48745: IFFALSE 48761
// begin result := un ;
48747: LD_ADDR_VAR 0 3
48751: PUSH
48752: LD_VAR 0 5
48756: ST_TO_ADDR
// exit ;
48757: POP
48758: POP
48759: GO 48765
// end ; end ;
48761: GO 48712
48763: POP
48764: POP
// end ;
48765: LD_VAR 0 3
48769: RET
// export function GetCargoBay ( units ) ; begin
48770: LD_INT 0
48772: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
48773: LD_ADDR_VAR 0 2
48777: PUSH
48778: LD_VAR 0 1
48782: PPUSH
48783: LD_INT 2
48785: PUSH
48786: LD_INT 34
48788: PUSH
48789: LD_INT 12
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 34
48798: PUSH
48799: LD_INT 51
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 34
48808: PUSH
48809: LD_INT 32
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 34
48818: PUSH
48819: LD_EXP 88
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: PPUSH
48835: CALL_OW 72
48839: ST_TO_ADDR
// end ;
48840: LD_VAR 0 2
48844: RET
// export function Negate ( value ) ; begin
48845: LD_INT 0
48847: PPUSH
// result := not value ;
48848: LD_ADDR_VAR 0 2
48852: PUSH
48853: LD_VAR 0 1
48857: NOT
48858: ST_TO_ADDR
// end ;
48859: LD_VAR 0 2
48863: RET
// export function Inc ( value ) ; begin
48864: LD_INT 0
48866: PPUSH
// result := value + 1 ;
48867: LD_ADDR_VAR 0 2
48871: PUSH
48872: LD_VAR 0 1
48876: PUSH
48877: LD_INT 1
48879: PLUS
48880: ST_TO_ADDR
// end ;
48881: LD_VAR 0 2
48885: RET
// export function Dec ( value ) ; begin
48886: LD_INT 0
48888: PPUSH
// result := value - 1 ;
48889: LD_ADDR_VAR 0 2
48893: PUSH
48894: LD_VAR 0 1
48898: PUSH
48899: LD_INT 1
48901: MINUS
48902: ST_TO_ADDR
// end ;
48903: LD_VAR 0 2
48907: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48908: LD_INT 0
48910: PPUSH
48911: PPUSH
48912: PPUSH
48913: PPUSH
48914: PPUSH
48915: PPUSH
48916: PPUSH
48917: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48918: LD_VAR 0 1
48922: PPUSH
48923: LD_VAR 0 2
48927: PPUSH
48928: CALL_OW 488
48932: NOT
48933: PUSH
48934: LD_VAR 0 3
48938: PPUSH
48939: LD_VAR 0 4
48943: PPUSH
48944: CALL_OW 488
48948: NOT
48949: OR
48950: IFFALSE 48963
// begin result := - 1 ;
48952: LD_ADDR_VAR 0 5
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: ST_TO_ADDR
// exit ;
48961: GO 49198
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48963: LD_ADDR_VAR 0 12
48967: PUSH
48968: LD_VAR 0 1
48972: PPUSH
48973: LD_VAR 0 2
48977: PPUSH
48978: LD_VAR 0 3
48982: PPUSH
48983: LD_VAR 0 4
48987: PPUSH
48988: CALL 48046 0 4
48992: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48993: LD_ADDR_VAR 0 11
48997: PUSH
48998: LD_VAR 0 1
49002: PPUSH
49003: LD_VAR 0 2
49007: PPUSH
49008: LD_VAR 0 12
49012: PUSH
49013: LD_INT 1
49015: ARRAY
49016: PPUSH
49017: LD_VAR 0 12
49021: PUSH
49022: LD_INT 2
49024: ARRAY
49025: PPUSH
49026: CALL_OW 298
49030: ST_TO_ADDR
// distance := 9999 ;
49031: LD_ADDR_VAR 0 10
49035: PUSH
49036: LD_INT 9999
49038: ST_TO_ADDR
// for i := 0 to 5 do
49039: LD_ADDR_VAR 0 6
49043: PUSH
49044: DOUBLE
49045: LD_INT 0
49047: DEC
49048: ST_TO_ADDR
49049: LD_INT 5
49051: PUSH
49052: FOR_TO
49053: IFFALSE 49196
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49055: LD_ADDR_VAR 0 7
49059: PUSH
49060: LD_VAR 0 1
49064: PPUSH
49065: LD_VAR 0 6
49069: PPUSH
49070: LD_VAR 0 11
49074: PPUSH
49075: CALL_OW 272
49079: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49080: LD_ADDR_VAR 0 8
49084: PUSH
49085: LD_VAR 0 2
49089: PPUSH
49090: LD_VAR 0 6
49094: PPUSH
49095: LD_VAR 0 11
49099: PPUSH
49100: CALL_OW 273
49104: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49105: LD_VAR 0 7
49109: PPUSH
49110: LD_VAR 0 8
49114: PPUSH
49115: CALL_OW 488
49119: NOT
49120: IFFALSE 49124
// continue ;
49122: GO 49052
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49124: LD_ADDR_VAR 0 9
49128: PUSH
49129: LD_VAR 0 12
49133: PUSH
49134: LD_INT 1
49136: ARRAY
49137: PPUSH
49138: LD_VAR 0 12
49142: PUSH
49143: LD_INT 2
49145: ARRAY
49146: PPUSH
49147: LD_VAR 0 7
49151: PPUSH
49152: LD_VAR 0 8
49156: PPUSH
49157: CALL_OW 298
49161: ST_TO_ADDR
// if tmp < distance then
49162: LD_VAR 0 9
49166: PUSH
49167: LD_VAR 0 10
49171: LESS
49172: IFFALSE 49194
// begin result := i ;
49174: LD_ADDR_VAR 0 5
49178: PUSH
49179: LD_VAR 0 6
49183: ST_TO_ADDR
// distance := tmp ;
49184: LD_ADDR_VAR 0 10
49188: PUSH
49189: LD_VAR 0 9
49193: ST_TO_ADDR
// end ; end ;
49194: GO 49052
49196: POP
49197: POP
// end ;
49198: LD_VAR 0 5
49202: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49203: LD_INT 0
49205: PPUSH
49206: PPUSH
// if not driver or not IsInUnit ( driver ) then
49207: LD_VAR 0 1
49211: NOT
49212: PUSH
49213: LD_VAR 0 1
49217: PPUSH
49218: CALL_OW 310
49222: NOT
49223: OR
49224: IFFALSE 49228
// exit ;
49226: GO 49318
// vehicle := IsInUnit ( driver ) ;
49228: LD_ADDR_VAR 0 3
49232: PUSH
49233: LD_VAR 0 1
49237: PPUSH
49238: CALL_OW 310
49242: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49243: LD_VAR 0 1
49247: PPUSH
49248: LD_STRING \
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: PUSH
49278: LD_STRING E
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: LD_VAR 0 3
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PPUSH
49314: CALL_OW 446
// end ;
49318: LD_VAR 0 2
49322: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49323: LD_INT 0
49325: PPUSH
49326: PPUSH
// if not driver or not IsInUnit ( driver ) then
49327: LD_VAR 0 1
49331: NOT
49332: PUSH
49333: LD_VAR 0 1
49337: PPUSH
49338: CALL_OW 310
49342: NOT
49343: OR
49344: IFFALSE 49348
// exit ;
49346: GO 49438
// vehicle := IsInUnit ( driver ) ;
49348: LD_ADDR_VAR 0 3
49352: PUSH
49353: LD_VAR 0 1
49357: PPUSH
49358: CALL_OW 310
49362: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49363: LD_VAR 0 1
49367: PPUSH
49368: LD_STRING \
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: PUSH
49398: LD_STRING E
49400: PUSH
49401: LD_INT 0
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_VAR 0 3
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PPUSH
49434: CALL_OW 447
// end ;
49438: LD_VAR 0 2
49442: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49443: LD_INT 0
49445: PPUSH
49446: PPUSH
49447: PPUSH
// tmp := [ ] ;
49448: LD_ADDR_VAR 0 5
49452: PUSH
49453: EMPTY
49454: ST_TO_ADDR
// for i in units do
49455: LD_ADDR_VAR 0 4
49459: PUSH
49460: LD_VAR 0 1
49464: PUSH
49465: FOR_IN
49466: IFFALSE 49504
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49468: LD_ADDR_VAR 0 5
49472: PUSH
49473: LD_VAR 0 5
49477: PPUSH
49478: LD_VAR 0 5
49482: PUSH
49483: LD_INT 1
49485: PLUS
49486: PPUSH
49487: LD_VAR 0 4
49491: PPUSH
49492: CALL_OW 256
49496: PPUSH
49497: CALL_OW 2
49501: ST_TO_ADDR
49502: GO 49465
49504: POP
49505: POP
// if not tmp then
49506: LD_VAR 0 5
49510: NOT
49511: IFFALSE 49515
// exit ;
49513: GO 49563
// if asc then
49515: LD_VAR 0 2
49519: IFFALSE 49543
// result := SortListByListAsc ( units , tmp ) else
49521: LD_ADDR_VAR 0 3
49525: PUSH
49526: LD_VAR 0 1
49530: PPUSH
49531: LD_VAR 0 5
49535: PPUSH
49536: CALL_OW 76
49540: ST_TO_ADDR
49541: GO 49563
// result := SortListByListDesc ( units , tmp ) ;
49543: LD_ADDR_VAR 0 3
49547: PUSH
49548: LD_VAR 0 1
49552: PPUSH
49553: LD_VAR 0 5
49557: PPUSH
49558: CALL_OW 77
49562: ST_TO_ADDR
// end ;
49563: LD_VAR 0 3
49567: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
49568: LD_INT 0
49570: PPUSH
49571: PPUSH
// task := GetTaskList ( mech ) ;
49572: LD_ADDR_VAR 0 4
49576: PUSH
49577: LD_VAR 0 1
49581: PPUSH
49582: CALL_OW 437
49586: ST_TO_ADDR
// if not task then
49587: LD_VAR 0 4
49591: NOT
49592: IFFALSE 49596
// exit ;
49594: GO 49638
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
49596: LD_ADDR_VAR 0 3
49600: PUSH
49601: LD_VAR 0 4
49605: PUSH
49606: LD_INT 1
49608: ARRAY
49609: PUSH
49610: LD_INT 1
49612: ARRAY
49613: PUSH
49614: LD_STRING r
49616: EQUAL
49617: PUSH
49618: LD_VAR 0 4
49622: PUSH
49623: LD_INT 1
49625: ARRAY
49626: PUSH
49627: LD_INT 4
49629: ARRAY
49630: PUSH
49631: LD_VAR 0 2
49635: EQUAL
49636: AND
49637: ST_TO_ADDR
// end ;
49638: LD_VAR 0 3
49642: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
49643: LD_INT 0
49645: PPUSH
// SetDir ( unit , d ) ;
49646: LD_VAR 0 1
49650: PPUSH
49651: LD_VAR 0 4
49655: PPUSH
49656: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
49660: LD_VAR 0 1
49664: PPUSH
49665: LD_VAR 0 2
49669: PPUSH
49670: LD_VAR 0 3
49674: PPUSH
49675: LD_VAR 0 5
49679: PPUSH
49680: CALL_OW 48
// end ;
49684: LD_VAR 0 6
49688: RET
// export function ToNaturalNumber ( number ) ; begin
49689: LD_INT 0
49691: PPUSH
// result := number div 1 ;
49692: LD_ADDR_VAR 0 2
49696: PUSH
49697: LD_VAR 0 1
49701: PUSH
49702: LD_INT 1
49704: DIV
49705: ST_TO_ADDR
// if number < 0 then
49706: LD_VAR 0 1
49710: PUSH
49711: LD_INT 0
49713: LESS
49714: IFFALSE 49724
// result := 0 ;
49716: LD_ADDR_VAR 0 2
49720: PUSH
49721: LD_INT 0
49723: ST_TO_ADDR
// end ;
49724: LD_VAR 0 2
49728: RET
// export function SortByClass ( units , class ) ; var un ; begin
49729: LD_INT 0
49731: PPUSH
49732: PPUSH
// if not units or not class then
49733: LD_VAR 0 1
49737: NOT
49738: PUSH
49739: LD_VAR 0 2
49743: NOT
49744: OR
49745: IFFALSE 49749
// exit ;
49747: GO 49844
// result := [ ] ;
49749: LD_ADDR_VAR 0 3
49753: PUSH
49754: EMPTY
49755: ST_TO_ADDR
// for un in units do
49756: LD_ADDR_VAR 0 4
49760: PUSH
49761: LD_VAR 0 1
49765: PUSH
49766: FOR_IN
49767: IFFALSE 49842
// if GetClass ( un ) = class then
49769: LD_VAR 0 4
49773: PPUSH
49774: CALL_OW 257
49778: PUSH
49779: LD_VAR 0 2
49783: EQUAL
49784: IFFALSE 49811
// result := Insert ( result , 1 , un ) else
49786: LD_ADDR_VAR 0 3
49790: PUSH
49791: LD_VAR 0 3
49795: PPUSH
49796: LD_INT 1
49798: PPUSH
49799: LD_VAR 0 4
49803: PPUSH
49804: CALL_OW 2
49808: ST_TO_ADDR
49809: GO 49840
// result := Replace ( result , result + 1 , un ) ;
49811: LD_ADDR_VAR 0 3
49815: PUSH
49816: LD_VAR 0 3
49820: PPUSH
49821: LD_VAR 0 3
49825: PUSH
49826: LD_INT 1
49828: PLUS
49829: PPUSH
49830: LD_VAR 0 4
49834: PPUSH
49835: CALL_OW 1
49839: ST_TO_ADDR
49840: GO 49766
49842: POP
49843: POP
// end ;
49844: LD_VAR 0 3
49848: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49849: LD_INT 0
49851: PPUSH
49852: PPUSH
49853: PPUSH
49854: PPUSH
49855: PPUSH
49856: PPUSH
49857: PPUSH
// result := [ ] ;
49858: LD_ADDR_VAR 0 4
49862: PUSH
49863: EMPTY
49864: ST_TO_ADDR
// if x - r < 0 then
49865: LD_VAR 0 1
49869: PUSH
49870: LD_VAR 0 3
49874: MINUS
49875: PUSH
49876: LD_INT 0
49878: LESS
49879: IFFALSE 49891
// min_x := 0 else
49881: LD_ADDR_VAR 0 8
49885: PUSH
49886: LD_INT 0
49888: ST_TO_ADDR
49889: GO 49907
// min_x := x - r ;
49891: LD_ADDR_VAR 0 8
49895: PUSH
49896: LD_VAR 0 1
49900: PUSH
49901: LD_VAR 0 3
49905: MINUS
49906: ST_TO_ADDR
// if y - r < 0 then
49907: LD_VAR 0 2
49911: PUSH
49912: LD_VAR 0 3
49916: MINUS
49917: PUSH
49918: LD_INT 0
49920: LESS
49921: IFFALSE 49933
// min_y := 0 else
49923: LD_ADDR_VAR 0 7
49927: PUSH
49928: LD_INT 0
49930: ST_TO_ADDR
49931: GO 49949
// min_y := y - r ;
49933: LD_ADDR_VAR 0 7
49937: PUSH
49938: LD_VAR 0 2
49942: PUSH
49943: LD_VAR 0 3
49947: MINUS
49948: ST_TO_ADDR
// max_x := x + r ;
49949: LD_ADDR_VAR 0 9
49953: PUSH
49954: LD_VAR 0 1
49958: PUSH
49959: LD_VAR 0 3
49963: PLUS
49964: ST_TO_ADDR
// max_y := y + r ;
49965: LD_ADDR_VAR 0 10
49969: PUSH
49970: LD_VAR 0 2
49974: PUSH
49975: LD_VAR 0 3
49979: PLUS
49980: ST_TO_ADDR
// for _x = min_x to max_x do
49981: LD_ADDR_VAR 0 5
49985: PUSH
49986: DOUBLE
49987: LD_VAR 0 8
49991: DEC
49992: ST_TO_ADDR
49993: LD_VAR 0 9
49997: PUSH
49998: FOR_TO
49999: IFFALSE 50100
// for _y = min_y to max_y do
50001: LD_ADDR_VAR 0 6
50005: PUSH
50006: DOUBLE
50007: LD_VAR 0 7
50011: DEC
50012: ST_TO_ADDR
50013: LD_VAR 0 10
50017: PUSH
50018: FOR_TO
50019: IFFALSE 50096
// begin if not ValidHex ( _x , _y ) then
50021: LD_VAR 0 5
50025: PPUSH
50026: LD_VAR 0 6
50030: PPUSH
50031: CALL_OW 488
50035: NOT
50036: IFFALSE 50040
// continue ;
50038: GO 50018
// if GetResourceTypeXY ( _x , _y ) then
50040: LD_VAR 0 5
50044: PPUSH
50045: LD_VAR 0 6
50049: PPUSH
50050: CALL_OW 283
50054: IFFALSE 50094
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50056: LD_ADDR_VAR 0 4
50060: PUSH
50061: LD_VAR 0 4
50065: PPUSH
50066: LD_VAR 0 4
50070: PUSH
50071: LD_INT 1
50073: PLUS
50074: PPUSH
50075: LD_VAR 0 5
50079: PUSH
50080: LD_VAR 0 6
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PPUSH
50089: CALL_OW 1
50093: ST_TO_ADDR
// end ;
50094: GO 50018
50096: POP
50097: POP
50098: GO 49998
50100: POP
50101: POP
// end ;
50102: LD_VAR 0 4
50106: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50107: LD_INT 0
50109: PPUSH
50110: PPUSH
50111: PPUSH
50112: PPUSH
50113: PPUSH
50114: PPUSH
50115: PPUSH
50116: PPUSH
// if not units then
50117: LD_VAR 0 1
50121: NOT
50122: IFFALSE 50126
// exit ;
50124: GO 50652
// result := UnitFilter ( units , [ f_ok ] ) ;
50126: LD_ADDR_VAR 0 3
50130: PUSH
50131: LD_VAR 0 1
50135: PPUSH
50136: LD_INT 50
50138: PUSH
50139: EMPTY
50140: LIST
50141: PPUSH
50142: CALL_OW 72
50146: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50147: LD_ADDR_VAR 0 8
50151: PUSH
50152: LD_VAR 0 1
50156: PUSH
50157: LD_INT 1
50159: ARRAY
50160: PPUSH
50161: CALL_OW 255
50165: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50166: LD_ADDR_VAR 0 10
50170: PUSH
50171: LD_INT 29
50173: PUSH
50174: LD_EXP 91
50178: PUSH
50179: LD_INT 49
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: LIST
50186: ST_TO_ADDR
// if not result then
50187: LD_VAR 0 3
50191: NOT
50192: IFFALSE 50196
// exit ;
50194: GO 50652
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50196: LD_ADDR_VAR 0 5
50200: PUSH
50201: LD_INT 81
50203: PUSH
50204: LD_VAR 0 8
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PPUSH
50213: CALL_OW 69
50217: ST_TO_ADDR
// for i in result do
50218: LD_ADDR_VAR 0 4
50222: PUSH
50223: LD_VAR 0 3
50227: PUSH
50228: FOR_IN
50229: IFFALSE 50650
// begin tag := GetTag ( i ) + 1 ;
50231: LD_ADDR_VAR 0 9
50235: PUSH
50236: LD_VAR 0 4
50240: PPUSH
50241: CALL_OW 110
50245: PUSH
50246: LD_INT 1
50248: PLUS
50249: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
50250: LD_ADDR_VAR 0 7
50254: PUSH
50255: LD_VAR 0 4
50259: PPUSH
50260: CALL_OW 250
50264: PPUSH
50265: LD_VAR 0 4
50269: PPUSH
50270: CALL_OW 251
50274: PPUSH
50275: LD_INT 6
50277: PPUSH
50278: CALL 49849 0 3
50282: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
50283: LD_VAR 0 4
50287: PPUSH
50288: CALL_OW 247
50292: PUSH
50293: LD_INT 2
50295: EQUAL
50296: PUSH
50297: LD_VAR 0 7
50301: AND
50302: PUSH
50303: LD_VAR 0 4
50307: PPUSH
50308: CALL_OW 264
50312: PUSH
50313: LD_VAR 0 10
50317: IN
50318: NOT
50319: AND
50320: IFFALSE 50359
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50322: LD_VAR 0 4
50326: PPUSH
50327: LD_VAR 0 7
50331: PUSH
50332: LD_INT 1
50334: ARRAY
50335: PUSH
50336: LD_INT 1
50338: ARRAY
50339: PPUSH
50340: LD_VAR 0 7
50344: PUSH
50345: LD_INT 1
50347: ARRAY
50348: PUSH
50349: LD_INT 2
50351: ARRAY
50352: PPUSH
50353: CALL_OW 116
50357: GO 50648
// if path > tag then
50359: LD_VAR 0 2
50363: PUSH
50364: LD_VAR 0 9
50368: GREATER
50369: IFFALSE 50577
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
50371: LD_ADDR_VAR 0 6
50375: PUSH
50376: LD_VAR 0 5
50380: PPUSH
50381: LD_INT 91
50383: PUSH
50384: LD_VAR 0 4
50388: PUSH
50389: LD_INT 8
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: PPUSH
50397: CALL_OW 72
50401: ST_TO_ADDR
// if nearEnemy then
50402: LD_VAR 0 6
50406: IFFALSE 50475
// begin if GetWeapon ( i ) = ru_time_lapser then
50408: LD_VAR 0 4
50412: PPUSH
50413: CALL_OW 264
50417: PUSH
50418: LD_INT 49
50420: EQUAL
50421: IFFALSE 50449
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50423: LD_VAR 0 4
50427: PPUSH
50428: LD_VAR 0 6
50432: PPUSH
50433: LD_VAR 0 4
50437: PPUSH
50438: CALL_OW 74
50442: PPUSH
50443: CALL_OW 112
50447: GO 50473
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50449: LD_VAR 0 4
50453: PPUSH
50454: LD_VAR 0 6
50458: PPUSH
50459: LD_VAR 0 4
50463: PPUSH
50464: CALL_OW 74
50468: PPUSH
50469: CALL_OW 115
// end else
50473: GO 50575
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50475: LD_VAR 0 4
50479: PPUSH
50480: LD_VAR 0 2
50484: PUSH
50485: LD_VAR 0 9
50489: ARRAY
50490: PUSH
50491: LD_INT 1
50493: ARRAY
50494: PPUSH
50495: LD_VAR 0 2
50499: PUSH
50500: LD_VAR 0 9
50504: ARRAY
50505: PUSH
50506: LD_INT 2
50508: ARRAY
50509: PPUSH
50510: CALL_OW 297
50514: PUSH
50515: LD_INT 6
50517: GREATER
50518: IFFALSE 50561
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50520: LD_VAR 0 4
50524: PPUSH
50525: LD_VAR 0 2
50529: PUSH
50530: LD_VAR 0 9
50534: ARRAY
50535: PUSH
50536: LD_INT 1
50538: ARRAY
50539: PPUSH
50540: LD_VAR 0 2
50544: PUSH
50545: LD_VAR 0 9
50549: ARRAY
50550: PUSH
50551: LD_INT 2
50553: ARRAY
50554: PPUSH
50555: CALL_OW 114
50559: GO 50575
// SetTag ( i , tag ) ;
50561: LD_VAR 0 4
50565: PPUSH
50566: LD_VAR 0 9
50570: PPUSH
50571: CALL_OW 109
// end else
50575: GO 50648
// if enemy then
50577: LD_VAR 0 5
50581: IFFALSE 50648
// begin if GetWeapon ( i ) = ru_time_lapser then
50583: LD_VAR 0 4
50587: PPUSH
50588: CALL_OW 264
50592: PUSH
50593: LD_INT 49
50595: EQUAL
50596: IFFALSE 50624
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
50598: LD_VAR 0 4
50602: PPUSH
50603: LD_VAR 0 5
50607: PPUSH
50608: LD_VAR 0 4
50612: PPUSH
50613: CALL_OW 74
50617: PPUSH
50618: CALL_OW 112
50622: GO 50648
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
50624: LD_VAR 0 4
50628: PPUSH
50629: LD_VAR 0 5
50633: PPUSH
50634: LD_VAR 0 4
50638: PPUSH
50639: CALL_OW 74
50643: PPUSH
50644: CALL_OW 115
// end ; end ;
50648: GO 50228
50650: POP
50651: POP
// end ;
50652: LD_VAR 0 3
50656: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
50657: LD_INT 0
50659: PPUSH
50660: PPUSH
50661: PPUSH
// if not unit or IsInUnit ( unit ) then
50662: LD_VAR 0 1
50666: NOT
50667: PUSH
50668: LD_VAR 0 1
50672: PPUSH
50673: CALL_OW 310
50677: OR
50678: IFFALSE 50682
// exit ;
50680: GO 50773
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
50682: LD_ADDR_VAR 0 4
50686: PUSH
50687: LD_VAR 0 1
50691: PPUSH
50692: CALL_OW 250
50696: PPUSH
50697: LD_VAR 0 2
50701: PPUSH
50702: LD_INT 1
50704: PPUSH
50705: CALL_OW 272
50709: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
50710: LD_ADDR_VAR 0 5
50714: PUSH
50715: LD_VAR 0 1
50719: PPUSH
50720: CALL_OW 251
50724: PPUSH
50725: LD_VAR 0 2
50729: PPUSH
50730: LD_INT 1
50732: PPUSH
50733: CALL_OW 273
50737: ST_TO_ADDR
// if ValidHex ( x , y ) then
50738: LD_VAR 0 4
50742: PPUSH
50743: LD_VAR 0 5
50747: PPUSH
50748: CALL_OW 488
50752: IFFALSE 50773
// ComTurnXY ( unit , x , y ) ;
50754: LD_VAR 0 1
50758: PPUSH
50759: LD_VAR 0 4
50763: PPUSH
50764: LD_VAR 0 5
50768: PPUSH
50769: CALL_OW 118
// end ;
50773: LD_VAR 0 3
50777: RET
// export function SeeUnits ( side , units ) ; var i ; begin
50778: LD_INT 0
50780: PPUSH
50781: PPUSH
// result := false ;
50782: LD_ADDR_VAR 0 3
50786: PUSH
50787: LD_INT 0
50789: ST_TO_ADDR
// if not units then
50790: LD_VAR 0 2
50794: NOT
50795: IFFALSE 50799
// exit ;
50797: GO 50844
// for i in units do
50799: LD_ADDR_VAR 0 4
50803: PUSH
50804: LD_VAR 0 2
50808: PUSH
50809: FOR_IN
50810: IFFALSE 50842
// if See ( side , i ) then
50812: LD_VAR 0 1
50816: PPUSH
50817: LD_VAR 0 4
50821: PPUSH
50822: CALL_OW 292
50826: IFFALSE 50840
// begin result := true ;
50828: LD_ADDR_VAR 0 3
50832: PUSH
50833: LD_INT 1
50835: ST_TO_ADDR
// exit ;
50836: POP
50837: POP
50838: GO 50844
// end ;
50840: GO 50809
50842: POP
50843: POP
// end ;
50844: LD_VAR 0 3
50848: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50849: LD_INT 0
50851: PPUSH
50852: PPUSH
50853: PPUSH
50854: PPUSH
// if not unit or not points then
50855: LD_VAR 0 1
50859: NOT
50860: PUSH
50861: LD_VAR 0 2
50865: NOT
50866: OR
50867: IFFALSE 50871
// exit ;
50869: GO 50961
// dist := 99999 ;
50871: LD_ADDR_VAR 0 5
50875: PUSH
50876: LD_INT 99999
50878: ST_TO_ADDR
// for i in points do
50879: LD_ADDR_VAR 0 4
50883: PUSH
50884: LD_VAR 0 2
50888: PUSH
50889: FOR_IN
50890: IFFALSE 50959
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50892: LD_ADDR_VAR 0 6
50896: PUSH
50897: LD_VAR 0 1
50901: PPUSH
50902: LD_VAR 0 4
50906: PUSH
50907: LD_INT 1
50909: ARRAY
50910: PPUSH
50911: LD_VAR 0 4
50915: PUSH
50916: LD_INT 2
50918: ARRAY
50919: PPUSH
50920: CALL_OW 297
50924: ST_TO_ADDR
// if tmpDist < dist then
50925: LD_VAR 0 6
50929: PUSH
50930: LD_VAR 0 5
50934: LESS
50935: IFFALSE 50957
// begin result := i ;
50937: LD_ADDR_VAR 0 3
50941: PUSH
50942: LD_VAR 0 4
50946: ST_TO_ADDR
// dist := tmpDist ;
50947: LD_ADDR_VAR 0 5
50951: PUSH
50952: LD_VAR 0 6
50956: ST_TO_ADDR
// end ; end ;
50957: GO 50889
50959: POP
50960: POP
// end ;
50961: LD_VAR 0 3
50965: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50966: LD_INT 0
50968: PPUSH
// uc_side := side ;
50969: LD_ADDR_OWVAR 20
50973: PUSH
50974: LD_VAR 0 1
50978: ST_TO_ADDR
// uc_nation := 3 ;
50979: LD_ADDR_OWVAR 21
50983: PUSH
50984: LD_INT 3
50986: ST_TO_ADDR
// vc_chassis := 25 ;
50987: LD_ADDR_OWVAR 37
50991: PUSH
50992: LD_INT 25
50994: ST_TO_ADDR
// vc_engine := engine_siberite ;
50995: LD_ADDR_OWVAR 39
50999: PUSH
51000: LD_INT 3
51002: ST_TO_ADDR
// vc_control := control_computer ;
51003: LD_ADDR_OWVAR 38
51007: PUSH
51008: LD_INT 3
51010: ST_TO_ADDR
// vc_weapon := 59 ;
51011: LD_ADDR_OWVAR 40
51015: PUSH
51016: LD_INT 59
51018: ST_TO_ADDR
// result := CreateVehicle ;
51019: LD_ADDR_VAR 0 5
51023: PUSH
51024: CALL_OW 45
51028: ST_TO_ADDR
// SetDir ( result , d ) ;
51029: LD_VAR 0 5
51033: PPUSH
51034: LD_VAR 0 4
51038: PPUSH
51039: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51043: LD_VAR 0 5
51047: PPUSH
51048: LD_VAR 0 2
51052: PPUSH
51053: LD_VAR 0 3
51057: PPUSH
51058: LD_INT 0
51060: PPUSH
51061: CALL_OW 48
// end ;
51065: LD_VAR 0 5
51069: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51070: LD_INT 0
51072: PPUSH
51073: PPUSH
51074: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51075: LD_ADDR_VAR 0 2
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51098: LD_VAR 0 1
51102: NOT
51103: PUSH
51104: LD_VAR 0 1
51108: PPUSH
51109: CALL_OW 264
51113: PUSH
51114: LD_INT 12
51116: PUSH
51117: LD_INT 51
51119: PUSH
51120: LD_INT 32
51122: PUSH
51123: LD_EXP 88
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: IN
51134: NOT
51135: OR
51136: IFFALSE 51140
// exit ;
51138: GO 51238
// for i := 1 to 3 do
51140: LD_ADDR_VAR 0 3
51144: PUSH
51145: DOUBLE
51146: LD_INT 1
51148: DEC
51149: ST_TO_ADDR
51150: LD_INT 3
51152: PUSH
51153: FOR_TO
51154: IFFALSE 51236
// begin tmp := GetCargo ( cargo , i ) ;
51156: LD_ADDR_VAR 0 4
51160: PUSH
51161: LD_VAR 0 1
51165: PPUSH
51166: LD_VAR 0 3
51170: PPUSH
51171: CALL_OW 289
51175: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51176: LD_ADDR_VAR 0 2
51180: PUSH
51181: LD_VAR 0 2
51185: PPUSH
51186: LD_VAR 0 3
51190: PPUSH
51191: LD_VAR 0 4
51195: PPUSH
51196: CALL_OW 1
51200: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51201: LD_ADDR_VAR 0 2
51205: PUSH
51206: LD_VAR 0 2
51210: PPUSH
51211: LD_INT 4
51213: PPUSH
51214: LD_VAR 0 2
51218: PUSH
51219: LD_INT 4
51221: ARRAY
51222: PUSH
51223: LD_VAR 0 4
51227: PLUS
51228: PPUSH
51229: CALL_OW 1
51233: ST_TO_ADDR
// end ;
51234: GO 51153
51236: POP
51237: POP
// end ;
51238: LD_VAR 0 2
51242: RET
// export function Length ( array ) ; begin
51243: LD_INT 0
51245: PPUSH
// result := array + 0 ;
51246: LD_ADDR_VAR 0 2
51250: PUSH
51251: LD_VAR 0 1
51255: PUSH
51256: LD_INT 0
51258: PLUS
51259: ST_TO_ADDR
// end ; end_of_file
51260: LD_VAR 0 2
51264: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export function InitGlobalVariables ; begin
51265: LD_INT 0
51267: PPUSH
// ar_miner := 81 ;
51268: LD_ADDR_EXP 94
51272: PUSH
51273: LD_INT 81
51275: ST_TO_ADDR
// ar_crane := 88 ;
51276: LD_ADDR_EXP 93
51280: PUSH
51281: LD_INT 88
51283: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
51284: LD_ADDR_EXP 88
51288: PUSH
51289: LD_INT 89
51291: ST_TO_ADDR
// us_hack := 99 ;
51292: LD_ADDR_EXP 89
51296: PUSH
51297: LD_INT 99
51299: ST_TO_ADDR
// us_artillery := 97 ;
51300: LD_ADDR_EXP 90
51304: PUSH
51305: LD_INT 97
51307: ST_TO_ADDR
// ar_bio_bomb := 91 ;
51308: LD_ADDR_EXP 91
51312: PUSH
51313: LD_INT 91
51315: ST_TO_ADDR
// ar_mortar := 92 ;
51316: LD_ADDR_EXP 92
51320: PUSH
51321: LD_INT 92
51323: ST_TO_ADDR
// ru_flamethrower := 93 ;
51324: LD_ADDR_EXP 95
51328: PUSH
51329: LD_INT 93
51331: ST_TO_ADDR
// ru_radar := 98 ;
51332: LD_ADDR_EXP 87
51336: PUSH
51337: LD_INT 98
51339: ST_TO_ADDR
// tech_Artillery := 80 ;
51340: LD_ADDR_EXP 96
51344: PUSH
51345: LD_INT 80
51347: ST_TO_ADDR
// tech_RadMat := 81 ;
51348: LD_ADDR_EXP 97
51352: PUSH
51353: LD_INT 81
51355: ST_TO_ADDR
// tech_BasicTools := 82 ;
51356: LD_ADDR_EXP 98
51360: PUSH
51361: LD_INT 82
51363: ST_TO_ADDR
// tech_Cargo := 83 ;
51364: LD_ADDR_EXP 99
51368: PUSH
51369: LD_INT 83
51371: ST_TO_ADDR
// tech_Track := 84 ;
51372: LD_ADDR_EXP 100
51376: PUSH
51377: LD_INT 84
51379: ST_TO_ADDR
// tech_Crane := 85 ;
51380: LD_ADDR_EXP 101
51384: PUSH
51385: LD_INT 85
51387: ST_TO_ADDR
// tech_Bulldozer := 86 ;
51388: LD_ADDR_EXP 102
51392: PUSH
51393: LD_INT 86
51395: ST_TO_ADDR
// tech_Hovercraft := 87 ;
51396: LD_ADDR_EXP 103
51400: PUSH
51401: LD_INT 87
51403: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
51404: LD_ADDR_EXP 104
51408: PUSH
51409: LD_INT 88
51411: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
51412: LD_ADDR_EXP 105
51416: PUSH
51417: LD_INT 90
51419: ST_TO_ADDR
// end ; end_of_file
51420: LD_VAR 0 1
51424: RET
// every 0 0$1 do
51425: GO 51427
51427: DISABLE
// begin enable ;
51428: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
51429: LD_STRING updateTimer(
51431: PUSH
51432: LD_OWVAR 1
51436: STR
51437: PUSH
51438: LD_STRING );
51440: STR
51441: PPUSH
51442: CALL_OW 559
// end ;
51446: END
// export function SOS_MapStart ( ) ; begin
51447: LD_INT 0
51449: PPUSH
// if streamModeActive then
51450: LD_EXP 106
51454: IFFALSE 51463
// DefineStreamItems ( true ) ;
51456: LD_INT 1
51458: PPUSH
51459: CALL 53117 0 1
// UpdateFactoryWaypoints ( ) ;
51463: CALL 65978 0 0
// UpdateWarhouseGatheringPoints ( ) ;
51467: CALL 66231 0 0
// end ;
51471: LD_VAR 0 1
51475: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51476: LD_INT 0
51478: PPUSH
// if p2 = 100 then
51479: LD_VAR 0 2
51483: PUSH
51484: LD_INT 100
51486: EQUAL
51487: IFFALSE 52490
// begin if not StreamModeActive then
51489: LD_EXP 106
51493: NOT
51494: IFFALSE 51504
// StreamModeActive := true ;
51496: LD_ADDR_EXP 106
51500: PUSH
51501: LD_INT 1
51503: ST_TO_ADDR
// if p3 = 0 then
51504: LD_VAR 0 3
51508: PUSH
51509: LD_INT 0
51511: EQUAL
51512: IFFALSE 51518
// InitStreamMode ;
51514: CALL 52653 0 0
// if p3 = 1 then
51518: LD_VAR 0 3
51522: PUSH
51523: LD_INT 1
51525: EQUAL
51526: IFFALSE 51536
// sRocket := true ;
51528: LD_ADDR_EXP 111
51532: PUSH
51533: LD_INT 1
51535: ST_TO_ADDR
// if p3 = 2 then
51536: LD_VAR 0 3
51540: PUSH
51541: LD_INT 2
51543: EQUAL
51544: IFFALSE 51554
// sSpeed := true ;
51546: LD_ADDR_EXP 110
51550: PUSH
51551: LD_INT 1
51553: ST_TO_ADDR
// if p3 = 3 then
51554: LD_VAR 0 3
51558: PUSH
51559: LD_INT 3
51561: EQUAL
51562: IFFALSE 51572
// sEngine := true ;
51564: LD_ADDR_EXP 112
51568: PUSH
51569: LD_INT 1
51571: ST_TO_ADDR
// if p3 = 4 then
51572: LD_VAR 0 3
51576: PUSH
51577: LD_INT 4
51579: EQUAL
51580: IFFALSE 51590
// sSpec := true ;
51582: LD_ADDR_EXP 109
51586: PUSH
51587: LD_INT 1
51589: ST_TO_ADDR
// if p3 = 5 then
51590: LD_VAR 0 3
51594: PUSH
51595: LD_INT 5
51597: EQUAL
51598: IFFALSE 51608
// sLevel := true ;
51600: LD_ADDR_EXP 113
51604: PUSH
51605: LD_INT 1
51607: ST_TO_ADDR
// if p3 = 6 then
51608: LD_VAR 0 3
51612: PUSH
51613: LD_INT 6
51615: EQUAL
51616: IFFALSE 51626
// sArmoury := true ;
51618: LD_ADDR_EXP 114
51622: PUSH
51623: LD_INT 1
51625: ST_TO_ADDR
// if p3 = 7 then
51626: LD_VAR 0 3
51630: PUSH
51631: LD_INT 7
51633: EQUAL
51634: IFFALSE 51644
// sRadar := true ;
51636: LD_ADDR_EXP 115
51640: PUSH
51641: LD_INT 1
51643: ST_TO_ADDR
// if p3 = 8 then
51644: LD_VAR 0 3
51648: PUSH
51649: LD_INT 8
51651: EQUAL
51652: IFFALSE 51662
// sBunker := true ;
51654: LD_ADDR_EXP 116
51658: PUSH
51659: LD_INT 1
51661: ST_TO_ADDR
// if p3 = 9 then
51662: LD_VAR 0 3
51666: PUSH
51667: LD_INT 9
51669: EQUAL
51670: IFFALSE 51680
// sHack := true ;
51672: LD_ADDR_EXP 117
51676: PUSH
51677: LD_INT 1
51679: ST_TO_ADDR
// if p3 = 10 then
51680: LD_VAR 0 3
51684: PUSH
51685: LD_INT 10
51687: EQUAL
51688: IFFALSE 51698
// sFire := true ;
51690: LD_ADDR_EXP 118
51694: PUSH
51695: LD_INT 1
51697: ST_TO_ADDR
// if p3 = 11 then
51698: LD_VAR 0 3
51702: PUSH
51703: LD_INT 11
51705: EQUAL
51706: IFFALSE 51716
// sRefresh := true ;
51708: LD_ADDR_EXP 119
51712: PUSH
51713: LD_INT 1
51715: ST_TO_ADDR
// if p3 = 12 then
51716: LD_VAR 0 3
51720: PUSH
51721: LD_INT 12
51723: EQUAL
51724: IFFALSE 51734
// sExp := true ;
51726: LD_ADDR_EXP 120
51730: PUSH
51731: LD_INT 1
51733: ST_TO_ADDR
// if p3 = 13 then
51734: LD_VAR 0 3
51738: PUSH
51739: LD_INT 13
51741: EQUAL
51742: IFFALSE 51752
// sDepot := true ;
51744: LD_ADDR_EXP 121
51748: PUSH
51749: LD_INT 1
51751: ST_TO_ADDR
// if p3 = 14 then
51752: LD_VAR 0 3
51756: PUSH
51757: LD_INT 14
51759: EQUAL
51760: IFFALSE 51770
// sFlag := true ;
51762: LD_ADDR_EXP 122
51766: PUSH
51767: LD_INT 1
51769: ST_TO_ADDR
// if p3 = 15 then
51770: LD_VAR 0 3
51774: PUSH
51775: LD_INT 15
51777: EQUAL
51778: IFFALSE 51788
// sKamikadze := true ;
51780: LD_ADDR_EXP 130
51784: PUSH
51785: LD_INT 1
51787: ST_TO_ADDR
// if p3 = 16 then
51788: LD_VAR 0 3
51792: PUSH
51793: LD_INT 16
51795: EQUAL
51796: IFFALSE 51806
// sTroll := true ;
51798: LD_ADDR_EXP 131
51802: PUSH
51803: LD_INT 1
51805: ST_TO_ADDR
// if p3 = 17 then
51806: LD_VAR 0 3
51810: PUSH
51811: LD_INT 17
51813: EQUAL
51814: IFFALSE 51824
// sSlow := true ;
51816: LD_ADDR_EXP 132
51820: PUSH
51821: LD_INT 1
51823: ST_TO_ADDR
// if p3 = 18 then
51824: LD_VAR 0 3
51828: PUSH
51829: LD_INT 18
51831: EQUAL
51832: IFFALSE 51842
// sLack := true ;
51834: LD_ADDR_EXP 133
51838: PUSH
51839: LD_INT 1
51841: ST_TO_ADDR
// if p3 = 19 then
51842: LD_VAR 0 3
51846: PUSH
51847: LD_INT 19
51849: EQUAL
51850: IFFALSE 51860
// sTank := true ;
51852: LD_ADDR_EXP 135
51856: PUSH
51857: LD_INT 1
51859: ST_TO_ADDR
// if p3 = 20 then
51860: LD_VAR 0 3
51864: PUSH
51865: LD_INT 20
51867: EQUAL
51868: IFFALSE 51878
// sRemote := true ;
51870: LD_ADDR_EXP 136
51874: PUSH
51875: LD_INT 1
51877: ST_TO_ADDR
// if p3 = 21 then
51878: LD_VAR 0 3
51882: PUSH
51883: LD_INT 21
51885: EQUAL
51886: IFFALSE 51896
// sPowell := true ;
51888: LD_ADDR_EXP 137
51892: PUSH
51893: LD_INT 1
51895: ST_TO_ADDR
// if p3 = 22 then
51896: LD_VAR 0 3
51900: PUSH
51901: LD_INT 22
51903: EQUAL
51904: IFFALSE 51914
// sTeleport := true ;
51906: LD_ADDR_EXP 140
51910: PUSH
51911: LD_INT 1
51913: ST_TO_ADDR
// if p3 = 23 then
51914: LD_VAR 0 3
51918: PUSH
51919: LD_INT 23
51921: EQUAL
51922: IFFALSE 51932
// sOilTower := true ;
51924: LD_ADDR_EXP 142
51928: PUSH
51929: LD_INT 1
51931: ST_TO_ADDR
// if p3 = 24 then
51932: LD_VAR 0 3
51936: PUSH
51937: LD_INT 24
51939: EQUAL
51940: IFFALSE 51950
// sShovel := true ;
51942: LD_ADDR_EXP 143
51946: PUSH
51947: LD_INT 1
51949: ST_TO_ADDR
// if p3 = 25 then
51950: LD_VAR 0 3
51954: PUSH
51955: LD_INT 25
51957: EQUAL
51958: IFFALSE 51968
// sSheik := true ;
51960: LD_ADDR_EXP 144
51964: PUSH
51965: LD_INT 1
51967: ST_TO_ADDR
// if p3 = 26 then
51968: LD_VAR 0 3
51972: PUSH
51973: LD_INT 26
51975: EQUAL
51976: IFFALSE 51986
// sEarthquake := true ;
51978: LD_ADDR_EXP 146
51982: PUSH
51983: LD_INT 1
51985: ST_TO_ADDR
// if p3 = 27 then
51986: LD_VAR 0 3
51990: PUSH
51991: LD_INT 27
51993: EQUAL
51994: IFFALSE 52004
// sAI := true ;
51996: LD_ADDR_EXP 147
52000: PUSH
52001: LD_INT 1
52003: ST_TO_ADDR
// if p3 = 28 then
52004: LD_VAR 0 3
52008: PUSH
52009: LD_INT 28
52011: EQUAL
52012: IFFALSE 52022
// sCargo := true ;
52014: LD_ADDR_EXP 150
52018: PUSH
52019: LD_INT 1
52021: ST_TO_ADDR
// if p3 = 29 then
52022: LD_VAR 0 3
52026: PUSH
52027: LD_INT 29
52029: EQUAL
52030: IFFALSE 52040
// sDLaser := true ;
52032: LD_ADDR_EXP 151
52036: PUSH
52037: LD_INT 1
52039: ST_TO_ADDR
// if p3 = 30 then
52040: LD_VAR 0 3
52044: PUSH
52045: LD_INT 30
52047: EQUAL
52048: IFFALSE 52058
// sExchange := true ;
52050: LD_ADDR_EXP 152
52054: PUSH
52055: LD_INT 1
52057: ST_TO_ADDR
// if p3 = 31 then
52058: LD_VAR 0 3
52062: PUSH
52063: LD_INT 31
52065: EQUAL
52066: IFFALSE 52076
// sFac := true ;
52068: LD_ADDR_EXP 153
52072: PUSH
52073: LD_INT 1
52075: ST_TO_ADDR
// if p3 = 32 then
52076: LD_VAR 0 3
52080: PUSH
52081: LD_INT 32
52083: EQUAL
52084: IFFALSE 52094
// sPower := true ;
52086: LD_ADDR_EXP 154
52090: PUSH
52091: LD_INT 1
52093: ST_TO_ADDR
// if p3 = 33 then
52094: LD_VAR 0 3
52098: PUSH
52099: LD_INT 33
52101: EQUAL
52102: IFFALSE 52112
// sRandom := true ;
52104: LD_ADDR_EXP 155
52108: PUSH
52109: LD_INT 1
52111: ST_TO_ADDR
// if p3 = 34 then
52112: LD_VAR 0 3
52116: PUSH
52117: LD_INT 34
52119: EQUAL
52120: IFFALSE 52130
// sShield := true ;
52122: LD_ADDR_EXP 156
52126: PUSH
52127: LD_INT 1
52129: ST_TO_ADDR
// if p3 = 35 then
52130: LD_VAR 0 3
52134: PUSH
52135: LD_INT 35
52137: EQUAL
52138: IFFALSE 52148
// sTime := true ;
52140: LD_ADDR_EXP 157
52144: PUSH
52145: LD_INT 1
52147: ST_TO_ADDR
// if p3 = 36 then
52148: LD_VAR 0 3
52152: PUSH
52153: LD_INT 36
52155: EQUAL
52156: IFFALSE 52166
// sTools := true ;
52158: LD_ADDR_EXP 158
52162: PUSH
52163: LD_INT 1
52165: ST_TO_ADDR
// if p3 = 101 then
52166: LD_VAR 0 3
52170: PUSH
52171: LD_INT 101
52173: EQUAL
52174: IFFALSE 52184
// sSold := true ;
52176: LD_ADDR_EXP 123
52180: PUSH
52181: LD_INT 1
52183: ST_TO_ADDR
// if p3 = 102 then
52184: LD_VAR 0 3
52188: PUSH
52189: LD_INT 102
52191: EQUAL
52192: IFFALSE 52202
// sDiff := true ;
52194: LD_ADDR_EXP 124
52198: PUSH
52199: LD_INT 1
52201: ST_TO_ADDR
// if p3 = 103 then
52202: LD_VAR 0 3
52206: PUSH
52207: LD_INT 103
52209: EQUAL
52210: IFFALSE 52220
// sFog := true ;
52212: LD_ADDR_EXP 127
52216: PUSH
52217: LD_INT 1
52219: ST_TO_ADDR
// if p3 = 104 then
52220: LD_VAR 0 3
52224: PUSH
52225: LD_INT 104
52227: EQUAL
52228: IFFALSE 52238
// sReset := true ;
52230: LD_ADDR_EXP 128
52234: PUSH
52235: LD_INT 1
52237: ST_TO_ADDR
// if p3 = 105 then
52238: LD_VAR 0 3
52242: PUSH
52243: LD_INT 105
52245: EQUAL
52246: IFFALSE 52256
// sSun := true ;
52248: LD_ADDR_EXP 129
52252: PUSH
52253: LD_INT 1
52255: ST_TO_ADDR
// if p3 = 106 then
52256: LD_VAR 0 3
52260: PUSH
52261: LD_INT 106
52263: EQUAL
52264: IFFALSE 52274
// sTiger := true ;
52266: LD_ADDR_EXP 125
52270: PUSH
52271: LD_INT 1
52273: ST_TO_ADDR
// if p3 = 107 then
52274: LD_VAR 0 3
52278: PUSH
52279: LD_INT 107
52281: EQUAL
52282: IFFALSE 52292
// sBomb := true ;
52284: LD_ADDR_EXP 126
52288: PUSH
52289: LD_INT 1
52291: ST_TO_ADDR
// if p3 = 108 then
52292: LD_VAR 0 3
52296: PUSH
52297: LD_INT 108
52299: EQUAL
52300: IFFALSE 52310
// sWound := true ;
52302: LD_ADDR_EXP 134
52306: PUSH
52307: LD_INT 1
52309: ST_TO_ADDR
// if p3 = 109 then
52310: LD_VAR 0 3
52314: PUSH
52315: LD_INT 109
52317: EQUAL
52318: IFFALSE 52328
// sBetray := true ;
52320: LD_ADDR_EXP 138
52324: PUSH
52325: LD_INT 1
52327: ST_TO_ADDR
// if p3 = 110 then
52328: LD_VAR 0 3
52332: PUSH
52333: LD_INT 110
52335: EQUAL
52336: IFFALSE 52346
// sContamin := true ;
52338: LD_ADDR_EXP 139
52342: PUSH
52343: LD_INT 1
52345: ST_TO_ADDR
// if p3 = 111 then
52346: LD_VAR 0 3
52350: PUSH
52351: LD_INT 111
52353: EQUAL
52354: IFFALSE 52364
// sOil := true ;
52356: LD_ADDR_EXP 141
52360: PUSH
52361: LD_INT 1
52363: ST_TO_ADDR
// if p3 = 112 then
52364: LD_VAR 0 3
52368: PUSH
52369: LD_INT 112
52371: EQUAL
52372: IFFALSE 52382
// sStu := true ;
52374: LD_ADDR_EXP 145
52378: PUSH
52379: LD_INT 1
52381: ST_TO_ADDR
// if p3 = 113 then
52382: LD_VAR 0 3
52386: PUSH
52387: LD_INT 113
52389: EQUAL
52390: IFFALSE 52400
// sBazooka := true ;
52392: LD_ADDR_EXP 148
52396: PUSH
52397: LD_INT 1
52399: ST_TO_ADDR
// if p3 = 114 then
52400: LD_VAR 0 3
52404: PUSH
52405: LD_INT 114
52407: EQUAL
52408: IFFALSE 52418
// sMortar := true ;
52410: LD_ADDR_EXP 149
52414: PUSH
52415: LD_INT 1
52417: ST_TO_ADDR
// if p3 = 115 then
52418: LD_VAR 0 3
52422: PUSH
52423: LD_INT 115
52425: EQUAL
52426: IFFALSE 52436
// sRanger := true ;
52428: LD_ADDR_EXP 159
52432: PUSH
52433: LD_INT 1
52435: ST_TO_ADDR
// if p3 = 116 then
52436: LD_VAR 0 3
52440: PUSH
52441: LD_INT 116
52443: EQUAL
52444: IFFALSE 52454
// sComputer := true ;
52446: LD_ADDR_EXP 160
52450: PUSH
52451: LD_INT 1
52453: ST_TO_ADDR
// if p3 = 117 then
52454: LD_VAR 0 3
52458: PUSH
52459: LD_INT 117
52461: EQUAL
52462: IFFALSE 52472
// s30 := true ;
52464: LD_ADDR_EXP 161
52468: PUSH
52469: LD_INT 1
52471: ST_TO_ADDR
// if p3 = 118 then
52472: LD_VAR 0 3
52476: PUSH
52477: LD_INT 118
52479: EQUAL
52480: IFFALSE 52490
// s60 := true ;
52482: LD_ADDR_EXP 162
52486: PUSH
52487: LD_INT 1
52489: ST_TO_ADDR
// end ; if p2 = 101 then
52490: LD_VAR 0 2
52494: PUSH
52495: LD_INT 101
52497: EQUAL
52498: IFFALSE 52626
// begin case p3 of 1 :
52500: LD_VAR 0 3
52504: PUSH
52505: LD_INT 1
52507: DOUBLE
52508: EQUAL
52509: IFTRUE 52513
52511: GO 52520
52513: POP
// hHackUnlimitedResources ; 2 :
52514: CALL 64724 0 0
52518: GO 52626
52520: LD_INT 2
52522: DOUBLE
52523: EQUAL
52524: IFTRUE 52528
52526: GO 52535
52528: POP
// hHackSetLevel10 ; 3 :
52529: CALL 64857 0 0
52533: GO 52626
52535: LD_INT 3
52537: DOUBLE
52538: EQUAL
52539: IFTRUE 52543
52541: GO 52550
52543: POP
// hHackSetLevel10YourUnits ; 4 :
52544: CALL 64942 0 0
52548: GO 52626
52550: LD_INT 4
52552: DOUBLE
52553: EQUAL
52554: IFTRUE 52558
52556: GO 52565
52558: POP
// hHackInvincible ; 5 :
52559: CALL 65390 0 0
52563: GO 52626
52565: LD_INT 5
52567: DOUBLE
52568: EQUAL
52569: IFTRUE 52573
52571: GO 52580
52573: POP
// hHackInvisible ; 6 :
52574: CALL 65501 0 0
52578: GO 52626
52580: LD_INT 6
52582: DOUBLE
52583: EQUAL
52584: IFTRUE 52588
52586: GO 52595
52588: POP
// hHackChangeYourSide ; 7 :
52589: CALL 65558 0 0
52593: GO 52626
52595: LD_INT 7
52597: DOUBLE
52598: EQUAL
52599: IFTRUE 52603
52601: GO 52610
52603: POP
// hHackChangeUnitSide ; 8 :
52604: CALL 65600 0 0
52608: GO 52626
52610: LD_INT 8
52612: DOUBLE
52613: EQUAL
52614: IFTRUE 52618
52616: GO 52625
52618: POP
// hHackFog ; end ;
52619: CALL 65701 0 0
52623: GO 52626
52625: POP
// end ; end ;
52626: LD_VAR 0 7
52630: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
52631: GO 52633
52633: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
52634: LD_STRING initStreamRollete();
52636: PPUSH
52637: CALL_OW 559
// InitStreamMode ;
52641: CALL 52653 0 0
// DefineStreamItems ( false ) ;
52645: LD_INT 0
52647: PPUSH
52648: CALL 53117 0 1
// end ;
52652: END
// function InitStreamMode ; begin
52653: LD_INT 0
52655: PPUSH
// streamModeActive := false ;
52656: LD_ADDR_EXP 106
52660: PUSH
52661: LD_INT 0
52663: ST_TO_ADDR
// normalCounter := 36 ;
52664: LD_ADDR_EXP 107
52668: PUSH
52669: LD_INT 36
52671: ST_TO_ADDR
// hardcoreCounter := 18 ;
52672: LD_ADDR_EXP 108
52676: PUSH
52677: LD_INT 18
52679: ST_TO_ADDR
// sRocket := false ;
52680: LD_ADDR_EXP 111
52684: PUSH
52685: LD_INT 0
52687: ST_TO_ADDR
// sSpeed := false ;
52688: LD_ADDR_EXP 110
52692: PUSH
52693: LD_INT 0
52695: ST_TO_ADDR
// sEngine := false ;
52696: LD_ADDR_EXP 112
52700: PUSH
52701: LD_INT 0
52703: ST_TO_ADDR
// sSpec := false ;
52704: LD_ADDR_EXP 109
52708: PUSH
52709: LD_INT 0
52711: ST_TO_ADDR
// sLevel := false ;
52712: LD_ADDR_EXP 113
52716: PUSH
52717: LD_INT 0
52719: ST_TO_ADDR
// sArmoury := false ;
52720: LD_ADDR_EXP 114
52724: PUSH
52725: LD_INT 0
52727: ST_TO_ADDR
// sRadar := false ;
52728: LD_ADDR_EXP 115
52732: PUSH
52733: LD_INT 0
52735: ST_TO_ADDR
// sBunker := false ;
52736: LD_ADDR_EXP 116
52740: PUSH
52741: LD_INT 0
52743: ST_TO_ADDR
// sHack := false ;
52744: LD_ADDR_EXP 117
52748: PUSH
52749: LD_INT 0
52751: ST_TO_ADDR
// sFire := false ;
52752: LD_ADDR_EXP 118
52756: PUSH
52757: LD_INT 0
52759: ST_TO_ADDR
// sRefresh := false ;
52760: LD_ADDR_EXP 119
52764: PUSH
52765: LD_INT 0
52767: ST_TO_ADDR
// sExp := false ;
52768: LD_ADDR_EXP 120
52772: PUSH
52773: LD_INT 0
52775: ST_TO_ADDR
// sDepot := false ;
52776: LD_ADDR_EXP 121
52780: PUSH
52781: LD_INT 0
52783: ST_TO_ADDR
// sFlag := false ;
52784: LD_ADDR_EXP 122
52788: PUSH
52789: LD_INT 0
52791: ST_TO_ADDR
// sKamikadze := false ;
52792: LD_ADDR_EXP 130
52796: PUSH
52797: LD_INT 0
52799: ST_TO_ADDR
// sTroll := false ;
52800: LD_ADDR_EXP 131
52804: PUSH
52805: LD_INT 0
52807: ST_TO_ADDR
// sSlow := false ;
52808: LD_ADDR_EXP 132
52812: PUSH
52813: LD_INT 0
52815: ST_TO_ADDR
// sLack := false ;
52816: LD_ADDR_EXP 133
52820: PUSH
52821: LD_INT 0
52823: ST_TO_ADDR
// sTank := false ;
52824: LD_ADDR_EXP 135
52828: PUSH
52829: LD_INT 0
52831: ST_TO_ADDR
// sRemote := false ;
52832: LD_ADDR_EXP 136
52836: PUSH
52837: LD_INT 0
52839: ST_TO_ADDR
// sPowell := false ;
52840: LD_ADDR_EXP 137
52844: PUSH
52845: LD_INT 0
52847: ST_TO_ADDR
// sTeleport := false ;
52848: LD_ADDR_EXP 140
52852: PUSH
52853: LD_INT 0
52855: ST_TO_ADDR
// sOilTower := false ;
52856: LD_ADDR_EXP 142
52860: PUSH
52861: LD_INT 0
52863: ST_TO_ADDR
// sShovel := false ;
52864: LD_ADDR_EXP 143
52868: PUSH
52869: LD_INT 0
52871: ST_TO_ADDR
// sSheik := false ;
52872: LD_ADDR_EXP 144
52876: PUSH
52877: LD_INT 0
52879: ST_TO_ADDR
// sEarthquake := false ;
52880: LD_ADDR_EXP 146
52884: PUSH
52885: LD_INT 0
52887: ST_TO_ADDR
// sAI := false ;
52888: LD_ADDR_EXP 147
52892: PUSH
52893: LD_INT 0
52895: ST_TO_ADDR
// sCargo := false ;
52896: LD_ADDR_EXP 150
52900: PUSH
52901: LD_INT 0
52903: ST_TO_ADDR
// sDLaser := false ;
52904: LD_ADDR_EXP 151
52908: PUSH
52909: LD_INT 0
52911: ST_TO_ADDR
// sExchange := false ;
52912: LD_ADDR_EXP 152
52916: PUSH
52917: LD_INT 0
52919: ST_TO_ADDR
// sFac := false ;
52920: LD_ADDR_EXP 153
52924: PUSH
52925: LD_INT 0
52927: ST_TO_ADDR
// sPower := false ;
52928: LD_ADDR_EXP 154
52932: PUSH
52933: LD_INT 0
52935: ST_TO_ADDR
// sRandom := false ;
52936: LD_ADDR_EXP 155
52940: PUSH
52941: LD_INT 0
52943: ST_TO_ADDR
// sShield := false ;
52944: LD_ADDR_EXP 156
52948: PUSH
52949: LD_INT 0
52951: ST_TO_ADDR
// sTime := false ;
52952: LD_ADDR_EXP 157
52956: PUSH
52957: LD_INT 0
52959: ST_TO_ADDR
// sTools := false ;
52960: LD_ADDR_EXP 158
52964: PUSH
52965: LD_INT 0
52967: ST_TO_ADDR
// sSold := false ;
52968: LD_ADDR_EXP 123
52972: PUSH
52973: LD_INT 0
52975: ST_TO_ADDR
// sDiff := false ;
52976: LD_ADDR_EXP 124
52980: PUSH
52981: LD_INT 0
52983: ST_TO_ADDR
// sFog := false ;
52984: LD_ADDR_EXP 127
52988: PUSH
52989: LD_INT 0
52991: ST_TO_ADDR
// sReset := false ;
52992: LD_ADDR_EXP 128
52996: PUSH
52997: LD_INT 0
52999: ST_TO_ADDR
// sSun := false ;
53000: LD_ADDR_EXP 129
53004: PUSH
53005: LD_INT 0
53007: ST_TO_ADDR
// sTiger := false ;
53008: LD_ADDR_EXP 125
53012: PUSH
53013: LD_INT 0
53015: ST_TO_ADDR
// sBomb := false ;
53016: LD_ADDR_EXP 126
53020: PUSH
53021: LD_INT 0
53023: ST_TO_ADDR
// sWound := false ;
53024: LD_ADDR_EXP 134
53028: PUSH
53029: LD_INT 0
53031: ST_TO_ADDR
// sBetray := false ;
53032: LD_ADDR_EXP 138
53036: PUSH
53037: LD_INT 0
53039: ST_TO_ADDR
// sContamin := false ;
53040: LD_ADDR_EXP 139
53044: PUSH
53045: LD_INT 0
53047: ST_TO_ADDR
// sOil := false ;
53048: LD_ADDR_EXP 141
53052: PUSH
53053: LD_INT 0
53055: ST_TO_ADDR
// sStu := false ;
53056: LD_ADDR_EXP 145
53060: PUSH
53061: LD_INT 0
53063: ST_TO_ADDR
// sBazooka := false ;
53064: LD_ADDR_EXP 148
53068: PUSH
53069: LD_INT 0
53071: ST_TO_ADDR
// sMortar := false ;
53072: LD_ADDR_EXP 149
53076: PUSH
53077: LD_INT 0
53079: ST_TO_ADDR
// sRanger := false ;
53080: LD_ADDR_EXP 159
53084: PUSH
53085: LD_INT 0
53087: ST_TO_ADDR
// sComputer := false ;
53088: LD_ADDR_EXP 160
53092: PUSH
53093: LD_INT 0
53095: ST_TO_ADDR
// s30 := false ;
53096: LD_ADDR_EXP 161
53100: PUSH
53101: LD_INT 0
53103: ST_TO_ADDR
// s60 := false ;
53104: LD_ADDR_EXP 162
53108: PUSH
53109: LD_INT 0
53111: ST_TO_ADDR
// end ;
53112: LD_VAR 0 1
53116: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
53117: LD_INT 0
53119: PPUSH
53120: PPUSH
53121: PPUSH
53122: PPUSH
53123: PPUSH
53124: PPUSH
53125: PPUSH
// result := [ ] ;
53126: LD_ADDR_VAR 0 2
53130: PUSH
53131: EMPTY
53132: ST_TO_ADDR
// if campaign_id = 1 then
53133: LD_OWVAR 69
53137: PUSH
53138: LD_INT 1
53140: EQUAL
53141: IFFALSE 56307
// begin case mission_number of 1 :
53143: LD_OWVAR 70
53147: PUSH
53148: LD_INT 1
53150: DOUBLE
53151: EQUAL
53152: IFTRUE 53156
53154: GO 53232
53156: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
53157: LD_ADDR_VAR 0 2
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: LD_INT 4
53167: PUSH
53168: LD_INT 11
53170: PUSH
53171: LD_INT 12
53173: PUSH
53174: LD_INT 15
53176: PUSH
53177: LD_INT 16
53179: PUSH
53180: LD_INT 22
53182: PUSH
53183: LD_INT 23
53185: PUSH
53186: LD_INT 26
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 101
53202: PUSH
53203: LD_INT 102
53205: PUSH
53206: LD_INT 106
53208: PUSH
53209: LD_INT 116
53211: PUSH
53212: LD_INT 117
53214: PUSH
53215: LD_INT 118
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: ST_TO_ADDR
53230: GO 56305
53232: LD_INT 2
53234: DOUBLE
53235: EQUAL
53236: IFTRUE 53240
53238: GO 53324
53240: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
53241: LD_ADDR_VAR 0 2
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: LD_INT 4
53251: PUSH
53252: LD_INT 11
53254: PUSH
53255: LD_INT 12
53257: PUSH
53258: LD_INT 15
53260: PUSH
53261: LD_INT 16
53263: PUSH
53264: LD_INT 22
53266: PUSH
53267: LD_INT 23
53269: PUSH
53270: LD_INT 26
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 101
53286: PUSH
53287: LD_INT 102
53289: PUSH
53290: LD_INT 105
53292: PUSH
53293: LD_INT 106
53295: PUSH
53296: LD_INT 108
53298: PUSH
53299: LD_INT 116
53301: PUSH
53302: LD_INT 117
53304: PUSH
53305: LD_INT 118
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: ST_TO_ADDR
53322: GO 56305
53324: LD_INT 3
53326: DOUBLE
53327: EQUAL
53328: IFTRUE 53332
53330: GO 53420
53332: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
53333: LD_ADDR_VAR 0 2
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: LD_INT 4
53343: PUSH
53344: LD_INT 5
53346: PUSH
53347: LD_INT 11
53349: PUSH
53350: LD_INT 12
53352: PUSH
53353: LD_INT 15
53355: PUSH
53356: LD_INT 16
53358: PUSH
53359: LD_INT 22
53361: PUSH
53362: LD_INT 26
53364: PUSH
53365: LD_INT 36
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 101
53382: PUSH
53383: LD_INT 102
53385: PUSH
53386: LD_INT 105
53388: PUSH
53389: LD_INT 106
53391: PUSH
53392: LD_INT 108
53394: PUSH
53395: LD_INT 116
53397: PUSH
53398: LD_INT 117
53400: PUSH
53401: LD_INT 118
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: ST_TO_ADDR
53418: GO 56305
53420: LD_INT 4
53422: DOUBLE
53423: EQUAL
53424: IFTRUE 53428
53426: GO 53524
53428: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
53429: LD_ADDR_VAR 0 2
53433: PUSH
53434: LD_INT 2
53436: PUSH
53437: LD_INT 4
53439: PUSH
53440: LD_INT 5
53442: PUSH
53443: LD_INT 8
53445: PUSH
53446: LD_INT 11
53448: PUSH
53449: LD_INT 12
53451: PUSH
53452: LD_INT 15
53454: PUSH
53455: LD_INT 16
53457: PUSH
53458: LD_INT 22
53460: PUSH
53461: LD_INT 23
53463: PUSH
53464: LD_INT 26
53466: PUSH
53467: LD_INT 36
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 101
53486: PUSH
53487: LD_INT 102
53489: PUSH
53490: LD_INT 105
53492: PUSH
53493: LD_INT 106
53495: PUSH
53496: LD_INT 108
53498: PUSH
53499: LD_INT 116
53501: PUSH
53502: LD_INT 117
53504: PUSH
53505: LD_INT 118
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: ST_TO_ADDR
53522: GO 56305
53524: LD_INT 5
53526: DOUBLE
53527: EQUAL
53528: IFTRUE 53532
53530: GO 53644
53532: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
53533: LD_ADDR_VAR 0 2
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 4
53543: PUSH
53544: LD_INT 5
53546: PUSH
53547: LD_INT 6
53549: PUSH
53550: LD_INT 8
53552: PUSH
53553: LD_INT 11
53555: PUSH
53556: LD_INT 12
53558: PUSH
53559: LD_INT 15
53561: PUSH
53562: LD_INT 16
53564: PUSH
53565: LD_INT 22
53567: PUSH
53568: LD_INT 23
53570: PUSH
53571: LD_INT 25
53573: PUSH
53574: LD_INT 26
53576: PUSH
53577: LD_INT 36
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 101
53598: PUSH
53599: LD_INT 102
53601: PUSH
53602: LD_INT 105
53604: PUSH
53605: LD_INT 106
53607: PUSH
53608: LD_INT 108
53610: PUSH
53611: LD_INT 109
53613: PUSH
53614: LD_INT 112
53616: PUSH
53617: LD_INT 116
53619: PUSH
53620: LD_INT 117
53622: PUSH
53623: LD_INT 118
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: ST_TO_ADDR
53642: GO 56305
53644: LD_INT 6
53646: DOUBLE
53647: EQUAL
53648: IFTRUE 53652
53650: GO 53784
53652: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
53653: LD_ADDR_VAR 0 2
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: LD_INT 4
53663: PUSH
53664: LD_INT 5
53666: PUSH
53667: LD_INT 6
53669: PUSH
53670: LD_INT 8
53672: PUSH
53673: LD_INT 11
53675: PUSH
53676: LD_INT 12
53678: PUSH
53679: LD_INT 15
53681: PUSH
53682: LD_INT 16
53684: PUSH
53685: LD_INT 20
53687: PUSH
53688: LD_INT 21
53690: PUSH
53691: LD_INT 22
53693: PUSH
53694: LD_INT 23
53696: PUSH
53697: LD_INT 25
53699: PUSH
53700: LD_INT 26
53702: PUSH
53703: LD_INT 30
53705: PUSH
53706: LD_INT 31
53708: PUSH
53709: LD_INT 32
53711: PUSH
53712: LD_INT 36
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 101
53738: PUSH
53739: LD_INT 102
53741: PUSH
53742: LD_INT 105
53744: PUSH
53745: LD_INT 106
53747: PUSH
53748: LD_INT 108
53750: PUSH
53751: LD_INT 109
53753: PUSH
53754: LD_INT 112
53756: PUSH
53757: LD_INT 116
53759: PUSH
53760: LD_INT 117
53762: PUSH
53763: LD_INT 118
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: ST_TO_ADDR
53782: GO 56305
53784: LD_INT 7
53786: DOUBLE
53787: EQUAL
53788: IFTRUE 53792
53790: GO 53904
53792: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
53793: LD_ADDR_VAR 0 2
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: LD_INT 4
53803: PUSH
53804: LD_INT 5
53806: PUSH
53807: LD_INT 7
53809: PUSH
53810: LD_INT 11
53812: PUSH
53813: LD_INT 12
53815: PUSH
53816: LD_INT 15
53818: PUSH
53819: LD_INT 16
53821: PUSH
53822: LD_INT 20
53824: PUSH
53825: LD_INT 21
53827: PUSH
53828: LD_INT 22
53830: PUSH
53831: LD_INT 23
53833: PUSH
53834: LD_INT 25
53836: PUSH
53837: LD_INT 26
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 101
53858: PUSH
53859: LD_INT 102
53861: PUSH
53862: LD_INT 103
53864: PUSH
53865: LD_INT 105
53867: PUSH
53868: LD_INT 106
53870: PUSH
53871: LD_INT 108
53873: PUSH
53874: LD_INT 112
53876: PUSH
53877: LD_INT 116
53879: PUSH
53880: LD_INT 117
53882: PUSH
53883: LD_INT 118
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: ST_TO_ADDR
53902: GO 56305
53904: LD_INT 8
53906: DOUBLE
53907: EQUAL
53908: IFTRUE 53912
53910: GO 54052
53912: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
53913: LD_ADDR_VAR 0 2
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: LD_INT 4
53923: PUSH
53924: LD_INT 5
53926: PUSH
53927: LD_INT 6
53929: PUSH
53930: LD_INT 7
53932: PUSH
53933: LD_INT 8
53935: PUSH
53936: LD_INT 11
53938: PUSH
53939: LD_INT 12
53941: PUSH
53942: LD_INT 15
53944: PUSH
53945: LD_INT 16
53947: PUSH
53948: LD_INT 20
53950: PUSH
53951: LD_INT 21
53953: PUSH
53954: LD_INT 22
53956: PUSH
53957: LD_INT 23
53959: PUSH
53960: LD_INT 25
53962: PUSH
53963: LD_INT 26
53965: PUSH
53966: LD_INT 30
53968: PUSH
53969: LD_INT 31
53971: PUSH
53972: LD_INT 32
53974: PUSH
53975: LD_INT 36
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 101
54002: PUSH
54003: LD_INT 102
54005: PUSH
54006: LD_INT 103
54008: PUSH
54009: LD_INT 105
54011: PUSH
54012: LD_INT 106
54014: PUSH
54015: LD_INT 108
54017: PUSH
54018: LD_INT 109
54020: PUSH
54021: LD_INT 112
54023: PUSH
54024: LD_INT 116
54026: PUSH
54027: LD_INT 117
54029: PUSH
54030: LD_INT 118
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: ST_TO_ADDR
54050: GO 56305
54052: LD_INT 9
54054: DOUBLE
54055: EQUAL
54056: IFTRUE 54060
54058: GO 54208
54060: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
54061: LD_ADDR_VAR 0 2
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: LD_INT 4
54071: PUSH
54072: LD_INT 5
54074: PUSH
54075: LD_INT 6
54077: PUSH
54078: LD_INT 7
54080: PUSH
54081: LD_INT 8
54083: PUSH
54084: LD_INT 11
54086: PUSH
54087: LD_INT 12
54089: PUSH
54090: LD_INT 15
54092: PUSH
54093: LD_INT 16
54095: PUSH
54096: LD_INT 20
54098: PUSH
54099: LD_INT 21
54101: PUSH
54102: LD_INT 22
54104: PUSH
54105: LD_INT 23
54107: PUSH
54108: LD_INT 25
54110: PUSH
54111: LD_INT 26
54113: PUSH
54114: LD_INT 28
54116: PUSH
54117: LD_INT 30
54119: PUSH
54120: LD_INT 31
54122: PUSH
54123: LD_INT 32
54125: PUSH
54126: LD_INT 36
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 101
54154: PUSH
54155: LD_INT 102
54157: PUSH
54158: LD_INT 103
54160: PUSH
54161: LD_INT 105
54163: PUSH
54164: LD_INT 106
54166: PUSH
54167: LD_INT 108
54169: PUSH
54170: LD_INT 109
54172: PUSH
54173: LD_INT 112
54175: PUSH
54176: LD_INT 114
54178: PUSH
54179: LD_INT 116
54181: PUSH
54182: LD_INT 117
54184: PUSH
54185: LD_INT 118
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: ST_TO_ADDR
54206: GO 56305
54208: LD_INT 10
54210: DOUBLE
54211: EQUAL
54212: IFTRUE 54216
54214: GO 54412
54216: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
54217: LD_ADDR_VAR 0 2
54221: PUSH
54222: LD_INT 2
54224: PUSH
54225: LD_INT 4
54227: PUSH
54228: LD_INT 5
54230: PUSH
54231: LD_INT 6
54233: PUSH
54234: LD_INT 7
54236: PUSH
54237: LD_INT 8
54239: PUSH
54240: LD_INT 9
54242: PUSH
54243: LD_INT 10
54245: PUSH
54246: LD_INT 11
54248: PUSH
54249: LD_INT 12
54251: PUSH
54252: LD_INT 13
54254: PUSH
54255: LD_INT 14
54257: PUSH
54258: LD_INT 15
54260: PUSH
54261: LD_INT 16
54263: PUSH
54264: LD_INT 17
54266: PUSH
54267: LD_INT 18
54269: PUSH
54270: LD_INT 19
54272: PUSH
54273: LD_INT 20
54275: PUSH
54276: LD_INT 21
54278: PUSH
54279: LD_INT 22
54281: PUSH
54282: LD_INT 23
54284: PUSH
54285: LD_INT 24
54287: PUSH
54288: LD_INT 25
54290: PUSH
54291: LD_INT 26
54293: PUSH
54294: LD_INT 28
54296: PUSH
54297: LD_INT 30
54299: PUSH
54300: LD_INT 31
54302: PUSH
54303: LD_INT 32
54305: PUSH
54306: LD_INT 36
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 101
54342: PUSH
54343: LD_INT 102
54345: PUSH
54346: LD_INT 103
54348: PUSH
54349: LD_INT 104
54351: PUSH
54352: LD_INT 105
54354: PUSH
54355: LD_INT 106
54357: PUSH
54358: LD_INT 107
54360: PUSH
54361: LD_INT 108
54363: PUSH
54364: LD_INT 109
54366: PUSH
54367: LD_INT 110
54369: PUSH
54370: LD_INT 111
54372: PUSH
54373: LD_INT 112
54375: PUSH
54376: LD_INT 114
54378: PUSH
54379: LD_INT 116
54381: PUSH
54382: LD_INT 117
54384: PUSH
54385: LD_INT 118
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: ST_TO_ADDR
54410: GO 56305
54412: LD_INT 11
54414: DOUBLE
54415: EQUAL
54416: IFTRUE 54420
54418: GO 54624
54420: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
54421: LD_ADDR_VAR 0 2
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: LD_INT 3
54431: PUSH
54432: LD_INT 4
54434: PUSH
54435: LD_INT 5
54437: PUSH
54438: LD_INT 6
54440: PUSH
54441: LD_INT 7
54443: PUSH
54444: LD_INT 8
54446: PUSH
54447: LD_INT 9
54449: PUSH
54450: LD_INT 10
54452: PUSH
54453: LD_INT 11
54455: PUSH
54456: LD_INT 12
54458: PUSH
54459: LD_INT 13
54461: PUSH
54462: LD_INT 14
54464: PUSH
54465: LD_INT 15
54467: PUSH
54468: LD_INT 16
54470: PUSH
54471: LD_INT 17
54473: PUSH
54474: LD_INT 18
54476: PUSH
54477: LD_INT 19
54479: PUSH
54480: LD_INT 20
54482: PUSH
54483: LD_INT 21
54485: PUSH
54486: LD_INT 22
54488: PUSH
54489: LD_INT 23
54491: PUSH
54492: LD_INT 24
54494: PUSH
54495: LD_INT 25
54497: PUSH
54498: LD_INT 26
54500: PUSH
54501: LD_INT 28
54503: PUSH
54504: LD_INT 30
54506: PUSH
54507: LD_INT 31
54509: PUSH
54510: LD_INT 32
54512: PUSH
54513: LD_INT 34
54515: PUSH
54516: LD_INT 36
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 101
54554: PUSH
54555: LD_INT 102
54557: PUSH
54558: LD_INT 103
54560: PUSH
54561: LD_INT 104
54563: PUSH
54564: LD_INT 105
54566: PUSH
54567: LD_INT 106
54569: PUSH
54570: LD_INT 107
54572: PUSH
54573: LD_INT 108
54575: PUSH
54576: LD_INT 109
54578: PUSH
54579: LD_INT 110
54581: PUSH
54582: LD_INT 111
54584: PUSH
54585: LD_INT 112
54587: PUSH
54588: LD_INT 114
54590: PUSH
54591: LD_INT 116
54593: PUSH
54594: LD_INT 117
54596: PUSH
54597: LD_INT 118
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: ST_TO_ADDR
54622: GO 56305
54624: LD_INT 12
54626: DOUBLE
54627: EQUAL
54628: IFTRUE 54632
54630: GO 54852
54632: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
54633: LD_ADDR_VAR 0 2
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: LD_INT 3
54646: PUSH
54647: LD_INT 4
54649: PUSH
54650: LD_INT 5
54652: PUSH
54653: LD_INT 6
54655: PUSH
54656: LD_INT 7
54658: PUSH
54659: LD_INT 8
54661: PUSH
54662: LD_INT 9
54664: PUSH
54665: LD_INT 10
54667: PUSH
54668: LD_INT 11
54670: PUSH
54671: LD_INT 12
54673: PUSH
54674: LD_INT 13
54676: PUSH
54677: LD_INT 14
54679: PUSH
54680: LD_INT 15
54682: PUSH
54683: LD_INT 16
54685: PUSH
54686: LD_INT 17
54688: PUSH
54689: LD_INT 18
54691: PUSH
54692: LD_INT 19
54694: PUSH
54695: LD_INT 20
54697: PUSH
54698: LD_INT 21
54700: PUSH
54701: LD_INT 22
54703: PUSH
54704: LD_INT 23
54706: PUSH
54707: LD_INT 24
54709: PUSH
54710: LD_INT 25
54712: PUSH
54713: LD_INT 26
54715: PUSH
54716: LD_INT 27
54718: PUSH
54719: LD_INT 28
54721: PUSH
54722: LD_INT 30
54724: PUSH
54725: LD_INT 31
54727: PUSH
54728: LD_INT 32
54730: PUSH
54731: LD_INT 33
54733: PUSH
54734: LD_INT 34
54736: PUSH
54737: LD_INT 36
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 101
54778: PUSH
54779: LD_INT 102
54781: PUSH
54782: LD_INT 103
54784: PUSH
54785: LD_INT 104
54787: PUSH
54788: LD_INT 105
54790: PUSH
54791: LD_INT 106
54793: PUSH
54794: LD_INT 107
54796: PUSH
54797: LD_INT 108
54799: PUSH
54800: LD_INT 109
54802: PUSH
54803: LD_INT 110
54805: PUSH
54806: LD_INT 111
54808: PUSH
54809: LD_INT 112
54811: PUSH
54812: LD_INT 113
54814: PUSH
54815: LD_INT 114
54817: PUSH
54818: LD_INT 116
54820: PUSH
54821: LD_INT 117
54823: PUSH
54824: LD_INT 118
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: ST_TO_ADDR
54850: GO 56305
54852: LD_INT 13
54854: DOUBLE
54855: EQUAL
54856: IFTRUE 54860
54858: GO 55068
54860: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
54861: LD_ADDR_VAR 0 2
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: LD_INT 3
54874: PUSH
54875: LD_INT 4
54877: PUSH
54878: LD_INT 5
54880: PUSH
54881: LD_INT 8
54883: PUSH
54884: LD_INT 9
54886: PUSH
54887: LD_INT 10
54889: PUSH
54890: LD_INT 11
54892: PUSH
54893: LD_INT 12
54895: PUSH
54896: LD_INT 14
54898: PUSH
54899: LD_INT 15
54901: PUSH
54902: LD_INT 16
54904: PUSH
54905: LD_INT 17
54907: PUSH
54908: LD_INT 18
54910: PUSH
54911: LD_INT 19
54913: PUSH
54914: LD_INT 20
54916: PUSH
54917: LD_INT 21
54919: PUSH
54920: LD_INT 22
54922: PUSH
54923: LD_INT 23
54925: PUSH
54926: LD_INT 24
54928: PUSH
54929: LD_INT 25
54931: PUSH
54932: LD_INT 26
54934: PUSH
54935: LD_INT 27
54937: PUSH
54938: LD_INT 28
54940: PUSH
54941: LD_INT 30
54943: PUSH
54944: LD_INT 31
54946: PUSH
54947: LD_INT 32
54949: PUSH
54950: LD_INT 33
54952: PUSH
54953: LD_INT 34
54955: PUSH
54956: LD_INT 36
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 101
54994: PUSH
54995: LD_INT 102
54997: PUSH
54998: LD_INT 103
55000: PUSH
55001: LD_INT 104
55003: PUSH
55004: LD_INT 105
55006: PUSH
55007: LD_INT 106
55009: PUSH
55010: LD_INT 107
55012: PUSH
55013: LD_INT 108
55015: PUSH
55016: LD_INT 109
55018: PUSH
55019: LD_INT 110
55021: PUSH
55022: LD_INT 111
55024: PUSH
55025: LD_INT 112
55027: PUSH
55028: LD_INT 113
55030: PUSH
55031: LD_INT 114
55033: PUSH
55034: LD_INT 116
55036: PUSH
55037: LD_INT 117
55039: PUSH
55040: LD_INT 118
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: ST_TO_ADDR
55066: GO 56305
55068: LD_INT 14
55070: DOUBLE
55071: EQUAL
55072: IFTRUE 55076
55074: GO 55300
55076: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
55077: LD_ADDR_VAR 0 2
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: LD_INT 3
55090: PUSH
55091: LD_INT 4
55093: PUSH
55094: LD_INT 5
55096: PUSH
55097: LD_INT 6
55099: PUSH
55100: LD_INT 7
55102: PUSH
55103: LD_INT 8
55105: PUSH
55106: LD_INT 9
55108: PUSH
55109: LD_INT 10
55111: PUSH
55112: LD_INT 11
55114: PUSH
55115: LD_INT 12
55117: PUSH
55118: LD_INT 13
55120: PUSH
55121: LD_INT 14
55123: PUSH
55124: LD_INT 15
55126: PUSH
55127: LD_INT 16
55129: PUSH
55130: LD_INT 17
55132: PUSH
55133: LD_INT 18
55135: PUSH
55136: LD_INT 19
55138: PUSH
55139: LD_INT 20
55141: PUSH
55142: LD_INT 21
55144: PUSH
55145: LD_INT 22
55147: PUSH
55148: LD_INT 23
55150: PUSH
55151: LD_INT 24
55153: PUSH
55154: LD_INT 25
55156: PUSH
55157: LD_INT 26
55159: PUSH
55160: LD_INT 27
55162: PUSH
55163: LD_INT 28
55165: PUSH
55166: LD_INT 29
55168: PUSH
55169: LD_INT 30
55171: PUSH
55172: LD_INT 31
55174: PUSH
55175: LD_INT 32
55177: PUSH
55178: LD_INT 33
55180: PUSH
55181: LD_INT 34
55183: PUSH
55184: LD_INT 36
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 101
55226: PUSH
55227: LD_INT 102
55229: PUSH
55230: LD_INT 103
55232: PUSH
55233: LD_INT 104
55235: PUSH
55236: LD_INT 105
55238: PUSH
55239: LD_INT 106
55241: PUSH
55242: LD_INT 107
55244: PUSH
55245: LD_INT 108
55247: PUSH
55248: LD_INT 109
55250: PUSH
55251: LD_INT 110
55253: PUSH
55254: LD_INT 111
55256: PUSH
55257: LD_INT 112
55259: PUSH
55260: LD_INT 113
55262: PUSH
55263: LD_INT 114
55265: PUSH
55266: LD_INT 116
55268: PUSH
55269: LD_INT 117
55271: PUSH
55272: LD_INT 118
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: ST_TO_ADDR
55298: GO 56305
55300: LD_INT 15
55302: DOUBLE
55303: EQUAL
55304: IFTRUE 55308
55306: GO 55532
55308: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
55309: LD_ADDR_VAR 0 2
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 2
55319: PUSH
55320: LD_INT 3
55322: PUSH
55323: LD_INT 4
55325: PUSH
55326: LD_INT 5
55328: PUSH
55329: LD_INT 6
55331: PUSH
55332: LD_INT 7
55334: PUSH
55335: LD_INT 8
55337: PUSH
55338: LD_INT 9
55340: PUSH
55341: LD_INT 10
55343: PUSH
55344: LD_INT 11
55346: PUSH
55347: LD_INT 12
55349: PUSH
55350: LD_INT 13
55352: PUSH
55353: LD_INT 14
55355: PUSH
55356: LD_INT 15
55358: PUSH
55359: LD_INT 16
55361: PUSH
55362: LD_INT 17
55364: PUSH
55365: LD_INT 18
55367: PUSH
55368: LD_INT 19
55370: PUSH
55371: LD_INT 20
55373: PUSH
55374: LD_INT 21
55376: PUSH
55377: LD_INT 22
55379: PUSH
55380: LD_INT 23
55382: PUSH
55383: LD_INT 24
55385: PUSH
55386: LD_INT 25
55388: PUSH
55389: LD_INT 26
55391: PUSH
55392: LD_INT 27
55394: PUSH
55395: LD_INT 28
55397: PUSH
55398: LD_INT 29
55400: PUSH
55401: LD_INT 30
55403: PUSH
55404: LD_INT 31
55406: PUSH
55407: LD_INT 32
55409: PUSH
55410: LD_INT 33
55412: PUSH
55413: LD_INT 34
55415: PUSH
55416: LD_INT 36
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 101
55458: PUSH
55459: LD_INT 102
55461: PUSH
55462: LD_INT 103
55464: PUSH
55465: LD_INT 104
55467: PUSH
55468: LD_INT 105
55470: PUSH
55471: LD_INT 106
55473: PUSH
55474: LD_INT 107
55476: PUSH
55477: LD_INT 108
55479: PUSH
55480: LD_INT 109
55482: PUSH
55483: LD_INT 110
55485: PUSH
55486: LD_INT 111
55488: PUSH
55489: LD_INT 112
55491: PUSH
55492: LD_INT 113
55494: PUSH
55495: LD_INT 114
55497: PUSH
55498: LD_INT 116
55500: PUSH
55501: LD_INT 117
55503: PUSH
55504: LD_INT 118
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: ST_TO_ADDR
55530: GO 56305
55532: LD_INT 16
55534: DOUBLE
55535: EQUAL
55536: IFTRUE 55540
55538: GO 55676
55540: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
55541: LD_ADDR_VAR 0 2
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 4
55551: PUSH
55552: LD_INT 5
55554: PUSH
55555: LD_INT 7
55557: PUSH
55558: LD_INT 11
55560: PUSH
55561: LD_INT 12
55563: PUSH
55564: LD_INT 15
55566: PUSH
55567: LD_INT 16
55569: PUSH
55570: LD_INT 20
55572: PUSH
55573: LD_INT 21
55575: PUSH
55576: LD_INT 22
55578: PUSH
55579: LD_INT 23
55581: PUSH
55582: LD_INT 25
55584: PUSH
55585: LD_INT 26
55587: PUSH
55588: LD_INT 30
55590: PUSH
55591: LD_INT 31
55593: PUSH
55594: LD_INT 32
55596: PUSH
55597: LD_INT 33
55599: PUSH
55600: LD_INT 34
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 101
55626: PUSH
55627: LD_INT 102
55629: PUSH
55630: LD_INT 103
55632: PUSH
55633: LD_INT 106
55635: PUSH
55636: LD_INT 108
55638: PUSH
55639: LD_INT 112
55641: PUSH
55642: LD_INT 113
55644: PUSH
55645: LD_INT 114
55647: PUSH
55648: LD_INT 116
55650: PUSH
55651: LD_INT 117
55653: PUSH
55654: LD_INT 118
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: ST_TO_ADDR
55674: GO 56305
55676: LD_INT 17
55678: DOUBLE
55679: EQUAL
55680: IFTRUE 55684
55682: GO 55908
55684: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
55685: LD_ADDR_VAR 0 2
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: LD_INT 3
55698: PUSH
55699: LD_INT 4
55701: PUSH
55702: LD_INT 5
55704: PUSH
55705: LD_INT 6
55707: PUSH
55708: LD_INT 7
55710: PUSH
55711: LD_INT 8
55713: PUSH
55714: LD_INT 9
55716: PUSH
55717: LD_INT 10
55719: PUSH
55720: LD_INT 11
55722: PUSH
55723: LD_INT 12
55725: PUSH
55726: LD_INT 13
55728: PUSH
55729: LD_INT 14
55731: PUSH
55732: LD_INT 15
55734: PUSH
55735: LD_INT 16
55737: PUSH
55738: LD_INT 17
55740: PUSH
55741: LD_INT 18
55743: PUSH
55744: LD_INT 19
55746: PUSH
55747: LD_INT 20
55749: PUSH
55750: LD_INT 21
55752: PUSH
55753: LD_INT 22
55755: PUSH
55756: LD_INT 23
55758: PUSH
55759: LD_INT 24
55761: PUSH
55762: LD_INT 25
55764: PUSH
55765: LD_INT 26
55767: PUSH
55768: LD_INT 27
55770: PUSH
55771: LD_INT 28
55773: PUSH
55774: LD_INT 29
55776: PUSH
55777: LD_INT 30
55779: PUSH
55780: LD_INT 31
55782: PUSH
55783: LD_INT 32
55785: PUSH
55786: LD_INT 33
55788: PUSH
55789: LD_INT 34
55791: PUSH
55792: LD_INT 36
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 101
55834: PUSH
55835: LD_INT 102
55837: PUSH
55838: LD_INT 103
55840: PUSH
55841: LD_INT 104
55843: PUSH
55844: LD_INT 105
55846: PUSH
55847: LD_INT 106
55849: PUSH
55850: LD_INT 107
55852: PUSH
55853: LD_INT 108
55855: PUSH
55856: LD_INT 109
55858: PUSH
55859: LD_INT 110
55861: PUSH
55862: LD_INT 111
55864: PUSH
55865: LD_INT 112
55867: PUSH
55868: LD_INT 113
55870: PUSH
55871: LD_INT 114
55873: PUSH
55874: LD_INT 116
55876: PUSH
55877: LD_INT 117
55879: PUSH
55880: LD_INT 118
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: ST_TO_ADDR
55906: GO 56305
55908: LD_INT 18
55910: DOUBLE
55911: EQUAL
55912: IFTRUE 55916
55914: GO 56064
55916: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
55917: LD_ADDR_VAR 0 2
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: LD_INT 4
55927: PUSH
55928: LD_INT 5
55930: PUSH
55931: LD_INT 7
55933: PUSH
55934: LD_INT 11
55936: PUSH
55937: LD_INT 12
55939: PUSH
55940: LD_INT 15
55942: PUSH
55943: LD_INT 16
55945: PUSH
55946: LD_INT 20
55948: PUSH
55949: LD_INT 21
55951: PUSH
55952: LD_INT 22
55954: PUSH
55955: LD_INT 23
55957: PUSH
55958: LD_INT 25
55960: PUSH
55961: LD_INT 26
55963: PUSH
55964: LD_INT 30
55966: PUSH
55967: LD_INT 31
55969: PUSH
55970: LD_INT 32
55972: PUSH
55973: LD_INT 33
55975: PUSH
55976: LD_INT 34
55978: PUSH
55979: LD_INT 35
55981: PUSH
55982: LD_INT 36
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 101
56010: PUSH
56011: LD_INT 102
56013: PUSH
56014: LD_INT 103
56016: PUSH
56017: LD_INT 106
56019: PUSH
56020: LD_INT 108
56022: PUSH
56023: LD_INT 112
56025: PUSH
56026: LD_INT 113
56028: PUSH
56029: LD_INT 114
56031: PUSH
56032: LD_INT 115
56034: PUSH
56035: LD_INT 116
56037: PUSH
56038: LD_INT 117
56040: PUSH
56041: LD_INT 118
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: PUSH
56058: EMPTY
56059: LIST
56060: LIST
56061: ST_TO_ADDR
56062: GO 56305
56064: LD_INT 19
56066: DOUBLE
56067: EQUAL
56068: IFTRUE 56072
56070: GO 56304
56072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
56073: LD_ADDR_VAR 0 2
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 3
56086: PUSH
56087: LD_INT 4
56089: PUSH
56090: LD_INT 5
56092: PUSH
56093: LD_INT 6
56095: PUSH
56096: LD_INT 7
56098: PUSH
56099: LD_INT 8
56101: PUSH
56102: LD_INT 9
56104: PUSH
56105: LD_INT 10
56107: PUSH
56108: LD_INT 11
56110: PUSH
56111: LD_INT 12
56113: PUSH
56114: LD_INT 13
56116: PUSH
56117: LD_INT 14
56119: PUSH
56120: LD_INT 15
56122: PUSH
56123: LD_INT 16
56125: PUSH
56126: LD_INT 17
56128: PUSH
56129: LD_INT 18
56131: PUSH
56132: LD_INT 19
56134: PUSH
56135: LD_INT 20
56137: PUSH
56138: LD_INT 21
56140: PUSH
56141: LD_INT 22
56143: PUSH
56144: LD_INT 23
56146: PUSH
56147: LD_INT 24
56149: PUSH
56150: LD_INT 25
56152: PUSH
56153: LD_INT 26
56155: PUSH
56156: LD_INT 27
56158: PUSH
56159: LD_INT 28
56161: PUSH
56162: LD_INT 29
56164: PUSH
56165: LD_INT 30
56167: PUSH
56168: LD_INT 31
56170: PUSH
56171: LD_INT 32
56173: PUSH
56174: LD_INT 33
56176: PUSH
56177: LD_INT 34
56179: PUSH
56180: LD_INT 35
56182: PUSH
56183: LD_INT 36
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 101
56226: PUSH
56227: LD_INT 102
56229: PUSH
56230: LD_INT 103
56232: PUSH
56233: LD_INT 104
56235: PUSH
56236: LD_INT 105
56238: PUSH
56239: LD_INT 106
56241: PUSH
56242: LD_INT 107
56244: PUSH
56245: LD_INT 108
56247: PUSH
56248: LD_INT 109
56250: PUSH
56251: LD_INT 110
56253: PUSH
56254: LD_INT 111
56256: PUSH
56257: LD_INT 112
56259: PUSH
56260: LD_INT 113
56262: PUSH
56263: LD_INT 114
56265: PUSH
56266: LD_INT 115
56268: PUSH
56269: LD_INT 116
56271: PUSH
56272: LD_INT 117
56274: PUSH
56275: LD_INT 118
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: ST_TO_ADDR
56302: GO 56305
56304: POP
// end else
56305: GO 56536
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
56307: LD_ADDR_VAR 0 2
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 2
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: LD_INT 4
56323: PUSH
56324: LD_INT 5
56326: PUSH
56327: LD_INT 6
56329: PUSH
56330: LD_INT 7
56332: PUSH
56333: LD_INT 8
56335: PUSH
56336: LD_INT 9
56338: PUSH
56339: LD_INT 10
56341: PUSH
56342: LD_INT 11
56344: PUSH
56345: LD_INT 12
56347: PUSH
56348: LD_INT 13
56350: PUSH
56351: LD_INT 14
56353: PUSH
56354: LD_INT 15
56356: PUSH
56357: LD_INT 16
56359: PUSH
56360: LD_INT 17
56362: PUSH
56363: LD_INT 18
56365: PUSH
56366: LD_INT 19
56368: PUSH
56369: LD_INT 20
56371: PUSH
56372: LD_INT 21
56374: PUSH
56375: LD_INT 22
56377: PUSH
56378: LD_INT 23
56380: PUSH
56381: LD_INT 24
56383: PUSH
56384: LD_INT 25
56386: PUSH
56387: LD_INT 26
56389: PUSH
56390: LD_INT 27
56392: PUSH
56393: LD_INT 28
56395: PUSH
56396: LD_INT 29
56398: PUSH
56399: LD_INT 30
56401: PUSH
56402: LD_INT 31
56404: PUSH
56405: LD_INT 32
56407: PUSH
56408: LD_INT 33
56410: PUSH
56411: LD_INT 34
56413: PUSH
56414: LD_INT 35
56416: PUSH
56417: LD_INT 36
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 101
56460: PUSH
56461: LD_INT 102
56463: PUSH
56464: LD_INT 103
56466: PUSH
56467: LD_INT 104
56469: PUSH
56470: LD_INT 105
56472: PUSH
56473: LD_INT 106
56475: PUSH
56476: LD_INT 107
56478: PUSH
56479: LD_INT 108
56481: PUSH
56482: LD_INT 109
56484: PUSH
56485: LD_INT 110
56487: PUSH
56488: LD_INT 111
56490: PUSH
56491: LD_INT 112
56493: PUSH
56494: LD_INT 113
56496: PUSH
56497: LD_INT 114
56499: PUSH
56500: LD_INT 115
56502: PUSH
56503: LD_INT 116
56505: PUSH
56506: LD_INT 117
56508: PUSH
56509: LD_INT 118
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: ST_TO_ADDR
// if result then
56536: LD_VAR 0 2
56540: IFFALSE 57326
// begin normal :=  ;
56542: LD_ADDR_VAR 0 5
56546: PUSH
56547: LD_STRING 
56549: ST_TO_ADDR
// hardcore :=  ;
56550: LD_ADDR_VAR 0 6
56554: PUSH
56555: LD_STRING 
56557: ST_TO_ADDR
// active :=  ;
56558: LD_ADDR_VAR 0 7
56562: PUSH
56563: LD_STRING 
56565: ST_TO_ADDR
// for i = 1 to normalCounter do
56566: LD_ADDR_VAR 0 8
56570: PUSH
56571: DOUBLE
56572: LD_INT 1
56574: DEC
56575: ST_TO_ADDR
56576: LD_EXP 107
56580: PUSH
56581: FOR_TO
56582: IFFALSE 56683
// begin tmp := 0 ;
56584: LD_ADDR_VAR 0 3
56588: PUSH
56589: LD_STRING 0
56591: ST_TO_ADDR
// if result [ 1 ] then
56592: LD_VAR 0 2
56596: PUSH
56597: LD_INT 1
56599: ARRAY
56600: IFFALSE 56665
// if result [ 1 ] [ 1 ] = i then
56602: LD_VAR 0 2
56606: PUSH
56607: LD_INT 1
56609: ARRAY
56610: PUSH
56611: LD_INT 1
56613: ARRAY
56614: PUSH
56615: LD_VAR 0 8
56619: EQUAL
56620: IFFALSE 56665
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
56622: LD_ADDR_VAR 0 2
56626: PUSH
56627: LD_VAR 0 2
56631: PPUSH
56632: LD_INT 1
56634: PPUSH
56635: LD_VAR 0 2
56639: PUSH
56640: LD_INT 1
56642: ARRAY
56643: PPUSH
56644: LD_INT 1
56646: PPUSH
56647: CALL_OW 3
56651: PPUSH
56652: CALL_OW 1
56656: ST_TO_ADDR
// tmp := 1 ;
56657: LD_ADDR_VAR 0 3
56661: PUSH
56662: LD_STRING 1
56664: ST_TO_ADDR
// end ; normal := normal & tmp ;
56665: LD_ADDR_VAR 0 5
56669: PUSH
56670: LD_VAR 0 5
56674: PUSH
56675: LD_VAR 0 3
56679: STR
56680: ST_TO_ADDR
// end ;
56681: GO 56581
56683: POP
56684: POP
// for i = 1 to hardcoreCounter do
56685: LD_ADDR_VAR 0 8
56689: PUSH
56690: DOUBLE
56691: LD_INT 1
56693: DEC
56694: ST_TO_ADDR
56695: LD_EXP 108
56699: PUSH
56700: FOR_TO
56701: IFFALSE 56806
// begin tmp := 0 ;
56703: LD_ADDR_VAR 0 3
56707: PUSH
56708: LD_STRING 0
56710: ST_TO_ADDR
// if result [ 2 ] then
56711: LD_VAR 0 2
56715: PUSH
56716: LD_INT 2
56718: ARRAY
56719: IFFALSE 56788
// if result [ 2 ] [ 1 ] = 100 + i then
56721: LD_VAR 0 2
56725: PUSH
56726: LD_INT 2
56728: ARRAY
56729: PUSH
56730: LD_INT 1
56732: ARRAY
56733: PUSH
56734: LD_INT 100
56736: PUSH
56737: LD_VAR 0 8
56741: PLUS
56742: EQUAL
56743: IFFALSE 56788
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
56745: LD_ADDR_VAR 0 2
56749: PUSH
56750: LD_VAR 0 2
56754: PPUSH
56755: LD_INT 2
56757: PPUSH
56758: LD_VAR 0 2
56762: PUSH
56763: LD_INT 2
56765: ARRAY
56766: PPUSH
56767: LD_INT 1
56769: PPUSH
56770: CALL_OW 3
56774: PPUSH
56775: CALL_OW 1
56779: ST_TO_ADDR
// tmp := 1 ;
56780: LD_ADDR_VAR 0 3
56784: PUSH
56785: LD_STRING 1
56787: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
56788: LD_ADDR_VAR 0 6
56792: PUSH
56793: LD_VAR 0 6
56797: PUSH
56798: LD_VAR 0 3
56802: STR
56803: ST_TO_ADDR
// end ;
56804: GO 56700
56806: POP
56807: POP
// if isGameLoad then
56808: LD_VAR 0 1
56812: IFFALSE 57287
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
56814: LD_ADDR_VAR 0 4
56818: PUSH
56819: LD_EXP 111
56823: PUSH
56824: LD_EXP 110
56828: PUSH
56829: LD_EXP 112
56833: PUSH
56834: LD_EXP 109
56838: PUSH
56839: LD_EXP 113
56843: PUSH
56844: LD_EXP 114
56848: PUSH
56849: LD_EXP 115
56853: PUSH
56854: LD_EXP 116
56858: PUSH
56859: LD_EXP 117
56863: PUSH
56864: LD_EXP 118
56868: PUSH
56869: LD_EXP 119
56873: PUSH
56874: LD_EXP 120
56878: PUSH
56879: LD_EXP 121
56883: PUSH
56884: LD_EXP 122
56888: PUSH
56889: LD_EXP 130
56893: PUSH
56894: LD_EXP 131
56898: PUSH
56899: LD_EXP 132
56903: PUSH
56904: LD_EXP 133
56908: PUSH
56909: LD_EXP 135
56913: PUSH
56914: LD_EXP 136
56918: PUSH
56919: LD_EXP 137
56923: PUSH
56924: LD_EXP 140
56928: PUSH
56929: LD_EXP 142
56933: PUSH
56934: LD_EXP 143
56938: PUSH
56939: LD_EXP 144
56943: PUSH
56944: LD_EXP 146
56948: PUSH
56949: LD_EXP 147
56953: PUSH
56954: LD_EXP 150
56958: PUSH
56959: LD_EXP 151
56963: PUSH
56964: LD_EXP 152
56968: PUSH
56969: LD_EXP 153
56973: PUSH
56974: LD_EXP 154
56978: PUSH
56979: LD_EXP 155
56983: PUSH
56984: LD_EXP 156
56988: PUSH
56989: LD_EXP 157
56993: PUSH
56994: LD_EXP 158
56998: PUSH
56999: LD_EXP 123
57003: PUSH
57004: LD_EXP 124
57008: PUSH
57009: LD_EXP 127
57013: PUSH
57014: LD_EXP 128
57018: PUSH
57019: LD_EXP 129
57023: PUSH
57024: LD_EXP 125
57028: PUSH
57029: LD_EXP 126
57033: PUSH
57034: LD_EXP 134
57038: PUSH
57039: LD_EXP 138
57043: PUSH
57044: LD_EXP 139
57048: PUSH
57049: LD_EXP 141
57053: PUSH
57054: LD_EXP 145
57058: PUSH
57059: LD_EXP 148
57063: PUSH
57064: LD_EXP 149
57068: PUSH
57069: LD_EXP 159
57073: PUSH
57074: LD_EXP 160
57078: PUSH
57079: LD_EXP 161
57083: PUSH
57084: LD_EXP 162
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: ST_TO_ADDR
// tmp :=  ;
57145: LD_ADDR_VAR 0 3
57149: PUSH
57150: LD_STRING 
57152: ST_TO_ADDR
// for i = 1 to normalCounter do
57153: LD_ADDR_VAR 0 8
57157: PUSH
57158: DOUBLE
57159: LD_INT 1
57161: DEC
57162: ST_TO_ADDR
57163: LD_EXP 107
57167: PUSH
57168: FOR_TO
57169: IFFALSE 57205
// begin if flags [ i ] then
57171: LD_VAR 0 4
57175: PUSH
57176: LD_VAR 0 8
57180: ARRAY
57181: IFFALSE 57203
// tmp := tmp & i & ; ;
57183: LD_ADDR_VAR 0 3
57187: PUSH
57188: LD_VAR 0 3
57192: PUSH
57193: LD_VAR 0 8
57197: STR
57198: PUSH
57199: LD_STRING ;
57201: STR
57202: ST_TO_ADDR
// end ;
57203: GO 57168
57205: POP
57206: POP
// for i = 1 to hardcoreCounter do
57207: LD_ADDR_VAR 0 8
57211: PUSH
57212: DOUBLE
57213: LD_INT 1
57215: DEC
57216: ST_TO_ADDR
57217: LD_EXP 108
57221: PUSH
57222: FOR_TO
57223: IFFALSE 57269
// begin if flags [ normalCounter + i ] then
57225: LD_VAR 0 4
57229: PUSH
57230: LD_EXP 107
57234: PUSH
57235: LD_VAR 0 8
57239: PLUS
57240: ARRAY
57241: IFFALSE 57267
// tmp := tmp & ( 100 + i ) & ; ;
57243: LD_ADDR_VAR 0 3
57247: PUSH
57248: LD_VAR 0 3
57252: PUSH
57253: LD_INT 100
57255: PUSH
57256: LD_VAR 0 8
57260: PLUS
57261: STR
57262: PUSH
57263: LD_STRING ;
57265: STR
57266: ST_TO_ADDR
// end ;
57267: GO 57222
57269: POP
57270: POP
// if tmp then
57271: LD_VAR 0 3
57275: IFFALSE 57287
// active := tmp ;
57277: LD_ADDR_VAR 0 7
57281: PUSH
57282: LD_VAR 0 3
57286: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
57287: LD_STRING getStreamItemsFromMission("
57289: PUSH
57290: LD_VAR 0 5
57294: STR
57295: PUSH
57296: LD_STRING ","
57298: STR
57299: PUSH
57300: LD_VAR 0 6
57304: STR
57305: PUSH
57306: LD_STRING ","
57308: STR
57309: PUSH
57310: LD_VAR 0 7
57314: STR
57315: PUSH
57316: LD_STRING ")
57318: STR
57319: PPUSH
57320: CALL_OW 559
// end else
57324: GO 57333
// ToLua ( getStreamItemsFromMission("","","") ) ;
57326: LD_STRING getStreamItemsFromMission("","","")
57328: PPUSH
57329: CALL_OW 559
// end ;
57333: LD_VAR 0 2
57337: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
57338: LD_EXP 106
57342: PUSH
57343: LD_EXP 111
57347: AND
57348: IFFALSE 57472
57350: GO 57352
57352: DISABLE
57353: LD_INT 0
57355: PPUSH
57356: PPUSH
// begin enable ;
57357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
57358: LD_ADDR_VAR 0 2
57362: PUSH
57363: LD_INT 22
57365: PUSH
57366: LD_OWVAR 2
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: LD_INT 34
57380: PUSH
57381: LD_INT 7
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 34
57390: PUSH
57391: LD_INT 45
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 34
57400: PUSH
57401: LD_INT 28
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 34
57410: PUSH
57411: LD_INT 47
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PPUSH
57429: CALL_OW 69
57433: ST_TO_ADDR
// if not tmp then
57434: LD_VAR 0 2
57438: NOT
57439: IFFALSE 57443
// exit ;
57441: GO 57472
// for i in tmp do
57443: LD_ADDR_VAR 0 1
57447: PUSH
57448: LD_VAR 0 2
57452: PUSH
57453: FOR_IN
57454: IFFALSE 57470
// begin SetLives ( i , 0 ) ;
57456: LD_VAR 0 1
57460: PPUSH
57461: LD_INT 0
57463: PPUSH
57464: CALL_OW 234
// end ;
57468: GO 57453
57470: POP
57471: POP
// end ;
57472: PPOPN 2
57474: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57475: LD_EXP 106
57479: PUSH
57480: LD_EXP 112
57484: AND
57485: IFFALSE 57569
57487: GO 57489
57489: DISABLE
57490: LD_INT 0
57492: PPUSH
57493: PPUSH
// begin enable ;
57494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57495: LD_ADDR_VAR 0 2
57499: PUSH
57500: LD_INT 22
57502: PUSH
57503: LD_OWVAR 2
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 32
57514: PUSH
57515: LD_INT 3
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PPUSH
57526: CALL_OW 69
57530: ST_TO_ADDR
// if not tmp then
57531: LD_VAR 0 2
57535: NOT
57536: IFFALSE 57540
// exit ;
57538: GO 57569
// for i in tmp do
57540: LD_ADDR_VAR 0 1
57544: PUSH
57545: LD_VAR 0 2
57549: PUSH
57550: FOR_IN
57551: IFFALSE 57567
// begin SetLives ( i , 0 ) ;
57553: LD_VAR 0 1
57557: PPUSH
57558: LD_INT 0
57560: PPUSH
57561: CALL_OW 234
// end ;
57565: GO 57550
57567: POP
57568: POP
// end ;
57569: PPOPN 2
57571: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
57572: LD_EXP 106
57576: PUSH
57577: LD_EXP 109
57581: AND
57582: IFFALSE 57675
57584: GO 57586
57586: DISABLE
57587: LD_INT 0
57589: PPUSH
// begin enable ;
57590: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
57591: LD_ADDR_VAR 0 1
57595: PUSH
57596: LD_INT 22
57598: PUSH
57599: LD_OWVAR 2
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: LD_INT 25
57613: PUSH
57614: LD_INT 5
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 25
57623: PUSH
57624: LD_INT 9
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 25
57633: PUSH
57634: LD_INT 8
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PPUSH
57651: CALL_OW 69
57655: PUSH
57656: FOR_IN
57657: IFFALSE 57673
// begin SetClass ( i , 1 ) ;
57659: LD_VAR 0 1
57663: PPUSH
57664: LD_INT 1
57666: PPUSH
57667: CALL_OW 336
// end ;
57671: GO 57656
57673: POP
57674: POP
// end ;
57675: PPOPN 1
57677: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
57678: LD_EXP 106
57682: PUSH
57683: LD_EXP 110
57687: AND
57688: PUSH
57689: LD_OWVAR 65
57693: PUSH
57694: LD_INT 7
57696: LESS
57697: AND
57698: IFFALSE 57712
57700: GO 57702
57702: DISABLE
// begin enable ;
57703: ENABLE
// game_speed := 7 ;
57704: LD_ADDR_OWVAR 65
57708: PUSH
57709: LD_INT 7
57711: ST_TO_ADDR
// end ;
57712: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
57713: LD_EXP 106
57717: PUSH
57718: LD_EXP 113
57722: AND
57723: IFFALSE 57925
57725: GO 57727
57727: DISABLE
57728: LD_INT 0
57730: PPUSH
57731: PPUSH
57732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57733: LD_ADDR_VAR 0 3
57737: PUSH
57738: LD_INT 81
57740: PUSH
57741: LD_OWVAR 2
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 21
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PPUSH
57764: CALL_OW 69
57768: ST_TO_ADDR
// if not tmp then
57769: LD_VAR 0 3
57773: NOT
57774: IFFALSE 57778
// exit ;
57776: GO 57925
// if tmp > 5 then
57778: LD_VAR 0 3
57782: PUSH
57783: LD_INT 5
57785: GREATER
57786: IFFALSE 57798
// k := 5 else
57788: LD_ADDR_VAR 0 2
57792: PUSH
57793: LD_INT 5
57795: ST_TO_ADDR
57796: GO 57808
// k := tmp ;
57798: LD_ADDR_VAR 0 2
57802: PUSH
57803: LD_VAR 0 3
57807: ST_TO_ADDR
// for i := 1 to k do
57808: LD_ADDR_VAR 0 1
57812: PUSH
57813: DOUBLE
57814: LD_INT 1
57816: DEC
57817: ST_TO_ADDR
57818: LD_VAR 0 2
57822: PUSH
57823: FOR_TO
57824: IFFALSE 57923
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
57826: LD_VAR 0 3
57830: PUSH
57831: LD_VAR 0 1
57835: ARRAY
57836: PPUSH
57837: LD_VAR 0 1
57841: PUSH
57842: LD_INT 4
57844: MOD
57845: PUSH
57846: LD_INT 1
57848: PLUS
57849: PPUSH
57850: CALL_OW 259
57854: PUSH
57855: LD_INT 10
57857: LESS
57858: IFFALSE 57921
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
57860: LD_VAR 0 3
57864: PUSH
57865: LD_VAR 0 1
57869: ARRAY
57870: PPUSH
57871: LD_VAR 0 1
57875: PUSH
57876: LD_INT 4
57878: MOD
57879: PUSH
57880: LD_INT 1
57882: PLUS
57883: PPUSH
57884: LD_VAR 0 3
57888: PUSH
57889: LD_VAR 0 1
57893: ARRAY
57894: PPUSH
57895: LD_VAR 0 1
57899: PUSH
57900: LD_INT 4
57902: MOD
57903: PUSH
57904: LD_INT 1
57906: PLUS
57907: PPUSH
57908: CALL_OW 259
57912: PUSH
57913: LD_INT 1
57915: PLUS
57916: PPUSH
57917: CALL_OW 237
57921: GO 57823
57923: POP
57924: POP
// end ;
57925: PPOPN 3
57927: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
57928: LD_EXP 106
57932: PUSH
57933: LD_EXP 114
57937: AND
57938: IFFALSE 57958
57940: GO 57942
57942: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
57943: LD_INT 4
57945: PPUSH
57946: LD_OWVAR 2
57950: PPUSH
57951: LD_INT 0
57953: PPUSH
57954: CALL_OW 324
57958: END
// every 0 0$1 trigger StreamModeActive and sShovel do
57959: LD_EXP 106
57963: PUSH
57964: LD_EXP 143
57968: AND
57969: IFFALSE 57989
57971: GO 57973
57973: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
57974: LD_INT 19
57976: PPUSH
57977: LD_OWVAR 2
57981: PPUSH
57982: LD_INT 0
57984: PPUSH
57985: CALL_OW 324
57989: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
57990: LD_EXP 106
57994: PUSH
57995: LD_EXP 115
57999: AND
58000: IFFALSE 58102
58002: GO 58004
58004: DISABLE
58005: LD_INT 0
58007: PPUSH
58008: PPUSH
// begin enable ;
58009: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
58010: LD_ADDR_VAR 0 2
58014: PUSH
58015: LD_INT 22
58017: PUSH
58018: LD_OWVAR 2
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: LD_INT 34
58032: PUSH
58033: LD_INT 11
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 34
58042: PUSH
58043: LD_INT 30
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: LIST
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PPUSH
58059: CALL_OW 69
58063: ST_TO_ADDR
// if not tmp then
58064: LD_VAR 0 2
58068: NOT
58069: IFFALSE 58073
// exit ;
58071: GO 58102
// for i in tmp do
58073: LD_ADDR_VAR 0 1
58077: PUSH
58078: LD_VAR 0 2
58082: PUSH
58083: FOR_IN
58084: IFFALSE 58100
// begin SetLives ( i , 0 ) ;
58086: LD_VAR 0 1
58090: PPUSH
58091: LD_INT 0
58093: PPUSH
58094: CALL_OW 234
// end ;
58098: GO 58083
58100: POP
58101: POP
// end ;
58102: PPOPN 2
58104: END
// every 0 0$1 trigger StreamModeActive and sBunker do
58105: LD_EXP 106
58109: PUSH
58110: LD_EXP 116
58114: AND
58115: IFFALSE 58135
58117: GO 58119
58119: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
58120: LD_INT 32
58122: PPUSH
58123: LD_OWVAR 2
58127: PPUSH
58128: LD_INT 0
58130: PPUSH
58131: CALL_OW 324
58135: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
58136: LD_EXP 106
58140: PUSH
58141: LD_EXP 117
58145: AND
58146: IFFALSE 58327
58148: GO 58150
58150: DISABLE
58151: LD_INT 0
58153: PPUSH
58154: PPUSH
58155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
58156: LD_ADDR_VAR 0 2
58160: PUSH
58161: LD_INT 22
58163: PUSH
58164: LD_OWVAR 2
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 33
58175: PUSH
58176: LD_INT 3
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PPUSH
58187: CALL_OW 69
58191: ST_TO_ADDR
// if not tmp then
58192: LD_VAR 0 2
58196: NOT
58197: IFFALSE 58201
// exit ;
58199: GO 58327
// side := 0 ;
58201: LD_ADDR_VAR 0 3
58205: PUSH
58206: LD_INT 0
58208: ST_TO_ADDR
// for i := 1 to 8 do
58209: LD_ADDR_VAR 0 1
58213: PUSH
58214: DOUBLE
58215: LD_INT 1
58217: DEC
58218: ST_TO_ADDR
58219: LD_INT 8
58221: PUSH
58222: FOR_TO
58223: IFFALSE 58271
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
58225: LD_OWVAR 2
58229: PUSH
58230: LD_VAR 0 1
58234: NONEQUAL
58235: PUSH
58236: LD_OWVAR 2
58240: PPUSH
58241: LD_VAR 0 1
58245: PPUSH
58246: CALL_OW 81
58250: PUSH
58251: LD_INT 2
58253: EQUAL
58254: AND
58255: IFFALSE 58269
// begin side := i ;
58257: LD_ADDR_VAR 0 3
58261: PUSH
58262: LD_VAR 0 1
58266: ST_TO_ADDR
// break ;
58267: GO 58271
// end ;
58269: GO 58222
58271: POP
58272: POP
// if not side then
58273: LD_VAR 0 3
58277: NOT
58278: IFFALSE 58282
// exit ;
58280: GO 58327
// for i := 1 to tmp do
58282: LD_ADDR_VAR 0 1
58286: PUSH
58287: DOUBLE
58288: LD_INT 1
58290: DEC
58291: ST_TO_ADDR
58292: LD_VAR 0 2
58296: PUSH
58297: FOR_TO
58298: IFFALSE 58325
// if Prob ( 60 ) then
58300: LD_INT 60
58302: PPUSH
58303: CALL_OW 13
58307: IFFALSE 58323
// SetSide ( i , side ) ;
58309: LD_VAR 0 1
58313: PPUSH
58314: LD_VAR 0 3
58318: PPUSH
58319: CALL_OW 235
58323: GO 58297
58325: POP
58326: POP
// end ;
58327: PPOPN 3
58329: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
58330: LD_EXP 106
58334: PUSH
58335: LD_EXP 119
58339: AND
58340: IFFALSE 58459
58342: GO 58344
58344: DISABLE
58345: LD_INT 0
58347: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
58348: LD_ADDR_VAR 0 1
58352: PUSH
58353: LD_INT 22
58355: PUSH
58356: LD_OWVAR 2
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 21
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 3
58377: PUSH
58378: LD_INT 23
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: LIST
58396: PPUSH
58397: CALL_OW 69
58401: PUSH
58402: FOR_IN
58403: IFFALSE 58457
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58405: LD_VAR 0 1
58409: PPUSH
58410: CALL_OW 257
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: LD_INT 2
58420: PUSH
58421: LD_INT 3
58423: PUSH
58424: LD_INT 4
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: IN
58433: IFFALSE 58455
// SetClass ( un , rand ( 1 , 4 ) ) ;
58435: LD_VAR 0 1
58439: PPUSH
58440: LD_INT 1
58442: PPUSH
58443: LD_INT 4
58445: PPUSH
58446: CALL_OW 12
58450: PPUSH
58451: CALL_OW 336
58455: GO 58402
58457: POP
58458: POP
// end ;
58459: PPOPN 1
58461: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58462: LD_EXP 106
58466: PUSH
58467: LD_EXP 118
58471: AND
58472: IFFALSE 58551
58474: GO 58476
58476: DISABLE
58477: LD_INT 0
58479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58480: LD_ADDR_VAR 0 1
58484: PUSH
58485: LD_INT 22
58487: PUSH
58488: LD_OWVAR 2
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 21
58499: PUSH
58500: LD_INT 3
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PPUSH
58511: CALL_OW 69
58515: ST_TO_ADDR
// if not tmp then
58516: LD_VAR 0 1
58520: NOT
58521: IFFALSE 58525
// exit ;
58523: GO 58551
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58525: LD_VAR 0 1
58529: PUSH
58530: LD_INT 1
58532: PPUSH
58533: LD_VAR 0 1
58537: PPUSH
58538: CALL_OW 12
58542: ARRAY
58543: PPUSH
58544: LD_INT 100
58546: PPUSH
58547: CALL_OW 234
// end ;
58551: PPOPN 1
58553: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
58554: LD_EXP 106
58558: PUSH
58559: LD_EXP 120
58563: AND
58564: IFFALSE 58662
58566: GO 58568
58568: DISABLE
58569: LD_INT 0
58571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58572: LD_ADDR_VAR 0 1
58576: PUSH
58577: LD_INT 22
58579: PUSH
58580: LD_OWVAR 2
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 21
58591: PUSH
58592: LD_INT 1
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PPUSH
58603: CALL_OW 69
58607: ST_TO_ADDR
// if not tmp then
58608: LD_VAR 0 1
58612: NOT
58613: IFFALSE 58617
// exit ;
58615: GO 58662
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
58617: LD_VAR 0 1
58621: PUSH
58622: LD_INT 1
58624: PPUSH
58625: LD_VAR 0 1
58629: PPUSH
58630: CALL_OW 12
58634: ARRAY
58635: PPUSH
58636: LD_INT 1
58638: PPUSH
58639: LD_INT 4
58641: PPUSH
58642: CALL_OW 12
58646: PPUSH
58647: LD_INT 3000
58649: PPUSH
58650: LD_INT 9000
58652: PPUSH
58653: CALL_OW 12
58657: PPUSH
58658: CALL_OW 492
// end ;
58662: PPOPN 1
58664: END
// every 0 0$1 trigger StreamModeActive and sDepot do
58665: LD_EXP 106
58669: PUSH
58670: LD_EXP 121
58674: AND
58675: IFFALSE 58695
58677: GO 58679
58679: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
58680: LD_INT 1
58682: PPUSH
58683: LD_OWVAR 2
58687: PPUSH
58688: LD_INT 0
58690: PPUSH
58691: CALL_OW 324
58695: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
58696: LD_EXP 106
58700: PUSH
58701: LD_EXP 122
58705: AND
58706: IFFALSE 58789
58708: GO 58710
58710: DISABLE
58711: LD_INT 0
58713: PPUSH
58714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58715: LD_ADDR_VAR 0 2
58719: PUSH
58720: LD_INT 22
58722: PUSH
58723: LD_OWVAR 2
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 21
58734: PUSH
58735: LD_INT 3
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PPUSH
58746: CALL_OW 69
58750: ST_TO_ADDR
// if not tmp then
58751: LD_VAR 0 2
58755: NOT
58756: IFFALSE 58760
// exit ;
58758: GO 58789
// for i in tmp do
58760: LD_ADDR_VAR 0 1
58764: PUSH
58765: LD_VAR 0 2
58769: PUSH
58770: FOR_IN
58771: IFFALSE 58787
// SetBLevel ( i , 10 ) ;
58773: LD_VAR 0 1
58777: PPUSH
58778: LD_INT 10
58780: PPUSH
58781: CALL_OW 241
58785: GO 58770
58787: POP
58788: POP
// end ;
58789: PPOPN 2
58791: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
58792: LD_EXP 106
58796: PUSH
58797: LD_EXP 123
58801: AND
58802: IFFALSE 58913
58804: GO 58806
58806: DISABLE
58807: LD_INT 0
58809: PPUSH
58810: PPUSH
58811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58812: LD_ADDR_VAR 0 3
58816: PUSH
58817: LD_INT 22
58819: PUSH
58820: LD_OWVAR 2
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 25
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PPUSH
58843: CALL_OW 69
58847: ST_TO_ADDR
// if not tmp then
58848: LD_VAR 0 3
58852: NOT
58853: IFFALSE 58857
// exit ;
58855: GO 58913
// un := tmp [ rand ( 1 , tmp ) ] ;
58857: LD_ADDR_VAR 0 2
58861: PUSH
58862: LD_VAR 0 3
58866: PUSH
58867: LD_INT 1
58869: PPUSH
58870: LD_VAR 0 3
58874: PPUSH
58875: CALL_OW 12
58879: ARRAY
58880: ST_TO_ADDR
// if Crawls ( un ) then
58881: LD_VAR 0 2
58885: PPUSH
58886: CALL_OW 318
58890: IFFALSE 58901
// ComWalk ( un ) ;
58892: LD_VAR 0 2
58896: PPUSH
58897: CALL_OW 138
// SetClass ( un , class_sniper ) ;
58901: LD_VAR 0 2
58905: PPUSH
58906: LD_INT 5
58908: PPUSH
58909: CALL_OW 336
// end ;
58913: PPOPN 3
58915: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
58916: LD_EXP 106
58920: PUSH
58921: LD_EXP 124
58925: AND
58926: PUSH
58927: LD_OWVAR 67
58931: PUSH
58932: LD_INT 4
58934: LESS
58935: AND
58936: IFFALSE 58955
58938: GO 58940
58940: DISABLE
// begin Difficulty := Difficulty + 1 ;
58941: LD_ADDR_OWVAR 67
58945: PUSH
58946: LD_OWVAR 67
58950: PUSH
58951: LD_INT 1
58953: PLUS
58954: ST_TO_ADDR
// end ;
58955: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
58956: LD_EXP 106
58960: PUSH
58961: LD_EXP 125
58965: AND
58966: IFFALSE 59069
58968: GO 58970
58970: DISABLE
58971: LD_INT 0
58973: PPUSH
// begin for i := 1 to 5 do
58974: LD_ADDR_VAR 0 1
58978: PUSH
58979: DOUBLE
58980: LD_INT 1
58982: DEC
58983: ST_TO_ADDR
58984: LD_INT 5
58986: PUSH
58987: FOR_TO
58988: IFFALSE 59067
// begin uc_nation := nation_nature ;
58990: LD_ADDR_OWVAR 21
58994: PUSH
58995: LD_INT 0
58997: ST_TO_ADDR
// uc_side := 0 ;
58998: LD_ADDR_OWVAR 20
59002: PUSH
59003: LD_INT 0
59005: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59006: LD_ADDR_OWVAR 29
59010: PUSH
59011: LD_INT 12
59013: PUSH
59014: LD_INT 12
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: ST_TO_ADDR
// hc_agressivity := 20 ;
59021: LD_ADDR_OWVAR 35
59025: PUSH
59026: LD_INT 20
59028: ST_TO_ADDR
// hc_class := class_tiger ;
59029: LD_ADDR_OWVAR 28
59033: PUSH
59034: LD_INT 14
59036: ST_TO_ADDR
// hc_gallery :=  ;
59037: LD_ADDR_OWVAR 33
59041: PUSH
59042: LD_STRING 
59044: ST_TO_ADDR
// hc_name :=  ;
59045: LD_ADDR_OWVAR 26
59049: PUSH
59050: LD_STRING 
59052: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59053: CALL_OW 44
59057: PPUSH
59058: LD_INT 0
59060: PPUSH
59061: CALL_OW 51
// end ;
59065: GO 58987
59067: POP
59068: POP
// end ;
59069: PPOPN 1
59071: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59072: LD_EXP 106
59076: PUSH
59077: LD_EXP 126
59081: AND
59082: IFFALSE 59091
59084: GO 59086
59086: DISABLE
// StreamSibBomb ;
59087: CALL 59092 0 0
59091: END
// export function StreamSibBomb ; var i , x , y ; begin
59092: LD_INT 0
59094: PPUSH
59095: PPUSH
59096: PPUSH
59097: PPUSH
// result := false ;
59098: LD_ADDR_VAR 0 1
59102: PUSH
59103: LD_INT 0
59105: ST_TO_ADDR
// for i := 1 to 16 do
59106: LD_ADDR_VAR 0 2
59110: PUSH
59111: DOUBLE
59112: LD_INT 1
59114: DEC
59115: ST_TO_ADDR
59116: LD_INT 16
59118: PUSH
59119: FOR_TO
59120: IFFALSE 59319
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59122: LD_ADDR_VAR 0 3
59126: PUSH
59127: LD_INT 10
59129: PUSH
59130: LD_INT 20
59132: PUSH
59133: LD_INT 30
59135: PUSH
59136: LD_INT 40
59138: PUSH
59139: LD_INT 50
59141: PUSH
59142: LD_INT 60
59144: PUSH
59145: LD_INT 70
59147: PUSH
59148: LD_INT 80
59150: PUSH
59151: LD_INT 90
59153: PUSH
59154: LD_INT 100
59156: PUSH
59157: LD_INT 110
59159: PUSH
59160: LD_INT 120
59162: PUSH
59163: LD_INT 130
59165: PUSH
59166: LD_INT 140
59168: PUSH
59169: LD_INT 150
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: PPUSH
59192: LD_INT 15
59194: PPUSH
59195: CALL_OW 12
59199: ARRAY
59200: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59201: LD_ADDR_VAR 0 4
59205: PUSH
59206: LD_INT 10
59208: PUSH
59209: LD_INT 20
59211: PUSH
59212: LD_INT 30
59214: PUSH
59215: LD_INT 40
59217: PUSH
59218: LD_INT 50
59220: PUSH
59221: LD_INT 60
59223: PUSH
59224: LD_INT 70
59226: PUSH
59227: LD_INT 80
59229: PUSH
59230: LD_INT 90
59232: PUSH
59233: LD_INT 100
59235: PUSH
59236: LD_INT 110
59238: PUSH
59239: LD_INT 120
59241: PUSH
59242: LD_INT 130
59244: PUSH
59245: LD_INT 140
59247: PUSH
59248: LD_INT 150
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: PPUSH
59271: LD_INT 15
59273: PPUSH
59274: CALL_OW 12
59278: ARRAY
59279: ST_TO_ADDR
// if ValidHex ( x , y ) then
59280: LD_VAR 0 3
59284: PPUSH
59285: LD_VAR 0 4
59289: PPUSH
59290: CALL_OW 488
59294: IFFALSE 59317
// begin result := [ x , y ] ;
59296: LD_ADDR_VAR 0 1
59300: PUSH
59301: LD_VAR 0 3
59305: PUSH
59306: LD_VAR 0 4
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: ST_TO_ADDR
// break ;
59315: GO 59319
// end ; end ;
59317: GO 59119
59319: POP
59320: POP
// if result then
59321: LD_VAR 0 1
59325: IFFALSE 59385
// begin ToLua ( playSibBomb() ) ;
59327: LD_STRING playSibBomb()
59329: PPUSH
59330: CALL_OW 559
// wait ( 0 0$14 ) ;
59334: LD_INT 490
59336: PPUSH
59337: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
59341: LD_VAR 0 1
59345: PUSH
59346: LD_INT 1
59348: ARRAY
59349: PPUSH
59350: LD_VAR 0 1
59354: PUSH
59355: LD_INT 2
59357: ARRAY
59358: PPUSH
59359: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
59363: LD_VAR 0 1
59367: PUSH
59368: LD_INT 1
59370: ARRAY
59371: PPUSH
59372: LD_VAR 0 1
59376: PUSH
59377: LD_INT 2
59379: ARRAY
59380: PPUSH
59381: CALL_OW 429
// end ; end ;
59385: LD_VAR 0 1
59389: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59390: LD_EXP 106
59394: PUSH
59395: LD_EXP 128
59399: AND
59400: IFFALSE 59412
59402: GO 59404
59404: DISABLE
// YouLost (  ) ;
59405: LD_STRING 
59407: PPUSH
59408: CALL_OW 104
59412: END
// every 0 0$1 trigger StreamModeActive and sFog do
59413: LD_EXP 106
59417: PUSH
59418: LD_EXP 127
59422: AND
59423: IFFALSE 59437
59425: GO 59427
59427: DISABLE
// FogOff ( your_side ) ;
59428: LD_OWVAR 2
59432: PPUSH
59433: CALL_OW 344
59437: END
// every 0 0$1 trigger StreamModeActive and sSun do
59438: LD_EXP 106
59442: PUSH
59443: LD_EXP 129
59447: AND
59448: IFFALSE 59476
59450: GO 59452
59452: DISABLE
// begin solar_recharge_percent := 0 ;
59453: LD_ADDR_OWVAR 79
59457: PUSH
59458: LD_INT 0
59460: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59461: LD_INT 10500
59463: PPUSH
59464: CALL_OW 67
// solar_recharge_percent := 100 ;
59468: LD_ADDR_OWVAR 79
59472: PUSH
59473: LD_INT 100
59475: ST_TO_ADDR
// end ;
59476: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59477: LD_EXP 106
59481: PUSH
59482: LD_EXP 130
59486: AND
59487: IFFALSE 59726
59489: GO 59491
59491: DISABLE
59492: LD_INT 0
59494: PPUSH
59495: PPUSH
59496: PPUSH
// begin tmp := [ ] ;
59497: LD_ADDR_VAR 0 3
59501: PUSH
59502: EMPTY
59503: ST_TO_ADDR
// for i := 1 to 6 do
59504: LD_ADDR_VAR 0 1
59508: PUSH
59509: DOUBLE
59510: LD_INT 1
59512: DEC
59513: ST_TO_ADDR
59514: LD_INT 6
59516: PUSH
59517: FOR_TO
59518: IFFALSE 59623
// begin uc_nation := nation_nature ;
59520: LD_ADDR_OWVAR 21
59524: PUSH
59525: LD_INT 0
59527: ST_TO_ADDR
// uc_side := 0 ;
59528: LD_ADDR_OWVAR 20
59532: PUSH
59533: LD_INT 0
59535: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59536: LD_ADDR_OWVAR 29
59540: PUSH
59541: LD_INT 12
59543: PUSH
59544: LD_INT 12
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: ST_TO_ADDR
// hc_agressivity := 20 ;
59551: LD_ADDR_OWVAR 35
59555: PUSH
59556: LD_INT 20
59558: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
59559: LD_ADDR_OWVAR 28
59563: PUSH
59564: LD_INT 17
59566: ST_TO_ADDR
// hc_gallery :=  ;
59567: LD_ADDR_OWVAR 33
59571: PUSH
59572: LD_STRING 
59574: ST_TO_ADDR
// hc_name :=  ;
59575: LD_ADDR_OWVAR 26
59579: PUSH
59580: LD_STRING 
59582: ST_TO_ADDR
// un := CreateHuman ;
59583: LD_ADDR_VAR 0 2
59587: PUSH
59588: CALL_OW 44
59592: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
59593: LD_VAR 0 2
59597: PPUSH
59598: LD_INT 1
59600: PPUSH
59601: CALL_OW 51
// tmp := tmp ^ un ;
59605: LD_ADDR_VAR 0 3
59609: PUSH
59610: LD_VAR 0 3
59614: PUSH
59615: LD_VAR 0 2
59619: ADD
59620: ST_TO_ADDR
// end ;
59621: GO 59517
59623: POP
59624: POP
// repeat wait ( 0 0$1 ) ;
59625: LD_INT 35
59627: PPUSH
59628: CALL_OW 67
// for un in tmp do
59632: LD_ADDR_VAR 0 2
59636: PUSH
59637: LD_VAR 0 3
59641: PUSH
59642: FOR_IN
59643: IFFALSE 59717
// begin if IsDead ( un ) then
59645: LD_VAR 0 2
59649: PPUSH
59650: CALL_OW 301
59654: IFFALSE 59674
// begin tmp := tmp diff un ;
59656: LD_ADDR_VAR 0 3
59660: PUSH
59661: LD_VAR 0 3
59665: PUSH
59666: LD_VAR 0 2
59670: DIFF
59671: ST_TO_ADDR
// continue ;
59672: GO 59642
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
59674: LD_VAR 0 2
59678: PPUSH
59679: LD_INT 3
59681: PUSH
59682: LD_INT 22
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PPUSH
59696: CALL_OW 69
59700: PPUSH
59701: LD_VAR 0 2
59705: PPUSH
59706: CALL_OW 74
59710: PPUSH
59711: CALL_OW 115
// end ;
59715: GO 59642
59717: POP
59718: POP
// until not tmp ;
59719: LD_VAR 0 3
59723: NOT
59724: IFFALSE 59625
// end ;
59726: PPOPN 3
59728: END
// every 0 0$1 trigger StreamModeActive and sTroll do
59729: LD_EXP 106
59733: PUSH
59734: LD_EXP 131
59738: AND
59739: IFFALSE 59793
59741: GO 59743
59743: DISABLE
// begin ToLua ( displayTroll(); ) ;
59744: LD_STRING displayTroll();
59746: PPUSH
59747: CALL_OW 559
// wait ( 3 3$00 ) ;
59751: LD_INT 6300
59753: PPUSH
59754: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59758: LD_STRING hideTroll();
59760: PPUSH
59761: CALL_OW 559
// wait ( 1 1$00 ) ;
59765: LD_INT 2100
59767: PPUSH
59768: CALL_OW 67
// ToLua ( displayTroll(); ) ;
59772: LD_STRING displayTroll();
59774: PPUSH
59775: CALL_OW 559
// wait ( 1 1$00 ) ;
59779: LD_INT 2100
59781: PPUSH
59782: CALL_OW 67
// ToLua ( hideTroll(); ) ;
59786: LD_STRING hideTroll();
59788: PPUSH
59789: CALL_OW 559
// end ;
59793: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
59794: LD_EXP 106
59798: PUSH
59799: LD_EXP 132
59803: AND
59804: IFFALSE 59867
59806: GO 59808
59808: DISABLE
59809: LD_INT 0
59811: PPUSH
// begin p := 0 ;
59812: LD_ADDR_VAR 0 1
59816: PUSH
59817: LD_INT 0
59819: ST_TO_ADDR
// repeat game_speed := 1 ;
59820: LD_ADDR_OWVAR 65
59824: PUSH
59825: LD_INT 1
59827: ST_TO_ADDR
// wait ( 0 0$1 ) ;
59828: LD_INT 35
59830: PPUSH
59831: CALL_OW 67
// p := p + 1 ;
59835: LD_ADDR_VAR 0 1
59839: PUSH
59840: LD_VAR 0 1
59844: PUSH
59845: LD_INT 1
59847: PLUS
59848: ST_TO_ADDR
// until p >= 60 ;
59849: LD_VAR 0 1
59853: PUSH
59854: LD_INT 60
59856: GREATEREQUAL
59857: IFFALSE 59820
// game_speed := 4 ;
59859: LD_ADDR_OWVAR 65
59863: PUSH
59864: LD_INT 4
59866: ST_TO_ADDR
// end ;
59867: PPOPN 1
59869: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
59870: LD_EXP 106
59874: PUSH
59875: LD_EXP 133
59879: AND
59880: IFFALSE 60026
59882: GO 59884
59884: DISABLE
59885: LD_INT 0
59887: PPUSH
59888: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59889: LD_ADDR_VAR 0 1
59893: PUSH
59894: LD_INT 22
59896: PUSH
59897: LD_OWVAR 2
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 2
59908: PUSH
59909: LD_INT 30
59911: PUSH
59912: LD_INT 0
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PUSH
59919: LD_INT 30
59921: PUSH
59922: LD_INT 1
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: LIST
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PPUSH
59938: CALL_OW 69
59942: ST_TO_ADDR
// if not depot then
59943: LD_VAR 0 1
59947: NOT
59948: IFFALSE 59952
// exit ;
59950: GO 60026
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59952: LD_ADDR_VAR 0 2
59956: PUSH
59957: LD_VAR 0 1
59961: PUSH
59962: LD_INT 1
59964: PPUSH
59965: LD_VAR 0 1
59969: PPUSH
59970: CALL_OW 12
59974: ARRAY
59975: PPUSH
59976: CALL_OW 274
59980: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
59981: LD_VAR 0 2
59985: PPUSH
59986: LD_INT 1
59988: PPUSH
59989: LD_INT 0
59991: PPUSH
59992: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
59996: LD_VAR 0 2
60000: PPUSH
60001: LD_INT 2
60003: PPUSH
60004: LD_INT 0
60006: PPUSH
60007: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
60011: LD_VAR 0 2
60015: PPUSH
60016: LD_INT 3
60018: PPUSH
60019: LD_INT 0
60021: PPUSH
60022: CALL_OW 277
// end ;
60026: PPOPN 2
60028: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60029: LD_EXP 106
60033: PUSH
60034: LD_EXP 134
60038: AND
60039: IFFALSE 60136
60041: GO 60043
60043: DISABLE
60044: LD_INT 0
60046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60047: LD_ADDR_VAR 0 1
60051: PUSH
60052: LD_INT 22
60054: PUSH
60055: LD_OWVAR 2
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 21
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: LD_INT 23
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: LIST
60095: PPUSH
60096: CALL_OW 69
60100: ST_TO_ADDR
// if not tmp then
60101: LD_VAR 0 1
60105: NOT
60106: IFFALSE 60110
// exit ;
60108: GO 60136
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
60110: LD_VAR 0 1
60114: PUSH
60115: LD_INT 1
60117: PPUSH
60118: LD_VAR 0 1
60122: PPUSH
60123: CALL_OW 12
60127: ARRAY
60128: PPUSH
60129: LD_INT 200
60131: PPUSH
60132: CALL_OW 234
// end ;
60136: PPOPN 1
60138: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
60139: LD_EXP 106
60143: PUSH
60144: LD_EXP 135
60148: AND
60149: IFFALSE 60228
60151: GO 60153
60153: DISABLE
60154: LD_INT 0
60156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
60157: LD_ADDR_VAR 0 1
60161: PUSH
60162: LD_INT 22
60164: PUSH
60165: LD_OWVAR 2
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 21
60176: PUSH
60177: LD_INT 2
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PPUSH
60188: CALL_OW 69
60192: ST_TO_ADDR
// if not tmp then
60193: LD_VAR 0 1
60197: NOT
60198: IFFALSE 60202
// exit ;
60200: GO 60228
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
60202: LD_VAR 0 1
60206: PUSH
60207: LD_INT 1
60209: PPUSH
60210: LD_VAR 0 1
60214: PPUSH
60215: CALL_OW 12
60219: ARRAY
60220: PPUSH
60221: LD_INT 60
60223: PPUSH
60224: CALL_OW 234
// end ;
60228: PPOPN 1
60230: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
60231: LD_EXP 106
60235: PUSH
60236: LD_EXP 136
60240: AND
60241: IFFALSE 60340
60243: GO 60245
60245: DISABLE
60246: LD_INT 0
60248: PPUSH
60249: PPUSH
// begin enable ;
60250: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
60251: LD_ADDR_VAR 0 1
60255: PUSH
60256: LD_INT 22
60258: PUSH
60259: LD_OWVAR 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 61
60270: PUSH
60271: EMPTY
60272: LIST
60273: PUSH
60274: LD_INT 33
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: LIST
60288: PPUSH
60289: CALL_OW 69
60293: ST_TO_ADDR
// if not tmp then
60294: LD_VAR 0 1
60298: NOT
60299: IFFALSE 60303
// exit ;
60301: GO 60340
// for i in tmp do
60303: LD_ADDR_VAR 0 2
60307: PUSH
60308: LD_VAR 0 1
60312: PUSH
60313: FOR_IN
60314: IFFALSE 60338
// if IsControledBy ( i ) then
60316: LD_VAR 0 2
60320: PPUSH
60321: CALL_OW 312
60325: IFFALSE 60336
// ComUnlink ( i ) ;
60327: LD_VAR 0 2
60331: PPUSH
60332: CALL_OW 136
60336: GO 60313
60338: POP
60339: POP
// end ;
60340: PPOPN 2
60342: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
60343: LD_EXP 106
60347: PUSH
60348: LD_EXP 137
60352: AND
60353: IFFALSE 60493
60355: GO 60357
60357: DISABLE
60358: LD_INT 0
60360: PPUSH
60361: PPUSH
// begin ToLua ( displayPowell(); ) ;
60362: LD_STRING displayPowell();
60364: PPUSH
60365: CALL_OW 559
// uc_side := 0 ;
60369: LD_ADDR_OWVAR 20
60373: PUSH
60374: LD_INT 0
60376: ST_TO_ADDR
// uc_nation := 2 ;
60377: LD_ADDR_OWVAR 21
60381: PUSH
60382: LD_INT 2
60384: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60385: LD_ADDR_OWVAR 37
60389: PUSH
60390: LD_INT 14
60392: ST_TO_ADDR
// vc_engine := engine_siberite ;
60393: LD_ADDR_OWVAR 39
60397: PUSH
60398: LD_INT 3
60400: ST_TO_ADDR
// vc_control := control_apeman ;
60401: LD_ADDR_OWVAR 38
60405: PUSH
60406: LD_INT 5
60408: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60409: LD_ADDR_OWVAR 40
60413: PUSH
60414: LD_INT 29
60416: ST_TO_ADDR
// un := CreateVehicle ;
60417: LD_ADDR_VAR 0 2
60421: PUSH
60422: CALL_OW 45
60426: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60427: LD_VAR 0 2
60431: PPUSH
60432: LD_INT 1
60434: PPUSH
60435: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60439: LD_INT 35
60441: PPUSH
60442: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60446: LD_VAR 0 2
60450: PPUSH
60451: LD_INT 22
60453: PUSH
60454: LD_OWVAR 2
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PPUSH
60463: CALL_OW 69
60467: PPUSH
60468: LD_VAR 0 2
60472: PPUSH
60473: CALL_OW 74
60477: PPUSH
60478: CALL_OW 115
// until IsDead ( un ) ;
60482: LD_VAR 0 2
60486: PPUSH
60487: CALL_OW 301
60491: IFFALSE 60439
// end ;
60493: PPOPN 2
60495: END
// every 0 0$1 trigger StreamModeActive and sStu do
60496: LD_EXP 106
60500: PUSH
60501: LD_EXP 145
60505: AND
60506: IFFALSE 60522
60508: GO 60510
60510: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60511: LD_STRING displayStucuk();
60513: PPUSH
60514: CALL_OW 559
// ResetFog ;
60518: CALL_OW 335
// end ;
60522: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60523: LD_EXP 106
60527: PUSH
60528: LD_EXP 138
60532: AND
60533: IFFALSE 60674
60535: GO 60537
60537: DISABLE
60538: LD_INT 0
60540: PPUSH
60541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60542: LD_ADDR_VAR 0 2
60546: PUSH
60547: LD_INT 22
60549: PUSH
60550: LD_OWVAR 2
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 21
60561: PUSH
60562: LD_INT 1
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PPUSH
60573: CALL_OW 69
60577: ST_TO_ADDR
// if not tmp then
60578: LD_VAR 0 2
60582: NOT
60583: IFFALSE 60587
// exit ;
60585: GO 60674
// un := tmp [ rand ( 1 , tmp ) ] ;
60587: LD_ADDR_VAR 0 1
60591: PUSH
60592: LD_VAR 0 2
60596: PUSH
60597: LD_INT 1
60599: PPUSH
60600: LD_VAR 0 2
60604: PPUSH
60605: CALL_OW 12
60609: ARRAY
60610: ST_TO_ADDR
// SetSide ( un , 0 ) ;
60611: LD_VAR 0 1
60615: PPUSH
60616: LD_INT 0
60618: PPUSH
60619: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
60623: LD_VAR 0 1
60627: PPUSH
60628: LD_OWVAR 3
60632: PUSH
60633: LD_VAR 0 1
60637: DIFF
60638: PPUSH
60639: LD_VAR 0 1
60643: PPUSH
60644: CALL_OW 74
60648: PPUSH
60649: CALL_OW 115
// wait ( 0 0$20 ) ;
60653: LD_INT 700
60655: PPUSH
60656: CALL_OW 67
// SetSide ( un , your_side ) ;
60660: LD_VAR 0 1
60664: PPUSH
60665: LD_OWVAR 2
60669: PPUSH
60670: CALL_OW 235
// end ;
60674: PPOPN 2
60676: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
60677: LD_EXP 106
60681: PUSH
60682: LD_EXP 139
60686: AND
60687: IFFALSE 60793
60689: GO 60691
60691: DISABLE
60692: LD_INT 0
60694: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60695: LD_ADDR_VAR 0 1
60699: PUSH
60700: LD_INT 22
60702: PUSH
60703: LD_OWVAR 2
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: LD_INT 30
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 30
60727: PUSH
60728: LD_INT 1
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: LIST
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PPUSH
60744: CALL_OW 69
60748: ST_TO_ADDR
// if not depot then
60749: LD_VAR 0 1
60753: NOT
60754: IFFALSE 60758
// exit ;
60756: GO 60793
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
60758: LD_VAR 0 1
60762: PUSH
60763: LD_INT 1
60765: ARRAY
60766: PPUSH
60767: CALL_OW 250
60771: PPUSH
60772: LD_VAR 0 1
60776: PUSH
60777: LD_INT 1
60779: ARRAY
60780: PPUSH
60781: CALL_OW 251
60785: PPUSH
60786: LD_INT 70
60788: PPUSH
60789: CALL_OW 495
// end ;
60793: PPOPN 1
60795: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
60796: LD_EXP 106
60800: PUSH
60801: LD_EXP 140
60805: AND
60806: IFFALSE 61017
60808: GO 60810
60810: DISABLE
60811: LD_INT 0
60813: PPUSH
60814: PPUSH
60815: PPUSH
60816: PPUSH
60817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60818: LD_ADDR_VAR 0 5
60822: PUSH
60823: LD_INT 22
60825: PUSH
60826: LD_OWVAR 2
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 21
60837: PUSH
60838: LD_INT 1
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PPUSH
60849: CALL_OW 69
60853: ST_TO_ADDR
// if not tmp then
60854: LD_VAR 0 5
60858: NOT
60859: IFFALSE 60863
// exit ;
60861: GO 61017
// for i in tmp do
60863: LD_ADDR_VAR 0 1
60867: PUSH
60868: LD_VAR 0 5
60872: PUSH
60873: FOR_IN
60874: IFFALSE 61015
// begin d := rand ( 0 , 5 ) ;
60876: LD_ADDR_VAR 0 4
60880: PUSH
60881: LD_INT 0
60883: PPUSH
60884: LD_INT 5
60886: PPUSH
60887: CALL_OW 12
60891: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
60892: LD_ADDR_VAR 0 2
60896: PUSH
60897: LD_VAR 0 1
60901: PPUSH
60902: CALL_OW 250
60906: PPUSH
60907: LD_VAR 0 4
60911: PPUSH
60912: LD_INT 3
60914: PPUSH
60915: LD_INT 12
60917: PPUSH
60918: CALL_OW 12
60922: PPUSH
60923: CALL_OW 272
60927: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
60928: LD_ADDR_VAR 0 3
60932: PUSH
60933: LD_VAR 0 1
60937: PPUSH
60938: CALL_OW 251
60942: PPUSH
60943: LD_VAR 0 4
60947: PPUSH
60948: LD_INT 3
60950: PPUSH
60951: LD_INT 12
60953: PPUSH
60954: CALL_OW 12
60958: PPUSH
60959: CALL_OW 273
60963: ST_TO_ADDR
// if ValidHex ( x , y ) then
60964: LD_VAR 0 2
60968: PPUSH
60969: LD_VAR 0 3
60973: PPUSH
60974: CALL_OW 488
60978: IFFALSE 61013
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
60980: LD_VAR 0 1
60984: PPUSH
60985: LD_VAR 0 2
60989: PPUSH
60990: LD_VAR 0 3
60994: PPUSH
60995: LD_INT 3
60997: PPUSH
60998: LD_INT 6
61000: PPUSH
61001: CALL_OW 12
61005: PPUSH
61006: LD_INT 1
61008: PPUSH
61009: CALL_OW 483
// end ;
61013: GO 60873
61015: POP
61016: POP
// end ;
61017: PPOPN 5
61019: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
61020: LD_EXP 106
61024: PUSH
61025: LD_EXP 141
61029: AND
61030: IFFALSE 61124
61032: GO 61034
61034: DISABLE
61035: LD_INT 0
61037: PPUSH
61038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61039: LD_ADDR_VAR 0 2
61043: PUSH
61044: LD_INT 22
61046: PUSH
61047: LD_OWVAR 2
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 32
61058: PUSH
61059: LD_INT 1
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 21
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: PPUSH
61081: CALL_OW 69
61085: ST_TO_ADDR
// if not tmp then
61086: LD_VAR 0 2
61090: NOT
61091: IFFALSE 61095
// exit ;
61093: GO 61124
// for i in tmp do
61095: LD_ADDR_VAR 0 1
61099: PUSH
61100: LD_VAR 0 2
61104: PUSH
61105: FOR_IN
61106: IFFALSE 61122
// SetFuel ( i , 0 ) ;
61108: LD_VAR 0 1
61112: PPUSH
61113: LD_INT 0
61115: PPUSH
61116: CALL_OW 240
61120: GO 61105
61122: POP
61123: POP
// end ;
61124: PPOPN 2
61126: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
61127: LD_EXP 106
61131: PUSH
61132: LD_EXP 142
61136: AND
61137: IFFALSE 61203
61139: GO 61141
61141: DISABLE
61142: LD_INT 0
61144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61145: LD_ADDR_VAR 0 1
61149: PUSH
61150: LD_INT 22
61152: PUSH
61153: LD_OWVAR 2
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 30
61164: PUSH
61165: LD_INT 29
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PPUSH
61176: CALL_OW 69
61180: ST_TO_ADDR
// if not tmp then
61181: LD_VAR 0 1
61185: NOT
61186: IFFALSE 61190
// exit ;
61188: GO 61203
// DestroyUnit ( tmp [ 1 ] ) ;
61190: LD_VAR 0 1
61194: PUSH
61195: LD_INT 1
61197: ARRAY
61198: PPUSH
61199: CALL_OW 65
// end ;
61203: PPOPN 1
61205: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
61206: LD_EXP 106
61210: PUSH
61211: LD_EXP 144
61215: AND
61216: IFFALSE 61345
61218: GO 61220
61220: DISABLE
61221: LD_INT 0
61223: PPUSH
// begin uc_side := 0 ;
61224: LD_ADDR_OWVAR 20
61228: PUSH
61229: LD_INT 0
61231: ST_TO_ADDR
// uc_nation := nation_arabian ;
61232: LD_ADDR_OWVAR 21
61236: PUSH
61237: LD_INT 2
61239: ST_TO_ADDR
// hc_gallery :=  ;
61240: LD_ADDR_OWVAR 33
61244: PUSH
61245: LD_STRING 
61247: ST_TO_ADDR
// hc_name :=  ;
61248: LD_ADDR_OWVAR 26
61252: PUSH
61253: LD_STRING 
61255: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
61256: LD_INT 1
61258: PPUSH
61259: LD_INT 11
61261: PPUSH
61262: LD_INT 10
61264: PPUSH
61265: CALL_OW 380
// un := CreateHuman ;
61269: LD_ADDR_VAR 0 1
61273: PUSH
61274: CALL_OW 44
61278: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61279: LD_VAR 0 1
61283: PPUSH
61284: LD_INT 1
61286: PPUSH
61287: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61291: LD_INT 35
61293: PPUSH
61294: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61298: LD_VAR 0 1
61302: PPUSH
61303: LD_INT 22
61305: PUSH
61306: LD_OWVAR 2
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PPUSH
61315: CALL_OW 69
61319: PPUSH
61320: LD_VAR 0 1
61324: PPUSH
61325: CALL_OW 74
61329: PPUSH
61330: CALL_OW 115
// until IsDead ( un ) ;
61334: LD_VAR 0 1
61338: PPUSH
61339: CALL_OW 301
61343: IFFALSE 61291
// end ;
61345: PPOPN 1
61347: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
61348: LD_EXP 106
61352: PUSH
61353: LD_EXP 146
61357: AND
61358: IFFALSE 61370
61360: GO 61362
61362: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61363: LD_STRING earthquake(getX(game), 0, 32)
61365: PPUSH
61366: CALL_OW 559
61370: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61371: LD_EXP 106
61375: PUSH
61376: LD_EXP 147
61380: AND
61381: IFFALSE 61472
61383: GO 61385
61385: DISABLE
61386: LD_INT 0
61388: PPUSH
// begin enable ;
61389: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61390: LD_ADDR_VAR 0 1
61394: PUSH
61395: LD_INT 22
61397: PUSH
61398: LD_OWVAR 2
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 21
61409: PUSH
61410: LD_INT 2
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 33
61419: PUSH
61420: LD_INT 3
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: LIST
61431: PPUSH
61432: CALL_OW 69
61436: ST_TO_ADDR
// if not tmp then
61437: LD_VAR 0 1
61441: NOT
61442: IFFALSE 61446
// exit ;
61444: GO 61472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61446: LD_VAR 0 1
61450: PUSH
61451: LD_INT 1
61453: PPUSH
61454: LD_VAR 0 1
61458: PPUSH
61459: CALL_OW 12
61463: ARRAY
61464: PPUSH
61465: LD_INT 1
61467: PPUSH
61468: CALL_OW 234
// end ;
61472: PPOPN 1
61474: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61475: LD_EXP 106
61479: PUSH
61480: LD_EXP 148
61484: AND
61485: IFFALSE 61626
61487: GO 61489
61489: DISABLE
61490: LD_INT 0
61492: PPUSH
61493: PPUSH
61494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61495: LD_ADDR_VAR 0 3
61499: PUSH
61500: LD_INT 22
61502: PUSH
61503: LD_OWVAR 2
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 25
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PPUSH
61526: CALL_OW 69
61530: ST_TO_ADDR
// if not tmp then
61531: LD_VAR 0 3
61535: NOT
61536: IFFALSE 61540
// exit ;
61538: GO 61626
// un := tmp [ rand ( 1 , tmp ) ] ;
61540: LD_ADDR_VAR 0 2
61544: PUSH
61545: LD_VAR 0 3
61549: PUSH
61550: LD_INT 1
61552: PPUSH
61553: LD_VAR 0 3
61557: PPUSH
61558: CALL_OW 12
61562: ARRAY
61563: ST_TO_ADDR
// if Crawls ( un ) then
61564: LD_VAR 0 2
61568: PPUSH
61569: CALL_OW 318
61573: IFFALSE 61584
// ComWalk ( un ) ;
61575: LD_VAR 0 2
61579: PPUSH
61580: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
61584: LD_VAR 0 2
61588: PPUSH
61589: LD_INT 9
61591: PPUSH
61592: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
61596: LD_INT 28
61598: PPUSH
61599: LD_OWVAR 2
61603: PPUSH
61604: LD_INT 2
61606: PPUSH
61607: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
61611: LD_INT 29
61613: PPUSH
61614: LD_OWVAR 2
61618: PPUSH
61619: LD_INT 2
61621: PPUSH
61622: CALL_OW 322
// end ;
61626: PPOPN 3
61628: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
61629: LD_EXP 106
61633: PUSH
61634: LD_EXP 149
61638: AND
61639: IFFALSE 61750
61641: GO 61643
61643: DISABLE
61644: LD_INT 0
61646: PPUSH
61647: PPUSH
61648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61649: LD_ADDR_VAR 0 3
61653: PUSH
61654: LD_INT 22
61656: PUSH
61657: LD_OWVAR 2
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 25
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PPUSH
61680: CALL_OW 69
61684: ST_TO_ADDR
// if not tmp then
61685: LD_VAR 0 3
61689: NOT
61690: IFFALSE 61694
// exit ;
61692: GO 61750
// un := tmp [ rand ( 1 , tmp ) ] ;
61694: LD_ADDR_VAR 0 2
61698: PUSH
61699: LD_VAR 0 3
61703: PUSH
61704: LD_INT 1
61706: PPUSH
61707: LD_VAR 0 3
61711: PPUSH
61712: CALL_OW 12
61716: ARRAY
61717: ST_TO_ADDR
// if Crawls ( un ) then
61718: LD_VAR 0 2
61722: PPUSH
61723: CALL_OW 318
61727: IFFALSE 61738
// ComWalk ( un ) ;
61729: LD_VAR 0 2
61733: PPUSH
61734: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61738: LD_VAR 0 2
61742: PPUSH
61743: LD_INT 8
61745: PPUSH
61746: CALL_OW 336
// end ;
61750: PPOPN 3
61752: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
61753: LD_EXP 106
61757: PUSH
61758: LD_EXP 150
61762: AND
61763: IFFALSE 61907
61765: GO 61767
61767: DISABLE
61768: LD_INT 0
61770: PPUSH
61771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
61772: LD_ADDR_VAR 0 2
61776: PUSH
61777: LD_INT 22
61779: PUSH
61780: LD_OWVAR 2
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 21
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 2
61801: PUSH
61802: LD_INT 34
61804: PUSH
61805: LD_INT 12
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 34
61814: PUSH
61815: LD_INT 51
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 34
61824: PUSH
61825: LD_INT 32
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: LIST
61842: PPUSH
61843: CALL_OW 69
61847: ST_TO_ADDR
// if not tmp then
61848: LD_VAR 0 2
61852: NOT
61853: IFFALSE 61857
// exit ;
61855: GO 61907
// for i in tmp do
61857: LD_ADDR_VAR 0 1
61861: PUSH
61862: LD_VAR 0 2
61866: PUSH
61867: FOR_IN
61868: IFFALSE 61905
// if GetCargo ( i , mat_artifact ) = 0 then
61870: LD_VAR 0 1
61874: PPUSH
61875: LD_INT 4
61877: PPUSH
61878: CALL_OW 289
61882: PUSH
61883: LD_INT 0
61885: EQUAL
61886: IFFALSE 61903
// SetCargo ( i , mat_siberit , 100 ) ;
61888: LD_VAR 0 1
61892: PPUSH
61893: LD_INT 3
61895: PPUSH
61896: LD_INT 100
61898: PPUSH
61899: CALL_OW 290
61903: GO 61867
61905: POP
61906: POP
// end ;
61907: PPOPN 2
61909: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
61910: LD_EXP 106
61914: PUSH
61915: LD_EXP 151
61919: AND
61920: IFFALSE 62103
61922: GO 61924
61924: DISABLE
61925: LD_INT 0
61927: PPUSH
61928: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61929: LD_ADDR_VAR 0 2
61933: PUSH
61934: LD_INT 22
61936: PUSH
61937: LD_OWVAR 2
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PPUSH
61946: CALL_OW 69
61950: ST_TO_ADDR
// if not tmp then
61951: LD_VAR 0 2
61955: NOT
61956: IFFALSE 61960
// exit ;
61958: GO 62103
// for i := 1 to 2 do
61960: LD_ADDR_VAR 0 1
61964: PUSH
61965: DOUBLE
61966: LD_INT 1
61968: DEC
61969: ST_TO_ADDR
61970: LD_INT 2
61972: PUSH
61973: FOR_TO
61974: IFFALSE 62101
// begin uc_side := your_side ;
61976: LD_ADDR_OWVAR 20
61980: PUSH
61981: LD_OWVAR 2
61985: ST_TO_ADDR
// uc_nation := nation_american ;
61986: LD_ADDR_OWVAR 21
61990: PUSH
61991: LD_INT 1
61993: ST_TO_ADDR
// vc_chassis := us_morphling ;
61994: LD_ADDR_OWVAR 37
61998: PUSH
61999: LD_INT 5
62001: ST_TO_ADDR
// vc_engine := engine_siberite ;
62002: LD_ADDR_OWVAR 39
62006: PUSH
62007: LD_INT 3
62009: ST_TO_ADDR
// vc_control := control_computer ;
62010: LD_ADDR_OWVAR 38
62014: PUSH
62015: LD_INT 3
62017: ST_TO_ADDR
// vc_weapon := us_double_laser ;
62018: LD_ADDR_OWVAR 40
62022: PUSH
62023: LD_INT 10
62025: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62026: LD_VAR 0 2
62030: PUSH
62031: LD_INT 1
62033: ARRAY
62034: PPUSH
62035: CALL_OW 310
62039: NOT
62040: IFFALSE 62087
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62042: CALL_OW 45
62046: PPUSH
62047: LD_VAR 0 2
62051: PUSH
62052: LD_INT 1
62054: ARRAY
62055: PPUSH
62056: CALL_OW 250
62060: PPUSH
62061: LD_VAR 0 2
62065: PUSH
62066: LD_INT 1
62068: ARRAY
62069: PPUSH
62070: CALL_OW 251
62074: PPUSH
62075: LD_INT 12
62077: PPUSH
62078: LD_INT 1
62080: PPUSH
62081: CALL_OW 50
62085: GO 62099
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
62087: CALL_OW 45
62091: PPUSH
62092: LD_INT 1
62094: PPUSH
62095: CALL_OW 51
// end ;
62099: GO 61973
62101: POP
62102: POP
// end ;
62103: PPOPN 2
62105: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
62106: LD_EXP 106
62110: PUSH
62111: LD_EXP 152
62115: AND
62116: IFFALSE 62338
62118: GO 62120
62120: DISABLE
62121: LD_INT 0
62123: PPUSH
62124: PPUSH
62125: PPUSH
62126: PPUSH
62127: PPUSH
62128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62129: LD_ADDR_VAR 0 6
62133: PUSH
62134: LD_INT 22
62136: PUSH
62137: LD_OWVAR 2
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 21
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 3
62158: PUSH
62159: LD_INT 23
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: LIST
62177: PPUSH
62178: CALL_OW 69
62182: ST_TO_ADDR
// if not tmp then
62183: LD_VAR 0 6
62187: NOT
62188: IFFALSE 62192
// exit ;
62190: GO 62338
// s1 := rand ( 1 , 4 ) ;
62192: LD_ADDR_VAR 0 2
62196: PUSH
62197: LD_INT 1
62199: PPUSH
62200: LD_INT 4
62202: PPUSH
62203: CALL_OW 12
62207: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
62208: LD_ADDR_VAR 0 4
62212: PUSH
62213: LD_VAR 0 6
62217: PUSH
62218: LD_INT 1
62220: ARRAY
62221: PPUSH
62222: LD_VAR 0 2
62226: PPUSH
62227: CALL_OW 259
62231: ST_TO_ADDR
// if s1 = 1 then
62232: LD_VAR 0 2
62236: PUSH
62237: LD_INT 1
62239: EQUAL
62240: IFFALSE 62260
// s2 := rand ( 2 , 4 ) else
62242: LD_ADDR_VAR 0 3
62246: PUSH
62247: LD_INT 2
62249: PPUSH
62250: LD_INT 4
62252: PPUSH
62253: CALL_OW 12
62257: ST_TO_ADDR
62258: GO 62268
// s2 := 1 ;
62260: LD_ADDR_VAR 0 3
62264: PUSH
62265: LD_INT 1
62267: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
62268: LD_ADDR_VAR 0 5
62272: PUSH
62273: LD_VAR 0 6
62277: PUSH
62278: LD_INT 1
62280: ARRAY
62281: PPUSH
62282: LD_VAR 0 3
62286: PPUSH
62287: CALL_OW 259
62291: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
62292: LD_VAR 0 6
62296: PUSH
62297: LD_INT 1
62299: ARRAY
62300: PPUSH
62301: LD_VAR 0 2
62305: PPUSH
62306: LD_VAR 0 5
62310: PPUSH
62311: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
62315: LD_VAR 0 6
62319: PUSH
62320: LD_INT 1
62322: ARRAY
62323: PPUSH
62324: LD_VAR 0 3
62328: PPUSH
62329: LD_VAR 0 4
62333: PPUSH
62334: CALL_OW 237
// end ;
62338: PPOPN 6
62340: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62341: LD_EXP 106
62345: PUSH
62346: LD_EXP 153
62350: AND
62351: IFFALSE 62430
62353: GO 62355
62355: DISABLE
62356: LD_INT 0
62358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62359: LD_ADDR_VAR 0 1
62363: PUSH
62364: LD_INT 22
62366: PUSH
62367: LD_OWVAR 2
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 30
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PPUSH
62390: CALL_OW 69
62394: ST_TO_ADDR
// if not tmp then
62395: LD_VAR 0 1
62399: NOT
62400: IFFALSE 62404
// exit ;
62402: GO 62430
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62404: LD_VAR 0 1
62408: PUSH
62409: LD_INT 1
62411: PPUSH
62412: LD_VAR 0 1
62416: PPUSH
62417: CALL_OW 12
62421: ARRAY
62422: PPUSH
62423: LD_INT 1
62425: PPUSH
62426: CALL_OW 234
// end ;
62430: PPOPN 1
62432: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62433: LD_EXP 106
62437: PUSH
62438: LD_EXP 154
62442: AND
62443: IFFALSE 62555
62445: GO 62447
62447: DISABLE
62448: LD_INT 0
62450: PPUSH
62451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62452: LD_ADDR_VAR 0 2
62456: PUSH
62457: LD_INT 22
62459: PUSH
62460: LD_OWVAR 2
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: LD_INT 30
62474: PUSH
62475: LD_INT 27
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 30
62484: PUSH
62485: LD_INT 26
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 30
62494: PUSH
62495: LD_INT 28
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PPUSH
62512: CALL_OW 69
62516: ST_TO_ADDR
// if not tmp then
62517: LD_VAR 0 2
62521: NOT
62522: IFFALSE 62526
// exit ;
62524: GO 62555
// for i in tmp do
62526: LD_ADDR_VAR 0 1
62530: PUSH
62531: LD_VAR 0 2
62535: PUSH
62536: FOR_IN
62537: IFFALSE 62553
// SetLives ( i , 1 ) ;
62539: LD_VAR 0 1
62543: PPUSH
62544: LD_INT 1
62546: PPUSH
62547: CALL_OW 234
62551: GO 62536
62553: POP
62554: POP
// end ;
62555: PPOPN 2
62557: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
62558: LD_EXP 106
62562: PUSH
62563: LD_EXP 155
62567: AND
62568: IFFALSE 62855
62570: GO 62572
62572: DISABLE
62573: LD_INT 0
62575: PPUSH
62576: PPUSH
62577: PPUSH
// begin i := rand ( 1 , 7 ) ;
62578: LD_ADDR_VAR 0 1
62582: PUSH
62583: LD_INT 1
62585: PPUSH
62586: LD_INT 7
62588: PPUSH
62589: CALL_OW 12
62593: ST_TO_ADDR
// case i of 1 :
62594: LD_VAR 0 1
62598: PUSH
62599: LD_INT 1
62601: DOUBLE
62602: EQUAL
62603: IFTRUE 62607
62605: GO 62617
62607: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
62608: LD_STRING earthquake(getX(game), 0, 32)
62610: PPUSH
62611: CALL_OW 559
62615: GO 62855
62617: LD_INT 2
62619: DOUBLE
62620: EQUAL
62621: IFTRUE 62625
62623: GO 62639
62625: POP
// begin ToLua ( displayStucuk(); ) ;
62626: LD_STRING displayStucuk();
62628: PPUSH
62629: CALL_OW 559
// ResetFog ;
62633: CALL_OW 335
// end ; 3 :
62637: GO 62855
62639: LD_INT 3
62641: DOUBLE
62642: EQUAL
62643: IFTRUE 62647
62645: GO 62751
62647: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62648: LD_ADDR_VAR 0 2
62652: PUSH
62653: LD_INT 22
62655: PUSH
62656: LD_OWVAR 2
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 25
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PPUSH
62679: CALL_OW 69
62683: ST_TO_ADDR
// if not tmp then
62684: LD_VAR 0 2
62688: NOT
62689: IFFALSE 62693
// exit ;
62691: GO 62855
// un := tmp [ rand ( 1 , tmp ) ] ;
62693: LD_ADDR_VAR 0 3
62697: PUSH
62698: LD_VAR 0 2
62702: PUSH
62703: LD_INT 1
62705: PPUSH
62706: LD_VAR 0 2
62710: PPUSH
62711: CALL_OW 12
62715: ARRAY
62716: ST_TO_ADDR
// if Crawls ( un ) then
62717: LD_VAR 0 3
62721: PPUSH
62722: CALL_OW 318
62726: IFFALSE 62737
// ComWalk ( un ) ;
62728: LD_VAR 0 3
62732: PPUSH
62733: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62737: LD_VAR 0 3
62741: PPUSH
62742: LD_INT 8
62744: PPUSH
62745: CALL_OW 336
// end ; 4 :
62749: GO 62855
62751: LD_INT 4
62753: DOUBLE
62754: EQUAL
62755: IFTRUE 62759
62757: GO 62833
62759: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62760: LD_ADDR_VAR 0 2
62764: PUSH
62765: LD_INT 22
62767: PUSH
62768: LD_OWVAR 2
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 30
62779: PUSH
62780: LD_INT 29
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PPUSH
62791: CALL_OW 69
62795: ST_TO_ADDR
// if not tmp then
62796: LD_VAR 0 2
62800: NOT
62801: IFFALSE 62805
// exit ;
62803: GO 62855
// CenterNowOnUnits ( tmp [ 1 ] ) ;
62805: LD_VAR 0 2
62809: PUSH
62810: LD_INT 1
62812: ARRAY
62813: PPUSH
62814: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
62818: LD_VAR 0 2
62822: PUSH
62823: LD_INT 1
62825: ARRAY
62826: PPUSH
62827: CALL_OW 65
// end ; 5 .. 7 :
62831: GO 62855
62833: LD_INT 5
62835: DOUBLE
62836: GREATEREQUAL
62837: IFFALSE 62845
62839: LD_INT 7
62841: DOUBLE
62842: LESSEQUAL
62843: IFTRUE 62847
62845: GO 62854
62847: POP
// StreamSibBomb ; end ;
62848: CALL 59092 0 0
62852: GO 62855
62854: POP
// end ;
62855: PPOPN 3
62857: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
62858: LD_EXP 106
62862: PUSH
62863: LD_EXP 156
62867: AND
62868: IFFALSE 63024
62870: GO 62872
62872: DISABLE
62873: LD_INT 0
62875: PPUSH
62876: PPUSH
62877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
62878: LD_ADDR_VAR 0 2
62882: PUSH
62883: LD_INT 81
62885: PUSH
62886: LD_OWVAR 2
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 2
62897: PUSH
62898: LD_INT 21
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 21
62910: PUSH
62911: LD_INT 2
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: LIST
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PPUSH
62927: CALL_OW 69
62931: ST_TO_ADDR
// if not tmp then
62932: LD_VAR 0 2
62936: NOT
62937: IFFALSE 62941
// exit ;
62939: GO 63024
// p := 0 ;
62941: LD_ADDR_VAR 0 3
62945: PUSH
62946: LD_INT 0
62948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62949: LD_INT 35
62951: PPUSH
62952: CALL_OW 67
// p := p + 1 ;
62956: LD_ADDR_VAR 0 3
62960: PUSH
62961: LD_VAR 0 3
62965: PUSH
62966: LD_INT 1
62968: PLUS
62969: ST_TO_ADDR
// for i in tmp do
62970: LD_ADDR_VAR 0 1
62974: PUSH
62975: LD_VAR 0 2
62979: PUSH
62980: FOR_IN
62981: IFFALSE 63012
// if GetLives ( i ) < 1000 then
62983: LD_VAR 0 1
62987: PPUSH
62988: CALL_OW 256
62992: PUSH
62993: LD_INT 1000
62995: LESS
62996: IFFALSE 63010
// SetLives ( i , 1000 ) ;
62998: LD_VAR 0 1
63002: PPUSH
63003: LD_INT 1000
63005: PPUSH
63006: CALL_OW 234
63010: GO 62980
63012: POP
63013: POP
// until p > 20 ;
63014: LD_VAR 0 3
63018: PUSH
63019: LD_INT 20
63021: GREATER
63022: IFFALSE 62949
// end ;
63024: PPOPN 3
63026: END
// every 0 0$1 trigger StreamModeActive and sTime do
63027: LD_EXP 106
63031: PUSH
63032: LD_EXP 157
63036: AND
63037: IFFALSE 63072
63039: GO 63041
63041: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63042: LD_INT 28
63044: PPUSH
63045: LD_OWVAR 2
63049: PPUSH
63050: LD_INT 2
63052: PPUSH
63053: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63057: LD_INT 30
63059: PPUSH
63060: LD_OWVAR 2
63064: PPUSH
63065: LD_INT 2
63067: PPUSH
63068: CALL_OW 322
// end ;
63072: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63073: LD_EXP 106
63077: PUSH
63078: LD_EXP 158
63082: AND
63083: IFFALSE 63204
63085: GO 63087
63087: DISABLE
63088: LD_INT 0
63090: PPUSH
63091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63092: LD_ADDR_VAR 0 2
63096: PUSH
63097: LD_INT 22
63099: PUSH
63100: LD_OWVAR 2
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 21
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 3
63121: PUSH
63122: LD_INT 23
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: LIST
63140: PPUSH
63141: CALL_OW 69
63145: ST_TO_ADDR
// if not tmp then
63146: LD_VAR 0 2
63150: NOT
63151: IFFALSE 63155
// exit ;
63153: GO 63204
// for i in tmp do
63155: LD_ADDR_VAR 0 1
63159: PUSH
63160: LD_VAR 0 2
63164: PUSH
63165: FOR_IN
63166: IFFALSE 63202
// begin if Crawls ( i ) then
63168: LD_VAR 0 1
63172: PPUSH
63173: CALL_OW 318
63177: IFFALSE 63188
// ComWalk ( i ) ;
63179: LD_VAR 0 1
63183: PPUSH
63184: CALL_OW 138
// SetClass ( i , 2 ) ;
63188: LD_VAR 0 1
63192: PPUSH
63193: LD_INT 2
63195: PPUSH
63196: CALL_OW 336
// end ;
63200: GO 63165
63202: POP
63203: POP
// end ;
63204: PPOPN 2
63206: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
63207: LD_EXP 106
63211: PUSH
63212: LD_EXP 159
63216: AND
63217: IFFALSE 63505
63219: GO 63221
63221: DISABLE
63222: LD_INT 0
63224: PPUSH
63225: PPUSH
63226: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
63227: LD_OWVAR 2
63231: PPUSH
63232: LD_INT 9
63234: PPUSH
63235: LD_INT 1
63237: PPUSH
63238: LD_INT 1
63240: PPUSH
63241: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
63245: LD_INT 9
63247: PPUSH
63248: LD_OWVAR 2
63252: PPUSH
63253: CALL_OW 343
// uc_side := 9 ;
63257: LD_ADDR_OWVAR 20
63261: PUSH
63262: LD_INT 9
63264: ST_TO_ADDR
// uc_nation := 2 ;
63265: LD_ADDR_OWVAR 21
63269: PUSH
63270: LD_INT 2
63272: ST_TO_ADDR
// hc_name := Dark Warrior ;
63273: LD_ADDR_OWVAR 26
63277: PUSH
63278: LD_STRING Dark Warrior
63280: ST_TO_ADDR
// hc_gallery :=  ;
63281: LD_ADDR_OWVAR 33
63285: PUSH
63286: LD_STRING 
63288: ST_TO_ADDR
// hc_noskilllimit := true ;
63289: LD_ADDR_OWVAR 76
63293: PUSH
63294: LD_INT 1
63296: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
63297: LD_ADDR_OWVAR 31
63301: PUSH
63302: LD_INT 30
63304: PUSH
63305: LD_INT 30
63307: PUSH
63308: LD_INT 30
63310: PUSH
63311: LD_INT 30
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: ST_TO_ADDR
// un := CreateHuman ;
63320: LD_ADDR_VAR 0 3
63324: PUSH
63325: CALL_OW 44
63329: ST_TO_ADDR
// hc_noskilllimit := false ;
63330: LD_ADDR_OWVAR 76
63334: PUSH
63335: LD_INT 0
63337: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63338: LD_VAR 0 3
63342: PPUSH
63343: LD_INT 1
63345: PPUSH
63346: CALL_OW 51
// ToLua ( playRanger() ) ;
63350: LD_STRING playRanger()
63352: PPUSH
63353: CALL_OW 559
// p := 0 ;
63357: LD_ADDR_VAR 0 2
63361: PUSH
63362: LD_INT 0
63364: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63365: LD_INT 35
63367: PPUSH
63368: CALL_OW 67
// p := p + 1 ;
63372: LD_ADDR_VAR 0 2
63376: PUSH
63377: LD_VAR 0 2
63381: PUSH
63382: LD_INT 1
63384: PLUS
63385: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63386: LD_VAR 0 3
63390: PPUSH
63391: CALL_OW 256
63395: PUSH
63396: LD_INT 1000
63398: LESS
63399: IFFALSE 63413
// SetLives ( un , 1000 ) ;
63401: LD_VAR 0 3
63405: PPUSH
63406: LD_INT 1000
63408: PPUSH
63409: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63413: LD_VAR 0 3
63417: PPUSH
63418: LD_INT 81
63420: PUSH
63421: LD_OWVAR 2
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 91
63432: PUSH
63433: LD_VAR 0 3
63437: PUSH
63438: LD_INT 30
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PPUSH
63450: CALL_OW 69
63454: PPUSH
63455: LD_VAR 0 3
63459: PPUSH
63460: CALL_OW 74
63464: PPUSH
63465: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63469: LD_VAR 0 2
63473: PUSH
63474: LD_INT 80
63476: GREATER
63477: PUSH
63478: LD_VAR 0 3
63482: PPUSH
63483: CALL_OW 301
63487: OR
63488: IFFALSE 63365
// if un then
63490: LD_VAR 0 3
63494: IFFALSE 63505
// RemoveUnit ( un ) ;
63496: LD_VAR 0 3
63500: PPUSH
63501: CALL_OW 64
// end ;
63505: PPOPN 3
63507: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63508: LD_EXP 160
63512: IFFALSE 63628
63514: GO 63516
63516: DISABLE
63517: LD_INT 0
63519: PPUSH
63520: PPUSH
63521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63522: LD_ADDR_VAR 0 2
63526: PUSH
63527: LD_INT 81
63529: PUSH
63530: LD_OWVAR 2
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 21
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PPUSH
63553: CALL_OW 69
63557: ST_TO_ADDR
// ToLua ( playComputer() ) ;
63558: LD_STRING playComputer()
63560: PPUSH
63561: CALL_OW 559
// if not tmp then
63565: LD_VAR 0 2
63569: NOT
63570: IFFALSE 63574
// exit ;
63572: GO 63628
// for i in tmp do
63574: LD_ADDR_VAR 0 1
63578: PUSH
63579: LD_VAR 0 2
63583: PUSH
63584: FOR_IN
63585: IFFALSE 63626
// for j := 1 to 4 do
63587: LD_ADDR_VAR 0 3
63591: PUSH
63592: DOUBLE
63593: LD_INT 1
63595: DEC
63596: ST_TO_ADDR
63597: LD_INT 4
63599: PUSH
63600: FOR_TO
63601: IFFALSE 63622
// SetSkill ( i , j , 10 ) ;
63603: LD_VAR 0 1
63607: PPUSH
63608: LD_VAR 0 3
63612: PPUSH
63613: LD_INT 10
63615: PPUSH
63616: CALL_OW 237
63620: GO 63600
63622: POP
63623: POP
63624: GO 63584
63626: POP
63627: POP
// end ;
63628: PPOPN 3
63630: END
// every 0 0$1 trigger s30 do var i , tmp ;
63631: LD_EXP 161
63635: IFFALSE 63704
63637: GO 63639
63639: DISABLE
63640: LD_INT 0
63642: PPUSH
63643: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63644: LD_ADDR_VAR 0 2
63648: PUSH
63649: LD_INT 22
63651: PUSH
63652: LD_OWVAR 2
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PPUSH
63661: CALL_OW 69
63665: ST_TO_ADDR
// if not tmp then
63666: LD_VAR 0 2
63670: NOT
63671: IFFALSE 63675
// exit ;
63673: GO 63704
// for i in tmp do
63675: LD_ADDR_VAR 0 1
63679: PUSH
63680: LD_VAR 0 2
63684: PUSH
63685: FOR_IN
63686: IFFALSE 63702
// SetLives ( i , 300 ) ;
63688: LD_VAR 0 1
63692: PPUSH
63693: LD_INT 300
63695: PPUSH
63696: CALL_OW 234
63700: GO 63685
63702: POP
63703: POP
// end ;
63704: PPOPN 2
63706: END
// every 0 0$1 trigger s60 do var i , tmp ;
63707: LD_EXP 162
63711: IFFALSE 63780
63713: GO 63715
63715: DISABLE
63716: LD_INT 0
63718: PPUSH
63719: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63720: LD_ADDR_VAR 0 2
63724: PUSH
63725: LD_INT 22
63727: PUSH
63728: LD_OWVAR 2
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PPUSH
63737: CALL_OW 69
63741: ST_TO_ADDR
// if not tmp then
63742: LD_VAR 0 2
63746: NOT
63747: IFFALSE 63751
// exit ;
63749: GO 63780
// for i in tmp do
63751: LD_ADDR_VAR 0 1
63755: PUSH
63756: LD_VAR 0 2
63760: PUSH
63761: FOR_IN
63762: IFFALSE 63778
// SetLives ( i , 600 ) ;
63764: LD_VAR 0 1
63768: PPUSH
63769: LD_INT 600
63771: PPUSH
63772: CALL_OW 234
63776: GO 63761
63778: POP
63779: POP
// end ;
63780: PPOPN 2
63782: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63783: LD_INT 0
63785: PPUSH
// case cmd of 301 :
63786: LD_VAR 0 1
63790: PUSH
63791: LD_INT 301
63793: DOUBLE
63794: EQUAL
63795: IFTRUE 63799
63797: GO 63831
63799: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
63800: LD_VAR 0 6
63804: PPUSH
63805: LD_VAR 0 7
63809: PPUSH
63810: LD_VAR 0 8
63814: PPUSH
63815: LD_VAR 0 4
63819: PPUSH
63820: LD_VAR 0 5
63824: PPUSH
63825: CALL 65032 0 5
63829: GO 63952
63831: LD_INT 302
63833: DOUBLE
63834: EQUAL
63835: IFTRUE 63839
63837: GO 63876
63839: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
63840: LD_VAR 0 6
63844: PPUSH
63845: LD_VAR 0 7
63849: PPUSH
63850: LD_VAR 0 8
63854: PPUSH
63855: LD_VAR 0 9
63859: PPUSH
63860: LD_VAR 0 4
63864: PPUSH
63865: LD_VAR 0 5
63869: PPUSH
63870: CALL 65123 0 6
63874: GO 63952
63876: LD_INT 303
63878: DOUBLE
63879: EQUAL
63880: IFTRUE 63884
63882: GO 63921
63884: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
63885: LD_VAR 0 6
63889: PPUSH
63890: LD_VAR 0 7
63894: PPUSH
63895: LD_VAR 0 8
63899: PPUSH
63900: LD_VAR 0 9
63904: PPUSH
63905: LD_VAR 0 4
63909: PPUSH
63910: LD_VAR 0 5
63914: PPUSH
63915: CALL 63957 0 6
63919: GO 63952
63921: LD_INT 304
63923: DOUBLE
63924: EQUAL
63925: IFTRUE 63929
63927: GO 63951
63929: POP
// hHackTeleport ( unit , x , y ) ; end ;
63930: LD_VAR 0 2
63934: PPUSH
63935: LD_VAR 0 4
63939: PPUSH
63940: LD_VAR 0 5
63944: PPUSH
63945: CALL 65716 0 3
63949: GO 63952
63951: POP
// end ;
63952: LD_VAR 0 12
63956: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
63957: LD_INT 0
63959: PPUSH
63960: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
63961: LD_VAR 0 1
63965: PUSH
63966: LD_INT 1
63968: LESS
63969: PUSH
63970: LD_VAR 0 1
63974: PUSH
63975: LD_INT 3
63977: GREATER
63978: OR
63979: PUSH
63980: LD_VAR 0 5
63984: PPUSH
63985: LD_VAR 0 6
63989: PPUSH
63990: CALL_OW 428
63994: OR
63995: IFFALSE 63999
// exit ;
63997: GO 64719
// uc_side := your_side ;
63999: LD_ADDR_OWVAR 20
64003: PUSH
64004: LD_OWVAR 2
64008: ST_TO_ADDR
// uc_nation := nation ;
64009: LD_ADDR_OWVAR 21
64013: PUSH
64014: LD_VAR 0 1
64018: ST_TO_ADDR
// bc_level = 1 ;
64019: LD_ADDR_OWVAR 43
64023: PUSH
64024: LD_INT 1
64026: ST_TO_ADDR
// case btype of 1 :
64027: LD_VAR 0 2
64031: PUSH
64032: LD_INT 1
64034: DOUBLE
64035: EQUAL
64036: IFTRUE 64040
64038: GO 64051
64040: POP
// bc_type := b_depot ; 2 :
64041: LD_ADDR_OWVAR 42
64045: PUSH
64046: LD_INT 0
64048: ST_TO_ADDR
64049: GO 64663
64051: LD_INT 2
64053: DOUBLE
64054: EQUAL
64055: IFTRUE 64059
64057: GO 64070
64059: POP
// bc_type := b_warehouse ; 3 :
64060: LD_ADDR_OWVAR 42
64064: PUSH
64065: LD_INT 1
64067: ST_TO_ADDR
64068: GO 64663
64070: LD_INT 3
64072: DOUBLE
64073: EQUAL
64074: IFTRUE 64078
64076: GO 64089
64078: POP
// bc_type := b_lab ; 4 .. 9 :
64079: LD_ADDR_OWVAR 42
64083: PUSH
64084: LD_INT 6
64086: ST_TO_ADDR
64087: GO 64663
64089: LD_INT 4
64091: DOUBLE
64092: GREATEREQUAL
64093: IFFALSE 64101
64095: LD_INT 9
64097: DOUBLE
64098: LESSEQUAL
64099: IFTRUE 64103
64101: GO 64155
64103: POP
// begin bc_type := b_lab_half ;
64104: LD_ADDR_OWVAR 42
64108: PUSH
64109: LD_INT 7
64111: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
64112: LD_ADDR_OWVAR 44
64116: PUSH
64117: LD_INT 10
64119: PUSH
64120: LD_INT 11
64122: PUSH
64123: LD_INT 12
64125: PUSH
64126: LD_INT 15
64128: PUSH
64129: LD_INT 14
64131: PUSH
64132: LD_INT 13
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: PUSH
64143: LD_VAR 0 2
64147: PUSH
64148: LD_INT 3
64150: MINUS
64151: ARRAY
64152: ST_TO_ADDR
// end ; 10 .. 13 :
64153: GO 64663
64155: LD_INT 10
64157: DOUBLE
64158: GREATEREQUAL
64159: IFFALSE 64167
64161: LD_INT 13
64163: DOUBLE
64164: LESSEQUAL
64165: IFTRUE 64169
64167: GO 64246
64169: POP
// begin bc_type := b_lab_full ;
64170: LD_ADDR_OWVAR 42
64174: PUSH
64175: LD_INT 8
64177: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
64178: LD_ADDR_OWVAR 44
64182: PUSH
64183: LD_INT 10
64185: PUSH
64186: LD_INT 12
64188: PUSH
64189: LD_INT 14
64191: PUSH
64192: LD_INT 13
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: PUSH
64201: LD_VAR 0 2
64205: PUSH
64206: LD_INT 9
64208: MINUS
64209: ARRAY
64210: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
64211: LD_ADDR_OWVAR 45
64215: PUSH
64216: LD_INT 11
64218: PUSH
64219: LD_INT 15
64221: PUSH
64222: LD_INT 12
64224: PUSH
64225: LD_INT 15
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: PUSH
64234: LD_VAR 0 2
64238: PUSH
64239: LD_INT 9
64241: MINUS
64242: ARRAY
64243: ST_TO_ADDR
// end ; 14 :
64244: GO 64663
64246: LD_INT 14
64248: DOUBLE
64249: EQUAL
64250: IFTRUE 64254
64252: GO 64265
64254: POP
// bc_type := b_workshop ; 15 :
64255: LD_ADDR_OWVAR 42
64259: PUSH
64260: LD_INT 2
64262: ST_TO_ADDR
64263: GO 64663
64265: LD_INT 15
64267: DOUBLE
64268: EQUAL
64269: IFTRUE 64273
64271: GO 64284
64273: POP
// bc_type := b_factory ; 16 :
64274: LD_ADDR_OWVAR 42
64278: PUSH
64279: LD_INT 3
64281: ST_TO_ADDR
64282: GO 64663
64284: LD_INT 16
64286: DOUBLE
64287: EQUAL
64288: IFTRUE 64292
64290: GO 64303
64292: POP
// bc_type := b_ext_gun ; 17 :
64293: LD_ADDR_OWVAR 42
64297: PUSH
64298: LD_INT 17
64300: ST_TO_ADDR
64301: GO 64663
64303: LD_INT 17
64305: DOUBLE
64306: EQUAL
64307: IFTRUE 64311
64309: GO 64339
64311: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64312: LD_ADDR_OWVAR 42
64316: PUSH
64317: LD_INT 19
64319: PUSH
64320: LD_INT 23
64322: PUSH
64323: LD_INT 19
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: LIST
64330: PUSH
64331: LD_VAR 0 1
64335: ARRAY
64336: ST_TO_ADDR
64337: GO 64663
64339: LD_INT 18
64341: DOUBLE
64342: EQUAL
64343: IFTRUE 64347
64345: GO 64358
64347: POP
// bc_type := b_ext_radar ; 19 :
64348: LD_ADDR_OWVAR 42
64352: PUSH
64353: LD_INT 20
64355: ST_TO_ADDR
64356: GO 64663
64358: LD_INT 19
64360: DOUBLE
64361: EQUAL
64362: IFTRUE 64366
64364: GO 64377
64366: POP
// bc_type := b_ext_radio ; 20 :
64367: LD_ADDR_OWVAR 42
64371: PUSH
64372: LD_INT 22
64374: ST_TO_ADDR
64375: GO 64663
64377: LD_INT 20
64379: DOUBLE
64380: EQUAL
64381: IFTRUE 64385
64383: GO 64396
64385: POP
// bc_type := b_ext_siberium ; 21 :
64386: LD_ADDR_OWVAR 42
64390: PUSH
64391: LD_INT 21
64393: ST_TO_ADDR
64394: GO 64663
64396: LD_INT 21
64398: DOUBLE
64399: EQUAL
64400: IFTRUE 64404
64402: GO 64415
64404: POP
// bc_type := b_ext_computer ; 22 :
64405: LD_ADDR_OWVAR 42
64409: PUSH
64410: LD_INT 24
64412: ST_TO_ADDR
64413: GO 64663
64415: LD_INT 22
64417: DOUBLE
64418: EQUAL
64419: IFTRUE 64423
64421: GO 64434
64423: POP
// bc_type := b_ext_track ; 23 :
64424: LD_ADDR_OWVAR 42
64428: PUSH
64429: LD_INT 16
64431: ST_TO_ADDR
64432: GO 64663
64434: LD_INT 23
64436: DOUBLE
64437: EQUAL
64438: IFTRUE 64442
64440: GO 64453
64442: POP
// bc_type := b_ext_laser ; 24 :
64443: LD_ADDR_OWVAR 42
64447: PUSH
64448: LD_INT 25
64450: ST_TO_ADDR
64451: GO 64663
64453: LD_INT 24
64455: DOUBLE
64456: EQUAL
64457: IFTRUE 64461
64459: GO 64472
64461: POP
// bc_type := b_control_tower ; 25 :
64462: LD_ADDR_OWVAR 42
64466: PUSH
64467: LD_INT 36
64469: ST_TO_ADDR
64470: GO 64663
64472: LD_INT 25
64474: DOUBLE
64475: EQUAL
64476: IFTRUE 64480
64478: GO 64491
64480: POP
// bc_type := b_breastwork ; 26 :
64481: LD_ADDR_OWVAR 42
64485: PUSH
64486: LD_INT 31
64488: ST_TO_ADDR
64489: GO 64663
64491: LD_INT 26
64493: DOUBLE
64494: EQUAL
64495: IFTRUE 64499
64497: GO 64510
64499: POP
// bc_type := b_bunker ; 27 :
64500: LD_ADDR_OWVAR 42
64504: PUSH
64505: LD_INT 32
64507: ST_TO_ADDR
64508: GO 64663
64510: LD_INT 27
64512: DOUBLE
64513: EQUAL
64514: IFTRUE 64518
64516: GO 64529
64518: POP
// bc_type := b_turret ; 28 :
64519: LD_ADDR_OWVAR 42
64523: PUSH
64524: LD_INT 33
64526: ST_TO_ADDR
64527: GO 64663
64529: LD_INT 28
64531: DOUBLE
64532: EQUAL
64533: IFTRUE 64537
64535: GO 64548
64537: POP
// bc_type := b_armoury ; 29 :
64538: LD_ADDR_OWVAR 42
64542: PUSH
64543: LD_INT 4
64545: ST_TO_ADDR
64546: GO 64663
64548: LD_INT 29
64550: DOUBLE
64551: EQUAL
64552: IFTRUE 64556
64554: GO 64567
64556: POP
// bc_type := b_barracks ; 30 :
64557: LD_ADDR_OWVAR 42
64561: PUSH
64562: LD_INT 5
64564: ST_TO_ADDR
64565: GO 64663
64567: LD_INT 30
64569: DOUBLE
64570: EQUAL
64571: IFTRUE 64575
64573: GO 64586
64575: POP
// bc_type := b_solar_power ; 31 :
64576: LD_ADDR_OWVAR 42
64580: PUSH
64581: LD_INT 27
64583: ST_TO_ADDR
64584: GO 64663
64586: LD_INT 31
64588: DOUBLE
64589: EQUAL
64590: IFTRUE 64594
64592: GO 64605
64594: POP
// bc_type := b_oil_power ; 32 :
64595: LD_ADDR_OWVAR 42
64599: PUSH
64600: LD_INT 26
64602: ST_TO_ADDR
64603: GO 64663
64605: LD_INT 32
64607: DOUBLE
64608: EQUAL
64609: IFTRUE 64613
64611: GO 64624
64613: POP
// bc_type := b_siberite_power ; 33 :
64614: LD_ADDR_OWVAR 42
64618: PUSH
64619: LD_INT 28
64621: ST_TO_ADDR
64622: GO 64663
64624: LD_INT 33
64626: DOUBLE
64627: EQUAL
64628: IFTRUE 64632
64630: GO 64643
64632: POP
// bc_type := b_oil_mine ; 34 :
64633: LD_ADDR_OWVAR 42
64637: PUSH
64638: LD_INT 29
64640: ST_TO_ADDR
64641: GO 64663
64643: LD_INT 34
64645: DOUBLE
64646: EQUAL
64647: IFTRUE 64651
64649: GO 64662
64651: POP
// bc_type := b_siberite_mine ; end ;
64652: LD_ADDR_OWVAR 42
64656: PUSH
64657: LD_INT 30
64659: ST_TO_ADDR
64660: GO 64663
64662: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64663: LD_ADDR_VAR 0 8
64667: PUSH
64668: LD_VAR 0 5
64672: PPUSH
64673: LD_VAR 0 6
64677: PPUSH
64678: LD_VAR 0 3
64682: PPUSH
64683: CALL_OW 47
64687: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
64688: LD_OWVAR 42
64692: PUSH
64693: LD_INT 32
64695: PUSH
64696: LD_INT 33
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: IN
64703: IFFALSE 64719
// PlaceWeaponTurret ( b , weapon ) ;
64705: LD_VAR 0 8
64709: PPUSH
64710: LD_VAR 0 4
64714: PPUSH
64715: CALL_OW 431
// end ;
64719: LD_VAR 0 7
64723: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
64724: LD_INT 0
64726: PPUSH
64727: PPUSH
64728: PPUSH
64729: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64730: LD_ADDR_VAR 0 4
64734: PUSH
64735: LD_INT 22
64737: PUSH
64738: LD_OWVAR 2
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 2
64749: PUSH
64750: LD_INT 30
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 30
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: LIST
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PPUSH
64779: CALL_OW 69
64783: ST_TO_ADDR
// if not tmp then
64784: LD_VAR 0 4
64788: NOT
64789: IFFALSE 64793
// exit ;
64791: GO 64852
// for i in tmp do
64793: LD_ADDR_VAR 0 2
64797: PUSH
64798: LD_VAR 0 4
64802: PUSH
64803: FOR_IN
64804: IFFALSE 64850
// for j = 1 to 3 do
64806: LD_ADDR_VAR 0 3
64810: PUSH
64811: DOUBLE
64812: LD_INT 1
64814: DEC
64815: ST_TO_ADDR
64816: LD_INT 3
64818: PUSH
64819: FOR_TO
64820: IFFALSE 64846
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
64822: LD_VAR 0 2
64826: PPUSH
64827: CALL_OW 274
64831: PPUSH
64832: LD_VAR 0 3
64836: PPUSH
64837: LD_INT 99999
64839: PPUSH
64840: CALL_OW 277
64844: GO 64819
64846: POP
64847: POP
64848: GO 64803
64850: POP
64851: POP
// end ;
64852: LD_VAR 0 1
64856: RET
// export function hHackSetLevel10 ; var i , j ; begin
64857: LD_INT 0
64859: PPUSH
64860: PPUSH
64861: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64862: LD_ADDR_VAR 0 2
64866: PUSH
64867: LD_INT 21
64869: PUSH
64870: LD_INT 1
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PPUSH
64877: CALL_OW 69
64881: PUSH
64882: FOR_IN
64883: IFFALSE 64935
// if IsSelected ( i ) then
64885: LD_VAR 0 2
64889: PPUSH
64890: CALL_OW 306
64894: IFFALSE 64933
// begin for j := 1 to 4 do
64896: LD_ADDR_VAR 0 3
64900: PUSH
64901: DOUBLE
64902: LD_INT 1
64904: DEC
64905: ST_TO_ADDR
64906: LD_INT 4
64908: PUSH
64909: FOR_TO
64910: IFFALSE 64931
// SetSkill ( i , j , 10 ) ;
64912: LD_VAR 0 2
64916: PPUSH
64917: LD_VAR 0 3
64921: PPUSH
64922: LD_INT 10
64924: PPUSH
64925: CALL_OW 237
64929: GO 64909
64931: POP
64932: POP
// end ;
64933: GO 64882
64935: POP
64936: POP
// end ;
64937: LD_VAR 0 1
64941: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
64942: LD_INT 0
64944: PPUSH
64945: PPUSH
64946: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
64947: LD_ADDR_VAR 0 2
64951: PUSH
64952: LD_INT 22
64954: PUSH
64955: LD_OWVAR 2
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 21
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PPUSH
64978: CALL_OW 69
64982: PUSH
64983: FOR_IN
64984: IFFALSE 65025
// begin for j := 1 to 4 do
64986: LD_ADDR_VAR 0 3
64990: PUSH
64991: DOUBLE
64992: LD_INT 1
64994: DEC
64995: ST_TO_ADDR
64996: LD_INT 4
64998: PUSH
64999: FOR_TO
65000: IFFALSE 65021
// SetSkill ( i , j , 10 ) ;
65002: LD_VAR 0 2
65006: PPUSH
65007: LD_VAR 0 3
65011: PPUSH
65012: LD_INT 10
65014: PPUSH
65015: CALL_OW 237
65019: GO 64999
65021: POP
65022: POP
// end ;
65023: GO 64983
65025: POP
65026: POP
// end ;
65027: LD_VAR 0 1
65031: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65032: LD_INT 0
65034: PPUSH
// uc_side := your_side ;
65035: LD_ADDR_OWVAR 20
65039: PUSH
65040: LD_OWVAR 2
65044: ST_TO_ADDR
// uc_nation := nation ;
65045: LD_ADDR_OWVAR 21
65049: PUSH
65050: LD_VAR 0 1
65054: ST_TO_ADDR
// InitHc ;
65055: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65059: LD_INT 0
65061: PPUSH
65062: LD_VAR 0 2
65066: PPUSH
65067: LD_VAR 0 3
65071: PPUSH
65072: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
65076: LD_VAR 0 4
65080: PPUSH
65081: LD_VAR 0 5
65085: PPUSH
65086: CALL_OW 428
65090: PUSH
65091: LD_INT 0
65093: EQUAL
65094: IFFALSE 65118
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
65096: CALL_OW 44
65100: PPUSH
65101: LD_VAR 0 4
65105: PPUSH
65106: LD_VAR 0 5
65110: PPUSH
65111: LD_INT 1
65113: PPUSH
65114: CALL_OW 48
// end ;
65118: LD_VAR 0 6
65122: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
65123: LD_INT 0
65125: PPUSH
65126: PPUSH
// uc_side := your_side ;
65127: LD_ADDR_OWVAR 20
65131: PUSH
65132: LD_OWVAR 2
65136: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
65137: LD_VAR 0 1
65141: PUSH
65142: LD_INT 1
65144: PUSH
65145: LD_INT 2
65147: PUSH
65148: LD_INT 3
65150: PUSH
65151: LD_INT 4
65153: PUSH
65154: LD_INT 5
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: IN
65164: IFFALSE 65176
// uc_nation := nation_american else
65166: LD_ADDR_OWVAR 21
65170: PUSH
65171: LD_INT 1
65173: ST_TO_ADDR
65174: GO 65219
// if chassis in [ 11 , 12 , 13 , 14 ] then
65176: LD_VAR 0 1
65180: PUSH
65181: LD_INT 11
65183: PUSH
65184: LD_INT 12
65186: PUSH
65187: LD_INT 13
65189: PUSH
65190: LD_INT 14
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: IN
65199: IFFALSE 65211
// uc_nation := nation_arabian else
65201: LD_ADDR_OWVAR 21
65205: PUSH
65206: LD_INT 2
65208: ST_TO_ADDR
65209: GO 65219
// uc_nation := nation_russian ;
65211: LD_ADDR_OWVAR 21
65215: PUSH
65216: LD_INT 3
65218: ST_TO_ADDR
// vc_chassis := chassis ;
65219: LD_ADDR_OWVAR 37
65223: PUSH
65224: LD_VAR 0 1
65228: ST_TO_ADDR
// vc_engine := engine ;
65229: LD_ADDR_OWVAR 39
65233: PUSH
65234: LD_VAR 0 2
65238: ST_TO_ADDR
// vc_control := control ;
65239: LD_ADDR_OWVAR 38
65243: PUSH
65244: LD_VAR 0 3
65248: ST_TO_ADDR
// vc_weapon := weapon ;
65249: LD_ADDR_OWVAR 40
65253: PUSH
65254: LD_VAR 0 4
65258: ST_TO_ADDR
// un := CreateVehicle ;
65259: LD_ADDR_VAR 0 8
65263: PUSH
65264: CALL_OW 45
65268: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
65269: LD_VAR 0 8
65273: PPUSH
65274: LD_INT 0
65276: PPUSH
65277: LD_INT 5
65279: PPUSH
65280: CALL_OW 12
65284: PPUSH
65285: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
65289: LD_VAR 0 8
65293: PPUSH
65294: LD_VAR 0 5
65298: PPUSH
65299: LD_VAR 0 6
65303: PPUSH
65304: LD_INT 1
65306: PPUSH
65307: CALL_OW 48
// end ;
65311: LD_VAR 0 7
65315: RET
// export hInvincible ; every 1 do
65316: GO 65318
65318: DISABLE
// hInvincible := [ ] ;
65319: LD_ADDR_EXP 163
65323: PUSH
65324: EMPTY
65325: ST_TO_ADDR
65326: END
// every 10 do var i ;
65327: GO 65329
65329: DISABLE
65330: LD_INT 0
65332: PPUSH
// begin enable ;
65333: ENABLE
// if not hInvincible then
65334: LD_EXP 163
65338: NOT
65339: IFFALSE 65343
// exit ;
65341: GO 65387
// for i in hInvincible do
65343: LD_ADDR_VAR 0 1
65347: PUSH
65348: LD_EXP 163
65352: PUSH
65353: FOR_IN
65354: IFFALSE 65385
// if GetLives ( i ) < 1000 then
65356: LD_VAR 0 1
65360: PPUSH
65361: CALL_OW 256
65365: PUSH
65366: LD_INT 1000
65368: LESS
65369: IFFALSE 65383
// SetLives ( i , 1000 ) ;
65371: LD_VAR 0 1
65375: PPUSH
65376: LD_INT 1000
65378: PPUSH
65379: CALL_OW 234
65383: GO 65353
65385: POP
65386: POP
// end ;
65387: PPOPN 1
65389: END
// export function hHackInvincible ; var i ; begin
65390: LD_INT 0
65392: PPUSH
65393: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65394: LD_ADDR_VAR 0 2
65398: PUSH
65399: LD_INT 2
65401: PUSH
65402: LD_INT 21
65404: PUSH
65405: LD_INT 1
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 21
65414: PUSH
65415: LD_INT 2
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: PPUSH
65427: CALL_OW 69
65431: PUSH
65432: FOR_IN
65433: IFFALSE 65494
// if IsSelected ( i ) then
65435: LD_VAR 0 2
65439: PPUSH
65440: CALL_OW 306
65444: IFFALSE 65492
// begin if i in hInvincible then
65446: LD_VAR 0 2
65450: PUSH
65451: LD_EXP 163
65455: IN
65456: IFFALSE 65476
// hInvincible := hInvincible diff i else
65458: LD_ADDR_EXP 163
65462: PUSH
65463: LD_EXP 163
65467: PUSH
65468: LD_VAR 0 2
65472: DIFF
65473: ST_TO_ADDR
65474: GO 65492
// hInvincible := hInvincible union i ;
65476: LD_ADDR_EXP 163
65480: PUSH
65481: LD_EXP 163
65485: PUSH
65486: LD_VAR 0 2
65490: UNION
65491: ST_TO_ADDR
// end ;
65492: GO 65432
65494: POP
65495: POP
// end ;
65496: LD_VAR 0 1
65500: RET
// export function hHackInvisible ; var i , j ; begin
65501: LD_INT 0
65503: PPUSH
65504: PPUSH
65505: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65506: LD_ADDR_VAR 0 2
65510: PUSH
65511: LD_INT 21
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PPUSH
65521: CALL_OW 69
65525: PUSH
65526: FOR_IN
65527: IFFALSE 65551
// if IsSelected ( i ) then
65529: LD_VAR 0 2
65533: PPUSH
65534: CALL_OW 306
65538: IFFALSE 65549
// ComForceInvisible ( i ) ;
65540: LD_VAR 0 2
65544: PPUSH
65545: CALL_OW 496
65549: GO 65526
65551: POP
65552: POP
// end ;
65553: LD_VAR 0 1
65557: RET
// export function hHackChangeYourSide ; begin
65558: LD_INT 0
65560: PPUSH
// if your_side = 8 then
65561: LD_OWVAR 2
65565: PUSH
65566: LD_INT 8
65568: EQUAL
65569: IFFALSE 65581
// your_side := 0 else
65571: LD_ADDR_OWVAR 2
65575: PUSH
65576: LD_INT 0
65578: ST_TO_ADDR
65579: GO 65595
// your_side := your_side + 1 ;
65581: LD_ADDR_OWVAR 2
65585: PUSH
65586: LD_OWVAR 2
65590: PUSH
65591: LD_INT 1
65593: PLUS
65594: ST_TO_ADDR
// end ;
65595: LD_VAR 0 1
65599: RET
// export function hHackChangeUnitSide ; var i , j ; begin
65600: LD_INT 0
65602: PPUSH
65603: PPUSH
65604: PPUSH
// for i in all_units do
65605: LD_ADDR_VAR 0 2
65609: PUSH
65610: LD_OWVAR 3
65614: PUSH
65615: FOR_IN
65616: IFFALSE 65694
// if IsSelected ( i ) then
65618: LD_VAR 0 2
65622: PPUSH
65623: CALL_OW 306
65627: IFFALSE 65692
// begin j := GetSide ( i ) ;
65629: LD_ADDR_VAR 0 3
65633: PUSH
65634: LD_VAR 0 2
65638: PPUSH
65639: CALL_OW 255
65643: ST_TO_ADDR
// if j = 8 then
65644: LD_VAR 0 3
65648: PUSH
65649: LD_INT 8
65651: EQUAL
65652: IFFALSE 65664
// j := 0 else
65654: LD_ADDR_VAR 0 3
65658: PUSH
65659: LD_INT 0
65661: ST_TO_ADDR
65662: GO 65678
// j := j + 1 ;
65664: LD_ADDR_VAR 0 3
65668: PUSH
65669: LD_VAR 0 3
65673: PUSH
65674: LD_INT 1
65676: PLUS
65677: ST_TO_ADDR
// SetSide ( i , j ) ;
65678: LD_VAR 0 2
65682: PPUSH
65683: LD_VAR 0 3
65687: PPUSH
65688: CALL_OW 235
// end ;
65692: GO 65615
65694: POP
65695: POP
// end ;
65696: LD_VAR 0 1
65700: RET
// export function hHackFog ; begin
65701: LD_INT 0
65703: PPUSH
// FogOff ( true ) ;
65704: LD_INT 1
65706: PPUSH
65707: CALL_OW 344
// end ;
65711: LD_VAR 0 1
65715: RET
// export function hHackTeleport ( unit , x , y ) ; begin
65716: LD_INT 0
65718: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
65719: LD_VAR 0 1
65723: PPUSH
65724: LD_VAR 0 2
65728: PPUSH
65729: LD_VAR 0 3
65733: PPUSH
65734: LD_INT 1
65736: PPUSH
65737: LD_INT 1
65739: PPUSH
65740: CALL_OW 483
// CenterOnXY ( x , y ) ;
65744: LD_VAR 0 2
65748: PPUSH
65749: LD_VAR 0 3
65753: PPUSH
65754: CALL_OW 84
// end ;
65758: LD_VAR 0 4
65762: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65763: LD_INT 0
65765: PPUSH
65766: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65767: LD_VAR 0 1
65771: NOT
65772: PUSH
65773: LD_VAR 0 2
65777: PPUSH
65778: LD_VAR 0 3
65782: PPUSH
65783: CALL_OW 488
65787: NOT
65788: OR
65789: PUSH
65790: LD_VAR 0 1
65794: PPUSH
65795: CALL_OW 266
65799: PUSH
65800: LD_INT 3
65802: NONEQUAL
65803: PUSH
65804: LD_VAR 0 1
65808: PPUSH
65809: CALL_OW 247
65813: PUSH
65814: LD_INT 1
65816: EQUAL
65817: NOT
65818: AND
65819: OR
65820: IFFALSE 65824
// exit ;
65822: GO 65973
// if GetType ( factory ) = unit_human then
65824: LD_VAR 0 1
65828: PPUSH
65829: CALL_OW 247
65833: PUSH
65834: LD_INT 1
65836: EQUAL
65837: IFFALSE 65854
// factory := IsInUnit ( factory ) ;
65839: LD_ADDR_VAR 0 1
65843: PUSH
65844: LD_VAR 0 1
65848: PPUSH
65849: CALL_OW 310
65853: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65854: LD_VAR 0 1
65858: PPUSH
65859: CALL_OW 266
65863: PUSH
65864: LD_INT 3
65866: NONEQUAL
65867: IFFALSE 65871
// exit ;
65869: GO 65973
// if HexInfo ( x , y ) = factory then
65871: LD_VAR 0 2
65875: PPUSH
65876: LD_VAR 0 3
65880: PPUSH
65881: CALL_OW 428
65885: PUSH
65886: LD_VAR 0 1
65890: EQUAL
65891: IFFALSE 65918
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
65893: LD_ADDR_EXP 164
65897: PUSH
65898: LD_EXP 164
65902: PPUSH
65903: LD_VAR 0 1
65907: PPUSH
65908: LD_INT 0
65910: PPUSH
65911: CALL_OW 1
65915: ST_TO_ADDR
65916: GO 65969
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
65918: LD_ADDR_EXP 164
65922: PUSH
65923: LD_EXP 164
65927: PPUSH
65928: LD_VAR 0 1
65932: PPUSH
65933: LD_VAR 0 1
65937: PPUSH
65938: CALL_OW 255
65942: PUSH
65943: LD_VAR 0 1
65947: PUSH
65948: LD_VAR 0 2
65952: PUSH
65953: LD_VAR 0 3
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: PPUSH
65964: CALL_OW 1
65968: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65969: CALL 65978 0 0
// end ;
65973: LD_VAR 0 4
65977: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
65978: LD_INT 0
65980: PPUSH
65981: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65982: LD_STRING resetFactoryWaypoint();
65984: PPUSH
65985: CALL_OW 559
// if factoryWaypoints then
65989: LD_EXP 164
65993: IFFALSE 66116
// begin for i := 1 to factoryWaypoints do
65995: LD_ADDR_VAR 0 2
65999: PUSH
66000: DOUBLE
66001: LD_INT 1
66003: DEC
66004: ST_TO_ADDR
66005: LD_EXP 164
66009: PUSH
66010: FOR_TO
66011: IFFALSE 66114
// if factoryWaypoints [ i ] then
66013: LD_EXP 164
66017: PUSH
66018: LD_VAR 0 2
66022: ARRAY
66023: IFFALSE 66112
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
66025: LD_STRING setFactoryWaypointXY(
66027: PUSH
66028: LD_EXP 164
66032: PUSH
66033: LD_VAR 0 2
66037: ARRAY
66038: PUSH
66039: LD_INT 1
66041: ARRAY
66042: STR
66043: PUSH
66044: LD_STRING ,
66046: STR
66047: PUSH
66048: LD_EXP 164
66052: PUSH
66053: LD_VAR 0 2
66057: ARRAY
66058: PUSH
66059: LD_INT 2
66061: ARRAY
66062: STR
66063: PUSH
66064: LD_STRING ,
66066: STR
66067: PUSH
66068: LD_EXP 164
66072: PUSH
66073: LD_VAR 0 2
66077: ARRAY
66078: PUSH
66079: LD_INT 3
66081: ARRAY
66082: STR
66083: PUSH
66084: LD_STRING ,
66086: STR
66087: PUSH
66088: LD_EXP 164
66092: PUSH
66093: LD_VAR 0 2
66097: ARRAY
66098: PUSH
66099: LD_INT 4
66101: ARRAY
66102: STR
66103: PUSH
66104: LD_STRING )
66106: STR
66107: PPUSH
66108: CALL_OW 559
66112: GO 66010
66114: POP
66115: POP
// end ; end ;
66116: LD_VAR 0 1
66120: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarhouseGatheringPoint ( warehouse , x , y ) ; begin
66121: LD_INT 0
66123: PPUSH
// if HexInfo ( x , y ) = warehouse then
66124: LD_VAR 0 2
66128: PPUSH
66129: LD_VAR 0 3
66133: PPUSH
66134: CALL_OW 428
66138: PUSH
66139: LD_VAR 0 1
66143: EQUAL
66144: IFFALSE 66171
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66146: LD_ADDR_EXP 165
66150: PUSH
66151: LD_EXP 165
66155: PPUSH
66156: LD_VAR 0 1
66160: PPUSH
66161: LD_INT 0
66163: PPUSH
66164: CALL_OW 1
66168: ST_TO_ADDR
66169: GO 66222
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66171: LD_ADDR_EXP 165
66175: PUSH
66176: LD_EXP 165
66180: PPUSH
66181: LD_VAR 0 1
66185: PPUSH
66186: LD_VAR 0 1
66190: PPUSH
66191: CALL_OW 255
66195: PUSH
66196: LD_VAR 0 1
66200: PUSH
66201: LD_VAR 0 2
66205: PUSH
66206: LD_VAR 0 3
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: PPUSH
66217: CALL_OW 1
66221: ST_TO_ADDR
// UpdateWarhouseGatheringPoints ;
66222: CALL 66231 0 0
// end ;
66226: LD_VAR 0 4
66230: RET
// export function UpdateWarhouseGatheringPoints ( ) ; var i ; begin
66231: LD_INT 0
66233: PPUSH
66234: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66235: LD_STRING resetWarehouseGatheringPoints();
66237: PPUSH
66238: CALL_OW 559
// if warehouseGatheringPoints then
66242: LD_EXP 165
66246: IFFALSE 66369
// begin for i := 1 to warehouseGatheringPoints do
66248: LD_ADDR_VAR 0 2
66252: PUSH
66253: DOUBLE
66254: LD_INT 1
66256: DEC
66257: ST_TO_ADDR
66258: LD_EXP 165
66262: PUSH
66263: FOR_TO
66264: IFFALSE 66367
// if warehouseGatheringPoints [ i ] then
66266: LD_EXP 165
66270: PUSH
66271: LD_VAR 0 2
66275: ARRAY
66276: IFFALSE 66365
// ToLua ( setWarhouseGatheringPointXY( & warehouseGatheringPoints [ i ] [ 1 ] & , & warehouseGatheringPoints [ i ] [ 2 ] & , & warehouseGatheringPoints [ i ] [ 3 ] & , & warehouseGatheringPoints [ i ] [ 4 ] & ) ) ;
66278: LD_STRING setWarhouseGatheringPointXY(
66280: PUSH
66281: LD_EXP 165
66285: PUSH
66286: LD_VAR 0 2
66290: ARRAY
66291: PUSH
66292: LD_INT 1
66294: ARRAY
66295: STR
66296: PUSH
66297: LD_STRING ,
66299: STR
66300: PUSH
66301: LD_EXP 165
66305: PUSH
66306: LD_VAR 0 2
66310: ARRAY
66311: PUSH
66312: LD_INT 2
66314: ARRAY
66315: STR
66316: PUSH
66317: LD_STRING ,
66319: STR
66320: PUSH
66321: LD_EXP 165
66325: PUSH
66326: LD_VAR 0 2
66330: ARRAY
66331: PUSH
66332: LD_INT 3
66334: ARRAY
66335: STR
66336: PUSH
66337: LD_STRING ,
66339: STR
66340: PUSH
66341: LD_EXP 165
66345: PUSH
66346: LD_VAR 0 2
66350: ARRAY
66351: PUSH
66352: LD_INT 4
66354: ARRAY
66355: STR
66356: PUSH
66357: LD_STRING )
66359: STR
66360: PPUSH
66361: CALL_OW 559
66365: GO 66263
66367: POP
66368: POP
// end ; end ;
66369: LD_VAR 0 1
66373: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
66374: LD_EXP 165
66378: IFFALSE 67007
66380: GO 66382
66382: DISABLE
66383: LD_INT 0
66385: PPUSH
66386: PPUSH
66387: PPUSH
66388: PPUSH
66389: PPUSH
66390: PPUSH
66391: PPUSH
66392: PPUSH
66393: PPUSH
// begin enable ;
66394: ENABLE
// list := warehouseGatheringPoints diff 0 ;
66395: LD_ADDR_VAR 0 3
66399: PUSH
66400: LD_EXP 165
66404: PUSH
66405: LD_INT 0
66407: DIFF
66408: ST_TO_ADDR
// for i := 1 to list do
66409: LD_ADDR_VAR 0 1
66413: PUSH
66414: DOUBLE
66415: LD_INT 1
66417: DEC
66418: ST_TO_ADDR
66419: LD_VAR 0 3
66423: PUSH
66424: FOR_TO
66425: IFFALSE 67005
// begin if not list [ i ] then
66427: LD_VAR 0 3
66431: PUSH
66432: LD_VAR 0 1
66436: ARRAY
66437: NOT
66438: IFFALSE 66442
// continue ;
66440: GO 66424
// depot := list [ i ] [ 2 ] ;
66442: LD_ADDR_VAR 0 8
66446: PUSH
66447: LD_VAR 0 3
66451: PUSH
66452: LD_VAR 0 1
66456: ARRAY
66457: PUSH
66458: LD_INT 2
66460: ARRAY
66461: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
66462: LD_ADDR_VAR 0 5
66466: PUSH
66467: LD_VAR 0 3
66471: PUSH
66472: LD_VAR 0 1
66476: ARRAY
66477: PUSH
66478: LD_INT 1
66480: ARRAY
66481: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
66482: LD_VAR 0 8
66486: PPUSH
66487: CALL_OW 301
66491: PUSH
66492: LD_VAR 0 5
66496: PUSH
66497: LD_VAR 0 8
66501: PPUSH
66502: CALL_OW 255
66506: NONEQUAL
66507: OR
66508: IFFALSE 66537
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
66510: LD_ADDR_EXP 165
66514: PUSH
66515: LD_EXP 165
66519: PPUSH
66520: LD_VAR 0 8
66524: PPUSH
66525: LD_INT 0
66527: PPUSH
66528: CALL_OW 1
66532: ST_TO_ADDR
// exit ;
66533: POP
66534: POP
66535: GO 67007
// end ; x := list [ i ] [ 3 ] ;
66537: LD_ADDR_VAR 0 6
66541: PUSH
66542: LD_VAR 0 3
66546: PUSH
66547: LD_VAR 0 1
66551: ARRAY
66552: PUSH
66553: LD_INT 3
66555: ARRAY
66556: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
66557: LD_ADDR_VAR 0 7
66561: PUSH
66562: LD_VAR 0 3
66566: PUSH
66567: LD_VAR 0 1
66571: ARRAY
66572: PUSH
66573: LD_INT 4
66575: ARRAY
66576: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
66577: LD_ADDR_VAR 0 9
66581: PUSH
66582: LD_VAR 0 6
66586: PPUSH
66587: LD_VAR 0 7
66591: PPUSH
66592: LD_INT 12
66594: PPUSH
66595: CALL 49849 0 3
66599: ST_TO_ADDR
// if not cratesNearbyPoint then
66600: LD_VAR 0 9
66604: NOT
66605: IFFALSE 66611
// exit ;
66607: POP
66608: POP
66609: GO 67007
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
66611: LD_ADDR_VAR 0 4
66615: PUSH
66616: LD_INT 22
66618: PUSH
66619: LD_VAR 0 5
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 3
66630: PUSH
66631: LD_INT 60
66633: PUSH
66634: EMPTY
66635: LIST
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: LD_INT 2
66643: PUSH
66644: LD_INT 25
66646: PUSH
66647: LD_INT 2
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 25
66656: PUSH
66657: LD_INT 16
66659: PUSH
66660: EMPTY
66661: LIST
66662: LIST
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: LIST
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: LIST
66673: PPUSH
66674: CALL_OW 69
66678: PUSH
66679: LD_VAR 0 8
66683: PPUSH
66684: CALL_OW 313
66688: PPUSH
66689: LD_INT 3
66691: PUSH
66692: LD_INT 60
66694: PUSH
66695: EMPTY
66696: LIST
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PUSH
66702: LD_INT 2
66704: PUSH
66705: LD_INT 25
66707: PUSH
66708: LD_INT 2
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 25
66717: PUSH
66718: LD_INT 16
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: LIST
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PPUSH
66734: CALL_OW 72
66738: UNION
66739: ST_TO_ADDR
// if tmp then
66740: LD_VAR 0 4
66744: IFFALSE 66824
// begin tmp := ShrinkArray ( tmp , 3 ) ;
66746: LD_ADDR_VAR 0 4
66750: PUSH
66751: LD_VAR 0 4
66755: PPUSH
66756: LD_INT 3
66758: PPUSH
66759: CALL 47816 0 2
66763: ST_TO_ADDR
// for j in tmp do
66764: LD_ADDR_VAR 0 2
66768: PUSH
66769: LD_VAR 0 4
66773: PUSH
66774: FOR_IN
66775: IFFALSE 66818
// begin if IsInUnit ( j ) then
66777: LD_VAR 0 2
66781: PPUSH
66782: CALL_OW 310
66786: IFFALSE 66797
// ComExit ( j ) ;
66788: LD_VAR 0 2
66792: PPUSH
66793: CALL 47899 0 1
// AddComCollect ( j , x , y ) ;
66797: LD_VAR 0 2
66801: PPUSH
66802: LD_VAR 0 6
66806: PPUSH
66807: LD_VAR 0 7
66811: PPUSH
66812: CALL_OW 177
// end ;
66816: GO 66774
66818: POP
66819: POP
// exit ;
66820: POP
66821: POP
66822: GO 67007
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
66824: LD_ADDR_VAR 0 4
66828: PUSH
66829: LD_INT 22
66831: PUSH
66832: LD_VAR 0 5
66836: PUSH
66837: EMPTY
66838: LIST
66839: LIST
66840: PUSH
66841: LD_INT 2
66843: PUSH
66844: LD_INT 34
66846: PUSH
66847: LD_INT 12
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: LD_INT 34
66856: PUSH
66857: LD_INT 51
66859: PUSH
66860: EMPTY
66861: LIST
66862: LIST
66863: PUSH
66864: LD_INT 34
66866: PUSH
66867: LD_INT 32
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 34
66876: PUSH
66877: LD_EXP 88
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PPUSH
66897: CALL_OW 69
66901: ST_TO_ADDR
// if tmp then
66902: LD_VAR 0 4
66906: IFFALSE 67003
// begin for j in tmp do
66908: LD_ADDR_VAR 0 2
66912: PUSH
66913: LD_VAR 0 4
66917: PUSH
66918: FOR_IN
66919: IFFALSE 67001
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
66921: LD_VAR 0 1
66925: PPUSH
66926: CALL_OW 261
66930: PUSH
66931: LD_INT 20
66933: GREATER
66934: PUSH
66935: LD_VAR 0 1
66939: PPUSH
66940: CALL_OW 314
66944: NOT
66945: AND
66946: PUSH
66947: LD_VAR 0 1
66951: PPUSH
66952: CALL_OW 263
66956: PUSH
66957: LD_INT 1
66959: NONEQUAL
66960: PUSH
66961: LD_VAR 0 1
66965: PPUSH
66966: CALL_OW 311
66970: OR
66971: AND
66972: IFFALSE 66999
// begin ComCollect ( j , x , y ) ;
66974: LD_VAR 0 2
66978: PPUSH
66979: LD_VAR 0 6
66983: PPUSH
66984: LD_VAR 0 7
66988: PPUSH
66989: CALL_OW 117
// exit ;
66993: POP
66994: POP
66995: POP
66996: POP
66997: GO 67007
// end ;
66999: GO 66918
67001: POP
67002: POP
// end ; end ;
67003: GO 66424
67005: POP
67006: POP
// end ;
67007: PPOPN 9
67009: END
