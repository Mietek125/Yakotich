// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 36 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Randomize ;
  15: CALL_OW 10
// RandomizeAll ;
  19: CALL_OW 11
// InitRussian ;
  23: CALL 832 0 0
// Action ;
  27: CALL 1730 0 0
// DebugMode ;
  31: CALL 156 0 0
// end ;
  35: END
// export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin ; export Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif ; export MaksimCrew ; export OtherSurvivors ; export AmS , AmSc , AMSS ; export AmCommander ; export Americans ; export pojazdy ; export debug ; export mission_prefix ; export hill_north_trigger , hill_south_trigger , yakotich_in_base , quests_finished , aleksandr_found , attacks_are_finished , american_attack , oil_power_researched , oil_engine_researched , technology1_researched , end_of_the_mission , losses , vehicle_constructed , josif_landed , josif_saved ; function Init ; begin
  36: LD_INT 0
  38: PPUSH
// mission_prefix := 01_ ;
  39: LD_ADDR_EXP 23
  43: PUSH
  44: LD_STRING 01_
  46: ST_TO_ADDR
// yakotich_in_base := false ;
  47: LD_ADDR_EXP 26
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// quests_finished := false ;
  55: LD_ADDR_EXP 27
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// aleksandr_found := false ;
  63: LD_ADDR_EXP 28
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// attacks_are_finished := false ;
  71: LD_ADDR_EXP 29
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// oil_power_researched := false ;
  79: LD_ADDR_EXP 31
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// oil_engine_researched := false ;
  87: LD_ADDR_EXP 32
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// technology1_researched := false ;
  95: LD_ADDR_EXP 33
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// american_attack := false ;
 103: LD_ADDR_EXP 30
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// end_of_the_mission := false ;
 111: LD_ADDR_EXP 34
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// losses := false ;
 119: LD_ADDR_EXP 35
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// vehicle_constructed := false ;
 127: LD_ADDR_EXP 36
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// josif_landed := false ;
 135: LD_ADDR_EXP 37
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// josif_saved := false ;
 143: LD_ADDR_EXP 38
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// end ;
 151: LD_VAR 0 1
 155: RET
// function DebugMode ; var i ; begin
 156: LD_INT 0
 158: PPUSH
 159: PPUSH
// if not debug then
 160: LD_EXP 22
 164: NOT
 165: IFFALSE 169
// exit ;
 167: GO 188
// Difficulty := 3 ;
 169: LD_ADDR_OWVAR 67
 173: PUSH
 174: LD_INT 3
 176: ST_TO_ADDR
// TurnFogOff ( ) ;
 177: CALL_OW 537
// FogOff ( 3 ) ;
 181: LD_INT 3
 183: PPUSH
 184: CALL_OW 344
// end ; end_of_file
 188: LD_VAR 0 1
 192: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 193: LD_INT 0
 195: PPUSH
 196: PPUSH
 197: PPUSH
// uc_side := GetSide ( b ) ;
 198: LD_ADDR_OWVAR 20
 202: PUSH
 203: LD_VAR 0 2
 207: PPUSH
 208: CALL_OW 255
 212: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 213: LD_ADDR_OWVAR 21
 217: PUSH
 218: LD_VAR 0 2
 222: PPUSH
 223: CALL_OW 248
 227: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 228: LD_ADDR_VAR 0 5
 232: PUSH
 233: LD_VAR 0 2
 237: PPUSH
 238: CALL_OW 254
 242: PUSH
 243: LD_INT 3
 245: MINUS
 246: ST_TO_ADDR
// if dir < 0 then
 247: LD_VAR 0 5
 251: PUSH
 252: LD_INT 0
 254: LESS
 255: IFFALSE 271
// dir := 6 + dir ;
 257: LD_ADDR_VAR 0 5
 261: PUSH
 262: LD_INT 6
 264: PUSH
 265: LD_VAR 0 5
 269: PLUS
 270: ST_TO_ADDR
// un := CreateHuman ;
 271: LD_ADDR_VAR 0 4
 275: PUSH
 276: CALL_OW 44
 280: ST_TO_ADDR
// SetDir ( un , dir ) ;
 281: LD_VAR 0 4
 285: PPUSH
 286: LD_VAR 0 5
 290: PPUSH
 291: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 295: LD_VAR 0 4
 299: PPUSH
 300: LD_VAR 0 2
 304: PPUSH
 305: CALL_OW 52
// end ;
 309: LD_VAR 0 3
 313: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 314: LD_INT 0
 316: PPUSH
 317: PPUSH
// if exist_mode then
 318: LD_VAR 0 2
 322: IFFALSE 347
// unit := CreateCharacter ( prefix & ident ) else
 324: LD_ADDR_VAR 0 5
 328: PUSH
 329: LD_VAR 0 3
 333: PUSH
 334: LD_VAR 0 1
 338: STR
 339: PPUSH
 340: CALL_OW 34
 344: ST_TO_ADDR
 345: GO 362
// unit := NewCharacter ( ident ) ;
 347: LD_ADDR_VAR 0 5
 351: PUSH
 352: LD_VAR 0 1
 356: PPUSH
 357: CALL_OW 25
 361: ST_TO_ADDR
// result := unit ;
 362: LD_ADDR_VAR 0 4
 366: PUSH
 367: LD_VAR 0 5
 371: ST_TO_ADDR
// end ;
 372: LD_VAR 0 4
 376: RET
// export function GetCountOfBuildingsInBase ( base , btype ) ; var i , tmp ; begin
 377: LD_INT 0
 379: PPUSH
 380: PPUSH
 381: PPUSH
// result := 0 ;
 382: LD_ADDR_VAR 0 3
 386: PUSH
 387: LD_INT 0
 389: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_btype , btype ] ) ;
 390: LD_ADDR_VAR 0 5
 394: PUSH
 395: LD_INT 30
 397: PUSH
 398: LD_VAR 0 2
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: ST_TO_ADDR
// if not base or not tmp then
 412: LD_VAR 0 1
 416: NOT
 417: PUSH
 418: LD_VAR 0 5
 422: NOT
 423: OR
 424: IFFALSE 428
// exit ;
 426: GO 476
// for i in tmp do
 428: LD_ADDR_VAR 0 4
 432: PUSH
 433: LD_VAR 0 5
 437: PUSH
 438: FOR_IN
 439: IFFALSE 474
// if GetBase ( i ) = base then
 441: LD_VAR 0 4
 445: PPUSH
 446: CALL_OW 274
 450: PUSH
 451: LD_VAR 0 1
 455: EQUAL
 456: IFFALSE 472
// result := result + 1 ;
 458: LD_ADDR_VAR 0 3
 462: PUSH
 463: LD_VAR 0 3
 467: PUSH
 468: LD_INT 1
 470: PLUS
 471: ST_TO_ADDR
 472: GO 438
 474: POP
 475: POP
// end ;
 476: LD_VAR 0 3
 480: RET
// every 1 trigger IsSelected ( Artur ) do
 481: LD_INT 74
 483: PPUSH
 484: CALL_OW 306
 488: IFFALSE 585
 490: GO 492
 492: DISABLE
// begin PezetExp ( [ 1 , 2 , 3 , 4 ] ) ;
 493: LD_INT 1
 495: PUSH
 496: LD_INT 2
 498: PUSH
 499: LD_INT 3
 501: PUSH
 502: LD_INT 4
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: PPUSH
 511: CALL 586 0 1
// Wait ( 0 0$05 ) ;
 515: LD_INT 175
 517: PPUSH
 518: CALL_OW 67
// Say ( Artur , 1Pezet-Sikret ) ;
 522: LD_INT 74
 524: PPUSH
 525: LD_STRING 1Pezet-Sikret
 527: PPUSH
 528: CALL_OW 88
// TeleportUnit ( Artur , 139 , 74 , 120 , true ) ;
 532: LD_INT 74
 534: PPUSH
 535: LD_INT 139
 537: PPUSH
 538: LD_INT 74
 540: PPUSH
 541: LD_INT 120
 543: PPUSH
 544: LD_INT 1
 546: PPUSH
 547: CALL_OW 483
// Wait ( 0 0$05 ) ;
 551: LD_INT 175
 553: PPUSH
 554: CALL_OW 67
// RemoveUnit ( Artur ) ;
 558: LD_INT 74
 560: PPUSH
 561: CALL_OW 64
// SaveVariable ( 1 , PezetSaved ) ;
 565: LD_INT 1
 567: PPUSH
 568: LD_STRING PezetSaved
 570: PPUSH
 571: CALL_OW 39
// SaveCharacters ( Artur , Pezet ) ;
 575: LD_INT 74
 577: PPUSH
 578: LD_STRING Pezet
 580: PPUSH
 581: CALL_OW 38
// end ;
 585: END
// export function PezetExp ( q ) ; var dec , q1 ; begin
 586: LD_INT 0
 588: PPUSH
 589: PPUSH
 590: PPUSH
// dec = SelectiveQuery ( PezetQuery , q ) ;
 591: LD_ADDR_VAR 0 3
 595: PUSH
 596: LD_STRING PezetQuery
 598: PPUSH
 599: LD_VAR 0 1
 603: PPUSH
 604: CALL_OW 98
 608: ST_TO_ADDR
// case dec of 1 :
 609: LD_VAR 0 3
 613: PUSH
 614: LD_INT 1
 616: DOUBLE
 617: EQUAL
 618: IFTRUE 622
 620: GO 640
 622: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 500 ) ;
 623: LD_EXP 1
 627: PPUSH
 628: LD_INT 1
 630: PPUSH
 631: LD_INT 500
 633: PPUSH
 634: CALL_OW 591
// end ; 2 :
 638: GO 719
 640: LD_INT 2
 642: DOUBLE
 643: EQUAL
 644: IFTRUE 648
 646: GO 666
 648: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 500 ) ;
 649: LD_EXP 1
 653: PPUSH
 654: LD_INT 2
 656: PPUSH
 657: LD_INT 500
 659: PPUSH
 660: CALL_OW 591
// end ; 3 :
 664: GO 719
 666: LD_INT 3
 668: DOUBLE
 669: EQUAL
 670: IFTRUE 674
 672: GO 692
 674: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 500 ) ;
 675: LD_EXP 1
 679: PPUSH
 680: LD_INT 3
 682: PPUSH
 683: LD_INT 500
 685: PPUSH
 686: CALL_OW 591
// end ; 4 :
 690: GO 719
 692: LD_INT 4
 694: DOUBLE
 695: EQUAL
 696: IFTRUE 700
 698: GO 718
 700: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 500 ) ;
 701: LD_EXP 1
 705: PPUSH
 706: LD_INT 4
 708: PPUSH
 709: LD_INT 500
 711: PPUSH
 712: CALL_OW 591
// end ; end ;
 716: GO 719
 718: POP
// end ;
 719: LD_VAR 0 2
 723: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
 724: LD_EXP 1
 728: PPUSH
 729: CALL_OW 301
 733: IFFALSE 745
 735: GO 737
 737: DISABLE
// begin YouLost ( YakotichDead ) ;
 738: LD_STRING YakotichDead
 740: PPUSH
 741: CALL_OW 104
// end ;
 745: END
// every 0 0$1 trigger IsDead ( Mietek ) do
 746: LD_EXP 2
 750: PPUSH
 751: CALL_OW 301
 755: IFFALSE 767
 757: GO 759
 759: DISABLE
// begin YouLost ( MietekDead ) ;
 760: LD_STRING MietekDead
 762: PPUSH
 763: CALL_OW 104
// end ;
 767: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
 768: LD_VAR 0 1
 772: PUSH
 773: LD_INT 22
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: LD_INT 23
 788: PUSH
 789: LD_INT 0
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: PUSH
 796: EMPTY
 797: LIST
 798: LIST
 799: PUSH
 800: LD_INT 21
 802: PUSH
 803: LD_INT 1
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: LIST
 814: PPUSH
 815: CALL_OW 69
 819: IN
 820: IFFALSE 829
// YouLost ( PeopleDead ) ;
 822: LD_STRING PeopleDead
 824: PPUSH
 825: CALL_OW 104
// end ; end_of_file
 829: PPOPN 1
 831: END
// export function InitRussian ; begin
 832: LD_INT 0
 834: PPUSH
// Uc_Nation := 3 ;
 835: LD_ADDR_OWVAR 21
 839: PUSH
 840: LD_INT 3
 842: ST_TO_ADDR
// Uc_Side := 3 ;
 843: LD_ADDR_OWVAR 20
 847: PUSH
 848: LD_INT 3
 850: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , false ,  ) ;
 851: LD_ADDR_EXP 1
 855: PUSH
 856: LD_STRING Yakotich
 858: PPUSH
 859: LD_INT 0
 861: PPUSH
 862: LD_STRING 
 864: PPUSH
 865: CALL 314 0 3
 869: ST_TO_ADDR
// Uc_Side := 6 ;
 870: LD_ADDR_OWVAR 20
 874: PUSH
 875: LD_INT 6
 877: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , false ,  ) ;
 878: LD_ADDR_EXP 2
 882: PUSH
 883: LD_STRING Mietek
 885: PPUSH
 886: LD_INT 0
 888: PPUSH
 889: LD_STRING 
 891: PPUSH
 892: CALL 314 0 3
 896: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , false ,  ) ;
 897: LD_ADDR_EXP 3
 901: PUSH
 902: LD_STRING Boris
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: LD_STRING 
 910: PPUSH
 911: CALL 314 0 3
 915: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , false ,  ) ;
 916: LD_ADDR_EXP 5
 920: PUSH
 921: LD_STRING Michail
 923: PPUSH
 924: LD_INT 0
 926: PPUSH
 927: LD_STRING 
 929: PPUSH
 930: CALL 314 0 3
 934: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , false ,  ) ;
 935: LD_ADDR_EXP 4
 939: PUSH
 940: LD_STRING Vasilij
 942: PPUSH
 943: LD_INT 0
 945: PPUSH
 946: LD_STRING 
 948: PPUSH
 949: CALL 314 0 3
 953: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , false ,  ) ;
 954: LD_ADDR_EXP 6
 958: PUSH
 959: LD_STRING Constantin
 961: PPUSH
 962: LD_INT 0
 964: PPUSH
 965: LD_STRING 
 967: PPUSH
 968: CALL 314 0 3
 972: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , false ,  ) ;
 973: LD_ADDR_EXP 7
 977: PUSH
 978: LD_STRING Maksim
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: LD_STRING 
 986: PPUSH
 987: CALL 314 0 3
 991: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , false ,  ) ;
 992: LD_ADDR_EXP 8
 996: PUSH
 997: LD_STRING Fiodor
 999: PPUSH
1000: LD_INT 0
1002: PPUSH
1003: LD_STRING 
1005: PPUSH
1006: CALL 314 0 3
1010: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , false ,  ) ;
1011: LD_ADDR_EXP 11
1015: PUSH
1016: LD_STRING Aleksiej
1018: PPUSH
1019: LD_INT 0
1021: PPUSH
1022: LD_STRING 
1024: PPUSH
1025: CALL 314 0 3
1029: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , false ,  ) ;
1030: LD_ADDR_EXP 9
1034: PUSH
1035: LD_STRING Pavel
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: LD_STRING 
1043: PPUSH
1044: CALL 314 0 3
1048: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , false ,  ) ;
1049: LD_ADDR_EXP 10
1053: PUSH
1054: LD_STRING Zakhar
1056: PPUSH
1057: LD_INT 0
1059: PPUSH
1060: LD_STRING 
1062: PPUSH
1063: CALL 314 0 3
1067: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Maksim ;
1068: LD_ADDR_EXP 14
1072: PUSH
1073: LD_EXP 14
1077: PUSH
1078: LD_EXP 7
1082: ADD
1083: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Fiodor ;
1084: LD_ADDR_EXP 14
1088: PUSH
1089: LD_EXP 14
1093: PUSH
1094: LD_EXP 8
1098: ADD
1099: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Aleksiej ;
1100: LD_ADDR_EXP 14
1104: PUSH
1105: LD_EXP 14
1109: PUSH
1110: LD_EXP 11
1114: ADD
1115: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Pavel ;
1116: LD_ADDR_EXP 14
1120: PUSH
1121: LD_EXP 14
1125: PUSH
1126: LD_EXP 9
1130: ADD
1131: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Zakhar ;
1132: LD_ADDR_EXP 14
1136: PUSH
1137: LD_EXP 14
1141: PUSH
1142: LD_EXP 10
1146: ADD
1147: ST_TO_ADDR
// Uc_Side := 5 ;
1148: LD_ADDR_OWVAR 20
1152: PUSH
1153: LD_INT 5
1155: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , false ,  ) ;
1156: LD_ADDR_EXP 12
1160: PUSH
1161: LD_STRING Aleksandr
1163: PPUSH
1164: LD_INT 0
1166: PPUSH
1167: LD_STRING 
1169: PPUSH
1170: CALL 314 0 3
1174: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false ,  ) ;
1175: LD_ADDR_EXP 13
1179: PUSH
1180: LD_STRING Josif
1182: PPUSH
1183: LD_INT 0
1185: PPUSH
1186: LD_STRING 
1188: PPUSH
1189: CALL 314 0 3
1193: ST_TO_ADDR
// PlaceHumanInUnit ( Constantin , RuB3 ) ;
1194: LD_EXP 6
1198: PPUSH
1199: LD_INT 90
1201: PPUSH
1202: CALL_OW 52
// PlaceHumanInUnit ( Boris , RuDep ) ;
1206: LD_EXP 3
1210: PPUSH
1211: LD_INT 15
1213: PPUSH
1214: CALL_OW 52
// PlaceUnitArea ( Vasilij , Civilians , false ) ;
1218: LD_EXP 4
1222: PPUSH
1223: LD_INT 1
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// PlaceUnitArea ( Michail , Civilians , false ) ;
1233: LD_EXP 5
1237: PPUSH
1238: LD_INT 1
1240: PPUSH
1241: LD_INT 0
1243: PPUSH
1244: CALL_OW 49
// PlaceUnitArea ( Mietek , RyniakovSpawn , false ) ;
1248: LD_EXP 2
1252: PPUSH
1253: LD_INT 2
1255: PPUSH
1256: LD_INT 0
1258: PPUSH
1259: CALL_OW 49
// ComTurnUnit ( [ MIchail , Vasilij ] , Mietek ) ;
1263: LD_EXP 5
1267: PUSH
1268: LD_EXP 4
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PPUSH
1277: LD_EXP 2
1281: PPUSH
1282: CALL_OW 119
// ComTurnUnit ( Mietek , Vasilij ) ;
1286: LD_EXP 2
1290: PPUSH
1291: LD_EXP 4
1295: PPUSH
1296: CALL_OW 119
// end ; end_of_file
1300: LD_VAR 0 1
1304: RET
// export function InitAmerican ; var i , j , k ; begin
1305: LD_INT 0
1307: PPUSH
1308: PPUSH
1309: PPUSH
1310: PPUSH
// Uc_Side = 4 ;
1311: LD_ADDR_OWVAR 20
1315: PUSH
1316: LD_INT 4
1318: ST_TO_ADDR
// Uc_Nation = 1 ;
1319: LD_ADDR_OWVAR 21
1323: PUSH
1324: LD_INT 1
1326: ST_TO_ADDR
// AmCommander := PrepareUnit ( AmCommander , false ,  ) ;
1327: LD_ADDR_EXP 19
1331: PUSH
1332: LD_STRING AmCommander
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: LD_STRING 
1340: PPUSH
1341: CALL 314 0 3
1345: ST_TO_ADDR
// Americans := Americans ^ AmCommander ;
1346: LD_ADDR_EXP 20
1350: PUSH
1351: LD_EXP 20
1355: PUSH
1356: LD_EXP 19
1360: ADD
1361: ST_TO_ADDR
// PlaceUnitArea ( AmCommander , AmAttacks , false ) ;
1362: LD_EXP 19
1366: PPUSH
1367: LD_INT 6
1369: PPUSH
1370: LD_INT 0
1372: PPUSH
1373: CALL_OW 49
// for i = 1 to [ 4 , 7 , 11 ] [ Difficulty ] do
1377: LD_ADDR_VAR 0 2
1381: PUSH
1382: DOUBLE
1383: LD_INT 1
1385: DEC
1386: ST_TO_ADDR
1387: LD_INT 4
1389: PUSH
1390: LD_INT 7
1392: PUSH
1393: LD_INT 11
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: LIST
1400: PUSH
1401: LD_OWVAR 67
1405: ARRAY
1406: PUSH
1407: FOR_TO
1408: IFFALSE 1488
// begin PrepareSoldier ( rand ( 1 , 2 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
1410: LD_INT 1
1412: PPUSH
1413: LD_INT 2
1415: PPUSH
1416: CALL_OW 12
1420: PPUSH
1421: LD_INT 0
1423: PUSH
1424: LD_INT 2
1426: PUSH
1427: LD_INT 4
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: PUSH
1435: LD_OWVAR 67
1439: ARRAY
1440: PPUSH
1441: CALL_OW 381
// AmS = CreateHuman ;
1445: LD_ADDR_EXP 16
1449: PUSH
1450: CALL_OW 44
1454: ST_TO_ADDR
// Americans := Americans ^ AmS ;
1455: LD_ADDR_EXP 20
1459: PUSH
1460: LD_EXP 20
1464: PUSH
1465: LD_EXP 16
1469: ADD
1470: ST_TO_ADDR
// PlaceUnitArea ( AmS , AmAttacks , false ) ;
1471: LD_EXP 16
1475: PPUSH
1476: LD_INT 6
1478: PPUSH
1479: LD_INT 0
1481: PPUSH
1482: CALL_OW 49
// end ;
1486: GO 1407
1488: POP
1489: POP
// for j = 1 to [ 0 , 1 , 3 ] [ Difficulty ] do
1490: LD_ADDR_VAR 0 3
1494: PUSH
1495: DOUBLE
1496: LD_INT 1
1498: DEC
1499: ST_TO_ADDR
1500: LD_INT 0
1502: PUSH
1503: LD_INT 1
1505: PUSH
1506: LD_INT 3
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: PUSH
1514: LD_OWVAR 67
1518: ARRAY
1519: PUSH
1520: FOR_TO
1521: IFFALSE 1601
// begin PrepareScientist ( rand ( 1 , 2 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
1523: LD_INT 1
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: CALL_OW 12
1533: PPUSH
1534: LD_INT 0
1536: PUSH
1537: LD_INT 2
1539: PUSH
1540: LD_INT 4
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: LIST
1547: PUSH
1548: LD_OWVAR 67
1552: ARRAY
1553: PPUSH
1554: CALL_OW 384
// AmSc = CreateHuman ;
1558: LD_ADDR_EXP 17
1562: PUSH
1563: CALL_OW 44
1567: ST_TO_ADDR
// Americans := Americans ^ AmSc ;
1568: LD_ADDR_EXP 20
1572: PUSH
1573: LD_EXP 20
1577: PUSH
1578: LD_EXP 17
1582: ADD
1583: ST_TO_ADDR
// PlaceUnitArea ( AmSc , AmAttacks , false ) ;
1584: LD_EXP 17
1588: PPUSH
1589: LD_INT 6
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL_OW 49
// end ;
1599: GO 1520
1601: POP
1602: POP
// end ;
1603: LD_VAR 0 1
1607: RET
// every 2 2$30 trigger yakotich_in_base = true do
1608: LD_EXP 26
1612: PUSH
1613: LD_INT 1
1615: EQUAL
1616: IFFALSE 1729
1618: GO 1620
1620: DISABLE
// begin Uc_Side = 4 ;
1621: LD_ADDR_OWVAR 20
1625: PUSH
1626: LD_INT 4
1628: ST_TO_ADDR
// Uc_Nation = 1 ;
1629: LD_ADDR_OWVAR 21
1633: PUSH
1634: LD_INT 1
1636: ST_TO_ADDR
// PrepareSoldier ( rand ( 0 , 1 ) , [ 0 , 1 , 2 ] [ Difficulty ] ) ;
1637: LD_INT 0
1639: PPUSH
1640: LD_INT 1
1642: PPUSH
1643: CALL_OW 12
1647: PPUSH
1648: LD_INT 0
1650: PUSH
1651: LD_INT 1
1653: PUSH
1654: LD_INT 2
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: PUSH
1662: LD_OWVAR 67
1666: ARRAY
1667: PPUSH
1668: CALL_OW 381
// AMSS = CreateHuman ;
1672: LD_ADDR_EXP 18
1676: PUSH
1677: CALL_OW 44
1681: ST_TO_ADDR
// Americans := Americans ^ AMSS ;
1682: LD_ADDR_EXP 20
1686: PUSH
1687: LD_EXP 20
1691: PUSH
1692: LD_EXP 18
1696: ADD
1697: ST_TO_ADDR
// PlaceUnitArea ( AMSS , AmSpawners , true ) ;
1698: LD_EXP 18
1702: PPUSH
1703: LD_INT 11
1705: PPUSH
1706: LD_INT 1
1708: PPUSH
1709: CALL_OW 49
// ComAgressiveMove ( AMSS , 92 , 69 ) ;
1713: LD_EXP 18
1717: PPUSH
1718: LD_INT 92
1720: PPUSH
1721: LD_INT 69
1723: PPUSH
1724: CALL_OW 114
// enable ;
1728: ENABLE
// end ; end_of_file
1729: END
// export function Action ; var i ; begin
1730: LD_INT 0
1732: PPUSH
1733: PPUSH
// InGameOn ;
1734: CALL_OW 8
// CenterOnXY ( 100 , 48 ) ;
1738: LD_INT 100
1740: PPUSH
1741: LD_INT 48
1743: PPUSH
1744: CALL_OW 84
// Wait ( 0 0$1 ) ;
1748: LD_INT 35
1750: PPUSH
1751: CALL_OW 67
// PlaceUnitArea ( Yakotich , YakotichSpawn , true ) ;
1755: LD_EXP 1
1759: PPUSH
1760: LD_INT 5
1762: PPUSH
1763: LD_INT 1
1765: PPUSH
1766: CALL_OW 49
// Wait ( 0 0$3 ) ;
1770: LD_INT 105
1772: PPUSH
1773: CALL_OW 67
// Say ( Yakotich , 1Yak-01 ) ;
1777: LD_EXP 1
1781: PPUSH
1782: LD_STRING 1Yak-01
1784: PPUSH
1785: CALL_OW 88
// Wait ( 0 0$2 ) ;
1789: LD_INT 70
1791: PPUSH
1792: CALL_OW 67
// Say ( Yakotich , 1Yak-02 ) ;
1796: LD_EXP 1
1800: PPUSH
1801: LD_STRING 1Yak-02
1803: PPUSH
1804: CALL_OW 88
// SayRadio ( Yakotich , 1Yak-03 ) ;
1808: LD_EXP 1
1812: PPUSH
1813: LD_STRING 1Yak-03
1815: PPUSH
1816: CALL_OW 94
// Wait ( 0 0$2 ) ;
1820: LD_INT 70
1822: PPUSH
1823: CALL_OW 67
// Say ( Yakotich , 1Yak-04 ) ;
1827: LD_EXP 1
1831: PPUSH
1832: LD_STRING 1Yak-04
1834: PPUSH
1835: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
1839: LD_STRING o1
1841: PPUSH
1842: CALL_OW 337
// InGameOff ;
1846: CALL_OW 9
// end ;
1850: LD_VAR 0 1
1854: RET
// every 0 0$1 trigger FilterUnitsInArea ( ForestOut , [ [ f_side , 3 ] ] ) do
1855: LD_INT 7
1857: PPUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 3
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: PPUSH
1871: CALL_OW 70
1875: IFFALSE 1892
1877: GO 1879
1879: DISABLE
// begin Say ( Yakotich , 1Yak-Random1 ) ;
1880: LD_EXP 1
1884: PPUSH
1885: LD_STRING 1Yak-Random1
1887: PPUSH
1888: CALL_OW 88
// end ;
1892: END
// every 0 0$1 trigger See ( 3 , RuA1 ) or See ( 3 , RuB1 ) or See ( 3 , RuB2 ) or See ( 3 , RuB3 ) do
1893: LD_INT 3
1895: PPUSH
1896: LD_INT 77
1898: PPUSH
1899: CALL_OW 292
1903: PUSH
1904: LD_INT 3
1906: PPUSH
1907: LD_INT 18
1909: PPUSH
1910: CALL_OW 292
1914: OR
1915: PUSH
1916: LD_INT 3
1918: PPUSH
1919: LD_INT 85
1921: PPUSH
1922: CALL_OW 292
1926: OR
1927: PUSH
1928: LD_INT 3
1930: PPUSH
1931: LD_INT 90
1933: PPUSH
1934: CALL_OW 292
1938: OR
1939: IFFALSE 2024
1941: GO 1943
1943: DISABLE
// begin CenterOnXY ( 24 , 17 ) ;
1944: LD_INT 24
1946: PPUSH
1947: LD_INT 17
1949: PPUSH
1950: CALL_OW 84
// DialogueOn ;
1954: CALL_OW 6
// Say ( Constantin , 1M-01 ) ;
1958: LD_EXP 6
1962: PPUSH
1963: LD_STRING 1M-01
1965: PPUSH
1966: CALL_OW 88
// Say ( Yakotich , 1Yak-05 ) ;
1970: LD_EXP 1
1974: PPUSH
1975: LD_STRING 1Yak-05
1977: PPUSH
1978: CALL_OW 88
// Say ( Constantin , 1M-02 ) ;
1982: LD_EXP 6
1986: PPUSH
1987: LD_STRING 1M-02
1989: PPUSH
1990: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
1994: LD_INT 6
1996: PPUSH
1997: LD_INT 3
1999: PPUSH
2000: CALL_OW 343
// DialogueOff ;
2004: CALL_OW 7
// InGameOn ;
2008: CALL_OW 8
// ComMoveToArea ( Yakotich , Checkpoint ) ;
2012: LD_EXP 1
2016: PPUSH
2017: LD_INT 3
2019: PPUSH
2020: CALL_OW 113
// end ;
2024: END
// every 0 0$1 trigger FilterUnitsInArea ( Checkpoint , [ [ f_side , 3 ] ] ) do
2025: LD_INT 3
2027: PPUSH
2028: LD_INT 22
2030: PUSH
2031: LD_INT 3
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: EMPTY
2039: LIST
2040: PPUSH
2041: CALL_OW 70
2045: IFFALSE 2428
2047: GO 2049
2049: DISABLE
// begin ComTurnUnit ( Yakotich , Mietek ) ;
2050: LD_EXP 1
2054: PPUSH
2055: LD_EXP 2
2059: PPUSH
2060: CALL_OW 119
// Say ( Yakotich , 1Yak-06 ) ;
2064: LD_EXP 1
2068: PPUSH
2069: LD_STRING 1Yak-06
2071: PPUSH
2072: CALL_OW 88
// ComTurnUnit ( Mietek , Yakotich ) ;
2076: LD_EXP 2
2080: PPUSH
2081: LD_EXP 1
2085: PPUSH
2086: CALL_OW 119
// Wait ( 0 0$1 ) ;
2090: LD_INT 35
2092: PPUSH
2093: CALL_OW 67
// Say ( Mietek , 1Ryn-01 ) ;
2097: LD_EXP 2
2101: PPUSH
2102: LD_STRING 1Ryn-01
2104: PPUSH
2105: CALL_OW 88
// Say ( Mietek , 1Ryn-02 ) ;
2109: LD_EXP 2
2113: PPUSH
2114: LD_STRING 1Ryn-02
2116: PPUSH
2117: CALL_OW 88
// Say ( Mietek , 1Ryn-03 ) ;
2121: LD_EXP 2
2125: PPUSH
2126: LD_STRING 1Ryn-03
2128: PPUSH
2129: CALL_OW 88
// Say ( Yakotich , 1Yak-07 ) ;
2133: LD_EXP 1
2137: PPUSH
2138: LD_STRING 1Yak-07
2140: PPUSH
2141: CALL_OW 88
// Say ( Mietek , 1Ryn-04 ) ;
2145: LD_EXP 2
2149: PPUSH
2150: LD_STRING 1Ryn-04
2152: PPUSH
2153: CALL_OW 88
// Say ( Mietek , 1Ryn-05 ) ;
2157: LD_EXP 2
2161: PPUSH
2162: LD_STRING 1Ryn-05
2164: PPUSH
2165: CALL_OW 88
// ComMoveXY ( Vasilij , 20 , 15 ) ;
2169: LD_EXP 4
2173: PPUSH
2174: LD_INT 20
2176: PPUSH
2177: LD_INT 15
2179: PPUSH
2180: CALL_OW 111
// AddComTurnUnit ( Vasilij , Yakotich ) ;
2184: LD_EXP 4
2188: PPUSH
2189: LD_EXP 1
2193: PPUSH
2194: CALL_OW 179
// Say ( Vasilij , 1Vas-01 ) ;
2198: LD_EXP 4
2202: PPUSH
2203: LD_STRING 1Vas-01
2205: PPUSH
2206: CALL_OW 88
// Say ( Vasilij , 1Vas-02 ) ;
2210: LD_EXP 4
2214: PPUSH
2215: LD_STRING 1Vas-02
2217: PPUSH
2218: CALL_OW 88
// Say ( Vasilij , 1Vas-03 ) ;
2222: LD_EXP 4
2226: PPUSH
2227: LD_STRING 1Vas-03
2229: PPUSH
2230: CALL_OW 88
// Say ( Vasilij , 1Vas-04 ) ;
2234: LD_EXP 4
2238: PPUSH
2239: LD_STRING 1Vas-04
2241: PPUSH
2242: CALL_OW 88
// Say ( Vasilij , 1Vas-05 ) ;
2246: LD_EXP 4
2250: PPUSH
2251: LD_STRING 1Vas-05
2253: PPUSH
2254: CALL_OW 88
// Say ( Yakotich , 1Yak-08 ) ;
2258: LD_EXP 1
2262: PPUSH
2263: LD_STRING 1Yak-08
2265: PPUSH
2266: CALL_OW 88
// Say ( Mietek , 1Ryn-06 ) ;
2270: LD_EXP 2
2274: PPUSH
2275: LD_STRING 1Ryn-06
2277: PPUSH
2278: CALL_OW 88
// Say ( Mietek , 1Ryn-07 ) ;
2282: LD_EXP 2
2286: PPUSH
2287: LD_STRING 1Ryn-07
2289: PPUSH
2290: CALL_OW 88
// Say ( Yakotich , 1Yak-09 ) ;
2294: LD_EXP 1
2298: PPUSH
2299: LD_STRING 1Yak-09
2301: PPUSH
2302: CALL_OW 88
// InGameOff ;
2306: CALL_OW 9
// yakotich_in_base = true ;
2310: LD_ADDR_EXP 26
2314: PUSH
2315: LD_INT 1
2317: ST_TO_ADDR
// ChangeMissionObjectives ( o4 ) ;
2318: LD_STRING o4
2320: PPUSH
2321: CALL_OW 337
// SetSide ( [ Mietek , Vasilij , Constantin , Michail , Boris , RuDep , RuB1 , RuB2 , RuB3 , RuA1 , RuOil ] , 3 ) ;
2325: LD_EXP 2
2329: PUSH
2330: LD_EXP 4
2334: PUSH
2335: LD_EXP 6
2339: PUSH
2340: LD_EXP 5
2344: PUSH
2345: LD_EXP 3
2349: PUSH
2350: LD_INT 15
2352: PUSH
2353: LD_INT 18
2355: PUSH
2356: LD_INT 85
2358: PUSH
2359: LD_INT 90
2361: PUSH
2362: LD_INT 77
2364: PUSH
2365: LD_INT 16
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: PPUSH
2381: LD_INT 3
2383: PPUSH
2384: CALL_OW 235
// SaveForQuickRestart ;
2388: CALL_OW 22
// Say ( Michail , 1Mich-01 ) ;
2392: LD_EXP 5
2396: PPUSH
2397: LD_STRING 1Mich-01
2399: PPUSH
2400: CALL_OW 88
// Say ( Michail , 1Mich-02 ) ;
2404: LD_EXP 5
2408: PPUSH
2409: LD_STRING 1Mich-02
2411: PPUSH
2412: CALL_OW 88
// Say ( Yakotich , 1Yak-10 ) ;
2416: LD_EXP 1
2420: PPUSH
2421: LD_STRING 1Yak-10
2423: PPUSH
2424: CALL_OW 88
// end ;
2428: END
// every 0 0$1 trigger yakotich_in_base = true do
2429: LD_EXP 26
2433: PUSH
2434: LD_INT 1
2436: EQUAL
2437: IFFALSE 2807
2439: GO 2441
2441: DISABLE
// begin Wait ( 5 5$0 ) ;
2442: LD_INT 10500
2444: PPUSH
2445: CALL_OW 67
// PlaceUnitArea ( Aleksandr , AleksandrSpawn , true ) ;
2449: LD_EXP 12
2453: PPUSH
2454: LD_INT 8
2456: PPUSH
2457: LD_INT 1
2459: PPUSH
2460: CALL_OW 49
// InGameOn ;
2464: CALL_OW 8
// DialogueOn ;
2468: CALL_OW 6
// SayRadio ( Aleksandr , 1Alek-Alek1 ) ;
2472: LD_EXP 12
2476: PPUSH
2477: LD_STRING 1Alek-Alek1
2479: PPUSH
2480: CALL_OW 94
// SayRadio ( Yakotich , 1Yak-Alek1 ) ;
2484: LD_EXP 1
2488: PPUSH
2489: LD_STRING 1Yak-Alek1
2491: PPUSH
2492: CALL_OW 94
// SayRadio ( Aleksandr , 1Alek-Alek2 ) ;
2496: LD_EXP 12
2500: PPUSH
2501: LD_STRING 1Alek-Alek2
2503: PPUSH
2504: CALL_OW 94
// SayRadio ( Mietek , 1Ryn-Alek1 ) ;
2508: LD_EXP 2
2512: PPUSH
2513: LD_STRING 1Ryn-Alek1
2515: PPUSH
2516: CALL_OW 94
// Say ( Mietek , 1Ryn-Alek2 ) ;
2520: LD_EXP 2
2524: PPUSH
2525: LD_STRING 1Ryn-Alek2
2527: PPUSH
2528: CALL_OW 88
// RevealFogArea ( 3 , River ) ;
2532: LD_INT 3
2534: PPUSH
2535: LD_INT 10
2537: PPUSH
2538: CALL_OW 332
// InGameOff ;
2542: CALL_OW 9
// DialogueOff ;
2546: CALL_OW 7
// Wait ( 2 2$0 ) ;
2550: LD_INT 4200
2552: PPUSH
2553: CALL_OW 67
// InGameOn ;
2557: CALL_OW 8
// DialogueOn ;
2561: CALL_OW 6
// SayRadio ( Maksim , 1Maks-Attack-01 ) ;
2565: LD_EXP 7
2569: PPUSH
2570: LD_STRING 1Maks-Attack-01
2572: PPUSH
2573: CALL_OW 94
// SayRadio ( Mietek , 1Ryn-Attack-01 ) ;
2577: LD_EXP 2
2581: PPUSH
2582: LD_STRING 1Ryn-Attack-01
2584: PPUSH
2585: CALL_OW 94
// SayRadio ( Maksim , 1Maks-Attack-02 ) ;
2589: LD_EXP 7
2593: PPUSH
2594: LD_STRING 1Maks-Attack-02
2596: PPUSH
2597: CALL_OW 94
// SayRadio ( Maksim , 1Maks-Attack-03 ) ;
2601: LD_EXP 7
2605: PPUSH
2606: LD_STRING 1Maks-Attack-03
2608: PPUSH
2609: CALL_OW 94
// Say ( Mietek , 1Ryn-Attack-02 ) ;
2613: LD_EXP 2
2617: PPUSH
2618: LD_STRING 1Ryn-Attack-02
2620: PPUSH
2621: CALL_OW 88
// ChangeMissionObjectives ( o10 ) ;
2625: LD_STRING o10
2627: PPUSH
2628: CALL_OW 337
// InGameOff ;
2632: CALL_OW 9
// DialogueOff ;
2636: CALL_OW 7
// Wait ( 2 2$0 ) ;
2640: LD_INT 4200
2642: PPUSH
2643: CALL_OW 67
// PlaceUnitArea ( Maksim , AmAttacks , false ) ;
2647: LD_EXP 7
2651: PPUSH
2652: LD_INT 6
2654: PPUSH
2655: LD_INT 0
2657: PPUSH
2658: CALL_OW 49
// PlaceUnitArea ( Fiodor , AmAttacks , false ) ;
2662: LD_EXP 8
2666: PPUSH
2667: LD_INT 6
2669: PPUSH
2670: LD_INT 0
2672: PPUSH
2673: CALL_OW 49
// PlaceUnitArea ( Aleksiej , AmAttacks , false ) ;
2677: LD_EXP 11
2681: PPUSH
2682: LD_INT 6
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: CALL_OW 49
// PlaceUnitArea ( Pavel , AmAttacks , false ) ;
2692: LD_EXP 9
2696: PPUSH
2697: LD_INT 6
2699: PPUSH
2700: LD_INT 0
2702: PPUSH
2703: CALL_OW 49
// PlaceUnitArea ( Zakhar , AmAttacks , false ) ;
2707: LD_EXP 10
2711: PPUSH
2712: LD_INT 6
2714: PPUSH
2715: LD_INT 0
2717: PPUSH
2718: CALL_OW 49
// ComMoveToArea ( MaksimCrew , CheckPoint ) ;
2722: LD_EXP 14
2726: PPUSH
2727: LD_INT 3
2729: PPUSH
2730: CALL_OW 113
// Say ( Maksim , 1Maks-Attack-04 ) ;
2734: LD_EXP 7
2738: PPUSH
2739: LD_STRING 1Maks-Attack-04
2741: PPUSH
2742: CALL_OW 88
// Wait ( 0 0$8 ) ;
2746: LD_INT 280
2748: PPUSH
2749: CALL_OW 67
// InitAmerican ;
2753: CALL 1305 0 0
// Say ( AmCommander , 1Andrew-Attack ) ;
2757: LD_EXP 19
2761: PPUSH
2762: LD_STRING 1Andrew-Attack
2764: PPUSH
2765: CALL_OW 88
// ComMoveXY ( Americans , 48 , 42 ) ;
2769: LD_EXP 20
2773: PPUSH
2774: LD_INT 48
2776: PPUSH
2777: LD_INT 42
2779: PPUSH
2780: CALL_OW 111
// AddComAgressiveMove ( Americans , 26 , 16 ) ;
2784: LD_EXP 20
2788: PPUSH
2789: LD_INT 26
2791: PPUSH
2792: LD_INT 16
2794: PPUSH
2795: CALL_OW 174
// american_attack = true ;
2799: LD_ADDR_EXP 30
2803: PUSH
2804: LD_INT 1
2806: ST_TO_ADDR
// end ;
2807: END
// every 0 0$1 trigger american_attack = true and IsDead ( AmCommander ) do
2808: LD_EXP 30
2812: PUSH
2813: LD_INT 1
2815: EQUAL
2816: PUSH
2817: LD_EXP 19
2821: PPUSH
2822: CALL_OW 301
2826: AND
2827: IFFALSE 2872
2829: GO 2831
2831: DISABLE
// begin InGameOn ;
2832: CALL_OW 8
// Say ( Yakotich , 1Yak-Attack-01 ) ;
2836: LD_EXP 1
2840: PPUSH
2841: LD_STRING 1Yak-Attack-01
2843: PPUSH
2844: CALL_OW 88
// Say ( Yakotich , 1Yak-Attack-02 ) ;
2848: LD_EXP 1
2852: PPUSH
2853: LD_STRING 1Yak-Attack-02
2855: PPUSH
2856: CALL_OW 88
// end_of_the_mission = true ;
2860: LD_ADDR_EXP 34
2864: PUSH
2865: LD_INT 1
2867: ST_TO_ADDR
// InGameOff ;
2868: CALL_OW 9
// end ;
2872: END
// every 0 0$1 trigger See ( 3 , Aleksandr ) do
2873: LD_INT 3
2875: PPUSH
2876: LD_EXP 12
2880: PPUSH
2881: CALL_OW 292
2885: IFFALSE 2958
2887: GO 2889
2889: DISABLE
// begin DialogueOn ;
2890: CALL_OW 6
// Say ( Aleksandr , 1Alek-Alek3 ) ;
2894: LD_EXP 12
2898: PPUSH
2899: LD_STRING 1Alek-Alek3
2901: PPUSH
2902: CALL_OW 88
// Say ( Yakotich , 1Yak-Alek2 ) ;
2906: LD_EXP 1
2910: PPUSH
2911: LD_STRING 1Yak-Alek2
2913: PPUSH
2914: CALL_OW 88
// Say ( Aleksandr , 1Alek-Alek4 ) ;
2918: LD_EXP 12
2922: PPUSH
2923: LD_STRING 1Alek-Alek4
2925: PPUSH
2926: CALL_OW 88
// Say ( Mietek , 1Ryn-Alek3 ) ;
2930: LD_EXP 2
2934: PPUSH
2935: LD_STRING 1Ryn-Alek3
2937: PPUSH
2938: CALL_OW 88
// SetSide ( Aleksandr , 3 ) ;
2942: LD_EXP 12
2946: PPUSH
2947: LD_INT 3
2949: PPUSH
2950: CALL_OW 235
// DialogueOff ;
2954: CALL_OW 7
// end ;
2958: END
// every 0 0$1 trigger Researched ( 3 , 46 ) do
2959: LD_INT 3
2961: PPUSH
2962: LD_INT 46
2964: PPUSH
2965: CALL_OW 325
2969: IFFALSE 3014
2971: GO 2973
2973: DISABLE
// begin DialogueOn ;
2974: CALL_OW 6
// Say ( Vasilij , 1Vas-Power-1 ) ;
2978: LD_EXP 4
2982: PPUSH
2983: LD_STRING 1Vas-Power-1
2985: PPUSH
2986: CALL_OW 88
// Say ( Yakotich , 1Yak-Power-1 ) ;
2990: LD_EXP 1
2994: PPUSH
2995: LD_STRING 1Yak-Power-1
2997: PPUSH
2998: CALL_OW 88
// DialogueOff ;
3002: CALL_OW 7
// oil_power_researched := true ;
3006: LD_ADDR_EXP 31
3010: PUSH
3011: LD_INT 1
3013: ST_TO_ADDR
// end ;
3014: END
// every 0 0$1 trigger Researched ( 3 , 47 ) do
3015: LD_INT 3
3017: PPUSH
3018: LD_INT 47
3020: PPUSH
3021: CALL_OW 325
3025: IFFALSE 3058
3027: GO 3029
3029: DISABLE
// begin DialogueOn ;
3030: CALL_OW 6
// Say ( Vasilij , 1Vas-Engine-1 ) ;
3034: LD_EXP 4
3038: PPUSH
3039: LD_STRING 1Vas-Engine-1
3041: PPUSH
3042: CALL_OW 88
// DialogueOff ;
3046: CALL_OW 7
// oil_engine_researched := true ;
3050: LD_ADDR_EXP 32
3054: PUSH
3055: LD_INT 1
3057: ST_TO_ADDR
// end ;
3058: END
// every 0 0$1 trigger Researched ( 3 , 48 ) do
3059: LD_INT 3
3061: PPUSH
3062: LD_INT 48
3064: PPUSH
3065: CALL_OW 325
3069: IFFALSE 3126
3071: GO 3073
3073: DISABLE
// begin DialogueOn ;
3074: CALL_OW 6
// Say ( Vasilij , 1Vas-Research-1 ) ;
3078: LD_EXP 4
3082: PPUSH
3083: LD_STRING 1Vas-Research-1
3085: PPUSH
3086: CALL_OW 88
// Say ( Yakotich , 1Yak-Research-1 ) ;
3090: LD_EXP 1
3094: PPUSH
3095: LD_STRING 1Yak-Research-1
3097: PPUSH
3098: CALL_OW 88
// Say ( Vasilij , 1Vas-Research-2 ) ;
3102: LD_EXP 4
3106: PPUSH
3107: LD_STRING 1Vas-Research-2
3109: PPUSH
3110: CALL_OW 88
// DialogueOff ;
3114: CALL_OW 7
// technology1_researched := true ;
3118: LD_ADDR_EXP 33
3122: PUSH
3123: LD_INT 1
3125: ST_TO_ADDR
// end ;
3126: END
// on BuildingComplete ( building ) do var i ;
3127: LD_INT 0
3129: PPUSH
// begin if GetBType ( building ) = b_workshop and GetSide ( building ) = 3 then
3130: LD_VAR 0 1
3134: PPUSH
3135: CALL_OW 266
3139: PUSH
3140: LD_INT 2
3142: EQUAL
3143: PUSH
3144: LD_VAR 0 1
3148: PPUSH
3149: CALL_OW 255
3153: PUSH
3154: LD_INT 3
3156: EQUAL
3157: AND
3158: IFFALSE 3172
// begin Say ( Michail , 1Mich-Workshop ) ;
3160: LD_EXP 5
3164: PPUSH
3165: LD_STRING 1Mich-Workshop
3167: PPUSH
3168: CALL_OW 88
// end ; if GetBType ( building ) = b_lab and GetSide ( building ) = 3 then
3172: LD_VAR 0 1
3176: PPUSH
3177: CALL_OW 266
3181: PUSH
3182: LD_INT 6
3184: EQUAL
3185: PUSH
3186: LD_VAR 0 1
3190: PPUSH
3191: CALL_OW 255
3195: PUSH
3196: LD_INT 3
3198: EQUAL
3199: AND
3200: IFFALSE 3214
// begin Say ( Vasilij , 1Vas-06 ) ;
3202: LD_EXP 4
3206: PPUSH
3207: LD_STRING 1Vas-06
3209: PPUSH
3210: CALL_OW 88
// end ; end ;
3214: PPOPN 2
3216: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_side , 3 ] ] ) do
3217: LD_INT 21
3219: PUSH
3220: LD_INT 2
3222: PUSH
3223: EMPTY
3224: LIST
3225: LIST
3226: PUSH
3227: LD_INT 22
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: EMPTY
3238: LIST
3239: LIST
3240: PPUSH
3241: CALL_OW 69
3245: IFFALSE 3343
3247: GO 3249
3249: DISABLE
// begin InGameOn ;
3250: CALL_OW 8
// CenterOnUnits ( RuDep ) ;
3254: LD_INT 15
3256: PPUSH
3257: CALL_OW 85
// Wait ( 0 0$3 ) ;
3261: LD_INT 105
3263: PPUSH
3264: CALL_OW 67
// DialogueOn ;
3268: CALL_OW 6
// Say ( Michail , 1Mich-Tank-1 ) ;
3272: LD_EXP 5
3276: PPUSH
3277: LD_STRING 1Mich-Tank-1
3279: PPUSH
3280: CALL_OW 88
// Say ( Yakotich , 1Yak-Tank-1 ) ;
3284: LD_EXP 1
3288: PPUSH
3289: LD_STRING 1Yak-Tank-1
3291: PPUSH
3292: CALL_OW 88
// Say ( Michail , 1Mich-Tank-2 ) ;
3296: LD_EXP 5
3300: PPUSH
3301: LD_STRING 1Mich-Tank-2
3303: PPUSH
3304: CALL_OW 88
// Say ( Yakotich , 1Yak-Tank-2 ) ;
3308: LD_EXP 1
3312: PPUSH
3313: LD_STRING 1Yak-Tank-2
3315: PPUSH
3316: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
3320: LD_STRING o6
3322: PPUSH
3323: CALL_OW 337
// DialogueOff ;
3327: CALL_OW 7
// InGameOff ;
3331: CALL_OW 9
// vehicle_constructed = true ;
3335: LD_ADDR_EXP 36
3339: PUSH
3340: LD_INT 1
3342: ST_TO_ADDR
// end ;
3343: END
// every 0 0$1 trigger technology1_researched = true and oil_engine_researched = true and oil_power_researched = true and vehicle_constructed = true do
3344: LD_EXP 33
3348: PUSH
3349: LD_INT 1
3351: EQUAL
3352: PUSH
3353: LD_EXP 32
3357: PUSH
3358: LD_INT 1
3360: EQUAL
3361: AND
3362: PUSH
3363: LD_EXP 31
3367: PUSH
3368: LD_INT 1
3370: EQUAL
3371: AND
3372: PUSH
3373: LD_EXP 36
3377: PUSH
3378: LD_INT 1
3380: EQUAL
3381: AND
3382: IFFALSE 3394
3384: GO 3386
3386: DISABLE
// begin ChangeMissionObjectives ( o5 ) ;
3387: LD_STRING o5
3389: PPUSH
3390: CALL_OW 337
// end ;
3394: END
// every 0 0$1 trigger IsInArea ( Maksim , BaseArea ) do
3395: LD_EXP 7
3399: PPUSH
3400: LD_INT 9
3402: PPUSH
3403: CALL_OW 308
3407: IFFALSE 3424
3409: GO 3411
3411: DISABLE
// begin SetSide ( MaksimCrew , 3 ) ;
3412: LD_EXP 14
3416: PPUSH
3417: LD_INT 3
3419: PPUSH
3420: CALL_OW 235
// end ;
3424: END
// every 0 0$1 trigger end_of_the_mission = true and yakotich_in_base = true and IsDead ( AmCommander ) do
3425: LD_EXP 34
3429: PUSH
3430: LD_INT 1
3432: EQUAL
3433: PUSH
3434: LD_EXP 26
3438: PUSH
3439: LD_INT 1
3441: EQUAL
3442: AND
3443: PUSH
3444: LD_EXP 19
3448: PPUSH
3449: CALL_OW 301
3453: AND
3454: IFFALSE 3885
3456: GO 3458
3458: DISABLE
// begin AddMedal ( People , 1 ) ;
3459: LD_STRING People
3461: PPUSH
3462: LD_INT 1
3464: PPUSH
3465: CALL_OW 101
// if IsOk ( Aleksandr ) then
3469: LD_EXP 12
3473: PPUSH
3474: CALL_OW 302
3478: IFFALSE 3492
// AddMedal ( Aleksandr , 1 ) else
3480: LD_STRING Aleksandr
3482: PPUSH
3483: LD_INT 1
3485: PPUSH
3486: CALL_OW 101
3490: GO 3503
// AddMedal ( Aleksandr , - 1 ) ;
3492: LD_STRING Aleksandr
3494: PPUSH
3495: LD_INT 1
3497: NEG
3498: PPUSH
3499: CALL_OW 101
// if Researched ( 3 , 48 ) and Researched ( 3 , 47 ) and Researched ( 3 , 46 ) and vehicle_constructed = true then
3503: LD_INT 3
3505: PPUSH
3506: LD_INT 48
3508: PPUSH
3509: CALL_OW 325
3513: PUSH
3514: LD_INT 3
3516: PPUSH
3517: LD_INT 47
3519: PPUSH
3520: CALL_OW 325
3524: AND
3525: PUSH
3526: LD_INT 3
3528: PPUSH
3529: LD_INT 46
3531: PPUSH
3532: CALL_OW 325
3536: AND
3537: PUSH
3538: LD_EXP 36
3542: PUSH
3543: LD_INT 1
3545: EQUAL
3546: AND
3547: IFFALSE 3561
// AddMedal ( Secondary , 1 ) else
3549: LD_STRING Secondary
3551: PPUSH
3552: LD_INT 1
3554: PPUSH
3555: CALL_OW 101
3559: GO 3572
// AddMedal ( Secondary , - 1 ) ;
3561: LD_STRING Secondary
3563: PPUSH
3564: LD_INT 1
3566: NEG
3567: PPUSH
3568: CALL_OW 101
// GiveMedals ( Medals ) ;
3572: LD_STRING Medals
3574: PPUSH
3575: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
3579: LD_INT 22
3581: PUSH
3582: LD_INT 3
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 23
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 21
3601: PUSH
3602: LD_INT 1
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: LIST
3613: PPUSH
3614: CALL_OW 69
3618: PPUSH
3619: CALL_OW 43
// SaveCharacters ( Yakotich , 01_Yakotich ) ;
3623: LD_EXP 1
3627: PPUSH
3628: LD_STRING 01_Yakotich
3630: PPUSH
3631: CALL_OW 38
// SaveCharacters ( Mietek , 01_Mietek ) ;
3635: LD_EXP 2
3639: PPUSH
3640: LD_STRING 01_Mietek
3642: PPUSH
3643: CALL_OW 38
// SaveCharacters ( Maksim , 01_Maksim ) ;
3647: LD_EXP 7
3651: PPUSH
3652: LD_STRING 01_Maksim
3654: PPUSH
3655: CALL_OW 38
// if IsOk ( Vasilij ) then
3659: LD_EXP 4
3663: PPUSH
3664: CALL_OW 302
3668: IFFALSE 3682
// SaveCharacters ( Vasilij , 01_Vasilij ) ;
3670: LD_EXP 4
3674: PPUSH
3675: LD_STRING 01_Vasilij
3677: PPUSH
3678: CALL_OW 38
// if IsOk ( Michail ) then
3682: LD_EXP 5
3686: PPUSH
3687: CALL_OW 302
3691: IFFALSE 3705
// SaveCharacters ( Michail , 01_Michail ) ;
3693: LD_EXP 5
3697: PPUSH
3698: LD_STRING 01_Michail
3700: PPUSH
3701: CALL_OW 38
// if IsOk ( Boris ) then
3705: LD_EXP 3
3709: PPUSH
3710: CALL_OW 302
3714: IFFALSE 3728
// SaveCharacters ( Boris , 01_Boris ) ;
3716: LD_EXP 3
3720: PPUSH
3721: LD_STRING 01_Boris
3723: PPUSH
3724: CALL_OW 38
// if IsOk ( Constantin ) then
3728: LD_EXP 6
3732: PPUSH
3733: CALL_OW 302
3737: IFFALSE 3751
// SaveCharacters ( Constantin , 01_Constantin ) ;
3739: LD_EXP 6
3743: PPUSH
3744: LD_STRING 01_Constantin
3746: PPUSH
3747: CALL_OW 38
// if IsOk ( Fiodor ) then
3751: LD_EXP 8
3755: PPUSH
3756: CALL_OW 302
3760: IFFALSE 3774
// SaveCharacters ( Fiodor , 01_Fiodor ) ;
3762: LD_EXP 8
3766: PPUSH
3767: LD_STRING 01_Fiodor
3769: PPUSH
3770: CALL_OW 38
// if IsOk ( Aleksiej ) then
3774: LD_EXP 11
3778: PPUSH
3779: CALL_OW 302
3783: IFFALSE 3797
// SaveCharacters ( Aleksiej , 01_Aleksiej ) ;
3785: LD_EXP 11
3789: PPUSH
3790: LD_STRING 01_Aleksiej
3792: PPUSH
3793: CALL_OW 38
// if IsOk ( Pavel ) then
3797: LD_EXP 9
3801: PPUSH
3802: CALL_OW 302
3806: IFFALSE 3820
// SaveCharacters ( Pavel , 01_Pavel ) ;
3808: LD_EXP 9
3812: PPUSH
3813: LD_STRING 01_Pavel
3815: PPUSH
3816: CALL_OW 38
// if IsOk ( Zakhar ) then
3820: LD_EXP 10
3824: PPUSH
3825: CALL_OW 302
3829: IFFALSE 3843
// SaveCharacters ( Zakhar , 01_Zakhar ) ;
3831: LD_EXP 10
3835: PPUSH
3836: LD_STRING 01_Zakhar
3838: PPUSH
3839: CALL_OW 38
// if IsOk ( Aleksandr ) and GetSide ( Aleksandr ) = 3 then
3843: LD_EXP 12
3847: PPUSH
3848: CALL_OW 302
3852: PUSH
3853: LD_EXP 12
3857: PPUSH
3858: CALL_OW 255
3862: PUSH
3863: LD_INT 3
3865: EQUAL
3866: AND
3867: IFFALSE 3881
// SaveCharacters ( Aleksandr , 01_Aleksandr ) ;
3869: LD_EXP 12
3873: PPUSH
3874: LD_STRING 01_Aleksandr
3876: PPUSH
3877: CALL_OW 38
// YouWin ;
3881: CALL_OW 103
// end ;
3885: END
// every 0 0$1 trigger end_of_the_mission = true and yakotich_in_base = true and IsDead ( AmCommander ) do
3886: LD_EXP 34
3890: PUSH
3891: LD_INT 1
3893: EQUAL
3894: PUSH
3895: LD_EXP 26
3899: PUSH
3900: LD_INT 1
3902: EQUAL
3903: AND
3904: PUSH
3905: LD_EXP 19
3909: PPUSH
3910: CALL_OW 301
3914: AND
3915: IFFALSE 3964
3917: GO 3919
3919: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= 1 then
3920: LD_INT 22
3922: PUSH
3923: LD_INT 3
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: PUSH
3930: LD_INT 21
3932: PUSH
3933: LD_INT 2
3935: PUSH
3936: EMPTY
3937: LIST
3938: LIST
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PPUSH
3944: CALL_OW 69
3948: PUSH
3949: LD_INT 1
3951: GREATEREQUAL
3952: IFFALSE 3964
// begin SaveVariable ( 1 , 01_Vehicle ) ;
3954: LD_INT 1
3956: PPUSH
3957: LD_STRING 01_Vehicle
3959: PPUSH
3960: CALL_OW 39
// end ; end ; end_of_file
3964: END
// every 2 2$0 do
3965: GO 3967
3967: DISABLE
// begin CreateCratesArea ( rand ( 2 , 5 ) , BaseArea , true ) ;
3968: LD_INT 2
3970: PPUSH
3971: LD_INT 5
3973: PPUSH
3974: CALL_OW 12
3978: PPUSH
3979: LD_INT 9
3981: PPUSH
3982: LD_INT 1
3984: PPUSH
3985: CALL_OW 55
// end ;
3989: END
