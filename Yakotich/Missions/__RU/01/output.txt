// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 36 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Randomize ;
  15: CALL_OW 10
// RandomizeAll ;
  19: CALL_OW 11
// InitRussian ;
  23: CALL 815 0 0
// Action ;
  27: CALL 1713 0 0
// DebugMode ;
  31: CALL 196 0 0
// end ;
  35: END
// export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin ; export Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif ; export MaksimCrew ; export OtherSurvivors ; export AmS , AmSc , AMSS ; export AmCommander ; export Americans ; export KillCounter , MaksimTime ; export pojazdy ; export debug ; export mission_prefix ; export hill_north_trigger , hill_south_trigger , yakotich_in_base , quests_finished , aleksandr_found , attacks_are_finished , american_attack , oil_power_researched , oil_engine_researched , technology1_researched , end_of_the_mission , losses , vehicle_constructed , josif_landed , josif_saved , breastwork_builded , armoury_builded , maksim_coming ; function Init ; begin
  36: LD_INT 0
  38: PPUSH
// mission_prefix := 01_ ;
  39: LD_ADDR_EXP 25
  43: PUSH
  44: LD_STRING 01_
  46: ST_TO_ADDR
// yakotich_in_base := false ;
  47: LD_ADDR_EXP 28
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// quests_finished := false ;
  55: LD_ADDR_EXP 29
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// aleksandr_found := false ;
  63: LD_ADDR_EXP 30
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// attacks_are_finished := false ;
  71: LD_ADDR_EXP 31
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// oil_power_researched := false ;
  79: LD_ADDR_EXP 33
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// oil_engine_researched := false ;
  87: LD_ADDR_EXP 34
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// technology1_researched := false ;
  95: LD_ADDR_EXP 35
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// american_attack := false ;
 103: LD_ADDR_EXP 32
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// end_of_the_mission := false ;
 111: LD_ADDR_EXP 36
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// losses := false ;
 119: LD_ADDR_EXP 37
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// vehicle_constructed := false ;
 127: LD_ADDR_EXP 38
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// josif_landed := false ;
 135: LD_ADDR_EXP 39
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// josif_saved := false ;
 143: LD_ADDR_EXP 40
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// breastwork_builded := false ;
 151: LD_ADDR_EXP 41
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// armoury_builded := false ;
 159: LD_ADDR_EXP 42
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// maksim_coming := false ;
 167: LD_ADDR_EXP 43
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// KillCounter := 0 ;
 175: LD_ADDR_EXP 21
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// MaksimTime := 2 2$0 ;
 183: LD_ADDR_EXP 22
 187: PUSH
 188: LD_INT 4200
 190: ST_TO_ADDR
// end ;
 191: LD_VAR 0 1
 195: RET
// function DebugMode ; var i ; begin
 196: LD_INT 0
 198: PPUSH
 199: PPUSH
// if not debug then
 200: LD_EXP 24
 204: NOT
 205: IFFALSE 209
// exit ;
 207: GO 228
// Difficulty := 3 ;
 209: LD_ADDR_OWVAR 67
 213: PUSH
 214: LD_INT 3
 216: ST_TO_ADDR
// TurnFogOff ( ) ;
 217: CALL_OW 537
// FogOff ( 3 ) ;
 221: LD_INT 3
 223: PPUSH
 224: CALL_OW 344
// end ; end_of_file
 228: LD_VAR 0 1
 232: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
 237: PPUSH
// uc_side := GetSide ( b ) ;
 238: LD_ADDR_OWVAR 20
 242: PUSH
 243: LD_VAR 0 2
 247: PPUSH
 248: CALL_OW 255
 252: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 253: LD_ADDR_OWVAR 21
 257: PUSH
 258: LD_VAR 0 2
 262: PPUSH
 263: CALL_OW 248
 267: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 268: LD_ADDR_VAR 0 5
 272: PUSH
 273: LD_VAR 0 2
 277: PPUSH
 278: CALL_OW 254
 282: PUSH
 283: LD_INT 3
 285: MINUS
 286: ST_TO_ADDR
// if dir < 0 then
 287: LD_VAR 0 5
 291: PUSH
 292: LD_INT 0
 294: LESS
 295: IFFALSE 311
// dir := 6 + dir ;
 297: LD_ADDR_VAR 0 5
 301: PUSH
 302: LD_INT 6
 304: PUSH
 305: LD_VAR 0 5
 309: PLUS
 310: ST_TO_ADDR
// un := CreateHuman ;
 311: LD_ADDR_VAR 0 4
 315: PUSH
 316: CALL_OW 44
 320: ST_TO_ADDR
// SetDir ( un , dir ) ;
 321: LD_VAR 0 4
 325: PPUSH
 326: LD_VAR 0 5
 330: PPUSH
 331: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 335: LD_VAR 0 4
 339: PPUSH
 340: LD_VAR 0 2
 344: PPUSH
 345: CALL_OW 52
// end ;
 349: LD_VAR 0 3
 353: RET
// export function GetCountOfBuildingsInBase ( base , btype ) ; var i , tmp ; begin
 354: LD_INT 0
 356: PPUSH
 357: PPUSH
 358: PPUSH
// result := 0 ;
 359: LD_ADDR_VAR 0 3
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_btype , btype ] ) ;
 367: LD_ADDR_VAR 0 5
 371: PUSH
 372: LD_INT 30
 374: PUSH
 375: LD_VAR 0 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: ST_TO_ADDR
// if not base or not tmp then
 389: LD_VAR 0 1
 393: NOT
 394: PUSH
 395: LD_VAR 0 5
 399: NOT
 400: OR
 401: IFFALSE 405
// exit ;
 403: GO 453
// for i in tmp do
 405: LD_ADDR_VAR 0 4
 409: PUSH
 410: LD_VAR 0 5
 414: PUSH
 415: FOR_IN
 416: IFFALSE 451
// if GetBase ( i ) = base then
 418: LD_VAR 0 4
 422: PPUSH
 423: CALL_OW 274
 427: PUSH
 428: LD_VAR 0 1
 432: EQUAL
 433: IFFALSE 449
// result := result + 1 ;
 435: LD_ADDR_VAR 0 3
 439: PUSH
 440: LD_VAR 0 3
 444: PUSH
 445: LD_INT 1
 447: PLUS
 448: ST_TO_ADDR
 449: GO 415
 451: POP
 452: POP
// end ;
 453: LD_VAR 0 3
 457: RET
// every 1 trigger IsSelected ( Pezet ) do
 458: LD_INT 74
 460: PPUSH
 461: CALL_OW 306
 465: IFFALSE 569
 467: GO 469
 469: DISABLE
// begin PezetExp ( [ 1 , 2 , 3 , 4 ] ) ;
 470: LD_INT 1
 472: PUSH
 473: LD_INT 2
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 4
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: PPUSH
 488: CALL 570 0 1
// Wait ( 0 0$05 ) ;
 492: LD_INT 175
 494: PPUSH
 495: CALL_OW 67
// Say ( Pezet , 1Pezet-Sikret ) ;
 499: LD_INT 74
 501: PPUSH
 502: LD_STRING 1Pezet-Sikret
 504: PPUSH
 505: CALL_OW 88
// TeleportUnit ( Pezet , 139 , 74 , 120 , true ) ;
 509: LD_INT 74
 511: PPUSH
 512: LD_INT 139
 514: PPUSH
 515: LD_INT 74
 517: PPUSH
 518: LD_INT 120
 520: PPUSH
 521: LD_INT 1
 523: PPUSH
 524: CALL_OW 483
// Wait ( 0 0$05 ) ;
 528: LD_INT 175
 530: PPUSH
 531: CALL_OW 67
// RemoveUnit ( Pezet ) ;
 535: LD_INT 74
 537: PPUSH
 538: CALL_OW 64
// SaveVariable ( 1 , PezetSaved ) ;
 542: LD_INT 1
 544: PPUSH
 545: LD_STRING PezetSaved
 547: PPUSH
 548: CALL_OW 39
// SaveCharacters ( Pezet , Pezet ) ;
 552: LD_INT 74
 554: PPUSH
 555: LD_STRING Pezet
 557: PPUSH
 558: CALL_OW 38
// SetAchievement ( ACH_PEZET ) ;
 562: LD_STRING ACH_PEZET
 564: PPUSH
 565: CALL_OW 543
// end ;
 569: END
// export function PezetExp ( q ) ; var dec , q1 ; begin
 570: LD_INT 0
 572: PPUSH
 573: PPUSH
 574: PPUSH
// dec = SelectiveQuery ( PezetQuery , q ) ;
 575: LD_ADDR_VAR 0 3
 579: PUSH
 580: LD_STRING PezetQuery
 582: PPUSH
 583: LD_VAR 0 1
 587: PPUSH
 588: CALL_OW 98
 592: ST_TO_ADDR
// case dec of 1 :
 593: LD_VAR 0 3
 597: PUSH
 598: LD_INT 1
 600: DOUBLE
 601: EQUAL
 602: IFTRUE 606
 604: GO 624
 606: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 500 ) ;
 607: LD_EXP 1
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: LD_INT 500
 617: PPUSH
 618: CALL_OW 591
// end ; 2 :
 622: GO 703
 624: LD_INT 2
 626: DOUBLE
 627: EQUAL
 628: IFTRUE 632
 630: GO 650
 632: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 500 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 2
 640: PPUSH
 641: LD_INT 500
 643: PPUSH
 644: CALL_OW 591
// end ; 3 :
 648: GO 703
 650: LD_INT 3
 652: DOUBLE
 653: EQUAL
 654: IFTRUE 658
 656: GO 676
 658: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 500 ) ;
 659: LD_EXP 1
 663: PPUSH
 664: LD_INT 3
 666: PPUSH
 667: LD_INT 500
 669: PPUSH
 670: CALL_OW 591
// end ; 4 :
 674: GO 703
 676: LD_INT 4
 678: DOUBLE
 679: EQUAL
 680: IFTRUE 684
 682: GO 702
 684: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 500 ) ;
 685: LD_EXP 1
 689: PPUSH
 690: LD_INT 4
 692: PPUSH
 693: LD_INT 500
 695: PPUSH
 696: CALL_OW 591
// end ; end ;
 700: GO 703
 702: POP
// end ;
 703: LD_VAR 0 2
 707: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 301
 717: IFFALSE 729
 719: GO 721
 721: DISABLE
// begin YouLost ( YakotichDead ) ;
 722: LD_STRING YakotichDead
 724: PPUSH
 725: CALL_OW 104
// end ;
 729: END
// every 0 0$1 trigger IsDead ( Mietek ) do
 730: LD_EXP 2
 734: PPUSH
 735: CALL_OW 301
 739: IFFALSE 751
 741: GO 743
 743: DISABLE
// begin YouLost ( MietekDead ) ;
 744: LD_STRING MietekDead
 746: PPUSH
 747: CALL_OW 104
// end ;
 751: END
// every 0 0$1 trigger maksim_coming = true do
 752: LD_EXP 43
 756: PUSH
 757: LD_INT 1
 759: EQUAL
 760: IFFALSE 814
 762: GO 764
 764: DISABLE
// begin enable ;
 765: ENABLE
// if MaksimTime then
 766: LD_EXP 22
 770: IFFALSE 805
// begin MaksimTime := MaksimTime - 0 0$1 ;
 772: LD_ADDR_EXP 22
 776: PUSH
 777: LD_EXP 22
 781: PUSH
 782: LD_INT 35
 784: MINUS
 785: ST_TO_ADDR
// display_strings := [ #MaksimTime , MaksimTime ] ;
 786: LD_ADDR_OWVAR 47
 790: PUSH
 791: LD_STRING #MaksimTime
 793: PUSH
 794: LD_EXP 22
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: ST_TO_ADDR
// end else
 803: GO 814
// begin display_strings :=  ;
 805: LD_ADDR_OWVAR 47
 809: PUSH
 810: LD_STRING 
 812: ST_TO_ADDR
// disable ;
 813: DISABLE
// end ; end ; end_of_file
 814: END
// export function InitRussian ; begin
 815: LD_INT 0
 817: PPUSH
// Uc_Nation := 3 ;
 818: LD_ADDR_OWVAR 21
 822: PUSH
 823: LD_INT 3
 825: ST_TO_ADDR
// Uc_Side := 3 ;
 826: LD_ADDR_OWVAR 20
 830: PUSH
 831: LD_INT 3
 833: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , false ,  ) ;
 834: LD_ADDR_EXP 1
 838: PUSH
 839: LD_STRING Yakotich
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: LD_STRING 
 847: PPUSH
 848: CALL 4264 0 3
 852: ST_TO_ADDR
// Uc_Side := 6 ;
 853: LD_ADDR_OWVAR 20
 857: PUSH
 858: LD_INT 6
 860: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , false ,  ) ;
 861: LD_ADDR_EXP 2
 865: PUSH
 866: LD_STRING Mietek
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: LD_STRING 
 874: PPUSH
 875: CALL 4264 0 3
 879: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , false ,  ) ;
 880: LD_ADDR_EXP 3
 884: PUSH
 885: LD_STRING Boris
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: LD_STRING 
 893: PPUSH
 894: CALL 4264 0 3
 898: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , false ,  ) ;
 899: LD_ADDR_EXP 5
 903: PUSH
 904: LD_STRING Michail
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: LD_STRING 
 912: PPUSH
 913: CALL 4264 0 3
 917: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , false ,  ) ;
 918: LD_ADDR_EXP 4
 922: PUSH
 923: LD_STRING Vasilij
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: LD_STRING 
 931: PPUSH
 932: CALL 4264 0 3
 936: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , false ,  ) ;
 937: LD_ADDR_EXP 6
 941: PUSH
 942: LD_STRING Constantin
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: LD_STRING 
 950: PPUSH
 951: CALL 4264 0 3
 955: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , false ,  ) ;
 956: LD_ADDR_EXP 7
 960: PUSH
 961: LD_STRING Maksim
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: LD_STRING 
 969: PPUSH
 970: CALL 4264 0 3
 974: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , false ,  ) ;
 975: LD_ADDR_EXP 8
 979: PUSH
 980: LD_STRING Fiodor
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: LD_STRING 
 988: PPUSH
 989: CALL 4264 0 3
 993: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , false ,  ) ;
 994: LD_ADDR_EXP 11
 998: PUSH
 999: LD_STRING Aleksiej
1001: PPUSH
1002: LD_INT 0
1004: PPUSH
1005: LD_STRING 
1007: PPUSH
1008: CALL 4264 0 3
1012: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , false ,  ) ;
1013: LD_ADDR_EXP 9
1017: PUSH
1018: LD_STRING Pavel
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: LD_STRING 
1026: PPUSH
1027: CALL 4264 0 3
1031: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , false ,  ) ;
1032: LD_ADDR_EXP 10
1036: PUSH
1037: LD_STRING Zakhar
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: LD_STRING 
1045: PPUSH
1046: CALL 4264 0 3
1050: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Maksim ;
1051: LD_ADDR_EXP 14
1055: PUSH
1056: LD_EXP 14
1060: PUSH
1061: LD_EXP 7
1065: ADD
1066: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Fiodor ;
1067: LD_ADDR_EXP 14
1071: PUSH
1072: LD_EXP 14
1076: PUSH
1077: LD_EXP 8
1081: ADD
1082: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Aleksiej ;
1083: LD_ADDR_EXP 14
1087: PUSH
1088: LD_EXP 14
1092: PUSH
1093: LD_EXP 11
1097: ADD
1098: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Pavel ;
1099: LD_ADDR_EXP 14
1103: PUSH
1104: LD_EXP 14
1108: PUSH
1109: LD_EXP 9
1113: ADD
1114: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Zakhar ;
1115: LD_ADDR_EXP 14
1119: PUSH
1120: LD_EXP 14
1124: PUSH
1125: LD_EXP 10
1129: ADD
1130: ST_TO_ADDR
// Uc_Side := 5 ;
1131: LD_ADDR_OWVAR 20
1135: PUSH
1136: LD_INT 5
1138: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , false ,  ) ;
1139: LD_ADDR_EXP 12
1143: PUSH
1144: LD_STRING Aleksandr
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: LD_STRING 
1152: PPUSH
1153: CALL 4264 0 3
1157: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false ,  ) ;
1158: LD_ADDR_EXP 13
1162: PUSH
1163: LD_STRING Josif
1165: PPUSH
1166: LD_INT 0
1168: PPUSH
1169: LD_STRING 
1171: PPUSH
1172: CALL 4264 0 3
1176: ST_TO_ADDR
// PlaceHumanInUnit ( Constantin , RuB3 ) ;
1177: LD_EXP 6
1181: PPUSH
1182: LD_INT 90
1184: PPUSH
1185: CALL_OW 52
// PlaceHumanInUnit ( Boris , RuDep ) ;
1189: LD_EXP 3
1193: PPUSH
1194: LD_INT 15
1196: PPUSH
1197: CALL_OW 52
// PlaceUnitArea ( Vasilij , Civilians , false ) ;
1201: LD_EXP 4
1205: PPUSH
1206: LD_INT 1
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL_OW 49
// PlaceUnitArea ( Michail , Civilians , false ) ;
1216: LD_EXP 5
1220: PPUSH
1221: LD_INT 1
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 49
// PlaceUnitArea ( Mietek , RyniakovSpawn , false ) ;
1231: LD_EXP 2
1235: PPUSH
1236: LD_INT 2
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// ComTurnUnit ( [ Michail , Vasilij ] , Mietek ) ;
1246: LD_EXP 5
1250: PUSH
1251: LD_EXP 4
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PPUSH
1260: LD_EXP 2
1264: PPUSH
1265: CALL_OW 119
// ComTurnUnit ( Mietek , Vasilij ) ;
1269: LD_EXP 2
1273: PPUSH
1274: LD_EXP 4
1278: PPUSH
1279: CALL_OW 119
// end ; end_of_file
1283: LD_VAR 0 1
1287: RET
// export function InitAmerican ; var i , j , k ; begin
1288: LD_INT 0
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
// Uc_Side = 4 ;
1294: LD_ADDR_OWVAR 20
1298: PUSH
1299: LD_INT 4
1301: ST_TO_ADDR
// Uc_Nation = 1 ;
1302: LD_ADDR_OWVAR 21
1306: PUSH
1307: LD_INT 1
1309: ST_TO_ADDR
// AmCommander := PrepareUnit ( AmCommander , false ,  ) ;
1310: LD_ADDR_EXP 19
1314: PUSH
1315: LD_STRING AmCommander
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: LD_STRING 
1323: PPUSH
1324: CALL 4264 0 3
1328: ST_TO_ADDR
// Americans := Americans ^ AmCommander ;
1329: LD_ADDR_EXP 20
1333: PUSH
1334: LD_EXP 20
1338: PUSH
1339: LD_EXP 19
1343: ADD
1344: ST_TO_ADDR
// PlaceUnitArea ( AmCommander , AmAttacks , false ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_INT 6
1352: PPUSH
1353: LD_INT 0
1355: PPUSH
1356: CALL_OW 49
// for i = 1 to [ 4 , 7 , 11 ] [ Difficulty ] do
1360: LD_ADDR_VAR 0 2
1364: PUSH
1365: DOUBLE
1366: LD_INT 1
1368: DEC
1369: ST_TO_ADDR
1370: LD_INT 4
1372: PUSH
1373: LD_INT 7
1375: PUSH
1376: LD_INT 11
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: LIST
1383: PUSH
1384: LD_OWVAR 67
1388: ARRAY
1389: PUSH
1390: FOR_TO
1391: IFFALSE 1471
// begin PrepareSoldier ( rand ( 1 , 2 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
1393: LD_INT 1
1395: PPUSH
1396: LD_INT 2
1398: PPUSH
1399: CALL_OW 12
1403: PPUSH
1404: LD_INT 0
1406: PUSH
1407: LD_INT 2
1409: PUSH
1410: LD_INT 4
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_OWVAR 67
1422: ARRAY
1423: PPUSH
1424: CALL_OW 381
// AmS = CreateHuman ;
1428: LD_ADDR_EXP 16
1432: PUSH
1433: CALL_OW 44
1437: ST_TO_ADDR
// Americans := Americans ^ AmS ;
1438: LD_ADDR_EXP 20
1442: PUSH
1443: LD_EXP 20
1447: PUSH
1448: LD_EXP 16
1452: ADD
1453: ST_TO_ADDR
// PlaceUnitArea ( AmS , AmAttacks , false ) ;
1454: LD_EXP 16
1458: PPUSH
1459: LD_INT 6
1461: PPUSH
1462: LD_INT 0
1464: PPUSH
1465: CALL_OW 49
// end ;
1469: GO 1390
1471: POP
1472: POP
// for j = 1 to [ 0 , 1 , 3 ] [ Difficulty ] do
1473: LD_ADDR_VAR 0 3
1477: PUSH
1478: DOUBLE
1479: LD_INT 1
1481: DEC
1482: ST_TO_ADDR
1483: LD_INT 0
1485: PUSH
1486: LD_INT 1
1488: PUSH
1489: LD_INT 3
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: LD_OWVAR 67
1501: ARRAY
1502: PUSH
1503: FOR_TO
1504: IFFALSE 1584
// begin PrepareScientist ( rand ( 1 , 2 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
1506: LD_INT 1
1508: PPUSH
1509: LD_INT 2
1511: PPUSH
1512: CALL_OW 12
1516: PPUSH
1517: LD_INT 0
1519: PUSH
1520: LD_INT 2
1522: PUSH
1523: LD_INT 4
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_OWVAR 67
1535: ARRAY
1536: PPUSH
1537: CALL_OW 384
// AmSc = CreateHuman ;
1541: LD_ADDR_EXP 17
1545: PUSH
1546: CALL_OW 44
1550: ST_TO_ADDR
// Americans := Americans ^ AmSc ;
1551: LD_ADDR_EXP 20
1555: PUSH
1556: LD_EXP 20
1560: PUSH
1561: LD_EXP 17
1565: ADD
1566: ST_TO_ADDR
// PlaceUnitArea ( AmSc , AmAttacks , false ) ;
1567: LD_EXP 17
1571: PPUSH
1572: LD_INT 6
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 49
// end ;
1582: GO 1503
1584: POP
1585: POP
// end ;
1586: LD_VAR 0 1
1590: RET
// every 2 2$30 trigger yakotich_in_base = true do
1591: LD_EXP 28
1595: PUSH
1596: LD_INT 1
1598: EQUAL
1599: IFFALSE 1712
1601: GO 1603
1603: DISABLE
// begin Uc_Side = 1 ;
1604: LD_ADDR_OWVAR 20
1608: PUSH
1609: LD_INT 1
1611: ST_TO_ADDR
// Uc_Nation = 1 ;
1612: LD_ADDR_OWVAR 21
1616: PUSH
1617: LD_INT 1
1619: ST_TO_ADDR
// PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 5 ] [ Difficulty ] ) ;
1620: LD_INT 0
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: CALL_OW 12
1630: PPUSH
1631: LD_INT 2
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: LD_INT 5
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_OWVAR 67
1649: ARRAY
1650: PPUSH
1651: CALL_OW 381
// AMSS = CreateHuman ;
1655: LD_ADDR_EXP 18
1659: PUSH
1660: CALL_OW 44
1664: ST_TO_ADDR
// Americans := Americans ^ AMSS ;
1665: LD_ADDR_EXP 20
1669: PUSH
1670: LD_EXP 20
1674: PUSH
1675: LD_EXP 18
1679: ADD
1680: ST_TO_ADDR
// PlaceUnitArea ( AMSS , AmSpawners , true ) ;
1681: LD_EXP 18
1685: PPUSH
1686: LD_INT 11
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: CALL_OW 49
// ComAgressiveMove ( AMSS , 92 , 69 ) ;
1696: LD_EXP 18
1700: PPUSH
1701: LD_INT 92
1703: PPUSH
1704: LD_INT 69
1706: PPUSH
1707: CALL_OW 114
// enable ;
1711: ENABLE
// end ; end_of_file
1712: END
// export function Action ; var i ; begin
1713: LD_INT 0
1715: PPUSH
1716: PPUSH
// InGameOn ;
1717: CALL_OW 8
// CenterOnXY ( 100 , 48 ) ;
1721: LD_INT 100
1723: PPUSH
1724: LD_INT 48
1726: PPUSH
1727: CALL_OW 84
// Wait ( 0 0$1 ) ;
1731: LD_INT 35
1733: PPUSH
1734: CALL_OW 67
// PlaceUnitArea ( Yakotich , YakotichSpawn , true ) ;
1738: LD_EXP 1
1742: PPUSH
1743: LD_INT 5
1745: PPUSH
1746: LD_INT 1
1748: PPUSH
1749: CALL_OW 49
// Wait ( 0 0$3 ) ;
1753: LD_INT 105
1755: PPUSH
1756: CALL_OW 67
// Say ( Yakotich , 1Yak-01 ) ;
1760: LD_EXP 1
1764: PPUSH
1765: LD_STRING 1Yak-01
1767: PPUSH
1768: CALL_OW 88
// Wait ( 0 0$2 ) ;
1772: LD_INT 70
1774: PPUSH
1775: CALL_OW 67
// Say ( Yakotich , 1Yak-02 ) ;
1779: LD_EXP 1
1783: PPUSH
1784: LD_STRING 1Yak-02
1786: PPUSH
1787: CALL_OW 88
// SayRadio ( Yakotich , 1Yak-03 ) ;
1791: LD_EXP 1
1795: PPUSH
1796: LD_STRING 1Yak-03
1798: PPUSH
1799: CALL_OW 94
// Wait ( 0 0$2 ) ;
1803: LD_INT 70
1805: PPUSH
1806: CALL_OW 67
// Say ( Yakotich , 1Yak-04 ) ;
1810: LD_EXP 1
1814: PPUSH
1815: LD_STRING 1Yak-04
1817: PPUSH
1818: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
1822: LD_STRING o1
1824: PPUSH
1825: CALL_OW 337
// InGameOff ;
1829: CALL_OW 9
// end ;
1833: LD_VAR 0 1
1837: RET
// every 0 0$1 trigger FilterUnitsInArea ( ForestOut , [ [ f_side , 3 ] ] ) do
1838: LD_INT 7
1840: PPUSH
1841: LD_INT 22
1843: PUSH
1844: LD_INT 3
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: PPUSH
1854: CALL_OW 70
1858: IFFALSE 1875
1860: GO 1862
1862: DISABLE
// begin Say ( Yakotich , 1Yak-Random1 ) ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_STRING 1Yak-Random1
1870: PPUSH
1871: CALL_OW 88
// end ;
1875: END
// every 0 0$1 trigger See ( 3 , RuB1 ) or See ( 3 , RuB2 ) or See ( 3 , RuB3 ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 18
1881: PPUSH
1882: CALL_OW 292
1886: PUSH
1887: LD_INT 3
1889: PPUSH
1890: LD_INT 85
1892: PPUSH
1893: CALL_OW 292
1897: OR
1898: PUSH
1899: LD_INT 3
1901: PPUSH
1902: LD_INT 90
1904: PPUSH
1905: CALL_OW 292
1909: OR
1910: IFFALSE 1995
1912: GO 1914
1914: DISABLE
// begin CenterOnXY ( 24 , 17 ) ;
1915: LD_INT 24
1917: PPUSH
1918: LD_INT 17
1920: PPUSH
1921: CALL_OW 84
// DialogueOn ;
1925: CALL_OW 6
// Say ( Constantin , 1M-01 ) ;
1929: LD_EXP 6
1933: PPUSH
1934: LD_STRING 1M-01
1936: PPUSH
1937: CALL_OW 88
// Say ( Yakotich , 1Yak-05 ) ;
1941: LD_EXP 1
1945: PPUSH
1946: LD_STRING 1Yak-05
1948: PPUSH
1949: CALL_OW 88
// Say ( Constantin , 1M-02 ) ;
1953: LD_EXP 6
1957: PPUSH
1958: LD_STRING 1M-02
1960: PPUSH
1961: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
1965: LD_INT 6
1967: PPUSH
1968: LD_INT 3
1970: PPUSH
1971: CALL_OW 343
// DialogueOff ;
1975: CALL_OW 7
// InGameOn ;
1979: CALL_OW 8
// ComMoveToArea ( Yakotich , Checkpoint ) ;
1983: LD_EXP 1
1987: PPUSH
1988: LD_INT 3
1990: PPUSH
1991: CALL_OW 113
// end ;
1995: END
// every 0 0$1 trigger FilterUnitsInArea ( Checkpoint , [ [ f_side , 3 ] ] ) do
1996: LD_INT 3
1998: PPUSH
1999: LD_INT 22
2001: PUSH
2002: LD_INT 3
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: PPUSH
2012: CALL_OW 70
2016: IFFALSE 2395
2018: GO 2020
2020: DISABLE
// begin ComTurnUnit ( Yakotich , Mietek ) ;
2021: LD_EXP 1
2025: PPUSH
2026: LD_EXP 2
2030: PPUSH
2031: CALL_OW 119
// Say ( Yakotich , 1Yak-06 ) ;
2035: LD_EXP 1
2039: PPUSH
2040: LD_STRING 1Yak-06
2042: PPUSH
2043: CALL_OW 88
// ComTurnUnit ( Mietek , Yakotich ) ;
2047: LD_EXP 2
2051: PPUSH
2052: LD_EXP 1
2056: PPUSH
2057: CALL_OW 119
// Wait ( 0 0$1 ) ;
2061: LD_INT 35
2063: PPUSH
2064: CALL_OW 67
// Say ( Mietek , 1Ryn-01 ) ;
2068: LD_EXP 2
2072: PPUSH
2073: LD_STRING 1Ryn-01
2075: PPUSH
2076: CALL_OW 88
// Say ( Mietek , 1Ryn-02 ) ;
2080: LD_EXP 2
2084: PPUSH
2085: LD_STRING 1Ryn-02
2087: PPUSH
2088: CALL_OW 88
// Say ( Mietek , 1Ryn-03 ) ;
2092: LD_EXP 2
2096: PPUSH
2097: LD_STRING 1Ryn-03
2099: PPUSH
2100: CALL_OW 88
// Say ( Yakotich , 1Yak-07 ) ;
2104: LD_EXP 1
2108: PPUSH
2109: LD_STRING 1Yak-07
2111: PPUSH
2112: CALL_OW 88
// Say ( Mietek , 1Ryn-04 ) ;
2116: LD_EXP 2
2120: PPUSH
2121: LD_STRING 1Ryn-04
2123: PPUSH
2124: CALL_OW 88
// Say ( Mietek , 1Ryn-05 ) ;
2128: LD_EXP 2
2132: PPUSH
2133: LD_STRING 1Ryn-05
2135: PPUSH
2136: CALL_OW 88
// ComMoveXY ( Vasilij , 20 , 15 ) ;
2140: LD_EXP 4
2144: PPUSH
2145: LD_INT 20
2147: PPUSH
2148: LD_INT 15
2150: PPUSH
2151: CALL_OW 111
// AddComTurnUnit ( Vasilij , Yakotich ) ;
2155: LD_EXP 4
2159: PPUSH
2160: LD_EXP 1
2164: PPUSH
2165: CALL_OW 179
// Say ( Vasilij , 1Vas-01 ) ;
2169: LD_EXP 4
2173: PPUSH
2174: LD_STRING 1Vas-01
2176: PPUSH
2177: CALL_OW 88
// Say ( Vasilij , 1Vas-02 ) ;
2181: LD_EXP 4
2185: PPUSH
2186: LD_STRING 1Vas-02
2188: PPUSH
2189: CALL_OW 88
// Say ( Vasilij , 1Vas-03 ) ;
2193: LD_EXP 4
2197: PPUSH
2198: LD_STRING 1Vas-03
2200: PPUSH
2201: CALL_OW 88
// Say ( Vasilij , 1Vas-04 ) ;
2205: LD_EXP 4
2209: PPUSH
2210: LD_STRING 1Vas-04
2212: PPUSH
2213: CALL_OW 88
// Say ( Vasilij , 1Vas-05 ) ;
2217: LD_EXP 4
2221: PPUSH
2222: LD_STRING 1Vas-05
2224: PPUSH
2225: CALL_OW 88
// Say ( Yakotich , 1Yak-08 ) ;
2229: LD_EXP 1
2233: PPUSH
2234: LD_STRING 1Yak-08
2236: PPUSH
2237: CALL_OW 88
// Say ( Mietek , 1Ryn-06 ) ;
2241: LD_EXP 2
2245: PPUSH
2246: LD_STRING 1Ryn-06
2248: PPUSH
2249: CALL_OW 88
// Say ( Mietek , 1Ryn-07 ) ;
2253: LD_EXP 2
2257: PPUSH
2258: LD_STRING 1Ryn-07
2260: PPUSH
2261: CALL_OW 88
// Say ( Yakotich , 1Yak-09 ) ;
2265: LD_EXP 1
2269: PPUSH
2270: LD_STRING 1Yak-09
2272: PPUSH
2273: CALL_OW 88
// InGameOff ;
2277: CALL_OW 9
// yakotich_in_base = true ;
2281: LD_ADDR_EXP 28
2285: PUSH
2286: LD_INT 1
2288: ST_TO_ADDR
// ChangeMissionObjectives ( o4 ) ;
2289: LD_STRING o4
2291: PPUSH
2292: CALL_OW 337
// SetSide ( [ Mietek , Vasilij , Constantin , Michail , Boris , RuDep , RuB1 , RuB2 , RuB3 , RuOil ] , 3 ) ;
2296: LD_EXP 2
2300: PUSH
2301: LD_EXP 4
2305: PUSH
2306: LD_EXP 6
2310: PUSH
2311: LD_EXP 5
2315: PUSH
2316: LD_EXP 3
2320: PUSH
2321: LD_INT 15
2323: PUSH
2324: LD_INT 18
2326: PUSH
2327: LD_INT 85
2329: PUSH
2330: LD_INT 90
2332: PUSH
2333: LD_INT 16
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: PPUSH
2348: LD_INT 3
2350: PPUSH
2351: CALL_OW 235
// SaveForQuickRestart ;
2355: CALL_OW 22
// Say ( Michail , 1Mich-01 ) ;
2359: LD_EXP 5
2363: PPUSH
2364: LD_STRING 1Mich-01
2366: PPUSH
2367: CALL_OW 88
// Say ( Michail , 1Mich-02 ) ;
2371: LD_EXP 5
2375: PPUSH
2376: LD_STRING 1Mich-02
2378: PPUSH
2379: CALL_OW 88
// Say ( Yakotich , 1Yak-10 ) ;
2383: LD_EXP 1
2387: PPUSH
2388: LD_STRING 1Yak-10
2390: PPUSH
2391: CALL_OW 88
// end ;
2395: END
// every 0 0$1 trigger yakotich_in_base = true do
2396: LD_EXP 28
2400: PUSH
2401: LD_INT 1
2403: EQUAL
2404: IFFALSE 2782
2406: GO 2408
2408: DISABLE
// begin Wait ( 5 5$0 ) ;
2409: LD_INT 10500
2411: PPUSH
2412: CALL_OW 67
// PlaceUnitArea ( Aleksandr , AleksandrSpawn , true ) ;
2416: LD_EXP 12
2420: PPUSH
2421: LD_INT 8
2423: PPUSH
2424: LD_INT 1
2426: PPUSH
2427: CALL_OW 49
// InGameOn ;
2431: CALL_OW 8
// DialogueOn ;
2435: CALL_OW 6
// SayRadio ( Aleksandr , 1Alek-Alek1 ) ;
2439: LD_EXP 12
2443: PPUSH
2444: LD_STRING 1Alek-Alek1
2446: PPUSH
2447: CALL_OW 94
// SayRadio ( Yakotich , 1Yak-Alek1 ) ;
2451: LD_EXP 1
2455: PPUSH
2456: LD_STRING 1Yak-Alek1
2458: PPUSH
2459: CALL_OW 94
// SayRadio ( Aleksandr , 1Alek-Alek2 ) ;
2463: LD_EXP 12
2467: PPUSH
2468: LD_STRING 1Alek-Alek2
2470: PPUSH
2471: CALL_OW 94
// SayRadio ( Mietek , 1Ryn-Alek1 ) ;
2475: LD_EXP 2
2479: PPUSH
2480: LD_STRING 1Ryn-Alek1
2482: PPUSH
2483: CALL_OW 94
// Say ( Mietek , 1Ryn-Alek2 ) ;
2487: LD_EXP 2
2491: PPUSH
2492: LD_STRING 1Ryn-Alek2
2494: PPUSH
2495: CALL_OW 88
// RevealFogArea ( 3 , River ) ;
2499: LD_INT 3
2501: PPUSH
2502: LD_INT 10
2504: PPUSH
2505: CALL_OW 332
// InGameOff ;
2509: CALL_OW 9
// DialogueOff ;
2513: CALL_OW 7
// Wait ( 2 2$0 ) ;
2517: LD_INT 4200
2519: PPUSH
2520: CALL_OW 67
// InGameOn ;
2524: CALL_OW 8
// DialogueOn ;
2528: CALL_OW 6
// SayRadio ( Maksim , 1Maks-Attack-01 ) ;
2532: LD_EXP 7
2536: PPUSH
2537: LD_STRING 1Maks-Attack-01
2539: PPUSH
2540: CALL_OW 94
// SayRadio ( Mietek , 1Ryn-Attack-01 ) ;
2544: LD_EXP 2
2548: PPUSH
2549: LD_STRING 1Ryn-Attack-01
2551: PPUSH
2552: CALL_OW 94
// SayRadio ( Maksim , 1Maks-Attack-02 ) ;
2556: LD_EXP 7
2560: PPUSH
2561: LD_STRING 1Maks-Attack-02
2563: PPUSH
2564: CALL_OW 94
// SayRadio ( Maksim , 1Maks-Attack-03 ) ;
2568: LD_EXP 7
2572: PPUSH
2573: LD_STRING 1Maks-Attack-03
2575: PPUSH
2576: CALL_OW 94
// Say ( Mietek , 1Ryn-Attack-02 ) ;
2580: LD_EXP 2
2584: PPUSH
2585: LD_STRING 1Ryn-Attack-02
2587: PPUSH
2588: CALL_OW 88
// ChangeMissionObjectives ( o10 ) ;
2592: LD_STRING o10
2594: PPUSH
2595: CALL_OW 337
// maksim_coming = true ;
2599: LD_ADDR_EXP 43
2603: PUSH
2604: LD_INT 1
2606: ST_TO_ADDR
// InGameOff ;
2607: CALL_OW 9
// DialogueOff ;
2611: CALL_OW 7
// Wait ( 2 2$0 ) ;
2615: LD_INT 4200
2617: PPUSH
2618: CALL_OW 67
// PlaceUnitArea ( Maksim , AmAttacks , false ) ;
2622: LD_EXP 7
2626: PPUSH
2627: LD_INT 6
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: CALL_OW 49
// PlaceUnitArea ( Fiodor , AmAttacks , false ) ;
2637: LD_EXP 8
2641: PPUSH
2642: LD_INT 6
2644: PPUSH
2645: LD_INT 0
2647: PPUSH
2648: CALL_OW 49
// PlaceUnitArea ( Aleksiej , AmAttacks , false ) ;
2652: LD_EXP 11
2656: PPUSH
2657: LD_INT 6
2659: PPUSH
2660: LD_INT 0
2662: PPUSH
2663: CALL_OW 49
// PlaceUnitArea ( Pavel , AmAttacks , false ) ;
2667: LD_EXP 9
2671: PPUSH
2672: LD_INT 6
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL_OW 49
// PlaceUnitArea ( Zakhar , AmAttacks , false ) ;
2682: LD_EXP 10
2686: PPUSH
2687: LD_INT 6
2689: PPUSH
2690: LD_INT 0
2692: PPUSH
2693: CALL_OW 49
// ComMoveToArea ( MaksimCrew , CheckPoint ) ;
2697: LD_EXP 14
2701: PPUSH
2702: LD_INT 3
2704: PPUSH
2705: CALL_OW 113
// Say ( Maksim , 1Maks-Attack-04 ) ;
2709: LD_EXP 7
2713: PPUSH
2714: LD_STRING 1Maks-Attack-04
2716: PPUSH
2717: CALL_OW 88
// Wait ( 0 0$8 ) ;
2721: LD_INT 280
2723: PPUSH
2724: CALL_OW 67
// InitAmerican ;
2728: CALL 1288 0 0
// Say ( AmCommander , 1Andrew-Attack ) ;
2732: LD_EXP 19
2736: PPUSH
2737: LD_STRING 1Andrew-Attack
2739: PPUSH
2740: CALL_OW 88
// ComMoveXY ( Americans , 48 , 42 ) ;
2744: LD_EXP 20
2748: PPUSH
2749: LD_INT 48
2751: PPUSH
2752: LD_INT 42
2754: PPUSH
2755: CALL_OW 111
// AddComAgressiveMove ( Americans , 26 , 16 ) ;
2759: LD_EXP 20
2763: PPUSH
2764: LD_INT 26
2766: PPUSH
2767: LD_INT 16
2769: PPUSH
2770: CALL_OW 174
// american_attack = true ;
2774: LD_ADDR_EXP 32
2778: PUSH
2779: LD_INT 1
2781: ST_TO_ADDR
// end ;
2782: END
// every 0 0$1 trigger american_attack = true and IsDead ( AmCommander ) do
2783: LD_EXP 32
2787: PUSH
2788: LD_INT 1
2790: EQUAL
2791: PUSH
2792: LD_EXP 19
2796: PPUSH
2797: CALL_OW 301
2801: AND
2802: IFFALSE 2847
2804: GO 2806
2806: DISABLE
// begin InGameOn ;
2807: CALL_OW 8
// Say ( Yakotich , 1Yak-Attack-01 ) ;
2811: LD_EXP 1
2815: PPUSH
2816: LD_STRING 1Yak-Attack-01
2818: PPUSH
2819: CALL_OW 88
// Say ( Yakotich , 1Yak-Attack-02 ) ;
2823: LD_EXP 1
2827: PPUSH
2828: LD_STRING 1Yak-Attack-02
2830: PPUSH
2831: CALL_OW 88
// end_of_the_mission = true ;
2835: LD_ADDR_EXP 36
2839: PUSH
2840: LD_INT 1
2842: ST_TO_ADDR
// InGameOff ;
2843: CALL_OW 9
// end ;
2847: END
// every 0 0$1 trigger end_of_the_mission = true and yakotich_in_base = true and IsDead ( AmCommander ) do
2848: LD_EXP 36
2852: PUSH
2853: LD_INT 1
2855: EQUAL
2856: PUSH
2857: LD_EXP 28
2861: PUSH
2862: LD_INT 1
2864: EQUAL
2865: AND
2866: PUSH
2867: LD_EXP 19
2871: PPUSH
2872: CALL_OW 301
2876: AND
2877: IFFALSE 3220
2879: GO 2881
2881: DISABLE
// begin AddMedal ( People , 1 ) ;
2882: LD_STRING People
2884: PPUSH
2885: LD_INT 1
2887: PPUSH
2888: CALL_OW 101
// if IsOk ( Aleksandr ) then
2892: LD_EXP 12
2896: PPUSH
2897: CALL_OW 302
2901: IFFALSE 2915
// AddMedal ( Aleksandr , 1 ) else
2903: LD_STRING Aleksandr
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: CALL_OW 101
2913: GO 2926
// AddMedal ( Aleksandr , - 1 ) ;
2915: LD_STRING Aleksandr
2917: PPUSH
2918: LD_INT 1
2920: NEG
2921: PPUSH
2922: CALL_OW 101
// if Researched ( 3 , 48 ) and Researched ( 3 , 47 ) and Researched ( 3 , 46 ) and vehicle_constructed = true then
2926: LD_INT 3
2928: PPUSH
2929: LD_INT 48
2931: PPUSH
2932: CALL_OW 325
2936: PUSH
2937: LD_INT 3
2939: PPUSH
2940: LD_INT 47
2942: PPUSH
2943: CALL_OW 325
2947: AND
2948: PUSH
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 46
2954: PPUSH
2955: CALL_OW 325
2959: AND
2960: PUSH
2961: LD_EXP 38
2965: PUSH
2966: LD_INT 1
2968: EQUAL
2969: AND
2970: IFFALSE 2984
// AddMedal ( Secondary , 1 ) else
2972: LD_STRING Secondary
2974: PPUSH
2975: LD_INT 1
2977: PPUSH
2978: CALL_OW 101
2982: GO 2995
// AddMedal ( Secondary , - 1 ) ;
2984: LD_STRING Secondary
2986: PPUSH
2987: LD_INT 1
2989: NEG
2990: PPUSH
2991: CALL_OW 101
// GiveMedals ( Medals ) ;
2995: LD_STRING Medals
2997: PPUSH
2998: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
3002: LD_INT 22
3004: PUSH
3005: LD_INT 3
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 23
3014: PUSH
3015: LD_INT 3
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: PUSH
3022: LD_INT 21
3024: PUSH
3025: LD_INT 1
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 69
3041: PPUSH
3042: CALL_OW 43
// SaveCharacters ( Yakotich , 01_Yakotich ) ;
3046: LD_EXP 1
3050: PPUSH
3051: LD_STRING 01_Yakotich
3053: PPUSH
3054: CALL_OW 38
// SaveCharacters ( Mietek , 01_Mietek ) ;
3058: LD_EXP 2
3062: PPUSH
3063: LD_STRING 01_Mietek
3065: PPUSH
3066: CALL_OW 38
// SaveCharacters ( Maksim , 01_Maksim ) ;
3070: LD_EXP 7
3074: PPUSH
3075: LD_STRING 01_Maksim
3077: PPUSH
3078: CALL_OW 38
// SaveCharacters ( Michail , 01_Michail ) ;
3082: LD_EXP 5
3086: PPUSH
3087: LD_STRING 01_Michail
3089: PPUSH
3090: CALL_OW 38
// SaveCharacters ( Vasilij , 01_Vasilij ) ;
3094: LD_EXP 4
3098: PPUSH
3099: LD_STRING 01_Vasilij
3101: PPUSH
3102: CALL_OW 38
// SaveCharacters ( Boris , 01_Boris ) ;
3106: LD_EXP 3
3110: PPUSH
3111: LD_STRING 01_Boris
3113: PPUSH
3114: CALL_OW 38
// SaveCharacters ( Constantin , 01_Constantin ) ;
3118: LD_EXP 6
3122: PPUSH
3123: LD_STRING 01_Constantin
3125: PPUSH
3126: CALL_OW 38
// SaveCharacters ( Fiodor , 01_Fiodor ) ;
3130: LD_EXP 8
3134: PPUSH
3135: LD_STRING 01_Fiodor
3137: PPUSH
3138: CALL_OW 38
// SaveCharacters ( Aleksiej , 01_Aleksiej ) ;
3142: LD_EXP 11
3146: PPUSH
3147: LD_STRING 01_Aleksiej
3149: PPUSH
3150: CALL_OW 38
// SaveCharacters ( Pavel , 01_Pavel ) ;
3154: LD_EXP 9
3158: PPUSH
3159: LD_STRING 01_Pavel
3161: PPUSH
3162: CALL_OW 38
// SaveCharacters ( Zakhar , 01_Zakhar ) ;
3166: LD_EXP 10
3170: PPUSH
3171: LD_STRING 01_Zakhar
3173: PPUSH
3174: CALL_OW 38
// if IsOk ( Aleksandr ) and GetSide ( Aleksandr ) = 3 then
3178: LD_EXP 12
3182: PPUSH
3183: CALL_OW 302
3187: PUSH
3188: LD_EXP 12
3192: PPUSH
3193: CALL_OW 255
3197: PUSH
3198: LD_INT 3
3200: EQUAL
3201: AND
3202: IFFALSE 3216
// SaveCharacters ( Aleksandr , 01_Aleksandr ) ;
3204: LD_EXP 12
3208: PPUSH
3209: LD_STRING 01_Aleksandr
3211: PPUSH
3212: CALL_OW 38
// YouWin ;
3216: CALL_OW 103
// end ;
3220: END
// every 0 0$1 trigger end_of_the_mission = true and yakotich_in_base = true and IsDead ( AmCommander ) do
3221: LD_EXP 36
3225: PUSH
3226: LD_INT 1
3228: EQUAL
3229: PUSH
3230: LD_EXP 28
3234: PUSH
3235: LD_INT 1
3237: EQUAL
3238: AND
3239: PUSH
3240: LD_EXP 19
3244: PPUSH
3245: CALL_OW 301
3249: AND
3250: IFFALSE 3299
3252: GO 3254
3254: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= 1 then
3255: LD_INT 22
3257: PUSH
3258: LD_INT 3
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: LD_INT 21
3267: PUSH
3268: LD_INT 2
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PPUSH
3279: CALL_OW 69
3283: PUSH
3284: LD_INT 1
3286: GREATEREQUAL
3287: IFFALSE 3299
// begin SaveVariable ( 1 , 01_Vehicle ) ;
3289: LD_INT 1
3291: PPUSH
3292: LD_STRING 01_Vehicle
3294: PPUSH
3295: CALL_OW 39
// end ; end ; end_of_file
3299: END
// every 2 2$0 do
3300: GO 3302
3302: DISABLE
// begin CreateCratesArea ( rand ( 2 , 5 ) , BaseArea , true ) ;
3303: LD_INT 2
3305: PPUSH
3306: LD_INT 5
3308: PPUSH
3309: CALL_OW 12
3313: PPUSH
3314: LD_INT 9
3316: PPUSH
3317: LD_INT 1
3319: PPUSH
3320: CALL_OW 55
// end ; end_of_file
3324: END
// on UnitDestroyed ( un ) do begin if GetSide ( un ) = 1 then
3325: LD_VAR 0 1
3329: PPUSH
3330: CALL_OW 255
3334: PUSH
3335: LD_INT 1
3337: EQUAL
3338: IFFALSE 3354
// begin KillCounter := KillCounter + 1 ;
3340: LD_ADDR_EXP 21
3344: PUSH
3345: LD_EXP 21
3349: PUSH
3350: LD_INT 1
3352: PLUS
3353: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
3354: LD_VAR 0 1
3358: PUSH
3359: LD_INT 22
3361: PUSH
3362: LD_INT 3
3364: PUSH
3365: EMPTY
3366: LIST
3367: LIST
3368: PUSH
3369: LD_INT 3
3371: PUSH
3372: LD_INT 23
3374: PUSH
3375: LD_INT 0
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 21
3388: PUSH
3389: LD_INT 1
3391: PUSH
3392: EMPTY
3393: LIST
3394: LIST
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: LIST
3400: PPUSH
3401: CALL_OW 69
3405: IN
3406: IFFALSE 3415
// begin YouLost ( PeopleDead ) ;
3408: LD_STRING PeopleDead
3410: PPUSH
3411: CALL_OW 104
// end ; end ;
3415: PPOPN 1
3417: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_breastwork and breastwork_builded = false then
3418: LD_VAR 0 1
3422: PPUSH
3423: CALL_OW 266
3427: PUSH
3428: LD_INT 31
3430: EQUAL
3431: PUSH
3432: LD_EXP 41
3436: PUSH
3437: LD_INT 0
3439: EQUAL
3440: AND
3441: IFFALSE 3451
// begin breastwork_builded = true ;
3443: LD_ADDR_EXP 41
3447: PUSH
3448: LD_INT 1
3450: ST_TO_ADDR
// end ; if GetBType ( b ) = b_armoury and armoury_builded = false then
3451: LD_VAR 0 1
3455: PPUSH
3456: CALL_OW 266
3460: PUSH
3461: LD_INT 4
3463: EQUAL
3464: PUSH
3465: LD_EXP 42
3469: PUSH
3470: LD_INT 0
3472: EQUAL
3473: AND
3474: IFFALSE 3484
// begin armoury_builded = true ;
3476: LD_ADDR_EXP 42
3480: PUSH
3481: LD_INT 1
3483: ST_TO_ADDR
// end ; if GetBType ( b ) = b_workshop and GetSide ( b ) = 3 then
3484: LD_VAR 0 1
3488: PPUSH
3489: CALL_OW 266
3493: PUSH
3494: LD_INT 2
3496: EQUAL
3497: PUSH
3498: LD_VAR 0 1
3502: PPUSH
3503: CALL_OW 255
3507: PUSH
3508: LD_INT 3
3510: EQUAL
3511: AND
3512: IFFALSE 3526
// begin Say ( Michail , 1Mich-Workshop ) ;
3514: LD_EXP 5
3518: PPUSH
3519: LD_STRING 1Mich-Workshop
3521: PPUSH
3522: CALL_OW 88
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 then
3526: LD_VAR 0 1
3530: PPUSH
3531: CALL_OW 266
3535: PUSH
3536: LD_INT 6
3538: EQUAL
3539: PUSH
3540: LD_VAR 0 1
3544: PPUSH
3545: CALL_OW 255
3549: PUSH
3550: LD_INT 3
3552: EQUAL
3553: AND
3554: IFFALSE 3568
// begin Say ( Vasilij , 1Vas-06 ) ;
3556: LD_EXP 4
3560: PPUSH
3561: LD_STRING 1Vas-06
3563: PPUSH
3564: CALL_OW 88
// end ; end ;
3568: PPOPN 1
3570: END
// every 0 0$1 trigger breastwork_builded = true and armoury_builded = true do
3571: LD_EXP 41
3575: PUSH
3576: LD_INT 1
3578: EQUAL
3579: PUSH
3580: LD_EXP 42
3584: PUSH
3585: LD_INT 1
3587: EQUAL
3588: AND
3589: IFFALSE 3601
3591: GO 3593
3593: DISABLE
// begin SetAchievement ( ACH_FORT ) ;
3594: LD_STRING ACH_FORT
3596: PPUSH
3597: CALL_OW 543
// end ;
3601: END
// every 0 0$1 trigger See ( 3 , Aleksandr ) do
3602: LD_INT 3
3604: PPUSH
3605: LD_EXP 12
3609: PPUSH
3610: CALL_OW 292
3614: IFFALSE 3694
3616: GO 3618
3618: DISABLE
// begin DialogueOn ;
3619: CALL_OW 6
// Say ( Aleksandr , 1Alek-Alek3 ) ;
3623: LD_EXP 12
3627: PPUSH
3628: LD_STRING 1Alek-Alek3
3630: PPUSH
3631: CALL_OW 88
// Say ( Yakotich , 1Yak-Alek2 ) ;
3635: LD_EXP 1
3639: PPUSH
3640: LD_STRING 1Yak-Alek2
3642: PPUSH
3643: CALL_OW 88
// Say ( Aleksandr , 1Alek-Alek4 ) ;
3647: LD_EXP 12
3651: PPUSH
3652: LD_STRING 1Alek-Alek4
3654: PPUSH
3655: CALL_OW 88
// Say ( Mietek , 1Ryn-Alek3 ) ;
3659: LD_EXP 2
3663: PPUSH
3664: LD_STRING 1Ryn-Alek3
3666: PPUSH
3667: CALL_OW 88
// SetSide ( Aleksandr , 3 ) ;
3671: LD_EXP 12
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: CALL_OW 235
// DialogueOff ;
3683: CALL_OW 7
// SetAchievement ( ACH_ALEKSANDR ) ;
3687: LD_STRING ACH_ALEKSANDR
3689: PPUSH
3690: CALL_OW 543
// end ;
3694: END
// every 0 0$1 trigger Researched ( 3 , 46 ) do
3695: LD_INT 3
3697: PPUSH
3698: LD_INT 46
3700: PPUSH
3701: CALL_OW 325
3705: IFFALSE 3750
3707: GO 3709
3709: DISABLE
// begin DialogueOn ;
3710: CALL_OW 6
// Say ( Vasilij , 1Vas-Power-1 ) ;
3714: LD_EXP 4
3718: PPUSH
3719: LD_STRING 1Vas-Power-1
3721: PPUSH
3722: CALL_OW 88
// Say ( Yakotich , 1Yak-Power-1 ) ;
3726: LD_EXP 1
3730: PPUSH
3731: LD_STRING 1Yak-Power-1
3733: PPUSH
3734: CALL_OW 88
// DialogueOff ;
3738: CALL_OW 7
// oil_power_researched := true ;
3742: LD_ADDR_EXP 33
3746: PUSH
3747: LD_INT 1
3749: ST_TO_ADDR
// end ;
3750: END
// every 0 0$1 trigger Researched ( 3 , 47 ) do
3751: LD_INT 3
3753: PPUSH
3754: LD_INT 47
3756: PPUSH
3757: CALL_OW 325
3761: IFFALSE 3794
3763: GO 3765
3765: DISABLE
// begin DialogueOn ;
3766: CALL_OW 6
// Say ( Vasilij , 1Vas-Engine-1 ) ;
3770: LD_EXP 4
3774: PPUSH
3775: LD_STRING 1Vas-Engine-1
3777: PPUSH
3778: CALL_OW 88
// DialogueOff ;
3782: CALL_OW 7
// oil_engine_researched := true ;
3786: LD_ADDR_EXP 34
3790: PUSH
3791: LD_INT 1
3793: ST_TO_ADDR
// end ;
3794: END
// every 0 0$1 trigger Researched ( 3 , 48 ) do
3795: LD_INT 3
3797: PPUSH
3798: LD_INT 48
3800: PPUSH
3801: CALL_OW 325
3805: IFFALSE 3862
3807: GO 3809
3809: DISABLE
// begin DialogueOn ;
3810: CALL_OW 6
// Say ( Vasilij , 1Vas-Research-1 ) ;
3814: LD_EXP 4
3818: PPUSH
3819: LD_STRING 1Vas-Research-1
3821: PPUSH
3822: CALL_OW 88
// Say ( Yakotich , 1Yak-Research-1 ) ;
3826: LD_EXP 1
3830: PPUSH
3831: LD_STRING 1Yak-Research-1
3833: PPUSH
3834: CALL_OW 88
// Say ( Vasilij , 1Vas-Research-2 ) ;
3838: LD_EXP 4
3842: PPUSH
3843: LD_STRING 1Vas-Research-2
3845: PPUSH
3846: CALL_OW 88
// DialogueOff ;
3850: CALL_OW 7
// technology1_researched := true ;
3854: LD_ADDR_EXP 35
3858: PUSH
3859: LD_INT 1
3861: ST_TO_ADDR
// end ;
3862: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_side , 3 ] ] ) do
3863: LD_INT 21
3865: PUSH
3866: LD_INT 2
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: PUSH
3873: LD_INT 22
3875: PUSH
3876: LD_INT 3
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PUSH
3883: EMPTY
3884: LIST
3885: LIST
3886: PPUSH
3887: CALL_OW 69
3891: IFFALSE 3989
3893: GO 3895
3895: DISABLE
// begin InGameOn ;
3896: CALL_OW 8
// CenterOnUnits ( RuDep ) ;
3900: LD_INT 15
3902: PPUSH
3903: CALL_OW 85
// Wait ( 0 0$3 ) ;
3907: LD_INT 105
3909: PPUSH
3910: CALL_OW 67
// DialogueOn ;
3914: CALL_OW 6
// Say ( Michail , 1Mich-Tank-1 ) ;
3918: LD_EXP 5
3922: PPUSH
3923: LD_STRING 1Mich-Tank-1
3925: PPUSH
3926: CALL_OW 88
// Say ( Yakotich , 1Yak-Tank-1 ) ;
3930: LD_EXP 1
3934: PPUSH
3935: LD_STRING 1Yak-Tank-1
3937: PPUSH
3938: CALL_OW 88
// Say ( Michail , 1Mich-Tank-2 ) ;
3942: LD_EXP 5
3946: PPUSH
3947: LD_STRING 1Mich-Tank-2
3949: PPUSH
3950: CALL_OW 88
// Say ( Yakotich , 1Yak-Tank-2 ) ;
3954: LD_EXP 1
3958: PPUSH
3959: LD_STRING 1Yak-Tank-2
3961: PPUSH
3962: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
3966: LD_STRING o6
3968: PPUSH
3969: CALL_OW 337
// DialogueOff ;
3973: CALL_OW 7
// InGameOff ;
3977: CALL_OW 9
// vehicle_constructed = true ;
3981: LD_ADDR_EXP 38
3985: PUSH
3986: LD_INT 1
3988: ST_TO_ADDR
// end ;
3989: END
// every 0 0$1 trigger technology1_researched = true and oil_engine_researched = true and oil_power_researched = true and vehicle_constructed = true do
3990: LD_EXP 35
3994: PUSH
3995: LD_INT 1
3997: EQUAL
3998: PUSH
3999: LD_EXP 34
4003: PUSH
4004: LD_INT 1
4006: EQUAL
4007: AND
4008: PUSH
4009: LD_EXP 33
4013: PUSH
4014: LD_INT 1
4016: EQUAL
4017: AND
4018: PUSH
4019: LD_EXP 38
4023: PUSH
4024: LD_INT 1
4026: EQUAL
4027: AND
4028: IFFALSE 4040
4030: GO 4032
4032: DISABLE
// begin ChangeMissionObjectives ( o5 ) ;
4033: LD_STRING o5
4035: PPUSH
4036: CALL_OW 337
// end ;
4040: END
// every 0 0$1 trigger IsInArea ( Maksim , BaseArea ) do
4041: LD_EXP 7
4045: PPUSH
4046: LD_INT 9
4048: PPUSH
4049: CALL_OW 308
4053: IFFALSE 4070
4055: GO 4057
4057: DISABLE
// begin SetSide ( MaksimCrew , 3 ) ;
4058: LD_EXP 14
4062: PPUSH
4063: LD_INT 3
4065: PPUSH
4066: CALL_OW 235
// end ;
4070: END
// every 0 0$1 do
4071: GO 4073
4073: DISABLE
// begin SetAchievementEX ( ID_HUNT , KillCounter ) ;
4074: LD_STRING ID_HUNT
4076: PPUSH
4077: LD_EXP 21
4081: PPUSH
4082: CALL_OW 564
// enable ;
4086: ENABLE
// end ; end_of_file
4087: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4088: LD_INT 0
4090: PPUSH
// ar_miner := 81 ;
4091: LD_ADDR_EXP 51
4095: PUSH
4096: LD_INT 81
4098: ST_TO_ADDR
// ar_crane := 88 ;
4099: LD_ADDR_EXP 50
4103: PUSH
4104: LD_INT 88
4106: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4107: LD_ADDR_EXP 45
4111: PUSH
4112: LD_INT 89
4114: ST_TO_ADDR
// us_hack := 99 ;
4115: LD_ADDR_EXP 46
4119: PUSH
4120: LD_INT 99
4122: ST_TO_ADDR
// us_artillery := 97 ;
4123: LD_ADDR_EXP 47
4127: PUSH
4128: LD_INT 97
4130: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4131: LD_ADDR_EXP 48
4135: PUSH
4136: LD_INT 91
4138: ST_TO_ADDR
// ar_mortar := 92 ;
4139: LD_ADDR_EXP 49
4143: PUSH
4144: LD_INT 92
4146: ST_TO_ADDR
// ru_flamethrower := 93 ;
4147: LD_ADDR_EXP 52
4151: PUSH
4152: LD_INT 93
4154: ST_TO_ADDR
// ru_radar := 98 ;
4155: LD_ADDR_EXP 44
4159: PUSH
4160: LD_INT 98
4162: ST_TO_ADDR
// tech_Artillery := 80 ;
4163: LD_ADDR_EXP 53
4167: PUSH
4168: LD_INT 80
4170: ST_TO_ADDR
// tech_RadMat := 81 ;
4171: LD_ADDR_EXP 54
4175: PUSH
4176: LD_INT 81
4178: ST_TO_ADDR
// tech_BasicTools := 82 ;
4179: LD_ADDR_EXP 55
4183: PUSH
4184: LD_INT 82
4186: ST_TO_ADDR
// tech_Cargo := 83 ;
4187: LD_ADDR_EXP 56
4191: PUSH
4192: LD_INT 83
4194: ST_TO_ADDR
// tech_Track := 84 ;
4195: LD_ADDR_EXP 57
4199: PUSH
4200: LD_INT 84
4202: ST_TO_ADDR
// tech_Crane := 85 ;
4203: LD_ADDR_EXP 58
4207: PUSH
4208: LD_INT 85
4210: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4211: LD_ADDR_EXP 59
4215: PUSH
4216: LD_INT 86
4218: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4219: LD_ADDR_EXP 60
4223: PUSH
4224: LD_INT 87
4226: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4227: LD_ADDR_EXP 61
4231: PUSH
4232: LD_INT 88
4234: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
4235: LD_ADDR_EXP 62
4239: PUSH
4240: LD_INT 90
4242: ST_TO_ADDR
// class_mastodont := 31 ;
4243: LD_ADDR_EXP 63
4247: PUSH
4248: LD_INT 31
4250: ST_TO_ADDR
// class_horse := 21 ;
4251: LD_ADDR_EXP 64
4255: PUSH
4256: LD_INT 21
4258: ST_TO_ADDR
// end ; end_of_file
4259: LD_VAR 0 1
4263: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4264: LD_INT 0
4266: PPUSH
4267: PPUSH
// if exist_mode then
4268: LD_VAR 0 2
4272: IFFALSE 4297
// unit := CreateCharacter ( prefix & ident ) else
4274: LD_ADDR_VAR 0 5
4278: PUSH
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 1
4288: STR
4289: PPUSH
4290: CALL_OW 34
4294: ST_TO_ADDR
4295: GO 4312
// unit := NewCharacter ( ident ) ;
4297: LD_ADDR_VAR 0 5
4301: PUSH
4302: LD_VAR 0 1
4306: PPUSH
4307: CALL_OW 25
4311: ST_TO_ADDR
// result := unit ;
4312: LD_ADDR_VAR 0 4
4316: PUSH
4317: LD_VAR 0 5
4321: ST_TO_ADDR
// end ;
4322: LD_VAR 0 4
4326: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4327: LD_INT 0
4329: PPUSH
4330: PPUSH
// if not side or not nation then
4331: LD_VAR 0 1
4335: NOT
4336: PUSH
4337: LD_VAR 0 2
4341: NOT
4342: OR
4343: IFFALSE 4347
// exit ;
4345: GO 5115
// case nation of nation_american :
4347: LD_VAR 0 2
4351: PUSH
4352: LD_INT 1
4354: DOUBLE
4355: EQUAL
4356: IFTRUE 4360
4358: GO 4574
4360: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4361: LD_ADDR_VAR 0 4
4365: PUSH
4366: LD_INT 35
4368: PUSH
4369: LD_INT 45
4371: PUSH
4372: LD_INT 46
4374: PUSH
4375: LD_INT 47
4377: PUSH
4378: LD_INT 82
4380: PUSH
4381: LD_INT 83
4383: PUSH
4384: LD_INT 84
4386: PUSH
4387: LD_INT 85
4389: PUSH
4390: LD_INT 86
4392: PUSH
4393: LD_INT 1
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: LD_INT 6
4401: PUSH
4402: LD_INT 15
4404: PUSH
4405: LD_INT 16
4407: PUSH
4408: LD_INT 7
4410: PUSH
4411: LD_INT 12
4413: PUSH
4414: LD_INT 13
4416: PUSH
4417: LD_INT 10
4419: PUSH
4420: LD_INT 14
4422: PUSH
4423: LD_INT 20
4425: PUSH
4426: LD_INT 21
4428: PUSH
4429: LD_INT 22
4431: PUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 32
4437: PUSH
4438: LD_INT 27
4440: PUSH
4441: LD_INT 36
4443: PUSH
4444: LD_INT 69
4446: PUSH
4447: LD_INT 39
4449: PUSH
4450: LD_INT 34
4452: PUSH
4453: LD_INT 40
4455: PUSH
4456: LD_INT 48
4458: PUSH
4459: LD_INT 49
4461: PUSH
4462: LD_INT 50
4464: PUSH
4465: LD_INT 51
4467: PUSH
4468: LD_INT 52
4470: PUSH
4471: LD_INT 53
4473: PUSH
4474: LD_INT 54
4476: PUSH
4477: LD_INT 55
4479: PUSH
4480: LD_INT 56
4482: PUSH
4483: LD_INT 57
4485: PUSH
4486: LD_INT 58
4488: PUSH
4489: LD_INT 59
4491: PUSH
4492: LD_INT 60
4494: PUSH
4495: LD_INT 61
4497: PUSH
4498: LD_INT 62
4500: PUSH
4501: LD_INT 80
4503: PUSH
4504: LD_INT 82
4506: PUSH
4507: LD_INT 83
4509: PUSH
4510: LD_INT 84
4512: PUSH
4513: LD_INT 85
4515: PUSH
4516: LD_INT 86
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: ST_TO_ADDR
4572: GO 5039
4574: LD_INT 2
4576: DOUBLE
4577: EQUAL
4578: IFTRUE 4582
4580: GO 4808
4582: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
4583: LD_ADDR_VAR 0 4
4587: PUSH
4588: LD_INT 35
4590: PUSH
4591: LD_INT 45
4593: PUSH
4594: LD_INT 46
4596: PUSH
4597: LD_INT 47
4599: PUSH
4600: LD_INT 82
4602: PUSH
4603: LD_INT 83
4605: PUSH
4606: LD_INT 84
4608: PUSH
4609: LD_INT 85
4611: PUSH
4612: LD_INT 87
4614: PUSH
4615: LD_INT 70
4617: PUSH
4618: LD_INT 1
4620: PUSH
4621: LD_INT 11
4623: PUSH
4624: LD_INT 3
4626: PUSH
4627: LD_INT 4
4629: PUSH
4630: LD_INT 5
4632: PUSH
4633: LD_INT 6
4635: PUSH
4636: LD_INT 15
4638: PUSH
4639: LD_INT 18
4641: PUSH
4642: LD_INT 7
4644: PUSH
4645: LD_INT 17
4647: PUSH
4648: LD_INT 8
4650: PUSH
4651: LD_INT 20
4653: PUSH
4654: LD_INT 21
4656: PUSH
4657: LD_INT 22
4659: PUSH
4660: LD_INT 72
4662: PUSH
4663: LD_INT 26
4665: PUSH
4666: LD_INT 69
4668: PUSH
4669: LD_INT 39
4671: PUSH
4672: LD_INT 40
4674: PUSH
4675: LD_INT 41
4677: PUSH
4678: LD_INT 42
4680: PUSH
4681: LD_INT 43
4683: PUSH
4684: LD_INT 48
4686: PUSH
4687: LD_INT 49
4689: PUSH
4690: LD_INT 50
4692: PUSH
4693: LD_INT 51
4695: PUSH
4696: LD_INT 52
4698: PUSH
4699: LD_INT 53
4701: PUSH
4702: LD_INT 54
4704: PUSH
4705: LD_INT 55
4707: PUSH
4708: LD_INT 56
4710: PUSH
4711: LD_INT 60
4713: PUSH
4714: LD_INT 61
4716: PUSH
4717: LD_INT 62
4719: PUSH
4720: LD_INT 66
4722: PUSH
4723: LD_INT 67
4725: PUSH
4726: LD_INT 68
4728: PUSH
4729: LD_INT 81
4731: PUSH
4732: LD_INT 82
4734: PUSH
4735: LD_INT 83
4737: PUSH
4738: LD_INT 84
4740: PUSH
4741: LD_INT 85
4743: PUSH
4744: LD_INT 87
4746: PUSH
4747: LD_INT 88
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: ST_TO_ADDR
4806: GO 5039
4808: LD_INT 3
4810: DOUBLE
4811: EQUAL
4812: IFTRUE 4816
4814: GO 5038
4816: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4817: LD_ADDR_VAR 0 4
4821: PUSH
4822: LD_INT 46
4824: PUSH
4825: LD_INT 47
4827: PUSH
4828: LD_INT 1
4830: PUSH
4831: LD_INT 2
4833: PUSH
4834: LD_INT 82
4836: PUSH
4837: LD_INT 83
4839: PUSH
4840: LD_INT 84
4842: PUSH
4843: LD_INT 85
4845: PUSH
4846: LD_INT 86
4848: PUSH
4849: LD_INT 11
4851: PUSH
4852: LD_INT 9
4854: PUSH
4855: LD_INT 20
4857: PUSH
4858: LD_INT 19
4860: PUSH
4861: LD_INT 21
4863: PUSH
4864: LD_INT 24
4866: PUSH
4867: LD_INT 22
4869: PUSH
4870: LD_INT 25
4872: PUSH
4873: LD_INT 28
4875: PUSH
4876: LD_INT 29
4878: PUSH
4879: LD_INT 30
4881: PUSH
4882: LD_INT 31
4884: PUSH
4885: LD_INT 37
4887: PUSH
4888: LD_INT 38
4890: PUSH
4891: LD_INT 32
4893: PUSH
4894: LD_INT 27
4896: PUSH
4897: LD_INT 33
4899: PUSH
4900: LD_INT 69
4902: PUSH
4903: LD_INT 39
4905: PUSH
4906: LD_INT 34
4908: PUSH
4909: LD_INT 40
4911: PUSH
4912: LD_INT 71
4914: PUSH
4915: LD_INT 23
4917: PUSH
4918: LD_INT 44
4920: PUSH
4921: LD_INT 48
4923: PUSH
4924: LD_INT 49
4926: PUSH
4927: LD_INT 50
4929: PUSH
4930: LD_INT 51
4932: PUSH
4933: LD_INT 52
4935: PUSH
4936: LD_INT 53
4938: PUSH
4939: LD_INT 54
4941: PUSH
4942: LD_INT 55
4944: PUSH
4945: LD_INT 56
4947: PUSH
4948: LD_INT 57
4950: PUSH
4951: LD_INT 58
4953: PUSH
4954: LD_INT 59
4956: PUSH
4957: LD_INT 63
4959: PUSH
4960: LD_INT 64
4962: PUSH
4963: LD_INT 65
4965: PUSH
4966: LD_INT 82
4968: PUSH
4969: LD_INT 83
4971: PUSH
4972: LD_INT 84
4974: PUSH
4975: LD_INT 85
4977: PUSH
4978: LD_INT 86
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: ST_TO_ADDR
5036: GO 5039
5038: POP
// if state > - 1 and state < 3 then
5039: LD_VAR 0 3
5043: PUSH
5044: LD_INT 1
5046: NEG
5047: GREATER
5048: PUSH
5049: LD_VAR 0 3
5053: PUSH
5054: LD_INT 3
5056: LESS
5057: AND
5058: IFFALSE 5115
// for i in result do
5060: LD_ADDR_VAR 0 5
5064: PUSH
5065: LD_VAR 0 4
5069: PUSH
5070: FOR_IN
5071: IFFALSE 5113
// if GetTech ( i , side ) <> state then
5073: LD_VAR 0 5
5077: PPUSH
5078: LD_VAR 0 1
5082: PPUSH
5083: CALL_OW 321
5087: PUSH
5088: LD_VAR 0 3
5092: NONEQUAL
5093: IFFALSE 5111
// result := result diff i ;
5095: LD_ADDR_VAR 0 4
5099: PUSH
5100: LD_VAR 0 4
5104: PUSH
5105: LD_VAR 0 5
5109: DIFF
5110: ST_TO_ADDR
5111: GO 5070
5113: POP
5114: POP
// end ;
5115: LD_VAR 0 4
5119: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5120: LD_INT 0
5122: PPUSH
5123: PPUSH
5124: PPUSH
// result := true ;
5125: LD_ADDR_VAR 0 3
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5133: LD_ADDR_VAR 0 5
5137: PUSH
5138: LD_VAR 0 2
5142: PPUSH
5143: CALL_OW 480
5147: ST_TO_ADDR
// if not tmp then
5148: LD_VAR 0 5
5152: NOT
5153: IFFALSE 5157
// exit ;
5155: GO 5206
// for i in tmp do
5157: LD_ADDR_VAR 0 4
5161: PUSH
5162: LD_VAR 0 5
5166: PUSH
5167: FOR_IN
5168: IFFALSE 5204
// if GetTech ( i , side ) <> state_researched then
5170: LD_VAR 0 4
5174: PPUSH
5175: LD_VAR 0 1
5179: PPUSH
5180: CALL_OW 321
5184: PUSH
5185: LD_INT 2
5187: NONEQUAL
5188: IFFALSE 5202
// begin result := false ;
5190: LD_ADDR_VAR 0 3
5194: PUSH
5195: LD_INT 0
5197: ST_TO_ADDR
// exit ;
5198: POP
5199: POP
5200: GO 5206
// end ;
5202: GO 5167
5204: POP
5205: POP
// end ;
5206: LD_VAR 0 3
5210: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5211: LD_INT 0
5213: PPUSH
5214: PPUSH
5215: PPUSH
5216: PPUSH
5217: PPUSH
5218: PPUSH
5219: PPUSH
5220: PPUSH
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5226: LD_VAR 0 1
5230: NOT
5231: PUSH
5232: LD_VAR 0 1
5236: PPUSH
5237: CALL_OW 257
5241: PUSH
5242: LD_INT 9
5244: NONEQUAL
5245: OR
5246: IFFALSE 5250
// exit ;
5248: GO 5823
// side := GetSide ( unit ) ;
5250: LD_ADDR_VAR 0 9
5254: PUSH
5255: LD_VAR 0 1
5259: PPUSH
5260: CALL_OW 255
5264: ST_TO_ADDR
// tech_space := tech_spacanom ;
5265: LD_ADDR_VAR 0 12
5269: PUSH
5270: LD_INT 29
5272: ST_TO_ADDR
// tech_time := tech_taurad ;
5273: LD_ADDR_VAR 0 13
5277: PUSH
5278: LD_INT 28
5280: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5281: LD_ADDR_VAR 0 11
5285: PUSH
5286: LD_VAR 0 1
5290: PPUSH
5291: CALL_OW 310
5295: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5296: LD_VAR 0 11
5300: PPUSH
5301: CALL_OW 247
5305: PUSH
5306: LD_INT 2
5308: EQUAL
5309: IFFALSE 5313
// exit ;
5311: GO 5823
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5313: LD_ADDR_VAR 0 8
5317: PUSH
5318: LD_INT 81
5320: PUSH
5321: LD_VAR 0 9
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: PUSH
5330: LD_INT 3
5332: PUSH
5333: LD_INT 21
5335: PUSH
5336: LD_INT 3
5338: PUSH
5339: EMPTY
5340: LIST
5341: LIST
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PPUSH
5351: CALL_OW 69
5355: ST_TO_ADDR
// if not tmp then
5356: LD_VAR 0 8
5360: NOT
5361: IFFALSE 5365
// exit ;
5363: GO 5823
// if in_unit then
5365: LD_VAR 0 11
5369: IFFALSE 5393
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5371: LD_ADDR_VAR 0 10
5375: PUSH
5376: LD_VAR 0 8
5380: PPUSH
5381: LD_VAR 0 11
5385: PPUSH
5386: CALL_OW 74
5390: ST_TO_ADDR
5391: GO 5413
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5393: LD_ADDR_VAR 0 10
5397: PUSH
5398: LD_VAR 0 8
5402: PPUSH
5403: LD_VAR 0 1
5407: PPUSH
5408: CALL_OW 74
5412: ST_TO_ADDR
// if not enemy then
5413: LD_VAR 0 10
5417: NOT
5418: IFFALSE 5422
// exit ;
5420: GO 5823
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5422: LD_VAR 0 11
5426: PUSH
5427: LD_VAR 0 11
5431: PPUSH
5432: LD_VAR 0 10
5436: PPUSH
5437: CALL_OW 296
5441: PUSH
5442: LD_INT 13
5444: GREATER
5445: AND
5446: PUSH
5447: LD_VAR 0 1
5451: PPUSH
5452: LD_VAR 0 10
5456: PPUSH
5457: CALL_OW 296
5461: PUSH
5462: LD_INT 12
5464: GREATER
5465: OR
5466: IFFALSE 5470
// exit ;
5468: GO 5823
// missile := [ 1 ] ;
5470: LD_ADDR_VAR 0 14
5474: PUSH
5475: LD_INT 1
5477: PUSH
5478: EMPTY
5479: LIST
5480: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5481: LD_VAR 0 9
5485: PPUSH
5486: LD_VAR 0 12
5490: PPUSH
5491: CALL_OW 325
5495: IFFALSE 5524
// missile := Replace ( missile , missile + 1 , 2 ) ;
5497: LD_ADDR_VAR 0 14
5501: PUSH
5502: LD_VAR 0 14
5506: PPUSH
5507: LD_VAR 0 14
5511: PUSH
5512: LD_INT 1
5514: PLUS
5515: PPUSH
5516: LD_INT 2
5518: PPUSH
5519: CALL_OW 1
5523: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5524: LD_VAR 0 9
5528: PPUSH
5529: LD_VAR 0 13
5533: PPUSH
5534: CALL_OW 325
5538: PUSH
5539: LD_VAR 0 10
5543: PPUSH
5544: CALL_OW 255
5548: PPUSH
5549: LD_VAR 0 13
5553: PPUSH
5554: CALL_OW 325
5558: NOT
5559: AND
5560: IFFALSE 5589
// missile := Replace ( missile , missile + 1 , 3 ) ;
5562: LD_ADDR_VAR 0 14
5566: PUSH
5567: LD_VAR 0 14
5571: PPUSH
5572: LD_VAR 0 14
5576: PUSH
5577: LD_INT 1
5579: PLUS
5580: PPUSH
5581: LD_INT 3
5583: PPUSH
5584: CALL_OW 1
5588: ST_TO_ADDR
// if missile < 2 then
5589: LD_VAR 0 14
5593: PUSH
5594: LD_INT 2
5596: LESS
5597: IFFALSE 5601
// exit ;
5599: GO 5823
// x := GetX ( enemy ) ;
5601: LD_ADDR_VAR 0 4
5605: PUSH
5606: LD_VAR 0 10
5610: PPUSH
5611: CALL_OW 250
5615: ST_TO_ADDR
// y := GetY ( enemy ) ;
5616: LD_ADDR_VAR 0 5
5620: PUSH
5621: LD_VAR 0 10
5625: PPUSH
5626: CALL_OW 251
5630: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5631: LD_ADDR_VAR 0 6
5635: PUSH
5636: LD_VAR 0 4
5640: PUSH
5641: LD_INT 1
5643: NEG
5644: PPUSH
5645: LD_INT 1
5647: PPUSH
5648: CALL_OW 12
5652: PLUS
5653: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5654: LD_ADDR_VAR 0 7
5658: PUSH
5659: LD_VAR 0 5
5663: PUSH
5664: LD_INT 1
5666: NEG
5667: PPUSH
5668: LD_INT 1
5670: PPUSH
5671: CALL_OW 12
5675: PLUS
5676: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5677: LD_VAR 0 6
5681: PPUSH
5682: LD_VAR 0 7
5686: PPUSH
5687: CALL_OW 488
5691: NOT
5692: IFFALSE 5714
// begin _x := x ;
5694: LD_ADDR_VAR 0 6
5698: PUSH
5699: LD_VAR 0 4
5703: ST_TO_ADDR
// _y := y ;
5704: LD_ADDR_VAR 0 7
5708: PUSH
5709: LD_VAR 0 5
5713: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5714: LD_ADDR_VAR 0 3
5718: PUSH
5719: LD_INT 1
5721: PPUSH
5722: LD_VAR 0 14
5726: PPUSH
5727: CALL_OW 12
5731: ST_TO_ADDR
// case i of 1 :
5732: LD_VAR 0 3
5736: PUSH
5737: LD_INT 1
5739: DOUBLE
5740: EQUAL
5741: IFTRUE 5745
5743: GO 5762
5745: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5746: LD_VAR 0 1
5750: PPUSH
5751: LD_VAR 0 10
5755: PPUSH
5756: CALL_OW 115
5760: GO 5823
5762: LD_INT 2
5764: DOUBLE
5765: EQUAL
5766: IFTRUE 5770
5768: GO 5792
5770: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5771: LD_VAR 0 1
5775: PPUSH
5776: LD_VAR 0 6
5780: PPUSH
5781: LD_VAR 0 7
5785: PPUSH
5786: CALL_OW 153
5790: GO 5823
5792: LD_INT 3
5794: DOUBLE
5795: EQUAL
5796: IFTRUE 5800
5798: GO 5822
5800: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5801: LD_VAR 0 1
5805: PPUSH
5806: LD_VAR 0 6
5810: PPUSH
5811: LD_VAR 0 7
5815: PPUSH
5816: CALL_OW 154
5820: GO 5823
5822: POP
// end ;
5823: LD_VAR 0 2
5827: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5828: LD_INT 0
5830: PPUSH
5831: PPUSH
5832: PPUSH
5833: PPUSH
5834: PPUSH
5835: PPUSH
// if not unit or not building then
5836: LD_VAR 0 1
5840: NOT
5841: PUSH
5842: LD_VAR 0 2
5846: NOT
5847: OR
5848: IFFALSE 5852
// exit ;
5850: GO 6010
// x := GetX ( building ) ;
5852: LD_ADDR_VAR 0 5
5856: PUSH
5857: LD_VAR 0 2
5861: PPUSH
5862: CALL_OW 250
5866: ST_TO_ADDR
// y := GetY ( building ) ;
5867: LD_ADDR_VAR 0 6
5871: PUSH
5872: LD_VAR 0 2
5876: PPUSH
5877: CALL_OW 251
5881: ST_TO_ADDR
// for i = 0 to 5 do
5882: LD_ADDR_VAR 0 4
5886: PUSH
5887: DOUBLE
5888: LD_INT 0
5890: DEC
5891: ST_TO_ADDR
5892: LD_INT 5
5894: PUSH
5895: FOR_TO
5896: IFFALSE 6008
// begin _x := ShiftX ( x , i , 3 ) ;
5898: LD_ADDR_VAR 0 7
5902: PUSH
5903: LD_VAR 0 5
5907: PPUSH
5908: LD_VAR 0 4
5912: PPUSH
5913: LD_INT 3
5915: PPUSH
5916: CALL_OW 272
5920: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5921: LD_ADDR_VAR 0 8
5925: PUSH
5926: LD_VAR 0 6
5930: PPUSH
5931: LD_VAR 0 4
5935: PPUSH
5936: LD_INT 3
5938: PPUSH
5939: CALL_OW 273
5943: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5944: LD_VAR 0 7
5948: PPUSH
5949: LD_VAR 0 8
5953: PPUSH
5954: CALL_OW 488
5958: NOT
5959: IFFALSE 5963
// continue ;
5961: GO 5895
// if HexInfo ( _x , _y ) = 0 then
5963: LD_VAR 0 7
5967: PPUSH
5968: LD_VAR 0 8
5972: PPUSH
5973: CALL_OW 428
5977: PUSH
5978: LD_INT 0
5980: EQUAL
5981: IFFALSE 6006
// begin ComMoveXY ( unit , _x , _y ) ;
5983: LD_VAR 0 1
5987: PPUSH
5988: LD_VAR 0 7
5992: PPUSH
5993: LD_VAR 0 8
5997: PPUSH
5998: CALL_OW 111
// exit ;
6002: POP
6003: POP
6004: GO 6010
// end ; end ;
6006: GO 5895
6008: POP
6009: POP
// end ;
6010: LD_VAR 0 3
6014: RET
// export function ScanBase ( side , base_area ) ; begin
6015: LD_INT 0
6017: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6018: LD_ADDR_VAR 0 3
6022: PUSH
6023: LD_VAR 0 2
6027: PPUSH
6028: LD_INT 81
6030: PUSH
6031: LD_VAR 0 1
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 70
6044: ST_TO_ADDR
// end ;
6045: LD_VAR 0 3
6049: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6050: LD_INT 0
6052: PPUSH
6053: PPUSH
6054: PPUSH
6055: PPUSH
// result := false ;
6056: LD_ADDR_VAR 0 2
6060: PUSH
6061: LD_INT 0
6063: ST_TO_ADDR
// side := GetSide ( unit ) ;
6064: LD_ADDR_VAR 0 3
6068: PUSH
6069: LD_VAR 0 1
6073: PPUSH
6074: CALL_OW 255
6078: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6079: LD_ADDR_VAR 0 4
6083: PUSH
6084: LD_VAR 0 1
6088: PPUSH
6089: CALL_OW 248
6093: ST_TO_ADDR
// case nat of 1 :
6094: LD_VAR 0 4
6098: PUSH
6099: LD_INT 1
6101: DOUBLE
6102: EQUAL
6103: IFTRUE 6107
6105: GO 6118
6107: POP
// tech := tech_lassight ; 2 :
6108: LD_ADDR_VAR 0 5
6112: PUSH
6113: LD_INT 12
6115: ST_TO_ADDR
6116: GO 6157
6118: LD_INT 2
6120: DOUBLE
6121: EQUAL
6122: IFTRUE 6126
6124: GO 6137
6126: POP
// tech := tech_mortar ; 3 :
6127: LD_ADDR_VAR 0 5
6131: PUSH
6132: LD_INT 41
6134: ST_TO_ADDR
6135: GO 6157
6137: LD_INT 3
6139: DOUBLE
6140: EQUAL
6141: IFTRUE 6145
6143: GO 6156
6145: POP
// tech := tech_bazooka ; end ;
6146: LD_ADDR_VAR 0 5
6150: PUSH
6151: LD_INT 44
6153: ST_TO_ADDR
6154: GO 6157
6156: POP
// if Researched ( side , tech ) then
6157: LD_VAR 0 3
6161: PPUSH
6162: LD_VAR 0 5
6166: PPUSH
6167: CALL_OW 325
6171: IFFALSE 6198
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6173: LD_ADDR_VAR 0 2
6177: PUSH
6178: LD_INT 5
6180: PUSH
6181: LD_INT 8
6183: PUSH
6184: LD_INT 9
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: LIST
6191: PUSH
6192: LD_VAR 0 4
6196: ARRAY
6197: ST_TO_ADDR
// end ;
6198: LD_VAR 0 2
6202: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6203: LD_INT 0
6205: PPUSH
6206: PPUSH
6207: PPUSH
// if not mines then
6208: LD_VAR 0 2
6212: NOT
6213: IFFALSE 6217
// exit ;
6215: GO 6361
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6217: LD_ADDR_VAR 0 5
6221: PUSH
6222: LD_INT 81
6224: PUSH
6225: LD_VAR 0 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 3
6236: PUSH
6237: LD_INT 21
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: ST_TO_ADDR
// for i in mines do
6260: LD_ADDR_VAR 0 4
6264: PUSH
6265: LD_VAR 0 2
6269: PUSH
6270: FOR_IN
6271: IFFALSE 6359
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6273: LD_VAR 0 4
6277: PUSH
6278: LD_INT 1
6280: ARRAY
6281: PPUSH
6282: LD_VAR 0 4
6286: PUSH
6287: LD_INT 2
6289: ARRAY
6290: PPUSH
6291: CALL_OW 458
6295: NOT
6296: IFFALSE 6300
// continue ;
6298: GO 6270
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6300: LD_VAR 0 4
6304: PUSH
6305: LD_INT 1
6307: ARRAY
6308: PPUSH
6309: LD_VAR 0 4
6313: PUSH
6314: LD_INT 2
6316: ARRAY
6317: PPUSH
6318: CALL_OW 428
6322: PUSH
6323: LD_VAR 0 5
6327: IN
6328: IFFALSE 6357
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6330: LD_VAR 0 4
6334: PUSH
6335: LD_INT 1
6337: ARRAY
6338: PPUSH
6339: LD_VAR 0 4
6343: PUSH
6344: LD_INT 2
6346: ARRAY
6347: PPUSH
6348: LD_VAR 0 1
6352: PPUSH
6353: CALL_OW 456
// end ;
6357: GO 6270
6359: POP
6360: POP
// end ;
6361: LD_VAR 0 3
6365: RET
// export function Count ( array ) ; var i ; begin
6366: LD_INT 0
6368: PPUSH
6369: PPUSH
// result := 0 ;
6370: LD_ADDR_VAR 0 2
6374: PUSH
6375: LD_INT 0
6377: ST_TO_ADDR
// for i in array do
6378: LD_ADDR_VAR 0 3
6382: PUSH
6383: LD_VAR 0 1
6387: PUSH
6388: FOR_IN
6389: IFFALSE 6413
// if i then
6391: LD_VAR 0 3
6395: IFFALSE 6411
// result := result + 1 ;
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: LD_VAR 0 2
6406: PUSH
6407: LD_INT 1
6409: PLUS
6410: ST_TO_ADDR
6411: GO 6388
6413: POP
6414: POP
// end ;
6415: LD_VAR 0 2
6419: RET
// export function IsEmpty ( building ) ; begin
6420: LD_INT 0
6422: PPUSH
// if not building then
6423: LD_VAR 0 1
6427: NOT
6428: IFFALSE 6432
// exit ;
6430: GO 6475
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6432: LD_ADDR_VAR 0 2
6436: PUSH
6437: LD_VAR 0 1
6441: PUSH
6442: LD_INT 22
6444: PUSH
6445: LD_VAR 0 1
6449: PPUSH
6450: CALL_OW 255
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 58
6461: PUSH
6462: EMPTY
6463: LIST
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PPUSH
6469: CALL_OW 69
6473: IN
6474: ST_TO_ADDR
// end ;
6475: LD_VAR 0 2
6479: RET
// export function IsNotFull ( building ) ; begin
6480: LD_INT 0
6482: PPUSH
// if not building then
6483: LD_VAR 0 1
6487: NOT
6488: IFFALSE 6492
// exit ;
6490: GO 6511
// result := UnitsInside ( building ) < 6 ;
6492: LD_ADDR_VAR 0 2
6496: PUSH
6497: LD_VAR 0 1
6501: PPUSH
6502: CALL_OW 313
6506: PUSH
6507: LD_INT 6
6509: LESS
6510: ST_TO_ADDR
// end ;
6511: LD_VAR 0 2
6515: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6516: LD_INT 0
6518: PPUSH
6519: PPUSH
6520: PPUSH
6521: PPUSH
// tmp := [ ] ;
6522: LD_ADDR_VAR 0 3
6526: PUSH
6527: EMPTY
6528: ST_TO_ADDR
// list := [ ] ;
6529: LD_ADDR_VAR 0 5
6533: PUSH
6534: EMPTY
6535: ST_TO_ADDR
// for i = 16 to 25 do
6536: LD_ADDR_VAR 0 4
6540: PUSH
6541: DOUBLE
6542: LD_INT 16
6544: DEC
6545: ST_TO_ADDR
6546: LD_INT 25
6548: PUSH
6549: FOR_TO
6550: IFFALSE 6623
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6552: LD_ADDR_VAR 0 3
6556: PUSH
6557: LD_VAR 0 3
6561: PUSH
6562: LD_INT 22
6564: PUSH
6565: LD_VAR 0 1
6569: PPUSH
6570: CALL_OW 255
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 91
6581: PUSH
6582: LD_VAR 0 1
6586: PUSH
6587: LD_INT 6
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: PUSH
6595: LD_INT 30
6597: PUSH
6598: LD_VAR 0 4
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: LIST
6611: PUSH
6612: EMPTY
6613: LIST
6614: PPUSH
6615: CALL_OW 69
6619: ADD
6620: ST_TO_ADDR
6621: GO 6549
6623: POP
6624: POP
// for i = 1 to tmp do
6625: LD_ADDR_VAR 0 4
6629: PUSH
6630: DOUBLE
6631: LD_INT 1
6633: DEC
6634: ST_TO_ADDR
6635: LD_VAR 0 3
6639: PUSH
6640: FOR_TO
6641: IFFALSE 6729
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6643: LD_ADDR_VAR 0 5
6647: PUSH
6648: LD_VAR 0 5
6652: PUSH
6653: LD_VAR 0 3
6657: PUSH
6658: LD_VAR 0 4
6662: ARRAY
6663: PPUSH
6664: CALL_OW 266
6668: PUSH
6669: LD_VAR 0 3
6673: PUSH
6674: LD_VAR 0 4
6678: ARRAY
6679: PPUSH
6680: CALL_OW 250
6684: PUSH
6685: LD_VAR 0 3
6689: PUSH
6690: LD_VAR 0 4
6694: ARRAY
6695: PPUSH
6696: CALL_OW 251
6700: PUSH
6701: LD_VAR 0 3
6705: PUSH
6706: LD_VAR 0 4
6710: ARRAY
6711: PPUSH
6712: CALL_OW 254
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PUSH
6723: EMPTY
6724: LIST
6725: ADD
6726: ST_TO_ADDR
6727: GO 6640
6729: POP
6730: POP
// result := list ;
6731: LD_ADDR_VAR 0 2
6735: PUSH
6736: LD_VAR 0 5
6740: ST_TO_ADDR
// end ;
6741: LD_VAR 0 2
6745: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6746: LD_INT 0
6748: PPUSH
6749: PPUSH
6750: PPUSH
6751: PPUSH
6752: PPUSH
6753: PPUSH
6754: PPUSH
// if not factory then
6755: LD_VAR 0 1
6759: NOT
6760: IFFALSE 6764
// exit ;
6762: GO 7357
// if control = control_apeman then
6764: LD_VAR 0 4
6768: PUSH
6769: LD_INT 5
6771: EQUAL
6772: IFFALSE 6881
// begin tmp := UnitsInside ( factory ) ;
6774: LD_ADDR_VAR 0 8
6778: PUSH
6779: LD_VAR 0 1
6783: PPUSH
6784: CALL_OW 313
6788: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6789: LD_VAR 0 8
6793: PPUSH
6794: LD_INT 25
6796: PUSH
6797: LD_INT 12
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PPUSH
6804: CALL_OW 72
6808: NOT
6809: IFFALSE 6819
// control := control_manual ;
6811: LD_ADDR_VAR 0 4
6815: PUSH
6816: LD_INT 1
6818: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6819: LD_ADDR_VAR 0 8
6823: PUSH
6824: LD_VAR 0 1
6828: PPUSH
6829: CALL 6516 0 1
6833: ST_TO_ADDR
// if tmp then
6834: LD_VAR 0 8
6838: IFFALSE 6881
// begin for i in tmp do
6840: LD_ADDR_VAR 0 7
6844: PUSH
6845: LD_VAR 0 8
6849: PUSH
6850: FOR_IN
6851: IFFALSE 6879
// if i [ 1 ] = b_ext_radio then
6853: LD_VAR 0 7
6857: PUSH
6858: LD_INT 1
6860: ARRAY
6861: PUSH
6862: LD_INT 22
6864: EQUAL
6865: IFFALSE 6877
// begin control := control_remote ;
6867: LD_ADDR_VAR 0 4
6871: PUSH
6872: LD_INT 2
6874: ST_TO_ADDR
// break ;
6875: GO 6879
// end ;
6877: GO 6850
6879: POP
6880: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6881: LD_VAR 0 1
6885: PPUSH
6886: LD_VAR 0 2
6890: PPUSH
6891: LD_VAR 0 3
6895: PPUSH
6896: LD_VAR 0 4
6900: PPUSH
6901: LD_VAR 0 5
6905: PPUSH
6906: CALL_OW 448
6910: IFFALSE 6945
// begin result := [ chassis , engine , control , weapon ] ;
6912: LD_ADDR_VAR 0 6
6916: PUSH
6917: LD_VAR 0 2
6921: PUSH
6922: LD_VAR 0 3
6926: PUSH
6927: LD_VAR 0 4
6931: PUSH
6932: LD_VAR 0 5
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: ST_TO_ADDR
// exit ;
6943: GO 7357
// end ; _chassis := AvailableChassisList ( factory ) ;
6945: LD_ADDR_VAR 0 9
6949: PUSH
6950: LD_VAR 0 1
6954: PPUSH
6955: CALL_OW 475
6959: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6960: LD_ADDR_VAR 0 11
6964: PUSH
6965: LD_VAR 0 1
6969: PPUSH
6970: CALL_OW 476
6974: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6975: LD_ADDR_VAR 0 12
6979: PUSH
6980: LD_VAR 0 1
6984: PPUSH
6985: CALL_OW 477
6989: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6990: LD_ADDR_VAR 0 10
6994: PUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: CALL_OW 478
7004: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7005: LD_VAR 0 9
7009: NOT
7010: PUSH
7011: LD_VAR 0 11
7015: NOT
7016: OR
7017: PUSH
7018: LD_VAR 0 12
7022: NOT
7023: OR
7024: PUSH
7025: LD_VAR 0 10
7029: NOT
7030: OR
7031: IFFALSE 7066
// begin result := [ chassis , engine , control , weapon ] ;
7033: LD_ADDR_VAR 0 6
7037: PUSH
7038: LD_VAR 0 2
7042: PUSH
7043: LD_VAR 0 3
7047: PUSH
7048: LD_VAR 0 4
7052: PUSH
7053: LD_VAR 0 5
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: ST_TO_ADDR
// exit ;
7064: GO 7357
// end ; if not chassis in _chassis then
7066: LD_VAR 0 2
7070: PUSH
7071: LD_VAR 0 9
7075: IN
7076: NOT
7077: IFFALSE 7103
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7079: LD_ADDR_VAR 0 2
7083: PUSH
7084: LD_VAR 0 9
7088: PUSH
7089: LD_INT 1
7091: PPUSH
7092: LD_VAR 0 9
7096: PPUSH
7097: CALL_OW 12
7101: ARRAY
7102: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7103: LD_VAR 0 2
7107: PPUSH
7108: LD_VAR 0 3
7112: PPUSH
7113: CALL 7362 0 2
7117: NOT
7118: IFFALSE 7177
// repeat engine := _engine [ 1 ] ;
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: LD_VAR 0 11
7129: PUSH
7130: LD_INT 1
7132: ARRAY
7133: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7134: LD_ADDR_VAR 0 11
7138: PUSH
7139: LD_VAR 0 11
7143: PPUSH
7144: LD_INT 1
7146: PPUSH
7147: CALL_OW 3
7151: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7152: LD_VAR 0 2
7156: PPUSH
7157: LD_VAR 0 3
7161: PPUSH
7162: CALL 7362 0 2
7166: PUSH
7167: LD_VAR 0 11
7171: PUSH
7172: EMPTY
7173: EQUAL
7174: OR
7175: IFFALSE 7120
// if not control in _control then
7177: LD_VAR 0 4
7181: PUSH
7182: LD_VAR 0 12
7186: IN
7187: NOT
7188: IFFALSE 7214
// control := _control [ rand ( 1 , _control ) ] ;
7190: LD_ADDR_VAR 0 4
7194: PUSH
7195: LD_VAR 0 12
7199: PUSH
7200: LD_INT 1
7202: PPUSH
7203: LD_VAR 0 12
7207: PPUSH
7208: CALL_OW 12
7212: ARRAY
7213: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7214: LD_VAR 0 2
7218: PPUSH
7219: LD_VAR 0 5
7223: PPUSH
7224: CALL 7582 0 2
7228: NOT
7229: IFFALSE 7288
// repeat weapon := _weapon [ 1 ] ;
7231: LD_ADDR_VAR 0 5
7235: PUSH
7236: LD_VAR 0 10
7240: PUSH
7241: LD_INT 1
7243: ARRAY
7244: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7245: LD_ADDR_VAR 0 10
7249: PUSH
7250: LD_VAR 0 10
7254: PPUSH
7255: LD_INT 1
7257: PPUSH
7258: CALL_OW 3
7262: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7263: LD_VAR 0 2
7267: PPUSH
7268: LD_VAR 0 5
7272: PPUSH
7273: CALL 7582 0 2
7277: PUSH
7278: LD_VAR 0 10
7282: PUSH
7283: EMPTY
7284: EQUAL
7285: OR
7286: IFFALSE 7231
// result := [ ] ;
7288: LD_ADDR_VAR 0 6
7292: PUSH
7293: EMPTY
7294: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7295: LD_VAR 0 1
7299: PPUSH
7300: LD_VAR 0 2
7304: PPUSH
7305: LD_VAR 0 3
7309: PPUSH
7310: LD_VAR 0 4
7314: PPUSH
7315: LD_VAR 0 5
7319: PPUSH
7320: CALL_OW 448
7324: IFFALSE 7357
// result := [ chassis , engine , control , weapon ] ;
7326: LD_ADDR_VAR 0 6
7330: PUSH
7331: LD_VAR 0 2
7335: PUSH
7336: LD_VAR 0 3
7340: PUSH
7341: LD_VAR 0 4
7345: PUSH
7346: LD_VAR 0 5
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: ST_TO_ADDR
// end ;
7357: LD_VAR 0 6
7361: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7362: LD_INT 0
7364: PPUSH
// if not chassis or not engine then
7365: LD_VAR 0 1
7369: NOT
7370: PUSH
7371: LD_VAR 0 2
7375: NOT
7376: OR
7377: IFFALSE 7381
// exit ;
7379: GO 7577
// case engine of engine_solar :
7381: LD_VAR 0 2
7385: PUSH
7386: LD_INT 2
7388: DOUBLE
7389: EQUAL
7390: IFTRUE 7394
7392: GO 7432
7394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7395: LD_ADDR_VAR 0 3
7399: PUSH
7400: LD_INT 11
7402: PUSH
7403: LD_INT 12
7405: PUSH
7406: LD_INT 13
7408: PUSH
7409: LD_INT 14
7411: PUSH
7412: LD_INT 1
7414: PUSH
7415: LD_INT 2
7417: PUSH
7418: LD_INT 3
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: ST_TO_ADDR
7430: GO 7561
7432: LD_INT 1
7434: DOUBLE
7435: EQUAL
7436: IFTRUE 7440
7438: GO 7502
7440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7441: LD_ADDR_VAR 0 3
7445: PUSH
7446: LD_INT 11
7448: PUSH
7449: LD_INT 12
7451: PUSH
7452: LD_INT 13
7454: PUSH
7455: LD_INT 14
7457: PUSH
7458: LD_INT 1
7460: PUSH
7461: LD_INT 2
7463: PUSH
7464: LD_INT 3
7466: PUSH
7467: LD_INT 4
7469: PUSH
7470: LD_INT 5
7472: PUSH
7473: LD_INT 21
7475: PUSH
7476: LD_INT 23
7478: PUSH
7479: LD_INT 22
7481: PUSH
7482: LD_INT 24
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: LIST
7490: LIST
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: LIST
7496: LIST
7497: LIST
7498: LIST
7499: ST_TO_ADDR
7500: GO 7561
7502: LD_INT 3
7504: DOUBLE
7505: EQUAL
7506: IFTRUE 7510
7508: GO 7560
7510: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7511: LD_ADDR_VAR 0 3
7515: PUSH
7516: LD_INT 13
7518: PUSH
7519: LD_INT 14
7521: PUSH
7522: LD_INT 2
7524: PUSH
7525: LD_INT 3
7527: PUSH
7528: LD_INT 4
7530: PUSH
7531: LD_INT 5
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 22
7539: PUSH
7540: LD_INT 23
7542: PUSH
7543: LD_INT 24
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: ST_TO_ADDR
7558: GO 7561
7560: POP
// result := ( chassis in result ) ;
7561: LD_ADDR_VAR 0 3
7565: PUSH
7566: LD_VAR 0 1
7570: PUSH
7571: LD_VAR 0 3
7575: IN
7576: ST_TO_ADDR
// end ;
7577: LD_VAR 0 3
7581: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7582: LD_INT 0
7584: PPUSH
// if not chassis or not weapon then
7585: LD_VAR 0 1
7589: NOT
7590: PUSH
7591: LD_VAR 0 2
7595: NOT
7596: OR
7597: IFFALSE 7601
// exit ;
7599: GO 8663
// case weapon of us_machine_gun :
7601: LD_VAR 0 2
7605: PUSH
7606: LD_INT 2
7608: DOUBLE
7609: EQUAL
7610: IFTRUE 7614
7612: GO 7644
7614: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7615: LD_ADDR_VAR 0 3
7619: PUSH
7620: LD_INT 1
7622: PUSH
7623: LD_INT 2
7625: PUSH
7626: LD_INT 3
7628: PUSH
7629: LD_INT 4
7631: PUSH
7632: LD_INT 5
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: ST_TO_ADDR
7642: GO 8647
7644: LD_INT 3
7646: DOUBLE
7647: EQUAL
7648: IFTRUE 7652
7650: GO 7682
7652: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7653: LD_ADDR_VAR 0 3
7657: PUSH
7658: LD_INT 1
7660: PUSH
7661: LD_INT 2
7663: PUSH
7664: LD_INT 3
7666: PUSH
7667: LD_INT 4
7669: PUSH
7670: LD_INT 5
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: ST_TO_ADDR
7680: GO 8647
7682: LD_INT 11
7684: DOUBLE
7685: EQUAL
7686: IFTRUE 7690
7688: GO 7720
7690: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7691: LD_ADDR_VAR 0 3
7695: PUSH
7696: LD_INT 1
7698: PUSH
7699: LD_INT 2
7701: PUSH
7702: LD_INT 3
7704: PUSH
7705: LD_INT 4
7707: PUSH
7708: LD_INT 5
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: ST_TO_ADDR
7718: GO 8647
7720: LD_INT 4
7722: DOUBLE
7723: EQUAL
7724: IFTRUE 7728
7726: GO 7754
7728: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7729: LD_ADDR_VAR 0 3
7733: PUSH
7734: LD_INT 2
7736: PUSH
7737: LD_INT 3
7739: PUSH
7740: LD_INT 4
7742: PUSH
7743: LD_INT 5
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: ST_TO_ADDR
7752: GO 8647
7754: LD_INT 5
7756: DOUBLE
7757: EQUAL
7758: IFTRUE 7762
7760: GO 7788
7762: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7763: LD_ADDR_VAR 0 3
7767: PUSH
7768: LD_INT 2
7770: PUSH
7771: LD_INT 3
7773: PUSH
7774: LD_INT 4
7776: PUSH
7777: LD_INT 5
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: ST_TO_ADDR
7786: GO 8647
7788: LD_INT 9
7790: DOUBLE
7791: EQUAL
7792: IFTRUE 7796
7794: GO 7822
7796: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7797: LD_ADDR_VAR 0 3
7801: PUSH
7802: LD_INT 2
7804: PUSH
7805: LD_INT 3
7807: PUSH
7808: LD_INT 4
7810: PUSH
7811: LD_INT 5
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: ST_TO_ADDR
7820: GO 8647
7822: LD_INT 7
7824: DOUBLE
7825: EQUAL
7826: IFTRUE 7830
7828: GO 7856
7830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7831: LD_ADDR_VAR 0 3
7835: PUSH
7836: LD_INT 2
7838: PUSH
7839: LD_INT 3
7841: PUSH
7842: LD_INT 4
7844: PUSH
7845: LD_INT 5
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: ST_TO_ADDR
7854: GO 8647
7856: LD_INT 12
7858: DOUBLE
7859: EQUAL
7860: IFTRUE 7864
7862: GO 7890
7864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7865: LD_ADDR_VAR 0 3
7869: PUSH
7870: LD_INT 2
7872: PUSH
7873: LD_INT 3
7875: PUSH
7876: LD_INT 4
7878: PUSH
7879: LD_INT 5
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: ST_TO_ADDR
7888: GO 8647
7890: LD_INT 13
7892: DOUBLE
7893: EQUAL
7894: IFTRUE 7898
7896: GO 7924
7898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7899: LD_ADDR_VAR 0 3
7903: PUSH
7904: LD_INT 2
7906: PUSH
7907: LD_INT 3
7909: PUSH
7910: LD_INT 4
7912: PUSH
7913: LD_INT 5
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: ST_TO_ADDR
7922: GO 8647
7924: LD_INT 14
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7950
7932: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7933: LD_ADDR_VAR 0 3
7937: PUSH
7938: LD_INT 4
7940: PUSH
7941: LD_INT 5
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: ST_TO_ADDR
7948: GO 8647
7950: LD_INT 6
7952: DOUBLE
7953: EQUAL
7954: IFTRUE 7958
7956: GO 7976
7958: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7959: LD_ADDR_VAR 0 3
7963: PUSH
7964: LD_INT 4
7966: PUSH
7967: LD_INT 5
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: ST_TO_ADDR
7974: GO 8647
7976: LD_INT 10
7978: DOUBLE
7979: EQUAL
7980: IFTRUE 7984
7982: GO 8002
7984: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7985: LD_ADDR_VAR 0 3
7989: PUSH
7990: LD_INT 4
7992: PUSH
7993: LD_INT 5
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: ST_TO_ADDR
8000: GO 8647
8002: LD_INT 22
8004: DOUBLE
8005: EQUAL
8006: IFTRUE 8010
8008: GO 8036
8010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8011: LD_ADDR_VAR 0 3
8015: PUSH
8016: LD_INT 11
8018: PUSH
8019: LD_INT 12
8021: PUSH
8022: LD_INT 13
8024: PUSH
8025: LD_INT 14
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: ST_TO_ADDR
8034: GO 8647
8036: LD_INT 23
8038: DOUBLE
8039: EQUAL
8040: IFTRUE 8044
8042: GO 8070
8044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8045: LD_ADDR_VAR 0 3
8049: PUSH
8050: LD_INT 11
8052: PUSH
8053: LD_INT 12
8055: PUSH
8056: LD_INT 13
8058: PUSH
8059: LD_INT 14
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: ST_TO_ADDR
8068: GO 8647
8070: LD_INT 24
8072: DOUBLE
8073: EQUAL
8074: IFTRUE 8078
8076: GO 8104
8078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8079: LD_ADDR_VAR 0 3
8083: PUSH
8084: LD_INT 11
8086: PUSH
8087: LD_INT 12
8089: PUSH
8090: LD_INT 13
8092: PUSH
8093: LD_INT 14
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: ST_TO_ADDR
8102: GO 8647
8104: LD_INT 30
8106: DOUBLE
8107: EQUAL
8108: IFTRUE 8112
8110: GO 8138
8112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8113: LD_ADDR_VAR 0 3
8117: PUSH
8118: LD_INT 11
8120: PUSH
8121: LD_INT 12
8123: PUSH
8124: LD_INT 13
8126: PUSH
8127: LD_INT 14
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: ST_TO_ADDR
8136: GO 8647
8138: LD_INT 25
8140: DOUBLE
8141: EQUAL
8142: IFTRUE 8146
8144: GO 8164
8146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8147: LD_ADDR_VAR 0 3
8151: PUSH
8152: LD_INT 13
8154: PUSH
8155: LD_INT 14
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: ST_TO_ADDR
8162: GO 8647
8164: LD_INT 27
8166: DOUBLE
8167: EQUAL
8168: IFTRUE 8172
8170: GO 8190
8172: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8173: LD_ADDR_VAR 0 3
8177: PUSH
8178: LD_INT 13
8180: PUSH
8181: LD_INT 14
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: ST_TO_ADDR
8188: GO 8647
8190: LD_EXP 49
8194: DOUBLE
8195: EQUAL
8196: IFTRUE 8200
8198: GO 8226
8200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8201: LD_ADDR_VAR 0 3
8205: PUSH
8206: LD_INT 11
8208: PUSH
8209: LD_INT 12
8211: PUSH
8212: LD_INT 13
8214: PUSH
8215: LD_INT 14
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: ST_TO_ADDR
8224: GO 8647
8226: LD_INT 28
8228: DOUBLE
8229: EQUAL
8230: IFTRUE 8234
8232: GO 8252
8234: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8235: LD_ADDR_VAR 0 3
8239: PUSH
8240: LD_INT 13
8242: PUSH
8243: LD_INT 14
8245: PUSH
8246: EMPTY
8247: LIST
8248: LIST
8249: ST_TO_ADDR
8250: GO 8647
8252: LD_INT 29
8254: DOUBLE
8255: EQUAL
8256: IFTRUE 8260
8258: GO 8278
8260: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8261: LD_ADDR_VAR 0 3
8265: PUSH
8266: LD_INT 13
8268: PUSH
8269: LD_INT 14
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: ST_TO_ADDR
8276: GO 8647
8278: LD_INT 31
8280: DOUBLE
8281: EQUAL
8282: IFTRUE 8286
8284: GO 8304
8286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8287: LD_ADDR_VAR 0 3
8291: PUSH
8292: LD_INT 13
8294: PUSH
8295: LD_INT 14
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: ST_TO_ADDR
8302: GO 8647
8304: LD_INT 26
8306: DOUBLE
8307: EQUAL
8308: IFTRUE 8312
8310: GO 8330
8312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8313: LD_ADDR_VAR 0 3
8317: PUSH
8318: LD_INT 13
8320: PUSH
8321: LD_INT 14
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: ST_TO_ADDR
8328: GO 8647
8330: LD_INT 42
8332: DOUBLE
8333: EQUAL
8334: IFTRUE 8338
8336: GO 8364
8338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8339: LD_ADDR_VAR 0 3
8343: PUSH
8344: LD_INT 21
8346: PUSH
8347: LD_INT 22
8349: PUSH
8350: LD_INT 23
8352: PUSH
8353: LD_INT 24
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: ST_TO_ADDR
8362: GO 8647
8364: LD_INT 43
8366: DOUBLE
8367: EQUAL
8368: IFTRUE 8372
8370: GO 8398
8372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8373: LD_ADDR_VAR 0 3
8377: PUSH
8378: LD_INT 21
8380: PUSH
8381: LD_INT 22
8383: PUSH
8384: LD_INT 23
8386: PUSH
8387: LD_INT 24
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: ST_TO_ADDR
8396: GO 8647
8398: LD_INT 44
8400: DOUBLE
8401: EQUAL
8402: IFTRUE 8406
8404: GO 8432
8406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8407: LD_ADDR_VAR 0 3
8411: PUSH
8412: LD_INT 21
8414: PUSH
8415: LD_INT 22
8417: PUSH
8418: LD_INT 23
8420: PUSH
8421: LD_INT 24
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: LIST
8428: LIST
8429: ST_TO_ADDR
8430: GO 8647
8432: LD_INT 45
8434: DOUBLE
8435: EQUAL
8436: IFTRUE 8440
8438: GO 8466
8440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8441: LD_ADDR_VAR 0 3
8445: PUSH
8446: LD_INT 21
8448: PUSH
8449: LD_INT 22
8451: PUSH
8452: LD_INT 23
8454: PUSH
8455: LD_INT 24
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: ST_TO_ADDR
8464: GO 8647
8466: LD_INT 49
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8500
8474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8475: LD_ADDR_VAR 0 3
8479: PUSH
8480: LD_INT 21
8482: PUSH
8483: LD_INT 22
8485: PUSH
8486: LD_INT 23
8488: PUSH
8489: LD_INT 24
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: ST_TO_ADDR
8498: GO 8647
8500: LD_INT 51
8502: DOUBLE
8503: EQUAL
8504: IFTRUE 8508
8506: GO 8534
8508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8509: LD_ADDR_VAR 0 3
8513: PUSH
8514: LD_INT 21
8516: PUSH
8517: LD_INT 22
8519: PUSH
8520: LD_INT 23
8522: PUSH
8523: LD_INT 24
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: ST_TO_ADDR
8532: GO 8647
8534: LD_INT 52
8536: DOUBLE
8537: EQUAL
8538: IFTRUE 8542
8540: GO 8568
8542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8543: LD_ADDR_VAR 0 3
8547: PUSH
8548: LD_INT 21
8550: PUSH
8551: LD_INT 22
8553: PUSH
8554: LD_INT 23
8556: PUSH
8557: LD_INT 24
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: ST_TO_ADDR
8566: GO 8647
8568: LD_INT 53
8570: DOUBLE
8571: EQUAL
8572: IFTRUE 8576
8574: GO 8594
8576: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8577: LD_ADDR_VAR 0 3
8581: PUSH
8582: LD_INT 23
8584: PUSH
8585: LD_INT 24
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: ST_TO_ADDR
8592: GO 8647
8594: LD_INT 46
8596: DOUBLE
8597: EQUAL
8598: IFTRUE 8602
8600: GO 8620
8602: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8603: LD_ADDR_VAR 0 3
8607: PUSH
8608: LD_INT 23
8610: PUSH
8611: LD_INT 24
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: ST_TO_ADDR
8618: GO 8647
8620: LD_INT 47
8622: DOUBLE
8623: EQUAL
8624: IFTRUE 8628
8626: GO 8646
8628: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8629: LD_ADDR_VAR 0 3
8633: PUSH
8634: LD_INT 23
8636: PUSH
8637: LD_INT 24
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: ST_TO_ADDR
8644: GO 8647
8646: POP
// result := ( chassis in result ) ;
8647: LD_ADDR_VAR 0 3
8651: PUSH
8652: LD_VAR 0 1
8656: PUSH
8657: LD_VAR 0 3
8661: IN
8662: ST_TO_ADDR
// end ;
8663: LD_VAR 0 3
8667: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8668: LD_INT 0
8670: PPUSH
8671: PPUSH
8672: PPUSH
8673: PPUSH
8674: PPUSH
8675: PPUSH
8676: PPUSH
// result := array ;
8677: LD_ADDR_VAR 0 5
8681: PUSH
8682: LD_VAR 0 1
8686: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8687: LD_VAR 0 1
8691: NOT
8692: PUSH
8693: LD_VAR 0 2
8697: NOT
8698: OR
8699: PUSH
8700: LD_VAR 0 3
8704: NOT
8705: OR
8706: PUSH
8707: LD_VAR 0 2
8711: PUSH
8712: LD_VAR 0 1
8716: GREATER
8717: OR
8718: PUSH
8719: LD_VAR 0 3
8723: PUSH
8724: LD_VAR 0 1
8728: GREATER
8729: OR
8730: IFFALSE 8734
// exit ;
8732: GO 9030
// if direction then
8734: LD_VAR 0 4
8738: IFFALSE 8802
// begin d := 1 ;
8740: LD_ADDR_VAR 0 9
8744: PUSH
8745: LD_INT 1
8747: ST_TO_ADDR
// if i_from > i_to then
8748: LD_VAR 0 2
8752: PUSH
8753: LD_VAR 0 3
8757: GREATER
8758: IFFALSE 8784
// length := ( array - i_from ) + i_to else
8760: LD_ADDR_VAR 0 11
8764: PUSH
8765: LD_VAR 0 1
8769: PUSH
8770: LD_VAR 0 2
8774: MINUS
8775: PUSH
8776: LD_VAR 0 3
8780: PLUS
8781: ST_TO_ADDR
8782: GO 8800
// length := i_to - i_from ;
8784: LD_ADDR_VAR 0 11
8788: PUSH
8789: LD_VAR 0 3
8793: PUSH
8794: LD_VAR 0 2
8798: MINUS
8799: ST_TO_ADDR
// end else
8800: GO 8863
// begin d := - 1 ;
8802: LD_ADDR_VAR 0 9
8806: PUSH
8807: LD_INT 1
8809: NEG
8810: ST_TO_ADDR
// if i_from > i_to then
8811: LD_VAR 0 2
8815: PUSH
8816: LD_VAR 0 3
8820: GREATER
8821: IFFALSE 8841
// length := i_from - i_to else
8823: LD_ADDR_VAR 0 11
8827: PUSH
8828: LD_VAR 0 2
8832: PUSH
8833: LD_VAR 0 3
8837: MINUS
8838: ST_TO_ADDR
8839: GO 8863
// length := ( array - i_to ) + i_from ;
8841: LD_ADDR_VAR 0 11
8845: PUSH
8846: LD_VAR 0 1
8850: PUSH
8851: LD_VAR 0 3
8855: MINUS
8856: PUSH
8857: LD_VAR 0 2
8861: PLUS
8862: ST_TO_ADDR
// end ; if not length then
8863: LD_VAR 0 11
8867: NOT
8868: IFFALSE 8872
// exit ;
8870: GO 9030
// tmp := array ;
8872: LD_ADDR_VAR 0 10
8876: PUSH
8877: LD_VAR 0 1
8881: ST_TO_ADDR
// for i = 1 to length do
8882: LD_ADDR_VAR 0 6
8886: PUSH
8887: DOUBLE
8888: LD_INT 1
8890: DEC
8891: ST_TO_ADDR
8892: LD_VAR 0 11
8896: PUSH
8897: FOR_TO
8898: IFFALSE 9018
// begin for j = 1 to array do
8900: LD_ADDR_VAR 0 7
8904: PUSH
8905: DOUBLE
8906: LD_INT 1
8908: DEC
8909: ST_TO_ADDR
8910: LD_VAR 0 1
8914: PUSH
8915: FOR_TO
8916: IFFALSE 9004
// begin k := j + d ;
8918: LD_ADDR_VAR 0 8
8922: PUSH
8923: LD_VAR 0 7
8927: PUSH
8928: LD_VAR 0 9
8932: PLUS
8933: ST_TO_ADDR
// if k > array then
8934: LD_VAR 0 8
8938: PUSH
8939: LD_VAR 0 1
8943: GREATER
8944: IFFALSE 8954
// k := 1 ;
8946: LD_ADDR_VAR 0 8
8950: PUSH
8951: LD_INT 1
8953: ST_TO_ADDR
// if not k then
8954: LD_VAR 0 8
8958: NOT
8959: IFFALSE 8971
// k := array ;
8961: LD_ADDR_VAR 0 8
8965: PUSH
8966: LD_VAR 0 1
8970: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8971: LD_ADDR_VAR 0 10
8975: PUSH
8976: LD_VAR 0 10
8980: PPUSH
8981: LD_VAR 0 8
8985: PPUSH
8986: LD_VAR 0 1
8990: PUSH
8991: LD_VAR 0 7
8995: ARRAY
8996: PPUSH
8997: CALL_OW 1
9001: ST_TO_ADDR
// end ;
9002: GO 8915
9004: POP
9005: POP
// array := tmp ;
9006: LD_ADDR_VAR 0 1
9010: PUSH
9011: LD_VAR 0 10
9015: ST_TO_ADDR
// end ;
9016: GO 8897
9018: POP
9019: POP
// result := array ;
9020: LD_ADDR_VAR 0 5
9024: PUSH
9025: LD_VAR 0 1
9029: ST_TO_ADDR
// end ;
9030: LD_VAR 0 5
9034: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9035: LD_INT 0
9037: PPUSH
9038: PPUSH
// result := 0 ;
9039: LD_ADDR_VAR 0 3
9043: PUSH
9044: LD_INT 0
9046: ST_TO_ADDR
// if not array or not value in array then
9047: LD_VAR 0 1
9051: NOT
9052: PUSH
9053: LD_VAR 0 2
9057: PUSH
9058: LD_VAR 0 1
9062: IN
9063: NOT
9064: OR
9065: IFFALSE 9069
// exit ;
9067: GO 9123
// for i = 1 to array do
9069: LD_ADDR_VAR 0 4
9073: PUSH
9074: DOUBLE
9075: LD_INT 1
9077: DEC
9078: ST_TO_ADDR
9079: LD_VAR 0 1
9083: PUSH
9084: FOR_TO
9085: IFFALSE 9121
// if value = array [ i ] then
9087: LD_VAR 0 2
9091: PUSH
9092: LD_VAR 0 1
9096: PUSH
9097: LD_VAR 0 4
9101: ARRAY
9102: EQUAL
9103: IFFALSE 9119
// begin result := i ;
9105: LD_ADDR_VAR 0 3
9109: PUSH
9110: LD_VAR 0 4
9114: ST_TO_ADDR
// exit ;
9115: POP
9116: POP
9117: GO 9123
// end ;
9119: GO 9084
9121: POP
9122: POP
// end ;
9123: LD_VAR 0 3
9127: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9128: LD_INT 0
9130: PPUSH
// vc_chassis := chassis ;
9131: LD_ADDR_OWVAR 37
9135: PUSH
9136: LD_VAR 0 1
9140: ST_TO_ADDR
// vc_engine := engine ;
9141: LD_ADDR_OWVAR 39
9145: PUSH
9146: LD_VAR 0 2
9150: ST_TO_ADDR
// vc_control := control ;
9151: LD_ADDR_OWVAR 38
9155: PUSH
9156: LD_VAR 0 3
9160: ST_TO_ADDR
// vc_weapon := weapon ;
9161: LD_ADDR_OWVAR 40
9165: PUSH
9166: LD_VAR 0 4
9170: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9171: LD_ADDR_OWVAR 41
9175: PUSH
9176: LD_VAR 0 5
9180: ST_TO_ADDR
// end ;
9181: LD_VAR 0 6
9185: RET
// export function WantPlant ( unit ) ; var task ; begin
9186: LD_INT 0
9188: PPUSH
9189: PPUSH
// result := false ;
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_INT 0
9197: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9198: LD_ADDR_VAR 0 3
9202: PUSH
9203: LD_VAR 0 1
9207: PPUSH
9208: CALL_OW 437
9212: ST_TO_ADDR
// if task then
9213: LD_VAR 0 3
9217: IFFALSE 9245
// if task [ 1 ] [ 1 ] = p then
9219: LD_VAR 0 3
9223: PUSH
9224: LD_INT 1
9226: ARRAY
9227: PUSH
9228: LD_INT 1
9230: ARRAY
9231: PUSH
9232: LD_STRING p
9234: EQUAL
9235: IFFALSE 9245
// result := true ;
9237: LD_ADDR_VAR 0 2
9241: PUSH
9242: LD_INT 1
9244: ST_TO_ADDR
// end ;
9245: LD_VAR 0 2
9249: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9250: LD_INT 0
9252: PPUSH
9253: PPUSH
9254: PPUSH
9255: PPUSH
// if pos < 1 then
9256: LD_VAR 0 2
9260: PUSH
9261: LD_INT 1
9263: LESS
9264: IFFALSE 9268
// exit ;
9266: GO 9571
// if pos = 1 then
9268: LD_VAR 0 2
9272: PUSH
9273: LD_INT 1
9275: EQUAL
9276: IFFALSE 9309
// result := Replace ( arr , pos [ 1 ] , value ) else
9278: LD_ADDR_VAR 0 4
9282: PUSH
9283: LD_VAR 0 1
9287: PPUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_INT 1
9295: ARRAY
9296: PPUSH
9297: LD_VAR 0 3
9301: PPUSH
9302: CALL_OW 1
9306: ST_TO_ADDR
9307: GO 9571
// begin tmp := arr ;
9309: LD_ADDR_VAR 0 6
9313: PUSH
9314: LD_VAR 0 1
9318: ST_TO_ADDR
// s_arr := [ tmp ] ;
9319: LD_ADDR_VAR 0 7
9323: PUSH
9324: LD_VAR 0 6
9328: PUSH
9329: EMPTY
9330: LIST
9331: ST_TO_ADDR
// for i = 1 to pos - 1 do
9332: LD_ADDR_VAR 0 5
9336: PUSH
9337: DOUBLE
9338: LD_INT 1
9340: DEC
9341: ST_TO_ADDR
9342: LD_VAR 0 2
9346: PUSH
9347: LD_INT 1
9349: MINUS
9350: PUSH
9351: FOR_TO
9352: IFFALSE 9397
// begin tmp := tmp [ pos [ i ] ] ;
9354: LD_ADDR_VAR 0 6
9358: PUSH
9359: LD_VAR 0 6
9363: PUSH
9364: LD_VAR 0 2
9368: PUSH
9369: LD_VAR 0 5
9373: ARRAY
9374: ARRAY
9375: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9376: LD_ADDR_VAR 0 7
9380: PUSH
9381: LD_VAR 0 7
9385: PUSH
9386: LD_VAR 0 6
9390: PUSH
9391: EMPTY
9392: LIST
9393: ADD
9394: ST_TO_ADDR
// end ;
9395: GO 9351
9397: POP
9398: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9399: LD_ADDR_VAR 0 6
9403: PUSH
9404: LD_VAR 0 6
9408: PPUSH
9409: LD_VAR 0 2
9413: PUSH
9414: LD_VAR 0 2
9418: ARRAY
9419: PPUSH
9420: LD_VAR 0 3
9424: PPUSH
9425: CALL_OW 1
9429: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9430: LD_ADDR_VAR 0 7
9434: PUSH
9435: LD_VAR 0 7
9439: PPUSH
9440: LD_VAR 0 7
9444: PPUSH
9445: LD_VAR 0 6
9449: PPUSH
9450: CALL_OW 1
9454: ST_TO_ADDR
// for i = s_arr downto 2 do
9455: LD_ADDR_VAR 0 5
9459: PUSH
9460: DOUBLE
9461: LD_VAR 0 7
9465: INC
9466: ST_TO_ADDR
9467: LD_INT 2
9469: PUSH
9470: FOR_DOWNTO
9471: IFFALSE 9555
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9473: LD_ADDR_VAR 0 6
9477: PUSH
9478: LD_VAR 0 7
9482: PUSH
9483: LD_VAR 0 5
9487: PUSH
9488: LD_INT 1
9490: MINUS
9491: ARRAY
9492: PPUSH
9493: LD_VAR 0 2
9497: PUSH
9498: LD_VAR 0 5
9502: PUSH
9503: LD_INT 1
9505: MINUS
9506: ARRAY
9507: PPUSH
9508: LD_VAR 0 7
9512: PUSH
9513: LD_VAR 0 5
9517: ARRAY
9518: PPUSH
9519: CALL_OW 1
9523: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9524: LD_ADDR_VAR 0 7
9528: PUSH
9529: LD_VAR 0 7
9533: PPUSH
9534: LD_VAR 0 5
9538: PUSH
9539: LD_INT 1
9541: MINUS
9542: PPUSH
9543: LD_VAR 0 6
9547: PPUSH
9548: CALL_OW 1
9552: ST_TO_ADDR
// end ;
9553: GO 9470
9555: POP
9556: POP
// result := s_arr [ 1 ] ;
9557: LD_ADDR_VAR 0 4
9561: PUSH
9562: LD_VAR 0 7
9566: PUSH
9567: LD_INT 1
9569: ARRAY
9570: ST_TO_ADDR
// end ; end ;
9571: LD_VAR 0 4
9575: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9576: LD_INT 0
9578: PPUSH
9579: PPUSH
// if not list then
9580: LD_VAR 0 1
9584: NOT
9585: IFFALSE 9589
// exit ;
9587: GO 9680
// i := list [ pos1 ] ;
9589: LD_ADDR_VAR 0 5
9593: PUSH
9594: LD_VAR 0 1
9598: PUSH
9599: LD_VAR 0 2
9603: ARRAY
9604: ST_TO_ADDR
// if not i then
9605: LD_VAR 0 5
9609: NOT
9610: IFFALSE 9614
// exit ;
9612: GO 9680
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9614: LD_ADDR_VAR 0 1
9618: PUSH
9619: LD_VAR 0 1
9623: PPUSH
9624: LD_VAR 0 2
9628: PPUSH
9629: LD_VAR 0 1
9633: PUSH
9634: LD_VAR 0 3
9638: ARRAY
9639: PPUSH
9640: CALL_OW 1
9644: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9645: LD_ADDR_VAR 0 1
9649: PUSH
9650: LD_VAR 0 1
9654: PPUSH
9655: LD_VAR 0 3
9659: PPUSH
9660: LD_VAR 0 5
9664: PPUSH
9665: CALL_OW 1
9669: ST_TO_ADDR
// result := list ;
9670: LD_ADDR_VAR 0 4
9674: PUSH
9675: LD_VAR 0 1
9679: ST_TO_ADDR
// end ;
9680: LD_VAR 0 4
9684: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9685: LD_INT 0
9687: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9688: LD_ADDR_VAR 0 5
9692: PUSH
9693: LD_VAR 0 1
9697: PPUSH
9698: CALL_OW 250
9702: PPUSH
9703: LD_VAR 0 1
9707: PPUSH
9708: CALL_OW 251
9712: PPUSH
9713: LD_VAR 0 2
9717: PPUSH
9718: LD_VAR 0 3
9722: PPUSH
9723: LD_VAR 0 4
9727: PPUSH
9728: CALL 9738 0 5
9732: ST_TO_ADDR
// end ;
9733: LD_VAR 0 5
9737: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9738: LD_INT 0
9740: PPUSH
9741: PPUSH
9742: PPUSH
9743: PPUSH
// if not list then
9744: LD_VAR 0 3
9748: NOT
9749: IFFALSE 9753
// exit ;
9751: GO 10141
// result := [ ] ;
9753: LD_ADDR_VAR 0 6
9757: PUSH
9758: EMPTY
9759: ST_TO_ADDR
// for i in list do
9760: LD_ADDR_VAR 0 7
9764: PUSH
9765: LD_VAR 0 3
9769: PUSH
9770: FOR_IN
9771: IFFALSE 9973
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9773: LD_ADDR_VAR 0 9
9777: PUSH
9778: LD_VAR 0 7
9782: PPUSH
9783: LD_VAR 0 1
9787: PPUSH
9788: LD_VAR 0 2
9792: PPUSH
9793: CALL_OW 297
9797: ST_TO_ADDR
// if not result then
9798: LD_VAR 0 6
9802: NOT
9803: IFFALSE 9829
// result := [ [ i , tmp ] ] else
9805: LD_ADDR_VAR 0 6
9809: PUSH
9810: LD_VAR 0 7
9814: PUSH
9815: LD_VAR 0 9
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: PUSH
9824: EMPTY
9825: LIST
9826: ST_TO_ADDR
9827: GO 9971
// begin if result [ result ] [ 2 ] < tmp then
9829: LD_VAR 0 6
9833: PUSH
9834: LD_VAR 0 6
9838: ARRAY
9839: PUSH
9840: LD_INT 2
9842: ARRAY
9843: PUSH
9844: LD_VAR 0 9
9848: LESS
9849: IFFALSE 9891
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9851: LD_ADDR_VAR 0 6
9855: PUSH
9856: LD_VAR 0 6
9860: PPUSH
9861: LD_VAR 0 6
9865: PUSH
9866: LD_INT 1
9868: PLUS
9869: PPUSH
9870: LD_VAR 0 7
9874: PUSH
9875: LD_VAR 0 9
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PPUSH
9884: CALL_OW 2
9888: ST_TO_ADDR
9889: GO 9971
// for j = 1 to result do
9891: LD_ADDR_VAR 0 8
9895: PUSH
9896: DOUBLE
9897: LD_INT 1
9899: DEC
9900: ST_TO_ADDR
9901: LD_VAR 0 6
9905: PUSH
9906: FOR_TO
9907: IFFALSE 9969
// begin if tmp < result [ j ] [ 2 ] then
9909: LD_VAR 0 9
9913: PUSH
9914: LD_VAR 0 6
9918: PUSH
9919: LD_VAR 0 8
9923: ARRAY
9924: PUSH
9925: LD_INT 2
9927: ARRAY
9928: LESS
9929: IFFALSE 9967
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9931: LD_ADDR_VAR 0 6
9935: PUSH
9936: LD_VAR 0 6
9940: PPUSH
9941: LD_VAR 0 8
9945: PPUSH
9946: LD_VAR 0 7
9950: PUSH
9951: LD_VAR 0 9
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PPUSH
9960: CALL_OW 2
9964: ST_TO_ADDR
// break ;
9965: GO 9969
// end ; end ;
9967: GO 9906
9969: POP
9970: POP
// end ; end ;
9971: GO 9770
9973: POP
9974: POP
// if result and not asc then
9975: LD_VAR 0 6
9979: PUSH
9980: LD_VAR 0 4
9984: NOT
9985: AND
9986: IFFALSE 10061
// begin tmp := result ;
9988: LD_ADDR_VAR 0 9
9992: PUSH
9993: LD_VAR 0 6
9997: ST_TO_ADDR
// for i = tmp downto 1 do
9998: LD_ADDR_VAR 0 7
10002: PUSH
10003: DOUBLE
10004: LD_VAR 0 9
10008: INC
10009: ST_TO_ADDR
10010: LD_INT 1
10012: PUSH
10013: FOR_DOWNTO
10014: IFFALSE 10059
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10016: LD_ADDR_VAR 0 6
10020: PUSH
10021: LD_VAR 0 6
10025: PPUSH
10026: LD_VAR 0 9
10030: PUSH
10031: LD_VAR 0 7
10035: MINUS
10036: PUSH
10037: LD_INT 1
10039: PLUS
10040: PPUSH
10041: LD_VAR 0 9
10045: PUSH
10046: LD_VAR 0 7
10050: ARRAY
10051: PPUSH
10052: CALL_OW 1
10056: ST_TO_ADDR
10057: GO 10013
10059: POP
10060: POP
// end ; tmp := [ ] ;
10061: LD_ADDR_VAR 0 9
10065: PUSH
10066: EMPTY
10067: ST_TO_ADDR
// if mode then
10068: LD_VAR 0 5
10072: IFFALSE 10141
// begin for i = 1 to result do
10074: LD_ADDR_VAR 0 7
10078: PUSH
10079: DOUBLE
10080: LD_INT 1
10082: DEC
10083: ST_TO_ADDR
10084: LD_VAR 0 6
10088: PUSH
10089: FOR_TO
10090: IFFALSE 10129
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10092: LD_ADDR_VAR 0 9
10096: PUSH
10097: LD_VAR 0 9
10101: PPUSH
10102: LD_VAR 0 7
10106: PPUSH
10107: LD_VAR 0 6
10111: PUSH
10112: LD_VAR 0 7
10116: ARRAY
10117: PUSH
10118: LD_INT 1
10120: ARRAY
10121: PPUSH
10122: CALL_OW 1
10126: ST_TO_ADDR
10127: GO 10089
10129: POP
10130: POP
// result := tmp ;
10131: LD_ADDR_VAR 0 6
10135: PUSH
10136: LD_VAR 0 9
10140: ST_TO_ADDR
// end ; end ;
10141: LD_VAR 0 6
10145: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10146: LD_INT 0
10148: PPUSH
10149: PPUSH
10150: PPUSH
10151: PPUSH
10152: PPUSH
10153: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10154: LD_ADDR_VAR 0 5
10158: PUSH
10159: LD_INT 0
10161: PUSH
10162: LD_INT 0
10164: PUSH
10165: LD_INT 0
10167: PUSH
10168: EMPTY
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: ST_TO_ADDR
// if not x or not y then
10176: LD_VAR 0 2
10180: NOT
10181: PUSH
10182: LD_VAR 0 3
10186: NOT
10187: OR
10188: IFFALSE 10192
// exit ;
10190: GO 11844
// if not range then
10192: LD_VAR 0 4
10196: NOT
10197: IFFALSE 10207
// range := 10 ;
10199: LD_ADDR_VAR 0 4
10203: PUSH
10204: LD_INT 10
10206: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10207: LD_ADDR_VAR 0 8
10211: PUSH
10212: LD_INT 81
10214: PUSH
10215: LD_VAR 0 1
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 92
10226: PUSH
10227: LD_VAR 0 2
10231: PUSH
10232: LD_VAR 0 3
10236: PUSH
10237: LD_VAR 0 4
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 3
10250: PUSH
10251: LD_INT 21
10253: PUSH
10254: LD_INT 3
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: LIST
10269: PPUSH
10270: CALL_OW 69
10274: ST_TO_ADDR
// if not tmp then
10275: LD_VAR 0 8
10279: NOT
10280: IFFALSE 10284
// exit ;
10282: GO 11844
// for i in tmp do
10284: LD_ADDR_VAR 0 6
10288: PUSH
10289: LD_VAR 0 8
10293: PUSH
10294: FOR_IN
10295: IFFALSE 11819
// begin points := [ 0 , 0 , 0 ] ;
10297: LD_ADDR_VAR 0 9
10301: PUSH
10302: LD_INT 0
10304: PUSH
10305: LD_INT 0
10307: PUSH
10308: LD_INT 0
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: ST_TO_ADDR
// bpoints := 1 ;
10316: LD_ADDR_VAR 0 10
10320: PUSH
10321: LD_INT 1
10323: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10324: LD_VAR 0 6
10328: PPUSH
10329: CALL_OW 247
10333: PUSH
10334: LD_INT 1
10336: DOUBLE
10337: EQUAL
10338: IFTRUE 10342
10340: GO 10920
10342: POP
// begin if GetClass ( i ) = 1 then
10343: LD_VAR 0 6
10347: PPUSH
10348: CALL_OW 257
10352: PUSH
10353: LD_INT 1
10355: EQUAL
10356: IFFALSE 10377
// points := [ 10 , 5 , 3 ] ;
10358: LD_ADDR_VAR 0 9
10362: PUSH
10363: LD_INT 10
10365: PUSH
10366: LD_INT 5
10368: PUSH
10369: LD_INT 3
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: LIST
10376: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10377: LD_VAR 0 6
10381: PPUSH
10382: CALL_OW 257
10386: PUSH
10387: LD_INT 2
10389: PUSH
10390: LD_INT 3
10392: PUSH
10393: LD_INT 4
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: LIST
10400: IN
10401: IFFALSE 10422
// points := [ 3 , 2 , 1 ] ;
10403: LD_ADDR_VAR 0 9
10407: PUSH
10408: LD_INT 3
10410: PUSH
10411: LD_INT 2
10413: PUSH
10414: LD_INT 1
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10422: LD_VAR 0 6
10426: PPUSH
10427: CALL_OW 257
10431: PUSH
10432: LD_INT 5
10434: EQUAL
10435: IFFALSE 10456
// points := [ 130 , 5 , 2 ] ;
10437: LD_ADDR_VAR 0 9
10441: PUSH
10442: LD_INT 130
10444: PUSH
10445: LD_INT 5
10447: PUSH
10448: LD_INT 2
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10456: LD_VAR 0 6
10460: PPUSH
10461: CALL_OW 257
10465: PUSH
10466: LD_INT 8
10468: EQUAL
10469: IFFALSE 10490
// points := [ 35 , 35 , 30 ] ;
10471: LD_ADDR_VAR 0 9
10475: PUSH
10476: LD_INT 35
10478: PUSH
10479: LD_INT 35
10481: PUSH
10482: LD_INT 30
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: LIST
10489: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10490: LD_VAR 0 6
10494: PPUSH
10495: CALL_OW 257
10499: PUSH
10500: LD_INT 9
10502: EQUAL
10503: IFFALSE 10524
// points := [ 20 , 55 , 40 ] ;
10505: LD_ADDR_VAR 0 9
10509: PUSH
10510: LD_INT 20
10512: PUSH
10513: LD_INT 55
10515: PUSH
10516: LD_INT 40
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10524: LD_VAR 0 6
10528: PPUSH
10529: CALL_OW 257
10533: PUSH
10534: LD_INT 12
10536: PUSH
10537: LD_INT 16
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: IN
10544: IFFALSE 10565
// points := [ 5 , 3 , 2 ] ;
10546: LD_ADDR_VAR 0 9
10550: PUSH
10551: LD_INT 5
10553: PUSH
10554: LD_INT 3
10556: PUSH
10557: LD_INT 2
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: LIST
10564: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10565: LD_VAR 0 6
10569: PPUSH
10570: CALL_OW 257
10574: PUSH
10575: LD_INT 17
10577: EQUAL
10578: IFFALSE 10599
// points := [ 100 , 50 , 75 ] ;
10580: LD_ADDR_VAR 0 9
10584: PUSH
10585: LD_INT 100
10587: PUSH
10588: LD_INT 50
10590: PUSH
10591: LD_INT 75
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: LIST
10598: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10599: LD_VAR 0 6
10603: PPUSH
10604: CALL_OW 257
10608: PUSH
10609: LD_INT 15
10611: EQUAL
10612: IFFALSE 10633
// points := [ 10 , 5 , 3 ] ;
10614: LD_ADDR_VAR 0 9
10618: PUSH
10619: LD_INT 10
10621: PUSH
10622: LD_INT 5
10624: PUSH
10625: LD_INT 3
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10633: LD_VAR 0 6
10637: PPUSH
10638: CALL_OW 257
10642: PUSH
10643: LD_INT 14
10645: EQUAL
10646: IFFALSE 10667
// points := [ 10 , 0 , 0 ] ;
10648: LD_ADDR_VAR 0 9
10652: PUSH
10653: LD_INT 10
10655: PUSH
10656: LD_INT 0
10658: PUSH
10659: LD_INT 0
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: LIST
10666: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10667: LD_VAR 0 6
10671: PPUSH
10672: CALL_OW 257
10676: PUSH
10677: LD_INT 11
10679: EQUAL
10680: IFFALSE 10701
// points := [ 30 , 10 , 5 ] ;
10682: LD_ADDR_VAR 0 9
10686: PUSH
10687: LD_INT 30
10689: PUSH
10690: LD_INT 10
10692: PUSH
10693: LD_INT 5
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10701: LD_VAR 0 1
10705: PPUSH
10706: LD_INT 5
10708: PPUSH
10709: CALL_OW 321
10713: PUSH
10714: LD_INT 2
10716: EQUAL
10717: IFFALSE 10734
// bpoints := bpoints * 1.8 ;
10719: LD_ADDR_VAR 0 10
10723: PUSH
10724: LD_VAR 0 10
10728: PUSH
10729: LD_REAL  1.80000000000000E+0000
10732: MUL
10733: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10734: LD_VAR 0 6
10738: PPUSH
10739: CALL_OW 257
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: LD_INT 2
10749: PUSH
10750: LD_INT 3
10752: PUSH
10753: LD_INT 4
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: IN
10762: PUSH
10763: LD_VAR 0 1
10767: PPUSH
10768: LD_INT 51
10770: PPUSH
10771: CALL_OW 321
10775: PUSH
10776: LD_INT 2
10778: EQUAL
10779: AND
10780: IFFALSE 10797
// bpoints := bpoints * 1.2 ;
10782: LD_ADDR_VAR 0 10
10786: PUSH
10787: LD_VAR 0 10
10791: PUSH
10792: LD_REAL  1.20000000000000E+0000
10795: MUL
10796: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10797: LD_VAR 0 6
10801: PPUSH
10802: CALL_OW 257
10806: PUSH
10807: LD_INT 5
10809: PUSH
10810: LD_INT 7
10812: PUSH
10813: LD_INT 9
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: LIST
10820: IN
10821: PUSH
10822: LD_VAR 0 1
10826: PPUSH
10827: LD_INT 52
10829: PPUSH
10830: CALL_OW 321
10834: PUSH
10835: LD_INT 2
10837: EQUAL
10838: AND
10839: IFFALSE 10856
// bpoints := bpoints * 1.5 ;
10841: LD_ADDR_VAR 0 10
10845: PUSH
10846: LD_VAR 0 10
10850: PUSH
10851: LD_REAL  1.50000000000000E+0000
10854: MUL
10855: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10856: LD_VAR 0 1
10860: PPUSH
10861: LD_INT 66
10863: PPUSH
10864: CALL_OW 321
10868: PUSH
10869: LD_INT 2
10871: EQUAL
10872: IFFALSE 10889
// bpoints := bpoints * 1.1 ;
10874: LD_ADDR_VAR 0 10
10878: PUSH
10879: LD_VAR 0 10
10883: PUSH
10884: LD_REAL  1.10000000000000E+0000
10887: MUL
10888: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10889: LD_ADDR_VAR 0 10
10893: PUSH
10894: LD_VAR 0 10
10898: PUSH
10899: LD_VAR 0 6
10903: PPUSH
10904: LD_INT 1
10906: PPUSH
10907: CALL_OW 259
10911: PUSH
10912: LD_REAL  1.15000000000000E+0000
10915: MUL
10916: MUL
10917: ST_TO_ADDR
// end ; unit_vehicle :
10918: GO 11748
10920: LD_INT 2
10922: DOUBLE
10923: EQUAL
10924: IFTRUE 10928
10926: GO 11736
10928: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10929: LD_VAR 0 6
10933: PPUSH
10934: CALL_OW 264
10938: PUSH
10939: LD_INT 2
10941: PUSH
10942: LD_INT 42
10944: PUSH
10945: LD_INT 24
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: LIST
10952: IN
10953: IFFALSE 10974
// points := [ 25 , 5 , 3 ] ;
10955: LD_ADDR_VAR 0 9
10959: PUSH
10960: LD_INT 25
10962: PUSH
10963: LD_INT 5
10965: PUSH
10966: LD_INT 3
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: LIST
10973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10974: LD_VAR 0 6
10978: PPUSH
10979: CALL_OW 264
10983: PUSH
10984: LD_INT 4
10986: PUSH
10987: LD_INT 43
10989: PUSH
10990: LD_INT 25
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: IN
10998: IFFALSE 11019
// points := [ 40 , 15 , 5 ] ;
11000: LD_ADDR_VAR 0 9
11004: PUSH
11005: LD_INT 40
11007: PUSH
11008: LD_INT 15
11010: PUSH
11011: LD_INT 5
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: LIST
11018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11019: LD_VAR 0 6
11023: PPUSH
11024: CALL_OW 264
11028: PUSH
11029: LD_INT 3
11031: PUSH
11032: LD_INT 23
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: IN
11039: IFFALSE 11060
// points := [ 7 , 25 , 8 ] ;
11041: LD_ADDR_VAR 0 9
11045: PUSH
11046: LD_INT 7
11048: PUSH
11049: LD_INT 25
11051: PUSH
11052: LD_INT 8
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11060: LD_VAR 0 6
11064: PPUSH
11065: CALL_OW 264
11069: PUSH
11070: LD_INT 5
11072: PUSH
11073: LD_INT 27
11075: PUSH
11076: LD_INT 44
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: LIST
11083: IN
11084: IFFALSE 11105
// points := [ 14 , 50 , 16 ] ;
11086: LD_ADDR_VAR 0 9
11090: PUSH
11091: LD_INT 14
11093: PUSH
11094: LD_INT 50
11096: PUSH
11097: LD_INT 16
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11105: LD_VAR 0 6
11109: PPUSH
11110: CALL_OW 264
11114: PUSH
11115: LD_INT 6
11117: PUSH
11118: LD_INT 46
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: IN
11125: IFFALSE 11146
// points := [ 32 , 120 , 70 ] ;
11127: LD_ADDR_VAR 0 9
11131: PUSH
11132: LD_INT 32
11134: PUSH
11135: LD_INT 120
11137: PUSH
11138: LD_INT 70
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: LIST
11145: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11146: LD_VAR 0 6
11150: PPUSH
11151: CALL_OW 264
11155: PUSH
11156: LD_INT 7
11158: PUSH
11159: LD_INT 28
11161: PUSH
11162: LD_INT 45
11164: PUSH
11165: LD_EXP 49
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: IN
11176: IFFALSE 11197
// points := [ 35 , 20 , 45 ] ;
11178: LD_ADDR_VAR 0 9
11182: PUSH
11183: LD_INT 35
11185: PUSH
11186: LD_INT 20
11188: PUSH
11189: LD_INT 45
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11197: LD_VAR 0 6
11201: PPUSH
11202: CALL_OW 264
11206: PUSH
11207: LD_INT 47
11209: PUSH
11210: EMPTY
11211: LIST
11212: IN
11213: IFFALSE 11234
// points := [ 67 , 45 , 75 ] ;
11215: LD_ADDR_VAR 0 9
11219: PUSH
11220: LD_INT 67
11222: PUSH
11223: LD_INT 45
11225: PUSH
11226: LD_INT 75
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: LIST
11233: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11234: LD_VAR 0 6
11238: PPUSH
11239: CALL_OW 264
11243: PUSH
11244: LD_INT 26
11246: PUSH
11247: EMPTY
11248: LIST
11249: IN
11250: IFFALSE 11271
// points := [ 120 , 30 , 80 ] ;
11252: LD_ADDR_VAR 0 9
11256: PUSH
11257: LD_INT 120
11259: PUSH
11260: LD_INT 30
11262: PUSH
11263: LD_INT 80
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11271: LD_VAR 0 6
11275: PPUSH
11276: CALL_OW 264
11280: PUSH
11281: LD_INT 22
11283: PUSH
11284: EMPTY
11285: LIST
11286: IN
11287: IFFALSE 11308
// points := [ 40 , 1 , 1 ] ;
11289: LD_ADDR_VAR 0 9
11293: PUSH
11294: LD_INT 40
11296: PUSH
11297: LD_INT 1
11299: PUSH
11300: LD_INT 1
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: LIST
11307: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11308: LD_VAR 0 6
11312: PPUSH
11313: CALL_OW 264
11317: PUSH
11318: LD_INT 29
11320: PUSH
11321: EMPTY
11322: LIST
11323: IN
11324: IFFALSE 11345
// points := [ 70 , 200 , 400 ] ;
11326: LD_ADDR_VAR 0 9
11330: PUSH
11331: LD_INT 70
11333: PUSH
11334: LD_INT 200
11336: PUSH
11337: LD_INT 400
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: LIST
11344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11345: LD_VAR 0 6
11349: PPUSH
11350: CALL_OW 264
11354: PUSH
11355: LD_INT 14
11357: PUSH
11358: LD_INT 53
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: IN
11365: IFFALSE 11386
// points := [ 40 , 10 , 20 ] ;
11367: LD_ADDR_VAR 0 9
11371: PUSH
11372: LD_INT 40
11374: PUSH
11375: LD_INT 10
11377: PUSH
11378: LD_INT 20
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: LIST
11385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11386: LD_VAR 0 6
11390: PPUSH
11391: CALL_OW 264
11395: PUSH
11396: LD_INT 9
11398: PUSH
11399: EMPTY
11400: LIST
11401: IN
11402: IFFALSE 11423
// points := [ 5 , 70 , 20 ] ;
11404: LD_ADDR_VAR 0 9
11408: PUSH
11409: LD_INT 5
11411: PUSH
11412: LD_INT 70
11414: PUSH
11415: LD_INT 20
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11423: LD_VAR 0 6
11427: PPUSH
11428: CALL_OW 264
11432: PUSH
11433: LD_INT 10
11435: PUSH
11436: EMPTY
11437: LIST
11438: IN
11439: IFFALSE 11460
// points := [ 35 , 110 , 70 ] ;
11441: LD_ADDR_VAR 0 9
11445: PUSH
11446: LD_INT 35
11448: PUSH
11449: LD_INT 110
11451: PUSH
11452: LD_INT 70
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: LIST
11459: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11460: LD_VAR 0 6
11464: PPUSH
11465: CALL_OW 265
11469: PUSH
11470: LD_INT 25
11472: EQUAL
11473: IFFALSE 11494
// points := [ 80 , 65 , 100 ] ;
11475: LD_ADDR_VAR 0 9
11479: PUSH
11480: LD_INT 80
11482: PUSH
11483: LD_INT 65
11485: PUSH
11486: LD_INT 100
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11494: LD_VAR 0 6
11498: PPUSH
11499: CALL_OW 263
11503: PUSH
11504: LD_INT 1
11506: EQUAL
11507: IFFALSE 11542
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11509: LD_ADDR_VAR 0 10
11513: PUSH
11514: LD_VAR 0 10
11518: PUSH
11519: LD_VAR 0 6
11523: PPUSH
11524: CALL_OW 311
11528: PPUSH
11529: LD_INT 3
11531: PPUSH
11532: CALL_OW 259
11536: PUSH
11537: LD_INT 4
11539: MUL
11540: MUL
11541: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11542: LD_VAR 0 6
11546: PPUSH
11547: CALL_OW 263
11551: PUSH
11552: LD_INT 2
11554: EQUAL
11555: IFFALSE 11606
// begin j := IsControledBy ( i ) ;
11557: LD_ADDR_VAR 0 7
11561: PUSH
11562: LD_VAR 0 6
11566: PPUSH
11567: CALL_OW 312
11571: ST_TO_ADDR
// if j then
11572: LD_VAR 0 7
11576: IFFALSE 11606
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11578: LD_ADDR_VAR 0 10
11582: PUSH
11583: LD_VAR 0 10
11587: PUSH
11588: LD_VAR 0 7
11592: PPUSH
11593: LD_INT 3
11595: PPUSH
11596: CALL_OW 259
11600: PUSH
11601: LD_INT 3
11603: MUL
11604: MUL
11605: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11606: LD_VAR 0 6
11610: PPUSH
11611: CALL_OW 264
11615: PUSH
11616: LD_INT 5
11618: PUSH
11619: LD_INT 6
11621: PUSH
11622: LD_INT 46
11624: PUSH
11625: LD_INT 44
11627: PUSH
11628: LD_INT 47
11630: PUSH
11631: LD_INT 45
11633: PUSH
11634: LD_INT 28
11636: PUSH
11637: LD_INT 7
11639: PUSH
11640: LD_INT 27
11642: PUSH
11643: LD_INT 29
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: IN
11658: PUSH
11659: LD_VAR 0 1
11663: PPUSH
11664: LD_INT 52
11666: PPUSH
11667: CALL_OW 321
11671: PUSH
11672: LD_INT 2
11674: EQUAL
11675: AND
11676: IFFALSE 11693
// bpoints := bpoints * 1.2 ;
11678: LD_ADDR_VAR 0 10
11682: PUSH
11683: LD_VAR 0 10
11687: PUSH
11688: LD_REAL  1.20000000000000E+0000
11691: MUL
11692: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11693: LD_VAR 0 6
11697: PPUSH
11698: CALL_OW 264
11702: PUSH
11703: LD_INT 6
11705: PUSH
11706: LD_INT 46
11708: PUSH
11709: LD_INT 47
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: LIST
11716: IN
11717: IFFALSE 11734
// bpoints := bpoints * 1.2 ;
11719: LD_ADDR_VAR 0 10
11723: PUSH
11724: LD_VAR 0 10
11728: PUSH
11729: LD_REAL  1.20000000000000E+0000
11732: MUL
11733: ST_TO_ADDR
// end ; unit_building :
11734: GO 11748
11736: LD_INT 3
11738: DOUBLE
11739: EQUAL
11740: IFTRUE 11744
11742: GO 11747
11744: POP
// ; end ;
11745: GO 11748
11747: POP
// for j = 1 to 3 do
11748: LD_ADDR_VAR 0 7
11752: PUSH
11753: DOUBLE
11754: LD_INT 1
11756: DEC
11757: ST_TO_ADDR
11758: LD_INT 3
11760: PUSH
11761: FOR_TO
11762: IFFALSE 11815
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11764: LD_ADDR_VAR 0 5
11768: PUSH
11769: LD_VAR 0 5
11773: PPUSH
11774: LD_VAR 0 7
11778: PPUSH
11779: LD_VAR 0 5
11783: PUSH
11784: LD_VAR 0 7
11788: ARRAY
11789: PUSH
11790: LD_VAR 0 9
11794: PUSH
11795: LD_VAR 0 7
11799: ARRAY
11800: PUSH
11801: LD_VAR 0 10
11805: MUL
11806: PLUS
11807: PPUSH
11808: CALL_OW 1
11812: ST_TO_ADDR
11813: GO 11761
11815: POP
11816: POP
// end ;
11817: GO 10294
11819: POP
11820: POP
// result := Replace ( result , 4 , tmp ) ;
11821: LD_ADDR_VAR 0 5
11825: PUSH
11826: LD_VAR 0 5
11830: PPUSH
11831: LD_INT 4
11833: PPUSH
11834: LD_VAR 0 8
11838: PPUSH
11839: CALL_OW 1
11843: ST_TO_ADDR
// end ;
11844: LD_VAR 0 5
11848: RET
// export function DangerAtRange ( unit , range ) ; begin
11849: LD_INT 0
11851: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11852: LD_ADDR_VAR 0 3
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: CALL_OW 255
11866: PPUSH
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 250
11876: PPUSH
11877: LD_VAR 0 1
11881: PPUSH
11882: CALL_OW 251
11886: PPUSH
11887: LD_VAR 0 2
11891: PPUSH
11892: CALL 10146 0 4
11896: ST_TO_ADDR
// end ;
11897: LD_VAR 0 3
11901: RET
// export function DangerInArea ( side , area ) ; begin
11902: LD_INT 0
11904: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11905: LD_ADDR_VAR 0 3
11909: PUSH
11910: LD_VAR 0 2
11914: PPUSH
11915: LD_INT 81
11917: PUSH
11918: LD_VAR 0 1
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PPUSH
11927: CALL_OW 70
11931: ST_TO_ADDR
// end ;
11932: LD_VAR 0 3
11936: RET
// export function IsExtension ( b ) ; begin
11937: LD_INT 0
11939: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11940: LD_ADDR_VAR 0 2
11944: PUSH
11945: LD_VAR 0 1
11949: PUSH
11950: LD_INT 23
11952: PUSH
11953: LD_INT 20
11955: PUSH
11956: LD_INT 22
11958: PUSH
11959: LD_INT 17
11961: PUSH
11962: LD_INT 24
11964: PUSH
11965: LD_INT 21
11967: PUSH
11968: LD_INT 19
11970: PUSH
11971: LD_INT 16
11973: PUSH
11974: LD_INT 25
11976: PUSH
11977: LD_INT 18
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: IN
11992: ST_TO_ADDR
// end ;
11993: LD_VAR 0 2
11997: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11998: LD_INT 0
12000: PPUSH
12001: PPUSH
12002: PPUSH
// result := [ ] ;
12003: LD_ADDR_VAR 0 4
12007: PUSH
12008: EMPTY
12009: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12010: LD_ADDR_VAR 0 5
12014: PUSH
12015: LD_VAR 0 2
12019: PPUSH
12020: LD_INT 21
12022: PUSH
12023: LD_INT 3
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PPUSH
12030: CALL_OW 70
12034: ST_TO_ADDR
// if not tmp then
12035: LD_VAR 0 5
12039: NOT
12040: IFFALSE 12044
// exit ;
12042: GO 12108
// if checkLink then
12044: LD_VAR 0 3
12048: IFFALSE 12098
// begin for i in tmp do
12050: LD_ADDR_VAR 0 6
12054: PUSH
12055: LD_VAR 0 5
12059: PUSH
12060: FOR_IN
12061: IFFALSE 12096
// if GetBase ( i ) <> base then
12063: LD_VAR 0 6
12067: PPUSH
12068: CALL_OW 274
12072: PUSH
12073: LD_VAR 0 1
12077: NONEQUAL
12078: IFFALSE 12094
// ComLinkToBase ( base , i ) ;
12080: LD_VAR 0 1
12084: PPUSH
12085: LD_VAR 0 6
12089: PPUSH
12090: CALL_OW 169
12094: GO 12060
12096: POP
12097: POP
// end ; result := tmp ;
12098: LD_ADDR_VAR 0 4
12102: PUSH
12103: LD_VAR 0 5
12107: ST_TO_ADDR
// end ;
12108: LD_VAR 0 4
12112: RET
// export function ComComplete ( units , b ) ; var i ; begin
12113: LD_INT 0
12115: PPUSH
12116: PPUSH
// if not units then
12117: LD_VAR 0 1
12121: NOT
12122: IFFALSE 12126
// exit ;
12124: GO 12216
// for i in units do
12126: LD_ADDR_VAR 0 4
12130: PUSH
12131: LD_VAR 0 1
12135: PUSH
12136: FOR_IN
12137: IFFALSE 12214
// if BuildingStatus ( b ) = bs_build then
12139: LD_VAR 0 2
12143: PPUSH
12144: CALL_OW 461
12148: PUSH
12149: LD_INT 1
12151: EQUAL
12152: IFFALSE 12212
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12154: LD_VAR 0 4
12158: PPUSH
12159: LD_STRING h
12161: PUSH
12162: LD_VAR 0 2
12166: PPUSH
12167: CALL_OW 250
12171: PUSH
12172: LD_VAR 0 2
12176: PPUSH
12177: CALL_OW 251
12181: PUSH
12182: LD_VAR 0 2
12186: PUSH
12187: LD_INT 0
12189: PUSH
12190: LD_INT 0
12192: PUSH
12193: LD_INT 0
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: PUSH
12205: EMPTY
12206: LIST
12207: PPUSH
12208: CALL_OW 446
12212: GO 12136
12214: POP
12215: POP
// end ;
12216: LD_VAR 0 3
12220: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12221: LD_INT 0
12223: PPUSH
12224: PPUSH
12225: PPUSH
12226: PPUSH
12227: PPUSH
12228: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12229: LD_VAR 0 1
12233: NOT
12234: PUSH
12235: LD_VAR 0 1
12239: PPUSH
12240: CALL_OW 263
12244: PUSH
12245: LD_INT 2
12247: NONEQUAL
12248: OR
12249: IFFALSE 12253
// exit ;
12251: GO 12569
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12253: LD_ADDR_VAR 0 6
12257: PUSH
12258: LD_INT 22
12260: PUSH
12261: LD_VAR 0 1
12265: PPUSH
12266: CALL_OW 255
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 2
12277: PUSH
12278: LD_INT 30
12280: PUSH
12281: LD_INT 36
12283: PUSH
12284: EMPTY
12285: LIST
12286: LIST
12287: PUSH
12288: LD_INT 34
12290: PUSH
12291: LD_INT 31
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 69
12311: ST_TO_ADDR
// if not tmp then
12312: LD_VAR 0 6
12316: NOT
12317: IFFALSE 12321
// exit ;
12319: GO 12569
// result := [ ] ;
12321: LD_ADDR_VAR 0 2
12325: PUSH
12326: EMPTY
12327: ST_TO_ADDR
// for i in tmp do
12328: LD_ADDR_VAR 0 3
12332: PUSH
12333: LD_VAR 0 6
12337: PUSH
12338: FOR_IN
12339: IFFALSE 12410
// begin t := UnitsInside ( i ) ;
12341: LD_ADDR_VAR 0 4
12345: PUSH
12346: LD_VAR 0 3
12350: PPUSH
12351: CALL_OW 313
12355: ST_TO_ADDR
// if t then
12356: LD_VAR 0 4
12360: IFFALSE 12408
// for j in t do
12362: LD_ADDR_VAR 0 7
12366: PUSH
12367: LD_VAR 0 4
12371: PUSH
12372: FOR_IN
12373: IFFALSE 12406
// result := Replace ( result , result + 1 , j ) ;
12375: LD_ADDR_VAR 0 2
12379: PUSH
12380: LD_VAR 0 2
12384: PPUSH
12385: LD_VAR 0 2
12389: PUSH
12390: LD_INT 1
12392: PLUS
12393: PPUSH
12394: LD_VAR 0 7
12398: PPUSH
12399: CALL_OW 1
12403: ST_TO_ADDR
12404: GO 12372
12406: POP
12407: POP
// end ;
12408: GO 12338
12410: POP
12411: POP
// if not result then
12412: LD_VAR 0 2
12416: NOT
12417: IFFALSE 12421
// exit ;
12419: GO 12569
// mech := result [ 1 ] ;
12421: LD_ADDR_VAR 0 5
12425: PUSH
12426: LD_VAR 0 2
12430: PUSH
12431: LD_INT 1
12433: ARRAY
12434: ST_TO_ADDR
// if result > 1 then
12435: LD_VAR 0 2
12439: PUSH
12440: LD_INT 1
12442: GREATER
12443: IFFALSE 12555
// begin for i = 2 to result do
12445: LD_ADDR_VAR 0 3
12449: PUSH
12450: DOUBLE
12451: LD_INT 2
12453: DEC
12454: ST_TO_ADDR
12455: LD_VAR 0 2
12459: PUSH
12460: FOR_TO
12461: IFFALSE 12553
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12463: LD_ADDR_VAR 0 4
12467: PUSH
12468: LD_VAR 0 2
12472: PUSH
12473: LD_VAR 0 3
12477: ARRAY
12478: PPUSH
12479: LD_INT 3
12481: PPUSH
12482: CALL_OW 259
12486: PUSH
12487: LD_VAR 0 2
12491: PUSH
12492: LD_VAR 0 3
12496: ARRAY
12497: PPUSH
12498: CALL_OW 432
12502: MINUS
12503: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12504: LD_VAR 0 4
12508: PUSH
12509: LD_VAR 0 5
12513: PPUSH
12514: LD_INT 3
12516: PPUSH
12517: CALL_OW 259
12521: PUSH
12522: LD_VAR 0 5
12526: PPUSH
12527: CALL_OW 432
12531: MINUS
12532: GREATEREQUAL
12533: IFFALSE 12551
// mech := result [ i ] ;
12535: LD_ADDR_VAR 0 5
12539: PUSH
12540: LD_VAR 0 2
12544: PUSH
12545: LD_VAR 0 3
12549: ARRAY
12550: ST_TO_ADDR
// end ;
12551: GO 12460
12553: POP
12554: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12555: LD_VAR 0 1
12559: PPUSH
12560: LD_VAR 0 5
12564: PPUSH
12565: CALL_OW 135
// end ;
12569: LD_VAR 0 2
12573: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12574: LD_INT 0
12576: PPUSH
12577: PPUSH
12578: PPUSH
12579: PPUSH
12580: PPUSH
12581: PPUSH
12582: PPUSH
12583: PPUSH
12584: PPUSH
12585: PPUSH
12586: PPUSH
12587: PPUSH
12588: PPUSH
// result := [ ] ;
12589: LD_ADDR_VAR 0 7
12593: PUSH
12594: EMPTY
12595: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12596: LD_VAR 0 1
12600: PPUSH
12601: CALL_OW 266
12605: PUSH
12606: LD_INT 0
12608: PUSH
12609: LD_INT 1
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: IN
12616: NOT
12617: IFFALSE 12621
// exit ;
12619: GO 14255
// if name then
12621: LD_VAR 0 3
12625: IFFALSE 12641
// SetBName ( base_dep , name ) ;
12627: LD_VAR 0 1
12631: PPUSH
12632: LD_VAR 0 3
12636: PPUSH
12637: CALL_OW 500
// base := GetBase ( base_dep ) ;
12641: LD_ADDR_VAR 0 15
12645: PUSH
12646: LD_VAR 0 1
12650: PPUSH
12651: CALL_OW 274
12655: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12656: LD_ADDR_VAR 0 16
12660: PUSH
12661: LD_VAR 0 1
12665: PPUSH
12666: CALL_OW 255
12670: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12671: LD_ADDR_VAR 0 17
12675: PUSH
12676: LD_VAR 0 1
12680: PPUSH
12681: CALL_OW 248
12685: ST_TO_ADDR
// if sources then
12686: LD_VAR 0 5
12690: IFFALSE 12737
// for i = 1 to 3 do
12692: LD_ADDR_VAR 0 8
12696: PUSH
12697: DOUBLE
12698: LD_INT 1
12700: DEC
12701: ST_TO_ADDR
12702: LD_INT 3
12704: PUSH
12705: FOR_TO
12706: IFFALSE 12735
// AddResourceType ( base , i , sources [ i ] ) ;
12708: LD_VAR 0 15
12712: PPUSH
12713: LD_VAR 0 8
12717: PPUSH
12718: LD_VAR 0 5
12722: PUSH
12723: LD_VAR 0 8
12727: ARRAY
12728: PPUSH
12729: CALL_OW 276
12733: GO 12705
12735: POP
12736: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12737: LD_ADDR_VAR 0 18
12741: PUSH
12742: LD_VAR 0 15
12746: PPUSH
12747: LD_VAR 0 2
12751: PPUSH
12752: LD_INT 1
12754: PPUSH
12755: CALL 11998 0 3
12759: ST_TO_ADDR
// InitHc ;
12760: CALL_OW 19
// InitUc ;
12764: CALL_OW 18
// uc_side := side ;
12768: LD_ADDR_OWVAR 20
12772: PUSH
12773: LD_VAR 0 16
12777: ST_TO_ADDR
// uc_nation := nation ;
12778: LD_ADDR_OWVAR 21
12782: PUSH
12783: LD_VAR 0 17
12787: ST_TO_ADDR
// if buildings then
12788: LD_VAR 0 18
12792: IFFALSE 14114
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12794: LD_ADDR_VAR 0 19
12798: PUSH
12799: LD_VAR 0 18
12803: PPUSH
12804: LD_INT 2
12806: PUSH
12807: LD_INT 30
12809: PUSH
12810: LD_INT 29
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 30
12819: PUSH
12820: LD_INT 30
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: PPUSH
12832: CALL_OW 72
12836: ST_TO_ADDR
// if tmp then
12837: LD_VAR 0 19
12841: IFFALSE 12889
// for i in tmp do
12843: LD_ADDR_VAR 0 8
12847: PUSH
12848: LD_VAR 0 19
12852: PUSH
12853: FOR_IN
12854: IFFALSE 12887
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12856: LD_VAR 0 8
12860: PPUSH
12861: CALL_OW 250
12865: PPUSH
12866: LD_VAR 0 8
12870: PPUSH
12871: CALL_OW 251
12875: PPUSH
12876: LD_VAR 0 16
12880: PPUSH
12881: CALL_OW 441
12885: GO 12853
12887: POP
12888: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12889: LD_VAR 0 18
12893: PPUSH
12894: LD_INT 2
12896: PUSH
12897: LD_INT 30
12899: PUSH
12900: LD_INT 32
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 30
12909: PUSH
12910: LD_INT 33
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: LIST
12921: PPUSH
12922: CALL_OW 72
12926: IFFALSE 13014
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12928: LD_ADDR_VAR 0 8
12932: PUSH
12933: LD_VAR 0 18
12937: PPUSH
12938: LD_INT 2
12940: PUSH
12941: LD_INT 30
12943: PUSH
12944: LD_INT 32
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PUSH
12951: LD_INT 30
12953: PUSH
12954: LD_INT 33
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: LIST
12965: PPUSH
12966: CALL_OW 72
12970: PUSH
12971: FOR_IN
12972: IFFALSE 13012
// begin if not GetBWeapon ( i ) then
12974: LD_VAR 0 8
12978: PPUSH
12979: CALL_OW 269
12983: NOT
12984: IFFALSE 13010
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12986: LD_VAR 0 8
12990: PPUSH
12991: LD_VAR 0 8
12995: PPUSH
12996: LD_VAR 0 2
13000: PPUSH
13001: CALL 14260 0 2
13005: PPUSH
13006: CALL_OW 431
// end ;
13010: GO 12971
13012: POP
13013: POP
// end ; for i = 1 to personel do
13014: LD_ADDR_VAR 0 8
13018: PUSH
13019: DOUBLE
13020: LD_INT 1
13022: DEC
13023: ST_TO_ADDR
13024: LD_VAR 0 6
13028: PUSH
13029: FOR_TO
13030: IFFALSE 14094
// begin if i > 4 then
13032: LD_VAR 0 8
13036: PUSH
13037: LD_INT 4
13039: GREATER
13040: IFFALSE 13044
// break ;
13042: GO 14094
// case i of 1 :
13044: LD_VAR 0 8
13048: PUSH
13049: LD_INT 1
13051: DOUBLE
13052: EQUAL
13053: IFTRUE 13057
13055: GO 13137
13057: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13058: LD_ADDR_VAR 0 12
13062: PUSH
13063: LD_VAR 0 18
13067: PPUSH
13068: LD_INT 22
13070: PUSH
13071: LD_VAR 0 16
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: PUSH
13080: LD_INT 58
13082: PUSH
13083: EMPTY
13084: LIST
13085: PUSH
13086: LD_INT 2
13088: PUSH
13089: LD_INT 30
13091: PUSH
13092: LD_INT 32
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 30
13101: PUSH
13102: LD_INT 4
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 30
13111: PUSH
13112: LD_INT 5
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 72
13134: ST_TO_ADDR
13135: GO 13359
13137: LD_INT 2
13139: DOUBLE
13140: EQUAL
13141: IFTRUE 13145
13143: GO 13207
13145: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13146: LD_ADDR_VAR 0 12
13150: PUSH
13151: LD_VAR 0 18
13155: PPUSH
13156: LD_INT 22
13158: PUSH
13159: LD_VAR 0 16
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 2
13170: PUSH
13171: LD_INT 30
13173: PUSH
13174: LD_INT 0
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 30
13183: PUSH
13184: LD_INT 1
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PPUSH
13200: CALL_OW 72
13204: ST_TO_ADDR
13205: GO 13359
13207: LD_INT 3
13209: DOUBLE
13210: EQUAL
13211: IFTRUE 13215
13213: GO 13277
13215: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13216: LD_ADDR_VAR 0 12
13220: PUSH
13221: LD_VAR 0 18
13225: PPUSH
13226: LD_INT 22
13228: PUSH
13229: LD_VAR 0 16
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 2
13240: PUSH
13241: LD_INT 30
13243: PUSH
13244: LD_INT 2
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: LD_INT 30
13253: PUSH
13254: LD_INT 3
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PPUSH
13270: CALL_OW 72
13274: ST_TO_ADDR
13275: GO 13359
13277: LD_INT 4
13279: DOUBLE
13280: EQUAL
13281: IFTRUE 13285
13283: GO 13358
13285: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13286: LD_ADDR_VAR 0 12
13290: PUSH
13291: LD_VAR 0 18
13295: PPUSH
13296: LD_INT 22
13298: PUSH
13299: LD_VAR 0 16
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 2
13310: PUSH
13311: LD_INT 30
13313: PUSH
13314: LD_INT 6
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: LD_INT 30
13323: PUSH
13324: LD_INT 7
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 30
13333: PUSH
13334: LD_INT 8
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PPUSH
13351: CALL_OW 72
13355: ST_TO_ADDR
13356: GO 13359
13358: POP
// if i = 1 then
13359: LD_VAR 0 8
13363: PUSH
13364: LD_INT 1
13366: EQUAL
13367: IFFALSE 13478
// begin tmp := [ ] ;
13369: LD_ADDR_VAR 0 19
13373: PUSH
13374: EMPTY
13375: ST_TO_ADDR
// for j in f do
13376: LD_ADDR_VAR 0 9
13380: PUSH
13381: LD_VAR 0 12
13385: PUSH
13386: FOR_IN
13387: IFFALSE 13460
// if GetBType ( j ) = b_bunker then
13389: LD_VAR 0 9
13393: PPUSH
13394: CALL_OW 266
13398: PUSH
13399: LD_INT 32
13401: EQUAL
13402: IFFALSE 13429
// tmp := Insert ( tmp , 1 , j ) else
13404: LD_ADDR_VAR 0 19
13408: PUSH
13409: LD_VAR 0 19
13413: PPUSH
13414: LD_INT 1
13416: PPUSH
13417: LD_VAR 0 9
13421: PPUSH
13422: CALL_OW 2
13426: ST_TO_ADDR
13427: GO 13458
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13429: LD_ADDR_VAR 0 19
13433: PUSH
13434: LD_VAR 0 19
13438: PPUSH
13439: LD_VAR 0 19
13443: PUSH
13444: LD_INT 1
13446: PLUS
13447: PPUSH
13448: LD_VAR 0 9
13452: PPUSH
13453: CALL_OW 2
13457: ST_TO_ADDR
13458: GO 13386
13460: POP
13461: POP
// if tmp then
13462: LD_VAR 0 19
13466: IFFALSE 13478
// f := tmp ;
13468: LD_ADDR_VAR 0 12
13472: PUSH
13473: LD_VAR 0 19
13477: ST_TO_ADDR
// end ; x := personel [ i ] ;
13478: LD_ADDR_VAR 0 13
13482: PUSH
13483: LD_VAR 0 6
13487: PUSH
13488: LD_VAR 0 8
13492: ARRAY
13493: ST_TO_ADDR
// if x = - 1 then
13494: LD_VAR 0 13
13498: PUSH
13499: LD_INT 1
13501: NEG
13502: EQUAL
13503: IFFALSE 13712
// begin for j in f do
13505: LD_ADDR_VAR 0 9
13509: PUSH
13510: LD_VAR 0 12
13514: PUSH
13515: FOR_IN
13516: IFFALSE 13708
// repeat InitHc ;
13518: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13522: LD_VAR 0 9
13526: PPUSH
13527: CALL_OW 266
13531: PUSH
13532: LD_INT 5
13534: EQUAL
13535: IFFALSE 13605
// begin if UnitsInside ( j ) < 3 then
13537: LD_VAR 0 9
13541: PPUSH
13542: CALL_OW 313
13546: PUSH
13547: LD_INT 3
13549: LESS
13550: IFFALSE 13586
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13552: LD_INT 0
13554: PPUSH
13555: LD_INT 5
13557: PUSH
13558: LD_INT 8
13560: PUSH
13561: LD_INT 9
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: LIST
13568: PUSH
13569: LD_VAR 0 17
13573: ARRAY
13574: PPUSH
13575: LD_VAR 0 4
13579: PPUSH
13580: CALL_OW 380
13584: GO 13603
// PrepareHuman ( false , i , skill ) ;
13586: LD_INT 0
13588: PPUSH
13589: LD_VAR 0 8
13593: PPUSH
13594: LD_VAR 0 4
13598: PPUSH
13599: CALL_OW 380
// end else
13603: GO 13622
// PrepareHuman ( false , i , skill ) ;
13605: LD_INT 0
13607: PPUSH
13608: LD_VAR 0 8
13612: PPUSH
13613: LD_VAR 0 4
13617: PPUSH
13618: CALL_OW 380
// un := CreateHuman ;
13622: LD_ADDR_VAR 0 14
13626: PUSH
13627: CALL_OW 44
13631: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13632: LD_ADDR_VAR 0 7
13636: PUSH
13637: LD_VAR 0 7
13641: PPUSH
13642: LD_INT 1
13644: PPUSH
13645: LD_VAR 0 14
13649: PPUSH
13650: CALL_OW 2
13654: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13655: LD_VAR 0 14
13659: PPUSH
13660: LD_VAR 0 9
13664: PPUSH
13665: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13669: LD_VAR 0 9
13673: PPUSH
13674: CALL_OW 313
13678: PUSH
13679: LD_INT 6
13681: EQUAL
13682: PUSH
13683: LD_VAR 0 9
13687: PPUSH
13688: CALL_OW 266
13692: PUSH
13693: LD_INT 32
13695: PUSH
13696: LD_INT 31
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: IN
13703: OR
13704: IFFALSE 13518
13706: GO 13515
13708: POP
13709: POP
// end else
13710: GO 14092
// for j = 1 to x do
13712: LD_ADDR_VAR 0 9
13716: PUSH
13717: DOUBLE
13718: LD_INT 1
13720: DEC
13721: ST_TO_ADDR
13722: LD_VAR 0 13
13726: PUSH
13727: FOR_TO
13728: IFFALSE 14090
// begin InitHc ;
13730: CALL_OW 19
// if not f then
13734: LD_VAR 0 12
13738: NOT
13739: IFFALSE 13828
// begin PrepareHuman ( false , i , skill ) ;
13741: LD_INT 0
13743: PPUSH
13744: LD_VAR 0 8
13748: PPUSH
13749: LD_VAR 0 4
13753: PPUSH
13754: CALL_OW 380
// un := CreateHuman ;
13758: LD_ADDR_VAR 0 14
13762: PUSH
13763: CALL_OW 44
13767: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13768: LD_ADDR_VAR 0 7
13772: PUSH
13773: LD_VAR 0 7
13777: PPUSH
13778: LD_INT 1
13780: PPUSH
13781: LD_VAR 0 14
13785: PPUSH
13786: CALL_OW 2
13790: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13791: LD_VAR 0 14
13795: PPUSH
13796: LD_VAR 0 1
13800: PPUSH
13801: CALL_OW 250
13805: PPUSH
13806: LD_VAR 0 1
13810: PPUSH
13811: CALL_OW 251
13815: PPUSH
13816: LD_INT 10
13818: PPUSH
13819: LD_INT 0
13821: PPUSH
13822: CALL_OW 50
// continue ;
13826: GO 13727
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13828: LD_VAR 0 12
13832: PUSH
13833: LD_INT 1
13835: ARRAY
13836: PPUSH
13837: CALL_OW 313
13841: PUSH
13842: LD_VAR 0 12
13846: PUSH
13847: LD_INT 1
13849: ARRAY
13850: PPUSH
13851: CALL_OW 266
13855: PUSH
13856: LD_INT 32
13858: PUSH
13859: LD_INT 31
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: IN
13866: AND
13867: PUSH
13868: LD_VAR 0 12
13872: PUSH
13873: LD_INT 1
13875: ARRAY
13876: PPUSH
13877: CALL_OW 313
13881: PUSH
13882: LD_INT 6
13884: EQUAL
13885: OR
13886: IFFALSE 13906
// f := Delete ( f , 1 ) ;
13888: LD_ADDR_VAR 0 12
13892: PUSH
13893: LD_VAR 0 12
13897: PPUSH
13898: LD_INT 1
13900: PPUSH
13901: CALL_OW 3
13905: ST_TO_ADDR
// if not f then
13906: LD_VAR 0 12
13910: NOT
13911: IFFALSE 13929
// begin x := x + 2 ;
13913: LD_ADDR_VAR 0 13
13917: PUSH
13918: LD_VAR 0 13
13922: PUSH
13923: LD_INT 2
13925: PLUS
13926: ST_TO_ADDR
// continue ;
13927: GO 13727
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13929: LD_VAR 0 12
13933: PUSH
13934: LD_INT 1
13936: ARRAY
13937: PPUSH
13938: CALL_OW 266
13942: PUSH
13943: LD_INT 5
13945: EQUAL
13946: IFFALSE 14020
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13948: LD_VAR 0 12
13952: PUSH
13953: LD_INT 1
13955: ARRAY
13956: PPUSH
13957: CALL_OW 313
13961: PUSH
13962: LD_INT 3
13964: LESS
13965: IFFALSE 14001
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13967: LD_INT 0
13969: PPUSH
13970: LD_INT 5
13972: PUSH
13973: LD_INT 8
13975: PUSH
13976: LD_INT 9
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: PUSH
13984: LD_VAR 0 17
13988: ARRAY
13989: PPUSH
13990: LD_VAR 0 4
13994: PPUSH
13995: CALL_OW 380
13999: GO 14018
// PrepareHuman ( false , i , skill ) ;
14001: LD_INT 0
14003: PPUSH
14004: LD_VAR 0 8
14008: PPUSH
14009: LD_VAR 0 4
14013: PPUSH
14014: CALL_OW 380
// end else
14018: GO 14037
// PrepareHuman ( false , i , skill ) ;
14020: LD_INT 0
14022: PPUSH
14023: LD_VAR 0 8
14027: PPUSH
14028: LD_VAR 0 4
14032: PPUSH
14033: CALL_OW 380
// un := CreateHuman ;
14037: LD_ADDR_VAR 0 14
14041: PUSH
14042: CALL_OW 44
14046: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14047: LD_ADDR_VAR 0 7
14051: PUSH
14052: LD_VAR 0 7
14056: PPUSH
14057: LD_INT 1
14059: PPUSH
14060: LD_VAR 0 14
14064: PPUSH
14065: CALL_OW 2
14069: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14070: LD_VAR 0 14
14074: PPUSH
14075: LD_VAR 0 12
14079: PUSH
14080: LD_INT 1
14082: ARRAY
14083: PPUSH
14084: CALL_OW 52
// end ;
14088: GO 13727
14090: POP
14091: POP
// end ;
14092: GO 13029
14094: POP
14095: POP
// result := result ^ buildings ;
14096: LD_ADDR_VAR 0 7
14100: PUSH
14101: LD_VAR 0 7
14105: PUSH
14106: LD_VAR 0 18
14110: ADD
14111: ST_TO_ADDR
// end else
14112: GO 14255
// begin for i = 1 to personel do
14114: LD_ADDR_VAR 0 8
14118: PUSH
14119: DOUBLE
14120: LD_INT 1
14122: DEC
14123: ST_TO_ADDR
14124: LD_VAR 0 6
14128: PUSH
14129: FOR_TO
14130: IFFALSE 14253
// begin if i > 4 then
14132: LD_VAR 0 8
14136: PUSH
14137: LD_INT 4
14139: GREATER
14140: IFFALSE 14144
// break ;
14142: GO 14253
// x := personel [ i ] ;
14144: LD_ADDR_VAR 0 13
14148: PUSH
14149: LD_VAR 0 6
14153: PUSH
14154: LD_VAR 0 8
14158: ARRAY
14159: ST_TO_ADDR
// if x = - 1 then
14160: LD_VAR 0 13
14164: PUSH
14165: LD_INT 1
14167: NEG
14168: EQUAL
14169: IFFALSE 14173
// continue ;
14171: GO 14129
// PrepareHuman ( false , i , skill ) ;
14173: LD_INT 0
14175: PPUSH
14176: LD_VAR 0 8
14180: PPUSH
14181: LD_VAR 0 4
14185: PPUSH
14186: CALL_OW 380
// un := CreateHuman ;
14190: LD_ADDR_VAR 0 14
14194: PUSH
14195: CALL_OW 44
14199: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14200: LD_VAR 0 14
14204: PPUSH
14205: LD_VAR 0 1
14209: PPUSH
14210: CALL_OW 250
14214: PPUSH
14215: LD_VAR 0 1
14219: PPUSH
14220: CALL_OW 251
14224: PPUSH
14225: LD_INT 10
14227: PPUSH
14228: LD_INT 0
14230: PPUSH
14231: CALL_OW 50
// result := result ^ un ;
14235: LD_ADDR_VAR 0 7
14239: PUSH
14240: LD_VAR 0 7
14244: PUSH
14245: LD_VAR 0 14
14249: ADD
14250: ST_TO_ADDR
// end ;
14251: GO 14129
14253: POP
14254: POP
// end ; end ;
14255: LD_VAR 0 7
14259: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14260: LD_INT 0
14262: PPUSH
14263: PPUSH
14264: PPUSH
14265: PPUSH
14266: PPUSH
14267: PPUSH
14268: PPUSH
14269: PPUSH
14270: PPUSH
14271: PPUSH
14272: PPUSH
14273: PPUSH
14274: PPUSH
14275: PPUSH
14276: PPUSH
14277: PPUSH
// result := false ;
14278: LD_ADDR_VAR 0 3
14282: PUSH
14283: LD_INT 0
14285: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14286: LD_VAR 0 1
14290: NOT
14291: PUSH
14292: LD_VAR 0 1
14296: PPUSH
14297: CALL_OW 266
14301: PUSH
14302: LD_INT 32
14304: PUSH
14305: LD_INT 33
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: IN
14312: NOT
14313: OR
14314: IFFALSE 14318
// exit ;
14316: GO 15427
// nat := GetNation ( tower ) ;
14318: LD_ADDR_VAR 0 12
14322: PUSH
14323: LD_VAR 0 1
14327: PPUSH
14328: CALL_OW 248
14332: ST_TO_ADDR
// side := GetSide ( tower ) ;
14333: LD_ADDR_VAR 0 16
14337: PUSH
14338: LD_VAR 0 1
14342: PPUSH
14343: CALL_OW 255
14347: ST_TO_ADDR
// x := GetX ( tower ) ;
14348: LD_ADDR_VAR 0 10
14352: PUSH
14353: LD_VAR 0 1
14357: PPUSH
14358: CALL_OW 250
14362: ST_TO_ADDR
// y := GetY ( tower ) ;
14363: LD_ADDR_VAR 0 11
14367: PUSH
14368: LD_VAR 0 1
14372: PPUSH
14373: CALL_OW 251
14377: ST_TO_ADDR
// if not x or not y then
14378: LD_VAR 0 10
14382: NOT
14383: PUSH
14384: LD_VAR 0 11
14388: NOT
14389: OR
14390: IFFALSE 14394
// exit ;
14392: GO 15427
// weapon := 0 ;
14394: LD_ADDR_VAR 0 18
14398: PUSH
14399: LD_INT 0
14401: ST_TO_ADDR
// fac_list := [ ] ;
14402: LD_ADDR_VAR 0 17
14406: PUSH
14407: EMPTY
14408: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14409: LD_ADDR_VAR 0 6
14413: PUSH
14414: LD_VAR 0 1
14418: PPUSH
14419: CALL_OW 274
14423: PPUSH
14424: LD_VAR 0 2
14428: PPUSH
14429: LD_INT 0
14431: PPUSH
14432: CALL 11998 0 3
14436: PPUSH
14437: LD_INT 30
14439: PUSH
14440: LD_INT 3
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PPUSH
14447: CALL_OW 72
14451: ST_TO_ADDR
// if not factories then
14452: LD_VAR 0 6
14456: NOT
14457: IFFALSE 14461
// exit ;
14459: GO 15427
// for i in factories do
14461: LD_ADDR_VAR 0 8
14465: PUSH
14466: LD_VAR 0 6
14470: PUSH
14471: FOR_IN
14472: IFFALSE 14497
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14474: LD_ADDR_VAR 0 17
14478: PUSH
14479: LD_VAR 0 17
14483: PUSH
14484: LD_VAR 0 8
14488: PPUSH
14489: CALL_OW 478
14493: UNION
14494: ST_TO_ADDR
14495: GO 14471
14497: POP
14498: POP
// if not fac_list then
14499: LD_VAR 0 17
14503: NOT
14504: IFFALSE 14508
// exit ;
14506: GO 15427
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14508: LD_ADDR_VAR 0 5
14512: PUSH
14513: LD_INT 4
14515: PUSH
14516: LD_INT 5
14518: PUSH
14519: LD_INT 9
14521: PUSH
14522: LD_INT 10
14524: PUSH
14525: LD_INT 6
14527: PUSH
14528: LD_INT 7
14530: PUSH
14531: LD_INT 11
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: PUSH
14543: LD_INT 27
14545: PUSH
14546: LD_INT 28
14548: PUSH
14549: LD_INT 26
14551: PUSH
14552: LD_INT 30
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 43
14563: PUSH
14564: LD_INT 44
14566: PUSH
14567: LD_INT 46
14569: PUSH
14570: LD_INT 45
14572: PUSH
14573: LD_INT 47
14575: PUSH
14576: LD_INT 49
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: PUSH
14587: EMPTY
14588: LIST
14589: LIST
14590: LIST
14591: PUSH
14592: LD_VAR 0 12
14596: ARRAY
14597: ST_TO_ADDR
// list := list isect fac_list ;
14598: LD_ADDR_VAR 0 5
14602: PUSH
14603: LD_VAR 0 5
14607: PUSH
14608: LD_VAR 0 17
14612: ISECT
14613: ST_TO_ADDR
// if not list then
14614: LD_VAR 0 5
14618: NOT
14619: IFFALSE 14623
// exit ;
14621: GO 15427
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14623: LD_VAR 0 12
14627: PUSH
14628: LD_INT 3
14630: EQUAL
14631: PUSH
14632: LD_INT 49
14634: PUSH
14635: LD_VAR 0 5
14639: IN
14640: AND
14641: PUSH
14642: LD_INT 31
14644: PPUSH
14645: LD_VAR 0 16
14649: PPUSH
14650: CALL_OW 321
14654: PUSH
14655: LD_INT 2
14657: EQUAL
14658: AND
14659: IFFALSE 14719
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14661: LD_INT 22
14663: PUSH
14664: LD_VAR 0 16
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 35
14675: PUSH
14676: LD_INT 49
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 91
14685: PUSH
14686: LD_VAR 0 1
14690: PUSH
14691: LD_INT 10
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: LIST
14703: PPUSH
14704: CALL_OW 69
14708: NOT
14709: IFFALSE 14719
// weapon := ru_time_lapser ;
14711: LD_ADDR_VAR 0 18
14715: PUSH
14716: LD_INT 49
14718: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14719: LD_VAR 0 12
14723: PUSH
14724: LD_INT 1
14726: PUSH
14727: LD_INT 2
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: IN
14734: PUSH
14735: LD_INT 11
14737: PUSH
14738: LD_VAR 0 5
14742: IN
14743: PUSH
14744: LD_INT 30
14746: PUSH
14747: LD_VAR 0 5
14751: IN
14752: OR
14753: AND
14754: PUSH
14755: LD_INT 6
14757: PPUSH
14758: LD_VAR 0 16
14762: PPUSH
14763: CALL_OW 321
14767: PUSH
14768: LD_INT 2
14770: EQUAL
14771: AND
14772: IFFALSE 14937
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14774: LD_INT 22
14776: PUSH
14777: LD_VAR 0 16
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 2
14788: PUSH
14789: LD_INT 35
14791: PUSH
14792: LD_INT 11
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 35
14801: PUSH
14802: LD_INT 30
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 91
14816: PUSH
14817: LD_VAR 0 1
14821: PUSH
14822: LD_INT 18
14824: PUSH
14825: EMPTY
14826: LIST
14827: LIST
14828: LIST
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: LIST
14834: PPUSH
14835: CALL_OW 69
14839: NOT
14840: PUSH
14841: LD_INT 22
14843: PUSH
14844: LD_VAR 0 16
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 2
14855: PUSH
14856: LD_INT 30
14858: PUSH
14859: LD_INT 32
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 30
14868: PUSH
14869: LD_INT 33
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 91
14883: PUSH
14884: LD_VAR 0 1
14888: PUSH
14889: LD_INT 12
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: LIST
14901: PUSH
14902: EMPTY
14903: LIST
14904: PPUSH
14905: CALL_OW 69
14909: PUSH
14910: LD_INT 2
14912: GREATER
14913: AND
14914: IFFALSE 14937
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14916: LD_ADDR_VAR 0 18
14920: PUSH
14921: LD_INT 11
14923: PUSH
14924: LD_INT 30
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_VAR 0 12
14935: ARRAY
14936: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14937: LD_VAR 0 18
14941: NOT
14942: PUSH
14943: LD_INT 40
14945: PPUSH
14946: LD_VAR 0 16
14950: PPUSH
14951: CALL_OW 321
14955: PUSH
14956: LD_INT 2
14958: EQUAL
14959: AND
14960: PUSH
14961: LD_INT 7
14963: PUSH
14964: LD_VAR 0 5
14968: IN
14969: PUSH
14970: LD_INT 28
14972: PUSH
14973: LD_VAR 0 5
14977: IN
14978: OR
14979: PUSH
14980: LD_INT 45
14982: PUSH
14983: LD_VAR 0 5
14987: IN
14988: OR
14989: AND
14990: IFFALSE 15244
// begin hex := GetHexInfo ( x , y ) ;
14992: LD_ADDR_VAR 0 4
14996: PUSH
14997: LD_VAR 0 10
15001: PPUSH
15002: LD_VAR 0 11
15006: PPUSH
15007: CALL_OW 546
15011: ST_TO_ADDR
// if hex [ 1 ] then
15012: LD_VAR 0 4
15016: PUSH
15017: LD_INT 1
15019: ARRAY
15020: IFFALSE 15024
// exit ;
15022: GO 15427
// height := hex [ 2 ] ;
15024: LD_ADDR_VAR 0 15
15028: PUSH
15029: LD_VAR 0 4
15033: PUSH
15034: LD_INT 2
15036: ARRAY
15037: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15038: LD_ADDR_VAR 0 14
15042: PUSH
15043: LD_INT 0
15045: PUSH
15046: LD_INT 2
15048: PUSH
15049: LD_INT 3
15051: PUSH
15052: LD_INT 5
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: ST_TO_ADDR
// for i in tmp do
15061: LD_ADDR_VAR 0 8
15065: PUSH
15066: LD_VAR 0 14
15070: PUSH
15071: FOR_IN
15072: IFFALSE 15242
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15074: LD_ADDR_VAR 0 9
15078: PUSH
15079: LD_VAR 0 10
15083: PPUSH
15084: LD_VAR 0 8
15088: PPUSH
15089: LD_INT 5
15091: PPUSH
15092: CALL_OW 272
15096: PUSH
15097: LD_VAR 0 11
15101: PPUSH
15102: LD_VAR 0 8
15106: PPUSH
15107: LD_INT 5
15109: PPUSH
15110: CALL_OW 273
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15119: LD_VAR 0 9
15123: PUSH
15124: LD_INT 1
15126: ARRAY
15127: PPUSH
15128: LD_VAR 0 9
15132: PUSH
15133: LD_INT 2
15135: ARRAY
15136: PPUSH
15137: CALL_OW 488
15141: IFFALSE 15240
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15143: LD_ADDR_VAR 0 4
15147: PUSH
15148: LD_VAR 0 9
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: PPUSH
15157: LD_VAR 0 9
15161: PUSH
15162: LD_INT 2
15164: ARRAY
15165: PPUSH
15166: CALL_OW 546
15170: ST_TO_ADDR
// if hex [ 1 ] then
15171: LD_VAR 0 4
15175: PUSH
15176: LD_INT 1
15178: ARRAY
15179: IFFALSE 15183
// continue ;
15181: GO 15071
// h := hex [ 2 ] ;
15183: LD_ADDR_VAR 0 13
15187: PUSH
15188: LD_VAR 0 4
15192: PUSH
15193: LD_INT 2
15195: ARRAY
15196: ST_TO_ADDR
// if h + 7 < height then
15197: LD_VAR 0 13
15201: PUSH
15202: LD_INT 7
15204: PLUS
15205: PUSH
15206: LD_VAR 0 15
15210: LESS
15211: IFFALSE 15240
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15213: LD_ADDR_VAR 0 18
15217: PUSH
15218: LD_INT 7
15220: PUSH
15221: LD_INT 28
15223: PUSH
15224: LD_INT 45
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: LIST
15231: PUSH
15232: LD_VAR 0 12
15236: ARRAY
15237: ST_TO_ADDR
// break ;
15238: GO 15242
// end ; end ; end ;
15240: GO 15071
15242: POP
15243: POP
// end ; if not weapon then
15244: LD_VAR 0 18
15248: NOT
15249: IFFALSE 15309
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15251: LD_ADDR_VAR 0 5
15255: PUSH
15256: LD_VAR 0 5
15260: PUSH
15261: LD_INT 11
15263: PUSH
15264: LD_INT 30
15266: PUSH
15267: LD_INT 49
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: LIST
15274: DIFF
15275: ST_TO_ADDR
// if not list then
15276: LD_VAR 0 5
15280: NOT
15281: IFFALSE 15285
// exit ;
15283: GO 15427
// weapon := list [ rand ( 1 , list ) ] ;
15285: LD_ADDR_VAR 0 18
15289: PUSH
15290: LD_VAR 0 5
15294: PUSH
15295: LD_INT 1
15297: PPUSH
15298: LD_VAR 0 5
15302: PPUSH
15303: CALL_OW 12
15307: ARRAY
15308: ST_TO_ADDR
// end ; if weapon then
15309: LD_VAR 0 18
15313: IFFALSE 15427
// begin tmp := CostOfWeapon ( weapon ) ;
15315: LD_ADDR_VAR 0 14
15319: PUSH
15320: LD_VAR 0 18
15324: PPUSH
15325: CALL_OW 451
15329: ST_TO_ADDR
// j := GetBase ( tower ) ;
15330: LD_ADDR_VAR 0 9
15334: PUSH
15335: LD_VAR 0 1
15339: PPUSH
15340: CALL_OW 274
15344: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15345: LD_VAR 0 9
15349: PPUSH
15350: LD_INT 1
15352: PPUSH
15353: CALL_OW 275
15357: PUSH
15358: LD_VAR 0 14
15362: PUSH
15363: LD_INT 1
15365: ARRAY
15366: GREATEREQUAL
15367: PUSH
15368: LD_VAR 0 9
15372: PPUSH
15373: LD_INT 2
15375: PPUSH
15376: CALL_OW 275
15380: PUSH
15381: LD_VAR 0 14
15385: PUSH
15386: LD_INT 2
15388: ARRAY
15389: GREATEREQUAL
15390: AND
15391: PUSH
15392: LD_VAR 0 9
15396: PPUSH
15397: LD_INT 3
15399: PPUSH
15400: CALL_OW 275
15404: PUSH
15405: LD_VAR 0 14
15409: PUSH
15410: LD_INT 3
15412: ARRAY
15413: GREATEREQUAL
15414: AND
15415: IFFALSE 15427
// result := weapon ;
15417: LD_ADDR_VAR 0 3
15421: PUSH
15422: LD_VAR 0 18
15426: ST_TO_ADDR
// end ; end ;
15427: LD_VAR 0 3
15431: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
// result := true ;
15436: LD_ADDR_VAR 0 3
15440: PUSH
15441: LD_INT 1
15443: ST_TO_ADDR
// if array1 = array2 then
15444: LD_VAR 0 1
15448: PUSH
15449: LD_VAR 0 2
15453: EQUAL
15454: IFFALSE 15514
// begin for i = 1 to array1 do
15456: LD_ADDR_VAR 0 4
15460: PUSH
15461: DOUBLE
15462: LD_INT 1
15464: DEC
15465: ST_TO_ADDR
15466: LD_VAR 0 1
15470: PUSH
15471: FOR_TO
15472: IFFALSE 15510
// if array1 [ i ] <> array2 [ i ] then
15474: LD_VAR 0 1
15478: PUSH
15479: LD_VAR 0 4
15483: ARRAY
15484: PUSH
15485: LD_VAR 0 2
15489: PUSH
15490: LD_VAR 0 4
15494: ARRAY
15495: NONEQUAL
15496: IFFALSE 15508
// begin result := false ;
15498: LD_ADDR_VAR 0 3
15502: PUSH
15503: LD_INT 0
15505: ST_TO_ADDR
// break ;
15506: GO 15510
// end ;
15508: GO 15471
15510: POP
15511: POP
// end else
15512: GO 15522
// result := false ;
15514: LD_ADDR_VAR 0 3
15518: PUSH
15519: LD_INT 0
15521: ST_TO_ADDR
// end ;
15522: LD_VAR 0 3
15526: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15527: LD_INT 0
15529: PPUSH
15530: PPUSH
// if not array1 or not array2 then
15531: LD_VAR 0 1
15535: NOT
15536: PUSH
15537: LD_VAR 0 2
15541: NOT
15542: OR
15543: IFFALSE 15547
// exit ;
15545: GO 15611
// result := true ;
15547: LD_ADDR_VAR 0 3
15551: PUSH
15552: LD_INT 1
15554: ST_TO_ADDR
// for i = 1 to array1 do
15555: LD_ADDR_VAR 0 4
15559: PUSH
15560: DOUBLE
15561: LD_INT 1
15563: DEC
15564: ST_TO_ADDR
15565: LD_VAR 0 1
15569: PUSH
15570: FOR_TO
15571: IFFALSE 15609
// if array1 [ i ] <> array2 [ i ] then
15573: LD_VAR 0 1
15577: PUSH
15578: LD_VAR 0 4
15582: ARRAY
15583: PUSH
15584: LD_VAR 0 2
15588: PUSH
15589: LD_VAR 0 4
15593: ARRAY
15594: NONEQUAL
15595: IFFALSE 15607
// begin result := false ;
15597: LD_ADDR_VAR 0 3
15601: PUSH
15602: LD_INT 0
15604: ST_TO_ADDR
// break ;
15605: GO 15609
// end ;
15607: GO 15570
15609: POP
15610: POP
// end ;
15611: LD_VAR 0 3
15615: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15616: LD_INT 0
15618: PPUSH
15619: PPUSH
15620: PPUSH
// pom := GetBase ( fac ) ;
15621: LD_ADDR_VAR 0 5
15625: PUSH
15626: LD_VAR 0 1
15630: PPUSH
15631: CALL_OW 274
15635: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15636: LD_ADDR_VAR 0 4
15640: PUSH
15641: LD_VAR 0 2
15645: PUSH
15646: LD_INT 1
15648: ARRAY
15649: PPUSH
15650: LD_VAR 0 2
15654: PUSH
15655: LD_INT 2
15657: ARRAY
15658: PPUSH
15659: LD_VAR 0 2
15663: PUSH
15664: LD_INT 3
15666: ARRAY
15667: PPUSH
15668: LD_VAR 0 2
15672: PUSH
15673: LD_INT 4
15675: ARRAY
15676: PPUSH
15677: CALL_OW 449
15681: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15682: LD_ADDR_VAR 0 3
15686: PUSH
15687: LD_VAR 0 5
15691: PPUSH
15692: LD_INT 1
15694: PPUSH
15695: CALL_OW 275
15699: PUSH
15700: LD_VAR 0 4
15704: PUSH
15705: LD_INT 1
15707: ARRAY
15708: GREATEREQUAL
15709: PUSH
15710: LD_VAR 0 5
15714: PPUSH
15715: LD_INT 2
15717: PPUSH
15718: CALL_OW 275
15722: PUSH
15723: LD_VAR 0 4
15727: PUSH
15728: LD_INT 2
15730: ARRAY
15731: GREATEREQUAL
15732: AND
15733: PUSH
15734: LD_VAR 0 5
15738: PPUSH
15739: LD_INT 3
15741: PPUSH
15742: CALL_OW 275
15746: PUSH
15747: LD_VAR 0 4
15751: PUSH
15752: LD_INT 3
15754: ARRAY
15755: GREATEREQUAL
15756: AND
15757: ST_TO_ADDR
// end ;
15758: LD_VAR 0 3
15762: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15763: LD_INT 0
15765: PPUSH
15766: PPUSH
15767: PPUSH
15768: PPUSH
// pom := GetBase ( building ) ;
15769: LD_ADDR_VAR 0 3
15773: PUSH
15774: LD_VAR 0 1
15778: PPUSH
15779: CALL_OW 274
15783: ST_TO_ADDR
// if not pom then
15784: LD_VAR 0 3
15788: NOT
15789: IFFALSE 15793
// exit ;
15791: GO 15963
// btype := GetBType ( building ) ;
15793: LD_ADDR_VAR 0 5
15797: PUSH
15798: LD_VAR 0 1
15802: PPUSH
15803: CALL_OW 266
15807: ST_TO_ADDR
// if btype = b_armoury then
15808: LD_VAR 0 5
15812: PUSH
15813: LD_INT 4
15815: EQUAL
15816: IFFALSE 15826
// btype := b_barracks ;
15818: LD_ADDR_VAR 0 5
15822: PUSH
15823: LD_INT 5
15825: ST_TO_ADDR
// if btype = b_depot then
15826: LD_VAR 0 5
15830: PUSH
15831: LD_INT 0
15833: EQUAL
15834: IFFALSE 15844
// btype := b_warehouse ;
15836: LD_ADDR_VAR 0 5
15840: PUSH
15841: LD_INT 1
15843: ST_TO_ADDR
// if btype = b_workshop then
15844: LD_VAR 0 5
15848: PUSH
15849: LD_INT 2
15851: EQUAL
15852: IFFALSE 15862
// btype := b_factory ;
15854: LD_ADDR_VAR 0 5
15858: PUSH
15859: LD_INT 3
15861: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15862: LD_ADDR_VAR 0 4
15866: PUSH
15867: LD_VAR 0 5
15871: PPUSH
15872: LD_VAR 0 1
15876: PPUSH
15877: CALL_OW 248
15881: PPUSH
15882: CALL_OW 450
15886: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15887: LD_ADDR_VAR 0 2
15891: PUSH
15892: LD_VAR 0 3
15896: PPUSH
15897: LD_INT 1
15899: PPUSH
15900: CALL_OW 275
15904: PUSH
15905: LD_VAR 0 4
15909: PUSH
15910: LD_INT 1
15912: ARRAY
15913: GREATEREQUAL
15914: PUSH
15915: LD_VAR 0 3
15919: PPUSH
15920: LD_INT 2
15922: PPUSH
15923: CALL_OW 275
15927: PUSH
15928: LD_VAR 0 4
15932: PUSH
15933: LD_INT 2
15935: ARRAY
15936: GREATEREQUAL
15937: AND
15938: PUSH
15939: LD_VAR 0 3
15943: PPUSH
15944: LD_INT 3
15946: PPUSH
15947: CALL_OW 275
15951: PUSH
15952: LD_VAR 0 4
15956: PUSH
15957: LD_INT 3
15959: ARRAY
15960: GREATEREQUAL
15961: AND
15962: ST_TO_ADDR
// end ;
15963: LD_VAR 0 2
15967: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15968: LD_INT 0
15970: PPUSH
15971: PPUSH
15972: PPUSH
// pom := GetBase ( building ) ;
15973: LD_ADDR_VAR 0 4
15977: PUSH
15978: LD_VAR 0 1
15982: PPUSH
15983: CALL_OW 274
15987: ST_TO_ADDR
// if not pom then
15988: LD_VAR 0 4
15992: NOT
15993: IFFALSE 15997
// exit ;
15995: GO 16098
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15997: LD_ADDR_VAR 0 5
16001: PUSH
16002: LD_VAR 0 2
16006: PPUSH
16007: LD_VAR 0 1
16011: PPUSH
16012: CALL_OW 248
16016: PPUSH
16017: CALL_OW 450
16021: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16022: LD_ADDR_VAR 0 3
16026: PUSH
16027: LD_VAR 0 4
16031: PPUSH
16032: LD_INT 1
16034: PPUSH
16035: CALL_OW 275
16039: PUSH
16040: LD_VAR 0 5
16044: PUSH
16045: LD_INT 1
16047: ARRAY
16048: GREATEREQUAL
16049: PUSH
16050: LD_VAR 0 4
16054: PPUSH
16055: LD_INT 2
16057: PPUSH
16058: CALL_OW 275
16062: PUSH
16063: LD_VAR 0 5
16067: PUSH
16068: LD_INT 2
16070: ARRAY
16071: GREATEREQUAL
16072: AND
16073: PUSH
16074: LD_VAR 0 4
16078: PPUSH
16079: LD_INT 3
16081: PPUSH
16082: CALL_OW 275
16086: PUSH
16087: LD_VAR 0 5
16091: PUSH
16092: LD_INT 3
16094: ARRAY
16095: GREATEREQUAL
16096: AND
16097: ST_TO_ADDR
// end ;
16098: LD_VAR 0 3
16102: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16103: LD_INT 0
16105: PPUSH
16106: PPUSH
16107: PPUSH
16108: PPUSH
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
// result := false ;
16116: LD_ADDR_VAR 0 8
16120: PUSH
16121: LD_INT 0
16123: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16124: LD_VAR 0 5
16128: NOT
16129: PUSH
16130: LD_VAR 0 1
16134: NOT
16135: OR
16136: PUSH
16137: LD_VAR 0 2
16141: NOT
16142: OR
16143: PUSH
16144: LD_VAR 0 3
16148: NOT
16149: OR
16150: IFFALSE 16154
// exit ;
16152: GO 16968
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16154: LD_ADDR_VAR 0 14
16158: PUSH
16159: LD_VAR 0 1
16163: PPUSH
16164: LD_VAR 0 2
16168: PPUSH
16169: LD_VAR 0 3
16173: PPUSH
16174: LD_VAR 0 4
16178: PPUSH
16179: LD_VAR 0 5
16183: PUSH
16184: LD_INT 1
16186: ARRAY
16187: PPUSH
16188: CALL_OW 248
16192: PPUSH
16193: LD_INT 0
16195: PPUSH
16196: CALL 18205 0 6
16200: ST_TO_ADDR
// if not hexes then
16201: LD_VAR 0 14
16205: NOT
16206: IFFALSE 16210
// exit ;
16208: GO 16968
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16210: LD_ADDR_VAR 0 17
16214: PUSH
16215: LD_VAR 0 5
16219: PPUSH
16220: LD_INT 22
16222: PUSH
16223: LD_VAR 0 13
16227: PPUSH
16228: CALL_OW 255
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 2
16239: PUSH
16240: LD_INT 30
16242: PUSH
16243: LD_INT 0
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 30
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: LIST
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 72
16273: ST_TO_ADDR
// for i = 1 to hexes do
16274: LD_ADDR_VAR 0 9
16278: PUSH
16279: DOUBLE
16280: LD_INT 1
16282: DEC
16283: ST_TO_ADDR
16284: LD_VAR 0 14
16288: PUSH
16289: FOR_TO
16290: IFFALSE 16966
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16292: LD_ADDR_VAR 0 13
16296: PUSH
16297: LD_VAR 0 14
16301: PUSH
16302: LD_VAR 0 9
16306: ARRAY
16307: PUSH
16308: LD_INT 1
16310: ARRAY
16311: PPUSH
16312: LD_VAR 0 14
16316: PUSH
16317: LD_VAR 0 9
16321: ARRAY
16322: PUSH
16323: LD_INT 2
16325: ARRAY
16326: PPUSH
16327: CALL_OW 428
16331: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16332: LD_VAR 0 14
16336: PUSH
16337: LD_VAR 0 9
16341: ARRAY
16342: PUSH
16343: LD_INT 1
16345: ARRAY
16346: PPUSH
16347: LD_VAR 0 14
16351: PUSH
16352: LD_VAR 0 9
16356: ARRAY
16357: PUSH
16358: LD_INT 2
16360: ARRAY
16361: PPUSH
16362: CALL_OW 351
16366: PUSH
16367: LD_VAR 0 14
16371: PUSH
16372: LD_VAR 0 9
16376: ARRAY
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_VAR 0 14
16386: PUSH
16387: LD_VAR 0 9
16391: ARRAY
16392: PUSH
16393: LD_INT 2
16395: ARRAY
16396: PPUSH
16397: CALL_OW 488
16401: NOT
16402: OR
16403: PUSH
16404: LD_VAR 0 13
16408: PPUSH
16409: CALL_OW 247
16413: PUSH
16414: LD_INT 3
16416: EQUAL
16417: OR
16418: IFFALSE 16424
// exit ;
16420: POP
16421: POP
16422: GO 16968
// if not tmp then
16424: LD_VAR 0 13
16428: NOT
16429: IFFALSE 16433
// continue ;
16431: GO 16289
// result := true ;
16433: LD_ADDR_VAR 0 8
16437: PUSH
16438: LD_INT 1
16440: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16441: LD_VAR 0 6
16445: PUSH
16446: LD_VAR 0 13
16450: PPUSH
16451: CALL_OW 247
16455: PUSH
16456: LD_INT 2
16458: EQUAL
16459: AND
16460: PUSH
16461: LD_VAR 0 13
16465: PPUSH
16466: CALL_OW 263
16470: PUSH
16471: LD_INT 1
16473: EQUAL
16474: AND
16475: IFFALSE 16639
// begin if IsDrivenBy ( tmp ) then
16477: LD_VAR 0 13
16481: PPUSH
16482: CALL_OW 311
16486: IFFALSE 16490
// continue ;
16488: GO 16289
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16490: LD_VAR 0 6
16494: PPUSH
16495: LD_INT 3
16497: PUSH
16498: LD_INT 60
16500: PUSH
16501: EMPTY
16502: LIST
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 3
16510: PUSH
16511: LD_INT 55
16513: PUSH
16514: EMPTY
16515: LIST
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: PPUSH
16525: CALL_OW 72
16529: IFFALSE 16637
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16531: LD_ADDR_VAR 0 18
16535: PUSH
16536: LD_VAR 0 6
16540: PPUSH
16541: LD_INT 3
16543: PUSH
16544: LD_INT 60
16546: PUSH
16547: EMPTY
16548: LIST
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 3
16556: PUSH
16557: LD_INT 55
16559: PUSH
16560: EMPTY
16561: LIST
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 72
16575: PUSH
16576: LD_INT 1
16578: ARRAY
16579: ST_TO_ADDR
// if IsInUnit ( driver ) then
16580: LD_VAR 0 18
16584: PPUSH
16585: CALL_OW 310
16589: IFFALSE 16600
// ComExit ( driver ) ;
16591: LD_VAR 0 18
16595: PPUSH
16596: CALL 41333 0 1
// AddComEnterUnit ( driver , tmp ) ;
16600: LD_VAR 0 18
16604: PPUSH
16605: LD_VAR 0 13
16609: PPUSH
16610: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16614: LD_VAR 0 18
16618: PPUSH
16619: LD_VAR 0 7
16623: PPUSH
16624: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16628: LD_VAR 0 18
16632: PPUSH
16633: CALL_OW 181
// end ; continue ;
16637: GO 16289
// end ; if not cleaners or not tmp in cleaners then
16639: LD_VAR 0 6
16643: NOT
16644: PUSH
16645: LD_VAR 0 13
16649: PUSH
16650: LD_VAR 0 6
16654: IN
16655: NOT
16656: OR
16657: IFFALSE 16964
// begin if dep then
16659: LD_VAR 0 17
16663: IFFALSE 16799
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16665: LD_ADDR_VAR 0 16
16669: PUSH
16670: LD_VAR 0 17
16674: PUSH
16675: LD_INT 1
16677: ARRAY
16678: PPUSH
16679: CALL_OW 250
16683: PPUSH
16684: LD_VAR 0 17
16688: PUSH
16689: LD_INT 1
16691: ARRAY
16692: PPUSH
16693: CALL_OW 254
16697: PPUSH
16698: LD_INT 5
16700: PPUSH
16701: CALL_OW 272
16705: PUSH
16706: LD_VAR 0 17
16710: PUSH
16711: LD_INT 1
16713: ARRAY
16714: PPUSH
16715: CALL_OW 251
16719: PPUSH
16720: LD_VAR 0 17
16724: PUSH
16725: LD_INT 1
16727: ARRAY
16728: PPUSH
16729: CALL_OW 254
16733: PPUSH
16734: LD_INT 5
16736: PPUSH
16737: CALL_OW 273
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16746: LD_VAR 0 16
16750: PUSH
16751: LD_INT 1
16753: ARRAY
16754: PPUSH
16755: LD_VAR 0 16
16759: PUSH
16760: LD_INT 2
16762: ARRAY
16763: PPUSH
16764: CALL_OW 488
16768: IFFALSE 16799
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16770: LD_VAR 0 13
16774: PPUSH
16775: LD_VAR 0 16
16779: PUSH
16780: LD_INT 1
16782: ARRAY
16783: PPUSH
16784: LD_VAR 0 16
16788: PUSH
16789: LD_INT 2
16791: ARRAY
16792: PPUSH
16793: CALL_OW 111
// continue ;
16797: GO 16289
// end ; end ; r := GetDir ( tmp ) ;
16799: LD_ADDR_VAR 0 15
16803: PUSH
16804: LD_VAR 0 13
16808: PPUSH
16809: CALL_OW 254
16813: ST_TO_ADDR
// if r = 5 then
16814: LD_VAR 0 15
16818: PUSH
16819: LD_INT 5
16821: EQUAL
16822: IFFALSE 16832
// r := 0 ;
16824: LD_ADDR_VAR 0 15
16828: PUSH
16829: LD_INT 0
16831: ST_TO_ADDR
// for j = r to 5 do
16832: LD_ADDR_VAR 0 10
16836: PUSH
16837: DOUBLE
16838: LD_VAR 0 15
16842: DEC
16843: ST_TO_ADDR
16844: LD_INT 5
16846: PUSH
16847: FOR_TO
16848: IFFALSE 16962
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16850: LD_ADDR_VAR 0 11
16854: PUSH
16855: LD_VAR 0 13
16859: PPUSH
16860: CALL_OW 250
16864: PPUSH
16865: LD_VAR 0 10
16869: PPUSH
16870: LD_INT 2
16872: PPUSH
16873: CALL_OW 272
16877: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16878: LD_ADDR_VAR 0 12
16882: PUSH
16883: LD_VAR 0 13
16887: PPUSH
16888: CALL_OW 251
16892: PPUSH
16893: LD_VAR 0 10
16897: PPUSH
16898: LD_INT 2
16900: PPUSH
16901: CALL_OW 273
16905: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16906: LD_VAR 0 11
16910: PPUSH
16911: LD_VAR 0 12
16915: PPUSH
16916: CALL_OW 488
16920: PUSH
16921: LD_VAR 0 11
16925: PPUSH
16926: LD_VAR 0 12
16930: PPUSH
16931: CALL_OW 428
16935: NOT
16936: AND
16937: IFFALSE 16960
// begin ComMoveXY ( tmp , _x , _y ) ;
16939: LD_VAR 0 13
16943: PPUSH
16944: LD_VAR 0 11
16948: PPUSH
16949: LD_VAR 0 12
16953: PPUSH
16954: CALL_OW 111
// break ;
16958: GO 16962
// end ; end ;
16960: GO 16847
16962: POP
16963: POP
// end ; end ;
16964: GO 16289
16966: POP
16967: POP
// end ;
16968: LD_VAR 0 8
16972: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16973: LD_INT 0
16975: PPUSH
// result := true ;
16976: LD_ADDR_VAR 0 3
16980: PUSH
16981: LD_INT 1
16983: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16984: LD_VAR 0 2
16988: PUSH
16989: LD_INT 24
16991: DOUBLE
16992: EQUAL
16993: IFTRUE 17003
16995: LD_INT 33
16997: DOUBLE
16998: EQUAL
16999: IFTRUE 17003
17001: GO 17028
17003: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17004: LD_ADDR_VAR 0 3
17008: PUSH
17009: LD_INT 32
17011: PPUSH
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL_OW 321
17021: PUSH
17022: LD_INT 2
17024: EQUAL
17025: ST_TO_ADDR
17026: GO 17348
17028: LD_INT 20
17030: DOUBLE
17031: EQUAL
17032: IFTRUE 17036
17034: GO 17061
17036: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17037: LD_ADDR_VAR 0 3
17041: PUSH
17042: LD_INT 6
17044: PPUSH
17045: LD_VAR 0 1
17049: PPUSH
17050: CALL_OW 321
17054: PUSH
17055: LD_INT 2
17057: EQUAL
17058: ST_TO_ADDR
17059: GO 17348
17061: LD_INT 22
17063: DOUBLE
17064: EQUAL
17065: IFTRUE 17075
17067: LD_INT 36
17069: DOUBLE
17070: EQUAL
17071: IFTRUE 17075
17073: GO 17100
17075: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17076: LD_ADDR_VAR 0 3
17080: PUSH
17081: LD_INT 15
17083: PPUSH
17084: LD_VAR 0 1
17088: PPUSH
17089: CALL_OW 321
17093: PUSH
17094: LD_INT 2
17096: EQUAL
17097: ST_TO_ADDR
17098: GO 17348
17100: LD_INT 30
17102: DOUBLE
17103: EQUAL
17104: IFTRUE 17108
17106: GO 17133
17108: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17109: LD_ADDR_VAR 0 3
17113: PUSH
17114: LD_INT 20
17116: PPUSH
17117: LD_VAR 0 1
17121: PPUSH
17122: CALL_OW 321
17126: PUSH
17127: LD_INT 2
17129: EQUAL
17130: ST_TO_ADDR
17131: GO 17348
17133: LD_INT 28
17135: DOUBLE
17136: EQUAL
17137: IFTRUE 17147
17139: LD_INT 21
17141: DOUBLE
17142: EQUAL
17143: IFTRUE 17147
17145: GO 17172
17147: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17148: LD_ADDR_VAR 0 3
17152: PUSH
17153: LD_INT 21
17155: PPUSH
17156: LD_VAR 0 1
17160: PPUSH
17161: CALL_OW 321
17165: PUSH
17166: LD_INT 2
17168: EQUAL
17169: ST_TO_ADDR
17170: GO 17348
17172: LD_INT 16
17174: DOUBLE
17175: EQUAL
17176: IFTRUE 17180
17178: GO 17207
17180: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17181: LD_ADDR_VAR 0 3
17185: PUSH
17186: LD_EXP 57
17190: PPUSH
17191: LD_VAR 0 1
17195: PPUSH
17196: CALL_OW 321
17200: PUSH
17201: LD_INT 2
17203: EQUAL
17204: ST_TO_ADDR
17205: GO 17348
17207: LD_INT 19
17209: DOUBLE
17210: EQUAL
17211: IFTRUE 17221
17213: LD_INT 23
17215: DOUBLE
17216: EQUAL
17217: IFTRUE 17221
17219: GO 17248
17221: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17222: LD_ADDR_VAR 0 3
17226: PUSH
17227: LD_EXP 56
17231: PPUSH
17232: LD_VAR 0 1
17236: PPUSH
17237: CALL_OW 321
17241: PUSH
17242: LD_INT 2
17244: EQUAL
17245: ST_TO_ADDR
17246: GO 17348
17248: LD_INT 17
17250: DOUBLE
17251: EQUAL
17252: IFTRUE 17256
17254: GO 17281
17256: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17257: LD_ADDR_VAR 0 3
17261: PUSH
17262: LD_INT 39
17264: PPUSH
17265: LD_VAR 0 1
17269: PPUSH
17270: CALL_OW 321
17274: PUSH
17275: LD_INT 2
17277: EQUAL
17278: ST_TO_ADDR
17279: GO 17348
17281: LD_INT 18
17283: DOUBLE
17284: EQUAL
17285: IFTRUE 17289
17287: GO 17314
17289: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17290: LD_ADDR_VAR 0 3
17294: PUSH
17295: LD_INT 40
17297: PPUSH
17298: LD_VAR 0 1
17302: PPUSH
17303: CALL_OW 321
17307: PUSH
17308: LD_INT 2
17310: EQUAL
17311: ST_TO_ADDR
17312: GO 17348
17314: LD_INT 27
17316: DOUBLE
17317: EQUAL
17318: IFTRUE 17322
17320: GO 17347
17322: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: LD_INT 35
17330: PPUSH
17331: LD_VAR 0 1
17335: PPUSH
17336: CALL_OW 321
17340: PUSH
17341: LD_INT 2
17343: EQUAL
17344: ST_TO_ADDR
17345: GO 17348
17347: POP
// end ;
17348: LD_VAR 0 3
17352: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17353: LD_INT 0
17355: PPUSH
17356: PPUSH
17357: PPUSH
17358: PPUSH
17359: PPUSH
17360: PPUSH
17361: PPUSH
17362: PPUSH
17363: PPUSH
17364: PPUSH
17365: PPUSH
// result := false ;
17366: LD_ADDR_VAR 0 6
17370: PUSH
17371: LD_INT 0
17373: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17374: LD_VAR 0 1
17378: NOT
17379: PUSH
17380: LD_VAR 0 1
17384: PPUSH
17385: CALL_OW 266
17389: PUSH
17390: LD_INT 0
17392: PUSH
17393: LD_INT 1
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: IN
17400: NOT
17401: OR
17402: PUSH
17403: LD_VAR 0 2
17407: NOT
17408: OR
17409: PUSH
17410: LD_VAR 0 5
17414: PUSH
17415: LD_INT 0
17417: PUSH
17418: LD_INT 1
17420: PUSH
17421: LD_INT 2
17423: PUSH
17424: LD_INT 3
17426: PUSH
17427: LD_INT 4
17429: PUSH
17430: LD_INT 5
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: IN
17441: NOT
17442: OR
17443: PUSH
17444: LD_VAR 0 3
17448: PPUSH
17449: LD_VAR 0 4
17453: PPUSH
17454: CALL_OW 488
17458: NOT
17459: OR
17460: IFFALSE 17464
// exit ;
17462: GO 18200
// side := GetSide ( depot ) ;
17464: LD_ADDR_VAR 0 9
17468: PUSH
17469: LD_VAR 0 1
17473: PPUSH
17474: CALL_OW 255
17478: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17479: LD_VAR 0 9
17483: PPUSH
17484: LD_VAR 0 2
17488: PPUSH
17489: CALL 16973 0 2
17493: NOT
17494: IFFALSE 17498
// exit ;
17496: GO 18200
// pom := GetBase ( depot ) ;
17498: LD_ADDR_VAR 0 10
17502: PUSH
17503: LD_VAR 0 1
17507: PPUSH
17508: CALL_OW 274
17512: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17513: LD_ADDR_VAR 0 11
17517: PUSH
17518: LD_VAR 0 2
17522: PPUSH
17523: LD_VAR 0 1
17527: PPUSH
17528: CALL_OW 248
17532: PPUSH
17533: CALL_OW 450
17537: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17538: LD_VAR 0 10
17542: PPUSH
17543: LD_INT 1
17545: PPUSH
17546: CALL_OW 275
17550: PUSH
17551: LD_VAR 0 11
17555: PUSH
17556: LD_INT 1
17558: ARRAY
17559: GREATEREQUAL
17560: PUSH
17561: LD_VAR 0 10
17565: PPUSH
17566: LD_INT 2
17568: PPUSH
17569: CALL_OW 275
17573: PUSH
17574: LD_VAR 0 11
17578: PUSH
17579: LD_INT 2
17581: ARRAY
17582: GREATEREQUAL
17583: AND
17584: PUSH
17585: LD_VAR 0 10
17589: PPUSH
17590: LD_INT 3
17592: PPUSH
17593: CALL_OW 275
17597: PUSH
17598: LD_VAR 0 11
17602: PUSH
17603: LD_INT 3
17605: ARRAY
17606: GREATEREQUAL
17607: AND
17608: NOT
17609: IFFALSE 17613
// exit ;
17611: GO 18200
// if GetBType ( depot ) = b_depot then
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL_OW 266
17622: PUSH
17623: LD_INT 0
17625: EQUAL
17626: IFFALSE 17638
// dist := 28 else
17628: LD_ADDR_VAR 0 14
17632: PUSH
17633: LD_INT 28
17635: ST_TO_ADDR
17636: GO 17646
// dist := 36 ;
17638: LD_ADDR_VAR 0 14
17642: PUSH
17643: LD_INT 36
17645: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17646: LD_VAR 0 1
17650: PPUSH
17651: LD_VAR 0 3
17655: PPUSH
17656: LD_VAR 0 4
17660: PPUSH
17661: CALL_OW 297
17665: PUSH
17666: LD_VAR 0 14
17670: GREATER
17671: IFFALSE 17675
// exit ;
17673: GO 18200
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17675: LD_ADDR_VAR 0 12
17679: PUSH
17680: LD_VAR 0 2
17684: PPUSH
17685: LD_VAR 0 3
17689: PPUSH
17690: LD_VAR 0 4
17694: PPUSH
17695: LD_VAR 0 5
17699: PPUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: CALL_OW 248
17709: PPUSH
17710: LD_INT 0
17712: PPUSH
17713: CALL 18205 0 6
17717: ST_TO_ADDR
// if not hexes then
17718: LD_VAR 0 12
17722: NOT
17723: IFFALSE 17727
// exit ;
17725: GO 18200
// hex := GetHexInfo ( x , y ) ;
17727: LD_ADDR_VAR 0 15
17731: PUSH
17732: LD_VAR 0 3
17736: PPUSH
17737: LD_VAR 0 4
17741: PPUSH
17742: CALL_OW 546
17746: ST_TO_ADDR
// if hex [ 1 ] then
17747: LD_VAR 0 15
17751: PUSH
17752: LD_INT 1
17754: ARRAY
17755: IFFALSE 17759
// exit ;
17757: GO 18200
// height := hex [ 2 ] ;
17759: LD_ADDR_VAR 0 13
17763: PUSH
17764: LD_VAR 0 15
17768: PUSH
17769: LD_INT 2
17771: ARRAY
17772: ST_TO_ADDR
// for i = 1 to hexes do
17773: LD_ADDR_VAR 0 7
17777: PUSH
17778: DOUBLE
17779: LD_INT 1
17781: DEC
17782: ST_TO_ADDR
17783: LD_VAR 0 12
17787: PUSH
17788: FOR_TO
17789: IFFALSE 18119
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17791: LD_VAR 0 12
17795: PUSH
17796: LD_VAR 0 7
17800: ARRAY
17801: PUSH
17802: LD_INT 1
17804: ARRAY
17805: PPUSH
17806: LD_VAR 0 12
17810: PUSH
17811: LD_VAR 0 7
17815: ARRAY
17816: PUSH
17817: LD_INT 2
17819: ARRAY
17820: PPUSH
17821: CALL_OW 488
17825: NOT
17826: PUSH
17827: LD_VAR 0 12
17831: PUSH
17832: LD_VAR 0 7
17836: ARRAY
17837: PUSH
17838: LD_INT 1
17840: ARRAY
17841: PPUSH
17842: LD_VAR 0 12
17846: PUSH
17847: LD_VAR 0 7
17851: ARRAY
17852: PUSH
17853: LD_INT 2
17855: ARRAY
17856: PPUSH
17857: CALL_OW 428
17861: PUSH
17862: LD_INT 0
17864: GREATER
17865: OR
17866: PUSH
17867: LD_VAR 0 12
17871: PUSH
17872: LD_VAR 0 7
17876: ARRAY
17877: PUSH
17878: LD_INT 1
17880: ARRAY
17881: PPUSH
17882: LD_VAR 0 12
17886: PUSH
17887: LD_VAR 0 7
17891: ARRAY
17892: PUSH
17893: LD_INT 2
17895: ARRAY
17896: PPUSH
17897: CALL_OW 351
17901: OR
17902: IFFALSE 17908
// exit ;
17904: POP
17905: POP
17906: GO 18200
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17908: LD_ADDR_VAR 0 8
17912: PUSH
17913: LD_VAR 0 12
17917: PUSH
17918: LD_VAR 0 7
17922: ARRAY
17923: PUSH
17924: LD_INT 1
17926: ARRAY
17927: PPUSH
17928: LD_VAR 0 12
17932: PUSH
17933: LD_VAR 0 7
17937: ARRAY
17938: PUSH
17939: LD_INT 2
17941: ARRAY
17942: PPUSH
17943: CALL_OW 546
17947: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17948: LD_VAR 0 8
17952: PUSH
17953: LD_INT 1
17955: ARRAY
17956: PUSH
17957: LD_VAR 0 8
17961: PUSH
17962: LD_INT 2
17964: ARRAY
17965: PUSH
17966: LD_VAR 0 13
17970: PUSH
17971: LD_INT 2
17973: PLUS
17974: GREATER
17975: OR
17976: PUSH
17977: LD_VAR 0 8
17981: PUSH
17982: LD_INT 2
17984: ARRAY
17985: PUSH
17986: LD_VAR 0 13
17990: PUSH
17991: LD_INT 2
17993: MINUS
17994: LESS
17995: OR
17996: PUSH
17997: LD_VAR 0 8
18001: PUSH
18002: LD_INT 3
18004: ARRAY
18005: PUSH
18006: LD_INT 0
18008: PUSH
18009: LD_INT 8
18011: PUSH
18012: LD_INT 9
18014: PUSH
18015: LD_INT 10
18017: PUSH
18018: LD_INT 11
18020: PUSH
18021: LD_INT 12
18023: PUSH
18024: LD_INT 13
18026: PUSH
18027: LD_INT 16
18029: PUSH
18030: LD_INT 17
18032: PUSH
18033: LD_INT 18
18035: PUSH
18036: LD_INT 19
18038: PUSH
18039: LD_INT 20
18041: PUSH
18042: LD_INT 21
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: IN
18060: NOT
18061: OR
18062: PUSH
18063: LD_VAR 0 8
18067: PUSH
18068: LD_INT 5
18070: ARRAY
18071: NOT
18072: OR
18073: PUSH
18074: LD_VAR 0 8
18078: PUSH
18079: LD_INT 6
18081: ARRAY
18082: PUSH
18083: LD_INT 1
18085: PUSH
18086: LD_INT 2
18088: PUSH
18089: LD_INT 7
18091: PUSH
18092: LD_INT 9
18094: PUSH
18095: LD_INT 10
18097: PUSH
18098: LD_INT 11
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: IN
18109: NOT
18110: OR
18111: IFFALSE 18117
// exit ;
18113: POP
18114: POP
18115: GO 18200
// end ;
18117: GO 17788
18119: POP
18120: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18121: LD_VAR 0 9
18125: PPUSH
18126: LD_VAR 0 3
18130: PPUSH
18131: LD_VAR 0 4
18135: PPUSH
18136: LD_INT 20
18138: PPUSH
18139: CALL 10146 0 4
18143: PUSH
18144: LD_INT 4
18146: ARRAY
18147: IFFALSE 18151
// exit ;
18149: GO 18200
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18151: LD_VAR 0 2
18155: PUSH
18156: LD_INT 29
18158: PUSH
18159: LD_INT 30
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: IN
18166: PUSH
18167: LD_VAR 0 3
18171: PPUSH
18172: LD_VAR 0 4
18176: PPUSH
18177: LD_VAR 0 9
18181: PPUSH
18182: CALL_OW 440
18186: NOT
18187: AND
18188: IFFALSE 18192
// exit ;
18190: GO 18200
// result := true ;
18192: LD_ADDR_VAR 0 6
18196: PUSH
18197: LD_INT 1
18199: ST_TO_ADDR
// end ;
18200: LD_VAR 0 6
18204: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18205: LD_INT 0
18207: PPUSH
18208: PPUSH
18209: PPUSH
18210: PPUSH
18211: PPUSH
18212: PPUSH
18213: PPUSH
18214: PPUSH
18215: PPUSH
18216: PPUSH
18217: PPUSH
18218: PPUSH
18219: PPUSH
18220: PPUSH
18221: PPUSH
18222: PPUSH
18223: PPUSH
18224: PPUSH
18225: PPUSH
18226: PPUSH
18227: PPUSH
18228: PPUSH
18229: PPUSH
18230: PPUSH
18231: PPUSH
18232: PPUSH
18233: PPUSH
18234: PPUSH
18235: PPUSH
18236: PPUSH
18237: PPUSH
18238: PPUSH
18239: PPUSH
18240: PPUSH
18241: PPUSH
18242: PPUSH
18243: PPUSH
18244: PPUSH
18245: PPUSH
18246: PPUSH
18247: PPUSH
18248: PPUSH
18249: PPUSH
18250: PPUSH
18251: PPUSH
18252: PPUSH
18253: PPUSH
18254: PPUSH
18255: PPUSH
18256: PPUSH
18257: PPUSH
18258: PPUSH
18259: PPUSH
18260: PPUSH
18261: PPUSH
18262: PPUSH
18263: PPUSH
18264: PPUSH
// result = [ ] ;
18265: LD_ADDR_VAR 0 7
18269: PUSH
18270: EMPTY
18271: ST_TO_ADDR
// temp_list = [ ] ;
18272: LD_ADDR_VAR 0 9
18276: PUSH
18277: EMPTY
18278: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18279: LD_VAR 0 4
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: LD_INT 2
18292: PUSH
18293: LD_INT 3
18295: PUSH
18296: LD_INT 4
18298: PUSH
18299: LD_INT 5
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: IN
18310: NOT
18311: PUSH
18312: LD_VAR 0 1
18316: PUSH
18317: LD_INT 0
18319: PUSH
18320: LD_INT 1
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: IN
18327: PUSH
18328: LD_VAR 0 5
18332: PUSH
18333: LD_INT 1
18335: PUSH
18336: LD_INT 2
18338: PUSH
18339: LD_INT 3
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: LIST
18346: IN
18347: NOT
18348: AND
18349: OR
18350: IFFALSE 18354
// exit ;
18352: GO 36745
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18354: LD_VAR 0 1
18358: PUSH
18359: LD_INT 6
18361: PUSH
18362: LD_INT 7
18364: PUSH
18365: LD_INT 8
18367: PUSH
18368: LD_INT 13
18370: PUSH
18371: LD_INT 12
18373: PUSH
18374: LD_INT 15
18376: PUSH
18377: LD_INT 11
18379: PUSH
18380: LD_INT 14
18382: PUSH
18383: LD_INT 10
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: IN
18397: IFFALSE 18407
// btype = b_lab ;
18399: LD_ADDR_VAR 0 1
18403: PUSH
18404: LD_INT 6
18406: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18407: LD_VAR 0 6
18411: PUSH
18412: LD_INT 0
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: LD_INT 2
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: IN
18426: NOT
18427: PUSH
18428: LD_VAR 0 1
18432: PUSH
18433: LD_INT 0
18435: PUSH
18436: LD_INT 1
18438: PUSH
18439: LD_INT 2
18441: PUSH
18442: LD_INT 3
18444: PUSH
18445: LD_INT 6
18447: PUSH
18448: LD_INT 36
18450: PUSH
18451: LD_INT 4
18453: PUSH
18454: LD_INT 5
18456: PUSH
18457: LD_INT 31
18459: PUSH
18460: LD_INT 32
18462: PUSH
18463: LD_INT 33
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: IN
18479: NOT
18480: PUSH
18481: LD_VAR 0 6
18485: PUSH
18486: LD_INT 1
18488: EQUAL
18489: AND
18490: OR
18491: PUSH
18492: LD_VAR 0 1
18496: PUSH
18497: LD_INT 2
18499: PUSH
18500: LD_INT 3
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: IN
18507: NOT
18508: PUSH
18509: LD_VAR 0 6
18513: PUSH
18514: LD_INT 2
18516: EQUAL
18517: AND
18518: OR
18519: IFFALSE 18529
// mode = 0 ;
18521: LD_ADDR_VAR 0 6
18525: PUSH
18526: LD_INT 0
18528: ST_TO_ADDR
// case mode of 0 :
18529: LD_VAR 0 6
18533: PUSH
18534: LD_INT 0
18536: DOUBLE
18537: EQUAL
18538: IFTRUE 18542
18540: GO 29995
18542: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18543: LD_ADDR_VAR 0 11
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 0
18560: PUSH
18561: LD_INT 1
18563: NEG
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PUSH
18569: LD_INT 1
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: PUSH
18579: LD_INT 1
18581: PUSH
18582: LD_INT 1
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 0
18591: PUSH
18592: LD_INT 1
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 1
18601: NEG
18602: PUSH
18603: LD_INT 0
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: LD_INT 1
18612: NEG
18613: PUSH
18614: LD_INT 1
18616: NEG
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 1
18624: NEG
18625: PUSH
18626: LD_INT 2
18628: NEG
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 0
18636: PUSH
18637: LD_INT 2
18639: NEG
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 1
18647: PUSH
18648: LD_INT 1
18650: NEG
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 1
18658: PUSH
18659: LD_INT 2
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 0
18668: PUSH
18669: LD_INT 2
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 1
18678: NEG
18679: PUSH
18680: LD_INT 1
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 1
18689: PUSH
18690: LD_INT 3
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 0
18699: PUSH
18700: LD_INT 3
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 1
18709: NEG
18710: PUSH
18711: LD_INT 2
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18736: LD_ADDR_VAR 0 12
18740: PUSH
18741: LD_INT 0
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 0
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: LD_INT 1
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 1
18794: NEG
18795: PUSH
18796: LD_INT 0
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: NEG
18806: PUSH
18807: LD_INT 1
18809: NEG
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: PUSH
18818: LD_INT 1
18820: NEG
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 2
18828: PUSH
18829: LD_INT 0
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: NEG
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 2
18859: NEG
18860: PUSH
18861: LD_INT 0
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 2
18870: NEG
18871: PUSH
18872: LD_INT 1
18874: NEG
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 2
18882: NEG
18883: PUSH
18884: LD_INT 1
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 3
18893: NEG
18894: PUSH
18895: LD_INT 0
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 3
18904: NEG
18905: PUSH
18906: LD_INT 1
18908: NEG
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18932: LD_ADDR_VAR 0 13
18936: PUSH
18937: LD_INT 0
18939: PUSH
18940: LD_INT 0
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: PUSH
18947: LD_INT 0
18949: PUSH
18950: LD_INT 1
18952: NEG
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 1
18960: PUSH
18961: LD_INT 0
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 1
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 0
18980: PUSH
18981: LD_INT 1
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 1
18990: NEG
18991: PUSH
18992: LD_INT 0
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 1
19001: NEG
19002: PUSH
19003: LD_INT 1
19005: NEG
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 1
19013: NEG
19014: PUSH
19015: LD_INT 2
19017: NEG
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: LD_INT 2
19025: PUSH
19026: LD_INT 1
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: LD_INT 2
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: LD_INT 2
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 2
19055: NEG
19056: PUSH
19057: LD_INT 1
19059: NEG
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 2
19067: NEG
19068: PUSH
19069: LD_INT 2
19071: NEG
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 2
19079: NEG
19080: PUSH
19081: LD_INT 3
19083: NEG
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 3
19091: NEG
19092: PUSH
19093: LD_INT 2
19095: NEG
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: LD_INT 3
19103: NEG
19104: PUSH
19105: LD_INT 3
19107: NEG
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19131: LD_ADDR_VAR 0 14
19135: PUSH
19136: LD_INT 0
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 0
19148: PUSH
19149: LD_INT 1
19151: NEG
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: LD_INT 0
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 1
19169: PUSH
19170: LD_INT 1
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 0
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: LD_INT 0
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 1
19200: NEG
19201: PUSH
19202: LD_INT 1
19204: NEG
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 1
19212: NEG
19213: PUSH
19214: LD_INT 2
19216: NEG
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 0
19224: PUSH
19225: LD_INT 2
19227: NEG
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 1
19235: PUSH
19236: LD_INT 1
19238: NEG
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 1
19246: PUSH
19247: LD_INT 2
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 0
19256: PUSH
19257: LD_INT 2
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 1
19266: NEG
19267: PUSH
19268: LD_INT 1
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: LD_INT 1
19277: NEG
19278: PUSH
19279: LD_INT 3
19281: NEG
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 0
19289: PUSH
19290: LD_INT 3
19292: NEG
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 1
19300: PUSH
19301: LD_INT 2
19303: NEG
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19327: LD_ADDR_VAR 0 15
19331: PUSH
19332: LD_INT 0
19334: PUSH
19335: LD_INT 0
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 0
19344: PUSH
19345: LD_INT 1
19347: NEG
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 1
19355: PUSH
19356: LD_INT 0
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 1
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: NEG
19386: PUSH
19387: LD_INT 0
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: PUSH
19394: LD_INT 1
19396: NEG
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: LD_INT 1
19411: NEG
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 2
19419: PUSH
19420: LD_INT 0
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 2
19429: PUSH
19430: LD_INT 1
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 1
19439: NEG
19440: PUSH
19441: LD_INT 1
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 2
19450: NEG
19451: PUSH
19452: LD_INT 0
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 2
19461: NEG
19462: PUSH
19463: LD_INT 1
19465: NEG
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 2
19473: PUSH
19474: LD_INT 1
19476: NEG
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 3
19484: PUSH
19485: LD_INT 0
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 3
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: EMPTY
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19520: LD_ADDR_VAR 0 16
19524: PUSH
19525: LD_INT 0
19527: PUSH
19528: LD_INT 0
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 0
19537: PUSH
19538: LD_INT 1
19540: NEG
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: LD_INT 1
19548: PUSH
19549: LD_INT 0
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 1
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: LD_INT 1
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 1
19578: NEG
19579: PUSH
19580: LD_INT 0
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 1
19589: NEG
19590: PUSH
19591: LD_INT 1
19593: NEG
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 1
19601: NEG
19602: PUSH
19603: LD_INT 2
19605: NEG
19606: PUSH
19607: EMPTY
19608: LIST
19609: LIST
19610: PUSH
19611: LD_INT 2
19613: PUSH
19614: LD_INT 1
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 2
19623: PUSH
19624: LD_INT 2
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 1
19633: PUSH
19634: LD_INT 2
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 2
19643: NEG
19644: PUSH
19645: LD_INT 1
19647: NEG
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 2
19655: NEG
19656: PUSH
19657: LD_INT 2
19659: NEG
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 3
19667: PUSH
19668: LD_INT 2
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 3
19677: PUSH
19678: LD_INT 3
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 2
19687: PUSH
19688: LD_INT 3
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: LIST
19712: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19713: LD_ADDR_VAR 0 17
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: LD_INT 0
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: LD_INT 0
19730: PUSH
19731: LD_INT 1
19733: NEG
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: LD_INT 0
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 1
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 0
19761: PUSH
19762: LD_INT 1
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 1
19771: NEG
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 1
19782: NEG
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: LD_INT 2
19798: NEG
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 0
19806: PUSH
19807: LD_INT 2
19809: NEG
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 2
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: LD_INT 2
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: PUSH
19866: LD_INT 0
19868: PUSH
19869: LD_INT 2
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PUSH
19876: LD_INT 1
19878: NEG
19879: PUSH
19880: LD_INT 1
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 2
19889: NEG
19890: PUSH
19891: LD_INT 0
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 2
19900: NEG
19901: PUSH
19902: LD_INT 1
19904: NEG
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 2
19912: NEG
19913: PUSH
19914: LD_INT 2
19916: NEG
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19943: LD_ADDR_VAR 0 18
19947: PUSH
19948: LD_INT 0
19950: PUSH
19951: LD_INT 0
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: LD_INT 0
19960: PUSH
19961: LD_INT 1
19963: NEG
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: PUSH
19972: LD_INT 0
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 1
19981: PUSH
19982: LD_INT 1
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 0
19991: PUSH
19992: LD_INT 1
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 1
20001: NEG
20002: PUSH
20003: LD_INT 0
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 1
20012: NEG
20013: PUSH
20014: LD_INT 1
20016: NEG
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: LD_INT 2
20028: NEG
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 0
20036: PUSH
20037: LD_INT 2
20039: NEG
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 1
20047: PUSH
20048: LD_INT 1
20050: NEG
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 2
20058: PUSH
20059: LD_INT 0
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 2
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 1
20088: PUSH
20089: LD_INT 2
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: LD_INT 0
20098: PUSH
20099: LD_INT 2
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PUSH
20106: LD_INT 1
20108: NEG
20109: PUSH
20110: LD_INT 1
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 2
20119: NEG
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 2
20130: NEG
20131: PUSH
20132: LD_INT 1
20134: NEG
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 2
20142: NEG
20143: PUSH
20144: LD_INT 2
20146: NEG
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20173: LD_ADDR_VAR 0 19
20177: PUSH
20178: LD_INT 0
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 0
20190: PUSH
20191: LD_INT 1
20193: NEG
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: LD_INT 0
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 1
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 0
20221: PUSH
20222: LD_INT 1
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PUSH
20229: LD_INT 1
20231: NEG
20232: PUSH
20233: LD_INT 0
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 1
20242: NEG
20243: PUSH
20244: LD_INT 1
20246: NEG
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 1
20254: NEG
20255: PUSH
20256: LD_INT 2
20258: NEG
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 0
20266: PUSH
20267: LD_INT 2
20269: NEG
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 2
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 2
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 2
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: LD_INT 2
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 0
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 1
20338: NEG
20339: PUSH
20340: LD_INT 1
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: NEG
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 2
20360: NEG
20361: PUSH
20362: LD_INT 1
20364: NEG
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 2
20372: NEG
20373: PUSH
20374: LD_INT 2
20376: NEG
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20403: LD_ADDR_VAR 0 20
20407: PUSH
20408: LD_INT 0
20410: PUSH
20411: LD_INT 0
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: LD_INT 0
20420: PUSH
20421: LD_INT 1
20423: NEG
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: LD_INT 0
20434: PUSH
20435: EMPTY
20436: LIST
20437: LIST
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: LD_INT 1
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 0
20451: PUSH
20452: LD_INT 1
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 1
20461: NEG
20462: PUSH
20463: LD_INT 0
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 1
20472: NEG
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 1
20484: NEG
20485: PUSH
20486: LD_INT 2
20488: NEG
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: LD_INT 2
20499: NEG
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: LD_INT 1
20510: NEG
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 2
20518: PUSH
20519: LD_INT 0
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 2
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 2
20538: PUSH
20539: LD_INT 2
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: LD_INT 2
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: PUSH
20556: LD_INT 0
20558: PUSH
20559: LD_INT 2
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 1
20568: NEG
20569: PUSH
20570: LD_INT 1
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 2
20579: NEG
20580: PUSH
20581: LD_INT 0
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 2
20590: NEG
20591: PUSH
20592: LD_INT 1
20594: NEG
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 2
20602: NEG
20603: PUSH
20604: LD_INT 2
20606: NEG
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20633: LD_ADDR_VAR 0 21
20637: PUSH
20638: LD_INT 0
20640: PUSH
20641: LD_INT 0
20643: PUSH
20644: EMPTY
20645: LIST
20646: LIST
20647: PUSH
20648: LD_INT 0
20650: PUSH
20651: LD_INT 1
20653: NEG
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: LD_INT 0
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 1
20671: PUSH
20672: LD_INT 1
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 0
20681: PUSH
20682: LD_INT 1
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 1
20691: NEG
20692: PUSH
20693: LD_INT 0
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 1
20702: NEG
20703: PUSH
20704: LD_INT 1
20706: NEG
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: LD_INT 2
20718: NEG
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 0
20726: PUSH
20727: LD_INT 2
20729: NEG
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: LD_INT 1
20740: NEG
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 2
20748: PUSH
20749: LD_INT 0
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 2
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 2
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: LD_INT 2
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 0
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: NEG
20799: PUSH
20800: LD_INT 1
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 2
20809: NEG
20810: PUSH
20811: LD_INT 0
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 2
20820: NEG
20821: PUSH
20822: LD_INT 1
20824: NEG
20825: PUSH
20826: EMPTY
20827: LIST
20828: LIST
20829: PUSH
20830: LD_INT 2
20832: NEG
20833: PUSH
20834: LD_INT 2
20836: NEG
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20863: LD_ADDR_VAR 0 22
20867: PUSH
20868: LD_INT 0
20870: PUSH
20871: LD_INT 0
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: LD_INT 1
20883: NEG
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: LD_INT 0
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: LD_INT 1
20904: PUSH
20905: EMPTY
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 0
20911: PUSH
20912: LD_INT 1
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PUSH
20919: LD_INT 1
20921: NEG
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 1
20932: NEG
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: LD_INT 2
20948: NEG
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: LD_INT 0
20956: PUSH
20957: LD_INT 2
20959: NEG
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: LD_INT 1
20970: NEG
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PUSH
20976: LD_INT 2
20978: PUSH
20979: LD_INT 0
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 2
20988: PUSH
20989: LD_INT 1
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 2
20998: PUSH
20999: LD_INT 2
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 1
21008: PUSH
21009: LD_INT 2
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 0
21018: PUSH
21019: LD_INT 2
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 2
21039: NEG
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: NEG
21051: PUSH
21052: LD_INT 1
21054: NEG
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 2
21062: NEG
21063: PUSH
21064: LD_INT 2
21066: NEG
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21093: LD_ADDR_VAR 0 23
21097: PUSH
21098: LD_INT 0
21100: PUSH
21101: LD_INT 0
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 0
21110: PUSH
21111: LD_INT 1
21113: NEG
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: LD_INT 1
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: LD_INT 1
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 1
21151: NEG
21152: PUSH
21153: LD_INT 0
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 1
21162: NEG
21163: PUSH
21164: LD_INT 1
21166: NEG
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: LD_INT 1
21174: NEG
21175: PUSH
21176: LD_INT 2
21178: NEG
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 0
21186: PUSH
21187: LD_INT 2
21189: NEG
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 1
21197: PUSH
21198: LD_INT 1
21200: NEG
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 2
21208: PUSH
21209: LD_INT 0
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 2
21218: PUSH
21219: LD_INT 1
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 2
21228: PUSH
21229: LD_INT 2
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: LD_INT 2
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 1
21258: NEG
21259: PUSH
21260: LD_INT 1
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 2
21269: NEG
21270: PUSH
21271: LD_INT 0
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 2
21280: NEG
21281: PUSH
21282: LD_INT 1
21284: NEG
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 2
21292: NEG
21293: PUSH
21294: LD_INT 2
21296: NEG
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 2
21304: NEG
21305: PUSH
21306: LD_INT 3
21308: NEG
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: NEG
21317: PUSH
21318: LD_INT 3
21320: NEG
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: LD_INT 2
21331: NEG
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 2
21339: PUSH
21340: LD_INT 1
21342: NEG
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21373: LD_ADDR_VAR 0 24
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 0
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 1
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 0
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 1
21431: NEG
21432: PUSH
21433: LD_INT 0
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 1
21442: NEG
21443: PUSH
21444: LD_INT 1
21446: NEG
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 1
21454: NEG
21455: PUSH
21456: LD_INT 2
21458: NEG
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: LD_INT 2
21469: NEG
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: LD_INT 1
21480: NEG
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 2
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 2
21508: PUSH
21509: LD_INT 2
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: PUSH
21519: LD_INT 2
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 0
21528: PUSH
21529: LD_INT 2
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: LD_INT 1
21538: NEG
21539: PUSH
21540: LD_INT 1
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 2
21549: NEG
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 2
21560: NEG
21561: PUSH
21562: LD_INT 1
21564: NEG
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 2
21572: NEG
21573: PUSH
21574: LD_INT 2
21576: NEG
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 1
21584: PUSH
21585: LD_INT 2
21587: NEG
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 2
21595: PUSH
21596: LD_INT 1
21598: NEG
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 3
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 3
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21649: LD_ADDR_VAR 0 25
21653: PUSH
21654: LD_INT 0
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 0
21666: PUSH
21667: LD_INT 1
21669: NEG
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 1
21687: PUSH
21688: LD_INT 1
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: LD_INT 0
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: LD_INT 1
21722: NEG
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 1
21730: NEG
21731: PUSH
21732: LD_INT 2
21734: NEG
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: LD_INT 2
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: PUSH
21754: LD_INT 1
21756: NEG
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 2
21764: PUSH
21765: LD_INT 0
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 2
21774: PUSH
21775: LD_INT 1
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 2
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 1
21794: PUSH
21795: LD_INT 2
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 0
21804: PUSH
21805: LD_INT 2
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: NEG
21815: PUSH
21816: LD_INT 1
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 2
21825: NEG
21826: PUSH
21827: LD_INT 0
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 2
21836: NEG
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 2
21848: NEG
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 3
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 3
21870: PUSH
21871: LD_INT 2
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 2
21880: PUSH
21881: LD_INT 3
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: LD_INT 1
21890: PUSH
21891: LD_INT 3
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21923: LD_ADDR_VAR 0 26
21927: PUSH
21928: LD_INT 0
21930: PUSH
21931: LD_INT 0
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: LD_INT 1
21943: NEG
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 1
21951: PUSH
21952: LD_INT 0
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 1
21961: PUSH
21962: LD_INT 1
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 0
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 1
21981: NEG
21982: PUSH
21983: LD_INT 0
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: PUSH
21994: LD_INT 1
21996: NEG
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: LD_INT 2
22008: NEG
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 0
22016: PUSH
22017: LD_INT 2
22019: NEG
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: LD_INT 0
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 2
22048: PUSH
22049: LD_INT 1
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 2
22058: PUSH
22059: LD_INT 2
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 1
22068: PUSH
22069: LD_INT 2
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: LD_INT 2
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 1
22088: NEG
22089: PUSH
22090: LD_INT 1
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 2
22099: NEG
22100: PUSH
22101: LD_INT 0
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 2
22110: NEG
22111: PUSH
22112: LD_INT 1
22114: NEG
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 2
22122: NEG
22123: PUSH
22124: LD_INT 2
22126: NEG
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 2
22134: PUSH
22135: LD_INT 3
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 1
22144: PUSH
22145: LD_INT 3
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: NEG
22155: PUSH
22156: LD_INT 2
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 2
22165: NEG
22166: PUSH
22167: LD_INT 1
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22199: LD_ADDR_VAR 0 27
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: LD_INT 0
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 0
22216: PUSH
22217: LD_INT 1
22219: NEG
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 0
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: NEG
22258: PUSH
22259: LD_INT 0
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: LD_INT 1
22272: NEG
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 1
22280: NEG
22281: PUSH
22282: LD_INT 2
22284: NEG
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 0
22292: PUSH
22293: LD_INT 2
22295: NEG
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: LD_INT 1
22306: NEG
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 2
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 2
22324: PUSH
22325: LD_INT 1
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: LD_INT 2
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 1
22344: PUSH
22345: LD_INT 2
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 0
22354: PUSH
22355: LD_INT 2
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: NEG
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 2
22375: NEG
22376: PUSH
22377: LD_INT 0
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 2
22386: NEG
22387: PUSH
22388: LD_INT 1
22390: NEG
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 2
22398: NEG
22399: PUSH
22400: LD_INT 2
22402: NEG
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: PUSH
22408: LD_INT 1
22410: NEG
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 2
22421: NEG
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 3
22432: NEG
22433: PUSH
22434: LD_INT 1
22436: NEG
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 3
22444: NEG
22445: PUSH
22446: LD_INT 2
22448: NEG
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22479: LD_ADDR_VAR 0 28
22483: PUSH
22484: LD_INT 0
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 0
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 1
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 0
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 1
22537: NEG
22538: PUSH
22539: LD_INT 0
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 1
22548: NEG
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 1
22560: NEG
22561: PUSH
22562: LD_INT 2
22564: NEG
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: LD_INT 2
22575: NEG
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: LD_INT 1
22586: NEG
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 2
22594: PUSH
22595: LD_INT 0
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 2
22614: PUSH
22615: LD_INT 2
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: LD_INT 0
22634: PUSH
22635: LD_INT 2
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 1
22644: NEG
22645: PUSH
22646: LD_INT 1
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 2
22655: NEG
22656: PUSH
22657: LD_INT 0
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 2
22666: NEG
22667: PUSH
22668: LD_INT 1
22670: NEG
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 2
22678: NEG
22679: PUSH
22680: LD_INT 2
22682: NEG
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 2
22690: NEG
22691: PUSH
22692: LD_INT 3
22694: NEG
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: NEG
22703: PUSH
22704: LD_INT 3
22706: NEG
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 3
22714: NEG
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 3
22726: NEG
22727: PUSH
22728: LD_INT 2
22730: NEG
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22761: LD_ADDR_VAR 0 29
22765: PUSH
22766: LD_INT 0
22768: PUSH
22769: LD_INT 0
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: LD_INT 1
22781: NEG
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 1
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: LD_INT 1
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 1
22819: NEG
22820: PUSH
22821: LD_INT 0
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 1
22842: NEG
22843: PUSH
22844: LD_INT 2
22846: NEG
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 0
22854: PUSH
22855: LD_INT 2
22857: NEG
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 0
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 0
22906: PUSH
22907: LD_INT 2
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 1
22916: NEG
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 2
22927: NEG
22928: PUSH
22929: LD_INT 1
22931: NEG
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 2
22939: NEG
22940: PUSH
22941: LD_INT 2
22943: NEG
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 2
22951: NEG
22952: PUSH
22953: LD_INT 3
22955: NEG
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 2
22963: PUSH
22964: LD_INT 1
22966: NEG
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 3
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: PUSH
22985: LD_INT 3
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: LD_INT 1
22994: NEG
22995: PUSH
22996: LD_INT 2
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PUSH
23003: LD_INT 3
23005: NEG
23006: PUSH
23007: LD_INT 2
23009: NEG
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23040: LD_ADDR_VAR 0 30
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: LD_INT 0
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: LD_INT 1
23060: NEG
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: LD_INT 0
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: LD_INT 1
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: LD_INT 1
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 1
23098: NEG
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 1
23109: NEG
23110: PUSH
23111: LD_INT 1
23113: NEG
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 1
23121: NEG
23122: PUSH
23123: LD_INT 2
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: LD_INT 2
23136: NEG
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 1
23144: PUSH
23145: LD_INT 1
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 2
23155: PUSH
23156: LD_INT 0
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: LD_INT 1
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: LD_INT 2
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 1
23185: PUSH
23186: LD_INT 2
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 1
23195: NEG
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 2
23206: NEG
23207: PUSH
23208: LD_INT 0
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 2
23217: NEG
23218: PUSH
23219: LD_INT 1
23221: NEG
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: PUSH
23231: LD_INT 3
23233: NEG
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: LD_INT 2
23244: NEG
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 3
23252: PUSH
23253: LD_INT 2
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 2
23262: PUSH
23263: LD_INT 3
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 2
23272: NEG
23273: PUSH
23274: LD_INT 1
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 3
23283: NEG
23284: PUSH
23285: LD_INT 1
23287: NEG
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23318: LD_ADDR_VAR 0 31
23322: PUSH
23323: LD_INT 0
23325: PUSH
23326: LD_INT 0
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: PUSH
23333: LD_INT 0
23335: PUSH
23336: LD_INT 1
23338: NEG
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 1
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 0
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 1
23376: NEG
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: LD_INT 1
23391: NEG
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 1
23399: NEG
23400: PUSH
23401: LD_INT 2
23403: NEG
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 1
23414: NEG
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 2
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 2
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 2
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 1
23452: PUSH
23453: LD_INT 2
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: LD_INT 2
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: NEG
23473: PUSH
23474: LD_INT 1
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 2
23483: NEG
23484: PUSH
23485: LD_INT 1
23487: NEG
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 2
23495: NEG
23496: PUSH
23497: LD_INT 2
23499: NEG
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 2
23507: NEG
23508: PUSH
23509: LD_INT 3
23511: NEG
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 2
23519: PUSH
23520: LD_INT 1
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 3
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 1
23540: PUSH
23541: LD_INT 3
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: LD_INT 2
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 3
23561: NEG
23562: PUSH
23563: LD_INT 2
23565: NEG
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23596: LD_ADDR_VAR 0 32
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: LD_INT 0
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: LD_INT 1
23616: NEG
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 1
23624: PUSH
23625: LD_INT 0
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 1
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: LD_INT 1
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 1
23654: NEG
23655: PUSH
23656: LD_INT 0
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 1
23665: NEG
23666: PUSH
23667: LD_INT 1
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: NEG
23678: PUSH
23679: LD_INT 2
23681: NEG
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 0
23689: PUSH
23690: LD_INT 2
23692: NEG
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: LD_INT 1
23703: NEG
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 2
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 2
23721: PUSH
23722: LD_INT 2
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 0
23741: PUSH
23742: LD_INT 2
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 1
23751: NEG
23752: PUSH
23753: LD_INT 1
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: LD_INT 2
23762: NEG
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 2
23773: NEG
23774: PUSH
23775: LD_INT 1
23777: NEG
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: LD_INT 1
23785: NEG
23786: PUSH
23787: LD_INT 3
23789: NEG
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: LD_INT 2
23800: NEG
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 3
23808: PUSH
23809: LD_INT 2
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 2
23818: PUSH
23819: LD_INT 3
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 2
23828: NEG
23829: PUSH
23830: LD_INT 1
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 3
23839: NEG
23840: PUSH
23841: LD_INT 1
23843: NEG
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23874: LD_ADDR_VAR 0 33
23878: PUSH
23879: LD_INT 0
23881: PUSH
23882: LD_INT 0
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 0
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 1
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 1
23912: PUSH
23913: LD_INT 1
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 1
23932: NEG
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 1
23943: NEG
23944: PUSH
23945: LD_INT 1
23947: NEG
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: LD_INT 2
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 1
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 2
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 2
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 1
23998: PUSH
23999: LD_INT 2
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: LD_INT 0
24008: PUSH
24009: LD_INT 2
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 1
24018: NEG
24019: PUSH
24020: LD_INT 1
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 2
24029: NEG
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 2
24040: NEG
24041: PUSH
24042: LD_INT 1
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 2
24052: NEG
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 2
24064: NEG
24065: PUSH
24066: LD_INT 3
24068: NEG
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 2
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 3
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 1
24097: PUSH
24098: LD_INT 3
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 1
24107: NEG
24108: PUSH
24109: LD_INT 2
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 3
24118: NEG
24119: PUSH
24120: LD_INT 2
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24153: LD_ADDR_VAR 0 34
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 0
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 0
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 0
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: NEG
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: LD_INT 1
24226: NEG
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 1
24234: NEG
24235: PUSH
24236: LD_INT 2
24238: NEG
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 0
24246: PUSH
24247: LD_INT 2
24249: NEG
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 1
24257: PUSH
24258: LD_INT 1
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 2
24268: PUSH
24269: LD_INT 1
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: LD_INT 2
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: LD_INT 2
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: LD_INT 1
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 2
24309: NEG
24310: PUSH
24311: LD_INT 0
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 2
24320: NEG
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 2
24332: NEG
24333: PUSH
24334: LD_INT 2
24336: NEG
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 1
24344: NEG
24345: PUSH
24346: LD_INT 3
24348: NEG
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 1
24356: PUSH
24357: LD_INT 2
24359: NEG
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 3
24367: PUSH
24368: LD_INT 2
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: LD_INT 3
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 2
24387: NEG
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 3
24398: NEG
24399: PUSH
24400: LD_INT 1
24402: NEG
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24433: LD_ADDR_VAR 0 35
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: LD_INT 0
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 0
24450: PUSH
24451: LD_INT 1
24453: NEG
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: LD_INT 1
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 1
24471: PUSH
24472: LD_INT 1
24474: PUSH
24475: EMPTY
24476: LIST
24477: LIST
24478: PUSH
24479: LD_INT 0
24481: PUSH
24482: LD_INT 1
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: LD_INT 0
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 1
24502: NEG
24503: PUSH
24504: LD_INT 1
24506: NEG
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 2
24514: PUSH
24515: LD_INT 1
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 2
24524: NEG
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24545: LD_ADDR_VAR 0 36
24549: PUSH
24550: LD_INT 0
24552: PUSH
24553: LD_INT 0
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 0
24562: PUSH
24563: LD_INT 1
24565: NEG
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 1
24573: PUSH
24574: LD_INT 0
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: PUSH
24584: LD_INT 1
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 0
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 1
24603: NEG
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 1
24614: NEG
24615: PUSH
24616: LD_INT 1
24618: NEG
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: LD_INT 2
24630: NEG
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: LD_INT 2
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24657: LD_ADDR_VAR 0 37
24661: PUSH
24662: LD_INT 0
24664: PUSH
24665: LD_INT 0
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: LD_INT 1
24677: NEG
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 1
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: LD_INT 1
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 1
24715: NEG
24716: PUSH
24717: LD_INT 0
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 1
24726: NEG
24727: PUSH
24728: LD_INT 1
24730: NEG
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 1
24738: PUSH
24739: LD_INT 1
24741: NEG
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: LD_INT 1
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24769: LD_ADDR_VAR 0 38
24773: PUSH
24774: LD_INT 0
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: LD_INT 0
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: LD_INT 1
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 1
24827: NEG
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: PUSH
24836: LD_INT 1
24838: NEG
24839: PUSH
24840: LD_INT 1
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 2
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 2
24860: NEG
24861: PUSH
24862: LD_INT 1
24864: NEG
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24881: LD_ADDR_VAR 0 39
24885: PUSH
24886: LD_INT 0
24888: PUSH
24889: LD_INT 0
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: LD_INT 1
24901: NEG
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: LD_INT 0
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 1
24919: PUSH
24920: LD_INT 1
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 1
24939: NEG
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: NEG
24951: PUSH
24952: LD_INT 1
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: NEG
24963: PUSH
24964: LD_INT 2
24966: NEG
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: PUSH
24975: LD_INT 2
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24993: LD_ADDR_VAR 0 40
24997: PUSH
24998: LD_INT 0
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 0
25010: PUSH
25011: LD_INT 1
25013: NEG
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 1
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: LD_INT 1
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 1
25051: NEG
25052: PUSH
25053: LD_INT 0
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: NEG
25063: PUSH
25064: LD_INT 1
25066: NEG
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: LD_INT 1
25077: NEG
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: LD_INT 1
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25105: LD_ADDR_VAR 0 41
25109: PUSH
25110: LD_INT 0
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 0
25122: PUSH
25123: LD_INT 1
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 1
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 0
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 1
25163: NEG
25164: PUSH
25165: LD_INT 0
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: LD_INT 1
25178: NEG
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 1
25186: NEG
25187: PUSH
25188: LD_INT 2
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 1
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: LD_INT 2
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 1
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 2
25283: NEG
25284: PUSH
25285: LD_INT 2
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: NEG
25296: PUSH
25297: LD_INT 3
25299: NEG
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: LD_INT 1
25310: NEG
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 3
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 3
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 3
25338: PUSH
25339: LD_INT 2
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 3
25348: PUSH
25349: LD_INT 3
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: LD_INT 3
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: NEG
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 3
25379: NEG
25380: PUSH
25381: LD_INT 0
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 3
25390: NEG
25391: PUSH
25392: LD_INT 1
25394: NEG
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 3
25402: NEG
25403: PUSH
25404: LD_INT 2
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 3
25414: NEG
25415: PUSH
25416: LD_INT 3
25418: NEG
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25455: LD_ADDR_VAR 0 42
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 0
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 0
25472: PUSH
25473: LD_INT 1
25475: NEG
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: PUSH
25494: LD_INT 1
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 0
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 1
25513: NEG
25514: PUSH
25515: LD_INT 0
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 1
25524: NEG
25525: PUSH
25526: LD_INT 1
25528: NEG
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 1
25536: NEG
25537: PUSH
25538: LD_INT 2
25540: NEG
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: LD_INT 2
25551: NEG
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 2
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 2
25580: PUSH
25581: LD_INT 2
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: LD_INT 1
25590: PUSH
25591: LD_INT 2
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: LD_INT 2
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: PUSH
25612: LD_INT 1
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 2
25621: NEG
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 2
25633: NEG
25634: PUSH
25635: LD_INT 2
25637: NEG
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 2
25645: NEG
25646: PUSH
25647: LD_INT 3
25649: NEG
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PUSH
25655: LD_INT 1
25657: NEG
25658: PUSH
25659: LD_INT 3
25661: NEG
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: LD_INT 3
25672: NEG
25673: PUSH
25674: EMPTY
25675: LIST
25676: LIST
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: LD_INT 2
25683: NEG
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 3
25691: PUSH
25692: LD_INT 2
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 3
25701: PUSH
25702: LD_INT 3
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 2
25711: PUSH
25712: LD_INT 3
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 1
25721: PUSH
25722: LD_INT 3
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 0
25731: PUSH
25732: LD_INT 3
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: LD_INT 2
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 3
25752: NEG
25753: PUSH
25754: LD_INT 2
25756: NEG
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 3
25764: NEG
25765: PUSH
25766: LD_INT 3
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25805: LD_ADDR_VAR 0 43
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: LD_INT 0
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 1
25833: PUSH
25834: LD_INT 0
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: LD_INT 1
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: NEG
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: NEG
25875: PUSH
25876: LD_INT 1
25878: NEG
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 1
25886: NEG
25887: PUSH
25888: LD_INT 2
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: LD_INT 2
25901: NEG
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 1
25909: PUSH
25910: LD_INT 1
25912: NEG
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 2
25920: PUSH
25921: LD_INT 0
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 1
25940: PUSH
25941: LD_INT 2
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 0
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: NEG
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 2
25971: NEG
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 2
25982: NEG
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 1
25994: NEG
25995: PUSH
25996: LD_INT 3
25998: NEG
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: LD_INT 3
26009: NEG
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: LD_INT 2
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 2
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 3
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 3
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: LD_INT 3
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: LD_INT 3
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: LD_INT 2
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 2
26090: NEG
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 3
26101: NEG
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 3
26112: NEG
26113: PUSH
26114: LD_INT 1
26116: NEG
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26153: LD_ADDR_VAR 0 44
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: LD_INT 0
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: LD_INT 1
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 1
26222: NEG
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: PUSH
26236: LD_INT 2
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 2
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 2
26267: PUSH
26268: LD_INT 1
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: LD_INT 2
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: LD_INT 2
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 2
26308: NEG
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: NEG
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 2
26331: NEG
26332: PUSH
26333: LD_INT 2
26335: NEG
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 2
26343: NEG
26344: PUSH
26345: LD_INT 3
26347: NEG
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 2
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 3
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 3
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 3
26396: PUSH
26397: LD_INT 3
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 2
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 2
26416: NEG
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 3
26427: NEG
26428: PUSH
26429: LD_INT 0
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 3
26438: NEG
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 3
26450: NEG
26451: PUSH
26452: LD_INT 2
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 3
26462: NEG
26463: PUSH
26464: LD_INT 3
26466: NEG
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: LIST
26481: LIST
26482: LIST
26483: LIST
26484: LIST
26485: LIST
26486: LIST
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: LIST
26497: LIST
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26503: LD_ADDR_VAR 0 45
26507: PUSH
26508: LD_INT 0
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 0
26520: PUSH
26521: LD_INT 1
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 1
26531: PUSH
26532: LD_INT 0
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: LD_INT 1
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: LD_INT 0
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: LD_INT 1
26576: NEG
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: LD_INT 2
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: LD_INT 2
26599: NEG
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: LD_INT 1
26610: NEG
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 2
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 2
26628: PUSH
26629: LD_INT 2
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: PUSH
26639: LD_INT 2
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PUSH
26646: LD_INT 0
26648: PUSH
26649: LD_INT 2
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: PUSH
26660: LD_INT 1
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 2
26669: NEG
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: PUSH
26679: LD_INT 2
26681: NEG
26682: PUSH
26683: LD_INT 2
26685: NEG
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 2
26693: NEG
26694: PUSH
26695: LD_INT 3
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: LD_INT 3
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 0
26717: PUSH
26718: LD_INT 3
26720: NEG
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 2
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 3
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PUSH
26747: LD_INT 3
26749: PUSH
26750: LD_INT 3
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 2
26759: PUSH
26760: LD_INT 3
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: LD_INT 3
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: LD_INT 3
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 1
26789: NEG
26790: PUSH
26791: LD_INT 2
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 3
26800: NEG
26801: PUSH
26802: LD_INT 2
26804: NEG
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 3
26812: NEG
26813: PUSH
26814: LD_INT 3
26816: NEG
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26853: LD_ADDR_VAR 0 46
26857: PUSH
26858: LD_INT 0
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 0
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 1
26911: NEG
26912: PUSH
26913: LD_INT 0
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 1
26922: NEG
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: LD_INT 2
26938: NEG
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 0
26946: PUSH
26947: LD_INT 2
26949: NEG
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: LD_INT 1
26960: NEG
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 2
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 2
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: LD_INT 2
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: LD_INT 2
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 1
27008: NEG
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 2
27019: NEG
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 2
27030: NEG
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: NEG
27043: PUSH
27044: LD_INT 3
27046: NEG
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 3
27057: NEG
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: LD_INT 2
27068: NEG
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: PUSH
27074: LD_INT 2
27076: PUSH
27077: LD_INT 1
27079: NEG
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 3
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: LD_INT 3
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 1
27107: PUSH
27108: LD_INT 3
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: LD_INT 3
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 1
27127: NEG
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 2
27138: NEG
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 3
27149: NEG
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 3
27160: NEG
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27201: LD_ADDR_VAR 0 47
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: NEG
27283: PUSH
27284: LD_INT 2
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: LD_INT 2
27297: NEG
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: LD_INT 1
27308: NEG
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 2
27316: NEG
27317: PUSH
27318: LD_INT 1
27320: NEG
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 2
27328: NEG
27329: PUSH
27330: LD_INT 2
27332: NEG
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27352: LD_ADDR_VAR 0 48
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 0
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 1
27410: NEG
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: LD_INT 1
27425: NEG
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: LD_INT 2
27437: NEG
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: LD_INT 2
27448: NEG
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 2
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 2
27477: PUSH
27478: LD_INT 1
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27499: LD_ADDR_VAR 0 49
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: NEG
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: LD_INT 1
27583: NEG
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: LD_INT 1
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27643: LD_ADDR_VAR 0 50
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: LD_INT 0
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 0
27660: PUSH
27661: LD_INT 1
27663: NEG
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 1
27701: NEG
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 1
27712: NEG
27713: PUSH
27714: LD_INT 1
27716: NEG
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PUSH
27722: LD_INT 2
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 2
27734: PUSH
27735: LD_INT 2
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: LD_INT 2
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: PUSH
27752: LD_INT 0
27754: PUSH
27755: LD_INT 2
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27787: LD_ADDR_VAR 0 51
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: LD_INT 0
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: LD_INT 1
27807: NEG
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 1
27815: PUSH
27816: LD_INT 0
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 1
27825: PUSH
27826: LD_INT 1
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 1
27856: NEG
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 1
27868: PUSH
27869: LD_INT 2
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 0
27878: PUSH
27879: LD_INT 2
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 1
27888: NEG
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 2
27899: NEG
27900: PUSH
27901: LD_INT 0
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 2
27910: NEG
27911: PUSH
27912: LD_INT 1
27914: NEG
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27934: LD_ADDR_VAR 0 52
27938: PUSH
27939: LD_INT 0
27941: PUSH
27942: LD_INT 0
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 0
27951: PUSH
27952: LD_INT 1
27954: NEG
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 1
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: EMPTY
27987: LIST
27988: LIST
27989: PUSH
27990: LD_INT 1
27992: NEG
27993: PUSH
27994: LD_INT 0
27996: PUSH
27997: EMPTY
27998: LIST
27999: LIST
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: LD_INT 2
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 2
28061: NEG
28062: PUSH
28063: LD_INT 2
28065: NEG
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28085: LD_ADDR_VAR 0 53
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: LD_INT 1
28105: NEG
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: PUSH
28114: LD_INT 0
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PUSH
28131: LD_INT 0
28133: PUSH
28134: LD_INT 1
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: LD_INT 1
28158: NEG
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: LD_INT 2
28170: NEG
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 0
28178: PUSH
28179: LD_INT 2
28181: NEG
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 2
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 2
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: LD_INT 2
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: LD_INT 2
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 0
28240: PUSH
28241: LD_INT 2
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: PUSH
28252: LD_INT 1
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 2
28261: NEG
28262: PUSH
28263: LD_INT 0
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 2
28272: NEG
28273: PUSH
28274: LD_INT 1
28276: NEG
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 2
28284: NEG
28285: PUSH
28286: LD_INT 2
28288: NEG
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28315: LD_ADDR_VAR 0 54
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 0
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: LD_INT 1
28335: NEG
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: LD_INT 0
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 0
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 1
28373: NEG
28374: PUSH
28375: LD_INT 0
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 1
28384: NEG
28385: PUSH
28386: LD_INT 1
28388: NEG
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: NEG
28397: PUSH
28398: LD_INT 2
28400: NEG
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: LD_INT 2
28411: NEG
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 2
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 2
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: LD_INT 2
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: LD_INT 2
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: LD_INT 2
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 1
28480: NEG
28481: PUSH
28482: LD_INT 1
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 2
28491: NEG
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 2
28502: NEG
28503: PUSH
28504: LD_INT 1
28506: NEG
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: LD_INT 2
28514: NEG
28515: PUSH
28516: LD_INT 2
28518: NEG
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28545: LD_ADDR_VAR 0 55
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 0
28562: PUSH
28563: LD_INT 1
28565: NEG
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: LD_INT 0
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: LD_INT 1
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 0
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 1
28603: NEG
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 1
28614: NEG
28615: PUSH
28616: LD_INT 1
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: NEG
28627: PUSH
28628: LD_INT 2
28630: NEG
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 0
28638: PUSH
28639: LD_INT 2
28641: NEG
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 1
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 2
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 2
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 2
28680: PUSH
28681: LD_INT 2
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: LD_INT 2
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 0
28700: PUSH
28701: LD_INT 2
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: NEG
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 2
28721: NEG
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 2
28732: NEG
28733: PUSH
28734: LD_INT 1
28736: NEG
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 2
28744: NEG
28745: PUSH
28746: LD_INT 2
28748: NEG
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28775: LD_ADDR_VAR 0 56
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 0
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: PUSH
28804: LD_INT 0
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 1
28813: PUSH
28814: LD_INT 1
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 0
28823: PUSH
28824: LD_INT 1
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: NEG
28834: PUSH
28835: LD_INT 0
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: PUSH
28842: LD_INT 1
28844: NEG
28845: PUSH
28846: LD_INT 1
28848: NEG
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 1
28856: NEG
28857: PUSH
28858: LD_INT 2
28860: NEG
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: LD_INT 2
28871: NEG
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 1
28879: PUSH
28880: LD_INT 1
28882: NEG
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 2
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 2
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 2
28910: PUSH
28911: LD_INT 2
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 1
28920: PUSH
28921: LD_INT 2
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 0
28930: PUSH
28931: LD_INT 2
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 1
28940: NEG
28941: PUSH
28942: LD_INT 1
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 2
28951: NEG
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 2
28962: NEG
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 2
28974: NEG
28975: PUSH
28976: LD_INT 2
28978: NEG
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29005: LD_ADDR_VAR 0 57
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 1
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: NEG
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: LD_INT 1
29078: NEG
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: NEG
29087: PUSH
29088: LD_INT 2
29090: NEG
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: LD_INT 2
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: LD_INT 1
29112: NEG
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 2
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 2
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 2
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 1
29150: PUSH
29151: LD_INT 2
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 0
29160: PUSH
29161: LD_INT 2
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 1
29170: NEG
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 2
29181: NEG
29182: PUSH
29183: LD_INT 0
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 2
29192: NEG
29193: PUSH
29194: LD_INT 1
29196: NEG
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: LD_INT 2
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29235: LD_ADDR_VAR 0 58
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 0
29252: PUSH
29253: LD_INT 1
29255: NEG
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: LD_INT 0
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 1
29273: PUSH
29274: LD_INT 1
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 0
29283: PUSH
29284: LD_INT 1
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: LD_INT 0
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: LD_INT 1
29304: NEG
29305: PUSH
29306: LD_INT 1
29308: NEG
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 1
29316: NEG
29317: PUSH
29318: LD_INT 2
29320: NEG
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 0
29328: PUSH
29329: LD_INT 2
29331: NEG
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 1
29339: PUSH
29340: LD_INT 1
29342: NEG
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: LD_INT 0
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 2
29360: PUSH
29361: LD_INT 1
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 2
29370: PUSH
29371: LD_INT 2
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: LD_INT 2
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 0
29390: PUSH
29391: LD_INT 2
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 1
29400: NEG
29401: PUSH
29402: LD_INT 1
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 2
29411: NEG
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 2
29422: NEG
29423: PUSH
29424: LD_INT 1
29426: NEG
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 2
29434: NEG
29435: PUSH
29436: LD_INT 2
29438: NEG
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29465: LD_ADDR_VAR 0 59
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 0
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 0
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 1
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 1
29523: NEG
29524: PUSH
29525: LD_INT 0
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: NEG
29535: PUSH
29536: LD_INT 1
29538: NEG
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29553: LD_ADDR_VAR 0 60
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29641: LD_ADDR_VAR 0 61
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: LD_INT 1
29661: NEG
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: LD_INT 1
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 1
29699: NEG
29700: PUSH
29701: LD_INT 0
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PUSH
29708: LD_INT 1
29710: NEG
29711: PUSH
29712: LD_INT 1
29714: NEG
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29729: LD_ADDR_VAR 0 62
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: LD_INT 1
29749: NEG
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: LD_INT 0
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 1
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 1
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29817: LD_ADDR_VAR 0 63
29821: PUSH
29822: LD_INT 0
29824: PUSH
29825: LD_INT 0
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PUSH
29843: LD_INT 1
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PUSH
29853: LD_INT 1
29855: PUSH
29856: LD_INT 1
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 0
29865: PUSH
29866: LD_INT 1
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: NEG
29887: PUSH
29888: LD_INT 1
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29905: LD_ADDR_VAR 0 64
29909: PUSH
29910: LD_INT 0
29912: PUSH
29913: LD_INT 0
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: LD_INT 1
29925: NEG
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 1
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: LD_INT 1
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 1
29963: NEG
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: LD_INT 1
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: ST_TO_ADDR
// end ; 1 :
29993: GO 35890
29995: LD_INT 1
29997: DOUBLE
29998: EQUAL
29999: IFTRUE 30003
30001: GO 32626
30003: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30004: LD_ADDR_VAR 0 11
30008: PUSH
30009: LD_INT 1
30011: NEG
30012: PUSH
30013: LD_INT 3
30015: NEG
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: LD_INT 3
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: LD_INT 2
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: LIST
30047: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30048: LD_ADDR_VAR 0 12
30052: PUSH
30053: LD_INT 2
30055: PUSH
30056: LD_INT 1
30058: NEG
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 3
30066: PUSH
30067: LD_INT 0
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 3
30076: PUSH
30077: LD_INT 1
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: LIST
30088: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30089: LD_ADDR_VAR 0 13
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: LD_INT 2
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 3
30106: PUSH
30107: LD_INT 3
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 2
30116: PUSH
30117: LD_INT 3
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: EMPTY
30125: LIST
30126: LIST
30127: LIST
30128: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30129: LD_ADDR_VAR 0 14
30133: PUSH
30134: LD_INT 1
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: LD_INT 3
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 1
30156: NEG
30157: PUSH
30158: LD_INT 2
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30170: LD_ADDR_VAR 0 15
30174: PUSH
30175: LD_INT 2
30177: NEG
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 3
30188: NEG
30189: PUSH
30190: LD_INT 0
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 3
30199: NEG
30200: PUSH
30201: LD_INT 1
30203: NEG
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: LIST
30213: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30214: LD_ADDR_VAR 0 16
30218: PUSH
30219: LD_INT 2
30221: NEG
30222: PUSH
30223: LD_INT 3
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 3
30233: NEG
30234: PUSH
30235: LD_INT 2
30237: NEG
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 3
30245: NEG
30246: PUSH
30247: LD_INT 3
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30260: LD_ADDR_VAR 0 17
30264: PUSH
30265: LD_INT 1
30267: NEG
30268: PUSH
30269: LD_INT 3
30271: NEG
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: LD_INT 3
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 1
30290: PUSH
30291: LD_INT 2
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: LIST
30303: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30304: LD_ADDR_VAR 0 18
30308: PUSH
30309: LD_INT 2
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 3
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 3
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30345: LD_ADDR_VAR 0 19
30349: PUSH
30350: LD_INT 3
30352: PUSH
30353: LD_INT 2
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 3
30362: PUSH
30363: LD_INT 3
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: LD_INT 3
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30385: LD_ADDR_VAR 0 20
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: LD_INT 3
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 0
30402: PUSH
30403: LD_INT 3
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: LIST
30425: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30426: LD_ADDR_VAR 0 21
30430: PUSH
30431: LD_INT 2
30433: NEG
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 3
30444: NEG
30445: PUSH
30446: LD_INT 0
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 3
30455: NEG
30456: PUSH
30457: LD_INT 1
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: LIST
30469: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30470: LD_ADDR_VAR 0 22
30474: PUSH
30475: LD_INT 2
30477: NEG
30478: PUSH
30479: LD_INT 3
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 3
30489: NEG
30490: PUSH
30491: LD_INT 2
30493: NEG
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 3
30501: NEG
30502: PUSH
30503: LD_INT 3
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: LIST
30515: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30516: LD_ADDR_VAR 0 23
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 3
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: LD_INT 4
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: LD_INT 3
30549: NEG
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: LIST
30559: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30560: LD_ADDR_VAR 0 24
30564: PUSH
30565: LD_INT 3
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: LD_INT 1
30580: NEG
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 4
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30601: LD_ADDR_VAR 0 25
30605: PUSH
30606: LD_INT 3
30608: PUSH
30609: LD_INT 3
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 4
30618: PUSH
30619: LD_INT 3
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 3
30628: PUSH
30629: LD_INT 4
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30641: LD_ADDR_VAR 0 26
30645: PUSH
30646: LD_INT 0
30648: PUSH
30649: LD_INT 3
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 1
30658: PUSH
30659: LD_INT 4
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 1
30668: NEG
30669: PUSH
30670: LD_INT 3
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30682: LD_ADDR_VAR 0 27
30686: PUSH
30687: LD_INT 3
30689: NEG
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 3
30700: NEG
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: LD_INT 4
30711: NEG
30712: PUSH
30713: LD_INT 1
30715: NEG
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: LIST
30725: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30726: LD_ADDR_VAR 0 28
30730: PUSH
30731: LD_INT 3
30733: NEG
30734: PUSH
30735: LD_INT 3
30737: NEG
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 3
30745: NEG
30746: PUSH
30747: LD_INT 4
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 4
30757: NEG
30758: PUSH
30759: LD_INT 3
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: LIST
30771: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30772: LD_ADDR_VAR 0 29
30776: PUSH
30777: LD_INT 1
30779: NEG
30780: PUSH
30781: LD_INT 3
30783: NEG
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 0
30791: PUSH
30792: LD_INT 3
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: PUSH
30803: LD_INT 2
30805: NEG
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: PUSH
30815: LD_INT 4
30817: NEG
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: LD_INT 4
30828: NEG
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: LD_INT 3
30839: NEG
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: LD_INT 5
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 0
30859: PUSH
30860: LD_INT 5
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 1
30870: PUSH
30871: LD_INT 4
30873: NEG
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: LD_INT 6
30885: NEG
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 0
30893: PUSH
30894: LD_INT 6
30896: NEG
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 1
30904: PUSH
30905: LD_INT 5
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30927: LD_ADDR_VAR 0 30
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: LD_INT 1
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 3
30945: PUSH
30946: LD_INT 0
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 3
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 3
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 4
30976: PUSH
30977: LD_INT 0
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 4
30986: PUSH
30987: LD_INT 1
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 4
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 5
31007: PUSH
31008: LD_INT 0
31010: PUSH
31011: EMPTY
31012: LIST
31013: LIST
31014: PUSH
31015: LD_INT 5
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 5
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 6
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 6
31048: PUSH
31049: LD_INT 1
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31070: LD_ADDR_VAR 0 31
31074: PUSH
31075: LD_INT 3
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 3
31087: PUSH
31088: LD_INT 3
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: LD_INT 3
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 4
31107: PUSH
31108: LD_INT 3
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 4
31117: PUSH
31118: LD_INT 4
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 3
31127: PUSH
31128: LD_INT 4
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 5
31137: PUSH
31138: LD_INT 4
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 5
31147: PUSH
31148: LD_INT 5
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 4
31157: PUSH
31158: LD_INT 5
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 6
31167: PUSH
31168: LD_INT 5
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 6
31177: PUSH
31178: LD_INT 6
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 5
31187: PUSH
31188: LD_INT 6
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31209: LD_ADDR_VAR 0 32
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: LD_INT 3
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 0
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: LD_INT 4
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 0
31257: PUSH
31258: LD_INT 4
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 1
31267: NEG
31268: PUSH
31269: LD_INT 3
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: PUSH
31279: LD_INT 5
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 0
31288: PUSH
31289: LD_INT 5
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: LD_INT 4
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: LD_INT 6
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 0
31319: PUSH
31320: LD_INT 6
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: LD_INT 5
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31352: LD_ADDR_VAR 0 33
31356: PUSH
31357: LD_INT 2
31359: NEG
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: LD_INT 3
31370: NEG
31371: PUSH
31372: LD_INT 0
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 3
31381: NEG
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 3
31393: NEG
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 4
31404: NEG
31405: PUSH
31406: LD_INT 0
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 4
31415: NEG
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 4
31427: NEG
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 5
31438: NEG
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 5
31449: NEG
31450: PUSH
31451: LD_INT 1
31453: NEG
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 5
31461: NEG
31462: PUSH
31463: LD_INT 1
31465: PUSH
31466: EMPTY
31467: LIST
31468: LIST
31469: PUSH
31470: LD_INT 6
31472: NEG
31473: PUSH
31474: LD_INT 0
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 6
31483: NEG
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31507: LD_ADDR_VAR 0 34
31511: PUSH
31512: LD_INT 2
31514: NEG
31515: PUSH
31516: LD_INT 3
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 3
31526: NEG
31527: PUSH
31528: LD_INT 2
31530: NEG
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 3
31538: NEG
31539: PUSH
31540: LD_INT 3
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 3
31550: NEG
31551: PUSH
31552: LD_INT 4
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 4
31562: NEG
31563: PUSH
31564: LD_INT 3
31566: NEG
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 4
31574: NEG
31575: PUSH
31576: LD_INT 4
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 4
31586: NEG
31587: PUSH
31588: LD_INT 5
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 5
31598: NEG
31599: PUSH
31600: LD_INT 4
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 5
31610: NEG
31611: PUSH
31612: LD_INT 5
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 5
31622: NEG
31623: PUSH
31624: LD_INT 6
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 6
31634: NEG
31635: PUSH
31636: LD_INT 5
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 6
31646: NEG
31647: PUSH
31648: LD_INT 6
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31670: LD_ADDR_VAR 0 41
31674: PUSH
31675: LD_INT 0
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: LD_INT 3
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: PUSH
31701: LD_INT 2
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: EMPTY
31710: LIST
31711: LIST
31712: LIST
31713: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31714: LD_ADDR_VAR 0 42
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: LD_INT 0
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: PUSH
31732: LD_INT 1
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 3
31742: PUSH
31743: LD_INT 1
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: LIST
31754: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31755: LD_ADDR_VAR 0 43
31759: PUSH
31760: LD_INT 2
31762: PUSH
31763: LD_INT 2
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 3
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 2
31782: PUSH
31783: LD_INT 3
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: LIST
31794: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31795: LD_ADDR_VAR 0 44
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: LD_INT 2
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 3
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31836: LD_ADDR_VAR 0 45
31840: PUSH
31841: LD_INT 2
31843: NEG
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 2
31854: NEG
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 3
31865: NEG
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: LIST
31879: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31880: LD_ADDR_VAR 0 46
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: LD_INT 3
31903: NEG
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 3
31911: NEG
31912: PUSH
31913: LD_INT 2
31915: NEG
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: LIST
31925: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31926: LD_ADDR_VAR 0 47
31930: PUSH
31931: LD_INT 2
31933: NEG
31934: PUSH
31935: LD_INT 3
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: LD_INT 3
31949: NEG
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31959: LD_ADDR_VAR 0 48
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 2
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31990: LD_ADDR_VAR 0 49
31994: PUSH
31995: LD_INT 3
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 3
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32019: LD_ADDR_VAR 0 50
32023: PUSH
32024: LD_INT 2
32026: PUSH
32027: LD_INT 3
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 1
32036: PUSH
32037: LD_INT 3
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32048: LD_ADDR_VAR 0 51
32052: PUSH
32053: LD_INT 1
32055: NEG
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: LD_INT 1
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32079: LD_ADDR_VAR 0 52
32083: PUSH
32084: LD_INT 3
32086: NEG
32087: PUSH
32088: LD_INT 1
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 3
32098: NEG
32099: PUSH
32100: LD_INT 2
32102: NEG
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32112: LD_ADDR_VAR 0 53
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: LD_INT 3
32123: NEG
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 0
32131: PUSH
32132: LD_INT 3
32134: NEG
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 1
32142: PUSH
32143: LD_INT 2
32145: NEG
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: LIST
32155: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32156: LD_ADDR_VAR 0 54
32160: PUSH
32161: LD_INT 2
32163: PUSH
32164: LD_INT 1
32166: NEG
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 3
32174: PUSH
32175: LD_INT 0
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: PUSH
32182: LD_INT 3
32184: PUSH
32185: LD_INT 1
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: LIST
32196: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32197: LD_ADDR_VAR 0 55
32201: PUSH
32202: LD_INT 3
32204: PUSH
32205: LD_INT 2
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 3
32214: PUSH
32215: LD_INT 3
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 2
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: LIST
32236: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32237: LD_ADDR_VAR 0 56
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: LD_INT 3
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: LD_INT 3
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: NEG
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: LIST
32277: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32278: LD_ADDR_VAR 0 57
32282: PUSH
32283: LD_INT 2
32285: NEG
32286: PUSH
32287: LD_INT 1
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 3
32296: NEG
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 3
32307: NEG
32308: PUSH
32309: LD_INT 1
32311: NEG
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: LIST
32321: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32322: LD_ADDR_VAR 0 58
32326: PUSH
32327: LD_INT 2
32329: NEG
32330: PUSH
32331: LD_INT 3
32333: NEG
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 3
32341: NEG
32342: PUSH
32343: LD_INT 2
32345: NEG
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 3
32353: NEG
32354: PUSH
32355: LD_INT 3
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: EMPTY
32364: LIST
32365: LIST
32366: LIST
32367: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32368: LD_ADDR_VAR 0 59
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32412: LD_ADDR_VAR 0 60
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 2
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: LIST
32452: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32453: LD_ADDR_VAR 0 61
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: LD_INT 2
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 2
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: LIST
32492: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32493: LD_ADDR_VAR 0 62
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: LD_INT 2
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: LIST
32533: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32534: LD_ADDR_VAR 0 63
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 2
32552: NEG
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: NEG
32564: PUSH
32565: LD_INT 1
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32578: LD_ADDR_VAR 0 64
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: LD_INT 2
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: NEG
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 2
32609: NEG
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: LIST
32623: ST_TO_ADDR
// end ; 2 :
32624: GO 35890
32626: LD_INT 2
32628: DOUBLE
32629: EQUAL
32630: IFTRUE 32634
32632: GO 35889
32634: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32635: LD_ADDR_VAR 0 29
32639: PUSH
32640: LD_INT 4
32642: PUSH
32643: LD_INT 0
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 4
32652: PUSH
32653: LD_INT 1
32655: NEG
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 5
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 5
32673: PUSH
32674: LD_INT 1
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 4
32683: PUSH
32684: LD_INT 1
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 3
32693: PUSH
32694: LD_INT 0
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 3
32703: PUSH
32704: LD_INT 1
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 3
32714: PUSH
32715: LD_INT 2
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 5
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 3
32735: PUSH
32736: LD_INT 3
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 3
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 4
32755: PUSH
32756: LD_INT 3
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 4
32765: PUSH
32766: LD_INT 4
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 3
32775: PUSH
32776: LD_INT 4
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: PUSH
32786: LD_INT 3
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 2
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 4
32805: PUSH
32806: LD_INT 2
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: PUSH
32816: LD_INT 4
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: LD_INT 4
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: LD_INT 3
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: LD_INT 4
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: LD_INT 5
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: LD_INT 5
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 1
32875: NEG
32876: PUSH
32877: LD_INT 4
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 1
32886: NEG
32887: PUSH
32888: LD_INT 3
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 2
32897: PUSH
32898: LD_INT 5
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 2
32907: NEG
32908: PUSH
32909: LD_INT 3
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 3
32918: NEG
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 3
32929: NEG
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: NEG
32942: PUSH
32943: LD_INT 0
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: NEG
32953: PUSH
32954: LD_INT 1
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 3
32963: NEG
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 4
32974: NEG
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: LD_INT 4
32985: NEG
32986: PUSH
32987: LD_INT 1
32989: NEG
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 4
32997: NEG
32998: PUSH
32999: LD_INT 2
33001: NEG
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 2
33009: NEG
33010: PUSH
33011: LD_INT 2
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 4
33020: NEG
33021: PUSH
33022: LD_INT 4
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 4
33032: NEG
33033: PUSH
33034: LD_INT 5
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 3
33044: NEG
33045: PUSH
33046: LD_INT 4
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 3
33056: NEG
33057: PUSH
33058: LD_INT 3
33060: NEG
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 4
33068: NEG
33069: PUSH
33070: LD_INT 3
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 5
33080: NEG
33081: PUSH
33082: LD_INT 4
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 5
33092: NEG
33093: PUSH
33094: LD_INT 5
33096: NEG
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 3
33104: NEG
33105: PUSH
33106: LD_INT 5
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 5
33116: NEG
33117: PUSH
33118: LD_INT 3
33120: NEG
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33173: LD_ADDR_VAR 0 30
33177: PUSH
33178: LD_INT 4
33180: PUSH
33181: LD_INT 4
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 4
33190: PUSH
33191: LD_INT 3
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 5
33200: PUSH
33201: LD_INT 4
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 5
33210: PUSH
33211: LD_INT 5
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: PUSH
33218: LD_INT 4
33220: PUSH
33221: LD_INT 5
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 3
33230: PUSH
33231: LD_INT 4
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 3
33240: PUSH
33241: LD_INT 3
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 5
33250: PUSH
33251: LD_INT 3
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 3
33260: PUSH
33261: LD_INT 5
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: LD_INT 3
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: LD_INT 2
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 1
33290: PUSH
33291: LD_INT 3
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: LD_INT 4
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: LD_INT 4
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 1
33320: NEG
33321: PUSH
33322: LD_INT 3
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: LD_INT 2
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 2
33342: PUSH
33343: LD_INT 4
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 2
33352: NEG
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 4
33363: NEG
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 4
33374: NEG
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 3
33386: NEG
33387: PUSH
33388: LD_INT 0
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 3
33397: NEG
33398: PUSH
33399: LD_INT 1
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 4
33408: NEG
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 5
33419: NEG
33420: PUSH
33421: LD_INT 0
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 5
33430: NEG
33431: PUSH
33432: LD_INT 1
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 5
33442: NEG
33443: PUSH
33444: LD_INT 2
33446: NEG
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 3
33454: NEG
33455: PUSH
33456: LD_INT 2
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 3
33465: NEG
33466: PUSH
33467: LD_INT 3
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 3
33477: NEG
33478: PUSH
33479: LD_INT 4
33481: NEG
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: NEG
33490: PUSH
33491: LD_INT 3
33493: NEG
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 2
33501: NEG
33502: PUSH
33503: LD_INT 2
33505: NEG
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 3
33513: NEG
33514: PUSH
33515: LD_INT 2
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 4
33525: NEG
33526: PUSH
33527: LD_INT 3
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 4
33537: NEG
33538: PUSH
33539: LD_INT 4
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 2
33549: NEG
33550: PUSH
33551: LD_INT 4
33553: NEG
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 4
33561: NEG
33562: PUSH
33563: LD_INT 2
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: LD_INT 4
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: LD_INT 5
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: LD_INT 4
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: LD_INT 3
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: LD_INT 3
33620: NEG
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: LD_INT 4
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 1
33640: NEG
33641: PUSH
33642: LD_INT 5
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: LD_INT 3
33655: NEG
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 2
33663: NEG
33664: PUSH
33665: LD_INT 5
33667: NEG
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33720: LD_ADDR_VAR 0 31
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: LD_INT 4
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 0
33737: PUSH
33738: LD_INT 3
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: LD_INT 4
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: LD_INT 5
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: LD_INT 5
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: NEG
33778: PUSH
33779: LD_INT 4
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: LD_INT 3
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 2
33799: PUSH
33800: LD_INT 5
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: NEG
33810: PUSH
33811: LD_INT 3
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 3
33820: NEG
33821: PUSH
33822: LD_INT 0
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 3
33831: NEG
33832: PUSH
33833: LD_INT 1
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 2
33843: NEG
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 2
33854: NEG
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 3
33865: NEG
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 4
33876: NEG
33877: PUSH
33878: LD_INT 0
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 4
33887: NEG
33888: PUSH
33889: LD_INT 1
33891: NEG
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 4
33899: NEG
33900: PUSH
33901: LD_INT 2
33903: NEG
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 2
33911: NEG
33912: PUSH
33913: LD_INT 2
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 4
33922: NEG
33923: PUSH
33924: LD_INT 4
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 4
33934: NEG
33935: PUSH
33936: LD_INT 5
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 3
33946: NEG
33947: PUSH
33948: LD_INT 4
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 3
33958: NEG
33959: PUSH
33960: LD_INT 3
33962: NEG
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 4
33970: NEG
33971: PUSH
33972: LD_INT 3
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 5
33982: NEG
33983: PUSH
33984: LD_INT 4
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 5
33994: NEG
33995: PUSH
33996: LD_INT 5
33998: NEG
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 3
34006: NEG
34007: PUSH
34008: LD_INT 5
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 5
34018: NEG
34019: PUSH
34020: LD_INT 3
34022: NEG
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: LD_INT 3
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: LD_INT 4
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 3
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: PUSH
34064: LD_INT 2
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 0
34074: PUSH
34075: LD_INT 2
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: NEG
34086: PUSH
34087: LD_INT 3
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 1
34097: NEG
34098: PUSH
34099: LD_INT 4
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 2
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 2
34120: NEG
34121: PUSH
34122: LD_INT 4
34124: NEG
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 4
34132: PUSH
34133: LD_INT 0
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 4
34142: PUSH
34143: LD_INT 1
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 5
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 5
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 4
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 3
34183: PUSH
34184: LD_INT 0
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 3
34193: PUSH
34194: LD_INT 1
34196: NEG
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 3
34204: PUSH
34205: LD_INT 2
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 5
34215: PUSH
34216: LD_INT 2
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34270: LD_ADDR_VAR 0 32
34274: PUSH
34275: LD_INT 4
34277: NEG
34278: PUSH
34279: LD_INT 0
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 4
34288: NEG
34289: PUSH
34290: LD_INT 1
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 3
34300: NEG
34301: PUSH
34302: LD_INT 0
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 3
34311: NEG
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 4
34322: NEG
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 5
34333: NEG
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 5
34344: NEG
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 5
34356: NEG
34357: PUSH
34358: LD_INT 2
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 3
34368: NEG
34369: PUSH
34370: LD_INT 2
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 3
34379: NEG
34380: PUSH
34381: LD_INT 3
34383: NEG
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 3
34391: NEG
34392: PUSH
34393: LD_INT 4
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: LD_INT 3
34407: NEG
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 3
34427: NEG
34428: PUSH
34429: LD_INT 2
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 4
34439: NEG
34440: PUSH
34441: LD_INT 3
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 4
34451: NEG
34452: PUSH
34453: LD_INT 4
34455: NEG
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 2
34463: NEG
34464: PUSH
34465: LD_INT 4
34467: NEG
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 4
34475: NEG
34476: PUSH
34477: LD_INT 2
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: LD_INT 4
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: LD_INT 5
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: LD_INT 4
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 3
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 0
34531: PUSH
34532: LD_INT 3
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: LD_INT 4
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: LD_INT 5
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: LD_INT 3
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 2
34577: NEG
34578: PUSH
34579: LD_INT 5
34581: NEG
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 3
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 4
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 4
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 3
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 2
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: PUSH
34651: LD_INT 1
34653: NEG
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 2
34661: PUSH
34662: LD_INT 2
34664: NEG
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 4
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 4
34682: PUSH
34683: LD_INT 4
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 4
34692: PUSH
34693: LD_INT 3
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 5
34702: PUSH
34703: LD_INT 4
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 5
34712: PUSH
34713: LD_INT 5
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 4
34722: PUSH
34723: LD_INT 5
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 3
34732: PUSH
34733: LD_INT 4
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: LD_INT 3
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 5
34752: PUSH
34753: LD_INT 3
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 3
34762: PUSH
34763: LD_INT 5
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34817: LD_ADDR_VAR 0 33
34821: PUSH
34822: LD_INT 4
34824: NEG
34825: PUSH
34826: LD_INT 4
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 4
34836: NEG
34837: PUSH
34838: LD_INT 5
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 3
34848: NEG
34849: PUSH
34850: LD_INT 4
34852: NEG
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: PUSH
34858: LD_INT 3
34860: NEG
34861: PUSH
34862: LD_INT 3
34864: NEG
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: PUSH
34870: LD_INT 4
34872: NEG
34873: PUSH
34874: LD_INT 3
34876: NEG
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 5
34884: NEG
34885: PUSH
34886: LD_INT 4
34888: NEG
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 5
34896: NEG
34897: PUSH
34898: LD_INT 5
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 3
34908: NEG
34909: PUSH
34910: LD_INT 5
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 5
34920: NEG
34921: PUSH
34922: LD_INT 3
34924: NEG
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: LD_INT 3
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 0
34943: PUSH
34944: LD_INT 4
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 1
34954: PUSH
34955: LD_INT 3
34957: NEG
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: LD_INT 2
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 2
34979: NEG
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 1
34987: NEG
34988: PUSH
34989: LD_INT 3
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: LD_INT 4
35003: NEG
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: LD_INT 2
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: NEG
35023: PUSH
35024: LD_INT 4
35026: NEG
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 4
35034: PUSH
35035: LD_INT 0
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 4
35044: PUSH
35045: LD_INT 1
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 5
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 5
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 4
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 3
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 3
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 5
35117: PUSH
35118: LD_INT 2
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 3
35127: PUSH
35128: LD_INT 3
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 3
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 4
35147: PUSH
35148: LD_INT 3
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 4
35157: PUSH
35158: LD_INT 4
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 3
35167: PUSH
35168: LD_INT 4
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 2
35177: PUSH
35178: LD_INT 3
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: PUSH
35185: LD_INT 2
35187: PUSH
35188: LD_INT 2
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 4
35197: PUSH
35198: LD_INT 2
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 2
35207: PUSH
35208: LD_INT 4
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: LD_INT 4
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: LD_INT 3
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: LD_INT 4
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: LD_INT 5
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: LD_INT 5
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 1
35267: NEG
35268: PUSH
35269: LD_INT 4
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: NEG
35279: PUSH
35280: LD_INT 3
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: LD_INT 5
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 2
35299: NEG
35300: PUSH
35301: LD_INT 3
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35355: LD_ADDR_VAR 0 34
35359: PUSH
35360: LD_INT 0
35362: PUSH
35363: LD_INT 4
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: LD_INT 5
35376: NEG
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 4
35387: NEG
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: LD_INT 3
35398: NEG
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: LD_INT 3
35409: NEG
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: LD_INT 4
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 1
35429: NEG
35430: PUSH
35431: LD_INT 5
35433: NEG
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 2
35441: PUSH
35442: LD_INT 3
35444: NEG
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 2
35452: NEG
35453: PUSH
35454: LD_INT 5
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 3
35464: PUSH
35465: LD_INT 0
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 3
35474: PUSH
35475: LD_INT 1
35477: NEG
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: PUSH
35483: LD_INT 4
35485: PUSH
35486: LD_INT 0
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 4
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 3
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 2
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 2
35536: PUSH
35537: LD_INT 2
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 4
35547: PUSH
35548: LD_INT 2
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 4
35557: PUSH
35558: LD_INT 4
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 4
35567: PUSH
35568: LD_INT 3
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 5
35577: PUSH
35578: LD_INT 4
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 5
35587: PUSH
35588: LD_INT 5
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 4
35597: PUSH
35598: LD_INT 5
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 3
35607: PUSH
35608: LD_INT 4
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 3
35617: PUSH
35618: LD_INT 3
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 5
35627: PUSH
35628: LD_INT 3
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 3
35637: PUSH
35638: LD_INT 5
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 3
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: LD_INT 2
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: LD_INT 3
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: LD_INT 4
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: LD_INT 4
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 1
35697: NEG
35698: PUSH
35699: LD_INT 3
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 1
35708: NEG
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: LD_INT 4
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 2
35729: NEG
35730: PUSH
35731: LD_INT 2
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 4
35740: NEG
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 4
35751: NEG
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 3
35763: NEG
35764: PUSH
35765: LD_INT 0
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: LD_INT 3
35774: NEG
35775: PUSH
35776: LD_INT 1
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 4
35785: NEG
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 5
35796: NEG
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 5
35807: NEG
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 5
35819: NEG
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 3
35831: NEG
35832: PUSH
35833: LD_INT 2
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: ST_TO_ADDR
// end ; end ;
35887: GO 35890
35889: POP
// case btype of b_depot , b_warehouse :
35890: LD_VAR 0 1
35894: PUSH
35895: LD_INT 0
35897: DOUBLE
35898: EQUAL
35899: IFTRUE 35909
35901: LD_INT 1
35903: DOUBLE
35904: EQUAL
35905: IFTRUE 35909
35907: GO 36110
35909: POP
// case nation of nation_american :
35910: LD_VAR 0 5
35914: PUSH
35915: LD_INT 1
35917: DOUBLE
35918: EQUAL
35919: IFTRUE 35923
35921: GO 35979
35923: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35924: LD_ADDR_VAR 0 9
35928: PUSH
35929: LD_VAR 0 11
35933: PUSH
35934: LD_VAR 0 12
35938: PUSH
35939: LD_VAR 0 13
35943: PUSH
35944: LD_VAR 0 14
35948: PUSH
35949: LD_VAR 0 15
35953: PUSH
35954: LD_VAR 0 16
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: PUSH
35967: LD_VAR 0 4
35971: PUSH
35972: LD_INT 1
35974: PLUS
35975: ARRAY
35976: ST_TO_ADDR
35977: GO 36108
35979: LD_INT 2
35981: DOUBLE
35982: EQUAL
35983: IFTRUE 35987
35985: GO 36043
35987: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35988: LD_ADDR_VAR 0 9
35992: PUSH
35993: LD_VAR 0 17
35997: PUSH
35998: LD_VAR 0 18
36002: PUSH
36003: LD_VAR 0 19
36007: PUSH
36008: LD_VAR 0 20
36012: PUSH
36013: LD_VAR 0 21
36017: PUSH
36018: LD_VAR 0 22
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: PUSH
36031: LD_VAR 0 4
36035: PUSH
36036: LD_INT 1
36038: PLUS
36039: ARRAY
36040: ST_TO_ADDR
36041: GO 36108
36043: LD_INT 3
36045: DOUBLE
36046: EQUAL
36047: IFTRUE 36051
36049: GO 36107
36051: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36052: LD_ADDR_VAR 0 9
36056: PUSH
36057: LD_VAR 0 23
36061: PUSH
36062: LD_VAR 0 24
36066: PUSH
36067: LD_VAR 0 25
36071: PUSH
36072: LD_VAR 0 26
36076: PUSH
36077: LD_VAR 0 27
36081: PUSH
36082: LD_VAR 0 28
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: PUSH
36095: LD_VAR 0 4
36099: PUSH
36100: LD_INT 1
36102: PLUS
36103: ARRAY
36104: ST_TO_ADDR
36105: GO 36108
36107: POP
36108: GO 36663
36110: LD_INT 2
36112: DOUBLE
36113: EQUAL
36114: IFTRUE 36124
36116: LD_INT 3
36118: DOUBLE
36119: EQUAL
36120: IFTRUE 36124
36122: GO 36180
36124: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36125: LD_ADDR_VAR 0 9
36129: PUSH
36130: LD_VAR 0 29
36134: PUSH
36135: LD_VAR 0 30
36139: PUSH
36140: LD_VAR 0 31
36144: PUSH
36145: LD_VAR 0 32
36149: PUSH
36150: LD_VAR 0 33
36154: PUSH
36155: LD_VAR 0 34
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: PUSH
36168: LD_VAR 0 4
36172: PUSH
36173: LD_INT 1
36175: PLUS
36176: ARRAY
36177: ST_TO_ADDR
36178: GO 36663
36180: LD_INT 16
36182: DOUBLE
36183: EQUAL
36184: IFTRUE 36242
36186: LD_INT 17
36188: DOUBLE
36189: EQUAL
36190: IFTRUE 36242
36192: LD_INT 18
36194: DOUBLE
36195: EQUAL
36196: IFTRUE 36242
36198: LD_INT 19
36200: DOUBLE
36201: EQUAL
36202: IFTRUE 36242
36204: LD_INT 22
36206: DOUBLE
36207: EQUAL
36208: IFTRUE 36242
36210: LD_INT 20
36212: DOUBLE
36213: EQUAL
36214: IFTRUE 36242
36216: LD_INT 21
36218: DOUBLE
36219: EQUAL
36220: IFTRUE 36242
36222: LD_INT 23
36224: DOUBLE
36225: EQUAL
36226: IFTRUE 36242
36228: LD_INT 24
36230: DOUBLE
36231: EQUAL
36232: IFTRUE 36242
36234: LD_INT 25
36236: DOUBLE
36237: EQUAL
36238: IFTRUE 36242
36240: GO 36298
36242: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36243: LD_ADDR_VAR 0 9
36247: PUSH
36248: LD_VAR 0 35
36252: PUSH
36253: LD_VAR 0 36
36257: PUSH
36258: LD_VAR 0 37
36262: PUSH
36263: LD_VAR 0 38
36267: PUSH
36268: LD_VAR 0 39
36272: PUSH
36273: LD_VAR 0 40
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: PUSH
36286: LD_VAR 0 4
36290: PUSH
36291: LD_INT 1
36293: PLUS
36294: ARRAY
36295: ST_TO_ADDR
36296: GO 36663
36298: LD_INT 6
36300: DOUBLE
36301: EQUAL
36302: IFTRUE 36354
36304: LD_INT 7
36306: DOUBLE
36307: EQUAL
36308: IFTRUE 36354
36310: LD_INT 8
36312: DOUBLE
36313: EQUAL
36314: IFTRUE 36354
36316: LD_INT 13
36318: DOUBLE
36319: EQUAL
36320: IFTRUE 36354
36322: LD_INT 12
36324: DOUBLE
36325: EQUAL
36326: IFTRUE 36354
36328: LD_INT 15
36330: DOUBLE
36331: EQUAL
36332: IFTRUE 36354
36334: LD_INT 11
36336: DOUBLE
36337: EQUAL
36338: IFTRUE 36354
36340: LD_INT 14
36342: DOUBLE
36343: EQUAL
36344: IFTRUE 36354
36346: LD_INT 10
36348: DOUBLE
36349: EQUAL
36350: IFTRUE 36354
36352: GO 36410
36354: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36355: LD_ADDR_VAR 0 9
36359: PUSH
36360: LD_VAR 0 41
36364: PUSH
36365: LD_VAR 0 42
36369: PUSH
36370: LD_VAR 0 43
36374: PUSH
36375: LD_VAR 0 44
36379: PUSH
36380: LD_VAR 0 45
36384: PUSH
36385: LD_VAR 0 46
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: PUSH
36398: LD_VAR 0 4
36402: PUSH
36403: LD_INT 1
36405: PLUS
36406: ARRAY
36407: ST_TO_ADDR
36408: GO 36663
36410: LD_INT 36
36412: DOUBLE
36413: EQUAL
36414: IFTRUE 36418
36416: GO 36474
36418: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36419: LD_ADDR_VAR 0 9
36423: PUSH
36424: LD_VAR 0 47
36428: PUSH
36429: LD_VAR 0 48
36433: PUSH
36434: LD_VAR 0 49
36438: PUSH
36439: LD_VAR 0 50
36443: PUSH
36444: LD_VAR 0 51
36448: PUSH
36449: LD_VAR 0 52
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: PUSH
36462: LD_VAR 0 4
36466: PUSH
36467: LD_INT 1
36469: PLUS
36470: ARRAY
36471: ST_TO_ADDR
36472: GO 36663
36474: LD_INT 4
36476: DOUBLE
36477: EQUAL
36478: IFTRUE 36500
36480: LD_INT 5
36482: DOUBLE
36483: EQUAL
36484: IFTRUE 36500
36486: LD_INT 34
36488: DOUBLE
36489: EQUAL
36490: IFTRUE 36500
36492: LD_INT 37
36494: DOUBLE
36495: EQUAL
36496: IFTRUE 36500
36498: GO 36556
36500: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36501: LD_ADDR_VAR 0 9
36505: PUSH
36506: LD_VAR 0 53
36510: PUSH
36511: LD_VAR 0 54
36515: PUSH
36516: LD_VAR 0 55
36520: PUSH
36521: LD_VAR 0 56
36525: PUSH
36526: LD_VAR 0 57
36530: PUSH
36531: LD_VAR 0 58
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: PUSH
36544: LD_VAR 0 4
36548: PUSH
36549: LD_INT 1
36551: PLUS
36552: ARRAY
36553: ST_TO_ADDR
36554: GO 36663
36556: LD_INT 31
36558: DOUBLE
36559: EQUAL
36560: IFTRUE 36606
36562: LD_INT 32
36564: DOUBLE
36565: EQUAL
36566: IFTRUE 36606
36568: LD_INT 33
36570: DOUBLE
36571: EQUAL
36572: IFTRUE 36606
36574: LD_INT 27
36576: DOUBLE
36577: EQUAL
36578: IFTRUE 36606
36580: LD_INT 26
36582: DOUBLE
36583: EQUAL
36584: IFTRUE 36606
36586: LD_INT 28
36588: DOUBLE
36589: EQUAL
36590: IFTRUE 36606
36592: LD_INT 29
36594: DOUBLE
36595: EQUAL
36596: IFTRUE 36606
36598: LD_INT 30
36600: DOUBLE
36601: EQUAL
36602: IFTRUE 36606
36604: GO 36662
36606: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36607: LD_ADDR_VAR 0 9
36611: PUSH
36612: LD_VAR 0 59
36616: PUSH
36617: LD_VAR 0 60
36621: PUSH
36622: LD_VAR 0 61
36626: PUSH
36627: LD_VAR 0 62
36631: PUSH
36632: LD_VAR 0 63
36636: PUSH
36637: LD_VAR 0 64
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: PUSH
36650: LD_VAR 0 4
36654: PUSH
36655: LD_INT 1
36657: PLUS
36658: ARRAY
36659: ST_TO_ADDR
36660: GO 36663
36662: POP
// temp_list2 = [ ] ;
36663: LD_ADDR_VAR 0 10
36667: PUSH
36668: EMPTY
36669: ST_TO_ADDR
// for i in temp_list do
36670: LD_ADDR_VAR 0 8
36674: PUSH
36675: LD_VAR 0 9
36679: PUSH
36680: FOR_IN
36681: IFFALSE 36733
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36683: LD_ADDR_VAR 0 10
36687: PUSH
36688: LD_VAR 0 10
36692: PUSH
36693: LD_VAR 0 8
36697: PUSH
36698: LD_INT 1
36700: ARRAY
36701: PUSH
36702: LD_VAR 0 2
36706: PLUS
36707: PUSH
36708: LD_VAR 0 8
36712: PUSH
36713: LD_INT 2
36715: ARRAY
36716: PUSH
36717: LD_VAR 0 3
36721: PLUS
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: ADD
36730: ST_TO_ADDR
36731: GO 36680
36733: POP
36734: POP
// result = temp_list2 ;
36735: LD_ADDR_VAR 0 7
36739: PUSH
36740: LD_VAR 0 10
36744: ST_TO_ADDR
// end ;
36745: LD_VAR 0 7
36749: RET
// export function EnemyInRange ( unit , dist ) ; begin
36750: LD_INT 0
36752: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36753: LD_ADDR_VAR 0 3
36757: PUSH
36758: LD_VAR 0 1
36762: PPUSH
36763: CALL_OW 255
36767: PPUSH
36768: LD_VAR 0 1
36772: PPUSH
36773: CALL_OW 250
36777: PPUSH
36778: LD_VAR 0 1
36782: PPUSH
36783: CALL_OW 251
36787: PPUSH
36788: LD_VAR 0 2
36792: PPUSH
36793: CALL 10146 0 4
36797: PUSH
36798: LD_INT 4
36800: ARRAY
36801: ST_TO_ADDR
// end ;
36802: LD_VAR 0 3
36806: RET
// export function PlayerSeeMe ( unit ) ; begin
36807: LD_INT 0
36809: PPUSH
// result := See ( your_side , unit ) ;
36810: LD_ADDR_VAR 0 2
36814: PUSH
36815: LD_OWVAR 2
36819: PPUSH
36820: LD_VAR 0 1
36824: PPUSH
36825: CALL_OW 292
36829: ST_TO_ADDR
// end ;
36830: LD_VAR 0 2
36834: RET
// export function ReverseDir ( unit ) ; begin
36835: LD_INT 0
36837: PPUSH
// if not unit then
36838: LD_VAR 0 1
36842: NOT
36843: IFFALSE 36847
// exit ;
36845: GO 36870
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36847: LD_ADDR_VAR 0 2
36851: PUSH
36852: LD_VAR 0 1
36856: PPUSH
36857: CALL_OW 254
36861: PUSH
36862: LD_INT 3
36864: PLUS
36865: PUSH
36866: LD_INT 6
36868: MOD
36869: ST_TO_ADDR
// end ;
36870: LD_VAR 0 2
36874: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36875: LD_INT 0
36877: PPUSH
36878: PPUSH
36879: PPUSH
36880: PPUSH
36881: PPUSH
// if not hexes then
36882: LD_VAR 0 2
36886: NOT
36887: IFFALSE 36891
// exit ;
36889: GO 37039
// dist := 9999 ;
36891: LD_ADDR_VAR 0 5
36895: PUSH
36896: LD_INT 9999
36898: ST_TO_ADDR
// for i = 1 to hexes do
36899: LD_ADDR_VAR 0 4
36903: PUSH
36904: DOUBLE
36905: LD_INT 1
36907: DEC
36908: ST_TO_ADDR
36909: LD_VAR 0 2
36913: PUSH
36914: FOR_TO
36915: IFFALSE 37027
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36917: LD_VAR 0 1
36921: PPUSH
36922: LD_VAR 0 2
36926: PUSH
36927: LD_VAR 0 4
36931: ARRAY
36932: PUSH
36933: LD_INT 1
36935: ARRAY
36936: PPUSH
36937: LD_VAR 0 2
36941: PUSH
36942: LD_VAR 0 4
36946: ARRAY
36947: PUSH
36948: LD_INT 2
36950: ARRAY
36951: PPUSH
36952: CALL_OW 297
36956: PUSH
36957: LD_VAR 0 5
36961: LESS
36962: IFFALSE 37025
// begin hex := hexes [ i ] ;
36964: LD_ADDR_VAR 0 7
36968: PUSH
36969: LD_VAR 0 2
36973: PUSH
36974: LD_VAR 0 4
36978: ARRAY
36979: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36980: LD_ADDR_VAR 0 5
36984: PUSH
36985: LD_VAR 0 1
36989: PPUSH
36990: LD_VAR 0 2
36994: PUSH
36995: LD_VAR 0 4
36999: ARRAY
37000: PUSH
37001: LD_INT 1
37003: ARRAY
37004: PPUSH
37005: LD_VAR 0 2
37009: PUSH
37010: LD_VAR 0 4
37014: ARRAY
37015: PUSH
37016: LD_INT 2
37018: ARRAY
37019: PPUSH
37020: CALL_OW 297
37024: ST_TO_ADDR
// end ; end ;
37025: GO 36914
37027: POP
37028: POP
// result := hex ;
37029: LD_ADDR_VAR 0 3
37033: PUSH
37034: LD_VAR 0 7
37038: ST_TO_ADDR
// end ;
37039: LD_VAR 0 3
37043: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37044: LD_INT 0
37046: PPUSH
37047: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37048: LD_VAR 0 1
37052: NOT
37053: PUSH
37054: LD_VAR 0 1
37058: PUSH
37059: LD_INT 21
37061: PUSH
37062: LD_INT 2
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 23
37071: PUSH
37072: LD_INT 2
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PPUSH
37083: CALL_OW 69
37087: IN
37088: NOT
37089: OR
37090: IFFALSE 37094
// exit ;
37092: GO 37141
// for i = 1 to 3 do
37094: LD_ADDR_VAR 0 3
37098: PUSH
37099: DOUBLE
37100: LD_INT 1
37102: DEC
37103: ST_TO_ADDR
37104: LD_INT 3
37106: PUSH
37107: FOR_TO
37108: IFFALSE 37139
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37110: LD_VAR 0 1
37114: PPUSH
37115: CALL_OW 250
37119: PPUSH
37120: LD_VAR 0 1
37124: PPUSH
37125: CALL_OW 251
37129: PPUSH
37130: LD_INT 1
37132: PPUSH
37133: CALL_OW 453
37137: GO 37107
37139: POP
37140: POP
// end ;
37141: LD_VAR 0 2
37145: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37146: LD_INT 0
37148: PPUSH
37149: PPUSH
37150: PPUSH
37151: PPUSH
37152: PPUSH
37153: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
37154: LD_VAR 0 1
37158: NOT
37159: PUSH
37160: LD_VAR 0 2
37164: NOT
37165: OR
37166: PUSH
37167: LD_VAR 0 1
37171: PPUSH
37172: CALL_OW 314
37176: OR
37177: IFFALSE 37181
// exit ;
37179: GO 37622
// x := GetX ( enemy_unit ) ;
37181: LD_ADDR_VAR 0 7
37185: PUSH
37186: LD_VAR 0 2
37190: PPUSH
37191: CALL_OW 250
37195: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37196: LD_ADDR_VAR 0 8
37200: PUSH
37201: LD_VAR 0 2
37205: PPUSH
37206: CALL_OW 251
37210: ST_TO_ADDR
// if not x or not y then
37211: LD_VAR 0 7
37215: NOT
37216: PUSH
37217: LD_VAR 0 8
37221: NOT
37222: OR
37223: IFFALSE 37227
// exit ;
37225: GO 37622
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37227: LD_ADDR_VAR 0 6
37231: PUSH
37232: LD_VAR 0 7
37236: PPUSH
37237: LD_INT 0
37239: PPUSH
37240: LD_INT 4
37242: PPUSH
37243: CALL_OW 272
37247: PUSH
37248: LD_VAR 0 8
37252: PPUSH
37253: LD_INT 0
37255: PPUSH
37256: LD_INT 4
37258: PPUSH
37259: CALL_OW 273
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_VAR 0 7
37272: PPUSH
37273: LD_INT 1
37275: PPUSH
37276: LD_INT 4
37278: PPUSH
37279: CALL_OW 272
37283: PUSH
37284: LD_VAR 0 8
37288: PPUSH
37289: LD_INT 1
37291: PPUSH
37292: LD_INT 4
37294: PPUSH
37295: CALL_OW 273
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_VAR 0 7
37308: PPUSH
37309: LD_INT 2
37311: PPUSH
37312: LD_INT 4
37314: PPUSH
37315: CALL_OW 272
37319: PUSH
37320: LD_VAR 0 8
37324: PPUSH
37325: LD_INT 2
37327: PPUSH
37328: LD_INT 4
37330: PPUSH
37331: CALL_OW 273
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_VAR 0 7
37344: PPUSH
37345: LD_INT 3
37347: PPUSH
37348: LD_INT 4
37350: PPUSH
37351: CALL_OW 272
37355: PUSH
37356: LD_VAR 0 8
37360: PPUSH
37361: LD_INT 3
37363: PPUSH
37364: LD_INT 4
37366: PPUSH
37367: CALL_OW 273
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_VAR 0 7
37380: PPUSH
37381: LD_INT 4
37383: PPUSH
37384: LD_INT 4
37386: PPUSH
37387: CALL_OW 272
37391: PUSH
37392: LD_VAR 0 8
37396: PPUSH
37397: LD_INT 4
37399: PPUSH
37400: LD_INT 4
37402: PPUSH
37403: CALL_OW 273
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_VAR 0 7
37416: PPUSH
37417: LD_INT 5
37419: PPUSH
37420: LD_INT 4
37422: PPUSH
37423: CALL_OW 272
37427: PUSH
37428: LD_VAR 0 8
37432: PPUSH
37433: LD_INT 5
37435: PPUSH
37436: LD_INT 4
37438: PPUSH
37439: CALL_OW 273
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: ST_TO_ADDR
// for i = tmp downto 1 do
37456: LD_ADDR_VAR 0 4
37460: PUSH
37461: DOUBLE
37462: LD_VAR 0 6
37466: INC
37467: ST_TO_ADDR
37468: LD_INT 1
37470: PUSH
37471: FOR_DOWNTO
37472: IFFALSE 37573
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37474: LD_VAR 0 6
37478: PUSH
37479: LD_VAR 0 4
37483: ARRAY
37484: PUSH
37485: LD_INT 1
37487: ARRAY
37488: PPUSH
37489: LD_VAR 0 6
37493: PUSH
37494: LD_VAR 0 4
37498: ARRAY
37499: PUSH
37500: LD_INT 2
37502: ARRAY
37503: PPUSH
37504: CALL_OW 488
37508: NOT
37509: PUSH
37510: LD_VAR 0 6
37514: PUSH
37515: LD_VAR 0 4
37519: ARRAY
37520: PUSH
37521: LD_INT 1
37523: ARRAY
37524: PPUSH
37525: LD_VAR 0 6
37529: PUSH
37530: LD_VAR 0 4
37534: ARRAY
37535: PUSH
37536: LD_INT 2
37538: ARRAY
37539: PPUSH
37540: CALL_OW 428
37544: PUSH
37545: LD_INT 0
37547: NONEQUAL
37548: OR
37549: IFFALSE 37571
// tmp := Delete ( tmp , i ) ;
37551: LD_ADDR_VAR 0 6
37555: PUSH
37556: LD_VAR 0 6
37560: PPUSH
37561: LD_VAR 0 4
37565: PPUSH
37566: CALL_OW 3
37570: ST_TO_ADDR
37571: GO 37471
37573: POP
37574: POP
// j := GetClosestHex ( unit , tmp ) ;
37575: LD_ADDR_VAR 0 5
37579: PUSH
37580: LD_VAR 0 1
37584: PPUSH
37585: LD_VAR 0 6
37589: PPUSH
37590: CALL 36875 0 2
37594: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37595: LD_VAR 0 1
37599: PPUSH
37600: LD_VAR 0 5
37604: PUSH
37605: LD_INT 1
37607: ARRAY
37608: PPUSH
37609: LD_VAR 0 5
37613: PUSH
37614: LD_INT 2
37616: ARRAY
37617: PPUSH
37618: CALL_OW 111
// end ;
37622: LD_VAR 0 3
37626: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37627: LD_INT 0
37629: PPUSH
37630: PPUSH
37631: PPUSH
// uc_side = 0 ;
37632: LD_ADDR_OWVAR 20
37636: PUSH
37637: LD_INT 0
37639: ST_TO_ADDR
// uc_nation = 0 ;
37640: LD_ADDR_OWVAR 21
37644: PUSH
37645: LD_INT 0
37647: ST_TO_ADDR
// InitHc_All ( ) ;
37648: CALL_OW 584
// InitVc ;
37652: CALL_OW 20
// if mastodonts then
37656: LD_VAR 0 6
37660: IFFALSE 37727
// for i = 1 to mastodonts do
37662: LD_ADDR_VAR 0 11
37666: PUSH
37667: DOUBLE
37668: LD_INT 1
37670: DEC
37671: ST_TO_ADDR
37672: LD_VAR 0 6
37676: PUSH
37677: FOR_TO
37678: IFFALSE 37725
// begin vc_chassis := 31 ;
37680: LD_ADDR_OWVAR 37
37684: PUSH
37685: LD_INT 31
37687: ST_TO_ADDR
// vc_control := control_rider ;
37688: LD_ADDR_OWVAR 38
37692: PUSH
37693: LD_INT 4
37695: ST_TO_ADDR
// animal := CreateVehicle ;
37696: LD_ADDR_VAR 0 12
37700: PUSH
37701: CALL_OW 45
37705: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37706: LD_VAR 0 12
37710: PPUSH
37711: LD_VAR 0 8
37715: PPUSH
37716: LD_INT 0
37718: PPUSH
37719: CALL 39862 0 3
// end ;
37723: GO 37677
37725: POP
37726: POP
// if horses then
37727: LD_VAR 0 5
37731: IFFALSE 37798
// for i = 1 to horses do
37733: LD_ADDR_VAR 0 11
37737: PUSH
37738: DOUBLE
37739: LD_INT 1
37741: DEC
37742: ST_TO_ADDR
37743: LD_VAR 0 5
37747: PUSH
37748: FOR_TO
37749: IFFALSE 37796
// begin hc_class := 21 ;
37751: LD_ADDR_OWVAR 28
37755: PUSH
37756: LD_INT 21
37758: ST_TO_ADDR
// hc_gallery :=  ;
37759: LD_ADDR_OWVAR 33
37763: PUSH
37764: LD_STRING 
37766: ST_TO_ADDR
// animal := CreateHuman ;
37767: LD_ADDR_VAR 0 12
37771: PUSH
37772: CALL_OW 44
37776: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37777: LD_VAR 0 12
37781: PPUSH
37782: LD_VAR 0 8
37786: PPUSH
37787: LD_INT 0
37789: PPUSH
37790: CALL 39862 0 3
// end ;
37794: GO 37748
37796: POP
37797: POP
// if birds then
37798: LD_VAR 0 1
37802: IFFALSE 37869
// for i = 1 to birds do
37804: LD_ADDR_VAR 0 11
37808: PUSH
37809: DOUBLE
37810: LD_INT 1
37812: DEC
37813: ST_TO_ADDR
37814: LD_VAR 0 1
37818: PUSH
37819: FOR_TO
37820: IFFALSE 37867
// begin hc_class = 18 ;
37822: LD_ADDR_OWVAR 28
37826: PUSH
37827: LD_INT 18
37829: ST_TO_ADDR
// hc_gallery =  ;
37830: LD_ADDR_OWVAR 33
37834: PUSH
37835: LD_STRING 
37837: ST_TO_ADDR
// animal := CreateHuman ;
37838: LD_ADDR_VAR 0 12
37842: PUSH
37843: CALL_OW 44
37847: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37848: LD_VAR 0 12
37852: PPUSH
37853: LD_VAR 0 8
37857: PPUSH
37858: LD_INT 0
37860: PPUSH
37861: CALL 39862 0 3
// end ;
37865: GO 37819
37867: POP
37868: POP
// if tigers then
37869: LD_VAR 0 2
37873: IFFALSE 37957
// for i = 1 to tigers do
37875: LD_ADDR_VAR 0 11
37879: PUSH
37880: DOUBLE
37881: LD_INT 1
37883: DEC
37884: ST_TO_ADDR
37885: LD_VAR 0 2
37889: PUSH
37890: FOR_TO
37891: IFFALSE 37955
// begin hc_class = class_tiger ;
37893: LD_ADDR_OWVAR 28
37897: PUSH
37898: LD_INT 14
37900: ST_TO_ADDR
// hc_gallery =  ;
37901: LD_ADDR_OWVAR 33
37905: PUSH
37906: LD_STRING 
37908: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37909: LD_ADDR_OWVAR 35
37913: PUSH
37914: LD_INT 7
37916: NEG
37917: PPUSH
37918: LD_INT 7
37920: PPUSH
37921: CALL_OW 12
37925: ST_TO_ADDR
// animal := CreateHuman ;
37926: LD_ADDR_VAR 0 12
37930: PUSH
37931: CALL_OW 44
37935: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37936: LD_VAR 0 12
37940: PPUSH
37941: LD_VAR 0 8
37945: PPUSH
37946: LD_INT 0
37948: PPUSH
37949: CALL 39862 0 3
// end ;
37953: GO 37890
37955: POP
37956: POP
// if apemans then
37957: LD_VAR 0 3
37961: IFFALSE 38084
// for i = 1 to apemans do
37963: LD_ADDR_VAR 0 11
37967: PUSH
37968: DOUBLE
37969: LD_INT 1
37971: DEC
37972: ST_TO_ADDR
37973: LD_VAR 0 3
37977: PUSH
37978: FOR_TO
37979: IFFALSE 38082
// begin hc_class = class_apeman ;
37981: LD_ADDR_OWVAR 28
37985: PUSH
37986: LD_INT 12
37988: ST_TO_ADDR
// hc_gallery =  ;
37989: LD_ADDR_OWVAR 33
37993: PUSH
37994: LD_STRING 
37996: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37997: LD_ADDR_OWVAR 35
38001: PUSH
38002: LD_INT 2
38004: NEG
38005: PPUSH
38006: LD_INT 2
38008: PPUSH
38009: CALL_OW 12
38013: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38014: LD_ADDR_OWVAR 31
38018: PUSH
38019: LD_INT 1
38021: PPUSH
38022: LD_INT 3
38024: PPUSH
38025: CALL_OW 12
38029: PUSH
38030: LD_INT 1
38032: PPUSH
38033: LD_INT 3
38035: PPUSH
38036: CALL_OW 12
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: ST_TO_ADDR
// animal := CreateHuman ;
38053: LD_ADDR_VAR 0 12
38057: PUSH
38058: CALL_OW 44
38062: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38063: LD_VAR 0 12
38067: PPUSH
38068: LD_VAR 0 8
38072: PPUSH
38073: LD_INT 0
38075: PPUSH
38076: CALL 39862 0 3
// end ;
38080: GO 37978
38082: POP
38083: POP
// if enchidnas then
38084: LD_VAR 0 4
38088: IFFALSE 38155
// for i = 1 to enchidnas do
38090: LD_ADDR_VAR 0 11
38094: PUSH
38095: DOUBLE
38096: LD_INT 1
38098: DEC
38099: ST_TO_ADDR
38100: LD_VAR 0 4
38104: PUSH
38105: FOR_TO
38106: IFFALSE 38153
// begin hc_class = 13 ;
38108: LD_ADDR_OWVAR 28
38112: PUSH
38113: LD_INT 13
38115: ST_TO_ADDR
// hc_gallery =  ;
38116: LD_ADDR_OWVAR 33
38120: PUSH
38121: LD_STRING 
38123: ST_TO_ADDR
// animal := CreateHuman ;
38124: LD_ADDR_VAR 0 12
38128: PUSH
38129: CALL_OW 44
38133: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38134: LD_VAR 0 12
38138: PPUSH
38139: LD_VAR 0 8
38143: PPUSH
38144: LD_INT 0
38146: PPUSH
38147: CALL 39862 0 3
// end ;
38151: GO 38105
38153: POP
38154: POP
// if fishes then
38155: LD_VAR 0 7
38159: IFFALSE 38226
// for i = 1 to fishes do
38161: LD_ADDR_VAR 0 11
38165: PUSH
38166: DOUBLE
38167: LD_INT 1
38169: DEC
38170: ST_TO_ADDR
38171: LD_VAR 0 7
38175: PUSH
38176: FOR_TO
38177: IFFALSE 38224
// begin hc_class = 20 ;
38179: LD_ADDR_OWVAR 28
38183: PUSH
38184: LD_INT 20
38186: ST_TO_ADDR
// hc_gallery =  ;
38187: LD_ADDR_OWVAR 33
38191: PUSH
38192: LD_STRING 
38194: ST_TO_ADDR
// animal := CreateHuman ;
38195: LD_ADDR_VAR 0 12
38199: PUSH
38200: CALL_OW 44
38204: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38205: LD_VAR 0 12
38209: PPUSH
38210: LD_VAR 0 9
38214: PPUSH
38215: LD_INT 0
38217: PPUSH
38218: CALL 39862 0 3
// end ;
38222: GO 38176
38224: POP
38225: POP
// end ;
38226: LD_VAR 0 10
38230: RET
// export function WantHeal ( sci , unit ) ; begin
38231: LD_INT 0
38233: PPUSH
// if GetTaskList ( sci ) > 0 then
38234: LD_VAR 0 1
38238: PPUSH
38239: CALL_OW 437
38243: PUSH
38244: LD_INT 0
38246: GREATER
38247: IFFALSE 38317
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38249: LD_VAR 0 1
38253: PPUSH
38254: CALL_OW 437
38258: PUSH
38259: LD_INT 1
38261: ARRAY
38262: PUSH
38263: LD_INT 1
38265: ARRAY
38266: PUSH
38267: LD_STRING l
38269: EQUAL
38270: PUSH
38271: LD_VAR 0 1
38275: PPUSH
38276: CALL_OW 437
38280: PUSH
38281: LD_INT 1
38283: ARRAY
38284: PUSH
38285: LD_INT 4
38287: ARRAY
38288: PUSH
38289: LD_VAR 0 2
38293: EQUAL
38294: AND
38295: IFFALSE 38307
// result := true else
38297: LD_ADDR_VAR 0 3
38301: PUSH
38302: LD_INT 1
38304: ST_TO_ADDR
38305: GO 38315
// result := false ;
38307: LD_ADDR_VAR 0 3
38311: PUSH
38312: LD_INT 0
38314: ST_TO_ADDR
// end else
38315: GO 38325
// result := false ;
38317: LD_ADDR_VAR 0 3
38321: PUSH
38322: LD_INT 0
38324: ST_TO_ADDR
// end ;
38325: LD_VAR 0 3
38329: RET
// export function HealTarget ( sci ) ; begin
38330: LD_INT 0
38332: PPUSH
// if not sci then
38333: LD_VAR 0 1
38337: NOT
38338: IFFALSE 38342
// exit ;
38340: GO 38407
// result := 0 ;
38342: LD_ADDR_VAR 0 2
38346: PUSH
38347: LD_INT 0
38349: ST_TO_ADDR
// if GetTaskList ( sci ) then
38350: LD_VAR 0 1
38354: PPUSH
38355: CALL_OW 437
38359: IFFALSE 38407
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38361: LD_VAR 0 1
38365: PPUSH
38366: CALL_OW 437
38370: PUSH
38371: LD_INT 1
38373: ARRAY
38374: PUSH
38375: LD_INT 1
38377: ARRAY
38378: PUSH
38379: LD_STRING l
38381: EQUAL
38382: IFFALSE 38407
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38384: LD_ADDR_VAR 0 2
38388: PUSH
38389: LD_VAR 0 1
38393: PPUSH
38394: CALL_OW 437
38398: PUSH
38399: LD_INT 1
38401: ARRAY
38402: PUSH
38403: LD_INT 4
38405: ARRAY
38406: ST_TO_ADDR
// end ;
38407: LD_VAR 0 2
38411: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38412: LD_INT 0
38414: PPUSH
38415: PPUSH
38416: PPUSH
38417: PPUSH
// if not base_units then
38418: LD_VAR 0 1
38422: NOT
38423: IFFALSE 38427
// exit ;
38425: GO 38514
// result := false ;
38427: LD_ADDR_VAR 0 2
38431: PUSH
38432: LD_INT 0
38434: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38435: LD_ADDR_VAR 0 5
38439: PUSH
38440: LD_VAR 0 1
38444: PPUSH
38445: LD_INT 21
38447: PUSH
38448: LD_INT 3
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PPUSH
38455: CALL_OW 72
38459: ST_TO_ADDR
// if not tmp then
38460: LD_VAR 0 5
38464: NOT
38465: IFFALSE 38469
// exit ;
38467: GO 38514
// for i in tmp do
38469: LD_ADDR_VAR 0 3
38473: PUSH
38474: LD_VAR 0 5
38478: PUSH
38479: FOR_IN
38480: IFFALSE 38512
// begin result := EnemyInRange ( i , 22 ) ;
38482: LD_ADDR_VAR 0 2
38486: PUSH
38487: LD_VAR 0 3
38491: PPUSH
38492: LD_INT 22
38494: PPUSH
38495: CALL 36750 0 2
38499: ST_TO_ADDR
// if result then
38500: LD_VAR 0 2
38504: IFFALSE 38510
// exit ;
38506: POP
38507: POP
38508: GO 38514
// end ;
38510: GO 38479
38512: POP
38513: POP
// end ;
38514: LD_VAR 0 2
38518: RET
// export function FilterByTag ( units , tag ) ; begin
38519: LD_INT 0
38521: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38522: LD_ADDR_VAR 0 3
38526: PUSH
38527: LD_VAR 0 1
38531: PPUSH
38532: LD_INT 120
38534: PUSH
38535: LD_VAR 0 2
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PPUSH
38544: CALL_OW 72
38548: ST_TO_ADDR
// end ;
38549: LD_VAR 0 3
38553: RET
// export function IsDriver ( un ) ; begin
38554: LD_INT 0
38556: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38557: LD_ADDR_VAR 0 2
38561: PUSH
38562: LD_VAR 0 1
38566: PUSH
38567: LD_INT 55
38569: PUSH
38570: EMPTY
38571: LIST
38572: PPUSH
38573: CALL_OW 69
38577: IN
38578: ST_TO_ADDR
// end ;
38579: LD_VAR 0 2
38583: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38584: LD_INT 0
38586: PPUSH
38587: PPUSH
// list := [ ] ;
38588: LD_ADDR_VAR 0 5
38592: PUSH
38593: EMPTY
38594: ST_TO_ADDR
// case d of 0 :
38595: LD_VAR 0 3
38599: PUSH
38600: LD_INT 0
38602: DOUBLE
38603: EQUAL
38604: IFTRUE 38608
38606: GO 38741
38608: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38609: LD_ADDR_VAR 0 5
38613: PUSH
38614: LD_VAR 0 1
38618: PUSH
38619: LD_INT 4
38621: MINUS
38622: PUSH
38623: LD_VAR 0 2
38627: PUSH
38628: LD_INT 4
38630: MINUS
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: LIST
38639: PUSH
38640: LD_VAR 0 1
38644: PUSH
38645: LD_INT 3
38647: MINUS
38648: PUSH
38649: LD_VAR 0 2
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: LIST
38661: PUSH
38662: LD_VAR 0 1
38666: PUSH
38667: LD_INT 4
38669: PLUS
38670: PUSH
38671: LD_VAR 0 2
38675: PUSH
38676: LD_INT 4
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: LIST
38683: PUSH
38684: LD_VAR 0 1
38688: PUSH
38689: LD_INT 3
38691: PLUS
38692: PUSH
38693: LD_VAR 0 2
38697: PUSH
38698: LD_INT 3
38700: PLUS
38701: PUSH
38702: LD_INT 5
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: LIST
38709: PUSH
38710: LD_VAR 0 1
38714: PUSH
38715: LD_VAR 0 2
38719: PUSH
38720: LD_INT 4
38722: PLUS
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: ST_TO_ADDR
// end ; 1 :
38739: GO 39439
38741: LD_INT 1
38743: DOUBLE
38744: EQUAL
38745: IFTRUE 38749
38747: GO 38882
38749: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38750: LD_ADDR_VAR 0 5
38754: PUSH
38755: LD_VAR 0 1
38759: PUSH
38760: LD_VAR 0 2
38764: PUSH
38765: LD_INT 4
38767: MINUS
38768: PUSH
38769: LD_INT 3
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: PUSH
38777: LD_VAR 0 1
38781: PUSH
38782: LD_INT 3
38784: MINUS
38785: PUSH
38786: LD_VAR 0 2
38790: PUSH
38791: LD_INT 3
38793: MINUS
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: LIST
38802: PUSH
38803: LD_VAR 0 1
38807: PUSH
38808: LD_INT 4
38810: MINUS
38811: PUSH
38812: LD_VAR 0 2
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: LIST
38824: PUSH
38825: LD_VAR 0 1
38829: PUSH
38830: LD_VAR 0 2
38834: PUSH
38835: LD_INT 3
38837: PLUS
38838: PUSH
38839: LD_INT 0
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: PUSH
38847: LD_VAR 0 1
38851: PUSH
38852: LD_INT 4
38854: PLUS
38855: PUSH
38856: LD_VAR 0 2
38860: PUSH
38861: LD_INT 4
38863: PLUS
38864: PUSH
38865: LD_INT 5
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: LIST
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: ST_TO_ADDR
// end ; 2 :
38880: GO 39439
38882: LD_INT 2
38884: DOUBLE
38885: EQUAL
38886: IFTRUE 38890
38888: GO 39019
38890: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38891: LD_ADDR_VAR 0 5
38895: PUSH
38896: LD_VAR 0 1
38900: PUSH
38901: LD_VAR 0 2
38905: PUSH
38906: LD_INT 3
38908: MINUS
38909: PUSH
38910: LD_INT 3
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: PUSH
38918: LD_VAR 0 1
38922: PUSH
38923: LD_INT 4
38925: PLUS
38926: PUSH
38927: LD_VAR 0 2
38931: PUSH
38932: LD_INT 4
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: PUSH
38940: LD_VAR 0 1
38944: PUSH
38945: LD_VAR 0 2
38949: PUSH
38950: LD_INT 4
38952: PLUS
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: LIST
38961: PUSH
38962: LD_VAR 0 1
38966: PUSH
38967: LD_INT 3
38969: MINUS
38970: PUSH
38971: LD_VAR 0 2
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: LIST
38983: PUSH
38984: LD_VAR 0 1
38988: PUSH
38989: LD_INT 4
38991: MINUS
38992: PUSH
38993: LD_VAR 0 2
38997: PUSH
38998: LD_INT 4
39000: MINUS
39001: PUSH
39002: LD_INT 2
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: LIST
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: ST_TO_ADDR
// end ; 3 :
39017: GO 39439
39019: LD_INT 3
39021: DOUBLE
39022: EQUAL
39023: IFTRUE 39027
39025: GO 39160
39027: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39028: LD_ADDR_VAR 0 5
39032: PUSH
39033: LD_VAR 0 1
39037: PUSH
39038: LD_INT 3
39040: PLUS
39041: PUSH
39042: LD_VAR 0 2
39046: PUSH
39047: LD_INT 4
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: PUSH
39055: LD_VAR 0 1
39059: PUSH
39060: LD_INT 4
39062: PLUS
39063: PUSH
39064: LD_VAR 0 2
39068: PUSH
39069: LD_INT 4
39071: PLUS
39072: PUSH
39073: LD_INT 5
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: LIST
39080: PUSH
39081: LD_VAR 0 1
39085: PUSH
39086: LD_INT 4
39088: MINUS
39089: PUSH
39090: LD_VAR 0 2
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: PUSH
39103: LD_VAR 0 1
39107: PUSH
39108: LD_VAR 0 2
39112: PUSH
39113: LD_INT 4
39115: MINUS
39116: PUSH
39117: LD_INT 3
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: PUSH
39125: LD_VAR 0 1
39129: PUSH
39130: LD_INT 3
39132: MINUS
39133: PUSH
39134: LD_VAR 0 2
39138: PUSH
39139: LD_INT 3
39141: MINUS
39142: PUSH
39143: LD_INT 2
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: LIST
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: ST_TO_ADDR
// end ; 4 :
39158: GO 39439
39160: LD_INT 4
39162: DOUBLE
39163: EQUAL
39164: IFTRUE 39168
39166: GO 39301
39168: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39169: LD_ADDR_VAR 0 5
39173: PUSH
39174: LD_VAR 0 1
39178: PUSH
39179: LD_VAR 0 2
39183: PUSH
39184: LD_INT 4
39186: PLUS
39187: PUSH
39188: LD_INT 0
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: PUSH
39196: LD_VAR 0 1
39200: PUSH
39201: LD_INT 3
39203: PLUS
39204: PUSH
39205: LD_VAR 0 2
39209: PUSH
39210: LD_INT 3
39212: PLUS
39213: PUSH
39214: LD_INT 5
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: PUSH
39222: LD_VAR 0 1
39226: PUSH
39227: LD_INT 4
39229: PLUS
39230: PUSH
39231: LD_VAR 0 2
39235: PUSH
39236: LD_INT 4
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: LIST
39243: PUSH
39244: LD_VAR 0 1
39248: PUSH
39249: LD_VAR 0 2
39253: PUSH
39254: LD_INT 3
39256: MINUS
39257: PUSH
39258: LD_INT 3
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: LIST
39265: PUSH
39266: LD_VAR 0 1
39270: PUSH
39271: LD_INT 4
39273: MINUS
39274: PUSH
39275: LD_VAR 0 2
39279: PUSH
39280: LD_INT 4
39282: MINUS
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: LIST
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: ST_TO_ADDR
// end ; 5 :
39299: GO 39439
39301: LD_INT 5
39303: DOUBLE
39304: EQUAL
39305: IFTRUE 39309
39307: GO 39438
39309: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39310: LD_ADDR_VAR 0 5
39314: PUSH
39315: LD_VAR 0 1
39319: PUSH
39320: LD_INT 4
39322: MINUS
39323: PUSH
39324: LD_VAR 0 2
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: LIST
39336: PUSH
39337: LD_VAR 0 1
39341: PUSH
39342: LD_VAR 0 2
39346: PUSH
39347: LD_INT 4
39349: MINUS
39350: PUSH
39351: LD_INT 3
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: PUSH
39359: LD_VAR 0 1
39363: PUSH
39364: LD_INT 4
39366: PLUS
39367: PUSH
39368: LD_VAR 0 2
39372: PUSH
39373: LD_INT 4
39375: PLUS
39376: PUSH
39377: LD_INT 5
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: PUSH
39385: LD_VAR 0 1
39389: PUSH
39390: LD_INT 3
39392: PLUS
39393: PUSH
39394: LD_VAR 0 2
39398: PUSH
39399: LD_INT 4
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: LIST
39406: PUSH
39407: LD_VAR 0 1
39411: PUSH
39412: LD_VAR 0 2
39416: PUSH
39417: LD_INT 3
39419: PLUS
39420: PUSH
39421: LD_INT 0
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: LIST
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: ST_TO_ADDR
// end ; end ;
39436: GO 39439
39438: POP
// result := list ;
39439: LD_ADDR_VAR 0 4
39443: PUSH
39444: LD_VAR 0 5
39448: ST_TO_ADDR
// end ;
39449: LD_VAR 0 4
39453: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39454: LD_INT 0
39456: PPUSH
39457: PPUSH
39458: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39459: LD_VAR 0 1
39463: NOT
39464: PUSH
39465: LD_VAR 0 2
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: LD_INT 4
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: IN
39488: NOT
39489: OR
39490: IFFALSE 39494
// exit ;
39492: GO 39586
// tmp := [ ] ;
39494: LD_ADDR_VAR 0 5
39498: PUSH
39499: EMPTY
39500: ST_TO_ADDR
// for i in units do
39501: LD_ADDR_VAR 0 4
39505: PUSH
39506: LD_VAR 0 1
39510: PUSH
39511: FOR_IN
39512: IFFALSE 39555
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
39514: LD_ADDR_VAR 0 5
39518: PUSH
39519: LD_VAR 0 5
39523: PPUSH
39524: LD_VAR 0 5
39528: PUSH
39529: LD_INT 1
39531: PLUS
39532: PPUSH
39533: LD_VAR 0 4
39537: PPUSH
39538: LD_VAR 0 2
39542: PPUSH
39543: CALL_OW 259
39547: PPUSH
39548: CALL_OW 2
39552: ST_TO_ADDR
39553: GO 39511
39555: POP
39556: POP
// if not tmp then
39557: LD_VAR 0 5
39561: NOT
39562: IFFALSE 39566
// exit ;
39564: GO 39586
// result := SortListByListDesc ( units , tmp ) ;
39566: LD_ADDR_VAR 0 3
39570: PUSH
39571: LD_VAR 0 1
39575: PPUSH
39576: LD_VAR 0 5
39580: PPUSH
39581: CALL_OW 77
39585: ST_TO_ADDR
// end ;
39586: LD_VAR 0 3
39590: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39591: LD_INT 0
39593: PPUSH
39594: PPUSH
39595: PPUSH
// result := false ;
39596: LD_ADDR_VAR 0 3
39600: PUSH
39601: LD_INT 0
39603: ST_TO_ADDR
// x := GetX ( building ) ;
39604: LD_ADDR_VAR 0 4
39608: PUSH
39609: LD_VAR 0 2
39613: PPUSH
39614: CALL_OW 250
39618: ST_TO_ADDR
// y := GetY ( building ) ;
39619: LD_ADDR_VAR 0 5
39623: PUSH
39624: LD_VAR 0 2
39628: PPUSH
39629: CALL_OW 251
39633: ST_TO_ADDR
// if not building or not x or not y then
39634: LD_VAR 0 2
39638: NOT
39639: PUSH
39640: LD_VAR 0 4
39644: NOT
39645: OR
39646: PUSH
39647: LD_VAR 0 5
39651: NOT
39652: OR
39653: IFFALSE 39657
// exit ;
39655: GO 39749
// if GetTaskList ( unit ) then
39657: LD_VAR 0 1
39661: PPUSH
39662: CALL_OW 437
39666: IFFALSE 39749
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39668: LD_STRING e
39670: PUSH
39671: LD_VAR 0 1
39675: PPUSH
39676: CALL_OW 437
39680: PUSH
39681: LD_INT 1
39683: ARRAY
39684: PUSH
39685: LD_INT 1
39687: ARRAY
39688: EQUAL
39689: PUSH
39690: LD_VAR 0 4
39694: PUSH
39695: LD_VAR 0 1
39699: PPUSH
39700: CALL_OW 437
39704: PUSH
39705: LD_INT 1
39707: ARRAY
39708: PUSH
39709: LD_INT 2
39711: ARRAY
39712: EQUAL
39713: AND
39714: PUSH
39715: LD_VAR 0 5
39719: PUSH
39720: LD_VAR 0 1
39724: PPUSH
39725: CALL_OW 437
39729: PUSH
39730: LD_INT 1
39732: ARRAY
39733: PUSH
39734: LD_INT 3
39736: ARRAY
39737: EQUAL
39738: AND
39739: IFFALSE 39749
// result := true end ;
39741: LD_ADDR_VAR 0 3
39745: PUSH
39746: LD_INT 1
39748: ST_TO_ADDR
// end ;
39749: LD_VAR 0 3
39753: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39754: LD_INT 0
39756: PPUSH
// result := false ;
39757: LD_ADDR_VAR 0 4
39761: PUSH
39762: LD_INT 0
39764: ST_TO_ADDR
// if GetTaskList ( unit ) then
39765: LD_VAR 0 1
39769: PPUSH
39770: CALL_OW 437
39774: IFFALSE 39857
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39776: LD_STRING M
39778: PUSH
39779: LD_VAR 0 1
39783: PPUSH
39784: CALL_OW 437
39788: PUSH
39789: LD_INT 1
39791: ARRAY
39792: PUSH
39793: LD_INT 1
39795: ARRAY
39796: EQUAL
39797: PUSH
39798: LD_VAR 0 2
39802: PUSH
39803: LD_VAR 0 1
39807: PPUSH
39808: CALL_OW 437
39812: PUSH
39813: LD_INT 1
39815: ARRAY
39816: PUSH
39817: LD_INT 2
39819: ARRAY
39820: EQUAL
39821: AND
39822: PUSH
39823: LD_VAR 0 3
39827: PUSH
39828: LD_VAR 0 1
39832: PPUSH
39833: CALL_OW 437
39837: PUSH
39838: LD_INT 1
39840: ARRAY
39841: PUSH
39842: LD_INT 3
39844: ARRAY
39845: EQUAL
39846: AND
39847: IFFALSE 39857
// result := true ;
39849: LD_ADDR_VAR 0 4
39853: PUSH
39854: LD_INT 1
39856: ST_TO_ADDR
// end ; end ;
39857: LD_VAR 0 4
39861: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39862: LD_INT 0
39864: PPUSH
39865: PPUSH
39866: PPUSH
39867: PPUSH
// if not unit or not area then
39868: LD_VAR 0 1
39872: NOT
39873: PUSH
39874: LD_VAR 0 2
39878: NOT
39879: OR
39880: IFFALSE 39884
// exit ;
39882: GO 40048
// tmp := AreaToList ( area , i ) ;
39884: LD_ADDR_VAR 0 6
39888: PUSH
39889: LD_VAR 0 2
39893: PPUSH
39894: LD_VAR 0 5
39898: PPUSH
39899: CALL_OW 517
39903: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39904: LD_ADDR_VAR 0 5
39908: PUSH
39909: DOUBLE
39910: LD_INT 1
39912: DEC
39913: ST_TO_ADDR
39914: LD_VAR 0 6
39918: PUSH
39919: LD_INT 1
39921: ARRAY
39922: PUSH
39923: FOR_TO
39924: IFFALSE 40046
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39926: LD_ADDR_VAR 0 7
39930: PUSH
39931: LD_VAR 0 6
39935: PUSH
39936: LD_INT 1
39938: ARRAY
39939: PUSH
39940: LD_VAR 0 5
39944: ARRAY
39945: PUSH
39946: LD_VAR 0 6
39950: PUSH
39951: LD_INT 2
39953: ARRAY
39954: PUSH
39955: LD_VAR 0 5
39959: ARRAY
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39965: LD_VAR 0 7
39969: PUSH
39970: LD_INT 1
39972: ARRAY
39973: PPUSH
39974: LD_VAR 0 7
39978: PUSH
39979: LD_INT 2
39981: ARRAY
39982: PPUSH
39983: CALL_OW 428
39987: PUSH
39988: LD_INT 0
39990: EQUAL
39991: IFFALSE 40044
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39993: LD_VAR 0 1
39997: PPUSH
39998: LD_VAR 0 7
40002: PUSH
40003: LD_INT 1
40005: ARRAY
40006: PPUSH
40007: LD_VAR 0 7
40011: PUSH
40012: LD_INT 2
40014: ARRAY
40015: PPUSH
40016: LD_VAR 0 3
40020: PPUSH
40021: CALL_OW 48
// result := IsPlaced ( unit ) ;
40025: LD_ADDR_VAR 0 4
40029: PUSH
40030: LD_VAR 0 1
40034: PPUSH
40035: CALL_OW 305
40039: ST_TO_ADDR
// exit ;
40040: POP
40041: POP
40042: GO 40048
// end ; end ;
40044: GO 39923
40046: POP
40047: POP
// end ;
40048: LD_VAR 0 4
40052: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40053: LD_INT 0
40055: PPUSH
40056: PPUSH
40057: PPUSH
// if not side or side > 8 then
40058: LD_VAR 0 1
40062: NOT
40063: PUSH
40064: LD_VAR 0 1
40068: PUSH
40069: LD_INT 8
40071: GREATER
40072: OR
40073: IFFALSE 40077
// exit ;
40075: GO 40264
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40077: LD_ADDR_VAR 0 4
40081: PUSH
40082: LD_INT 22
40084: PUSH
40085: LD_VAR 0 1
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 21
40096: PUSH
40097: LD_INT 3
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PPUSH
40108: CALL_OW 69
40112: ST_TO_ADDR
// if not tmp then
40113: LD_VAR 0 4
40117: NOT
40118: IFFALSE 40122
// exit ;
40120: GO 40264
// enable_addtolog := true ;
40122: LD_ADDR_OWVAR 81
40126: PUSH
40127: LD_INT 1
40129: ST_TO_ADDR
// AddToLog ( [ ) ;
40130: LD_STRING [
40132: PPUSH
40133: CALL_OW 561
// for i in tmp do
40137: LD_ADDR_VAR 0 3
40141: PUSH
40142: LD_VAR 0 4
40146: PUSH
40147: FOR_IN
40148: IFFALSE 40255
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40150: LD_STRING [
40152: PUSH
40153: LD_VAR 0 3
40157: PPUSH
40158: CALL_OW 266
40162: STR
40163: PUSH
40164: LD_STRING , 
40166: STR
40167: PUSH
40168: LD_VAR 0 3
40172: PPUSH
40173: CALL_OW 250
40177: STR
40178: PUSH
40179: LD_STRING , 
40181: STR
40182: PUSH
40183: LD_VAR 0 3
40187: PPUSH
40188: CALL_OW 251
40192: STR
40193: PUSH
40194: LD_STRING , 
40196: STR
40197: PUSH
40198: LD_VAR 0 3
40202: PPUSH
40203: CALL_OW 254
40207: STR
40208: PUSH
40209: LD_STRING , 
40211: STR
40212: PUSH
40213: LD_VAR 0 3
40217: PPUSH
40218: LD_INT 1
40220: PPUSH
40221: CALL_OW 268
40225: STR
40226: PUSH
40227: LD_STRING , 
40229: STR
40230: PUSH
40231: LD_VAR 0 3
40235: PPUSH
40236: LD_INT 2
40238: PPUSH
40239: CALL_OW 268
40243: STR
40244: PUSH
40245: LD_STRING ],
40247: STR
40248: PPUSH
40249: CALL_OW 561
// end ;
40253: GO 40147
40255: POP
40256: POP
// AddToLog ( ]; ) ;
40257: LD_STRING ];
40259: PPUSH
40260: CALL_OW 561
// end ;
40264: LD_VAR 0 2
40268: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40269: LD_INT 0
40271: PPUSH
40272: PPUSH
40273: PPUSH
40274: PPUSH
40275: PPUSH
// if not area or not rate or not max then
40276: LD_VAR 0 1
40280: NOT
40281: PUSH
40282: LD_VAR 0 2
40286: NOT
40287: OR
40288: PUSH
40289: LD_VAR 0 4
40293: NOT
40294: OR
40295: IFFALSE 40299
// exit ;
40297: GO 40488
// while 1 do
40299: LD_INT 1
40301: IFFALSE 40488
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40303: LD_ADDR_VAR 0 9
40307: PUSH
40308: LD_VAR 0 1
40312: PPUSH
40313: LD_INT 1
40315: PPUSH
40316: CALL_OW 287
40320: PUSH
40321: LD_INT 10
40323: MUL
40324: ST_TO_ADDR
// r := rate / 10 ;
40325: LD_ADDR_VAR 0 7
40329: PUSH
40330: LD_VAR 0 2
40334: PUSH
40335: LD_INT 10
40337: DIVREAL
40338: ST_TO_ADDR
// time := 1 1$00 ;
40339: LD_ADDR_VAR 0 8
40343: PUSH
40344: LD_INT 2100
40346: ST_TO_ADDR
// if amount < min then
40347: LD_VAR 0 9
40351: PUSH
40352: LD_VAR 0 3
40356: LESS
40357: IFFALSE 40375
// r := r * 2 else
40359: LD_ADDR_VAR 0 7
40363: PUSH
40364: LD_VAR 0 7
40368: PUSH
40369: LD_INT 2
40371: MUL
40372: ST_TO_ADDR
40373: GO 40401
// if amount > max then
40375: LD_VAR 0 9
40379: PUSH
40380: LD_VAR 0 4
40384: GREATER
40385: IFFALSE 40401
// r := r / 2 ;
40387: LD_ADDR_VAR 0 7
40391: PUSH
40392: LD_VAR 0 7
40396: PUSH
40397: LD_INT 2
40399: DIVREAL
40400: ST_TO_ADDR
// time := time / r ;
40401: LD_ADDR_VAR 0 8
40405: PUSH
40406: LD_VAR 0 8
40410: PUSH
40411: LD_VAR 0 7
40415: DIVREAL
40416: ST_TO_ADDR
// if time < 0 then
40417: LD_VAR 0 8
40421: PUSH
40422: LD_INT 0
40424: LESS
40425: IFFALSE 40442
// time := time * - 1 ;
40427: LD_ADDR_VAR 0 8
40431: PUSH
40432: LD_VAR 0 8
40436: PUSH
40437: LD_INT 1
40439: NEG
40440: MUL
40441: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40442: LD_VAR 0 8
40446: PUSH
40447: LD_INT 35
40449: PPUSH
40450: LD_INT 875
40452: PPUSH
40453: CALL_OW 12
40457: PLUS
40458: PPUSH
40459: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40463: LD_INT 1
40465: PPUSH
40466: LD_INT 5
40468: PPUSH
40469: CALL_OW 12
40473: PPUSH
40474: LD_VAR 0 1
40478: PPUSH
40479: LD_INT 1
40481: PPUSH
40482: CALL_OW 55
// end ;
40486: GO 40299
// end ;
40488: LD_VAR 0 5
40492: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40493: LD_INT 0
40495: PPUSH
40496: PPUSH
40497: PPUSH
40498: PPUSH
40499: PPUSH
40500: PPUSH
40501: PPUSH
40502: PPUSH
// if not turrets or not factories then
40503: LD_VAR 0 1
40507: NOT
40508: PUSH
40509: LD_VAR 0 2
40513: NOT
40514: OR
40515: IFFALSE 40519
// exit ;
40517: GO 40826
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40519: LD_ADDR_VAR 0 10
40523: PUSH
40524: LD_INT 5
40526: PUSH
40527: LD_INT 6
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: LD_INT 4
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 3
40546: PUSH
40547: LD_INT 5
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 24
40561: PUSH
40562: LD_INT 25
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 23
40571: PUSH
40572: LD_INT 27
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 42
40585: PUSH
40586: LD_INT 43
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 44
40595: PUSH
40596: LD_INT 46
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 45
40605: PUSH
40606: LD_INT 47
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: LIST
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: LIST
40622: ST_TO_ADDR
// result := [ ] ;
40623: LD_ADDR_VAR 0 3
40627: PUSH
40628: EMPTY
40629: ST_TO_ADDR
// for i in turrets do
40630: LD_ADDR_VAR 0 4
40634: PUSH
40635: LD_VAR 0 1
40639: PUSH
40640: FOR_IN
40641: IFFALSE 40824
// begin nat := GetNation ( i ) ;
40643: LD_ADDR_VAR 0 7
40647: PUSH
40648: LD_VAR 0 4
40652: PPUSH
40653: CALL_OW 248
40657: ST_TO_ADDR
// weapon := 0 ;
40658: LD_ADDR_VAR 0 8
40662: PUSH
40663: LD_INT 0
40665: ST_TO_ADDR
// if not nat then
40666: LD_VAR 0 7
40670: NOT
40671: IFFALSE 40675
// continue ;
40673: GO 40640
// for j in list [ nat ] do
40675: LD_ADDR_VAR 0 5
40679: PUSH
40680: LD_VAR 0 10
40684: PUSH
40685: LD_VAR 0 7
40689: ARRAY
40690: PUSH
40691: FOR_IN
40692: IFFALSE 40733
// if GetBWeapon ( i ) = j [ 1 ] then
40694: LD_VAR 0 4
40698: PPUSH
40699: CALL_OW 269
40703: PUSH
40704: LD_VAR 0 5
40708: PUSH
40709: LD_INT 1
40711: ARRAY
40712: EQUAL
40713: IFFALSE 40731
// begin weapon := j [ 2 ] ;
40715: LD_ADDR_VAR 0 8
40719: PUSH
40720: LD_VAR 0 5
40724: PUSH
40725: LD_INT 2
40727: ARRAY
40728: ST_TO_ADDR
// break ;
40729: GO 40733
// end ;
40731: GO 40691
40733: POP
40734: POP
// if not weapon then
40735: LD_VAR 0 8
40739: NOT
40740: IFFALSE 40744
// continue ;
40742: GO 40640
// for k in factories do
40744: LD_ADDR_VAR 0 6
40748: PUSH
40749: LD_VAR 0 2
40753: PUSH
40754: FOR_IN
40755: IFFALSE 40820
// begin weapons := AvailableWeaponList ( k ) ;
40757: LD_ADDR_VAR 0 9
40761: PUSH
40762: LD_VAR 0 6
40766: PPUSH
40767: CALL_OW 478
40771: ST_TO_ADDR
// if not weapons then
40772: LD_VAR 0 9
40776: NOT
40777: IFFALSE 40781
// continue ;
40779: GO 40754
// if weapon in weapons then
40781: LD_VAR 0 8
40785: PUSH
40786: LD_VAR 0 9
40790: IN
40791: IFFALSE 40818
// begin result := [ i , weapon ] ;
40793: LD_ADDR_VAR 0 3
40797: PUSH
40798: LD_VAR 0 4
40802: PUSH
40803: LD_VAR 0 8
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: ST_TO_ADDR
// exit ;
40812: POP
40813: POP
40814: POP
40815: POP
40816: GO 40826
// end ; end ;
40818: GO 40754
40820: POP
40821: POP
// end ;
40822: GO 40640
40824: POP
40825: POP
// end ;
40826: LD_VAR 0 3
40830: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40831: LD_INT 0
40833: PPUSH
// if not side or side > 8 then
40834: LD_VAR 0 3
40838: NOT
40839: PUSH
40840: LD_VAR 0 3
40844: PUSH
40845: LD_INT 8
40847: GREATER
40848: OR
40849: IFFALSE 40853
// exit ;
40851: GO 40912
// if not range then
40853: LD_VAR 0 4
40857: NOT
40858: IFFALSE 40869
// range := - 12 ;
40860: LD_ADDR_VAR 0 4
40864: PUSH
40865: LD_INT 12
40867: NEG
40868: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40869: LD_VAR 0 1
40873: PPUSH
40874: LD_VAR 0 2
40878: PPUSH
40879: LD_VAR 0 3
40883: PPUSH
40884: LD_VAR 0 4
40888: PPUSH
40889: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40893: LD_VAR 0 1
40897: PPUSH
40898: LD_VAR 0 2
40902: PPUSH
40903: LD_VAR 0 3
40907: PPUSH
40908: CALL_OW 331
// end ;
40912: LD_VAR 0 5
40916: RET
// export function Video ( mode ) ; begin
40917: LD_INT 0
40919: PPUSH
// ingame_video = mode ;
40920: LD_ADDR_OWVAR 52
40924: PUSH
40925: LD_VAR 0 1
40929: ST_TO_ADDR
// interface_hidden = mode ;
40930: LD_ADDR_OWVAR 54
40934: PUSH
40935: LD_VAR 0 1
40939: ST_TO_ADDR
// end ;
40940: LD_VAR 0 2
40944: RET
// export function Join ( array , element ) ; begin
40945: LD_INT 0
40947: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40948: LD_ADDR_VAR 0 3
40952: PUSH
40953: LD_VAR 0 1
40957: PPUSH
40958: LD_VAR 0 1
40962: PUSH
40963: LD_INT 1
40965: PLUS
40966: PPUSH
40967: LD_VAR 0 2
40971: PPUSH
40972: CALL_OW 1
40976: ST_TO_ADDR
// end ;
40977: LD_VAR 0 3
40981: RET
// export function JoinUnion ( array , element ) ; begin
40982: LD_INT 0
40984: PPUSH
// result := array union element ;
40985: LD_ADDR_VAR 0 3
40989: PUSH
40990: LD_VAR 0 1
40994: PUSH
40995: LD_VAR 0 2
40999: UNION
41000: ST_TO_ADDR
// end ;
41001: LD_VAR 0 3
41005: RET
// export function GetBehemoths ( side ) ; begin
41006: LD_INT 0
41008: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
41009: LD_ADDR_VAR 0 2
41013: PUSH
41014: LD_INT 22
41016: PUSH
41017: LD_VAR 0 1
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 31
41028: PUSH
41029: LD_INT 25
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PPUSH
41040: CALL_OW 69
41044: ST_TO_ADDR
// end ;
41045: LD_VAR 0 2
41049: RET
// export function Shuffle ( array ) ; var i , index ; begin
41050: LD_INT 0
41052: PPUSH
41053: PPUSH
41054: PPUSH
// result := [ ] ;
41055: LD_ADDR_VAR 0 2
41059: PUSH
41060: EMPTY
41061: ST_TO_ADDR
// if not array then
41062: LD_VAR 0 1
41066: NOT
41067: IFFALSE 41071
// exit ;
41069: GO 41170
// Randomize ;
41071: CALL_OW 10
// for i = array downto 1 do
41075: LD_ADDR_VAR 0 3
41079: PUSH
41080: DOUBLE
41081: LD_VAR 0 1
41085: INC
41086: ST_TO_ADDR
41087: LD_INT 1
41089: PUSH
41090: FOR_DOWNTO
41091: IFFALSE 41168
// begin index := rand ( 1 , array ) ;
41093: LD_ADDR_VAR 0 4
41097: PUSH
41098: LD_INT 1
41100: PPUSH
41101: LD_VAR 0 1
41105: PPUSH
41106: CALL_OW 12
41110: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41111: LD_ADDR_VAR 0 2
41115: PUSH
41116: LD_VAR 0 2
41120: PPUSH
41121: LD_VAR 0 2
41125: PUSH
41126: LD_INT 1
41128: PLUS
41129: PPUSH
41130: LD_VAR 0 1
41134: PUSH
41135: LD_VAR 0 4
41139: ARRAY
41140: PPUSH
41141: CALL_OW 2
41145: ST_TO_ADDR
// array := Delete ( array , index ) ;
41146: LD_ADDR_VAR 0 1
41150: PUSH
41151: LD_VAR 0 1
41155: PPUSH
41156: LD_VAR 0 4
41160: PPUSH
41161: CALL_OW 3
41165: ST_TO_ADDR
// end ;
41166: GO 41090
41168: POP
41169: POP
// end ;
41170: LD_VAR 0 2
41174: RET
// export function GetBaseMaterials ( base ) ; begin
41175: LD_INT 0
41177: PPUSH
// result := [ 0 , 0 , 0 ] ;
41178: LD_ADDR_VAR 0 2
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: LD_INT 0
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: LIST
41196: ST_TO_ADDR
// if not base then
41197: LD_VAR 0 1
41201: NOT
41202: IFFALSE 41206
// exit ;
41204: GO 41255
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41206: LD_ADDR_VAR 0 2
41210: PUSH
41211: LD_VAR 0 1
41215: PPUSH
41216: LD_INT 1
41218: PPUSH
41219: CALL_OW 275
41223: PUSH
41224: LD_VAR 0 1
41228: PPUSH
41229: LD_INT 2
41231: PPUSH
41232: CALL_OW 275
41236: PUSH
41237: LD_VAR 0 1
41241: PPUSH
41242: LD_INT 3
41244: PPUSH
41245: CALL_OW 275
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: ST_TO_ADDR
// end ;
41255: LD_VAR 0 2
41259: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41260: LD_INT 0
41262: PPUSH
41263: PPUSH
// result := array ;
41264: LD_ADDR_VAR 0 3
41268: PUSH
41269: LD_VAR 0 1
41273: ST_TO_ADDR
// if size > 0 then
41274: LD_VAR 0 2
41278: PUSH
41279: LD_INT 0
41281: GREATER
41282: IFFALSE 41328
// for i := array downto size do
41284: LD_ADDR_VAR 0 4
41288: PUSH
41289: DOUBLE
41290: LD_VAR 0 1
41294: INC
41295: ST_TO_ADDR
41296: LD_VAR 0 2
41300: PUSH
41301: FOR_DOWNTO
41302: IFFALSE 41326
// result := Delete ( result , result ) ;
41304: LD_ADDR_VAR 0 3
41308: PUSH
41309: LD_VAR 0 3
41313: PPUSH
41314: LD_VAR 0 3
41318: PPUSH
41319: CALL_OW 3
41323: ST_TO_ADDR
41324: GO 41301
41326: POP
41327: POP
// end ;
41328: LD_VAR 0 3
41332: RET
// export function ComExit ( unit ) ; var tmp ; begin
41333: LD_INT 0
41335: PPUSH
41336: PPUSH
// if not IsInUnit ( unit ) then
41337: LD_VAR 0 1
41341: PPUSH
41342: CALL_OW 310
41346: NOT
41347: IFFALSE 41351
// exit ;
41349: GO 41411
// tmp := IsInUnit ( unit ) ;
41351: LD_ADDR_VAR 0 3
41355: PUSH
41356: LD_VAR 0 1
41360: PPUSH
41361: CALL_OW 310
41365: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41366: LD_VAR 0 3
41370: PPUSH
41371: CALL_OW 247
41375: PUSH
41376: LD_INT 2
41378: EQUAL
41379: IFFALSE 41392
// ComExitVehicle ( unit ) else
41381: LD_VAR 0 1
41385: PPUSH
41386: CALL_OW 121
41390: GO 41401
// ComExitBuilding ( unit ) ;
41392: LD_VAR 0 1
41396: PPUSH
41397: CALL_OW 122
// result := tmp ;
41401: LD_ADDR_VAR 0 2
41405: PUSH
41406: LD_VAR 0 3
41410: ST_TO_ADDR
// end ;
41411: LD_VAR 0 2
41415: RET
// export function ComExitAll ( units ) ; var i ; begin
41416: LD_INT 0
41418: PPUSH
41419: PPUSH
// if not units then
41420: LD_VAR 0 1
41424: NOT
41425: IFFALSE 41429
// exit ;
41427: GO 41455
// for i in units do
41429: LD_ADDR_VAR 0 3
41433: PUSH
41434: LD_VAR 0 1
41438: PUSH
41439: FOR_IN
41440: IFFALSE 41453
// ComExit ( i ) ;
41442: LD_VAR 0 3
41446: PPUSH
41447: CALL 41333 0 1
41451: GO 41439
41453: POP
41454: POP
// end ;
41455: LD_VAR 0 2
41459: RET
// export function ResetHc ; begin
41460: LD_INT 0
41462: PPUSH
// InitHc ;
41463: CALL_OW 19
// hc_importance := 0 ;
41467: LD_ADDR_OWVAR 32
41471: PUSH
41472: LD_INT 0
41474: ST_TO_ADDR
// end ;
41475: LD_VAR 0 1
41479: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41480: LD_INT 0
41482: PPUSH
41483: PPUSH
41484: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41485: LD_ADDR_VAR 0 6
41489: PUSH
41490: LD_VAR 0 1
41494: PUSH
41495: LD_VAR 0 3
41499: PLUS
41500: PUSH
41501: LD_INT 2
41503: DIV
41504: ST_TO_ADDR
// if _x < 0 then
41505: LD_VAR 0 6
41509: PUSH
41510: LD_INT 0
41512: LESS
41513: IFFALSE 41530
// _x := _x * - 1 ;
41515: LD_ADDR_VAR 0 6
41519: PUSH
41520: LD_VAR 0 6
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: MUL
41529: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41530: LD_ADDR_VAR 0 7
41534: PUSH
41535: LD_VAR 0 2
41539: PUSH
41540: LD_VAR 0 4
41544: PLUS
41545: PUSH
41546: LD_INT 2
41548: DIV
41549: ST_TO_ADDR
// if _y < 0 then
41550: LD_VAR 0 7
41554: PUSH
41555: LD_INT 0
41557: LESS
41558: IFFALSE 41575
// _y := _y * - 1 ;
41560: LD_ADDR_VAR 0 7
41564: PUSH
41565: LD_VAR 0 7
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: MUL
41574: ST_TO_ADDR
// result := [ _x , _y ] ;
41575: LD_ADDR_VAR 0 5
41579: PUSH
41580: LD_VAR 0 6
41584: PUSH
41585: LD_VAR 0 7
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: ST_TO_ADDR
// end ;
41594: LD_VAR 0 5
41598: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41599: LD_INT 0
41601: PPUSH
41602: PPUSH
41603: PPUSH
41604: PPUSH
// task := GetTaskList ( unit ) ;
41605: LD_ADDR_VAR 0 7
41609: PUSH
41610: LD_VAR 0 1
41614: PPUSH
41615: CALL_OW 437
41619: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41620: LD_VAR 0 7
41624: NOT
41625: PUSH
41626: LD_VAR 0 1
41630: PPUSH
41631: LD_VAR 0 2
41635: PPUSH
41636: CALL_OW 308
41640: NOT
41641: AND
41642: IFFALSE 41646
// exit ;
41644: GO 41764
// if IsInArea ( unit , area ) then
41646: LD_VAR 0 1
41650: PPUSH
41651: LD_VAR 0 2
41655: PPUSH
41656: CALL_OW 308
41660: IFFALSE 41678
// begin ComMoveToArea ( unit , goAway ) ;
41662: LD_VAR 0 1
41666: PPUSH
41667: LD_VAR 0 3
41671: PPUSH
41672: CALL_OW 113
// exit ;
41676: GO 41764
// end ; if task [ 1 ] [ 1 ] <> M then
41678: LD_VAR 0 7
41682: PUSH
41683: LD_INT 1
41685: ARRAY
41686: PUSH
41687: LD_INT 1
41689: ARRAY
41690: PUSH
41691: LD_STRING M
41693: NONEQUAL
41694: IFFALSE 41698
// exit ;
41696: GO 41764
// x := task [ 1 ] [ 2 ] ;
41698: LD_ADDR_VAR 0 5
41702: PUSH
41703: LD_VAR 0 7
41707: PUSH
41708: LD_INT 1
41710: ARRAY
41711: PUSH
41712: LD_INT 2
41714: ARRAY
41715: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41716: LD_ADDR_VAR 0 6
41720: PUSH
41721: LD_VAR 0 7
41725: PUSH
41726: LD_INT 1
41728: ARRAY
41729: PUSH
41730: LD_INT 3
41732: ARRAY
41733: ST_TO_ADDR
// if InArea ( x , y , area ) then
41734: LD_VAR 0 5
41738: PPUSH
41739: LD_VAR 0 6
41743: PPUSH
41744: LD_VAR 0 2
41748: PPUSH
41749: CALL_OW 309
41753: IFFALSE 41764
// ComStop ( unit ) ;
41755: LD_VAR 0 1
41759: PPUSH
41760: CALL_OW 141
// end ;
41764: LD_VAR 0 4
41768: RET
// export function Abs ( value ) ; begin
41769: LD_INT 0
41771: PPUSH
// result := value ;
41772: LD_ADDR_VAR 0 2
41776: PUSH
41777: LD_VAR 0 1
41781: ST_TO_ADDR
// if value < 0 then
41782: LD_VAR 0 1
41786: PUSH
41787: LD_INT 0
41789: LESS
41790: IFFALSE 41807
// result := value * - 1 ;
41792: LD_ADDR_VAR 0 2
41796: PUSH
41797: LD_VAR 0 1
41801: PUSH
41802: LD_INT 1
41804: NEG
41805: MUL
41806: ST_TO_ADDR
// end ;
41807: LD_VAR 0 2
41811: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41812: LD_INT 0
41814: PPUSH
41815: PPUSH
41816: PPUSH
41817: PPUSH
41818: PPUSH
41819: PPUSH
41820: PPUSH
41821: PPUSH
// if not unit or not building then
41822: LD_VAR 0 1
41826: NOT
41827: PUSH
41828: LD_VAR 0 2
41832: NOT
41833: OR
41834: IFFALSE 41838
// exit ;
41836: GO 42064
// x := GetX ( building ) ;
41838: LD_ADDR_VAR 0 4
41842: PUSH
41843: LD_VAR 0 2
41847: PPUSH
41848: CALL_OW 250
41852: ST_TO_ADDR
// y := GetY ( building ) ;
41853: LD_ADDR_VAR 0 6
41857: PUSH
41858: LD_VAR 0 2
41862: PPUSH
41863: CALL_OW 251
41867: ST_TO_ADDR
// d := GetDir ( building ) ;
41868: LD_ADDR_VAR 0 8
41872: PUSH
41873: LD_VAR 0 2
41877: PPUSH
41878: CALL_OW 254
41882: ST_TO_ADDR
// r := 4 ;
41883: LD_ADDR_VAR 0 9
41887: PUSH
41888: LD_INT 4
41890: ST_TO_ADDR
// for i := 1 to 5 do
41891: LD_ADDR_VAR 0 10
41895: PUSH
41896: DOUBLE
41897: LD_INT 1
41899: DEC
41900: ST_TO_ADDR
41901: LD_INT 5
41903: PUSH
41904: FOR_TO
41905: IFFALSE 42062
// begin _x := ShiftX ( x , d , r + i ) ;
41907: LD_ADDR_VAR 0 5
41911: PUSH
41912: LD_VAR 0 4
41916: PPUSH
41917: LD_VAR 0 8
41921: PPUSH
41922: LD_VAR 0 9
41926: PUSH
41927: LD_VAR 0 10
41931: PLUS
41932: PPUSH
41933: CALL_OW 272
41937: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41938: LD_ADDR_VAR 0 7
41942: PUSH
41943: LD_VAR 0 6
41947: PPUSH
41948: LD_VAR 0 8
41952: PPUSH
41953: LD_VAR 0 9
41957: PUSH
41958: LD_VAR 0 10
41962: PLUS
41963: PPUSH
41964: CALL_OW 273
41968: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41969: LD_VAR 0 5
41973: PPUSH
41974: LD_VAR 0 7
41978: PPUSH
41979: CALL_OW 488
41983: PUSH
41984: LD_VAR 0 5
41988: PPUSH
41989: LD_VAR 0 7
41993: PPUSH
41994: CALL_OW 428
41998: PPUSH
41999: CALL_OW 247
42003: PUSH
42004: LD_INT 3
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: IN
42014: NOT
42015: AND
42016: IFFALSE 42060
// begin ComMoveXY ( unit , _x , _y ) ;
42018: LD_VAR 0 1
42022: PPUSH
42023: LD_VAR 0 5
42027: PPUSH
42028: LD_VAR 0 7
42032: PPUSH
42033: CALL_OW 111
// result := [ _x , _y ] ;
42037: LD_ADDR_VAR 0 3
42041: PUSH
42042: LD_VAR 0 5
42046: PUSH
42047: LD_VAR 0 7
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: ST_TO_ADDR
// exit ;
42056: POP
42057: POP
42058: GO 42064
// end ; end ;
42060: GO 41904
42062: POP
42063: POP
// end ;
42064: LD_VAR 0 3
42068: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42069: LD_INT 0
42071: PPUSH
42072: PPUSH
42073: PPUSH
// result := 0 ;
42074: LD_ADDR_VAR 0 3
42078: PUSH
42079: LD_INT 0
42081: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42082: LD_VAR 0 1
42086: PUSH
42087: LD_INT 0
42089: LESS
42090: PUSH
42091: LD_VAR 0 1
42095: PUSH
42096: LD_INT 8
42098: GREATER
42099: OR
42100: PUSH
42101: LD_VAR 0 2
42105: PUSH
42106: LD_INT 0
42108: LESS
42109: OR
42110: PUSH
42111: LD_VAR 0 2
42115: PUSH
42116: LD_INT 8
42118: GREATER
42119: OR
42120: IFFALSE 42124
// exit ;
42122: GO 42199
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42124: LD_ADDR_VAR 0 4
42128: PUSH
42129: LD_INT 22
42131: PUSH
42132: LD_VAR 0 2
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PPUSH
42141: CALL_OW 69
42145: PUSH
42146: FOR_IN
42147: IFFALSE 42197
// begin un := UnitShoot ( i ) ;
42149: LD_ADDR_VAR 0 5
42153: PUSH
42154: LD_VAR 0 4
42158: PPUSH
42159: CALL_OW 504
42163: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42164: LD_VAR 0 5
42168: PPUSH
42169: CALL_OW 255
42173: PUSH
42174: LD_VAR 0 1
42178: EQUAL
42179: IFFALSE 42195
// begin result := un ;
42181: LD_ADDR_VAR 0 3
42185: PUSH
42186: LD_VAR 0 5
42190: ST_TO_ADDR
// exit ;
42191: POP
42192: POP
42193: GO 42199
// end ; end ;
42195: GO 42146
42197: POP
42198: POP
// end ;
42199: LD_VAR 0 3
42203: RET
// export function GetCargoBay ( units ) ; begin
42204: LD_INT 0
42206: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42207: LD_ADDR_VAR 0 2
42211: PUSH
42212: LD_VAR 0 1
42216: PPUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 34
42222: PUSH
42223: LD_INT 12
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 34
42232: PUSH
42233: LD_INT 51
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 34
42242: PUSH
42243: LD_INT 32
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 34
42252: PUSH
42253: LD_EXP 45
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: PPUSH
42269: CALL_OW 72
42273: ST_TO_ADDR
// end ;
42274: LD_VAR 0 2
42278: RET
// export function Negate ( value ) ; begin
42279: LD_INT 0
42281: PPUSH
// result := not value ;
42282: LD_ADDR_VAR 0 2
42286: PUSH
42287: LD_VAR 0 1
42291: NOT
42292: ST_TO_ADDR
// end ;
42293: LD_VAR 0 2
42297: RET
// export function Inc ( value ) ; begin
42298: LD_INT 0
42300: PPUSH
// result := value + 1 ;
42301: LD_ADDR_VAR 0 2
42305: PUSH
42306: LD_VAR 0 1
42310: PUSH
42311: LD_INT 1
42313: PLUS
42314: ST_TO_ADDR
// end ;
42315: LD_VAR 0 2
42319: RET
// export function Dec ( value ) ; begin
42320: LD_INT 0
42322: PPUSH
// result := value - 1 ;
42323: LD_ADDR_VAR 0 2
42327: PUSH
42328: LD_VAR 0 1
42332: PUSH
42333: LD_INT 1
42335: MINUS
42336: ST_TO_ADDR
// end ;
42337: LD_VAR 0 2
42341: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42342: LD_INT 0
42344: PPUSH
42345: PPUSH
42346: PPUSH
42347: PPUSH
42348: PPUSH
42349: PPUSH
42350: PPUSH
42351: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42352: LD_VAR 0 1
42356: PPUSH
42357: LD_VAR 0 2
42361: PPUSH
42362: CALL_OW 488
42366: NOT
42367: PUSH
42368: LD_VAR 0 3
42372: PPUSH
42373: LD_VAR 0 4
42377: PPUSH
42378: CALL_OW 488
42382: NOT
42383: OR
42384: IFFALSE 42397
// begin result := - 1 ;
42386: LD_ADDR_VAR 0 5
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: ST_TO_ADDR
// exit ;
42395: GO 42632
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42397: LD_ADDR_VAR 0 12
42401: PUSH
42402: LD_VAR 0 1
42406: PPUSH
42407: LD_VAR 0 2
42411: PPUSH
42412: LD_VAR 0 3
42416: PPUSH
42417: LD_VAR 0 4
42421: PPUSH
42422: CALL 41480 0 4
42426: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42427: LD_ADDR_VAR 0 11
42431: PUSH
42432: LD_VAR 0 1
42436: PPUSH
42437: LD_VAR 0 2
42441: PPUSH
42442: LD_VAR 0 12
42446: PUSH
42447: LD_INT 1
42449: ARRAY
42450: PPUSH
42451: LD_VAR 0 12
42455: PUSH
42456: LD_INT 2
42458: ARRAY
42459: PPUSH
42460: CALL_OW 298
42464: ST_TO_ADDR
// distance := 9999 ;
42465: LD_ADDR_VAR 0 10
42469: PUSH
42470: LD_INT 9999
42472: ST_TO_ADDR
// for i := 0 to 5 do
42473: LD_ADDR_VAR 0 6
42477: PUSH
42478: DOUBLE
42479: LD_INT 0
42481: DEC
42482: ST_TO_ADDR
42483: LD_INT 5
42485: PUSH
42486: FOR_TO
42487: IFFALSE 42630
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42489: LD_ADDR_VAR 0 7
42493: PUSH
42494: LD_VAR 0 1
42498: PPUSH
42499: LD_VAR 0 6
42503: PPUSH
42504: LD_VAR 0 11
42508: PPUSH
42509: CALL_OW 272
42513: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42514: LD_ADDR_VAR 0 8
42518: PUSH
42519: LD_VAR 0 2
42523: PPUSH
42524: LD_VAR 0 6
42528: PPUSH
42529: LD_VAR 0 11
42533: PPUSH
42534: CALL_OW 273
42538: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42539: LD_VAR 0 7
42543: PPUSH
42544: LD_VAR 0 8
42548: PPUSH
42549: CALL_OW 488
42553: NOT
42554: IFFALSE 42558
// continue ;
42556: GO 42486
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42558: LD_ADDR_VAR 0 9
42562: PUSH
42563: LD_VAR 0 12
42567: PUSH
42568: LD_INT 1
42570: ARRAY
42571: PPUSH
42572: LD_VAR 0 12
42576: PUSH
42577: LD_INT 2
42579: ARRAY
42580: PPUSH
42581: LD_VAR 0 7
42585: PPUSH
42586: LD_VAR 0 8
42590: PPUSH
42591: CALL_OW 298
42595: ST_TO_ADDR
// if tmp < distance then
42596: LD_VAR 0 9
42600: PUSH
42601: LD_VAR 0 10
42605: LESS
42606: IFFALSE 42628
// begin result := i ;
42608: LD_ADDR_VAR 0 5
42612: PUSH
42613: LD_VAR 0 6
42617: ST_TO_ADDR
// distance := tmp ;
42618: LD_ADDR_VAR 0 10
42622: PUSH
42623: LD_VAR 0 9
42627: ST_TO_ADDR
// end ; end ;
42628: GO 42486
42630: POP
42631: POP
// end ;
42632: LD_VAR 0 5
42636: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42637: LD_INT 0
42639: PPUSH
42640: PPUSH
// if not driver or not IsInUnit ( driver ) then
42641: LD_VAR 0 1
42645: NOT
42646: PUSH
42647: LD_VAR 0 1
42651: PPUSH
42652: CALL_OW 310
42656: NOT
42657: OR
42658: IFFALSE 42662
// exit ;
42660: GO 42752
// vehicle := IsInUnit ( driver ) ;
42662: LD_ADDR_VAR 0 3
42666: PUSH
42667: LD_VAR 0 1
42671: PPUSH
42672: CALL_OW 310
42676: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42677: LD_VAR 0 1
42681: PPUSH
42682: LD_STRING \
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: LD_INT 0
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: PUSH
42712: LD_STRING E
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: LD_VAR 0 3
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PPUSH
42748: CALL_OW 446
// end ;
42752: LD_VAR 0 2
42756: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42757: LD_INT 0
42759: PPUSH
42760: PPUSH
// if not driver or not IsInUnit ( driver ) then
42761: LD_VAR 0 1
42765: NOT
42766: PUSH
42767: LD_VAR 0 1
42771: PPUSH
42772: CALL_OW 310
42776: NOT
42777: OR
42778: IFFALSE 42782
// exit ;
42780: GO 42872
// vehicle := IsInUnit ( driver ) ;
42782: LD_ADDR_VAR 0 3
42786: PUSH
42787: LD_VAR 0 1
42791: PPUSH
42792: CALL_OW 310
42796: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42797: LD_VAR 0 1
42801: PPUSH
42802: LD_STRING \
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: PUSH
42832: LD_STRING E
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_VAR 0 3
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PPUSH
42868: CALL_OW 447
// end ;
42872: LD_VAR 0 2
42876: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42877: LD_INT 0
42879: PPUSH
42880: PPUSH
42881: PPUSH
// tmp := [ ] ;
42882: LD_ADDR_VAR 0 5
42886: PUSH
42887: EMPTY
42888: ST_TO_ADDR
// for i in units do
42889: LD_ADDR_VAR 0 4
42893: PUSH
42894: LD_VAR 0 1
42898: PUSH
42899: FOR_IN
42900: IFFALSE 42938
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42902: LD_ADDR_VAR 0 5
42906: PUSH
42907: LD_VAR 0 5
42911: PPUSH
42912: LD_VAR 0 5
42916: PUSH
42917: LD_INT 1
42919: PLUS
42920: PPUSH
42921: LD_VAR 0 4
42925: PPUSH
42926: CALL_OW 256
42930: PPUSH
42931: CALL_OW 2
42935: ST_TO_ADDR
42936: GO 42899
42938: POP
42939: POP
// if not tmp then
42940: LD_VAR 0 5
42944: NOT
42945: IFFALSE 42949
// exit ;
42947: GO 42997
// if asc then
42949: LD_VAR 0 2
42953: IFFALSE 42977
// result := SortListByListAsc ( units , tmp ) else
42955: LD_ADDR_VAR 0 3
42959: PUSH
42960: LD_VAR 0 1
42964: PPUSH
42965: LD_VAR 0 5
42969: PPUSH
42970: CALL_OW 76
42974: ST_TO_ADDR
42975: GO 42997
// result := SortListByListDesc ( units , tmp ) ;
42977: LD_ADDR_VAR 0 3
42981: PUSH
42982: LD_VAR 0 1
42986: PPUSH
42987: LD_VAR 0 5
42991: PPUSH
42992: CALL_OW 77
42996: ST_TO_ADDR
// end ;
42997: LD_VAR 0 3
43001: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43002: LD_INT 0
43004: PPUSH
43005: PPUSH
// task := GetTaskList ( mech ) ;
43006: LD_ADDR_VAR 0 4
43010: PUSH
43011: LD_VAR 0 1
43015: PPUSH
43016: CALL_OW 437
43020: ST_TO_ADDR
// if not task then
43021: LD_VAR 0 4
43025: NOT
43026: IFFALSE 43030
// exit ;
43028: GO 43072
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43030: LD_ADDR_VAR 0 3
43034: PUSH
43035: LD_VAR 0 4
43039: PUSH
43040: LD_INT 1
43042: ARRAY
43043: PUSH
43044: LD_INT 1
43046: ARRAY
43047: PUSH
43048: LD_STRING r
43050: EQUAL
43051: PUSH
43052: LD_VAR 0 4
43056: PUSH
43057: LD_INT 1
43059: ARRAY
43060: PUSH
43061: LD_INT 4
43063: ARRAY
43064: PUSH
43065: LD_VAR 0 2
43069: EQUAL
43070: AND
43071: ST_TO_ADDR
// end ;
43072: LD_VAR 0 3
43076: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43077: LD_INT 0
43079: PPUSH
// SetDir ( unit , d ) ;
43080: LD_VAR 0 1
43084: PPUSH
43085: LD_VAR 0 4
43089: PPUSH
43090: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43094: LD_VAR 0 1
43098: PPUSH
43099: LD_VAR 0 2
43103: PPUSH
43104: LD_VAR 0 3
43108: PPUSH
43109: LD_VAR 0 5
43113: PPUSH
43114: CALL_OW 48
// end ;
43118: LD_VAR 0 6
43122: RET
// export function ToNaturalNumber ( number ) ; begin
43123: LD_INT 0
43125: PPUSH
// result := number div 1 ;
43126: LD_ADDR_VAR 0 2
43130: PUSH
43131: LD_VAR 0 1
43135: PUSH
43136: LD_INT 1
43138: DIV
43139: ST_TO_ADDR
// if number < 0 then
43140: LD_VAR 0 1
43144: PUSH
43145: LD_INT 0
43147: LESS
43148: IFFALSE 43158
// result := 0 ;
43150: LD_ADDR_VAR 0 2
43154: PUSH
43155: LD_INT 0
43157: ST_TO_ADDR
// end ;
43158: LD_VAR 0 2
43162: RET
// export function SortByClass ( units , class ) ; var un ; begin
43163: LD_INT 0
43165: PPUSH
43166: PPUSH
// if not units or not class then
43167: LD_VAR 0 1
43171: NOT
43172: PUSH
43173: LD_VAR 0 2
43177: NOT
43178: OR
43179: IFFALSE 43183
// exit ;
43181: GO 43278
// result := [ ] ;
43183: LD_ADDR_VAR 0 3
43187: PUSH
43188: EMPTY
43189: ST_TO_ADDR
// for un in units do
43190: LD_ADDR_VAR 0 4
43194: PUSH
43195: LD_VAR 0 1
43199: PUSH
43200: FOR_IN
43201: IFFALSE 43276
// if GetClass ( un ) = class then
43203: LD_VAR 0 4
43207: PPUSH
43208: CALL_OW 257
43212: PUSH
43213: LD_VAR 0 2
43217: EQUAL
43218: IFFALSE 43245
// result := Insert ( result , 1 , un ) else
43220: LD_ADDR_VAR 0 3
43224: PUSH
43225: LD_VAR 0 3
43229: PPUSH
43230: LD_INT 1
43232: PPUSH
43233: LD_VAR 0 4
43237: PPUSH
43238: CALL_OW 2
43242: ST_TO_ADDR
43243: GO 43274
// result := Replace ( result , result + 1 , un ) ;
43245: LD_ADDR_VAR 0 3
43249: PUSH
43250: LD_VAR 0 3
43254: PPUSH
43255: LD_VAR 0 3
43259: PUSH
43260: LD_INT 1
43262: PLUS
43263: PPUSH
43264: LD_VAR 0 4
43268: PPUSH
43269: CALL_OW 1
43273: ST_TO_ADDR
43274: GO 43200
43276: POP
43277: POP
// end ;
43278: LD_VAR 0 3
43282: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43283: LD_INT 0
43285: PPUSH
43286: PPUSH
43287: PPUSH
43288: PPUSH
43289: PPUSH
43290: PPUSH
43291: PPUSH
// result := [ ] ;
43292: LD_ADDR_VAR 0 4
43296: PUSH
43297: EMPTY
43298: ST_TO_ADDR
// if x - r < 0 then
43299: LD_VAR 0 1
43303: PUSH
43304: LD_VAR 0 3
43308: MINUS
43309: PUSH
43310: LD_INT 0
43312: LESS
43313: IFFALSE 43325
// min_x := 0 else
43315: LD_ADDR_VAR 0 8
43319: PUSH
43320: LD_INT 0
43322: ST_TO_ADDR
43323: GO 43341
// min_x := x - r ;
43325: LD_ADDR_VAR 0 8
43329: PUSH
43330: LD_VAR 0 1
43334: PUSH
43335: LD_VAR 0 3
43339: MINUS
43340: ST_TO_ADDR
// if y - r < 0 then
43341: LD_VAR 0 2
43345: PUSH
43346: LD_VAR 0 3
43350: MINUS
43351: PUSH
43352: LD_INT 0
43354: LESS
43355: IFFALSE 43367
// min_y := 0 else
43357: LD_ADDR_VAR 0 7
43361: PUSH
43362: LD_INT 0
43364: ST_TO_ADDR
43365: GO 43383
// min_y := y - r ;
43367: LD_ADDR_VAR 0 7
43371: PUSH
43372: LD_VAR 0 2
43376: PUSH
43377: LD_VAR 0 3
43381: MINUS
43382: ST_TO_ADDR
// max_x := x + r ;
43383: LD_ADDR_VAR 0 9
43387: PUSH
43388: LD_VAR 0 1
43392: PUSH
43393: LD_VAR 0 3
43397: PLUS
43398: ST_TO_ADDR
// max_y := y + r ;
43399: LD_ADDR_VAR 0 10
43403: PUSH
43404: LD_VAR 0 2
43408: PUSH
43409: LD_VAR 0 3
43413: PLUS
43414: ST_TO_ADDR
// for _x = min_x to max_x do
43415: LD_ADDR_VAR 0 5
43419: PUSH
43420: DOUBLE
43421: LD_VAR 0 8
43425: DEC
43426: ST_TO_ADDR
43427: LD_VAR 0 9
43431: PUSH
43432: FOR_TO
43433: IFFALSE 43534
// for _y = min_y to max_y do
43435: LD_ADDR_VAR 0 6
43439: PUSH
43440: DOUBLE
43441: LD_VAR 0 7
43445: DEC
43446: ST_TO_ADDR
43447: LD_VAR 0 10
43451: PUSH
43452: FOR_TO
43453: IFFALSE 43530
// begin if not ValidHex ( _x , _y ) then
43455: LD_VAR 0 5
43459: PPUSH
43460: LD_VAR 0 6
43464: PPUSH
43465: CALL_OW 488
43469: NOT
43470: IFFALSE 43474
// continue ;
43472: GO 43452
// if GetResourceTypeXY ( _x , _y ) then
43474: LD_VAR 0 5
43478: PPUSH
43479: LD_VAR 0 6
43483: PPUSH
43484: CALL_OW 283
43488: IFFALSE 43528
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43490: LD_ADDR_VAR 0 4
43494: PUSH
43495: LD_VAR 0 4
43499: PPUSH
43500: LD_VAR 0 4
43504: PUSH
43505: LD_INT 1
43507: PLUS
43508: PPUSH
43509: LD_VAR 0 5
43513: PUSH
43514: LD_VAR 0 6
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PPUSH
43523: CALL_OW 1
43527: ST_TO_ADDR
// end ;
43528: GO 43452
43530: POP
43531: POP
43532: GO 43432
43534: POP
43535: POP
// end ;
43536: LD_VAR 0 4
43540: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43541: LD_INT 0
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
// if not units then
43551: LD_VAR 0 1
43555: NOT
43556: IFFALSE 43560
// exit ;
43558: GO 43985
// result := UnitFilter ( units , [ f_ok ] ) ;
43560: LD_ADDR_VAR 0 3
43564: PUSH
43565: LD_VAR 0 1
43569: PPUSH
43570: LD_INT 50
43572: PUSH
43573: EMPTY
43574: LIST
43575: PPUSH
43576: CALL_OW 72
43580: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43581: LD_ADDR_VAR 0 8
43585: PUSH
43586: LD_VAR 0 1
43590: PUSH
43591: LD_INT 1
43593: ARRAY
43594: PPUSH
43595: CALL_OW 255
43599: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
43600: LD_ADDR_VAR 0 10
43604: PUSH
43605: LD_INT 29
43607: PUSH
43608: LD_EXP 48
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: ST_TO_ADDR
// if not result then
43617: LD_VAR 0 3
43621: NOT
43622: IFFALSE 43626
// exit ;
43624: GO 43985
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43626: LD_ADDR_VAR 0 5
43630: PUSH
43631: LD_INT 81
43633: PUSH
43634: LD_VAR 0 8
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PPUSH
43643: CALL_OW 69
43647: ST_TO_ADDR
// for i in result do
43648: LD_ADDR_VAR 0 4
43652: PUSH
43653: LD_VAR 0 3
43657: PUSH
43658: FOR_IN
43659: IFFALSE 43983
// begin tag := GetTag ( i ) + 1 ;
43661: LD_ADDR_VAR 0 9
43665: PUSH
43666: LD_VAR 0 4
43670: PPUSH
43671: CALL_OW 110
43675: PUSH
43676: LD_INT 1
43678: PLUS
43679: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43680: LD_ADDR_VAR 0 7
43684: PUSH
43685: LD_VAR 0 4
43689: PPUSH
43690: CALL_OW 250
43694: PPUSH
43695: LD_VAR 0 4
43699: PPUSH
43700: CALL_OW 251
43704: PPUSH
43705: LD_INT 6
43707: PPUSH
43708: CALL 43283 0 3
43712: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43713: LD_VAR 0 7
43717: PUSH
43718: LD_VAR 0 4
43722: PPUSH
43723: CALL_OW 264
43727: PUSH
43728: LD_VAR 0 10
43732: IN
43733: NOT
43734: AND
43735: IFFALSE 43774
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43737: LD_VAR 0 4
43741: PPUSH
43742: LD_VAR 0 7
43746: PUSH
43747: LD_INT 1
43749: ARRAY
43750: PUSH
43751: LD_INT 1
43753: ARRAY
43754: PPUSH
43755: LD_VAR 0 7
43759: PUSH
43760: LD_INT 1
43762: ARRAY
43763: PUSH
43764: LD_INT 2
43766: ARRAY
43767: PPUSH
43768: CALL_OW 116
43772: GO 43981
// if path > tag then
43774: LD_VAR 0 2
43778: PUSH
43779: LD_VAR 0 9
43783: GREATER
43784: IFFALSE 43951
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
43786: LD_ADDR_VAR 0 6
43790: PUSH
43791: LD_VAR 0 5
43795: PPUSH
43796: LD_INT 91
43798: PUSH
43799: LD_VAR 0 4
43803: PUSH
43804: LD_INT 12
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: PPUSH
43812: CALL_OW 72
43816: ST_TO_ADDR
// if nearEnemy then
43817: LD_VAR 0 6
43821: IFFALSE 43849
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43823: LD_VAR 0 4
43827: PPUSH
43828: LD_VAR 0 6
43832: PPUSH
43833: LD_VAR 0 4
43837: PPUSH
43838: CALL_OW 74
43842: PPUSH
43843: CALL_OW 115
43847: GO 43949
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43849: LD_VAR 0 4
43853: PPUSH
43854: LD_VAR 0 2
43858: PUSH
43859: LD_VAR 0 9
43863: ARRAY
43864: PUSH
43865: LD_INT 1
43867: ARRAY
43868: PPUSH
43869: LD_VAR 0 2
43873: PUSH
43874: LD_VAR 0 9
43878: ARRAY
43879: PUSH
43880: LD_INT 2
43882: ARRAY
43883: PPUSH
43884: CALL_OW 297
43888: PUSH
43889: LD_INT 6
43891: GREATER
43892: IFFALSE 43935
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43894: LD_VAR 0 4
43898: PPUSH
43899: LD_VAR 0 2
43903: PUSH
43904: LD_VAR 0 9
43908: ARRAY
43909: PUSH
43910: LD_INT 1
43912: ARRAY
43913: PPUSH
43914: LD_VAR 0 2
43918: PUSH
43919: LD_VAR 0 9
43923: ARRAY
43924: PUSH
43925: LD_INT 2
43927: ARRAY
43928: PPUSH
43929: CALL_OW 114
43933: GO 43949
// SetTag ( i , tag ) ;
43935: LD_VAR 0 4
43939: PPUSH
43940: LD_VAR 0 9
43944: PPUSH
43945: CALL_OW 109
// end else
43949: GO 43981
// if enemy then
43951: LD_VAR 0 5
43955: IFFALSE 43981
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43957: LD_VAR 0 4
43961: PPUSH
43962: LD_VAR 0 5
43966: PPUSH
43967: LD_VAR 0 4
43971: PPUSH
43972: CALL_OW 74
43976: PPUSH
43977: CALL_OW 115
// end ;
43981: GO 43658
43983: POP
43984: POP
// end ;
43985: LD_VAR 0 3
43989: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43990: LD_INT 0
43992: PPUSH
43993: PPUSH
43994: PPUSH
// if not unit or IsInUnit ( unit ) then
43995: LD_VAR 0 1
43999: NOT
44000: PUSH
44001: LD_VAR 0 1
44005: PPUSH
44006: CALL_OW 310
44010: OR
44011: IFFALSE 44015
// exit ;
44013: GO 44106
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44015: LD_ADDR_VAR 0 4
44019: PUSH
44020: LD_VAR 0 1
44024: PPUSH
44025: CALL_OW 250
44029: PPUSH
44030: LD_VAR 0 2
44034: PPUSH
44035: LD_INT 1
44037: PPUSH
44038: CALL_OW 272
44042: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44043: LD_ADDR_VAR 0 5
44047: PUSH
44048: LD_VAR 0 1
44052: PPUSH
44053: CALL_OW 251
44057: PPUSH
44058: LD_VAR 0 2
44062: PPUSH
44063: LD_INT 1
44065: PPUSH
44066: CALL_OW 273
44070: ST_TO_ADDR
// if ValidHex ( x , y ) then
44071: LD_VAR 0 4
44075: PPUSH
44076: LD_VAR 0 5
44080: PPUSH
44081: CALL_OW 488
44085: IFFALSE 44106
// ComTurnXY ( unit , x , y ) ;
44087: LD_VAR 0 1
44091: PPUSH
44092: LD_VAR 0 4
44096: PPUSH
44097: LD_VAR 0 5
44101: PPUSH
44102: CALL_OW 118
// end ;
44106: LD_VAR 0 3
44110: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44111: LD_INT 0
44113: PPUSH
44114: PPUSH
// result := false ;
44115: LD_ADDR_VAR 0 3
44119: PUSH
44120: LD_INT 0
44122: ST_TO_ADDR
// if not units then
44123: LD_VAR 0 2
44127: NOT
44128: IFFALSE 44132
// exit ;
44130: GO 44177
// for i in units do
44132: LD_ADDR_VAR 0 4
44136: PUSH
44137: LD_VAR 0 2
44141: PUSH
44142: FOR_IN
44143: IFFALSE 44175
// if See ( side , i ) then
44145: LD_VAR 0 1
44149: PPUSH
44150: LD_VAR 0 4
44154: PPUSH
44155: CALL_OW 292
44159: IFFALSE 44173
// begin result := true ;
44161: LD_ADDR_VAR 0 3
44165: PUSH
44166: LD_INT 1
44168: ST_TO_ADDR
// exit ;
44169: POP
44170: POP
44171: GO 44177
// end ;
44173: GO 44142
44175: POP
44176: POP
// end ;
44177: LD_VAR 0 3
44181: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44182: LD_INT 0
44184: PPUSH
44185: PPUSH
44186: PPUSH
44187: PPUSH
// if not unit or not points then
44188: LD_VAR 0 1
44192: NOT
44193: PUSH
44194: LD_VAR 0 2
44198: NOT
44199: OR
44200: IFFALSE 44204
// exit ;
44202: GO 44294
// dist := 99999 ;
44204: LD_ADDR_VAR 0 5
44208: PUSH
44209: LD_INT 99999
44211: ST_TO_ADDR
// for i in points do
44212: LD_ADDR_VAR 0 4
44216: PUSH
44217: LD_VAR 0 2
44221: PUSH
44222: FOR_IN
44223: IFFALSE 44292
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44225: LD_ADDR_VAR 0 6
44229: PUSH
44230: LD_VAR 0 1
44234: PPUSH
44235: LD_VAR 0 4
44239: PUSH
44240: LD_INT 1
44242: ARRAY
44243: PPUSH
44244: LD_VAR 0 4
44248: PUSH
44249: LD_INT 2
44251: ARRAY
44252: PPUSH
44253: CALL_OW 297
44257: ST_TO_ADDR
// if tmpDist < dist then
44258: LD_VAR 0 6
44262: PUSH
44263: LD_VAR 0 5
44267: LESS
44268: IFFALSE 44290
// begin result := i ;
44270: LD_ADDR_VAR 0 3
44274: PUSH
44275: LD_VAR 0 4
44279: ST_TO_ADDR
// dist := tmpDist ;
44280: LD_ADDR_VAR 0 5
44284: PUSH
44285: LD_VAR 0 6
44289: ST_TO_ADDR
// end ; end ;
44290: GO 44222
44292: POP
44293: POP
// end ;
44294: LD_VAR 0 3
44298: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44299: LD_INT 0
44301: PPUSH
// uc_side := side ;
44302: LD_ADDR_OWVAR 20
44306: PUSH
44307: LD_VAR 0 1
44311: ST_TO_ADDR
// uc_nation := 3 ;
44312: LD_ADDR_OWVAR 21
44316: PUSH
44317: LD_INT 3
44319: ST_TO_ADDR
// vc_chassis := 25 ;
44320: LD_ADDR_OWVAR 37
44324: PUSH
44325: LD_INT 25
44327: ST_TO_ADDR
// vc_engine := engine_siberite ;
44328: LD_ADDR_OWVAR 39
44332: PUSH
44333: LD_INT 3
44335: ST_TO_ADDR
// vc_control := control_computer ;
44336: LD_ADDR_OWVAR 38
44340: PUSH
44341: LD_INT 3
44343: ST_TO_ADDR
// vc_weapon := 59 ;
44344: LD_ADDR_OWVAR 40
44348: PUSH
44349: LD_INT 59
44351: ST_TO_ADDR
// result := CreateVehicle ;
44352: LD_ADDR_VAR 0 5
44356: PUSH
44357: CALL_OW 45
44361: ST_TO_ADDR
// SetDir ( result , d ) ;
44362: LD_VAR 0 5
44366: PPUSH
44367: LD_VAR 0 4
44371: PPUSH
44372: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44376: LD_VAR 0 5
44380: PPUSH
44381: LD_VAR 0 2
44385: PPUSH
44386: LD_VAR 0 3
44390: PPUSH
44391: LD_INT 0
44393: PPUSH
44394: CALL_OW 48
// end ;
44398: LD_VAR 0 5
44402: RET
