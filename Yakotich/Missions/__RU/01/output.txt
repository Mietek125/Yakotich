// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 36 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Randomize ;
  15: CALL_OW 10
// RandomizeAll ;
  19: CALL_OW 11
// InitRussian ;
  23: CALL 815 0 0
// Action ;
  27: CALL 1713 0 0
// DebugMode ;
  31: CALL 196 0 0
// end ;
  35: END
// export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin ; export Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif ; export MaksimCrew ; export OtherSurvivors ; export AmS , AmSc , AMSS ; export AmCommander ; export Americans ; export KillCounter , MaksimTime ; export pojazdy ; export debug ; export mission_prefix ; export hill_north_trigger , hill_south_trigger , yakotich_in_base , quests_finished , aleksandr_found , attacks_are_finished , american_attack , oil_power_researched , oil_engine_researched , technology1_researched , end_of_the_mission , losses , vehicle_constructed , josif_landed , josif_saved , breastwork_builded , armoury_builded , maksim_coming ; function Init ; begin
  36: LD_INT 0
  38: PPUSH
// mission_prefix := 01_ ;
  39: LD_ADDR_EXP 25
  43: PUSH
  44: LD_STRING 01_
  46: ST_TO_ADDR
// yakotich_in_base := false ;
  47: LD_ADDR_EXP 28
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// quests_finished := false ;
  55: LD_ADDR_EXP 29
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// aleksandr_found := false ;
  63: LD_ADDR_EXP 30
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// attacks_are_finished := false ;
  71: LD_ADDR_EXP 31
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// oil_power_researched := false ;
  79: LD_ADDR_EXP 33
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// oil_engine_researched := false ;
  87: LD_ADDR_EXP 34
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// technology1_researched := false ;
  95: LD_ADDR_EXP 35
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// american_attack := false ;
 103: LD_ADDR_EXP 32
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// end_of_the_mission := false ;
 111: LD_ADDR_EXP 36
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// losses := false ;
 119: LD_ADDR_EXP 37
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// vehicle_constructed := false ;
 127: LD_ADDR_EXP 38
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// josif_landed := false ;
 135: LD_ADDR_EXP 39
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// josif_saved := false ;
 143: LD_ADDR_EXP 40
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// breastwork_builded := false ;
 151: LD_ADDR_EXP 41
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// armoury_builded := false ;
 159: LD_ADDR_EXP 42
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// maksim_coming := false ;
 167: LD_ADDR_EXP 43
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// KillCounter := 0 ;
 175: LD_ADDR_EXP 21
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// MaksimTime := 2 2$0 ;
 183: LD_ADDR_EXP 22
 187: PUSH
 188: LD_INT 4200
 190: ST_TO_ADDR
// end ;
 191: LD_VAR 0 1
 195: RET
// function DebugMode ; var i ; begin
 196: LD_INT 0
 198: PPUSH
 199: PPUSH
// if not debug then
 200: LD_EXP 24
 204: NOT
 205: IFFALSE 209
// exit ;
 207: GO 228
// Difficulty := 3 ;
 209: LD_ADDR_OWVAR 67
 213: PUSH
 214: LD_INT 3
 216: ST_TO_ADDR
// TurnFogOff ( ) ;
 217: CALL_OW 537
// FogOff ( 3 ) ;
 221: LD_INT 3
 223: PPUSH
 224: CALL_OW 344
// end ; end_of_file
 228: LD_VAR 0 1
 232: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
 237: PPUSH
// uc_side := GetSide ( b ) ;
 238: LD_ADDR_OWVAR 20
 242: PUSH
 243: LD_VAR 0 2
 247: PPUSH
 248: CALL_OW 255
 252: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 253: LD_ADDR_OWVAR 21
 257: PUSH
 258: LD_VAR 0 2
 262: PPUSH
 263: CALL_OW 248
 267: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 268: LD_ADDR_VAR 0 5
 272: PUSH
 273: LD_VAR 0 2
 277: PPUSH
 278: CALL_OW 254
 282: PUSH
 283: LD_INT 3
 285: MINUS
 286: ST_TO_ADDR
// if dir < 0 then
 287: LD_VAR 0 5
 291: PUSH
 292: LD_INT 0
 294: LESS
 295: IFFALSE 311
// dir := 6 + dir ;
 297: LD_ADDR_VAR 0 5
 301: PUSH
 302: LD_INT 6
 304: PUSH
 305: LD_VAR 0 5
 309: PLUS
 310: ST_TO_ADDR
// un := CreateHuman ;
 311: LD_ADDR_VAR 0 4
 315: PUSH
 316: CALL_OW 44
 320: ST_TO_ADDR
// SetDir ( un , dir ) ;
 321: LD_VAR 0 4
 325: PPUSH
 326: LD_VAR 0 5
 330: PPUSH
 331: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 335: LD_VAR 0 4
 339: PPUSH
 340: LD_VAR 0 2
 344: PPUSH
 345: CALL_OW 52
// end ;
 349: LD_VAR 0 3
 353: RET
// export function GetCountOfBuildingsInBase ( base , btype ) ; var i , tmp ; begin
 354: LD_INT 0
 356: PPUSH
 357: PPUSH
 358: PPUSH
// result := 0 ;
 359: LD_ADDR_VAR 0 3
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_btype , btype ] ) ;
 367: LD_ADDR_VAR 0 5
 371: PUSH
 372: LD_INT 30
 374: PUSH
 375: LD_VAR 0 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: ST_TO_ADDR
// if not base or not tmp then
 389: LD_VAR 0 1
 393: NOT
 394: PUSH
 395: LD_VAR 0 5
 399: NOT
 400: OR
 401: IFFALSE 405
// exit ;
 403: GO 453
// for i in tmp do
 405: LD_ADDR_VAR 0 4
 409: PUSH
 410: LD_VAR 0 5
 414: PUSH
 415: FOR_IN
 416: IFFALSE 451
// if GetBase ( i ) = base then
 418: LD_VAR 0 4
 422: PPUSH
 423: CALL_OW 274
 427: PUSH
 428: LD_VAR 0 1
 432: EQUAL
 433: IFFALSE 449
// result := result + 1 ;
 435: LD_ADDR_VAR 0 3
 439: PUSH
 440: LD_VAR 0 3
 444: PUSH
 445: LD_INT 1
 447: PLUS
 448: ST_TO_ADDR
 449: GO 415
 451: POP
 452: POP
// end ;
 453: LD_VAR 0 3
 457: RET
// every 1 trigger IsSelected ( Pezet ) do
 458: LD_INT 74
 460: PPUSH
 461: CALL_OW 306
 465: IFFALSE 569
 467: GO 469
 469: DISABLE
// begin PezetExp ( [ 1 , 2 , 3 , 4 ] ) ;
 470: LD_INT 1
 472: PUSH
 473: LD_INT 2
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 4
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: PPUSH
 488: CALL 570 0 1
// Wait ( 0 0$05 ) ;
 492: LD_INT 175
 494: PPUSH
 495: CALL_OW 67
// Say ( Pezet , 1Pezet-Sikret ) ;
 499: LD_INT 74
 501: PPUSH
 502: LD_STRING 1Pezet-Sikret
 504: PPUSH
 505: CALL_OW 88
// TeleportUnit ( Pezet , 139 , 74 , 120 , true ) ;
 509: LD_INT 74
 511: PPUSH
 512: LD_INT 139
 514: PPUSH
 515: LD_INT 74
 517: PPUSH
 518: LD_INT 120
 520: PPUSH
 521: LD_INT 1
 523: PPUSH
 524: CALL_OW 483
// Wait ( 0 0$05 ) ;
 528: LD_INT 175
 530: PPUSH
 531: CALL_OW 67
// RemoveUnit ( Pezet ) ;
 535: LD_INT 74
 537: PPUSH
 538: CALL_OW 64
// SaveVariable ( 1 , PezetSaved ) ;
 542: LD_INT 1
 544: PPUSH
 545: LD_STRING PezetSaved
 547: PPUSH
 548: CALL_OW 39
// SaveCharacters ( Pezet , Pezet ) ;
 552: LD_INT 74
 554: PPUSH
 555: LD_STRING Pezet
 557: PPUSH
 558: CALL_OW 38
// SetAchievement ( ACH_PEZET ) ;
 562: LD_STRING ACH_PEZET
 564: PPUSH
 565: CALL_OW 543
// end ;
 569: END
// export function PezetExp ( q ) ; var dec , q1 ; begin
 570: LD_INT 0
 572: PPUSH
 573: PPUSH
 574: PPUSH
// dec = SelectiveQuery ( PezetQuery , q ) ;
 575: LD_ADDR_VAR 0 3
 579: PUSH
 580: LD_STRING PezetQuery
 582: PPUSH
 583: LD_VAR 0 1
 587: PPUSH
 588: CALL_OW 98
 592: ST_TO_ADDR
// case dec of 1 :
 593: LD_VAR 0 3
 597: PUSH
 598: LD_INT 1
 600: DOUBLE
 601: EQUAL
 602: IFTRUE 606
 604: GO 624
 606: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 500 ) ;
 607: LD_EXP 1
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: LD_INT 500
 617: PPUSH
 618: CALL_OW 591
// end ; 2 :
 622: GO 703
 624: LD_INT 2
 626: DOUBLE
 627: EQUAL
 628: IFTRUE 632
 630: GO 650
 632: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 500 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 2
 640: PPUSH
 641: LD_INT 500
 643: PPUSH
 644: CALL_OW 591
// end ; 3 :
 648: GO 703
 650: LD_INT 3
 652: DOUBLE
 653: EQUAL
 654: IFTRUE 658
 656: GO 676
 658: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 500 ) ;
 659: LD_EXP 1
 663: PPUSH
 664: LD_INT 3
 666: PPUSH
 667: LD_INT 500
 669: PPUSH
 670: CALL_OW 591
// end ; 4 :
 674: GO 703
 676: LD_INT 4
 678: DOUBLE
 679: EQUAL
 680: IFTRUE 684
 682: GO 702
 684: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 500 ) ;
 685: LD_EXP 1
 689: PPUSH
 690: LD_INT 4
 692: PPUSH
 693: LD_INT 500
 695: PPUSH
 696: CALL_OW 591
// end ; end ;
 700: GO 703
 702: POP
// end ;
 703: LD_VAR 0 2
 707: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 301
 717: IFFALSE 729
 719: GO 721
 721: DISABLE
// begin YouLost ( YakotichDead ) ;
 722: LD_STRING YakotichDead
 724: PPUSH
 725: CALL_OW 104
// end ;
 729: END
// every 0 0$1 trigger IsDead ( Mietek ) do
 730: LD_EXP 2
 734: PPUSH
 735: CALL_OW 301
 739: IFFALSE 751
 741: GO 743
 743: DISABLE
// begin YouLost ( MietekDead ) ;
 744: LD_STRING MietekDead
 746: PPUSH
 747: CALL_OW 104
// end ;
 751: END
// every 0 0$1 trigger maksim_coming = true do
 752: LD_EXP 43
 756: PUSH
 757: LD_INT 1
 759: EQUAL
 760: IFFALSE 814
 762: GO 764
 764: DISABLE
// begin enable ;
 765: ENABLE
// if MaksimTime then
 766: LD_EXP 22
 770: IFFALSE 805
// begin MaksimTime := MaksimTime - 0 0$1 ;
 772: LD_ADDR_EXP 22
 776: PUSH
 777: LD_EXP 22
 781: PUSH
 782: LD_INT 35
 784: MINUS
 785: ST_TO_ADDR
// display_strings := [ #MaksimTime , MaksimTime ] ;
 786: LD_ADDR_OWVAR 47
 790: PUSH
 791: LD_STRING #MaksimTime
 793: PUSH
 794: LD_EXP 22
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: ST_TO_ADDR
// end else
 803: GO 814
// begin display_strings :=  ;
 805: LD_ADDR_OWVAR 47
 809: PUSH
 810: LD_STRING 
 812: ST_TO_ADDR
// disable ;
 813: DISABLE
// end ; end ; end_of_file
 814: END
// export function InitRussian ; begin
 815: LD_INT 0
 817: PPUSH
// Uc_Nation := 3 ;
 818: LD_ADDR_OWVAR 21
 822: PUSH
 823: LD_INT 3
 825: ST_TO_ADDR
// Uc_Side := 3 ;
 826: LD_ADDR_OWVAR 20
 830: PUSH
 831: LD_INT 3
 833: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , false ,  ) ;
 834: LD_ADDR_EXP 1
 838: PUSH
 839: LD_STRING Yakotich
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: LD_STRING 
 847: PPUSH
 848: CALL 4250 0 3
 852: ST_TO_ADDR
// Uc_Side := 6 ;
 853: LD_ADDR_OWVAR 20
 857: PUSH
 858: LD_INT 6
 860: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , false ,  ) ;
 861: LD_ADDR_EXP 2
 865: PUSH
 866: LD_STRING Mietek
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: LD_STRING 
 874: PPUSH
 875: CALL 4250 0 3
 879: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , false ,  ) ;
 880: LD_ADDR_EXP 3
 884: PUSH
 885: LD_STRING Boris
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: LD_STRING 
 893: PPUSH
 894: CALL 4250 0 3
 898: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , false ,  ) ;
 899: LD_ADDR_EXP 5
 903: PUSH
 904: LD_STRING Michail
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: LD_STRING 
 912: PPUSH
 913: CALL 4250 0 3
 917: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , false ,  ) ;
 918: LD_ADDR_EXP 4
 922: PUSH
 923: LD_STRING Vasilij
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: LD_STRING 
 931: PPUSH
 932: CALL 4250 0 3
 936: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , false ,  ) ;
 937: LD_ADDR_EXP 6
 941: PUSH
 942: LD_STRING Constantin
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: LD_STRING 
 950: PPUSH
 951: CALL 4250 0 3
 955: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , false ,  ) ;
 956: LD_ADDR_EXP 7
 960: PUSH
 961: LD_STRING Maksim
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: LD_STRING 
 969: PPUSH
 970: CALL 4250 0 3
 974: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , false ,  ) ;
 975: LD_ADDR_EXP 8
 979: PUSH
 980: LD_STRING Fiodor
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: LD_STRING 
 988: PPUSH
 989: CALL 4250 0 3
 993: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , false ,  ) ;
 994: LD_ADDR_EXP 11
 998: PUSH
 999: LD_STRING Aleksiej
1001: PPUSH
1002: LD_INT 0
1004: PPUSH
1005: LD_STRING 
1007: PPUSH
1008: CALL 4250 0 3
1012: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , false ,  ) ;
1013: LD_ADDR_EXP 9
1017: PUSH
1018: LD_STRING Pavel
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: LD_STRING 
1026: PPUSH
1027: CALL 4250 0 3
1031: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , false ,  ) ;
1032: LD_ADDR_EXP 10
1036: PUSH
1037: LD_STRING Zakhar
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: LD_STRING 
1045: PPUSH
1046: CALL 4250 0 3
1050: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Maksim ;
1051: LD_ADDR_EXP 14
1055: PUSH
1056: LD_EXP 14
1060: PUSH
1061: LD_EXP 7
1065: ADD
1066: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Fiodor ;
1067: LD_ADDR_EXP 14
1071: PUSH
1072: LD_EXP 14
1076: PUSH
1077: LD_EXP 8
1081: ADD
1082: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Aleksiej ;
1083: LD_ADDR_EXP 14
1087: PUSH
1088: LD_EXP 14
1092: PUSH
1093: LD_EXP 11
1097: ADD
1098: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Pavel ;
1099: LD_ADDR_EXP 14
1103: PUSH
1104: LD_EXP 14
1108: PUSH
1109: LD_EXP 9
1113: ADD
1114: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Zakhar ;
1115: LD_ADDR_EXP 14
1119: PUSH
1120: LD_EXP 14
1124: PUSH
1125: LD_EXP 10
1129: ADD
1130: ST_TO_ADDR
// Uc_Side := 5 ;
1131: LD_ADDR_OWVAR 20
1135: PUSH
1136: LD_INT 5
1138: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , false ,  ) ;
1139: LD_ADDR_EXP 12
1143: PUSH
1144: LD_STRING Aleksandr
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: LD_STRING 
1152: PPUSH
1153: CALL 4250 0 3
1157: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false ,  ) ;
1158: LD_ADDR_EXP 13
1162: PUSH
1163: LD_STRING Josif
1165: PPUSH
1166: LD_INT 0
1168: PPUSH
1169: LD_STRING 
1171: PPUSH
1172: CALL 4250 0 3
1176: ST_TO_ADDR
// PlaceHumanInUnit ( Constantin , RuB3 ) ;
1177: LD_EXP 6
1181: PPUSH
1182: LD_INT 90
1184: PPUSH
1185: CALL_OW 52
// PlaceHumanInUnit ( Boris , RuDep ) ;
1189: LD_EXP 3
1193: PPUSH
1194: LD_INT 15
1196: PPUSH
1197: CALL_OW 52
// PlaceUnitArea ( Vasilij , Civilians , false ) ;
1201: LD_EXP 4
1205: PPUSH
1206: LD_INT 1
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL_OW 49
// PlaceUnitArea ( Michail , Civilians , false ) ;
1216: LD_EXP 5
1220: PPUSH
1221: LD_INT 1
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 49
// PlaceUnitArea ( Mietek , RyniakovSpawn , false ) ;
1231: LD_EXP 2
1235: PPUSH
1236: LD_INT 2
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// ComTurnUnit ( [ Michail , Vasilij ] , Mietek ) ;
1246: LD_EXP 5
1250: PUSH
1251: LD_EXP 4
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PPUSH
1260: LD_EXP 2
1264: PPUSH
1265: CALL_OW 119
// ComTurnUnit ( Mietek , Vasilij ) ;
1269: LD_EXP 2
1273: PPUSH
1274: LD_EXP 4
1278: PPUSH
1279: CALL_OW 119
// end ; end_of_file
1283: LD_VAR 0 1
1287: RET
// export function InitAmerican ; var i , j , k ; begin
1288: LD_INT 0
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
// Uc_Side = 4 ;
1294: LD_ADDR_OWVAR 20
1298: PUSH
1299: LD_INT 4
1301: ST_TO_ADDR
// Uc_Nation = 1 ;
1302: LD_ADDR_OWVAR 21
1306: PUSH
1307: LD_INT 1
1309: ST_TO_ADDR
// AmCommander := PrepareUnit ( AmCommander , false ,  ) ;
1310: LD_ADDR_EXP 19
1314: PUSH
1315: LD_STRING AmCommander
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: LD_STRING 
1323: PPUSH
1324: CALL 4250 0 3
1328: ST_TO_ADDR
// Americans := Americans ^ AmCommander ;
1329: LD_ADDR_EXP 20
1333: PUSH
1334: LD_EXP 20
1338: PUSH
1339: LD_EXP 19
1343: ADD
1344: ST_TO_ADDR
// PlaceUnitArea ( AmCommander , AmAttacks , false ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_INT 6
1352: PPUSH
1353: LD_INT 0
1355: PPUSH
1356: CALL_OW 49
// for i = 1 to [ 4 , 7 , 11 ] [ Difficulty ] do
1360: LD_ADDR_VAR 0 2
1364: PUSH
1365: DOUBLE
1366: LD_INT 1
1368: DEC
1369: ST_TO_ADDR
1370: LD_INT 4
1372: PUSH
1373: LD_INT 7
1375: PUSH
1376: LD_INT 11
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: LIST
1383: PUSH
1384: LD_OWVAR 67
1388: ARRAY
1389: PUSH
1390: FOR_TO
1391: IFFALSE 1471
// begin PrepareSoldier ( rand ( 1 , 2 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
1393: LD_INT 1
1395: PPUSH
1396: LD_INT 2
1398: PPUSH
1399: CALL_OW 12
1403: PPUSH
1404: LD_INT 0
1406: PUSH
1407: LD_INT 2
1409: PUSH
1410: LD_INT 4
1412: PUSH
1413: EMPTY
1414: LIST
1415: LIST
1416: LIST
1417: PUSH
1418: LD_OWVAR 67
1422: ARRAY
1423: PPUSH
1424: CALL_OW 381
// AmS = CreateHuman ;
1428: LD_ADDR_EXP 16
1432: PUSH
1433: CALL_OW 44
1437: ST_TO_ADDR
// Americans := Americans ^ AmS ;
1438: LD_ADDR_EXP 20
1442: PUSH
1443: LD_EXP 20
1447: PUSH
1448: LD_EXP 16
1452: ADD
1453: ST_TO_ADDR
// PlaceUnitArea ( AmS , AmAttacks , false ) ;
1454: LD_EXP 16
1458: PPUSH
1459: LD_INT 6
1461: PPUSH
1462: LD_INT 0
1464: PPUSH
1465: CALL_OW 49
// end ;
1469: GO 1390
1471: POP
1472: POP
// for j = 1 to [ 0 , 1 , 3 ] [ Difficulty ] do
1473: LD_ADDR_VAR 0 3
1477: PUSH
1478: DOUBLE
1479: LD_INT 1
1481: DEC
1482: ST_TO_ADDR
1483: LD_INT 0
1485: PUSH
1486: LD_INT 1
1488: PUSH
1489: LD_INT 3
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: LIST
1496: PUSH
1497: LD_OWVAR 67
1501: ARRAY
1502: PUSH
1503: FOR_TO
1504: IFFALSE 1584
// begin PrepareScientist ( rand ( 1 , 2 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
1506: LD_INT 1
1508: PPUSH
1509: LD_INT 2
1511: PPUSH
1512: CALL_OW 12
1516: PPUSH
1517: LD_INT 0
1519: PUSH
1520: LD_INT 2
1522: PUSH
1523: LD_INT 4
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_OWVAR 67
1535: ARRAY
1536: PPUSH
1537: CALL_OW 384
// AmSc = CreateHuman ;
1541: LD_ADDR_EXP 17
1545: PUSH
1546: CALL_OW 44
1550: ST_TO_ADDR
// Americans := Americans ^ AmSc ;
1551: LD_ADDR_EXP 20
1555: PUSH
1556: LD_EXP 20
1560: PUSH
1561: LD_EXP 17
1565: ADD
1566: ST_TO_ADDR
// PlaceUnitArea ( AmSc , AmAttacks , false ) ;
1567: LD_EXP 17
1571: PPUSH
1572: LD_INT 6
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 49
// end ;
1582: GO 1503
1584: POP
1585: POP
// end ;
1586: LD_VAR 0 1
1590: RET
// every 2 2$30 trigger yakotich_in_base = true do
1591: LD_EXP 28
1595: PUSH
1596: LD_INT 1
1598: EQUAL
1599: IFFALSE 1712
1601: GO 1603
1603: DISABLE
// begin Uc_Side = 1 ;
1604: LD_ADDR_OWVAR 20
1608: PUSH
1609: LD_INT 1
1611: ST_TO_ADDR
// Uc_Nation = 1 ;
1612: LD_ADDR_OWVAR 21
1616: PUSH
1617: LD_INT 1
1619: ST_TO_ADDR
// PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 5 ] [ Difficulty ] ) ;
1620: LD_INT 0
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: CALL_OW 12
1630: PPUSH
1631: LD_INT 2
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: LD_INT 5
1639: PUSH
1640: EMPTY
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_OWVAR 67
1649: ARRAY
1650: PPUSH
1651: CALL_OW 381
// AMSS = CreateHuman ;
1655: LD_ADDR_EXP 18
1659: PUSH
1660: CALL_OW 44
1664: ST_TO_ADDR
// Americans := Americans ^ AMSS ;
1665: LD_ADDR_EXP 20
1669: PUSH
1670: LD_EXP 20
1674: PUSH
1675: LD_EXP 18
1679: ADD
1680: ST_TO_ADDR
// PlaceUnitArea ( AMSS , AmSpawners , true ) ;
1681: LD_EXP 18
1685: PPUSH
1686: LD_INT 11
1688: PPUSH
1689: LD_INT 1
1691: PPUSH
1692: CALL_OW 49
// ComAgressiveMove ( AMSS , 92 , 69 ) ;
1696: LD_EXP 18
1700: PPUSH
1701: LD_INT 92
1703: PPUSH
1704: LD_INT 69
1706: PPUSH
1707: CALL_OW 114
// enable ;
1711: ENABLE
// end ; end_of_file
1712: END
// export function Action ; var i ; begin
1713: LD_INT 0
1715: PPUSH
1716: PPUSH
// InGameOn ;
1717: CALL_OW 8
// CenterOnXY ( 100 , 48 ) ;
1721: LD_INT 100
1723: PPUSH
1724: LD_INT 48
1726: PPUSH
1727: CALL_OW 84
// Wait ( 0 0$1 ) ;
1731: LD_INT 35
1733: PPUSH
1734: CALL_OW 67
// PlaceUnitArea ( Yakotich , YakotichSpawn , true ) ;
1738: LD_EXP 1
1742: PPUSH
1743: LD_INT 5
1745: PPUSH
1746: LD_INT 1
1748: PPUSH
1749: CALL_OW 49
// Wait ( 0 0$3 ) ;
1753: LD_INT 105
1755: PPUSH
1756: CALL_OW 67
// Say ( Yakotich , 1Yak-01 ) ;
1760: LD_EXP 1
1764: PPUSH
1765: LD_STRING 1Yak-01
1767: PPUSH
1768: CALL_OW 88
// Wait ( 0 0$2 ) ;
1772: LD_INT 70
1774: PPUSH
1775: CALL_OW 67
// Say ( Yakotich , 1Yak-02 ) ;
1779: LD_EXP 1
1783: PPUSH
1784: LD_STRING 1Yak-02
1786: PPUSH
1787: CALL_OW 88
// SayRadio ( Yakotich , 1Yak-03 ) ;
1791: LD_EXP 1
1795: PPUSH
1796: LD_STRING 1Yak-03
1798: PPUSH
1799: CALL_OW 94
// Wait ( 0 0$2 ) ;
1803: LD_INT 70
1805: PPUSH
1806: CALL_OW 67
// Say ( Yakotich , 1Yak-04 ) ;
1810: LD_EXP 1
1814: PPUSH
1815: LD_STRING 1Yak-04
1817: PPUSH
1818: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
1822: LD_STRING o1
1824: PPUSH
1825: CALL_OW 337
// InGameOff ;
1829: CALL_OW 9
// end ;
1833: LD_VAR 0 1
1837: RET
// every 0 0$1 trigger FilterUnitsInArea ( ForestOut , [ [ f_side , 3 ] ] ) do
1838: LD_INT 7
1840: PPUSH
1841: LD_INT 22
1843: PUSH
1844: LD_INT 3
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: PPUSH
1854: CALL_OW 70
1858: IFFALSE 1875
1860: GO 1862
1862: DISABLE
// begin Say ( Yakotich , 1Yak-Random1 ) ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_STRING 1Yak-Random1
1870: PPUSH
1871: CALL_OW 88
// end ;
1875: END
// every 0 0$1 trigger See ( 3 , RuB1 ) or See ( 3 , RuB2 ) or See ( 3 , RuB3 ) do
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 18
1881: PPUSH
1882: CALL_OW 292
1886: PUSH
1887: LD_INT 3
1889: PPUSH
1890: LD_INT 85
1892: PPUSH
1893: CALL_OW 292
1897: OR
1898: PUSH
1899: LD_INT 3
1901: PPUSH
1902: LD_INT 90
1904: PPUSH
1905: CALL_OW 292
1909: OR
1910: IFFALSE 1995
1912: GO 1914
1914: DISABLE
// begin CenterOnXY ( 24 , 17 ) ;
1915: LD_INT 24
1917: PPUSH
1918: LD_INT 17
1920: PPUSH
1921: CALL_OW 84
// DialogueOn ;
1925: CALL_OW 6
// Say ( Constantin , 1M-01 ) ;
1929: LD_EXP 6
1933: PPUSH
1934: LD_STRING 1M-01
1936: PPUSH
1937: CALL_OW 88
// Say ( Yakotich , 1Yak-05 ) ;
1941: LD_EXP 1
1945: PPUSH
1946: LD_STRING 1Yak-05
1948: PPUSH
1949: CALL_OW 88
// Say ( Constantin , 1M-02 ) ;
1953: LD_EXP 6
1957: PPUSH
1958: LD_STRING 1M-02
1960: PPUSH
1961: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
1965: LD_INT 6
1967: PPUSH
1968: LD_INT 3
1970: PPUSH
1971: CALL_OW 343
// DialogueOff ;
1975: CALL_OW 7
// InGameOn ;
1979: CALL_OW 8
// ComMoveToArea ( Yakotich , Checkpoint ) ;
1983: LD_EXP 1
1987: PPUSH
1988: LD_INT 3
1990: PPUSH
1991: CALL_OW 113
// end ;
1995: END
// every 0 0$1 trigger FilterUnitsInArea ( Checkpoint , [ [ f_side , 3 ] ] ) do
1996: LD_INT 3
1998: PPUSH
1999: LD_INT 22
2001: PUSH
2002: LD_INT 3
2004: PUSH
2005: EMPTY
2006: LIST
2007: LIST
2008: PUSH
2009: EMPTY
2010: LIST
2011: PPUSH
2012: CALL_OW 70
2016: IFFALSE 2402
2018: GO 2020
2020: DISABLE
// begin ComTurnUnit ( Yakotich , Mietek ) ;
2021: LD_EXP 1
2025: PPUSH
2026: LD_EXP 2
2030: PPUSH
2031: CALL_OW 119
// Say ( Yakotich , 1Yak-06 ) ;
2035: LD_EXP 1
2039: PPUSH
2040: LD_STRING 1Yak-06
2042: PPUSH
2043: CALL_OW 88
// ComTurnUnit ( Mietek , Yakotich ) ;
2047: LD_EXP 2
2051: PPUSH
2052: LD_EXP 1
2056: PPUSH
2057: CALL_OW 119
// Wait ( 0 0$1 ) ;
2061: LD_INT 35
2063: PPUSH
2064: CALL_OW 67
// Say ( Mietek , 1Ryn-01 ) ;
2068: LD_EXP 2
2072: PPUSH
2073: LD_STRING 1Ryn-01
2075: PPUSH
2076: CALL_OW 88
// Say ( Mietek , 1Ryn-02 ) ;
2080: LD_EXP 2
2084: PPUSH
2085: LD_STRING 1Ryn-02
2087: PPUSH
2088: CALL_OW 88
// Say ( Mietek , 1Ryn-03 ) ;
2092: LD_EXP 2
2096: PPUSH
2097: LD_STRING 1Ryn-03
2099: PPUSH
2100: CALL_OW 88
// Say ( Yakotich , 1Yak-07 ) ;
2104: LD_EXP 1
2108: PPUSH
2109: LD_STRING 1Yak-07
2111: PPUSH
2112: CALL_OW 88
// Say ( Mietek , 1Ryn-04 ) ;
2116: LD_EXP 2
2120: PPUSH
2121: LD_STRING 1Ryn-04
2123: PPUSH
2124: CALL_OW 88
// Say ( Mietek , 1Ryn-05 ) ;
2128: LD_EXP 2
2132: PPUSH
2133: LD_STRING 1Ryn-05
2135: PPUSH
2136: CALL_OW 88
// ComMoveXY ( Vasilij , 20 , 15 ) ;
2140: LD_EXP 4
2144: PPUSH
2145: LD_INT 20
2147: PPUSH
2148: LD_INT 15
2150: PPUSH
2151: CALL_OW 111
// AddComTurnUnit ( Vasilij , Yakotich ) ;
2155: LD_EXP 4
2159: PPUSH
2160: LD_EXP 1
2164: PPUSH
2165: CALL_OW 179
// Say ( Vasilij , 1Vas-01 ) ;
2169: LD_EXP 4
2173: PPUSH
2174: LD_STRING 1Vas-01
2176: PPUSH
2177: CALL_OW 88
// Say ( Vasilij , 1Vas-02 ) ;
2181: LD_EXP 4
2185: PPUSH
2186: LD_STRING 1Vas-02
2188: PPUSH
2189: CALL_OW 88
// Say ( Vasilij , 1Vas-03 ) ;
2193: LD_EXP 4
2197: PPUSH
2198: LD_STRING 1Vas-03
2200: PPUSH
2201: CALL_OW 88
// Say ( Vasilij , 1Vas-04 ) ;
2205: LD_EXP 4
2209: PPUSH
2210: LD_STRING 1Vas-04
2212: PPUSH
2213: CALL_OW 88
// Say ( Vasilij , 1Vas-05 ) ;
2217: LD_EXP 4
2221: PPUSH
2222: LD_STRING 1Vas-05
2224: PPUSH
2225: CALL_OW 88
// Say ( Yakotich , 1Yak-08 ) ;
2229: LD_EXP 1
2233: PPUSH
2234: LD_STRING 1Yak-08
2236: PPUSH
2237: CALL_OW 88
// Say ( Mietek , 1Ryn-06 ) ;
2241: LD_EXP 2
2245: PPUSH
2246: LD_STRING 1Ryn-06
2248: PPUSH
2249: CALL_OW 88
// Say ( Mietek , 1Ryn-07 ) ;
2253: LD_EXP 2
2257: PPUSH
2258: LD_STRING 1Ryn-07
2260: PPUSH
2261: CALL_OW 88
// Say ( Yakotich , 1Yak-09 ) ;
2265: LD_EXP 1
2269: PPUSH
2270: LD_STRING 1Yak-09
2272: PPUSH
2273: CALL_OW 88
// InGameOff ;
2277: CALL_OW 9
// yakotich_in_base = true ;
2281: LD_ADDR_EXP 28
2285: PUSH
2286: LD_INT 1
2288: ST_TO_ADDR
// ChangeMissionObjectives ( o4 ) ;
2289: LD_STRING o4
2291: PPUSH
2292: CALL_OW 337
// SetSide ( [ Mietek , Vasilij , Constantin , Michail , Boris , RuDep , RuB1 , RuB2 , RuB3 , RuOil ] , 3 ) ;
2296: LD_EXP 2
2300: PUSH
2301: LD_EXP 4
2305: PUSH
2306: LD_EXP 6
2310: PUSH
2311: LD_EXP 5
2315: PUSH
2316: LD_EXP 3
2320: PUSH
2321: LD_INT 15
2323: PUSH
2324: LD_INT 18
2326: PUSH
2327: LD_INT 85
2329: PUSH
2330: LD_INT 90
2332: PUSH
2333: LD_INT 16
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: LIST
2345: LIST
2346: LIST
2347: PPUSH
2348: LD_INT 3
2350: PPUSH
2351: CALL_OW 235
// SaveForQuickRestart ;
2355: CALL_OW 22
// Hint ( Balance ) ;
2359: LD_STRING Balance
2361: PPUSH
2362: CALL_OW 339
// Say ( Michail , 1Mich-01 ) ;
2366: LD_EXP 5
2370: PPUSH
2371: LD_STRING 1Mich-01
2373: PPUSH
2374: CALL_OW 88
// Say ( Michail , 1Mich-02 ) ;
2378: LD_EXP 5
2382: PPUSH
2383: LD_STRING 1Mich-02
2385: PPUSH
2386: CALL_OW 88
// Say ( Yakotich , 1Yak-10 ) ;
2390: LD_EXP 1
2394: PPUSH
2395: LD_STRING 1Yak-10
2397: PPUSH
2398: CALL_OW 88
// end ;
2402: END
// every 0 0$1 trigger yakotich_in_base = true do
2403: LD_EXP 28
2407: PUSH
2408: LD_INT 1
2410: EQUAL
2411: IFFALSE 2789
2413: GO 2415
2415: DISABLE
// begin Wait ( 5 5$0 ) ;
2416: LD_INT 10500
2418: PPUSH
2419: CALL_OW 67
// PlaceUnitArea ( Aleksandr , AleksandrSpawn , true ) ;
2423: LD_EXP 12
2427: PPUSH
2428: LD_INT 8
2430: PPUSH
2431: LD_INT 1
2433: PPUSH
2434: CALL_OW 49
// InGameOn ;
2438: CALL_OW 8
// DialogueOn ;
2442: CALL_OW 6
// SayRadio ( Aleksandr , 1Alek-Alek1 ) ;
2446: LD_EXP 12
2450: PPUSH
2451: LD_STRING 1Alek-Alek1
2453: PPUSH
2454: CALL_OW 94
// SayRadio ( Yakotich , 1Yak-Alek1 ) ;
2458: LD_EXP 1
2462: PPUSH
2463: LD_STRING 1Yak-Alek1
2465: PPUSH
2466: CALL_OW 94
// SayRadio ( Aleksandr , 1Alek-Alek2 ) ;
2470: LD_EXP 12
2474: PPUSH
2475: LD_STRING 1Alek-Alek2
2477: PPUSH
2478: CALL_OW 94
// SayRadio ( Mietek , 1Ryn-Alek1 ) ;
2482: LD_EXP 2
2486: PPUSH
2487: LD_STRING 1Ryn-Alek1
2489: PPUSH
2490: CALL_OW 94
// Say ( Mietek , 1Ryn-Alek2 ) ;
2494: LD_EXP 2
2498: PPUSH
2499: LD_STRING 1Ryn-Alek2
2501: PPUSH
2502: CALL_OW 88
// RevealFogArea ( 3 , River ) ;
2506: LD_INT 3
2508: PPUSH
2509: LD_INT 10
2511: PPUSH
2512: CALL_OW 332
// InGameOff ;
2516: CALL_OW 9
// DialogueOff ;
2520: CALL_OW 7
// Wait ( 2 2$0 ) ;
2524: LD_INT 4200
2526: PPUSH
2527: CALL_OW 67
// InGameOn ;
2531: CALL_OW 8
// DialogueOn ;
2535: CALL_OW 6
// SayRadio ( Maksim , 1Maks-Attack-01 ) ;
2539: LD_EXP 7
2543: PPUSH
2544: LD_STRING 1Maks-Attack-01
2546: PPUSH
2547: CALL_OW 94
// SayRadio ( Mietek , 1Ryn-Attack-01 ) ;
2551: LD_EXP 2
2555: PPUSH
2556: LD_STRING 1Ryn-Attack-01
2558: PPUSH
2559: CALL_OW 94
// SayRadio ( Maksim , 1Maks-Attack-02 ) ;
2563: LD_EXP 7
2567: PPUSH
2568: LD_STRING 1Maks-Attack-02
2570: PPUSH
2571: CALL_OW 94
// SayRadio ( Maksim , 1Maks-Attack-03 ) ;
2575: LD_EXP 7
2579: PPUSH
2580: LD_STRING 1Maks-Attack-03
2582: PPUSH
2583: CALL_OW 94
// Say ( Mietek , 1Ryn-Attack-02 ) ;
2587: LD_EXP 2
2591: PPUSH
2592: LD_STRING 1Ryn-Attack-02
2594: PPUSH
2595: CALL_OW 88
// ChangeMissionObjectives ( o10 ) ;
2599: LD_STRING o10
2601: PPUSH
2602: CALL_OW 337
// maksim_coming = true ;
2606: LD_ADDR_EXP 43
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// InGameOff ;
2614: CALL_OW 9
// DialogueOff ;
2618: CALL_OW 7
// Wait ( 2 2$0 ) ;
2622: LD_INT 4200
2624: PPUSH
2625: CALL_OW 67
// PlaceUnitArea ( Maksim , AmAttacks , false ) ;
2629: LD_EXP 7
2633: PPUSH
2634: LD_INT 6
2636: PPUSH
2637: LD_INT 0
2639: PPUSH
2640: CALL_OW 49
// PlaceUnitArea ( Fiodor , AmAttacks , false ) ;
2644: LD_EXP 8
2648: PPUSH
2649: LD_INT 6
2651: PPUSH
2652: LD_INT 0
2654: PPUSH
2655: CALL_OW 49
// PlaceUnitArea ( Aleksiej , AmAttacks , false ) ;
2659: LD_EXP 11
2663: PPUSH
2664: LD_INT 6
2666: PPUSH
2667: LD_INT 0
2669: PPUSH
2670: CALL_OW 49
// PlaceUnitArea ( Pavel , AmAttacks , false ) ;
2674: LD_EXP 9
2678: PPUSH
2679: LD_INT 6
2681: PPUSH
2682: LD_INT 0
2684: PPUSH
2685: CALL_OW 49
// PlaceUnitArea ( Zakhar , AmAttacks , false ) ;
2689: LD_EXP 10
2693: PPUSH
2694: LD_INT 6
2696: PPUSH
2697: LD_INT 0
2699: PPUSH
2700: CALL_OW 49
// ComMoveToArea ( MaksimCrew , CheckPoint ) ;
2704: LD_EXP 14
2708: PPUSH
2709: LD_INT 3
2711: PPUSH
2712: CALL_OW 113
// Say ( Maksim , 1Maks-Attack-04 ) ;
2716: LD_EXP 7
2720: PPUSH
2721: LD_STRING 1Maks-Attack-04
2723: PPUSH
2724: CALL_OW 88
// Wait ( 0 0$8 ) ;
2728: LD_INT 280
2730: PPUSH
2731: CALL_OW 67
// InitAmerican ;
2735: CALL 1288 0 0
// Say ( AmCommander , 1Andrew-Attack ) ;
2739: LD_EXP 19
2743: PPUSH
2744: LD_STRING 1Andrew-Attack
2746: PPUSH
2747: CALL_OW 88
// ComMoveXY ( Americans , 48 , 42 ) ;
2751: LD_EXP 20
2755: PPUSH
2756: LD_INT 48
2758: PPUSH
2759: LD_INT 42
2761: PPUSH
2762: CALL_OW 111
// AddComAgressiveMove ( Americans , 26 , 16 ) ;
2766: LD_EXP 20
2770: PPUSH
2771: LD_INT 26
2773: PPUSH
2774: LD_INT 16
2776: PPUSH
2777: CALL_OW 174
// american_attack = true ;
2781: LD_ADDR_EXP 32
2785: PUSH
2786: LD_INT 1
2788: ST_TO_ADDR
// end ;
2789: END
// every 0 0$1 trigger american_attack = true and IsDead ( AmCommander ) do
2790: LD_EXP 32
2794: PUSH
2795: LD_INT 1
2797: EQUAL
2798: PUSH
2799: LD_EXP 19
2803: PPUSH
2804: CALL_OW 301
2808: AND
2809: IFFALSE 2854
2811: GO 2813
2813: DISABLE
// begin InGameOn ;
2814: CALL_OW 8
// Say ( Yakotich , 1Yak-Attack-01 ) ;
2818: LD_EXP 1
2822: PPUSH
2823: LD_STRING 1Yak-Attack-01
2825: PPUSH
2826: CALL_OW 88
// Say ( Yakotich , 1Yak-Attack-02 ) ;
2830: LD_EXP 1
2834: PPUSH
2835: LD_STRING 1Yak-Attack-02
2837: PPUSH
2838: CALL_OW 88
// end_of_the_mission = true ;
2842: LD_ADDR_EXP 36
2846: PUSH
2847: LD_INT 1
2849: ST_TO_ADDR
// InGameOff ;
2850: CALL_OW 9
// end ;
2854: END
// every 0 0$1 trigger end_of_the_mission = true and yakotich_in_base = true and IsDead ( AmCommander ) do
2855: LD_EXP 36
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: PUSH
2864: LD_EXP 28
2868: PUSH
2869: LD_INT 1
2871: EQUAL
2872: AND
2873: PUSH
2874: LD_EXP 19
2878: PPUSH
2879: CALL_OW 301
2883: AND
2884: IFFALSE 3227
2886: GO 2888
2888: DISABLE
// begin AddMedal ( People , 1 ) ;
2889: LD_STRING People
2891: PPUSH
2892: LD_INT 1
2894: PPUSH
2895: CALL_OW 101
// if IsOk ( Aleksandr ) then
2899: LD_EXP 12
2903: PPUSH
2904: CALL_OW 302
2908: IFFALSE 2922
// AddMedal ( Aleksandr , 1 ) else
2910: LD_STRING Aleksandr
2912: PPUSH
2913: LD_INT 1
2915: PPUSH
2916: CALL_OW 101
2920: GO 2933
// AddMedal ( Aleksandr , - 1 ) ;
2922: LD_STRING Aleksandr
2924: PPUSH
2925: LD_INT 1
2927: NEG
2928: PPUSH
2929: CALL_OW 101
// if Researched ( 3 , 48 ) and Researched ( 3 , 47 ) and Researched ( 3 , 46 ) and vehicle_constructed = true then
2933: LD_INT 3
2935: PPUSH
2936: LD_INT 48
2938: PPUSH
2939: CALL_OW 325
2943: PUSH
2944: LD_INT 3
2946: PPUSH
2947: LD_INT 47
2949: PPUSH
2950: CALL_OW 325
2954: AND
2955: PUSH
2956: LD_INT 3
2958: PPUSH
2959: LD_INT 46
2961: PPUSH
2962: CALL_OW 325
2966: AND
2967: PUSH
2968: LD_EXP 38
2972: PUSH
2973: LD_INT 1
2975: EQUAL
2976: AND
2977: IFFALSE 2991
// AddMedal ( Secondary , 1 ) else
2979: LD_STRING Secondary
2981: PPUSH
2982: LD_INT 1
2984: PPUSH
2985: CALL_OW 101
2989: GO 3002
// AddMedal ( Secondary , - 1 ) ;
2991: LD_STRING Secondary
2993: PPUSH
2994: LD_INT 1
2996: NEG
2997: PPUSH
2998: CALL_OW 101
// GiveMedals ( Medals ) ;
3002: LD_STRING Medals
3004: PPUSH
3005: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
3009: LD_INT 22
3011: PUSH
3012: LD_INT 3
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 23
3021: PUSH
3022: LD_INT 3
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PUSH
3029: LD_INT 21
3031: PUSH
3032: LD_INT 1
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: LIST
3043: PPUSH
3044: CALL_OW 69
3048: PPUSH
3049: CALL_OW 43
// SaveCharacters ( Yakotich , 01_Yakotich ) ;
3053: LD_EXP 1
3057: PPUSH
3058: LD_STRING 01_Yakotich
3060: PPUSH
3061: CALL_OW 38
// SaveCharacters ( Mietek , 01_Mietek ) ;
3065: LD_EXP 2
3069: PPUSH
3070: LD_STRING 01_Mietek
3072: PPUSH
3073: CALL_OW 38
// SaveCharacters ( Maksim , 01_Maksim ) ;
3077: LD_EXP 7
3081: PPUSH
3082: LD_STRING 01_Maksim
3084: PPUSH
3085: CALL_OW 38
// SaveCharacters ( Michail , 01_Michail ) ;
3089: LD_EXP 5
3093: PPUSH
3094: LD_STRING 01_Michail
3096: PPUSH
3097: CALL_OW 38
// SaveCharacters ( Vasilij , 01_Vasilij ) ;
3101: LD_EXP 4
3105: PPUSH
3106: LD_STRING 01_Vasilij
3108: PPUSH
3109: CALL_OW 38
// SaveCharacters ( Boris , 01_Boris ) ;
3113: LD_EXP 3
3117: PPUSH
3118: LD_STRING 01_Boris
3120: PPUSH
3121: CALL_OW 38
// SaveCharacters ( Constantin , 01_Constantin ) ;
3125: LD_EXP 6
3129: PPUSH
3130: LD_STRING 01_Constantin
3132: PPUSH
3133: CALL_OW 38
// SaveCharacters ( Fiodor , 01_Fiodor ) ;
3137: LD_EXP 8
3141: PPUSH
3142: LD_STRING 01_Fiodor
3144: PPUSH
3145: CALL_OW 38
// SaveCharacters ( Aleksiej , 01_Aleksiej ) ;
3149: LD_EXP 11
3153: PPUSH
3154: LD_STRING 01_Aleksiej
3156: PPUSH
3157: CALL_OW 38
// SaveCharacters ( Pavel , 01_Pavel ) ;
3161: LD_EXP 9
3165: PPUSH
3166: LD_STRING 01_Pavel
3168: PPUSH
3169: CALL_OW 38
// SaveCharacters ( Zakhar , 01_Zakhar ) ;
3173: LD_EXP 10
3177: PPUSH
3178: LD_STRING 01_Zakhar
3180: PPUSH
3181: CALL_OW 38
// if IsOk ( Aleksandr ) and GetSide ( Aleksandr ) = 3 then
3185: LD_EXP 12
3189: PPUSH
3190: CALL_OW 302
3194: PUSH
3195: LD_EXP 12
3199: PPUSH
3200: CALL_OW 255
3204: PUSH
3205: LD_INT 3
3207: EQUAL
3208: AND
3209: IFFALSE 3223
// SaveCharacters ( Aleksandr , 01_Aleksandr ) ;
3211: LD_EXP 12
3215: PPUSH
3216: LD_STRING 01_Aleksandr
3218: PPUSH
3219: CALL_OW 38
// YouWin ;
3223: CALL_OW 103
// end ;
3227: END
// every 0 0$1 trigger end_of_the_mission = true and yakotich_in_base = true and IsDead ( AmCommander ) do
3228: LD_EXP 36
3232: PUSH
3233: LD_INT 1
3235: EQUAL
3236: PUSH
3237: LD_EXP 28
3241: PUSH
3242: LD_INT 1
3244: EQUAL
3245: AND
3246: PUSH
3247: LD_EXP 19
3251: PPUSH
3252: CALL_OW 301
3256: AND
3257: IFFALSE 3306
3259: GO 3261
3261: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= 1 then
3262: LD_INT 22
3264: PUSH
3265: LD_INT 3
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 21
3274: PUSH
3275: LD_INT 2
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: LD_INT 1
3293: GREATEREQUAL
3294: IFFALSE 3306
// begin SaveVariable ( 1 , 01_Vehicle ) ;
3296: LD_INT 1
3298: PPUSH
3299: LD_STRING 01_Vehicle
3301: PPUSH
3302: CALL_OW 39
// end ; end ; end_of_file
3306: END
// every 2 2$0 do
3307: GO 3309
3309: DISABLE
// begin CreateCratesArea ( rand ( 2 , 5 ) , BaseArea , true ) ;
3310: LD_INT 2
3312: PPUSH
3313: LD_INT 5
3315: PPUSH
3316: CALL_OW 12
3320: PPUSH
3321: LD_INT 9
3323: PPUSH
3324: LD_INT 1
3326: PPUSH
3327: CALL_OW 55
// end ; end_of_file
3331: END
// on UnitDestroyed ( un ) do begin if GetSide ( un ) = 1 then
3332: LD_VAR 0 1
3336: PPUSH
3337: CALL_OW 255
3341: PUSH
3342: LD_INT 1
3344: EQUAL
3345: IFFALSE 3373
// begin KillCounter := KillCounter + 1 ;
3347: LD_ADDR_EXP 21
3351: PUSH
3352: LD_EXP 21
3356: PUSH
3357: LD_INT 1
3359: PLUS
3360: ST_TO_ADDR
// SetAchievementEX ( ACH_HUNT , KillCounter ) ;
3361: LD_STRING ACH_HUNT
3363: PPUSH
3364: LD_EXP 21
3368: PPUSH
3369: CALL_OW 564
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
3373: LD_VAR 0 1
3377: PUSH
3378: LD_INT 22
3380: PUSH
3381: LD_INT 3
3383: PUSH
3384: EMPTY
3385: LIST
3386: LIST
3387: PUSH
3388: LD_INT 3
3390: PUSH
3391: LD_INT 23
3393: PUSH
3394: LD_INT 0
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: PUSH
3401: EMPTY
3402: LIST
3403: LIST
3404: PUSH
3405: LD_INT 21
3407: PUSH
3408: LD_INT 1
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: PUSH
3415: EMPTY
3416: LIST
3417: LIST
3418: LIST
3419: PPUSH
3420: CALL_OW 69
3424: IN
3425: IFFALSE 3434
// begin YouLost ( PeopleDead ) ;
3427: LD_STRING PeopleDead
3429: PPUSH
3430: CALL_OW 104
// end ; end ;
3434: PPOPN 1
3436: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_breastwork and breastwork_builded = false then
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 266
3446: PUSH
3447: LD_INT 31
3449: EQUAL
3450: PUSH
3451: LD_EXP 41
3455: PUSH
3456: LD_INT 0
3458: EQUAL
3459: AND
3460: IFFALSE 3470
// begin breastwork_builded = true ;
3462: LD_ADDR_EXP 41
3466: PUSH
3467: LD_INT 1
3469: ST_TO_ADDR
// end ; if GetBType ( b ) = b_armoury and armoury_builded = false then
3470: LD_VAR 0 1
3474: PPUSH
3475: CALL_OW 266
3479: PUSH
3480: LD_INT 4
3482: EQUAL
3483: PUSH
3484: LD_EXP 42
3488: PUSH
3489: LD_INT 0
3491: EQUAL
3492: AND
3493: IFFALSE 3503
// begin armoury_builded = true ;
3495: LD_ADDR_EXP 42
3499: PUSH
3500: LD_INT 1
3502: ST_TO_ADDR
// end ; if GetBType ( b ) = b_workshop and GetSide ( b ) = 3 then
3503: LD_VAR 0 1
3507: PPUSH
3508: CALL_OW 266
3512: PUSH
3513: LD_INT 2
3515: EQUAL
3516: PUSH
3517: LD_VAR 0 1
3521: PPUSH
3522: CALL_OW 255
3526: PUSH
3527: LD_INT 3
3529: EQUAL
3530: AND
3531: IFFALSE 3545
// begin Say ( Michail , 1Mich-Workshop ) ;
3533: LD_EXP 5
3537: PPUSH
3538: LD_STRING 1Mich-Workshop
3540: PPUSH
3541: CALL_OW 88
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 then
3545: LD_VAR 0 1
3549: PPUSH
3550: CALL_OW 266
3554: PUSH
3555: LD_INT 6
3557: EQUAL
3558: PUSH
3559: LD_VAR 0 1
3563: PPUSH
3564: CALL_OW 255
3568: PUSH
3569: LD_INT 3
3571: EQUAL
3572: AND
3573: IFFALSE 3587
// begin Say ( Vasilij , 1Vas-06 ) ;
3575: LD_EXP 4
3579: PPUSH
3580: LD_STRING 1Vas-06
3582: PPUSH
3583: CALL_OW 88
// end ; end ;
3587: PPOPN 1
3589: END
// every 0 0$1 trigger breastwork_builded = true and armoury_builded = true do
3590: LD_EXP 41
3594: PUSH
3595: LD_INT 1
3597: EQUAL
3598: PUSH
3599: LD_EXP 42
3603: PUSH
3604: LD_INT 1
3606: EQUAL
3607: AND
3608: IFFALSE 3620
3610: GO 3612
3612: DISABLE
// begin SetAchievement ( ACH_FORT ) ;
3613: LD_STRING ACH_FORT
3615: PPUSH
3616: CALL_OW 543
// end ;
3620: END
// every 0 0$1 trigger See ( 3 , Aleksandr ) do
3621: LD_INT 3
3623: PPUSH
3624: LD_EXP 12
3628: PPUSH
3629: CALL_OW 292
3633: IFFALSE 3713
3635: GO 3637
3637: DISABLE
// begin DialogueOn ;
3638: CALL_OW 6
// Say ( Aleksandr , 1Alek-Alek3 ) ;
3642: LD_EXP 12
3646: PPUSH
3647: LD_STRING 1Alek-Alek3
3649: PPUSH
3650: CALL_OW 88
// Say ( Yakotich , 1Yak-Alek2 ) ;
3654: LD_EXP 1
3658: PPUSH
3659: LD_STRING 1Yak-Alek2
3661: PPUSH
3662: CALL_OW 88
// Say ( Aleksandr , 1Alek-Alek4 ) ;
3666: LD_EXP 12
3670: PPUSH
3671: LD_STRING 1Alek-Alek4
3673: PPUSH
3674: CALL_OW 88
// Say ( Mietek , 1Ryn-Alek3 ) ;
3678: LD_EXP 2
3682: PPUSH
3683: LD_STRING 1Ryn-Alek3
3685: PPUSH
3686: CALL_OW 88
// SetSide ( Aleksandr , 3 ) ;
3690: LD_EXP 12
3694: PPUSH
3695: LD_INT 3
3697: PPUSH
3698: CALL_OW 235
// DialogueOff ;
3702: CALL_OW 7
// SetAchievement ( ACH_ALEKSANDR ) ;
3706: LD_STRING ACH_ALEKSANDR
3708: PPUSH
3709: CALL_OW 543
// end ;
3713: END
// every 0 0$1 trigger Researched ( 3 , 46 ) do
3714: LD_INT 3
3716: PPUSH
3717: LD_INT 46
3719: PPUSH
3720: CALL_OW 325
3724: IFFALSE 3769
3726: GO 3728
3728: DISABLE
// begin DialogueOn ;
3729: CALL_OW 6
// Say ( Vasilij , 1Vas-Power-1 ) ;
3733: LD_EXP 4
3737: PPUSH
3738: LD_STRING 1Vas-Power-1
3740: PPUSH
3741: CALL_OW 88
// Say ( Yakotich , 1Yak-Power-1 ) ;
3745: LD_EXP 1
3749: PPUSH
3750: LD_STRING 1Yak-Power-1
3752: PPUSH
3753: CALL_OW 88
// DialogueOff ;
3757: CALL_OW 7
// oil_power_researched := true ;
3761: LD_ADDR_EXP 33
3765: PUSH
3766: LD_INT 1
3768: ST_TO_ADDR
// end ;
3769: END
// every 0 0$1 trigger Researched ( 3 , 47 ) do
3770: LD_INT 3
3772: PPUSH
3773: LD_INT 47
3775: PPUSH
3776: CALL_OW 325
3780: IFFALSE 3813
3782: GO 3784
3784: DISABLE
// begin DialogueOn ;
3785: CALL_OW 6
// Say ( Vasilij , 1Vas-Engine-1 ) ;
3789: LD_EXP 4
3793: PPUSH
3794: LD_STRING 1Vas-Engine-1
3796: PPUSH
3797: CALL_OW 88
// DialogueOff ;
3801: CALL_OW 7
// oil_engine_researched := true ;
3805: LD_ADDR_EXP 34
3809: PUSH
3810: LD_INT 1
3812: ST_TO_ADDR
// end ;
3813: END
// every 0 0$1 trigger Researched ( 3 , 48 ) do
3814: LD_INT 3
3816: PPUSH
3817: LD_INT 48
3819: PPUSH
3820: CALL_OW 325
3824: IFFALSE 3881
3826: GO 3828
3828: DISABLE
// begin DialogueOn ;
3829: CALL_OW 6
// Say ( Vasilij , 1Vas-Research-1 ) ;
3833: LD_EXP 4
3837: PPUSH
3838: LD_STRING 1Vas-Research-1
3840: PPUSH
3841: CALL_OW 88
// Say ( Yakotich , 1Yak-Research-1 ) ;
3845: LD_EXP 1
3849: PPUSH
3850: LD_STRING 1Yak-Research-1
3852: PPUSH
3853: CALL_OW 88
// Say ( Vasilij , 1Vas-Research-2 ) ;
3857: LD_EXP 4
3861: PPUSH
3862: LD_STRING 1Vas-Research-2
3864: PPUSH
3865: CALL_OW 88
// DialogueOff ;
3869: CALL_OW 7
// technology1_researched := true ;
3873: LD_ADDR_EXP 35
3877: PUSH
3878: LD_INT 1
3880: ST_TO_ADDR
// end ;
3881: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_side , 3 ] ] ) do
3882: LD_INT 21
3884: PUSH
3885: LD_INT 2
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: PUSH
3892: LD_INT 22
3894: PUSH
3895: LD_INT 3
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PUSH
3902: EMPTY
3903: LIST
3904: LIST
3905: PPUSH
3906: CALL_OW 69
3910: IFFALSE 4008
3912: GO 3914
3914: DISABLE
// begin InGameOn ;
3915: CALL_OW 8
// CenterOnUnits ( RuDep ) ;
3919: LD_INT 15
3921: PPUSH
3922: CALL_OW 85
// Wait ( 0 0$3 ) ;
3926: LD_INT 105
3928: PPUSH
3929: CALL_OW 67
// DialogueOn ;
3933: CALL_OW 6
// Say ( Michail , 1Mich-Tank-1 ) ;
3937: LD_EXP 5
3941: PPUSH
3942: LD_STRING 1Mich-Tank-1
3944: PPUSH
3945: CALL_OW 88
// Say ( Yakotich , 1Yak-Tank-1 ) ;
3949: LD_EXP 1
3953: PPUSH
3954: LD_STRING 1Yak-Tank-1
3956: PPUSH
3957: CALL_OW 88
// Say ( Michail , 1Mich-Tank-2 ) ;
3961: LD_EXP 5
3965: PPUSH
3966: LD_STRING 1Mich-Tank-2
3968: PPUSH
3969: CALL_OW 88
// Say ( Yakotich , 1Yak-Tank-2 ) ;
3973: LD_EXP 1
3977: PPUSH
3978: LD_STRING 1Yak-Tank-2
3980: PPUSH
3981: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
3985: LD_STRING o6
3987: PPUSH
3988: CALL_OW 337
// DialogueOff ;
3992: CALL_OW 7
// InGameOff ;
3996: CALL_OW 9
// vehicle_constructed = true ;
4000: LD_ADDR_EXP 38
4004: PUSH
4005: LD_INT 1
4007: ST_TO_ADDR
// end ;
4008: END
// every 0 0$1 trigger technology1_researched = true and oil_engine_researched = true and oil_power_researched = true and vehicle_constructed = true do
4009: LD_EXP 35
4013: PUSH
4014: LD_INT 1
4016: EQUAL
4017: PUSH
4018: LD_EXP 34
4022: PUSH
4023: LD_INT 1
4025: EQUAL
4026: AND
4027: PUSH
4028: LD_EXP 33
4032: PUSH
4033: LD_INT 1
4035: EQUAL
4036: AND
4037: PUSH
4038: LD_EXP 38
4042: PUSH
4043: LD_INT 1
4045: EQUAL
4046: AND
4047: IFFALSE 4059
4049: GO 4051
4051: DISABLE
// begin ChangeMissionObjectives ( o5 ) ;
4052: LD_STRING o5
4054: PPUSH
4055: CALL_OW 337
// end ;
4059: END
// every 0 0$1 trigger IsInArea ( Maksim , BaseArea ) do
4060: LD_EXP 7
4064: PPUSH
4065: LD_INT 9
4067: PPUSH
4068: CALL_OW 308
4072: IFFALSE 4089
4074: GO 4076
4076: DISABLE
// begin SetSide ( MaksimCrew , 3 ) ;
4077: LD_EXP 14
4081: PPUSH
4082: LD_INT 3
4084: PPUSH
4085: CALL_OW 235
// end ; end_of_file
4089: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export function InitGlobalVariables ; begin
4090: LD_INT 0
4092: PPUSH
// ar_miner := 81 ;
4093: LD_ADDR_EXP 51
4097: PUSH
4098: LD_INT 81
4100: ST_TO_ADDR
// ar_crane := 88 ;
4101: LD_ADDR_EXP 50
4105: PUSH
4106: LD_INT 88
4108: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4109: LD_ADDR_EXP 45
4113: PUSH
4114: LD_INT 89
4116: ST_TO_ADDR
// us_hack := 99 ;
4117: LD_ADDR_EXP 46
4121: PUSH
4122: LD_INT 99
4124: ST_TO_ADDR
// us_artillery := 97 ;
4125: LD_ADDR_EXP 47
4129: PUSH
4130: LD_INT 97
4132: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4133: LD_ADDR_EXP 48
4137: PUSH
4138: LD_INT 91
4140: ST_TO_ADDR
// ar_mortar := 92 ;
4141: LD_ADDR_EXP 49
4145: PUSH
4146: LD_INT 92
4148: ST_TO_ADDR
// ru_flamethrower := 93 ;
4149: LD_ADDR_EXP 52
4153: PUSH
4154: LD_INT 93
4156: ST_TO_ADDR
// ru_radar := 98 ;
4157: LD_ADDR_EXP 44
4161: PUSH
4162: LD_INT 98
4164: ST_TO_ADDR
// tech_Artillery := 80 ;
4165: LD_ADDR_EXP 53
4169: PUSH
4170: LD_INT 80
4172: ST_TO_ADDR
// tech_RadMat := 81 ;
4173: LD_ADDR_EXP 54
4177: PUSH
4178: LD_INT 81
4180: ST_TO_ADDR
// tech_BasicTools := 82 ;
4181: LD_ADDR_EXP 55
4185: PUSH
4186: LD_INT 82
4188: ST_TO_ADDR
// tech_Cargo := 83 ;
4189: LD_ADDR_EXP 56
4193: PUSH
4194: LD_INT 83
4196: ST_TO_ADDR
// tech_Track := 84 ;
4197: LD_ADDR_EXP 57
4201: PUSH
4202: LD_INT 84
4204: ST_TO_ADDR
// tech_Crane := 85 ;
4205: LD_ADDR_EXP 58
4209: PUSH
4210: LD_INT 85
4212: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4213: LD_ADDR_EXP 59
4217: PUSH
4218: LD_INT 86
4220: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4221: LD_ADDR_EXP 60
4225: PUSH
4226: LD_INT 87
4228: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4229: LD_ADDR_EXP 61
4233: PUSH
4234: LD_INT 88
4236: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
4237: LD_ADDR_EXP 62
4241: PUSH
4242: LD_INT 90
4244: ST_TO_ADDR
// end ; end_of_file
4245: LD_VAR 0 1
4249: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4250: LD_INT 0
4252: PPUSH
4253: PPUSH
// if exist_mode then
4254: LD_VAR 0 2
4258: IFFALSE 4283
// unit := CreateCharacter ( prefix & ident ) else
4260: LD_ADDR_VAR 0 5
4264: PUSH
4265: LD_VAR 0 3
4269: PUSH
4270: LD_VAR 0 1
4274: STR
4275: PPUSH
4276: CALL_OW 34
4280: ST_TO_ADDR
4281: GO 4298
// unit := NewCharacter ( ident ) ;
4283: LD_ADDR_VAR 0 5
4287: PUSH
4288: LD_VAR 0 1
4292: PPUSH
4293: CALL_OW 25
4297: ST_TO_ADDR
// result := unit ;
4298: LD_ADDR_VAR 0 4
4302: PUSH
4303: LD_VAR 0 5
4307: ST_TO_ADDR
// end ;
4308: LD_VAR 0 4
4312: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4313: LD_INT 0
4315: PPUSH
4316: PPUSH
// if not side or not nation then
4317: LD_VAR 0 1
4321: NOT
4322: PUSH
4323: LD_VAR 0 2
4327: NOT
4328: OR
4329: IFFALSE 4333
// exit ;
4331: GO 5101
// case nation of nation_american :
4333: LD_VAR 0 2
4337: PUSH
4338: LD_INT 1
4340: DOUBLE
4341: EQUAL
4342: IFTRUE 4346
4344: GO 4560
4346: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4347: LD_ADDR_VAR 0 4
4351: PUSH
4352: LD_INT 35
4354: PUSH
4355: LD_INT 45
4357: PUSH
4358: LD_INT 46
4360: PUSH
4361: LD_INT 47
4363: PUSH
4364: LD_INT 82
4366: PUSH
4367: LD_INT 83
4369: PUSH
4370: LD_INT 84
4372: PUSH
4373: LD_INT 85
4375: PUSH
4376: LD_INT 86
4378: PUSH
4379: LD_INT 1
4381: PUSH
4382: LD_INT 2
4384: PUSH
4385: LD_INT 6
4387: PUSH
4388: LD_INT 15
4390: PUSH
4391: LD_INT 16
4393: PUSH
4394: LD_INT 7
4396: PUSH
4397: LD_INT 12
4399: PUSH
4400: LD_INT 13
4402: PUSH
4403: LD_INT 10
4405: PUSH
4406: LD_INT 14
4408: PUSH
4409: LD_INT 20
4411: PUSH
4412: LD_INT 21
4414: PUSH
4415: LD_INT 22
4417: PUSH
4418: LD_INT 25
4420: PUSH
4421: LD_INT 32
4423: PUSH
4424: LD_INT 27
4426: PUSH
4427: LD_INT 36
4429: PUSH
4430: LD_INT 69
4432: PUSH
4433: LD_INT 39
4435: PUSH
4436: LD_INT 34
4438: PUSH
4439: LD_INT 40
4441: PUSH
4442: LD_INT 48
4444: PUSH
4445: LD_INT 49
4447: PUSH
4448: LD_INT 50
4450: PUSH
4451: LD_INT 51
4453: PUSH
4454: LD_INT 52
4456: PUSH
4457: LD_INT 53
4459: PUSH
4460: LD_INT 54
4462: PUSH
4463: LD_INT 55
4465: PUSH
4466: LD_INT 56
4468: PUSH
4469: LD_INT 57
4471: PUSH
4472: LD_INT 58
4474: PUSH
4475: LD_INT 59
4477: PUSH
4478: LD_INT 60
4480: PUSH
4481: LD_INT 61
4483: PUSH
4484: LD_INT 62
4486: PUSH
4487: LD_INT 80
4489: PUSH
4490: LD_INT 82
4492: PUSH
4493: LD_INT 83
4495: PUSH
4496: LD_INT 84
4498: PUSH
4499: LD_INT 85
4501: PUSH
4502: LD_INT 86
4504: PUSH
4505: EMPTY
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: LIST
4512: LIST
4513: LIST
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: ST_TO_ADDR
4558: GO 5025
4560: LD_INT 2
4562: DOUBLE
4563: EQUAL
4564: IFTRUE 4568
4566: GO 4794
4568: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
4569: LD_ADDR_VAR 0 4
4573: PUSH
4574: LD_INT 35
4576: PUSH
4577: LD_INT 45
4579: PUSH
4580: LD_INT 46
4582: PUSH
4583: LD_INT 47
4585: PUSH
4586: LD_INT 82
4588: PUSH
4589: LD_INT 83
4591: PUSH
4592: LD_INT 84
4594: PUSH
4595: LD_INT 85
4597: PUSH
4598: LD_INT 87
4600: PUSH
4601: LD_INT 70
4603: PUSH
4604: LD_INT 1
4606: PUSH
4607: LD_INT 11
4609: PUSH
4610: LD_INT 3
4612: PUSH
4613: LD_INT 4
4615: PUSH
4616: LD_INT 5
4618: PUSH
4619: LD_INT 6
4621: PUSH
4622: LD_INT 15
4624: PUSH
4625: LD_INT 18
4627: PUSH
4628: LD_INT 7
4630: PUSH
4631: LD_INT 17
4633: PUSH
4634: LD_INT 8
4636: PUSH
4637: LD_INT 20
4639: PUSH
4640: LD_INT 21
4642: PUSH
4643: LD_INT 22
4645: PUSH
4646: LD_INT 72
4648: PUSH
4649: LD_INT 26
4651: PUSH
4652: LD_INT 69
4654: PUSH
4655: LD_INT 39
4657: PUSH
4658: LD_INT 40
4660: PUSH
4661: LD_INT 41
4663: PUSH
4664: LD_INT 42
4666: PUSH
4667: LD_INT 43
4669: PUSH
4670: LD_INT 48
4672: PUSH
4673: LD_INT 49
4675: PUSH
4676: LD_INT 50
4678: PUSH
4679: LD_INT 51
4681: PUSH
4682: LD_INT 52
4684: PUSH
4685: LD_INT 53
4687: PUSH
4688: LD_INT 54
4690: PUSH
4691: LD_INT 55
4693: PUSH
4694: LD_INT 56
4696: PUSH
4697: LD_INT 60
4699: PUSH
4700: LD_INT 61
4702: PUSH
4703: LD_INT 62
4705: PUSH
4706: LD_INT 66
4708: PUSH
4709: LD_INT 67
4711: PUSH
4712: LD_INT 68
4714: PUSH
4715: LD_INT 81
4717: PUSH
4718: LD_INT 82
4720: PUSH
4721: LD_INT 83
4723: PUSH
4724: LD_INT 84
4726: PUSH
4727: LD_INT 85
4729: PUSH
4730: LD_INT 87
4732: PUSH
4733: LD_INT 88
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: ST_TO_ADDR
4792: GO 5025
4794: LD_INT 3
4796: DOUBLE
4797: EQUAL
4798: IFTRUE 4802
4800: GO 5024
4802: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4803: LD_ADDR_VAR 0 4
4807: PUSH
4808: LD_INT 46
4810: PUSH
4811: LD_INT 47
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: LD_INT 2
4819: PUSH
4820: LD_INT 82
4822: PUSH
4823: LD_INT 83
4825: PUSH
4826: LD_INT 84
4828: PUSH
4829: LD_INT 85
4831: PUSH
4832: LD_INT 86
4834: PUSH
4835: LD_INT 11
4837: PUSH
4838: LD_INT 9
4840: PUSH
4841: LD_INT 20
4843: PUSH
4844: LD_INT 19
4846: PUSH
4847: LD_INT 21
4849: PUSH
4850: LD_INT 24
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 25
4858: PUSH
4859: LD_INT 28
4861: PUSH
4862: LD_INT 29
4864: PUSH
4865: LD_INT 30
4867: PUSH
4868: LD_INT 31
4870: PUSH
4871: LD_INT 37
4873: PUSH
4874: LD_INT 38
4876: PUSH
4877: LD_INT 32
4879: PUSH
4880: LD_INT 27
4882: PUSH
4883: LD_INT 33
4885: PUSH
4886: LD_INT 69
4888: PUSH
4889: LD_INT 39
4891: PUSH
4892: LD_INT 34
4894: PUSH
4895: LD_INT 40
4897: PUSH
4898: LD_INT 71
4900: PUSH
4901: LD_INT 23
4903: PUSH
4904: LD_INT 44
4906: PUSH
4907: LD_INT 48
4909: PUSH
4910: LD_INT 49
4912: PUSH
4913: LD_INT 50
4915: PUSH
4916: LD_INT 51
4918: PUSH
4919: LD_INT 52
4921: PUSH
4922: LD_INT 53
4924: PUSH
4925: LD_INT 54
4927: PUSH
4928: LD_INT 55
4930: PUSH
4931: LD_INT 56
4933: PUSH
4934: LD_INT 57
4936: PUSH
4937: LD_INT 58
4939: PUSH
4940: LD_INT 59
4942: PUSH
4943: LD_INT 63
4945: PUSH
4946: LD_INT 64
4948: PUSH
4949: LD_INT 65
4951: PUSH
4952: LD_INT 82
4954: PUSH
4955: LD_INT 83
4957: PUSH
4958: LD_INT 84
4960: PUSH
4961: LD_INT 85
4963: PUSH
4964: LD_INT 86
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: ST_TO_ADDR
5022: GO 5025
5024: POP
// if state > - 1 and state < 3 then
5025: LD_VAR 0 3
5029: PUSH
5030: LD_INT 1
5032: NEG
5033: GREATER
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: LD_INT 3
5042: LESS
5043: AND
5044: IFFALSE 5101
// for i in result do
5046: LD_ADDR_VAR 0 5
5050: PUSH
5051: LD_VAR 0 4
5055: PUSH
5056: FOR_IN
5057: IFFALSE 5099
// if GetTech ( i , side ) <> state then
5059: LD_VAR 0 5
5063: PPUSH
5064: LD_VAR 0 1
5068: PPUSH
5069: CALL_OW 321
5073: PUSH
5074: LD_VAR 0 3
5078: NONEQUAL
5079: IFFALSE 5097
// result := result diff i ;
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: LD_VAR 0 4
5090: PUSH
5091: LD_VAR 0 5
5095: DIFF
5096: ST_TO_ADDR
5097: GO 5056
5099: POP
5100: POP
// end ;
5101: LD_VAR 0 4
5105: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5106: LD_INT 0
5108: PPUSH
5109: PPUSH
5110: PPUSH
// result := true ;
5111: LD_ADDR_VAR 0 3
5115: PUSH
5116: LD_INT 1
5118: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5119: LD_ADDR_VAR 0 5
5123: PUSH
5124: LD_VAR 0 2
5128: PPUSH
5129: CALL_OW 480
5133: ST_TO_ADDR
// if not tmp then
5134: LD_VAR 0 5
5138: NOT
5139: IFFALSE 5143
// exit ;
5141: GO 5192
// for i in tmp do
5143: LD_ADDR_VAR 0 4
5147: PUSH
5148: LD_VAR 0 5
5152: PUSH
5153: FOR_IN
5154: IFFALSE 5190
// if GetTech ( i , side ) <> state_researched then
5156: LD_VAR 0 4
5160: PPUSH
5161: LD_VAR 0 1
5165: PPUSH
5166: CALL_OW 321
5170: PUSH
5171: LD_INT 2
5173: NONEQUAL
5174: IFFALSE 5188
// begin result := false ;
5176: LD_ADDR_VAR 0 3
5180: PUSH
5181: LD_INT 0
5183: ST_TO_ADDR
// exit ;
5184: POP
5185: POP
5186: GO 5192
// end ;
5188: GO 5153
5190: POP
5191: POP
// end ;
5192: LD_VAR 0 3
5196: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5197: LD_INT 0
5199: PPUSH
5200: PPUSH
5201: PPUSH
5202: PPUSH
5203: PPUSH
5204: PPUSH
5205: PPUSH
5206: PPUSH
5207: PPUSH
5208: PPUSH
5209: PPUSH
5210: PPUSH
5211: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5212: LD_VAR 0 1
5216: NOT
5217: PUSH
5218: LD_VAR 0 1
5222: PPUSH
5223: CALL_OW 257
5227: PUSH
5228: LD_INT 9
5230: NONEQUAL
5231: OR
5232: IFFALSE 5236
// exit ;
5234: GO 5809
// side := GetSide ( unit ) ;
5236: LD_ADDR_VAR 0 9
5240: PUSH
5241: LD_VAR 0 1
5245: PPUSH
5246: CALL_OW 255
5250: ST_TO_ADDR
// tech_space := tech_spacanom ;
5251: LD_ADDR_VAR 0 12
5255: PUSH
5256: LD_INT 29
5258: ST_TO_ADDR
// tech_time := tech_taurad ;
5259: LD_ADDR_VAR 0 13
5263: PUSH
5264: LD_INT 28
5266: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5267: LD_ADDR_VAR 0 11
5271: PUSH
5272: LD_VAR 0 1
5276: PPUSH
5277: CALL_OW 310
5281: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5282: LD_VAR 0 11
5286: PPUSH
5287: CALL_OW 247
5291: PUSH
5292: LD_INT 2
5294: EQUAL
5295: IFFALSE 5299
// exit ;
5297: GO 5809
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5299: LD_ADDR_VAR 0 8
5303: PUSH
5304: LD_INT 81
5306: PUSH
5307: LD_VAR 0 9
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PUSH
5316: LD_INT 3
5318: PUSH
5319: LD_INT 21
5321: PUSH
5322: LD_INT 3
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: PUSH
5329: EMPTY
5330: LIST
5331: LIST
5332: PUSH
5333: EMPTY
5334: LIST
5335: LIST
5336: PPUSH
5337: CALL_OW 69
5341: ST_TO_ADDR
// if not tmp then
5342: LD_VAR 0 8
5346: NOT
5347: IFFALSE 5351
// exit ;
5349: GO 5809
// if in_unit then
5351: LD_VAR 0 11
5355: IFFALSE 5379
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5357: LD_ADDR_VAR 0 10
5361: PUSH
5362: LD_VAR 0 8
5366: PPUSH
5367: LD_VAR 0 11
5371: PPUSH
5372: CALL_OW 74
5376: ST_TO_ADDR
5377: GO 5399
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5379: LD_ADDR_VAR 0 10
5383: PUSH
5384: LD_VAR 0 8
5388: PPUSH
5389: LD_VAR 0 1
5393: PPUSH
5394: CALL_OW 74
5398: ST_TO_ADDR
// if not enemy then
5399: LD_VAR 0 10
5403: NOT
5404: IFFALSE 5408
// exit ;
5406: GO 5809
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5408: LD_VAR 0 11
5412: PUSH
5413: LD_VAR 0 11
5417: PPUSH
5418: LD_VAR 0 10
5422: PPUSH
5423: CALL_OW 296
5427: PUSH
5428: LD_INT 13
5430: GREATER
5431: AND
5432: PUSH
5433: LD_VAR 0 1
5437: PPUSH
5438: LD_VAR 0 10
5442: PPUSH
5443: CALL_OW 296
5447: PUSH
5448: LD_INT 12
5450: GREATER
5451: OR
5452: IFFALSE 5456
// exit ;
5454: GO 5809
// missile := [ 1 ] ;
5456: LD_ADDR_VAR 0 14
5460: PUSH
5461: LD_INT 1
5463: PUSH
5464: EMPTY
5465: LIST
5466: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5467: LD_VAR 0 9
5471: PPUSH
5472: LD_VAR 0 12
5476: PPUSH
5477: CALL_OW 325
5481: IFFALSE 5510
// missile := Replace ( missile , missile + 1 , 2 ) ;
5483: LD_ADDR_VAR 0 14
5487: PUSH
5488: LD_VAR 0 14
5492: PPUSH
5493: LD_VAR 0 14
5497: PUSH
5498: LD_INT 1
5500: PLUS
5501: PPUSH
5502: LD_INT 2
5504: PPUSH
5505: CALL_OW 1
5509: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5510: LD_VAR 0 9
5514: PPUSH
5515: LD_VAR 0 13
5519: PPUSH
5520: CALL_OW 325
5524: PUSH
5525: LD_VAR 0 10
5529: PPUSH
5530: CALL_OW 255
5534: PPUSH
5535: LD_VAR 0 13
5539: PPUSH
5540: CALL_OW 325
5544: NOT
5545: AND
5546: IFFALSE 5575
// missile := Replace ( missile , missile + 1 , 3 ) ;
5548: LD_ADDR_VAR 0 14
5552: PUSH
5553: LD_VAR 0 14
5557: PPUSH
5558: LD_VAR 0 14
5562: PUSH
5563: LD_INT 1
5565: PLUS
5566: PPUSH
5567: LD_INT 3
5569: PPUSH
5570: CALL_OW 1
5574: ST_TO_ADDR
// if missile < 2 then
5575: LD_VAR 0 14
5579: PUSH
5580: LD_INT 2
5582: LESS
5583: IFFALSE 5587
// exit ;
5585: GO 5809
// x := GetX ( enemy ) ;
5587: LD_ADDR_VAR 0 4
5591: PUSH
5592: LD_VAR 0 10
5596: PPUSH
5597: CALL_OW 250
5601: ST_TO_ADDR
// y := GetY ( enemy ) ;
5602: LD_ADDR_VAR 0 5
5606: PUSH
5607: LD_VAR 0 10
5611: PPUSH
5612: CALL_OW 251
5616: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5617: LD_ADDR_VAR 0 6
5621: PUSH
5622: LD_VAR 0 4
5626: PUSH
5627: LD_INT 1
5629: NEG
5630: PPUSH
5631: LD_INT 1
5633: PPUSH
5634: CALL_OW 12
5638: PLUS
5639: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5640: LD_ADDR_VAR 0 7
5644: PUSH
5645: LD_VAR 0 5
5649: PUSH
5650: LD_INT 1
5652: NEG
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: CALL_OW 12
5661: PLUS
5662: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5663: LD_VAR 0 6
5667: PPUSH
5668: LD_VAR 0 7
5672: PPUSH
5673: CALL_OW 488
5677: NOT
5678: IFFALSE 5700
// begin _x := x ;
5680: LD_ADDR_VAR 0 6
5684: PUSH
5685: LD_VAR 0 4
5689: ST_TO_ADDR
// _y := y ;
5690: LD_ADDR_VAR 0 7
5694: PUSH
5695: LD_VAR 0 5
5699: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5700: LD_ADDR_VAR 0 3
5704: PUSH
5705: LD_INT 1
5707: PPUSH
5708: LD_VAR 0 14
5712: PPUSH
5713: CALL_OW 12
5717: ST_TO_ADDR
// case i of 1 :
5718: LD_VAR 0 3
5722: PUSH
5723: LD_INT 1
5725: DOUBLE
5726: EQUAL
5727: IFTRUE 5731
5729: GO 5748
5731: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5732: LD_VAR 0 1
5736: PPUSH
5737: LD_VAR 0 10
5741: PPUSH
5742: CALL_OW 115
5746: GO 5809
5748: LD_INT 2
5750: DOUBLE
5751: EQUAL
5752: IFTRUE 5756
5754: GO 5778
5756: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5757: LD_VAR 0 1
5761: PPUSH
5762: LD_VAR 0 6
5766: PPUSH
5767: LD_VAR 0 7
5771: PPUSH
5772: CALL_OW 153
5776: GO 5809
5778: LD_INT 3
5780: DOUBLE
5781: EQUAL
5782: IFTRUE 5786
5784: GO 5808
5786: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5787: LD_VAR 0 1
5791: PPUSH
5792: LD_VAR 0 6
5796: PPUSH
5797: LD_VAR 0 7
5801: PPUSH
5802: CALL_OW 154
5806: GO 5809
5808: POP
// end ;
5809: LD_VAR 0 2
5813: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5814: LD_INT 0
5816: PPUSH
5817: PPUSH
5818: PPUSH
5819: PPUSH
5820: PPUSH
5821: PPUSH
// if not unit or not building then
5822: LD_VAR 0 1
5826: NOT
5827: PUSH
5828: LD_VAR 0 2
5832: NOT
5833: OR
5834: IFFALSE 5838
// exit ;
5836: GO 5996
// x := GetX ( building ) ;
5838: LD_ADDR_VAR 0 5
5842: PUSH
5843: LD_VAR 0 2
5847: PPUSH
5848: CALL_OW 250
5852: ST_TO_ADDR
// y := GetY ( building ) ;
5853: LD_ADDR_VAR 0 6
5857: PUSH
5858: LD_VAR 0 2
5862: PPUSH
5863: CALL_OW 251
5867: ST_TO_ADDR
// for i = 0 to 5 do
5868: LD_ADDR_VAR 0 4
5872: PUSH
5873: DOUBLE
5874: LD_INT 0
5876: DEC
5877: ST_TO_ADDR
5878: LD_INT 5
5880: PUSH
5881: FOR_TO
5882: IFFALSE 5994
// begin _x := ShiftX ( x , i , 3 ) ;
5884: LD_ADDR_VAR 0 7
5888: PUSH
5889: LD_VAR 0 5
5893: PPUSH
5894: LD_VAR 0 4
5898: PPUSH
5899: LD_INT 3
5901: PPUSH
5902: CALL_OW 272
5906: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5907: LD_ADDR_VAR 0 8
5911: PUSH
5912: LD_VAR 0 6
5916: PPUSH
5917: LD_VAR 0 4
5921: PPUSH
5922: LD_INT 3
5924: PPUSH
5925: CALL_OW 273
5929: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5930: LD_VAR 0 7
5934: PPUSH
5935: LD_VAR 0 8
5939: PPUSH
5940: CALL_OW 488
5944: NOT
5945: IFFALSE 5949
// continue ;
5947: GO 5881
// if HexInfo ( _x , _y ) = 0 then
5949: LD_VAR 0 7
5953: PPUSH
5954: LD_VAR 0 8
5958: PPUSH
5959: CALL_OW 428
5963: PUSH
5964: LD_INT 0
5966: EQUAL
5967: IFFALSE 5992
// begin ComMoveXY ( unit , _x , _y ) ;
5969: LD_VAR 0 1
5973: PPUSH
5974: LD_VAR 0 7
5978: PPUSH
5979: LD_VAR 0 8
5983: PPUSH
5984: CALL_OW 111
// exit ;
5988: POP
5989: POP
5990: GO 5996
// end ; end ;
5992: GO 5881
5994: POP
5995: POP
// end ;
5996: LD_VAR 0 3
6000: RET
// export function ScanBase ( side , base_area ) ; begin
6001: LD_INT 0
6003: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6004: LD_ADDR_VAR 0 3
6008: PUSH
6009: LD_VAR 0 2
6013: PPUSH
6014: LD_INT 81
6016: PUSH
6017: LD_VAR 0 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PPUSH
6026: CALL_OW 70
6030: ST_TO_ADDR
// end ;
6031: LD_VAR 0 3
6035: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6036: LD_INT 0
6038: PPUSH
6039: PPUSH
6040: PPUSH
6041: PPUSH
// result := false ;
6042: LD_ADDR_VAR 0 2
6046: PUSH
6047: LD_INT 0
6049: ST_TO_ADDR
// side := GetSide ( unit ) ;
6050: LD_ADDR_VAR 0 3
6054: PUSH
6055: LD_VAR 0 1
6059: PPUSH
6060: CALL_OW 255
6064: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6065: LD_ADDR_VAR 0 4
6069: PUSH
6070: LD_VAR 0 1
6074: PPUSH
6075: CALL_OW 248
6079: ST_TO_ADDR
// case nat of 1 :
6080: LD_VAR 0 4
6084: PUSH
6085: LD_INT 1
6087: DOUBLE
6088: EQUAL
6089: IFTRUE 6093
6091: GO 6104
6093: POP
// tech := tech_lassight ; 2 :
6094: LD_ADDR_VAR 0 5
6098: PUSH
6099: LD_INT 12
6101: ST_TO_ADDR
6102: GO 6143
6104: LD_INT 2
6106: DOUBLE
6107: EQUAL
6108: IFTRUE 6112
6110: GO 6123
6112: POP
// tech := tech_mortar ; 3 :
6113: LD_ADDR_VAR 0 5
6117: PUSH
6118: LD_INT 41
6120: ST_TO_ADDR
6121: GO 6143
6123: LD_INT 3
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6142
6131: POP
// tech := tech_bazooka ; end ;
6132: LD_ADDR_VAR 0 5
6136: PUSH
6137: LD_INT 44
6139: ST_TO_ADDR
6140: GO 6143
6142: POP
// if Researched ( side , tech ) then
6143: LD_VAR 0 3
6147: PPUSH
6148: LD_VAR 0 5
6152: PPUSH
6153: CALL_OW 325
6157: IFFALSE 6184
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6159: LD_ADDR_VAR 0 2
6163: PUSH
6164: LD_INT 5
6166: PUSH
6167: LD_INT 8
6169: PUSH
6170: LD_INT 9
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: LIST
6177: PUSH
6178: LD_VAR 0 4
6182: ARRAY
6183: ST_TO_ADDR
// end ;
6184: LD_VAR 0 2
6188: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6189: LD_INT 0
6191: PPUSH
6192: PPUSH
6193: PPUSH
// if not mines then
6194: LD_VAR 0 2
6198: NOT
6199: IFFALSE 6203
// exit ;
6201: GO 6347
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6203: LD_ADDR_VAR 0 5
6207: PUSH
6208: LD_INT 81
6210: PUSH
6211: LD_VAR 0 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 3
6222: PUSH
6223: LD_INT 21
6225: PUSH
6226: LD_INT 3
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PPUSH
6241: CALL_OW 69
6245: ST_TO_ADDR
// for i in mines do
6246: LD_ADDR_VAR 0 4
6250: PUSH
6251: LD_VAR 0 2
6255: PUSH
6256: FOR_IN
6257: IFFALSE 6345
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6259: LD_VAR 0 4
6263: PUSH
6264: LD_INT 1
6266: ARRAY
6267: PPUSH
6268: LD_VAR 0 4
6272: PUSH
6273: LD_INT 2
6275: ARRAY
6276: PPUSH
6277: CALL_OW 458
6281: NOT
6282: IFFALSE 6286
// continue ;
6284: GO 6256
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6286: LD_VAR 0 4
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: LD_VAR 0 4
6299: PUSH
6300: LD_INT 2
6302: ARRAY
6303: PPUSH
6304: CALL_OW 428
6308: PUSH
6309: LD_VAR 0 5
6313: IN
6314: IFFALSE 6343
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6316: LD_VAR 0 4
6320: PUSH
6321: LD_INT 1
6323: ARRAY
6324: PPUSH
6325: LD_VAR 0 4
6329: PUSH
6330: LD_INT 2
6332: ARRAY
6333: PPUSH
6334: LD_VAR 0 1
6338: PPUSH
6339: CALL_OW 456
// end ;
6343: GO 6256
6345: POP
6346: POP
// end ;
6347: LD_VAR 0 3
6351: RET
// export function Count ( array ) ; var i ; begin
6352: LD_INT 0
6354: PPUSH
6355: PPUSH
// result := 0 ;
6356: LD_ADDR_VAR 0 2
6360: PUSH
6361: LD_INT 0
6363: ST_TO_ADDR
// for i in array do
6364: LD_ADDR_VAR 0 3
6368: PUSH
6369: LD_VAR 0 1
6373: PUSH
6374: FOR_IN
6375: IFFALSE 6399
// if i then
6377: LD_VAR 0 3
6381: IFFALSE 6397
// result := result + 1 ;
6383: LD_ADDR_VAR 0 2
6387: PUSH
6388: LD_VAR 0 2
6392: PUSH
6393: LD_INT 1
6395: PLUS
6396: ST_TO_ADDR
6397: GO 6374
6399: POP
6400: POP
// end ;
6401: LD_VAR 0 2
6405: RET
// export function IsEmpty ( building ) ; begin
6406: LD_INT 0
6408: PPUSH
// if not building then
6409: LD_VAR 0 1
6413: NOT
6414: IFFALSE 6418
// exit ;
6416: GO 6461
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6418: LD_ADDR_VAR 0 2
6422: PUSH
6423: LD_VAR 0 1
6427: PUSH
6428: LD_INT 22
6430: PUSH
6431: LD_VAR 0 1
6435: PPUSH
6436: CALL_OW 255
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: LD_INT 58
6447: PUSH
6448: EMPTY
6449: LIST
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PPUSH
6455: CALL_OW 69
6459: IN
6460: ST_TO_ADDR
// end ;
6461: LD_VAR 0 2
6465: RET
// export function IsNotFull ( building ) ; var places ; begin
6466: LD_INT 0
6468: PPUSH
6469: PPUSH
// if not building then
6470: LD_VAR 0 1
6474: NOT
6475: IFFALSE 6479
// exit ;
6477: GO 6650
// result := false ;
6479: LD_ADDR_VAR 0 2
6483: PUSH
6484: LD_INT 0
6486: ST_TO_ADDR
// places := 0 ;
6487: LD_ADDR_VAR 0 3
6491: PUSH
6492: LD_INT 0
6494: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
6495: LD_VAR 0 1
6499: PPUSH
6500: CALL_OW 266
6504: PUSH
6505: LD_INT 0
6507: DOUBLE
6508: EQUAL
6509: IFTRUE 6567
6511: LD_INT 1
6513: DOUBLE
6514: EQUAL
6515: IFTRUE 6567
6517: LD_INT 6
6519: DOUBLE
6520: EQUAL
6521: IFTRUE 6567
6523: LD_INT 7
6525: DOUBLE
6526: EQUAL
6527: IFTRUE 6567
6529: LD_INT 8
6531: DOUBLE
6532: EQUAL
6533: IFTRUE 6567
6535: LD_INT 4
6537: DOUBLE
6538: EQUAL
6539: IFTRUE 6567
6541: LD_INT 5
6543: DOUBLE
6544: EQUAL
6545: IFTRUE 6567
6547: LD_INT 2
6549: DOUBLE
6550: EQUAL
6551: IFTRUE 6567
6553: LD_INT 3
6555: DOUBLE
6556: EQUAL
6557: IFTRUE 6567
6559: LD_INT 35
6561: DOUBLE
6562: EQUAL
6563: IFTRUE 6567
6565: GO 6578
6567: POP
// places := 6 ; b_bunker , b_breastwork :
6568: LD_ADDR_VAR 0 3
6572: PUSH
6573: LD_INT 6
6575: ST_TO_ADDR
6576: GO 6623
6578: LD_INT 32
6580: DOUBLE
6581: EQUAL
6582: IFTRUE 6592
6584: LD_INT 31
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6603
6592: POP
// places := 1 ; b_control_tower :
6593: LD_ADDR_VAR 0 3
6597: PUSH
6598: LD_INT 1
6600: ST_TO_ADDR
6601: GO 6623
6603: LD_INT 36
6605: DOUBLE
6606: EQUAL
6607: IFTRUE 6611
6609: GO 6622
6611: POP
// places := 3 ; end ;
6612: LD_ADDR_VAR 0 3
6616: PUSH
6617: LD_INT 3
6619: ST_TO_ADDR
6620: GO 6623
6622: POP
// if places then
6623: LD_VAR 0 3
6627: IFFALSE 6650
// result := UnitsInside ( building ) < places ;
6629: LD_ADDR_VAR 0 2
6633: PUSH
6634: LD_VAR 0 1
6638: PPUSH
6639: CALL_OW 313
6643: PUSH
6644: LD_VAR 0 3
6648: LESS
6649: ST_TO_ADDR
// end ;
6650: LD_VAR 0 2
6654: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6655: LD_INT 0
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
// tmp := [ ] ;
6661: LD_ADDR_VAR 0 3
6665: PUSH
6666: EMPTY
6667: ST_TO_ADDR
// list := [ ] ;
6668: LD_ADDR_VAR 0 5
6672: PUSH
6673: EMPTY
6674: ST_TO_ADDR
// for i = 16 to 25 do
6675: LD_ADDR_VAR 0 4
6679: PUSH
6680: DOUBLE
6681: LD_INT 16
6683: DEC
6684: ST_TO_ADDR
6685: LD_INT 25
6687: PUSH
6688: FOR_TO
6689: IFFALSE 6762
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6691: LD_ADDR_VAR 0 3
6695: PUSH
6696: LD_VAR 0 3
6700: PUSH
6701: LD_INT 22
6703: PUSH
6704: LD_VAR 0 1
6708: PPUSH
6709: CALL_OW 255
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: LD_INT 91
6720: PUSH
6721: LD_VAR 0 1
6725: PUSH
6726: LD_INT 6
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: PUSH
6734: LD_INT 30
6736: PUSH
6737: LD_VAR 0 4
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: LIST
6750: PUSH
6751: EMPTY
6752: LIST
6753: PPUSH
6754: CALL_OW 69
6758: ADD
6759: ST_TO_ADDR
6760: GO 6688
6762: POP
6763: POP
// for i = 1 to tmp do
6764: LD_ADDR_VAR 0 4
6768: PUSH
6769: DOUBLE
6770: LD_INT 1
6772: DEC
6773: ST_TO_ADDR
6774: LD_VAR 0 3
6778: PUSH
6779: FOR_TO
6780: IFFALSE 6868
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6782: LD_ADDR_VAR 0 5
6786: PUSH
6787: LD_VAR 0 5
6791: PUSH
6792: LD_VAR 0 3
6796: PUSH
6797: LD_VAR 0 4
6801: ARRAY
6802: PPUSH
6803: CALL_OW 266
6807: PUSH
6808: LD_VAR 0 3
6812: PUSH
6813: LD_VAR 0 4
6817: ARRAY
6818: PPUSH
6819: CALL_OW 250
6823: PUSH
6824: LD_VAR 0 3
6828: PUSH
6829: LD_VAR 0 4
6833: ARRAY
6834: PPUSH
6835: CALL_OW 251
6839: PUSH
6840: LD_VAR 0 3
6844: PUSH
6845: LD_VAR 0 4
6849: ARRAY
6850: PPUSH
6851: CALL_OW 254
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: PUSH
6862: EMPTY
6863: LIST
6864: ADD
6865: ST_TO_ADDR
6866: GO 6779
6868: POP
6869: POP
// result := list ;
6870: LD_ADDR_VAR 0 2
6874: PUSH
6875: LD_VAR 0 5
6879: ST_TO_ADDR
// end ;
6880: LD_VAR 0 2
6884: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6885: LD_INT 0
6887: PPUSH
6888: PPUSH
6889: PPUSH
6890: PPUSH
6891: PPUSH
6892: PPUSH
6893: PPUSH
// if not factory then
6894: LD_VAR 0 1
6898: NOT
6899: IFFALSE 6903
// exit ;
6901: GO 7496
// if control = control_apeman then
6903: LD_VAR 0 4
6907: PUSH
6908: LD_INT 5
6910: EQUAL
6911: IFFALSE 7020
// begin tmp := UnitsInside ( factory ) ;
6913: LD_ADDR_VAR 0 8
6917: PUSH
6918: LD_VAR 0 1
6922: PPUSH
6923: CALL_OW 313
6927: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6928: LD_VAR 0 8
6932: PPUSH
6933: LD_INT 25
6935: PUSH
6936: LD_INT 12
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 72
6947: NOT
6948: IFFALSE 6958
// control := control_manual ;
6950: LD_ADDR_VAR 0 4
6954: PUSH
6955: LD_INT 1
6957: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6958: LD_ADDR_VAR 0 8
6962: PUSH
6963: LD_VAR 0 1
6967: PPUSH
6968: CALL 6655 0 1
6972: ST_TO_ADDR
// if tmp then
6973: LD_VAR 0 8
6977: IFFALSE 7020
// begin for i in tmp do
6979: LD_ADDR_VAR 0 7
6983: PUSH
6984: LD_VAR 0 8
6988: PUSH
6989: FOR_IN
6990: IFFALSE 7018
// if i [ 1 ] = b_ext_radio then
6992: LD_VAR 0 7
6996: PUSH
6997: LD_INT 1
6999: ARRAY
7000: PUSH
7001: LD_INT 22
7003: EQUAL
7004: IFFALSE 7016
// begin control := control_remote ;
7006: LD_ADDR_VAR 0 4
7010: PUSH
7011: LD_INT 2
7013: ST_TO_ADDR
// break ;
7014: GO 7018
// end ;
7016: GO 6989
7018: POP
7019: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7020: LD_VAR 0 1
7024: PPUSH
7025: LD_VAR 0 2
7029: PPUSH
7030: LD_VAR 0 3
7034: PPUSH
7035: LD_VAR 0 4
7039: PPUSH
7040: LD_VAR 0 5
7044: PPUSH
7045: CALL_OW 448
7049: IFFALSE 7084
// begin result := [ chassis , engine , control , weapon ] ;
7051: LD_ADDR_VAR 0 6
7055: PUSH
7056: LD_VAR 0 2
7060: PUSH
7061: LD_VAR 0 3
7065: PUSH
7066: LD_VAR 0 4
7070: PUSH
7071: LD_VAR 0 5
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: ST_TO_ADDR
// exit ;
7082: GO 7496
// end ; _chassis := AvailableChassisList ( factory ) ;
7084: LD_ADDR_VAR 0 9
7088: PUSH
7089: LD_VAR 0 1
7093: PPUSH
7094: CALL_OW 475
7098: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7099: LD_ADDR_VAR 0 11
7103: PUSH
7104: LD_VAR 0 1
7108: PPUSH
7109: CALL_OW 476
7113: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7114: LD_ADDR_VAR 0 12
7118: PUSH
7119: LD_VAR 0 1
7123: PPUSH
7124: CALL_OW 477
7128: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7129: LD_ADDR_VAR 0 10
7133: PUSH
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 478
7143: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7144: LD_VAR 0 9
7148: NOT
7149: PUSH
7150: LD_VAR 0 11
7154: NOT
7155: OR
7156: PUSH
7157: LD_VAR 0 12
7161: NOT
7162: OR
7163: PUSH
7164: LD_VAR 0 10
7168: NOT
7169: OR
7170: IFFALSE 7205
// begin result := [ chassis , engine , control , weapon ] ;
7172: LD_ADDR_VAR 0 6
7176: PUSH
7177: LD_VAR 0 2
7181: PUSH
7182: LD_VAR 0 3
7186: PUSH
7187: LD_VAR 0 4
7191: PUSH
7192: LD_VAR 0 5
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: ST_TO_ADDR
// exit ;
7203: GO 7496
// end ; if not chassis in _chassis then
7205: LD_VAR 0 2
7209: PUSH
7210: LD_VAR 0 9
7214: IN
7215: NOT
7216: IFFALSE 7242
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7218: LD_ADDR_VAR 0 2
7222: PUSH
7223: LD_VAR 0 9
7227: PUSH
7228: LD_INT 1
7230: PPUSH
7231: LD_VAR 0 9
7235: PPUSH
7236: CALL_OW 12
7240: ARRAY
7241: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7242: LD_VAR 0 2
7246: PPUSH
7247: LD_VAR 0 3
7251: PPUSH
7252: CALL 7501 0 2
7256: NOT
7257: IFFALSE 7316
// repeat engine := _engine [ 1 ] ;
7259: LD_ADDR_VAR 0 3
7263: PUSH
7264: LD_VAR 0 11
7268: PUSH
7269: LD_INT 1
7271: ARRAY
7272: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7273: LD_ADDR_VAR 0 11
7277: PUSH
7278: LD_VAR 0 11
7282: PPUSH
7283: LD_INT 1
7285: PPUSH
7286: CALL_OW 3
7290: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7291: LD_VAR 0 2
7295: PPUSH
7296: LD_VAR 0 3
7300: PPUSH
7301: CALL 7501 0 2
7305: PUSH
7306: LD_VAR 0 11
7310: PUSH
7311: EMPTY
7312: EQUAL
7313: OR
7314: IFFALSE 7259
// if not control in _control then
7316: LD_VAR 0 4
7320: PUSH
7321: LD_VAR 0 12
7325: IN
7326: NOT
7327: IFFALSE 7353
// control := _control [ rand ( 1 , _control ) ] ;
7329: LD_ADDR_VAR 0 4
7333: PUSH
7334: LD_VAR 0 12
7338: PUSH
7339: LD_INT 1
7341: PPUSH
7342: LD_VAR 0 12
7346: PPUSH
7347: CALL_OW 12
7351: ARRAY
7352: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7353: LD_VAR 0 2
7357: PPUSH
7358: LD_VAR 0 5
7362: PPUSH
7363: CALL 7721 0 2
7367: NOT
7368: IFFALSE 7427
// repeat weapon := _weapon [ 1 ] ;
7370: LD_ADDR_VAR 0 5
7374: PUSH
7375: LD_VAR 0 10
7379: PUSH
7380: LD_INT 1
7382: ARRAY
7383: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7384: LD_ADDR_VAR 0 10
7388: PUSH
7389: LD_VAR 0 10
7393: PPUSH
7394: LD_INT 1
7396: PPUSH
7397: CALL_OW 3
7401: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7402: LD_VAR 0 2
7406: PPUSH
7407: LD_VAR 0 5
7411: PPUSH
7412: CALL 7721 0 2
7416: PUSH
7417: LD_VAR 0 10
7421: PUSH
7422: EMPTY
7423: EQUAL
7424: OR
7425: IFFALSE 7370
// result := [ ] ;
7427: LD_ADDR_VAR 0 6
7431: PUSH
7432: EMPTY
7433: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7434: LD_VAR 0 1
7438: PPUSH
7439: LD_VAR 0 2
7443: PPUSH
7444: LD_VAR 0 3
7448: PPUSH
7449: LD_VAR 0 4
7453: PPUSH
7454: LD_VAR 0 5
7458: PPUSH
7459: CALL_OW 448
7463: IFFALSE 7496
// result := [ chassis , engine , control , weapon ] ;
7465: LD_ADDR_VAR 0 6
7469: PUSH
7470: LD_VAR 0 2
7474: PUSH
7475: LD_VAR 0 3
7479: PUSH
7480: LD_VAR 0 4
7484: PUSH
7485: LD_VAR 0 5
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: LIST
7495: ST_TO_ADDR
// end ;
7496: LD_VAR 0 6
7500: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7501: LD_INT 0
7503: PPUSH
// if not chassis or not engine then
7504: LD_VAR 0 1
7508: NOT
7509: PUSH
7510: LD_VAR 0 2
7514: NOT
7515: OR
7516: IFFALSE 7520
// exit ;
7518: GO 7716
// case engine of engine_solar :
7520: LD_VAR 0 2
7524: PUSH
7525: LD_INT 2
7527: DOUBLE
7528: EQUAL
7529: IFTRUE 7533
7531: GO 7571
7533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7534: LD_ADDR_VAR 0 3
7538: PUSH
7539: LD_INT 11
7541: PUSH
7542: LD_INT 12
7544: PUSH
7545: LD_INT 13
7547: PUSH
7548: LD_INT 14
7550: PUSH
7551: LD_INT 1
7553: PUSH
7554: LD_INT 2
7556: PUSH
7557: LD_INT 3
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: ST_TO_ADDR
7569: GO 7700
7571: LD_INT 1
7573: DOUBLE
7574: EQUAL
7575: IFTRUE 7579
7577: GO 7641
7579: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7580: LD_ADDR_VAR 0 3
7584: PUSH
7585: LD_INT 11
7587: PUSH
7588: LD_INT 12
7590: PUSH
7591: LD_INT 13
7593: PUSH
7594: LD_INT 14
7596: PUSH
7597: LD_INT 1
7599: PUSH
7600: LD_INT 2
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: LD_INT 4
7608: PUSH
7609: LD_INT 5
7611: PUSH
7612: LD_INT 21
7614: PUSH
7615: LD_INT 23
7617: PUSH
7618: LD_INT 22
7620: PUSH
7621: LD_INT 24
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: ST_TO_ADDR
7639: GO 7700
7641: LD_INT 3
7643: DOUBLE
7644: EQUAL
7645: IFTRUE 7649
7647: GO 7699
7649: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7650: LD_ADDR_VAR 0 3
7654: PUSH
7655: LD_INT 13
7657: PUSH
7658: LD_INT 14
7660: PUSH
7661: LD_INT 2
7663: PUSH
7664: LD_INT 3
7666: PUSH
7667: LD_INT 4
7669: PUSH
7670: LD_INT 5
7672: PUSH
7673: LD_INT 21
7675: PUSH
7676: LD_INT 22
7678: PUSH
7679: LD_INT 23
7681: PUSH
7682: LD_INT 24
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: ST_TO_ADDR
7697: GO 7700
7699: POP
// result := ( chassis in result ) ;
7700: LD_ADDR_VAR 0 3
7704: PUSH
7705: LD_VAR 0 1
7709: PUSH
7710: LD_VAR 0 3
7714: IN
7715: ST_TO_ADDR
// end ;
7716: LD_VAR 0 3
7720: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7721: LD_INT 0
7723: PPUSH
// if not chassis or not weapon then
7724: LD_VAR 0 1
7728: NOT
7729: PUSH
7730: LD_VAR 0 2
7734: NOT
7735: OR
7736: IFFALSE 7740
// exit ;
7738: GO 8802
// case weapon of us_machine_gun :
7740: LD_VAR 0 2
7744: PUSH
7745: LD_INT 2
7747: DOUBLE
7748: EQUAL
7749: IFTRUE 7753
7751: GO 7783
7753: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7754: LD_ADDR_VAR 0 3
7758: PUSH
7759: LD_INT 1
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: LD_INT 3
7767: PUSH
7768: LD_INT 4
7770: PUSH
7771: LD_INT 5
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: ST_TO_ADDR
7781: GO 8786
7783: LD_INT 3
7785: DOUBLE
7786: EQUAL
7787: IFTRUE 7791
7789: GO 7821
7791: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7792: LD_ADDR_VAR 0 3
7796: PUSH
7797: LD_INT 1
7799: PUSH
7800: LD_INT 2
7802: PUSH
7803: LD_INT 3
7805: PUSH
7806: LD_INT 4
7808: PUSH
7809: LD_INT 5
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: ST_TO_ADDR
7819: GO 8786
7821: LD_INT 11
7823: DOUBLE
7824: EQUAL
7825: IFTRUE 7829
7827: GO 7859
7829: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7830: LD_ADDR_VAR 0 3
7834: PUSH
7835: LD_INT 1
7837: PUSH
7838: LD_INT 2
7840: PUSH
7841: LD_INT 3
7843: PUSH
7844: LD_INT 4
7846: PUSH
7847: LD_INT 5
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: ST_TO_ADDR
7857: GO 8786
7859: LD_INT 4
7861: DOUBLE
7862: EQUAL
7863: IFTRUE 7867
7865: GO 7893
7867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7868: LD_ADDR_VAR 0 3
7872: PUSH
7873: LD_INT 2
7875: PUSH
7876: LD_INT 3
7878: PUSH
7879: LD_INT 4
7881: PUSH
7882: LD_INT 5
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: ST_TO_ADDR
7891: GO 8786
7893: LD_INT 5
7895: DOUBLE
7896: EQUAL
7897: IFTRUE 7901
7899: GO 7927
7901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7902: LD_ADDR_VAR 0 3
7906: PUSH
7907: LD_INT 2
7909: PUSH
7910: LD_INT 3
7912: PUSH
7913: LD_INT 4
7915: PUSH
7916: LD_INT 5
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: ST_TO_ADDR
7925: GO 8786
7927: LD_INT 9
7929: DOUBLE
7930: EQUAL
7931: IFTRUE 7935
7933: GO 7961
7935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7936: LD_ADDR_VAR 0 3
7940: PUSH
7941: LD_INT 2
7943: PUSH
7944: LD_INT 3
7946: PUSH
7947: LD_INT 4
7949: PUSH
7950: LD_INT 5
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: ST_TO_ADDR
7959: GO 8786
7961: LD_INT 7
7963: DOUBLE
7964: EQUAL
7965: IFTRUE 7969
7967: GO 7995
7969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7970: LD_ADDR_VAR 0 3
7974: PUSH
7975: LD_INT 2
7977: PUSH
7978: LD_INT 3
7980: PUSH
7981: LD_INT 4
7983: PUSH
7984: LD_INT 5
7986: PUSH
7987: EMPTY
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: ST_TO_ADDR
7993: GO 8786
7995: LD_INT 12
7997: DOUBLE
7998: EQUAL
7999: IFTRUE 8003
8001: GO 8029
8003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8004: LD_ADDR_VAR 0 3
8008: PUSH
8009: LD_INT 2
8011: PUSH
8012: LD_INT 3
8014: PUSH
8015: LD_INT 4
8017: PUSH
8018: LD_INT 5
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: ST_TO_ADDR
8027: GO 8786
8029: LD_INT 13
8031: DOUBLE
8032: EQUAL
8033: IFTRUE 8037
8035: GO 8063
8037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8038: LD_ADDR_VAR 0 3
8042: PUSH
8043: LD_INT 2
8045: PUSH
8046: LD_INT 3
8048: PUSH
8049: LD_INT 4
8051: PUSH
8052: LD_INT 5
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: ST_TO_ADDR
8061: GO 8786
8063: LD_INT 14
8065: DOUBLE
8066: EQUAL
8067: IFTRUE 8071
8069: GO 8089
8071: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8072: LD_ADDR_VAR 0 3
8076: PUSH
8077: LD_INT 4
8079: PUSH
8080: LD_INT 5
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: ST_TO_ADDR
8087: GO 8786
8089: LD_INT 6
8091: DOUBLE
8092: EQUAL
8093: IFTRUE 8097
8095: GO 8115
8097: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8098: LD_ADDR_VAR 0 3
8102: PUSH
8103: LD_INT 4
8105: PUSH
8106: LD_INT 5
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: ST_TO_ADDR
8113: GO 8786
8115: LD_INT 10
8117: DOUBLE
8118: EQUAL
8119: IFTRUE 8123
8121: GO 8141
8123: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8124: LD_ADDR_VAR 0 3
8128: PUSH
8129: LD_INT 4
8131: PUSH
8132: LD_INT 5
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: ST_TO_ADDR
8139: GO 8786
8141: LD_INT 22
8143: DOUBLE
8144: EQUAL
8145: IFTRUE 8149
8147: GO 8175
8149: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8150: LD_ADDR_VAR 0 3
8154: PUSH
8155: LD_INT 11
8157: PUSH
8158: LD_INT 12
8160: PUSH
8161: LD_INT 13
8163: PUSH
8164: LD_INT 14
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: ST_TO_ADDR
8173: GO 8786
8175: LD_INT 23
8177: DOUBLE
8178: EQUAL
8179: IFTRUE 8183
8181: GO 8209
8183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8184: LD_ADDR_VAR 0 3
8188: PUSH
8189: LD_INT 11
8191: PUSH
8192: LD_INT 12
8194: PUSH
8195: LD_INT 13
8197: PUSH
8198: LD_INT 14
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: ST_TO_ADDR
8207: GO 8786
8209: LD_INT 24
8211: DOUBLE
8212: EQUAL
8213: IFTRUE 8217
8215: GO 8243
8217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8218: LD_ADDR_VAR 0 3
8222: PUSH
8223: LD_INT 11
8225: PUSH
8226: LD_INT 12
8228: PUSH
8229: LD_INT 13
8231: PUSH
8232: LD_INT 14
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: ST_TO_ADDR
8241: GO 8786
8243: LD_INT 30
8245: DOUBLE
8246: EQUAL
8247: IFTRUE 8251
8249: GO 8277
8251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8252: LD_ADDR_VAR 0 3
8256: PUSH
8257: LD_INT 11
8259: PUSH
8260: LD_INT 12
8262: PUSH
8263: LD_INT 13
8265: PUSH
8266: LD_INT 14
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: ST_TO_ADDR
8275: GO 8786
8277: LD_INT 25
8279: DOUBLE
8280: EQUAL
8281: IFTRUE 8285
8283: GO 8303
8285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8286: LD_ADDR_VAR 0 3
8290: PUSH
8291: LD_INT 13
8293: PUSH
8294: LD_INT 14
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: ST_TO_ADDR
8301: GO 8786
8303: LD_INT 27
8305: DOUBLE
8306: EQUAL
8307: IFTRUE 8311
8309: GO 8329
8311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8312: LD_ADDR_VAR 0 3
8316: PUSH
8317: LD_INT 13
8319: PUSH
8320: LD_INT 14
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: ST_TO_ADDR
8327: GO 8786
8329: LD_EXP 49
8333: DOUBLE
8334: EQUAL
8335: IFTRUE 8339
8337: GO 8365
8339: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8340: LD_ADDR_VAR 0 3
8344: PUSH
8345: LD_INT 11
8347: PUSH
8348: LD_INT 12
8350: PUSH
8351: LD_INT 13
8353: PUSH
8354: LD_INT 14
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: ST_TO_ADDR
8363: GO 8786
8365: LD_INT 28
8367: DOUBLE
8368: EQUAL
8369: IFTRUE 8373
8371: GO 8391
8373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8374: LD_ADDR_VAR 0 3
8378: PUSH
8379: LD_INT 13
8381: PUSH
8382: LD_INT 14
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: ST_TO_ADDR
8389: GO 8786
8391: LD_INT 29
8393: DOUBLE
8394: EQUAL
8395: IFTRUE 8399
8397: GO 8417
8399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8400: LD_ADDR_VAR 0 3
8404: PUSH
8405: LD_INT 13
8407: PUSH
8408: LD_INT 14
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: ST_TO_ADDR
8415: GO 8786
8417: LD_INT 31
8419: DOUBLE
8420: EQUAL
8421: IFTRUE 8425
8423: GO 8443
8425: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8426: LD_ADDR_VAR 0 3
8430: PUSH
8431: LD_INT 13
8433: PUSH
8434: LD_INT 14
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: ST_TO_ADDR
8441: GO 8786
8443: LD_INT 26
8445: DOUBLE
8446: EQUAL
8447: IFTRUE 8451
8449: GO 8469
8451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8452: LD_ADDR_VAR 0 3
8456: PUSH
8457: LD_INT 13
8459: PUSH
8460: LD_INT 14
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: ST_TO_ADDR
8467: GO 8786
8469: LD_INT 42
8471: DOUBLE
8472: EQUAL
8473: IFTRUE 8477
8475: GO 8503
8477: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8478: LD_ADDR_VAR 0 3
8482: PUSH
8483: LD_INT 21
8485: PUSH
8486: LD_INT 22
8488: PUSH
8489: LD_INT 23
8491: PUSH
8492: LD_INT 24
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: ST_TO_ADDR
8501: GO 8786
8503: LD_INT 43
8505: DOUBLE
8506: EQUAL
8507: IFTRUE 8511
8509: GO 8537
8511: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8512: LD_ADDR_VAR 0 3
8516: PUSH
8517: LD_INT 21
8519: PUSH
8520: LD_INT 22
8522: PUSH
8523: LD_INT 23
8525: PUSH
8526: LD_INT 24
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: ST_TO_ADDR
8535: GO 8786
8537: LD_INT 44
8539: DOUBLE
8540: EQUAL
8541: IFTRUE 8545
8543: GO 8571
8545: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8546: LD_ADDR_VAR 0 3
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 22
8556: PUSH
8557: LD_INT 23
8559: PUSH
8560: LD_INT 24
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: ST_TO_ADDR
8569: GO 8786
8571: LD_INT 45
8573: DOUBLE
8574: EQUAL
8575: IFTRUE 8579
8577: GO 8605
8579: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8580: LD_ADDR_VAR 0 3
8584: PUSH
8585: LD_INT 21
8587: PUSH
8588: LD_INT 22
8590: PUSH
8591: LD_INT 23
8593: PUSH
8594: LD_INT 24
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: ST_TO_ADDR
8603: GO 8786
8605: LD_INT 49
8607: DOUBLE
8608: EQUAL
8609: IFTRUE 8613
8611: GO 8639
8613: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8614: LD_ADDR_VAR 0 3
8618: PUSH
8619: LD_INT 21
8621: PUSH
8622: LD_INT 22
8624: PUSH
8625: LD_INT 23
8627: PUSH
8628: LD_INT 24
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: LIST
8636: ST_TO_ADDR
8637: GO 8786
8639: LD_INT 51
8641: DOUBLE
8642: EQUAL
8643: IFTRUE 8647
8645: GO 8673
8647: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: LD_INT 21
8655: PUSH
8656: LD_INT 22
8658: PUSH
8659: LD_INT 23
8661: PUSH
8662: LD_INT 24
8664: PUSH
8665: EMPTY
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: ST_TO_ADDR
8671: GO 8786
8673: LD_INT 52
8675: DOUBLE
8676: EQUAL
8677: IFTRUE 8681
8679: GO 8707
8681: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8682: LD_ADDR_VAR 0 3
8686: PUSH
8687: LD_INT 21
8689: PUSH
8690: LD_INT 22
8692: PUSH
8693: LD_INT 23
8695: PUSH
8696: LD_INT 24
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: ST_TO_ADDR
8705: GO 8786
8707: LD_INT 53
8709: DOUBLE
8710: EQUAL
8711: IFTRUE 8715
8713: GO 8733
8715: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8716: LD_ADDR_VAR 0 3
8720: PUSH
8721: LD_INT 23
8723: PUSH
8724: LD_INT 24
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: ST_TO_ADDR
8731: GO 8786
8733: LD_INT 46
8735: DOUBLE
8736: EQUAL
8737: IFTRUE 8741
8739: GO 8759
8741: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8742: LD_ADDR_VAR 0 3
8746: PUSH
8747: LD_INT 23
8749: PUSH
8750: LD_INT 24
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: ST_TO_ADDR
8757: GO 8786
8759: LD_INT 47
8761: DOUBLE
8762: EQUAL
8763: IFTRUE 8767
8765: GO 8785
8767: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8768: LD_ADDR_VAR 0 3
8772: PUSH
8773: LD_INT 23
8775: PUSH
8776: LD_INT 24
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: ST_TO_ADDR
8783: GO 8786
8785: POP
// result := ( chassis in result ) ;
8786: LD_ADDR_VAR 0 3
8790: PUSH
8791: LD_VAR 0 1
8795: PUSH
8796: LD_VAR 0 3
8800: IN
8801: ST_TO_ADDR
// end ;
8802: LD_VAR 0 3
8806: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8807: LD_INT 0
8809: PPUSH
8810: PPUSH
8811: PPUSH
8812: PPUSH
8813: PPUSH
8814: PPUSH
8815: PPUSH
// result := array ;
8816: LD_ADDR_VAR 0 5
8820: PUSH
8821: LD_VAR 0 1
8825: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8826: LD_VAR 0 1
8830: NOT
8831: PUSH
8832: LD_VAR 0 2
8836: NOT
8837: OR
8838: PUSH
8839: LD_VAR 0 3
8843: NOT
8844: OR
8845: PUSH
8846: LD_VAR 0 2
8850: PUSH
8851: LD_VAR 0 1
8855: GREATER
8856: OR
8857: PUSH
8858: LD_VAR 0 3
8862: PUSH
8863: LD_VAR 0 1
8867: GREATER
8868: OR
8869: IFFALSE 8873
// exit ;
8871: GO 9169
// if direction then
8873: LD_VAR 0 4
8877: IFFALSE 8941
// begin d := 1 ;
8879: LD_ADDR_VAR 0 9
8883: PUSH
8884: LD_INT 1
8886: ST_TO_ADDR
// if i_from > i_to then
8887: LD_VAR 0 2
8891: PUSH
8892: LD_VAR 0 3
8896: GREATER
8897: IFFALSE 8923
// length := ( array - i_from ) + i_to else
8899: LD_ADDR_VAR 0 11
8903: PUSH
8904: LD_VAR 0 1
8908: PUSH
8909: LD_VAR 0 2
8913: MINUS
8914: PUSH
8915: LD_VAR 0 3
8919: PLUS
8920: ST_TO_ADDR
8921: GO 8939
// length := i_to - i_from ;
8923: LD_ADDR_VAR 0 11
8927: PUSH
8928: LD_VAR 0 3
8932: PUSH
8933: LD_VAR 0 2
8937: MINUS
8938: ST_TO_ADDR
// end else
8939: GO 9002
// begin d := - 1 ;
8941: LD_ADDR_VAR 0 9
8945: PUSH
8946: LD_INT 1
8948: NEG
8949: ST_TO_ADDR
// if i_from > i_to then
8950: LD_VAR 0 2
8954: PUSH
8955: LD_VAR 0 3
8959: GREATER
8960: IFFALSE 8980
// length := i_from - i_to else
8962: LD_ADDR_VAR 0 11
8966: PUSH
8967: LD_VAR 0 2
8971: PUSH
8972: LD_VAR 0 3
8976: MINUS
8977: ST_TO_ADDR
8978: GO 9002
// length := ( array - i_to ) + i_from ;
8980: LD_ADDR_VAR 0 11
8984: PUSH
8985: LD_VAR 0 1
8989: PUSH
8990: LD_VAR 0 3
8994: MINUS
8995: PUSH
8996: LD_VAR 0 2
9000: PLUS
9001: ST_TO_ADDR
// end ; if not length then
9002: LD_VAR 0 11
9006: NOT
9007: IFFALSE 9011
// exit ;
9009: GO 9169
// tmp := array ;
9011: LD_ADDR_VAR 0 10
9015: PUSH
9016: LD_VAR 0 1
9020: ST_TO_ADDR
// for i = 1 to length do
9021: LD_ADDR_VAR 0 6
9025: PUSH
9026: DOUBLE
9027: LD_INT 1
9029: DEC
9030: ST_TO_ADDR
9031: LD_VAR 0 11
9035: PUSH
9036: FOR_TO
9037: IFFALSE 9157
// begin for j = 1 to array do
9039: LD_ADDR_VAR 0 7
9043: PUSH
9044: DOUBLE
9045: LD_INT 1
9047: DEC
9048: ST_TO_ADDR
9049: LD_VAR 0 1
9053: PUSH
9054: FOR_TO
9055: IFFALSE 9143
// begin k := j + d ;
9057: LD_ADDR_VAR 0 8
9061: PUSH
9062: LD_VAR 0 7
9066: PUSH
9067: LD_VAR 0 9
9071: PLUS
9072: ST_TO_ADDR
// if k > array then
9073: LD_VAR 0 8
9077: PUSH
9078: LD_VAR 0 1
9082: GREATER
9083: IFFALSE 9093
// k := 1 ;
9085: LD_ADDR_VAR 0 8
9089: PUSH
9090: LD_INT 1
9092: ST_TO_ADDR
// if not k then
9093: LD_VAR 0 8
9097: NOT
9098: IFFALSE 9110
// k := array ;
9100: LD_ADDR_VAR 0 8
9104: PUSH
9105: LD_VAR 0 1
9109: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9110: LD_ADDR_VAR 0 10
9114: PUSH
9115: LD_VAR 0 10
9119: PPUSH
9120: LD_VAR 0 8
9124: PPUSH
9125: LD_VAR 0 1
9129: PUSH
9130: LD_VAR 0 7
9134: ARRAY
9135: PPUSH
9136: CALL_OW 1
9140: ST_TO_ADDR
// end ;
9141: GO 9054
9143: POP
9144: POP
// array := tmp ;
9145: LD_ADDR_VAR 0 1
9149: PUSH
9150: LD_VAR 0 10
9154: ST_TO_ADDR
// end ;
9155: GO 9036
9157: POP
9158: POP
// result := array ;
9159: LD_ADDR_VAR 0 5
9163: PUSH
9164: LD_VAR 0 1
9168: ST_TO_ADDR
// end ;
9169: LD_VAR 0 5
9173: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9174: LD_INT 0
9176: PPUSH
9177: PPUSH
// result := 0 ;
9178: LD_ADDR_VAR 0 3
9182: PUSH
9183: LD_INT 0
9185: ST_TO_ADDR
// if not array or not value in array then
9186: LD_VAR 0 1
9190: NOT
9191: PUSH
9192: LD_VAR 0 2
9196: PUSH
9197: LD_VAR 0 1
9201: IN
9202: NOT
9203: OR
9204: IFFALSE 9208
// exit ;
9206: GO 9262
// for i = 1 to array do
9208: LD_ADDR_VAR 0 4
9212: PUSH
9213: DOUBLE
9214: LD_INT 1
9216: DEC
9217: ST_TO_ADDR
9218: LD_VAR 0 1
9222: PUSH
9223: FOR_TO
9224: IFFALSE 9260
// if value = array [ i ] then
9226: LD_VAR 0 2
9230: PUSH
9231: LD_VAR 0 1
9235: PUSH
9236: LD_VAR 0 4
9240: ARRAY
9241: EQUAL
9242: IFFALSE 9258
// begin result := i ;
9244: LD_ADDR_VAR 0 3
9248: PUSH
9249: LD_VAR 0 4
9253: ST_TO_ADDR
// exit ;
9254: POP
9255: POP
9256: GO 9262
// end ;
9258: GO 9223
9260: POP
9261: POP
// end ;
9262: LD_VAR 0 3
9266: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9267: LD_INT 0
9269: PPUSH
// vc_chassis := chassis ;
9270: LD_ADDR_OWVAR 37
9274: PUSH
9275: LD_VAR 0 1
9279: ST_TO_ADDR
// vc_engine := engine ;
9280: LD_ADDR_OWVAR 39
9284: PUSH
9285: LD_VAR 0 2
9289: ST_TO_ADDR
// vc_control := control ;
9290: LD_ADDR_OWVAR 38
9294: PUSH
9295: LD_VAR 0 3
9299: ST_TO_ADDR
// vc_weapon := weapon ;
9300: LD_ADDR_OWVAR 40
9304: PUSH
9305: LD_VAR 0 4
9309: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9310: LD_ADDR_OWVAR 41
9314: PUSH
9315: LD_VAR 0 5
9319: ST_TO_ADDR
// end ;
9320: LD_VAR 0 6
9324: RET
// export function WantPlant ( unit ) ; var task ; begin
9325: LD_INT 0
9327: PPUSH
9328: PPUSH
// result := false ;
9329: LD_ADDR_VAR 0 2
9333: PUSH
9334: LD_INT 0
9336: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9337: LD_ADDR_VAR 0 3
9341: PUSH
9342: LD_VAR 0 1
9346: PPUSH
9347: CALL_OW 437
9351: ST_TO_ADDR
// if task then
9352: LD_VAR 0 3
9356: IFFALSE 9384
// if task [ 1 ] [ 1 ] = p then
9358: LD_VAR 0 3
9362: PUSH
9363: LD_INT 1
9365: ARRAY
9366: PUSH
9367: LD_INT 1
9369: ARRAY
9370: PUSH
9371: LD_STRING p
9373: EQUAL
9374: IFFALSE 9384
// result := true ;
9376: LD_ADDR_VAR 0 2
9380: PUSH
9381: LD_INT 1
9383: ST_TO_ADDR
// end ;
9384: LD_VAR 0 2
9388: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9389: LD_INT 0
9391: PPUSH
9392: PPUSH
9393: PPUSH
9394: PPUSH
// if pos < 1 then
9395: LD_VAR 0 2
9399: PUSH
9400: LD_INT 1
9402: LESS
9403: IFFALSE 9407
// exit ;
9405: GO 9710
// if pos = 1 then
9407: LD_VAR 0 2
9411: PUSH
9412: LD_INT 1
9414: EQUAL
9415: IFFALSE 9448
// result := Replace ( arr , pos [ 1 ] , value ) else
9417: LD_ADDR_VAR 0 4
9421: PUSH
9422: LD_VAR 0 1
9426: PPUSH
9427: LD_VAR 0 2
9431: PUSH
9432: LD_INT 1
9434: ARRAY
9435: PPUSH
9436: LD_VAR 0 3
9440: PPUSH
9441: CALL_OW 1
9445: ST_TO_ADDR
9446: GO 9710
// begin tmp := arr ;
9448: LD_ADDR_VAR 0 6
9452: PUSH
9453: LD_VAR 0 1
9457: ST_TO_ADDR
// s_arr := [ tmp ] ;
9458: LD_ADDR_VAR 0 7
9462: PUSH
9463: LD_VAR 0 6
9467: PUSH
9468: EMPTY
9469: LIST
9470: ST_TO_ADDR
// for i = 1 to pos - 1 do
9471: LD_ADDR_VAR 0 5
9475: PUSH
9476: DOUBLE
9477: LD_INT 1
9479: DEC
9480: ST_TO_ADDR
9481: LD_VAR 0 2
9485: PUSH
9486: LD_INT 1
9488: MINUS
9489: PUSH
9490: FOR_TO
9491: IFFALSE 9536
// begin tmp := tmp [ pos [ i ] ] ;
9493: LD_ADDR_VAR 0 6
9497: PUSH
9498: LD_VAR 0 6
9502: PUSH
9503: LD_VAR 0 2
9507: PUSH
9508: LD_VAR 0 5
9512: ARRAY
9513: ARRAY
9514: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9515: LD_ADDR_VAR 0 7
9519: PUSH
9520: LD_VAR 0 7
9524: PUSH
9525: LD_VAR 0 6
9529: PUSH
9530: EMPTY
9531: LIST
9532: ADD
9533: ST_TO_ADDR
// end ;
9534: GO 9490
9536: POP
9537: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9538: LD_ADDR_VAR 0 6
9542: PUSH
9543: LD_VAR 0 6
9547: PPUSH
9548: LD_VAR 0 2
9552: PUSH
9553: LD_VAR 0 2
9557: ARRAY
9558: PPUSH
9559: LD_VAR 0 3
9563: PPUSH
9564: CALL_OW 1
9568: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9569: LD_ADDR_VAR 0 7
9573: PUSH
9574: LD_VAR 0 7
9578: PPUSH
9579: LD_VAR 0 7
9583: PPUSH
9584: LD_VAR 0 6
9588: PPUSH
9589: CALL_OW 1
9593: ST_TO_ADDR
// for i = s_arr downto 2 do
9594: LD_ADDR_VAR 0 5
9598: PUSH
9599: DOUBLE
9600: LD_VAR 0 7
9604: INC
9605: ST_TO_ADDR
9606: LD_INT 2
9608: PUSH
9609: FOR_DOWNTO
9610: IFFALSE 9694
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9612: LD_ADDR_VAR 0 6
9616: PUSH
9617: LD_VAR 0 7
9621: PUSH
9622: LD_VAR 0 5
9626: PUSH
9627: LD_INT 1
9629: MINUS
9630: ARRAY
9631: PPUSH
9632: LD_VAR 0 2
9636: PUSH
9637: LD_VAR 0 5
9641: PUSH
9642: LD_INT 1
9644: MINUS
9645: ARRAY
9646: PPUSH
9647: LD_VAR 0 7
9651: PUSH
9652: LD_VAR 0 5
9656: ARRAY
9657: PPUSH
9658: CALL_OW 1
9662: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9663: LD_ADDR_VAR 0 7
9667: PUSH
9668: LD_VAR 0 7
9672: PPUSH
9673: LD_VAR 0 5
9677: PUSH
9678: LD_INT 1
9680: MINUS
9681: PPUSH
9682: LD_VAR 0 6
9686: PPUSH
9687: CALL_OW 1
9691: ST_TO_ADDR
// end ;
9692: GO 9609
9694: POP
9695: POP
// result := s_arr [ 1 ] ;
9696: LD_ADDR_VAR 0 4
9700: PUSH
9701: LD_VAR 0 7
9705: PUSH
9706: LD_INT 1
9708: ARRAY
9709: ST_TO_ADDR
// end ; end ;
9710: LD_VAR 0 4
9714: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9715: LD_INT 0
9717: PPUSH
9718: PPUSH
// if not list then
9719: LD_VAR 0 1
9723: NOT
9724: IFFALSE 9728
// exit ;
9726: GO 9819
// i := list [ pos1 ] ;
9728: LD_ADDR_VAR 0 5
9732: PUSH
9733: LD_VAR 0 1
9737: PUSH
9738: LD_VAR 0 2
9742: ARRAY
9743: ST_TO_ADDR
// if not i then
9744: LD_VAR 0 5
9748: NOT
9749: IFFALSE 9753
// exit ;
9751: GO 9819
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9753: LD_ADDR_VAR 0 1
9757: PUSH
9758: LD_VAR 0 1
9762: PPUSH
9763: LD_VAR 0 2
9767: PPUSH
9768: LD_VAR 0 1
9772: PUSH
9773: LD_VAR 0 3
9777: ARRAY
9778: PPUSH
9779: CALL_OW 1
9783: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9784: LD_ADDR_VAR 0 1
9788: PUSH
9789: LD_VAR 0 1
9793: PPUSH
9794: LD_VAR 0 3
9798: PPUSH
9799: LD_VAR 0 5
9803: PPUSH
9804: CALL_OW 1
9808: ST_TO_ADDR
// result := list ;
9809: LD_ADDR_VAR 0 4
9813: PUSH
9814: LD_VAR 0 1
9818: ST_TO_ADDR
// end ;
9819: LD_VAR 0 4
9823: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9824: LD_INT 0
9826: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9827: LD_ADDR_VAR 0 5
9831: PUSH
9832: LD_VAR 0 1
9836: PPUSH
9837: CALL_OW 250
9841: PPUSH
9842: LD_VAR 0 1
9846: PPUSH
9847: CALL_OW 251
9851: PPUSH
9852: LD_VAR 0 2
9856: PPUSH
9857: LD_VAR 0 3
9861: PPUSH
9862: LD_VAR 0 4
9866: PPUSH
9867: CALL 9877 0 5
9871: ST_TO_ADDR
// end ;
9872: LD_VAR 0 5
9876: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9877: LD_INT 0
9879: PPUSH
9880: PPUSH
9881: PPUSH
9882: PPUSH
// if not list then
9883: LD_VAR 0 3
9887: NOT
9888: IFFALSE 9892
// exit ;
9890: GO 10280
// result := [ ] ;
9892: LD_ADDR_VAR 0 6
9896: PUSH
9897: EMPTY
9898: ST_TO_ADDR
// for i in list do
9899: LD_ADDR_VAR 0 7
9903: PUSH
9904: LD_VAR 0 3
9908: PUSH
9909: FOR_IN
9910: IFFALSE 10112
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9912: LD_ADDR_VAR 0 9
9916: PUSH
9917: LD_VAR 0 7
9921: PPUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: LD_VAR 0 2
9931: PPUSH
9932: CALL_OW 297
9936: ST_TO_ADDR
// if not result then
9937: LD_VAR 0 6
9941: NOT
9942: IFFALSE 9968
// result := [ [ i , tmp ] ] else
9944: LD_ADDR_VAR 0 6
9948: PUSH
9949: LD_VAR 0 7
9953: PUSH
9954: LD_VAR 0 9
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: EMPTY
9964: LIST
9965: ST_TO_ADDR
9966: GO 10110
// begin if result [ result ] [ 2 ] < tmp then
9968: LD_VAR 0 6
9972: PUSH
9973: LD_VAR 0 6
9977: ARRAY
9978: PUSH
9979: LD_INT 2
9981: ARRAY
9982: PUSH
9983: LD_VAR 0 9
9987: LESS
9988: IFFALSE 10030
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9990: LD_ADDR_VAR 0 6
9994: PUSH
9995: LD_VAR 0 6
9999: PPUSH
10000: LD_VAR 0 6
10004: PUSH
10005: LD_INT 1
10007: PLUS
10008: PPUSH
10009: LD_VAR 0 7
10013: PUSH
10014: LD_VAR 0 9
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PPUSH
10023: CALL_OW 2
10027: ST_TO_ADDR
10028: GO 10110
// for j = 1 to result do
10030: LD_ADDR_VAR 0 8
10034: PUSH
10035: DOUBLE
10036: LD_INT 1
10038: DEC
10039: ST_TO_ADDR
10040: LD_VAR 0 6
10044: PUSH
10045: FOR_TO
10046: IFFALSE 10108
// begin if tmp < result [ j ] [ 2 ] then
10048: LD_VAR 0 9
10052: PUSH
10053: LD_VAR 0 6
10057: PUSH
10058: LD_VAR 0 8
10062: ARRAY
10063: PUSH
10064: LD_INT 2
10066: ARRAY
10067: LESS
10068: IFFALSE 10106
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10070: LD_ADDR_VAR 0 6
10074: PUSH
10075: LD_VAR 0 6
10079: PPUSH
10080: LD_VAR 0 8
10084: PPUSH
10085: LD_VAR 0 7
10089: PUSH
10090: LD_VAR 0 9
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PPUSH
10099: CALL_OW 2
10103: ST_TO_ADDR
// break ;
10104: GO 10108
// end ; end ;
10106: GO 10045
10108: POP
10109: POP
// end ; end ;
10110: GO 9909
10112: POP
10113: POP
// if result and not asc then
10114: LD_VAR 0 6
10118: PUSH
10119: LD_VAR 0 4
10123: NOT
10124: AND
10125: IFFALSE 10200
// begin tmp := result ;
10127: LD_ADDR_VAR 0 9
10131: PUSH
10132: LD_VAR 0 6
10136: ST_TO_ADDR
// for i = tmp downto 1 do
10137: LD_ADDR_VAR 0 7
10141: PUSH
10142: DOUBLE
10143: LD_VAR 0 9
10147: INC
10148: ST_TO_ADDR
10149: LD_INT 1
10151: PUSH
10152: FOR_DOWNTO
10153: IFFALSE 10198
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10155: LD_ADDR_VAR 0 6
10159: PUSH
10160: LD_VAR 0 6
10164: PPUSH
10165: LD_VAR 0 9
10169: PUSH
10170: LD_VAR 0 7
10174: MINUS
10175: PUSH
10176: LD_INT 1
10178: PLUS
10179: PPUSH
10180: LD_VAR 0 9
10184: PUSH
10185: LD_VAR 0 7
10189: ARRAY
10190: PPUSH
10191: CALL_OW 1
10195: ST_TO_ADDR
10196: GO 10152
10198: POP
10199: POP
// end ; tmp := [ ] ;
10200: LD_ADDR_VAR 0 9
10204: PUSH
10205: EMPTY
10206: ST_TO_ADDR
// if mode then
10207: LD_VAR 0 5
10211: IFFALSE 10280
// begin for i = 1 to result do
10213: LD_ADDR_VAR 0 7
10217: PUSH
10218: DOUBLE
10219: LD_INT 1
10221: DEC
10222: ST_TO_ADDR
10223: LD_VAR 0 6
10227: PUSH
10228: FOR_TO
10229: IFFALSE 10268
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10231: LD_ADDR_VAR 0 9
10235: PUSH
10236: LD_VAR 0 9
10240: PPUSH
10241: LD_VAR 0 7
10245: PPUSH
10246: LD_VAR 0 6
10250: PUSH
10251: LD_VAR 0 7
10255: ARRAY
10256: PUSH
10257: LD_INT 1
10259: ARRAY
10260: PPUSH
10261: CALL_OW 1
10265: ST_TO_ADDR
10266: GO 10228
10268: POP
10269: POP
// result := tmp ;
10270: LD_ADDR_VAR 0 6
10274: PUSH
10275: LD_VAR 0 9
10279: ST_TO_ADDR
// end ; end ;
10280: LD_VAR 0 6
10284: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10285: LD_INT 0
10287: PPUSH
10288: PPUSH
10289: PPUSH
10290: PPUSH
10291: PPUSH
10292: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10293: LD_ADDR_VAR 0 5
10297: PUSH
10298: LD_INT 0
10300: PUSH
10301: LD_INT 0
10303: PUSH
10304: LD_INT 0
10306: PUSH
10307: EMPTY
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: ST_TO_ADDR
// if not x or not y then
10315: LD_VAR 0 2
10319: NOT
10320: PUSH
10321: LD_VAR 0 3
10325: NOT
10326: OR
10327: IFFALSE 10331
// exit ;
10329: GO 11983
// if not range then
10331: LD_VAR 0 4
10335: NOT
10336: IFFALSE 10346
// range := 10 ;
10338: LD_ADDR_VAR 0 4
10342: PUSH
10343: LD_INT 10
10345: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10346: LD_ADDR_VAR 0 8
10350: PUSH
10351: LD_INT 81
10353: PUSH
10354: LD_VAR 0 1
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: LD_INT 92
10365: PUSH
10366: LD_VAR 0 2
10370: PUSH
10371: LD_VAR 0 3
10375: PUSH
10376: LD_VAR 0 4
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 3
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 3
10395: PUSH
10396: EMPTY
10397: LIST
10398: LIST
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: LIST
10408: PPUSH
10409: CALL_OW 69
10413: ST_TO_ADDR
// if not tmp then
10414: LD_VAR 0 8
10418: NOT
10419: IFFALSE 10423
// exit ;
10421: GO 11983
// for i in tmp do
10423: LD_ADDR_VAR 0 6
10427: PUSH
10428: LD_VAR 0 8
10432: PUSH
10433: FOR_IN
10434: IFFALSE 11958
// begin points := [ 0 , 0 , 0 ] ;
10436: LD_ADDR_VAR 0 9
10440: PUSH
10441: LD_INT 0
10443: PUSH
10444: LD_INT 0
10446: PUSH
10447: LD_INT 0
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: LIST
10454: ST_TO_ADDR
// bpoints := 1 ;
10455: LD_ADDR_VAR 0 10
10459: PUSH
10460: LD_INT 1
10462: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10463: LD_VAR 0 6
10467: PPUSH
10468: CALL_OW 247
10472: PUSH
10473: LD_INT 1
10475: DOUBLE
10476: EQUAL
10477: IFTRUE 10481
10479: GO 11059
10481: POP
// begin if GetClass ( i ) = 1 then
10482: LD_VAR 0 6
10486: PPUSH
10487: CALL_OW 257
10491: PUSH
10492: LD_INT 1
10494: EQUAL
10495: IFFALSE 10516
// points := [ 10 , 5 , 3 ] ;
10497: LD_ADDR_VAR 0 9
10501: PUSH
10502: LD_INT 10
10504: PUSH
10505: LD_INT 5
10507: PUSH
10508: LD_INT 3
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10516: LD_VAR 0 6
10520: PPUSH
10521: CALL_OW 257
10525: PUSH
10526: LD_INT 2
10528: PUSH
10529: LD_INT 3
10531: PUSH
10532: LD_INT 4
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: LIST
10539: IN
10540: IFFALSE 10561
// points := [ 3 , 2 , 1 ] ;
10542: LD_ADDR_VAR 0 9
10546: PUSH
10547: LD_INT 3
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: LD_INT 1
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10561: LD_VAR 0 6
10565: PPUSH
10566: CALL_OW 257
10570: PUSH
10571: LD_INT 5
10573: EQUAL
10574: IFFALSE 10595
// points := [ 130 , 5 , 2 ] ;
10576: LD_ADDR_VAR 0 9
10580: PUSH
10581: LD_INT 130
10583: PUSH
10584: LD_INT 5
10586: PUSH
10587: LD_INT 2
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: LIST
10594: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10595: LD_VAR 0 6
10599: PPUSH
10600: CALL_OW 257
10604: PUSH
10605: LD_INT 8
10607: EQUAL
10608: IFFALSE 10629
// points := [ 35 , 35 , 30 ] ;
10610: LD_ADDR_VAR 0 9
10614: PUSH
10615: LD_INT 35
10617: PUSH
10618: LD_INT 35
10620: PUSH
10621: LD_INT 30
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10629: LD_VAR 0 6
10633: PPUSH
10634: CALL_OW 257
10638: PUSH
10639: LD_INT 9
10641: EQUAL
10642: IFFALSE 10663
// points := [ 20 , 55 , 40 ] ;
10644: LD_ADDR_VAR 0 9
10648: PUSH
10649: LD_INT 20
10651: PUSH
10652: LD_INT 55
10654: PUSH
10655: LD_INT 40
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: LIST
10662: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10663: LD_VAR 0 6
10667: PPUSH
10668: CALL_OW 257
10672: PUSH
10673: LD_INT 12
10675: PUSH
10676: LD_INT 16
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: IN
10683: IFFALSE 10704
// points := [ 5 , 3 , 2 ] ;
10685: LD_ADDR_VAR 0 9
10689: PUSH
10690: LD_INT 5
10692: PUSH
10693: LD_INT 3
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10704: LD_VAR 0 6
10708: PPUSH
10709: CALL_OW 257
10713: PUSH
10714: LD_INT 17
10716: EQUAL
10717: IFFALSE 10738
// points := [ 100 , 50 , 75 ] ;
10719: LD_ADDR_VAR 0 9
10723: PUSH
10724: LD_INT 100
10726: PUSH
10727: LD_INT 50
10729: PUSH
10730: LD_INT 75
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: LIST
10737: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10738: LD_VAR 0 6
10742: PPUSH
10743: CALL_OW 257
10747: PUSH
10748: LD_INT 15
10750: EQUAL
10751: IFFALSE 10772
// points := [ 10 , 5 , 3 ] ;
10753: LD_ADDR_VAR 0 9
10757: PUSH
10758: LD_INT 10
10760: PUSH
10761: LD_INT 5
10763: PUSH
10764: LD_INT 3
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10772: LD_VAR 0 6
10776: PPUSH
10777: CALL_OW 257
10781: PUSH
10782: LD_INT 14
10784: EQUAL
10785: IFFALSE 10806
// points := [ 10 , 0 , 0 ] ;
10787: LD_ADDR_VAR 0 9
10791: PUSH
10792: LD_INT 10
10794: PUSH
10795: LD_INT 0
10797: PUSH
10798: LD_INT 0
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10806: LD_VAR 0 6
10810: PPUSH
10811: CALL_OW 257
10815: PUSH
10816: LD_INT 11
10818: EQUAL
10819: IFFALSE 10840
// points := [ 30 , 10 , 5 ] ;
10821: LD_ADDR_VAR 0 9
10825: PUSH
10826: LD_INT 30
10828: PUSH
10829: LD_INT 10
10831: PUSH
10832: LD_INT 5
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10840: LD_VAR 0 1
10844: PPUSH
10845: LD_INT 5
10847: PPUSH
10848: CALL_OW 321
10852: PUSH
10853: LD_INT 2
10855: EQUAL
10856: IFFALSE 10873
// bpoints := bpoints * 1.8 ;
10858: LD_ADDR_VAR 0 10
10862: PUSH
10863: LD_VAR 0 10
10867: PUSH
10868: LD_REAL  1.80000000000000E+0000
10871: MUL
10872: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10873: LD_VAR 0 6
10877: PPUSH
10878: CALL_OW 257
10882: PUSH
10883: LD_INT 1
10885: PUSH
10886: LD_INT 2
10888: PUSH
10889: LD_INT 3
10891: PUSH
10892: LD_INT 4
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: IN
10901: PUSH
10902: LD_VAR 0 1
10906: PPUSH
10907: LD_INT 51
10909: PPUSH
10910: CALL_OW 321
10914: PUSH
10915: LD_INT 2
10917: EQUAL
10918: AND
10919: IFFALSE 10936
// bpoints := bpoints * 1.2 ;
10921: LD_ADDR_VAR 0 10
10925: PUSH
10926: LD_VAR 0 10
10930: PUSH
10931: LD_REAL  1.20000000000000E+0000
10934: MUL
10935: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10936: LD_VAR 0 6
10940: PPUSH
10941: CALL_OW 257
10945: PUSH
10946: LD_INT 5
10948: PUSH
10949: LD_INT 7
10951: PUSH
10952: LD_INT 9
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: IN
10960: PUSH
10961: LD_VAR 0 1
10965: PPUSH
10966: LD_INT 52
10968: PPUSH
10969: CALL_OW 321
10973: PUSH
10974: LD_INT 2
10976: EQUAL
10977: AND
10978: IFFALSE 10995
// bpoints := bpoints * 1.5 ;
10980: LD_ADDR_VAR 0 10
10984: PUSH
10985: LD_VAR 0 10
10989: PUSH
10990: LD_REAL  1.50000000000000E+0000
10993: MUL
10994: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10995: LD_VAR 0 1
10999: PPUSH
11000: LD_INT 66
11002: PPUSH
11003: CALL_OW 321
11007: PUSH
11008: LD_INT 2
11010: EQUAL
11011: IFFALSE 11028
// bpoints := bpoints * 1.1 ;
11013: LD_ADDR_VAR 0 10
11017: PUSH
11018: LD_VAR 0 10
11022: PUSH
11023: LD_REAL  1.10000000000000E+0000
11026: MUL
11027: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11028: LD_ADDR_VAR 0 10
11032: PUSH
11033: LD_VAR 0 10
11037: PUSH
11038: LD_VAR 0 6
11042: PPUSH
11043: LD_INT 1
11045: PPUSH
11046: CALL_OW 259
11050: PUSH
11051: LD_REAL  1.15000000000000E+0000
11054: MUL
11055: MUL
11056: ST_TO_ADDR
// end ; unit_vehicle :
11057: GO 11887
11059: LD_INT 2
11061: DOUBLE
11062: EQUAL
11063: IFTRUE 11067
11065: GO 11875
11067: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11068: LD_VAR 0 6
11072: PPUSH
11073: CALL_OW 264
11077: PUSH
11078: LD_INT 2
11080: PUSH
11081: LD_INT 42
11083: PUSH
11084: LD_INT 24
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: LIST
11091: IN
11092: IFFALSE 11113
// points := [ 25 , 5 , 3 ] ;
11094: LD_ADDR_VAR 0 9
11098: PUSH
11099: LD_INT 25
11101: PUSH
11102: LD_INT 5
11104: PUSH
11105: LD_INT 3
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: LIST
11112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11113: LD_VAR 0 6
11117: PPUSH
11118: CALL_OW 264
11122: PUSH
11123: LD_INT 4
11125: PUSH
11126: LD_INT 43
11128: PUSH
11129: LD_INT 25
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: LIST
11136: IN
11137: IFFALSE 11158
// points := [ 40 , 15 , 5 ] ;
11139: LD_ADDR_VAR 0 9
11143: PUSH
11144: LD_INT 40
11146: PUSH
11147: LD_INT 15
11149: PUSH
11150: LD_INT 5
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11158: LD_VAR 0 6
11162: PPUSH
11163: CALL_OW 264
11167: PUSH
11168: LD_INT 3
11170: PUSH
11171: LD_INT 23
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: IN
11178: IFFALSE 11199
// points := [ 7 , 25 , 8 ] ;
11180: LD_ADDR_VAR 0 9
11184: PUSH
11185: LD_INT 7
11187: PUSH
11188: LD_INT 25
11190: PUSH
11191: LD_INT 8
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: LIST
11198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11199: LD_VAR 0 6
11203: PPUSH
11204: CALL_OW 264
11208: PUSH
11209: LD_INT 5
11211: PUSH
11212: LD_INT 27
11214: PUSH
11215: LD_INT 44
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: LIST
11222: IN
11223: IFFALSE 11244
// points := [ 14 , 50 , 16 ] ;
11225: LD_ADDR_VAR 0 9
11229: PUSH
11230: LD_INT 14
11232: PUSH
11233: LD_INT 50
11235: PUSH
11236: LD_INT 16
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: LIST
11243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11244: LD_VAR 0 6
11248: PPUSH
11249: CALL_OW 264
11253: PUSH
11254: LD_INT 6
11256: PUSH
11257: LD_INT 46
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: IN
11264: IFFALSE 11285
// points := [ 32 , 120 , 70 ] ;
11266: LD_ADDR_VAR 0 9
11270: PUSH
11271: LD_INT 32
11273: PUSH
11274: LD_INT 120
11276: PUSH
11277: LD_INT 70
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: LIST
11284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11285: LD_VAR 0 6
11289: PPUSH
11290: CALL_OW 264
11294: PUSH
11295: LD_INT 7
11297: PUSH
11298: LD_INT 28
11300: PUSH
11301: LD_INT 45
11303: PUSH
11304: LD_EXP 49
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: IN
11315: IFFALSE 11336
// points := [ 35 , 20 , 45 ] ;
11317: LD_ADDR_VAR 0 9
11321: PUSH
11322: LD_INT 35
11324: PUSH
11325: LD_INT 20
11327: PUSH
11328: LD_INT 45
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: LIST
11335: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11336: LD_VAR 0 6
11340: PPUSH
11341: CALL_OW 264
11345: PUSH
11346: LD_INT 47
11348: PUSH
11349: EMPTY
11350: LIST
11351: IN
11352: IFFALSE 11373
// points := [ 67 , 45 , 75 ] ;
11354: LD_ADDR_VAR 0 9
11358: PUSH
11359: LD_INT 67
11361: PUSH
11362: LD_INT 45
11364: PUSH
11365: LD_INT 75
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: LIST
11372: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11373: LD_VAR 0 6
11377: PPUSH
11378: CALL_OW 264
11382: PUSH
11383: LD_INT 26
11385: PUSH
11386: EMPTY
11387: LIST
11388: IN
11389: IFFALSE 11410
// points := [ 120 , 30 , 80 ] ;
11391: LD_ADDR_VAR 0 9
11395: PUSH
11396: LD_INT 120
11398: PUSH
11399: LD_INT 30
11401: PUSH
11402: LD_INT 80
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11410: LD_VAR 0 6
11414: PPUSH
11415: CALL_OW 264
11419: PUSH
11420: LD_INT 22
11422: PUSH
11423: EMPTY
11424: LIST
11425: IN
11426: IFFALSE 11447
// points := [ 40 , 1 , 1 ] ;
11428: LD_ADDR_VAR 0 9
11432: PUSH
11433: LD_INT 40
11435: PUSH
11436: LD_INT 1
11438: PUSH
11439: LD_INT 1
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11447: LD_VAR 0 6
11451: PPUSH
11452: CALL_OW 264
11456: PUSH
11457: LD_INT 29
11459: PUSH
11460: EMPTY
11461: LIST
11462: IN
11463: IFFALSE 11484
// points := [ 70 , 200 , 400 ] ;
11465: LD_ADDR_VAR 0 9
11469: PUSH
11470: LD_INT 70
11472: PUSH
11473: LD_INT 200
11475: PUSH
11476: LD_INT 400
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: LIST
11483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11484: LD_VAR 0 6
11488: PPUSH
11489: CALL_OW 264
11493: PUSH
11494: LD_INT 14
11496: PUSH
11497: LD_INT 53
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: IN
11504: IFFALSE 11525
// points := [ 40 , 10 , 20 ] ;
11506: LD_ADDR_VAR 0 9
11510: PUSH
11511: LD_INT 40
11513: PUSH
11514: LD_INT 10
11516: PUSH
11517: LD_INT 20
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11525: LD_VAR 0 6
11529: PPUSH
11530: CALL_OW 264
11534: PUSH
11535: LD_INT 9
11537: PUSH
11538: EMPTY
11539: LIST
11540: IN
11541: IFFALSE 11562
// points := [ 5 , 70 , 20 ] ;
11543: LD_ADDR_VAR 0 9
11547: PUSH
11548: LD_INT 5
11550: PUSH
11551: LD_INT 70
11553: PUSH
11554: LD_INT 20
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11562: LD_VAR 0 6
11566: PPUSH
11567: CALL_OW 264
11571: PUSH
11572: LD_INT 10
11574: PUSH
11575: EMPTY
11576: LIST
11577: IN
11578: IFFALSE 11599
// points := [ 35 , 110 , 70 ] ;
11580: LD_ADDR_VAR 0 9
11584: PUSH
11585: LD_INT 35
11587: PUSH
11588: LD_INT 110
11590: PUSH
11591: LD_INT 70
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: LIST
11598: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11599: LD_VAR 0 6
11603: PPUSH
11604: CALL_OW 265
11608: PUSH
11609: LD_INT 25
11611: EQUAL
11612: IFFALSE 11633
// points := [ 80 , 65 , 100 ] ;
11614: LD_ADDR_VAR 0 9
11618: PUSH
11619: LD_INT 80
11621: PUSH
11622: LD_INT 65
11624: PUSH
11625: LD_INT 100
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: LIST
11632: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11633: LD_VAR 0 6
11637: PPUSH
11638: CALL_OW 263
11642: PUSH
11643: LD_INT 1
11645: EQUAL
11646: IFFALSE 11681
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11648: LD_ADDR_VAR 0 10
11652: PUSH
11653: LD_VAR 0 10
11657: PUSH
11658: LD_VAR 0 6
11662: PPUSH
11663: CALL_OW 311
11667: PPUSH
11668: LD_INT 3
11670: PPUSH
11671: CALL_OW 259
11675: PUSH
11676: LD_INT 4
11678: MUL
11679: MUL
11680: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11681: LD_VAR 0 6
11685: PPUSH
11686: CALL_OW 263
11690: PUSH
11691: LD_INT 2
11693: EQUAL
11694: IFFALSE 11745
// begin j := IsControledBy ( i ) ;
11696: LD_ADDR_VAR 0 7
11700: PUSH
11701: LD_VAR 0 6
11705: PPUSH
11706: CALL_OW 312
11710: ST_TO_ADDR
// if j then
11711: LD_VAR 0 7
11715: IFFALSE 11745
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11717: LD_ADDR_VAR 0 10
11721: PUSH
11722: LD_VAR 0 10
11726: PUSH
11727: LD_VAR 0 7
11731: PPUSH
11732: LD_INT 3
11734: PPUSH
11735: CALL_OW 259
11739: PUSH
11740: LD_INT 3
11742: MUL
11743: MUL
11744: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11745: LD_VAR 0 6
11749: PPUSH
11750: CALL_OW 264
11754: PUSH
11755: LD_INT 5
11757: PUSH
11758: LD_INT 6
11760: PUSH
11761: LD_INT 46
11763: PUSH
11764: LD_INT 44
11766: PUSH
11767: LD_INT 47
11769: PUSH
11770: LD_INT 45
11772: PUSH
11773: LD_INT 28
11775: PUSH
11776: LD_INT 7
11778: PUSH
11779: LD_INT 27
11781: PUSH
11782: LD_INT 29
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: IN
11797: PUSH
11798: LD_VAR 0 1
11802: PPUSH
11803: LD_INT 52
11805: PPUSH
11806: CALL_OW 321
11810: PUSH
11811: LD_INT 2
11813: EQUAL
11814: AND
11815: IFFALSE 11832
// bpoints := bpoints * 1.2 ;
11817: LD_ADDR_VAR 0 10
11821: PUSH
11822: LD_VAR 0 10
11826: PUSH
11827: LD_REAL  1.20000000000000E+0000
11830: MUL
11831: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11832: LD_VAR 0 6
11836: PPUSH
11837: CALL_OW 264
11841: PUSH
11842: LD_INT 6
11844: PUSH
11845: LD_INT 46
11847: PUSH
11848: LD_INT 47
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: IN
11856: IFFALSE 11873
// bpoints := bpoints * 1.2 ;
11858: LD_ADDR_VAR 0 10
11862: PUSH
11863: LD_VAR 0 10
11867: PUSH
11868: LD_REAL  1.20000000000000E+0000
11871: MUL
11872: ST_TO_ADDR
// end ; unit_building :
11873: GO 11887
11875: LD_INT 3
11877: DOUBLE
11878: EQUAL
11879: IFTRUE 11883
11881: GO 11886
11883: POP
// ; end ;
11884: GO 11887
11886: POP
// for j = 1 to 3 do
11887: LD_ADDR_VAR 0 7
11891: PUSH
11892: DOUBLE
11893: LD_INT 1
11895: DEC
11896: ST_TO_ADDR
11897: LD_INT 3
11899: PUSH
11900: FOR_TO
11901: IFFALSE 11954
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11903: LD_ADDR_VAR 0 5
11907: PUSH
11908: LD_VAR 0 5
11912: PPUSH
11913: LD_VAR 0 7
11917: PPUSH
11918: LD_VAR 0 5
11922: PUSH
11923: LD_VAR 0 7
11927: ARRAY
11928: PUSH
11929: LD_VAR 0 9
11933: PUSH
11934: LD_VAR 0 7
11938: ARRAY
11939: PUSH
11940: LD_VAR 0 10
11944: MUL
11945: PLUS
11946: PPUSH
11947: CALL_OW 1
11951: ST_TO_ADDR
11952: GO 11900
11954: POP
11955: POP
// end ;
11956: GO 10433
11958: POP
11959: POP
// result := Replace ( result , 4 , tmp ) ;
11960: LD_ADDR_VAR 0 5
11964: PUSH
11965: LD_VAR 0 5
11969: PPUSH
11970: LD_INT 4
11972: PPUSH
11973: LD_VAR 0 8
11977: PPUSH
11978: CALL_OW 1
11982: ST_TO_ADDR
// end ;
11983: LD_VAR 0 5
11987: RET
// export function DangerAtRange ( unit , range ) ; begin
11988: LD_INT 0
11990: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11991: LD_ADDR_VAR 0 3
11995: PUSH
11996: LD_VAR 0 1
12000: PPUSH
12001: CALL_OW 255
12005: PPUSH
12006: LD_VAR 0 1
12010: PPUSH
12011: CALL_OW 250
12015: PPUSH
12016: LD_VAR 0 1
12020: PPUSH
12021: CALL_OW 251
12025: PPUSH
12026: LD_VAR 0 2
12030: PPUSH
12031: CALL 10285 0 4
12035: ST_TO_ADDR
// end ;
12036: LD_VAR 0 3
12040: RET
// export function DangerInArea ( side , area ) ; begin
12041: LD_INT 0
12043: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12044: LD_ADDR_VAR 0 3
12048: PUSH
12049: LD_VAR 0 2
12053: PPUSH
12054: LD_INT 81
12056: PUSH
12057: LD_VAR 0 1
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PPUSH
12066: CALL_OW 70
12070: ST_TO_ADDR
// end ;
12071: LD_VAR 0 3
12075: RET
// export function IsExtension ( b ) ; begin
12076: LD_INT 0
12078: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12079: LD_ADDR_VAR 0 2
12083: PUSH
12084: LD_VAR 0 1
12088: PUSH
12089: LD_INT 23
12091: PUSH
12092: LD_INT 20
12094: PUSH
12095: LD_INT 22
12097: PUSH
12098: LD_INT 17
12100: PUSH
12101: LD_INT 24
12103: PUSH
12104: LD_INT 21
12106: PUSH
12107: LD_INT 19
12109: PUSH
12110: LD_INT 16
12112: PUSH
12113: LD_INT 25
12115: PUSH
12116: LD_INT 18
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: IN
12131: ST_TO_ADDR
// end ;
12132: LD_VAR 0 2
12136: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12137: LD_INT 0
12139: PPUSH
12140: PPUSH
12141: PPUSH
// result := [ ] ;
12142: LD_ADDR_VAR 0 4
12146: PUSH
12147: EMPTY
12148: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12149: LD_ADDR_VAR 0 5
12153: PUSH
12154: LD_VAR 0 2
12158: PPUSH
12159: LD_INT 21
12161: PUSH
12162: LD_INT 3
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PPUSH
12169: CALL_OW 70
12173: ST_TO_ADDR
// if not tmp then
12174: LD_VAR 0 5
12178: NOT
12179: IFFALSE 12183
// exit ;
12181: GO 12247
// if checkLink then
12183: LD_VAR 0 3
12187: IFFALSE 12237
// begin for i in tmp do
12189: LD_ADDR_VAR 0 6
12193: PUSH
12194: LD_VAR 0 5
12198: PUSH
12199: FOR_IN
12200: IFFALSE 12235
// if GetBase ( i ) <> base then
12202: LD_VAR 0 6
12206: PPUSH
12207: CALL_OW 274
12211: PUSH
12212: LD_VAR 0 1
12216: NONEQUAL
12217: IFFALSE 12233
// ComLinkToBase ( base , i ) ;
12219: LD_VAR 0 1
12223: PPUSH
12224: LD_VAR 0 6
12228: PPUSH
12229: CALL_OW 169
12233: GO 12199
12235: POP
12236: POP
// end ; result := tmp ;
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: LD_VAR 0 5
12246: ST_TO_ADDR
// end ;
12247: LD_VAR 0 4
12251: RET
// export function ComComplete ( units , b ) ; var i ; begin
12252: LD_INT 0
12254: PPUSH
12255: PPUSH
// if not units then
12256: LD_VAR 0 1
12260: NOT
12261: IFFALSE 12265
// exit ;
12263: GO 12355
// for i in units do
12265: LD_ADDR_VAR 0 4
12269: PUSH
12270: LD_VAR 0 1
12274: PUSH
12275: FOR_IN
12276: IFFALSE 12353
// if BuildingStatus ( b ) = bs_build then
12278: LD_VAR 0 2
12282: PPUSH
12283: CALL_OW 461
12287: PUSH
12288: LD_INT 1
12290: EQUAL
12291: IFFALSE 12351
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12293: LD_VAR 0 4
12297: PPUSH
12298: LD_STRING h
12300: PUSH
12301: LD_VAR 0 2
12305: PPUSH
12306: CALL_OW 250
12310: PUSH
12311: LD_VAR 0 2
12315: PPUSH
12316: CALL_OW 251
12320: PUSH
12321: LD_VAR 0 2
12325: PUSH
12326: LD_INT 0
12328: PUSH
12329: LD_INT 0
12331: PUSH
12332: LD_INT 0
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: PUSH
12344: EMPTY
12345: LIST
12346: PPUSH
12347: CALL_OW 446
12351: GO 12275
12353: POP
12354: POP
// end ;
12355: LD_VAR 0 3
12359: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12360: LD_INT 0
12362: PPUSH
12363: PPUSH
12364: PPUSH
12365: PPUSH
12366: PPUSH
12367: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12368: LD_VAR 0 1
12372: NOT
12373: PUSH
12374: LD_VAR 0 1
12378: PPUSH
12379: CALL_OW 263
12383: PUSH
12384: LD_INT 2
12386: NONEQUAL
12387: OR
12388: IFFALSE 12392
// exit ;
12390: GO 12708
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12392: LD_ADDR_VAR 0 6
12396: PUSH
12397: LD_INT 22
12399: PUSH
12400: LD_VAR 0 1
12404: PPUSH
12405: CALL_OW 255
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 2
12416: PUSH
12417: LD_INT 30
12419: PUSH
12420: LD_INT 36
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 34
12429: PUSH
12430: LD_INT 31
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: LIST
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PPUSH
12446: CALL_OW 69
12450: ST_TO_ADDR
// if not tmp then
12451: LD_VAR 0 6
12455: NOT
12456: IFFALSE 12460
// exit ;
12458: GO 12708
// result := [ ] ;
12460: LD_ADDR_VAR 0 2
12464: PUSH
12465: EMPTY
12466: ST_TO_ADDR
// for i in tmp do
12467: LD_ADDR_VAR 0 3
12471: PUSH
12472: LD_VAR 0 6
12476: PUSH
12477: FOR_IN
12478: IFFALSE 12549
// begin t := UnitsInside ( i ) ;
12480: LD_ADDR_VAR 0 4
12484: PUSH
12485: LD_VAR 0 3
12489: PPUSH
12490: CALL_OW 313
12494: ST_TO_ADDR
// if t then
12495: LD_VAR 0 4
12499: IFFALSE 12547
// for j in t do
12501: LD_ADDR_VAR 0 7
12505: PUSH
12506: LD_VAR 0 4
12510: PUSH
12511: FOR_IN
12512: IFFALSE 12545
// result := Replace ( result , result + 1 , j ) ;
12514: LD_ADDR_VAR 0 2
12518: PUSH
12519: LD_VAR 0 2
12523: PPUSH
12524: LD_VAR 0 2
12528: PUSH
12529: LD_INT 1
12531: PLUS
12532: PPUSH
12533: LD_VAR 0 7
12537: PPUSH
12538: CALL_OW 1
12542: ST_TO_ADDR
12543: GO 12511
12545: POP
12546: POP
// end ;
12547: GO 12477
12549: POP
12550: POP
// if not result then
12551: LD_VAR 0 2
12555: NOT
12556: IFFALSE 12560
// exit ;
12558: GO 12708
// mech := result [ 1 ] ;
12560: LD_ADDR_VAR 0 5
12564: PUSH
12565: LD_VAR 0 2
12569: PUSH
12570: LD_INT 1
12572: ARRAY
12573: ST_TO_ADDR
// if result > 1 then
12574: LD_VAR 0 2
12578: PUSH
12579: LD_INT 1
12581: GREATER
12582: IFFALSE 12694
// begin for i = 2 to result do
12584: LD_ADDR_VAR 0 3
12588: PUSH
12589: DOUBLE
12590: LD_INT 2
12592: DEC
12593: ST_TO_ADDR
12594: LD_VAR 0 2
12598: PUSH
12599: FOR_TO
12600: IFFALSE 12692
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12602: LD_ADDR_VAR 0 4
12606: PUSH
12607: LD_VAR 0 2
12611: PUSH
12612: LD_VAR 0 3
12616: ARRAY
12617: PPUSH
12618: LD_INT 3
12620: PPUSH
12621: CALL_OW 259
12625: PUSH
12626: LD_VAR 0 2
12630: PUSH
12631: LD_VAR 0 3
12635: ARRAY
12636: PPUSH
12637: CALL_OW 432
12641: MINUS
12642: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12643: LD_VAR 0 4
12647: PUSH
12648: LD_VAR 0 5
12652: PPUSH
12653: LD_INT 3
12655: PPUSH
12656: CALL_OW 259
12660: PUSH
12661: LD_VAR 0 5
12665: PPUSH
12666: CALL_OW 432
12670: MINUS
12671: GREATEREQUAL
12672: IFFALSE 12690
// mech := result [ i ] ;
12674: LD_ADDR_VAR 0 5
12678: PUSH
12679: LD_VAR 0 2
12683: PUSH
12684: LD_VAR 0 3
12688: ARRAY
12689: ST_TO_ADDR
// end ;
12690: GO 12599
12692: POP
12693: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12694: LD_VAR 0 1
12698: PPUSH
12699: LD_VAR 0 5
12703: PPUSH
12704: CALL_OW 135
// end ;
12708: LD_VAR 0 2
12712: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12713: LD_INT 0
12715: PPUSH
12716: PPUSH
12717: PPUSH
12718: PPUSH
12719: PPUSH
12720: PPUSH
12721: PPUSH
12722: PPUSH
12723: PPUSH
12724: PPUSH
12725: PPUSH
12726: PPUSH
12727: PPUSH
// result := [ ] ;
12728: LD_ADDR_VAR 0 7
12732: PUSH
12733: EMPTY
12734: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12735: LD_VAR 0 1
12739: PPUSH
12740: CALL_OW 266
12744: PUSH
12745: LD_INT 0
12747: PUSH
12748: LD_INT 1
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: IN
12755: NOT
12756: IFFALSE 12760
// exit ;
12758: GO 14394
// if name then
12760: LD_VAR 0 3
12764: IFFALSE 12780
// SetBName ( base_dep , name ) ;
12766: LD_VAR 0 1
12770: PPUSH
12771: LD_VAR 0 3
12775: PPUSH
12776: CALL_OW 500
// base := GetBase ( base_dep ) ;
12780: LD_ADDR_VAR 0 15
12784: PUSH
12785: LD_VAR 0 1
12789: PPUSH
12790: CALL_OW 274
12794: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12795: LD_ADDR_VAR 0 16
12799: PUSH
12800: LD_VAR 0 1
12804: PPUSH
12805: CALL_OW 255
12809: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12810: LD_ADDR_VAR 0 17
12814: PUSH
12815: LD_VAR 0 1
12819: PPUSH
12820: CALL_OW 248
12824: ST_TO_ADDR
// if sources then
12825: LD_VAR 0 5
12829: IFFALSE 12876
// for i = 1 to 3 do
12831: LD_ADDR_VAR 0 8
12835: PUSH
12836: DOUBLE
12837: LD_INT 1
12839: DEC
12840: ST_TO_ADDR
12841: LD_INT 3
12843: PUSH
12844: FOR_TO
12845: IFFALSE 12874
// AddResourceType ( base , i , sources [ i ] ) ;
12847: LD_VAR 0 15
12851: PPUSH
12852: LD_VAR 0 8
12856: PPUSH
12857: LD_VAR 0 5
12861: PUSH
12862: LD_VAR 0 8
12866: ARRAY
12867: PPUSH
12868: CALL_OW 276
12872: GO 12844
12874: POP
12875: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12876: LD_ADDR_VAR 0 18
12880: PUSH
12881: LD_VAR 0 15
12885: PPUSH
12886: LD_VAR 0 2
12890: PPUSH
12891: LD_INT 1
12893: PPUSH
12894: CALL 12137 0 3
12898: ST_TO_ADDR
// InitHc ;
12899: CALL_OW 19
// InitUc ;
12903: CALL_OW 18
// uc_side := side ;
12907: LD_ADDR_OWVAR 20
12911: PUSH
12912: LD_VAR 0 16
12916: ST_TO_ADDR
// uc_nation := nation ;
12917: LD_ADDR_OWVAR 21
12921: PUSH
12922: LD_VAR 0 17
12926: ST_TO_ADDR
// if buildings then
12927: LD_VAR 0 18
12931: IFFALSE 14253
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12933: LD_ADDR_VAR 0 19
12937: PUSH
12938: LD_VAR 0 18
12942: PPUSH
12943: LD_INT 2
12945: PUSH
12946: LD_INT 30
12948: PUSH
12949: LD_INT 29
12951: PUSH
12952: EMPTY
12953: LIST
12954: LIST
12955: PUSH
12956: LD_INT 30
12958: PUSH
12959: LD_INT 30
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 72
12975: ST_TO_ADDR
// if tmp then
12976: LD_VAR 0 19
12980: IFFALSE 13028
// for i in tmp do
12982: LD_ADDR_VAR 0 8
12986: PUSH
12987: LD_VAR 0 19
12991: PUSH
12992: FOR_IN
12993: IFFALSE 13026
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12995: LD_VAR 0 8
12999: PPUSH
13000: CALL_OW 250
13004: PPUSH
13005: LD_VAR 0 8
13009: PPUSH
13010: CALL_OW 251
13014: PPUSH
13015: LD_VAR 0 16
13019: PPUSH
13020: CALL_OW 441
13024: GO 12992
13026: POP
13027: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13028: LD_VAR 0 18
13032: PPUSH
13033: LD_INT 2
13035: PUSH
13036: LD_INT 30
13038: PUSH
13039: LD_INT 32
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 30
13048: PUSH
13049: LD_INT 33
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 72
13065: IFFALSE 13153
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13067: LD_ADDR_VAR 0 8
13071: PUSH
13072: LD_VAR 0 18
13076: PPUSH
13077: LD_INT 2
13079: PUSH
13080: LD_INT 30
13082: PUSH
13083: LD_INT 32
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 30
13092: PUSH
13093: LD_INT 33
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: PPUSH
13105: CALL_OW 72
13109: PUSH
13110: FOR_IN
13111: IFFALSE 13151
// begin if not GetBWeapon ( i ) then
13113: LD_VAR 0 8
13117: PPUSH
13118: CALL_OW 269
13122: NOT
13123: IFFALSE 13149
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13125: LD_VAR 0 8
13129: PPUSH
13130: LD_VAR 0 8
13134: PPUSH
13135: LD_VAR 0 2
13139: PPUSH
13140: CALL 14399 0 2
13144: PPUSH
13145: CALL_OW 431
// end ;
13149: GO 13110
13151: POP
13152: POP
// end ; for i = 1 to personel do
13153: LD_ADDR_VAR 0 8
13157: PUSH
13158: DOUBLE
13159: LD_INT 1
13161: DEC
13162: ST_TO_ADDR
13163: LD_VAR 0 6
13167: PUSH
13168: FOR_TO
13169: IFFALSE 14233
// begin if i > 4 then
13171: LD_VAR 0 8
13175: PUSH
13176: LD_INT 4
13178: GREATER
13179: IFFALSE 13183
// break ;
13181: GO 14233
// case i of 1 :
13183: LD_VAR 0 8
13187: PUSH
13188: LD_INT 1
13190: DOUBLE
13191: EQUAL
13192: IFTRUE 13196
13194: GO 13276
13196: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13197: LD_ADDR_VAR 0 12
13201: PUSH
13202: LD_VAR 0 18
13206: PPUSH
13207: LD_INT 22
13209: PUSH
13210: LD_VAR 0 16
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 58
13221: PUSH
13222: EMPTY
13223: LIST
13224: PUSH
13225: LD_INT 2
13227: PUSH
13228: LD_INT 30
13230: PUSH
13231: LD_INT 32
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 30
13240: PUSH
13241: LD_INT 4
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 30
13250: PUSH
13251: LD_INT 5
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: LIST
13268: PPUSH
13269: CALL_OW 72
13273: ST_TO_ADDR
13274: GO 13498
13276: LD_INT 2
13278: DOUBLE
13279: EQUAL
13280: IFTRUE 13284
13282: GO 13346
13284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13285: LD_ADDR_VAR 0 12
13289: PUSH
13290: LD_VAR 0 18
13294: PPUSH
13295: LD_INT 22
13297: PUSH
13298: LD_VAR 0 16
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 2
13309: PUSH
13310: LD_INT 30
13312: PUSH
13313: LD_INT 0
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 30
13322: PUSH
13323: LD_INT 1
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PPUSH
13339: CALL_OW 72
13343: ST_TO_ADDR
13344: GO 13498
13346: LD_INT 3
13348: DOUBLE
13349: EQUAL
13350: IFTRUE 13354
13352: GO 13416
13354: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13355: LD_ADDR_VAR 0 12
13359: PUSH
13360: LD_VAR 0 18
13364: PPUSH
13365: LD_INT 22
13367: PUSH
13368: LD_VAR 0 16
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 2
13379: PUSH
13380: LD_INT 30
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 30
13392: PUSH
13393: LD_INT 3
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: LIST
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PPUSH
13409: CALL_OW 72
13413: ST_TO_ADDR
13414: GO 13498
13416: LD_INT 4
13418: DOUBLE
13419: EQUAL
13420: IFTRUE 13424
13422: GO 13497
13424: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13425: LD_ADDR_VAR 0 12
13429: PUSH
13430: LD_VAR 0 18
13434: PPUSH
13435: LD_INT 22
13437: PUSH
13438: LD_VAR 0 16
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: PUSH
13447: LD_INT 2
13449: PUSH
13450: LD_INT 30
13452: PUSH
13453: LD_INT 6
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: LD_INT 30
13462: PUSH
13463: LD_INT 7
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: PUSH
13470: LD_INT 30
13472: PUSH
13473: LD_INT 8
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PPUSH
13490: CALL_OW 72
13494: ST_TO_ADDR
13495: GO 13498
13497: POP
// if i = 1 then
13498: LD_VAR 0 8
13502: PUSH
13503: LD_INT 1
13505: EQUAL
13506: IFFALSE 13617
// begin tmp := [ ] ;
13508: LD_ADDR_VAR 0 19
13512: PUSH
13513: EMPTY
13514: ST_TO_ADDR
// for j in f do
13515: LD_ADDR_VAR 0 9
13519: PUSH
13520: LD_VAR 0 12
13524: PUSH
13525: FOR_IN
13526: IFFALSE 13599
// if GetBType ( j ) = b_bunker then
13528: LD_VAR 0 9
13532: PPUSH
13533: CALL_OW 266
13537: PUSH
13538: LD_INT 32
13540: EQUAL
13541: IFFALSE 13568
// tmp := Insert ( tmp , 1 , j ) else
13543: LD_ADDR_VAR 0 19
13547: PUSH
13548: LD_VAR 0 19
13552: PPUSH
13553: LD_INT 1
13555: PPUSH
13556: LD_VAR 0 9
13560: PPUSH
13561: CALL_OW 2
13565: ST_TO_ADDR
13566: GO 13597
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13568: LD_ADDR_VAR 0 19
13572: PUSH
13573: LD_VAR 0 19
13577: PPUSH
13578: LD_VAR 0 19
13582: PUSH
13583: LD_INT 1
13585: PLUS
13586: PPUSH
13587: LD_VAR 0 9
13591: PPUSH
13592: CALL_OW 2
13596: ST_TO_ADDR
13597: GO 13525
13599: POP
13600: POP
// if tmp then
13601: LD_VAR 0 19
13605: IFFALSE 13617
// f := tmp ;
13607: LD_ADDR_VAR 0 12
13611: PUSH
13612: LD_VAR 0 19
13616: ST_TO_ADDR
// end ; x := personel [ i ] ;
13617: LD_ADDR_VAR 0 13
13621: PUSH
13622: LD_VAR 0 6
13626: PUSH
13627: LD_VAR 0 8
13631: ARRAY
13632: ST_TO_ADDR
// if x = - 1 then
13633: LD_VAR 0 13
13637: PUSH
13638: LD_INT 1
13640: NEG
13641: EQUAL
13642: IFFALSE 13851
// begin for j in f do
13644: LD_ADDR_VAR 0 9
13648: PUSH
13649: LD_VAR 0 12
13653: PUSH
13654: FOR_IN
13655: IFFALSE 13847
// repeat InitHc ;
13657: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13661: LD_VAR 0 9
13665: PPUSH
13666: CALL_OW 266
13670: PUSH
13671: LD_INT 5
13673: EQUAL
13674: IFFALSE 13744
// begin if UnitsInside ( j ) < 3 then
13676: LD_VAR 0 9
13680: PPUSH
13681: CALL_OW 313
13685: PUSH
13686: LD_INT 3
13688: LESS
13689: IFFALSE 13725
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13691: LD_INT 0
13693: PPUSH
13694: LD_INT 5
13696: PUSH
13697: LD_INT 8
13699: PUSH
13700: LD_INT 9
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: LIST
13707: PUSH
13708: LD_VAR 0 17
13712: ARRAY
13713: PPUSH
13714: LD_VAR 0 4
13718: PPUSH
13719: CALL_OW 380
13723: GO 13742
// PrepareHuman ( false , i , skill ) ;
13725: LD_INT 0
13727: PPUSH
13728: LD_VAR 0 8
13732: PPUSH
13733: LD_VAR 0 4
13737: PPUSH
13738: CALL_OW 380
// end else
13742: GO 13761
// PrepareHuman ( false , i , skill ) ;
13744: LD_INT 0
13746: PPUSH
13747: LD_VAR 0 8
13751: PPUSH
13752: LD_VAR 0 4
13756: PPUSH
13757: CALL_OW 380
// un := CreateHuman ;
13761: LD_ADDR_VAR 0 14
13765: PUSH
13766: CALL_OW 44
13770: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13771: LD_ADDR_VAR 0 7
13775: PUSH
13776: LD_VAR 0 7
13780: PPUSH
13781: LD_INT 1
13783: PPUSH
13784: LD_VAR 0 14
13788: PPUSH
13789: CALL_OW 2
13793: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13794: LD_VAR 0 14
13798: PPUSH
13799: LD_VAR 0 9
13803: PPUSH
13804: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13808: LD_VAR 0 9
13812: PPUSH
13813: CALL_OW 313
13817: PUSH
13818: LD_INT 6
13820: EQUAL
13821: PUSH
13822: LD_VAR 0 9
13826: PPUSH
13827: CALL_OW 266
13831: PUSH
13832: LD_INT 32
13834: PUSH
13835: LD_INT 31
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: IN
13842: OR
13843: IFFALSE 13657
13845: GO 13654
13847: POP
13848: POP
// end else
13849: GO 14231
// for j = 1 to x do
13851: LD_ADDR_VAR 0 9
13855: PUSH
13856: DOUBLE
13857: LD_INT 1
13859: DEC
13860: ST_TO_ADDR
13861: LD_VAR 0 13
13865: PUSH
13866: FOR_TO
13867: IFFALSE 14229
// begin InitHc ;
13869: CALL_OW 19
// if not f then
13873: LD_VAR 0 12
13877: NOT
13878: IFFALSE 13967
// begin PrepareHuman ( false , i , skill ) ;
13880: LD_INT 0
13882: PPUSH
13883: LD_VAR 0 8
13887: PPUSH
13888: LD_VAR 0 4
13892: PPUSH
13893: CALL_OW 380
// un := CreateHuman ;
13897: LD_ADDR_VAR 0 14
13901: PUSH
13902: CALL_OW 44
13906: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13907: LD_ADDR_VAR 0 7
13911: PUSH
13912: LD_VAR 0 7
13916: PPUSH
13917: LD_INT 1
13919: PPUSH
13920: LD_VAR 0 14
13924: PPUSH
13925: CALL_OW 2
13929: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13930: LD_VAR 0 14
13934: PPUSH
13935: LD_VAR 0 1
13939: PPUSH
13940: CALL_OW 250
13944: PPUSH
13945: LD_VAR 0 1
13949: PPUSH
13950: CALL_OW 251
13954: PPUSH
13955: LD_INT 10
13957: PPUSH
13958: LD_INT 0
13960: PPUSH
13961: CALL_OW 50
// continue ;
13965: GO 13866
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13967: LD_VAR 0 12
13971: PUSH
13972: LD_INT 1
13974: ARRAY
13975: PPUSH
13976: CALL_OW 313
13980: PUSH
13981: LD_VAR 0 12
13985: PUSH
13986: LD_INT 1
13988: ARRAY
13989: PPUSH
13990: CALL_OW 266
13994: PUSH
13995: LD_INT 32
13997: PUSH
13998: LD_INT 31
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: IN
14005: AND
14006: PUSH
14007: LD_VAR 0 12
14011: PUSH
14012: LD_INT 1
14014: ARRAY
14015: PPUSH
14016: CALL_OW 313
14020: PUSH
14021: LD_INT 6
14023: EQUAL
14024: OR
14025: IFFALSE 14045
// f := Delete ( f , 1 ) ;
14027: LD_ADDR_VAR 0 12
14031: PUSH
14032: LD_VAR 0 12
14036: PPUSH
14037: LD_INT 1
14039: PPUSH
14040: CALL_OW 3
14044: ST_TO_ADDR
// if not f then
14045: LD_VAR 0 12
14049: NOT
14050: IFFALSE 14068
// begin x := x + 2 ;
14052: LD_ADDR_VAR 0 13
14056: PUSH
14057: LD_VAR 0 13
14061: PUSH
14062: LD_INT 2
14064: PLUS
14065: ST_TO_ADDR
// continue ;
14066: GO 13866
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14068: LD_VAR 0 12
14072: PUSH
14073: LD_INT 1
14075: ARRAY
14076: PPUSH
14077: CALL_OW 266
14081: PUSH
14082: LD_INT 5
14084: EQUAL
14085: IFFALSE 14159
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14087: LD_VAR 0 12
14091: PUSH
14092: LD_INT 1
14094: ARRAY
14095: PPUSH
14096: CALL_OW 313
14100: PUSH
14101: LD_INT 3
14103: LESS
14104: IFFALSE 14140
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14106: LD_INT 0
14108: PPUSH
14109: LD_INT 5
14111: PUSH
14112: LD_INT 8
14114: PUSH
14115: LD_INT 9
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: LIST
14122: PUSH
14123: LD_VAR 0 17
14127: ARRAY
14128: PPUSH
14129: LD_VAR 0 4
14133: PPUSH
14134: CALL_OW 380
14138: GO 14157
// PrepareHuman ( false , i , skill ) ;
14140: LD_INT 0
14142: PPUSH
14143: LD_VAR 0 8
14147: PPUSH
14148: LD_VAR 0 4
14152: PPUSH
14153: CALL_OW 380
// end else
14157: GO 14176
// PrepareHuman ( false , i , skill ) ;
14159: LD_INT 0
14161: PPUSH
14162: LD_VAR 0 8
14166: PPUSH
14167: LD_VAR 0 4
14171: PPUSH
14172: CALL_OW 380
// un := CreateHuman ;
14176: LD_ADDR_VAR 0 14
14180: PUSH
14181: CALL_OW 44
14185: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14186: LD_ADDR_VAR 0 7
14190: PUSH
14191: LD_VAR 0 7
14195: PPUSH
14196: LD_INT 1
14198: PPUSH
14199: LD_VAR 0 14
14203: PPUSH
14204: CALL_OW 2
14208: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14209: LD_VAR 0 14
14213: PPUSH
14214: LD_VAR 0 12
14218: PUSH
14219: LD_INT 1
14221: ARRAY
14222: PPUSH
14223: CALL_OW 52
// end ;
14227: GO 13866
14229: POP
14230: POP
// end ;
14231: GO 13168
14233: POP
14234: POP
// result := result ^ buildings ;
14235: LD_ADDR_VAR 0 7
14239: PUSH
14240: LD_VAR 0 7
14244: PUSH
14245: LD_VAR 0 18
14249: ADD
14250: ST_TO_ADDR
// end else
14251: GO 14394
// begin for i = 1 to personel do
14253: LD_ADDR_VAR 0 8
14257: PUSH
14258: DOUBLE
14259: LD_INT 1
14261: DEC
14262: ST_TO_ADDR
14263: LD_VAR 0 6
14267: PUSH
14268: FOR_TO
14269: IFFALSE 14392
// begin if i > 4 then
14271: LD_VAR 0 8
14275: PUSH
14276: LD_INT 4
14278: GREATER
14279: IFFALSE 14283
// break ;
14281: GO 14392
// x := personel [ i ] ;
14283: LD_ADDR_VAR 0 13
14287: PUSH
14288: LD_VAR 0 6
14292: PUSH
14293: LD_VAR 0 8
14297: ARRAY
14298: ST_TO_ADDR
// if x = - 1 then
14299: LD_VAR 0 13
14303: PUSH
14304: LD_INT 1
14306: NEG
14307: EQUAL
14308: IFFALSE 14312
// continue ;
14310: GO 14268
// PrepareHuman ( false , i , skill ) ;
14312: LD_INT 0
14314: PPUSH
14315: LD_VAR 0 8
14319: PPUSH
14320: LD_VAR 0 4
14324: PPUSH
14325: CALL_OW 380
// un := CreateHuman ;
14329: LD_ADDR_VAR 0 14
14333: PUSH
14334: CALL_OW 44
14338: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14339: LD_VAR 0 14
14343: PPUSH
14344: LD_VAR 0 1
14348: PPUSH
14349: CALL_OW 250
14353: PPUSH
14354: LD_VAR 0 1
14358: PPUSH
14359: CALL_OW 251
14363: PPUSH
14364: LD_INT 10
14366: PPUSH
14367: LD_INT 0
14369: PPUSH
14370: CALL_OW 50
// result := result ^ un ;
14374: LD_ADDR_VAR 0 7
14378: PUSH
14379: LD_VAR 0 7
14383: PUSH
14384: LD_VAR 0 14
14388: ADD
14389: ST_TO_ADDR
// end ;
14390: GO 14268
14392: POP
14393: POP
// end ; end ;
14394: LD_VAR 0 7
14398: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14399: LD_INT 0
14401: PPUSH
14402: PPUSH
14403: PPUSH
14404: PPUSH
14405: PPUSH
14406: PPUSH
14407: PPUSH
14408: PPUSH
14409: PPUSH
14410: PPUSH
14411: PPUSH
14412: PPUSH
14413: PPUSH
14414: PPUSH
14415: PPUSH
14416: PPUSH
// result := false ;
14417: LD_ADDR_VAR 0 3
14421: PUSH
14422: LD_INT 0
14424: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14425: LD_VAR 0 1
14429: NOT
14430: PUSH
14431: LD_VAR 0 1
14435: PPUSH
14436: CALL_OW 266
14440: PUSH
14441: LD_INT 32
14443: PUSH
14444: LD_INT 33
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: IN
14451: NOT
14452: OR
14453: IFFALSE 14457
// exit ;
14455: GO 15566
// nat := GetNation ( tower ) ;
14457: LD_ADDR_VAR 0 12
14461: PUSH
14462: LD_VAR 0 1
14466: PPUSH
14467: CALL_OW 248
14471: ST_TO_ADDR
// side := GetSide ( tower ) ;
14472: LD_ADDR_VAR 0 16
14476: PUSH
14477: LD_VAR 0 1
14481: PPUSH
14482: CALL_OW 255
14486: ST_TO_ADDR
// x := GetX ( tower ) ;
14487: LD_ADDR_VAR 0 10
14491: PUSH
14492: LD_VAR 0 1
14496: PPUSH
14497: CALL_OW 250
14501: ST_TO_ADDR
// y := GetY ( tower ) ;
14502: LD_ADDR_VAR 0 11
14506: PUSH
14507: LD_VAR 0 1
14511: PPUSH
14512: CALL_OW 251
14516: ST_TO_ADDR
// if not x or not y then
14517: LD_VAR 0 10
14521: NOT
14522: PUSH
14523: LD_VAR 0 11
14527: NOT
14528: OR
14529: IFFALSE 14533
// exit ;
14531: GO 15566
// weapon := 0 ;
14533: LD_ADDR_VAR 0 18
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// fac_list := [ ] ;
14541: LD_ADDR_VAR 0 17
14545: PUSH
14546: EMPTY
14547: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14548: LD_ADDR_VAR 0 6
14552: PUSH
14553: LD_VAR 0 1
14557: PPUSH
14558: CALL_OW 274
14562: PPUSH
14563: LD_VAR 0 2
14567: PPUSH
14568: LD_INT 0
14570: PPUSH
14571: CALL 12137 0 3
14575: PPUSH
14576: LD_INT 30
14578: PUSH
14579: LD_INT 3
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PPUSH
14586: CALL_OW 72
14590: ST_TO_ADDR
// if not factories then
14591: LD_VAR 0 6
14595: NOT
14596: IFFALSE 14600
// exit ;
14598: GO 15566
// for i in factories do
14600: LD_ADDR_VAR 0 8
14604: PUSH
14605: LD_VAR 0 6
14609: PUSH
14610: FOR_IN
14611: IFFALSE 14636
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14613: LD_ADDR_VAR 0 17
14617: PUSH
14618: LD_VAR 0 17
14622: PUSH
14623: LD_VAR 0 8
14627: PPUSH
14628: CALL_OW 478
14632: UNION
14633: ST_TO_ADDR
14634: GO 14610
14636: POP
14637: POP
// if not fac_list then
14638: LD_VAR 0 17
14642: NOT
14643: IFFALSE 14647
// exit ;
14645: GO 15566
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14647: LD_ADDR_VAR 0 5
14651: PUSH
14652: LD_INT 4
14654: PUSH
14655: LD_INT 5
14657: PUSH
14658: LD_INT 9
14660: PUSH
14661: LD_INT 10
14663: PUSH
14664: LD_INT 6
14666: PUSH
14667: LD_INT 7
14669: PUSH
14670: LD_INT 11
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 27
14684: PUSH
14685: LD_INT 28
14687: PUSH
14688: LD_INT 26
14690: PUSH
14691: LD_INT 30
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 43
14702: PUSH
14703: LD_INT 44
14705: PUSH
14706: LD_INT 46
14708: PUSH
14709: LD_INT 45
14711: PUSH
14712: LD_INT 47
14714: PUSH
14715: LD_INT 49
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: LIST
14730: PUSH
14731: LD_VAR 0 12
14735: ARRAY
14736: ST_TO_ADDR
// list := list isect fac_list ;
14737: LD_ADDR_VAR 0 5
14741: PUSH
14742: LD_VAR 0 5
14746: PUSH
14747: LD_VAR 0 17
14751: ISECT
14752: ST_TO_ADDR
// if not list then
14753: LD_VAR 0 5
14757: NOT
14758: IFFALSE 14762
// exit ;
14760: GO 15566
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14762: LD_VAR 0 12
14766: PUSH
14767: LD_INT 3
14769: EQUAL
14770: PUSH
14771: LD_INT 49
14773: PUSH
14774: LD_VAR 0 5
14778: IN
14779: AND
14780: PUSH
14781: LD_INT 31
14783: PPUSH
14784: LD_VAR 0 16
14788: PPUSH
14789: CALL_OW 321
14793: PUSH
14794: LD_INT 2
14796: EQUAL
14797: AND
14798: IFFALSE 14858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14800: LD_INT 22
14802: PUSH
14803: LD_VAR 0 16
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 35
14814: PUSH
14815: LD_INT 49
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 91
14824: PUSH
14825: LD_VAR 0 1
14829: PUSH
14830: LD_INT 10
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: LIST
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: LIST
14842: PPUSH
14843: CALL_OW 69
14847: NOT
14848: IFFALSE 14858
// weapon := ru_time_lapser ;
14850: LD_ADDR_VAR 0 18
14854: PUSH
14855: LD_INT 49
14857: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14858: LD_VAR 0 12
14862: PUSH
14863: LD_INT 1
14865: PUSH
14866: LD_INT 2
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: IN
14873: PUSH
14874: LD_INT 11
14876: PUSH
14877: LD_VAR 0 5
14881: IN
14882: PUSH
14883: LD_INT 30
14885: PUSH
14886: LD_VAR 0 5
14890: IN
14891: OR
14892: AND
14893: PUSH
14894: LD_INT 6
14896: PPUSH
14897: LD_VAR 0 16
14901: PPUSH
14902: CALL_OW 321
14906: PUSH
14907: LD_INT 2
14909: EQUAL
14910: AND
14911: IFFALSE 15076
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14913: LD_INT 22
14915: PUSH
14916: LD_VAR 0 16
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 2
14927: PUSH
14928: LD_INT 35
14930: PUSH
14931: LD_INT 11
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 35
14940: PUSH
14941: LD_INT 30
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 91
14955: PUSH
14956: LD_VAR 0 1
14960: PUSH
14961: LD_INT 18
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: LIST
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: LIST
14973: PPUSH
14974: CALL_OW 69
14978: NOT
14979: PUSH
14980: LD_INT 22
14982: PUSH
14983: LD_VAR 0 16
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: PUSH
14992: LD_INT 2
14994: PUSH
14995: LD_INT 30
14997: PUSH
14998: LD_INT 32
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 30
15007: PUSH
15008: LD_INT 33
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 91
15022: PUSH
15023: LD_VAR 0 1
15027: PUSH
15028: LD_INT 12
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: PPUSH
15044: CALL_OW 69
15048: PUSH
15049: LD_INT 2
15051: GREATER
15052: AND
15053: IFFALSE 15076
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15055: LD_ADDR_VAR 0 18
15059: PUSH
15060: LD_INT 11
15062: PUSH
15063: LD_INT 30
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_VAR 0 12
15074: ARRAY
15075: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15076: LD_VAR 0 18
15080: NOT
15081: PUSH
15082: LD_INT 40
15084: PPUSH
15085: LD_VAR 0 16
15089: PPUSH
15090: CALL_OW 321
15094: PUSH
15095: LD_INT 2
15097: EQUAL
15098: AND
15099: PUSH
15100: LD_INT 7
15102: PUSH
15103: LD_VAR 0 5
15107: IN
15108: PUSH
15109: LD_INT 28
15111: PUSH
15112: LD_VAR 0 5
15116: IN
15117: OR
15118: PUSH
15119: LD_INT 45
15121: PUSH
15122: LD_VAR 0 5
15126: IN
15127: OR
15128: AND
15129: IFFALSE 15383
// begin hex := GetHexInfo ( x , y ) ;
15131: LD_ADDR_VAR 0 4
15135: PUSH
15136: LD_VAR 0 10
15140: PPUSH
15141: LD_VAR 0 11
15145: PPUSH
15146: CALL_OW 546
15150: ST_TO_ADDR
// if hex [ 1 ] then
15151: LD_VAR 0 4
15155: PUSH
15156: LD_INT 1
15158: ARRAY
15159: IFFALSE 15163
// exit ;
15161: GO 15566
// height := hex [ 2 ] ;
15163: LD_ADDR_VAR 0 15
15167: PUSH
15168: LD_VAR 0 4
15172: PUSH
15173: LD_INT 2
15175: ARRAY
15176: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15177: LD_ADDR_VAR 0 14
15181: PUSH
15182: LD_INT 0
15184: PUSH
15185: LD_INT 2
15187: PUSH
15188: LD_INT 3
15190: PUSH
15191: LD_INT 5
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: ST_TO_ADDR
// for i in tmp do
15200: LD_ADDR_VAR 0 8
15204: PUSH
15205: LD_VAR 0 14
15209: PUSH
15210: FOR_IN
15211: IFFALSE 15381
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15213: LD_ADDR_VAR 0 9
15217: PUSH
15218: LD_VAR 0 10
15222: PPUSH
15223: LD_VAR 0 8
15227: PPUSH
15228: LD_INT 5
15230: PPUSH
15231: CALL_OW 272
15235: PUSH
15236: LD_VAR 0 11
15240: PPUSH
15241: LD_VAR 0 8
15245: PPUSH
15246: LD_INT 5
15248: PPUSH
15249: CALL_OW 273
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15258: LD_VAR 0 9
15262: PUSH
15263: LD_INT 1
15265: ARRAY
15266: PPUSH
15267: LD_VAR 0 9
15271: PUSH
15272: LD_INT 2
15274: ARRAY
15275: PPUSH
15276: CALL_OW 488
15280: IFFALSE 15379
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15282: LD_ADDR_VAR 0 4
15286: PUSH
15287: LD_VAR 0 9
15291: PUSH
15292: LD_INT 1
15294: ARRAY
15295: PPUSH
15296: LD_VAR 0 9
15300: PUSH
15301: LD_INT 2
15303: ARRAY
15304: PPUSH
15305: CALL_OW 546
15309: ST_TO_ADDR
// if hex [ 1 ] then
15310: LD_VAR 0 4
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: IFFALSE 15322
// continue ;
15320: GO 15210
// h := hex [ 2 ] ;
15322: LD_ADDR_VAR 0 13
15326: PUSH
15327: LD_VAR 0 4
15331: PUSH
15332: LD_INT 2
15334: ARRAY
15335: ST_TO_ADDR
// if h + 7 < height then
15336: LD_VAR 0 13
15340: PUSH
15341: LD_INT 7
15343: PLUS
15344: PUSH
15345: LD_VAR 0 15
15349: LESS
15350: IFFALSE 15379
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15352: LD_ADDR_VAR 0 18
15356: PUSH
15357: LD_INT 7
15359: PUSH
15360: LD_INT 28
15362: PUSH
15363: LD_INT 45
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: LIST
15370: PUSH
15371: LD_VAR 0 12
15375: ARRAY
15376: ST_TO_ADDR
// break ;
15377: GO 15381
// end ; end ; end ;
15379: GO 15210
15381: POP
15382: POP
// end ; if not weapon then
15383: LD_VAR 0 18
15387: NOT
15388: IFFALSE 15448
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15390: LD_ADDR_VAR 0 5
15394: PUSH
15395: LD_VAR 0 5
15399: PUSH
15400: LD_INT 11
15402: PUSH
15403: LD_INT 30
15405: PUSH
15406: LD_INT 49
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: DIFF
15414: ST_TO_ADDR
// if not list then
15415: LD_VAR 0 5
15419: NOT
15420: IFFALSE 15424
// exit ;
15422: GO 15566
// weapon := list [ rand ( 1 , list ) ] ;
15424: LD_ADDR_VAR 0 18
15428: PUSH
15429: LD_VAR 0 5
15433: PUSH
15434: LD_INT 1
15436: PPUSH
15437: LD_VAR 0 5
15441: PPUSH
15442: CALL_OW 12
15446: ARRAY
15447: ST_TO_ADDR
// end ; if weapon then
15448: LD_VAR 0 18
15452: IFFALSE 15566
// begin tmp := CostOfWeapon ( weapon ) ;
15454: LD_ADDR_VAR 0 14
15458: PUSH
15459: LD_VAR 0 18
15463: PPUSH
15464: CALL_OW 451
15468: ST_TO_ADDR
// j := GetBase ( tower ) ;
15469: LD_ADDR_VAR 0 9
15473: PUSH
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 274
15483: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15484: LD_VAR 0 9
15488: PPUSH
15489: LD_INT 1
15491: PPUSH
15492: CALL_OW 275
15496: PUSH
15497: LD_VAR 0 14
15501: PUSH
15502: LD_INT 1
15504: ARRAY
15505: GREATEREQUAL
15506: PUSH
15507: LD_VAR 0 9
15511: PPUSH
15512: LD_INT 2
15514: PPUSH
15515: CALL_OW 275
15519: PUSH
15520: LD_VAR 0 14
15524: PUSH
15525: LD_INT 2
15527: ARRAY
15528: GREATEREQUAL
15529: AND
15530: PUSH
15531: LD_VAR 0 9
15535: PPUSH
15536: LD_INT 3
15538: PPUSH
15539: CALL_OW 275
15543: PUSH
15544: LD_VAR 0 14
15548: PUSH
15549: LD_INT 3
15551: ARRAY
15552: GREATEREQUAL
15553: AND
15554: IFFALSE 15566
// result := weapon ;
15556: LD_ADDR_VAR 0 3
15560: PUSH
15561: LD_VAR 0 18
15565: ST_TO_ADDR
// end ; end ;
15566: LD_VAR 0 3
15570: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15571: LD_INT 0
15573: PPUSH
15574: PPUSH
// result := true ;
15575: LD_ADDR_VAR 0 3
15579: PUSH
15580: LD_INT 1
15582: ST_TO_ADDR
// if array1 = array2 then
15583: LD_VAR 0 1
15587: PUSH
15588: LD_VAR 0 2
15592: EQUAL
15593: IFFALSE 15653
// begin for i = 1 to array1 do
15595: LD_ADDR_VAR 0 4
15599: PUSH
15600: DOUBLE
15601: LD_INT 1
15603: DEC
15604: ST_TO_ADDR
15605: LD_VAR 0 1
15609: PUSH
15610: FOR_TO
15611: IFFALSE 15649
// if array1 [ i ] <> array2 [ i ] then
15613: LD_VAR 0 1
15617: PUSH
15618: LD_VAR 0 4
15622: ARRAY
15623: PUSH
15624: LD_VAR 0 2
15628: PUSH
15629: LD_VAR 0 4
15633: ARRAY
15634: NONEQUAL
15635: IFFALSE 15647
// begin result := false ;
15637: LD_ADDR_VAR 0 3
15641: PUSH
15642: LD_INT 0
15644: ST_TO_ADDR
// break ;
15645: GO 15649
// end ;
15647: GO 15610
15649: POP
15650: POP
// end else
15651: GO 15661
// result := false ;
15653: LD_ADDR_VAR 0 3
15657: PUSH
15658: LD_INT 0
15660: ST_TO_ADDR
// end ;
15661: LD_VAR 0 3
15665: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15666: LD_INT 0
15668: PPUSH
15669: PPUSH
// if not array1 or not array2 then
15670: LD_VAR 0 1
15674: NOT
15675: PUSH
15676: LD_VAR 0 2
15680: NOT
15681: OR
15682: IFFALSE 15686
// exit ;
15684: GO 15750
// result := true ;
15686: LD_ADDR_VAR 0 3
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// for i = 1 to array1 do
15694: LD_ADDR_VAR 0 4
15698: PUSH
15699: DOUBLE
15700: LD_INT 1
15702: DEC
15703: ST_TO_ADDR
15704: LD_VAR 0 1
15708: PUSH
15709: FOR_TO
15710: IFFALSE 15748
// if array1 [ i ] <> array2 [ i ] then
15712: LD_VAR 0 1
15716: PUSH
15717: LD_VAR 0 4
15721: ARRAY
15722: PUSH
15723: LD_VAR 0 2
15727: PUSH
15728: LD_VAR 0 4
15732: ARRAY
15733: NONEQUAL
15734: IFFALSE 15746
// begin result := false ;
15736: LD_ADDR_VAR 0 3
15740: PUSH
15741: LD_INT 0
15743: ST_TO_ADDR
// break ;
15744: GO 15748
// end ;
15746: GO 15709
15748: POP
15749: POP
// end ;
15750: LD_VAR 0 3
15754: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15755: LD_INT 0
15757: PPUSH
15758: PPUSH
15759: PPUSH
// pom := GetBase ( fac ) ;
15760: LD_ADDR_VAR 0 5
15764: PUSH
15765: LD_VAR 0 1
15769: PPUSH
15770: CALL_OW 274
15774: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15775: LD_ADDR_VAR 0 4
15779: PUSH
15780: LD_VAR 0 2
15784: PUSH
15785: LD_INT 1
15787: ARRAY
15788: PPUSH
15789: LD_VAR 0 2
15793: PUSH
15794: LD_INT 2
15796: ARRAY
15797: PPUSH
15798: LD_VAR 0 2
15802: PUSH
15803: LD_INT 3
15805: ARRAY
15806: PPUSH
15807: LD_VAR 0 2
15811: PUSH
15812: LD_INT 4
15814: ARRAY
15815: PPUSH
15816: CALL_OW 449
15820: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15821: LD_ADDR_VAR 0 3
15825: PUSH
15826: LD_VAR 0 5
15830: PPUSH
15831: LD_INT 1
15833: PPUSH
15834: CALL_OW 275
15838: PUSH
15839: LD_VAR 0 4
15843: PUSH
15844: LD_INT 1
15846: ARRAY
15847: GREATEREQUAL
15848: PUSH
15849: LD_VAR 0 5
15853: PPUSH
15854: LD_INT 2
15856: PPUSH
15857: CALL_OW 275
15861: PUSH
15862: LD_VAR 0 4
15866: PUSH
15867: LD_INT 2
15869: ARRAY
15870: GREATEREQUAL
15871: AND
15872: PUSH
15873: LD_VAR 0 5
15877: PPUSH
15878: LD_INT 3
15880: PPUSH
15881: CALL_OW 275
15885: PUSH
15886: LD_VAR 0 4
15890: PUSH
15891: LD_INT 3
15893: ARRAY
15894: GREATEREQUAL
15895: AND
15896: ST_TO_ADDR
// end ;
15897: LD_VAR 0 3
15901: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15902: LD_INT 0
15904: PPUSH
15905: PPUSH
15906: PPUSH
15907: PPUSH
// pom := GetBase ( building ) ;
15908: LD_ADDR_VAR 0 3
15912: PUSH
15913: LD_VAR 0 1
15917: PPUSH
15918: CALL_OW 274
15922: ST_TO_ADDR
// if not pom then
15923: LD_VAR 0 3
15927: NOT
15928: IFFALSE 15932
// exit ;
15930: GO 16102
// btype := GetBType ( building ) ;
15932: LD_ADDR_VAR 0 5
15936: PUSH
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 266
15946: ST_TO_ADDR
// if btype = b_armoury then
15947: LD_VAR 0 5
15951: PUSH
15952: LD_INT 4
15954: EQUAL
15955: IFFALSE 15965
// btype := b_barracks ;
15957: LD_ADDR_VAR 0 5
15961: PUSH
15962: LD_INT 5
15964: ST_TO_ADDR
// if btype = b_depot then
15965: LD_VAR 0 5
15969: PUSH
15970: LD_INT 0
15972: EQUAL
15973: IFFALSE 15983
// btype := b_warehouse ;
15975: LD_ADDR_VAR 0 5
15979: PUSH
15980: LD_INT 1
15982: ST_TO_ADDR
// if btype = b_workshop then
15983: LD_VAR 0 5
15987: PUSH
15988: LD_INT 2
15990: EQUAL
15991: IFFALSE 16001
// btype := b_factory ;
15993: LD_ADDR_VAR 0 5
15997: PUSH
15998: LD_INT 3
16000: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16001: LD_ADDR_VAR 0 4
16005: PUSH
16006: LD_VAR 0 5
16010: PPUSH
16011: LD_VAR 0 1
16015: PPUSH
16016: CALL_OW 248
16020: PPUSH
16021: CALL_OW 450
16025: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16026: LD_ADDR_VAR 0 2
16030: PUSH
16031: LD_VAR 0 3
16035: PPUSH
16036: LD_INT 1
16038: PPUSH
16039: CALL_OW 275
16043: PUSH
16044: LD_VAR 0 4
16048: PUSH
16049: LD_INT 1
16051: ARRAY
16052: GREATEREQUAL
16053: PUSH
16054: LD_VAR 0 3
16058: PPUSH
16059: LD_INT 2
16061: PPUSH
16062: CALL_OW 275
16066: PUSH
16067: LD_VAR 0 4
16071: PUSH
16072: LD_INT 2
16074: ARRAY
16075: GREATEREQUAL
16076: AND
16077: PUSH
16078: LD_VAR 0 3
16082: PPUSH
16083: LD_INT 3
16085: PPUSH
16086: CALL_OW 275
16090: PUSH
16091: LD_VAR 0 4
16095: PUSH
16096: LD_INT 3
16098: ARRAY
16099: GREATEREQUAL
16100: AND
16101: ST_TO_ADDR
// end ;
16102: LD_VAR 0 2
16106: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16107: LD_INT 0
16109: PPUSH
16110: PPUSH
16111: PPUSH
// pom := GetBase ( building ) ;
16112: LD_ADDR_VAR 0 4
16116: PUSH
16117: LD_VAR 0 1
16121: PPUSH
16122: CALL_OW 274
16126: ST_TO_ADDR
// if not pom then
16127: LD_VAR 0 4
16131: NOT
16132: IFFALSE 16136
// exit ;
16134: GO 16237
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16136: LD_ADDR_VAR 0 5
16140: PUSH
16141: LD_VAR 0 2
16145: PPUSH
16146: LD_VAR 0 1
16150: PPUSH
16151: CALL_OW 248
16155: PPUSH
16156: CALL_OW 450
16160: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16161: LD_ADDR_VAR 0 3
16165: PUSH
16166: LD_VAR 0 4
16170: PPUSH
16171: LD_INT 1
16173: PPUSH
16174: CALL_OW 275
16178: PUSH
16179: LD_VAR 0 5
16183: PUSH
16184: LD_INT 1
16186: ARRAY
16187: GREATEREQUAL
16188: PUSH
16189: LD_VAR 0 4
16193: PPUSH
16194: LD_INT 2
16196: PPUSH
16197: CALL_OW 275
16201: PUSH
16202: LD_VAR 0 5
16206: PUSH
16207: LD_INT 2
16209: ARRAY
16210: GREATEREQUAL
16211: AND
16212: PUSH
16213: LD_VAR 0 4
16217: PPUSH
16218: LD_INT 3
16220: PPUSH
16221: CALL_OW 275
16225: PUSH
16226: LD_VAR 0 5
16230: PUSH
16231: LD_INT 3
16233: ARRAY
16234: GREATEREQUAL
16235: AND
16236: ST_TO_ADDR
// end ;
16237: LD_VAR 0 3
16241: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16242: LD_INT 0
16244: PPUSH
16245: PPUSH
16246: PPUSH
16247: PPUSH
16248: PPUSH
16249: PPUSH
16250: PPUSH
16251: PPUSH
16252: PPUSH
16253: PPUSH
16254: PPUSH
// result := false ;
16255: LD_ADDR_VAR 0 8
16259: PUSH
16260: LD_INT 0
16262: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16263: LD_VAR 0 5
16267: NOT
16268: PUSH
16269: LD_VAR 0 1
16273: NOT
16274: OR
16275: PUSH
16276: LD_VAR 0 2
16280: NOT
16281: OR
16282: PUSH
16283: LD_VAR 0 3
16287: NOT
16288: OR
16289: IFFALSE 16293
// exit ;
16291: GO 17107
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16293: LD_ADDR_VAR 0 14
16297: PUSH
16298: LD_VAR 0 1
16302: PPUSH
16303: LD_VAR 0 2
16307: PPUSH
16308: LD_VAR 0 3
16312: PPUSH
16313: LD_VAR 0 4
16317: PPUSH
16318: LD_VAR 0 5
16322: PUSH
16323: LD_INT 1
16325: ARRAY
16326: PPUSH
16327: CALL_OW 248
16331: PPUSH
16332: LD_INT 0
16334: PPUSH
16335: CALL 18344 0 6
16339: ST_TO_ADDR
// if not hexes then
16340: LD_VAR 0 14
16344: NOT
16345: IFFALSE 16349
// exit ;
16347: GO 17107
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16349: LD_ADDR_VAR 0 17
16353: PUSH
16354: LD_VAR 0 5
16358: PPUSH
16359: LD_INT 22
16361: PUSH
16362: LD_VAR 0 13
16366: PPUSH
16367: CALL_OW 255
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 2
16378: PUSH
16379: LD_INT 30
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 30
16391: PUSH
16392: LD_INT 1
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: LIST
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PPUSH
16408: CALL_OW 72
16412: ST_TO_ADDR
// for i = 1 to hexes do
16413: LD_ADDR_VAR 0 9
16417: PUSH
16418: DOUBLE
16419: LD_INT 1
16421: DEC
16422: ST_TO_ADDR
16423: LD_VAR 0 14
16427: PUSH
16428: FOR_TO
16429: IFFALSE 17105
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16431: LD_ADDR_VAR 0 13
16435: PUSH
16436: LD_VAR 0 14
16440: PUSH
16441: LD_VAR 0 9
16445: ARRAY
16446: PUSH
16447: LD_INT 1
16449: ARRAY
16450: PPUSH
16451: LD_VAR 0 14
16455: PUSH
16456: LD_VAR 0 9
16460: ARRAY
16461: PUSH
16462: LD_INT 2
16464: ARRAY
16465: PPUSH
16466: CALL_OW 428
16470: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16471: LD_VAR 0 14
16475: PUSH
16476: LD_VAR 0 9
16480: ARRAY
16481: PUSH
16482: LD_INT 1
16484: ARRAY
16485: PPUSH
16486: LD_VAR 0 14
16490: PUSH
16491: LD_VAR 0 9
16495: ARRAY
16496: PUSH
16497: LD_INT 2
16499: ARRAY
16500: PPUSH
16501: CALL_OW 351
16505: PUSH
16506: LD_VAR 0 14
16510: PUSH
16511: LD_VAR 0 9
16515: ARRAY
16516: PUSH
16517: LD_INT 1
16519: ARRAY
16520: PPUSH
16521: LD_VAR 0 14
16525: PUSH
16526: LD_VAR 0 9
16530: ARRAY
16531: PUSH
16532: LD_INT 2
16534: ARRAY
16535: PPUSH
16536: CALL_OW 488
16540: NOT
16541: OR
16542: PUSH
16543: LD_VAR 0 13
16547: PPUSH
16548: CALL_OW 247
16552: PUSH
16553: LD_INT 3
16555: EQUAL
16556: OR
16557: IFFALSE 16563
// exit ;
16559: POP
16560: POP
16561: GO 17107
// if not tmp then
16563: LD_VAR 0 13
16567: NOT
16568: IFFALSE 16572
// continue ;
16570: GO 16428
// result := true ;
16572: LD_ADDR_VAR 0 8
16576: PUSH
16577: LD_INT 1
16579: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16580: LD_VAR 0 6
16584: PUSH
16585: LD_VAR 0 13
16589: PPUSH
16590: CALL_OW 247
16594: PUSH
16595: LD_INT 2
16597: EQUAL
16598: AND
16599: PUSH
16600: LD_VAR 0 13
16604: PPUSH
16605: CALL_OW 263
16609: PUSH
16610: LD_INT 1
16612: EQUAL
16613: AND
16614: IFFALSE 16778
// begin if IsDrivenBy ( tmp ) then
16616: LD_VAR 0 13
16620: PPUSH
16621: CALL_OW 311
16625: IFFALSE 16629
// continue ;
16627: GO 16428
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16629: LD_VAR 0 6
16633: PPUSH
16634: LD_INT 3
16636: PUSH
16637: LD_INT 60
16639: PUSH
16640: EMPTY
16641: LIST
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 3
16649: PUSH
16650: LD_INT 55
16652: PUSH
16653: EMPTY
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: PPUSH
16664: CALL_OW 72
16668: IFFALSE 16776
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16670: LD_ADDR_VAR 0 18
16674: PUSH
16675: LD_VAR 0 6
16679: PPUSH
16680: LD_INT 3
16682: PUSH
16683: LD_INT 60
16685: PUSH
16686: EMPTY
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PUSH
16693: LD_INT 3
16695: PUSH
16696: LD_INT 55
16698: PUSH
16699: EMPTY
16700: LIST
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PPUSH
16710: CALL_OW 72
16714: PUSH
16715: LD_INT 1
16717: ARRAY
16718: ST_TO_ADDR
// if IsInUnit ( driver ) then
16719: LD_VAR 0 18
16723: PPUSH
16724: CALL_OW 310
16728: IFFALSE 16739
// ComExit ( driver ) ;
16730: LD_VAR 0 18
16734: PPUSH
16735: CALL 42049 0 1
// AddComEnterUnit ( driver , tmp ) ;
16739: LD_VAR 0 18
16743: PPUSH
16744: LD_VAR 0 13
16748: PPUSH
16749: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16753: LD_VAR 0 18
16757: PPUSH
16758: LD_VAR 0 7
16762: PPUSH
16763: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16767: LD_VAR 0 18
16771: PPUSH
16772: CALL_OW 181
// end ; continue ;
16776: GO 16428
// end ; if not cleaners or not tmp in cleaners then
16778: LD_VAR 0 6
16782: NOT
16783: PUSH
16784: LD_VAR 0 13
16788: PUSH
16789: LD_VAR 0 6
16793: IN
16794: NOT
16795: OR
16796: IFFALSE 17103
// begin if dep then
16798: LD_VAR 0 17
16802: IFFALSE 16938
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16804: LD_ADDR_VAR 0 16
16808: PUSH
16809: LD_VAR 0 17
16813: PUSH
16814: LD_INT 1
16816: ARRAY
16817: PPUSH
16818: CALL_OW 250
16822: PPUSH
16823: LD_VAR 0 17
16827: PUSH
16828: LD_INT 1
16830: ARRAY
16831: PPUSH
16832: CALL_OW 254
16836: PPUSH
16837: LD_INT 5
16839: PPUSH
16840: CALL_OW 272
16844: PUSH
16845: LD_VAR 0 17
16849: PUSH
16850: LD_INT 1
16852: ARRAY
16853: PPUSH
16854: CALL_OW 251
16858: PPUSH
16859: LD_VAR 0 17
16863: PUSH
16864: LD_INT 1
16866: ARRAY
16867: PPUSH
16868: CALL_OW 254
16872: PPUSH
16873: LD_INT 5
16875: PPUSH
16876: CALL_OW 273
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16885: LD_VAR 0 16
16889: PUSH
16890: LD_INT 1
16892: ARRAY
16893: PPUSH
16894: LD_VAR 0 16
16898: PUSH
16899: LD_INT 2
16901: ARRAY
16902: PPUSH
16903: CALL_OW 488
16907: IFFALSE 16938
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16909: LD_VAR 0 13
16913: PPUSH
16914: LD_VAR 0 16
16918: PUSH
16919: LD_INT 1
16921: ARRAY
16922: PPUSH
16923: LD_VAR 0 16
16927: PUSH
16928: LD_INT 2
16930: ARRAY
16931: PPUSH
16932: CALL_OW 111
// continue ;
16936: GO 16428
// end ; end ; r := GetDir ( tmp ) ;
16938: LD_ADDR_VAR 0 15
16942: PUSH
16943: LD_VAR 0 13
16947: PPUSH
16948: CALL_OW 254
16952: ST_TO_ADDR
// if r = 5 then
16953: LD_VAR 0 15
16957: PUSH
16958: LD_INT 5
16960: EQUAL
16961: IFFALSE 16971
// r := 0 ;
16963: LD_ADDR_VAR 0 15
16967: PUSH
16968: LD_INT 0
16970: ST_TO_ADDR
// for j = r to 5 do
16971: LD_ADDR_VAR 0 10
16975: PUSH
16976: DOUBLE
16977: LD_VAR 0 15
16981: DEC
16982: ST_TO_ADDR
16983: LD_INT 5
16985: PUSH
16986: FOR_TO
16987: IFFALSE 17101
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16989: LD_ADDR_VAR 0 11
16993: PUSH
16994: LD_VAR 0 13
16998: PPUSH
16999: CALL_OW 250
17003: PPUSH
17004: LD_VAR 0 10
17008: PPUSH
17009: LD_INT 2
17011: PPUSH
17012: CALL_OW 272
17016: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17017: LD_ADDR_VAR 0 12
17021: PUSH
17022: LD_VAR 0 13
17026: PPUSH
17027: CALL_OW 251
17031: PPUSH
17032: LD_VAR 0 10
17036: PPUSH
17037: LD_INT 2
17039: PPUSH
17040: CALL_OW 273
17044: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17045: LD_VAR 0 11
17049: PPUSH
17050: LD_VAR 0 12
17054: PPUSH
17055: CALL_OW 488
17059: PUSH
17060: LD_VAR 0 11
17064: PPUSH
17065: LD_VAR 0 12
17069: PPUSH
17070: CALL_OW 428
17074: NOT
17075: AND
17076: IFFALSE 17099
// begin ComMoveXY ( tmp , _x , _y ) ;
17078: LD_VAR 0 13
17082: PPUSH
17083: LD_VAR 0 11
17087: PPUSH
17088: LD_VAR 0 12
17092: PPUSH
17093: CALL_OW 111
// break ;
17097: GO 17101
// end ; end ;
17099: GO 16986
17101: POP
17102: POP
// end ; end ;
17103: GO 16428
17105: POP
17106: POP
// end ;
17107: LD_VAR 0 8
17111: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17112: LD_INT 0
17114: PPUSH
// result := true ;
17115: LD_ADDR_VAR 0 3
17119: PUSH
17120: LD_INT 1
17122: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17123: LD_VAR 0 2
17127: PUSH
17128: LD_INT 24
17130: DOUBLE
17131: EQUAL
17132: IFTRUE 17142
17134: LD_INT 33
17136: DOUBLE
17137: EQUAL
17138: IFTRUE 17142
17140: GO 17167
17142: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17143: LD_ADDR_VAR 0 3
17147: PUSH
17148: LD_INT 32
17150: PPUSH
17151: LD_VAR 0 1
17155: PPUSH
17156: CALL_OW 321
17160: PUSH
17161: LD_INT 2
17163: EQUAL
17164: ST_TO_ADDR
17165: GO 17487
17167: LD_INT 20
17169: DOUBLE
17170: EQUAL
17171: IFTRUE 17175
17173: GO 17200
17175: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17176: LD_ADDR_VAR 0 3
17180: PUSH
17181: LD_INT 6
17183: PPUSH
17184: LD_VAR 0 1
17188: PPUSH
17189: CALL_OW 321
17193: PUSH
17194: LD_INT 2
17196: EQUAL
17197: ST_TO_ADDR
17198: GO 17487
17200: LD_INT 22
17202: DOUBLE
17203: EQUAL
17204: IFTRUE 17214
17206: LD_INT 36
17208: DOUBLE
17209: EQUAL
17210: IFTRUE 17214
17212: GO 17239
17214: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17215: LD_ADDR_VAR 0 3
17219: PUSH
17220: LD_INT 15
17222: PPUSH
17223: LD_VAR 0 1
17227: PPUSH
17228: CALL_OW 321
17232: PUSH
17233: LD_INT 2
17235: EQUAL
17236: ST_TO_ADDR
17237: GO 17487
17239: LD_INT 30
17241: DOUBLE
17242: EQUAL
17243: IFTRUE 17247
17245: GO 17272
17247: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17248: LD_ADDR_VAR 0 3
17252: PUSH
17253: LD_INT 20
17255: PPUSH
17256: LD_VAR 0 1
17260: PPUSH
17261: CALL_OW 321
17265: PUSH
17266: LD_INT 2
17268: EQUAL
17269: ST_TO_ADDR
17270: GO 17487
17272: LD_INT 28
17274: DOUBLE
17275: EQUAL
17276: IFTRUE 17286
17278: LD_INT 21
17280: DOUBLE
17281: EQUAL
17282: IFTRUE 17286
17284: GO 17311
17286: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17287: LD_ADDR_VAR 0 3
17291: PUSH
17292: LD_INT 21
17294: PPUSH
17295: LD_VAR 0 1
17299: PPUSH
17300: CALL_OW 321
17304: PUSH
17305: LD_INT 2
17307: EQUAL
17308: ST_TO_ADDR
17309: GO 17487
17311: LD_INT 16
17313: DOUBLE
17314: EQUAL
17315: IFTRUE 17319
17317: GO 17346
17319: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17320: LD_ADDR_VAR 0 3
17324: PUSH
17325: LD_EXP 57
17329: PPUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 321
17339: PUSH
17340: LD_INT 2
17342: EQUAL
17343: ST_TO_ADDR
17344: GO 17487
17346: LD_INT 19
17348: DOUBLE
17349: EQUAL
17350: IFTRUE 17360
17352: LD_INT 23
17354: DOUBLE
17355: EQUAL
17356: IFTRUE 17360
17358: GO 17387
17360: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17361: LD_ADDR_VAR 0 3
17365: PUSH
17366: LD_EXP 56
17370: PPUSH
17371: LD_VAR 0 1
17375: PPUSH
17376: CALL_OW 321
17380: PUSH
17381: LD_INT 2
17383: EQUAL
17384: ST_TO_ADDR
17385: GO 17487
17387: LD_INT 17
17389: DOUBLE
17390: EQUAL
17391: IFTRUE 17395
17393: GO 17420
17395: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17396: LD_ADDR_VAR 0 3
17400: PUSH
17401: LD_INT 39
17403: PPUSH
17404: LD_VAR 0 1
17408: PPUSH
17409: CALL_OW 321
17413: PUSH
17414: LD_INT 2
17416: EQUAL
17417: ST_TO_ADDR
17418: GO 17487
17420: LD_INT 18
17422: DOUBLE
17423: EQUAL
17424: IFTRUE 17428
17426: GO 17453
17428: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17429: LD_ADDR_VAR 0 3
17433: PUSH
17434: LD_INT 40
17436: PPUSH
17437: LD_VAR 0 1
17441: PPUSH
17442: CALL_OW 321
17446: PUSH
17447: LD_INT 2
17449: EQUAL
17450: ST_TO_ADDR
17451: GO 17487
17453: LD_INT 27
17455: DOUBLE
17456: EQUAL
17457: IFTRUE 17461
17459: GO 17486
17461: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17462: LD_ADDR_VAR 0 3
17466: PUSH
17467: LD_INT 35
17469: PPUSH
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL_OW 321
17479: PUSH
17480: LD_INT 2
17482: EQUAL
17483: ST_TO_ADDR
17484: GO 17487
17486: POP
// end ;
17487: LD_VAR 0 3
17491: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17492: LD_INT 0
17494: PPUSH
17495: PPUSH
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
17500: PPUSH
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
// result := false ;
17505: LD_ADDR_VAR 0 6
17509: PUSH
17510: LD_INT 0
17512: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17513: LD_VAR 0 1
17517: NOT
17518: PUSH
17519: LD_VAR 0 1
17523: PPUSH
17524: CALL_OW 266
17528: PUSH
17529: LD_INT 0
17531: PUSH
17532: LD_INT 1
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: IN
17539: NOT
17540: OR
17541: PUSH
17542: LD_VAR 0 2
17546: NOT
17547: OR
17548: PUSH
17549: LD_VAR 0 5
17553: PUSH
17554: LD_INT 0
17556: PUSH
17557: LD_INT 1
17559: PUSH
17560: LD_INT 2
17562: PUSH
17563: LD_INT 3
17565: PUSH
17566: LD_INT 4
17568: PUSH
17569: LD_INT 5
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: IN
17580: NOT
17581: OR
17582: PUSH
17583: LD_VAR 0 3
17587: PPUSH
17588: LD_VAR 0 4
17592: PPUSH
17593: CALL_OW 488
17597: NOT
17598: OR
17599: IFFALSE 17603
// exit ;
17601: GO 18339
// side := GetSide ( depot ) ;
17603: LD_ADDR_VAR 0 9
17607: PUSH
17608: LD_VAR 0 1
17612: PPUSH
17613: CALL_OW 255
17617: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17618: LD_VAR 0 9
17622: PPUSH
17623: LD_VAR 0 2
17627: PPUSH
17628: CALL 17112 0 2
17632: NOT
17633: IFFALSE 17637
// exit ;
17635: GO 18339
// pom := GetBase ( depot ) ;
17637: LD_ADDR_VAR 0 10
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 274
17651: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17652: LD_ADDR_VAR 0 11
17656: PUSH
17657: LD_VAR 0 2
17661: PPUSH
17662: LD_VAR 0 1
17666: PPUSH
17667: CALL_OW 248
17671: PPUSH
17672: CALL_OW 450
17676: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17677: LD_VAR 0 10
17681: PPUSH
17682: LD_INT 1
17684: PPUSH
17685: CALL_OW 275
17689: PUSH
17690: LD_VAR 0 11
17694: PUSH
17695: LD_INT 1
17697: ARRAY
17698: GREATEREQUAL
17699: PUSH
17700: LD_VAR 0 10
17704: PPUSH
17705: LD_INT 2
17707: PPUSH
17708: CALL_OW 275
17712: PUSH
17713: LD_VAR 0 11
17717: PUSH
17718: LD_INT 2
17720: ARRAY
17721: GREATEREQUAL
17722: AND
17723: PUSH
17724: LD_VAR 0 10
17728: PPUSH
17729: LD_INT 3
17731: PPUSH
17732: CALL_OW 275
17736: PUSH
17737: LD_VAR 0 11
17741: PUSH
17742: LD_INT 3
17744: ARRAY
17745: GREATEREQUAL
17746: AND
17747: NOT
17748: IFFALSE 17752
// exit ;
17750: GO 18339
// if GetBType ( depot ) = b_depot then
17752: LD_VAR 0 1
17756: PPUSH
17757: CALL_OW 266
17761: PUSH
17762: LD_INT 0
17764: EQUAL
17765: IFFALSE 17777
// dist := 28 else
17767: LD_ADDR_VAR 0 14
17771: PUSH
17772: LD_INT 28
17774: ST_TO_ADDR
17775: GO 17785
// dist := 36 ;
17777: LD_ADDR_VAR 0 14
17781: PUSH
17782: LD_INT 36
17784: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17785: LD_VAR 0 1
17789: PPUSH
17790: LD_VAR 0 3
17794: PPUSH
17795: LD_VAR 0 4
17799: PPUSH
17800: CALL_OW 297
17804: PUSH
17805: LD_VAR 0 14
17809: GREATER
17810: IFFALSE 17814
// exit ;
17812: GO 18339
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17814: LD_ADDR_VAR 0 12
17818: PUSH
17819: LD_VAR 0 2
17823: PPUSH
17824: LD_VAR 0 3
17828: PPUSH
17829: LD_VAR 0 4
17833: PPUSH
17834: LD_VAR 0 5
17838: PPUSH
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 248
17848: PPUSH
17849: LD_INT 0
17851: PPUSH
17852: CALL 18344 0 6
17856: ST_TO_ADDR
// if not hexes then
17857: LD_VAR 0 12
17861: NOT
17862: IFFALSE 17866
// exit ;
17864: GO 18339
// hex := GetHexInfo ( x , y ) ;
17866: LD_ADDR_VAR 0 15
17870: PUSH
17871: LD_VAR 0 3
17875: PPUSH
17876: LD_VAR 0 4
17880: PPUSH
17881: CALL_OW 546
17885: ST_TO_ADDR
// if hex [ 1 ] then
17886: LD_VAR 0 15
17890: PUSH
17891: LD_INT 1
17893: ARRAY
17894: IFFALSE 17898
// exit ;
17896: GO 18339
// height := hex [ 2 ] ;
17898: LD_ADDR_VAR 0 13
17902: PUSH
17903: LD_VAR 0 15
17907: PUSH
17908: LD_INT 2
17910: ARRAY
17911: ST_TO_ADDR
// for i = 1 to hexes do
17912: LD_ADDR_VAR 0 7
17916: PUSH
17917: DOUBLE
17918: LD_INT 1
17920: DEC
17921: ST_TO_ADDR
17922: LD_VAR 0 12
17926: PUSH
17927: FOR_TO
17928: IFFALSE 18258
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17930: LD_VAR 0 12
17934: PUSH
17935: LD_VAR 0 7
17939: ARRAY
17940: PUSH
17941: LD_INT 1
17943: ARRAY
17944: PPUSH
17945: LD_VAR 0 12
17949: PUSH
17950: LD_VAR 0 7
17954: ARRAY
17955: PUSH
17956: LD_INT 2
17958: ARRAY
17959: PPUSH
17960: CALL_OW 488
17964: NOT
17965: PUSH
17966: LD_VAR 0 12
17970: PUSH
17971: LD_VAR 0 7
17975: ARRAY
17976: PUSH
17977: LD_INT 1
17979: ARRAY
17980: PPUSH
17981: LD_VAR 0 12
17985: PUSH
17986: LD_VAR 0 7
17990: ARRAY
17991: PUSH
17992: LD_INT 2
17994: ARRAY
17995: PPUSH
17996: CALL_OW 428
18000: PUSH
18001: LD_INT 0
18003: GREATER
18004: OR
18005: PUSH
18006: LD_VAR 0 12
18010: PUSH
18011: LD_VAR 0 7
18015: ARRAY
18016: PUSH
18017: LD_INT 1
18019: ARRAY
18020: PPUSH
18021: LD_VAR 0 12
18025: PUSH
18026: LD_VAR 0 7
18030: ARRAY
18031: PUSH
18032: LD_INT 2
18034: ARRAY
18035: PPUSH
18036: CALL_OW 351
18040: OR
18041: IFFALSE 18047
// exit ;
18043: POP
18044: POP
18045: GO 18339
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18047: LD_ADDR_VAR 0 8
18051: PUSH
18052: LD_VAR 0 12
18056: PUSH
18057: LD_VAR 0 7
18061: ARRAY
18062: PUSH
18063: LD_INT 1
18065: ARRAY
18066: PPUSH
18067: LD_VAR 0 12
18071: PUSH
18072: LD_VAR 0 7
18076: ARRAY
18077: PUSH
18078: LD_INT 2
18080: ARRAY
18081: PPUSH
18082: CALL_OW 546
18086: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18087: LD_VAR 0 8
18091: PUSH
18092: LD_INT 1
18094: ARRAY
18095: PUSH
18096: LD_VAR 0 8
18100: PUSH
18101: LD_INT 2
18103: ARRAY
18104: PUSH
18105: LD_VAR 0 13
18109: PUSH
18110: LD_INT 2
18112: PLUS
18113: GREATER
18114: OR
18115: PUSH
18116: LD_VAR 0 8
18120: PUSH
18121: LD_INT 2
18123: ARRAY
18124: PUSH
18125: LD_VAR 0 13
18129: PUSH
18130: LD_INT 2
18132: MINUS
18133: LESS
18134: OR
18135: PUSH
18136: LD_VAR 0 8
18140: PUSH
18141: LD_INT 3
18143: ARRAY
18144: PUSH
18145: LD_INT 0
18147: PUSH
18148: LD_INT 8
18150: PUSH
18151: LD_INT 9
18153: PUSH
18154: LD_INT 10
18156: PUSH
18157: LD_INT 11
18159: PUSH
18160: LD_INT 12
18162: PUSH
18163: LD_INT 13
18165: PUSH
18166: LD_INT 16
18168: PUSH
18169: LD_INT 17
18171: PUSH
18172: LD_INT 18
18174: PUSH
18175: LD_INT 19
18177: PUSH
18178: LD_INT 20
18180: PUSH
18181: LD_INT 21
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: IN
18199: NOT
18200: OR
18201: PUSH
18202: LD_VAR 0 8
18206: PUSH
18207: LD_INT 5
18209: ARRAY
18210: NOT
18211: OR
18212: PUSH
18213: LD_VAR 0 8
18217: PUSH
18218: LD_INT 6
18220: ARRAY
18221: PUSH
18222: LD_INT 1
18224: PUSH
18225: LD_INT 2
18227: PUSH
18228: LD_INT 7
18230: PUSH
18231: LD_INT 9
18233: PUSH
18234: LD_INT 10
18236: PUSH
18237: LD_INT 11
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: IN
18248: NOT
18249: OR
18250: IFFALSE 18256
// exit ;
18252: POP
18253: POP
18254: GO 18339
// end ;
18256: GO 17927
18258: POP
18259: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18260: LD_VAR 0 9
18264: PPUSH
18265: LD_VAR 0 3
18269: PPUSH
18270: LD_VAR 0 4
18274: PPUSH
18275: LD_INT 20
18277: PPUSH
18278: CALL 10285 0 4
18282: PUSH
18283: LD_INT 4
18285: ARRAY
18286: IFFALSE 18290
// exit ;
18288: GO 18339
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18290: LD_VAR 0 2
18294: PUSH
18295: LD_INT 29
18297: PUSH
18298: LD_INT 30
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: IN
18305: PUSH
18306: LD_VAR 0 3
18310: PPUSH
18311: LD_VAR 0 4
18315: PPUSH
18316: LD_VAR 0 9
18320: PPUSH
18321: CALL_OW 440
18325: NOT
18326: AND
18327: IFFALSE 18331
// exit ;
18329: GO 18339
// result := true ;
18331: LD_ADDR_VAR 0 6
18335: PUSH
18336: LD_INT 1
18338: ST_TO_ADDR
// end ;
18339: LD_VAR 0 6
18343: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18344: LD_INT 0
18346: PPUSH
18347: PPUSH
18348: PPUSH
18349: PPUSH
18350: PPUSH
18351: PPUSH
18352: PPUSH
18353: PPUSH
18354: PPUSH
18355: PPUSH
18356: PPUSH
18357: PPUSH
18358: PPUSH
18359: PPUSH
18360: PPUSH
18361: PPUSH
18362: PPUSH
18363: PPUSH
18364: PPUSH
18365: PPUSH
18366: PPUSH
18367: PPUSH
18368: PPUSH
18369: PPUSH
18370: PPUSH
18371: PPUSH
18372: PPUSH
18373: PPUSH
18374: PPUSH
18375: PPUSH
18376: PPUSH
18377: PPUSH
18378: PPUSH
18379: PPUSH
18380: PPUSH
18381: PPUSH
18382: PPUSH
18383: PPUSH
18384: PPUSH
18385: PPUSH
18386: PPUSH
18387: PPUSH
18388: PPUSH
18389: PPUSH
18390: PPUSH
18391: PPUSH
18392: PPUSH
18393: PPUSH
18394: PPUSH
18395: PPUSH
18396: PPUSH
18397: PPUSH
18398: PPUSH
18399: PPUSH
18400: PPUSH
18401: PPUSH
18402: PPUSH
18403: PPUSH
// result = [ ] ;
18404: LD_ADDR_VAR 0 7
18408: PUSH
18409: EMPTY
18410: ST_TO_ADDR
// temp_list = [ ] ;
18411: LD_ADDR_VAR 0 9
18415: PUSH
18416: EMPTY
18417: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18418: LD_VAR 0 4
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: LD_INT 1
18428: PUSH
18429: LD_INT 2
18431: PUSH
18432: LD_INT 3
18434: PUSH
18435: LD_INT 4
18437: PUSH
18438: LD_INT 5
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: IN
18449: NOT
18450: PUSH
18451: LD_VAR 0 1
18455: PUSH
18456: LD_INT 0
18458: PUSH
18459: LD_INT 1
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: IN
18466: PUSH
18467: LD_VAR 0 5
18471: PUSH
18472: LD_INT 1
18474: PUSH
18475: LD_INT 2
18477: PUSH
18478: LD_INT 3
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: LIST
18485: IN
18486: NOT
18487: AND
18488: OR
18489: IFFALSE 18493
// exit ;
18491: GO 36884
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18493: LD_VAR 0 1
18497: PUSH
18498: LD_INT 6
18500: PUSH
18501: LD_INT 7
18503: PUSH
18504: LD_INT 8
18506: PUSH
18507: LD_INT 13
18509: PUSH
18510: LD_INT 12
18512: PUSH
18513: LD_INT 15
18515: PUSH
18516: LD_INT 11
18518: PUSH
18519: LD_INT 14
18521: PUSH
18522: LD_INT 10
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: IN
18536: IFFALSE 18546
// btype = b_lab ;
18538: LD_ADDR_VAR 0 1
18542: PUSH
18543: LD_INT 6
18545: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18546: LD_VAR 0 6
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 2
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: LIST
18564: IN
18565: NOT
18566: PUSH
18567: LD_VAR 0 1
18571: PUSH
18572: LD_INT 0
18574: PUSH
18575: LD_INT 1
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: LD_INT 3
18583: PUSH
18584: LD_INT 6
18586: PUSH
18587: LD_INT 36
18589: PUSH
18590: LD_INT 4
18592: PUSH
18593: LD_INT 5
18595: PUSH
18596: LD_INT 31
18598: PUSH
18599: LD_INT 32
18601: PUSH
18602: LD_INT 33
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: IN
18618: NOT
18619: PUSH
18620: LD_VAR 0 6
18624: PUSH
18625: LD_INT 1
18627: EQUAL
18628: AND
18629: OR
18630: PUSH
18631: LD_VAR 0 1
18635: PUSH
18636: LD_INT 2
18638: PUSH
18639: LD_INT 3
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: IN
18646: NOT
18647: PUSH
18648: LD_VAR 0 6
18652: PUSH
18653: LD_INT 2
18655: EQUAL
18656: AND
18657: OR
18658: IFFALSE 18668
// mode = 0 ;
18660: LD_ADDR_VAR 0 6
18664: PUSH
18665: LD_INT 0
18667: ST_TO_ADDR
// case mode of 0 :
18668: LD_VAR 0 6
18672: PUSH
18673: LD_INT 0
18675: DOUBLE
18676: EQUAL
18677: IFTRUE 18681
18679: GO 30134
18681: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18682: LD_ADDR_VAR 0 11
18686: PUSH
18687: LD_INT 0
18689: PUSH
18690: LD_INT 0
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 0
18699: PUSH
18700: LD_INT 1
18702: NEG
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: LD_INT 1
18710: PUSH
18711: LD_INT 0
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 1
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 0
18730: PUSH
18731: LD_INT 1
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 1
18740: NEG
18741: PUSH
18742: LD_INT 0
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 1
18751: NEG
18752: PUSH
18753: LD_INT 1
18755: NEG
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 1
18763: NEG
18764: PUSH
18765: LD_INT 2
18767: NEG
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 0
18775: PUSH
18776: LD_INT 2
18778: NEG
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: PUSH
18787: LD_INT 1
18789: NEG
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: PUSH
18798: LD_INT 2
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 0
18807: PUSH
18808: LD_INT 2
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: NEG
18818: PUSH
18819: LD_INT 1
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 1
18828: PUSH
18829: LD_INT 3
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 0
18838: PUSH
18839: LD_INT 3
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: NEG
18849: PUSH
18850: LD_INT 2
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18875: LD_ADDR_VAR 0 12
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: LD_INT 0
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: LD_INT 0
18892: PUSH
18893: LD_INT 1
18895: NEG
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 1
18903: PUSH
18904: LD_INT 0
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 0
18923: PUSH
18924: LD_INT 1
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: NEG
18934: PUSH
18935: LD_INT 0
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 1
18944: NEG
18945: PUSH
18946: LD_INT 1
18948: NEG
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 1
18956: PUSH
18957: LD_INT 1
18959: NEG
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 2
18967: PUSH
18968: LD_INT 0
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: LD_INT 2
18977: PUSH
18978: LD_INT 1
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 1
18987: NEG
18988: PUSH
18989: LD_INT 1
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 2
18998: NEG
18999: PUSH
19000: LD_INT 0
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 2
19009: NEG
19010: PUSH
19011: LD_INT 1
19013: NEG
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 2
19021: NEG
19022: PUSH
19023: LD_INT 1
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 3
19032: NEG
19033: PUSH
19034: LD_INT 0
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 3
19043: NEG
19044: PUSH
19045: LD_INT 1
19047: NEG
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19071: LD_ADDR_VAR 0 13
19075: PUSH
19076: LD_INT 0
19078: PUSH
19079: LD_INT 0
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 0
19088: PUSH
19089: LD_INT 1
19091: NEG
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: LD_INT 1
19099: PUSH
19100: LD_INT 0
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: PUSH
19107: LD_INT 1
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 0
19119: PUSH
19120: LD_INT 1
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 1
19129: NEG
19130: PUSH
19131: LD_INT 0
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: LD_INT 1
19144: NEG
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 1
19152: NEG
19153: PUSH
19154: LD_INT 2
19156: NEG
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 2
19164: PUSH
19165: LD_INT 1
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 2
19174: PUSH
19175: LD_INT 2
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 1
19184: PUSH
19185: LD_INT 2
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 2
19194: NEG
19195: PUSH
19196: LD_INT 1
19198: NEG
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: LD_INT 2
19206: NEG
19207: PUSH
19208: LD_INT 2
19210: NEG
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 2
19218: NEG
19219: PUSH
19220: LD_INT 3
19222: NEG
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 3
19230: NEG
19231: PUSH
19232: LD_INT 2
19234: NEG
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 3
19242: NEG
19243: PUSH
19244: LD_INT 3
19246: NEG
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19270: LD_ADDR_VAR 0 14
19274: PUSH
19275: LD_INT 0
19277: PUSH
19278: LD_INT 0
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 0
19287: PUSH
19288: LD_INT 1
19290: NEG
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: LD_INT 0
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 1
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 0
19318: PUSH
19319: LD_INT 1
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 1
19328: NEG
19329: PUSH
19330: LD_INT 0
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: PUSH
19337: LD_INT 1
19339: NEG
19340: PUSH
19341: LD_INT 1
19343: NEG
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 1
19351: NEG
19352: PUSH
19353: LD_INT 2
19355: NEG
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 0
19363: PUSH
19364: LD_INT 2
19366: NEG
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 1
19374: PUSH
19375: LD_INT 1
19377: NEG
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: LD_INT 2
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 0
19395: PUSH
19396: LD_INT 2
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 1
19405: NEG
19406: PUSH
19407: LD_INT 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 1
19416: NEG
19417: PUSH
19418: LD_INT 3
19420: NEG
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 3
19431: NEG
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 1
19439: PUSH
19440: LD_INT 2
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19466: LD_ADDR_VAR 0 15
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: LD_INT 0
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: LD_INT 1
19486: NEG
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 1
19494: PUSH
19495: LD_INT 0
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 1
19524: NEG
19525: PUSH
19526: LD_INT 0
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 1
19535: NEG
19536: PUSH
19537: LD_INT 1
19539: NEG
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: LD_INT 1
19550: NEG
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 2
19558: PUSH
19559: LD_INT 0
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 2
19568: PUSH
19569: LD_INT 1
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 1
19578: NEG
19579: PUSH
19580: LD_INT 1
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 2
19589: NEG
19590: PUSH
19591: LD_INT 0
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: LD_INT 2
19600: NEG
19601: PUSH
19602: LD_INT 1
19604: NEG
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PUSH
19610: LD_INT 2
19612: PUSH
19613: LD_INT 1
19615: NEG
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: PUSH
19621: LD_INT 3
19623: PUSH
19624: LD_INT 0
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 3
19633: PUSH
19634: LD_INT 1
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19659: LD_ADDR_VAR 0 16
19663: PUSH
19664: LD_INT 0
19666: PUSH
19667: LD_INT 0
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 0
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 1
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: LD_INT 0
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 1
19728: NEG
19729: PUSH
19730: LD_INT 1
19732: NEG
19733: PUSH
19734: EMPTY
19735: LIST
19736: LIST
19737: PUSH
19738: LD_INT 1
19740: NEG
19741: PUSH
19742: LD_INT 2
19744: NEG
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 2
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 2
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: LD_INT 2
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 2
19782: NEG
19783: PUSH
19784: LD_INT 1
19786: NEG
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 2
19794: NEG
19795: PUSH
19796: LD_INT 2
19798: NEG
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 3
19806: PUSH
19807: LD_INT 2
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 3
19816: PUSH
19817: LD_INT 3
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 2
19826: PUSH
19827: LD_INT 3
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19852: LD_ADDR_VAR 0 17
19856: PUSH
19857: LD_INT 0
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 0
19869: PUSH
19870: LD_INT 1
19872: NEG
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 1
19880: PUSH
19881: LD_INT 0
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: LD_INT 1
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 1
19910: NEG
19911: PUSH
19912: LD_INT 0
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: NEG
19922: PUSH
19923: LD_INT 1
19925: NEG
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 1
19933: NEG
19934: PUSH
19935: LD_INT 2
19937: NEG
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 0
19945: PUSH
19946: LD_INT 2
19948: NEG
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: LD_INT 1
19959: NEG
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: LD_INT 2
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 2
19977: PUSH
19978: LD_INT 1
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 2
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 1
19997: PUSH
19998: LD_INT 2
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 0
20007: PUSH
20008: LD_INT 2
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 1
20017: NEG
20018: PUSH
20019: LD_INT 1
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 2
20028: NEG
20029: PUSH
20030: LD_INT 0
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: LD_INT 2
20039: NEG
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 2
20051: NEG
20052: PUSH
20053: LD_INT 2
20055: NEG
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20082: LD_ADDR_VAR 0 18
20086: PUSH
20087: LD_INT 0
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 0
20099: PUSH
20100: LD_INT 1
20102: NEG
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 1
20110: PUSH
20111: LD_INT 0
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 1
20120: PUSH
20121: LD_INT 1
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 0
20130: PUSH
20131: LD_INT 1
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 1
20140: NEG
20141: PUSH
20142: LD_INT 0
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 1
20151: NEG
20152: PUSH
20153: LD_INT 1
20155: NEG
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: LD_INT 2
20167: NEG
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 0
20175: PUSH
20176: LD_INT 2
20178: NEG
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 1
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 2
20197: PUSH
20198: LD_INT 0
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 2
20207: PUSH
20208: LD_INT 1
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: PUSH
20218: LD_INT 2
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: LD_INT 2
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 0
20237: PUSH
20238: LD_INT 2
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 1
20247: NEG
20248: PUSH
20249: LD_INT 1
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 2
20258: NEG
20259: PUSH
20260: LD_INT 0
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 2
20269: NEG
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 2
20281: NEG
20282: PUSH
20283: LD_INT 2
20285: NEG
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20312: LD_ADDR_VAR 0 19
20316: PUSH
20317: LD_INT 0
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 0
20329: PUSH
20330: LD_INT 1
20332: NEG
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: LD_INT 0
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PUSH
20348: LD_INT 1
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 0
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 1
20370: NEG
20371: PUSH
20372: LD_INT 0
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 1
20381: NEG
20382: PUSH
20383: LD_INT 1
20385: NEG
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: LD_INT 2
20397: NEG
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 0
20405: PUSH
20406: LD_INT 2
20408: NEG
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: LD_INT 1
20419: NEG
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 0
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 2
20437: PUSH
20438: LD_INT 1
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: LD_INT 2
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 1
20457: PUSH
20458: LD_INT 2
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 0
20467: PUSH
20468: LD_INT 2
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 1
20477: NEG
20478: PUSH
20479: LD_INT 1
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 2
20488: NEG
20489: PUSH
20490: LD_INT 0
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: NEG
20500: PUSH
20501: LD_INT 1
20503: NEG
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: LD_INT 2
20511: NEG
20512: PUSH
20513: LD_INT 2
20515: NEG
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20542: LD_ADDR_VAR 0 20
20546: PUSH
20547: LD_INT 0
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: LD_INT 1
20562: NEG
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: LD_INT 0
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 1
20580: PUSH
20581: LD_INT 1
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 0
20590: PUSH
20591: LD_INT 1
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 1
20600: NEG
20601: PUSH
20602: LD_INT 0
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PUSH
20613: LD_INT 1
20615: NEG
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: LD_INT 1
20623: NEG
20624: PUSH
20625: LD_INT 2
20627: NEG
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 0
20635: PUSH
20636: LD_INT 2
20638: NEG
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PUSH
20644: LD_INT 1
20646: PUSH
20647: LD_INT 1
20649: NEG
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: PUSH
20655: LD_INT 2
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 2
20667: PUSH
20668: LD_INT 1
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 2
20677: PUSH
20678: LD_INT 2
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 1
20687: PUSH
20688: LD_INT 2
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 0
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 1
20707: NEG
20708: PUSH
20709: LD_INT 1
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 2
20718: NEG
20719: PUSH
20720: LD_INT 0
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 2
20729: NEG
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: LD_INT 2
20741: NEG
20742: PUSH
20743: LD_INT 2
20745: NEG
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20772: LD_ADDR_VAR 0 21
20776: PUSH
20777: LD_INT 0
20779: PUSH
20780: LD_INT 0
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: LD_INT 1
20792: NEG
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 0
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 0
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: LD_INT 0
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 1
20841: NEG
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: PUSH
20855: LD_INT 2
20857: NEG
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 0
20865: PUSH
20866: LD_INT 2
20868: NEG
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: LD_INT 1
20876: PUSH
20877: LD_INT 1
20879: NEG
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: LD_INT 0
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 2
20897: PUSH
20898: LD_INT 1
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 2
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 1
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 0
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 1
20937: NEG
20938: PUSH
20939: LD_INT 1
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: LD_INT 2
20948: NEG
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 2
20959: NEG
20960: PUSH
20961: LD_INT 1
20963: NEG
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 2
20971: NEG
20972: PUSH
20973: LD_INT 2
20975: NEG
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21002: LD_ADDR_VAR 0 22
21006: PUSH
21007: LD_INT 0
21009: PUSH
21010: LD_INT 0
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: LD_INT 1
21022: NEG
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 1
21030: PUSH
21031: LD_INT 0
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 0
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 1
21060: NEG
21061: PUSH
21062: LD_INT 0
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 1
21071: NEG
21072: PUSH
21073: LD_INT 1
21075: NEG
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 1
21083: NEG
21084: PUSH
21085: LD_INT 2
21087: NEG
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: LD_INT 2
21098: NEG
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 1
21106: PUSH
21107: LD_INT 1
21109: NEG
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 2
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 2
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 1
21147: PUSH
21148: LD_INT 2
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: LD_INT 2
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 1
21167: NEG
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 2
21178: NEG
21179: PUSH
21180: LD_INT 0
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 2
21189: NEG
21190: PUSH
21191: LD_INT 1
21193: NEG
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 2
21201: NEG
21202: PUSH
21203: LD_INT 2
21205: NEG
21206: PUSH
21207: EMPTY
21208: LIST
21209: LIST
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21232: LD_ADDR_VAR 0 23
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: LD_INT 0
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 0
21249: PUSH
21250: LD_INT 1
21252: NEG
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 1
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 0
21280: PUSH
21281: LD_INT 1
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 1
21290: NEG
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: NEG
21302: PUSH
21303: LD_INT 1
21305: NEG
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: NEG
21314: PUSH
21315: LD_INT 2
21317: NEG
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: LD_INT 2
21328: NEG
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: LD_INT 1
21339: NEG
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: LD_INT 0
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 2
21357: PUSH
21358: LD_INT 1
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: LD_INT 2
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 1
21377: PUSH
21378: LD_INT 2
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 0
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 1
21397: NEG
21398: PUSH
21399: LD_INT 1
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 2
21408: NEG
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 2
21419: NEG
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 2
21431: NEG
21432: PUSH
21433: LD_INT 2
21435: NEG
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 2
21443: NEG
21444: PUSH
21445: LD_INT 3
21447: NEG
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 1
21455: NEG
21456: PUSH
21457: LD_INT 3
21459: NEG
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: LD_INT 1
21467: PUSH
21468: LD_INT 2
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 2
21478: PUSH
21479: LD_INT 1
21481: NEG
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21512: LD_ADDR_VAR 0 24
21516: PUSH
21517: LD_INT 0
21519: PUSH
21520: LD_INT 0
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: LD_INT 1
21532: NEG
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: LD_INT 0
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: PUSH
21551: LD_INT 1
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 0
21560: PUSH
21561: LD_INT 1
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 1
21570: NEG
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: LD_INT 1
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 1
21593: NEG
21594: PUSH
21595: LD_INT 2
21597: NEG
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 0
21605: PUSH
21606: LD_INT 2
21608: NEG
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 1
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 2
21627: PUSH
21628: LD_INT 0
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 2
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 2
21647: PUSH
21648: LD_INT 2
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 1
21657: PUSH
21658: LD_INT 2
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: LD_INT 1
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 2
21688: NEG
21689: PUSH
21690: LD_INT 0
21692: PUSH
21693: EMPTY
21694: LIST
21695: LIST
21696: PUSH
21697: LD_INT 2
21699: NEG
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: NEG
21712: PUSH
21713: LD_INT 2
21715: NEG
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 1
21723: PUSH
21724: LD_INT 2
21726: NEG
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: LD_INT 1
21737: NEG
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 3
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 3
21755: PUSH
21756: LD_INT 2
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21788: LD_ADDR_VAR 0 25
21792: PUSH
21793: LD_INT 0
21795: PUSH
21796: LD_INT 0
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 0
21805: PUSH
21806: LD_INT 1
21808: NEG
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 1
21816: PUSH
21817: LD_INT 0
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: PUSH
21827: LD_INT 1
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 0
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 1
21846: NEG
21847: PUSH
21848: LD_INT 0
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: NEG
21858: PUSH
21859: LD_INT 1
21861: NEG
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: LD_INT 2
21873: NEG
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 0
21881: PUSH
21882: LD_INT 2
21884: NEG
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: LD_INT 1
21895: NEG
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 2
21903: PUSH
21904: LD_INT 0
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 2
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 2
21923: PUSH
21924: LD_INT 2
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 1
21933: PUSH
21934: LD_INT 2
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 0
21943: PUSH
21944: LD_INT 2
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 1
21953: NEG
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: EMPTY
21959: LIST
21960: LIST
21961: PUSH
21962: LD_INT 2
21964: NEG
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 2
21975: NEG
21976: PUSH
21977: LD_INT 1
21979: NEG
21980: PUSH
21981: EMPTY
21982: LIST
21983: LIST
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: LD_INT 2
21991: NEG
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 3
21999: PUSH
22000: LD_INT 1
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: PUSH
22007: LD_INT 3
22009: PUSH
22010: LD_INT 2
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 2
22019: PUSH
22020: LD_INT 3
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 1
22029: PUSH
22030: LD_INT 3
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22062: LD_ADDR_VAR 0 26
22066: PUSH
22067: LD_INT 0
22069: PUSH
22070: LD_INT 0
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: LD_INT 0
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 1
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 0
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: NEG
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 1
22131: NEG
22132: PUSH
22133: LD_INT 1
22135: NEG
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: LD_INT 2
22147: NEG
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: LD_INT 0
22155: PUSH
22156: LD_INT 2
22158: NEG
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 1
22166: PUSH
22167: LD_INT 1
22169: NEG
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: LD_INT 0
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 2
22187: PUSH
22188: LD_INT 1
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 2
22197: PUSH
22198: LD_INT 2
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 0
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: LD_INT 1
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 2
22238: NEG
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 2
22249: NEG
22250: PUSH
22251: LD_INT 1
22253: NEG
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: PUSH
22259: LD_INT 2
22261: NEG
22262: PUSH
22263: LD_INT 2
22265: NEG
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 2
22273: PUSH
22274: LD_INT 3
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 1
22283: PUSH
22284: LD_INT 3
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 1
22293: NEG
22294: PUSH
22295: LD_INT 2
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 2
22304: NEG
22305: PUSH
22306: LD_INT 1
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22338: LD_ADDR_VAR 0 27
22342: PUSH
22343: LD_INT 0
22345: PUSH
22346: LD_INT 0
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: LD_INT 1
22358: NEG
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: LD_INT 0
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: LD_INT 1
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 0
22386: PUSH
22387: LD_INT 1
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: NEG
22397: PUSH
22398: LD_INT 0
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: LD_INT 1
22411: NEG
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: LD_INT 2
22423: NEG
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 0
22431: PUSH
22432: LD_INT 2
22434: NEG
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 1
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 2
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: PUSH
22461: LD_INT 2
22463: PUSH
22464: LD_INT 1
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 2
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 1
22483: PUSH
22484: LD_INT 2
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 0
22493: PUSH
22494: LD_INT 2
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 1
22503: NEG
22504: PUSH
22505: LD_INT 1
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PUSH
22512: LD_INT 2
22514: NEG
22515: PUSH
22516: LD_INT 0
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 2
22525: NEG
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 2
22537: NEG
22538: PUSH
22539: LD_INT 2
22541: NEG
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: LD_INT 2
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 2
22560: NEG
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 3
22571: NEG
22572: PUSH
22573: LD_INT 1
22575: NEG
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 3
22583: NEG
22584: PUSH
22585: LD_INT 2
22587: NEG
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22618: LD_ADDR_VAR 0 28
22622: PUSH
22623: LD_INT 0
22625: PUSH
22626: LD_INT 0
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: LD_INT 1
22638: NEG
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 1
22646: PUSH
22647: LD_INT 0
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 1
22656: PUSH
22657: LD_INT 1
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 0
22666: PUSH
22667: LD_INT 1
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 1
22676: NEG
22677: PUSH
22678: LD_INT 0
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 1
22687: NEG
22688: PUSH
22689: LD_INT 1
22691: NEG
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 1
22699: NEG
22700: PUSH
22701: LD_INT 2
22703: NEG
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 0
22711: PUSH
22712: LD_INT 2
22714: NEG
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 1
22722: PUSH
22723: LD_INT 1
22725: NEG
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 0
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 2
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: LD_INT 2
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 1
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 0
22773: PUSH
22774: LD_INT 2
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: NEG
22784: PUSH
22785: LD_INT 1
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 2
22794: NEG
22795: PUSH
22796: LD_INT 0
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 2
22805: NEG
22806: PUSH
22807: LD_INT 1
22809: NEG
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PUSH
22815: LD_INT 2
22817: NEG
22818: PUSH
22819: LD_INT 2
22821: NEG
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: NEG
22830: PUSH
22831: LD_INT 3
22833: NEG
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 1
22841: NEG
22842: PUSH
22843: LD_INT 3
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: LD_INT 3
22853: NEG
22854: PUSH
22855: LD_INT 1
22857: NEG
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 3
22865: NEG
22866: PUSH
22867: LD_INT 2
22869: NEG
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22900: LD_ADDR_VAR 0 29
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: LD_INT 1
22920: NEG
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 1
22928: PUSH
22929: LD_INT 0
22931: PUSH
22932: EMPTY
22933: LIST
22934: LIST
22935: PUSH
22936: LD_INT 1
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: LD_INT 1
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 1
22958: NEG
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 1
22969: NEG
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 1
22981: NEG
22982: PUSH
22983: LD_INT 2
22985: NEG
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 0
22993: PUSH
22994: LD_INT 2
22996: NEG
22997: PUSH
22998: EMPTY
22999: LIST
23000: LIST
23001: PUSH
23002: LD_INT 1
23004: PUSH
23005: LD_INT 1
23007: NEG
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: PUSH
23013: LD_INT 2
23015: PUSH
23016: LD_INT 0
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: LD_INT 1
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: LD_INT 2
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 0
23045: PUSH
23046: LD_INT 2
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: NEG
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 2
23066: NEG
23067: PUSH
23068: LD_INT 1
23070: NEG
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 2
23078: NEG
23079: PUSH
23080: LD_INT 2
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 2
23090: NEG
23091: PUSH
23092: LD_INT 3
23094: NEG
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 2
23102: PUSH
23103: LD_INT 1
23105: NEG
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 3
23113: PUSH
23114: LD_INT 1
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: LD_INT 3
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: NEG
23134: PUSH
23135: LD_INT 2
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 3
23144: NEG
23145: PUSH
23146: LD_INT 2
23148: NEG
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23179: LD_ADDR_VAR 0 30
23183: PUSH
23184: LD_INT 0
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 0
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 1
23207: PUSH
23208: LD_INT 0
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 0
23227: PUSH
23228: LD_INT 1
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: NEG
23238: PUSH
23239: LD_INT 0
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: LD_INT 1
23248: NEG
23249: PUSH
23250: LD_INT 1
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 1
23260: NEG
23261: PUSH
23262: LD_INT 2
23264: NEG
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PUSH
23270: LD_INT 0
23272: PUSH
23273: LD_INT 2
23275: NEG
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 2
23294: PUSH
23295: LD_INT 0
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 2
23304: PUSH
23305: LD_INT 1
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 2
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 1
23324: PUSH
23325: LD_INT 2
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 1
23334: NEG
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 2
23345: NEG
23346: PUSH
23347: LD_INT 0
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 2
23356: NEG
23357: PUSH
23358: LD_INT 1
23360: NEG
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 1
23368: NEG
23369: PUSH
23370: LD_INT 3
23372: NEG
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: LD_INT 2
23383: NEG
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 3
23391: PUSH
23392: LD_INT 2
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: LD_INT 3
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 2
23411: NEG
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 3
23422: NEG
23423: PUSH
23424: LD_INT 1
23426: NEG
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23457: LD_ADDR_VAR 0 31
23461: PUSH
23462: LD_INT 0
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: LD_INT 1
23477: NEG
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: PUSH
23483: LD_INT 1
23485: PUSH
23486: LD_INT 0
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: LD_INT 1
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 1
23515: NEG
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 1
23526: NEG
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 1
23538: NEG
23539: PUSH
23540: LD_INT 2
23542: NEG
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 1
23550: PUSH
23551: LD_INT 1
23553: NEG
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: LD_INT 0
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: LD_INT 1
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 2
23581: PUSH
23582: LD_INT 2
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: LD_INT 2
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 0
23601: PUSH
23602: LD_INT 2
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 1
23611: NEG
23612: PUSH
23613: LD_INT 1
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 2
23622: NEG
23623: PUSH
23624: LD_INT 1
23626: NEG
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 2
23634: NEG
23635: PUSH
23636: LD_INT 2
23638: NEG
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 2
23646: NEG
23647: PUSH
23648: LD_INT 3
23650: NEG
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 2
23658: PUSH
23659: LD_INT 1
23661: NEG
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 3
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: PUSH
23680: LD_INT 3
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 1
23689: NEG
23690: PUSH
23691: LD_INT 2
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 3
23700: NEG
23701: PUSH
23702: LD_INT 2
23704: NEG
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23735: LD_ADDR_VAR 0 32
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 1
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 0
23783: PUSH
23784: LD_INT 1
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: NEG
23794: PUSH
23795: LD_INT 0
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: LD_INT 1
23808: NEG
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 1
23816: NEG
23817: PUSH
23818: LD_INT 2
23820: NEG
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: LD_INT 2
23831: NEG
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 2
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 2
23860: PUSH
23861: LD_INT 2
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 1
23870: PUSH
23871: LD_INT 2
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 1
23890: NEG
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 2
23901: NEG
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 2
23912: NEG
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 1
23924: NEG
23925: PUSH
23926: LD_INT 3
23928: NEG
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 1
23936: PUSH
23937: LD_INT 2
23939: NEG
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: PUSH
23945: LD_INT 3
23947: PUSH
23948: LD_INT 2
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 2
23957: PUSH
23958: LD_INT 3
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 2
23967: NEG
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 3
23978: NEG
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24013: LD_ADDR_VAR 0 33
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: LD_INT 1
24033: NEG
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 1
24071: NEG
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: NEG
24083: PUSH
24084: LD_INT 1
24086: NEG
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 1
24094: NEG
24095: PUSH
24096: LD_INT 2
24098: NEG
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 1
24106: PUSH
24107: LD_INT 1
24109: NEG
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 2
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 2
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: LD_INT 2
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 0
24147: PUSH
24148: LD_INT 2
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: NEG
24158: PUSH
24159: LD_INT 1
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 2
24168: NEG
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 2
24179: NEG
24180: PUSH
24181: LD_INT 1
24183: NEG
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 2
24191: NEG
24192: PUSH
24193: LD_INT 2
24195: NEG
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: PUSH
24201: LD_INT 2
24203: NEG
24204: PUSH
24205: LD_INT 3
24207: NEG
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 2
24215: PUSH
24216: LD_INT 1
24218: NEG
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 3
24226: PUSH
24227: LD_INT 1
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 1
24236: PUSH
24237: LD_INT 3
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: LD_INT 2
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 3
24257: NEG
24258: PUSH
24259: LD_INT 2
24261: NEG
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24292: LD_ADDR_VAR 0 34
24296: PUSH
24297: LD_INT 0
24299: PUSH
24300: LD_INT 0
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 0
24309: PUSH
24310: LD_INT 1
24312: NEG
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: LD_INT 0
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 1
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: LD_INT 1
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 1
24350: NEG
24351: PUSH
24352: LD_INT 0
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: LD_INT 1
24365: NEG
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 1
24373: NEG
24374: PUSH
24375: LD_INT 2
24377: NEG
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 0
24385: PUSH
24386: LD_INT 2
24388: NEG
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 1
24396: PUSH
24397: LD_INT 1
24399: NEG
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 2
24407: PUSH
24408: LD_INT 1
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: PUSH
24415: LD_INT 2
24417: PUSH
24418: LD_INT 2
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 1
24427: PUSH
24428: LD_INT 2
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 1
24437: NEG
24438: PUSH
24439: LD_INT 1
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 2
24448: NEG
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 2
24459: NEG
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 2
24471: NEG
24472: PUSH
24473: LD_INT 2
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: PUSH
24485: LD_INT 3
24487: NEG
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: LD_INT 2
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 3
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: LD_INT 3
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 2
24526: NEG
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: LD_INT 3
24537: NEG
24538: PUSH
24539: LD_INT 1
24541: NEG
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24572: LD_ADDR_VAR 0 35
24576: PUSH
24577: LD_INT 0
24579: PUSH
24580: LD_INT 0
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 0
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 1
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 0
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 1
24630: NEG
24631: PUSH
24632: LD_INT 0
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 1
24641: NEG
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 2
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 2
24663: NEG
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24684: LD_ADDR_VAR 0 36
24688: PUSH
24689: LD_INT 0
24691: PUSH
24692: LD_INT 0
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PUSH
24699: LD_INT 0
24701: PUSH
24702: LD_INT 1
24704: NEG
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: LD_INT 0
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 1
24722: PUSH
24723: LD_INT 1
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 0
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 1
24742: NEG
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: LD_INT 1
24757: NEG
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: NEG
24766: PUSH
24767: LD_INT 2
24769: NEG
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 1
24777: PUSH
24778: LD_INT 2
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24796: LD_ADDR_VAR 0 37
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: LD_INT 0
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: LD_INT 1
24816: NEG
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: LD_INT 0
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 0
24844: PUSH
24845: LD_INT 1
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 1
24854: NEG
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 1
24865: NEG
24866: PUSH
24867: LD_INT 1
24869: NEG
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: LD_INT 1
24880: NEG
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 1
24888: NEG
24889: PUSH
24890: LD_INT 1
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24908: LD_ADDR_VAR 0 38
24912: PUSH
24913: LD_INT 0
24915: PUSH
24916: LD_INT 0
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: LD_INT 1
24928: NEG
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: LD_INT 0
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PUSH
24944: LD_INT 1
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: LD_INT 1
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: LD_INT 0
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 1
24977: NEG
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: LD_INT 1
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 2
24999: NEG
25000: PUSH
25001: LD_INT 1
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25020: LD_ADDR_VAR 0 39
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: LD_INT 1
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: LD_INT 2
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: LD_INT 2
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25132: LD_ADDR_VAR 0 40
25136: PUSH
25137: LD_INT 0
25139: PUSH
25140: LD_INT 0
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: LD_INT 1
25152: NEG
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: LD_INT 0
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 0
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 1
25190: NEG
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 1
25201: NEG
25202: PUSH
25203: LD_INT 1
25205: NEG
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: LD_INT 1
25216: NEG
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: LD_INT 1
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25244: LD_ADDR_VAR 0 41
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 0
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 1
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 1
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 0
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: NEG
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: EMPTY
25320: LIST
25321: LIST
25322: PUSH
25323: LD_INT 1
25325: NEG
25326: PUSH
25327: LD_INT 2
25329: NEG
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 2
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 2
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 2
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 1
25388: NEG
25389: PUSH
25390: LD_INT 1
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: LD_INT 0
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 2
25422: NEG
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: LD_INT 3
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 2
25446: PUSH
25447: LD_INT 1
25449: NEG
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 3
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 3
25467: PUSH
25468: LD_INT 1
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 3
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 3
25487: PUSH
25488: LD_INT 3
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 2
25497: PUSH
25498: LD_INT 3
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 2
25507: NEG
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 3
25518: NEG
25519: PUSH
25520: LD_INT 0
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 3
25529: NEG
25530: PUSH
25531: LD_INT 1
25533: NEG
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PUSH
25539: LD_INT 3
25541: NEG
25542: PUSH
25543: LD_INT 2
25545: NEG
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 3
25553: NEG
25554: PUSH
25555: LD_INT 3
25557: NEG
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25594: LD_ADDR_VAR 0 42
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 0
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: LD_INT 1
25667: NEG
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 1
25675: NEG
25676: PUSH
25677: LD_INT 2
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 0
25687: PUSH
25688: LD_INT 2
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 2
25709: PUSH
25710: LD_INT 1
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 2
25719: PUSH
25720: LD_INT 2
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 1
25729: PUSH
25730: LD_INT 2
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 0
25739: PUSH
25740: LD_INT 2
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: LD_INT 1
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 2
25760: NEG
25761: PUSH
25762: LD_INT 1
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 2
25772: NEG
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 2
25784: NEG
25785: PUSH
25786: LD_INT 3
25788: NEG
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: LD_INT 3
25800: NEG
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: LD_INT 3
25811: NEG
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: PUSH
25820: LD_INT 2
25822: NEG
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 3
25830: PUSH
25831: LD_INT 2
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 3
25840: PUSH
25841: LD_INT 3
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 2
25850: PUSH
25851: LD_INT 3
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: LD_INT 3
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 0
25870: PUSH
25871: LD_INT 3
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 1
25880: NEG
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 3
25891: NEG
25892: PUSH
25893: LD_INT 2
25895: NEG
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 3
25903: NEG
25904: PUSH
25905: LD_INT 3
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25944: LD_ADDR_VAR 0 43
25948: PUSH
25949: LD_INT 0
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 0
25961: PUSH
25962: LD_INT 1
25964: NEG
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: LD_INT 1
25972: PUSH
25973: LD_INT 0
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 0
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: NEG
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 1
26013: NEG
26014: PUSH
26015: LD_INT 1
26017: NEG
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 1
26025: NEG
26026: PUSH
26027: LD_INT 2
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: LD_INT 2
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: LD_INT 1
26051: NEG
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 2
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 2
26069: PUSH
26070: LD_INT 1
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 0
26089: PUSH
26090: LD_INT 2
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 2
26110: NEG
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 2
26121: NEG
26122: PUSH
26123: LD_INT 1
26125: NEG
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: PUSH
26131: LD_INT 1
26133: NEG
26134: PUSH
26135: LD_INT 3
26137: NEG
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 3
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 2
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 3
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 3
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: LD_INT 3
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: LD_INT 3
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: NEG
26219: PUSH
26220: LD_INT 2
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 2
26229: NEG
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 3
26240: NEG
26241: PUSH
26242: LD_INT 0
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 3
26251: NEG
26252: PUSH
26253: LD_INT 1
26255: NEG
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26292: LD_ADDR_VAR 0 44
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: LD_INT 1
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 0
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 1
26361: NEG
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: LD_INT 2
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 1
26385: PUSH
26386: LD_INT 1
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: LD_INT 0
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: LD_INT 2
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: LD_INT 2
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: LD_INT 2
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 1
26436: NEG
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 2
26447: NEG
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 2
26458: NEG
26459: PUSH
26460: LD_INT 1
26462: NEG
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 2
26470: NEG
26471: PUSH
26472: LD_INT 2
26474: NEG
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: LD_INT 3
26486: NEG
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 2
26494: PUSH
26495: LD_INT 1
26497: NEG
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 3
26505: PUSH
26506: LD_INT 0
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 3
26515: PUSH
26516: LD_INT 1
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 3
26525: PUSH
26526: LD_INT 2
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 3
26535: PUSH
26536: LD_INT 3
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: LD_INT 3
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 2
26555: NEG
26556: PUSH
26557: LD_INT 1
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 3
26566: NEG
26567: PUSH
26568: LD_INT 0
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 3
26577: NEG
26578: PUSH
26579: LD_INT 1
26581: NEG
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 3
26589: NEG
26590: PUSH
26591: LD_INT 2
26593: NEG
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 3
26601: NEG
26602: PUSH
26603: LD_INT 3
26605: NEG
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26642: LD_ADDR_VAR 0 45
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: LD_INT 0
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: LD_INT 1
26662: NEG
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: LD_INT 0
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: LD_INT 1
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: NEG
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 1
26711: NEG
26712: PUSH
26713: LD_INT 1
26715: NEG
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 1
26723: NEG
26724: PUSH
26725: LD_INT 2
26727: NEG
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: LD_INT 2
26738: NEG
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 2
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: PUSH
26768: LD_INT 2
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: LD_INT 2
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 2
26808: NEG
26809: PUSH
26810: LD_INT 1
26812: NEG
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 2
26820: NEG
26821: PUSH
26822: LD_INT 2
26824: NEG
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 2
26832: NEG
26833: PUSH
26834: LD_INT 3
26836: NEG
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: LD_INT 3
26848: NEG
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: PUSH
26854: LD_INT 0
26856: PUSH
26857: LD_INT 3
26859: NEG
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: LD_INT 2
26870: NEG
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 3
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 3
26888: PUSH
26889: LD_INT 3
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: LD_INT 3
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: LD_INT 3
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 1
26928: NEG
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 3
26939: NEG
26940: PUSH
26941: LD_INT 2
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 3
26951: NEG
26952: PUSH
26953: LD_INT 3
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26992: LD_ADDR_VAR 0 46
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: LD_INT 0
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: LD_INT 1
27012: NEG
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: LD_INT 1
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: NEG
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: LD_INT 2
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: LD_INT 2
27088: NEG
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 1
27096: PUSH
27097: LD_INT 1
27099: NEG
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 2
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 1
27127: PUSH
27128: LD_INT 2
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 0
27137: PUSH
27138: LD_INT 2
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: NEG
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 2
27158: NEG
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 2
27169: NEG
27170: PUSH
27171: LD_INT 1
27173: NEG
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: LD_INT 3
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: LD_INT 3
27196: NEG
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 1
27204: PUSH
27205: LD_INT 2
27207: NEG
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 2
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 3
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: EMPTY
27231: LIST
27232: LIST
27233: PUSH
27234: LD_INT 3
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: LD_INT 3
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 0
27256: PUSH
27257: LD_INT 3
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 1
27266: NEG
27267: PUSH
27268: LD_INT 2
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 2
27277: NEG
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 3
27288: NEG
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 3
27299: NEG
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27340: LD_ADDR_VAR 0 47
27344: PUSH
27345: LD_INT 0
27347: PUSH
27348: LD_INT 0
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: LD_INT 1
27360: NEG
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: LD_INT 0
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 1
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: NEG
27399: PUSH
27400: LD_INT 0
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: LD_INT 2
27425: NEG
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 0
27433: PUSH
27434: LD_INT 2
27436: NEG
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: PUSH
27445: LD_INT 1
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 2
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: NEG
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 2
27467: NEG
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27491: LD_ADDR_VAR 0 48
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: LD_INT 1
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: LD_INT 2
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: LD_INT 2
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 2
27616: PUSH
27617: LD_INT 1
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27638: LD_ADDR_VAR 0 49
27642: PUSH
27643: LD_INT 0
27645: PUSH
27646: LD_INT 0
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: LD_INT 1
27658: NEG
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 1
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: LD_INT 1
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 0
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 1
27696: NEG
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: NEG
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: LD_INT 1
27722: NEG
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 2
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 2
27740: PUSH
27741: LD_INT 1
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 2
27750: PUSH
27751: LD_INT 2
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 2
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27782: LD_ADDR_VAR 0 50
27786: PUSH
27787: LD_INT 0
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 0
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 1
27851: NEG
27852: PUSH
27853: LD_INT 1
27855: NEG
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: PUSH
27884: LD_INT 2
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 0
27893: PUSH
27894: LD_INT 2
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: NEG
27904: PUSH
27905: LD_INT 1
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27926: LD_ADDR_VAR 0 51
27930: PUSH
27931: LD_INT 0
27933: PUSH
27934: LD_INT 0
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: LD_INT 1
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: LD_INT 1
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 0
28017: PUSH
28018: LD_INT 2
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 2
28049: NEG
28050: PUSH
28051: LD_INT 1
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28073: LD_ADDR_VAR 0 52
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: LD_INT 0
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: NEG
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: LD_INT 2
28158: NEG
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: LD_INT 1
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 2
28177: NEG
28178: PUSH
28179: LD_INT 0
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 2
28188: NEG
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 2
28200: NEG
28201: PUSH
28202: LD_INT 2
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: LIST
28214: LIST
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28224: LD_ADDR_VAR 0 53
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 0
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: LD_INT 0
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: LD_INT 0
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: NEG
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: LD_INT 2
28309: NEG
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 0
28317: PUSH
28318: LD_INT 2
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: LD_INT 1
28331: NEG
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 2
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 2
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 2
28359: PUSH
28360: LD_INT 2
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: NEG
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 2
28400: NEG
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 2
28411: NEG
28412: PUSH
28413: LD_INT 1
28415: NEG
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 2
28423: NEG
28424: PUSH
28425: LD_INT 2
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28454: LD_ADDR_VAR 0 54
28458: PUSH
28459: LD_INT 0
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: LD_INT 1
28474: NEG
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 1
28482: PUSH
28483: LD_INT 0
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: LD_INT 1
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: LD_INT 1
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: LD_INT 2
28539: NEG
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 0
28547: PUSH
28548: LD_INT 2
28550: NEG
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: LD_INT 1
28561: NEG
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 2
28569: PUSH
28570: LD_INT 0
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 2
28579: PUSH
28580: LD_INT 1
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: LD_INT 2
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: LD_INT 2
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 0
28609: PUSH
28610: LD_INT 2
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: NEG
28620: PUSH
28621: LD_INT 1
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 2
28630: NEG
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 2
28641: NEG
28642: PUSH
28643: LD_INT 1
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 2
28653: NEG
28654: PUSH
28655: LD_INT 2
28657: NEG
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28684: LD_ADDR_VAR 0 55
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 0
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 1
28712: PUSH
28713: LD_INT 0
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: LD_INT 1
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 1
28742: NEG
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 1
28753: NEG
28754: PUSH
28755: LD_INT 1
28757: NEG
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: LD_INT 2
28769: NEG
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 0
28777: PUSH
28778: LD_INT 2
28780: NEG
28781: PUSH
28782: EMPTY
28783: LIST
28784: LIST
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: LD_INT 1
28791: NEG
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 2
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 2
28809: PUSH
28810: LD_INT 1
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 2
28819: PUSH
28820: LD_INT 2
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: LD_INT 2
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 0
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 1
28849: NEG
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 2
28860: NEG
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 2
28871: NEG
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 2
28883: NEG
28884: PUSH
28885: LD_INT 2
28887: NEG
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: LIST
28908: LIST
28909: LIST
28910: LIST
28911: LIST
28912: LIST
28913: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28914: LD_ADDR_VAR 0 56
28918: PUSH
28919: LD_INT 0
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: LD_INT 0
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: LD_INT 1
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 0
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: NEG
28973: PUSH
28974: LD_INT 0
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: LD_INT 1
28987: NEG
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 1
28995: NEG
28996: PUSH
28997: LD_INT 2
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: LD_INT 2
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 1
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 2
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 2
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 2
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: LD_INT 2
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: LD_INT 1
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 2
29090: NEG
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 2
29101: NEG
29102: PUSH
29103: LD_INT 1
29105: NEG
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 2
29113: NEG
29114: PUSH
29115: LD_INT 2
29117: NEG
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: LIST
29143: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29144: LD_ADDR_VAR 0 57
29148: PUSH
29149: LD_INT 0
29151: PUSH
29152: LD_INT 0
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: LD_INT 1
29164: NEG
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 1
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: PUSH
29183: LD_INT 1
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: LD_INT 1
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: NEG
29214: PUSH
29215: LD_INT 1
29217: NEG
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: PUSH
29223: LD_INT 1
29225: NEG
29226: PUSH
29227: LD_INT 2
29229: NEG
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: LD_INT 2
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: LD_INT 1
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 2
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: LD_INT 2
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: LD_INT 2
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 1
29309: NEG
29310: PUSH
29311: LD_INT 1
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PUSH
29318: LD_INT 2
29320: NEG
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 2
29331: NEG
29332: PUSH
29333: LD_INT 1
29335: NEG
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 2
29343: NEG
29344: PUSH
29345: LD_INT 2
29347: NEG
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29374: LD_ADDR_VAR 0 58
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: LD_INT 1
29394: NEG
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: LD_INT 0
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 0
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 1
29432: NEG
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: LD_INT 1
29443: NEG
29444: PUSH
29445: LD_INT 1
29447: NEG
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: LD_INT 2
29459: NEG
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 0
29467: PUSH
29468: LD_INT 2
29470: NEG
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 2
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 2
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: LD_INT 2
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 0
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: PUSH
29548: LD_INT 2
29550: NEG
29551: PUSH
29552: LD_INT 0
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 2
29561: NEG
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 2
29573: NEG
29574: PUSH
29575: LD_INT 2
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29604: LD_ADDR_VAR 0 59
29608: PUSH
29609: LD_INT 0
29611: PUSH
29612: LD_INT 0
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 0
29621: PUSH
29622: LD_INT 1
29624: NEG
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: LD_INT 1
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 0
29652: PUSH
29653: LD_INT 1
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 1
29662: NEG
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: PUSH
29671: LD_INT 1
29673: NEG
29674: PUSH
29675: LD_INT 1
29677: NEG
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29692: LD_ADDR_VAR 0 60
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 0
29709: PUSH
29710: LD_INT 1
29712: NEG
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: LD_INT 0
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 1
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 0
29740: PUSH
29741: LD_INT 1
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: LD_INT 0
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: LD_INT 1
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29780: LD_ADDR_VAR 0 61
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 1
29800: NEG
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 0
29828: PUSH
29829: LD_INT 1
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 1
29838: NEG
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 1
29849: NEG
29850: PUSH
29851: LD_INT 1
29853: NEG
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29868: LD_ADDR_VAR 0 62
29872: PUSH
29873: LD_INT 0
29875: PUSH
29876: LD_INT 0
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: LD_INT 1
29888: NEG
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 1
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: LD_INT 0
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: LD_INT 1
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29956: LD_ADDR_VAR 0 63
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: LD_INT 1
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: LD_INT 1
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: NEG
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 1
30025: NEG
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30044: LD_ADDR_VAR 0 64
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 0
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 0
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PUSH
30111: LD_INT 1
30113: NEG
30114: PUSH
30115: LD_INT 1
30117: NEG
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: ST_TO_ADDR
// end ; 1 :
30132: GO 36029
30134: LD_INT 1
30136: DOUBLE
30137: EQUAL
30138: IFTRUE 30142
30140: GO 32765
30142: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30143: LD_ADDR_VAR 0 11
30147: PUSH
30148: LD_INT 1
30150: NEG
30151: PUSH
30152: LD_INT 3
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: LD_INT 3
30165: NEG
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: LD_INT 2
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30187: LD_ADDR_VAR 0 12
30191: PUSH
30192: LD_INT 2
30194: PUSH
30195: LD_INT 1
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 3
30205: PUSH
30206: LD_INT 0
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: LD_INT 1
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: LIST
30227: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30228: LD_ADDR_VAR 0 13
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 3
30245: PUSH
30246: LD_INT 3
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 2
30255: PUSH
30256: LD_INT 3
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: LIST
30267: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30268: LD_ADDR_VAR 0 14
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: LD_INT 3
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 0
30285: PUSH
30286: LD_INT 3
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: LD_INT 2
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30309: LD_ADDR_VAR 0 15
30313: PUSH
30314: LD_INT 2
30316: NEG
30317: PUSH
30318: LD_INT 1
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 3
30327: NEG
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 3
30338: NEG
30339: PUSH
30340: LD_INT 1
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30353: LD_ADDR_VAR 0 16
30357: PUSH
30358: LD_INT 2
30360: NEG
30361: PUSH
30362: LD_INT 3
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 3
30372: NEG
30373: PUSH
30374: LD_INT 2
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 3
30384: NEG
30385: PUSH
30386: LD_INT 3
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30399: LD_ADDR_VAR 0 17
30403: PUSH
30404: LD_INT 1
30406: NEG
30407: PUSH
30408: LD_INT 3
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 0
30418: PUSH
30419: LD_INT 3
30421: NEG
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: LD_INT 2
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30443: LD_ADDR_VAR 0 18
30447: PUSH
30448: LD_INT 2
30450: PUSH
30451: LD_INT 1
30453: NEG
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 3
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 3
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: LIST
30483: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30484: LD_ADDR_VAR 0 19
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 3
30501: PUSH
30502: LD_INT 3
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: LD_INT 3
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: LIST
30523: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30524: LD_ADDR_VAR 0 20
30528: PUSH
30529: LD_INT 1
30531: PUSH
30532: LD_INT 3
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: LD_INT 3
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 1
30551: NEG
30552: PUSH
30553: LD_INT 2
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30565: LD_ADDR_VAR 0 21
30569: PUSH
30570: LD_INT 2
30572: NEG
30573: PUSH
30574: LD_INT 1
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 3
30583: NEG
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 3
30594: NEG
30595: PUSH
30596: LD_INT 1
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: LIST
30608: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30609: LD_ADDR_VAR 0 22
30613: PUSH
30614: LD_INT 2
30616: NEG
30617: PUSH
30618: LD_INT 3
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 3
30628: NEG
30629: PUSH
30630: LD_INT 2
30632: NEG
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: LD_INT 3
30644: NEG
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30655: LD_ADDR_VAR 0 23
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: LD_INT 3
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: LD_INT 4
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: LD_INT 3
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30699: LD_ADDR_VAR 0 24
30703: PUSH
30704: LD_INT 3
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 3
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 4
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30740: LD_ADDR_VAR 0 25
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: LD_INT 3
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 4
30757: PUSH
30758: LD_INT 3
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 3
30767: PUSH
30768: LD_INT 4
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30780: LD_ADDR_VAR 0 26
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: LD_INT 3
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 1
30797: PUSH
30798: LD_INT 4
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 1
30807: NEG
30808: PUSH
30809: LD_INT 3
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30821: LD_ADDR_VAR 0 27
30825: PUSH
30826: LD_INT 3
30828: NEG
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: LD_INT 3
30839: NEG
30840: PUSH
30841: LD_INT 1
30843: PUSH
30844: EMPTY
30845: LIST
30846: LIST
30847: PUSH
30848: LD_INT 4
30850: NEG
30851: PUSH
30852: LD_INT 1
30854: NEG
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30865: LD_ADDR_VAR 0 28
30869: PUSH
30870: LD_INT 3
30872: NEG
30873: PUSH
30874: LD_INT 3
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 3
30884: NEG
30885: PUSH
30886: LD_INT 4
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 4
30896: NEG
30897: PUSH
30898: LD_INT 3
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30911: LD_ADDR_VAR 0 29
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: LD_INT 3
30922: NEG
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: LD_INT 3
30933: NEG
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: PUSH
30939: LD_INT 1
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 1
30952: NEG
30953: PUSH
30954: LD_INT 4
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: LD_INT 4
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 1
30986: NEG
30987: PUSH
30988: LD_INT 5
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: LD_INT 5
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: LD_INT 4
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: NEG
31021: PUSH
31022: LD_INT 6
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 0
31032: PUSH
31033: LD_INT 6
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 1
31043: PUSH
31044: LD_INT 5
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31066: LD_ADDR_VAR 0 30
31070: PUSH
31071: LD_INT 2
31073: PUSH
31074: LD_INT 1
31076: NEG
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 3
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 3
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 3
31104: PUSH
31105: LD_INT 1
31107: NEG
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 4
31115: PUSH
31116: LD_INT 0
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 4
31125: PUSH
31126: LD_INT 1
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 4
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 5
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 5
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 5
31166: PUSH
31167: LD_INT 1
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 6
31177: PUSH
31178: LD_INT 0
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 6
31187: PUSH
31188: LD_INT 1
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31209: LD_ADDR_VAR 0 31
31213: PUSH
31214: LD_INT 3
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 3
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: LD_INT 3
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 4
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 4
31256: PUSH
31257: LD_INT 4
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 3
31266: PUSH
31267: LD_INT 4
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 5
31276: PUSH
31277: LD_INT 4
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 5
31286: PUSH
31287: LD_INT 5
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 4
31296: PUSH
31297: LD_INT 5
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 6
31306: PUSH
31307: LD_INT 5
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 6
31316: PUSH
31317: LD_INT 6
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 5
31326: PUSH
31327: LD_INT 6
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31348: LD_ADDR_VAR 0 32
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: LD_INT 3
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: PUSH
31363: LD_INT 0
31365: PUSH
31366: LD_INT 3
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 1
31375: NEG
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: PUSH
31387: LD_INT 4
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: LD_INT 4
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 1
31406: NEG
31407: PUSH
31408: LD_INT 3
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 5
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: LD_INT 5
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: NEG
31438: PUSH
31439: LD_INT 4
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 6
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: LD_INT 6
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: LD_INT 5
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31491: LD_ADDR_VAR 0 33
31495: PUSH
31496: LD_INT 2
31498: NEG
31499: PUSH
31500: LD_INT 1
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 3
31509: NEG
31510: PUSH
31511: LD_INT 0
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 3
31520: NEG
31521: PUSH
31522: LD_INT 1
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 3
31532: NEG
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 4
31543: NEG
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 4
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 4
31566: NEG
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 5
31577: NEG
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 5
31588: NEG
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 5
31600: NEG
31601: PUSH
31602: LD_INT 1
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 6
31611: NEG
31612: PUSH
31613: LD_INT 0
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 6
31622: NEG
31623: PUSH
31624: LD_INT 1
31626: NEG
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31646: LD_ADDR_VAR 0 34
31650: PUSH
31651: LD_INT 2
31653: NEG
31654: PUSH
31655: LD_INT 3
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 3
31665: NEG
31666: PUSH
31667: LD_INT 2
31669: NEG
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 3
31677: NEG
31678: PUSH
31679: LD_INT 3
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 3
31689: NEG
31690: PUSH
31691: LD_INT 4
31693: NEG
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 4
31701: NEG
31702: PUSH
31703: LD_INT 3
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 4
31713: NEG
31714: PUSH
31715: LD_INT 4
31717: NEG
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: PUSH
31723: LD_INT 4
31725: NEG
31726: PUSH
31727: LD_INT 5
31729: NEG
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 5
31737: NEG
31738: PUSH
31739: LD_INT 4
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 5
31749: NEG
31750: PUSH
31751: LD_INT 5
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 5
31761: NEG
31762: PUSH
31763: LD_INT 6
31765: NEG
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 6
31773: NEG
31774: PUSH
31775: LD_INT 5
31777: NEG
31778: PUSH
31779: EMPTY
31780: LIST
31781: LIST
31782: PUSH
31783: LD_INT 6
31785: NEG
31786: PUSH
31787: LD_INT 6
31789: NEG
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31809: LD_ADDR_VAR 0 41
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: LD_INT 2
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 1
31827: NEG
31828: PUSH
31829: LD_INT 3
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 2
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: LIST
31852: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31853: LD_ADDR_VAR 0 42
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: LIST
31893: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31894: LD_ADDR_VAR 0 43
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: LD_INT 2
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: LD_INT 3
31911: PUSH
31912: LD_INT 2
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: LD_INT 3
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31934: LD_ADDR_VAR 0 44
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: LD_INT 2
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: PUSH
31952: LD_INT 3
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: LD_INT 2
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: LIST
31974: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31975: LD_ADDR_VAR 0 45
31979: PUSH
31980: LD_INT 2
31982: NEG
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 2
31993: NEG
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 3
32004: NEG
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: LIST
32018: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32019: LD_ADDR_VAR 0 46
32023: PUSH
32024: LD_INT 2
32026: NEG
32027: PUSH
32028: LD_INT 2
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 2
32038: NEG
32039: PUSH
32040: LD_INT 3
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: LD_INT 3
32050: NEG
32051: PUSH
32052: LD_INT 2
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: LIST
32064: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32065: LD_ADDR_VAR 0 47
32069: PUSH
32070: LD_INT 2
32072: NEG
32073: PUSH
32074: LD_INT 3
32076: NEG
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: LD_INT 3
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32098: LD_ADDR_VAR 0 48
32102: PUSH
32103: LD_INT 1
32105: PUSH
32106: LD_INT 2
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: LD_INT 1
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32129: LD_ADDR_VAR 0 49
32133: PUSH
32134: LD_INT 3
32136: PUSH
32137: LD_INT 1
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 3
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32158: LD_ADDR_VAR 0 50
32162: PUSH
32163: LD_INT 2
32165: PUSH
32166: LD_INT 3
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: LD_INT 3
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32187: LD_ADDR_VAR 0 51
32191: PUSH
32192: LD_INT 1
32194: NEG
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 2
32205: NEG
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32218: LD_ADDR_VAR 0 52
32222: PUSH
32223: LD_INT 3
32225: NEG
32226: PUSH
32227: LD_INT 1
32229: NEG
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 3
32237: NEG
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32251: LD_ADDR_VAR 0 53
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: LD_INT 3
32262: NEG
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 0
32270: PUSH
32271: LD_INT 3
32273: NEG
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 1
32281: PUSH
32282: LD_INT 2
32284: NEG
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: LIST
32294: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32295: LD_ADDR_VAR 0 54
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 3
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 3
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: LIST
32335: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32336: LD_ADDR_VAR 0 55
32340: PUSH
32341: LD_INT 3
32343: PUSH
32344: LD_INT 2
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: LD_INT 3
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: LD_INT 3
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: LIST
32375: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32376: LD_ADDR_VAR 0 56
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: LD_INT 3
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: LD_INT 3
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: LD_INT 2
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: LIST
32416: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32417: LD_ADDR_VAR 0 57
32421: PUSH
32422: LD_INT 2
32424: NEG
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 3
32435: NEG
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 3
32446: NEG
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32461: LD_ADDR_VAR 0 58
32465: PUSH
32466: LD_INT 2
32468: NEG
32469: PUSH
32470: LD_INT 3
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 3
32480: NEG
32481: PUSH
32482: LD_INT 2
32484: NEG
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 3
32492: NEG
32493: PUSH
32494: LD_INT 3
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: LIST
32506: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32507: LD_ADDR_VAR 0 59
32511: PUSH
32512: LD_INT 1
32514: NEG
32515: PUSH
32516: LD_INT 2
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 0
32526: PUSH
32527: LD_INT 2
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 1
32537: PUSH
32538: LD_INT 1
32540: NEG
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: LIST
32550: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32551: LD_ADDR_VAR 0 60
32555: PUSH
32556: LD_INT 1
32558: PUSH
32559: LD_INT 1
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: LD_INT 1
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: LIST
32591: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32592: LD_ADDR_VAR 0 61
32596: PUSH
32597: LD_INT 2
32599: PUSH
32600: LD_INT 1
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: LD_INT 2
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32632: LD_ADDR_VAR 0 62
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: LD_INT 2
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 0
32649: PUSH
32650: LD_INT 2
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: LIST
32672: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32673: LD_ADDR_VAR 0 63
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 2
32702: NEG
32703: PUSH
32704: LD_INT 1
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: LIST
32716: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32717: LD_ADDR_VAR 0 64
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 2
32728: NEG
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 2
32736: NEG
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 2
32748: NEG
32749: PUSH
32750: LD_INT 2
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: LIST
32762: ST_TO_ADDR
// end ; 2 :
32763: GO 36029
32765: LD_INT 2
32767: DOUBLE
32768: EQUAL
32769: IFTRUE 32773
32771: GO 36028
32773: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32774: LD_ADDR_VAR 0 29
32778: PUSH
32779: LD_INT 4
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 4
32791: PUSH
32792: LD_INT 1
32794: NEG
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 5
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 5
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 4
32822: PUSH
32823: LD_INT 1
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 3
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 3
32842: PUSH
32843: LD_INT 1
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 3
32853: PUSH
32854: LD_INT 2
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 5
32864: PUSH
32865: LD_INT 2
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 3
32874: PUSH
32875: LD_INT 3
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 3
32884: PUSH
32885: LD_INT 2
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 4
32894: PUSH
32895: LD_INT 3
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 4
32904: PUSH
32905: LD_INT 4
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 3
32914: PUSH
32915: LD_INT 4
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: LD_INT 3
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 2
32934: PUSH
32935: LD_INT 2
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 4
32944: PUSH
32945: LD_INT 2
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: LD_INT 4
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 0
32964: PUSH
32965: LD_INT 4
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: LD_INT 3
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: LD_INT 4
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 1
32994: PUSH
32995: LD_INT 5
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: LD_INT 5
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: NEG
33015: PUSH
33016: LD_INT 4
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: LD_INT 3
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 2
33036: PUSH
33037: LD_INT 5
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 2
33046: NEG
33047: PUSH
33048: LD_INT 3
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 3
33057: NEG
33058: PUSH
33059: LD_INT 0
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 3
33068: NEG
33069: PUSH
33070: LD_INT 1
33072: NEG
33073: PUSH
33074: EMPTY
33075: LIST
33076: LIST
33077: PUSH
33078: LD_INT 2
33080: NEG
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 2
33091: NEG
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 3
33102: NEG
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 4
33113: NEG
33114: PUSH
33115: LD_INT 0
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 4
33124: NEG
33125: PUSH
33126: LD_INT 1
33128: NEG
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 4
33136: NEG
33137: PUSH
33138: LD_INT 2
33140: NEG
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 2
33148: NEG
33149: PUSH
33150: LD_INT 2
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 4
33159: NEG
33160: PUSH
33161: LD_INT 4
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 4
33171: NEG
33172: PUSH
33173: LD_INT 5
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 3
33183: NEG
33184: PUSH
33185: LD_INT 4
33187: NEG
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 3
33195: NEG
33196: PUSH
33197: LD_INT 3
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 4
33207: NEG
33208: PUSH
33209: LD_INT 3
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 5
33219: NEG
33220: PUSH
33221: LD_INT 4
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 5
33231: NEG
33232: PUSH
33233: LD_INT 5
33235: NEG
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 3
33243: NEG
33244: PUSH
33245: LD_INT 5
33247: NEG
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 5
33255: NEG
33256: PUSH
33257: LD_INT 3
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33312: LD_ADDR_VAR 0 30
33316: PUSH
33317: LD_INT 4
33319: PUSH
33320: LD_INT 4
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 4
33329: PUSH
33330: LD_INT 3
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 5
33339: PUSH
33340: LD_INT 4
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 5
33349: PUSH
33350: LD_INT 5
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 4
33359: PUSH
33360: LD_INT 5
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 3
33369: PUSH
33370: LD_INT 4
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 3
33379: PUSH
33380: LD_INT 3
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 5
33389: PUSH
33390: LD_INT 3
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: LD_INT 5
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: LD_INT 3
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: LD_INT 2
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: LD_INT 3
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: LD_INT 4
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: LD_INT 4
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: NEG
33460: PUSH
33461: LD_INT 3
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: NEG
33471: PUSH
33472: LD_INT 2
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 2
33481: PUSH
33482: LD_INT 4
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 2
33491: NEG
33492: PUSH
33493: LD_INT 2
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 4
33502: NEG
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 4
33513: NEG
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 3
33525: NEG
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 3
33536: NEG
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 4
33547: NEG
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 5
33558: NEG
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 5
33569: NEG
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 5
33581: NEG
33582: PUSH
33583: LD_INT 2
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 3
33593: NEG
33594: PUSH
33595: LD_INT 2
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 3
33604: NEG
33605: PUSH
33606: LD_INT 3
33608: NEG
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 3
33616: NEG
33617: PUSH
33618: LD_INT 4
33620: NEG
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 2
33628: NEG
33629: PUSH
33630: LD_INT 3
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 2
33640: NEG
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 3
33652: NEG
33653: PUSH
33654: LD_INT 2
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 4
33664: NEG
33665: PUSH
33666: LD_INT 3
33668: NEG
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 4
33676: NEG
33677: PUSH
33678: LD_INT 4
33680: NEG
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 2
33688: NEG
33689: PUSH
33690: LD_INT 4
33692: NEG
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 4
33700: NEG
33701: PUSH
33702: LD_INT 2
33704: NEG
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: LD_INT 4
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: LD_INT 5
33726: NEG
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: LD_INT 4
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 1
33745: PUSH
33746: LD_INT 3
33748: NEG
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: LD_INT 3
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: LD_INT 4
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: LD_INT 5
33783: NEG
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 2
33791: PUSH
33792: LD_INT 3
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 2
33802: NEG
33803: PUSH
33804: LD_INT 5
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33859: LD_ADDR_VAR 0 31
33863: PUSH
33864: LD_INT 0
33866: PUSH
33867: LD_INT 4
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: LD_INT 3
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 1
33886: PUSH
33887: LD_INT 4
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 1
33896: PUSH
33897: LD_INT 5
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 0
33906: PUSH
33907: LD_INT 5
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 1
33916: NEG
33917: PUSH
33918: LD_INT 4
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 1
33927: NEG
33928: PUSH
33929: LD_INT 3
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: PUSH
33939: LD_INT 5
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 2
33948: NEG
33949: PUSH
33950: LD_INT 3
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 3
33959: NEG
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 3
33970: NEG
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 2
33982: NEG
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 2
33993: NEG
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 3
34004: NEG
34005: PUSH
34006: LD_INT 1
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 4
34015: NEG
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 4
34026: NEG
34027: PUSH
34028: LD_INT 1
34030: NEG
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 4
34038: NEG
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 2
34050: NEG
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 4
34061: NEG
34062: PUSH
34063: LD_INT 4
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 4
34073: NEG
34074: PUSH
34075: LD_INT 5
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 3
34085: NEG
34086: PUSH
34087: LD_INT 4
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 3
34097: NEG
34098: PUSH
34099: LD_INT 3
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 4
34109: NEG
34110: PUSH
34111: LD_INT 3
34113: NEG
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: PUSH
34119: LD_INT 5
34121: NEG
34122: PUSH
34123: LD_INT 4
34125: NEG
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PUSH
34131: LD_INT 5
34133: NEG
34134: PUSH
34135: LD_INT 5
34137: NEG
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 3
34145: NEG
34146: PUSH
34147: LD_INT 5
34149: NEG
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 5
34157: NEG
34158: PUSH
34159: LD_INT 3
34161: NEG
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 0
34169: PUSH
34170: LD_INT 3
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 0
34180: PUSH
34181: LD_INT 4
34183: NEG
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 1
34191: PUSH
34192: LD_INT 3
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: LD_INT 2
34205: NEG
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: LD_INT 2
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 1
34224: NEG
34225: PUSH
34226: LD_INT 3
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: NEG
34237: PUSH
34238: LD_INT 4
34240: NEG
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 2
34248: PUSH
34249: LD_INT 2
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 2
34259: NEG
34260: PUSH
34261: LD_INT 4
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 4
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 4
34281: PUSH
34282: LD_INT 1
34284: NEG
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 5
34292: PUSH
34293: LD_INT 0
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 5
34302: PUSH
34303: LD_INT 1
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 4
34312: PUSH
34313: LD_INT 1
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 3
34322: PUSH
34323: LD_INT 0
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 3
34332: PUSH
34333: LD_INT 1
34335: NEG
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 3
34343: PUSH
34344: LD_INT 2
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 5
34354: PUSH
34355: LD_INT 2
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34409: LD_ADDR_VAR 0 32
34413: PUSH
34414: LD_INT 4
34416: NEG
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 4
34427: NEG
34428: PUSH
34429: LD_INT 1
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 3
34439: NEG
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 3
34450: NEG
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 4
34461: NEG
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 5
34472: NEG
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 5
34483: NEG
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: LD_INT 5
34495: NEG
34496: PUSH
34497: LD_INT 2
34499: NEG
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 3
34507: NEG
34508: PUSH
34509: LD_INT 2
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 3
34518: NEG
34519: PUSH
34520: LD_INT 3
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 3
34530: NEG
34531: PUSH
34532: LD_INT 4
34534: NEG
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: LD_INT 3
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: NEG
34555: PUSH
34556: LD_INT 2
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 3
34566: NEG
34567: PUSH
34568: LD_INT 2
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 4
34578: NEG
34579: PUSH
34580: LD_INT 3
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 4
34590: NEG
34591: PUSH
34592: LD_INT 4
34594: NEG
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 2
34602: NEG
34603: PUSH
34604: LD_INT 4
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 4
34614: NEG
34615: PUSH
34616: LD_INT 2
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: LD_INT 4
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: LD_INT 5
34640: NEG
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: LD_INT 4
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: LD_INT 3
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 0
34670: PUSH
34671: LD_INT 3
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 4
34685: NEG
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: LD_INT 5
34697: NEG
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 2
34705: PUSH
34706: LD_INT 3
34708: NEG
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 2
34716: NEG
34717: PUSH
34718: LD_INT 5
34720: NEG
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 3
34728: PUSH
34729: LD_INT 0
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 3
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 4
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 4
34759: PUSH
34760: LD_INT 1
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 3
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 2
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 2
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 2
34800: PUSH
34801: LD_INT 2
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 4
34811: PUSH
34812: LD_INT 2
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 4
34821: PUSH
34822: LD_INT 4
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 4
34831: PUSH
34832: LD_INT 3
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 5
34841: PUSH
34842: LD_INT 4
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 5
34851: PUSH
34852: LD_INT 5
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 4
34861: PUSH
34862: LD_INT 5
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: LD_INT 4
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: PUSH
34882: LD_INT 3
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 5
34891: PUSH
34892: LD_INT 3
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 3
34901: PUSH
34902: LD_INT 5
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34956: LD_ADDR_VAR 0 33
34960: PUSH
34961: LD_INT 4
34963: NEG
34964: PUSH
34965: LD_INT 4
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 4
34975: NEG
34976: PUSH
34977: LD_INT 5
34979: NEG
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 3
34987: NEG
34988: PUSH
34989: LD_INT 4
34991: NEG
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 3
34999: NEG
35000: PUSH
35001: LD_INT 3
35003: NEG
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 4
35011: NEG
35012: PUSH
35013: LD_INT 3
35015: NEG
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 5
35023: NEG
35024: PUSH
35025: LD_INT 4
35027: NEG
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 5
35035: NEG
35036: PUSH
35037: LD_INT 5
35039: NEG
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 3
35047: NEG
35048: PUSH
35049: LD_INT 5
35051: NEG
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 5
35059: NEG
35060: PUSH
35061: LD_INT 3
35063: NEG
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: LD_INT 3
35074: NEG
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 0
35082: PUSH
35083: LD_INT 4
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: LD_INT 3
35096: NEG
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: PUSH
35105: LD_INT 2
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 0
35115: PUSH
35116: LD_INT 2
35118: NEG
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 1
35126: NEG
35127: PUSH
35128: LD_INT 3
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 1
35138: NEG
35139: PUSH
35140: LD_INT 4
35142: NEG
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 2
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 2
35161: NEG
35162: PUSH
35163: LD_INT 4
35165: NEG
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 4
35173: PUSH
35174: LD_INT 0
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 4
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 5
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 5
35204: PUSH
35205: LD_INT 1
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 4
35214: PUSH
35215: LD_INT 1
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 3
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 3
35234: PUSH
35235: LD_INT 1
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 3
35245: PUSH
35246: LD_INT 2
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 5
35256: PUSH
35257: LD_INT 2
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 3
35266: PUSH
35267: LD_INT 3
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 3
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 4
35286: PUSH
35287: LD_INT 3
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 4
35296: PUSH
35297: LD_INT 4
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 3
35306: PUSH
35307: LD_INT 4
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 2
35316: PUSH
35317: LD_INT 3
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: LD_INT 2
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 4
35336: PUSH
35337: LD_INT 2
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: LD_INT 4
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: LD_INT 4
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: LD_INT 3
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: LD_INT 4
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: LD_INT 5
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: LD_INT 5
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: LD_INT 4
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: LD_INT 3
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: LD_INT 5
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: PUSH
35436: LD_INT 2
35438: NEG
35439: PUSH
35440: LD_INT 3
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35494: LD_ADDR_VAR 0 34
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: LD_INT 4
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: LD_INT 5
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: PUSH
35524: LD_INT 4
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: LD_INT 3
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 3
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: LD_INT 4
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: LD_INT 5
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 2
35580: PUSH
35581: LD_INT 3
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: NEG
35592: PUSH
35593: LD_INT 5
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 3
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 3
35613: PUSH
35614: LD_INT 1
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 4
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 4
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 3
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 2
35654: PUSH
35655: LD_INT 0
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 2
35664: PUSH
35665: LD_INT 1
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: LD_INT 2
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 4
35686: PUSH
35687: LD_INT 2
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 4
35696: PUSH
35697: LD_INT 4
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 4
35706: PUSH
35707: LD_INT 3
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 5
35716: PUSH
35717: LD_INT 4
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 5
35726: PUSH
35727: LD_INT 5
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 4
35736: PUSH
35737: LD_INT 5
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 3
35746: PUSH
35747: LD_INT 4
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 3
35756: PUSH
35757: LD_INT 3
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 5
35766: PUSH
35767: LD_INT 3
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 3
35776: PUSH
35777: LD_INT 5
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: LD_INT 3
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: LD_INT 2
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 1
35806: PUSH
35807: LD_INT 3
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: PUSH
35817: LD_INT 4
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: LD_INT 4
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: LD_INT 3
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 2
35858: PUSH
35859: LD_INT 4
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 2
35868: NEG
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 4
35879: NEG
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 4
35890: NEG
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 3
35902: NEG
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 3
35913: NEG
35914: PUSH
35915: LD_INT 1
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 4
35924: NEG
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 5
35935: NEG
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 5
35946: NEG
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 5
35958: NEG
35959: PUSH
35960: LD_INT 2
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 3
35970: NEG
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: ST_TO_ADDR
// end ; end ;
36026: GO 36029
36028: POP
// case btype of b_depot , b_warehouse :
36029: LD_VAR 0 1
36033: PUSH
36034: LD_INT 0
36036: DOUBLE
36037: EQUAL
36038: IFTRUE 36048
36040: LD_INT 1
36042: DOUBLE
36043: EQUAL
36044: IFTRUE 36048
36046: GO 36249
36048: POP
// case nation of nation_american :
36049: LD_VAR 0 5
36053: PUSH
36054: LD_INT 1
36056: DOUBLE
36057: EQUAL
36058: IFTRUE 36062
36060: GO 36118
36062: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36063: LD_ADDR_VAR 0 9
36067: PUSH
36068: LD_VAR 0 11
36072: PUSH
36073: LD_VAR 0 12
36077: PUSH
36078: LD_VAR 0 13
36082: PUSH
36083: LD_VAR 0 14
36087: PUSH
36088: LD_VAR 0 15
36092: PUSH
36093: LD_VAR 0 16
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: PUSH
36106: LD_VAR 0 4
36110: PUSH
36111: LD_INT 1
36113: PLUS
36114: ARRAY
36115: ST_TO_ADDR
36116: GO 36247
36118: LD_INT 2
36120: DOUBLE
36121: EQUAL
36122: IFTRUE 36126
36124: GO 36182
36126: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36127: LD_ADDR_VAR 0 9
36131: PUSH
36132: LD_VAR 0 17
36136: PUSH
36137: LD_VAR 0 18
36141: PUSH
36142: LD_VAR 0 19
36146: PUSH
36147: LD_VAR 0 20
36151: PUSH
36152: LD_VAR 0 21
36156: PUSH
36157: LD_VAR 0 22
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: PUSH
36170: LD_VAR 0 4
36174: PUSH
36175: LD_INT 1
36177: PLUS
36178: ARRAY
36179: ST_TO_ADDR
36180: GO 36247
36182: LD_INT 3
36184: DOUBLE
36185: EQUAL
36186: IFTRUE 36190
36188: GO 36246
36190: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36191: LD_ADDR_VAR 0 9
36195: PUSH
36196: LD_VAR 0 23
36200: PUSH
36201: LD_VAR 0 24
36205: PUSH
36206: LD_VAR 0 25
36210: PUSH
36211: LD_VAR 0 26
36215: PUSH
36216: LD_VAR 0 27
36220: PUSH
36221: LD_VAR 0 28
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: PUSH
36234: LD_VAR 0 4
36238: PUSH
36239: LD_INT 1
36241: PLUS
36242: ARRAY
36243: ST_TO_ADDR
36244: GO 36247
36246: POP
36247: GO 36802
36249: LD_INT 2
36251: DOUBLE
36252: EQUAL
36253: IFTRUE 36263
36255: LD_INT 3
36257: DOUBLE
36258: EQUAL
36259: IFTRUE 36263
36261: GO 36319
36263: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36264: LD_ADDR_VAR 0 9
36268: PUSH
36269: LD_VAR 0 29
36273: PUSH
36274: LD_VAR 0 30
36278: PUSH
36279: LD_VAR 0 31
36283: PUSH
36284: LD_VAR 0 32
36288: PUSH
36289: LD_VAR 0 33
36293: PUSH
36294: LD_VAR 0 34
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: PUSH
36307: LD_VAR 0 4
36311: PUSH
36312: LD_INT 1
36314: PLUS
36315: ARRAY
36316: ST_TO_ADDR
36317: GO 36802
36319: LD_INT 16
36321: DOUBLE
36322: EQUAL
36323: IFTRUE 36381
36325: LD_INT 17
36327: DOUBLE
36328: EQUAL
36329: IFTRUE 36381
36331: LD_INT 18
36333: DOUBLE
36334: EQUAL
36335: IFTRUE 36381
36337: LD_INT 19
36339: DOUBLE
36340: EQUAL
36341: IFTRUE 36381
36343: LD_INT 22
36345: DOUBLE
36346: EQUAL
36347: IFTRUE 36381
36349: LD_INT 20
36351: DOUBLE
36352: EQUAL
36353: IFTRUE 36381
36355: LD_INT 21
36357: DOUBLE
36358: EQUAL
36359: IFTRUE 36381
36361: LD_INT 23
36363: DOUBLE
36364: EQUAL
36365: IFTRUE 36381
36367: LD_INT 24
36369: DOUBLE
36370: EQUAL
36371: IFTRUE 36381
36373: LD_INT 25
36375: DOUBLE
36376: EQUAL
36377: IFTRUE 36381
36379: GO 36437
36381: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36382: LD_ADDR_VAR 0 9
36386: PUSH
36387: LD_VAR 0 35
36391: PUSH
36392: LD_VAR 0 36
36396: PUSH
36397: LD_VAR 0 37
36401: PUSH
36402: LD_VAR 0 38
36406: PUSH
36407: LD_VAR 0 39
36411: PUSH
36412: LD_VAR 0 40
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: PUSH
36425: LD_VAR 0 4
36429: PUSH
36430: LD_INT 1
36432: PLUS
36433: ARRAY
36434: ST_TO_ADDR
36435: GO 36802
36437: LD_INT 6
36439: DOUBLE
36440: EQUAL
36441: IFTRUE 36493
36443: LD_INT 7
36445: DOUBLE
36446: EQUAL
36447: IFTRUE 36493
36449: LD_INT 8
36451: DOUBLE
36452: EQUAL
36453: IFTRUE 36493
36455: LD_INT 13
36457: DOUBLE
36458: EQUAL
36459: IFTRUE 36493
36461: LD_INT 12
36463: DOUBLE
36464: EQUAL
36465: IFTRUE 36493
36467: LD_INT 15
36469: DOUBLE
36470: EQUAL
36471: IFTRUE 36493
36473: LD_INT 11
36475: DOUBLE
36476: EQUAL
36477: IFTRUE 36493
36479: LD_INT 14
36481: DOUBLE
36482: EQUAL
36483: IFTRUE 36493
36485: LD_INT 10
36487: DOUBLE
36488: EQUAL
36489: IFTRUE 36493
36491: GO 36549
36493: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36494: LD_ADDR_VAR 0 9
36498: PUSH
36499: LD_VAR 0 41
36503: PUSH
36504: LD_VAR 0 42
36508: PUSH
36509: LD_VAR 0 43
36513: PUSH
36514: LD_VAR 0 44
36518: PUSH
36519: LD_VAR 0 45
36523: PUSH
36524: LD_VAR 0 46
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: PUSH
36537: LD_VAR 0 4
36541: PUSH
36542: LD_INT 1
36544: PLUS
36545: ARRAY
36546: ST_TO_ADDR
36547: GO 36802
36549: LD_INT 36
36551: DOUBLE
36552: EQUAL
36553: IFTRUE 36557
36555: GO 36613
36557: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36558: LD_ADDR_VAR 0 9
36562: PUSH
36563: LD_VAR 0 47
36567: PUSH
36568: LD_VAR 0 48
36572: PUSH
36573: LD_VAR 0 49
36577: PUSH
36578: LD_VAR 0 50
36582: PUSH
36583: LD_VAR 0 51
36587: PUSH
36588: LD_VAR 0 52
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: PUSH
36601: LD_VAR 0 4
36605: PUSH
36606: LD_INT 1
36608: PLUS
36609: ARRAY
36610: ST_TO_ADDR
36611: GO 36802
36613: LD_INT 4
36615: DOUBLE
36616: EQUAL
36617: IFTRUE 36639
36619: LD_INT 5
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36639
36625: LD_INT 34
36627: DOUBLE
36628: EQUAL
36629: IFTRUE 36639
36631: LD_INT 37
36633: DOUBLE
36634: EQUAL
36635: IFTRUE 36639
36637: GO 36695
36639: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36640: LD_ADDR_VAR 0 9
36644: PUSH
36645: LD_VAR 0 53
36649: PUSH
36650: LD_VAR 0 54
36654: PUSH
36655: LD_VAR 0 55
36659: PUSH
36660: LD_VAR 0 56
36664: PUSH
36665: LD_VAR 0 57
36669: PUSH
36670: LD_VAR 0 58
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: PUSH
36683: LD_VAR 0 4
36687: PUSH
36688: LD_INT 1
36690: PLUS
36691: ARRAY
36692: ST_TO_ADDR
36693: GO 36802
36695: LD_INT 31
36697: DOUBLE
36698: EQUAL
36699: IFTRUE 36745
36701: LD_INT 32
36703: DOUBLE
36704: EQUAL
36705: IFTRUE 36745
36707: LD_INT 33
36709: DOUBLE
36710: EQUAL
36711: IFTRUE 36745
36713: LD_INT 27
36715: DOUBLE
36716: EQUAL
36717: IFTRUE 36745
36719: LD_INT 26
36721: DOUBLE
36722: EQUAL
36723: IFTRUE 36745
36725: LD_INT 28
36727: DOUBLE
36728: EQUAL
36729: IFTRUE 36745
36731: LD_INT 29
36733: DOUBLE
36734: EQUAL
36735: IFTRUE 36745
36737: LD_INT 30
36739: DOUBLE
36740: EQUAL
36741: IFTRUE 36745
36743: GO 36801
36745: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36746: LD_ADDR_VAR 0 9
36750: PUSH
36751: LD_VAR 0 59
36755: PUSH
36756: LD_VAR 0 60
36760: PUSH
36761: LD_VAR 0 61
36765: PUSH
36766: LD_VAR 0 62
36770: PUSH
36771: LD_VAR 0 63
36775: PUSH
36776: LD_VAR 0 64
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: PUSH
36789: LD_VAR 0 4
36793: PUSH
36794: LD_INT 1
36796: PLUS
36797: ARRAY
36798: ST_TO_ADDR
36799: GO 36802
36801: POP
// temp_list2 = [ ] ;
36802: LD_ADDR_VAR 0 10
36806: PUSH
36807: EMPTY
36808: ST_TO_ADDR
// for i in temp_list do
36809: LD_ADDR_VAR 0 8
36813: PUSH
36814: LD_VAR 0 9
36818: PUSH
36819: FOR_IN
36820: IFFALSE 36872
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36822: LD_ADDR_VAR 0 10
36826: PUSH
36827: LD_VAR 0 10
36831: PUSH
36832: LD_VAR 0 8
36836: PUSH
36837: LD_INT 1
36839: ARRAY
36840: PUSH
36841: LD_VAR 0 2
36845: PLUS
36846: PUSH
36847: LD_VAR 0 8
36851: PUSH
36852: LD_INT 2
36854: ARRAY
36855: PUSH
36856: LD_VAR 0 3
36860: PLUS
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: EMPTY
36867: LIST
36868: ADD
36869: ST_TO_ADDR
36870: GO 36819
36872: POP
36873: POP
// result = temp_list2 ;
36874: LD_ADDR_VAR 0 7
36878: PUSH
36879: LD_VAR 0 10
36883: ST_TO_ADDR
// end ;
36884: LD_VAR 0 7
36888: RET
// export function EnemyInRange ( unit , dist ) ; begin
36889: LD_INT 0
36891: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36892: LD_ADDR_VAR 0 3
36896: PUSH
36897: LD_VAR 0 1
36901: PPUSH
36902: CALL_OW 255
36906: PPUSH
36907: LD_VAR 0 1
36911: PPUSH
36912: CALL_OW 250
36916: PPUSH
36917: LD_VAR 0 1
36921: PPUSH
36922: CALL_OW 251
36926: PPUSH
36927: LD_VAR 0 2
36931: PPUSH
36932: CALL 10285 0 4
36936: PUSH
36937: LD_INT 4
36939: ARRAY
36940: ST_TO_ADDR
// end ;
36941: LD_VAR 0 3
36945: RET
// export function PlayerSeeMe ( unit ) ; begin
36946: LD_INT 0
36948: PPUSH
// result := See ( your_side , unit ) ;
36949: LD_ADDR_VAR 0 2
36953: PUSH
36954: LD_OWVAR 2
36958: PPUSH
36959: LD_VAR 0 1
36963: PPUSH
36964: CALL_OW 292
36968: ST_TO_ADDR
// end ;
36969: LD_VAR 0 2
36973: RET
// export function ReverseDir ( unit ) ; begin
36974: LD_INT 0
36976: PPUSH
// if not unit then
36977: LD_VAR 0 1
36981: NOT
36982: IFFALSE 36986
// exit ;
36984: GO 37009
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36986: LD_ADDR_VAR 0 2
36990: PUSH
36991: LD_VAR 0 1
36995: PPUSH
36996: CALL_OW 254
37000: PUSH
37001: LD_INT 3
37003: PLUS
37004: PUSH
37005: LD_INT 6
37007: MOD
37008: ST_TO_ADDR
// end ;
37009: LD_VAR 0 2
37013: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
37014: LD_INT 0
37016: PPUSH
37017: PPUSH
37018: PPUSH
37019: PPUSH
37020: PPUSH
// if not hexes then
37021: LD_VAR 0 2
37025: NOT
37026: IFFALSE 37030
// exit ;
37028: GO 37178
// dist := 9999 ;
37030: LD_ADDR_VAR 0 5
37034: PUSH
37035: LD_INT 9999
37037: ST_TO_ADDR
// for i = 1 to hexes do
37038: LD_ADDR_VAR 0 4
37042: PUSH
37043: DOUBLE
37044: LD_INT 1
37046: DEC
37047: ST_TO_ADDR
37048: LD_VAR 0 2
37052: PUSH
37053: FOR_TO
37054: IFFALSE 37166
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
37056: LD_VAR 0 1
37060: PPUSH
37061: LD_VAR 0 2
37065: PUSH
37066: LD_VAR 0 4
37070: ARRAY
37071: PUSH
37072: LD_INT 1
37074: ARRAY
37075: PPUSH
37076: LD_VAR 0 2
37080: PUSH
37081: LD_VAR 0 4
37085: ARRAY
37086: PUSH
37087: LD_INT 2
37089: ARRAY
37090: PPUSH
37091: CALL_OW 297
37095: PUSH
37096: LD_VAR 0 5
37100: LESS
37101: IFFALSE 37164
// begin hex := hexes [ i ] ;
37103: LD_ADDR_VAR 0 7
37107: PUSH
37108: LD_VAR 0 2
37112: PUSH
37113: LD_VAR 0 4
37117: ARRAY
37118: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37119: LD_ADDR_VAR 0 5
37123: PUSH
37124: LD_VAR 0 1
37128: PPUSH
37129: LD_VAR 0 2
37133: PUSH
37134: LD_VAR 0 4
37138: ARRAY
37139: PUSH
37140: LD_INT 1
37142: ARRAY
37143: PPUSH
37144: LD_VAR 0 2
37148: PUSH
37149: LD_VAR 0 4
37153: ARRAY
37154: PUSH
37155: LD_INT 2
37157: ARRAY
37158: PPUSH
37159: CALL_OW 297
37163: ST_TO_ADDR
// end ; end ;
37164: GO 37053
37166: POP
37167: POP
// result := hex ;
37168: LD_ADDR_VAR 0 3
37172: PUSH
37173: LD_VAR 0 7
37177: ST_TO_ADDR
// end ;
37178: LD_VAR 0 3
37182: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37183: LD_INT 0
37185: PPUSH
37186: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37187: LD_VAR 0 1
37191: NOT
37192: PUSH
37193: LD_VAR 0 1
37197: PUSH
37198: LD_INT 21
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 23
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PPUSH
37222: CALL_OW 69
37226: IN
37227: NOT
37228: OR
37229: IFFALSE 37233
// exit ;
37231: GO 37280
// for i = 1 to 3 do
37233: LD_ADDR_VAR 0 3
37237: PUSH
37238: DOUBLE
37239: LD_INT 1
37241: DEC
37242: ST_TO_ADDR
37243: LD_INT 3
37245: PUSH
37246: FOR_TO
37247: IFFALSE 37278
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37249: LD_VAR 0 1
37253: PPUSH
37254: CALL_OW 250
37258: PPUSH
37259: LD_VAR 0 1
37263: PPUSH
37264: CALL_OW 251
37268: PPUSH
37269: LD_INT 1
37271: PPUSH
37272: CALL_OW 453
37276: GO 37246
37278: POP
37279: POP
// end ;
37280: LD_VAR 0 2
37284: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37285: LD_INT 0
37287: PPUSH
37288: PPUSH
37289: PPUSH
37290: PPUSH
37291: PPUSH
37292: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
37293: LD_VAR 0 1
37297: NOT
37298: PUSH
37299: LD_VAR 0 2
37303: NOT
37304: OR
37305: PUSH
37306: LD_VAR 0 1
37310: PPUSH
37311: CALL_OW 314
37315: OR
37316: IFFALSE 37320
// exit ;
37318: GO 37761
// x := GetX ( enemy_unit ) ;
37320: LD_ADDR_VAR 0 7
37324: PUSH
37325: LD_VAR 0 2
37329: PPUSH
37330: CALL_OW 250
37334: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37335: LD_ADDR_VAR 0 8
37339: PUSH
37340: LD_VAR 0 2
37344: PPUSH
37345: CALL_OW 251
37349: ST_TO_ADDR
// if not x or not y then
37350: LD_VAR 0 7
37354: NOT
37355: PUSH
37356: LD_VAR 0 8
37360: NOT
37361: OR
37362: IFFALSE 37366
// exit ;
37364: GO 37761
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37366: LD_ADDR_VAR 0 6
37370: PUSH
37371: LD_VAR 0 7
37375: PPUSH
37376: LD_INT 0
37378: PPUSH
37379: LD_INT 4
37381: PPUSH
37382: CALL_OW 272
37386: PUSH
37387: LD_VAR 0 8
37391: PPUSH
37392: LD_INT 0
37394: PPUSH
37395: LD_INT 4
37397: PPUSH
37398: CALL_OW 273
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_VAR 0 7
37411: PPUSH
37412: LD_INT 1
37414: PPUSH
37415: LD_INT 4
37417: PPUSH
37418: CALL_OW 272
37422: PUSH
37423: LD_VAR 0 8
37427: PPUSH
37428: LD_INT 1
37430: PPUSH
37431: LD_INT 4
37433: PPUSH
37434: CALL_OW 273
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_VAR 0 7
37447: PPUSH
37448: LD_INT 2
37450: PPUSH
37451: LD_INT 4
37453: PPUSH
37454: CALL_OW 272
37458: PUSH
37459: LD_VAR 0 8
37463: PPUSH
37464: LD_INT 2
37466: PPUSH
37467: LD_INT 4
37469: PPUSH
37470: CALL_OW 273
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_VAR 0 7
37483: PPUSH
37484: LD_INT 3
37486: PPUSH
37487: LD_INT 4
37489: PPUSH
37490: CALL_OW 272
37494: PUSH
37495: LD_VAR 0 8
37499: PPUSH
37500: LD_INT 3
37502: PPUSH
37503: LD_INT 4
37505: PPUSH
37506: CALL_OW 273
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_VAR 0 7
37519: PPUSH
37520: LD_INT 4
37522: PPUSH
37523: LD_INT 4
37525: PPUSH
37526: CALL_OW 272
37530: PUSH
37531: LD_VAR 0 8
37535: PPUSH
37536: LD_INT 4
37538: PPUSH
37539: LD_INT 4
37541: PPUSH
37542: CALL_OW 273
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_VAR 0 7
37555: PPUSH
37556: LD_INT 5
37558: PPUSH
37559: LD_INT 4
37561: PPUSH
37562: CALL_OW 272
37566: PUSH
37567: LD_VAR 0 8
37571: PPUSH
37572: LD_INT 5
37574: PPUSH
37575: LD_INT 4
37577: PPUSH
37578: CALL_OW 273
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: ST_TO_ADDR
// for i = tmp downto 1 do
37595: LD_ADDR_VAR 0 4
37599: PUSH
37600: DOUBLE
37601: LD_VAR 0 6
37605: INC
37606: ST_TO_ADDR
37607: LD_INT 1
37609: PUSH
37610: FOR_DOWNTO
37611: IFFALSE 37712
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37613: LD_VAR 0 6
37617: PUSH
37618: LD_VAR 0 4
37622: ARRAY
37623: PUSH
37624: LD_INT 1
37626: ARRAY
37627: PPUSH
37628: LD_VAR 0 6
37632: PUSH
37633: LD_VAR 0 4
37637: ARRAY
37638: PUSH
37639: LD_INT 2
37641: ARRAY
37642: PPUSH
37643: CALL_OW 488
37647: NOT
37648: PUSH
37649: LD_VAR 0 6
37653: PUSH
37654: LD_VAR 0 4
37658: ARRAY
37659: PUSH
37660: LD_INT 1
37662: ARRAY
37663: PPUSH
37664: LD_VAR 0 6
37668: PUSH
37669: LD_VAR 0 4
37673: ARRAY
37674: PUSH
37675: LD_INT 2
37677: ARRAY
37678: PPUSH
37679: CALL_OW 428
37683: PUSH
37684: LD_INT 0
37686: NONEQUAL
37687: OR
37688: IFFALSE 37710
// tmp := Delete ( tmp , i ) ;
37690: LD_ADDR_VAR 0 6
37694: PUSH
37695: LD_VAR 0 6
37699: PPUSH
37700: LD_VAR 0 4
37704: PPUSH
37705: CALL_OW 3
37709: ST_TO_ADDR
37710: GO 37610
37712: POP
37713: POP
// j := GetClosestHex ( unit , tmp ) ;
37714: LD_ADDR_VAR 0 5
37718: PUSH
37719: LD_VAR 0 1
37723: PPUSH
37724: LD_VAR 0 6
37728: PPUSH
37729: CALL 37014 0 2
37733: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37734: LD_VAR 0 1
37738: PPUSH
37739: LD_VAR 0 5
37743: PUSH
37744: LD_INT 1
37746: ARRAY
37747: PPUSH
37748: LD_VAR 0 5
37752: PUSH
37753: LD_INT 2
37755: ARRAY
37756: PPUSH
37757: CALL_OW 111
// end ;
37761: LD_VAR 0 3
37765: RET
// export function PrepareApemanSoldier ( ) ; begin
37766: LD_INT 0
37768: PPUSH
// uc_nation := 0 ;
37769: LD_ADDR_OWVAR 21
37773: PUSH
37774: LD_INT 0
37776: ST_TO_ADDR
// hc_sex := sex_male ;
37777: LD_ADDR_OWVAR 27
37781: PUSH
37782: LD_INT 1
37784: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37785: LD_ADDR_OWVAR 28
37789: PUSH
37790: LD_INT 15
37792: ST_TO_ADDR
// hc_gallery :=  ;
37793: LD_ADDR_OWVAR 33
37797: PUSH
37798: LD_STRING 
37800: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37801: LD_ADDR_OWVAR 31
37805: PUSH
37806: LD_INT 0
37808: PPUSH
37809: LD_INT 3
37811: PPUSH
37812: CALL_OW 12
37816: PUSH
37817: LD_INT 0
37819: PPUSH
37820: LD_INT 3
37822: PPUSH
37823: CALL_OW 12
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: ST_TO_ADDR
// end ;
37840: LD_VAR 0 1
37844: RET
// export function PrepareApemanEngineer ( ) ; begin
37845: LD_INT 0
37847: PPUSH
// uc_nation := 0 ;
37848: LD_ADDR_OWVAR 21
37852: PUSH
37853: LD_INT 0
37855: ST_TO_ADDR
// hc_sex := sex_male ;
37856: LD_ADDR_OWVAR 27
37860: PUSH
37861: LD_INT 1
37863: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37864: LD_ADDR_OWVAR 28
37868: PUSH
37869: LD_INT 16
37871: ST_TO_ADDR
// hc_gallery :=  ;
37872: LD_ADDR_OWVAR 33
37876: PUSH
37877: LD_STRING 
37879: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37880: LD_ADDR_OWVAR 31
37884: PUSH
37885: LD_INT 0
37887: PPUSH
37888: LD_INT 3
37890: PPUSH
37891: CALL_OW 12
37895: PUSH
37896: LD_INT 0
37898: PPUSH
37899: LD_INT 3
37901: PPUSH
37902: CALL_OW 12
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: ST_TO_ADDR
// end ;
37919: LD_VAR 0 1
37923: RET
// export function PrepareApeman ( agressivity ) ; begin
37924: LD_INT 0
37926: PPUSH
// uc_side := 0 ;
37927: LD_ADDR_OWVAR 20
37931: PUSH
37932: LD_INT 0
37934: ST_TO_ADDR
// uc_nation := 0 ;
37935: LD_ADDR_OWVAR 21
37939: PUSH
37940: LD_INT 0
37942: ST_TO_ADDR
// hc_sex := sex_male ;
37943: LD_ADDR_OWVAR 27
37947: PUSH
37948: LD_INT 1
37950: ST_TO_ADDR
// hc_class := class_apeman ;
37951: LD_ADDR_OWVAR 28
37955: PUSH
37956: LD_INT 12
37958: ST_TO_ADDR
// hc_gallery :=  ;
37959: LD_ADDR_OWVAR 33
37963: PUSH
37964: LD_STRING 
37966: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37967: LD_ADDR_OWVAR 35
37971: PUSH
37972: LD_VAR 0 1
37976: NEG
37977: PPUSH
37978: LD_VAR 0 1
37982: PPUSH
37983: CALL_OW 12
37987: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37988: LD_ADDR_OWVAR 31
37992: PUSH
37993: LD_INT 0
37995: PPUSH
37996: LD_INT 3
37998: PPUSH
37999: CALL_OW 12
38003: PUSH
38004: LD_INT 0
38006: PPUSH
38007: LD_INT 3
38009: PPUSH
38010: CALL_OW 12
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: ST_TO_ADDR
// end ;
38027: LD_VAR 0 2
38031: RET
// export function PrepareTiger ( agressivity ) ; begin
38032: LD_INT 0
38034: PPUSH
// uc_side := 0 ;
38035: LD_ADDR_OWVAR 20
38039: PUSH
38040: LD_INT 0
38042: ST_TO_ADDR
// uc_nation := 0 ;
38043: LD_ADDR_OWVAR 21
38047: PUSH
38048: LD_INT 0
38050: ST_TO_ADDR
// hc_class := class_tiger ;
38051: LD_ADDR_OWVAR 28
38055: PUSH
38056: LD_INT 14
38058: ST_TO_ADDR
// hc_gallery :=  ;
38059: LD_ADDR_OWVAR 33
38063: PUSH
38064: LD_STRING 
38066: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38067: LD_ADDR_OWVAR 35
38071: PUSH
38072: LD_VAR 0 1
38076: NEG
38077: PPUSH
38078: LD_VAR 0 1
38082: PPUSH
38083: CALL_OW 12
38087: ST_TO_ADDR
// end ;
38088: LD_VAR 0 2
38092: RET
// export function PrepareEnchidna ( ) ; begin
38093: LD_INT 0
38095: PPUSH
// uc_side := 0 ;
38096: LD_ADDR_OWVAR 20
38100: PUSH
38101: LD_INT 0
38103: ST_TO_ADDR
// uc_nation := 0 ;
38104: LD_ADDR_OWVAR 21
38108: PUSH
38109: LD_INT 0
38111: ST_TO_ADDR
// hc_class := class_baggie ;
38112: LD_ADDR_OWVAR 28
38116: PUSH
38117: LD_INT 13
38119: ST_TO_ADDR
// hc_gallery :=  ;
38120: LD_ADDR_OWVAR 33
38124: PUSH
38125: LD_STRING 
38127: ST_TO_ADDR
// end ;
38128: LD_VAR 0 1
38132: RET
// export function PrepareFrog ( ) ; begin
38133: LD_INT 0
38135: PPUSH
// uc_side := 0 ;
38136: LD_ADDR_OWVAR 20
38140: PUSH
38141: LD_INT 0
38143: ST_TO_ADDR
// uc_nation := 0 ;
38144: LD_ADDR_OWVAR 21
38148: PUSH
38149: LD_INT 0
38151: ST_TO_ADDR
// hc_class := class_frog ;
38152: LD_ADDR_OWVAR 28
38156: PUSH
38157: LD_INT 19
38159: ST_TO_ADDR
// hc_gallery :=  ;
38160: LD_ADDR_OWVAR 33
38164: PUSH
38165: LD_STRING 
38167: ST_TO_ADDR
// end ;
38168: LD_VAR 0 1
38172: RET
// export function PrepareFish ( ) ; begin
38173: LD_INT 0
38175: PPUSH
// uc_side := 0 ;
38176: LD_ADDR_OWVAR 20
38180: PUSH
38181: LD_INT 0
38183: ST_TO_ADDR
// uc_nation := 0 ;
38184: LD_ADDR_OWVAR 21
38188: PUSH
38189: LD_INT 0
38191: ST_TO_ADDR
// hc_class := class_fish ;
38192: LD_ADDR_OWVAR 28
38196: PUSH
38197: LD_INT 20
38199: ST_TO_ADDR
// hc_gallery :=  ;
38200: LD_ADDR_OWVAR 33
38204: PUSH
38205: LD_STRING 
38207: ST_TO_ADDR
// end ;
38208: LD_VAR 0 1
38212: RET
// export function PrepareBird ( ) ; begin
38213: LD_INT 0
38215: PPUSH
// uc_side := 0 ;
38216: LD_ADDR_OWVAR 20
38220: PUSH
38221: LD_INT 0
38223: ST_TO_ADDR
// uc_nation := 0 ;
38224: LD_ADDR_OWVAR 21
38228: PUSH
38229: LD_INT 0
38231: ST_TO_ADDR
// hc_class := class_phororhacos ;
38232: LD_ADDR_OWVAR 28
38236: PUSH
38237: LD_INT 18
38239: ST_TO_ADDR
// hc_gallery :=  ;
38240: LD_ADDR_OWVAR 33
38244: PUSH
38245: LD_STRING 
38247: ST_TO_ADDR
// end ;
38248: LD_VAR 0 1
38252: RET
// export function PrepareHorse ( ) ; begin
38253: LD_INT 0
38255: PPUSH
// uc_side := 0 ;
38256: LD_ADDR_OWVAR 20
38260: PUSH
38261: LD_INT 0
38263: ST_TO_ADDR
// uc_nation := 0 ;
38264: LD_ADDR_OWVAR 21
38268: PUSH
38269: LD_INT 0
38271: ST_TO_ADDR
// hc_class := 21 ;
38272: LD_ADDR_OWVAR 28
38276: PUSH
38277: LD_INT 21
38279: ST_TO_ADDR
// hc_gallery :=  ;
38280: LD_ADDR_OWVAR 33
38284: PUSH
38285: LD_STRING 
38287: ST_TO_ADDR
// end ;
38288: LD_VAR 0 1
38292: RET
// export function PrepareMastodont ( ) ; begin
38293: LD_INT 0
38295: PPUSH
// uc_side := 0 ;
38296: LD_ADDR_OWVAR 20
38300: PUSH
38301: LD_INT 0
38303: ST_TO_ADDR
// uc_nation := 0 ;
38304: LD_ADDR_OWVAR 21
38308: PUSH
38309: LD_INT 0
38311: ST_TO_ADDR
// vc_chassis := 31 ;
38312: LD_ADDR_OWVAR 37
38316: PUSH
38317: LD_INT 31
38319: ST_TO_ADDR
// vc_control := control_rider ;
38320: LD_ADDR_OWVAR 38
38324: PUSH
38325: LD_INT 4
38327: ST_TO_ADDR
// end ;
38328: LD_VAR 0 1
38332: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38333: LD_INT 0
38335: PPUSH
38336: PPUSH
38337: PPUSH
// uc_side = 0 ;
38338: LD_ADDR_OWVAR 20
38342: PUSH
38343: LD_INT 0
38345: ST_TO_ADDR
// uc_nation = 0 ;
38346: LD_ADDR_OWVAR 21
38350: PUSH
38351: LD_INT 0
38353: ST_TO_ADDR
// InitHc_All ( ) ;
38354: CALL_OW 584
// InitVc ;
38358: CALL_OW 20
// if mastodonts then
38362: LD_VAR 0 6
38366: IFFALSE 38433
// for i = 1 to mastodonts do
38368: LD_ADDR_VAR 0 11
38372: PUSH
38373: DOUBLE
38374: LD_INT 1
38376: DEC
38377: ST_TO_ADDR
38378: LD_VAR 0 6
38382: PUSH
38383: FOR_TO
38384: IFFALSE 38431
// begin vc_chassis := 31 ;
38386: LD_ADDR_OWVAR 37
38390: PUSH
38391: LD_INT 31
38393: ST_TO_ADDR
// vc_control := control_rider ;
38394: LD_ADDR_OWVAR 38
38398: PUSH
38399: LD_INT 4
38401: ST_TO_ADDR
// animal := CreateVehicle ;
38402: LD_ADDR_VAR 0 12
38406: PUSH
38407: CALL_OW 45
38411: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38412: LD_VAR 0 12
38416: PPUSH
38417: LD_VAR 0 8
38421: PPUSH
38422: LD_INT 0
38424: PPUSH
38425: CALL 40568 0 3
// end ;
38429: GO 38383
38431: POP
38432: POP
// if horses then
38433: LD_VAR 0 5
38437: IFFALSE 38504
// for i = 1 to horses do
38439: LD_ADDR_VAR 0 11
38443: PUSH
38444: DOUBLE
38445: LD_INT 1
38447: DEC
38448: ST_TO_ADDR
38449: LD_VAR 0 5
38453: PUSH
38454: FOR_TO
38455: IFFALSE 38502
// begin hc_class := 21 ;
38457: LD_ADDR_OWVAR 28
38461: PUSH
38462: LD_INT 21
38464: ST_TO_ADDR
// hc_gallery :=  ;
38465: LD_ADDR_OWVAR 33
38469: PUSH
38470: LD_STRING 
38472: ST_TO_ADDR
// animal := CreateHuman ;
38473: LD_ADDR_VAR 0 12
38477: PUSH
38478: CALL_OW 44
38482: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38483: LD_VAR 0 12
38487: PPUSH
38488: LD_VAR 0 8
38492: PPUSH
38493: LD_INT 0
38495: PPUSH
38496: CALL 40568 0 3
// end ;
38500: GO 38454
38502: POP
38503: POP
// if birds then
38504: LD_VAR 0 1
38508: IFFALSE 38575
// for i = 1 to birds do
38510: LD_ADDR_VAR 0 11
38514: PUSH
38515: DOUBLE
38516: LD_INT 1
38518: DEC
38519: ST_TO_ADDR
38520: LD_VAR 0 1
38524: PUSH
38525: FOR_TO
38526: IFFALSE 38573
// begin hc_class = 18 ;
38528: LD_ADDR_OWVAR 28
38532: PUSH
38533: LD_INT 18
38535: ST_TO_ADDR
// hc_gallery =  ;
38536: LD_ADDR_OWVAR 33
38540: PUSH
38541: LD_STRING 
38543: ST_TO_ADDR
// animal := CreateHuman ;
38544: LD_ADDR_VAR 0 12
38548: PUSH
38549: CALL_OW 44
38553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38554: LD_VAR 0 12
38558: PPUSH
38559: LD_VAR 0 8
38563: PPUSH
38564: LD_INT 0
38566: PPUSH
38567: CALL 40568 0 3
// end ;
38571: GO 38525
38573: POP
38574: POP
// if tigers then
38575: LD_VAR 0 2
38579: IFFALSE 38663
// for i = 1 to tigers do
38581: LD_ADDR_VAR 0 11
38585: PUSH
38586: DOUBLE
38587: LD_INT 1
38589: DEC
38590: ST_TO_ADDR
38591: LD_VAR 0 2
38595: PUSH
38596: FOR_TO
38597: IFFALSE 38661
// begin hc_class = class_tiger ;
38599: LD_ADDR_OWVAR 28
38603: PUSH
38604: LD_INT 14
38606: ST_TO_ADDR
// hc_gallery =  ;
38607: LD_ADDR_OWVAR 33
38611: PUSH
38612: LD_STRING 
38614: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38615: LD_ADDR_OWVAR 35
38619: PUSH
38620: LD_INT 7
38622: NEG
38623: PPUSH
38624: LD_INT 7
38626: PPUSH
38627: CALL_OW 12
38631: ST_TO_ADDR
// animal := CreateHuman ;
38632: LD_ADDR_VAR 0 12
38636: PUSH
38637: CALL_OW 44
38641: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38642: LD_VAR 0 12
38646: PPUSH
38647: LD_VAR 0 8
38651: PPUSH
38652: LD_INT 0
38654: PPUSH
38655: CALL 40568 0 3
// end ;
38659: GO 38596
38661: POP
38662: POP
// if apemans then
38663: LD_VAR 0 3
38667: IFFALSE 38790
// for i = 1 to apemans do
38669: LD_ADDR_VAR 0 11
38673: PUSH
38674: DOUBLE
38675: LD_INT 1
38677: DEC
38678: ST_TO_ADDR
38679: LD_VAR 0 3
38683: PUSH
38684: FOR_TO
38685: IFFALSE 38788
// begin hc_class = class_apeman ;
38687: LD_ADDR_OWVAR 28
38691: PUSH
38692: LD_INT 12
38694: ST_TO_ADDR
// hc_gallery =  ;
38695: LD_ADDR_OWVAR 33
38699: PUSH
38700: LD_STRING 
38702: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38703: LD_ADDR_OWVAR 35
38707: PUSH
38708: LD_INT 2
38710: NEG
38711: PPUSH
38712: LD_INT 2
38714: PPUSH
38715: CALL_OW 12
38719: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38720: LD_ADDR_OWVAR 31
38724: PUSH
38725: LD_INT 1
38727: PPUSH
38728: LD_INT 3
38730: PPUSH
38731: CALL_OW 12
38735: PUSH
38736: LD_INT 1
38738: PPUSH
38739: LD_INT 3
38741: PPUSH
38742: CALL_OW 12
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: ST_TO_ADDR
// animal := CreateHuman ;
38759: LD_ADDR_VAR 0 12
38763: PUSH
38764: CALL_OW 44
38768: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38769: LD_VAR 0 12
38773: PPUSH
38774: LD_VAR 0 8
38778: PPUSH
38779: LD_INT 0
38781: PPUSH
38782: CALL 40568 0 3
// end ;
38786: GO 38684
38788: POP
38789: POP
// if enchidnas then
38790: LD_VAR 0 4
38794: IFFALSE 38861
// for i = 1 to enchidnas do
38796: LD_ADDR_VAR 0 11
38800: PUSH
38801: DOUBLE
38802: LD_INT 1
38804: DEC
38805: ST_TO_ADDR
38806: LD_VAR 0 4
38810: PUSH
38811: FOR_TO
38812: IFFALSE 38859
// begin hc_class = 13 ;
38814: LD_ADDR_OWVAR 28
38818: PUSH
38819: LD_INT 13
38821: ST_TO_ADDR
// hc_gallery =  ;
38822: LD_ADDR_OWVAR 33
38826: PUSH
38827: LD_STRING 
38829: ST_TO_ADDR
// animal := CreateHuman ;
38830: LD_ADDR_VAR 0 12
38834: PUSH
38835: CALL_OW 44
38839: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38840: LD_VAR 0 12
38844: PPUSH
38845: LD_VAR 0 8
38849: PPUSH
38850: LD_INT 0
38852: PPUSH
38853: CALL 40568 0 3
// end ;
38857: GO 38811
38859: POP
38860: POP
// if fishes then
38861: LD_VAR 0 7
38865: IFFALSE 38932
// for i = 1 to fishes do
38867: LD_ADDR_VAR 0 11
38871: PUSH
38872: DOUBLE
38873: LD_INT 1
38875: DEC
38876: ST_TO_ADDR
38877: LD_VAR 0 7
38881: PUSH
38882: FOR_TO
38883: IFFALSE 38930
// begin hc_class = 20 ;
38885: LD_ADDR_OWVAR 28
38889: PUSH
38890: LD_INT 20
38892: ST_TO_ADDR
// hc_gallery =  ;
38893: LD_ADDR_OWVAR 33
38897: PUSH
38898: LD_STRING 
38900: ST_TO_ADDR
// animal := CreateHuman ;
38901: LD_ADDR_VAR 0 12
38905: PUSH
38906: CALL_OW 44
38910: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38911: LD_VAR 0 12
38915: PPUSH
38916: LD_VAR 0 9
38920: PPUSH
38921: LD_INT 0
38923: PPUSH
38924: CALL 40568 0 3
// end ;
38928: GO 38882
38930: POP
38931: POP
// end ;
38932: LD_VAR 0 10
38936: RET
// export function WantHeal ( sci , unit ) ; begin
38937: LD_INT 0
38939: PPUSH
// if GetTaskList ( sci ) > 0 then
38940: LD_VAR 0 1
38944: PPUSH
38945: CALL_OW 437
38949: PUSH
38950: LD_INT 0
38952: GREATER
38953: IFFALSE 39023
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38955: LD_VAR 0 1
38959: PPUSH
38960: CALL_OW 437
38964: PUSH
38965: LD_INT 1
38967: ARRAY
38968: PUSH
38969: LD_INT 1
38971: ARRAY
38972: PUSH
38973: LD_STRING l
38975: EQUAL
38976: PUSH
38977: LD_VAR 0 1
38981: PPUSH
38982: CALL_OW 437
38986: PUSH
38987: LD_INT 1
38989: ARRAY
38990: PUSH
38991: LD_INT 4
38993: ARRAY
38994: PUSH
38995: LD_VAR 0 2
38999: EQUAL
39000: AND
39001: IFFALSE 39013
// result := true else
39003: LD_ADDR_VAR 0 3
39007: PUSH
39008: LD_INT 1
39010: ST_TO_ADDR
39011: GO 39021
// result := false ;
39013: LD_ADDR_VAR 0 3
39017: PUSH
39018: LD_INT 0
39020: ST_TO_ADDR
// end else
39021: GO 39031
// result := false ;
39023: LD_ADDR_VAR 0 3
39027: PUSH
39028: LD_INT 0
39030: ST_TO_ADDR
// end ;
39031: LD_VAR 0 3
39035: RET
// export function HealTarget ( sci ) ; begin
39036: LD_INT 0
39038: PPUSH
// if not sci then
39039: LD_VAR 0 1
39043: NOT
39044: IFFALSE 39048
// exit ;
39046: GO 39113
// result := 0 ;
39048: LD_ADDR_VAR 0 2
39052: PUSH
39053: LD_INT 0
39055: ST_TO_ADDR
// if GetTaskList ( sci ) then
39056: LD_VAR 0 1
39060: PPUSH
39061: CALL_OW 437
39065: IFFALSE 39113
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39067: LD_VAR 0 1
39071: PPUSH
39072: CALL_OW 437
39076: PUSH
39077: LD_INT 1
39079: ARRAY
39080: PUSH
39081: LD_INT 1
39083: ARRAY
39084: PUSH
39085: LD_STRING l
39087: EQUAL
39088: IFFALSE 39113
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39090: LD_ADDR_VAR 0 2
39094: PUSH
39095: LD_VAR 0 1
39099: PPUSH
39100: CALL_OW 437
39104: PUSH
39105: LD_INT 1
39107: ARRAY
39108: PUSH
39109: LD_INT 4
39111: ARRAY
39112: ST_TO_ADDR
// end ;
39113: LD_VAR 0 2
39117: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39118: LD_INT 0
39120: PPUSH
39121: PPUSH
39122: PPUSH
39123: PPUSH
// if not base_units then
39124: LD_VAR 0 1
39128: NOT
39129: IFFALSE 39133
// exit ;
39131: GO 39220
// result := false ;
39133: LD_ADDR_VAR 0 2
39137: PUSH
39138: LD_INT 0
39140: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39141: LD_ADDR_VAR 0 5
39145: PUSH
39146: LD_VAR 0 1
39150: PPUSH
39151: LD_INT 21
39153: PUSH
39154: LD_INT 3
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PPUSH
39161: CALL_OW 72
39165: ST_TO_ADDR
// if not tmp then
39166: LD_VAR 0 5
39170: NOT
39171: IFFALSE 39175
// exit ;
39173: GO 39220
// for i in tmp do
39175: LD_ADDR_VAR 0 3
39179: PUSH
39180: LD_VAR 0 5
39184: PUSH
39185: FOR_IN
39186: IFFALSE 39218
// begin result := EnemyInRange ( i , 22 ) ;
39188: LD_ADDR_VAR 0 2
39192: PUSH
39193: LD_VAR 0 3
39197: PPUSH
39198: LD_INT 22
39200: PPUSH
39201: CALL 36889 0 2
39205: ST_TO_ADDR
// if result then
39206: LD_VAR 0 2
39210: IFFALSE 39216
// exit ;
39212: POP
39213: POP
39214: GO 39220
// end ;
39216: GO 39185
39218: POP
39219: POP
// end ;
39220: LD_VAR 0 2
39224: RET
// export function FilterByTag ( units , tag ) ; begin
39225: LD_INT 0
39227: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39228: LD_ADDR_VAR 0 3
39232: PUSH
39233: LD_VAR 0 1
39237: PPUSH
39238: LD_INT 120
39240: PUSH
39241: LD_VAR 0 2
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PPUSH
39250: CALL_OW 72
39254: ST_TO_ADDR
// end ;
39255: LD_VAR 0 3
39259: RET
// export function IsDriver ( un ) ; begin
39260: LD_INT 0
39262: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39263: LD_ADDR_VAR 0 2
39267: PUSH
39268: LD_VAR 0 1
39272: PUSH
39273: LD_INT 55
39275: PUSH
39276: EMPTY
39277: LIST
39278: PPUSH
39279: CALL_OW 69
39283: IN
39284: ST_TO_ADDR
// end ;
39285: LD_VAR 0 2
39289: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39290: LD_INT 0
39292: PPUSH
39293: PPUSH
// list := [ ] ;
39294: LD_ADDR_VAR 0 5
39298: PUSH
39299: EMPTY
39300: ST_TO_ADDR
// case d of 0 :
39301: LD_VAR 0 3
39305: PUSH
39306: LD_INT 0
39308: DOUBLE
39309: EQUAL
39310: IFTRUE 39314
39312: GO 39447
39314: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39315: LD_ADDR_VAR 0 5
39319: PUSH
39320: LD_VAR 0 1
39324: PUSH
39325: LD_INT 4
39327: MINUS
39328: PUSH
39329: LD_VAR 0 2
39333: PUSH
39334: LD_INT 4
39336: MINUS
39337: PUSH
39338: LD_INT 2
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: PUSH
39346: LD_VAR 0 1
39350: PUSH
39351: LD_INT 3
39353: MINUS
39354: PUSH
39355: LD_VAR 0 2
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: PUSH
39368: LD_VAR 0 1
39372: PUSH
39373: LD_INT 4
39375: PLUS
39376: PUSH
39377: LD_VAR 0 2
39381: PUSH
39382: LD_INT 4
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: LIST
39389: PUSH
39390: LD_VAR 0 1
39394: PUSH
39395: LD_INT 3
39397: PLUS
39398: PUSH
39399: LD_VAR 0 2
39403: PUSH
39404: LD_INT 3
39406: PLUS
39407: PUSH
39408: LD_INT 5
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: LIST
39415: PUSH
39416: LD_VAR 0 1
39420: PUSH
39421: LD_VAR 0 2
39425: PUSH
39426: LD_INT 4
39428: PLUS
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: LIST
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: ST_TO_ADDR
// end ; 1 :
39445: GO 40145
39447: LD_INT 1
39449: DOUBLE
39450: EQUAL
39451: IFTRUE 39455
39453: GO 39588
39455: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39456: LD_ADDR_VAR 0 5
39460: PUSH
39461: LD_VAR 0 1
39465: PUSH
39466: LD_VAR 0 2
39470: PUSH
39471: LD_INT 4
39473: MINUS
39474: PUSH
39475: LD_INT 3
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: LIST
39482: PUSH
39483: LD_VAR 0 1
39487: PUSH
39488: LD_INT 3
39490: MINUS
39491: PUSH
39492: LD_VAR 0 2
39496: PUSH
39497: LD_INT 3
39499: MINUS
39500: PUSH
39501: LD_INT 2
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: LIST
39508: PUSH
39509: LD_VAR 0 1
39513: PUSH
39514: LD_INT 4
39516: MINUS
39517: PUSH
39518: LD_VAR 0 2
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: LIST
39530: PUSH
39531: LD_VAR 0 1
39535: PUSH
39536: LD_VAR 0 2
39540: PUSH
39541: LD_INT 3
39543: PLUS
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: LIST
39552: PUSH
39553: LD_VAR 0 1
39557: PUSH
39558: LD_INT 4
39560: PLUS
39561: PUSH
39562: LD_VAR 0 2
39566: PUSH
39567: LD_INT 4
39569: PLUS
39570: PUSH
39571: LD_INT 5
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: ST_TO_ADDR
// end ; 2 :
39586: GO 40145
39588: LD_INT 2
39590: DOUBLE
39591: EQUAL
39592: IFTRUE 39596
39594: GO 39725
39596: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39597: LD_ADDR_VAR 0 5
39601: PUSH
39602: LD_VAR 0 1
39606: PUSH
39607: LD_VAR 0 2
39611: PUSH
39612: LD_INT 3
39614: MINUS
39615: PUSH
39616: LD_INT 3
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: LIST
39623: PUSH
39624: LD_VAR 0 1
39628: PUSH
39629: LD_INT 4
39631: PLUS
39632: PUSH
39633: LD_VAR 0 2
39637: PUSH
39638: LD_INT 4
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: LIST
39645: PUSH
39646: LD_VAR 0 1
39650: PUSH
39651: LD_VAR 0 2
39655: PUSH
39656: LD_INT 4
39658: PLUS
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: PUSH
39668: LD_VAR 0 1
39672: PUSH
39673: LD_INT 3
39675: MINUS
39676: PUSH
39677: LD_VAR 0 2
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: LIST
39689: PUSH
39690: LD_VAR 0 1
39694: PUSH
39695: LD_INT 4
39697: MINUS
39698: PUSH
39699: LD_VAR 0 2
39703: PUSH
39704: LD_INT 4
39706: MINUS
39707: PUSH
39708: LD_INT 2
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: ST_TO_ADDR
// end ; 3 :
39723: GO 40145
39725: LD_INT 3
39727: DOUBLE
39728: EQUAL
39729: IFTRUE 39733
39731: GO 39866
39733: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39734: LD_ADDR_VAR 0 5
39738: PUSH
39739: LD_VAR 0 1
39743: PUSH
39744: LD_INT 3
39746: PLUS
39747: PUSH
39748: LD_VAR 0 2
39752: PUSH
39753: LD_INT 4
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: LIST
39760: PUSH
39761: LD_VAR 0 1
39765: PUSH
39766: LD_INT 4
39768: PLUS
39769: PUSH
39770: LD_VAR 0 2
39774: PUSH
39775: LD_INT 4
39777: PLUS
39778: PUSH
39779: LD_INT 5
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: LIST
39786: PUSH
39787: LD_VAR 0 1
39791: PUSH
39792: LD_INT 4
39794: MINUS
39795: PUSH
39796: LD_VAR 0 2
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: PUSH
39809: LD_VAR 0 1
39813: PUSH
39814: LD_VAR 0 2
39818: PUSH
39819: LD_INT 4
39821: MINUS
39822: PUSH
39823: LD_INT 3
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: PUSH
39831: LD_VAR 0 1
39835: PUSH
39836: LD_INT 3
39838: MINUS
39839: PUSH
39840: LD_VAR 0 2
39844: PUSH
39845: LD_INT 3
39847: MINUS
39848: PUSH
39849: LD_INT 2
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: LIST
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: ST_TO_ADDR
// end ; 4 :
39864: GO 40145
39866: LD_INT 4
39868: DOUBLE
39869: EQUAL
39870: IFTRUE 39874
39872: GO 40007
39874: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39875: LD_ADDR_VAR 0 5
39879: PUSH
39880: LD_VAR 0 1
39884: PUSH
39885: LD_VAR 0 2
39889: PUSH
39890: LD_INT 4
39892: PLUS
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: LIST
39901: PUSH
39902: LD_VAR 0 1
39906: PUSH
39907: LD_INT 3
39909: PLUS
39910: PUSH
39911: LD_VAR 0 2
39915: PUSH
39916: LD_INT 3
39918: PLUS
39919: PUSH
39920: LD_INT 5
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: PUSH
39928: LD_VAR 0 1
39932: PUSH
39933: LD_INT 4
39935: PLUS
39936: PUSH
39937: LD_VAR 0 2
39941: PUSH
39942: LD_INT 4
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: LIST
39949: PUSH
39950: LD_VAR 0 1
39954: PUSH
39955: LD_VAR 0 2
39959: PUSH
39960: LD_INT 3
39962: MINUS
39963: PUSH
39964: LD_INT 3
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: PUSH
39972: LD_VAR 0 1
39976: PUSH
39977: LD_INT 4
39979: MINUS
39980: PUSH
39981: LD_VAR 0 2
39985: PUSH
39986: LD_INT 4
39988: MINUS
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: LIST
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: ST_TO_ADDR
// end ; 5 :
40005: GO 40145
40007: LD_INT 5
40009: DOUBLE
40010: EQUAL
40011: IFTRUE 40015
40013: GO 40144
40015: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40016: LD_ADDR_VAR 0 5
40020: PUSH
40021: LD_VAR 0 1
40025: PUSH
40026: LD_INT 4
40028: MINUS
40029: PUSH
40030: LD_VAR 0 2
40034: PUSH
40035: LD_INT 1
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: LIST
40042: PUSH
40043: LD_VAR 0 1
40047: PUSH
40048: LD_VAR 0 2
40052: PUSH
40053: LD_INT 4
40055: MINUS
40056: PUSH
40057: LD_INT 3
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: LIST
40064: PUSH
40065: LD_VAR 0 1
40069: PUSH
40070: LD_INT 4
40072: PLUS
40073: PUSH
40074: LD_VAR 0 2
40078: PUSH
40079: LD_INT 4
40081: PLUS
40082: PUSH
40083: LD_INT 5
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: LIST
40090: PUSH
40091: LD_VAR 0 1
40095: PUSH
40096: LD_INT 3
40098: PLUS
40099: PUSH
40100: LD_VAR 0 2
40104: PUSH
40105: LD_INT 4
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: LIST
40112: PUSH
40113: LD_VAR 0 1
40117: PUSH
40118: LD_VAR 0 2
40122: PUSH
40123: LD_INT 3
40125: PLUS
40126: PUSH
40127: LD_INT 0
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: ST_TO_ADDR
// end ; end ;
40142: GO 40145
40144: POP
// result := list ;
40145: LD_ADDR_VAR 0 4
40149: PUSH
40150: LD_VAR 0 5
40154: ST_TO_ADDR
// end ;
40155: LD_VAR 0 4
40159: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40160: LD_INT 0
40162: PPUSH
40163: PPUSH
40164: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40165: LD_VAR 0 1
40169: NOT
40170: PUSH
40171: LD_VAR 0 2
40175: PUSH
40176: LD_INT 1
40178: PUSH
40179: LD_INT 2
40181: PUSH
40182: LD_INT 3
40184: PUSH
40185: LD_INT 4
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: IN
40194: NOT
40195: OR
40196: IFFALSE 40200
// exit ;
40198: GO 40292
// tmp := [ ] ;
40200: LD_ADDR_VAR 0 5
40204: PUSH
40205: EMPTY
40206: ST_TO_ADDR
// for i in units do
40207: LD_ADDR_VAR 0 4
40211: PUSH
40212: LD_VAR 0 1
40216: PUSH
40217: FOR_IN
40218: IFFALSE 40261
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
40220: LD_ADDR_VAR 0 5
40224: PUSH
40225: LD_VAR 0 5
40229: PPUSH
40230: LD_VAR 0 5
40234: PUSH
40235: LD_INT 1
40237: PLUS
40238: PPUSH
40239: LD_VAR 0 4
40243: PPUSH
40244: LD_VAR 0 2
40248: PPUSH
40249: CALL_OW 259
40253: PPUSH
40254: CALL_OW 2
40258: ST_TO_ADDR
40259: GO 40217
40261: POP
40262: POP
// if not tmp then
40263: LD_VAR 0 5
40267: NOT
40268: IFFALSE 40272
// exit ;
40270: GO 40292
// result := SortListByListDesc ( units , tmp ) ;
40272: LD_ADDR_VAR 0 3
40276: PUSH
40277: LD_VAR 0 1
40281: PPUSH
40282: LD_VAR 0 5
40286: PPUSH
40287: CALL_OW 77
40291: ST_TO_ADDR
// end ;
40292: LD_VAR 0 3
40296: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40297: LD_INT 0
40299: PPUSH
40300: PPUSH
40301: PPUSH
// result := false ;
40302: LD_ADDR_VAR 0 3
40306: PUSH
40307: LD_INT 0
40309: ST_TO_ADDR
// x := GetX ( building ) ;
40310: LD_ADDR_VAR 0 4
40314: PUSH
40315: LD_VAR 0 2
40319: PPUSH
40320: CALL_OW 250
40324: ST_TO_ADDR
// y := GetY ( building ) ;
40325: LD_ADDR_VAR 0 5
40329: PUSH
40330: LD_VAR 0 2
40334: PPUSH
40335: CALL_OW 251
40339: ST_TO_ADDR
// if not building or not x or not y then
40340: LD_VAR 0 2
40344: NOT
40345: PUSH
40346: LD_VAR 0 4
40350: NOT
40351: OR
40352: PUSH
40353: LD_VAR 0 5
40357: NOT
40358: OR
40359: IFFALSE 40363
// exit ;
40361: GO 40455
// if GetTaskList ( unit ) then
40363: LD_VAR 0 1
40367: PPUSH
40368: CALL_OW 437
40372: IFFALSE 40455
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40374: LD_STRING e
40376: PUSH
40377: LD_VAR 0 1
40381: PPUSH
40382: CALL_OW 437
40386: PUSH
40387: LD_INT 1
40389: ARRAY
40390: PUSH
40391: LD_INT 1
40393: ARRAY
40394: EQUAL
40395: PUSH
40396: LD_VAR 0 4
40400: PUSH
40401: LD_VAR 0 1
40405: PPUSH
40406: CALL_OW 437
40410: PUSH
40411: LD_INT 1
40413: ARRAY
40414: PUSH
40415: LD_INT 2
40417: ARRAY
40418: EQUAL
40419: AND
40420: PUSH
40421: LD_VAR 0 5
40425: PUSH
40426: LD_VAR 0 1
40430: PPUSH
40431: CALL_OW 437
40435: PUSH
40436: LD_INT 1
40438: ARRAY
40439: PUSH
40440: LD_INT 3
40442: ARRAY
40443: EQUAL
40444: AND
40445: IFFALSE 40455
// result := true end ;
40447: LD_ADDR_VAR 0 3
40451: PUSH
40452: LD_INT 1
40454: ST_TO_ADDR
// end ;
40455: LD_VAR 0 3
40459: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40460: LD_INT 0
40462: PPUSH
// result := false ;
40463: LD_ADDR_VAR 0 4
40467: PUSH
40468: LD_INT 0
40470: ST_TO_ADDR
// if GetTaskList ( unit ) then
40471: LD_VAR 0 1
40475: PPUSH
40476: CALL_OW 437
40480: IFFALSE 40563
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40482: LD_STRING M
40484: PUSH
40485: LD_VAR 0 1
40489: PPUSH
40490: CALL_OW 437
40494: PUSH
40495: LD_INT 1
40497: ARRAY
40498: PUSH
40499: LD_INT 1
40501: ARRAY
40502: EQUAL
40503: PUSH
40504: LD_VAR 0 2
40508: PUSH
40509: LD_VAR 0 1
40513: PPUSH
40514: CALL_OW 437
40518: PUSH
40519: LD_INT 1
40521: ARRAY
40522: PUSH
40523: LD_INT 2
40525: ARRAY
40526: EQUAL
40527: AND
40528: PUSH
40529: LD_VAR 0 3
40533: PUSH
40534: LD_VAR 0 1
40538: PPUSH
40539: CALL_OW 437
40543: PUSH
40544: LD_INT 1
40546: ARRAY
40547: PUSH
40548: LD_INT 3
40550: ARRAY
40551: EQUAL
40552: AND
40553: IFFALSE 40563
// result := true ;
40555: LD_ADDR_VAR 0 4
40559: PUSH
40560: LD_INT 1
40562: ST_TO_ADDR
// end ; end ;
40563: LD_VAR 0 4
40567: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40568: LD_INT 0
40570: PPUSH
40571: PPUSH
40572: PPUSH
40573: PPUSH
// if not unit or not area then
40574: LD_VAR 0 1
40578: NOT
40579: PUSH
40580: LD_VAR 0 2
40584: NOT
40585: OR
40586: IFFALSE 40590
// exit ;
40588: GO 40754
// tmp := AreaToList ( area , i ) ;
40590: LD_ADDR_VAR 0 6
40594: PUSH
40595: LD_VAR 0 2
40599: PPUSH
40600: LD_VAR 0 5
40604: PPUSH
40605: CALL_OW 517
40609: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40610: LD_ADDR_VAR 0 5
40614: PUSH
40615: DOUBLE
40616: LD_INT 1
40618: DEC
40619: ST_TO_ADDR
40620: LD_VAR 0 6
40624: PUSH
40625: LD_INT 1
40627: ARRAY
40628: PUSH
40629: FOR_TO
40630: IFFALSE 40752
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40632: LD_ADDR_VAR 0 7
40636: PUSH
40637: LD_VAR 0 6
40641: PUSH
40642: LD_INT 1
40644: ARRAY
40645: PUSH
40646: LD_VAR 0 5
40650: ARRAY
40651: PUSH
40652: LD_VAR 0 6
40656: PUSH
40657: LD_INT 2
40659: ARRAY
40660: PUSH
40661: LD_VAR 0 5
40665: ARRAY
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
40671: LD_VAR 0 7
40675: PUSH
40676: LD_INT 1
40678: ARRAY
40679: PPUSH
40680: LD_VAR 0 7
40684: PUSH
40685: LD_INT 2
40687: ARRAY
40688: PPUSH
40689: CALL_OW 428
40693: PUSH
40694: LD_INT 0
40696: EQUAL
40697: IFFALSE 40750
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40699: LD_VAR 0 1
40703: PPUSH
40704: LD_VAR 0 7
40708: PUSH
40709: LD_INT 1
40711: ARRAY
40712: PPUSH
40713: LD_VAR 0 7
40717: PUSH
40718: LD_INT 2
40720: ARRAY
40721: PPUSH
40722: LD_VAR 0 3
40726: PPUSH
40727: CALL_OW 48
// result := IsPlaced ( unit ) ;
40731: LD_ADDR_VAR 0 4
40735: PUSH
40736: LD_VAR 0 1
40740: PPUSH
40741: CALL_OW 305
40745: ST_TO_ADDR
// exit ;
40746: POP
40747: POP
40748: GO 40754
// end ; end ;
40750: GO 40629
40752: POP
40753: POP
// end ;
40754: LD_VAR 0 4
40758: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40759: LD_INT 0
40761: PPUSH
40762: PPUSH
40763: PPUSH
// if not side or side > 8 then
40764: LD_VAR 0 1
40768: NOT
40769: PUSH
40770: LD_VAR 0 1
40774: PUSH
40775: LD_INT 8
40777: GREATER
40778: OR
40779: IFFALSE 40783
// exit ;
40781: GO 40970
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40783: LD_ADDR_VAR 0 4
40787: PUSH
40788: LD_INT 22
40790: PUSH
40791: LD_VAR 0 1
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 21
40802: PUSH
40803: LD_INT 3
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PPUSH
40814: CALL_OW 69
40818: ST_TO_ADDR
// if not tmp then
40819: LD_VAR 0 4
40823: NOT
40824: IFFALSE 40828
// exit ;
40826: GO 40970
// enable_addtolog := true ;
40828: LD_ADDR_OWVAR 81
40832: PUSH
40833: LD_INT 1
40835: ST_TO_ADDR
// AddToLog ( [ ) ;
40836: LD_STRING [
40838: PPUSH
40839: CALL_OW 561
// for i in tmp do
40843: LD_ADDR_VAR 0 3
40847: PUSH
40848: LD_VAR 0 4
40852: PUSH
40853: FOR_IN
40854: IFFALSE 40961
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40856: LD_STRING [
40858: PUSH
40859: LD_VAR 0 3
40863: PPUSH
40864: CALL_OW 266
40868: STR
40869: PUSH
40870: LD_STRING , 
40872: STR
40873: PUSH
40874: LD_VAR 0 3
40878: PPUSH
40879: CALL_OW 250
40883: STR
40884: PUSH
40885: LD_STRING , 
40887: STR
40888: PUSH
40889: LD_VAR 0 3
40893: PPUSH
40894: CALL_OW 251
40898: STR
40899: PUSH
40900: LD_STRING , 
40902: STR
40903: PUSH
40904: LD_VAR 0 3
40908: PPUSH
40909: CALL_OW 254
40913: STR
40914: PUSH
40915: LD_STRING , 
40917: STR
40918: PUSH
40919: LD_VAR 0 3
40923: PPUSH
40924: LD_INT 1
40926: PPUSH
40927: CALL_OW 268
40931: STR
40932: PUSH
40933: LD_STRING , 
40935: STR
40936: PUSH
40937: LD_VAR 0 3
40941: PPUSH
40942: LD_INT 2
40944: PPUSH
40945: CALL_OW 268
40949: STR
40950: PUSH
40951: LD_STRING ],
40953: STR
40954: PPUSH
40955: CALL_OW 561
// end ;
40959: GO 40853
40961: POP
40962: POP
// AddToLog ( ]; ) ;
40963: LD_STRING ];
40965: PPUSH
40966: CALL_OW 561
// end ;
40970: LD_VAR 0 2
40974: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40975: LD_INT 0
40977: PPUSH
40978: PPUSH
40979: PPUSH
40980: PPUSH
40981: PPUSH
// if not area or not rate or not max then
40982: LD_VAR 0 1
40986: NOT
40987: PUSH
40988: LD_VAR 0 2
40992: NOT
40993: OR
40994: PUSH
40995: LD_VAR 0 4
40999: NOT
41000: OR
41001: IFFALSE 41005
// exit ;
41003: GO 41194
// while 1 do
41005: LD_INT 1
41007: IFFALSE 41194
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41009: LD_ADDR_VAR 0 9
41013: PUSH
41014: LD_VAR 0 1
41018: PPUSH
41019: LD_INT 1
41021: PPUSH
41022: CALL_OW 287
41026: PUSH
41027: LD_INT 10
41029: MUL
41030: ST_TO_ADDR
// r := rate / 10 ;
41031: LD_ADDR_VAR 0 7
41035: PUSH
41036: LD_VAR 0 2
41040: PUSH
41041: LD_INT 10
41043: DIVREAL
41044: ST_TO_ADDR
// time := 1 1$00 ;
41045: LD_ADDR_VAR 0 8
41049: PUSH
41050: LD_INT 2100
41052: ST_TO_ADDR
// if amount < min then
41053: LD_VAR 0 9
41057: PUSH
41058: LD_VAR 0 3
41062: LESS
41063: IFFALSE 41081
// r := r * 2 else
41065: LD_ADDR_VAR 0 7
41069: PUSH
41070: LD_VAR 0 7
41074: PUSH
41075: LD_INT 2
41077: MUL
41078: ST_TO_ADDR
41079: GO 41107
// if amount > max then
41081: LD_VAR 0 9
41085: PUSH
41086: LD_VAR 0 4
41090: GREATER
41091: IFFALSE 41107
// r := r / 2 ;
41093: LD_ADDR_VAR 0 7
41097: PUSH
41098: LD_VAR 0 7
41102: PUSH
41103: LD_INT 2
41105: DIVREAL
41106: ST_TO_ADDR
// time := time / r ;
41107: LD_ADDR_VAR 0 8
41111: PUSH
41112: LD_VAR 0 8
41116: PUSH
41117: LD_VAR 0 7
41121: DIVREAL
41122: ST_TO_ADDR
// if time < 0 then
41123: LD_VAR 0 8
41127: PUSH
41128: LD_INT 0
41130: LESS
41131: IFFALSE 41148
// time := time * - 1 ;
41133: LD_ADDR_VAR 0 8
41137: PUSH
41138: LD_VAR 0 8
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: MUL
41147: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41148: LD_VAR 0 8
41152: PUSH
41153: LD_INT 35
41155: PPUSH
41156: LD_INT 875
41158: PPUSH
41159: CALL_OW 12
41163: PLUS
41164: PPUSH
41165: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41169: LD_INT 1
41171: PPUSH
41172: LD_INT 5
41174: PPUSH
41175: CALL_OW 12
41179: PPUSH
41180: LD_VAR 0 1
41184: PPUSH
41185: LD_INT 1
41187: PPUSH
41188: CALL_OW 55
// end ;
41192: GO 41005
// end ;
41194: LD_VAR 0 5
41198: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41199: LD_INT 0
41201: PPUSH
41202: PPUSH
41203: PPUSH
41204: PPUSH
41205: PPUSH
41206: PPUSH
41207: PPUSH
41208: PPUSH
// if not turrets or not factories then
41209: LD_VAR 0 1
41213: NOT
41214: PUSH
41215: LD_VAR 0 2
41219: NOT
41220: OR
41221: IFFALSE 41225
// exit ;
41223: GO 41532
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41225: LD_ADDR_VAR 0 10
41229: PUSH
41230: LD_INT 5
41232: PUSH
41233: LD_INT 6
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: LD_INT 4
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 3
41252: PUSH
41253: LD_INT 5
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 24
41267: PUSH
41268: LD_INT 25
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 23
41277: PUSH
41278: LD_INT 27
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 42
41291: PUSH
41292: LD_INT 43
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 44
41301: PUSH
41302: LD_INT 46
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 45
41311: PUSH
41312: LD_INT 47
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: LIST
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: LIST
41328: ST_TO_ADDR
// result := [ ] ;
41329: LD_ADDR_VAR 0 3
41333: PUSH
41334: EMPTY
41335: ST_TO_ADDR
// for i in turrets do
41336: LD_ADDR_VAR 0 4
41340: PUSH
41341: LD_VAR 0 1
41345: PUSH
41346: FOR_IN
41347: IFFALSE 41530
// begin nat := GetNation ( i ) ;
41349: LD_ADDR_VAR 0 7
41353: PUSH
41354: LD_VAR 0 4
41358: PPUSH
41359: CALL_OW 248
41363: ST_TO_ADDR
// weapon := 0 ;
41364: LD_ADDR_VAR 0 8
41368: PUSH
41369: LD_INT 0
41371: ST_TO_ADDR
// if not nat then
41372: LD_VAR 0 7
41376: NOT
41377: IFFALSE 41381
// continue ;
41379: GO 41346
// for j in list [ nat ] do
41381: LD_ADDR_VAR 0 5
41385: PUSH
41386: LD_VAR 0 10
41390: PUSH
41391: LD_VAR 0 7
41395: ARRAY
41396: PUSH
41397: FOR_IN
41398: IFFALSE 41439
// if GetBWeapon ( i ) = j [ 1 ] then
41400: LD_VAR 0 4
41404: PPUSH
41405: CALL_OW 269
41409: PUSH
41410: LD_VAR 0 5
41414: PUSH
41415: LD_INT 1
41417: ARRAY
41418: EQUAL
41419: IFFALSE 41437
// begin weapon := j [ 2 ] ;
41421: LD_ADDR_VAR 0 8
41425: PUSH
41426: LD_VAR 0 5
41430: PUSH
41431: LD_INT 2
41433: ARRAY
41434: ST_TO_ADDR
// break ;
41435: GO 41439
// end ;
41437: GO 41397
41439: POP
41440: POP
// if not weapon then
41441: LD_VAR 0 8
41445: NOT
41446: IFFALSE 41450
// continue ;
41448: GO 41346
// for k in factories do
41450: LD_ADDR_VAR 0 6
41454: PUSH
41455: LD_VAR 0 2
41459: PUSH
41460: FOR_IN
41461: IFFALSE 41526
// begin weapons := AvailableWeaponList ( k ) ;
41463: LD_ADDR_VAR 0 9
41467: PUSH
41468: LD_VAR 0 6
41472: PPUSH
41473: CALL_OW 478
41477: ST_TO_ADDR
// if not weapons then
41478: LD_VAR 0 9
41482: NOT
41483: IFFALSE 41487
// continue ;
41485: GO 41460
// if weapon in weapons then
41487: LD_VAR 0 8
41491: PUSH
41492: LD_VAR 0 9
41496: IN
41497: IFFALSE 41524
// begin result := [ i , weapon ] ;
41499: LD_ADDR_VAR 0 3
41503: PUSH
41504: LD_VAR 0 4
41508: PUSH
41509: LD_VAR 0 8
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: ST_TO_ADDR
// exit ;
41518: POP
41519: POP
41520: POP
41521: POP
41522: GO 41532
// end ; end ;
41524: GO 41460
41526: POP
41527: POP
// end ;
41528: GO 41346
41530: POP
41531: POP
// end ;
41532: LD_VAR 0 3
41536: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41537: LD_INT 0
41539: PPUSH
// if not side or side > 8 then
41540: LD_VAR 0 3
41544: NOT
41545: PUSH
41546: LD_VAR 0 3
41550: PUSH
41551: LD_INT 8
41553: GREATER
41554: OR
41555: IFFALSE 41559
// exit ;
41557: GO 41618
// if not range then
41559: LD_VAR 0 4
41563: NOT
41564: IFFALSE 41575
// range := - 12 ;
41566: LD_ADDR_VAR 0 4
41570: PUSH
41571: LD_INT 12
41573: NEG
41574: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41575: LD_VAR 0 1
41579: PPUSH
41580: LD_VAR 0 2
41584: PPUSH
41585: LD_VAR 0 3
41589: PPUSH
41590: LD_VAR 0 4
41594: PPUSH
41595: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41599: LD_VAR 0 1
41603: PPUSH
41604: LD_VAR 0 2
41608: PPUSH
41609: LD_VAR 0 3
41613: PPUSH
41614: CALL_OW 331
// end ;
41618: LD_VAR 0 5
41622: RET
// export function Video ( mode ) ; begin
41623: LD_INT 0
41625: PPUSH
// ingame_video = mode ;
41626: LD_ADDR_OWVAR 52
41630: PUSH
41631: LD_VAR 0 1
41635: ST_TO_ADDR
// interface_hidden = mode ;
41636: LD_ADDR_OWVAR 54
41640: PUSH
41641: LD_VAR 0 1
41645: ST_TO_ADDR
// end ;
41646: LD_VAR 0 2
41650: RET
// export function Join ( array , element ) ; begin
41651: LD_INT 0
41653: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41654: LD_ADDR_VAR 0 3
41658: PUSH
41659: LD_VAR 0 1
41663: PPUSH
41664: LD_VAR 0 1
41668: PUSH
41669: LD_INT 1
41671: PLUS
41672: PPUSH
41673: LD_VAR 0 2
41677: PPUSH
41678: CALL_OW 1
41682: ST_TO_ADDR
// end ;
41683: LD_VAR 0 3
41687: RET
// export function JoinUnion ( array , element ) ; begin
41688: LD_INT 0
41690: PPUSH
// result := array union element ;
41691: LD_ADDR_VAR 0 3
41695: PUSH
41696: LD_VAR 0 1
41700: PUSH
41701: LD_VAR 0 2
41705: UNION
41706: ST_TO_ADDR
// end ;
41707: LD_VAR 0 3
41711: RET
// export function GetBehemoths ( side ) ; begin
41712: LD_INT 0
41714: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
41715: LD_ADDR_VAR 0 2
41719: PUSH
41720: LD_INT 22
41722: PUSH
41723: LD_VAR 0 1
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 31
41734: PUSH
41735: LD_INT 25
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PPUSH
41746: CALL_OW 69
41750: ST_TO_ADDR
// end ;
41751: LD_VAR 0 2
41755: RET
// export function Shuffle ( array ) ; var i , index ; begin
41756: LD_INT 0
41758: PPUSH
41759: PPUSH
41760: PPUSH
// result := [ ] ;
41761: LD_ADDR_VAR 0 2
41765: PUSH
41766: EMPTY
41767: ST_TO_ADDR
// if not array then
41768: LD_VAR 0 1
41772: NOT
41773: IFFALSE 41777
// exit ;
41775: GO 41876
// Randomize ;
41777: CALL_OW 10
// for i = array downto 1 do
41781: LD_ADDR_VAR 0 3
41785: PUSH
41786: DOUBLE
41787: LD_VAR 0 1
41791: INC
41792: ST_TO_ADDR
41793: LD_INT 1
41795: PUSH
41796: FOR_DOWNTO
41797: IFFALSE 41874
// begin index := rand ( 1 , array ) ;
41799: LD_ADDR_VAR 0 4
41803: PUSH
41804: LD_INT 1
41806: PPUSH
41807: LD_VAR 0 1
41811: PPUSH
41812: CALL_OW 12
41816: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41817: LD_ADDR_VAR 0 2
41821: PUSH
41822: LD_VAR 0 2
41826: PPUSH
41827: LD_VAR 0 2
41831: PUSH
41832: LD_INT 1
41834: PLUS
41835: PPUSH
41836: LD_VAR 0 1
41840: PUSH
41841: LD_VAR 0 4
41845: ARRAY
41846: PPUSH
41847: CALL_OW 2
41851: ST_TO_ADDR
// array := Delete ( array , index ) ;
41852: LD_ADDR_VAR 0 1
41856: PUSH
41857: LD_VAR 0 1
41861: PPUSH
41862: LD_VAR 0 4
41866: PPUSH
41867: CALL_OW 3
41871: ST_TO_ADDR
// end ;
41872: GO 41796
41874: POP
41875: POP
// end ;
41876: LD_VAR 0 2
41880: RET
// export function GetBaseMaterials ( base ) ; begin
41881: LD_INT 0
41883: PPUSH
// result := [ 0 , 0 , 0 ] ;
41884: LD_ADDR_VAR 0 2
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: LIST
41902: ST_TO_ADDR
// if not base then
41903: LD_VAR 0 1
41907: NOT
41908: IFFALSE 41912
// exit ;
41910: GO 41961
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41912: LD_ADDR_VAR 0 2
41916: PUSH
41917: LD_VAR 0 1
41921: PPUSH
41922: LD_INT 1
41924: PPUSH
41925: CALL_OW 275
41929: PUSH
41930: LD_VAR 0 1
41934: PPUSH
41935: LD_INT 2
41937: PPUSH
41938: CALL_OW 275
41942: PUSH
41943: LD_VAR 0 1
41947: PPUSH
41948: LD_INT 3
41950: PPUSH
41951: CALL_OW 275
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: LIST
41960: ST_TO_ADDR
// end ;
41961: LD_VAR 0 2
41965: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41966: LD_INT 0
41968: PPUSH
41969: PPUSH
// result := array ;
41970: LD_ADDR_VAR 0 3
41974: PUSH
41975: LD_VAR 0 1
41979: ST_TO_ADDR
// if size >= result then
41980: LD_VAR 0 2
41984: PUSH
41985: LD_VAR 0 3
41989: GREATEREQUAL
41990: IFFALSE 41994
// exit ;
41992: GO 42044
// if size then
41994: LD_VAR 0 2
41998: IFFALSE 42044
// for i := array downto size do
42000: LD_ADDR_VAR 0 4
42004: PUSH
42005: DOUBLE
42006: LD_VAR 0 1
42010: INC
42011: ST_TO_ADDR
42012: LD_VAR 0 2
42016: PUSH
42017: FOR_DOWNTO
42018: IFFALSE 42042
// result := Delete ( result , result ) ;
42020: LD_ADDR_VAR 0 3
42024: PUSH
42025: LD_VAR 0 3
42029: PPUSH
42030: LD_VAR 0 3
42034: PPUSH
42035: CALL_OW 3
42039: ST_TO_ADDR
42040: GO 42017
42042: POP
42043: POP
// end ;
42044: LD_VAR 0 3
42048: RET
// export function ComExit ( unit ) ; var tmp ; begin
42049: LD_INT 0
42051: PPUSH
42052: PPUSH
// if not IsInUnit ( unit ) then
42053: LD_VAR 0 1
42057: PPUSH
42058: CALL_OW 310
42062: NOT
42063: IFFALSE 42067
// exit ;
42065: GO 42127
// tmp := IsInUnit ( unit ) ;
42067: LD_ADDR_VAR 0 3
42071: PUSH
42072: LD_VAR 0 1
42076: PPUSH
42077: CALL_OW 310
42081: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42082: LD_VAR 0 3
42086: PPUSH
42087: CALL_OW 247
42091: PUSH
42092: LD_INT 2
42094: EQUAL
42095: IFFALSE 42108
// ComExitVehicle ( unit ) else
42097: LD_VAR 0 1
42101: PPUSH
42102: CALL_OW 121
42106: GO 42117
// ComExitBuilding ( unit ) ;
42108: LD_VAR 0 1
42112: PPUSH
42113: CALL_OW 122
// result := tmp ;
42117: LD_ADDR_VAR 0 2
42121: PUSH
42122: LD_VAR 0 3
42126: ST_TO_ADDR
// end ;
42127: LD_VAR 0 2
42131: RET
// export function ComExitAll ( units ) ; var i ; begin
42132: LD_INT 0
42134: PPUSH
42135: PPUSH
// if not units then
42136: LD_VAR 0 1
42140: NOT
42141: IFFALSE 42145
// exit ;
42143: GO 42171
// for i in units do
42145: LD_ADDR_VAR 0 3
42149: PUSH
42150: LD_VAR 0 1
42154: PUSH
42155: FOR_IN
42156: IFFALSE 42169
// ComExit ( i ) ;
42158: LD_VAR 0 3
42162: PPUSH
42163: CALL 42049 0 1
42167: GO 42155
42169: POP
42170: POP
// end ;
42171: LD_VAR 0 2
42175: RET
// export function ResetHc ; begin
42176: LD_INT 0
42178: PPUSH
// InitHc ;
42179: CALL_OW 19
// hc_importance := 0 ;
42183: LD_ADDR_OWVAR 32
42187: PUSH
42188: LD_INT 0
42190: ST_TO_ADDR
// end ;
42191: LD_VAR 0 1
42195: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42196: LD_INT 0
42198: PPUSH
42199: PPUSH
42200: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42201: LD_ADDR_VAR 0 6
42205: PUSH
42206: LD_VAR 0 1
42210: PUSH
42211: LD_VAR 0 3
42215: PLUS
42216: PUSH
42217: LD_INT 2
42219: DIV
42220: ST_TO_ADDR
// if _x < 0 then
42221: LD_VAR 0 6
42225: PUSH
42226: LD_INT 0
42228: LESS
42229: IFFALSE 42246
// _x := _x * - 1 ;
42231: LD_ADDR_VAR 0 6
42235: PUSH
42236: LD_VAR 0 6
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: MUL
42245: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42246: LD_ADDR_VAR 0 7
42250: PUSH
42251: LD_VAR 0 2
42255: PUSH
42256: LD_VAR 0 4
42260: PLUS
42261: PUSH
42262: LD_INT 2
42264: DIV
42265: ST_TO_ADDR
// if _y < 0 then
42266: LD_VAR 0 7
42270: PUSH
42271: LD_INT 0
42273: LESS
42274: IFFALSE 42291
// _y := _y * - 1 ;
42276: LD_ADDR_VAR 0 7
42280: PUSH
42281: LD_VAR 0 7
42285: PUSH
42286: LD_INT 1
42288: NEG
42289: MUL
42290: ST_TO_ADDR
// result := [ _x , _y ] ;
42291: LD_ADDR_VAR 0 5
42295: PUSH
42296: LD_VAR 0 6
42300: PUSH
42301: LD_VAR 0 7
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: ST_TO_ADDR
// end ;
42310: LD_VAR 0 5
42314: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42315: LD_INT 0
42317: PPUSH
42318: PPUSH
42319: PPUSH
42320: PPUSH
// task := GetTaskList ( unit ) ;
42321: LD_ADDR_VAR 0 7
42325: PUSH
42326: LD_VAR 0 1
42330: PPUSH
42331: CALL_OW 437
42335: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42336: LD_VAR 0 7
42340: NOT
42341: PUSH
42342: LD_VAR 0 1
42346: PPUSH
42347: LD_VAR 0 2
42351: PPUSH
42352: CALL_OW 308
42356: NOT
42357: AND
42358: IFFALSE 42362
// exit ;
42360: GO 42480
// if IsInArea ( unit , area ) then
42362: LD_VAR 0 1
42366: PPUSH
42367: LD_VAR 0 2
42371: PPUSH
42372: CALL_OW 308
42376: IFFALSE 42394
// begin ComMoveToArea ( unit , goAway ) ;
42378: LD_VAR 0 1
42382: PPUSH
42383: LD_VAR 0 3
42387: PPUSH
42388: CALL_OW 113
// exit ;
42392: GO 42480
// end ; if task [ 1 ] [ 1 ] <> M then
42394: LD_VAR 0 7
42398: PUSH
42399: LD_INT 1
42401: ARRAY
42402: PUSH
42403: LD_INT 1
42405: ARRAY
42406: PUSH
42407: LD_STRING M
42409: NONEQUAL
42410: IFFALSE 42414
// exit ;
42412: GO 42480
// x := task [ 1 ] [ 2 ] ;
42414: LD_ADDR_VAR 0 5
42418: PUSH
42419: LD_VAR 0 7
42423: PUSH
42424: LD_INT 1
42426: ARRAY
42427: PUSH
42428: LD_INT 2
42430: ARRAY
42431: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42432: LD_ADDR_VAR 0 6
42436: PUSH
42437: LD_VAR 0 7
42441: PUSH
42442: LD_INT 1
42444: ARRAY
42445: PUSH
42446: LD_INT 3
42448: ARRAY
42449: ST_TO_ADDR
// if InArea ( x , y , area ) then
42450: LD_VAR 0 5
42454: PPUSH
42455: LD_VAR 0 6
42459: PPUSH
42460: LD_VAR 0 2
42464: PPUSH
42465: CALL_OW 309
42469: IFFALSE 42480
// ComStop ( unit ) ;
42471: LD_VAR 0 1
42475: PPUSH
42476: CALL_OW 141
// end ;
42480: LD_VAR 0 4
42484: RET
// export function Abs ( value ) ; begin
42485: LD_INT 0
42487: PPUSH
// result := value ;
42488: LD_ADDR_VAR 0 2
42492: PUSH
42493: LD_VAR 0 1
42497: ST_TO_ADDR
// if value < 0 then
42498: LD_VAR 0 1
42502: PUSH
42503: LD_INT 0
42505: LESS
42506: IFFALSE 42523
// result := value * - 1 ;
42508: LD_ADDR_VAR 0 2
42512: PUSH
42513: LD_VAR 0 1
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: MUL
42522: ST_TO_ADDR
// end ;
42523: LD_VAR 0 2
42527: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42528: LD_INT 0
42530: PPUSH
42531: PPUSH
42532: PPUSH
42533: PPUSH
42534: PPUSH
42535: PPUSH
42536: PPUSH
42537: PPUSH
// if not unit or not building then
42538: LD_VAR 0 1
42542: NOT
42543: PUSH
42544: LD_VAR 0 2
42548: NOT
42549: OR
42550: IFFALSE 42554
// exit ;
42552: GO 42780
// x := GetX ( building ) ;
42554: LD_ADDR_VAR 0 4
42558: PUSH
42559: LD_VAR 0 2
42563: PPUSH
42564: CALL_OW 250
42568: ST_TO_ADDR
// y := GetY ( building ) ;
42569: LD_ADDR_VAR 0 6
42573: PUSH
42574: LD_VAR 0 2
42578: PPUSH
42579: CALL_OW 251
42583: ST_TO_ADDR
// d := GetDir ( building ) ;
42584: LD_ADDR_VAR 0 8
42588: PUSH
42589: LD_VAR 0 2
42593: PPUSH
42594: CALL_OW 254
42598: ST_TO_ADDR
// r := 4 ;
42599: LD_ADDR_VAR 0 9
42603: PUSH
42604: LD_INT 4
42606: ST_TO_ADDR
// for i := 1 to 5 do
42607: LD_ADDR_VAR 0 10
42611: PUSH
42612: DOUBLE
42613: LD_INT 1
42615: DEC
42616: ST_TO_ADDR
42617: LD_INT 5
42619: PUSH
42620: FOR_TO
42621: IFFALSE 42778
// begin _x := ShiftX ( x , d , r + i ) ;
42623: LD_ADDR_VAR 0 5
42627: PUSH
42628: LD_VAR 0 4
42632: PPUSH
42633: LD_VAR 0 8
42637: PPUSH
42638: LD_VAR 0 9
42642: PUSH
42643: LD_VAR 0 10
42647: PLUS
42648: PPUSH
42649: CALL_OW 272
42653: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42654: LD_ADDR_VAR 0 7
42658: PUSH
42659: LD_VAR 0 6
42663: PPUSH
42664: LD_VAR 0 8
42668: PPUSH
42669: LD_VAR 0 9
42673: PUSH
42674: LD_VAR 0 10
42678: PLUS
42679: PPUSH
42680: CALL_OW 273
42684: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42685: LD_VAR 0 5
42689: PPUSH
42690: LD_VAR 0 7
42694: PPUSH
42695: CALL_OW 488
42699: PUSH
42700: LD_VAR 0 5
42704: PPUSH
42705: LD_VAR 0 7
42709: PPUSH
42710: CALL_OW 428
42714: PPUSH
42715: CALL_OW 247
42719: PUSH
42720: LD_INT 3
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: IN
42730: NOT
42731: AND
42732: IFFALSE 42776
// begin ComMoveXY ( unit , _x , _y ) ;
42734: LD_VAR 0 1
42738: PPUSH
42739: LD_VAR 0 5
42743: PPUSH
42744: LD_VAR 0 7
42748: PPUSH
42749: CALL_OW 111
// result := [ _x , _y ] ;
42753: LD_ADDR_VAR 0 3
42757: PUSH
42758: LD_VAR 0 5
42762: PUSH
42763: LD_VAR 0 7
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: ST_TO_ADDR
// exit ;
42772: POP
42773: POP
42774: GO 42780
// end ; end ;
42776: GO 42620
42778: POP
42779: POP
// end ;
42780: LD_VAR 0 3
42784: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42785: LD_INT 0
42787: PPUSH
42788: PPUSH
42789: PPUSH
// result := 0 ;
42790: LD_ADDR_VAR 0 3
42794: PUSH
42795: LD_INT 0
42797: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42798: LD_VAR 0 1
42802: PUSH
42803: LD_INT 0
42805: LESS
42806: PUSH
42807: LD_VAR 0 1
42811: PUSH
42812: LD_INT 8
42814: GREATER
42815: OR
42816: PUSH
42817: LD_VAR 0 2
42821: PUSH
42822: LD_INT 0
42824: LESS
42825: OR
42826: PUSH
42827: LD_VAR 0 2
42831: PUSH
42832: LD_INT 8
42834: GREATER
42835: OR
42836: IFFALSE 42840
// exit ;
42838: GO 42915
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42840: LD_ADDR_VAR 0 4
42844: PUSH
42845: LD_INT 22
42847: PUSH
42848: LD_VAR 0 2
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PPUSH
42857: CALL_OW 69
42861: PUSH
42862: FOR_IN
42863: IFFALSE 42913
// begin un := UnitShoot ( i ) ;
42865: LD_ADDR_VAR 0 5
42869: PUSH
42870: LD_VAR 0 4
42874: PPUSH
42875: CALL_OW 504
42879: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42880: LD_VAR 0 5
42884: PPUSH
42885: CALL_OW 255
42889: PUSH
42890: LD_VAR 0 1
42894: EQUAL
42895: IFFALSE 42911
// begin result := un ;
42897: LD_ADDR_VAR 0 3
42901: PUSH
42902: LD_VAR 0 5
42906: ST_TO_ADDR
// exit ;
42907: POP
42908: POP
42909: GO 42915
// end ; end ;
42911: GO 42862
42913: POP
42914: POP
// end ;
42915: LD_VAR 0 3
42919: RET
// export function GetCargoBay ( units ) ; begin
42920: LD_INT 0
42922: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42923: LD_ADDR_VAR 0 2
42927: PUSH
42928: LD_VAR 0 1
42932: PPUSH
42933: LD_INT 2
42935: PUSH
42936: LD_INT 34
42938: PUSH
42939: LD_INT 12
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 34
42948: PUSH
42949: LD_INT 51
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 34
42958: PUSH
42959: LD_INT 32
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 34
42968: PUSH
42969: LD_EXP 45
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: PPUSH
42985: CALL_OW 72
42989: ST_TO_ADDR
// end ;
42990: LD_VAR 0 2
42994: RET
// export function Negate ( value ) ; begin
42995: LD_INT 0
42997: PPUSH
// result := not value ;
42998: LD_ADDR_VAR 0 2
43002: PUSH
43003: LD_VAR 0 1
43007: NOT
43008: ST_TO_ADDR
// end ;
43009: LD_VAR 0 2
43013: RET
// export function Inc ( value ) ; begin
43014: LD_INT 0
43016: PPUSH
// result := value + 1 ;
43017: LD_ADDR_VAR 0 2
43021: PUSH
43022: LD_VAR 0 1
43026: PUSH
43027: LD_INT 1
43029: PLUS
43030: ST_TO_ADDR
// end ;
43031: LD_VAR 0 2
43035: RET
// export function Dec ( value ) ; begin
43036: LD_INT 0
43038: PPUSH
// result := value - 1 ;
43039: LD_ADDR_VAR 0 2
43043: PUSH
43044: LD_VAR 0 1
43048: PUSH
43049: LD_INT 1
43051: MINUS
43052: ST_TO_ADDR
// end ;
43053: LD_VAR 0 2
43057: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43058: LD_INT 0
43060: PPUSH
43061: PPUSH
43062: PPUSH
43063: PPUSH
43064: PPUSH
43065: PPUSH
43066: PPUSH
43067: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43068: LD_VAR 0 1
43072: PPUSH
43073: LD_VAR 0 2
43077: PPUSH
43078: CALL_OW 488
43082: NOT
43083: PUSH
43084: LD_VAR 0 3
43088: PPUSH
43089: LD_VAR 0 4
43093: PPUSH
43094: CALL_OW 488
43098: NOT
43099: OR
43100: IFFALSE 43113
// begin result := - 1 ;
43102: LD_ADDR_VAR 0 5
43106: PUSH
43107: LD_INT 1
43109: NEG
43110: ST_TO_ADDR
// exit ;
43111: GO 43348
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43113: LD_ADDR_VAR 0 12
43117: PUSH
43118: LD_VAR 0 1
43122: PPUSH
43123: LD_VAR 0 2
43127: PPUSH
43128: LD_VAR 0 3
43132: PPUSH
43133: LD_VAR 0 4
43137: PPUSH
43138: CALL 42196 0 4
43142: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43143: LD_ADDR_VAR 0 11
43147: PUSH
43148: LD_VAR 0 1
43152: PPUSH
43153: LD_VAR 0 2
43157: PPUSH
43158: LD_VAR 0 12
43162: PUSH
43163: LD_INT 1
43165: ARRAY
43166: PPUSH
43167: LD_VAR 0 12
43171: PUSH
43172: LD_INT 2
43174: ARRAY
43175: PPUSH
43176: CALL_OW 298
43180: ST_TO_ADDR
// distance := 9999 ;
43181: LD_ADDR_VAR 0 10
43185: PUSH
43186: LD_INT 9999
43188: ST_TO_ADDR
// for i := 0 to 5 do
43189: LD_ADDR_VAR 0 6
43193: PUSH
43194: DOUBLE
43195: LD_INT 0
43197: DEC
43198: ST_TO_ADDR
43199: LD_INT 5
43201: PUSH
43202: FOR_TO
43203: IFFALSE 43346
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43205: LD_ADDR_VAR 0 7
43209: PUSH
43210: LD_VAR 0 1
43214: PPUSH
43215: LD_VAR 0 6
43219: PPUSH
43220: LD_VAR 0 11
43224: PPUSH
43225: CALL_OW 272
43229: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43230: LD_ADDR_VAR 0 8
43234: PUSH
43235: LD_VAR 0 2
43239: PPUSH
43240: LD_VAR 0 6
43244: PPUSH
43245: LD_VAR 0 11
43249: PPUSH
43250: CALL_OW 273
43254: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43255: LD_VAR 0 7
43259: PPUSH
43260: LD_VAR 0 8
43264: PPUSH
43265: CALL_OW 488
43269: NOT
43270: IFFALSE 43274
// continue ;
43272: GO 43202
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43274: LD_ADDR_VAR 0 9
43278: PUSH
43279: LD_VAR 0 12
43283: PUSH
43284: LD_INT 1
43286: ARRAY
43287: PPUSH
43288: LD_VAR 0 12
43292: PUSH
43293: LD_INT 2
43295: ARRAY
43296: PPUSH
43297: LD_VAR 0 7
43301: PPUSH
43302: LD_VAR 0 8
43306: PPUSH
43307: CALL_OW 298
43311: ST_TO_ADDR
// if tmp < distance then
43312: LD_VAR 0 9
43316: PUSH
43317: LD_VAR 0 10
43321: LESS
43322: IFFALSE 43344
// begin result := i ;
43324: LD_ADDR_VAR 0 5
43328: PUSH
43329: LD_VAR 0 6
43333: ST_TO_ADDR
// distance := tmp ;
43334: LD_ADDR_VAR 0 10
43338: PUSH
43339: LD_VAR 0 9
43343: ST_TO_ADDR
// end ; end ;
43344: GO 43202
43346: POP
43347: POP
// end ;
43348: LD_VAR 0 5
43352: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43353: LD_INT 0
43355: PPUSH
43356: PPUSH
// if not driver or not IsInUnit ( driver ) then
43357: LD_VAR 0 1
43361: NOT
43362: PUSH
43363: LD_VAR 0 1
43367: PPUSH
43368: CALL_OW 310
43372: NOT
43373: OR
43374: IFFALSE 43378
// exit ;
43376: GO 43468
// vehicle := IsInUnit ( driver ) ;
43378: LD_ADDR_VAR 0 3
43382: PUSH
43383: LD_VAR 0 1
43387: PPUSH
43388: CALL_OW 310
43392: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43393: LD_VAR 0 1
43397: PPUSH
43398: LD_STRING \
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: LD_INT 0
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 0
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: PUSH
43428: LD_STRING E
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: LD_VAR 0 3
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PPUSH
43464: CALL_OW 446
// end ;
43468: LD_VAR 0 2
43472: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43473: LD_INT 0
43475: PPUSH
43476: PPUSH
// if not driver or not IsInUnit ( driver ) then
43477: LD_VAR 0 1
43481: NOT
43482: PUSH
43483: LD_VAR 0 1
43487: PPUSH
43488: CALL_OW 310
43492: NOT
43493: OR
43494: IFFALSE 43498
// exit ;
43496: GO 43588
// vehicle := IsInUnit ( driver ) ;
43498: LD_ADDR_VAR 0 3
43502: PUSH
43503: LD_VAR 0 1
43507: PPUSH
43508: CALL_OW 310
43512: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43513: LD_VAR 0 1
43517: PPUSH
43518: LD_STRING \
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: LD_INT 0
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: PUSH
43548: LD_STRING E
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: LD_VAR 0 3
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PPUSH
43584: CALL_OW 447
// end ;
43588: LD_VAR 0 2
43592: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43593: LD_INT 0
43595: PPUSH
43596: PPUSH
43597: PPUSH
// tmp := [ ] ;
43598: LD_ADDR_VAR 0 5
43602: PUSH
43603: EMPTY
43604: ST_TO_ADDR
// for i in units do
43605: LD_ADDR_VAR 0 4
43609: PUSH
43610: LD_VAR 0 1
43614: PUSH
43615: FOR_IN
43616: IFFALSE 43654
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43618: LD_ADDR_VAR 0 5
43622: PUSH
43623: LD_VAR 0 5
43627: PPUSH
43628: LD_VAR 0 5
43632: PUSH
43633: LD_INT 1
43635: PLUS
43636: PPUSH
43637: LD_VAR 0 4
43641: PPUSH
43642: CALL_OW 256
43646: PPUSH
43647: CALL_OW 2
43651: ST_TO_ADDR
43652: GO 43615
43654: POP
43655: POP
// if not tmp then
43656: LD_VAR 0 5
43660: NOT
43661: IFFALSE 43665
// exit ;
43663: GO 43713
// if asc then
43665: LD_VAR 0 2
43669: IFFALSE 43693
// result := SortListByListAsc ( units , tmp ) else
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_VAR 0 1
43680: PPUSH
43681: LD_VAR 0 5
43685: PPUSH
43686: CALL_OW 76
43690: ST_TO_ADDR
43691: GO 43713
// result := SortListByListDesc ( units , tmp ) ;
43693: LD_ADDR_VAR 0 3
43697: PUSH
43698: LD_VAR 0 1
43702: PPUSH
43703: LD_VAR 0 5
43707: PPUSH
43708: CALL_OW 77
43712: ST_TO_ADDR
// end ;
43713: LD_VAR 0 3
43717: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43718: LD_INT 0
43720: PPUSH
43721: PPUSH
// task := GetTaskList ( mech ) ;
43722: LD_ADDR_VAR 0 4
43726: PUSH
43727: LD_VAR 0 1
43731: PPUSH
43732: CALL_OW 437
43736: ST_TO_ADDR
// if not task then
43737: LD_VAR 0 4
43741: NOT
43742: IFFALSE 43746
// exit ;
43744: GO 43788
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43746: LD_ADDR_VAR 0 3
43750: PUSH
43751: LD_VAR 0 4
43755: PUSH
43756: LD_INT 1
43758: ARRAY
43759: PUSH
43760: LD_INT 1
43762: ARRAY
43763: PUSH
43764: LD_STRING r
43766: EQUAL
43767: PUSH
43768: LD_VAR 0 4
43772: PUSH
43773: LD_INT 1
43775: ARRAY
43776: PUSH
43777: LD_INT 4
43779: ARRAY
43780: PUSH
43781: LD_VAR 0 2
43785: EQUAL
43786: AND
43787: ST_TO_ADDR
// end ;
43788: LD_VAR 0 3
43792: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43793: LD_INT 0
43795: PPUSH
// SetDir ( unit , d ) ;
43796: LD_VAR 0 1
43800: PPUSH
43801: LD_VAR 0 4
43805: PPUSH
43806: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43810: LD_VAR 0 1
43814: PPUSH
43815: LD_VAR 0 2
43819: PPUSH
43820: LD_VAR 0 3
43824: PPUSH
43825: LD_VAR 0 5
43829: PPUSH
43830: CALL_OW 48
// end ;
43834: LD_VAR 0 6
43838: RET
// export function ToNaturalNumber ( number ) ; begin
43839: LD_INT 0
43841: PPUSH
// result := number div 1 ;
43842: LD_ADDR_VAR 0 2
43846: PUSH
43847: LD_VAR 0 1
43851: PUSH
43852: LD_INT 1
43854: DIV
43855: ST_TO_ADDR
// if number < 0 then
43856: LD_VAR 0 1
43860: PUSH
43861: LD_INT 0
43863: LESS
43864: IFFALSE 43874
// result := 0 ;
43866: LD_ADDR_VAR 0 2
43870: PUSH
43871: LD_INT 0
43873: ST_TO_ADDR
// end ;
43874: LD_VAR 0 2
43878: RET
// export function SortByClass ( units , class ) ; var un ; begin
43879: LD_INT 0
43881: PPUSH
43882: PPUSH
// if not units or not class then
43883: LD_VAR 0 1
43887: NOT
43888: PUSH
43889: LD_VAR 0 2
43893: NOT
43894: OR
43895: IFFALSE 43899
// exit ;
43897: GO 43994
// result := [ ] ;
43899: LD_ADDR_VAR 0 3
43903: PUSH
43904: EMPTY
43905: ST_TO_ADDR
// for un in units do
43906: LD_ADDR_VAR 0 4
43910: PUSH
43911: LD_VAR 0 1
43915: PUSH
43916: FOR_IN
43917: IFFALSE 43992
// if GetClass ( un ) = class then
43919: LD_VAR 0 4
43923: PPUSH
43924: CALL_OW 257
43928: PUSH
43929: LD_VAR 0 2
43933: EQUAL
43934: IFFALSE 43961
// result := Insert ( result , 1 , un ) else
43936: LD_ADDR_VAR 0 3
43940: PUSH
43941: LD_VAR 0 3
43945: PPUSH
43946: LD_INT 1
43948: PPUSH
43949: LD_VAR 0 4
43953: PPUSH
43954: CALL_OW 2
43958: ST_TO_ADDR
43959: GO 43990
// result := Replace ( result , result + 1 , un ) ;
43961: LD_ADDR_VAR 0 3
43965: PUSH
43966: LD_VAR 0 3
43970: PPUSH
43971: LD_VAR 0 3
43975: PUSH
43976: LD_INT 1
43978: PLUS
43979: PPUSH
43980: LD_VAR 0 4
43984: PPUSH
43985: CALL_OW 1
43989: ST_TO_ADDR
43990: GO 43916
43992: POP
43993: POP
// end ;
43994: LD_VAR 0 3
43998: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43999: LD_INT 0
44001: PPUSH
44002: PPUSH
44003: PPUSH
44004: PPUSH
44005: PPUSH
44006: PPUSH
44007: PPUSH
// result := [ ] ;
44008: LD_ADDR_VAR 0 4
44012: PUSH
44013: EMPTY
44014: ST_TO_ADDR
// if x - r < 0 then
44015: LD_VAR 0 1
44019: PUSH
44020: LD_VAR 0 3
44024: MINUS
44025: PUSH
44026: LD_INT 0
44028: LESS
44029: IFFALSE 44041
// min_x := 0 else
44031: LD_ADDR_VAR 0 8
44035: PUSH
44036: LD_INT 0
44038: ST_TO_ADDR
44039: GO 44057
// min_x := x - r ;
44041: LD_ADDR_VAR 0 8
44045: PUSH
44046: LD_VAR 0 1
44050: PUSH
44051: LD_VAR 0 3
44055: MINUS
44056: ST_TO_ADDR
// if y - r < 0 then
44057: LD_VAR 0 2
44061: PUSH
44062: LD_VAR 0 3
44066: MINUS
44067: PUSH
44068: LD_INT 0
44070: LESS
44071: IFFALSE 44083
// min_y := 0 else
44073: LD_ADDR_VAR 0 7
44077: PUSH
44078: LD_INT 0
44080: ST_TO_ADDR
44081: GO 44099
// min_y := y - r ;
44083: LD_ADDR_VAR 0 7
44087: PUSH
44088: LD_VAR 0 2
44092: PUSH
44093: LD_VAR 0 3
44097: MINUS
44098: ST_TO_ADDR
// max_x := x + r ;
44099: LD_ADDR_VAR 0 9
44103: PUSH
44104: LD_VAR 0 1
44108: PUSH
44109: LD_VAR 0 3
44113: PLUS
44114: ST_TO_ADDR
// max_y := y + r ;
44115: LD_ADDR_VAR 0 10
44119: PUSH
44120: LD_VAR 0 2
44124: PUSH
44125: LD_VAR 0 3
44129: PLUS
44130: ST_TO_ADDR
// for _x = min_x to max_x do
44131: LD_ADDR_VAR 0 5
44135: PUSH
44136: DOUBLE
44137: LD_VAR 0 8
44141: DEC
44142: ST_TO_ADDR
44143: LD_VAR 0 9
44147: PUSH
44148: FOR_TO
44149: IFFALSE 44250
// for _y = min_y to max_y do
44151: LD_ADDR_VAR 0 6
44155: PUSH
44156: DOUBLE
44157: LD_VAR 0 7
44161: DEC
44162: ST_TO_ADDR
44163: LD_VAR 0 10
44167: PUSH
44168: FOR_TO
44169: IFFALSE 44246
// begin if not ValidHex ( _x , _y ) then
44171: LD_VAR 0 5
44175: PPUSH
44176: LD_VAR 0 6
44180: PPUSH
44181: CALL_OW 488
44185: NOT
44186: IFFALSE 44190
// continue ;
44188: GO 44168
// if GetResourceTypeXY ( _x , _y ) then
44190: LD_VAR 0 5
44194: PPUSH
44195: LD_VAR 0 6
44199: PPUSH
44200: CALL_OW 283
44204: IFFALSE 44244
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44206: LD_ADDR_VAR 0 4
44210: PUSH
44211: LD_VAR 0 4
44215: PPUSH
44216: LD_VAR 0 4
44220: PUSH
44221: LD_INT 1
44223: PLUS
44224: PPUSH
44225: LD_VAR 0 5
44229: PUSH
44230: LD_VAR 0 6
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PPUSH
44239: CALL_OW 1
44243: ST_TO_ADDR
// end ;
44244: GO 44168
44246: POP
44247: POP
44248: GO 44148
44250: POP
44251: POP
// end ;
44252: LD_VAR 0 4
44256: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44257: LD_INT 0
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
// if not units then
44267: LD_VAR 0 1
44271: NOT
44272: IFFALSE 44276
// exit ;
44274: GO 44802
// result := UnitFilter ( units , [ f_ok ] ) ;
44276: LD_ADDR_VAR 0 3
44280: PUSH
44281: LD_VAR 0 1
44285: PPUSH
44286: LD_INT 50
44288: PUSH
44289: EMPTY
44290: LIST
44291: PPUSH
44292: CALL_OW 72
44296: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44297: LD_ADDR_VAR 0 8
44301: PUSH
44302: LD_VAR 0 1
44306: PUSH
44307: LD_INT 1
44309: ARRAY
44310: PPUSH
44311: CALL_OW 255
44315: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44316: LD_ADDR_VAR 0 10
44320: PUSH
44321: LD_INT 29
44323: PUSH
44324: LD_EXP 48
44328: PUSH
44329: LD_INT 49
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: LIST
44336: ST_TO_ADDR
// if not result then
44337: LD_VAR 0 3
44341: NOT
44342: IFFALSE 44346
// exit ;
44344: GO 44802
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44346: LD_ADDR_VAR 0 5
44350: PUSH
44351: LD_INT 81
44353: PUSH
44354: LD_VAR 0 8
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PPUSH
44363: CALL_OW 69
44367: ST_TO_ADDR
// for i in result do
44368: LD_ADDR_VAR 0 4
44372: PUSH
44373: LD_VAR 0 3
44377: PUSH
44378: FOR_IN
44379: IFFALSE 44800
// begin tag := GetTag ( i ) + 1 ;
44381: LD_ADDR_VAR 0 9
44385: PUSH
44386: LD_VAR 0 4
44390: PPUSH
44391: CALL_OW 110
44395: PUSH
44396: LD_INT 1
44398: PLUS
44399: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
44400: LD_ADDR_VAR 0 7
44404: PUSH
44405: LD_VAR 0 4
44409: PPUSH
44410: CALL_OW 250
44414: PPUSH
44415: LD_VAR 0 4
44419: PPUSH
44420: CALL_OW 251
44424: PPUSH
44425: LD_INT 6
44427: PPUSH
44428: CALL 43999 0 3
44432: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
44433: LD_VAR 0 4
44437: PPUSH
44438: CALL_OW 247
44442: PUSH
44443: LD_INT 2
44445: EQUAL
44446: PUSH
44447: LD_VAR 0 7
44451: AND
44452: PUSH
44453: LD_VAR 0 4
44457: PPUSH
44458: CALL_OW 264
44462: PUSH
44463: LD_VAR 0 10
44467: IN
44468: NOT
44469: AND
44470: IFFALSE 44509
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44472: LD_VAR 0 4
44476: PPUSH
44477: LD_VAR 0 7
44481: PUSH
44482: LD_INT 1
44484: ARRAY
44485: PUSH
44486: LD_INT 1
44488: ARRAY
44489: PPUSH
44490: LD_VAR 0 7
44494: PUSH
44495: LD_INT 1
44497: ARRAY
44498: PUSH
44499: LD_INT 2
44501: ARRAY
44502: PPUSH
44503: CALL_OW 116
44507: GO 44798
// if path > tag then
44509: LD_VAR 0 2
44513: PUSH
44514: LD_VAR 0 9
44518: GREATER
44519: IFFALSE 44727
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44521: LD_ADDR_VAR 0 6
44525: PUSH
44526: LD_VAR 0 5
44530: PPUSH
44531: LD_INT 91
44533: PUSH
44534: LD_VAR 0 4
44538: PUSH
44539: LD_INT 8
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: LIST
44546: PPUSH
44547: CALL_OW 72
44551: ST_TO_ADDR
// if nearEnemy then
44552: LD_VAR 0 6
44556: IFFALSE 44625
// begin if GetWeapon ( i ) = ru_time_lapser then
44558: LD_VAR 0 4
44562: PPUSH
44563: CALL_OW 264
44567: PUSH
44568: LD_INT 49
44570: EQUAL
44571: IFFALSE 44599
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44573: LD_VAR 0 4
44577: PPUSH
44578: LD_VAR 0 6
44582: PPUSH
44583: LD_VAR 0 4
44587: PPUSH
44588: CALL_OW 74
44592: PPUSH
44593: CALL_OW 112
44597: GO 44623
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44599: LD_VAR 0 4
44603: PPUSH
44604: LD_VAR 0 6
44608: PPUSH
44609: LD_VAR 0 4
44613: PPUSH
44614: CALL_OW 74
44618: PPUSH
44619: CALL_OW 115
// end else
44623: GO 44725
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44625: LD_VAR 0 4
44629: PPUSH
44630: LD_VAR 0 2
44634: PUSH
44635: LD_VAR 0 9
44639: ARRAY
44640: PUSH
44641: LD_INT 1
44643: ARRAY
44644: PPUSH
44645: LD_VAR 0 2
44649: PUSH
44650: LD_VAR 0 9
44654: ARRAY
44655: PUSH
44656: LD_INT 2
44658: ARRAY
44659: PPUSH
44660: CALL_OW 297
44664: PUSH
44665: LD_INT 6
44667: GREATER
44668: IFFALSE 44711
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44670: LD_VAR 0 4
44674: PPUSH
44675: LD_VAR 0 2
44679: PUSH
44680: LD_VAR 0 9
44684: ARRAY
44685: PUSH
44686: LD_INT 1
44688: ARRAY
44689: PPUSH
44690: LD_VAR 0 2
44694: PUSH
44695: LD_VAR 0 9
44699: ARRAY
44700: PUSH
44701: LD_INT 2
44703: ARRAY
44704: PPUSH
44705: CALL_OW 114
44709: GO 44725
// SetTag ( i , tag ) ;
44711: LD_VAR 0 4
44715: PPUSH
44716: LD_VAR 0 9
44720: PPUSH
44721: CALL_OW 109
// end else
44725: GO 44798
// if enemy then
44727: LD_VAR 0 5
44731: IFFALSE 44798
// begin if GetWeapon ( i ) = ru_time_lapser then
44733: LD_VAR 0 4
44737: PPUSH
44738: CALL_OW 264
44742: PUSH
44743: LD_INT 49
44745: EQUAL
44746: IFFALSE 44774
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44748: LD_VAR 0 4
44752: PPUSH
44753: LD_VAR 0 5
44757: PPUSH
44758: LD_VAR 0 4
44762: PPUSH
44763: CALL_OW 74
44767: PPUSH
44768: CALL_OW 112
44772: GO 44798
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44774: LD_VAR 0 4
44778: PPUSH
44779: LD_VAR 0 5
44783: PPUSH
44784: LD_VAR 0 4
44788: PPUSH
44789: CALL_OW 74
44793: PPUSH
44794: CALL_OW 115
// end ; end ;
44798: GO 44378
44800: POP
44801: POP
// end ;
44802: LD_VAR 0 3
44806: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44807: LD_INT 0
44809: PPUSH
44810: PPUSH
44811: PPUSH
// if not unit or IsInUnit ( unit ) then
44812: LD_VAR 0 1
44816: NOT
44817: PUSH
44818: LD_VAR 0 1
44822: PPUSH
44823: CALL_OW 310
44827: OR
44828: IFFALSE 44832
// exit ;
44830: GO 44923
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44832: LD_ADDR_VAR 0 4
44836: PUSH
44837: LD_VAR 0 1
44841: PPUSH
44842: CALL_OW 250
44846: PPUSH
44847: LD_VAR 0 2
44851: PPUSH
44852: LD_INT 1
44854: PPUSH
44855: CALL_OW 272
44859: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44860: LD_ADDR_VAR 0 5
44864: PUSH
44865: LD_VAR 0 1
44869: PPUSH
44870: CALL_OW 251
44874: PPUSH
44875: LD_VAR 0 2
44879: PPUSH
44880: LD_INT 1
44882: PPUSH
44883: CALL_OW 273
44887: ST_TO_ADDR
// if ValidHex ( x , y ) then
44888: LD_VAR 0 4
44892: PPUSH
44893: LD_VAR 0 5
44897: PPUSH
44898: CALL_OW 488
44902: IFFALSE 44923
// ComTurnXY ( unit , x , y ) ;
44904: LD_VAR 0 1
44908: PPUSH
44909: LD_VAR 0 4
44913: PPUSH
44914: LD_VAR 0 5
44918: PPUSH
44919: CALL_OW 118
// end ;
44923: LD_VAR 0 3
44927: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44928: LD_INT 0
44930: PPUSH
44931: PPUSH
// result := false ;
44932: LD_ADDR_VAR 0 3
44936: PUSH
44937: LD_INT 0
44939: ST_TO_ADDR
// if not units then
44940: LD_VAR 0 2
44944: NOT
44945: IFFALSE 44949
// exit ;
44947: GO 44994
// for i in units do
44949: LD_ADDR_VAR 0 4
44953: PUSH
44954: LD_VAR 0 2
44958: PUSH
44959: FOR_IN
44960: IFFALSE 44992
// if See ( side , i ) then
44962: LD_VAR 0 1
44966: PPUSH
44967: LD_VAR 0 4
44971: PPUSH
44972: CALL_OW 292
44976: IFFALSE 44990
// begin result := true ;
44978: LD_ADDR_VAR 0 3
44982: PUSH
44983: LD_INT 1
44985: ST_TO_ADDR
// exit ;
44986: POP
44987: POP
44988: GO 44994
// end ;
44990: GO 44959
44992: POP
44993: POP
// end ;
44994: LD_VAR 0 3
44998: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44999: LD_INT 0
45001: PPUSH
45002: PPUSH
45003: PPUSH
45004: PPUSH
// if not unit or not points then
45005: LD_VAR 0 1
45009: NOT
45010: PUSH
45011: LD_VAR 0 2
45015: NOT
45016: OR
45017: IFFALSE 45021
// exit ;
45019: GO 45111
// dist := 99999 ;
45021: LD_ADDR_VAR 0 5
45025: PUSH
45026: LD_INT 99999
45028: ST_TO_ADDR
// for i in points do
45029: LD_ADDR_VAR 0 4
45033: PUSH
45034: LD_VAR 0 2
45038: PUSH
45039: FOR_IN
45040: IFFALSE 45109
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45042: LD_ADDR_VAR 0 6
45046: PUSH
45047: LD_VAR 0 1
45051: PPUSH
45052: LD_VAR 0 4
45056: PUSH
45057: LD_INT 1
45059: ARRAY
45060: PPUSH
45061: LD_VAR 0 4
45065: PUSH
45066: LD_INT 2
45068: ARRAY
45069: PPUSH
45070: CALL_OW 297
45074: ST_TO_ADDR
// if tmpDist < dist then
45075: LD_VAR 0 6
45079: PUSH
45080: LD_VAR 0 5
45084: LESS
45085: IFFALSE 45107
// begin result := i ;
45087: LD_ADDR_VAR 0 3
45091: PUSH
45092: LD_VAR 0 4
45096: ST_TO_ADDR
// dist := tmpDist ;
45097: LD_ADDR_VAR 0 5
45101: PUSH
45102: LD_VAR 0 6
45106: ST_TO_ADDR
// end ; end ;
45107: GO 45039
45109: POP
45110: POP
// end ;
45111: LD_VAR 0 3
45115: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45116: LD_INT 0
45118: PPUSH
// uc_side := side ;
45119: LD_ADDR_OWVAR 20
45123: PUSH
45124: LD_VAR 0 1
45128: ST_TO_ADDR
// uc_nation := 3 ;
45129: LD_ADDR_OWVAR 21
45133: PUSH
45134: LD_INT 3
45136: ST_TO_ADDR
// vc_chassis := 25 ;
45137: LD_ADDR_OWVAR 37
45141: PUSH
45142: LD_INT 25
45144: ST_TO_ADDR
// vc_engine := engine_siberite ;
45145: LD_ADDR_OWVAR 39
45149: PUSH
45150: LD_INT 3
45152: ST_TO_ADDR
// vc_control := control_computer ;
45153: LD_ADDR_OWVAR 38
45157: PUSH
45158: LD_INT 3
45160: ST_TO_ADDR
// vc_weapon := 59 ;
45161: LD_ADDR_OWVAR 40
45165: PUSH
45166: LD_INT 59
45168: ST_TO_ADDR
// result := CreateVehicle ;
45169: LD_ADDR_VAR 0 5
45173: PUSH
45174: CALL_OW 45
45178: ST_TO_ADDR
// SetDir ( result , d ) ;
45179: LD_VAR 0 5
45183: PPUSH
45184: LD_VAR 0 4
45188: PPUSH
45189: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45193: LD_VAR 0 5
45197: PPUSH
45198: LD_VAR 0 2
45202: PPUSH
45203: LD_VAR 0 3
45207: PPUSH
45208: LD_INT 0
45210: PPUSH
45211: CALL_OW 48
// end ;
45215: LD_VAR 0 5
45219: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45220: LD_INT 0
45222: PPUSH
45223: PPUSH
45224: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45225: LD_ADDR_VAR 0 2
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45248: LD_VAR 0 1
45252: NOT
45253: PUSH
45254: LD_VAR 0 1
45258: PPUSH
45259: CALL_OW 264
45263: PUSH
45264: LD_INT 12
45266: PUSH
45267: LD_INT 51
45269: PUSH
45270: LD_INT 32
45272: PUSH
45273: LD_EXP 45
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: IN
45284: NOT
45285: OR
45286: IFFALSE 45290
// exit ;
45288: GO 45388
// for i := 1 to 3 do
45290: LD_ADDR_VAR 0 3
45294: PUSH
45295: DOUBLE
45296: LD_INT 1
45298: DEC
45299: ST_TO_ADDR
45300: LD_INT 3
45302: PUSH
45303: FOR_TO
45304: IFFALSE 45386
// begin tmp := GetCargo ( cargo , i ) ;
45306: LD_ADDR_VAR 0 4
45310: PUSH
45311: LD_VAR 0 1
45315: PPUSH
45316: LD_VAR 0 3
45320: PPUSH
45321: CALL_OW 289
45325: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45326: LD_ADDR_VAR 0 2
45330: PUSH
45331: LD_VAR 0 2
45335: PPUSH
45336: LD_VAR 0 3
45340: PPUSH
45341: LD_VAR 0 4
45345: PPUSH
45346: CALL_OW 1
45350: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45351: LD_ADDR_VAR 0 2
45355: PUSH
45356: LD_VAR 0 2
45360: PPUSH
45361: LD_INT 4
45363: PPUSH
45364: LD_VAR 0 2
45368: PUSH
45369: LD_INT 4
45371: ARRAY
45372: PUSH
45373: LD_VAR 0 4
45377: PLUS
45378: PPUSH
45379: CALL_OW 1
45383: ST_TO_ADDR
// end ;
45384: GO 45303
45386: POP
45387: POP
// end ;
45388: LD_VAR 0 2
45392: RET
// export function Length ( array ) ; begin
45393: LD_INT 0
45395: PPUSH
// result := array + 0 ;
45396: LD_ADDR_VAR 0 2
45400: PUSH
45401: LD_VAR 0 1
45405: PUSH
45406: LD_INT 0
45408: PLUS
45409: ST_TO_ADDR
// end ; end_of_file
45410: LD_VAR 0 2
45414: RET
// every 0 0$1 do
45415: GO 45417
45417: DISABLE
// begin enable ;
45418: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
45419: LD_STRING updateTimer(
45421: PUSH
45422: LD_OWVAR 1
45426: STR
45427: PUSH
45428: LD_STRING );
45430: STR
45431: PPUSH
45432: CALL_OW 559
// end ;
45436: END
// export function SOS_MapStart ( ) ; begin
45437: LD_INT 0
45439: PPUSH
// if streamModeActive then
45440: LD_EXP 63
45444: IFFALSE 45453
// DefineStreamItems ( true ) ;
45446: LD_INT 1
45448: PPUSH
45449: CALL 47107 0 1
// UpdateFactoryWaypoints ( ) ;
45453: CALL 59968 0 0
// UpdateWarhouseGatheringPoints ( ) ;
45457: CALL 60221 0 0
// end ;
45461: LD_VAR 0 1
45465: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
45466: LD_INT 0
45468: PPUSH
// if p2 = 100 then
45469: LD_VAR 0 2
45473: PUSH
45474: LD_INT 100
45476: EQUAL
45477: IFFALSE 46480
// begin if not StreamModeActive then
45479: LD_EXP 63
45483: NOT
45484: IFFALSE 45494
// StreamModeActive := true ;
45486: LD_ADDR_EXP 63
45490: PUSH
45491: LD_INT 1
45493: ST_TO_ADDR
// if p3 = 0 then
45494: LD_VAR 0 3
45498: PUSH
45499: LD_INT 0
45501: EQUAL
45502: IFFALSE 45508
// InitStreamMode ;
45504: CALL 46643 0 0
// if p3 = 1 then
45508: LD_VAR 0 3
45512: PUSH
45513: LD_INT 1
45515: EQUAL
45516: IFFALSE 45526
// sRocket := true ;
45518: LD_ADDR_EXP 68
45522: PUSH
45523: LD_INT 1
45525: ST_TO_ADDR
// if p3 = 2 then
45526: LD_VAR 0 3
45530: PUSH
45531: LD_INT 2
45533: EQUAL
45534: IFFALSE 45544
// sSpeed := true ;
45536: LD_ADDR_EXP 67
45540: PUSH
45541: LD_INT 1
45543: ST_TO_ADDR
// if p3 = 3 then
45544: LD_VAR 0 3
45548: PUSH
45549: LD_INT 3
45551: EQUAL
45552: IFFALSE 45562
// sEngine := true ;
45554: LD_ADDR_EXP 69
45558: PUSH
45559: LD_INT 1
45561: ST_TO_ADDR
// if p3 = 4 then
45562: LD_VAR 0 3
45566: PUSH
45567: LD_INT 4
45569: EQUAL
45570: IFFALSE 45580
// sSpec := true ;
45572: LD_ADDR_EXP 66
45576: PUSH
45577: LD_INT 1
45579: ST_TO_ADDR
// if p3 = 5 then
45580: LD_VAR 0 3
45584: PUSH
45585: LD_INT 5
45587: EQUAL
45588: IFFALSE 45598
// sLevel := true ;
45590: LD_ADDR_EXP 70
45594: PUSH
45595: LD_INT 1
45597: ST_TO_ADDR
// if p3 = 6 then
45598: LD_VAR 0 3
45602: PUSH
45603: LD_INT 6
45605: EQUAL
45606: IFFALSE 45616
// sArmoury := true ;
45608: LD_ADDR_EXP 71
45612: PUSH
45613: LD_INT 1
45615: ST_TO_ADDR
// if p3 = 7 then
45616: LD_VAR 0 3
45620: PUSH
45621: LD_INT 7
45623: EQUAL
45624: IFFALSE 45634
// sRadar := true ;
45626: LD_ADDR_EXP 72
45630: PUSH
45631: LD_INT 1
45633: ST_TO_ADDR
// if p3 = 8 then
45634: LD_VAR 0 3
45638: PUSH
45639: LD_INT 8
45641: EQUAL
45642: IFFALSE 45652
// sBunker := true ;
45644: LD_ADDR_EXP 73
45648: PUSH
45649: LD_INT 1
45651: ST_TO_ADDR
// if p3 = 9 then
45652: LD_VAR 0 3
45656: PUSH
45657: LD_INT 9
45659: EQUAL
45660: IFFALSE 45670
// sHack := true ;
45662: LD_ADDR_EXP 74
45666: PUSH
45667: LD_INT 1
45669: ST_TO_ADDR
// if p3 = 10 then
45670: LD_VAR 0 3
45674: PUSH
45675: LD_INT 10
45677: EQUAL
45678: IFFALSE 45688
// sFire := true ;
45680: LD_ADDR_EXP 75
45684: PUSH
45685: LD_INT 1
45687: ST_TO_ADDR
// if p3 = 11 then
45688: LD_VAR 0 3
45692: PUSH
45693: LD_INT 11
45695: EQUAL
45696: IFFALSE 45706
// sRefresh := true ;
45698: LD_ADDR_EXP 76
45702: PUSH
45703: LD_INT 1
45705: ST_TO_ADDR
// if p3 = 12 then
45706: LD_VAR 0 3
45710: PUSH
45711: LD_INT 12
45713: EQUAL
45714: IFFALSE 45724
// sExp := true ;
45716: LD_ADDR_EXP 77
45720: PUSH
45721: LD_INT 1
45723: ST_TO_ADDR
// if p3 = 13 then
45724: LD_VAR 0 3
45728: PUSH
45729: LD_INT 13
45731: EQUAL
45732: IFFALSE 45742
// sDepot := true ;
45734: LD_ADDR_EXP 78
45738: PUSH
45739: LD_INT 1
45741: ST_TO_ADDR
// if p3 = 14 then
45742: LD_VAR 0 3
45746: PUSH
45747: LD_INT 14
45749: EQUAL
45750: IFFALSE 45760
// sFlag := true ;
45752: LD_ADDR_EXP 79
45756: PUSH
45757: LD_INT 1
45759: ST_TO_ADDR
// if p3 = 15 then
45760: LD_VAR 0 3
45764: PUSH
45765: LD_INT 15
45767: EQUAL
45768: IFFALSE 45778
// sKamikadze := true ;
45770: LD_ADDR_EXP 87
45774: PUSH
45775: LD_INT 1
45777: ST_TO_ADDR
// if p3 = 16 then
45778: LD_VAR 0 3
45782: PUSH
45783: LD_INT 16
45785: EQUAL
45786: IFFALSE 45796
// sTroll := true ;
45788: LD_ADDR_EXP 88
45792: PUSH
45793: LD_INT 1
45795: ST_TO_ADDR
// if p3 = 17 then
45796: LD_VAR 0 3
45800: PUSH
45801: LD_INT 17
45803: EQUAL
45804: IFFALSE 45814
// sSlow := true ;
45806: LD_ADDR_EXP 89
45810: PUSH
45811: LD_INT 1
45813: ST_TO_ADDR
// if p3 = 18 then
45814: LD_VAR 0 3
45818: PUSH
45819: LD_INT 18
45821: EQUAL
45822: IFFALSE 45832
// sLack := true ;
45824: LD_ADDR_EXP 90
45828: PUSH
45829: LD_INT 1
45831: ST_TO_ADDR
// if p3 = 19 then
45832: LD_VAR 0 3
45836: PUSH
45837: LD_INT 19
45839: EQUAL
45840: IFFALSE 45850
// sTank := true ;
45842: LD_ADDR_EXP 92
45846: PUSH
45847: LD_INT 1
45849: ST_TO_ADDR
// if p3 = 20 then
45850: LD_VAR 0 3
45854: PUSH
45855: LD_INT 20
45857: EQUAL
45858: IFFALSE 45868
// sRemote := true ;
45860: LD_ADDR_EXP 93
45864: PUSH
45865: LD_INT 1
45867: ST_TO_ADDR
// if p3 = 21 then
45868: LD_VAR 0 3
45872: PUSH
45873: LD_INT 21
45875: EQUAL
45876: IFFALSE 45886
// sPowell := true ;
45878: LD_ADDR_EXP 94
45882: PUSH
45883: LD_INT 1
45885: ST_TO_ADDR
// if p3 = 22 then
45886: LD_VAR 0 3
45890: PUSH
45891: LD_INT 22
45893: EQUAL
45894: IFFALSE 45904
// sTeleport := true ;
45896: LD_ADDR_EXP 97
45900: PUSH
45901: LD_INT 1
45903: ST_TO_ADDR
// if p3 = 23 then
45904: LD_VAR 0 3
45908: PUSH
45909: LD_INT 23
45911: EQUAL
45912: IFFALSE 45922
// sOilTower := true ;
45914: LD_ADDR_EXP 99
45918: PUSH
45919: LD_INT 1
45921: ST_TO_ADDR
// if p3 = 24 then
45922: LD_VAR 0 3
45926: PUSH
45927: LD_INT 24
45929: EQUAL
45930: IFFALSE 45940
// sShovel := true ;
45932: LD_ADDR_EXP 100
45936: PUSH
45937: LD_INT 1
45939: ST_TO_ADDR
// if p3 = 25 then
45940: LD_VAR 0 3
45944: PUSH
45945: LD_INT 25
45947: EQUAL
45948: IFFALSE 45958
// sSheik := true ;
45950: LD_ADDR_EXP 101
45954: PUSH
45955: LD_INT 1
45957: ST_TO_ADDR
// if p3 = 26 then
45958: LD_VAR 0 3
45962: PUSH
45963: LD_INT 26
45965: EQUAL
45966: IFFALSE 45976
// sEarthquake := true ;
45968: LD_ADDR_EXP 103
45972: PUSH
45973: LD_INT 1
45975: ST_TO_ADDR
// if p3 = 27 then
45976: LD_VAR 0 3
45980: PUSH
45981: LD_INT 27
45983: EQUAL
45984: IFFALSE 45994
// sAI := true ;
45986: LD_ADDR_EXP 104
45990: PUSH
45991: LD_INT 1
45993: ST_TO_ADDR
// if p3 = 28 then
45994: LD_VAR 0 3
45998: PUSH
45999: LD_INT 28
46001: EQUAL
46002: IFFALSE 46012
// sCargo := true ;
46004: LD_ADDR_EXP 107
46008: PUSH
46009: LD_INT 1
46011: ST_TO_ADDR
// if p3 = 29 then
46012: LD_VAR 0 3
46016: PUSH
46017: LD_INT 29
46019: EQUAL
46020: IFFALSE 46030
// sDLaser := true ;
46022: LD_ADDR_EXP 108
46026: PUSH
46027: LD_INT 1
46029: ST_TO_ADDR
// if p3 = 30 then
46030: LD_VAR 0 3
46034: PUSH
46035: LD_INT 30
46037: EQUAL
46038: IFFALSE 46048
// sExchange := true ;
46040: LD_ADDR_EXP 109
46044: PUSH
46045: LD_INT 1
46047: ST_TO_ADDR
// if p3 = 31 then
46048: LD_VAR 0 3
46052: PUSH
46053: LD_INT 31
46055: EQUAL
46056: IFFALSE 46066
// sFac := true ;
46058: LD_ADDR_EXP 110
46062: PUSH
46063: LD_INT 1
46065: ST_TO_ADDR
// if p3 = 32 then
46066: LD_VAR 0 3
46070: PUSH
46071: LD_INT 32
46073: EQUAL
46074: IFFALSE 46084
// sPower := true ;
46076: LD_ADDR_EXP 111
46080: PUSH
46081: LD_INT 1
46083: ST_TO_ADDR
// if p3 = 33 then
46084: LD_VAR 0 3
46088: PUSH
46089: LD_INT 33
46091: EQUAL
46092: IFFALSE 46102
// sRandom := true ;
46094: LD_ADDR_EXP 112
46098: PUSH
46099: LD_INT 1
46101: ST_TO_ADDR
// if p3 = 34 then
46102: LD_VAR 0 3
46106: PUSH
46107: LD_INT 34
46109: EQUAL
46110: IFFALSE 46120
// sShield := true ;
46112: LD_ADDR_EXP 113
46116: PUSH
46117: LD_INT 1
46119: ST_TO_ADDR
// if p3 = 35 then
46120: LD_VAR 0 3
46124: PUSH
46125: LD_INT 35
46127: EQUAL
46128: IFFALSE 46138
// sTime := true ;
46130: LD_ADDR_EXP 114
46134: PUSH
46135: LD_INT 1
46137: ST_TO_ADDR
// if p3 = 36 then
46138: LD_VAR 0 3
46142: PUSH
46143: LD_INT 36
46145: EQUAL
46146: IFFALSE 46156
// sTools := true ;
46148: LD_ADDR_EXP 115
46152: PUSH
46153: LD_INT 1
46155: ST_TO_ADDR
// if p3 = 101 then
46156: LD_VAR 0 3
46160: PUSH
46161: LD_INT 101
46163: EQUAL
46164: IFFALSE 46174
// sSold := true ;
46166: LD_ADDR_EXP 80
46170: PUSH
46171: LD_INT 1
46173: ST_TO_ADDR
// if p3 = 102 then
46174: LD_VAR 0 3
46178: PUSH
46179: LD_INT 102
46181: EQUAL
46182: IFFALSE 46192
// sDiff := true ;
46184: LD_ADDR_EXP 81
46188: PUSH
46189: LD_INT 1
46191: ST_TO_ADDR
// if p3 = 103 then
46192: LD_VAR 0 3
46196: PUSH
46197: LD_INT 103
46199: EQUAL
46200: IFFALSE 46210
// sFog := true ;
46202: LD_ADDR_EXP 84
46206: PUSH
46207: LD_INT 1
46209: ST_TO_ADDR
// if p3 = 104 then
46210: LD_VAR 0 3
46214: PUSH
46215: LD_INT 104
46217: EQUAL
46218: IFFALSE 46228
// sReset := true ;
46220: LD_ADDR_EXP 85
46224: PUSH
46225: LD_INT 1
46227: ST_TO_ADDR
// if p3 = 105 then
46228: LD_VAR 0 3
46232: PUSH
46233: LD_INT 105
46235: EQUAL
46236: IFFALSE 46246
// sSun := true ;
46238: LD_ADDR_EXP 86
46242: PUSH
46243: LD_INT 1
46245: ST_TO_ADDR
// if p3 = 106 then
46246: LD_VAR 0 3
46250: PUSH
46251: LD_INT 106
46253: EQUAL
46254: IFFALSE 46264
// sTiger := true ;
46256: LD_ADDR_EXP 82
46260: PUSH
46261: LD_INT 1
46263: ST_TO_ADDR
// if p3 = 107 then
46264: LD_VAR 0 3
46268: PUSH
46269: LD_INT 107
46271: EQUAL
46272: IFFALSE 46282
// sBomb := true ;
46274: LD_ADDR_EXP 83
46278: PUSH
46279: LD_INT 1
46281: ST_TO_ADDR
// if p3 = 108 then
46282: LD_VAR 0 3
46286: PUSH
46287: LD_INT 108
46289: EQUAL
46290: IFFALSE 46300
// sWound := true ;
46292: LD_ADDR_EXP 91
46296: PUSH
46297: LD_INT 1
46299: ST_TO_ADDR
// if p3 = 109 then
46300: LD_VAR 0 3
46304: PUSH
46305: LD_INT 109
46307: EQUAL
46308: IFFALSE 46318
// sBetray := true ;
46310: LD_ADDR_EXP 95
46314: PUSH
46315: LD_INT 1
46317: ST_TO_ADDR
// if p3 = 110 then
46318: LD_VAR 0 3
46322: PUSH
46323: LD_INT 110
46325: EQUAL
46326: IFFALSE 46336
// sContamin := true ;
46328: LD_ADDR_EXP 96
46332: PUSH
46333: LD_INT 1
46335: ST_TO_ADDR
// if p3 = 111 then
46336: LD_VAR 0 3
46340: PUSH
46341: LD_INT 111
46343: EQUAL
46344: IFFALSE 46354
// sOil := true ;
46346: LD_ADDR_EXP 98
46350: PUSH
46351: LD_INT 1
46353: ST_TO_ADDR
// if p3 = 112 then
46354: LD_VAR 0 3
46358: PUSH
46359: LD_INT 112
46361: EQUAL
46362: IFFALSE 46372
// sStu := true ;
46364: LD_ADDR_EXP 102
46368: PUSH
46369: LD_INT 1
46371: ST_TO_ADDR
// if p3 = 113 then
46372: LD_VAR 0 3
46376: PUSH
46377: LD_INT 113
46379: EQUAL
46380: IFFALSE 46390
// sBazooka := true ;
46382: LD_ADDR_EXP 105
46386: PUSH
46387: LD_INT 1
46389: ST_TO_ADDR
// if p3 = 114 then
46390: LD_VAR 0 3
46394: PUSH
46395: LD_INT 114
46397: EQUAL
46398: IFFALSE 46408
// sMortar := true ;
46400: LD_ADDR_EXP 106
46404: PUSH
46405: LD_INT 1
46407: ST_TO_ADDR
// if p3 = 115 then
46408: LD_VAR 0 3
46412: PUSH
46413: LD_INT 115
46415: EQUAL
46416: IFFALSE 46426
// sRanger := true ;
46418: LD_ADDR_EXP 116
46422: PUSH
46423: LD_INT 1
46425: ST_TO_ADDR
// if p3 = 116 then
46426: LD_VAR 0 3
46430: PUSH
46431: LD_INT 116
46433: EQUAL
46434: IFFALSE 46444
// sComputer := true ;
46436: LD_ADDR_EXP 117
46440: PUSH
46441: LD_INT 1
46443: ST_TO_ADDR
// if p3 = 117 then
46444: LD_VAR 0 3
46448: PUSH
46449: LD_INT 117
46451: EQUAL
46452: IFFALSE 46462
// s30 := true ;
46454: LD_ADDR_EXP 118
46458: PUSH
46459: LD_INT 1
46461: ST_TO_ADDR
// if p3 = 118 then
46462: LD_VAR 0 3
46466: PUSH
46467: LD_INT 118
46469: EQUAL
46470: IFFALSE 46480
// s60 := true ;
46472: LD_ADDR_EXP 119
46476: PUSH
46477: LD_INT 1
46479: ST_TO_ADDR
// end ; if p2 = 101 then
46480: LD_VAR 0 2
46484: PUSH
46485: LD_INT 101
46487: EQUAL
46488: IFFALSE 46616
// begin case p3 of 1 :
46490: LD_VAR 0 3
46494: PUSH
46495: LD_INT 1
46497: DOUBLE
46498: EQUAL
46499: IFTRUE 46503
46501: GO 46510
46503: POP
// hHackUnlimitedResources ; 2 :
46504: CALL 58714 0 0
46508: GO 46616
46510: LD_INT 2
46512: DOUBLE
46513: EQUAL
46514: IFTRUE 46518
46516: GO 46525
46518: POP
// hHackSetLevel10 ; 3 :
46519: CALL 58847 0 0
46523: GO 46616
46525: LD_INT 3
46527: DOUBLE
46528: EQUAL
46529: IFTRUE 46533
46531: GO 46540
46533: POP
// hHackSetLevel10YourUnits ; 4 :
46534: CALL 58932 0 0
46538: GO 46616
46540: LD_INT 4
46542: DOUBLE
46543: EQUAL
46544: IFTRUE 46548
46546: GO 46555
46548: POP
// hHackInvincible ; 5 :
46549: CALL 59380 0 0
46553: GO 46616
46555: LD_INT 5
46557: DOUBLE
46558: EQUAL
46559: IFTRUE 46563
46561: GO 46570
46563: POP
// hHackInvisible ; 6 :
46564: CALL 59491 0 0
46568: GO 46616
46570: LD_INT 6
46572: DOUBLE
46573: EQUAL
46574: IFTRUE 46578
46576: GO 46585
46578: POP
// hHackChangeYourSide ; 7 :
46579: CALL 59548 0 0
46583: GO 46616
46585: LD_INT 7
46587: DOUBLE
46588: EQUAL
46589: IFTRUE 46593
46591: GO 46600
46593: POP
// hHackChangeUnitSide ; 8 :
46594: CALL 59590 0 0
46598: GO 46616
46600: LD_INT 8
46602: DOUBLE
46603: EQUAL
46604: IFTRUE 46608
46606: GO 46615
46608: POP
// hHackFog ; end ;
46609: CALL 59691 0 0
46613: GO 46616
46615: POP
// end ; end ;
46616: LD_VAR 0 7
46620: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
46621: GO 46623
46623: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
46624: LD_STRING initStreamRollete();
46626: PPUSH
46627: CALL_OW 559
// InitStreamMode ;
46631: CALL 46643 0 0
// DefineStreamItems ( false ) ;
46635: LD_INT 0
46637: PPUSH
46638: CALL 47107 0 1
// end ;
46642: END
// function InitStreamMode ; begin
46643: LD_INT 0
46645: PPUSH
// streamModeActive := false ;
46646: LD_ADDR_EXP 63
46650: PUSH
46651: LD_INT 0
46653: ST_TO_ADDR
// normalCounter := 36 ;
46654: LD_ADDR_EXP 64
46658: PUSH
46659: LD_INT 36
46661: ST_TO_ADDR
// hardcoreCounter := 18 ;
46662: LD_ADDR_EXP 65
46666: PUSH
46667: LD_INT 18
46669: ST_TO_ADDR
// sRocket := false ;
46670: LD_ADDR_EXP 68
46674: PUSH
46675: LD_INT 0
46677: ST_TO_ADDR
// sSpeed := false ;
46678: LD_ADDR_EXP 67
46682: PUSH
46683: LD_INT 0
46685: ST_TO_ADDR
// sEngine := false ;
46686: LD_ADDR_EXP 69
46690: PUSH
46691: LD_INT 0
46693: ST_TO_ADDR
// sSpec := false ;
46694: LD_ADDR_EXP 66
46698: PUSH
46699: LD_INT 0
46701: ST_TO_ADDR
// sLevel := false ;
46702: LD_ADDR_EXP 70
46706: PUSH
46707: LD_INT 0
46709: ST_TO_ADDR
// sArmoury := false ;
46710: LD_ADDR_EXP 71
46714: PUSH
46715: LD_INT 0
46717: ST_TO_ADDR
// sRadar := false ;
46718: LD_ADDR_EXP 72
46722: PUSH
46723: LD_INT 0
46725: ST_TO_ADDR
// sBunker := false ;
46726: LD_ADDR_EXP 73
46730: PUSH
46731: LD_INT 0
46733: ST_TO_ADDR
// sHack := false ;
46734: LD_ADDR_EXP 74
46738: PUSH
46739: LD_INT 0
46741: ST_TO_ADDR
// sFire := false ;
46742: LD_ADDR_EXP 75
46746: PUSH
46747: LD_INT 0
46749: ST_TO_ADDR
// sRefresh := false ;
46750: LD_ADDR_EXP 76
46754: PUSH
46755: LD_INT 0
46757: ST_TO_ADDR
// sExp := false ;
46758: LD_ADDR_EXP 77
46762: PUSH
46763: LD_INT 0
46765: ST_TO_ADDR
// sDepot := false ;
46766: LD_ADDR_EXP 78
46770: PUSH
46771: LD_INT 0
46773: ST_TO_ADDR
// sFlag := false ;
46774: LD_ADDR_EXP 79
46778: PUSH
46779: LD_INT 0
46781: ST_TO_ADDR
// sKamikadze := false ;
46782: LD_ADDR_EXP 87
46786: PUSH
46787: LD_INT 0
46789: ST_TO_ADDR
// sTroll := false ;
46790: LD_ADDR_EXP 88
46794: PUSH
46795: LD_INT 0
46797: ST_TO_ADDR
// sSlow := false ;
46798: LD_ADDR_EXP 89
46802: PUSH
46803: LD_INT 0
46805: ST_TO_ADDR
// sLack := false ;
46806: LD_ADDR_EXP 90
46810: PUSH
46811: LD_INT 0
46813: ST_TO_ADDR
// sTank := false ;
46814: LD_ADDR_EXP 92
46818: PUSH
46819: LD_INT 0
46821: ST_TO_ADDR
// sRemote := false ;
46822: LD_ADDR_EXP 93
46826: PUSH
46827: LD_INT 0
46829: ST_TO_ADDR
// sPowell := false ;
46830: LD_ADDR_EXP 94
46834: PUSH
46835: LD_INT 0
46837: ST_TO_ADDR
// sTeleport := false ;
46838: LD_ADDR_EXP 97
46842: PUSH
46843: LD_INT 0
46845: ST_TO_ADDR
// sOilTower := false ;
46846: LD_ADDR_EXP 99
46850: PUSH
46851: LD_INT 0
46853: ST_TO_ADDR
// sShovel := false ;
46854: LD_ADDR_EXP 100
46858: PUSH
46859: LD_INT 0
46861: ST_TO_ADDR
// sSheik := false ;
46862: LD_ADDR_EXP 101
46866: PUSH
46867: LD_INT 0
46869: ST_TO_ADDR
// sEarthquake := false ;
46870: LD_ADDR_EXP 103
46874: PUSH
46875: LD_INT 0
46877: ST_TO_ADDR
// sAI := false ;
46878: LD_ADDR_EXP 104
46882: PUSH
46883: LD_INT 0
46885: ST_TO_ADDR
// sCargo := false ;
46886: LD_ADDR_EXP 107
46890: PUSH
46891: LD_INT 0
46893: ST_TO_ADDR
// sDLaser := false ;
46894: LD_ADDR_EXP 108
46898: PUSH
46899: LD_INT 0
46901: ST_TO_ADDR
// sExchange := false ;
46902: LD_ADDR_EXP 109
46906: PUSH
46907: LD_INT 0
46909: ST_TO_ADDR
// sFac := false ;
46910: LD_ADDR_EXP 110
46914: PUSH
46915: LD_INT 0
46917: ST_TO_ADDR
// sPower := false ;
46918: LD_ADDR_EXP 111
46922: PUSH
46923: LD_INT 0
46925: ST_TO_ADDR
// sRandom := false ;
46926: LD_ADDR_EXP 112
46930: PUSH
46931: LD_INT 0
46933: ST_TO_ADDR
// sShield := false ;
46934: LD_ADDR_EXP 113
46938: PUSH
46939: LD_INT 0
46941: ST_TO_ADDR
// sTime := false ;
46942: LD_ADDR_EXP 114
46946: PUSH
46947: LD_INT 0
46949: ST_TO_ADDR
// sTools := false ;
46950: LD_ADDR_EXP 115
46954: PUSH
46955: LD_INT 0
46957: ST_TO_ADDR
// sSold := false ;
46958: LD_ADDR_EXP 80
46962: PUSH
46963: LD_INT 0
46965: ST_TO_ADDR
// sDiff := false ;
46966: LD_ADDR_EXP 81
46970: PUSH
46971: LD_INT 0
46973: ST_TO_ADDR
// sFog := false ;
46974: LD_ADDR_EXP 84
46978: PUSH
46979: LD_INT 0
46981: ST_TO_ADDR
// sReset := false ;
46982: LD_ADDR_EXP 85
46986: PUSH
46987: LD_INT 0
46989: ST_TO_ADDR
// sSun := false ;
46990: LD_ADDR_EXP 86
46994: PUSH
46995: LD_INT 0
46997: ST_TO_ADDR
// sTiger := false ;
46998: LD_ADDR_EXP 82
47002: PUSH
47003: LD_INT 0
47005: ST_TO_ADDR
// sBomb := false ;
47006: LD_ADDR_EXP 83
47010: PUSH
47011: LD_INT 0
47013: ST_TO_ADDR
// sWound := false ;
47014: LD_ADDR_EXP 91
47018: PUSH
47019: LD_INT 0
47021: ST_TO_ADDR
// sBetray := false ;
47022: LD_ADDR_EXP 95
47026: PUSH
47027: LD_INT 0
47029: ST_TO_ADDR
// sContamin := false ;
47030: LD_ADDR_EXP 96
47034: PUSH
47035: LD_INT 0
47037: ST_TO_ADDR
// sOil := false ;
47038: LD_ADDR_EXP 98
47042: PUSH
47043: LD_INT 0
47045: ST_TO_ADDR
// sStu := false ;
47046: LD_ADDR_EXP 102
47050: PUSH
47051: LD_INT 0
47053: ST_TO_ADDR
// sBazooka := false ;
47054: LD_ADDR_EXP 105
47058: PUSH
47059: LD_INT 0
47061: ST_TO_ADDR
// sMortar := false ;
47062: LD_ADDR_EXP 106
47066: PUSH
47067: LD_INT 0
47069: ST_TO_ADDR
// sRanger := false ;
47070: LD_ADDR_EXP 116
47074: PUSH
47075: LD_INT 0
47077: ST_TO_ADDR
// sComputer := false ;
47078: LD_ADDR_EXP 117
47082: PUSH
47083: LD_INT 0
47085: ST_TO_ADDR
// s30 := false ;
47086: LD_ADDR_EXP 118
47090: PUSH
47091: LD_INT 0
47093: ST_TO_ADDR
// s60 := false ;
47094: LD_ADDR_EXP 119
47098: PUSH
47099: LD_INT 0
47101: ST_TO_ADDR
// end ;
47102: LD_VAR 0 1
47106: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
47107: LD_INT 0
47109: PPUSH
47110: PPUSH
47111: PPUSH
47112: PPUSH
47113: PPUSH
47114: PPUSH
47115: PPUSH
// result := [ ] ;
47116: LD_ADDR_VAR 0 2
47120: PUSH
47121: EMPTY
47122: ST_TO_ADDR
// if campaign_id = 1 then
47123: LD_OWVAR 69
47127: PUSH
47128: LD_INT 1
47130: EQUAL
47131: IFFALSE 50297
// begin case mission_number of 1 :
47133: LD_OWVAR 70
47137: PUSH
47138: LD_INT 1
47140: DOUBLE
47141: EQUAL
47142: IFTRUE 47146
47144: GO 47222
47146: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
47147: LD_ADDR_VAR 0 2
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: LD_INT 4
47157: PUSH
47158: LD_INT 11
47160: PUSH
47161: LD_INT 12
47163: PUSH
47164: LD_INT 15
47166: PUSH
47167: LD_INT 16
47169: PUSH
47170: LD_INT 22
47172: PUSH
47173: LD_INT 23
47175: PUSH
47176: LD_INT 26
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 101
47192: PUSH
47193: LD_INT 102
47195: PUSH
47196: LD_INT 106
47198: PUSH
47199: LD_INT 116
47201: PUSH
47202: LD_INT 117
47204: PUSH
47205: LD_INT 118
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: ST_TO_ADDR
47220: GO 50295
47222: LD_INT 2
47224: DOUBLE
47225: EQUAL
47226: IFTRUE 47230
47228: GO 47314
47230: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
47231: LD_ADDR_VAR 0 2
47235: PUSH
47236: LD_INT 2
47238: PUSH
47239: LD_INT 4
47241: PUSH
47242: LD_INT 11
47244: PUSH
47245: LD_INT 12
47247: PUSH
47248: LD_INT 15
47250: PUSH
47251: LD_INT 16
47253: PUSH
47254: LD_INT 22
47256: PUSH
47257: LD_INT 23
47259: PUSH
47260: LD_INT 26
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 101
47276: PUSH
47277: LD_INT 102
47279: PUSH
47280: LD_INT 105
47282: PUSH
47283: LD_INT 106
47285: PUSH
47286: LD_INT 108
47288: PUSH
47289: LD_INT 116
47291: PUSH
47292: LD_INT 117
47294: PUSH
47295: LD_INT 118
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: ST_TO_ADDR
47312: GO 50295
47314: LD_INT 3
47316: DOUBLE
47317: EQUAL
47318: IFTRUE 47322
47320: GO 47410
47322: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
47323: LD_ADDR_VAR 0 2
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: LD_INT 4
47333: PUSH
47334: LD_INT 5
47336: PUSH
47337: LD_INT 11
47339: PUSH
47340: LD_INT 12
47342: PUSH
47343: LD_INT 15
47345: PUSH
47346: LD_INT 16
47348: PUSH
47349: LD_INT 22
47351: PUSH
47352: LD_INT 26
47354: PUSH
47355: LD_INT 36
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 101
47372: PUSH
47373: LD_INT 102
47375: PUSH
47376: LD_INT 105
47378: PUSH
47379: LD_INT 106
47381: PUSH
47382: LD_INT 108
47384: PUSH
47385: LD_INT 116
47387: PUSH
47388: LD_INT 117
47390: PUSH
47391: LD_INT 118
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: ST_TO_ADDR
47408: GO 50295
47410: LD_INT 4
47412: DOUBLE
47413: EQUAL
47414: IFTRUE 47418
47416: GO 47514
47418: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
47419: LD_ADDR_VAR 0 2
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: LD_INT 4
47429: PUSH
47430: LD_INT 5
47432: PUSH
47433: LD_INT 8
47435: PUSH
47436: LD_INT 11
47438: PUSH
47439: LD_INT 12
47441: PUSH
47442: LD_INT 15
47444: PUSH
47445: LD_INT 16
47447: PUSH
47448: LD_INT 22
47450: PUSH
47451: LD_INT 23
47453: PUSH
47454: LD_INT 26
47456: PUSH
47457: LD_INT 36
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 101
47476: PUSH
47477: LD_INT 102
47479: PUSH
47480: LD_INT 105
47482: PUSH
47483: LD_INT 106
47485: PUSH
47486: LD_INT 108
47488: PUSH
47489: LD_INT 116
47491: PUSH
47492: LD_INT 117
47494: PUSH
47495: LD_INT 118
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: ST_TO_ADDR
47512: GO 50295
47514: LD_INT 5
47516: DOUBLE
47517: EQUAL
47518: IFTRUE 47522
47520: GO 47634
47522: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
47523: LD_ADDR_VAR 0 2
47527: PUSH
47528: LD_INT 2
47530: PUSH
47531: LD_INT 4
47533: PUSH
47534: LD_INT 5
47536: PUSH
47537: LD_INT 6
47539: PUSH
47540: LD_INT 8
47542: PUSH
47543: LD_INT 11
47545: PUSH
47546: LD_INT 12
47548: PUSH
47549: LD_INT 15
47551: PUSH
47552: LD_INT 16
47554: PUSH
47555: LD_INT 22
47557: PUSH
47558: LD_INT 23
47560: PUSH
47561: LD_INT 25
47563: PUSH
47564: LD_INT 26
47566: PUSH
47567: LD_INT 36
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 101
47588: PUSH
47589: LD_INT 102
47591: PUSH
47592: LD_INT 105
47594: PUSH
47595: LD_INT 106
47597: PUSH
47598: LD_INT 108
47600: PUSH
47601: LD_INT 109
47603: PUSH
47604: LD_INT 112
47606: PUSH
47607: LD_INT 116
47609: PUSH
47610: LD_INT 117
47612: PUSH
47613: LD_INT 118
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: ST_TO_ADDR
47632: GO 50295
47634: LD_INT 6
47636: DOUBLE
47637: EQUAL
47638: IFTRUE 47642
47640: GO 47774
47642: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
47643: LD_ADDR_VAR 0 2
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 4
47653: PUSH
47654: LD_INT 5
47656: PUSH
47657: LD_INT 6
47659: PUSH
47660: LD_INT 8
47662: PUSH
47663: LD_INT 11
47665: PUSH
47666: LD_INT 12
47668: PUSH
47669: LD_INT 15
47671: PUSH
47672: LD_INT 16
47674: PUSH
47675: LD_INT 20
47677: PUSH
47678: LD_INT 21
47680: PUSH
47681: LD_INT 22
47683: PUSH
47684: LD_INT 23
47686: PUSH
47687: LD_INT 25
47689: PUSH
47690: LD_INT 26
47692: PUSH
47693: LD_INT 30
47695: PUSH
47696: LD_INT 31
47698: PUSH
47699: LD_INT 32
47701: PUSH
47702: LD_INT 36
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 101
47728: PUSH
47729: LD_INT 102
47731: PUSH
47732: LD_INT 105
47734: PUSH
47735: LD_INT 106
47737: PUSH
47738: LD_INT 108
47740: PUSH
47741: LD_INT 109
47743: PUSH
47744: LD_INT 112
47746: PUSH
47747: LD_INT 116
47749: PUSH
47750: LD_INT 117
47752: PUSH
47753: LD_INT 118
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: ST_TO_ADDR
47772: GO 50295
47774: LD_INT 7
47776: DOUBLE
47777: EQUAL
47778: IFTRUE 47782
47780: GO 47894
47782: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
47783: LD_ADDR_VAR 0 2
47787: PUSH
47788: LD_INT 2
47790: PUSH
47791: LD_INT 4
47793: PUSH
47794: LD_INT 5
47796: PUSH
47797: LD_INT 7
47799: PUSH
47800: LD_INT 11
47802: PUSH
47803: LD_INT 12
47805: PUSH
47806: LD_INT 15
47808: PUSH
47809: LD_INT 16
47811: PUSH
47812: LD_INT 20
47814: PUSH
47815: LD_INT 21
47817: PUSH
47818: LD_INT 22
47820: PUSH
47821: LD_INT 23
47823: PUSH
47824: LD_INT 25
47826: PUSH
47827: LD_INT 26
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 101
47848: PUSH
47849: LD_INT 102
47851: PUSH
47852: LD_INT 103
47854: PUSH
47855: LD_INT 105
47857: PUSH
47858: LD_INT 106
47860: PUSH
47861: LD_INT 108
47863: PUSH
47864: LD_INT 112
47866: PUSH
47867: LD_INT 116
47869: PUSH
47870: LD_INT 117
47872: PUSH
47873: LD_INT 118
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: ST_TO_ADDR
47892: GO 50295
47894: LD_INT 8
47896: DOUBLE
47897: EQUAL
47898: IFTRUE 47902
47900: GO 48042
47902: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
47903: LD_ADDR_VAR 0 2
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: LD_INT 4
47913: PUSH
47914: LD_INT 5
47916: PUSH
47917: LD_INT 6
47919: PUSH
47920: LD_INT 7
47922: PUSH
47923: LD_INT 8
47925: PUSH
47926: LD_INT 11
47928: PUSH
47929: LD_INT 12
47931: PUSH
47932: LD_INT 15
47934: PUSH
47935: LD_INT 16
47937: PUSH
47938: LD_INT 20
47940: PUSH
47941: LD_INT 21
47943: PUSH
47944: LD_INT 22
47946: PUSH
47947: LD_INT 23
47949: PUSH
47950: LD_INT 25
47952: PUSH
47953: LD_INT 26
47955: PUSH
47956: LD_INT 30
47958: PUSH
47959: LD_INT 31
47961: PUSH
47962: LD_INT 32
47964: PUSH
47965: LD_INT 36
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 101
47992: PUSH
47993: LD_INT 102
47995: PUSH
47996: LD_INT 103
47998: PUSH
47999: LD_INT 105
48001: PUSH
48002: LD_INT 106
48004: PUSH
48005: LD_INT 108
48007: PUSH
48008: LD_INT 109
48010: PUSH
48011: LD_INT 112
48013: PUSH
48014: LD_INT 116
48016: PUSH
48017: LD_INT 117
48019: PUSH
48020: LD_INT 118
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: ST_TO_ADDR
48040: GO 50295
48042: LD_INT 9
48044: DOUBLE
48045: EQUAL
48046: IFTRUE 48050
48048: GO 48198
48050: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
48051: LD_ADDR_VAR 0 2
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: LD_INT 4
48061: PUSH
48062: LD_INT 5
48064: PUSH
48065: LD_INT 6
48067: PUSH
48068: LD_INT 7
48070: PUSH
48071: LD_INT 8
48073: PUSH
48074: LD_INT 11
48076: PUSH
48077: LD_INT 12
48079: PUSH
48080: LD_INT 15
48082: PUSH
48083: LD_INT 16
48085: PUSH
48086: LD_INT 20
48088: PUSH
48089: LD_INT 21
48091: PUSH
48092: LD_INT 22
48094: PUSH
48095: LD_INT 23
48097: PUSH
48098: LD_INT 25
48100: PUSH
48101: LD_INT 26
48103: PUSH
48104: LD_INT 28
48106: PUSH
48107: LD_INT 30
48109: PUSH
48110: LD_INT 31
48112: PUSH
48113: LD_INT 32
48115: PUSH
48116: LD_INT 36
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 101
48144: PUSH
48145: LD_INT 102
48147: PUSH
48148: LD_INT 103
48150: PUSH
48151: LD_INT 105
48153: PUSH
48154: LD_INT 106
48156: PUSH
48157: LD_INT 108
48159: PUSH
48160: LD_INT 109
48162: PUSH
48163: LD_INT 112
48165: PUSH
48166: LD_INT 114
48168: PUSH
48169: LD_INT 116
48171: PUSH
48172: LD_INT 117
48174: PUSH
48175: LD_INT 118
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: ST_TO_ADDR
48196: GO 50295
48198: LD_INT 10
48200: DOUBLE
48201: EQUAL
48202: IFTRUE 48206
48204: GO 48402
48206: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
48207: LD_ADDR_VAR 0 2
48211: PUSH
48212: LD_INT 2
48214: PUSH
48215: LD_INT 4
48217: PUSH
48218: LD_INT 5
48220: PUSH
48221: LD_INT 6
48223: PUSH
48224: LD_INT 7
48226: PUSH
48227: LD_INT 8
48229: PUSH
48230: LD_INT 9
48232: PUSH
48233: LD_INT 10
48235: PUSH
48236: LD_INT 11
48238: PUSH
48239: LD_INT 12
48241: PUSH
48242: LD_INT 13
48244: PUSH
48245: LD_INT 14
48247: PUSH
48248: LD_INT 15
48250: PUSH
48251: LD_INT 16
48253: PUSH
48254: LD_INT 17
48256: PUSH
48257: LD_INT 18
48259: PUSH
48260: LD_INT 19
48262: PUSH
48263: LD_INT 20
48265: PUSH
48266: LD_INT 21
48268: PUSH
48269: LD_INT 22
48271: PUSH
48272: LD_INT 23
48274: PUSH
48275: LD_INT 24
48277: PUSH
48278: LD_INT 25
48280: PUSH
48281: LD_INT 26
48283: PUSH
48284: LD_INT 28
48286: PUSH
48287: LD_INT 30
48289: PUSH
48290: LD_INT 31
48292: PUSH
48293: LD_INT 32
48295: PUSH
48296: LD_INT 36
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 101
48332: PUSH
48333: LD_INT 102
48335: PUSH
48336: LD_INT 103
48338: PUSH
48339: LD_INT 104
48341: PUSH
48342: LD_INT 105
48344: PUSH
48345: LD_INT 106
48347: PUSH
48348: LD_INT 107
48350: PUSH
48351: LD_INT 108
48353: PUSH
48354: LD_INT 109
48356: PUSH
48357: LD_INT 110
48359: PUSH
48360: LD_INT 111
48362: PUSH
48363: LD_INT 112
48365: PUSH
48366: LD_INT 114
48368: PUSH
48369: LD_INT 116
48371: PUSH
48372: LD_INT 117
48374: PUSH
48375: LD_INT 118
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: ST_TO_ADDR
48400: GO 50295
48402: LD_INT 11
48404: DOUBLE
48405: EQUAL
48406: IFTRUE 48410
48408: GO 48614
48410: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
48411: LD_ADDR_VAR 0 2
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: LD_INT 3
48421: PUSH
48422: LD_INT 4
48424: PUSH
48425: LD_INT 5
48427: PUSH
48428: LD_INT 6
48430: PUSH
48431: LD_INT 7
48433: PUSH
48434: LD_INT 8
48436: PUSH
48437: LD_INT 9
48439: PUSH
48440: LD_INT 10
48442: PUSH
48443: LD_INT 11
48445: PUSH
48446: LD_INT 12
48448: PUSH
48449: LD_INT 13
48451: PUSH
48452: LD_INT 14
48454: PUSH
48455: LD_INT 15
48457: PUSH
48458: LD_INT 16
48460: PUSH
48461: LD_INT 17
48463: PUSH
48464: LD_INT 18
48466: PUSH
48467: LD_INT 19
48469: PUSH
48470: LD_INT 20
48472: PUSH
48473: LD_INT 21
48475: PUSH
48476: LD_INT 22
48478: PUSH
48479: LD_INT 23
48481: PUSH
48482: LD_INT 24
48484: PUSH
48485: LD_INT 25
48487: PUSH
48488: LD_INT 26
48490: PUSH
48491: LD_INT 28
48493: PUSH
48494: LD_INT 30
48496: PUSH
48497: LD_INT 31
48499: PUSH
48500: LD_INT 32
48502: PUSH
48503: LD_INT 34
48505: PUSH
48506: LD_INT 36
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 101
48544: PUSH
48545: LD_INT 102
48547: PUSH
48548: LD_INT 103
48550: PUSH
48551: LD_INT 104
48553: PUSH
48554: LD_INT 105
48556: PUSH
48557: LD_INT 106
48559: PUSH
48560: LD_INT 107
48562: PUSH
48563: LD_INT 108
48565: PUSH
48566: LD_INT 109
48568: PUSH
48569: LD_INT 110
48571: PUSH
48572: LD_INT 111
48574: PUSH
48575: LD_INT 112
48577: PUSH
48578: LD_INT 114
48580: PUSH
48581: LD_INT 116
48583: PUSH
48584: LD_INT 117
48586: PUSH
48587: LD_INT 118
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: ST_TO_ADDR
48612: GO 50295
48614: LD_INT 12
48616: DOUBLE
48617: EQUAL
48618: IFTRUE 48622
48620: GO 48842
48622: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
48623: LD_ADDR_VAR 0 2
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: LD_INT 3
48636: PUSH
48637: LD_INT 4
48639: PUSH
48640: LD_INT 5
48642: PUSH
48643: LD_INT 6
48645: PUSH
48646: LD_INT 7
48648: PUSH
48649: LD_INT 8
48651: PUSH
48652: LD_INT 9
48654: PUSH
48655: LD_INT 10
48657: PUSH
48658: LD_INT 11
48660: PUSH
48661: LD_INT 12
48663: PUSH
48664: LD_INT 13
48666: PUSH
48667: LD_INT 14
48669: PUSH
48670: LD_INT 15
48672: PUSH
48673: LD_INT 16
48675: PUSH
48676: LD_INT 17
48678: PUSH
48679: LD_INT 18
48681: PUSH
48682: LD_INT 19
48684: PUSH
48685: LD_INT 20
48687: PUSH
48688: LD_INT 21
48690: PUSH
48691: LD_INT 22
48693: PUSH
48694: LD_INT 23
48696: PUSH
48697: LD_INT 24
48699: PUSH
48700: LD_INT 25
48702: PUSH
48703: LD_INT 26
48705: PUSH
48706: LD_INT 27
48708: PUSH
48709: LD_INT 28
48711: PUSH
48712: LD_INT 30
48714: PUSH
48715: LD_INT 31
48717: PUSH
48718: LD_INT 32
48720: PUSH
48721: LD_INT 33
48723: PUSH
48724: LD_INT 34
48726: PUSH
48727: LD_INT 36
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 101
48768: PUSH
48769: LD_INT 102
48771: PUSH
48772: LD_INT 103
48774: PUSH
48775: LD_INT 104
48777: PUSH
48778: LD_INT 105
48780: PUSH
48781: LD_INT 106
48783: PUSH
48784: LD_INT 107
48786: PUSH
48787: LD_INT 108
48789: PUSH
48790: LD_INT 109
48792: PUSH
48793: LD_INT 110
48795: PUSH
48796: LD_INT 111
48798: PUSH
48799: LD_INT 112
48801: PUSH
48802: LD_INT 113
48804: PUSH
48805: LD_INT 114
48807: PUSH
48808: LD_INT 116
48810: PUSH
48811: LD_INT 117
48813: PUSH
48814: LD_INT 118
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: ST_TO_ADDR
48840: GO 50295
48842: LD_INT 13
48844: DOUBLE
48845: EQUAL
48846: IFTRUE 48850
48848: GO 49058
48850: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
48851: LD_ADDR_VAR 0 2
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: LD_INT 3
48864: PUSH
48865: LD_INT 4
48867: PUSH
48868: LD_INT 5
48870: PUSH
48871: LD_INT 8
48873: PUSH
48874: LD_INT 9
48876: PUSH
48877: LD_INT 10
48879: PUSH
48880: LD_INT 11
48882: PUSH
48883: LD_INT 12
48885: PUSH
48886: LD_INT 14
48888: PUSH
48889: LD_INT 15
48891: PUSH
48892: LD_INT 16
48894: PUSH
48895: LD_INT 17
48897: PUSH
48898: LD_INT 18
48900: PUSH
48901: LD_INT 19
48903: PUSH
48904: LD_INT 20
48906: PUSH
48907: LD_INT 21
48909: PUSH
48910: LD_INT 22
48912: PUSH
48913: LD_INT 23
48915: PUSH
48916: LD_INT 24
48918: PUSH
48919: LD_INT 25
48921: PUSH
48922: LD_INT 26
48924: PUSH
48925: LD_INT 27
48927: PUSH
48928: LD_INT 28
48930: PUSH
48931: LD_INT 30
48933: PUSH
48934: LD_INT 31
48936: PUSH
48937: LD_INT 32
48939: PUSH
48940: LD_INT 33
48942: PUSH
48943: LD_INT 34
48945: PUSH
48946: LD_INT 36
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 101
48984: PUSH
48985: LD_INT 102
48987: PUSH
48988: LD_INT 103
48990: PUSH
48991: LD_INT 104
48993: PUSH
48994: LD_INT 105
48996: PUSH
48997: LD_INT 106
48999: PUSH
49000: LD_INT 107
49002: PUSH
49003: LD_INT 108
49005: PUSH
49006: LD_INT 109
49008: PUSH
49009: LD_INT 110
49011: PUSH
49012: LD_INT 111
49014: PUSH
49015: LD_INT 112
49017: PUSH
49018: LD_INT 113
49020: PUSH
49021: LD_INT 114
49023: PUSH
49024: LD_INT 116
49026: PUSH
49027: LD_INT 117
49029: PUSH
49030: LD_INT 118
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: ST_TO_ADDR
49056: GO 50295
49058: LD_INT 14
49060: DOUBLE
49061: EQUAL
49062: IFTRUE 49066
49064: GO 49290
49066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
49067: LD_ADDR_VAR 0 2
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: LD_INT 3
49080: PUSH
49081: LD_INT 4
49083: PUSH
49084: LD_INT 5
49086: PUSH
49087: LD_INT 6
49089: PUSH
49090: LD_INT 7
49092: PUSH
49093: LD_INT 8
49095: PUSH
49096: LD_INT 9
49098: PUSH
49099: LD_INT 10
49101: PUSH
49102: LD_INT 11
49104: PUSH
49105: LD_INT 12
49107: PUSH
49108: LD_INT 13
49110: PUSH
49111: LD_INT 14
49113: PUSH
49114: LD_INT 15
49116: PUSH
49117: LD_INT 16
49119: PUSH
49120: LD_INT 17
49122: PUSH
49123: LD_INT 18
49125: PUSH
49126: LD_INT 19
49128: PUSH
49129: LD_INT 20
49131: PUSH
49132: LD_INT 21
49134: PUSH
49135: LD_INT 22
49137: PUSH
49138: LD_INT 23
49140: PUSH
49141: LD_INT 24
49143: PUSH
49144: LD_INT 25
49146: PUSH
49147: LD_INT 26
49149: PUSH
49150: LD_INT 27
49152: PUSH
49153: LD_INT 28
49155: PUSH
49156: LD_INT 29
49158: PUSH
49159: LD_INT 30
49161: PUSH
49162: LD_INT 31
49164: PUSH
49165: LD_INT 32
49167: PUSH
49168: LD_INT 33
49170: PUSH
49171: LD_INT 34
49173: PUSH
49174: LD_INT 36
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 101
49216: PUSH
49217: LD_INT 102
49219: PUSH
49220: LD_INT 103
49222: PUSH
49223: LD_INT 104
49225: PUSH
49226: LD_INT 105
49228: PUSH
49229: LD_INT 106
49231: PUSH
49232: LD_INT 107
49234: PUSH
49235: LD_INT 108
49237: PUSH
49238: LD_INT 109
49240: PUSH
49241: LD_INT 110
49243: PUSH
49244: LD_INT 111
49246: PUSH
49247: LD_INT 112
49249: PUSH
49250: LD_INT 113
49252: PUSH
49253: LD_INT 114
49255: PUSH
49256: LD_INT 116
49258: PUSH
49259: LD_INT 117
49261: PUSH
49262: LD_INT 118
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: ST_TO_ADDR
49288: GO 50295
49290: LD_INT 15
49292: DOUBLE
49293: EQUAL
49294: IFTRUE 49298
49296: GO 49522
49298: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
49299: LD_ADDR_VAR 0 2
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 3
49312: PUSH
49313: LD_INT 4
49315: PUSH
49316: LD_INT 5
49318: PUSH
49319: LD_INT 6
49321: PUSH
49322: LD_INT 7
49324: PUSH
49325: LD_INT 8
49327: PUSH
49328: LD_INT 9
49330: PUSH
49331: LD_INT 10
49333: PUSH
49334: LD_INT 11
49336: PUSH
49337: LD_INT 12
49339: PUSH
49340: LD_INT 13
49342: PUSH
49343: LD_INT 14
49345: PUSH
49346: LD_INT 15
49348: PUSH
49349: LD_INT 16
49351: PUSH
49352: LD_INT 17
49354: PUSH
49355: LD_INT 18
49357: PUSH
49358: LD_INT 19
49360: PUSH
49361: LD_INT 20
49363: PUSH
49364: LD_INT 21
49366: PUSH
49367: LD_INT 22
49369: PUSH
49370: LD_INT 23
49372: PUSH
49373: LD_INT 24
49375: PUSH
49376: LD_INT 25
49378: PUSH
49379: LD_INT 26
49381: PUSH
49382: LD_INT 27
49384: PUSH
49385: LD_INT 28
49387: PUSH
49388: LD_INT 29
49390: PUSH
49391: LD_INT 30
49393: PUSH
49394: LD_INT 31
49396: PUSH
49397: LD_INT 32
49399: PUSH
49400: LD_INT 33
49402: PUSH
49403: LD_INT 34
49405: PUSH
49406: LD_INT 36
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 101
49448: PUSH
49449: LD_INT 102
49451: PUSH
49452: LD_INT 103
49454: PUSH
49455: LD_INT 104
49457: PUSH
49458: LD_INT 105
49460: PUSH
49461: LD_INT 106
49463: PUSH
49464: LD_INT 107
49466: PUSH
49467: LD_INT 108
49469: PUSH
49470: LD_INT 109
49472: PUSH
49473: LD_INT 110
49475: PUSH
49476: LD_INT 111
49478: PUSH
49479: LD_INT 112
49481: PUSH
49482: LD_INT 113
49484: PUSH
49485: LD_INT 114
49487: PUSH
49488: LD_INT 116
49490: PUSH
49491: LD_INT 117
49493: PUSH
49494: LD_INT 118
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: ST_TO_ADDR
49520: GO 50295
49522: LD_INT 16
49524: DOUBLE
49525: EQUAL
49526: IFTRUE 49530
49528: GO 49666
49530: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
49531: LD_ADDR_VAR 0 2
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: LD_INT 4
49541: PUSH
49542: LD_INT 5
49544: PUSH
49545: LD_INT 7
49547: PUSH
49548: LD_INT 11
49550: PUSH
49551: LD_INT 12
49553: PUSH
49554: LD_INT 15
49556: PUSH
49557: LD_INT 16
49559: PUSH
49560: LD_INT 20
49562: PUSH
49563: LD_INT 21
49565: PUSH
49566: LD_INT 22
49568: PUSH
49569: LD_INT 23
49571: PUSH
49572: LD_INT 25
49574: PUSH
49575: LD_INT 26
49577: PUSH
49578: LD_INT 30
49580: PUSH
49581: LD_INT 31
49583: PUSH
49584: LD_INT 32
49586: PUSH
49587: LD_INT 33
49589: PUSH
49590: LD_INT 34
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 101
49616: PUSH
49617: LD_INT 102
49619: PUSH
49620: LD_INT 103
49622: PUSH
49623: LD_INT 106
49625: PUSH
49626: LD_INT 108
49628: PUSH
49629: LD_INT 112
49631: PUSH
49632: LD_INT 113
49634: PUSH
49635: LD_INT 114
49637: PUSH
49638: LD_INT 116
49640: PUSH
49641: LD_INT 117
49643: PUSH
49644: LD_INT 118
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: ST_TO_ADDR
49664: GO 50295
49666: LD_INT 17
49668: DOUBLE
49669: EQUAL
49670: IFTRUE 49674
49672: GO 49898
49674: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
49675: LD_ADDR_VAR 0 2
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: LD_INT 2
49685: PUSH
49686: LD_INT 3
49688: PUSH
49689: LD_INT 4
49691: PUSH
49692: LD_INT 5
49694: PUSH
49695: LD_INT 6
49697: PUSH
49698: LD_INT 7
49700: PUSH
49701: LD_INT 8
49703: PUSH
49704: LD_INT 9
49706: PUSH
49707: LD_INT 10
49709: PUSH
49710: LD_INT 11
49712: PUSH
49713: LD_INT 12
49715: PUSH
49716: LD_INT 13
49718: PUSH
49719: LD_INT 14
49721: PUSH
49722: LD_INT 15
49724: PUSH
49725: LD_INT 16
49727: PUSH
49728: LD_INT 17
49730: PUSH
49731: LD_INT 18
49733: PUSH
49734: LD_INT 19
49736: PUSH
49737: LD_INT 20
49739: PUSH
49740: LD_INT 21
49742: PUSH
49743: LD_INT 22
49745: PUSH
49746: LD_INT 23
49748: PUSH
49749: LD_INT 24
49751: PUSH
49752: LD_INT 25
49754: PUSH
49755: LD_INT 26
49757: PUSH
49758: LD_INT 27
49760: PUSH
49761: LD_INT 28
49763: PUSH
49764: LD_INT 29
49766: PUSH
49767: LD_INT 30
49769: PUSH
49770: LD_INT 31
49772: PUSH
49773: LD_INT 32
49775: PUSH
49776: LD_INT 33
49778: PUSH
49779: LD_INT 34
49781: PUSH
49782: LD_INT 36
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 101
49824: PUSH
49825: LD_INT 102
49827: PUSH
49828: LD_INT 103
49830: PUSH
49831: LD_INT 104
49833: PUSH
49834: LD_INT 105
49836: PUSH
49837: LD_INT 106
49839: PUSH
49840: LD_INT 107
49842: PUSH
49843: LD_INT 108
49845: PUSH
49846: LD_INT 109
49848: PUSH
49849: LD_INT 110
49851: PUSH
49852: LD_INT 111
49854: PUSH
49855: LD_INT 112
49857: PUSH
49858: LD_INT 113
49860: PUSH
49861: LD_INT 114
49863: PUSH
49864: LD_INT 116
49866: PUSH
49867: LD_INT 117
49869: PUSH
49870: LD_INT 118
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: ST_TO_ADDR
49896: GO 50295
49898: LD_INT 18
49900: DOUBLE
49901: EQUAL
49902: IFTRUE 49906
49904: GO 50054
49906: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
49907: LD_ADDR_VAR 0 2
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: LD_INT 4
49917: PUSH
49918: LD_INT 5
49920: PUSH
49921: LD_INT 7
49923: PUSH
49924: LD_INT 11
49926: PUSH
49927: LD_INT 12
49929: PUSH
49930: LD_INT 15
49932: PUSH
49933: LD_INT 16
49935: PUSH
49936: LD_INT 20
49938: PUSH
49939: LD_INT 21
49941: PUSH
49942: LD_INT 22
49944: PUSH
49945: LD_INT 23
49947: PUSH
49948: LD_INT 25
49950: PUSH
49951: LD_INT 26
49953: PUSH
49954: LD_INT 30
49956: PUSH
49957: LD_INT 31
49959: PUSH
49960: LD_INT 32
49962: PUSH
49963: LD_INT 33
49965: PUSH
49966: LD_INT 34
49968: PUSH
49969: LD_INT 35
49971: PUSH
49972: LD_INT 36
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 101
50000: PUSH
50001: LD_INT 102
50003: PUSH
50004: LD_INT 103
50006: PUSH
50007: LD_INT 106
50009: PUSH
50010: LD_INT 108
50012: PUSH
50013: LD_INT 112
50015: PUSH
50016: LD_INT 113
50018: PUSH
50019: LD_INT 114
50021: PUSH
50022: LD_INT 115
50024: PUSH
50025: LD_INT 116
50027: PUSH
50028: LD_INT 117
50030: PUSH
50031: LD_INT 118
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: ST_TO_ADDR
50052: GO 50295
50054: LD_INT 19
50056: DOUBLE
50057: EQUAL
50058: IFTRUE 50062
50060: GO 50294
50062: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
50063: LD_ADDR_VAR 0 2
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: LD_INT 3
50076: PUSH
50077: LD_INT 4
50079: PUSH
50080: LD_INT 5
50082: PUSH
50083: LD_INT 6
50085: PUSH
50086: LD_INT 7
50088: PUSH
50089: LD_INT 8
50091: PUSH
50092: LD_INT 9
50094: PUSH
50095: LD_INT 10
50097: PUSH
50098: LD_INT 11
50100: PUSH
50101: LD_INT 12
50103: PUSH
50104: LD_INT 13
50106: PUSH
50107: LD_INT 14
50109: PUSH
50110: LD_INT 15
50112: PUSH
50113: LD_INT 16
50115: PUSH
50116: LD_INT 17
50118: PUSH
50119: LD_INT 18
50121: PUSH
50122: LD_INT 19
50124: PUSH
50125: LD_INT 20
50127: PUSH
50128: LD_INT 21
50130: PUSH
50131: LD_INT 22
50133: PUSH
50134: LD_INT 23
50136: PUSH
50137: LD_INT 24
50139: PUSH
50140: LD_INT 25
50142: PUSH
50143: LD_INT 26
50145: PUSH
50146: LD_INT 27
50148: PUSH
50149: LD_INT 28
50151: PUSH
50152: LD_INT 29
50154: PUSH
50155: LD_INT 30
50157: PUSH
50158: LD_INT 31
50160: PUSH
50161: LD_INT 32
50163: PUSH
50164: LD_INT 33
50166: PUSH
50167: LD_INT 34
50169: PUSH
50170: LD_INT 35
50172: PUSH
50173: LD_INT 36
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 101
50216: PUSH
50217: LD_INT 102
50219: PUSH
50220: LD_INT 103
50222: PUSH
50223: LD_INT 104
50225: PUSH
50226: LD_INT 105
50228: PUSH
50229: LD_INT 106
50231: PUSH
50232: LD_INT 107
50234: PUSH
50235: LD_INT 108
50237: PUSH
50238: LD_INT 109
50240: PUSH
50241: LD_INT 110
50243: PUSH
50244: LD_INT 111
50246: PUSH
50247: LD_INT 112
50249: PUSH
50250: LD_INT 113
50252: PUSH
50253: LD_INT 114
50255: PUSH
50256: LD_INT 115
50258: PUSH
50259: LD_INT 116
50261: PUSH
50262: LD_INT 117
50264: PUSH
50265: LD_INT 118
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: ST_TO_ADDR
50292: GO 50295
50294: POP
// end else
50295: GO 50526
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
50297: LD_ADDR_VAR 0 2
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 2
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: LD_INT 4
50313: PUSH
50314: LD_INT 5
50316: PUSH
50317: LD_INT 6
50319: PUSH
50320: LD_INT 7
50322: PUSH
50323: LD_INT 8
50325: PUSH
50326: LD_INT 9
50328: PUSH
50329: LD_INT 10
50331: PUSH
50332: LD_INT 11
50334: PUSH
50335: LD_INT 12
50337: PUSH
50338: LD_INT 13
50340: PUSH
50341: LD_INT 14
50343: PUSH
50344: LD_INT 15
50346: PUSH
50347: LD_INT 16
50349: PUSH
50350: LD_INT 17
50352: PUSH
50353: LD_INT 18
50355: PUSH
50356: LD_INT 19
50358: PUSH
50359: LD_INT 20
50361: PUSH
50362: LD_INT 21
50364: PUSH
50365: LD_INT 22
50367: PUSH
50368: LD_INT 23
50370: PUSH
50371: LD_INT 24
50373: PUSH
50374: LD_INT 25
50376: PUSH
50377: LD_INT 26
50379: PUSH
50380: LD_INT 27
50382: PUSH
50383: LD_INT 28
50385: PUSH
50386: LD_INT 29
50388: PUSH
50389: LD_INT 30
50391: PUSH
50392: LD_INT 31
50394: PUSH
50395: LD_INT 32
50397: PUSH
50398: LD_INT 33
50400: PUSH
50401: LD_INT 34
50403: PUSH
50404: LD_INT 35
50406: PUSH
50407: LD_INT 36
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 101
50450: PUSH
50451: LD_INT 102
50453: PUSH
50454: LD_INT 103
50456: PUSH
50457: LD_INT 104
50459: PUSH
50460: LD_INT 105
50462: PUSH
50463: LD_INT 106
50465: PUSH
50466: LD_INT 107
50468: PUSH
50469: LD_INT 108
50471: PUSH
50472: LD_INT 109
50474: PUSH
50475: LD_INT 110
50477: PUSH
50478: LD_INT 111
50480: PUSH
50481: LD_INT 112
50483: PUSH
50484: LD_INT 113
50486: PUSH
50487: LD_INT 114
50489: PUSH
50490: LD_INT 115
50492: PUSH
50493: LD_INT 116
50495: PUSH
50496: LD_INT 117
50498: PUSH
50499: LD_INT 118
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// if result then
50526: LD_VAR 0 2
50530: IFFALSE 51316
// begin normal :=  ;
50532: LD_ADDR_VAR 0 5
50536: PUSH
50537: LD_STRING 
50539: ST_TO_ADDR
// hardcore :=  ;
50540: LD_ADDR_VAR 0 6
50544: PUSH
50545: LD_STRING 
50547: ST_TO_ADDR
// active :=  ;
50548: LD_ADDR_VAR 0 7
50552: PUSH
50553: LD_STRING 
50555: ST_TO_ADDR
// for i = 1 to normalCounter do
50556: LD_ADDR_VAR 0 8
50560: PUSH
50561: DOUBLE
50562: LD_INT 1
50564: DEC
50565: ST_TO_ADDR
50566: LD_EXP 64
50570: PUSH
50571: FOR_TO
50572: IFFALSE 50673
// begin tmp := 0 ;
50574: LD_ADDR_VAR 0 3
50578: PUSH
50579: LD_STRING 0
50581: ST_TO_ADDR
// if result [ 1 ] then
50582: LD_VAR 0 2
50586: PUSH
50587: LD_INT 1
50589: ARRAY
50590: IFFALSE 50655
// if result [ 1 ] [ 1 ] = i then
50592: LD_VAR 0 2
50596: PUSH
50597: LD_INT 1
50599: ARRAY
50600: PUSH
50601: LD_INT 1
50603: ARRAY
50604: PUSH
50605: LD_VAR 0 8
50609: EQUAL
50610: IFFALSE 50655
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50612: LD_ADDR_VAR 0 2
50616: PUSH
50617: LD_VAR 0 2
50621: PPUSH
50622: LD_INT 1
50624: PPUSH
50625: LD_VAR 0 2
50629: PUSH
50630: LD_INT 1
50632: ARRAY
50633: PPUSH
50634: LD_INT 1
50636: PPUSH
50637: CALL_OW 3
50641: PPUSH
50642: CALL_OW 1
50646: ST_TO_ADDR
// tmp := 1 ;
50647: LD_ADDR_VAR 0 3
50651: PUSH
50652: LD_STRING 1
50654: ST_TO_ADDR
// end ; normal := normal & tmp ;
50655: LD_ADDR_VAR 0 5
50659: PUSH
50660: LD_VAR 0 5
50664: PUSH
50665: LD_VAR 0 3
50669: STR
50670: ST_TO_ADDR
// end ;
50671: GO 50571
50673: POP
50674: POP
// for i = 1 to hardcoreCounter do
50675: LD_ADDR_VAR 0 8
50679: PUSH
50680: DOUBLE
50681: LD_INT 1
50683: DEC
50684: ST_TO_ADDR
50685: LD_EXP 65
50689: PUSH
50690: FOR_TO
50691: IFFALSE 50796
// begin tmp := 0 ;
50693: LD_ADDR_VAR 0 3
50697: PUSH
50698: LD_STRING 0
50700: ST_TO_ADDR
// if result [ 2 ] then
50701: LD_VAR 0 2
50705: PUSH
50706: LD_INT 2
50708: ARRAY
50709: IFFALSE 50778
// if result [ 2 ] [ 1 ] = 100 + i then
50711: LD_VAR 0 2
50715: PUSH
50716: LD_INT 2
50718: ARRAY
50719: PUSH
50720: LD_INT 1
50722: ARRAY
50723: PUSH
50724: LD_INT 100
50726: PUSH
50727: LD_VAR 0 8
50731: PLUS
50732: EQUAL
50733: IFFALSE 50778
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50735: LD_ADDR_VAR 0 2
50739: PUSH
50740: LD_VAR 0 2
50744: PPUSH
50745: LD_INT 2
50747: PPUSH
50748: LD_VAR 0 2
50752: PUSH
50753: LD_INT 2
50755: ARRAY
50756: PPUSH
50757: LD_INT 1
50759: PPUSH
50760: CALL_OW 3
50764: PPUSH
50765: CALL_OW 1
50769: ST_TO_ADDR
// tmp := 1 ;
50770: LD_ADDR_VAR 0 3
50774: PUSH
50775: LD_STRING 1
50777: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50778: LD_ADDR_VAR 0 6
50782: PUSH
50783: LD_VAR 0 6
50787: PUSH
50788: LD_VAR 0 3
50792: STR
50793: ST_TO_ADDR
// end ;
50794: GO 50690
50796: POP
50797: POP
// if isGameLoad then
50798: LD_VAR 0 1
50802: IFFALSE 51277
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
50804: LD_ADDR_VAR 0 4
50808: PUSH
50809: LD_EXP 68
50813: PUSH
50814: LD_EXP 67
50818: PUSH
50819: LD_EXP 69
50823: PUSH
50824: LD_EXP 66
50828: PUSH
50829: LD_EXP 70
50833: PUSH
50834: LD_EXP 71
50838: PUSH
50839: LD_EXP 72
50843: PUSH
50844: LD_EXP 73
50848: PUSH
50849: LD_EXP 74
50853: PUSH
50854: LD_EXP 75
50858: PUSH
50859: LD_EXP 76
50863: PUSH
50864: LD_EXP 77
50868: PUSH
50869: LD_EXP 78
50873: PUSH
50874: LD_EXP 79
50878: PUSH
50879: LD_EXP 87
50883: PUSH
50884: LD_EXP 88
50888: PUSH
50889: LD_EXP 89
50893: PUSH
50894: LD_EXP 90
50898: PUSH
50899: LD_EXP 92
50903: PUSH
50904: LD_EXP 93
50908: PUSH
50909: LD_EXP 94
50913: PUSH
50914: LD_EXP 97
50918: PUSH
50919: LD_EXP 99
50923: PUSH
50924: LD_EXP 100
50928: PUSH
50929: LD_EXP 101
50933: PUSH
50934: LD_EXP 103
50938: PUSH
50939: LD_EXP 104
50943: PUSH
50944: LD_EXP 107
50948: PUSH
50949: LD_EXP 108
50953: PUSH
50954: LD_EXP 109
50958: PUSH
50959: LD_EXP 110
50963: PUSH
50964: LD_EXP 111
50968: PUSH
50969: LD_EXP 112
50973: PUSH
50974: LD_EXP 113
50978: PUSH
50979: LD_EXP 114
50983: PUSH
50984: LD_EXP 115
50988: PUSH
50989: LD_EXP 80
50993: PUSH
50994: LD_EXP 81
50998: PUSH
50999: LD_EXP 84
51003: PUSH
51004: LD_EXP 85
51008: PUSH
51009: LD_EXP 86
51013: PUSH
51014: LD_EXP 82
51018: PUSH
51019: LD_EXP 83
51023: PUSH
51024: LD_EXP 91
51028: PUSH
51029: LD_EXP 95
51033: PUSH
51034: LD_EXP 96
51038: PUSH
51039: LD_EXP 98
51043: PUSH
51044: LD_EXP 102
51048: PUSH
51049: LD_EXP 105
51053: PUSH
51054: LD_EXP 106
51058: PUSH
51059: LD_EXP 116
51063: PUSH
51064: LD_EXP 117
51068: PUSH
51069: LD_EXP 118
51073: PUSH
51074: LD_EXP 119
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: ST_TO_ADDR
// tmp :=  ;
51135: LD_ADDR_VAR 0 3
51139: PUSH
51140: LD_STRING 
51142: ST_TO_ADDR
// for i = 1 to normalCounter do
51143: LD_ADDR_VAR 0 8
51147: PUSH
51148: DOUBLE
51149: LD_INT 1
51151: DEC
51152: ST_TO_ADDR
51153: LD_EXP 64
51157: PUSH
51158: FOR_TO
51159: IFFALSE 51195
// begin if flags [ i ] then
51161: LD_VAR 0 4
51165: PUSH
51166: LD_VAR 0 8
51170: ARRAY
51171: IFFALSE 51193
// tmp := tmp & i & ; ;
51173: LD_ADDR_VAR 0 3
51177: PUSH
51178: LD_VAR 0 3
51182: PUSH
51183: LD_VAR 0 8
51187: STR
51188: PUSH
51189: LD_STRING ;
51191: STR
51192: ST_TO_ADDR
// end ;
51193: GO 51158
51195: POP
51196: POP
// for i = 1 to hardcoreCounter do
51197: LD_ADDR_VAR 0 8
51201: PUSH
51202: DOUBLE
51203: LD_INT 1
51205: DEC
51206: ST_TO_ADDR
51207: LD_EXP 65
51211: PUSH
51212: FOR_TO
51213: IFFALSE 51259
// begin if flags [ normalCounter + i ] then
51215: LD_VAR 0 4
51219: PUSH
51220: LD_EXP 64
51224: PUSH
51225: LD_VAR 0 8
51229: PLUS
51230: ARRAY
51231: IFFALSE 51257
// tmp := tmp & ( 100 + i ) & ; ;
51233: LD_ADDR_VAR 0 3
51237: PUSH
51238: LD_VAR 0 3
51242: PUSH
51243: LD_INT 100
51245: PUSH
51246: LD_VAR 0 8
51250: PLUS
51251: STR
51252: PUSH
51253: LD_STRING ;
51255: STR
51256: ST_TO_ADDR
// end ;
51257: GO 51212
51259: POP
51260: POP
// if tmp then
51261: LD_VAR 0 3
51265: IFFALSE 51277
// active := tmp ;
51267: LD_ADDR_VAR 0 7
51271: PUSH
51272: LD_VAR 0 3
51276: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
51277: LD_STRING getStreamItemsFromMission("
51279: PUSH
51280: LD_VAR 0 5
51284: STR
51285: PUSH
51286: LD_STRING ","
51288: STR
51289: PUSH
51290: LD_VAR 0 6
51294: STR
51295: PUSH
51296: LD_STRING ","
51298: STR
51299: PUSH
51300: LD_VAR 0 7
51304: STR
51305: PUSH
51306: LD_STRING ")
51308: STR
51309: PPUSH
51310: CALL_OW 559
// end else
51314: GO 51323
// ToLua ( getStreamItemsFromMission("","","") ) ;
51316: LD_STRING getStreamItemsFromMission("","","")
51318: PPUSH
51319: CALL_OW 559
// end ;
51323: LD_VAR 0 2
51327: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51328: LD_EXP 63
51332: PUSH
51333: LD_EXP 68
51337: AND
51338: IFFALSE 51462
51340: GO 51342
51342: DISABLE
51343: LD_INT 0
51345: PPUSH
51346: PPUSH
// begin enable ;
51347: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51348: LD_ADDR_VAR 0 2
51352: PUSH
51353: LD_INT 22
51355: PUSH
51356: LD_OWVAR 2
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 2
51367: PUSH
51368: LD_INT 34
51370: PUSH
51371: LD_INT 7
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 34
51380: PUSH
51381: LD_INT 45
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 34
51390: PUSH
51391: LD_INT 28
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 34
51400: PUSH
51401: LD_INT 47
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PPUSH
51419: CALL_OW 69
51423: ST_TO_ADDR
// if not tmp then
51424: LD_VAR 0 2
51428: NOT
51429: IFFALSE 51433
// exit ;
51431: GO 51462
// for i in tmp do
51433: LD_ADDR_VAR 0 1
51437: PUSH
51438: LD_VAR 0 2
51442: PUSH
51443: FOR_IN
51444: IFFALSE 51460
// begin SetLives ( i , 0 ) ;
51446: LD_VAR 0 1
51450: PPUSH
51451: LD_INT 0
51453: PPUSH
51454: CALL_OW 234
// end ;
51458: GO 51443
51460: POP
51461: POP
// end ;
51462: PPOPN 2
51464: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51465: LD_EXP 63
51469: PUSH
51470: LD_EXP 69
51474: AND
51475: IFFALSE 51559
51477: GO 51479
51479: DISABLE
51480: LD_INT 0
51482: PPUSH
51483: PPUSH
// begin enable ;
51484: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51485: LD_ADDR_VAR 0 2
51489: PUSH
51490: LD_INT 22
51492: PUSH
51493: LD_OWVAR 2
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 32
51504: PUSH
51505: LD_INT 3
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PPUSH
51516: CALL_OW 69
51520: ST_TO_ADDR
// if not tmp then
51521: LD_VAR 0 2
51525: NOT
51526: IFFALSE 51530
// exit ;
51528: GO 51559
// for i in tmp do
51530: LD_ADDR_VAR 0 1
51534: PUSH
51535: LD_VAR 0 2
51539: PUSH
51540: FOR_IN
51541: IFFALSE 51557
// begin SetLives ( i , 0 ) ;
51543: LD_VAR 0 1
51547: PPUSH
51548: LD_INT 0
51550: PPUSH
51551: CALL_OW 234
// end ;
51555: GO 51540
51557: POP
51558: POP
// end ;
51559: PPOPN 2
51561: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51562: LD_EXP 63
51566: PUSH
51567: LD_EXP 66
51571: AND
51572: IFFALSE 51665
51574: GO 51576
51576: DISABLE
51577: LD_INT 0
51579: PPUSH
// begin enable ;
51580: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51581: LD_ADDR_VAR 0 1
51585: PUSH
51586: LD_INT 22
51588: PUSH
51589: LD_OWVAR 2
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: LD_INT 25
51603: PUSH
51604: LD_INT 5
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 25
51613: PUSH
51614: LD_INT 9
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 25
51623: PUSH
51624: LD_INT 8
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PPUSH
51641: CALL_OW 69
51645: PUSH
51646: FOR_IN
51647: IFFALSE 51663
// begin SetClass ( i , 1 ) ;
51649: LD_VAR 0 1
51653: PPUSH
51654: LD_INT 1
51656: PPUSH
51657: CALL_OW 336
// end ;
51661: GO 51646
51663: POP
51664: POP
// end ;
51665: PPOPN 1
51667: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51668: LD_EXP 63
51672: PUSH
51673: LD_EXP 67
51677: AND
51678: PUSH
51679: LD_OWVAR 65
51683: PUSH
51684: LD_INT 7
51686: LESS
51687: AND
51688: IFFALSE 51702
51690: GO 51692
51692: DISABLE
// begin enable ;
51693: ENABLE
// game_speed := 7 ;
51694: LD_ADDR_OWVAR 65
51698: PUSH
51699: LD_INT 7
51701: ST_TO_ADDR
// end ;
51702: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51703: LD_EXP 63
51707: PUSH
51708: LD_EXP 70
51712: AND
51713: IFFALSE 51915
51715: GO 51717
51717: DISABLE
51718: LD_INT 0
51720: PPUSH
51721: PPUSH
51722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51723: LD_ADDR_VAR 0 3
51727: PUSH
51728: LD_INT 81
51730: PUSH
51731: LD_OWVAR 2
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 21
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PPUSH
51754: CALL_OW 69
51758: ST_TO_ADDR
// if not tmp then
51759: LD_VAR 0 3
51763: NOT
51764: IFFALSE 51768
// exit ;
51766: GO 51915
// if tmp > 5 then
51768: LD_VAR 0 3
51772: PUSH
51773: LD_INT 5
51775: GREATER
51776: IFFALSE 51788
// k := 5 else
51778: LD_ADDR_VAR 0 2
51782: PUSH
51783: LD_INT 5
51785: ST_TO_ADDR
51786: GO 51798
// k := tmp ;
51788: LD_ADDR_VAR 0 2
51792: PUSH
51793: LD_VAR 0 3
51797: ST_TO_ADDR
// for i := 1 to k do
51798: LD_ADDR_VAR 0 1
51802: PUSH
51803: DOUBLE
51804: LD_INT 1
51806: DEC
51807: ST_TO_ADDR
51808: LD_VAR 0 2
51812: PUSH
51813: FOR_TO
51814: IFFALSE 51913
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51816: LD_VAR 0 3
51820: PUSH
51821: LD_VAR 0 1
51825: ARRAY
51826: PPUSH
51827: LD_VAR 0 1
51831: PUSH
51832: LD_INT 4
51834: MOD
51835: PUSH
51836: LD_INT 1
51838: PLUS
51839: PPUSH
51840: CALL_OW 259
51844: PUSH
51845: LD_INT 10
51847: LESS
51848: IFFALSE 51911
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51850: LD_VAR 0 3
51854: PUSH
51855: LD_VAR 0 1
51859: ARRAY
51860: PPUSH
51861: LD_VAR 0 1
51865: PUSH
51866: LD_INT 4
51868: MOD
51869: PUSH
51870: LD_INT 1
51872: PLUS
51873: PPUSH
51874: LD_VAR 0 3
51878: PUSH
51879: LD_VAR 0 1
51883: ARRAY
51884: PPUSH
51885: LD_VAR 0 1
51889: PUSH
51890: LD_INT 4
51892: MOD
51893: PUSH
51894: LD_INT 1
51896: PLUS
51897: PPUSH
51898: CALL_OW 259
51902: PUSH
51903: LD_INT 1
51905: PLUS
51906: PPUSH
51907: CALL_OW 237
51911: GO 51813
51913: POP
51914: POP
// end ;
51915: PPOPN 3
51917: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51918: LD_EXP 63
51922: PUSH
51923: LD_EXP 71
51927: AND
51928: IFFALSE 51948
51930: GO 51932
51932: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51933: LD_INT 4
51935: PPUSH
51936: LD_OWVAR 2
51940: PPUSH
51941: LD_INT 0
51943: PPUSH
51944: CALL_OW 324
51948: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51949: LD_EXP 63
51953: PUSH
51954: LD_EXP 100
51958: AND
51959: IFFALSE 51979
51961: GO 51963
51963: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51964: LD_INT 19
51966: PPUSH
51967: LD_OWVAR 2
51971: PPUSH
51972: LD_INT 0
51974: PPUSH
51975: CALL_OW 324
51979: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
51980: LD_EXP 63
51984: PUSH
51985: LD_EXP 72
51989: AND
51990: IFFALSE 52092
51992: GO 51994
51994: DISABLE
51995: LD_INT 0
51997: PPUSH
51998: PPUSH
// begin enable ;
51999: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
52000: LD_ADDR_VAR 0 2
52004: PUSH
52005: LD_INT 22
52007: PUSH
52008: LD_OWVAR 2
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: PUSH
52020: LD_INT 34
52022: PUSH
52023: LD_INT 11
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 34
52032: PUSH
52033: LD_INT 30
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: LIST
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PPUSH
52049: CALL_OW 69
52053: ST_TO_ADDR
// if not tmp then
52054: LD_VAR 0 2
52058: NOT
52059: IFFALSE 52063
// exit ;
52061: GO 52092
// for i in tmp do
52063: LD_ADDR_VAR 0 1
52067: PUSH
52068: LD_VAR 0 2
52072: PUSH
52073: FOR_IN
52074: IFFALSE 52090
// begin SetLives ( i , 0 ) ;
52076: LD_VAR 0 1
52080: PPUSH
52081: LD_INT 0
52083: PPUSH
52084: CALL_OW 234
// end ;
52088: GO 52073
52090: POP
52091: POP
// end ;
52092: PPOPN 2
52094: END
// every 0 0$1 trigger StreamModeActive and sBunker do
52095: LD_EXP 63
52099: PUSH
52100: LD_EXP 73
52104: AND
52105: IFFALSE 52125
52107: GO 52109
52109: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
52110: LD_INT 32
52112: PPUSH
52113: LD_OWVAR 2
52117: PPUSH
52118: LD_INT 0
52120: PPUSH
52121: CALL_OW 324
52125: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
52126: LD_EXP 63
52130: PUSH
52131: LD_EXP 74
52135: AND
52136: IFFALSE 52317
52138: GO 52140
52140: DISABLE
52141: LD_INT 0
52143: PPUSH
52144: PPUSH
52145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
52146: LD_ADDR_VAR 0 2
52150: PUSH
52151: LD_INT 22
52153: PUSH
52154: LD_OWVAR 2
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 33
52165: PUSH
52166: LD_INT 3
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PPUSH
52177: CALL_OW 69
52181: ST_TO_ADDR
// if not tmp then
52182: LD_VAR 0 2
52186: NOT
52187: IFFALSE 52191
// exit ;
52189: GO 52317
// side := 0 ;
52191: LD_ADDR_VAR 0 3
52195: PUSH
52196: LD_INT 0
52198: ST_TO_ADDR
// for i := 1 to 8 do
52199: LD_ADDR_VAR 0 1
52203: PUSH
52204: DOUBLE
52205: LD_INT 1
52207: DEC
52208: ST_TO_ADDR
52209: LD_INT 8
52211: PUSH
52212: FOR_TO
52213: IFFALSE 52261
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52215: LD_OWVAR 2
52219: PUSH
52220: LD_VAR 0 1
52224: NONEQUAL
52225: PUSH
52226: LD_OWVAR 2
52230: PPUSH
52231: LD_VAR 0 1
52235: PPUSH
52236: CALL_OW 81
52240: PUSH
52241: LD_INT 2
52243: EQUAL
52244: AND
52245: IFFALSE 52259
// begin side := i ;
52247: LD_ADDR_VAR 0 3
52251: PUSH
52252: LD_VAR 0 1
52256: ST_TO_ADDR
// break ;
52257: GO 52261
// end ;
52259: GO 52212
52261: POP
52262: POP
// if not side then
52263: LD_VAR 0 3
52267: NOT
52268: IFFALSE 52272
// exit ;
52270: GO 52317
// for i := 1 to tmp do
52272: LD_ADDR_VAR 0 1
52276: PUSH
52277: DOUBLE
52278: LD_INT 1
52280: DEC
52281: ST_TO_ADDR
52282: LD_VAR 0 2
52286: PUSH
52287: FOR_TO
52288: IFFALSE 52315
// if Prob ( 60 ) then
52290: LD_INT 60
52292: PPUSH
52293: CALL_OW 13
52297: IFFALSE 52313
// SetSide ( i , side ) ;
52299: LD_VAR 0 1
52303: PPUSH
52304: LD_VAR 0 3
52308: PPUSH
52309: CALL_OW 235
52313: GO 52287
52315: POP
52316: POP
// end ;
52317: PPOPN 3
52319: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52320: LD_EXP 63
52324: PUSH
52325: LD_EXP 76
52329: AND
52330: IFFALSE 52449
52332: GO 52334
52334: DISABLE
52335: LD_INT 0
52337: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52338: LD_ADDR_VAR 0 1
52342: PUSH
52343: LD_INT 22
52345: PUSH
52346: LD_OWVAR 2
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 21
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 3
52367: PUSH
52368: LD_INT 23
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: LIST
52386: PPUSH
52387: CALL_OW 69
52391: PUSH
52392: FOR_IN
52393: IFFALSE 52447
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52395: LD_VAR 0 1
52399: PPUSH
52400: CALL_OW 257
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: LD_INT 3
52413: PUSH
52414: LD_INT 4
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: IN
52423: IFFALSE 52445
// SetClass ( un , rand ( 1 , 4 ) ) ;
52425: LD_VAR 0 1
52429: PPUSH
52430: LD_INT 1
52432: PPUSH
52433: LD_INT 4
52435: PPUSH
52436: CALL_OW 12
52440: PPUSH
52441: CALL_OW 336
52445: GO 52392
52447: POP
52448: POP
// end ;
52449: PPOPN 1
52451: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52452: LD_EXP 63
52456: PUSH
52457: LD_EXP 75
52461: AND
52462: IFFALSE 52541
52464: GO 52466
52466: DISABLE
52467: LD_INT 0
52469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52470: LD_ADDR_VAR 0 1
52474: PUSH
52475: LD_INT 22
52477: PUSH
52478: LD_OWVAR 2
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 21
52489: PUSH
52490: LD_INT 3
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PPUSH
52501: CALL_OW 69
52505: ST_TO_ADDR
// if not tmp then
52506: LD_VAR 0 1
52510: NOT
52511: IFFALSE 52515
// exit ;
52513: GO 52541
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52515: LD_VAR 0 1
52519: PUSH
52520: LD_INT 1
52522: PPUSH
52523: LD_VAR 0 1
52527: PPUSH
52528: CALL_OW 12
52532: ARRAY
52533: PPUSH
52534: LD_INT 100
52536: PPUSH
52537: CALL_OW 234
// end ;
52541: PPOPN 1
52543: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52544: LD_EXP 63
52548: PUSH
52549: LD_EXP 77
52553: AND
52554: IFFALSE 52652
52556: GO 52558
52558: DISABLE
52559: LD_INT 0
52561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52562: LD_ADDR_VAR 0 1
52566: PUSH
52567: LD_INT 22
52569: PUSH
52570: LD_OWVAR 2
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 21
52581: PUSH
52582: LD_INT 1
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PPUSH
52593: CALL_OW 69
52597: ST_TO_ADDR
// if not tmp then
52598: LD_VAR 0 1
52602: NOT
52603: IFFALSE 52607
// exit ;
52605: GO 52652
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52607: LD_VAR 0 1
52611: PUSH
52612: LD_INT 1
52614: PPUSH
52615: LD_VAR 0 1
52619: PPUSH
52620: CALL_OW 12
52624: ARRAY
52625: PPUSH
52626: LD_INT 1
52628: PPUSH
52629: LD_INT 4
52631: PPUSH
52632: CALL_OW 12
52636: PPUSH
52637: LD_INT 3000
52639: PPUSH
52640: LD_INT 9000
52642: PPUSH
52643: CALL_OW 12
52647: PPUSH
52648: CALL_OW 492
// end ;
52652: PPOPN 1
52654: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52655: LD_EXP 63
52659: PUSH
52660: LD_EXP 78
52664: AND
52665: IFFALSE 52685
52667: GO 52669
52669: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52670: LD_INT 1
52672: PPUSH
52673: LD_OWVAR 2
52677: PPUSH
52678: LD_INT 0
52680: PPUSH
52681: CALL_OW 324
52685: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52686: LD_EXP 63
52690: PUSH
52691: LD_EXP 79
52695: AND
52696: IFFALSE 52779
52698: GO 52700
52700: DISABLE
52701: LD_INT 0
52703: PPUSH
52704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52705: LD_ADDR_VAR 0 2
52709: PUSH
52710: LD_INT 22
52712: PUSH
52713: LD_OWVAR 2
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 21
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PPUSH
52736: CALL_OW 69
52740: ST_TO_ADDR
// if not tmp then
52741: LD_VAR 0 2
52745: NOT
52746: IFFALSE 52750
// exit ;
52748: GO 52779
// for i in tmp do
52750: LD_ADDR_VAR 0 1
52754: PUSH
52755: LD_VAR 0 2
52759: PUSH
52760: FOR_IN
52761: IFFALSE 52777
// SetBLevel ( i , 10 ) ;
52763: LD_VAR 0 1
52767: PPUSH
52768: LD_INT 10
52770: PPUSH
52771: CALL_OW 241
52775: GO 52760
52777: POP
52778: POP
// end ;
52779: PPOPN 2
52781: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52782: LD_EXP 63
52786: PUSH
52787: LD_EXP 80
52791: AND
52792: IFFALSE 52903
52794: GO 52796
52796: DISABLE
52797: LD_INT 0
52799: PPUSH
52800: PPUSH
52801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52802: LD_ADDR_VAR 0 3
52806: PUSH
52807: LD_INT 22
52809: PUSH
52810: LD_OWVAR 2
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 25
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PPUSH
52833: CALL_OW 69
52837: ST_TO_ADDR
// if not tmp then
52838: LD_VAR 0 3
52842: NOT
52843: IFFALSE 52847
// exit ;
52845: GO 52903
// un := tmp [ rand ( 1 , tmp ) ] ;
52847: LD_ADDR_VAR 0 2
52851: PUSH
52852: LD_VAR 0 3
52856: PUSH
52857: LD_INT 1
52859: PPUSH
52860: LD_VAR 0 3
52864: PPUSH
52865: CALL_OW 12
52869: ARRAY
52870: ST_TO_ADDR
// if Crawls ( un ) then
52871: LD_VAR 0 2
52875: PPUSH
52876: CALL_OW 318
52880: IFFALSE 52891
// ComWalk ( un ) ;
52882: LD_VAR 0 2
52886: PPUSH
52887: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52891: LD_VAR 0 2
52895: PPUSH
52896: LD_INT 5
52898: PPUSH
52899: CALL_OW 336
// end ;
52903: PPOPN 3
52905: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
52906: LD_EXP 63
52910: PUSH
52911: LD_EXP 81
52915: AND
52916: PUSH
52917: LD_OWVAR 67
52921: PUSH
52922: LD_INT 4
52924: LESS
52925: AND
52926: IFFALSE 52945
52928: GO 52930
52930: DISABLE
// begin Difficulty := Difficulty + 1 ;
52931: LD_ADDR_OWVAR 67
52935: PUSH
52936: LD_OWVAR 67
52940: PUSH
52941: LD_INT 1
52943: PLUS
52944: ST_TO_ADDR
// end ;
52945: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52946: LD_EXP 63
52950: PUSH
52951: LD_EXP 82
52955: AND
52956: IFFALSE 53059
52958: GO 52960
52960: DISABLE
52961: LD_INT 0
52963: PPUSH
// begin for i := 1 to 5 do
52964: LD_ADDR_VAR 0 1
52968: PUSH
52969: DOUBLE
52970: LD_INT 1
52972: DEC
52973: ST_TO_ADDR
52974: LD_INT 5
52976: PUSH
52977: FOR_TO
52978: IFFALSE 53057
// begin uc_nation := nation_nature ;
52980: LD_ADDR_OWVAR 21
52984: PUSH
52985: LD_INT 0
52987: ST_TO_ADDR
// uc_side := 0 ;
52988: LD_ADDR_OWVAR 20
52992: PUSH
52993: LD_INT 0
52995: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52996: LD_ADDR_OWVAR 29
53000: PUSH
53001: LD_INT 12
53003: PUSH
53004: LD_INT 12
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: ST_TO_ADDR
// hc_agressivity := 20 ;
53011: LD_ADDR_OWVAR 35
53015: PUSH
53016: LD_INT 20
53018: ST_TO_ADDR
// hc_class := class_tiger ;
53019: LD_ADDR_OWVAR 28
53023: PUSH
53024: LD_INT 14
53026: ST_TO_ADDR
// hc_gallery :=  ;
53027: LD_ADDR_OWVAR 33
53031: PUSH
53032: LD_STRING 
53034: ST_TO_ADDR
// hc_name :=  ;
53035: LD_ADDR_OWVAR 26
53039: PUSH
53040: LD_STRING 
53042: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
53043: CALL_OW 44
53047: PPUSH
53048: LD_INT 0
53050: PPUSH
53051: CALL_OW 51
// end ;
53055: GO 52977
53057: POP
53058: POP
// end ;
53059: PPOPN 1
53061: END
// every 0 0$1 trigger StreamModeActive and sBomb do
53062: LD_EXP 63
53066: PUSH
53067: LD_EXP 83
53071: AND
53072: IFFALSE 53081
53074: GO 53076
53076: DISABLE
// StreamSibBomb ;
53077: CALL 53082 0 0
53081: END
// export function StreamSibBomb ; var i , x , y ; begin
53082: LD_INT 0
53084: PPUSH
53085: PPUSH
53086: PPUSH
53087: PPUSH
// result := false ;
53088: LD_ADDR_VAR 0 1
53092: PUSH
53093: LD_INT 0
53095: ST_TO_ADDR
// for i := 1 to 16 do
53096: LD_ADDR_VAR 0 2
53100: PUSH
53101: DOUBLE
53102: LD_INT 1
53104: DEC
53105: ST_TO_ADDR
53106: LD_INT 16
53108: PUSH
53109: FOR_TO
53110: IFFALSE 53309
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53112: LD_ADDR_VAR 0 3
53116: PUSH
53117: LD_INT 10
53119: PUSH
53120: LD_INT 20
53122: PUSH
53123: LD_INT 30
53125: PUSH
53126: LD_INT 40
53128: PUSH
53129: LD_INT 50
53131: PUSH
53132: LD_INT 60
53134: PUSH
53135: LD_INT 70
53137: PUSH
53138: LD_INT 80
53140: PUSH
53141: LD_INT 90
53143: PUSH
53144: LD_INT 100
53146: PUSH
53147: LD_INT 110
53149: PUSH
53150: LD_INT 120
53152: PUSH
53153: LD_INT 130
53155: PUSH
53156: LD_INT 140
53158: PUSH
53159: LD_INT 150
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PPUSH
53182: LD_INT 15
53184: PPUSH
53185: CALL_OW 12
53189: ARRAY
53190: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53191: LD_ADDR_VAR 0 4
53195: PUSH
53196: LD_INT 10
53198: PUSH
53199: LD_INT 20
53201: PUSH
53202: LD_INT 30
53204: PUSH
53205: LD_INT 40
53207: PUSH
53208: LD_INT 50
53210: PUSH
53211: LD_INT 60
53213: PUSH
53214: LD_INT 70
53216: PUSH
53217: LD_INT 80
53219: PUSH
53220: LD_INT 90
53222: PUSH
53223: LD_INT 100
53225: PUSH
53226: LD_INT 110
53228: PUSH
53229: LD_INT 120
53231: PUSH
53232: LD_INT 130
53234: PUSH
53235: LD_INT 140
53237: PUSH
53238: LD_INT 150
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: PPUSH
53261: LD_INT 15
53263: PPUSH
53264: CALL_OW 12
53268: ARRAY
53269: ST_TO_ADDR
// if ValidHex ( x , y ) then
53270: LD_VAR 0 3
53274: PPUSH
53275: LD_VAR 0 4
53279: PPUSH
53280: CALL_OW 488
53284: IFFALSE 53307
// begin result := [ x , y ] ;
53286: LD_ADDR_VAR 0 1
53290: PUSH
53291: LD_VAR 0 3
53295: PUSH
53296: LD_VAR 0 4
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: ST_TO_ADDR
// break ;
53305: GO 53309
// end ; end ;
53307: GO 53109
53309: POP
53310: POP
// if result then
53311: LD_VAR 0 1
53315: IFFALSE 53375
// begin ToLua ( playSibBomb() ) ;
53317: LD_STRING playSibBomb()
53319: PPUSH
53320: CALL_OW 559
// wait ( 0 0$14 ) ;
53324: LD_INT 490
53326: PPUSH
53327: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53331: LD_VAR 0 1
53335: PUSH
53336: LD_INT 1
53338: ARRAY
53339: PPUSH
53340: LD_VAR 0 1
53344: PUSH
53345: LD_INT 2
53347: ARRAY
53348: PPUSH
53349: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53353: LD_VAR 0 1
53357: PUSH
53358: LD_INT 1
53360: ARRAY
53361: PPUSH
53362: LD_VAR 0 1
53366: PUSH
53367: LD_INT 2
53369: ARRAY
53370: PPUSH
53371: CALL_OW 429
// end ; end ;
53375: LD_VAR 0 1
53379: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53380: LD_EXP 63
53384: PUSH
53385: LD_EXP 85
53389: AND
53390: IFFALSE 53402
53392: GO 53394
53394: DISABLE
// YouLost (  ) ;
53395: LD_STRING 
53397: PPUSH
53398: CALL_OW 104
53402: END
// every 0 0$1 trigger StreamModeActive and sFog do
53403: LD_EXP 63
53407: PUSH
53408: LD_EXP 84
53412: AND
53413: IFFALSE 53427
53415: GO 53417
53417: DISABLE
// FogOff ( your_side ) ;
53418: LD_OWVAR 2
53422: PPUSH
53423: CALL_OW 344
53427: END
// every 0 0$1 trigger StreamModeActive and sSun do
53428: LD_EXP 63
53432: PUSH
53433: LD_EXP 86
53437: AND
53438: IFFALSE 53466
53440: GO 53442
53442: DISABLE
// begin solar_recharge_percent := 0 ;
53443: LD_ADDR_OWVAR 79
53447: PUSH
53448: LD_INT 0
53450: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53451: LD_INT 10500
53453: PPUSH
53454: CALL_OW 67
// solar_recharge_percent := 100 ;
53458: LD_ADDR_OWVAR 79
53462: PUSH
53463: LD_INT 100
53465: ST_TO_ADDR
// end ;
53466: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53467: LD_EXP 63
53471: PUSH
53472: LD_EXP 87
53476: AND
53477: IFFALSE 53716
53479: GO 53481
53481: DISABLE
53482: LD_INT 0
53484: PPUSH
53485: PPUSH
53486: PPUSH
// begin tmp := [ ] ;
53487: LD_ADDR_VAR 0 3
53491: PUSH
53492: EMPTY
53493: ST_TO_ADDR
// for i := 1 to 6 do
53494: LD_ADDR_VAR 0 1
53498: PUSH
53499: DOUBLE
53500: LD_INT 1
53502: DEC
53503: ST_TO_ADDR
53504: LD_INT 6
53506: PUSH
53507: FOR_TO
53508: IFFALSE 53613
// begin uc_nation := nation_nature ;
53510: LD_ADDR_OWVAR 21
53514: PUSH
53515: LD_INT 0
53517: ST_TO_ADDR
// uc_side := 0 ;
53518: LD_ADDR_OWVAR 20
53522: PUSH
53523: LD_INT 0
53525: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53526: LD_ADDR_OWVAR 29
53530: PUSH
53531: LD_INT 12
53533: PUSH
53534: LD_INT 12
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: ST_TO_ADDR
// hc_agressivity := 20 ;
53541: LD_ADDR_OWVAR 35
53545: PUSH
53546: LD_INT 20
53548: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53549: LD_ADDR_OWVAR 28
53553: PUSH
53554: LD_INT 17
53556: ST_TO_ADDR
// hc_gallery :=  ;
53557: LD_ADDR_OWVAR 33
53561: PUSH
53562: LD_STRING 
53564: ST_TO_ADDR
// hc_name :=  ;
53565: LD_ADDR_OWVAR 26
53569: PUSH
53570: LD_STRING 
53572: ST_TO_ADDR
// un := CreateHuman ;
53573: LD_ADDR_VAR 0 2
53577: PUSH
53578: CALL_OW 44
53582: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53583: LD_VAR 0 2
53587: PPUSH
53588: LD_INT 1
53590: PPUSH
53591: CALL_OW 51
// tmp := tmp ^ un ;
53595: LD_ADDR_VAR 0 3
53599: PUSH
53600: LD_VAR 0 3
53604: PUSH
53605: LD_VAR 0 2
53609: ADD
53610: ST_TO_ADDR
// end ;
53611: GO 53507
53613: POP
53614: POP
// repeat wait ( 0 0$1 ) ;
53615: LD_INT 35
53617: PPUSH
53618: CALL_OW 67
// for un in tmp do
53622: LD_ADDR_VAR 0 2
53626: PUSH
53627: LD_VAR 0 3
53631: PUSH
53632: FOR_IN
53633: IFFALSE 53707
// begin if IsDead ( un ) then
53635: LD_VAR 0 2
53639: PPUSH
53640: CALL_OW 301
53644: IFFALSE 53664
// begin tmp := tmp diff un ;
53646: LD_ADDR_VAR 0 3
53650: PUSH
53651: LD_VAR 0 3
53655: PUSH
53656: LD_VAR 0 2
53660: DIFF
53661: ST_TO_ADDR
// continue ;
53662: GO 53632
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53664: LD_VAR 0 2
53668: PPUSH
53669: LD_INT 3
53671: PUSH
53672: LD_INT 22
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PPUSH
53686: CALL_OW 69
53690: PPUSH
53691: LD_VAR 0 2
53695: PPUSH
53696: CALL_OW 74
53700: PPUSH
53701: CALL_OW 115
// end ;
53705: GO 53632
53707: POP
53708: POP
// until not tmp ;
53709: LD_VAR 0 3
53713: NOT
53714: IFFALSE 53615
// end ;
53716: PPOPN 3
53718: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53719: LD_EXP 63
53723: PUSH
53724: LD_EXP 88
53728: AND
53729: IFFALSE 53783
53731: GO 53733
53733: DISABLE
// begin ToLua ( displayTroll(); ) ;
53734: LD_STRING displayTroll();
53736: PPUSH
53737: CALL_OW 559
// wait ( 3 3$00 ) ;
53741: LD_INT 6300
53743: PPUSH
53744: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53748: LD_STRING hideTroll();
53750: PPUSH
53751: CALL_OW 559
// wait ( 1 1$00 ) ;
53755: LD_INT 2100
53757: PPUSH
53758: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53762: LD_STRING displayTroll();
53764: PPUSH
53765: CALL_OW 559
// wait ( 1 1$00 ) ;
53769: LD_INT 2100
53771: PPUSH
53772: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53776: LD_STRING hideTroll();
53778: PPUSH
53779: CALL_OW 559
// end ;
53783: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53784: LD_EXP 63
53788: PUSH
53789: LD_EXP 89
53793: AND
53794: IFFALSE 53857
53796: GO 53798
53798: DISABLE
53799: LD_INT 0
53801: PPUSH
// begin p := 0 ;
53802: LD_ADDR_VAR 0 1
53806: PUSH
53807: LD_INT 0
53809: ST_TO_ADDR
// repeat game_speed := 1 ;
53810: LD_ADDR_OWVAR 65
53814: PUSH
53815: LD_INT 1
53817: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53818: LD_INT 35
53820: PPUSH
53821: CALL_OW 67
// p := p + 1 ;
53825: LD_ADDR_VAR 0 1
53829: PUSH
53830: LD_VAR 0 1
53834: PUSH
53835: LD_INT 1
53837: PLUS
53838: ST_TO_ADDR
// until p >= 60 ;
53839: LD_VAR 0 1
53843: PUSH
53844: LD_INT 60
53846: GREATEREQUAL
53847: IFFALSE 53810
// game_speed := 4 ;
53849: LD_ADDR_OWVAR 65
53853: PUSH
53854: LD_INT 4
53856: ST_TO_ADDR
// end ;
53857: PPOPN 1
53859: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53860: LD_EXP 63
53864: PUSH
53865: LD_EXP 90
53869: AND
53870: IFFALSE 54016
53872: GO 53874
53874: DISABLE
53875: LD_INT 0
53877: PPUSH
53878: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53879: LD_ADDR_VAR 0 1
53883: PUSH
53884: LD_INT 22
53886: PUSH
53887: LD_OWVAR 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: LD_INT 30
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 30
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: LIST
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PPUSH
53928: CALL_OW 69
53932: ST_TO_ADDR
// if not depot then
53933: LD_VAR 0 1
53937: NOT
53938: IFFALSE 53942
// exit ;
53940: GO 54016
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53942: LD_ADDR_VAR 0 2
53946: PUSH
53947: LD_VAR 0 1
53951: PUSH
53952: LD_INT 1
53954: PPUSH
53955: LD_VAR 0 1
53959: PPUSH
53960: CALL_OW 12
53964: ARRAY
53965: PPUSH
53966: CALL_OW 274
53970: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53971: LD_VAR 0 2
53975: PPUSH
53976: LD_INT 1
53978: PPUSH
53979: LD_INT 0
53981: PPUSH
53982: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
53986: LD_VAR 0 2
53990: PPUSH
53991: LD_INT 2
53993: PPUSH
53994: LD_INT 0
53996: PPUSH
53997: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
54001: LD_VAR 0 2
54005: PPUSH
54006: LD_INT 3
54008: PPUSH
54009: LD_INT 0
54011: PPUSH
54012: CALL_OW 277
// end ;
54016: PPOPN 2
54018: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
54019: LD_EXP 63
54023: PUSH
54024: LD_EXP 91
54028: AND
54029: IFFALSE 54126
54031: GO 54033
54033: DISABLE
54034: LD_INT 0
54036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54037: LD_ADDR_VAR 0 1
54041: PUSH
54042: LD_INT 22
54044: PUSH
54045: LD_OWVAR 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 21
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: LD_INT 23
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: LIST
54085: PPUSH
54086: CALL_OW 69
54090: ST_TO_ADDR
// if not tmp then
54091: LD_VAR 0 1
54095: NOT
54096: IFFALSE 54100
// exit ;
54098: GO 54126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
54100: LD_VAR 0 1
54104: PUSH
54105: LD_INT 1
54107: PPUSH
54108: LD_VAR 0 1
54112: PPUSH
54113: CALL_OW 12
54117: ARRAY
54118: PPUSH
54119: LD_INT 200
54121: PPUSH
54122: CALL_OW 234
// end ;
54126: PPOPN 1
54128: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
54129: LD_EXP 63
54133: PUSH
54134: LD_EXP 92
54138: AND
54139: IFFALSE 54218
54141: GO 54143
54143: DISABLE
54144: LD_INT 0
54146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
54147: LD_ADDR_VAR 0 1
54151: PUSH
54152: LD_INT 22
54154: PUSH
54155: LD_OWVAR 2
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 21
54166: PUSH
54167: LD_INT 2
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PPUSH
54178: CALL_OW 69
54182: ST_TO_ADDR
// if not tmp then
54183: LD_VAR 0 1
54187: NOT
54188: IFFALSE 54192
// exit ;
54190: GO 54218
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54192: LD_VAR 0 1
54196: PUSH
54197: LD_INT 1
54199: PPUSH
54200: LD_VAR 0 1
54204: PPUSH
54205: CALL_OW 12
54209: ARRAY
54210: PPUSH
54211: LD_INT 60
54213: PPUSH
54214: CALL_OW 234
// end ;
54218: PPOPN 1
54220: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54221: LD_EXP 63
54225: PUSH
54226: LD_EXP 93
54230: AND
54231: IFFALSE 54330
54233: GO 54235
54235: DISABLE
54236: LD_INT 0
54238: PPUSH
54239: PPUSH
// begin enable ;
54240: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54241: LD_ADDR_VAR 0 1
54245: PUSH
54246: LD_INT 22
54248: PUSH
54249: LD_OWVAR 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 61
54260: PUSH
54261: EMPTY
54262: LIST
54263: PUSH
54264: LD_INT 33
54266: PUSH
54267: LD_INT 2
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: LIST
54278: PPUSH
54279: CALL_OW 69
54283: ST_TO_ADDR
// if not tmp then
54284: LD_VAR 0 1
54288: NOT
54289: IFFALSE 54293
// exit ;
54291: GO 54330
// for i in tmp do
54293: LD_ADDR_VAR 0 2
54297: PUSH
54298: LD_VAR 0 1
54302: PUSH
54303: FOR_IN
54304: IFFALSE 54328
// if IsControledBy ( i ) then
54306: LD_VAR 0 2
54310: PPUSH
54311: CALL_OW 312
54315: IFFALSE 54326
// ComUnlink ( i ) ;
54317: LD_VAR 0 2
54321: PPUSH
54322: CALL_OW 136
54326: GO 54303
54328: POP
54329: POP
// end ;
54330: PPOPN 2
54332: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54333: LD_EXP 63
54337: PUSH
54338: LD_EXP 94
54342: AND
54343: IFFALSE 54483
54345: GO 54347
54347: DISABLE
54348: LD_INT 0
54350: PPUSH
54351: PPUSH
// begin ToLua ( displayPowell(); ) ;
54352: LD_STRING displayPowell();
54354: PPUSH
54355: CALL_OW 559
// uc_side := 0 ;
54359: LD_ADDR_OWVAR 20
54363: PUSH
54364: LD_INT 0
54366: ST_TO_ADDR
// uc_nation := 2 ;
54367: LD_ADDR_OWVAR 21
54371: PUSH
54372: LD_INT 2
54374: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54375: LD_ADDR_OWVAR 37
54379: PUSH
54380: LD_INT 14
54382: ST_TO_ADDR
// vc_engine := engine_siberite ;
54383: LD_ADDR_OWVAR 39
54387: PUSH
54388: LD_INT 3
54390: ST_TO_ADDR
// vc_control := control_apeman ;
54391: LD_ADDR_OWVAR 38
54395: PUSH
54396: LD_INT 5
54398: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54399: LD_ADDR_OWVAR 40
54403: PUSH
54404: LD_INT 29
54406: ST_TO_ADDR
// un := CreateVehicle ;
54407: LD_ADDR_VAR 0 2
54411: PUSH
54412: CALL_OW 45
54416: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54417: LD_VAR 0 2
54421: PPUSH
54422: LD_INT 1
54424: PPUSH
54425: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54429: LD_INT 35
54431: PPUSH
54432: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54436: LD_VAR 0 2
54440: PPUSH
54441: LD_INT 22
54443: PUSH
54444: LD_OWVAR 2
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PPUSH
54453: CALL_OW 69
54457: PPUSH
54458: LD_VAR 0 2
54462: PPUSH
54463: CALL_OW 74
54467: PPUSH
54468: CALL_OW 115
// until IsDead ( un ) ;
54472: LD_VAR 0 2
54476: PPUSH
54477: CALL_OW 301
54481: IFFALSE 54429
// end ;
54483: PPOPN 2
54485: END
// every 0 0$1 trigger StreamModeActive and sStu do
54486: LD_EXP 63
54490: PUSH
54491: LD_EXP 102
54495: AND
54496: IFFALSE 54512
54498: GO 54500
54500: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54501: LD_STRING displayStucuk();
54503: PPUSH
54504: CALL_OW 559
// ResetFog ;
54508: CALL_OW 335
// end ;
54512: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54513: LD_EXP 63
54517: PUSH
54518: LD_EXP 95
54522: AND
54523: IFFALSE 54664
54525: GO 54527
54527: DISABLE
54528: LD_INT 0
54530: PPUSH
54531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54532: LD_ADDR_VAR 0 2
54536: PUSH
54537: LD_INT 22
54539: PUSH
54540: LD_OWVAR 2
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 21
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PPUSH
54563: CALL_OW 69
54567: ST_TO_ADDR
// if not tmp then
54568: LD_VAR 0 2
54572: NOT
54573: IFFALSE 54577
// exit ;
54575: GO 54664
// un := tmp [ rand ( 1 , tmp ) ] ;
54577: LD_ADDR_VAR 0 1
54581: PUSH
54582: LD_VAR 0 2
54586: PUSH
54587: LD_INT 1
54589: PPUSH
54590: LD_VAR 0 2
54594: PPUSH
54595: CALL_OW 12
54599: ARRAY
54600: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54601: LD_VAR 0 1
54605: PPUSH
54606: LD_INT 0
54608: PPUSH
54609: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54613: LD_VAR 0 1
54617: PPUSH
54618: LD_OWVAR 3
54622: PUSH
54623: LD_VAR 0 1
54627: DIFF
54628: PPUSH
54629: LD_VAR 0 1
54633: PPUSH
54634: CALL_OW 74
54638: PPUSH
54639: CALL_OW 115
// wait ( 0 0$20 ) ;
54643: LD_INT 700
54645: PPUSH
54646: CALL_OW 67
// SetSide ( un , your_side ) ;
54650: LD_VAR 0 1
54654: PPUSH
54655: LD_OWVAR 2
54659: PPUSH
54660: CALL_OW 235
// end ;
54664: PPOPN 2
54666: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54667: LD_EXP 63
54671: PUSH
54672: LD_EXP 96
54676: AND
54677: IFFALSE 54783
54679: GO 54681
54681: DISABLE
54682: LD_INT 0
54684: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54685: LD_ADDR_VAR 0 1
54689: PUSH
54690: LD_INT 22
54692: PUSH
54693: LD_OWVAR 2
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: LD_INT 30
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 30
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: LIST
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PPUSH
54734: CALL_OW 69
54738: ST_TO_ADDR
// if not depot then
54739: LD_VAR 0 1
54743: NOT
54744: IFFALSE 54748
// exit ;
54746: GO 54783
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54748: LD_VAR 0 1
54752: PUSH
54753: LD_INT 1
54755: ARRAY
54756: PPUSH
54757: CALL_OW 250
54761: PPUSH
54762: LD_VAR 0 1
54766: PUSH
54767: LD_INT 1
54769: ARRAY
54770: PPUSH
54771: CALL_OW 251
54775: PPUSH
54776: LD_INT 70
54778: PPUSH
54779: CALL_OW 495
// end ;
54783: PPOPN 1
54785: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54786: LD_EXP 63
54790: PUSH
54791: LD_EXP 97
54795: AND
54796: IFFALSE 55007
54798: GO 54800
54800: DISABLE
54801: LD_INT 0
54803: PPUSH
54804: PPUSH
54805: PPUSH
54806: PPUSH
54807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54808: LD_ADDR_VAR 0 5
54812: PUSH
54813: LD_INT 22
54815: PUSH
54816: LD_OWVAR 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 21
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PPUSH
54839: CALL_OW 69
54843: ST_TO_ADDR
// if not tmp then
54844: LD_VAR 0 5
54848: NOT
54849: IFFALSE 54853
// exit ;
54851: GO 55007
// for i in tmp do
54853: LD_ADDR_VAR 0 1
54857: PUSH
54858: LD_VAR 0 5
54862: PUSH
54863: FOR_IN
54864: IFFALSE 55005
// begin d := rand ( 0 , 5 ) ;
54866: LD_ADDR_VAR 0 4
54870: PUSH
54871: LD_INT 0
54873: PPUSH
54874: LD_INT 5
54876: PPUSH
54877: CALL_OW 12
54881: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54882: LD_ADDR_VAR 0 2
54886: PUSH
54887: LD_VAR 0 1
54891: PPUSH
54892: CALL_OW 250
54896: PPUSH
54897: LD_VAR 0 4
54901: PPUSH
54902: LD_INT 3
54904: PPUSH
54905: LD_INT 12
54907: PPUSH
54908: CALL_OW 12
54912: PPUSH
54913: CALL_OW 272
54917: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54918: LD_ADDR_VAR 0 3
54922: PUSH
54923: LD_VAR 0 1
54927: PPUSH
54928: CALL_OW 251
54932: PPUSH
54933: LD_VAR 0 4
54937: PPUSH
54938: LD_INT 3
54940: PPUSH
54941: LD_INT 12
54943: PPUSH
54944: CALL_OW 12
54948: PPUSH
54949: CALL_OW 273
54953: ST_TO_ADDR
// if ValidHex ( x , y ) then
54954: LD_VAR 0 2
54958: PPUSH
54959: LD_VAR 0 3
54963: PPUSH
54964: CALL_OW 488
54968: IFFALSE 55003
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54970: LD_VAR 0 1
54974: PPUSH
54975: LD_VAR 0 2
54979: PPUSH
54980: LD_VAR 0 3
54984: PPUSH
54985: LD_INT 3
54987: PPUSH
54988: LD_INT 6
54990: PPUSH
54991: CALL_OW 12
54995: PPUSH
54996: LD_INT 1
54998: PPUSH
54999: CALL_OW 483
// end ;
55003: GO 54863
55005: POP
55006: POP
// end ;
55007: PPOPN 5
55009: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
55010: LD_EXP 63
55014: PUSH
55015: LD_EXP 98
55019: AND
55020: IFFALSE 55114
55022: GO 55024
55024: DISABLE
55025: LD_INT 0
55027: PPUSH
55028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
55029: LD_ADDR_VAR 0 2
55033: PUSH
55034: LD_INT 22
55036: PUSH
55037: LD_OWVAR 2
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 32
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 21
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: LIST
55070: PPUSH
55071: CALL_OW 69
55075: ST_TO_ADDR
// if not tmp then
55076: LD_VAR 0 2
55080: NOT
55081: IFFALSE 55085
// exit ;
55083: GO 55114
// for i in tmp do
55085: LD_ADDR_VAR 0 1
55089: PUSH
55090: LD_VAR 0 2
55094: PUSH
55095: FOR_IN
55096: IFFALSE 55112
// SetFuel ( i , 0 ) ;
55098: LD_VAR 0 1
55102: PPUSH
55103: LD_INT 0
55105: PPUSH
55106: CALL_OW 240
55110: GO 55095
55112: POP
55113: POP
// end ;
55114: PPOPN 2
55116: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
55117: LD_EXP 63
55121: PUSH
55122: LD_EXP 99
55126: AND
55127: IFFALSE 55193
55129: GO 55131
55131: DISABLE
55132: LD_INT 0
55134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55135: LD_ADDR_VAR 0 1
55139: PUSH
55140: LD_INT 22
55142: PUSH
55143: LD_OWVAR 2
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 30
55154: PUSH
55155: LD_INT 29
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PPUSH
55166: CALL_OW 69
55170: ST_TO_ADDR
// if not tmp then
55171: LD_VAR 0 1
55175: NOT
55176: IFFALSE 55180
// exit ;
55178: GO 55193
// DestroyUnit ( tmp [ 1 ] ) ;
55180: LD_VAR 0 1
55184: PUSH
55185: LD_INT 1
55187: ARRAY
55188: PPUSH
55189: CALL_OW 65
// end ;
55193: PPOPN 1
55195: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55196: LD_EXP 63
55200: PUSH
55201: LD_EXP 101
55205: AND
55206: IFFALSE 55335
55208: GO 55210
55210: DISABLE
55211: LD_INT 0
55213: PPUSH
// begin uc_side := 0 ;
55214: LD_ADDR_OWVAR 20
55218: PUSH
55219: LD_INT 0
55221: ST_TO_ADDR
// uc_nation := nation_arabian ;
55222: LD_ADDR_OWVAR 21
55226: PUSH
55227: LD_INT 2
55229: ST_TO_ADDR
// hc_gallery :=  ;
55230: LD_ADDR_OWVAR 33
55234: PUSH
55235: LD_STRING 
55237: ST_TO_ADDR
// hc_name :=  ;
55238: LD_ADDR_OWVAR 26
55242: PUSH
55243: LD_STRING 
55245: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55246: LD_INT 1
55248: PPUSH
55249: LD_INT 11
55251: PPUSH
55252: LD_INT 10
55254: PPUSH
55255: CALL_OW 380
// un := CreateHuman ;
55259: LD_ADDR_VAR 0 1
55263: PUSH
55264: CALL_OW 44
55268: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55269: LD_VAR 0 1
55273: PPUSH
55274: LD_INT 1
55276: PPUSH
55277: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55281: LD_INT 35
55283: PPUSH
55284: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55288: LD_VAR 0 1
55292: PPUSH
55293: LD_INT 22
55295: PUSH
55296: LD_OWVAR 2
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PPUSH
55305: CALL_OW 69
55309: PPUSH
55310: LD_VAR 0 1
55314: PPUSH
55315: CALL_OW 74
55319: PPUSH
55320: CALL_OW 115
// until IsDead ( un ) ;
55324: LD_VAR 0 1
55328: PPUSH
55329: CALL_OW 301
55333: IFFALSE 55281
// end ;
55335: PPOPN 1
55337: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55338: LD_EXP 63
55342: PUSH
55343: LD_EXP 103
55347: AND
55348: IFFALSE 55360
55350: GO 55352
55352: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55353: LD_STRING earthquake(getX(game), 0, 32)
55355: PPUSH
55356: CALL_OW 559
55360: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55361: LD_EXP 63
55365: PUSH
55366: LD_EXP 104
55370: AND
55371: IFFALSE 55462
55373: GO 55375
55375: DISABLE
55376: LD_INT 0
55378: PPUSH
// begin enable ;
55379: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55380: LD_ADDR_VAR 0 1
55384: PUSH
55385: LD_INT 22
55387: PUSH
55388: LD_OWVAR 2
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 21
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 33
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: PPUSH
55422: CALL_OW 69
55426: ST_TO_ADDR
// if not tmp then
55427: LD_VAR 0 1
55431: NOT
55432: IFFALSE 55436
// exit ;
55434: GO 55462
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55436: LD_VAR 0 1
55440: PUSH
55441: LD_INT 1
55443: PPUSH
55444: LD_VAR 0 1
55448: PPUSH
55449: CALL_OW 12
55453: ARRAY
55454: PPUSH
55455: LD_INT 1
55457: PPUSH
55458: CALL_OW 234
// end ;
55462: PPOPN 1
55464: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55465: LD_EXP 63
55469: PUSH
55470: LD_EXP 105
55474: AND
55475: IFFALSE 55616
55477: GO 55479
55479: DISABLE
55480: LD_INT 0
55482: PPUSH
55483: PPUSH
55484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55485: LD_ADDR_VAR 0 3
55489: PUSH
55490: LD_INT 22
55492: PUSH
55493: LD_OWVAR 2
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 25
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PPUSH
55516: CALL_OW 69
55520: ST_TO_ADDR
// if not tmp then
55521: LD_VAR 0 3
55525: NOT
55526: IFFALSE 55530
// exit ;
55528: GO 55616
// un := tmp [ rand ( 1 , tmp ) ] ;
55530: LD_ADDR_VAR 0 2
55534: PUSH
55535: LD_VAR 0 3
55539: PUSH
55540: LD_INT 1
55542: PPUSH
55543: LD_VAR 0 3
55547: PPUSH
55548: CALL_OW 12
55552: ARRAY
55553: ST_TO_ADDR
// if Crawls ( un ) then
55554: LD_VAR 0 2
55558: PPUSH
55559: CALL_OW 318
55563: IFFALSE 55574
// ComWalk ( un ) ;
55565: LD_VAR 0 2
55569: PPUSH
55570: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55574: LD_VAR 0 2
55578: PPUSH
55579: LD_INT 9
55581: PPUSH
55582: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55586: LD_INT 28
55588: PPUSH
55589: LD_OWVAR 2
55593: PPUSH
55594: LD_INT 2
55596: PPUSH
55597: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55601: LD_INT 29
55603: PPUSH
55604: LD_OWVAR 2
55608: PPUSH
55609: LD_INT 2
55611: PPUSH
55612: CALL_OW 322
// end ;
55616: PPOPN 3
55618: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55619: LD_EXP 63
55623: PUSH
55624: LD_EXP 106
55628: AND
55629: IFFALSE 55740
55631: GO 55633
55633: DISABLE
55634: LD_INT 0
55636: PPUSH
55637: PPUSH
55638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55639: LD_ADDR_VAR 0 3
55643: PUSH
55644: LD_INT 22
55646: PUSH
55647: LD_OWVAR 2
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 25
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PPUSH
55670: CALL_OW 69
55674: ST_TO_ADDR
// if not tmp then
55675: LD_VAR 0 3
55679: NOT
55680: IFFALSE 55684
// exit ;
55682: GO 55740
// un := tmp [ rand ( 1 , tmp ) ] ;
55684: LD_ADDR_VAR 0 2
55688: PUSH
55689: LD_VAR 0 3
55693: PUSH
55694: LD_INT 1
55696: PPUSH
55697: LD_VAR 0 3
55701: PPUSH
55702: CALL_OW 12
55706: ARRAY
55707: ST_TO_ADDR
// if Crawls ( un ) then
55708: LD_VAR 0 2
55712: PPUSH
55713: CALL_OW 318
55717: IFFALSE 55728
// ComWalk ( un ) ;
55719: LD_VAR 0 2
55723: PPUSH
55724: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55728: LD_VAR 0 2
55732: PPUSH
55733: LD_INT 8
55735: PPUSH
55736: CALL_OW 336
// end ;
55740: PPOPN 3
55742: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55743: LD_EXP 63
55747: PUSH
55748: LD_EXP 107
55752: AND
55753: IFFALSE 55897
55755: GO 55757
55757: DISABLE
55758: LD_INT 0
55760: PPUSH
55761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55762: LD_ADDR_VAR 0 2
55766: PUSH
55767: LD_INT 22
55769: PUSH
55770: LD_OWVAR 2
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 21
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: LD_INT 34
55794: PUSH
55795: LD_INT 12
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 34
55804: PUSH
55805: LD_INT 51
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 34
55814: PUSH
55815: LD_INT 32
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: LIST
55832: PPUSH
55833: CALL_OW 69
55837: ST_TO_ADDR
// if not tmp then
55838: LD_VAR 0 2
55842: NOT
55843: IFFALSE 55847
// exit ;
55845: GO 55897
// for i in tmp do
55847: LD_ADDR_VAR 0 1
55851: PUSH
55852: LD_VAR 0 2
55856: PUSH
55857: FOR_IN
55858: IFFALSE 55895
// if GetCargo ( i , mat_artifact ) = 0 then
55860: LD_VAR 0 1
55864: PPUSH
55865: LD_INT 4
55867: PPUSH
55868: CALL_OW 289
55872: PUSH
55873: LD_INT 0
55875: EQUAL
55876: IFFALSE 55893
// SetCargo ( i , mat_siberit , 100 ) ;
55878: LD_VAR 0 1
55882: PPUSH
55883: LD_INT 3
55885: PPUSH
55886: LD_INT 100
55888: PPUSH
55889: CALL_OW 290
55893: GO 55857
55895: POP
55896: POP
// end ;
55897: PPOPN 2
55899: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55900: LD_EXP 63
55904: PUSH
55905: LD_EXP 108
55909: AND
55910: IFFALSE 56093
55912: GO 55914
55914: DISABLE
55915: LD_INT 0
55917: PPUSH
55918: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55919: LD_ADDR_VAR 0 2
55923: PUSH
55924: LD_INT 22
55926: PUSH
55927: LD_OWVAR 2
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PPUSH
55936: CALL_OW 69
55940: ST_TO_ADDR
// if not tmp then
55941: LD_VAR 0 2
55945: NOT
55946: IFFALSE 55950
// exit ;
55948: GO 56093
// for i := 1 to 2 do
55950: LD_ADDR_VAR 0 1
55954: PUSH
55955: DOUBLE
55956: LD_INT 1
55958: DEC
55959: ST_TO_ADDR
55960: LD_INT 2
55962: PUSH
55963: FOR_TO
55964: IFFALSE 56091
// begin uc_side := your_side ;
55966: LD_ADDR_OWVAR 20
55970: PUSH
55971: LD_OWVAR 2
55975: ST_TO_ADDR
// uc_nation := nation_american ;
55976: LD_ADDR_OWVAR 21
55980: PUSH
55981: LD_INT 1
55983: ST_TO_ADDR
// vc_chassis := us_morphling ;
55984: LD_ADDR_OWVAR 37
55988: PUSH
55989: LD_INT 5
55991: ST_TO_ADDR
// vc_engine := engine_siberite ;
55992: LD_ADDR_OWVAR 39
55996: PUSH
55997: LD_INT 3
55999: ST_TO_ADDR
// vc_control := control_computer ;
56000: LD_ADDR_OWVAR 38
56004: PUSH
56005: LD_INT 3
56007: ST_TO_ADDR
// vc_weapon := us_double_laser ;
56008: LD_ADDR_OWVAR 40
56012: PUSH
56013: LD_INT 10
56015: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
56016: LD_VAR 0 2
56020: PUSH
56021: LD_INT 1
56023: ARRAY
56024: PPUSH
56025: CALL_OW 310
56029: NOT
56030: IFFALSE 56077
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
56032: CALL_OW 45
56036: PPUSH
56037: LD_VAR 0 2
56041: PUSH
56042: LD_INT 1
56044: ARRAY
56045: PPUSH
56046: CALL_OW 250
56050: PPUSH
56051: LD_VAR 0 2
56055: PUSH
56056: LD_INT 1
56058: ARRAY
56059: PPUSH
56060: CALL_OW 251
56064: PPUSH
56065: LD_INT 12
56067: PPUSH
56068: LD_INT 1
56070: PPUSH
56071: CALL_OW 50
56075: GO 56089
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
56077: CALL_OW 45
56081: PPUSH
56082: LD_INT 1
56084: PPUSH
56085: CALL_OW 51
// end ;
56089: GO 55963
56091: POP
56092: POP
// end ;
56093: PPOPN 2
56095: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
56096: LD_EXP 63
56100: PUSH
56101: LD_EXP 109
56105: AND
56106: IFFALSE 56328
56108: GO 56110
56110: DISABLE
56111: LD_INT 0
56113: PPUSH
56114: PPUSH
56115: PPUSH
56116: PPUSH
56117: PPUSH
56118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56119: LD_ADDR_VAR 0 6
56123: PUSH
56124: LD_INT 22
56126: PUSH
56127: LD_OWVAR 2
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 21
56138: PUSH
56139: LD_INT 1
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 3
56148: PUSH
56149: LD_INT 23
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: LIST
56167: PPUSH
56168: CALL_OW 69
56172: ST_TO_ADDR
// if not tmp then
56173: LD_VAR 0 6
56177: NOT
56178: IFFALSE 56182
// exit ;
56180: GO 56328
// s1 := rand ( 1 , 4 ) ;
56182: LD_ADDR_VAR 0 2
56186: PUSH
56187: LD_INT 1
56189: PPUSH
56190: LD_INT 4
56192: PPUSH
56193: CALL_OW 12
56197: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56198: LD_ADDR_VAR 0 4
56202: PUSH
56203: LD_VAR 0 6
56207: PUSH
56208: LD_INT 1
56210: ARRAY
56211: PPUSH
56212: LD_VAR 0 2
56216: PPUSH
56217: CALL_OW 259
56221: ST_TO_ADDR
// if s1 = 1 then
56222: LD_VAR 0 2
56226: PUSH
56227: LD_INT 1
56229: EQUAL
56230: IFFALSE 56250
// s2 := rand ( 2 , 4 ) else
56232: LD_ADDR_VAR 0 3
56236: PUSH
56237: LD_INT 2
56239: PPUSH
56240: LD_INT 4
56242: PPUSH
56243: CALL_OW 12
56247: ST_TO_ADDR
56248: GO 56258
// s2 := 1 ;
56250: LD_ADDR_VAR 0 3
56254: PUSH
56255: LD_INT 1
56257: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56258: LD_ADDR_VAR 0 5
56262: PUSH
56263: LD_VAR 0 6
56267: PUSH
56268: LD_INT 1
56270: ARRAY
56271: PPUSH
56272: LD_VAR 0 3
56276: PPUSH
56277: CALL_OW 259
56281: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56282: LD_VAR 0 6
56286: PUSH
56287: LD_INT 1
56289: ARRAY
56290: PPUSH
56291: LD_VAR 0 2
56295: PPUSH
56296: LD_VAR 0 5
56300: PPUSH
56301: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56305: LD_VAR 0 6
56309: PUSH
56310: LD_INT 1
56312: ARRAY
56313: PPUSH
56314: LD_VAR 0 3
56318: PPUSH
56319: LD_VAR 0 4
56323: PPUSH
56324: CALL_OW 237
// end ;
56328: PPOPN 6
56330: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56331: LD_EXP 63
56335: PUSH
56336: LD_EXP 110
56340: AND
56341: IFFALSE 56420
56343: GO 56345
56345: DISABLE
56346: LD_INT 0
56348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56349: LD_ADDR_VAR 0 1
56353: PUSH
56354: LD_INT 22
56356: PUSH
56357: LD_OWVAR 2
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 30
56368: PUSH
56369: LD_INT 3
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PPUSH
56380: CALL_OW 69
56384: ST_TO_ADDR
// if not tmp then
56385: LD_VAR 0 1
56389: NOT
56390: IFFALSE 56394
// exit ;
56392: GO 56420
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56394: LD_VAR 0 1
56398: PUSH
56399: LD_INT 1
56401: PPUSH
56402: LD_VAR 0 1
56406: PPUSH
56407: CALL_OW 12
56411: ARRAY
56412: PPUSH
56413: LD_INT 1
56415: PPUSH
56416: CALL_OW 234
// end ;
56420: PPOPN 1
56422: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56423: LD_EXP 63
56427: PUSH
56428: LD_EXP 111
56432: AND
56433: IFFALSE 56545
56435: GO 56437
56437: DISABLE
56438: LD_INT 0
56440: PPUSH
56441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56442: LD_ADDR_VAR 0 2
56446: PUSH
56447: LD_INT 22
56449: PUSH
56450: LD_OWVAR 2
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: PUSH
56462: LD_INT 30
56464: PUSH
56465: LD_INT 27
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 30
56474: PUSH
56475: LD_INT 26
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 30
56484: PUSH
56485: LD_INT 28
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PPUSH
56502: CALL_OW 69
56506: ST_TO_ADDR
// if not tmp then
56507: LD_VAR 0 2
56511: NOT
56512: IFFALSE 56516
// exit ;
56514: GO 56545
// for i in tmp do
56516: LD_ADDR_VAR 0 1
56520: PUSH
56521: LD_VAR 0 2
56525: PUSH
56526: FOR_IN
56527: IFFALSE 56543
// SetLives ( i , 1 ) ;
56529: LD_VAR 0 1
56533: PPUSH
56534: LD_INT 1
56536: PPUSH
56537: CALL_OW 234
56541: GO 56526
56543: POP
56544: POP
// end ;
56545: PPOPN 2
56547: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56548: LD_EXP 63
56552: PUSH
56553: LD_EXP 112
56557: AND
56558: IFFALSE 56845
56560: GO 56562
56562: DISABLE
56563: LD_INT 0
56565: PPUSH
56566: PPUSH
56567: PPUSH
// begin i := rand ( 1 , 7 ) ;
56568: LD_ADDR_VAR 0 1
56572: PUSH
56573: LD_INT 1
56575: PPUSH
56576: LD_INT 7
56578: PPUSH
56579: CALL_OW 12
56583: ST_TO_ADDR
// case i of 1 :
56584: LD_VAR 0 1
56588: PUSH
56589: LD_INT 1
56591: DOUBLE
56592: EQUAL
56593: IFTRUE 56597
56595: GO 56607
56597: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56598: LD_STRING earthquake(getX(game), 0, 32)
56600: PPUSH
56601: CALL_OW 559
56605: GO 56845
56607: LD_INT 2
56609: DOUBLE
56610: EQUAL
56611: IFTRUE 56615
56613: GO 56629
56615: POP
// begin ToLua ( displayStucuk(); ) ;
56616: LD_STRING displayStucuk();
56618: PPUSH
56619: CALL_OW 559
// ResetFog ;
56623: CALL_OW 335
// end ; 3 :
56627: GO 56845
56629: LD_INT 3
56631: DOUBLE
56632: EQUAL
56633: IFTRUE 56637
56635: GO 56741
56637: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56638: LD_ADDR_VAR 0 2
56642: PUSH
56643: LD_INT 22
56645: PUSH
56646: LD_OWVAR 2
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 25
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PPUSH
56669: CALL_OW 69
56673: ST_TO_ADDR
// if not tmp then
56674: LD_VAR 0 2
56678: NOT
56679: IFFALSE 56683
// exit ;
56681: GO 56845
// un := tmp [ rand ( 1 , tmp ) ] ;
56683: LD_ADDR_VAR 0 3
56687: PUSH
56688: LD_VAR 0 2
56692: PUSH
56693: LD_INT 1
56695: PPUSH
56696: LD_VAR 0 2
56700: PPUSH
56701: CALL_OW 12
56705: ARRAY
56706: ST_TO_ADDR
// if Crawls ( un ) then
56707: LD_VAR 0 3
56711: PPUSH
56712: CALL_OW 318
56716: IFFALSE 56727
// ComWalk ( un ) ;
56718: LD_VAR 0 3
56722: PPUSH
56723: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56727: LD_VAR 0 3
56731: PPUSH
56732: LD_INT 8
56734: PPUSH
56735: CALL_OW 336
// end ; 4 :
56739: GO 56845
56741: LD_INT 4
56743: DOUBLE
56744: EQUAL
56745: IFTRUE 56749
56747: GO 56823
56749: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56750: LD_ADDR_VAR 0 2
56754: PUSH
56755: LD_INT 22
56757: PUSH
56758: LD_OWVAR 2
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 30
56769: PUSH
56770: LD_INT 29
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PPUSH
56781: CALL_OW 69
56785: ST_TO_ADDR
// if not tmp then
56786: LD_VAR 0 2
56790: NOT
56791: IFFALSE 56795
// exit ;
56793: GO 56845
// CenterNowOnUnits ( tmp [ 1 ] ) ;
56795: LD_VAR 0 2
56799: PUSH
56800: LD_INT 1
56802: ARRAY
56803: PPUSH
56804: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
56808: LD_VAR 0 2
56812: PUSH
56813: LD_INT 1
56815: ARRAY
56816: PPUSH
56817: CALL_OW 65
// end ; 5 .. 7 :
56821: GO 56845
56823: LD_INT 5
56825: DOUBLE
56826: GREATEREQUAL
56827: IFFALSE 56835
56829: LD_INT 7
56831: DOUBLE
56832: LESSEQUAL
56833: IFTRUE 56837
56835: GO 56844
56837: POP
// StreamSibBomb ; end ;
56838: CALL 53082 0 0
56842: GO 56845
56844: POP
// end ;
56845: PPOPN 3
56847: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56848: LD_EXP 63
56852: PUSH
56853: LD_EXP 113
56857: AND
56858: IFFALSE 57014
56860: GO 56862
56862: DISABLE
56863: LD_INT 0
56865: PPUSH
56866: PPUSH
56867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56868: LD_ADDR_VAR 0 2
56872: PUSH
56873: LD_INT 81
56875: PUSH
56876: LD_OWVAR 2
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 21
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 21
56900: PUSH
56901: LD_INT 2
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: LIST
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PPUSH
56917: CALL_OW 69
56921: ST_TO_ADDR
// if not tmp then
56922: LD_VAR 0 2
56926: NOT
56927: IFFALSE 56931
// exit ;
56929: GO 57014
// p := 0 ;
56931: LD_ADDR_VAR 0 3
56935: PUSH
56936: LD_INT 0
56938: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56939: LD_INT 35
56941: PPUSH
56942: CALL_OW 67
// p := p + 1 ;
56946: LD_ADDR_VAR 0 3
56950: PUSH
56951: LD_VAR 0 3
56955: PUSH
56956: LD_INT 1
56958: PLUS
56959: ST_TO_ADDR
// for i in tmp do
56960: LD_ADDR_VAR 0 1
56964: PUSH
56965: LD_VAR 0 2
56969: PUSH
56970: FOR_IN
56971: IFFALSE 57002
// if GetLives ( i ) < 1000 then
56973: LD_VAR 0 1
56977: PPUSH
56978: CALL_OW 256
56982: PUSH
56983: LD_INT 1000
56985: LESS
56986: IFFALSE 57000
// SetLives ( i , 1000 ) ;
56988: LD_VAR 0 1
56992: PPUSH
56993: LD_INT 1000
56995: PPUSH
56996: CALL_OW 234
57000: GO 56970
57002: POP
57003: POP
// until p > 20 ;
57004: LD_VAR 0 3
57008: PUSH
57009: LD_INT 20
57011: GREATER
57012: IFFALSE 56939
// end ;
57014: PPOPN 3
57016: END
// every 0 0$1 trigger StreamModeActive and sTime do
57017: LD_EXP 63
57021: PUSH
57022: LD_EXP 114
57026: AND
57027: IFFALSE 57062
57029: GO 57031
57031: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
57032: LD_INT 28
57034: PPUSH
57035: LD_OWVAR 2
57039: PPUSH
57040: LD_INT 2
57042: PPUSH
57043: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
57047: LD_INT 30
57049: PPUSH
57050: LD_OWVAR 2
57054: PPUSH
57055: LD_INT 2
57057: PPUSH
57058: CALL_OW 322
// end ;
57062: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
57063: LD_EXP 63
57067: PUSH
57068: LD_EXP 115
57072: AND
57073: IFFALSE 57194
57075: GO 57077
57077: DISABLE
57078: LD_INT 0
57080: PPUSH
57081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57082: LD_ADDR_VAR 0 2
57086: PUSH
57087: LD_INT 22
57089: PUSH
57090: LD_OWVAR 2
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 21
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 3
57111: PUSH
57112: LD_INT 23
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: LIST
57130: PPUSH
57131: CALL_OW 69
57135: ST_TO_ADDR
// if not tmp then
57136: LD_VAR 0 2
57140: NOT
57141: IFFALSE 57145
// exit ;
57143: GO 57194
// for i in tmp do
57145: LD_ADDR_VAR 0 1
57149: PUSH
57150: LD_VAR 0 2
57154: PUSH
57155: FOR_IN
57156: IFFALSE 57192
// begin if Crawls ( i ) then
57158: LD_VAR 0 1
57162: PPUSH
57163: CALL_OW 318
57167: IFFALSE 57178
// ComWalk ( i ) ;
57169: LD_VAR 0 1
57173: PPUSH
57174: CALL_OW 138
// SetClass ( i , 2 ) ;
57178: LD_VAR 0 1
57182: PPUSH
57183: LD_INT 2
57185: PPUSH
57186: CALL_OW 336
// end ;
57190: GO 57155
57192: POP
57193: POP
// end ;
57194: PPOPN 2
57196: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57197: LD_EXP 63
57201: PUSH
57202: LD_EXP 116
57206: AND
57207: IFFALSE 57495
57209: GO 57211
57211: DISABLE
57212: LD_INT 0
57214: PPUSH
57215: PPUSH
57216: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57217: LD_OWVAR 2
57221: PPUSH
57222: LD_INT 9
57224: PPUSH
57225: LD_INT 1
57227: PPUSH
57228: LD_INT 1
57230: PPUSH
57231: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57235: LD_INT 9
57237: PPUSH
57238: LD_OWVAR 2
57242: PPUSH
57243: CALL_OW 343
// uc_side := 9 ;
57247: LD_ADDR_OWVAR 20
57251: PUSH
57252: LD_INT 9
57254: ST_TO_ADDR
// uc_nation := 2 ;
57255: LD_ADDR_OWVAR 21
57259: PUSH
57260: LD_INT 2
57262: ST_TO_ADDR
// hc_name := Dark Warrior ;
57263: LD_ADDR_OWVAR 26
57267: PUSH
57268: LD_STRING Dark Warrior
57270: ST_TO_ADDR
// hc_gallery :=  ;
57271: LD_ADDR_OWVAR 33
57275: PUSH
57276: LD_STRING 
57278: ST_TO_ADDR
// hc_noskilllimit := true ;
57279: LD_ADDR_OWVAR 76
57283: PUSH
57284: LD_INT 1
57286: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57287: LD_ADDR_OWVAR 31
57291: PUSH
57292: LD_INT 30
57294: PUSH
57295: LD_INT 30
57297: PUSH
57298: LD_INT 30
57300: PUSH
57301: LD_INT 30
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: ST_TO_ADDR
// un := CreateHuman ;
57310: LD_ADDR_VAR 0 3
57314: PUSH
57315: CALL_OW 44
57319: ST_TO_ADDR
// hc_noskilllimit := false ;
57320: LD_ADDR_OWVAR 76
57324: PUSH
57325: LD_INT 0
57327: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57328: LD_VAR 0 3
57332: PPUSH
57333: LD_INT 1
57335: PPUSH
57336: CALL_OW 51
// ToLua ( playRanger() ) ;
57340: LD_STRING playRanger()
57342: PPUSH
57343: CALL_OW 559
// p := 0 ;
57347: LD_ADDR_VAR 0 2
57351: PUSH
57352: LD_INT 0
57354: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57355: LD_INT 35
57357: PPUSH
57358: CALL_OW 67
// p := p + 1 ;
57362: LD_ADDR_VAR 0 2
57366: PUSH
57367: LD_VAR 0 2
57371: PUSH
57372: LD_INT 1
57374: PLUS
57375: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57376: LD_VAR 0 3
57380: PPUSH
57381: CALL_OW 256
57385: PUSH
57386: LD_INT 1000
57388: LESS
57389: IFFALSE 57403
// SetLives ( un , 1000 ) ;
57391: LD_VAR 0 3
57395: PPUSH
57396: LD_INT 1000
57398: PPUSH
57399: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57403: LD_VAR 0 3
57407: PPUSH
57408: LD_INT 81
57410: PUSH
57411: LD_OWVAR 2
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 91
57422: PUSH
57423: LD_VAR 0 3
57427: PUSH
57428: LD_INT 30
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PPUSH
57440: CALL_OW 69
57444: PPUSH
57445: LD_VAR 0 3
57449: PPUSH
57450: CALL_OW 74
57454: PPUSH
57455: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
57459: LD_VAR 0 2
57463: PUSH
57464: LD_INT 80
57466: GREATER
57467: PUSH
57468: LD_VAR 0 3
57472: PPUSH
57473: CALL_OW 301
57477: OR
57478: IFFALSE 57355
// if un then
57480: LD_VAR 0 3
57484: IFFALSE 57495
// RemoveUnit ( un ) ;
57486: LD_VAR 0 3
57490: PPUSH
57491: CALL_OW 64
// end ;
57495: PPOPN 3
57497: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
57498: LD_EXP 117
57502: IFFALSE 57618
57504: GO 57506
57506: DISABLE
57507: LD_INT 0
57509: PPUSH
57510: PPUSH
57511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57512: LD_ADDR_VAR 0 2
57516: PUSH
57517: LD_INT 81
57519: PUSH
57520: LD_OWVAR 2
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 21
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PPUSH
57543: CALL_OW 69
57547: ST_TO_ADDR
// ToLua ( playComputer() ) ;
57548: LD_STRING playComputer()
57550: PPUSH
57551: CALL_OW 559
// if not tmp then
57555: LD_VAR 0 2
57559: NOT
57560: IFFALSE 57564
// exit ;
57562: GO 57618
// for i in tmp do
57564: LD_ADDR_VAR 0 1
57568: PUSH
57569: LD_VAR 0 2
57573: PUSH
57574: FOR_IN
57575: IFFALSE 57616
// for j := 1 to 4 do
57577: LD_ADDR_VAR 0 3
57581: PUSH
57582: DOUBLE
57583: LD_INT 1
57585: DEC
57586: ST_TO_ADDR
57587: LD_INT 4
57589: PUSH
57590: FOR_TO
57591: IFFALSE 57612
// SetSkill ( i , j , 10 ) ;
57593: LD_VAR 0 1
57597: PPUSH
57598: LD_VAR 0 3
57602: PPUSH
57603: LD_INT 10
57605: PPUSH
57606: CALL_OW 237
57610: GO 57590
57612: POP
57613: POP
57614: GO 57574
57616: POP
57617: POP
// end ;
57618: PPOPN 3
57620: END
// every 0 0$1 trigger s30 do var i , tmp ;
57621: LD_EXP 118
57625: IFFALSE 57694
57627: GO 57629
57629: DISABLE
57630: LD_INT 0
57632: PPUSH
57633: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57634: LD_ADDR_VAR 0 2
57638: PUSH
57639: LD_INT 22
57641: PUSH
57642: LD_OWVAR 2
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PPUSH
57651: CALL_OW 69
57655: ST_TO_ADDR
// if not tmp then
57656: LD_VAR 0 2
57660: NOT
57661: IFFALSE 57665
// exit ;
57663: GO 57694
// for i in tmp do
57665: LD_ADDR_VAR 0 1
57669: PUSH
57670: LD_VAR 0 2
57674: PUSH
57675: FOR_IN
57676: IFFALSE 57692
// SetLives ( i , 300 ) ;
57678: LD_VAR 0 1
57682: PPUSH
57683: LD_INT 300
57685: PPUSH
57686: CALL_OW 234
57690: GO 57675
57692: POP
57693: POP
// end ;
57694: PPOPN 2
57696: END
// every 0 0$1 trigger s60 do var i , tmp ;
57697: LD_EXP 119
57701: IFFALSE 57770
57703: GO 57705
57705: DISABLE
57706: LD_INT 0
57708: PPUSH
57709: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57710: LD_ADDR_VAR 0 2
57714: PUSH
57715: LD_INT 22
57717: PUSH
57718: LD_OWVAR 2
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PPUSH
57727: CALL_OW 69
57731: ST_TO_ADDR
// if not tmp then
57732: LD_VAR 0 2
57736: NOT
57737: IFFALSE 57741
// exit ;
57739: GO 57770
// for i in tmp do
57741: LD_ADDR_VAR 0 1
57745: PUSH
57746: LD_VAR 0 2
57750: PUSH
57751: FOR_IN
57752: IFFALSE 57768
// SetLives ( i , 600 ) ;
57754: LD_VAR 0 1
57758: PPUSH
57759: LD_INT 600
57761: PPUSH
57762: CALL_OW 234
57766: GO 57751
57768: POP
57769: POP
// end ;
57770: PPOPN 2
57772: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57773: LD_INT 0
57775: PPUSH
// case cmd of 301 :
57776: LD_VAR 0 1
57780: PUSH
57781: LD_INT 301
57783: DOUBLE
57784: EQUAL
57785: IFTRUE 57789
57787: GO 57821
57789: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57790: LD_VAR 0 6
57794: PPUSH
57795: LD_VAR 0 7
57799: PPUSH
57800: LD_VAR 0 8
57804: PPUSH
57805: LD_VAR 0 4
57809: PPUSH
57810: LD_VAR 0 5
57814: PPUSH
57815: CALL 59022 0 5
57819: GO 57942
57821: LD_INT 302
57823: DOUBLE
57824: EQUAL
57825: IFTRUE 57829
57827: GO 57866
57829: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57830: LD_VAR 0 6
57834: PPUSH
57835: LD_VAR 0 7
57839: PPUSH
57840: LD_VAR 0 8
57844: PPUSH
57845: LD_VAR 0 9
57849: PPUSH
57850: LD_VAR 0 4
57854: PPUSH
57855: LD_VAR 0 5
57859: PPUSH
57860: CALL 59113 0 6
57864: GO 57942
57866: LD_INT 303
57868: DOUBLE
57869: EQUAL
57870: IFTRUE 57874
57872: GO 57911
57874: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57875: LD_VAR 0 6
57879: PPUSH
57880: LD_VAR 0 7
57884: PPUSH
57885: LD_VAR 0 8
57889: PPUSH
57890: LD_VAR 0 9
57894: PPUSH
57895: LD_VAR 0 4
57899: PPUSH
57900: LD_VAR 0 5
57904: PPUSH
57905: CALL 57947 0 6
57909: GO 57942
57911: LD_INT 304
57913: DOUBLE
57914: EQUAL
57915: IFTRUE 57919
57917: GO 57941
57919: POP
// hHackTeleport ( unit , x , y ) ; end ;
57920: LD_VAR 0 2
57924: PPUSH
57925: LD_VAR 0 4
57929: PPUSH
57930: LD_VAR 0 5
57934: PPUSH
57935: CALL 59706 0 3
57939: GO 57942
57941: POP
// end ;
57942: LD_VAR 0 12
57946: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57947: LD_INT 0
57949: PPUSH
57950: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57951: LD_VAR 0 1
57955: PUSH
57956: LD_INT 1
57958: LESS
57959: PUSH
57960: LD_VAR 0 1
57964: PUSH
57965: LD_INT 3
57967: GREATER
57968: OR
57969: PUSH
57970: LD_VAR 0 5
57974: PPUSH
57975: LD_VAR 0 6
57979: PPUSH
57980: CALL_OW 428
57984: OR
57985: IFFALSE 57989
// exit ;
57987: GO 58709
// uc_side := your_side ;
57989: LD_ADDR_OWVAR 20
57993: PUSH
57994: LD_OWVAR 2
57998: ST_TO_ADDR
// uc_nation := nation ;
57999: LD_ADDR_OWVAR 21
58003: PUSH
58004: LD_VAR 0 1
58008: ST_TO_ADDR
// bc_level = 1 ;
58009: LD_ADDR_OWVAR 43
58013: PUSH
58014: LD_INT 1
58016: ST_TO_ADDR
// case btype of 1 :
58017: LD_VAR 0 2
58021: PUSH
58022: LD_INT 1
58024: DOUBLE
58025: EQUAL
58026: IFTRUE 58030
58028: GO 58041
58030: POP
// bc_type := b_depot ; 2 :
58031: LD_ADDR_OWVAR 42
58035: PUSH
58036: LD_INT 0
58038: ST_TO_ADDR
58039: GO 58653
58041: LD_INT 2
58043: DOUBLE
58044: EQUAL
58045: IFTRUE 58049
58047: GO 58060
58049: POP
// bc_type := b_warehouse ; 3 :
58050: LD_ADDR_OWVAR 42
58054: PUSH
58055: LD_INT 1
58057: ST_TO_ADDR
58058: GO 58653
58060: LD_INT 3
58062: DOUBLE
58063: EQUAL
58064: IFTRUE 58068
58066: GO 58079
58068: POP
// bc_type := b_lab ; 4 .. 9 :
58069: LD_ADDR_OWVAR 42
58073: PUSH
58074: LD_INT 6
58076: ST_TO_ADDR
58077: GO 58653
58079: LD_INT 4
58081: DOUBLE
58082: GREATEREQUAL
58083: IFFALSE 58091
58085: LD_INT 9
58087: DOUBLE
58088: LESSEQUAL
58089: IFTRUE 58093
58091: GO 58145
58093: POP
// begin bc_type := b_lab_half ;
58094: LD_ADDR_OWVAR 42
58098: PUSH
58099: LD_INT 7
58101: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
58102: LD_ADDR_OWVAR 44
58106: PUSH
58107: LD_INT 10
58109: PUSH
58110: LD_INT 11
58112: PUSH
58113: LD_INT 12
58115: PUSH
58116: LD_INT 15
58118: PUSH
58119: LD_INT 14
58121: PUSH
58122: LD_INT 13
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: PUSH
58133: LD_VAR 0 2
58137: PUSH
58138: LD_INT 3
58140: MINUS
58141: ARRAY
58142: ST_TO_ADDR
// end ; 10 .. 13 :
58143: GO 58653
58145: LD_INT 10
58147: DOUBLE
58148: GREATEREQUAL
58149: IFFALSE 58157
58151: LD_INT 13
58153: DOUBLE
58154: LESSEQUAL
58155: IFTRUE 58159
58157: GO 58236
58159: POP
// begin bc_type := b_lab_full ;
58160: LD_ADDR_OWVAR 42
58164: PUSH
58165: LD_INT 8
58167: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
58168: LD_ADDR_OWVAR 44
58172: PUSH
58173: LD_INT 10
58175: PUSH
58176: LD_INT 12
58178: PUSH
58179: LD_INT 14
58181: PUSH
58182: LD_INT 13
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: PUSH
58191: LD_VAR 0 2
58195: PUSH
58196: LD_INT 9
58198: MINUS
58199: ARRAY
58200: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
58201: LD_ADDR_OWVAR 45
58205: PUSH
58206: LD_INT 11
58208: PUSH
58209: LD_INT 15
58211: PUSH
58212: LD_INT 12
58214: PUSH
58215: LD_INT 15
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: PUSH
58224: LD_VAR 0 2
58228: PUSH
58229: LD_INT 9
58231: MINUS
58232: ARRAY
58233: ST_TO_ADDR
// end ; 14 :
58234: GO 58653
58236: LD_INT 14
58238: DOUBLE
58239: EQUAL
58240: IFTRUE 58244
58242: GO 58255
58244: POP
// bc_type := b_workshop ; 15 :
58245: LD_ADDR_OWVAR 42
58249: PUSH
58250: LD_INT 2
58252: ST_TO_ADDR
58253: GO 58653
58255: LD_INT 15
58257: DOUBLE
58258: EQUAL
58259: IFTRUE 58263
58261: GO 58274
58263: POP
// bc_type := b_factory ; 16 :
58264: LD_ADDR_OWVAR 42
58268: PUSH
58269: LD_INT 3
58271: ST_TO_ADDR
58272: GO 58653
58274: LD_INT 16
58276: DOUBLE
58277: EQUAL
58278: IFTRUE 58282
58280: GO 58293
58282: POP
// bc_type := b_ext_gun ; 17 :
58283: LD_ADDR_OWVAR 42
58287: PUSH
58288: LD_INT 17
58290: ST_TO_ADDR
58291: GO 58653
58293: LD_INT 17
58295: DOUBLE
58296: EQUAL
58297: IFTRUE 58301
58299: GO 58329
58301: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
58302: LD_ADDR_OWVAR 42
58306: PUSH
58307: LD_INT 19
58309: PUSH
58310: LD_INT 23
58312: PUSH
58313: LD_INT 19
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: LIST
58320: PUSH
58321: LD_VAR 0 1
58325: ARRAY
58326: ST_TO_ADDR
58327: GO 58653
58329: LD_INT 18
58331: DOUBLE
58332: EQUAL
58333: IFTRUE 58337
58335: GO 58348
58337: POP
// bc_type := b_ext_radar ; 19 :
58338: LD_ADDR_OWVAR 42
58342: PUSH
58343: LD_INT 20
58345: ST_TO_ADDR
58346: GO 58653
58348: LD_INT 19
58350: DOUBLE
58351: EQUAL
58352: IFTRUE 58356
58354: GO 58367
58356: POP
// bc_type := b_ext_radio ; 20 :
58357: LD_ADDR_OWVAR 42
58361: PUSH
58362: LD_INT 22
58364: ST_TO_ADDR
58365: GO 58653
58367: LD_INT 20
58369: DOUBLE
58370: EQUAL
58371: IFTRUE 58375
58373: GO 58386
58375: POP
// bc_type := b_ext_siberium ; 21 :
58376: LD_ADDR_OWVAR 42
58380: PUSH
58381: LD_INT 21
58383: ST_TO_ADDR
58384: GO 58653
58386: LD_INT 21
58388: DOUBLE
58389: EQUAL
58390: IFTRUE 58394
58392: GO 58405
58394: POP
// bc_type := b_ext_computer ; 22 :
58395: LD_ADDR_OWVAR 42
58399: PUSH
58400: LD_INT 24
58402: ST_TO_ADDR
58403: GO 58653
58405: LD_INT 22
58407: DOUBLE
58408: EQUAL
58409: IFTRUE 58413
58411: GO 58424
58413: POP
// bc_type := b_ext_track ; 23 :
58414: LD_ADDR_OWVAR 42
58418: PUSH
58419: LD_INT 16
58421: ST_TO_ADDR
58422: GO 58653
58424: LD_INT 23
58426: DOUBLE
58427: EQUAL
58428: IFTRUE 58432
58430: GO 58443
58432: POP
// bc_type := b_ext_laser ; 24 :
58433: LD_ADDR_OWVAR 42
58437: PUSH
58438: LD_INT 25
58440: ST_TO_ADDR
58441: GO 58653
58443: LD_INT 24
58445: DOUBLE
58446: EQUAL
58447: IFTRUE 58451
58449: GO 58462
58451: POP
// bc_type := b_control_tower ; 25 :
58452: LD_ADDR_OWVAR 42
58456: PUSH
58457: LD_INT 36
58459: ST_TO_ADDR
58460: GO 58653
58462: LD_INT 25
58464: DOUBLE
58465: EQUAL
58466: IFTRUE 58470
58468: GO 58481
58470: POP
// bc_type := b_breastwork ; 26 :
58471: LD_ADDR_OWVAR 42
58475: PUSH
58476: LD_INT 31
58478: ST_TO_ADDR
58479: GO 58653
58481: LD_INT 26
58483: DOUBLE
58484: EQUAL
58485: IFTRUE 58489
58487: GO 58500
58489: POP
// bc_type := b_bunker ; 27 :
58490: LD_ADDR_OWVAR 42
58494: PUSH
58495: LD_INT 32
58497: ST_TO_ADDR
58498: GO 58653
58500: LD_INT 27
58502: DOUBLE
58503: EQUAL
58504: IFTRUE 58508
58506: GO 58519
58508: POP
// bc_type := b_turret ; 28 :
58509: LD_ADDR_OWVAR 42
58513: PUSH
58514: LD_INT 33
58516: ST_TO_ADDR
58517: GO 58653
58519: LD_INT 28
58521: DOUBLE
58522: EQUAL
58523: IFTRUE 58527
58525: GO 58538
58527: POP
// bc_type := b_armoury ; 29 :
58528: LD_ADDR_OWVAR 42
58532: PUSH
58533: LD_INT 4
58535: ST_TO_ADDR
58536: GO 58653
58538: LD_INT 29
58540: DOUBLE
58541: EQUAL
58542: IFTRUE 58546
58544: GO 58557
58546: POP
// bc_type := b_barracks ; 30 :
58547: LD_ADDR_OWVAR 42
58551: PUSH
58552: LD_INT 5
58554: ST_TO_ADDR
58555: GO 58653
58557: LD_INT 30
58559: DOUBLE
58560: EQUAL
58561: IFTRUE 58565
58563: GO 58576
58565: POP
// bc_type := b_solar_power ; 31 :
58566: LD_ADDR_OWVAR 42
58570: PUSH
58571: LD_INT 27
58573: ST_TO_ADDR
58574: GO 58653
58576: LD_INT 31
58578: DOUBLE
58579: EQUAL
58580: IFTRUE 58584
58582: GO 58595
58584: POP
// bc_type := b_oil_power ; 32 :
58585: LD_ADDR_OWVAR 42
58589: PUSH
58590: LD_INT 26
58592: ST_TO_ADDR
58593: GO 58653
58595: LD_INT 32
58597: DOUBLE
58598: EQUAL
58599: IFTRUE 58603
58601: GO 58614
58603: POP
// bc_type := b_siberite_power ; 33 :
58604: LD_ADDR_OWVAR 42
58608: PUSH
58609: LD_INT 28
58611: ST_TO_ADDR
58612: GO 58653
58614: LD_INT 33
58616: DOUBLE
58617: EQUAL
58618: IFTRUE 58622
58620: GO 58633
58622: POP
// bc_type := b_oil_mine ; 34 :
58623: LD_ADDR_OWVAR 42
58627: PUSH
58628: LD_INT 29
58630: ST_TO_ADDR
58631: GO 58653
58633: LD_INT 34
58635: DOUBLE
58636: EQUAL
58637: IFTRUE 58641
58639: GO 58652
58641: POP
// bc_type := b_siberite_mine ; end ;
58642: LD_ADDR_OWVAR 42
58646: PUSH
58647: LD_INT 30
58649: ST_TO_ADDR
58650: GO 58653
58652: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58653: LD_ADDR_VAR 0 8
58657: PUSH
58658: LD_VAR 0 5
58662: PPUSH
58663: LD_VAR 0 6
58667: PPUSH
58668: LD_VAR 0 3
58672: PPUSH
58673: CALL_OW 47
58677: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58678: LD_OWVAR 42
58682: PUSH
58683: LD_INT 32
58685: PUSH
58686: LD_INT 33
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: IN
58693: IFFALSE 58709
// PlaceWeaponTurret ( b , weapon ) ;
58695: LD_VAR 0 8
58699: PPUSH
58700: LD_VAR 0 4
58704: PPUSH
58705: CALL_OW 431
// end ;
58709: LD_VAR 0 7
58713: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58714: LD_INT 0
58716: PPUSH
58717: PPUSH
58718: PPUSH
58719: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58720: LD_ADDR_VAR 0 4
58724: PUSH
58725: LD_INT 22
58727: PUSH
58728: LD_OWVAR 2
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: LD_INT 30
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 30
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: LIST
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PPUSH
58769: CALL_OW 69
58773: ST_TO_ADDR
// if not tmp then
58774: LD_VAR 0 4
58778: NOT
58779: IFFALSE 58783
// exit ;
58781: GO 58842
// for i in tmp do
58783: LD_ADDR_VAR 0 2
58787: PUSH
58788: LD_VAR 0 4
58792: PUSH
58793: FOR_IN
58794: IFFALSE 58840
// for j = 1 to 3 do
58796: LD_ADDR_VAR 0 3
58800: PUSH
58801: DOUBLE
58802: LD_INT 1
58804: DEC
58805: ST_TO_ADDR
58806: LD_INT 3
58808: PUSH
58809: FOR_TO
58810: IFFALSE 58836
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58812: LD_VAR 0 2
58816: PPUSH
58817: CALL_OW 274
58821: PPUSH
58822: LD_VAR 0 3
58826: PPUSH
58827: LD_INT 99999
58829: PPUSH
58830: CALL_OW 277
58834: GO 58809
58836: POP
58837: POP
58838: GO 58793
58840: POP
58841: POP
// end ;
58842: LD_VAR 0 1
58846: RET
// export function hHackSetLevel10 ; var i , j ; begin
58847: LD_INT 0
58849: PPUSH
58850: PPUSH
58851: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58852: LD_ADDR_VAR 0 2
58856: PUSH
58857: LD_INT 21
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PPUSH
58867: CALL_OW 69
58871: PUSH
58872: FOR_IN
58873: IFFALSE 58925
// if IsSelected ( i ) then
58875: LD_VAR 0 2
58879: PPUSH
58880: CALL_OW 306
58884: IFFALSE 58923
// begin for j := 1 to 4 do
58886: LD_ADDR_VAR 0 3
58890: PUSH
58891: DOUBLE
58892: LD_INT 1
58894: DEC
58895: ST_TO_ADDR
58896: LD_INT 4
58898: PUSH
58899: FOR_TO
58900: IFFALSE 58921
// SetSkill ( i , j , 10 ) ;
58902: LD_VAR 0 2
58906: PPUSH
58907: LD_VAR 0 3
58911: PPUSH
58912: LD_INT 10
58914: PPUSH
58915: CALL_OW 237
58919: GO 58899
58921: POP
58922: POP
// end ;
58923: GO 58872
58925: POP
58926: POP
// end ;
58927: LD_VAR 0 1
58931: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58932: LD_INT 0
58934: PPUSH
58935: PPUSH
58936: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58937: LD_ADDR_VAR 0 2
58941: PUSH
58942: LD_INT 22
58944: PUSH
58945: LD_OWVAR 2
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 21
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PPUSH
58968: CALL_OW 69
58972: PUSH
58973: FOR_IN
58974: IFFALSE 59015
// begin for j := 1 to 4 do
58976: LD_ADDR_VAR 0 3
58980: PUSH
58981: DOUBLE
58982: LD_INT 1
58984: DEC
58985: ST_TO_ADDR
58986: LD_INT 4
58988: PUSH
58989: FOR_TO
58990: IFFALSE 59011
// SetSkill ( i , j , 10 ) ;
58992: LD_VAR 0 2
58996: PPUSH
58997: LD_VAR 0 3
59001: PPUSH
59002: LD_INT 10
59004: PPUSH
59005: CALL_OW 237
59009: GO 58989
59011: POP
59012: POP
// end ;
59013: GO 58973
59015: POP
59016: POP
// end ;
59017: LD_VAR 0 1
59021: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
59022: LD_INT 0
59024: PPUSH
// uc_side := your_side ;
59025: LD_ADDR_OWVAR 20
59029: PUSH
59030: LD_OWVAR 2
59034: ST_TO_ADDR
// uc_nation := nation ;
59035: LD_ADDR_OWVAR 21
59039: PUSH
59040: LD_VAR 0 1
59044: ST_TO_ADDR
// InitHc ;
59045: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
59049: LD_INT 0
59051: PPUSH
59052: LD_VAR 0 2
59056: PPUSH
59057: LD_VAR 0 3
59061: PPUSH
59062: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
59066: LD_VAR 0 4
59070: PPUSH
59071: LD_VAR 0 5
59075: PPUSH
59076: CALL_OW 428
59080: PUSH
59081: LD_INT 0
59083: EQUAL
59084: IFFALSE 59108
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
59086: CALL_OW 44
59090: PPUSH
59091: LD_VAR 0 4
59095: PPUSH
59096: LD_VAR 0 5
59100: PPUSH
59101: LD_INT 1
59103: PPUSH
59104: CALL_OW 48
// end ;
59108: LD_VAR 0 6
59112: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
59113: LD_INT 0
59115: PPUSH
59116: PPUSH
// uc_side := your_side ;
59117: LD_ADDR_OWVAR 20
59121: PUSH
59122: LD_OWVAR 2
59126: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
59127: LD_VAR 0 1
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: LD_INT 3
59140: PUSH
59141: LD_INT 4
59143: PUSH
59144: LD_INT 5
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: IN
59154: IFFALSE 59166
// uc_nation := nation_american else
59156: LD_ADDR_OWVAR 21
59160: PUSH
59161: LD_INT 1
59163: ST_TO_ADDR
59164: GO 59209
// if chassis in [ 11 , 12 , 13 , 14 ] then
59166: LD_VAR 0 1
59170: PUSH
59171: LD_INT 11
59173: PUSH
59174: LD_INT 12
59176: PUSH
59177: LD_INT 13
59179: PUSH
59180: LD_INT 14
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: IN
59189: IFFALSE 59201
// uc_nation := nation_arabian else
59191: LD_ADDR_OWVAR 21
59195: PUSH
59196: LD_INT 2
59198: ST_TO_ADDR
59199: GO 59209
// uc_nation := nation_russian ;
59201: LD_ADDR_OWVAR 21
59205: PUSH
59206: LD_INT 3
59208: ST_TO_ADDR
// vc_chassis := chassis ;
59209: LD_ADDR_OWVAR 37
59213: PUSH
59214: LD_VAR 0 1
59218: ST_TO_ADDR
// vc_engine := engine ;
59219: LD_ADDR_OWVAR 39
59223: PUSH
59224: LD_VAR 0 2
59228: ST_TO_ADDR
// vc_control := control ;
59229: LD_ADDR_OWVAR 38
59233: PUSH
59234: LD_VAR 0 3
59238: ST_TO_ADDR
// vc_weapon := weapon ;
59239: LD_ADDR_OWVAR 40
59243: PUSH
59244: LD_VAR 0 4
59248: ST_TO_ADDR
// un := CreateVehicle ;
59249: LD_ADDR_VAR 0 8
59253: PUSH
59254: CALL_OW 45
59258: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
59259: LD_VAR 0 8
59263: PPUSH
59264: LD_INT 0
59266: PPUSH
59267: LD_INT 5
59269: PPUSH
59270: CALL_OW 12
59274: PPUSH
59275: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
59279: LD_VAR 0 8
59283: PPUSH
59284: LD_VAR 0 5
59288: PPUSH
59289: LD_VAR 0 6
59293: PPUSH
59294: LD_INT 1
59296: PPUSH
59297: CALL_OW 48
// end ;
59301: LD_VAR 0 7
59305: RET
// export hInvincible ; every 1 do
59306: GO 59308
59308: DISABLE
// hInvincible := [ ] ;
59309: LD_ADDR_EXP 120
59313: PUSH
59314: EMPTY
59315: ST_TO_ADDR
59316: END
// every 10 do var i ;
59317: GO 59319
59319: DISABLE
59320: LD_INT 0
59322: PPUSH
// begin enable ;
59323: ENABLE
// if not hInvincible then
59324: LD_EXP 120
59328: NOT
59329: IFFALSE 59333
// exit ;
59331: GO 59377
// for i in hInvincible do
59333: LD_ADDR_VAR 0 1
59337: PUSH
59338: LD_EXP 120
59342: PUSH
59343: FOR_IN
59344: IFFALSE 59375
// if GetLives ( i ) < 1000 then
59346: LD_VAR 0 1
59350: PPUSH
59351: CALL_OW 256
59355: PUSH
59356: LD_INT 1000
59358: LESS
59359: IFFALSE 59373
// SetLives ( i , 1000 ) ;
59361: LD_VAR 0 1
59365: PPUSH
59366: LD_INT 1000
59368: PPUSH
59369: CALL_OW 234
59373: GO 59343
59375: POP
59376: POP
// end ;
59377: PPOPN 1
59379: END
// export function hHackInvincible ; var i ; begin
59380: LD_INT 0
59382: PPUSH
59383: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
59384: LD_ADDR_VAR 0 2
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: LD_INT 21
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 21
59404: PUSH
59405: LD_INT 2
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: LIST
59416: PPUSH
59417: CALL_OW 69
59421: PUSH
59422: FOR_IN
59423: IFFALSE 59484
// if IsSelected ( i ) then
59425: LD_VAR 0 2
59429: PPUSH
59430: CALL_OW 306
59434: IFFALSE 59482
// begin if i in hInvincible then
59436: LD_VAR 0 2
59440: PUSH
59441: LD_EXP 120
59445: IN
59446: IFFALSE 59466
// hInvincible := hInvincible diff i else
59448: LD_ADDR_EXP 120
59452: PUSH
59453: LD_EXP 120
59457: PUSH
59458: LD_VAR 0 2
59462: DIFF
59463: ST_TO_ADDR
59464: GO 59482
// hInvincible := hInvincible union i ;
59466: LD_ADDR_EXP 120
59470: PUSH
59471: LD_EXP 120
59475: PUSH
59476: LD_VAR 0 2
59480: UNION
59481: ST_TO_ADDR
// end ;
59482: GO 59422
59484: POP
59485: POP
// end ;
59486: LD_VAR 0 1
59490: RET
// export function hHackInvisible ; var i , j ; begin
59491: LD_INT 0
59493: PPUSH
59494: PPUSH
59495: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59496: LD_ADDR_VAR 0 2
59500: PUSH
59501: LD_INT 21
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PPUSH
59511: CALL_OW 69
59515: PUSH
59516: FOR_IN
59517: IFFALSE 59541
// if IsSelected ( i ) then
59519: LD_VAR 0 2
59523: PPUSH
59524: CALL_OW 306
59528: IFFALSE 59539
// ComForceInvisible ( i ) ;
59530: LD_VAR 0 2
59534: PPUSH
59535: CALL_OW 496
59539: GO 59516
59541: POP
59542: POP
// end ;
59543: LD_VAR 0 1
59547: RET
// export function hHackChangeYourSide ; begin
59548: LD_INT 0
59550: PPUSH
// if your_side = 8 then
59551: LD_OWVAR 2
59555: PUSH
59556: LD_INT 8
59558: EQUAL
59559: IFFALSE 59571
// your_side := 0 else
59561: LD_ADDR_OWVAR 2
59565: PUSH
59566: LD_INT 0
59568: ST_TO_ADDR
59569: GO 59585
// your_side := your_side + 1 ;
59571: LD_ADDR_OWVAR 2
59575: PUSH
59576: LD_OWVAR 2
59580: PUSH
59581: LD_INT 1
59583: PLUS
59584: ST_TO_ADDR
// end ;
59585: LD_VAR 0 1
59589: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59590: LD_INT 0
59592: PPUSH
59593: PPUSH
59594: PPUSH
// for i in all_units do
59595: LD_ADDR_VAR 0 2
59599: PUSH
59600: LD_OWVAR 3
59604: PUSH
59605: FOR_IN
59606: IFFALSE 59684
// if IsSelected ( i ) then
59608: LD_VAR 0 2
59612: PPUSH
59613: CALL_OW 306
59617: IFFALSE 59682
// begin j := GetSide ( i ) ;
59619: LD_ADDR_VAR 0 3
59623: PUSH
59624: LD_VAR 0 2
59628: PPUSH
59629: CALL_OW 255
59633: ST_TO_ADDR
// if j = 8 then
59634: LD_VAR 0 3
59638: PUSH
59639: LD_INT 8
59641: EQUAL
59642: IFFALSE 59654
// j := 0 else
59644: LD_ADDR_VAR 0 3
59648: PUSH
59649: LD_INT 0
59651: ST_TO_ADDR
59652: GO 59668
// j := j + 1 ;
59654: LD_ADDR_VAR 0 3
59658: PUSH
59659: LD_VAR 0 3
59663: PUSH
59664: LD_INT 1
59666: PLUS
59667: ST_TO_ADDR
// SetSide ( i , j ) ;
59668: LD_VAR 0 2
59672: PPUSH
59673: LD_VAR 0 3
59677: PPUSH
59678: CALL_OW 235
// end ;
59682: GO 59605
59684: POP
59685: POP
// end ;
59686: LD_VAR 0 1
59690: RET
// export function hHackFog ; begin
59691: LD_INT 0
59693: PPUSH
// FogOff ( true ) ;
59694: LD_INT 1
59696: PPUSH
59697: CALL_OW 344
// end ;
59701: LD_VAR 0 1
59705: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59706: LD_INT 0
59708: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59709: LD_VAR 0 1
59713: PPUSH
59714: LD_VAR 0 2
59718: PPUSH
59719: LD_VAR 0 3
59723: PPUSH
59724: LD_INT 1
59726: PPUSH
59727: LD_INT 1
59729: PPUSH
59730: CALL_OW 483
// CenterOnXY ( x , y ) ;
59734: LD_VAR 0 2
59738: PPUSH
59739: LD_VAR 0 3
59743: PPUSH
59744: CALL_OW 84
// end ;
59748: LD_VAR 0 4
59752: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59753: LD_INT 0
59755: PPUSH
59756: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59757: LD_VAR 0 1
59761: NOT
59762: PUSH
59763: LD_VAR 0 2
59767: PPUSH
59768: LD_VAR 0 3
59772: PPUSH
59773: CALL_OW 488
59777: NOT
59778: OR
59779: PUSH
59780: LD_VAR 0 1
59784: PPUSH
59785: CALL_OW 266
59789: PUSH
59790: LD_INT 3
59792: NONEQUAL
59793: PUSH
59794: LD_VAR 0 1
59798: PPUSH
59799: CALL_OW 247
59803: PUSH
59804: LD_INT 1
59806: EQUAL
59807: NOT
59808: AND
59809: OR
59810: IFFALSE 59814
// exit ;
59812: GO 59963
// if GetType ( factory ) = unit_human then
59814: LD_VAR 0 1
59818: PPUSH
59819: CALL_OW 247
59823: PUSH
59824: LD_INT 1
59826: EQUAL
59827: IFFALSE 59844
// factory := IsInUnit ( factory ) ;
59829: LD_ADDR_VAR 0 1
59833: PUSH
59834: LD_VAR 0 1
59838: PPUSH
59839: CALL_OW 310
59843: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59844: LD_VAR 0 1
59848: PPUSH
59849: CALL_OW 266
59853: PUSH
59854: LD_INT 3
59856: NONEQUAL
59857: IFFALSE 59861
// exit ;
59859: GO 59963
// if HexInfo ( x , y ) = factory then
59861: LD_VAR 0 2
59865: PPUSH
59866: LD_VAR 0 3
59870: PPUSH
59871: CALL_OW 428
59875: PUSH
59876: LD_VAR 0 1
59880: EQUAL
59881: IFFALSE 59908
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
59883: LD_ADDR_EXP 121
59887: PUSH
59888: LD_EXP 121
59892: PPUSH
59893: LD_VAR 0 1
59897: PPUSH
59898: LD_INT 0
59900: PPUSH
59901: CALL_OW 1
59905: ST_TO_ADDR
59906: GO 59959
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
59908: LD_ADDR_EXP 121
59912: PUSH
59913: LD_EXP 121
59917: PPUSH
59918: LD_VAR 0 1
59922: PPUSH
59923: LD_VAR 0 1
59927: PPUSH
59928: CALL_OW 255
59932: PUSH
59933: LD_VAR 0 1
59937: PUSH
59938: LD_VAR 0 2
59942: PUSH
59943: LD_VAR 0 3
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: PPUSH
59954: CALL_OW 1
59958: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59959: CALL 59968 0 0
// end ;
59963: LD_VAR 0 4
59967: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
59968: LD_INT 0
59970: PPUSH
59971: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59972: LD_STRING resetFactoryWaypoint();
59974: PPUSH
59975: CALL_OW 559
// if factoryWaypoints then
59979: LD_EXP 121
59983: IFFALSE 60106
// begin for i := 1 to factoryWaypoints do
59985: LD_ADDR_VAR 0 2
59989: PUSH
59990: DOUBLE
59991: LD_INT 1
59993: DEC
59994: ST_TO_ADDR
59995: LD_EXP 121
59999: PUSH
60000: FOR_TO
60001: IFFALSE 60104
// if factoryWaypoints [ i ] then
60003: LD_EXP 121
60007: PUSH
60008: LD_VAR 0 2
60012: ARRAY
60013: IFFALSE 60102
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
60015: LD_STRING setFactoryWaypointXY(
60017: PUSH
60018: LD_EXP 121
60022: PUSH
60023: LD_VAR 0 2
60027: ARRAY
60028: PUSH
60029: LD_INT 1
60031: ARRAY
60032: STR
60033: PUSH
60034: LD_STRING ,
60036: STR
60037: PUSH
60038: LD_EXP 121
60042: PUSH
60043: LD_VAR 0 2
60047: ARRAY
60048: PUSH
60049: LD_INT 2
60051: ARRAY
60052: STR
60053: PUSH
60054: LD_STRING ,
60056: STR
60057: PUSH
60058: LD_EXP 121
60062: PUSH
60063: LD_VAR 0 2
60067: ARRAY
60068: PUSH
60069: LD_INT 3
60071: ARRAY
60072: STR
60073: PUSH
60074: LD_STRING ,
60076: STR
60077: PUSH
60078: LD_EXP 121
60082: PUSH
60083: LD_VAR 0 2
60087: ARRAY
60088: PUSH
60089: LD_INT 4
60091: ARRAY
60092: STR
60093: PUSH
60094: LD_STRING )
60096: STR
60097: PPUSH
60098: CALL_OW 559
60102: GO 60000
60104: POP
60105: POP
// end ; end ;
60106: LD_VAR 0 1
60110: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarhouseGatheringPoint ( warehouse , x , y ) ; begin
60111: LD_INT 0
60113: PPUSH
// if HexInfo ( x , y ) = warehouse then
60114: LD_VAR 0 2
60118: PPUSH
60119: LD_VAR 0 3
60123: PPUSH
60124: CALL_OW 428
60128: PUSH
60129: LD_VAR 0 1
60133: EQUAL
60134: IFFALSE 60161
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60136: LD_ADDR_EXP 122
60140: PUSH
60141: LD_EXP 122
60145: PPUSH
60146: LD_VAR 0 1
60150: PPUSH
60151: LD_INT 0
60153: PPUSH
60154: CALL_OW 1
60158: ST_TO_ADDR
60159: GO 60212
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60161: LD_ADDR_EXP 122
60165: PUSH
60166: LD_EXP 122
60170: PPUSH
60171: LD_VAR 0 1
60175: PPUSH
60176: LD_VAR 0 1
60180: PPUSH
60181: CALL_OW 255
60185: PUSH
60186: LD_VAR 0 1
60190: PUSH
60191: LD_VAR 0 2
60195: PUSH
60196: LD_VAR 0 3
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: PPUSH
60207: CALL_OW 1
60211: ST_TO_ADDR
// UpdateWarhouseGatheringPoints ;
60212: CALL 60221 0 0
// end ;
60216: LD_VAR 0 4
60220: RET
// export function UpdateWarhouseGatheringPoints ( ) ; var i ; begin
60221: LD_INT 0
60223: PPUSH
60224: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60225: LD_STRING resetWarehouseGatheringPoints();
60227: PPUSH
60228: CALL_OW 559
// if warehouseGatheringPoints then
60232: LD_EXP 122
60236: IFFALSE 60359
// begin for i := 1 to warehouseGatheringPoints do
60238: LD_ADDR_VAR 0 2
60242: PUSH
60243: DOUBLE
60244: LD_INT 1
60246: DEC
60247: ST_TO_ADDR
60248: LD_EXP 122
60252: PUSH
60253: FOR_TO
60254: IFFALSE 60357
// if warehouseGatheringPoints [ i ] then
60256: LD_EXP 122
60260: PUSH
60261: LD_VAR 0 2
60265: ARRAY
60266: IFFALSE 60355
// ToLua ( setWarhouseGatheringPointXY( & warehouseGatheringPoints [ i ] [ 1 ] & , & warehouseGatheringPoints [ i ] [ 2 ] & , & warehouseGatheringPoints [ i ] [ 3 ] & , & warehouseGatheringPoints [ i ] [ 4 ] & ) ) ;
60268: LD_STRING setWarhouseGatheringPointXY(
60270: PUSH
60271: LD_EXP 122
60275: PUSH
60276: LD_VAR 0 2
60280: ARRAY
60281: PUSH
60282: LD_INT 1
60284: ARRAY
60285: STR
60286: PUSH
60287: LD_STRING ,
60289: STR
60290: PUSH
60291: LD_EXP 122
60295: PUSH
60296: LD_VAR 0 2
60300: ARRAY
60301: PUSH
60302: LD_INT 2
60304: ARRAY
60305: STR
60306: PUSH
60307: LD_STRING ,
60309: STR
60310: PUSH
60311: LD_EXP 122
60315: PUSH
60316: LD_VAR 0 2
60320: ARRAY
60321: PUSH
60322: LD_INT 3
60324: ARRAY
60325: STR
60326: PUSH
60327: LD_STRING ,
60329: STR
60330: PUSH
60331: LD_EXP 122
60335: PUSH
60336: LD_VAR 0 2
60340: ARRAY
60341: PUSH
60342: LD_INT 4
60344: ARRAY
60345: STR
60346: PUSH
60347: LD_STRING )
60349: STR
60350: PPUSH
60351: CALL_OW 559
60355: GO 60253
60357: POP
60358: POP
// end ; end ;
60359: LD_VAR 0 1
60363: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
60364: LD_EXP 122
60368: IFFALSE 60997
60370: GO 60372
60372: DISABLE
60373: LD_INT 0
60375: PPUSH
60376: PPUSH
60377: PPUSH
60378: PPUSH
60379: PPUSH
60380: PPUSH
60381: PPUSH
60382: PPUSH
60383: PPUSH
// begin enable ;
60384: ENABLE
// list := warehouseGatheringPoints diff 0 ;
60385: LD_ADDR_VAR 0 3
60389: PUSH
60390: LD_EXP 122
60394: PUSH
60395: LD_INT 0
60397: DIFF
60398: ST_TO_ADDR
// for i := 1 to list do
60399: LD_ADDR_VAR 0 1
60403: PUSH
60404: DOUBLE
60405: LD_INT 1
60407: DEC
60408: ST_TO_ADDR
60409: LD_VAR 0 3
60413: PUSH
60414: FOR_TO
60415: IFFALSE 60995
// begin if not list [ i ] then
60417: LD_VAR 0 3
60421: PUSH
60422: LD_VAR 0 1
60426: ARRAY
60427: NOT
60428: IFFALSE 60432
// continue ;
60430: GO 60414
// depot := list [ i ] [ 2 ] ;
60432: LD_ADDR_VAR 0 8
60436: PUSH
60437: LD_VAR 0 3
60441: PUSH
60442: LD_VAR 0 1
60446: ARRAY
60447: PUSH
60448: LD_INT 2
60450: ARRAY
60451: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
60452: LD_ADDR_VAR 0 5
60456: PUSH
60457: LD_VAR 0 3
60461: PUSH
60462: LD_VAR 0 1
60466: ARRAY
60467: PUSH
60468: LD_INT 1
60470: ARRAY
60471: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
60472: LD_VAR 0 8
60476: PPUSH
60477: CALL_OW 301
60481: PUSH
60482: LD_VAR 0 5
60486: PUSH
60487: LD_VAR 0 8
60491: PPUSH
60492: CALL_OW 255
60496: NONEQUAL
60497: OR
60498: IFFALSE 60527
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
60500: LD_ADDR_EXP 122
60504: PUSH
60505: LD_EXP 122
60509: PPUSH
60510: LD_VAR 0 8
60514: PPUSH
60515: LD_INT 0
60517: PPUSH
60518: CALL_OW 1
60522: ST_TO_ADDR
// exit ;
60523: POP
60524: POP
60525: GO 60997
// end ; x := list [ i ] [ 3 ] ;
60527: LD_ADDR_VAR 0 6
60531: PUSH
60532: LD_VAR 0 3
60536: PUSH
60537: LD_VAR 0 1
60541: ARRAY
60542: PUSH
60543: LD_INT 3
60545: ARRAY
60546: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
60547: LD_ADDR_VAR 0 7
60551: PUSH
60552: LD_VAR 0 3
60556: PUSH
60557: LD_VAR 0 1
60561: ARRAY
60562: PUSH
60563: LD_INT 4
60565: ARRAY
60566: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
60567: LD_ADDR_VAR 0 9
60571: PUSH
60572: LD_VAR 0 6
60576: PPUSH
60577: LD_VAR 0 7
60581: PPUSH
60582: LD_INT 12
60584: PPUSH
60585: CALL 43999 0 3
60589: ST_TO_ADDR
// if not cratesNearbyPoint then
60590: LD_VAR 0 9
60594: NOT
60595: IFFALSE 60601
// exit ;
60597: POP
60598: POP
60599: GO 60997
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
60601: LD_ADDR_VAR 0 4
60605: PUSH
60606: LD_INT 22
60608: PUSH
60609: LD_VAR 0 5
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: PUSH
60621: LD_INT 60
60623: PUSH
60624: EMPTY
60625: LIST
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: LD_INT 25
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 25
60646: PUSH
60647: LD_INT 16
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: LIST
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: LIST
60663: PPUSH
60664: CALL_OW 69
60668: PUSH
60669: LD_VAR 0 8
60673: PPUSH
60674: CALL_OW 313
60678: PPUSH
60679: LD_INT 3
60681: PUSH
60682: LD_INT 60
60684: PUSH
60685: EMPTY
60686: LIST
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 2
60694: PUSH
60695: LD_INT 25
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 25
60707: PUSH
60708: LD_INT 16
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: LIST
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PPUSH
60724: CALL_OW 72
60728: UNION
60729: ST_TO_ADDR
// if tmp then
60730: LD_VAR 0 4
60734: IFFALSE 60814
// begin tmp := ShrinkArray ( tmp , 3 ) ;
60736: LD_ADDR_VAR 0 4
60740: PUSH
60741: LD_VAR 0 4
60745: PPUSH
60746: LD_INT 3
60748: PPUSH
60749: CALL 41966 0 2
60753: ST_TO_ADDR
// for j in tmp do
60754: LD_ADDR_VAR 0 2
60758: PUSH
60759: LD_VAR 0 4
60763: PUSH
60764: FOR_IN
60765: IFFALSE 60808
// begin if IsInUnit ( j ) then
60767: LD_VAR 0 2
60771: PPUSH
60772: CALL_OW 310
60776: IFFALSE 60787
// ComExit ( j ) ;
60778: LD_VAR 0 2
60782: PPUSH
60783: CALL 42049 0 1
// AddComCollect ( j , x , y ) ;
60787: LD_VAR 0 2
60791: PPUSH
60792: LD_VAR 0 6
60796: PPUSH
60797: LD_VAR 0 7
60801: PPUSH
60802: CALL_OW 177
// end ;
60806: GO 60764
60808: POP
60809: POP
// exit ;
60810: POP
60811: POP
60812: GO 60997
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
60814: LD_ADDR_VAR 0 4
60818: PUSH
60819: LD_INT 22
60821: PUSH
60822: LD_VAR 0 5
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: PUSH
60834: LD_INT 34
60836: PUSH
60837: LD_INT 12
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 34
60846: PUSH
60847: LD_INT 51
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 34
60856: PUSH
60857: LD_INT 32
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 34
60866: PUSH
60867: LD_EXP 45
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PPUSH
60887: CALL_OW 69
60891: ST_TO_ADDR
// if tmp then
60892: LD_VAR 0 4
60896: IFFALSE 60993
// begin for j in tmp do
60898: LD_ADDR_VAR 0 2
60902: PUSH
60903: LD_VAR 0 4
60907: PUSH
60908: FOR_IN
60909: IFFALSE 60991
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
60911: LD_VAR 0 1
60915: PPUSH
60916: CALL_OW 261
60920: PUSH
60921: LD_INT 20
60923: GREATER
60924: PUSH
60925: LD_VAR 0 1
60929: PPUSH
60930: CALL_OW 314
60934: NOT
60935: AND
60936: PUSH
60937: LD_VAR 0 1
60941: PPUSH
60942: CALL_OW 263
60946: PUSH
60947: LD_INT 1
60949: NONEQUAL
60950: PUSH
60951: LD_VAR 0 1
60955: PPUSH
60956: CALL_OW 311
60960: OR
60961: AND
60962: IFFALSE 60989
// begin ComCollect ( j , x , y ) ;
60964: LD_VAR 0 2
60968: PPUSH
60969: LD_VAR 0 6
60973: PPUSH
60974: LD_VAR 0 7
60978: PPUSH
60979: CALL_OW 117
// exit ;
60983: POP
60984: POP
60985: POP
60986: POP
60987: GO 60997
// end ;
60989: GO 60908
60991: POP
60992: POP
// end ; end ;
60993: GO 60414
60995: POP
60996: POP
// end ;
60997: PPOPN 9
60999: END
