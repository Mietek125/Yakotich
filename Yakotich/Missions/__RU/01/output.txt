// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 36 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Randomize ;
  15: CALL_OW 10
// RandomizeAll ;
  19: CALL_OW 11
// InitRussian ;
  23: CALL 815 0 0
// Action ;
  27: CALL 1733 0 0
// DebugMode ;
  31: CALL 196 0 0
// end ;
  35: END
// export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin ; export Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif ; export MaksimCrew ; export OtherSurvivors ; export AmS , AmSc , AMSS ; export AmCommander ; export Americans ; export KillCounter , MaksimTime ; export pojazdy ; export debug ; export mission_prefix ; export hill_north_trigger , hill_south_trigger , yakotich_in_base , quests_finished , aleksandr_found , attacks_are_finished , american_attack , oil_power_researched , oil_engine_researched , technology1_researched , end_of_the_mission , losses , vehicle_constructed , josif_landed , josif_saved , breastwork_builded , armoury_builded , maksim_coming ; function Init ; begin
  36: LD_INT 0
  38: PPUSH
// mission_prefix := 01_ ;
  39: LD_ADDR_EXP 25
  43: PUSH
  44: LD_STRING 01_
  46: ST_TO_ADDR
// yakotich_in_base := false ;
  47: LD_ADDR_EXP 28
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// quests_finished := false ;
  55: LD_ADDR_EXP 29
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// aleksandr_found := false ;
  63: LD_ADDR_EXP 30
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// attacks_are_finished := false ;
  71: LD_ADDR_EXP 31
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// oil_power_researched := false ;
  79: LD_ADDR_EXP 33
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// oil_engine_researched := false ;
  87: LD_ADDR_EXP 34
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// technology1_researched := false ;
  95: LD_ADDR_EXP 35
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// american_attack := false ;
 103: LD_ADDR_EXP 32
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// end_of_the_mission := false ;
 111: LD_ADDR_EXP 36
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// losses := false ;
 119: LD_ADDR_EXP 37
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// vehicle_constructed := false ;
 127: LD_ADDR_EXP 38
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// josif_landed := false ;
 135: LD_ADDR_EXP 39
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// josif_saved := false ;
 143: LD_ADDR_EXP 40
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// breastwork_builded := false ;
 151: LD_ADDR_EXP 41
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// armoury_builded := false ;
 159: LD_ADDR_EXP 42
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// maksim_coming := false ;
 167: LD_ADDR_EXP 43
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// KillCounter := 0 ;
 175: LD_ADDR_EXP 21
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// MaksimTime := 2 2$0 ;
 183: LD_ADDR_EXP 22
 187: PUSH
 188: LD_INT 4200
 190: ST_TO_ADDR
// end ;
 191: LD_VAR 0 1
 195: RET
// function DebugMode ; var i ; begin
 196: LD_INT 0
 198: PPUSH
 199: PPUSH
// if not debug then
 200: LD_EXP 24
 204: NOT
 205: IFFALSE 209
// exit ;
 207: GO 228
// Difficulty := 3 ;
 209: LD_ADDR_OWVAR 67
 213: PUSH
 214: LD_INT 3
 216: ST_TO_ADDR
// TurnFogOff ( ) ;
 217: CALL_OW 537
// FogOff ( 3 ) ;
 221: LD_INT 3
 223: PPUSH
 224: CALL_OW 344
// end ; end_of_file
 228: LD_VAR 0 1
 232: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
 237: PPUSH
// uc_side := GetSide ( b ) ;
 238: LD_ADDR_OWVAR 20
 242: PUSH
 243: LD_VAR 0 2
 247: PPUSH
 248: CALL_OW 255
 252: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 253: LD_ADDR_OWVAR 21
 257: PUSH
 258: LD_VAR 0 2
 262: PPUSH
 263: CALL_OW 248
 267: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 268: LD_ADDR_VAR 0 5
 272: PUSH
 273: LD_VAR 0 2
 277: PPUSH
 278: CALL_OW 254
 282: PUSH
 283: LD_INT 3
 285: MINUS
 286: ST_TO_ADDR
// if dir < 0 then
 287: LD_VAR 0 5
 291: PUSH
 292: LD_INT 0
 294: LESS
 295: IFFALSE 311
// dir := 6 + dir ;
 297: LD_ADDR_VAR 0 5
 301: PUSH
 302: LD_INT 6
 304: PUSH
 305: LD_VAR 0 5
 309: PLUS
 310: ST_TO_ADDR
// un := CreateHuman ;
 311: LD_ADDR_VAR 0 4
 315: PUSH
 316: CALL_OW 44
 320: ST_TO_ADDR
// SetDir ( un , dir ) ;
 321: LD_VAR 0 4
 325: PPUSH
 326: LD_VAR 0 5
 330: PPUSH
 331: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 335: LD_VAR 0 4
 339: PPUSH
 340: LD_VAR 0 2
 344: PPUSH
 345: CALL_OW 52
// end ;
 349: LD_VAR 0 3
 353: RET
// export function GetCountOfBuildingsInBase ( base , btype ) ; var i , tmp ; begin
 354: LD_INT 0
 356: PPUSH
 357: PPUSH
 358: PPUSH
// result := 0 ;
 359: LD_ADDR_VAR 0 3
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_btype , btype ] ) ;
 367: LD_ADDR_VAR 0 5
 371: PUSH
 372: LD_INT 30
 374: PUSH
 375: LD_VAR 0 2
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: ST_TO_ADDR
// if not base or not tmp then
 389: LD_VAR 0 1
 393: NOT
 394: PUSH
 395: LD_VAR 0 5
 399: NOT
 400: OR
 401: IFFALSE 405
// exit ;
 403: GO 453
// for i in tmp do
 405: LD_ADDR_VAR 0 4
 409: PUSH
 410: LD_VAR 0 5
 414: PUSH
 415: FOR_IN
 416: IFFALSE 451
// if GetBase ( i ) = base then
 418: LD_VAR 0 4
 422: PPUSH
 423: CALL_OW 274
 427: PUSH
 428: LD_VAR 0 1
 432: EQUAL
 433: IFFALSE 449
// result := result + 1 ;
 435: LD_ADDR_VAR 0 3
 439: PUSH
 440: LD_VAR 0 3
 444: PUSH
 445: LD_INT 1
 447: PLUS
 448: ST_TO_ADDR
 449: GO 415
 451: POP
 452: POP
// end ;
 453: LD_VAR 0 3
 457: RET
// every 1 trigger IsSelected ( Pezet ) do
 458: LD_INT 74
 460: PPUSH
 461: CALL_OW 306
 465: IFFALSE 569
 467: GO 469
 469: DISABLE
// begin PezetExp ( [ 1 , 2 , 3 , 4 ] ) ;
 470: LD_INT 1
 472: PUSH
 473: LD_INT 2
 475: PUSH
 476: LD_INT 3
 478: PUSH
 479: LD_INT 4
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: LIST
 486: LIST
 487: PPUSH
 488: CALL 570 0 1
// Wait ( 0 0$05 ) ;
 492: LD_INT 175
 494: PPUSH
 495: CALL_OW 67
// Say ( Pezet , 1Pezet-Sikret ) ;
 499: LD_INT 74
 501: PPUSH
 502: LD_STRING 1Pezet-Sikret
 504: PPUSH
 505: CALL_OW 88
// TeleportUnit ( Pezet , 139 , 74 , 120 , true ) ;
 509: LD_INT 74
 511: PPUSH
 512: LD_INT 139
 514: PPUSH
 515: LD_INT 74
 517: PPUSH
 518: LD_INT 120
 520: PPUSH
 521: LD_INT 1
 523: PPUSH
 524: CALL_OW 483
// Wait ( 0 0$05 ) ;
 528: LD_INT 175
 530: PPUSH
 531: CALL_OW 67
// RemoveUnit ( Pezet ) ;
 535: LD_INT 74
 537: PPUSH
 538: CALL_OW 64
// SaveVariable ( 1 , PezetSaved ) ;
 542: LD_INT 1
 544: PPUSH
 545: LD_STRING PezetSaved
 547: PPUSH
 548: CALL_OW 39
// SaveCharacters ( Pezet , Pezet ) ;
 552: LD_INT 74
 554: PPUSH
 555: LD_STRING Pezet
 557: PPUSH
 558: CALL_OW 38
// SetAchievement ( ACH_PEZET ) ;
 562: LD_STRING ACH_PEZET
 564: PPUSH
 565: CALL_OW 543
// end ;
 569: END
// export function PezetExp ( q ) ; var dec , q1 ; begin
 570: LD_INT 0
 572: PPUSH
 573: PPUSH
 574: PPUSH
// dec = SelectiveQuery ( PezetQuery , q ) ;
 575: LD_ADDR_VAR 0 3
 579: PUSH
 580: LD_STRING PezetQuery
 582: PPUSH
 583: LD_VAR 0 1
 587: PPUSH
 588: CALL_OW 98
 592: ST_TO_ADDR
// case dec of 1 :
 593: LD_VAR 0 3
 597: PUSH
 598: LD_INT 1
 600: DOUBLE
 601: EQUAL
 602: IFTRUE 606
 604: GO 624
 606: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 500 ) ;
 607: LD_EXP 1
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: LD_INT 500
 617: PPUSH
 618: CALL_OW 591
// end ; 2 :
 622: GO 703
 624: LD_INT 2
 626: DOUBLE
 627: EQUAL
 628: IFTRUE 632
 630: GO 650
 632: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 500 ) ;
 633: LD_EXP 1
 637: PPUSH
 638: LD_INT 2
 640: PPUSH
 641: LD_INT 500
 643: PPUSH
 644: CALL_OW 591
// end ; 3 :
 648: GO 703
 650: LD_INT 3
 652: DOUBLE
 653: EQUAL
 654: IFTRUE 658
 656: GO 676
 658: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 500 ) ;
 659: LD_EXP 1
 663: PPUSH
 664: LD_INT 3
 666: PPUSH
 667: LD_INT 500
 669: PPUSH
 670: CALL_OW 591
// end ; 4 :
 674: GO 703
 676: LD_INT 4
 678: DOUBLE
 679: EQUAL
 680: IFTRUE 684
 682: GO 702
 684: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 500 ) ;
 685: LD_EXP 1
 689: PPUSH
 690: LD_INT 4
 692: PPUSH
 693: LD_INT 500
 695: PPUSH
 696: CALL_OW 591
// end ; end ;
 700: GO 703
 702: POP
// end ;
 703: LD_VAR 0 2
 707: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
 708: LD_EXP 1
 712: PPUSH
 713: CALL_OW 301
 717: IFFALSE 729
 719: GO 721
 721: DISABLE
// begin YouLost ( YakotichDead ) ;
 722: LD_STRING YakotichDead
 724: PPUSH
 725: CALL_OW 104
// end ;
 729: END
// every 0 0$1 trigger IsDead ( Mietek ) do
 730: LD_EXP 2
 734: PPUSH
 735: CALL_OW 301
 739: IFFALSE 751
 741: GO 743
 743: DISABLE
// begin YouLost ( MietekDead ) ;
 744: LD_STRING MietekDead
 746: PPUSH
 747: CALL_OW 104
// end ;
 751: END
// every 0 0$1 trigger maksim_coming = true do
 752: LD_EXP 43
 756: PUSH
 757: LD_INT 1
 759: EQUAL
 760: IFFALSE 814
 762: GO 764
 764: DISABLE
// begin enable ;
 765: ENABLE
// if MaksimTime then
 766: LD_EXP 22
 770: IFFALSE 805
// begin MaksimTime := MaksimTime - 0 0$1 ;
 772: LD_ADDR_EXP 22
 776: PUSH
 777: LD_EXP 22
 781: PUSH
 782: LD_INT 35
 784: MINUS
 785: ST_TO_ADDR
// display_strings := [ #MaksimTime , MaksimTime ] ;
 786: LD_ADDR_OWVAR 47
 790: PUSH
 791: LD_STRING #MaksimTime
 793: PUSH
 794: LD_EXP 22
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: ST_TO_ADDR
// end else
 803: GO 814
// begin display_strings :=  ;
 805: LD_ADDR_OWVAR 47
 809: PUSH
 810: LD_STRING 
 812: ST_TO_ADDR
// disable ;
 813: DISABLE
// end ; end ; end_of_file
 814: END
// export function InitRussian ; begin
 815: LD_INT 0
 817: PPUSH
// Uc_Nation := 3 ;
 818: LD_ADDR_OWVAR 21
 822: PUSH
 823: LD_INT 3
 825: ST_TO_ADDR
// Uc_Side := 3 ;
 826: LD_ADDR_OWVAR 20
 830: PUSH
 831: LD_INT 3
 833: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , false ,  ) ;
 834: LD_ADDR_EXP 1
 838: PUSH
 839: LD_STRING Yakotich
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: LD_STRING 
 847: PPUSH
 848: CALL 4270 0 3
 852: ST_TO_ADDR
// Uc_Side := 6 ;
 853: LD_ADDR_OWVAR 20
 857: PUSH
 858: LD_INT 6
 860: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , false ,  ) ;
 861: LD_ADDR_EXP 2
 865: PUSH
 866: LD_STRING Mietek
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: LD_STRING 
 874: PPUSH
 875: CALL 4270 0 3
 879: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , false ,  ) ;
 880: LD_ADDR_EXP 3
 884: PUSH
 885: LD_STRING Boris
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: LD_STRING 
 893: PPUSH
 894: CALL 4270 0 3
 898: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , false ,  ) ;
 899: LD_ADDR_EXP 5
 903: PUSH
 904: LD_STRING Michail
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: LD_STRING 
 912: PPUSH
 913: CALL 4270 0 3
 917: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , false ,  ) ;
 918: LD_ADDR_EXP 4
 922: PUSH
 923: LD_STRING Vasilij
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: LD_STRING 
 931: PPUSH
 932: CALL 4270 0 3
 936: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , false ,  ) ;
 937: LD_ADDR_EXP 6
 941: PUSH
 942: LD_STRING Constantin
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: LD_STRING 
 950: PPUSH
 951: CALL 4270 0 3
 955: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , false ,  ) ;
 956: LD_ADDR_EXP 7
 960: PUSH
 961: LD_STRING Maksim
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: LD_STRING 
 969: PPUSH
 970: CALL 4270 0 3
 974: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , false ,  ) ;
 975: LD_ADDR_EXP 8
 979: PUSH
 980: LD_STRING Fiodor
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: LD_STRING 
 988: PPUSH
 989: CALL 4270 0 3
 993: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , false ,  ) ;
 994: LD_ADDR_EXP 11
 998: PUSH
 999: LD_STRING Aleksiej
1001: PPUSH
1002: LD_INT 0
1004: PPUSH
1005: LD_STRING 
1007: PPUSH
1008: CALL 4270 0 3
1012: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , false ,  ) ;
1013: LD_ADDR_EXP 9
1017: PUSH
1018: LD_STRING Pavel
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: LD_STRING 
1026: PPUSH
1027: CALL 4270 0 3
1031: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , false ,  ) ;
1032: LD_ADDR_EXP 10
1036: PUSH
1037: LD_STRING Zakhar
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: LD_STRING 
1045: PPUSH
1046: CALL 4270 0 3
1050: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Maksim ;
1051: LD_ADDR_EXP 14
1055: PUSH
1056: LD_EXP 14
1060: PUSH
1061: LD_EXP 7
1065: ADD
1066: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Fiodor ;
1067: LD_ADDR_EXP 14
1071: PUSH
1072: LD_EXP 14
1076: PUSH
1077: LD_EXP 8
1081: ADD
1082: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Aleksiej ;
1083: LD_ADDR_EXP 14
1087: PUSH
1088: LD_EXP 14
1092: PUSH
1093: LD_EXP 11
1097: ADD
1098: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Pavel ;
1099: LD_ADDR_EXP 14
1103: PUSH
1104: LD_EXP 14
1108: PUSH
1109: LD_EXP 9
1113: ADD
1114: ST_TO_ADDR
// MaksimCrew := MaksimCrew ^ Zakhar ;
1115: LD_ADDR_EXP 14
1119: PUSH
1120: LD_EXP 14
1124: PUSH
1125: LD_EXP 10
1129: ADD
1130: ST_TO_ADDR
// Uc_Side := 5 ;
1131: LD_ADDR_OWVAR 20
1135: PUSH
1136: LD_INT 5
1138: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , false ,  ) ;
1139: LD_ADDR_EXP 12
1143: PUSH
1144: LD_STRING Aleksandr
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: LD_STRING 
1152: PPUSH
1153: CALL 4270 0 3
1157: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false ,  ) ;
1158: LD_ADDR_EXP 13
1162: PUSH
1163: LD_STRING Josif
1165: PPUSH
1166: LD_INT 0
1168: PPUSH
1169: LD_STRING 
1171: PPUSH
1172: CALL 4270 0 3
1176: ST_TO_ADDR
// PlaceHumanInUnit ( Constantin , RuB3 ) ;
1177: LD_EXP 6
1181: PPUSH
1182: LD_INT 90
1184: PPUSH
1185: CALL_OW 52
// PlaceHumanInUnit ( Boris , RuDep ) ;
1189: LD_EXP 3
1193: PPUSH
1194: LD_INT 15
1196: PPUSH
1197: CALL_OW 52
// PlaceUnitArea ( Vasilij , Civilians , false ) ;
1201: LD_EXP 4
1205: PPUSH
1206: LD_INT 1
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL_OW 49
// PlaceUnitArea ( Michail , Civilians , false ) ;
1216: LD_EXP 5
1220: PPUSH
1221: LD_INT 1
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 49
// PlaceUnitArea ( Mietek , RyniakovSpawn , false ) ;
1231: LD_EXP 2
1235: PPUSH
1236: LD_INT 2
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
// ComTurnUnit ( [ Michail , Vasilij ] , Mietek ) ;
1246: LD_EXP 5
1250: PUSH
1251: LD_EXP 4
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PPUSH
1260: LD_EXP 2
1264: PPUSH
1265: CALL_OW 119
// ComTurnUnit ( Mietek , Vasilij ) ;
1269: LD_EXP 2
1273: PPUSH
1274: LD_EXP 4
1278: PPUSH
1279: CALL_OW 119
// end ; end_of_file
1283: LD_VAR 0 1
1287: RET
// export function InitAmerican ; var i , j , k ; begin
1288: LD_INT 0
1290: PPUSH
1291: PPUSH
1292: PPUSH
1293: PPUSH
// Uc_Side = 4 ;
1294: LD_ADDR_OWVAR 20
1298: PUSH
1299: LD_INT 4
1301: ST_TO_ADDR
// Uc_Nation = 1 ;
1302: LD_ADDR_OWVAR 21
1306: PUSH
1307: LD_INT 1
1309: ST_TO_ADDR
// AmCommander := PrepareUnit ( AmCommander , false ,  ) ;
1310: LD_ADDR_EXP 19
1314: PUSH
1315: LD_STRING AmCommander
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: LD_STRING 
1323: PPUSH
1324: CALL 4270 0 3
1328: ST_TO_ADDR
// Americans := Americans ^ AmCommander ;
1329: LD_ADDR_EXP 20
1333: PUSH
1334: LD_EXP 20
1338: PUSH
1339: LD_EXP 19
1343: ADD
1344: ST_TO_ADDR
// PlaceUnitArea ( AmCommander , AmAttacks , false ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_INT 6
1352: PPUSH
1353: LD_INT 0
1355: PPUSH
1356: CALL_OW 49
// for i = 1 to [ 4 , 7 , 11 , 13 ] [ Difficulty ] do
1360: LD_ADDR_VAR 0 2
1364: PUSH
1365: DOUBLE
1366: LD_INT 1
1368: DEC
1369: ST_TO_ADDR
1370: LD_INT 4
1372: PUSH
1373: LD_INT 7
1375: PUSH
1376: LD_INT 11
1378: PUSH
1379: LD_INT 13
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: PUSH
1388: LD_OWVAR 67
1392: ARRAY
1393: PUSH
1394: FOR_TO
1395: IFFALSE 1479
// begin PrepareSoldier ( rand ( 1 , 2 ) , [ 0 , 2 , 4 , 5 ] [ Difficulty ] ) ;
1397: LD_INT 1
1399: PPUSH
1400: LD_INT 2
1402: PPUSH
1403: CALL_OW 12
1407: PPUSH
1408: LD_INT 0
1410: PUSH
1411: LD_INT 2
1413: PUSH
1414: LD_INT 4
1416: PUSH
1417: LD_INT 5
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: PUSH
1426: LD_OWVAR 67
1430: ARRAY
1431: PPUSH
1432: CALL_OW 381
// AmS = CreateHuman ;
1436: LD_ADDR_EXP 16
1440: PUSH
1441: CALL_OW 44
1445: ST_TO_ADDR
// Americans := Americans ^ AmS ;
1446: LD_ADDR_EXP 20
1450: PUSH
1451: LD_EXP 20
1455: PUSH
1456: LD_EXP 16
1460: ADD
1461: ST_TO_ADDR
// PlaceUnitArea ( AmS , AmAttacks , false ) ;
1462: LD_EXP 16
1466: PPUSH
1467: LD_INT 6
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL_OW 49
// end ;
1477: GO 1394
1479: POP
1480: POP
// for j = 1 to [ 0 , 1 , 3 , 4 ] [ Difficulty ] do
1481: LD_ADDR_VAR 0 3
1485: PUSH
1486: DOUBLE
1487: LD_INT 1
1489: DEC
1490: ST_TO_ADDR
1491: LD_INT 0
1493: PUSH
1494: LD_INT 1
1496: PUSH
1497: LD_INT 3
1499: PUSH
1500: LD_INT 4
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: PUSH
1509: LD_OWVAR 67
1513: ARRAY
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1600
// begin PrepareScientist ( rand ( 1 , 2 ) , [ 0 , 2 , 4 , 5 ] [ Difficulty ] ) ;
1518: LD_INT 1
1520: PPUSH
1521: LD_INT 2
1523: PPUSH
1524: CALL_OW 12
1528: PPUSH
1529: LD_INT 0
1531: PUSH
1532: LD_INT 2
1534: PUSH
1535: LD_INT 4
1537: PUSH
1538: LD_INT 5
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: PUSH
1547: LD_OWVAR 67
1551: ARRAY
1552: PPUSH
1553: CALL_OW 384
// AmSc = CreateHuman ;
1557: LD_ADDR_EXP 17
1561: PUSH
1562: CALL_OW 44
1566: ST_TO_ADDR
// Americans := Americans ^ AmSc ;
1567: LD_ADDR_EXP 20
1571: PUSH
1572: LD_EXP 20
1576: PUSH
1577: LD_EXP 17
1581: ADD
1582: ST_TO_ADDR
// PlaceUnitArea ( AmSc , AmAttacks , false ) ;
1583: LD_EXP 17
1587: PPUSH
1588: LD_INT 6
1590: PPUSH
1591: LD_INT 0
1593: PPUSH
1594: CALL_OW 49
// end ;
1598: GO 1515
1600: POP
1601: POP
// end ;
1602: LD_VAR 0 1
1606: RET
// every 2 2$30 trigger yakotich_in_base = true do
1607: LD_EXP 28
1611: PUSH
1612: LD_INT 1
1614: EQUAL
1615: IFFALSE 1732
1617: GO 1619
1619: DISABLE
// begin Uc_Side = 1 ;
1620: LD_ADDR_OWVAR 20
1624: PUSH
1625: LD_INT 1
1627: ST_TO_ADDR
// Uc_Nation = 1 ;
1628: LD_ADDR_OWVAR 21
1632: PUSH
1633: LD_INT 1
1635: ST_TO_ADDR
// PrepareSoldier ( rand ( 0 , 1 ) , [ 2 , 3 , 5 , 6 ] [ Difficulty ] ) ;
1636: LD_INT 0
1638: PPUSH
1639: LD_INT 1
1641: PPUSH
1642: CALL_OW 12
1646: PPUSH
1647: LD_INT 2
1649: PUSH
1650: LD_INT 3
1652: PUSH
1653: LD_INT 5
1655: PUSH
1656: LD_INT 6
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: LD_OWVAR 67
1669: ARRAY
1670: PPUSH
1671: CALL_OW 381
// AMSS = CreateHuman ;
1675: LD_ADDR_EXP 18
1679: PUSH
1680: CALL_OW 44
1684: ST_TO_ADDR
// Americans := Americans ^ AMSS ;
1685: LD_ADDR_EXP 20
1689: PUSH
1690: LD_EXP 20
1694: PUSH
1695: LD_EXP 18
1699: ADD
1700: ST_TO_ADDR
// PlaceUnitArea ( AMSS , AmSpawners , true ) ;
1701: LD_EXP 18
1705: PPUSH
1706: LD_INT 11
1708: PPUSH
1709: LD_INT 1
1711: PPUSH
1712: CALL_OW 49
// ComAgressiveMove ( AMSS , 92 , 69 ) ;
1716: LD_EXP 18
1720: PPUSH
1721: LD_INT 92
1723: PPUSH
1724: LD_INT 69
1726: PPUSH
1727: CALL_OW 114
// enable ;
1731: ENABLE
// end ; end_of_file
1732: END
// export function Action ; var i ; begin
1733: LD_INT 0
1735: PPUSH
1736: PPUSH
// InGameOn ;
1737: CALL_OW 8
// CenterOnXY ( 100 , 48 ) ;
1741: LD_INT 100
1743: PPUSH
1744: LD_INT 48
1746: PPUSH
1747: CALL_OW 84
// Wait ( 0 0$1 ) ;
1751: LD_INT 35
1753: PPUSH
1754: CALL_OW 67
// PlaceUnitArea ( Yakotich , YakotichSpawn , true ) ;
1758: LD_EXP 1
1762: PPUSH
1763: LD_INT 5
1765: PPUSH
1766: LD_INT 1
1768: PPUSH
1769: CALL_OW 49
// Wait ( 0 0$3 ) ;
1773: LD_INT 105
1775: PPUSH
1776: CALL_OW 67
// Say ( Yakotich , 1Yak-01 ) ;
1780: LD_EXP 1
1784: PPUSH
1785: LD_STRING 1Yak-01
1787: PPUSH
1788: CALL_OW 88
// Wait ( 0 0$2 ) ;
1792: LD_INT 70
1794: PPUSH
1795: CALL_OW 67
// Say ( Yakotich , 1Yak-02 ) ;
1799: LD_EXP 1
1803: PPUSH
1804: LD_STRING 1Yak-02
1806: PPUSH
1807: CALL_OW 88
// SayRadio ( Yakotich , 1Yak-03 ) ;
1811: LD_EXP 1
1815: PPUSH
1816: LD_STRING 1Yak-03
1818: PPUSH
1819: CALL_OW 94
// Wait ( 0 0$2 ) ;
1823: LD_INT 70
1825: PPUSH
1826: CALL_OW 67
// Say ( Yakotich , 1Yak-04 ) ;
1830: LD_EXP 1
1834: PPUSH
1835: LD_STRING 1Yak-04
1837: PPUSH
1838: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
1842: LD_STRING o1
1844: PPUSH
1845: CALL_OW 337
// InGameOff ;
1849: CALL_OW 9
// end ;
1853: LD_VAR 0 1
1857: RET
// every 0 0$1 trigger FilterUnitsInArea ( ForestOut , [ [ f_side , 3 ] ] ) do
1858: LD_INT 7
1860: PPUSH
1861: LD_INT 22
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PUSH
1871: EMPTY
1872: LIST
1873: PPUSH
1874: CALL_OW 70
1878: IFFALSE 1895
1880: GO 1882
1882: DISABLE
// begin Say ( Yakotich , 1Yak-Random1 ) ;
1883: LD_EXP 1
1887: PPUSH
1888: LD_STRING 1Yak-Random1
1890: PPUSH
1891: CALL_OW 88
// end ;
1895: END
// every 0 0$1 trigger See ( 3 , RuB1 ) or See ( 3 , RuB2 ) or See ( 3 , RuB3 ) do
1896: LD_INT 3
1898: PPUSH
1899: LD_INT 18
1901: PPUSH
1902: CALL_OW 292
1906: PUSH
1907: LD_INT 3
1909: PPUSH
1910: LD_INT 85
1912: PPUSH
1913: CALL_OW 292
1917: OR
1918: PUSH
1919: LD_INT 3
1921: PPUSH
1922: LD_INT 90
1924: PPUSH
1925: CALL_OW 292
1929: OR
1930: IFFALSE 2015
1932: GO 1934
1934: DISABLE
// begin CenterOnXY ( 24 , 17 ) ;
1935: LD_INT 24
1937: PPUSH
1938: LD_INT 17
1940: PPUSH
1941: CALL_OW 84
// DialogueOn ;
1945: CALL_OW 6
// Say ( Constantin , 1M-01 ) ;
1949: LD_EXP 6
1953: PPUSH
1954: LD_STRING 1M-01
1956: PPUSH
1957: CALL_OW 88
// Say ( Yakotich , 1Yak-05 ) ;
1961: LD_EXP 1
1965: PPUSH
1966: LD_STRING 1Yak-05
1968: PPUSH
1969: CALL_OW 88
// Say ( Constantin , 1M-02 ) ;
1973: LD_EXP 6
1977: PPUSH
1978: LD_STRING 1M-02
1980: PPUSH
1981: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
1985: LD_INT 6
1987: PPUSH
1988: LD_INT 3
1990: PPUSH
1991: CALL_OW 343
// DialogueOff ;
1995: CALL_OW 7
// InGameOn ;
1999: CALL_OW 8
// ComMoveToArea ( Yakotich , Checkpoint ) ;
2003: LD_EXP 1
2007: PPUSH
2008: LD_INT 3
2010: PPUSH
2011: CALL_OW 113
// end ;
2015: END
// every 0 0$1 trigger FilterUnitsInArea ( Checkpoint , [ [ f_side , 3 ] ] ) do
2016: LD_INT 3
2018: PPUSH
2019: LD_INT 22
2021: PUSH
2022: LD_INT 3
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PUSH
2029: EMPTY
2030: LIST
2031: PPUSH
2032: CALL_OW 70
2036: IFFALSE 2422
2038: GO 2040
2040: DISABLE
// begin ComTurnUnit ( Yakotich , Mietek ) ;
2041: LD_EXP 1
2045: PPUSH
2046: LD_EXP 2
2050: PPUSH
2051: CALL_OW 119
// Say ( Yakotich , 1Yak-06 ) ;
2055: LD_EXP 1
2059: PPUSH
2060: LD_STRING 1Yak-06
2062: PPUSH
2063: CALL_OW 88
// ComTurnUnit ( Mietek , Yakotich ) ;
2067: LD_EXP 2
2071: PPUSH
2072: LD_EXP 1
2076: PPUSH
2077: CALL_OW 119
// Wait ( 0 0$1 ) ;
2081: LD_INT 35
2083: PPUSH
2084: CALL_OW 67
// Say ( Mietek , 1Ryn-01 ) ;
2088: LD_EXP 2
2092: PPUSH
2093: LD_STRING 1Ryn-01
2095: PPUSH
2096: CALL_OW 88
// Say ( Mietek , 1Ryn-02 ) ;
2100: LD_EXP 2
2104: PPUSH
2105: LD_STRING 1Ryn-02
2107: PPUSH
2108: CALL_OW 88
// Say ( Mietek , 1Ryn-03 ) ;
2112: LD_EXP 2
2116: PPUSH
2117: LD_STRING 1Ryn-03
2119: PPUSH
2120: CALL_OW 88
// Say ( Yakotich , 1Yak-07 ) ;
2124: LD_EXP 1
2128: PPUSH
2129: LD_STRING 1Yak-07
2131: PPUSH
2132: CALL_OW 88
// Say ( Mietek , 1Ryn-04 ) ;
2136: LD_EXP 2
2140: PPUSH
2141: LD_STRING 1Ryn-04
2143: PPUSH
2144: CALL_OW 88
// Say ( Mietek , 1Ryn-05 ) ;
2148: LD_EXP 2
2152: PPUSH
2153: LD_STRING 1Ryn-05
2155: PPUSH
2156: CALL_OW 88
// ComMoveXY ( Vasilij , 20 , 15 ) ;
2160: LD_EXP 4
2164: PPUSH
2165: LD_INT 20
2167: PPUSH
2168: LD_INT 15
2170: PPUSH
2171: CALL_OW 111
// AddComTurnUnit ( Vasilij , Yakotich ) ;
2175: LD_EXP 4
2179: PPUSH
2180: LD_EXP 1
2184: PPUSH
2185: CALL_OW 179
// Say ( Vasilij , 1Vas-01 ) ;
2189: LD_EXP 4
2193: PPUSH
2194: LD_STRING 1Vas-01
2196: PPUSH
2197: CALL_OW 88
// Say ( Vasilij , 1Vas-02 ) ;
2201: LD_EXP 4
2205: PPUSH
2206: LD_STRING 1Vas-02
2208: PPUSH
2209: CALL_OW 88
// Say ( Vasilij , 1Vas-03 ) ;
2213: LD_EXP 4
2217: PPUSH
2218: LD_STRING 1Vas-03
2220: PPUSH
2221: CALL_OW 88
// Say ( Vasilij , 1Vas-04 ) ;
2225: LD_EXP 4
2229: PPUSH
2230: LD_STRING 1Vas-04
2232: PPUSH
2233: CALL_OW 88
// Say ( Vasilij , 1Vas-05 ) ;
2237: LD_EXP 4
2241: PPUSH
2242: LD_STRING 1Vas-05
2244: PPUSH
2245: CALL_OW 88
// Say ( Yakotich , 1Yak-08 ) ;
2249: LD_EXP 1
2253: PPUSH
2254: LD_STRING 1Yak-08
2256: PPUSH
2257: CALL_OW 88
// Say ( Mietek , 1Ryn-06 ) ;
2261: LD_EXP 2
2265: PPUSH
2266: LD_STRING 1Ryn-06
2268: PPUSH
2269: CALL_OW 88
// Say ( Mietek , 1Ryn-07 ) ;
2273: LD_EXP 2
2277: PPUSH
2278: LD_STRING 1Ryn-07
2280: PPUSH
2281: CALL_OW 88
// Say ( Yakotich , 1Yak-09 ) ;
2285: LD_EXP 1
2289: PPUSH
2290: LD_STRING 1Yak-09
2292: PPUSH
2293: CALL_OW 88
// InGameOff ;
2297: CALL_OW 9
// yakotich_in_base = true ;
2301: LD_ADDR_EXP 28
2305: PUSH
2306: LD_INT 1
2308: ST_TO_ADDR
// ChangeMissionObjectives ( o4 ) ;
2309: LD_STRING o4
2311: PPUSH
2312: CALL_OW 337
// SetSide ( [ Mietek , Vasilij , Constantin , Michail , Boris , RuDep , RuB1 , RuB2 , RuB3 , RuOil ] , 3 ) ;
2316: LD_EXP 2
2320: PUSH
2321: LD_EXP 4
2325: PUSH
2326: LD_EXP 6
2330: PUSH
2331: LD_EXP 5
2335: PUSH
2336: LD_EXP 3
2340: PUSH
2341: LD_INT 15
2343: PUSH
2344: LD_INT 18
2346: PUSH
2347: LD_INT 85
2349: PUSH
2350: LD_INT 90
2352: PUSH
2353: LD_INT 16
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: LIST
2365: LIST
2366: LIST
2367: PPUSH
2368: LD_INT 3
2370: PPUSH
2371: CALL_OW 235
// SaveForQuickRestart ;
2375: CALL_OW 22
// Hint ( Balance ) ;
2379: LD_STRING Balance
2381: PPUSH
2382: CALL_OW 339
// Say ( Michail , 1Mich-01 ) ;
2386: LD_EXP 5
2390: PPUSH
2391: LD_STRING 1Mich-01
2393: PPUSH
2394: CALL_OW 88
// Say ( Michail , 1Mich-02 ) ;
2398: LD_EXP 5
2402: PPUSH
2403: LD_STRING 1Mich-02
2405: PPUSH
2406: CALL_OW 88
// Say ( Yakotich , 1Yak-10 ) ;
2410: LD_EXP 1
2414: PPUSH
2415: LD_STRING 1Yak-10
2417: PPUSH
2418: CALL_OW 88
// end ;
2422: END
// every 0 0$1 trigger yakotich_in_base = true do
2423: LD_EXP 28
2427: PUSH
2428: LD_INT 1
2430: EQUAL
2431: IFFALSE 2809
2433: GO 2435
2435: DISABLE
// begin Wait ( 5 5$0 ) ;
2436: LD_INT 10500
2438: PPUSH
2439: CALL_OW 67
// PlaceUnitArea ( Aleksandr , AleksandrSpawn , true ) ;
2443: LD_EXP 12
2447: PPUSH
2448: LD_INT 8
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: CALL_OW 49
// InGameOn ;
2458: CALL_OW 8
// DialogueOn ;
2462: CALL_OW 6
// SayRadio ( Aleksandr , 1Alek-Alek1 ) ;
2466: LD_EXP 12
2470: PPUSH
2471: LD_STRING 1Alek-Alek1
2473: PPUSH
2474: CALL_OW 94
// SayRadio ( Yakotich , 1Yak-Alek1 ) ;
2478: LD_EXP 1
2482: PPUSH
2483: LD_STRING 1Yak-Alek1
2485: PPUSH
2486: CALL_OW 94
// SayRadio ( Aleksandr , 1Alek-Alek2 ) ;
2490: LD_EXP 12
2494: PPUSH
2495: LD_STRING 1Alek-Alek2
2497: PPUSH
2498: CALL_OW 94
// SayRadio ( Mietek , 1Ryn-Alek1 ) ;
2502: LD_EXP 2
2506: PPUSH
2507: LD_STRING 1Ryn-Alek1
2509: PPUSH
2510: CALL_OW 94
// Say ( Mietek , 1Ryn-Alek2 ) ;
2514: LD_EXP 2
2518: PPUSH
2519: LD_STRING 1Ryn-Alek2
2521: PPUSH
2522: CALL_OW 88
// RevealFogArea ( 3 , River ) ;
2526: LD_INT 3
2528: PPUSH
2529: LD_INT 10
2531: PPUSH
2532: CALL_OW 332
// InGameOff ;
2536: CALL_OW 9
// DialogueOff ;
2540: CALL_OW 7
// Wait ( 2 2$0 ) ;
2544: LD_INT 4200
2546: PPUSH
2547: CALL_OW 67
// InGameOn ;
2551: CALL_OW 8
// DialogueOn ;
2555: CALL_OW 6
// SayRadio ( Maksim , 1Maks-Attack-01 ) ;
2559: LD_EXP 7
2563: PPUSH
2564: LD_STRING 1Maks-Attack-01
2566: PPUSH
2567: CALL_OW 94
// SayRadio ( Mietek , 1Ryn-Attack-01 ) ;
2571: LD_EXP 2
2575: PPUSH
2576: LD_STRING 1Ryn-Attack-01
2578: PPUSH
2579: CALL_OW 94
// SayRadio ( Maksim , 1Maks-Attack-02 ) ;
2583: LD_EXP 7
2587: PPUSH
2588: LD_STRING 1Maks-Attack-02
2590: PPUSH
2591: CALL_OW 94
// SayRadio ( Maksim , 1Maks-Attack-03 ) ;
2595: LD_EXP 7
2599: PPUSH
2600: LD_STRING 1Maks-Attack-03
2602: PPUSH
2603: CALL_OW 94
// Say ( Mietek , 1Ryn-Attack-02 ) ;
2607: LD_EXP 2
2611: PPUSH
2612: LD_STRING 1Ryn-Attack-02
2614: PPUSH
2615: CALL_OW 88
// ChangeMissionObjectives ( o10 ) ;
2619: LD_STRING o10
2621: PPUSH
2622: CALL_OW 337
// maksim_coming = true ;
2626: LD_ADDR_EXP 43
2630: PUSH
2631: LD_INT 1
2633: ST_TO_ADDR
// InGameOff ;
2634: CALL_OW 9
// DialogueOff ;
2638: CALL_OW 7
// Wait ( 2 2$0 ) ;
2642: LD_INT 4200
2644: PPUSH
2645: CALL_OW 67
// PlaceUnitArea ( Maksim , AmAttacks , false ) ;
2649: LD_EXP 7
2653: PPUSH
2654: LD_INT 6
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 49
// PlaceUnitArea ( Fiodor , AmAttacks , false ) ;
2664: LD_EXP 8
2668: PPUSH
2669: LD_INT 6
2671: PPUSH
2672: LD_INT 0
2674: PPUSH
2675: CALL_OW 49
// PlaceUnitArea ( Aleksiej , AmAttacks , false ) ;
2679: LD_EXP 11
2683: PPUSH
2684: LD_INT 6
2686: PPUSH
2687: LD_INT 0
2689: PPUSH
2690: CALL_OW 49
// PlaceUnitArea ( Pavel , AmAttacks , false ) ;
2694: LD_EXP 9
2698: PPUSH
2699: LD_INT 6
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// PlaceUnitArea ( Zakhar , AmAttacks , false ) ;
2709: LD_EXP 10
2713: PPUSH
2714: LD_INT 6
2716: PPUSH
2717: LD_INT 0
2719: PPUSH
2720: CALL_OW 49
// ComMoveToArea ( MaksimCrew , CheckPoint ) ;
2724: LD_EXP 14
2728: PPUSH
2729: LD_INT 3
2731: PPUSH
2732: CALL_OW 113
// Say ( Maksim , 1Maks-Attack-04 ) ;
2736: LD_EXP 7
2740: PPUSH
2741: LD_STRING 1Maks-Attack-04
2743: PPUSH
2744: CALL_OW 88
// Wait ( 0 0$8 ) ;
2748: LD_INT 280
2750: PPUSH
2751: CALL_OW 67
// InitAmerican ;
2755: CALL 1288 0 0
// Say ( AmCommander , 1Andrew-Attack ) ;
2759: LD_EXP 19
2763: PPUSH
2764: LD_STRING 1Andrew-Attack
2766: PPUSH
2767: CALL_OW 88
// ComMoveXY ( Americans , 48 , 42 ) ;
2771: LD_EXP 20
2775: PPUSH
2776: LD_INT 48
2778: PPUSH
2779: LD_INT 42
2781: PPUSH
2782: CALL_OW 111
// AddComAgressiveMove ( Americans , 26 , 16 ) ;
2786: LD_EXP 20
2790: PPUSH
2791: LD_INT 26
2793: PPUSH
2794: LD_INT 16
2796: PPUSH
2797: CALL_OW 174
// american_attack = true ;
2801: LD_ADDR_EXP 32
2805: PUSH
2806: LD_INT 1
2808: ST_TO_ADDR
// end ;
2809: END
// every 0 0$1 trigger american_attack = true and IsDead ( AmCommander ) do
2810: LD_EXP 32
2814: PUSH
2815: LD_INT 1
2817: EQUAL
2818: PUSH
2819: LD_EXP 19
2823: PPUSH
2824: CALL_OW 301
2828: AND
2829: IFFALSE 2874
2831: GO 2833
2833: DISABLE
// begin InGameOn ;
2834: CALL_OW 8
// Say ( Yakotich , 1Yak-Attack-01 ) ;
2838: LD_EXP 1
2842: PPUSH
2843: LD_STRING 1Yak-Attack-01
2845: PPUSH
2846: CALL_OW 88
// Say ( Yakotich , 1Yak-Attack-02 ) ;
2850: LD_EXP 1
2854: PPUSH
2855: LD_STRING 1Yak-Attack-02
2857: PPUSH
2858: CALL_OW 88
// end_of_the_mission = true ;
2862: LD_ADDR_EXP 36
2866: PUSH
2867: LD_INT 1
2869: ST_TO_ADDR
// InGameOff ;
2870: CALL_OW 9
// end ;
2874: END
// every 0 0$1 trigger end_of_the_mission = true and yakotich_in_base = true and IsDead ( AmCommander ) do
2875: LD_EXP 36
2879: PUSH
2880: LD_INT 1
2882: EQUAL
2883: PUSH
2884: LD_EXP 28
2888: PUSH
2889: LD_INT 1
2891: EQUAL
2892: AND
2893: PUSH
2894: LD_EXP 19
2898: PPUSH
2899: CALL_OW 301
2903: AND
2904: IFFALSE 3247
2906: GO 2908
2908: DISABLE
// begin AddMedal ( People , 1 ) ;
2909: LD_STRING People
2911: PPUSH
2912: LD_INT 1
2914: PPUSH
2915: CALL_OW 101
// if IsOk ( Aleksandr ) then
2919: LD_EXP 12
2923: PPUSH
2924: CALL_OW 302
2928: IFFALSE 2942
// AddMedal ( Aleksandr , 1 ) else
2930: LD_STRING Aleksandr
2932: PPUSH
2933: LD_INT 1
2935: PPUSH
2936: CALL_OW 101
2940: GO 2953
// AddMedal ( Aleksandr , - 1 ) ;
2942: LD_STRING Aleksandr
2944: PPUSH
2945: LD_INT 1
2947: NEG
2948: PPUSH
2949: CALL_OW 101
// if Researched ( 3 , 48 ) and Researched ( 3 , 47 ) and Researched ( 3 , 46 ) and vehicle_constructed = true then
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 48
2958: PPUSH
2959: CALL_OW 325
2963: PUSH
2964: LD_INT 3
2966: PPUSH
2967: LD_INT 47
2969: PPUSH
2970: CALL_OW 325
2974: AND
2975: PUSH
2976: LD_INT 3
2978: PPUSH
2979: LD_INT 46
2981: PPUSH
2982: CALL_OW 325
2986: AND
2987: PUSH
2988: LD_EXP 38
2992: PUSH
2993: LD_INT 1
2995: EQUAL
2996: AND
2997: IFFALSE 3011
// AddMedal ( Secondary , 1 ) else
2999: LD_STRING Secondary
3001: PPUSH
3002: LD_INT 1
3004: PPUSH
3005: CALL_OW 101
3009: GO 3022
// AddMedal ( Secondary , - 1 ) ;
3011: LD_STRING Secondary
3013: PPUSH
3014: LD_INT 1
3016: NEG
3017: PPUSH
3018: CALL_OW 101
// GiveMedals ( Medals ) ;
3022: LD_STRING Medals
3024: PPUSH
3025: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
3029: LD_INT 22
3031: PUSH
3032: LD_INT 3
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 23
3041: PUSH
3042: LD_INT 3
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: LD_INT 21
3051: PUSH
3052: LD_INT 1
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 69
3068: PPUSH
3069: CALL_OW 43
// SaveCharacters ( Yakotich , 01_Yakotich ) ;
3073: LD_EXP 1
3077: PPUSH
3078: LD_STRING 01_Yakotich
3080: PPUSH
3081: CALL_OW 38
// SaveCharacters ( Mietek , 01_Mietek ) ;
3085: LD_EXP 2
3089: PPUSH
3090: LD_STRING 01_Mietek
3092: PPUSH
3093: CALL_OW 38
// SaveCharacters ( Maksim , 01_Maksim ) ;
3097: LD_EXP 7
3101: PPUSH
3102: LD_STRING 01_Maksim
3104: PPUSH
3105: CALL_OW 38
// SaveCharacters ( Michail , 01_Michail ) ;
3109: LD_EXP 5
3113: PPUSH
3114: LD_STRING 01_Michail
3116: PPUSH
3117: CALL_OW 38
// SaveCharacters ( Vasilij , 01_Vasilij ) ;
3121: LD_EXP 4
3125: PPUSH
3126: LD_STRING 01_Vasilij
3128: PPUSH
3129: CALL_OW 38
// SaveCharacters ( Boris , 01_Boris ) ;
3133: LD_EXP 3
3137: PPUSH
3138: LD_STRING 01_Boris
3140: PPUSH
3141: CALL_OW 38
// SaveCharacters ( Constantin , 01_Constantin ) ;
3145: LD_EXP 6
3149: PPUSH
3150: LD_STRING 01_Constantin
3152: PPUSH
3153: CALL_OW 38
// SaveCharacters ( Fiodor , 01_Fiodor ) ;
3157: LD_EXP 8
3161: PPUSH
3162: LD_STRING 01_Fiodor
3164: PPUSH
3165: CALL_OW 38
// SaveCharacters ( Aleksiej , 01_Aleksiej ) ;
3169: LD_EXP 11
3173: PPUSH
3174: LD_STRING 01_Aleksiej
3176: PPUSH
3177: CALL_OW 38
// SaveCharacters ( Pavel , 01_Pavel ) ;
3181: LD_EXP 9
3185: PPUSH
3186: LD_STRING 01_Pavel
3188: PPUSH
3189: CALL_OW 38
// SaveCharacters ( Zakhar , 01_Zakhar ) ;
3193: LD_EXP 10
3197: PPUSH
3198: LD_STRING 01_Zakhar
3200: PPUSH
3201: CALL_OW 38
// if IsOk ( Aleksandr ) and GetSide ( Aleksandr ) = 3 then
3205: LD_EXP 12
3209: PPUSH
3210: CALL_OW 302
3214: PUSH
3215: LD_EXP 12
3219: PPUSH
3220: CALL_OW 255
3224: PUSH
3225: LD_INT 3
3227: EQUAL
3228: AND
3229: IFFALSE 3243
// SaveCharacters ( Aleksandr , 01_Aleksandr ) ;
3231: LD_EXP 12
3235: PPUSH
3236: LD_STRING 01_Aleksandr
3238: PPUSH
3239: CALL_OW 38
// YouWin ;
3243: CALL_OW 103
// end ;
3247: END
// every 0 0$1 trigger end_of_the_mission = true and yakotich_in_base = true and IsDead ( AmCommander ) do
3248: LD_EXP 36
3252: PUSH
3253: LD_INT 1
3255: EQUAL
3256: PUSH
3257: LD_EXP 28
3261: PUSH
3262: LD_INT 1
3264: EQUAL
3265: AND
3266: PUSH
3267: LD_EXP 19
3271: PPUSH
3272: CALL_OW 301
3276: AND
3277: IFFALSE 3326
3279: GO 3281
3281: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= 1 then
3282: LD_INT 22
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 21
3294: PUSH
3295: LD_INT 2
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PPUSH
3306: CALL_OW 69
3310: PUSH
3311: LD_INT 1
3313: GREATEREQUAL
3314: IFFALSE 3326
// begin SaveVariable ( 1 , 01_Vehicle ) ;
3316: LD_INT 1
3318: PPUSH
3319: LD_STRING 01_Vehicle
3321: PPUSH
3322: CALL_OW 39
// end ; end ; end_of_file
3326: END
// every 2 2$0 do
3327: GO 3329
3329: DISABLE
// begin CreateCratesArea ( rand ( 2 , 5 ) , BaseArea , true ) ;
3330: LD_INT 2
3332: PPUSH
3333: LD_INT 5
3335: PPUSH
3336: CALL_OW 12
3340: PPUSH
3341: LD_INT 9
3343: PPUSH
3344: LD_INT 1
3346: PPUSH
3347: CALL_OW 55
// end ; end_of_file
3351: END
// on UnitDestroyed ( un ) do begin if GetSide ( un ) = 1 then
3352: LD_VAR 0 1
3356: PPUSH
3357: CALL_OW 255
3361: PUSH
3362: LD_INT 1
3364: EQUAL
3365: IFFALSE 3393
// begin KillCounter := KillCounter + 1 ;
3367: LD_ADDR_EXP 21
3371: PUSH
3372: LD_EXP 21
3376: PUSH
3377: LD_INT 1
3379: PLUS
3380: ST_TO_ADDR
// SetAchievementEX ( ACH_HUNT , KillCounter ) ;
3381: LD_STRING ACH_HUNT
3383: PPUSH
3384: LD_EXP 21
3388: PPUSH
3389: CALL_OW 564
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
3393: LD_VAR 0 1
3397: PUSH
3398: LD_INT 22
3400: PUSH
3401: LD_INT 3
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: LD_INT 3
3410: PUSH
3411: LD_INT 23
3413: PUSH
3414: LD_INT 0
3416: PUSH
3417: EMPTY
3418: LIST
3419: LIST
3420: PUSH
3421: EMPTY
3422: LIST
3423: LIST
3424: PUSH
3425: LD_INT 21
3427: PUSH
3428: LD_INT 1
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: EMPTY
3436: LIST
3437: LIST
3438: LIST
3439: PPUSH
3440: CALL_OW 69
3444: IN
3445: IFFALSE 3454
// begin YouLost ( PeopleDead ) ;
3447: LD_STRING PeopleDead
3449: PPUSH
3450: CALL_OW 104
// end ; end ;
3454: PPOPN 1
3456: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_breastwork and breastwork_builded = false then
3457: LD_VAR 0 1
3461: PPUSH
3462: CALL_OW 266
3466: PUSH
3467: LD_INT 31
3469: EQUAL
3470: PUSH
3471: LD_EXP 41
3475: PUSH
3476: LD_INT 0
3478: EQUAL
3479: AND
3480: IFFALSE 3490
// begin breastwork_builded = true ;
3482: LD_ADDR_EXP 41
3486: PUSH
3487: LD_INT 1
3489: ST_TO_ADDR
// end ; if GetBType ( b ) = b_armoury and armoury_builded = false then
3490: LD_VAR 0 1
3494: PPUSH
3495: CALL_OW 266
3499: PUSH
3500: LD_INT 4
3502: EQUAL
3503: PUSH
3504: LD_EXP 42
3508: PUSH
3509: LD_INT 0
3511: EQUAL
3512: AND
3513: IFFALSE 3523
// begin armoury_builded = true ;
3515: LD_ADDR_EXP 42
3519: PUSH
3520: LD_INT 1
3522: ST_TO_ADDR
// end ; if GetBType ( b ) = b_workshop and GetSide ( b ) = 3 then
3523: LD_VAR 0 1
3527: PPUSH
3528: CALL_OW 266
3532: PUSH
3533: LD_INT 2
3535: EQUAL
3536: PUSH
3537: LD_VAR 0 1
3541: PPUSH
3542: CALL_OW 255
3546: PUSH
3547: LD_INT 3
3549: EQUAL
3550: AND
3551: IFFALSE 3565
// begin Say ( Michail , 1Mich-Workshop ) ;
3553: LD_EXP 5
3557: PPUSH
3558: LD_STRING 1Mich-Workshop
3560: PPUSH
3561: CALL_OW 88
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 3 then
3565: LD_VAR 0 1
3569: PPUSH
3570: CALL_OW 266
3574: PUSH
3575: LD_INT 6
3577: EQUAL
3578: PUSH
3579: LD_VAR 0 1
3583: PPUSH
3584: CALL_OW 255
3588: PUSH
3589: LD_INT 3
3591: EQUAL
3592: AND
3593: IFFALSE 3607
// begin Say ( Vasilij , 1Vas-06 ) ;
3595: LD_EXP 4
3599: PPUSH
3600: LD_STRING 1Vas-06
3602: PPUSH
3603: CALL_OW 88
// end ; end ;
3607: PPOPN 1
3609: END
// every 0 0$1 trigger breastwork_builded = true and armoury_builded = true do
3610: LD_EXP 41
3614: PUSH
3615: LD_INT 1
3617: EQUAL
3618: PUSH
3619: LD_EXP 42
3623: PUSH
3624: LD_INT 1
3626: EQUAL
3627: AND
3628: IFFALSE 3640
3630: GO 3632
3632: DISABLE
// begin SetAchievement ( ACH_FORT ) ;
3633: LD_STRING ACH_FORT
3635: PPUSH
3636: CALL_OW 543
// end ;
3640: END
// every 0 0$1 trigger See ( 3 , Aleksandr ) do
3641: LD_INT 3
3643: PPUSH
3644: LD_EXP 12
3648: PPUSH
3649: CALL_OW 292
3653: IFFALSE 3733
3655: GO 3657
3657: DISABLE
// begin DialogueOn ;
3658: CALL_OW 6
// Say ( Aleksandr , 1Alek-Alek3 ) ;
3662: LD_EXP 12
3666: PPUSH
3667: LD_STRING 1Alek-Alek3
3669: PPUSH
3670: CALL_OW 88
// Say ( Yakotich , 1Yak-Alek2 ) ;
3674: LD_EXP 1
3678: PPUSH
3679: LD_STRING 1Yak-Alek2
3681: PPUSH
3682: CALL_OW 88
// Say ( Aleksandr , 1Alek-Alek4 ) ;
3686: LD_EXP 12
3690: PPUSH
3691: LD_STRING 1Alek-Alek4
3693: PPUSH
3694: CALL_OW 88
// Say ( Mietek , 1Ryn-Alek3 ) ;
3698: LD_EXP 2
3702: PPUSH
3703: LD_STRING 1Ryn-Alek3
3705: PPUSH
3706: CALL_OW 88
// SetSide ( Aleksandr , 3 ) ;
3710: LD_EXP 12
3714: PPUSH
3715: LD_INT 3
3717: PPUSH
3718: CALL_OW 235
// DialogueOff ;
3722: CALL_OW 7
// SetAchievement ( ACH_ALEKSANDR ) ;
3726: LD_STRING ACH_ALEKSANDR
3728: PPUSH
3729: CALL_OW 543
// end ;
3733: END
// every 0 0$1 trigger Researched ( 3 , 46 ) do
3734: LD_INT 3
3736: PPUSH
3737: LD_INT 46
3739: PPUSH
3740: CALL_OW 325
3744: IFFALSE 3789
3746: GO 3748
3748: DISABLE
// begin DialogueOn ;
3749: CALL_OW 6
// Say ( Vasilij , 1Vas-Power-1 ) ;
3753: LD_EXP 4
3757: PPUSH
3758: LD_STRING 1Vas-Power-1
3760: PPUSH
3761: CALL_OW 88
// Say ( Yakotich , 1Yak-Power-1 ) ;
3765: LD_EXP 1
3769: PPUSH
3770: LD_STRING 1Yak-Power-1
3772: PPUSH
3773: CALL_OW 88
// DialogueOff ;
3777: CALL_OW 7
// oil_power_researched := true ;
3781: LD_ADDR_EXP 33
3785: PUSH
3786: LD_INT 1
3788: ST_TO_ADDR
// end ;
3789: END
// every 0 0$1 trigger Researched ( 3 , 47 ) do
3790: LD_INT 3
3792: PPUSH
3793: LD_INT 47
3795: PPUSH
3796: CALL_OW 325
3800: IFFALSE 3833
3802: GO 3804
3804: DISABLE
// begin DialogueOn ;
3805: CALL_OW 6
// Say ( Vasilij , 1Vas-Engine-1 ) ;
3809: LD_EXP 4
3813: PPUSH
3814: LD_STRING 1Vas-Engine-1
3816: PPUSH
3817: CALL_OW 88
// DialogueOff ;
3821: CALL_OW 7
// oil_engine_researched := true ;
3825: LD_ADDR_EXP 34
3829: PUSH
3830: LD_INT 1
3832: ST_TO_ADDR
// end ;
3833: END
// every 0 0$1 trigger Researched ( 3 , 48 ) do
3834: LD_INT 3
3836: PPUSH
3837: LD_INT 48
3839: PPUSH
3840: CALL_OW 325
3844: IFFALSE 3901
3846: GO 3848
3848: DISABLE
// begin DialogueOn ;
3849: CALL_OW 6
// Say ( Vasilij , 1Vas-Research-1 ) ;
3853: LD_EXP 4
3857: PPUSH
3858: LD_STRING 1Vas-Research-1
3860: PPUSH
3861: CALL_OW 88
// Say ( Yakotich , 1Yak-Research-1 ) ;
3865: LD_EXP 1
3869: PPUSH
3870: LD_STRING 1Yak-Research-1
3872: PPUSH
3873: CALL_OW 88
// Say ( Vasilij , 1Vas-Research-2 ) ;
3877: LD_EXP 4
3881: PPUSH
3882: LD_STRING 1Vas-Research-2
3884: PPUSH
3885: CALL_OW 88
// DialogueOff ;
3889: CALL_OW 7
// technology1_researched := true ;
3893: LD_ADDR_EXP 35
3897: PUSH
3898: LD_INT 1
3900: ST_TO_ADDR
// end ;
3901: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_side , 3 ] ] ) do
3902: LD_INT 21
3904: PUSH
3905: LD_INT 2
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PUSH
3912: LD_INT 22
3914: PUSH
3915: LD_INT 3
3917: PUSH
3918: EMPTY
3919: LIST
3920: LIST
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: PPUSH
3926: CALL_OW 69
3930: IFFALSE 4028
3932: GO 3934
3934: DISABLE
// begin InGameOn ;
3935: CALL_OW 8
// CenterOnUnits ( RuDep ) ;
3939: LD_INT 15
3941: PPUSH
3942: CALL_OW 85
// Wait ( 0 0$3 ) ;
3946: LD_INT 105
3948: PPUSH
3949: CALL_OW 67
// DialogueOn ;
3953: CALL_OW 6
// Say ( Michail , 1Mich-Tank-1 ) ;
3957: LD_EXP 5
3961: PPUSH
3962: LD_STRING 1Mich-Tank-1
3964: PPUSH
3965: CALL_OW 88
// Say ( Yakotich , 1Yak-Tank-1 ) ;
3969: LD_EXP 1
3973: PPUSH
3974: LD_STRING 1Yak-Tank-1
3976: PPUSH
3977: CALL_OW 88
// Say ( Michail , 1Mich-Tank-2 ) ;
3981: LD_EXP 5
3985: PPUSH
3986: LD_STRING 1Mich-Tank-2
3988: PPUSH
3989: CALL_OW 88
// Say ( Yakotich , 1Yak-Tank-2 ) ;
3993: LD_EXP 1
3997: PPUSH
3998: LD_STRING 1Yak-Tank-2
4000: PPUSH
4001: CALL_OW 88
// ChangeMissionObjectives ( o6 ) ;
4005: LD_STRING o6
4007: PPUSH
4008: CALL_OW 337
// DialogueOff ;
4012: CALL_OW 7
// InGameOff ;
4016: CALL_OW 9
// vehicle_constructed = true ;
4020: LD_ADDR_EXP 38
4024: PUSH
4025: LD_INT 1
4027: ST_TO_ADDR
// end ;
4028: END
// every 0 0$1 trigger technology1_researched = true and oil_engine_researched = true and oil_power_researched = true and vehicle_constructed = true do
4029: LD_EXP 35
4033: PUSH
4034: LD_INT 1
4036: EQUAL
4037: PUSH
4038: LD_EXP 34
4042: PUSH
4043: LD_INT 1
4045: EQUAL
4046: AND
4047: PUSH
4048: LD_EXP 33
4052: PUSH
4053: LD_INT 1
4055: EQUAL
4056: AND
4057: PUSH
4058: LD_EXP 38
4062: PUSH
4063: LD_INT 1
4065: EQUAL
4066: AND
4067: IFFALSE 4079
4069: GO 4071
4071: DISABLE
// begin ChangeMissionObjectives ( o5 ) ;
4072: LD_STRING o5
4074: PPUSH
4075: CALL_OW 337
// end ;
4079: END
// every 0 0$1 trigger IsInArea ( Maksim , BaseArea ) do
4080: LD_EXP 7
4084: PPUSH
4085: LD_INT 9
4087: PPUSH
4088: CALL_OW 308
4092: IFFALSE 4109
4094: GO 4096
4096: DISABLE
// begin SetSide ( MaksimCrew , 3 ) ;
4097: LD_EXP 14
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 235
// end ; end_of_file
4109: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export function InitGlobalVariables ; begin
4110: LD_INT 0
4112: PPUSH
// ar_miner := 81 ;
4113: LD_ADDR_EXP 51
4117: PUSH
4118: LD_INT 81
4120: ST_TO_ADDR
// ar_crane := 88 ;
4121: LD_ADDR_EXP 50
4125: PUSH
4126: LD_INT 88
4128: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4129: LD_ADDR_EXP 45
4133: PUSH
4134: LD_INT 89
4136: ST_TO_ADDR
// us_hack := 99 ;
4137: LD_ADDR_EXP 46
4141: PUSH
4142: LD_INT 99
4144: ST_TO_ADDR
// us_artillery := 97 ;
4145: LD_ADDR_EXP 47
4149: PUSH
4150: LD_INT 97
4152: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4153: LD_ADDR_EXP 48
4157: PUSH
4158: LD_INT 91
4160: ST_TO_ADDR
// ar_mortar := 92 ;
4161: LD_ADDR_EXP 49
4165: PUSH
4166: LD_INT 92
4168: ST_TO_ADDR
// ru_flamethrower := 93 ;
4169: LD_ADDR_EXP 52
4173: PUSH
4174: LD_INT 93
4176: ST_TO_ADDR
// ru_radar := 98 ;
4177: LD_ADDR_EXP 44
4181: PUSH
4182: LD_INT 98
4184: ST_TO_ADDR
// tech_Artillery := 80 ;
4185: LD_ADDR_EXP 53
4189: PUSH
4190: LD_INT 80
4192: ST_TO_ADDR
// tech_RadMat := 81 ;
4193: LD_ADDR_EXP 54
4197: PUSH
4198: LD_INT 81
4200: ST_TO_ADDR
// tech_BasicTools := 82 ;
4201: LD_ADDR_EXP 55
4205: PUSH
4206: LD_INT 82
4208: ST_TO_ADDR
// tech_Cargo := 83 ;
4209: LD_ADDR_EXP 56
4213: PUSH
4214: LD_INT 83
4216: ST_TO_ADDR
// tech_Track := 84 ;
4217: LD_ADDR_EXP 57
4221: PUSH
4222: LD_INT 84
4224: ST_TO_ADDR
// tech_Crane := 85 ;
4225: LD_ADDR_EXP 58
4229: PUSH
4230: LD_INT 85
4232: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4233: LD_ADDR_EXP 59
4237: PUSH
4238: LD_INT 86
4240: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4241: LD_ADDR_EXP 60
4245: PUSH
4246: LD_INT 87
4248: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4249: LD_ADDR_EXP 61
4253: PUSH
4254: LD_INT 88
4256: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
4257: LD_ADDR_EXP 62
4261: PUSH
4262: LD_INT 90
4264: ST_TO_ADDR
// end ; end_of_file
4265: LD_VAR 0 1
4269: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
// if exist_mode then
4274: LD_VAR 0 2
4278: IFFALSE 4303
// unit := CreateCharacter ( prefix & ident ) else
4280: LD_ADDR_VAR 0 5
4284: PUSH
4285: LD_VAR 0 3
4289: PUSH
4290: LD_VAR 0 1
4294: STR
4295: PPUSH
4296: CALL_OW 34
4300: ST_TO_ADDR
4301: GO 4318
// unit := NewCharacter ( ident ) ;
4303: LD_ADDR_VAR 0 5
4307: PUSH
4308: LD_VAR 0 1
4312: PPUSH
4313: CALL_OW 25
4317: ST_TO_ADDR
// result := unit ;
4318: LD_ADDR_VAR 0 4
4322: PUSH
4323: LD_VAR 0 5
4327: ST_TO_ADDR
// end ;
4328: LD_VAR 0 4
4332: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
4333: LD_INT 0
4335: PPUSH
4336: PPUSH
// if not side or not nation then
4337: LD_VAR 0 1
4341: NOT
4342: PUSH
4343: LD_VAR 0 2
4347: NOT
4348: OR
4349: IFFALSE 4353
// exit ;
4351: GO 5121
// case nation of nation_american :
4353: LD_VAR 0 2
4357: PUSH
4358: LD_INT 1
4360: DOUBLE
4361: EQUAL
4362: IFTRUE 4366
4364: GO 4580
4366: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
4367: LD_ADDR_VAR 0 4
4371: PUSH
4372: LD_INT 35
4374: PUSH
4375: LD_INT 45
4377: PUSH
4378: LD_INT 46
4380: PUSH
4381: LD_INT 47
4383: PUSH
4384: LD_INT 82
4386: PUSH
4387: LD_INT 83
4389: PUSH
4390: LD_INT 84
4392: PUSH
4393: LD_INT 85
4395: PUSH
4396: LD_INT 86
4398: PUSH
4399: LD_INT 1
4401: PUSH
4402: LD_INT 2
4404: PUSH
4405: LD_INT 6
4407: PUSH
4408: LD_INT 15
4410: PUSH
4411: LD_INT 16
4413: PUSH
4414: LD_INT 7
4416: PUSH
4417: LD_INT 12
4419: PUSH
4420: LD_INT 13
4422: PUSH
4423: LD_INT 10
4425: PUSH
4426: LD_INT 14
4428: PUSH
4429: LD_INT 20
4431: PUSH
4432: LD_INT 21
4434: PUSH
4435: LD_INT 22
4437: PUSH
4438: LD_INT 25
4440: PUSH
4441: LD_INT 32
4443: PUSH
4444: LD_INT 27
4446: PUSH
4447: LD_INT 36
4449: PUSH
4450: LD_INT 69
4452: PUSH
4453: LD_INT 39
4455: PUSH
4456: LD_INT 34
4458: PUSH
4459: LD_INT 40
4461: PUSH
4462: LD_INT 48
4464: PUSH
4465: LD_INT 49
4467: PUSH
4468: LD_INT 50
4470: PUSH
4471: LD_INT 51
4473: PUSH
4474: LD_INT 52
4476: PUSH
4477: LD_INT 53
4479: PUSH
4480: LD_INT 54
4482: PUSH
4483: LD_INT 55
4485: PUSH
4486: LD_INT 56
4488: PUSH
4489: LD_INT 57
4491: PUSH
4492: LD_INT 58
4494: PUSH
4495: LD_INT 59
4497: PUSH
4498: LD_INT 60
4500: PUSH
4501: LD_INT 61
4503: PUSH
4504: LD_INT 62
4506: PUSH
4507: LD_INT 80
4509: PUSH
4510: LD_INT 82
4512: PUSH
4513: LD_INT 83
4515: PUSH
4516: LD_INT 84
4518: PUSH
4519: LD_INT 85
4521: PUSH
4522: LD_INT 86
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: LIST
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: ST_TO_ADDR
4578: GO 5045
4580: LD_INT 2
4582: DOUBLE
4583: EQUAL
4584: IFTRUE 4588
4586: GO 4814
4588: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
4589: LD_ADDR_VAR 0 4
4593: PUSH
4594: LD_INT 35
4596: PUSH
4597: LD_INT 45
4599: PUSH
4600: LD_INT 46
4602: PUSH
4603: LD_INT 47
4605: PUSH
4606: LD_INT 82
4608: PUSH
4609: LD_INT 83
4611: PUSH
4612: LD_INT 84
4614: PUSH
4615: LD_INT 85
4617: PUSH
4618: LD_INT 87
4620: PUSH
4621: LD_INT 70
4623: PUSH
4624: LD_INT 1
4626: PUSH
4627: LD_INT 11
4629: PUSH
4630: LD_INT 3
4632: PUSH
4633: LD_INT 4
4635: PUSH
4636: LD_INT 5
4638: PUSH
4639: LD_INT 6
4641: PUSH
4642: LD_INT 15
4644: PUSH
4645: LD_INT 18
4647: PUSH
4648: LD_INT 7
4650: PUSH
4651: LD_INT 17
4653: PUSH
4654: LD_INT 8
4656: PUSH
4657: LD_INT 20
4659: PUSH
4660: LD_INT 21
4662: PUSH
4663: LD_INT 22
4665: PUSH
4666: LD_INT 72
4668: PUSH
4669: LD_INT 26
4671: PUSH
4672: LD_INT 69
4674: PUSH
4675: LD_INT 39
4677: PUSH
4678: LD_INT 40
4680: PUSH
4681: LD_INT 41
4683: PUSH
4684: LD_INT 42
4686: PUSH
4687: LD_INT 43
4689: PUSH
4690: LD_INT 48
4692: PUSH
4693: LD_INT 49
4695: PUSH
4696: LD_INT 50
4698: PUSH
4699: LD_INT 51
4701: PUSH
4702: LD_INT 52
4704: PUSH
4705: LD_INT 53
4707: PUSH
4708: LD_INT 54
4710: PUSH
4711: LD_INT 55
4713: PUSH
4714: LD_INT 56
4716: PUSH
4717: LD_INT 60
4719: PUSH
4720: LD_INT 61
4722: PUSH
4723: LD_INT 62
4725: PUSH
4726: LD_INT 66
4728: PUSH
4729: LD_INT 67
4731: PUSH
4732: LD_INT 68
4734: PUSH
4735: LD_INT 81
4737: PUSH
4738: LD_INT 82
4740: PUSH
4741: LD_INT 83
4743: PUSH
4744: LD_INT 84
4746: PUSH
4747: LD_INT 85
4749: PUSH
4750: LD_INT 87
4752: PUSH
4753: LD_INT 88
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: LIST
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: ST_TO_ADDR
4812: GO 5045
4814: LD_INT 3
4816: DOUBLE
4817: EQUAL
4818: IFTRUE 4822
4820: GO 5044
4822: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4823: LD_ADDR_VAR 0 4
4827: PUSH
4828: LD_INT 46
4830: PUSH
4831: LD_INT 47
4833: PUSH
4834: LD_INT 1
4836: PUSH
4837: LD_INT 2
4839: PUSH
4840: LD_INT 82
4842: PUSH
4843: LD_INT 83
4845: PUSH
4846: LD_INT 84
4848: PUSH
4849: LD_INT 85
4851: PUSH
4852: LD_INT 86
4854: PUSH
4855: LD_INT 11
4857: PUSH
4858: LD_INT 9
4860: PUSH
4861: LD_INT 20
4863: PUSH
4864: LD_INT 19
4866: PUSH
4867: LD_INT 21
4869: PUSH
4870: LD_INT 24
4872: PUSH
4873: LD_INT 22
4875: PUSH
4876: LD_INT 25
4878: PUSH
4879: LD_INT 28
4881: PUSH
4882: LD_INT 29
4884: PUSH
4885: LD_INT 30
4887: PUSH
4888: LD_INT 31
4890: PUSH
4891: LD_INT 37
4893: PUSH
4894: LD_INT 38
4896: PUSH
4897: LD_INT 32
4899: PUSH
4900: LD_INT 27
4902: PUSH
4903: LD_INT 33
4905: PUSH
4906: LD_INT 69
4908: PUSH
4909: LD_INT 39
4911: PUSH
4912: LD_INT 34
4914: PUSH
4915: LD_INT 40
4917: PUSH
4918: LD_INT 71
4920: PUSH
4921: LD_INT 23
4923: PUSH
4924: LD_INT 44
4926: PUSH
4927: LD_INT 48
4929: PUSH
4930: LD_INT 49
4932: PUSH
4933: LD_INT 50
4935: PUSH
4936: LD_INT 51
4938: PUSH
4939: LD_INT 52
4941: PUSH
4942: LD_INT 53
4944: PUSH
4945: LD_INT 54
4947: PUSH
4948: LD_INT 55
4950: PUSH
4951: LD_INT 56
4953: PUSH
4954: LD_INT 57
4956: PUSH
4957: LD_INT 58
4959: PUSH
4960: LD_INT 59
4962: PUSH
4963: LD_INT 63
4965: PUSH
4966: LD_INT 64
4968: PUSH
4969: LD_INT 65
4971: PUSH
4972: LD_INT 82
4974: PUSH
4975: LD_INT 83
4977: PUSH
4978: LD_INT 84
4980: PUSH
4981: LD_INT 85
4983: PUSH
4984: LD_INT 86
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: ST_TO_ADDR
5042: GO 5045
5044: POP
// if state > - 1 and state < 3 then
5045: LD_VAR 0 3
5049: PUSH
5050: LD_INT 1
5052: NEG
5053: GREATER
5054: PUSH
5055: LD_VAR 0 3
5059: PUSH
5060: LD_INT 3
5062: LESS
5063: AND
5064: IFFALSE 5121
// for i in result do
5066: LD_ADDR_VAR 0 5
5070: PUSH
5071: LD_VAR 0 4
5075: PUSH
5076: FOR_IN
5077: IFFALSE 5119
// if GetTech ( i , side ) <> state then
5079: LD_VAR 0 5
5083: PPUSH
5084: LD_VAR 0 1
5088: PPUSH
5089: CALL_OW 321
5093: PUSH
5094: LD_VAR 0 3
5098: NONEQUAL
5099: IFFALSE 5117
// result := result diff i ;
5101: LD_ADDR_VAR 0 4
5105: PUSH
5106: LD_VAR 0 4
5110: PUSH
5111: LD_VAR 0 5
5115: DIFF
5116: ST_TO_ADDR
5117: GO 5076
5119: POP
5120: POP
// end ;
5121: LD_VAR 0 4
5125: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
5126: LD_INT 0
5128: PPUSH
5129: PPUSH
5130: PPUSH
// result := true ;
5131: LD_ADDR_VAR 0 3
5135: PUSH
5136: LD_INT 1
5138: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
5139: LD_ADDR_VAR 0 5
5143: PUSH
5144: LD_VAR 0 2
5148: PPUSH
5149: CALL_OW 480
5153: ST_TO_ADDR
// if not tmp then
5154: LD_VAR 0 5
5158: NOT
5159: IFFALSE 5163
// exit ;
5161: GO 5212
// for i in tmp do
5163: LD_ADDR_VAR 0 4
5167: PUSH
5168: LD_VAR 0 5
5172: PUSH
5173: FOR_IN
5174: IFFALSE 5210
// if GetTech ( i , side ) <> state_researched then
5176: LD_VAR 0 4
5180: PPUSH
5181: LD_VAR 0 1
5185: PPUSH
5186: CALL_OW 321
5190: PUSH
5191: LD_INT 2
5193: NONEQUAL
5194: IFFALSE 5208
// begin result := false ;
5196: LD_ADDR_VAR 0 3
5200: PUSH
5201: LD_INT 0
5203: ST_TO_ADDR
// exit ;
5204: POP
5205: POP
5206: GO 5212
// end ;
5208: GO 5173
5210: POP
5211: POP
// end ;
5212: LD_VAR 0 3
5216: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
5217: LD_INT 0
5219: PPUSH
5220: PPUSH
5221: PPUSH
5222: PPUSH
5223: PPUSH
5224: PPUSH
5225: PPUSH
5226: PPUSH
5227: PPUSH
5228: PPUSH
5229: PPUSH
5230: PPUSH
5231: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
5232: LD_VAR 0 1
5236: NOT
5237: PUSH
5238: LD_VAR 0 1
5242: PPUSH
5243: CALL_OW 257
5247: PUSH
5248: LD_INT 9
5250: NONEQUAL
5251: OR
5252: IFFALSE 5256
// exit ;
5254: GO 5829
// side := GetSide ( unit ) ;
5256: LD_ADDR_VAR 0 9
5260: PUSH
5261: LD_VAR 0 1
5265: PPUSH
5266: CALL_OW 255
5270: ST_TO_ADDR
// tech_space := tech_spacanom ;
5271: LD_ADDR_VAR 0 12
5275: PUSH
5276: LD_INT 29
5278: ST_TO_ADDR
// tech_time := tech_taurad ;
5279: LD_ADDR_VAR 0 13
5283: PUSH
5284: LD_INT 28
5286: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
5287: LD_ADDR_VAR 0 11
5291: PUSH
5292: LD_VAR 0 1
5296: PPUSH
5297: CALL_OW 310
5301: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
5302: LD_VAR 0 11
5306: PPUSH
5307: CALL_OW 247
5311: PUSH
5312: LD_INT 2
5314: EQUAL
5315: IFFALSE 5319
// exit ;
5317: GO 5829
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5319: LD_ADDR_VAR 0 8
5323: PUSH
5324: LD_INT 81
5326: PUSH
5327: LD_VAR 0 9
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 3
5338: PUSH
5339: LD_INT 21
5341: PUSH
5342: LD_INT 3
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PPUSH
5357: CALL_OW 69
5361: ST_TO_ADDR
// if not tmp then
5362: LD_VAR 0 8
5366: NOT
5367: IFFALSE 5371
// exit ;
5369: GO 5829
// if in_unit then
5371: LD_VAR 0 11
5375: IFFALSE 5399
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
5377: LD_ADDR_VAR 0 10
5381: PUSH
5382: LD_VAR 0 8
5386: PPUSH
5387: LD_VAR 0 11
5391: PPUSH
5392: CALL_OW 74
5396: ST_TO_ADDR
5397: GO 5419
// enemy := NearestUnitToUnit ( tmp , unit ) ;
5399: LD_ADDR_VAR 0 10
5403: PUSH
5404: LD_VAR 0 8
5408: PPUSH
5409: LD_VAR 0 1
5413: PPUSH
5414: CALL_OW 74
5418: ST_TO_ADDR
// if not enemy then
5419: LD_VAR 0 10
5423: NOT
5424: IFFALSE 5428
// exit ;
5426: GO 5829
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5428: LD_VAR 0 11
5432: PUSH
5433: LD_VAR 0 11
5437: PPUSH
5438: LD_VAR 0 10
5442: PPUSH
5443: CALL_OW 296
5447: PUSH
5448: LD_INT 13
5450: GREATER
5451: AND
5452: PUSH
5453: LD_VAR 0 1
5457: PPUSH
5458: LD_VAR 0 10
5462: PPUSH
5463: CALL_OW 296
5467: PUSH
5468: LD_INT 12
5470: GREATER
5471: OR
5472: IFFALSE 5476
// exit ;
5474: GO 5829
// missile := [ 1 ] ;
5476: LD_ADDR_VAR 0 14
5480: PUSH
5481: LD_INT 1
5483: PUSH
5484: EMPTY
5485: LIST
5486: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5487: LD_VAR 0 9
5491: PPUSH
5492: LD_VAR 0 12
5496: PPUSH
5497: CALL_OW 325
5501: IFFALSE 5530
// missile := Replace ( missile , missile + 1 , 2 ) ;
5503: LD_ADDR_VAR 0 14
5507: PUSH
5508: LD_VAR 0 14
5512: PPUSH
5513: LD_VAR 0 14
5517: PUSH
5518: LD_INT 1
5520: PLUS
5521: PPUSH
5522: LD_INT 2
5524: PPUSH
5525: CALL_OW 1
5529: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5530: LD_VAR 0 9
5534: PPUSH
5535: LD_VAR 0 13
5539: PPUSH
5540: CALL_OW 325
5544: PUSH
5545: LD_VAR 0 10
5549: PPUSH
5550: CALL_OW 255
5554: PPUSH
5555: LD_VAR 0 13
5559: PPUSH
5560: CALL_OW 325
5564: NOT
5565: AND
5566: IFFALSE 5595
// missile := Replace ( missile , missile + 1 , 3 ) ;
5568: LD_ADDR_VAR 0 14
5572: PUSH
5573: LD_VAR 0 14
5577: PPUSH
5578: LD_VAR 0 14
5582: PUSH
5583: LD_INT 1
5585: PLUS
5586: PPUSH
5587: LD_INT 3
5589: PPUSH
5590: CALL_OW 1
5594: ST_TO_ADDR
// if missile < 2 then
5595: LD_VAR 0 14
5599: PUSH
5600: LD_INT 2
5602: LESS
5603: IFFALSE 5607
// exit ;
5605: GO 5829
// x := GetX ( enemy ) ;
5607: LD_ADDR_VAR 0 4
5611: PUSH
5612: LD_VAR 0 10
5616: PPUSH
5617: CALL_OW 250
5621: ST_TO_ADDR
// y := GetY ( enemy ) ;
5622: LD_ADDR_VAR 0 5
5626: PUSH
5627: LD_VAR 0 10
5631: PPUSH
5632: CALL_OW 251
5636: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5637: LD_ADDR_VAR 0 6
5641: PUSH
5642: LD_VAR 0 4
5646: PUSH
5647: LD_INT 1
5649: NEG
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: CALL_OW 12
5658: PLUS
5659: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5660: LD_ADDR_VAR 0 7
5664: PUSH
5665: LD_VAR 0 5
5669: PUSH
5670: LD_INT 1
5672: NEG
5673: PPUSH
5674: LD_INT 1
5676: PPUSH
5677: CALL_OW 12
5681: PLUS
5682: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5683: LD_VAR 0 6
5687: PPUSH
5688: LD_VAR 0 7
5692: PPUSH
5693: CALL_OW 488
5697: NOT
5698: IFFALSE 5720
// begin _x := x ;
5700: LD_ADDR_VAR 0 6
5704: PUSH
5705: LD_VAR 0 4
5709: ST_TO_ADDR
// _y := y ;
5710: LD_ADDR_VAR 0 7
5714: PUSH
5715: LD_VAR 0 5
5719: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5720: LD_ADDR_VAR 0 3
5724: PUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_VAR 0 14
5732: PPUSH
5733: CALL_OW 12
5737: ST_TO_ADDR
// case i of 1 :
5738: LD_VAR 0 3
5742: PUSH
5743: LD_INT 1
5745: DOUBLE
5746: EQUAL
5747: IFTRUE 5751
5749: GO 5768
5751: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5752: LD_VAR 0 1
5756: PPUSH
5757: LD_VAR 0 10
5761: PPUSH
5762: CALL_OW 115
5766: GO 5829
5768: LD_INT 2
5770: DOUBLE
5771: EQUAL
5772: IFTRUE 5776
5774: GO 5798
5776: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5777: LD_VAR 0 1
5781: PPUSH
5782: LD_VAR 0 6
5786: PPUSH
5787: LD_VAR 0 7
5791: PPUSH
5792: CALL_OW 153
5796: GO 5829
5798: LD_INT 3
5800: DOUBLE
5801: EQUAL
5802: IFTRUE 5806
5804: GO 5828
5806: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5807: LD_VAR 0 1
5811: PPUSH
5812: LD_VAR 0 6
5816: PPUSH
5817: LD_VAR 0 7
5821: PPUSH
5822: CALL_OW 154
5826: GO 5829
5828: POP
// end ;
5829: LD_VAR 0 2
5833: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5834: LD_INT 0
5836: PPUSH
5837: PPUSH
5838: PPUSH
5839: PPUSH
5840: PPUSH
5841: PPUSH
// if not unit or not building then
5842: LD_VAR 0 1
5846: NOT
5847: PUSH
5848: LD_VAR 0 2
5852: NOT
5853: OR
5854: IFFALSE 5858
// exit ;
5856: GO 6016
// x := GetX ( building ) ;
5858: LD_ADDR_VAR 0 5
5862: PUSH
5863: LD_VAR 0 2
5867: PPUSH
5868: CALL_OW 250
5872: ST_TO_ADDR
// y := GetY ( building ) ;
5873: LD_ADDR_VAR 0 6
5877: PUSH
5878: LD_VAR 0 2
5882: PPUSH
5883: CALL_OW 251
5887: ST_TO_ADDR
// for i = 0 to 5 do
5888: LD_ADDR_VAR 0 4
5892: PUSH
5893: DOUBLE
5894: LD_INT 0
5896: DEC
5897: ST_TO_ADDR
5898: LD_INT 5
5900: PUSH
5901: FOR_TO
5902: IFFALSE 6014
// begin _x := ShiftX ( x , i , 3 ) ;
5904: LD_ADDR_VAR 0 7
5908: PUSH
5909: LD_VAR 0 5
5913: PPUSH
5914: LD_VAR 0 4
5918: PPUSH
5919: LD_INT 3
5921: PPUSH
5922: CALL_OW 272
5926: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5927: LD_ADDR_VAR 0 8
5931: PUSH
5932: LD_VAR 0 6
5936: PPUSH
5937: LD_VAR 0 4
5941: PPUSH
5942: LD_INT 3
5944: PPUSH
5945: CALL_OW 273
5949: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5950: LD_VAR 0 7
5954: PPUSH
5955: LD_VAR 0 8
5959: PPUSH
5960: CALL_OW 488
5964: NOT
5965: IFFALSE 5969
// continue ;
5967: GO 5901
// if HexInfo ( _x , _y ) = 0 then
5969: LD_VAR 0 7
5973: PPUSH
5974: LD_VAR 0 8
5978: PPUSH
5979: CALL_OW 428
5983: PUSH
5984: LD_INT 0
5986: EQUAL
5987: IFFALSE 6012
// begin ComMoveXY ( unit , _x , _y ) ;
5989: LD_VAR 0 1
5993: PPUSH
5994: LD_VAR 0 7
5998: PPUSH
5999: LD_VAR 0 8
6003: PPUSH
6004: CALL_OW 111
// exit ;
6008: POP
6009: POP
6010: GO 6016
// end ; end ;
6012: GO 5901
6014: POP
6015: POP
// end ;
6016: LD_VAR 0 3
6020: RET
// export function ScanBase ( side , base_area ) ; begin
6021: LD_INT 0
6023: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
6024: LD_ADDR_VAR 0 3
6028: PUSH
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_INT 81
6036: PUSH
6037: LD_VAR 0 1
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PPUSH
6046: CALL_OW 70
6050: ST_TO_ADDR
// end ;
6051: LD_VAR 0 3
6055: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
6056: LD_INT 0
6058: PPUSH
6059: PPUSH
6060: PPUSH
6061: PPUSH
// result := false ;
6062: LD_ADDR_VAR 0 2
6066: PUSH
6067: LD_INT 0
6069: ST_TO_ADDR
// side := GetSide ( unit ) ;
6070: LD_ADDR_VAR 0 3
6074: PUSH
6075: LD_VAR 0 1
6079: PPUSH
6080: CALL_OW 255
6084: ST_TO_ADDR
// nat := GetNation ( unit ) ;
6085: LD_ADDR_VAR 0 4
6089: PUSH
6090: LD_VAR 0 1
6094: PPUSH
6095: CALL_OW 248
6099: ST_TO_ADDR
// case nat of 1 :
6100: LD_VAR 0 4
6104: PUSH
6105: LD_INT 1
6107: DOUBLE
6108: EQUAL
6109: IFTRUE 6113
6111: GO 6124
6113: POP
// tech := tech_lassight ; 2 :
6114: LD_ADDR_VAR 0 5
6118: PUSH
6119: LD_INT 12
6121: ST_TO_ADDR
6122: GO 6163
6124: LD_INT 2
6126: DOUBLE
6127: EQUAL
6128: IFTRUE 6132
6130: GO 6143
6132: POP
// tech := tech_mortar ; 3 :
6133: LD_ADDR_VAR 0 5
6137: PUSH
6138: LD_INT 41
6140: ST_TO_ADDR
6141: GO 6163
6143: LD_INT 3
6145: DOUBLE
6146: EQUAL
6147: IFTRUE 6151
6149: GO 6162
6151: POP
// tech := tech_bazooka ; end ;
6152: LD_ADDR_VAR 0 5
6156: PUSH
6157: LD_INT 44
6159: ST_TO_ADDR
6160: GO 6163
6162: POP
// if Researched ( side , tech ) then
6163: LD_VAR 0 3
6167: PPUSH
6168: LD_VAR 0 5
6172: PPUSH
6173: CALL_OW 325
6177: IFFALSE 6204
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
6179: LD_ADDR_VAR 0 2
6183: PUSH
6184: LD_INT 5
6186: PUSH
6187: LD_INT 8
6189: PUSH
6190: LD_INT 9
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: LIST
6197: PUSH
6198: LD_VAR 0 4
6202: ARRAY
6203: ST_TO_ADDR
// end ;
6204: LD_VAR 0 2
6208: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
6209: LD_INT 0
6211: PPUSH
6212: PPUSH
6213: PPUSH
// if not mines then
6214: LD_VAR 0 2
6218: NOT
6219: IFFALSE 6223
// exit ;
6221: GO 6367
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6223: LD_ADDR_VAR 0 5
6227: PUSH
6228: LD_INT 81
6230: PUSH
6231: LD_VAR 0 1
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: LD_INT 21
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PPUSH
6261: CALL_OW 69
6265: ST_TO_ADDR
// for i in mines do
6266: LD_ADDR_VAR 0 4
6270: PUSH
6271: LD_VAR 0 2
6275: PUSH
6276: FOR_IN
6277: IFFALSE 6365
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
6279: LD_VAR 0 4
6283: PUSH
6284: LD_INT 1
6286: ARRAY
6287: PPUSH
6288: LD_VAR 0 4
6292: PUSH
6293: LD_INT 2
6295: ARRAY
6296: PPUSH
6297: CALL_OW 458
6301: NOT
6302: IFFALSE 6306
// continue ;
6304: GO 6276
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
6306: LD_VAR 0 4
6310: PUSH
6311: LD_INT 1
6313: ARRAY
6314: PPUSH
6315: LD_VAR 0 4
6319: PUSH
6320: LD_INT 2
6322: ARRAY
6323: PPUSH
6324: CALL_OW 428
6328: PUSH
6329: LD_VAR 0 5
6333: IN
6334: IFFALSE 6363
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
6336: LD_VAR 0 4
6340: PUSH
6341: LD_INT 1
6343: ARRAY
6344: PPUSH
6345: LD_VAR 0 4
6349: PUSH
6350: LD_INT 2
6352: ARRAY
6353: PPUSH
6354: LD_VAR 0 1
6358: PPUSH
6359: CALL_OW 456
// end ;
6363: GO 6276
6365: POP
6366: POP
// end ;
6367: LD_VAR 0 3
6371: RET
// export function Count ( array ) ; var i ; begin
6372: LD_INT 0
6374: PPUSH
6375: PPUSH
// result := 0 ;
6376: LD_ADDR_VAR 0 2
6380: PUSH
6381: LD_INT 0
6383: ST_TO_ADDR
// for i in array do
6384: LD_ADDR_VAR 0 3
6388: PUSH
6389: LD_VAR 0 1
6393: PUSH
6394: FOR_IN
6395: IFFALSE 6419
// if i then
6397: LD_VAR 0 3
6401: IFFALSE 6417
// result := result + 1 ;
6403: LD_ADDR_VAR 0 2
6407: PUSH
6408: LD_VAR 0 2
6412: PUSH
6413: LD_INT 1
6415: PLUS
6416: ST_TO_ADDR
6417: GO 6394
6419: POP
6420: POP
// end ;
6421: LD_VAR 0 2
6425: RET
// export function IsEmpty ( building ) ; begin
6426: LD_INT 0
6428: PPUSH
// if not building then
6429: LD_VAR 0 1
6433: NOT
6434: IFFALSE 6438
// exit ;
6436: GO 6481
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6438: LD_ADDR_VAR 0 2
6442: PUSH
6443: LD_VAR 0 1
6447: PUSH
6448: LD_INT 22
6450: PUSH
6451: LD_VAR 0 1
6455: PPUSH
6456: CALL_OW 255
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: LD_INT 58
6467: PUSH
6468: EMPTY
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PPUSH
6475: CALL_OW 69
6479: IN
6480: ST_TO_ADDR
// end ;
6481: LD_VAR 0 2
6485: RET
// export function IsNotFull ( building ) ; var places ; begin
6486: LD_INT 0
6488: PPUSH
6489: PPUSH
// if not building then
6490: LD_VAR 0 1
6494: NOT
6495: IFFALSE 6499
// exit ;
6497: GO 6670
// result := false ;
6499: LD_ADDR_VAR 0 2
6503: PUSH
6504: LD_INT 0
6506: ST_TO_ADDR
// places := 0 ;
6507: LD_ADDR_VAR 0 3
6511: PUSH
6512: LD_INT 0
6514: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
6515: LD_VAR 0 1
6519: PPUSH
6520: CALL_OW 266
6524: PUSH
6525: LD_INT 0
6527: DOUBLE
6528: EQUAL
6529: IFTRUE 6587
6531: LD_INT 1
6533: DOUBLE
6534: EQUAL
6535: IFTRUE 6587
6537: LD_INT 6
6539: DOUBLE
6540: EQUAL
6541: IFTRUE 6587
6543: LD_INT 7
6545: DOUBLE
6546: EQUAL
6547: IFTRUE 6587
6549: LD_INT 8
6551: DOUBLE
6552: EQUAL
6553: IFTRUE 6587
6555: LD_INT 4
6557: DOUBLE
6558: EQUAL
6559: IFTRUE 6587
6561: LD_INT 5
6563: DOUBLE
6564: EQUAL
6565: IFTRUE 6587
6567: LD_INT 2
6569: DOUBLE
6570: EQUAL
6571: IFTRUE 6587
6573: LD_INT 3
6575: DOUBLE
6576: EQUAL
6577: IFTRUE 6587
6579: LD_INT 35
6581: DOUBLE
6582: EQUAL
6583: IFTRUE 6587
6585: GO 6598
6587: POP
// places := 6 ; b_bunker , b_breastwork :
6588: LD_ADDR_VAR 0 3
6592: PUSH
6593: LD_INT 6
6595: ST_TO_ADDR
6596: GO 6643
6598: LD_INT 32
6600: DOUBLE
6601: EQUAL
6602: IFTRUE 6612
6604: LD_INT 31
6606: DOUBLE
6607: EQUAL
6608: IFTRUE 6612
6610: GO 6623
6612: POP
// places := 1 ; b_control_tower :
6613: LD_ADDR_VAR 0 3
6617: PUSH
6618: LD_INT 1
6620: ST_TO_ADDR
6621: GO 6643
6623: LD_INT 36
6625: DOUBLE
6626: EQUAL
6627: IFTRUE 6631
6629: GO 6642
6631: POP
// places := 3 ; end ;
6632: LD_ADDR_VAR 0 3
6636: PUSH
6637: LD_INT 3
6639: ST_TO_ADDR
6640: GO 6643
6642: POP
// if places then
6643: LD_VAR 0 3
6647: IFFALSE 6670
// result := UnitsInside ( building ) < places ;
6649: LD_ADDR_VAR 0 2
6653: PUSH
6654: LD_VAR 0 1
6658: PPUSH
6659: CALL_OW 313
6663: PUSH
6664: LD_VAR 0 3
6668: LESS
6669: ST_TO_ADDR
// end ;
6670: LD_VAR 0 2
6674: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6675: LD_INT 0
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
// tmp := [ ] ;
6681: LD_ADDR_VAR 0 3
6685: PUSH
6686: EMPTY
6687: ST_TO_ADDR
// list := [ ] ;
6688: LD_ADDR_VAR 0 5
6692: PUSH
6693: EMPTY
6694: ST_TO_ADDR
// for i = 16 to 25 do
6695: LD_ADDR_VAR 0 4
6699: PUSH
6700: DOUBLE
6701: LD_INT 16
6703: DEC
6704: ST_TO_ADDR
6705: LD_INT 25
6707: PUSH
6708: FOR_TO
6709: IFFALSE 6782
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6711: LD_ADDR_VAR 0 3
6715: PUSH
6716: LD_VAR 0 3
6720: PUSH
6721: LD_INT 22
6723: PUSH
6724: LD_VAR 0 1
6728: PPUSH
6729: CALL_OW 255
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PUSH
6738: LD_INT 91
6740: PUSH
6741: LD_VAR 0 1
6745: PUSH
6746: LD_INT 6
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: PUSH
6754: LD_INT 30
6756: PUSH
6757: LD_VAR 0 4
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: EMPTY
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: ADD
6779: ST_TO_ADDR
6780: GO 6708
6782: POP
6783: POP
// for i = 1 to tmp do
6784: LD_ADDR_VAR 0 4
6788: PUSH
6789: DOUBLE
6790: LD_INT 1
6792: DEC
6793: ST_TO_ADDR
6794: LD_VAR 0 3
6798: PUSH
6799: FOR_TO
6800: IFFALSE 6888
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6802: LD_ADDR_VAR 0 5
6806: PUSH
6807: LD_VAR 0 5
6811: PUSH
6812: LD_VAR 0 3
6816: PUSH
6817: LD_VAR 0 4
6821: ARRAY
6822: PPUSH
6823: CALL_OW 266
6827: PUSH
6828: LD_VAR 0 3
6832: PUSH
6833: LD_VAR 0 4
6837: ARRAY
6838: PPUSH
6839: CALL_OW 250
6843: PUSH
6844: LD_VAR 0 3
6848: PUSH
6849: LD_VAR 0 4
6853: ARRAY
6854: PPUSH
6855: CALL_OW 251
6859: PUSH
6860: LD_VAR 0 3
6864: PUSH
6865: LD_VAR 0 4
6869: ARRAY
6870: PPUSH
6871: CALL_OW 254
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: ADD
6885: ST_TO_ADDR
6886: GO 6799
6888: POP
6889: POP
// result := list ;
6890: LD_ADDR_VAR 0 2
6894: PUSH
6895: LD_VAR 0 5
6899: ST_TO_ADDR
// end ;
6900: LD_VAR 0 2
6904: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6905: LD_INT 0
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
6913: PPUSH
// if not factory then
6914: LD_VAR 0 1
6918: NOT
6919: IFFALSE 6923
// exit ;
6921: GO 7516
// if control = control_apeman then
6923: LD_VAR 0 4
6927: PUSH
6928: LD_INT 5
6930: EQUAL
6931: IFFALSE 7040
// begin tmp := UnitsInside ( factory ) ;
6933: LD_ADDR_VAR 0 8
6937: PUSH
6938: LD_VAR 0 1
6942: PPUSH
6943: CALL_OW 313
6947: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6948: LD_VAR 0 8
6952: PPUSH
6953: LD_INT 25
6955: PUSH
6956: LD_INT 12
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PPUSH
6963: CALL_OW 72
6967: NOT
6968: IFFALSE 6978
// control := control_manual ;
6970: LD_ADDR_VAR 0 4
6974: PUSH
6975: LD_INT 1
6977: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6978: LD_ADDR_VAR 0 8
6982: PUSH
6983: LD_VAR 0 1
6987: PPUSH
6988: CALL 6675 0 1
6992: ST_TO_ADDR
// if tmp then
6993: LD_VAR 0 8
6997: IFFALSE 7040
// begin for i in tmp do
6999: LD_ADDR_VAR 0 7
7003: PUSH
7004: LD_VAR 0 8
7008: PUSH
7009: FOR_IN
7010: IFFALSE 7038
// if i [ 1 ] = b_ext_radio then
7012: LD_VAR 0 7
7016: PUSH
7017: LD_INT 1
7019: ARRAY
7020: PUSH
7021: LD_INT 22
7023: EQUAL
7024: IFFALSE 7036
// begin control := control_remote ;
7026: LD_ADDR_VAR 0 4
7030: PUSH
7031: LD_INT 2
7033: ST_TO_ADDR
// break ;
7034: GO 7038
// end ;
7036: GO 7009
7038: POP
7039: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7040: LD_VAR 0 1
7044: PPUSH
7045: LD_VAR 0 2
7049: PPUSH
7050: LD_VAR 0 3
7054: PPUSH
7055: LD_VAR 0 4
7059: PPUSH
7060: LD_VAR 0 5
7064: PPUSH
7065: CALL_OW 448
7069: IFFALSE 7104
// begin result := [ chassis , engine , control , weapon ] ;
7071: LD_ADDR_VAR 0 6
7075: PUSH
7076: LD_VAR 0 2
7080: PUSH
7081: LD_VAR 0 3
7085: PUSH
7086: LD_VAR 0 4
7090: PUSH
7091: LD_VAR 0 5
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: ST_TO_ADDR
// exit ;
7102: GO 7516
// end ; _chassis := AvailableChassisList ( factory ) ;
7104: LD_ADDR_VAR 0 9
7108: PUSH
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 475
7118: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
7119: LD_ADDR_VAR 0 11
7123: PUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 476
7133: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
7134: LD_ADDR_VAR 0 12
7138: PUSH
7139: LD_VAR 0 1
7143: PPUSH
7144: CALL_OW 477
7148: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
7149: LD_ADDR_VAR 0 10
7153: PUSH
7154: LD_VAR 0 1
7158: PPUSH
7159: CALL_OW 478
7163: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
7164: LD_VAR 0 9
7168: NOT
7169: PUSH
7170: LD_VAR 0 11
7174: NOT
7175: OR
7176: PUSH
7177: LD_VAR 0 12
7181: NOT
7182: OR
7183: PUSH
7184: LD_VAR 0 10
7188: NOT
7189: OR
7190: IFFALSE 7225
// begin result := [ chassis , engine , control , weapon ] ;
7192: LD_ADDR_VAR 0 6
7196: PUSH
7197: LD_VAR 0 2
7201: PUSH
7202: LD_VAR 0 3
7206: PUSH
7207: LD_VAR 0 4
7211: PUSH
7212: LD_VAR 0 5
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: ST_TO_ADDR
// exit ;
7223: GO 7516
// end ; if not chassis in _chassis then
7225: LD_VAR 0 2
7229: PUSH
7230: LD_VAR 0 9
7234: IN
7235: NOT
7236: IFFALSE 7262
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
7238: LD_ADDR_VAR 0 2
7242: PUSH
7243: LD_VAR 0 9
7247: PUSH
7248: LD_INT 1
7250: PPUSH
7251: LD_VAR 0 9
7255: PPUSH
7256: CALL_OW 12
7260: ARRAY
7261: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
7262: LD_VAR 0 2
7266: PPUSH
7267: LD_VAR 0 3
7271: PPUSH
7272: CALL 7521 0 2
7276: NOT
7277: IFFALSE 7336
// repeat engine := _engine [ 1 ] ;
7279: LD_ADDR_VAR 0 3
7283: PUSH
7284: LD_VAR 0 11
7288: PUSH
7289: LD_INT 1
7291: ARRAY
7292: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
7293: LD_ADDR_VAR 0 11
7297: PUSH
7298: LD_VAR 0 11
7302: PPUSH
7303: LD_INT 1
7305: PPUSH
7306: CALL_OW 3
7310: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
7311: LD_VAR 0 2
7315: PPUSH
7316: LD_VAR 0 3
7320: PPUSH
7321: CALL 7521 0 2
7325: PUSH
7326: LD_VAR 0 11
7330: PUSH
7331: EMPTY
7332: EQUAL
7333: OR
7334: IFFALSE 7279
// if not control in _control then
7336: LD_VAR 0 4
7340: PUSH
7341: LD_VAR 0 12
7345: IN
7346: NOT
7347: IFFALSE 7373
// control := _control [ rand ( 1 , _control ) ] ;
7349: LD_ADDR_VAR 0 4
7353: PUSH
7354: LD_VAR 0 12
7358: PUSH
7359: LD_INT 1
7361: PPUSH
7362: LD_VAR 0 12
7366: PPUSH
7367: CALL_OW 12
7371: ARRAY
7372: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
7373: LD_VAR 0 2
7377: PPUSH
7378: LD_VAR 0 5
7382: PPUSH
7383: CALL 7741 0 2
7387: NOT
7388: IFFALSE 7447
// repeat weapon := _weapon [ 1 ] ;
7390: LD_ADDR_VAR 0 5
7394: PUSH
7395: LD_VAR 0 10
7399: PUSH
7400: LD_INT 1
7402: ARRAY
7403: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
7404: LD_ADDR_VAR 0 10
7408: PUSH
7409: LD_VAR 0 10
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: CALL_OW 3
7421: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
7422: LD_VAR 0 2
7426: PPUSH
7427: LD_VAR 0 5
7431: PPUSH
7432: CALL 7741 0 2
7436: PUSH
7437: LD_VAR 0 10
7441: PUSH
7442: EMPTY
7443: EQUAL
7444: OR
7445: IFFALSE 7390
// result := [ ] ;
7447: LD_ADDR_VAR 0 6
7451: PUSH
7452: EMPTY
7453: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
7454: LD_VAR 0 1
7458: PPUSH
7459: LD_VAR 0 2
7463: PPUSH
7464: LD_VAR 0 3
7468: PPUSH
7469: LD_VAR 0 4
7473: PPUSH
7474: LD_VAR 0 5
7478: PPUSH
7479: CALL_OW 448
7483: IFFALSE 7516
// result := [ chassis , engine , control , weapon ] ;
7485: LD_ADDR_VAR 0 6
7489: PUSH
7490: LD_VAR 0 2
7494: PUSH
7495: LD_VAR 0 3
7499: PUSH
7500: LD_VAR 0 4
7504: PUSH
7505: LD_VAR 0 5
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: ST_TO_ADDR
// end ;
7516: LD_VAR 0 6
7520: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
7521: LD_INT 0
7523: PPUSH
// if not chassis or not engine then
7524: LD_VAR 0 1
7528: NOT
7529: PUSH
7530: LD_VAR 0 2
7534: NOT
7535: OR
7536: IFFALSE 7540
// exit ;
7538: GO 7736
// case engine of engine_solar :
7540: LD_VAR 0 2
7544: PUSH
7545: LD_INT 2
7547: DOUBLE
7548: EQUAL
7549: IFTRUE 7553
7551: GO 7591
7553: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
7554: LD_ADDR_VAR 0 3
7558: PUSH
7559: LD_INT 11
7561: PUSH
7562: LD_INT 12
7564: PUSH
7565: LD_INT 13
7567: PUSH
7568: LD_INT 14
7570: PUSH
7571: LD_INT 1
7573: PUSH
7574: LD_INT 2
7576: PUSH
7577: LD_INT 3
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: ST_TO_ADDR
7589: GO 7720
7591: LD_INT 1
7593: DOUBLE
7594: EQUAL
7595: IFTRUE 7599
7597: GO 7661
7599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7600: LD_ADDR_VAR 0 3
7604: PUSH
7605: LD_INT 11
7607: PUSH
7608: LD_INT 12
7610: PUSH
7611: LD_INT 13
7613: PUSH
7614: LD_INT 14
7616: PUSH
7617: LD_INT 1
7619: PUSH
7620: LD_INT 2
7622: PUSH
7623: LD_INT 3
7625: PUSH
7626: LD_INT 4
7628: PUSH
7629: LD_INT 5
7631: PUSH
7632: LD_INT 21
7634: PUSH
7635: LD_INT 23
7637: PUSH
7638: LD_INT 22
7640: PUSH
7641: LD_INT 24
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: ST_TO_ADDR
7659: GO 7720
7661: LD_INT 3
7663: DOUBLE
7664: EQUAL
7665: IFTRUE 7669
7667: GO 7719
7669: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7670: LD_ADDR_VAR 0 3
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: LD_INT 14
7680: PUSH
7681: LD_INT 2
7683: PUSH
7684: LD_INT 3
7686: PUSH
7687: LD_INT 4
7689: PUSH
7690: LD_INT 5
7692: PUSH
7693: LD_INT 21
7695: PUSH
7696: LD_INT 22
7698: PUSH
7699: LD_INT 23
7701: PUSH
7702: LD_INT 24
7704: PUSH
7705: EMPTY
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: ST_TO_ADDR
7717: GO 7720
7719: POP
// result := ( chassis in result ) ;
7720: LD_ADDR_VAR 0 3
7724: PUSH
7725: LD_VAR 0 1
7729: PUSH
7730: LD_VAR 0 3
7734: IN
7735: ST_TO_ADDR
// end ;
7736: LD_VAR 0 3
7740: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7741: LD_INT 0
7743: PPUSH
// if not chassis or not weapon then
7744: LD_VAR 0 1
7748: NOT
7749: PUSH
7750: LD_VAR 0 2
7754: NOT
7755: OR
7756: IFFALSE 7760
// exit ;
7758: GO 8822
// case weapon of us_machine_gun :
7760: LD_VAR 0 2
7764: PUSH
7765: LD_INT 2
7767: DOUBLE
7768: EQUAL
7769: IFTRUE 7773
7771: GO 7803
7773: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7774: LD_ADDR_VAR 0 3
7778: PUSH
7779: LD_INT 1
7781: PUSH
7782: LD_INT 2
7784: PUSH
7785: LD_INT 3
7787: PUSH
7788: LD_INT 4
7790: PUSH
7791: LD_INT 5
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: ST_TO_ADDR
7801: GO 8806
7803: LD_INT 3
7805: DOUBLE
7806: EQUAL
7807: IFTRUE 7811
7809: GO 7841
7811: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7812: LD_ADDR_VAR 0 3
7816: PUSH
7817: LD_INT 1
7819: PUSH
7820: LD_INT 2
7822: PUSH
7823: LD_INT 3
7825: PUSH
7826: LD_INT 4
7828: PUSH
7829: LD_INT 5
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: ST_TO_ADDR
7839: GO 8806
7841: LD_INT 11
7843: DOUBLE
7844: EQUAL
7845: IFTRUE 7849
7847: GO 7879
7849: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7850: LD_ADDR_VAR 0 3
7854: PUSH
7855: LD_INT 1
7857: PUSH
7858: LD_INT 2
7860: PUSH
7861: LD_INT 3
7863: PUSH
7864: LD_INT 4
7866: PUSH
7867: LD_INT 5
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: ST_TO_ADDR
7877: GO 8806
7879: LD_INT 4
7881: DOUBLE
7882: EQUAL
7883: IFTRUE 7887
7885: GO 7913
7887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7888: LD_ADDR_VAR 0 3
7892: PUSH
7893: LD_INT 2
7895: PUSH
7896: LD_INT 3
7898: PUSH
7899: LD_INT 4
7901: PUSH
7902: LD_INT 5
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: ST_TO_ADDR
7911: GO 8806
7913: LD_INT 5
7915: DOUBLE
7916: EQUAL
7917: IFTRUE 7921
7919: GO 7947
7921: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7922: LD_ADDR_VAR 0 3
7926: PUSH
7927: LD_INT 2
7929: PUSH
7930: LD_INT 3
7932: PUSH
7933: LD_INT 4
7935: PUSH
7936: LD_INT 5
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: ST_TO_ADDR
7945: GO 8806
7947: LD_INT 9
7949: DOUBLE
7950: EQUAL
7951: IFTRUE 7955
7953: GO 7981
7955: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7956: LD_ADDR_VAR 0 3
7960: PUSH
7961: LD_INT 2
7963: PUSH
7964: LD_INT 3
7966: PUSH
7967: LD_INT 4
7969: PUSH
7970: LD_INT 5
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: ST_TO_ADDR
7979: GO 8806
7981: LD_INT 7
7983: DOUBLE
7984: EQUAL
7985: IFTRUE 7989
7987: GO 8015
7989: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7990: LD_ADDR_VAR 0 3
7994: PUSH
7995: LD_INT 2
7997: PUSH
7998: LD_INT 3
8000: PUSH
8001: LD_INT 4
8003: PUSH
8004: LD_INT 5
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: ST_TO_ADDR
8013: GO 8806
8015: LD_INT 12
8017: DOUBLE
8018: EQUAL
8019: IFTRUE 8023
8021: GO 8049
8023: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
8024: LD_ADDR_VAR 0 3
8028: PUSH
8029: LD_INT 2
8031: PUSH
8032: LD_INT 3
8034: PUSH
8035: LD_INT 4
8037: PUSH
8038: LD_INT 5
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: ST_TO_ADDR
8047: GO 8806
8049: LD_INT 13
8051: DOUBLE
8052: EQUAL
8053: IFTRUE 8057
8055: GO 8083
8057: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
8058: LD_ADDR_VAR 0 3
8062: PUSH
8063: LD_INT 2
8065: PUSH
8066: LD_INT 3
8068: PUSH
8069: LD_INT 4
8071: PUSH
8072: LD_INT 5
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: ST_TO_ADDR
8081: GO 8806
8083: LD_INT 14
8085: DOUBLE
8086: EQUAL
8087: IFTRUE 8091
8089: GO 8109
8091: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
8092: LD_ADDR_VAR 0 3
8096: PUSH
8097: LD_INT 4
8099: PUSH
8100: LD_INT 5
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: ST_TO_ADDR
8107: GO 8806
8109: LD_INT 6
8111: DOUBLE
8112: EQUAL
8113: IFTRUE 8117
8115: GO 8135
8117: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
8118: LD_ADDR_VAR 0 3
8122: PUSH
8123: LD_INT 4
8125: PUSH
8126: LD_INT 5
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: ST_TO_ADDR
8133: GO 8806
8135: LD_INT 10
8137: DOUBLE
8138: EQUAL
8139: IFTRUE 8143
8141: GO 8161
8143: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
8144: LD_ADDR_VAR 0 3
8148: PUSH
8149: LD_INT 4
8151: PUSH
8152: LD_INT 5
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: ST_TO_ADDR
8159: GO 8806
8161: LD_INT 22
8163: DOUBLE
8164: EQUAL
8165: IFTRUE 8169
8167: GO 8195
8169: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
8170: LD_ADDR_VAR 0 3
8174: PUSH
8175: LD_INT 11
8177: PUSH
8178: LD_INT 12
8180: PUSH
8181: LD_INT 13
8183: PUSH
8184: LD_INT 14
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: ST_TO_ADDR
8193: GO 8806
8195: LD_INT 23
8197: DOUBLE
8198: EQUAL
8199: IFTRUE 8203
8201: GO 8229
8203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
8204: LD_ADDR_VAR 0 3
8208: PUSH
8209: LD_INT 11
8211: PUSH
8212: LD_INT 12
8214: PUSH
8215: LD_INT 13
8217: PUSH
8218: LD_INT 14
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: ST_TO_ADDR
8227: GO 8806
8229: LD_INT 24
8231: DOUBLE
8232: EQUAL
8233: IFTRUE 8237
8235: GO 8263
8237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
8238: LD_ADDR_VAR 0 3
8242: PUSH
8243: LD_INT 11
8245: PUSH
8246: LD_INT 12
8248: PUSH
8249: LD_INT 13
8251: PUSH
8252: LD_INT 14
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: ST_TO_ADDR
8261: GO 8806
8263: LD_INT 30
8265: DOUBLE
8266: EQUAL
8267: IFTRUE 8271
8269: GO 8297
8271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
8272: LD_ADDR_VAR 0 3
8276: PUSH
8277: LD_INT 11
8279: PUSH
8280: LD_INT 12
8282: PUSH
8283: LD_INT 13
8285: PUSH
8286: LD_INT 14
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: ST_TO_ADDR
8295: GO 8806
8297: LD_INT 25
8299: DOUBLE
8300: EQUAL
8301: IFTRUE 8305
8303: GO 8323
8305: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: LD_INT 13
8313: PUSH
8314: LD_INT 14
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: ST_TO_ADDR
8321: GO 8806
8323: LD_INT 27
8325: DOUBLE
8326: EQUAL
8327: IFTRUE 8331
8329: GO 8349
8331: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
8332: LD_ADDR_VAR 0 3
8336: PUSH
8337: LD_INT 13
8339: PUSH
8340: LD_INT 14
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: ST_TO_ADDR
8347: GO 8806
8349: LD_EXP 49
8353: DOUBLE
8354: EQUAL
8355: IFTRUE 8359
8357: GO 8385
8359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
8360: LD_ADDR_VAR 0 3
8364: PUSH
8365: LD_INT 11
8367: PUSH
8368: LD_INT 12
8370: PUSH
8371: LD_INT 13
8373: PUSH
8374: LD_INT 14
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: ST_TO_ADDR
8383: GO 8806
8385: LD_INT 28
8387: DOUBLE
8388: EQUAL
8389: IFTRUE 8393
8391: GO 8411
8393: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
8394: LD_ADDR_VAR 0 3
8398: PUSH
8399: LD_INT 13
8401: PUSH
8402: LD_INT 14
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: ST_TO_ADDR
8409: GO 8806
8411: LD_INT 29
8413: DOUBLE
8414: EQUAL
8415: IFTRUE 8419
8417: GO 8437
8419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
8420: LD_ADDR_VAR 0 3
8424: PUSH
8425: LD_INT 13
8427: PUSH
8428: LD_INT 14
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: ST_TO_ADDR
8435: GO 8806
8437: LD_INT 31
8439: DOUBLE
8440: EQUAL
8441: IFTRUE 8445
8443: GO 8463
8445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
8446: LD_ADDR_VAR 0 3
8450: PUSH
8451: LD_INT 13
8453: PUSH
8454: LD_INT 14
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: ST_TO_ADDR
8461: GO 8806
8463: LD_INT 26
8465: DOUBLE
8466: EQUAL
8467: IFTRUE 8471
8469: GO 8489
8471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
8472: LD_ADDR_VAR 0 3
8476: PUSH
8477: LD_INT 13
8479: PUSH
8480: LD_INT 14
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: ST_TO_ADDR
8487: GO 8806
8489: LD_INT 42
8491: DOUBLE
8492: EQUAL
8493: IFTRUE 8497
8495: GO 8523
8497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
8498: LD_ADDR_VAR 0 3
8502: PUSH
8503: LD_INT 21
8505: PUSH
8506: LD_INT 22
8508: PUSH
8509: LD_INT 23
8511: PUSH
8512: LD_INT 24
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: ST_TO_ADDR
8521: GO 8806
8523: LD_INT 43
8525: DOUBLE
8526: EQUAL
8527: IFTRUE 8531
8529: GO 8557
8531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
8532: LD_ADDR_VAR 0 3
8536: PUSH
8537: LD_INT 21
8539: PUSH
8540: LD_INT 22
8542: PUSH
8543: LD_INT 23
8545: PUSH
8546: LD_INT 24
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: ST_TO_ADDR
8555: GO 8806
8557: LD_INT 44
8559: DOUBLE
8560: EQUAL
8561: IFTRUE 8565
8563: GO 8591
8565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
8566: LD_ADDR_VAR 0 3
8570: PUSH
8571: LD_INT 21
8573: PUSH
8574: LD_INT 22
8576: PUSH
8577: LD_INT 23
8579: PUSH
8580: LD_INT 24
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: ST_TO_ADDR
8589: GO 8806
8591: LD_INT 45
8593: DOUBLE
8594: EQUAL
8595: IFTRUE 8599
8597: GO 8625
8599: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8600: LD_ADDR_VAR 0 3
8604: PUSH
8605: LD_INT 21
8607: PUSH
8608: LD_INT 22
8610: PUSH
8611: LD_INT 23
8613: PUSH
8614: LD_INT 24
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: ST_TO_ADDR
8623: GO 8806
8625: LD_INT 49
8627: DOUBLE
8628: EQUAL
8629: IFTRUE 8633
8631: GO 8659
8633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8634: LD_ADDR_VAR 0 3
8638: PUSH
8639: LD_INT 21
8641: PUSH
8642: LD_INT 22
8644: PUSH
8645: LD_INT 23
8647: PUSH
8648: LD_INT 24
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: ST_TO_ADDR
8657: GO 8806
8659: LD_INT 51
8661: DOUBLE
8662: EQUAL
8663: IFTRUE 8667
8665: GO 8693
8667: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8668: LD_ADDR_VAR 0 3
8672: PUSH
8673: LD_INT 21
8675: PUSH
8676: LD_INT 22
8678: PUSH
8679: LD_INT 23
8681: PUSH
8682: LD_INT 24
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: ST_TO_ADDR
8691: GO 8806
8693: LD_INT 52
8695: DOUBLE
8696: EQUAL
8697: IFTRUE 8701
8699: GO 8727
8701: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8702: LD_ADDR_VAR 0 3
8706: PUSH
8707: LD_INT 21
8709: PUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 23
8715: PUSH
8716: LD_INT 24
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: ST_TO_ADDR
8725: GO 8806
8727: LD_INT 53
8729: DOUBLE
8730: EQUAL
8731: IFTRUE 8735
8733: GO 8753
8735: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8736: LD_ADDR_VAR 0 3
8740: PUSH
8741: LD_INT 23
8743: PUSH
8744: LD_INT 24
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: ST_TO_ADDR
8751: GO 8806
8753: LD_INT 46
8755: DOUBLE
8756: EQUAL
8757: IFTRUE 8761
8759: GO 8779
8761: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8762: LD_ADDR_VAR 0 3
8766: PUSH
8767: LD_INT 23
8769: PUSH
8770: LD_INT 24
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: ST_TO_ADDR
8777: GO 8806
8779: LD_INT 47
8781: DOUBLE
8782: EQUAL
8783: IFTRUE 8787
8785: GO 8805
8787: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8788: LD_ADDR_VAR 0 3
8792: PUSH
8793: LD_INT 23
8795: PUSH
8796: LD_INT 24
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: ST_TO_ADDR
8803: GO 8806
8805: POP
// result := ( chassis in result ) ;
8806: LD_ADDR_VAR 0 3
8810: PUSH
8811: LD_VAR 0 1
8815: PUSH
8816: LD_VAR 0 3
8820: IN
8821: ST_TO_ADDR
// end ;
8822: LD_VAR 0 3
8826: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8827: LD_INT 0
8829: PPUSH
8830: PPUSH
8831: PPUSH
8832: PPUSH
8833: PPUSH
8834: PPUSH
8835: PPUSH
// result := array ;
8836: LD_ADDR_VAR 0 5
8840: PUSH
8841: LD_VAR 0 1
8845: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8846: LD_VAR 0 1
8850: NOT
8851: PUSH
8852: LD_VAR 0 2
8856: NOT
8857: OR
8858: PUSH
8859: LD_VAR 0 3
8863: NOT
8864: OR
8865: PUSH
8866: LD_VAR 0 2
8870: PUSH
8871: LD_VAR 0 1
8875: GREATER
8876: OR
8877: PUSH
8878: LD_VAR 0 3
8882: PUSH
8883: LD_VAR 0 1
8887: GREATER
8888: OR
8889: IFFALSE 8893
// exit ;
8891: GO 9189
// if direction then
8893: LD_VAR 0 4
8897: IFFALSE 8961
// begin d := 1 ;
8899: LD_ADDR_VAR 0 9
8903: PUSH
8904: LD_INT 1
8906: ST_TO_ADDR
// if i_from > i_to then
8907: LD_VAR 0 2
8911: PUSH
8912: LD_VAR 0 3
8916: GREATER
8917: IFFALSE 8943
// length := ( array - i_from ) + i_to else
8919: LD_ADDR_VAR 0 11
8923: PUSH
8924: LD_VAR 0 1
8928: PUSH
8929: LD_VAR 0 2
8933: MINUS
8934: PUSH
8935: LD_VAR 0 3
8939: PLUS
8940: ST_TO_ADDR
8941: GO 8959
// length := i_to - i_from ;
8943: LD_ADDR_VAR 0 11
8947: PUSH
8948: LD_VAR 0 3
8952: PUSH
8953: LD_VAR 0 2
8957: MINUS
8958: ST_TO_ADDR
// end else
8959: GO 9022
// begin d := - 1 ;
8961: LD_ADDR_VAR 0 9
8965: PUSH
8966: LD_INT 1
8968: NEG
8969: ST_TO_ADDR
// if i_from > i_to then
8970: LD_VAR 0 2
8974: PUSH
8975: LD_VAR 0 3
8979: GREATER
8980: IFFALSE 9000
// length := i_from - i_to else
8982: LD_ADDR_VAR 0 11
8986: PUSH
8987: LD_VAR 0 2
8991: PUSH
8992: LD_VAR 0 3
8996: MINUS
8997: ST_TO_ADDR
8998: GO 9022
// length := ( array - i_to ) + i_from ;
9000: LD_ADDR_VAR 0 11
9004: PUSH
9005: LD_VAR 0 1
9009: PUSH
9010: LD_VAR 0 3
9014: MINUS
9015: PUSH
9016: LD_VAR 0 2
9020: PLUS
9021: ST_TO_ADDR
// end ; if not length then
9022: LD_VAR 0 11
9026: NOT
9027: IFFALSE 9031
// exit ;
9029: GO 9189
// tmp := array ;
9031: LD_ADDR_VAR 0 10
9035: PUSH
9036: LD_VAR 0 1
9040: ST_TO_ADDR
// for i = 1 to length do
9041: LD_ADDR_VAR 0 6
9045: PUSH
9046: DOUBLE
9047: LD_INT 1
9049: DEC
9050: ST_TO_ADDR
9051: LD_VAR 0 11
9055: PUSH
9056: FOR_TO
9057: IFFALSE 9177
// begin for j = 1 to array do
9059: LD_ADDR_VAR 0 7
9063: PUSH
9064: DOUBLE
9065: LD_INT 1
9067: DEC
9068: ST_TO_ADDR
9069: LD_VAR 0 1
9073: PUSH
9074: FOR_TO
9075: IFFALSE 9163
// begin k := j + d ;
9077: LD_ADDR_VAR 0 8
9081: PUSH
9082: LD_VAR 0 7
9086: PUSH
9087: LD_VAR 0 9
9091: PLUS
9092: ST_TO_ADDR
// if k > array then
9093: LD_VAR 0 8
9097: PUSH
9098: LD_VAR 0 1
9102: GREATER
9103: IFFALSE 9113
// k := 1 ;
9105: LD_ADDR_VAR 0 8
9109: PUSH
9110: LD_INT 1
9112: ST_TO_ADDR
// if not k then
9113: LD_VAR 0 8
9117: NOT
9118: IFFALSE 9130
// k := array ;
9120: LD_ADDR_VAR 0 8
9124: PUSH
9125: LD_VAR 0 1
9129: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9130: LD_ADDR_VAR 0 10
9134: PUSH
9135: LD_VAR 0 10
9139: PPUSH
9140: LD_VAR 0 8
9144: PPUSH
9145: LD_VAR 0 1
9149: PUSH
9150: LD_VAR 0 7
9154: ARRAY
9155: PPUSH
9156: CALL_OW 1
9160: ST_TO_ADDR
// end ;
9161: GO 9074
9163: POP
9164: POP
// array := tmp ;
9165: LD_ADDR_VAR 0 1
9169: PUSH
9170: LD_VAR 0 10
9174: ST_TO_ADDR
// end ;
9175: GO 9056
9177: POP
9178: POP
// result := array ;
9179: LD_ADDR_VAR 0 5
9183: PUSH
9184: LD_VAR 0 1
9188: ST_TO_ADDR
// end ;
9189: LD_VAR 0 5
9193: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
9194: LD_INT 0
9196: PPUSH
9197: PPUSH
// result := 0 ;
9198: LD_ADDR_VAR 0 3
9202: PUSH
9203: LD_INT 0
9205: ST_TO_ADDR
// if not array or not value in array then
9206: LD_VAR 0 1
9210: NOT
9211: PUSH
9212: LD_VAR 0 2
9216: PUSH
9217: LD_VAR 0 1
9221: IN
9222: NOT
9223: OR
9224: IFFALSE 9228
// exit ;
9226: GO 9282
// for i = 1 to array do
9228: LD_ADDR_VAR 0 4
9232: PUSH
9233: DOUBLE
9234: LD_INT 1
9236: DEC
9237: ST_TO_ADDR
9238: LD_VAR 0 1
9242: PUSH
9243: FOR_TO
9244: IFFALSE 9280
// if value = array [ i ] then
9246: LD_VAR 0 2
9250: PUSH
9251: LD_VAR 0 1
9255: PUSH
9256: LD_VAR 0 4
9260: ARRAY
9261: EQUAL
9262: IFFALSE 9278
// begin result := i ;
9264: LD_ADDR_VAR 0 3
9268: PUSH
9269: LD_VAR 0 4
9273: ST_TO_ADDR
// exit ;
9274: POP
9275: POP
9276: GO 9282
// end ;
9278: GO 9243
9280: POP
9281: POP
// end ;
9282: LD_VAR 0 3
9286: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
9287: LD_INT 0
9289: PPUSH
// vc_chassis := chassis ;
9290: LD_ADDR_OWVAR 37
9294: PUSH
9295: LD_VAR 0 1
9299: ST_TO_ADDR
// vc_engine := engine ;
9300: LD_ADDR_OWVAR 39
9304: PUSH
9305: LD_VAR 0 2
9309: ST_TO_ADDR
// vc_control := control ;
9310: LD_ADDR_OWVAR 38
9314: PUSH
9315: LD_VAR 0 3
9319: ST_TO_ADDR
// vc_weapon := weapon ;
9320: LD_ADDR_OWVAR 40
9324: PUSH
9325: LD_VAR 0 4
9329: ST_TO_ADDR
// vc_fuel_battery := fuel ;
9330: LD_ADDR_OWVAR 41
9334: PUSH
9335: LD_VAR 0 5
9339: ST_TO_ADDR
// end ;
9340: LD_VAR 0 6
9344: RET
// export function WantPlant ( unit ) ; var task ; begin
9345: LD_INT 0
9347: PPUSH
9348: PPUSH
// result := false ;
9349: LD_ADDR_VAR 0 2
9353: PUSH
9354: LD_INT 0
9356: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
9357: LD_ADDR_VAR 0 3
9361: PUSH
9362: LD_VAR 0 1
9366: PPUSH
9367: CALL_OW 437
9371: ST_TO_ADDR
// if task then
9372: LD_VAR 0 3
9376: IFFALSE 9404
// if task [ 1 ] [ 1 ] = p then
9378: LD_VAR 0 3
9382: PUSH
9383: LD_INT 1
9385: ARRAY
9386: PUSH
9387: LD_INT 1
9389: ARRAY
9390: PUSH
9391: LD_STRING p
9393: EQUAL
9394: IFFALSE 9404
// result := true ;
9396: LD_ADDR_VAR 0 2
9400: PUSH
9401: LD_INT 1
9403: ST_TO_ADDR
// end ;
9404: LD_VAR 0 2
9408: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
9409: LD_INT 0
9411: PPUSH
9412: PPUSH
9413: PPUSH
9414: PPUSH
// if pos < 1 then
9415: LD_VAR 0 2
9419: PUSH
9420: LD_INT 1
9422: LESS
9423: IFFALSE 9427
// exit ;
9425: GO 9730
// if pos = 1 then
9427: LD_VAR 0 2
9431: PUSH
9432: LD_INT 1
9434: EQUAL
9435: IFFALSE 9468
// result := Replace ( arr , pos [ 1 ] , value ) else
9437: LD_ADDR_VAR 0 4
9441: PUSH
9442: LD_VAR 0 1
9446: PPUSH
9447: LD_VAR 0 2
9451: PUSH
9452: LD_INT 1
9454: ARRAY
9455: PPUSH
9456: LD_VAR 0 3
9460: PPUSH
9461: CALL_OW 1
9465: ST_TO_ADDR
9466: GO 9730
// begin tmp := arr ;
9468: LD_ADDR_VAR 0 6
9472: PUSH
9473: LD_VAR 0 1
9477: ST_TO_ADDR
// s_arr := [ tmp ] ;
9478: LD_ADDR_VAR 0 7
9482: PUSH
9483: LD_VAR 0 6
9487: PUSH
9488: EMPTY
9489: LIST
9490: ST_TO_ADDR
// for i = 1 to pos - 1 do
9491: LD_ADDR_VAR 0 5
9495: PUSH
9496: DOUBLE
9497: LD_INT 1
9499: DEC
9500: ST_TO_ADDR
9501: LD_VAR 0 2
9505: PUSH
9506: LD_INT 1
9508: MINUS
9509: PUSH
9510: FOR_TO
9511: IFFALSE 9556
// begin tmp := tmp [ pos [ i ] ] ;
9513: LD_ADDR_VAR 0 6
9517: PUSH
9518: LD_VAR 0 6
9522: PUSH
9523: LD_VAR 0 2
9527: PUSH
9528: LD_VAR 0 5
9532: ARRAY
9533: ARRAY
9534: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
9535: LD_ADDR_VAR 0 7
9539: PUSH
9540: LD_VAR 0 7
9544: PUSH
9545: LD_VAR 0 6
9549: PUSH
9550: EMPTY
9551: LIST
9552: ADD
9553: ST_TO_ADDR
// end ;
9554: GO 9510
9556: POP
9557: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
9558: LD_ADDR_VAR 0 6
9562: PUSH
9563: LD_VAR 0 6
9567: PPUSH
9568: LD_VAR 0 2
9572: PUSH
9573: LD_VAR 0 2
9577: ARRAY
9578: PPUSH
9579: LD_VAR 0 3
9583: PPUSH
9584: CALL_OW 1
9588: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9589: LD_ADDR_VAR 0 7
9593: PUSH
9594: LD_VAR 0 7
9598: PPUSH
9599: LD_VAR 0 7
9603: PPUSH
9604: LD_VAR 0 6
9608: PPUSH
9609: CALL_OW 1
9613: ST_TO_ADDR
// for i = s_arr downto 2 do
9614: LD_ADDR_VAR 0 5
9618: PUSH
9619: DOUBLE
9620: LD_VAR 0 7
9624: INC
9625: ST_TO_ADDR
9626: LD_INT 2
9628: PUSH
9629: FOR_DOWNTO
9630: IFFALSE 9714
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9632: LD_ADDR_VAR 0 6
9636: PUSH
9637: LD_VAR 0 7
9641: PUSH
9642: LD_VAR 0 5
9646: PUSH
9647: LD_INT 1
9649: MINUS
9650: ARRAY
9651: PPUSH
9652: LD_VAR 0 2
9656: PUSH
9657: LD_VAR 0 5
9661: PUSH
9662: LD_INT 1
9664: MINUS
9665: ARRAY
9666: PPUSH
9667: LD_VAR 0 7
9671: PUSH
9672: LD_VAR 0 5
9676: ARRAY
9677: PPUSH
9678: CALL_OW 1
9682: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9683: LD_ADDR_VAR 0 7
9687: PUSH
9688: LD_VAR 0 7
9692: PPUSH
9693: LD_VAR 0 5
9697: PUSH
9698: LD_INT 1
9700: MINUS
9701: PPUSH
9702: LD_VAR 0 6
9706: PPUSH
9707: CALL_OW 1
9711: ST_TO_ADDR
// end ;
9712: GO 9629
9714: POP
9715: POP
// result := s_arr [ 1 ] ;
9716: LD_ADDR_VAR 0 4
9720: PUSH
9721: LD_VAR 0 7
9725: PUSH
9726: LD_INT 1
9728: ARRAY
9729: ST_TO_ADDR
// end ; end ;
9730: LD_VAR 0 4
9734: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9735: LD_INT 0
9737: PPUSH
9738: PPUSH
// if not list then
9739: LD_VAR 0 1
9743: NOT
9744: IFFALSE 9748
// exit ;
9746: GO 9839
// i := list [ pos1 ] ;
9748: LD_ADDR_VAR 0 5
9752: PUSH
9753: LD_VAR 0 1
9757: PUSH
9758: LD_VAR 0 2
9762: ARRAY
9763: ST_TO_ADDR
// if not i then
9764: LD_VAR 0 5
9768: NOT
9769: IFFALSE 9773
// exit ;
9771: GO 9839
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9773: LD_ADDR_VAR 0 1
9777: PUSH
9778: LD_VAR 0 1
9782: PPUSH
9783: LD_VAR 0 2
9787: PPUSH
9788: LD_VAR 0 1
9792: PUSH
9793: LD_VAR 0 3
9797: ARRAY
9798: PPUSH
9799: CALL_OW 1
9803: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9804: LD_ADDR_VAR 0 1
9808: PUSH
9809: LD_VAR 0 1
9813: PPUSH
9814: LD_VAR 0 3
9818: PPUSH
9819: LD_VAR 0 5
9823: PPUSH
9824: CALL_OW 1
9828: ST_TO_ADDR
// result := list ;
9829: LD_ADDR_VAR 0 4
9833: PUSH
9834: LD_VAR 0 1
9838: ST_TO_ADDR
// end ;
9839: LD_VAR 0 4
9843: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9844: LD_INT 0
9846: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9847: LD_ADDR_VAR 0 5
9851: PUSH
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 250
9861: PPUSH
9862: LD_VAR 0 1
9866: PPUSH
9867: CALL_OW 251
9871: PPUSH
9872: LD_VAR 0 2
9876: PPUSH
9877: LD_VAR 0 3
9881: PPUSH
9882: LD_VAR 0 4
9886: PPUSH
9887: CALL 9897 0 5
9891: ST_TO_ADDR
// end ;
9892: LD_VAR 0 5
9896: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9897: LD_INT 0
9899: PPUSH
9900: PPUSH
9901: PPUSH
9902: PPUSH
// if not list then
9903: LD_VAR 0 3
9907: NOT
9908: IFFALSE 9912
// exit ;
9910: GO 10300
// result := [ ] ;
9912: LD_ADDR_VAR 0 6
9916: PUSH
9917: EMPTY
9918: ST_TO_ADDR
// for i in list do
9919: LD_ADDR_VAR 0 7
9923: PUSH
9924: LD_VAR 0 3
9928: PUSH
9929: FOR_IN
9930: IFFALSE 10132
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9932: LD_ADDR_VAR 0 9
9936: PUSH
9937: LD_VAR 0 7
9941: PPUSH
9942: LD_VAR 0 1
9946: PPUSH
9947: LD_VAR 0 2
9951: PPUSH
9952: CALL_OW 297
9956: ST_TO_ADDR
// if not result then
9957: LD_VAR 0 6
9961: NOT
9962: IFFALSE 9988
// result := [ [ i , tmp ] ] else
9964: LD_ADDR_VAR 0 6
9968: PUSH
9969: LD_VAR 0 7
9973: PUSH
9974: LD_VAR 0 9
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: EMPTY
9984: LIST
9985: ST_TO_ADDR
9986: GO 10130
// begin if result [ result ] [ 2 ] < tmp then
9988: LD_VAR 0 6
9992: PUSH
9993: LD_VAR 0 6
9997: ARRAY
9998: PUSH
9999: LD_INT 2
10001: ARRAY
10002: PUSH
10003: LD_VAR 0 9
10007: LESS
10008: IFFALSE 10050
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
10010: LD_ADDR_VAR 0 6
10014: PUSH
10015: LD_VAR 0 6
10019: PPUSH
10020: LD_VAR 0 6
10024: PUSH
10025: LD_INT 1
10027: PLUS
10028: PPUSH
10029: LD_VAR 0 7
10033: PUSH
10034: LD_VAR 0 9
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: PPUSH
10043: CALL_OW 2
10047: ST_TO_ADDR
10048: GO 10130
// for j = 1 to result do
10050: LD_ADDR_VAR 0 8
10054: PUSH
10055: DOUBLE
10056: LD_INT 1
10058: DEC
10059: ST_TO_ADDR
10060: LD_VAR 0 6
10064: PUSH
10065: FOR_TO
10066: IFFALSE 10128
// begin if tmp < result [ j ] [ 2 ] then
10068: LD_VAR 0 9
10072: PUSH
10073: LD_VAR 0 6
10077: PUSH
10078: LD_VAR 0 8
10082: ARRAY
10083: PUSH
10084: LD_INT 2
10086: ARRAY
10087: LESS
10088: IFFALSE 10126
// begin result := Insert ( result , j , [ i , tmp ] ) ;
10090: LD_ADDR_VAR 0 6
10094: PUSH
10095: LD_VAR 0 6
10099: PPUSH
10100: LD_VAR 0 8
10104: PPUSH
10105: LD_VAR 0 7
10109: PUSH
10110: LD_VAR 0 9
10114: PUSH
10115: EMPTY
10116: LIST
10117: LIST
10118: PPUSH
10119: CALL_OW 2
10123: ST_TO_ADDR
// break ;
10124: GO 10128
// end ; end ;
10126: GO 10065
10128: POP
10129: POP
// end ; end ;
10130: GO 9929
10132: POP
10133: POP
// if result and not asc then
10134: LD_VAR 0 6
10138: PUSH
10139: LD_VAR 0 4
10143: NOT
10144: AND
10145: IFFALSE 10220
// begin tmp := result ;
10147: LD_ADDR_VAR 0 9
10151: PUSH
10152: LD_VAR 0 6
10156: ST_TO_ADDR
// for i = tmp downto 1 do
10157: LD_ADDR_VAR 0 7
10161: PUSH
10162: DOUBLE
10163: LD_VAR 0 9
10167: INC
10168: ST_TO_ADDR
10169: LD_INT 1
10171: PUSH
10172: FOR_DOWNTO
10173: IFFALSE 10218
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
10175: LD_ADDR_VAR 0 6
10179: PUSH
10180: LD_VAR 0 6
10184: PPUSH
10185: LD_VAR 0 9
10189: PUSH
10190: LD_VAR 0 7
10194: MINUS
10195: PUSH
10196: LD_INT 1
10198: PLUS
10199: PPUSH
10200: LD_VAR 0 9
10204: PUSH
10205: LD_VAR 0 7
10209: ARRAY
10210: PPUSH
10211: CALL_OW 1
10215: ST_TO_ADDR
10216: GO 10172
10218: POP
10219: POP
// end ; tmp := [ ] ;
10220: LD_ADDR_VAR 0 9
10224: PUSH
10225: EMPTY
10226: ST_TO_ADDR
// if mode then
10227: LD_VAR 0 5
10231: IFFALSE 10300
// begin for i = 1 to result do
10233: LD_ADDR_VAR 0 7
10237: PUSH
10238: DOUBLE
10239: LD_INT 1
10241: DEC
10242: ST_TO_ADDR
10243: LD_VAR 0 6
10247: PUSH
10248: FOR_TO
10249: IFFALSE 10288
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
10251: LD_ADDR_VAR 0 9
10255: PUSH
10256: LD_VAR 0 9
10260: PPUSH
10261: LD_VAR 0 7
10265: PPUSH
10266: LD_VAR 0 6
10270: PUSH
10271: LD_VAR 0 7
10275: ARRAY
10276: PUSH
10277: LD_INT 1
10279: ARRAY
10280: PPUSH
10281: CALL_OW 1
10285: ST_TO_ADDR
10286: GO 10248
10288: POP
10289: POP
// result := tmp ;
10290: LD_ADDR_VAR 0 6
10294: PUSH
10295: LD_VAR 0 9
10299: ST_TO_ADDR
// end ; end ;
10300: LD_VAR 0 6
10304: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
10305: LD_INT 0
10307: PPUSH
10308: PPUSH
10309: PPUSH
10310: PPUSH
10311: PPUSH
10312: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
10313: LD_ADDR_VAR 0 5
10317: PUSH
10318: LD_INT 0
10320: PUSH
10321: LD_INT 0
10323: PUSH
10324: LD_INT 0
10326: PUSH
10327: EMPTY
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: ST_TO_ADDR
// if not x or not y then
10335: LD_VAR 0 2
10339: NOT
10340: PUSH
10341: LD_VAR 0 3
10345: NOT
10346: OR
10347: IFFALSE 10351
// exit ;
10349: GO 12003
// if not range then
10351: LD_VAR 0 4
10355: NOT
10356: IFFALSE 10366
// range := 10 ;
10358: LD_ADDR_VAR 0 4
10362: PUSH
10363: LD_INT 10
10365: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10366: LD_ADDR_VAR 0 8
10370: PUSH
10371: LD_INT 81
10373: PUSH
10374: LD_VAR 0 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 92
10385: PUSH
10386: LD_VAR 0 2
10390: PUSH
10391: LD_VAR 0 3
10395: PUSH
10396: LD_VAR 0 4
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 3
10409: PUSH
10410: LD_INT 21
10412: PUSH
10413: LD_INT 3
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: LIST
10428: PPUSH
10429: CALL_OW 69
10433: ST_TO_ADDR
// if not tmp then
10434: LD_VAR 0 8
10438: NOT
10439: IFFALSE 10443
// exit ;
10441: GO 12003
// for i in tmp do
10443: LD_ADDR_VAR 0 6
10447: PUSH
10448: LD_VAR 0 8
10452: PUSH
10453: FOR_IN
10454: IFFALSE 11978
// begin points := [ 0 , 0 , 0 ] ;
10456: LD_ADDR_VAR 0 9
10460: PUSH
10461: LD_INT 0
10463: PUSH
10464: LD_INT 0
10466: PUSH
10467: LD_INT 0
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: ST_TO_ADDR
// bpoints := 1 ;
10475: LD_ADDR_VAR 0 10
10479: PUSH
10480: LD_INT 1
10482: ST_TO_ADDR
// case GetType ( i ) of unit_human :
10483: LD_VAR 0 6
10487: PPUSH
10488: CALL_OW 247
10492: PUSH
10493: LD_INT 1
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 11079
10501: POP
// begin if GetClass ( i ) = 1 then
10502: LD_VAR 0 6
10506: PPUSH
10507: CALL_OW 257
10511: PUSH
10512: LD_INT 1
10514: EQUAL
10515: IFFALSE 10536
// points := [ 10 , 5 , 3 ] ;
10517: LD_ADDR_VAR 0 9
10521: PUSH
10522: LD_INT 10
10524: PUSH
10525: LD_INT 5
10527: PUSH
10528: LD_INT 3
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: LIST
10535: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
10536: LD_VAR 0 6
10540: PPUSH
10541: CALL_OW 257
10545: PUSH
10546: LD_INT 2
10548: PUSH
10549: LD_INT 3
10551: PUSH
10552: LD_INT 4
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: LIST
10559: IN
10560: IFFALSE 10581
// points := [ 3 , 2 , 1 ] ;
10562: LD_ADDR_VAR 0 9
10566: PUSH
10567: LD_INT 3
10569: PUSH
10570: LD_INT 2
10572: PUSH
10573: LD_INT 1
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: LIST
10580: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10581: LD_VAR 0 6
10585: PPUSH
10586: CALL_OW 257
10590: PUSH
10591: LD_INT 5
10593: EQUAL
10594: IFFALSE 10615
// points := [ 130 , 5 , 2 ] ;
10596: LD_ADDR_VAR 0 9
10600: PUSH
10601: LD_INT 130
10603: PUSH
10604: LD_INT 5
10606: PUSH
10607: LD_INT 2
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10615: LD_VAR 0 6
10619: PPUSH
10620: CALL_OW 257
10624: PUSH
10625: LD_INT 8
10627: EQUAL
10628: IFFALSE 10649
// points := [ 35 , 35 , 30 ] ;
10630: LD_ADDR_VAR 0 9
10634: PUSH
10635: LD_INT 35
10637: PUSH
10638: LD_INT 35
10640: PUSH
10641: LD_INT 30
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10649: LD_VAR 0 6
10653: PPUSH
10654: CALL_OW 257
10658: PUSH
10659: LD_INT 9
10661: EQUAL
10662: IFFALSE 10683
// points := [ 20 , 55 , 40 ] ;
10664: LD_ADDR_VAR 0 9
10668: PUSH
10669: LD_INT 20
10671: PUSH
10672: LD_INT 55
10674: PUSH
10675: LD_INT 40
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10683: LD_VAR 0 6
10687: PPUSH
10688: CALL_OW 257
10692: PUSH
10693: LD_INT 12
10695: PUSH
10696: LD_INT 16
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: IN
10703: IFFALSE 10724
// points := [ 5 , 3 , 2 ] ;
10705: LD_ADDR_VAR 0 9
10709: PUSH
10710: LD_INT 5
10712: PUSH
10713: LD_INT 3
10715: PUSH
10716: LD_INT 2
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: LIST
10723: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10724: LD_VAR 0 6
10728: PPUSH
10729: CALL_OW 257
10733: PUSH
10734: LD_INT 17
10736: EQUAL
10737: IFFALSE 10758
// points := [ 100 , 50 , 75 ] ;
10739: LD_ADDR_VAR 0 9
10743: PUSH
10744: LD_INT 100
10746: PUSH
10747: LD_INT 50
10749: PUSH
10750: LD_INT 75
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10758: LD_VAR 0 6
10762: PPUSH
10763: CALL_OW 257
10767: PUSH
10768: LD_INT 15
10770: EQUAL
10771: IFFALSE 10792
// points := [ 10 , 5 , 3 ] ;
10773: LD_ADDR_VAR 0 9
10777: PUSH
10778: LD_INT 10
10780: PUSH
10781: LD_INT 5
10783: PUSH
10784: LD_INT 3
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: LIST
10791: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10792: LD_VAR 0 6
10796: PPUSH
10797: CALL_OW 257
10801: PUSH
10802: LD_INT 14
10804: EQUAL
10805: IFFALSE 10826
// points := [ 10 , 0 , 0 ] ;
10807: LD_ADDR_VAR 0 9
10811: PUSH
10812: LD_INT 10
10814: PUSH
10815: LD_INT 0
10817: PUSH
10818: LD_INT 0
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10826: LD_VAR 0 6
10830: PPUSH
10831: CALL_OW 257
10835: PUSH
10836: LD_INT 11
10838: EQUAL
10839: IFFALSE 10860
// points := [ 30 , 10 , 5 ] ;
10841: LD_ADDR_VAR 0 9
10845: PUSH
10846: LD_INT 30
10848: PUSH
10849: LD_INT 10
10851: PUSH
10852: LD_INT 5
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: LIST
10859: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10860: LD_VAR 0 1
10864: PPUSH
10865: LD_INT 5
10867: PPUSH
10868: CALL_OW 321
10872: PUSH
10873: LD_INT 2
10875: EQUAL
10876: IFFALSE 10893
// bpoints := bpoints * 1.8 ;
10878: LD_ADDR_VAR 0 10
10882: PUSH
10883: LD_VAR 0 10
10887: PUSH
10888: LD_REAL  1.80000000000000E+0000
10891: MUL
10892: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10893: LD_VAR 0 6
10897: PPUSH
10898: CALL_OW 257
10902: PUSH
10903: LD_INT 1
10905: PUSH
10906: LD_INT 2
10908: PUSH
10909: LD_INT 3
10911: PUSH
10912: LD_INT 4
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: IN
10921: PUSH
10922: LD_VAR 0 1
10926: PPUSH
10927: LD_INT 51
10929: PPUSH
10930: CALL_OW 321
10934: PUSH
10935: LD_INT 2
10937: EQUAL
10938: AND
10939: IFFALSE 10956
// bpoints := bpoints * 1.2 ;
10941: LD_ADDR_VAR 0 10
10945: PUSH
10946: LD_VAR 0 10
10950: PUSH
10951: LD_REAL  1.20000000000000E+0000
10954: MUL
10955: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10956: LD_VAR 0 6
10960: PPUSH
10961: CALL_OW 257
10965: PUSH
10966: LD_INT 5
10968: PUSH
10969: LD_INT 7
10971: PUSH
10972: LD_INT 9
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: LIST
10979: IN
10980: PUSH
10981: LD_VAR 0 1
10985: PPUSH
10986: LD_INT 52
10988: PPUSH
10989: CALL_OW 321
10993: PUSH
10994: LD_INT 2
10996: EQUAL
10997: AND
10998: IFFALSE 11015
// bpoints := bpoints * 1.5 ;
11000: LD_ADDR_VAR 0 10
11004: PUSH
11005: LD_VAR 0 10
11009: PUSH
11010: LD_REAL  1.50000000000000E+0000
11013: MUL
11014: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
11015: LD_VAR 0 1
11019: PPUSH
11020: LD_INT 66
11022: PPUSH
11023: CALL_OW 321
11027: PUSH
11028: LD_INT 2
11030: EQUAL
11031: IFFALSE 11048
// bpoints := bpoints * 1.1 ;
11033: LD_ADDR_VAR 0 10
11037: PUSH
11038: LD_VAR 0 10
11042: PUSH
11043: LD_REAL  1.10000000000000E+0000
11046: MUL
11047: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
11048: LD_ADDR_VAR 0 10
11052: PUSH
11053: LD_VAR 0 10
11057: PUSH
11058: LD_VAR 0 6
11062: PPUSH
11063: LD_INT 1
11065: PPUSH
11066: CALL_OW 259
11070: PUSH
11071: LD_REAL  1.15000000000000E+0000
11074: MUL
11075: MUL
11076: ST_TO_ADDR
// end ; unit_vehicle :
11077: GO 11907
11079: LD_INT 2
11081: DOUBLE
11082: EQUAL
11083: IFTRUE 11087
11085: GO 11895
11087: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
11088: LD_VAR 0 6
11092: PPUSH
11093: CALL_OW 264
11097: PUSH
11098: LD_INT 2
11100: PUSH
11101: LD_INT 42
11103: PUSH
11104: LD_INT 24
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: IN
11112: IFFALSE 11133
// points := [ 25 , 5 , 3 ] ;
11114: LD_ADDR_VAR 0 9
11118: PUSH
11119: LD_INT 25
11121: PUSH
11122: LD_INT 5
11124: PUSH
11125: LD_INT 3
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: LIST
11132: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
11133: LD_VAR 0 6
11137: PPUSH
11138: CALL_OW 264
11142: PUSH
11143: LD_INT 4
11145: PUSH
11146: LD_INT 43
11148: PUSH
11149: LD_INT 25
11151: PUSH
11152: EMPTY
11153: LIST
11154: LIST
11155: LIST
11156: IN
11157: IFFALSE 11178
// points := [ 40 , 15 , 5 ] ;
11159: LD_ADDR_VAR 0 9
11163: PUSH
11164: LD_INT 40
11166: PUSH
11167: LD_INT 15
11169: PUSH
11170: LD_INT 5
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: LIST
11177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
11178: LD_VAR 0 6
11182: PPUSH
11183: CALL_OW 264
11187: PUSH
11188: LD_INT 3
11190: PUSH
11191: LD_INT 23
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: IN
11198: IFFALSE 11219
// points := [ 7 , 25 , 8 ] ;
11200: LD_ADDR_VAR 0 9
11204: PUSH
11205: LD_INT 7
11207: PUSH
11208: LD_INT 25
11210: PUSH
11211: LD_INT 8
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: LIST
11218: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
11219: LD_VAR 0 6
11223: PPUSH
11224: CALL_OW 264
11228: PUSH
11229: LD_INT 5
11231: PUSH
11232: LD_INT 27
11234: PUSH
11235: LD_INT 44
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: LIST
11242: IN
11243: IFFALSE 11264
// points := [ 14 , 50 , 16 ] ;
11245: LD_ADDR_VAR 0 9
11249: PUSH
11250: LD_INT 14
11252: PUSH
11253: LD_INT 50
11255: PUSH
11256: LD_INT 16
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
11264: LD_VAR 0 6
11268: PPUSH
11269: CALL_OW 264
11273: PUSH
11274: LD_INT 6
11276: PUSH
11277: LD_INT 46
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: IN
11284: IFFALSE 11305
// points := [ 32 , 120 , 70 ] ;
11286: LD_ADDR_VAR 0 9
11290: PUSH
11291: LD_INT 32
11293: PUSH
11294: LD_INT 120
11296: PUSH
11297: LD_INT 70
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: LIST
11304: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
11305: LD_VAR 0 6
11309: PPUSH
11310: CALL_OW 264
11314: PUSH
11315: LD_INT 7
11317: PUSH
11318: LD_INT 28
11320: PUSH
11321: LD_INT 45
11323: PUSH
11324: LD_EXP 49
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: IN
11335: IFFALSE 11356
// points := [ 35 , 20 , 45 ] ;
11337: LD_ADDR_VAR 0 9
11341: PUSH
11342: LD_INT 35
11344: PUSH
11345: LD_INT 20
11347: PUSH
11348: LD_INT 45
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
11356: LD_VAR 0 6
11360: PPUSH
11361: CALL_OW 264
11365: PUSH
11366: LD_INT 47
11368: PUSH
11369: EMPTY
11370: LIST
11371: IN
11372: IFFALSE 11393
// points := [ 67 , 45 , 75 ] ;
11374: LD_ADDR_VAR 0 9
11378: PUSH
11379: LD_INT 67
11381: PUSH
11382: LD_INT 45
11384: PUSH
11385: LD_INT 75
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
11393: LD_VAR 0 6
11397: PPUSH
11398: CALL_OW 264
11402: PUSH
11403: LD_INT 26
11405: PUSH
11406: EMPTY
11407: LIST
11408: IN
11409: IFFALSE 11430
// points := [ 120 , 30 , 80 ] ;
11411: LD_ADDR_VAR 0 9
11415: PUSH
11416: LD_INT 120
11418: PUSH
11419: LD_INT 30
11421: PUSH
11422: LD_INT 80
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
11430: LD_VAR 0 6
11434: PPUSH
11435: CALL_OW 264
11439: PUSH
11440: LD_INT 22
11442: PUSH
11443: EMPTY
11444: LIST
11445: IN
11446: IFFALSE 11467
// points := [ 40 , 1 , 1 ] ;
11448: LD_ADDR_VAR 0 9
11452: PUSH
11453: LD_INT 40
11455: PUSH
11456: LD_INT 1
11458: PUSH
11459: LD_INT 1
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
11467: LD_VAR 0 6
11471: PPUSH
11472: CALL_OW 264
11476: PUSH
11477: LD_INT 29
11479: PUSH
11480: EMPTY
11481: LIST
11482: IN
11483: IFFALSE 11504
// points := [ 70 , 200 , 400 ] ;
11485: LD_ADDR_VAR 0 9
11489: PUSH
11490: LD_INT 70
11492: PUSH
11493: LD_INT 200
11495: PUSH
11496: LD_INT 400
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: LIST
11503: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
11504: LD_VAR 0 6
11508: PPUSH
11509: CALL_OW 264
11513: PUSH
11514: LD_INT 14
11516: PUSH
11517: LD_INT 53
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: IN
11524: IFFALSE 11545
// points := [ 40 , 10 , 20 ] ;
11526: LD_ADDR_VAR 0 9
11530: PUSH
11531: LD_INT 40
11533: PUSH
11534: LD_INT 10
11536: PUSH
11537: LD_INT 20
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: LIST
11544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
11545: LD_VAR 0 6
11549: PPUSH
11550: CALL_OW 264
11554: PUSH
11555: LD_INT 9
11557: PUSH
11558: EMPTY
11559: LIST
11560: IN
11561: IFFALSE 11582
// points := [ 5 , 70 , 20 ] ;
11563: LD_ADDR_VAR 0 9
11567: PUSH
11568: LD_INT 5
11570: PUSH
11571: LD_INT 70
11573: PUSH
11574: LD_INT 20
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11582: LD_VAR 0 6
11586: PPUSH
11587: CALL_OW 264
11591: PUSH
11592: LD_INT 10
11594: PUSH
11595: EMPTY
11596: LIST
11597: IN
11598: IFFALSE 11619
// points := [ 35 , 110 , 70 ] ;
11600: LD_ADDR_VAR 0 9
11604: PUSH
11605: LD_INT 35
11607: PUSH
11608: LD_INT 110
11610: PUSH
11611: LD_INT 70
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11619: LD_VAR 0 6
11623: PPUSH
11624: CALL_OW 265
11628: PUSH
11629: LD_INT 25
11631: EQUAL
11632: IFFALSE 11653
// points := [ 80 , 65 , 100 ] ;
11634: LD_ADDR_VAR 0 9
11638: PUSH
11639: LD_INT 80
11641: PUSH
11642: LD_INT 65
11644: PUSH
11645: LD_INT 100
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11653: LD_VAR 0 6
11657: PPUSH
11658: CALL_OW 263
11662: PUSH
11663: LD_INT 1
11665: EQUAL
11666: IFFALSE 11701
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11668: LD_ADDR_VAR 0 10
11672: PUSH
11673: LD_VAR 0 10
11677: PUSH
11678: LD_VAR 0 6
11682: PPUSH
11683: CALL_OW 311
11687: PPUSH
11688: LD_INT 3
11690: PPUSH
11691: CALL_OW 259
11695: PUSH
11696: LD_INT 4
11698: MUL
11699: MUL
11700: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11701: LD_VAR 0 6
11705: PPUSH
11706: CALL_OW 263
11710: PUSH
11711: LD_INT 2
11713: EQUAL
11714: IFFALSE 11765
// begin j := IsControledBy ( i ) ;
11716: LD_ADDR_VAR 0 7
11720: PUSH
11721: LD_VAR 0 6
11725: PPUSH
11726: CALL_OW 312
11730: ST_TO_ADDR
// if j then
11731: LD_VAR 0 7
11735: IFFALSE 11765
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11737: LD_ADDR_VAR 0 10
11741: PUSH
11742: LD_VAR 0 10
11746: PUSH
11747: LD_VAR 0 7
11751: PPUSH
11752: LD_INT 3
11754: PPUSH
11755: CALL_OW 259
11759: PUSH
11760: LD_INT 3
11762: MUL
11763: MUL
11764: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11765: LD_VAR 0 6
11769: PPUSH
11770: CALL_OW 264
11774: PUSH
11775: LD_INT 5
11777: PUSH
11778: LD_INT 6
11780: PUSH
11781: LD_INT 46
11783: PUSH
11784: LD_INT 44
11786: PUSH
11787: LD_INT 47
11789: PUSH
11790: LD_INT 45
11792: PUSH
11793: LD_INT 28
11795: PUSH
11796: LD_INT 7
11798: PUSH
11799: LD_INT 27
11801: PUSH
11802: LD_INT 29
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: IN
11817: PUSH
11818: LD_VAR 0 1
11822: PPUSH
11823: LD_INT 52
11825: PPUSH
11826: CALL_OW 321
11830: PUSH
11831: LD_INT 2
11833: EQUAL
11834: AND
11835: IFFALSE 11852
// bpoints := bpoints * 1.2 ;
11837: LD_ADDR_VAR 0 10
11841: PUSH
11842: LD_VAR 0 10
11846: PUSH
11847: LD_REAL  1.20000000000000E+0000
11850: MUL
11851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11852: LD_VAR 0 6
11856: PPUSH
11857: CALL_OW 264
11861: PUSH
11862: LD_INT 6
11864: PUSH
11865: LD_INT 46
11867: PUSH
11868: LD_INT 47
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: LIST
11875: IN
11876: IFFALSE 11893
// bpoints := bpoints * 1.2 ;
11878: LD_ADDR_VAR 0 10
11882: PUSH
11883: LD_VAR 0 10
11887: PUSH
11888: LD_REAL  1.20000000000000E+0000
11891: MUL
11892: ST_TO_ADDR
// end ; unit_building :
11893: GO 11907
11895: LD_INT 3
11897: DOUBLE
11898: EQUAL
11899: IFTRUE 11903
11901: GO 11906
11903: POP
// ; end ;
11904: GO 11907
11906: POP
// for j = 1 to 3 do
11907: LD_ADDR_VAR 0 7
11911: PUSH
11912: DOUBLE
11913: LD_INT 1
11915: DEC
11916: ST_TO_ADDR
11917: LD_INT 3
11919: PUSH
11920: FOR_TO
11921: IFFALSE 11974
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11923: LD_ADDR_VAR 0 5
11927: PUSH
11928: LD_VAR 0 5
11932: PPUSH
11933: LD_VAR 0 7
11937: PPUSH
11938: LD_VAR 0 5
11942: PUSH
11943: LD_VAR 0 7
11947: ARRAY
11948: PUSH
11949: LD_VAR 0 9
11953: PUSH
11954: LD_VAR 0 7
11958: ARRAY
11959: PUSH
11960: LD_VAR 0 10
11964: MUL
11965: PLUS
11966: PPUSH
11967: CALL_OW 1
11971: ST_TO_ADDR
11972: GO 11920
11974: POP
11975: POP
// end ;
11976: GO 10453
11978: POP
11979: POP
// result := Replace ( result , 4 , tmp ) ;
11980: LD_ADDR_VAR 0 5
11984: PUSH
11985: LD_VAR 0 5
11989: PPUSH
11990: LD_INT 4
11992: PPUSH
11993: LD_VAR 0 8
11997: PPUSH
11998: CALL_OW 1
12002: ST_TO_ADDR
// end ;
12003: LD_VAR 0 5
12007: RET
// export function DangerAtRange ( unit , range ) ; begin
12008: LD_INT 0
12010: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
12011: LD_ADDR_VAR 0 3
12015: PUSH
12016: LD_VAR 0 1
12020: PPUSH
12021: CALL_OW 255
12025: PPUSH
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 250
12035: PPUSH
12036: LD_VAR 0 1
12040: PPUSH
12041: CALL_OW 251
12045: PPUSH
12046: LD_VAR 0 2
12050: PPUSH
12051: CALL 10305 0 4
12055: ST_TO_ADDR
// end ;
12056: LD_VAR 0 3
12060: RET
// export function DangerInArea ( side , area ) ; begin
12061: LD_INT 0
12063: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
12064: LD_ADDR_VAR 0 3
12068: PUSH
12069: LD_VAR 0 2
12073: PPUSH
12074: LD_INT 81
12076: PUSH
12077: LD_VAR 0 1
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PPUSH
12086: CALL_OW 70
12090: ST_TO_ADDR
// end ;
12091: LD_VAR 0 3
12095: RET
// export function IsExtension ( b ) ; begin
12096: LD_INT 0
12098: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
12099: LD_ADDR_VAR 0 2
12103: PUSH
12104: LD_VAR 0 1
12108: PUSH
12109: LD_INT 23
12111: PUSH
12112: LD_INT 20
12114: PUSH
12115: LD_INT 22
12117: PUSH
12118: LD_INT 17
12120: PUSH
12121: LD_INT 24
12123: PUSH
12124: LD_INT 21
12126: PUSH
12127: LD_INT 19
12129: PUSH
12130: LD_INT 16
12132: PUSH
12133: LD_INT 25
12135: PUSH
12136: LD_INT 18
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: IN
12151: ST_TO_ADDR
// end ;
12152: LD_VAR 0 2
12156: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
12157: LD_INT 0
12159: PPUSH
12160: PPUSH
12161: PPUSH
// result := [ ] ;
12162: LD_ADDR_VAR 0 4
12166: PUSH
12167: EMPTY
12168: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
12169: LD_ADDR_VAR 0 5
12173: PUSH
12174: LD_VAR 0 2
12178: PPUSH
12179: LD_INT 21
12181: PUSH
12182: LD_INT 3
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PPUSH
12189: CALL_OW 70
12193: ST_TO_ADDR
// if not tmp then
12194: LD_VAR 0 5
12198: NOT
12199: IFFALSE 12203
// exit ;
12201: GO 12267
// if checkLink then
12203: LD_VAR 0 3
12207: IFFALSE 12257
// begin for i in tmp do
12209: LD_ADDR_VAR 0 6
12213: PUSH
12214: LD_VAR 0 5
12218: PUSH
12219: FOR_IN
12220: IFFALSE 12255
// if GetBase ( i ) <> base then
12222: LD_VAR 0 6
12226: PPUSH
12227: CALL_OW 274
12231: PUSH
12232: LD_VAR 0 1
12236: NONEQUAL
12237: IFFALSE 12253
// ComLinkToBase ( base , i ) ;
12239: LD_VAR 0 1
12243: PPUSH
12244: LD_VAR 0 6
12248: PPUSH
12249: CALL_OW 169
12253: GO 12219
12255: POP
12256: POP
// end ; result := tmp ;
12257: LD_ADDR_VAR 0 4
12261: PUSH
12262: LD_VAR 0 5
12266: ST_TO_ADDR
// end ;
12267: LD_VAR 0 4
12271: RET
// export function ComComplete ( units , b ) ; var i ; begin
12272: LD_INT 0
12274: PPUSH
12275: PPUSH
// if not units then
12276: LD_VAR 0 1
12280: NOT
12281: IFFALSE 12285
// exit ;
12283: GO 12375
// for i in units do
12285: LD_ADDR_VAR 0 4
12289: PUSH
12290: LD_VAR 0 1
12294: PUSH
12295: FOR_IN
12296: IFFALSE 12373
// if BuildingStatus ( b ) = bs_build then
12298: LD_VAR 0 2
12302: PPUSH
12303: CALL_OW 461
12307: PUSH
12308: LD_INT 1
12310: EQUAL
12311: IFFALSE 12371
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
12313: LD_VAR 0 4
12317: PPUSH
12318: LD_STRING h
12320: PUSH
12321: LD_VAR 0 2
12325: PPUSH
12326: CALL_OW 250
12330: PUSH
12331: LD_VAR 0 2
12335: PPUSH
12336: CALL_OW 251
12340: PUSH
12341: LD_VAR 0 2
12345: PUSH
12346: LD_INT 0
12348: PUSH
12349: LD_INT 0
12351: PUSH
12352: LD_INT 0
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: PUSH
12364: EMPTY
12365: LIST
12366: PPUSH
12367: CALL_OW 446
12371: GO 12295
12373: POP
12374: POP
// end ;
12375: LD_VAR 0 3
12379: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
12380: LD_INT 0
12382: PPUSH
12383: PPUSH
12384: PPUSH
12385: PPUSH
12386: PPUSH
12387: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
12388: LD_VAR 0 1
12392: NOT
12393: PUSH
12394: LD_VAR 0 1
12398: PPUSH
12399: CALL_OW 263
12403: PUSH
12404: LD_INT 2
12406: NONEQUAL
12407: OR
12408: IFFALSE 12412
// exit ;
12410: GO 12728
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
12412: LD_ADDR_VAR 0 6
12416: PUSH
12417: LD_INT 22
12419: PUSH
12420: LD_VAR 0 1
12424: PPUSH
12425: CALL_OW 255
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 2
12436: PUSH
12437: LD_INT 30
12439: PUSH
12440: LD_INT 36
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 34
12449: PUSH
12450: LD_INT 31
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PPUSH
12466: CALL_OW 69
12470: ST_TO_ADDR
// if not tmp then
12471: LD_VAR 0 6
12475: NOT
12476: IFFALSE 12480
// exit ;
12478: GO 12728
// result := [ ] ;
12480: LD_ADDR_VAR 0 2
12484: PUSH
12485: EMPTY
12486: ST_TO_ADDR
// for i in tmp do
12487: LD_ADDR_VAR 0 3
12491: PUSH
12492: LD_VAR 0 6
12496: PUSH
12497: FOR_IN
12498: IFFALSE 12569
// begin t := UnitsInside ( i ) ;
12500: LD_ADDR_VAR 0 4
12504: PUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: CALL_OW 313
12514: ST_TO_ADDR
// if t then
12515: LD_VAR 0 4
12519: IFFALSE 12567
// for j in t do
12521: LD_ADDR_VAR 0 7
12525: PUSH
12526: LD_VAR 0 4
12530: PUSH
12531: FOR_IN
12532: IFFALSE 12565
// result := Replace ( result , result + 1 , j ) ;
12534: LD_ADDR_VAR 0 2
12538: PUSH
12539: LD_VAR 0 2
12543: PPUSH
12544: LD_VAR 0 2
12548: PUSH
12549: LD_INT 1
12551: PLUS
12552: PPUSH
12553: LD_VAR 0 7
12557: PPUSH
12558: CALL_OW 1
12562: ST_TO_ADDR
12563: GO 12531
12565: POP
12566: POP
// end ;
12567: GO 12497
12569: POP
12570: POP
// if not result then
12571: LD_VAR 0 2
12575: NOT
12576: IFFALSE 12580
// exit ;
12578: GO 12728
// mech := result [ 1 ] ;
12580: LD_ADDR_VAR 0 5
12584: PUSH
12585: LD_VAR 0 2
12589: PUSH
12590: LD_INT 1
12592: ARRAY
12593: ST_TO_ADDR
// if result > 1 then
12594: LD_VAR 0 2
12598: PUSH
12599: LD_INT 1
12601: GREATER
12602: IFFALSE 12714
// begin for i = 2 to result do
12604: LD_ADDR_VAR 0 3
12608: PUSH
12609: DOUBLE
12610: LD_INT 2
12612: DEC
12613: ST_TO_ADDR
12614: LD_VAR 0 2
12618: PUSH
12619: FOR_TO
12620: IFFALSE 12712
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12622: LD_ADDR_VAR 0 4
12626: PUSH
12627: LD_VAR 0 2
12631: PUSH
12632: LD_VAR 0 3
12636: ARRAY
12637: PPUSH
12638: LD_INT 3
12640: PPUSH
12641: CALL_OW 259
12645: PUSH
12646: LD_VAR 0 2
12650: PUSH
12651: LD_VAR 0 3
12655: ARRAY
12656: PPUSH
12657: CALL_OW 432
12661: MINUS
12662: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12663: LD_VAR 0 4
12667: PUSH
12668: LD_VAR 0 5
12672: PPUSH
12673: LD_INT 3
12675: PPUSH
12676: CALL_OW 259
12680: PUSH
12681: LD_VAR 0 5
12685: PPUSH
12686: CALL_OW 432
12690: MINUS
12691: GREATEREQUAL
12692: IFFALSE 12710
// mech := result [ i ] ;
12694: LD_ADDR_VAR 0 5
12698: PUSH
12699: LD_VAR 0 2
12703: PUSH
12704: LD_VAR 0 3
12708: ARRAY
12709: ST_TO_ADDR
// end ;
12710: GO 12619
12712: POP
12713: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12714: LD_VAR 0 1
12718: PPUSH
12719: LD_VAR 0 5
12723: PPUSH
12724: CALL_OW 135
// end ;
12728: LD_VAR 0 2
12732: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12733: LD_INT 0
12735: PPUSH
12736: PPUSH
12737: PPUSH
12738: PPUSH
12739: PPUSH
12740: PPUSH
12741: PPUSH
12742: PPUSH
12743: PPUSH
12744: PPUSH
12745: PPUSH
12746: PPUSH
12747: PPUSH
// result := [ ] ;
12748: LD_ADDR_VAR 0 7
12752: PUSH
12753: EMPTY
12754: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12755: LD_VAR 0 1
12759: PPUSH
12760: CALL_OW 266
12764: PUSH
12765: LD_INT 0
12767: PUSH
12768: LD_INT 1
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: IN
12775: NOT
12776: IFFALSE 12780
// exit ;
12778: GO 14414
// if name then
12780: LD_VAR 0 3
12784: IFFALSE 12800
// SetBName ( base_dep , name ) ;
12786: LD_VAR 0 1
12790: PPUSH
12791: LD_VAR 0 3
12795: PPUSH
12796: CALL_OW 500
// base := GetBase ( base_dep ) ;
12800: LD_ADDR_VAR 0 15
12804: PUSH
12805: LD_VAR 0 1
12809: PPUSH
12810: CALL_OW 274
12814: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12815: LD_ADDR_VAR 0 16
12819: PUSH
12820: LD_VAR 0 1
12824: PPUSH
12825: CALL_OW 255
12829: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12830: LD_ADDR_VAR 0 17
12834: PUSH
12835: LD_VAR 0 1
12839: PPUSH
12840: CALL_OW 248
12844: ST_TO_ADDR
// if sources then
12845: LD_VAR 0 5
12849: IFFALSE 12896
// for i = 1 to 3 do
12851: LD_ADDR_VAR 0 8
12855: PUSH
12856: DOUBLE
12857: LD_INT 1
12859: DEC
12860: ST_TO_ADDR
12861: LD_INT 3
12863: PUSH
12864: FOR_TO
12865: IFFALSE 12894
// AddResourceType ( base , i , sources [ i ] ) ;
12867: LD_VAR 0 15
12871: PPUSH
12872: LD_VAR 0 8
12876: PPUSH
12877: LD_VAR 0 5
12881: PUSH
12882: LD_VAR 0 8
12886: ARRAY
12887: PPUSH
12888: CALL_OW 276
12892: GO 12864
12894: POP
12895: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12896: LD_ADDR_VAR 0 18
12900: PUSH
12901: LD_VAR 0 15
12905: PPUSH
12906: LD_VAR 0 2
12910: PPUSH
12911: LD_INT 1
12913: PPUSH
12914: CALL 12157 0 3
12918: ST_TO_ADDR
// InitHc ;
12919: CALL_OW 19
// InitUc ;
12923: CALL_OW 18
// uc_side := side ;
12927: LD_ADDR_OWVAR 20
12931: PUSH
12932: LD_VAR 0 16
12936: ST_TO_ADDR
// uc_nation := nation ;
12937: LD_ADDR_OWVAR 21
12941: PUSH
12942: LD_VAR 0 17
12946: ST_TO_ADDR
// if buildings then
12947: LD_VAR 0 18
12951: IFFALSE 14273
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12953: LD_ADDR_VAR 0 19
12957: PUSH
12958: LD_VAR 0 18
12962: PPUSH
12963: LD_INT 2
12965: PUSH
12966: LD_INT 30
12968: PUSH
12969: LD_INT 29
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PUSH
12976: LD_INT 30
12978: PUSH
12979: LD_INT 30
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 72
12995: ST_TO_ADDR
// if tmp then
12996: LD_VAR 0 19
13000: IFFALSE 13048
// for i in tmp do
13002: LD_ADDR_VAR 0 8
13006: PUSH
13007: LD_VAR 0 19
13011: PUSH
13012: FOR_IN
13013: IFFALSE 13046
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13015: LD_VAR 0 8
13019: PPUSH
13020: CALL_OW 250
13024: PPUSH
13025: LD_VAR 0 8
13029: PPUSH
13030: CALL_OW 251
13034: PPUSH
13035: LD_VAR 0 16
13039: PPUSH
13040: CALL_OW 441
13044: GO 13012
13046: POP
13047: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13048: LD_VAR 0 18
13052: PPUSH
13053: LD_INT 2
13055: PUSH
13056: LD_INT 30
13058: PUSH
13059: LD_INT 32
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: LD_INT 30
13068: PUSH
13069: LD_INT 33
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: EMPTY
13077: LIST
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 72
13085: IFFALSE 13173
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13087: LD_ADDR_VAR 0 8
13091: PUSH
13092: LD_VAR 0 18
13096: PPUSH
13097: LD_INT 2
13099: PUSH
13100: LD_INT 30
13102: PUSH
13103: LD_INT 32
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: LD_INT 30
13112: PUSH
13113: LD_INT 33
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: PPUSH
13125: CALL_OW 72
13129: PUSH
13130: FOR_IN
13131: IFFALSE 13171
// begin if not GetBWeapon ( i ) then
13133: LD_VAR 0 8
13137: PPUSH
13138: CALL_OW 269
13142: NOT
13143: IFFALSE 13169
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13145: LD_VAR 0 8
13149: PPUSH
13150: LD_VAR 0 8
13154: PPUSH
13155: LD_VAR 0 2
13159: PPUSH
13160: CALL 14419 0 2
13164: PPUSH
13165: CALL_OW 431
// end ;
13169: GO 13130
13171: POP
13172: POP
// end ; for i = 1 to personel do
13173: LD_ADDR_VAR 0 8
13177: PUSH
13178: DOUBLE
13179: LD_INT 1
13181: DEC
13182: ST_TO_ADDR
13183: LD_VAR 0 6
13187: PUSH
13188: FOR_TO
13189: IFFALSE 14253
// begin if i > 4 then
13191: LD_VAR 0 8
13195: PUSH
13196: LD_INT 4
13198: GREATER
13199: IFFALSE 13203
// break ;
13201: GO 14253
// case i of 1 :
13203: LD_VAR 0 8
13207: PUSH
13208: LD_INT 1
13210: DOUBLE
13211: EQUAL
13212: IFTRUE 13216
13214: GO 13296
13216: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13217: LD_ADDR_VAR 0 12
13221: PUSH
13222: LD_VAR 0 18
13226: PPUSH
13227: LD_INT 22
13229: PUSH
13230: LD_VAR 0 16
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: PUSH
13239: LD_INT 58
13241: PUSH
13242: EMPTY
13243: LIST
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: LD_INT 30
13250: PUSH
13251: LD_INT 32
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 30
13260: PUSH
13261: LD_INT 4
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 30
13270: PUSH
13271: LD_INT 5
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 72
13293: ST_TO_ADDR
13294: GO 13518
13296: LD_INT 2
13298: DOUBLE
13299: EQUAL
13300: IFTRUE 13304
13302: GO 13366
13304: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13305: LD_ADDR_VAR 0 12
13309: PUSH
13310: LD_VAR 0 18
13314: PPUSH
13315: LD_INT 22
13317: PUSH
13318: LD_VAR 0 16
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: PUSH
13327: LD_INT 2
13329: PUSH
13330: LD_INT 30
13332: PUSH
13333: LD_INT 0
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 30
13342: PUSH
13343: LD_INT 1
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: LIST
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PPUSH
13359: CALL_OW 72
13363: ST_TO_ADDR
13364: GO 13518
13366: LD_INT 3
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13436
13374: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13375: LD_ADDR_VAR 0 12
13379: PUSH
13380: LD_VAR 0 18
13384: PPUSH
13385: LD_INT 22
13387: PUSH
13388: LD_VAR 0 16
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: LD_INT 2
13399: PUSH
13400: LD_INT 30
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 30
13412: PUSH
13413: LD_INT 3
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PPUSH
13429: CALL_OW 72
13433: ST_TO_ADDR
13434: GO 13518
13436: LD_INT 4
13438: DOUBLE
13439: EQUAL
13440: IFTRUE 13444
13442: GO 13517
13444: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13445: LD_ADDR_VAR 0 12
13449: PUSH
13450: LD_VAR 0 18
13454: PPUSH
13455: LD_INT 22
13457: PUSH
13458: LD_VAR 0 16
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 2
13469: PUSH
13470: LD_INT 30
13472: PUSH
13473: LD_INT 6
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: LD_INT 30
13482: PUSH
13483: LD_INT 7
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: PUSH
13490: LD_INT 30
13492: PUSH
13493: LD_INT 8
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PPUSH
13510: CALL_OW 72
13514: ST_TO_ADDR
13515: GO 13518
13517: POP
// if i = 1 then
13518: LD_VAR 0 8
13522: PUSH
13523: LD_INT 1
13525: EQUAL
13526: IFFALSE 13637
// begin tmp := [ ] ;
13528: LD_ADDR_VAR 0 19
13532: PUSH
13533: EMPTY
13534: ST_TO_ADDR
// for j in f do
13535: LD_ADDR_VAR 0 9
13539: PUSH
13540: LD_VAR 0 12
13544: PUSH
13545: FOR_IN
13546: IFFALSE 13619
// if GetBType ( j ) = b_bunker then
13548: LD_VAR 0 9
13552: PPUSH
13553: CALL_OW 266
13557: PUSH
13558: LD_INT 32
13560: EQUAL
13561: IFFALSE 13588
// tmp := Insert ( tmp , 1 , j ) else
13563: LD_ADDR_VAR 0 19
13567: PUSH
13568: LD_VAR 0 19
13572: PPUSH
13573: LD_INT 1
13575: PPUSH
13576: LD_VAR 0 9
13580: PPUSH
13581: CALL_OW 2
13585: ST_TO_ADDR
13586: GO 13617
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13588: LD_ADDR_VAR 0 19
13592: PUSH
13593: LD_VAR 0 19
13597: PPUSH
13598: LD_VAR 0 19
13602: PUSH
13603: LD_INT 1
13605: PLUS
13606: PPUSH
13607: LD_VAR 0 9
13611: PPUSH
13612: CALL_OW 2
13616: ST_TO_ADDR
13617: GO 13545
13619: POP
13620: POP
// if tmp then
13621: LD_VAR 0 19
13625: IFFALSE 13637
// f := tmp ;
13627: LD_ADDR_VAR 0 12
13631: PUSH
13632: LD_VAR 0 19
13636: ST_TO_ADDR
// end ; x := personel [ i ] ;
13637: LD_ADDR_VAR 0 13
13641: PUSH
13642: LD_VAR 0 6
13646: PUSH
13647: LD_VAR 0 8
13651: ARRAY
13652: ST_TO_ADDR
// if x = - 1 then
13653: LD_VAR 0 13
13657: PUSH
13658: LD_INT 1
13660: NEG
13661: EQUAL
13662: IFFALSE 13871
// begin for j in f do
13664: LD_ADDR_VAR 0 9
13668: PUSH
13669: LD_VAR 0 12
13673: PUSH
13674: FOR_IN
13675: IFFALSE 13867
// repeat InitHc ;
13677: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13681: LD_VAR 0 9
13685: PPUSH
13686: CALL_OW 266
13690: PUSH
13691: LD_INT 5
13693: EQUAL
13694: IFFALSE 13764
// begin if UnitsInside ( j ) < 3 then
13696: LD_VAR 0 9
13700: PPUSH
13701: CALL_OW 313
13705: PUSH
13706: LD_INT 3
13708: LESS
13709: IFFALSE 13745
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13711: LD_INT 0
13713: PPUSH
13714: LD_INT 5
13716: PUSH
13717: LD_INT 8
13719: PUSH
13720: LD_INT 9
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: PUSH
13728: LD_VAR 0 17
13732: ARRAY
13733: PPUSH
13734: LD_VAR 0 4
13738: PPUSH
13739: CALL_OW 380
13743: GO 13762
// PrepareHuman ( false , i , skill ) ;
13745: LD_INT 0
13747: PPUSH
13748: LD_VAR 0 8
13752: PPUSH
13753: LD_VAR 0 4
13757: PPUSH
13758: CALL_OW 380
// end else
13762: GO 13781
// PrepareHuman ( false , i , skill ) ;
13764: LD_INT 0
13766: PPUSH
13767: LD_VAR 0 8
13771: PPUSH
13772: LD_VAR 0 4
13776: PPUSH
13777: CALL_OW 380
// un := CreateHuman ;
13781: LD_ADDR_VAR 0 14
13785: PUSH
13786: CALL_OW 44
13790: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13791: LD_ADDR_VAR 0 7
13795: PUSH
13796: LD_VAR 0 7
13800: PPUSH
13801: LD_INT 1
13803: PPUSH
13804: LD_VAR 0 14
13808: PPUSH
13809: CALL_OW 2
13813: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13814: LD_VAR 0 14
13818: PPUSH
13819: LD_VAR 0 9
13823: PPUSH
13824: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13828: LD_VAR 0 9
13832: PPUSH
13833: CALL_OW 313
13837: PUSH
13838: LD_INT 6
13840: EQUAL
13841: PUSH
13842: LD_VAR 0 9
13846: PPUSH
13847: CALL_OW 266
13851: PUSH
13852: LD_INT 32
13854: PUSH
13855: LD_INT 31
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: IN
13862: OR
13863: IFFALSE 13677
13865: GO 13674
13867: POP
13868: POP
// end else
13869: GO 14251
// for j = 1 to x do
13871: LD_ADDR_VAR 0 9
13875: PUSH
13876: DOUBLE
13877: LD_INT 1
13879: DEC
13880: ST_TO_ADDR
13881: LD_VAR 0 13
13885: PUSH
13886: FOR_TO
13887: IFFALSE 14249
// begin InitHc ;
13889: CALL_OW 19
// if not f then
13893: LD_VAR 0 12
13897: NOT
13898: IFFALSE 13987
// begin PrepareHuman ( false , i , skill ) ;
13900: LD_INT 0
13902: PPUSH
13903: LD_VAR 0 8
13907: PPUSH
13908: LD_VAR 0 4
13912: PPUSH
13913: CALL_OW 380
// un := CreateHuman ;
13917: LD_ADDR_VAR 0 14
13921: PUSH
13922: CALL_OW 44
13926: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13927: LD_ADDR_VAR 0 7
13931: PUSH
13932: LD_VAR 0 7
13936: PPUSH
13937: LD_INT 1
13939: PPUSH
13940: LD_VAR 0 14
13944: PPUSH
13945: CALL_OW 2
13949: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13950: LD_VAR 0 14
13954: PPUSH
13955: LD_VAR 0 1
13959: PPUSH
13960: CALL_OW 250
13964: PPUSH
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 251
13974: PPUSH
13975: LD_INT 10
13977: PPUSH
13978: LD_INT 0
13980: PPUSH
13981: CALL_OW 50
// continue ;
13985: GO 13886
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13987: LD_VAR 0 12
13991: PUSH
13992: LD_INT 1
13994: ARRAY
13995: PPUSH
13996: CALL_OW 313
14000: PUSH
14001: LD_VAR 0 12
14005: PUSH
14006: LD_INT 1
14008: ARRAY
14009: PPUSH
14010: CALL_OW 266
14014: PUSH
14015: LD_INT 32
14017: PUSH
14018: LD_INT 31
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: IN
14025: AND
14026: PUSH
14027: LD_VAR 0 12
14031: PUSH
14032: LD_INT 1
14034: ARRAY
14035: PPUSH
14036: CALL_OW 313
14040: PUSH
14041: LD_INT 6
14043: EQUAL
14044: OR
14045: IFFALSE 14065
// f := Delete ( f , 1 ) ;
14047: LD_ADDR_VAR 0 12
14051: PUSH
14052: LD_VAR 0 12
14056: PPUSH
14057: LD_INT 1
14059: PPUSH
14060: CALL_OW 3
14064: ST_TO_ADDR
// if not f then
14065: LD_VAR 0 12
14069: NOT
14070: IFFALSE 14088
// begin x := x + 2 ;
14072: LD_ADDR_VAR 0 13
14076: PUSH
14077: LD_VAR 0 13
14081: PUSH
14082: LD_INT 2
14084: PLUS
14085: ST_TO_ADDR
// continue ;
14086: GO 13886
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14088: LD_VAR 0 12
14092: PUSH
14093: LD_INT 1
14095: ARRAY
14096: PPUSH
14097: CALL_OW 266
14101: PUSH
14102: LD_INT 5
14104: EQUAL
14105: IFFALSE 14179
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14107: LD_VAR 0 12
14111: PUSH
14112: LD_INT 1
14114: ARRAY
14115: PPUSH
14116: CALL_OW 313
14120: PUSH
14121: LD_INT 3
14123: LESS
14124: IFFALSE 14160
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14126: LD_INT 0
14128: PPUSH
14129: LD_INT 5
14131: PUSH
14132: LD_INT 8
14134: PUSH
14135: LD_INT 9
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: LIST
14142: PUSH
14143: LD_VAR 0 17
14147: ARRAY
14148: PPUSH
14149: LD_VAR 0 4
14153: PPUSH
14154: CALL_OW 380
14158: GO 14177
// PrepareHuman ( false , i , skill ) ;
14160: LD_INT 0
14162: PPUSH
14163: LD_VAR 0 8
14167: PPUSH
14168: LD_VAR 0 4
14172: PPUSH
14173: CALL_OW 380
// end else
14177: GO 14196
// PrepareHuman ( false , i , skill ) ;
14179: LD_INT 0
14181: PPUSH
14182: LD_VAR 0 8
14186: PPUSH
14187: LD_VAR 0 4
14191: PPUSH
14192: CALL_OW 380
// un := CreateHuman ;
14196: LD_ADDR_VAR 0 14
14200: PUSH
14201: CALL_OW 44
14205: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14206: LD_ADDR_VAR 0 7
14210: PUSH
14211: LD_VAR 0 7
14215: PPUSH
14216: LD_INT 1
14218: PPUSH
14219: LD_VAR 0 14
14223: PPUSH
14224: CALL_OW 2
14228: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14229: LD_VAR 0 14
14233: PPUSH
14234: LD_VAR 0 12
14238: PUSH
14239: LD_INT 1
14241: ARRAY
14242: PPUSH
14243: CALL_OW 52
// end ;
14247: GO 13886
14249: POP
14250: POP
// end ;
14251: GO 13188
14253: POP
14254: POP
// result := result ^ buildings ;
14255: LD_ADDR_VAR 0 7
14259: PUSH
14260: LD_VAR 0 7
14264: PUSH
14265: LD_VAR 0 18
14269: ADD
14270: ST_TO_ADDR
// end else
14271: GO 14414
// begin for i = 1 to personel do
14273: LD_ADDR_VAR 0 8
14277: PUSH
14278: DOUBLE
14279: LD_INT 1
14281: DEC
14282: ST_TO_ADDR
14283: LD_VAR 0 6
14287: PUSH
14288: FOR_TO
14289: IFFALSE 14412
// begin if i > 4 then
14291: LD_VAR 0 8
14295: PUSH
14296: LD_INT 4
14298: GREATER
14299: IFFALSE 14303
// break ;
14301: GO 14412
// x := personel [ i ] ;
14303: LD_ADDR_VAR 0 13
14307: PUSH
14308: LD_VAR 0 6
14312: PUSH
14313: LD_VAR 0 8
14317: ARRAY
14318: ST_TO_ADDR
// if x = - 1 then
14319: LD_VAR 0 13
14323: PUSH
14324: LD_INT 1
14326: NEG
14327: EQUAL
14328: IFFALSE 14332
// continue ;
14330: GO 14288
// PrepareHuman ( false , i , skill ) ;
14332: LD_INT 0
14334: PPUSH
14335: LD_VAR 0 8
14339: PPUSH
14340: LD_VAR 0 4
14344: PPUSH
14345: CALL_OW 380
// un := CreateHuman ;
14349: LD_ADDR_VAR 0 14
14353: PUSH
14354: CALL_OW 44
14358: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14359: LD_VAR 0 14
14363: PPUSH
14364: LD_VAR 0 1
14368: PPUSH
14369: CALL_OW 250
14373: PPUSH
14374: LD_VAR 0 1
14378: PPUSH
14379: CALL_OW 251
14383: PPUSH
14384: LD_INT 10
14386: PPUSH
14387: LD_INT 0
14389: PPUSH
14390: CALL_OW 50
// result := result ^ un ;
14394: LD_ADDR_VAR 0 7
14398: PUSH
14399: LD_VAR 0 7
14403: PUSH
14404: LD_VAR 0 14
14408: ADD
14409: ST_TO_ADDR
// end ;
14410: GO 14288
14412: POP
14413: POP
// end ; end ;
14414: LD_VAR 0 7
14418: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
14419: LD_INT 0
14421: PPUSH
14422: PPUSH
14423: PPUSH
14424: PPUSH
14425: PPUSH
14426: PPUSH
14427: PPUSH
14428: PPUSH
14429: PPUSH
14430: PPUSH
14431: PPUSH
14432: PPUSH
14433: PPUSH
14434: PPUSH
14435: PPUSH
14436: PPUSH
// result := false ;
14437: LD_ADDR_VAR 0 3
14441: PUSH
14442: LD_INT 0
14444: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
14445: LD_VAR 0 1
14449: NOT
14450: PUSH
14451: LD_VAR 0 1
14455: PPUSH
14456: CALL_OW 266
14460: PUSH
14461: LD_INT 32
14463: PUSH
14464: LD_INT 33
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: IN
14471: NOT
14472: OR
14473: IFFALSE 14477
// exit ;
14475: GO 15586
// nat := GetNation ( tower ) ;
14477: LD_ADDR_VAR 0 12
14481: PUSH
14482: LD_VAR 0 1
14486: PPUSH
14487: CALL_OW 248
14491: ST_TO_ADDR
// side := GetSide ( tower ) ;
14492: LD_ADDR_VAR 0 16
14496: PUSH
14497: LD_VAR 0 1
14501: PPUSH
14502: CALL_OW 255
14506: ST_TO_ADDR
// x := GetX ( tower ) ;
14507: LD_ADDR_VAR 0 10
14511: PUSH
14512: LD_VAR 0 1
14516: PPUSH
14517: CALL_OW 250
14521: ST_TO_ADDR
// y := GetY ( tower ) ;
14522: LD_ADDR_VAR 0 11
14526: PUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: CALL_OW 251
14536: ST_TO_ADDR
// if not x or not y then
14537: LD_VAR 0 10
14541: NOT
14542: PUSH
14543: LD_VAR 0 11
14547: NOT
14548: OR
14549: IFFALSE 14553
// exit ;
14551: GO 15586
// weapon := 0 ;
14553: LD_ADDR_VAR 0 18
14557: PUSH
14558: LD_INT 0
14560: ST_TO_ADDR
// fac_list := [ ] ;
14561: LD_ADDR_VAR 0 17
14565: PUSH
14566: EMPTY
14567: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
14568: LD_ADDR_VAR 0 6
14572: PUSH
14573: LD_VAR 0 1
14577: PPUSH
14578: CALL_OW 274
14582: PPUSH
14583: LD_VAR 0 2
14587: PPUSH
14588: LD_INT 0
14590: PPUSH
14591: CALL 12157 0 3
14595: PPUSH
14596: LD_INT 30
14598: PUSH
14599: LD_INT 3
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 72
14610: ST_TO_ADDR
// if not factories then
14611: LD_VAR 0 6
14615: NOT
14616: IFFALSE 14620
// exit ;
14618: GO 15586
// for i in factories do
14620: LD_ADDR_VAR 0 8
14624: PUSH
14625: LD_VAR 0 6
14629: PUSH
14630: FOR_IN
14631: IFFALSE 14656
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14633: LD_ADDR_VAR 0 17
14637: PUSH
14638: LD_VAR 0 17
14642: PUSH
14643: LD_VAR 0 8
14647: PPUSH
14648: CALL_OW 478
14652: UNION
14653: ST_TO_ADDR
14654: GO 14630
14656: POP
14657: POP
// if not fac_list then
14658: LD_VAR 0 17
14662: NOT
14663: IFFALSE 14667
// exit ;
14665: GO 15586
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14667: LD_ADDR_VAR 0 5
14671: PUSH
14672: LD_INT 4
14674: PUSH
14675: LD_INT 5
14677: PUSH
14678: LD_INT 9
14680: PUSH
14681: LD_INT 10
14683: PUSH
14684: LD_INT 6
14686: PUSH
14687: LD_INT 7
14689: PUSH
14690: LD_INT 11
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 27
14704: PUSH
14705: LD_INT 28
14707: PUSH
14708: LD_INT 26
14710: PUSH
14711: LD_INT 30
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: PUSH
14720: LD_INT 43
14722: PUSH
14723: LD_INT 44
14725: PUSH
14726: LD_INT 46
14728: PUSH
14729: LD_INT 45
14731: PUSH
14732: LD_INT 47
14734: PUSH
14735: LD_INT 49
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: LIST
14750: PUSH
14751: LD_VAR 0 12
14755: ARRAY
14756: ST_TO_ADDR
// list := list isect fac_list ;
14757: LD_ADDR_VAR 0 5
14761: PUSH
14762: LD_VAR 0 5
14766: PUSH
14767: LD_VAR 0 17
14771: ISECT
14772: ST_TO_ADDR
// if not list then
14773: LD_VAR 0 5
14777: NOT
14778: IFFALSE 14782
// exit ;
14780: GO 15586
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14782: LD_VAR 0 12
14786: PUSH
14787: LD_INT 3
14789: EQUAL
14790: PUSH
14791: LD_INT 49
14793: PUSH
14794: LD_VAR 0 5
14798: IN
14799: AND
14800: PUSH
14801: LD_INT 31
14803: PPUSH
14804: LD_VAR 0 16
14808: PPUSH
14809: CALL_OW 321
14813: PUSH
14814: LD_INT 2
14816: EQUAL
14817: AND
14818: IFFALSE 14878
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14820: LD_INT 22
14822: PUSH
14823: LD_VAR 0 16
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 35
14834: PUSH
14835: LD_INT 49
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: LD_INT 91
14844: PUSH
14845: LD_VAR 0 1
14849: PUSH
14850: LD_INT 10
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: LIST
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: LIST
14862: PPUSH
14863: CALL_OW 69
14867: NOT
14868: IFFALSE 14878
// weapon := ru_time_lapser ;
14870: LD_ADDR_VAR 0 18
14874: PUSH
14875: LD_INT 49
14877: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14878: LD_VAR 0 12
14882: PUSH
14883: LD_INT 1
14885: PUSH
14886: LD_INT 2
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: IN
14893: PUSH
14894: LD_INT 11
14896: PUSH
14897: LD_VAR 0 5
14901: IN
14902: PUSH
14903: LD_INT 30
14905: PUSH
14906: LD_VAR 0 5
14910: IN
14911: OR
14912: AND
14913: PUSH
14914: LD_INT 6
14916: PPUSH
14917: LD_VAR 0 16
14921: PPUSH
14922: CALL_OW 321
14926: PUSH
14927: LD_INT 2
14929: EQUAL
14930: AND
14931: IFFALSE 15096
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14933: LD_INT 22
14935: PUSH
14936: LD_VAR 0 16
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 2
14947: PUSH
14948: LD_INT 35
14950: PUSH
14951: LD_INT 11
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 35
14960: PUSH
14961: LD_INT 30
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 91
14975: PUSH
14976: LD_VAR 0 1
14980: PUSH
14981: LD_INT 18
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: LIST
14993: PPUSH
14994: CALL_OW 69
14998: NOT
14999: PUSH
15000: LD_INT 22
15002: PUSH
15003: LD_VAR 0 16
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 2
15014: PUSH
15015: LD_INT 30
15017: PUSH
15018: LD_INT 32
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 30
15027: PUSH
15028: LD_INT 33
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 91
15042: PUSH
15043: LD_VAR 0 1
15047: PUSH
15048: LD_INT 12
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: LIST
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: LIST
15060: PUSH
15061: EMPTY
15062: LIST
15063: PPUSH
15064: CALL_OW 69
15068: PUSH
15069: LD_INT 2
15071: GREATER
15072: AND
15073: IFFALSE 15096
// weapon := [ us_radar , ar_radar ] [ nat ] ;
15075: LD_ADDR_VAR 0 18
15079: PUSH
15080: LD_INT 11
15082: PUSH
15083: LD_INT 30
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_VAR 0 12
15094: ARRAY
15095: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
15096: LD_VAR 0 18
15100: NOT
15101: PUSH
15102: LD_INT 40
15104: PPUSH
15105: LD_VAR 0 16
15109: PPUSH
15110: CALL_OW 321
15114: PUSH
15115: LD_INT 2
15117: EQUAL
15118: AND
15119: PUSH
15120: LD_INT 7
15122: PUSH
15123: LD_VAR 0 5
15127: IN
15128: PUSH
15129: LD_INT 28
15131: PUSH
15132: LD_VAR 0 5
15136: IN
15137: OR
15138: PUSH
15139: LD_INT 45
15141: PUSH
15142: LD_VAR 0 5
15146: IN
15147: OR
15148: AND
15149: IFFALSE 15403
// begin hex := GetHexInfo ( x , y ) ;
15151: LD_ADDR_VAR 0 4
15155: PUSH
15156: LD_VAR 0 10
15160: PPUSH
15161: LD_VAR 0 11
15165: PPUSH
15166: CALL_OW 546
15170: ST_TO_ADDR
// if hex [ 1 ] then
15171: LD_VAR 0 4
15175: PUSH
15176: LD_INT 1
15178: ARRAY
15179: IFFALSE 15183
// exit ;
15181: GO 15586
// height := hex [ 2 ] ;
15183: LD_ADDR_VAR 0 15
15187: PUSH
15188: LD_VAR 0 4
15192: PUSH
15193: LD_INT 2
15195: ARRAY
15196: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
15197: LD_ADDR_VAR 0 14
15201: PUSH
15202: LD_INT 0
15204: PUSH
15205: LD_INT 2
15207: PUSH
15208: LD_INT 3
15210: PUSH
15211: LD_INT 5
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: ST_TO_ADDR
// for i in tmp do
15220: LD_ADDR_VAR 0 8
15224: PUSH
15225: LD_VAR 0 14
15229: PUSH
15230: FOR_IN
15231: IFFALSE 15401
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
15233: LD_ADDR_VAR 0 9
15237: PUSH
15238: LD_VAR 0 10
15242: PPUSH
15243: LD_VAR 0 8
15247: PPUSH
15248: LD_INT 5
15250: PPUSH
15251: CALL_OW 272
15255: PUSH
15256: LD_VAR 0 11
15260: PPUSH
15261: LD_VAR 0 8
15265: PPUSH
15266: LD_INT 5
15268: PPUSH
15269: CALL_OW 273
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
15278: LD_VAR 0 9
15282: PUSH
15283: LD_INT 1
15285: ARRAY
15286: PPUSH
15287: LD_VAR 0 9
15291: PUSH
15292: LD_INT 2
15294: ARRAY
15295: PPUSH
15296: CALL_OW 488
15300: IFFALSE 15399
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
15302: LD_ADDR_VAR 0 4
15306: PUSH
15307: LD_VAR 0 9
15311: PUSH
15312: LD_INT 1
15314: ARRAY
15315: PPUSH
15316: LD_VAR 0 9
15320: PUSH
15321: LD_INT 2
15323: ARRAY
15324: PPUSH
15325: CALL_OW 546
15329: ST_TO_ADDR
// if hex [ 1 ] then
15330: LD_VAR 0 4
15334: PUSH
15335: LD_INT 1
15337: ARRAY
15338: IFFALSE 15342
// continue ;
15340: GO 15230
// h := hex [ 2 ] ;
15342: LD_ADDR_VAR 0 13
15346: PUSH
15347: LD_VAR 0 4
15351: PUSH
15352: LD_INT 2
15354: ARRAY
15355: ST_TO_ADDR
// if h + 7 < height then
15356: LD_VAR 0 13
15360: PUSH
15361: LD_INT 7
15363: PLUS
15364: PUSH
15365: LD_VAR 0 15
15369: LESS
15370: IFFALSE 15399
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
15372: LD_ADDR_VAR 0 18
15376: PUSH
15377: LD_INT 7
15379: PUSH
15380: LD_INT 28
15382: PUSH
15383: LD_INT 45
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: LD_VAR 0 12
15395: ARRAY
15396: ST_TO_ADDR
// break ;
15397: GO 15401
// end ; end ; end ;
15399: GO 15230
15401: POP
15402: POP
// end ; if not weapon then
15403: LD_VAR 0 18
15407: NOT
15408: IFFALSE 15468
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
15410: LD_ADDR_VAR 0 5
15414: PUSH
15415: LD_VAR 0 5
15419: PUSH
15420: LD_INT 11
15422: PUSH
15423: LD_INT 30
15425: PUSH
15426: LD_INT 49
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: LIST
15433: DIFF
15434: ST_TO_ADDR
// if not list then
15435: LD_VAR 0 5
15439: NOT
15440: IFFALSE 15444
// exit ;
15442: GO 15586
// weapon := list [ rand ( 1 , list ) ] ;
15444: LD_ADDR_VAR 0 18
15448: PUSH
15449: LD_VAR 0 5
15453: PUSH
15454: LD_INT 1
15456: PPUSH
15457: LD_VAR 0 5
15461: PPUSH
15462: CALL_OW 12
15466: ARRAY
15467: ST_TO_ADDR
// end ; if weapon then
15468: LD_VAR 0 18
15472: IFFALSE 15586
// begin tmp := CostOfWeapon ( weapon ) ;
15474: LD_ADDR_VAR 0 14
15478: PUSH
15479: LD_VAR 0 18
15483: PPUSH
15484: CALL_OW 451
15488: ST_TO_ADDR
// j := GetBase ( tower ) ;
15489: LD_ADDR_VAR 0 9
15493: PUSH
15494: LD_VAR 0 1
15498: PPUSH
15499: CALL_OW 274
15503: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
15504: LD_VAR 0 9
15508: PPUSH
15509: LD_INT 1
15511: PPUSH
15512: CALL_OW 275
15516: PUSH
15517: LD_VAR 0 14
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: GREATEREQUAL
15526: PUSH
15527: LD_VAR 0 9
15531: PPUSH
15532: LD_INT 2
15534: PPUSH
15535: CALL_OW 275
15539: PUSH
15540: LD_VAR 0 14
15544: PUSH
15545: LD_INT 2
15547: ARRAY
15548: GREATEREQUAL
15549: AND
15550: PUSH
15551: LD_VAR 0 9
15555: PPUSH
15556: LD_INT 3
15558: PPUSH
15559: CALL_OW 275
15563: PUSH
15564: LD_VAR 0 14
15568: PUSH
15569: LD_INT 3
15571: ARRAY
15572: GREATEREQUAL
15573: AND
15574: IFFALSE 15586
// result := weapon ;
15576: LD_ADDR_VAR 0 3
15580: PUSH
15581: LD_VAR 0 18
15585: ST_TO_ADDR
// end ; end ;
15586: LD_VAR 0 3
15590: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15591: LD_INT 0
15593: PPUSH
15594: PPUSH
// result := true ;
15595: LD_ADDR_VAR 0 3
15599: PUSH
15600: LD_INT 1
15602: ST_TO_ADDR
// if array1 = array2 then
15603: LD_VAR 0 1
15607: PUSH
15608: LD_VAR 0 2
15612: EQUAL
15613: IFFALSE 15673
// begin for i = 1 to array1 do
15615: LD_ADDR_VAR 0 4
15619: PUSH
15620: DOUBLE
15621: LD_INT 1
15623: DEC
15624: ST_TO_ADDR
15625: LD_VAR 0 1
15629: PUSH
15630: FOR_TO
15631: IFFALSE 15669
// if array1 [ i ] <> array2 [ i ] then
15633: LD_VAR 0 1
15637: PUSH
15638: LD_VAR 0 4
15642: ARRAY
15643: PUSH
15644: LD_VAR 0 2
15648: PUSH
15649: LD_VAR 0 4
15653: ARRAY
15654: NONEQUAL
15655: IFFALSE 15667
// begin result := false ;
15657: LD_ADDR_VAR 0 3
15661: PUSH
15662: LD_INT 0
15664: ST_TO_ADDR
// break ;
15665: GO 15669
// end ;
15667: GO 15630
15669: POP
15670: POP
// end else
15671: GO 15681
// result := false ;
15673: LD_ADDR_VAR 0 3
15677: PUSH
15678: LD_INT 0
15680: ST_TO_ADDR
// end ;
15681: LD_VAR 0 3
15685: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15686: LD_INT 0
15688: PPUSH
15689: PPUSH
// if not array1 or not array2 then
15690: LD_VAR 0 1
15694: NOT
15695: PUSH
15696: LD_VAR 0 2
15700: NOT
15701: OR
15702: IFFALSE 15706
// exit ;
15704: GO 15770
// result := true ;
15706: LD_ADDR_VAR 0 3
15710: PUSH
15711: LD_INT 1
15713: ST_TO_ADDR
// for i = 1 to array1 do
15714: LD_ADDR_VAR 0 4
15718: PUSH
15719: DOUBLE
15720: LD_INT 1
15722: DEC
15723: ST_TO_ADDR
15724: LD_VAR 0 1
15728: PUSH
15729: FOR_TO
15730: IFFALSE 15768
// if array1 [ i ] <> array2 [ i ] then
15732: LD_VAR 0 1
15736: PUSH
15737: LD_VAR 0 4
15741: ARRAY
15742: PUSH
15743: LD_VAR 0 2
15747: PUSH
15748: LD_VAR 0 4
15752: ARRAY
15753: NONEQUAL
15754: IFFALSE 15766
// begin result := false ;
15756: LD_ADDR_VAR 0 3
15760: PUSH
15761: LD_INT 0
15763: ST_TO_ADDR
// break ;
15764: GO 15768
// end ;
15766: GO 15729
15768: POP
15769: POP
// end ;
15770: LD_VAR 0 3
15774: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15775: LD_INT 0
15777: PPUSH
15778: PPUSH
15779: PPUSH
// pom := GetBase ( fac ) ;
15780: LD_ADDR_VAR 0 5
15784: PUSH
15785: LD_VAR 0 1
15789: PPUSH
15790: CALL_OW 274
15794: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15795: LD_ADDR_VAR 0 4
15799: PUSH
15800: LD_VAR 0 2
15804: PUSH
15805: LD_INT 1
15807: ARRAY
15808: PPUSH
15809: LD_VAR 0 2
15813: PUSH
15814: LD_INT 2
15816: ARRAY
15817: PPUSH
15818: LD_VAR 0 2
15822: PUSH
15823: LD_INT 3
15825: ARRAY
15826: PPUSH
15827: LD_VAR 0 2
15831: PUSH
15832: LD_INT 4
15834: ARRAY
15835: PPUSH
15836: CALL_OW 449
15840: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15841: LD_ADDR_VAR 0 3
15845: PUSH
15846: LD_VAR 0 5
15850: PPUSH
15851: LD_INT 1
15853: PPUSH
15854: CALL_OW 275
15858: PUSH
15859: LD_VAR 0 4
15863: PUSH
15864: LD_INT 1
15866: ARRAY
15867: GREATEREQUAL
15868: PUSH
15869: LD_VAR 0 5
15873: PPUSH
15874: LD_INT 2
15876: PPUSH
15877: CALL_OW 275
15881: PUSH
15882: LD_VAR 0 4
15886: PUSH
15887: LD_INT 2
15889: ARRAY
15890: GREATEREQUAL
15891: AND
15892: PUSH
15893: LD_VAR 0 5
15897: PPUSH
15898: LD_INT 3
15900: PPUSH
15901: CALL_OW 275
15905: PUSH
15906: LD_VAR 0 4
15910: PUSH
15911: LD_INT 3
15913: ARRAY
15914: GREATEREQUAL
15915: AND
15916: ST_TO_ADDR
// end ;
15917: LD_VAR 0 3
15921: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15922: LD_INT 0
15924: PPUSH
15925: PPUSH
15926: PPUSH
15927: PPUSH
// pom := GetBase ( building ) ;
15928: LD_ADDR_VAR 0 3
15932: PUSH
15933: LD_VAR 0 1
15937: PPUSH
15938: CALL_OW 274
15942: ST_TO_ADDR
// if not pom then
15943: LD_VAR 0 3
15947: NOT
15948: IFFALSE 15952
// exit ;
15950: GO 16122
// btype := GetBType ( building ) ;
15952: LD_ADDR_VAR 0 5
15956: PUSH
15957: LD_VAR 0 1
15961: PPUSH
15962: CALL_OW 266
15966: ST_TO_ADDR
// if btype = b_armoury then
15967: LD_VAR 0 5
15971: PUSH
15972: LD_INT 4
15974: EQUAL
15975: IFFALSE 15985
// btype := b_barracks ;
15977: LD_ADDR_VAR 0 5
15981: PUSH
15982: LD_INT 5
15984: ST_TO_ADDR
// if btype = b_depot then
15985: LD_VAR 0 5
15989: PUSH
15990: LD_INT 0
15992: EQUAL
15993: IFFALSE 16003
// btype := b_warehouse ;
15995: LD_ADDR_VAR 0 5
15999: PUSH
16000: LD_INT 1
16002: ST_TO_ADDR
// if btype = b_workshop then
16003: LD_VAR 0 5
16007: PUSH
16008: LD_INT 2
16010: EQUAL
16011: IFFALSE 16021
// btype := b_factory ;
16013: LD_ADDR_VAR 0 5
16017: PUSH
16018: LD_INT 3
16020: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16021: LD_ADDR_VAR 0 4
16025: PUSH
16026: LD_VAR 0 5
16030: PPUSH
16031: LD_VAR 0 1
16035: PPUSH
16036: CALL_OW 248
16040: PPUSH
16041: CALL_OW 450
16045: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16046: LD_ADDR_VAR 0 2
16050: PUSH
16051: LD_VAR 0 3
16055: PPUSH
16056: LD_INT 1
16058: PPUSH
16059: CALL_OW 275
16063: PUSH
16064: LD_VAR 0 4
16068: PUSH
16069: LD_INT 1
16071: ARRAY
16072: GREATEREQUAL
16073: PUSH
16074: LD_VAR 0 3
16078: PPUSH
16079: LD_INT 2
16081: PPUSH
16082: CALL_OW 275
16086: PUSH
16087: LD_VAR 0 4
16091: PUSH
16092: LD_INT 2
16094: ARRAY
16095: GREATEREQUAL
16096: AND
16097: PUSH
16098: LD_VAR 0 3
16102: PPUSH
16103: LD_INT 3
16105: PPUSH
16106: CALL_OW 275
16110: PUSH
16111: LD_VAR 0 4
16115: PUSH
16116: LD_INT 3
16118: ARRAY
16119: GREATEREQUAL
16120: AND
16121: ST_TO_ADDR
// end ;
16122: LD_VAR 0 2
16126: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
16127: LD_INT 0
16129: PPUSH
16130: PPUSH
16131: PPUSH
// pom := GetBase ( building ) ;
16132: LD_ADDR_VAR 0 4
16136: PUSH
16137: LD_VAR 0 1
16141: PPUSH
16142: CALL_OW 274
16146: ST_TO_ADDR
// if not pom then
16147: LD_VAR 0 4
16151: NOT
16152: IFFALSE 16156
// exit ;
16154: GO 16257
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
16156: LD_ADDR_VAR 0 5
16160: PUSH
16161: LD_VAR 0 2
16165: PPUSH
16166: LD_VAR 0 1
16170: PPUSH
16171: CALL_OW 248
16175: PPUSH
16176: CALL_OW 450
16180: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
16181: LD_ADDR_VAR 0 3
16185: PUSH
16186: LD_VAR 0 4
16190: PPUSH
16191: LD_INT 1
16193: PPUSH
16194: CALL_OW 275
16198: PUSH
16199: LD_VAR 0 5
16203: PUSH
16204: LD_INT 1
16206: ARRAY
16207: GREATEREQUAL
16208: PUSH
16209: LD_VAR 0 4
16213: PPUSH
16214: LD_INT 2
16216: PPUSH
16217: CALL_OW 275
16221: PUSH
16222: LD_VAR 0 5
16226: PUSH
16227: LD_INT 2
16229: ARRAY
16230: GREATEREQUAL
16231: AND
16232: PUSH
16233: LD_VAR 0 4
16237: PPUSH
16238: LD_INT 3
16240: PPUSH
16241: CALL_OW 275
16245: PUSH
16246: LD_VAR 0 5
16250: PUSH
16251: LD_INT 3
16253: ARRAY
16254: GREATEREQUAL
16255: AND
16256: ST_TO_ADDR
// end ;
16257: LD_VAR 0 3
16261: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
16262: LD_INT 0
16264: PPUSH
16265: PPUSH
16266: PPUSH
16267: PPUSH
16268: PPUSH
16269: PPUSH
16270: PPUSH
16271: PPUSH
16272: PPUSH
16273: PPUSH
16274: PPUSH
// result := false ;
16275: LD_ADDR_VAR 0 8
16279: PUSH
16280: LD_INT 0
16282: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
16283: LD_VAR 0 5
16287: NOT
16288: PUSH
16289: LD_VAR 0 1
16293: NOT
16294: OR
16295: PUSH
16296: LD_VAR 0 2
16300: NOT
16301: OR
16302: PUSH
16303: LD_VAR 0 3
16307: NOT
16308: OR
16309: IFFALSE 16313
// exit ;
16311: GO 17127
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
16313: LD_ADDR_VAR 0 14
16317: PUSH
16318: LD_VAR 0 1
16322: PPUSH
16323: LD_VAR 0 2
16327: PPUSH
16328: LD_VAR 0 3
16332: PPUSH
16333: LD_VAR 0 4
16337: PPUSH
16338: LD_VAR 0 5
16342: PUSH
16343: LD_INT 1
16345: ARRAY
16346: PPUSH
16347: CALL_OW 248
16351: PPUSH
16352: LD_INT 0
16354: PPUSH
16355: CALL 18364 0 6
16359: ST_TO_ADDR
// if not hexes then
16360: LD_VAR 0 14
16364: NOT
16365: IFFALSE 16369
// exit ;
16367: GO 17127
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16369: LD_ADDR_VAR 0 17
16373: PUSH
16374: LD_VAR 0 5
16378: PPUSH
16379: LD_INT 22
16381: PUSH
16382: LD_VAR 0 13
16386: PPUSH
16387: CALL_OW 255
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 2
16398: PUSH
16399: LD_INT 30
16401: PUSH
16402: LD_INT 0
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 30
16411: PUSH
16412: LD_INT 1
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PPUSH
16428: CALL_OW 72
16432: ST_TO_ADDR
// for i = 1 to hexes do
16433: LD_ADDR_VAR 0 9
16437: PUSH
16438: DOUBLE
16439: LD_INT 1
16441: DEC
16442: ST_TO_ADDR
16443: LD_VAR 0 14
16447: PUSH
16448: FOR_TO
16449: IFFALSE 17125
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16451: LD_ADDR_VAR 0 13
16455: PUSH
16456: LD_VAR 0 14
16460: PUSH
16461: LD_VAR 0 9
16465: ARRAY
16466: PUSH
16467: LD_INT 1
16469: ARRAY
16470: PPUSH
16471: LD_VAR 0 14
16475: PUSH
16476: LD_VAR 0 9
16480: ARRAY
16481: PUSH
16482: LD_INT 2
16484: ARRAY
16485: PPUSH
16486: CALL_OW 428
16490: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
16491: LD_VAR 0 14
16495: PUSH
16496: LD_VAR 0 9
16500: ARRAY
16501: PUSH
16502: LD_INT 1
16504: ARRAY
16505: PPUSH
16506: LD_VAR 0 14
16510: PUSH
16511: LD_VAR 0 9
16515: ARRAY
16516: PUSH
16517: LD_INT 2
16519: ARRAY
16520: PPUSH
16521: CALL_OW 351
16525: PUSH
16526: LD_VAR 0 14
16530: PUSH
16531: LD_VAR 0 9
16535: ARRAY
16536: PUSH
16537: LD_INT 1
16539: ARRAY
16540: PPUSH
16541: LD_VAR 0 14
16545: PUSH
16546: LD_VAR 0 9
16550: ARRAY
16551: PUSH
16552: LD_INT 2
16554: ARRAY
16555: PPUSH
16556: CALL_OW 488
16560: NOT
16561: OR
16562: PUSH
16563: LD_VAR 0 13
16567: PPUSH
16568: CALL_OW 247
16572: PUSH
16573: LD_INT 3
16575: EQUAL
16576: OR
16577: IFFALSE 16583
// exit ;
16579: POP
16580: POP
16581: GO 17127
// if not tmp then
16583: LD_VAR 0 13
16587: NOT
16588: IFFALSE 16592
// continue ;
16590: GO 16448
// result := true ;
16592: LD_ADDR_VAR 0 8
16596: PUSH
16597: LD_INT 1
16599: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16600: LD_VAR 0 6
16604: PUSH
16605: LD_VAR 0 13
16609: PPUSH
16610: CALL_OW 247
16614: PUSH
16615: LD_INT 2
16617: EQUAL
16618: AND
16619: PUSH
16620: LD_VAR 0 13
16624: PPUSH
16625: CALL_OW 263
16629: PUSH
16630: LD_INT 1
16632: EQUAL
16633: AND
16634: IFFALSE 16798
// begin if IsDrivenBy ( tmp ) then
16636: LD_VAR 0 13
16640: PPUSH
16641: CALL_OW 311
16645: IFFALSE 16649
// continue ;
16647: GO 16448
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16649: LD_VAR 0 6
16653: PPUSH
16654: LD_INT 3
16656: PUSH
16657: LD_INT 60
16659: PUSH
16660: EMPTY
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 3
16669: PUSH
16670: LD_INT 55
16672: PUSH
16673: EMPTY
16674: LIST
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PPUSH
16684: CALL_OW 72
16688: IFFALSE 16796
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16690: LD_ADDR_VAR 0 18
16694: PUSH
16695: LD_VAR 0 6
16699: PPUSH
16700: LD_INT 3
16702: PUSH
16703: LD_INT 60
16705: PUSH
16706: EMPTY
16707: LIST
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 3
16715: PUSH
16716: LD_INT 55
16718: PUSH
16719: EMPTY
16720: LIST
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PPUSH
16730: CALL_OW 72
16734: PUSH
16735: LD_INT 1
16737: ARRAY
16738: ST_TO_ADDR
// if IsInUnit ( driver ) then
16739: LD_VAR 0 18
16743: PPUSH
16744: CALL_OW 310
16748: IFFALSE 16759
// ComExit ( driver ) ;
16750: LD_VAR 0 18
16754: PPUSH
16755: CALL 42069 0 1
// AddComEnterUnit ( driver , tmp ) ;
16759: LD_VAR 0 18
16763: PPUSH
16764: LD_VAR 0 13
16768: PPUSH
16769: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16773: LD_VAR 0 18
16777: PPUSH
16778: LD_VAR 0 7
16782: PPUSH
16783: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16787: LD_VAR 0 18
16791: PPUSH
16792: CALL_OW 181
// end ; continue ;
16796: GO 16448
// end ; if not cleaners or not tmp in cleaners then
16798: LD_VAR 0 6
16802: NOT
16803: PUSH
16804: LD_VAR 0 13
16808: PUSH
16809: LD_VAR 0 6
16813: IN
16814: NOT
16815: OR
16816: IFFALSE 17123
// begin if dep then
16818: LD_VAR 0 17
16822: IFFALSE 16958
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16824: LD_ADDR_VAR 0 16
16828: PUSH
16829: LD_VAR 0 17
16833: PUSH
16834: LD_INT 1
16836: ARRAY
16837: PPUSH
16838: CALL_OW 250
16842: PPUSH
16843: LD_VAR 0 17
16847: PUSH
16848: LD_INT 1
16850: ARRAY
16851: PPUSH
16852: CALL_OW 254
16856: PPUSH
16857: LD_INT 5
16859: PPUSH
16860: CALL_OW 272
16864: PUSH
16865: LD_VAR 0 17
16869: PUSH
16870: LD_INT 1
16872: ARRAY
16873: PPUSH
16874: CALL_OW 251
16878: PPUSH
16879: LD_VAR 0 17
16883: PUSH
16884: LD_INT 1
16886: ARRAY
16887: PPUSH
16888: CALL_OW 254
16892: PPUSH
16893: LD_INT 5
16895: PPUSH
16896: CALL_OW 273
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16905: LD_VAR 0 16
16909: PUSH
16910: LD_INT 1
16912: ARRAY
16913: PPUSH
16914: LD_VAR 0 16
16918: PUSH
16919: LD_INT 2
16921: ARRAY
16922: PPUSH
16923: CALL_OW 488
16927: IFFALSE 16958
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16929: LD_VAR 0 13
16933: PPUSH
16934: LD_VAR 0 16
16938: PUSH
16939: LD_INT 1
16941: ARRAY
16942: PPUSH
16943: LD_VAR 0 16
16947: PUSH
16948: LD_INT 2
16950: ARRAY
16951: PPUSH
16952: CALL_OW 111
// continue ;
16956: GO 16448
// end ; end ; r := GetDir ( tmp ) ;
16958: LD_ADDR_VAR 0 15
16962: PUSH
16963: LD_VAR 0 13
16967: PPUSH
16968: CALL_OW 254
16972: ST_TO_ADDR
// if r = 5 then
16973: LD_VAR 0 15
16977: PUSH
16978: LD_INT 5
16980: EQUAL
16981: IFFALSE 16991
// r := 0 ;
16983: LD_ADDR_VAR 0 15
16987: PUSH
16988: LD_INT 0
16990: ST_TO_ADDR
// for j = r to 5 do
16991: LD_ADDR_VAR 0 10
16995: PUSH
16996: DOUBLE
16997: LD_VAR 0 15
17001: DEC
17002: ST_TO_ADDR
17003: LD_INT 5
17005: PUSH
17006: FOR_TO
17007: IFFALSE 17121
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
17009: LD_ADDR_VAR 0 11
17013: PUSH
17014: LD_VAR 0 13
17018: PPUSH
17019: CALL_OW 250
17023: PPUSH
17024: LD_VAR 0 10
17028: PPUSH
17029: LD_INT 2
17031: PPUSH
17032: CALL_OW 272
17036: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
17037: LD_ADDR_VAR 0 12
17041: PUSH
17042: LD_VAR 0 13
17046: PPUSH
17047: CALL_OW 251
17051: PPUSH
17052: LD_VAR 0 10
17056: PPUSH
17057: LD_INT 2
17059: PPUSH
17060: CALL_OW 273
17064: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
17065: LD_VAR 0 11
17069: PPUSH
17070: LD_VAR 0 12
17074: PPUSH
17075: CALL_OW 488
17079: PUSH
17080: LD_VAR 0 11
17084: PPUSH
17085: LD_VAR 0 12
17089: PPUSH
17090: CALL_OW 428
17094: NOT
17095: AND
17096: IFFALSE 17119
// begin ComMoveXY ( tmp , _x , _y ) ;
17098: LD_VAR 0 13
17102: PPUSH
17103: LD_VAR 0 11
17107: PPUSH
17108: LD_VAR 0 12
17112: PPUSH
17113: CALL_OW 111
// break ;
17117: GO 17121
// end ; end ;
17119: GO 17006
17121: POP
17122: POP
// end ; end ;
17123: GO 16448
17125: POP
17126: POP
// end ;
17127: LD_VAR 0 8
17131: RET
// export function BuildingTechInvented ( side , btype ) ; begin
17132: LD_INT 0
17134: PPUSH
// result := true ;
17135: LD_ADDR_VAR 0 3
17139: PUSH
17140: LD_INT 1
17142: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
17143: LD_VAR 0 2
17147: PUSH
17148: LD_INT 24
17150: DOUBLE
17151: EQUAL
17152: IFTRUE 17162
17154: LD_INT 33
17156: DOUBLE
17157: EQUAL
17158: IFTRUE 17162
17160: GO 17187
17162: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
17163: LD_ADDR_VAR 0 3
17167: PUSH
17168: LD_INT 32
17170: PPUSH
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL_OW 321
17180: PUSH
17181: LD_INT 2
17183: EQUAL
17184: ST_TO_ADDR
17185: GO 17507
17187: LD_INT 20
17189: DOUBLE
17190: EQUAL
17191: IFTRUE 17195
17193: GO 17220
17195: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
17196: LD_ADDR_VAR 0 3
17200: PUSH
17201: LD_INT 6
17203: PPUSH
17204: LD_VAR 0 1
17208: PPUSH
17209: CALL_OW 321
17213: PUSH
17214: LD_INT 2
17216: EQUAL
17217: ST_TO_ADDR
17218: GO 17507
17220: LD_INT 22
17222: DOUBLE
17223: EQUAL
17224: IFTRUE 17234
17226: LD_INT 36
17228: DOUBLE
17229: EQUAL
17230: IFTRUE 17234
17232: GO 17259
17234: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
17235: LD_ADDR_VAR 0 3
17239: PUSH
17240: LD_INT 15
17242: PPUSH
17243: LD_VAR 0 1
17247: PPUSH
17248: CALL_OW 321
17252: PUSH
17253: LD_INT 2
17255: EQUAL
17256: ST_TO_ADDR
17257: GO 17507
17259: LD_INT 30
17261: DOUBLE
17262: EQUAL
17263: IFTRUE 17267
17265: GO 17292
17267: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
17268: LD_ADDR_VAR 0 3
17272: PUSH
17273: LD_INT 20
17275: PPUSH
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 321
17285: PUSH
17286: LD_INT 2
17288: EQUAL
17289: ST_TO_ADDR
17290: GO 17507
17292: LD_INT 28
17294: DOUBLE
17295: EQUAL
17296: IFTRUE 17306
17298: LD_INT 21
17300: DOUBLE
17301: EQUAL
17302: IFTRUE 17306
17304: GO 17331
17306: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
17307: LD_ADDR_VAR 0 3
17311: PUSH
17312: LD_INT 21
17314: PPUSH
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 321
17324: PUSH
17325: LD_INT 2
17327: EQUAL
17328: ST_TO_ADDR
17329: GO 17507
17331: LD_INT 16
17333: DOUBLE
17334: EQUAL
17335: IFTRUE 17339
17337: GO 17366
17339: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
17340: LD_ADDR_VAR 0 3
17344: PUSH
17345: LD_EXP 57
17349: PPUSH
17350: LD_VAR 0 1
17354: PPUSH
17355: CALL_OW 321
17359: PUSH
17360: LD_INT 2
17362: EQUAL
17363: ST_TO_ADDR
17364: GO 17507
17366: LD_INT 19
17368: DOUBLE
17369: EQUAL
17370: IFTRUE 17380
17372: LD_INT 23
17374: DOUBLE
17375: EQUAL
17376: IFTRUE 17380
17378: GO 17407
17380: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
17381: LD_ADDR_VAR 0 3
17385: PUSH
17386: LD_EXP 56
17390: PPUSH
17391: LD_VAR 0 1
17395: PPUSH
17396: CALL_OW 321
17400: PUSH
17401: LD_INT 2
17403: EQUAL
17404: ST_TO_ADDR
17405: GO 17507
17407: LD_INT 17
17409: DOUBLE
17410: EQUAL
17411: IFTRUE 17415
17413: GO 17440
17415: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
17416: LD_ADDR_VAR 0 3
17420: PUSH
17421: LD_INT 39
17423: PPUSH
17424: LD_VAR 0 1
17428: PPUSH
17429: CALL_OW 321
17433: PUSH
17434: LD_INT 2
17436: EQUAL
17437: ST_TO_ADDR
17438: GO 17507
17440: LD_INT 18
17442: DOUBLE
17443: EQUAL
17444: IFTRUE 17448
17446: GO 17473
17448: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
17449: LD_ADDR_VAR 0 3
17453: PUSH
17454: LD_INT 40
17456: PPUSH
17457: LD_VAR 0 1
17461: PPUSH
17462: CALL_OW 321
17466: PUSH
17467: LD_INT 2
17469: EQUAL
17470: ST_TO_ADDR
17471: GO 17507
17473: LD_INT 27
17475: DOUBLE
17476: EQUAL
17477: IFTRUE 17481
17479: GO 17506
17481: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
17482: LD_ADDR_VAR 0 3
17486: PUSH
17487: LD_INT 35
17489: PPUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: CALL_OW 321
17499: PUSH
17500: LD_INT 2
17502: EQUAL
17503: ST_TO_ADDR
17504: GO 17507
17506: POP
// end ;
17507: LD_VAR 0 3
17511: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
17512: LD_INT 0
17514: PPUSH
17515: PPUSH
17516: PPUSH
17517: PPUSH
17518: PPUSH
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
17524: PPUSH
// result := false ;
17525: LD_ADDR_VAR 0 6
17529: PUSH
17530: LD_INT 0
17532: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
17533: LD_VAR 0 1
17537: NOT
17538: PUSH
17539: LD_VAR 0 1
17543: PPUSH
17544: CALL_OW 266
17548: PUSH
17549: LD_INT 0
17551: PUSH
17552: LD_INT 1
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: IN
17559: NOT
17560: OR
17561: PUSH
17562: LD_VAR 0 2
17566: NOT
17567: OR
17568: PUSH
17569: LD_VAR 0 5
17573: PUSH
17574: LD_INT 0
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: LD_INT 2
17582: PUSH
17583: LD_INT 3
17585: PUSH
17586: LD_INT 4
17588: PUSH
17589: LD_INT 5
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: IN
17600: NOT
17601: OR
17602: PUSH
17603: LD_VAR 0 3
17607: PPUSH
17608: LD_VAR 0 4
17612: PPUSH
17613: CALL_OW 488
17617: NOT
17618: OR
17619: IFFALSE 17623
// exit ;
17621: GO 18359
// side := GetSide ( depot ) ;
17623: LD_ADDR_VAR 0 9
17627: PUSH
17628: LD_VAR 0 1
17632: PPUSH
17633: CALL_OW 255
17637: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17638: LD_VAR 0 9
17642: PPUSH
17643: LD_VAR 0 2
17647: PPUSH
17648: CALL 17132 0 2
17652: NOT
17653: IFFALSE 17657
// exit ;
17655: GO 18359
// pom := GetBase ( depot ) ;
17657: LD_ADDR_VAR 0 10
17661: PUSH
17662: LD_VAR 0 1
17666: PPUSH
17667: CALL_OW 274
17671: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17672: LD_ADDR_VAR 0 11
17676: PUSH
17677: LD_VAR 0 2
17681: PPUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 248
17691: PPUSH
17692: CALL_OW 450
17696: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17697: LD_VAR 0 10
17701: PPUSH
17702: LD_INT 1
17704: PPUSH
17705: CALL_OW 275
17709: PUSH
17710: LD_VAR 0 11
17714: PUSH
17715: LD_INT 1
17717: ARRAY
17718: GREATEREQUAL
17719: PUSH
17720: LD_VAR 0 10
17724: PPUSH
17725: LD_INT 2
17727: PPUSH
17728: CALL_OW 275
17732: PUSH
17733: LD_VAR 0 11
17737: PUSH
17738: LD_INT 2
17740: ARRAY
17741: GREATEREQUAL
17742: AND
17743: PUSH
17744: LD_VAR 0 10
17748: PPUSH
17749: LD_INT 3
17751: PPUSH
17752: CALL_OW 275
17756: PUSH
17757: LD_VAR 0 11
17761: PUSH
17762: LD_INT 3
17764: ARRAY
17765: GREATEREQUAL
17766: AND
17767: NOT
17768: IFFALSE 17772
// exit ;
17770: GO 18359
// if GetBType ( depot ) = b_depot then
17772: LD_VAR 0 1
17776: PPUSH
17777: CALL_OW 266
17781: PUSH
17782: LD_INT 0
17784: EQUAL
17785: IFFALSE 17797
// dist := 28 else
17787: LD_ADDR_VAR 0 14
17791: PUSH
17792: LD_INT 28
17794: ST_TO_ADDR
17795: GO 17805
// dist := 36 ;
17797: LD_ADDR_VAR 0 14
17801: PUSH
17802: LD_INT 36
17804: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17805: LD_VAR 0 1
17809: PPUSH
17810: LD_VAR 0 3
17814: PPUSH
17815: LD_VAR 0 4
17819: PPUSH
17820: CALL_OW 297
17824: PUSH
17825: LD_VAR 0 14
17829: GREATER
17830: IFFALSE 17834
// exit ;
17832: GO 18359
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17834: LD_ADDR_VAR 0 12
17838: PUSH
17839: LD_VAR 0 2
17843: PPUSH
17844: LD_VAR 0 3
17848: PPUSH
17849: LD_VAR 0 4
17853: PPUSH
17854: LD_VAR 0 5
17858: PPUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 248
17868: PPUSH
17869: LD_INT 0
17871: PPUSH
17872: CALL 18364 0 6
17876: ST_TO_ADDR
// if not hexes then
17877: LD_VAR 0 12
17881: NOT
17882: IFFALSE 17886
// exit ;
17884: GO 18359
// hex := GetHexInfo ( x , y ) ;
17886: LD_ADDR_VAR 0 15
17890: PUSH
17891: LD_VAR 0 3
17895: PPUSH
17896: LD_VAR 0 4
17900: PPUSH
17901: CALL_OW 546
17905: ST_TO_ADDR
// if hex [ 1 ] then
17906: LD_VAR 0 15
17910: PUSH
17911: LD_INT 1
17913: ARRAY
17914: IFFALSE 17918
// exit ;
17916: GO 18359
// height := hex [ 2 ] ;
17918: LD_ADDR_VAR 0 13
17922: PUSH
17923: LD_VAR 0 15
17927: PUSH
17928: LD_INT 2
17930: ARRAY
17931: ST_TO_ADDR
// for i = 1 to hexes do
17932: LD_ADDR_VAR 0 7
17936: PUSH
17937: DOUBLE
17938: LD_INT 1
17940: DEC
17941: ST_TO_ADDR
17942: LD_VAR 0 12
17946: PUSH
17947: FOR_TO
17948: IFFALSE 18278
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17950: LD_VAR 0 12
17954: PUSH
17955: LD_VAR 0 7
17959: ARRAY
17960: PUSH
17961: LD_INT 1
17963: ARRAY
17964: PPUSH
17965: LD_VAR 0 12
17969: PUSH
17970: LD_VAR 0 7
17974: ARRAY
17975: PUSH
17976: LD_INT 2
17978: ARRAY
17979: PPUSH
17980: CALL_OW 488
17984: NOT
17985: PUSH
17986: LD_VAR 0 12
17990: PUSH
17991: LD_VAR 0 7
17995: ARRAY
17996: PUSH
17997: LD_INT 1
17999: ARRAY
18000: PPUSH
18001: LD_VAR 0 12
18005: PUSH
18006: LD_VAR 0 7
18010: ARRAY
18011: PUSH
18012: LD_INT 2
18014: ARRAY
18015: PPUSH
18016: CALL_OW 428
18020: PUSH
18021: LD_INT 0
18023: GREATER
18024: OR
18025: PUSH
18026: LD_VAR 0 12
18030: PUSH
18031: LD_VAR 0 7
18035: ARRAY
18036: PUSH
18037: LD_INT 1
18039: ARRAY
18040: PPUSH
18041: LD_VAR 0 12
18045: PUSH
18046: LD_VAR 0 7
18050: ARRAY
18051: PUSH
18052: LD_INT 2
18054: ARRAY
18055: PPUSH
18056: CALL_OW 351
18060: OR
18061: IFFALSE 18067
// exit ;
18063: POP
18064: POP
18065: GO 18359
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18067: LD_ADDR_VAR 0 8
18071: PUSH
18072: LD_VAR 0 12
18076: PUSH
18077: LD_VAR 0 7
18081: ARRAY
18082: PUSH
18083: LD_INT 1
18085: ARRAY
18086: PPUSH
18087: LD_VAR 0 12
18091: PUSH
18092: LD_VAR 0 7
18096: ARRAY
18097: PUSH
18098: LD_INT 2
18100: ARRAY
18101: PPUSH
18102: CALL_OW 546
18106: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
18107: LD_VAR 0 8
18111: PUSH
18112: LD_INT 1
18114: ARRAY
18115: PUSH
18116: LD_VAR 0 8
18120: PUSH
18121: LD_INT 2
18123: ARRAY
18124: PUSH
18125: LD_VAR 0 13
18129: PUSH
18130: LD_INT 2
18132: PLUS
18133: GREATER
18134: OR
18135: PUSH
18136: LD_VAR 0 8
18140: PUSH
18141: LD_INT 2
18143: ARRAY
18144: PUSH
18145: LD_VAR 0 13
18149: PUSH
18150: LD_INT 2
18152: MINUS
18153: LESS
18154: OR
18155: PUSH
18156: LD_VAR 0 8
18160: PUSH
18161: LD_INT 3
18163: ARRAY
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 8
18170: PUSH
18171: LD_INT 9
18173: PUSH
18174: LD_INT 10
18176: PUSH
18177: LD_INT 11
18179: PUSH
18180: LD_INT 12
18182: PUSH
18183: LD_INT 13
18185: PUSH
18186: LD_INT 16
18188: PUSH
18189: LD_INT 17
18191: PUSH
18192: LD_INT 18
18194: PUSH
18195: LD_INT 19
18197: PUSH
18198: LD_INT 20
18200: PUSH
18201: LD_INT 21
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: IN
18219: NOT
18220: OR
18221: PUSH
18222: LD_VAR 0 8
18226: PUSH
18227: LD_INT 5
18229: ARRAY
18230: NOT
18231: OR
18232: PUSH
18233: LD_VAR 0 8
18237: PUSH
18238: LD_INT 6
18240: ARRAY
18241: PUSH
18242: LD_INT 1
18244: PUSH
18245: LD_INT 2
18247: PUSH
18248: LD_INT 7
18250: PUSH
18251: LD_INT 9
18253: PUSH
18254: LD_INT 10
18256: PUSH
18257: LD_INT 11
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: IN
18268: NOT
18269: OR
18270: IFFALSE 18276
// exit ;
18272: POP
18273: POP
18274: GO 18359
// end ;
18276: GO 17947
18278: POP
18279: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
18280: LD_VAR 0 9
18284: PPUSH
18285: LD_VAR 0 3
18289: PPUSH
18290: LD_VAR 0 4
18294: PPUSH
18295: LD_INT 20
18297: PPUSH
18298: CALL 10305 0 4
18302: PUSH
18303: LD_INT 4
18305: ARRAY
18306: IFFALSE 18310
// exit ;
18308: GO 18359
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
18310: LD_VAR 0 2
18314: PUSH
18315: LD_INT 29
18317: PUSH
18318: LD_INT 30
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: IN
18325: PUSH
18326: LD_VAR 0 3
18330: PPUSH
18331: LD_VAR 0 4
18335: PPUSH
18336: LD_VAR 0 9
18340: PPUSH
18341: CALL_OW 440
18345: NOT
18346: AND
18347: IFFALSE 18351
// exit ;
18349: GO 18359
// result := true ;
18351: LD_ADDR_VAR 0 6
18355: PUSH
18356: LD_INT 1
18358: ST_TO_ADDR
// end ;
18359: LD_VAR 0 6
18363: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
18364: LD_INT 0
18366: PPUSH
18367: PPUSH
18368: PPUSH
18369: PPUSH
18370: PPUSH
18371: PPUSH
18372: PPUSH
18373: PPUSH
18374: PPUSH
18375: PPUSH
18376: PPUSH
18377: PPUSH
18378: PPUSH
18379: PPUSH
18380: PPUSH
18381: PPUSH
18382: PPUSH
18383: PPUSH
18384: PPUSH
18385: PPUSH
18386: PPUSH
18387: PPUSH
18388: PPUSH
18389: PPUSH
18390: PPUSH
18391: PPUSH
18392: PPUSH
18393: PPUSH
18394: PPUSH
18395: PPUSH
18396: PPUSH
18397: PPUSH
18398: PPUSH
18399: PPUSH
18400: PPUSH
18401: PPUSH
18402: PPUSH
18403: PPUSH
18404: PPUSH
18405: PPUSH
18406: PPUSH
18407: PPUSH
18408: PPUSH
18409: PPUSH
18410: PPUSH
18411: PPUSH
18412: PPUSH
18413: PPUSH
18414: PPUSH
18415: PPUSH
18416: PPUSH
18417: PPUSH
18418: PPUSH
18419: PPUSH
18420: PPUSH
18421: PPUSH
18422: PPUSH
18423: PPUSH
// result = [ ] ;
18424: LD_ADDR_VAR 0 7
18428: PUSH
18429: EMPTY
18430: ST_TO_ADDR
// temp_list = [ ] ;
18431: LD_ADDR_VAR 0 9
18435: PUSH
18436: EMPTY
18437: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
18438: LD_VAR 0 4
18442: PUSH
18443: LD_INT 0
18445: PUSH
18446: LD_INT 1
18448: PUSH
18449: LD_INT 2
18451: PUSH
18452: LD_INT 3
18454: PUSH
18455: LD_INT 4
18457: PUSH
18458: LD_INT 5
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: IN
18469: NOT
18470: PUSH
18471: LD_VAR 0 1
18475: PUSH
18476: LD_INT 0
18478: PUSH
18479: LD_INT 1
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: IN
18486: PUSH
18487: LD_VAR 0 5
18491: PUSH
18492: LD_INT 1
18494: PUSH
18495: LD_INT 2
18497: PUSH
18498: LD_INT 3
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: LIST
18505: IN
18506: NOT
18507: AND
18508: OR
18509: IFFALSE 18513
// exit ;
18511: GO 36904
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
18513: LD_VAR 0 1
18517: PUSH
18518: LD_INT 6
18520: PUSH
18521: LD_INT 7
18523: PUSH
18524: LD_INT 8
18526: PUSH
18527: LD_INT 13
18529: PUSH
18530: LD_INT 12
18532: PUSH
18533: LD_INT 15
18535: PUSH
18536: LD_INT 11
18538: PUSH
18539: LD_INT 14
18541: PUSH
18542: LD_INT 10
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: IN
18556: IFFALSE 18566
// btype = b_lab ;
18558: LD_ADDR_VAR 0 1
18562: PUSH
18563: LD_INT 6
18565: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
18566: LD_VAR 0 6
18570: PUSH
18571: LD_INT 0
18573: PUSH
18574: LD_INT 1
18576: PUSH
18577: LD_INT 2
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: IN
18585: NOT
18586: PUSH
18587: LD_VAR 0 1
18591: PUSH
18592: LD_INT 0
18594: PUSH
18595: LD_INT 1
18597: PUSH
18598: LD_INT 2
18600: PUSH
18601: LD_INT 3
18603: PUSH
18604: LD_INT 6
18606: PUSH
18607: LD_INT 36
18609: PUSH
18610: LD_INT 4
18612: PUSH
18613: LD_INT 5
18615: PUSH
18616: LD_INT 31
18618: PUSH
18619: LD_INT 32
18621: PUSH
18622: LD_INT 33
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: IN
18638: NOT
18639: PUSH
18640: LD_VAR 0 6
18644: PUSH
18645: LD_INT 1
18647: EQUAL
18648: AND
18649: OR
18650: PUSH
18651: LD_VAR 0 1
18655: PUSH
18656: LD_INT 2
18658: PUSH
18659: LD_INT 3
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: IN
18666: NOT
18667: PUSH
18668: LD_VAR 0 6
18672: PUSH
18673: LD_INT 2
18675: EQUAL
18676: AND
18677: OR
18678: IFFALSE 18688
// mode = 0 ;
18680: LD_ADDR_VAR 0 6
18684: PUSH
18685: LD_INT 0
18687: ST_TO_ADDR
// case mode of 0 :
18688: LD_VAR 0 6
18692: PUSH
18693: LD_INT 0
18695: DOUBLE
18696: EQUAL
18697: IFTRUE 18701
18699: GO 30154
18701: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18702: LD_ADDR_VAR 0 11
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: LD_INT 0
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 0
18719: PUSH
18720: LD_INT 1
18722: NEG
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 1
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 1
18740: PUSH
18741: LD_INT 1
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 0
18750: PUSH
18751: LD_INT 1
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: LD_INT 1
18760: NEG
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 1
18771: NEG
18772: PUSH
18773: LD_INT 1
18775: NEG
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 1
18783: NEG
18784: PUSH
18785: LD_INT 2
18787: NEG
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 0
18795: PUSH
18796: LD_INT 2
18798: NEG
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 1
18806: PUSH
18807: LD_INT 1
18809: NEG
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 0
18827: PUSH
18828: LD_INT 2
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 1
18837: NEG
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: LD_INT 3
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 0
18858: PUSH
18859: LD_INT 3
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: LD_INT 1
18868: NEG
18869: PUSH
18870: LD_INT 2
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18895: LD_ADDR_VAR 0 12
18899: PUSH
18900: LD_INT 0
18902: PUSH
18903: LD_INT 0
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 0
18912: PUSH
18913: LD_INT 1
18915: NEG
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: PUSH
18924: LD_INT 0
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 1
18933: PUSH
18934: LD_INT 1
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 1
18953: NEG
18954: PUSH
18955: LD_INT 0
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 1
18964: NEG
18965: PUSH
18966: LD_INT 1
18968: NEG
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 1
18976: PUSH
18977: LD_INT 1
18979: NEG
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: LD_INT 0
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: LD_INT 1
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 2
19018: NEG
19019: PUSH
19020: LD_INT 0
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 2
19029: NEG
19030: PUSH
19031: LD_INT 1
19033: NEG
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 2
19041: NEG
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 3
19052: NEG
19053: PUSH
19054: LD_INT 0
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 3
19063: NEG
19064: PUSH
19065: LD_INT 1
19067: NEG
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
19091: LD_ADDR_VAR 0 13
19095: PUSH
19096: LD_INT 0
19098: PUSH
19099: LD_INT 0
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: LD_INT 1
19111: NEG
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 1
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 0
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 1
19149: NEG
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 1
19160: NEG
19161: PUSH
19162: LD_INT 1
19164: NEG
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 1
19172: NEG
19173: PUSH
19174: LD_INT 2
19176: NEG
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 2
19184: PUSH
19185: LD_INT 1
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 2
19194: PUSH
19195: LD_INT 2
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: LD_INT 1
19204: PUSH
19205: LD_INT 2
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 2
19214: NEG
19215: PUSH
19216: LD_INT 1
19218: NEG
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: PUSH
19224: LD_INT 2
19226: NEG
19227: PUSH
19228: LD_INT 2
19230: NEG
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 2
19238: NEG
19239: PUSH
19240: LD_INT 3
19242: NEG
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 3
19250: NEG
19251: PUSH
19252: LD_INT 2
19254: NEG
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 3
19262: NEG
19263: PUSH
19264: LD_INT 3
19266: NEG
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
19290: LD_ADDR_VAR 0 14
19294: PUSH
19295: LD_INT 0
19297: PUSH
19298: LD_INT 0
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 0
19307: PUSH
19308: LD_INT 1
19310: NEG
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 1
19328: PUSH
19329: LD_INT 1
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 0
19338: PUSH
19339: LD_INT 1
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 1
19348: NEG
19349: PUSH
19350: LD_INT 0
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 1
19359: NEG
19360: PUSH
19361: LD_INT 1
19363: NEG
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 1
19371: NEG
19372: PUSH
19373: LD_INT 2
19375: NEG
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 0
19383: PUSH
19384: LD_INT 2
19386: NEG
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 1
19394: PUSH
19395: LD_INT 1
19397: NEG
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: LD_INT 2
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 0
19415: PUSH
19416: LD_INT 2
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 1
19425: NEG
19426: PUSH
19427: LD_INT 1
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 1
19436: NEG
19437: PUSH
19438: LD_INT 3
19440: NEG
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 0
19448: PUSH
19449: LD_INT 3
19451: NEG
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: LD_INT 2
19462: NEG
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
19486: LD_ADDR_VAR 0 15
19490: PUSH
19491: LD_INT 0
19493: PUSH
19494: LD_INT 0
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 0
19503: PUSH
19504: LD_INT 1
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 1
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 1
19524: PUSH
19525: LD_INT 1
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 0
19534: PUSH
19535: LD_INT 1
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 1
19544: NEG
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 1
19555: NEG
19556: PUSH
19557: LD_INT 1
19559: NEG
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 1
19567: PUSH
19568: LD_INT 1
19570: NEG
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 2
19578: PUSH
19579: LD_INT 0
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: LD_INT 1
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 1
19598: NEG
19599: PUSH
19600: LD_INT 1
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 2
19609: NEG
19610: PUSH
19611: LD_INT 0
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 2
19620: NEG
19621: PUSH
19622: LD_INT 1
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 2
19632: PUSH
19633: LD_INT 1
19635: NEG
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 3
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 3
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19679: LD_ADDR_VAR 0 16
19683: PUSH
19684: LD_INT 0
19686: PUSH
19687: LD_INT 0
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: LD_INT 1
19699: NEG
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: LD_INT 1
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 0
19727: PUSH
19728: LD_INT 1
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 1
19737: NEG
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 1
19748: NEG
19749: PUSH
19750: LD_INT 1
19752: NEG
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 1
19760: NEG
19761: PUSH
19762: LD_INT 2
19764: NEG
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 2
19772: PUSH
19773: LD_INT 1
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 2
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: LD_INT 2
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 2
19802: NEG
19803: PUSH
19804: LD_INT 1
19806: NEG
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: LD_INT 2
19814: NEG
19815: PUSH
19816: LD_INT 2
19818: NEG
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: LD_INT 3
19826: PUSH
19827: LD_INT 2
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 3
19836: PUSH
19837: LD_INT 3
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 2
19846: PUSH
19847: LD_INT 3
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19872: LD_ADDR_VAR 0 17
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: LD_INT 0
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PUSH
19887: LD_INT 0
19889: PUSH
19890: LD_INT 1
19892: NEG
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 1
19900: PUSH
19901: LD_INT 0
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: LD_INT 1
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: LD_INT 1
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 1
19930: NEG
19931: PUSH
19932: LD_INT 0
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 1
19941: NEG
19942: PUSH
19943: LD_INT 1
19945: NEG
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 1
19953: NEG
19954: PUSH
19955: LD_INT 2
19957: NEG
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 0
19965: PUSH
19966: LD_INT 2
19968: NEG
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 1
19976: PUSH
19977: LD_INT 1
19979: NEG
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 2
19987: PUSH
19988: LD_INT 0
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: PUSH
19995: LD_INT 2
19997: PUSH
19998: LD_INT 1
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: LD_INT 2
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: LD_INT 2
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 0
20027: PUSH
20028: LD_INT 2
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 1
20037: NEG
20038: PUSH
20039: LD_INT 1
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 2
20048: NEG
20049: PUSH
20050: LD_INT 0
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: PUSH
20057: LD_INT 2
20059: NEG
20060: PUSH
20061: LD_INT 1
20063: NEG
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 2
20071: NEG
20072: PUSH
20073: LD_INT 2
20075: NEG
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20102: LD_ADDR_VAR 0 18
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: LD_INT 0
20112: PUSH
20113: EMPTY
20114: LIST
20115: LIST
20116: PUSH
20117: LD_INT 0
20119: PUSH
20120: LD_INT 1
20122: NEG
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 1
20130: PUSH
20131: LD_INT 0
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 1
20140: PUSH
20141: LD_INT 1
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 0
20150: PUSH
20151: LD_INT 1
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 1
20160: NEG
20161: PUSH
20162: LD_INT 0
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 1
20171: NEG
20172: PUSH
20173: LD_INT 1
20175: NEG
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: NEG
20184: PUSH
20185: LD_INT 2
20187: NEG
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 0
20195: PUSH
20196: LD_INT 2
20198: NEG
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 1
20206: PUSH
20207: LD_INT 1
20209: NEG
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: PUSH
20218: LD_INT 0
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 2
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 0
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: LD_INT 1
20267: NEG
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 2
20278: NEG
20279: PUSH
20280: LD_INT 0
20282: PUSH
20283: EMPTY
20284: LIST
20285: LIST
20286: PUSH
20287: LD_INT 2
20289: NEG
20290: PUSH
20291: LD_INT 1
20293: NEG
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 2
20301: NEG
20302: PUSH
20303: LD_INT 2
20305: NEG
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20332: LD_ADDR_VAR 0 19
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: LD_INT 0
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 0
20349: PUSH
20350: LD_INT 1
20352: NEG
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 1
20360: PUSH
20361: LD_INT 0
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 0
20380: PUSH
20381: LD_INT 1
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 1
20390: NEG
20391: PUSH
20392: LD_INT 0
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 1
20401: NEG
20402: PUSH
20403: LD_INT 1
20405: NEG
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 1
20413: NEG
20414: PUSH
20415: LD_INT 2
20417: NEG
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 0
20425: PUSH
20426: LD_INT 2
20428: NEG
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 1
20436: PUSH
20437: LD_INT 1
20439: NEG
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: PUSH
20448: LD_INT 0
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 2
20457: PUSH
20458: LD_INT 1
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 2
20467: PUSH
20468: LD_INT 2
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 1
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: LD_INT 0
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: EMPTY
20492: LIST
20493: LIST
20494: PUSH
20495: LD_INT 1
20497: NEG
20498: PUSH
20499: LD_INT 1
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 2
20508: NEG
20509: PUSH
20510: LD_INT 0
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 2
20519: NEG
20520: PUSH
20521: LD_INT 1
20523: NEG
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 2
20531: NEG
20532: PUSH
20533: LD_INT 2
20535: NEG
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20562: LD_ADDR_VAR 0 20
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: LD_INT 0
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PUSH
20577: LD_INT 0
20579: PUSH
20580: LD_INT 1
20582: NEG
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 1
20590: PUSH
20591: LD_INT 0
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 0
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PUSH
20618: LD_INT 1
20620: NEG
20621: PUSH
20622: LD_INT 0
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: LD_INT 1
20635: NEG
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 1
20643: NEG
20644: PUSH
20645: LD_INT 2
20647: NEG
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: LD_INT 2
20658: NEG
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 1
20666: PUSH
20667: LD_INT 1
20669: NEG
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 2
20677: PUSH
20678: LD_INT 0
20680: PUSH
20681: EMPTY
20682: LIST
20683: LIST
20684: PUSH
20685: LD_INT 2
20687: PUSH
20688: LD_INT 1
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: PUSH
20695: LD_INT 2
20697: PUSH
20698: LD_INT 2
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: LD_INT 2
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: LD_INT 0
20717: PUSH
20718: LD_INT 2
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: LD_INT 1
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: LD_INT 2
20738: NEG
20739: PUSH
20740: LD_INT 0
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: LD_INT 2
20749: NEG
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PUSH
20759: LD_INT 2
20761: NEG
20762: PUSH
20763: LD_INT 2
20765: NEG
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20792: LD_ADDR_VAR 0 21
20796: PUSH
20797: LD_INT 0
20799: PUSH
20800: LD_INT 0
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: LD_INT 1
20812: NEG
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: LD_INT 0
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 1
20830: PUSH
20831: LD_INT 1
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 0
20840: PUSH
20841: LD_INT 1
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: PUSH
20848: LD_INT 1
20850: NEG
20851: PUSH
20852: LD_INT 0
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 1
20861: NEG
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: LD_INT 1
20873: NEG
20874: PUSH
20875: LD_INT 2
20877: NEG
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 0
20885: PUSH
20886: LD_INT 2
20888: NEG
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: LD_INT 1
20899: NEG
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 2
20907: PUSH
20908: LD_INT 0
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 2
20917: PUSH
20918: LD_INT 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 2
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: LD_INT 2
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: LD_INT 0
20947: PUSH
20948: LD_INT 2
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 1
20957: NEG
20958: PUSH
20959: LD_INT 1
20961: PUSH
20962: EMPTY
20963: LIST
20964: LIST
20965: PUSH
20966: LD_INT 2
20968: NEG
20969: PUSH
20970: LD_INT 0
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: PUSH
20977: LD_INT 2
20979: NEG
20980: PUSH
20981: LD_INT 1
20983: NEG
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 2
20991: NEG
20992: PUSH
20993: LD_INT 2
20995: NEG
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21022: LD_ADDR_VAR 0 22
21026: PUSH
21027: LD_INT 0
21029: PUSH
21030: LD_INT 0
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 0
21039: PUSH
21040: LD_INT 1
21042: NEG
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 1
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: LD_INT 1
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 1
21080: NEG
21081: PUSH
21082: LD_INT 0
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 1
21091: NEG
21092: PUSH
21093: LD_INT 1
21095: NEG
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: PUSH
21105: LD_INT 2
21107: NEG
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: LD_INT 2
21118: NEG
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 1
21126: PUSH
21127: LD_INT 1
21129: NEG
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 2
21137: PUSH
21138: LD_INT 0
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 2
21147: PUSH
21148: LD_INT 1
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 2
21157: PUSH
21158: LD_INT 2
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 1
21167: PUSH
21168: LD_INT 2
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 0
21177: PUSH
21178: LD_INT 2
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 1
21187: NEG
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 2
21198: NEG
21199: PUSH
21200: LD_INT 0
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 2
21209: NEG
21210: PUSH
21211: LD_INT 1
21213: NEG
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 2
21221: NEG
21222: PUSH
21223: LD_INT 2
21225: NEG
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
21252: LD_ADDR_VAR 0 23
21256: PUSH
21257: LD_INT 0
21259: PUSH
21260: LD_INT 0
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: LD_INT 1
21272: NEG
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 1
21280: PUSH
21281: LD_INT 0
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 1
21290: PUSH
21291: LD_INT 1
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: LD_INT 1
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 1
21310: NEG
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 1
21321: NEG
21322: PUSH
21323: LD_INT 1
21325: NEG
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 1
21333: NEG
21334: PUSH
21335: LD_INT 2
21337: NEG
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 0
21345: PUSH
21346: LD_INT 2
21348: NEG
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: LD_INT 0
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 2
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 2
21387: PUSH
21388: LD_INT 2
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 1
21397: PUSH
21398: LD_INT 2
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: LD_INT 2
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PUSH
21415: LD_INT 1
21417: NEG
21418: PUSH
21419: LD_INT 1
21421: PUSH
21422: EMPTY
21423: LIST
21424: LIST
21425: PUSH
21426: LD_INT 2
21428: NEG
21429: PUSH
21430: LD_INT 0
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 2
21439: NEG
21440: PUSH
21441: LD_INT 1
21443: NEG
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 2
21451: NEG
21452: PUSH
21453: LD_INT 2
21455: NEG
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 2
21463: NEG
21464: PUSH
21465: LD_INT 3
21467: NEG
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: LD_INT 3
21479: NEG
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 1
21487: PUSH
21488: LD_INT 2
21490: NEG
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 2
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
21532: LD_ADDR_VAR 0 24
21536: PUSH
21537: LD_INT 0
21539: PUSH
21540: LD_INT 0
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 1
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 0
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 1
21590: NEG
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 1
21601: NEG
21602: PUSH
21603: LD_INT 1
21605: NEG
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 1
21613: NEG
21614: PUSH
21615: LD_INT 2
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 0
21625: PUSH
21626: LD_INT 2
21628: NEG
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: LD_INT 1
21639: NEG
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 2
21647: PUSH
21648: LD_INT 0
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 2
21657: PUSH
21658: LD_INT 1
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 2
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: LD_INT 2
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 0
21687: PUSH
21688: LD_INT 2
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 1
21697: NEG
21698: PUSH
21699: LD_INT 1
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 2
21708: NEG
21709: PUSH
21710: LD_INT 0
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: NEG
21720: PUSH
21721: LD_INT 1
21723: NEG
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 2
21731: NEG
21732: PUSH
21733: LD_INT 2
21735: NEG
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: PUSH
21741: LD_INT 1
21743: PUSH
21744: LD_INT 2
21746: NEG
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 2
21754: PUSH
21755: LD_INT 1
21757: NEG
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 3
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 3
21775: PUSH
21776: LD_INT 2
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21808: LD_ADDR_VAR 0 25
21812: PUSH
21813: LD_INT 0
21815: PUSH
21816: LD_INT 0
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PUSH
21823: LD_INT 0
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: LD_INT 1
21836: PUSH
21837: LD_INT 0
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 1
21846: PUSH
21847: LD_INT 1
21849: PUSH
21850: EMPTY
21851: LIST
21852: LIST
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: LD_INT 1
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PUSH
21864: LD_INT 1
21866: NEG
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 1
21877: NEG
21878: PUSH
21879: LD_INT 1
21881: NEG
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 1
21889: NEG
21890: PUSH
21891: LD_INT 2
21893: NEG
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 0
21901: PUSH
21902: LD_INT 2
21904: NEG
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 1
21912: PUSH
21913: LD_INT 1
21915: NEG
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 2
21923: PUSH
21924: LD_INT 0
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: LD_INT 2
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 2
21943: PUSH
21944: LD_INT 2
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: LD_INT 2
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 1
21973: NEG
21974: PUSH
21975: LD_INT 1
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: LD_INT 2
21984: NEG
21985: PUSH
21986: LD_INT 0
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 2
21995: NEG
21996: PUSH
21997: LD_INT 1
21999: NEG
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: PUSH
22005: LD_INT 2
22007: NEG
22008: PUSH
22009: LD_INT 2
22011: NEG
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: PUSH
22017: LD_INT 3
22019: PUSH
22020: LD_INT 1
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 3
22029: PUSH
22030: LD_INT 2
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: PUSH
22037: LD_INT 2
22039: PUSH
22040: LD_INT 3
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 1
22049: PUSH
22050: LD_INT 3
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
22082: LD_ADDR_VAR 0 26
22086: PUSH
22087: LD_INT 0
22089: PUSH
22090: LD_INT 0
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: LD_INT 1
22102: NEG
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: LD_INT 0
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: NEG
22141: PUSH
22142: LD_INT 0
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 1
22151: NEG
22152: PUSH
22153: LD_INT 1
22155: NEG
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 1
22163: NEG
22164: PUSH
22165: LD_INT 2
22167: NEG
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: LD_INT 2
22178: NEG
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: LD_INT 1
22189: NEG
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 2
22197: PUSH
22198: LD_INT 0
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 2
22207: PUSH
22208: LD_INT 1
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 2
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 0
22237: PUSH
22238: LD_INT 2
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 1
22247: NEG
22248: PUSH
22249: LD_INT 1
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 2
22258: NEG
22259: PUSH
22260: LD_INT 0
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 2
22269: NEG
22270: PUSH
22271: LD_INT 1
22273: NEG
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: PUSH
22279: LD_INT 2
22281: NEG
22282: PUSH
22283: LD_INT 2
22285: NEG
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: LD_INT 3
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: LD_INT 3
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 1
22313: NEG
22314: PUSH
22315: LD_INT 2
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 2
22324: NEG
22325: PUSH
22326: LD_INT 1
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22358: LD_ADDR_VAR 0 27
22362: PUSH
22363: LD_INT 0
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 0
22375: PUSH
22376: LD_INT 1
22378: NEG
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: LD_INT 0
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 1
22396: PUSH
22397: LD_INT 1
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 0
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 1
22416: NEG
22417: PUSH
22418: LD_INT 0
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: LD_INT 1
22431: NEG
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 1
22439: NEG
22440: PUSH
22441: LD_INT 2
22443: NEG
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 0
22451: PUSH
22452: LD_INT 2
22454: NEG
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: LD_INT 1
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 2
22473: PUSH
22474: LD_INT 0
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: LD_INT 1
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: PUSH
22491: LD_INT 2
22493: PUSH
22494: LD_INT 2
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 1
22503: PUSH
22504: LD_INT 2
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 0
22513: PUSH
22514: LD_INT 2
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: LD_INT 1
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: PUSH
22532: LD_INT 2
22534: NEG
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 2
22545: NEG
22546: PUSH
22547: LD_INT 1
22549: NEG
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 2
22557: NEG
22558: PUSH
22559: LD_INT 2
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 2
22580: NEG
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 3
22591: NEG
22592: PUSH
22593: LD_INT 1
22595: NEG
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 3
22603: NEG
22604: PUSH
22605: LD_INT 2
22607: NEG
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22638: LD_ADDR_VAR 0 28
22642: PUSH
22643: LD_INT 0
22645: PUSH
22646: LD_INT 0
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 0
22655: PUSH
22656: LD_INT 1
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: LD_INT 0
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: LD_INT 1
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 0
22686: PUSH
22687: LD_INT 1
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 1
22696: NEG
22697: PUSH
22698: LD_INT 0
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 1
22707: NEG
22708: PUSH
22709: LD_INT 1
22711: NEG
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 1
22719: NEG
22720: PUSH
22721: LD_INT 2
22723: NEG
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 0
22731: PUSH
22732: LD_INT 2
22734: NEG
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: LD_INT 1
22745: NEG
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 2
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: LD_INT 2
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: PUSH
22784: LD_INT 2
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 0
22793: PUSH
22794: LD_INT 2
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: NEG
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 2
22814: NEG
22815: PUSH
22816: LD_INT 0
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 2
22825: NEG
22826: PUSH
22827: LD_INT 1
22829: NEG
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 2
22837: NEG
22838: PUSH
22839: LD_INT 2
22841: NEG
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 2
22849: NEG
22850: PUSH
22851: LD_INT 3
22853: NEG
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 1
22861: NEG
22862: PUSH
22863: LD_INT 3
22865: NEG
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 3
22873: NEG
22874: PUSH
22875: LD_INT 1
22877: NEG
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: LD_INT 3
22885: NEG
22886: PUSH
22887: LD_INT 2
22889: NEG
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22920: LD_ADDR_VAR 0 29
22924: PUSH
22925: LD_INT 0
22927: PUSH
22928: LD_INT 0
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 0
22937: PUSH
22938: LD_INT 1
22940: NEG
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 1
22948: PUSH
22949: LD_INT 0
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 1
22958: PUSH
22959: LD_INT 1
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PUSH
22966: LD_INT 0
22968: PUSH
22969: LD_INT 1
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 1
22978: NEG
22979: PUSH
22980: LD_INT 0
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 1
22989: NEG
22990: PUSH
22991: LD_INT 1
22993: NEG
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 1
23001: NEG
23002: PUSH
23003: LD_INT 2
23005: NEG
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 0
23013: PUSH
23014: LD_INT 2
23016: NEG
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 1
23024: PUSH
23025: LD_INT 1
23027: NEG
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 2
23035: PUSH
23036: LD_INT 0
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 2
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: LD_INT 2
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: LD_INT 2
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 1
23075: NEG
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 2
23086: NEG
23087: PUSH
23088: LD_INT 1
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 2
23098: NEG
23099: PUSH
23100: LD_INT 2
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 2
23110: NEG
23111: PUSH
23112: LD_INT 3
23114: NEG
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 2
23122: PUSH
23123: LD_INT 1
23125: NEG
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 3
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: LD_INT 3
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: NEG
23154: PUSH
23155: LD_INT 2
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 3
23164: NEG
23165: PUSH
23166: LD_INT 2
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23199: LD_ADDR_VAR 0 30
23203: PUSH
23204: LD_INT 0
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 0
23216: PUSH
23217: LD_INT 1
23219: NEG
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 1
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: LD_INT 1
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 0
23247: PUSH
23248: LD_INT 1
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: LD_INT 1
23257: NEG
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: LD_INT 1
23272: NEG
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 1
23280: NEG
23281: PUSH
23282: LD_INT 2
23284: NEG
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 0
23292: PUSH
23293: LD_INT 2
23295: NEG
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: LD_INT 1
23306: NEG
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 2
23314: PUSH
23315: LD_INT 0
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 2
23324: PUSH
23325: LD_INT 1
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 2
23334: PUSH
23335: LD_INT 2
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 1
23344: PUSH
23345: LD_INT 2
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 2
23365: NEG
23366: PUSH
23367: LD_INT 0
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 2
23376: NEG
23377: PUSH
23378: LD_INT 1
23380: NEG
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: LD_INT 1
23388: NEG
23389: PUSH
23390: LD_INT 3
23392: NEG
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 1
23400: PUSH
23401: LD_INT 2
23403: NEG
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 3
23411: PUSH
23412: LD_INT 2
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 2
23421: PUSH
23422: LD_INT 3
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 2
23431: NEG
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 3
23442: NEG
23443: PUSH
23444: LD_INT 1
23446: NEG
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23477: LD_ADDR_VAR 0 31
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 0
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 1
23505: PUSH
23506: LD_INT 0
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 0
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 1
23535: NEG
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 1
23546: NEG
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: NEG
23559: PUSH
23560: LD_INT 2
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: LD_INT 1
23573: NEG
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 2
23581: PUSH
23582: LD_INT 0
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 2
23591: PUSH
23592: LD_INT 1
23594: PUSH
23595: EMPTY
23596: LIST
23597: LIST
23598: PUSH
23599: LD_INT 2
23601: PUSH
23602: LD_INT 2
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 1
23611: PUSH
23612: LD_INT 2
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 0
23621: PUSH
23622: LD_INT 2
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: LD_INT 1
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 2
23642: NEG
23643: PUSH
23644: LD_INT 1
23646: NEG
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 2
23654: NEG
23655: PUSH
23656: LD_INT 2
23658: NEG
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 2
23666: NEG
23667: PUSH
23668: LD_INT 3
23670: NEG
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 2
23678: PUSH
23679: LD_INT 1
23681: NEG
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: LD_INT 3
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: LD_INT 3
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 1
23709: NEG
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 3
23720: NEG
23721: PUSH
23722: LD_INT 2
23724: NEG
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23755: LD_ADDR_VAR 0 32
23759: PUSH
23760: LD_INT 0
23762: PUSH
23763: LD_INT 0
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: LD_INT 1
23775: NEG
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 0
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 1
23813: NEG
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 1
23824: NEG
23825: PUSH
23826: LD_INT 1
23828: NEG
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 1
23836: NEG
23837: PUSH
23838: LD_INT 2
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 0
23848: PUSH
23849: LD_INT 2
23851: NEG
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 2
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 1
23890: PUSH
23891: LD_INT 2
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: LD_INT 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 1
23910: NEG
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 2
23921: NEG
23922: PUSH
23923: LD_INT 0
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 2
23932: NEG
23933: PUSH
23934: LD_INT 1
23936: NEG
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: PUSH
23942: LD_INT 1
23944: NEG
23945: PUSH
23946: LD_INT 3
23948: NEG
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 1
23956: PUSH
23957: LD_INT 2
23959: NEG
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PUSH
23965: LD_INT 3
23967: PUSH
23968: LD_INT 2
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 2
23977: PUSH
23978: LD_INT 3
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 2
23987: NEG
23988: PUSH
23989: LD_INT 1
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 3
23998: NEG
23999: PUSH
24000: LD_INT 1
24002: NEG
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: EMPTY
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24033: LD_ADDR_VAR 0 33
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 0
24050: PUSH
24051: LD_INT 1
24053: NEG
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 1
24102: NEG
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 1
24114: NEG
24115: PUSH
24116: LD_INT 2
24118: NEG
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: LD_INT 1
24129: NEG
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 1
24157: PUSH
24158: LD_INT 2
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 0
24167: PUSH
24168: LD_INT 2
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: LD_INT 1
24177: NEG
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 2
24188: NEG
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 2
24199: NEG
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 2
24211: NEG
24212: PUSH
24213: LD_INT 2
24215: NEG
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 2
24223: NEG
24224: PUSH
24225: LD_INT 3
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: LD_INT 1
24238: NEG
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 3
24246: PUSH
24247: LD_INT 1
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 1
24256: PUSH
24257: LD_INT 3
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: LD_INT 2
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 3
24277: NEG
24278: PUSH
24279: LD_INT 2
24281: NEG
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
24312: LD_ADDR_VAR 0 34
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: LD_INT 1
24332: NEG
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 1
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 1
24370: NEG
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 1
24381: NEG
24382: PUSH
24383: LD_INT 1
24385: NEG
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 1
24393: NEG
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 0
24405: PUSH
24406: LD_INT 2
24408: NEG
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 1
24416: PUSH
24417: LD_INT 1
24419: NEG
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 2
24427: PUSH
24428: LD_INT 1
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 2
24437: PUSH
24438: LD_INT 2
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 1
24447: PUSH
24448: LD_INT 2
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 1
24457: NEG
24458: PUSH
24459: LD_INT 1
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 2
24468: NEG
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 2
24479: NEG
24480: PUSH
24481: LD_INT 1
24483: NEG
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 2
24491: NEG
24492: PUSH
24493: LD_INT 2
24495: NEG
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 1
24503: NEG
24504: PUSH
24505: LD_INT 3
24507: NEG
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 1
24515: PUSH
24516: LD_INT 2
24518: NEG
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 3
24526: PUSH
24527: LD_INT 2
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 2
24536: PUSH
24537: LD_INT 3
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: LD_INT 2
24546: NEG
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 3
24557: NEG
24558: PUSH
24559: LD_INT 1
24561: NEG
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24592: LD_ADDR_VAR 0 35
24596: PUSH
24597: LD_INT 0
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: LD_INT 0
24609: PUSH
24610: LD_INT 1
24612: NEG
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: LD_INT 0
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 1
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 0
24640: PUSH
24641: LD_INT 1
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 1
24650: NEG
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: EMPTY
24656: LIST
24657: LIST
24658: PUSH
24659: LD_INT 1
24661: NEG
24662: PUSH
24663: LD_INT 1
24665: NEG
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 2
24673: PUSH
24674: LD_INT 1
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 2
24683: NEG
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24704: LD_ADDR_VAR 0 36
24708: PUSH
24709: LD_INT 0
24711: PUSH
24712: LD_INT 0
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 0
24721: PUSH
24722: LD_INT 1
24724: NEG
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 1
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 1
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 1
24762: NEG
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: NEG
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 2
24789: NEG
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: LD_INT 2
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24816: LD_ADDR_VAR 0 37
24820: PUSH
24821: LD_INT 0
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 0
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: LD_INT 0
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: LD_INT 1
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 0
24864: PUSH
24865: LD_INT 1
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 1
24874: NEG
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: LD_INT 1
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 1
24900: NEG
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24928: LD_ADDR_VAR 0 38
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: LD_INT 1
24948: NEG
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: LD_INT 1
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PUSH
24974: LD_INT 0
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 1
24986: NEG
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 1
24997: NEG
24998: PUSH
24999: LD_INT 1
25001: NEG
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 2
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 2
25019: NEG
25020: PUSH
25021: LD_INT 1
25023: NEG
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
25040: LD_ADDR_VAR 0 39
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: LD_INT 0
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: LD_INT 1
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: LD_INT 1
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 1
25098: NEG
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 1
25109: NEG
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: NEG
25122: PUSH
25123: LD_INT 2
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 1
25133: PUSH
25134: LD_INT 2
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
25152: LD_ADDR_VAR 0 40
25156: PUSH
25157: LD_INT 0
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 0
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 1
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 0
25200: PUSH
25201: LD_INT 1
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 1
25221: NEG
25222: PUSH
25223: LD_INT 1
25225: NEG
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: LD_INT 1
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: NEG
25245: PUSH
25246: LD_INT 1
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25264: LD_ADDR_VAR 0 41
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: LD_INT 1
25284: NEG
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: PUSH
25293: LD_INT 0
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 1
25322: NEG
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 1
25333: NEG
25334: PUSH
25335: LD_INT 1
25337: NEG
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: LD_INT 2
25349: NEG
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: LD_INT 1
25360: NEG
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PUSH
25376: LD_INT 2
25378: PUSH
25379: LD_INT 1
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 2
25388: PUSH
25389: LD_INT 2
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: LD_INT 2
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: LD_INT 1
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 2
25419: NEG
25420: PUSH
25421: LD_INT 0
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 2
25430: NEG
25431: PUSH
25432: LD_INT 1
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 2
25442: NEG
25443: PUSH
25444: LD_INT 2
25446: NEG
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 2
25454: NEG
25455: PUSH
25456: LD_INT 3
25458: NEG
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 2
25466: PUSH
25467: LD_INT 1
25469: NEG
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 3
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 3
25487: PUSH
25488: LD_INT 1
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 3
25497: PUSH
25498: LD_INT 2
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 3
25507: PUSH
25508: LD_INT 3
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 2
25517: PUSH
25518: LD_INT 3
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 2
25527: NEG
25528: PUSH
25529: LD_INT 1
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 3
25538: NEG
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 3
25549: NEG
25550: PUSH
25551: LD_INT 1
25553: NEG
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 3
25561: NEG
25562: PUSH
25563: LD_INT 2
25565: NEG
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 3
25573: NEG
25574: PUSH
25575: LD_INT 3
25577: NEG
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: LIST
25613: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25614: LD_ADDR_VAR 0 42
25618: PUSH
25619: LD_INT 0
25621: PUSH
25622: LD_INT 0
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: LD_INT 1
25634: NEG
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: LD_INT 0
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: NEG
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: NEG
25684: PUSH
25685: LD_INT 1
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 1
25695: NEG
25696: PUSH
25697: LD_INT 2
25699: NEG
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 1
25718: PUSH
25719: LD_INT 1
25721: NEG
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 2
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: LD_INT 2
25739: PUSH
25740: LD_INT 2
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 1
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: LD_INT 2
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: NEG
25770: PUSH
25771: LD_INT 1
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 2
25780: NEG
25781: PUSH
25782: LD_INT 1
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 2
25792: NEG
25793: PUSH
25794: LD_INT 2
25796: NEG
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: LD_INT 3
25808: NEG
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 1
25816: NEG
25817: PUSH
25818: LD_INT 3
25820: NEG
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: LD_INT 3
25831: NEG
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: LD_INT 2
25842: NEG
25843: PUSH
25844: EMPTY
25845: LIST
25846: LIST
25847: PUSH
25848: LD_INT 3
25850: PUSH
25851: LD_INT 2
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 3
25860: PUSH
25861: LD_INT 3
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 2
25870: PUSH
25871: LD_INT 3
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 1
25880: PUSH
25881: LD_INT 3
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 0
25890: PUSH
25891: LD_INT 3
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: NEG
25901: PUSH
25902: LD_INT 2
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 3
25911: NEG
25912: PUSH
25913: LD_INT 2
25915: NEG
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 3
25923: NEG
25924: PUSH
25925: LD_INT 3
25927: NEG
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25964: LD_ADDR_VAR 0 43
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: LD_INT 1
25984: NEG
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 1
26022: NEG
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 1
26033: NEG
26034: PUSH
26035: LD_INT 1
26037: NEG
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 1
26045: NEG
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: LD_INT 2
26060: NEG
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 2
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: PUSH
26100: LD_INT 2
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 2
26130: NEG
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 2
26141: NEG
26142: PUSH
26143: LD_INT 1
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: LD_INT 3
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: LD_INT 3
26168: NEG
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: LD_INT 2
26179: NEG
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 2
26187: PUSH
26188: LD_INT 1
26190: NEG
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 3
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 3
26208: PUSH
26209: LD_INT 1
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: LD_INT 3
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 0
26228: PUSH
26229: LD_INT 3
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: LD_INT 2
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 2
26249: NEG
26250: PUSH
26251: LD_INT 1
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 3
26260: NEG
26261: PUSH
26262: LD_INT 0
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 3
26271: NEG
26272: PUSH
26273: LD_INT 1
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26312: LD_ADDR_VAR 0 44
26316: PUSH
26317: LD_INT 0
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 1
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 1
26370: NEG
26371: PUSH
26372: LD_INT 0
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 1
26381: NEG
26382: PUSH
26383: LD_INT 1
26385: NEG
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: LD_INT 1
26393: NEG
26394: PUSH
26395: LD_INT 2
26397: NEG
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: LD_INT 1
26408: NEG
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 2
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: EMPTY
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 2
26426: PUSH
26427: LD_INT 1
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 2
26436: PUSH
26437: LD_INT 2
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 1
26446: PUSH
26447: LD_INT 2
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 2
26467: NEG
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 2
26478: NEG
26479: PUSH
26480: LD_INT 1
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 2
26490: NEG
26491: PUSH
26492: LD_INT 2
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 2
26502: NEG
26503: PUSH
26504: LD_INT 3
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 3
26525: PUSH
26526: LD_INT 0
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 3
26535: PUSH
26536: LD_INT 1
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 3
26545: PUSH
26546: LD_INT 2
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 3
26555: PUSH
26556: LD_INT 3
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: PUSH
26566: LD_INT 3
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 2
26575: NEG
26576: PUSH
26577: LD_INT 1
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 3
26586: NEG
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 3
26597: NEG
26598: PUSH
26599: LD_INT 1
26601: NEG
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 3
26609: NEG
26610: PUSH
26611: LD_INT 2
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 3
26621: NEG
26622: PUSH
26623: LD_INT 3
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26662: LD_ADDR_VAR 0 45
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 0
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: LD_INT 1
26682: NEG
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 0
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 0
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: NEG
26721: PUSH
26722: LD_INT 0
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: PUSH
26745: LD_INT 2
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: LD_INT 2
26758: NEG
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 1
26766: PUSH
26767: LD_INT 1
26769: NEG
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 2
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 2
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 2
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 2
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: LD_INT 2
26840: NEG
26841: PUSH
26842: LD_INT 2
26844: NEG
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 2
26852: NEG
26853: PUSH
26854: LD_INT 3
26856: NEG
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 1
26864: NEG
26865: PUSH
26866: LD_INT 3
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 0
26876: PUSH
26877: LD_INT 3
26879: NEG
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 1
26887: PUSH
26888: LD_INT 2
26890: NEG
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 3
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 3
26908: PUSH
26909: LD_INT 3
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 2
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 1
26928: PUSH
26929: LD_INT 3
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: LD_INT 3
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: PUSH
26946: LD_INT 1
26948: NEG
26949: PUSH
26950: LD_INT 2
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 3
26959: NEG
26960: PUSH
26961: LD_INT 2
26963: NEG
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 3
26971: NEG
26972: PUSH
26973: LD_INT 3
26975: NEG
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27012: LD_ADDR_VAR 0 46
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: LD_INT 0
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 0
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: PUSH
27051: LD_INT 1
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 0
27060: PUSH
27061: LD_INT 1
27063: PUSH
27064: EMPTY
27065: LIST
27066: LIST
27067: PUSH
27068: LD_INT 1
27070: NEG
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 1
27081: NEG
27082: PUSH
27083: LD_INT 1
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: LD_INT 2
27097: NEG
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 2
27108: NEG
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 1
27116: PUSH
27117: LD_INT 1
27119: NEG
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 2
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: EMPTY
27142: LIST
27143: LIST
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: LD_INT 2
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 1
27167: NEG
27168: PUSH
27169: LD_INT 1
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 2
27178: NEG
27179: PUSH
27180: LD_INT 0
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 2
27189: NEG
27190: PUSH
27191: LD_INT 1
27193: NEG
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 1
27201: NEG
27202: PUSH
27203: LD_INT 3
27205: NEG
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: LD_INT 3
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 1
27224: PUSH
27225: LD_INT 2
27227: NEG
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 2
27235: PUSH
27236: LD_INT 1
27238: NEG
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 3
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 3
27256: PUSH
27257: LD_INT 1
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: LD_INT 3
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: LD_INT 3
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: LD_INT 2
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 2
27297: NEG
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 3
27308: NEG
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 3
27319: NEG
27320: PUSH
27321: LD_INT 1
27323: NEG
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27360: LD_ADDR_VAR 0 47
27364: PUSH
27365: LD_INT 0
27367: PUSH
27368: LD_INT 0
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 0
27377: PUSH
27378: LD_INT 1
27380: NEG
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 1
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 1
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: LD_INT 1
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: LD_INT 0
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: LD_INT 2
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: LD_INT 2
27456: NEG
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 2
27475: NEG
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 2
27487: NEG
27488: PUSH
27489: LD_INT 2
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
27511: LD_ADDR_VAR 0 48
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: LD_INT 0
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 1
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: LD_INT 1
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: LD_INT 1
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 1
27569: NEG
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: LD_INT 1
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: LD_INT 2
27596: NEG
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: LD_INT 2
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: LD_INT 1
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27658: LD_ADDR_VAR 0 49
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: LD_INT 0
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: LD_INT 1
27678: NEG
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 1
27686: PUSH
27687: LD_INT 0
27689: PUSH
27690: EMPTY
27691: LIST
27692: LIST
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 0
27706: PUSH
27707: LD_INT 1
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: NEG
27717: PUSH
27718: LD_INT 0
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 1
27727: NEG
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 2
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 2
27770: PUSH
27771: LD_INT 2
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: LD_INT 2
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27802: LD_ADDR_VAR 0 50
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: LD_INT 1
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: LD_INT 0
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 2
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 2
27893: PUSH
27894: LD_INT 2
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: LD_INT 2
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: LD_INT 1
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27946: LD_ADDR_VAR 0 51
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: LD_INT 1
27966: NEG
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: LD_INT 0
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 0
27994: PUSH
27995: LD_INT 1
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 1
28004: NEG
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: LD_INT 1
28019: NEG
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 0
28037: PUSH
28038: LD_INT 2
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 1
28047: NEG
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 2
28058: NEG
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 2
28069: NEG
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28093: LD_ADDR_VAR 0 52
28097: PUSH
28098: LD_INT 0
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: LD_INT 0
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: PUSH
28132: LD_INT 1
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: LD_INT 1
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: LD_INT 0
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: LD_INT 1
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: LD_INT 2
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: NEG
28187: PUSH
28188: LD_INT 1
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 2
28197: NEG
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 2
28208: NEG
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 2
28220: NEG
28221: PUSH
28222: LD_INT 2
28224: NEG
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28244: LD_ADDR_VAR 0 53
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: LD_INT 0
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: LD_INT 1
28264: NEG
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 1
28282: PUSH
28283: LD_INT 1
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: LD_INT 1
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 1
28302: NEG
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: NEG
28314: PUSH
28315: LD_INT 1
28317: NEG
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: LD_INT 2
28329: NEG
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 0
28337: PUSH
28338: LD_INT 2
28340: NEG
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: LD_INT 1
28351: NEG
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 2
28359: PUSH
28360: LD_INT 0
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 2
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 2
28379: PUSH
28380: LD_INT 2
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: LD_INT 2
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: LD_INT 2
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 2
28420: NEG
28421: PUSH
28422: LD_INT 0
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 2
28431: NEG
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: NEG
28444: PUSH
28445: LD_INT 2
28447: NEG
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28474: LD_ADDR_VAR 0 54
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: LD_INT 0
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: LD_INT 1
28494: NEG
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 1
28512: PUSH
28513: LD_INT 1
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: LD_INT 1
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: NEG
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: LD_INT 1
28547: NEG
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PUSH
28557: LD_INT 2
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 0
28567: PUSH
28568: LD_INT 2
28570: NEG
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 1
28578: PUSH
28579: LD_INT 1
28581: NEG
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: LD_INT 0
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 2
28599: PUSH
28600: LD_INT 1
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: LD_INT 2
28609: PUSH
28610: LD_INT 2
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: LD_INT 2
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 0
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 1
28639: NEG
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 2
28650: NEG
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 2
28661: NEG
28662: PUSH
28663: LD_INT 1
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 2
28673: NEG
28674: PUSH
28675: LD_INT 2
28677: NEG
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: EMPTY
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28704: LD_ADDR_VAR 0 55
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: LD_INT 0
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: LD_INT 1
28724: NEG
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 1
28742: PUSH
28743: LD_INT 1
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: PUSH
28750: LD_INT 0
28752: PUSH
28753: LD_INT 1
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: NEG
28763: PUSH
28764: LD_INT 0
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 1
28773: NEG
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: LD_INT 2
28789: NEG
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 0
28797: PUSH
28798: LD_INT 2
28800: NEG
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 2
28819: PUSH
28820: LD_INT 0
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 2
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 1
28849: PUSH
28850: LD_INT 2
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 0
28859: PUSH
28860: LD_INT 2
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: NEG
28870: PUSH
28871: LD_INT 1
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 2
28880: NEG
28881: PUSH
28882: LD_INT 0
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: LD_INT 1
28895: NEG
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 2
28903: NEG
28904: PUSH
28905: LD_INT 2
28907: NEG
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: LIST
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28934: LD_ADDR_VAR 0 56
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: LD_INT 1
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: LD_INT 1
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: PUSH
28990: LD_INT 1
28992: NEG
28993: PUSH
28994: LD_INT 0
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: LD_INT 1
29007: NEG
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 1
29015: NEG
29016: PUSH
29017: LD_INT 2
29019: NEG
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 0
29027: PUSH
29028: LD_INT 2
29030: NEG
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 2
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 2
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 2
29069: PUSH
29070: LD_INT 2
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: LD_INT 2
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 2
29110: NEG
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: NEG
29122: PUSH
29123: LD_INT 1
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 2
29133: NEG
29134: PUSH
29135: LD_INT 2
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: LIST
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29164: LD_ADDR_VAR 0 57
29168: PUSH
29169: LD_INT 0
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 1
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 1
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 0
29212: PUSH
29213: LD_INT 1
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 1
29222: NEG
29223: PUSH
29224: LD_INT 0
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: LD_INT 1
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 1
29245: NEG
29246: PUSH
29247: LD_INT 2
29249: NEG
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: LD_INT 2
29260: NEG
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 1
29268: PUSH
29269: LD_INT 1
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 2
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PUSH
29297: LD_INT 2
29299: PUSH
29300: LD_INT 2
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 1
29309: PUSH
29310: LD_INT 2
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 0
29319: PUSH
29320: LD_INT 2
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 1
29329: NEG
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 2
29340: NEG
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 2
29351: NEG
29352: PUSH
29353: LD_INT 1
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 2
29363: NEG
29364: PUSH
29365: LD_INT 2
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29394: LD_ADDR_VAR 0 58
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: LD_INT 0
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: LD_INT 1
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_INT 0
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 1
29452: NEG
29453: PUSH
29454: LD_INT 0
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: LD_INT 1
29467: NEG
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: LD_INT 2
29479: NEG
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 0
29487: PUSH
29488: LD_INT 2
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 1
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 2
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: LD_INT 2
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: PUSH
29540: LD_INT 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 0
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: NEG
29560: PUSH
29561: LD_INT 1
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 2
29570: NEG
29571: PUSH
29572: LD_INT 0
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 2
29581: NEG
29582: PUSH
29583: LD_INT 1
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 2
29593: NEG
29594: PUSH
29595: LD_INT 2
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29624: LD_ADDR_VAR 0 59
29628: PUSH
29629: LD_INT 0
29631: PUSH
29632: LD_INT 0
29634: PUSH
29635: EMPTY
29636: LIST
29637: LIST
29638: PUSH
29639: LD_INT 0
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 1
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: LD_INT 1
29662: PUSH
29663: LD_INT 1
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 1
29682: NEG
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: NEG
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29712: LD_ADDR_VAR 0 60
29716: PUSH
29717: LD_INT 0
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 1
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 0
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 1
29781: NEG
29782: PUSH
29783: LD_INT 1
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29800: LD_ADDR_VAR 0 61
29804: PUSH
29805: LD_INT 0
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 0
29817: PUSH
29818: LD_INT 1
29820: NEG
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: LD_INT 0
29831: PUSH
29832: EMPTY
29833: LIST
29834: LIST
29835: PUSH
29836: LD_INT 1
29838: PUSH
29839: LD_INT 1
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 0
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: LD_INT 0
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29888: LD_ADDR_VAR 0 62
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 0
29905: PUSH
29906: LD_INT 1
29908: NEG
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 1
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 1
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 1
29946: NEG
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: NEG
29958: PUSH
29959: LD_INT 1
29961: NEG
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29976: LD_ADDR_VAR 0 63
29980: PUSH
29981: LD_INT 0
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: LD_INT 1
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 1
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 1
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 0
30024: PUSH
30025: LD_INT 1
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: LD_INT 0
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 1
30045: NEG
30046: PUSH
30047: LD_INT 1
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
30064: LD_ADDR_VAR 0 64
30068: PUSH
30069: LD_INT 0
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: PUSH
30079: LD_INT 0
30081: PUSH
30082: LD_INT 1
30084: NEG
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: LD_INT 0
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: LD_INT 1
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 0
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: NEG
30123: PUSH
30124: LD_INT 0
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 1
30133: NEG
30134: PUSH
30135: LD_INT 1
30137: NEG
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: ST_TO_ADDR
// end ; 1 :
30152: GO 36049
30154: LD_INT 1
30156: DOUBLE
30157: EQUAL
30158: IFTRUE 30162
30160: GO 32785
30162: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30163: LD_ADDR_VAR 0 11
30167: PUSH
30168: LD_INT 1
30170: NEG
30171: PUSH
30172: LD_INT 3
30174: NEG
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: LD_INT 3
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: LD_INT 2
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: LIST
30206: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30207: LD_ADDR_VAR 0 12
30211: PUSH
30212: LD_INT 2
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 3
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: LIST
30247: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30248: LD_ADDR_VAR 0 13
30252: PUSH
30253: LD_INT 3
30255: PUSH
30256: LD_INT 2
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 3
30265: PUSH
30266: LD_INT 3
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: LD_INT 3
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: LIST
30287: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30288: LD_ADDR_VAR 0 14
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 3
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: LD_INT 3
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 1
30315: NEG
30316: PUSH
30317: LD_INT 2
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: LIST
30328: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30329: LD_ADDR_VAR 0 15
30333: PUSH
30334: LD_INT 2
30336: NEG
30337: PUSH
30338: LD_INT 1
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 3
30347: NEG
30348: PUSH
30349: LD_INT 0
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 3
30358: NEG
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: LIST
30372: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30373: LD_ADDR_VAR 0 16
30377: PUSH
30378: LD_INT 2
30380: NEG
30381: PUSH
30382: LD_INT 3
30384: NEG
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 3
30392: NEG
30393: PUSH
30394: LD_INT 2
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 3
30404: NEG
30405: PUSH
30406: LD_INT 3
30408: NEG
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: LIST
30418: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30419: LD_ADDR_VAR 0 17
30423: PUSH
30424: LD_INT 1
30426: NEG
30427: PUSH
30428: LD_INT 3
30430: NEG
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 0
30438: PUSH
30439: LD_INT 3
30441: NEG
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: LD_INT 2
30452: NEG
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: LIST
30462: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30463: LD_ADDR_VAR 0 18
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 3
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30504: LD_ADDR_VAR 0 19
30508: PUSH
30509: LD_INT 3
30511: PUSH
30512: LD_INT 2
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 3
30521: PUSH
30522: LD_INT 3
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 2
30531: PUSH
30532: LD_INT 3
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30544: LD_ADDR_VAR 0 20
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: LD_INT 3
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 0
30561: PUSH
30562: LD_INT 3
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 1
30571: NEG
30572: PUSH
30573: LD_INT 2
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: LIST
30584: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30585: LD_ADDR_VAR 0 21
30589: PUSH
30590: LD_INT 2
30592: NEG
30593: PUSH
30594: LD_INT 1
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 3
30603: NEG
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 3
30614: NEG
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: LIST
30628: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30629: LD_ADDR_VAR 0 22
30633: PUSH
30634: LD_INT 2
30636: NEG
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: LD_INT 2
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 3
30660: NEG
30661: PUSH
30662: LD_INT 3
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30675: LD_ADDR_VAR 0 23
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: LD_INT 3
30685: NEG
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 1
30693: NEG
30694: PUSH
30695: LD_INT 4
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: LD_INT 3
30708: NEG
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: LIST
30718: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30719: LD_ADDR_VAR 0 24
30723: PUSH
30724: LD_INT 3
30726: PUSH
30727: LD_INT 0
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 3
30736: PUSH
30737: LD_INT 1
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 4
30747: PUSH
30748: LD_INT 1
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: LIST
30759: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30760: LD_ADDR_VAR 0 25
30764: PUSH
30765: LD_INT 3
30767: PUSH
30768: LD_INT 3
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: LD_INT 4
30777: PUSH
30778: LD_INT 3
30780: PUSH
30781: EMPTY
30782: LIST
30783: LIST
30784: PUSH
30785: LD_INT 3
30787: PUSH
30788: LD_INT 4
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30800: LD_ADDR_VAR 0 26
30804: PUSH
30805: LD_INT 0
30807: PUSH
30808: LD_INT 3
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: LD_INT 4
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 1
30827: NEG
30828: PUSH
30829: LD_INT 3
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: LIST
30840: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30841: LD_ADDR_VAR 0 27
30845: PUSH
30846: LD_INT 3
30848: NEG
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 3
30859: NEG
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 4
30870: NEG
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30885: LD_ADDR_VAR 0 28
30889: PUSH
30890: LD_INT 3
30892: NEG
30893: PUSH
30894: LD_INT 3
30896: NEG
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 3
30904: NEG
30905: PUSH
30906: LD_INT 4
30908: NEG
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 4
30916: NEG
30917: PUSH
30918: LD_INT 3
30920: NEG
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: LIST
30930: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30931: LD_ADDR_VAR 0 29
30935: PUSH
30936: LD_INT 1
30938: NEG
30939: PUSH
30940: LD_INT 3
30942: NEG
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: LD_INT 3
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 1
30961: PUSH
30962: LD_INT 2
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 1
30972: NEG
30973: PUSH
30974: LD_INT 4
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 0
30984: PUSH
30985: LD_INT 4
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: LD_INT 3
30998: NEG
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: PUSH
31004: LD_INT 1
31006: NEG
31007: PUSH
31008: LD_INT 5
31010: NEG
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: LD_INT 5
31021: NEG
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: PUSH
31030: LD_INT 4
31032: NEG
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: NEG
31041: PUSH
31042: LD_INT 6
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 6
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: PUSH
31064: LD_INT 5
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
31086: LD_ADDR_VAR 0 30
31090: PUSH
31091: LD_INT 2
31093: PUSH
31094: LD_INT 1
31096: NEG
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PUSH
31102: LD_INT 3
31104: PUSH
31105: LD_INT 0
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 3
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: EMPTY
31119: LIST
31120: LIST
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 4
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 4
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 4
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 5
31166: PUSH
31167: LD_INT 0
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 5
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 5
31186: PUSH
31187: LD_INT 1
31189: NEG
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 6
31197: PUSH
31198: LD_INT 0
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 6
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
31229: LD_ADDR_VAR 0 31
31233: PUSH
31234: LD_INT 3
31236: PUSH
31237: LD_INT 2
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 3
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 2
31256: PUSH
31257: LD_INT 3
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 4
31266: PUSH
31267: LD_INT 3
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 4
31276: PUSH
31277: LD_INT 4
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 3
31286: PUSH
31287: LD_INT 4
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 5
31296: PUSH
31297: LD_INT 4
31299: PUSH
31300: EMPTY
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 5
31306: PUSH
31307: LD_INT 5
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 4
31316: PUSH
31317: LD_INT 5
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 6
31326: PUSH
31327: LD_INT 5
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 6
31336: PUSH
31337: LD_INT 6
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 5
31346: PUSH
31347: LD_INT 6
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
31368: LD_ADDR_VAR 0 32
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: LD_INT 3
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: LD_INT 3
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 1
31395: NEG
31396: PUSH
31397: LD_INT 2
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: LD_INT 4
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: LD_INT 4
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 1
31426: NEG
31427: PUSH
31428: LD_INT 3
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: LD_INT 5
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: LD_INT 5
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: LD_INT 4
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: LD_INT 6
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: PUSH
31476: LD_INT 0
31478: PUSH
31479: LD_INT 6
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: PUSH
31486: LD_INT 1
31488: NEG
31489: PUSH
31490: LD_INT 5
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
31511: LD_ADDR_VAR 0 33
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 3
31529: NEG
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 3
31540: NEG
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 3
31552: NEG
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 4
31563: NEG
31564: PUSH
31565: LD_INT 0
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 4
31574: NEG
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 4
31586: NEG
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 5
31597: NEG
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 5
31608: NEG
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 5
31620: NEG
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 6
31631: NEG
31632: PUSH
31633: LD_INT 0
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 6
31642: NEG
31643: PUSH
31644: LD_INT 1
31646: NEG
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31666: LD_ADDR_VAR 0 34
31670: PUSH
31671: LD_INT 2
31673: NEG
31674: PUSH
31675: LD_INT 3
31677: NEG
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 3
31685: NEG
31686: PUSH
31687: LD_INT 2
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: NEG
31698: PUSH
31699: LD_INT 3
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 3
31709: NEG
31710: PUSH
31711: LD_INT 4
31713: NEG
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 4
31721: NEG
31722: PUSH
31723: LD_INT 3
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 4
31733: NEG
31734: PUSH
31735: LD_INT 4
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 4
31745: NEG
31746: PUSH
31747: LD_INT 5
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 5
31757: NEG
31758: PUSH
31759: LD_INT 4
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 5
31769: NEG
31770: PUSH
31771: LD_INT 5
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 5
31781: NEG
31782: PUSH
31783: LD_INT 6
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 6
31793: NEG
31794: PUSH
31795: LD_INT 5
31797: NEG
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 6
31805: NEG
31806: PUSH
31807: LD_INT 6
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31829: LD_ADDR_VAR 0 41
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: LD_INT 2
31839: NEG
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 1
31847: NEG
31848: PUSH
31849: LD_INT 3
31851: NEG
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 1
31859: PUSH
31860: LD_INT 2
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31873: LD_ADDR_VAR 0 42
31877: PUSH
31878: LD_INT 2
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 2
31890: PUSH
31891: LD_INT 1
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 3
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: EMPTY
31906: LIST
31907: LIST
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: LIST
31913: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31914: LD_ADDR_VAR 0 43
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: LD_INT 2
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 3
31931: PUSH
31932: LD_INT 2
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: LD_INT 3
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: LIST
31953: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31954: LD_ADDR_VAR 0 44
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: LD_INT 2
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: LD_INT 3
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 1
31981: NEG
31982: PUSH
31983: LD_INT 2
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: LIST
31994: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31995: LD_ADDR_VAR 0 45
31999: PUSH
32000: LD_INT 2
32002: NEG
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 2
32013: NEG
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 3
32024: NEG
32025: PUSH
32026: LD_INT 1
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: LIST
32038: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
32039: LD_ADDR_VAR 0 46
32043: PUSH
32044: LD_INT 2
32046: NEG
32047: PUSH
32048: LD_INT 2
32050: NEG
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 2
32058: NEG
32059: PUSH
32060: LD_INT 3
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 3
32070: NEG
32071: PUSH
32072: LD_INT 2
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
32085: LD_ADDR_VAR 0 47
32089: PUSH
32090: LD_INT 2
32092: NEG
32093: PUSH
32094: LD_INT 3
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 1
32104: NEG
32105: PUSH
32106: LD_INT 3
32108: NEG
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32118: LD_ADDR_VAR 0 48
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 2
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
32149: LD_ADDR_VAR 0 49
32153: PUSH
32154: LD_INT 3
32156: PUSH
32157: LD_INT 1
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 3
32166: PUSH
32167: LD_INT 2
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
32178: LD_ADDR_VAR 0 50
32182: PUSH
32183: LD_INT 2
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: LD_INT 3
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
32207: LD_ADDR_VAR 0 51
32211: PUSH
32212: LD_INT 1
32214: NEG
32215: PUSH
32216: LD_INT 2
32218: PUSH
32219: EMPTY
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 2
32225: NEG
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32238: LD_ADDR_VAR 0 52
32242: PUSH
32243: LD_INT 3
32245: NEG
32246: PUSH
32247: LD_INT 1
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 3
32257: NEG
32258: PUSH
32259: LD_INT 2
32261: NEG
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32271: LD_ADDR_VAR 0 53
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: LD_INT 3
32282: NEG
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 0
32290: PUSH
32291: LD_INT 3
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 1
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: LIST
32314: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32315: LD_ADDR_VAR 0 54
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: LD_INT 1
32325: NEG
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 3
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 3
32343: PUSH
32344: LD_INT 1
32346: PUSH
32347: EMPTY
32348: LIST
32349: LIST
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: LIST
32355: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32356: LD_ADDR_VAR 0 55
32360: PUSH
32361: LD_INT 3
32363: PUSH
32364: LD_INT 2
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: LD_INT 3
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: LD_INT 3
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: LIST
32395: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32396: LD_ADDR_VAR 0 56
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: LD_INT 3
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: LD_INT 3
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: LIST
32436: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32437: LD_ADDR_VAR 0 57
32441: PUSH
32442: LD_INT 2
32444: NEG
32445: PUSH
32446: LD_INT 1
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 3
32455: NEG
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 3
32466: NEG
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: LIST
32480: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32481: LD_ADDR_VAR 0 58
32485: PUSH
32486: LD_INT 2
32488: NEG
32489: PUSH
32490: LD_INT 3
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 3
32500: NEG
32501: PUSH
32502: LD_INT 2
32504: NEG
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 3
32512: NEG
32513: PUSH
32514: LD_INT 3
32516: NEG
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
32527: LD_ADDR_VAR 0 59
32531: PUSH
32532: LD_INT 1
32534: NEG
32535: PUSH
32536: LD_INT 2
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: LD_INT 2
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: PUSH
32558: LD_INT 1
32560: NEG
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: LIST
32570: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32571: LD_ADDR_VAR 0 60
32575: PUSH
32576: LD_INT 1
32578: PUSH
32579: LD_INT 1
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 2
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 2
32599: PUSH
32600: LD_INT 1
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: LIST
32611: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32612: LD_ADDR_VAR 0 61
32616: PUSH
32617: LD_INT 2
32619: PUSH
32620: LD_INT 1
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: LD_INT 2
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: LD_INT 2
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: LIST
32651: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32652: LD_ADDR_VAR 0 62
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: LD_INT 2
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: LD_INT 2
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 1
32679: NEG
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: LIST
32692: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32693: LD_ADDR_VAR 0 63
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 2
32711: NEG
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: NEG
32723: PUSH
32724: LD_INT 1
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: LIST
32736: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32737: LD_ADDR_VAR 0 64
32741: PUSH
32742: LD_INT 1
32744: NEG
32745: PUSH
32746: LD_INT 2
32748: NEG
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 2
32756: NEG
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 2
32768: NEG
32769: PUSH
32770: LD_INT 2
32772: NEG
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: LIST
32782: ST_TO_ADDR
// end ; 2 :
32783: GO 36049
32785: LD_INT 2
32787: DOUBLE
32788: EQUAL
32789: IFTRUE 32793
32791: GO 36048
32793: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32794: LD_ADDR_VAR 0 29
32798: PUSH
32799: LD_INT 4
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 4
32811: PUSH
32812: LD_INT 1
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 5
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 5
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 4
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 3
32852: PUSH
32853: LD_INT 0
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 3
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: LD_INT 2
32876: NEG
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 5
32884: PUSH
32885: LD_INT 2
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: LD_INT 3
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 3
32904: PUSH
32905: LD_INT 2
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 4
32914: PUSH
32915: LD_INT 3
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 4
32924: PUSH
32925: LD_INT 4
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 3
32934: PUSH
32935: LD_INT 4
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: LD_INT 3
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: LD_INT 2
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 4
32964: PUSH
32965: LD_INT 2
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: LD_INT 4
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: LD_INT 4
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: LD_INT 3
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 1
33004: PUSH
33005: LD_INT 4
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: LD_INT 5
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 0
33024: PUSH
33025: LD_INT 5
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 1
33034: NEG
33035: PUSH
33036: LD_INT 4
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: LD_INT 3
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 2
33056: PUSH
33057: LD_INT 5
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: LD_INT 3
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 3
33077: NEG
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 3
33088: NEG
33089: PUSH
33090: LD_INT 1
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 2
33100: NEG
33101: PUSH
33102: LD_INT 0
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: NEG
33112: PUSH
33113: LD_INT 1
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 3
33122: NEG
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 4
33133: NEG
33134: PUSH
33135: LD_INT 0
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 4
33144: NEG
33145: PUSH
33146: LD_INT 1
33148: NEG
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 4
33156: NEG
33157: PUSH
33158: LD_INT 2
33160: NEG
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 2
33168: NEG
33169: PUSH
33170: LD_INT 2
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 4
33179: NEG
33180: PUSH
33181: LD_INT 4
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 4
33191: NEG
33192: PUSH
33193: LD_INT 5
33195: NEG
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 3
33203: NEG
33204: PUSH
33205: LD_INT 4
33207: NEG
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 3
33215: NEG
33216: PUSH
33217: LD_INT 3
33219: NEG
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: PUSH
33225: LD_INT 4
33227: NEG
33228: PUSH
33229: LD_INT 3
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 5
33239: NEG
33240: PUSH
33241: LD_INT 4
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 5
33251: NEG
33252: PUSH
33253: LD_INT 5
33255: NEG
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 3
33263: NEG
33264: PUSH
33265: LD_INT 5
33267: NEG
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: PUSH
33273: LD_INT 5
33275: NEG
33276: PUSH
33277: LD_INT 3
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
33332: LD_ADDR_VAR 0 30
33336: PUSH
33337: LD_INT 4
33339: PUSH
33340: LD_INT 4
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 4
33349: PUSH
33350: LD_INT 3
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 5
33359: PUSH
33360: LD_INT 4
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 5
33369: PUSH
33370: LD_INT 5
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 4
33379: PUSH
33380: LD_INT 5
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 3
33389: PUSH
33390: LD_INT 4
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: LD_INT 3
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 5
33409: PUSH
33410: LD_INT 3
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 3
33419: PUSH
33420: LD_INT 5
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: LD_INT 3
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: LD_INT 1
33459: PUSH
33460: LD_INT 4
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 0
33469: PUSH
33470: LD_INT 4
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: NEG
33480: PUSH
33481: LD_INT 3
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: LD_INT 2
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 2
33501: PUSH
33502: LD_INT 4
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 4
33522: NEG
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 4
33533: NEG
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 3
33545: NEG
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 3
33556: NEG
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 4
33567: NEG
33568: PUSH
33569: LD_INT 1
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 5
33578: NEG
33579: PUSH
33580: LD_INT 0
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 5
33589: NEG
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 5
33601: NEG
33602: PUSH
33603: LD_INT 2
33605: NEG
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 3
33613: NEG
33614: PUSH
33615: LD_INT 2
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 3
33624: NEG
33625: PUSH
33626: LD_INT 3
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 3
33636: NEG
33637: PUSH
33638: LD_INT 4
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 2
33648: NEG
33649: PUSH
33650: LD_INT 3
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 2
33660: NEG
33661: PUSH
33662: LD_INT 2
33664: NEG
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 3
33672: NEG
33673: PUSH
33674: LD_INT 2
33676: NEG
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 4
33684: NEG
33685: PUSH
33686: LD_INT 3
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 4
33696: NEG
33697: PUSH
33698: LD_INT 4
33700: NEG
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: LD_INT 4
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 4
33720: NEG
33721: PUSH
33722: LD_INT 2
33724: NEG
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 0
33732: PUSH
33733: LD_INT 4
33735: NEG
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: LD_INT 5
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: PUSH
33755: LD_INT 4
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: LD_INT 3
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 3
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: LD_INT 4
33791: NEG
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 1
33799: NEG
33800: PUSH
33801: LD_INT 5
33803: NEG
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 2
33811: PUSH
33812: LD_INT 3
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 2
33822: NEG
33823: PUSH
33824: LD_INT 5
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33879: LD_ADDR_VAR 0 31
33883: PUSH
33884: LD_INT 0
33886: PUSH
33887: LD_INT 4
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: LD_INT 3
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: LD_INT 4
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: LD_INT 5
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: LD_INT 5
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: LD_INT 4
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: LD_INT 3
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: LD_INT 5
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 2
33968: NEG
33969: PUSH
33970: LD_INT 3
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 3
33979: NEG
33980: PUSH
33981: LD_INT 0
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 3
33990: NEG
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 2
34002: NEG
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 2
34013: NEG
34014: PUSH
34015: LD_INT 1
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 3
34024: NEG
34025: PUSH
34026: LD_INT 1
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: LD_INT 4
34035: NEG
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 4
34046: NEG
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 4
34058: NEG
34059: PUSH
34060: LD_INT 2
34062: NEG
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 2
34070: NEG
34071: PUSH
34072: LD_INT 2
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 4
34081: NEG
34082: PUSH
34083: LD_INT 4
34085: NEG
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 4
34093: NEG
34094: PUSH
34095: LD_INT 5
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 3
34105: NEG
34106: PUSH
34107: LD_INT 4
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 3
34117: NEG
34118: PUSH
34119: LD_INT 3
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 4
34129: NEG
34130: PUSH
34131: LD_INT 3
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 5
34141: NEG
34142: PUSH
34143: LD_INT 4
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 5
34153: NEG
34154: PUSH
34155: LD_INT 5
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 3
34165: NEG
34166: PUSH
34167: LD_INT 5
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 5
34177: NEG
34178: PUSH
34179: LD_INT 3
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: LD_INT 3
34192: NEG
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 0
34200: PUSH
34201: LD_INT 4
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 1
34211: PUSH
34212: LD_INT 3
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 2
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 0
34233: PUSH
34234: LD_INT 2
34236: NEG
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 1
34244: NEG
34245: PUSH
34246: LD_INT 3
34248: NEG
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 1
34256: NEG
34257: PUSH
34258: LD_INT 4
34260: NEG
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 2
34268: PUSH
34269: LD_INT 2
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 2
34279: NEG
34280: PUSH
34281: LD_INT 4
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 4
34291: PUSH
34292: LD_INT 0
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 4
34301: PUSH
34302: LD_INT 1
34304: NEG
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 5
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 5
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 4
34332: PUSH
34333: LD_INT 1
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 3
34342: PUSH
34343: LD_INT 0
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 3
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: LD_INT 2
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 5
34374: PUSH
34375: LD_INT 2
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
34429: LD_ADDR_VAR 0 32
34433: PUSH
34434: LD_INT 4
34436: NEG
34437: PUSH
34438: LD_INT 0
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 4
34447: NEG
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 3
34459: NEG
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 3
34470: NEG
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 4
34481: NEG
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 5
34492: NEG
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 5
34503: NEG
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 5
34515: NEG
34516: PUSH
34517: LD_INT 2
34519: NEG
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 3
34527: NEG
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 3
34538: NEG
34539: PUSH
34540: LD_INT 3
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 3
34550: NEG
34551: PUSH
34552: LD_INT 4
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 2
34562: NEG
34563: PUSH
34564: LD_INT 3
34566: NEG
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 2
34574: NEG
34575: PUSH
34576: LD_INT 2
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 3
34586: NEG
34587: PUSH
34588: LD_INT 2
34590: NEG
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 4
34598: NEG
34599: PUSH
34600: LD_INT 3
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 4
34610: NEG
34611: PUSH
34612: LD_INT 4
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 2
34622: NEG
34623: PUSH
34624: LD_INT 4
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 4
34634: NEG
34635: PUSH
34636: LD_INT 2
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: LD_INT 4
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: LD_INT 5
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: LD_INT 4
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: LD_INT 3
34682: NEG
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: LD_INT 3
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: LD_INT 4
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: LD_INT 5
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: LD_INT 3
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 2
34736: NEG
34737: PUSH
34738: LD_INT 5
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 3
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 3
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 4
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 4
34779: PUSH
34780: LD_INT 1
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 3
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 2
34799: PUSH
34800: LD_INT 0
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 2
34809: PUSH
34810: LD_INT 1
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: LD_INT 2
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 4
34831: PUSH
34832: LD_INT 2
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PUSH
34839: LD_INT 4
34841: PUSH
34842: LD_INT 4
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 4
34851: PUSH
34852: LD_INT 3
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 5
34861: PUSH
34862: LD_INT 4
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 5
34871: PUSH
34872: LD_INT 5
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 4
34881: PUSH
34882: LD_INT 5
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 3
34891: PUSH
34892: LD_INT 4
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: LD_INT 3
34901: PUSH
34902: LD_INT 3
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 5
34911: PUSH
34912: LD_INT 3
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: LD_INT 3
34921: PUSH
34922: LD_INT 5
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34976: LD_ADDR_VAR 0 33
34980: PUSH
34981: LD_INT 4
34983: NEG
34984: PUSH
34985: LD_INT 4
34987: NEG
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: PUSH
34993: LD_INT 4
34995: NEG
34996: PUSH
34997: LD_INT 5
34999: NEG
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 3
35007: NEG
35008: PUSH
35009: LD_INT 4
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 3
35019: NEG
35020: PUSH
35021: LD_INT 3
35023: NEG
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 4
35031: NEG
35032: PUSH
35033: LD_INT 3
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 5
35043: NEG
35044: PUSH
35045: LD_INT 4
35047: NEG
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 5
35055: NEG
35056: PUSH
35057: LD_INT 5
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 3
35067: NEG
35068: PUSH
35069: LD_INT 5
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 5
35079: NEG
35080: PUSH
35081: LD_INT 3
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 0
35091: PUSH
35092: LD_INT 3
35094: NEG
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: LD_INT 4
35105: NEG
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: PUSH
35114: LD_INT 3
35116: NEG
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: LD_INT 2
35127: NEG
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: LD_INT 2
35138: NEG
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: LD_INT 3
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 1
35158: NEG
35159: PUSH
35160: LD_INT 4
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 2
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: LD_INT 4
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 4
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 4
35203: PUSH
35204: LD_INT 1
35206: NEG
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: LD_INT 5
35214: PUSH
35215: LD_INT 0
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 5
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 4
35234: PUSH
35235: LD_INT 1
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 3
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 3
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 3
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 5
35276: PUSH
35277: LD_INT 2
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 3
35286: PUSH
35287: LD_INT 3
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 3
35296: PUSH
35297: LD_INT 2
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 4
35306: PUSH
35307: LD_INT 3
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 4
35316: PUSH
35317: LD_INT 4
35319: PUSH
35320: EMPTY
35321: LIST
35322: LIST
35323: PUSH
35324: LD_INT 3
35326: PUSH
35327: LD_INT 4
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: LD_INT 3
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: LD_INT 2
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 4
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 2
35366: PUSH
35367: LD_INT 4
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: LD_INT 4
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 0
35386: PUSH
35387: LD_INT 3
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 1
35396: PUSH
35397: LD_INT 4
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: PUSH
35407: LD_INT 5
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 5
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 1
35426: NEG
35427: PUSH
35428: LD_INT 4
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: NEG
35438: PUSH
35439: LD_INT 3
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: LD_INT 5
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: NEG
35459: PUSH
35460: LD_INT 3
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
35514: LD_ADDR_VAR 0 34
35518: PUSH
35519: LD_INT 0
35521: PUSH
35522: LD_INT 4
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: LD_INT 5
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 1
35543: PUSH
35544: LD_INT 4
35546: NEG
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: LD_INT 3
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 0
35565: PUSH
35566: LD_INT 3
35568: NEG
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 1
35576: NEG
35577: PUSH
35578: LD_INT 4
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: NEG
35589: PUSH
35590: LD_INT 5
35592: NEG
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: LD_INT 3
35603: NEG
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 2
35611: NEG
35612: PUSH
35613: LD_INT 5
35615: NEG
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 3
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 3
35633: PUSH
35634: LD_INT 1
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 4
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 4
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 3
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 2
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 2
35684: PUSH
35685: LD_INT 1
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 2
35695: PUSH
35696: LD_INT 2
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 4
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 4
35716: PUSH
35717: LD_INT 4
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 4
35726: PUSH
35727: LD_INT 3
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 5
35736: PUSH
35737: LD_INT 4
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 5
35746: PUSH
35747: LD_INT 5
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 4
35756: PUSH
35757: LD_INT 5
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 3
35766: PUSH
35767: LD_INT 4
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 3
35776: PUSH
35777: LD_INT 3
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 5
35786: PUSH
35787: LD_INT 3
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 3
35796: PUSH
35797: LD_INT 5
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 3
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: LD_INT 2
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: LD_INT 1
35826: PUSH
35827: LD_INT 3
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: LD_INT 4
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: LD_INT 4
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 1
35856: NEG
35857: PUSH
35858: LD_INT 3
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: LD_INT 2
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 2
35878: PUSH
35879: LD_INT 4
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 2
35888: NEG
35889: PUSH
35890: LD_INT 2
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 4
35899: NEG
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 4
35910: NEG
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 3
35922: NEG
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 3
35933: NEG
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 4
35944: NEG
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 5
35955: NEG
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 5
35966: NEG
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 5
35978: NEG
35979: PUSH
35980: LD_INT 2
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 3
35990: NEG
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: ST_TO_ADDR
// end ; end ;
36046: GO 36049
36048: POP
// case btype of b_depot , b_warehouse :
36049: LD_VAR 0 1
36053: PUSH
36054: LD_INT 0
36056: DOUBLE
36057: EQUAL
36058: IFTRUE 36068
36060: LD_INT 1
36062: DOUBLE
36063: EQUAL
36064: IFTRUE 36068
36066: GO 36269
36068: POP
// case nation of nation_american :
36069: LD_VAR 0 5
36073: PUSH
36074: LD_INT 1
36076: DOUBLE
36077: EQUAL
36078: IFTRUE 36082
36080: GO 36138
36082: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
36083: LD_ADDR_VAR 0 9
36087: PUSH
36088: LD_VAR 0 11
36092: PUSH
36093: LD_VAR 0 12
36097: PUSH
36098: LD_VAR 0 13
36102: PUSH
36103: LD_VAR 0 14
36107: PUSH
36108: LD_VAR 0 15
36112: PUSH
36113: LD_VAR 0 16
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: PUSH
36126: LD_VAR 0 4
36130: PUSH
36131: LD_INT 1
36133: PLUS
36134: ARRAY
36135: ST_TO_ADDR
36136: GO 36267
36138: LD_INT 2
36140: DOUBLE
36141: EQUAL
36142: IFTRUE 36146
36144: GO 36202
36146: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
36147: LD_ADDR_VAR 0 9
36151: PUSH
36152: LD_VAR 0 17
36156: PUSH
36157: LD_VAR 0 18
36161: PUSH
36162: LD_VAR 0 19
36166: PUSH
36167: LD_VAR 0 20
36171: PUSH
36172: LD_VAR 0 21
36176: PUSH
36177: LD_VAR 0 22
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: PUSH
36190: LD_VAR 0 4
36194: PUSH
36195: LD_INT 1
36197: PLUS
36198: ARRAY
36199: ST_TO_ADDR
36200: GO 36267
36202: LD_INT 3
36204: DOUBLE
36205: EQUAL
36206: IFTRUE 36210
36208: GO 36266
36210: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
36211: LD_ADDR_VAR 0 9
36215: PUSH
36216: LD_VAR 0 23
36220: PUSH
36221: LD_VAR 0 24
36225: PUSH
36226: LD_VAR 0 25
36230: PUSH
36231: LD_VAR 0 26
36235: PUSH
36236: LD_VAR 0 27
36240: PUSH
36241: LD_VAR 0 28
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: PUSH
36254: LD_VAR 0 4
36258: PUSH
36259: LD_INT 1
36261: PLUS
36262: ARRAY
36263: ST_TO_ADDR
36264: GO 36267
36266: POP
36267: GO 36822
36269: LD_INT 2
36271: DOUBLE
36272: EQUAL
36273: IFTRUE 36283
36275: LD_INT 3
36277: DOUBLE
36278: EQUAL
36279: IFTRUE 36283
36281: GO 36339
36283: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
36284: LD_ADDR_VAR 0 9
36288: PUSH
36289: LD_VAR 0 29
36293: PUSH
36294: LD_VAR 0 30
36298: PUSH
36299: LD_VAR 0 31
36303: PUSH
36304: LD_VAR 0 32
36308: PUSH
36309: LD_VAR 0 33
36313: PUSH
36314: LD_VAR 0 34
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: PUSH
36327: LD_VAR 0 4
36331: PUSH
36332: LD_INT 1
36334: PLUS
36335: ARRAY
36336: ST_TO_ADDR
36337: GO 36822
36339: LD_INT 16
36341: DOUBLE
36342: EQUAL
36343: IFTRUE 36401
36345: LD_INT 17
36347: DOUBLE
36348: EQUAL
36349: IFTRUE 36401
36351: LD_INT 18
36353: DOUBLE
36354: EQUAL
36355: IFTRUE 36401
36357: LD_INT 19
36359: DOUBLE
36360: EQUAL
36361: IFTRUE 36401
36363: LD_INT 22
36365: DOUBLE
36366: EQUAL
36367: IFTRUE 36401
36369: LD_INT 20
36371: DOUBLE
36372: EQUAL
36373: IFTRUE 36401
36375: LD_INT 21
36377: DOUBLE
36378: EQUAL
36379: IFTRUE 36401
36381: LD_INT 23
36383: DOUBLE
36384: EQUAL
36385: IFTRUE 36401
36387: LD_INT 24
36389: DOUBLE
36390: EQUAL
36391: IFTRUE 36401
36393: LD_INT 25
36395: DOUBLE
36396: EQUAL
36397: IFTRUE 36401
36399: GO 36457
36401: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
36402: LD_ADDR_VAR 0 9
36406: PUSH
36407: LD_VAR 0 35
36411: PUSH
36412: LD_VAR 0 36
36416: PUSH
36417: LD_VAR 0 37
36421: PUSH
36422: LD_VAR 0 38
36426: PUSH
36427: LD_VAR 0 39
36431: PUSH
36432: LD_VAR 0 40
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: PUSH
36445: LD_VAR 0 4
36449: PUSH
36450: LD_INT 1
36452: PLUS
36453: ARRAY
36454: ST_TO_ADDR
36455: GO 36822
36457: LD_INT 6
36459: DOUBLE
36460: EQUAL
36461: IFTRUE 36513
36463: LD_INT 7
36465: DOUBLE
36466: EQUAL
36467: IFTRUE 36513
36469: LD_INT 8
36471: DOUBLE
36472: EQUAL
36473: IFTRUE 36513
36475: LD_INT 13
36477: DOUBLE
36478: EQUAL
36479: IFTRUE 36513
36481: LD_INT 12
36483: DOUBLE
36484: EQUAL
36485: IFTRUE 36513
36487: LD_INT 15
36489: DOUBLE
36490: EQUAL
36491: IFTRUE 36513
36493: LD_INT 11
36495: DOUBLE
36496: EQUAL
36497: IFTRUE 36513
36499: LD_INT 14
36501: DOUBLE
36502: EQUAL
36503: IFTRUE 36513
36505: LD_INT 10
36507: DOUBLE
36508: EQUAL
36509: IFTRUE 36513
36511: GO 36569
36513: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
36514: LD_ADDR_VAR 0 9
36518: PUSH
36519: LD_VAR 0 41
36523: PUSH
36524: LD_VAR 0 42
36528: PUSH
36529: LD_VAR 0 43
36533: PUSH
36534: LD_VAR 0 44
36538: PUSH
36539: LD_VAR 0 45
36543: PUSH
36544: LD_VAR 0 46
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: PUSH
36557: LD_VAR 0 4
36561: PUSH
36562: LD_INT 1
36564: PLUS
36565: ARRAY
36566: ST_TO_ADDR
36567: GO 36822
36569: LD_INT 36
36571: DOUBLE
36572: EQUAL
36573: IFTRUE 36577
36575: GO 36633
36577: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36578: LD_ADDR_VAR 0 9
36582: PUSH
36583: LD_VAR 0 47
36587: PUSH
36588: LD_VAR 0 48
36592: PUSH
36593: LD_VAR 0 49
36597: PUSH
36598: LD_VAR 0 50
36602: PUSH
36603: LD_VAR 0 51
36607: PUSH
36608: LD_VAR 0 52
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: PUSH
36621: LD_VAR 0 4
36625: PUSH
36626: LD_INT 1
36628: PLUS
36629: ARRAY
36630: ST_TO_ADDR
36631: GO 36822
36633: LD_INT 4
36635: DOUBLE
36636: EQUAL
36637: IFTRUE 36659
36639: LD_INT 5
36641: DOUBLE
36642: EQUAL
36643: IFTRUE 36659
36645: LD_INT 34
36647: DOUBLE
36648: EQUAL
36649: IFTRUE 36659
36651: LD_INT 37
36653: DOUBLE
36654: EQUAL
36655: IFTRUE 36659
36657: GO 36715
36659: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36660: LD_ADDR_VAR 0 9
36664: PUSH
36665: LD_VAR 0 53
36669: PUSH
36670: LD_VAR 0 54
36674: PUSH
36675: LD_VAR 0 55
36679: PUSH
36680: LD_VAR 0 56
36684: PUSH
36685: LD_VAR 0 57
36689: PUSH
36690: LD_VAR 0 58
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: PUSH
36703: LD_VAR 0 4
36707: PUSH
36708: LD_INT 1
36710: PLUS
36711: ARRAY
36712: ST_TO_ADDR
36713: GO 36822
36715: LD_INT 31
36717: DOUBLE
36718: EQUAL
36719: IFTRUE 36765
36721: LD_INT 32
36723: DOUBLE
36724: EQUAL
36725: IFTRUE 36765
36727: LD_INT 33
36729: DOUBLE
36730: EQUAL
36731: IFTRUE 36765
36733: LD_INT 27
36735: DOUBLE
36736: EQUAL
36737: IFTRUE 36765
36739: LD_INT 26
36741: DOUBLE
36742: EQUAL
36743: IFTRUE 36765
36745: LD_INT 28
36747: DOUBLE
36748: EQUAL
36749: IFTRUE 36765
36751: LD_INT 29
36753: DOUBLE
36754: EQUAL
36755: IFTRUE 36765
36757: LD_INT 30
36759: DOUBLE
36760: EQUAL
36761: IFTRUE 36765
36763: GO 36821
36765: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36766: LD_ADDR_VAR 0 9
36770: PUSH
36771: LD_VAR 0 59
36775: PUSH
36776: LD_VAR 0 60
36780: PUSH
36781: LD_VAR 0 61
36785: PUSH
36786: LD_VAR 0 62
36790: PUSH
36791: LD_VAR 0 63
36795: PUSH
36796: LD_VAR 0 64
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: PUSH
36809: LD_VAR 0 4
36813: PUSH
36814: LD_INT 1
36816: PLUS
36817: ARRAY
36818: ST_TO_ADDR
36819: GO 36822
36821: POP
// temp_list2 = [ ] ;
36822: LD_ADDR_VAR 0 10
36826: PUSH
36827: EMPTY
36828: ST_TO_ADDR
// for i in temp_list do
36829: LD_ADDR_VAR 0 8
36833: PUSH
36834: LD_VAR 0 9
36838: PUSH
36839: FOR_IN
36840: IFFALSE 36892
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36842: LD_ADDR_VAR 0 10
36846: PUSH
36847: LD_VAR 0 10
36851: PUSH
36852: LD_VAR 0 8
36856: PUSH
36857: LD_INT 1
36859: ARRAY
36860: PUSH
36861: LD_VAR 0 2
36865: PLUS
36866: PUSH
36867: LD_VAR 0 8
36871: PUSH
36872: LD_INT 2
36874: ARRAY
36875: PUSH
36876: LD_VAR 0 3
36880: PLUS
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: EMPTY
36887: LIST
36888: ADD
36889: ST_TO_ADDR
36890: GO 36839
36892: POP
36893: POP
// result = temp_list2 ;
36894: LD_ADDR_VAR 0 7
36898: PUSH
36899: LD_VAR 0 10
36903: ST_TO_ADDR
// end ;
36904: LD_VAR 0 7
36908: RET
// export function EnemyInRange ( unit , dist ) ; begin
36909: LD_INT 0
36911: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36912: LD_ADDR_VAR 0 3
36916: PUSH
36917: LD_VAR 0 1
36921: PPUSH
36922: CALL_OW 255
36926: PPUSH
36927: LD_VAR 0 1
36931: PPUSH
36932: CALL_OW 250
36936: PPUSH
36937: LD_VAR 0 1
36941: PPUSH
36942: CALL_OW 251
36946: PPUSH
36947: LD_VAR 0 2
36951: PPUSH
36952: CALL 10305 0 4
36956: PUSH
36957: LD_INT 4
36959: ARRAY
36960: ST_TO_ADDR
// end ;
36961: LD_VAR 0 3
36965: RET
// export function PlayerSeeMe ( unit ) ; begin
36966: LD_INT 0
36968: PPUSH
// result := See ( your_side , unit ) ;
36969: LD_ADDR_VAR 0 2
36973: PUSH
36974: LD_OWVAR 2
36978: PPUSH
36979: LD_VAR 0 1
36983: PPUSH
36984: CALL_OW 292
36988: ST_TO_ADDR
// end ;
36989: LD_VAR 0 2
36993: RET
// export function ReverseDir ( unit ) ; begin
36994: LD_INT 0
36996: PPUSH
// if not unit then
36997: LD_VAR 0 1
37001: NOT
37002: IFFALSE 37006
// exit ;
37004: GO 37029
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
37006: LD_ADDR_VAR 0 2
37010: PUSH
37011: LD_VAR 0 1
37015: PPUSH
37016: CALL_OW 254
37020: PUSH
37021: LD_INT 3
37023: PLUS
37024: PUSH
37025: LD_INT 6
37027: MOD
37028: ST_TO_ADDR
// end ;
37029: LD_VAR 0 2
37033: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
37034: LD_INT 0
37036: PPUSH
37037: PPUSH
37038: PPUSH
37039: PPUSH
37040: PPUSH
// if not hexes then
37041: LD_VAR 0 2
37045: NOT
37046: IFFALSE 37050
// exit ;
37048: GO 37198
// dist := 9999 ;
37050: LD_ADDR_VAR 0 5
37054: PUSH
37055: LD_INT 9999
37057: ST_TO_ADDR
// for i = 1 to hexes do
37058: LD_ADDR_VAR 0 4
37062: PUSH
37063: DOUBLE
37064: LD_INT 1
37066: DEC
37067: ST_TO_ADDR
37068: LD_VAR 0 2
37072: PUSH
37073: FOR_TO
37074: IFFALSE 37186
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
37076: LD_VAR 0 1
37080: PPUSH
37081: LD_VAR 0 2
37085: PUSH
37086: LD_VAR 0 4
37090: ARRAY
37091: PUSH
37092: LD_INT 1
37094: ARRAY
37095: PPUSH
37096: LD_VAR 0 2
37100: PUSH
37101: LD_VAR 0 4
37105: ARRAY
37106: PUSH
37107: LD_INT 2
37109: ARRAY
37110: PPUSH
37111: CALL_OW 297
37115: PUSH
37116: LD_VAR 0 5
37120: LESS
37121: IFFALSE 37184
// begin hex := hexes [ i ] ;
37123: LD_ADDR_VAR 0 7
37127: PUSH
37128: LD_VAR 0 2
37132: PUSH
37133: LD_VAR 0 4
37137: ARRAY
37138: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37139: LD_ADDR_VAR 0 5
37143: PUSH
37144: LD_VAR 0 1
37148: PPUSH
37149: LD_VAR 0 2
37153: PUSH
37154: LD_VAR 0 4
37158: ARRAY
37159: PUSH
37160: LD_INT 1
37162: ARRAY
37163: PPUSH
37164: LD_VAR 0 2
37168: PUSH
37169: LD_VAR 0 4
37173: ARRAY
37174: PUSH
37175: LD_INT 2
37177: ARRAY
37178: PPUSH
37179: CALL_OW 297
37183: ST_TO_ADDR
// end ; end ;
37184: GO 37073
37186: POP
37187: POP
// result := hex ;
37188: LD_ADDR_VAR 0 3
37192: PUSH
37193: LD_VAR 0 7
37197: ST_TO_ADDR
// end ;
37198: LD_VAR 0 3
37202: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
37203: LD_INT 0
37205: PPUSH
37206: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
37207: LD_VAR 0 1
37211: NOT
37212: PUSH
37213: LD_VAR 0 1
37217: PUSH
37218: LD_INT 21
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 23
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PPUSH
37242: CALL_OW 69
37246: IN
37247: NOT
37248: OR
37249: IFFALSE 37253
// exit ;
37251: GO 37300
// for i = 1 to 3 do
37253: LD_ADDR_VAR 0 3
37257: PUSH
37258: DOUBLE
37259: LD_INT 1
37261: DEC
37262: ST_TO_ADDR
37263: LD_INT 3
37265: PUSH
37266: FOR_TO
37267: IFFALSE 37298
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
37269: LD_VAR 0 1
37273: PPUSH
37274: CALL_OW 250
37278: PPUSH
37279: LD_VAR 0 1
37283: PPUSH
37284: CALL_OW 251
37288: PPUSH
37289: LD_INT 1
37291: PPUSH
37292: CALL_OW 453
37296: GO 37266
37298: POP
37299: POP
// end ;
37300: LD_VAR 0 2
37304: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
37305: LD_INT 0
37307: PPUSH
37308: PPUSH
37309: PPUSH
37310: PPUSH
37311: PPUSH
37312: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
37313: LD_VAR 0 1
37317: NOT
37318: PUSH
37319: LD_VAR 0 2
37323: NOT
37324: OR
37325: PUSH
37326: LD_VAR 0 1
37330: PPUSH
37331: CALL_OW 314
37335: OR
37336: IFFALSE 37340
// exit ;
37338: GO 37781
// x := GetX ( enemy_unit ) ;
37340: LD_ADDR_VAR 0 7
37344: PUSH
37345: LD_VAR 0 2
37349: PPUSH
37350: CALL_OW 250
37354: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
37355: LD_ADDR_VAR 0 8
37359: PUSH
37360: LD_VAR 0 2
37364: PPUSH
37365: CALL_OW 251
37369: ST_TO_ADDR
// if not x or not y then
37370: LD_VAR 0 7
37374: NOT
37375: PUSH
37376: LD_VAR 0 8
37380: NOT
37381: OR
37382: IFFALSE 37386
// exit ;
37384: GO 37781
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
37386: LD_ADDR_VAR 0 6
37390: PUSH
37391: LD_VAR 0 7
37395: PPUSH
37396: LD_INT 0
37398: PPUSH
37399: LD_INT 4
37401: PPUSH
37402: CALL_OW 272
37406: PUSH
37407: LD_VAR 0 8
37411: PPUSH
37412: LD_INT 0
37414: PPUSH
37415: LD_INT 4
37417: PPUSH
37418: CALL_OW 273
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_VAR 0 7
37431: PPUSH
37432: LD_INT 1
37434: PPUSH
37435: LD_INT 4
37437: PPUSH
37438: CALL_OW 272
37442: PUSH
37443: LD_VAR 0 8
37447: PPUSH
37448: LD_INT 1
37450: PPUSH
37451: LD_INT 4
37453: PPUSH
37454: CALL_OW 273
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_VAR 0 7
37467: PPUSH
37468: LD_INT 2
37470: PPUSH
37471: LD_INT 4
37473: PPUSH
37474: CALL_OW 272
37478: PUSH
37479: LD_VAR 0 8
37483: PPUSH
37484: LD_INT 2
37486: PPUSH
37487: LD_INT 4
37489: PPUSH
37490: CALL_OW 273
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_VAR 0 7
37503: PPUSH
37504: LD_INT 3
37506: PPUSH
37507: LD_INT 4
37509: PPUSH
37510: CALL_OW 272
37514: PUSH
37515: LD_VAR 0 8
37519: PPUSH
37520: LD_INT 3
37522: PPUSH
37523: LD_INT 4
37525: PPUSH
37526: CALL_OW 273
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_VAR 0 7
37539: PPUSH
37540: LD_INT 4
37542: PPUSH
37543: LD_INT 4
37545: PPUSH
37546: CALL_OW 272
37550: PUSH
37551: LD_VAR 0 8
37555: PPUSH
37556: LD_INT 4
37558: PPUSH
37559: LD_INT 4
37561: PPUSH
37562: CALL_OW 273
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_VAR 0 7
37575: PPUSH
37576: LD_INT 5
37578: PPUSH
37579: LD_INT 4
37581: PPUSH
37582: CALL_OW 272
37586: PUSH
37587: LD_VAR 0 8
37591: PPUSH
37592: LD_INT 5
37594: PPUSH
37595: LD_INT 4
37597: PPUSH
37598: CALL_OW 273
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: ST_TO_ADDR
// for i = tmp downto 1 do
37615: LD_ADDR_VAR 0 4
37619: PUSH
37620: DOUBLE
37621: LD_VAR 0 6
37625: INC
37626: ST_TO_ADDR
37627: LD_INT 1
37629: PUSH
37630: FOR_DOWNTO
37631: IFFALSE 37732
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37633: LD_VAR 0 6
37637: PUSH
37638: LD_VAR 0 4
37642: ARRAY
37643: PUSH
37644: LD_INT 1
37646: ARRAY
37647: PPUSH
37648: LD_VAR 0 6
37652: PUSH
37653: LD_VAR 0 4
37657: ARRAY
37658: PUSH
37659: LD_INT 2
37661: ARRAY
37662: PPUSH
37663: CALL_OW 488
37667: NOT
37668: PUSH
37669: LD_VAR 0 6
37673: PUSH
37674: LD_VAR 0 4
37678: ARRAY
37679: PUSH
37680: LD_INT 1
37682: ARRAY
37683: PPUSH
37684: LD_VAR 0 6
37688: PUSH
37689: LD_VAR 0 4
37693: ARRAY
37694: PUSH
37695: LD_INT 2
37697: ARRAY
37698: PPUSH
37699: CALL_OW 428
37703: PUSH
37704: LD_INT 0
37706: NONEQUAL
37707: OR
37708: IFFALSE 37730
// tmp := Delete ( tmp , i ) ;
37710: LD_ADDR_VAR 0 6
37714: PUSH
37715: LD_VAR 0 6
37719: PPUSH
37720: LD_VAR 0 4
37724: PPUSH
37725: CALL_OW 3
37729: ST_TO_ADDR
37730: GO 37630
37732: POP
37733: POP
// j := GetClosestHex ( unit , tmp ) ;
37734: LD_ADDR_VAR 0 5
37738: PUSH
37739: LD_VAR 0 1
37743: PPUSH
37744: LD_VAR 0 6
37748: PPUSH
37749: CALL 37034 0 2
37753: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37754: LD_VAR 0 1
37758: PPUSH
37759: LD_VAR 0 5
37763: PUSH
37764: LD_INT 1
37766: ARRAY
37767: PPUSH
37768: LD_VAR 0 5
37772: PUSH
37773: LD_INT 2
37775: ARRAY
37776: PPUSH
37777: CALL_OW 111
// end ;
37781: LD_VAR 0 3
37785: RET
// export function PrepareApemanSoldier ( ) ; begin
37786: LD_INT 0
37788: PPUSH
// uc_nation := 0 ;
37789: LD_ADDR_OWVAR 21
37793: PUSH
37794: LD_INT 0
37796: ST_TO_ADDR
// hc_sex := sex_male ;
37797: LD_ADDR_OWVAR 27
37801: PUSH
37802: LD_INT 1
37804: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37805: LD_ADDR_OWVAR 28
37809: PUSH
37810: LD_INT 15
37812: ST_TO_ADDR
// hc_gallery :=  ;
37813: LD_ADDR_OWVAR 33
37817: PUSH
37818: LD_STRING 
37820: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37821: LD_ADDR_OWVAR 31
37825: PUSH
37826: LD_INT 0
37828: PPUSH
37829: LD_INT 3
37831: PPUSH
37832: CALL_OW 12
37836: PUSH
37837: LD_INT 0
37839: PPUSH
37840: LD_INT 3
37842: PPUSH
37843: CALL_OW 12
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: LD_INT 0
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: ST_TO_ADDR
// end ;
37860: LD_VAR 0 1
37864: RET
// export function PrepareApemanEngineer ( ) ; begin
37865: LD_INT 0
37867: PPUSH
// uc_nation := 0 ;
37868: LD_ADDR_OWVAR 21
37872: PUSH
37873: LD_INT 0
37875: ST_TO_ADDR
// hc_sex := sex_male ;
37876: LD_ADDR_OWVAR 27
37880: PUSH
37881: LD_INT 1
37883: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37884: LD_ADDR_OWVAR 28
37888: PUSH
37889: LD_INT 16
37891: ST_TO_ADDR
// hc_gallery :=  ;
37892: LD_ADDR_OWVAR 33
37896: PUSH
37897: LD_STRING 
37899: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37900: LD_ADDR_OWVAR 31
37904: PUSH
37905: LD_INT 0
37907: PPUSH
37908: LD_INT 3
37910: PPUSH
37911: CALL_OW 12
37915: PUSH
37916: LD_INT 0
37918: PPUSH
37919: LD_INT 3
37921: PPUSH
37922: CALL_OW 12
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: ST_TO_ADDR
// end ;
37939: LD_VAR 0 1
37943: RET
// export function PrepareApeman ( agressivity ) ; begin
37944: LD_INT 0
37946: PPUSH
// uc_side := 0 ;
37947: LD_ADDR_OWVAR 20
37951: PUSH
37952: LD_INT 0
37954: ST_TO_ADDR
// uc_nation := 0 ;
37955: LD_ADDR_OWVAR 21
37959: PUSH
37960: LD_INT 0
37962: ST_TO_ADDR
// hc_sex := sex_male ;
37963: LD_ADDR_OWVAR 27
37967: PUSH
37968: LD_INT 1
37970: ST_TO_ADDR
// hc_class := class_apeman ;
37971: LD_ADDR_OWVAR 28
37975: PUSH
37976: LD_INT 12
37978: ST_TO_ADDR
// hc_gallery :=  ;
37979: LD_ADDR_OWVAR 33
37983: PUSH
37984: LD_STRING 
37986: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37987: LD_ADDR_OWVAR 35
37991: PUSH
37992: LD_VAR 0 1
37996: NEG
37997: PPUSH
37998: LD_VAR 0 1
38002: PPUSH
38003: CALL_OW 12
38007: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
38008: LD_ADDR_OWVAR 31
38012: PUSH
38013: LD_INT 0
38015: PPUSH
38016: LD_INT 3
38018: PPUSH
38019: CALL_OW 12
38023: PUSH
38024: LD_INT 0
38026: PPUSH
38027: LD_INT 3
38029: PPUSH
38030: CALL_OW 12
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
// end ;
38047: LD_VAR 0 2
38051: RET
// export function PrepareTiger ( agressivity ) ; begin
38052: LD_INT 0
38054: PPUSH
// uc_side := 0 ;
38055: LD_ADDR_OWVAR 20
38059: PUSH
38060: LD_INT 0
38062: ST_TO_ADDR
// uc_nation := 0 ;
38063: LD_ADDR_OWVAR 21
38067: PUSH
38068: LD_INT 0
38070: ST_TO_ADDR
// hc_class := class_tiger ;
38071: LD_ADDR_OWVAR 28
38075: PUSH
38076: LD_INT 14
38078: ST_TO_ADDR
// hc_gallery :=  ;
38079: LD_ADDR_OWVAR 33
38083: PUSH
38084: LD_STRING 
38086: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
38087: LD_ADDR_OWVAR 35
38091: PUSH
38092: LD_VAR 0 1
38096: NEG
38097: PPUSH
38098: LD_VAR 0 1
38102: PPUSH
38103: CALL_OW 12
38107: ST_TO_ADDR
// end ;
38108: LD_VAR 0 2
38112: RET
// export function PrepareEnchidna ( ) ; begin
38113: LD_INT 0
38115: PPUSH
// uc_side := 0 ;
38116: LD_ADDR_OWVAR 20
38120: PUSH
38121: LD_INT 0
38123: ST_TO_ADDR
// uc_nation := 0 ;
38124: LD_ADDR_OWVAR 21
38128: PUSH
38129: LD_INT 0
38131: ST_TO_ADDR
// hc_class := class_baggie ;
38132: LD_ADDR_OWVAR 28
38136: PUSH
38137: LD_INT 13
38139: ST_TO_ADDR
// hc_gallery :=  ;
38140: LD_ADDR_OWVAR 33
38144: PUSH
38145: LD_STRING 
38147: ST_TO_ADDR
// end ;
38148: LD_VAR 0 1
38152: RET
// export function PrepareFrog ( ) ; begin
38153: LD_INT 0
38155: PPUSH
// uc_side := 0 ;
38156: LD_ADDR_OWVAR 20
38160: PUSH
38161: LD_INT 0
38163: ST_TO_ADDR
// uc_nation := 0 ;
38164: LD_ADDR_OWVAR 21
38168: PUSH
38169: LD_INT 0
38171: ST_TO_ADDR
// hc_class := class_frog ;
38172: LD_ADDR_OWVAR 28
38176: PUSH
38177: LD_INT 19
38179: ST_TO_ADDR
// hc_gallery :=  ;
38180: LD_ADDR_OWVAR 33
38184: PUSH
38185: LD_STRING 
38187: ST_TO_ADDR
// end ;
38188: LD_VAR 0 1
38192: RET
// export function PrepareFish ( ) ; begin
38193: LD_INT 0
38195: PPUSH
// uc_side := 0 ;
38196: LD_ADDR_OWVAR 20
38200: PUSH
38201: LD_INT 0
38203: ST_TO_ADDR
// uc_nation := 0 ;
38204: LD_ADDR_OWVAR 21
38208: PUSH
38209: LD_INT 0
38211: ST_TO_ADDR
// hc_class := class_fish ;
38212: LD_ADDR_OWVAR 28
38216: PUSH
38217: LD_INT 20
38219: ST_TO_ADDR
// hc_gallery :=  ;
38220: LD_ADDR_OWVAR 33
38224: PUSH
38225: LD_STRING 
38227: ST_TO_ADDR
// end ;
38228: LD_VAR 0 1
38232: RET
// export function PrepareBird ( ) ; begin
38233: LD_INT 0
38235: PPUSH
// uc_side := 0 ;
38236: LD_ADDR_OWVAR 20
38240: PUSH
38241: LD_INT 0
38243: ST_TO_ADDR
// uc_nation := 0 ;
38244: LD_ADDR_OWVAR 21
38248: PUSH
38249: LD_INT 0
38251: ST_TO_ADDR
// hc_class := class_phororhacos ;
38252: LD_ADDR_OWVAR 28
38256: PUSH
38257: LD_INT 18
38259: ST_TO_ADDR
// hc_gallery :=  ;
38260: LD_ADDR_OWVAR 33
38264: PUSH
38265: LD_STRING 
38267: ST_TO_ADDR
// end ;
38268: LD_VAR 0 1
38272: RET
// export function PrepareHorse ( ) ; begin
38273: LD_INT 0
38275: PPUSH
// uc_side := 0 ;
38276: LD_ADDR_OWVAR 20
38280: PUSH
38281: LD_INT 0
38283: ST_TO_ADDR
// uc_nation := 0 ;
38284: LD_ADDR_OWVAR 21
38288: PUSH
38289: LD_INT 0
38291: ST_TO_ADDR
// hc_class := 21 ;
38292: LD_ADDR_OWVAR 28
38296: PUSH
38297: LD_INT 21
38299: ST_TO_ADDR
// hc_gallery :=  ;
38300: LD_ADDR_OWVAR 33
38304: PUSH
38305: LD_STRING 
38307: ST_TO_ADDR
// end ;
38308: LD_VAR 0 1
38312: RET
// export function PrepareMastodont ( ) ; begin
38313: LD_INT 0
38315: PPUSH
// uc_side := 0 ;
38316: LD_ADDR_OWVAR 20
38320: PUSH
38321: LD_INT 0
38323: ST_TO_ADDR
// uc_nation := 0 ;
38324: LD_ADDR_OWVAR 21
38328: PUSH
38329: LD_INT 0
38331: ST_TO_ADDR
// vc_chassis := 31 ;
38332: LD_ADDR_OWVAR 37
38336: PUSH
38337: LD_INT 31
38339: ST_TO_ADDR
// vc_control := control_rider ;
38340: LD_ADDR_OWVAR 38
38344: PUSH
38345: LD_INT 4
38347: ST_TO_ADDR
// end ;
38348: LD_VAR 0 1
38352: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
38353: LD_INT 0
38355: PPUSH
38356: PPUSH
38357: PPUSH
// uc_side = 0 ;
38358: LD_ADDR_OWVAR 20
38362: PUSH
38363: LD_INT 0
38365: ST_TO_ADDR
// uc_nation = 0 ;
38366: LD_ADDR_OWVAR 21
38370: PUSH
38371: LD_INT 0
38373: ST_TO_ADDR
// InitHc_All ( ) ;
38374: CALL_OW 584
// InitVc ;
38378: CALL_OW 20
// if mastodonts then
38382: LD_VAR 0 6
38386: IFFALSE 38453
// for i = 1 to mastodonts do
38388: LD_ADDR_VAR 0 11
38392: PUSH
38393: DOUBLE
38394: LD_INT 1
38396: DEC
38397: ST_TO_ADDR
38398: LD_VAR 0 6
38402: PUSH
38403: FOR_TO
38404: IFFALSE 38451
// begin vc_chassis := 31 ;
38406: LD_ADDR_OWVAR 37
38410: PUSH
38411: LD_INT 31
38413: ST_TO_ADDR
// vc_control := control_rider ;
38414: LD_ADDR_OWVAR 38
38418: PUSH
38419: LD_INT 4
38421: ST_TO_ADDR
// animal := CreateVehicle ;
38422: LD_ADDR_VAR 0 12
38426: PUSH
38427: CALL_OW 45
38431: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38432: LD_VAR 0 12
38436: PPUSH
38437: LD_VAR 0 8
38441: PPUSH
38442: LD_INT 0
38444: PPUSH
38445: CALL 40588 0 3
// end ;
38449: GO 38403
38451: POP
38452: POP
// if horses then
38453: LD_VAR 0 5
38457: IFFALSE 38524
// for i = 1 to horses do
38459: LD_ADDR_VAR 0 11
38463: PUSH
38464: DOUBLE
38465: LD_INT 1
38467: DEC
38468: ST_TO_ADDR
38469: LD_VAR 0 5
38473: PUSH
38474: FOR_TO
38475: IFFALSE 38522
// begin hc_class := 21 ;
38477: LD_ADDR_OWVAR 28
38481: PUSH
38482: LD_INT 21
38484: ST_TO_ADDR
// hc_gallery :=  ;
38485: LD_ADDR_OWVAR 33
38489: PUSH
38490: LD_STRING 
38492: ST_TO_ADDR
// animal := CreateHuman ;
38493: LD_ADDR_VAR 0 12
38497: PUSH
38498: CALL_OW 44
38502: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38503: LD_VAR 0 12
38507: PPUSH
38508: LD_VAR 0 8
38512: PPUSH
38513: LD_INT 0
38515: PPUSH
38516: CALL 40588 0 3
// end ;
38520: GO 38474
38522: POP
38523: POP
// if birds then
38524: LD_VAR 0 1
38528: IFFALSE 38595
// for i = 1 to birds do
38530: LD_ADDR_VAR 0 11
38534: PUSH
38535: DOUBLE
38536: LD_INT 1
38538: DEC
38539: ST_TO_ADDR
38540: LD_VAR 0 1
38544: PUSH
38545: FOR_TO
38546: IFFALSE 38593
// begin hc_class = 18 ;
38548: LD_ADDR_OWVAR 28
38552: PUSH
38553: LD_INT 18
38555: ST_TO_ADDR
// hc_gallery =  ;
38556: LD_ADDR_OWVAR 33
38560: PUSH
38561: LD_STRING 
38563: ST_TO_ADDR
// animal := CreateHuman ;
38564: LD_ADDR_VAR 0 12
38568: PUSH
38569: CALL_OW 44
38573: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38574: LD_VAR 0 12
38578: PPUSH
38579: LD_VAR 0 8
38583: PPUSH
38584: LD_INT 0
38586: PPUSH
38587: CALL 40588 0 3
// end ;
38591: GO 38545
38593: POP
38594: POP
// if tigers then
38595: LD_VAR 0 2
38599: IFFALSE 38683
// for i = 1 to tigers do
38601: LD_ADDR_VAR 0 11
38605: PUSH
38606: DOUBLE
38607: LD_INT 1
38609: DEC
38610: ST_TO_ADDR
38611: LD_VAR 0 2
38615: PUSH
38616: FOR_TO
38617: IFFALSE 38681
// begin hc_class = class_tiger ;
38619: LD_ADDR_OWVAR 28
38623: PUSH
38624: LD_INT 14
38626: ST_TO_ADDR
// hc_gallery =  ;
38627: LD_ADDR_OWVAR 33
38631: PUSH
38632: LD_STRING 
38634: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38635: LD_ADDR_OWVAR 35
38639: PUSH
38640: LD_INT 7
38642: NEG
38643: PPUSH
38644: LD_INT 7
38646: PPUSH
38647: CALL_OW 12
38651: ST_TO_ADDR
// animal := CreateHuman ;
38652: LD_ADDR_VAR 0 12
38656: PUSH
38657: CALL_OW 44
38661: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38662: LD_VAR 0 12
38666: PPUSH
38667: LD_VAR 0 8
38671: PPUSH
38672: LD_INT 0
38674: PPUSH
38675: CALL 40588 0 3
// end ;
38679: GO 38616
38681: POP
38682: POP
// if apemans then
38683: LD_VAR 0 3
38687: IFFALSE 38810
// for i = 1 to apemans do
38689: LD_ADDR_VAR 0 11
38693: PUSH
38694: DOUBLE
38695: LD_INT 1
38697: DEC
38698: ST_TO_ADDR
38699: LD_VAR 0 3
38703: PUSH
38704: FOR_TO
38705: IFFALSE 38808
// begin hc_class = class_apeman ;
38707: LD_ADDR_OWVAR 28
38711: PUSH
38712: LD_INT 12
38714: ST_TO_ADDR
// hc_gallery =  ;
38715: LD_ADDR_OWVAR 33
38719: PUSH
38720: LD_STRING 
38722: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38723: LD_ADDR_OWVAR 35
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PPUSH
38732: LD_INT 2
38734: PPUSH
38735: CALL_OW 12
38739: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38740: LD_ADDR_OWVAR 31
38744: PUSH
38745: LD_INT 1
38747: PPUSH
38748: LD_INT 3
38750: PPUSH
38751: CALL_OW 12
38755: PUSH
38756: LD_INT 1
38758: PPUSH
38759: LD_INT 3
38761: PPUSH
38762: CALL_OW 12
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: ST_TO_ADDR
// animal := CreateHuman ;
38779: LD_ADDR_VAR 0 12
38783: PUSH
38784: CALL_OW 44
38788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38789: LD_VAR 0 12
38793: PPUSH
38794: LD_VAR 0 8
38798: PPUSH
38799: LD_INT 0
38801: PPUSH
38802: CALL 40588 0 3
// end ;
38806: GO 38704
38808: POP
38809: POP
// if enchidnas then
38810: LD_VAR 0 4
38814: IFFALSE 38881
// for i = 1 to enchidnas do
38816: LD_ADDR_VAR 0 11
38820: PUSH
38821: DOUBLE
38822: LD_INT 1
38824: DEC
38825: ST_TO_ADDR
38826: LD_VAR 0 4
38830: PUSH
38831: FOR_TO
38832: IFFALSE 38879
// begin hc_class = 13 ;
38834: LD_ADDR_OWVAR 28
38838: PUSH
38839: LD_INT 13
38841: ST_TO_ADDR
// hc_gallery =  ;
38842: LD_ADDR_OWVAR 33
38846: PUSH
38847: LD_STRING 
38849: ST_TO_ADDR
// animal := CreateHuman ;
38850: LD_ADDR_VAR 0 12
38854: PUSH
38855: CALL_OW 44
38859: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38860: LD_VAR 0 12
38864: PPUSH
38865: LD_VAR 0 8
38869: PPUSH
38870: LD_INT 0
38872: PPUSH
38873: CALL 40588 0 3
// end ;
38877: GO 38831
38879: POP
38880: POP
// if fishes then
38881: LD_VAR 0 7
38885: IFFALSE 38952
// for i = 1 to fishes do
38887: LD_ADDR_VAR 0 11
38891: PUSH
38892: DOUBLE
38893: LD_INT 1
38895: DEC
38896: ST_TO_ADDR
38897: LD_VAR 0 7
38901: PUSH
38902: FOR_TO
38903: IFFALSE 38950
// begin hc_class = 20 ;
38905: LD_ADDR_OWVAR 28
38909: PUSH
38910: LD_INT 20
38912: ST_TO_ADDR
// hc_gallery =  ;
38913: LD_ADDR_OWVAR 33
38917: PUSH
38918: LD_STRING 
38920: ST_TO_ADDR
// animal := CreateHuman ;
38921: LD_ADDR_VAR 0 12
38925: PUSH
38926: CALL_OW 44
38930: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38931: LD_VAR 0 12
38935: PPUSH
38936: LD_VAR 0 9
38940: PPUSH
38941: LD_INT 0
38943: PPUSH
38944: CALL 40588 0 3
// end ;
38948: GO 38902
38950: POP
38951: POP
// end ;
38952: LD_VAR 0 10
38956: RET
// export function WantHeal ( sci , unit ) ; begin
38957: LD_INT 0
38959: PPUSH
// if GetTaskList ( sci ) > 0 then
38960: LD_VAR 0 1
38964: PPUSH
38965: CALL_OW 437
38969: PUSH
38970: LD_INT 0
38972: GREATER
38973: IFFALSE 39043
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38975: LD_VAR 0 1
38979: PPUSH
38980: CALL_OW 437
38984: PUSH
38985: LD_INT 1
38987: ARRAY
38988: PUSH
38989: LD_INT 1
38991: ARRAY
38992: PUSH
38993: LD_STRING l
38995: EQUAL
38996: PUSH
38997: LD_VAR 0 1
39001: PPUSH
39002: CALL_OW 437
39006: PUSH
39007: LD_INT 1
39009: ARRAY
39010: PUSH
39011: LD_INT 4
39013: ARRAY
39014: PUSH
39015: LD_VAR 0 2
39019: EQUAL
39020: AND
39021: IFFALSE 39033
// result := true else
39023: LD_ADDR_VAR 0 3
39027: PUSH
39028: LD_INT 1
39030: ST_TO_ADDR
39031: GO 39041
// result := false ;
39033: LD_ADDR_VAR 0 3
39037: PUSH
39038: LD_INT 0
39040: ST_TO_ADDR
// end else
39041: GO 39051
// result := false ;
39043: LD_ADDR_VAR 0 3
39047: PUSH
39048: LD_INT 0
39050: ST_TO_ADDR
// end ;
39051: LD_VAR 0 3
39055: RET
// export function HealTarget ( sci ) ; begin
39056: LD_INT 0
39058: PPUSH
// if not sci then
39059: LD_VAR 0 1
39063: NOT
39064: IFFALSE 39068
// exit ;
39066: GO 39133
// result := 0 ;
39068: LD_ADDR_VAR 0 2
39072: PUSH
39073: LD_INT 0
39075: ST_TO_ADDR
// if GetTaskList ( sci ) then
39076: LD_VAR 0 1
39080: PPUSH
39081: CALL_OW 437
39085: IFFALSE 39133
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
39087: LD_VAR 0 1
39091: PPUSH
39092: CALL_OW 437
39096: PUSH
39097: LD_INT 1
39099: ARRAY
39100: PUSH
39101: LD_INT 1
39103: ARRAY
39104: PUSH
39105: LD_STRING l
39107: EQUAL
39108: IFFALSE 39133
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
39110: LD_ADDR_VAR 0 2
39114: PUSH
39115: LD_VAR 0 1
39119: PPUSH
39120: CALL_OW 437
39124: PUSH
39125: LD_INT 1
39127: ARRAY
39128: PUSH
39129: LD_INT 4
39131: ARRAY
39132: ST_TO_ADDR
// end ;
39133: LD_VAR 0 2
39137: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
39138: LD_INT 0
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
// if not base_units then
39144: LD_VAR 0 1
39148: NOT
39149: IFFALSE 39153
// exit ;
39151: GO 39240
// result := false ;
39153: LD_ADDR_VAR 0 2
39157: PUSH
39158: LD_INT 0
39160: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
39161: LD_ADDR_VAR 0 5
39165: PUSH
39166: LD_VAR 0 1
39170: PPUSH
39171: LD_INT 21
39173: PUSH
39174: LD_INT 3
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PPUSH
39181: CALL_OW 72
39185: ST_TO_ADDR
// if not tmp then
39186: LD_VAR 0 5
39190: NOT
39191: IFFALSE 39195
// exit ;
39193: GO 39240
// for i in tmp do
39195: LD_ADDR_VAR 0 3
39199: PUSH
39200: LD_VAR 0 5
39204: PUSH
39205: FOR_IN
39206: IFFALSE 39238
// begin result := EnemyInRange ( i , 22 ) ;
39208: LD_ADDR_VAR 0 2
39212: PUSH
39213: LD_VAR 0 3
39217: PPUSH
39218: LD_INT 22
39220: PPUSH
39221: CALL 36909 0 2
39225: ST_TO_ADDR
// if result then
39226: LD_VAR 0 2
39230: IFFALSE 39236
// exit ;
39232: POP
39233: POP
39234: GO 39240
// end ;
39236: GO 39205
39238: POP
39239: POP
// end ;
39240: LD_VAR 0 2
39244: RET
// export function FilterByTag ( units , tag ) ; begin
39245: LD_INT 0
39247: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
39248: LD_ADDR_VAR 0 3
39252: PUSH
39253: LD_VAR 0 1
39257: PPUSH
39258: LD_INT 120
39260: PUSH
39261: LD_VAR 0 2
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PPUSH
39270: CALL_OW 72
39274: ST_TO_ADDR
// end ;
39275: LD_VAR 0 3
39279: RET
// export function IsDriver ( un ) ; begin
39280: LD_INT 0
39282: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
39283: LD_ADDR_VAR 0 2
39287: PUSH
39288: LD_VAR 0 1
39292: PUSH
39293: LD_INT 55
39295: PUSH
39296: EMPTY
39297: LIST
39298: PPUSH
39299: CALL_OW 69
39303: IN
39304: ST_TO_ADDR
// end ;
39305: LD_VAR 0 2
39309: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
39310: LD_INT 0
39312: PPUSH
39313: PPUSH
// list := [ ] ;
39314: LD_ADDR_VAR 0 5
39318: PUSH
39319: EMPTY
39320: ST_TO_ADDR
// case d of 0 :
39321: LD_VAR 0 3
39325: PUSH
39326: LD_INT 0
39328: DOUBLE
39329: EQUAL
39330: IFTRUE 39334
39332: GO 39467
39334: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
39335: LD_ADDR_VAR 0 5
39339: PUSH
39340: LD_VAR 0 1
39344: PUSH
39345: LD_INT 4
39347: MINUS
39348: PUSH
39349: LD_VAR 0 2
39353: PUSH
39354: LD_INT 4
39356: MINUS
39357: PUSH
39358: LD_INT 2
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: PUSH
39366: LD_VAR 0 1
39370: PUSH
39371: LD_INT 3
39373: MINUS
39374: PUSH
39375: LD_VAR 0 2
39379: PUSH
39380: LD_INT 1
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: LIST
39387: PUSH
39388: LD_VAR 0 1
39392: PUSH
39393: LD_INT 4
39395: PLUS
39396: PUSH
39397: LD_VAR 0 2
39401: PUSH
39402: LD_INT 4
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: LIST
39409: PUSH
39410: LD_VAR 0 1
39414: PUSH
39415: LD_INT 3
39417: PLUS
39418: PUSH
39419: LD_VAR 0 2
39423: PUSH
39424: LD_INT 3
39426: PLUS
39427: PUSH
39428: LD_INT 5
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: PUSH
39436: LD_VAR 0 1
39440: PUSH
39441: LD_VAR 0 2
39445: PUSH
39446: LD_INT 4
39448: PLUS
39449: PUSH
39450: LD_INT 0
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: LIST
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: ST_TO_ADDR
// end ; 1 :
39465: GO 40165
39467: LD_INT 1
39469: DOUBLE
39470: EQUAL
39471: IFTRUE 39475
39473: GO 39608
39475: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
39476: LD_ADDR_VAR 0 5
39480: PUSH
39481: LD_VAR 0 1
39485: PUSH
39486: LD_VAR 0 2
39490: PUSH
39491: LD_INT 4
39493: MINUS
39494: PUSH
39495: LD_INT 3
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: LIST
39502: PUSH
39503: LD_VAR 0 1
39507: PUSH
39508: LD_INT 3
39510: MINUS
39511: PUSH
39512: LD_VAR 0 2
39516: PUSH
39517: LD_INT 3
39519: MINUS
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: PUSH
39529: LD_VAR 0 1
39533: PUSH
39534: LD_INT 4
39536: MINUS
39537: PUSH
39538: LD_VAR 0 2
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: LIST
39550: PUSH
39551: LD_VAR 0 1
39555: PUSH
39556: LD_VAR 0 2
39560: PUSH
39561: LD_INT 3
39563: PLUS
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: LIST
39572: PUSH
39573: LD_VAR 0 1
39577: PUSH
39578: LD_INT 4
39580: PLUS
39581: PUSH
39582: LD_VAR 0 2
39586: PUSH
39587: LD_INT 4
39589: PLUS
39590: PUSH
39591: LD_INT 5
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: ST_TO_ADDR
// end ; 2 :
39606: GO 40165
39608: LD_INT 2
39610: DOUBLE
39611: EQUAL
39612: IFTRUE 39616
39614: GO 39745
39616: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39617: LD_ADDR_VAR 0 5
39621: PUSH
39622: LD_VAR 0 1
39626: PUSH
39627: LD_VAR 0 2
39631: PUSH
39632: LD_INT 3
39634: MINUS
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: PUSH
39644: LD_VAR 0 1
39648: PUSH
39649: LD_INT 4
39651: PLUS
39652: PUSH
39653: LD_VAR 0 2
39657: PUSH
39658: LD_INT 4
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: LIST
39665: PUSH
39666: LD_VAR 0 1
39670: PUSH
39671: LD_VAR 0 2
39675: PUSH
39676: LD_INT 4
39678: PLUS
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: PUSH
39688: LD_VAR 0 1
39692: PUSH
39693: LD_INT 3
39695: MINUS
39696: PUSH
39697: LD_VAR 0 2
39701: PUSH
39702: LD_INT 1
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: LIST
39709: PUSH
39710: LD_VAR 0 1
39714: PUSH
39715: LD_INT 4
39717: MINUS
39718: PUSH
39719: LD_VAR 0 2
39723: PUSH
39724: LD_INT 4
39726: MINUS
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: LIST
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: ST_TO_ADDR
// end ; 3 :
39743: GO 40165
39745: LD_INT 3
39747: DOUBLE
39748: EQUAL
39749: IFTRUE 39753
39751: GO 39886
39753: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39754: LD_ADDR_VAR 0 5
39758: PUSH
39759: LD_VAR 0 1
39763: PUSH
39764: LD_INT 3
39766: PLUS
39767: PUSH
39768: LD_VAR 0 2
39772: PUSH
39773: LD_INT 4
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: PUSH
39781: LD_VAR 0 1
39785: PUSH
39786: LD_INT 4
39788: PLUS
39789: PUSH
39790: LD_VAR 0 2
39794: PUSH
39795: LD_INT 4
39797: PLUS
39798: PUSH
39799: LD_INT 5
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: LIST
39806: PUSH
39807: LD_VAR 0 1
39811: PUSH
39812: LD_INT 4
39814: MINUS
39815: PUSH
39816: LD_VAR 0 2
39820: PUSH
39821: LD_INT 1
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: LIST
39828: PUSH
39829: LD_VAR 0 1
39833: PUSH
39834: LD_VAR 0 2
39838: PUSH
39839: LD_INT 4
39841: MINUS
39842: PUSH
39843: LD_INT 3
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: PUSH
39851: LD_VAR 0 1
39855: PUSH
39856: LD_INT 3
39858: MINUS
39859: PUSH
39860: LD_VAR 0 2
39864: PUSH
39865: LD_INT 3
39867: MINUS
39868: PUSH
39869: LD_INT 2
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: LIST
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: ST_TO_ADDR
// end ; 4 :
39884: GO 40165
39886: LD_INT 4
39888: DOUBLE
39889: EQUAL
39890: IFTRUE 39894
39892: GO 40027
39894: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39895: LD_ADDR_VAR 0 5
39899: PUSH
39900: LD_VAR 0 1
39904: PUSH
39905: LD_VAR 0 2
39909: PUSH
39910: LD_INT 4
39912: PLUS
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: LIST
39921: PUSH
39922: LD_VAR 0 1
39926: PUSH
39927: LD_INT 3
39929: PLUS
39930: PUSH
39931: LD_VAR 0 2
39935: PUSH
39936: LD_INT 3
39938: PLUS
39939: PUSH
39940: LD_INT 5
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: PUSH
39948: LD_VAR 0 1
39952: PUSH
39953: LD_INT 4
39955: PLUS
39956: PUSH
39957: LD_VAR 0 2
39961: PUSH
39962: LD_INT 4
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: PUSH
39970: LD_VAR 0 1
39974: PUSH
39975: LD_VAR 0 2
39979: PUSH
39980: LD_INT 3
39982: MINUS
39983: PUSH
39984: LD_INT 3
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: LIST
39991: PUSH
39992: LD_VAR 0 1
39996: PUSH
39997: LD_INT 4
39999: MINUS
40000: PUSH
40001: LD_VAR 0 2
40005: PUSH
40006: LD_INT 4
40008: MINUS
40009: PUSH
40010: LD_INT 2
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: LIST
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: ST_TO_ADDR
// end ; 5 :
40025: GO 40165
40027: LD_INT 5
40029: DOUBLE
40030: EQUAL
40031: IFTRUE 40035
40033: GO 40164
40035: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
40036: LD_ADDR_VAR 0 5
40040: PUSH
40041: LD_VAR 0 1
40045: PUSH
40046: LD_INT 4
40048: MINUS
40049: PUSH
40050: LD_VAR 0 2
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: PUSH
40063: LD_VAR 0 1
40067: PUSH
40068: LD_VAR 0 2
40072: PUSH
40073: LD_INT 4
40075: MINUS
40076: PUSH
40077: LD_INT 3
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: LIST
40084: PUSH
40085: LD_VAR 0 1
40089: PUSH
40090: LD_INT 4
40092: PLUS
40093: PUSH
40094: LD_VAR 0 2
40098: PUSH
40099: LD_INT 4
40101: PLUS
40102: PUSH
40103: LD_INT 5
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: LIST
40110: PUSH
40111: LD_VAR 0 1
40115: PUSH
40116: LD_INT 3
40118: PLUS
40119: PUSH
40120: LD_VAR 0 2
40124: PUSH
40125: LD_INT 4
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: PUSH
40133: LD_VAR 0 1
40137: PUSH
40138: LD_VAR 0 2
40142: PUSH
40143: LD_INT 3
40145: PLUS
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: LIST
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: ST_TO_ADDR
// end ; end ;
40162: GO 40165
40164: POP
// result := list ;
40165: LD_ADDR_VAR 0 4
40169: PUSH
40170: LD_VAR 0 5
40174: ST_TO_ADDR
// end ;
40175: LD_VAR 0 4
40179: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
40180: LD_INT 0
40182: PPUSH
40183: PPUSH
40184: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
40185: LD_VAR 0 1
40189: NOT
40190: PUSH
40191: LD_VAR 0 2
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: LD_INT 3
40204: PUSH
40205: LD_INT 4
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: IN
40214: NOT
40215: OR
40216: IFFALSE 40220
// exit ;
40218: GO 40312
// tmp := [ ] ;
40220: LD_ADDR_VAR 0 5
40224: PUSH
40225: EMPTY
40226: ST_TO_ADDR
// for i in units do
40227: LD_ADDR_VAR 0 4
40231: PUSH
40232: LD_VAR 0 1
40236: PUSH
40237: FOR_IN
40238: IFFALSE 40281
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
40240: LD_ADDR_VAR 0 5
40244: PUSH
40245: LD_VAR 0 5
40249: PPUSH
40250: LD_VAR 0 5
40254: PUSH
40255: LD_INT 1
40257: PLUS
40258: PPUSH
40259: LD_VAR 0 4
40263: PPUSH
40264: LD_VAR 0 2
40268: PPUSH
40269: CALL_OW 259
40273: PPUSH
40274: CALL_OW 2
40278: ST_TO_ADDR
40279: GO 40237
40281: POP
40282: POP
// if not tmp then
40283: LD_VAR 0 5
40287: NOT
40288: IFFALSE 40292
// exit ;
40290: GO 40312
// result := SortListByListDesc ( units , tmp ) ;
40292: LD_ADDR_VAR 0 3
40296: PUSH
40297: LD_VAR 0 1
40301: PPUSH
40302: LD_VAR 0 5
40306: PPUSH
40307: CALL_OW 77
40311: ST_TO_ADDR
// end ;
40312: LD_VAR 0 3
40316: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
40317: LD_INT 0
40319: PPUSH
40320: PPUSH
40321: PPUSH
// result := false ;
40322: LD_ADDR_VAR 0 3
40326: PUSH
40327: LD_INT 0
40329: ST_TO_ADDR
// x := GetX ( building ) ;
40330: LD_ADDR_VAR 0 4
40334: PUSH
40335: LD_VAR 0 2
40339: PPUSH
40340: CALL_OW 250
40344: ST_TO_ADDR
// y := GetY ( building ) ;
40345: LD_ADDR_VAR 0 5
40349: PUSH
40350: LD_VAR 0 2
40354: PPUSH
40355: CALL_OW 251
40359: ST_TO_ADDR
// if not building or not x or not y then
40360: LD_VAR 0 2
40364: NOT
40365: PUSH
40366: LD_VAR 0 4
40370: NOT
40371: OR
40372: PUSH
40373: LD_VAR 0 5
40377: NOT
40378: OR
40379: IFFALSE 40383
// exit ;
40381: GO 40475
// if GetTaskList ( unit ) then
40383: LD_VAR 0 1
40387: PPUSH
40388: CALL_OW 437
40392: IFFALSE 40475
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40394: LD_STRING e
40396: PUSH
40397: LD_VAR 0 1
40401: PPUSH
40402: CALL_OW 437
40406: PUSH
40407: LD_INT 1
40409: ARRAY
40410: PUSH
40411: LD_INT 1
40413: ARRAY
40414: EQUAL
40415: PUSH
40416: LD_VAR 0 4
40420: PUSH
40421: LD_VAR 0 1
40425: PPUSH
40426: CALL_OW 437
40430: PUSH
40431: LD_INT 1
40433: ARRAY
40434: PUSH
40435: LD_INT 2
40437: ARRAY
40438: EQUAL
40439: AND
40440: PUSH
40441: LD_VAR 0 5
40445: PUSH
40446: LD_VAR 0 1
40450: PPUSH
40451: CALL_OW 437
40455: PUSH
40456: LD_INT 1
40458: ARRAY
40459: PUSH
40460: LD_INT 3
40462: ARRAY
40463: EQUAL
40464: AND
40465: IFFALSE 40475
// result := true end ;
40467: LD_ADDR_VAR 0 3
40471: PUSH
40472: LD_INT 1
40474: ST_TO_ADDR
// end ;
40475: LD_VAR 0 3
40479: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
40480: LD_INT 0
40482: PPUSH
// result := false ;
40483: LD_ADDR_VAR 0 4
40487: PUSH
40488: LD_INT 0
40490: ST_TO_ADDR
// if GetTaskList ( unit ) then
40491: LD_VAR 0 1
40495: PPUSH
40496: CALL_OW 437
40500: IFFALSE 40583
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40502: LD_STRING M
40504: PUSH
40505: LD_VAR 0 1
40509: PPUSH
40510: CALL_OW 437
40514: PUSH
40515: LD_INT 1
40517: ARRAY
40518: PUSH
40519: LD_INT 1
40521: ARRAY
40522: EQUAL
40523: PUSH
40524: LD_VAR 0 2
40528: PUSH
40529: LD_VAR 0 1
40533: PPUSH
40534: CALL_OW 437
40538: PUSH
40539: LD_INT 1
40541: ARRAY
40542: PUSH
40543: LD_INT 2
40545: ARRAY
40546: EQUAL
40547: AND
40548: PUSH
40549: LD_VAR 0 3
40553: PUSH
40554: LD_VAR 0 1
40558: PPUSH
40559: CALL_OW 437
40563: PUSH
40564: LD_INT 1
40566: ARRAY
40567: PUSH
40568: LD_INT 3
40570: ARRAY
40571: EQUAL
40572: AND
40573: IFFALSE 40583
// result := true ;
40575: LD_ADDR_VAR 0 4
40579: PUSH
40580: LD_INT 1
40582: ST_TO_ADDR
// end ; end ;
40583: LD_VAR 0 4
40587: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40588: LD_INT 0
40590: PPUSH
40591: PPUSH
40592: PPUSH
40593: PPUSH
// if not unit or not area then
40594: LD_VAR 0 1
40598: NOT
40599: PUSH
40600: LD_VAR 0 2
40604: NOT
40605: OR
40606: IFFALSE 40610
// exit ;
40608: GO 40774
// tmp := AreaToList ( area , i ) ;
40610: LD_ADDR_VAR 0 6
40614: PUSH
40615: LD_VAR 0 2
40619: PPUSH
40620: LD_VAR 0 5
40624: PPUSH
40625: CALL_OW 517
40629: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40630: LD_ADDR_VAR 0 5
40634: PUSH
40635: DOUBLE
40636: LD_INT 1
40638: DEC
40639: ST_TO_ADDR
40640: LD_VAR 0 6
40644: PUSH
40645: LD_INT 1
40647: ARRAY
40648: PUSH
40649: FOR_TO
40650: IFFALSE 40772
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40652: LD_ADDR_VAR 0 7
40656: PUSH
40657: LD_VAR 0 6
40661: PUSH
40662: LD_INT 1
40664: ARRAY
40665: PUSH
40666: LD_VAR 0 5
40670: ARRAY
40671: PUSH
40672: LD_VAR 0 6
40676: PUSH
40677: LD_INT 2
40679: ARRAY
40680: PUSH
40681: LD_VAR 0 5
40685: ARRAY
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
40691: LD_VAR 0 7
40695: PUSH
40696: LD_INT 1
40698: ARRAY
40699: PPUSH
40700: LD_VAR 0 7
40704: PUSH
40705: LD_INT 2
40707: ARRAY
40708: PPUSH
40709: CALL_OW 428
40713: PUSH
40714: LD_INT 0
40716: EQUAL
40717: IFFALSE 40770
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40719: LD_VAR 0 1
40723: PPUSH
40724: LD_VAR 0 7
40728: PUSH
40729: LD_INT 1
40731: ARRAY
40732: PPUSH
40733: LD_VAR 0 7
40737: PUSH
40738: LD_INT 2
40740: ARRAY
40741: PPUSH
40742: LD_VAR 0 3
40746: PPUSH
40747: CALL_OW 48
// result := IsPlaced ( unit ) ;
40751: LD_ADDR_VAR 0 4
40755: PUSH
40756: LD_VAR 0 1
40760: PPUSH
40761: CALL_OW 305
40765: ST_TO_ADDR
// exit ;
40766: POP
40767: POP
40768: GO 40774
// end ; end ;
40770: GO 40649
40772: POP
40773: POP
// end ;
40774: LD_VAR 0 4
40778: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40779: LD_INT 0
40781: PPUSH
40782: PPUSH
40783: PPUSH
// if not side or side > 8 then
40784: LD_VAR 0 1
40788: NOT
40789: PUSH
40790: LD_VAR 0 1
40794: PUSH
40795: LD_INT 8
40797: GREATER
40798: OR
40799: IFFALSE 40803
// exit ;
40801: GO 40990
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40803: LD_ADDR_VAR 0 4
40807: PUSH
40808: LD_INT 22
40810: PUSH
40811: LD_VAR 0 1
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 21
40822: PUSH
40823: LD_INT 3
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PPUSH
40834: CALL_OW 69
40838: ST_TO_ADDR
// if not tmp then
40839: LD_VAR 0 4
40843: NOT
40844: IFFALSE 40848
// exit ;
40846: GO 40990
// enable_addtolog := true ;
40848: LD_ADDR_OWVAR 81
40852: PUSH
40853: LD_INT 1
40855: ST_TO_ADDR
// AddToLog ( [ ) ;
40856: LD_STRING [
40858: PPUSH
40859: CALL_OW 561
// for i in tmp do
40863: LD_ADDR_VAR 0 3
40867: PUSH
40868: LD_VAR 0 4
40872: PUSH
40873: FOR_IN
40874: IFFALSE 40981
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40876: LD_STRING [
40878: PUSH
40879: LD_VAR 0 3
40883: PPUSH
40884: CALL_OW 266
40888: STR
40889: PUSH
40890: LD_STRING , 
40892: STR
40893: PUSH
40894: LD_VAR 0 3
40898: PPUSH
40899: CALL_OW 250
40903: STR
40904: PUSH
40905: LD_STRING , 
40907: STR
40908: PUSH
40909: LD_VAR 0 3
40913: PPUSH
40914: CALL_OW 251
40918: STR
40919: PUSH
40920: LD_STRING , 
40922: STR
40923: PUSH
40924: LD_VAR 0 3
40928: PPUSH
40929: CALL_OW 254
40933: STR
40934: PUSH
40935: LD_STRING , 
40937: STR
40938: PUSH
40939: LD_VAR 0 3
40943: PPUSH
40944: LD_INT 1
40946: PPUSH
40947: CALL_OW 268
40951: STR
40952: PUSH
40953: LD_STRING , 
40955: STR
40956: PUSH
40957: LD_VAR 0 3
40961: PPUSH
40962: LD_INT 2
40964: PPUSH
40965: CALL_OW 268
40969: STR
40970: PUSH
40971: LD_STRING ],
40973: STR
40974: PPUSH
40975: CALL_OW 561
// end ;
40979: GO 40873
40981: POP
40982: POP
// AddToLog ( ]; ) ;
40983: LD_STRING ];
40985: PPUSH
40986: CALL_OW 561
// end ;
40990: LD_VAR 0 2
40994: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40995: LD_INT 0
40997: PPUSH
40998: PPUSH
40999: PPUSH
41000: PPUSH
41001: PPUSH
// if not area or not rate or not max then
41002: LD_VAR 0 1
41006: NOT
41007: PUSH
41008: LD_VAR 0 2
41012: NOT
41013: OR
41014: PUSH
41015: LD_VAR 0 4
41019: NOT
41020: OR
41021: IFFALSE 41025
// exit ;
41023: GO 41214
// while 1 do
41025: LD_INT 1
41027: IFFALSE 41214
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
41029: LD_ADDR_VAR 0 9
41033: PUSH
41034: LD_VAR 0 1
41038: PPUSH
41039: LD_INT 1
41041: PPUSH
41042: CALL_OW 287
41046: PUSH
41047: LD_INT 10
41049: MUL
41050: ST_TO_ADDR
// r := rate / 10 ;
41051: LD_ADDR_VAR 0 7
41055: PUSH
41056: LD_VAR 0 2
41060: PUSH
41061: LD_INT 10
41063: DIVREAL
41064: ST_TO_ADDR
// time := 1 1$00 ;
41065: LD_ADDR_VAR 0 8
41069: PUSH
41070: LD_INT 2100
41072: ST_TO_ADDR
// if amount < min then
41073: LD_VAR 0 9
41077: PUSH
41078: LD_VAR 0 3
41082: LESS
41083: IFFALSE 41101
// r := r * 2 else
41085: LD_ADDR_VAR 0 7
41089: PUSH
41090: LD_VAR 0 7
41094: PUSH
41095: LD_INT 2
41097: MUL
41098: ST_TO_ADDR
41099: GO 41127
// if amount > max then
41101: LD_VAR 0 9
41105: PUSH
41106: LD_VAR 0 4
41110: GREATER
41111: IFFALSE 41127
// r := r / 2 ;
41113: LD_ADDR_VAR 0 7
41117: PUSH
41118: LD_VAR 0 7
41122: PUSH
41123: LD_INT 2
41125: DIVREAL
41126: ST_TO_ADDR
// time := time / r ;
41127: LD_ADDR_VAR 0 8
41131: PUSH
41132: LD_VAR 0 8
41136: PUSH
41137: LD_VAR 0 7
41141: DIVREAL
41142: ST_TO_ADDR
// if time < 0 then
41143: LD_VAR 0 8
41147: PUSH
41148: LD_INT 0
41150: LESS
41151: IFFALSE 41168
// time := time * - 1 ;
41153: LD_ADDR_VAR 0 8
41157: PUSH
41158: LD_VAR 0 8
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: MUL
41167: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
41168: LD_VAR 0 8
41172: PUSH
41173: LD_INT 35
41175: PPUSH
41176: LD_INT 875
41178: PPUSH
41179: CALL_OW 12
41183: PLUS
41184: PPUSH
41185: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
41189: LD_INT 1
41191: PPUSH
41192: LD_INT 5
41194: PPUSH
41195: CALL_OW 12
41199: PPUSH
41200: LD_VAR 0 1
41204: PPUSH
41205: LD_INT 1
41207: PPUSH
41208: CALL_OW 55
// end ;
41212: GO 41025
// end ;
41214: LD_VAR 0 5
41218: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
41219: LD_INT 0
41221: PPUSH
41222: PPUSH
41223: PPUSH
41224: PPUSH
41225: PPUSH
41226: PPUSH
41227: PPUSH
41228: PPUSH
// if not turrets or not factories then
41229: LD_VAR 0 1
41233: NOT
41234: PUSH
41235: LD_VAR 0 2
41239: NOT
41240: OR
41241: IFFALSE 41245
// exit ;
41243: GO 41552
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
41245: LD_ADDR_VAR 0 10
41249: PUSH
41250: LD_INT 5
41252: PUSH
41253: LD_INT 6
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: LD_INT 4
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 3
41272: PUSH
41273: LD_INT 5
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 24
41287: PUSH
41288: LD_INT 25
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 23
41297: PUSH
41298: LD_INT 27
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 42
41311: PUSH
41312: LD_INT 43
41314: PUSH
41315: EMPTY
41316: LIST
41317: LIST
41318: PUSH
41319: LD_INT 44
41321: PUSH
41322: LD_INT 46
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 45
41331: PUSH
41332: LD_INT 47
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: LIST
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: LIST
41348: ST_TO_ADDR
// result := [ ] ;
41349: LD_ADDR_VAR 0 3
41353: PUSH
41354: EMPTY
41355: ST_TO_ADDR
// for i in turrets do
41356: LD_ADDR_VAR 0 4
41360: PUSH
41361: LD_VAR 0 1
41365: PUSH
41366: FOR_IN
41367: IFFALSE 41550
// begin nat := GetNation ( i ) ;
41369: LD_ADDR_VAR 0 7
41373: PUSH
41374: LD_VAR 0 4
41378: PPUSH
41379: CALL_OW 248
41383: ST_TO_ADDR
// weapon := 0 ;
41384: LD_ADDR_VAR 0 8
41388: PUSH
41389: LD_INT 0
41391: ST_TO_ADDR
// if not nat then
41392: LD_VAR 0 7
41396: NOT
41397: IFFALSE 41401
// continue ;
41399: GO 41366
// for j in list [ nat ] do
41401: LD_ADDR_VAR 0 5
41405: PUSH
41406: LD_VAR 0 10
41410: PUSH
41411: LD_VAR 0 7
41415: ARRAY
41416: PUSH
41417: FOR_IN
41418: IFFALSE 41459
// if GetBWeapon ( i ) = j [ 1 ] then
41420: LD_VAR 0 4
41424: PPUSH
41425: CALL_OW 269
41429: PUSH
41430: LD_VAR 0 5
41434: PUSH
41435: LD_INT 1
41437: ARRAY
41438: EQUAL
41439: IFFALSE 41457
// begin weapon := j [ 2 ] ;
41441: LD_ADDR_VAR 0 8
41445: PUSH
41446: LD_VAR 0 5
41450: PUSH
41451: LD_INT 2
41453: ARRAY
41454: ST_TO_ADDR
// break ;
41455: GO 41459
// end ;
41457: GO 41417
41459: POP
41460: POP
// if not weapon then
41461: LD_VAR 0 8
41465: NOT
41466: IFFALSE 41470
// continue ;
41468: GO 41366
// for k in factories do
41470: LD_ADDR_VAR 0 6
41474: PUSH
41475: LD_VAR 0 2
41479: PUSH
41480: FOR_IN
41481: IFFALSE 41546
// begin weapons := AvailableWeaponList ( k ) ;
41483: LD_ADDR_VAR 0 9
41487: PUSH
41488: LD_VAR 0 6
41492: PPUSH
41493: CALL_OW 478
41497: ST_TO_ADDR
// if not weapons then
41498: LD_VAR 0 9
41502: NOT
41503: IFFALSE 41507
// continue ;
41505: GO 41480
// if weapon in weapons then
41507: LD_VAR 0 8
41511: PUSH
41512: LD_VAR 0 9
41516: IN
41517: IFFALSE 41544
// begin result := [ i , weapon ] ;
41519: LD_ADDR_VAR 0 3
41523: PUSH
41524: LD_VAR 0 4
41528: PUSH
41529: LD_VAR 0 8
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: ST_TO_ADDR
// exit ;
41538: POP
41539: POP
41540: POP
41541: POP
41542: GO 41552
// end ; end ;
41544: GO 41480
41546: POP
41547: POP
// end ;
41548: GO 41366
41550: POP
41551: POP
// end ;
41552: LD_VAR 0 3
41556: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41557: LD_INT 0
41559: PPUSH
// if not side or side > 8 then
41560: LD_VAR 0 3
41564: NOT
41565: PUSH
41566: LD_VAR 0 3
41570: PUSH
41571: LD_INT 8
41573: GREATER
41574: OR
41575: IFFALSE 41579
// exit ;
41577: GO 41638
// if not range then
41579: LD_VAR 0 4
41583: NOT
41584: IFFALSE 41595
// range := - 12 ;
41586: LD_ADDR_VAR 0 4
41590: PUSH
41591: LD_INT 12
41593: NEG
41594: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41595: LD_VAR 0 1
41599: PPUSH
41600: LD_VAR 0 2
41604: PPUSH
41605: LD_VAR 0 3
41609: PPUSH
41610: LD_VAR 0 4
41614: PPUSH
41615: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41619: LD_VAR 0 1
41623: PPUSH
41624: LD_VAR 0 2
41628: PPUSH
41629: LD_VAR 0 3
41633: PPUSH
41634: CALL_OW 331
// end ;
41638: LD_VAR 0 5
41642: RET
// export function Video ( mode ) ; begin
41643: LD_INT 0
41645: PPUSH
// ingame_video = mode ;
41646: LD_ADDR_OWVAR 52
41650: PUSH
41651: LD_VAR 0 1
41655: ST_TO_ADDR
// interface_hidden = mode ;
41656: LD_ADDR_OWVAR 54
41660: PUSH
41661: LD_VAR 0 1
41665: ST_TO_ADDR
// end ;
41666: LD_VAR 0 2
41670: RET
// export function Join ( array , element ) ; begin
41671: LD_INT 0
41673: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41674: LD_ADDR_VAR 0 3
41678: PUSH
41679: LD_VAR 0 1
41683: PPUSH
41684: LD_VAR 0 1
41688: PUSH
41689: LD_INT 1
41691: PLUS
41692: PPUSH
41693: LD_VAR 0 2
41697: PPUSH
41698: CALL_OW 1
41702: ST_TO_ADDR
// end ;
41703: LD_VAR 0 3
41707: RET
// export function JoinUnion ( array , element ) ; begin
41708: LD_INT 0
41710: PPUSH
// result := array union element ;
41711: LD_ADDR_VAR 0 3
41715: PUSH
41716: LD_VAR 0 1
41720: PUSH
41721: LD_VAR 0 2
41725: UNION
41726: ST_TO_ADDR
// end ;
41727: LD_VAR 0 3
41731: RET
// export function GetBehemoths ( side ) ; begin
41732: LD_INT 0
41734: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
41735: LD_ADDR_VAR 0 2
41739: PUSH
41740: LD_INT 22
41742: PUSH
41743: LD_VAR 0 1
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 31
41754: PUSH
41755: LD_INT 25
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PPUSH
41766: CALL_OW 69
41770: ST_TO_ADDR
// end ;
41771: LD_VAR 0 2
41775: RET
// export function Shuffle ( array ) ; var i , index ; begin
41776: LD_INT 0
41778: PPUSH
41779: PPUSH
41780: PPUSH
// result := [ ] ;
41781: LD_ADDR_VAR 0 2
41785: PUSH
41786: EMPTY
41787: ST_TO_ADDR
// if not array then
41788: LD_VAR 0 1
41792: NOT
41793: IFFALSE 41797
// exit ;
41795: GO 41896
// Randomize ;
41797: CALL_OW 10
// for i = array downto 1 do
41801: LD_ADDR_VAR 0 3
41805: PUSH
41806: DOUBLE
41807: LD_VAR 0 1
41811: INC
41812: ST_TO_ADDR
41813: LD_INT 1
41815: PUSH
41816: FOR_DOWNTO
41817: IFFALSE 41894
// begin index := rand ( 1 , array ) ;
41819: LD_ADDR_VAR 0 4
41823: PUSH
41824: LD_INT 1
41826: PPUSH
41827: LD_VAR 0 1
41831: PPUSH
41832: CALL_OW 12
41836: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41837: LD_ADDR_VAR 0 2
41841: PUSH
41842: LD_VAR 0 2
41846: PPUSH
41847: LD_VAR 0 2
41851: PUSH
41852: LD_INT 1
41854: PLUS
41855: PPUSH
41856: LD_VAR 0 1
41860: PUSH
41861: LD_VAR 0 4
41865: ARRAY
41866: PPUSH
41867: CALL_OW 2
41871: ST_TO_ADDR
// array := Delete ( array , index ) ;
41872: LD_ADDR_VAR 0 1
41876: PUSH
41877: LD_VAR 0 1
41881: PPUSH
41882: LD_VAR 0 4
41886: PPUSH
41887: CALL_OW 3
41891: ST_TO_ADDR
// end ;
41892: GO 41816
41894: POP
41895: POP
// end ;
41896: LD_VAR 0 2
41900: RET
// export function GetBaseMaterials ( base ) ; begin
41901: LD_INT 0
41903: PPUSH
// result := [ 0 , 0 , 0 ] ;
41904: LD_ADDR_VAR 0 2
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: LIST
41922: ST_TO_ADDR
// if not base then
41923: LD_VAR 0 1
41927: NOT
41928: IFFALSE 41932
// exit ;
41930: GO 41981
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41932: LD_ADDR_VAR 0 2
41936: PUSH
41937: LD_VAR 0 1
41941: PPUSH
41942: LD_INT 1
41944: PPUSH
41945: CALL_OW 275
41949: PUSH
41950: LD_VAR 0 1
41954: PPUSH
41955: LD_INT 2
41957: PPUSH
41958: CALL_OW 275
41962: PUSH
41963: LD_VAR 0 1
41967: PPUSH
41968: LD_INT 3
41970: PPUSH
41971: CALL_OW 275
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: LIST
41980: ST_TO_ADDR
// end ;
41981: LD_VAR 0 2
41985: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41986: LD_INT 0
41988: PPUSH
41989: PPUSH
// result := array ;
41990: LD_ADDR_VAR 0 3
41994: PUSH
41995: LD_VAR 0 1
41999: ST_TO_ADDR
// if size >= result then
42000: LD_VAR 0 2
42004: PUSH
42005: LD_VAR 0 3
42009: GREATEREQUAL
42010: IFFALSE 42014
// exit ;
42012: GO 42064
// if size then
42014: LD_VAR 0 2
42018: IFFALSE 42064
// for i := array downto size do
42020: LD_ADDR_VAR 0 4
42024: PUSH
42025: DOUBLE
42026: LD_VAR 0 1
42030: INC
42031: ST_TO_ADDR
42032: LD_VAR 0 2
42036: PUSH
42037: FOR_DOWNTO
42038: IFFALSE 42062
// result := Delete ( result , result ) ;
42040: LD_ADDR_VAR 0 3
42044: PUSH
42045: LD_VAR 0 3
42049: PPUSH
42050: LD_VAR 0 3
42054: PPUSH
42055: CALL_OW 3
42059: ST_TO_ADDR
42060: GO 42037
42062: POP
42063: POP
// end ;
42064: LD_VAR 0 3
42068: RET
// export function ComExit ( unit ) ; var tmp ; begin
42069: LD_INT 0
42071: PPUSH
42072: PPUSH
// if not IsInUnit ( unit ) then
42073: LD_VAR 0 1
42077: PPUSH
42078: CALL_OW 310
42082: NOT
42083: IFFALSE 42087
// exit ;
42085: GO 42147
// tmp := IsInUnit ( unit ) ;
42087: LD_ADDR_VAR 0 3
42091: PUSH
42092: LD_VAR 0 1
42096: PPUSH
42097: CALL_OW 310
42101: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
42102: LD_VAR 0 3
42106: PPUSH
42107: CALL_OW 247
42111: PUSH
42112: LD_INT 2
42114: EQUAL
42115: IFFALSE 42128
// ComExitVehicle ( unit ) else
42117: LD_VAR 0 1
42121: PPUSH
42122: CALL_OW 121
42126: GO 42137
// ComExitBuilding ( unit ) ;
42128: LD_VAR 0 1
42132: PPUSH
42133: CALL_OW 122
// result := tmp ;
42137: LD_ADDR_VAR 0 2
42141: PUSH
42142: LD_VAR 0 3
42146: ST_TO_ADDR
// end ;
42147: LD_VAR 0 2
42151: RET
// export function ComExitAll ( units ) ; var i ; begin
42152: LD_INT 0
42154: PPUSH
42155: PPUSH
// if not units then
42156: LD_VAR 0 1
42160: NOT
42161: IFFALSE 42165
// exit ;
42163: GO 42191
// for i in units do
42165: LD_ADDR_VAR 0 3
42169: PUSH
42170: LD_VAR 0 1
42174: PUSH
42175: FOR_IN
42176: IFFALSE 42189
// ComExit ( i ) ;
42178: LD_VAR 0 3
42182: PPUSH
42183: CALL 42069 0 1
42187: GO 42175
42189: POP
42190: POP
// end ;
42191: LD_VAR 0 2
42195: RET
// export function ResetHc ; begin
42196: LD_INT 0
42198: PPUSH
// InitHc ;
42199: CALL_OW 19
// hc_importance := 0 ;
42203: LD_ADDR_OWVAR 32
42207: PUSH
42208: LD_INT 0
42210: ST_TO_ADDR
// end ;
42211: LD_VAR 0 1
42215: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
42216: LD_INT 0
42218: PPUSH
42219: PPUSH
42220: PPUSH
// _x := ( x1 + x2 ) div 2 ;
42221: LD_ADDR_VAR 0 6
42225: PUSH
42226: LD_VAR 0 1
42230: PUSH
42231: LD_VAR 0 3
42235: PLUS
42236: PUSH
42237: LD_INT 2
42239: DIV
42240: ST_TO_ADDR
// if _x < 0 then
42241: LD_VAR 0 6
42245: PUSH
42246: LD_INT 0
42248: LESS
42249: IFFALSE 42266
// _x := _x * - 1 ;
42251: LD_ADDR_VAR 0 6
42255: PUSH
42256: LD_VAR 0 6
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: MUL
42265: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
42266: LD_ADDR_VAR 0 7
42270: PUSH
42271: LD_VAR 0 2
42275: PUSH
42276: LD_VAR 0 4
42280: PLUS
42281: PUSH
42282: LD_INT 2
42284: DIV
42285: ST_TO_ADDR
// if _y < 0 then
42286: LD_VAR 0 7
42290: PUSH
42291: LD_INT 0
42293: LESS
42294: IFFALSE 42311
// _y := _y * - 1 ;
42296: LD_ADDR_VAR 0 7
42300: PUSH
42301: LD_VAR 0 7
42305: PUSH
42306: LD_INT 1
42308: NEG
42309: MUL
42310: ST_TO_ADDR
// result := [ _x , _y ] ;
42311: LD_ADDR_VAR 0 5
42315: PUSH
42316: LD_VAR 0 6
42320: PUSH
42321: LD_VAR 0 7
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: ST_TO_ADDR
// end ;
42330: LD_VAR 0 5
42334: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
42335: LD_INT 0
42337: PPUSH
42338: PPUSH
42339: PPUSH
42340: PPUSH
// task := GetTaskList ( unit ) ;
42341: LD_ADDR_VAR 0 7
42345: PUSH
42346: LD_VAR 0 1
42350: PPUSH
42351: CALL_OW 437
42355: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
42356: LD_VAR 0 7
42360: NOT
42361: PUSH
42362: LD_VAR 0 1
42366: PPUSH
42367: LD_VAR 0 2
42371: PPUSH
42372: CALL_OW 308
42376: NOT
42377: AND
42378: IFFALSE 42382
// exit ;
42380: GO 42500
// if IsInArea ( unit , area ) then
42382: LD_VAR 0 1
42386: PPUSH
42387: LD_VAR 0 2
42391: PPUSH
42392: CALL_OW 308
42396: IFFALSE 42414
// begin ComMoveToArea ( unit , goAway ) ;
42398: LD_VAR 0 1
42402: PPUSH
42403: LD_VAR 0 3
42407: PPUSH
42408: CALL_OW 113
// exit ;
42412: GO 42500
// end ; if task [ 1 ] [ 1 ] <> M then
42414: LD_VAR 0 7
42418: PUSH
42419: LD_INT 1
42421: ARRAY
42422: PUSH
42423: LD_INT 1
42425: ARRAY
42426: PUSH
42427: LD_STRING M
42429: NONEQUAL
42430: IFFALSE 42434
// exit ;
42432: GO 42500
// x := task [ 1 ] [ 2 ] ;
42434: LD_ADDR_VAR 0 5
42438: PUSH
42439: LD_VAR 0 7
42443: PUSH
42444: LD_INT 1
42446: ARRAY
42447: PUSH
42448: LD_INT 2
42450: ARRAY
42451: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
42452: LD_ADDR_VAR 0 6
42456: PUSH
42457: LD_VAR 0 7
42461: PUSH
42462: LD_INT 1
42464: ARRAY
42465: PUSH
42466: LD_INT 3
42468: ARRAY
42469: ST_TO_ADDR
// if InArea ( x , y , area ) then
42470: LD_VAR 0 5
42474: PPUSH
42475: LD_VAR 0 6
42479: PPUSH
42480: LD_VAR 0 2
42484: PPUSH
42485: CALL_OW 309
42489: IFFALSE 42500
// ComStop ( unit ) ;
42491: LD_VAR 0 1
42495: PPUSH
42496: CALL_OW 141
// end ;
42500: LD_VAR 0 4
42504: RET
// export function Abs ( value ) ; begin
42505: LD_INT 0
42507: PPUSH
// result := value ;
42508: LD_ADDR_VAR 0 2
42512: PUSH
42513: LD_VAR 0 1
42517: ST_TO_ADDR
// if value < 0 then
42518: LD_VAR 0 1
42522: PUSH
42523: LD_INT 0
42525: LESS
42526: IFFALSE 42543
// result := value * - 1 ;
42528: LD_ADDR_VAR 0 2
42532: PUSH
42533: LD_VAR 0 1
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: MUL
42542: ST_TO_ADDR
// end ;
42543: LD_VAR 0 2
42547: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42548: LD_INT 0
42550: PPUSH
42551: PPUSH
42552: PPUSH
42553: PPUSH
42554: PPUSH
42555: PPUSH
42556: PPUSH
42557: PPUSH
// if not unit or not building then
42558: LD_VAR 0 1
42562: NOT
42563: PUSH
42564: LD_VAR 0 2
42568: NOT
42569: OR
42570: IFFALSE 42574
// exit ;
42572: GO 42800
// x := GetX ( building ) ;
42574: LD_ADDR_VAR 0 4
42578: PUSH
42579: LD_VAR 0 2
42583: PPUSH
42584: CALL_OW 250
42588: ST_TO_ADDR
// y := GetY ( building ) ;
42589: LD_ADDR_VAR 0 6
42593: PUSH
42594: LD_VAR 0 2
42598: PPUSH
42599: CALL_OW 251
42603: ST_TO_ADDR
// d := GetDir ( building ) ;
42604: LD_ADDR_VAR 0 8
42608: PUSH
42609: LD_VAR 0 2
42613: PPUSH
42614: CALL_OW 254
42618: ST_TO_ADDR
// r := 4 ;
42619: LD_ADDR_VAR 0 9
42623: PUSH
42624: LD_INT 4
42626: ST_TO_ADDR
// for i := 1 to 5 do
42627: LD_ADDR_VAR 0 10
42631: PUSH
42632: DOUBLE
42633: LD_INT 1
42635: DEC
42636: ST_TO_ADDR
42637: LD_INT 5
42639: PUSH
42640: FOR_TO
42641: IFFALSE 42798
// begin _x := ShiftX ( x , d , r + i ) ;
42643: LD_ADDR_VAR 0 5
42647: PUSH
42648: LD_VAR 0 4
42652: PPUSH
42653: LD_VAR 0 8
42657: PPUSH
42658: LD_VAR 0 9
42662: PUSH
42663: LD_VAR 0 10
42667: PLUS
42668: PPUSH
42669: CALL_OW 272
42673: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42674: LD_ADDR_VAR 0 7
42678: PUSH
42679: LD_VAR 0 6
42683: PPUSH
42684: LD_VAR 0 8
42688: PPUSH
42689: LD_VAR 0 9
42693: PUSH
42694: LD_VAR 0 10
42698: PLUS
42699: PPUSH
42700: CALL_OW 273
42704: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42705: LD_VAR 0 5
42709: PPUSH
42710: LD_VAR 0 7
42714: PPUSH
42715: CALL_OW 488
42719: PUSH
42720: LD_VAR 0 5
42724: PPUSH
42725: LD_VAR 0 7
42729: PPUSH
42730: CALL_OW 428
42734: PPUSH
42735: CALL_OW 247
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: IN
42750: NOT
42751: AND
42752: IFFALSE 42796
// begin ComMoveXY ( unit , _x , _y ) ;
42754: LD_VAR 0 1
42758: PPUSH
42759: LD_VAR 0 5
42763: PPUSH
42764: LD_VAR 0 7
42768: PPUSH
42769: CALL_OW 111
// result := [ _x , _y ] ;
42773: LD_ADDR_VAR 0 3
42777: PUSH
42778: LD_VAR 0 5
42782: PUSH
42783: LD_VAR 0 7
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: ST_TO_ADDR
// exit ;
42792: POP
42793: POP
42794: GO 42800
// end ; end ;
42796: GO 42640
42798: POP
42799: POP
// end ;
42800: LD_VAR 0 3
42804: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42805: LD_INT 0
42807: PPUSH
42808: PPUSH
42809: PPUSH
// result := 0 ;
42810: LD_ADDR_VAR 0 3
42814: PUSH
42815: LD_INT 0
42817: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42818: LD_VAR 0 1
42822: PUSH
42823: LD_INT 0
42825: LESS
42826: PUSH
42827: LD_VAR 0 1
42831: PUSH
42832: LD_INT 8
42834: GREATER
42835: OR
42836: PUSH
42837: LD_VAR 0 2
42841: PUSH
42842: LD_INT 0
42844: LESS
42845: OR
42846: PUSH
42847: LD_VAR 0 2
42851: PUSH
42852: LD_INT 8
42854: GREATER
42855: OR
42856: IFFALSE 42860
// exit ;
42858: GO 42935
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42860: LD_ADDR_VAR 0 4
42864: PUSH
42865: LD_INT 22
42867: PUSH
42868: LD_VAR 0 2
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PPUSH
42877: CALL_OW 69
42881: PUSH
42882: FOR_IN
42883: IFFALSE 42933
// begin un := UnitShoot ( i ) ;
42885: LD_ADDR_VAR 0 5
42889: PUSH
42890: LD_VAR 0 4
42894: PPUSH
42895: CALL_OW 504
42899: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42900: LD_VAR 0 5
42904: PPUSH
42905: CALL_OW 255
42909: PUSH
42910: LD_VAR 0 1
42914: EQUAL
42915: IFFALSE 42931
// begin result := un ;
42917: LD_ADDR_VAR 0 3
42921: PUSH
42922: LD_VAR 0 5
42926: ST_TO_ADDR
// exit ;
42927: POP
42928: POP
42929: GO 42935
// end ; end ;
42931: GO 42882
42933: POP
42934: POP
// end ;
42935: LD_VAR 0 3
42939: RET
// export function GetCargoBay ( units ) ; begin
42940: LD_INT 0
42942: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42943: LD_ADDR_VAR 0 2
42947: PUSH
42948: LD_VAR 0 1
42952: PPUSH
42953: LD_INT 2
42955: PUSH
42956: LD_INT 34
42958: PUSH
42959: LD_INT 12
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 34
42968: PUSH
42969: LD_INT 51
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 34
42978: PUSH
42979: LD_INT 32
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 34
42988: PUSH
42989: LD_EXP 45
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: PPUSH
43005: CALL_OW 72
43009: ST_TO_ADDR
// end ;
43010: LD_VAR 0 2
43014: RET
// export function Negate ( value ) ; begin
43015: LD_INT 0
43017: PPUSH
// result := not value ;
43018: LD_ADDR_VAR 0 2
43022: PUSH
43023: LD_VAR 0 1
43027: NOT
43028: ST_TO_ADDR
// end ;
43029: LD_VAR 0 2
43033: RET
// export function Inc ( value ) ; begin
43034: LD_INT 0
43036: PPUSH
// result := value + 1 ;
43037: LD_ADDR_VAR 0 2
43041: PUSH
43042: LD_VAR 0 1
43046: PUSH
43047: LD_INT 1
43049: PLUS
43050: ST_TO_ADDR
// end ;
43051: LD_VAR 0 2
43055: RET
// export function Dec ( value ) ; begin
43056: LD_INT 0
43058: PPUSH
// result := value - 1 ;
43059: LD_ADDR_VAR 0 2
43063: PUSH
43064: LD_VAR 0 1
43068: PUSH
43069: LD_INT 1
43071: MINUS
43072: ST_TO_ADDR
// end ;
43073: LD_VAR 0 2
43077: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
43078: LD_INT 0
43080: PPUSH
43081: PPUSH
43082: PPUSH
43083: PPUSH
43084: PPUSH
43085: PPUSH
43086: PPUSH
43087: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
43088: LD_VAR 0 1
43092: PPUSH
43093: LD_VAR 0 2
43097: PPUSH
43098: CALL_OW 488
43102: NOT
43103: PUSH
43104: LD_VAR 0 3
43108: PPUSH
43109: LD_VAR 0 4
43113: PPUSH
43114: CALL_OW 488
43118: NOT
43119: OR
43120: IFFALSE 43133
// begin result := - 1 ;
43122: LD_ADDR_VAR 0 5
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: ST_TO_ADDR
// exit ;
43131: GO 43368
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
43133: LD_ADDR_VAR 0 12
43137: PUSH
43138: LD_VAR 0 1
43142: PPUSH
43143: LD_VAR 0 2
43147: PPUSH
43148: LD_VAR 0 3
43152: PPUSH
43153: LD_VAR 0 4
43157: PPUSH
43158: CALL 42216 0 4
43162: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
43163: LD_ADDR_VAR 0 11
43167: PUSH
43168: LD_VAR 0 1
43172: PPUSH
43173: LD_VAR 0 2
43177: PPUSH
43178: LD_VAR 0 12
43182: PUSH
43183: LD_INT 1
43185: ARRAY
43186: PPUSH
43187: LD_VAR 0 12
43191: PUSH
43192: LD_INT 2
43194: ARRAY
43195: PPUSH
43196: CALL_OW 298
43200: ST_TO_ADDR
// distance := 9999 ;
43201: LD_ADDR_VAR 0 10
43205: PUSH
43206: LD_INT 9999
43208: ST_TO_ADDR
// for i := 0 to 5 do
43209: LD_ADDR_VAR 0 6
43213: PUSH
43214: DOUBLE
43215: LD_INT 0
43217: DEC
43218: ST_TO_ADDR
43219: LD_INT 5
43221: PUSH
43222: FOR_TO
43223: IFFALSE 43366
// begin _x := ShiftX ( x1 , i , centerDist ) ;
43225: LD_ADDR_VAR 0 7
43229: PUSH
43230: LD_VAR 0 1
43234: PPUSH
43235: LD_VAR 0 6
43239: PPUSH
43240: LD_VAR 0 11
43244: PPUSH
43245: CALL_OW 272
43249: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
43250: LD_ADDR_VAR 0 8
43254: PUSH
43255: LD_VAR 0 2
43259: PPUSH
43260: LD_VAR 0 6
43264: PPUSH
43265: LD_VAR 0 11
43269: PPUSH
43270: CALL_OW 273
43274: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43275: LD_VAR 0 7
43279: PPUSH
43280: LD_VAR 0 8
43284: PPUSH
43285: CALL_OW 488
43289: NOT
43290: IFFALSE 43294
// continue ;
43292: GO 43222
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
43294: LD_ADDR_VAR 0 9
43298: PUSH
43299: LD_VAR 0 12
43303: PUSH
43304: LD_INT 1
43306: ARRAY
43307: PPUSH
43308: LD_VAR 0 12
43312: PUSH
43313: LD_INT 2
43315: ARRAY
43316: PPUSH
43317: LD_VAR 0 7
43321: PPUSH
43322: LD_VAR 0 8
43326: PPUSH
43327: CALL_OW 298
43331: ST_TO_ADDR
// if tmp < distance then
43332: LD_VAR 0 9
43336: PUSH
43337: LD_VAR 0 10
43341: LESS
43342: IFFALSE 43364
// begin result := i ;
43344: LD_ADDR_VAR 0 5
43348: PUSH
43349: LD_VAR 0 6
43353: ST_TO_ADDR
// distance := tmp ;
43354: LD_ADDR_VAR 0 10
43358: PUSH
43359: LD_VAR 0 9
43363: ST_TO_ADDR
// end ; end ;
43364: GO 43222
43366: POP
43367: POP
// end ;
43368: LD_VAR 0 5
43372: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43373: LD_INT 0
43375: PPUSH
43376: PPUSH
// if not driver or not IsInUnit ( driver ) then
43377: LD_VAR 0 1
43381: NOT
43382: PUSH
43383: LD_VAR 0 1
43387: PPUSH
43388: CALL_OW 310
43392: NOT
43393: OR
43394: IFFALSE 43398
// exit ;
43396: GO 43488
// vehicle := IsInUnit ( driver ) ;
43398: LD_ADDR_VAR 0 3
43402: PUSH
43403: LD_VAR 0 1
43407: PPUSH
43408: CALL_OW 310
43412: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43413: LD_VAR 0 1
43417: PPUSH
43418: LD_STRING \
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: PUSH
43448: LD_STRING E
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 0
43456: PUSH
43457: LD_VAR 0 3
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PPUSH
43484: CALL_OW 446
// end ;
43488: LD_VAR 0 2
43492: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43493: LD_INT 0
43495: PPUSH
43496: PPUSH
// if not driver or not IsInUnit ( driver ) then
43497: LD_VAR 0 1
43501: NOT
43502: PUSH
43503: LD_VAR 0 1
43507: PPUSH
43508: CALL_OW 310
43512: NOT
43513: OR
43514: IFFALSE 43518
// exit ;
43516: GO 43608
// vehicle := IsInUnit ( driver ) ;
43518: LD_ADDR_VAR 0 3
43522: PUSH
43523: LD_VAR 0 1
43527: PPUSH
43528: CALL_OW 310
43532: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43533: LD_VAR 0 1
43537: PPUSH
43538: LD_STRING \
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: PUSH
43568: LD_STRING E
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: LD_VAR 0 3
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PPUSH
43604: CALL_OW 447
// end ;
43608: LD_VAR 0 2
43612: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43613: LD_INT 0
43615: PPUSH
43616: PPUSH
43617: PPUSH
// tmp := [ ] ;
43618: LD_ADDR_VAR 0 5
43622: PUSH
43623: EMPTY
43624: ST_TO_ADDR
// for i in units do
43625: LD_ADDR_VAR 0 4
43629: PUSH
43630: LD_VAR 0 1
43634: PUSH
43635: FOR_IN
43636: IFFALSE 43674
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43638: LD_ADDR_VAR 0 5
43642: PUSH
43643: LD_VAR 0 5
43647: PPUSH
43648: LD_VAR 0 5
43652: PUSH
43653: LD_INT 1
43655: PLUS
43656: PPUSH
43657: LD_VAR 0 4
43661: PPUSH
43662: CALL_OW 256
43666: PPUSH
43667: CALL_OW 2
43671: ST_TO_ADDR
43672: GO 43635
43674: POP
43675: POP
// if not tmp then
43676: LD_VAR 0 5
43680: NOT
43681: IFFALSE 43685
// exit ;
43683: GO 43733
// if asc then
43685: LD_VAR 0 2
43689: IFFALSE 43713
// result := SortListByListAsc ( units , tmp ) else
43691: LD_ADDR_VAR 0 3
43695: PUSH
43696: LD_VAR 0 1
43700: PPUSH
43701: LD_VAR 0 5
43705: PPUSH
43706: CALL_OW 76
43710: ST_TO_ADDR
43711: GO 43733
// result := SortListByListDesc ( units , tmp ) ;
43713: LD_ADDR_VAR 0 3
43717: PUSH
43718: LD_VAR 0 1
43722: PPUSH
43723: LD_VAR 0 5
43727: PPUSH
43728: CALL_OW 77
43732: ST_TO_ADDR
// end ;
43733: LD_VAR 0 3
43737: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43738: LD_INT 0
43740: PPUSH
43741: PPUSH
// task := GetTaskList ( mech ) ;
43742: LD_ADDR_VAR 0 4
43746: PUSH
43747: LD_VAR 0 1
43751: PPUSH
43752: CALL_OW 437
43756: ST_TO_ADDR
// if not task then
43757: LD_VAR 0 4
43761: NOT
43762: IFFALSE 43766
// exit ;
43764: GO 43808
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43766: LD_ADDR_VAR 0 3
43770: PUSH
43771: LD_VAR 0 4
43775: PUSH
43776: LD_INT 1
43778: ARRAY
43779: PUSH
43780: LD_INT 1
43782: ARRAY
43783: PUSH
43784: LD_STRING r
43786: EQUAL
43787: PUSH
43788: LD_VAR 0 4
43792: PUSH
43793: LD_INT 1
43795: ARRAY
43796: PUSH
43797: LD_INT 4
43799: ARRAY
43800: PUSH
43801: LD_VAR 0 2
43805: EQUAL
43806: AND
43807: ST_TO_ADDR
// end ;
43808: LD_VAR 0 3
43812: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43813: LD_INT 0
43815: PPUSH
// SetDir ( unit , d ) ;
43816: LD_VAR 0 1
43820: PPUSH
43821: LD_VAR 0 4
43825: PPUSH
43826: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
43830: LD_VAR 0 1
43834: PPUSH
43835: LD_VAR 0 2
43839: PPUSH
43840: LD_VAR 0 3
43844: PPUSH
43845: LD_VAR 0 5
43849: PPUSH
43850: CALL_OW 48
// end ;
43854: LD_VAR 0 6
43858: RET
// export function ToNaturalNumber ( number ) ; begin
43859: LD_INT 0
43861: PPUSH
// result := number div 1 ;
43862: LD_ADDR_VAR 0 2
43866: PUSH
43867: LD_VAR 0 1
43871: PUSH
43872: LD_INT 1
43874: DIV
43875: ST_TO_ADDR
// if number < 0 then
43876: LD_VAR 0 1
43880: PUSH
43881: LD_INT 0
43883: LESS
43884: IFFALSE 43894
// result := 0 ;
43886: LD_ADDR_VAR 0 2
43890: PUSH
43891: LD_INT 0
43893: ST_TO_ADDR
// end ;
43894: LD_VAR 0 2
43898: RET
// export function SortByClass ( units , class ) ; var un ; begin
43899: LD_INT 0
43901: PPUSH
43902: PPUSH
// if not units or not class then
43903: LD_VAR 0 1
43907: NOT
43908: PUSH
43909: LD_VAR 0 2
43913: NOT
43914: OR
43915: IFFALSE 43919
// exit ;
43917: GO 44014
// result := [ ] ;
43919: LD_ADDR_VAR 0 3
43923: PUSH
43924: EMPTY
43925: ST_TO_ADDR
// for un in units do
43926: LD_ADDR_VAR 0 4
43930: PUSH
43931: LD_VAR 0 1
43935: PUSH
43936: FOR_IN
43937: IFFALSE 44012
// if GetClass ( un ) = class then
43939: LD_VAR 0 4
43943: PPUSH
43944: CALL_OW 257
43948: PUSH
43949: LD_VAR 0 2
43953: EQUAL
43954: IFFALSE 43981
// result := Insert ( result , 1 , un ) else
43956: LD_ADDR_VAR 0 3
43960: PUSH
43961: LD_VAR 0 3
43965: PPUSH
43966: LD_INT 1
43968: PPUSH
43969: LD_VAR 0 4
43973: PPUSH
43974: CALL_OW 2
43978: ST_TO_ADDR
43979: GO 44010
// result := Replace ( result , result + 1 , un ) ;
43981: LD_ADDR_VAR 0 3
43985: PUSH
43986: LD_VAR 0 3
43990: PPUSH
43991: LD_VAR 0 3
43995: PUSH
43996: LD_INT 1
43998: PLUS
43999: PPUSH
44000: LD_VAR 0 4
44004: PPUSH
44005: CALL_OW 1
44009: ST_TO_ADDR
44010: GO 43936
44012: POP
44013: POP
// end ;
44014: LD_VAR 0 3
44018: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
44019: LD_INT 0
44021: PPUSH
44022: PPUSH
44023: PPUSH
44024: PPUSH
44025: PPUSH
44026: PPUSH
44027: PPUSH
// result := [ ] ;
44028: LD_ADDR_VAR 0 4
44032: PUSH
44033: EMPTY
44034: ST_TO_ADDR
// if x - r < 0 then
44035: LD_VAR 0 1
44039: PUSH
44040: LD_VAR 0 3
44044: MINUS
44045: PUSH
44046: LD_INT 0
44048: LESS
44049: IFFALSE 44061
// min_x := 0 else
44051: LD_ADDR_VAR 0 8
44055: PUSH
44056: LD_INT 0
44058: ST_TO_ADDR
44059: GO 44077
// min_x := x - r ;
44061: LD_ADDR_VAR 0 8
44065: PUSH
44066: LD_VAR 0 1
44070: PUSH
44071: LD_VAR 0 3
44075: MINUS
44076: ST_TO_ADDR
// if y - r < 0 then
44077: LD_VAR 0 2
44081: PUSH
44082: LD_VAR 0 3
44086: MINUS
44087: PUSH
44088: LD_INT 0
44090: LESS
44091: IFFALSE 44103
// min_y := 0 else
44093: LD_ADDR_VAR 0 7
44097: PUSH
44098: LD_INT 0
44100: ST_TO_ADDR
44101: GO 44119
// min_y := y - r ;
44103: LD_ADDR_VAR 0 7
44107: PUSH
44108: LD_VAR 0 2
44112: PUSH
44113: LD_VAR 0 3
44117: MINUS
44118: ST_TO_ADDR
// max_x := x + r ;
44119: LD_ADDR_VAR 0 9
44123: PUSH
44124: LD_VAR 0 1
44128: PUSH
44129: LD_VAR 0 3
44133: PLUS
44134: ST_TO_ADDR
// max_y := y + r ;
44135: LD_ADDR_VAR 0 10
44139: PUSH
44140: LD_VAR 0 2
44144: PUSH
44145: LD_VAR 0 3
44149: PLUS
44150: ST_TO_ADDR
// for _x = min_x to max_x do
44151: LD_ADDR_VAR 0 5
44155: PUSH
44156: DOUBLE
44157: LD_VAR 0 8
44161: DEC
44162: ST_TO_ADDR
44163: LD_VAR 0 9
44167: PUSH
44168: FOR_TO
44169: IFFALSE 44270
// for _y = min_y to max_y do
44171: LD_ADDR_VAR 0 6
44175: PUSH
44176: DOUBLE
44177: LD_VAR 0 7
44181: DEC
44182: ST_TO_ADDR
44183: LD_VAR 0 10
44187: PUSH
44188: FOR_TO
44189: IFFALSE 44266
// begin if not ValidHex ( _x , _y ) then
44191: LD_VAR 0 5
44195: PPUSH
44196: LD_VAR 0 6
44200: PPUSH
44201: CALL_OW 488
44205: NOT
44206: IFFALSE 44210
// continue ;
44208: GO 44188
// if GetResourceTypeXY ( _x , _y ) then
44210: LD_VAR 0 5
44214: PPUSH
44215: LD_VAR 0 6
44219: PPUSH
44220: CALL_OW 283
44224: IFFALSE 44264
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
44226: LD_ADDR_VAR 0 4
44230: PUSH
44231: LD_VAR 0 4
44235: PPUSH
44236: LD_VAR 0 4
44240: PUSH
44241: LD_INT 1
44243: PLUS
44244: PPUSH
44245: LD_VAR 0 5
44249: PUSH
44250: LD_VAR 0 6
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PPUSH
44259: CALL_OW 1
44263: ST_TO_ADDR
// end ;
44264: GO 44188
44266: POP
44267: POP
44268: GO 44168
44270: POP
44271: POP
// end ;
44272: LD_VAR 0 4
44276: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
44277: LD_INT 0
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
// if not units then
44287: LD_VAR 0 1
44291: NOT
44292: IFFALSE 44296
// exit ;
44294: GO 44822
// result := UnitFilter ( units , [ f_ok ] ) ;
44296: LD_ADDR_VAR 0 3
44300: PUSH
44301: LD_VAR 0 1
44305: PPUSH
44306: LD_INT 50
44308: PUSH
44309: EMPTY
44310: LIST
44311: PPUSH
44312: CALL_OW 72
44316: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44317: LD_ADDR_VAR 0 8
44321: PUSH
44322: LD_VAR 0 1
44326: PUSH
44327: LD_INT 1
44329: ARRAY
44330: PPUSH
44331: CALL_OW 255
44335: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44336: LD_ADDR_VAR 0 10
44340: PUSH
44341: LD_INT 29
44343: PUSH
44344: LD_EXP 48
44348: PUSH
44349: LD_INT 49
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: LIST
44356: ST_TO_ADDR
// if not result then
44357: LD_VAR 0 3
44361: NOT
44362: IFFALSE 44366
// exit ;
44364: GO 44822
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44366: LD_ADDR_VAR 0 5
44370: PUSH
44371: LD_INT 81
44373: PUSH
44374: LD_VAR 0 8
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PPUSH
44383: CALL_OW 69
44387: ST_TO_ADDR
// for i in result do
44388: LD_ADDR_VAR 0 4
44392: PUSH
44393: LD_VAR 0 3
44397: PUSH
44398: FOR_IN
44399: IFFALSE 44820
// begin tag := GetTag ( i ) + 1 ;
44401: LD_ADDR_VAR 0 9
44405: PUSH
44406: LD_VAR 0 4
44410: PPUSH
44411: CALL_OW 110
44415: PUSH
44416: LD_INT 1
44418: PLUS
44419: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
44420: LD_ADDR_VAR 0 7
44424: PUSH
44425: LD_VAR 0 4
44429: PPUSH
44430: CALL_OW 250
44434: PPUSH
44435: LD_VAR 0 4
44439: PPUSH
44440: CALL_OW 251
44444: PPUSH
44445: LD_INT 6
44447: PPUSH
44448: CALL 44019 0 3
44452: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
44453: LD_VAR 0 4
44457: PPUSH
44458: CALL_OW 247
44462: PUSH
44463: LD_INT 2
44465: EQUAL
44466: PUSH
44467: LD_VAR 0 7
44471: AND
44472: PUSH
44473: LD_VAR 0 4
44477: PPUSH
44478: CALL_OW 264
44482: PUSH
44483: LD_VAR 0 10
44487: IN
44488: NOT
44489: AND
44490: IFFALSE 44529
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44492: LD_VAR 0 4
44496: PPUSH
44497: LD_VAR 0 7
44501: PUSH
44502: LD_INT 1
44504: ARRAY
44505: PUSH
44506: LD_INT 1
44508: ARRAY
44509: PPUSH
44510: LD_VAR 0 7
44514: PUSH
44515: LD_INT 1
44517: ARRAY
44518: PUSH
44519: LD_INT 2
44521: ARRAY
44522: PPUSH
44523: CALL_OW 116
44527: GO 44818
// if path > tag then
44529: LD_VAR 0 2
44533: PUSH
44534: LD_VAR 0 9
44538: GREATER
44539: IFFALSE 44747
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44541: LD_ADDR_VAR 0 6
44545: PUSH
44546: LD_VAR 0 5
44550: PPUSH
44551: LD_INT 91
44553: PUSH
44554: LD_VAR 0 4
44558: PUSH
44559: LD_INT 8
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: LIST
44566: PPUSH
44567: CALL_OW 72
44571: ST_TO_ADDR
// if nearEnemy then
44572: LD_VAR 0 6
44576: IFFALSE 44645
// begin if GetWeapon ( i ) = ru_time_lapser then
44578: LD_VAR 0 4
44582: PPUSH
44583: CALL_OW 264
44587: PUSH
44588: LD_INT 49
44590: EQUAL
44591: IFFALSE 44619
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44593: LD_VAR 0 4
44597: PPUSH
44598: LD_VAR 0 6
44602: PPUSH
44603: LD_VAR 0 4
44607: PPUSH
44608: CALL_OW 74
44612: PPUSH
44613: CALL_OW 112
44617: GO 44643
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44619: LD_VAR 0 4
44623: PPUSH
44624: LD_VAR 0 6
44628: PPUSH
44629: LD_VAR 0 4
44633: PPUSH
44634: CALL_OW 74
44638: PPUSH
44639: CALL_OW 115
// end else
44643: GO 44745
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44645: LD_VAR 0 4
44649: PPUSH
44650: LD_VAR 0 2
44654: PUSH
44655: LD_VAR 0 9
44659: ARRAY
44660: PUSH
44661: LD_INT 1
44663: ARRAY
44664: PPUSH
44665: LD_VAR 0 2
44669: PUSH
44670: LD_VAR 0 9
44674: ARRAY
44675: PUSH
44676: LD_INT 2
44678: ARRAY
44679: PPUSH
44680: CALL_OW 297
44684: PUSH
44685: LD_INT 6
44687: GREATER
44688: IFFALSE 44731
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44690: LD_VAR 0 4
44694: PPUSH
44695: LD_VAR 0 2
44699: PUSH
44700: LD_VAR 0 9
44704: ARRAY
44705: PUSH
44706: LD_INT 1
44708: ARRAY
44709: PPUSH
44710: LD_VAR 0 2
44714: PUSH
44715: LD_VAR 0 9
44719: ARRAY
44720: PUSH
44721: LD_INT 2
44723: ARRAY
44724: PPUSH
44725: CALL_OW 114
44729: GO 44745
// SetTag ( i , tag ) ;
44731: LD_VAR 0 4
44735: PPUSH
44736: LD_VAR 0 9
44740: PPUSH
44741: CALL_OW 109
// end else
44745: GO 44818
// if enemy then
44747: LD_VAR 0 5
44751: IFFALSE 44818
// begin if GetWeapon ( i ) = ru_time_lapser then
44753: LD_VAR 0 4
44757: PPUSH
44758: CALL_OW 264
44762: PUSH
44763: LD_INT 49
44765: EQUAL
44766: IFFALSE 44794
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44768: LD_VAR 0 4
44772: PPUSH
44773: LD_VAR 0 5
44777: PPUSH
44778: LD_VAR 0 4
44782: PPUSH
44783: CALL_OW 74
44787: PPUSH
44788: CALL_OW 112
44792: GO 44818
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44794: LD_VAR 0 4
44798: PPUSH
44799: LD_VAR 0 5
44803: PPUSH
44804: LD_VAR 0 4
44808: PPUSH
44809: CALL_OW 74
44813: PPUSH
44814: CALL_OW 115
// end ; end ;
44818: GO 44398
44820: POP
44821: POP
// end ;
44822: LD_VAR 0 3
44826: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44827: LD_INT 0
44829: PPUSH
44830: PPUSH
44831: PPUSH
// if not unit or IsInUnit ( unit ) then
44832: LD_VAR 0 1
44836: NOT
44837: PUSH
44838: LD_VAR 0 1
44842: PPUSH
44843: CALL_OW 310
44847: OR
44848: IFFALSE 44852
// exit ;
44850: GO 44943
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44852: LD_ADDR_VAR 0 4
44856: PUSH
44857: LD_VAR 0 1
44861: PPUSH
44862: CALL_OW 250
44866: PPUSH
44867: LD_VAR 0 2
44871: PPUSH
44872: LD_INT 1
44874: PPUSH
44875: CALL_OW 272
44879: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44880: LD_ADDR_VAR 0 5
44884: PUSH
44885: LD_VAR 0 1
44889: PPUSH
44890: CALL_OW 251
44894: PPUSH
44895: LD_VAR 0 2
44899: PPUSH
44900: LD_INT 1
44902: PPUSH
44903: CALL_OW 273
44907: ST_TO_ADDR
// if ValidHex ( x , y ) then
44908: LD_VAR 0 4
44912: PPUSH
44913: LD_VAR 0 5
44917: PPUSH
44918: CALL_OW 488
44922: IFFALSE 44943
// ComTurnXY ( unit , x , y ) ;
44924: LD_VAR 0 1
44928: PPUSH
44929: LD_VAR 0 4
44933: PPUSH
44934: LD_VAR 0 5
44938: PPUSH
44939: CALL_OW 118
// end ;
44943: LD_VAR 0 3
44947: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44948: LD_INT 0
44950: PPUSH
44951: PPUSH
// result := false ;
44952: LD_ADDR_VAR 0 3
44956: PUSH
44957: LD_INT 0
44959: ST_TO_ADDR
// if not units then
44960: LD_VAR 0 2
44964: NOT
44965: IFFALSE 44969
// exit ;
44967: GO 45014
// for i in units do
44969: LD_ADDR_VAR 0 4
44973: PUSH
44974: LD_VAR 0 2
44978: PUSH
44979: FOR_IN
44980: IFFALSE 45012
// if See ( side , i ) then
44982: LD_VAR 0 1
44986: PPUSH
44987: LD_VAR 0 4
44991: PPUSH
44992: CALL_OW 292
44996: IFFALSE 45010
// begin result := true ;
44998: LD_ADDR_VAR 0 3
45002: PUSH
45003: LD_INT 1
45005: ST_TO_ADDR
// exit ;
45006: POP
45007: POP
45008: GO 45014
// end ;
45010: GO 44979
45012: POP
45013: POP
// end ;
45014: LD_VAR 0 3
45018: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
45019: LD_INT 0
45021: PPUSH
45022: PPUSH
45023: PPUSH
45024: PPUSH
// if not unit or not points then
45025: LD_VAR 0 1
45029: NOT
45030: PUSH
45031: LD_VAR 0 2
45035: NOT
45036: OR
45037: IFFALSE 45041
// exit ;
45039: GO 45131
// dist := 99999 ;
45041: LD_ADDR_VAR 0 5
45045: PUSH
45046: LD_INT 99999
45048: ST_TO_ADDR
// for i in points do
45049: LD_ADDR_VAR 0 4
45053: PUSH
45054: LD_VAR 0 2
45058: PUSH
45059: FOR_IN
45060: IFFALSE 45129
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45062: LD_ADDR_VAR 0 6
45066: PUSH
45067: LD_VAR 0 1
45071: PPUSH
45072: LD_VAR 0 4
45076: PUSH
45077: LD_INT 1
45079: ARRAY
45080: PPUSH
45081: LD_VAR 0 4
45085: PUSH
45086: LD_INT 2
45088: ARRAY
45089: PPUSH
45090: CALL_OW 297
45094: ST_TO_ADDR
// if tmpDist < dist then
45095: LD_VAR 0 6
45099: PUSH
45100: LD_VAR 0 5
45104: LESS
45105: IFFALSE 45127
// begin result := i ;
45107: LD_ADDR_VAR 0 3
45111: PUSH
45112: LD_VAR 0 4
45116: ST_TO_ADDR
// dist := tmpDist ;
45117: LD_ADDR_VAR 0 5
45121: PUSH
45122: LD_VAR 0 6
45126: ST_TO_ADDR
// end ; end ;
45127: GO 45059
45129: POP
45130: POP
// end ;
45131: LD_VAR 0 3
45135: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
45136: LD_INT 0
45138: PPUSH
// uc_side := side ;
45139: LD_ADDR_OWVAR 20
45143: PUSH
45144: LD_VAR 0 1
45148: ST_TO_ADDR
// uc_nation := 3 ;
45149: LD_ADDR_OWVAR 21
45153: PUSH
45154: LD_INT 3
45156: ST_TO_ADDR
// vc_chassis := 25 ;
45157: LD_ADDR_OWVAR 37
45161: PUSH
45162: LD_INT 25
45164: ST_TO_ADDR
// vc_engine := engine_siberite ;
45165: LD_ADDR_OWVAR 39
45169: PUSH
45170: LD_INT 3
45172: ST_TO_ADDR
// vc_control := control_computer ;
45173: LD_ADDR_OWVAR 38
45177: PUSH
45178: LD_INT 3
45180: ST_TO_ADDR
// vc_weapon := 59 ;
45181: LD_ADDR_OWVAR 40
45185: PUSH
45186: LD_INT 59
45188: ST_TO_ADDR
// result := CreateVehicle ;
45189: LD_ADDR_VAR 0 5
45193: PUSH
45194: CALL_OW 45
45198: ST_TO_ADDR
// SetDir ( result , d ) ;
45199: LD_VAR 0 5
45203: PPUSH
45204: LD_VAR 0 4
45208: PPUSH
45209: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
45213: LD_VAR 0 5
45217: PPUSH
45218: LD_VAR 0 2
45222: PPUSH
45223: LD_VAR 0 3
45227: PPUSH
45228: LD_INT 0
45230: PPUSH
45231: CALL_OW 48
// end ;
45235: LD_VAR 0 5
45239: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
45240: LD_INT 0
45242: PPUSH
45243: PPUSH
45244: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
45245: LD_ADDR_VAR 0 2
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 0
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
45268: LD_VAR 0 1
45272: NOT
45273: PUSH
45274: LD_VAR 0 1
45278: PPUSH
45279: CALL_OW 264
45283: PUSH
45284: LD_INT 12
45286: PUSH
45287: LD_INT 51
45289: PUSH
45290: LD_INT 32
45292: PUSH
45293: LD_EXP 45
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: IN
45304: NOT
45305: OR
45306: IFFALSE 45310
// exit ;
45308: GO 45408
// for i := 1 to 3 do
45310: LD_ADDR_VAR 0 3
45314: PUSH
45315: DOUBLE
45316: LD_INT 1
45318: DEC
45319: ST_TO_ADDR
45320: LD_INT 3
45322: PUSH
45323: FOR_TO
45324: IFFALSE 45406
// begin tmp := GetCargo ( cargo , i ) ;
45326: LD_ADDR_VAR 0 4
45330: PUSH
45331: LD_VAR 0 1
45335: PPUSH
45336: LD_VAR 0 3
45340: PPUSH
45341: CALL_OW 289
45345: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45346: LD_ADDR_VAR 0 2
45350: PUSH
45351: LD_VAR 0 2
45355: PPUSH
45356: LD_VAR 0 3
45360: PPUSH
45361: LD_VAR 0 4
45365: PPUSH
45366: CALL_OW 1
45370: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45371: LD_ADDR_VAR 0 2
45375: PUSH
45376: LD_VAR 0 2
45380: PPUSH
45381: LD_INT 4
45383: PPUSH
45384: LD_VAR 0 2
45388: PUSH
45389: LD_INT 4
45391: ARRAY
45392: PUSH
45393: LD_VAR 0 4
45397: PLUS
45398: PPUSH
45399: CALL_OW 1
45403: ST_TO_ADDR
// end ;
45404: GO 45323
45406: POP
45407: POP
// end ;
45408: LD_VAR 0 2
45412: RET
// export function Length ( array ) ; begin
45413: LD_INT 0
45415: PPUSH
// result := array + 0 ;
45416: LD_ADDR_VAR 0 2
45420: PUSH
45421: LD_VAR 0 1
45425: PUSH
45426: LD_INT 0
45428: PLUS
45429: ST_TO_ADDR
// end ; end_of_file
45430: LD_VAR 0 2
45434: RET
// every 0 0$1 do
45435: GO 45437
45437: DISABLE
// begin enable ;
45438: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
45439: LD_STRING updateTimer(
45441: PUSH
45442: LD_OWVAR 1
45446: STR
45447: PUSH
45448: LD_STRING );
45450: STR
45451: PPUSH
45452: CALL_OW 559
// end ;
45456: END
// export function SOS_MapStart ( ) ; begin
45457: LD_INT 0
45459: PPUSH
// if streamModeActive then
45460: LD_EXP 63
45464: IFFALSE 45473
// DefineStreamItems ( true ) ;
45466: LD_INT 1
45468: PPUSH
45469: CALL 47127 0 1
// UpdateFactoryWaypoints ( ) ;
45473: CALL 59988 0 0
// UpdateWarhouseGatheringPoints ( ) ;
45477: CALL 60241 0 0
// end ;
45481: LD_VAR 0 1
45485: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
45486: LD_INT 0
45488: PPUSH
// if p2 = 100 then
45489: LD_VAR 0 2
45493: PUSH
45494: LD_INT 100
45496: EQUAL
45497: IFFALSE 46500
// begin if not StreamModeActive then
45499: LD_EXP 63
45503: NOT
45504: IFFALSE 45514
// StreamModeActive := true ;
45506: LD_ADDR_EXP 63
45510: PUSH
45511: LD_INT 1
45513: ST_TO_ADDR
// if p3 = 0 then
45514: LD_VAR 0 3
45518: PUSH
45519: LD_INT 0
45521: EQUAL
45522: IFFALSE 45528
// InitStreamMode ;
45524: CALL 46663 0 0
// if p3 = 1 then
45528: LD_VAR 0 3
45532: PUSH
45533: LD_INT 1
45535: EQUAL
45536: IFFALSE 45546
// sRocket := true ;
45538: LD_ADDR_EXP 68
45542: PUSH
45543: LD_INT 1
45545: ST_TO_ADDR
// if p3 = 2 then
45546: LD_VAR 0 3
45550: PUSH
45551: LD_INT 2
45553: EQUAL
45554: IFFALSE 45564
// sSpeed := true ;
45556: LD_ADDR_EXP 67
45560: PUSH
45561: LD_INT 1
45563: ST_TO_ADDR
// if p3 = 3 then
45564: LD_VAR 0 3
45568: PUSH
45569: LD_INT 3
45571: EQUAL
45572: IFFALSE 45582
// sEngine := true ;
45574: LD_ADDR_EXP 69
45578: PUSH
45579: LD_INT 1
45581: ST_TO_ADDR
// if p3 = 4 then
45582: LD_VAR 0 3
45586: PUSH
45587: LD_INT 4
45589: EQUAL
45590: IFFALSE 45600
// sSpec := true ;
45592: LD_ADDR_EXP 66
45596: PUSH
45597: LD_INT 1
45599: ST_TO_ADDR
// if p3 = 5 then
45600: LD_VAR 0 3
45604: PUSH
45605: LD_INT 5
45607: EQUAL
45608: IFFALSE 45618
// sLevel := true ;
45610: LD_ADDR_EXP 70
45614: PUSH
45615: LD_INT 1
45617: ST_TO_ADDR
// if p3 = 6 then
45618: LD_VAR 0 3
45622: PUSH
45623: LD_INT 6
45625: EQUAL
45626: IFFALSE 45636
// sArmoury := true ;
45628: LD_ADDR_EXP 71
45632: PUSH
45633: LD_INT 1
45635: ST_TO_ADDR
// if p3 = 7 then
45636: LD_VAR 0 3
45640: PUSH
45641: LD_INT 7
45643: EQUAL
45644: IFFALSE 45654
// sRadar := true ;
45646: LD_ADDR_EXP 72
45650: PUSH
45651: LD_INT 1
45653: ST_TO_ADDR
// if p3 = 8 then
45654: LD_VAR 0 3
45658: PUSH
45659: LD_INT 8
45661: EQUAL
45662: IFFALSE 45672
// sBunker := true ;
45664: LD_ADDR_EXP 73
45668: PUSH
45669: LD_INT 1
45671: ST_TO_ADDR
// if p3 = 9 then
45672: LD_VAR 0 3
45676: PUSH
45677: LD_INT 9
45679: EQUAL
45680: IFFALSE 45690
// sHack := true ;
45682: LD_ADDR_EXP 74
45686: PUSH
45687: LD_INT 1
45689: ST_TO_ADDR
// if p3 = 10 then
45690: LD_VAR 0 3
45694: PUSH
45695: LD_INT 10
45697: EQUAL
45698: IFFALSE 45708
// sFire := true ;
45700: LD_ADDR_EXP 75
45704: PUSH
45705: LD_INT 1
45707: ST_TO_ADDR
// if p3 = 11 then
45708: LD_VAR 0 3
45712: PUSH
45713: LD_INT 11
45715: EQUAL
45716: IFFALSE 45726
// sRefresh := true ;
45718: LD_ADDR_EXP 76
45722: PUSH
45723: LD_INT 1
45725: ST_TO_ADDR
// if p3 = 12 then
45726: LD_VAR 0 3
45730: PUSH
45731: LD_INT 12
45733: EQUAL
45734: IFFALSE 45744
// sExp := true ;
45736: LD_ADDR_EXP 77
45740: PUSH
45741: LD_INT 1
45743: ST_TO_ADDR
// if p3 = 13 then
45744: LD_VAR 0 3
45748: PUSH
45749: LD_INT 13
45751: EQUAL
45752: IFFALSE 45762
// sDepot := true ;
45754: LD_ADDR_EXP 78
45758: PUSH
45759: LD_INT 1
45761: ST_TO_ADDR
// if p3 = 14 then
45762: LD_VAR 0 3
45766: PUSH
45767: LD_INT 14
45769: EQUAL
45770: IFFALSE 45780
// sFlag := true ;
45772: LD_ADDR_EXP 79
45776: PUSH
45777: LD_INT 1
45779: ST_TO_ADDR
// if p3 = 15 then
45780: LD_VAR 0 3
45784: PUSH
45785: LD_INT 15
45787: EQUAL
45788: IFFALSE 45798
// sKamikadze := true ;
45790: LD_ADDR_EXP 87
45794: PUSH
45795: LD_INT 1
45797: ST_TO_ADDR
// if p3 = 16 then
45798: LD_VAR 0 3
45802: PUSH
45803: LD_INT 16
45805: EQUAL
45806: IFFALSE 45816
// sTroll := true ;
45808: LD_ADDR_EXP 88
45812: PUSH
45813: LD_INT 1
45815: ST_TO_ADDR
// if p3 = 17 then
45816: LD_VAR 0 3
45820: PUSH
45821: LD_INT 17
45823: EQUAL
45824: IFFALSE 45834
// sSlow := true ;
45826: LD_ADDR_EXP 89
45830: PUSH
45831: LD_INT 1
45833: ST_TO_ADDR
// if p3 = 18 then
45834: LD_VAR 0 3
45838: PUSH
45839: LD_INT 18
45841: EQUAL
45842: IFFALSE 45852
// sLack := true ;
45844: LD_ADDR_EXP 90
45848: PUSH
45849: LD_INT 1
45851: ST_TO_ADDR
// if p3 = 19 then
45852: LD_VAR 0 3
45856: PUSH
45857: LD_INT 19
45859: EQUAL
45860: IFFALSE 45870
// sTank := true ;
45862: LD_ADDR_EXP 92
45866: PUSH
45867: LD_INT 1
45869: ST_TO_ADDR
// if p3 = 20 then
45870: LD_VAR 0 3
45874: PUSH
45875: LD_INT 20
45877: EQUAL
45878: IFFALSE 45888
// sRemote := true ;
45880: LD_ADDR_EXP 93
45884: PUSH
45885: LD_INT 1
45887: ST_TO_ADDR
// if p3 = 21 then
45888: LD_VAR 0 3
45892: PUSH
45893: LD_INT 21
45895: EQUAL
45896: IFFALSE 45906
// sPowell := true ;
45898: LD_ADDR_EXP 94
45902: PUSH
45903: LD_INT 1
45905: ST_TO_ADDR
// if p3 = 22 then
45906: LD_VAR 0 3
45910: PUSH
45911: LD_INT 22
45913: EQUAL
45914: IFFALSE 45924
// sTeleport := true ;
45916: LD_ADDR_EXP 97
45920: PUSH
45921: LD_INT 1
45923: ST_TO_ADDR
// if p3 = 23 then
45924: LD_VAR 0 3
45928: PUSH
45929: LD_INT 23
45931: EQUAL
45932: IFFALSE 45942
// sOilTower := true ;
45934: LD_ADDR_EXP 99
45938: PUSH
45939: LD_INT 1
45941: ST_TO_ADDR
// if p3 = 24 then
45942: LD_VAR 0 3
45946: PUSH
45947: LD_INT 24
45949: EQUAL
45950: IFFALSE 45960
// sShovel := true ;
45952: LD_ADDR_EXP 100
45956: PUSH
45957: LD_INT 1
45959: ST_TO_ADDR
// if p3 = 25 then
45960: LD_VAR 0 3
45964: PUSH
45965: LD_INT 25
45967: EQUAL
45968: IFFALSE 45978
// sSheik := true ;
45970: LD_ADDR_EXP 101
45974: PUSH
45975: LD_INT 1
45977: ST_TO_ADDR
// if p3 = 26 then
45978: LD_VAR 0 3
45982: PUSH
45983: LD_INT 26
45985: EQUAL
45986: IFFALSE 45996
// sEarthquake := true ;
45988: LD_ADDR_EXP 103
45992: PUSH
45993: LD_INT 1
45995: ST_TO_ADDR
// if p3 = 27 then
45996: LD_VAR 0 3
46000: PUSH
46001: LD_INT 27
46003: EQUAL
46004: IFFALSE 46014
// sAI := true ;
46006: LD_ADDR_EXP 104
46010: PUSH
46011: LD_INT 1
46013: ST_TO_ADDR
// if p3 = 28 then
46014: LD_VAR 0 3
46018: PUSH
46019: LD_INT 28
46021: EQUAL
46022: IFFALSE 46032
// sCargo := true ;
46024: LD_ADDR_EXP 107
46028: PUSH
46029: LD_INT 1
46031: ST_TO_ADDR
// if p3 = 29 then
46032: LD_VAR 0 3
46036: PUSH
46037: LD_INT 29
46039: EQUAL
46040: IFFALSE 46050
// sDLaser := true ;
46042: LD_ADDR_EXP 108
46046: PUSH
46047: LD_INT 1
46049: ST_TO_ADDR
// if p3 = 30 then
46050: LD_VAR 0 3
46054: PUSH
46055: LD_INT 30
46057: EQUAL
46058: IFFALSE 46068
// sExchange := true ;
46060: LD_ADDR_EXP 109
46064: PUSH
46065: LD_INT 1
46067: ST_TO_ADDR
// if p3 = 31 then
46068: LD_VAR 0 3
46072: PUSH
46073: LD_INT 31
46075: EQUAL
46076: IFFALSE 46086
// sFac := true ;
46078: LD_ADDR_EXP 110
46082: PUSH
46083: LD_INT 1
46085: ST_TO_ADDR
// if p3 = 32 then
46086: LD_VAR 0 3
46090: PUSH
46091: LD_INT 32
46093: EQUAL
46094: IFFALSE 46104
// sPower := true ;
46096: LD_ADDR_EXP 111
46100: PUSH
46101: LD_INT 1
46103: ST_TO_ADDR
// if p3 = 33 then
46104: LD_VAR 0 3
46108: PUSH
46109: LD_INT 33
46111: EQUAL
46112: IFFALSE 46122
// sRandom := true ;
46114: LD_ADDR_EXP 112
46118: PUSH
46119: LD_INT 1
46121: ST_TO_ADDR
// if p3 = 34 then
46122: LD_VAR 0 3
46126: PUSH
46127: LD_INT 34
46129: EQUAL
46130: IFFALSE 46140
// sShield := true ;
46132: LD_ADDR_EXP 113
46136: PUSH
46137: LD_INT 1
46139: ST_TO_ADDR
// if p3 = 35 then
46140: LD_VAR 0 3
46144: PUSH
46145: LD_INT 35
46147: EQUAL
46148: IFFALSE 46158
// sTime := true ;
46150: LD_ADDR_EXP 114
46154: PUSH
46155: LD_INT 1
46157: ST_TO_ADDR
// if p3 = 36 then
46158: LD_VAR 0 3
46162: PUSH
46163: LD_INT 36
46165: EQUAL
46166: IFFALSE 46176
// sTools := true ;
46168: LD_ADDR_EXP 115
46172: PUSH
46173: LD_INT 1
46175: ST_TO_ADDR
// if p3 = 101 then
46176: LD_VAR 0 3
46180: PUSH
46181: LD_INT 101
46183: EQUAL
46184: IFFALSE 46194
// sSold := true ;
46186: LD_ADDR_EXP 80
46190: PUSH
46191: LD_INT 1
46193: ST_TO_ADDR
// if p3 = 102 then
46194: LD_VAR 0 3
46198: PUSH
46199: LD_INT 102
46201: EQUAL
46202: IFFALSE 46212
// sDiff := true ;
46204: LD_ADDR_EXP 81
46208: PUSH
46209: LD_INT 1
46211: ST_TO_ADDR
// if p3 = 103 then
46212: LD_VAR 0 3
46216: PUSH
46217: LD_INT 103
46219: EQUAL
46220: IFFALSE 46230
// sFog := true ;
46222: LD_ADDR_EXP 84
46226: PUSH
46227: LD_INT 1
46229: ST_TO_ADDR
// if p3 = 104 then
46230: LD_VAR 0 3
46234: PUSH
46235: LD_INT 104
46237: EQUAL
46238: IFFALSE 46248
// sReset := true ;
46240: LD_ADDR_EXP 85
46244: PUSH
46245: LD_INT 1
46247: ST_TO_ADDR
// if p3 = 105 then
46248: LD_VAR 0 3
46252: PUSH
46253: LD_INT 105
46255: EQUAL
46256: IFFALSE 46266
// sSun := true ;
46258: LD_ADDR_EXP 86
46262: PUSH
46263: LD_INT 1
46265: ST_TO_ADDR
// if p3 = 106 then
46266: LD_VAR 0 3
46270: PUSH
46271: LD_INT 106
46273: EQUAL
46274: IFFALSE 46284
// sTiger := true ;
46276: LD_ADDR_EXP 82
46280: PUSH
46281: LD_INT 1
46283: ST_TO_ADDR
// if p3 = 107 then
46284: LD_VAR 0 3
46288: PUSH
46289: LD_INT 107
46291: EQUAL
46292: IFFALSE 46302
// sBomb := true ;
46294: LD_ADDR_EXP 83
46298: PUSH
46299: LD_INT 1
46301: ST_TO_ADDR
// if p3 = 108 then
46302: LD_VAR 0 3
46306: PUSH
46307: LD_INT 108
46309: EQUAL
46310: IFFALSE 46320
// sWound := true ;
46312: LD_ADDR_EXP 91
46316: PUSH
46317: LD_INT 1
46319: ST_TO_ADDR
// if p3 = 109 then
46320: LD_VAR 0 3
46324: PUSH
46325: LD_INT 109
46327: EQUAL
46328: IFFALSE 46338
// sBetray := true ;
46330: LD_ADDR_EXP 95
46334: PUSH
46335: LD_INT 1
46337: ST_TO_ADDR
// if p3 = 110 then
46338: LD_VAR 0 3
46342: PUSH
46343: LD_INT 110
46345: EQUAL
46346: IFFALSE 46356
// sContamin := true ;
46348: LD_ADDR_EXP 96
46352: PUSH
46353: LD_INT 1
46355: ST_TO_ADDR
// if p3 = 111 then
46356: LD_VAR 0 3
46360: PUSH
46361: LD_INT 111
46363: EQUAL
46364: IFFALSE 46374
// sOil := true ;
46366: LD_ADDR_EXP 98
46370: PUSH
46371: LD_INT 1
46373: ST_TO_ADDR
// if p3 = 112 then
46374: LD_VAR 0 3
46378: PUSH
46379: LD_INT 112
46381: EQUAL
46382: IFFALSE 46392
// sStu := true ;
46384: LD_ADDR_EXP 102
46388: PUSH
46389: LD_INT 1
46391: ST_TO_ADDR
// if p3 = 113 then
46392: LD_VAR 0 3
46396: PUSH
46397: LD_INT 113
46399: EQUAL
46400: IFFALSE 46410
// sBazooka := true ;
46402: LD_ADDR_EXP 105
46406: PUSH
46407: LD_INT 1
46409: ST_TO_ADDR
// if p3 = 114 then
46410: LD_VAR 0 3
46414: PUSH
46415: LD_INT 114
46417: EQUAL
46418: IFFALSE 46428
// sMortar := true ;
46420: LD_ADDR_EXP 106
46424: PUSH
46425: LD_INT 1
46427: ST_TO_ADDR
// if p3 = 115 then
46428: LD_VAR 0 3
46432: PUSH
46433: LD_INT 115
46435: EQUAL
46436: IFFALSE 46446
// sRanger := true ;
46438: LD_ADDR_EXP 116
46442: PUSH
46443: LD_INT 1
46445: ST_TO_ADDR
// if p3 = 116 then
46446: LD_VAR 0 3
46450: PUSH
46451: LD_INT 116
46453: EQUAL
46454: IFFALSE 46464
// sComputer := true ;
46456: LD_ADDR_EXP 117
46460: PUSH
46461: LD_INT 1
46463: ST_TO_ADDR
// if p3 = 117 then
46464: LD_VAR 0 3
46468: PUSH
46469: LD_INT 117
46471: EQUAL
46472: IFFALSE 46482
// s30 := true ;
46474: LD_ADDR_EXP 118
46478: PUSH
46479: LD_INT 1
46481: ST_TO_ADDR
// if p3 = 118 then
46482: LD_VAR 0 3
46486: PUSH
46487: LD_INT 118
46489: EQUAL
46490: IFFALSE 46500
// s60 := true ;
46492: LD_ADDR_EXP 119
46496: PUSH
46497: LD_INT 1
46499: ST_TO_ADDR
// end ; if p2 = 101 then
46500: LD_VAR 0 2
46504: PUSH
46505: LD_INT 101
46507: EQUAL
46508: IFFALSE 46636
// begin case p3 of 1 :
46510: LD_VAR 0 3
46514: PUSH
46515: LD_INT 1
46517: DOUBLE
46518: EQUAL
46519: IFTRUE 46523
46521: GO 46530
46523: POP
// hHackUnlimitedResources ; 2 :
46524: CALL 58734 0 0
46528: GO 46636
46530: LD_INT 2
46532: DOUBLE
46533: EQUAL
46534: IFTRUE 46538
46536: GO 46545
46538: POP
// hHackSetLevel10 ; 3 :
46539: CALL 58867 0 0
46543: GO 46636
46545: LD_INT 3
46547: DOUBLE
46548: EQUAL
46549: IFTRUE 46553
46551: GO 46560
46553: POP
// hHackSetLevel10YourUnits ; 4 :
46554: CALL 58952 0 0
46558: GO 46636
46560: LD_INT 4
46562: DOUBLE
46563: EQUAL
46564: IFTRUE 46568
46566: GO 46575
46568: POP
// hHackInvincible ; 5 :
46569: CALL 59400 0 0
46573: GO 46636
46575: LD_INT 5
46577: DOUBLE
46578: EQUAL
46579: IFTRUE 46583
46581: GO 46590
46583: POP
// hHackInvisible ; 6 :
46584: CALL 59511 0 0
46588: GO 46636
46590: LD_INT 6
46592: DOUBLE
46593: EQUAL
46594: IFTRUE 46598
46596: GO 46605
46598: POP
// hHackChangeYourSide ; 7 :
46599: CALL 59568 0 0
46603: GO 46636
46605: LD_INT 7
46607: DOUBLE
46608: EQUAL
46609: IFTRUE 46613
46611: GO 46620
46613: POP
// hHackChangeUnitSide ; 8 :
46614: CALL 59610 0 0
46618: GO 46636
46620: LD_INT 8
46622: DOUBLE
46623: EQUAL
46624: IFTRUE 46628
46626: GO 46635
46628: POP
// hHackFog ; end ;
46629: CALL 59711 0 0
46633: GO 46636
46635: POP
// end ; end ;
46636: LD_VAR 0 7
46640: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
46641: GO 46643
46643: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
46644: LD_STRING initStreamRollete();
46646: PPUSH
46647: CALL_OW 559
// InitStreamMode ;
46651: CALL 46663 0 0
// DefineStreamItems ( false ) ;
46655: LD_INT 0
46657: PPUSH
46658: CALL 47127 0 1
// end ;
46662: END
// function InitStreamMode ; begin
46663: LD_INT 0
46665: PPUSH
// streamModeActive := false ;
46666: LD_ADDR_EXP 63
46670: PUSH
46671: LD_INT 0
46673: ST_TO_ADDR
// normalCounter := 36 ;
46674: LD_ADDR_EXP 64
46678: PUSH
46679: LD_INT 36
46681: ST_TO_ADDR
// hardcoreCounter := 18 ;
46682: LD_ADDR_EXP 65
46686: PUSH
46687: LD_INT 18
46689: ST_TO_ADDR
// sRocket := false ;
46690: LD_ADDR_EXP 68
46694: PUSH
46695: LD_INT 0
46697: ST_TO_ADDR
// sSpeed := false ;
46698: LD_ADDR_EXP 67
46702: PUSH
46703: LD_INT 0
46705: ST_TO_ADDR
// sEngine := false ;
46706: LD_ADDR_EXP 69
46710: PUSH
46711: LD_INT 0
46713: ST_TO_ADDR
// sSpec := false ;
46714: LD_ADDR_EXP 66
46718: PUSH
46719: LD_INT 0
46721: ST_TO_ADDR
// sLevel := false ;
46722: LD_ADDR_EXP 70
46726: PUSH
46727: LD_INT 0
46729: ST_TO_ADDR
// sArmoury := false ;
46730: LD_ADDR_EXP 71
46734: PUSH
46735: LD_INT 0
46737: ST_TO_ADDR
// sRadar := false ;
46738: LD_ADDR_EXP 72
46742: PUSH
46743: LD_INT 0
46745: ST_TO_ADDR
// sBunker := false ;
46746: LD_ADDR_EXP 73
46750: PUSH
46751: LD_INT 0
46753: ST_TO_ADDR
// sHack := false ;
46754: LD_ADDR_EXP 74
46758: PUSH
46759: LD_INT 0
46761: ST_TO_ADDR
// sFire := false ;
46762: LD_ADDR_EXP 75
46766: PUSH
46767: LD_INT 0
46769: ST_TO_ADDR
// sRefresh := false ;
46770: LD_ADDR_EXP 76
46774: PUSH
46775: LD_INT 0
46777: ST_TO_ADDR
// sExp := false ;
46778: LD_ADDR_EXP 77
46782: PUSH
46783: LD_INT 0
46785: ST_TO_ADDR
// sDepot := false ;
46786: LD_ADDR_EXP 78
46790: PUSH
46791: LD_INT 0
46793: ST_TO_ADDR
// sFlag := false ;
46794: LD_ADDR_EXP 79
46798: PUSH
46799: LD_INT 0
46801: ST_TO_ADDR
// sKamikadze := false ;
46802: LD_ADDR_EXP 87
46806: PUSH
46807: LD_INT 0
46809: ST_TO_ADDR
// sTroll := false ;
46810: LD_ADDR_EXP 88
46814: PUSH
46815: LD_INT 0
46817: ST_TO_ADDR
// sSlow := false ;
46818: LD_ADDR_EXP 89
46822: PUSH
46823: LD_INT 0
46825: ST_TO_ADDR
// sLack := false ;
46826: LD_ADDR_EXP 90
46830: PUSH
46831: LD_INT 0
46833: ST_TO_ADDR
// sTank := false ;
46834: LD_ADDR_EXP 92
46838: PUSH
46839: LD_INT 0
46841: ST_TO_ADDR
// sRemote := false ;
46842: LD_ADDR_EXP 93
46846: PUSH
46847: LD_INT 0
46849: ST_TO_ADDR
// sPowell := false ;
46850: LD_ADDR_EXP 94
46854: PUSH
46855: LD_INT 0
46857: ST_TO_ADDR
// sTeleport := false ;
46858: LD_ADDR_EXP 97
46862: PUSH
46863: LD_INT 0
46865: ST_TO_ADDR
// sOilTower := false ;
46866: LD_ADDR_EXP 99
46870: PUSH
46871: LD_INT 0
46873: ST_TO_ADDR
// sShovel := false ;
46874: LD_ADDR_EXP 100
46878: PUSH
46879: LD_INT 0
46881: ST_TO_ADDR
// sSheik := false ;
46882: LD_ADDR_EXP 101
46886: PUSH
46887: LD_INT 0
46889: ST_TO_ADDR
// sEarthquake := false ;
46890: LD_ADDR_EXP 103
46894: PUSH
46895: LD_INT 0
46897: ST_TO_ADDR
// sAI := false ;
46898: LD_ADDR_EXP 104
46902: PUSH
46903: LD_INT 0
46905: ST_TO_ADDR
// sCargo := false ;
46906: LD_ADDR_EXP 107
46910: PUSH
46911: LD_INT 0
46913: ST_TO_ADDR
// sDLaser := false ;
46914: LD_ADDR_EXP 108
46918: PUSH
46919: LD_INT 0
46921: ST_TO_ADDR
// sExchange := false ;
46922: LD_ADDR_EXP 109
46926: PUSH
46927: LD_INT 0
46929: ST_TO_ADDR
// sFac := false ;
46930: LD_ADDR_EXP 110
46934: PUSH
46935: LD_INT 0
46937: ST_TO_ADDR
// sPower := false ;
46938: LD_ADDR_EXP 111
46942: PUSH
46943: LD_INT 0
46945: ST_TO_ADDR
// sRandom := false ;
46946: LD_ADDR_EXP 112
46950: PUSH
46951: LD_INT 0
46953: ST_TO_ADDR
// sShield := false ;
46954: LD_ADDR_EXP 113
46958: PUSH
46959: LD_INT 0
46961: ST_TO_ADDR
// sTime := false ;
46962: LD_ADDR_EXP 114
46966: PUSH
46967: LD_INT 0
46969: ST_TO_ADDR
// sTools := false ;
46970: LD_ADDR_EXP 115
46974: PUSH
46975: LD_INT 0
46977: ST_TO_ADDR
// sSold := false ;
46978: LD_ADDR_EXP 80
46982: PUSH
46983: LD_INT 0
46985: ST_TO_ADDR
// sDiff := false ;
46986: LD_ADDR_EXP 81
46990: PUSH
46991: LD_INT 0
46993: ST_TO_ADDR
// sFog := false ;
46994: LD_ADDR_EXP 84
46998: PUSH
46999: LD_INT 0
47001: ST_TO_ADDR
// sReset := false ;
47002: LD_ADDR_EXP 85
47006: PUSH
47007: LD_INT 0
47009: ST_TO_ADDR
// sSun := false ;
47010: LD_ADDR_EXP 86
47014: PUSH
47015: LD_INT 0
47017: ST_TO_ADDR
// sTiger := false ;
47018: LD_ADDR_EXP 82
47022: PUSH
47023: LD_INT 0
47025: ST_TO_ADDR
// sBomb := false ;
47026: LD_ADDR_EXP 83
47030: PUSH
47031: LD_INT 0
47033: ST_TO_ADDR
// sWound := false ;
47034: LD_ADDR_EXP 91
47038: PUSH
47039: LD_INT 0
47041: ST_TO_ADDR
// sBetray := false ;
47042: LD_ADDR_EXP 95
47046: PUSH
47047: LD_INT 0
47049: ST_TO_ADDR
// sContamin := false ;
47050: LD_ADDR_EXP 96
47054: PUSH
47055: LD_INT 0
47057: ST_TO_ADDR
// sOil := false ;
47058: LD_ADDR_EXP 98
47062: PUSH
47063: LD_INT 0
47065: ST_TO_ADDR
// sStu := false ;
47066: LD_ADDR_EXP 102
47070: PUSH
47071: LD_INT 0
47073: ST_TO_ADDR
// sBazooka := false ;
47074: LD_ADDR_EXP 105
47078: PUSH
47079: LD_INT 0
47081: ST_TO_ADDR
// sMortar := false ;
47082: LD_ADDR_EXP 106
47086: PUSH
47087: LD_INT 0
47089: ST_TO_ADDR
// sRanger := false ;
47090: LD_ADDR_EXP 116
47094: PUSH
47095: LD_INT 0
47097: ST_TO_ADDR
// sComputer := false ;
47098: LD_ADDR_EXP 117
47102: PUSH
47103: LD_INT 0
47105: ST_TO_ADDR
// s30 := false ;
47106: LD_ADDR_EXP 118
47110: PUSH
47111: LD_INT 0
47113: ST_TO_ADDR
// s60 := false ;
47114: LD_ADDR_EXP 119
47118: PUSH
47119: LD_INT 0
47121: ST_TO_ADDR
// end ;
47122: LD_VAR 0 1
47126: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
47127: LD_INT 0
47129: PPUSH
47130: PPUSH
47131: PPUSH
47132: PPUSH
47133: PPUSH
47134: PPUSH
47135: PPUSH
// result := [ ] ;
47136: LD_ADDR_VAR 0 2
47140: PUSH
47141: EMPTY
47142: ST_TO_ADDR
// if campaign_id = 1 then
47143: LD_OWVAR 69
47147: PUSH
47148: LD_INT 1
47150: EQUAL
47151: IFFALSE 50317
// begin case mission_number of 1 :
47153: LD_OWVAR 70
47157: PUSH
47158: LD_INT 1
47160: DOUBLE
47161: EQUAL
47162: IFTRUE 47166
47164: GO 47242
47166: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
47167: LD_ADDR_VAR 0 2
47171: PUSH
47172: LD_INT 2
47174: PUSH
47175: LD_INT 4
47177: PUSH
47178: LD_INT 11
47180: PUSH
47181: LD_INT 12
47183: PUSH
47184: LD_INT 15
47186: PUSH
47187: LD_INT 16
47189: PUSH
47190: LD_INT 22
47192: PUSH
47193: LD_INT 23
47195: PUSH
47196: LD_INT 26
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 101
47212: PUSH
47213: LD_INT 102
47215: PUSH
47216: LD_INT 106
47218: PUSH
47219: LD_INT 116
47221: PUSH
47222: LD_INT 117
47224: PUSH
47225: LD_INT 118
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: ST_TO_ADDR
47240: GO 50315
47242: LD_INT 2
47244: DOUBLE
47245: EQUAL
47246: IFTRUE 47250
47248: GO 47334
47250: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
47251: LD_ADDR_VAR 0 2
47255: PUSH
47256: LD_INT 2
47258: PUSH
47259: LD_INT 4
47261: PUSH
47262: LD_INT 11
47264: PUSH
47265: LD_INT 12
47267: PUSH
47268: LD_INT 15
47270: PUSH
47271: LD_INT 16
47273: PUSH
47274: LD_INT 22
47276: PUSH
47277: LD_INT 23
47279: PUSH
47280: LD_INT 26
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 101
47296: PUSH
47297: LD_INT 102
47299: PUSH
47300: LD_INT 105
47302: PUSH
47303: LD_INT 106
47305: PUSH
47306: LD_INT 108
47308: PUSH
47309: LD_INT 116
47311: PUSH
47312: LD_INT 117
47314: PUSH
47315: LD_INT 118
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: ST_TO_ADDR
47332: GO 50315
47334: LD_INT 3
47336: DOUBLE
47337: EQUAL
47338: IFTRUE 47342
47340: GO 47430
47342: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
47343: LD_ADDR_VAR 0 2
47347: PUSH
47348: LD_INT 2
47350: PUSH
47351: LD_INT 4
47353: PUSH
47354: LD_INT 5
47356: PUSH
47357: LD_INT 11
47359: PUSH
47360: LD_INT 12
47362: PUSH
47363: LD_INT 15
47365: PUSH
47366: LD_INT 16
47368: PUSH
47369: LD_INT 22
47371: PUSH
47372: LD_INT 26
47374: PUSH
47375: LD_INT 36
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 101
47392: PUSH
47393: LD_INT 102
47395: PUSH
47396: LD_INT 105
47398: PUSH
47399: LD_INT 106
47401: PUSH
47402: LD_INT 108
47404: PUSH
47405: LD_INT 116
47407: PUSH
47408: LD_INT 117
47410: PUSH
47411: LD_INT 118
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: ST_TO_ADDR
47428: GO 50315
47430: LD_INT 4
47432: DOUBLE
47433: EQUAL
47434: IFTRUE 47438
47436: GO 47534
47438: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
47439: LD_ADDR_VAR 0 2
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 4
47449: PUSH
47450: LD_INT 5
47452: PUSH
47453: LD_INT 8
47455: PUSH
47456: LD_INT 11
47458: PUSH
47459: LD_INT 12
47461: PUSH
47462: LD_INT 15
47464: PUSH
47465: LD_INT 16
47467: PUSH
47468: LD_INT 22
47470: PUSH
47471: LD_INT 23
47473: PUSH
47474: LD_INT 26
47476: PUSH
47477: LD_INT 36
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 101
47496: PUSH
47497: LD_INT 102
47499: PUSH
47500: LD_INT 105
47502: PUSH
47503: LD_INT 106
47505: PUSH
47506: LD_INT 108
47508: PUSH
47509: LD_INT 116
47511: PUSH
47512: LD_INT 117
47514: PUSH
47515: LD_INT 118
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: ST_TO_ADDR
47532: GO 50315
47534: LD_INT 5
47536: DOUBLE
47537: EQUAL
47538: IFTRUE 47542
47540: GO 47654
47542: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
47543: LD_ADDR_VAR 0 2
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 4
47553: PUSH
47554: LD_INT 5
47556: PUSH
47557: LD_INT 6
47559: PUSH
47560: LD_INT 8
47562: PUSH
47563: LD_INT 11
47565: PUSH
47566: LD_INT 12
47568: PUSH
47569: LD_INT 15
47571: PUSH
47572: LD_INT 16
47574: PUSH
47575: LD_INT 22
47577: PUSH
47578: LD_INT 23
47580: PUSH
47581: LD_INT 25
47583: PUSH
47584: LD_INT 26
47586: PUSH
47587: LD_INT 36
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 101
47608: PUSH
47609: LD_INT 102
47611: PUSH
47612: LD_INT 105
47614: PUSH
47615: LD_INT 106
47617: PUSH
47618: LD_INT 108
47620: PUSH
47621: LD_INT 109
47623: PUSH
47624: LD_INT 112
47626: PUSH
47627: LD_INT 116
47629: PUSH
47630: LD_INT 117
47632: PUSH
47633: LD_INT 118
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: ST_TO_ADDR
47652: GO 50315
47654: LD_INT 6
47656: DOUBLE
47657: EQUAL
47658: IFTRUE 47662
47660: GO 47794
47662: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
47663: LD_ADDR_VAR 0 2
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: LD_INT 4
47673: PUSH
47674: LD_INT 5
47676: PUSH
47677: LD_INT 6
47679: PUSH
47680: LD_INT 8
47682: PUSH
47683: LD_INT 11
47685: PUSH
47686: LD_INT 12
47688: PUSH
47689: LD_INT 15
47691: PUSH
47692: LD_INT 16
47694: PUSH
47695: LD_INT 20
47697: PUSH
47698: LD_INT 21
47700: PUSH
47701: LD_INT 22
47703: PUSH
47704: LD_INT 23
47706: PUSH
47707: LD_INT 25
47709: PUSH
47710: LD_INT 26
47712: PUSH
47713: LD_INT 30
47715: PUSH
47716: LD_INT 31
47718: PUSH
47719: LD_INT 32
47721: PUSH
47722: LD_INT 36
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 101
47748: PUSH
47749: LD_INT 102
47751: PUSH
47752: LD_INT 105
47754: PUSH
47755: LD_INT 106
47757: PUSH
47758: LD_INT 108
47760: PUSH
47761: LD_INT 109
47763: PUSH
47764: LD_INT 112
47766: PUSH
47767: LD_INT 116
47769: PUSH
47770: LD_INT 117
47772: PUSH
47773: LD_INT 118
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: ST_TO_ADDR
47792: GO 50315
47794: LD_INT 7
47796: DOUBLE
47797: EQUAL
47798: IFTRUE 47802
47800: GO 47914
47802: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
47803: LD_ADDR_VAR 0 2
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: LD_INT 4
47813: PUSH
47814: LD_INT 5
47816: PUSH
47817: LD_INT 7
47819: PUSH
47820: LD_INT 11
47822: PUSH
47823: LD_INT 12
47825: PUSH
47826: LD_INT 15
47828: PUSH
47829: LD_INT 16
47831: PUSH
47832: LD_INT 20
47834: PUSH
47835: LD_INT 21
47837: PUSH
47838: LD_INT 22
47840: PUSH
47841: LD_INT 23
47843: PUSH
47844: LD_INT 25
47846: PUSH
47847: LD_INT 26
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 101
47868: PUSH
47869: LD_INT 102
47871: PUSH
47872: LD_INT 103
47874: PUSH
47875: LD_INT 105
47877: PUSH
47878: LD_INT 106
47880: PUSH
47881: LD_INT 108
47883: PUSH
47884: LD_INT 112
47886: PUSH
47887: LD_INT 116
47889: PUSH
47890: LD_INT 117
47892: PUSH
47893: LD_INT 118
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: ST_TO_ADDR
47912: GO 50315
47914: LD_INT 8
47916: DOUBLE
47917: EQUAL
47918: IFTRUE 47922
47920: GO 48062
47922: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
47923: LD_ADDR_VAR 0 2
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: LD_INT 4
47933: PUSH
47934: LD_INT 5
47936: PUSH
47937: LD_INT 6
47939: PUSH
47940: LD_INT 7
47942: PUSH
47943: LD_INT 8
47945: PUSH
47946: LD_INT 11
47948: PUSH
47949: LD_INT 12
47951: PUSH
47952: LD_INT 15
47954: PUSH
47955: LD_INT 16
47957: PUSH
47958: LD_INT 20
47960: PUSH
47961: LD_INT 21
47963: PUSH
47964: LD_INT 22
47966: PUSH
47967: LD_INT 23
47969: PUSH
47970: LD_INT 25
47972: PUSH
47973: LD_INT 26
47975: PUSH
47976: LD_INT 30
47978: PUSH
47979: LD_INT 31
47981: PUSH
47982: LD_INT 32
47984: PUSH
47985: LD_INT 36
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 101
48012: PUSH
48013: LD_INT 102
48015: PUSH
48016: LD_INT 103
48018: PUSH
48019: LD_INT 105
48021: PUSH
48022: LD_INT 106
48024: PUSH
48025: LD_INT 108
48027: PUSH
48028: LD_INT 109
48030: PUSH
48031: LD_INT 112
48033: PUSH
48034: LD_INT 116
48036: PUSH
48037: LD_INT 117
48039: PUSH
48040: LD_INT 118
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: ST_TO_ADDR
48060: GO 50315
48062: LD_INT 9
48064: DOUBLE
48065: EQUAL
48066: IFTRUE 48070
48068: GO 48218
48070: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
48071: LD_ADDR_VAR 0 2
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 4
48081: PUSH
48082: LD_INT 5
48084: PUSH
48085: LD_INT 6
48087: PUSH
48088: LD_INT 7
48090: PUSH
48091: LD_INT 8
48093: PUSH
48094: LD_INT 11
48096: PUSH
48097: LD_INT 12
48099: PUSH
48100: LD_INT 15
48102: PUSH
48103: LD_INT 16
48105: PUSH
48106: LD_INT 20
48108: PUSH
48109: LD_INT 21
48111: PUSH
48112: LD_INT 22
48114: PUSH
48115: LD_INT 23
48117: PUSH
48118: LD_INT 25
48120: PUSH
48121: LD_INT 26
48123: PUSH
48124: LD_INT 28
48126: PUSH
48127: LD_INT 30
48129: PUSH
48130: LD_INT 31
48132: PUSH
48133: LD_INT 32
48135: PUSH
48136: LD_INT 36
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 101
48164: PUSH
48165: LD_INT 102
48167: PUSH
48168: LD_INT 103
48170: PUSH
48171: LD_INT 105
48173: PUSH
48174: LD_INT 106
48176: PUSH
48177: LD_INT 108
48179: PUSH
48180: LD_INT 109
48182: PUSH
48183: LD_INT 112
48185: PUSH
48186: LD_INT 114
48188: PUSH
48189: LD_INT 116
48191: PUSH
48192: LD_INT 117
48194: PUSH
48195: LD_INT 118
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: ST_TO_ADDR
48216: GO 50315
48218: LD_INT 10
48220: DOUBLE
48221: EQUAL
48222: IFTRUE 48226
48224: GO 48422
48226: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
48227: LD_ADDR_VAR 0 2
48231: PUSH
48232: LD_INT 2
48234: PUSH
48235: LD_INT 4
48237: PUSH
48238: LD_INT 5
48240: PUSH
48241: LD_INT 6
48243: PUSH
48244: LD_INT 7
48246: PUSH
48247: LD_INT 8
48249: PUSH
48250: LD_INT 9
48252: PUSH
48253: LD_INT 10
48255: PUSH
48256: LD_INT 11
48258: PUSH
48259: LD_INT 12
48261: PUSH
48262: LD_INT 13
48264: PUSH
48265: LD_INT 14
48267: PUSH
48268: LD_INT 15
48270: PUSH
48271: LD_INT 16
48273: PUSH
48274: LD_INT 17
48276: PUSH
48277: LD_INT 18
48279: PUSH
48280: LD_INT 19
48282: PUSH
48283: LD_INT 20
48285: PUSH
48286: LD_INT 21
48288: PUSH
48289: LD_INT 22
48291: PUSH
48292: LD_INT 23
48294: PUSH
48295: LD_INT 24
48297: PUSH
48298: LD_INT 25
48300: PUSH
48301: LD_INT 26
48303: PUSH
48304: LD_INT 28
48306: PUSH
48307: LD_INT 30
48309: PUSH
48310: LD_INT 31
48312: PUSH
48313: LD_INT 32
48315: PUSH
48316: LD_INT 36
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 101
48352: PUSH
48353: LD_INT 102
48355: PUSH
48356: LD_INT 103
48358: PUSH
48359: LD_INT 104
48361: PUSH
48362: LD_INT 105
48364: PUSH
48365: LD_INT 106
48367: PUSH
48368: LD_INT 107
48370: PUSH
48371: LD_INT 108
48373: PUSH
48374: LD_INT 109
48376: PUSH
48377: LD_INT 110
48379: PUSH
48380: LD_INT 111
48382: PUSH
48383: LD_INT 112
48385: PUSH
48386: LD_INT 114
48388: PUSH
48389: LD_INT 116
48391: PUSH
48392: LD_INT 117
48394: PUSH
48395: LD_INT 118
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: ST_TO_ADDR
48420: GO 50315
48422: LD_INT 11
48424: DOUBLE
48425: EQUAL
48426: IFTRUE 48430
48428: GO 48634
48430: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
48431: LD_ADDR_VAR 0 2
48435: PUSH
48436: LD_INT 2
48438: PUSH
48439: LD_INT 3
48441: PUSH
48442: LD_INT 4
48444: PUSH
48445: LD_INT 5
48447: PUSH
48448: LD_INT 6
48450: PUSH
48451: LD_INT 7
48453: PUSH
48454: LD_INT 8
48456: PUSH
48457: LD_INT 9
48459: PUSH
48460: LD_INT 10
48462: PUSH
48463: LD_INT 11
48465: PUSH
48466: LD_INT 12
48468: PUSH
48469: LD_INT 13
48471: PUSH
48472: LD_INT 14
48474: PUSH
48475: LD_INT 15
48477: PUSH
48478: LD_INT 16
48480: PUSH
48481: LD_INT 17
48483: PUSH
48484: LD_INT 18
48486: PUSH
48487: LD_INT 19
48489: PUSH
48490: LD_INT 20
48492: PUSH
48493: LD_INT 21
48495: PUSH
48496: LD_INT 22
48498: PUSH
48499: LD_INT 23
48501: PUSH
48502: LD_INT 24
48504: PUSH
48505: LD_INT 25
48507: PUSH
48508: LD_INT 26
48510: PUSH
48511: LD_INT 28
48513: PUSH
48514: LD_INT 30
48516: PUSH
48517: LD_INT 31
48519: PUSH
48520: LD_INT 32
48522: PUSH
48523: LD_INT 34
48525: PUSH
48526: LD_INT 36
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 101
48564: PUSH
48565: LD_INT 102
48567: PUSH
48568: LD_INT 103
48570: PUSH
48571: LD_INT 104
48573: PUSH
48574: LD_INT 105
48576: PUSH
48577: LD_INT 106
48579: PUSH
48580: LD_INT 107
48582: PUSH
48583: LD_INT 108
48585: PUSH
48586: LD_INT 109
48588: PUSH
48589: LD_INT 110
48591: PUSH
48592: LD_INT 111
48594: PUSH
48595: LD_INT 112
48597: PUSH
48598: LD_INT 114
48600: PUSH
48601: LD_INT 116
48603: PUSH
48604: LD_INT 117
48606: PUSH
48607: LD_INT 118
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: ST_TO_ADDR
48632: GO 50315
48634: LD_INT 12
48636: DOUBLE
48637: EQUAL
48638: IFTRUE 48642
48640: GO 48862
48642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
48643: LD_ADDR_VAR 0 2
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: LD_INT 3
48656: PUSH
48657: LD_INT 4
48659: PUSH
48660: LD_INT 5
48662: PUSH
48663: LD_INT 6
48665: PUSH
48666: LD_INT 7
48668: PUSH
48669: LD_INT 8
48671: PUSH
48672: LD_INT 9
48674: PUSH
48675: LD_INT 10
48677: PUSH
48678: LD_INT 11
48680: PUSH
48681: LD_INT 12
48683: PUSH
48684: LD_INT 13
48686: PUSH
48687: LD_INT 14
48689: PUSH
48690: LD_INT 15
48692: PUSH
48693: LD_INT 16
48695: PUSH
48696: LD_INT 17
48698: PUSH
48699: LD_INT 18
48701: PUSH
48702: LD_INT 19
48704: PUSH
48705: LD_INT 20
48707: PUSH
48708: LD_INT 21
48710: PUSH
48711: LD_INT 22
48713: PUSH
48714: LD_INT 23
48716: PUSH
48717: LD_INT 24
48719: PUSH
48720: LD_INT 25
48722: PUSH
48723: LD_INT 26
48725: PUSH
48726: LD_INT 27
48728: PUSH
48729: LD_INT 28
48731: PUSH
48732: LD_INT 30
48734: PUSH
48735: LD_INT 31
48737: PUSH
48738: LD_INT 32
48740: PUSH
48741: LD_INT 33
48743: PUSH
48744: LD_INT 34
48746: PUSH
48747: LD_INT 36
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 101
48788: PUSH
48789: LD_INT 102
48791: PUSH
48792: LD_INT 103
48794: PUSH
48795: LD_INT 104
48797: PUSH
48798: LD_INT 105
48800: PUSH
48801: LD_INT 106
48803: PUSH
48804: LD_INT 107
48806: PUSH
48807: LD_INT 108
48809: PUSH
48810: LD_INT 109
48812: PUSH
48813: LD_INT 110
48815: PUSH
48816: LD_INT 111
48818: PUSH
48819: LD_INT 112
48821: PUSH
48822: LD_INT 113
48824: PUSH
48825: LD_INT 114
48827: PUSH
48828: LD_INT 116
48830: PUSH
48831: LD_INT 117
48833: PUSH
48834: LD_INT 118
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: ST_TO_ADDR
48860: GO 50315
48862: LD_INT 13
48864: DOUBLE
48865: EQUAL
48866: IFTRUE 48870
48868: GO 49078
48870: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
48871: LD_ADDR_VAR 0 2
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: LD_INT 3
48884: PUSH
48885: LD_INT 4
48887: PUSH
48888: LD_INT 5
48890: PUSH
48891: LD_INT 8
48893: PUSH
48894: LD_INT 9
48896: PUSH
48897: LD_INT 10
48899: PUSH
48900: LD_INT 11
48902: PUSH
48903: LD_INT 12
48905: PUSH
48906: LD_INT 14
48908: PUSH
48909: LD_INT 15
48911: PUSH
48912: LD_INT 16
48914: PUSH
48915: LD_INT 17
48917: PUSH
48918: LD_INT 18
48920: PUSH
48921: LD_INT 19
48923: PUSH
48924: LD_INT 20
48926: PUSH
48927: LD_INT 21
48929: PUSH
48930: LD_INT 22
48932: PUSH
48933: LD_INT 23
48935: PUSH
48936: LD_INT 24
48938: PUSH
48939: LD_INT 25
48941: PUSH
48942: LD_INT 26
48944: PUSH
48945: LD_INT 27
48947: PUSH
48948: LD_INT 28
48950: PUSH
48951: LD_INT 30
48953: PUSH
48954: LD_INT 31
48956: PUSH
48957: LD_INT 32
48959: PUSH
48960: LD_INT 33
48962: PUSH
48963: LD_INT 34
48965: PUSH
48966: LD_INT 36
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 101
49004: PUSH
49005: LD_INT 102
49007: PUSH
49008: LD_INT 103
49010: PUSH
49011: LD_INT 104
49013: PUSH
49014: LD_INT 105
49016: PUSH
49017: LD_INT 106
49019: PUSH
49020: LD_INT 107
49022: PUSH
49023: LD_INT 108
49025: PUSH
49026: LD_INT 109
49028: PUSH
49029: LD_INT 110
49031: PUSH
49032: LD_INT 111
49034: PUSH
49035: LD_INT 112
49037: PUSH
49038: LD_INT 113
49040: PUSH
49041: LD_INT 114
49043: PUSH
49044: LD_INT 116
49046: PUSH
49047: LD_INT 117
49049: PUSH
49050: LD_INT 118
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: ST_TO_ADDR
49076: GO 50315
49078: LD_INT 14
49080: DOUBLE
49081: EQUAL
49082: IFTRUE 49086
49084: GO 49310
49086: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
49087: LD_ADDR_VAR 0 2
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 2
49097: PUSH
49098: LD_INT 3
49100: PUSH
49101: LD_INT 4
49103: PUSH
49104: LD_INT 5
49106: PUSH
49107: LD_INT 6
49109: PUSH
49110: LD_INT 7
49112: PUSH
49113: LD_INT 8
49115: PUSH
49116: LD_INT 9
49118: PUSH
49119: LD_INT 10
49121: PUSH
49122: LD_INT 11
49124: PUSH
49125: LD_INT 12
49127: PUSH
49128: LD_INT 13
49130: PUSH
49131: LD_INT 14
49133: PUSH
49134: LD_INT 15
49136: PUSH
49137: LD_INT 16
49139: PUSH
49140: LD_INT 17
49142: PUSH
49143: LD_INT 18
49145: PUSH
49146: LD_INT 19
49148: PUSH
49149: LD_INT 20
49151: PUSH
49152: LD_INT 21
49154: PUSH
49155: LD_INT 22
49157: PUSH
49158: LD_INT 23
49160: PUSH
49161: LD_INT 24
49163: PUSH
49164: LD_INT 25
49166: PUSH
49167: LD_INT 26
49169: PUSH
49170: LD_INT 27
49172: PUSH
49173: LD_INT 28
49175: PUSH
49176: LD_INT 29
49178: PUSH
49179: LD_INT 30
49181: PUSH
49182: LD_INT 31
49184: PUSH
49185: LD_INT 32
49187: PUSH
49188: LD_INT 33
49190: PUSH
49191: LD_INT 34
49193: PUSH
49194: LD_INT 36
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 101
49236: PUSH
49237: LD_INT 102
49239: PUSH
49240: LD_INT 103
49242: PUSH
49243: LD_INT 104
49245: PUSH
49246: LD_INT 105
49248: PUSH
49249: LD_INT 106
49251: PUSH
49252: LD_INT 107
49254: PUSH
49255: LD_INT 108
49257: PUSH
49258: LD_INT 109
49260: PUSH
49261: LD_INT 110
49263: PUSH
49264: LD_INT 111
49266: PUSH
49267: LD_INT 112
49269: PUSH
49270: LD_INT 113
49272: PUSH
49273: LD_INT 114
49275: PUSH
49276: LD_INT 116
49278: PUSH
49279: LD_INT 117
49281: PUSH
49282: LD_INT 118
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: ST_TO_ADDR
49308: GO 50315
49310: LD_INT 15
49312: DOUBLE
49313: EQUAL
49314: IFTRUE 49318
49316: GO 49542
49318: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
49319: LD_ADDR_VAR 0 2
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: LD_INT 2
49329: PUSH
49330: LD_INT 3
49332: PUSH
49333: LD_INT 4
49335: PUSH
49336: LD_INT 5
49338: PUSH
49339: LD_INT 6
49341: PUSH
49342: LD_INT 7
49344: PUSH
49345: LD_INT 8
49347: PUSH
49348: LD_INT 9
49350: PUSH
49351: LD_INT 10
49353: PUSH
49354: LD_INT 11
49356: PUSH
49357: LD_INT 12
49359: PUSH
49360: LD_INT 13
49362: PUSH
49363: LD_INT 14
49365: PUSH
49366: LD_INT 15
49368: PUSH
49369: LD_INT 16
49371: PUSH
49372: LD_INT 17
49374: PUSH
49375: LD_INT 18
49377: PUSH
49378: LD_INT 19
49380: PUSH
49381: LD_INT 20
49383: PUSH
49384: LD_INT 21
49386: PUSH
49387: LD_INT 22
49389: PUSH
49390: LD_INT 23
49392: PUSH
49393: LD_INT 24
49395: PUSH
49396: LD_INT 25
49398: PUSH
49399: LD_INT 26
49401: PUSH
49402: LD_INT 27
49404: PUSH
49405: LD_INT 28
49407: PUSH
49408: LD_INT 29
49410: PUSH
49411: LD_INT 30
49413: PUSH
49414: LD_INT 31
49416: PUSH
49417: LD_INT 32
49419: PUSH
49420: LD_INT 33
49422: PUSH
49423: LD_INT 34
49425: PUSH
49426: LD_INT 36
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 101
49468: PUSH
49469: LD_INT 102
49471: PUSH
49472: LD_INT 103
49474: PUSH
49475: LD_INT 104
49477: PUSH
49478: LD_INT 105
49480: PUSH
49481: LD_INT 106
49483: PUSH
49484: LD_INT 107
49486: PUSH
49487: LD_INT 108
49489: PUSH
49490: LD_INT 109
49492: PUSH
49493: LD_INT 110
49495: PUSH
49496: LD_INT 111
49498: PUSH
49499: LD_INT 112
49501: PUSH
49502: LD_INT 113
49504: PUSH
49505: LD_INT 114
49507: PUSH
49508: LD_INT 116
49510: PUSH
49511: LD_INT 117
49513: PUSH
49514: LD_INT 118
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: ST_TO_ADDR
49540: GO 50315
49542: LD_INT 16
49544: DOUBLE
49545: EQUAL
49546: IFTRUE 49550
49548: GO 49686
49550: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
49551: LD_ADDR_VAR 0 2
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 4
49561: PUSH
49562: LD_INT 5
49564: PUSH
49565: LD_INT 7
49567: PUSH
49568: LD_INT 11
49570: PUSH
49571: LD_INT 12
49573: PUSH
49574: LD_INT 15
49576: PUSH
49577: LD_INT 16
49579: PUSH
49580: LD_INT 20
49582: PUSH
49583: LD_INT 21
49585: PUSH
49586: LD_INT 22
49588: PUSH
49589: LD_INT 23
49591: PUSH
49592: LD_INT 25
49594: PUSH
49595: LD_INT 26
49597: PUSH
49598: LD_INT 30
49600: PUSH
49601: LD_INT 31
49603: PUSH
49604: LD_INT 32
49606: PUSH
49607: LD_INT 33
49609: PUSH
49610: LD_INT 34
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 101
49636: PUSH
49637: LD_INT 102
49639: PUSH
49640: LD_INT 103
49642: PUSH
49643: LD_INT 106
49645: PUSH
49646: LD_INT 108
49648: PUSH
49649: LD_INT 112
49651: PUSH
49652: LD_INT 113
49654: PUSH
49655: LD_INT 114
49657: PUSH
49658: LD_INT 116
49660: PUSH
49661: LD_INT 117
49663: PUSH
49664: LD_INT 118
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: ST_TO_ADDR
49684: GO 50315
49686: LD_INT 17
49688: DOUBLE
49689: EQUAL
49690: IFTRUE 49694
49692: GO 49918
49694: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
49695: LD_ADDR_VAR 0 2
49699: PUSH
49700: LD_INT 1
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: LD_INT 3
49708: PUSH
49709: LD_INT 4
49711: PUSH
49712: LD_INT 5
49714: PUSH
49715: LD_INT 6
49717: PUSH
49718: LD_INT 7
49720: PUSH
49721: LD_INT 8
49723: PUSH
49724: LD_INT 9
49726: PUSH
49727: LD_INT 10
49729: PUSH
49730: LD_INT 11
49732: PUSH
49733: LD_INT 12
49735: PUSH
49736: LD_INT 13
49738: PUSH
49739: LD_INT 14
49741: PUSH
49742: LD_INT 15
49744: PUSH
49745: LD_INT 16
49747: PUSH
49748: LD_INT 17
49750: PUSH
49751: LD_INT 18
49753: PUSH
49754: LD_INT 19
49756: PUSH
49757: LD_INT 20
49759: PUSH
49760: LD_INT 21
49762: PUSH
49763: LD_INT 22
49765: PUSH
49766: LD_INT 23
49768: PUSH
49769: LD_INT 24
49771: PUSH
49772: LD_INT 25
49774: PUSH
49775: LD_INT 26
49777: PUSH
49778: LD_INT 27
49780: PUSH
49781: LD_INT 28
49783: PUSH
49784: LD_INT 29
49786: PUSH
49787: LD_INT 30
49789: PUSH
49790: LD_INT 31
49792: PUSH
49793: LD_INT 32
49795: PUSH
49796: LD_INT 33
49798: PUSH
49799: LD_INT 34
49801: PUSH
49802: LD_INT 36
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 101
49844: PUSH
49845: LD_INT 102
49847: PUSH
49848: LD_INT 103
49850: PUSH
49851: LD_INT 104
49853: PUSH
49854: LD_INT 105
49856: PUSH
49857: LD_INT 106
49859: PUSH
49860: LD_INT 107
49862: PUSH
49863: LD_INT 108
49865: PUSH
49866: LD_INT 109
49868: PUSH
49869: LD_INT 110
49871: PUSH
49872: LD_INT 111
49874: PUSH
49875: LD_INT 112
49877: PUSH
49878: LD_INT 113
49880: PUSH
49881: LD_INT 114
49883: PUSH
49884: LD_INT 116
49886: PUSH
49887: LD_INT 117
49889: PUSH
49890: LD_INT 118
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: ST_TO_ADDR
49916: GO 50315
49918: LD_INT 18
49920: DOUBLE
49921: EQUAL
49922: IFTRUE 49926
49924: GO 50074
49926: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
49927: LD_ADDR_VAR 0 2
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: LD_INT 4
49937: PUSH
49938: LD_INT 5
49940: PUSH
49941: LD_INT 7
49943: PUSH
49944: LD_INT 11
49946: PUSH
49947: LD_INT 12
49949: PUSH
49950: LD_INT 15
49952: PUSH
49953: LD_INT 16
49955: PUSH
49956: LD_INT 20
49958: PUSH
49959: LD_INT 21
49961: PUSH
49962: LD_INT 22
49964: PUSH
49965: LD_INT 23
49967: PUSH
49968: LD_INT 25
49970: PUSH
49971: LD_INT 26
49973: PUSH
49974: LD_INT 30
49976: PUSH
49977: LD_INT 31
49979: PUSH
49980: LD_INT 32
49982: PUSH
49983: LD_INT 33
49985: PUSH
49986: LD_INT 34
49988: PUSH
49989: LD_INT 35
49991: PUSH
49992: LD_INT 36
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 101
50020: PUSH
50021: LD_INT 102
50023: PUSH
50024: LD_INT 103
50026: PUSH
50027: LD_INT 106
50029: PUSH
50030: LD_INT 108
50032: PUSH
50033: LD_INT 112
50035: PUSH
50036: LD_INT 113
50038: PUSH
50039: LD_INT 114
50041: PUSH
50042: LD_INT 115
50044: PUSH
50045: LD_INT 116
50047: PUSH
50048: LD_INT 117
50050: PUSH
50051: LD_INT 118
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: ST_TO_ADDR
50072: GO 50315
50074: LD_INT 19
50076: DOUBLE
50077: EQUAL
50078: IFTRUE 50082
50080: GO 50314
50082: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
50083: LD_ADDR_VAR 0 2
50087: PUSH
50088: LD_INT 1
50090: PUSH
50091: LD_INT 2
50093: PUSH
50094: LD_INT 3
50096: PUSH
50097: LD_INT 4
50099: PUSH
50100: LD_INT 5
50102: PUSH
50103: LD_INT 6
50105: PUSH
50106: LD_INT 7
50108: PUSH
50109: LD_INT 8
50111: PUSH
50112: LD_INT 9
50114: PUSH
50115: LD_INT 10
50117: PUSH
50118: LD_INT 11
50120: PUSH
50121: LD_INT 12
50123: PUSH
50124: LD_INT 13
50126: PUSH
50127: LD_INT 14
50129: PUSH
50130: LD_INT 15
50132: PUSH
50133: LD_INT 16
50135: PUSH
50136: LD_INT 17
50138: PUSH
50139: LD_INT 18
50141: PUSH
50142: LD_INT 19
50144: PUSH
50145: LD_INT 20
50147: PUSH
50148: LD_INT 21
50150: PUSH
50151: LD_INT 22
50153: PUSH
50154: LD_INT 23
50156: PUSH
50157: LD_INT 24
50159: PUSH
50160: LD_INT 25
50162: PUSH
50163: LD_INT 26
50165: PUSH
50166: LD_INT 27
50168: PUSH
50169: LD_INT 28
50171: PUSH
50172: LD_INT 29
50174: PUSH
50175: LD_INT 30
50177: PUSH
50178: LD_INT 31
50180: PUSH
50181: LD_INT 32
50183: PUSH
50184: LD_INT 33
50186: PUSH
50187: LD_INT 34
50189: PUSH
50190: LD_INT 35
50192: PUSH
50193: LD_INT 36
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 101
50236: PUSH
50237: LD_INT 102
50239: PUSH
50240: LD_INT 103
50242: PUSH
50243: LD_INT 104
50245: PUSH
50246: LD_INT 105
50248: PUSH
50249: LD_INT 106
50251: PUSH
50252: LD_INT 107
50254: PUSH
50255: LD_INT 108
50257: PUSH
50258: LD_INT 109
50260: PUSH
50261: LD_INT 110
50263: PUSH
50264: LD_INT 111
50266: PUSH
50267: LD_INT 112
50269: PUSH
50270: LD_INT 113
50272: PUSH
50273: LD_INT 114
50275: PUSH
50276: LD_INT 115
50278: PUSH
50279: LD_INT 116
50281: PUSH
50282: LD_INT 117
50284: PUSH
50285: LD_INT 118
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: ST_TO_ADDR
50312: GO 50315
50314: POP
// end else
50315: GO 50546
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
50317: LD_ADDR_VAR 0 2
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: LD_INT 4
50333: PUSH
50334: LD_INT 5
50336: PUSH
50337: LD_INT 6
50339: PUSH
50340: LD_INT 7
50342: PUSH
50343: LD_INT 8
50345: PUSH
50346: LD_INT 9
50348: PUSH
50349: LD_INT 10
50351: PUSH
50352: LD_INT 11
50354: PUSH
50355: LD_INT 12
50357: PUSH
50358: LD_INT 13
50360: PUSH
50361: LD_INT 14
50363: PUSH
50364: LD_INT 15
50366: PUSH
50367: LD_INT 16
50369: PUSH
50370: LD_INT 17
50372: PUSH
50373: LD_INT 18
50375: PUSH
50376: LD_INT 19
50378: PUSH
50379: LD_INT 20
50381: PUSH
50382: LD_INT 21
50384: PUSH
50385: LD_INT 22
50387: PUSH
50388: LD_INT 23
50390: PUSH
50391: LD_INT 24
50393: PUSH
50394: LD_INT 25
50396: PUSH
50397: LD_INT 26
50399: PUSH
50400: LD_INT 27
50402: PUSH
50403: LD_INT 28
50405: PUSH
50406: LD_INT 29
50408: PUSH
50409: LD_INT 30
50411: PUSH
50412: LD_INT 31
50414: PUSH
50415: LD_INT 32
50417: PUSH
50418: LD_INT 33
50420: PUSH
50421: LD_INT 34
50423: PUSH
50424: LD_INT 35
50426: PUSH
50427: LD_INT 36
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 101
50470: PUSH
50471: LD_INT 102
50473: PUSH
50474: LD_INT 103
50476: PUSH
50477: LD_INT 104
50479: PUSH
50480: LD_INT 105
50482: PUSH
50483: LD_INT 106
50485: PUSH
50486: LD_INT 107
50488: PUSH
50489: LD_INT 108
50491: PUSH
50492: LD_INT 109
50494: PUSH
50495: LD_INT 110
50497: PUSH
50498: LD_INT 111
50500: PUSH
50501: LD_INT 112
50503: PUSH
50504: LD_INT 113
50506: PUSH
50507: LD_INT 114
50509: PUSH
50510: LD_INT 115
50512: PUSH
50513: LD_INT 116
50515: PUSH
50516: LD_INT 117
50518: PUSH
50519: LD_INT 118
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// if result then
50546: LD_VAR 0 2
50550: IFFALSE 51336
// begin normal :=  ;
50552: LD_ADDR_VAR 0 5
50556: PUSH
50557: LD_STRING 
50559: ST_TO_ADDR
// hardcore :=  ;
50560: LD_ADDR_VAR 0 6
50564: PUSH
50565: LD_STRING 
50567: ST_TO_ADDR
// active :=  ;
50568: LD_ADDR_VAR 0 7
50572: PUSH
50573: LD_STRING 
50575: ST_TO_ADDR
// for i = 1 to normalCounter do
50576: LD_ADDR_VAR 0 8
50580: PUSH
50581: DOUBLE
50582: LD_INT 1
50584: DEC
50585: ST_TO_ADDR
50586: LD_EXP 64
50590: PUSH
50591: FOR_TO
50592: IFFALSE 50693
// begin tmp := 0 ;
50594: LD_ADDR_VAR 0 3
50598: PUSH
50599: LD_STRING 0
50601: ST_TO_ADDR
// if result [ 1 ] then
50602: LD_VAR 0 2
50606: PUSH
50607: LD_INT 1
50609: ARRAY
50610: IFFALSE 50675
// if result [ 1 ] [ 1 ] = i then
50612: LD_VAR 0 2
50616: PUSH
50617: LD_INT 1
50619: ARRAY
50620: PUSH
50621: LD_INT 1
50623: ARRAY
50624: PUSH
50625: LD_VAR 0 8
50629: EQUAL
50630: IFFALSE 50675
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
50632: LD_ADDR_VAR 0 2
50636: PUSH
50637: LD_VAR 0 2
50641: PPUSH
50642: LD_INT 1
50644: PPUSH
50645: LD_VAR 0 2
50649: PUSH
50650: LD_INT 1
50652: ARRAY
50653: PPUSH
50654: LD_INT 1
50656: PPUSH
50657: CALL_OW 3
50661: PPUSH
50662: CALL_OW 1
50666: ST_TO_ADDR
// tmp := 1 ;
50667: LD_ADDR_VAR 0 3
50671: PUSH
50672: LD_STRING 1
50674: ST_TO_ADDR
// end ; normal := normal & tmp ;
50675: LD_ADDR_VAR 0 5
50679: PUSH
50680: LD_VAR 0 5
50684: PUSH
50685: LD_VAR 0 3
50689: STR
50690: ST_TO_ADDR
// end ;
50691: GO 50591
50693: POP
50694: POP
// for i = 1 to hardcoreCounter do
50695: LD_ADDR_VAR 0 8
50699: PUSH
50700: DOUBLE
50701: LD_INT 1
50703: DEC
50704: ST_TO_ADDR
50705: LD_EXP 65
50709: PUSH
50710: FOR_TO
50711: IFFALSE 50816
// begin tmp := 0 ;
50713: LD_ADDR_VAR 0 3
50717: PUSH
50718: LD_STRING 0
50720: ST_TO_ADDR
// if result [ 2 ] then
50721: LD_VAR 0 2
50725: PUSH
50726: LD_INT 2
50728: ARRAY
50729: IFFALSE 50798
// if result [ 2 ] [ 1 ] = 100 + i then
50731: LD_VAR 0 2
50735: PUSH
50736: LD_INT 2
50738: ARRAY
50739: PUSH
50740: LD_INT 1
50742: ARRAY
50743: PUSH
50744: LD_INT 100
50746: PUSH
50747: LD_VAR 0 8
50751: PLUS
50752: EQUAL
50753: IFFALSE 50798
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
50755: LD_ADDR_VAR 0 2
50759: PUSH
50760: LD_VAR 0 2
50764: PPUSH
50765: LD_INT 2
50767: PPUSH
50768: LD_VAR 0 2
50772: PUSH
50773: LD_INT 2
50775: ARRAY
50776: PPUSH
50777: LD_INT 1
50779: PPUSH
50780: CALL_OW 3
50784: PPUSH
50785: CALL_OW 1
50789: ST_TO_ADDR
// tmp := 1 ;
50790: LD_ADDR_VAR 0 3
50794: PUSH
50795: LD_STRING 1
50797: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
50798: LD_ADDR_VAR 0 6
50802: PUSH
50803: LD_VAR 0 6
50807: PUSH
50808: LD_VAR 0 3
50812: STR
50813: ST_TO_ADDR
// end ;
50814: GO 50710
50816: POP
50817: POP
// if isGameLoad then
50818: LD_VAR 0 1
50822: IFFALSE 51297
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
50824: LD_ADDR_VAR 0 4
50828: PUSH
50829: LD_EXP 68
50833: PUSH
50834: LD_EXP 67
50838: PUSH
50839: LD_EXP 69
50843: PUSH
50844: LD_EXP 66
50848: PUSH
50849: LD_EXP 70
50853: PUSH
50854: LD_EXP 71
50858: PUSH
50859: LD_EXP 72
50863: PUSH
50864: LD_EXP 73
50868: PUSH
50869: LD_EXP 74
50873: PUSH
50874: LD_EXP 75
50878: PUSH
50879: LD_EXP 76
50883: PUSH
50884: LD_EXP 77
50888: PUSH
50889: LD_EXP 78
50893: PUSH
50894: LD_EXP 79
50898: PUSH
50899: LD_EXP 87
50903: PUSH
50904: LD_EXP 88
50908: PUSH
50909: LD_EXP 89
50913: PUSH
50914: LD_EXP 90
50918: PUSH
50919: LD_EXP 92
50923: PUSH
50924: LD_EXP 93
50928: PUSH
50929: LD_EXP 94
50933: PUSH
50934: LD_EXP 97
50938: PUSH
50939: LD_EXP 99
50943: PUSH
50944: LD_EXP 100
50948: PUSH
50949: LD_EXP 101
50953: PUSH
50954: LD_EXP 103
50958: PUSH
50959: LD_EXP 104
50963: PUSH
50964: LD_EXP 107
50968: PUSH
50969: LD_EXP 108
50973: PUSH
50974: LD_EXP 109
50978: PUSH
50979: LD_EXP 110
50983: PUSH
50984: LD_EXP 111
50988: PUSH
50989: LD_EXP 112
50993: PUSH
50994: LD_EXP 113
50998: PUSH
50999: LD_EXP 114
51003: PUSH
51004: LD_EXP 115
51008: PUSH
51009: LD_EXP 80
51013: PUSH
51014: LD_EXP 81
51018: PUSH
51019: LD_EXP 84
51023: PUSH
51024: LD_EXP 85
51028: PUSH
51029: LD_EXP 86
51033: PUSH
51034: LD_EXP 82
51038: PUSH
51039: LD_EXP 83
51043: PUSH
51044: LD_EXP 91
51048: PUSH
51049: LD_EXP 95
51053: PUSH
51054: LD_EXP 96
51058: PUSH
51059: LD_EXP 98
51063: PUSH
51064: LD_EXP 102
51068: PUSH
51069: LD_EXP 105
51073: PUSH
51074: LD_EXP 106
51078: PUSH
51079: LD_EXP 116
51083: PUSH
51084: LD_EXP 117
51088: PUSH
51089: LD_EXP 118
51093: PUSH
51094: LD_EXP 119
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: ST_TO_ADDR
// tmp :=  ;
51155: LD_ADDR_VAR 0 3
51159: PUSH
51160: LD_STRING 
51162: ST_TO_ADDR
// for i = 1 to normalCounter do
51163: LD_ADDR_VAR 0 8
51167: PUSH
51168: DOUBLE
51169: LD_INT 1
51171: DEC
51172: ST_TO_ADDR
51173: LD_EXP 64
51177: PUSH
51178: FOR_TO
51179: IFFALSE 51215
// begin if flags [ i ] then
51181: LD_VAR 0 4
51185: PUSH
51186: LD_VAR 0 8
51190: ARRAY
51191: IFFALSE 51213
// tmp := tmp & i & ; ;
51193: LD_ADDR_VAR 0 3
51197: PUSH
51198: LD_VAR 0 3
51202: PUSH
51203: LD_VAR 0 8
51207: STR
51208: PUSH
51209: LD_STRING ;
51211: STR
51212: ST_TO_ADDR
// end ;
51213: GO 51178
51215: POP
51216: POP
// for i = 1 to hardcoreCounter do
51217: LD_ADDR_VAR 0 8
51221: PUSH
51222: DOUBLE
51223: LD_INT 1
51225: DEC
51226: ST_TO_ADDR
51227: LD_EXP 65
51231: PUSH
51232: FOR_TO
51233: IFFALSE 51279
// begin if flags [ normalCounter + i ] then
51235: LD_VAR 0 4
51239: PUSH
51240: LD_EXP 64
51244: PUSH
51245: LD_VAR 0 8
51249: PLUS
51250: ARRAY
51251: IFFALSE 51277
// tmp := tmp & ( 100 + i ) & ; ;
51253: LD_ADDR_VAR 0 3
51257: PUSH
51258: LD_VAR 0 3
51262: PUSH
51263: LD_INT 100
51265: PUSH
51266: LD_VAR 0 8
51270: PLUS
51271: STR
51272: PUSH
51273: LD_STRING ;
51275: STR
51276: ST_TO_ADDR
// end ;
51277: GO 51232
51279: POP
51280: POP
// if tmp then
51281: LD_VAR 0 3
51285: IFFALSE 51297
// active := tmp ;
51287: LD_ADDR_VAR 0 7
51291: PUSH
51292: LD_VAR 0 3
51296: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
51297: LD_STRING getStreamItemsFromMission("
51299: PUSH
51300: LD_VAR 0 5
51304: STR
51305: PUSH
51306: LD_STRING ","
51308: STR
51309: PUSH
51310: LD_VAR 0 6
51314: STR
51315: PUSH
51316: LD_STRING ","
51318: STR
51319: PUSH
51320: LD_VAR 0 7
51324: STR
51325: PUSH
51326: LD_STRING ")
51328: STR
51329: PPUSH
51330: CALL_OW 559
// end else
51334: GO 51343
// ToLua ( getStreamItemsFromMission("","","") ) ;
51336: LD_STRING getStreamItemsFromMission("","","")
51338: PPUSH
51339: CALL_OW 559
// end ;
51343: LD_VAR 0 2
51347: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
51348: LD_EXP 63
51352: PUSH
51353: LD_EXP 68
51357: AND
51358: IFFALSE 51482
51360: GO 51362
51362: DISABLE
51363: LD_INT 0
51365: PPUSH
51366: PPUSH
// begin enable ;
51367: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
51368: LD_ADDR_VAR 0 2
51372: PUSH
51373: LD_INT 22
51375: PUSH
51376: LD_OWVAR 2
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: LD_INT 34
51390: PUSH
51391: LD_INT 7
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 34
51400: PUSH
51401: LD_INT 45
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 34
51410: PUSH
51411: LD_INT 28
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 34
51420: PUSH
51421: LD_INT 47
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PPUSH
51439: CALL_OW 69
51443: ST_TO_ADDR
// if not tmp then
51444: LD_VAR 0 2
51448: NOT
51449: IFFALSE 51453
// exit ;
51451: GO 51482
// for i in tmp do
51453: LD_ADDR_VAR 0 1
51457: PUSH
51458: LD_VAR 0 2
51462: PUSH
51463: FOR_IN
51464: IFFALSE 51480
// begin SetLives ( i , 0 ) ;
51466: LD_VAR 0 1
51470: PPUSH
51471: LD_INT 0
51473: PPUSH
51474: CALL_OW 234
// end ;
51478: GO 51463
51480: POP
51481: POP
// end ;
51482: PPOPN 2
51484: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
51485: LD_EXP 63
51489: PUSH
51490: LD_EXP 69
51494: AND
51495: IFFALSE 51579
51497: GO 51499
51499: DISABLE
51500: LD_INT 0
51502: PPUSH
51503: PPUSH
// begin enable ;
51504: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
51505: LD_ADDR_VAR 0 2
51509: PUSH
51510: LD_INT 22
51512: PUSH
51513: LD_OWVAR 2
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 32
51524: PUSH
51525: LD_INT 3
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PPUSH
51536: CALL_OW 69
51540: ST_TO_ADDR
// if not tmp then
51541: LD_VAR 0 2
51545: NOT
51546: IFFALSE 51550
// exit ;
51548: GO 51579
// for i in tmp do
51550: LD_ADDR_VAR 0 1
51554: PUSH
51555: LD_VAR 0 2
51559: PUSH
51560: FOR_IN
51561: IFFALSE 51577
// begin SetLives ( i , 0 ) ;
51563: LD_VAR 0 1
51567: PPUSH
51568: LD_INT 0
51570: PPUSH
51571: CALL_OW 234
// end ;
51575: GO 51560
51577: POP
51578: POP
// end ;
51579: PPOPN 2
51581: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
51582: LD_EXP 63
51586: PUSH
51587: LD_EXP 66
51591: AND
51592: IFFALSE 51685
51594: GO 51596
51596: DISABLE
51597: LD_INT 0
51599: PPUSH
// begin enable ;
51600: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
51601: LD_ADDR_VAR 0 1
51605: PUSH
51606: LD_INT 22
51608: PUSH
51609: LD_OWVAR 2
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 2
51620: PUSH
51621: LD_INT 25
51623: PUSH
51624: LD_INT 5
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 25
51633: PUSH
51634: LD_INT 9
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 25
51643: PUSH
51644: LD_INT 8
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PPUSH
51661: CALL_OW 69
51665: PUSH
51666: FOR_IN
51667: IFFALSE 51683
// begin SetClass ( i , 1 ) ;
51669: LD_VAR 0 1
51673: PPUSH
51674: LD_INT 1
51676: PPUSH
51677: CALL_OW 336
// end ;
51681: GO 51666
51683: POP
51684: POP
// end ;
51685: PPOPN 1
51687: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
51688: LD_EXP 63
51692: PUSH
51693: LD_EXP 67
51697: AND
51698: PUSH
51699: LD_OWVAR 65
51703: PUSH
51704: LD_INT 7
51706: LESS
51707: AND
51708: IFFALSE 51722
51710: GO 51712
51712: DISABLE
// begin enable ;
51713: ENABLE
// game_speed := 7 ;
51714: LD_ADDR_OWVAR 65
51718: PUSH
51719: LD_INT 7
51721: ST_TO_ADDR
// end ;
51722: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
51723: LD_EXP 63
51727: PUSH
51728: LD_EXP 70
51732: AND
51733: IFFALSE 51935
51735: GO 51737
51737: DISABLE
51738: LD_INT 0
51740: PPUSH
51741: PPUSH
51742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
51743: LD_ADDR_VAR 0 3
51747: PUSH
51748: LD_INT 81
51750: PUSH
51751: LD_OWVAR 2
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 21
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PPUSH
51774: CALL_OW 69
51778: ST_TO_ADDR
// if not tmp then
51779: LD_VAR 0 3
51783: NOT
51784: IFFALSE 51788
// exit ;
51786: GO 51935
// if tmp > 5 then
51788: LD_VAR 0 3
51792: PUSH
51793: LD_INT 5
51795: GREATER
51796: IFFALSE 51808
// k := 5 else
51798: LD_ADDR_VAR 0 2
51802: PUSH
51803: LD_INT 5
51805: ST_TO_ADDR
51806: GO 51818
// k := tmp ;
51808: LD_ADDR_VAR 0 2
51812: PUSH
51813: LD_VAR 0 3
51817: ST_TO_ADDR
// for i := 1 to k do
51818: LD_ADDR_VAR 0 1
51822: PUSH
51823: DOUBLE
51824: LD_INT 1
51826: DEC
51827: ST_TO_ADDR
51828: LD_VAR 0 2
51832: PUSH
51833: FOR_TO
51834: IFFALSE 51933
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
51836: LD_VAR 0 3
51840: PUSH
51841: LD_VAR 0 1
51845: ARRAY
51846: PPUSH
51847: LD_VAR 0 1
51851: PUSH
51852: LD_INT 4
51854: MOD
51855: PUSH
51856: LD_INT 1
51858: PLUS
51859: PPUSH
51860: CALL_OW 259
51864: PUSH
51865: LD_INT 10
51867: LESS
51868: IFFALSE 51931
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
51870: LD_VAR 0 3
51874: PUSH
51875: LD_VAR 0 1
51879: ARRAY
51880: PPUSH
51881: LD_VAR 0 1
51885: PUSH
51886: LD_INT 4
51888: MOD
51889: PUSH
51890: LD_INT 1
51892: PLUS
51893: PPUSH
51894: LD_VAR 0 3
51898: PUSH
51899: LD_VAR 0 1
51903: ARRAY
51904: PPUSH
51905: LD_VAR 0 1
51909: PUSH
51910: LD_INT 4
51912: MOD
51913: PUSH
51914: LD_INT 1
51916: PLUS
51917: PPUSH
51918: CALL_OW 259
51922: PUSH
51923: LD_INT 1
51925: PLUS
51926: PPUSH
51927: CALL_OW 237
51931: GO 51833
51933: POP
51934: POP
// end ;
51935: PPOPN 3
51937: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
51938: LD_EXP 63
51942: PUSH
51943: LD_EXP 71
51947: AND
51948: IFFALSE 51968
51950: GO 51952
51952: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
51953: LD_INT 4
51955: PPUSH
51956: LD_OWVAR 2
51960: PPUSH
51961: LD_INT 0
51963: PPUSH
51964: CALL_OW 324
51968: END
// every 0 0$1 trigger StreamModeActive and sShovel do
51969: LD_EXP 63
51973: PUSH
51974: LD_EXP 100
51978: AND
51979: IFFALSE 51999
51981: GO 51983
51983: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
51984: LD_INT 19
51986: PPUSH
51987: LD_OWVAR 2
51991: PPUSH
51992: LD_INT 0
51994: PPUSH
51995: CALL_OW 324
51999: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
52000: LD_EXP 63
52004: PUSH
52005: LD_EXP 72
52009: AND
52010: IFFALSE 52112
52012: GO 52014
52014: DISABLE
52015: LD_INT 0
52017: PPUSH
52018: PPUSH
// begin enable ;
52019: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
52020: LD_ADDR_VAR 0 2
52024: PUSH
52025: LD_INT 22
52027: PUSH
52028: LD_OWVAR 2
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: LD_INT 34
52042: PUSH
52043: LD_INT 11
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 34
52052: PUSH
52053: LD_INT 30
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: LIST
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PPUSH
52069: CALL_OW 69
52073: ST_TO_ADDR
// if not tmp then
52074: LD_VAR 0 2
52078: NOT
52079: IFFALSE 52083
// exit ;
52081: GO 52112
// for i in tmp do
52083: LD_ADDR_VAR 0 1
52087: PUSH
52088: LD_VAR 0 2
52092: PUSH
52093: FOR_IN
52094: IFFALSE 52110
// begin SetLives ( i , 0 ) ;
52096: LD_VAR 0 1
52100: PPUSH
52101: LD_INT 0
52103: PPUSH
52104: CALL_OW 234
// end ;
52108: GO 52093
52110: POP
52111: POP
// end ;
52112: PPOPN 2
52114: END
// every 0 0$1 trigger StreamModeActive and sBunker do
52115: LD_EXP 63
52119: PUSH
52120: LD_EXP 73
52124: AND
52125: IFFALSE 52145
52127: GO 52129
52129: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
52130: LD_INT 32
52132: PPUSH
52133: LD_OWVAR 2
52137: PPUSH
52138: LD_INT 0
52140: PPUSH
52141: CALL_OW 324
52145: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
52146: LD_EXP 63
52150: PUSH
52151: LD_EXP 74
52155: AND
52156: IFFALSE 52337
52158: GO 52160
52160: DISABLE
52161: LD_INT 0
52163: PPUSH
52164: PPUSH
52165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
52166: LD_ADDR_VAR 0 2
52170: PUSH
52171: LD_INT 22
52173: PUSH
52174: LD_OWVAR 2
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 33
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PPUSH
52197: CALL_OW 69
52201: ST_TO_ADDR
// if not tmp then
52202: LD_VAR 0 2
52206: NOT
52207: IFFALSE 52211
// exit ;
52209: GO 52337
// side := 0 ;
52211: LD_ADDR_VAR 0 3
52215: PUSH
52216: LD_INT 0
52218: ST_TO_ADDR
// for i := 1 to 8 do
52219: LD_ADDR_VAR 0 1
52223: PUSH
52224: DOUBLE
52225: LD_INT 1
52227: DEC
52228: ST_TO_ADDR
52229: LD_INT 8
52231: PUSH
52232: FOR_TO
52233: IFFALSE 52281
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
52235: LD_OWVAR 2
52239: PUSH
52240: LD_VAR 0 1
52244: NONEQUAL
52245: PUSH
52246: LD_OWVAR 2
52250: PPUSH
52251: LD_VAR 0 1
52255: PPUSH
52256: CALL_OW 81
52260: PUSH
52261: LD_INT 2
52263: EQUAL
52264: AND
52265: IFFALSE 52279
// begin side := i ;
52267: LD_ADDR_VAR 0 3
52271: PUSH
52272: LD_VAR 0 1
52276: ST_TO_ADDR
// break ;
52277: GO 52281
// end ;
52279: GO 52232
52281: POP
52282: POP
// if not side then
52283: LD_VAR 0 3
52287: NOT
52288: IFFALSE 52292
// exit ;
52290: GO 52337
// for i := 1 to tmp do
52292: LD_ADDR_VAR 0 1
52296: PUSH
52297: DOUBLE
52298: LD_INT 1
52300: DEC
52301: ST_TO_ADDR
52302: LD_VAR 0 2
52306: PUSH
52307: FOR_TO
52308: IFFALSE 52335
// if Prob ( 60 ) then
52310: LD_INT 60
52312: PPUSH
52313: CALL_OW 13
52317: IFFALSE 52333
// SetSide ( i , side ) ;
52319: LD_VAR 0 1
52323: PPUSH
52324: LD_VAR 0 3
52328: PPUSH
52329: CALL_OW 235
52333: GO 52307
52335: POP
52336: POP
// end ;
52337: PPOPN 3
52339: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
52340: LD_EXP 63
52344: PUSH
52345: LD_EXP 76
52349: AND
52350: IFFALSE 52469
52352: GO 52354
52354: DISABLE
52355: LD_INT 0
52357: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
52358: LD_ADDR_VAR 0 1
52362: PUSH
52363: LD_INT 22
52365: PUSH
52366: LD_OWVAR 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 21
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: LD_INT 23
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: PPUSH
52407: CALL_OW 69
52411: PUSH
52412: FOR_IN
52413: IFFALSE 52467
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
52415: LD_VAR 0 1
52419: PPUSH
52420: CALL_OW 257
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: LD_INT 3
52433: PUSH
52434: LD_INT 4
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: IN
52443: IFFALSE 52465
// SetClass ( un , rand ( 1 , 4 ) ) ;
52445: LD_VAR 0 1
52449: PPUSH
52450: LD_INT 1
52452: PPUSH
52453: LD_INT 4
52455: PPUSH
52456: CALL_OW 12
52460: PPUSH
52461: CALL_OW 336
52465: GO 52412
52467: POP
52468: POP
// end ;
52469: PPOPN 1
52471: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
52472: LD_EXP 63
52476: PUSH
52477: LD_EXP 75
52481: AND
52482: IFFALSE 52561
52484: GO 52486
52486: DISABLE
52487: LD_INT 0
52489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52490: LD_ADDR_VAR 0 1
52494: PUSH
52495: LD_INT 22
52497: PUSH
52498: LD_OWVAR 2
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 21
52509: PUSH
52510: LD_INT 3
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PPUSH
52521: CALL_OW 69
52525: ST_TO_ADDR
// if not tmp then
52526: LD_VAR 0 1
52530: NOT
52531: IFFALSE 52535
// exit ;
52533: GO 52561
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
52535: LD_VAR 0 1
52539: PUSH
52540: LD_INT 1
52542: PPUSH
52543: LD_VAR 0 1
52547: PPUSH
52548: CALL_OW 12
52552: ARRAY
52553: PPUSH
52554: LD_INT 100
52556: PPUSH
52557: CALL_OW 234
// end ;
52561: PPOPN 1
52563: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
52564: LD_EXP 63
52568: PUSH
52569: LD_EXP 77
52573: AND
52574: IFFALSE 52672
52576: GO 52578
52578: DISABLE
52579: LD_INT 0
52581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
52582: LD_ADDR_VAR 0 1
52586: PUSH
52587: LD_INT 22
52589: PUSH
52590: LD_OWVAR 2
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 21
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PPUSH
52613: CALL_OW 69
52617: ST_TO_ADDR
// if not tmp then
52618: LD_VAR 0 1
52622: NOT
52623: IFFALSE 52627
// exit ;
52625: GO 52672
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
52627: LD_VAR 0 1
52631: PUSH
52632: LD_INT 1
52634: PPUSH
52635: LD_VAR 0 1
52639: PPUSH
52640: CALL_OW 12
52644: ARRAY
52645: PPUSH
52646: LD_INT 1
52648: PPUSH
52649: LD_INT 4
52651: PPUSH
52652: CALL_OW 12
52656: PPUSH
52657: LD_INT 3000
52659: PPUSH
52660: LD_INT 9000
52662: PPUSH
52663: CALL_OW 12
52667: PPUSH
52668: CALL_OW 492
// end ;
52672: PPOPN 1
52674: END
// every 0 0$1 trigger StreamModeActive and sDepot do
52675: LD_EXP 63
52679: PUSH
52680: LD_EXP 78
52684: AND
52685: IFFALSE 52705
52687: GO 52689
52689: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
52690: LD_INT 1
52692: PPUSH
52693: LD_OWVAR 2
52697: PPUSH
52698: LD_INT 0
52700: PPUSH
52701: CALL_OW 324
52705: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
52706: LD_EXP 63
52710: PUSH
52711: LD_EXP 79
52715: AND
52716: IFFALSE 52799
52718: GO 52720
52720: DISABLE
52721: LD_INT 0
52723: PPUSH
52724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
52725: LD_ADDR_VAR 0 2
52729: PUSH
52730: LD_INT 22
52732: PUSH
52733: LD_OWVAR 2
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 21
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PPUSH
52756: CALL_OW 69
52760: ST_TO_ADDR
// if not tmp then
52761: LD_VAR 0 2
52765: NOT
52766: IFFALSE 52770
// exit ;
52768: GO 52799
// for i in tmp do
52770: LD_ADDR_VAR 0 1
52774: PUSH
52775: LD_VAR 0 2
52779: PUSH
52780: FOR_IN
52781: IFFALSE 52797
// SetBLevel ( i , 10 ) ;
52783: LD_VAR 0 1
52787: PPUSH
52788: LD_INT 10
52790: PPUSH
52791: CALL_OW 241
52795: GO 52780
52797: POP
52798: POP
// end ;
52799: PPOPN 2
52801: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
52802: LD_EXP 63
52806: PUSH
52807: LD_EXP 80
52811: AND
52812: IFFALSE 52923
52814: GO 52816
52816: DISABLE
52817: LD_INT 0
52819: PPUSH
52820: PPUSH
52821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52822: LD_ADDR_VAR 0 3
52826: PUSH
52827: LD_INT 22
52829: PUSH
52830: LD_OWVAR 2
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 25
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PPUSH
52853: CALL_OW 69
52857: ST_TO_ADDR
// if not tmp then
52858: LD_VAR 0 3
52862: NOT
52863: IFFALSE 52867
// exit ;
52865: GO 52923
// un := tmp [ rand ( 1 , tmp ) ] ;
52867: LD_ADDR_VAR 0 2
52871: PUSH
52872: LD_VAR 0 3
52876: PUSH
52877: LD_INT 1
52879: PPUSH
52880: LD_VAR 0 3
52884: PPUSH
52885: CALL_OW 12
52889: ARRAY
52890: ST_TO_ADDR
// if Crawls ( un ) then
52891: LD_VAR 0 2
52895: PPUSH
52896: CALL_OW 318
52900: IFFALSE 52911
// ComWalk ( un ) ;
52902: LD_VAR 0 2
52906: PPUSH
52907: CALL_OW 138
// SetClass ( un , class_sniper ) ;
52911: LD_VAR 0 2
52915: PPUSH
52916: LD_INT 5
52918: PPUSH
52919: CALL_OW 336
// end ;
52923: PPOPN 3
52925: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
52926: LD_EXP 63
52930: PUSH
52931: LD_EXP 81
52935: AND
52936: PUSH
52937: LD_OWVAR 67
52941: PUSH
52942: LD_INT 4
52944: LESS
52945: AND
52946: IFFALSE 52965
52948: GO 52950
52950: DISABLE
// begin Difficulty := Difficulty + 1 ;
52951: LD_ADDR_OWVAR 67
52955: PUSH
52956: LD_OWVAR 67
52960: PUSH
52961: LD_INT 1
52963: PLUS
52964: ST_TO_ADDR
// end ;
52965: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
52966: LD_EXP 63
52970: PUSH
52971: LD_EXP 82
52975: AND
52976: IFFALSE 53079
52978: GO 52980
52980: DISABLE
52981: LD_INT 0
52983: PPUSH
// begin for i := 1 to 5 do
52984: LD_ADDR_VAR 0 1
52988: PUSH
52989: DOUBLE
52990: LD_INT 1
52992: DEC
52993: ST_TO_ADDR
52994: LD_INT 5
52996: PUSH
52997: FOR_TO
52998: IFFALSE 53077
// begin uc_nation := nation_nature ;
53000: LD_ADDR_OWVAR 21
53004: PUSH
53005: LD_INT 0
53007: ST_TO_ADDR
// uc_side := 0 ;
53008: LD_ADDR_OWVAR 20
53012: PUSH
53013: LD_INT 0
53015: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53016: LD_ADDR_OWVAR 29
53020: PUSH
53021: LD_INT 12
53023: PUSH
53024: LD_INT 12
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: ST_TO_ADDR
// hc_agressivity := 20 ;
53031: LD_ADDR_OWVAR 35
53035: PUSH
53036: LD_INT 20
53038: ST_TO_ADDR
// hc_class := class_tiger ;
53039: LD_ADDR_OWVAR 28
53043: PUSH
53044: LD_INT 14
53046: ST_TO_ADDR
// hc_gallery :=  ;
53047: LD_ADDR_OWVAR 33
53051: PUSH
53052: LD_STRING 
53054: ST_TO_ADDR
// hc_name :=  ;
53055: LD_ADDR_OWVAR 26
53059: PUSH
53060: LD_STRING 
53062: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
53063: CALL_OW 44
53067: PPUSH
53068: LD_INT 0
53070: PPUSH
53071: CALL_OW 51
// end ;
53075: GO 52997
53077: POP
53078: POP
// end ;
53079: PPOPN 1
53081: END
// every 0 0$1 trigger StreamModeActive and sBomb do
53082: LD_EXP 63
53086: PUSH
53087: LD_EXP 83
53091: AND
53092: IFFALSE 53101
53094: GO 53096
53096: DISABLE
// StreamSibBomb ;
53097: CALL 53102 0 0
53101: END
// export function StreamSibBomb ; var i , x , y ; begin
53102: LD_INT 0
53104: PPUSH
53105: PPUSH
53106: PPUSH
53107: PPUSH
// result := false ;
53108: LD_ADDR_VAR 0 1
53112: PUSH
53113: LD_INT 0
53115: ST_TO_ADDR
// for i := 1 to 16 do
53116: LD_ADDR_VAR 0 2
53120: PUSH
53121: DOUBLE
53122: LD_INT 1
53124: DEC
53125: ST_TO_ADDR
53126: LD_INT 16
53128: PUSH
53129: FOR_TO
53130: IFFALSE 53329
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53132: LD_ADDR_VAR 0 3
53136: PUSH
53137: LD_INT 10
53139: PUSH
53140: LD_INT 20
53142: PUSH
53143: LD_INT 30
53145: PUSH
53146: LD_INT 40
53148: PUSH
53149: LD_INT 50
53151: PUSH
53152: LD_INT 60
53154: PUSH
53155: LD_INT 70
53157: PUSH
53158: LD_INT 80
53160: PUSH
53161: LD_INT 90
53163: PUSH
53164: LD_INT 100
53166: PUSH
53167: LD_INT 110
53169: PUSH
53170: LD_INT 120
53172: PUSH
53173: LD_INT 130
53175: PUSH
53176: LD_INT 140
53178: PUSH
53179: LD_INT 150
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: PPUSH
53202: LD_INT 15
53204: PPUSH
53205: CALL_OW 12
53209: ARRAY
53210: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
53211: LD_ADDR_VAR 0 4
53215: PUSH
53216: LD_INT 10
53218: PUSH
53219: LD_INT 20
53221: PUSH
53222: LD_INT 30
53224: PUSH
53225: LD_INT 40
53227: PUSH
53228: LD_INT 50
53230: PUSH
53231: LD_INT 60
53233: PUSH
53234: LD_INT 70
53236: PUSH
53237: LD_INT 80
53239: PUSH
53240: LD_INT 90
53242: PUSH
53243: LD_INT 100
53245: PUSH
53246: LD_INT 110
53248: PUSH
53249: LD_INT 120
53251: PUSH
53252: LD_INT 130
53254: PUSH
53255: LD_INT 140
53257: PUSH
53258: LD_INT 150
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 1
53280: PPUSH
53281: LD_INT 15
53283: PPUSH
53284: CALL_OW 12
53288: ARRAY
53289: ST_TO_ADDR
// if ValidHex ( x , y ) then
53290: LD_VAR 0 3
53294: PPUSH
53295: LD_VAR 0 4
53299: PPUSH
53300: CALL_OW 488
53304: IFFALSE 53327
// begin result := [ x , y ] ;
53306: LD_ADDR_VAR 0 1
53310: PUSH
53311: LD_VAR 0 3
53315: PUSH
53316: LD_VAR 0 4
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// break ;
53325: GO 53329
// end ; end ;
53327: GO 53129
53329: POP
53330: POP
// if result then
53331: LD_VAR 0 1
53335: IFFALSE 53395
// begin ToLua ( playSibBomb() ) ;
53337: LD_STRING playSibBomb()
53339: PPUSH
53340: CALL_OW 559
// wait ( 0 0$14 ) ;
53344: LD_INT 490
53346: PPUSH
53347: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
53351: LD_VAR 0 1
53355: PUSH
53356: LD_INT 1
53358: ARRAY
53359: PPUSH
53360: LD_VAR 0 1
53364: PUSH
53365: LD_INT 2
53367: ARRAY
53368: PPUSH
53369: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
53373: LD_VAR 0 1
53377: PUSH
53378: LD_INT 1
53380: ARRAY
53381: PPUSH
53382: LD_VAR 0 1
53386: PUSH
53387: LD_INT 2
53389: ARRAY
53390: PPUSH
53391: CALL_OW 429
// end ; end ;
53395: LD_VAR 0 1
53399: RET
// every 0 0$1 trigger StreamModeActive and sReset do
53400: LD_EXP 63
53404: PUSH
53405: LD_EXP 85
53409: AND
53410: IFFALSE 53422
53412: GO 53414
53414: DISABLE
// YouLost (  ) ;
53415: LD_STRING 
53417: PPUSH
53418: CALL_OW 104
53422: END
// every 0 0$1 trigger StreamModeActive and sFog do
53423: LD_EXP 63
53427: PUSH
53428: LD_EXP 84
53432: AND
53433: IFFALSE 53447
53435: GO 53437
53437: DISABLE
// FogOff ( your_side ) ;
53438: LD_OWVAR 2
53442: PPUSH
53443: CALL_OW 344
53447: END
// every 0 0$1 trigger StreamModeActive and sSun do
53448: LD_EXP 63
53452: PUSH
53453: LD_EXP 86
53457: AND
53458: IFFALSE 53486
53460: GO 53462
53462: DISABLE
// begin solar_recharge_percent := 0 ;
53463: LD_ADDR_OWVAR 79
53467: PUSH
53468: LD_INT 0
53470: ST_TO_ADDR
// wait ( 5 5$00 ) ;
53471: LD_INT 10500
53473: PPUSH
53474: CALL_OW 67
// solar_recharge_percent := 100 ;
53478: LD_ADDR_OWVAR 79
53482: PUSH
53483: LD_INT 100
53485: ST_TO_ADDR
// end ;
53486: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
53487: LD_EXP 63
53491: PUSH
53492: LD_EXP 87
53496: AND
53497: IFFALSE 53736
53499: GO 53501
53501: DISABLE
53502: LD_INT 0
53504: PPUSH
53505: PPUSH
53506: PPUSH
// begin tmp := [ ] ;
53507: LD_ADDR_VAR 0 3
53511: PUSH
53512: EMPTY
53513: ST_TO_ADDR
// for i := 1 to 6 do
53514: LD_ADDR_VAR 0 1
53518: PUSH
53519: DOUBLE
53520: LD_INT 1
53522: DEC
53523: ST_TO_ADDR
53524: LD_INT 6
53526: PUSH
53527: FOR_TO
53528: IFFALSE 53633
// begin uc_nation := nation_nature ;
53530: LD_ADDR_OWVAR 21
53534: PUSH
53535: LD_INT 0
53537: ST_TO_ADDR
// uc_side := 0 ;
53538: LD_ADDR_OWVAR 20
53542: PUSH
53543: LD_INT 0
53545: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
53546: LD_ADDR_OWVAR 29
53550: PUSH
53551: LD_INT 12
53553: PUSH
53554: LD_INT 12
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: ST_TO_ADDR
// hc_agressivity := 20 ;
53561: LD_ADDR_OWVAR 35
53565: PUSH
53566: LD_INT 20
53568: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
53569: LD_ADDR_OWVAR 28
53573: PUSH
53574: LD_INT 17
53576: ST_TO_ADDR
// hc_gallery :=  ;
53577: LD_ADDR_OWVAR 33
53581: PUSH
53582: LD_STRING 
53584: ST_TO_ADDR
// hc_name :=  ;
53585: LD_ADDR_OWVAR 26
53589: PUSH
53590: LD_STRING 
53592: ST_TO_ADDR
// un := CreateHuman ;
53593: LD_ADDR_VAR 0 2
53597: PUSH
53598: CALL_OW 44
53602: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
53603: LD_VAR 0 2
53607: PPUSH
53608: LD_INT 1
53610: PPUSH
53611: CALL_OW 51
// tmp := tmp ^ un ;
53615: LD_ADDR_VAR 0 3
53619: PUSH
53620: LD_VAR 0 3
53624: PUSH
53625: LD_VAR 0 2
53629: ADD
53630: ST_TO_ADDR
// end ;
53631: GO 53527
53633: POP
53634: POP
// repeat wait ( 0 0$1 ) ;
53635: LD_INT 35
53637: PPUSH
53638: CALL_OW 67
// for un in tmp do
53642: LD_ADDR_VAR 0 2
53646: PUSH
53647: LD_VAR 0 3
53651: PUSH
53652: FOR_IN
53653: IFFALSE 53727
// begin if IsDead ( un ) then
53655: LD_VAR 0 2
53659: PPUSH
53660: CALL_OW 301
53664: IFFALSE 53684
// begin tmp := tmp diff un ;
53666: LD_ADDR_VAR 0 3
53670: PUSH
53671: LD_VAR 0 3
53675: PUSH
53676: LD_VAR 0 2
53680: DIFF
53681: ST_TO_ADDR
// continue ;
53682: GO 53652
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
53684: LD_VAR 0 2
53688: PPUSH
53689: LD_INT 3
53691: PUSH
53692: LD_INT 22
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PPUSH
53706: CALL_OW 69
53710: PPUSH
53711: LD_VAR 0 2
53715: PPUSH
53716: CALL_OW 74
53720: PPUSH
53721: CALL_OW 115
// end ;
53725: GO 53652
53727: POP
53728: POP
// until not tmp ;
53729: LD_VAR 0 3
53733: NOT
53734: IFFALSE 53635
// end ;
53736: PPOPN 3
53738: END
// every 0 0$1 trigger StreamModeActive and sTroll do
53739: LD_EXP 63
53743: PUSH
53744: LD_EXP 88
53748: AND
53749: IFFALSE 53803
53751: GO 53753
53753: DISABLE
// begin ToLua ( displayTroll(); ) ;
53754: LD_STRING displayTroll();
53756: PPUSH
53757: CALL_OW 559
// wait ( 3 3$00 ) ;
53761: LD_INT 6300
53763: PPUSH
53764: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53768: LD_STRING hideTroll();
53770: PPUSH
53771: CALL_OW 559
// wait ( 1 1$00 ) ;
53775: LD_INT 2100
53777: PPUSH
53778: CALL_OW 67
// ToLua ( displayTroll(); ) ;
53782: LD_STRING displayTroll();
53784: PPUSH
53785: CALL_OW 559
// wait ( 1 1$00 ) ;
53789: LD_INT 2100
53791: PPUSH
53792: CALL_OW 67
// ToLua ( hideTroll(); ) ;
53796: LD_STRING hideTroll();
53798: PPUSH
53799: CALL_OW 559
// end ;
53803: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
53804: LD_EXP 63
53808: PUSH
53809: LD_EXP 89
53813: AND
53814: IFFALSE 53877
53816: GO 53818
53818: DISABLE
53819: LD_INT 0
53821: PPUSH
// begin p := 0 ;
53822: LD_ADDR_VAR 0 1
53826: PUSH
53827: LD_INT 0
53829: ST_TO_ADDR
// repeat game_speed := 1 ;
53830: LD_ADDR_OWVAR 65
53834: PUSH
53835: LD_INT 1
53837: ST_TO_ADDR
// wait ( 0 0$1 ) ;
53838: LD_INT 35
53840: PPUSH
53841: CALL_OW 67
// p := p + 1 ;
53845: LD_ADDR_VAR 0 1
53849: PUSH
53850: LD_VAR 0 1
53854: PUSH
53855: LD_INT 1
53857: PLUS
53858: ST_TO_ADDR
// until p >= 60 ;
53859: LD_VAR 0 1
53863: PUSH
53864: LD_INT 60
53866: GREATEREQUAL
53867: IFFALSE 53830
// game_speed := 4 ;
53869: LD_ADDR_OWVAR 65
53873: PUSH
53874: LD_INT 4
53876: ST_TO_ADDR
// end ;
53877: PPOPN 1
53879: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
53880: LD_EXP 63
53884: PUSH
53885: LD_EXP 90
53889: AND
53890: IFFALSE 54036
53892: GO 53894
53894: DISABLE
53895: LD_INT 0
53897: PPUSH
53898: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53899: LD_ADDR_VAR 0 1
53903: PUSH
53904: LD_INT 22
53906: PUSH
53907: LD_OWVAR 2
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: PUSH
53919: LD_INT 30
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 30
53931: PUSH
53932: LD_INT 1
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PPUSH
53948: CALL_OW 69
53952: ST_TO_ADDR
// if not depot then
53953: LD_VAR 0 1
53957: NOT
53958: IFFALSE 53962
// exit ;
53960: GO 54036
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
53962: LD_ADDR_VAR 0 2
53966: PUSH
53967: LD_VAR 0 1
53971: PUSH
53972: LD_INT 1
53974: PPUSH
53975: LD_VAR 0 1
53979: PPUSH
53980: CALL_OW 12
53984: ARRAY
53985: PPUSH
53986: CALL_OW 274
53990: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
53991: LD_VAR 0 2
53995: PPUSH
53996: LD_INT 1
53998: PPUSH
53999: LD_INT 0
54001: PPUSH
54002: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
54006: LD_VAR 0 2
54010: PPUSH
54011: LD_INT 2
54013: PPUSH
54014: LD_INT 0
54016: PPUSH
54017: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
54021: LD_VAR 0 2
54025: PPUSH
54026: LD_INT 3
54028: PPUSH
54029: LD_INT 0
54031: PPUSH
54032: CALL_OW 277
// end ;
54036: PPOPN 2
54038: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
54039: LD_EXP 63
54043: PUSH
54044: LD_EXP 91
54048: AND
54049: IFFALSE 54146
54051: GO 54053
54053: DISABLE
54054: LD_INT 0
54056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54057: LD_ADDR_VAR 0 1
54061: PUSH
54062: LD_INT 22
54064: PUSH
54065: LD_OWVAR 2
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 21
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: LD_INT 23
54089: PUSH
54090: LD_INT 0
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: LIST
54105: PPUSH
54106: CALL_OW 69
54110: ST_TO_ADDR
// if not tmp then
54111: LD_VAR 0 1
54115: NOT
54116: IFFALSE 54120
// exit ;
54118: GO 54146
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
54120: LD_VAR 0 1
54124: PUSH
54125: LD_INT 1
54127: PPUSH
54128: LD_VAR 0 1
54132: PPUSH
54133: CALL_OW 12
54137: ARRAY
54138: PPUSH
54139: LD_INT 200
54141: PPUSH
54142: CALL_OW 234
// end ;
54146: PPOPN 1
54148: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
54149: LD_EXP 63
54153: PUSH
54154: LD_EXP 92
54158: AND
54159: IFFALSE 54238
54161: GO 54163
54163: DISABLE
54164: LD_INT 0
54166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
54167: LD_ADDR_VAR 0 1
54171: PUSH
54172: LD_INT 22
54174: PUSH
54175: LD_OWVAR 2
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 21
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PPUSH
54198: CALL_OW 69
54202: ST_TO_ADDR
// if not tmp then
54203: LD_VAR 0 1
54207: NOT
54208: IFFALSE 54212
// exit ;
54210: GO 54238
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
54212: LD_VAR 0 1
54216: PUSH
54217: LD_INT 1
54219: PPUSH
54220: LD_VAR 0 1
54224: PPUSH
54225: CALL_OW 12
54229: ARRAY
54230: PPUSH
54231: LD_INT 60
54233: PPUSH
54234: CALL_OW 234
// end ;
54238: PPOPN 1
54240: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
54241: LD_EXP 63
54245: PUSH
54246: LD_EXP 93
54250: AND
54251: IFFALSE 54350
54253: GO 54255
54255: DISABLE
54256: LD_INT 0
54258: PPUSH
54259: PPUSH
// begin enable ;
54260: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
54261: LD_ADDR_VAR 0 1
54265: PUSH
54266: LD_INT 22
54268: PUSH
54269: LD_OWVAR 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 61
54280: PUSH
54281: EMPTY
54282: LIST
54283: PUSH
54284: LD_INT 33
54286: PUSH
54287: LD_INT 2
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: LIST
54298: PPUSH
54299: CALL_OW 69
54303: ST_TO_ADDR
// if not tmp then
54304: LD_VAR 0 1
54308: NOT
54309: IFFALSE 54313
// exit ;
54311: GO 54350
// for i in tmp do
54313: LD_ADDR_VAR 0 2
54317: PUSH
54318: LD_VAR 0 1
54322: PUSH
54323: FOR_IN
54324: IFFALSE 54348
// if IsControledBy ( i ) then
54326: LD_VAR 0 2
54330: PPUSH
54331: CALL_OW 312
54335: IFFALSE 54346
// ComUnlink ( i ) ;
54337: LD_VAR 0 2
54341: PPUSH
54342: CALL_OW 136
54346: GO 54323
54348: POP
54349: POP
// end ;
54350: PPOPN 2
54352: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
54353: LD_EXP 63
54357: PUSH
54358: LD_EXP 94
54362: AND
54363: IFFALSE 54503
54365: GO 54367
54367: DISABLE
54368: LD_INT 0
54370: PPUSH
54371: PPUSH
// begin ToLua ( displayPowell(); ) ;
54372: LD_STRING displayPowell();
54374: PPUSH
54375: CALL_OW 559
// uc_side := 0 ;
54379: LD_ADDR_OWVAR 20
54383: PUSH
54384: LD_INT 0
54386: ST_TO_ADDR
// uc_nation := 2 ;
54387: LD_ADDR_OWVAR 21
54391: PUSH
54392: LD_INT 2
54394: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
54395: LD_ADDR_OWVAR 37
54399: PUSH
54400: LD_INT 14
54402: ST_TO_ADDR
// vc_engine := engine_siberite ;
54403: LD_ADDR_OWVAR 39
54407: PUSH
54408: LD_INT 3
54410: ST_TO_ADDR
// vc_control := control_apeman ;
54411: LD_ADDR_OWVAR 38
54415: PUSH
54416: LD_INT 5
54418: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
54419: LD_ADDR_OWVAR 40
54423: PUSH
54424: LD_INT 29
54426: ST_TO_ADDR
// un := CreateVehicle ;
54427: LD_ADDR_VAR 0 2
54431: PUSH
54432: CALL_OW 45
54436: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54437: LD_VAR 0 2
54441: PPUSH
54442: LD_INT 1
54444: PPUSH
54445: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
54449: LD_INT 35
54451: PPUSH
54452: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
54456: LD_VAR 0 2
54460: PPUSH
54461: LD_INT 22
54463: PUSH
54464: LD_OWVAR 2
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PPUSH
54473: CALL_OW 69
54477: PPUSH
54478: LD_VAR 0 2
54482: PPUSH
54483: CALL_OW 74
54487: PPUSH
54488: CALL_OW 115
// until IsDead ( un ) ;
54492: LD_VAR 0 2
54496: PPUSH
54497: CALL_OW 301
54501: IFFALSE 54449
// end ;
54503: PPOPN 2
54505: END
// every 0 0$1 trigger StreamModeActive and sStu do
54506: LD_EXP 63
54510: PUSH
54511: LD_EXP 102
54515: AND
54516: IFFALSE 54532
54518: GO 54520
54520: DISABLE
// begin ToLua ( displayStucuk(); ) ;
54521: LD_STRING displayStucuk();
54523: PPUSH
54524: CALL_OW 559
// ResetFog ;
54528: CALL_OW 335
// end ;
54532: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
54533: LD_EXP 63
54537: PUSH
54538: LD_EXP 95
54542: AND
54543: IFFALSE 54684
54545: GO 54547
54547: DISABLE
54548: LD_INT 0
54550: PPUSH
54551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54552: LD_ADDR_VAR 0 2
54556: PUSH
54557: LD_INT 22
54559: PUSH
54560: LD_OWVAR 2
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 21
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PPUSH
54583: CALL_OW 69
54587: ST_TO_ADDR
// if not tmp then
54588: LD_VAR 0 2
54592: NOT
54593: IFFALSE 54597
// exit ;
54595: GO 54684
// un := tmp [ rand ( 1 , tmp ) ] ;
54597: LD_ADDR_VAR 0 1
54601: PUSH
54602: LD_VAR 0 2
54606: PUSH
54607: LD_INT 1
54609: PPUSH
54610: LD_VAR 0 2
54614: PPUSH
54615: CALL_OW 12
54619: ARRAY
54620: ST_TO_ADDR
// SetSide ( un , 0 ) ;
54621: LD_VAR 0 1
54625: PPUSH
54626: LD_INT 0
54628: PPUSH
54629: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
54633: LD_VAR 0 1
54637: PPUSH
54638: LD_OWVAR 3
54642: PUSH
54643: LD_VAR 0 1
54647: DIFF
54648: PPUSH
54649: LD_VAR 0 1
54653: PPUSH
54654: CALL_OW 74
54658: PPUSH
54659: CALL_OW 115
// wait ( 0 0$20 ) ;
54663: LD_INT 700
54665: PPUSH
54666: CALL_OW 67
// SetSide ( un , your_side ) ;
54670: LD_VAR 0 1
54674: PPUSH
54675: LD_OWVAR 2
54679: PPUSH
54680: CALL_OW 235
// end ;
54684: PPOPN 2
54686: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
54687: LD_EXP 63
54691: PUSH
54692: LD_EXP 96
54696: AND
54697: IFFALSE 54803
54699: GO 54701
54701: DISABLE
54702: LD_INT 0
54704: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54705: LD_ADDR_VAR 0 1
54709: PUSH
54710: LD_INT 22
54712: PUSH
54713: LD_OWVAR 2
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 30
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 30
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: LIST
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PPUSH
54754: CALL_OW 69
54758: ST_TO_ADDR
// if not depot then
54759: LD_VAR 0 1
54763: NOT
54764: IFFALSE 54768
// exit ;
54766: GO 54803
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
54768: LD_VAR 0 1
54772: PUSH
54773: LD_INT 1
54775: ARRAY
54776: PPUSH
54777: CALL_OW 250
54781: PPUSH
54782: LD_VAR 0 1
54786: PUSH
54787: LD_INT 1
54789: ARRAY
54790: PPUSH
54791: CALL_OW 251
54795: PPUSH
54796: LD_INT 70
54798: PPUSH
54799: CALL_OW 495
// end ;
54803: PPOPN 1
54805: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
54806: LD_EXP 63
54810: PUSH
54811: LD_EXP 97
54815: AND
54816: IFFALSE 55027
54818: GO 54820
54820: DISABLE
54821: LD_INT 0
54823: PPUSH
54824: PPUSH
54825: PPUSH
54826: PPUSH
54827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
54828: LD_ADDR_VAR 0 5
54832: PUSH
54833: LD_INT 22
54835: PUSH
54836: LD_OWVAR 2
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 21
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PPUSH
54859: CALL_OW 69
54863: ST_TO_ADDR
// if not tmp then
54864: LD_VAR 0 5
54868: NOT
54869: IFFALSE 54873
// exit ;
54871: GO 55027
// for i in tmp do
54873: LD_ADDR_VAR 0 1
54877: PUSH
54878: LD_VAR 0 5
54882: PUSH
54883: FOR_IN
54884: IFFALSE 55025
// begin d := rand ( 0 , 5 ) ;
54886: LD_ADDR_VAR 0 4
54890: PUSH
54891: LD_INT 0
54893: PPUSH
54894: LD_INT 5
54896: PPUSH
54897: CALL_OW 12
54901: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
54902: LD_ADDR_VAR 0 2
54906: PUSH
54907: LD_VAR 0 1
54911: PPUSH
54912: CALL_OW 250
54916: PPUSH
54917: LD_VAR 0 4
54921: PPUSH
54922: LD_INT 3
54924: PPUSH
54925: LD_INT 12
54927: PPUSH
54928: CALL_OW 12
54932: PPUSH
54933: CALL_OW 272
54937: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
54938: LD_ADDR_VAR 0 3
54942: PUSH
54943: LD_VAR 0 1
54947: PPUSH
54948: CALL_OW 251
54952: PPUSH
54953: LD_VAR 0 4
54957: PPUSH
54958: LD_INT 3
54960: PPUSH
54961: LD_INT 12
54963: PPUSH
54964: CALL_OW 12
54968: PPUSH
54969: CALL_OW 273
54973: ST_TO_ADDR
// if ValidHex ( x , y ) then
54974: LD_VAR 0 2
54978: PPUSH
54979: LD_VAR 0 3
54983: PPUSH
54984: CALL_OW 488
54988: IFFALSE 55023
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
54990: LD_VAR 0 1
54994: PPUSH
54995: LD_VAR 0 2
54999: PPUSH
55000: LD_VAR 0 3
55004: PPUSH
55005: LD_INT 3
55007: PPUSH
55008: LD_INT 6
55010: PPUSH
55011: CALL_OW 12
55015: PPUSH
55016: LD_INT 1
55018: PPUSH
55019: CALL_OW 483
// end ;
55023: GO 54883
55025: POP
55026: POP
// end ;
55027: PPOPN 5
55029: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
55030: LD_EXP 63
55034: PUSH
55035: LD_EXP 98
55039: AND
55040: IFFALSE 55134
55042: GO 55044
55044: DISABLE
55045: LD_INT 0
55047: PPUSH
55048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
55049: LD_ADDR_VAR 0 2
55053: PUSH
55054: LD_INT 22
55056: PUSH
55057: LD_OWVAR 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 32
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 21
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: LIST
55090: PPUSH
55091: CALL_OW 69
55095: ST_TO_ADDR
// if not tmp then
55096: LD_VAR 0 2
55100: NOT
55101: IFFALSE 55105
// exit ;
55103: GO 55134
// for i in tmp do
55105: LD_ADDR_VAR 0 1
55109: PUSH
55110: LD_VAR 0 2
55114: PUSH
55115: FOR_IN
55116: IFFALSE 55132
// SetFuel ( i , 0 ) ;
55118: LD_VAR 0 1
55122: PPUSH
55123: LD_INT 0
55125: PPUSH
55126: CALL_OW 240
55130: GO 55115
55132: POP
55133: POP
// end ;
55134: PPOPN 2
55136: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
55137: LD_EXP 63
55141: PUSH
55142: LD_EXP 99
55146: AND
55147: IFFALSE 55213
55149: GO 55151
55151: DISABLE
55152: LD_INT 0
55154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55155: LD_ADDR_VAR 0 1
55159: PUSH
55160: LD_INT 22
55162: PUSH
55163: LD_OWVAR 2
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 30
55174: PUSH
55175: LD_INT 29
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PPUSH
55186: CALL_OW 69
55190: ST_TO_ADDR
// if not tmp then
55191: LD_VAR 0 1
55195: NOT
55196: IFFALSE 55200
// exit ;
55198: GO 55213
// DestroyUnit ( tmp [ 1 ] ) ;
55200: LD_VAR 0 1
55204: PUSH
55205: LD_INT 1
55207: ARRAY
55208: PPUSH
55209: CALL_OW 65
// end ;
55213: PPOPN 1
55215: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
55216: LD_EXP 63
55220: PUSH
55221: LD_EXP 101
55225: AND
55226: IFFALSE 55355
55228: GO 55230
55230: DISABLE
55231: LD_INT 0
55233: PPUSH
// begin uc_side := 0 ;
55234: LD_ADDR_OWVAR 20
55238: PUSH
55239: LD_INT 0
55241: ST_TO_ADDR
// uc_nation := nation_arabian ;
55242: LD_ADDR_OWVAR 21
55246: PUSH
55247: LD_INT 2
55249: ST_TO_ADDR
// hc_gallery :=  ;
55250: LD_ADDR_OWVAR 33
55254: PUSH
55255: LD_STRING 
55257: ST_TO_ADDR
// hc_name :=  ;
55258: LD_ADDR_OWVAR 26
55262: PUSH
55263: LD_STRING 
55265: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
55266: LD_INT 1
55268: PPUSH
55269: LD_INT 11
55271: PPUSH
55272: LD_INT 10
55274: PPUSH
55275: CALL_OW 380
// un := CreateHuman ;
55279: LD_ADDR_VAR 0 1
55283: PUSH
55284: CALL_OW 44
55288: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55289: LD_VAR 0 1
55293: PPUSH
55294: LD_INT 1
55296: PPUSH
55297: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
55301: LD_INT 35
55303: PPUSH
55304: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
55308: LD_VAR 0 1
55312: PPUSH
55313: LD_INT 22
55315: PUSH
55316: LD_OWVAR 2
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PPUSH
55325: CALL_OW 69
55329: PPUSH
55330: LD_VAR 0 1
55334: PPUSH
55335: CALL_OW 74
55339: PPUSH
55340: CALL_OW 115
// until IsDead ( un ) ;
55344: LD_VAR 0 1
55348: PPUSH
55349: CALL_OW 301
55353: IFFALSE 55301
// end ;
55355: PPOPN 1
55357: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
55358: LD_EXP 63
55362: PUSH
55363: LD_EXP 103
55367: AND
55368: IFFALSE 55380
55370: GO 55372
55372: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
55373: LD_STRING earthquake(getX(game), 0, 32)
55375: PPUSH
55376: CALL_OW 559
55380: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
55381: LD_EXP 63
55385: PUSH
55386: LD_EXP 104
55390: AND
55391: IFFALSE 55482
55393: GO 55395
55395: DISABLE
55396: LD_INT 0
55398: PPUSH
// begin enable ;
55399: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
55400: LD_ADDR_VAR 0 1
55404: PUSH
55405: LD_INT 22
55407: PUSH
55408: LD_OWVAR 2
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 21
55419: PUSH
55420: LD_INT 2
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 33
55429: PUSH
55430: LD_INT 3
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: LIST
55441: PPUSH
55442: CALL_OW 69
55446: ST_TO_ADDR
// if not tmp then
55447: LD_VAR 0 1
55451: NOT
55452: IFFALSE 55456
// exit ;
55454: GO 55482
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55456: LD_VAR 0 1
55460: PUSH
55461: LD_INT 1
55463: PPUSH
55464: LD_VAR 0 1
55468: PPUSH
55469: CALL_OW 12
55473: ARRAY
55474: PPUSH
55475: LD_INT 1
55477: PPUSH
55478: CALL_OW 234
// end ;
55482: PPOPN 1
55484: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
55485: LD_EXP 63
55489: PUSH
55490: LD_EXP 105
55494: AND
55495: IFFALSE 55636
55497: GO 55499
55499: DISABLE
55500: LD_INT 0
55502: PPUSH
55503: PPUSH
55504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55505: LD_ADDR_VAR 0 3
55509: PUSH
55510: LD_INT 22
55512: PUSH
55513: LD_OWVAR 2
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 25
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PPUSH
55536: CALL_OW 69
55540: ST_TO_ADDR
// if not tmp then
55541: LD_VAR 0 3
55545: NOT
55546: IFFALSE 55550
// exit ;
55548: GO 55636
// un := tmp [ rand ( 1 , tmp ) ] ;
55550: LD_ADDR_VAR 0 2
55554: PUSH
55555: LD_VAR 0 3
55559: PUSH
55560: LD_INT 1
55562: PPUSH
55563: LD_VAR 0 3
55567: PPUSH
55568: CALL_OW 12
55572: ARRAY
55573: ST_TO_ADDR
// if Crawls ( un ) then
55574: LD_VAR 0 2
55578: PPUSH
55579: CALL_OW 318
55583: IFFALSE 55594
// ComWalk ( un ) ;
55585: LD_VAR 0 2
55589: PPUSH
55590: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
55594: LD_VAR 0 2
55598: PPUSH
55599: LD_INT 9
55601: PPUSH
55602: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
55606: LD_INT 28
55608: PPUSH
55609: LD_OWVAR 2
55613: PPUSH
55614: LD_INT 2
55616: PPUSH
55617: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
55621: LD_INT 29
55623: PPUSH
55624: LD_OWVAR 2
55628: PPUSH
55629: LD_INT 2
55631: PPUSH
55632: CALL_OW 322
// end ;
55636: PPOPN 3
55638: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
55639: LD_EXP 63
55643: PUSH
55644: LD_EXP 106
55648: AND
55649: IFFALSE 55760
55651: GO 55653
55653: DISABLE
55654: LD_INT 0
55656: PPUSH
55657: PPUSH
55658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55659: LD_ADDR_VAR 0 3
55663: PUSH
55664: LD_INT 22
55666: PUSH
55667: LD_OWVAR 2
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 25
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PPUSH
55690: CALL_OW 69
55694: ST_TO_ADDR
// if not tmp then
55695: LD_VAR 0 3
55699: NOT
55700: IFFALSE 55704
// exit ;
55702: GO 55760
// un := tmp [ rand ( 1 , tmp ) ] ;
55704: LD_ADDR_VAR 0 2
55708: PUSH
55709: LD_VAR 0 3
55713: PUSH
55714: LD_INT 1
55716: PPUSH
55717: LD_VAR 0 3
55721: PPUSH
55722: CALL_OW 12
55726: ARRAY
55727: ST_TO_ADDR
// if Crawls ( un ) then
55728: LD_VAR 0 2
55732: PPUSH
55733: CALL_OW 318
55737: IFFALSE 55748
// ComWalk ( un ) ;
55739: LD_VAR 0 2
55743: PPUSH
55744: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55748: LD_VAR 0 2
55752: PPUSH
55753: LD_INT 8
55755: PPUSH
55756: CALL_OW 336
// end ;
55760: PPOPN 3
55762: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
55763: LD_EXP 63
55767: PUSH
55768: LD_EXP 107
55772: AND
55773: IFFALSE 55917
55775: GO 55777
55777: DISABLE
55778: LD_INT 0
55780: PPUSH
55781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
55782: LD_ADDR_VAR 0 2
55786: PUSH
55787: LD_INT 22
55789: PUSH
55790: LD_OWVAR 2
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 21
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 2
55811: PUSH
55812: LD_INT 34
55814: PUSH
55815: LD_INT 12
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 34
55824: PUSH
55825: LD_INT 51
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 34
55834: PUSH
55835: LD_INT 32
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: PPUSH
55853: CALL_OW 69
55857: ST_TO_ADDR
// if not tmp then
55858: LD_VAR 0 2
55862: NOT
55863: IFFALSE 55867
// exit ;
55865: GO 55917
// for i in tmp do
55867: LD_ADDR_VAR 0 1
55871: PUSH
55872: LD_VAR 0 2
55876: PUSH
55877: FOR_IN
55878: IFFALSE 55915
// if GetCargo ( i , mat_artifact ) = 0 then
55880: LD_VAR 0 1
55884: PPUSH
55885: LD_INT 4
55887: PPUSH
55888: CALL_OW 289
55892: PUSH
55893: LD_INT 0
55895: EQUAL
55896: IFFALSE 55913
// SetCargo ( i , mat_siberit , 100 ) ;
55898: LD_VAR 0 1
55902: PPUSH
55903: LD_INT 3
55905: PPUSH
55906: LD_INT 100
55908: PPUSH
55909: CALL_OW 290
55913: GO 55877
55915: POP
55916: POP
// end ;
55917: PPOPN 2
55919: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
55920: LD_EXP 63
55924: PUSH
55925: LD_EXP 108
55929: AND
55930: IFFALSE 56113
55932: GO 55934
55934: DISABLE
55935: LD_INT 0
55937: PPUSH
55938: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
55939: LD_ADDR_VAR 0 2
55943: PUSH
55944: LD_INT 22
55946: PUSH
55947: LD_OWVAR 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PPUSH
55956: CALL_OW 69
55960: ST_TO_ADDR
// if not tmp then
55961: LD_VAR 0 2
55965: NOT
55966: IFFALSE 55970
// exit ;
55968: GO 56113
// for i := 1 to 2 do
55970: LD_ADDR_VAR 0 1
55974: PUSH
55975: DOUBLE
55976: LD_INT 1
55978: DEC
55979: ST_TO_ADDR
55980: LD_INT 2
55982: PUSH
55983: FOR_TO
55984: IFFALSE 56111
// begin uc_side := your_side ;
55986: LD_ADDR_OWVAR 20
55990: PUSH
55991: LD_OWVAR 2
55995: ST_TO_ADDR
// uc_nation := nation_american ;
55996: LD_ADDR_OWVAR 21
56000: PUSH
56001: LD_INT 1
56003: ST_TO_ADDR
// vc_chassis := us_morphling ;
56004: LD_ADDR_OWVAR 37
56008: PUSH
56009: LD_INT 5
56011: ST_TO_ADDR
// vc_engine := engine_siberite ;
56012: LD_ADDR_OWVAR 39
56016: PUSH
56017: LD_INT 3
56019: ST_TO_ADDR
// vc_control := control_computer ;
56020: LD_ADDR_OWVAR 38
56024: PUSH
56025: LD_INT 3
56027: ST_TO_ADDR
// vc_weapon := us_double_laser ;
56028: LD_ADDR_OWVAR 40
56032: PUSH
56033: LD_INT 10
56035: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
56036: LD_VAR 0 2
56040: PUSH
56041: LD_INT 1
56043: ARRAY
56044: PPUSH
56045: CALL_OW 310
56049: NOT
56050: IFFALSE 56097
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
56052: CALL_OW 45
56056: PPUSH
56057: LD_VAR 0 2
56061: PUSH
56062: LD_INT 1
56064: ARRAY
56065: PPUSH
56066: CALL_OW 250
56070: PPUSH
56071: LD_VAR 0 2
56075: PUSH
56076: LD_INT 1
56078: ARRAY
56079: PPUSH
56080: CALL_OW 251
56084: PPUSH
56085: LD_INT 12
56087: PPUSH
56088: LD_INT 1
56090: PPUSH
56091: CALL_OW 50
56095: GO 56109
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
56097: CALL_OW 45
56101: PPUSH
56102: LD_INT 1
56104: PPUSH
56105: CALL_OW 51
// end ;
56109: GO 55983
56111: POP
56112: POP
// end ;
56113: PPOPN 2
56115: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
56116: LD_EXP 63
56120: PUSH
56121: LD_EXP 109
56125: AND
56126: IFFALSE 56348
56128: GO 56130
56130: DISABLE
56131: LD_INT 0
56133: PPUSH
56134: PPUSH
56135: PPUSH
56136: PPUSH
56137: PPUSH
56138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56139: LD_ADDR_VAR 0 6
56143: PUSH
56144: LD_INT 22
56146: PUSH
56147: LD_OWVAR 2
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 21
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 3
56168: PUSH
56169: LD_INT 23
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: LIST
56187: PPUSH
56188: CALL_OW 69
56192: ST_TO_ADDR
// if not tmp then
56193: LD_VAR 0 6
56197: NOT
56198: IFFALSE 56202
// exit ;
56200: GO 56348
// s1 := rand ( 1 , 4 ) ;
56202: LD_ADDR_VAR 0 2
56206: PUSH
56207: LD_INT 1
56209: PPUSH
56210: LD_INT 4
56212: PPUSH
56213: CALL_OW 12
56217: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
56218: LD_ADDR_VAR 0 4
56222: PUSH
56223: LD_VAR 0 6
56227: PUSH
56228: LD_INT 1
56230: ARRAY
56231: PPUSH
56232: LD_VAR 0 2
56236: PPUSH
56237: CALL_OW 259
56241: ST_TO_ADDR
// if s1 = 1 then
56242: LD_VAR 0 2
56246: PUSH
56247: LD_INT 1
56249: EQUAL
56250: IFFALSE 56270
// s2 := rand ( 2 , 4 ) else
56252: LD_ADDR_VAR 0 3
56256: PUSH
56257: LD_INT 2
56259: PPUSH
56260: LD_INT 4
56262: PPUSH
56263: CALL_OW 12
56267: ST_TO_ADDR
56268: GO 56278
// s2 := 1 ;
56270: LD_ADDR_VAR 0 3
56274: PUSH
56275: LD_INT 1
56277: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
56278: LD_ADDR_VAR 0 5
56282: PUSH
56283: LD_VAR 0 6
56287: PUSH
56288: LD_INT 1
56290: ARRAY
56291: PPUSH
56292: LD_VAR 0 3
56296: PPUSH
56297: CALL_OW 259
56301: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
56302: LD_VAR 0 6
56306: PUSH
56307: LD_INT 1
56309: ARRAY
56310: PPUSH
56311: LD_VAR 0 2
56315: PPUSH
56316: LD_VAR 0 5
56320: PPUSH
56321: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
56325: LD_VAR 0 6
56329: PUSH
56330: LD_INT 1
56332: ARRAY
56333: PPUSH
56334: LD_VAR 0 3
56338: PPUSH
56339: LD_VAR 0 4
56343: PPUSH
56344: CALL_OW 237
// end ;
56348: PPOPN 6
56350: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
56351: LD_EXP 63
56355: PUSH
56356: LD_EXP 110
56360: AND
56361: IFFALSE 56440
56363: GO 56365
56365: DISABLE
56366: LD_INT 0
56368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
56369: LD_ADDR_VAR 0 1
56373: PUSH
56374: LD_INT 22
56376: PUSH
56377: LD_OWVAR 2
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 30
56388: PUSH
56389: LD_INT 3
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PPUSH
56400: CALL_OW 69
56404: ST_TO_ADDR
// if not tmp then
56405: LD_VAR 0 1
56409: NOT
56410: IFFALSE 56414
// exit ;
56412: GO 56440
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
56414: LD_VAR 0 1
56418: PUSH
56419: LD_INT 1
56421: PPUSH
56422: LD_VAR 0 1
56426: PPUSH
56427: CALL_OW 12
56431: ARRAY
56432: PPUSH
56433: LD_INT 1
56435: PPUSH
56436: CALL_OW 234
// end ;
56440: PPOPN 1
56442: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
56443: LD_EXP 63
56447: PUSH
56448: LD_EXP 111
56452: AND
56453: IFFALSE 56565
56455: GO 56457
56457: DISABLE
56458: LD_INT 0
56460: PPUSH
56461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
56462: LD_ADDR_VAR 0 2
56466: PUSH
56467: LD_INT 22
56469: PUSH
56470: LD_OWVAR 2
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: LD_INT 30
56484: PUSH
56485: LD_INT 27
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 30
56494: PUSH
56495: LD_INT 26
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: LD_INT 30
56504: PUSH
56505: LD_INT 28
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PPUSH
56522: CALL_OW 69
56526: ST_TO_ADDR
// if not tmp then
56527: LD_VAR 0 2
56531: NOT
56532: IFFALSE 56536
// exit ;
56534: GO 56565
// for i in tmp do
56536: LD_ADDR_VAR 0 1
56540: PUSH
56541: LD_VAR 0 2
56545: PUSH
56546: FOR_IN
56547: IFFALSE 56563
// SetLives ( i , 1 ) ;
56549: LD_VAR 0 1
56553: PPUSH
56554: LD_INT 1
56556: PPUSH
56557: CALL_OW 234
56561: GO 56546
56563: POP
56564: POP
// end ;
56565: PPOPN 2
56567: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
56568: LD_EXP 63
56572: PUSH
56573: LD_EXP 112
56577: AND
56578: IFFALSE 56865
56580: GO 56582
56582: DISABLE
56583: LD_INT 0
56585: PPUSH
56586: PPUSH
56587: PPUSH
// begin i := rand ( 1 , 7 ) ;
56588: LD_ADDR_VAR 0 1
56592: PUSH
56593: LD_INT 1
56595: PPUSH
56596: LD_INT 7
56598: PPUSH
56599: CALL_OW 12
56603: ST_TO_ADDR
// case i of 1 :
56604: LD_VAR 0 1
56608: PUSH
56609: LD_INT 1
56611: DOUBLE
56612: EQUAL
56613: IFTRUE 56617
56615: GO 56627
56617: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
56618: LD_STRING earthquake(getX(game), 0, 32)
56620: PPUSH
56621: CALL_OW 559
56625: GO 56865
56627: LD_INT 2
56629: DOUBLE
56630: EQUAL
56631: IFTRUE 56635
56633: GO 56649
56635: POP
// begin ToLua ( displayStucuk(); ) ;
56636: LD_STRING displayStucuk();
56638: PPUSH
56639: CALL_OW 559
// ResetFog ;
56643: CALL_OW 335
// end ; 3 :
56647: GO 56865
56649: LD_INT 3
56651: DOUBLE
56652: EQUAL
56653: IFTRUE 56657
56655: GO 56761
56657: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56658: LD_ADDR_VAR 0 2
56662: PUSH
56663: LD_INT 22
56665: PUSH
56666: LD_OWVAR 2
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 25
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PPUSH
56689: CALL_OW 69
56693: ST_TO_ADDR
// if not tmp then
56694: LD_VAR 0 2
56698: NOT
56699: IFFALSE 56703
// exit ;
56701: GO 56865
// un := tmp [ rand ( 1 , tmp ) ] ;
56703: LD_ADDR_VAR 0 3
56707: PUSH
56708: LD_VAR 0 2
56712: PUSH
56713: LD_INT 1
56715: PPUSH
56716: LD_VAR 0 2
56720: PPUSH
56721: CALL_OW 12
56725: ARRAY
56726: ST_TO_ADDR
// if Crawls ( un ) then
56727: LD_VAR 0 3
56731: PPUSH
56732: CALL_OW 318
56736: IFFALSE 56747
// ComWalk ( un ) ;
56738: LD_VAR 0 3
56742: PPUSH
56743: CALL_OW 138
// SetClass ( un , class_mortar ) ;
56747: LD_VAR 0 3
56751: PPUSH
56752: LD_INT 8
56754: PPUSH
56755: CALL_OW 336
// end ; 4 :
56759: GO 56865
56761: LD_INT 4
56763: DOUBLE
56764: EQUAL
56765: IFTRUE 56769
56767: GO 56843
56769: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
56770: LD_ADDR_VAR 0 2
56774: PUSH
56775: LD_INT 22
56777: PUSH
56778: LD_OWVAR 2
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 30
56789: PUSH
56790: LD_INT 29
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PPUSH
56801: CALL_OW 69
56805: ST_TO_ADDR
// if not tmp then
56806: LD_VAR 0 2
56810: NOT
56811: IFFALSE 56815
// exit ;
56813: GO 56865
// CenterNowOnUnits ( tmp [ 1 ] ) ;
56815: LD_VAR 0 2
56819: PUSH
56820: LD_INT 1
56822: ARRAY
56823: PPUSH
56824: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
56828: LD_VAR 0 2
56832: PUSH
56833: LD_INT 1
56835: ARRAY
56836: PPUSH
56837: CALL_OW 65
// end ; 5 .. 7 :
56841: GO 56865
56843: LD_INT 5
56845: DOUBLE
56846: GREATEREQUAL
56847: IFFALSE 56855
56849: LD_INT 7
56851: DOUBLE
56852: LESSEQUAL
56853: IFTRUE 56857
56855: GO 56864
56857: POP
// StreamSibBomb ; end ;
56858: CALL 53102 0 0
56862: GO 56865
56864: POP
// end ;
56865: PPOPN 3
56867: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
56868: LD_EXP 63
56872: PUSH
56873: LD_EXP 113
56877: AND
56878: IFFALSE 57034
56880: GO 56882
56882: DISABLE
56883: LD_INT 0
56885: PPUSH
56886: PPUSH
56887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
56888: LD_ADDR_VAR 0 2
56892: PUSH
56893: LD_INT 81
56895: PUSH
56896: LD_OWVAR 2
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: LD_INT 21
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 21
56920: PUSH
56921: LD_INT 2
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: PUSH
56928: EMPTY
56929: LIST
56930: LIST
56931: LIST
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PPUSH
56937: CALL_OW 69
56941: ST_TO_ADDR
// if not tmp then
56942: LD_VAR 0 2
56946: NOT
56947: IFFALSE 56951
// exit ;
56949: GO 57034
// p := 0 ;
56951: LD_ADDR_VAR 0 3
56955: PUSH
56956: LD_INT 0
56958: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56959: LD_INT 35
56961: PPUSH
56962: CALL_OW 67
// p := p + 1 ;
56966: LD_ADDR_VAR 0 3
56970: PUSH
56971: LD_VAR 0 3
56975: PUSH
56976: LD_INT 1
56978: PLUS
56979: ST_TO_ADDR
// for i in tmp do
56980: LD_ADDR_VAR 0 1
56984: PUSH
56985: LD_VAR 0 2
56989: PUSH
56990: FOR_IN
56991: IFFALSE 57022
// if GetLives ( i ) < 1000 then
56993: LD_VAR 0 1
56997: PPUSH
56998: CALL_OW 256
57002: PUSH
57003: LD_INT 1000
57005: LESS
57006: IFFALSE 57020
// SetLives ( i , 1000 ) ;
57008: LD_VAR 0 1
57012: PPUSH
57013: LD_INT 1000
57015: PPUSH
57016: CALL_OW 234
57020: GO 56990
57022: POP
57023: POP
// until p > 20 ;
57024: LD_VAR 0 3
57028: PUSH
57029: LD_INT 20
57031: GREATER
57032: IFFALSE 56959
// end ;
57034: PPOPN 3
57036: END
// every 0 0$1 trigger StreamModeActive and sTime do
57037: LD_EXP 63
57041: PUSH
57042: LD_EXP 114
57046: AND
57047: IFFALSE 57082
57049: GO 57051
57051: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
57052: LD_INT 28
57054: PPUSH
57055: LD_OWVAR 2
57059: PPUSH
57060: LD_INT 2
57062: PPUSH
57063: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
57067: LD_INT 30
57069: PPUSH
57070: LD_OWVAR 2
57074: PPUSH
57075: LD_INT 2
57077: PPUSH
57078: CALL_OW 322
// end ;
57082: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
57083: LD_EXP 63
57087: PUSH
57088: LD_EXP 115
57092: AND
57093: IFFALSE 57214
57095: GO 57097
57097: DISABLE
57098: LD_INT 0
57100: PPUSH
57101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57102: LD_ADDR_VAR 0 2
57106: PUSH
57107: LD_INT 22
57109: PUSH
57110: LD_OWVAR 2
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 21
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: LD_INT 23
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: LIST
57150: PPUSH
57151: CALL_OW 69
57155: ST_TO_ADDR
// if not tmp then
57156: LD_VAR 0 2
57160: NOT
57161: IFFALSE 57165
// exit ;
57163: GO 57214
// for i in tmp do
57165: LD_ADDR_VAR 0 1
57169: PUSH
57170: LD_VAR 0 2
57174: PUSH
57175: FOR_IN
57176: IFFALSE 57212
// begin if Crawls ( i ) then
57178: LD_VAR 0 1
57182: PPUSH
57183: CALL_OW 318
57187: IFFALSE 57198
// ComWalk ( i ) ;
57189: LD_VAR 0 1
57193: PPUSH
57194: CALL_OW 138
// SetClass ( i , 2 ) ;
57198: LD_VAR 0 1
57202: PPUSH
57203: LD_INT 2
57205: PPUSH
57206: CALL_OW 336
// end ;
57210: GO 57175
57212: POP
57213: POP
// end ;
57214: PPOPN 2
57216: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
57217: LD_EXP 63
57221: PUSH
57222: LD_EXP 116
57226: AND
57227: IFFALSE 57515
57229: GO 57231
57231: DISABLE
57232: LD_INT 0
57234: PPUSH
57235: PPUSH
57236: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
57237: LD_OWVAR 2
57241: PPUSH
57242: LD_INT 9
57244: PPUSH
57245: LD_INT 1
57247: PPUSH
57248: LD_INT 1
57250: PPUSH
57251: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
57255: LD_INT 9
57257: PPUSH
57258: LD_OWVAR 2
57262: PPUSH
57263: CALL_OW 343
// uc_side := 9 ;
57267: LD_ADDR_OWVAR 20
57271: PUSH
57272: LD_INT 9
57274: ST_TO_ADDR
// uc_nation := 2 ;
57275: LD_ADDR_OWVAR 21
57279: PUSH
57280: LD_INT 2
57282: ST_TO_ADDR
// hc_name := Dark Warrior ;
57283: LD_ADDR_OWVAR 26
57287: PUSH
57288: LD_STRING Dark Warrior
57290: ST_TO_ADDR
// hc_gallery :=  ;
57291: LD_ADDR_OWVAR 33
57295: PUSH
57296: LD_STRING 
57298: ST_TO_ADDR
// hc_noskilllimit := true ;
57299: LD_ADDR_OWVAR 76
57303: PUSH
57304: LD_INT 1
57306: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
57307: LD_ADDR_OWVAR 31
57311: PUSH
57312: LD_INT 30
57314: PUSH
57315: LD_INT 30
57317: PUSH
57318: LD_INT 30
57320: PUSH
57321: LD_INT 30
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: ST_TO_ADDR
// un := CreateHuman ;
57330: LD_ADDR_VAR 0 3
57334: PUSH
57335: CALL_OW 44
57339: ST_TO_ADDR
// hc_noskilllimit := false ;
57340: LD_ADDR_OWVAR 76
57344: PUSH
57345: LD_INT 0
57347: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57348: LD_VAR 0 3
57352: PPUSH
57353: LD_INT 1
57355: PPUSH
57356: CALL_OW 51
// ToLua ( playRanger() ) ;
57360: LD_STRING playRanger()
57362: PPUSH
57363: CALL_OW 559
// p := 0 ;
57367: LD_ADDR_VAR 0 2
57371: PUSH
57372: LD_INT 0
57374: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
57375: LD_INT 35
57377: PPUSH
57378: CALL_OW 67
// p := p + 1 ;
57382: LD_ADDR_VAR 0 2
57386: PUSH
57387: LD_VAR 0 2
57391: PUSH
57392: LD_INT 1
57394: PLUS
57395: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
57396: LD_VAR 0 3
57400: PPUSH
57401: CALL_OW 256
57405: PUSH
57406: LD_INT 1000
57408: LESS
57409: IFFALSE 57423
// SetLives ( un , 1000 ) ;
57411: LD_VAR 0 3
57415: PPUSH
57416: LD_INT 1000
57418: PPUSH
57419: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
57423: LD_VAR 0 3
57427: PPUSH
57428: LD_INT 81
57430: PUSH
57431: LD_OWVAR 2
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 91
57442: PUSH
57443: LD_VAR 0 3
57447: PUSH
57448: LD_INT 30
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: LIST
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PPUSH
57460: CALL_OW 69
57464: PPUSH
57465: LD_VAR 0 3
57469: PPUSH
57470: CALL_OW 74
57474: PPUSH
57475: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
57479: LD_VAR 0 2
57483: PUSH
57484: LD_INT 80
57486: GREATER
57487: PUSH
57488: LD_VAR 0 3
57492: PPUSH
57493: CALL_OW 301
57497: OR
57498: IFFALSE 57375
// if un then
57500: LD_VAR 0 3
57504: IFFALSE 57515
// RemoveUnit ( un ) ;
57506: LD_VAR 0 3
57510: PPUSH
57511: CALL_OW 64
// end ;
57515: PPOPN 3
57517: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
57518: LD_EXP 117
57522: IFFALSE 57638
57524: GO 57526
57526: DISABLE
57527: LD_INT 0
57529: PPUSH
57530: PPUSH
57531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
57532: LD_ADDR_VAR 0 2
57536: PUSH
57537: LD_INT 81
57539: PUSH
57540: LD_OWVAR 2
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 21
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PPUSH
57563: CALL_OW 69
57567: ST_TO_ADDR
// ToLua ( playComputer() ) ;
57568: LD_STRING playComputer()
57570: PPUSH
57571: CALL_OW 559
// if not tmp then
57575: LD_VAR 0 2
57579: NOT
57580: IFFALSE 57584
// exit ;
57582: GO 57638
// for i in tmp do
57584: LD_ADDR_VAR 0 1
57588: PUSH
57589: LD_VAR 0 2
57593: PUSH
57594: FOR_IN
57595: IFFALSE 57636
// for j := 1 to 4 do
57597: LD_ADDR_VAR 0 3
57601: PUSH
57602: DOUBLE
57603: LD_INT 1
57605: DEC
57606: ST_TO_ADDR
57607: LD_INT 4
57609: PUSH
57610: FOR_TO
57611: IFFALSE 57632
// SetSkill ( i , j , 10 ) ;
57613: LD_VAR 0 1
57617: PPUSH
57618: LD_VAR 0 3
57622: PPUSH
57623: LD_INT 10
57625: PPUSH
57626: CALL_OW 237
57630: GO 57610
57632: POP
57633: POP
57634: GO 57594
57636: POP
57637: POP
// end ;
57638: PPOPN 3
57640: END
// every 0 0$1 trigger s30 do var i , tmp ;
57641: LD_EXP 118
57645: IFFALSE 57714
57647: GO 57649
57649: DISABLE
57650: LD_INT 0
57652: PPUSH
57653: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57654: LD_ADDR_VAR 0 2
57658: PUSH
57659: LD_INT 22
57661: PUSH
57662: LD_OWVAR 2
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PPUSH
57671: CALL_OW 69
57675: ST_TO_ADDR
// if not tmp then
57676: LD_VAR 0 2
57680: NOT
57681: IFFALSE 57685
// exit ;
57683: GO 57714
// for i in tmp do
57685: LD_ADDR_VAR 0 1
57689: PUSH
57690: LD_VAR 0 2
57694: PUSH
57695: FOR_IN
57696: IFFALSE 57712
// SetLives ( i , 300 ) ;
57698: LD_VAR 0 1
57702: PPUSH
57703: LD_INT 300
57705: PPUSH
57706: CALL_OW 234
57710: GO 57695
57712: POP
57713: POP
// end ;
57714: PPOPN 2
57716: END
// every 0 0$1 trigger s60 do var i , tmp ;
57717: LD_EXP 119
57721: IFFALSE 57790
57723: GO 57725
57725: DISABLE
57726: LD_INT 0
57728: PPUSH
57729: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
57730: LD_ADDR_VAR 0 2
57734: PUSH
57735: LD_INT 22
57737: PUSH
57738: LD_OWVAR 2
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PPUSH
57747: CALL_OW 69
57751: ST_TO_ADDR
// if not tmp then
57752: LD_VAR 0 2
57756: NOT
57757: IFFALSE 57761
// exit ;
57759: GO 57790
// for i in tmp do
57761: LD_ADDR_VAR 0 1
57765: PUSH
57766: LD_VAR 0 2
57770: PUSH
57771: FOR_IN
57772: IFFALSE 57788
// SetLives ( i , 600 ) ;
57774: LD_VAR 0 1
57778: PPUSH
57779: LD_INT 600
57781: PPUSH
57782: CALL_OW 234
57786: GO 57771
57788: POP
57789: POP
// end ;
57790: PPOPN 2
57792: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57793: LD_INT 0
57795: PPUSH
// case cmd of 301 :
57796: LD_VAR 0 1
57800: PUSH
57801: LD_INT 301
57803: DOUBLE
57804: EQUAL
57805: IFTRUE 57809
57807: GO 57841
57809: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
57810: LD_VAR 0 6
57814: PPUSH
57815: LD_VAR 0 7
57819: PPUSH
57820: LD_VAR 0 8
57824: PPUSH
57825: LD_VAR 0 4
57829: PPUSH
57830: LD_VAR 0 5
57834: PPUSH
57835: CALL 59042 0 5
57839: GO 57962
57841: LD_INT 302
57843: DOUBLE
57844: EQUAL
57845: IFTRUE 57849
57847: GO 57886
57849: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
57850: LD_VAR 0 6
57854: PPUSH
57855: LD_VAR 0 7
57859: PPUSH
57860: LD_VAR 0 8
57864: PPUSH
57865: LD_VAR 0 9
57869: PPUSH
57870: LD_VAR 0 4
57874: PPUSH
57875: LD_VAR 0 5
57879: PPUSH
57880: CALL 59133 0 6
57884: GO 57962
57886: LD_INT 303
57888: DOUBLE
57889: EQUAL
57890: IFTRUE 57894
57892: GO 57931
57894: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
57895: LD_VAR 0 6
57899: PPUSH
57900: LD_VAR 0 7
57904: PPUSH
57905: LD_VAR 0 8
57909: PPUSH
57910: LD_VAR 0 9
57914: PPUSH
57915: LD_VAR 0 4
57919: PPUSH
57920: LD_VAR 0 5
57924: PPUSH
57925: CALL 57967 0 6
57929: GO 57962
57931: LD_INT 304
57933: DOUBLE
57934: EQUAL
57935: IFTRUE 57939
57937: GO 57961
57939: POP
// hHackTeleport ( unit , x , y ) ; end ;
57940: LD_VAR 0 2
57944: PPUSH
57945: LD_VAR 0 4
57949: PPUSH
57950: LD_VAR 0 5
57954: PPUSH
57955: CALL 59726 0 3
57959: GO 57962
57961: POP
// end ;
57962: LD_VAR 0 12
57966: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
57967: LD_INT 0
57969: PPUSH
57970: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
57971: LD_VAR 0 1
57975: PUSH
57976: LD_INT 1
57978: LESS
57979: PUSH
57980: LD_VAR 0 1
57984: PUSH
57985: LD_INT 3
57987: GREATER
57988: OR
57989: PUSH
57990: LD_VAR 0 5
57994: PPUSH
57995: LD_VAR 0 6
57999: PPUSH
58000: CALL_OW 428
58004: OR
58005: IFFALSE 58009
// exit ;
58007: GO 58729
// uc_side := your_side ;
58009: LD_ADDR_OWVAR 20
58013: PUSH
58014: LD_OWVAR 2
58018: ST_TO_ADDR
// uc_nation := nation ;
58019: LD_ADDR_OWVAR 21
58023: PUSH
58024: LD_VAR 0 1
58028: ST_TO_ADDR
// bc_level = 1 ;
58029: LD_ADDR_OWVAR 43
58033: PUSH
58034: LD_INT 1
58036: ST_TO_ADDR
// case btype of 1 :
58037: LD_VAR 0 2
58041: PUSH
58042: LD_INT 1
58044: DOUBLE
58045: EQUAL
58046: IFTRUE 58050
58048: GO 58061
58050: POP
// bc_type := b_depot ; 2 :
58051: LD_ADDR_OWVAR 42
58055: PUSH
58056: LD_INT 0
58058: ST_TO_ADDR
58059: GO 58673
58061: LD_INT 2
58063: DOUBLE
58064: EQUAL
58065: IFTRUE 58069
58067: GO 58080
58069: POP
// bc_type := b_warehouse ; 3 :
58070: LD_ADDR_OWVAR 42
58074: PUSH
58075: LD_INT 1
58077: ST_TO_ADDR
58078: GO 58673
58080: LD_INT 3
58082: DOUBLE
58083: EQUAL
58084: IFTRUE 58088
58086: GO 58099
58088: POP
// bc_type := b_lab ; 4 .. 9 :
58089: LD_ADDR_OWVAR 42
58093: PUSH
58094: LD_INT 6
58096: ST_TO_ADDR
58097: GO 58673
58099: LD_INT 4
58101: DOUBLE
58102: GREATEREQUAL
58103: IFFALSE 58111
58105: LD_INT 9
58107: DOUBLE
58108: LESSEQUAL
58109: IFTRUE 58113
58111: GO 58165
58113: POP
// begin bc_type := b_lab_half ;
58114: LD_ADDR_OWVAR 42
58118: PUSH
58119: LD_INT 7
58121: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
58122: LD_ADDR_OWVAR 44
58126: PUSH
58127: LD_INT 10
58129: PUSH
58130: LD_INT 11
58132: PUSH
58133: LD_INT 12
58135: PUSH
58136: LD_INT 15
58138: PUSH
58139: LD_INT 14
58141: PUSH
58142: LD_INT 13
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: PUSH
58153: LD_VAR 0 2
58157: PUSH
58158: LD_INT 3
58160: MINUS
58161: ARRAY
58162: ST_TO_ADDR
// end ; 10 .. 13 :
58163: GO 58673
58165: LD_INT 10
58167: DOUBLE
58168: GREATEREQUAL
58169: IFFALSE 58177
58171: LD_INT 13
58173: DOUBLE
58174: LESSEQUAL
58175: IFTRUE 58179
58177: GO 58256
58179: POP
// begin bc_type := b_lab_full ;
58180: LD_ADDR_OWVAR 42
58184: PUSH
58185: LD_INT 8
58187: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
58188: LD_ADDR_OWVAR 44
58192: PUSH
58193: LD_INT 10
58195: PUSH
58196: LD_INT 12
58198: PUSH
58199: LD_INT 14
58201: PUSH
58202: LD_INT 13
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: PUSH
58211: LD_VAR 0 2
58215: PUSH
58216: LD_INT 9
58218: MINUS
58219: ARRAY
58220: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
58221: LD_ADDR_OWVAR 45
58225: PUSH
58226: LD_INT 11
58228: PUSH
58229: LD_INT 15
58231: PUSH
58232: LD_INT 12
58234: PUSH
58235: LD_INT 15
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: PUSH
58244: LD_VAR 0 2
58248: PUSH
58249: LD_INT 9
58251: MINUS
58252: ARRAY
58253: ST_TO_ADDR
// end ; 14 :
58254: GO 58673
58256: LD_INT 14
58258: DOUBLE
58259: EQUAL
58260: IFTRUE 58264
58262: GO 58275
58264: POP
// bc_type := b_workshop ; 15 :
58265: LD_ADDR_OWVAR 42
58269: PUSH
58270: LD_INT 2
58272: ST_TO_ADDR
58273: GO 58673
58275: LD_INT 15
58277: DOUBLE
58278: EQUAL
58279: IFTRUE 58283
58281: GO 58294
58283: POP
// bc_type := b_factory ; 16 :
58284: LD_ADDR_OWVAR 42
58288: PUSH
58289: LD_INT 3
58291: ST_TO_ADDR
58292: GO 58673
58294: LD_INT 16
58296: DOUBLE
58297: EQUAL
58298: IFTRUE 58302
58300: GO 58313
58302: POP
// bc_type := b_ext_gun ; 17 :
58303: LD_ADDR_OWVAR 42
58307: PUSH
58308: LD_INT 17
58310: ST_TO_ADDR
58311: GO 58673
58313: LD_INT 17
58315: DOUBLE
58316: EQUAL
58317: IFTRUE 58321
58319: GO 58349
58321: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
58322: LD_ADDR_OWVAR 42
58326: PUSH
58327: LD_INT 19
58329: PUSH
58330: LD_INT 23
58332: PUSH
58333: LD_INT 19
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: LIST
58340: PUSH
58341: LD_VAR 0 1
58345: ARRAY
58346: ST_TO_ADDR
58347: GO 58673
58349: LD_INT 18
58351: DOUBLE
58352: EQUAL
58353: IFTRUE 58357
58355: GO 58368
58357: POP
// bc_type := b_ext_radar ; 19 :
58358: LD_ADDR_OWVAR 42
58362: PUSH
58363: LD_INT 20
58365: ST_TO_ADDR
58366: GO 58673
58368: LD_INT 19
58370: DOUBLE
58371: EQUAL
58372: IFTRUE 58376
58374: GO 58387
58376: POP
// bc_type := b_ext_radio ; 20 :
58377: LD_ADDR_OWVAR 42
58381: PUSH
58382: LD_INT 22
58384: ST_TO_ADDR
58385: GO 58673
58387: LD_INT 20
58389: DOUBLE
58390: EQUAL
58391: IFTRUE 58395
58393: GO 58406
58395: POP
// bc_type := b_ext_siberium ; 21 :
58396: LD_ADDR_OWVAR 42
58400: PUSH
58401: LD_INT 21
58403: ST_TO_ADDR
58404: GO 58673
58406: LD_INT 21
58408: DOUBLE
58409: EQUAL
58410: IFTRUE 58414
58412: GO 58425
58414: POP
// bc_type := b_ext_computer ; 22 :
58415: LD_ADDR_OWVAR 42
58419: PUSH
58420: LD_INT 24
58422: ST_TO_ADDR
58423: GO 58673
58425: LD_INT 22
58427: DOUBLE
58428: EQUAL
58429: IFTRUE 58433
58431: GO 58444
58433: POP
// bc_type := b_ext_track ; 23 :
58434: LD_ADDR_OWVAR 42
58438: PUSH
58439: LD_INT 16
58441: ST_TO_ADDR
58442: GO 58673
58444: LD_INT 23
58446: DOUBLE
58447: EQUAL
58448: IFTRUE 58452
58450: GO 58463
58452: POP
// bc_type := b_ext_laser ; 24 :
58453: LD_ADDR_OWVAR 42
58457: PUSH
58458: LD_INT 25
58460: ST_TO_ADDR
58461: GO 58673
58463: LD_INT 24
58465: DOUBLE
58466: EQUAL
58467: IFTRUE 58471
58469: GO 58482
58471: POP
// bc_type := b_control_tower ; 25 :
58472: LD_ADDR_OWVAR 42
58476: PUSH
58477: LD_INT 36
58479: ST_TO_ADDR
58480: GO 58673
58482: LD_INT 25
58484: DOUBLE
58485: EQUAL
58486: IFTRUE 58490
58488: GO 58501
58490: POP
// bc_type := b_breastwork ; 26 :
58491: LD_ADDR_OWVAR 42
58495: PUSH
58496: LD_INT 31
58498: ST_TO_ADDR
58499: GO 58673
58501: LD_INT 26
58503: DOUBLE
58504: EQUAL
58505: IFTRUE 58509
58507: GO 58520
58509: POP
// bc_type := b_bunker ; 27 :
58510: LD_ADDR_OWVAR 42
58514: PUSH
58515: LD_INT 32
58517: ST_TO_ADDR
58518: GO 58673
58520: LD_INT 27
58522: DOUBLE
58523: EQUAL
58524: IFTRUE 58528
58526: GO 58539
58528: POP
// bc_type := b_turret ; 28 :
58529: LD_ADDR_OWVAR 42
58533: PUSH
58534: LD_INT 33
58536: ST_TO_ADDR
58537: GO 58673
58539: LD_INT 28
58541: DOUBLE
58542: EQUAL
58543: IFTRUE 58547
58545: GO 58558
58547: POP
// bc_type := b_armoury ; 29 :
58548: LD_ADDR_OWVAR 42
58552: PUSH
58553: LD_INT 4
58555: ST_TO_ADDR
58556: GO 58673
58558: LD_INT 29
58560: DOUBLE
58561: EQUAL
58562: IFTRUE 58566
58564: GO 58577
58566: POP
// bc_type := b_barracks ; 30 :
58567: LD_ADDR_OWVAR 42
58571: PUSH
58572: LD_INT 5
58574: ST_TO_ADDR
58575: GO 58673
58577: LD_INT 30
58579: DOUBLE
58580: EQUAL
58581: IFTRUE 58585
58583: GO 58596
58585: POP
// bc_type := b_solar_power ; 31 :
58586: LD_ADDR_OWVAR 42
58590: PUSH
58591: LD_INT 27
58593: ST_TO_ADDR
58594: GO 58673
58596: LD_INT 31
58598: DOUBLE
58599: EQUAL
58600: IFTRUE 58604
58602: GO 58615
58604: POP
// bc_type := b_oil_power ; 32 :
58605: LD_ADDR_OWVAR 42
58609: PUSH
58610: LD_INT 26
58612: ST_TO_ADDR
58613: GO 58673
58615: LD_INT 32
58617: DOUBLE
58618: EQUAL
58619: IFTRUE 58623
58621: GO 58634
58623: POP
// bc_type := b_siberite_power ; 33 :
58624: LD_ADDR_OWVAR 42
58628: PUSH
58629: LD_INT 28
58631: ST_TO_ADDR
58632: GO 58673
58634: LD_INT 33
58636: DOUBLE
58637: EQUAL
58638: IFTRUE 58642
58640: GO 58653
58642: POP
// bc_type := b_oil_mine ; 34 :
58643: LD_ADDR_OWVAR 42
58647: PUSH
58648: LD_INT 29
58650: ST_TO_ADDR
58651: GO 58673
58653: LD_INT 34
58655: DOUBLE
58656: EQUAL
58657: IFTRUE 58661
58659: GO 58672
58661: POP
// bc_type := b_siberite_mine ; end ;
58662: LD_ADDR_OWVAR 42
58666: PUSH
58667: LD_INT 30
58669: ST_TO_ADDR
58670: GO 58673
58672: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
58673: LD_ADDR_VAR 0 8
58677: PUSH
58678: LD_VAR 0 5
58682: PPUSH
58683: LD_VAR 0 6
58687: PPUSH
58688: LD_VAR 0 3
58692: PPUSH
58693: CALL_OW 47
58697: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
58698: LD_OWVAR 42
58702: PUSH
58703: LD_INT 32
58705: PUSH
58706: LD_INT 33
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: IN
58713: IFFALSE 58729
// PlaceWeaponTurret ( b , weapon ) ;
58715: LD_VAR 0 8
58719: PPUSH
58720: LD_VAR 0 4
58724: PPUSH
58725: CALL_OW 431
// end ;
58729: LD_VAR 0 7
58733: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
58734: LD_INT 0
58736: PPUSH
58737: PPUSH
58738: PPUSH
58739: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58740: LD_ADDR_VAR 0 4
58744: PUSH
58745: LD_INT 22
58747: PUSH
58748: LD_OWVAR 2
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 2
58759: PUSH
58760: LD_INT 30
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 30
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: LIST
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PPUSH
58789: CALL_OW 69
58793: ST_TO_ADDR
// if not tmp then
58794: LD_VAR 0 4
58798: NOT
58799: IFFALSE 58803
// exit ;
58801: GO 58862
// for i in tmp do
58803: LD_ADDR_VAR 0 2
58807: PUSH
58808: LD_VAR 0 4
58812: PUSH
58813: FOR_IN
58814: IFFALSE 58860
// for j = 1 to 3 do
58816: LD_ADDR_VAR 0 3
58820: PUSH
58821: DOUBLE
58822: LD_INT 1
58824: DEC
58825: ST_TO_ADDR
58826: LD_INT 3
58828: PUSH
58829: FOR_TO
58830: IFFALSE 58856
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
58832: LD_VAR 0 2
58836: PPUSH
58837: CALL_OW 274
58841: PPUSH
58842: LD_VAR 0 3
58846: PPUSH
58847: LD_INT 99999
58849: PPUSH
58850: CALL_OW 277
58854: GO 58829
58856: POP
58857: POP
58858: GO 58813
58860: POP
58861: POP
// end ;
58862: LD_VAR 0 1
58866: RET
// export function hHackSetLevel10 ; var i , j ; begin
58867: LD_INT 0
58869: PPUSH
58870: PPUSH
58871: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58872: LD_ADDR_VAR 0 2
58876: PUSH
58877: LD_INT 21
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PPUSH
58887: CALL_OW 69
58891: PUSH
58892: FOR_IN
58893: IFFALSE 58945
// if IsSelected ( i ) then
58895: LD_VAR 0 2
58899: PPUSH
58900: CALL_OW 306
58904: IFFALSE 58943
// begin for j := 1 to 4 do
58906: LD_ADDR_VAR 0 3
58910: PUSH
58911: DOUBLE
58912: LD_INT 1
58914: DEC
58915: ST_TO_ADDR
58916: LD_INT 4
58918: PUSH
58919: FOR_TO
58920: IFFALSE 58941
// SetSkill ( i , j , 10 ) ;
58922: LD_VAR 0 2
58926: PPUSH
58927: LD_VAR 0 3
58931: PPUSH
58932: LD_INT 10
58934: PPUSH
58935: CALL_OW 237
58939: GO 58919
58941: POP
58942: POP
// end ;
58943: GO 58892
58945: POP
58946: POP
// end ;
58947: LD_VAR 0 1
58951: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
58952: LD_INT 0
58954: PPUSH
58955: PPUSH
58956: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
58957: LD_ADDR_VAR 0 2
58961: PUSH
58962: LD_INT 22
58964: PUSH
58965: LD_OWVAR 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 21
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PPUSH
58988: CALL_OW 69
58992: PUSH
58993: FOR_IN
58994: IFFALSE 59035
// begin for j := 1 to 4 do
58996: LD_ADDR_VAR 0 3
59000: PUSH
59001: DOUBLE
59002: LD_INT 1
59004: DEC
59005: ST_TO_ADDR
59006: LD_INT 4
59008: PUSH
59009: FOR_TO
59010: IFFALSE 59031
// SetSkill ( i , j , 10 ) ;
59012: LD_VAR 0 2
59016: PPUSH
59017: LD_VAR 0 3
59021: PPUSH
59022: LD_INT 10
59024: PPUSH
59025: CALL_OW 237
59029: GO 59009
59031: POP
59032: POP
// end ;
59033: GO 58993
59035: POP
59036: POP
// end ;
59037: LD_VAR 0 1
59041: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
59042: LD_INT 0
59044: PPUSH
// uc_side := your_side ;
59045: LD_ADDR_OWVAR 20
59049: PUSH
59050: LD_OWVAR 2
59054: ST_TO_ADDR
// uc_nation := nation ;
59055: LD_ADDR_OWVAR 21
59059: PUSH
59060: LD_VAR 0 1
59064: ST_TO_ADDR
// InitHc ;
59065: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
59069: LD_INT 0
59071: PPUSH
59072: LD_VAR 0 2
59076: PPUSH
59077: LD_VAR 0 3
59081: PPUSH
59082: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
59086: LD_VAR 0 4
59090: PPUSH
59091: LD_VAR 0 5
59095: PPUSH
59096: CALL_OW 428
59100: PUSH
59101: LD_INT 0
59103: EQUAL
59104: IFFALSE 59128
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
59106: CALL_OW 44
59110: PPUSH
59111: LD_VAR 0 4
59115: PPUSH
59116: LD_VAR 0 5
59120: PPUSH
59121: LD_INT 1
59123: PPUSH
59124: CALL_OW 48
// end ;
59128: LD_VAR 0 6
59132: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
59133: LD_INT 0
59135: PPUSH
59136: PPUSH
// uc_side := your_side ;
59137: LD_ADDR_OWVAR 20
59141: PUSH
59142: LD_OWVAR 2
59146: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
59147: LD_VAR 0 1
59151: PUSH
59152: LD_INT 1
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: LD_INT 4
59163: PUSH
59164: LD_INT 5
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: IN
59174: IFFALSE 59186
// uc_nation := nation_american else
59176: LD_ADDR_OWVAR 21
59180: PUSH
59181: LD_INT 1
59183: ST_TO_ADDR
59184: GO 59229
// if chassis in [ 11 , 12 , 13 , 14 ] then
59186: LD_VAR 0 1
59190: PUSH
59191: LD_INT 11
59193: PUSH
59194: LD_INT 12
59196: PUSH
59197: LD_INT 13
59199: PUSH
59200: LD_INT 14
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: IN
59209: IFFALSE 59221
// uc_nation := nation_arabian else
59211: LD_ADDR_OWVAR 21
59215: PUSH
59216: LD_INT 2
59218: ST_TO_ADDR
59219: GO 59229
// uc_nation := nation_russian ;
59221: LD_ADDR_OWVAR 21
59225: PUSH
59226: LD_INT 3
59228: ST_TO_ADDR
// vc_chassis := chassis ;
59229: LD_ADDR_OWVAR 37
59233: PUSH
59234: LD_VAR 0 1
59238: ST_TO_ADDR
// vc_engine := engine ;
59239: LD_ADDR_OWVAR 39
59243: PUSH
59244: LD_VAR 0 2
59248: ST_TO_ADDR
// vc_control := control ;
59249: LD_ADDR_OWVAR 38
59253: PUSH
59254: LD_VAR 0 3
59258: ST_TO_ADDR
// vc_weapon := weapon ;
59259: LD_ADDR_OWVAR 40
59263: PUSH
59264: LD_VAR 0 4
59268: ST_TO_ADDR
// un := CreateVehicle ;
59269: LD_ADDR_VAR 0 8
59273: PUSH
59274: CALL_OW 45
59278: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
59279: LD_VAR 0 8
59283: PPUSH
59284: LD_INT 0
59286: PPUSH
59287: LD_INT 5
59289: PPUSH
59290: CALL_OW 12
59294: PPUSH
59295: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
59299: LD_VAR 0 8
59303: PPUSH
59304: LD_VAR 0 5
59308: PPUSH
59309: LD_VAR 0 6
59313: PPUSH
59314: LD_INT 1
59316: PPUSH
59317: CALL_OW 48
// end ;
59321: LD_VAR 0 7
59325: RET
// export hInvincible ; every 1 do
59326: GO 59328
59328: DISABLE
// hInvincible := [ ] ;
59329: LD_ADDR_EXP 120
59333: PUSH
59334: EMPTY
59335: ST_TO_ADDR
59336: END
// every 10 do var i ;
59337: GO 59339
59339: DISABLE
59340: LD_INT 0
59342: PPUSH
// begin enable ;
59343: ENABLE
// if not hInvincible then
59344: LD_EXP 120
59348: NOT
59349: IFFALSE 59353
// exit ;
59351: GO 59397
// for i in hInvincible do
59353: LD_ADDR_VAR 0 1
59357: PUSH
59358: LD_EXP 120
59362: PUSH
59363: FOR_IN
59364: IFFALSE 59395
// if GetLives ( i ) < 1000 then
59366: LD_VAR 0 1
59370: PPUSH
59371: CALL_OW 256
59375: PUSH
59376: LD_INT 1000
59378: LESS
59379: IFFALSE 59393
// SetLives ( i , 1000 ) ;
59381: LD_VAR 0 1
59385: PPUSH
59386: LD_INT 1000
59388: PPUSH
59389: CALL_OW 234
59393: GO 59363
59395: POP
59396: POP
// end ;
59397: PPOPN 1
59399: END
// export function hHackInvincible ; var i ; begin
59400: LD_INT 0
59402: PPUSH
59403: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
59404: LD_ADDR_VAR 0 2
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: LD_INT 21
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 21
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: LIST
59436: PPUSH
59437: CALL_OW 69
59441: PUSH
59442: FOR_IN
59443: IFFALSE 59504
// if IsSelected ( i ) then
59445: LD_VAR 0 2
59449: PPUSH
59450: CALL_OW 306
59454: IFFALSE 59502
// begin if i in hInvincible then
59456: LD_VAR 0 2
59460: PUSH
59461: LD_EXP 120
59465: IN
59466: IFFALSE 59486
// hInvincible := hInvincible diff i else
59468: LD_ADDR_EXP 120
59472: PUSH
59473: LD_EXP 120
59477: PUSH
59478: LD_VAR 0 2
59482: DIFF
59483: ST_TO_ADDR
59484: GO 59502
// hInvincible := hInvincible union i ;
59486: LD_ADDR_EXP 120
59490: PUSH
59491: LD_EXP 120
59495: PUSH
59496: LD_VAR 0 2
59500: UNION
59501: ST_TO_ADDR
// end ;
59502: GO 59442
59504: POP
59505: POP
// end ;
59506: LD_VAR 0 1
59510: RET
// export function hHackInvisible ; var i , j ; begin
59511: LD_INT 0
59513: PPUSH
59514: PPUSH
59515: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
59516: LD_ADDR_VAR 0 2
59520: PUSH
59521: LD_INT 21
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PPUSH
59531: CALL_OW 69
59535: PUSH
59536: FOR_IN
59537: IFFALSE 59561
// if IsSelected ( i ) then
59539: LD_VAR 0 2
59543: PPUSH
59544: CALL_OW 306
59548: IFFALSE 59559
// ComForceInvisible ( i ) ;
59550: LD_VAR 0 2
59554: PPUSH
59555: CALL_OW 496
59559: GO 59536
59561: POP
59562: POP
// end ;
59563: LD_VAR 0 1
59567: RET
// export function hHackChangeYourSide ; begin
59568: LD_INT 0
59570: PPUSH
// if your_side = 8 then
59571: LD_OWVAR 2
59575: PUSH
59576: LD_INT 8
59578: EQUAL
59579: IFFALSE 59591
// your_side := 0 else
59581: LD_ADDR_OWVAR 2
59585: PUSH
59586: LD_INT 0
59588: ST_TO_ADDR
59589: GO 59605
// your_side := your_side + 1 ;
59591: LD_ADDR_OWVAR 2
59595: PUSH
59596: LD_OWVAR 2
59600: PUSH
59601: LD_INT 1
59603: PLUS
59604: ST_TO_ADDR
// end ;
59605: LD_VAR 0 1
59609: RET
// export function hHackChangeUnitSide ; var i , j ; begin
59610: LD_INT 0
59612: PPUSH
59613: PPUSH
59614: PPUSH
// for i in all_units do
59615: LD_ADDR_VAR 0 2
59619: PUSH
59620: LD_OWVAR 3
59624: PUSH
59625: FOR_IN
59626: IFFALSE 59704
// if IsSelected ( i ) then
59628: LD_VAR 0 2
59632: PPUSH
59633: CALL_OW 306
59637: IFFALSE 59702
// begin j := GetSide ( i ) ;
59639: LD_ADDR_VAR 0 3
59643: PUSH
59644: LD_VAR 0 2
59648: PPUSH
59649: CALL_OW 255
59653: ST_TO_ADDR
// if j = 8 then
59654: LD_VAR 0 3
59658: PUSH
59659: LD_INT 8
59661: EQUAL
59662: IFFALSE 59674
// j := 0 else
59664: LD_ADDR_VAR 0 3
59668: PUSH
59669: LD_INT 0
59671: ST_TO_ADDR
59672: GO 59688
// j := j + 1 ;
59674: LD_ADDR_VAR 0 3
59678: PUSH
59679: LD_VAR 0 3
59683: PUSH
59684: LD_INT 1
59686: PLUS
59687: ST_TO_ADDR
// SetSide ( i , j ) ;
59688: LD_VAR 0 2
59692: PPUSH
59693: LD_VAR 0 3
59697: PPUSH
59698: CALL_OW 235
// end ;
59702: GO 59625
59704: POP
59705: POP
// end ;
59706: LD_VAR 0 1
59710: RET
// export function hHackFog ; begin
59711: LD_INT 0
59713: PPUSH
// FogOff ( true ) ;
59714: LD_INT 1
59716: PPUSH
59717: CALL_OW 344
// end ;
59721: LD_VAR 0 1
59725: RET
// export function hHackTeleport ( unit , x , y ) ; begin
59726: LD_INT 0
59728: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
59729: LD_VAR 0 1
59733: PPUSH
59734: LD_VAR 0 2
59738: PPUSH
59739: LD_VAR 0 3
59743: PPUSH
59744: LD_INT 1
59746: PPUSH
59747: LD_INT 1
59749: PPUSH
59750: CALL_OW 483
// CenterOnXY ( x , y ) ;
59754: LD_VAR 0 2
59758: PPUSH
59759: LD_VAR 0 3
59763: PPUSH
59764: CALL_OW 84
// end ;
59768: LD_VAR 0 4
59772: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
59773: LD_INT 0
59775: PPUSH
59776: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
59777: LD_VAR 0 1
59781: NOT
59782: PUSH
59783: LD_VAR 0 2
59787: PPUSH
59788: LD_VAR 0 3
59792: PPUSH
59793: CALL_OW 488
59797: NOT
59798: OR
59799: PUSH
59800: LD_VAR 0 1
59804: PPUSH
59805: CALL_OW 266
59809: PUSH
59810: LD_INT 3
59812: NONEQUAL
59813: PUSH
59814: LD_VAR 0 1
59818: PPUSH
59819: CALL_OW 247
59823: PUSH
59824: LD_INT 1
59826: EQUAL
59827: NOT
59828: AND
59829: OR
59830: IFFALSE 59834
// exit ;
59832: GO 59983
// if GetType ( factory ) = unit_human then
59834: LD_VAR 0 1
59838: PPUSH
59839: CALL_OW 247
59843: PUSH
59844: LD_INT 1
59846: EQUAL
59847: IFFALSE 59864
// factory := IsInUnit ( factory ) ;
59849: LD_ADDR_VAR 0 1
59853: PUSH
59854: LD_VAR 0 1
59858: PPUSH
59859: CALL_OW 310
59863: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
59864: LD_VAR 0 1
59868: PPUSH
59869: CALL_OW 266
59873: PUSH
59874: LD_INT 3
59876: NONEQUAL
59877: IFFALSE 59881
// exit ;
59879: GO 59983
// if HexInfo ( x , y ) = factory then
59881: LD_VAR 0 2
59885: PPUSH
59886: LD_VAR 0 3
59890: PPUSH
59891: CALL_OW 428
59895: PUSH
59896: LD_VAR 0 1
59900: EQUAL
59901: IFFALSE 59928
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
59903: LD_ADDR_EXP 121
59907: PUSH
59908: LD_EXP 121
59912: PPUSH
59913: LD_VAR 0 1
59917: PPUSH
59918: LD_INT 0
59920: PPUSH
59921: CALL_OW 1
59925: ST_TO_ADDR
59926: GO 59979
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
59928: LD_ADDR_EXP 121
59932: PUSH
59933: LD_EXP 121
59937: PPUSH
59938: LD_VAR 0 1
59942: PPUSH
59943: LD_VAR 0 1
59947: PPUSH
59948: CALL_OW 255
59952: PUSH
59953: LD_VAR 0 1
59957: PUSH
59958: LD_VAR 0 2
59962: PUSH
59963: LD_VAR 0 3
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: PPUSH
59974: CALL_OW 1
59978: ST_TO_ADDR
// UpdateFactoryWaypoints ;
59979: CALL 59988 0 0
// end ;
59983: LD_VAR 0 4
59987: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
59988: LD_INT 0
59990: PPUSH
59991: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
59992: LD_STRING resetFactoryWaypoint();
59994: PPUSH
59995: CALL_OW 559
// if factoryWaypoints then
59999: LD_EXP 121
60003: IFFALSE 60126
// begin for i := 1 to factoryWaypoints do
60005: LD_ADDR_VAR 0 2
60009: PUSH
60010: DOUBLE
60011: LD_INT 1
60013: DEC
60014: ST_TO_ADDR
60015: LD_EXP 121
60019: PUSH
60020: FOR_TO
60021: IFFALSE 60124
// if factoryWaypoints [ i ] then
60023: LD_EXP 121
60027: PUSH
60028: LD_VAR 0 2
60032: ARRAY
60033: IFFALSE 60122
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
60035: LD_STRING setFactoryWaypointXY(
60037: PUSH
60038: LD_EXP 121
60042: PUSH
60043: LD_VAR 0 2
60047: ARRAY
60048: PUSH
60049: LD_INT 1
60051: ARRAY
60052: STR
60053: PUSH
60054: LD_STRING ,
60056: STR
60057: PUSH
60058: LD_EXP 121
60062: PUSH
60063: LD_VAR 0 2
60067: ARRAY
60068: PUSH
60069: LD_INT 2
60071: ARRAY
60072: STR
60073: PUSH
60074: LD_STRING ,
60076: STR
60077: PUSH
60078: LD_EXP 121
60082: PUSH
60083: LD_VAR 0 2
60087: ARRAY
60088: PUSH
60089: LD_INT 3
60091: ARRAY
60092: STR
60093: PUSH
60094: LD_STRING ,
60096: STR
60097: PUSH
60098: LD_EXP 121
60102: PUSH
60103: LD_VAR 0 2
60107: ARRAY
60108: PUSH
60109: LD_INT 4
60111: ARRAY
60112: STR
60113: PUSH
60114: LD_STRING )
60116: STR
60117: PPUSH
60118: CALL_OW 559
60122: GO 60020
60124: POP
60125: POP
// end ; end ;
60126: LD_VAR 0 1
60130: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarhouseGatheringPoint ( warehouse , x , y ) ; begin
60131: LD_INT 0
60133: PPUSH
// if HexInfo ( x , y ) = warehouse then
60134: LD_VAR 0 2
60138: PPUSH
60139: LD_VAR 0 3
60143: PPUSH
60144: CALL_OW 428
60148: PUSH
60149: LD_VAR 0 1
60153: EQUAL
60154: IFFALSE 60181
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
60156: LD_ADDR_EXP 122
60160: PUSH
60161: LD_EXP 122
60165: PPUSH
60166: LD_VAR 0 1
60170: PPUSH
60171: LD_INT 0
60173: PPUSH
60174: CALL_OW 1
60178: ST_TO_ADDR
60179: GO 60232
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
60181: LD_ADDR_EXP 122
60185: PUSH
60186: LD_EXP 122
60190: PPUSH
60191: LD_VAR 0 1
60195: PPUSH
60196: LD_VAR 0 1
60200: PPUSH
60201: CALL_OW 255
60205: PUSH
60206: LD_VAR 0 1
60210: PUSH
60211: LD_VAR 0 2
60215: PUSH
60216: LD_VAR 0 3
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: PPUSH
60227: CALL_OW 1
60231: ST_TO_ADDR
// UpdateWarhouseGatheringPoints ;
60232: CALL 60241 0 0
// end ;
60236: LD_VAR 0 4
60240: RET
// export function UpdateWarhouseGatheringPoints ( ) ; var i ; begin
60241: LD_INT 0
60243: PPUSH
60244: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
60245: LD_STRING resetWarehouseGatheringPoints();
60247: PPUSH
60248: CALL_OW 559
// if warehouseGatheringPoints then
60252: LD_EXP 122
60256: IFFALSE 60379
// begin for i := 1 to warehouseGatheringPoints do
60258: LD_ADDR_VAR 0 2
60262: PUSH
60263: DOUBLE
60264: LD_INT 1
60266: DEC
60267: ST_TO_ADDR
60268: LD_EXP 122
60272: PUSH
60273: FOR_TO
60274: IFFALSE 60377
// if warehouseGatheringPoints [ i ] then
60276: LD_EXP 122
60280: PUSH
60281: LD_VAR 0 2
60285: ARRAY
60286: IFFALSE 60375
// ToLua ( setWarhouseGatheringPointXY( & warehouseGatheringPoints [ i ] [ 1 ] & , & warehouseGatheringPoints [ i ] [ 2 ] & , & warehouseGatheringPoints [ i ] [ 3 ] & , & warehouseGatheringPoints [ i ] [ 4 ] & ) ) ;
60288: LD_STRING setWarhouseGatheringPointXY(
60290: PUSH
60291: LD_EXP 122
60295: PUSH
60296: LD_VAR 0 2
60300: ARRAY
60301: PUSH
60302: LD_INT 1
60304: ARRAY
60305: STR
60306: PUSH
60307: LD_STRING ,
60309: STR
60310: PUSH
60311: LD_EXP 122
60315: PUSH
60316: LD_VAR 0 2
60320: ARRAY
60321: PUSH
60322: LD_INT 2
60324: ARRAY
60325: STR
60326: PUSH
60327: LD_STRING ,
60329: STR
60330: PUSH
60331: LD_EXP 122
60335: PUSH
60336: LD_VAR 0 2
60340: ARRAY
60341: PUSH
60342: LD_INT 3
60344: ARRAY
60345: STR
60346: PUSH
60347: LD_STRING ,
60349: STR
60350: PUSH
60351: LD_EXP 122
60355: PUSH
60356: LD_VAR 0 2
60360: ARRAY
60361: PUSH
60362: LD_INT 4
60364: ARRAY
60365: STR
60366: PUSH
60367: LD_STRING )
60369: STR
60370: PPUSH
60371: CALL_OW 559
60375: GO 60273
60377: POP
60378: POP
// end ; end ;
60379: LD_VAR 0 1
60383: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
60384: LD_EXP 122
60388: IFFALSE 61017
60390: GO 60392
60392: DISABLE
60393: LD_INT 0
60395: PPUSH
60396: PPUSH
60397: PPUSH
60398: PPUSH
60399: PPUSH
60400: PPUSH
60401: PPUSH
60402: PPUSH
60403: PPUSH
// begin enable ;
60404: ENABLE
// list := warehouseGatheringPoints diff 0 ;
60405: LD_ADDR_VAR 0 3
60409: PUSH
60410: LD_EXP 122
60414: PUSH
60415: LD_INT 0
60417: DIFF
60418: ST_TO_ADDR
// for i := 1 to list do
60419: LD_ADDR_VAR 0 1
60423: PUSH
60424: DOUBLE
60425: LD_INT 1
60427: DEC
60428: ST_TO_ADDR
60429: LD_VAR 0 3
60433: PUSH
60434: FOR_TO
60435: IFFALSE 61015
// begin if not list [ i ] then
60437: LD_VAR 0 3
60441: PUSH
60442: LD_VAR 0 1
60446: ARRAY
60447: NOT
60448: IFFALSE 60452
// continue ;
60450: GO 60434
// depot := list [ i ] [ 2 ] ;
60452: LD_ADDR_VAR 0 8
60456: PUSH
60457: LD_VAR 0 3
60461: PUSH
60462: LD_VAR 0 1
60466: ARRAY
60467: PUSH
60468: LD_INT 2
60470: ARRAY
60471: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
60472: LD_ADDR_VAR 0 5
60476: PUSH
60477: LD_VAR 0 3
60481: PUSH
60482: LD_VAR 0 1
60486: ARRAY
60487: PUSH
60488: LD_INT 1
60490: ARRAY
60491: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
60492: LD_VAR 0 8
60496: PPUSH
60497: CALL_OW 301
60501: PUSH
60502: LD_VAR 0 5
60506: PUSH
60507: LD_VAR 0 8
60511: PPUSH
60512: CALL_OW 255
60516: NONEQUAL
60517: OR
60518: IFFALSE 60547
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
60520: LD_ADDR_EXP 122
60524: PUSH
60525: LD_EXP 122
60529: PPUSH
60530: LD_VAR 0 8
60534: PPUSH
60535: LD_INT 0
60537: PPUSH
60538: CALL_OW 1
60542: ST_TO_ADDR
// exit ;
60543: POP
60544: POP
60545: GO 61017
// end ; x := list [ i ] [ 3 ] ;
60547: LD_ADDR_VAR 0 6
60551: PUSH
60552: LD_VAR 0 3
60556: PUSH
60557: LD_VAR 0 1
60561: ARRAY
60562: PUSH
60563: LD_INT 3
60565: ARRAY
60566: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
60567: LD_ADDR_VAR 0 7
60571: PUSH
60572: LD_VAR 0 3
60576: PUSH
60577: LD_VAR 0 1
60581: ARRAY
60582: PUSH
60583: LD_INT 4
60585: ARRAY
60586: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
60587: LD_ADDR_VAR 0 9
60591: PUSH
60592: LD_VAR 0 6
60596: PPUSH
60597: LD_VAR 0 7
60601: PPUSH
60602: LD_INT 12
60604: PPUSH
60605: CALL 44019 0 3
60609: ST_TO_ADDR
// if not cratesNearbyPoint then
60610: LD_VAR 0 9
60614: NOT
60615: IFFALSE 60621
// exit ;
60617: POP
60618: POP
60619: GO 61017
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
60621: LD_ADDR_VAR 0 4
60625: PUSH
60626: LD_INT 22
60628: PUSH
60629: LD_VAR 0 5
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 3
60640: PUSH
60641: LD_INT 60
60643: PUSH
60644: EMPTY
60645: LIST
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: LD_INT 25
60656: PUSH
60657: LD_INT 2
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 25
60666: PUSH
60667: LD_INT 16
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: PPUSH
60684: CALL_OW 69
60688: PUSH
60689: LD_VAR 0 8
60693: PPUSH
60694: CALL_OW 313
60698: PPUSH
60699: LD_INT 3
60701: PUSH
60702: LD_INT 60
60704: PUSH
60705: EMPTY
60706: LIST
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: LD_INT 25
60717: PUSH
60718: LD_INT 2
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 25
60727: PUSH
60728: LD_INT 16
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: LIST
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PPUSH
60744: CALL_OW 72
60748: UNION
60749: ST_TO_ADDR
// if tmp then
60750: LD_VAR 0 4
60754: IFFALSE 60834
// begin tmp := ShrinkArray ( tmp , 3 ) ;
60756: LD_ADDR_VAR 0 4
60760: PUSH
60761: LD_VAR 0 4
60765: PPUSH
60766: LD_INT 3
60768: PPUSH
60769: CALL 41986 0 2
60773: ST_TO_ADDR
// for j in tmp do
60774: LD_ADDR_VAR 0 2
60778: PUSH
60779: LD_VAR 0 4
60783: PUSH
60784: FOR_IN
60785: IFFALSE 60828
// begin if IsInUnit ( j ) then
60787: LD_VAR 0 2
60791: PPUSH
60792: CALL_OW 310
60796: IFFALSE 60807
// ComExit ( j ) ;
60798: LD_VAR 0 2
60802: PPUSH
60803: CALL 42069 0 1
// AddComCollect ( j , x , y ) ;
60807: LD_VAR 0 2
60811: PPUSH
60812: LD_VAR 0 6
60816: PPUSH
60817: LD_VAR 0 7
60821: PPUSH
60822: CALL_OW 177
// end ;
60826: GO 60784
60828: POP
60829: POP
// exit ;
60830: POP
60831: POP
60832: GO 61017
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
60834: LD_ADDR_VAR 0 4
60838: PUSH
60839: LD_INT 22
60841: PUSH
60842: LD_VAR 0 5
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: LD_INT 34
60856: PUSH
60857: LD_INT 12
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 34
60866: PUSH
60867: LD_INT 51
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 34
60876: PUSH
60877: LD_INT 32
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 34
60886: PUSH
60887: LD_EXP 45
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PPUSH
60907: CALL_OW 69
60911: ST_TO_ADDR
// if tmp then
60912: LD_VAR 0 4
60916: IFFALSE 61013
// begin for j in tmp do
60918: LD_ADDR_VAR 0 2
60922: PUSH
60923: LD_VAR 0 4
60927: PUSH
60928: FOR_IN
60929: IFFALSE 61011
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
60931: LD_VAR 0 1
60935: PPUSH
60936: CALL_OW 261
60940: PUSH
60941: LD_INT 20
60943: GREATER
60944: PUSH
60945: LD_VAR 0 1
60949: PPUSH
60950: CALL_OW 314
60954: NOT
60955: AND
60956: PUSH
60957: LD_VAR 0 1
60961: PPUSH
60962: CALL_OW 263
60966: PUSH
60967: LD_INT 1
60969: NONEQUAL
60970: PUSH
60971: LD_VAR 0 1
60975: PPUSH
60976: CALL_OW 311
60980: OR
60981: AND
60982: IFFALSE 61009
// begin ComCollect ( j , x , y ) ;
60984: LD_VAR 0 2
60988: PPUSH
60989: LD_VAR 0 6
60993: PPUSH
60994: LD_VAR 0 7
60998: PPUSH
60999: CALL_OW 117
// exit ;
61003: POP
61004: POP
61005: POP
61006: POP
61007: GO 61017
// end ;
61009: GO 60928
61011: POP
61012: POP
// end ; end ;
61013: GO 60434
61015: POP
61016: POP
// end ;
61017: PPOPN 9
61019: END
