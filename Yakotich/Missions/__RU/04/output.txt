// starting var b , n ; begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 200 0 0
// SetBname ( NorthLenin , lenin ) ;
   8: LD_INT 253
  10: PPUSH
  11: LD_STRING lenin
  13: PPUSH
  14: CALL_OW 500
// SetBname ( SouthLenin , lenin ) ;
  18: LD_INT 218
  20: PPUSH
  21: LD_STRING lenin
  23: PPUSH
  24: CALL_OW 500
// SetBname ( MorozovBase , OC ) ;
  28: LD_INT 348
  30: PPUSH
  31: LD_STRING OC
  33: PPUSH
  34: CALL_OW 500
// SetBname ( YakotichBase , kamenev ) ;
  38: LD_INT 312
  40: PPUSH
  41: LD_STRING kamenev
  43: PPUSH
  44: CALL_OW 500
// SetBname ( BukovBase , Kuybyshev ) ;
  48: LD_INT 127
  50: PPUSH
  51: LD_STRING Kuybyshev
  53: PPUSH
  54: CALL_OW 500
// AnimateTrees ( true ) ;
  58: LD_INT 1
  60: PPUSH
  61: CALL_OW 573
// Randomize ;
  65: CALL_OW 10
// RandomizeAll ;
  69: CALL_OW 11
// for b in FilterUnitsInArea ( SouthLeninArea , [ [ f_type , unit_building ] ] ) do
  73: LD_ADDR_VAR 0 1
  77: PUSH
  78: LD_INT 4
  80: PPUSH
  81: LD_INT 21
  83: PUSH
  84: LD_INT 3
  86: PUSH
  87: EMPTY
  88: LIST
  89: LIST
  90: PUSH
  91: EMPTY
  92: LIST
  93: PPUSH
  94: CALL_OW 70
  98: PUSH
  99: FOR_IN
 100: IFFALSE 116
// ComLinkToBase ( SouthLenin , b ) ;
 102: LD_INT 218
 104: PPUSH
 105: LD_VAR 0 1
 109: PPUSH
 110: CALL_OW 169
 114: GO 99
 116: POP
 117: POP
// for n in FilterUnitsInArea ( NorthLeninArea , [ [ f_type , unit_building ] ] ) do
 118: LD_ADDR_VAR 0 2
 122: PUSH
 123: LD_INT 5
 125: PPUSH
 126: LD_INT 21
 128: PUSH
 129: LD_INT 3
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: PUSH
 136: EMPTY
 137: LIST
 138: PPUSH
 139: CALL_OW 70
 143: PUSH
 144: FOR_IN
 145: IFFALSE 161
// ComLinkToBase ( NorthLenin , n ) ;
 147: LD_INT 253
 149: PPUSH
 150: LD_VAR 0 2
 154: PPUSH
 155: CALL_OW 169
 159: GO 144
 161: POP
 162: POP
// InitGlobalVariables ;
 163: CALL 8539 0 0
// InitMiotacz ;
 167: CALL 1863 0 0
// InitRussian ;
 171: CALL 480 0 0
// InitCommanders ;
 175: CALL 4393 0 0
// InitRussianAI ;
 179: CALL 4647 0 0
// Action ;
 183: CALL 1978 0 0
// DebugMode ;
 187: CALL 305 0 0
// game_speed = 6 ;
 191: LD_ADDR_OWVAR 65
 195: PUSH
 196: LD_INT 6
 198: ST_TO_ADDR
// end ;
 199: END
// export YakotichCrew , BierezovCrew , BukovCrew , GaydarCrew , NorthLeninCrew , SouthLeninCrew , CheckpointsCrew , SouthCheckpointCrew , SteyerCrew , OmarCrew ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav , Jegor , Grigori , Anton ; export Tank , Cargo1 , Cargo2 ; export Natasza , Belkov2 , Oblukov , Kovalyuk , Kozlov ; export Bierezov , Sharonov , Lesov , Aleinik , Korotajev , Bautin ; export Morozov , Platonov , Popov , Gaydar , Bukov , Yashin ; export PrepareTime ; export debug ; export mission_prefix ; export start_ended , control_taken_over , ivan_came , apeman_tamed , flame_researched , heavy_gun_researched , weaponry_researched , fall_back ; function Init ; begin
 200: LD_INT 0
 202: PPUSH
// mission_prefix := 04_ ;
 203: LD_ADDR_EXP 50
 207: PUSH
 208: LD_STRING 04_
 210: ST_TO_ADDR
// start_ended = false ;
 211: LD_ADDR_EXP 51
 215: PUSH
 216: LD_INT 0
 218: ST_TO_ADDR
// ivan_came = false ;
 219: LD_ADDR_EXP 53
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// control_taken_over = false ;
 227: LD_ADDR_EXP 52
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// apeman_tamed = false ;
 235: LD_ADDR_EXP 54
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// flame_researched = false ;
 243: LD_ADDR_EXP 55
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// heavy_gun_researched = false ;
 251: LD_ADDR_EXP 56
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// weaponry_researched = false ;
 259: LD_ADDR_EXP 57
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// fall_back = false ;
 267: LD_ADDR_EXP 58
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// PrepareTime := [ 45 45$0 , 40 40$0 , 35 35$0 ] [ Difficulty ] ;
 275: LD_ADDR_EXP 48
 279: PUSH
 280: LD_INT 94500
 282: PUSH
 283: LD_INT 84000
 285: PUSH
 286: LD_INT 73500
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: PUSH
 294: LD_OWVAR 67
 298: ARRAY
 299: ST_TO_ADDR
// end ;
 300: LD_VAR 0 1
 304: RET
// export function DebugMode ; begin
 305: LD_INT 0
 307: PPUSH
// if Debug = true then
 308: LD_EXP 49
 312: PUSH
 313: LD_INT 1
 315: EQUAL
 316: IFFALSE 337
// begin Difficulty := 3 ;
 318: LD_ADDR_OWVAR 67
 322: PUSH
 323: LD_INT 3
 325: ST_TO_ADDR
// TurnFogOff ( ) ;
 326: CALL_OW 537
// FogOff ( 3 ) ;
 330: LD_INT 3
 332: PPUSH
 333: CALL_OW 344
// end ; end ; end_of_file
 337: LD_VAR 0 1
 341: RET
// every 3 3$0 do
 342: GO 344
 344: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , YakotichCrates , true ) ;
 345: LD_INT 3
 347: PPUSH
 348: LD_INT 5
 350: PPUSH
 351: CALL_OW 12
 355: PPUSH
 356: LD_INT 11
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: CALL_OW 55
// enable ;
 366: ENABLE
// end ;
 367: END
// every 7 7$0 do var i ;
 368: GO 370
 370: DISABLE
 371: LD_INT 0
 373: PPUSH
// begin for i = 1 to 5 do
 374: LD_ADDR_VAR 0 1
 378: PUSH
 379: DOUBLE
 380: LD_INT 1
 382: DEC
 383: ST_TO_ADDR
 384: LD_INT 5
 386: PUSH
 387: FOR_TO
 388: IFFALSE 413
// begin CreateCratesArea ( rand ( 4 , 5 ) , CratesArea , true ) ;
 390: LD_INT 4
 392: PPUSH
 393: LD_INT 5
 395: PPUSH
 396: CALL_OW 12
 400: PPUSH
 401: LD_INT 12
 403: PPUSH
 404: LD_INT 1
 406: PPUSH
 407: CALL_OW 55
// end ;
 411: GO 387
 413: POP
 414: POP
// enable ;
 415: ENABLE
// end ;
 416: PPOPN 1
 418: END
// every 5 5$0 trigger ivan_came = true do var i ;
 419: LD_EXP 53
 423: PUSH
 424: LD_INT 1
 426: EQUAL
 427: IFFALSE 477
 429: GO 431
 431: DISABLE
 432: LD_INT 0
 434: PPUSH
// begin for i = 1 to 2 do
 435: LD_ADDR_VAR 0 1
 439: PUSH
 440: DOUBLE
 441: LD_INT 1
 443: DEC
 444: ST_TO_ADDR
 445: LD_INT 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 475
// begin CreateCratesArea ( rand ( 1 , 5 ) , BierezovCrates , true ) ;
 451: LD_INT 1
 453: PPUSH
 454: LD_INT 5
 456: PPUSH
 457: CALL_OW 12
 461: PPUSH
 462: LD_INT 13
 464: PPUSH
 465: LD_INT 1
 467: PPUSH
 468: CALL_OW 55
// enable ;
 472: ENABLE
// end ;
 473: GO 448
 475: POP
 476: POP
// end ; end_of_file
 477: PPOPN 1
 479: END
// export RuCargo1 , RuCargo2 ; export function InitRussian ; begin
 480: LD_INT 0
 482: PPUSH
// Uc_Nation := 3 ;
 483: LD_ADDR_OWVAR 21
 487: PUSH
 488: LD_INT 3
 490: ST_TO_ADDR
// Uc_Side := 3 ;
 491: LD_ADDR_OWVAR 20
 495: PUSH
 496: LD_INT 3
 498: ST_TO_ADDR
// Uc_Direction := 2 ;
 499: LD_ADDR_OWVAR 24
 503: PUSH
 504: LD_INT 2
 506: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 03_ ) ;
 507: LD_ADDR_EXP 11
 511: PUSH
 512: LD_STRING Yakotich
 514: PPUSH
 515: LD_INT 1
 517: PPUSH
 518: LD_STRING 03_
 520: PPUSH
 521: CALL 8715 0 3
 525: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 03_ ) ;
 526: LD_ADDR_EXP 12
 530: PUSH
 531: LD_STRING Mietek
 533: PPUSH
 534: LD_INT 1
 536: PPUSH
 537: LD_STRING 03_
 539: PPUSH
 540: CALL 8715 0 3
 544: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 03_ ) ;
 545: LD_ADDR_EXP 13
 549: PUSH
 550: LD_STRING Boris
 552: PPUSH
 553: LD_INT 1
 555: PPUSH
 556: LD_STRING 03_
 558: PPUSH
 559: CALL 8715 0 3
 563: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 03_ ) ;
 564: LD_ADDR_EXP 15
 568: PUSH
 569: LD_STRING Michail
 571: PPUSH
 572: LD_INT 1
 574: PPUSH
 575: LD_STRING 03_
 577: PPUSH
 578: CALL 8715 0 3
 582: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 03_ ) ;
 583: LD_ADDR_EXP 14
 587: PUSH
 588: LD_STRING Vasilij
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_STRING 03_
 596: PPUSH
 597: CALL 8715 0 3
 601: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 03_ ) ;
 602: LD_ADDR_EXP 16
 606: PUSH
 607: LD_STRING Constantin
 609: PPUSH
 610: LD_INT 1
 612: PPUSH
 613: LD_STRING 03_
 615: PPUSH
 616: CALL 8715 0 3
 620: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 03_ ) ;
 621: LD_ADDR_EXP 17
 625: PUSH
 626: LD_STRING Maksim
 628: PPUSH
 629: LD_INT 1
 631: PPUSH
 632: LD_STRING 03_
 634: PPUSH
 635: CALL 8715 0 3
 639: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 03_ ) ;
 640: LD_ADDR_EXP 18
 644: PUSH
 645: LD_STRING Fiodor
 647: PPUSH
 648: LD_INT 1
 650: PPUSH
 651: LD_STRING 03_
 653: PPUSH
 654: CALL 8715 0 3
 658: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 03_ ) ;
 659: LD_ADDR_EXP 21
 663: PUSH
 664: LD_STRING Aleksiej
 666: PPUSH
 667: LD_INT 1
 669: PPUSH
 670: LD_STRING 03_
 672: PPUSH
 673: CALL 8715 0 3
 677: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 03_ ) ;
 678: LD_ADDR_EXP 19
 682: PUSH
 683: LD_STRING Pavel
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_STRING 03_
 691: PPUSH
 692: CALL 8715 0 3
 696: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 03_ ) ;
 697: LD_ADDR_EXP 20
 701: PUSH
 702: LD_STRING Zakhar
 704: PPUSH
 705: LD_INT 1
 707: PPUSH
 708: LD_STRING 03_
 710: PPUSH
 711: CALL 8715 0 3
 715: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 03_ ) ;
 716: LD_ADDR_EXP 22
 720: PUSH
 721: LD_STRING Aleksandr
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_STRING 03_
 729: PPUSH
 730: CALL 8715 0 3
 734: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , true , 03_ ) ;
 735: LD_ADDR_EXP 24
 739: PUSH
 740: LD_STRING Stanislav
 742: PPUSH
 743: LD_INT 1
 745: PPUSH
 746: LD_STRING 03_
 748: PPUSH
 749: CALL 8715 0 3
 753: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , true , 03_ ) ;
 754: LD_ADDR_EXP 23
 758: PUSH
 759: LD_STRING Josif
 761: PPUSH
 762: LD_INT 1
 764: PPUSH
 765: LD_STRING 03_
 767: PPUSH
 768: CALL 8715 0 3
 772: ST_TO_ADDR
// Jegor := PrepareUnit ( Jegor , true , 03_ ) ;
 773: LD_ADDR_EXP 25
 777: PUSH
 778: LD_STRING Jegor
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: LD_STRING 03_
 786: PPUSH
 787: CALL 8715 0 3
 791: ST_TO_ADDR
// Grigori := PrepareUnit ( Grigori , true , 03_ ) ;
 792: LD_ADDR_EXP 26
 796: PUSH
 797: LD_STRING Grigori
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: LD_STRING 03_
 805: PPUSH
 806: CALL 8715 0 3
 810: ST_TO_ADDR
// Anton := PrepareUnit ( Anton , true , 03_ ) ;
 811: LD_ADDR_EXP 27
 815: PUSH
 816: LD_STRING Anton
 818: PPUSH
 819: LD_INT 1
 821: PPUSH
 822: LD_STRING 03_
 824: PPUSH
 825: CALL 8715 0 3
 829: ST_TO_ADDR
// YakotichCrew = YakotichCrew ^ Boris ^ Michail ^ Vasilij ^ Constantin ^ Maksim ^ Fiodor ^ Aleksiej ^ Pavel ^ Zakhar ^ Aleksandr ^ Stanislav ^ Josif ^ Jegor ^ Grigori ^ Anton ;
 830: LD_ADDR_EXP 1
 834: PUSH
 835: LD_EXP 1
 839: PUSH
 840: LD_EXP 13
 844: ADD
 845: PUSH
 846: LD_EXP 15
 850: ADD
 851: PUSH
 852: LD_EXP 14
 856: ADD
 857: PUSH
 858: LD_EXP 16
 862: ADD
 863: PUSH
 864: LD_EXP 17
 868: ADD
 869: PUSH
 870: LD_EXP 18
 874: ADD
 875: PUSH
 876: LD_EXP 21
 880: ADD
 881: PUSH
 882: LD_EXP 19
 886: ADD
 887: PUSH
 888: LD_EXP 20
 892: ADD
 893: PUSH
 894: LD_EXP 22
 898: ADD
 899: PUSH
 900: LD_EXP 24
 904: ADD
 905: PUSH
 906: LD_EXP 23
 910: ADD
 911: PUSH
 912: LD_EXP 25
 916: ADD
 917: PUSH
 918: LD_EXP 26
 922: ADD
 923: PUSH
 924: LD_EXP 27
 928: ADD
 929: ST_TO_ADDR
// SetClass ( [ Yakotich , Mietek , Constantin , Maksim , Fiodor , Aleksiej , Zakhar , Aleksandr , Josif ] , 1 ) ;
 930: LD_EXP 11
 934: PUSH
 935: LD_EXP 12
 939: PUSH
 940: LD_EXP 16
 944: PUSH
 945: LD_EXP 17
 949: PUSH
 950: LD_EXP 18
 954: PUSH
 955: LD_EXP 21
 959: PUSH
 960: LD_EXP 20
 964: PUSH
 965: LD_EXP 22
 969: PUSH
 970: LD_EXP 23
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: LIST
 979: LIST
 980: LIST
 981: LIST
 982: LIST
 983: LIST
 984: LIST
 985: PPUSH
 986: LD_INT 1
 988: PPUSH
 989: CALL_OW 336
// SetClass ( [ Boris , Anton ] , 2 ) ;
 993: LD_EXP 13
 997: PUSH
 998: LD_EXP 27
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PPUSH
1007: LD_INT 2
1009: PPUSH
1010: CALL_OW 336
// SetClass ( [ Michail , Pavel , Jegor ] , 3 ) ;
1014: LD_EXP 15
1018: PUSH
1019: LD_EXP 19
1023: PUSH
1024: LD_EXP 25
1028: PUSH
1029: EMPTY
1030: LIST
1031: LIST
1032: LIST
1033: PPUSH
1034: LD_INT 3
1036: PPUSH
1037: CALL_OW 336
// SetClass ( [ Stanislav , Vasilij , Grigori ] , 4 ) ;
1041: LD_EXP 24
1045: PUSH
1046: LD_EXP 14
1050: PUSH
1051: LD_EXP 26
1055: PUSH
1056: EMPTY
1057: LIST
1058: LIST
1059: LIST
1060: PPUSH
1061: LD_INT 4
1063: PPUSH
1064: CALL_OW 336
// vc_chassis = 24 ;
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_INT 24
1075: ST_TO_ADDR
// vc_control = 1 ;
1076: LD_ADDR_OWVAR 38
1080: PUSH
1081: LD_INT 1
1083: ST_TO_ADDR
// vc_engine = 1 ;
1084: LD_ADDR_OWVAR 39
1088: PUSH
1089: LD_INT 1
1091: ST_TO_ADDR
// vc_weapon = 89 ;
1092: LD_ADDR_OWVAR 40
1096: PUSH
1097: LD_INT 89
1099: ST_TO_ADDR
// RuCargo1 = CreateVehicle ;
1100: LD_ADDR_EXP 59
1104: PUSH
1105: CALL_OW 45
1109: ST_TO_ADDR
// PlaceUnitArea ( RuCargo1 , TanksEnterArea , false ) ;
1110: LD_EXP 59
1114: PPUSH
1115: LD_INT 25
1117: PPUSH
1118: LD_INT 0
1120: PPUSH
1121: CALL_OW 49
// SetCargo ( RuCargo1 , mat_siberit , 200 ) ;
1125: LD_EXP 59
1129: PPUSH
1130: LD_INT 3
1132: PPUSH
1133: LD_INT 200
1135: PPUSH
1136: CALL_OW 290
// PlaceHumanInUnit ( Jegor , RuCargo1 ) ;
1140: LD_EXP 25
1144: PPUSH
1145: LD_EXP 59
1149: PPUSH
1150: CALL_OW 52
// vc_chassis = 22 ;
1154: LD_ADDR_OWVAR 37
1158: PUSH
1159: LD_INT 22
1161: ST_TO_ADDR
// vc_weapon = 51 ;
1162: LD_ADDR_OWVAR 40
1166: PUSH
1167: LD_INT 51
1169: ST_TO_ADDR
// RuCargo2 = CreateVehicle ;
1170: LD_ADDR_EXP 60
1174: PUSH
1175: CALL_OW 45
1179: ST_TO_ADDR
// PlaceUnitArea ( RuCargo2 , TanksEnterArea , false ) ;
1180: LD_EXP 60
1184: PPUSH
1185: LD_INT 25
1187: PPUSH
1188: LD_INT 0
1190: PPUSH
1191: CALL_OW 49
// SetCargo ( RuCargo2 , mat_cans , 100 ) ;
1195: LD_EXP 60
1199: PPUSH
1200: LD_INT 1
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL_OW 290
// PlaceHumanInUnit ( Anton , RuCargo2 ) ;
1210: LD_EXP 27
1214: PPUSH
1215: LD_EXP 60
1219: PPUSH
1220: CALL_OW 52
// PlaceUnitArea ( Yakotich , EnterArea , false ) ;
1224: LD_EXP 11
1228: PPUSH
1229: LD_INT 3
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 49
// PlaceUnitArea ( Mietek , EnterArea , false ) ;
1239: LD_EXP 12
1243: PPUSH
1244: LD_INT 3
1246: PPUSH
1247: LD_INT 0
1249: PPUSH
1250: CALL_OW 49
// PlaceUnitArea ( Boris , EnterArea , false ) ;
1254: LD_EXP 13
1258: PPUSH
1259: LD_INT 3
1261: PPUSH
1262: LD_INT 0
1264: PPUSH
1265: CALL_OW 49
// PlaceUnitArea ( Vasilij , EnterArea , false ) ;
1269: LD_EXP 14
1273: PPUSH
1274: LD_INT 3
1276: PPUSH
1277: LD_INT 0
1279: PPUSH
1280: CALL_OW 49
// PlaceUnitArea ( Constantin , EnterArea , false ) ;
1284: LD_EXP 16
1288: PPUSH
1289: LD_INT 3
1291: PPUSH
1292: LD_INT 0
1294: PPUSH
1295: CALL_OW 49
// PlaceUnitArea ( Maksim , EnterArea , false ) ;
1299: LD_EXP 17
1303: PPUSH
1304: LD_INT 3
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL_OW 49
// PlaceUnitArea ( Fiodor , EnterArea , false ) ;
1314: LD_EXP 18
1318: PPUSH
1319: LD_INT 3
1321: PPUSH
1322: LD_INT 0
1324: PPUSH
1325: CALL_OW 49
// PlaceUnitArea ( Zakhar , EnterArea , false ) ;
1329: LD_EXP 20
1333: PPUSH
1334: LD_INT 3
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// PlaceUnitArea ( Aleksiej , EnterArea , false ) ;
1344: LD_EXP 21
1348: PPUSH
1349: LD_INT 3
1351: PPUSH
1352: LD_INT 0
1354: PPUSH
1355: CALL_OW 49
// PlaceUnitArea ( Aleksandr , EnterArea , false ) ;
1359: LD_EXP 22
1363: PPUSH
1364: LD_INT 3
1366: PPUSH
1367: LD_INT 0
1369: PPUSH
1370: CALL_OW 49
// PlaceUnitArea ( Stanislav , EnterArea , false ) ;
1374: LD_EXP 24
1378: PPUSH
1379: LD_INT 3
1381: PPUSH
1382: LD_INT 0
1384: PPUSH
1385: CALL_OW 49
// PlaceUnitArea ( Josif , EnterArea , false ) ;
1389: LD_EXP 23
1393: PPUSH
1394: LD_INT 3
1396: PPUSH
1397: LD_INT 0
1399: PPUSH
1400: CALL_OW 49
// PlaceUnitArea ( Grigori , EnterArea , false ) ;
1404: LD_EXP 26
1408: PPUSH
1409: LD_INT 3
1411: PPUSH
1412: LD_INT 0
1414: PPUSH
1415: CALL_OW 49
// PlaceUnitArea ( Pavel , EnterArea , false ) ;
1419: LD_EXP 19
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 49
// Natasza := PrepareUnit ( Natasza , false ,  ) ;
1434: LD_ADDR_EXP 31
1438: PUSH
1439: LD_STRING Natasza
1441: PPUSH
1442: LD_INT 0
1444: PPUSH
1445: LD_STRING 
1447: PPUSH
1448: CALL 8715 0 3
1452: ST_TO_ADDR
// Belkov2 := PrepareUnit ( Belkov2 , false ,  ) ;
1453: LD_ADDR_EXP 32
1457: PUSH
1458: LD_STRING Belkov2
1460: PPUSH
1461: LD_INT 0
1463: PPUSH
1464: LD_STRING 
1466: PPUSH
1467: CALL 8715 0 3
1471: ST_TO_ADDR
// Oblukov := PrepareUnit ( Oblukov , false ,  ) ;
1472: LD_ADDR_EXP 33
1476: PUSH
1477: LD_STRING Oblukov
1479: PPUSH
1480: LD_INT 0
1482: PPUSH
1483: LD_STRING 
1485: PPUSH
1486: CALL 8715 0 3
1490: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , false ,  ) ;
1491: LD_ADDR_EXP 34
1495: PUSH
1496: LD_STRING Kovalyuk
1498: PPUSH
1499: LD_INT 0
1501: PPUSH
1502: LD_STRING 
1504: PPUSH
1505: CALL 8715 0 3
1509: ST_TO_ADDR
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
1510: LD_ADDR_EXP 35
1514: PUSH
1515: LD_STRING Kozlov
1517: PPUSH
1518: LD_INT 0
1520: PPUSH
1521: LD_STRING 
1523: PPUSH
1524: CALL 8715 0 3
1528: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
1529: LD_EXP 31
1533: PPUSH
1534: LD_INT 18
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
// ComTurnUnit ( Natasza , Yakotich ) ;
1544: LD_EXP 31
1548: PPUSH
1549: LD_EXP 11
1553: PPUSH
1554: CALL_OW 119
// PlaceHumanInUnit ( Belkov2 , b1 ) ;
1558: LD_EXP 32
1562: PPUSH
1563: LD_INT 319
1565: PPUSH
1566: CALL_OW 52
// PlaceHumanInUnit ( Oblukov , b2 ) ;
1570: LD_EXP 33
1574: PPUSH
1575: LD_INT 318
1577: PPUSH
1578: CALL_OW 52
// PlaceHumanInUnit ( Kovalyuk , w1 ) ;
1582: LD_EXP 34
1586: PPUSH
1587: LD_INT 313
1589: PPUSH
1590: CALL_OW 52
// PlaceHumanInUnit ( Kozlov , l1 ) ;
1594: LD_EXP 35
1598: PPUSH
1599: LD_INT 317
1601: PPUSH
1602: CALL_OW 52
// end ;
1606: LD_VAR 0 1
1610: RET
// export function InitBierezov ; begin
1611: LD_INT 0
1613: PPUSH
// Bierezov := PrepareUnit ( Bierezov , false ,  ) ;
1614: LD_ADDR_EXP 36
1618: PUSH
1619: LD_STRING Bierezov
1621: PPUSH
1622: LD_INT 0
1624: PPUSH
1625: LD_STRING 
1627: PPUSH
1628: CALL 8715 0 3
1632: ST_TO_ADDR
// Sharonov := PrepareUnit ( Sharonov , false ,  ) ;
1633: LD_ADDR_EXP 37
1637: PUSH
1638: LD_STRING Sharonov
1640: PPUSH
1641: LD_INT 0
1643: PPUSH
1644: LD_STRING 
1646: PPUSH
1647: CALL 8715 0 3
1651: ST_TO_ADDR
// Lesov := PrepareUnit ( Lesov , false ,  ) ;
1652: LD_ADDR_EXP 38
1656: PUSH
1657: LD_STRING Lesov
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: LD_STRING 
1665: PPUSH
1666: CALL 8715 0 3
1670: ST_TO_ADDR
// Aleinik := PrepareUnit ( Aleinik , false ,  ) ;
1671: LD_ADDR_EXP 39
1675: PUSH
1676: LD_STRING Aleinik
1678: PPUSH
1679: LD_INT 0
1681: PPUSH
1682: LD_STRING 
1684: PPUSH
1685: CALL 8715 0 3
1689: ST_TO_ADDR
// Korotajev := PrepareUnit ( Korotajev , false ,  ) ;
1690: LD_ADDR_EXP 40
1694: PUSH
1695: LD_STRING Korotajev
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: LD_STRING 
1703: PPUSH
1704: CALL 8715 0 3
1708: ST_TO_ADDR
// Bautin := PrepareUnit ( Bautin , false ,  ) ;
1709: LD_ADDR_EXP 41
1713: PUSH
1714: LD_STRING Bautin
1716: PPUSH
1717: LD_INT 0
1719: PPUSH
1720: LD_STRING 
1722: PPUSH
1723: CALL 8715 0 3
1727: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , EnterArea , false ) ;
1728: LD_EXP 36
1732: PPUSH
1733: LD_INT 3
1735: PPUSH
1736: LD_INT 0
1738: PPUSH
1739: CALL_OW 49
// PlaceUnitArea ( Sharonov , EnterArea , false ) ;
1743: LD_EXP 37
1747: PPUSH
1748: LD_INT 3
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 49
// PlaceUnitArea ( Lesov , EnterArea , false ) ;
1758: LD_EXP 38
1762: PPUSH
1763: LD_INT 3
1765: PPUSH
1766: LD_INT 0
1768: PPUSH
1769: CALL_OW 49
// PlaceUnitArea ( Aleinik , EnterArea , false ) ;
1773: LD_EXP 39
1777: PPUSH
1778: LD_INT 3
1780: PPUSH
1781: LD_INT 0
1783: PPUSH
1784: CALL_OW 49
// PlaceUnitArea ( Korotajev , EnterArea , false ) ;
1788: LD_EXP 40
1792: PPUSH
1793: LD_INT 3
1795: PPUSH
1796: LD_INT 0
1798: PPUSH
1799: CALL_OW 49
// PlaceUnitArea ( Bautin , EnterArea , false ) ;
1803: LD_EXP 41
1807: PPUSH
1808: LD_INT 3
1810: PPUSH
1811: LD_INT 0
1813: PPUSH
1814: CALL_OW 49
// BierezovCrew := BierezovCrew ^ Sharonov ^ Lesov ^ Aleinik ^ Korotajev ^ Bautin ;
1818: LD_ADDR_EXP 2
1822: PUSH
1823: LD_EXP 2
1827: PUSH
1828: LD_EXP 37
1832: ADD
1833: PUSH
1834: LD_EXP 38
1838: ADD
1839: PUSH
1840: LD_EXP 39
1844: ADD
1845: PUSH
1846: LD_EXP 40
1850: ADD
1851: PUSH
1852: LD_EXP 41
1856: ADD
1857: ST_TO_ADDR
// end ;
1858: LD_VAR 0 1
1862: RET
// export function InitMiotacz ; begin
1863: LD_INT 0
1865: PPUSH
// if LoadVariable ( 03_FlameSaved , 1 ) then
1866: LD_STRING 03_FlameSaved
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: CALL_OW 30
1876: IFFALSE 1973
// begin Uc_Side = 3 ;
1878: LD_ADDR_OWVAR 20
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// Uc_Nation = 2 ;
1886: LD_ADDR_OWVAR 21
1890: PUSH
1891: LD_INT 2
1893: ST_TO_ADDR
// Uc_Direction = 2 ;
1894: LD_ADDR_OWVAR 24
1898: PUSH
1899: LD_INT 2
1901: ST_TO_ADDR
// Vc_Chassis = 14 ;
1902: LD_ADDR_OWVAR 37
1906: PUSH
1907: LD_INT 14
1909: ST_TO_ADDR
// Vc_Control = 1 ;
1910: LD_ADDR_OWVAR 38
1914: PUSH
1915: LD_INT 1
1917: ST_TO_ADDR
// Vc_Engine = 1 ;
1918: LD_ADDR_OWVAR 39
1922: PUSH
1923: LD_INT 1
1925: ST_TO_ADDR
// Vc_Weapon = 26 ;
1926: LD_ADDR_OWVAR 40
1930: PUSH
1931: LD_INT 26
1933: ST_TO_ADDR
// Tank := CreateVehicle ;
1934: LD_ADDR_EXP 28
1938: PUSH
1939: CALL_OW 45
1943: ST_TO_ADDR
// PlaceUnitArea ( Tank , TanksEnterArea , false ) ;
1944: LD_EXP 28
1948: PPUSH
1949: LD_INT 25
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 49
// PlaceHumanInUnit ( Michail , Tank ) ;
1959: LD_EXP 15
1963: PPUSH
1964: LD_EXP 28
1968: PPUSH
1969: CALL_OW 52
// end ; end ; end_of_file
1973: LD_VAR 0 1
1977: RET
// export function Action ; begin
1978: LD_INT 0
1980: PPUSH
// InGameOn ;
1981: CALL_OW 8
// ComTurnXY ( Janusz , 133 , 27 ) ;
1985: LD_INT 420
1987: PPUSH
1988: LD_INT 133
1990: PPUSH
1991: LD_INT 27
1993: PPUSH
1994: CALL_OW 118
// ComTurnXY ( Livid , 293 , 225 ) ;
1998: LD_INT 425
2000: PPUSH
2001: LD_INT 293
2003: PPUSH
2004: LD_INT 225
2006: PPUSH
2007: CALL_OW 118
// if LoadVariable ( 03_FlameSaved , 1 ) then
2011: LD_STRING 03_FlameSaved
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL_OW 30
2021: IFFALSE 2039
// PlaceHumanInUnit ( Michail , Tank ) else
2023: LD_EXP 15
2027: PPUSH
2028: LD_EXP 28
2032: PPUSH
2033: CALL_OW 52
2037: GO 2054
// PlaceUnitArea ( Michail , EnterArea , false ) ;
2039: LD_EXP 15
2043: PPUSH
2044: LD_INT 3
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: CALL_OW 49
// RevealFogArea ( 3 , RevealArea ) ;
2054: LD_INT 3
2056: PPUSH
2057: LD_INT 20
2059: PPUSH
2060: CALL_OW 332
// RevealFogArea ( 3 , ArRevealArea ) ;
2064: LD_INT 3
2066: PPUSH
2067: LD_INT 21
2069: PPUSH
2070: CALL_OW 332
// RevealFogArea ( 3 , BukovBaseArea ) ;
2074: LD_INT 3
2076: PPUSH
2077: LD_INT 7
2079: PPUSH
2080: CALL_OW 332
// Say ( Yakotich , 4Yak-01 ) ;
2084: LD_EXP 11
2088: PPUSH
2089: LD_STRING 4Yak-01
2091: PPUSH
2092: CALL_OW 88
// ComMoveXY ( YakotichCrew , 41 , 17 ) ;
2096: LD_EXP 1
2100: PPUSH
2101: LD_INT 41
2103: PPUSH
2104: LD_INT 17
2106: PPUSH
2107: CALL_OW 111
// ComMoveXY ( Yakotich , 41 , 17 ) ;
2111: LD_EXP 11
2115: PPUSH
2116: LD_INT 41
2118: PPUSH
2119: LD_INT 17
2121: PPUSH
2122: CALL_OW 111
// ComMoveXY ( Mietek , 41 , 17 ) ;
2126: LD_EXP 12
2130: PPUSH
2131: LD_INT 41
2133: PPUSH
2134: LD_INT 17
2136: PPUSH
2137: CALL_OW 111
// AddComMoveXY ( YakotichCrew , 130 , 105 ) ;
2141: LD_EXP 1
2145: PPUSH
2146: LD_INT 130
2148: PPUSH
2149: LD_INT 105
2151: PPUSH
2152: CALL_OW 171
// AddComMoveXY ( Yakotich , 130 , 105 ) ;
2156: LD_EXP 11
2160: PPUSH
2161: LD_INT 130
2163: PPUSH
2164: LD_INT 105
2166: PPUSH
2167: CALL_OW 171
// AddComMoveXY ( Mietek , 130 , 105 ) ;
2171: LD_EXP 12
2175: PPUSH
2176: LD_INT 130
2178: PPUSH
2179: LD_INT 105
2181: PPUSH
2182: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 77 , 93 ) ;
2186: LD_EXP 1
2190: PPUSH
2191: LD_INT 77
2193: PPUSH
2194: LD_INT 93
2196: PPUSH
2197: CALL_OW 171
// AddComMoveToArea ( [ Stanislav , Vasilij ] , HGCheckArea ) ;
2201: LD_EXP 24
2205: PUSH
2206: LD_EXP 14
2210: PUSH
2211: EMPTY
2212: LIST
2213: LIST
2214: PPUSH
2215: LD_INT 22
2217: PPUSH
2218: CALL_OW 173
// AddComTurnXY ( [ Vasilij , Stanislav ] , 75 , 86 ) ;
2222: LD_EXP 14
2226: PUSH
2227: LD_EXP 24
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PPUSH
2236: LD_INT 75
2238: PPUSH
2239: LD_INT 86
2241: PPUSH
2242: CALL_OW 178
// AddComMoveToArea ( Yakotich , YakTalk1 ) ;
2246: LD_EXP 11
2250: PPUSH
2251: LD_INT 23
2253: PPUSH
2254: CALL_OW 173
// AddComMoveXY ( Mietek , 73 , 98 ) ;
2258: LD_EXP 12
2262: PPUSH
2263: LD_INT 73
2265: PPUSH
2266: LD_INT 98
2268: PPUSH
2269: CALL_OW 171
// AddComTurnXY ( [ Yakotich , Mietek ] , 70 , 99 ) ;
2273: LD_EXP 11
2277: PUSH
2278: LD_EXP 12
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PPUSH
2287: LD_INT 70
2289: PPUSH
2290: LD_INT 99
2292: PPUSH
2293: CALL_OW 178
// end ;
2297: LD_VAR 0 1
2301: RET
// every 0 0$1 trigger IsInArea ( Yakotich , YakTalk1 ) do
2302: LD_EXP 11
2306: PPUSH
2307: LD_INT 23
2309: PPUSH
2310: CALL_OW 308
2314: IFFALSE 3141
2316: GO 2318
2318: DISABLE
// begin Say ( Yakotich , 4Yak-02 ) ;
2319: LD_EXP 11
2323: PPUSH
2324: LD_STRING 4Yak-02
2326: PPUSH
2327: CALL_OW 88
// Say ( Morozov , 4Moro-01 ) ;
2331: LD_EXP 42
2335: PPUSH
2336: LD_STRING 4Moro-01
2338: PPUSH
2339: CALL_OW 88
// Say ( Yakotich , 4Yak-03 ) ;
2343: LD_EXP 11
2347: PPUSH
2348: LD_STRING 4Yak-03
2350: PPUSH
2351: CALL_OW 88
// Say ( Morozov , 4Moro-02 ) ;
2355: LD_EXP 42
2359: PPUSH
2360: LD_STRING 4Moro-02
2362: PPUSH
2363: CALL_OW 88
// SetSide ( [ Vasilij , Stanislav ] , 6 ) ;
2367: LD_EXP 14
2371: PUSH
2372: LD_EXP 24
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PPUSH
2381: LD_INT 6
2383: PPUSH
2384: CALL_OW 235
// ComEnterUnit ( [ Vasilij , Stanislav ] , L1L1 ) ;
2388: LD_EXP 14
2392: PUSH
2393: LD_EXP 24
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PPUSH
2402: LD_INT 43
2404: PPUSH
2405: CALL_OW 120
// Say ( Morozov , 4Moro-03 ) ;
2409: LD_EXP 42
2413: PPUSH
2414: LD_STRING 4Moro-03
2416: PPUSH
2417: CALL_OW 88
// ComMoveXY ( Grigori , 74 , 102 ) ;
2421: LD_EXP 26
2425: PPUSH
2426: LD_INT 74
2428: PPUSH
2429: LD_INT 102
2431: PPUSH
2432: CALL_OW 111
// Say ( Grigori , 4Grig-01 ) ;
2436: LD_EXP 26
2440: PPUSH
2441: LD_STRING 4Grig-01
2443: PPUSH
2444: CALL_OW 88
// Say ( Morozov , 4Moro-04 ) ;
2448: LD_EXP 42
2452: PPUSH
2453: LD_STRING 4Moro-04
2455: PPUSH
2456: CALL_OW 88
// Say ( Grigori , 4Grig-02 ) ;
2460: LD_EXP 26
2464: PPUSH
2465: LD_STRING 4Grig-02
2467: PPUSH
2468: CALL_OW 88
// Say ( Popov , 4Popov-01 ) ;
2472: LD_EXP 44
2476: PPUSH
2477: LD_STRING 4Popov-01
2479: PPUSH
2480: CALL_OW 88
// SetSide ( Grigori , 6 ) ;
2484: LD_EXP 26
2488: PPUSH
2489: LD_INT 6
2491: PPUSH
2492: CALL_OW 235
// ComEnterUnit ( Grigori , L1L1 ) ;
2496: LD_EXP 26
2500: PPUSH
2501: LD_INT 43
2503: PPUSH
2504: CALL_OW 120
// Say ( Yakotich , 4Yak-04 ) ;
2508: LD_EXP 11
2512: PPUSH
2513: LD_STRING 4Yak-04
2515: PPUSH
2516: CALL_OW 88
// Say ( Popov , 4Popov-02 ) ;
2520: LD_EXP 44
2524: PPUSH
2525: LD_STRING 4Popov-02
2527: PPUSH
2528: CALL_OW 88
// Say ( Yakotich , 4Yak-05 ) ;
2532: LD_EXP 11
2536: PPUSH
2537: LD_STRING 4Yak-05
2539: PPUSH
2540: CALL_OW 88
// Say ( Morozov , 4Moro-05 ) ;
2544: LD_EXP 42
2548: PPUSH
2549: LD_STRING 4Moro-05
2551: PPUSH
2552: CALL_OW 88
// Say ( Morozov , 4Moro-06 ) ;
2556: LD_EXP 42
2560: PPUSH
2561: LD_STRING 4Moro-06
2563: PPUSH
2564: CALL_OW 88
// Say ( Popov , 4Popov-03 ) ;
2568: LD_EXP 44
2572: PPUSH
2573: LD_STRING 4Popov-03
2575: PPUSH
2576: CALL_OW 88
// Say ( Popov , 4Popov-04 ) ;
2580: LD_EXP 44
2584: PPUSH
2585: LD_STRING 4Popov-04
2587: PPUSH
2588: CALL_OW 88
// ComExitBuilding ( [ Vasilij , Stanislav ] ) ;
2592: LD_EXP 14
2596: PUSH
2597: LD_EXP 24
2601: PUSH
2602: EMPTY
2603: LIST
2604: LIST
2605: PPUSH
2606: CALL_OW 122
// SetSide ( [ Vasilij , Stanislav ] , 3 ) ;
2610: LD_EXP 14
2614: PUSH
2615: LD_EXP 24
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PPUSH
2624: LD_INT 3
2626: PPUSH
2627: CALL_OW 235
// ComMoveXY ( [ Vasilij , Stanislav ] , 73 , 89 ) ;
2631: LD_EXP 14
2635: PUSH
2636: LD_EXP 24
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: PPUSH
2645: LD_INT 73
2647: PPUSH
2648: LD_INT 89
2650: PPUSH
2651: CALL_OW 111
// Say ( Yakotich , 4Yak-06 ) ;
2655: LD_EXP 11
2659: PPUSH
2660: LD_STRING 4Yak-06
2662: PPUSH
2663: CALL_OW 88
// Say ( Platonov , 4Plat-01 ) ;
2667: LD_EXP 43
2671: PPUSH
2672: LD_STRING 4Plat-01
2674: PPUSH
2675: CALL_OW 88
// Say ( Platonov , 4Plat-02 ) ;
2679: LD_EXP 43
2683: PPUSH
2684: LD_STRING 4Plat-02
2686: PPUSH
2687: CALL_OW 88
// Say ( Platonov , 4Plat-03 ) ;
2691: LD_EXP 43
2695: PPUSH
2696: LD_STRING 4Plat-03
2698: PPUSH
2699: CALL_OW 88
// if Difficulty = 3 then
2703: LD_OWVAR 67
2707: PUSH
2708: LD_INT 3
2710: EQUAL
2711: IFFALSE 2725
// begin Say ( Morozov , 4Moro-Units ) ;
2713: LD_EXP 42
2717: PPUSH
2718: LD_STRING 4Moro-Units
2720: PPUSH
2721: CALL_OW 88
// end ; Say ( Platonov , 4Plat-04 ) ;
2725: LD_EXP 43
2729: PPUSH
2730: LD_STRING 4Plat-04
2732: PPUSH
2733: CALL_OW 88
// Say ( Yakotich , 4Yak-07 ) ;
2737: LD_EXP 11
2741: PPUSH
2742: LD_STRING 4Yak-07
2744: PPUSH
2745: CALL_OW 88
// ComExitBuilding ( Grigori ) ;
2749: LD_EXP 26
2753: PPUSH
2754: CALL_OW 122
// SetSide ( Grigori , 3 ) ;
2758: LD_EXP 26
2762: PPUSH
2763: LD_INT 3
2765: PPUSH
2766: CALL_OW 235
// ComTurnUnit ( Grigori , Yakotich ) ;
2770: LD_EXP 26
2774: PPUSH
2775: LD_EXP 11
2779: PPUSH
2780: CALL_OW 119
// Say ( Grigori , 4Grig-03 ) ;
2784: LD_EXP 26
2788: PPUSH
2789: LD_STRING 4Grig-03
2791: PPUSH
2792: CALL_OW 88
// AddComMoveXY ( YakotichCrew , 117 , 162 ) ;
2796: LD_EXP 1
2800: PPUSH
2801: LD_INT 117
2803: PPUSH
2804: LD_INT 162
2806: PPUSH
2807: CALL_OW 171
// ComMoveXY ( [ RuCargo1 , RuCargo2 ] , 157 , 232 ) ;
2811: LD_EXP 59
2815: PUSH
2816: LD_EXP 60
2820: PUSH
2821: EMPTY
2822: LIST
2823: LIST
2824: PPUSH
2825: LD_INT 157
2827: PPUSH
2828: LD_INT 232
2830: PPUSH
2831: CALL_OW 111
// AddComMoveXY ( Yakotich , 117 , 162 ) ;
2835: LD_EXP 11
2839: PPUSH
2840: LD_INT 117
2842: PPUSH
2843: LD_INT 162
2845: PPUSH
2846: CALL_OW 171
// AddComMoveXY ( Mietek , 117 , 162 ) ;
2850: LD_EXP 12
2854: PPUSH
2855: LD_INT 117
2857: PPUSH
2858: LD_INT 162
2860: PPUSH
2861: CALL_OW 171
// ComEnterUnit ( [ Morozov , Platonov , Popov ] , MorozovBase ) ;
2865: LD_EXP 42
2869: PUSH
2870: LD_EXP 43
2874: PUSH
2875: LD_EXP 44
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: PPUSH
2885: LD_INT 348
2887: PPUSH
2888: CALL_OW 120
// AddComMoveXY ( YakotichCrew , 138 , 168 ) ;
2892: LD_EXP 1
2896: PPUSH
2897: LD_INT 138
2899: PPUSH
2900: LD_INT 168
2902: PPUSH
2903: CALL_OW 171
// AddComMoveXY ( Yakotich , 138 , 168 ) ;
2907: LD_EXP 11
2911: PPUSH
2912: LD_INT 138
2914: PPUSH
2915: LD_INT 168
2917: PPUSH
2918: CALL_OW 171
// AddComMoveXY ( Mietek , 138 , 168 ) ;
2922: LD_EXP 12
2926: PPUSH
2927: LD_INT 138
2929: PPUSH
2930: LD_INT 168
2932: PPUSH
2933: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 142 , 199 ) ;
2937: LD_EXP 1
2941: PPUSH
2942: LD_INT 142
2944: PPUSH
2945: LD_INT 199
2947: PPUSH
2948: CALL_OW 171
// AddComMoveXY ( Yakotich , 142 , 199 ) ;
2952: LD_EXP 11
2956: PPUSH
2957: LD_INT 142
2959: PPUSH
2960: LD_INT 199
2962: PPUSH
2963: CALL_OW 171
// AddComMoveXY ( Mietek , 142 , 199 ) ;
2967: LD_EXP 12
2971: PPUSH
2972: LD_INT 142
2974: PPUSH
2975: LD_INT 199
2977: PPUSH
2978: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 157 , 232 ) ;
2982: LD_EXP 1
2986: PPUSH
2987: LD_INT 157
2989: PPUSH
2990: LD_INT 232
2992: PPUSH
2993: CALL_OW 171
// AddComMoveToArea ( Yakotich , YakTalk2 ) ;
2997: LD_EXP 11
3001: PPUSH
3002: LD_INT 24
3004: PPUSH
3005: CALL_OW 173
// AddComMoveXY ( Mietek , 167 , 240 ) ;
3009: LD_EXP 12
3013: PPUSH
3014: LD_INT 167
3016: PPUSH
3017: LD_INT 240
3019: PPUSH
3020: CALL_OW 171
// AddComTurnUnit ( [ Yakotich , Mietek ] , Natasza ) ;
3024: LD_EXP 11
3028: PUSH
3029: LD_EXP 12
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PPUSH
3038: LD_EXP 31
3042: PPUSH
3043: CALL_OW 179
// if Difficulty = 3 then
3047: LD_OWVAR 67
3051: PUSH
3052: LD_INT 3
3054: EQUAL
3055: IFFALSE 3141
// begin SetSide ( [ Constantin , Josif , Aleksiej , Pavel , Zakhar ] , 6 ) ;
3057: LD_EXP 16
3061: PUSH
3062: LD_EXP 23
3066: PUSH
3067: LD_EXP 21
3071: PUSH
3072: LD_EXP 19
3076: PUSH
3077: LD_EXP 20
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: LIST
3086: LIST
3087: LIST
3088: PPUSH
3089: LD_INT 6
3091: PPUSH
3092: CALL_OW 235
// ComEnterUnit ( [ Constantin , Josif , Aleksiej , Zakhar ] , SB1 ) ;
3096: LD_EXP 16
3100: PUSH
3101: LD_EXP 23
3105: PUSH
3106: LD_EXP 21
3110: PUSH
3111: LD_EXP 20
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: PPUSH
3122: LD_INT 430
3124: PPUSH
3125: CALL_OW 120
// ComEnterUnit ( Pavel , SW1 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_INT 435
3136: PPUSH
3137: CALL_OW 120
// end ; end ;
3141: END
// every 0 0$1 trigger IsInArea ( Yakotich , YakTalk2 ) do
3142: LD_EXP 11
3146: PPUSH
3147: LD_INT 24
3149: PPUSH
3150: CALL_OW 308
3154: IFFALSE 3450
3156: GO 3158
3158: DISABLE
// begin Say ( Natasza , 4Nati-01 ) ;
3159: LD_EXP 31
3163: PPUSH
3164: LD_STRING 4Nati-01
3166: PPUSH
3167: CALL_OW 88
// Say ( Yakotich , 4Yak-09 ) ;
3171: LD_EXP 11
3175: PPUSH
3176: LD_STRING 4Yak-09
3178: PPUSH
3179: CALL_OW 88
// Say ( Natasza , 4Nati-02 ) ;
3183: LD_EXP 31
3187: PPUSH
3188: LD_STRING 4Nati-02
3190: PPUSH
3191: CALL_OW 88
// Say ( Natasza , 4Nati-03 ) ;
3195: LD_EXP 31
3199: PPUSH
3200: LD_STRING 4Nati-03
3202: PPUSH
3203: CALL_OW 88
// Say ( Natasza , 4Nati-04 ) ;
3207: LD_EXP 31
3211: PPUSH
3212: LD_STRING 4Nati-04
3214: PPUSH
3215: CALL_OW 88
// Say ( Yakotich , 4Yak-10 ) ;
3219: LD_EXP 11
3223: PPUSH
3224: LD_STRING 4Yak-10
3226: PPUSH
3227: CALL_OW 88
// Say ( Natasza , 4Nati-05 ) ;
3231: LD_EXP 31
3235: PPUSH
3236: LD_STRING 4Nati-05
3238: PPUSH
3239: CALL_OW 88
// ComMoveXY ( Stanislav , 167 , 238 ) ;
3243: LD_EXP 24
3247: PPUSH
3248: LD_INT 167
3250: PPUSH
3251: LD_INT 238
3253: PPUSH
3254: CALL_OW 111
// AddComTurnUnit ( Stanislav , Natasza ) ;
3258: LD_EXP 24
3262: PPUSH
3263: LD_EXP 31
3267: PPUSH
3268: CALL_OW 179
// Say ( Stanislav , 4Stan-01 ) ;
3272: LD_EXP 24
3276: PPUSH
3277: LD_STRING 4Stan-01
3279: PPUSH
3280: CALL_OW 88
// Say ( Yakotich , 4Yak-11 ) ;
3284: LD_EXP 11
3288: PPUSH
3289: LD_STRING 4Yak-11
3291: PPUSH
3292: CALL_OW 88
// Say ( Natasza , 4Nati-06 ) ;
3296: LD_EXP 31
3300: PPUSH
3301: LD_STRING 4Nati-06
3303: PPUSH
3304: CALL_OW 88
// Say ( Mietek , 4Mietek-03 ) ;
3308: LD_EXP 12
3312: PPUSH
3313: LD_STRING 4Mietek-03
3315: PPUSH
3316: CALL_OW 88
// Say ( Yakotich , 4Yak-12 ) ;
3320: LD_EXP 11
3324: PPUSH
3325: LD_STRING 4Yak-12
3327: PPUSH
3328: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
3332: LD_STRING o1
3334: PPUSH
3335: CALL_OW 337
// start_ended = true ;
3339: LD_ADDR_EXP 51
3343: PUSH
3344: LD_INT 1
3346: ST_TO_ADDR
// SayRadio ( Yakotich , 4Yak-Sib-01 ) ;
3347: LD_EXP 11
3351: PPUSH
3352: LD_STRING 4Yak-Sib-01
3354: PPUSH
3355: CALL_OW 94
// SayRadio ( Morozov , 4Moro-Sib-01 ) ;
3359: LD_EXP 42
3363: PPUSH
3364: LD_STRING 4Moro-Sib-01
3366: PPUSH
3367: CALL_OW 94
// InGameOff ;
3371: CALL_OW 9
// if PrepareTime < 0 0$1 then
3375: LD_EXP 48
3379: PUSH
3380: LD_INT 35
3382: LESS
3383: IFFALSE 3392
// begin Wait ( 0 0$24 ) ;
3385: LD_INT 840
3387: PPUSH
3388: CALL_OW 67
// end ; if LoadVariable ( 03_FlameSaved , 1 ) then
3392: LD_STRING 03_FlameSaved
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: CALL_OW 30
3402: IFFALSE 3450
// begin Wait ( 0 0$15 ) ;
3404: LD_INT 525
3406: PPUSH
3407: CALL_OW 67
// DialogueOn ;
3411: CALL_OW 6
// Say ( Vasilij , 4Vas-Flame-01 ) ;
3415: LD_EXP 14
3419: PPUSH
3420: LD_STRING 4Vas-Flame-01
3422: PPUSH
3423: CALL_OW 88
// Say ( Vasilij , 4Vas-Flame-02 ) ;
3427: LD_EXP 14
3431: PPUSH
3432: LD_STRING 4Vas-Flame-02
3434: PPUSH
3435: CALL_OW 88
// ChangeMissionObjectives ( o2 ) ;
3439: LD_STRING o2
3441: PPUSH
3442: CALL_OW 337
// DialogueOff ;
3446: CALL_OW 7
// end ; end ; end_of_file
3450: END
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3451: LD_INT 0
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := GetSide ( b ) ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_VAR 0 2
3465: PPUSH
3466: CALL_OW 255
3470: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3471: LD_ADDR_OWVAR 21
3475: PUSH
3476: LD_VAR 0 2
3480: PPUSH
3481: CALL_OW 248
3485: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3486: LD_ADDR_VAR 0 5
3490: PUSH
3491: LD_VAR 0 2
3495: PPUSH
3496: CALL_OW 254
3500: PUSH
3501: LD_INT 3
3503: MINUS
3504: ST_TO_ADDR
// if dir < 0 then
3505: LD_VAR 0 5
3509: PUSH
3510: LD_INT 0
3512: LESS
3513: IFFALSE 3529
// dir := 6 + dir ;
3515: LD_ADDR_VAR 0 5
3519: PUSH
3520: LD_INT 6
3522: PUSH
3523: LD_VAR 0 5
3527: PLUS
3528: ST_TO_ADDR
// un := CreateHuman ;
3529: LD_ADDR_VAR 0 4
3533: PUSH
3534: CALL_OW 44
3538: ST_TO_ADDR
// SetDir ( un , dir ) ;
3539: LD_VAR 0 4
3543: PPUSH
3544: LD_VAR 0 5
3548: PPUSH
3549: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3553: LD_VAR 0 4
3557: PPUSH
3558: LD_VAR 0 2
3562: PPUSH
3563: CALL_OW 52
// end ;
3567: LD_VAR 0 3
3571: RET
// every 1 trigger IsSelected ( Janusz ) do
3572: LD_INT 420
3574: PPUSH
3575: CALL_OW 306
3579: IFFALSE 3676
3581: GO 3583
3583: DISABLE
// begin JanuszExp ( [ 1 , 2 , 3 , 4 ] ) ;
3584: LD_INT 1
3586: PUSH
3587: LD_INT 2
3589: PUSH
3590: LD_INT 3
3592: PUSH
3593: LD_INT 4
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: PPUSH
3602: CALL 3677 0 1
// Wait ( 0 0$03 ) ;
3606: LD_INT 105
3608: PPUSH
3609: CALL_OW 67
// Say ( Janusz , 4Janusz-Sikret ) ;
3613: LD_INT 420
3615: PPUSH
3616: LD_STRING 4Janusz-Sikret
3618: PPUSH
3619: CALL_OW 88
// TeleportUnit ( Janusz , 120 , 246 , 246 , true ) ;
3623: LD_INT 420
3625: PPUSH
3626: LD_INT 120
3628: PPUSH
3629: LD_INT 246
3631: PPUSH
3632: LD_INT 246
3634: PPUSH
3635: LD_INT 1
3637: PPUSH
3638: CALL_OW 483
// Wait ( 0 0$03 ) ;
3642: LD_INT 105
3644: PPUSH
3645: CALL_OW 67
// RemoveUnit ( Janusz ) ;
3649: LD_INT 420
3651: PPUSH
3652: CALL_OW 64
// SaveVariable ( 1 , JanuszSaved ) ;
3656: LD_INT 1
3658: PPUSH
3659: LD_STRING JanuszSaved
3661: PPUSH
3662: CALL_OW 39
// SaveCharacters ( Janusz , Janusz ) ;
3666: LD_INT 420
3668: PPUSH
3669: LD_STRING Janusz
3671: PPUSH
3672: CALL_OW 38
// end ;
3676: END
// export function JanuszExp ( q ) ; var dec , q1 ; begin
3677: LD_INT 0
3679: PPUSH
3680: PPUSH
3681: PPUSH
// dec = SelectiveQuery ( JanuszQuery , q ) ;
3682: LD_ADDR_VAR 0 3
3686: PUSH
3687: LD_STRING JanuszQuery
3689: PPUSH
3690: LD_VAR 0 1
3694: PPUSH
3695: CALL_OW 98
3699: ST_TO_ADDR
// case dec of 1 :
3700: LD_VAR 0 3
3704: PUSH
3705: LD_INT 1
3707: DOUBLE
3708: EQUAL
3709: IFTRUE 3713
3711: GO 3731
3713: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 2500 ) ;
3714: LD_EXP 11
3718: PPUSH
3719: LD_INT 1
3721: PPUSH
3722: LD_INT 2500
3724: PPUSH
3725: CALL_OW 591
// end ; 2 :
3729: GO 3810
3731: LD_INT 2
3733: DOUBLE
3734: EQUAL
3735: IFTRUE 3739
3737: GO 3757
3739: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 2500 ) ;
3740: LD_EXP 11
3744: PPUSH
3745: LD_INT 2
3747: PPUSH
3748: LD_INT 2500
3750: PPUSH
3751: CALL_OW 591
// end ; 3 :
3755: GO 3810
3757: LD_INT 3
3759: DOUBLE
3760: EQUAL
3761: IFTRUE 3765
3763: GO 3783
3765: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 2500 ) ;
3766: LD_EXP 11
3770: PPUSH
3771: LD_INT 3
3773: PPUSH
3774: LD_INT 2500
3776: PPUSH
3777: CALL_OW 591
// end ; 4 :
3781: GO 3810
3783: LD_INT 4
3785: DOUBLE
3786: EQUAL
3787: IFTRUE 3791
3789: GO 3809
3791: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 2500 ) ;
3792: LD_EXP 11
3796: PPUSH
3797: LD_INT 4
3799: PPUSH
3800: LD_INT 2500
3802: PPUSH
3803: CALL_OW 591
// end ; end ;
3807: GO 3810
3809: POP
// end ;
3810: LD_VAR 0 2
3814: RET
// export function TransportQuery ( q ) ; var dec , q1 ; begin
3815: LD_INT 0
3817: PPUSH
3818: PPUSH
3819: PPUSH
// dec = SelectiveQuery ( TransportQuery , q ) ;
3820: LD_ADDR_VAR 0 3
3824: PUSH
3825: LD_STRING TransportQuery
3827: PPUSH
3828: LD_VAR 0 1
3832: PPUSH
3833: CALL_OW 98
3837: ST_TO_ADDR
// case dec of 1 :
3838: LD_VAR 0 3
3842: PUSH
3843: LD_INT 1
3845: DOUBLE
3846: EQUAL
3847: IFTRUE 3851
3849: GO 3854
3851: POP
// begin end ; end ;
3852: GO 3855
3854: POP
// end ;
3855: LD_VAR 0 2
3859: RET
// every 1 trigger start_ended = false do
3860: LD_EXP 51
3864: PUSH
3865: LD_INT 0
3867: EQUAL
3868: IFFALSE 3883
3870: GO 3872
3872: DISABLE
// begin CenterOnUnits ( Yakotich ) ;
3873: LD_EXP 11
3877: PPUSH
3878: CALL_OW 85
// enable ;
3882: ENABLE
// end ;
3883: END
// every 1 trigger FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
3884: LD_INT 10
3886: PPUSH
3887: LD_INT 22
3889: PUSH
3890: LD_INT 3
3892: PUSH
3893: EMPTY
3894: LIST
3895: LIST
3896: PUSH
3897: LD_INT 2
3899: PUSH
3900: LD_INT 21
3902: PUSH
3903: LD_INT 1
3905: PUSH
3906: EMPTY
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 21
3912: PUSH
3913: LD_INT 2
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: PUSH
3920: EMPTY
3921: LIST
3922: LIST
3923: LIST
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PPUSH
3929: CALL_OW 70
3933: PUSH
3934: LD_INT 0
3936: GREATER
3937: IFFALSE 4023
3939: GO 3941
3941: DISABLE
3942: LD_INT 0
3944: PPUSH
// begin enable ;
3945: ENABLE
// for unit in FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
3946: LD_ADDR_VAR 0 1
3950: PUSH
3951: LD_INT 10
3953: PPUSH
3954: LD_INT 22
3956: PUSH
3957: LD_INT 3
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: PUSH
3964: LD_INT 2
3966: PUSH
3967: LD_INT 21
3969: PUSH
3970: LD_INT 1
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PUSH
3977: LD_INT 21
3979: PUSH
3980: LD_INT 2
3982: PUSH
3983: EMPTY
3984: LIST
3985: LIST
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: LIST
3991: PUSH
3992: EMPTY
3993: LIST
3994: LIST
3995: PPUSH
3996: CALL_OW 70
4000: PUSH
4001: FOR_IN
4002: IFFALSE 4021
// begin ComMoveXY ( unit , 163 , 235 ) ;
4004: LD_VAR 0 1
4008: PPUSH
4009: LD_INT 163
4011: PPUSH
4012: LD_INT 235
4014: PPUSH
4015: CALL_OW 111
// end ;
4019: GO 4001
4021: POP
4022: POP
// end ;
4023: PPOPN 1
4025: END
// every 0 0$1 trigger start_ended = true do
4026: LD_EXP 51
4030: PUSH
4031: LD_INT 1
4033: EQUAL
4034: IFFALSE 4088
4036: GO 4038
4038: DISABLE
// begin enable ;
4039: ENABLE
// if PrepareTime then
4040: LD_EXP 48
4044: IFFALSE 4079
// begin PrepareTime := PrepareTime - 0 0$1 ;
4046: LD_ADDR_EXP 48
4050: PUSH
4051: LD_EXP 48
4055: PUSH
4056: LD_INT 35
4058: MINUS
4059: ST_TO_ADDR
// display_strings := [ #PrepareTime , PrepareTime ] ;
4060: LD_ADDR_OWVAR 47
4064: PUSH
4065: LD_STRING #PrepareTime
4067: PUSH
4068: LD_EXP 48
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: ST_TO_ADDR
// end else
4077: GO 4088
// begin display_strings :=  ;
4079: LD_ADDR_OWVAR 47
4083: PUSH
4084: LD_STRING 
4086: ST_TO_ADDR
// disable ;
4087: DISABLE
// end ; end ; end_of_file
4088: END
// every 0 0$1 trigger start_ended = true do
4089: LD_EXP 51
4093: PUSH
4094: LD_INT 1
4096: EQUAL
4097: IFFALSE 4392
4099: GO 4101
4101: DISABLE
// begin ComResearch ( [ L1L1 , L1L2 ] , 48 ) ;
4102: LD_INT 43
4104: PUSH
4105: LD_INT 234
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PPUSH
4112: LD_INT 48
4114: PPUSH
4115: CALL_OW 124
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 49 ) ;
4119: LD_INT 43
4121: PUSH
4122: LD_INT 234
4124: PUSH
4125: LD_INT 129
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: PPUSH
4133: LD_INT 49
4135: PPUSH
4136: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 51 ) ;
4140: LD_INT 43
4142: PUSH
4143: LD_INT 234
4145: PUSH
4146: LD_INT 129
4148: PUSH
4149: EMPTY
4150: LIST
4151: LIST
4152: LIST
4153: PPUSH
4154: LD_INT 51
4156: PPUSH
4157: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 57 ) ;
4161: LD_INT 43
4163: PUSH
4164: LD_INT 234
4166: PUSH
4167: LD_INT 129
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: PPUSH
4175: LD_INT 57
4177: PPUSH
4178: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 82 ) ;
4182: LD_INT 43
4184: PUSH
4185: LD_INT 234
4187: PUSH
4188: LD_INT 129
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: LIST
4195: PPUSH
4196: LD_INT 82
4198: PPUSH
4199: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 83 ) ;
4203: LD_INT 43
4205: PUSH
4206: LD_INT 234
4208: PUSH
4209: LD_INT 129
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: LIST
4216: PPUSH
4217: LD_INT 83
4219: PPUSH
4220: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 84 ) ;
4224: LD_INT 43
4226: PUSH
4227: LD_INT 234
4229: PUSH
4230: LD_INT 129
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: LIST
4237: PPUSH
4238: LD_INT 84
4240: PPUSH
4241: CALL_OW 184
// ComExitBuilding ( [ SouthLeninEngineers , NorthLeninEngineers ] ) ;
4245: LD_EXP 61
4249: PUSH
4250: LD_EXP 62
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PPUSH
4259: CALL_OW 122
// AddComBuild ( NorthLeninEngineers , 32 , 82 , 93 , 4 ) ;
4263: LD_EXP 62
4267: PPUSH
4268: LD_INT 32
4270: PPUSH
4271: LD_INT 82
4273: PPUSH
4274: LD_INT 93
4276: PPUSH
4277: LD_INT 4
4279: PPUSH
4280: CALL_OW 205
// AddComBuild ( NorthLeninEngineers , 32 , 95 , 120 , 4 ) ;
4284: LD_EXP 62
4288: PPUSH
4289: LD_INT 32
4291: PPUSH
4292: LD_INT 95
4294: PPUSH
4295: LD_INT 120
4297: PPUSH
4298: LD_INT 4
4300: PPUSH
4301: CALL_OW 205
// AddComBuild ( NorthLeninEngineers , 32 , 69 , 81 , 3 ) ;
4305: LD_EXP 62
4309: PPUSH
4310: LD_INT 32
4312: PPUSH
4313: LD_INT 69
4315: PPUSH
4316: LD_INT 81
4318: PPUSH
4319: LD_INT 3
4321: PPUSH
4322: CALL_OW 205
// AddComEnterUnit ( NorthLeninEngineers , NorthLenin ) ;
4326: LD_EXP 62
4330: PPUSH
4331: LD_INT 253
4333: PPUSH
4334: CALL_OW 180
// AddComBuild ( SouthLeninEngineers , 32 , 123 , 174 , 4 ) ;
4338: LD_EXP 61
4342: PPUSH
4343: LD_INT 32
4345: PPUSH
4346: LD_INT 123
4348: PPUSH
4349: LD_INT 174
4351: PPUSH
4352: LD_INT 4
4354: PPUSH
4355: CALL_OW 205
// AddComBuild ( SouthLeninEngineers , 32 , 124 , 184 , 5 ) ;
4359: LD_EXP 61
4363: PPUSH
4364: LD_INT 32
4366: PPUSH
4367: LD_INT 124
4369: PPUSH
4370: LD_INT 184
4372: PPUSH
4373: LD_INT 5
4375: PPUSH
4376: CALL_OW 205
// AddComEnterUnit ( SouthLeninEngineers , SouthLenin ) ;
4380: LD_EXP 61
4384: PPUSH
4385: LD_INT 218
4387: PPUSH
4388: CALL_OW 180
// end ;
4392: END
// export function InitCommanders ; begin
4393: LD_INT 0
4395: PPUSH
// Uc_Side := 6 ;
4396: LD_ADDR_OWVAR 20
4400: PUSH
4401: LD_INT 6
4403: ST_TO_ADDR
// Uc_Nation := 3 ;
4404: LD_ADDR_OWVAR 21
4408: PUSH
4409: LD_INT 3
4411: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
4412: LD_ADDR_EXP 42
4416: PUSH
4417: LD_STRING Morozov
4419: PPUSH
4420: LD_INT 0
4422: PPUSH
4423: LD_STRING 
4425: PPUSH
4426: CALL 8715 0 3
4430: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
4431: LD_ADDR_EXP 43
4435: PUSH
4436: LD_STRING Platonov
4438: PPUSH
4439: LD_INT 0
4441: PPUSH
4442: LD_STRING 
4444: PPUSH
4445: CALL 8715 0 3
4449: ST_TO_ADDR
// Popov := PrepareUnit ( Popov , false ,  ) ;
4450: LD_ADDR_EXP 44
4454: PUSH
4455: LD_STRING Popov
4457: PPUSH
4458: LD_INT 0
4460: PPUSH
4461: LD_STRING 
4463: PPUSH
4464: CALL 8715 0 3
4468: ST_TO_ADDR
// Bukov := PrepareUnit ( Bukov , false ,  ) ;
4469: LD_ADDR_EXP 46
4473: PUSH
4474: LD_STRING Bukov
4476: PPUSH
4477: LD_INT 0
4479: PPUSH
4480: LD_STRING 
4482: PPUSH
4483: CALL 8715 0 3
4487: ST_TO_ADDR
// Gaydar := PrepareUnit ( Gaydar , false ,  ) ;
4488: LD_ADDR_EXP 45
4492: PUSH
4493: LD_STRING Gaydar
4495: PPUSH
4496: LD_INT 0
4498: PPUSH
4499: LD_STRING 
4501: PPUSH
4502: CALL 8715 0 3
4506: ST_TO_ADDR
// PlaceUnitArea ( Morozov , CommanderSpawn , false ) ;
4507: LD_EXP 42
4511: PPUSH
4512: LD_INT 19
4514: PPUSH
4515: LD_INT 0
4517: PPUSH
4518: CALL_OW 49
// PlaceUnitArea ( Platonov , CommanderSpawn , false ) ;
4522: LD_EXP 43
4526: PPUSH
4527: LD_INT 19
4529: PPUSH
4530: LD_INT 0
4532: PPUSH
4533: CALL_OW 49
// PlaceUnitArea ( Popov , CommanderSpawn , false ) ;
4537: LD_EXP 44
4541: PPUSH
4542: LD_INT 19
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL_OW 49
// ComTurnXY ( [ Morozov , Platonov , Popov ] , 73 , 100 ) ;
4552: LD_EXP 42
4556: PUSH
4557: LD_EXP 43
4561: PUSH
4562: LD_EXP 44
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: PPUSH
4572: LD_INT 73
4574: PPUSH
4575: LD_INT 100
4577: PPUSH
4578: CALL_OW 118
// PlaceUnitArea ( Gaydar , GaydarSpawn , false ) ;
4582: LD_EXP 45
4586: PPUSH
4587: LD_INT 15
4589: PPUSH
4590: LD_INT 0
4592: PPUSH
4593: CALL_OW 49
// ComTurnXY ( Gaydar , 214 , 160 ) ;
4597: LD_EXP 45
4601: PPUSH
4602: LD_INT 214
4604: PPUSH
4605: LD_INT 160
4607: PPUSH
4608: CALL_OW 118
// PlaceUnitArea ( Bukov , BukovSpawn , false ) ;
4612: LD_EXP 46
4616: PPUSH
4617: LD_INT 16
4619: PPUSH
4620: LD_INT 0
4622: PPUSH
4623: CALL_OW 49
// ComTurnXY ( Bukov , 312 , 218 ) ;
4627: LD_EXP 46
4631: PPUSH
4632: LD_INT 312
4634: PPUSH
4635: LD_INT 218
4637: PPUSH
4638: CALL_OW 118
// end ;
4642: LD_VAR 0 1
4646: RET
// export SouthLeninEngineers , NorthLeninEngineers ; export function InitRussianAI ; var i , z , y , turrety , fabryka , lab , zbrojka ; begin
4647: LD_INT 0
4649: PPUSH
4650: PPUSH
4651: PPUSH
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
4656: PPUSH
// Hc_Gallery :=  ;
4657: LD_ADDR_OWVAR 33
4661: PUSH
4662: LD_STRING 
4664: ST_TO_ADDR
// Hc_Name :=  ;
4665: LD_ADDR_OWVAR 26
4669: PUSH
4670: LD_STRING 
4672: ST_TO_ADDR
// NorthLeninCrew := [ ] ;
4673: LD_ADDR_EXP 5
4677: PUSH
4678: EMPTY
4679: ST_TO_ADDR
// uc_side := 6 ;
4680: LD_ADDR_OWVAR 20
4684: PUSH
4685: LD_INT 6
4687: ST_TO_ADDR
// uc_nation := 3 ;
4688: LD_ADDR_OWVAR 21
4692: PUSH
4693: LD_INT 3
4695: ST_TO_ADDR
// for i = 1 to 8 do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 8
4708: PUSH
4709: FOR_TO
4710: IFFALSE 4765
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
4712: LD_INT 0
4714: PPUSH
4715: LD_INT 1
4717: PPUSH
4718: CALL_OW 12
4722: PPUSH
4723: LD_INT 7
4725: PUSH
4726: LD_INT 5
4728: PUSH
4729: LD_INT 3
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: LD_OWVAR 67
4741: ARRAY
4742: PPUSH
4743: CALL_OW 381
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
4747: LD_ADDR_EXP 5
4751: PUSH
4752: LD_EXP 5
4756: PUSH
4757: CALL_OW 44
4761: ADD
4762: ST_TO_ADDR
// end ;
4763: GO 4709
4765: POP
4766: POP
// for i = 1 to 2 do
4767: LD_ADDR_VAR 0 2
4771: PUSH
4772: DOUBLE
4773: LD_INT 1
4775: DEC
4776: ST_TO_ADDR
4777: LD_INT 2
4779: PUSH
4780: FOR_TO
4781: IFFALSE 4836
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
4783: LD_INT 0
4785: PPUSH
4786: LD_INT 1
4788: PPUSH
4789: CALL_OW 12
4793: PPUSH
4794: LD_INT 7
4796: PUSH
4797: LD_INT 5
4799: PUSH
4800: LD_INT 3
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: LIST
4807: PUSH
4808: LD_OWVAR 67
4812: ARRAY
4813: PPUSH
4814: CALL_OW 382
// NorthLeninEngineers := NorthLeninEngineers ^ CreateHuman ;
4818: LD_ADDR_EXP 62
4822: PUSH
4823: LD_EXP 62
4827: PUSH
4828: CALL_OW 44
4832: ADD
4833: ST_TO_ADDR
// end ;
4834: GO 4780
4836: POP
4837: POP
// NorthLeninCrew := NorthLeninCrew ^ NorthLeninEngineers ;
4838: LD_ADDR_EXP 5
4842: PUSH
4843: LD_EXP 5
4847: PUSH
4848: LD_EXP 62
4852: ADD
4853: ST_TO_ADDR
// for i = 1 to 3 do
4854: LD_ADDR_VAR 0 2
4858: PUSH
4859: DOUBLE
4860: LD_INT 1
4862: DEC
4863: ST_TO_ADDR
4864: LD_INT 3
4866: PUSH
4867: FOR_TO
4868: IFFALSE 4923
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
4870: LD_INT 0
4872: PPUSH
4873: LD_INT 1
4875: PPUSH
4876: CALL_OW 12
4880: PPUSH
4881: LD_INT 7
4883: PUSH
4884: LD_INT 5
4886: PUSH
4887: LD_INT 3
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: LIST
4894: PUSH
4895: LD_OWVAR 67
4899: ARRAY
4900: PPUSH
4901: CALL_OW 383
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
4905: LD_ADDR_EXP 5
4909: PUSH
4910: LD_EXP 5
4914: PUSH
4915: CALL_OW 44
4919: ADD
4920: ST_TO_ADDR
// end ;
4921: GO 4867
4923: POP
4924: POP
// for i = 1 to 3 do
4925: LD_ADDR_VAR 0 2
4929: PUSH
4930: DOUBLE
4931: LD_INT 1
4933: DEC
4934: ST_TO_ADDR
4935: LD_INT 3
4937: PUSH
4938: FOR_TO
4939: IFFALSE 4994
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
4941: LD_INT 0
4943: PPUSH
4944: LD_INT 1
4946: PPUSH
4947: CALL_OW 12
4951: PPUSH
4952: LD_INT 7
4954: PUSH
4955: LD_INT 5
4957: PUSH
4958: LD_INT 3
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: PUSH
4966: LD_OWVAR 67
4970: ARRAY
4971: PPUSH
4972: CALL_OW 384
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
4976: LD_ADDR_EXP 5
4980: PUSH
4981: LD_EXP 5
4985: PUSH
4986: CALL_OW 44
4990: ADD
4991: ST_TO_ADDR
// end ;
4992: GO 4938
4994: POP
4995: POP
// turrety := FilterUnitsInArea ( NorthLeninArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
4996: LD_ADDR_VAR 0 5
5000: PUSH
5001: LD_INT 5
5003: PPUSH
5004: LD_INT 2
5006: PUSH
5007: LD_INT 30
5009: PUSH
5010: LD_INT 31
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 30
5019: PUSH
5020: LD_INT 32
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: PPUSH
5032: CALL_OW 70
5036: ST_TO_ADDR
// lab := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_lab_full ] ] ) ;
5037: LD_ADDR_VAR 0 7
5041: PUSH
5042: LD_INT 5
5044: PPUSH
5045: LD_INT 30
5047: PUSH
5048: LD_INT 8
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: PUSH
5055: EMPTY
5056: LIST
5057: PPUSH
5058: CALL_OW 70
5062: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_factory ] ] ) ;
5063: LD_ADDR_VAR 0 6
5067: PUSH
5068: LD_INT 5
5070: PPUSH
5071: LD_INT 30
5073: PUSH
5074: LD_INT 3
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: EMPTY
5082: LIST
5083: PPUSH
5084: CALL_OW 70
5088: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_barracks ] ] ) ;
5089: LD_ADDR_VAR 0 8
5093: PUSH
5094: LD_INT 5
5096: PPUSH
5097: LD_INT 30
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PUSH
5107: EMPTY
5108: LIST
5109: PPUSH
5110: CALL_OW 70
5114: ST_TO_ADDR
// y := 1 ;
5115: LD_ADDR_VAR 0 4
5119: PUSH
5120: LD_INT 1
5122: ST_TO_ADDR
// z := 1 ;
5123: LD_ADDR_VAR 0 3
5127: PUSH
5128: LD_INT 1
5130: ST_TO_ADDR
// for i in NorthLeninCrew do
5131: LD_ADDR_VAR 0 2
5135: PUSH
5136: LD_EXP 5
5140: PUSH
5141: FOR_IN
5142: IFFALSE 5313
// begin case GetClass ( i ) of 1 :
5144: LD_VAR 0 2
5148: PPUSH
5149: CALL_OW 257
5153: PUSH
5154: LD_INT 1
5156: DOUBLE
5157: EQUAL
5158: IFTRUE 5162
5160: GO 5229
5162: POP
// begin if y > 6 then
5163: LD_VAR 0 4
5167: PUSH
5168: LD_INT 6
5170: GREATER
5171: IFFALSE 5193
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
5173: LD_VAR 0 2
5177: PPUSH
5178: LD_VAR 0 8
5182: PUSH
5183: LD_INT 1
5185: ARRAY
5186: PPUSH
5187: CALL_OW 52
5191: GO 5213
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
5193: LD_VAR 0 2
5197: PPUSH
5198: LD_VAR 0 5
5202: PUSH
5203: LD_VAR 0 4
5207: ARRAY
5208: PPUSH
5209: CALL_OW 52
// y = y + 1 ;
5213: LD_ADDR_VAR 0 4
5217: PUSH
5218: LD_VAR 0 4
5222: PUSH
5223: LD_INT 1
5225: PLUS
5226: ST_TO_ADDR
// end ; 2 :
5227: GO 5311
5229: LD_INT 2
5231: DOUBLE
5232: EQUAL
5233: IFTRUE 5237
5235: GO 5252
5237: POP
// PlaceHumanInUnit ( i , NorthLenin ) ; 3 :
5238: LD_VAR 0 2
5242: PPUSH
5243: LD_INT 253
5245: PPUSH
5246: CALL_OW 52
5250: GO 5311
5252: LD_INT 3
5254: DOUBLE
5255: EQUAL
5256: IFTRUE 5260
5258: GO 5281
5260: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
5261: LD_VAR 0 2
5265: PPUSH
5266: LD_VAR 0 6
5270: PUSH
5271: LD_INT 1
5273: ARRAY
5274: PPUSH
5275: CALL_OW 52
5279: GO 5311
5281: LD_INT 4
5283: DOUBLE
5284: EQUAL
5285: IFTRUE 5289
5287: GO 5310
5289: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
5290: LD_VAR 0 2
5294: PPUSH
5295: LD_VAR 0 7
5299: PUSH
5300: LD_INT 1
5302: ARRAY
5303: PPUSH
5304: CALL_OW 52
5308: GO 5311
5310: POP
// end ;
5311: GO 5141
5313: POP
5314: POP
// SouthLeninCrew := [ ] ;
5315: LD_ADDR_EXP 6
5319: PUSH
5320: EMPTY
5321: ST_TO_ADDR
// for i = 1 to 6 do
5322: LD_ADDR_VAR 0 2
5326: PUSH
5327: DOUBLE
5328: LD_INT 1
5330: DEC
5331: ST_TO_ADDR
5332: LD_INT 6
5334: PUSH
5335: FOR_TO
5336: IFFALSE 5391
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
5338: LD_INT 0
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: CALL_OW 12
5348: PPUSH
5349: LD_INT 7
5351: PUSH
5352: LD_INT 5
5354: PUSH
5355: LD_INT 3
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: PUSH
5363: LD_OWVAR 67
5367: ARRAY
5368: PPUSH
5369: CALL_OW 381
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
5373: LD_ADDR_EXP 6
5377: PUSH
5378: LD_EXP 6
5382: PUSH
5383: CALL_OW 44
5387: ADD
5388: ST_TO_ADDR
// end ;
5389: GO 5335
5391: POP
5392: POP
// for i = 1 to 1 do
5393: LD_ADDR_VAR 0 2
5397: PUSH
5398: DOUBLE
5399: LD_INT 1
5401: DEC
5402: ST_TO_ADDR
5403: LD_INT 1
5405: PUSH
5406: FOR_TO
5407: IFFALSE 5462
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
5409: LD_INT 0
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: CALL_OW 12
5419: PPUSH
5420: LD_INT 7
5422: PUSH
5423: LD_INT 5
5425: PUSH
5426: LD_INT 3
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: PUSH
5434: LD_OWVAR 67
5438: ARRAY
5439: PPUSH
5440: CALL_OW 382
// SouthLeninEngineers := SouthLeninEngineers ^ CreateHuman ;
5444: LD_ADDR_EXP 61
5448: PUSH
5449: LD_EXP 61
5453: PUSH
5454: CALL_OW 44
5458: ADD
5459: ST_TO_ADDR
// end ;
5460: GO 5406
5462: POP
5463: POP
// SouthLeninCrew := SouthLeninCrew ^ SouthLeninEngineers ;
5464: LD_ADDR_EXP 6
5468: PUSH
5469: LD_EXP 6
5473: PUSH
5474: LD_EXP 61
5478: ADD
5479: ST_TO_ADDR
// for i = 1 to 1 do
5480: LD_ADDR_VAR 0 2
5484: PUSH
5485: DOUBLE
5486: LD_INT 1
5488: DEC
5489: ST_TO_ADDR
5490: LD_INT 1
5492: PUSH
5493: FOR_TO
5494: IFFALSE 5549
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
5496: LD_INT 0
5498: PPUSH
5499: LD_INT 1
5501: PPUSH
5502: CALL_OW 12
5506: PPUSH
5507: LD_INT 7
5509: PUSH
5510: LD_INT 5
5512: PUSH
5513: LD_INT 3
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: LIST
5520: PUSH
5521: LD_OWVAR 67
5525: ARRAY
5526: PPUSH
5527: CALL_OW 383
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
5531: LD_ADDR_EXP 6
5535: PUSH
5536: LD_EXP 6
5540: PUSH
5541: CALL_OW 44
5545: ADD
5546: ST_TO_ADDR
// end ;
5547: GO 5493
5549: POP
5550: POP
// for i = 1 to 1 do
5551: LD_ADDR_VAR 0 2
5555: PUSH
5556: DOUBLE
5557: LD_INT 1
5559: DEC
5560: ST_TO_ADDR
5561: LD_INT 1
5563: PUSH
5564: FOR_TO
5565: IFFALSE 5620
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
5567: LD_INT 0
5569: PPUSH
5570: LD_INT 1
5572: PPUSH
5573: CALL_OW 12
5577: PPUSH
5578: LD_INT 7
5580: PUSH
5581: LD_INT 5
5583: PUSH
5584: LD_INT 3
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: PUSH
5592: LD_OWVAR 67
5596: ARRAY
5597: PPUSH
5598: CALL_OW 384
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
5602: LD_ADDR_EXP 6
5606: PUSH
5607: LD_EXP 6
5611: PUSH
5612: CALL_OW 44
5616: ADD
5617: ST_TO_ADDR
// end ;
5618: GO 5564
5620: POP
5621: POP
// turrety := FilterUnitsInArea ( SouthLeninArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
5622: LD_ADDR_VAR 0 5
5626: PUSH
5627: LD_INT 4
5629: PPUSH
5630: LD_INT 2
5632: PUSH
5633: LD_INT 30
5635: PUSH
5636: LD_INT 31
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 30
5645: PUSH
5646: LD_INT 32
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: LIST
5657: PPUSH
5658: CALL_OW 70
5662: ST_TO_ADDR
// lab := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_lab_full ] ] ) ;
5663: LD_ADDR_VAR 0 7
5667: PUSH
5668: LD_INT 4
5670: PPUSH
5671: LD_INT 30
5673: PUSH
5674: LD_INT 8
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: PPUSH
5684: CALL_OW 70
5688: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_factory ] ] ) ;
5689: LD_ADDR_VAR 0 6
5693: PUSH
5694: LD_INT 4
5696: PPUSH
5697: LD_INT 30
5699: PUSH
5700: LD_INT 3
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: PPUSH
5710: CALL_OW 70
5714: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_barracks ] ] ) ;
5715: LD_ADDR_VAR 0 8
5719: PUSH
5720: LD_INT 4
5722: PPUSH
5723: LD_INT 30
5725: PUSH
5726: LD_INT 5
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: EMPTY
5734: LIST
5735: PPUSH
5736: CALL_OW 70
5740: ST_TO_ADDR
// y := 1 ;
5741: LD_ADDR_VAR 0 4
5745: PUSH
5746: LD_INT 1
5748: ST_TO_ADDR
// z := 1 ;
5749: LD_ADDR_VAR 0 3
5753: PUSH
5754: LD_INT 1
5756: ST_TO_ADDR
// for i in SouthLeninCrew do
5757: LD_ADDR_VAR 0 2
5761: PUSH
5762: LD_EXP 6
5766: PUSH
5767: FOR_IN
5768: IFFALSE 5939
// begin case GetClass ( i ) of 1 :
5770: LD_VAR 0 2
5774: PPUSH
5775: CALL_OW 257
5779: PUSH
5780: LD_INT 1
5782: DOUBLE
5783: EQUAL
5784: IFTRUE 5788
5786: GO 5855
5788: POP
// begin if y > 6 then
5789: LD_VAR 0 4
5793: PUSH
5794: LD_INT 6
5796: GREATER
5797: IFFALSE 5819
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
5799: LD_VAR 0 2
5803: PPUSH
5804: LD_VAR 0 8
5808: PUSH
5809: LD_INT 1
5811: ARRAY
5812: PPUSH
5813: CALL_OW 52
5817: GO 5839
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
5819: LD_VAR 0 2
5823: PPUSH
5824: LD_VAR 0 5
5828: PUSH
5829: LD_VAR 0 4
5833: ARRAY
5834: PPUSH
5835: CALL_OW 52
// y = y + 1 ;
5839: LD_ADDR_VAR 0 4
5843: PUSH
5844: LD_VAR 0 4
5848: PUSH
5849: LD_INT 1
5851: PLUS
5852: ST_TO_ADDR
// end ; 2 :
5853: GO 5937
5855: LD_INT 2
5857: DOUBLE
5858: EQUAL
5859: IFTRUE 5863
5861: GO 5878
5863: POP
// PlaceHumanInUnit ( i , SouthLenin ) ; 3 :
5864: LD_VAR 0 2
5868: PPUSH
5869: LD_INT 218
5871: PPUSH
5872: CALL_OW 52
5876: GO 5937
5878: LD_INT 3
5880: DOUBLE
5881: EQUAL
5882: IFTRUE 5886
5884: GO 5907
5886: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
5887: LD_VAR 0 2
5891: PPUSH
5892: LD_VAR 0 6
5896: PUSH
5897: LD_INT 1
5899: ARRAY
5900: PPUSH
5901: CALL_OW 52
5905: GO 5937
5907: LD_INT 4
5909: DOUBLE
5910: EQUAL
5911: IFTRUE 5915
5913: GO 5936
5915: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
5916: LD_VAR 0 2
5920: PPUSH
5921: LD_VAR 0 7
5925: PUSH
5926: LD_INT 1
5928: ARRAY
5929: PPUSH
5930: CALL_OW 52
5934: GO 5937
5936: POP
// end ;
5937: GO 5767
5939: POP
5940: POP
// BukovCrew := [ ] ;
5941: LD_ADDR_EXP 3
5945: PUSH
5946: EMPTY
5947: ST_TO_ADDR
// for i = 1 to 6 do
5948: LD_ADDR_VAR 0 2
5952: PUSH
5953: DOUBLE
5954: LD_INT 1
5956: DEC
5957: ST_TO_ADDR
5958: LD_INT 6
5960: PUSH
5961: FOR_TO
5962: IFFALSE 6017
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
5964: LD_INT 0
5966: PPUSH
5967: LD_INT 1
5969: PPUSH
5970: CALL_OW 12
5974: PPUSH
5975: LD_INT 7
5977: PUSH
5978: LD_INT 5
5980: PUSH
5981: LD_INT 3
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: LD_OWVAR 67
5993: ARRAY
5994: PPUSH
5995: CALL_OW 381
// BukovCrew := BukovCrew ^ CreateHuman ;
5999: LD_ADDR_EXP 3
6003: PUSH
6004: LD_EXP 3
6008: PUSH
6009: CALL_OW 44
6013: ADD
6014: ST_TO_ADDR
// end ;
6015: GO 5961
6017: POP
6018: POP
// for i = 1 to 2 do
6019: LD_ADDR_VAR 0 2
6023: PUSH
6024: DOUBLE
6025: LD_INT 1
6027: DEC
6028: ST_TO_ADDR
6029: LD_INT 2
6031: PUSH
6032: FOR_TO
6033: IFFALSE 6088
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6035: LD_INT 0
6037: PPUSH
6038: LD_INT 1
6040: PPUSH
6041: CALL_OW 12
6045: PPUSH
6046: LD_INT 7
6048: PUSH
6049: LD_INT 5
6051: PUSH
6052: LD_INT 3
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: LIST
6059: PUSH
6060: LD_OWVAR 67
6064: ARRAY
6065: PPUSH
6066: CALL_OW 383
// BukovCrew := BukovCrew ^ CreateHuman ;
6070: LD_ADDR_EXP 3
6074: PUSH
6075: LD_EXP 3
6079: PUSH
6080: CALL_OW 44
6084: ADD
6085: ST_TO_ADDR
// end ;
6086: GO 6032
6088: POP
6089: POP
// for i = 1 to 2 do
6090: LD_ADDR_VAR 0 2
6094: PUSH
6095: DOUBLE
6096: LD_INT 1
6098: DEC
6099: ST_TO_ADDR
6100: LD_INT 2
6102: PUSH
6103: FOR_TO
6104: IFFALSE 6159
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6106: LD_INT 0
6108: PPUSH
6109: LD_INT 1
6111: PPUSH
6112: CALL_OW 12
6116: PPUSH
6117: LD_INT 7
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: LD_INT 3
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_OWVAR 67
6135: ARRAY
6136: PPUSH
6137: CALL_OW 384
// BukovCrew := BukovCrew ^ CreateHuman ;
6141: LD_ADDR_EXP 3
6145: PUSH
6146: LD_EXP 3
6150: PUSH
6151: CALL_OW 44
6155: ADD
6156: ST_TO_ADDR
// end ;
6157: GO 6103
6159: POP
6160: POP
// turrety := FilterUnitsInArea ( BukovBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
6161: LD_ADDR_VAR 0 5
6165: PUSH
6166: LD_INT 7
6168: PPUSH
6169: LD_INT 2
6171: PUSH
6172: LD_INT 30
6174: PUSH
6175: LD_INT 31
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 30
6184: PUSH
6185: LD_INT 32
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PPUSH
6197: CALL_OW 70
6201: ST_TO_ADDR
// lab := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_lab_half ] ] ) ;
6202: LD_ADDR_VAR 0 7
6206: PUSH
6207: LD_INT 7
6209: PPUSH
6210: LD_INT 30
6212: PUSH
6213: LD_INT 7
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: EMPTY
6221: LIST
6222: PPUSH
6223: CALL_OW 70
6227: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_factory ] ] ) ;
6228: LD_ADDR_VAR 0 6
6232: PUSH
6233: LD_INT 7
6235: PPUSH
6236: LD_INT 30
6238: PUSH
6239: LD_INT 3
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: EMPTY
6247: LIST
6248: PPUSH
6249: CALL_OW 70
6253: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_armoury ] ] ) ;
6254: LD_ADDR_VAR 0 8
6258: PUSH
6259: LD_INT 7
6261: PPUSH
6262: LD_INT 30
6264: PUSH
6265: LD_INT 4
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: EMPTY
6273: LIST
6274: PPUSH
6275: CALL_OW 70
6279: ST_TO_ADDR
// y := 1 ;
6280: LD_ADDR_VAR 0 4
6284: PUSH
6285: LD_INT 1
6287: ST_TO_ADDR
// z := 1 ;
6288: LD_ADDR_VAR 0 3
6292: PUSH
6293: LD_INT 1
6295: ST_TO_ADDR
// for i in BukovCrew do
6296: LD_ADDR_VAR 0 2
6300: PUSH
6301: LD_EXP 3
6305: PUSH
6306: FOR_IN
6307: IFFALSE 6455
// begin case GetClass ( i ) of 1 :
6309: LD_VAR 0 2
6313: PPUSH
6314: CALL_OW 257
6318: PUSH
6319: LD_INT 1
6321: DOUBLE
6322: EQUAL
6323: IFTRUE 6327
6325: GO 6394
6327: POP
// begin if y > 4 then
6328: LD_VAR 0 4
6332: PUSH
6333: LD_INT 4
6335: GREATER
6336: IFFALSE 6358
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
6338: LD_VAR 0 2
6342: PPUSH
6343: LD_VAR 0 8
6347: PUSH
6348: LD_INT 1
6350: ARRAY
6351: PPUSH
6352: CALL_OW 52
6356: GO 6378
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
6358: LD_VAR 0 2
6362: PPUSH
6363: LD_VAR 0 5
6367: PUSH
6368: LD_VAR 0 4
6372: ARRAY
6373: PPUSH
6374: CALL_OW 52
// y = y + 1 ;
6378: LD_ADDR_VAR 0 4
6382: PUSH
6383: LD_VAR 0 4
6387: PUSH
6388: LD_INT 1
6390: PLUS
6391: ST_TO_ADDR
// end ; 3 :
6392: GO 6453
6394: LD_INT 3
6396: DOUBLE
6397: EQUAL
6398: IFTRUE 6402
6400: GO 6423
6402: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
6403: LD_VAR 0 2
6407: PPUSH
6408: LD_VAR 0 6
6412: PUSH
6413: LD_INT 1
6415: ARRAY
6416: PPUSH
6417: CALL_OW 52
6421: GO 6453
6423: LD_INT 4
6425: DOUBLE
6426: EQUAL
6427: IFTRUE 6431
6429: GO 6452
6431: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
6432: LD_VAR 0 2
6436: PPUSH
6437: LD_VAR 0 7
6441: PUSH
6442: LD_INT 1
6444: ARRAY
6445: PPUSH
6446: CALL_OW 52
6450: GO 6453
6452: POP
// end ;
6453: GO 6306
6455: POP
6456: POP
// CheckpointsCrew := [ ] ;
6457: LD_ADDR_EXP 7
6461: PUSH
6462: EMPTY
6463: ST_TO_ADDR
// for i = 1 to 6 do
6464: LD_ADDR_VAR 0 2
6468: PUSH
6469: DOUBLE
6470: LD_INT 1
6472: DEC
6473: ST_TO_ADDR
6474: LD_INT 6
6476: PUSH
6477: FOR_TO
6478: IFFALSE 6533
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6480: LD_INT 0
6482: PPUSH
6483: LD_INT 1
6485: PPUSH
6486: CALL_OW 12
6490: PPUSH
6491: LD_INT 7
6493: PUSH
6494: LD_INT 5
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: LIST
6504: PUSH
6505: LD_OWVAR 67
6509: ARRAY
6510: PPUSH
6511: CALL_OW 381
// CheckpointsCrew := CheckpointsCrew ^ CreateHuman ;
6515: LD_ADDR_EXP 7
6519: PUSH
6520: LD_EXP 7
6524: PUSH
6525: CALL_OW 44
6529: ADD
6530: ST_TO_ADDR
// end ;
6531: GO 6477
6533: POP
6534: POP
// turrety := FilterUnitsInArea ( Checkpoints , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
6535: LD_ADDR_VAR 0 5
6539: PUSH
6540: LD_INT 6
6542: PPUSH
6543: LD_INT 2
6545: PUSH
6546: LD_INT 30
6548: PUSH
6549: LD_INT 31
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: LD_INT 30
6558: PUSH
6559: LD_INT 32
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: LIST
6570: PPUSH
6571: CALL_OW 70
6575: ST_TO_ADDR
// y := 1 ;
6576: LD_ADDR_VAR 0 4
6580: PUSH
6581: LD_INT 1
6583: ST_TO_ADDR
// for i in CheckpointsCrew do
6584: LD_ADDR_VAR 0 2
6588: PUSH
6589: LD_EXP 7
6593: PUSH
6594: FOR_IN
6595: IFFALSE 6655
// begin case GetClass ( i ) of 1 :
6597: LD_VAR 0 2
6601: PPUSH
6602: CALL_OW 257
6606: PUSH
6607: LD_INT 1
6609: DOUBLE
6610: EQUAL
6611: IFTRUE 6615
6613: GO 6652
6615: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
6616: LD_VAR 0 2
6620: PPUSH
6621: LD_VAR 0 5
6625: PUSH
6626: LD_VAR 0 4
6630: ARRAY
6631: PPUSH
6632: CALL_OW 52
// y = y + 1 ;
6636: LD_ADDR_VAR 0 4
6640: PUSH
6641: LD_VAR 0 4
6645: PUSH
6646: LD_INT 1
6648: PLUS
6649: ST_TO_ADDR
// end ; end ;
6650: GO 6653
6652: POP
// end ;
6653: GO 6594
6655: POP
6656: POP
// GaydarCrew := [ ] ;
6657: LD_ADDR_EXP 4
6661: PUSH
6662: EMPTY
6663: ST_TO_ADDR
// for i = 1 to 6 do
6664: LD_ADDR_VAR 0 2
6668: PUSH
6669: DOUBLE
6670: LD_INT 1
6672: DEC
6673: ST_TO_ADDR
6674: LD_INT 6
6676: PUSH
6677: FOR_TO
6678: IFFALSE 6733
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6680: LD_INT 0
6682: PPUSH
6683: LD_INT 1
6685: PPUSH
6686: CALL_OW 12
6690: PPUSH
6691: LD_INT 7
6693: PUSH
6694: LD_INT 5
6696: PUSH
6697: LD_INT 3
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: PUSH
6705: LD_OWVAR 67
6709: ARRAY
6710: PPUSH
6711: CALL_OW 381
// GaydarCrew := GaydarCrew ^ CreateHuman ;
6715: LD_ADDR_EXP 4
6719: PUSH
6720: LD_EXP 4
6724: PUSH
6725: CALL_OW 44
6729: ADD
6730: ST_TO_ADDR
// end ;
6731: GO 6677
6733: POP
6734: POP
// for i = 1 to 2 do
6735: LD_ADDR_VAR 0 2
6739: PUSH
6740: DOUBLE
6741: LD_INT 1
6743: DEC
6744: ST_TO_ADDR
6745: LD_INT 2
6747: PUSH
6748: FOR_TO
6749: IFFALSE 6804
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6751: LD_INT 0
6753: PPUSH
6754: LD_INT 1
6756: PPUSH
6757: CALL_OW 12
6761: PPUSH
6762: LD_INT 7
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 3
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: LIST
6775: PUSH
6776: LD_OWVAR 67
6780: ARRAY
6781: PPUSH
6782: CALL_OW 382
// GaydarCrew := GaydarCrew ^ CreateHuman ;
6786: LD_ADDR_EXP 4
6790: PUSH
6791: LD_EXP 4
6795: PUSH
6796: CALL_OW 44
6800: ADD
6801: ST_TO_ADDR
// end ;
6802: GO 6748
6804: POP
6805: POP
// turrety := FilterUnitsInArea ( MiddleCheckPoint , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
6806: LD_ADDR_VAR 0 5
6810: PUSH
6811: LD_INT 1
6813: PPUSH
6814: LD_INT 2
6816: PUSH
6817: LD_INT 30
6819: PUSH
6820: LD_INT 31
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: LD_INT 30
6829: PUSH
6830: LD_INT 32
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: LIST
6841: PPUSH
6842: CALL_OW 70
6846: ST_TO_ADDR
// y := 1 ;
6847: LD_ADDR_VAR 0 4
6851: PUSH
6852: LD_INT 1
6854: ST_TO_ADDR
// for i in GaydarCrew do
6855: LD_ADDR_VAR 0 2
6859: PUSH
6860: LD_EXP 4
6864: PUSH
6865: FOR_IN
6866: IFFALSE 6949
// begin case GetClass ( i ) of 1 :
6868: LD_VAR 0 2
6872: PPUSH
6873: CALL_OW 257
6877: PUSH
6878: LD_INT 1
6880: DOUBLE
6881: EQUAL
6882: IFTRUE 6886
6884: GO 6923
6886: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
6887: LD_VAR 0 2
6891: PPUSH
6892: LD_VAR 0 5
6896: PUSH
6897: LD_VAR 0 4
6901: ARRAY
6902: PPUSH
6903: CALL_OW 52
// y = y + 1 ;
6907: LD_ADDR_VAR 0 4
6911: PUSH
6912: LD_VAR 0 4
6916: PUSH
6917: LD_INT 1
6919: PLUS
6920: ST_TO_ADDR
// end ; 2 :
6921: GO 6947
6923: LD_INT 2
6925: DOUBLE
6926: EQUAL
6927: IFTRUE 6931
6929: GO 6946
6931: POP
// PlaceHumanInUnit ( i , GaydarDepot ) ; end ;
6932: LD_VAR 0 2
6936: PPUSH
6937: LD_INT 144
6939: PPUSH
6940: CALL_OW 52
6944: GO 6947
6946: POP
// end ;
6947: GO 6865
6949: POP
6950: POP
// SouthCheckpointCrew := [ ] ;
6951: LD_ADDR_EXP 8
6955: PUSH
6956: EMPTY
6957: ST_TO_ADDR
// for i = 1 to 4 do
6958: LD_ADDR_VAR 0 2
6962: PUSH
6963: DOUBLE
6964: LD_INT 1
6966: DEC
6967: ST_TO_ADDR
6968: LD_INT 4
6970: PUSH
6971: FOR_TO
6972: IFFALSE 7027
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6974: LD_INT 0
6976: PPUSH
6977: LD_INT 1
6979: PPUSH
6980: CALL_OW 12
6984: PPUSH
6985: LD_INT 7
6987: PUSH
6988: LD_INT 5
6990: PUSH
6991: LD_INT 3
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: LIST
6998: PUSH
6999: LD_OWVAR 67
7003: ARRAY
7004: PPUSH
7005: CALL_OW 381
// SouthCheckpointCrew := SouthCheckpointCrew ^ CreateHuman ;
7009: LD_ADDR_EXP 8
7013: PUSH
7014: LD_EXP 8
7018: PUSH
7019: CALL_OW 44
7023: ADD
7024: ST_TO_ADDR
// end ;
7025: GO 6971
7027: POP
7028: POP
// for i = 1 to 2 do
7029: LD_ADDR_VAR 0 2
7033: PUSH
7034: DOUBLE
7035: LD_INT 1
7037: DEC
7038: ST_TO_ADDR
7039: LD_INT 2
7041: PUSH
7042: FOR_TO
7043: IFFALSE 7098
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7045: LD_INT 0
7047: PPUSH
7048: LD_INT 1
7050: PPUSH
7051: CALL_OW 12
7055: PPUSH
7056: LD_INT 7
7058: PUSH
7059: LD_INT 5
7061: PUSH
7062: LD_INT 3
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: LIST
7069: PUSH
7070: LD_OWVAR 67
7074: ARRAY
7075: PPUSH
7076: CALL_OW 382
// SouthCheckpointCrew := SouthCheckpointCrew ^ CreateHuman ;
7080: LD_ADDR_EXP 8
7084: PUSH
7085: LD_EXP 8
7089: PUSH
7090: CALL_OW 44
7094: ADD
7095: ST_TO_ADDR
// end ;
7096: GO 7042
7098: POP
7099: POP
// turrety := FilterUnitsInArea ( SouthCheckpoint , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
7100: LD_ADDR_VAR 0 5
7104: PUSH
7105: LD_INT 2
7107: PPUSH
7108: LD_INT 2
7110: PUSH
7111: LD_INT 30
7113: PUSH
7114: LD_INT 31
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 30
7123: PUSH
7124: LD_INT 32
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: PPUSH
7136: CALL_OW 70
7140: ST_TO_ADDR
// y := 1 ;
7141: LD_ADDR_VAR 0 4
7145: PUSH
7146: LD_INT 1
7148: ST_TO_ADDR
// for i in SouthCheckpointCrew do
7149: LD_ADDR_VAR 0 2
7153: PUSH
7154: LD_EXP 8
7158: PUSH
7159: FOR_IN
7160: IFFALSE 7243
// begin case GetClass ( i ) of 1 :
7162: LD_VAR 0 2
7166: PPUSH
7167: CALL_OW 257
7171: PUSH
7172: LD_INT 1
7174: DOUBLE
7175: EQUAL
7176: IFTRUE 7180
7178: GO 7217
7180: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
7181: LD_VAR 0 2
7185: PPUSH
7186: LD_VAR 0 5
7190: PUSH
7191: LD_VAR 0 4
7195: ARRAY
7196: PPUSH
7197: CALL_OW 52
// y = y + 1 ;
7201: LD_ADDR_VAR 0 4
7205: PUSH
7206: LD_VAR 0 4
7210: PUSH
7211: LD_INT 1
7213: PLUS
7214: ST_TO_ADDR
// end ; 2 :
7215: GO 7241
7217: LD_INT 2
7219: DOUBLE
7220: EQUAL
7221: IFTRUE 7225
7223: GO 7240
7225: POP
// PlaceHumanInUnit ( i , SouthDepot ) ; end ;
7226: LD_VAR 0 2
7230: PPUSH
7231: LD_INT 193
7233: PPUSH
7234: CALL_OW 52
7238: GO 7241
7240: POP
// end ;
7241: GO 7159
7243: POP
7244: POP
// end ; end_of_file
7245: LD_VAR 0 1
7249: RET
// every 0 0$1 trigger IsDead ( YakotichBase ) or IsDead ( NorthLenin ) or IsDead ( SouthLenin ) do
7250: LD_INT 312
7252: PPUSH
7253: CALL_OW 301
7257: PUSH
7258: LD_INT 253
7260: PPUSH
7261: CALL_OW 301
7265: OR
7266: PUSH
7267: LD_INT 218
7269: PPUSH
7270: CALL_OW 301
7274: OR
7275: IFFALSE 7287
7277: GO 7279
7279: DISABLE
// begin YouLost ( DepotDead ) ;
7280: LD_STRING DepotDead
7282: PPUSH
7283: CALL_OW 104
// end ;
7287: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 3 and s2 = 6 ) or ( s2 = 6 and s1 = 3 ) then
7288: LD_VAR 0 1
7292: PUSH
7293: LD_INT 3
7295: EQUAL
7296: PUSH
7297: LD_VAR 0 2
7301: PUSH
7302: LD_INT 6
7304: EQUAL
7305: AND
7306: PUSH
7307: LD_VAR 0 2
7311: PUSH
7312: LD_INT 6
7314: EQUAL
7315: PUSH
7316: LD_VAR 0 1
7320: PUSH
7321: LD_INT 3
7323: EQUAL
7324: AND
7325: OR
7326: IFFALSE 7335
// begin YouLost ( AllyAttacked ) ;
7328: LD_STRING AllyAttacked
7330: PPUSH
7331: CALL_OW 104
// end ; end ;
7335: PPOPN 2
7337: END
// on BuildingCaptured ( cb , bfs , cu ) do begin if GetSide ( cb ) = 6 and GetSide ( cu ) = 3 then
7338: LD_VAR 0 1
7342: PPUSH
7343: CALL_OW 255
7347: PUSH
7348: LD_INT 6
7350: EQUAL
7351: PUSH
7352: LD_VAR 0 3
7356: PPUSH
7357: CALL_OW 255
7361: PUSH
7362: LD_INT 3
7364: EQUAL
7365: AND
7366: IFFALSE 7375
// begin YouLost ( AllyAttacked ) ;
7368: LD_STRING AllyAttacked
7370: PPUSH
7371: CALL_OW 104
// end ; end ;
7375: PPOPN 3
7377: END
// export ru_bul , ru2_bul ; on UnitDestroyed ( un ) do begin if un = Yakotich then
7378: LD_VAR 0 1
7382: PUSH
7383: LD_EXP 11
7387: EQUAL
7388: IFFALSE 7397
// YouLost ( YakotichDead ) ;
7390: LD_STRING YakotichDead
7392: PPUSH
7393: CALL_OW 104
// if un = Mietek then
7397: LD_VAR 0 1
7401: PUSH
7402: LD_EXP 12
7406: EQUAL
7407: IFFALSE 7416
// YouLost ( MietekDead ) ;
7409: LD_STRING MietekDead
7411: PPUSH
7412: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
7416: LD_VAR 0 1
7420: PUSH
7421: LD_INT 22
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 3
7433: PUSH
7434: LD_INT 23
7436: PUSH
7437: LD_INT 0
7439: PUSH
7440: EMPTY
7441: LIST
7442: LIST
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 21
7450: PUSH
7451: LD_INT 1
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: PPUSH
7463: CALL_OW 69
7467: IN
7468: IFFALSE 7477
// YouLost ( PeopleDead ) ;
7470: LD_STRING PeopleDead
7472: PPUSH
7473: CALL_OW 104
// if GetSide ( un ) = 6 and un in FilterAllUnits ( [ f_type , unit_building ] ) and IsInArea ( un , NorthLeninArea ) then
7477: LD_VAR 0 1
7481: PPUSH
7482: CALL_OW 255
7486: PUSH
7487: LD_INT 6
7489: EQUAL
7490: PUSH
7491: LD_VAR 0 1
7495: PUSH
7496: LD_INT 21
7498: PUSH
7499: LD_INT 3
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PPUSH
7506: CALL_OW 69
7510: IN
7511: AND
7512: PUSH
7513: LD_VAR 0 1
7517: PPUSH
7518: LD_INT 5
7520: PPUSH
7521: CALL_OW 308
7525: AND
7526: IFFALSE 7745
// begin if GetBType ( un ) = b_factory then
7528: LD_VAR 0 1
7532: PPUSH
7533: CALL_OW 266
7537: PUSH
7538: LD_INT 3
7540: EQUAL
7541: IFFALSE 7557
// ru_bul := ru_bul ^ b_workshop ;
7543: LD_ADDR_EXP 63
7547: PUSH
7548: LD_EXP 63
7552: PUSH
7553: LD_INT 2
7555: ADD
7556: ST_TO_ADDR
// if GetBType ( un ) = b_lab_full or GetBType ( un ) = b_lab_half then
7557: LD_VAR 0 1
7561: PPUSH
7562: CALL_OW 266
7566: PUSH
7567: LD_INT 8
7569: EQUAL
7570: PUSH
7571: LD_VAR 0 1
7575: PPUSH
7576: CALL_OW 266
7580: PUSH
7581: LD_INT 7
7583: EQUAL
7584: OR
7585: IFFALSE 7601
// ru_bul := ru_bul ^ b_lab ;
7587: LD_ADDR_EXP 63
7591: PUSH
7592: LD_EXP 63
7596: PUSH
7597: LD_INT 6
7599: ADD
7600: ST_TO_ADDR
// if GetBType ( un ) = b_barracks then
7601: LD_VAR 0 1
7605: PPUSH
7606: CALL_OW 266
7610: PUSH
7611: LD_INT 5
7613: EQUAL
7614: IFFALSE 7630
// ru_bul := ru_bul ^ b_armoury ;
7616: LD_ADDR_EXP 63
7620: PUSH
7621: LD_EXP 63
7625: PUSH
7626: LD_INT 4
7628: ADD
7629: ST_TO_ADDR
// if not GetBType ( un ) in [ b_factory , b_lab_full , b_lab_half , b_barracks ] then
7630: LD_VAR 0 1
7634: PPUSH
7635: CALL_OW 266
7639: PUSH
7640: LD_INT 3
7642: PUSH
7643: LD_INT 8
7645: PUSH
7646: LD_INT 7
7648: PUSH
7649: LD_INT 5
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: IN
7658: NOT
7659: IFFALSE 7682
// ru_bul := ru_bul ^ GetBType ( un ) ;
7661: LD_ADDR_EXP 63
7665: PUSH
7666: LD_EXP 63
7670: PUSH
7671: LD_VAR 0 1
7675: PPUSH
7676: CALL_OW 266
7680: ADD
7681: ST_TO_ADDR
// ru_bul := ru_bul ^ GetX ( un ) ;
7682: LD_ADDR_EXP 63
7686: PUSH
7687: LD_EXP 63
7691: PUSH
7692: LD_VAR 0 1
7696: PPUSH
7697: CALL_OW 250
7701: ADD
7702: ST_TO_ADDR
// ru_bul := ru_bul ^ GetY ( un ) ;
7703: LD_ADDR_EXP 63
7707: PUSH
7708: LD_EXP 63
7712: PUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 251
7722: ADD
7723: ST_TO_ADDR
// ru_bul := ru_bul ^ GetDir ( un ) ;
7724: LD_ADDR_EXP 63
7728: PUSH
7729: LD_EXP 63
7733: PUSH
7734: LD_VAR 0 1
7738: PPUSH
7739: CALL_OW 254
7743: ADD
7744: ST_TO_ADDR
// end ; end ;
7745: PPOPN 1
7747: END
// export RuDep ; on BuildingStarted ( building , builder ) do begin end ;
7748: PPOPN 2
7750: END
// on BuildingComplete ( b ) do var i ;
7751: LD_INT 0
7753: PPUSH
// begin if GetBType ( b ) = b_bunker and GetSide ( b ) = 6 and IsInArea ( b , NorthLeninArea ) then
7754: LD_VAR 0 1
7758: PPUSH
7759: CALL_OW 266
7763: PUSH
7764: LD_INT 32
7766: EQUAL
7767: PUSH
7768: LD_VAR 0 1
7772: PPUSH
7773: CALL_OW 255
7777: PUSH
7778: LD_INT 6
7780: EQUAL
7781: AND
7782: PUSH
7783: LD_VAR 0 1
7787: PPUSH
7788: LD_INT 5
7790: PPUSH
7791: CALL_OW 308
7795: AND
7796: IFFALSE 7818
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
7798: LD_VAR 0 1
7802: PPUSH
7803: LD_INT 43
7805: PPUSH
7806: LD_INT 46
7808: PPUSH
7809: CALL_OW 12
7813: PPUSH
7814: CALL_OW 208
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 6 and IsInArea ( b , SouthLeninArea ) and control_taken_over = false then
7818: LD_VAR 0 1
7822: PPUSH
7823: CALL_OW 266
7827: PUSH
7828: LD_INT 32
7830: EQUAL
7831: PUSH
7832: LD_VAR 0 1
7836: PPUSH
7837: CALL_OW 255
7841: PUSH
7842: LD_INT 6
7844: EQUAL
7845: AND
7846: PUSH
7847: LD_VAR 0 1
7851: PPUSH
7852: LD_INT 4
7854: PPUSH
7855: CALL_OW 308
7859: AND
7860: PUSH
7861: LD_EXP 52
7865: PUSH
7866: LD_INT 0
7868: EQUAL
7869: AND
7870: IFFALSE 7892
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
7872: LD_VAR 0 1
7876: PPUSH
7877: LD_INT 43
7879: PPUSH
7880: LD_INT 46
7882: PPUSH
7883: CALL_OW 12
7887: PPUSH
7888: CALL_OW 208
// end ; if b in FilterAllUnits ( [ f_side , 6 ] ) then
7892: LD_VAR 0 1
7896: PUSH
7897: LD_INT 22
7899: PUSH
7900: LD_INT 6
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PPUSH
7907: CALL_OW 69
7911: IN
7912: IFFALSE 7952
// for i = 1 to 4 do
7914: LD_ADDR_VAR 0 2
7918: PUSH
7919: DOUBLE
7920: LD_INT 1
7922: DEC
7923: ST_TO_ADDR
7924: LD_INT 4
7926: PUSH
7927: FOR_TO
7928: IFFALSE 7950
// ru_bul := Delete ( ru_bul , 1 ) ;
7930: LD_ADDR_EXP 63
7934: PUSH
7935: LD_EXP 63
7939: PPUSH
7940: LD_INT 1
7942: PPUSH
7943: CALL_OW 3
7947: ST_TO_ADDR
7948: GO 7927
7950: POP
7951: POP
// if b in FilterAllUnits ( [ f_side , 3 ] ) then
7952: LD_VAR 0 1
7956: PUSH
7957: LD_INT 22
7959: PUSH
7960: LD_INT 3
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PPUSH
7967: CALL_OW 69
7971: IN
7972: IFFALSE 8012
// for i = 1 to 4 do
7974: LD_ADDR_VAR 0 2
7978: PUSH
7979: DOUBLE
7980: LD_INT 1
7982: DEC
7983: ST_TO_ADDR
7984: LD_INT 4
7986: PUSH
7987: FOR_TO
7988: IFFALSE 8010
// ru2_bul := Delete ( ru2_bul , 1 ) ;
7990: LD_ADDR_EXP 64
7994: PUSH
7995: LD_EXP 64
7999: PPUSH
8000: LD_INT 1
8002: PPUSH
8003: CALL_OW 3
8007: ST_TO_ADDR
8008: GO 7987
8010: POP
8011: POP
// end ;
8012: PPOPN 2
8014: END
// on ApemanTamed ( ape , scientist ) do begin if GetSide ( ape ) = 3 and apeman_tamed = false then
8015: LD_VAR 0 1
8019: PPUSH
8020: CALL_OW 255
8024: PUSH
8025: LD_INT 3
8027: EQUAL
8028: PUSH
8029: LD_EXP 54
8033: PUSH
8034: LD_INT 0
8036: EQUAL
8037: AND
8038: IFFALSE 8092
// begin DialogueOn ;
8040: CALL_OW 6
// Say ( Grigori , 4Grig-Ape-02 ) ;
8044: LD_EXP 26
8048: PPUSH
8049: LD_STRING 4Grig-Ape-02
8051: PPUSH
8052: CALL_OW 88
// Say ( Yakotich , 4Yak-Ape-02 ) ;
8056: LD_EXP 11
8060: PPUSH
8061: LD_STRING 4Yak-Ape-02
8063: PPUSH
8064: CALL_OW 88
// Say ( Grigori , 4Grig-Ape-03 ) ;
8068: LD_EXP 26
8072: PPUSH
8073: LD_STRING 4Grig-Ape-03
8075: PPUSH
8076: CALL_OW 88
// DialogueOff ;
8080: CALL_OW 7
// apeman_tamed = true ;
8084: LD_ADDR_EXP 54
8088: PUSH
8089: LD_INT 1
8091: ST_TO_ADDR
// end ; end ;
8092: PPOPN 2
8094: END
// on VehicleRecycled ( BuildingID , VehicleID , Side , Nation , X , Y , Direction , Chassis , Controller , Engine , Weapon ) do begin if Side = 3 and Nation = 2 and Weapon = 26 then
8095: LD_VAR 0 3
8099: PUSH
8100: LD_INT 3
8102: EQUAL
8103: PUSH
8104: LD_VAR 0 4
8108: PUSH
8109: LD_INT 2
8111: EQUAL
8112: AND
8113: PUSH
8114: LD_VAR 0 11
8118: PUSH
8119: LD_INT 26
8121: EQUAL
8122: AND
8123: IFFALSE 8138
// begin SetTech ( 70 , 3 , 1 ) ;
8125: LD_INT 70
8127: PPUSH
8128: LD_INT 3
8130: PPUSH
8131: LD_INT 1
8133: PPUSH
8134: CALL_OW 322
// end ; end ;
8138: PPOPN 11
8140: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = 89 and GetSide ( vehicle ) = 6 then
8141: LD_VAR 0 1
8145: PPUSH
8146: CALL_OW 264
8150: PUSH
8151: LD_INT 89
8153: EQUAL
8154: PUSH
8155: LD_VAR 0 1
8159: PPUSH
8160: CALL_OW 255
8164: PUSH
8165: LD_INT 6
8167: EQUAL
8168: AND
8169: IFFALSE 8327
// begin Wait ( 0 0$5 ) ;
8171: LD_INT 175
8173: PPUSH
8174: CALL_OW 67
// DialogueOn ;
8178: CALL_OW 6
// CenterNowOnUnits ( vehicle ) ;
8182: LD_VAR 0 1
8186: PPUSH
8187: CALL_OW 87
// SayRadio ( Bukov , 4Bukov-Transport-01 ) ;
8191: LD_EXP 46
8195: PPUSH
8196: LD_STRING 4Bukov-Transport-01
8198: PPUSH
8199: CALL_OW 94
// SayRadio ( Platonov , 4Plat-Transport-01 ) ;
8203: LD_EXP 43
8207: PPUSH
8208: LD_STRING 4Plat-Transport-01
8210: PPUSH
8211: CALL_OW 94
// TransportQuery ( 1 ) ;
8215: LD_INT 1
8217: PPUSH
8218: CALL 3815 0 1
// SetAreaMapShow ( LeninCargo , 2 ) ;
8222: LD_INT 17
8224: PPUSH
8225: LD_INT 2
8227: PPUSH
8228: CALL_OW 424
// CenterNowOnXY ( 102 , 165 ) ;
8232: LD_INT 102
8234: PPUSH
8235: LD_INT 165
8237: PPUSH
8238: CALL_OW 86
// DialogueOff ;
8242: CALL_OW 7
// repeat AddComTransport ( vehicle , BukovBase , mat_cans ) ;
8246: LD_VAR 0 1
8250: PPUSH
8251: LD_INT 127
8253: PPUSH
8254: LD_INT 1
8256: PPUSH
8257: CALL_OW 211
// AddComGive ( vehicle , SouthLenin ) ;
8261: LD_VAR 0 1
8265: PPUSH
8266: LD_INT 218
8268: PPUSH
8269: CALL_OW 221
// SetFuel ( vehicle , 85 ) ;
8273: LD_VAR 0 1
8277: PPUSH
8278: LD_INT 85
8280: PPUSH
8281: CALL_OW 240
// wait ( 0 0$1 ) ;
8285: LD_INT 35
8287: PPUSH
8288: CALL_OW 67
// until fall_back = true ;
8292: LD_EXP 58
8296: PUSH
8297: LD_INT 1
8299: EQUAL
8300: IFFALSE 8246
// if fall_back = true then
8302: LD_EXP 58
8306: PUSH
8307: LD_INT 1
8309: EQUAL
8310: IFFALSE 8327
// ComMoveXY ( vehicle , 110 , 168 ) ;
8312: LD_VAR 0 1
8316: PPUSH
8317: LD_INT 110
8319: PPUSH
8320: LD_INT 168
8322: PPUSH
8323: CALL_OW 111
// end ; end ;
8327: PPOPN 2
8329: END
// every 0 0$1 trigger Researched ( 6 , 84 ) do
8330: LD_INT 6
8332: PPUSH
8333: LD_INT 84
8335: PPUSH
8336: CALL_OW 325
8340: IFFALSE 8364
8342: GO 8344
8344: DISABLE
// begin AddComConstruct ( BukovF , 24 , 1 , 1 , 89 ) ;
8345: LD_INT 128
8347: PPUSH
8348: LD_INT 24
8350: PPUSH
8351: LD_INT 1
8353: PPUSH
8354: LD_INT 1
8356: PPUSH
8357: LD_INT 89
8359: PPUSH
8360: CALL_OW 185
// end ;
8364: END
// every 0 0$1 trigger Researched ( 3 , 34 ) do
8365: LD_INT 3
8367: PPUSH
8368: LD_INT 34
8370: PPUSH
8371: CALL_OW 325
8375: IFFALSE 8415
8377: GO 8379
8379: DISABLE
// begin DialogueOn ;
8380: CALL_OW 6
// Say ( Vasilij , 4Vas-HG-01 ) ;
8384: LD_EXP 14
8388: PPUSH
8389: LD_STRING 4Vas-HG-01
8391: PPUSH
8392: CALL_OW 88
// DialogueOff ;
8396: CALL_OW 7
// ChangeMissionObjectives ( hg2 ) ;
8400: LD_STRING hg2
8402: PPUSH
8403: CALL_OW 337
// heavy_gun_researched = true ;
8407: LD_ADDR_EXP 56
8411: PUSH
8412: LD_INT 1
8414: ST_TO_ADDR
// end ;
8415: END
// every 0 0$1 trigger Researched ( 3 , 1 ) do
8416: LD_INT 3
8418: PPUSH
8419: LD_INT 1
8421: PPUSH
8422: CALL_OW 325
8426: IFFALSE 8463
8428: GO 8430
8430: DISABLE
// begin DialogueOn ;
8431: CALL_OW 6
// Say ( Grigori , 4Grig-Ape-01 ) ;
8435: LD_EXP 26
8439: PPUSH
8440: LD_STRING 4Grig-Ape-01
8442: PPUSH
8443: CALL_OW 88
// Say ( Yakotich , 4Yak-Ape-01 ) ;
8447: LD_EXP 11
8451: PPUSH
8452: LD_STRING 4Yak-Ape-01
8454: PPUSH
8455: CALL_OW 88
// DialogueOff ;
8459: CALL_OW 7
// end ;
8463: END
// every 0 0$1 trigger Researched ( 3 , 70 ) do
8464: LD_INT 3
8466: PPUSH
8467: LD_INT 70
8469: PPUSH
8470: CALL_OW 325
8474: IFFALSE 8538
8476: GO 8478
8478: DISABLE
// begin DialogueOn ;
8479: CALL_OW 6
// Say ( Stanislav , 4Stan-Flame-01 ) ;
8483: LD_EXP 24
8487: PPUSH
8488: LD_STRING 4Stan-Flame-01
8490: PPUSH
8491: CALL_OW 88
// Say ( Stanislav , 4Stan-Flame-02 ) ;
8495: LD_EXP 24
8499: PPUSH
8500: LD_STRING 4Stan-Flame-02
8502: PPUSH
8503: CALL_OW 88
// Say ( Stanislav , 4Stan-Flame-03 ) ;
8507: LD_EXP 24
8511: PPUSH
8512: LD_STRING 4Stan-Flame-03
8514: PPUSH
8515: CALL_OW 88
// ChangeMissionObjectives ( flame ) ;
8519: LD_STRING flame
8521: PPUSH
8522: CALL_OW 337
// flame_researched = true ;
8526: LD_ADDR_EXP 55
8530: PUSH
8531: LD_INT 1
8533: ST_TO_ADDR
// DialogueOff ;
8534: CALL_OW 7
// end ; end_of_file
8538: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
8539: LD_INT 0
8541: PPUSH
// ar_miner := 81 ;
8542: LD_ADDR_EXP 73
8546: PUSH
8547: LD_INT 81
8549: ST_TO_ADDR
// ar_crane := 88 ;
8550: LD_ADDR_EXP 72
8554: PUSH
8555: LD_INT 88
8557: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
8558: LD_ADDR_EXP 67
8562: PUSH
8563: LD_INT 89
8565: ST_TO_ADDR
// us_hack := 99 ;
8566: LD_ADDR_EXP 68
8570: PUSH
8571: LD_INT 99
8573: ST_TO_ADDR
// us_artillery := 97 ;
8574: LD_ADDR_EXP 69
8578: PUSH
8579: LD_INT 97
8581: ST_TO_ADDR
// ar_bio_bomb := 91 ;
8582: LD_ADDR_EXP 70
8586: PUSH
8587: LD_INT 91
8589: ST_TO_ADDR
// ar_mortar := 92 ;
8590: LD_ADDR_EXP 71
8594: PUSH
8595: LD_INT 92
8597: ST_TO_ADDR
// ru_flamethrower := 93 ;
8598: LD_ADDR_EXP 74
8602: PUSH
8603: LD_INT 93
8605: ST_TO_ADDR
// ru_radar := 98 ;
8606: LD_ADDR_EXP 66
8610: PUSH
8611: LD_INT 98
8613: ST_TO_ADDR
// tech_Artillery := 80 ;
8614: LD_ADDR_EXP 75
8618: PUSH
8619: LD_INT 80
8621: ST_TO_ADDR
// tech_RadMat := 81 ;
8622: LD_ADDR_EXP 76
8626: PUSH
8627: LD_INT 81
8629: ST_TO_ADDR
// tech_BasicTools := 82 ;
8630: LD_ADDR_EXP 77
8634: PUSH
8635: LD_INT 82
8637: ST_TO_ADDR
// tech_Cargo := 83 ;
8638: LD_ADDR_EXP 78
8642: PUSH
8643: LD_INT 83
8645: ST_TO_ADDR
// tech_Track := 84 ;
8646: LD_ADDR_EXP 79
8650: PUSH
8651: LD_INT 84
8653: ST_TO_ADDR
// tech_Crane := 85 ;
8654: LD_ADDR_EXP 80
8658: PUSH
8659: LD_INT 85
8661: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8662: LD_ADDR_EXP 81
8666: PUSH
8667: LD_INT 86
8669: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8670: LD_ADDR_EXP 82
8674: PUSH
8675: LD_INT 87
8677: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8678: LD_ADDR_EXP 83
8682: PUSH
8683: LD_INT 88
8685: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
8686: LD_ADDR_EXP 84
8690: PUSH
8691: LD_INT 90
8693: ST_TO_ADDR
// class_mastodont := 31 ;
8694: LD_ADDR_EXP 85
8698: PUSH
8699: LD_INT 31
8701: ST_TO_ADDR
// class_horse := 21 ;
8702: LD_ADDR_EXP 86
8706: PUSH
8707: LD_INT 21
8709: ST_TO_ADDR
// end ; end_of_file
8710: LD_VAR 0 1
8714: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8715: LD_INT 0
8717: PPUSH
8718: PPUSH
// if exist_mode then
8719: LD_VAR 0 2
8723: IFFALSE 8748
// unit := CreateCharacter ( prefix & ident ) else
8725: LD_ADDR_VAR 0 5
8729: PUSH
8730: LD_VAR 0 3
8734: PUSH
8735: LD_VAR 0 1
8739: STR
8740: PPUSH
8741: CALL_OW 34
8745: ST_TO_ADDR
8746: GO 8763
// unit := NewCharacter ( ident ) ;
8748: LD_ADDR_VAR 0 5
8752: PUSH
8753: LD_VAR 0 1
8757: PPUSH
8758: CALL_OW 25
8762: ST_TO_ADDR
// result := unit ;
8763: LD_ADDR_VAR 0 4
8767: PUSH
8768: LD_VAR 0 5
8772: ST_TO_ADDR
// end ;
8773: LD_VAR 0 4
8777: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8778: LD_INT 0
8780: PPUSH
8781: PPUSH
// if not side or not nation then
8782: LD_VAR 0 1
8786: NOT
8787: PUSH
8788: LD_VAR 0 2
8792: NOT
8793: OR
8794: IFFALSE 8798
// exit ;
8796: GO 9566
// case nation of nation_american :
8798: LD_VAR 0 2
8802: PUSH
8803: LD_INT 1
8805: DOUBLE
8806: EQUAL
8807: IFTRUE 8811
8809: GO 9025
8811: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8812: LD_ADDR_VAR 0 4
8816: PUSH
8817: LD_INT 35
8819: PUSH
8820: LD_INT 45
8822: PUSH
8823: LD_INT 46
8825: PUSH
8826: LD_INT 47
8828: PUSH
8829: LD_INT 82
8831: PUSH
8832: LD_INT 83
8834: PUSH
8835: LD_INT 84
8837: PUSH
8838: LD_INT 85
8840: PUSH
8841: LD_INT 86
8843: PUSH
8844: LD_INT 1
8846: PUSH
8847: LD_INT 2
8849: PUSH
8850: LD_INT 6
8852: PUSH
8853: LD_INT 15
8855: PUSH
8856: LD_INT 16
8858: PUSH
8859: LD_INT 7
8861: PUSH
8862: LD_INT 12
8864: PUSH
8865: LD_INT 13
8867: PUSH
8868: LD_INT 10
8870: PUSH
8871: LD_INT 14
8873: PUSH
8874: LD_INT 20
8876: PUSH
8877: LD_INT 21
8879: PUSH
8880: LD_INT 22
8882: PUSH
8883: LD_INT 25
8885: PUSH
8886: LD_INT 32
8888: PUSH
8889: LD_INT 27
8891: PUSH
8892: LD_INT 36
8894: PUSH
8895: LD_INT 69
8897: PUSH
8898: LD_INT 39
8900: PUSH
8901: LD_INT 34
8903: PUSH
8904: LD_INT 40
8906: PUSH
8907: LD_INT 48
8909: PUSH
8910: LD_INT 49
8912: PUSH
8913: LD_INT 50
8915: PUSH
8916: LD_INT 51
8918: PUSH
8919: LD_INT 52
8921: PUSH
8922: LD_INT 53
8924: PUSH
8925: LD_INT 54
8927: PUSH
8928: LD_INT 55
8930: PUSH
8931: LD_INT 56
8933: PUSH
8934: LD_INT 57
8936: PUSH
8937: LD_INT 58
8939: PUSH
8940: LD_INT 59
8942: PUSH
8943: LD_INT 60
8945: PUSH
8946: LD_INT 61
8948: PUSH
8949: LD_INT 62
8951: PUSH
8952: LD_INT 80
8954: PUSH
8955: LD_INT 82
8957: PUSH
8958: LD_INT 83
8960: PUSH
8961: LD_INT 84
8963: PUSH
8964: LD_INT 85
8966: PUSH
8967: LD_INT 86
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: ST_TO_ADDR
9023: GO 9490
9025: LD_INT 2
9027: DOUBLE
9028: EQUAL
9029: IFTRUE 9033
9031: GO 9259
9033: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9034: LD_ADDR_VAR 0 4
9038: PUSH
9039: LD_INT 35
9041: PUSH
9042: LD_INT 45
9044: PUSH
9045: LD_INT 46
9047: PUSH
9048: LD_INT 47
9050: PUSH
9051: LD_INT 82
9053: PUSH
9054: LD_INT 83
9056: PUSH
9057: LD_INT 84
9059: PUSH
9060: LD_INT 85
9062: PUSH
9063: LD_INT 87
9065: PUSH
9066: LD_INT 70
9068: PUSH
9069: LD_INT 1
9071: PUSH
9072: LD_INT 11
9074: PUSH
9075: LD_INT 3
9077: PUSH
9078: LD_INT 4
9080: PUSH
9081: LD_INT 5
9083: PUSH
9084: LD_INT 6
9086: PUSH
9087: LD_INT 15
9089: PUSH
9090: LD_INT 18
9092: PUSH
9093: LD_INT 7
9095: PUSH
9096: LD_INT 17
9098: PUSH
9099: LD_INT 8
9101: PUSH
9102: LD_INT 20
9104: PUSH
9105: LD_INT 21
9107: PUSH
9108: LD_INT 22
9110: PUSH
9111: LD_INT 72
9113: PUSH
9114: LD_INT 26
9116: PUSH
9117: LD_INT 69
9119: PUSH
9120: LD_INT 39
9122: PUSH
9123: LD_INT 40
9125: PUSH
9126: LD_INT 41
9128: PUSH
9129: LD_INT 42
9131: PUSH
9132: LD_INT 43
9134: PUSH
9135: LD_INT 48
9137: PUSH
9138: LD_INT 49
9140: PUSH
9141: LD_INT 50
9143: PUSH
9144: LD_INT 51
9146: PUSH
9147: LD_INT 52
9149: PUSH
9150: LD_INT 53
9152: PUSH
9153: LD_INT 54
9155: PUSH
9156: LD_INT 55
9158: PUSH
9159: LD_INT 56
9161: PUSH
9162: LD_INT 60
9164: PUSH
9165: LD_INT 61
9167: PUSH
9168: LD_INT 62
9170: PUSH
9171: LD_INT 66
9173: PUSH
9174: LD_INT 67
9176: PUSH
9177: LD_INT 68
9179: PUSH
9180: LD_INT 81
9182: PUSH
9183: LD_INT 82
9185: PUSH
9186: LD_INT 83
9188: PUSH
9189: LD_INT 84
9191: PUSH
9192: LD_INT 85
9194: PUSH
9195: LD_INT 87
9197: PUSH
9198: LD_INT 88
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: ST_TO_ADDR
9257: GO 9490
9259: LD_INT 3
9261: DOUBLE
9262: EQUAL
9263: IFTRUE 9267
9265: GO 9489
9267: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9268: LD_ADDR_VAR 0 4
9272: PUSH
9273: LD_INT 46
9275: PUSH
9276: LD_INT 47
9278: PUSH
9279: LD_INT 1
9281: PUSH
9282: LD_INT 2
9284: PUSH
9285: LD_INT 82
9287: PUSH
9288: LD_INT 83
9290: PUSH
9291: LD_INT 84
9293: PUSH
9294: LD_INT 85
9296: PUSH
9297: LD_INT 86
9299: PUSH
9300: LD_INT 11
9302: PUSH
9303: LD_INT 9
9305: PUSH
9306: LD_INT 20
9308: PUSH
9309: LD_INT 19
9311: PUSH
9312: LD_INT 21
9314: PUSH
9315: LD_INT 24
9317: PUSH
9318: LD_INT 22
9320: PUSH
9321: LD_INT 25
9323: PUSH
9324: LD_INT 28
9326: PUSH
9327: LD_INT 29
9329: PUSH
9330: LD_INT 30
9332: PUSH
9333: LD_INT 31
9335: PUSH
9336: LD_INT 37
9338: PUSH
9339: LD_INT 38
9341: PUSH
9342: LD_INT 32
9344: PUSH
9345: LD_INT 27
9347: PUSH
9348: LD_INT 33
9350: PUSH
9351: LD_INT 69
9353: PUSH
9354: LD_INT 39
9356: PUSH
9357: LD_INT 34
9359: PUSH
9360: LD_INT 40
9362: PUSH
9363: LD_INT 71
9365: PUSH
9366: LD_INT 23
9368: PUSH
9369: LD_INT 44
9371: PUSH
9372: LD_INT 48
9374: PUSH
9375: LD_INT 49
9377: PUSH
9378: LD_INT 50
9380: PUSH
9381: LD_INT 51
9383: PUSH
9384: LD_INT 52
9386: PUSH
9387: LD_INT 53
9389: PUSH
9390: LD_INT 54
9392: PUSH
9393: LD_INT 55
9395: PUSH
9396: LD_INT 56
9398: PUSH
9399: LD_INT 57
9401: PUSH
9402: LD_INT 58
9404: PUSH
9405: LD_INT 59
9407: PUSH
9408: LD_INT 63
9410: PUSH
9411: LD_INT 64
9413: PUSH
9414: LD_INT 65
9416: PUSH
9417: LD_INT 82
9419: PUSH
9420: LD_INT 83
9422: PUSH
9423: LD_INT 84
9425: PUSH
9426: LD_INT 85
9428: PUSH
9429: LD_INT 86
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: ST_TO_ADDR
9487: GO 9490
9489: POP
// if state > - 1 and state < 3 then
9490: LD_VAR 0 3
9494: PUSH
9495: LD_INT 1
9497: NEG
9498: GREATER
9499: PUSH
9500: LD_VAR 0 3
9504: PUSH
9505: LD_INT 3
9507: LESS
9508: AND
9509: IFFALSE 9566
// for i in result do
9511: LD_ADDR_VAR 0 5
9515: PUSH
9516: LD_VAR 0 4
9520: PUSH
9521: FOR_IN
9522: IFFALSE 9564
// if GetTech ( i , side ) <> state then
9524: LD_VAR 0 5
9528: PPUSH
9529: LD_VAR 0 1
9533: PPUSH
9534: CALL_OW 321
9538: PUSH
9539: LD_VAR 0 3
9543: NONEQUAL
9544: IFFALSE 9562
// result := result diff i ;
9546: LD_ADDR_VAR 0 4
9550: PUSH
9551: LD_VAR 0 4
9555: PUSH
9556: LD_VAR 0 5
9560: DIFF
9561: ST_TO_ADDR
9562: GO 9521
9564: POP
9565: POP
// end ;
9566: LD_VAR 0 4
9570: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9571: LD_INT 0
9573: PPUSH
9574: PPUSH
9575: PPUSH
// result := true ;
9576: LD_ADDR_VAR 0 3
9580: PUSH
9581: LD_INT 1
9583: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9584: LD_ADDR_VAR 0 5
9588: PUSH
9589: LD_VAR 0 2
9593: PPUSH
9594: CALL_OW 480
9598: ST_TO_ADDR
// if not tmp then
9599: LD_VAR 0 5
9603: NOT
9604: IFFALSE 9608
// exit ;
9606: GO 9657
// for i in tmp do
9608: LD_ADDR_VAR 0 4
9612: PUSH
9613: LD_VAR 0 5
9617: PUSH
9618: FOR_IN
9619: IFFALSE 9655
// if GetTech ( i , side ) <> state_researched then
9621: LD_VAR 0 4
9625: PPUSH
9626: LD_VAR 0 1
9630: PPUSH
9631: CALL_OW 321
9635: PUSH
9636: LD_INT 2
9638: NONEQUAL
9639: IFFALSE 9653
// begin result := false ;
9641: LD_ADDR_VAR 0 3
9645: PUSH
9646: LD_INT 0
9648: ST_TO_ADDR
// exit ;
9649: POP
9650: POP
9651: GO 9657
// end ;
9653: GO 9618
9655: POP
9656: POP
// end ;
9657: LD_VAR 0 3
9661: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9662: LD_INT 0
9664: PPUSH
9665: PPUSH
9666: PPUSH
9667: PPUSH
9668: PPUSH
9669: PPUSH
9670: PPUSH
9671: PPUSH
9672: PPUSH
9673: PPUSH
9674: PPUSH
9675: PPUSH
9676: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9677: LD_VAR 0 1
9681: NOT
9682: PUSH
9683: LD_VAR 0 1
9687: PPUSH
9688: CALL_OW 257
9692: PUSH
9693: LD_INT 9
9695: NONEQUAL
9696: OR
9697: IFFALSE 9701
// exit ;
9699: GO 10274
// side := GetSide ( unit ) ;
9701: LD_ADDR_VAR 0 9
9705: PUSH
9706: LD_VAR 0 1
9710: PPUSH
9711: CALL_OW 255
9715: ST_TO_ADDR
// tech_space := tech_spacanom ;
9716: LD_ADDR_VAR 0 12
9720: PUSH
9721: LD_INT 29
9723: ST_TO_ADDR
// tech_time := tech_taurad ;
9724: LD_ADDR_VAR 0 13
9728: PUSH
9729: LD_INT 28
9731: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9732: LD_ADDR_VAR 0 11
9736: PUSH
9737: LD_VAR 0 1
9741: PPUSH
9742: CALL_OW 310
9746: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9747: LD_VAR 0 11
9751: PPUSH
9752: CALL_OW 247
9756: PUSH
9757: LD_INT 2
9759: EQUAL
9760: IFFALSE 9764
// exit ;
9762: GO 10274
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9764: LD_ADDR_VAR 0 8
9768: PUSH
9769: LD_INT 81
9771: PUSH
9772: LD_VAR 0 9
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 3
9783: PUSH
9784: LD_INT 21
9786: PUSH
9787: LD_INT 3
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: PPUSH
9802: CALL_OW 69
9806: ST_TO_ADDR
// if not tmp then
9807: LD_VAR 0 8
9811: NOT
9812: IFFALSE 9816
// exit ;
9814: GO 10274
// if in_unit then
9816: LD_VAR 0 11
9820: IFFALSE 9844
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9822: LD_ADDR_VAR 0 10
9826: PUSH
9827: LD_VAR 0 8
9831: PPUSH
9832: LD_VAR 0 11
9836: PPUSH
9837: CALL_OW 74
9841: ST_TO_ADDR
9842: GO 9864
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9844: LD_ADDR_VAR 0 10
9848: PUSH
9849: LD_VAR 0 8
9853: PPUSH
9854: LD_VAR 0 1
9858: PPUSH
9859: CALL_OW 74
9863: ST_TO_ADDR
// if not enemy then
9864: LD_VAR 0 10
9868: NOT
9869: IFFALSE 9873
// exit ;
9871: GO 10274
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9873: LD_VAR 0 11
9877: PUSH
9878: LD_VAR 0 11
9882: PPUSH
9883: LD_VAR 0 10
9887: PPUSH
9888: CALL_OW 296
9892: PUSH
9893: LD_INT 13
9895: GREATER
9896: AND
9897: PUSH
9898: LD_VAR 0 1
9902: PPUSH
9903: LD_VAR 0 10
9907: PPUSH
9908: CALL_OW 296
9912: PUSH
9913: LD_INT 12
9915: GREATER
9916: OR
9917: IFFALSE 9921
// exit ;
9919: GO 10274
// missile := [ 1 ] ;
9921: LD_ADDR_VAR 0 14
9925: PUSH
9926: LD_INT 1
9928: PUSH
9929: EMPTY
9930: LIST
9931: ST_TO_ADDR
// if Researched ( side , tech_space ) then
9932: LD_VAR 0 9
9936: PPUSH
9937: LD_VAR 0 12
9941: PPUSH
9942: CALL_OW 325
9946: IFFALSE 9975
// missile := Replace ( missile , missile + 1 , 2 ) ;
9948: LD_ADDR_VAR 0 14
9952: PUSH
9953: LD_VAR 0 14
9957: PPUSH
9958: LD_VAR 0 14
9962: PUSH
9963: LD_INT 1
9965: PLUS
9966: PPUSH
9967: LD_INT 2
9969: PPUSH
9970: CALL_OW 1
9974: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
9975: LD_VAR 0 9
9979: PPUSH
9980: LD_VAR 0 13
9984: PPUSH
9985: CALL_OW 325
9989: PUSH
9990: LD_VAR 0 10
9994: PPUSH
9995: CALL_OW 255
9999: PPUSH
10000: LD_VAR 0 13
10004: PPUSH
10005: CALL_OW 325
10009: NOT
10010: AND
10011: IFFALSE 10040
// missile := Replace ( missile , missile + 1 , 3 ) ;
10013: LD_ADDR_VAR 0 14
10017: PUSH
10018: LD_VAR 0 14
10022: PPUSH
10023: LD_VAR 0 14
10027: PUSH
10028: LD_INT 1
10030: PLUS
10031: PPUSH
10032: LD_INT 3
10034: PPUSH
10035: CALL_OW 1
10039: ST_TO_ADDR
// if missile < 2 then
10040: LD_VAR 0 14
10044: PUSH
10045: LD_INT 2
10047: LESS
10048: IFFALSE 10052
// exit ;
10050: GO 10274
// x := GetX ( enemy ) ;
10052: LD_ADDR_VAR 0 4
10056: PUSH
10057: LD_VAR 0 10
10061: PPUSH
10062: CALL_OW 250
10066: ST_TO_ADDR
// y := GetY ( enemy ) ;
10067: LD_ADDR_VAR 0 5
10071: PUSH
10072: LD_VAR 0 10
10076: PPUSH
10077: CALL_OW 251
10081: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10082: LD_ADDR_VAR 0 6
10086: PUSH
10087: LD_VAR 0 4
10091: PUSH
10092: LD_INT 1
10094: NEG
10095: PPUSH
10096: LD_INT 1
10098: PPUSH
10099: CALL_OW 12
10103: PLUS
10104: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10105: LD_ADDR_VAR 0 7
10109: PUSH
10110: LD_VAR 0 5
10114: PUSH
10115: LD_INT 1
10117: NEG
10118: PPUSH
10119: LD_INT 1
10121: PPUSH
10122: CALL_OW 12
10126: PLUS
10127: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10128: LD_VAR 0 6
10132: PPUSH
10133: LD_VAR 0 7
10137: PPUSH
10138: CALL_OW 488
10142: NOT
10143: IFFALSE 10165
// begin _x := x ;
10145: LD_ADDR_VAR 0 6
10149: PUSH
10150: LD_VAR 0 4
10154: ST_TO_ADDR
// _y := y ;
10155: LD_ADDR_VAR 0 7
10159: PUSH
10160: LD_VAR 0 5
10164: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10165: LD_ADDR_VAR 0 3
10169: PUSH
10170: LD_INT 1
10172: PPUSH
10173: LD_VAR 0 14
10177: PPUSH
10178: CALL_OW 12
10182: ST_TO_ADDR
// case i of 1 :
10183: LD_VAR 0 3
10187: PUSH
10188: LD_INT 1
10190: DOUBLE
10191: EQUAL
10192: IFTRUE 10196
10194: GO 10213
10196: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10197: LD_VAR 0 1
10201: PPUSH
10202: LD_VAR 0 10
10206: PPUSH
10207: CALL_OW 115
10211: GO 10274
10213: LD_INT 2
10215: DOUBLE
10216: EQUAL
10217: IFTRUE 10221
10219: GO 10243
10221: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10222: LD_VAR 0 1
10226: PPUSH
10227: LD_VAR 0 6
10231: PPUSH
10232: LD_VAR 0 7
10236: PPUSH
10237: CALL_OW 153
10241: GO 10274
10243: LD_INT 3
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10251
10249: GO 10273
10251: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10252: LD_VAR 0 1
10256: PPUSH
10257: LD_VAR 0 6
10261: PPUSH
10262: LD_VAR 0 7
10266: PPUSH
10267: CALL_OW 154
10271: GO 10274
10273: POP
// end ;
10274: LD_VAR 0 2
10278: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10279: LD_INT 0
10281: PPUSH
10282: PPUSH
10283: PPUSH
10284: PPUSH
10285: PPUSH
10286: PPUSH
// if not unit or not building then
10287: LD_VAR 0 1
10291: NOT
10292: PUSH
10293: LD_VAR 0 2
10297: NOT
10298: OR
10299: IFFALSE 10303
// exit ;
10301: GO 10461
// x := GetX ( building ) ;
10303: LD_ADDR_VAR 0 5
10307: PUSH
10308: LD_VAR 0 2
10312: PPUSH
10313: CALL_OW 250
10317: ST_TO_ADDR
// y := GetY ( building ) ;
10318: LD_ADDR_VAR 0 6
10322: PUSH
10323: LD_VAR 0 2
10327: PPUSH
10328: CALL_OW 251
10332: ST_TO_ADDR
// for i = 0 to 5 do
10333: LD_ADDR_VAR 0 4
10337: PUSH
10338: DOUBLE
10339: LD_INT 0
10341: DEC
10342: ST_TO_ADDR
10343: LD_INT 5
10345: PUSH
10346: FOR_TO
10347: IFFALSE 10459
// begin _x := ShiftX ( x , i , 3 ) ;
10349: LD_ADDR_VAR 0 7
10353: PUSH
10354: LD_VAR 0 5
10358: PPUSH
10359: LD_VAR 0 4
10363: PPUSH
10364: LD_INT 3
10366: PPUSH
10367: CALL_OW 272
10371: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10372: LD_ADDR_VAR 0 8
10376: PUSH
10377: LD_VAR 0 6
10381: PPUSH
10382: LD_VAR 0 4
10386: PPUSH
10387: LD_INT 3
10389: PPUSH
10390: CALL_OW 273
10394: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10395: LD_VAR 0 7
10399: PPUSH
10400: LD_VAR 0 8
10404: PPUSH
10405: CALL_OW 488
10409: NOT
10410: IFFALSE 10414
// continue ;
10412: GO 10346
// if HexInfo ( _x , _y ) = 0 then
10414: LD_VAR 0 7
10418: PPUSH
10419: LD_VAR 0 8
10423: PPUSH
10424: CALL_OW 428
10428: PUSH
10429: LD_INT 0
10431: EQUAL
10432: IFFALSE 10457
// begin ComMoveXY ( unit , _x , _y ) ;
10434: LD_VAR 0 1
10438: PPUSH
10439: LD_VAR 0 7
10443: PPUSH
10444: LD_VAR 0 8
10448: PPUSH
10449: CALL_OW 111
// exit ;
10453: POP
10454: POP
10455: GO 10461
// end ; end ;
10457: GO 10346
10459: POP
10460: POP
// end ;
10461: LD_VAR 0 3
10465: RET
// export function ScanBase ( side , base_area ) ; begin
10466: LD_INT 0
10468: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10469: LD_ADDR_VAR 0 3
10473: PUSH
10474: LD_VAR 0 2
10478: PPUSH
10479: LD_INT 81
10481: PUSH
10482: LD_VAR 0 1
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PPUSH
10491: CALL_OW 70
10495: ST_TO_ADDR
// end ;
10496: LD_VAR 0 3
10500: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10501: LD_INT 0
10503: PPUSH
10504: PPUSH
10505: PPUSH
10506: PPUSH
// result := false ;
10507: LD_ADDR_VAR 0 2
10511: PUSH
10512: LD_INT 0
10514: ST_TO_ADDR
// side := GetSide ( unit ) ;
10515: LD_ADDR_VAR 0 3
10519: PUSH
10520: LD_VAR 0 1
10524: PPUSH
10525: CALL_OW 255
10529: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10530: LD_ADDR_VAR 0 4
10534: PUSH
10535: LD_VAR 0 1
10539: PPUSH
10540: CALL_OW 248
10544: ST_TO_ADDR
// case nat of 1 :
10545: LD_VAR 0 4
10549: PUSH
10550: LD_INT 1
10552: DOUBLE
10553: EQUAL
10554: IFTRUE 10558
10556: GO 10569
10558: POP
// tech := tech_lassight ; 2 :
10559: LD_ADDR_VAR 0 5
10563: PUSH
10564: LD_INT 12
10566: ST_TO_ADDR
10567: GO 10608
10569: LD_INT 2
10571: DOUBLE
10572: EQUAL
10573: IFTRUE 10577
10575: GO 10588
10577: POP
// tech := tech_mortar ; 3 :
10578: LD_ADDR_VAR 0 5
10582: PUSH
10583: LD_INT 41
10585: ST_TO_ADDR
10586: GO 10608
10588: LD_INT 3
10590: DOUBLE
10591: EQUAL
10592: IFTRUE 10596
10594: GO 10607
10596: POP
// tech := tech_bazooka ; end ;
10597: LD_ADDR_VAR 0 5
10601: PUSH
10602: LD_INT 44
10604: ST_TO_ADDR
10605: GO 10608
10607: POP
// if Researched ( side , tech ) then
10608: LD_VAR 0 3
10612: PPUSH
10613: LD_VAR 0 5
10617: PPUSH
10618: CALL_OW 325
10622: IFFALSE 10649
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10624: LD_ADDR_VAR 0 2
10628: PUSH
10629: LD_INT 5
10631: PUSH
10632: LD_INT 8
10634: PUSH
10635: LD_INT 9
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: PUSH
10643: LD_VAR 0 4
10647: ARRAY
10648: ST_TO_ADDR
// end ;
10649: LD_VAR 0 2
10653: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10654: LD_INT 0
10656: PPUSH
10657: PPUSH
10658: PPUSH
// if not mines then
10659: LD_VAR 0 2
10663: NOT
10664: IFFALSE 10668
// exit ;
10666: GO 10812
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10668: LD_ADDR_VAR 0 5
10672: PUSH
10673: LD_INT 81
10675: PUSH
10676: LD_VAR 0 1
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 3
10687: PUSH
10688: LD_INT 21
10690: PUSH
10691: LD_INT 3
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PPUSH
10706: CALL_OW 69
10710: ST_TO_ADDR
// for i in mines do
10711: LD_ADDR_VAR 0 4
10715: PUSH
10716: LD_VAR 0 2
10720: PUSH
10721: FOR_IN
10722: IFFALSE 10810
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10724: LD_VAR 0 4
10728: PUSH
10729: LD_INT 1
10731: ARRAY
10732: PPUSH
10733: LD_VAR 0 4
10737: PUSH
10738: LD_INT 2
10740: ARRAY
10741: PPUSH
10742: CALL_OW 458
10746: NOT
10747: IFFALSE 10751
// continue ;
10749: GO 10721
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10751: LD_VAR 0 4
10755: PUSH
10756: LD_INT 1
10758: ARRAY
10759: PPUSH
10760: LD_VAR 0 4
10764: PUSH
10765: LD_INT 2
10767: ARRAY
10768: PPUSH
10769: CALL_OW 428
10773: PUSH
10774: LD_VAR 0 5
10778: IN
10779: IFFALSE 10808
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10781: LD_VAR 0 4
10785: PUSH
10786: LD_INT 1
10788: ARRAY
10789: PPUSH
10790: LD_VAR 0 4
10794: PUSH
10795: LD_INT 2
10797: ARRAY
10798: PPUSH
10799: LD_VAR 0 1
10803: PPUSH
10804: CALL_OW 456
// end ;
10808: GO 10721
10810: POP
10811: POP
// end ;
10812: LD_VAR 0 3
10816: RET
// export function Count ( array ) ; var i ; begin
10817: LD_INT 0
10819: PPUSH
10820: PPUSH
// result := 0 ;
10821: LD_ADDR_VAR 0 2
10825: PUSH
10826: LD_INT 0
10828: ST_TO_ADDR
// for i in array do
10829: LD_ADDR_VAR 0 3
10833: PUSH
10834: LD_VAR 0 1
10838: PUSH
10839: FOR_IN
10840: IFFALSE 10864
// if i then
10842: LD_VAR 0 3
10846: IFFALSE 10862
// result := result + 1 ;
10848: LD_ADDR_VAR 0 2
10852: PUSH
10853: LD_VAR 0 2
10857: PUSH
10858: LD_INT 1
10860: PLUS
10861: ST_TO_ADDR
10862: GO 10839
10864: POP
10865: POP
// end ;
10866: LD_VAR 0 2
10870: RET
// export function IsEmpty ( building ) ; begin
10871: LD_INT 0
10873: PPUSH
// if not building then
10874: LD_VAR 0 1
10878: NOT
10879: IFFALSE 10883
// exit ;
10881: GO 10926
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10883: LD_ADDR_VAR 0 2
10887: PUSH
10888: LD_VAR 0 1
10892: PUSH
10893: LD_INT 22
10895: PUSH
10896: LD_VAR 0 1
10900: PPUSH
10901: CALL_OW 255
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 58
10912: PUSH
10913: EMPTY
10914: LIST
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PPUSH
10920: CALL_OW 69
10924: IN
10925: ST_TO_ADDR
// end ;
10926: LD_VAR 0 2
10930: RET
// export function IsNotFull ( building ) ; begin
10931: LD_INT 0
10933: PPUSH
// if not building then
10934: LD_VAR 0 1
10938: NOT
10939: IFFALSE 10943
// exit ;
10941: GO 10962
// result := UnitsInside ( building ) < 6 ;
10943: LD_ADDR_VAR 0 2
10947: PUSH
10948: LD_VAR 0 1
10952: PPUSH
10953: CALL_OW 313
10957: PUSH
10958: LD_INT 6
10960: LESS
10961: ST_TO_ADDR
// end ;
10962: LD_VAR 0 2
10966: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
10967: LD_INT 0
10969: PPUSH
10970: PPUSH
10971: PPUSH
10972: PPUSH
// tmp := [ ] ;
10973: LD_ADDR_VAR 0 3
10977: PUSH
10978: EMPTY
10979: ST_TO_ADDR
// list := [ ] ;
10980: LD_ADDR_VAR 0 5
10984: PUSH
10985: EMPTY
10986: ST_TO_ADDR
// for i = 16 to 25 do
10987: LD_ADDR_VAR 0 4
10991: PUSH
10992: DOUBLE
10993: LD_INT 16
10995: DEC
10996: ST_TO_ADDR
10997: LD_INT 25
10999: PUSH
11000: FOR_TO
11001: IFFALSE 11074
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11003: LD_ADDR_VAR 0 3
11007: PUSH
11008: LD_VAR 0 3
11012: PUSH
11013: LD_INT 22
11015: PUSH
11016: LD_VAR 0 1
11020: PPUSH
11021: CALL_OW 255
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 91
11032: PUSH
11033: LD_VAR 0 1
11037: PUSH
11038: LD_INT 6
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 30
11048: PUSH
11049: LD_VAR 0 4
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: PUSH
11063: EMPTY
11064: LIST
11065: PPUSH
11066: CALL_OW 69
11070: ADD
11071: ST_TO_ADDR
11072: GO 11000
11074: POP
11075: POP
// for i = 1 to tmp do
11076: LD_ADDR_VAR 0 4
11080: PUSH
11081: DOUBLE
11082: LD_INT 1
11084: DEC
11085: ST_TO_ADDR
11086: LD_VAR 0 3
11090: PUSH
11091: FOR_TO
11092: IFFALSE 11180
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11094: LD_ADDR_VAR 0 5
11098: PUSH
11099: LD_VAR 0 5
11103: PUSH
11104: LD_VAR 0 3
11108: PUSH
11109: LD_VAR 0 4
11113: ARRAY
11114: PPUSH
11115: CALL_OW 266
11119: PUSH
11120: LD_VAR 0 3
11124: PUSH
11125: LD_VAR 0 4
11129: ARRAY
11130: PPUSH
11131: CALL_OW 250
11135: PUSH
11136: LD_VAR 0 3
11140: PUSH
11141: LD_VAR 0 4
11145: ARRAY
11146: PPUSH
11147: CALL_OW 251
11151: PUSH
11152: LD_VAR 0 3
11156: PUSH
11157: LD_VAR 0 4
11161: ARRAY
11162: PPUSH
11163: CALL_OW 254
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: PUSH
11174: EMPTY
11175: LIST
11176: ADD
11177: ST_TO_ADDR
11178: GO 11091
11180: POP
11181: POP
// result := list ;
11182: LD_ADDR_VAR 0 2
11186: PUSH
11187: LD_VAR 0 5
11191: ST_TO_ADDR
// end ;
11192: LD_VAR 0 2
11196: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11197: LD_INT 0
11199: PPUSH
11200: PPUSH
11201: PPUSH
11202: PPUSH
11203: PPUSH
11204: PPUSH
11205: PPUSH
// if not factory then
11206: LD_VAR 0 1
11210: NOT
11211: IFFALSE 11215
// exit ;
11213: GO 11808
// if control = control_apeman then
11215: LD_VAR 0 4
11219: PUSH
11220: LD_INT 5
11222: EQUAL
11223: IFFALSE 11332
// begin tmp := UnitsInside ( factory ) ;
11225: LD_ADDR_VAR 0 8
11229: PUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 313
11239: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11240: LD_VAR 0 8
11244: PPUSH
11245: LD_INT 25
11247: PUSH
11248: LD_INT 12
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PPUSH
11255: CALL_OW 72
11259: NOT
11260: IFFALSE 11270
// control := control_manual ;
11262: LD_ADDR_VAR 0 4
11266: PUSH
11267: LD_INT 1
11269: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11270: LD_ADDR_VAR 0 8
11274: PUSH
11275: LD_VAR 0 1
11279: PPUSH
11280: CALL 10967 0 1
11284: ST_TO_ADDR
// if tmp then
11285: LD_VAR 0 8
11289: IFFALSE 11332
// begin for i in tmp do
11291: LD_ADDR_VAR 0 7
11295: PUSH
11296: LD_VAR 0 8
11300: PUSH
11301: FOR_IN
11302: IFFALSE 11330
// if i [ 1 ] = b_ext_radio then
11304: LD_VAR 0 7
11308: PUSH
11309: LD_INT 1
11311: ARRAY
11312: PUSH
11313: LD_INT 22
11315: EQUAL
11316: IFFALSE 11328
// begin control := control_remote ;
11318: LD_ADDR_VAR 0 4
11322: PUSH
11323: LD_INT 2
11325: ST_TO_ADDR
// break ;
11326: GO 11330
// end ;
11328: GO 11301
11330: POP
11331: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11332: LD_VAR 0 1
11336: PPUSH
11337: LD_VAR 0 2
11341: PPUSH
11342: LD_VAR 0 3
11346: PPUSH
11347: LD_VAR 0 4
11351: PPUSH
11352: LD_VAR 0 5
11356: PPUSH
11357: CALL_OW 448
11361: IFFALSE 11396
// begin result := [ chassis , engine , control , weapon ] ;
11363: LD_ADDR_VAR 0 6
11367: PUSH
11368: LD_VAR 0 2
11372: PUSH
11373: LD_VAR 0 3
11377: PUSH
11378: LD_VAR 0 4
11382: PUSH
11383: LD_VAR 0 5
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: ST_TO_ADDR
// exit ;
11394: GO 11808
// end ; _chassis := AvailableChassisList ( factory ) ;
11396: LD_ADDR_VAR 0 9
11400: PUSH
11401: LD_VAR 0 1
11405: PPUSH
11406: CALL_OW 475
11410: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11411: LD_ADDR_VAR 0 11
11415: PUSH
11416: LD_VAR 0 1
11420: PPUSH
11421: CALL_OW 476
11425: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11426: LD_ADDR_VAR 0 12
11430: PUSH
11431: LD_VAR 0 1
11435: PPUSH
11436: CALL_OW 477
11440: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11441: LD_ADDR_VAR 0 10
11445: PUSH
11446: LD_VAR 0 1
11450: PPUSH
11451: CALL_OW 478
11455: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11456: LD_VAR 0 9
11460: NOT
11461: PUSH
11462: LD_VAR 0 11
11466: NOT
11467: OR
11468: PUSH
11469: LD_VAR 0 12
11473: NOT
11474: OR
11475: PUSH
11476: LD_VAR 0 10
11480: NOT
11481: OR
11482: IFFALSE 11517
// begin result := [ chassis , engine , control , weapon ] ;
11484: LD_ADDR_VAR 0 6
11488: PUSH
11489: LD_VAR 0 2
11493: PUSH
11494: LD_VAR 0 3
11498: PUSH
11499: LD_VAR 0 4
11503: PUSH
11504: LD_VAR 0 5
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: ST_TO_ADDR
// exit ;
11515: GO 11808
// end ; if not chassis in _chassis then
11517: LD_VAR 0 2
11521: PUSH
11522: LD_VAR 0 9
11526: IN
11527: NOT
11528: IFFALSE 11554
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11530: LD_ADDR_VAR 0 2
11534: PUSH
11535: LD_VAR 0 9
11539: PUSH
11540: LD_INT 1
11542: PPUSH
11543: LD_VAR 0 9
11547: PPUSH
11548: CALL_OW 12
11552: ARRAY
11553: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11554: LD_VAR 0 2
11558: PPUSH
11559: LD_VAR 0 3
11563: PPUSH
11564: CALL 11813 0 2
11568: NOT
11569: IFFALSE 11628
// repeat engine := _engine [ 1 ] ;
11571: LD_ADDR_VAR 0 3
11575: PUSH
11576: LD_VAR 0 11
11580: PUSH
11581: LD_INT 1
11583: ARRAY
11584: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11585: LD_ADDR_VAR 0 11
11589: PUSH
11590: LD_VAR 0 11
11594: PPUSH
11595: LD_INT 1
11597: PPUSH
11598: CALL_OW 3
11602: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11603: LD_VAR 0 2
11607: PPUSH
11608: LD_VAR 0 3
11612: PPUSH
11613: CALL 11813 0 2
11617: PUSH
11618: LD_VAR 0 11
11622: PUSH
11623: EMPTY
11624: EQUAL
11625: OR
11626: IFFALSE 11571
// if not control in _control then
11628: LD_VAR 0 4
11632: PUSH
11633: LD_VAR 0 12
11637: IN
11638: NOT
11639: IFFALSE 11665
// control := _control [ rand ( 1 , _control ) ] ;
11641: LD_ADDR_VAR 0 4
11645: PUSH
11646: LD_VAR 0 12
11650: PUSH
11651: LD_INT 1
11653: PPUSH
11654: LD_VAR 0 12
11658: PPUSH
11659: CALL_OW 12
11663: ARRAY
11664: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11665: LD_VAR 0 2
11669: PPUSH
11670: LD_VAR 0 5
11674: PPUSH
11675: CALL 12033 0 2
11679: NOT
11680: IFFALSE 11739
// repeat weapon := _weapon [ 1 ] ;
11682: LD_ADDR_VAR 0 5
11686: PUSH
11687: LD_VAR 0 10
11691: PUSH
11692: LD_INT 1
11694: ARRAY
11695: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11696: LD_ADDR_VAR 0 10
11700: PUSH
11701: LD_VAR 0 10
11705: PPUSH
11706: LD_INT 1
11708: PPUSH
11709: CALL_OW 3
11713: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11714: LD_VAR 0 2
11718: PPUSH
11719: LD_VAR 0 5
11723: PPUSH
11724: CALL 12033 0 2
11728: PUSH
11729: LD_VAR 0 10
11733: PUSH
11734: EMPTY
11735: EQUAL
11736: OR
11737: IFFALSE 11682
// result := [ ] ;
11739: LD_ADDR_VAR 0 6
11743: PUSH
11744: EMPTY
11745: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11746: LD_VAR 0 1
11750: PPUSH
11751: LD_VAR 0 2
11755: PPUSH
11756: LD_VAR 0 3
11760: PPUSH
11761: LD_VAR 0 4
11765: PPUSH
11766: LD_VAR 0 5
11770: PPUSH
11771: CALL_OW 448
11775: IFFALSE 11808
// result := [ chassis , engine , control , weapon ] ;
11777: LD_ADDR_VAR 0 6
11781: PUSH
11782: LD_VAR 0 2
11786: PUSH
11787: LD_VAR 0 3
11791: PUSH
11792: LD_VAR 0 4
11796: PUSH
11797: LD_VAR 0 5
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: ST_TO_ADDR
// end ;
11808: LD_VAR 0 6
11812: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11813: LD_INT 0
11815: PPUSH
// if not chassis or not engine then
11816: LD_VAR 0 1
11820: NOT
11821: PUSH
11822: LD_VAR 0 2
11826: NOT
11827: OR
11828: IFFALSE 11832
// exit ;
11830: GO 12028
// case engine of engine_solar :
11832: LD_VAR 0 2
11836: PUSH
11837: LD_INT 2
11839: DOUBLE
11840: EQUAL
11841: IFTRUE 11845
11843: GO 11883
11845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11846: LD_ADDR_VAR 0 3
11850: PUSH
11851: LD_INT 11
11853: PUSH
11854: LD_INT 12
11856: PUSH
11857: LD_INT 13
11859: PUSH
11860: LD_INT 14
11862: PUSH
11863: LD_INT 1
11865: PUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 3
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: ST_TO_ADDR
11881: GO 12012
11883: LD_INT 1
11885: DOUBLE
11886: EQUAL
11887: IFTRUE 11891
11889: GO 11953
11891: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11892: LD_ADDR_VAR 0 3
11896: PUSH
11897: LD_INT 11
11899: PUSH
11900: LD_INT 12
11902: PUSH
11903: LD_INT 13
11905: PUSH
11906: LD_INT 14
11908: PUSH
11909: LD_INT 1
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: LD_INT 3
11917: PUSH
11918: LD_INT 4
11920: PUSH
11921: LD_INT 5
11923: PUSH
11924: LD_INT 21
11926: PUSH
11927: LD_INT 23
11929: PUSH
11930: LD_INT 22
11932: PUSH
11933: LD_INT 24
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: ST_TO_ADDR
11951: GO 12012
11953: LD_INT 3
11955: DOUBLE
11956: EQUAL
11957: IFTRUE 11961
11959: GO 12011
11961: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
11962: LD_ADDR_VAR 0 3
11966: PUSH
11967: LD_INT 13
11969: PUSH
11970: LD_INT 14
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: LD_INT 4
11981: PUSH
11982: LD_INT 5
11984: PUSH
11985: LD_INT 21
11987: PUSH
11988: LD_INT 22
11990: PUSH
11991: LD_INT 23
11993: PUSH
11994: LD_INT 24
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: ST_TO_ADDR
12009: GO 12012
12011: POP
// result := ( chassis in result ) ;
12012: LD_ADDR_VAR 0 3
12016: PUSH
12017: LD_VAR 0 1
12021: PUSH
12022: LD_VAR 0 3
12026: IN
12027: ST_TO_ADDR
// end ;
12028: LD_VAR 0 3
12032: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12033: LD_INT 0
12035: PPUSH
// if not chassis or not weapon then
12036: LD_VAR 0 1
12040: NOT
12041: PUSH
12042: LD_VAR 0 2
12046: NOT
12047: OR
12048: IFFALSE 12052
// exit ;
12050: GO 13114
// case weapon of us_machine_gun :
12052: LD_VAR 0 2
12056: PUSH
12057: LD_INT 2
12059: DOUBLE
12060: EQUAL
12061: IFTRUE 12065
12063: GO 12095
12065: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12066: LD_ADDR_VAR 0 3
12070: PUSH
12071: LD_INT 1
12073: PUSH
12074: LD_INT 2
12076: PUSH
12077: LD_INT 3
12079: PUSH
12080: LD_INT 4
12082: PUSH
12083: LD_INT 5
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: ST_TO_ADDR
12093: GO 13098
12095: LD_INT 3
12097: DOUBLE
12098: EQUAL
12099: IFTRUE 12103
12101: GO 12133
12103: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12104: LD_ADDR_VAR 0 3
12108: PUSH
12109: LD_INT 1
12111: PUSH
12112: LD_INT 2
12114: PUSH
12115: LD_INT 3
12117: PUSH
12118: LD_INT 4
12120: PUSH
12121: LD_INT 5
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: ST_TO_ADDR
12131: GO 13098
12133: LD_INT 11
12135: DOUBLE
12136: EQUAL
12137: IFTRUE 12141
12139: GO 12171
12141: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12142: LD_ADDR_VAR 0 3
12146: PUSH
12147: LD_INT 1
12149: PUSH
12150: LD_INT 2
12152: PUSH
12153: LD_INT 3
12155: PUSH
12156: LD_INT 4
12158: PUSH
12159: LD_INT 5
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: ST_TO_ADDR
12169: GO 13098
12171: LD_INT 4
12173: DOUBLE
12174: EQUAL
12175: IFTRUE 12179
12177: GO 12205
12179: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12180: LD_ADDR_VAR 0 3
12184: PUSH
12185: LD_INT 2
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: LD_INT 4
12193: PUSH
12194: LD_INT 5
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: ST_TO_ADDR
12203: GO 13098
12205: LD_INT 5
12207: DOUBLE
12208: EQUAL
12209: IFTRUE 12213
12211: GO 12239
12213: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12214: LD_ADDR_VAR 0 3
12218: PUSH
12219: LD_INT 2
12221: PUSH
12222: LD_INT 3
12224: PUSH
12225: LD_INT 4
12227: PUSH
12228: LD_INT 5
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: ST_TO_ADDR
12237: GO 13098
12239: LD_INT 9
12241: DOUBLE
12242: EQUAL
12243: IFTRUE 12247
12245: GO 12273
12247: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12248: LD_ADDR_VAR 0 3
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: LD_INT 3
12258: PUSH
12259: LD_INT 4
12261: PUSH
12262: LD_INT 5
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: ST_TO_ADDR
12271: GO 13098
12273: LD_INT 7
12275: DOUBLE
12276: EQUAL
12277: IFTRUE 12281
12279: GO 12307
12281: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12282: LD_ADDR_VAR 0 3
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: LD_INT 3
12292: PUSH
12293: LD_INT 4
12295: PUSH
12296: LD_INT 5
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: ST_TO_ADDR
12305: GO 13098
12307: LD_INT 12
12309: DOUBLE
12310: EQUAL
12311: IFTRUE 12315
12313: GO 12341
12315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12316: LD_ADDR_VAR 0 3
12320: PUSH
12321: LD_INT 2
12323: PUSH
12324: LD_INT 3
12326: PUSH
12327: LD_INT 4
12329: PUSH
12330: LD_INT 5
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: ST_TO_ADDR
12339: GO 13098
12341: LD_INT 13
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12375
12349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12350: LD_ADDR_VAR 0 3
12354: PUSH
12355: LD_INT 2
12357: PUSH
12358: LD_INT 3
12360: PUSH
12361: LD_INT 4
12363: PUSH
12364: LD_INT 5
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: ST_TO_ADDR
12373: GO 13098
12375: LD_INT 14
12377: DOUBLE
12378: EQUAL
12379: IFTRUE 12383
12381: GO 12401
12383: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12384: LD_ADDR_VAR 0 3
12388: PUSH
12389: LD_INT 4
12391: PUSH
12392: LD_INT 5
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: ST_TO_ADDR
12399: GO 13098
12401: LD_INT 6
12403: DOUBLE
12404: EQUAL
12405: IFTRUE 12409
12407: GO 12427
12409: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12410: LD_ADDR_VAR 0 3
12414: PUSH
12415: LD_INT 4
12417: PUSH
12418: LD_INT 5
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: ST_TO_ADDR
12425: GO 13098
12427: LD_INT 10
12429: DOUBLE
12430: EQUAL
12431: IFTRUE 12435
12433: GO 12453
12435: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12436: LD_ADDR_VAR 0 3
12440: PUSH
12441: LD_INT 4
12443: PUSH
12444: LD_INT 5
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: ST_TO_ADDR
12451: GO 13098
12453: LD_INT 22
12455: DOUBLE
12456: EQUAL
12457: IFTRUE 12461
12459: GO 12487
12461: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12462: LD_ADDR_VAR 0 3
12466: PUSH
12467: LD_INT 11
12469: PUSH
12470: LD_INT 12
12472: PUSH
12473: LD_INT 13
12475: PUSH
12476: LD_INT 14
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: ST_TO_ADDR
12485: GO 13098
12487: LD_INT 23
12489: DOUBLE
12490: EQUAL
12491: IFTRUE 12495
12493: GO 12521
12495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12496: LD_ADDR_VAR 0 3
12500: PUSH
12501: LD_INT 11
12503: PUSH
12504: LD_INT 12
12506: PUSH
12507: LD_INT 13
12509: PUSH
12510: LD_INT 14
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: ST_TO_ADDR
12519: GO 13098
12521: LD_INT 24
12523: DOUBLE
12524: EQUAL
12525: IFTRUE 12529
12527: GO 12555
12529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12530: LD_ADDR_VAR 0 3
12534: PUSH
12535: LD_INT 11
12537: PUSH
12538: LD_INT 12
12540: PUSH
12541: LD_INT 13
12543: PUSH
12544: LD_INT 14
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: ST_TO_ADDR
12553: GO 13098
12555: LD_INT 30
12557: DOUBLE
12558: EQUAL
12559: IFTRUE 12563
12561: GO 12589
12563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12564: LD_ADDR_VAR 0 3
12568: PUSH
12569: LD_INT 11
12571: PUSH
12572: LD_INT 12
12574: PUSH
12575: LD_INT 13
12577: PUSH
12578: LD_INT 14
12580: PUSH
12581: EMPTY
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: ST_TO_ADDR
12587: GO 13098
12589: LD_INT 25
12591: DOUBLE
12592: EQUAL
12593: IFTRUE 12597
12595: GO 12615
12597: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12598: LD_ADDR_VAR 0 3
12602: PUSH
12603: LD_INT 13
12605: PUSH
12606: LD_INT 14
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: ST_TO_ADDR
12613: GO 13098
12615: LD_INT 27
12617: DOUBLE
12618: EQUAL
12619: IFTRUE 12623
12621: GO 12641
12623: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12624: LD_ADDR_VAR 0 3
12628: PUSH
12629: LD_INT 13
12631: PUSH
12632: LD_INT 14
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: ST_TO_ADDR
12639: GO 13098
12641: LD_EXP 71
12645: DOUBLE
12646: EQUAL
12647: IFTRUE 12651
12649: GO 12677
12651: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12652: LD_ADDR_VAR 0 3
12656: PUSH
12657: LD_INT 11
12659: PUSH
12660: LD_INT 12
12662: PUSH
12663: LD_INT 13
12665: PUSH
12666: LD_INT 14
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: ST_TO_ADDR
12675: GO 13098
12677: LD_INT 28
12679: DOUBLE
12680: EQUAL
12681: IFTRUE 12685
12683: GO 12703
12685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12686: LD_ADDR_VAR 0 3
12690: PUSH
12691: LD_INT 13
12693: PUSH
12694: LD_INT 14
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: ST_TO_ADDR
12701: GO 13098
12703: LD_INT 29
12705: DOUBLE
12706: EQUAL
12707: IFTRUE 12711
12709: GO 12729
12711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12712: LD_ADDR_VAR 0 3
12716: PUSH
12717: LD_INT 13
12719: PUSH
12720: LD_INT 14
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: ST_TO_ADDR
12727: GO 13098
12729: LD_INT 31
12731: DOUBLE
12732: EQUAL
12733: IFTRUE 12737
12735: GO 12755
12737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12738: LD_ADDR_VAR 0 3
12742: PUSH
12743: LD_INT 13
12745: PUSH
12746: LD_INT 14
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: ST_TO_ADDR
12753: GO 13098
12755: LD_INT 26
12757: DOUBLE
12758: EQUAL
12759: IFTRUE 12763
12761: GO 12781
12763: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12764: LD_ADDR_VAR 0 3
12768: PUSH
12769: LD_INT 13
12771: PUSH
12772: LD_INT 14
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: ST_TO_ADDR
12779: GO 13098
12781: LD_INT 42
12783: DOUBLE
12784: EQUAL
12785: IFTRUE 12789
12787: GO 12815
12789: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12790: LD_ADDR_VAR 0 3
12794: PUSH
12795: LD_INT 21
12797: PUSH
12798: LD_INT 22
12800: PUSH
12801: LD_INT 23
12803: PUSH
12804: LD_INT 24
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: ST_TO_ADDR
12813: GO 13098
12815: LD_INT 43
12817: DOUBLE
12818: EQUAL
12819: IFTRUE 12823
12821: GO 12849
12823: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12824: LD_ADDR_VAR 0 3
12828: PUSH
12829: LD_INT 21
12831: PUSH
12832: LD_INT 22
12834: PUSH
12835: LD_INT 23
12837: PUSH
12838: LD_INT 24
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: ST_TO_ADDR
12847: GO 13098
12849: LD_INT 44
12851: DOUBLE
12852: EQUAL
12853: IFTRUE 12857
12855: GO 12883
12857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12858: LD_ADDR_VAR 0 3
12862: PUSH
12863: LD_INT 21
12865: PUSH
12866: LD_INT 22
12868: PUSH
12869: LD_INT 23
12871: PUSH
12872: LD_INT 24
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: ST_TO_ADDR
12881: GO 13098
12883: LD_INT 45
12885: DOUBLE
12886: EQUAL
12887: IFTRUE 12891
12889: GO 12917
12891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12892: LD_ADDR_VAR 0 3
12896: PUSH
12897: LD_INT 21
12899: PUSH
12900: LD_INT 22
12902: PUSH
12903: LD_INT 23
12905: PUSH
12906: LD_INT 24
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: ST_TO_ADDR
12915: GO 13098
12917: LD_INT 49
12919: DOUBLE
12920: EQUAL
12921: IFTRUE 12925
12923: GO 12951
12925: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12926: LD_ADDR_VAR 0 3
12930: PUSH
12931: LD_INT 21
12933: PUSH
12934: LD_INT 22
12936: PUSH
12937: LD_INT 23
12939: PUSH
12940: LD_INT 24
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: ST_TO_ADDR
12949: GO 13098
12951: LD_INT 51
12953: DOUBLE
12954: EQUAL
12955: IFTRUE 12959
12957: GO 12985
12959: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
12960: LD_ADDR_VAR 0 3
12964: PUSH
12965: LD_INT 21
12967: PUSH
12968: LD_INT 22
12970: PUSH
12971: LD_INT 23
12973: PUSH
12974: LD_INT 24
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: ST_TO_ADDR
12983: GO 13098
12985: LD_INT 52
12987: DOUBLE
12988: EQUAL
12989: IFTRUE 12993
12991: GO 13019
12993: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
12994: LD_ADDR_VAR 0 3
12998: PUSH
12999: LD_INT 21
13001: PUSH
13002: LD_INT 22
13004: PUSH
13005: LD_INT 23
13007: PUSH
13008: LD_INT 24
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: ST_TO_ADDR
13017: GO 13098
13019: LD_INT 53
13021: DOUBLE
13022: EQUAL
13023: IFTRUE 13027
13025: GO 13045
13027: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13028: LD_ADDR_VAR 0 3
13032: PUSH
13033: LD_INT 23
13035: PUSH
13036: LD_INT 24
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: ST_TO_ADDR
13043: GO 13098
13045: LD_INT 46
13047: DOUBLE
13048: EQUAL
13049: IFTRUE 13053
13051: GO 13071
13053: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13054: LD_ADDR_VAR 0 3
13058: PUSH
13059: LD_INT 23
13061: PUSH
13062: LD_INT 24
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: ST_TO_ADDR
13069: GO 13098
13071: LD_INT 47
13073: DOUBLE
13074: EQUAL
13075: IFTRUE 13079
13077: GO 13097
13079: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13080: LD_ADDR_VAR 0 3
13084: PUSH
13085: LD_INT 23
13087: PUSH
13088: LD_INT 24
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: ST_TO_ADDR
13095: GO 13098
13097: POP
// result := ( chassis in result ) ;
13098: LD_ADDR_VAR 0 3
13102: PUSH
13103: LD_VAR 0 1
13107: PUSH
13108: LD_VAR 0 3
13112: IN
13113: ST_TO_ADDR
// end ;
13114: LD_VAR 0 3
13118: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13119: LD_INT 0
13121: PPUSH
13122: PPUSH
13123: PPUSH
13124: PPUSH
13125: PPUSH
13126: PPUSH
13127: PPUSH
// result := array ;
13128: LD_ADDR_VAR 0 5
13132: PUSH
13133: LD_VAR 0 1
13137: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13138: LD_VAR 0 1
13142: NOT
13143: PUSH
13144: LD_VAR 0 2
13148: NOT
13149: OR
13150: PUSH
13151: LD_VAR 0 3
13155: NOT
13156: OR
13157: PUSH
13158: LD_VAR 0 2
13162: PUSH
13163: LD_VAR 0 1
13167: GREATER
13168: OR
13169: PUSH
13170: LD_VAR 0 3
13174: PUSH
13175: LD_VAR 0 1
13179: GREATER
13180: OR
13181: IFFALSE 13185
// exit ;
13183: GO 13481
// if direction then
13185: LD_VAR 0 4
13189: IFFALSE 13253
// begin d := 1 ;
13191: LD_ADDR_VAR 0 9
13195: PUSH
13196: LD_INT 1
13198: ST_TO_ADDR
// if i_from > i_to then
13199: LD_VAR 0 2
13203: PUSH
13204: LD_VAR 0 3
13208: GREATER
13209: IFFALSE 13235
// length := ( array - i_from ) + i_to else
13211: LD_ADDR_VAR 0 11
13215: PUSH
13216: LD_VAR 0 1
13220: PUSH
13221: LD_VAR 0 2
13225: MINUS
13226: PUSH
13227: LD_VAR 0 3
13231: PLUS
13232: ST_TO_ADDR
13233: GO 13251
// length := i_to - i_from ;
13235: LD_ADDR_VAR 0 11
13239: PUSH
13240: LD_VAR 0 3
13244: PUSH
13245: LD_VAR 0 2
13249: MINUS
13250: ST_TO_ADDR
// end else
13251: GO 13314
// begin d := - 1 ;
13253: LD_ADDR_VAR 0 9
13257: PUSH
13258: LD_INT 1
13260: NEG
13261: ST_TO_ADDR
// if i_from > i_to then
13262: LD_VAR 0 2
13266: PUSH
13267: LD_VAR 0 3
13271: GREATER
13272: IFFALSE 13292
// length := i_from - i_to else
13274: LD_ADDR_VAR 0 11
13278: PUSH
13279: LD_VAR 0 2
13283: PUSH
13284: LD_VAR 0 3
13288: MINUS
13289: ST_TO_ADDR
13290: GO 13314
// length := ( array - i_to ) + i_from ;
13292: LD_ADDR_VAR 0 11
13296: PUSH
13297: LD_VAR 0 1
13301: PUSH
13302: LD_VAR 0 3
13306: MINUS
13307: PUSH
13308: LD_VAR 0 2
13312: PLUS
13313: ST_TO_ADDR
// end ; if not length then
13314: LD_VAR 0 11
13318: NOT
13319: IFFALSE 13323
// exit ;
13321: GO 13481
// tmp := array ;
13323: LD_ADDR_VAR 0 10
13327: PUSH
13328: LD_VAR 0 1
13332: ST_TO_ADDR
// for i = 1 to length do
13333: LD_ADDR_VAR 0 6
13337: PUSH
13338: DOUBLE
13339: LD_INT 1
13341: DEC
13342: ST_TO_ADDR
13343: LD_VAR 0 11
13347: PUSH
13348: FOR_TO
13349: IFFALSE 13469
// begin for j = 1 to array do
13351: LD_ADDR_VAR 0 7
13355: PUSH
13356: DOUBLE
13357: LD_INT 1
13359: DEC
13360: ST_TO_ADDR
13361: LD_VAR 0 1
13365: PUSH
13366: FOR_TO
13367: IFFALSE 13455
// begin k := j + d ;
13369: LD_ADDR_VAR 0 8
13373: PUSH
13374: LD_VAR 0 7
13378: PUSH
13379: LD_VAR 0 9
13383: PLUS
13384: ST_TO_ADDR
// if k > array then
13385: LD_VAR 0 8
13389: PUSH
13390: LD_VAR 0 1
13394: GREATER
13395: IFFALSE 13405
// k := 1 ;
13397: LD_ADDR_VAR 0 8
13401: PUSH
13402: LD_INT 1
13404: ST_TO_ADDR
// if not k then
13405: LD_VAR 0 8
13409: NOT
13410: IFFALSE 13422
// k := array ;
13412: LD_ADDR_VAR 0 8
13416: PUSH
13417: LD_VAR 0 1
13421: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13422: LD_ADDR_VAR 0 10
13426: PUSH
13427: LD_VAR 0 10
13431: PPUSH
13432: LD_VAR 0 8
13436: PPUSH
13437: LD_VAR 0 1
13441: PUSH
13442: LD_VAR 0 7
13446: ARRAY
13447: PPUSH
13448: CALL_OW 1
13452: ST_TO_ADDR
// end ;
13453: GO 13366
13455: POP
13456: POP
// array := tmp ;
13457: LD_ADDR_VAR 0 1
13461: PUSH
13462: LD_VAR 0 10
13466: ST_TO_ADDR
// end ;
13467: GO 13348
13469: POP
13470: POP
// result := array ;
13471: LD_ADDR_VAR 0 5
13475: PUSH
13476: LD_VAR 0 1
13480: ST_TO_ADDR
// end ;
13481: LD_VAR 0 5
13485: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13486: LD_INT 0
13488: PPUSH
13489: PPUSH
// result := 0 ;
13490: LD_ADDR_VAR 0 3
13494: PUSH
13495: LD_INT 0
13497: ST_TO_ADDR
// if not array or not value in array then
13498: LD_VAR 0 1
13502: NOT
13503: PUSH
13504: LD_VAR 0 2
13508: PUSH
13509: LD_VAR 0 1
13513: IN
13514: NOT
13515: OR
13516: IFFALSE 13520
// exit ;
13518: GO 13574
// for i = 1 to array do
13520: LD_ADDR_VAR 0 4
13524: PUSH
13525: DOUBLE
13526: LD_INT 1
13528: DEC
13529: ST_TO_ADDR
13530: LD_VAR 0 1
13534: PUSH
13535: FOR_TO
13536: IFFALSE 13572
// if value = array [ i ] then
13538: LD_VAR 0 2
13542: PUSH
13543: LD_VAR 0 1
13547: PUSH
13548: LD_VAR 0 4
13552: ARRAY
13553: EQUAL
13554: IFFALSE 13570
// begin result := i ;
13556: LD_ADDR_VAR 0 3
13560: PUSH
13561: LD_VAR 0 4
13565: ST_TO_ADDR
// exit ;
13566: POP
13567: POP
13568: GO 13574
// end ;
13570: GO 13535
13572: POP
13573: POP
// end ;
13574: LD_VAR 0 3
13578: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13579: LD_INT 0
13581: PPUSH
// vc_chassis := chassis ;
13582: LD_ADDR_OWVAR 37
13586: PUSH
13587: LD_VAR 0 1
13591: ST_TO_ADDR
// vc_engine := engine ;
13592: LD_ADDR_OWVAR 39
13596: PUSH
13597: LD_VAR 0 2
13601: ST_TO_ADDR
// vc_control := control ;
13602: LD_ADDR_OWVAR 38
13606: PUSH
13607: LD_VAR 0 3
13611: ST_TO_ADDR
// vc_weapon := weapon ;
13612: LD_ADDR_OWVAR 40
13616: PUSH
13617: LD_VAR 0 4
13621: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13622: LD_ADDR_OWVAR 41
13626: PUSH
13627: LD_VAR 0 5
13631: ST_TO_ADDR
// end ;
13632: LD_VAR 0 6
13636: RET
// export function WantPlant ( unit ) ; var task ; begin
13637: LD_INT 0
13639: PPUSH
13640: PPUSH
// result := false ;
13641: LD_ADDR_VAR 0 2
13645: PUSH
13646: LD_INT 0
13648: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13649: LD_ADDR_VAR 0 3
13653: PUSH
13654: LD_VAR 0 1
13658: PPUSH
13659: CALL_OW 437
13663: ST_TO_ADDR
// if task then
13664: LD_VAR 0 3
13668: IFFALSE 13696
// if task [ 1 ] [ 1 ] = p then
13670: LD_VAR 0 3
13674: PUSH
13675: LD_INT 1
13677: ARRAY
13678: PUSH
13679: LD_INT 1
13681: ARRAY
13682: PUSH
13683: LD_STRING p
13685: EQUAL
13686: IFFALSE 13696
// result := true ;
13688: LD_ADDR_VAR 0 2
13692: PUSH
13693: LD_INT 1
13695: ST_TO_ADDR
// end ;
13696: LD_VAR 0 2
13700: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13701: LD_INT 0
13703: PPUSH
13704: PPUSH
13705: PPUSH
13706: PPUSH
// if pos < 1 then
13707: LD_VAR 0 2
13711: PUSH
13712: LD_INT 1
13714: LESS
13715: IFFALSE 13719
// exit ;
13717: GO 14022
// if pos = 1 then
13719: LD_VAR 0 2
13723: PUSH
13724: LD_INT 1
13726: EQUAL
13727: IFFALSE 13760
// result := Replace ( arr , pos [ 1 ] , value ) else
13729: LD_ADDR_VAR 0 4
13733: PUSH
13734: LD_VAR 0 1
13738: PPUSH
13739: LD_VAR 0 2
13743: PUSH
13744: LD_INT 1
13746: ARRAY
13747: PPUSH
13748: LD_VAR 0 3
13752: PPUSH
13753: CALL_OW 1
13757: ST_TO_ADDR
13758: GO 14022
// begin tmp := arr ;
13760: LD_ADDR_VAR 0 6
13764: PUSH
13765: LD_VAR 0 1
13769: ST_TO_ADDR
// s_arr := [ tmp ] ;
13770: LD_ADDR_VAR 0 7
13774: PUSH
13775: LD_VAR 0 6
13779: PUSH
13780: EMPTY
13781: LIST
13782: ST_TO_ADDR
// for i = 1 to pos - 1 do
13783: LD_ADDR_VAR 0 5
13787: PUSH
13788: DOUBLE
13789: LD_INT 1
13791: DEC
13792: ST_TO_ADDR
13793: LD_VAR 0 2
13797: PUSH
13798: LD_INT 1
13800: MINUS
13801: PUSH
13802: FOR_TO
13803: IFFALSE 13848
// begin tmp := tmp [ pos [ i ] ] ;
13805: LD_ADDR_VAR 0 6
13809: PUSH
13810: LD_VAR 0 6
13814: PUSH
13815: LD_VAR 0 2
13819: PUSH
13820: LD_VAR 0 5
13824: ARRAY
13825: ARRAY
13826: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13827: LD_ADDR_VAR 0 7
13831: PUSH
13832: LD_VAR 0 7
13836: PUSH
13837: LD_VAR 0 6
13841: PUSH
13842: EMPTY
13843: LIST
13844: ADD
13845: ST_TO_ADDR
// end ;
13846: GO 13802
13848: POP
13849: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13850: LD_ADDR_VAR 0 6
13854: PUSH
13855: LD_VAR 0 6
13859: PPUSH
13860: LD_VAR 0 2
13864: PUSH
13865: LD_VAR 0 2
13869: ARRAY
13870: PPUSH
13871: LD_VAR 0 3
13875: PPUSH
13876: CALL_OW 1
13880: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13881: LD_ADDR_VAR 0 7
13885: PUSH
13886: LD_VAR 0 7
13890: PPUSH
13891: LD_VAR 0 7
13895: PPUSH
13896: LD_VAR 0 6
13900: PPUSH
13901: CALL_OW 1
13905: ST_TO_ADDR
// for i = s_arr downto 2 do
13906: LD_ADDR_VAR 0 5
13910: PUSH
13911: DOUBLE
13912: LD_VAR 0 7
13916: INC
13917: ST_TO_ADDR
13918: LD_INT 2
13920: PUSH
13921: FOR_DOWNTO
13922: IFFALSE 14006
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13924: LD_ADDR_VAR 0 6
13928: PUSH
13929: LD_VAR 0 7
13933: PUSH
13934: LD_VAR 0 5
13938: PUSH
13939: LD_INT 1
13941: MINUS
13942: ARRAY
13943: PPUSH
13944: LD_VAR 0 2
13948: PUSH
13949: LD_VAR 0 5
13953: PUSH
13954: LD_INT 1
13956: MINUS
13957: ARRAY
13958: PPUSH
13959: LD_VAR 0 7
13963: PUSH
13964: LD_VAR 0 5
13968: ARRAY
13969: PPUSH
13970: CALL_OW 1
13974: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
13975: LD_ADDR_VAR 0 7
13979: PUSH
13980: LD_VAR 0 7
13984: PPUSH
13985: LD_VAR 0 5
13989: PUSH
13990: LD_INT 1
13992: MINUS
13993: PPUSH
13994: LD_VAR 0 6
13998: PPUSH
13999: CALL_OW 1
14003: ST_TO_ADDR
// end ;
14004: GO 13921
14006: POP
14007: POP
// result := s_arr [ 1 ] ;
14008: LD_ADDR_VAR 0 4
14012: PUSH
14013: LD_VAR 0 7
14017: PUSH
14018: LD_INT 1
14020: ARRAY
14021: ST_TO_ADDR
// end ; end ;
14022: LD_VAR 0 4
14026: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14027: LD_INT 0
14029: PPUSH
14030: PPUSH
// if not list then
14031: LD_VAR 0 1
14035: NOT
14036: IFFALSE 14040
// exit ;
14038: GO 14131
// i := list [ pos1 ] ;
14040: LD_ADDR_VAR 0 5
14044: PUSH
14045: LD_VAR 0 1
14049: PUSH
14050: LD_VAR 0 2
14054: ARRAY
14055: ST_TO_ADDR
// if not i then
14056: LD_VAR 0 5
14060: NOT
14061: IFFALSE 14065
// exit ;
14063: GO 14131
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14065: LD_ADDR_VAR 0 1
14069: PUSH
14070: LD_VAR 0 1
14074: PPUSH
14075: LD_VAR 0 2
14079: PPUSH
14080: LD_VAR 0 1
14084: PUSH
14085: LD_VAR 0 3
14089: ARRAY
14090: PPUSH
14091: CALL_OW 1
14095: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14096: LD_ADDR_VAR 0 1
14100: PUSH
14101: LD_VAR 0 1
14105: PPUSH
14106: LD_VAR 0 3
14110: PPUSH
14111: LD_VAR 0 5
14115: PPUSH
14116: CALL_OW 1
14120: ST_TO_ADDR
// result := list ;
14121: LD_ADDR_VAR 0 4
14125: PUSH
14126: LD_VAR 0 1
14130: ST_TO_ADDR
// end ;
14131: LD_VAR 0 4
14135: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14136: LD_INT 0
14138: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14139: LD_ADDR_VAR 0 5
14143: PUSH
14144: LD_VAR 0 1
14148: PPUSH
14149: CALL_OW 250
14153: PPUSH
14154: LD_VAR 0 1
14158: PPUSH
14159: CALL_OW 251
14163: PPUSH
14164: LD_VAR 0 2
14168: PPUSH
14169: LD_VAR 0 3
14173: PPUSH
14174: LD_VAR 0 4
14178: PPUSH
14179: CALL 14189 0 5
14183: ST_TO_ADDR
// end ;
14184: LD_VAR 0 5
14188: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14189: LD_INT 0
14191: PPUSH
14192: PPUSH
14193: PPUSH
14194: PPUSH
// if not list then
14195: LD_VAR 0 3
14199: NOT
14200: IFFALSE 14204
// exit ;
14202: GO 14592
// result := [ ] ;
14204: LD_ADDR_VAR 0 6
14208: PUSH
14209: EMPTY
14210: ST_TO_ADDR
// for i in list do
14211: LD_ADDR_VAR 0 7
14215: PUSH
14216: LD_VAR 0 3
14220: PUSH
14221: FOR_IN
14222: IFFALSE 14424
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14224: LD_ADDR_VAR 0 9
14228: PUSH
14229: LD_VAR 0 7
14233: PPUSH
14234: LD_VAR 0 1
14238: PPUSH
14239: LD_VAR 0 2
14243: PPUSH
14244: CALL_OW 297
14248: ST_TO_ADDR
// if not result then
14249: LD_VAR 0 6
14253: NOT
14254: IFFALSE 14280
// result := [ [ i , tmp ] ] else
14256: LD_ADDR_VAR 0 6
14260: PUSH
14261: LD_VAR 0 7
14265: PUSH
14266: LD_VAR 0 9
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: EMPTY
14276: LIST
14277: ST_TO_ADDR
14278: GO 14422
// begin if result [ result ] [ 2 ] < tmp then
14280: LD_VAR 0 6
14284: PUSH
14285: LD_VAR 0 6
14289: ARRAY
14290: PUSH
14291: LD_INT 2
14293: ARRAY
14294: PUSH
14295: LD_VAR 0 9
14299: LESS
14300: IFFALSE 14342
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14302: LD_ADDR_VAR 0 6
14306: PUSH
14307: LD_VAR 0 6
14311: PPUSH
14312: LD_VAR 0 6
14316: PUSH
14317: LD_INT 1
14319: PLUS
14320: PPUSH
14321: LD_VAR 0 7
14325: PUSH
14326: LD_VAR 0 9
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PPUSH
14335: CALL_OW 2
14339: ST_TO_ADDR
14340: GO 14422
// for j = 1 to result do
14342: LD_ADDR_VAR 0 8
14346: PUSH
14347: DOUBLE
14348: LD_INT 1
14350: DEC
14351: ST_TO_ADDR
14352: LD_VAR 0 6
14356: PUSH
14357: FOR_TO
14358: IFFALSE 14420
// begin if tmp < result [ j ] [ 2 ] then
14360: LD_VAR 0 9
14364: PUSH
14365: LD_VAR 0 6
14369: PUSH
14370: LD_VAR 0 8
14374: ARRAY
14375: PUSH
14376: LD_INT 2
14378: ARRAY
14379: LESS
14380: IFFALSE 14418
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14382: LD_ADDR_VAR 0 6
14386: PUSH
14387: LD_VAR 0 6
14391: PPUSH
14392: LD_VAR 0 8
14396: PPUSH
14397: LD_VAR 0 7
14401: PUSH
14402: LD_VAR 0 9
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PPUSH
14411: CALL_OW 2
14415: ST_TO_ADDR
// break ;
14416: GO 14420
// end ; end ;
14418: GO 14357
14420: POP
14421: POP
// end ; end ;
14422: GO 14221
14424: POP
14425: POP
// if result and not asc then
14426: LD_VAR 0 6
14430: PUSH
14431: LD_VAR 0 4
14435: NOT
14436: AND
14437: IFFALSE 14512
// begin tmp := result ;
14439: LD_ADDR_VAR 0 9
14443: PUSH
14444: LD_VAR 0 6
14448: ST_TO_ADDR
// for i = tmp downto 1 do
14449: LD_ADDR_VAR 0 7
14453: PUSH
14454: DOUBLE
14455: LD_VAR 0 9
14459: INC
14460: ST_TO_ADDR
14461: LD_INT 1
14463: PUSH
14464: FOR_DOWNTO
14465: IFFALSE 14510
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14467: LD_ADDR_VAR 0 6
14471: PUSH
14472: LD_VAR 0 6
14476: PPUSH
14477: LD_VAR 0 9
14481: PUSH
14482: LD_VAR 0 7
14486: MINUS
14487: PUSH
14488: LD_INT 1
14490: PLUS
14491: PPUSH
14492: LD_VAR 0 9
14496: PUSH
14497: LD_VAR 0 7
14501: ARRAY
14502: PPUSH
14503: CALL_OW 1
14507: ST_TO_ADDR
14508: GO 14464
14510: POP
14511: POP
// end ; tmp := [ ] ;
14512: LD_ADDR_VAR 0 9
14516: PUSH
14517: EMPTY
14518: ST_TO_ADDR
// if mode then
14519: LD_VAR 0 5
14523: IFFALSE 14592
// begin for i = 1 to result do
14525: LD_ADDR_VAR 0 7
14529: PUSH
14530: DOUBLE
14531: LD_INT 1
14533: DEC
14534: ST_TO_ADDR
14535: LD_VAR 0 6
14539: PUSH
14540: FOR_TO
14541: IFFALSE 14580
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14543: LD_ADDR_VAR 0 9
14547: PUSH
14548: LD_VAR 0 9
14552: PPUSH
14553: LD_VAR 0 7
14557: PPUSH
14558: LD_VAR 0 6
14562: PUSH
14563: LD_VAR 0 7
14567: ARRAY
14568: PUSH
14569: LD_INT 1
14571: ARRAY
14572: PPUSH
14573: CALL_OW 1
14577: ST_TO_ADDR
14578: GO 14540
14580: POP
14581: POP
// result := tmp ;
14582: LD_ADDR_VAR 0 6
14586: PUSH
14587: LD_VAR 0 9
14591: ST_TO_ADDR
// end ; end ;
14592: LD_VAR 0 6
14596: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
14597: LD_INT 0
14599: PPUSH
14600: PPUSH
14601: PPUSH
14602: PPUSH
14603: PPUSH
14604: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
14605: LD_ADDR_VAR 0 5
14609: PUSH
14610: LD_INT 0
14612: PUSH
14613: LD_INT 0
14615: PUSH
14616: LD_INT 0
14618: PUSH
14619: EMPTY
14620: PUSH
14621: EMPTY
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: ST_TO_ADDR
// if not x or not y then
14627: LD_VAR 0 2
14631: NOT
14632: PUSH
14633: LD_VAR 0 3
14637: NOT
14638: OR
14639: IFFALSE 14643
// exit ;
14641: GO 16295
// if not range then
14643: LD_VAR 0 4
14647: NOT
14648: IFFALSE 14658
// range := 10 ;
14650: LD_ADDR_VAR 0 4
14654: PUSH
14655: LD_INT 10
14657: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14658: LD_ADDR_VAR 0 8
14662: PUSH
14663: LD_INT 81
14665: PUSH
14666: LD_VAR 0 1
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: PUSH
14675: LD_INT 92
14677: PUSH
14678: LD_VAR 0 2
14682: PUSH
14683: LD_VAR 0 3
14687: PUSH
14688: LD_VAR 0 4
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: LD_INT 21
14704: PUSH
14705: LD_INT 3
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: LIST
14720: PPUSH
14721: CALL_OW 69
14725: ST_TO_ADDR
// if not tmp then
14726: LD_VAR 0 8
14730: NOT
14731: IFFALSE 14735
// exit ;
14733: GO 16295
// for i in tmp do
14735: LD_ADDR_VAR 0 6
14739: PUSH
14740: LD_VAR 0 8
14744: PUSH
14745: FOR_IN
14746: IFFALSE 16270
// begin points := [ 0 , 0 , 0 ] ;
14748: LD_ADDR_VAR 0 9
14752: PUSH
14753: LD_INT 0
14755: PUSH
14756: LD_INT 0
14758: PUSH
14759: LD_INT 0
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: LIST
14766: ST_TO_ADDR
// bpoints := 1 ;
14767: LD_ADDR_VAR 0 10
14771: PUSH
14772: LD_INT 1
14774: ST_TO_ADDR
// case GetType ( i ) of unit_human :
14775: LD_VAR 0 6
14779: PPUSH
14780: CALL_OW 247
14784: PUSH
14785: LD_INT 1
14787: DOUBLE
14788: EQUAL
14789: IFTRUE 14793
14791: GO 15371
14793: POP
// begin if GetClass ( i ) = 1 then
14794: LD_VAR 0 6
14798: PPUSH
14799: CALL_OW 257
14803: PUSH
14804: LD_INT 1
14806: EQUAL
14807: IFFALSE 14828
// points := [ 10 , 5 , 3 ] ;
14809: LD_ADDR_VAR 0 9
14813: PUSH
14814: LD_INT 10
14816: PUSH
14817: LD_INT 5
14819: PUSH
14820: LD_INT 3
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
14828: LD_VAR 0 6
14832: PPUSH
14833: CALL_OW 257
14837: PUSH
14838: LD_INT 2
14840: PUSH
14841: LD_INT 3
14843: PUSH
14844: LD_INT 4
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: LIST
14851: IN
14852: IFFALSE 14873
// points := [ 3 , 2 , 1 ] ;
14854: LD_ADDR_VAR 0 9
14858: PUSH
14859: LD_INT 3
14861: PUSH
14862: LD_INT 2
14864: PUSH
14865: LD_INT 1
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: LIST
14872: ST_TO_ADDR
// if GetClass ( i ) = 5 then
14873: LD_VAR 0 6
14877: PPUSH
14878: CALL_OW 257
14882: PUSH
14883: LD_INT 5
14885: EQUAL
14886: IFFALSE 14907
// points := [ 130 , 5 , 2 ] ;
14888: LD_ADDR_VAR 0 9
14892: PUSH
14893: LD_INT 130
14895: PUSH
14896: LD_INT 5
14898: PUSH
14899: LD_INT 2
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: LIST
14906: ST_TO_ADDR
// if GetClass ( i ) = 8 then
14907: LD_VAR 0 6
14911: PPUSH
14912: CALL_OW 257
14916: PUSH
14917: LD_INT 8
14919: EQUAL
14920: IFFALSE 14941
// points := [ 35 , 35 , 30 ] ;
14922: LD_ADDR_VAR 0 9
14926: PUSH
14927: LD_INT 35
14929: PUSH
14930: LD_INT 35
14932: PUSH
14933: LD_INT 30
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: ST_TO_ADDR
// if GetClass ( i ) = 9 then
14941: LD_VAR 0 6
14945: PPUSH
14946: CALL_OW 257
14950: PUSH
14951: LD_INT 9
14953: EQUAL
14954: IFFALSE 14975
// points := [ 20 , 55 , 40 ] ;
14956: LD_ADDR_VAR 0 9
14960: PUSH
14961: LD_INT 20
14963: PUSH
14964: LD_INT 55
14966: PUSH
14967: LD_INT 40
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: LIST
14974: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
14975: LD_VAR 0 6
14979: PPUSH
14980: CALL_OW 257
14984: PUSH
14985: LD_INT 12
14987: PUSH
14988: LD_INT 16
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: IN
14995: IFFALSE 15016
// points := [ 5 , 3 , 2 ] ;
14997: LD_ADDR_VAR 0 9
15001: PUSH
15002: LD_INT 5
15004: PUSH
15005: LD_INT 3
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15016: LD_VAR 0 6
15020: PPUSH
15021: CALL_OW 257
15025: PUSH
15026: LD_INT 17
15028: EQUAL
15029: IFFALSE 15050
// points := [ 100 , 50 , 75 ] ;
15031: LD_ADDR_VAR 0 9
15035: PUSH
15036: LD_INT 100
15038: PUSH
15039: LD_INT 50
15041: PUSH
15042: LD_INT 75
15044: PUSH
15045: EMPTY
15046: LIST
15047: LIST
15048: LIST
15049: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15050: LD_VAR 0 6
15054: PPUSH
15055: CALL_OW 257
15059: PUSH
15060: LD_INT 15
15062: EQUAL
15063: IFFALSE 15084
// points := [ 10 , 5 , 3 ] ;
15065: LD_ADDR_VAR 0 9
15069: PUSH
15070: LD_INT 10
15072: PUSH
15073: LD_INT 5
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: LIST
15083: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15084: LD_VAR 0 6
15088: PPUSH
15089: CALL_OW 257
15093: PUSH
15094: LD_INT 14
15096: EQUAL
15097: IFFALSE 15118
// points := [ 10 , 0 , 0 ] ;
15099: LD_ADDR_VAR 0 9
15103: PUSH
15104: LD_INT 10
15106: PUSH
15107: LD_INT 0
15109: PUSH
15110: LD_INT 0
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15118: LD_VAR 0 6
15122: PPUSH
15123: CALL_OW 257
15127: PUSH
15128: LD_INT 11
15130: EQUAL
15131: IFFALSE 15152
// points := [ 30 , 10 , 5 ] ;
15133: LD_ADDR_VAR 0 9
15137: PUSH
15138: LD_INT 30
15140: PUSH
15141: LD_INT 10
15143: PUSH
15144: LD_INT 5
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: LIST
15151: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15152: LD_VAR 0 1
15156: PPUSH
15157: LD_INT 5
15159: PPUSH
15160: CALL_OW 321
15164: PUSH
15165: LD_INT 2
15167: EQUAL
15168: IFFALSE 15185
// bpoints := bpoints * 1.8 ;
15170: LD_ADDR_VAR 0 10
15174: PUSH
15175: LD_VAR 0 10
15179: PUSH
15180: LD_REAL  1.80000000000000E+0000
15183: MUL
15184: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15185: LD_VAR 0 6
15189: PPUSH
15190: CALL_OW 257
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: LD_INT 2
15200: PUSH
15201: LD_INT 3
15203: PUSH
15204: LD_INT 4
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: IN
15213: PUSH
15214: LD_VAR 0 1
15218: PPUSH
15219: LD_INT 51
15221: PPUSH
15222: CALL_OW 321
15226: PUSH
15227: LD_INT 2
15229: EQUAL
15230: AND
15231: IFFALSE 15248
// bpoints := bpoints * 1.2 ;
15233: LD_ADDR_VAR 0 10
15237: PUSH
15238: LD_VAR 0 10
15242: PUSH
15243: LD_REAL  1.20000000000000E+0000
15246: MUL
15247: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15248: LD_VAR 0 6
15252: PPUSH
15253: CALL_OW 257
15257: PUSH
15258: LD_INT 5
15260: PUSH
15261: LD_INT 7
15263: PUSH
15264: LD_INT 9
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: LIST
15271: IN
15272: PUSH
15273: LD_VAR 0 1
15277: PPUSH
15278: LD_INT 52
15280: PPUSH
15281: CALL_OW 321
15285: PUSH
15286: LD_INT 2
15288: EQUAL
15289: AND
15290: IFFALSE 15307
// bpoints := bpoints * 1.5 ;
15292: LD_ADDR_VAR 0 10
15296: PUSH
15297: LD_VAR 0 10
15301: PUSH
15302: LD_REAL  1.50000000000000E+0000
15305: MUL
15306: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15307: LD_VAR 0 1
15311: PPUSH
15312: LD_INT 66
15314: PPUSH
15315: CALL_OW 321
15319: PUSH
15320: LD_INT 2
15322: EQUAL
15323: IFFALSE 15340
// bpoints := bpoints * 1.1 ;
15325: LD_ADDR_VAR 0 10
15329: PUSH
15330: LD_VAR 0 10
15334: PUSH
15335: LD_REAL  1.10000000000000E+0000
15338: MUL
15339: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15340: LD_ADDR_VAR 0 10
15344: PUSH
15345: LD_VAR 0 10
15349: PUSH
15350: LD_VAR 0 6
15354: PPUSH
15355: LD_INT 1
15357: PPUSH
15358: CALL_OW 259
15362: PUSH
15363: LD_REAL  1.15000000000000E+0000
15366: MUL
15367: MUL
15368: ST_TO_ADDR
// end ; unit_vehicle :
15369: GO 16199
15371: LD_INT 2
15373: DOUBLE
15374: EQUAL
15375: IFTRUE 15379
15377: GO 16187
15379: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15380: LD_VAR 0 6
15384: PPUSH
15385: CALL_OW 264
15389: PUSH
15390: LD_INT 2
15392: PUSH
15393: LD_INT 42
15395: PUSH
15396: LD_INT 24
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: IN
15404: IFFALSE 15425
// points := [ 25 , 5 , 3 ] ;
15406: LD_ADDR_VAR 0 9
15410: PUSH
15411: LD_INT 25
15413: PUSH
15414: LD_INT 5
15416: PUSH
15417: LD_INT 3
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15425: LD_VAR 0 6
15429: PPUSH
15430: CALL_OW 264
15434: PUSH
15435: LD_INT 4
15437: PUSH
15438: LD_INT 43
15440: PUSH
15441: LD_INT 25
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: LIST
15448: IN
15449: IFFALSE 15470
// points := [ 40 , 15 , 5 ] ;
15451: LD_ADDR_VAR 0 9
15455: PUSH
15456: LD_INT 40
15458: PUSH
15459: LD_INT 15
15461: PUSH
15462: LD_INT 5
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: LIST
15469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15470: LD_VAR 0 6
15474: PPUSH
15475: CALL_OW 264
15479: PUSH
15480: LD_INT 3
15482: PUSH
15483: LD_INT 23
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: IN
15490: IFFALSE 15511
// points := [ 7 , 25 , 8 ] ;
15492: LD_ADDR_VAR 0 9
15496: PUSH
15497: LD_INT 7
15499: PUSH
15500: LD_INT 25
15502: PUSH
15503: LD_INT 8
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15511: LD_VAR 0 6
15515: PPUSH
15516: CALL_OW 264
15520: PUSH
15521: LD_INT 5
15523: PUSH
15524: LD_INT 27
15526: PUSH
15527: LD_INT 44
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: LIST
15534: IN
15535: IFFALSE 15556
// points := [ 14 , 50 , 16 ] ;
15537: LD_ADDR_VAR 0 9
15541: PUSH
15542: LD_INT 14
15544: PUSH
15545: LD_INT 50
15547: PUSH
15548: LD_INT 16
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: LIST
15555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15556: LD_VAR 0 6
15560: PPUSH
15561: CALL_OW 264
15565: PUSH
15566: LD_INT 6
15568: PUSH
15569: LD_INT 46
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: IN
15576: IFFALSE 15597
// points := [ 32 , 120 , 70 ] ;
15578: LD_ADDR_VAR 0 9
15582: PUSH
15583: LD_INT 32
15585: PUSH
15586: LD_INT 120
15588: PUSH
15589: LD_INT 70
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
15597: LD_VAR 0 6
15601: PPUSH
15602: CALL_OW 264
15606: PUSH
15607: LD_INT 7
15609: PUSH
15610: LD_INT 28
15612: PUSH
15613: LD_INT 45
15615: PUSH
15616: LD_EXP 71
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: IN
15627: IFFALSE 15648
// points := [ 35 , 20 , 45 ] ;
15629: LD_ADDR_VAR 0 9
15633: PUSH
15634: LD_INT 35
15636: PUSH
15637: LD_INT 20
15639: PUSH
15640: LD_INT 45
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: LIST
15647: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
15648: LD_VAR 0 6
15652: PPUSH
15653: CALL_OW 264
15657: PUSH
15658: LD_INT 47
15660: PUSH
15661: EMPTY
15662: LIST
15663: IN
15664: IFFALSE 15685
// points := [ 67 , 45 , 75 ] ;
15666: LD_ADDR_VAR 0 9
15670: PUSH
15671: LD_INT 67
15673: PUSH
15674: LD_INT 45
15676: PUSH
15677: LD_INT 75
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: LIST
15684: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
15685: LD_VAR 0 6
15689: PPUSH
15690: CALL_OW 264
15694: PUSH
15695: LD_INT 26
15697: PUSH
15698: EMPTY
15699: LIST
15700: IN
15701: IFFALSE 15722
// points := [ 120 , 30 , 80 ] ;
15703: LD_ADDR_VAR 0 9
15707: PUSH
15708: LD_INT 120
15710: PUSH
15711: LD_INT 30
15713: PUSH
15714: LD_INT 80
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: LIST
15721: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
15722: LD_VAR 0 6
15726: PPUSH
15727: CALL_OW 264
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: EMPTY
15736: LIST
15737: IN
15738: IFFALSE 15759
// points := [ 40 , 1 , 1 ] ;
15740: LD_ADDR_VAR 0 9
15744: PUSH
15745: LD_INT 40
15747: PUSH
15748: LD_INT 1
15750: PUSH
15751: LD_INT 1
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
15759: LD_VAR 0 6
15763: PPUSH
15764: CALL_OW 264
15768: PUSH
15769: LD_INT 29
15771: PUSH
15772: EMPTY
15773: LIST
15774: IN
15775: IFFALSE 15796
// points := [ 70 , 200 , 400 ] ;
15777: LD_ADDR_VAR 0 9
15781: PUSH
15782: LD_INT 70
15784: PUSH
15785: LD_INT 200
15787: PUSH
15788: LD_INT 400
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: LIST
15795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
15796: LD_VAR 0 6
15800: PPUSH
15801: CALL_OW 264
15805: PUSH
15806: LD_INT 14
15808: PUSH
15809: LD_INT 53
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: IN
15816: IFFALSE 15837
// points := [ 40 , 10 , 20 ] ;
15818: LD_ADDR_VAR 0 9
15822: PUSH
15823: LD_INT 40
15825: PUSH
15826: LD_INT 10
15828: PUSH
15829: LD_INT 20
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
15837: LD_VAR 0 6
15841: PPUSH
15842: CALL_OW 264
15846: PUSH
15847: LD_INT 9
15849: PUSH
15850: EMPTY
15851: LIST
15852: IN
15853: IFFALSE 15874
// points := [ 5 , 70 , 20 ] ;
15855: LD_ADDR_VAR 0 9
15859: PUSH
15860: LD_INT 5
15862: PUSH
15863: LD_INT 70
15865: PUSH
15866: LD_INT 20
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: LIST
15873: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
15874: LD_VAR 0 6
15878: PPUSH
15879: CALL_OW 264
15883: PUSH
15884: LD_INT 10
15886: PUSH
15887: EMPTY
15888: LIST
15889: IN
15890: IFFALSE 15911
// points := [ 35 , 110 , 70 ] ;
15892: LD_ADDR_VAR 0 9
15896: PUSH
15897: LD_INT 35
15899: PUSH
15900: LD_INT 110
15902: PUSH
15903: LD_INT 70
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: LIST
15910: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
15911: LD_VAR 0 6
15915: PPUSH
15916: CALL_OW 265
15920: PUSH
15921: LD_INT 25
15923: EQUAL
15924: IFFALSE 15945
// points := [ 80 , 65 , 100 ] ;
15926: LD_ADDR_VAR 0 9
15930: PUSH
15931: LD_INT 80
15933: PUSH
15934: LD_INT 65
15936: PUSH
15937: LD_INT 100
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: LIST
15944: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
15945: LD_VAR 0 6
15949: PPUSH
15950: CALL_OW 263
15954: PUSH
15955: LD_INT 1
15957: EQUAL
15958: IFFALSE 15993
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
15960: LD_ADDR_VAR 0 10
15964: PUSH
15965: LD_VAR 0 10
15969: PUSH
15970: LD_VAR 0 6
15974: PPUSH
15975: CALL_OW 311
15979: PPUSH
15980: LD_INT 3
15982: PPUSH
15983: CALL_OW 259
15987: PUSH
15988: LD_INT 4
15990: MUL
15991: MUL
15992: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
15993: LD_VAR 0 6
15997: PPUSH
15998: CALL_OW 263
16002: PUSH
16003: LD_INT 2
16005: EQUAL
16006: IFFALSE 16057
// begin j := IsControledBy ( i ) ;
16008: LD_ADDR_VAR 0 7
16012: PUSH
16013: LD_VAR 0 6
16017: PPUSH
16018: CALL_OW 312
16022: ST_TO_ADDR
// if j then
16023: LD_VAR 0 7
16027: IFFALSE 16057
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16029: LD_ADDR_VAR 0 10
16033: PUSH
16034: LD_VAR 0 10
16038: PUSH
16039: LD_VAR 0 7
16043: PPUSH
16044: LD_INT 3
16046: PPUSH
16047: CALL_OW 259
16051: PUSH
16052: LD_INT 3
16054: MUL
16055: MUL
16056: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16057: LD_VAR 0 6
16061: PPUSH
16062: CALL_OW 264
16066: PUSH
16067: LD_INT 5
16069: PUSH
16070: LD_INT 6
16072: PUSH
16073: LD_INT 46
16075: PUSH
16076: LD_INT 44
16078: PUSH
16079: LD_INT 47
16081: PUSH
16082: LD_INT 45
16084: PUSH
16085: LD_INT 28
16087: PUSH
16088: LD_INT 7
16090: PUSH
16091: LD_INT 27
16093: PUSH
16094: LD_INT 29
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: IN
16109: PUSH
16110: LD_VAR 0 1
16114: PPUSH
16115: LD_INT 52
16117: PPUSH
16118: CALL_OW 321
16122: PUSH
16123: LD_INT 2
16125: EQUAL
16126: AND
16127: IFFALSE 16144
// bpoints := bpoints * 1.2 ;
16129: LD_ADDR_VAR 0 10
16133: PUSH
16134: LD_VAR 0 10
16138: PUSH
16139: LD_REAL  1.20000000000000E+0000
16142: MUL
16143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16144: LD_VAR 0 6
16148: PPUSH
16149: CALL_OW 264
16153: PUSH
16154: LD_INT 6
16156: PUSH
16157: LD_INT 46
16159: PUSH
16160: LD_INT 47
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: IN
16168: IFFALSE 16185
// bpoints := bpoints * 1.2 ;
16170: LD_ADDR_VAR 0 10
16174: PUSH
16175: LD_VAR 0 10
16179: PUSH
16180: LD_REAL  1.20000000000000E+0000
16183: MUL
16184: ST_TO_ADDR
// end ; unit_building :
16185: GO 16199
16187: LD_INT 3
16189: DOUBLE
16190: EQUAL
16191: IFTRUE 16195
16193: GO 16198
16195: POP
// ; end ;
16196: GO 16199
16198: POP
// for j = 1 to 3 do
16199: LD_ADDR_VAR 0 7
16203: PUSH
16204: DOUBLE
16205: LD_INT 1
16207: DEC
16208: ST_TO_ADDR
16209: LD_INT 3
16211: PUSH
16212: FOR_TO
16213: IFFALSE 16266
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16215: LD_ADDR_VAR 0 5
16219: PUSH
16220: LD_VAR 0 5
16224: PPUSH
16225: LD_VAR 0 7
16229: PPUSH
16230: LD_VAR 0 5
16234: PUSH
16235: LD_VAR 0 7
16239: ARRAY
16240: PUSH
16241: LD_VAR 0 9
16245: PUSH
16246: LD_VAR 0 7
16250: ARRAY
16251: PUSH
16252: LD_VAR 0 10
16256: MUL
16257: PLUS
16258: PPUSH
16259: CALL_OW 1
16263: ST_TO_ADDR
16264: GO 16212
16266: POP
16267: POP
// end ;
16268: GO 14745
16270: POP
16271: POP
// result := Replace ( result , 4 , tmp ) ;
16272: LD_ADDR_VAR 0 5
16276: PUSH
16277: LD_VAR 0 5
16281: PPUSH
16282: LD_INT 4
16284: PPUSH
16285: LD_VAR 0 8
16289: PPUSH
16290: CALL_OW 1
16294: ST_TO_ADDR
// end ;
16295: LD_VAR 0 5
16299: RET
// export function DangerAtRange ( unit , range ) ; begin
16300: LD_INT 0
16302: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16303: LD_ADDR_VAR 0 3
16307: PUSH
16308: LD_VAR 0 1
16312: PPUSH
16313: CALL_OW 255
16317: PPUSH
16318: LD_VAR 0 1
16322: PPUSH
16323: CALL_OW 250
16327: PPUSH
16328: LD_VAR 0 1
16332: PPUSH
16333: CALL_OW 251
16337: PPUSH
16338: LD_VAR 0 2
16342: PPUSH
16343: CALL 14597 0 4
16347: ST_TO_ADDR
// end ;
16348: LD_VAR 0 3
16352: RET
// export function DangerInArea ( side , area ) ; begin
16353: LD_INT 0
16355: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16356: LD_ADDR_VAR 0 3
16360: PUSH
16361: LD_VAR 0 2
16365: PPUSH
16366: LD_INT 81
16368: PUSH
16369: LD_VAR 0 1
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: PPUSH
16378: CALL_OW 70
16382: ST_TO_ADDR
// end ;
16383: LD_VAR 0 3
16387: RET
// export function IsExtension ( b ) ; begin
16388: LD_INT 0
16390: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16391: LD_ADDR_VAR 0 2
16395: PUSH
16396: LD_VAR 0 1
16400: PUSH
16401: LD_INT 23
16403: PUSH
16404: LD_INT 20
16406: PUSH
16407: LD_INT 22
16409: PUSH
16410: LD_INT 17
16412: PUSH
16413: LD_INT 24
16415: PUSH
16416: LD_INT 21
16418: PUSH
16419: LD_INT 19
16421: PUSH
16422: LD_INT 16
16424: PUSH
16425: LD_INT 25
16427: PUSH
16428: LD_INT 18
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: IN
16443: ST_TO_ADDR
// end ;
16444: LD_VAR 0 2
16448: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16449: LD_INT 0
16451: PPUSH
16452: PPUSH
16453: PPUSH
// result := [ ] ;
16454: LD_ADDR_VAR 0 4
16458: PUSH
16459: EMPTY
16460: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16461: LD_ADDR_VAR 0 5
16465: PUSH
16466: LD_VAR 0 2
16470: PPUSH
16471: LD_INT 21
16473: PUSH
16474: LD_INT 3
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PPUSH
16481: CALL_OW 70
16485: ST_TO_ADDR
// if not tmp then
16486: LD_VAR 0 5
16490: NOT
16491: IFFALSE 16495
// exit ;
16493: GO 16559
// if checkLink then
16495: LD_VAR 0 3
16499: IFFALSE 16549
// begin for i in tmp do
16501: LD_ADDR_VAR 0 6
16505: PUSH
16506: LD_VAR 0 5
16510: PUSH
16511: FOR_IN
16512: IFFALSE 16547
// if GetBase ( i ) <> base then
16514: LD_VAR 0 6
16518: PPUSH
16519: CALL_OW 274
16523: PUSH
16524: LD_VAR 0 1
16528: NONEQUAL
16529: IFFALSE 16545
// ComLinkToBase ( base , i ) ;
16531: LD_VAR 0 1
16535: PPUSH
16536: LD_VAR 0 6
16540: PPUSH
16541: CALL_OW 169
16545: GO 16511
16547: POP
16548: POP
// end ; result := tmp ;
16549: LD_ADDR_VAR 0 4
16553: PUSH
16554: LD_VAR 0 5
16558: ST_TO_ADDR
// end ;
16559: LD_VAR 0 4
16563: RET
// export function ComComplete ( units , b ) ; var i ; begin
16564: LD_INT 0
16566: PPUSH
16567: PPUSH
// if not units then
16568: LD_VAR 0 1
16572: NOT
16573: IFFALSE 16577
// exit ;
16575: GO 16667
// for i in units do
16577: LD_ADDR_VAR 0 4
16581: PUSH
16582: LD_VAR 0 1
16586: PUSH
16587: FOR_IN
16588: IFFALSE 16665
// if BuildingStatus ( b ) = bs_build then
16590: LD_VAR 0 2
16594: PPUSH
16595: CALL_OW 461
16599: PUSH
16600: LD_INT 1
16602: EQUAL
16603: IFFALSE 16663
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
16605: LD_VAR 0 4
16609: PPUSH
16610: LD_STRING h
16612: PUSH
16613: LD_VAR 0 2
16617: PPUSH
16618: CALL_OW 250
16622: PUSH
16623: LD_VAR 0 2
16627: PPUSH
16628: CALL_OW 251
16632: PUSH
16633: LD_VAR 0 2
16637: PUSH
16638: LD_INT 0
16640: PUSH
16641: LD_INT 0
16643: PUSH
16644: LD_INT 0
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: PPUSH
16659: CALL_OW 446
16663: GO 16587
16665: POP
16666: POP
// end ;
16667: LD_VAR 0 3
16671: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
16672: LD_INT 0
16674: PPUSH
16675: PPUSH
16676: PPUSH
16677: PPUSH
16678: PPUSH
16679: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
16680: LD_VAR 0 1
16684: NOT
16685: PUSH
16686: LD_VAR 0 1
16690: PPUSH
16691: CALL_OW 263
16695: PUSH
16696: LD_INT 2
16698: NONEQUAL
16699: OR
16700: IFFALSE 16704
// exit ;
16702: GO 17020
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
16704: LD_ADDR_VAR 0 6
16708: PUSH
16709: LD_INT 22
16711: PUSH
16712: LD_VAR 0 1
16716: PPUSH
16717: CALL_OW 255
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 2
16728: PUSH
16729: LD_INT 30
16731: PUSH
16732: LD_INT 36
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 34
16741: PUSH
16742: LD_INT 31
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: LIST
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PPUSH
16758: CALL_OW 69
16762: ST_TO_ADDR
// if not tmp then
16763: LD_VAR 0 6
16767: NOT
16768: IFFALSE 16772
// exit ;
16770: GO 17020
// result := [ ] ;
16772: LD_ADDR_VAR 0 2
16776: PUSH
16777: EMPTY
16778: ST_TO_ADDR
// for i in tmp do
16779: LD_ADDR_VAR 0 3
16783: PUSH
16784: LD_VAR 0 6
16788: PUSH
16789: FOR_IN
16790: IFFALSE 16861
// begin t := UnitsInside ( i ) ;
16792: LD_ADDR_VAR 0 4
16796: PUSH
16797: LD_VAR 0 3
16801: PPUSH
16802: CALL_OW 313
16806: ST_TO_ADDR
// if t then
16807: LD_VAR 0 4
16811: IFFALSE 16859
// for j in t do
16813: LD_ADDR_VAR 0 7
16817: PUSH
16818: LD_VAR 0 4
16822: PUSH
16823: FOR_IN
16824: IFFALSE 16857
// result := Replace ( result , result + 1 , j ) ;
16826: LD_ADDR_VAR 0 2
16830: PUSH
16831: LD_VAR 0 2
16835: PPUSH
16836: LD_VAR 0 2
16840: PUSH
16841: LD_INT 1
16843: PLUS
16844: PPUSH
16845: LD_VAR 0 7
16849: PPUSH
16850: CALL_OW 1
16854: ST_TO_ADDR
16855: GO 16823
16857: POP
16858: POP
// end ;
16859: GO 16789
16861: POP
16862: POP
// if not result then
16863: LD_VAR 0 2
16867: NOT
16868: IFFALSE 16872
// exit ;
16870: GO 17020
// mech := result [ 1 ] ;
16872: LD_ADDR_VAR 0 5
16876: PUSH
16877: LD_VAR 0 2
16881: PUSH
16882: LD_INT 1
16884: ARRAY
16885: ST_TO_ADDR
// if result > 1 then
16886: LD_VAR 0 2
16890: PUSH
16891: LD_INT 1
16893: GREATER
16894: IFFALSE 17006
// begin for i = 2 to result do
16896: LD_ADDR_VAR 0 3
16900: PUSH
16901: DOUBLE
16902: LD_INT 2
16904: DEC
16905: ST_TO_ADDR
16906: LD_VAR 0 2
16910: PUSH
16911: FOR_TO
16912: IFFALSE 17004
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
16914: LD_ADDR_VAR 0 4
16918: PUSH
16919: LD_VAR 0 2
16923: PUSH
16924: LD_VAR 0 3
16928: ARRAY
16929: PPUSH
16930: LD_INT 3
16932: PPUSH
16933: CALL_OW 259
16937: PUSH
16938: LD_VAR 0 2
16942: PUSH
16943: LD_VAR 0 3
16947: ARRAY
16948: PPUSH
16949: CALL_OW 432
16953: MINUS
16954: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
16955: LD_VAR 0 4
16959: PUSH
16960: LD_VAR 0 5
16964: PPUSH
16965: LD_INT 3
16967: PPUSH
16968: CALL_OW 259
16972: PUSH
16973: LD_VAR 0 5
16977: PPUSH
16978: CALL_OW 432
16982: MINUS
16983: GREATEREQUAL
16984: IFFALSE 17002
// mech := result [ i ] ;
16986: LD_ADDR_VAR 0 5
16990: PUSH
16991: LD_VAR 0 2
16995: PUSH
16996: LD_VAR 0 3
17000: ARRAY
17001: ST_TO_ADDR
// end ;
17002: GO 16911
17004: POP
17005: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17006: LD_VAR 0 1
17010: PPUSH
17011: LD_VAR 0 5
17015: PPUSH
17016: CALL_OW 135
// end ;
17020: LD_VAR 0 2
17024: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17025: LD_INT 0
17027: PPUSH
17028: PPUSH
17029: PPUSH
17030: PPUSH
17031: PPUSH
17032: PPUSH
17033: PPUSH
17034: PPUSH
17035: PPUSH
17036: PPUSH
17037: PPUSH
17038: PPUSH
17039: PPUSH
// result := [ ] ;
17040: LD_ADDR_VAR 0 7
17044: PUSH
17045: EMPTY
17046: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17047: LD_VAR 0 1
17051: PPUSH
17052: CALL_OW 266
17056: PUSH
17057: LD_INT 0
17059: PUSH
17060: LD_INT 1
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: IN
17067: NOT
17068: IFFALSE 17072
// exit ;
17070: GO 18706
// if name then
17072: LD_VAR 0 3
17076: IFFALSE 17092
// SetBName ( base_dep , name ) ;
17078: LD_VAR 0 1
17082: PPUSH
17083: LD_VAR 0 3
17087: PPUSH
17088: CALL_OW 500
// base := GetBase ( base_dep ) ;
17092: LD_ADDR_VAR 0 15
17096: PUSH
17097: LD_VAR 0 1
17101: PPUSH
17102: CALL_OW 274
17106: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17107: LD_ADDR_VAR 0 16
17111: PUSH
17112: LD_VAR 0 1
17116: PPUSH
17117: CALL_OW 255
17121: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17122: LD_ADDR_VAR 0 17
17126: PUSH
17127: LD_VAR 0 1
17131: PPUSH
17132: CALL_OW 248
17136: ST_TO_ADDR
// if sources then
17137: LD_VAR 0 5
17141: IFFALSE 17188
// for i = 1 to 3 do
17143: LD_ADDR_VAR 0 8
17147: PUSH
17148: DOUBLE
17149: LD_INT 1
17151: DEC
17152: ST_TO_ADDR
17153: LD_INT 3
17155: PUSH
17156: FOR_TO
17157: IFFALSE 17186
// AddResourceType ( base , i , sources [ i ] ) ;
17159: LD_VAR 0 15
17163: PPUSH
17164: LD_VAR 0 8
17168: PPUSH
17169: LD_VAR 0 5
17173: PUSH
17174: LD_VAR 0 8
17178: ARRAY
17179: PPUSH
17180: CALL_OW 276
17184: GO 17156
17186: POP
17187: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17188: LD_ADDR_VAR 0 18
17192: PUSH
17193: LD_VAR 0 15
17197: PPUSH
17198: LD_VAR 0 2
17202: PPUSH
17203: LD_INT 1
17205: PPUSH
17206: CALL 16449 0 3
17210: ST_TO_ADDR
// InitHc ;
17211: CALL_OW 19
// InitUc ;
17215: CALL_OW 18
// uc_side := side ;
17219: LD_ADDR_OWVAR 20
17223: PUSH
17224: LD_VAR 0 16
17228: ST_TO_ADDR
// uc_nation := nation ;
17229: LD_ADDR_OWVAR 21
17233: PUSH
17234: LD_VAR 0 17
17238: ST_TO_ADDR
// if buildings then
17239: LD_VAR 0 18
17243: IFFALSE 18565
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17245: LD_ADDR_VAR 0 19
17249: PUSH
17250: LD_VAR 0 18
17254: PPUSH
17255: LD_INT 2
17257: PUSH
17258: LD_INT 30
17260: PUSH
17261: LD_INT 29
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 30
17270: PUSH
17271: LD_INT 30
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: LIST
17282: PPUSH
17283: CALL_OW 72
17287: ST_TO_ADDR
// if tmp then
17288: LD_VAR 0 19
17292: IFFALSE 17340
// for i in tmp do
17294: LD_ADDR_VAR 0 8
17298: PUSH
17299: LD_VAR 0 19
17303: PUSH
17304: FOR_IN
17305: IFFALSE 17338
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17307: LD_VAR 0 8
17311: PPUSH
17312: CALL_OW 250
17316: PPUSH
17317: LD_VAR 0 8
17321: PPUSH
17322: CALL_OW 251
17326: PPUSH
17327: LD_VAR 0 16
17331: PPUSH
17332: CALL_OW 441
17336: GO 17304
17338: POP
17339: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17340: LD_VAR 0 18
17344: PPUSH
17345: LD_INT 2
17347: PUSH
17348: LD_INT 30
17350: PUSH
17351: LD_INT 32
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: PUSH
17358: LD_INT 30
17360: PUSH
17361: LD_INT 33
17363: PUSH
17364: EMPTY
17365: LIST
17366: LIST
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: LIST
17372: PPUSH
17373: CALL_OW 72
17377: IFFALSE 17465
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17379: LD_ADDR_VAR 0 8
17383: PUSH
17384: LD_VAR 0 18
17388: PPUSH
17389: LD_INT 2
17391: PUSH
17392: LD_INT 30
17394: PUSH
17395: LD_INT 32
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 30
17404: PUSH
17405: LD_INT 33
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: LIST
17416: PPUSH
17417: CALL_OW 72
17421: PUSH
17422: FOR_IN
17423: IFFALSE 17463
// begin if not GetBWeapon ( i ) then
17425: LD_VAR 0 8
17429: PPUSH
17430: CALL_OW 269
17434: NOT
17435: IFFALSE 17461
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17437: LD_VAR 0 8
17441: PPUSH
17442: LD_VAR 0 8
17446: PPUSH
17447: LD_VAR 0 2
17451: PPUSH
17452: CALL 18711 0 2
17456: PPUSH
17457: CALL_OW 431
// end ;
17461: GO 17422
17463: POP
17464: POP
// end ; for i = 1 to personel do
17465: LD_ADDR_VAR 0 8
17469: PUSH
17470: DOUBLE
17471: LD_INT 1
17473: DEC
17474: ST_TO_ADDR
17475: LD_VAR 0 6
17479: PUSH
17480: FOR_TO
17481: IFFALSE 18545
// begin if i > 4 then
17483: LD_VAR 0 8
17487: PUSH
17488: LD_INT 4
17490: GREATER
17491: IFFALSE 17495
// break ;
17493: GO 18545
// case i of 1 :
17495: LD_VAR 0 8
17499: PUSH
17500: LD_INT 1
17502: DOUBLE
17503: EQUAL
17504: IFTRUE 17508
17506: GO 17588
17508: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17509: LD_ADDR_VAR 0 12
17513: PUSH
17514: LD_VAR 0 18
17518: PPUSH
17519: LD_INT 22
17521: PUSH
17522: LD_VAR 0 16
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PUSH
17531: LD_INT 58
17533: PUSH
17534: EMPTY
17535: LIST
17536: PUSH
17537: LD_INT 2
17539: PUSH
17540: LD_INT 30
17542: PUSH
17543: LD_INT 32
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 30
17552: PUSH
17553: LD_INT 4
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 30
17562: PUSH
17563: LD_INT 5
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: PPUSH
17581: CALL_OW 72
17585: ST_TO_ADDR
17586: GO 17810
17588: LD_INT 2
17590: DOUBLE
17591: EQUAL
17592: IFTRUE 17596
17594: GO 17658
17596: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
17597: LD_ADDR_VAR 0 12
17601: PUSH
17602: LD_VAR 0 18
17606: PPUSH
17607: LD_INT 22
17609: PUSH
17610: LD_VAR 0 16
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 2
17621: PUSH
17622: LD_INT 30
17624: PUSH
17625: LD_INT 0
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 30
17634: PUSH
17635: LD_INT 1
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: LIST
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PPUSH
17651: CALL_OW 72
17655: ST_TO_ADDR
17656: GO 17810
17658: LD_INT 3
17660: DOUBLE
17661: EQUAL
17662: IFTRUE 17666
17664: GO 17728
17666: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
17667: LD_ADDR_VAR 0 12
17671: PUSH
17672: LD_VAR 0 18
17676: PPUSH
17677: LD_INT 22
17679: PUSH
17680: LD_VAR 0 16
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 2
17691: PUSH
17692: LD_INT 30
17694: PUSH
17695: LD_INT 2
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: PUSH
17702: LD_INT 30
17704: PUSH
17705: LD_INT 3
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 72
17725: ST_TO_ADDR
17726: GO 17810
17728: LD_INT 4
17730: DOUBLE
17731: EQUAL
17732: IFTRUE 17736
17734: GO 17809
17736: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
17737: LD_ADDR_VAR 0 12
17741: PUSH
17742: LD_VAR 0 18
17746: PPUSH
17747: LD_INT 22
17749: PUSH
17750: LD_VAR 0 16
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 2
17761: PUSH
17762: LD_INT 30
17764: PUSH
17765: LD_INT 6
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 30
17774: PUSH
17775: LD_INT 7
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 30
17784: PUSH
17785: LD_INT 8
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 72
17806: ST_TO_ADDR
17807: GO 17810
17809: POP
// if i = 1 then
17810: LD_VAR 0 8
17814: PUSH
17815: LD_INT 1
17817: EQUAL
17818: IFFALSE 17929
// begin tmp := [ ] ;
17820: LD_ADDR_VAR 0 19
17824: PUSH
17825: EMPTY
17826: ST_TO_ADDR
// for j in f do
17827: LD_ADDR_VAR 0 9
17831: PUSH
17832: LD_VAR 0 12
17836: PUSH
17837: FOR_IN
17838: IFFALSE 17911
// if GetBType ( j ) = b_bunker then
17840: LD_VAR 0 9
17844: PPUSH
17845: CALL_OW 266
17849: PUSH
17850: LD_INT 32
17852: EQUAL
17853: IFFALSE 17880
// tmp := Insert ( tmp , 1 , j ) else
17855: LD_ADDR_VAR 0 19
17859: PUSH
17860: LD_VAR 0 19
17864: PPUSH
17865: LD_INT 1
17867: PPUSH
17868: LD_VAR 0 9
17872: PPUSH
17873: CALL_OW 2
17877: ST_TO_ADDR
17878: GO 17909
// tmp := Insert ( tmp , tmp + 1 , j ) ;
17880: LD_ADDR_VAR 0 19
17884: PUSH
17885: LD_VAR 0 19
17889: PPUSH
17890: LD_VAR 0 19
17894: PUSH
17895: LD_INT 1
17897: PLUS
17898: PPUSH
17899: LD_VAR 0 9
17903: PPUSH
17904: CALL_OW 2
17908: ST_TO_ADDR
17909: GO 17837
17911: POP
17912: POP
// if tmp then
17913: LD_VAR 0 19
17917: IFFALSE 17929
// f := tmp ;
17919: LD_ADDR_VAR 0 12
17923: PUSH
17924: LD_VAR 0 19
17928: ST_TO_ADDR
// end ; x := personel [ i ] ;
17929: LD_ADDR_VAR 0 13
17933: PUSH
17934: LD_VAR 0 6
17938: PUSH
17939: LD_VAR 0 8
17943: ARRAY
17944: ST_TO_ADDR
// if x = - 1 then
17945: LD_VAR 0 13
17949: PUSH
17950: LD_INT 1
17952: NEG
17953: EQUAL
17954: IFFALSE 18163
// begin for j in f do
17956: LD_ADDR_VAR 0 9
17960: PUSH
17961: LD_VAR 0 12
17965: PUSH
17966: FOR_IN
17967: IFFALSE 18159
// repeat InitHc ;
17969: CALL_OW 19
// if GetBType ( j ) = b_barracks then
17973: LD_VAR 0 9
17977: PPUSH
17978: CALL_OW 266
17982: PUSH
17983: LD_INT 5
17985: EQUAL
17986: IFFALSE 18056
// begin if UnitsInside ( j ) < 3 then
17988: LD_VAR 0 9
17992: PPUSH
17993: CALL_OW 313
17997: PUSH
17998: LD_INT 3
18000: LESS
18001: IFFALSE 18037
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18003: LD_INT 0
18005: PPUSH
18006: LD_INT 5
18008: PUSH
18009: LD_INT 8
18011: PUSH
18012: LD_INT 9
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: PUSH
18020: LD_VAR 0 17
18024: ARRAY
18025: PPUSH
18026: LD_VAR 0 4
18030: PPUSH
18031: CALL_OW 380
18035: GO 18054
// PrepareHuman ( false , i , skill ) ;
18037: LD_INT 0
18039: PPUSH
18040: LD_VAR 0 8
18044: PPUSH
18045: LD_VAR 0 4
18049: PPUSH
18050: CALL_OW 380
// end else
18054: GO 18073
// PrepareHuman ( false , i , skill ) ;
18056: LD_INT 0
18058: PPUSH
18059: LD_VAR 0 8
18063: PPUSH
18064: LD_VAR 0 4
18068: PPUSH
18069: CALL_OW 380
// un := CreateHuman ;
18073: LD_ADDR_VAR 0 14
18077: PUSH
18078: CALL_OW 44
18082: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18083: LD_ADDR_VAR 0 7
18087: PUSH
18088: LD_VAR 0 7
18092: PPUSH
18093: LD_INT 1
18095: PPUSH
18096: LD_VAR 0 14
18100: PPUSH
18101: CALL_OW 2
18105: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18106: LD_VAR 0 14
18110: PPUSH
18111: LD_VAR 0 9
18115: PPUSH
18116: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18120: LD_VAR 0 9
18124: PPUSH
18125: CALL_OW 313
18129: PUSH
18130: LD_INT 6
18132: EQUAL
18133: PUSH
18134: LD_VAR 0 9
18138: PPUSH
18139: CALL_OW 266
18143: PUSH
18144: LD_INT 32
18146: PUSH
18147: LD_INT 31
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: IN
18154: OR
18155: IFFALSE 17969
18157: GO 17966
18159: POP
18160: POP
// end else
18161: GO 18543
// for j = 1 to x do
18163: LD_ADDR_VAR 0 9
18167: PUSH
18168: DOUBLE
18169: LD_INT 1
18171: DEC
18172: ST_TO_ADDR
18173: LD_VAR 0 13
18177: PUSH
18178: FOR_TO
18179: IFFALSE 18541
// begin InitHc ;
18181: CALL_OW 19
// if not f then
18185: LD_VAR 0 12
18189: NOT
18190: IFFALSE 18279
// begin PrepareHuman ( false , i , skill ) ;
18192: LD_INT 0
18194: PPUSH
18195: LD_VAR 0 8
18199: PPUSH
18200: LD_VAR 0 4
18204: PPUSH
18205: CALL_OW 380
// un := CreateHuman ;
18209: LD_ADDR_VAR 0 14
18213: PUSH
18214: CALL_OW 44
18218: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18219: LD_ADDR_VAR 0 7
18223: PUSH
18224: LD_VAR 0 7
18228: PPUSH
18229: LD_INT 1
18231: PPUSH
18232: LD_VAR 0 14
18236: PPUSH
18237: CALL_OW 2
18241: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18242: LD_VAR 0 14
18246: PPUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 250
18256: PPUSH
18257: LD_VAR 0 1
18261: PPUSH
18262: CALL_OW 251
18266: PPUSH
18267: LD_INT 10
18269: PPUSH
18270: LD_INT 0
18272: PPUSH
18273: CALL_OW 50
// continue ;
18277: GO 18178
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18279: LD_VAR 0 12
18283: PUSH
18284: LD_INT 1
18286: ARRAY
18287: PPUSH
18288: CALL_OW 313
18292: PUSH
18293: LD_VAR 0 12
18297: PUSH
18298: LD_INT 1
18300: ARRAY
18301: PPUSH
18302: CALL_OW 266
18306: PUSH
18307: LD_INT 32
18309: PUSH
18310: LD_INT 31
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: IN
18317: AND
18318: PUSH
18319: LD_VAR 0 12
18323: PUSH
18324: LD_INT 1
18326: ARRAY
18327: PPUSH
18328: CALL_OW 313
18332: PUSH
18333: LD_INT 6
18335: EQUAL
18336: OR
18337: IFFALSE 18357
// f := Delete ( f , 1 ) ;
18339: LD_ADDR_VAR 0 12
18343: PUSH
18344: LD_VAR 0 12
18348: PPUSH
18349: LD_INT 1
18351: PPUSH
18352: CALL_OW 3
18356: ST_TO_ADDR
// if not f then
18357: LD_VAR 0 12
18361: NOT
18362: IFFALSE 18380
// begin x := x + 2 ;
18364: LD_ADDR_VAR 0 13
18368: PUSH
18369: LD_VAR 0 13
18373: PUSH
18374: LD_INT 2
18376: PLUS
18377: ST_TO_ADDR
// continue ;
18378: GO 18178
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18380: LD_VAR 0 12
18384: PUSH
18385: LD_INT 1
18387: ARRAY
18388: PPUSH
18389: CALL_OW 266
18393: PUSH
18394: LD_INT 5
18396: EQUAL
18397: IFFALSE 18471
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18399: LD_VAR 0 12
18403: PUSH
18404: LD_INT 1
18406: ARRAY
18407: PPUSH
18408: CALL_OW 313
18412: PUSH
18413: LD_INT 3
18415: LESS
18416: IFFALSE 18452
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18418: LD_INT 0
18420: PPUSH
18421: LD_INT 5
18423: PUSH
18424: LD_INT 8
18426: PUSH
18427: LD_INT 9
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: LIST
18434: PUSH
18435: LD_VAR 0 17
18439: ARRAY
18440: PPUSH
18441: LD_VAR 0 4
18445: PPUSH
18446: CALL_OW 380
18450: GO 18469
// PrepareHuman ( false , i , skill ) ;
18452: LD_INT 0
18454: PPUSH
18455: LD_VAR 0 8
18459: PPUSH
18460: LD_VAR 0 4
18464: PPUSH
18465: CALL_OW 380
// end else
18469: GO 18488
// PrepareHuman ( false , i , skill ) ;
18471: LD_INT 0
18473: PPUSH
18474: LD_VAR 0 8
18478: PPUSH
18479: LD_VAR 0 4
18483: PPUSH
18484: CALL_OW 380
// un := CreateHuman ;
18488: LD_ADDR_VAR 0 14
18492: PUSH
18493: CALL_OW 44
18497: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18498: LD_ADDR_VAR 0 7
18502: PUSH
18503: LD_VAR 0 7
18507: PPUSH
18508: LD_INT 1
18510: PPUSH
18511: LD_VAR 0 14
18515: PPUSH
18516: CALL_OW 2
18520: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18521: LD_VAR 0 14
18525: PPUSH
18526: LD_VAR 0 12
18530: PUSH
18531: LD_INT 1
18533: ARRAY
18534: PPUSH
18535: CALL_OW 52
// end ;
18539: GO 18178
18541: POP
18542: POP
// end ;
18543: GO 17480
18545: POP
18546: POP
// result := result ^ buildings ;
18547: LD_ADDR_VAR 0 7
18551: PUSH
18552: LD_VAR 0 7
18556: PUSH
18557: LD_VAR 0 18
18561: ADD
18562: ST_TO_ADDR
// end else
18563: GO 18706
// begin for i = 1 to personel do
18565: LD_ADDR_VAR 0 8
18569: PUSH
18570: DOUBLE
18571: LD_INT 1
18573: DEC
18574: ST_TO_ADDR
18575: LD_VAR 0 6
18579: PUSH
18580: FOR_TO
18581: IFFALSE 18704
// begin if i > 4 then
18583: LD_VAR 0 8
18587: PUSH
18588: LD_INT 4
18590: GREATER
18591: IFFALSE 18595
// break ;
18593: GO 18704
// x := personel [ i ] ;
18595: LD_ADDR_VAR 0 13
18599: PUSH
18600: LD_VAR 0 6
18604: PUSH
18605: LD_VAR 0 8
18609: ARRAY
18610: ST_TO_ADDR
// if x = - 1 then
18611: LD_VAR 0 13
18615: PUSH
18616: LD_INT 1
18618: NEG
18619: EQUAL
18620: IFFALSE 18624
// continue ;
18622: GO 18580
// PrepareHuman ( false , i , skill ) ;
18624: LD_INT 0
18626: PPUSH
18627: LD_VAR 0 8
18631: PPUSH
18632: LD_VAR 0 4
18636: PPUSH
18637: CALL_OW 380
// un := CreateHuman ;
18641: LD_ADDR_VAR 0 14
18645: PUSH
18646: CALL_OW 44
18650: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18651: LD_VAR 0 14
18655: PPUSH
18656: LD_VAR 0 1
18660: PPUSH
18661: CALL_OW 250
18665: PPUSH
18666: LD_VAR 0 1
18670: PPUSH
18671: CALL_OW 251
18675: PPUSH
18676: LD_INT 10
18678: PPUSH
18679: LD_INT 0
18681: PPUSH
18682: CALL_OW 50
// result := result ^ un ;
18686: LD_ADDR_VAR 0 7
18690: PUSH
18691: LD_VAR 0 7
18695: PUSH
18696: LD_VAR 0 14
18700: ADD
18701: ST_TO_ADDR
// end ;
18702: GO 18580
18704: POP
18705: POP
// end ; end ;
18706: LD_VAR 0 7
18710: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
18711: LD_INT 0
18713: PPUSH
18714: PPUSH
18715: PPUSH
18716: PPUSH
18717: PPUSH
18718: PPUSH
18719: PPUSH
18720: PPUSH
18721: PPUSH
18722: PPUSH
18723: PPUSH
18724: PPUSH
18725: PPUSH
18726: PPUSH
18727: PPUSH
18728: PPUSH
// result := false ;
18729: LD_ADDR_VAR 0 3
18733: PUSH
18734: LD_INT 0
18736: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
18737: LD_VAR 0 1
18741: NOT
18742: PUSH
18743: LD_VAR 0 1
18747: PPUSH
18748: CALL_OW 266
18752: PUSH
18753: LD_INT 32
18755: PUSH
18756: LD_INT 33
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: IN
18763: NOT
18764: OR
18765: IFFALSE 18769
// exit ;
18767: GO 19878
// nat := GetNation ( tower ) ;
18769: LD_ADDR_VAR 0 12
18773: PUSH
18774: LD_VAR 0 1
18778: PPUSH
18779: CALL_OW 248
18783: ST_TO_ADDR
// side := GetSide ( tower ) ;
18784: LD_ADDR_VAR 0 16
18788: PUSH
18789: LD_VAR 0 1
18793: PPUSH
18794: CALL_OW 255
18798: ST_TO_ADDR
// x := GetX ( tower ) ;
18799: LD_ADDR_VAR 0 10
18803: PUSH
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 250
18813: ST_TO_ADDR
// y := GetY ( tower ) ;
18814: LD_ADDR_VAR 0 11
18818: PUSH
18819: LD_VAR 0 1
18823: PPUSH
18824: CALL_OW 251
18828: ST_TO_ADDR
// if not x or not y then
18829: LD_VAR 0 10
18833: NOT
18834: PUSH
18835: LD_VAR 0 11
18839: NOT
18840: OR
18841: IFFALSE 18845
// exit ;
18843: GO 19878
// weapon := 0 ;
18845: LD_ADDR_VAR 0 18
18849: PUSH
18850: LD_INT 0
18852: ST_TO_ADDR
// fac_list := [ ] ;
18853: LD_ADDR_VAR 0 17
18857: PUSH
18858: EMPTY
18859: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
18860: LD_ADDR_VAR 0 6
18864: PUSH
18865: LD_VAR 0 1
18869: PPUSH
18870: CALL_OW 274
18874: PPUSH
18875: LD_VAR 0 2
18879: PPUSH
18880: LD_INT 0
18882: PPUSH
18883: CALL 16449 0 3
18887: PPUSH
18888: LD_INT 30
18890: PUSH
18891: LD_INT 3
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PPUSH
18898: CALL_OW 72
18902: ST_TO_ADDR
// if not factories then
18903: LD_VAR 0 6
18907: NOT
18908: IFFALSE 18912
// exit ;
18910: GO 19878
// for i in factories do
18912: LD_ADDR_VAR 0 8
18916: PUSH
18917: LD_VAR 0 6
18921: PUSH
18922: FOR_IN
18923: IFFALSE 18948
// fac_list := fac_list union AvailableWeaponList ( i ) ;
18925: LD_ADDR_VAR 0 17
18929: PUSH
18930: LD_VAR 0 17
18934: PUSH
18935: LD_VAR 0 8
18939: PPUSH
18940: CALL_OW 478
18944: UNION
18945: ST_TO_ADDR
18946: GO 18922
18948: POP
18949: POP
// if not fac_list then
18950: LD_VAR 0 17
18954: NOT
18955: IFFALSE 18959
// exit ;
18957: GO 19878
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
18959: LD_ADDR_VAR 0 5
18963: PUSH
18964: LD_INT 4
18966: PUSH
18967: LD_INT 5
18969: PUSH
18970: LD_INT 9
18972: PUSH
18973: LD_INT 10
18975: PUSH
18976: LD_INT 6
18978: PUSH
18979: LD_INT 7
18981: PUSH
18982: LD_INT 11
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 27
18996: PUSH
18997: LD_INT 28
18999: PUSH
19000: LD_INT 26
19002: PUSH
19003: LD_INT 30
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 43
19014: PUSH
19015: LD_INT 44
19017: PUSH
19018: LD_INT 46
19020: PUSH
19021: LD_INT 45
19023: PUSH
19024: LD_INT 47
19026: PUSH
19027: LD_INT 49
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: PUSH
19043: LD_VAR 0 12
19047: ARRAY
19048: ST_TO_ADDR
// list := list isect fac_list ;
19049: LD_ADDR_VAR 0 5
19053: PUSH
19054: LD_VAR 0 5
19058: PUSH
19059: LD_VAR 0 17
19063: ISECT
19064: ST_TO_ADDR
// if not list then
19065: LD_VAR 0 5
19069: NOT
19070: IFFALSE 19074
// exit ;
19072: GO 19878
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19074: LD_VAR 0 12
19078: PUSH
19079: LD_INT 3
19081: EQUAL
19082: PUSH
19083: LD_INT 49
19085: PUSH
19086: LD_VAR 0 5
19090: IN
19091: AND
19092: PUSH
19093: LD_INT 31
19095: PPUSH
19096: LD_VAR 0 16
19100: PPUSH
19101: CALL_OW 321
19105: PUSH
19106: LD_INT 2
19108: EQUAL
19109: AND
19110: IFFALSE 19170
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19112: LD_INT 22
19114: PUSH
19115: LD_VAR 0 16
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 35
19126: PUSH
19127: LD_INT 49
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 91
19136: PUSH
19137: LD_VAR 0 1
19141: PUSH
19142: LD_INT 10
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: PPUSH
19155: CALL_OW 69
19159: NOT
19160: IFFALSE 19170
// weapon := ru_time_lapser ;
19162: LD_ADDR_VAR 0 18
19166: PUSH
19167: LD_INT 49
19169: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19170: LD_VAR 0 12
19174: PUSH
19175: LD_INT 1
19177: PUSH
19178: LD_INT 2
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: IN
19185: PUSH
19186: LD_INT 11
19188: PUSH
19189: LD_VAR 0 5
19193: IN
19194: PUSH
19195: LD_INT 30
19197: PUSH
19198: LD_VAR 0 5
19202: IN
19203: OR
19204: AND
19205: PUSH
19206: LD_INT 6
19208: PPUSH
19209: LD_VAR 0 16
19213: PPUSH
19214: CALL_OW 321
19218: PUSH
19219: LD_INT 2
19221: EQUAL
19222: AND
19223: IFFALSE 19388
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19225: LD_INT 22
19227: PUSH
19228: LD_VAR 0 16
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 2
19239: PUSH
19240: LD_INT 35
19242: PUSH
19243: LD_INT 11
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 35
19252: PUSH
19253: LD_INT 30
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 91
19267: PUSH
19268: LD_VAR 0 1
19272: PUSH
19273: LD_INT 18
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: LIST
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: LIST
19285: PPUSH
19286: CALL_OW 69
19290: NOT
19291: PUSH
19292: LD_INT 22
19294: PUSH
19295: LD_VAR 0 16
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: LD_INT 30
19309: PUSH
19310: LD_INT 32
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: LD_INT 30
19319: PUSH
19320: LD_INT 33
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 91
19334: PUSH
19335: LD_VAR 0 1
19339: PUSH
19340: LD_INT 12
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: LIST
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: PUSH
19353: EMPTY
19354: LIST
19355: PPUSH
19356: CALL_OW 69
19360: PUSH
19361: LD_INT 2
19363: GREATER
19364: AND
19365: IFFALSE 19388
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19367: LD_ADDR_VAR 0 18
19371: PUSH
19372: LD_INT 11
19374: PUSH
19375: LD_INT 30
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: PUSH
19382: LD_VAR 0 12
19386: ARRAY
19387: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19388: LD_VAR 0 18
19392: NOT
19393: PUSH
19394: LD_INT 40
19396: PPUSH
19397: LD_VAR 0 16
19401: PPUSH
19402: CALL_OW 321
19406: PUSH
19407: LD_INT 2
19409: EQUAL
19410: AND
19411: PUSH
19412: LD_INT 7
19414: PUSH
19415: LD_VAR 0 5
19419: IN
19420: PUSH
19421: LD_INT 28
19423: PUSH
19424: LD_VAR 0 5
19428: IN
19429: OR
19430: PUSH
19431: LD_INT 45
19433: PUSH
19434: LD_VAR 0 5
19438: IN
19439: OR
19440: AND
19441: IFFALSE 19695
// begin hex := GetHexInfo ( x , y ) ;
19443: LD_ADDR_VAR 0 4
19447: PUSH
19448: LD_VAR 0 10
19452: PPUSH
19453: LD_VAR 0 11
19457: PPUSH
19458: CALL_OW 546
19462: ST_TO_ADDR
// if hex [ 1 ] then
19463: LD_VAR 0 4
19467: PUSH
19468: LD_INT 1
19470: ARRAY
19471: IFFALSE 19475
// exit ;
19473: GO 19878
// height := hex [ 2 ] ;
19475: LD_ADDR_VAR 0 15
19479: PUSH
19480: LD_VAR 0 4
19484: PUSH
19485: LD_INT 2
19487: ARRAY
19488: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19489: LD_ADDR_VAR 0 14
19493: PUSH
19494: LD_INT 0
19496: PUSH
19497: LD_INT 2
19499: PUSH
19500: LD_INT 3
19502: PUSH
19503: LD_INT 5
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: ST_TO_ADDR
// for i in tmp do
19512: LD_ADDR_VAR 0 8
19516: PUSH
19517: LD_VAR 0 14
19521: PUSH
19522: FOR_IN
19523: IFFALSE 19693
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19525: LD_ADDR_VAR 0 9
19529: PUSH
19530: LD_VAR 0 10
19534: PPUSH
19535: LD_VAR 0 8
19539: PPUSH
19540: LD_INT 5
19542: PPUSH
19543: CALL_OW 272
19547: PUSH
19548: LD_VAR 0 11
19552: PPUSH
19553: LD_VAR 0 8
19557: PPUSH
19558: LD_INT 5
19560: PPUSH
19561: CALL_OW 273
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19570: LD_VAR 0 9
19574: PUSH
19575: LD_INT 1
19577: ARRAY
19578: PPUSH
19579: LD_VAR 0 9
19583: PUSH
19584: LD_INT 2
19586: ARRAY
19587: PPUSH
19588: CALL_OW 488
19592: IFFALSE 19691
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
19594: LD_ADDR_VAR 0 4
19598: PUSH
19599: LD_VAR 0 9
19603: PUSH
19604: LD_INT 1
19606: ARRAY
19607: PPUSH
19608: LD_VAR 0 9
19612: PUSH
19613: LD_INT 2
19615: ARRAY
19616: PPUSH
19617: CALL_OW 546
19621: ST_TO_ADDR
// if hex [ 1 ] then
19622: LD_VAR 0 4
19626: PUSH
19627: LD_INT 1
19629: ARRAY
19630: IFFALSE 19634
// continue ;
19632: GO 19522
// h := hex [ 2 ] ;
19634: LD_ADDR_VAR 0 13
19638: PUSH
19639: LD_VAR 0 4
19643: PUSH
19644: LD_INT 2
19646: ARRAY
19647: ST_TO_ADDR
// if h + 7 < height then
19648: LD_VAR 0 13
19652: PUSH
19653: LD_INT 7
19655: PLUS
19656: PUSH
19657: LD_VAR 0 15
19661: LESS
19662: IFFALSE 19691
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
19664: LD_ADDR_VAR 0 18
19668: PUSH
19669: LD_INT 7
19671: PUSH
19672: LD_INT 28
19674: PUSH
19675: LD_INT 45
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: LIST
19682: PUSH
19683: LD_VAR 0 12
19687: ARRAY
19688: ST_TO_ADDR
// break ;
19689: GO 19693
// end ; end ; end ;
19691: GO 19522
19693: POP
19694: POP
// end ; if not weapon then
19695: LD_VAR 0 18
19699: NOT
19700: IFFALSE 19760
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
19702: LD_ADDR_VAR 0 5
19706: PUSH
19707: LD_VAR 0 5
19711: PUSH
19712: LD_INT 11
19714: PUSH
19715: LD_INT 30
19717: PUSH
19718: LD_INT 49
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: DIFF
19726: ST_TO_ADDR
// if not list then
19727: LD_VAR 0 5
19731: NOT
19732: IFFALSE 19736
// exit ;
19734: GO 19878
// weapon := list [ rand ( 1 , list ) ] ;
19736: LD_ADDR_VAR 0 18
19740: PUSH
19741: LD_VAR 0 5
19745: PUSH
19746: LD_INT 1
19748: PPUSH
19749: LD_VAR 0 5
19753: PPUSH
19754: CALL_OW 12
19758: ARRAY
19759: ST_TO_ADDR
// end ; if weapon then
19760: LD_VAR 0 18
19764: IFFALSE 19878
// begin tmp := CostOfWeapon ( weapon ) ;
19766: LD_ADDR_VAR 0 14
19770: PUSH
19771: LD_VAR 0 18
19775: PPUSH
19776: CALL_OW 451
19780: ST_TO_ADDR
// j := GetBase ( tower ) ;
19781: LD_ADDR_VAR 0 9
19785: PUSH
19786: LD_VAR 0 1
19790: PPUSH
19791: CALL_OW 274
19795: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
19796: LD_VAR 0 9
19800: PPUSH
19801: LD_INT 1
19803: PPUSH
19804: CALL_OW 275
19808: PUSH
19809: LD_VAR 0 14
19813: PUSH
19814: LD_INT 1
19816: ARRAY
19817: GREATEREQUAL
19818: PUSH
19819: LD_VAR 0 9
19823: PPUSH
19824: LD_INT 2
19826: PPUSH
19827: CALL_OW 275
19831: PUSH
19832: LD_VAR 0 14
19836: PUSH
19837: LD_INT 2
19839: ARRAY
19840: GREATEREQUAL
19841: AND
19842: PUSH
19843: LD_VAR 0 9
19847: PPUSH
19848: LD_INT 3
19850: PPUSH
19851: CALL_OW 275
19855: PUSH
19856: LD_VAR 0 14
19860: PUSH
19861: LD_INT 3
19863: ARRAY
19864: GREATEREQUAL
19865: AND
19866: IFFALSE 19878
// result := weapon ;
19868: LD_ADDR_VAR 0 3
19872: PUSH
19873: LD_VAR 0 18
19877: ST_TO_ADDR
// end ; end ;
19878: LD_VAR 0 3
19882: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
19883: LD_INT 0
19885: PPUSH
19886: PPUSH
// result := true ;
19887: LD_ADDR_VAR 0 3
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// if array1 = array2 then
19895: LD_VAR 0 1
19899: PUSH
19900: LD_VAR 0 2
19904: EQUAL
19905: IFFALSE 19965
// begin for i = 1 to array1 do
19907: LD_ADDR_VAR 0 4
19911: PUSH
19912: DOUBLE
19913: LD_INT 1
19915: DEC
19916: ST_TO_ADDR
19917: LD_VAR 0 1
19921: PUSH
19922: FOR_TO
19923: IFFALSE 19961
// if array1 [ i ] <> array2 [ i ] then
19925: LD_VAR 0 1
19929: PUSH
19930: LD_VAR 0 4
19934: ARRAY
19935: PUSH
19936: LD_VAR 0 2
19940: PUSH
19941: LD_VAR 0 4
19945: ARRAY
19946: NONEQUAL
19947: IFFALSE 19959
// begin result := false ;
19949: LD_ADDR_VAR 0 3
19953: PUSH
19954: LD_INT 0
19956: ST_TO_ADDR
// break ;
19957: GO 19961
// end ;
19959: GO 19922
19961: POP
19962: POP
// end else
19963: GO 19973
// result := false ;
19965: LD_ADDR_VAR 0 3
19969: PUSH
19970: LD_INT 0
19972: ST_TO_ADDR
// end ;
19973: LD_VAR 0 3
19977: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
19978: LD_INT 0
19980: PPUSH
19981: PPUSH
// if not array1 or not array2 then
19982: LD_VAR 0 1
19986: NOT
19987: PUSH
19988: LD_VAR 0 2
19992: NOT
19993: OR
19994: IFFALSE 19998
// exit ;
19996: GO 20062
// result := true ;
19998: LD_ADDR_VAR 0 3
20002: PUSH
20003: LD_INT 1
20005: ST_TO_ADDR
// for i = 1 to array1 do
20006: LD_ADDR_VAR 0 4
20010: PUSH
20011: DOUBLE
20012: LD_INT 1
20014: DEC
20015: ST_TO_ADDR
20016: LD_VAR 0 1
20020: PUSH
20021: FOR_TO
20022: IFFALSE 20060
// if array1 [ i ] <> array2 [ i ] then
20024: LD_VAR 0 1
20028: PUSH
20029: LD_VAR 0 4
20033: ARRAY
20034: PUSH
20035: LD_VAR 0 2
20039: PUSH
20040: LD_VAR 0 4
20044: ARRAY
20045: NONEQUAL
20046: IFFALSE 20058
// begin result := false ;
20048: LD_ADDR_VAR 0 3
20052: PUSH
20053: LD_INT 0
20055: ST_TO_ADDR
// break ;
20056: GO 20060
// end ;
20058: GO 20021
20060: POP
20061: POP
// end ;
20062: LD_VAR 0 3
20066: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20067: LD_INT 0
20069: PPUSH
20070: PPUSH
20071: PPUSH
// pom := GetBase ( fac ) ;
20072: LD_ADDR_VAR 0 5
20076: PUSH
20077: LD_VAR 0 1
20081: PPUSH
20082: CALL_OW 274
20086: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20087: LD_ADDR_VAR 0 4
20091: PUSH
20092: LD_VAR 0 2
20096: PUSH
20097: LD_INT 1
20099: ARRAY
20100: PPUSH
20101: LD_VAR 0 2
20105: PUSH
20106: LD_INT 2
20108: ARRAY
20109: PPUSH
20110: LD_VAR 0 2
20114: PUSH
20115: LD_INT 3
20117: ARRAY
20118: PPUSH
20119: LD_VAR 0 2
20123: PUSH
20124: LD_INT 4
20126: ARRAY
20127: PPUSH
20128: CALL_OW 449
20132: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20133: LD_ADDR_VAR 0 3
20137: PUSH
20138: LD_VAR 0 5
20142: PPUSH
20143: LD_INT 1
20145: PPUSH
20146: CALL_OW 275
20150: PUSH
20151: LD_VAR 0 4
20155: PUSH
20156: LD_INT 1
20158: ARRAY
20159: GREATEREQUAL
20160: PUSH
20161: LD_VAR 0 5
20165: PPUSH
20166: LD_INT 2
20168: PPUSH
20169: CALL_OW 275
20173: PUSH
20174: LD_VAR 0 4
20178: PUSH
20179: LD_INT 2
20181: ARRAY
20182: GREATEREQUAL
20183: AND
20184: PUSH
20185: LD_VAR 0 5
20189: PPUSH
20190: LD_INT 3
20192: PPUSH
20193: CALL_OW 275
20197: PUSH
20198: LD_VAR 0 4
20202: PUSH
20203: LD_INT 3
20205: ARRAY
20206: GREATEREQUAL
20207: AND
20208: ST_TO_ADDR
// end ;
20209: LD_VAR 0 3
20213: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20214: LD_INT 0
20216: PPUSH
20217: PPUSH
20218: PPUSH
20219: PPUSH
// pom := GetBase ( building ) ;
20220: LD_ADDR_VAR 0 3
20224: PUSH
20225: LD_VAR 0 1
20229: PPUSH
20230: CALL_OW 274
20234: ST_TO_ADDR
// if not pom then
20235: LD_VAR 0 3
20239: NOT
20240: IFFALSE 20244
// exit ;
20242: GO 20414
// btype := GetBType ( building ) ;
20244: LD_ADDR_VAR 0 5
20248: PUSH
20249: LD_VAR 0 1
20253: PPUSH
20254: CALL_OW 266
20258: ST_TO_ADDR
// if btype = b_armoury then
20259: LD_VAR 0 5
20263: PUSH
20264: LD_INT 4
20266: EQUAL
20267: IFFALSE 20277
// btype := b_barracks ;
20269: LD_ADDR_VAR 0 5
20273: PUSH
20274: LD_INT 5
20276: ST_TO_ADDR
// if btype = b_depot then
20277: LD_VAR 0 5
20281: PUSH
20282: LD_INT 0
20284: EQUAL
20285: IFFALSE 20295
// btype := b_warehouse ;
20287: LD_ADDR_VAR 0 5
20291: PUSH
20292: LD_INT 1
20294: ST_TO_ADDR
// if btype = b_workshop then
20295: LD_VAR 0 5
20299: PUSH
20300: LD_INT 2
20302: EQUAL
20303: IFFALSE 20313
// btype := b_factory ;
20305: LD_ADDR_VAR 0 5
20309: PUSH
20310: LD_INT 3
20312: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20313: LD_ADDR_VAR 0 4
20317: PUSH
20318: LD_VAR 0 5
20322: PPUSH
20323: LD_VAR 0 1
20327: PPUSH
20328: CALL_OW 248
20332: PPUSH
20333: CALL_OW 450
20337: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20338: LD_ADDR_VAR 0 2
20342: PUSH
20343: LD_VAR 0 3
20347: PPUSH
20348: LD_INT 1
20350: PPUSH
20351: CALL_OW 275
20355: PUSH
20356: LD_VAR 0 4
20360: PUSH
20361: LD_INT 1
20363: ARRAY
20364: GREATEREQUAL
20365: PUSH
20366: LD_VAR 0 3
20370: PPUSH
20371: LD_INT 2
20373: PPUSH
20374: CALL_OW 275
20378: PUSH
20379: LD_VAR 0 4
20383: PUSH
20384: LD_INT 2
20386: ARRAY
20387: GREATEREQUAL
20388: AND
20389: PUSH
20390: LD_VAR 0 3
20394: PPUSH
20395: LD_INT 3
20397: PPUSH
20398: CALL_OW 275
20402: PUSH
20403: LD_VAR 0 4
20407: PUSH
20408: LD_INT 3
20410: ARRAY
20411: GREATEREQUAL
20412: AND
20413: ST_TO_ADDR
// end ;
20414: LD_VAR 0 2
20418: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20419: LD_INT 0
20421: PPUSH
20422: PPUSH
20423: PPUSH
// pom := GetBase ( building ) ;
20424: LD_ADDR_VAR 0 4
20428: PUSH
20429: LD_VAR 0 1
20433: PPUSH
20434: CALL_OW 274
20438: ST_TO_ADDR
// if not pom then
20439: LD_VAR 0 4
20443: NOT
20444: IFFALSE 20448
// exit ;
20446: GO 20549
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20448: LD_ADDR_VAR 0 5
20452: PUSH
20453: LD_VAR 0 2
20457: PPUSH
20458: LD_VAR 0 1
20462: PPUSH
20463: CALL_OW 248
20467: PPUSH
20468: CALL_OW 450
20472: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20473: LD_ADDR_VAR 0 3
20477: PUSH
20478: LD_VAR 0 4
20482: PPUSH
20483: LD_INT 1
20485: PPUSH
20486: CALL_OW 275
20490: PUSH
20491: LD_VAR 0 5
20495: PUSH
20496: LD_INT 1
20498: ARRAY
20499: GREATEREQUAL
20500: PUSH
20501: LD_VAR 0 4
20505: PPUSH
20506: LD_INT 2
20508: PPUSH
20509: CALL_OW 275
20513: PUSH
20514: LD_VAR 0 5
20518: PUSH
20519: LD_INT 2
20521: ARRAY
20522: GREATEREQUAL
20523: AND
20524: PUSH
20525: LD_VAR 0 4
20529: PPUSH
20530: LD_INT 3
20532: PPUSH
20533: CALL_OW 275
20537: PUSH
20538: LD_VAR 0 5
20542: PUSH
20543: LD_INT 3
20545: ARRAY
20546: GREATEREQUAL
20547: AND
20548: ST_TO_ADDR
// end ;
20549: LD_VAR 0 3
20553: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20554: LD_INT 0
20556: PPUSH
20557: PPUSH
20558: PPUSH
20559: PPUSH
20560: PPUSH
20561: PPUSH
20562: PPUSH
20563: PPUSH
20564: PPUSH
20565: PPUSH
20566: PPUSH
// result := false ;
20567: LD_ADDR_VAR 0 8
20571: PUSH
20572: LD_INT 0
20574: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
20575: LD_VAR 0 5
20579: NOT
20580: PUSH
20581: LD_VAR 0 1
20585: NOT
20586: OR
20587: PUSH
20588: LD_VAR 0 2
20592: NOT
20593: OR
20594: PUSH
20595: LD_VAR 0 3
20599: NOT
20600: OR
20601: IFFALSE 20605
// exit ;
20603: GO 21419
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
20605: LD_ADDR_VAR 0 14
20609: PUSH
20610: LD_VAR 0 1
20614: PPUSH
20615: LD_VAR 0 2
20619: PPUSH
20620: LD_VAR 0 3
20624: PPUSH
20625: LD_VAR 0 4
20629: PPUSH
20630: LD_VAR 0 5
20634: PUSH
20635: LD_INT 1
20637: ARRAY
20638: PPUSH
20639: CALL_OW 248
20643: PPUSH
20644: LD_INT 0
20646: PPUSH
20647: CALL 22656 0 6
20651: ST_TO_ADDR
// if not hexes then
20652: LD_VAR 0 14
20656: NOT
20657: IFFALSE 20661
// exit ;
20659: GO 21419
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20661: LD_ADDR_VAR 0 17
20665: PUSH
20666: LD_VAR 0 5
20670: PPUSH
20671: LD_INT 22
20673: PUSH
20674: LD_VAR 0 13
20678: PPUSH
20679: CALL_OW 255
20683: PUSH
20684: EMPTY
20685: LIST
20686: LIST
20687: PUSH
20688: LD_INT 2
20690: PUSH
20691: LD_INT 30
20693: PUSH
20694: LD_INT 0
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 30
20703: PUSH
20704: LD_INT 1
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: LIST
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PPUSH
20720: CALL_OW 72
20724: ST_TO_ADDR
// for i = 1 to hexes do
20725: LD_ADDR_VAR 0 9
20729: PUSH
20730: DOUBLE
20731: LD_INT 1
20733: DEC
20734: ST_TO_ADDR
20735: LD_VAR 0 14
20739: PUSH
20740: FOR_TO
20741: IFFALSE 21417
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20743: LD_ADDR_VAR 0 13
20747: PUSH
20748: LD_VAR 0 14
20752: PUSH
20753: LD_VAR 0 9
20757: ARRAY
20758: PUSH
20759: LD_INT 1
20761: ARRAY
20762: PPUSH
20763: LD_VAR 0 14
20767: PUSH
20768: LD_VAR 0 9
20772: ARRAY
20773: PUSH
20774: LD_INT 2
20776: ARRAY
20777: PPUSH
20778: CALL_OW 428
20782: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
20783: LD_VAR 0 14
20787: PUSH
20788: LD_VAR 0 9
20792: ARRAY
20793: PUSH
20794: LD_INT 1
20796: ARRAY
20797: PPUSH
20798: LD_VAR 0 14
20802: PUSH
20803: LD_VAR 0 9
20807: ARRAY
20808: PUSH
20809: LD_INT 2
20811: ARRAY
20812: PPUSH
20813: CALL_OW 351
20817: PUSH
20818: LD_VAR 0 14
20822: PUSH
20823: LD_VAR 0 9
20827: ARRAY
20828: PUSH
20829: LD_INT 1
20831: ARRAY
20832: PPUSH
20833: LD_VAR 0 14
20837: PUSH
20838: LD_VAR 0 9
20842: ARRAY
20843: PUSH
20844: LD_INT 2
20846: ARRAY
20847: PPUSH
20848: CALL_OW 488
20852: NOT
20853: OR
20854: PUSH
20855: LD_VAR 0 13
20859: PPUSH
20860: CALL_OW 247
20864: PUSH
20865: LD_INT 3
20867: EQUAL
20868: OR
20869: IFFALSE 20875
// exit ;
20871: POP
20872: POP
20873: GO 21419
// if not tmp then
20875: LD_VAR 0 13
20879: NOT
20880: IFFALSE 20884
// continue ;
20882: GO 20740
// result := true ;
20884: LD_ADDR_VAR 0 8
20888: PUSH
20889: LD_INT 1
20891: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
20892: LD_VAR 0 6
20896: PUSH
20897: LD_VAR 0 13
20901: PPUSH
20902: CALL_OW 247
20906: PUSH
20907: LD_INT 2
20909: EQUAL
20910: AND
20911: PUSH
20912: LD_VAR 0 13
20916: PPUSH
20917: CALL_OW 263
20921: PUSH
20922: LD_INT 1
20924: EQUAL
20925: AND
20926: IFFALSE 21090
// begin if IsDrivenBy ( tmp ) then
20928: LD_VAR 0 13
20932: PPUSH
20933: CALL_OW 311
20937: IFFALSE 20941
// continue ;
20939: GO 20740
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
20941: LD_VAR 0 6
20945: PPUSH
20946: LD_INT 3
20948: PUSH
20949: LD_INT 60
20951: PUSH
20952: EMPTY
20953: LIST
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 3
20961: PUSH
20962: LD_INT 55
20964: PUSH
20965: EMPTY
20966: LIST
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PPUSH
20976: CALL_OW 72
20980: IFFALSE 21088
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
20982: LD_ADDR_VAR 0 18
20986: PUSH
20987: LD_VAR 0 6
20991: PPUSH
20992: LD_INT 3
20994: PUSH
20995: LD_INT 60
20997: PUSH
20998: EMPTY
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 3
21007: PUSH
21008: LD_INT 55
21010: PUSH
21011: EMPTY
21012: LIST
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PPUSH
21022: CALL_OW 72
21026: PUSH
21027: LD_INT 1
21029: ARRAY
21030: ST_TO_ADDR
// if IsInUnit ( driver ) then
21031: LD_VAR 0 18
21035: PPUSH
21036: CALL_OW 310
21040: IFFALSE 21051
// ComExit ( driver ) ;
21042: LD_VAR 0 18
21046: PPUSH
21047: CALL 45784 0 1
// AddComEnterUnit ( driver , tmp ) ;
21051: LD_VAR 0 18
21055: PPUSH
21056: LD_VAR 0 13
21060: PPUSH
21061: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21065: LD_VAR 0 18
21069: PPUSH
21070: LD_VAR 0 7
21074: PPUSH
21075: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21079: LD_VAR 0 18
21083: PPUSH
21084: CALL_OW 181
// end ; continue ;
21088: GO 20740
// end ; if not cleaners or not tmp in cleaners then
21090: LD_VAR 0 6
21094: NOT
21095: PUSH
21096: LD_VAR 0 13
21100: PUSH
21101: LD_VAR 0 6
21105: IN
21106: NOT
21107: OR
21108: IFFALSE 21415
// begin if dep then
21110: LD_VAR 0 17
21114: IFFALSE 21250
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21116: LD_ADDR_VAR 0 16
21120: PUSH
21121: LD_VAR 0 17
21125: PUSH
21126: LD_INT 1
21128: ARRAY
21129: PPUSH
21130: CALL_OW 250
21134: PPUSH
21135: LD_VAR 0 17
21139: PUSH
21140: LD_INT 1
21142: ARRAY
21143: PPUSH
21144: CALL_OW 254
21148: PPUSH
21149: LD_INT 5
21151: PPUSH
21152: CALL_OW 272
21156: PUSH
21157: LD_VAR 0 17
21161: PUSH
21162: LD_INT 1
21164: ARRAY
21165: PPUSH
21166: CALL_OW 251
21170: PPUSH
21171: LD_VAR 0 17
21175: PUSH
21176: LD_INT 1
21178: ARRAY
21179: PPUSH
21180: CALL_OW 254
21184: PPUSH
21185: LD_INT 5
21187: PPUSH
21188: CALL_OW 273
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21197: LD_VAR 0 16
21201: PUSH
21202: LD_INT 1
21204: ARRAY
21205: PPUSH
21206: LD_VAR 0 16
21210: PUSH
21211: LD_INT 2
21213: ARRAY
21214: PPUSH
21215: CALL_OW 488
21219: IFFALSE 21250
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21221: LD_VAR 0 13
21225: PPUSH
21226: LD_VAR 0 16
21230: PUSH
21231: LD_INT 1
21233: ARRAY
21234: PPUSH
21235: LD_VAR 0 16
21239: PUSH
21240: LD_INT 2
21242: ARRAY
21243: PPUSH
21244: CALL_OW 111
// continue ;
21248: GO 20740
// end ; end ; r := GetDir ( tmp ) ;
21250: LD_ADDR_VAR 0 15
21254: PUSH
21255: LD_VAR 0 13
21259: PPUSH
21260: CALL_OW 254
21264: ST_TO_ADDR
// if r = 5 then
21265: LD_VAR 0 15
21269: PUSH
21270: LD_INT 5
21272: EQUAL
21273: IFFALSE 21283
// r := 0 ;
21275: LD_ADDR_VAR 0 15
21279: PUSH
21280: LD_INT 0
21282: ST_TO_ADDR
// for j = r to 5 do
21283: LD_ADDR_VAR 0 10
21287: PUSH
21288: DOUBLE
21289: LD_VAR 0 15
21293: DEC
21294: ST_TO_ADDR
21295: LD_INT 5
21297: PUSH
21298: FOR_TO
21299: IFFALSE 21413
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21301: LD_ADDR_VAR 0 11
21305: PUSH
21306: LD_VAR 0 13
21310: PPUSH
21311: CALL_OW 250
21315: PPUSH
21316: LD_VAR 0 10
21320: PPUSH
21321: LD_INT 2
21323: PPUSH
21324: CALL_OW 272
21328: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21329: LD_ADDR_VAR 0 12
21333: PUSH
21334: LD_VAR 0 13
21338: PPUSH
21339: CALL_OW 251
21343: PPUSH
21344: LD_VAR 0 10
21348: PPUSH
21349: LD_INT 2
21351: PPUSH
21352: CALL_OW 273
21356: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21357: LD_VAR 0 11
21361: PPUSH
21362: LD_VAR 0 12
21366: PPUSH
21367: CALL_OW 488
21371: PUSH
21372: LD_VAR 0 11
21376: PPUSH
21377: LD_VAR 0 12
21381: PPUSH
21382: CALL_OW 428
21386: NOT
21387: AND
21388: IFFALSE 21411
// begin ComMoveXY ( tmp , _x , _y ) ;
21390: LD_VAR 0 13
21394: PPUSH
21395: LD_VAR 0 11
21399: PPUSH
21400: LD_VAR 0 12
21404: PPUSH
21405: CALL_OW 111
// break ;
21409: GO 21413
// end ; end ;
21411: GO 21298
21413: POP
21414: POP
// end ; end ;
21415: GO 20740
21417: POP
21418: POP
// end ;
21419: LD_VAR 0 8
21423: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21424: LD_INT 0
21426: PPUSH
// result := true ;
21427: LD_ADDR_VAR 0 3
21431: PUSH
21432: LD_INT 1
21434: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21435: LD_VAR 0 2
21439: PUSH
21440: LD_INT 24
21442: DOUBLE
21443: EQUAL
21444: IFTRUE 21454
21446: LD_INT 33
21448: DOUBLE
21449: EQUAL
21450: IFTRUE 21454
21452: GO 21479
21454: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21455: LD_ADDR_VAR 0 3
21459: PUSH
21460: LD_INT 32
21462: PPUSH
21463: LD_VAR 0 1
21467: PPUSH
21468: CALL_OW 321
21472: PUSH
21473: LD_INT 2
21475: EQUAL
21476: ST_TO_ADDR
21477: GO 21799
21479: LD_INT 20
21481: DOUBLE
21482: EQUAL
21483: IFTRUE 21487
21485: GO 21512
21487: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21488: LD_ADDR_VAR 0 3
21492: PUSH
21493: LD_INT 6
21495: PPUSH
21496: LD_VAR 0 1
21500: PPUSH
21501: CALL_OW 321
21505: PUSH
21506: LD_INT 2
21508: EQUAL
21509: ST_TO_ADDR
21510: GO 21799
21512: LD_INT 22
21514: DOUBLE
21515: EQUAL
21516: IFTRUE 21526
21518: LD_INT 36
21520: DOUBLE
21521: EQUAL
21522: IFTRUE 21526
21524: GO 21551
21526: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21527: LD_ADDR_VAR 0 3
21531: PUSH
21532: LD_INT 15
21534: PPUSH
21535: LD_VAR 0 1
21539: PPUSH
21540: CALL_OW 321
21544: PUSH
21545: LD_INT 2
21547: EQUAL
21548: ST_TO_ADDR
21549: GO 21799
21551: LD_INT 30
21553: DOUBLE
21554: EQUAL
21555: IFTRUE 21559
21557: GO 21584
21559: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21560: LD_ADDR_VAR 0 3
21564: PUSH
21565: LD_INT 20
21567: PPUSH
21568: LD_VAR 0 1
21572: PPUSH
21573: CALL_OW 321
21577: PUSH
21578: LD_INT 2
21580: EQUAL
21581: ST_TO_ADDR
21582: GO 21799
21584: LD_INT 28
21586: DOUBLE
21587: EQUAL
21588: IFTRUE 21598
21590: LD_INT 21
21592: DOUBLE
21593: EQUAL
21594: IFTRUE 21598
21596: GO 21623
21598: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
21599: LD_ADDR_VAR 0 3
21603: PUSH
21604: LD_INT 21
21606: PPUSH
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL_OW 321
21616: PUSH
21617: LD_INT 2
21619: EQUAL
21620: ST_TO_ADDR
21621: GO 21799
21623: LD_INT 16
21625: DOUBLE
21626: EQUAL
21627: IFTRUE 21631
21629: GO 21658
21631: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
21632: LD_ADDR_VAR 0 3
21636: PUSH
21637: LD_EXP 79
21641: PPUSH
21642: LD_VAR 0 1
21646: PPUSH
21647: CALL_OW 321
21651: PUSH
21652: LD_INT 2
21654: EQUAL
21655: ST_TO_ADDR
21656: GO 21799
21658: LD_INT 19
21660: DOUBLE
21661: EQUAL
21662: IFTRUE 21672
21664: LD_INT 23
21666: DOUBLE
21667: EQUAL
21668: IFTRUE 21672
21670: GO 21699
21672: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
21673: LD_ADDR_VAR 0 3
21677: PUSH
21678: LD_EXP 78
21682: PPUSH
21683: LD_VAR 0 1
21687: PPUSH
21688: CALL_OW 321
21692: PUSH
21693: LD_INT 2
21695: EQUAL
21696: ST_TO_ADDR
21697: GO 21799
21699: LD_INT 17
21701: DOUBLE
21702: EQUAL
21703: IFTRUE 21707
21705: GO 21732
21707: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
21708: LD_ADDR_VAR 0 3
21712: PUSH
21713: LD_INT 39
21715: PPUSH
21716: LD_VAR 0 1
21720: PPUSH
21721: CALL_OW 321
21725: PUSH
21726: LD_INT 2
21728: EQUAL
21729: ST_TO_ADDR
21730: GO 21799
21732: LD_INT 18
21734: DOUBLE
21735: EQUAL
21736: IFTRUE 21740
21738: GO 21765
21740: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
21741: LD_ADDR_VAR 0 3
21745: PUSH
21746: LD_INT 40
21748: PPUSH
21749: LD_VAR 0 1
21753: PPUSH
21754: CALL_OW 321
21758: PUSH
21759: LD_INT 2
21761: EQUAL
21762: ST_TO_ADDR
21763: GO 21799
21765: LD_INT 27
21767: DOUBLE
21768: EQUAL
21769: IFTRUE 21773
21771: GO 21798
21773: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
21774: LD_ADDR_VAR 0 3
21778: PUSH
21779: LD_INT 35
21781: PPUSH
21782: LD_VAR 0 1
21786: PPUSH
21787: CALL_OW 321
21791: PUSH
21792: LD_INT 2
21794: EQUAL
21795: ST_TO_ADDR
21796: GO 21799
21798: POP
// end ;
21799: LD_VAR 0 3
21803: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
21804: LD_INT 0
21806: PPUSH
21807: PPUSH
21808: PPUSH
21809: PPUSH
21810: PPUSH
21811: PPUSH
21812: PPUSH
21813: PPUSH
21814: PPUSH
21815: PPUSH
21816: PPUSH
// result := false ;
21817: LD_ADDR_VAR 0 6
21821: PUSH
21822: LD_INT 0
21824: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
21825: LD_VAR 0 1
21829: NOT
21830: PUSH
21831: LD_VAR 0 1
21835: PPUSH
21836: CALL_OW 266
21840: PUSH
21841: LD_INT 0
21843: PUSH
21844: LD_INT 1
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: IN
21851: NOT
21852: OR
21853: PUSH
21854: LD_VAR 0 2
21858: NOT
21859: OR
21860: PUSH
21861: LD_VAR 0 5
21865: PUSH
21866: LD_INT 0
21868: PUSH
21869: LD_INT 1
21871: PUSH
21872: LD_INT 2
21874: PUSH
21875: LD_INT 3
21877: PUSH
21878: LD_INT 4
21880: PUSH
21881: LD_INT 5
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: IN
21892: NOT
21893: OR
21894: PUSH
21895: LD_VAR 0 3
21899: PPUSH
21900: LD_VAR 0 4
21904: PPUSH
21905: CALL_OW 488
21909: NOT
21910: OR
21911: IFFALSE 21915
// exit ;
21913: GO 22651
// side := GetSide ( depot ) ;
21915: LD_ADDR_VAR 0 9
21919: PUSH
21920: LD_VAR 0 1
21924: PPUSH
21925: CALL_OW 255
21929: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
21930: LD_VAR 0 9
21934: PPUSH
21935: LD_VAR 0 2
21939: PPUSH
21940: CALL 21424 0 2
21944: NOT
21945: IFFALSE 21949
// exit ;
21947: GO 22651
// pom := GetBase ( depot ) ;
21949: LD_ADDR_VAR 0 10
21953: PUSH
21954: LD_VAR 0 1
21958: PPUSH
21959: CALL_OW 274
21963: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
21964: LD_ADDR_VAR 0 11
21968: PUSH
21969: LD_VAR 0 2
21973: PPUSH
21974: LD_VAR 0 1
21978: PPUSH
21979: CALL_OW 248
21983: PPUSH
21984: CALL_OW 450
21988: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
21989: LD_VAR 0 10
21993: PPUSH
21994: LD_INT 1
21996: PPUSH
21997: CALL_OW 275
22001: PUSH
22002: LD_VAR 0 11
22006: PUSH
22007: LD_INT 1
22009: ARRAY
22010: GREATEREQUAL
22011: PUSH
22012: LD_VAR 0 10
22016: PPUSH
22017: LD_INT 2
22019: PPUSH
22020: CALL_OW 275
22024: PUSH
22025: LD_VAR 0 11
22029: PUSH
22030: LD_INT 2
22032: ARRAY
22033: GREATEREQUAL
22034: AND
22035: PUSH
22036: LD_VAR 0 10
22040: PPUSH
22041: LD_INT 3
22043: PPUSH
22044: CALL_OW 275
22048: PUSH
22049: LD_VAR 0 11
22053: PUSH
22054: LD_INT 3
22056: ARRAY
22057: GREATEREQUAL
22058: AND
22059: NOT
22060: IFFALSE 22064
// exit ;
22062: GO 22651
// if GetBType ( depot ) = b_depot then
22064: LD_VAR 0 1
22068: PPUSH
22069: CALL_OW 266
22073: PUSH
22074: LD_INT 0
22076: EQUAL
22077: IFFALSE 22089
// dist := 28 else
22079: LD_ADDR_VAR 0 14
22083: PUSH
22084: LD_INT 28
22086: ST_TO_ADDR
22087: GO 22097
// dist := 36 ;
22089: LD_ADDR_VAR 0 14
22093: PUSH
22094: LD_INT 36
22096: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22097: LD_VAR 0 1
22101: PPUSH
22102: LD_VAR 0 3
22106: PPUSH
22107: LD_VAR 0 4
22111: PPUSH
22112: CALL_OW 297
22116: PUSH
22117: LD_VAR 0 14
22121: GREATER
22122: IFFALSE 22126
// exit ;
22124: GO 22651
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22126: LD_ADDR_VAR 0 12
22130: PUSH
22131: LD_VAR 0 2
22135: PPUSH
22136: LD_VAR 0 3
22140: PPUSH
22141: LD_VAR 0 4
22145: PPUSH
22146: LD_VAR 0 5
22150: PPUSH
22151: LD_VAR 0 1
22155: PPUSH
22156: CALL_OW 248
22160: PPUSH
22161: LD_INT 0
22163: PPUSH
22164: CALL 22656 0 6
22168: ST_TO_ADDR
// if not hexes then
22169: LD_VAR 0 12
22173: NOT
22174: IFFALSE 22178
// exit ;
22176: GO 22651
// hex := GetHexInfo ( x , y ) ;
22178: LD_ADDR_VAR 0 15
22182: PUSH
22183: LD_VAR 0 3
22187: PPUSH
22188: LD_VAR 0 4
22192: PPUSH
22193: CALL_OW 546
22197: ST_TO_ADDR
// if hex [ 1 ] then
22198: LD_VAR 0 15
22202: PUSH
22203: LD_INT 1
22205: ARRAY
22206: IFFALSE 22210
// exit ;
22208: GO 22651
// height := hex [ 2 ] ;
22210: LD_ADDR_VAR 0 13
22214: PUSH
22215: LD_VAR 0 15
22219: PUSH
22220: LD_INT 2
22222: ARRAY
22223: ST_TO_ADDR
// for i = 1 to hexes do
22224: LD_ADDR_VAR 0 7
22228: PUSH
22229: DOUBLE
22230: LD_INT 1
22232: DEC
22233: ST_TO_ADDR
22234: LD_VAR 0 12
22238: PUSH
22239: FOR_TO
22240: IFFALSE 22570
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22242: LD_VAR 0 12
22246: PUSH
22247: LD_VAR 0 7
22251: ARRAY
22252: PUSH
22253: LD_INT 1
22255: ARRAY
22256: PPUSH
22257: LD_VAR 0 12
22261: PUSH
22262: LD_VAR 0 7
22266: ARRAY
22267: PUSH
22268: LD_INT 2
22270: ARRAY
22271: PPUSH
22272: CALL_OW 488
22276: NOT
22277: PUSH
22278: LD_VAR 0 12
22282: PUSH
22283: LD_VAR 0 7
22287: ARRAY
22288: PUSH
22289: LD_INT 1
22291: ARRAY
22292: PPUSH
22293: LD_VAR 0 12
22297: PUSH
22298: LD_VAR 0 7
22302: ARRAY
22303: PUSH
22304: LD_INT 2
22306: ARRAY
22307: PPUSH
22308: CALL_OW 428
22312: PUSH
22313: LD_INT 0
22315: GREATER
22316: OR
22317: PUSH
22318: LD_VAR 0 12
22322: PUSH
22323: LD_VAR 0 7
22327: ARRAY
22328: PUSH
22329: LD_INT 1
22331: ARRAY
22332: PPUSH
22333: LD_VAR 0 12
22337: PUSH
22338: LD_VAR 0 7
22342: ARRAY
22343: PUSH
22344: LD_INT 2
22346: ARRAY
22347: PPUSH
22348: CALL_OW 351
22352: OR
22353: IFFALSE 22359
// exit ;
22355: POP
22356: POP
22357: GO 22651
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22359: LD_ADDR_VAR 0 8
22363: PUSH
22364: LD_VAR 0 12
22368: PUSH
22369: LD_VAR 0 7
22373: ARRAY
22374: PUSH
22375: LD_INT 1
22377: ARRAY
22378: PPUSH
22379: LD_VAR 0 12
22383: PUSH
22384: LD_VAR 0 7
22388: ARRAY
22389: PUSH
22390: LD_INT 2
22392: ARRAY
22393: PPUSH
22394: CALL_OW 546
22398: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22399: LD_VAR 0 8
22403: PUSH
22404: LD_INT 1
22406: ARRAY
22407: PUSH
22408: LD_VAR 0 8
22412: PUSH
22413: LD_INT 2
22415: ARRAY
22416: PUSH
22417: LD_VAR 0 13
22421: PUSH
22422: LD_INT 2
22424: PLUS
22425: GREATER
22426: OR
22427: PUSH
22428: LD_VAR 0 8
22432: PUSH
22433: LD_INT 2
22435: ARRAY
22436: PUSH
22437: LD_VAR 0 13
22441: PUSH
22442: LD_INT 2
22444: MINUS
22445: LESS
22446: OR
22447: PUSH
22448: LD_VAR 0 8
22452: PUSH
22453: LD_INT 3
22455: ARRAY
22456: PUSH
22457: LD_INT 0
22459: PUSH
22460: LD_INT 8
22462: PUSH
22463: LD_INT 9
22465: PUSH
22466: LD_INT 10
22468: PUSH
22469: LD_INT 11
22471: PUSH
22472: LD_INT 12
22474: PUSH
22475: LD_INT 13
22477: PUSH
22478: LD_INT 16
22480: PUSH
22481: LD_INT 17
22483: PUSH
22484: LD_INT 18
22486: PUSH
22487: LD_INT 19
22489: PUSH
22490: LD_INT 20
22492: PUSH
22493: LD_INT 21
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: IN
22511: NOT
22512: OR
22513: PUSH
22514: LD_VAR 0 8
22518: PUSH
22519: LD_INT 5
22521: ARRAY
22522: NOT
22523: OR
22524: PUSH
22525: LD_VAR 0 8
22529: PUSH
22530: LD_INT 6
22532: ARRAY
22533: PUSH
22534: LD_INT 1
22536: PUSH
22537: LD_INT 2
22539: PUSH
22540: LD_INT 7
22542: PUSH
22543: LD_INT 9
22545: PUSH
22546: LD_INT 10
22548: PUSH
22549: LD_INT 11
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: IN
22560: NOT
22561: OR
22562: IFFALSE 22568
// exit ;
22564: POP
22565: POP
22566: GO 22651
// end ;
22568: GO 22239
22570: POP
22571: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
22572: LD_VAR 0 9
22576: PPUSH
22577: LD_VAR 0 3
22581: PPUSH
22582: LD_VAR 0 4
22586: PPUSH
22587: LD_INT 20
22589: PPUSH
22590: CALL 14597 0 4
22594: PUSH
22595: LD_INT 4
22597: ARRAY
22598: IFFALSE 22602
// exit ;
22600: GO 22651
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
22602: LD_VAR 0 2
22606: PUSH
22607: LD_INT 29
22609: PUSH
22610: LD_INT 30
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: IN
22617: PUSH
22618: LD_VAR 0 3
22622: PPUSH
22623: LD_VAR 0 4
22627: PPUSH
22628: LD_VAR 0 9
22632: PPUSH
22633: CALL_OW 440
22637: NOT
22638: AND
22639: IFFALSE 22643
// exit ;
22641: GO 22651
// result := true ;
22643: LD_ADDR_VAR 0 6
22647: PUSH
22648: LD_INT 1
22650: ST_TO_ADDR
// end ;
22651: LD_VAR 0 6
22655: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
22656: LD_INT 0
22658: PPUSH
22659: PPUSH
22660: PPUSH
22661: PPUSH
22662: PPUSH
22663: PPUSH
22664: PPUSH
22665: PPUSH
22666: PPUSH
22667: PPUSH
22668: PPUSH
22669: PPUSH
22670: PPUSH
22671: PPUSH
22672: PPUSH
22673: PPUSH
22674: PPUSH
22675: PPUSH
22676: PPUSH
22677: PPUSH
22678: PPUSH
22679: PPUSH
22680: PPUSH
22681: PPUSH
22682: PPUSH
22683: PPUSH
22684: PPUSH
22685: PPUSH
22686: PPUSH
22687: PPUSH
22688: PPUSH
22689: PPUSH
22690: PPUSH
22691: PPUSH
22692: PPUSH
22693: PPUSH
22694: PPUSH
22695: PPUSH
22696: PPUSH
22697: PPUSH
22698: PPUSH
22699: PPUSH
22700: PPUSH
22701: PPUSH
22702: PPUSH
22703: PPUSH
22704: PPUSH
22705: PPUSH
22706: PPUSH
22707: PPUSH
22708: PPUSH
22709: PPUSH
22710: PPUSH
22711: PPUSH
22712: PPUSH
22713: PPUSH
22714: PPUSH
22715: PPUSH
// result = [ ] ;
22716: LD_ADDR_VAR 0 7
22720: PUSH
22721: EMPTY
22722: ST_TO_ADDR
// temp_list = [ ] ;
22723: LD_ADDR_VAR 0 9
22727: PUSH
22728: EMPTY
22729: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
22730: LD_VAR 0 4
22734: PUSH
22735: LD_INT 0
22737: PUSH
22738: LD_INT 1
22740: PUSH
22741: LD_INT 2
22743: PUSH
22744: LD_INT 3
22746: PUSH
22747: LD_INT 4
22749: PUSH
22750: LD_INT 5
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: IN
22761: NOT
22762: PUSH
22763: LD_VAR 0 1
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: LD_INT 1
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: IN
22778: PUSH
22779: LD_VAR 0 5
22783: PUSH
22784: LD_INT 1
22786: PUSH
22787: LD_INT 2
22789: PUSH
22790: LD_INT 3
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: LIST
22797: IN
22798: NOT
22799: AND
22800: OR
22801: IFFALSE 22805
// exit ;
22803: GO 41196
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
22805: LD_VAR 0 1
22809: PUSH
22810: LD_INT 6
22812: PUSH
22813: LD_INT 7
22815: PUSH
22816: LD_INT 8
22818: PUSH
22819: LD_INT 13
22821: PUSH
22822: LD_INT 12
22824: PUSH
22825: LD_INT 15
22827: PUSH
22828: LD_INT 11
22830: PUSH
22831: LD_INT 14
22833: PUSH
22834: LD_INT 10
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: IN
22848: IFFALSE 22858
// btype = b_lab ;
22850: LD_ADDR_VAR 0 1
22854: PUSH
22855: LD_INT 6
22857: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
22858: LD_VAR 0 6
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: LD_INT 1
22868: PUSH
22869: LD_INT 2
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: LIST
22876: IN
22877: NOT
22878: PUSH
22879: LD_VAR 0 1
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: LD_INT 2
22892: PUSH
22893: LD_INT 3
22895: PUSH
22896: LD_INT 6
22898: PUSH
22899: LD_INT 36
22901: PUSH
22902: LD_INT 4
22904: PUSH
22905: LD_INT 5
22907: PUSH
22908: LD_INT 31
22910: PUSH
22911: LD_INT 32
22913: PUSH
22914: LD_INT 33
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: IN
22930: NOT
22931: PUSH
22932: LD_VAR 0 6
22936: PUSH
22937: LD_INT 1
22939: EQUAL
22940: AND
22941: OR
22942: PUSH
22943: LD_VAR 0 1
22947: PUSH
22948: LD_INT 2
22950: PUSH
22951: LD_INT 3
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: IN
22958: NOT
22959: PUSH
22960: LD_VAR 0 6
22964: PUSH
22965: LD_INT 2
22967: EQUAL
22968: AND
22969: OR
22970: IFFALSE 22980
// mode = 0 ;
22972: LD_ADDR_VAR 0 6
22976: PUSH
22977: LD_INT 0
22979: ST_TO_ADDR
// case mode of 0 :
22980: LD_VAR 0 6
22984: PUSH
22985: LD_INT 0
22987: DOUBLE
22988: EQUAL
22989: IFTRUE 22993
22991: GO 34446
22993: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
22994: LD_ADDR_VAR 0 11
22998: PUSH
22999: LD_INT 0
23001: PUSH
23002: LD_INT 0
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 0
23011: PUSH
23012: LD_INT 1
23014: NEG
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 1
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 0
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 1
23052: NEG
23053: PUSH
23054: LD_INT 0
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 1
23063: NEG
23064: PUSH
23065: LD_INT 1
23067: NEG
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 1
23075: NEG
23076: PUSH
23077: LD_INT 2
23079: NEG
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 0
23087: PUSH
23088: LD_INT 2
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 1
23098: PUSH
23099: LD_INT 1
23101: NEG
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 1
23109: PUSH
23110: LD_INT 2
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 0
23119: PUSH
23120: LD_INT 2
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: PUSH
23127: LD_INT 1
23129: NEG
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: LD_INT 3
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 0
23150: PUSH
23151: LD_INT 3
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 1
23160: NEG
23161: PUSH
23162: LD_INT 2
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23187: LD_ADDR_VAR 0 12
23191: PUSH
23192: LD_INT 0
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 0
23204: PUSH
23205: LD_INT 1
23207: NEG
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: LD_INT 0
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: LD_INT 1
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 0
23235: PUSH
23236: LD_INT 1
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: PUSH
23243: LD_INT 1
23245: NEG
23246: PUSH
23247: LD_INT 0
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 1
23256: NEG
23257: PUSH
23258: LD_INT 1
23260: NEG
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 1
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 2
23279: PUSH
23280: LD_INT 0
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 2
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 1
23299: NEG
23300: PUSH
23301: LD_INT 1
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 2
23310: NEG
23311: PUSH
23312: LD_INT 0
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 2
23321: NEG
23322: PUSH
23323: LD_INT 1
23325: NEG
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 2
23333: NEG
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 3
23344: NEG
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 3
23355: NEG
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23383: LD_ADDR_VAR 0 13
23387: PUSH
23388: LD_INT 0
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 0
23400: PUSH
23401: LD_INT 1
23403: NEG
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 1
23411: PUSH
23412: LD_INT 0
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 1
23421: PUSH
23422: LD_INT 1
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: LD_INT 1
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 1
23452: NEG
23453: PUSH
23454: LD_INT 1
23456: NEG
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 1
23464: NEG
23465: PUSH
23466: LD_INT 2
23468: NEG
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 2
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: LD_INT 2
23486: PUSH
23487: LD_INT 2
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: NEG
23507: PUSH
23508: LD_INT 1
23510: NEG
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: PUSH
23516: LD_INT 2
23518: NEG
23519: PUSH
23520: LD_INT 2
23522: NEG
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 2
23530: NEG
23531: PUSH
23532: LD_INT 3
23534: NEG
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 3
23542: NEG
23543: PUSH
23544: LD_INT 2
23546: NEG
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 3
23554: NEG
23555: PUSH
23556: LD_INT 3
23558: NEG
23559: PUSH
23560: EMPTY
23561: LIST
23562: LIST
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23582: LD_ADDR_VAR 0 14
23586: PUSH
23587: LD_INT 0
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 1
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: LD_INT 1
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 0
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 1
23640: NEG
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 1
23651: NEG
23652: PUSH
23653: LD_INT 1
23655: NEG
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PUSH
23661: LD_INT 1
23663: NEG
23664: PUSH
23665: LD_INT 2
23667: NEG
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 0
23675: PUSH
23676: LD_INT 2
23678: NEG
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 1
23686: PUSH
23687: LD_INT 1
23689: NEG
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 1
23697: PUSH
23698: LD_INT 2
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 0
23707: PUSH
23708: LD_INT 2
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 1
23717: NEG
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PUSH
23726: LD_INT 1
23728: NEG
23729: PUSH
23730: LD_INT 3
23732: NEG
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: LD_INT 3
23743: NEG
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: LD_INT 2
23754: NEG
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23778: LD_ADDR_VAR 0 15
23782: PUSH
23783: LD_INT 0
23785: PUSH
23786: LD_INT 0
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 0
23795: PUSH
23796: LD_INT 1
23798: NEG
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 1
23806: PUSH
23807: LD_INT 0
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: LD_INT 1
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: LD_INT 1
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 1
23836: NEG
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: LD_INT 1
23851: NEG
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 2
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: LD_INT 1
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 1
23890: NEG
23891: PUSH
23892: LD_INT 1
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 2
23901: NEG
23902: PUSH
23903: LD_INT 0
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 2
23912: NEG
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 2
23924: PUSH
23925: LD_INT 1
23927: NEG
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 3
23935: PUSH
23936: LD_INT 0
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 3
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23971: LD_ADDR_VAR 0 16
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: LD_INT 0
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: LD_INT 1
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: LD_INT 1
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: LD_INT 1
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: NEG
24053: PUSH
24054: LD_INT 2
24056: NEG
24057: PUSH
24058: EMPTY
24059: LIST
24060: LIST
24061: PUSH
24062: LD_INT 2
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: EMPTY
24069: LIST
24070: LIST
24071: PUSH
24072: LD_INT 2
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PUSH
24092: LD_INT 2
24094: NEG
24095: PUSH
24096: LD_INT 1
24098: NEG
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 2
24106: NEG
24107: PUSH
24108: LD_INT 2
24110: NEG
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 3
24118: PUSH
24119: LD_INT 2
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 3
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 2
24138: PUSH
24139: LD_INT 3
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24164: LD_ADDR_VAR 0 17
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: LD_INT 0
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: LD_INT 0
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: LD_INT 1
24237: NEG
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: NEG
24246: PUSH
24247: LD_INT 2
24249: NEG
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: LD_INT 2
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: LD_INT 1
24271: NEG
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 2
24279: PUSH
24280: LD_INT 0
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 2
24289: PUSH
24290: LD_INT 1
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 2
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: LD_INT 1
24309: PUSH
24310: LD_INT 2
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: PUSH
24317: LD_INT 0
24319: PUSH
24320: LD_INT 2
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PUSH
24338: LD_INT 2
24340: NEG
24341: PUSH
24342: LD_INT 0
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 2
24351: NEG
24352: PUSH
24353: LD_INT 1
24355: NEG
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 2
24363: NEG
24364: PUSH
24365: LD_INT 2
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24394: LD_ADDR_VAR 0 18
24398: PUSH
24399: LD_INT 0
24401: PUSH
24402: LD_INT 0
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 0
24411: PUSH
24412: LD_INT 1
24414: NEG
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 1
24452: NEG
24453: PUSH
24454: LD_INT 0
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: LD_INT 1
24467: NEG
24468: PUSH
24469: EMPTY
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: LD_INT 2
24479: NEG
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 0
24487: PUSH
24488: LD_INT 2
24490: NEG
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PUSH
24496: LD_INT 1
24498: PUSH
24499: LD_INT 1
24501: NEG
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 2
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 1
24539: PUSH
24540: LD_INT 2
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PUSH
24547: LD_INT 0
24549: PUSH
24550: LD_INT 2
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: NEG
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 2
24570: NEG
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 2
24581: NEG
24582: PUSH
24583: LD_INT 1
24585: NEG
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 2
24593: NEG
24594: PUSH
24595: LD_INT 2
24597: NEG
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24624: LD_ADDR_VAR 0 19
24628: PUSH
24629: LD_INT 0
24631: PUSH
24632: LD_INT 0
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: LD_INT 1
24644: NEG
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 1
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 0
24672: PUSH
24673: LD_INT 1
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: LD_INT 0
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 1
24693: NEG
24694: PUSH
24695: LD_INT 1
24697: NEG
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 1
24705: NEG
24706: PUSH
24707: LD_INT 2
24709: NEG
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: LD_INT 0
24717: PUSH
24718: LD_INT 2
24720: NEG
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: LD_INT 1
24731: NEG
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 2
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 2
24749: PUSH
24750: LD_INT 1
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 2
24759: PUSH
24760: LD_INT 2
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: LD_INT 2
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: LD_INT 2
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 1
24789: NEG
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 2
24800: NEG
24801: PUSH
24802: LD_INT 0
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 2
24811: NEG
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 2
24823: NEG
24824: PUSH
24825: LD_INT 2
24827: NEG
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24854: LD_ADDR_VAR 0 20
24858: PUSH
24859: LD_INT 0
24861: PUSH
24862: LD_INT 0
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 0
24871: PUSH
24872: LD_INT 1
24874: NEG
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 1
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: PUSH
24893: LD_INT 1
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: LD_INT 1
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 1
24912: NEG
24913: PUSH
24914: LD_INT 0
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 1
24923: NEG
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 1
24935: NEG
24936: PUSH
24937: LD_INT 2
24939: NEG
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: LD_INT 2
24950: NEG
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: PUSH
24956: LD_INT 1
24958: PUSH
24959: LD_INT 1
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 2
24969: PUSH
24970: LD_INT 0
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 2
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: LD_INT 2
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 1
24999: PUSH
25000: LD_INT 2
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 0
25009: PUSH
25010: LD_INT 2
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: LD_INT 1
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 2
25030: NEG
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 2
25041: NEG
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: LD_INT 2
25053: NEG
25054: PUSH
25055: LD_INT 2
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25084: LD_ADDR_VAR 0 21
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: LD_INT 1
25104: NEG
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 1
25122: PUSH
25123: LD_INT 1
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 1
25142: NEG
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 1
25153: NEG
25154: PUSH
25155: LD_INT 1
25157: NEG
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 1
25165: NEG
25166: PUSH
25167: LD_INT 2
25169: NEG
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: LD_INT 2
25180: NEG
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 1
25191: NEG
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 2
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: LD_INT 2
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 1
25229: PUSH
25230: LD_INT 2
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 0
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 2
25260: NEG
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 2
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 2
25283: NEG
25284: PUSH
25285: LD_INT 2
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25314: LD_ADDR_VAR 0 22
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 0
25331: PUSH
25332: LD_INT 1
25334: NEG
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: LD_INT 1
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 1
25352: PUSH
25353: LD_INT 1
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: LD_INT 1
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 1
25383: NEG
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PUSH
25393: LD_INT 1
25395: NEG
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: LD_INT 1
25421: NEG
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 2
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 2
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 2
25449: PUSH
25450: LD_INT 2
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: PUSH
25460: LD_INT 2
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: LD_INT 0
25469: PUSH
25470: LD_INT 2
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PUSH
25488: LD_INT 2
25490: NEG
25491: PUSH
25492: LD_INT 0
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 2
25501: NEG
25502: PUSH
25503: LD_INT 1
25505: NEG
25506: PUSH
25507: EMPTY
25508: LIST
25509: LIST
25510: PUSH
25511: LD_INT 2
25513: NEG
25514: PUSH
25515: LD_INT 2
25517: NEG
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25544: LD_ADDR_VAR 0 23
25548: PUSH
25549: LD_INT 0
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 0
25561: PUSH
25562: LD_INT 1
25564: NEG
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 1
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 1
25582: PUSH
25583: LD_INT 1
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: LD_INT 1
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: NEG
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 1
25613: NEG
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: LD_INT 2
25629: NEG
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: LD_INT 2
25640: NEG
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: LD_INT 1
25651: NEG
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 2
25659: PUSH
25660: LD_INT 0
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 2
25669: PUSH
25670: LD_INT 1
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: LD_INT 2
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 1
25689: PUSH
25690: LD_INT 2
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 0
25699: PUSH
25700: LD_INT 2
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: NEG
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 2
25720: NEG
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: NEG
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 2
25743: NEG
25744: PUSH
25745: LD_INT 2
25747: NEG
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 2
25755: NEG
25756: PUSH
25757: LD_INT 3
25759: NEG
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 1
25767: NEG
25768: PUSH
25769: LD_INT 3
25771: NEG
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: LD_INT 2
25782: NEG
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: LD_INT 1
25793: NEG
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
25824: LD_ADDR_VAR 0 24
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: LD_INT 0
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 0
25841: PUSH
25842: LD_INT 1
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: LD_INT 1
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: LD_INT 1
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 1
25893: NEG
25894: PUSH
25895: LD_INT 1
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 1
25905: NEG
25906: PUSH
25907: LD_INT 2
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: LD_INT 2
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 2
25939: PUSH
25940: LD_INT 0
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 2
25949: PUSH
25950: LD_INT 1
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 2
25959: PUSH
25960: LD_INT 2
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 1
25969: PUSH
25970: LD_INT 2
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: LD_INT 2
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 1
25989: NEG
25990: PUSH
25991: LD_INT 1
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 2
26000: NEG
26001: PUSH
26002: LD_INT 0
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 2
26011: NEG
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: NEG
26024: PUSH
26025: LD_INT 2
26027: NEG
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: LD_INT 2
26038: NEG
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 2
26046: PUSH
26047: LD_INT 1
26049: NEG
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 3
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 3
26067: PUSH
26068: LD_INT 2
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26100: LD_ADDR_VAR 0 25
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: LD_INT 0
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 0
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 0
26148: PUSH
26149: LD_INT 1
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: LD_INT 1
26158: NEG
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 1
26169: NEG
26170: PUSH
26171: LD_INT 1
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 1
26181: NEG
26182: PUSH
26183: LD_INT 2
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 2
26196: NEG
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 1
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 2
26215: PUSH
26216: LD_INT 0
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 2
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 2
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 0
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: LD_INT 1
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 2
26276: NEG
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 2
26287: NEG
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 2
26299: NEG
26300: PUSH
26301: LD_INT 2
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 3
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 3
26321: PUSH
26322: LD_INT 2
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 2
26331: PUSH
26332: LD_INT 3
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: PUSH
26342: LD_INT 3
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: LIST
26372: LIST
26373: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26374: LD_ADDR_VAR 0 26
26378: PUSH
26379: LD_INT 0
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: LD_INT 0
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 1
26412: PUSH
26413: LD_INT 1
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 0
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 1
26432: NEG
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 1
26443: NEG
26444: PUSH
26445: LD_INT 1
26447: NEG
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 1
26455: NEG
26456: PUSH
26457: LD_INT 2
26459: NEG
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 0
26467: PUSH
26468: LD_INT 2
26470: NEG
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: LD_INT 1
26481: NEG
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 2
26489: PUSH
26490: LD_INT 0
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 2
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: PUSH
26510: LD_INT 2
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: LD_INT 2
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 2
26550: NEG
26551: PUSH
26552: LD_INT 0
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 2
26561: NEG
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 2
26573: NEG
26574: PUSH
26575: LD_INT 2
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: PUSH
26586: LD_INT 3
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: PUSH
26596: LD_INT 3
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 1
26605: NEG
26606: PUSH
26607: LD_INT 2
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 2
26616: NEG
26617: PUSH
26618: LD_INT 1
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26650: LD_ADDR_VAR 0 27
26654: PUSH
26655: LD_INT 0
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: LD_INT 1
26670: NEG
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: PUSH
26676: LD_INT 1
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 1
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 1
26708: NEG
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: NEG
26720: PUSH
26721: LD_INT 1
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: LD_INT 2
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: LD_INT 2
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 1
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: LD_INT 0
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 2
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 1
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 0
26805: PUSH
26806: LD_INT 2
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 1
26815: NEG
26816: PUSH
26817: LD_INT 1
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 2
26826: NEG
26827: PUSH
26828: LD_INT 0
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 2
26837: NEG
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 2
26849: NEG
26850: PUSH
26851: LD_INT 2
26853: NEG
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 2
26872: NEG
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 3
26883: NEG
26884: PUSH
26885: LD_INT 1
26887: NEG
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 3
26895: NEG
26896: PUSH
26897: LD_INT 2
26899: NEG
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
26930: LD_ADDR_VAR 0 28
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: LD_INT 1
26950: NEG
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 1
26988: NEG
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: NEG
27000: PUSH
27001: LD_INT 1
27003: NEG
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: LD_INT 2
27015: NEG
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: LD_INT 2
27026: NEG
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 1
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 2
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 2
27055: PUSH
27056: LD_INT 1
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 2
27065: PUSH
27066: LD_INT 2
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: LD_INT 2
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 0
27085: PUSH
27086: LD_INT 2
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: LD_INT 1
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 2
27106: NEG
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 2
27117: NEG
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 2
27129: NEG
27130: PUSH
27131: LD_INT 2
27133: NEG
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 2
27141: NEG
27142: PUSH
27143: LD_INT 3
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: LD_INT 3
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 3
27165: NEG
27166: PUSH
27167: LD_INT 1
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 3
27177: NEG
27178: PUSH
27179: LD_INT 2
27181: NEG
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27212: LD_ADDR_VAR 0 29
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: LD_INT 1
27232: NEG
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: NEG
27282: PUSH
27283: LD_INT 1
27285: NEG
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: NEG
27294: PUSH
27295: LD_INT 2
27297: NEG
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: LD_INT 2
27308: NEG
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: LD_INT 1
27319: NEG
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 2
27327: PUSH
27328: LD_INT 0
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: LD_INT 1
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 1
27347: PUSH
27348: LD_INT 2
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 0
27357: PUSH
27358: LD_INT 2
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 2
27378: NEG
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 2
27390: NEG
27391: PUSH
27392: LD_INT 2
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 2
27402: NEG
27403: PUSH
27404: LD_INT 3
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 2
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 3
27425: PUSH
27426: LD_INT 1
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: LD_INT 3
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: LD_INT 2
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 3
27456: NEG
27457: PUSH
27458: LD_INT 2
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27491: LD_ADDR_VAR 0 30
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: LD_INT 1
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: NEG
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: LD_INT 1
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: LD_INT 2
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: LD_INT 2
27587: NEG
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: PUSH
27593: LD_INT 1
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 2
27606: PUSH
27607: LD_INT 0
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 2
27616: PUSH
27617: LD_INT 1
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 2
27626: PUSH
27627: LD_INT 2
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: LD_INT 2
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 1
27646: NEG
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 2
27668: NEG
27669: PUSH
27670: LD_INT 1
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 1
27680: NEG
27681: PUSH
27682: LD_INT 3
27684: NEG
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: LD_INT 2
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 3
27703: PUSH
27704: LD_INT 2
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 2
27713: PUSH
27714: LD_INT 3
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 2
27723: NEG
27724: PUSH
27725: LD_INT 1
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 3
27734: NEG
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27769: LD_ADDR_VAR 0 31
27773: PUSH
27774: LD_INT 0
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PUSH
27784: LD_INT 0
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 1
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: EMPTY
27802: LIST
27803: LIST
27804: PUSH
27805: LD_INT 1
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: LD_INT 1
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: LD_INT 0
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: LD_INT 1
27842: NEG
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 2
27854: NEG
27855: PUSH
27856: EMPTY
27857: LIST
27858: LIST
27859: PUSH
27860: LD_INT 1
27862: PUSH
27863: LD_INT 1
27865: NEG
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 2
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 2
27883: PUSH
27884: LD_INT 1
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 2
27893: PUSH
27894: LD_INT 2
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: LD_INT 2
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: LD_INT 2
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: LD_INT 1
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 2
27934: NEG
27935: PUSH
27936: LD_INT 1
27938: NEG
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 2
27946: NEG
27947: PUSH
27948: LD_INT 2
27950: NEG
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 2
27958: NEG
27959: PUSH
27960: LD_INT 3
27962: NEG
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 2
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 3
27981: PUSH
27982: LD_INT 1
27984: PUSH
27985: EMPTY
27986: LIST
27987: LIST
27988: PUSH
27989: LD_INT 1
27991: PUSH
27992: LD_INT 3
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 1
28001: NEG
28002: PUSH
28003: LD_INT 2
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 3
28012: NEG
28013: PUSH
28014: LD_INT 2
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28047: LD_ADDR_VAR 0 32
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: LD_INT 0
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: NEG
28106: PUSH
28107: LD_INT 0
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 1
28116: NEG
28117: PUSH
28118: LD_INT 1
28120: NEG
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: LD_INT 2
28132: NEG
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: LD_INT 2
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 2
28162: PUSH
28163: LD_INT 1
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: LD_INT 2
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: LD_INT 2
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: PUSH
28204: LD_INT 1
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 2
28213: NEG
28214: PUSH
28215: LD_INT 0
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 2
28224: NEG
28225: PUSH
28226: LD_INT 1
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: LD_INT 3
28240: NEG
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 1
28248: PUSH
28249: LD_INT 2
28251: NEG
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 3
28259: PUSH
28260: LD_INT 2
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: LD_INT 3
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 2
28279: NEG
28280: PUSH
28281: LD_INT 1
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 3
28290: NEG
28291: PUSH
28292: LD_INT 1
28294: NEG
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28325: LD_ADDR_VAR 0 33
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: LD_INT 0
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 0
28342: PUSH
28343: LD_INT 1
28345: NEG
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 1
28353: PUSH
28354: LD_INT 0
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: LD_INT 1
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PUSH
28371: LD_INT 0
28373: PUSH
28374: LD_INT 1
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: LD_INT 0
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: LD_INT 1
28398: NEG
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: LD_INT 2
28410: NEG
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: PUSH
28419: LD_INT 1
28421: NEG
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 2
28439: PUSH
28440: LD_INT 1
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: PUSH
28450: LD_INT 2
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 0
28459: PUSH
28460: LD_INT 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: LD_INT 1
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 2
28480: NEG
28481: PUSH
28482: LD_INT 0
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 2
28491: NEG
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 2
28503: NEG
28504: PUSH
28505: LD_INT 2
28507: NEG
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 2
28515: NEG
28516: PUSH
28517: LD_INT 3
28519: NEG
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 2
28527: PUSH
28528: LD_INT 1
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 3
28538: PUSH
28539: LD_INT 1
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 1
28548: PUSH
28549: LD_INT 3
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: LD_INT 2
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 3
28569: NEG
28570: PUSH
28571: LD_INT 2
28573: NEG
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28604: LD_ADDR_VAR 0 34
28608: PUSH
28609: LD_INT 0
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 1
28632: PUSH
28633: LD_INT 0
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: LD_INT 1
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 1
28662: NEG
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: LD_INT 1
28677: NEG
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 1
28685: NEG
28686: PUSH
28687: LD_INT 2
28689: NEG
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: LD_INT 2
28700: NEG
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 1
28708: PUSH
28709: LD_INT 1
28711: NEG
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 2
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 2
28729: PUSH
28730: LD_INT 2
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 1
28749: NEG
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 2
28760: NEG
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 2
28771: NEG
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 2
28783: NEG
28784: PUSH
28785: LD_INT 2
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: LD_INT 3
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 2
28810: NEG
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 3
28818: PUSH
28819: LD_INT 2
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 2
28828: PUSH
28829: LD_INT 3
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 2
28838: NEG
28839: PUSH
28840: LD_INT 1
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 3
28849: NEG
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
28884: LD_ADDR_VAR 0 35
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 1
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 1
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 0
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 1
28942: NEG
28943: PUSH
28944: LD_INT 0
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 1
28953: NEG
28954: PUSH
28955: LD_INT 1
28957: NEG
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 2
28965: PUSH
28966: LD_INT 1
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 2
28975: NEG
28976: PUSH
28977: LD_INT 1
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
28996: LD_ADDR_VAR 0 36
29000: PUSH
29001: LD_INT 0
29003: PUSH
29004: LD_INT 0
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: LD_INT 1
29016: NEG
29017: PUSH
29018: EMPTY
29019: LIST
29020: LIST
29021: PUSH
29022: LD_INT 1
29024: PUSH
29025: LD_INT 0
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: PUSH
29035: LD_INT 1
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 0
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 1
29054: NEG
29055: PUSH
29056: LD_INT 0
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 1
29065: NEG
29066: PUSH
29067: LD_INT 1
29069: NEG
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: LD_INT 2
29081: NEG
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29108: LD_ADDR_VAR 0 37
29112: PUSH
29113: LD_INT 0
29115: PUSH
29116: LD_INT 0
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: LD_INT 1
29128: NEG
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 1
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 1
29146: PUSH
29147: LD_INT 1
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: LD_INT 1
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 1
29177: NEG
29178: PUSH
29179: LD_INT 1
29181: NEG
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 1
29200: NEG
29201: PUSH
29202: LD_INT 1
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: LIST
29213: LIST
29214: LIST
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29220: LD_ADDR_VAR 0 38
29224: PUSH
29225: LD_INT 0
29227: PUSH
29228: LD_INT 0
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 0
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 1
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: LD_INT 1
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 0
29268: PUSH
29269: LD_INT 1
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: LD_INT 1
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 2
29311: NEG
29312: PUSH
29313: LD_INT 1
29315: NEG
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29332: LD_ADDR_VAR 0 39
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: LD_INT 1
29352: NEG
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: LD_INT 1
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 0
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 1
29390: NEG
29391: PUSH
29392: LD_INT 0
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PUSH
29411: LD_INT 1
29413: NEG
29414: PUSH
29415: LD_INT 2
29417: NEG
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29444: LD_ADDR_VAR 0 40
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: LD_INT 0
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 0
29461: PUSH
29462: LD_INT 1
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 1
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: LD_INT 1
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 1
29502: NEG
29503: PUSH
29504: LD_INT 0
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 1
29513: NEG
29514: PUSH
29515: LD_INT 1
29517: NEG
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 1
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29556: LD_ADDR_VAR 0 41
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: LD_INT 1
29576: NEG
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 1
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: LD_INT 1
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 0
29604: PUSH
29605: LD_INT 1
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: NEG
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 1
29637: NEG
29638: PUSH
29639: LD_INT 2
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: LD_INT 1
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: LD_INT 0
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 2
29680: PUSH
29681: LD_INT 2
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: LD_INT 2
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: NEG
29701: PUSH
29702: LD_INT 1
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 2
29711: NEG
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 2
29722: NEG
29723: PUSH
29724: LD_INT 1
29726: NEG
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 2
29734: NEG
29735: PUSH
29736: LD_INT 2
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: NEG
29747: PUSH
29748: LD_INT 3
29750: NEG
29751: PUSH
29752: EMPTY
29753: LIST
29754: LIST
29755: PUSH
29756: LD_INT 2
29758: PUSH
29759: LD_INT 1
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 3
29769: PUSH
29770: LD_INT 0
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 3
29789: PUSH
29790: LD_INT 2
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 3
29799: PUSH
29800: LD_INT 3
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 2
29809: PUSH
29810: LD_INT 3
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 2
29819: NEG
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 3
29830: NEG
29831: PUSH
29832: LD_INT 0
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 3
29841: NEG
29842: PUSH
29843: LD_INT 1
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 3
29853: NEG
29854: PUSH
29855: LD_INT 2
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 3
29865: NEG
29866: PUSH
29867: LD_INT 3
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29906: LD_ADDR_VAR 0 42
29910: PUSH
29911: LD_INT 0
29913: PUSH
29914: LD_INT 0
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 0
29923: PUSH
29924: LD_INT 1
29926: NEG
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: PUSH
29932: LD_INT 1
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 0
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 1
29964: NEG
29965: PUSH
29966: LD_INT 0
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: LD_INT 1
29979: NEG
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: LD_INT 2
29991: NEG
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: LD_INT 2
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 1
30010: PUSH
30011: LD_INT 1
30013: NEG
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 2
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 2
30031: PUSH
30032: LD_INT 2
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: LD_INT 2
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 0
30051: PUSH
30052: LD_INT 2
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 2
30072: NEG
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 2
30084: NEG
30085: PUSH
30086: LD_INT 2
30088: NEG
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 2
30096: NEG
30097: PUSH
30098: LD_INT 3
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: LD_INT 3
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 0
30120: PUSH
30121: LD_INT 3
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 1
30131: PUSH
30132: LD_INT 2
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 3
30142: PUSH
30143: LD_INT 2
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 3
30152: PUSH
30153: LD_INT 3
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 2
30162: PUSH
30163: LD_INT 3
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: LD_INT 3
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: LD_INT 3
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: LD_INT 2
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 3
30203: NEG
30204: PUSH
30205: LD_INT 2
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 3
30215: NEG
30216: PUSH
30217: LD_INT 3
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30256: LD_ADDR_VAR 0 43
30260: PUSH
30261: LD_INT 0
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: LD_INT 0
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 1
30294: PUSH
30295: LD_INT 1
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 0
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: NEG
30315: PUSH
30316: LD_INT 0
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 1
30337: NEG
30338: PUSH
30339: LD_INT 2
30341: NEG
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: LD_INT 0
30349: PUSH
30350: LD_INT 2
30352: NEG
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 1
30360: PUSH
30361: LD_INT 1
30363: NEG
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: LD_INT 2
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: LD_INT 1
30415: PUSH
30416: EMPTY
30417: LIST
30418: LIST
30419: PUSH
30420: LD_INT 2
30422: NEG
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 2
30433: NEG
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 1
30445: NEG
30446: PUSH
30447: LD_INT 3
30449: NEG
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: LD_INT 3
30460: NEG
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 1
30468: PUSH
30469: LD_INT 2
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 2
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 3
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 3
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: LD_INT 3
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: LD_INT 3
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: LD_INT 2
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 2
30541: NEG
30542: PUSH
30543: LD_INT 1
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 3
30552: NEG
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 3
30563: NEG
30564: PUSH
30565: LD_INT 1
30567: NEG
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30604: LD_ADDR_VAR 0 44
30608: PUSH
30609: LD_INT 0
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 0
30621: PUSH
30622: LD_INT 1
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: LD_INT 0
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 1
30642: PUSH
30643: LD_INT 1
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: LD_INT 1
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 1
30662: NEG
30663: PUSH
30664: LD_INT 0
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PUSH
30675: LD_INT 1
30677: NEG
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 1
30685: NEG
30686: PUSH
30687: LD_INT 2
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: LD_INT 1
30700: NEG
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PUSH
30706: LD_INT 2
30708: PUSH
30709: LD_INT 0
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 2
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 2
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 1
30748: NEG
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 2
30759: NEG
30760: PUSH
30761: LD_INT 0
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 2
30770: NEG
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 2
30782: NEG
30783: PUSH
30784: LD_INT 2
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 2
30794: NEG
30795: PUSH
30796: LD_INT 3
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 2
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 3
30817: PUSH
30818: LD_INT 0
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 3
30827: PUSH
30828: LD_INT 1
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 3
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 3
30847: PUSH
30848: LD_INT 3
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: LD_INT 3
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: NEG
30868: PUSH
30869: LD_INT 1
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 3
30878: NEG
30879: PUSH
30880: LD_INT 0
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 3
30889: NEG
30890: PUSH
30891: LD_INT 1
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 3
30901: NEG
30902: PUSH
30903: LD_INT 2
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 3
30913: NEG
30914: PUSH
30915: LD_INT 3
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30954: LD_ADDR_VAR 0 45
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 0
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: LD_INT 0
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: LD_INT 1
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 0
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 1
31023: NEG
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 1
31035: NEG
31036: PUSH
31037: LD_INT 2
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: LD_INT 2
31050: NEG
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: LD_INT 1
31061: NEG
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 2
31069: PUSH
31070: LD_INT 1
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 2
31079: PUSH
31080: LD_INT 2
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 2
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 2
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 2
31144: NEG
31145: PUSH
31146: LD_INT 3
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: LD_INT 3
31160: NEG
31161: PUSH
31162: EMPTY
31163: LIST
31164: LIST
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: LD_INT 3
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: LD_INT 2
31182: NEG
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 3
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 3
31200: PUSH
31201: LD_INT 3
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 2
31210: PUSH
31211: LD_INT 3
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: LD_INT 3
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 3
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: LD_INT 2
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 3
31251: NEG
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 3
31263: NEG
31264: PUSH
31265: LD_INT 3
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31304: LD_ADDR_VAR 0 46
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 0
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: LD_INT 0
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: LD_INT 2
31389: NEG
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: LD_INT 2
31400: NEG
31401: PUSH
31402: EMPTY
31403: LIST
31404: LIST
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: LD_INT 1
31411: NEG
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: LD_INT 0
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: LD_INT 2
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 1
31459: NEG
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 2
31470: NEG
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: LD_INT 1
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 1
31493: NEG
31494: PUSH
31495: LD_INT 3
31497: NEG
31498: PUSH
31499: EMPTY
31500: LIST
31501: LIST
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: LD_INT 3
31508: NEG
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: LD_INT 2
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 2
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 3
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 3
31548: PUSH
31549: LD_INT 1
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: LD_INT 3
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: LD_INT 3
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 2
31589: NEG
31590: PUSH
31591: LD_INT 1
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 3
31600: NEG
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 3
31611: NEG
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31652: LD_ADDR_VAR 0 47
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 0
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: LD_INT 0
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: PUSH
31688: LD_INT 1
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 0
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: NEG
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: NEG
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: NEG
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: LD_INT 2
31748: NEG
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 2
31767: NEG
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 2
31779: NEG
31780: PUSH
31781: LD_INT 2
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31803: LD_ADDR_VAR 0 48
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: LD_INT 0
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: LD_INT 1
31823: NEG
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 1
31831: PUSH
31832: LD_INT 0
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 1
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 1
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 1
31861: NEG
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: LD_INT 1
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: LD_INT 2
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 1
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 2
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 2
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31950: LD_ADDR_VAR 0 49
31954: PUSH
31955: LD_INT 0
31957: PUSH
31958: LD_INT 0
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: LD_INT 1
31970: NEG
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 1
31978: PUSH
31979: LD_INT 0
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 0
31998: PUSH
31999: LD_INT 1
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 1
32008: NEG
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 2
32042: PUSH
32043: LD_INT 0
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: PUSH
32053: LD_INT 1
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32094: LD_ADDR_VAR 0 50
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: LD_INT 0
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 1
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 0
32142: PUSH
32143: LD_INT 1
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: PUSH
32154: LD_INT 0
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: LD_INT 1
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 2
32175: PUSH
32176: LD_INT 1
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: LD_INT 2
32185: PUSH
32186: LD_INT 2
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: LD_INT 1
32195: PUSH
32196: LD_INT 2
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 0
32205: PUSH
32206: LD_INT 2
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32238: LD_ADDR_VAR 0 51
32242: PUSH
32243: LD_INT 0
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 1
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 1
32266: PUSH
32267: LD_INT 0
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: LD_INT 1
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: LD_INT 1
32311: NEG
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 2
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: LD_INT 2
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: NEG
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 2
32361: NEG
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32385: LD_ADDR_VAR 0 52
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PUSH
32445: LD_INT 0
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: NEG
32455: PUSH
32456: LD_INT 1
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: LD_INT 2
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: NEG
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 2
32489: NEG
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 2
32500: NEG
32501: PUSH
32502: LD_INT 1
32504: NEG
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 2
32512: NEG
32513: PUSH
32514: LD_INT 2
32516: NEG
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32536: LD_ADDR_VAR 0 53
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 1
32564: PUSH
32565: LD_INT 0
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: PUSH
32572: LD_INT 1
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PUSH
32582: LD_INT 0
32584: PUSH
32585: LD_INT 1
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 1
32594: NEG
32595: PUSH
32596: LD_INT 0
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: NEG
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 1
32617: NEG
32618: PUSH
32619: LD_INT 2
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 2
32632: NEG
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: LD_INT 1
32643: NEG
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 2
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: PUSH
32672: LD_INT 2
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: LD_INT 2
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: LD_INT 2
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 1
32701: NEG
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: LD_INT 0
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 2
32723: NEG
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 2
32735: NEG
32736: PUSH
32737: LD_INT 2
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32766: LD_ADDR_VAR 0 54
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: LD_INT 0
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: LD_INT 1
32786: NEG
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: EMPTY
32799: LIST
32800: LIST
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: LD_INT 1
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 1
32824: NEG
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: LD_INT 1
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: LD_INT 2
32851: NEG
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: LD_INT 2
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 2
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 1
32911: PUSH
32912: LD_INT 2
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 0
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 1
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: NEG
32943: PUSH
32944: LD_INT 0
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 2
32953: NEG
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 2
32965: NEG
32966: PUSH
32967: LD_INT 2
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32996: LD_ADDR_VAR 0 55
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 0
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: LD_INT 0
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 1
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: LD_INT 1
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 1
33065: NEG
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: LD_INT 2
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 2
33121: PUSH
33122: LD_INT 1
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 2
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 1
33141: PUSH
33142: LD_INT 2
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: LD_INT 2
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 1
33161: NEG
33162: PUSH
33163: LD_INT 1
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 2
33172: NEG
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 2
33183: NEG
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 2
33195: NEG
33196: PUSH
33197: LD_INT 2
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33226: LD_ADDR_VAR 0 56
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: LD_INT 1
33246: NEG
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: LD_INT 1
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: LD_INT 1
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 1
33284: NEG
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: LD_INT 2
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 2
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 2
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 2
33351: PUSH
33352: LD_INT 1
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 2
33361: PUSH
33362: LD_INT 2
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: LD_INT 2
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 1
33391: NEG
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 2
33402: NEG
33403: PUSH
33404: LD_INT 0
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 2
33413: NEG
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 2
33425: NEG
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33456: LD_ADDR_VAR 0 57
33460: PUSH
33461: LD_INT 0
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 0
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 1
33484: PUSH
33485: LD_INT 0
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: PUSH
33516: LD_INT 0
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: LD_INT 1
33529: NEG
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: LD_INT 2
33541: NEG
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: LD_INT 2
33552: NEG
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 1
33560: PUSH
33561: LD_INT 1
33563: NEG
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 2
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 2
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 2
33591: PUSH
33592: LD_INT 2
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: LD_INT 2
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 0
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: LD_INT 1
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: PUSH
33630: LD_INT 2
33632: NEG
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 2
33643: NEG
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 2
33655: NEG
33656: PUSH
33657: LD_INT 2
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33686: LD_ADDR_VAR 0 58
33690: PUSH
33691: LD_INT 0
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 0
33734: PUSH
33735: LD_INT 1
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 1
33744: NEG
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: NEG
33768: PUSH
33769: LD_INT 2
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: LD_INT 2
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 2
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 2
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: PUSH
33822: LD_INT 2
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 1
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 0
33841: PUSH
33842: LD_INT 2
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 1
33851: NEG
33852: PUSH
33853: LD_INT 1
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 2
33862: NEG
33863: PUSH
33864: LD_INT 0
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 2
33873: NEG
33874: PUSH
33875: LD_INT 1
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 2
33885: NEG
33886: PUSH
33887: LD_INT 2
33889: NEG
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
33916: LD_ADDR_VAR 0 59
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34004: LD_ADDR_VAR 0 60
34008: PUSH
34009: LD_INT 0
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: PUSH
34043: LD_INT 1
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: LD_INT 1
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: NEG
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34092: LD_ADDR_VAR 0 61
34096: PUSH
34097: LD_INT 0
34099: PUSH
34100: LD_INT 0
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: LD_INT 1
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 0
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 1
34161: NEG
34162: PUSH
34163: LD_INT 1
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34180: LD_ADDR_VAR 0 62
34184: PUSH
34185: LD_INT 0
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 0
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: EMPTY
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 1
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: LD_INT 1
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: LD_INT 1
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: PUSH
34236: LD_INT 1
34238: NEG
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34268: LD_ADDR_VAR 0 63
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: LD_INT 1
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: NEG
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34356: LD_ADDR_VAR 0 64
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: LD_INT 0
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: LD_INT 1
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 1
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: LD_INT 1
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 0
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: LD_INT 1
34429: NEG
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: ST_TO_ADDR
// end ; 1 :
34444: GO 40341
34446: LD_INT 1
34448: DOUBLE
34449: EQUAL
34450: IFTRUE 34454
34452: GO 37077
34454: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34455: LD_ADDR_VAR 0 11
34459: PUSH
34460: LD_INT 1
34462: NEG
34463: PUSH
34464: LD_INT 3
34466: NEG
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 0
34474: PUSH
34475: LD_INT 3
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: LD_INT 2
34488: NEG
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: LIST
34498: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34499: LD_ADDR_VAR 0 12
34503: PUSH
34504: LD_INT 2
34506: PUSH
34507: LD_INT 1
34509: NEG
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 3
34517: PUSH
34518: LD_INT 0
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 3
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: LIST
34539: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34540: LD_ADDR_VAR 0 13
34544: PUSH
34545: LD_INT 3
34547: PUSH
34548: LD_INT 2
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: LD_INT 3
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: LD_INT 3
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: LIST
34579: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34580: LD_ADDR_VAR 0 14
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 0
34597: PUSH
34598: LD_INT 3
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: LD_INT 2
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: LIST
34620: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34621: LD_ADDR_VAR 0 15
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 3
34639: NEG
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 3
34650: NEG
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: LIST
34664: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34665: LD_ADDR_VAR 0 16
34669: PUSH
34670: LD_INT 2
34672: NEG
34673: PUSH
34674: LD_INT 3
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 3
34684: NEG
34685: PUSH
34686: LD_INT 2
34688: NEG
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 3
34696: NEG
34697: PUSH
34698: LD_INT 3
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34711: LD_ADDR_VAR 0 17
34715: PUSH
34716: LD_INT 1
34718: NEG
34719: PUSH
34720: LD_INT 3
34722: NEG
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: LD_INT 3
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: LD_INT 2
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: LIST
34754: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34755: LD_ADDR_VAR 0 18
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: LD_INT 1
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 3
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: LD_INT 3
34783: PUSH
34784: LD_INT 1
34786: PUSH
34787: EMPTY
34788: LIST
34789: LIST
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34796: LD_ADDR_VAR 0 19
34800: PUSH
34801: LD_INT 3
34803: PUSH
34804: LD_INT 2
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 3
34813: PUSH
34814: LD_INT 3
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 2
34823: PUSH
34824: LD_INT 3
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: LIST
34835: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34836: LD_ADDR_VAR 0 20
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 3
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 3
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: LD_INT 2
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: LIST
34876: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34877: LD_ADDR_VAR 0 21
34881: PUSH
34882: LD_INT 2
34884: NEG
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 3
34895: NEG
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 3
34906: NEG
34907: PUSH
34908: LD_INT 1
34910: NEG
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: LIST
34920: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34921: LD_ADDR_VAR 0 22
34925: PUSH
34926: LD_INT 2
34928: NEG
34929: PUSH
34930: LD_INT 3
34932: NEG
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 3
34940: NEG
34941: PUSH
34942: LD_INT 2
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 3
34952: NEG
34953: PUSH
34954: LD_INT 3
34956: NEG
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: LIST
34966: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
34967: LD_ADDR_VAR 0 23
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: LD_INT 3
34977: NEG
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: LD_INT 4
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: LD_INT 3
35000: NEG
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: LIST
35010: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35011: LD_ADDR_VAR 0 24
35015: PUSH
35016: LD_INT 3
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 3
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 4
35039: PUSH
35040: LD_INT 1
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35052: LD_ADDR_VAR 0 25
35056: PUSH
35057: LD_INT 3
35059: PUSH
35060: LD_INT 3
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 4
35069: PUSH
35070: LD_INT 3
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 3
35079: PUSH
35080: LD_INT 4
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: LIST
35091: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35092: LD_ADDR_VAR 0 26
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: LD_INT 3
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: LD_INT 4
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: PUSH
35121: LD_INT 3
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35133: LD_ADDR_VAR 0 27
35137: PUSH
35138: LD_INT 3
35140: NEG
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 3
35151: NEG
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 4
35162: NEG
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: LIST
35176: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35177: LD_ADDR_VAR 0 28
35181: PUSH
35182: LD_INT 3
35184: NEG
35185: PUSH
35186: LD_INT 3
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 3
35196: NEG
35197: PUSH
35198: LD_INT 4
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 4
35208: NEG
35209: PUSH
35210: LD_INT 3
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: LIST
35222: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35223: LD_ADDR_VAR 0 29
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: LD_INT 3
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: LD_INT 3
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: LD_INT 2
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: NEG
35265: PUSH
35266: LD_INT 4
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 0
35276: PUSH
35277: LD_INT 4
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: LD_INT 3
35290: NEG
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: NEG
35299: PUSH
35300: LD_INT 5
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: LD_INT 5
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: LD_INT 4
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: NEG
35333: PUSH
35334: LD_INT 6
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: LD_INT 6
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: LD_INT 5
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35378: LD_ADDR_VAR 0 30
35382: PUSH
35383: LD_INT 2
35385: PUSH
35386: LD_INT 1
35388: NEG
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 3
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 3
35406: PUSH
35407: LD_INT 1
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 3
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 4
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 4
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 4
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 5
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 5
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 5
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 6
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 6
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35521: LD_ADDR_VAR 0 31
35525: PUSH
35526: LD_INT 3
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 3
35538: PUSH
35539: LD_INT 3
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 2
35548: PUSH
35549: LD_INT 3
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 4
35558: PUSH
35559: LD_INT 3
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 4
35568: PUSH
35569: LD_INT 4
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 3
35578: PUSH
35579: LD_INT 4
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 5
35588: PUSH
35589: LD_INT 4
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 5
35598: PUSH
35599: LD_INT 5
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 4
35608: PUSH
35609: LD_INT 5
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 6
35618: PUSH
35619: LD_INT 5
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 6
35628: PUSH
35629: LD_INT 6
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 5
35638: PUSH
35639: LD_INT 6
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
35660: LD_ADDR_VAR 0 32
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: LD_INT 3
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: LD_INT 3
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 1
35687: NEG
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: LD_INT 4
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: LD_INT 4
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: LD_INT 5
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: LD_INT 5
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 1
35749: NEG
35750: PUSH
35751: LD_INT 4
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: LD_INT 6
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: LD_INT 6
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: LD_INT 5
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
35803: LD_ADDR_VAR 0 33
35807: PUSH
35808: LD_INT 2
35810: NEG
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 3
35821: NEG
35822: PUSH
35823: LD_INT 0
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 3
35832: NEG
35833: PUSH
35834: LD_INT 1
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 3
35844: NEG
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 4
35855: NEG
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 4
35866: NEG
35867: PUSH
35868: LD_INT 1
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 4
35878: NEG
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 5
35889: NEG
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 5
35900: NEG
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 5
35912: NEG
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 6
35923: NEG
35924: PUSH
35925: LD_INT 0
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 6
35934: NEG
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
35958: LD_ADDR_VAR 0 34
35962: PUSH
35963: LD_INT 2
35965: NEG
35966: PUSH
35967: LD_INT 3
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 3
35977: NEG
35978: PUSH
35979: LD_INT 2
35981: NEG
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: PUSH
35987: LD_INT 3
35989: NEG
35990: PUSH
35991: LD_INT 3
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 3
36001: NEG
36002: PUSH
36003: LD_INT 4
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 4
36013: NEG
36014: PUSH
36015: LD_INT 3
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 4
36025: NEG
36026: PUSH
36027: LD_INT 4
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 4
36037: NEG
36038: PUSH
36039: LD_INT 5
36041: NEG
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: LD_INT 5
36049: NEG
36050: PUSH
36051: LD_INT 4
36053: NEG
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 5
36061: NEG
36062: PUSH
36063: LD_INT 5
36065: NEG
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 5
36073: NEG
36074: PUSH
36075: LD_INT 6
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 6
36085: NEG
36086: PUSH
36087: LD_INT 5
36089: NEG
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: PUSH
36095: LD_INT 6
36097: NEG
36098: PUSH
36099: LD_INT 6
36101: NEG
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36121: LD_ADDR_VAR 0 41
36125: PUSH
36126: LD_INT 0
36128: PUSH
36129: LD_INT 2
36131: NEG
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 3
36143: NEG
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: LD_INT 2
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36165: LD_ADDR_VAR 0 42
36169: PUSH
36170: LD_INT 2
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 2
36182: PUSH
36183: LD_INT 1
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 3
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36206: LD_ADDR_VAR 0 43
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: LD_INT 2
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 3
36223: PUSH
36224: LD_INT 2
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 2
36233: PUSH
36234: LD_INT 3
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36246: LD_ADDR_VAR 0 44
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: LD_INT 2
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: LD_INT 3
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: LD_INT 2
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: LIST
36286: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36287: LD_ADDR_VAR 0 45
36291: PUSH
36292: LD_INT 2
36294: NEG
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 2
36305: NEG
36306: PUSH
36307: LD_INT 1
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 3
36316: NEG
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: LIST
36330: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36331: LD_ADDR_VAR 0 46
36335: PUSH
36336: LD_INT 2
36338: NEG
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 2
36350: NEG
36351: PUSH
36352: LD_INT 3
36354: NEG
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 3
36362: NEG
36363: PUSH
36364: LD_INT 2
36366: NEG
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36377: LD_ADDR_VAR 0 47
36381: PUSH
36382: LD_INT 2
36384: NEG
36385: PUSH
36386: LD_INT 3
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 1
36396: NEG
36397: PUSH
36398: LD_INT 3
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36410: LD_ADDR_VAR 0 48
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: LD_INT 2
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: LD_INT 1
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36441: LD_ADDR_VAR 0 49
36445: PUSH
36446: LD_INT 3
36448: PUSH
36449: LD_INT 1
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 3
36458: PUSH
36459: LD_INT 2
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36470: LD_ADDR_VAR 0 50
36474: PUSH
36475: LD_INT 2
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 3
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36499: LD_ADDR_VAR 0 51
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: LD_INT 2
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 2
36517: NEG
36518: PUSH
36519: LD_INT 1
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36530: LD_ADDR_VAR 0 52
36534: PUSH
36535: LD_INT 3
36537: NEG
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 3
36549: NEG
36550: PUSH
36551: LD_INT 2
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36563: LD_ADDR_VAR 0 53
36567: PUSH
36568: LD_INT 1
36570: NEG
36571: PUSH
36572: LD_INT 3
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: LD_INT 3
36585: NEG
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: LD_INT 2
36596: NEG
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: LIST
36606: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36607: LD_ADDR_VAR 0 54
36611: PUSH
36612: LD_INT 2
36614: PUSH
36615: LD_INT 1
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 3
36625: PUSH
36626: LD_INT 0
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 3
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36648: LD_ADDR_VAR 0 55
36652: PUSH
36653: LD_INT 3
36655: PUSH
36656: LD_INT 2
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 3
36665: PUSH
36666: LD_INT 3
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 2
36675: PUSH
36676: LD_INT 3
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: LIST
36687: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36688: LD_ADDR_VAR 0 56
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: LD_INT 3
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: LD_INT 3
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: LD_INT 2
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: LIST
36728: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36729: LD_ADDR_VAR 0 57
36733: PUSH
36734: LD_INT 2
36736: NEG
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 3
36747: NEG
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 3
36758: NEG
36759: PUSH
36760: LD_INT 1
36762: NEG
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36773: LD_ADDR_VAR 0 58
36777: PUSH
36778: LD_INT 2
36780: NEG
36781: PUSH
36782: LD_INT 3
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 3
36792: NEG
36793: PUSH
36794: LD_INT 2
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 3
36804: NEG
36805: PUSH
36806: LD_INT 3
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
36819: LD_ADDR_VAR 0 59
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: LD_INT 2
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: LD_INT 2
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: LD_INT 1
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
36863: LD_ADDR_VAR 0 60
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 2
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 2
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: LIST
36903: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36904: LD_ADDR_VAR 0 61
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: LD_INT 2
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: LIST
36943: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36944: LD_ADDR_VAR 0 62
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: LD_INT 2
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36985: LD_ADDR_VAR 0 63
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 2
37003: NEG
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: LIST
37028: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37029: LD_ADDR_VAR 0 64
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: LD_INT 2
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 2
37048: NEG
37049: PUSH
37050: LD_INT 1
37052: NEG
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: LD_INT 2
37064: NEG
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: LIST
37074: ST_TO_ADDR
// end ; 2 :
37075: GO 40341
37077: LD_INT 2
37079: DOUBLE
37080: EQUAL
37081: IFTRUE 37085
37083: GO 40340
37085: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37086: LD_ADDR_VAR 0 29
37090: PUSH
37091: LD_INT 4
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 4
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 5
37114: PUSH
37115: LD_INT 0
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 5
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 4
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 3
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 3
37154: PUSH
37155: LD_INT 1
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 3
37165: PUSH
37166: LD_INT 2
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 5
37176: PUSH
37177: LD_INT 2
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 3
37186: PUSH
37187: LD_INT 3
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 4
37206: PUSH
37207: LD_INT 3
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 4
37216: PUSH
37217: LD_INT 4
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 3
37226: PUSH
37227: LD_INT 4
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: LD_INT 3
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 4
37256: PUSH
37257: LD_INT 2
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 2
37266: PUSH
37267: LD_INT 4
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: LD_INT 4
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: LD_INT 3
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: LD_INT 4
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: LD_INT 5
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: LD_INT 5
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: LD_INT 4
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 3
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 2
37348: PUSH
37349: LD_INT 5
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 2
37358: NEG
37359: PUSH
37360: LD_INT 3
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 3
37369: NEG
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 3
37380: NEG
37381: PUSH
37382: LD_INT 1
37384: NEG
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: NEG
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 2
37403: NEG
37404: PUSH
37405: LD_INT 1
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 3
37414: NEG
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 4
37425: NEG
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 4
37436: NEG
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 4
37448: NEG
37449: PUSH
37450: LD_INT 2
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 2
37460: NEG
37461: PUSH
37462: LD_INT 2
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 4
37471: NEG
37472: PUSH
37473: LD_INT 4
37475: NEG
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 4
37483: NEG
37484: PUSH
37485: LD_INT 5
37487: NEG
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 3
37495: NEG
37496: PUSH
37497: LD_INT 4
37499: NEG
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 3
37507: NEG
37508: PUSH
37509: LD_INT 3
37511: NEG
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 4
37519: NEG
37520: PUSH
37521: LD_INT 3
37523: NEG
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 5
37531: NEG
37532: PUSH
37533: LD_INT 4
37535: NEG
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 5
37543: NEG
37544: PUSH
37545: LD_INT 5
37547: NEG
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 3
37555: NEG
37556: PUSH
37557: LD_INT 5
37559: NEG
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 5
37567: NEG
37568: PUSH
37569: LD_INT 3
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
37624: LD_ADDR_VAR 0 30
37628: PUSH
37629: LD_INT 4
37631: PUSH
37632: LD_INT 4
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 4
37641: PUSH
37642: LD_INT 3
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 5
37651: PUSH
37652: LD_INT 4
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 5
37661: PUSH
37662: LD_INT 5
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 4
37671: PUSH
37672: LD_INT 5
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 3
37681: PUSH
37682: LD_INT 4
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 3
37691: PUSH
37692: LD_INT 3
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 5
37701: PUSH
37702: LD_INT 3
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 3
37711: PUSH
37712: LD_INT 5
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: LD_INT 3
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: LD_INT 3
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: LD_INT 4
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 4
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: LD_INT 3
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 2
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 2
37793: PUSH
37794: LD_INT 4
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: LD_INT 2
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 4
37814: NEG
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 4
37825: NEG
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 3
37837: NEG
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 3
37848: NEG
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 4
37859: NEG
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 5
37870: NEG
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 5
37881: NEG
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 5
37893: NEG
37894: PUSH
37895: LD_INT 2
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 3
37905: NEG
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 3
37916: NEG
37917: PUSH
37918: LD_INT 3
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 3
37928: NEG
37929: PUSH
37930: LD_INT 4
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 2
37940: NEG
37941: PUSH
37942: LD_INT 3
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: NEG
37953: PUSH
37954: LD_INT 2
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 3
37964: NEG
37965: PUSH
37966: LD_INT 2
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 4
37976: NEG
37977: PUSH
37978: LD_INT 3
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 4
37988: NEG
37989: PUSH
37990: LD_INT 4
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 2
38000: NEG
38001: PUSH
38002: LD_INT 4
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 4
38012: NEG
38013: PUSH
38014: LD_INT 2
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 4
38027: NEG
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 0
38035: PUSH
38036: LD_INT 5
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 1
38046: PUSH
38047: LD_INT 4
38049: NEG
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: LD_INT 3
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 0
38068: PUSH
38069: LD_INT 3
38071: NEG
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 1
38079: NEG
38080: PUSH
38081: LD_INT 4
38083: NEG
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: LD_INT 5
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: PUSH
38104: LD_INT 3
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 2
38114: NEG
38115: PUSH
38116: LD_INT 5
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38171: LD_ADDR_VAR 0 31
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 4
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: LD_INT 3
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: LD_INT 1
38198: PUSH
38199: LD_INT 4
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 1
38208: PUSH
38209: LD_INT 5
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: LD_INT 5
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 1
38228: NEG
38229: PUSH
38230: LD_INT 4
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 1
38239: NEG
38240: PUSH
38241: LD_INT 3
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: LD_INT 5
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 2
38260: NEG
38261: PUSH
38262: LD_INT 3
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 3
38271: NEG
38272: PUSH
38273: LD_INT 0
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 3
38282: NEG
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 2
38305: NEG
38306: PUSH
38307: LD_INT 1
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 3
38316: NEG
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 4
38327: NEG
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 4
38338: NEG
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 4
38350: NEG
38351: PUSH
38352: LD_INT 2
38354: NEG
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 2
38362: NEG
38363: PUSH
38364: LD_INT 2
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 4
38373: NEG
38374: PUSH
38375: LD_INT 4
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 4
38385: NEG
38386: PUSH
38387: LD_INT 5
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 3
38397: NEG
38398: PUSH
38399: LD_INT 4
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 3
38409: NEG
38410: PUSH
38411: LD_INT 3
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 4
38421: NEG
38422: PUSH
38423: LD_INT 3
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 5
38433: NEG
38434: PUSH
38435: LD_INT 4
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 5
38445: NEG
38446: PUSH
38447: LD_INT 5
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 3
38457: NEG
38458: PUSH
38459: LD_INT 5
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 5
38469: NEG
38470: PUSH
38471: LD_INT 3
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: LD_INT 3
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 0
38492: PUSH
38493: LD_INT 4
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: LD_INT 3
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: LD_INT 2
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: LD_INT 2
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 3
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: LD_INT 4
38552: NEG
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 2
38571: NEG
38572: PUSH
38573: LD_INT 4
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 4
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 4
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 5
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 5
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 4
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 3
38655: PUSH
38656: LD_INT 2
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 5
38666: PUSH
38667: LD_INT 2
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
38721: LD_ADDR_VAR 0 32
38725: PUSH
38726: LD_INT 4
38728: NEG
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 4
38739: NEG
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 3
38751: NEG
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 3
38762: NEG
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 4
38773: NEG
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 5
38784: NEG
38785: PUSH
38786: LD_INT 0
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 5
38795: NEG
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 5
38807: NEG
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 3
38819: NEG
38820: PUSH
38821: LD_INT 2
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 3
38830: NEG
38831: PUSH
38832: LD_INT 3
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 3
38842: NEG
38843: PUSH
38844: LD_INT 4
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 2
38854: NEG
38855: PUSH
38856: LD_INT 3
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 2
38866: NEG
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 3
38878: NEG
38879: PUSH
38880: LD_INT 2
38882: NEG
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 4
38890: NEG
38891: PUSH
38892: LD_INT 3
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 4
38902: NEG
38903: PUSH
38904: LD_INT 4
38906: NEG
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 2
38914: NEG
38915: PUSH
38916: LD_INT 4
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 4
38926: NEG
38927: PUSH
38928: LD_INT 2
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: LD_INT 4
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: LD_INT 5
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: LD_INT 4
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: LD_INT 3
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: LD_INT 3
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 1
38993: NEG
38994: PUSH
38995: LD_INT 4
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: NEG
39006: PUSH
39007: LD_INT 5
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 2
39017: PUSH
39018: LD_INT 3
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 2
39028: NEG
39029: PUSH
39030: LD_INT 5
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 3
39040: PUSH
39041: LD_INT 0
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 3
39050: PUSH
39051: LD_INT 1
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 4
39061: PUSH
39062: LD_INT 0
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 4
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 3
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 2
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 2
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 4
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 4
39133: PUSH
39134: LD_INT 4
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 4
39143: PUSH
39144: LD_INT 3
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 5
39153: PUSH
39154: LD_INT 4
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 5
39163: PUSH
39164: LD_INT 5
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 4
39173: PUSH
39174: LD_INT 5
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 3
39183: PUSH
39184: LD_INT 4
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 3
39193: PUSH
39194: LD_INT 3
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 5
39203: PUSH
39204: LD_INT 3
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: PUSH
39211: LD_INT 3
39213: PUSH
39214: LD_INT 5
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39268: LD_ADDR_VAR 0 33
39272: PUSH
39273: LD_INT 4
39275: NEG
39276: PUSH
39277: LD_INT 4
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 4
39287: NEG
39288: PUSH
39289: LD_INT 5
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 3
39299: NEG
39300: PUSH
39301: LD_INT 4
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 3
39311: NEG
39312: PUSH
39313: LD_INT 3
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 4
39323: NEG
39324: PUSH
39325: LD_INT 3
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 5
39335: NEG
39336: PUSH
39337: LD_INT 4
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 5
39347: NEG
39348: PUSH
39349: LD_INT 5
39351: NEG
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 3
39359: NEG
39360: PUSH
39361: LD_INT 5
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 5
39371: NEG
39372: PUSH
39373: LD_INT 3
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: LD_INT 3
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 4
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: LD_INT 3
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: LD_INT 2
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 0
39427: PUSH
39428: LD_INT 2
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: LD_INT 3
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: LD_INT 4
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: LD_INT 4
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 4
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 4
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 5
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 5
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 4
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 3
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 3
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 3
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 5
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 3
39578: PUSH
39579: LD_INT 3
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 3
39588: PUSH
39589: LD_INT 2
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 4
39598: PUSH
39599: LD_INT 3
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 4
39608: PUSH
39609: LD_INT 4
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 3
39618: PUSH
39619: LD_INT 4
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: LD_INT 3
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 4
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: LD_INT 4
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: LD_INT 4
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: PUSH
39689: LD_INT 4
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: PUSH
39699: LD_INT 5
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 5
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: LD_INT 4
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 3
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: LD_INT 5
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 2
39750: NEG
39751: PUSH
39752: LD_INT 3
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
39806: LD_ADDR_VAR 0 34
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 4
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: LD_INT 5
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 1
39835: PUSH
39836: LD_INT 4
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: LD_INT 3
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 3
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 1
39868: NEG
39869: PUSH
39870: LD_INT 4
39872: NEG
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 1
39880: NEG
39881: PUSH
39882: LD_INT 5
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: LD_INT 3
39895: NEG
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: LD_INT 5
39907: NEG
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 3
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 3
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 4
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 4
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 3
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: LD_INT 1
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 4
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 4
40008: PUSH
40009: LD_INT 4
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 4
40018: PUSH
40019: LD_INT 3
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 5
40028: PUSH
40029: LD_INT 4
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 5
40038: PUSH
40039: LD_INT 5
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 4
40048: PUSH
40049: LD_INT 5
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 3
40058: PUSH
40059: LD_INT 4
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 3
40068: PUSH
40069: LD_INT 3
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 5
40078: PUSH
40079: LD_INT 3
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 3
40088: PUSH
40089: LD_INT 5
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 0
40098: PUSH
40099: LD_INT 3
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 3
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: PUSH
40129: LD_INT 4
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: LD_INT 4
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: LD_INT 3
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 2
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: LD_INT 4
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 4
40191: NEG
40192: PUSH
40193: LD_INT 0
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 4
40202: NEG
40203: PUSH
40204: LD_INT 1
40206: NEG
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 3
40214: NEG
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 3
40225: NEG
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 4
40236: NEG
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 5
40247: NEG
40248: PUSH
40249: LD_INT 0
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 5
40258: NEG
40259: PUSH
40260: LD_INT 1
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 5
40270: NEG
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 3
40282: NEG
40283: PUSH
40284: LD_INT 2
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: ST_TO_ADDR
// end ; end ;
40338: GO 40341
40340: POP
// case btype of b_depot , b_warehouse :
40341: LD_VAR 0 1
40345: PUSH
40346: LD_INT 0
40348: DOUBLE
40349: EQUAL
40350: IFTRUE 40360
40352: LD_INT 1
40354: DOUBLE
40355: EQUAL
40356: IFTRUE 40360
40358: GO 40561
40360: POP
// case nation of nation_american :
40361: LD_VAR 0 5
40365: PUSH
40366: LD_INT 1
40368: DOUBLE
40369: EQUAL
40370: IFTRUE 40374
40372: GO 40430
40374: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40375: LD_ADDR_VAR 0 9
40379: PUSH
40380: LD_VAR 0 11
40384: PUSH
40385: LD_VAR 0 12
40389: PUSH
40390: LD_VAR 0 13
40394: PUSH
40395: LD_VAR 0 14
40399: PUSH
40400: LD_VAR 0 15
40404: PUSH
40405: LD_VAR 0 16
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: PUSH
40418: LD_VAR 0 4
40422: PUSH
40423: LD_INT 1
40425: PLUS
40426: ARRAY
40427: ST_TO_ADDR
40428: GO 40559
40430: LD_INT 2
40432: DOUBLE
40433: EQUAL
40434: IFTRUE 40438
40436: GO 40494
40438: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40439: LD_ADDR_VAR 0 9
40443: PUSH
40444: LD_VAR 0 17
40448: PUSH
40449: LD_VAR 0 18
40453: PUSH
40454: LD_VAR 0 19
40458: PUSH
40459: LD_VAR 0 20
40463: PUSH
40464: LD_VAR 0 21
40468: PUSH
40469: LD_VAR 0 22
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: PUSH
40482: LD_VAR 0 4
40486: PUSH
40487: LD_INT 1
40489: PLUS
40490: ARRAY
40491: ST_TO_ADDR
40492: GO 40559
40494: LD_INT 3
40496: DOUBLE
40497: EQUAL
40498: IFTRUE 40502
40500: GO 40558
40502: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40503: LD_ADDR_VAR 0 9
40507: PUSH
40508: LD_VAR 0 23
40512: PUSH
40513: LD_VAR 0 24
40517: PUSH
40518: LD_VAR 0 25
40522: PUSH
40523: LD_VAR 0 26
40527: PUSH
40528: LD_VAR 0 27
40532: PUSH
40533: LD_VAR 0 28
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: PUSH
40546: LD_VAR 0 4
40550: PUSH
40551: LD_INT 1
40553: PLUS
40554: ARRAY
40555: ST_TO_ADDR
40556: GO 40559
40558: POP
40559: GO 41114
40561: LD_INT 2
40563: DOUBLE
40564: EQUAL
40565: IFTRUE 40575
40567: LD_INT 3
40569: DOUBLE
40570: EQUAL
40571: IFTRUE 40575
40573: GO 40631
40575: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
40576: LD_ADDR_VAR 0 9
40580: PUSH
40581: LD_VAR 0 29
40585: PUSH
40586: LD_VAR 0 30
40590: PUSH
40591: LD_VAR 0 31
40595: PUSH
40596: LD_VAR 0 32
40600: PUSH
40601: LD_VAR 0 33
40605: PUSH
40606: LD_VAR 0 34
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: PUSH
40619: LD_VAR 0 4
40623: PUSH
40624: LD_INT 1
40626: PLUS
40627: ARRAY
40628: ST_TO_ADDR
40629: GO 41114
40631: LD_INT 16
40633: DOUBLE
40634: EQUAL
40635: IFTRUE 40693
40637: LD_INT 17
40639: DOUBLE
40640: EQUAL
40641: IFTRUE 40693
40643: LD_INT 18
40645: DOUBLE
40646: EQUAL
40647: IFTRUE 40693
40649: LD_INT 19
40651: DOUBLE
40652: EQUAL
40653: IFTRUE 40693
40655: LD_INT 22
40657: DOUBLE
40658: EQUAL
40659: IFTRUE 40693
40661: LD_INT 20
40663: DOUBLE
40664: EQUAL
40665: IFTRUE 40693
40667: LD_INT 21
40669: DOUBLE
40670: EQUAL
40671: IFTRUE 40693
40673: LD_INT 23
40675: DOUBLE
40676: EQUAL
40677: IFTRUE 40693
40679: LD_INT 24
40681: DOUBLE
40682: EQUAL
40683: IFTRUE 40693
40685: LD_INT 25
40687: DOUBLE
40688: EQUAL
40689: IFTRUE 40693
40691: GO 40749
40693: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
40694: LD_ADDR_VAR 0 9
40698: PUSH
40699: LD_VAR 0 35
40703: PUSH
40704: LD_VAR 0 36
40708: PUSH
40709: LD_VAR 0 37
40713: PUSH
40714: LD_VAR 0 38
40718: PUSH
40719: LD_VAR 0 39
40723: PUSH
40724: LD_VAR 0 40
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: PUSH
40737: LD_VAR 0 4
40741: PUSH
40742: LD_INT 1
40744: PLUS
40745: ARRAY
40746: ST_TO_ADDR
40747: GO 41114
40749: LD_INT 6
40751: DOUBLE
40752: EQUAL
40753: IFTRUE 40805
40755: LD_INT 7
40757: DOUBLE
40758: EQUAL
40759: IFTRUE 40805
40761: LD_INT 8
40763: DOUBLE
40764: EQUAL
40765: IFTRUE 40805
40767: LD_INT 13
40769: DOUBLE
40770: EQUAL
40771: IFTRUE 40805
40773: LD_INT 12
40775: DOUBLE
40776: EQUAL
40777: IFTRUE 40805
40779: LD_INT 15
40781: DOUBLE
40782: EQUAL
40783: IFTRUE 40805
40785: LD_INT 11
40787: DOUBLE
40788: EQUAL
40789: IFTRUE 40805
40791: LD_INT 14
40793: DOUBLE
40794: EQUAL
40795: IFTRUE 40805
40797: LD_INT 10
40799: DOUBLE
40800: EQUAL
40801: IFTRUE 40805
40803: GO 40861
40805: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
40806: LD_ADDR_VAR 0 9
40810: PUSH
40811: LD_VAR 0 41
40815: PUSH
40816: LD_VAR 0 42
40820: PUSH
40821: LD_VAR 0 43
40825: PUSH
40826: LD_VAR 0 44
40830: PUSH
40831: LD_VAR 0 45
40835: PUSH
40836: LD_VAR 0 46
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: PUSH
40849: LD_VAR 0 4
40853: PUSH
40854: LD_INT 1
40856: PLUS
40857: ARRAY
40858: ST_TO_ADDR
40859: GO 41114
40861: LD_INT 36
40863: DOUBLE
40864: EQUAL
40865: IFTRUE 40869
40867: GO 40925
40869: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
40870: LD_ADDR_VAR 0 9
40874: PUSH
40875: LD_VAR 0 47
40879: PUSH
40880: LD_VAR 0 48
40884: PUSH
40885: LD_VAR 0 49
40889: PUSH
40890: LD_VAR 0 50
40894: PUSH
40895: LD_VAR 0 51
40899: PUSH
40900: LD_VAR 0 52
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: PUSH
40913: LD_VAR 0 4
40917: PUSH
40918: LD_INT 1
40920: PLUS
40921: ARRAY
40922: ST_TO_ADDR
40923: GO 41114
40925: LD_INT 4
40927: DOUBLE
40928: EQUAL
40929: IFTRUE 40951
40931: LD_INT 5
40933: DOUBLE
40934: EQUAL
40935: IFTRUE 40951
40937: LD_INT 34
40939: DOUBLE
40940: EQUAL
40941: IFTRUE 40951
40943: LD_INT 37
40945: DOUBLE
40946: EQUAL
40947: IFTRUE 40951
40949: GO 41007
40951: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
40952: LD_ADDR_VAR 0 9
40956: PUSH
40957: LD_VAR 0 53
40961: PUSH
40962: LD_VAR 0 54
40966: PUSH
40967: LD_VAR 0 55
40971: PUSH
40972: LD_VAR 0 56
40976: PUSH
40977: LD_VAR 0 57
40981: PUSH
40982: LD_VAR 0 58
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: PUSH
40995: LD_VAR 0 4
40999: PUSH
41000: LD_INT 1
41002: PLUS
41003: ARRAY
41004: ST_TO_ADDR
41005: GO 41114
41007: LD_INT 31
41009: DOUBLE
41010: EQUAL
41011: IFTRUE 41057
41013: LD_INT 32
41015: DOUBLE
41016: EQUAL
41017: IFTRUE 41057
41019: LD_INT 33
41021: DOUBLE
41022: EQUAL
41023: IFTRUE 41057
41025: LD_INT 27
41027: DOUBLE
41028: EQUAL
41029: IFTRUE 41057
41031: LD_INT 26
41033: DOUBLE
41034: EQUAL
41035: IFTRUE 41057
41037: LD_INT 28
41039: DOUBLE
41040: EQUAL
41041: IFTRUE 41057
41043: LD_INT 29
41045: DOUBLE
41046: EQUAL
41047: IFTRUE 41057
41049: LD_INT 30
41051: DOUBLE
41052: EQUAL
41053: IFTRUE 41057
41055: GO 41113
41057: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41058: LD_ADDR_VAR 0 9
41062: PUSH
41063: LD_VAR 0 59
41067: PUSH
41068: LD_VAR 0 60
41072: PUSH
41073: LD_VAR 0 61
41077: PUSH
41078: LD_VAR 0 62
41082: PUSH
41083: LD_VAR 0 63
41087: PUSH
41088: LD_VAR 0 64
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: PUSH
41101: LD_VAR 0 4
41105: PUSH
41106: LD_INT 1
41108: PLUS
41109: ARRAY
41110: ST_TO_ADDR
41111: GO 41114
41113: POP
// temp_list2 = [ ] ;
41114: LD_ADDR_VAR 0 10
41118: PUSH
41119: EMPTY
41120: ST_TO_ADDR
// for i in temp_list do
41121: LD_ADDR_VAR 0 8
41125: PUSH
41126: LD_VAR 0 9
41130: PUSH
41131: FOR_IN
41132: IFFALSE 41184
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41134: LD_ADDR_VAR 0 10
41138: PUSH
41139: LD_VAR 0 10
41143: PUSH
41144: LD_VAR 0 8
41148: PUSH
41149: LD_INT 1
41151: ARRAY
41152: PUSH
41153: LD_VAR 0 2
41157: PLUS
41158: PUSH
41159: LD_VAR 0 8
41163: PUSH
41164: LD_INT 2
41166: ARRAY
41167: PUSH
41168: LD_VAR 0 3
41172: PLUS
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: EMPTY
41179: LIST
41180: ADD
41181: ST_TO_ADDR
41182: GO 41131
41184: POP
41185: POP
// result = temp_list2 ;
41186: LD_ADDR_VAR 0 7
41190: PUSH
41191: LD_VAR 0 10
41195: ST_TO_ADDR
// end ;
41196: LD_VAR 0 7
41200: RET
// export function EnemyInRange ( unit , dist ) ; begin
41201: LD_INT 0
41203: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41204: LD_ADDR_VAR 0 3
41208: PUSH
41209: LD_VAR 0 1
41213: PPUSH
41214: CALL_OW 255
41218: PPUSH
41219: LD_VAR 0 1
41223: PPUSH
41224: CALL_OW 250
41228: PPUSH
41229: LD_VAR 0 1
41233: PPUSH
41234: CALL_OW 251
41238: PPUSH
41239: LD_VAR 0 2
41243: PPUSH
41244: CALL 14597 0 4
41248: PUSH
41249: LD_INT 4
41251: ARRAY
41252: ST_TO_ADDR
// end ;
41253: LD_VAR 0 3
41257: RET
// export function PlayerSeeMe ( unit ) ; begin
41258: LD_INT 0
41260: PPUSH
// result := See ( your_side , unit ) ;
41261: LD_ADDR_VAR 0 2
41265: PUSH
41266: LD_OWVAR 2
41270: PPUSH
41271: LD_VAR 0 1
41275: PPUSH
41276: CALL_OW 292
41280: ST_TO_ADDR
// end ;
41281: LD_VAR 0 2
41285: RET
// export function ReverseDir ( unit ) ; begin
41286: LD_INT 0
41288: PPUSH
// if not unit then
41289: LD_VAR 0 1
41293: NOT
41294: IFFALSE 41298
// exit ;
41296: GO 41321
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41298: LD_ADDR_VAR 0 2
41302: PUSH
41303: LD_VAR 0 1
41307: PPUSH
41308: CALL_OW 254
41312: PUSH
41313: LD_INT 3
41315: PLUS
41316: PUSH
41317: LD_INT 6
41319: MOD
41320: ST_TO_ADDR
// end ;
41321: LD_VAR 0 2
41325: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
41326: LD_INT 0
41328: PPUSH
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
// if not hexes then
41333: LD_VAR 0 2
41337: NOT
41338: IFFALSE 41342
// exit ;
41340: GO 41490
// dist := 9999 ;
41342: LD_ADDR_VAR 0 5
41346: PUSH
41347: LD_INT 9999
41349: ST_TO_ADDR
// for i = 1 to hexes do
41350: LD_ADDR_VAR 0 4
41354: PUSH
41355: DOUBLE
41356: LD_INT 1
41358: DEC
41359: ST_TO_ADDR
41360: LD_VAR 0 2
41364: PUSH
41365: FOR_TO
41366: IFFALSE 41478
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
41368: LD_VAR 0 1
41372: PPUSH
41373: LD_VAR 0 2
41377: PUSH
41378: LD_VAR 0 4
41382: ARRAY
41383: PUSH
41384: LD_INT 1
41386: ARRAY
41387: PPUSH
41388: LD_VAR 0 2
41392: PUSH
41393: LD_VAR 0 4
41397: ARRAY
41398: PUSH
41399: LD_INT 2
41401: ARRAY
41402: PPUSH
41403: CALL_OW 297
41407: PUSH
41408: LD_VAR 0 5
41412: LESS
41413: IFFALSE 41476
// begin hex := hexes [ i ] ;
41415: LD_ADDR_VAR 0 7
41419: PUSH
41420: LD_VAR 0 2
41424: PUSH
41425: LD_VAR 0 4
41429: ARRAY
41430: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41431: LD_ADDR_VAR 0 5
41435: PUSH
41436: LD_VAR 0 1
41440: PPUSH
41441: LD_VAR 0 2
41445: PUSH
41446: LD_VAR 0 4
41450: ARRAY
41451: PUSH
41452: LD_INT 1
41454: ARRAY
41455: PPUSH
41456: LD_VAR 0 2
41460: PUSH
41461: LD_VAR 0 4
41465: ARRAY
41466: PUSH
41467: LD_INT 2
41469: ARRAY
41470: PPUSH
41471: CALL_OW 297
41475: ST_TO_ADDR
// end ; end ;
41476: GO 41365
41478: POP
41479: POP
// result := hex ;
41480: LD_ADDR_VAR 0 3
41484: PUSH
41485: LD_VAR 0 7
41489: ST_TO_ADDR
// end ;
41490: LD_VAR 0 3
41494: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41495: LD_INT 0
41497: PPUSH
41498: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
41499: LD_VAR 0 1
41503: NOT
41504: PUSH
41505: LD_VAR 0 1
41509: PUSH
41510: LD_INT 21
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 23
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PPUSH
41534: CALL_OW 69
41538: IN
41539: NOT
41540: OR
41541: IFFALSE 41545
// exit ;
41543: GO 41592
// for i = 1 to 3 do
41545: LD_ADDR_VAR 0 3
41549: PUSH
41550: DOUBLE
41551: LD_INT 1
41553: DEC
41554: ST_TO_ADDR
41555: LD_INT 3
41557: PUSH
41558: FOR_TO
41559: IFFALSE 41590
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
41561: LD_VAR 0 1
41565: PPUSH
41566: CALL_OW 250
41570: PPUSH
41571: LD_VAR 0 1
41575: PPUSH
41576: CALL_OW 251
41580: PPUSH
41581: LD_INT 1
41583: PPUSH
41584: CALL_OW 453
41588: GO 41558
41590: POP
41591: POP
// end ;
41592: LD_VAR 0 2
41596: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
41597: LD_INT 0
41599: PPUSH
41600: PPUSH
41601: PPUSH
41602: PPUSH
41603: PPUSH
41604: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
41605: LD_VAR 0 1
41609: NOT
41610: PUSH
41611: LD_VAR 0 2
41615: NOT
41616: OR
41617: PUSH
41618: LD_VAR 0 1
41622: PPUSH
41623: CALL_OW 314
41627: OR
41628: IFFALSE 41632
// exit ;
41630: GO 42073
// x := GetX ( enemy_unit ) ;
41632: LD_ADDR_VAR 0 7
41636: PUSH
41637: LD_VAR 0 2
41641: PPUSH
41642: CALL_OW 250
41646: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
41647: LD_ADDR_VAR 0 8
41651: PUSH
41652: LD_VAR 0 2
41656: PPUSH
41657: CALL_OW 251
41661: ST_TO_ADDR
// if not x or not y then
41662: LD_VAR 0 7
41666: NOT
41667: PUSH
41668: LD_VAR 0 8
41672: NOT
41673: OR
41674: IFFALSE 41678
// exit ;
41676: GO 42073
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
41678: LD_ADDR_VAR 0 6
41682: PUSH
41683: LD_VAR 0 7
41687: PPUSH
41688: LD_INT 0
41690: PPUSH
41691: LD_INT 4
41693: PPUSH
41694: CALL_OW 272
41698: PUSH
41699: LD_VAR 0 8
41703: PPUSH
41704: LD_INT 0
41706: PPUSH
41707: LD_INT 4
41709: PPUSH
41710: CALL_OW 273
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_VAR 0 7
41723: PPUSH
41724: LD_INT 1
41726: PPUSH
41727: LD_INT 4
41729: PPUSH
41730: CALL_OW 272
41734: PUSH
41735: LD_VAR 0 8
41739: PPUSH
41740: LD_INT 1
41742: PPUSH
41743: LD_INT 4
41745: PPUSH
41746: CALL_OW 273
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: LD_VAR 0 7
41759: PPUSH
41760: LD_INT 2
41762: PPUSH
41763: LD_INT 4
41765: PPUSH
41766: CALL_OW 272
41770: PUSH
41771: LD_VAR 0 8
41775: PPUSH
41776: LD_INT 2
41778: PPUSH
41779: LD_INT 4
41781: PPUSH
41782: CALL_OW 273
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_VAR 0 7
41795: PPUSH
41796: LD_INT 3
41798: PPUSH
41799: LD_INT 4
41801: PPUSH
41802: CALL_OW 272
41806: PUSH
41807: LD_VAR 0 8
41811: PPUSH
41812: LD_INT 3
41814: PPUSH
41815: LD_INT 4
41817: PPUSH
41818: CALL_OW 273
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_VAR 0 7
41831: PPUSH
41832: LD_INT 4
41834: PPUSH
41835: LD_INT 4
41837: PPUSH
41838: CALL_OW 272
41842: PUSH
41843: LD_VAR 0 8
41847: PPUSH
41848: LD_INT 4
41850: PPUSH
41851: LD_INT 4
41853: PPUSH
41854: CALL_OW 273
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_VAR 0 7
41867: PPUSH
41868: LD_INT 5
41870: PPUSH
41871: LD_INT 4
41873: PPUSH
41874: CALL_OW 272
41878: PUSH
41879: LD_VAR 0 8
41883: PPUSH
41884: LD_INT 5
41886: PPUSH
41887: LD_INT 4
41889: PPUSH
41890: CALL_OW 273
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: ST_TO_ADDR
// for i = tmp downto 1 do
41907: LD_ADDR_VAR 0 4
41911: PUSH
41912: DOUBLE
41913: LD_VAR 0 6
41917: INC
41918: ST_TO_ADDR
41919: LD_INT 1
41921: PUSH
41922: FOR_DOWNTO
41923: IFFALSE 42024
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
41925: LD_VAR 0 6
41929: PUSH
41930: LD_VAR 0 4
41934: ARRAY
41935: PUSH
41936: LD_INT 1
41938: ARRAY
41939: PPUSH
41940: LD_VAR 0 6
41944: PUSH
41945: LD_VAR 0 4
41949: ARRAY
41950: PUSH
41951: LD_INT 2
41953: ARRAY
41954: PPUSH
41955: CALL_OW 488
41959: NOT
41960: PUSH
41961: LD_VAR 0 6
41965: PUSH
41966: LD_VAR 0 4
41970: ARRAY
41971: PUSH
41972: LD_INT 1
41974: ARRAY
41975: PPUSH
41976: LD_VAR 0 6
41980: PUSH
41981: LD_VAR 0 4
41985: ARRAY
41986: PUSH
41987: LD_INT 2
41989: ARRAY
41990: PPUSH
41991: CALL_OW 428
41995: PUSH
41996: LD_INT 0
41998: NONEQUAL
41999: OR
42000: IFFALSE 42022
// tmp := Delete ( tmp , i ) ;
42002: LD_ADDR_VAR 0 6
42006: PUSH
42007: LD_VAR 0 6
42011: PPUSH
42012: LD_VAR 0 4
42016: PPUSH
42017: CALL_OW 3
42021: ST_TO_ADDR
42022: GO 41922
42024: POP
42025: POP
// j := GetClosestHex ( unit , tmp ) ;
42026: LD_ADDR_VAR 0 5
42030: PUSH
42031: LD_VAR 0 1
42035: PPUSH
42036: LD_VAR 0 6
42040: PPUSH
42041: CALL 41326 0 2
42045: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42046: LD_VAR 0 1
42050: PPUSH
42051: LD_VAR 0 5
42055: PUSH
42056: LD_INT 1
42058: ARRAY
42059: PPUSH
42060: LD_VAR 0 5
42064: PUSH
42065: LD_INT 2
42067: ARRAY
42068: PPUSH
42069: CALL_OW 111
// end ;
42073: LD_VAR 0 3
42077: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42078: LD_INT 0
42080: PPUSH
42081: PPUSH
42082: PPUSH
// uc_side = 0 ;
42083: LD_ADDR_OWVAR 20
42087: PUSH
42088: LD_INT 0
42090: ST_TO_ADDR
// uc_nation = 0 ;
42091: LD_ADDR_OWVAR 21
42095: PUSH
42096: LD_INT 0
42098: ST_TO_ADDR
// InitHc_All ( ) ;
42099: CALL_OW 584
// InitVc ;
42103: CALL_OW 20
// if mastodonts then
42107: LD_VAR 0 6
42111: IFFALSE 42178
// for i = 1 to mastodonts do
42113: LD_ADDR_VAR 0 11
42117: PUSH
42118: DOUBLE
42119: LD_INT 1
42121: DEC
42122: ST_TO_ADDR
42123: LD_VAR 0 6
42127: PUSH
42128: FOR_TO
42129: IFFALSE 42176
// begin vc_chassis := 31 ;
42131: LD_ADDR_OWVAR 37
42135: PUSH
42136: LD_INT 31
42138: ST_TO_ADDR
// vc_control := control_rider ;
42139: LD_ADDR_OWVAR 38
42143: PUSH
42144: LD_INT 4
42146: ST_TO_ADDR
// animal := CreateVehicle ;
42147: LD_ADDR_VAR 0 12
42151: PUSH
42152: CALL_OW 45
42156: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42157: LD_VAR 0 12
42161: PPUSH
42162: LD_VAR 0 8
42166: PPUSH
42167: LD_INT 0
42169: PPUSH
42170: CALL 44313 0 3
// end ;
42174: GO 42128
42176: POP
42177: POP
// if horses then
42178: LD_VAR 0 5
42182: IFFALSE 42249
// for i = 1 to horses do
42184: LD_ADDR_VAR 0 11
42188: PUSH
42189: DOUBLE
42190: LD_INT 1
42192: DEC
42193: ST_TO_ADDR
42194: LD_VAR 0 5
42198: PUSH
42199: FOR_TO
42200: IFFALSE 42247
// begin hc_class := 21 ;
42202: LD_ADDR_OWVAR 28
42206: PUSH
42207: LD_INT 21
42209: ST_TO_ADDR
// hc_gallery :=  ;
42210: LD_ADDR_OWVAR 33
42214: PUSH
42215: LD_STRING 
42217: ST_TO_ADDR
// animal := CreateHuman ;
42218: LD_ADDR_VAR 0 12
42222: PUSH
42223: CALL_OW 44
42227: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42228: LD_VAR 0 12
42232: PPUSH
42233: LD_VAR 0 8
42237: PPUSH
42238: LD_INT 0
42240: PPUSH
42241: CALL 44313 0 3
// end ;
42245: GO 42199
42247: POP
42248: POP
// if birds then
42249: LD_VAR 0 1
42253: IFFALSE 42320
// for i = 1 to birds do
42255: LD_ADDR_VAR 0 11
42259: PUSH
42260: DOUBLE
42261: LD_INT 1
42263: DEC
42264: ST_TO_ADDR
42265: LD_VAR 0 1
42269: PUSH
42270: FOR_TO
42271: IFFALSE 42318
// begin hc_class = 18 ;
42273: LD_ADDR_OWVAR 28
42277: PUSH
42278: LD_INT 18
42280: ST_TO_ADDR
// hc_gallery =  ;
42281: LD_ADDR_OWVAR 33
42285: PUSH
42286: LD_STRING 
42288: ST_TO_ADDR
// animal := CreateHuman ;
42289: LD_ADDR_VAR 0 12
42293: PUSH
42294: CALL_OW 44
42298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42299: LD_VAR 0 12
42303: PPUSH
42304: LD_VAR 0 8
42308: PPUSH
42309: LD_INT 0
42311: PPUSH
42312: CALL 44313 0 3
// end ;
42316: GO 42270
42318: POP
42319: POP
// if tigers then
42320: LD_VAR 0 2
42324: IFFALSE 42408
// for i = 1 to tigers do
42326: LD_ADDR_VAR 0 11
42330: PUSH
42331: DOUBLE
42332: LD_INT 1
42334: DEC
42335: ST_TO_ADDR
42336: LD_VAR 0 2
42340: PUSH
42341: FOR_TO
42342: IFFALSE 42406
// begin hc_class = class_tiger ;
42344: LD_ADDR_OWVAR 28
42348: PUSH
42349: LD_INT 14
42351: ST_TO_ADDR
// hc_gallery =  ;
42352: LD_ADDR_OWVAR 33
42356: PUSH
42357: LD_STRING 
42359: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42360: LD_ADDR_OWVAR 35
42364: PUSH
42365: LD_INT 7
42367: NEG
42368: PPUSH
42369: LD_INT 7
42371: PPUSH
42372: CALL_OW 12
42376: ST_TO_ADDR
// animal := CreateHuman ;
42377: LD_ADDR_VAR 0 12
42381: PUSH
42382: CALL_OW 44
42386: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42387: LD_VAR 0 12
42391: PPUSH
42392: LD_VAR 0 8
42396: PPUSH
42397: LD_INT 0
42399: PPUSH
42400: CALL 44313 0 3
// end ;
42404: GO 42341
42406: POP
42407: POP
// if apemans then
42408: LD_VAR 0 3
42412: IFFALSE 42535
// for i = 1 to apemans do
42414: LD_ADDR_VAR 0 11
42418: PUSH
42419: DOUBLE
42420: LD_INT 1
42422: DEC
42423: ST_TO_ADDR
42424: LD_VAR 0 3
42428: PUSH
42429: FOR_TO
42430: IFFALSE 42533
// begin hc_class = class_apeman ;
42432: LD_ADDR_OWVAR 28
42436: PUSH
42437: LD_INT 12
42439: ST_TO_ADDR
// hc_gallery =  ;
42440: LD_ADDR_OWVAR 33
42444: PUSH
42445: LD_STRING 
42447: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
42448: LD_ADDR_OWVAR 35
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PPUSH
42457: LD_INT 2
42459: PPUSH
42460: CALL_OW 12
42464: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
42465: LD_ADDR_OWVAR 31
42469: PUSH
42470: LD_INT 1
42472: PPUSH
42473: LD_INT 3
42475: PPUSH
42476: CALL_OW 12
42480: PUSH
42481: LD_INT 1
42483: PPUSH
42484: LD_INT 3
42486: PPUSH
42487: CALL_OW 12
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: ST_TO_ADDR
// animal := CreateHuman ;
42504: LD_ADDR_VAR 0 12
42508: PUSH
42509: CALL_OW 44
42513: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42514: LD_VAR 0 12
42518: PPUSH
42519: LD_VAR 0 8
42523: PPUSH
42524: LD_INT 0
42526: PPUSH
42527: CALL 44313 0 3
// end ;
42531: GO 42429
42533: POP
42534: POP
// if enchidnas then
42535: LD_VAR 0 4
42539: IFFALSE 42606
// for i = 1 to enchidnas do
42541: LD_ADDR_VAR 0 11
42545: PUSH
42546: DOUBLE
42547: LD_INT 1
42549: DEC
42550: ST_TO_ADDR
42551: LD_VAR 0 4
42555: PUSH
42556: FOR_TO
42557: IFFALSE 42604
// begin hc_class = 13 ;
42559: LD_ADDR_OWVAR 28
42563: PUSH
42564: LD_INT 13
42566: ST_TO_ADDR
// hc_gallery =  ;
42567: LD_ADDR_OWVAR 33
42571: PUSH
42572: LD_STRING 
42574: ST_TO_ADDR
// animal := CreateHuman ;
42575: LD_ADDR_VAR 0 12
42579: PUSH
42580: CALL_OW 44
42584: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42585: LD_VAR 0 12
42589: PPUSH
42590: LD_VAR 0 8
42594: PPUSH
42595: LD_INT 0
42597: PPUSH
42598: CALL 44313 0 3
// end ;
42602: GO 42556
42604: POP
42605: POP
// if fishes then
42606: LD_VAR 0 7
42610: IFFALSE 42677
// for i = 1 to fishes do
42612: LD_ADDR_VAR 0 11
42616: PUSH
42617: DOUBLE
42618: LD_INT 1
42620: DEC
42621: ST_TO_ADDR
42622: LD_VAR 0 7
42626: PUSH
42627: FOR_TO
42628: IFFALSE 42675
// begin hc_class = 20 ;
42630: LD_ADDR_OWVAR 28
42634: PUSH
42635: LD_INT 20
42637: ST_TO_ADDR
// hc_gallery =  ;
42638: LD_ADDR_OWVAR 33
42642: PUSH
42643: LD_STRING 
42645: ST_TO_ADDR
// animal := CreateHuman ;
42646: LD_ADDR_VAR 0 12
42650: PUSH
42651: CALL_OW 44
42655: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
42656: LD_VAR 0 12
42660: PPUSH
42661: LD_VAR 0 9
42665: PPUSH
42666: LD_INT 0
42668: PPUSH
42669: CALL 44313 0 3
// end ;
42673: GO 42627
42675: POP
42676: POP
// end ;
42677: LD_VAR 0 10
42681: RET
// export function WantHeal ( sci , unit ) ; begin
42682: LD_INT 0
42684: PPUSH
// if GetTaskList ( sci ) > 0 then
42685: LD_VAR 0 1
42689: PPUSH
42690: CALL_OW 437
42694: PUSH
42695: LD_INT 0
42697: GREATER
42698: IFFALSE 42768
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
42700: LD_VAR 0 1
42704: PPUSH
42705: CALL_OW 437
42709: PUSH
42710: LD_INT 1
42712: ARRAY
42713: PUSH
42714: LD_INT 1
42716: ARRAY
42717: PUSH
42718: LD_STRING l
42720: EQUAL
42721: PUSH
42722: LD_VAR 0 1
42726: PPUSH
42727: CALL_OW 437
42731: PUSH
42732: LD_INT 1
42734: ARRAY
42735: PUSH
42736: LD_INT 4
42738: ARRAY
42739: PUSH
42740: LD_VAR 0 2
42744: EQUAL
42745: AND
42746: IFFALSE 42758
// result := true else
42748: LD_ADDR_VAR 0 3
42752: PUSH
42753: LD_INT 1
42755: ST_TO_ADDR
42756: GO 42766
// result := false ;
42758: LD_ADDR_VAR 0 3
42762: PUSH
42763: LD_INT 0
42765: ST_TO_ADDR
// end else
42766: GO 42776
// result := false ;
42768: LD_ADDR_VAR 0 3
42772: PUSH
42773: LD_INT 0
42775: ST_TO_ADDR
// end ;
42776: LD_VAR 0 3
42780: RET
// export function HealTarget ( sci ) ; begin
42781: LD_INT 0
42783: PPUSH
// if not sci then
42784: LD_VAR 0 1
42788: NOT
42789: IFFALSE 42793
// exit ;
42791: GO 42858
// result := 0 ;
42793: LD_ADDR_VAR 0 2
42797: PUSH
42798: LD_INT 0
42800: ST_TO_ADDR
// if GetTaskList ( sci ) then
42801: LD_VAR 0 1
42805: PPUSH
42806: CALL_OW 437
42810: IFFALSE 42858
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42812: LD_VAR 0 1
42816: PPUSH
42817: CALL_OW 437
42821: PUSH
42822: LD_INT 1
42824: ARRAY
42825: PUSH
42826: LD_INT 1
42828: ARRAY
42829: PUSH
42830: LD_STRING l
42832: EQUAL
42833: IFFALSE 42858
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42835: LD_ADDR_VAR 0 2
42839: PUSH
42840: LD_VAR 0 1
42844: PPUSH
42845: CALL_OW 437
42849: PUSH
42850: LD_INT 1
42852: ARRAY
42853: PUSH
42854: LD_INT 4
42856: ARRAY
42857: ST_TO_ADDR
// end ;
42858: LD_VAR 0 2
42862: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42863: LD_INT 0
42865: PPUSH
42866: PPUSH
42867: PPUSH
42868: PPUSH
// if not base_units then
42869: LD_VAR 0 1
42873: NOT
42874: IFFALSE 42878
// exit ;
42876: GO 42965
// result := false ;
42878: LD_ADDR_VAR 0 2
42882: PUSH
42883: LD_INT 0
42885: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42886: LD_ADDR_VAR 0 5
42890: PUSH
42891: LD_VAR 0 1
42895: PPUSH
42896: LD_INT 21
42898: PUSH
42899: LD_INT 3
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PPUSH
42906: CALL_OW 72
42910: ST_TO_ADDR
// if not tmp then
42911: LD_VAR 0 5
42915: NOT
42916: IFFALSE 42920
// exit ;
42918: GO 42965
// for i in tmp do
42920: LD_ADDR_VAR 0 3
42924: PUSH
42925: LD_VAR 0 5
42929: PUSH
42930: FOR_IN
42931: IFFALSE 42963
// begin result := EnemyInRange ( i , 22 ) ;
42933: LD_ADDR_VAR 0 2
42937: PUSH
42938: LD_VAR 0 3
42942: PPUSH
42943: LD_INT 22
42945: PPUSH
42946: CALL 41201 0 2
42950: ST_TO_ADDR
// if result then
42951: LD_VAR 0 2
42955: IFFALSE 42961
// exit ;
42957: POP
42958: POP
42959: GO 42965
// end ;
42961: GO 42930
42963: POP
42964: POP
// end ;
42965: LD_VAR 0 2
42969: RET
// export function FilterByTag ( units , tag ) ; begin
42970: LD_INT 0
42972: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
42973: LD_ADDR_VAR 0 3
42977: PUSH
42978: LD_VAR 0 1
42982: PPUSH
42983: LD_INT 120
42985: PUSH
42986: LD_VAR 0 2
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PPUSH
42995: CALL_OW 72
42999: ST_TO_ADDR
// end ;
43000: LD_VAR 0 3
43004: RET
// export function IsDriver ( un ) ; begin
43005: LD_INT 0
43007: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43008: LD_ADDR_VAR 0 2
43012: PUSH
43013: LD_VAR 0 1
43017: PUSH
43018: LD_INT 55
43020: PUSH
43021: EMPTY
43022: LIST
43023: PPUSH
43024: CALL_OW 69
43028: IN
43029: ST_TO_ADDR
// end ;
43030: LD_VAR 0 2
43034: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43035: LD_INT 0
43037: PPUSH
43038: PPUSH
// list := [ ] ;
43039: LD_ADDR_VAR 0 5
43043: PUSH
43044: EMPTY
43045: ST_TO_ADDR
// case d of 0 :
43046: LD_VAR 0 3
43050: PUSH
43051: LD_INT 0
43053: DOUBLE
43054: EQUAL
43055: IFTRUE 43059
43057: GO 43192
43059: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43060: LD_ADDR_VAR 0 5
43064: PUSH
43065: LD_VAR 0 1
43069: PUSH
43070: LD_INT 4
43072: MINUS
43073: PUSH
43074: LD_VAR 0 2
43078: PUSH
43079: LD_INT 4
43081: MINUS
43082: PUSH
43083: LD_INT 2
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: LIST
43090: PUSH
43091: LD_VAR 0 1
43095: PUSH
43096: LD_INT 3
43098: MINUS
43099: PUSH
43100: LD_VAR 0 2
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: LIST
43112: PUSH
43113: LD_VAR 0 1
43117: PUSH
43118: LD_INT 4
43120: PLUS
43121: PUSH
43122: LD_VAR 0 2
43126: PUSH
43127: LD_INT 4
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: PUSH
43135: LD_VAR 0 1
43139: PUSH
43140: LD_INT 3
43142: PLUS
43143: PUSH
43144: LD_VAR 0 2
43148: PUSH
43149: LD_INT 3
43151: PLUS
43152: PUSH
43153: LD_INT 5
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: PUSH
43161: LD_VAR 0 1
43165: PUSH
43166: LD_VAR 0 2
43170: PUSH
43171: LD_INT 4
43173: PLUS
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: ST_TO_ADDR
// end ; 1 :
43190: GO 43890
43192: LD_INT 1
43194: DOUBLE
43195: EQUAL
43196: IFTRUE 43200
43198: GO 43333
43200: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
43201: LD_ADDR_VAR 0 5
43205: PUSH
43206: LD_VAR 0 1
43210: PUSH
43211: LD_VAR 0 2
43215: PUSH
43216: LD_INT 4
43218: MINUS
43219: PUSH
43220: LD_INT 3
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: LIST
43227: PUSH
43228: LD_VAR 0 1
43232: PUSH
43233: LD_INT 3
43235: MINUS
43236: PUSH
43237: LD_VAR 0 2
43241: PUSH
43242: LD_INT 3
43244: MINUS
43245: PUSH
43246: LD_INT 2
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: LIST
43253: PUSH
43254: LD_VAR 0 1
43258: PUSH
43259: LD_INT 4
43261: MINUS
43262: PUSH
43263: LD_VAR 0 2
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: LIST
43275: PUSH
43276: LD_VAR 0 1
43280: PUSH
43281: LD_VAR 0 2
43285: PUSH
43286: LD_INT 3
43288: PLUS
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: LIST
43297: PUSH
43298: LD_VAR 0 1
43302: PUSH
43303: LD_INT 4
43305: PLUS
43306: PUSH
43307: LD_VAR 0 2
43311: PUSH
43312: LD_INT 4
43314: PLUS
43315: PUSH
43316: LD_INT 5
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: LIST
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: ST_TO_ADDR
// end ; 2 :
43331: GO 43890
43333: LD_INT 2
43335: DOUBLE
43336: EQUAL
43337: IFTRUE 43341
43339: GO 43470
43341: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43342: LD_ADDR_VAR 0 5
43346: PUSH
43347: LD_VAR 0 1
43351: PUSH
43352: LD_VAR 0 2
43356: PUSH
43357: LD_INT 3
43359: MINUS
43360: PUSH
43361: LD_INT 3
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: PUSH
43369: LD_VAR 0 1
43373: PUSH
43374: LD_INT 4
43376: PLUS
43377: PUSH
43378: LD_VAR 0 2
43382: PUSH
43383: LD_INT 4
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: LIST
43390: PUSH
43391: LD_VAR 0 1
43395: PUSH
43396: LD_VAR 0 2
43400: PUSH
43401: LD_INT 4
43403: PLUS
43404: PUSH
43405: LD_INT 0
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: LIST
43412: PUSH
43413: LD_VAR 0 1
43417: PUSH
43418: LD_INT 3
43420: MINUS
43421: PUSH
43422: LD_VAR 0 2
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: PUSH
43435: LD_VAR 0 1
43439: PUSH
43440: LD_INT 4
43442: MINUS
43443: PUSH
43444: LD_VAR 0 2
43448: PUSH
43449: LD_INT 4
43451: MINUS
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: ST_TO_ADDR
// end ; 3 :
43468: GO 43890
43470: LD_INT 3
43472: DOUBLE
43473: EQUAL
43474: IFTRUE 43478
43476: GO 43611
43478: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
43479: LD_ADDR_VAR 0 5
43483: PUSH
43484: LD_VAR 0 1
43488: PUSH
43489: LD_INT 3
43491: PLUS
43492: PUSH
43493: LD_VAR 0 2
43497: PUSH
43498: LD_INT 4
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: LIST
43505: PUSH
43506: LD_VAR 0 1
43510: PUSH
43511: LD_INT 4
43513: PLUS
43514: PUSH
43515: LD_VAR 0 2
43519: PUSH
43520: LD_INT 4
43522: PLUS
43523: PUSH
43524: LD_INT 5
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: LIST
43531: PUSH
43532: LD_VAR 0 1
43536: PUSH
43537: LD_INT 4
43539: MINUS
43540: PUSH
43541: LD_VAR 0 2
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: PUSH
43554: LD_VAR 0 1
43558: PUSH
43559: LD_VAR 0 2
43563: PUSH
43564: LD_INT 4
43566: MINUS
43567: PUSH
43568: LD_INT 3
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: LIST
43575: PUSH
43576: LD_VAR 0 1
43580: PUSH
43581: LD_INT 3
43583: MINUS
43584: PUSH
43585: LD_VAR 0 2
43589: PUSH
43590: LD_INT 3
43592: MINUS
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: LIST
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: ST_TO_ADDR
// end ; 4 :
43609: GO 43890
43611: LD_INT 4
43613: DOUBLE
43614: EQUAL
43615: IFTRUE 43619
43617: GO 43752
43619: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
43620: LD_ADDR_VAR 0 5
43624: PUSH
43625: LD_VAR 0 1
43629: PUSH
43630: LD_VAR 0 2
43634: PUSH
43635: LD_INT 4
43637: PLUS
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: LIST
43646: PUSH
43647: LD_VAR 0 1
43651: PUSH
43652: LD_INT 3
43654: PLUS
43655: PUSH
43656: LD_VAR 0 2
43660: PUSH
43661: LD_INT 3
43663: PLUS
43664: PUSH
43665: LD_INT 5
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: PUSH
43673: LD_VAR 0 1
43677: PUSH
43678: LD_INT 4
43680: PLUS
43681: PUSH
43682: LD_VAR 0 2
43686: PUSH
43687: LD_INT 4
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: PUSH
43695: LD_VAR 0 1
43699: PUSH
43700: LD_VAR 0 2
43704: PUSH
43705: LD_INT 3
43707: MINUS
43708: PUSH
43709: LD_INT 3
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: PUSH
43717: LD_VAR 0 1
43721: PUSH
43722: LD_INT 4
43724: MINUS
43725: PUSH
43726: LD_VAR 0 2
43730: PUSH
43731: LD_INT 4
43733: MINUS
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: ST_TO_ADDR
// end ; 5 :
43750: GO 43890
43752: LD_INT 5
43754: DOUBLE
43755: EQUAL
43756: IFTRUE 43760
43758: GO 43889
43760: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
43761: LD_ADDR_VAR 0 5
43765: PUSH
43766: LD_VAR 0 1
43770: PUSH
43771: LD_INT 4
43773: MINUS
43774: PUSH
43775: LD_VAR 0 2
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: LIST
43787: PUSH
43788: LD_VAR 0 1
43792: PUSH
43793: LD_VAR 0 2
43797: PUSH
43798: LD_INT 4
43800: MINUS
43801: PUSH
43802: LD_INT 3
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: PUSH
43810: LD_VAR 0 1
43814: PUSH
43815: LD_INT 4
43817: PLUS
43818: PUSH
43819: LD_VAR 0 2
43823: PUSH
43824: LD_INT 4
43826: PLUS
43827: PUSH
43828: LD_INT 5
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: PUSH
43836: LD_VAR 0 1
43840: PUSH
43841: LD_INT 3
43843: PLUS
43844: PUSH
43845: LD_VAR 0 2
43849: PUSH
43850: LD_INT 4
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: PUSH
43858: LD_VAR 0 1
43862: PUSH
43863: LD_VAR 0 2
43867: PUSH
43868: LD_INT 3
43870: PLUS
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: LIST
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
// end ; end ;
43887: GO 43890
43889: POP
// result := list ;
43890: LD_ADDR_VAR 0 4
43894: PUSH
43895: LD_VAR 0 5
43899: ST_TO_ADDR
// end ;
43900: LD_VAR 0 4
43904: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43905: LD_INT 0
43907: PPUSH
43908: PPUSH
43909: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43910: LD_VAR 0 1
43914: NOT
43915: PUSH
43916: LD_VAR 0 2
43920: PUSH
43921: LD_INT 1
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: LD_INT 3
43929: PUSH
43930: LD_INT 4
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: IN
43939: NOT
43940: OR
43941: IFFALSE 43945
// exit ;
43943: GO 44037
// tmp := [ ] ;
43945: LD_ADDR_VAR 0 5
43949: PUSH
43950: EMPTY
43951: ST_TO_ADDR
// for i in units do
43952: LD_ADDR_VAR 0 4
43956: PUSH
43957: LD_VAR 0 1
43961: PUSH
43962: FOR_IN
43963: IFFALSE 44006
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
43965: LD_ADDR_VAR 0 5
43969: PUSH
43970: LD_VAR 0 5
43974: PPUSH
43975: LD_VAR 0 5
43979: PUSH
43980: LD_INT 1
43982: PLUS
43983: PPUSH
43984: LD_VAR 0 4
43988: PPUSH
43989: LD_VAR 0 2
43993: PPUSH
43994: CALL_OW 259
43998: PPUSH
43999: CALL_OW 2
44003: ST_TO_ADDR
44004: GO 43962
44006: POP
44007: POP
// if not tmp then
44008: LD_VAR 0 5
44012: NOT
44013: IFFALSE 44017
// exit ;
44015: GO 44037
// result := SortListByListDesc ( units , tmp ) ;
44017: LD_ADDR_VAR 0 3
44021: PUSH
44022: LD_VAR 0 1
44026: PPUSH
44027: LD_VAR 0 5
44031: PPUSH
44032: CALL_OW 77
44036: ST_TO_ADDR
// end ;
44037: LD_VAR 0 3
44041: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44042: LD_INT 0
44044: PPUSH
44045: PPUSH
44046: PPUSH
// result := false ;
44047: LD_ADDR_VAR 0 3
44051: PUSH
44052: LD_INT 0
44054: ST_TO_ADDR
// x := GetX ( building ) ;
44055: LD_ADDR_VAR 0 4
44059: PUSH
44060: LD_VAR 0 2
44064: PPUSH
44065: CALL_OW 250
44069: ST_TO_ADDR
// y := GetY ( building ) ;
44070: LD_ADDR_VAR 0 5
44074: PUSH
44075: LD_VAR 0 2
44079: PPUSH
44080: CALL_OW 251
44084: ST_TO_ADDR
// if not building or not x or not y then
44085: LD_VAR 0 2
44089: NOT
44090: PUSH
44091: LD_VAR 0 4
44095: NOT
44096: OR
44097: PUSH
44098: LD_VAR 0 5
44102: NOT
44103: OR
44104: IFFALSE 44108
// exit ;
44106: GO 44200
// if GetTaskList ( unit ) then
44108: LD_VAR 0 1
44112: PPUSH
44113: CALL_OW 437
44117: IFFALSE 44200
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44119: LD_STRING e
44121: PUSH
44122: LD_VAR 0 1
44126: PPUSH
44127: CALL_OW 437
44131: PUSH
44132: LD_INT 1
44134: ARRAY
44135: PUSH
44136: LD_INT 1
44138: ARRAY
44139: EQUAL
44140: PUSH
44141: LD_VAR 0 4
44145: PUSH
44146: LD_VAR 0 1
44150: PPUSH
44151: CALL_OW 437
44155: PUSH
44156: LD_INT 1
44158: ARRAY
44159: PUSH
44160: LD_INT 2
44162: ARRAY
44163: EQUAL
44164: AND
44165: PUSH
44166: LD_VAR 0 5
44170: PUSH
44171: LD_VAR 0 1
44175: PPUSH
44176: CALL_OW 437
44180: PUSH
44181: LD_INT 1
44183: ARRAY
44184: PUSH
44185: LD_INT 3
44187: ARRAY
44188: EQUAL
44189: AND
44190: IFFALSE 44200
// result := true end ;
44192: LD_ADDR_VAR 0 3
44196: PUSH
44197: LD_INT 1
44199: ST_TO_ADDR
// end ;
44200: LD_VAR 0 3
44204: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
44205: LD_INT 0
44207: PPUSH
// result := false ;
44208: LD_ADDR_VAR 0 4
44212: PUSH
44213: LD_INT 0
44215: ST_TO_ADDR
// if GetTaskList ( unit ) then
44216: LD_VAR 0 1
44220: PPUSH
44221: CALL_OW 437
44225: IFFALSE 44308
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44227: LD_STRING M
44229: PUSH
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 437
44239: PUSH
44240: LD_INT 1
44242: ARRAY
44243: PUSH
44244: LD_INT 1
44246: ARRAY
44247: EQUAL
44248: PUSH
44249: LD_VAR 0 2
44253: PUSH
44254: LD_VAR 0 1
44258: PPUSH
44259: CALL_OW 437
44263: PUSH
44264: LD_INT 1
44266: ARRAY
44267: PUSH
44268: LD_INT 2
44270: ARRAY
44271: EQUAL
44272: AND
44273: PUSH
44274: LD_VAR 0 3
44278: PUSH
44279: LD_VAR 0 1
44283: PPUSH
44284: CALL_OW 437
44288: PUSH
44289: LD_INT 1
44291: ARRAY
44292: PUSH
44293: LD_INT 3
44295: ARRAY
44296: EQUAL
44297: AND
44298: IFFALSE 44308
// result := true ;
44300: LD_ADDR_VAR 0 4
44304: PUSH
44305: LD_INT 1
44307: ST_TO_ADDR
// end ; end ;
44308: LD_VAR 0 4
44312: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
44313: LD_INT 0
44315: PPUSH
44316: PPUSH
44317: PPUSH
44318: PPUSH
// if not unit or not area then
44319: LD_VAR 0 1
44323: NOT
44324: PUSH
44325: LD_VAR 0 2
44329: NOT
44330: OR
44331: IFFALSE 44335
// exit ;
44333: GO 44499
// tmp := AreaToList ( area , i ) ;
44335: LD_ADDR_VAR 0 6
44339: PUSH
44340: LD_VAR 0 2
44344: PPUSH
44345: LD_VAR 0 5
44349: PPUSH
44350: CALL_OW 517
44354: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44355: LD_ADDR_VAR 0 5
44359: PUSH
44360: DOUBLE
44361: LD_INT 1
44363: DEC
44364: ST_TO_ADDR
44365: LD_VAR 0 6
44369: PUSH
44370: LD_INT 1
44372: ARRAY
44373: PUSH
44374: FOR_TO
44375: IFFALSE 44497
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44377: LD_ADDR_VAR 0 7
44381: PUSH
44382: LD_VAR 0 6
44386: PUSH
44387: LD_INT 1
44389: ARRAY
44390: PUSH
44391: LD_VAR 0 5
44395: ARRAY
44396: PUSH
44397: LD_VAR 0 6
44401: PUSH
44402: LD_INT 2
44404: ARRAY
44405: PUSH
44406: LD_VAR 0 5
44410: ARRAY
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
44416: LD_VAR 0 7
44420: PUSH
44421: LD_INT 1
44423: ARRAY
44424: PPUSH
44425: LD_VAR 0 7
44429: PUSH
44430: LD_INT 2
44432: ARRAY
44433: PPUSH
44434: CALL_OW 428
44438: PUSH
44439: LD_INT 0
44441: EQUAL
44442: IFFALSE 44495
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
44444: LD_VAR 0 1
44448: PPUSH
44449: LD_VAR 0 7
44453: PUSH
44454: LD_INT 1
44456: ARRAY
44457: PPUSH
44458: LD_VAR 0 7
44462: PUSH
44463: LD_INT 2
44465: ARRAY
44466: PPUSH
44467: LD_VAR 0 3
44471: PPUSH
44472: CALL_OW 48
// result := IsPlaced ( unit ) ;
44476: LD_ADDR_VAR 0 4
44480: PUSH
44481: LD_VAR 0 1
44485: PPUSH
44486: CALL_OW 305
44490: ST_TO_ADDR
// exit ;
44491: POP
44492: POP
44493: GO 44499
// end ; end ;
44495: GO 44374
44497: POP
44498: POP
// end ;
44499: LD_VAR 0 4
44503: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
44504: LD_INT 0
44506: PPUSH
44507: PPUSH
44508: PPUSH
// if not side or side > 8 then
44509: LD_VAR 0 1
44513: NOT
44514: PUSH
44515: LD_VAR 0 1
44519: PUSH
44520: LD_INT 8
44522: GREATER
44523: OR
44524: IFFALSE 44528
// exit ;
44526: GO 44715
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
44528: LD_ADDR_VAR 0 4
44532: PUSH
44533: LD_INT 22
44535: PUSH
44536: LD_VAR 0 1
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 21
44547: PUSH
44548: LD_INT 3
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PPUSH
44559: CALL_OW 69
44563: ST_TO_ADDR
// if not tmp then
44564: LD_VAR 0 4
44568: NOT
44569: IFFALSE 44573
// exit ;
44571: GO 44715
// enable_addtolog := true ;
44573: LD_ADDR_OWVAR 81
44577: PUSH
44578: LD_INT 1
44580: ST_TO_ADDR
// AddToLog ( [ ) ;
44581: LD_STRING [
44583: PPUSH
44584: CALL_OW 561
// for i in tmp do
44588: LD_ADDR_VAR 0 3
44592: PUSH
44593: LD_VAR 0 4
44597: PUSH
44598: FOR_IN
44599: IFFALSE 44706
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
44601: LD_STRING [
44603: PUSH
44604: LD_VAR 0 3
44608: PPUSH
44609: CALL_OW 266
44613: STR
44614: PUSH
44615: LD_STRING , 
44617: STR
44618: PUSH
44619: LD_VAR 0 3
44623: PPUSH
44624: CALL_OW 250
44628: STR
44629: PUSH
44630: LD_STRING , 
44632: STR
44633: PUSH
44634: LD_VAR 0 3
44638: PPUSH
44639: CALL_OW 251
44643: STR
44644: PUSH
44645: LD_STRING , 
44647: STR
44648: PUSH
44649: LD_VAR 0 3
44653: PPUSH
44654: CALL_OW 254
44658: STR
44659: PUSH
44660: LD_STRING , 
44662: STR
44663: PUSH
44664: LD_VAR 0 3
44668: PPUSH
44669: LD_INT 1
44671: PPUSH
44672: CALL_OW 268
44676: STR
44677: PUSH
44678: LD_STRING , 
44680: STR
44681: PUSH
44682: LD_VAR 0 3
44686: PPUSH
44687: LD_INT 2
44689: PPUSH
44690: CALL_OW 268
44694: STR
44695: PUSH
44696: LD_STRING ],
44698: STR
44699: PPUSH
44700: CALL_OW 561
// end ;
44704: GO 44598
44706: POP
44707: POP
// AddToLog ( ]; ) ;
44708: LD_STRING ];
44710: PPUSH
44711: CALL_OW 561
// end ;
44715: LD_VAR 0 2
44719: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
44720: LD_INT 0
44722: PPUSH
44723: PPUSH
44724: PPUSH
44725: PPUSH
44726: PPUSH
// if not area or not rate or not max then
44727: LD_VAR 0 1
44731: NOT
44732: PUSH
44733: LD_VAR 0 2
44737: NOT
44738: OR
44739: PUSH
44740: LD_VAR 0 4
44744: NOT
44745: OR
44746: IFFALSE 44750
// exit ;
44748: GO 44939
// while 1 do
44750: LD_INT 1
44752: IFFALSE 44939
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
44754: LD_ADDR_VAR 0 9
44758: PUSH
44759: LD_VAR 0 1
44763: PPUSH
44764: LD_INT 1
44766: PPUSH
44767: CALL_OW 287
44771: PUSH
44772: LD_INT 10
44774: MUL
44775: ST_TO_ADDR
// r := rate / 10 ;
44776: LD_ADDR_VAR 0 7
44780: PUSH
44781: LD_VAR 0 2
44785: PUSH
44786: LD_INT 10
44788: DIVREAL
44789: ST_TO_ADDR
// time := 1 1$00 ;
44790: LD_ADDR_VAR 0 8
44794: PUSH
44795: LD_INT 2100
44797: ST_TO_ADDR
// if amount < min then
44798: LD_VAR 0 9
44802: PUSH
44803: LD_VAR 0 3
44807: LESS
44808: IFFALSE 44826
// r := r * 2 else
44810: LD_ADDR_VAR 0 7
44814: PUSH
44815: LD_VAR 0 7
44819: PUSH
44820: LD_INT 2
44822: MUL
44823: ST_TO_ADDR
44824: GO 44852
// if amount > max then
44826: LD_VAR 0 9
44830: PUSH
44831: LD_VAR 0 4
44835: GREATER
44836: IFFALSE 44852
// r := r / 2 ;
44838: LD_ADDR_VAR 0 7
44842: PUSH
44843: LD_VAR 0 7
44847: PUSH
44848: LD_INT 2
44850: DIVREAL
44851: ST_TO_ADDR
// time := time / r ;
44852: LD_ADDR_VAR 0 8
44856: PUSH
44857: LD_VAR 0 8
44861: PUSH
44862: LD_VAR 0 7
44866: DIVREAL
44867: ST_TO_ADDR
// if time < 0 then
44868: LD_VAR 0 8
44872: PUSH
44873: LD_INT 0
44875: LESS
44876: IFFALSE 44893
// time := time * - 1 ;
44878: LD_ADDR_VAR 0 8
44882: PUSH
44883: LD_VAR 0 8
44887: PUSH
44888: LD_INT 1
44890: NEG
44891: MUL
44892: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
44893: LD_VAR 0 8
44897: PUSH
44898: LD_INT 35
44900: PPUSH
44901: LD_INT 875
44903: PPUSH
44904: CALL_OW 12
44908: PLUS
44909: PPUSH
44910: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44914: LD_INT 1
44916: PPUSH
44917: LD_INT 5
44919: PPUSH
44920: CALL_OW 12
44924: PPUSH
44925: LD_VAR 0 1
44929: PPUSH
44930: LD_INT 1
44932: PPUSH
44933: CALL_OW 55
// end ;
44937: GO 44750
// end ;
44939: LD_VAR 0 5
44943: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44944: LD_INT 0
44946: PPUSH
44947: PPUSH
44948: PPUSH
44949: PPUSH
44950: PPUSH
44951: PPUSH
44952: PPUSH
44953: PPUSH
// if not turrets or not factories then
44954: LD_VAR 0 1
44958: NOT
44959: PUSH
44960: LD_VAR 0 2
44964: NOT
44965: OR
44966: IFFALSE 44970
// exit ;
44968: GO 45277
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44970: LD_ADDR_VAR 0 10
44974: PUSH
44975: LD_INT 5
44977: PUSH
44978: LD_INT 6
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: LD_INT 4
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 3
44997: PUSH
44998: LD_INT 5
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 24
45012: PUSH
45013: LD_INT 25
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 23
45022: PUSH
45023: LD_INT 27
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 42
45036: PUSH
45037: LD_INT 43
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 44
45046: PUSH
45047: LD_INT 46
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 45
45056: PUSH
45057: LD_INT 47
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: LIST
45073: ST_TO_ADDR
// result := [ ] ;
45074: LD_ADDR_VAR 0 3
45078: PUSH
45079: EMPTY
45080: ST_TO_ADDR
// for i in turrets do
45081: LD_ADDR_VAR 0 4
45085: PUSH
45086: LD_VAR 0 1
45090: PUSH
45091: FOR_IN
45092: IFFALSE 45275
// begin nat := GetNation ( i ) ;
45094: LD_ADDR_VAR 0 7
45098: PUSH
45099: LD_VAR 0 4
45103: PPUSH
45104: CALL_OW 248
45108: ST_TO_ADDR
// weapon := 0 ;
45109: LD_ADDR_VAR 0 8
45113: PUSH
45114: LD_INT 0
45116: ST_TO_ADDR
// if not nat then
45117: LD_VAR 0 7
45121: NOT
45122: IFFALSE 45126
// continue ;
45124: GO 45091
// for j in list [ nat ] do
45126: LD_ADDR_VAR 0 5
45130: PUSH
45131: LD_VAR 0 10
45135: PUSH
45136: LD_VAR 0 7
45140: ARRAY
45141: PUSH
45142: FOR_IN
45143: IFFALSE 45184
// if GetBWeapon ( i ) = j [ 1 ] then
45145: LD_VAR 0 4
45149: PPUSH
45150: CALL_OW 269
45154: PUSH
45155: LD_VAR 0 5
45159: PUSH
45160: LD_INT 1
45162: ARRAY
45163: EQUAL
45164: IFFALSE 45182
// begin weapon := j [ 2 ] ;
45166: LD_ADDR_VAR 0 8
45170: PUSH
45171: LD_VAR 0 5
45175: PUSH
45176: LD_INT 2
45178: ARRAY
45179: ST_TO_ADDR
// break ;
45180: GO 45184
// end ;
45182: GO 45142
45184: POP
45185: POP
// if not weapon then
45186: LD_VAR 0 8
45190: NOT
45191: IFFALSE 45195
// continue ;
45193: GO 45091
// for k in factories do
45195: LD_ADDR_VAR 0 6
45199: PUSH
45200: LD_VAR 0 2
45204: PUSH
45205: FOR_IN
45206: IFFALSE 45271
// begin weapons := AvailableWeaponList ( k ) ;
45208: LD_ADDR_VAR 0 9
45212: PUSH
45213: LD_VAR 0 6
45217: PPUSH
45218: CALL_OW 478
45222: ST_TO_ADDR
// if not weapons then
45223: LD_VAR 0 9
45227: NOT
45228: IFFALSE 45232
// continue ;
45230: GO 45205
// if weapon in weapons then
45232: LD_VAR 0 8
45236: PUSH
45237: LD_VAR 0 9
45241: IN
45242: IFFALSE 45269
// begin result := [ i , weapon ] ;
45244: LD_ADDR_VAR 0 3
45248: PUSH
45249: LD_VAR 0 4
45253: PUSH
45254: LD_VAR 0 8
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: ST_TO_ADDR
// exit ;
45263: POP
45264: POP
45265: POP
45266: POP
45267: GO 45277
// end ; end ;
45269: GO 45205
45271: POP
45272: POP
// end ;
45273: GO 45091
45275: POP
45276: POP
// end ;
45277: LD_VAR 0 3
45281: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
45282: LD_INT 0
45284: PPUSH
// if not side or side > 8 then
45285: LD_VAR 0 3
45289: NOT
45290: PUSH
45291: LD_VAR 0 3
45295: PUSH
45296: LD_INT 8
45298: GREATER
45299: OR
45300: IFFALSE 45304
// exit ;
45302: GO 45363
// if not range then
45304: LD_VAR 0 4
45308: NOT
45309: IFFALSE 45320
// range := - 12 ;
45311: LD_ADDR_VAR 0 4
45315: PUSH
45316: LD_INT 12
45318: NEG
45319: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
45320: LD_VAR 0 1
45324: PPUSH
45325: LD_VAR 0 2
45329: PPUSH
45330: LD_VAR 0 3
45334: PPUSH
45335: LD_VAR 0 4
45339: PPUSH
45340: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
45344: LD_VAR 0 1
45348: PPUSH
45349: LD_VAR 0 2
45353: PPUSH
45354: LD_VAR 0 3
45358: PPUSH
45359: CALL_OW 331
// end ;
45363: LD_VAR 0 5
45367: RET
// export function Video ( mode ) ; begin
45368: LD_INT 0
45370: PPUSH
// ingame_video = mode ;
45371: LD_ADDR_OWVAR 52
45375: PUSH
45376: LD_VAR 0 1
45380: ST_TO_ADDR
// interface_hidden = mode ;
45381: LD_ADDR_OWVAR 54
45385: PUSH
45386: LD_VAR 0 1
45390: ST_TO_ADDR
// end ;
45391: LD_VAR 0 2
45395: RET
// export function Join ( array , element ) ; begin
45396: LD_INT 0
45398: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45399: LD_ADDR_VAR 0 3
45403: PUSH
45404: LD_VAR 0 1
45408: PPUSH
45409: LD_VAR 0 1
45413: PUSH
45414: LD_INT 1
45416: PLUS
45417: PPUSH
45418: LD_VAR 0 2
45422: PPUSH
45423: CALL_OW 1
45427: ST_TO_ADDR
// end ;
45428: LD_VAR 0 3
45432: RET
// export function JoinUnion ( array , element ) ; begin
45433: LD_INT 0
45435: PPUSH
// result := array union element ;
45436: LD_ADDR_VAR 0 3
45440: PUSH
45441: LD_VAR 0 1
45445: PUSH
45446: LD_VAR 0 2
45450: UNION
45451: ST_TO_ADDR
// end ;
45452: LD_VAR 0 3
45456: RET
// export function GetBehemoths ( side ) ; begin
45457: LD_INT 0
45459: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
45460: LD_ADDR_VAR 0 2
45464: PUSH
45465: LD_INT 22
45467: PUSH
45468: LD_VAR 0 1
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 31
45479: PUSH
45480: LD_INT 25
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PPUSH
45491: CALL_OW 69
45495: ST_TO_ADDR
// end ;
45496: LD_VAR 0 2
45500: RET
// export function Shuffle ( array ) ; var i , index ; begin
45501: LD_INT 0
45503: PPUSH
45504: PPUSH
45505: PPUSH
// result := [ ] ;
45506: LD_ADDR_VAR 0 2
45510: PUSH
45511: EMPTY
45512: ST_TO_ADDR
// if not array then
45513: LD_VAR 0 1
45517: NOT
45518: IFFALSE 45522
// exit ;
45520: GO 45621
// Randomize ;
45522: CALL_OW 10
// for i = array downto 1 do
45526: LD_ADDR_VAR 0 3
45530: PUSH
45531: DOUBLE
45532: LD_VAR 0 1
45536: INC
45537: ST_TO_ADDR
45538: LD_INT 1
45540: PUSH
45541: FOR_DOWNTO
45542: IFFALSE 45619
// begin index := rand ( 1 , array ) ;
45544: LD_ADDR_VAR 0 4
45548: PUSH
45549: LD_INT 1
45551: PPUSH
45552: LD_VAR 0 1
45556: PPUSH
45557: CALL_OW 12
45561: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
45562: LD_ADDR_VAR 0 2
45566: PUSH
45567: LD_VAR 0 2
45571: PPUSH
45572: LD_VAR 0 2
45576: PUSH
45577: LD_INT 1
45579: PLUS
45580: PPUSH
45581: LD_VAR 0 1
45585: PUSH
45586: LD_VAR 0 4
45590: ARRAY
45591: PPUSH
45592: CALL_OW 2
45596: ST_TO_ADDR
// array := Delete ( array , index ) ;
45597: LD_ADDR_VAR 0 1
45601: PUSH
45602: LD_VAR 0 1
45606: PPUSH
45607: LD_VAR 0 4
45611: PPUSH
45612: CALL_OW 3
45616: ST_TO_ADDR
// end ;
45617: GO 45541
45619: POP
45620: POP
// end ;
45621: LD_VAR 0 2
45625: RET
// export function GetBaseMaterials ( base ) ; begin
45626: LD_INT 0
45628: PPUSH
// result := [ 0 , 0 , 0 ] ;
45629: LD_ADDR_VAR 0 2
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 0
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: LIST
45647: ST_TO_ADDR
// if not base then
45648: LD_VAR 0 1
45652: NOT
45653: IFFALSE 45657
// exit ;
45655: GO 45706
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
45657: LD_ADDR_VAR 0 2
45661: PUSH
45662: LD_VAR 0 1
45666: PPUSH
45667: LD_INT 1
45669: PPUSH
45670: CALL_OW 275
45674: PUSH
45675: LD_VAR 0 1
45679: PPUSH
45680: LD_INT 2
45682: PPUSH
45683: CALL_OW 275
45687: PUSH
45688: LD_VAR 0 1
45692: PPUSH
45693: LD_INT 3
45695: PPUSH
45696: CALL_OW 275
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: LIST
45705: ST_TO_ADDR
// end ;
45706: LD_VAR 0 2
45710: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
45711: LD_INT 0
45713: PPUSH
45714: PPUSH
// result := array ;
45715: LD_ADDR_VAR 0 3
45719: PUSH
45720: LD_VAR 0 1
45724: ST_TO_ADDR
// if size > 0 then
45725: LD_VAR 0 2
45729: PUSH
45730: LD_INT 0
45732: GREATER
45733: IFFALSE 45779
// for i := array downto size do
45735: LD_ADDR_VAR 0 4
45739: PUSH
45740: DOUBLE
45741: LD_VAR 0 1
45745: INC
45746: ST_TO_ADDR
45747: LD_VAR 0 2
45751: PUSH
45752: FOR_DOWNTO
45753: IFFALSE 45777
// result := Delete ( result , result ) ;
45755: LD_ADDR_VAR 0 3
45759: PUSH
45760: LD_VAR 0 3
45764: PPUSH
45765: LD_VAR 0 3
45769: PPUSH
45770: CALL_OW 3
45774: ST_TO_ADDR
45775: GO 45752
45777: POP
45778: POP
// end ;
45779: LD_VAR 0 3
45783: RET
// export function ComExit ( unit ) ; var tmp ; begin
45784: LD_INT 0
45786: PPUSH
45787: PPUSH
// if not IsInUnit ( unit ) then
45788: LD_VAR 0 1
45792: PPUSH
45793: CALL_OW 310
45797: NOT
45798: IFFALSE 45802
// exit ;
45800: GO 45862
// tmp := IsInUnit ( unit ) ;
45802: LD_ADDR_VAR 0 3
45806: PUSH
45807: LD_VAR 0 1
45811: PPUSH
45812: CALL_OW 310
45816: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45817: LD_VAR 0 3
45821: PPUSH
45822: CALL_OW 247
45826: PUSH
45827: LD_INT 2
45829: EQUAL
45830: IFFALSE 45843
// ComExitVehicle ( unit ) else
45832: LD_VAR 0 1
45836: PPUSH
45837: CALL_OW 121
45841: GO 45852
// ComExitBuilding ( unit ) ;
45843: LD_VAR 0 1
45847: PPUSH
45848: CALL_OW 122
// result := tmp ;
45852: LD_ADDR_VAR 0 2
45856: PUSH
45857: LD_VAR 0 3
45861: ST_TO_ADDR
// end ;
45862: LD_VAR 0 2
45866: RET
// export function ComExitAll ( units ) ; var i ; begin
45867: LD_INT 0
45869: PPUSH
45870: PPUSH
// if not units then
45871: LD_VAR 0 1
45875: NOT
45876: IFFALSE 45880
// exit ;
45878: GO 45906
// for i in units do
45880: LD_ADDR_VAR 0 3
45884: PUSH
45885: LD_VAR 0 1
45889: PUSH
45890: FOR_IN
45891: IFFALSE 45904
// ComExit ( i ) ;
45893: LD_VAR 0 3
45897: PPUSH
45898: CALL 45784 0 1
45902: GO 45890
45904: POP
45905: POP
// end ;
45906: LD_VAR 0 2
45910: RET
// export function ResetHc ; begin
45911: LD_INT 0
45913: PPUSH
// InitHc ;
45914: CALL_OW 19
// hc_importance := 0 ;
45918: LD_ADDR_OWVAR 32
45922: PUSH
45923: LD_INT 0
45925: ST_TO_ADDR
// end ;
45926: LD_VAR 0 1
45930: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45931: LD_INT 0
45933: PPUSH
45934: PPUSH
45935: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45936: LD_ADDR_VAR 0 6
45940: PUSH
45941: LD_VAR 0 1
45945: PUSH
45946: LD_VAR 0 3
45950: PLUS
45951: PUSH
45952: LD_INT 2
45954: DIV
45955: ST_TO_ADDR
// if _x < 0 then
45956: LD_VAR 0 6
45960: PUSH
45961: LD_INT 0
45963: LESS
45964: IFFALSE 45981
// _x := _x * - 1 ;
45966: LD_ADDR_VAR 0 6
45970: PUSH
45971: LD_VAR 0 6
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: MUL
45980: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45981: LD_ADDR_VAR 0 7
45985: PUSH
45986: LD_VAR 0 2
45990: PUSH
45991: LD_VAR 0 4
45995: PLUS
45996: PUSH
45997: LD_INT 2
45999: DIV
46000: ST_TO_ADDR
// if _y < 0 then
46001: LD_VAR 0 7
46005: PUSH
46006: LD_INT 0
46008: LESS
46009: IFFALSE 46026
// _y := _y * - 1 ;
46011: LD_ADDR_VAR 0 7
46015: PUSH
46016: LD_VAR 0 7
46020: PUSH
46021: LD_INT 1
46023: NEG
46024: MUL
46025: ST_TO_ADDR
// result := [ _x , _y ] ;
46026: LD_ADDR_VAR 0 5
46030: PUSH
46031: LD_VAR 0 6
46035: PUSH
46036: LD_VAR 0 7
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: ST_TO_ADDR
// end ;
46045: LD_VAR 0 5
46049: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46050: LD_INT 0
46052: PPUSH
46053: PPUSH
46054: PPUSH
46055: PPUSH
// task := GetTaskList ( unit ) ;
46056: LD_ADDR_VAR 0 7
46060: PUSH
46061: LD_VAR 0 1
46065: PPUSH
46066: CALL_OW 437
46070: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
46071: LD_VAR 0 7
46075: NOT
46076: PUSH
46077: LD_VAR 0 1
46081: PPUSH
46082: LD_VAR 0 2
46086: PPUSH
46087: CALL_OW 308
46091: NOT
46092: AND
46093: IFFALSE 46097
// exit ;
46095: GO 46215
// if IsInArea ( unit , area ) then
46097: LD_VAR 0 1
46101: PPUSH
46102: LD_VAR 0 2
46106: PPUSH
46107: CALL_OW 308
46111: IFFALSE 46129
// begin ComMoveToArea ( unit , goAway ) ;
46113: LD_VAR 0 1
46117: PPUSH
46118: LD_VAR 0 3
46122: PPUSH
46123: CALL_OW 113
// exit ;
46127: GO 46215
// end ; if task [ 1 ] [ 1 ] <> M then
46129: LD_VAR 0 7
46133: PUSH
46134: LD_INT 1
46136: ARRAY
46137: PUSH
46138: LD_INT 1
46140: ARRAY
46141: PUSH
46142: LD_STRING M
46144: NONEQUAL
46145: IFFALSE 46149
// exit ;
46147: GO 46215
// x := task [ 1 ] [ 2 ] ;
46149: LD_ADDR_VAR 0 5
46153: PUSH
46154: LD_VAR 0 7
46158: PUSH
46159: LD_INT 1
46161: ARRAY
46162: PUSH
46163: LD_INT 2
46165: ARRAY
46166: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
46167: LD_ADDR_VAR 0 6
46171: PUSH
46172: LD_VAR 0 7
46176: PUSH
46177: LD_INT 1
46179: ARRAY
46180: PUSH
46181: LD_INT 3
46183: ARRAY
46184: ST_TO_ADDR
// if InArea ( x , y , area ) then
46185: LD_VAR 0 5
46189: PPUSH
46190: LD_VAR 0 6
46194: PPUSH
46195: LD_VAR 0 2
46199: PPUSH
46200: CALL_OW 309
46204: IFFALSE 46215
// ComStop ( unit ) ;
46206: LD_VAR 0 1
46210: PPUSH
46211: CALL_OW 141
// end ;
46215: LD_VAR 0 4
46219: RET
// export function Abs ( value ) ; begin
46220: LD_INT 0
46222: PPUSH
// result := value ;
46223: LD_ADDR_VAR 0 2
46227: PUSH
46228: LD_VAR 0 1
46232: ST_TO_ADDR
// if value < 0 then
46233: LD_VAR 0 1
46237: PUSH
46238: LD_INT 0
46240: LESS
46241: IFFALSE 46258
// result := value * - 1 ;
46243: LD_ADDR_VAR 0 2
46247: PUSH
46248: LD_VAR 0 1
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: MUL
46257: ST_TO_ADDR
// end ;
46258: LD_VAR 0 2
46262: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
46263: LD_INT 0
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
// if not unit or not building then
46273: LD_VAR 0 1
46277: NOT
46278: PUSH
46279: LD_VAR 0 2
46283: NOT
46284: OR
46285: IFFALSE 46289
// exit ;
46287: GO 46515
// x := GetX ( building ) ;
46289: LD_ADDR_VAR 0 4
46293: PUSH
46294: LD_VAR 0 2
46298: PPUSH
46299: CALL_OW 250
46303: ST_TO_ADDR
// y := GetY ( building ) ;
46304: LD_ADDR_VAR 0 6
46308: PUSH
46309: LD_VAR 0 2
46313: PPUSH
46314: CALL_OW 251
46318: ST_TO_ADDR
// d := GetDir ( building ) ;
46319: LD_ADDR_VAR 0 8
46323: PUSH
46324: LD_VAR 0 2
46328: PPUSH
46329: CALL_OW 254
46333: ST_TO_ADDR
// r := 4 ;
46334: LD_ADDR_VAR 0 9
46338: PUSH
46339: LD_INT 4
46341: ST_TO_ADDR
// for i := 1 to 5 do
46342: LD_ADDR_VAR 0 10
46346: PUSH
46347: DOUBLE
46348: LD_INT 1
46350: DEC
46351: ST_TO_ADDR
46352: LD_INT 5
46354: PUSH
46355: FOR_TO
46356: IFFALSE 46513
// begin _x := ShiftX ( x , d , r + i ) ;
46358: LD_ADDR_VAR 0 5
46362: PUSH
46363: LD_VAR 0 4
46367: PPUSH
46368: LD_VAR 0 8
46372: PPUSH
46373: LD_VAR 0 9
46377: PUSH
46378: LD_VAR 0 10
46382: PLUS
46383: PPUSH
46384: CALL_OW 272
46388: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46389: LD_ADDR_VAR 0 7
46393: PUSH
46394: LD_VAR 0 6
46398: PPUSH
46399: LD_VAR 0 8
46403: PPUSH
46404: LD_VAR 0 9
46408: PUSH
46409: LD_VAR 0 10
46413: PLUS
46414: PPUSH
46415: CALL_OW 273
46419: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
46420: LD_VAR 0 5
46424: PPUSH
46425: LD_VAR 0 7
46429: PPUSH
46430: CALL_OW 488
46434: PUSH
46435: LD_VAR 0 5
46439: PPUSH
46440: LD_VAR 0 7
46444: PPUSH
46445: CALL_OW 428
46449: PPUSH
46450: CALL_OW 247
46454: PUSH
46455: LD_INT 3
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: IN
46465: NOT
46466: AND
46467: IFFALSE 46511
// begin ComMoveXY ( unit , _x , _y ) ;
46469: LD_VAR 0 1
46473: PPUSH
46474: LD_VAR 0 5
46478: PPUSH
46479: LD_VAR 0 7
46483: PPUSH
46484: CALL_OW 111
// result := [ _x , _y ] ;
46488: LD_ADDR_VAR 0 3
46492: PUSH
46493: LD_VAR 0 5
46497: PUSH
46498: LD_VAR 0 7
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: ST_TO_ADDR
// exit ;
46507: POP
46508: POP
46509: GO 46515
// end ; end ;
46511: GO 46355
46513: POP
46514: POP
// end ;
46515: LD_VAR 0 3
46519: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
46520: LD_INT 0
46522: PPUSH
46523: PPUSH
46524: PPUSH
// result := 0 ;
46525: LD_ADDR_VAR 0 3
46529: PUSH
46530: LD_INT 0
46532: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
46533: LD_VAR 0 1
46537: PUSH
46538: LD_INT 0
46540: LESS
46541: PUSH
46542: LD_VAR 0 1
46546: PUSH
46547: LD_INT 8
46549: GREATER
46550: OR
46551: PUSH
46552: LD_VAR 0 2
46556: PUSH
46557: LD_INT 0
46559: LESS
46560: OR
46561: PUSH
46562: LD_VAR 0 2
46566: PUSH
46567: LD_INT 8
46569: GREATER
46570: OR
46571: IFFALSE 46575
// exit ;
46573: GO 46650
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
46575: LD_ADDR_VAR 0 4
46579: PUSH
46580: LD_INT 22
46582: PUSH
46583: LD_VAR 0 2
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PPUSH
46592: CALL_OW 69
46596: PUSH
46597: FOR_IN
46598: IFFALSE 46648
// begin un := UnitShoot ( i ) ;
46600: LD_ADDR_VAR 0 5
46604: PUSH
46605: LD_VAR 0 4
46609: PPUSH
46610: CALL_OW 504
46614: ST_TO_ADDR
// if GetSide ( un ) = side1 then
46615: LD_VAR 0 5
46619: PPUSH
46620: CALL_OW 255
46624: PUSH
46625: LD_VAR 0 1
46629: EQUAL
46630: IFFALSE 46646
// begin result := un ;
46632: LD_ADDR_VAR 0 3
46636: PUSH
46637: LD_VAR 0 5
46641: ST_TO_ADDR
// exit ;
46642: POP
46643: POP
46644: GO 46650
// end ; end ;
46646: GO 46597
46648: POP
46649: POP
// end ;
46650: LD_VAR 0 3
46654: RET
// export function GetCargoBay ( units ) ; begin
46655: LD_INT 0
46657: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
46658: LD_ADDR_VAR 0 2
46662: PUSH
46663: LD_VAR 0 1
46667: PPUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 34
46673: PUSH
46674: LD_INT 12
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 34
46683: PUSH
46684: LD_INT 51
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 34
46693: PUSH
46694: LD_INT 32
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 34
46703: PUSH
46704: LD_EXP 67
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: PPUSH
46720: CALL_OW 72
46724: ST_TO_ADDR
// end ;
46725: LD_VAR 0 2
46729: RET
// export function Negate ( value ) ; begin
46730: LD_INT 0
46732: PPUSH
// result := not value ;
46733: LD_ADDR_VAR 0 2
46737: PUSH
46738: LD_VAR 0 1
46742: NOT
46743: ST_TO_ADDR
// end ;
46744: LD_VAR 0 2
46748: RET
// export function Inc ( value ) ; begin
46749: LD_INT 0
46751: PPUSH
// result := value + 1 ;
46752: LD_ADDR_VAR 0 2
46756: PUSH
46757: LD_VAR 0 1
46761: PUSH
46762: LD_INT 1
46764: PLUS
46765: ST_TO_ADDR
// end ;
46766: LD_VAR 0 2
46770: RET
// export function Dec ( value ) ; begin
46771: LD_INT 0
46773: PPUSH
// result := value - 1 ;
46774: LD_ADDR_VAR 0 2
46778: PUSH
46779: LD_VAR 0 1
46783: PUSH
46784: LD_INT 1
46786: MINUS
46787: ST_TO_ADDR
// end ;
46788: LD_VAR 0 2
46792: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46793: LD_INT 0
46795: PPUSH
46796: PPUSH
46797: PPUSH
46798: PPUSH
46799: PPUSH
46800: PPUSH
46801: PPUSH
46802: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46803: LD_VAR 0 1
46807: PPUSH
46808: LD_VAR 0 2
46812: PPUSH
46813: CALL_OW 488
46817: NOT
46818: PUSH
46819: LD_VAR 0 3
46823: PPUSH
46824: LD_VAR 0 4
46828: PPUSH
46829: CALL_OW 488
46833: NOT
46834: OR
46835: IFFALSE 46848
// begin result := - 1 ;
46837: LD_ADDR_VAR 0 5
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: ST_TO_ADDR
// exit ;
46846: GO 47083
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46848: LD_ADDR_VAR 0 12
46852: PUSH
46853: LD_VAR 0 1
46857: PPUSH
46858: LD_VAR 0 2
46862: PPUSH
46863: LD_VAR 0 3
46867: PPUSH
46868: LD_VAR 0 4
46872: PPUSH
46873: CALL 45931 0 4
46877: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46878: LD_ADDR_VAR 0 11
46882: PUSH
46883: LD_VAR 0 1
46887: PPUSH
46888: LD_VAR 0 2
46892: PPUSH
46893: LD_VAR 0 12
46897: PUSH
46898: LD_INT 1
46900: ARRAY
46901: PPUSH
46902: LD_VAR 0 12
46906: PUSH
46907: LD_INT 2
46909: ARRAY
46910: PPUSH
46911: CALL_OW 298
46915: ST_TO_ADDR
// distance := 9999 ;
46916: LD_ADDR_VAR 0 10
46920: PUSH
46921: LD_INT 9999
46923: ST_TO_ADDR
// for i := 0 to 5 do
46924: LD_ADDR_VAR 0 6
46928: PUSH
46929: DOUBLE
46930: LD_INT 0
46932: DEC
46933: ST_TO_ADDR
46934: LD_INT 5
46936: PUSH
46937: FOR_TO
46938: IFFALSE 47081
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46940: LD_ADDR_VAR 0 7
46944: PUSH
46945: LD_VAR 0 1
46949: PPUSH
46950: LD_VAR 0 6
46954: PPUSH
46955: LD_VAR 0 11
46959: PPUSH
46960: CALL_OW 272
46964: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46965: LD_ADDR_VAR 0 8
46969: PUSH
46970: LD_VAR 0 2
46974: PPUSH
46975: LD_VAR 0 6
46979: PPUSH
46980: LD_VAR 0 11
46984: PPUSH
46985: CALL_OW 273
46989: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46990: LD_VAR 0 7
46994: PPUSH
46995: LD_VAR 0 8
46999: PPUSH
47000: CALL_OW 488
47004: NOT
47005: IFFALSE 47009
// continue ;
47007: GO 46937
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
47009: LD_ADDR_VAR 0 9
47013: PUSH
47014: LD_VAR 0 12
47018: PUSH
47019: LD_INT 1
47021: ARRAY
47022: PPUSH
47023: LD_VAR 0 12
47027: PUSH
47028: LD_INT 2
47030: ARRAY
47031: PPUSH
47032: LD_VAR 0 7
47036: PPUSH
47037: LD_VAR 0 8
47041: PPUSH
47042: CALL_OW 298
47046: ST_TO_ADDR
// if tmp < distance then
47047: LD_VAR 0 9
47051: PUSH
47052: LD_VAR 0 10
47056: LESS
47057: IFFALSE 47079
// begin result := i ;
47059: LD_ADDR_VAR 0 5
47063: PUSH
47064: LD_VAR 0 6
47068: ST_TO_ADDR
// distance := tmp ;
47069: LD_ADDR_VAR 0 10
47073: PUSH
47074: LD_VAR 0 9
47078: ST_TO_ADDR
// end ; end ;
47079: GO 46937
47081: POP
47082: POP
// end ;
47083: LD_VAR 0 5
47087: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47088: LD_INT 0
47090: PPUSH
47091: PPUSH
// if not driver or not IsInUnit ( driver ) then
47092: LD_VAR 0 1
47096: NOT
47097: PUSH
47098: LD_VAR 0 1
47102: PPUSH
47103: CALL_OW 310
47107: NOT
47108: OR
47109: IFFALSE 47113
// exit ;
47111: GO 47203
// vehicle := IsInUnit ( driver ) ;
47113: LD_ADDR_VAR 0 3
47117: PUSH
47118: LD_VAR 0 1
47122: PPUSH
47123: CALL_OW 310
47127: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47128: LD_VAR 0 1
47132: PPUSH
47133: LD_STRING \
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: PUSH
47163: LD_STRING E
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: LD_VAR 0 3
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PPUSH
47199: CALL_OW 446
// end ;
47203: LD_VAR 0 2
47207: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47208: LD_INT 0
47210: PPUSH
47211: PPUSH
// if not driver or not IsInUnit ( driver ) then
47212: LD_VAR 0 1
47216: NOT
47217: PUSH
47218: LD_VAR 0 1
47222: PPUSH
47223: CALL_OW 310
47227: NOT
47228: OR
47229: IFFALSE 47233
// exit ;
47231: GO 47323
// vehicle := IsInUnit ( driver ) ;
47233: LD_ADDR_VAR 0 3
47237: PUSH
47238: LD_VAR 0 1
47242: PPUSH
47243: CALL_OW 310
47247: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47248: LD_VAR 0 1
47252: PPUSH
47253: LD_STRING \
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: PUSH
47283: LD_STRING E
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_VAR 0 3
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PPUSH
47319: CALL_OW 447
// end ;
47323: LD_VAR 0 2
47327: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
47328: LD_INT 0
47330: PPUSH
47331: PPUSH
47332: PPUSH
// tmp := [ ] ;
47333: LD_ADDR_VAR 0 5
47337: PUSH
47338: EMPTY
47339: ST_TO_ADDR
// for i in units do
47340: LD_ADDR_VAR 0 4
47344: PUSH
47345: LD_VAR 0 1
47349: PUSH
47350: FOR_IN
47351: IFFALSE 47389
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
47353: LD_ADDR_VAR 0 5
47357: PUSH
47358: LD_VAR 0 5
47362: PPUSH
47363: LD_VAR 0 5
47367: PUSH
47368: LD_INT 1
47370: PLUS
47371: PPUSH
47372: LD_VAR 0 4
47376: PPUSH
47377: CALL_OW 256
47381: PPUSH
47382: CALL_OW 2
47386: ST_TO_ADDR
47387: GO 47350
47389: POP
47390: POP
// if not tmp then
47391: LD_VAR 0 5
47395: NOT
47396: IFFALSE 47400
// exit ;
47398: GO 47448
// if asc then
47400: LD_VAR 0 2
47404: IFFALSE 47428
// result := SortListByListAsc ( units , tmp ) else
47406: LD_ADDR_VAR 0 3
47410: PUSH
47411: LD_VAR 0 1
47415: PPUSH
47416: LD_VAR 0 5
47420: PPUSH
47421: CALL_OW 76
47425: ST_TO_ADDR
47426: GO 47448
// result := SortListByListDesc ( units , tmp ) ;
47428: LD_ADDR_VAR 0 3
47432: PUSH
47433: LD_VAR 0 1
47437: PPUSH
47438: LD_VAR 0 5
47442: PPUSH
47443: CALL_OW 77
47447: ST_TO_ADDR
// end ;
47448: LD_VAR 0 3
47452: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
47453: LD_INT 0
47455: PPUSH
47456: PPUSH
// task := GetTaskList ( mech ) ;
47457: LD_ADDR_VAR 0 4
47461: PUSH
47462: LD_VAR 0 1
47466: PPUSH
47467: CALL_OW 437
47471: ST_TO_ADDR
// if not task then
47472: LD_VAR 0 4
47476: NOT
47477: IFFALSE 47481
// exit ;
47479: GO 47523
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
47481: LD_ADDR_VAR 0 3
47485: PUSH
47486: LD_VAR 0 4
47490: PUSH
47491: LD_INT 1
47493: ARRAY
47494: PUSH
47495: LD_INT 1
47497: ARRAY
47498: PUSH
47499: LD_STRING r
47501: EQUAL
47502: PUSH
47503: LD_VAR 0 4
47507: PUSH
47508: LD_INT 1
47510: ARRAY
47511: PUSH
47512: LD_INT 4
47514: ARRAY
47515: PUSH
47516: LD_VAR 0 2
47520: EQUAL
47521: AND
47522: ST_TO_ADDR
// end ;
47523: LD_VAR 0 3
47527: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
47528: LD_INT 0
47530: PPUSH
// SetDir ( unit , d ) ;
47531: LD_VAR 0 1
47535: PPUSH
47536: LD_VAR 0 4
47540: PPUSH
47541: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
47545: LD_VAR 0 1
47549: PPUSH
47550: LD_VAR 0 2
47554: PPUSH
47555: LD_VAR 0 3
47559: PPUSH
47560: LD_VAR 0 5
47564: PPUSH
47565: CALL_OW 48
// end ;
47569: LD_VAR 0 6
47573: RET
// export function ToNaturalNumber ( number ) ; begin
47574: LD_INT 0
47576: PPUSH
// result := number div 1 ;
47577: LD_ADDR_VAR 0 2
47581: PUSH
47582: LD_VAR 0 1
47586: PUSH
47587: LD_INT 1
47589: DIV
47590: ST_TO_ADDR
// if number < 0 then
47591: LD_VAR 0 1
47595: PUSH
47596: LD_INT 0
47598: LESS
47599: IFFALSE 47609
// result := 0 ;
47601: LD_ADDR_VAR 0 2
47605: PUSH
47606: LD_INT 0
47608: ST_TO_ADDR
// end ;
47609: LD_VAR 0 2
47613: RET
// export function SortByClass ( units , class ) ; var un ; begin
47614: LD_INT 0
47616: PPUSH
47617: PPUSH
// if not units or not class then
47618: LD_VAR 0 1
47622: NOT
47623: PUSH
47624: LD_VAR 0 2
47628: NOT
47629: OR
47630: IFFALSE 47634
// exit ;
47632: GO 47729
// result := [ ] ;
47634: LD_ADDR_VAR 0 3
47638: PUSH
47639: EMPTY
47640: ST_TO_ADDR
// for un in units do
47641: LD_ADDR_VAR 0 4
47645: PUSH
47646: LD_VAR 0 1
47650: PUSH
47651: FOR_IN
47652: IFFALSE 47727
// if GetClass ( un ) = class then
47654: LD_VAR 0 4
47658: PPUSH
47659: CALL_OW 257
47663: PUSH
47664: LD_VAR 0 2
47668: EQUAL
47669: IFFALSE 47696
// result := Insert ( result , 1 , un ) else
47671: LD_ADDR_VAR 0 3
47675: PUSH
47676: LD_VAR 0 3
47680: PPUSH
47681: LD_INT 1
47683: PPUSH
47684: LD_VAR 0 4
47688: PPUSH
47689: CALL_OW 2
47693: ST_TO_ADDR
47694: GO 47725
// result := Replace ( result , result + 1 , un ) ;
47696: LD_ADDR_VAR 0 3
47700: PUSH
47701: LD_VAR 0 3
47705: PPUSH
47706: LD_VAR 0 3
47710: PUSH
47711: LD_INT 1
47713: PLUS
47714: PPUSH
47715: LD_VAR 0 4
47719: PPUSH
47720: CALL_OW 1
47724: ST_TO_ADDR
47725: GO 47651
47727: POP
47728: POP
// end ;
47729: LD_VAR 0 3
47733: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
47734: LD_INT 0
47736: PPUSH
47737: PPUSH
47738: PPUSH
47739: PPUSH
47740: PPUSH
47741: PPUSH
47742: PPUSH
// result := [ ] ;
47743: LD_ADDR_VAR 0 4
47747: PUSH
47748: EMPTY
47749: ST_TO_ADDR
// if x - r < 0 then
47750: LD_VAR 0 1
47754: PUSH
47755: LD_VAR 0 3
47759: MINUS
47760: PUSH
47761: LD_INT 0
47763: LESS
47764: IFFALSE 47776
// min_x := 0 else
47766: LD_ADDR_VAR 0 8
47770: PUSH
47771: LD_INT 0
47773: ST_TO_ADDR
47774: GO 47792
// min_x := x - r ;
47776: LD_ADDR_VAR 0 8
47780: PUSH
47781: LD_VAR 0 1
47785: PUSH
47786: LD_VAR 0 3
47790: MINUS
47791: ST_TO_ADDR
// if y - r < 0 then
47792: LD_VAR 0 2
47796: PUSH
47797: LD_VAR 0 3
47801: MINUS
47802: PUSH
47803: LD_INT 0
47805: LESS
47806: IFFALSE 47818
// min_y := 0 else
47808: LD_ADDR_VAR 0 7
47812: PUSH
47813: LD_INT 0
47815: ST_TO_ADDR
47816: GO 47834
// min_y := y - r ;
47818: LD_ADDR_VAR 0 7
47822: PUSH
47823: LD_VAR 0 2
47827: PUSH
47828: LD_VAR 0 3
47832: MINUS
47833: ST_TO_ADDR
// max_x := x + r ;
47834: LD_ADDR_VAR 0 9
47838: PUSH
47839: LD_VAR 0 1
47843: PUSH
47844: LD_VAR 0 3
47848: PLUS
47849: ST_TO_ADDR
// max_y := y + r ;
47850: LD_ADDR_VAR 0 10
47854: PUSH
47855: LD_VAR 0 2
47859: PUSH
47860: LD_VAR 0 3
47864: PLUS
47865: ST_TO_ADDR
// for _x = min_x to max_x do
47866: LD_ADDR_VAR 0 5
47870: PUSH
47871: DOUBLE
47872: LD_VAR 0 8
47876: DEC
47877: ST_TO_ADDR
47878: LD_VAR 0 9
47882: PUSH
47883: FOR_TO
47884: IFFALSE 47985
// for _y = min_y to max_y do
47886: LD_ADDR_VAR 0 6
47890: PUSH
47891: DOUBLE
47892: LD_VAR 0 7
47896: DEC
47897: ST_TO_ADDR
47898: LD_VAR 0 10
47902: PUSH
47903: FOR_TO
47904: IFFALSE 47981
// begin if not ValidHex ( _x , _y ) then
47906: LD_VAR 0 5
47910: PPUSH
47911: LD_VAR 0 6
47915: PPUSH
47916: CALL_OW 488
47920: NOT
47921: IFFALSE 47925
// continue ;
47923: GO 47903
// if GetResourceTypeXY ( _x , _y ) then
47925: LD_VAR 0 5
47929: PPUSH
47930: LD_VAR 0 6
47934: PPUSH
47935: CALL_OW 283
47939: IFFALSE 47979
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47941: LD_ADDR_VAR 0 4
47945: PUSH
47946: LD_VAR 0 4
47950: PPUSH
47951: LD_VAR 0 4
47955: PUSH
47956: LD_INT 1
47958: PLUS
47959: PPUSH
47960: LD_VAR 0 5
47964: PUSH
47965: LD_VAR 0 6
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PPUSH
47974: CALL_OW 1
47978: ST_TO_ADDR
// end ;
47979: GO 47903
47981: POP
47982: POP
47983: GO 47883
47985: POP
47986: POP
// end ;
47987: LD_VAR 0 4
47991: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47992: LD_INT 0
47994: PPUSH
47995: PPUSH
47996: PPUSH
47997: PPUSH
47998: PPUSH
47999: PPUSH
48000: PPUSH
48001: PPUSH
// if not units then
48002: LD_VAR 0 1
48006: NOT
48007: IFFALSE 48011
// exit ;
48009: GO 48436
// result := UnitFilter ( units , [ f_ok ] ) ;
48011: LD_ADDR_VAR 0 3
48015: PUSH
48016: LD_VAR 0 1
48020: PPUSH
48021: LD_INT 50
48023: PUSH
48024: EMPTY
48025: LIST
48026: PPUSH
48027: CALL_OW 72
48031: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
48032: LD_ADDR_VAR 0 8
48036: PUSH
48037: LD_VAR 0 1
48041: PUSH
48042: LD_INT 1
48044: ARRAY
48045: PPUSH
48046: CALL_OW 255
48050: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
48051: LD_ADDR_VAR 0 10
48055: PUSH
48056: LD_INT 29
48058: PUSH
48059: LD_EXP 70
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: ST_TO_ADDR
// if not result then
48068: LD_VAR 0 3
48072: NOT
48073: IFFALSE 48077
// exit ;
48075: GO 48436
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
48077: LD_ADDR_VAR 0 5
48081: PUSH
48082: LD_INT 81
48084: PUSH
48085: LD_VAR 0 8
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PPUSH
48094: CALL_OW 69
48098: ST_TO_ADDR
// for i in result do
48099: LD_ADDR_VAR 0 4
48103: PUSH
48104: LD_VAR 0 3
48108: PUSH
48109: FOR_IN
48110: IFFALSE 48434
// begin tag := GetTag ( i ) + 1 ;
48112: LD_ADDR_VAR 0 9
48116: PUSH
48117: LD_VAR 0 4
48121: PPUSH
48122: CALL_OW 110
48126: PUSH
48127: LD_INT 1
48129: PLUS
48130: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
48131: LD_ADDR_VAR 0 7
48135: PUSH
48136: LD_VAR 0 4
48140: PPUSH
48141: CALL_OW 250
48145: PPUSH
48146: LD_VAR 0 4
48150: PPUSH
48151: CALL_OW 251
48155: PPUSH
48156: LD_INT 6
48158: PPUSH
48159: CALL 47734 0 3
48163: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
48164: LD_VAR 0 7
48168: PUSH
48169: LD_VAR 0 4
48173: PPUSH
48174: CALL_OW 264
48178: PUSH
48179: LD_VAR 0 10
48183: IN
48184: NOT
48185: AND
48186: IFFALSE 48225
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
48188: LD_VAR 0 4
48192: PPUSH
48193: LD_VAR 0 7
48197: PUSH
48198: LD_INT 1
48200: ARRAY
48201: PUSH
48202: LD_INT 1
48204: ARRAY
48205: PPUSH
48206: LD_VAR 0 7
48210: PUSH
48211: LD_INT 1
48213: ARRAY
48214: PUSH
48215: LD_INT 2
48217: ARRAY
48218: PPUSH
48219: CALL_OW 116
48223: GO 48432
// if path > tag then
48225: LD_VAR 0 2
48229: PUSH
48230: LD_VAR 0 9
48234: GREATER
48235: IFFALSE 48402
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
48237: LD_ADDR_VAR 0 6
48241: PUSH
48242: LD_VAR 0 5
48246: PPUSH
48247: LD_INT 91
48249: PUSH
48250: LD_VAR 0 4
48254: PUSH
48255: LD_INT 12
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: LIST
48262: PPUSH
48263: CALL_OW 72
48267: ST_TO_ADDR
// if nearEnemy then
48268: LD_VAR 0 6
48272: IFFALSE 48300
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
48274: LD_VAR 0 4
48278: PPUSH
48279: LD_VAR 0 6
48283: PPUSH
48284: LD_VAR 0 4
48288: PPUSH
48289: CALL_OW 74
48293: PPUSH
48294: CALL_OW 115
48298: GO 48400
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
48300: LD_VAR 0 4
48304: PPUSH
48305: LD_VAR 0 2
48309: PUSH
48310: LD_VAR 0 9
48314: ARRAY
48315: PUSH
48316: LD_INT 1
48318: ARRAY
48319: PPUSH
48320: LD_VAR 0 2
48324: PUSH
48325: LD_VAR 0 9
48329: ARRAY
48330: PUSH
48331: LD_INT 2
48333: ARRAY
48334: PPUSH
48335: CALL_OW 297
48339: PUSH
48340: LD_INT 6
48342: GREATER
48343: IFFALSE 48386
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
48345: LD_VAR 0 4
48349: PPUSH
48350: LD_VAR 0 2
48354: PUSH
48355: LD_VAR 0 9
48359: ARRAY
48360: PUSH
48361: LD_INT 1
48363: ARRAY
48364: PPUSH
48365: LD_VAR 0 2
48369: PUSH
48370: LD_VAR 0 9
48374: ARRAY
48375: PUSH
48376: LD_INT 2
48378: ARRAY
48379: PPUSH
48380: CALL_OW 114
48384: GO 48400
// SetTag ( i , tag ) ;
48386: LD_VAR 0 4
48390: PPUSH
48391: LD_VAR 0 9
48395: PPUSH
48396: CALL_OW 109
// end else
48400: GO 48432
// if enemy then
48402: LD_VAR 0 5
48406: IFFALSE 48432
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
48408: LD_VAR 0 4
48412: PPUSH
48413: LD_VAR 0 5
48417: PPUSH
48418: LD_VAR 0 4
48422: PPUSH
48423: CALL_OW 74
48427: PPUSH
48428: CALL_OW 115
// end ;
48432: GO 48109
48434: POP
48435: POP
// end ;
48436: LD_VAR 0 3
48440: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
48441: LD_INT 0
48443: PPUSH
48444: PPUSH
48445: PPUSH
// if not unit or IsInUnit ( unit ) then
48446: LD_VAR 0 1
48450: NOT
48451: PUSH
48452: LD_VAR 0 1
48456: PPUSH
48457: CALL_OW 310
48461: OR
48462: IFFALSE 48466
// exit ;
48464: GO 48557
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
48466: LD_ADDR_VAR 0 4
48470: PUSH
48471: LD_VAR 0 1
48475: PPUSH
48476: CALL_OW 250
48480: PPUSH
48481: LD_VAR 0 2
48485: PPUSH
48486: LD_INT 1
48488: PPUSH
48489: CALL_OW 272
48493: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
48494: LD_ADDR_VAR 0 5
48498: PUSH
48499: LD_VAR 0 1
48503: PPUSH
48504: CALL_OW 251
48508: PPUSH
48509: LD_VAR 0 2
48513: PPUSH
48514: LD_INT 1
48516: PPUSH
48517: CALL_OW 273
48521: ST_TO_ADDR
// if ValidHex ( x , y ) then
48522: LD_VAR 0 4
48526: PPUSH
48527: LD_VAR 0 5
48531: PPUSH
48532: CALL_OW 488
48536: IFFALSE 48557
// ComTurnXY ( unit , x , y ) ;
48538: LD_VAR 0 1
48542: PPUSH
48543: LD_VAR 0 4
48547: PPUSH
48548: LD_VAR 0 5
48552: PPUSH
48553: CALL_OW 118
// end ;
48557: LD_VAR 0 3
48561: RET
// export function SeeUnits ( side , units ) ; var i ; begin
48562: LD_INT 0
48564: PPUSH
48565: PPUSH
// result := false ;
48566: LD_ADDR_VAR 0 3
48570: PUSH
48571: LD_INT 0
48573: ST_TO_ADDR
// if not units then
48574: LD_VAR 0 2
48578: NOT
48579: IFFALSE 48583
// exit ;
48581: GO 48628
// for i in units do
48583: LD_ADDR_VAR 0 4
48587: PUSH
48588: LD_VAR 0 2
48592: PUSH
48593: FOR_IN
48594: IFFALSE 48626
// if See ( side , i ) then
48596: LD_VAR 0 1
48600: PPUSH
48601: LD_VAR 0 4
48605: PPUSH
48606: CALL_OW 292
48610: IFFALSE 48624
// begin result := true ;
48612: LD_ADDR_VAR 0 3
48616: PUSH
48617: LD_INT 1
48619: ST_TO_ADDR
// exit ;
48620: POP
48621: POP
48622: GO 48628
// end ;
48624: GO 48593
48626: POP
48627: POP
// end ;
48628: LD_VAR 0 3
48632: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
48633: LD_INT 0
48635: PPUSH
48636: PPUSH
48637: PPUSH
48638: PPUSH
// if not unit or not points then
48639: LD_VAR 0 1
48643: NOT
48644: PUSH
48645: LD_VAR 0 2
48649: NOT
48650: OR
48651: IFFALSE 48655
// exit ;
48653: GO 48745
// dist := 99999 ;
48655: LD_ADDR_VAR 0 5
48659: PUSH
48660: LD_INT 99999
48662: ST_TO_ADDR
// for i in points do
48663: LD_ADDR_VAR 0 4
48667: PUSH
48668: LD_VAR 0 2
48672: PUSH
48673: FOR_IN
48674: IFFALSE 48743
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48676: LD_ADDR_VAR 0 6
48680: PUSH
48681: LD_VAR 0 1
48685: PPUSH
48686: LD_VAR 0 4
48690: PUSH
48691: LD_INT 1
48693: ARRAY
48694: PPUSH
48695: LD_VAR 0 4
48699: PUSH
48700: LD_INT 2
48702: ARRAY
48703: PPUSH
48704: CALL_OW 297
48708: ST_TO_ADDR
// if tmpDist < dist then
48709: LD_VAR 0 6
48713: PUSH
48714: LD_VAR 0 5
48718: LESS
48719: IFFALSE 48741
// begin result := i ;
48721: LD_ADDR_VAR 0 3
48725: PUSH
48726: LD_VAR 0 4
48730: ST_TO_ADDR
// dist := tmpDist ;
48731: LD_ADDR_VAR 0 5
48735: PUSH
48736: LD_VAR 0 6
48740: ST_TO_ADDR
// end ; end ;
48741: GO 48673
48743: POP
48744: POP
// end ;
48745: LD_VAR 0 3
48749: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
48750: LD_INT 0
48752: PPUSH
// uc_side := side ;
48753: LD_ADDR_OWVAR 20
48757: PUSH
48758: LD_VAR 0 1
48762: ST_TO_ADDR
// uc_nation := 3 ;
48763: LD_ADDR_OWVAR 21
48767: PUSH
48768: LD_INT 3
48770: ST_TO_ADDR
// vc_chassis := 25 ;
48771: LD_ADDR_OWVAR 37
48775: PUSH
48776: LD_INT 25
48778: ST_TO_ADDR
// vc_engine := engine_siberite ;
48779: LD_ADDR_OWVAR 39
48783: PUSH
48784: LD_INT 3
48786: ST_TO_ADDR
// vc_control := control_computer ;
48787: LD_ADDR_OWVAR 38
48791: PUSH
48792: LD_INT 3
48794: ST_TO_ADDR
// vc_weapon := 59 ;
48795: LD_ADDR_OWVAR 40
48799: PUSH
48800: LD_INT 59
48802: ST_TO_ADDR
// result := CreateVehicle ;
48803: LD_ADDR_VAR 0 5
48807: PUSH
48808: CALL_OW 45
48812: ST_TO_ADDR
// SetDir ( result , d ) ;
48813: LD_VAR 0 5
48817: PPUSH
48818: LD_VAR 0 4
48822: PPUSH
48823: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
48827: LD_VAR 0 5
48831: PPUSH
48832: LD_VAR 0 2
48836: PPUSH
48837: LD_VAR 0 3
48841: PPUSH
48842: LD_INT 0
48844: PPUSH
48845: CALL_OW 48
// end ;
48849: LD_VAR 0 5
48853: RET
