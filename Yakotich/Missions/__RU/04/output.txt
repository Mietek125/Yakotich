// starting var b , n ; begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 192 0 0
// SetBname ( NorthLenin , lenin ) ;
   8: LD_INT 253
  10: PPUSH
  11: LD_STRING lenin
  13: PPUSH
  14: CALL_OW 500
// SetBname ( SouthLenin , lenin ) ;
  18: LD_INT 218
  20: PPUSH
  21: LD_STRING lenin
  23: PPUSH
  24: CALL_OW 500
// SetBname ( MorozovBase , OC ) ;
  28: LD_INT 348
  30: PPUSH
  31: LD_STRING OC
  33: PPUSH
  34: CALL_OW 500
// SetBname ( YakotichBase , kamenev ) ;
  38: LD_INT 312
  40: PPUSH
  41: LD_STRING kamenev
  43: PPUSH
  44: CALL_OW 500
// SetBname ( BukovBase , Kuybyshev ) ;
  48: LD_INT 127
  50: PPUSH
  51: LD_STRING Kuybyshev
  53: PPUSH
  54: CALL_OW 500
// AnimateTrees ( true ) ;
  58: LD_INT 1
  60: PPUSH
  61: CALL_OW 573
// Randomize ;
  65: CALL_OW 10
// RandomizeAll ;
  69: CALL_OW 11
// for b in FilterUnitsInArea ( SouthLeninArea , [ [ f_type , unit_building ] ] ) do
  73: LD_ADDR_VAR 0 1
  77: PUSH
  78: LD_INT 4
  80: PPUSH
  81: LD_INT 21
  83: PUSH
  84: LD_INT 3
  86: PUSH
  87: EMPTY
  88: LIST
  89: LIST
  90: PUSH
  91: EMPTY
  92: LIST
  93: PPUSH
  94: CALL_OW 70
  98: PUSH
  99: FOR_IN
 100: IFFALSE 116
// ComLinkToBase ( SouthLenin , b ) ;
 102: LD_INT 218
 104: PPUSH
 105: LD_VAR 0 1
 109: PPUSH
 110: CALL_OW 169
 114: GO 99
 116: POP
 117: POP
// for n in FilterUnitsInArea ( NorthLeninArea , [ [ f_type , unit_building ] ] ) do
 118: LD_ADDR_VAR 0 2
 122: PUSH
 123: LD_INT 5
 125: PPUSH
 126: LD_INT 21
 128: PUSH
 129: LD_INT 3
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: PUSH
 136: EMPTY
 137: LIST
 138: PPUSH
 139: CALL_OW 70
 143: PUSH
 144: FOR_IN
 145: IFFALSE 161
// ComLinkToBase ( NorthLenin , n ) ;
 147: LD_INT 253
 149: PPUSH
 150: LD_VAR 0 2
 154: PPUSH
 155: CALL_OW 169
 159: GO 144
 161: POP
 162: POP
// InitGlobalVariables ;
 163: CALL 3673 0 0
// InitRussian ;
 167: CALL 424 0 0
// Miotacz ;
 171: CALL 1872 0 0
// Action ;
 175: CALL 1973 0 0
// DebugMode ;
 179: CALL 249 0 0
// game_speed = 6 ;
 183: LD_ADDR_OWVAR 65
 187: PUSH
 188: LD_INT 6
 190: ST_TO_ADDR
// end ;
 191: END
// export YakotichCrew , BierezovTeam ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav , Jegor , Grigori , Anton ; export Tank , Cargo1 , Cargo2 ; export Natasza , Belkov2 , Oblukov , Kovalyuk , Kozlov ; export Bierezov , Sharonov , Lesov , Aleinik , Korotajev , Bautin ; export Morozov , Platonov , Popov , Gaydar , Bukov , Yashin ; export PrepareTime ; export debug ; export mission_prefix ; export start_ended , ivan_came ; function Init ; begin
 192: LD_INT 0
 194: PPUSH
// mission_prefix := 04_ ;
 195: LD_ADDR_EXP 42
 199: PUSH
 200: LD_STRING 04_
 202: ST_TO_ADDR
// start_ended = false ;
 203: LD_ADDR_EXP 43
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// ivan_came = false ;
 211: LD_ADDR_EXP 44
 215: PUSH
 216: LD_INT 0
 218: ST_TO_ADDR
// PrepareTime := [ 40 40$0 , 35 35$0 , 30 30$0 ] [ Difficulty ] ;
 219: LD_ADDR_EXP 40
 223: PUSH
 224: LD_INT 84000
 226: PUSH
 227: LD_INT 73500
 229: PUSH
 230: LD_INT 63000
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: LIST
 237: PUSH
 238: LD_OWVAR 67
 242: ARRAY
 243: ST_TO_ADDR
// end ;
 244: LD_VAR 0 1
 248: RET
// export function DebugMode ; begin
 249: LD_INT 0
 251: PPUSH
// if Debug = true then
 252: LD_EXP 41
 256: PUSH
 257: LD_INT 1
 259: EQUAL
 260: IFFALSE 281
// begin Difficulty := 3 ;
 262: LD_ADDR_OWVAR 67
 266: PUSH
 267: LD_INT 3
 269: ST_TO_ADDR
// TurnFogOff ( ) ;
 270: CALL_OW 537
// FogOff ( 3 ) ;
 274: LD_INT 3
 276: PPUSH
 277: CALL_OW 344
// end ; end ; end_of_file
 281: LD_VAR 0 1
 285: RET
// every 4 4$0 do
 286: GO 288
 288: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , YakotichCrates , true ) ;
 289: LD_INT 3
 291: PPUSH
 292: LD_INT 5
 294: PPUSH
 295: CALL_OW 12
 299: PPUSH
 300: LD_INT 11
 302: PPUSH
 303: LD_INT 1
 305: PPUSH
 306: CALL_OW 55
// enable ;
 310: ENABLE
// end ;
 311: END
// every 7 7$0 do var i ;
 312: GO 314
 314: DISABLE
 315: LD_INT 0
 317: PPUSH
// begin for i = 1 to 3 do
 318: LD_ADDR_VAR 0 1
 322: PUSH
 323: DOUBLE
 324: LD_INT 1
 326: DEC
 327: ST_TO_ADDR
 328: LD_INT 3
 330: PUSH
 331: FOR_TO
 332: IFFALSE 357
// begin CreateCratesArea ( rand ( 4 , 5 ) , CratesArea , true ) ;
 334: LD_INT 4
 336: PPUSH
 337: LD_INT 5
 339: PPUSH
 340: CALL_OW 12
 344: PPUSH
 345: LD_INT 12
 347: PPUSH
 348: LD_INT 1
 350: PPUSH
 351: CALL_OW 55
// end ;
 355: GO 331
 357: POP
 358: POP
// enable ;
 359: ENABLE
// end ;
 360: PPOPN 1
 362: END
// every 5 5$0 trigger ivan_came = true do var i ;
 363: LD_EXP 44
 367: PUSH
 368: LD_INT 1
 370: EQUAL
 371: IFFALSE 421
 373: GO 375
 375: DISABLE
 376: LD_INT 0
 378: PPUSH
// begin for i = 1 to 2 do
 379: LD_ADDR_VAR 0 1
 383: PUSH
 384: DOUBLE
 385: LD_INT 1
 387: DEC
 388: ST_TO_ADDR
 389: LD_INT 2
 391: PUSH
 392: FOR_TO
 393: IFFALSE 419
// begin CreateCratesArea ( rand ( 1 , 5 ) , BierezovCrates , true ) ;
 395: LD_INT 1
 397: PPUSH
 398: LD_INT 5
 400: PPUSH
 401: CALL_OW 12
 405: PPUSH
 406: LD_INT 13
 408: PPUSH
 409: LD_INT 1
 411: PPUSH
 412: CALL_OW 55
// enable ;
 416: ENABLE
// end ;
 417: GO 392
 419: POP
 420: POP
// end ; end_of_file
 421: PPOPN 1
 423: END
// export function InitRussian ; begin
 424: LD_INT 0
 426: PPUSH
// Uc_Nation := 3 ;
 427: LD_ADDR_OWVAR 21
 431: PUSH
 432: LD_INT 3
 434: ST_TO_ADDR
// Uc_Side := 3 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 3
 442: ST_TO_ADDR
// Uc_Direction := 2 ;
 443: LD_ADDR_OWVAR 24
 447: PUSH
 448: LD_INT 2
 450: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 03_ ) ;
 451: LD_ADDR_EXP 3
 455: PUSH
 456: LD_STRING Yakotich
 458: PPUSH
 459: LD_INT 1
 461: PPUSH
 462: LD_STRING 03_
 464: PPUSH
 465: CALL 3849 0 3
 469: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 03_ ) ;
 470: LD_ADDR_EXP 4
 474: PUSH
 475: LD_STRING Mietek
 477: PPUSH
 478: LD_INT 1
 480: PPUSH
 481: LD_STRING 03_
 483: PPUSH
 484: CALL 3849 0 3
 488: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 03_ ) ;
 489: LD_ADDR_EXP 5
 493: PUSH
 494: LD_STRING Boris
 496: PPUSH
 497: LD_INT 1
 499: PPUSH
 500: LD_STRING 03_
 502: PPUSH
 503: CALL 3849 0 3
 507: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 03_ ) ;
 508: LD_ADDR_EXP 7
 512: PUSH
 513: LD_STRING Michail
 515: PPUSH
 516: LD_INT 1
 518: PPUSH
 519: LD_STRING 03_
 521: PPUSH
 522: CALL 3849 0 3
 526: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 03_ ) ;
 527: LD_ADDR_EXP 6
 531: PUSH
 532: LD_STRING Vasilij
 534: PPUSH
 535: LD_INT 1
 537: PPUSH
 538: LD_STRING 03_
 540: PPUSH
 541: CALL 3849 0 3
 545: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 03_ ) ;
 546: LD_ADDR_EXP 8
 550: PUSH
 551: LD_STRING Constantin
 553: PPUSH
 554: LD_INT 1
 556: PPUSH
 557: LD_STRING 03_
 559: PPUSH
 560: CALL 3849 0 3
 564: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 03_ ) ;
 565: LD_ADDR_EXP 9
 569: PUSH
 570: LD_STRING Maksim
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: LD_STRING 03_
 578: PPUSH
 579: CALL 3849 0 3
 583: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 03_ ) ;
 584: LD_ADDR_EXP 10
 588: PUSH
 589: LD_STRING Fiodor
 591: PPUSH
 592: LD_INT 1
 594: PPUSH
 595: LD_STRING 03_
 597: PPUSH
 598: CALL 3849 0 3
 602: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 03_ ) ;
 603: LD_ADDR_EXP 13
 607: PUSH
 608: LD_STRING Aleksiej
 610: PPUSH
 611: LD_INT 1
 613: PPUSH
 614: LD_STRING 03_
 616: PPUSH
 617: CALL 3849 0 3
 621: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 03_ ) ;
 622: LD_ADDR_EXP 11
 626: PUSH
 627: LD_STRING Pavel
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: LD_STRING 03_
 635: PPUSH
 636: CALL 3849 0 3
 640: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 03_ ) ;
 641: LD_ADDR_EXP 12
 645: PUSH
 646: LD_STRING Zakhar
 648: PPUSH
 649: LD_INT 1
 651: PPUSH
 652: LD_STRING 03_
 654: PPUSH
 655: CALL 3849 0 3
 659: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 03_ ) ;
 660: LD_ADDR_EXP 14
 664: PUSH
 665: LD_STRING Aleksandr
 667: PPUSH
 668: LD_INT 1
 670: PPUSH
 671: LD_STRING 03_
 673: PPUSH
 674: CALL 3849 0 3
 678: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , true , 03_ ) ;
 679: LD_ADDR_EXP 16
 683: PUSH
 684: LD_STRING Stanislav
 686: PPUSH
 687: LD_INT 1
 689: PPUSH
 690: LD_STRING 03_
 692: PPUSH
 693: CALL 3849 0 3
 697: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , true , 03_ ) ;
 698: LD_ADDR_EXP 15
 702: PUSH
 703: LD_STRING Josif
 705: PPUSH
 706: LD_INT 1
 708: PPUSH
 709: LD_STRING 03_
 711: PPUSH
 712: CALL 3849 0 3
 716: ST_TO_ADDR
// Jegor := PrepareUnit ( Jegor , true , 03_ ) ;
 717: LD_ADDR_EXP 17
 721: PUSH
 722: LD_STRING Jegor
 724: PPUSH
 725: LD_INT 1
 727: PPUSH
 728: LD_STRING 03_
 730: PPUSH
 731: CALL 3849 0 3
 735: ST_TO_ADDR
// Grigori := PrepareUnit ( Grigori , true , 03_ ) ;
 736: LD_ADDR_EXP 18
 740: PUSH
 741: LD_STRING Grigori
 743: PPUSH
 744: LD_INT 1
 746: PPUSH
 747: LD_STRING 03_
 749: PPUSH
 750: CALL 3849 0 3
 754: ST_TO_ADDR
// Anton := PrepareUnit ( Anton , true , 03_ ) ;
 755: LD_ADDR_EXP 19
 759: PUSH
 760: LD_STRING Anton
 762: PPUSH
 763: LD_INT 1
 765: PPUSH
 766: LD_STRING 03_
 768: PPUSH
 769: CALL 3849 0 3
 773: ST_TO_ADDR
// YakotichCrew = YakotichCrew ^ Boris ^ Michail ^ Vasilij ^ Constantin ^ Maksim ^ Fiodor ^ Aleksiej ^ Pavel ^ Zakhar ^ Aleksandr ^ Stanislav ^ Josif ^ Jegor ^ Grigori ^ Anton ;
 774: LD_ADDR_EXP 1
 778: PUSH
 779: LD_EXP 1
 783: PUSH
 784: LD_EXP 5
 788: ADD
 789: PUSH
 790: LD_EXP 7
 794: ADD
 795: PUSH
 796: LD_EXP 6
 800: ADD
 801: PUSH
 802: LD_EXP 8
 806: ADD
 807: PUSH
 808: LD_EXP 9
 812: ADD
 813: PUSH
 814: LD_EXP 10
 818: ADD
 819: PUSH
 820: LD_EXP 13
 824: ADD
 825: PUSH
 826: LD_EXP 11
 830: ADD
 831: PUSH
 832: LD_EXP 12
 836: ADD
 837: PUSH
 838: LD_EXP 14
 842: ADD
 843: PUSH
 844: LD_EXP 16
 848: ADD
 849: PUSH
 850: LD_EXP 15
 854: ADD
 855: PUSH
 856: LD_EXP 17
 860: ADD
 861: PUSH
 862: LD_EXP 18
 866: ADD
 867: PUSH
 868: LD_EXP 19
 872: ADD
 873: ST_TO_ADDR
// SetClass ( [ Yakotich , Mietek , Constantin , Maksim , Fiodor , Aleksiej , Zakhar , Aleksandr , Josif ] , 1 ) ;
 874: LD_EXP 3
 878: PUSH
 879: LD_EXP 4
 883: PUSH
 884: LD_EXP 8
 888: PUSH
 889: LD_EXP 9
 893: PUSH
 894: LD_EXP 10
 898: PUSH
 899: LD_EXP 13
 903: PUSH
 904: LD_EXP 12
 908: PUSH
 909: LD_EXP 14
 913: PUSH
 914: LD_EXP 15
 918: PUSH
 919: EMPTY
 920: LIST
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: CALL_OW 336
// SetClass ( [ Boris , Anton ] , 2 ) ;
 937: LD_EXP 5
 941: PUSH
 942: LD_EXP 19
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PPUSH
 951: LD_INT 2
 953: PPUSH
 954: CALL_OW 336
// SetClass ( [ Michail , Pavel , Jegor ] , 3 ) ;
 958: LD_EXP 7
 962: PUSH
 963: LD_EXP 11
 967: PUSH
 968: LD_EXP 17
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: LIST
 977: PPUSH
 978: LD_INT 3
 980: PPUSH
 981: CALL_OW 336
// SetClass ( [ Stanislav , Vasilij , Grigori ] , 4 ) ;
 985: LD_EXP 16
 989: PUSH
 990: LD_EXP 6
 994: PUSH
 995: LD_EXP 18
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: PPUSH
1005: LD_INT 4
1007: PPUSH
1008: CALL_OW 336
// PlaceUnitArea ( Yakotich , EnterArea , false ) ;
1012: LD_EXP 3
1016: PPUSH
1017: LD_INT 3
1019: PPUSH
1020: LD_INT 0
1022: PPUSH
1023: CALL_OW 49
// PlaceUnitArea ( Mietek , EnterArea , false ) ;
1027: LD_EXP 4
1031: PPUSH
1032: LD_INT 3
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: CALL_OW 49
// PlaceUnitArea ( Boris , EnterArea , false ) ;
1042: LD_EXP 5
1046: PPUSH
1047: LD_INT 3
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL_OW 49
// PlaceUnitArea ( Vasilij , EnterArea , false ) ;
1057: LD_EXP 6
1061: PPUSH
1062: LD_INT 3
1064: PPUSH
1065: LD_INT 0
1067: PPUSH
1068: CALL_OW 49
// PlaceUnitArea ( Constantin , EnterArea , false ) ;
1072: LD_EXP 8
1076: PPUSH
1077: LD_INT 3
1079: PPUSH
1080: LD_INT 0
1082: PPUSH
1083: CALL_OW 49
// PlaceUnitArea ( Maksim , EnterArea , false ) ;
1087: LD_EXP 9
1091: PPUSH
1092: LD_INT 3
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// PlaceUnitArea ( Fiodor , EnterArea , false ) ;
1102: LD_EXP 10
1106: PPUSH
1107: LD_INT 3
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: CALL_OW 49
// PlaceUnitArea ( Zakhar , EnterArea , false ) ;
1117: LD_EXP 12
1121: PPUSH
1122: LD_INT 3
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL_OW 49
// PlaceUnitArea ( Aleksandr , EnterArea , false ) ;
1132: LD_EXP 14
1136: PPUSH
1137: LD_INT 3
1139: PPUSH
1140: LD_INT 0
1142: PPUSH
1143: CALL_OW 49
// PlaceUnitArea ( Stanislav , EnterArea , false ) ;
1147: LD_EXP 16
1151: PPUSH
1152: LD_INT 3
1154: PPUSH
1155: LD_INT 0
1157: PPUSH
1158: CALL_OW 49
// PlaceUnitArea ( Josif , EnterArea , false ) ;
1162: LD_EXP 15
1166: PPUSH
1167: LD_INT 3
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// PlaceUnitArea ( Grigori , EnterArea , false ) ;
1177: LD_EXP 18
1181: PPUSH
1182: LD_INT 3
1184: PPUSH
1185: LD_INT 0
1187: PPUSH
1188: CALL_OW 49
// PlaceUnitArea ( Anton , EnterArea , false ) ;
1192: LD_EXP 19
1196: PPUSH
1197: LD_INT 3
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: CALL_OW 49
// PlaceUnitArea ( Pavel , EnterArea , false ) ;
1207: LD_EXP 11
1211: PPUSH
1212: LD_INT 3
1214: PPUSH
1215: LD_INT 0
1217: PPUSH
1218: CALL_OW 49
// PlaceUnitArea ( Jegor , EnterArea , false ) ;
1222: LD_EXP 17
1226: PPUSH
1227: LD_INT 3
1229: PPUSH
1230: LD_INT 0
1232: PPUSH
1233: CALL_OW 49
// Natasza := PrepareUnit ( Natasza , false ,  ) ;
1237: LD_ADDR_EXP 23
1241: PUSH
1242: LD_STRING Natasza
1244: PPUSH
1245: LD_INT 0
1247: PPUSH
1248: LD_STRING 
1250: PPUSH
1251: CALL 3849 0 3
1255: ST_TO_ADDR
// Belkov2 := PrepareUnit ( Belkov2 , false ,  ) ;
1256: LD_ADDR_EXP 24
1260: PUSH
1261: LD_STRING Belkov2
1263: PPUSH
1264: LD_INT 0
1266: PPUSH
1267: LD_STRING 
1269: PPUSH
1270: CALL 3849 0 3
1274: ST_TO_ADDR
// Oblukov := PrepareUnit ( Oblukov , false ,  ) ;
1275: LD_ADDR_EXP 25
1279: PUSH
1280: LD_STRING Oblukov
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: LD_STRING 
1288: PPUSH
1289: CALL 3849 0 3
1293: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , false ,  ) ;
1294: LD_ADDR_EXP 26
1298: PUSH
1299: LD_STRING Kovalyuk
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: LD_STRING 
1307: PPUSH
1308: CALL 3849 0 3
1312: ST_TO_ADDR
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
1313: LD_ADDR_EXP 27
1317: PUSH
1318: LD_STRING Kozlov
1320: PPUSH
1321: LD_INT 0
1323: PPUSH
1324: LD_STRING 
1326: PPUSH
1327: CALL 3849 0 3
1331: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
1332: LD_EXP 23
1336: PPUSH
1337: LD_INT 18
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// ComTurnUnit ( Natasza , Yakotich ) ;
1347: LD_EXP 23
1351: PPUSH
1352: LD_EXP 3
1356: PPUSH
1357: CALL_OW 119
// PlaceHumanInUnit ( Belkov2 , b1 ) ;
1361: LD_EXP 24
1365: PPUSH
1366: LD_INT 319
1368: PPUSH
1369: CALL_OW 52
// PlaceHumanInUnit ( Oblukov , b2 ) ;
1373: LD_EXP 25
1377: PPUSH
1378: LD_INT 318
1380: PPUSH
1381: CALL_OW 52
// PlaceHumanInUnit ( Kovalyuk , w1 ) ;
1385: LD_EXP 26
1389: PPUSH
1390: LD_INT 313
1392: PPUSH
1393: CALL_OW 52
// PlaceHumanInUnit ( Kozlov , l1 ) ;
1397: LD_EXP 27
1401: PPUSH
1402: LD_INT 317
1404: PPUSH
1405: CALL_OW 52
// Uc_Side := 6 ;
1409: LD_ADDR_OWVAR 20
1413: PUSH
1414: LD_INT 6
1416: ST_TO_ADDR
// Uc_Nation := 3 ;
1417: LD_ADDR_OWVAR 21
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
1425: LD_ADDR_EXP 34
1429: PUSH
1430: LD_STRING Morozov
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: LD_STRING 
1438: PPUSH
1439: CALL 3849 0 3
1443: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
1444: LD_ADDR_EXP 35
1448: PUSH
1449: LD_STRING Platonov
1451: PPUSH
1452: LD_INT 0
1454: PPUSH
1455: LD_STRING 
1457: PPUSH
1458: CALL 3849 0 3
1462: ST_TO_ADDR
// Popov := PrepareUnit ( Popov , false ,  ) ;
1463: LD_ADDR_EXP 36
1467: PUSH
1468: LD_STRING Popov
1470: PPUSH
1471: LD_INT 0
1473: PPUSH
1474: LD_STRING 
1476: PPUSH
1477: CALL 3849 0 3
1481: ST_TO_ADDR
// Bukov := PrepareUnit ( Bukov , false ,  ) ;
1482: LD_ADDR_EXP 38
1486: PUSH
1487: LD_STRING Bukov
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: LD_STRING 
1495: PPUSH
1496: CALL 3849 0 3
1500: ST_TO_ADDR
// Gaydar := PrepareUnit ( Gaydar , false ,  ) ;
1501: LD_ADDR_EXP 37
1505: PUSH
1506: LD_STRING Gaydar
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: LD_STRING 
1514: PPUSH
1515: CALL 3849 0 3
1519: ST_TO_ADDR
// PlaceUnitArea ( Morozov , CommanderSpawn , false ) ;
1520: LD_EXP 34
1524: PPUSH
1525: LD_INT 19
1527: PPUSH
1528: LD_INT 0
1530: PPUSH
1531: CALL_OW 49
// PlaceUnitArea ( Platonov , CommanderSpawn , false ) ;
1535: LD_EXP 35
1539: PPUSH
1540: LD_INT 19
1542: PPUSH
1543: LD_INT 0
1545: PPUSH
1546: CALL_OW 49
// PlaceUnitArea ( Popov , CommanderSpawn , false ) ;
1550: LD_EXP 36
1554: PPUSH
1555: LD_INT 19
1557: PPUSH
1558: LD_INT 0
1560: PPUSH
1561: CALL_OW 49
// ComTurnXY ( [ Morozov , Platonov , Popov ] , 73 , 100 ) ;
1565: LD_EXP 34
1569: PUSH
1570: LD_EXP 35
1574: PUSH
1575: LD_EXP 36
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: PPUSH
1585: LD_INT 73
1587: PPUSH
1588: LD_INT 100
1590: PPUSH
1591: CALL_OW 118
// PlaceUnitArea ( Gaydar , GaydarSpawn , false ) ;
1595: LD_EXP 37
1599: PPUSH
1600: LD_INT 15
1602: PPUSH
1603: LD_INT 0
1605: PPUSH
1606: CALL_OW 49
// ComTurnXY ( Gaydar , 214 , 160 ) ;
1610: LD_EXP 37
1614: PPUSH
1615: LD_INT 214
1617: PPUSH
1618: LD_INT 160
1620: PPUSH
1621: CALL_OW 118
// PlaceUnitArea ( Bukov , BukovSpawn , false ) ;
1625: LD_EXP 38
1629: PPUSH
1630: LD_INT 16
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// ComTurnXY ( Bukov , 312 , 218 ) ;
1640: LD_EXP 38
1644: PPUSH
1645: LD_INT 312
1647: PPUSH
1648: LD_INT 218
1650: PPUSH
1651: CALL_OW 118
// end ;
1655: LD_VAR 0 1
1659: RET
// export function InitBierezov ; begin
1660: LD_INT 0
1662: PPUSH
// Bierezov := PrepareUnit ( Bierezov , false ,  ) ;
1663: LD_ADDR_EXP 28
1667: PUSH
1668: LD_STRING Bierezov
1670: PPUSH
1671: LD_INT 0
1673: PPUSH
1674: LD_STRING 
1676: PPUSH
1677: CALL 3849 0 3
1681: ST_TO_ADDR
// Sharonov := PrepareUnit ( Sharonov , false ,  ) ;
1682: LD_ADDR_EXP 29
1686: PUSH
1687: LD_STRING Sharonov
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: LD_STRING 
1695: PPUSH
1696: CALL 3849 0 3
1700: ST_TO_ADDR
// Lesov := PrepareUnit ( Lesov , false ,  ) ;
1701: LD_ADDR_EXP 30
1705: PUSH
1706: LD_STRING Lesov
1708: PPUSH
1709: LD_INT 0
1711: PPUSH
1712: LD_STRING 
1714: PPUSH
1715: CALL 3849 0 3
1719: ST_TO_ADDR
// Aleinik := PrepareUnit ( Aleinik , false ,  ) ;
1720: LD_ADDR_EXP 31
1724: PUSH
1725: LD_STRING Aleinik
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: LD_STRING 
1733: PPUSH
1734: CALL 3849 0 3
1738: ST_TO_ADDR
// Korotajev := PrepareUnit ( Korotajev , false ,  ) ;
1739: LD_ADDR_EXP 32
1743: PUSH
1744: LD_STRING Korotajev
1746: PPUSH
1747: LD_INT 0
1749: PPUSH
1750: LD_STRING 
1752: PPUSH
1753: CALL 3849 0 3
1757: ST_TO_ADDR
// Bautin := PrepareUnit ( Bautin , false ,  ) ;
1758: LD_ADDR_EXP 33
1762: PUSH
1763: LD_STRING Bautin
1765: PPUSH
1766: LD_INT 0
1768: PPUSH
1769: LD_STRING 
1771: PPUSH
1772: CALL 3849 0 3
1776: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , EnterArea , false ) ;
1777: LD_EXP 28
1781: PPUSH
1782: LD_INT 3
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 49
// PlaceUnitArea ( Sharonov , EnterArea , false ) ;
1792: LD_EXP 29
1796: PPUSH
1797: LD_INT 3
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL_OW 49
// PlaceUnitArea ( Lesov , EnterArea , false ) ;
1807: LD_EXP 30
1811: PPUSH
1812: LD_INT 3
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 49
// PlaceUnitArea ( Aleinik , EnterArea , false ) ;
1822: LD_EXP 31
1826: PPUSH
1827: LD_INT 3
1829: PPUSH
1830: LD_INT 0
1832: PPUSH
1833: CALL_OW 49
// PlaceUnitArea ( Korotajev , EnterArea , false ) ;
1837: LD_EXP 32
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: CALL_OW 49
// PlaceUnitArea ( Bautin , EnterArea , false ) ;
1852: LD_EXP 33
1856: PPUSH
1857: LD_INT 3
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 49
// end ;
1867: LD_VAR 0 1
1871: RET
// export function Miotacz ; begin
1872: LD_INT 0
1874: PPUSH
// if LoadVariable ( 03_FlameSaved , 0 ) then
1875: LD_STRING 03_FlameSaved
1877: PPUSH
1878: LD_INT 0
1880: PPUSH
1881: CALL_OW 30
1885: IFFALSE 1968
// begin Uc_Side = 3 ;
1887: LD_ADDR_OWVAR 20
1891: PUSH
1892: LD_INT 3
1894: ST_TO_ADDR
// Uc_Nation = 2 ;
1895: LD_ADDR_OWVAR 21
1899: PUSH
1900: LD_INT 2
1902: ST_TO_ADDR
// Uc_Direction = 2 ;
1903: LD_ADDR_OWVAR 24
1907: PUSH
1908: LD_INT 2
1910: ST_TO_ADDR
// Vc_Chassis = 14 ;
1911: LD_ADDR_OWVAR 37
1915: PUSH
1916: LD_INT 14
1918: ST_TO_ADDR
// Vc_Control = 1 ;
1919: LD_ADDR_OWVAR 38
1923: PUSH
1924: LD_INT 1
1926: ST_TO_ADDR
// Vc_Engine = 1 ;
1927: LD_ADDR_OWVAR 39
1931: PUSH
1932: LD_INT 1
1934: ST_TO_ADDR
// Vc_Weapon = 26 ;
1935: LD_ADDR_OWVAR 40
1939: PUSH
1940: LD_INT 26
1942: ST_TO_ADDR
// Tank := CreateVehicle ;
1943: LD_ADDR_EXP 20
1947: PUSH
1948: CALL_OW 45
1952: ST_TO_ADDR
// PlaceUnitArea ( Tank , EnterArea , false ) ;
1953: LD_EXP 20
1957: PPUSH
1958: LD_INT 3
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 49
// end ; end ; end_of_file
1968: LD_VAR 0 1
1972: RET
// export function Action ; begin
1973: LD_INT 0
1975: PPUSH
// InGameOn ;
1976: CALL_OW 8
// if LoadVariable ( 03_FlameSaved , 0 ) then
1980: LD_STRING 03_FlameSaved
1982: PPUSH
1983: LD_INT 0
1985: PPUSH
1986: CALL_OW 30
1990: IFFALSE 2008
// PlaceHumanInUnit ( Michail , Tank ) else
1992: LD_EXP 7
1996: PPUSH
1997: LD_EXP 20
2001: PPUSH
2002: CALL_OW 52
2006: GO 2023
// PlaceUnitArea ( Michail , EnterArea , false ) ;
2008: LD_EXP 7
2012: PPUSH
2013: LD_INT 3
2015: PPUSH
2016: LD_INT 0
2018: PPUSH
2019: CALL_OW 49
// RevealFogArea ( 3 , RevealArea ) ;
2023: LD_INT 3
2025: PPUSH
2026: LD_INT 20
2028: PPUSH
2029: CALL_OW 332
// RevealFogArea ( 3 , ArRevealArea ) ;
2033: LD_INT 3
2035: PPUSH
2036: LD_INT 21
2038: PPUSH
2039: CALL_OW 332
// RevealFogArea ( 3 , OmarBase ) ;
2043: LD_INT 3
2045: PPUSH
2046: LD_INT 7
2048: PPUSH
2049: CALL_OW 332
// Say ( Yakotich , 4Yak-01 ) ;
2053: LD_EXP 3
2057: PPUSH
2058: LD_STRING 4Yak-01
2060: PPUSH
2061: CALL_OW 88
// ComMoveXY ( YakotichCrew , 41 , 17 ) ;
2065: LD_EXP 1
2069: PPUSH
2070: LD_INT 41
2072: PPUSH
2073: LD_INT 17
2075: PPUSH
2076: CALL_OW 111
// ComMoveXY ( Yakotich , 41 , 17 ) ;
2080: LD_EXP 3
2084: PPUSH
2085: LD_INT 41
2087: PPUSH
2088: LD_INT 17
2090: PPUSH
2091: CALL_OW 111
// ComMoveXY ( Mietek , 41 , 17 ) ;
2095: LD_EXP 4
2099: PPUSH
2100: LD_INT 41
2102: PPUSH
2103: LD_INT 17
2105: PPUSH
2106: CALL_OW 111
// AddComMoveXY ( YakotichCrew , 130 , 105 ) ;
2110: LD_EXP 1
2114: PPUSH
2115: LD_INT 130
2117: PPUSH
2118: LD_INT 105
2120: PPUSH
2121: CALL_OW 171
// AddComMoveXY ( Yakotich , 130 , 105 ) ;
2125: LD_EXP 3
2129: PPUSH
2130: LD_INT 130
2132: PPUSH
2133: LD_INT 105
2135: PPUSH
2136: CALL_OW 171
// AddComMoveXY ( Mietek , 130 , 105 ) ;
2140: LD_EXP 4
2144: PPUSH
2145: LD_INT 130
2147: PPUSH
2148: LD_INT 105
2150: PPUSH
2151: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 77 , 93 ) ;
2155: LD_EXP 1
2159: PPUSH
2160: LD_INT 77
2162: PPUSH
2163: LD_INT 93
2165: PPUSH
2166: CALL_OW 171
// AddComMoveToArea ( [ Stanislav , Vasilij ] , HGCheckArea ) ;
2170: LD_EXP 16
2174: PUSH
2175: LD_EXP 6
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: PPUSH
2184: LD_INT 22
2186: PPUSH
2187: CALL_OW 173
// AddComTurnXY ( [ Vasilij , Stanislav ] , 75 , 86 ) ;
2191: LD_EXP 6
2195: PUSH
2196: LD_EXP 16
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PPUSH
2205: LD_INT 75
2207: PPUSH
2208: LD_INT 86
2210: PPUSH
2211: CALL_OW 178
// AddComMoveToArea ( Yakotich , YakTalk1 ) ;
2215: LD_EXP 3
2219: PPUSH
2220: LD_INT 23
2222: PPUSH
2223: CALL_OW 173
// AddComMoveXY ( Mietek , 73 , 98 ) ;
2227: LD_EXP 4
2231: PPUSH
2232: LD_INT 73
2234: PPUSH
2235: LD_INT 98
2237: PPUSH
2238: CALL_OW 171
// AddComTurnXY ( [ Yakotich , Mietek ] , 70 , 99 ) ;
2242: LD_EXP 3
2246: PUSH
2247: LD_EXP 4
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PPUSH
2256: LD_INT 70
2258: PPUSH
2259: LD_INT 99
2261: PPUSH
2262: CALL_OW 178
// end ;
2266: LD_VAR 0 1
2270: RET
// every 0 0$1 trigger IsInArea ( Yakotich , YakTalk1 ) do
2271: LD_EXP 3
2275: PPUSH
2276: LD_INT 23
2278: PPUSH
2279: CALL_OW 308
2283: IFFALSE 2979
2285: GO 2287
2287: DISABLE
// begin Say ( Yakotich , 4Yak-02 ) ;
2288: LD_EXP 3
2292: PPUSH
2293: LD_STRING 4Yak-02
2295: PPUSH
2296: CALL_OW 88
// Say ( Morozov , 4Moro-01 ) ;
2300: LD_EXP 34
2304: PPUSH
2305: LD_STRING 4Moro-01
2307: PPUSH
2308: CALL_OW 88
// Say ( Yakotich , 4Yak-03 ) ;
2312: LD_EXP 3
2316: PPUSH
2317: LD_STRING 4Yak-03
2319: PPUSH
2320: CALL_OW 88
// Say ( Morozov , 4Moro-02 ) ;
2324: LD_EXP 34
2328: PPUSH
2329: LD_STRING 4Moro-02
2331: PPUSH
2332: CALL_OW 88
// SetSide ( [ Vasilij , Stanislav ] , 6 ) ;
2336: LD_EXP 6
2340: PUSH
2341: LD_EXP 16
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PPUSH
2350: LD_INT 6
2352: PPUSH
2353: CALL_OW 235
// ComEnterUnit ( [ Vasilij , Stanislav ] , L1L1 ) ;
2357: LD_EXP 6
2361: PUSH
2362: LD_EXP 16
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: PPUSH
2371: LD_INT 43
2373: PPUSH
2374: CALL_OW 120
// Say ( Morozov , 4Moro-03 ) ;
2378: LD_EXP 34
2382: PPUSH
2383: LD_STRING 4Moro-03
2385: PPUSH
2386: CALL_OW 88
// ComMoveXY ( Grigori , 74 , 102 ) ;
2390: LD_EXP 18
2394: PPUSH
2395: LD_INT 74
2397: PPUSH
2398: LD_INT 102
2400: PPUSH
2401: CALL_OW 111
// Say ( Grigori , 4Grig-01 ) ;
2405: LD_EXP 18
2409: PPUSH
2410: LD_STRING 4Grig-01
2412: PPUSH
2413: CALL_OW 88
// Say ( Morozov , 4Moro-04 ) ;
2417: LD_EXP 34
2421: PPUSH
2422: LD_STRING 4Moro-04
2424: PPUSH
2425: CALL_OW 88
// Say ( Grigori , 4Grig-02 ) ;
2429: LD_EXP 18
2433: PPUSH
2434: LD_STRING 4Grig-02
2436: PPUSH
2437: CALL_OW 88
// Say ( Popov , 4Popov-01 ) ;
2441: LD_EXP 36
2445: PPUSH
2446: LD_STRING 4Popov-01
2448: PPUSH
2449: CALL_OW 88
// SetSide ( Grigori , 6 ) ;
2453: LD_EXP 18
2457: PPUSH
2458: LD_INT 6
2460: PPUSH
2461: CALL_OW 235
// ComEnterUnit ( Grigori , L1L1 ) ;
2465: LD_EXP 18
2469: PPUSH
2470: LD_INT 43
2472: PPUSH
2473: CALL_OW 120
// Say ( Yakotich , 4Yak-04 ) ;
2477: LD_EXP 3
2481: PPUSH
2482: LD_STRING 4Yak-04
2484: PPUSH
2485: CALL_OW 88
// Say ( Popov , 4Popov-02 ) ;
2489: LD_EXP 36
2493: PPUSH
2494: LD_STRING 4Popov-02
2496: PPUSH
2497: CALL_OW 88
// Say ( Yakotich , 4Yak-05 ) ;
2501: LD_EXP 3
2505: PPUSH
2506: LD_STRING 4Yak-05
2508: PPUSH
2509: CALL_OW 88
// Say ( Morozov , 4Moro-05 ) ;
2513: LD_EXP 34
2517: PPUSH
2518: LD_STRING 4Moro-05
2520: PPUSH
2521: CALL_OW 88
// Say ( Morozov , 4Moro-06 ) ;
2525: LD_EXP 34
2529: PPUSH
2530: LD_STRING 4Moro-06
2532: PPUSH
2533: CALL_OW 88
// Say ( Popov , 4Popov-03 ) ;
2537: LD_EXP 36
2541: PPUSH
2542: LD_STRING 4Popov-03
2544: PPUSH
2545: CALL_OW 88
// Say ( Popov , 4Popov-04 ) ;
2549: LD_EXP 36
2553: PPUSH
2554: LD_STRING 4Popov-04
2556: PPUSH
2557: CALL_OW 88
// ComExitBuilding ( [ Vasilij , Stanislav ] ) ;
2561: LD_EXP 6
2565: PUSH
2566: LD_EXP 16
2570: PUSH
2571: EMPTY
2572: LIST
2573: LIST
2574: PPUSH
2575: CALL_OW 122
// SetSide ( [ Vasilij , Stanislav ] , 3 ) ;
2579: LD_EXP 6
2583: PUSH
2584: LD_EXP 16
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: PPUSH
2593: LD_INT 3
2595: PPUSH
2596: CALL_OW 235
// ComMoveXY ( [ Vasilij , Stanislav ] , 73 , 89 ) ;
2600: LD_EXP 6
2604: PUSH
2605: LD_EXP 16
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PPUSH
2614: LD_INT 73
2616: PPUSH
2617: LD_INT 89
2619: PPUSH
2620: CALL_OW 111
// Say ( Yakotich , 4Yak-06 ) ;
2624: LD_EXP 3
2628: PPUSH
2629: LD_STRING 4Yak-06
2631: PPUSH
2632: CALL_OW 88
// Say ( Platonov , 4Plat-01 ) ;
2636: LD_EXP 35
2640: PPUSH
2641: LD_STRING 4Plat-01
2643: PPUSH
2644: CALL_OW 88
// Say ( Platonov , 4Plat-02 ) ;
2648: LD_EXP 35
2652: PPUSH
2653: LD_STRING 4Plat-02
2655: PPUSH
2656: CALL_OW 88
// Say ( Platonov , 4Plat-03 ) ;
2660: LD_EXP 35
2664: PPUSH
2665: LD_STRING 4Plat-03
2667: PPUSH
2668: CALL_OW 88
// Say ( Platonov , 4Plat-04 ) ;
2672: LD_EXP 35
2676: PPUSH
2677: LD_STRING 4Plat-04
2679: PPUSH
2680: CALL_OW 88
// Say ( Yakotich , 4Yak-07 ) ;
2684: LD_EXP 3
2688: PPUSH
2689: LD_STRING 4Yak-07
2691: PPUSH
2692: CALL_OW 88
// ComExitBuilding ( Grigori ) ;
2696: LD_EXP 18
2700: PPUSH
2701: CALL_OW 122
// SetSide ( Grigori , 3 ) ;
2705: LD_EXP 18
2709: PPUSH
2710: LD_INT 3
2712: PPUSH
2713: CALL_OW 235
// ComTurnUnit ( Grigori , Yakotich ) ;
2717: LD_EXP 18
2721: PPUSH
2722: LD_EXP 3
2726: PPUSH
2727: CALL_OW 119
// Say ( Grigori , 4Grig-03 ) ;
2731: LD_EXP 18
2735: PPUSH
2736: LD_STRING 4Grig-03
2738: PPUSH
2739: CALL_OW 88
// ComMoveXY ( YakotichCrew , 117 , 162 ) ;
2743: LD_EXP 1
2747: PPUSH
2748: LD_INT 117
2750: PPUSH
2751: LD_INT 162
2753: PPUSH
2754: CALL_OW 111
// ComMoveXY ( Yakotich , 117 , 162 ) ;
2758: LD_EXP 3
2762: PPUSH
2763: LD_INT 117
2765: PPUSH
2766: LD_INT 162
2768: PPUSH
2769: CALL_OW 111
// ComMoveXY ( Mietek , 117 , 162 ) ;
2773: LD_EXP 4
2777: PPUSH
2778: LD_INT 117
2780: PPUSH
2781: LD_INT 162
2783: PPUSH
2784: CALL_OW 111
// Say ( Mietek , 4Mietek-01 ) ;
2788: LD_EXP 4
2792: PPUSH
2793: LD_STRING 4Mietek-01
2795: PPUSH
2796: CALL_OW 88
// Say ( Yakotich , 4Yakotich-08 ) ;
2800: LD_EXP 3
2804: PPUSH
2805: LD_STRING 4Yakotich-08
2807: PPUSH
2808: CALL_OW 88
// Say ( Mietek , 4Mietek-02 ) ;
2812: LD_EXP 4
2816: PPUSH
2817: LD_STRING 4Mietek-02
2819: PPUSH
2820: CALL_OW 88
// AddComMoveXY ( YakotichCrew , 138 , 168 ) ;
2824: LD_EXP 1
2828: PPUSH
2829: LD_INT 138
2831: PPUSH
2832: LD_INT 168
2834: PPUSH
2835: CALL_OW 171
// AddComMoveXY ( Yakotich , 138 , 168 ) ;
2839: LD_EXP 3
2843: PPUSH
2844: LD_INT 138
2846: PPUSH
2847: LD_INT 168
2849: PPUSH
2850: CALL_OW 171
// AddComMoveXY ( Mietek , 138 , 168 ) ;
2854: LD_EXP 4
2858: PPUSH
2859: LD_INT 138
2861: PPUSH
2862: LD_INT 168
2864: PPUSH
2865: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 142 , 199 ) ;
2869: LD_EXP 1
2873: PPUSH
2874: LD_INT 142
2876: PPUSH
2877: LD_INT 199
2879: PPUSH
2880: CALL_OW 171
// AddComMoveXY ( Yakotich , 142 , 199 ) ;
2884: LD_EXP 3
2888: PPUSH
2889: LD_INT 142
2891: PPUSH
2892: LD_INT 199
2894: PPUSH
2895: CALL_OW 171
// AddComMoveXY ( Mietek , 142 , 199 ) ;
2899: LD_EXP 4
2903: PPUSH
2904: LD_INT 142
2906: PPUSH
2907: LD_INT 199
2909: PPUSH
2910: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 157 , 232 ) ;
2914: LD_EXP 1
2918: PPUSH
2919: LD_INT 157
2921: PPUSH
2922: LD_INT 232
2924: PPUSH
2925: CALL_OW 171
// AddComMoveToArea ( Yakotich , YakTalk2 ) ;
2929: LD_EXP 3
2933: PPUSH
2934: LD_INT 24
2936: PPUSH
2937: CALL_OW 173
// AddComMoveXY ( Mietek , 167 , 240 ) ;
2941: LD_EXP 4
2945: PPUSH
2946: LD_INT 167
2948: PPUSH
2949: LD_INT 240
2951: PPUSH
2952: CALL_OW 171
// AddComTurnUnit ( [ Yakotich , Mietek ] , Natasza ) ;
2956: LD_EXP 3
2960: PUSH
2961: LD_EXP 4
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PPUSH
2970: LD_EXP 23
2974: PPUSH
2975: CALL_OW 179
// end ;
2979: END
// every 0 0$1 trigger IsInArea ( Yakotich , YakTalk2 ) do
2980: LD_EXP 3
2984: PPUSH
2985: LD_INT 24
2987: PPUSH
2988: CALL_OW 308
2992: IFFALSE 3189
2994: GO 2996
2996: DISABLE
// begin Say ( Natasza , 4Nati-01 ) ;
2997: LD_EXP 23
3001: PPUSH
3002: LD_STRING 4Nati-01
3004: PPUSH
3005: CALL_OW 88
// Say ( Yakotich , 4Yak-09 ) ;
3009: LD_EXP 3
3013: PPUSH
3014: LD_STRING 4Yak-09
3016: PPUSH
3017: CALL_OW 88
// Say ( Natasza , 4Nati-02 ) ;
3021: LD_EXP 23
3025: PPUSH
3026: LD_STRING 4Nati-02
3028: PPUSH
3029: CALL_OW 88
// Say ( Natasza , 4Nati-03 ) ;
3033: LD_EXP 23
3037: PPUSH
3038: LD_STRING 4Nati-03
3040: PPUSH
3041: CALL_OW 88
// Say ( Natasza , 4Nati-04 ) ;
3045: LD_EXP 23
3049: PPUSH
3050: LD_STRING 4Nati-04
3052: PPUSH
3053: CALL_OW 88
// Say ( Yakotich , 4Yak-10 ) ;
3057: LD_EXP 3
3061: PPUSH
3062: LD_STRING 4Yak-10
3064: PPUSH
3065: CALL_OW 88
// Say ( Natasza , 4Nati-05 ) ;
3069: LD_EXP 23
3073: PPUSH
3074: LD_STRING 4Nati-05
3076: PPUSH
3077: CALL_OW 88
// ComMoveXY ( Stanislav , 167 , 238 ) ;
3081: LD_EXP 16
3085: PPUSH
3086: LD_INT 167
3088: PPUSH
3089: LD_INT 238
3091: PPUSH
3092: CALL_OW 111
// AddComTurnUnit ( Stanislav , Natasza ) ;
3096: LD_EXP 16
3100: PPUSH
3101: LD_EXP 23
3105: PPUSH
3106: CALL_OW 179
// Say ( Stanislav , 4Stan-01 ) ;
3110: LD_EXP 16
3114: PPUSH
3115: LD_STRING 4Stan-01
3117: PPUSH
3118: CALL_OW 88
// Say ( Yakotich , 4Yak-11 ) ;
3122: LD_EXP 3
3126: PPUSH
3127: LD_STRING 4Yak-11
3129: PPUSH
3130: CALL_OW 88
// Say ( Natasza , 4Nati-06 ) ;
3134: LD_EXP 23
3138: PPUSH
3139: LD_STRING 4Nati-06
3141: PPUSH
3142: CALL_OW 88
// Say ( Mietek , 4Mietek-03 ) ;
3146: LD_EXP 4
3150: PPUSH
3151: LD_STRING 4Mietek-03
3153: PPUSH
3154: CALL_OW 88
// Say ( Yakotich , 4Yak-12 ) ;
3158: LD_EXP 3
3162: PPUSH
3163: LD_STRING 4Yak-12
3165: PPUSH
3166: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
3170: LD_STRING o1
3172: PPUSH
3173: CALL_OW 337
// InGameOff ;
3177: CALL_OW 9
// start_ended = true ;
3181: LD_ADDR_EXP 43
3185: PUSH
3186: LD_INT 1
3188: ST_TO_ADDR
// end ; end_of_file
3189: END
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3190: LD_INT 0
3192: PPUSH
3193: PPUSH
3194: PPUSH
// uc_side := GetSide ( b ) ;
3195: LD_ADDR_OWVAR 20
3199: PUSH
3200: LD_VAR 0 2
3204: PPUSH
3205: CALL_OW 255
3209: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3210: LD_ADDR_OWVAR 21
3214: PUSH
3215: LD_VAR 0 2
3219: PPUSH
3220: CALL_OW 248
3224: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3225: LD_ADDR_VAR 0 5
3229: PUSH
3230: LD_VAR 0 2
3234: PPUSH
3235: CALL_OW 254
3239: PUSH
3240: LD_INT 3
3242: MINUS
3243: ST_TO_ADDR
// if dir < 0 then
3244: LD_VAR 0 5
3248: PUSH
3249: LD_INT 0
3251: LESS
3252: IFFALSE 3268
// dir := 6 + dir ;
3254: LD_ADDR_VAR 0 5
3258: PUSH
3259: LD_INT 6
3261: PUSH
3262: LD_VAR 0 5
3266: PLUS
3267: ST_TO_ADDR
// un := CreateHuman ;
3268: LD_ADDR_VAR 0 4
3272: PUSH
3273: CALL_OW 44
3277: ST_TO_ADDR
// SetDir ( un , dir ) ;
3278: LD_VAR 0 4
3282: PPUSH
3283: LD_VAR 0 5
3287: PPUSH
3288: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3292: LD_VAR 0 4
3296: PPUSH
3297: LD_VAR 0 2
3301: PPUSH
3302: CALL_OW 52
// end ;
3306: LD_VAR 0 3
3310: RET
// every 1 trigger start_ended = false do
3311: LD_EXP 43
3315: PUSH
3316: LD_INT 0
3318: EQUAL
3319: IFFALSE 3334
3321: GO 3323
3323: DISABLE
// begin CenterOnUnits ( Yakotich ) ;
3324: LD_EXP 3
3328: PPUSH
3329: CALL_OW 85
// enable ;
3333: ENABLE
// end ;
3334: END
// every 1 trigger FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
3335: LD_INT 10
3337: PPUSH
3338: LD_INT 22
3340: PUSH
3341: LD_INT 3
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 2
3350: PUSH
3351: LD_INT 21
3353: PUSH
3354: LD_INT 1
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 21
3363: PUSH
3364: LD_INT 2
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: LIST
3375: PUSH
3376: EMPTY
3377: LIST
3378: LIST
3379: PPUSH
3380: CALL_OW 70
3384: PUSH
3385: LD_INT 0
3387: GREATER
3388: IFFALSE 3474
3390: GO 3392
3392: DISABLE
3393: LD_INT 0
3395: PPUSH
// begin enable ;
3396: ENABLE
// for unit in FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
3397: LD_ADDR_VAR 0 1
3401: PUSH
3402: LD_INT 10
3404: PPUSH
3405: LD_INT 22
3407: PUSH
3408: LD_INT 3
3410: PUSH
3411: EMPTY
3412: LIST
3413: LIST
3414: PUSH
3415: LD_INT 2
3417: PUSH
3418: LD_INT 21
3420: PUSH
3421: LD_INT 1
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PUSH
3428: LD_INT 21
3430: PUSH
3431: LD_INT 2
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: LIST
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PPUSH
3447: CALL_OW 70
3451: PUSH
3452: FOR_IN
3453: IFFALSE 3472
// begin ComMoveXY ( unit , 163 , 235 ) ;
3455: LD_VAR 0 1
3459: PPUSH
3460: LD_INT 163
3462: PPUSH
3463: LD_INT 235
3465: PPUSH
3466: CALL_OW 111
// end ;
3470: GO 3452
3472: POP
3473: POP
// end ;
3474: PPOPN 1
3476: END
// every 0 0$1 trigger IsDead ( Yakotich ) do
3477: LD_EXP 3
3481: PPUSH
3482: CALL_OW 301
3486: IFFALSE 3498
3488: GO 3490
3490: DISABLE
// begin YouLost ( YakotichDead ) ;
3491: LD_STRING YakotichDead
3493: PPUSH
3494: CALL_OW 104
// end ;
3498: END
// every 0 0$1 trigger IsDead ( Mietek ) do
3499: LD_EXP 4
3503: PPUSH
3504: CALL_OW 301
3508: IFFALSE 3520
3510: GO 3512
3512: DISABLE
// begin YouLost ( MietekDead ) ;
3513: LD_STRING MietekDead
3515: PPUSH
3516: CALL_OW 104
// end ;
3520: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
3521: LD_VAR 0 1
3525: PUSH
3526: LD_INT 22
3528: PUSH
3529: LD_INT 3
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: PUSH
3536: LD_INT 3
3538: PUSH
3539: LD_INT 23
3541: PUSH
3542: LD_INT 0
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: PUSH
3553: LD_INT 21
3555: PUSH
3556: LD_INT 1
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: EMPTY
3564: LIST
3565: LIST
3566: LIST
3567: PPUSH
3568: CALL_OW 69
3572: IN
3573: IFFALSE 3582
// YouLost ( PeopleDead ) ;
3575: LD_STRING PeopleDead
3577: PPUSH
3578: CALL_OW 104
// end ;
3582: PPOPN 1
3584: END
// every 0 0$1 trigger IsDead ( YakotichBase ) or IsDead ( NorthLenin ) or IsDead ( SouthLenin ) do
3585: LD_INT 312
3587: PPUSH
3588: CALL_OW 301
3592: PUSH
3593: LD_INT 253
3595: PPUSH
3596: CALL_OW 301
3600: OR
3601: PUSH
3602: LD_INT 218
3604: PPUSH
3605: CALL_OW 301
3609: OR
3610: IFFALSE 3622
3612: GO 3614
3614: DISABLE
// begin YouLost ( DepotDead ) ;
3615: LD_STRING DepotDead
3617: PPUSH
3618: CALL_OW 104
// end ;
3622: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 3 and s2 = 6 ) or ( s2 = 6 and s1 = 3 ) then
3623: LD_VAR 0 1
3627: PUSH
3628: LD_INT 3
3630: EQUAL
3631: PUSH
3632: LD_VAR 0 2
3636: PUSH
3637: LD_INT 6
3639: EQUAL
3640: AND
3641: PUSH
3642: LD_VAR 0 2
3646: PUSH
3647: LD_INT 6
3649: EQUAL
3650: PUSH
3651: LD_VAR 0 1
3655: PUSH
3656: LD_INT 3
3658: EQUAL
3659: AND
3660: OR
3661: IFFALSE 3670
// begin YouLost ( AllyAttacked ) ;
3663: LD_STRING AllyAttacked
3665: PPUSH
3666: CALL_OW 104
// end ; end ; end_of_file
3670: PPOPN 2
3672: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
3673: LD_INT 0
3675: PPUSH
// ar_miner := 81 ;
3676: LD_ADDR_EXP 52
3680: PUSH
3681: LD_INT 81
3683: ST_TO_ADDR
// ar_crane := 88 ;
3684: LD_ADDR_EXP 51
3688: PUSH
3689: LD_INT 88
3691: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
3692: LD_ADDR_EXP 46
3696: PUSH
3697: LD_INT 89
3699: ST_TO_ADDR
// us_hack := 99 ;
3700: LD_ADDR_EXP 47
3704: PUSH
3705: LD_INT 99
3707: ST_TO_ADDR
// us_artillery := 97 ;
3708: LD_ADDR_EXP 48
3712: PUSH
3713: LD_INT 97
3715: ST_TO_ADDR
// ar_bio_bomb := 91 ;
3716: LD_ADDR_EXP 49
3720: PUSH
3721: LD_INT 91
3723: ST_TO_ADDR
// ar_mortar := 92 ;
3724: LD_ADDR_EXP 50
3728: PUSH
3729: LD_INT 92
3731: ST_TO_ADDR
// ru_flamethrower := 93 ;
3732: LD_ADDR_EXP 53
3736: PUSH
3737: LD_INT 93
3739: ST_TO_ADDR
// ru_radar := 98 ;
3740: LD_ADDR_EXP 45
3744: PUSH
3745: LD_INT 98
3747: ST_TO_ADDR
// tech_Artillery := 80 ;
3748: LD_ADDR_EXP 54
3752: PUSH
3753: LD_INT 80
3755: ST_TO_ADDR
// tech_RadMat := 81 ;
3756: LD_ADDR_EXP 55
3760: PUSH
3761: LD_INT 81
3763: ST_TO_ADDR
// tech_BasicTools := 82 ;
3764: LD_ADDR_EXP 56
3768: PUSH
3769: LD_INT 82
3771: ST_TO_ADDR
// tech_Cargo := 83 ;
3772: LD_ADDR_EXP 57
3776: PUSH
3777: LD_INT 83
3779: ST_TO_ADDR
// tech_Track := 84 ;
3780: LD_ADDR_EXP 58
3784: PUSH
3785: LD_INT 84
3787: ST_TO_ADDR
// tech_Crane := 85 ;
3788: LD_ADDR_EXP 59
3792: PUSH
3793: LD_INT 85
3795: ST_TO_ADDR
// tech_Bulldozer := 86 ;
3796: LD_ADDR_EXP 60
3800: PUSH
3801: LD_INT 86
3803: ST_TO_ADDR
// tech_Hovercraft := 87 ;
3804: LD_ADDR_EXP 61
3808: PUSH
3809: LD_INT 87
3811: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
3812: LD_ADDR_EXP 62
3816: PUSH
3817: LD_INT 88
3819: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
3820: LD_ADDR_EXP 63
3824: PUSH
3825: LD_INT 90
3827: ST_TO_ADDR
// class_mastodont := 31 ;
3828: LD_ADDR_EXP 64
3832: PUSH
3833: LD_INT 31
3835: ST_TO_ADDR
// class_horse := 21 ;
3836: LD_ADDR_EXP 65
3840: PUSH
3841: LD_INT 21
3843: ST_TO_ADDR
// end ; end_of_file
3844: LD_VAR 0 1
3848: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3849: LD_INT 0
3851: PPUSH
3852: PPUSH
// if exist_mode then
3853: LD_VAR 0 2
3857: IFFALSE 3882
// unit := CreateCharacter ( prefix & ident ) else
3859: LD_ADDR_VAR 0 5
3863: PUSH
3864: LD_VAR 0 3
3868: PUSH
3869: LD_VAR 0 1
3873: STR
3874: PPUSH
3875: CALL_OW 34
3879: ST_TO_ADDR
3880: GO 3897
// unit := NewCharacter ( ident ) ;
3882: LD_ADDR_VAR 0 5
3886: PUSH
3887: LD_VAR 0 1
3891: PPUSH
3892: CALL_OW 25
3896: ST_TO_ADDR
// result := unit ;
3897: LD_ADDR_VAR 0 4
3901: PUSH
3902: LD_VAR 0 5
3906: ST_TO_ADDR
// end ;
3907: LD_VAR 0 4
3911: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3912: LD_INT 0
3914: PPUSH
3915: PPUSH
// if not side or not nation then
3916: LD_VAR 0 1
3920: NOT
3921: PUSH
3922: LD_VAR 0 2
3926: NOT
3927: OR
3928: IFFALSE 3932
// exit ;
3930: GO 4700
// case nation of nation_american :
3932: LD_VAR 0 2
3936: PUSH
3937: LD_INT 1
3939: DOUBLE
3940: EQUAL
3941: IFTRUE 3945
3943: GO 4159
3945: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3946: LD_ADDR_VAR 0 4
3950: PUSH
3951: LD_INT 35
3953: PUSH
3954: LD_INT 45
3956: PUSH
3957: LD_INT 46
3959: PUSH
3960: LD_INT 47
3962: PUSH
3963: LD_INT 82
3965: PUSH
3966: LD_INT 83
3968: PUSH
3969: LD_INT 84
3971: PUSH
3972: LD_INT 85
3974: PUSH
3975: LD_INT 86
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: LD_INT 2
3983: PUSH
3984: LD_INT 6
3986: PUSH
3987: LD_INT 15
3989: PUSH
3990: LD_INT 16
3992: PUSH
3993: LD_INT 7
3995: PUSH
3996: LD_INT 12
3998: PUSH
3999: LD_INT 13
4001: PUSH
4002: LD_INT 10
4004: PUSH
4005: LD_INT 14
4007: PUSH
4008: LD_INT 20
4010: PUSH
4011: LD_INT 21
4013: PUSH
4014: LD_INT 22
4016: PUSH
4017: LD_INT 25
4019: PUSH
4020: LD_INT 32
4022: PUSH
4023: LD_INT 27
4025: PUSH
4026: LD_INT 36
4028: PUSH
4029: LD_INT 69
4031: PUSH
4032: LD_INT 39
4034: PUSH
4035: LD_INT 34
4037: PUSH
4038: LD_INT 40
4040: PUSH
4041: LD_INT 48
4043: PUSH
4044: LD_INT 49
4046: PUSH
4047: LD_INT 50
4049: PUSH
4050: LD_INT 51
4052: PUSH
4053: LD_INT 52
4055: PUSH
4056: LD_INT 53
4058: PUSH
4059: LD_INT 54
4061: PUSH
4062: LD_INT 55
4064: PUSH
4065: LD_INT 56
4067: PUSH
4068: LD_INT 57
4070: PUSH
4071: LD_INT 58
4073: PUSH
4074: LD_INT 59
4076: PUSH
4077: LD_INT 60
4079: PUSH
4080: LD_INT 61
4082: PUSH
4083: LD_INT 62
4085: PUSH
4086: LD_INT 80
4088: PUSH
4089: LD_INT 82
4091: PUSH
4092: LD_INT 83
4094: PUSH
4095: LD_INT 84
4097: PUSH
4098: LD_INT 85
4100: PUSH
4101: LD_INT 86
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: LIST
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: LIST
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: ST_TO_ADDR
4157: GO 4624
4159: LD_INT 2
4161: DOUBLE
4162: EQUAL
4163: IFTRUE 4167
4165: GO 4393
4167: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
4168: LD_ADDR_VAR 0 4
4172: PUSH
4173: LD_INT 35
4175: PUSH
4176: LD_INT 45
4178: PUSH
4179: LD_INT 46
4181: PUSH
4182: LD_INT 47
4184: PUSH
4185: LD_INT 82
4187: PUSH
4188: LD_INT 83
4190: PUSH
4191: LD_INT 84
4193: PUSH
4194: LD_INT 85
4196: PUSH
4197: LD_INT 87
4199: PUSH
4200: LD_INT 70
4202: PUSH
4203: LD_INT 1
4205: PUSH
4206: LD_INT 11
4208: PUSH
4209: LD_INT 3
4211: PUSH
4212: LD_INT 4
4214: PUSH
4215: LD_INT 5
4217: PUSH
4218: LD_INT 6
4220: PUSH
4221: LD_INT 15
4223: PUSH
4224: LD_INT 18
4226: PUSH
4227: LD_INT 7
4229: PUSH
4230: LD_INT 17
4232: PUSH
4233: LD_INT 8
4235: PUSH
4236: LD_INT 20
4238: PUSH
4239: LD_INT 21
4241: PUSH
4242: LD_INT 22
4244: PUSH
4245: LD_INT 72
4247: PUSH
4248: LD_INT 26
4250: PUSH
4251: LD_INT 69
4253: PUSH
4254: LD_INT 39
4256: PUSH
4257: LD_INT 40
4259: PUSH
4260: LD_INT 41
4262: PUSH
4263: LD_INT 42
4265: PUSH
4266: LD_INT 43
4268: PUSH
4269: LD_INT 48
4271: PUSH
4272: LD_INT 49
4274: PUSH
4275: LD_INT 50
4277: PUSH
4278: LD_INT 51
4280: PUSH
4281: LD_INT 52
4283: PUSH
4284: LD_INT 53
4286: PUSH
4287: LD_INT 54
4289: PUSH
4290: LD_INT 55
4292: PUSH
4293: LD_INT 56
4295: PUSH
4296: LD_INT 60
4298: PUSH
4299: LD_INT 61
4301: PUSH
4302: LD_INT 62
4304: PUSH
4305: LD_INT 66
4307: PUSH
4308: LD_INT 67
4310: PUSH
4311: LD_INT 68
4313: PUSH
4314: LD_INT 81
4316: PUSH
4317: LD_INT 82
4319: PUSH
4320: LD_INT 83
4322: PUSH
4323: LD_INT 84
4325: PUSH
4326: LD_INT 85
4328: PUSH
4329: LD_INT 87
4331: PUSH
4332: LD_INT 88
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: ST_TO_ADDR
4391: GO 4624
4393: LD_INT 3
4395: DOUBLE
4396: EQUAL
4397: IFTRUE 4401
4399: GO 4623
4401: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
4402: LD_ADDR_VAR 0 4
4406: PUSH
4407: LD_INT 46
4409: PUSH
4410: LD_INT 47
4412: PUSH
4413: LD_INT 1
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 82
4421: PUSH
4422: LD_INT 83
4424: PUSH
4425: LD_INT 84
4427: PUSH
4428: LD_INT 85
4430: PUSH
4431: LD_INT 86
4433: PUSH
4434: LD_INT 11
4436: PUSH
4437: LD_INT 9
4439: PUSH
4440: LD_INT 20
4442: PUSH
4443: LD_INT 19
4445: PUSH
4446: LD_INT 21
4448: PUSH
4449: LD_INT 24
4451: PUSH
4452: LD_INT 22
4454: PUSH
4455: LD_INT 25
4457: PUSH
4458: LD_INT 28
4460: PUSH
4461: LD_INT 29
4463: PUSH
4464: LD_INT 30
4466: PUSH
4467: LD_INT 31
4469: PUSH
4470: LD_INT 37
4472: PUSH
4473: LD_INT 38
4475: PUSH
4476: LD_INT 32
4478: PUSH
4479: LD_INT 27
4481: PUSH
4482: LD_INT 33
4484: PUSH
4485: LD_INT 69
4487: PUSH
4488: LD_INT 39
4490: PUSH
4491: LD_INT 34
4493: PUSH
4494: LD_INT 40
4496: PUSH
4497: LD_INT 71
4499: PUSH
4500: LD_INT 23
4502: PUSH
4503: LD_INT 44
4505: PUSH
4506: LD_INT 48
4508: PUSH
4509: LD_INT 49
4511: PUSH
4512: LD_INT 50
4514: PUSH
4515: LD_INT 51
4517: PUSH
4518: LD_INT 52
4520: PUSH
4521: LD_INT 53
4523: PUSH
4524: LD_INT 54
4526: PUSH
4527: LD_INT 55
4529: PUSH
4530: LD_INT 56
4532: PUSH
4533: LD_INT 57
4535: PUSH
4536: LD_INT 58
4538: PUSH
4539: LD_INT 59
4541: PUSH
4542: LD_INT 63
4544: PUSH
4545: LD_INT 64
4547: PUSH
4548: LD_INT 65
4550: PUSH
4551: LD_INT 82
4553: PUSH
4554: LD_INT 83
4556: PUSH
4557: LD_INT 84
4559: PUSH
4560: LD_INT 85
4562: PUSH
4563: LD_INT 86
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: ST_TO_ADDR
4621: GO 4624
4623: POP
// if state > - 1 and state < 3 then
4624: LD_VAR 0 3
4628: PUSH
4629: LD_INT 1
4631: NEG
4632: GREATER
4633: PUSH
4634: LD_VAR 0 3
4638: PUSH
4639: LD_INT 3
4641: LESS
4642: AND
4643: IFFALSE 4700
// for i in result do
4645: LD_ADDR_VAR 0 5
4649: PUSH
4650: LD_VAR 0 4
4654: PUSH
4655: FOR_IN
4656: IFFALSE 4698
// if GetTech ( i , side ) <> state then
4658: LD_VAR 0 5
4662: PPUSH
4663: LD_VAR 0 1
4667: PPUSH
4668: CALL_OW 321
4672: PUSH
4673: LD_VAR 0 3
4677: NONEQUAL
4678: IFFALSE 4696
// result := result diff i ;
4680: LD_ADDR_VAR 0 4
4684: PUSH
4685: LD_VAR 0 4
4689: PUSH
4690: LD_VAR 0 5
4694: DIFF
4695: ST_TO_ADDR
4696: GO 4655
4698: POP
4699: POP
// end ;
4700: LD_VAR 0 4
4704: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
4705: LD_INT 0
4707: PPUSH
4708: PPUSH
4709: PPUSH
// result := true ;
4710: LD_ADDR_VAR 0 3
4714: PUSH
4715: LD_INT 1
4717: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
4718: LD_ADDR_VAR 0 5
4722: PUSH
4723: LD_VAR 0 2
4727: PPUSH
4728: CALL_OW 480
4732: ST_TO_ADDR
// if not tmp then
4733: LD_VAR 0 5
4737: NOT
4738: IFFALSE 4742
// exit ;
4740: GO 4791
// for i in tmp do
4742: LD_ADDR_VAR 0 4
4746: PUSH
4747: LD_VAR 0 5
4751: PUSH
4752: FOR_IN
4753: IFFALSE 4789
// if GetTech ( i , side ) <> state_researched then
4755: LD_VAR 0 4
4759: PPUSH
4760: LD_VAR 0 1
4764: PPUSH
4765: CALL_OW 321
4769: PUSH
4770: LD_INT 2
4772: NONEQUAL
4773: IFFALSE 4787
// begin result := false ;
4775: LD_ADDR_VAR 0 3
4779: PUSH
4780: LD_INT 0
4782: ST_TO_ADDR
// exit ;
4783: POP
4784: POP
4785: GO 4791
// end ;
4787: GO 4752
4789: POP
4790: POP
// end ;
4791: LD_VAR 0 3
4795: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4796: LD_INT 0
4798: PPUSH
4799: PPUSH
4800: PPUSH
4801: PPUSH
4802: PPUSH
4803: PPUSH
4804: PPUSH
4805: PPUSH
4806: PPUSH
4807: PPUSH
4808: PPUSH
4809: PPUSH
4810: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4811: LD_VAR 0 1
4815: NOT
4816: PUSH
4817: LD_VAR 0 1
4821: PPUSH
4822: CALL_OW 257
4826: PUSH
4827: LD_INT 9
4829: NONEQUAL
4830: OR
4831: IFFALSE 4835
// exit ;
4833: GO 5408
// side := GetSide ( unit ) ;
4835: LD_ADDR_VAR 0 9
4839: PUSH
4840: LD_VAR 0 1
4844: PPUSH
4845: CALL_OW 255
4849: ST_TO_ADDR
// tech_space := tech_spacanom ;
4850: LD_ADDR_VAR 0 12
4854: PUSH
4855: LD_INT 29
4857: ST_TO_ADDR
// tech_time := tech_taurad ;
4858: LD_ADDR_VAR 0 13
4862: PUSH
4863: LD_INT 28
4865: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4866: LD_ADDR_VAR 0 11
4870: PUSH
4871: LD_VAR 0 1
4875: PPUSH
4876: CALL_OW 310
4880: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4881: LD_VAR 0 11
4885: PPUSH
4886: CALL_OW 247
4890: PUSH
4891: LD_INT 2
4893: EQUAL
4894: IFFALSE 4898
// exit ;
4896: GO 5408
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4898: LD_ADDR_VAR 0 8
4902: PUSH
4903: LD_INT 81
4905: PUSH
4906: LD_VAR 0 9
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 3
4917: PUSH
4918: LD_INT 21
4920: PUSH
4921: LD_INT 3
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PPUSH
4936: CALL_OW 69
4940: ST_TO_ADDR
// if not tmp then
4941: LD_VAR 0 8
4945: NOT
4946: IFFALSE 4950
// exit ;
4948: GO 5408
// if in_unit then
4950: LD_VAR 0 11
4954: IFFALSE 4978
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4956: LD_ADDR_VAR 0 10
4960: PUSH
4961: LD_VAR 0 8
4965: PPUSH
4966: LD_VAR 0 11
4970: PPUSH
4971: CALL_OW 74
4975: ST_TO_ADDR
4976: GO 4998
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4978: LD_ADDR_VAR 0 10
4982: PUSH
4983: LD_VAR 0 8
4987: PPUSH
4988: LD_VAR 0 1
4992: PPUSH
4993: CALL_OW 74
4997: ST_TO_ADDR
// if not enemy then
4998: LD_VAR 0 10
5002: NOT
5003: IFFALSE 5007
// exit ;
5005: GO 5408
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
5007: LD_VAR 0 11
5011: PUSH
5012: LD_VAR 0 11
5016: PPUSH
5017: LD_VAR 0 10
5021: PPUSH
5022: CALL_OW 296
5026: PUSH
5027: LD_INT 13
5029: GREATER
5030: AND
5031: PUSH
5032: LD_VAR 0 1
5036: PPUSH
5037: LD_VAR 0 10
5041: PPUSH
5042: CALL_OW 296
5046: PUSH
5047: LD_INT 12
5049: GREATER
5050: OR
5051: IFFALSE 5055
// exit ;
5053: GO 5408
// missile := [ 1 ] ;
5055: LD_ADDR_VAR 0 14
5059: PUSH
5060: LD_INT 1
5062: PUSH
5063: EMPTY
5064: LIST
5065: ST_TO_ADDR
// if Researched ( side , tech_space ) then
5066: LD_VAR 0 9
5070: PPUSH
5071: LD_VAR 0 12
5075: PPUSH
5076: CALL_OW 325
5080: IFFALSE 5109
// missile := Replace ( missile , missile + 1 , 2 ) ;
5082: LD_ADDR_VAR 0 14
5086: PUSH
5087: LD_VAR 0 14
5091: PPUSH
5092: LD_VAR 0 14
5096: PUSH
5097: LD_INT 1
5099: PLUS
5100: PPUSH
5101: LD_INT 2
5103: PPUSH
5104: CALL_OW 1
5108: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
5109: LD_VAR 0 9
5113: PPUSH
5114: LD_VAR 0 13
5118: PPUSH
5119: CALL_OW 325
5123: PUSH
5124: LD_VAR 0 10
5128: PPUSH
5129: CALL_OW 255
5133: PPUSH
5134: LD_VAR 0 13
5138: PPUSH
5139: CALL_OW 325
5143: NOT
5144: AND
5145: IFFALSE 5174
// missile := Replace ( missile , missile + 1 , 3 ) ;
5147: LD_ADDR_VAR 0 14
5151: PUSH
5152: LD_VAR 0 14
5156: PPUSH
5157: LD_VAR 0 14
5161: PUSH
5162: LD_INT 1
5164: PLUS
5165: PPUSH
5166: LD_INT 3
5168: PPUSH
5169: CALL_OW 1
5173: ST_TO_ADDR
// if missile < 2 then
5174: LD_VAR 0 14
5178: PUSH
5179: LD_INT 2
5181: LESS
5182: IFFALSE 5186
// exit ;
5184: GO 5408
// x := GetX ( enemy ) ;
5186: LD_ADDR_VAR 0 4
5190: PUSH
5191: LD_VAR 0 10
5195: PPUSH
5196: CALL_OW 250
5200: ST_TO_ADDR
// y := GetY ( enemy ) ;
5201: LD_ADDR_VAR 0 5
5205: PUSH
5206: LD_VAR 0 10
5210: PPUSH
5211: CALL_OW 251
5215: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
5216: LD_ADDR_VAR 0 6
5220: PUSH
5221: LD_VAR 0 4
5225: PUSH
5226: LD_INT 1
5228: NEG
5229: PPUSH
5230: LD_INT 1
5232: PPUSH
5233: CALL_OW 12
5237: PLUS
5238: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
5239: LD_ADDR_VAR 0 7
5243: PUSH
5244: LD_VAR 0 5
5248: PUSH
5249: LD_INT 1
5251: NEG
5252: PPUSH
5253: LD_INT 1
5255: PPUSH
5256: CALL_OW 12
5260: PLUS
5261: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5262: LD_VAR 0 6
5266: PPUSH
5267: LD_VAR 0 7
5271: PPUSH
5272: CALL_OW 488
5276: NOT
5277: IFFALSE 5299
// begin _x := x ;
5279: LD_ADDR_VAR 0 6
5283: PUSH
5284: LD_VAR 0 4
5288: ST_TO_ADDR
// _y := y ;
5289: LD_ADDR_VAR 0 7
5293: PUSH
5294: LD_VAR 0 5
5298: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
5299: LD_ADDR_VAR 0 3
5303: PUSH
5304: LD_INT 1
5306: PPUSH
5307: LD_VAR 0 14
5311: PPUSH
5312: CALL_OW 12
5316: ST_TO_ADDR
// case i of 1 :
5317: LD_VAR 0 3
5321: PUSH
5322: LD_INT 1
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5330
5328: GO 5347
5330: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
5331: LD_VAR 0 1
5335: PPUSH
5336: LD_VAR 0 10
5340: PPUSH
5341: CALL_OW 115
5345: GO 5408
5347: LD_INT 2
5349: DOUBLE
5350: EQUAL
5351: IFTRUE 5355
5353: GO 5377
5355: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
5356: LD_VAR 0 1
5360: PPUSH
5361: LD_VAR 0 6
5365: PPUSH
5366: LD_VAR 0 7
5370: PPUSH
5371: CALL_OW 153
5375: GO 5408
5377: LD_INT 3
5379: DOUBLE
5380: EQUAL
5381: IFTRUE 5385
5383: GO 5407
5385: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
5386: LD_VAR 0 1
5390: PPUSH
5391: LD_VAR 0 6
5395: PPUSH
5396: LD_VAR 0 7
5400: PPUSH
5401: CALL_OW 154
5405: GO 5408
5407: POP
// end ;
5408: LD_VAR 0 2
5412: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
5413: LD_INT 0
5415: PPUSH
5416: PPUSH
5417: PPUSH
5418: PPUSH
5419: PPUSH
5420: PPUSH
// if not unit or not building then
5421: LD_VAR 0 1
5425: NOT
5426: PUSH
5427: LD_VAR 0 2
5431: NOT
5432: OR
5433: IFFALSE 5437
// exit ;
5435: GO 5595
// x := GetX ( building ) ;
5437: LD_ADDR_VAR 0 5
5441: PUSH
5442: LD_VAR 0 2
5446: PPUSH
5447: CALL_OW 250
5451: ST_TO_ADDR
// y := GetY ( building ) ;
5452: LD_ADDR_VAR 0 6
5456: PUSH
5457: LD_VAR 0 2
5461: PPUSH
5462: CALL_OW 251
5466: ST_TO_ADDR
// for i = 0 to 5 do
5467: LD_ADDR_VAR 0 4
5471: PUSH
5472: DOUBLE
5473: LD_INT 0
5475: DEC
5476: ST_TO_ADDR
5477: LD_INT 5
5479: PUSH
5480: FOR_TO
5481: IFFALSE 5593
// begin _x := ShiftX ( x , i , 3 ) ;
5483: LD_ADDR_VAR 0 7
5487: PUSH
5488: LD_VAR 0 5
5492: PPUSH
5493: LD_VAR 0 4
5497: PPUSH
5498: LD_INT 3
5500: PPUSH
5501: CALL_OW 272
5505: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
5506: LD_ADDR_VAR 0 8
5510: PUSH
5511: LD_VAR 0 6
5515: PPUSH
5516: LD_VAR 0 4
5520: PPUSH
5521: LD_INT 3
5523: PPUSH
5524: CALL_OW 273
5528: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
5529: LD_VAR 0 7
5533: PPUSH
5534: LD_VAR 0 8
5538: PPUSH
5539: CALL_OW 488
5543: NOT
5544: IFFALSE 5548
// continue ;
5546: GO 5480
// if HexInfo ( _x , _y ) = 0 then
5548: LD_VAR 0 7
5552: PPUSH
5553: LD_VAR 0 8
5557: PPUSH
5558: CALL_OW 428
5562: PUSH
5563: LD_INT 0
5565: EQUAL
5566: IFFALSE 5591
// begin ComMoveXY ( unit , _x , _y ) ;
5568: LD_VAR 0 1
5572: PPUSH
5573: LD_VAR 0 7
5577: PPUSH
5578: LD_VAR 0 8
5582: PPUSH
5583: CALL_OW 111
// exit ;
5587: POP
5588: POP
5589: GO 5595
// end ; end ;
5591: GO 5480
5593: POP
5594: POP
// end ;
5595: LD_VAR 0 3
5599: RET
// export function ScanBase ( side , base_area ) ; begin
5600: LD_INT 0
5602: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
5603: LD_ADDR_VAR 0 3
5607: PUSH
5608: LD_VAR 0 2
5612: PPUSH
5613: LD_INT 81
5615: PUSH
5616: LD_VAR 0 1
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PPUSH
5625: CALL_OW 70
5629: ST_TO_ADDR
// end ;
5630: LD_VAR 0 3
5634: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
5635: LD_INT 0
5637: PPUSH
5638: PPUSH
5639: PPUSH
5640: PPUSH
// result := false ;
5641: LD_ADDR_VAR 0 2
5645: PUSH
5646: LD_INT 0
5648: ST_TO_ADDR
// side := GetSide ( unit ) ;
5649: LD_ADDR_VAR 0 3
5653: PUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL_OW 255
5663: ST_TO_ADDR
// nat := GetNation ( unit ) ;
5664: LD_ADDR_VAR 0 4
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 248
5678: ST_TO_ADDR
// case nat of 1 :
5679: LD_VAR 0 4
5683: PUSH
5684: LD_INT 1
5686: DOUBLE
5687: EQUAL
5688: IFTRUE 5692
5690: GO 5703
5692: POP
// tech := tech_lassight ; 2 :
5693: LD_ADDR_VAR 0 5
5697: PUSH
5698: LD_INT 12
5700: ST_TO_ADDR
5701: GO 5742
5703: LD_INT 2
5705: DOUBLE
5706: EQUAL
5707: IFTRUE 5711
5709: GO 5722
5711: POP
// tech := tech_mortar ; 3 :
5712: LD_ADDR_VAR 0 5
5716: PUSH
5717: LD_INT 41
5719: ST_TO_ADDR
5720: GO 5742
5722: LD_INT 3
5724: DOUBLE
5725: EQUAL
5726: IFTRUE 5730
5728: GO 5741
5730: POP
// tech := tech_bazooka ; end ;
5731: LD_ADDR_VAR 0 5
5735: PUSH
5736: LD_INT 44
5738: ST_TO_ADDR
5739: GO 5742
5741: POP
// if Researched ( side , tech ) then
5742: LD_VAR 0 3
5746: PPUSH
5747: LD_VAR 0 5
5751: PPUSH
5752: CALL_OW 325
5756: IFFALSE 5783
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5758: LD_ADDR_VAR 0 2
5762: PUSH
5763: LD_INT 5
5765: PUSH
5766: LD_INT 8
5768: PUSH
5769: LD_INT 9
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: LIST
5776: PUSH
5777: LD_VAR 0 4
5781: ARRAY
5782: ST_TO_ADDR
// end ;
5783: LD_VAR 0 2
5787: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5788: LD_INT 0
5790: PPUSH
5791: PPUSH
5792: PPUSH
// if not mines then
5793: LD_VAR 0 2
5797: NOT
5798: IFFALSE 5802
// exit ;
5800: GO 5946
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5802: LD_ADDR_VAR 0 5
5806: PUSH
5807: LD_INT 81
5809: PUSH
5810: LD_VAR 0 1
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PUSH
5819: LD_INT 3
5821: PUSH
5822: LD_INT 21
5824: PUSH
5825: LD_INT 3
5827: PUSH
5828: EMPTY
5829: LIST
5830: LIST
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PPUSH
5840: CALL_OW 69
5844: ST_TO_ADDR
// for i in mines do
5845: LD_ADDR_VAR 0 4
5849: PUSH
5850: LD_VAR 0 2
5854: PUSH
5855: FOR_IN
5856: IFFALSE 5944
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5858: LD_VAR 0 4
5862: PUSH
5863: LD_INT 1
5865: ARRAY
5866: PPUSH
5867: LD_VAR 0 4
5871: PUSH
5872: LD_INT 2
5874: ARRAY
5875: PPUSH
5876: CALL_OW 458
5880: NOT
5881: IFFALSE 5885
// continue ;
5883: GO 5855
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5885: LD_VAR 0 4
5889: PUSH
5890: LD_INT 1
5892: ARRAY
5893: PPUSH
5894: LD_VAR 0 4
5898: PUSH
5899: LD_INT 2
5901: ARRAY
5902: PPUSH
5903: CALL_OW 428
5907: PUSH
5908: LD_VAR 0 5
5912: IN
5913: IFFALSE 5942
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5915: LD_VAR 0 4
5919: PUSH
5920: LD_INT 1
5922: ARRAY
5923: PPUSH
5924: LD_VAR 0 4
5928: PUSH
5929: LD_INT 2
5931: ARRAY
5932: PPUSH
5933: LD_VAR 0 1
5937: PPUSH
5938: CALL_OW 456
// end ;
5942: GO 5855
5944: POP
5945: POP
// end ;
5946: LD_VAR 0 3
5950: RET
// export function Count ( array ) ; var i ; begin
5951: LD_INT 0
5953: PPUSH
5954: PPUSH
// result := 0 ;
5955: LD_ADDR_VAR 0 2
5959: PUSH
5960: LD_INT 0
5962: ST_TO_ADDR
// for i in array do
5963: LD_ADDR_VAR 0 3
5967: PUSH
5968: LD_VAR 0 1
5972: PUSH
5973: FOR_IN
5974: IFFALSE 5998
// if i then
5976: LD_VAR 0 3
5980: IFFALSE 5996
// result := result + 1 ;
5982: LD_ADDR_VAR 0 2
5986: PUSH
5987: LD_VAR 0 2
5991: PUSH
5992: LD_INT 1
5994: PLUS
5995: ST_TO_ADDR
5996: GO 5973
5998: POP
5999: POP
// end ;
6000: LD_VAR 0 2
6004: RET
// export function IsEmpty ( building ) ; begin
6005: LD_INT 0
6007: PPUSH
// if not building then
6008: LD_VAR 0 1
6012: NOT
6013: IFFALSE 6017
// exit ;
6015: GO 6060
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
6017: LD_ADDR_VAR 0 2
6021: PUSH
6022: LD_VAR 0 1
6026: PUSH
6027: LD_INT 22
6029: PUSH
6030: LD_VAR 0 1
6034: PPUSH
6035: CALL_OW 255
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: LD_INT 58
6046: PUSH
6047: EMPTY
6048: LIST
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PPUSH
6054: CALL_OW 69
6058: IN
6059: ST_TO_ADDR
// end ;
6060: LD_VAR 0 2
6064: RET
// export function IsNotFull ( building ) ; begin
6065: LD_INT 0
6067: PPUSH
// if not building then
6068: LD_VAR 0 1
6072: NOT
6073: IFFALSE 6077
// exit ;
6075: GO 6096
// result := UnitsInside ( building ) < 6 ;
6077: LD_ADDR_VAR 0 2
6081: PUSH
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 313
6091: PUSH
6092: LD_INT 6
6094: LESS
6095: ST_TO_ADDR
// end ;
6096: LD_VAR 0 2
6100: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
6101: LD_INT 0
6103: PPUSH
6104: PPUSH
6105: PPUSH
6106: PPUSH
// tmp := [ ] ;
6107: LD_ADDR_VAR 0 3
6111: PUSH
6112: EMPTY
6113: ST_TO_ADDR
// list := [ ] ;
6114: LD_ADDR_VAR 0 5
6118: PUSH
6119: EMPTY
6120: ST_TO_ADDR
// for i = 16 to 25 do
6121: LD_ADDR_VAR 0 4
6125: PUSH
6126: DOUBLE
6127: LD_INT 16
6129: DEC
6130: ST_TO_ADDR
6131: LD_INT 25
6133: PUSH
6134: FOR_TO
6135: IFFALSE 6208
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
6137: LD_ADDR_VAR 0 3
6141: PUSH
6142: LD_VAR 0 3
6146: PUSH
6147: LD_INT 22
6149: PUSH
6150: LD_VAR 0 1
6154: PPUSH
6155: CALL_OW 255
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 91
6166: PUSH
6167: LD_VAR 0 1
6171: PUSH
6172: LD_INT 6
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: PUSH
6180: LD_INT 30
6182: PUSH
6183: LD_VAR 0 4
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: LIST
6196: PUSH
6197: EMPTY
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: ADD
6205: ST_TO_ADDR
6206: GO 6134
6208: POP
6209: POP
// for i = 1 to tmp do
6210: LD_ADDR_VAR 0 4
6214: PUSH
6215: DOUBLE
6216: LD_INT 1
6218: DEC
6219: ST_TO_ADDR
6220: LD_VAR 0 3
6224: PUSH
6225: FOR_TO
6226: IFFALSE 6314
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
6228: LD_ADDR_VAR 0 5
6232: PUSH
6233: LD_VAR 0 5
6237: PUSH
6238: LD_VAR 0 3
6242: PUSH
6243: LD_VAR 0 4
6247: ARRAY
6248: PPUSH
6249: CALL_OW 266
6253: PUSH
6254: LD_VAR 0 3
6258: PUSH
6259: LD_VAR 0 4
6263: ARRAY
6264: PPUSH
6265: CALL_OW 250
6269: PUSH
6270: LD_VAR 0 3
6274: PUSH
6275: LD_VAR 0 4
6279: ARRAY
6280: PPUSH
6281: CALL_OW 251
6285: PUSH
6286: LD_VAR 0 3
6290: PUSH
6291: LD_VAR 0 4
6295: ARRAY
6296: PPUSH
6297: CALL_OW 254
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: EMPTY
6309: LIST
6310: ADD
6311: ST_TO_ADDR
6312: GO 6225
6314: POP
6315: POP
// result := list ;
6316: LD_ADDR_VAR 0 2
6320: PUSH
6321: LD_VAR 0 5
6325: ST_TO_ADDR
// end ;
6326: LD_VAR 0 2
6330: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
6331: LD_INT 0
6333: PPUSH
6334: PPUSH
6335: PPUSH
6336: PPUSH
6337: PPUSH
6338: PPUSH
6339: PPUSH
// if not factory then
6340: LD_VAR 0 1
6344: NOT
6345: IFFALSE 6349
// exit ;
6347: GO 6942
// if control = control_apeman then
6349: LD_VAR 0 4
6353: PUSH
6354: LD_INT 5
6356: EQUAL
6357: IFFALSE 6466
// begin tmp := UnitsInside ( factory ) ;
6359: LD_ADDR_VAR 0 8
6363: PUSH
6364: LD_VAR 0 1
6368: PPUSH
6369: CALL_OW 313
6373: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
6374: LD_VAR 0 8
6378: PPUSH
6379: LD_INT 25
6381: PUSH
6382: LD_INT 12
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PPUSH
6389: CALL_OW 72
6393: NOT
6394: IFFALSE 6404
// control := control_manual ;
6396: LD_ADDR_VAR 0 4
6400: PUSH
6401: LD_INT 1
6403: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
6404: LD_ADDR_VAR 0 8
6408: PUSH
6409: LD_VAR 0 1
6413: PPUSH
6414: CALL 6101 0 1
6418: ST_TO_ADDR
// if tmp then
6419: LD_VAR 0 8
6423: IFFALSE 6466
// begin for i in tmp do
6425: LD_ADDR_VAR 0 7
6429: PUSH
6430: LD_VAR 0 8
6434: PUSH
6435: FOR_IN
6436: IFFALSE 6464
// if i [ 1 ] = b_ext_radio then
6438: LD_VAR 0 7
6442: PUSH
6443: LD_INT 1
6445: ARRAY
6446: PUSH
6447: LD_INT 22
6449: EQUAL
6450: IFFALSE 6462
// begin control := control_remote ;
6452: LD_ADDR_VAR 0 4
6456: PUSH
6457: LD_INT 2
6459: ST_TO_ADDR
// break ;
6460: GO 6464
// end ;
6462: GO 6435
6464: POP
6465: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6466: LD_VAR 0 1
6470: PPUSH
6471: LD_VAR 0 2
6475: PPUSH
6476: LD_VAR 0 3
6480: PPUSH
6481: LD_VAR 0 4
6485: PPUSH
6486: LD_VAR 0 5
6490: PPUSH
6491: CALL_OW 448
6495: IFFALSE 6530
// begin result := [ chassis , engine , control , weapon ] ;
6497: LD_ADDR_VAR 0 6
6501: PUSH
6502: LD_VAR 0 2
6506: PUSH
6507: LD_VAR 0 3
6511: PUSH
6512: LD_VAR 0 4
6516: PUSH
6517: LD_VAR 0 5
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: ST_TO_ADDR
// exit ;
6528: GO 6942
// end ; _chassis := AvailableChassisList ( factory ) ;
6530: LD_ADDR_VAR 0 9
6534: PUSH
6535: LD_VAR 0 1
6539: PPUSH
6540: CALL_OW 475
6544: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
6545: LD_ADDR_VAR 0 11
6549: PUSH
6550: LD_VAR 0 1
6554: PPUSH
6555: CALL_OW 476
6559: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
6560: LD_ADDR_VAR 0 12
6564: PUSH
6565: LD_VAR 0 1
6569: PPUSH
6570: CALL_OW 477
6574: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
6575: LD_ADDR_VAR 0 10
6579: PUSH
6580: LD_VAR 0 1
6584: PPUSH
6585: CALL_OW 478
6589: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
6590: LD_VAR 0 9
6594: NOT
6595: PUSH
6596: LD_VAR 0 11
6600: NOT
6601: OR
6602: PUSH
6603: LD_VAR 0 12
6607: NOT
6608: OR
6609: PUSH
6610: LD_VAR 0 10
6614: NOT
6615: OR
6616: IFFALSE 6651
// begin result := [ chassis , engine , control , weapon ] ;
6618: LD_ADDR_VAR 0 6
6622: PUSH
6623: LD_VAR 0 2
6627: PUSH
6628: LD_VAR 0 3
6632: PUSH
6633: LD_VAR 0 4
6637: PUSH
6638: LD_VAR 0 5
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: ST_TO_ADDR
// exit ;
6649: GO 6942
// end ; if not chassis in _chassis then
6651: LD_VAR 0 2
6655: PUSH
6656: LD_VAR 0 9
6660: IN
6661: NOT
6662: IFFALSE 6688
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
6664: LD_ADDR_VAR 0 2
6668: PUSH
6669: LD_VAR 0 9
6673: PUSH
6674: LD_INT 1
6676: PPUSH
6677: LD_VAR 0 9
6681: PPUSH
6682: CALL_OW 12
6686: ARRAY
6687: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
6688: LD_VAR 0 2
6692: PPUSH
6693: LD_VAR 0 3
6697: PPUSH
6698: CALL 6947 0 2
6702: NOT
6703: IFFALSE 6762
// repeat engine := _engine [ 1 ] ;
6705: LD_ADDR_VAR 0 3
6709: PUSH
6710: LD_VAR 0 11
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
6719: LD_ADDR_VAR 0 11
6723: PUSH
6724: LD_VAR 0 11
6728: PPUSH
6729: LD_INT 1
6731: PPUSH
6732: CALL_OW 3
6736: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_VAR 0 3
6746: PPUSH
6747: CALL 6947 0 2
6751: PUSH
6752: LD_VAR 0 11
6756: PUSH
6757: EMPTY
6758: EQUAL
6759: OR
6760: IFFALSE 6705
// if not control in _control then
6762: LD_VAR 0 4
6766: PUSH
6767: LD_VAR 0 12
6771: IN
6772: NOT
6773: IFFALSE 6799
// control := _control [ rand ( 1 , _control ) ] ;
6775: LD_ADDR_VAR 0 4
6779: PUSH
6780: LD_VAR 0 12
6784: PUSH
6785: LD_INT 1
6787: PPUSH
6788: LD_VAR 0 12
6792: PPUSH
6793: CALL_OW 12
6797: ARRAY
6798: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6799: LD_VAR 0 2
6803: PPUSH
6804: LD_VAR 0 5
6808: PPUSH
6809: CALL 7167 0 2
6813: NOT
6814: IFFALSE 6873
// repeat weapon := _weapon [ 1 ] ;
6816: LD_ADDR_VAR 0 5
6820: PUSH
6821: LD_VAR 0 10
6825: PUSH
6826: LD_INT 1
6828: ARRAY
6829: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6830: LD_ADDR_VAR 0 10
6834: PUSH
6835: LD_VAR 0 10
6839: PPUSH
6840: LD_INT 1
6842: PPUSH
6843: CALL_OW 3
6847: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6848: LD_VAR 0 2
6852: PPUSH
6853: LD_VAR 0 5
6857: PPUSH
6858: CALL 7167 0 2
6862: PUSH
6863: LD_VAR 0 10
6867: PUSH
6868: EMPTY
6869: EQUAL
6870: OR
6871: IFFALSE 6816
// result := [ ] ;
6873: LD_ADDR_VAR 0 6
6877: PUSH
6878: EMPTY
6879: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6880: LD_VAR 0 1
6884: PPUSH
6885: LD_VAR 0 2
6889: PPUSH
6890: LD_VAR 0 3
6894: PPUSH
6895: LD_VAR 0 4
6899: PPUSH
6900: LD_VAR 0 5
6904: PPUSH
6905: CALL_OW 448
6909: IFFALSE 6942
// result := [ chassis , engine , control , weapon ] ;
6911: LD_ADDR_VAR 0 6
6915: PUSH
6916: LD_VAR 0 2
6920: PUSH
6921: LD_VAR 0 3
6925: PUSH
6926: LD_VAR 0 4
6930: PUSH
6931: LD_VAR 0 5
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: ST_TO_ADDR
// end ;
6942: LD_VAR 0 6
6946: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6947: LD_INT 0
6949: PPUSH
// if not chassis or not engine then
6950: LD_VAR 0 1
6954: NOT
6955: PUSH
6956: LD_VAR 0 2
6960: NOT
6961: OR
6962: IFFALSE 6966
// exit ;
6964: GO 7162
// case engine of engine_solar :
6966: LD_VAR 0 2
6970: PUSH
6971: LD_INT 2
6973: DOUBLE
6974: EQUAL
6975: IFTRUE 6979
6977: GO 7017
6979: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6980: LD_ADDR_VAR 0 3
6984: PUSH
6985: LD_INT 11
6987: PUSH
6988: LD_INT 12
6990: PUSH
6991: LD_INT 13
6993: PUSH
6994: LD_INT 14
6996: PUSH
6997: LD_INT 1
6999: PUSH
7000: LD_INT 2
7002: PUSH
7003: LD_INT 3
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: ST_TO_ADDR
7015: GO 7146
7017: LD_INT 1
7019: DOUBLE
7020: EQUAL
7021: IFTRUE 7025
7023: GO 7087
7025: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
7026: LD_ADDR_VAR 0 3
7030: PUSH
7031: LD_INT 11
7033: PUSH
7034: LD_INT 12
7036: PUSH
7037: LD_INT 13
7039: PUSH
7040: LD_INT 14
7042: PUSH
7043: LD_INT 1
7045: PUSH
7046: LD_INT 2
7048: PUSH
7049: LD_INT 3
7051: PUSH
7052: LD_INT 4
7054: PUSH
7055: LD_INT 5
7057: PUSH
7058: LD_INT 21
7060: PUSH
7061: LD_INT 23
7063: PUSH
7064: LD_INT 22
7066: PUSH
7067: LD_INT 24
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: ST_TO_ADDR
7085: GO 7146
7087: LD_INT 3
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7145
7095: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7096: LD_ADDR_VAR 0 3
7100: PUSH
7101: LD_INT 13
7103: PUSH
7104: LD_INT 14
7106: PUSH
7107: LD_INT 2
7109: PUSH
7110: LD_INT 3
7112: PUSH
7113: LD_INT 4
7115: PUSH
7116: LD_INT 5
7118: PUSH
7119: LD_INT 21
7121: PUSH
7122: LD_INT 22
7124: PUSH
7125: LD_INT 23
7127: PUSH
7128: LD_INT 24
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: ST_TO_ADDR
7143: GO 7146
7145: POP
// result := ( chassis in result ) ;
7146: LD_ADDR_VAR 0 3
7150: PUSH
7151: LD_VAR 0 1
7155: PUSH
7156: LD_VAR 0 3
7160: IN
7161: ST_TO_ADDR
// end ;
7162: LD_VAR 0 3
7166: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
7167: LD_INT 0
7169: PPUSH
// if not chassis or not weapon then
7170: LD_VAR 0 1
7174: NOT
7175: PUSH
7176: LD_VAR 0 2
7180: NOT
7181: OR
7182: IFFALSE 7186
// exit ;
7184: GO 8248
// case weapon of us_machine_gun :
7186: LD_VAR 0 2
7190: PUSH
7191: LD_INT 2
7193: DOUBLE
7194: EQUAL
7195: IFTRUE 7199
7197: GO 7229
7199: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
7200: LD_ADDR_VAR 0 3
7204: PUSH
7205: LD_INT 1
7207: PUSH
7208: LD_INT 2
7210: PUSH
7211: LD_INT 3
7213: PUSH
7214: LD_INT 4
7216: PUSH
7217: LD_INT 5
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: ST_TO_ADDR
7227: GO 8232
7229: LD_INT 3
7231: DOUBLE
7232: EQUAL
7233: IFTRUE 7237
7235: GO 7267
7237: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
7238: LD_ADDR_VAR 0 3
7242: PUSH
7243: LD_INT 1
7245: PUSH
7246: LD_INT 2
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: LD_INT 4
7254: PUSH
7255: LD_INT 5
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: ST_TO_ADDR
7265: GO 8232
7267: LD_INT 11
7269: DOUBLE
7270: EQUAL
7271: IFTRUE 7275
7273: GO 7305
7275: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
7276: LD_ADDR_VAR 0 3
7280: PUSH
7281: LD_INT 1
7283: PUSH
7284: LD_INT 2
7286: PUSH
7287: LD_INT 3
7289: PUSH
7290: LD_INT 4
7292: PUSH
7293: LD_INT 5
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: ST_TO_ADDR
7303: GO 8232
7305: LD_INT 4
7307: DOUBLE
7308: EQUAL
7309: IFTRUE 7313
7311: GO 7339
7313: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
7314: LD_ADDR_VAR 0 3
7318: PUSH
7319: LD_INT 2
7321: PUSH
7322: LD_INT 3
7324: PUSH
7325: LD_INT 4
7327: PUSH
7328: LD_INT 5
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: ST_TO_ADDR
7337: GO 8232
7339: LD_INT 5
7341: DOUBLE
7342: EQUAL
7343: IFTRUE 7347
7345: GO 7373
7347: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
7348: LD_ADDR_VAR 0 3
7352: PUSH
7353: LD_INT 2
7355: PUSH
7356: LD_INT 3
7358: PUSH
7359: LD_INT 4
7361: PUSH
7362: LD_INT 5
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: ST_TO_ADDR
7371: GO 8232
7373: LD_INT 9
7375: DOUBLE
7376: EQUAL
7377: IFTRUE 7381
7379: GO 7407
7381: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
7382: LD_ADDR_VAR 0 3
7386: PUSH
7387: LD_INT 2
7389: PUSH
7390: LD_INT 3
7392: PUSH
7393: LD_INT 4
7395: PUSH
7396: LD_INT 5
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: ST_TO_ADDR
7405: GO 8232
7407: LD_INT 7
7409: DOUBLE
7410: EQUAL
7411: IFTRUE 7415
7413: GO 7441
7415: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
7416: LD_ADDR_VAR 0 3
7420: PUSH
7421: LD_INT 2
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 4
7429: PUSH
7430: LD_INT 5
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: ST_TO_ADDR
7439: GO 8232
7441: LD_INT 12
7443: DOUBLE
7444: EQUAL
7445: IFTRUE 7449
7447: GO 7475
7449: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
7450: LD_ADDR_VAR 0 3
7454: PUSH
7455: LD_INT 2
7457: PUSH
7458: LD_INT 3
7460: PUSH
7461: LD_INT 4
7463: PUSH
7464: LD_INT 5
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: ST_TO_ADDR
7473: GO 8232
7475: LD_INT 13
7477: DOUBLE
7478: EQUAL
7479: IFTRUE 7483
7481: GO 7509
7483: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
7484: LD_ADDR_VAR 0 3
7488: PUSH
7489: LD_INT 2
7491: PUSH
7492: LD_INT 3
7494: PUSH
7495: LD_INT 4
7497: PUSH
7498: LD_INT 5
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: LIST
7505: LIST
7506: ST_TO_ADDR
7507: GO 8232
7509: LD_INT 14
7511: DOUBLE
7512: EQUAL
7513: IFTRUE 7517
7515: GO 7535
7517: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
7518: LD_ADDR_VAR 0 3
7522: PUSH
7523: LD_INT 4
7525: PUSH
7526: LD_INT 5
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: ST_TO_ADDR
7533: GO 8232
7535: LD_INT 6
7537: DOUBLE
7538: EQUAL
7539: IFTRUE 7543
7541: GO 7561
7543: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
7544: LD_ADDR_VAR 0 3
7548: PUSH
7549: LD_INT 4
7551: PUSH
7552: LD_INT 5
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: ST_TO_ADDR
7559: GO 8232
7561: LD_INT 10
7563: DOUBLE
7564: EQUAL
7565: IFTRUE 7569
7567: GO 7587
7569: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
7570: LD_ADDR_VAR 0 3
7574: PUSH
7575: LD_INT 4
7577: PUSH
7578: LD_INT 5
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: ST_TO_ADDR
7585: GO 8232
7587: LD_INT 22
7589: DOUBLE
7590: EQUAL
7591: IFTRUE 7595
7593: GO 7621
7595: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
7596: LD_ADDR_VAR 0 3
7600: PUSH
7601: LD_INT 11
7603: PUSH
7604: LD_INT 12
7606: PUSH
7607: LD_INT 13
7609: PUSH
7610: LD_INT 14
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: ST_TO_ADDR
7619: GO 8232
7621: LD_INT 23
7623: DOUBLE
7624: EQUAL
7625: IFTRUE 7629
7627: GO 7655
7629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
7630: LD_ADDR_VAR 0 3
7634: PUSH
7635: LD_INT 11
7637: PUSH
7638: LD_INT 12
7640: PUSH
7641: LD_INT 13
7643: PUSH
7644: LD_INT 14
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: ST_TO_ADDR
7653: GO 8232
7655: LD_INT 24
7657: DOUBLE
7658: EQUAL
7659: IFTRUE 7663
7661: GO 7689
7663: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
7664: LD_ADDR_VAR 0 3
7668: PUSH
7669: LD_INT 11
7671: PUSH
7672: LD_INT 12
7674: PUSH
7675: LD_INT 13
7677: PUSH
7678: LD_INT 14
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: ST_TO_ADDR
7687: GO 8232
7689: LD_INT 30
7691: DOUBLE
7692: EQUAL
7693: IFTRUE 7697
7695: GO 7723
7697: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
7698: LD_ADDR_VAR 0 3
7702: PUSH
7703: LD_INT 11
7705: PUSH
7706: LD_INT 12
7708: PUSH
7709: LD_INT 13
7711: PUSH
7712: LD_INT 14
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: ST_TO_ADDR
7721: GO 8232
7723: LD_INT 25
7725: DOUBLE
7726: EQUAL
7727: IFTRUE 7731
7729: GO 7749
7731: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7732: LD_ADDR_VAR 0 3
7736: PUSH
7737: LD_INT 13
7739: PUSH
7740: LD_INT 14
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: ST_TO_ADDR
7747: GO 8232
7749: LD_INT 27
7751: DOUBLE
7752: EQUAL
7753: IFTRUE 7757
7755: GO 7775
7757: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7758: LD_ADDR_VAR 0 3
7762: PUSH
7763: LD_INT 13
7765: PUSH
7766: LD_INT 14
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: ST_TO_ADDR
7773: GO 8232
7775: LD_EXP 50
7779: DOUBLE
7780: EQUAL
7781: IFTRUE 7785
7783: GO 7811
7785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7786: LD_ADDR_VAR 0 3
7790: PUSH
7791: LD_INT 11
7793: PUSH
7794: LD_INT 12
7796: PUSH
7797: LD_INT 13
7799: PUSH
7800: LD_INT 14
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: ST_TO_ADDR
7809: GO 8232
7811: LD_INT 28
7813: DOUBLE
7814: EQUAL
7815: IFTRUE 7819
7817: GO 7837
7819: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7820: LD_ADDR_VAR 0 3
7824: PUSH
7825: LD_INT 13
7827: PUSH
7828: LD_INT 14
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: ST_TO_ADDR
7835: GO 8232
7837: LD_INT 29
7839: DOUBLE
7840: EQUAL
7841: IFTRUE 7845
7843: GO 7863
7845: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7846: LD_ADDR_VAR 0 3
7850: PUSH
7851: LD_INT 13
7853: PUSH
7854: LD_INT 14
7856: PUSH
7857: EMPTY
7858: LIST
7859: LIST
7860: ST_TO_ADDR
7861: GO 8232
7863: LD_INT 31
7865: DOUBLE
7866: EQUAL
7867: IFTRUE 7871
7869: GO 7889
7871: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7872: LD_ADDR_VAR 0 3
7876: PUSH
7877: LD_INT 13
7879: PUSH
7880: LD_INT 14
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: ST_TO_ADDR
7887: GO 8232
7889: LD_INT 26
7891: DOUBLE
7892: EQUAL
7893: IFTRUE 7897
7895: GO 7915
7897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7898: LD_ADDR_VAR 0 3
7902: PUSH
7903: LD_INT 13
7905: PUSH
7906: LD_INT 14
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: ST_TO_ADDR
7913: GO 8232
7915: LD_INT 42
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 7949
7923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7924: LD_ADDR_VAR 0 3
7928: PUSH
7929: LD_INT 21
7931: PUSH
7932: LD_INT 22
7934: PUSH
7935: LD_INT 23
7937: PUSH
7938: LD_INT 24
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: ST_TO_ADDR
7947: GO 8232
7949: LD_INT 43
7951: DOUBLE
7952: EQUAL
7953: IFTRUE 7957
7955: GO 7983
7957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7958: LD_ADDR_VAR 0 3
7962: PUSH
7963: LD_INT 21
7965: PUSH
7966: LD_INT 22
7968: PUSH
7969: LD_INT 23
7971: PUSH
7972: LD_INT 24
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: ST_TO_ADDR
7981: GO 8232
7983: LD_INT 44
7985: DOUBLE
7986: EQUAL
7987: IFTRUE 7991
7989: GO 8017
7991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7992: LD_ADDR_VAR 0 3
7996: PUSH
7997: LD_INT 21
7999: PUSH
8000: LD_INT 22
8002: PUSH
8003: LD_INT 23
8005: PUSH
8006: LD_INT 24
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: ST_TO_ADDR
8015: GO 8232
8017: LD_INT 45
8019: DOUBLE
8020: EQUAL
8021: IFTRUE 8025
8023: GO 8051
8025: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
8026: LD_ADDR_VAR 0 3
8030: PUSH
8031: LD_INT 21
8033: PUSH
8034: LD_INT 22
8036: PUSH
8037: LD_INT 23
8039: PUSH
8040: LD_INT 24
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: ST_TO_ADDR
8049: GO 8232
8051: LD_INT 49
8053: DOUBLE
8054: EQUAL
8055: IFTRUE 8059
8057: GO 8085
8059: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
8060: LD_ADDR_VAR 0 3
8064: PUSH
8065: LD_INT 21
8067: PUSH
8068: LD_INT 22
8070: PUSH
8071: LD_INT 23
8073: PUSH
8074: LD_INT 24
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: ST_TO_ADDR
8083: GO 8232
8085: LD_INT 51
8087: DOUBLE
8088: EQUAL
8089: IFTRUE 8093
8091: GO 8119
8093: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
8094: LD_ADDR_VAR 0 3
8098: PUSH
8099: LD_INT 21
8101: PUSH
8102: LD_INT 22
8104: PUSH
8105: LD_INT 23
8107: PUSH
8108: LD_INT 24
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: ST_TO_ADDR
8117: GO 8232
8119: LD_INT 52
8121: DOUBLE
8122: EQUAL
8123: IFTRUE 8127
8125: GO 8153
8127: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
8128: LD_ADDR_VAR 0 3
8132: PUSH
8133: LD_INT 21
8135: PUSH
8136: LD_INT 22
8138: PUSH
8139: LD_INT 23
8141: PUSH
8142: LD_INT 24
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: ST_TO_ADDR
8151: GO 8232
8153: LD_INT 53
8155: DOUBLE
8156: EQUAL
8157: IFTRUE 8161
8159: GO 8179
8161: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
8162: LD_ADDR_VAR 0 3
8166: PUSH
8167: LD_INT 23
8169: PUSH
8170: LD_INT 24
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: ST_TO_ADDR
8177: GO 8232
8179: LD_INT 46
8181: DOUBLE
8182: EQUAL
8183: IFTRUE 8187
8185: GO 8205
8187: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_INT 23
8195: PUSH
8196: LD_INT 24
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: ST_TO_ADDR
8203: GO 8232
8205: LD_INT 47
8207: DOUBLE
8208: EQUAL
8209: IFTRUE 8213
8211: GO 8231
8213: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
8214: LD_ADDR_VAR 0 3
8218: PUSH
8219: LD_INT 23
8221: PUSH
8222: LD_INT 24
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: ST_TO_ADDR
8229: GO 8232
8231: POP
// result := ( chassis in result ) ;
8232: LD_ADDR_VAR 0 3
8236: PUSH
8237: LD_VAR 0 1
8241: PUSH
8242: LD_VAR 0 3
8246: IN
8247: ST_TO_ADDR
// end ;
8248: LD_VAR 0 3
8252: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
8253: LD_INT 0
8255: PPUSH
8256: PPUSH
8257: PPUSH
8258: PPUSH
8259: PPUSH
8260: PPUSH
8261: PPUSH
// result := array ;
8262: LD_ADDR_VAR 0 5
8266: PUSH
8267: LD_VAR 0 1
8271: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
8272: LD_VAR 0 1
8276: NOT
8277: PUSH
8278: LD_VAR 0 2
8282: NOT
8283: OR
8284: PUSH
8285: LD_VAR 0 3
8289: NOT
8290: OR
8291: PUSH
8292: LD_VAR 0 2
8296: PUSH
8297: LD_VAR 0 1
8301: GREATER
8302: OR
8303: PUSH
8304: LD_VAR 0 3
8308: PUSH
8309: LD_VAR 0 1
8313: GREATER
8314: OR
8315: IFFALSE 8319
// exit ;
8317: GO 8615
// if direction then
8319: LD_VAR 0 4
8323: IFFALSE 8387
// begin d := 1 ;
8325: LD_ADDR_VAR 0 9
8329: PUSH
8330: LD_INT 1
8332: ST_TO_ADDR
// if i_from > i_to then
8333: LD_VAR 0 2
8337: PUSH
8338: LD_VAR 0 3
8342: GREATER
8343: IFFALSE 8369
// length := ( array - i_from ) + i_to else
8345: LD_ADDR_VAR 0 11
8349: PUSH
8350: LD_VAR 0 1
8354: PUSH
8355: LD_VAR 0 2
8359: MINUS
8360: PUSH
8361: LD_VAR 0 3
8365: PLUS
8366: ST_TO_ADDR
8367: GO 8385
// length := i_to - i_from ;
8369: LD_ADDR_VAR 0 11
8373: PUSH
8374: LD_VAR 0 3
8378: PUSH
8379: LD_VAR 0 2
8383: MINUS
8384: ST_TO_ADDR
// end else
8385: GO 8448
// begin d := - 1 ;
8387: LD_ADDR_VAR 0 9
8391: PUSH
8392: LD_INT 1
8394: NEG
8395: ST_TO_ADDR
// if i_from > i_to then
8396: LD_VAR 0 2
8400: PUSH
8401: LD_VAR 0 3
8405: GREATER
8406: IFFALSE 8426
// length := i_from - i_to else
8408: LD_ADDR_VAR 0 11
8412: PUSH
8413: LD_VAR 0 2
8417: PUSH
8418: LD_VAR 0 3
8422: MINUS
8423: ST_TO_ADDR
8424: GO 8448
// length := ( array - i_to ) + i_from ;
8426: LD_ADDR_VAR 0 11
8430: PUSH
8431: LD_VAR 0 1
8435: PUSH
8436: LD_VAR 0 3
8440: MINUS
8441: PUSH
8442: LD_VAR 0 2
8446: PLUS
8447: ST_TO_ADDR
// end ; if not length then
8448: LD_VAR 0 11
8452: NOT
8453: IFFALSE 8457
// exit ;
8455: GO 8615
// tmp := array ;
8457: LD_ADDR_VAR 0 10
8461: PUSH
8462: LD_VAR 0 1
8466: ST_TO_ADDR
// for i = 1 to length do
8467: LD_ADDR_VAR 0 6
8471: PUSH
8472: DOUBLE
8473: LD_INT 1
8475: DEC
8476: ST_TO_ADDR
8477: LD_VAR 0 11
8481: PUSH
8482: FOR_TO
8483: IFFALSE 8603
// begin for j = 1 to array do
8485: LD_ADDR_VAR 0 7
8489: PUSH
8490: DOUBLE
8491: LD_INT 1
8493: DEC
8494: ST_TO_ADDR
8495: LD_VAR 0 1
8499: PUSH
8500: FOR_TO
8501: IFFALSE 8589
// begin k := j + d ;
8503: LD_ADDR_VAR 0 8
8507: PUSH
8508: LD_VAR 0 7
8512: PUSH
8513: LD_VAR 0 9
8517: PLUS
8518: ST_TO_ADDR
// if k > array then
8519: LD_VAR 0 8
8523: PUSH
8524: LD_VAR 0 1
8528: GREATER
8529: IFFALSE 8539
// k := 1 ;
8531: LD_ADDR_VAR 0 8
8535: PUSH
8536: LD_INT 1
8538: ST_TO_ADDR
// if not k then
8539: LD_VAR 0 8
8543: NOT
8544: IFFALSE 8556
// k := array ;
8546: LD_ADDR_VAR 0 8
8550: PUSH
8551: LD_VAR 0 1
8555: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
8556: LD_ADDR_VAR 0 10
8560: PUSH
8561: LD_VAR 0 10
8565: PPUSH
8566: LD_VAR 0 8
8570: PPUSH
8571: LD_VAR 0 1
8575: PUSH
8576: LD_VAR 0 7
8580: ARRAY
8581: PPUSH
8582: CALL_OW 1
8586: ST_TO_ADDR
// end ;
8587: GO 8500
8589: POP
8590: POP
// array := tmp ;
8591: LD_ADDR_VAR 0 1
8595: PUSH
8596: LD_VAR 0 10
8600: ST_TO_ADDR
// end ;
8601: GO 8482
8603: POP
8604: POP
// result := array ;
8605: LD_ADDR_VAR 0 5
8609: PUSH
8610: LD_VAR 0 1
8614: ST_TO_ADDR
// end ;
8615: LD_VAR 0 5
8619: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
8620: LD_INT 0
8622: PPUSH
8623: PPUSH
// result := 0 ;
8624: LD_ADDR_VAR 0 3
8628: PUSH
8629: LD_INT 0
8631: ST_TO_ADDR
// if not array or not value in array then
8632: LD_VAR 0 1
8636: NOT
8637: PUSH
8638: LD_VAR 0 2
8642: PUSH
8643: LD_VAR 0 1
8647: IN
8648: NOT
8649: OR
8650: IFFALSE 8654
// exit ;
8652: GO 8708
// for i = 1 to array do
8654: LD_ADDR_VAR 0 4
8658: PUSH
8659: DOUBLE
8660: LD_INT 1
8662: DEC
8663: ST_TO_ADDR
8664: LD_VAR 0 1
8668: PUSH
8669: FOR_TO
8670: IFFALSE 8706
// if value = array [ i ] then
8672: LD_VAR 0 2
8676: PUSH
8677: LD_VAR 0 1
8681: PUSH
8682: LD_VAR 0 4
8686: ARRAY
8687: EQUAL
8688: IFFALSE 8704
// begin result := i ;
8690: LD_ADDR_VAR 0 3
8694: PUSH
8695: LD_VAR 0 4
8699: ST_TO_ADDR
// exit ;
8700: POP
8701: POP
8702: GO 8708
// end ;
8704: GO 8669
8706: POP
8707: POP
// end ;
8708: LD_VAR 0 3
8712: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8713: LD_INT 0
8715: PPUSH
// vc_chassis := chassis ;
8716: LD_ADDR_OWVAR 37
8720: PUSH
8721: LD_VAR 0 1
8725: ST_TO_ADDR
// vc_engine := engine ;
8726: LD_ADDR_OWVAR 39
8730: PUSH
8731: LD_VAR 0 2
8735: ST_TO_ADDR
// vc_control := control ;
8736: LD_ADDR_OWVAR 38
8740: PUSH
8741: LD_VAR 0 3
8745: ST_TO_ADDR
// vc_weapon := weapon ;
8746: LD_ADDR_OWVAR 40
8750: PUSH
8751: LD_VAR 0 4
8755: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8756: LD_ADDR_OWVAR 41
8760: PUSH
8761: LD_VAR 0 5
8765: ST_TO_ADDR
// end ;
8766: LD_VAR 0 6
8770: RET
// export function WantPlant ( unit ) ; var task ; begin
8771: LD_INT 0
8773: PPUSH
8774: PPUSH
// result := false ;
8775: LD_ADDR_VAR 0 2
8779: PUSH
8780: LD_INT 0
8782: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8783: LD_ADDR_VAR 0 3
8787: PUSH
8788: LD_VAR 0 1
8792: PPUSH
8793: CALL_OW 437
8797: ST_TO_ADDR
// if task then
8798: LD_VAR 0 3
8802: IFFALSE 8830
// if task [ 1 ] [ 1 ] = p then
8804: LD_VAR 0 3
8808: PUSH
8809: LD_INT 1
8811: ARRAY
8812: PUSH
8813: LD_INT 1
8815: ARRAY
8816: PUSH
8817: LD_STRING p
8819: EQUAL
8820: IFFALSE 8830
// result := true ;
8822: LD_ADDR_VAR 0 2
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// end ;
8830: LD_VAR 0 2
8834: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8835: LD_INT 0
8837: PPUSH
8838: PPUSH
8839: PPUSH
8840: PPUSH
// if pos < 1 then
8841: LD_VAR 0 2
8845: PUSH
8846: LD_INT 1
8848: LESS
8849: IFFALSE 8853
// exit ;
8851: GO 9156
// if pos = 1 then
8853: LD_VAR 0 2
8857: PUSH
8858: LD_INT 1
8860: EQUAL
8861: IFFALSE 8894
// result := Replace ( arr , pos [ 1 ] , value ) else
8863: LD_ADDR_VAR 0 4
8867: PUSH
8868: LD_VAR 0 1
8872: PPUSH
8873: LD_VAR 0 2
8877: PUSH
8878: LD_INT 1
8880: ARRAY
8881: PPUSH
8882: LD_VAR 0 3
8886: PPUSH
8887: CALL_OW 1
8891: ST_TO_ADDR
8892: GO 9156
// begin tmp := arr ;
8894: LD_ADDR_VAR 0 6
8898: PUSH
8899: LD_VAR 0 1
8903: ST_TO_ADDR
// s_arr := [ tmp ] ;
8904: LD_ADDR_VAR 0 7
8908: PUSH
8909: LD_VAR 0 6
8913: PUSH
8914: EMPTY
8915: LIST
8916: ST_TO_ADDR
// for i = 1 to pos - 1 do
8917: LD_ADDR_VAR 0 5
8921: PUSH
8922: DOUBLE
8923: LD_INT 1
8925: DEC
8926: ST_TO_ADDR
8927: LD_VAR 0 2
8931: PUSH
8932: LD_INT 1
8934: MINUS
8935: PUSH
8936: FOR_TO
8937: IFFALSE 8982
// begin tmp := tmp [ pos [ i ] ] ;
8939: LD_ADDR_VAR 0 6
8943: PUSH
8944: LD_VAR 0 6
8948: PUSH
8949: LD_VAR 0 2
8953: PUSH
8954: LD_VAR 0 5
8958: ARRAY
8959: ARRAY
8960: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8961: LD_ADDR_VAR 0 7
8965: PUSH
8966: LD_VAR 0 7
8970: PUSH
8971: LD_VAR 0 6
8975: PUSH
8976: EMPTY
8977: LIST
8978: ADD
8979: ST_TO_ADDR
// end ;
8980: GO 8936
8982: POP
8983: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8984: LD_ADDR_VAR 0 6
8988: PUSH
8989: LD_VAR 0 6
8993: PPUSH
8994: LD_VAR 0 2
8998: PUSH
8999: LD_VAR 0 2
9003: ARRAY
9004: PPUSH
9005: LD_VAR 0 3
9009: PPUSH
9010: CALL_OW 1
9014: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
9015: LD_ADDR_VAR 0 7
9019: PUSH
9020: LD_VAR 0 7
9024: PPUSH
9025: LD_VAR 0 7
9029: PPUSH
9030: LD_VAR 0 6
9034: PPUSH
9035: CALL_OW 1
9039: ST_TO_ADDR
// for i = s_arr downto 2 do
9040: LD_ADDR_VAR 0 5
9044: PUSH
9045: DOUBLE
9046: LD_VAR 0 7
9050: INC
9051: ST_TO_ADDR
9052: LD_INT 2
9054: PUSH
9055: FOR_DOWNTO
9056: IFFALSE 9140
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
9058: LD_ADDR_VAR 0 6
9062: PUSH
9063: LD_VAR 0 7
9067: PUSH
9068: LD_VAR 0 5
9072: PUSH
9073: LD_INT 1
9075: MINUS
9076: ARRAY
9077: PPUSH
9078: LD_VAR 0 2
9082: PUSH
9083: LD_VAR 0 5
9087: PUSH
9088: LD_INT 1
9090: MINUS
9091: ARRAY
9092: PPUSH
9093: LD_VAR 0 7
9097: PUSH
9098: LD_VAR 0 5
9102: ARRAY
9103: PPUSH
9104: CALL_OW 1
9108: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
9109: LD_ADDR_VAR 0 7
9113: PUSH
9114: LD_VAR 0 7
9118: PPUSH
9119: LD_VAR 0 5
9123: PUSH
9124: LD_INT 1
9126: MINUS
9127: PPUSH
9128: LD_VAR 0 6
9132: PPUSH
9133: CALL_OW 1
9137: ST_TO_ADDR
// end ;
9138: GO 9055
9140: POP
9141: POP
// result := s_arr [ 1 ] ;
9142: LD_ADDR_VAR 0 4
9146: PUSH
9147: LD_VAR 0 7
9151: PUSH
9152: LD_INT 1
9154: ARRAY
9155: ST_TO_ADDR
// end ; end ;
9156: LD_VAR 0 4
9160: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
9161: LD_INT 0
9163: PPUSH
9164: PPUSH
// if not list then
9165: LD_VAR 0 1
9169: NOT
9170: IFFALSE 9174
// exit ;
9172: GO 9265
// i := list [ pos1 ] ;
9174: LD_ADDR_VAR 0 5
9178: PUSH
9179: LD_VAR 0 1
9183: PUSH
9184: LD_VAR 0 2
9188: ARRAY
9189: ST_TO_ADDR
// if not i then
9190: LD_VAR 0 5
9194: NOT
9195: IFFALSE 9199
// exit ;
9197: GO 9265
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
9199: LD_ADDR_VAR 0 1
9203: PUSH
9204: LD_VAR 0 1
9208: PPUSH
9209: LD_VAR 0 2
9213: PPUSH
9214: LD_VAR 0 1
9218: PUSH
9219: LD_VAR 0 3
9223: ARRAY
9224: PPUSH
9225: CALL_OW 1
9229: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
9230: LD_ADDR_VAR 0 1
9234: PUSH
9235: LD_VAR 0 1
9239: PPUSH
9240: LD_VAR 0 3
9244: PPUSH
9245: LD_VAR 0 5
9249: PPUSH
9250: CALL_OW 1
9254: ST_TO_ADDR
// result := list ;
9255: LD_ADDR_VAR 0 4
9259: PUSH
9260: LD_VAR 0 1
9264: ST_TO_ADDR
// end ;
9265: LD_VAR 0 4
9269: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
9270: LD_INT 0
9272: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
9273: LD_ADDR_VAR 0 5
9277: PUSH
9278: LD_VAR 0 1
9282: PPUSH
9283: CALL_OW 250
9287: PPUSH
9288: LD_VAR 0 1
9292: PPUSH
9293: CALL_OW 251
9297: PPUSH
9298: LD_VAR 0 2
9302: PPUSH
9303: LD_VAR 0 3
9307: PPUSH
9308: LD_VAR 0 4
9312: PPUSH
9313: CALL 9323 0 5
9317: ST_TO_ADDR
// end ;
9318: LD_VAR 0 5
9322: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9323: LD_INT 0
9325: PPUSH
9326: PPUSH
9327: PPUSH
9328: PPUSH
// if not list then
9329: LD_VAR 0 3
9333: NOT
9334: IFFALSE 9338
// exit ;
9336: GO 9726
// result := [ ] ;
9338: LD_ADDR_VAR 0 6
9342: PUSH
9343: EMPTY
9344: ST_TO_ADDR
// for i in list do
9345: LD_ADDR_VAR 0 7
9349: PUSH
9350: LD_VAR 0 3
9354: PUSH
9355: FOR_IN
9356: IFFALSE 9558
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9358: LD_ADDR_VAR 0 9
9362: PUSH
9363: LD_VAR 0 7
9367: PPUSH
9368: LD_VAR 0 1
9372: PPUSH
9373: LD_VAR 0 2
9377: PPUSH
9378: CALL_OW 297
9382: ST_TO_ADDR
// if not result then
9383: LD_VAR 0 6
9387: NOT
9388: IFFALSE 9414
// result := [ [ i , tmp ] ] else
9390: LD_ADDR_VAR 0 6
9394: PUSH
9395: LD_VAR 0 7
9399: PUSH
9400: LD_VAR 0 9
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: EMPTY
9410: LIST
9411: ST_TO_ADDR
9412: GO 9556
// begin if result [ result ] [ 2 ] < tmp then
9414: LD_VAR 0 6
9418: PUSH
9419: LD_VAR 0 6
9423: ARRAY
9424: PUSH
9425: LD_INT 2
9427: ARRAY
9428: PUSH
9429: LD_VAR 0 9
9433: LESS
9434: IFFALSE 9476
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9436: LD_ADDR_VAR 0 6
9440: PUSH
9441: LD_VAR 0 6
9445: PPUSH
9446: LD_VAR 0 6
9450: PUSH
9451: LD_INT 1
9453: PLUS
9454: PPUSH
9455: LD_VAR 0 7
9459: PUSH
9460: LD_VAR 0 9
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PPUSH
9469: CALL_OW 2
9473: ST_TO_ADDR
9474: GO 9556
// for j = 1 to result do
9476: LD_ADDR_VAR 0 8
9480: PUSH
9481: DOUBLE
9482: LD_INT 1
9484: DEC
9485: ST_TO_ADDR
9486: LD_VAR 0 6
9490: PUSH
9491: FOR_TO
9492: IFFALSE 9554
// begin if tmp < result [ j ] [ 2 ] then
9494: LD_VAR 0 9
9498: PUSH
9499: LD_VAR 0 6
9503: PUSH
9504: LD_VAR 0 8
9508: ARRAY
9509: PUSH
9510: LD_INT 2
9512: ARRAY
9513: LESS
9514: IFFALSE 9552
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9516: LD_ADDR_VAR 0 6
9520: PUSH
9521: LD_VAR 0 6
9525: PPUSH
9526: LD_VAR 0 8
9530: PPUSH
9531: LD_VAR 0 7
9535: PUSH
9536: LD_VAR 0 9
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PPUSH
9545: CALL_OW 2
9549: ST_TO_ADDR
// break ;
9550: GO 9554
// end ; end ;
9552: GO 9491
9554: POP
9555: POP
// end ; end ;
9556: GO 9355
9558: POP
9559: POP
// if result and not asc then
9560: LD_VAR 0 6
9564: PUSH
9565: LD_VAR 0 4
9569: NOT
9570: AND
9571: IFFALSE 9646
// begin tmp := result ;
9573: LD_ADDR_VAR 0 9
9577: PUSH
9578: LD_VAR 0 6
9582: ST_TO_ADDR
// for i = tmp downto 1 do
9583: LD_ADDR_VAR 0 7
9587: PUSH
9588: DOUBLE
9589: LD_VAR 0 9
9593: INC
9594: ST_TO_ADDR
9595: LD_INT 1
9597: PUSH
9598: FOR_DOWNTO
9599: IFFALSE 9644
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9601: LD_ADDR_VAR 0 6
9605: PUSH
9606: LD_VAR 0 6
9610: PPUSH
9611: LD_VAR 0 9
9615: PUSH
9616: LD_VAR 0 7
9620: MINUS
9621: PUSH
9622: LD_INT 1
9624: PLUS
9625: PPUSH
9626: LD_VAR 0 9
9630: PUSH
9631: LD_VAR 0 7
9635: ARRAY
9636: PPUSH
9637: CALL_OW 1
9641: ST_TO_ADDR
9642: GO 9598
9644: POP
9645: POP
// end ; tmp := [ ] ;
9646: LD_ADDR_VAR 0 9
9650: PUSH
9651: EMPTY
9652: ST_TO_ADDR
// if mode then
9653: LD_VAR 0 5
9657: IFFALSE 9726
// begin for i = 1 to result do
9659: LD_ADDR_VAR 0 7
9663: PUSH
9664: DOUBLE
9665: LD_INT 1
9667: DEC
9668: ST_TO_ADDR
9669: LD_VAR 0 6
9673: PUSH
9674: FOR_TO
9675: IFFALSE 9714
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9677: LD_ADDR_VAR 0 9
9681: PUSH
9682: LD_VAR 0 9
9686: PPUSH
9687: LD_VAR 0 7
9691: PPUSH
9692: LD_VAR 0 6
9696: PUSH
9697: LD_VAR 0 7
9701: ARRAY
9702: PUSH
9703: LD_INT 1
9705: ARRAY
9706: PPUSH
9707: CALL_OW 1
9711: ST_TO_ADDR
9712: GO 9674
9714: POP
9715: POP
// result := tmp ;
9716: LD_ADDR_VAR 0 6
9720: PUSH
9721: LD_VAR 0 9
9725: ST_TO_ADDR
// end ; end ;
9726: LD_VAR 0 6
9730: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9731: LD_INT 0
9733: PPUSH
9734: PPUSH
9735: PPUSH
9736: PPUSH
9737: PPUSH
9738: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9739: LD_ADDR_VAR 0 5
9743: PUSH
9744: LD_INT 0
9746: PUSH
9747: LD_INT 0
9749: PUSH
9750: LD_INT 0
9752: PUSH
9753: EMPTY
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: ST_TO_ADDR
// if not x or not y then
9761: LD_VAR 0 2
9765: NOT
9766: PUSH
9767: LD_VAR 0 3
9771: NOT
9772: OR
9773: IFFALSE 9777
// exit ;
9775: GO 11429
// if not range then
9777: LD_VAR 0 4
9781: NOT
9782: IFFALSE 9792
// range := 10 ;
9784: LD_ADDR_VAR 0 4
9788: PUSH
9789: LD_INT 10
9791: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9792: LD_ADDR_VAR 0 8
9796: PUSH
9797: LD_INT 81
9799: PUSH
9800: LD_VAR 0 1
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: LD_INT 92
9811: PUSH
9812: LD_VAR 0 2
9816: PUSH
9817: LD_VAR 0 3
9821: PUSH
9822: LD_VAR 0 4
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 3
9835: PUSH
9836: LD_INT 21
9838: PUSH
9839: LD_INT 3
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 69
9859: ST_TO_ADDR
// if not tmp then
9860: LD_VAR 0 8
9864: NOT
9865: IFFALSE 9869
// exit ;
9867: GO 11429
// for i in tmp do
9869: LD_ADDR_VAR 0 6
9873: PUSH
9874: LD_VAR 0 8
9878: PUSH
9879: FOR_IN
9880: IFFALSE 11404
// begin points := [ 0 , 0 , 0 ] ;
9882: LD_ADDR_VAR 0 9
9886: PUSH
9887: LD_INT 0
9889: PUSH
9890: LD_INT 0
9892: PUSH
9893: LD_INT 0
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: LIST
9900: ST_TO_ADDR
// bpoints := 1 ;
9901: LD_ADDR_VAR 0 10
9905: PUSH
9906: LD_INT 1
9908: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9909: LD_VAR 0 6
9913: PPUSH
9914: CALL_OW 247
9918: PUSH
9919: LD_INT 1
9921: DOUBLE
9922: EQUAL
9923: IFTRUE 9927
9925: GO 10505
9927: POP
// begin if GetClass ( i ) = 1 then
9928: LD_VAR 0 6
9932: PPUSH
9933: CALL_OW 257
9937: PUSH
9938: LD_INT 1
9940: EQUAL
9941: IFFALSE 9962
// points := [ 10 , 5 , 3 ] ;
9943: LD_ADDR_VAR 0 9
9947: PUSH
9948: LD_INT 10
9950: PUSH
9951: LD_INT 5
9953: PUSH
9954: LD_INT 3
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9962: LD_VAR 0 6
9966: PPUSH
9967: CALL_OW 257
9971: PUSH
9972: LD_INT 2
9974: PUSH
9975: LD_INT 3
9977: PUSH
9978: LD_INT 4
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: IN
9986: IFFALSE 10007
// points := [ 3 , 2 , 1 ] ;
9988: LD_ADDR_VAR 0 9
9992: PUSH
9993: LD_INT 3
9995: PUSH
9996: LD_INT 2
9998: PUSH
9999: LD_INT 1
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: ST_TO_ADDR
// if GetClass ( i ) = 5 then
10007: LD_VAR 0 6
10011: PPUSH
10012: CALL_OW 257
10016: PUSH
10017: LD_INT 5
10019: EQUAL
10020: IFFALSE 10041
// points := [ 130 , 5 , 2 ] ;
10022: LD_ADDR_VAR 0 9
10026: PUSH
10027: LD_INT 130
10029: PUSH
10030: LD_INT 5
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: ST_TO_ADDR
// if GetClass ( i ) = 8 then
10041: LD_VAR 0 6
10045: PPUSH
10046: CALL_OW 257
10050: PUSH
10051: LD_INT 8
10053: EQUAL
10054: IFFALSE 10075
// points := [ 35 , 35 , 30 ] ;
10056: LD_ADDR_VAR 0 9
10060: PUSH
10061: LD_INT 35
10063: PUSH
10064: LD_INT 35
10066: PUSH
10067: LD_INT 30
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: LIST
10074: ST_TO_ADDR
// if GetClass ( i ) = 9 then
10075: LD_VAR 0 6
10079: PPUSH
10080: CALL_OW 257
10084: PUSH
10085: LD_INT 9
10087: EQUAL
10088: IFFALSE 10109
// points := [ 20 , 55 , 40 ] ;
10090: LD_ADDR_VAR 0 9
10094: PUSH
10095: LD_INT 20
10097: PUSH
10098: LD_INT 55
10100: PUSH
10101: LD_INT 40
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: LIST
10108: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
10109: LD_VAR 0 6
10113: PPUSH
10114: CALL_OW 257
10118: PUSH
10119: LD_INT 12
10121: PUSH
10122: LD_INT 16
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: IN
10129: IFFALSE 10150
// points := [ 5 , 3 , 2 ] ;
10131: LD_ADDR_VAR 0 9
10135: PUSH
10136: LD_INT 5
10138: PUSH
10139: LD_INT 3
10141: PUSH
10142: LD_INT 2
10144: PUSH
10145: EMPTY
10146: LIST
10147: LIST
10148: LIST
10149: ST_TO_ADDR
// if GetClass ( i ) = 17 then
10150: LD_VAR 0 6
10154: PPUSH
10155: CALL_OW 257
10159: PUSH
10160: LD_INT 17
10162: EQUAL
10163: IFFALSE 10184
// points := [ 100 , 50 , 75 ] ;
10165: LD_ADDR_VAR 0 9
10169: PUSH
10170: LD_INT 100
10172: PUSH
10173: LD_INT 50
10175: PUSH
10176: LD_INT 75
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: LIST
10183: ST_TO_ADDR
// if GetClass ( i ) = 15 then
10184: LD_VAR 0 6
10188: PPUSH
10189: CALL_OW 257
10193: PUSH
10194: LD_INT 15
10196: EQUAL
10197: IFFALSE 10218
// points := [ 10 , 5 , 3 ] ;
10199: LD_ADDR_VAR 0 9
10203: PUSH
10204: LD_INT 10
10206: PUSH
10207: LD_INT 5
10209: PUSH
10210: LD_INT 3
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: LIST
10217: ST_TO_ADDR
// if GetClass ( i ) = 14 then
10218: LD_VAR 0 6
10222: PPUSH
10223: CALL_OW 257
10227: PUSH
10228: LD_INT 14
10230: EQUAL
10231: IFFALSE 10252
// points := [ 10 , 0 , 0 ] ;
10233: LD_ADDR_VAR 0 9
10237: PUSH
10238: LD_INT 10
10240: PUSH
10241: LD_INT 0
10243: PUSH
10244: LD_INT 0
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: ST_TO_ADDR
// if GetClass ( i ) = 11 then
10252: LD_VAR 0 6
10256: PPUSH
10257: CALL_OW 257
10261: PUSH
10262: LD_INT 11
10264: EQUAL
10265: IFFALSE 10286
// points := [ 30 , 10 , 5 ] ;
10267: LD_ADDR_VAR 0 9
10271: PUSH
10272: LD_INT 30
10274: PUSH
10275: LD_INT 10
10277: PUSH
10278: LD_INT 5
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: LIST
10285: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
10286: LD_VAR 0 1
10290: PPUSH
10291: LD_INT 5
10293: PPUSH
10294: CALL_OW 321
10298: PUSH
10299: LD_INT 2
10301: EQUAL
10302: IFFALSE 10319
// bpoints := bpoints * 1.8 ;
10304: LD_ADDR_VAR 0 10
10308: PUSH
10309: LD_VAR 0 10
10313: PUSH
10314: LD_REAL  1.80000000000000E+0000
10317: MUL
10318: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10319: LD_VAR 0 6
10323: PPUSH
10324: CALL_OW 257
10328: PUSH
10329: LD_INT 1
10331: PUSH
10332: LD_INT 2
10334: PUSH
10335: LD_INT 3
10337: PUSH
10338: LD_INT 4
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: IN
10347: PUSH
10348: LD_VAR 0 1
10352: PPUSH
10353: LD_INT 51
10355: PPUSH
10356: CALL_OW 321
10360: PUSH
10361: LD_INT 2
10363: EQUAL
10364: AND
10365: IFFALSE 10382
// bpoints := bpoints * 1.2 ;
10367: LD_ADDR_VAR 0 10
10371: PUSH
10372: LD_VAR 0 10
10376: PUSH
10377: LD_REAL  1.20000000000000E+0000
10380: MUL
10381: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10382: LD_VAR 0 6
10386: PPUSH
10387: CALL_OW 257
10391: PUSH
10392: LD_INT 5
10394: PUSH
10395: LD_INT 7
10397: PUSH
10398: LD_INT 9
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: LIST
10405: IN
10406: PUSH
10407: LD_VAR 0 1
10411: PPUSH
10412: LD_INT 52
10414: PPUSH
10415: CALL_OW 321
10419: PUSH
10420: LD_INT 2
10422: EQUAL
10423: AND
10424: IFFALSE 10441
// bpoints := bpoints * 1.5 ;
10426: LD_ADDR_VAR 0 10
10430: PUSH
10431: LD_VAR 0 10
10435: PUSH
10436: LD_REAL  1.50000000000000E+0000
10439: MUL
10440: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10441: LD_VAR 0 1
10445: PPUSH
10446: LD_INT 66
10448: PPUSH
10449: CALL_OW 321
10453: PUSH
10454: LD_INT 2
10456: EQUAL
10457: IFFALSE 10474
// bpoints := bpoints * 1.1 ;
10459: LD_ADDR_VAR 0 10
10463: PUSH
10464: LD_VAR 0 10
10468: PUSH
10469: LD_REAL  1.10000000000000E+0000
10472: MUL
10473: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10474: LD_ADDR_VAR 0 10
10478: PUSH
10479: LD_VAR 0 10
10483: PUSH
10484: LD_VAR 0 6
10488: PPUSH
10489: LD_INT 1
10491: PPUSH
10492: CALL_OW 259
10496: PUSH
10497: LD_REAL  1.15000000000000E+0000
10500: MUL
10501: MUL
10502: ST_TO_ADDR
// end ; unit_vehicle :
10503: GO 11333
10505: LD_INT 2
10507: DOUBLE
10508: EQUAL
10509: IFTRUE 10513
10511: GO 11321
10513: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10514: LD_VAR 0 6
10518: PPUSH
10519: CALL_OW 264
10523: PUSH
10524: LD_INT 2
10526: PUSH
10527: LD_INT 42
10529: PUSH
10530: LD_INT 24
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: LIST
10537: IN
10538: IFFALSE 10559
// points := [ 25 , 5 , 3 ] ;
10540: LD_ADDR_VAR 0 9
10544: PUSH
10545: LD_INT 25
10547: PUSH
10548: LD_INT 5
10550: PUSH
10551: LD_INT 3
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10559: LD_VAR 0 6
10563: PPUSH
10564: CALL_OW 264
10568: PUSH
10569: LD_INT 4
10571: PUSH
10572: LD_INT 43
10574: PUSH
10575: LD_INT 25
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: IN
10583: IFFALSE 10604
// points := [ 40 , 15 , 5 ] ;
10585: LD_ADDR_VAR 0 9
10589: PUSH
10590: LD_INT 40
10592: PUSH
10593: LD_INT 15
10595: PUSH
10596: LD_INT 5
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: LIST
10603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10604: LD_VAR 0 6
10608: PPUSH
10609: CALL_OW 264
10613: PUSH
10614: LD_INT 3
10616: PUSH
10617: LD_INT 23
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: IN
10624: IFFALSE 10645
// points := [ 7 , 25 , 8 ] ;
10626: LD_ADDR_VAR 0 9
10630: PUSH
10631: LD_INT 7
10633: PUSH
10634: LD_INT 25
10636: PUSH
10637: LD_INT 8
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10645: LD_VAR 0 6
10649: PPUSH
10650: CALL_OW 264
10654: PUSH
10655: LD_INT 5
10657: PUSH
10658: LD_INT 27
10660: PUSH
10661: LD_INT 44
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: IN
10669: IFFALSE 10690
// points := [ 14 , 50 , 16 ] ;
10671: LD_ADDR_VAR 0 9
10675: PUSH
10676: LD_INT 14
10678: PUSH
10679: LD_INT 50
10681: PUSH
10682: LD_INT 16
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: LIST
10689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10690: LD_VAR 0 6
10694: PPUSH
10695: CALL_OW 264
10699: PUSH
10700: LD_INT 6
10702: PUSH
10703: LD_INT 46
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: IN
10710: IFFALSE 10731
// points := [ 32 , 120 , 70 ] ;
10712: LD_ADDR_VAR 0 9
10716: PUSH
10717: LD_INT 32
10719: PUSH
10720: LD_INT 120
10722: PUSH
10723: LD_INT 70
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: LIST
10730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10731: LD_VAR 0 6
10735: PPUSH
10736: CALL_OW 264
10740: PUSH
10741: LD_INT 7
10743: PUSH
10744: LD_INT 28
10746: PUSH
10747: LD_INT 45
10749: PUSH
10750: LD_EXP 50
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: IN
10761: IFFALSE 10782
// points := [ 35 , 20 , 45 ] ;
10763: LD_ADDR_VAR 0 9
10767: PUSH
10768: LD_INT 35
10770: PUSH
10771: LD_INT 20
10773: PUSH
10774: LD_INT 45
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10782: LD_VAR 0 6
10786: PPUSH
10787: CALL_OW 264
10791: PUSH
10792: LD_INT 47
10794: PUSH
10795: EMPTY
10796: LIST
10797: IN
10798: IFFALSE 10819
// points := [ 67 , 45 , 75 ] ;
10800: LD_ADDR_VAR 0 9
10804: PUSH
10805: LD_INT 67
10807: PUSH
10808: LD_INT 45
10810: PUSH
10811: LD_INT 75
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: LIST
10818: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10819: LD_VAR 0 6
10823: PPUSH
10824: CALL_OW 264
10828: PUSH
10829: LD_INT 26
10831: PUSH
10832: EMPTY
10833: LIST
10834: IN
10835: IFFALSE 10856
// points := [ 120 , 30 , 80 ] ;
10837: LD_ADDR_VAR 0 9
10841: PUSH
10842: LD_INT 120
10844: PUSH
10845: LD_INT 30
10847: PUSH
10848: LD_INT 80
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10856: LD_VAR 0 6
10860: PPUSH
10861: CALL_OW 264
10865: PUSH
10866: LD_INT 22
10868: PUSH
10869: EMPTY
10870: LIST
10871: IN
10872: IFFALSE 10893
// points := [ 40 , 1 , 1 ] ;
10874: LD_ADDR_VAR 0 9
10878: PUSH
10879: LD_INT 40
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: LD_INT 1
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: LIST
10892: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10893: LD_VAR 0 6
10897: PPUSH
10898: CALL_OW 264
10902: PUSH
10903: LD_INT 29
10905: PUSH
10906: EMPTY
10907: LIST
10908: IN
10909: IFFALSE 10930
// points := [ 70 , 200 , 400 ] ;
10911: LD_ADDR_VAR 0 9
10915: PUSH
10916: LD_INT 70
10918: PUSH
10919: LD_INT 200
10921: PUSH
10922: LD_INT 400
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10930: LD_VAR 0 6
10934: PPUSH
10935: CALL_OW 264
10939: PUSH
10940: LD_INT 14
10942: PUSH
10943: LD_INT 53
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: IN
10950: IFFALSE 10971
// points := [ 40 , 10 , 20 ] ;
10952: LD_ADDR_VAR 0 9
10956: PUSH
10957: LD_INT 40
10959: PUSH
10960: LD_INT 10
10962: PUSH
10963: LD_INT 20
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10971: LD_VAR 0 6
10975: PPUSH
10976: CALL_OW 264
10980: PUSH
10981: LD_INT 9
10983: PUSH
10984: EMPTY
10985: LIST
10986: IN
10987: IFFALSE 11008
// points := [ 5 , 70 , 20 ] ;
10989: LD_ADDR_VAR 0 9
10993: PUSH
10994: LD_INT 5
10996: PUSH
10997: LD_INT 70
10999: PUSH
11000: LD_INT 20
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
11008: LD_VAR 0 6
11012: PPUSH
11013: CALL_OW 264
11017: PUSH
11018: LD_INT 10
11020: PUSH
11021: EMPTY
11022: LIST
11023: IN
11024: IFFALSE 11045
// points := [ 35 , 110 , 70 ] ;
11026: LD_ADDR_VAR 0 9
11030: PUSH
11031: LD_INT 35
11033: PUSH
11034: LD_INT 110
11036: PUSH
11037: LD_INT 70
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: LIST
11044: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
11045: LD_VAR 0 6
11049: PPUSH
11050: CALL_OW 265
11054: PUSH
11055: LD_INT 25
11057: EQUAL
11058: IFFALSE 11079
// points := [ 80 , 65 , 100 ] ;
11060: LD_ADDR_VAR 0 9
11064: PUSH
11065: LD_INT 80
11067: PUSH
11068: LD_INT 65
11070: PUSH
11071: LD_INT 100
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: LIST
11078: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
11079: LD_VAR 0 6
11083: PPUSH
11084: CALL_OW 263
11088: PUSH
11089: LD_INT 1
11091: EQUAL
11092: IFFALSE 11127
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
11094: LD_ADDR_VAR 0 10
11098: PUSH
11099: LD_VAR 0 10
11103: PUSH
11104: LD_VAR 0 6
11108: PPUSH
11109: CALL_OW 311
11113: PPUSH
11114: LD_INT 3
11116: PPUSH
11117: CALL_OW 259
11121: PUSH
11122: LD_INT 4
11124: MUL
11125: MUL
11126: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
11127: LD_VAR 0 6
11131: PPUSH
11132: CALL_OW 263
11136: PUSH
11137: LD_INT 2
11139: EQUAL
11140: IFFALSE 11191
// begin j := IsControledBy ( i ) ;
11142: LD_ADDR_VAR 0 7
11146: PUSH
11147: LD_VAR 0 6
11151: PPUSH
11152: CALL_OW 312
11156: ST_TO_ADDR
// if j then
11157: LD_VAR 0 7
11161: IFFALSE 11191
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
11163: LD_ADDR_VAR 0 10
11167: PUSH
11168: LD_VAR 0 10
11172: PUSH
11173: LD_VAR 0 7
11177: PPUSH
11178: LD_INT 3
11180: PPUSH
11181: CALL_OW 259
11185: PUSH
11186: LD_INT 3
11188: MUL
11189: MUL
11190: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
11191: LD_VAR 0 6
11195: PPUSH
11196: CALL_OW 264
11200: PUSH
11201: LD_INT 5
11203: PUSH
11204: LD_INT 6
11206: PUSH
11207: LD_INT 46
11209: PUSH
11210: LD_INT 44
11212: PUSH
11213: LD_INT 47
11215: PUSH
11216: LD_INT 45
11218: PUSH
11219: LD_INT 28
11221: PUSH
11222: LD_INT 7
11224: PUSH
11225: LD_INT 27
11227: PUSH
11228: LD_INT 29
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: IN
11243: PUSH
11244: LD_VAR 0 1
11248: PPUSH
11249: LD_INT 52
11251: PPUSH
11252: CALL_OW 321
11256: PUSH
11257: LD_INT 2
11259: EQUAL
11260: AND
11261: IFFALSE 11278
// bpoints := bpoints * 1.2 ;
11263: LD_ADDR_VAR 0 10
11267: PUSH
11268: LD_VAR 0 10
11272: PUSH
11273: LD_REAL  1.20000000000000E+0000
11276: MUL
11277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
11278: LD_VAR 0 6
11282: PPUSH
11283: CALL_OW 264
11287: PUSH
11288: LD_INT 6
11290: PUSH
11291: LD_INT 46
11293: PUSH
11294: LD_INT 47
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: IN
11302: IFFALSE 11319
// bpoints := bpoints * 1.2 ;
11304: LD_ADDR_VAR 0 10
11308: PUSH
11309: LD_VAR 0 10
11313: PUSH
11314: LD_REAL  1.20000000000000E+0000
11317: MUL
11318: ST_TO_ADDR
// end ; unit_building :
11319: GO 11333
11321: LD_INT 3
11323: DOUBLE
11324: EQUAL
11325: IFTRUE 11329
11327: GO 11332
11329: POP
// ; end ;
11330: GO 11333
11332: POP
// for j = 1 to 3 do
11333: LD_ADDR_VAR 0 7
11337: PUSH
11338: DOUBLE
11339: LD_INT 1
11341: DEC
11342: ST_TO_ADDR
11343: LD_INT 3
11345: PUSH
11346: FOR_TO
11347: IFFALSE 11400
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11349: LD_ADDR_VAR 0 5
11353: PUSH
11354: LD_VAR 0 5
11358: PPUSH
11359: LD_VAR 0 7
11363: PPUSH
11364: LD_VAR 0 5
11368: PUSH
11369: LD_VAR 0 7
11373: ARRAY
11374: PUSH
11375: LD_VAR 0 9
11379: PUSH
11380: LD_VAR 0 7
11384: ARRAY
11385: PUSH
11386: LD_VAR 0 10
11390: MUL
11391: PLUS
11392: PPUSH
11393: CALL_OW 1
11397: ST_TO_ADDR
11398: GO 11346
11400: POP
11401: POP
// end ;
11402: GO 9879
11404: POP
11405: POP
// result := Replace ( result , 4 , tmp ) ;
11406: LD_ADDR_VAR 0 5
11410: PUSH
11411: LD_VAR 0 5
11415: PPUSH
11416: LD_INT 4
11418: PPUSH
11419: LD_VAR 0 8
11423: PPUSH
11424: CALL_OW 1
11428: ST_TO_ADDR
// end ;
11429: LD_VAR 0 5
11433: RET
// export function DangerAtRange ( unit , range ) ; begin
11434: LD_INT 0
11436: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11437: LD_ADDR_VAR 0 3
11441: PUSH
11442: LD_VAR 0 1
11446: PPUSH
11447: CALL_OW 255
11451: PPUSH
11452: LD_VAR 0 1
11456: PPUSH
11457: CALL_OW 250
11461: PPUSH
11462: LD_VAR 0 1
11466: PPUSH
11467: CALL_OW 251
11471: PPUSH
11472: LD_VAR 0 2
11476: PPUSH
11477: CALL 9731 0 4
11481: ST_TO_ADDR
// end ;
11482: LD_VAR 0 3
11486: RET
// export function DangerInArea ( side , area ) ; begin
11487: LD_INT 0
11489: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11490: LD_ADDR_VAR 0 3
11494: PUSH
11495: LD_VAR 0 2
11499: PPUSH
11500: LD_INT 81
11502: PUSH
11503: LD_VAR 0 1
11507: PUSH
11508: EMPTY
11509: LIST
11510: LIST
11511: PPUSH
11512: CALL_OW 70
11516: ST_TO_ADDR
// end ;
11517: LD_VAR 0 3
11521: RET
// export function IsExtension ( b ) ; begin
11522: LD_INT 0
11524: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11525: LD_ADDR_VAR 0 2
11529: PUSH
11530: LD_VAR 0 1
11534: PUSH
11535: LD_INT 23
11537: PUSH
11538: LD_INT 20
11540: PUSH
11541: LD_INT 22
11543: PUSH
11544: LD_INT 17
11546: PUSH
11547: LD_INT 24
11549: PUSH
11550: LD_INT 21
11552: PUSH
11553: LD_INT 19
11555: PUSH
11556: LD_INT 16
11558: PUSH
11559: LD_INT 25
11561: PUSH
11562: LD_INT 18
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: IN
11577: ST_TO_ADDR
// end ;
11578: LD_VAR 0 2
11582: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11583: LD_INT 0
11585: PPUSH
11586: PPUSH
11587: PPUSH
// result := [ ] ;
11588: LD_ADDR_VAR 0 4
11592: PUSH
11593: EMPTY
11594: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11595: LD_ADDR_VAR 0 5
11599: PUSH
11600: LD_VAR 0 2
11604: PPUSH
11605: LD_INT 21
11607: PUSH
11608: LD_INT 3
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PPUSH
11615: CALL_OW 70
11619: ST_TO_ADDR
// if not tmp then
11620: LD_VAR 0 5
11624: NOT
11625: IFFALSE 11629
// exit ;
11627: GO 11693
// if checkLink then
11629: LD_VAR 0 3
11633: IFFALSE 11683
// begin for i in tmp do
11635: LD_ADDR_VAR 0 6
11639: PUSH
11640: LD_VAR 0 5
11644: PUSH
11645: FOR_IN
11646: IFFALSE 11681
// if GetBase ( i ) <> base then
11648: LD_VAR 0 6
11652: PPUSH
11653: CALL_OW 274
11657: PUSH
11658: LD_VAR 0 1
11662: NONEQUAL
11663: IFFALSE 11679
// ComLinkToBase ( base , i ) ;
11665: LD_VAR 0 1
11669: PPUSH
11670: LD_VAR 0 6
11674: PPUSH
11675: CALL_OW 169
11679: GO 11645
11681: POP
11682: POP
// end ; result := tmp ;
11683: LD_ADDR_VAR 0 4
11687: PUSH
11688: LD_VAR 0 5
11692: ST_TO_ADDR
// end ;
11693: LD_VAR 0 4
11697: RET
// export function ComComplete ( units , b ) ; var i ; begin
11698: LD_INT 0
11700: PPUSH
11701: PPUSH
// if not units then
11702: LD_VAR 0 1
11706: NOT
11707: IFFALSE 11711
// exit ;
11709: GO 11801
// for i in units do
11711: LD_ADDR_VAR 0 4
11715: PUSH
11716: LD_VAR 0 1
11720: PUSH
11721: FOR_IN
11722: IFFALSE 11799
// if BuildingStatus ( b ) = bs_build then
11724: LD_VAR 0 2
11728: PPUSH
11729: CALL_OW 461
11733: PUSH
11734: LD_INT 1
11736: EQUAL
11737: IFFALSE 11797
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11739: LD_VAR 0 4
11743: PPUSH
11744: LD_STRING h
11746: PUSH
11747: LD_VAR 0 2
11751: PPUSH
11752: CALL_OW 250
11756: PUSH
11757: LD_VAR 0 2
11761: PPUSH
11762: CALL_OW 251
11766: PUSH
11767: LD_VAR 0 2
11771: PUSH
11772: LD_INT 0
11774: PUSH
11775: LD_INT 0
11777: PUSH
11778: LD_INT 0
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: PPUSH
11793: CALL_OW 446
11797: GO 11721
11799: POP
11800: POP
// end ;
11801: LD_VAR 0 3
11805: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11806: LD_INT 0
11808: PPUSH
11809: PPUSH
11810: PPUSH
11811: PPUSH
11812: PPUSH
11813: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11814: LD_VAR 0 1
11818: NOT
11819: PUSH
11820: LD_VAR 0 1
11824: PPUSH
11825: CALL_OW 263
11829: PUSH
11830: LD_INT 2
11832: NONEQUAL
11833: OR
11834: IFFALSE 11838
// exit ;
11836: GO 12154
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11838: LD_ADDR_VAR 0 6
11842: PUSH
11843: LD_INT 22
11845: PUSH
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 255
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 2
11862: PUSH
11863: LD_INT 30
11865: PUSH
11866: LD_INT 36
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 34
11875: PUSH
11876: LD_INT 31
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PPUSH
11892: CALL_OW 69
11896: ST_TO_ADDR
// if not tmp then
11897: LD_VAR 0 6
11901: NOT
11902: IFFALSE 11906
// exit ;
11904: GO 12154
// result := [ ] ;
11906: LD_ADDR_VAR 0 2
11910: PUSH
11911: EMPTY
11912: ST_TO_ADDR
// for i in tmp do
11913: LD_ADDR_VAR 0 3
11917: PUSH
11918: LD_VAR 0 6
11922: PUSH
11923: FOR_IN
11924: IFFALSE 11995
// begin t := UnitsInside ( i ) ;
11926: LD_ADDR_VAR 0 4
11930: PUSH
11931: LD_VAR 0 3
11935: PPUSH
11936: CALL_OW 313
11940: ST_TO_ADDR
// if t then
11941: LD_VAR 0 4
11945: IFFALSE 11993
// for j in t do
11947: LD_ADDR_VAR 0 7
11951: PUSH
11952: LD_VAR 0 4
11956: PUSH
11957: FOR_IN
11958: IFFALSE 11991
// result := Replace ( result , result + 1 , j ) ;
11960: LD_ADDR_VAR 0 2
11964: PUSH
11965: LD_VAR 0 2
11969: PPUSH
11970: LD_VAR 0 2
11974: PUSH
11975: LD_INT 1
11977: PLUS
11978: PPUSH
11979: LD_VAR 0 7
11983: PPUSH
11984: CALL_OW 1
11988: ST_TO_ADDR
11989: GO 11957
11991: POP
11992: POP
// end ;
11993: GO 11923
11995: POP
11996: POP
// if not result then
11997: LD_VAR 0 2
12001: NOT
12002: IFFALSE 12006
// exit ;
12004: GO 12154
// mech := result [ 1 ] ;
12006: LD_ADDR_VAR 0 5
12010: PUSH
12011: LD_VAR 0 2
12015: PUSH
12016: LD_INT 1
12018: ARRAY
12019: ST_TO_ADDR
// if result > 1 then
12020: LD_VAR 0 2
12024: PUSH
12025: LD_INT 1
12027: GREATER
12028: IFFALSE 12140
// begin for i = 2 to result do
12030: LD_ADDR_VAR 0 3
12034: PUSH
12035: DOUBLE
12036: LD_INT 2
12038: DEC
12039: ST_TO_ADDR
12040: LD_VAR 0 2
12044: PUSH
12045: FOR_TO
12046: IFFALSE 12138
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
12048: LD_ADDR_VAR 0 4
12052: PUSH
12053: LD_VAR 0 2
12057: PUSH
12058: LD_VAR 0 3
12062: ARRAY
12063: PPUSH
12064: LD_INT 3
12066: PPUSH
12067: CALL_OW 259
12071: PUSH
12072: LD_VAR 0 2
12076: PUSH
12077: LD_VAR 0 3
12081: ARRAY
12082: PPUSH
12083: CALL_OW 432
12087: MINUS
12088: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
12089: LD_VAR 0 4
12093: PUSH
12094: LD_VAR 0 5
12098: PPUSH
12099: LD_INT 3
12101: PPUSH
12102: CALL_OW 259
12106: PUSH
12107: LD_VAR 0 5
12111: PPUSH
12112: CALL_OW 432
12116: MINUS
12117: GREATEREQUAL
12118: IFFALSE 12136
// mech := result [ i ] ;
12120: LD_ADDR_VAR 0 5
12124: PUSH
12125: LD_VAR 0 2
12129: PUSH
12130: LD_VAR 0 3
12134: ARRAY
12135: ST_TO_ADDR
// end ;
12136: GO 12045
12138: POP
12139: POP
// end ; ComLinkTo ( vehicle , mech ) ;
12140: LD_VAR 0 1
12144: PPUSH
12145: LD_VAR 0 5
12149: PPUSH
12150: CALL_OW 135
// end ;
12154: LD_VAR 0 2
12158: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
12159: LD_INT 0
12161: PPUSH
12162: PPUSH
12163: PPUSH
12164: PPUSH
12165: PPUSH
12166: PPUSH
12167: PPUSH
12168: PPUSH
12169: PPUSH
12170: PPUSH
12171: PPUSH
12172: PPUSH
12173: PPUSH
// result := [ ] ;
12174: LD_ADDR_VAR 0 7
12178: PUSH
12179: EMPTY
12180: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
12181: LD_VAR 0 1
12185: PPUSH
12186: CALL_OW 266
12190: PUSH
12191: LD_INT 0
12193: PUSH
12194: LD_INT 1
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: IN
12201: NOT
12202: IFFALSE 12206
// exit ;
12204: GO 13840
// if name then
12206: LD_VAR 0 3
12210: IFFALSE 12226
// SetBName ( base_dep , name ) ;
12212: LD_VAR 0 1
12216: PPUSH
12217: LD_VAR 0 3
12221: PPUSH
12222: CALL_OW 500
// base := GetBase ( base_dep ) ;
12226: LD_ADDR_VAR 0 15
12230: PUSH
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL_OW 274
12240: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
12241: LD_ADDR_VAR 0 16
12245: PUSH
12246: LD_VAR 0 1
12250: PPUSH
12251: CALL_OW 255
12255: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
12256: LD_ADDR_VAR 0 17
12260: PUSH
12261: LD_VAR 0 1
12265: PPUSH
12266: CALL_OW 248
12270: ST_TO_ADDR
// if sources then
12271: LD_VAR 0 5
12275: IFFALSE 12322
// for i = 1 to 3 do
12277: LD_ADDR_VAR 0 8
12281: PUSH
12282: DOUBLE
12283: LD_INT 1
12285: DEC
12286: ST_TO_ADDR
12287: LD_INT 3
12289: PUSH
12290: FOR_TO
12291: IFFALSE 12320
// AddResourceType ( base , i , sources [ i ] ) ;
12293: LD_VAR 0 15
12297: PPUSH
12298: LD_VAR 0 8
12302: PPUSH
12303: LD_VAR 0 5
12307: PUSH
12308: LD_VAR 0 8
12312: ARRAY
12313: PPUSH
12314: CALL_OW 276
12318: GO 12290
12320: POP
12321: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12322: LD_ADDR_VAR 0 18
12326: PUSH
12327: LD_VAR 0 15
12331: PPUSH
12332: LD_VAR 0 2
12336: PPUSH
12337: LD_INT 1
12339: PPUSH
12340: CALL 11583 0 3
12344: ST_TO_ADDR
// InitHc ;
12345: CALL_OW 19
// InitUc ;
12349: CALL_OW 18
// uc_side := side ;
12353: LD_ADDR_OWVAR 20
12357: PUSH
12358: LD_VAR 0 16
12362: ST_TO_ADDR
// uc_nation := nation ;
12363: LD_ADDR_OWVAR 21
12367: PUSH
12368: LD_VAR 0 17
12372: ST_TO_ADDR
// if buildings then
12373: LD_VAR 0 18
12377: IFFALSE 13699
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12379: LD_ADDR_VAR 0 19
12383: PUSH
12384: LD_VAR 0 18
12388: PPUSH
12389: LD_INT 2
12391: PUSH
12392: LD_INT 30
12394: PUSH
12395: LD_INT 29
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 30
12404: PUSH
12405: LD_INT 30
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: PPUSH
12417: CALL_OW 72
12421: ST_TO_ADDR
// if tmp then
12422: LD_VAR 0 19
12426: IFFALSE 12474
// for i in tmp do
12428: LD_ADDR_VAR 0 8
12432: PUSH
12433: LD_VAR 0 19
12437: PUSH
12438: FOR_IN
12439: IFFALSE 12472
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12441: LD_VAR 0 8
12445: PPUSH
12446: CALL_OW 250
12450: PPUSH
12451: LD_VAR 0 8
12455: PPUSH
12456: CALL_OW 251
12460: PPUSH
12461: LD_VAR 0 16
12465: PPUSH
12466: CALL_OW 441
12470: GO 12438
12472: POP
12473: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12474: LD_VAR 0 18
12478: PPUSH
12479: LD_INT 2
12481: PUSH
12482: LD_INT 30
12484: PUSH
12485: LD_INT 32
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 30
12494: PUSH
12495: LD_INT 33
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 72
12511: IFFALSE 12599
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12513: LD_ADDR_VAR 0 8
12517: PUSH
12518: LD_VAR 0 18
12522: PPUSH
12523: LD_INT 2
12525: PUSH
12526: LD_INT 30
12528: PUSH
12529: LD_INT 32
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 30
12538: PUSH
12539: LD_INT 33
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 72
12555: PUSH
12556: FOR_IN
12557: IFFALSE 12597
// begin if not GetBWeapon ( i ) then
12559: LD_VAR 0 8
12563: PPUSH
12564: CALL_OW 269
12568: NOT
12569: IFFALSE 12595
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12571: LD_VAR 0 8
12575: PPUSH
12576: LD_VAR 0 8
12580: PPUSH
12581: LD_VAR 0 2
12585: PPUSH
12586: CALL 13845 0 2
12590: PPUSH
12591: CALL_OW 431
// end ;
12595: GO 12556
12597: POP
12598: POP
// end ; for i = 1 to personel do
12599: LD_ADDR_VAR 0 8
12603: PUSH
12604: DOUBLE
12605: LD_INT 1
12607: DEC
12608: ST_TO_ADDR
12609: LD_VAR 0 6
12613: PUSH
12614: FOR_TO
12615: IFFALSE 13679
// begin if i > 4 then
12617: LD_VAR 0 8
12621: PUSH
12622: LD_INT 4
12624: GREATER
12625: IFFALSE 12629
// break ;
12627: GO 13679
// case i of 1 :
12629: LD_VAR 0 8
12633: PUSH
12634: LD_INT 1
12636: DOUBLE
12637: EQUAL
12638: IFTRUE 12642
12640: GO 12722
12642: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12643: LD_ADDR_VAR 0 12
12647: PUSH
12648: LD_VAR 0 18
12652: PPUSH
12653: LD_INT 22
12655: PUSH
12656: LD_VAR 0 16
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PUSH
12665: LD_INT 58
12667: PUSH
12668: EMPTY
12669: LIST
12670: PUSH
12671: LD_INT 2
12673: PUSH
12674: LD_INT 30
12676: PUSH
12677: LD_INT 32
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 30
12686: PUSH
12687: LD_INT 4
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 30
12696: PUSH
12697: LD_INT 5
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: LIST
12714: PPUSH
12715: CALL_OW 72
12719: ST_TO_ADDR
12720: GO 12944
12722: LD_INT 2
12724: DOUBLE
12725: EQUAL
12726: IFTRUE 12730
12728: GO 12792
12730: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12731: LD_ADDR_VAR 0 12
12735: PUSH
12736: LD_VAR 0 18
12740: PPUSH
12741: LD_INT 22
12743: PUSH
12744: LD_VAR 0 16
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 2
12755: PUSH
12756: LD_INT 30
12758: PUSH
12759: LD_INT 0
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 30
12768: PUSH
12769: LD_INT 1
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PPUSH
12785: CALL_OW 72
12789: ST_TO_ADDR
12790: GO 12944
12792: LD_INT 3
12794: DOUBLE
12795: EQUAL
12796: IFTRUE 12800
12798: GO 12862
12800: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12801: LD_ADDR_VAR 0 12
12805: PUSH
12806: LD_VAR 0 18
12810: PPUSH
12811: LD_INT 22
12813: PUSH
12814: LD_VAR 0 16
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 2
12825: PUSH
12826: LD_INT 30
12828: PUSH
12829: LD_INT 2
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 30
12838: PUSH
12839: LD_INT 3
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: LIST
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PPUSH
12855: CALL_OW 72
12859: ST_TO_ADDR
12860: GO 12944
12862: LD_INT 4
12864: DOUBLE
12865: EQUAL
12866: IFTRUE 12870
12868: GO 12943
12870: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12871: LD_ADDR_VAR 0 12
12875: PUSH
12876: LD_VAR 0 18
12880: PPUSH
12881: LD_INT 22
12883: PUSH
12884: LD_VAR 0 16
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: LD_INT 30
12898: PUSH
12899: LD_INT 6
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 30
12908: PUSH
12909: LD_INT 7
12911: PUSH
12912: EMPTY
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 30
12918: PUSH
12919: LD_INT 8
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: PPUSH
12936: CALL_OW 72
12940: ST_TO_ADDR
12941: GO 12944
12943: POP
// if i = 1 then
12944: LD_VAR 0 8
12948: PUSH
12949: LD_INT 1
12951: EQUAL
12952: IFFALSE 13063
// begin tmp := [ ] ;
12954: LD_ADDR_VAR 0 19
12958: PUSH
12959: EMPTY
12960: ST_TO_ADDR
// for j in f do
12961: LD_ADDR_VAR 0 9
12965: PUSH
12966: LD_VAR 0 12
12970: PUSH
12971: FOR_IN
12972: IFFALSE 13045
// if GetBType ( j ) = b_bunker then
12974: LD_VAR 0 9
12978: PPUSH
12979: CALL_OW 266
12983: PUSH
12984: LD_INT 32
12986: EQUAL
12987: IFFALSE 13014
// tmp := Insert ( tmp , 1 , j ) else
12989: LD_ADDR_VAR 0 19
12993: PUSH
12994: LD_VAR 0 19
12998: PPUSH
12999: LD_INT 1
13001: PPUSH
13002: LD_VAR 0 9
13006: PPUSH
13007: CALL_OW 2
13011: ST_TO_ADDR
13012: GO 13043
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13014: LD_ADDR_VAR 0 19
13018: PUSH
13019: LD_VAR 0 19
13023: PPUSH
13024: LD_VAR 0 19
13028: PUSH
13029: LD_INT 1
13031: PLUS
13032: PPUSH
13033: LD_VAR 0 9
13037: PPUSH
13038: CALL_OW 2
13042: ST_TO_ADDR
13043: GO 12971
13045: POP
13046: POP
// if tmp then
13047: LD_VAR 0 19
13051: IFFALSE 13063
// f := tmp ;
13053: LD_ADDR_VAR 0 12
13057: PUSH
13058: LD_VAR 0 19
13062: ST_TO_ADDR
// end ; x := personel [ i ] ;
13063: LD_ADDR_VAR 0 13
13067: PUSH
13068: LD_VAR 0 6
13072: PUSH
13073: LD_VAR 0 8
13077: ARRAY
13078: ST_TO_ADDR
// if x = - 1 then
13079: LD_VAR 0 13
13083: PUSH
13084: LD_INT 1
13086: NEG
13087: EQUAL
13088: IFFALSE 13297
// begin for j in f do
13090: LD_ADDR_VAR 0 9
13094: PUSH
13095: LD_VAR 0 12
13099: PUSH
13100: FOR_IN
13101: IFFALSE 13293
// repeat InitHc ;
13103: CALL_OW 19
// if GetBType ( j ) = b_barracks then
13107: LD_VAR 0 9
13111: PPUSH
13112: CALL_OW 266
13116: PUSH
13117: LD_INT 5
13119: EQUAL
13120: IFFALSE 13190
// begin if UnitsInside ( j ) < 3 then
13122: LD_VAR 0 9
13126: PPUSH
13127: CALL_OW 313
13131: PUSH
13132: LD_INT 3
13134: LESS
13135: IFFALSE 13171
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13137: LD_INT 0
13139: PPUSH
13140: LD_INT 5
13142: PUSH
13143: LD_INT 8
13145: PUSH
13146: LD_INT 9
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: LIST
13153: PUSH
13154: LD_VAR 0 17
13158: ARRAY
13159: PPUSH
13160: LD_VAR 0 4
13164: PPUSH
13165: CALL_OW 380
13169: GO 13188
// PrepareHuman ( false , i , skill ) ;
13171: LD_INT 0
13173: PPUSH
13174: LD_VAR 0 8
13178: PPUSH
13179: LD_VAR 0 4
13183: PPUSH
13184: CALL_OW 380
// end else
13188: GO 13207
// PrepareHuman ( false , i , skill ) ;
13190: LD_INT 0
13192: PPUSH
13193: LD_VAR 0 8
13197: PPUSH
13198: LD_VAR 0 4
13202: PPUSH
13203: CALL_OW 380
// un := CreateHuman ;
13207: LD_ADDR_VAR 0 14
13211: PUSH
13212: CALL_OW 44
13216: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13217: LD_ADDR_VAR 0 7
13221: PUSH
13222: LD_VAR 0 7
13226: PPUSH
13227: LD_INT 1
13229: PPUSH
13230: LD_VAR 0 14
13234: PPUSH
13235: CALL_OW 2
13239: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
13240: LD_VAR 0 14
13244: PPUSH
13245: LD_VAR 0 9
13249: PPUSH
13250: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
13254: LD_VAR 0 9
13258: PPUSH
13259: CALL_OW 313
13263: PUSH
13264: LD_INT 6
13266: EQUAL
13267: PUSH
13268: LD_VAR 0 9
13272: PPUSH
13273: CALL_OW 266
13277: PUSH
13278: LD_INT 32
13280: PUSH
13281: LD_INT 31
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: IN
13288: OR
13289: IFFALSE 13103
13291: GO 13100
13293: POP
13294: POP
// end else
13295: GO 13677
// for j = 1 to x do
13297: LD_ADDR_VAR 0 9
13301: PUSH
13302: DOUBLE
13303: LD_INT 1
13305: DEC
13306: ST_TO_ADDR
13307: LD_VAR 0 13
13311: PUSH
13312: FOR_TO
13313: IFFALSE 13675
// begin InitHc ;
13315: CALL_OW 19
// if not f then
13319: LD_VAR 0 12
13323: NOT
13324: IFFALSE 13413
// begin PrepareHuman ( false , i , skill ) ;
13326: LD_INT 0
13328: PPUSH
13329: LD_VAR 0 8
13333: PPUSH
13334: LD_VAR 0 4
13338: PPUSH
13339: CALL_OW 380
// un := CreateHuman ;
13343: LD_ADDR_VAR 0 14
13347: PUSH
13348: CALL_OW 44
13352: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13353: LD_ADDR_VAR 0 7
13357: PUSH
13358: LD_VAR 0 7
13362: PPUSH
13363: LD_INT 1
13365: PPUSH
13366: LD_VAR 0 14
13370: PPUSH
13371: CALL_OW 2
13375: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13376: LD_VAR 0 14
13380: PPUSH
13381: LD_VAR 0 1
13385: PPUSH
13386: CALL_OW 250
13390: PPUSH
13391: LD_VAR 0 1
13395: PPUSH
13396: CALL_OW 251
13400: PPUSH
13401: LD_INT 10
13403: PPUSH
13404: LD_INT 0
13406: PPUSH
13407: CALL_OW 50
// continue ;
13411: GO 13312
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13413: LD_VAR 0 12
13417: PUSH
13418: LD_INT 1
13420: ARRAY
13421: PPUSH
13422: CALL_OW 313
13426: PUSH
13427: LD_VAR 0 12
13431: PUSH
13432: LD_INT 1
13434: ARRAY
13435: PPUSH
13436: CALL_OW 266
13440: PUSH
13441: LD_INT 32
13443: PUSH
13444: LD_INT 31
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: IN
13451: AND
13452: PUSH
13453: LD_VAR 0 12
13457: PUSH
13458: LD_INT 1
13460: ARRAY
13461: PPUSH
13462: CALL_OW 313
13466: PUSH
13467: LD_INT 6
13469: EQUAL
13470: OR
13471: IFFALSE 13491
// f := Delete ( f , 1 ) ;
13473: LD_ADDR_VAR 0 12
13477: PUSH
13478: LD_VAR 0 12
13482: PPUSH
13483: LD_INT 1
13485: PPUSH
13486: CALL_OW 3
13490: ST_TO_ADDR
// if not f then
13491: LD_VAR 0 12
13495: NOT
13496: IFFALSE 13514
// begin x := x + 2 ;
13498: LD_ADDR_VAR 0 13
13502: PUSH
13503: LD_VAR 0 13
13507: PUSH
13508: LD_INT 2
13510: PLUS
13511: ST_TO_ADDR
// continue ;
13512: GO 13312
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13514: LD_VAR 0 12
13518: PUSH
13519: LD_INT 1
13521: ARRAY
13522: PPUSH
13523: CALL_OW 266
13527: PUSH
13528: LD_INT 5
13530: EQUAL
13531: IFFALSE 13605
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13533: LD_VAR 0 12
13537: PUSH
13538: LD_INT 1
13540: ARRAY
13541: PPUSH
13542: CALL_OW 313
13546: PUSH
13547: LD_INT 3
13549: LESS
13550: IFFALSE 13586
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13552: LD_INT 0
13554: PPUSH
13555: LD_INT 5
13557: PUSH
13558: LD_INT 8
13560: PUSH
13561: LD_INT 9
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: LIST
13568: PUSH
13569: LD_VAR 0 17
13573: ARRAY
13574: PPUSH
13575: LD_VAR 0 4
13579: PPUSH
13580: CALL_OW 380
13584: GO 13603
// PrepareHuman ( false , i , skill ) ;
13586: LD_INT 0
13588: PPUSH
13589: LD_VAR 0 8
13593: PPUSH
13594: LD_VAR 0 4
13598: PPUSH
13599: CALL_OW 380
// end else
13603: GO 13622
// PrepareHuman ( false , i , skill ) ;
13605: LD_INT 0
13607: PPUSH
13608: LD_VAR 0 8
13612: PPUSH
13613: LD_VAR 0 4
13617: PPUSH
13618: CALL_OW 380
// un := CreateHuman ;
13622: LD_ADDR_VAR 0 14
13626: PUSH
13627: CALL_OW 44
13631: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13632: LD_ADDR_VAR 0 7
13636: PUSH
13637: LD_VAR 0 7
13641: PPUSH
13642: LD_INT 1
13644: PPUSH
13645: LD_VAR 0 14
13649: PPUSH
13650: CALL_OW 2
13654: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13655: LD_VAR 0 14
13659: PPUSH
13660: LD_VAR 0 12
13664: PUSH
13665: LD_INT 1
13667: ARRAY
13668: PPUSH
13669: CALL_OW 52
// end ;
13673: GO 13312
13675: POP
13676: POP
// end ;
13677: GO 12614
13679: POP
13680: POP
// result := result ^ buildings ;
13681: LD_ADDR_VAR 0 7
13685: PUSH
13686: LD_VAR 0 7
13690: PUSH
13691: LD_VAR 0 18
13695: ADD
13696: ST_TO_ADDR
// end else
13697: GO 13840
// begin for i = 1 to personel do
13699: LD_ADDR_VAR 0 8
13703: PUSH
13704: DOUBLE
13705: LD_INT 1
13707: DEC
13708: ST_TO_ADDR
13709: LD_VAR 0 6
13713: PUSH
13714: FOR_TO
13715: IFFALSE 13838
// begin if i > 4 then
13717: LD_VAR 0 8
13721: PUSH
13722: LD_INT 4
13724: GREATER
13725: IFFALSE 13729
// break ;
13727: GO 13838
// x := personel [ i ] ;
13729: LD_ADDR_VAR 0 13
13733: PUSH
13734: LD_VAR 0 6
13738: PUSH
13739: LD_VAR 0 8
13743: ARRAY
13744: ST_TO_ADDR
// if x = - 1 then
13745: LD_VAR 0 13
13749: PUSH
13750: LD_INT 1
13752: NEG
13753: EQUAL
13754: IFFALSE 13758
// continue ;
13756: GO 13714
// PrepareHuman ( false , i , skill ) ;
13758: LD_INT 0
13760: PPUSH
13761: LD_VAR 0 8
13765: PPUSH
13766: LD_VAR 0 4
13770: PPUSH
13771: CALL_OW 380
// un := CreateHuman ;
13775: LD_ADDR_VAR 0 14
13779: PUSH
13780: CALL_OW 44
13784: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13785: LD_VAR 0 14
13789: PPUSH
13790: LD_VAR 0 1
13794: PPUSH
13795: CALL_OW 250
13799: PPUSH
13800: LD_VAR 0 1
13804: PPUSH
13805: CALL_OW 251
13809: PPUSH
13810: LD_INT 10
13812: PPUSH
13813: LD_INT 0
13815: PPUSH
13816: CALL_OW 50
// result := result ^ un ;
13820: LD_ADDR_VAR 0 7
13824: PUSH
13825: LD_VAR 0 7
13829: PUSH
13830: LD_VAR 0 14
13834: ADD
13835: ST_TO_ADDR
// end ;
13836: GO 13714
13838: POP
13839: POP
// end ; end ;
13840: LD_VAR 0 7
13844: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13845: LD_INT 0
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
13860: PPUSH
13861: PPUSH
13862: PPUSH
// result := false ;
13863: LD_ADDR_VAR 0 3
13867: PUSH
13868: LD_INT 0
13870: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13871: LD_VAR 0 1
13875: NOT
13876: PUSH
13877: LD_VAR 0 1
13881: PPUSH
13882: CALL_OW 266
13886: PUSH
13887: LD_INT 32
13889: PUSH
13890: LD_INT 33
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: IN
13897: NOT
13898: OR
13899: IFFALSE 13903
// exit ;
13901: GO 15012
// nat := GetNation ( tower ) ;
13903: LD_ADDR_VAR 0 12
13907: PUSH
13908: LD_VAR 0 1
13912: PPUSH
13913: CALL_OW 248
13917: ST_TO_ADDR
// side := GetSide ( tower ) ;
13918: LD_ADDR_VAR 0 16
13922: PUSH
13923: LD_VAR 0 1
13927: PPUSH
13928: CALL_OW 255
13932: ST_TO_ADDR
// x := GetX ( tower ) ;
13933: LD_ADDR_VAR 0 10
13937: PUSH
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 250
13947: ST_TO_ADDR
// y := GetY ( tower ) ;
13948: LD_ADDR_VAR 0 11
13952: PUSH
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 251
13962: ST_TO_ADDR
// if not x or not y then
13963: LD_VAR 0 10
13967: NOT
13968: PUSH
13969: LD_VAR 0 11
13973: NOT
13974: OR
13975: IFFALSE 13979
// exit ;
13977: GO 15012
// weapon := 0 ;
13979: LD_ADDR_VAR 0 18
13983: PUSH
13984: LD_INT 0
13986: ST_TO_ADDR
// fac_list := [ ] ;
13987: LD_ADDR_VAR 0 17
13991: PUSH
13992: EMPTY
13993: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13994: LD_ADDR_VAR 0 6
13998: PUSH
13999: LD_VAR 0 1
14003: PPUSH
14004: CALL_OW 274
14008: PPUSH
14009: LD_VAR 0 2
14013: PPUSH
14014: LD_INT 0
14016: PPUSH
14017: CALL 11583 0 3
14021: PPUSH
14022: LD_INT 30
14024: PUSH
14025: LD_INT 3
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: PPUSH
14032: CALL_OW 72
14036: ST_TO_ADDR
// if not factories then
14037: LD_VAR 0 6
14041: NOT
14042: IFFALSE 14046
// exit ;
14044: GO 15012
// for i in factories do
14046: LD_ADDR_VAR 0 8
14050: PUSH
14051: LD_VAR 0 6
14055: PUSH
14056: FOR_IN
14057: IFFALSE 14082
// fac_list := fac_list union AvailableWeaponList ( i ) ;
14059: LD_ADDR_VAR 0 17
14063: PUSH
14064: LD_VAR 0 17
14068: PUSH
14069: LD_VAR 0 8
14073: PPUSH
14074: CALL_OW 478
14078: UNION
14079: ST_TO_ADDR
14080: GO 14056
14082: POP
14083: POP
// if not fac_list then
14084: LD_VAR 0 17
14088: NOT
14089: IFFALSE 14093
// exit ;
14091: GO 15012
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
14093: LD_ADDR_VAR 0 5
14097: PUSH
14098: LD_INT 4
14100: PUSH
14101: LD_INT 5
14103: PUSH
14104: LD_INT 9
14106: PUSH
14107: LD_INT 10
14109: PUSH
14110: LD_INT 6
14112: PUSH
14113: LD_INT 7
14115: PUSH
14116: LD_INT 11
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: PUSH
14128: LD_INT 27
14130: PUSH
14131: LD_INT 28
14133: PUSH
14134: LD_INT 26
14136: PUSH
14137: LD_INT 30
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: PUSH
14146: LD_INT 43
14148: PUSH
14149: LD_INT 44
14151: PUSH
14152: LD_INT 46
14154: PUSH
14155: LD_INT 45
14157: PUSH
14158: LD_INT 47
14160: PUSH
14161: LD_INT 49
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: PUSH
14177: LD_VAR 0 12
14181: ARRAY
14182: ST_TO_ADDR
// list := list isect fac_list ;
14183: LD_ADDR_VAR 0 5
14187: PUSH
14188: LD_VAR 0 5
14192: PUSH
14193: LD_VAR 0 17
14197: ISECT
14198: ST_TO_ADDR
// if not list then
14199: LD_VAR 0 5
14203: NOT
14204: IFFALSE 14208
// exit ;
14206: GO 15012
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
14208: LD_VAR 0 12
14212: PUSH
14213: LD_INT 3
14215: EQUAL
14216: PUSH
14217: LD_INT 49
14219: PUSH
14220: LD_VAR 0 5
14224: IN
14225: AND
14226: PUSH
14227: LD_INT 31
14229: PPUSH
14230: LD_VAR 0 16
14234: PPUSH
14235: CALL_OW 321
14239: PUSH
14240: LD_INT 2
14242: EQUAL
14243: AND
14244: IFFALSE 14304
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
14246: LD_INT 22
14248: PUSH
14249: LD_VAR 0 16
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 35
14260: PUSH
14261: LD_INT 49
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 91
14270: PUSH
14271: LD_VAR 0 1
14275: PUSH
14276: LD_INT 10
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: LIST
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: LIST
14288: PPUSH
14289: CALL_OW 69
14293: NOT
14294: IFFALSE 14304
// weapon := ru_time_lapser ;
14296: LD_ADDR_VAR 0 18
14300: PUSH
14301: LD_INT 49
14303: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14304: LD_VAR 0 12
14308: PUSH
14309: LD_INT 1
14311: PUSH
14312: LD_INT 2
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: IN
14319: PUSH
14320: LD_INT 11
14322: PUSH
14323: LD_VAR 0 5
14327: IN
14328: PUSH
14329: LD_INT 30
14331: PUSH
14332: LD_VAR 0 5
14336: IN
14337: OR
14338: AND
14339: PUSH
14340: LD_INT 6
14342: PPUSH
14343: LD_VAR 0 16
14347: PPUSH
14348: CALL_OW 321
14352: PUSH
14353: LD_INT 2
14355: EQUAL
14356: AND
14357: IFFALSE 14522
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14359: LD_INT 22
14361: PUSH
14362: LD_VAR 0 16
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 2
14373: PUSH
14374: LD_INT 35
14376: PUSH
14377: LD_INT 11
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: PUSH
14384: LD_INT 35
14386: PUSH
14387: LD_INT 30
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 91
14401: PUSH
14402: LD_VAR 0 1
14406: PUSH
14407: LD_INT 18
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: LIST
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: PPUSH
14420: CALL_OW 69
14424: NOT
14425: PUSH
14426: LD_INT 22
14428: PUSH
14429: LD_VAR 0 16
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 2
14440: PUSH
14441: LD_INT 30
14443: PUSH
14444: LD_INT 32
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 30
14453: PUSH
14454: LD_INT 33
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 91
14468: PUSH
14469: LD_VAR 0 1
14473: PUSH
14474: LD_INT 12
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: LIST
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: PPUSH
14490: CALL_OW 69
14494: PUSH
14495: LD_INT 2
14497: GREATER
14498: AND
14499: IFFALSE 14522
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14501: LD_ADDR_VAR 0 18
14505: PUSH
14506: LD_INT 11
14508: PUSH
14509: LD_INT 30
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: LD_VAR 0 12
14520: ARRAY
14521: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14522: LD_VAR 0 18
14526: NOT
14527: PUSH
14528: LD_INT 40
14530: PPUSH
14531: LD_VAR 0 16
14535: PPUSH
14536: CALL_OW 321
14540: PUSH
14541: LD_INT 2
14543: EQUAL
14544: AND
14545: PUSH
14546: LD_INT 7
14548: PUSH
14549: LD_VAR 0 5
14553: IN
14554: PUSH
14555: LD_INT 28
14557: PUSH
14558: LD_VAR 0 5
14562: IN
14563: OR
14564: PUSH
14565: LD_INT 45
14567: PUSH
14568: LD_VAR 0 5
14572: IN
14573: OR
14574: AND
14575: IFFALSE 14829
// begin hex := GetHexInfo ( x , y ) ;
14577: LD_ADDR_VAR 0 4
14581: PUSH
14582: LD_VAR 0 10
14586: PPUSH
14587: LD_VAR 0 11
14591: PPUSH
14592: CALL_OW 546
14596: ST_TO_ADDR
// if hex [ 1 ] then
14597: LD_VAR 0 4
14601: PUSH
14602: LD_INT 1
14604: ARRAY
14605: IFFALSE 14609
// exit ;
14607: GO 15012
// height := hex [ 2 ] ;
14609: LD_ADDR_VAR 0 15
14613: PUSH
14614: LD_VAR 0 4
14618: PUSH
14619: LD_INT 2
14621: ARRAY
14622: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14623: LD_ADDR_VAR 0 14
14627: PUSH
14628: LD_INT 0
14630: PUSH
14631: LD_INT 2
14633: PUSH
14634: LD_INT 3
14636: PUSH
14637: LD_INT 5
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: ST_TO_ADDR
// for i in tmp do
14646: LD_ADDR_VAR 0 8
14650: PUSH
14651: LD_VAR 0 14
14655: PUSH
14656: FOR_IN
14657: IFFALSE 14827
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14659: LD_ADDR_VAR 0 9
14663: PUSH
14664: LD_VAR 0 10
14668: PPUSH
14669: LD_VAR 0 8
14673: PPUSH
14674: LD_INT 5
14676: PPUSH
14677: CALL_OW 272
14681: PUSH
14682: LD_VAR 0 11
14686: PPUSH
14687: LD_VAR 0 8
14691: PPUSH
14692: LD_INT 5
14694: PPUSH
14695: CALL_OW 273
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14704: LD_VAR 0 9
14708: PUSH
14709: LD_INT 1
14711: ARRAY
14712: PPUSH
14713: LD_VAR 0 9
14717: PUSH
14718: LD_INT 2
14720: ARRAY
14721: PPUSH
14722: CALL_OW 488
14726: IFFALSE 14825
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14728: LD_ADDR_VAR 0 4
14732: PUSH
14733: LD_VAR 0 9
14737: PUSH
14738: LD_INT 1
14740: ARRAY
14741: PPUSH
14742: LD_VAR 0 9
14746: PUSH
14747: LD_INT 2
14749: ARRAY
14750: PPUSH
14751: CALL_OW 546
14755: ST_TO_ADDR
// if hex [ 1 ] then
14756: LD_VAR 0 4
14760: PUSH
14761: LD_INT 1
14763: ARRAY
14764: IFFALSE 14768
// continue ;
14766: GO 14656
// h := hex [ 2 ] ;
14768: LD_ADDR_VAR 0 13
14772: PUSH
14773: LD_VAR 0 4
14777: PUSH
14778: LD_INT 2
14780: ARRAY
14781: ST_TO_ADDR
// if h + 7 < height then
14782: LD_VAR 0 13
14786: PUSH
14787: LD_INT 7
14789: PLUS
14790: PUSH
14791: LD_VAR 0 15
14795: LESS
14796: IFFALSE 14825
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14798: LD_ADDR_VAR 0 18
14802: PUSH
14803: LD_INT 7
14805: PUSH
14806: LD_INT 28
14808: PUSH
14809: LD_INT 45
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: LIST
14816: PUSH
14817: LD_VAR 0 12
14821: ARRAY
14822: ST_TO_ADDR
// break ;
14823: GO 14827
// end ; end ; end ;
14825: GO 14656
14827: POP
14828: POP
// end ; if not weapon then
14829: LD_VAR 0 18
14833: NOT
14834: IFFALSE 14894
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14836: LD_ADDR_VAR 0 5
14840: PUSH
14841: LD_VAR 0 5
14845: PUSH
14846: LD_INT 11
14848: PUSH
14849: LD_INT 30
14851: PUSH
14852: LD_INT 49
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: LIST
14859: DIFF
14860: ST_TO_ADDR
// if not list then
14861: LD_VAR 0 5
14865: NOT
14866: IFFALSE 14870
// exit ;
14868: GO 15012
// weapon := list [ rand ( 1 , list ) ] ;
14870: LD_ADDR_VAR 0 18
14874: PUSH
14875: LD_VAR 0 5
14879: PUSH
14880: LD_INT 1
14882: PPUSH
14883: LD_VAR 0 5
14887: PPUSH
14888: CALL_OW 12
14892: ARRAY
14893: ST_TO_ADDR
// end ; if weapon then
14894: LD_VAR 0 18
14898: IFFALSE 15012
// begin tmp := CostOfWeapon ( weapon ) ;
14900: LD_ADDR_VAR 0 14
14904: PUSH
14905: LD_VAR 0 18
14909: PPUSH
14910: CALL_OW 451
14914: ST_TO_ADDR
// j := GetBase ( tower ) ;
14915: LD_ADDR_VAR 0 9
14919: PUSH
14920: LD_VAR 0 1
14924: PPUSH
14925: CALL_OW 274
14929: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14930: LD_VAR 0 9
14934: PPUSH
14935: LD_INT 1
14937: PPUSH
14938: CALL_OW 275
14942: PUSH
14943: LD_VAR 0 14
14947: PUSH
14948: LD_INT 1
14950: ARRAY
14951: GREATEREQUAL
14952: PUSH
14953: LD_VAR 0 9
14957: PPUSH
14958: LD_INT 2
14960: PPUSH
14961: CALL_OW 275
14965: PUSH
14966: LD_VAR 0 14
14970: PUSH
14971: LD_INT 2
14973: ARRAY
14974: GREATEREQUAL
14975: AND
14976: PUSH
14977: LD_VAR 0 9
14981: PPUSH
14982: LD_INT 3
14984: PPUSH
14985: CALL_OW 275
14989: PUSH
14990: LD_VAR 0 14
14994: PUSH
14995: LD_INT 3
14997: ARRAY
14998: GREATEREQUAL
14999: AND
15000: IFFALSE 15012
// result := weapon ;
15002: LD_ADDR_VAR 0 3
15006: PUSH
15007: LD_VAR 0 18
15011: ST_TO_ADDR
// end ; end ;
15012: LD_VAR 0 3
15016: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
15017: LD_INT 0
15019: PPUSH
15020: PPUSH
// result := true ;
15021: LD_ADDR_VAR 0 3
15025: PUSH
15026: LD_INT 1
15028: ST_TO_ADDR
// if array1 = array2 then
15029: LD_VAR 0 1
15033: PUSH
15034: LD_VAR 0 2
15038: EQUAL
15039: IFFALSE 15099
// begin for i = 1 to array1 do
15041: LD_ADDR_VAR 0 4
15045: PUSH
15046: DOUBLE
15047: LD_INT 1
15049: DEC
15050: ST_TO_ADDR
15051: LD_VAR 0 1
15055: PUSH
15056: FOR_TO
15057: IFFALSE 15095
// if array1 [ i ] <> array2 [ i ] then
15059: LD_VAR 0 1
15063: PUSH
15064: LD_VAR 0 4
15068: ARRAY
15069: PUSH
15070: LD_VAR 0 2
15074: PUSH
15075: LD_VAR 0 4
15079: ARRAY
15080: NONEQUAL
15081: IFFALSE 15093
// begin result := false ;
15083: LD_ADDR_VAR 0 3
15087: PUSH
15088: LD_INT 0
15090: ST_TO_ADDR
// break ;
15091: GO 15095
// end ;
15093: GO 15056
15095: POP
15096: POP
// end else
15097: GO 15107
// result := false ;
15099: LD_ADDR_VAR 0 3
15103: PUSH
15104: LD_INT 0
15106: ST_TO_ADDR
// end ;
15107: LD_VAR 0 3
15111: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
15112: LD_INT 0
15114: PPUSH
15115: PPUSH
// if not array1 or not array2 then
15116: LD_VAR 0 1
15120: NOT
15121: PUSH
15122: LD_VAR 0 2
15126: NOT
15127: OR
15128: IFFALSE 15132
// exit ;
15130: GO 15196
// result := true ;
15132: LD_ADDR_VAR 0 3
15136: PUSH
15137: LD_INT 1
15139: ST_TO_ADDR
// for i = 1 to array1 do
15140: LD_ADDR_VAR 0 4
15144: PUSH
15145: DOUBLE
15146: LD_INT 1
15148: DEC
15149: ST_TO_ADDR
15150: LD_VAR 0 1
15154: PUSH
15155: FOR_TO
15156: IFFALSE 15194
// if array1 [ i ] <> array2 [ i ] then
15158: LD_VAR 0 1
15162: PUSH
15163: LD_VAR 0 4
15167: ARRAY
15168: PUSH
15169: LD_VAR 0 2
15173: PUSH
15174: LD_VAR 0 4
15178: ARRAY
15179: NONEQUAL
15180: IFFALSE 15192
// begin result := false ;
15182: LD_ADDR_VAR 0 3
15186: PUSH
15187: LD_INT 0
15189: ST_TO_ADDR
// break ;
15190: GO 15194
// end ;
15192: GO 15155
15194: POP
15195: POP
// end ;
15196: LD_VAR 0 3
15200: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
15201: LD_INT 0
15203: PPUSH
15204: PPUSH
15205: PPUSH
// pom := GetBase ( fac ) ;
15206: LD_ADDR_VAR 0 5
15210: PUSH
15211: LD_VAR 0 1
15215: PPUSH
15216: CALL_OW 274
15220: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
15221: LD_ADDR_VAR 0 4
15225: PUSH
15226: LD_VAR 0 2
15230: PUSH
15231: LD_INT 1
15233: ARRAY
15234: PPUSH
15235: LD_VAR 0 2
15239: PUSH
15240: LD_INT 2
15242: ARRAY
15243: PPUSH
15244: LD_VAR 0 2
15248: PUSH
15249: LD_INT 3
15251: ARRAY
15252: PPUSH
15253: LD_VAR 0 2
15257: PUSH
15258: LD_INT 4
15260: ARRAY
15261: PPUSH
15262: CALL_OW 449
15266: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15267: LD_ADDR_VAR 0 3
15271: PUSH
15272: LD_VAR 0 5
15276: PPUSH
15277: LD_INT 1
15279: PPUSH
15280: CALL_OW 275
15284: PUSH
15285: LD_VAR 0 4
15289: PUSH
15290: LD_INT 1
15292: ARRAY
15293: GREATEREQUAL
15294: PUSH
15295: LD_VAR 0 5
15299: PPUSH
15300: LD_INT 2
15302: PPUSH
15303: CALL_OW 275
15307: PUSH
15308: LD_VAR 0 4
15312: PUSH
15313: LD_INT 2
15315: ARRAY
15316: GREATEREQUAL
15317: AND
15318: PUSH
15319: LD_VAR 0 5
15323: PPUSH
15324: LD_INT 3
15326: PPUSH
15327: CALL_OW 275
15331: PUSH
15332: LD_VAR 0 4
15336: PUSH
15337: LD_INT 3
15339: ARRAY
15340: GREATEREQUAL
15341: AND
15342: ST_TO_ADDR
// end ;
15343: LD_VAR 0 3
15347: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15348: LD_INT 0
15350: PPUSH
15351: PPUSH
15352: PPUSH
15353: PPUSH
// pom := GetBase ( building ) ;
15354: LD_ADDR_VAR 0 3
15358: PUSH
15359: LD_VAR 0 1
15363: PPUSH
15364: CALL_OW 274
15368: ST_TO_ADDR
// if not pom then
15369: LD_VAR 0 3
15373: NOT
15374: IFFALSE 15378
// exit ;
15376: GO 15548
// btype := GetBType ( building ) ;
15378: LD_ADDR_VAR 0 5
15382: PUSH
15383: LD_VAR 0 1
15387: PPUSH
15388: CALL_OW 266
15392: ST_TO_ADDR
// if btype = b_armoury then
15393: LD_VAR 0 5
15397: PUSH
15398: LD_INT 4
15400: EQUAL
15401: IFFALSE 15411
// btype := b_barracks ;
15403: LD_ADDR_VAR 0 5
15407: PUSH
15408: LD_INT 5
15410: ST_TO_ADDR
// if btype = b_depot then
15411: LD_VAR 0 5
15415: PUSH
15416: LD_INT 0
15418: EQUAL
15419: IFFALSE 15429
// btype := b_warehouse ;
15421: LD_ADDR_VAR 0 5
15425: PUSH
15426: LD_INT 1
15428: ST_TO_ADDR
// if btype = b_workshop then
15429: LD_VAR 0 5
15433: PUSH
15434: LD_INT 2
15436: EQUAL
15437: IFFALSE 15447
// btype := b_factory ;
15439: LD_ADDR_VAR 0 5
15443: PUSH
15444: LD_INT 3
15446: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15447: LD_ADDR_VAR 0 4
15451: PUSH
15452: LD_VAR 0 5
15456: PPUSH
15457: LD_VAR 0 1
15461: PPUSH
15462: CALL_OW 248
15466: PPUSH
15467: CALL_OW 450
15471: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15472: LD_ADDR_VAR 0 2
15476: PUSH
15477: LD_VAR 0 3
15481: PPUSH
15482: LD_INT 1
15484: PPUSH
15485: CALL_OW 275
15489: PUSH
15490: LD_VAR 0 4
15494: PUSH
15495: LD_INT 1
15497: ARRAY
15498: GREATEREQUAL
15499: PUSH
15500: LD_VAR 0 3
15504: PPUSH
15505: LD_INT 2
15507: PPUSH
15508: CALL_OW 275
15512: PUSH
15513: LD_VAR 0 4
15517: PUSH
15518: LD_INT 2
15520: ARRAY
15521: GREATEREQUAL
15522: AND
15523: PUSH
15524: LD_VAR 0 3
15528: PPUSH
15529: LD_INT 3
15531: PPUSH
15532: CALL_OW 275
15536: PUSH
15537: LD_VAR 0 4
15541: PUSH
15542: LD_INT 3
15544: ARRAY
15545: GREATEREQUAL
15546: AND
15547: ST_TO_ADDR
// end ;
15548: LD_VAR 0 2
15552: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15553: LD_INT 0
15555: PPUSH
15556: PPUSH
15557: PPUSH
// pom := GetBase ( building ) ;
15558: LD_ADDR_VAR 0 4
15562: PUSH
15563: LD_VAR 0 1
15567: PPUSH
15568: CALL_OW 274
15572: ST_TO_ADDR
// if not pom then
15573: LD_VAR 0 4
15577: NOT
15578: IFFALSE 15582
// exit ;
15580: GO 15683
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15582: LD_ADDR_VAR 0 5
15586: PUSH
15587: LD_VAR 0 2
15591: PPUSH
15592: LD_VAR 0 1
15596: PPUSH
15597: CALL_OW 248
15601: PPUSH
15602: CALL_OW 450
15606: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15607: LD_ADDR_VAR 0 3
15611: PUSH
15612: LD_VAR 0 4
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: CALL_OW 275
15624: PUSH
15625: LD_VAR 0 5
15629: PUSH
15630: LD_INT 1
15632: ARRAY
15633: GREATEREQUAL
15634: PUSH
15635: LD_VAR 0 4
15639: PPUSH
15640: LD_INT 2
15642: PPUSH
15643: CALL_OW 275
15647: PUSH
15648: LD_VAR 0 5
15652: PUSH
15653: LD_INT 2
15655: ARRAY
15656: GREATEREQUAL
15657: AND
15658: PUSH
15659: LD_VAR 0 4
15663: PPUSH
15664: LD_INT 3
15666: PPUSH
15667: CALL_OW 275
15671: PUSH
15672: LD_VAR 0 5
15676: PUSH
15677: LD_INT 3
15679: ARRAY
15680: GREATEREQUAL
15681: AND
15682: ST_TO_ADDR
// end ;
15683: LD_VAR 0 3
15687: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15688: LD_INT 0
15690: PPUSH
15691: PPUSH
15692: PPUSH
15693: PPUSH
15694: PPUSH
15695: PPUSH
15696: PPUSH
15697: PPUSH
15698: PPUSH
15699: PPUSH
15700: PPUSH
// result := false ;
15701: LD_ADDR_VAR 0 8
15705: PUSH
15706: LD_INT 0
15708: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15709: LD_VAR 0 5
15713: NOT
15714: PUSH
15715: LD_VAR 0 1
15719: NOT
15720: OR
15721: PUSH
15722: LD_VAR 0 2
15726: NOT
15727: OR
15728: PUSH
15729: LD_VAR 0 3
15733: NOT
15734: OR
15735: IFFALSE 15739
// exit ;
15737: GO 16553
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15739: LD_ADDR_VAR 0 14
15743: PUSH
15744: LD_VAR 0 1
15748: PPUSH
15749: LD_VAR 0 2
15753: PPUSH
15754: LD_VAR 0 3
15758: PPUSH
15759: LD_VAR 0 4
15763: PPUSH
15764: LD_VAR 0 5
15768: PUSH
15769: LD_INT 1
15771: ARRAY
15772: PPUSH
15773: CALL_OW 248
15777: PPUSH
15778: LD_INT 0
15780: PPUSH
15781: CALL 17790 0 6
15785: ST_TO_ADDR
// if not hexes then
15786: LD_VAR 0 14
15790: NOT
15791: IFFALSE 15795
// exit ;
15793: GO 16553
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15795: LD_ADDR_VAR 0 17
15799: PUSH
15800: LD_VAR 0 5
15804: PPUSH
15805: LD_INT 22
15807: PUSH
15808: LD_VAR 0 13
15812: PPUSH
15813: CALL_OW 255
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 2
15824: PUSH
15825: LD_INT 30
15827: PUSH
15828: LD_INT 0
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: PUSH
15835: LD_INT 30
15837: PUSH
15838: LD_INT 1
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: LIST
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PPUSH
15854: CALL_OW 72
15858: ST_TO_ADDR
// for i = 1 to hexes do
15859: LD_ADDR_VAR 0 9
15863: PUSH
15864: DOUBLE
15865: LD_INT 1
15867: DEC
15868: ST_TO_ADDR
15869: LD_VAR 0 14
15873: PUSH
15874: FOR_TO
15875: IFFALSE 16551
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15877: LD_ADDR_VAR 0 13
15881: PUSH
15882: LD_VAR 0 14
15886: PUSH
15887: LD_VAR 0 9
15891: ARRAY
15892: PUSH
15893: LD_INT 1
15895: ARRAY
15896: PPUSH
15897: LD_VAR 0 14
15901: PUSH
15902: LD_VAR 0 9
15906: ARRAY
15907: PUSH
15908: LD_INT 2
15910: ARRAY
15911: PPUSH
15912: CALL_OW 428
15916: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15917: LD_VAR 0 14
15921: PUSH
15922: LD_VAR 0 9
15926: ARRAY
15927: PUSH
15928: LD_INT 1
15930: ARRAY
15931: PPUSH
15932: LD_VAR 0 14
15936: PUSH
15937: LD_VAR 0 9
15941: ARRAY
15942: PUSH
15943: LD_INT 2
15945: ARRAY
15946: PPUSH
15947: CALL_OW 351
15951: PUSH
15952: LD_VAR 0 14
15956: PUSH
15957: LD_VAR 0 9
15961: ARRAY
15962: PUSH
15963: LD_INT 1
15965: ARRAY
15966: PPUSH
15967: LD_VAR 0 14
15971: PUSH
15972: LD_VAR 0 9
15976: ARRAY
15977: PUSH
15978: LD_INT 2
15980: ARRAY
15981: PPUSH
15982: CALL_OW 488
15986: NOT
15987: OR
15988: PUSH
15989: LD_VAR 0 13
15993: PPUSH
15994: CALL_OW 247
15998: PUSH
15999: LD_INT 3
16001: EQUAL
16002: OR
16003: IFFALSE 16009
// exit ;
16005: POP
16006: POP
16007: GO 16553
// if not tmp then
16009: LD_VAR 0 13
16013: NOT
16014: IFFALSE 16018
// continue ;
16016: GO 15874
// result := true ;
16018: LD_ADDR_VAR 0 8
16022: PUSH
16023: LD_INT 1
16025: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
16026: LD_VAR 0 6
16030: PUSH
16031: LD_VAR 0 13
16035: PPUSH
16036: CALL_OW 247
16040: PUSH
16041: LD_INT 2
16043: EQUAL
16044: AND
16045: PUSH
16046: LD_VAR 0 13
16050: PPUSH
16051: CALL_OW 263
16055: PUSH
16056: LD_INT 1
16058: EQUAL
16059: AND
16060: IFFALSE 16224
// begin if IsDrivenBy ( tmp ) then
16062: LD_VAR 0 13
16066: PPUSH
16067: CALL_OW 311
16071: IFFALSE 16075
// continue ;
16073: GO 15874
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
16075: LD_VAR 0 6
16079: PPUSH
16080: LD_INT 3
16082: PUSH
16083: LD_INT 60
16085: PUSH
16086: EMPTY
16087: LIST
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 3
16095: PUSH
16096: LD_INT 55
16098: PUSH
16099: EMPTY
16100: LIST
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 72
16114: IFFALSE 16222
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
16116: LD_ADDR_VAR 0 18
16120: PUSH
16121: LD_VAR 0 6
16125: PPUSH
16126: LD_INT 3
16128: PUSH
16129: LD_INT 60
16131: PUSH
16132: EMPTY
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 3
16141: PUSH
16142: LD_INT 55
16144: PUSH
16145: EMPTY
16146: LIST
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PPUSH
16156: CALL_OW 72
16160: PUSH
16161: LD_INT 1
16163: ARRAY
16164: ST_TO_ADDR
// if IsInUnit ( driver ) then
16165: LD_VAR 0 18
16169: PPUSH
16170: CALL_OW 310
16174: IFFALSE 16185
// ComExit ( driver ) ;
16176: LD_VAR 0 18
16180: PPUSH
16181: CALL 40918 0 1
// AddComEnterUnit ( driver , tmp ) ;
16185: LD_VAR 0 18
16189: PPUSH
16190: LD_VAR 0 13
16194: PPUSH
16195: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
16199: LD_VAR 0 18
16203: PPUSH
16204: LD_VAR 0 7
16208: PPUSH
16209: CALL_OW 173
// AddComExitVehicle ( driver ) ;
16213: LD_VAR 0 18
16217: PPUSH
16218: CALL_OW 181
// end ; continue ;
16222: GO 15874
// end ; if not cleaners or not tmp in cleaners then
16224: LD_VAR 0 6
16228: NOT
16229: PUSH
16230: LD_VAR 0 13
16234: PUSH
16235: LD_VAR 0 6
16239: IN
16240: NOT
16241: OR
16242: IFFALSE 16549
// begin if dep then
16244: LD_VAR 0 17
16248: IFFALSE 16384
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16250: LD_ADDR_VAR 0 16
16254: PUSH
16255: LD_VAR 0 17
16259: PUSH
16260: LD_INT 1
16262: ARRAY
16263: PPUSH
16264: CALL_OW 250
16268: PPUSH
16269: LD_VAR 0 17
16273: PUSH
16274: LD_INT 1
16276: ARRAY
16277: PPUSH
16278: CALL_OW 254
16282: PPUSH
16283: LD_INT 5
16285: PPUSH
16286: CALL_OW 272
16290: PUSH
16291: LD_VAR 0 17
16295: PUSH
16296: LD_INT 1
16298: ARRAY
16299: PPUSH
16300: CALL_OW 251
16304: PPUSH
16305: LD_VAR 0 17
16309: PUSH
16310: LD_INT 1
16312: ARRAY
16313: PPUSH
16314: CALL_OW 254
16318: PPUSH
16319: LD_INT 5
16321: PPUSH
16322: CALL_OW 273
16326: PUSH
16327: EMPTY
16328: LIST
16329: LIST
16330: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16331: LD_VAR 0 16
16335: PUSH
16336: LD_INT 1
16338: ARRAY
16339: PPUSH
16340: LD_VAR 0 16
16344: PUSH
16345: LD_INT 2
16347: ARRAY
16348: PPUSH
16349: CALL_OW 488
16353: IFFALSE 16384
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16355: LD_VAR 0 13
16359: PPUSH
16360: LD_VAR 0 16
16364: PUSH
16365: LD_INT 1
16367: ARRAY
16368: PPUSH
16369: LD_VAR 0 16
16373: PUSH
16374: LD_INT 2
16376: ARRAY
16377: PPUSH
16378: CALL_OW 111
// continue ;
16382: GO 15874
// end ; end ; r := GetDir ( tmp ) ;
16384: LD_ADDR_VAR 0 15
16388: PUSH
16389: LD_VAR 0 13
16393: PPUSH
16394: CALL_OW 254
16398: ST_TO_ADDR
// if r = 5 then
16399: LD_VAR 0 15
16403: PUSH
16404: LD_INT 5
16406: EQUAL
16407: IFFALSE 16417
// r := 0 ;
16409: LD_ADDR_VAR 0 15
16413: PUSH
16414: LD_INT 0
16416: ST_TO_ADDR
// for j = r to 5 do
16417: LD_ADDR_VAR 0 10
16421: PUSH
16422: DOUBLE
16423: LD_VAR 0 15
16427: DEC
16428: ST_TO_ADDR
16429: LD_INT 5
16431: PUSH
16432: FOR_TO
16433: IFFALSE 16547
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16435: LD_ADDR_VAR 0 11
16439: PUSH
16440: LD_VAR 0 13
16444: PPUSH
16445: CALL_OW 250
16449: PPUSH
16450: LD_VAR 0 10
16454: PPUSH
16455: LD_INT 2
16457: PPUSH
16458: CALL_OW 272
16462: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16463: LD_ADDR_VAR 0 12
16467: PUSH
16468: LD_VAR 0 13
16472: PPUSH
16473: CALL_OW 251
16477: PPUSH
16478: LD_VAR 0 10
16482: PPUSH
16483: LD_INT 2
16485: PPUSH
16486: CALL_OW 273
16490: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16491: LD_VAR 0 11
16495: PPUSH
16496: LD_VAR 0 12
16500: PPUSH
16501: CALL_OW 488
16505: PUSH
16506: LD_VAR 0 11
16510: PPUSH
16511: LD_VAR 0 12
16515: PPUSH
16516: CALL_OW 428
16520: NOT
16521: AND
16522: IFFALSE 16545
// begin ComMoveXY ( tmp , _x , _y ) ;
16524: LD_VAR 0 13
16528: PPUSH
16529: LD_VAR 0 11
16533: PPUSH
16534: LD_VAR 0 12
16538: PPUSH
16539: CALL_OW 111
// break ;
16543: GO 16547
// end ; end ;
16545: GO 16432
16547: POP
16548: POP
// end ; end ;
16549: GO 15874
16551: POP
16552: POP
// end ;
16553: LD_VAR 0 8
16557: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16558: LD_INT 0
16560: PPUSH
// result := true ;
16561: LD_ADDR_VAR 0 3
16565: PUSH
16566: LD_INT 1
16568: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16569: LD_VAR 0 2
16573: PUSH
16574: LD_INT 24
16576: DOUBLE
16577: EQUAL
16578: IFTRUE 16588
16580: LD_INT 33
16582: DOUBLE
16583: EQUAL
16584: IFTRUE 16588
16586: GO 16613
16588: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16589: LD_ADDR_VAR 0 3
16593: PUSH
16594: LD_INT 32
16596: PPUSH
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 321
16606: PUSH
16607: LD_INT 2
16609: EQUAL
16610: ST_TO_ADDR
16611: GO 16933
16613: LD_INT 20
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16646
16621: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16622: LD_ADDR_VAR 0 3
16626: PUSH
16627: LD_INT 6
16629: PPUSH
16630: LD_VAR 0 1
16634: PPUSH
16635: CALL_OW 321
16639: PUSH
16640: LD_INT 2
16642: EQUAL
16643: ST_TO_ADDR
16644: GO 16933
16646: LD_INT 22
16648: DOUBLE
16649: EQUAL
16650: IFTRUE 16660
16652: LD_INT 36
16654: DOUBLE
16655: EQUAL
16656: IFTRUE 16660
16658: GO 16685
16660: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16661: LD_ADDR_VAR 0 3
16665: PUSH
16666: LD_INT 15
16668: PPUSH
16669: LD_VAR 0 1
16673: PPUSH
16674: CALL_OW 321
16678: PUSH
16679: LD_INT 2
16681: EQUAL
16682: ST_TO_ADDR
16683: GO 16933
16685: LD_INT 30
16687: DOUBLE
16688: EQUAL
16689: IFTRUE 16693
16691: GO 16718
16693: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16694: LD_ADDR_VAR 0 3
16698: PUSH
16699: LD_INT 20
16701: PPUSH
16702: LD_VAR 0 1
16706: PPUSH
16707: CALL_OW 321
16711: PUSH
16712: LD_INT 2
16714: EQUAL
16715: ST_TO_ADDR
16716: GO 16933
16718: LD_INT 28
16720: DOUBLE
16721: EQUAL
16722: IFTRUE 16732
16724: LD_INT 21
16726: DOUBLE
16727: EQUAL
16728: IFTRUE 16732
16730: GO 16757
16732: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16733: LD_ADDR_VAR 0 3
16737: PUSH
16738: LD_INT 21
16740: PPUSH
16741: LD_VAR 0 1
16745: PPUSH
16746: CALL_OW 321
16750: PUSH
16751: LD_INT 2
16753: EQUAL
16754: ST_TO_ADDR
16755: GO 16933
16757: LD_INT 16
16759: DOUBLE
16760: EQUAL
16761: IFTRUE 16765
16763: GO 16792
16765: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16766: LD_ADDR_VAR 0 3
16770: PUSH
16771: LD_EXP 58
16775: PPUSH
16776: LD_VAR 0 1
16780: PPUSH
16781: CALL_OW 321
16785: PUSH
16786: LD_INT 2
16788: EQUAL
16789: ST_TO_ADDR
16790: GO 16933
16792: LD_INT 19
16794: DOUBLE
16795: EQUAL
16796: IFTRUE 16806
16798: LD_INT 23
16800: DOUBLE
16801: EQUAL
16802: IFTRUE 16806
16804: GO 16833
16806: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16807: LD_ADDR_VAR 0 3
16811: PUSH
16812: LD_EXP 57
16816: PPUSH
16817: LD_VAR 0 1
16821: PPUSH
16822: CALL_OW 321
16826: PUSH
16827: LD_INT 2
16829: EQUAL
16830: ST_TO_ADDR
16831: GO 16933
16833: LD_INT 17
16835: DOUBLE
16836: EQUAL
16837: IFTRUE 16841
16839: GO 16866
16841: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16842: LD_ADDR_VAR 0 3
16846: PUSH
16847: LD_INT 39
16849: PPUSH
16850: LD_VAR 0 1
16854: PPUSH
16855: CALL_OW 321
16859: PUSH
16860: LD_INT 2
16862: EQUAL
16863: ST_TO_ADDR
16864: GO 16933
16866: LD_INT 18
16868: DOUBLE
16869: EQUAL
16870: IFTRUE 16874
16872: GO 16899
16874: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16875: LD_ADDR_VAR 0 3
16879: PUSH
16880: LD_INT 40
16882: PPUSH
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL_OW 321
16892: PUSH
16893: LD_INT 2
16895: EQUAL
16896: ST_TO_ADDR
16897: GO 16933
16899: LD_INT 27
16901: DOUBLE
16902: EQUAL
16903: IFTRUE 16907
16905: GO 16932
16907: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16908: LD_ADDR_VAR 0 3
16912: PUSH
16913: LD_INT 35
16915: PPUSH
16916: LD_VAR 0 1
16920: PPUSH
16921: CALL_OW 321
16925: PUSH
16926: LD_INT 2
16928: EQUAL
16929: ST_TO_ADDR
16930: GO 16933
16932: POP
// end ;
16933: LD_VAR 0 3
16937: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16938: LD_INT 0
16940: PPUSH
16941: PPUSH
16942: PPUSH
16943: PPUSH
16944: PPUSH
16945: PPUSH
16946: PPUSH
16947: PPUSH
16948: PPUSH
16949: PPUSH
16950: PPUSH
// result := false ;
16951: LD_ADDR_VAR 0 6
16955: PUSH
16956: LD_INT 0
16958: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16959: LD_VAR 0 1
16963: NOT
16964: PUSH
16965: LD_VAR 0 1
16969: PPUSH
16970: CALL_OW 266
16974: PUSH
16975: LD_INT 0
16977: PUSH
16978: LD_INT 1
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: IN
16985: NOT
16986: OR
16987: PUSH
16988: LD_VAR 0 2
16992: NOT
16993: OR
16994: PUSH
16995: LD_VAR 0 5
16999: PUSH
17000: LD_INT 0
17002: PUSH
17003: LD_INT 1
17005: PUSH
17006: LD_INT 2
17008: PUSH
17009: LD_INT 3
17011: PUSH
17012: LD_INT 4
17014: PUSH
17015: LD_INT 5
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: IN
17026: NOT
17027: OR
17028: PUSH
17029: LD_VAR 0 3
17033: PPUSH
17034: LD_VAR 0 4
17038: PPUSH
17039: CALL_OW 488
17043: NOT
17044: OR
17045: IFFALSE 17049
// exit ;
17047: GO 17785
// side := GetSide ( depot ) ;
17049: LD_ADDR_VAR 0 9
17053: PUSH
17054: LD_VAR 0 1
17058: PPUSH
17059: CALL_OW 255
17063: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
17064: LD_VAR 0 9
17068: PPUSH
17069: LD_VAR 0 2
17073: PPUSH
17074: CALL 16558 0 2
17078: NOT
17079: IFFALSE 17083
// exit ;
17081: GO 17785
// pom := GetBase ( depot ) ;
17083: LD_ADDR_VAR 0 10
17087: PUSH
17088: LD_VAR 0 1
17092: PPUSH
17093: CALL_OW 274
17097: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
17098: LD_ADDR_VAR 0 11
17102: PUSH
17103: LD_VAR 0 2
17107: PPUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 248
17117: PPUSH
17118: CALL_OW 450
17122: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
17123: LD_VAR 0 10
17127: PPUSH
17128: LD_INT 1
17130: PPUSH
17131: CALL_OW 275
17135: PUSH
17136: LD_VAR 0 11
17140: PUSH
17141: LD_INT 1
17143: ARRAY
17144: GREATEREQUAL
17145: PUSH
17146: LD_VAR 0 10
17150: PPUSH
17151: LD_INT 2
17153: PPUSH
17154: CALL_OW 275
17158: PUSH
17159: LD_VAR 0 11
17163: PUSH
17164: LD_INT 2
17166: ARRAY
17167: GREATEREQUAL
17168: AND
17169: PUSH
17170: LD_VAR 0 10
17174: PPUSH
17175: LD_INT 3
17177: PPUSH
17178: CALL_OW 275
17182: PUSH
17183: LD_VAR 0 11
17187: PUSH
17188: LD_INT 3
17190: ARRAY
17191: GREATEREQUAL
17192: AND
17193: NOT
17194: IFFALSE 17198
// exit ;
17196: GO 17785
// if GetBType ( depot ) = b_depot then
17198: LD_VAR 0 1
17202: PPUSH
17203: CALL_OW 266
17207: PUSH
17208: LD_INT 0
17210: EQUAL
17211: IFFALSE 17223
// dist := 28 else
17213: LD_ADDR_VAR 0 14
17217: PUSH
17218: LD_INT 28
17220: ST_TO_ADDR
17221: GO 17231
// dist := 36 ;
17223: LD_ADDR_VAR 0 14
17227: PUSH
17228: LD_INT 36
17230: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17231: LD_VAR 0 1
17235: PPUSH
17236: LD_VAR 0 3
17240: PPUSH
17241: LD_VAR 0 4
17245: PPUSH
17246: CALL_OW 297
17250: PUSH
17251: LD_VAR 0 14
17255: GREATER
17256: IFFALSE 17260
// exit ;
17258: GO 17785
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17260: LD_ADDR_VAR 0 12
17264: PUSH
17265: LD_VAR 0 2
17269: PPUSH
17270: LD_VAR 0 3
17274: PPUSH
17275: LD_VAR 0 4
17279: PPUSH
17280: LD_VAR 0 5
17284: PPUSH
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL_OW 248
17294: PPUSH
17295: LD_INT 0
17297: PPUSH
17298: CALL 17790 0 6
17302: ST_TO_ADDR
// if not hexes then
17303: LD_VAR 0 12
17307: NOT
17308: IFFALSE 17312
// exit ;
17310: GO 17785
// hex := GetHexInfo ( x , y ) ;
17312: LD_ADDR_VAR 0 15
17316: PUSH
17317: LD_VAR 0 3
17321: PPUSH
17322: LD_VAR 0 4
17326: PPUSH
17327: CALL_OW 546
17331: ST_TO_ADDR
// if hex [ 1 ] then
17332: LD_VAR 0 15
17336: PUSH
17337: LD_INT 1
17339: ARRAY
17340: IFFALSE 17344
// exit ;
17342: GO 17785
// height := hex [ 2 ] ;
17344: LD_ADDR_VAR 0 13
17348: PUSH
17349: LD_VAR 0 15
17353: PUSH
17354: LD_INT 2
17356: ARRAY
17357: ST_TO_ADDR
// for i = 1 to hexes do
17358: LD_ADDR_VAR 0 7
17362: PUSH
17363: DOUBLE
17364: LD_INT 1
17366: DEC
17367: ST_TO_ADDR
17368: LD_VAR 0 12
17372: PUSH
17373: FOR_TO
17374: IFFALSE 17704
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17376: LD_VAR 0 12
17380: PUSH
17381: LD_VAR 0 7
17385: ARRAY
17386: PUSH
17387: LD_INT 1
17389: ARRAY
17390: PPUSH
17391: LD_VAR 0 12
17395: PUSH
17396: LD_VAR 0 7
17400: ARRAY
17401: PUSH
17402: LD_INT 2
17404: ARRAY
17405: PPUSH
17406: CALL_OW 488
17410: NOT
17411: PUSH
17412: LD_VAR 0 12
17416: PUSH
17417: LD_VAR 0 7
17421: ARRAY
17422: PUSH
17423: LD_INT 1
17425: ARRAY
17426: PPUSH
17427: LD_VAR 0 12
17431: PUSH
17432: LD_VAR 0 7
17436: ARRAY
17437: PUSH
17438: LD_INT 2
17440: ARRAY
17441: PPUSH
17442: CALL_OW 428
17446: PUSH
17447: LD_INT 0
17449: GREATER
17450: OR
17451: PUSH
17452: LD_VAR 0 12
17456: PUSH
17457: LD_VAR 0 7
17461: ARRAY
17462: PUSH
17463: LD_INT 1
17465: ARRAY
17466: PPUSH
17467: LD_VAR 0 12
17471: PUSH
17472: LD_VAR 0 7
17476: ARRAY
17477: PUSH
17478: LD_INT 2
17480: ARRAY
17481: PPUSH
17482: CALL_OW 351
17486: OR
17487: IFFALSE 17493
// exit ;
17489: POP
17490: POP
17491: GO 17785
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17493: LD_ADDR_VAR 0 8
17497: PUSH
17498: LD_VAR 0 12
17502: PUSH
17503: LD_VAR 0 7
17507: ARRAY
17508: PUSH
17509: LD_INT 1
17511: ARRAY
17512: PPUSH
17513: LD_VAR 0 12
17517: PUSH
17518: LD_VAR 0 7
17522: ARRAY
17523: PUSH
17524: LD_INT 2
17526: ARRAY
17527: PPUSH
17528: CALL_OW 546
17532: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17533: LD_VAR 0 8
17537: PUSH
17538: LD_INT 1
17540: ARRAY
17541: PUSH
17542: LD_VAR 0 8
17546: PUSH
17547: LD_INT 2
17549: ARRAY
17550: PUSH
17551: LD_VAR 0 13
17555: PUSH
17556: LD_INT 2
17558: PLUS
17559: GREATER
17560: OR
17561: PUSH
17562: LD_VAR 0 8
17566: PUSH
17567: LD_INT 2
17569: ARRAY
17570: PUSH
17571: LD_VAR 0 13
17575: PUSH
17576: LD_INT 2
17578: MINUS
17579: LESS
17580: OR
17581: PUSH
17582: LD_VAR 0 8
17586: PUSH
17587: LD_INT 3
17589: ARRAY
17590: PUSH
17591: LD_INT 0
17593: PUSH
17594: LD_INT 8
17596: PUSH
17597: LD_INT 9
17599: PUSH
17600: LD_INT 10
17602: PUSH
17603: LD_INT 11
17605: PUSH
17606: LD_INT 12
17608: PUSH
17609: LD_INT 13
17611: PUSH
17612: LD_INT 16
17614: PUSH
17615: LD_INT 17
17617: PUSH
17618: LD_INT 18
17620: PUSH
17621: LD_INT 19
17623: PUSH
17624: LD_INT 20
17626: PUSH
17627: LD_INT 21
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: IN
17645: NOT
17646: OR
17647: PUSH
17648: LD_VAR 0 8
17652: PUSH
17653: LD_INT 5
17655: ARRAY
17656: NOT
17657: OR
17658: PUSH
17659: LD_VAR 0 8
17663: PUSH
17664: LD_INT 6
17666: ARRAY
17667: PUSH
17668: LD_INT 1
17670: PUSH
17671: LD_INT 2
17673: PUSH
17674: LD_INT 7
17676: PUSH
17677: LD_INT 9
17679: PUSH
17680: LD_INT 10
17682: PUSH
17683: LD_INT 11
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: IN
17694: NOT
17695: OR
17696: IFFALSE 17702
// exit ;
17698: POP
17699: POP
17700: GO 17785
// end ;
17702: GO 17373
17704: POP
17705: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17706: LD_VAR 0 9
17710: PPUSH
17711: LD_VAR 0 3
17715: PPUSH
17716: LD_VAR 0 4
17720: PPUSH
17721: LD_INT 20
17723: PPUSH
17724: CALL 9731 0 4
17728: PUSH
17729: LD_INT 4
17731: ARRAY
17732: IFFALSE 17736
// exit ;
17734: GO 17785
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17736: LD_VAR 0 2
17740: PUSH
17741: LD_INT 29
17743: PUSH
17744: LD_INT 30
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: IN
17751: PUSH
17752: LD_VAR 0 3
17756: PPUSH
17757: LD_VAR 0 4
17761: PPUSH
17762: LD_VAR 0 9
17766: PPUSH
17767: CALL_OW 440
17771: NOT
17772: AND
17773: IFFALSE 17777
// exit ;
17775: GO 17785
// result := true ;
17777: LD_ADDR_VAR 0 6
17781: PUSH
17782: LD_INT 1
17784: ST_TO_ADDR
// end ;
17785: LD_VAR 0 6
17789: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17790: LD_INT 0
17792: PPUSH
17793: PPUSH
17794: PPUSH
17795: PPUSH
17796: PPUSH
17797: PPUSH
17798: PPUSH
17799: PPUSH
17800: PPUSH
17801: PPUSH
17802: PPUSH
17803: PPUSH
17804: PPUSH
17805: PPUSH
17806: PPUSH
17807: PPUSH
17808: PPUSH
17809: PPUSH
17810: PPUSH
17811: PPUSH
17812: PPUSH
17813: PPUSH
17814: PPUSH
17815: PPUSH
17816: PPUSH
17817: PPUSH
17818: PPUSH
17819: PPUSH
17820: PPUSH
17821: PPUSH
17822: PPUSH
17823: PPUSH
17824: PPUSH
17825: PPUSH
17826: PPUSH
17827: PPUSH
17828: PPUSH
17829: PPUSH
17830: PPUSH
17831: PPUSH
17832: PPUSH
17833: PPUSH
17834: PPUSH
17835: PPUSH
17836: PPUSH
17837: PPUSH
17838: PPUSH
17839: PPUSH
17840: PPUSH
17841: PPUSH
17842: PPUSH
17843: PPUSH
17844: PPUSH
17845: PPUSH
17846: PPUSH
17847: PPUSH
17848: PPUSH
17849: PPUSH
// result = [ ] ;
17850: LD_ADDR_VAR 0 7
17854: PUSH
17855: EMPTY
17856: ST_TO_ADDR
// temp_list = [ ] ;
17857: LD_ADDR_VAR 0 9
17861: PUSH
17862: EMPTY
17863: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17864: LD_VAR 0 4
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: LD_INT 1
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: LD_INT 3
17880: PUSH
17881: LD_INT 4
17883: PUSH
17884: LD_INT 5
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: IN
17895: NOT
17896: PUSH
17897: LD_VAR 0 1
17901: PUSH
17902: LD_INT 0
17904: PUSH
17905: LD_INT 1
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: IN
17912: PUSH
17913: LD_VAR 0 5
17917: PUSH
17918: LD_INT 1
17920: PUSH
17921: LD_INT 2
17923: PUSH
17924: LD_INT 3
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: LIST
17931: IN
17932: NOT
17933: AND
17934: OR
17935: IFFALSE 17939
// exit ;
17937: GO 36330
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17939: LD_VAR 0 1
17943: PUSH
17944: LD_INT 6
17946: PUSH
17947: LD_INT 7
17949: PUSH
17950: LD_INT 8
17952: PUSH
17953: LD_INT 13
17955: PUSH
17956: LD_INT 12
17958: PUSH
17959: LD_INT 15
17961: PUSH
17962: LD_INT 11
17964: PUSH
17965: LD_INT 14
17967: PUSH
17968: LD_INT 10
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: IN
17982: IFFALSE 17992
// btype = b_lab ;
17984: LD_ADDR_VAR 0 1
17988: PUSH
17989: LD_INT 6
17991: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17992: LD_VAR 0 6
17996: PUSH
17997: LD_INT 0
17999: PUSH
18000: LD_INT 1
18002: PUSH
18003: LD_INT 2
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: LIST
18010: IN
18011: NOT
18012: PUSH
18013: LD_VAR 0 1
18017: PUSH
18018: LD_INT 0
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: LD_INT 2
18026: PUSH
18027: LD_INT 3
18029: PUSH
18030: LD_INT 6
18032: PUSH
18033: LD_INT 36
18035: PUSH
18036: LD_INT 4
18038: PUSH
18039: LD_INT 5
18041: PUSH
18042: LD_INT 31
18044: PUSH
18045: LD_INT 32
18047: PUSH
18048: LD_INT 33
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: IN
18064: NOT
18065: PUSH
18066: LD_VAR 0 6
18070: PUSH
18071: LD_INT 1
18073: EQUAL
18074: AND
18075: OR
18076: PUSH
18077: LD_VAR 0 1
18081: PUSH
18082: LD_INT 2
18084: PUSH
18085: LD_INT 3
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: IN
18092: NOT
18093: PUSH
18094: LD_VAR 0 6
18098: PUSH
18099: LD_INT 2
18101: EQUAL
18102: AND
18103: OR
18104: IFFALSE 18114
// mode = 0 ;
18106: LD_ADDR_VAR 0 6
18110: PUSH
18111: LD_INT 0
18113: ST_TO_ADDR
// case mode of 0 :
18114: LD_VAR 0 6
18118: PUSH
18119: LD_INT 0
18121: DOUBLE
18122: EQUAL
18123: IFTRUE 18127
18125: GO 29580
18127: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
18128: LD_ADDR_VAR 0 11
18132: PUSH
18133: LD_INT 0
18135: PUSH
18136: LD_INT 0
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 0
18145: PUSH
18146: LD_INT 1
18148: NEG
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 1
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 1
18166: PUSH
18167: LD_INT 1
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: LD_INT 0
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 1
18186: NEG
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 1
18197: NEG
18198: PUSH
18199: LD_INT 1
18201: NEG
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 1
18209: NEG
18210: PUSH
18211: LD_INT 2
18213: NEG
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 0
18221: PUSH
18222: LD_INT 2
18224: NEG
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: LD_INT 1
18235: NEG
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 1
18243: PUSH
18244: LD_INT 2
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: LD_INT 0
18253: PUSH
18254: LD_INT 2
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 1
18263: NEG
18264: PUSH
18265: LD_INT 1
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: LD_INT 3
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 0
18284: PUSH
18285: LD_INT 3
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 1
18294: NEG
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: EMPTY
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18321: LD_ADDR_VAR 0 12
18325: PUSH
18326: LD_INT 0
18328: PUSH
18329: LD_INT 0
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: LD_INT 0
18338: PUSH
18339: LD_INT 1
18341: NEG
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: LD_INT 0
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 0
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 1
18379: NEG
18380: PUSH
18381: LD_INT 0
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 1
18390: NEG
18391: PUSH
18392: LD_INT 1
18394: NEG
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 1
18402: PUSH
18403: LD_INT 1
18405: NEG
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: LD_INT 0
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 1
18433: NEG
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 2
18444: NEG
18445: PUSH
18446: LD_INT 0
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 2
18455: NEG
18456: PUSH
18457: LD_INT 1
18459: NEG
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 2
18467: NEG
18468: PUSH
18469: LD_INT 1
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 3
18478: NEG
18479: PUSH
18480: LD_INT 0
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 3
18489: NEG
18490: PUSH
18491: LD_INT 1
18493: NEG
18494: PUSH
18495: EMPTY
18496: LIST
18497: LIST
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18517: LD_ADDR_VAR 0 13
18521: PUSH
18522: LD_INT 0
18524: PUSH
18525: LD_INT 0
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 0
18534: PUSH
18535: LD_INT 1
18537: NEG
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 1
18545: PUSH
18546: LD_INT 0
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 1
18555: PUSH
18556: LD_INT 1
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: LD_INT 0
18565: PUSH
18566: LD_INT 1
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 1
18575: NEG
18576: PUSH
18577: LD_INT 0
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: NEG
18587: PUSH
18588: LD_INT 1
18590: NEG
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 1
18598: NEG
18599: PUSH
18600: LD_INT 2
18602: NEG
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: LD_INT 2
18610: PUSH
18611: LD_INT 1
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 2
18620: PUSH
18621: LD_INT 2
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 1
18630: PUSH
18631: LD_INT 2
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 2
18640: NEG
18641: PUSH
18642: LD_INT 1
18644: NEG
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 2
18652: NEG
18653: PUSH
18654: LD_INT 2
18656: NEG
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 2
18664: NEG
18665: PUSH
18666: LD_INT 3
18668: NEG
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 3
18676: NEG
18677: PUSH
18678: LD_INT 2
18680: NEG
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 3
18688: NEG
18689: PUSH
18690: LD_INT 3
18692: NEG
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18716: LD_ADDR_VAR 0 14
18720: PUSH
18721: LD_INT 0
18723: PUSH
18724: LD_INT 0
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: LD_INT 1
18736: NEG
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 1
18754: PUSH
18755: LD_INT 1
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 0
18764: PUSH
18765: LD_INT 1
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 1
18774: NEG
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 1
18785: NEG
18786: PUSH
18787: LD_INT 1
18789: NEG
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: LD_INT 2
18801: NEG
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 0
18809: PUSH
18810: LD_INT 2
18812: NEG
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 1
18820: PUSH
18821: LD_INT 1
18823: NEG
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: LD_INT 1
18831: PUSH
18832: LD_INT 2
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 0
18841: PUSH
18842: LD_INT 2
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 1
18851: NEG
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 1
18862: NEG
18863: PUSH
18864: LD_INT 3
18866: NEG
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 0
18874: PUSH
18875: LD_INT 3
18877: NEG
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 1
18885: PUSH
18886: LD_INT 2
18888: NEG
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18912: LD_ADDR_VAR 0 15
18916: PUSH
18917: LD_INT 0
18919: PUSH
18920: LD_INT 0
18922: PUSH
18923: EMPTY
18924: LIST
18925: LIST
18926: PUSH
18927: LD_INT 0
18929: PUSH
18930: LD_INT 1
18932: NEG
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: PUSH
18938: LD_INT 1
18940: PUSH
18941: LD_INT 0
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 1
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 0
18960: PUSH
18961: LD_INT 1
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 1
18970: NEG
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 1
18981: NEG
18982: PUSH
18983: LD_INT 1
18985: NEG
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 1
18993: PUSH
18994: LD_INT 1
18996: NEG
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 2
19004: PUSH
19005: LD_INT 0
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 2
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 1
19024: NEG
19025: PUSH
19026: LD_INT 1
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 2
19035: NEG
19036: PUSH
19037: LD_INT 0
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 2
19046: NEG
19047: PUSH
19048: LD_INT 1
19050: NEG
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 2
19058: PUSH
19059: LD_INT 1
19061: NEG
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 3
19069: PUSH
19070: LD_INT 0
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 3
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
19105: LD_ADDR_VAR 0 16
19109: PUSH
19110: LD_INT 0
19112: PUSH
19113: LD_INT 0
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 0
19122: PUSH
19123: LD_INT 1
19125: NEG
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 1
19133: PUSH
19134: LD_INT 0
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 1
19143: PUSH
19144: LD_INT 1
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 0
19153: PUSH
19154: LD_INT 1
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 1
19163: NEG
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PUSH
19172: LD_INT 1
19174: NEG
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 1
19186: NEG
19187: PUSH
19188: LD_INT 2
19190: NEG
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 2
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 2
19208: PUSH
19209: LD_INT 2
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 1
19218: PUSH
19219: LD_INT 2
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: LD_INT 2
19228: NEG
19229: PUSH
19230: LD_INT 1
19232: NEG
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 2
19240: NEG
19241: PUSH
19242: LD_INT 2
19244: NEG
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 3
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 3
19262: PUSH
19263: LD_INT 3
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 2
19272: PUSH
19273: LD_INT 3
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19298: LD_ADDR_VAR 0 17
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: LD_INT 0
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: LD_INT 1
19318: NEG
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 1
19326: PUSH
19327: LD_INT 0
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 1
19336: PUSH
19337: LD_INT 1
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 0
19346: PUSH
19347: LD_INT 1
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 1
19356: NEG
19357: PUSH
19358: LD_INT 0
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 1
19367: NEG
19368: PUSH
19369: LD_INT 1
19371: NEG
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: LD_INT 1
19379: NEG
19380: PUSH
19381: LD_INT 2
19383: NEG
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 0
19391: PUSH
19392: LD_INT 2
19394: NEG
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: LD_INT 1
19405: NEG
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 2
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 2
19423: PUSH
19424: LD_INT 1
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 2
19433: PUSH
19434: LD_INT 2
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 1
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 0
19453: PUSH
19454: LD_INT 2
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 1
19463: NEG
19464: PUSH
19465: LD_INT 1
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 2
19474: NEG
19475: PUSH
19476: LD_INT 0
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 2
19485: NEG
19486: PUSH
19487: LD_INT 1
19489: NEG
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 2
19497: NEG
19498: PUSH
19499: LD_INT 2
19501: NEG
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19528: LD_ADDR_VAR 0 18
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: LD_INT 0
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 0
19545: PUSH
19546: LD_INT 1
19548: NEG
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 1
19556: PUSH
19557: LD_INT 0
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: LD_INT 1
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: LD_INT 1
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: LD_INT 0
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 1
19597: NEG
19598: PUSH
19599: LD_INT 1
19601: NEG
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: LD_INT 2
19613: NEG
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 0
19621: PUSH
19622: LD_INT 2
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 1
19632: PUSH
19633: LD_INT 1
19635: NEG
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 2
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: LD_INT 2
19653: PUSH
19654: LD_INT 1
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 2
19663: PUSH
19664: LD_INT 2
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PUSH
19671: LD_INT 1
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 0
19683: PUSH
19684: LD_INT 2
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: LD_INT 1
19693: NEG
19694: PUSH
19695: LD_INT 1
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 2
19704: NEG
19705: PUSH
19706: LD_INT 0
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 2
19715: NEG
19716: PUSH
19717: LD_INT 1
19719: NEG
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 2
19727: NEG
19728: PUSH
19729: LD_INT 2
19731: NEG
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19758: LD_ADDR_VAR 0 19
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: LD_INT 0
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 0
19775: PUSH
19776: LD_INT 1
19778: NEG
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 1
19786: PUSH
19787: LD_INT 0
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 1
19796: PUSH
19797: LD_INT 1
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 0
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 1
19816: NEG
19817: PUSH
19818: LD_INT 0
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 1
19827: NEG
19828: PUSH
19829: LD_INT 1
19831: NEG
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 1
19839: NEG
19840: PUSH
19841: LD_INT 2
19843: NEG
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: PUSH
19849: LD_INT 0
19851: PUSH
19852: LD_INT 2
19854: NEG
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: LD_INT 1
19865: NEG
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: LD_INT 2
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 2
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 2
19893: PUSH
19894: LD_INT 2
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 1
19903: PUSH
19904: LD_INT 2
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 0
19913: PUSH
19914: LD_INT 2
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: PUSH
19921: LD_INT 1
19923: NEG
19924: PUSH
19925: LD_INT 1
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 2
19934: NEG
19935: PUSH
19936: LD_INT 0
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 2
19945: NEG
19946: PUSH
19947: LD_INT 1
19949: NEG
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: NEG
19958: PUSH
19959: LD_INT 2
19961: NEG
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19988: LD_ADDR_VAR 0 20
19992: PUSH
19993: LD_INT 0
19995: PUSH
19996: LD_INT 0
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 0
20005: PUSH
20006: LD_INT 1
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 1
20016: PUSH
20017: LD_INT 0
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 1
20026: PUSH
20027: LD_INT 1
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 0
20036: PUSH
20037: LD_INT 1
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 1
20046: NEG
20047: PUSH
20048: LD_INT 0
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 1
20057: NEG
20058: PUSH
20059: LD_INT 1
20061: NEG
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PUSH
20067: LD_INT 1
20069: NEG
20070: PUSH
20071: LD_INT 2
20073: NEG
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: LD_INT 2
20084: NEG
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 1
20092: PUSH
20093: LD_INT 1
20095: NEG
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: LD_INT 0
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: LD_INT 1
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 2
20123: PUSH
20124: LD_INT 2
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 1
20133: PUSH
20134: LD_INT 2
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 0
20143: PUSH
20144: LD_INT 2
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: LD_INT 1
20153: NEG
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 2
20164: NEG
20165: PUSH
20166: LD_INT 0
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 2
20175: NEG
20176: PUSH
20177: LD_INT 1
20179: NEG
20180: PUSH
20181: EMPTY
20182: LIST
20183: LIST
20184: PUSH
20185: LD_INT 2
20187: NEG
20188: PUSH
20189: LD_INT 2
20191: NEG
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20218: LD_ADDR_VAR 0 21
20222: PUSH
20223: LD_INT 0
20225: PUSH
20226: LD_INT 0
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 0
20235: PUSH
20236: LD_INT 1
20238: NEG
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 1
20246: PUSH
20247: LD_INT 0
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 1
20256: PUSH
20257: LD_INT 1
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 0
20266: PUSH
20267: LD_INT 1
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 1
20276: NEG
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 1
20287: NEG
20288: PUSH
20289: LD_INT 1
20291: NEG
20292: PUSH
20293: EMPTY
20294: LIST
20295: LIST
20296: PUSH
20297: LD_INT 1
20299: NEG
20300: PUSH
20301: LD_INT 2
20303: NEG
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 0
20311: PUSH
20312: LD_INT 2
20314: NEG
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 1
20322: PUSH
20323: LD_INT 1
20325: NEG
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: PUSH
20331: LD_INT 2
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 2
20343: PUSH
20344: LD_INT 1
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 2
20353: PUSH
20354: LD_INT 2
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 1
20363: PUSH
20364: LD_INT 2
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: LD_INT 0
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 1
20383: NEG
20384: PUSH
20385: LD_INT 1
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 2
20394: NEG
20395: PUSH
20396: LD_INT 0
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 2
20405: NEG
20406: PUSH
20407: LD_INT 1
20409: NEG
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: LD_INT 2
20417: NEG
20418: PUSH
20419: LD_INT 2
20421: NEG
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: LIST
20442: LIST
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20448: LD_ADDR_VAR 0 22
20452: PUSH
20453: LD_INT 0
20455: PUSH
20456: LD_INT 0
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 0
20465: PUSH
20466: LD_INT 1
20468: NEG
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: LD_INT 0
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 1
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: LD_INT 1
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 1
20506: NEG
20507: PUSH
20508: LD_INT 0
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 1
20517: NEG
20518: PUSH
20519: LD_INT 1
20521: NEG
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 1
20529: NEG
20530: PUSH
20531: LD_INT 2
20533: NEG
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: LD_INT 0
20541: PUSH
20542: LD_INT 2
20544: NEG
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 1
20552: PUSH
20553: LD_INT 1
20555: NEG
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 2
20573: PUSH
20574: LD_INT 1
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 2
20583: PUSH
20584: LD_INT 2
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 1
20593: PUSH
20594: LD_INT 2
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: LD_INT 0
20603: PUSH
20604: LD_INT 2
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 1
20613: NEG
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 2
20624: NEG
20625: PUSH
20626: LD_INT 0
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 2
20635: NEG
20636: PUSH
20637: LD_INT 1
20639: NEG
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PUSH
20645: LD_INT 2
20647: NEG
20648: PUSH
20649: LD_INT 2
20651: NEG
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: LIST
20676: LIST
20677: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20678: LD_ADDR_VAR 0 23
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 0
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 1
20706: PUSH
20707: LD_INT 0
20709: PUSH
20710: EMPTY
20711: LIST
20712: LIST
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: LD_INT 1
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 0
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 1
20747: NEG
20748: PUSH
20749: LD_INT 1
20751: NEG
20752: PUSH
20753: EMPTY
20754: LIST
20755: LIST
20756: PUSH
20757: LD_INT 1
20759: NEG
20760: PUSH
20761: LD_INT 2
20763: NEG
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: LD_INT 2
20774: NEG
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 1
20782: PUSH
20783: LD_INT 1
20785: NEG
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: LD_INT 1
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: LD_INT 2
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: LD_INT 2
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 2
20854: NEG
20855: PUSH
20856: LD_INT 0
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 2
20865: NEG
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 2
20877: NEG
20878: PUSH
20879: LD_INT 2
20881: NEG
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PUSH
20887: LD_INT 2
20889: NEG
20890: PUSH
20891: LD_INT 3
20893: NEG
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PUSH
20899: LD_INT 1
20901: NEG
20902: PUSH
20903: LD_INT 3
20905: NEG
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 1
20913: PUSH
20914: LD_INT 2
20916: NEG
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 2
20924: PUSH
20925: LD_INT 1
20927: NEG
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20958: LD_ADDR_VAR 0 24
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: LD_INT 0
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 0
20975: PUSH
20976: LD_INT 1
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 1
20986: PUSH
20987: LD_INT 0
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: LD_INT 1
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 0
21006: PUSH
21007: LD_INT 1
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: LD_INT 1
21016: NEG
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: LD_INT 1
21027: NEG
21028: PUSH
21029: LD_INT 1
21031: NEG
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: NEG
21040: PUSH
21041: LD_INT 2
21043: NEG
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 0
21051: PUSH
21052: LD_INT 2
21054: NEG
21055: PUSH
21056: EMPTY
21057: LIST
21058: LIST
21059: PUSH
21060: LD_INT 1
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 2
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 2
21083: PUSH
21084: LD_INT 1
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 2
21093: PUSH
21094: LD_INT 2
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 1
21103: PUSH
21104: LD_INT 2
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 0
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: NEG
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 2
21134: NEG
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 2
21145: NEG
21146: PUSH
21147: LD_INT 1
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 2
21157: NEG
21158: PUSH
21159: LD_INT 2
21161: NEG
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: LD_INT 2
21172: NEG
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 2
21180: PUSH
21181: LD_INT 1
21183: NEG
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 3
21191: PUSH
21192: LD_INT 1
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 3
21201: PUSH
21202: LD_INT 2
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21234: LD_ADDR_VAR 0 25
21238: PUSH
21239: LD_INT 0
21241: PUSH
21242: LD_INT 0
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 1
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 1
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 0
21282: PUSH
21283: LD_INT 1
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 1
21292: NEG
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: EMPTY
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 1
21303: NEG
21304: PUSH
21305: LD_INT 1
21307: NEG
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 1
21315: NEG
21316: PUSH
21317: LD_INT 2
21319: NEG
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: LD_INT 2
21330: NEG
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 1
21338: PUSH
21339: LD_INT 1
21341: NEG
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 2
21349: PUSH
21350: LD_INT 0
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 2
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 2
21369: PUSH
21370: LD_INT 2
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 1
21379: PUSH
21380: LD_INT 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 0
21389: PUSH
21390: LD_INT 2
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 1
21399: NEG
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 2
21410: NEG
21411: PUSH
21412: LD_INT 0
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 2
21421: NEG
21422: PUSH
21423: LD_INT 1
21425: NEG
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 2
21433: NEG
21434: PUSH
21435: LD_INT 2
21437: NEG
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 3
21445: PUSH
21446: LD_INT 1
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 3
21455: PUSH
21456: LD_INT 2
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 2
21465: PUSH
21466: LD_INT 3
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 1
21475: PUSH
21476: LD_INT 3
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: LIST
21507: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21508: LD_ADDR_VAR 0 26
21512: PUSH
21513: LD_INT 0
21515: PUSH
21516: LD_INT 0
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 0
21525: PUSH
21526: LD_INT 1
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: LD_INT 0
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 1
21546: PUSH
21547: LD_INT 1
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: LD_INT 1
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: LD_INT 0
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: NEG
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 1
21589: NEG
21590: PUSH
21591: LD_INT 2
21593: NEG
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 0
21601: PUSH
21602: LD_INT 2
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 1
21612: PUSH
21613: LD_INT 1
21615: NEG
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 2
21623: PUSH
21624: LD_INT 0
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: LD_INT 2
21633: PUSH
21634: LD_INT 1
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 2
21643: PUSH
21644: LD_INT 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 1
21653: PUSH
21654: LD_INT 2
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 0
21663: PUSH
21664: LD_INT 2
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 1
21673: NEG
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 2
21684: NEG
21685: PUSH
21686: LD_INT 0
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 2
21695: NEG
21696: PUSH
21697: LD_INT 1
21699: NEG
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 2
21707: NEG
21708: PUSH
21709: LD_INT 2
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 2
21719: PUSH
21720: LD_INT 3
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: PUSH
21727: LD_INT 1
21729: PUSH
21730: LD_INT 3
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 1
21739: NEG
21740: PUSH
21741: LD_INT 2
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 2
21750: NEG
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21784: LD_ADDR_VAR 0 27
21788: PUSH
21789: LD_INT 0
21791: PUSH
21792: LD_INT 0
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 1
21812: PUSH
21813: LD_INT 0
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: LD_INT 1
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 0
21832: PUSH
21833: LD_INT 1
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 1
21842: NEG
21843: PUSH
21844: LD_INT 0
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: LD_INT 1
21853: NEG
21854: PUSH
21855: LD_INT 1
21857: NEG
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 1
21865: NEG
21866: PUSH
21867: LD_INT 2
21869: NEG
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 0
21877: PUSH
21878: LD_INT 2
21880: NEG
21881: PUSH
21882: EMPTY
21883: LIST
21884: LIST
21885: PUSH
21886: LD_INT 1
21888: PUSH
21889: LD_INT 1
21891: NEG
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 2
21899: PUSH
21900: LD_INT 0
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 2
21909: PUSH
21910: LD_INT 1
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 2
21919: PUSH
21920: LD_INT 2
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PUSH
21927: LD_INT 1
21929: PUSH
21930: LD_INT 2
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: LD_INT 2
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 1
21949: NEG
21950: PUSH
21951: LD_INT 1
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 2
21960: NEG
21961: PUSH
21962: LD_INT 0
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: LD_INT 2
21971: NEG
21972: PUSH
21973: LD_INT 1
21975: NEG
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 2
21983: NEG
21984: PUSH
21985: LD_INT 2
21987: NEG
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: LD_INT 2
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 2
22006: NEG
22007: PUSH
22008: LD_INT 1
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 3
22017: NEG
22018: PUSH
22019: LD_INT 1
22021: NEG
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: PUSH
22027: LD_INT 3
22029: NEG
22030: PUSH
22031: LD_INT 2
22033: NEG
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
22064: LD_ADDR_VAR 0 28
22068: PUSH
22069: LD_INT 0
22071: PUSH
22072: LD_INT 0
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 0
22081: PUSH
22082: LD_INT 1
22084: NEG
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 1
22092: PUSH
22093: LD_INT 0
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 1
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: LD_INT 1
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 1
22122: NEG
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 1
22133: NEG
22134: PUSH
22135: LD_INT 1
22137: NEG
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 1
22145: NEG
22146: PUSH
22147: LD_INT 2
22149: NEG
22150: PUSH
22151: EMPTY
22152: LIST
22153: LIST
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: LD_INT 2
22160: NEG
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: LD_INT 1
22171: NEG
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: LD_INT 0
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 2
22189: PUSH
22190: LD_INT 1
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 2
22199: PUSH
22200: LD_INT 2
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: LD_INT 2
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: LD_INT 2
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 1
22229: NEG
22230: PUSH
22231: LD_INT 1
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 2
22240: NEG
22241: PUSH
22242: LD_INT 0
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 2
22251: NEG
22252: PUSH
22253: LD_INT 1
22255: NEG
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 2
22263: NEG
22264: PUSH
22265: LD_INT 2
22267: NEG
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: PUSH
22273: LD_INT 2
22275: NEG
22276: PUSH
22277: LD_INT 3
22279: NEG
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 1
22287: NEG
22288: PUSH
22289: LD_INT 3
22291: NEG
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 3
22299: NEG
22300: PUSH
22301: LD_INT 1
22303: NEG
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: LD_INT 3
22311: NEG
22312: PUSH
22313: LD_INT 2
22315: NEG
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22346: LD_ADDR_VAR 0 29
22350: PUSH
22351: LD_INT 0
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 0
22363: PUSH
22364: LD_INT 1
22366: NEG
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: LD_INT 0
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 0
22394: PUSH
22395: LD_INT 1
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 1
22404: NEG
22405: PUSH
22406: LD_INT 0
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 1
22415: NEG
22416: PUSH
22417: LD_INT 1
22419: NEG
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: LD_INT 2
22431: NEG
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 0
22439: PUSH
22440: LD_INT 2
22442: NEG
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: LD_INT 1
22453: NEG
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 2
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 1
22481: PUSH
22482: LD_INT 2
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: LD_INT 2
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 2
22512: NEG
22513: PUSH
22514: LD_INT 1
22516: NEG
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 2
22524: NEG
22525: PUSH
22526: LD_INT 2
22528: NEG
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 2
22536: NEG
22537: PUSH
22538: LD_INT 3
22540: NEG
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 2
22548: PUSH
22549: LD_INT 1
22551: NEG
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 3
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: LD_INT 3
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 1
22579: NEG
22580: PUSH
22581: LD_INT 2
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 3
22590: NEG
22591: PUSH
22592: LD_INT 2
22594: NEG
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22625: LD_ADDR_VAR 0 30
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: LD_INT 0
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: LD_INT 1
22645: NEG
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 1
22653: PUSH
22654: LD_INT 0
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: LD_INT 1
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 1
22706: NEG
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: LD_INT 2
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 2
22740: PUSH
22741: LD_INT 0
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 2
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 2
22760: PUSH
22761: LD_INT 2
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 1
22770: PUSH
22771: LD_INT 2
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 1
22780: NEG
22781: PUSH
22782: LD_INT 1
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 2
22791: NEG
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 2
22802: NEG
22803: PUSH
22804: LD_INT 1
22806: NEG
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 1
22814: NEG
22815: PUSH
22816: LD_INT 3
22818: NEG
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: LD_INT 2
22829: NEG
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 3
22837: PUSH
22838: LD_INT 2
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 2
22847: PUSH
22848: LD_INT 3
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 2
22857: NEG
22858: PUSH
22859: LD_INT 1
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 3
22868: NEG
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: LIST
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22903: LD_ADDR_VAR 0 31
22907: PUSH
22908: LD_INT 0
22910: PUSH
22911: LD_INT 0
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_INT 1
22923: NEG
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 1
22931: PUSH
22932: LD_INT 0
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: LD_INT 1
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 0
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 1
22961: NEG
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 1
22972: NEG
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 1
22984: NEG
22985: PUSH
22986: LD_INT 2
22988: NEG
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: LD_INT 1
22996: PUSH
22997: LD_INT 1
22999: NEG
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 2
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 2
23017: PUSH
23018: LD_INT 1
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: LD_INT 2
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: LD_INT 2
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: LD_INT 2
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 1
23057: NEG
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 2
23068: NEG
23069: PUSH
23070: LD_INT 1
23072: NEG
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: LD_INT 2
23080: NEG
23081: PUSH
23082: LD_INT 2
23084: NEG
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 2
23092: NEG
23093: PUSH
23094: LD_INT 3
23096: NEG
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 2
23104: PUSH
23105: LD_INT 1
23107: NEG
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 3
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: LD_INT 3
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 1
23135: NEG
23136: PUSH
23137: LD_INT 2
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 3
23146: NEG
23147: PUSH
23148: LD_INT 2
23150: NEG
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23181: LD_ADDR_VAR 0 32
23185: PUSH
23186: LD_INT 0
23188: PUSH
23189: LD_INT 0
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: LD_INT 1
23201: NEG
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 1
23209: PUSH
23210: LD_INT 0
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 1
23219: PUSH
23220: LD_INT 1
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 0
23229: PUSH
23230: LD_INT 1
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: LD_INT 0
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: LD_INT 1
23254: NEG
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 1
23262: NEG
23263: PUSH
23264: LD_INT 2
23266: NEG
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 0
23274: PUSH
23275: LD_INT 2
23277: NEG
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: LD_INT 1
23288: NEG
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 2
23296: PUSH
23297: LD_INT 1
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 0
23326: PUSH
23327: LD_INT 2
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 1
23336: NEG
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 2
23347: NEG
23348: PUSH
23349: LD_INT 0
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 2
23358: NEG
23359: PUSH
23360: LD_INT 1
23362: NEG
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: LD_INT 3
23374: NEG
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: LD_INT 2
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 3
23393: PUSH
23394: LD_INT 2
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 2
23403: PUSH
23404: LD_INT 3
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 2
23413: NEG
23414: PUSH
23415: LD_INT 1
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 3
23424: NEG
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23459: LD_ADDR_VAR 0 33
23463: PUSH
23464: LD_INT 0
23466: PUSH
23467: LD_INT 0
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 0
23476: PUSH
23477: LD_INT 1
23479: NEG
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 1
23487: PUSH
23488: LD_INT 0
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 1
23497: PUSH
23498: LD_INT 1
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: LD_INT 1
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 1
23517: NEG
23518: PUSH
23519: LD_INT 0
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 1
23528: NEG
23529: PUSH
23530: LD_INT 1
23532: NEG
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 1
23540: NEG
23541: PUSH
23542: LD_INT 2
23544: NEG
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 1
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: LD_INT 0
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 2
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: LD_INT 2
23596: PUSH
23597: EMPTY
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PUSH
23605: LD_INT 1
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 2
23614: NEG
23615: PUSH
23616: LD_INT 0
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 2
23625: NEG
23626: PUSH
23627: LD_INT 1
23629: NEG
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 2
23637: NEG
23638: PUSH
23639: LD_INT 2
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 2
23649: NEG
23650: PUSH
23651: LD_INT 3
23653: NEG
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 2
23661: PUSH
23662: LD_INT 1
23664: NEG
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 3
23672: PUSH
23673: LD_INT 1
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 1
23682: PUSH
23683: LD_INT 3
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: LD_INT 2
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 3
23703: NEG
23704: PUSH
23705: LD_INT 2
23707: NEG
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23738: LD_ADDR_VAR 0 34
23742: PUSH
23743: LD_INT 0
23745: PUSH
23746: LD_INT 0
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 0
23755: PUSH
23756: LD_INT 1
23758: NEG
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 1
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: LD_INT 1
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: LD_INT 1
23789: PUSH
23790: EMPTY
23791: LIST
23792: LIST
23793: PUSH
23794: LD_INT 1
23796: NEG
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: NEG
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: NEG
23820: PUSH
23821: LD_INT 2
23823: NEG
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: LD_INT 0
23831: PUSH
23832: LD_INT 2
23834: NEG
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: LD_INT 1
23845: NEG
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 2
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 2
23863: PUSH
23864: LD_INT 2
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 1
23883: NEG
23884: PUSH
23885: LD_INT 1
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 2
23894: NEG
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 2
23905: NEG
23906: PUSH
23907: LD_INT 1
23909: NEG
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: PUSH
23915: LD_INT 2
23917: NEG
23918: PUSH
23919: LD_INT 2
23921: NEG
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: NEG
23930: PUSH
23931: LD_INT 3
23933: NEG
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: LD_INT 2
23944: NEG
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 3
23952: PUSH
23953: LD_INT 2
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: LD_INT 2
23962: PUSH
23963: LD_INT 3
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 2
23972: NEG
23973: PUSH
23974: LD_INT 1
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 3
23983: NEG
23984: PUSH
23985: LD_INT 1
23987: NEG
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24018: LD_ADDR_VAR 0 35
24022: PUSH
24023: LD_INT 0
24025: PUSH
24026: LD_INT 0
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 0
24035: PUSH
24036: LD_INT 1
24038: NEG
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 1
24046: PUSH
24047: LD_INT 0
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 1
24056: PUSH
24057: LD_INT 1
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: LD_INT 1
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: NEG
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: NEG
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 2
24099: PUSH
24100: LD_INT 1
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 2
24109: NEG
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: EMPTY
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24130: LD_ADDR_VAR 0 36
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: LD_INT 0
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: PUSH
24145: LD_INT 0
24147: PUSH
24148: LD_INT 1
24150: NEG
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: LD_INT 0
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 1
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 0
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: NEG
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: NEG
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: NEG
24212: PUSH
24213: LD_INT 2
24215: NEG
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 1
24223: PUSH
24224: LD_INT 2
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24242: LD_ADDR_VAR 0 37
24246: PUSH
24247: LD_INT 0
24249: PUSH
24250: LD_INT 0
24252: PUSH
24253: EMPTY
24254: LIST
24255: LIST
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: PUSH
24281: LD_INT 1
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 1
24300: NEG
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 1
24311: NEG
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: LD_INT 1
24326: NEG
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 1
24334: NEG
24335: PUSH
24336: LD_INT 1
24338: PUSH
24339: EMPTY
24340: LIST
24341: LIST
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24354: LD_ADDR_VAR 0 38
24358: PUSH
24359: LD_INT 0
24361: PUSH
24362: LD_INT 0
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 0
24371: PUSH
24372: LD_INT 1
24374: NEG
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: LD_INT 0
24385: PUSH
24386: EMPTY
24387: LIST
24388: LIST
24389: PUSH
24390: LD_INT 1
24392: PUSH
24393: LD_INT 1
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 1
24412: NEG
24413: PUSH
24414: LD_INT 0
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 1
24423: NEG
24424: PUSH
24425: LD_INT 1
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 2
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 2
24445: NEG
24446: PUSH
24447: LD_INT 1
24449: NEG
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24466: LD_ADDR_VAR 0 39
24470: PUSH
24471: LD_INT 0
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 0
24483: PUSH
24484: LD_INT 1
24486: NEG
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 1
24494: PUSH
24495: LD_INT 0
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: LD_INT 1
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 0
24514: PUSH
24515: LD_INT 1
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 1
24524: NEG
24525: PUSH
24526: LD_INT 0
24528: PUSH
24529: EMPTY
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 1
24535: NEG
24536: PUSH
24537: LD_INT 1
24539: NEG
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 1
24547: NEG
24548: PUSH
24549: LD_INT 2
24551: NEG
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 1
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24578: LD_ADDR_VAR 0 40
24582: PUSH
24583: LD_INT 0
24585: PUSH
24586: LD_INT 0
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: LD_INT 1
24598: NEG
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 1
24606: PUSH
24607: LD_INT 0
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 1
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: LD_INT 1
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: NEG
24637: PUSH
24638: LD_INT 0
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: NEG
24648: PUSH
24649: LD_INT 1
24651: NEG
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: LD_INT 1
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 1
24670: NEG
24671: PUSH
24672: LD_INT 1
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24690: LD_ADDR_VAR 0 41
24694: PUSH
24695: LD_INT 0
24697: PUSH
24698: LD_INT 0
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 0
24707: PUSH
24708: LD_INT 1
24710: NEG
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 1
24718: PUSH
24719: LD_INT 0
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: LD_INT 1
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: LD_INT 1
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: LD_INT 1
24759: NEG
24760: PUSH
24761: LD_INT 1
24763: NEG
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: NEG
24772: PUSH
24773: LD_INT 2
24775: NEG
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: LD_INT 1
24786: NEG
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 2
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 2
24814: PUSH
24815: LD_INT 2
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: LD_INT 1
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: LD_INT 2
24845: NEG
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 2
24856: NEG
24857: PUSH
24858: LD_INT 1
24860: NEG
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 2
24868: NEG
24869: PUSH
24870: LD_INT 2
24872: NEG
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 2
24880: NEG
24881: PUSH
24882: LD_INT 3
24884: NEG
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: LD_INT 1
24895: NEG
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 3
24903: PUSH
24904: LD_INT 0
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 3
24913: PUSH
24914: LD_INT 1
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 3
24923: PUSH
24924: LD_INT 2
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 3
24933: PUSH
24934: LD_INT 3
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 2
24943: PUSH
24944: LD_INT 3
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 2
24953: NEG
24954: PUSH
24955: LD_INT 1
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 3
24964: NEG
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 3
24975: NEG
24976: PUSH
24977: LD_INT 1
24979: NEG
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 3
24987: NEG
24988: PUSH
24989: LD_INT 2
24991: NEG
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: PUSH
24997: LD_INT 3
24999: NEG
25000: PUSH
25001: LD_INT 3
25003: NEG
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25040: LD_ADDR_VAR 0 42
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: LD_INT 0
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: LD_INT 1
25060: NEG
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 0
25088: PUSH
25089: LD_INT 1
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 1
25098: NEG
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 1
25109: NEG
25110: PUSH
25111: LD_INT 1
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: NEG
25122: PUSH
25123: LD_INT 2
25125: NEG
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: LD_INT 2
25136: NEG
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 2
25155: PUSH
25156: LD_INT 1
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 0
25185: PUSH
25186: LD_INT 2
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: LD_INT 1
25195: NEG
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 2
25206: NEG
25207: PUSH
25208: LD_INT 1
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 2
25218: NEG
25219: PUSH
25220: LD_INT 2
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: LD_INT 3
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: LD_INT 3
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 3
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 1
25265: PUSH
25266: LD_INT 2
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 3
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 3
25286: PUSH
25287: LD_INT 3
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 2
25296: PUSH
25297: LD_INT 3
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: LD_INT 3
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: LD_INT 3
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: LD_INT 2
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 3
25337: NEG
25338: PUSH
25339: LD_INT 2
25341: NEG
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 3
25349: NEG
25350: PUSH
25351: LD_INT 3
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25390: LD_ADDR_VAR 0 43
25394: PUSH
25395: LD_INT 0
25397: PUSH
25398: LD_INT 0
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 1
25410: NEG
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: LD_INT 0
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: LD_INT 1
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: LD_INT 1
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: LD_INT 2
25475: NEG
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 1
25494: PUSH
25495: LD_INT 1
25497: NEG
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 2
25505: PUSH
25506: LD_INT 0
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: LD_INT 1
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: LD_INT 2
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: LD_INT 2
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: LD_INT 1
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 2
25556: NEG
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 2
25567: NEG
25568: PUSH
25569: LD_INT 1
25571: NEG
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 1
25579: NEG
25580: PUSH
25581: LD_INT 3
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: LD_INT 3
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 1
25602: PUSH
25603: LD_INT 2
25605: NEG
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 2
25613: PUSH
25614: LD_INT 1
25616: NEG
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 3
25624: PUSH
25625: LD_INT 0
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 3
25634: PUSH
25635: LD_INT 1
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: LD_INT 3
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 0
25654: PUSH
25655: LD_INT 3
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 1
25664: NEG
25665: PUSH
25666: LD_INT 2
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 2
25675: NEG
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 3
25686: NEG
25687: PUSH
25688: LD_INT 0
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 3
25697: NEG
25698: PUSH
25699: LD_INT 1
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25738: LD_ADDR_VAR 0 44
25742: PUSH
25743: LD_INT 0
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: LD_INT 1
25758: NEG
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: LD_INT 1
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 1
25796: NEG
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: LD_INT 1
25811: NEG
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 1
25819: NEG
25820: PUSH
25821: LD_INT 2
25823: NEG
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: LD_INT 1
25834: NEG
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: LD_INT 1
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 1
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 2
25893: NEG
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 2
25904: NEG
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 2
25916: NEG
25917: PUSH
25918: LD_INT 2
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 2
25928: NEG
25929: PUSH
25930: LD_INT 3
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 2
25940: PUSH
25941: LD_INT 1
25943: NEG
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 3
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 3
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 3
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 3
25981: PUSH
25982: LD_INT 3
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: LD_INT 3
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 2
26001: NEG
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 3
26012: NEG
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 3
26023: NEG
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 3
26035: NEG
26036: PUSH
26037: LD_INT 2
26039: NEG
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 3
26047: NEG
26048: PUSH
26049: LD_INT 3
26051: NEG
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26088: LD_ADDR_VAR 0 45
26092: PUSH
26093: LD_INT 0
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: LD_INT 1
26108: NEG
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: LD_INT 0
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: LD_INT 1
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: NEG
26158: PUSH
26159: LD_INT 1
26161: NEG
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 1
26169: NEG
26170: PUSH
26171: LD_INT 2
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 2
26184: NEG
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 2
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 2
26213: PUSH
26214: LD_INT 2
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: LD_INT 2
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: LD_INT 0
26233: PUSH
26234: LD_INT 2
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 1
26243: NEG
26244: PUSH
26245: LD_INT 1
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: NEG
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 2
26266: NEG
26267: PUSH
26268: LD_INT 2
26270: NEG
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 2
26278: NEG
26279: PUSH
26280: LD_INT 3
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 1
26290: NEG
26291: PUSH
26292: LD_INT 3
26294: NEG
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: LD_INT 3
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 1
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 3
26324: PUSH
26325: LD_INT 2
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 3
26334: PUSH
26335: LD_INT 3
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 2
26344: PUSH
26345: LD_INT 3
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: LD_INT 3
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: LD_INT 3
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: LD_INT 2
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 3
26385: NEG
26386: PUSH
26387: LD_INT 2
26389: NEG
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 3
26397: NEG
26398: PUSH
26399: LD_INT 3
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26438: LD_ADDR_VAR 0 46
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: LD_INT 0
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 1
26458: NEG
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: LD_INT 1
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: LD_INT 0
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 1
26507: NEG
26508: PUSH
26509: LD_INT 1
26511: NEG
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: LD_INT 2
26523: NEG
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: LD_INT 2
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 1
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 2
26553: PUSH
26554: LD_INT 0
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 2
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 0
26583: PUSH
26584: LD_INT 2
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 2
26604: NEG
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 2
26615: NEG
26616: PUSH
26617: LD_INT 1
26619: NEG
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 1
26627: NEG
26628: PUSH
26629: LD_INT 3
26631: NEG
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: LD_INT 3
26642: NEG
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: LD_INT 2
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: LD_INT 1
26664: NEG
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 3
26672: PUSH
26673: LD_INT 0
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 3
26682: PUSH
26683: LD_INT 1
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 1
26692: PUSH
26693: LD_INT 3
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: LD_INT 3
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 1
26712: NEG
26713: PUSH
26714: LD_INT 2
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 2
26723: NEG
26724: PUSH
26725: LD_INT 1
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 3
26734: NEG
26735: PUSH
26736: LD_INT 0
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 3
26745: NEG
26746: PUSH
26747: LD_INT 1
26749: NEG
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: EMPTY
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: LIST
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26786: LD_ADDR_VAR 0 47
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: LD_INT 1
26806: NEG
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: PUSH
26815: LD_INT 0
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: LD_INT 0
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 1
26844: NEG
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 1
26855: NEG
26856: PUSH
26857: LD_INT 1
26859: NEG
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: LD_INT 2
26871: NEG
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: LD_INT 2
26882: NEG
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 2
26901: NEG
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 2
26913: NEG
26914: PUSH
26915: LD_INT 2
26917: NEG
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26937: LD_ADDR_VAR 0 48
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: LD_INT 0
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: LD_INT 1
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: LD_INT 1
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: NEG
27019: PUSH
27020: LD_INT 2
27022: NEG
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: LD_INT 2
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 2
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
27084: LD_ADDR_VAR 0 49
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: LD_INT 0
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: LD_INT 1
27104: NEG
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: LD_INT 0
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: LD_INT 1
27157: NEG
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 2
27176: PUSH
27177: LD_INT 0
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 2
27186: PUSH
27187: LD_INT 1
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 2
27196: PUSH
27197: LD_INT 2
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: LD_INT 2
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27228: LD_ADDR_VAR 0 50
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: LD_INT 0
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: LD_INT 1
27248: NEG
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 1
27256: PUSH
27257: LD_INT 0
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: LD_INT 1
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: LD_INT 0
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 2
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: LD_INT 2
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 1
27329: PUSH
27330: LD_INT 2
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 0
27339: PUSH
27340: LD_INT 2
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 1
27349: NEG
27350: PUSH
27351: LD_INT 1
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27372: LD_ADDR_VAR 0 51
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 0
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 1
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: LD_INT 1
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 1
27430: NEG
27431: PUSH
27432: LD_INT 0
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: LD_INT 2
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: LD_INT 2
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: LD_INT 1
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 2
27484: NEG
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: NEG
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27519: LD_ADDR_VAR 0 52
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: LD_INT 0
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: LD_INT 0
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 0
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 1
27577: NEG
27578: PUSH
27579: LD_INT 0
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 1
27588: NEG
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: NEG
27601: PUSH
27602: LD_INT 2
27604: NEG
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 1
27612: NEG
27613: PUSH
27614: LD_INT 1
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 2
27623: NEG
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: NEG
27635: PUSH
27636: LD_INT 1
27638: NEG
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: LD_INT 2
27646: NEG
27647: PUSH
27648: LD_INT 2
27650: NEG
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27670: LD_ADDR_VAR 0 53
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 0
27687: PUSH
27688: LD_INT 1
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 0
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 1
27728: NEG
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: NEG
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 1
27751: NEG
27752: PUSH
27753: LD_INT 2
27755: NEG
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 0
27763: PUSH
27764: LD_INT 2
27766: NEG
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: LD_INT 1
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 2
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: PUSH
27793: LD_INT 2
27795: PUSH
27796: LD_INT 1
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: LD_INT 2
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 1
27815: PUSH
27816: LD_INT 2
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: LD_INT 2
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 1
27835: NEG
27836: PUSH
27837: LD_INT 1
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 2
27846: NEG
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 2
27857: NEG
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 2
27869: NEG
27870: PUSH
27871: LD_INT 2
27873: NEG
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27900: LD_ADDR_VAR 0 54
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 0
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 0
27917: PUSH
27918: LD_INT 1
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 0
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PUSH
27979: LD_INT 1
27981: NEG
27982: PUSH
27983: LD_INT 2
27985: NEG
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: LD_INT 2
27996: NEG
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 2
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 2
28025: PUSH
28026: LD_INT 1
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 2
28035: PUSH
28036: LD_INT 2
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: LD_INT 2
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 1
28065: NEG
28066: PUSH
28067: LD_INT 1
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 2
28076: NEG
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 2
28087: NEG
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 2
28099: NEG
28100: PUSH
28101: LD_INT 2
28103: NEG
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28130: LD_ADDR_VAR 0 55
28134: PUSH
28135: LD_INT 0
28137: PUSH
28138: LD_INT 0
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 0
28147: PUSH
28148: LD_INT 1
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 0
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 1
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 0
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 1
28199: NEG
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: LD_INT 2
28215: NEG
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: LD_INT 2
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: LD_INT 1
28237: NEG
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: PUSH
28243: LD_INT 2
28245: PUSH
28246: LD_INT 0
28248: PUSH
28249: EMPTY
28250: LIST
28251: LIST
28252: PUSH
28253: LD_INT 2
28255: PUSH
28256: LD_INT 1
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 2
28265: PUSH
28266: LD_INT 2
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 1
28275: PUSH
28276: LD_INT 2
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 0
28285: PUSH
28286: LD_INT 2
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 1
28295: NEG
28296: PUSH
28297: LD_INT 1
28299: PUSH
28300: EMPTY
28301: LIST
28302: LIST
28303: PUSH
28304: LD_INT 2
28306: NEG
28307: PUSH
28308: LD_INT 0
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 2
28317: NEG
28318: PUSH
28319: LD_INT 1
28321: NEG
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 2
28329: NEG
28330: PUSH
28331: LD_INT 2
28333: NEG
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28360: LD_ADDR_VAR 0 56
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: LD_INT 0
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 0
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 1
28388: PUSH
28389: LD_INT 0
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: LD_INT 1
28433: NEG
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: LD_INT 2
28445: NEG
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 2
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 2
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 2
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 2
28495: PUSH
28496: LD_INT 2
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 1
28505: PUSH
28506: LD_INT 2
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 0
28515: PUSH
28516: LD_INT 2
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: PUSH
28527: LD_INT 1
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: PUSH
28534: LD_INT 2
28536: NEG
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 2
28547: NEG
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 2
28559: NEG
28560: PUSH
28561: LD_INT 2
28563: NEG
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: LIST
28573: LIST
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: LIST
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28590: LD_ADDR_VAR 0 57
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: LD_INT 0
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 0
28607: PUSH
28608: LD_INT 1
28610: NEG
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: LD_INT 0
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 0
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: PUSH
28646: LD_INT 1
28648: NEG
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 1
28659: NEG
28660: PUSH
28661: LD_INT 1
28663: NEG
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: LD_INT 2
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 2
28686: NEG
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: LD_INT 1
28697: NEG
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 2
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 2
28715: PUSH
28716: LD_INT 1
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 2
28725: PUSH
28726: LD_INT 2
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 1
28735: PUSH
28736: LD_INT 2
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 0
28745: PUSH
28746: LD_INT 2
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 2
28766: NEG
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 2
28777: NEG
28778: PUSH
28779: LD_INT 1
28781: NEG
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 2
28789: NEG
28790: PUSH
28791: LD_INT 2
28793: NEG
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: LIST
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28820: LD_ADDR_VAR 0 58
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 0
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 0
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: LD_INT 0
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 1
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 0
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 1
28878: NEG
28879: PUSH
28880: LD_INT 0
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: NEG
28890: PUSH
28891: LD_INT 1
28893: NEG
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: NEG
28902: PUSH
28903: LD_INT 2
28905: NEG
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 2
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 2
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 2
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 2
28955: PUSH
28956: LD_INT 2
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: LD_INT 2
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 1
28985: NEG
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 2
28996: NEG
28997: PUSH
28998: LD_INT 0
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 2
29007: NEG
29008: PUSH
29009: LD_INT 1
29011: NEG
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: NEG
29020: PUSH
29021: LD_INT 2
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29050: LD_ADDR_VAR 0 59
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: LD_INT 0
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 1
29078: PUSH
29079: LD_INT 0
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 1
29088: PUSH
29089: LD_INT 1
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: LD_INT 1
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: LD_INT 0
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 1
29119: NEG
29120: PUSH
29121: LD_INT 1
29123: NEG
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: LIST
29135: LIST
29136: LIST
29137: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29138: LD_ADDR_VAR 0 60
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: LD_INT 0
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: LD_INT 1
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 1
29196: NEG
29197: PUSH
29198: LD_INT 0
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: LD_INT 1
29211: NEG
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29226: LD_ADDR_VAR 0 61
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 0
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: LD_INT 1
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 0
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: LD_INT 1
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29314: LD_ADDR_VAR 0 62
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: LD_INT 1
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 1
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: LD_INT 1
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: LD_INT 1
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: LD_INT 0
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: LD_INT 1
29387: NEG
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29402: LD_ADDR_VAR 0 63
29406: PUSH
29407: LD_INT 0
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: NEG
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: NEG
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29490: LD_ADDR_VAR 0 64
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: LD_INT 0
29500: PUSH
29501: EMPTY
29502: LIST
29503: LIST
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 1
29518: PUSH
29519: LD_INT 0
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 1
29528: PUSH
29529: LD_INT 1
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 0
29538: PUSH
29539: LD_INT 1
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 1
29548: NEG
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 1
29559: NEG
29560: PUSH
29561: LD_INT 1
29563: NEG
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: ST_TO_ADDR
// end ; 1 :
29578: GO 35475
29580: LD_INT 1
29582: DOUBLE
29583: EQUAL
29584: IFTRUE 29588
29586: GO 32211
29588: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29589: LD_ADDR_VAR 0 11
29593: PUSH
29594: LD_INT 1
29596: NEG
29597: PUSH
29598: LD_INT 3
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: LD_INT 3
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: LD_INT 2
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: LIST
29632: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29633: LD_ADDR_VAR 0 12
29637: PUSH
29638: LD_INT 2
29640: PUSH
29641: LD_INT 1
29643: NEG
29644: PUSH
29645: EMPTY
29646: LIST
29647: LIST
29648: PUSH
29649: LD_INT 3
29651: PUSH
29652: LD_INT 0
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 3
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29674: LD_ADDR_VAR 0 13
29678: PUSH
29679: LD_INT 3
29681: PUSH
29682: LD_INT 2
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 3
29691: PUSH
29692: LD_INT 3
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 3
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29714: LD_ADDR_VAR 0 14
29718: PUSH
29719: LD_INT 1
29721: PUSH
29722: LD_INT 3
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: LD_INT 3
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 1
29741: NEG
29742: PUSH
29743: LD_INT 2
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: LIST
29754: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29755: LD_ADDR_VAR 0 15
29759: PUSH
29760: LD_INT 2
29762: NEG
29763: PUSH
29764: LD_INT 1
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 3
29773: NEG
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 3
29784: NEG
29785: PUSH
29786: LD_INT 1
29788: NEG
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: LIST
29798: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29799: LD_ADDR_VAR 0 16
29803: PUSH
29804: LD_INT 2
29806: NEG
29807: PUSH
29808: LD_INT 3
29810: NEG
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 3
29818: NEG
29819: PUSH
29820: LD_INT 2
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 3
29830: NEG
29831: PUSH
29832: LD_INT 3
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: LIST
29844: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29845: LD_ADDR_VAR 0 17
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: LD_INT 3
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 0
29864: PUSH
29865: LD_INT 3
29867: NEG
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: LD_INT 2
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: LIST
29888: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29889: LD_ADDR_VAR 0 18
29893: PUSH
29894: LD_INT 2
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 3
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 3
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: LIST
29929: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29930: LD_ADDR_VAR 0 19
29934: PUSH
29935: LD_INT 3
29937: PUSH
29938: LD_INT 2
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 3
29947: PUSH
29948: LD_INT 3
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: LD_INT 3
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: LIST
29969: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29970: LD_ADDR_VAR 0 20
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 3
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: LD_INT 3
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: LD_INT 2
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30011: LD_ADDR_VAR 0 21
30015: PUSH
30016: LD_INT 2
30018: NEG
30019: PUSH
30020: LD_INT 1
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 3
30029: NEG
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 3
30040: NEG
30041: PUSH
30042: LD_INT 1
30044: NEG
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30055: LD_ADDR_VAR 0 22
30059: PUSH
30060: LD_INT 2
30062: NEG
30063: PUSH
30064: LD_INT 3
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 3
30074: NEG
30075: PUSH
30076: LD_INT 2
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 3
30086: NEG
30087: PUSH
30088: LD_INT 3
30090: NEG
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: LIST
30100: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
30101: LD_ADDR_VAR 0 23
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: LD_INT 3
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 1
30119: NEG
30120: PUSH
30121: LD_INT 4
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 1
30131: PUSH
30132: LD_INT 3
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: LIST
30144: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
30145: LD_ADDR_VAR 0 24
30149: PUSH
30150: LD_INT 3
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 3
30162: PUSH
30163: LD_INT 1
30165: NEG
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 4
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30186: LD_ADDR_VAR 0 25
30190: PUSH
30191: LD_INT 3
30193: PUSH
30194: LD_INT 3
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 4
30203: PUSH
30204: LD_INT 3
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 3
30213: PUSH
30214: LD_INT 4
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: LIST
30225: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30226: LD_ADDR_VAR 0 26
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: LD_INT 3
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: LD_INT 4
30246: PUSH
30247: EMPTY
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 1
30253: NEG
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: LIST
30266: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30267: LD_ADDR_VAR 0 27
30271: PUSH
30272: LD_INT 3
30274: NEG
30275: PUSH
30276: LD_INT 0
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 3
30285: NEG
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: PUSH
30294: LD_INT 4
30296: NEG
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: LIST
30310: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30311: LD_ADDR_VAR 0 28
30315: PUSH
30316: LD_INT 3
30318: NEG
30319: PUSH
30320: LD_INT 3
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 3
30330: NEG
30331: PUSH
30332: LD_INT 4
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 4
30342: NEG
30343: PUSH
30344: LD_INT 3
30346: NEG
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: LIST
30356: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30357: LD_ADDR_VAR 0 29
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: LD_INT 3
30368: NEG
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: LD_INT 3
30379: NEG
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: LD_INT 2
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 1
30398: NEG
30399: PUSH
30400: LD_INT 4
30402: NEG
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 0
30410: PUSH
30411: LD_INT 4
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: LD_INT 3
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: LD_INT 5
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: LD_INT 5
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: LD_INT 4
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 1
30466: NEG
30467: PUSH
30468: LD_INT 6
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 6
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 5
30492: NEG
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30512: LD_ADDR_VAR 0 30
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: LD_INT 1
30522: NEG
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 3
30530: PUSH
30531: LD_INT 0
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 3
30540: PUSH
30541: LD_INT 1
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 3
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 4
30561: PUSH
30562: LD_INT 0
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 4
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 4
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 5
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 5
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 5
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 6
30623: PUSH
30624: LD_INT 0
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 6
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30655: LD_ADDR_VAR 0 31
30659: PUSH
30660: LD_INT 3
30662: PUSH
30663: LD_INT 2
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 3
30672: PUSH
30673: LD_INT 3
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 2
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: LD_INT 3
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 4
30702: PUSH
30703: LD_INT 4
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 3
30712: PUSH
30713: LD_INT 4
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 5
30722: PUSH
30723: LD_INT 4
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 5
30732: PUSH
30733: LD_INT 5
30735: PUSH
30736: EMPTY
30737: LIST
30738: LIST
30739: PUSH
30740: LD_INT 4
30742: PUSH
30743: LD_INT 5
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 6
30752: PUSH
30753: LD_INT 5
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 6
30762: PUSH
30763: LD_INT 6
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 5
30772: PUSH
30773: LD_INT 6
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30794: LD_ADDR_VAR 0 32
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: LD_INT 3
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: LD_INT 3
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 1
30821: NEG
30822: PUSH
30823: LD_INT 2
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: PUSH
30833: LD_INT 4
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: LD_INT 4
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 1
30852: NEG
30853: PUSH
30854: LD_INT 3
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: LD_INT 5
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: LD_INT 5
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: LD_INT 4
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: LD_INT 6
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 0
30904: PUSH
30905: LD_INT 6
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 1
30914: NEG
30915: PUSH
30916: LD_INT 5
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30937: LD_ADDR_VAR 0 33
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 3
30955: NEG
30956: PUSH
30957: LD_INT 0
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 3
30966: NEG
30967: PUSH
30968: LD_INT 1
30970: NEG
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 3
30978: NEG
30979: PUSH
30980: LD_INT 1
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 4
30989: NEG
30990: PUSH
30991: LD_INT 0
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 4
31000: NEG
31001: PUSH
31002: LD_INT 1
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 4
31012: NEG
31013: PUSH
31014: LD_INT 1
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 5
31023: NEG
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 5
31034: NEG
31035: PUSH
31036: LD_INT 1
31038: NEG
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 5
31046: NEG
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 6
31057: NEG
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 6
31068: NEG
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
31092: LD_ADDR_VAR 0 34
31096: PUSH
31097: LD_INT 2
31099: NEG
31100: PUSH
31101: LD_INT 3
31103: NEG
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 3
31111: NEG
31112: PUSH
31113: LD_INT 2
31115: NEG
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 3
31123: NEG
31124: PUSH
31125: LD_INT 3
31127: NEG
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: NEG
31136: PUSH
31137: LD_INT 4
31139: NEG
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PUSH
31145: LD_INT 4
31147: NEG
31148: PUSH
31149: LD_INT 3
31151: NEG
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 4
31159: NEG
31160: PUSH
31161: LD_INT 4
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 4
31171: NEG
31172: PUSH
31173: LD_INT 5
31175: NEG
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 5
31183: NEG
31184: PUSH
31185: LD_INT 4
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 5
31195: NEG
31196: PUSH
31197: LD_INT 5
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 5
31207: NEG
31208: PUSH
31209: LD_INT 6
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 6
31219: NEG
31220: PUSH
31221: LD_INT 5
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 6
31231: NEG
31232: PUSH
31233: LD_INT 6
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31255: LD_ADDR_VAR 0 41
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: LD_INT 2
31265: NEG
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: LD_INT 3
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: LD_INT 2
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31299: LD_ADDR_VAR 0 42
31303: PUSH
31304: LD_INT 2
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 2
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 3
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31340: LD_ADDR_VAR 0 43
31344: PUSH
31345: LD_INT 2
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 3
31357: PUSH
31358: LD_INT 2
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: LD_INT 3
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: LIST
31379: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31380: LD_ADDR_VAR 0 44
31384: PUSH
31385: LD_INT 0
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: LD_INT 3
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: LD_INT 2
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: LIST
31420: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31421: LD_ADDR_VAR 0 45
31425: PUSH
31426: LD_INT 2
31428: NEG
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 2
31439: NEG
31440: PUSH
31441: LD_INT 1
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 3
31450: NEG
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: LIST
31464: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31465: LD_ADDR_VAR 0 46
31469: PUSH
31470: LD_INT 2
31472: NEG
31473: PUSH
31474: LD_INT 2
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: LD_INT 3
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 3
31496: NEG
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: LIST
31510: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31511: LD_ADDR_VAR 0 47
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 3
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: NEG
31531: PUSH
31532: LD_INT 3
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31544: LD_ADDR_VAR 0 48
31548: PUSH
31549: LD_INT 1
31551: PUSH
31552: LD_INT 2
31554: NEG
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 2
31562: PUSH
31563: LD_INT 1
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31575: LD_ADDR_VAR 0 49
31579: PUSH
31580: LD_INT 3
31582: PUSH
31583: LD_INT 1
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 3
31592: PUSH
31593: LD_INT 2
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31604: LD_ADDR_VAR 0 50
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 1
31621: PUSH
31622: LD_INT 3
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31633: LD_ADDR_VAR 0 51
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: LD_INT 2
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 2
31651: NEG
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31664: LD_ADDR_VAR 0 52
31668: PUSH
31669: LD_INT 3
31671: NEG
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 3
31683: NEG
31684: PUSH
31685: LD_INT 2
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31697: LD_ADDR_VAR 0 53
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: LD_INT 3
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: LD_INT 3
31719: NEG
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: LD_INT 2
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: LIST
31740: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31741: LD_ADDR_VAR 0 54
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: LD_INT 1
31751: NEG
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 3
31759: PUSH
31760: LD_INT 0
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 3
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31782: LD_ADDR_VAR 0 55
31786: PUSH
31787: LD_INT 3
31789: PUSH
31790: LD_INT 2
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 3
31799: PUSH
31800: LD_INT 3
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: PUSH
31807: LD_INT 2
31809: PUSH
31810: LD_INT 3
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: LIST
31821: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31822: LD_ADDR_VAR 0 56
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: LD_INT 3
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: LD_INT 3
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: LIST
31862: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31863: LD_ADDR_VAR 0 57
31867: PUSH
31868: LD_INT 2
31870: NEG
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 3
31881: NEG
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 3
31892: NEG
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31907: LD_ADDR_VAR 0 58
31911: PUSH
31912: LD_INT 2
31914: NEG
31915: PUSH
31916: LD_INT 3
31918: NEG
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 3
31926: NEG
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 3
31938: NEG
31939: PUSH
31940: LD_INT 3
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: LIST
31952: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31953: LD_ADDR_VAR 0 59
31957: PUSH
31958: LD_INT 1
31960: NEG
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: LD_INT 2
31975: NEG
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 1
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: LIST
31996: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31997: LD_ADDR_VAR 0 60
32001: PUSH
32002: LD_INT 1
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 2
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 2
32025: PUSH
32026: LD_INT 1
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32038: LD_ADDR_VAR 0 61
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 2
32055: PUSH
32056: LD_INT 2
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: LD_INT 2
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32078: LD_ADDR_VAR 0 62
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: LD_INT 2
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: LD_INT 2
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 1
32105: NEG
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: LIST
32118: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32119: LD_ADDR_VAR 0 63
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: LIST
32162: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32163: LD_ADDR_VAR 0 64
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: LD_INT 2
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 2
32182: NEG
32183: PUSH
32184: LD_INT 1
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 2
32194: NEG
32195: PUSH
32196: LD_INT 2
32198: NEG
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: LIST
32208: ST_TO_ADDR
// end ; 2 :
32209: GO 35475
32211: LD_INT 2
32213: DOUBLE
32214: EQUAL
32215: IFTRUE 32219
32217: GO 35474
32219: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32220: LD_ADDR_VAR 0 29
32224: PUSH
32225: LD_INT 4
32227: PUSH
32228: LD_INT 0
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 4
32237: PUSH
32238: LD_INT 1
32240: NEG
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 5
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 5
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 4
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 3
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 3
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 3
32299: PUSH
32300: LD_INT 2
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 5
32310: PUSH
32311: LD_INT 2
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 3
32320: PUSH
32321: LD_INT 3
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 3
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 4
32340: PUSH
32341: LD_INT 3
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 4
32350: PUSH
32351: LD_INT 4
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 3
32360: PUSH
32361: LD_INT 4
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: LD_INT 3
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 2
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 4
32390: PUSH
32391: LD_INT 2
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 2
32400: PUSH
32401: LD_INT 4
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 0
32410: PUSH
32411: LD_INT 4
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: LD_INT 4
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: LD_INT 5
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: LD_INT 5
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: NEG
32461: PUSH
32462: LD_INT 4
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: LD_INT 3
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 2
32482: PUSH
32483: LD_INT 5
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 2
32492: NEG
32493: PUSH
32494: LD_INT 3
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 3
32503: NEG
32504: PUSH
32505: LD_INT 0
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 3
32514: NEG
32515: PUSH
32516: LD_INT 1
32518: NEG
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 2
32526: NEG
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 2
32537: NEG
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: PUSH
32546: LD_INT 3
32548: NEG
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 4
32559: NEG
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 4
32570: NEG
32571: PUSH
32572: LD_INT 1
32574: NEG
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 4
32582: NEG
32583: PUSH
32584: LD_INT 2
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: LD_INT 2
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 4
32605: NEG
32606: PUSH
32607: LD_INT 4
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 4
32617: NEG
32618: PUSH
32619: LD_INT 5
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 3
32629: NEG
32630: PUSH
32631: LD_INT 4
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 3
32641: NEG
32642: PUSH
32643: LD_INT 3
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 4
32653: NEG
32654: PUSH
32655: LD_INT 3
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 5
32665: NEG
32666: PUSH
32667: LD_INT 4
32669: NEG
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 5
32677: NEG
32678: PUSH
32679: LD_INT 5
32681: NEG
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 3
32689: NEG
32690: PUSH
32691: LD_INT 5
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 5
32701: NEG
32702: PUSH
32703: LD_INT 3
32705: NEG
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32758: LD_ADDR_VAR 0 30
32762: PUSH
32763: LD_INT 4
32765: PUSH
32766: LD_INT 4
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 4
32775: PUSH
32776: LD_INT 3
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 5
32785: PUSH
32786: LD_INT 4
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 5
32795: PUSH
32796: LD_INT 5
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 4
32805: PUSH
32806: LD_INT 5
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 3
32815: PUSH
32816: LD_INT 4
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 3
32825: PUSH
32826: LD_INT 3
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 5
32835: PUSH
32836: LD_INT 3
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 3
32845: PUSH
32846: LD_INT 5
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 0
32855: PUSH
32856: LD_INT 3
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 0
32865: PUSH
32866: LD_INT 2
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: LD_INT 3
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: PUSH
32886: LD_INT 4
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 0
32895: PUSH
32896: LD_INT 4
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 1
32905: NEG
32906: PUSH
32907: LD_INT 3
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: LD_INT 2
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 2
32927: PUSH
32928: LD_INT 4
32930: PUSH
32931: EMPTY
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: LD_INT 2
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 4
32948: NEG
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 4
32959: NEG
32960: PUSH
32961: LD_INT 1
32963: NEG
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 3
32971: NEG
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 3
32982: NEG
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 4
32993: NEG
32994: PUSH
32995: LD_INT 1
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 5
33004: NEG
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 5
33015: NEG
33016: PUSH
33017: LD_INT 1
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 5
33027: NEG
33028: PUSH
33029: LD_INT 2
33031: NEG
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 3
33039: NEG
33040: PUSH
33041: LD_INT 2
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 3
33050: NEG
33051: PUSH
33052: LD_INT 3
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 3
33062: NEG
33063: PUSH
33064: LD_INT 4
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 2
33074: NEG
33075: PUSH
33076: LD_INT 3
33078: NEG
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 2
33086: NEG
33087: PUSH
33088: LD_INT 2
33090: NEG
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 3
33098: NEG
33099: PUSH
33100: LD_INT 2
33102: NEG
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 4
33110: NEG
33111: PUSH
33112: LD_INT 3
33114: NEG
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: PUSH
33120: LD_INT 4
33122: NEG
33123: PUSH
33124: LD_INT 4
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: LD_INT 4
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 4
33146: NEG
33147: PUSH
33148: LD_INT 2
33150: NEG
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: LD_INT 4
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: LD_INT 5
33172: NEG
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: LD_INT 4
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: LD_INT 3
33194: NEG
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 3
33205: NEG
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: LD_INT 4
33217: NEG
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: LD_INT 5
33229: NEG
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 2
33237: PUSH
33238: LD_INT 3
33240: NEG
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 2
33248: NEG
33249: PUSH
33250: LD_INT 5
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33305: LD_ADDR_VAR 0 31
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: LD_INT 4
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: LD_INT 3
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: LD_INT 4
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: LD_INT 5
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 0
33352: PUSH
33353: LD_INT 5
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: LD_INT 4
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: LD_INT 3
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 2
33384: PUSH
33385: LD_INT 5
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 2
33394: NEG
33395: PUSH
33396: LD_INT 3
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 3
33405: NEG
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: LD_INT 3
33416: NEG
33417: PUSH
33418: LD_INT 1
33420: NEG
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 2
33428: NEG
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 2
33439: NEG
33440: PUSH
33441: LD_INT 1
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 3
33450: NEG
33451: PUSH
33452: LD_INT 1
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 4
33461: NEG
33462: PUSH
33463: LD_INT 0
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 4
33472: NEG
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 4
33484: NEG
33485: PUSH
33486: LD_INT 2
33488: NEG
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 2
33496: NEG
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 4
33507: NEG
33508: PUSH
33509: LD_INT 4
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 4
33519: NEG
33520: PUSH
33521: LD_INT 5
33523: NEG
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 3
33531: NEG
33532: PUSH
33533: LD_INT 4
33535: NEG
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 3
33543: NEG
33544: PUSH
33545: LD_INT 3
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 4
33555: NEG
33556: PUSH
33557: LD_INT 3
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 5
33567: NEG
33568: PUSH
33569: LD_INT 4
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 5
33579: NEG
33580: PUSH
33581: LD_INT 5
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 3
33591: NEG
33592: PUSH
33593: LD_INT 5
33595: NEG
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 5
33603: NEG
33604: PUSH
33605: LD_INT 3
33607: NEG
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 3
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: LD_INT 4
33629: NEG
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: LD_INT 3
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 1
33648: PUSH
33649: LD_INT 2
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 0
33659: PUSH
33660: LD_INT 2
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: LD_INT 3
33674: NEG
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: LD_INT 4
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 2
33705: NEG
33706: PUSH
33707: LD_INT 4
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 4
33717: PUSH
33718: LD_INT 0
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 4
33727: PUSH
33728: LD_INT 1
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 5
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 5
33748: PUSH
33749: LD_INT 1
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 4
33758: PUSH
33759: LD_INT 1
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 3
33768: PUSH
33769: LD_INT 0
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 3
33778: PUSH
33779: LD_INT 1
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 3
33789: PUSH
33790: LD_INT 2
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 5
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33855: LD_ADDR_VAR 0 32
33859: PUSH
33860: LD_INT 4
33862: NEG
33863: PUSH
33864: LD_INT 0
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PUSH
33871: LD_INT 4
33873: NEG
33874: PUSH
33875: LD_INT 1
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 3
33885: NEG
33886: PUSH
33887: LD_INT 0
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 3
33896: NEG
33897: PUSH
33898: LD_INT 1
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 4
33907: NEG
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 5
33918: NEG
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 5
33929: NEG
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 5
33941: NEG
33942: PUSH
33943: LD_INT 2
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 3
33953: NEG
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 3
33964: NEG
33965: PUSH
33966: LD_INT 3
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 3
33976: NEG
33977: PUSH
33978: LD_INT 4
33980: NEG
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: PUSH
33986: LD_INT 2
33988: NEG
33989: PUSH
33990: LD_INT 3
33992: NEG
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 2
34000: NEG
34001: PUSH
34002: LD_INT 2
34004: NEG
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 3
34012: NEG
34013: PUSH
34014: LD_INT 2
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 4
34024: NEG
34025: PUSH
34026: LD_INT 3
34028: NEG
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 4
34036: NEG
34037: PUSH
34038: LD_INT 4
34040: NEG
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 2
34048: NEG
34049: PUSH
34050: LD_INT 4
34052: NEG
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PUSH
34058: LD_INT 4
34060: NEG
34061: PUSH
34062: LD_INT 2
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 0
34072: PUSH
34073: LD_INT 4
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: LD_INT 5
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: PUSH
34095: LD_INT 4
34097: NEG
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 1
34105: PUSH
34106: LD_INT 3
34108: NEG
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 0
34116: PUSH
34117: LD_INT 3
34119: NEG
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 1
34127: NEG
34128: PUSH
34129: LD_INT 4
34131: NEG
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: LD_INT 5
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 3
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 2
34162: NEG
34163: PUSH
34164: LD_INT 5
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 3
34174: PUSH
34175: LD_INT 0
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 3
34184: PUSH
34185: LD_INT 1
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 4
34195: PUSH
34196: LD_INT 0
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 4
34205: PUSH
34206: LD_INT 1
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 3
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 2
34235: PUSH
34236: LD_INT 1
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: PUSH
34247: LD_INT 2
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 4
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 4
34267: PUSH
34268: LD_INT 4
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 4
34277: PUSH
34278: LD_INT 3
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 5
34287: PUSH
34288: LD_INT 4
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 5
34297: PUSH
34298: LD_INT 5
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 4
34307: PUSH
34308: LD_INT 5
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 3
34317: PUSH
34318: LD_INT 4
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 3
34327: PUSH
34328: LD_INT 3
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 5
34337: PUSH
34338: LD_INT 3
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 3
34347: PUSH
34348: LD_INT 5
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34402: LD_ADDR_VAR 0 33
34406: PUSH
34407: LD_INT 4
34409: NEG
34410: PUSH
34411: LD_INT 4
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 4
34421: NEG
34422: PUSH
34423: LD_INT 5
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 3
34433: NEG
34434: PUSH
34435: LD_INT 4
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 3
34445: NEG
34446: PUSH
34447: LD_INT 3
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 4
34457: NEG
34458: PUSH
34459: LD_INT 3
34461: NEG
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 5
34469: NEG
34470: PUSH
34471: LD_INT 4
34473: NEG
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 5
34481: NEG
34482: PUSH
34483: LD_INT 5
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 3
34493: NEG
34494: PUSH
34495: LD_INT 5
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 5
34505: NEG
34506: PUSH
34507: LD_INT 3
34509: NEG
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 0
34517: PUSH
34518: LD_INT 3
34520: NEG
34521: PUSH
34522: EMPTY
34523: LIST
34524: LIST
34525: PUSH
34526: LD_INT 0
34528: PUSH
34529: LD_INT 4
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: LD_INT 3
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 2
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: LD_INT 2
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: NEG
34573: PUSH
34574: LD_INT 3
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 1
34584: NEG
34585: PUSH
34586: LD_INT 4
34588: NEG
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: LD_INT 2
34596: PUSH
34597: LD_INT 2
34599: NEG
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 2
34607: NEG
34608: PUSH
34609: LD_INT 4
34611: NEG
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 4
34619: PUSH
34620: LD_INT 0
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 4
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 5
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 5
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 4
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 3
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 3
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 3
34691: PUSH
34692: LD_INT 2
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 5
34702: PUSH
34703: LD_INT 2
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: LD_INT 3
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 3
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 4
34732: PUSH
34733: LD_INT 3
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 4
34742: PUSH
34743: LD_INT 4
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 3
34752: PUSH
34753: LD_INT 4
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: LD_INT 3
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 2
34772: PUSH
34773: LD_INT 2
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 4
34782: PUSH
34783: LD_INT 2
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 2
34792: PUSH
34793: LD_INT 4
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: LD_INT 0
34802: PUSH
34803: LD_INT 4
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 3
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: LD_INT 4
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 5
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: LD_INT 5
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: NEG
34853: PUSH
34854: LD_INT 4
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: LD_INT 3
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: LD_INT 5
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 2
34884: NEG
34885: PUSH
34886: LD_INT 3
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34940: LD_ADDR_VAR 0 34
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: LD_INT 4
34950: NEG
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: LD_INT 5
34961: NEG
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: LD_INT 4
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: LD_INT 3
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: LD_INT 3
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 1
35002: NEG
35003: PUSH
35004: LD_INT 4
35006: NEG
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: LD_INT 5
35018: NEG
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: PUSH
35024: LD_INT 2
35026: PUSH
35027: LD_INT 3
35029: NEG
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 2
35037: NEG
35038: PUSH
35039: LD_INT 5
35041: NEG
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 3
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 3
35059: PUSH
35060: LD_INT 1
35062: NEG
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 4
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 4
35080: PUSH
35081: LD_INT 1
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: PUSH
35088: LD_INT 3
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 2
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 2
35121: PUSH
35122: LD_INT 2
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 4
35132: PUSH
35133: LD_INT 2
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 4
35142: PUSH
35143: LD_INT 4
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 4
35152: PUSH
35153: LD_INT 3
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 5
35162: PUSH
35163: LD_INT 4
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 5
35172: PUSH
35173: LD_INT 5
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 4
35182: PUSH
35183: LD_INT 5
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 3
35192: PUSH
35193: LD_INT 4
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 3
35202: PUSH
35203: LD_INT 3
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 5
35212: PUSH
35213: LD_INT 3
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 3
35222: PUSH
35223: LD_INT 5
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: LD_INT 3
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 0
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: LD_INT 3
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 4
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: LD_INT 4
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: LD_INT 3
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: NEG
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: LD_INT 4
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 2
35314: NEG
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 4
35325: NEG
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 4
35336: NEG
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 3
35348: NEG
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 3
35359: NEG
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 4
35370: NEG
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 5
35381: NEG
35382: PUSH
35383: LD_INT 0
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 5
35392: NEG
35393: PUSH
35394: LD_INT 1
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 5
35404: NEG
35405: PUSH
35406: LD_INT 2
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 3
35416: NEG
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: ST_TO_ADDR
// end ; end ;
35472: GO 35475
35474: POP
// case btype of b_depot , b_warehouse :
35475: LD_VAR 0 1
35479: PUSH
35480: LD_INT 0
35482: DOUBLE
35483: EQUAL
35484: IFTRUE 35494
35486: LD_INT 1
35488: DOUBLE
35489: EQUAL
35490: IFTRUE 35494
35492: GO 35695
35494: POP
// case nation of nation_american :
35495: LD_VAR 0 5
35499: PUSH
35500: LD_INT 1
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35508
35506: GO 35564
35508: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35509: LD_ADDR_VAR 0 9
35513: PUSH
35514: LD_VAR 0 11
35518: PUSH
35519: LD_VAR 0 12
35523: PUSH
35524: LD_VAR 0 13
35528: PUSH
35529: LD_VAR 0 14
35533: PUSH
35534: LD_VAR 0 15
35538: PUSH
35539: LD_VAR 0 16
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: PUSH
35552: LD_VAR 0 4
35556: PUSH
35557: LD_INT 1
35559: PLUS
35560: ARRAY
35561: ST_TO_ADDR
35562: GO 35693
35564: LD_INT 2
35566: DOUBLE
35567: EQUAL
35568: IFTRUE 35572
35570: GO 35628
35572: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35573: LD_ADDR_VAR 0 9
35577: PUSH
35578: LD_VAR 0 17
35582: PUSH
35583: LD_VAR 0 18
35587: PUSH
35588: LD_VAR 0 19
35592: PUSH
35593: LD_VAR 0 20
35597: PUSH
35598: LD_VAR 0 21
35602: PUSH
35603: LD_VAR 0 22
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: PUSH
35616: LD_VAR 0 4
35620: PUSH
35621: LD_INT 1
35623: PLUS
35624: ARRAY
35625: ST_TO_ADDR
35626: GO 35693
35628: LD_INT 3
35630: DOUBLE
35631: EQUAL
35632: IFTRUE 35636
35634: GO 35692
35636: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35637: LD_ADDR_VAR 0 9
35641: PUSH
35642: LD_VAR 0 23
35646: PUSH
35647: LD_VAR 0 24
35651: PUSH
35652: LD_VAR 0 25
35656: PUSH
35657: LD_VAR 0 26
35661: PUSH
35662: LD_VAR 0 27
35666: PUSH
35667: LD_VAR 0 28
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: PUSH
35680: LD_VAR 0 4
35684: PUSH
35685: LD_INT 1
35687: PLUS
35688: ARRAY
35689: ST_TO_ADDR
35690: GO 35693
35692: POP
35693: GO 36248
35695: LD_INT 2
35697: DOUBLE
35698: EQUAL
35699: IFTRUE 35709
35701: LD_INT 3
35703: DOUBLE
35704: EQUAL
35705: IFTRUE 35709
35707: GO 35765
35709: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35710: LD_ADDR_VAR 0 9
35714: PUSH
35715: LD_VAR 0 29
35719: PUSH
35720: LD_VAR 0 30
35724: PUSH
35725: LD_VAR 0 31
35729: PUSH
35730: LD_VAR 0 32
35734: PUSH
35735: LD_VAR 0 33
35739: PUSH
35740: LD_VAR 0 34
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: PUSH
35753: LD_VAR 0 4
35757: PUSH
35758: LD_INT 1
35760: PLUS
35761: ARRAY
35762: ST_TO_ADDR
35763: GO 36248
35765: LD_INT 16
35767: DOUBLE
35768: EQUAL
35769: IFTRUE 35827
35771: LD_INT 17
35773: DOUBLE
35774: EQUAL
35775: IFTRUE 35827
35777: LD_INT 18
35779: DOUBLE
35780: EQUAL
35781: IFTRUE 35827
35783: LD_INT 19
35785: DOUBLE
35786: EQUAL
35787: IFTRUE 35827
35789: LD_INT 22
35791: DOUBLE
35792: EQUAL
35793: IFTRUE 35827
35795: LD_INT 20
35797: DOUBLE
35798: EQUAL
35799: IFTRUE 35827
35801: LD_INT 21
35803: DOUBLE
35804: EQUAL
35805: IFTRUE 35827
35807: LD_INT 23
35809: DOUBLE
35810: EQUAL
35811: IFTRUE 35827
35813: LD_INT 24
35815: DOUBLE
35816: EQUAL
35817: IFTRUE 35827
35819: LD_INT 25
35821: DOUBLE
35822: EQUAL
35823: IFTRUE 35827
35825: GO 35883
35827: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35828: LD_ADDR_VAR 0 9
35832: PUSH
35833: LD_VAR 0 35
35837: PUSH
35838: LD_VAR 0 36
35842: PUSH
35843: LD_VAR 0 37
35847: PUSH
35848: LD_VAR 0 38
35852: PUSH
35853: LD_VAR 0 39
35857: PUSH
35858: LD_VAR 0 40
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: PUSH
35871: LD_VAR 0 4
35875: PUSH
35876: LD_INT 1
35878: PLUS
35879: ARRAY
35880: ST_TO_ADDR
35881: GO 36248
35883: LD_INT 6
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35939
35889: LD_INT 7
35891: DOUBLE
35892: EQUAL
35893: IFTRUE 35939
35895: LD_INT 8
35897: DOUBLE
35898: EQUAL
35899: IFTRUE 35939
35901: LD_INT 13
35903: DOUBLE
35904: EQUAL
35905: IFTRUE 35939
35907: LD_INT 12
35909: DOUBLE
35910: EQUAL
35911: IFTRUE 35939
35913: LD_INT 15
35915: DOUBLE
35916: EQUAL
35917: IFTRUE 35939
35919: LD_INT 11
35921: DOUBLE
35922: EQUAL
35923: IFTRUE 35939
35925: LD_INT 14
35927: DOUBLE
35928: EQUAL
35929: IFTRUE 35939
35931: LD_INT 10
35933: DOUBLE
35934: EQUAL
35935: IFTRUE 35939
35937: GO 35995
35939: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35940: LD_ADDR_VAR 0 9
35944: PUSH
35945: LD_VAR 0 41
35949: PUSH
35950: LD_VAR 0 42
35954: PUSH
35955: LD_VAR 0 43
35959: PUSH
35960: LD_VAR 0 44
35964: PUSH
35965: LD_VAR 0 45
35969: PUSH
35970: LD_VAR 0 46
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: PUSH
35983: LD_VAR 0 4
35987: PUSH
35988: LD_INT 1
35990: PLUS
35991: ARRAY
35992: ST_TO_ADDR
35993: GO 36248
35995: LD_INT 36
35997: DOUBLE
35998: EQUAL
35999: IFTRUE 36003
36001: GO 36059
36003: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
36004: LD_ADDR_VAR 0 9
36008: PUSH
36009: LD_VAR 0 47
36013: PUSH
36014: LD_VAR 0 48
36018: PUSH
36019: LD_VAR 0 49
36023: PUSH
36024: LD_VAR 0 50
36028: PUSH
36029: LD_VAR 0 51
36033: PUSH
36034: LD_VAR 0 52
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: PUSH
36047: LD_VAR 0 4
36051: PUSH
36052: LD_INT 1
36054: PLUS
36055: ARRAY
36056: ST_TO_ADDR
36057: GO 36248
36059: LD_INT 4
36061: DOUBLE
36062: EQUAL
36063: IFTRUE 36085
36065: LD_INT 5
36067: DOUBLE
36068: EQUAL
36069: IFTRUE 36085
36071: LD_INT 34
36073: DOUBLE
36074: EQUAL
36075: IFTRUE 36085
36077: LD_INT 37
36079: DOUBLE
36080: EQUAL
36081: IFTRUE 36085
36083: GO 36141
36085: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
36086: LD_ADDR_VAR 0 9
36090: PUSH
36091: LD_VAR 0 53
36095: PUSH
36096: LD_VAR 0 54
36100: PUSH
36101: LD_VAR 0 55
36105: PUSH
36106: LD_VAR 0 56
36110: PUSH
36111: LD_VAR 0 57
36115: PUSH
36116: LD_VAR 0 58
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: PUSH
36129: LD_VAR 0 4
36133: PUSH
36134: LD_INT 1
36136: PLUS
36137: ARRAY
36138: ST_TO_ADDR
36139: GO 36248
36141: LD_INT 31
36143: DOUBLE
36144: EQUAL
36145: IFTRUE 36191
36147: LD_INT 32
36149: DOUBLE
36150: EQUAL
36151: IFTRUE 36191
36153: LD_INT 33
36155: DOUBLE
36156: EQUAL
36157: IFTRUE 36191
36159: LD_INT 27
36161: DOUBLE
36162: EQUAL
36163: IFTRUE 36191
36165: LD_INT 26
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36191
36171: LD_INT 28
36173: DOUBLE
36174: EQUAL
36175: IFTRUE 36191
36177: LD_INT 29
36179: DOUBLE
36180: EQUAL
36181: IFTRUE 36191
36183: LD_INT 30
36185: DOUBLE
36186: EQUAL
36187: IFTRUE 36191
36189: GO 36247
36191: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36192: LD_ADDR_VAR 0 9
36196: PUSH
36197: LD_VAR 0 59
36201: PUSH
36202: LD_VAR 0 60
36206: PUSH
36207: LD_VAR 0 61
36211: PUSH
36212: LD_VAR 0 62
36216: PUSH
36217: LD_VAR 0 63
36221: PUSH
36222: LD_VAR 0 64
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: PUSH
36235: LD_VAR 0 4
36239: PUSH
36240: LD_INT 1
36242: PLUS
36243: ARRAY
36244: ST_TO_ADDR
36245: GO 36248
36247: POP
// temp_list2 = [ ] ;
36248: LD_ADDR_VAR 0 10
36252: PUSH
36253: EMPTY
36254: ST_TO_ADDR
// for i in temp_list do
36255: LD_ADDR_VAR 0 8
36259: PUSH
36260: LD_VAR 0 9
36264: PUSH
36265: FOR_IN
36266: IFFALSE 36318
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36268: LD_ADDR_VAR 0 10
36272: PUSH
36273: LD_VAR 0 10
36277: PUSH
36278: LD_VAR 0 8
36282: PUSH
36283: LD_INT 1
36285: ARRAY
36286: PUSH
36287: LD_VAR 0 2
36291: PLUS
36292: PUSH
36293: LD_VAR 0 8
36297: PUSH
36298: LD_INT 2
36300: ARRAY
36301: PUSH
36302: LD_VAR 0 3
36306: PLUS
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: EMPTY
36313: LIST
36314: ADD
36315: ST_TO_ADDR
36316: GO 36265
36318: POP
36319: POP
// result = temp_list2 ;
36320: LD_ADDR_VAR 0 7
36324: PUSH
36325: LD_VAR 0 10
36329: ST_TO_ADDR
// end ;
36330: LD_VAR 0 7
36334: RET
// export function EnemyInRange ( unit , dist ) ; begin
36335: LD_INT 0
36337: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36338: LD_ADDR_VAR 0 3
36342: PUSH
36343: LD_VAR 0 1
36347: PPUSH
36348: CALL_OW 255
36352: PPUSH
36353: LD_VAR 0 1
36357: PPUSH
36358: CALL_OW 250
36362: PPUSH
36363: LD_VAR 0 1
36367: PPUSH
36368: CALL_OW 251
36372: PPUSH
36373: LD_VAR 0 2
36377: PPUSH
36378: CALL 9731 0 4
36382: PUSH
36383: LD_INT 4
36385: ARRAY
36386: ST_TO_ADDR
// end ;
36387: LD_VAR 0 3
36391: RET
// export function PlayerSeeMe ( unit ) ; begin
36392: LD_INT 0
36394: PPUSH
// result := See ( your_side , unit ) ;
36395: LD_ADDR_VAR 0 2
36399: PUSH
36400: LD_OWVAR 2
36404: PPUSH
36405: LD_VAR 0 1
36409: PPUSH
36410: CALL_OW 292
36414: ST_TO_ADDR
// end ;
36415: LD_VAR 0 2
36419: RET
// export function ReverseDir ( unit ) ; begin
36420: LD_INT 0
36422: PPUSH
// if not unit then
36423: LD_VAR 0 1
36427: NOT
36428: IFFALSE 36432
// exit ;
36430: GO 36455
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36432: LD_ADDR_VAR 0 2
36436: PUSH
36437: LD_VAR 0 1
36441: PPUSH
36442: CALL_OW 254
36446: PUSH
36447: LD_INT 3
36449: PLUS
36450: PUSH
36451: LD_INT 6
36453: MOD
36454: ST_TO_ADDR
// end ;
36455: LD_VAR 0 2
36459: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
36460: LD_INT 0
36462: PPUSH
36463: PPUSH
36464: PPUSH
36465: PPUSH
36466: PPUSH
// if not hexes then
36467: LD_VAR 0 2
36471: NOT
36472: IFFALSE 36476
// exit ;
36474: GO 36624
// dist := 9999 ;
36476: LD_ADDR_VAR 0 5
36480: PUSH
36481: LD_INT 9999
36483: ST_TO_ADDR
// for i = 1 to hexes do
36484: LD_ADDR_VAR 0 4
36488: PUSH
36489: DOUBLE
36490: LD_INT 1
36492: DEC
36493: ST_TO_ADDR
36494: LD_VAR 0 2
36498: PUSH
36499: FOR_TO
36500: IFFALSE 36612
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
36502: LD_VAR 0 1
36506: PPUSH
36507: LD_VAR 0 2
36511: PUSH
36512: LD_VAR 0 4
36516: ARRAY
36517: PUSH
36518: LD_INT 1
36520: ARRAY
36521: PPUSH
36522: LD_VAR 0 2
36526: PUSH
36527: LD_VAR 0 4
36531: ARRAY
36532: PUSH
36533: LD_INT 2
36535: ARRAY
36536: PPUSH
36537: CALL_OW 297
36541: PUSH
36542: LD_VAR 0 5
36546: LESS
36547: IFFALSE 36610
// begin hex := hexes [ i ] ;
36549: LD_ADDR_VAR 0 7
36553: PUSH
36554: LD_VAR 0 2
36558: PUSH
36559: LD_VAR 0 4
36563: ARRAY
36564: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36565: LD_ADDR_VAR 0 5
36569: PUSH
36570: LD_VAR 0 1
36574: PPUSH
36575: LD_VAR 0 2
36579: PUSH
36580: LD_VAR 0 4
36584: ARRAY
36585: PUSH
36586: LD_INT 1
36588: ARRAY
36589: PPUSH
36590: LD_VAR 0 2
36594: PUSH
36595: LD_VAR 0 4
36599: ARRAY
36600: PUSH
36601: LD_INT 2
36603: ARRAY
36604: PPUSH
36605: CALL_OW 297
36609: ST_TO_ADDR
// end ; end ;
36610: GO 36499
36612: POP
36613: POP
// result := hex ;
36614: LD_ADDR_VAR 0 3
36618: PUSH
36619: LD_VAR 0 7
36623: ST_TO_ADDR
// end ;
36624: LD_VAR 0 3
36628: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36629: LD_INT 0
36631: PPUSH
36632: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36633: LD_VAR 0 1
36637: NOT
36638: PUSH
36639: LD_VAR 0 1
36643: PUSH
36644: LD_INT 21
36646: PUSH
36647: LD_INT 2
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PUSH
36654: LD_INT 23
36656: PUSH
36657: LD_INT 2
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PPUSH
36668: CALL_OW 69
36672: IN
36673: NOT
36674: OR
36675: IFFALSE 36679
// exit ;
36677: GO 36726
// for i = 1 to 3 do
36679: LD_ADDR_VAR 0 3
36683: PUSH
36684: DOUBLE
36685: LD_INT 1
36687: DEC
36688: ST_TO_ADDR
36689: LD_INT 3
36691: PUSH
36692: FOR_TO
36693: IFFALSE 36724
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36695: LD_VAR 0 1
36699: PPUSH
36700: CALL_OW 250
36704: PPUSH
36705: LD_VAR 0 1
36709: PPUSH
36710: CALL_OW 251
36714: PPUSH
36715: LD_INT 1
36717: PPUSH
36718: CALL_OW 453
36722: GO 36692
36724: POP
36725: POP
// end ;
36726: LD_VAR 0 2
36730: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36731: LD_INT 0
36733: PPUSH
36734: PPUSH
36735: PPUSH
36736: PPUSH
36737: PPUSH
36738: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
36739: LD_VAR 0 1
36743: NOT
36744: PUSH
36745: LD_VAR 0 2
36749: NOT
36750: OR
36751: PUSH
36752: LD_VAR 0 1
36756: PPUSH
36757: CALL_OW 314
36761: OR
36762: IFFALSE 36766
// exit ;
36764: GO 37207
// x := GetX ( enemy_unit ) ;
36766: LD_ADDR_VAR 0 7
36770: PUSH
36771: LD_VAR 0 2
36775: PPUSH
36776: CALL_OW 250
36780: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36781: LD_ADDR_VAR 0 8
36785: PUSH
36786: LD_VAR 0 2
36790: PPUSH
36791: CALL_OW 251
36795: ST_TO_ADDR
// if not x or not y then
36796: LD_VAR 0 7
36800: NOT
36801: PUSH
36802: LD_VAR 0 8
36806: NOT
36807: OR
36808: IFFALSE 36812
// exit ;
36810: GO 37207
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36812: LD_ADDR_VAR 0 6
36816: PUSH
36817: LD_VAR 0 7
36821: PPUSH
36822: LD_INT 0
36824: PPUSH
36825: LD_INT 4
36827: PPUSH
36828: CALL_OW 272
36832: PUSH
36833: LD_VAR 0 8
36837: PPUSH
36838: LD_INT 0
36840: PPUSH
36841: LD_INT 4
36843: PPUSH
36844: CALL_OW 273
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_VAR 0 7
36857: PPUSH
36858: LD_INT 1
36860: PPUSH
36861: LD_INT 4
36863: PPUSH
36864: CALL_OW 272
36868: PUSH
36869: LD_VAR 0 8
36873: PPUSH
36874: LD_INT 1
36876: PPUSH
36877: LD_INT 4
36879: PPUSH
36880: CALL_OW 273
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_VAR 0 7
36893: PPUSH
36894: LD_INT 2
36896: PPUSH
36897: LD_INT 4
36899: PPUSH
36900: CALL_OW 272
36904: PUSH
36905: LD_VAR 0 8
36909: PPUSH
36910: LD_INT 2
36912: PPUSH
36913: LD_INT 4
36915: PPUSH
36916: CALL_OW 273
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_VAR 0 7
36929: PPUSH
36930: LD_INT 3
36932: PPUSH
36933: LD_INT 4
36935: PPUSH
36936: CALL_OW 272
36940: PUSH
36941: LD_VAR 0 8
36945: PPUSH
36946: LD_INT 3
36948: PPUSH
36949: LD_INT 4
36951: PPUSH
36952: CALL_OW 273
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_VAR 0 7
36965: PPUSH
36966: LD_INT 4
36968: PPUSH
36969: LD_INT 4
36971: PPUSH
36972: CALL_OW 272
36976: PUSH
36977: LD_VAR 0 8
36981: PPUSH
36982: LD_INT 4
36984: PPUSH
36985: LD_INT 4
36987: PPUSH
36988: CALL_OW 273
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_VAR 0 7
37001: PPUSH
37002: LD_INT 5
37004: PPUSH
37005: LD_INT 4
37007: PPUSH
37008: CALL_OW 272
37012: PUSH
37013: LD_VAR 0 8
37017: PPUSH
37018: LD_INT 5
37020: PPUSH
37021: LD_INT 4
37023: PPUSH
37024: CALL_OW 273
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: ST_TO_ADDR
// for i = tmp downto 1 do
37041: LD_ADDR_VAR 0 4
37045: PUSH
37046: DOUBLE
37047: LD_VAR 0 6
37051: INC
37052: ST_TO_ADDR
37053: LD_INT 1
37055: PUSH
37056: FOR_DOWNTO
37057: IFFALSE 37158
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
37059: LD_VAR 0 6
37063: PUSH
37064: LD_VAR 0 4
37068: ARRAY
37069: PUSH
37070: LD_INT 1
37072: ARRAY
37073: PPUSH
37074: LD_VAR 0 6
37078: PUSH
37079: LD_VAR 0 4
37083: ARRAY
37084: PUSH
37085: LD_INT 2
37087: ARRAY
37088: PPUSH
37089: CALL_OW 488
37093: NOT
37094: PUSH
37095: LD_VAR 0 6
37099: PUSH
37100: LD_VAR 0 4
37104: ARRAY
37105: PUSH
37106: LD_INT 1
37108: ARRAY
37109: PPUSH
37110: LD_VAR 0 6
37114: PUSH
37115: LD_VAR 0 4
37119: ARRAY
37120: PUSH
37121: LD_INT 2
37123: ARRAY
37124: PPUSH
37125: CALL_OW 428
37129: PUSH
37130: LD_INT 0
37132: NONEQUAL
37133: OR
37134: IFFALSE 37156
// tmp := Delete ( tmp , i ) ;
37136: LD_ADDR_VAR 0 6
37140: PUSH
37141: LD_VAR 0 6
37145: PPUSH
37146: LD_VAR 0 4
37150: PPUSH
37151: CALL_OW 3
37155: ST_TO_ADDR
37156: GO 37056
37158: POP
37159: POP
// j := GetClosestHex ( unit , tmp ) ;
37160: LD_ADDR_VAR 0 5
37164: PUSH
37165: LD_VAR 0 1
37169: PPUSH
37170: LD_VAR 0 6
37174: PPUSH
37175: CALL 36460 0 2
37179: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37180: LD_VAR 0 1
37184: PPUSH
37185: LD_VAR 0 5
37189: PUSH
37190: LD_INT 1
37192: ARRAY
37193: PPUSH
37194: LD_VAR 0 5
37198: PUSH
37199: LD_INT 2
37201: ARRAY
37202: PPUSH
37203: CALL_OW 111
// end ;
37207: LD_VAR 0 3
37211: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37212: LD_INT 0
37214: PPUSH
37215: PPUSH
37216: PPUSH
// uc_side = 0 ;
37217: LD_ADDR_OWVAR 20
37221: PUSH
37222: LD_INT 0
37224: ST_TO_ADDR
// uc_nation = 0 ;
37225: LD_ADDR_OWVAR 21
37229: PUSH
37230: LD_INT 0
37232: ST_TO_ADDR
// InitHc_All ( ) ;
37233: CALL_OW 584
// InitVc ;
37237: CALL_OW 20
// if mastodonts then
37241: LD_VAR 0 6
37245: IFFALSE 37312
// for i = 1 to mastodonts do
37247: LD_ADDR_VAR 0 11
37251: PUSH
37252: DOUBLE
37253: LD_INT 1
37255: DEC
37256: ST_TO_ADDR
37257: LD_VAR 0 6
37261: PUSH
37262: FOR_TO
37263: IFFALSE 37310
// begin vc_chassis := 31 ;
37265: LD_ADDR_OWVAR 37
37269: PUSH
37270: LD_INT 31
37272: ST_TO_ADDR
// vc_control := control_rider ;
37273: LD_ADDR_OWVAR 38
37277: PUSH
37278: LD_INT 4
37280: ST_TO_ADDR
// animal := CreateVehicle ;
37281: LD_ADDR_VAR 0 12
37285: PUSH
37286: CALL_OW 45
37290: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37291: LD_VAR 0 12
37295: PPUSH
37296: LD_VAR 0 8
37300: PPUSH
37301: LD_INT 0
37303: PPUSH
37304: CALL 39447 0 3
// end ;
37308: GO 37262
37310: POP
37311: POP
// if horses then
37312: LD_VAR 0 5
37316: IFFALSE 37383
// for i = 1 to horses do
37318: LD_ADDR_VAR 0 11
37322: PUSH
37323: DOUBLE
37324: LD_INT 1
37326: DEC
37327: ST_TO_ADDR
37328: LD_VAR 0 5
37332: PUSH
37333: FOR_TO
37334: IFFALSE 37381
// begin hc_class := 21 ;
37336: LD_ADDR_OWVAR 28
37340: PUSH
37341: LD_INT 21
37343: ST_TO_ADDR
// hc_gallery :=  ;
37344: LD_ADDR_OWVAR 33
37348: PUSH
37349: LD_STRING 
37351: ST_TO_ADDR
// animal := CreateHuman ;
37352: LD_ADDR_VAR 0 12
37356: PUSH
37357: CALL_OW 44
37361: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37362: LD_VAR 0 12
37366: PPUSH
37367: LD_VAR 0 8
37371: PPUSH
37372: LD_INT 0
37374: PPUSH
37375: CALL 39447 0 3
// end ;
37379: GO 37333
37381: POP
37382: POP
// if birds then
37383: LD_VAR 0 1
37387: IFFALSE 37454
// for i = 1 to birds do
37389: LD_ADDR_VAR 0 11
37393: PUSH
37394: DOUBLE
37395: LD_INT 1
37397: DEC
37398: ST_TO_ADDR
37399: LD_VAR 0 1
37403: PUSH
37404: FOR_TO
37405: IFFALSE 37452
// begin hc_class = 18 ;
37407: LD_ADDR_OWVAR 28
37411: PUSH
37412: LD_INT 18
37414: ST_TO_ADDR
// hc_gallery =  ;
37415: LD_ADDR_OWVAR 33
37419: PUSH
37420: LD_STRING 
37422: ST_TO_ADDR
// animal := CreateHuman ;
37423: LD_ADDR_VAR 0 12
37427: PUSH
37428: CALL_OW 44
37432: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37433: LD_VAR 0 12
37437: PPUSH
37438: LD_VAR 0 8
37442: PPUSH
37443: LD_INT 0
37445: PPUSH
37446: CALL 39447 0 3
// end ;
37450: GO 37404
37452: POP
37453: POP
// if tigers then
37454: LD_VAR 0 2
37458: IFFALSE 37542
// for i = 1 to tigers do
37460: LD_ADDR_VAR 0 11
37464: PUSH
37465: DOUBLE
37466: LD_INT 1
37468: DEC
37469: ST_TO_ADDR
37470: LD_VAR 0 2
37474: PUSH
37475: FOR_TO
37476: IFFALSE 37540
// begin hc_class = class_tiger ;
37478: LD_ADDR_OWVAR 28
37482: PUSH
37483: LD_INT 14
37485: ST_TO_ADDR
// hc_gallery =  ;
37486: LD_ADDR_OWVAR 33
37490: PUSH
37491: LD_STRING 
37493: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37494: LD_ADDR_OWVAR 35
37498: PUSH
37499: LD_INT 7
37501: NEG
37502: PPUSH
37503: LD_INT 7
37505: PPUSH
37506: CALL_OW 12
37510: ST_TO_ADDR
// animal := CreateHuman ;
37511: LD_ADDR_VAR 0 12
37515: PUSH
37516: CALL_OW 44
37520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37521: LD_VAR 0 12
37525: PPUSH
37526: LD_VAR 0 8
37530: PPUSH
37531: LD_INT 0
37533: PPUSH
37534: CALL 39447 0 3
// end ;
37538: GO 37475
37540: POP
37541: POP
// if apemans then
37542: LD_VAR 0 3
37546: IFFALSE 37669
// for i = 1 to apemans do
37548: LD_ADDR_VAR 0 11
37552: PUSH
37553: DOUBLE
37554: LD_INT 1
37556: DEC
37557: ST_TO_ADDR
37558: LD_VAR 0 3
37562: PUSH
37563: FOR_TO
37564: IFFALSE 37667
// begin hc_class = class_apeman ;
37566: LD_ADDR_OWVAR 28
37570: PUSH
37571: LD_INT 12
37573: ST_TO_ADDR
// hc_gallery =  ;
37574: LD_ADDR_OWVAR 33
37578: PUSH
37579: LD_STRING 
37581: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37582: LD_ADDR_OWVAR 35
37586: PUSH
37587: LD_INT 2
37589: NEG
37590: PPUSH
37591: LD_INT 2
37593: PPUSH
37594: CALL_OW 12
37598: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37599: LD_ADDR_OWVAR 31
37603: PUSH
37604: LD_INT 1
37606: PPUSH
37607: LD_INT 3
37609: PPUSH
37610: CALL_OW 12
37614: PUSH
37615: LD_INT 1
37617: PPUSH
37618: LD_INT 3
37620: PPUSH
37621: CALL_OW 12
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 0
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: ST_TO_ADDR
// animal := CreateHuman ;
37638: LD_ADDR_VAR 0 12
37642: PUSH
37643: CALL_OW 44
37647: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37648: LD_VAR 0 12
37652: PPUSH
37653: LD_VAR 0 8
37657: PPUSH
37658: LD_INT 0
37660: PPUSH
37661: CALL 39447 0 3
// end ;
37665: GO 37563
37667: POP
37668: POP
// if enchidnas then
37669: LD_VAR 0 4
37673: IFFALSE 37740
// for i = 1 to enchidnas do
37675: LD_ADDR_VAR 0 11
37679: PUSH
37680: DOUBLE
37681: LD_INT 1
37683: DEC
37684: ST_TO_ADDR
37685: LD_VAR 0 4
37689: PUSH
37690: FOR_TO
37691: IFFALSE 37738
// begin hc_class = 13 ;
37693: LD_ADDR_OWVAR 28
37697: PUSH
37698: LD_INT 13
37700: ST_TO_ADDR
// hc_gallery =  ;
37701: LD_ADDR_OWVAR 33
37705: PUSH
37706: LD_STRING 
37708: ST_TO_ADDR
// animal := CreateHuman ;
37709: LD_ADDR_VAR 0 12
37713: PUSH
37714: CALL_OW 44
37718: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37719: LD_VAR 0 12
37723: PPUSH
37724: LD_VAR 0 8
37728: PPUSH
37729: LD_INT 0
37731: PPUSH
37732: CALL 39447 0 3
// end ;
37736: GO 37690
37738: POP
37739: POP
// if fishes then
37740: LD_VAR 0 7
37744: IFFALSE 37811
// for i = 1 to fishes do
37746: LD_ADDR_VAR 0 11
37750: PUSH
37751: DOUBLE
37752: LD_INT 1
37754: DEC
37755: ST_TO_ADDR
37756: LD_VAR 0 7
37760: PUSH
37761: FOR_TO
37762: IFFALSE 37809
// begin hc_class = 20 ;
37764: LD_ADDR_OWVAR 28
37768: PUSH
37769: LD_INT 20
37771: ST_TO_ADDR
// hc_gallery =  ;
37772: LD_ADDR_OWVAR 33
37776: PUSH
37777: LD_STRING 
37779: ST_TO_ADDR
// animal := CreateHuman ;
37780: LD_ADDR_VAR 0 12
37784: PUSH
37785: CALL_OW 44
37789: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37790: LD_VAR 0 12
37794: PPUSH
37795: LD_VAR 0 9
37799: PPUSH
37800: LD_INT 0
37802: PPUSH
37803: CALL 39447 0 3
// end ;
37807: GO 37761
37809: POP
37810: POP
// end ;
37811: LD_VAR 0 10
37815: RET
// export function WantHeal ( sci , unit ) ; begin
37816: LD_INT 0
37818: PPUSH
// if GetTaskList ( sci ) > 0 then
37819: LD_VAR 0 1
37823: PPUSH
37824: CALL_OW 437
37828: PUSH
37829: LD_INT 0
37831: GREATER
37832: IFFALSE 37902
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37834: LD_VAR 0 1
37838: PPUSH
37839: CALL_OW 437
37843: PUSH
37844: LD_INT 1
37846: ARRAY
37847: PUSH
37848: LD_INT 1
37850: ARRAY
37851: PUSH
37852: LD_STRING l
37854: EQUAL
37855: PUSH
37856: LD_VAR 0 1
37860: PPUSH
37861: CALL_OW 437
37865: PUSH
37866: LD_INT 1
37868: ARRAY
37869: PUSH
37870: LD_INT 4
37872: ARRAY
37873: PUSH
37874: LD_VAR 0 2
37878: EQUAL
37879: AND
37880: IFFALSE 37892
// result := true else
37882: LD_ADDR_VAR 0 3
37886: PUSH
37887: LD_INT 1
37889: ST_TO_ADDR
37890: GO 37900
// result := false ;
37892: LD_ADDR_VAR 0 3
37896: PUSH
37897: LD_INT 0
37899: ST_TO_ADDR
// end else
37900: GO 37910
// result := false ;
37902: LD_ADDR_VAR 0 3
37906: PUSH
37907: LD_INT 0
37909: ST_TO_ADDR
// end ;
37910: LD_VAR 0 3
37914: RET
// export function HealTarget ( sci ) ; begin
37915: LD_INT 0
37917: PPUSH
// if not sci then
37918: LD_VAR 0 1
37922: NOT
37923: IFFALSE 37927
// exit ;
37925: GO 37992
// result := 0 ;
37927: LD_ADDR_VAR 0 2
37931: PUSH
37932: LD_INT 0
37934: ST_TO_ADDR
// if GetTaskList ( sci ) then
37935: LD_VAR 0 1
37939: PPUSH
37940: CALL_OW 437
37944: IFFALSE 37992
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37946: LD_VAR 0 1
37950: PPUSH
37951: CALL_OW 437
37955: PUSH
37956: LD_INT 1
37958: ARRAY
37959: PUSH
37960: LD_INT 1
37962: ARRAY
37963: PUSH
37964: LD_STRING l
37966: EQUAL
37967: IFFALSE 37992
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37969: LD_ADDR_VAR 0 2
37973: PUSH
37974: LD_VAR 0 1
37978: PPUSH
37979: CALL_OW 437
37983: PUSH
37984: LD_INT 1
37986: ARRAY
37987: PUSH
37988: LD_INT 4
37990: ARRAY
37991: ST_TO_ADDR
// end ;
37992: LD_VAR 0 2
37996: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37997: LD_INT 0
37999: PPUSH
38000: PPUSH
38001: PPUSH
38002: PPUSH
// if not base_units then
38003: LD_VAR 0 1
38007: NOT
38008: IFFALSE 38012
// exit ;
38010: GO 38099
// result := false ;
38012: LD_ADDR_VAR 0 2
38016: PUSH
38017: LD_INT 0
38019: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38020: LD_ADDR_VAR 0 5
38024: PUSH
38025: LD_VAR 0 1
38029: PPUSH
38030: LD_INT 21
38032: PUSH
38033: LD_INT 3
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PPUSH
38040: CALL_OW 72
38044: ST_TO_ADDR
// if not tmp then
38045: LD_VAR 0 5
38049: NOT
38050: IFFALSE 38054
// exit ;
38052: GO 38099
// for i in tmp do
38054: LD_ADDR_VAR 0 3
38058: PUSH
38059: LD_VAR 0 5
38063: PUSH
38064: FOR_IN
38065: IFFALSE 38097
// begin result := EnemyInRange ( i , 22 ) ;
38067: LD_ADDR_VAR 0 2
38071: PUSH
38072: LD_VAR 0 3
38076: PPUSH
38077: LD_INT 22
38079: PPUSH
38080: CALL 36335 0 2
38084: ST_TO_ADDR
// if result then
38085: LD_VAR 0 2
38089: IFFALSE 38095
// exit ;
38091: POP
38092: POP
38093: GO 38099
// end ;
38095: GO 38064
38097: POP
38098: POP
// end ;
38099: LD_VAR 0 2
38103: RET
// export function FilterByTag ( units , tag ) ; begin
38104: LD_INT 0
38106: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38107: LD_ADDR_VAR 0 3
38111: PUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: LD_INT 120
38119: PUSH
38120: LD_VAR 0 2
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PPUSH
38129: CALL_OW 72
38133: ST_TO_ADDR
// end ;
38134: LD_VAR 0 3
38138: RET
// export function IsDriver ( un ) ; begin
38139: LD_INT 0
38141: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38142: LD_ADDR_VAR 0 2
38146: PUSH
38147: LD_VAR 0 1
38151: PUSH
38152: LD_INT 55
38154: PUSH
38155: EMPTY
38156: LIST
38157: PPUSH
38158: CALL_OW 69
38162: IN
38163: ST_TO_ADDR
// end ;
38164: LD_VAR 0 2
38168: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38169: LD_INT 0
38171: PPUSH
38172: PPUSH
// list := [ ] ;
38173: LD_ADDR_VAR 0 5
38177: PUSH
38178: EMPTY
38179: ST_TO_ADDR
// case d of 0 :
38180: LD_VAR 0 3
38184: PUSH
38185: LD_INT 0
38187: DOUBLE
38188: EQUAL
38189: IFTRUE 38193
38191: GO 38326
38193: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38194: LD_ADDR_VAR 0 5
38198: PUSH
38199: LD_VAR 0 1
38203: PUSH
38204: LD_INT 4
38206: MINUS
38207: PUSH
38208: LD_VAR 0 2
38212: PUSH
38213: LD_INT 4
38215: MINUS
38216: PUSH
38217: LD_INT 2
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: LIST
38224: PUSH
38225: LD_VAR 0 1
38229: PUSH
38230: LD_INT 3
38232: MINUS
38233: PUSH
38234: LD_VAR 0 2
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: PUSH
38247: LD_VAR 0 1
38251: PUSH
38252: LD_INT 4
38254: PLUS
38255: PUSH
38256: LD_VAR 0 2
38260: PUSH
38261: LD_INT 4
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: LIST
38268: PUSH
38269: LD_VAR 0 1
38273: PUSH
38274: LD_INT 3
38276: PLUS
38277: PUSH
38278: LD_VAR 0 2
38282: PUSH
38283: LD_INT 3
38285: PLUS
38286: PUSH
38287: LD_INT 5
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: LIST
38294: PUSH
38295: LD_VAR 0 1
38299: PUSH
38300: LD_VAR 0 2
38304: PUSH
38305: LD_INT 4
38307: PLUS
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: LIST
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: ST_TO_ADDR
// end ; 1 :
38324: GO 39024
38326: LD_INT 1
38328: DOUBLE
38329: EQUAL
38330: IFTRUE 38334
38332: GO 38467
38334: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38335: LD_ADDR_VAR 0 5
38339: PUSH
38340: LD_VAR 0 1
38344: PUSH
38345: LD_VAR 0 2
38349: PUSH
38350: LD_INT 4
38352: MINUS
38353: PUSH
38354: LD_INT 3
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: LIST
38361: PUSH
38362: LD_VAR 0 1
38366: PUSH
38367: LD_INT 3
38369: MINUS
38370: PUSH
38371: LD_VAR 0 2
38375: PUSH
38376: LD_INT 3
38378: MINUS
38379: PUSH
38380: LD_INT 2
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: PUSH
38388: LD_VAR 0 1
38392: PUSH
38393: LD_INT 4
38395: MINUS
38396: PUSH
38397: LD_VAR 0 2
38401: PUSH
38402: LD_INT 1
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: LIST
38409: PUSH
38410: LD_VAR 0 1
38414: PUSH
38415: LD_VAR 0 2
38419: PUSH
38420: LD_INT 3
38422: PLUS
38423: PUSH
38424: LD_INT 0
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: PUSH
38432: LD_VAR 0 1
38436: PUSH
38437: LD_INT 4
38439: PLUS
38440: PUSH
38441: LD_VAR 0 2
38445: PUSH
38446: LD_INT 4
38448: PLUS
38449: PUSH
38450: LD_INT 5
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: LIST
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: ST_TO_ADDR
// end ; 2 :
38465: GO 39024
38467: LD_INT 2
38469: DOUBLE
38470: EQUAL
38471: IFTRUE 38475
38473: GO 38604
38475: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38476: LD_ADDR_VAR 0 5
38480: PUSH
38481: LD_VAR 0 1
38485: PUSH
38486: LD_VAR 0 2
38490: PUSH
38491: LD_INT 3
38493: MINUS
38494: PUSH
38495: LD_INT 3
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: PUSH
38503: LD_VAR 0 1
38507: PUSH
38508: LD_INT 4
38510: PLUS
38511: PUSH
38512: LD_VAR 0 2
38516: PUSH
38517: LD_INT 4
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: LIST
38524: PUSH
38525: LD_VAR 0 1
38529: PUSH
38530: LD_VAR 0 2
38534: PUSH
38535: LD_INT 4
38537: PLUS
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: PUSH
38547: LD_VAR 0 1
38551: PUSH
38552: LD_INT 3
38554: MINUS
38555: PUSH
38556: LD_VAR 0 2
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: LIST
38568: PUSH
38569: LD_VAR 0 1
38573: PUSH
38574: LD_INT 4
38576: MINUS
38577: PUSH
38578: LD_VAR 0 2
38582: PUSH
38583: LD_INT 4
38585: MINUS
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: LIST
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: ST_TO_ADDR
// end ; 3 :
38602: GO 39024
38604: LD_INT 3
38606: DOUBLE
38607: EQUAL
38608: IFTRUE 38612
38610: GO 38745
38612: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38613: LD_ADDR_VAR 0 5
38617: PUSH
38618: LD_VAR 0 1
38622: PUSH
38623: LD_INT 3
38625: PLUS
38626: PUSH
38627: LD_VAR 0 2
38631: PUSH
38632: LD_INT 4
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: LIST
38639: PUSH
38640: LD_VAR 0 1
38644: PUSH
38645: LD_INT 4
38647: PLUS
38648: PUSH
38649: LD_VAR 0 2
38653: PUSH
38654: LD_INT 4
38656: PLUS
38657: PUSH
38658: LD_INT 5
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: PUSH
38666: LD_VAR 0 1
38670: PUSH
38671: LD_INT 4
38673: MINUS
38674: PUSH
38675: LD_VAR 0 2
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: LIST
38687: PUSH
38688: LD_VAR 0 1
38692: PUSH
38693: LD_VAR 0 2
38697: PUSH
38698: LD_INT 4
38700: MINUS
38701: PUSH
38702: LD_INT 3
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: LIST
38709: PUSH
38710: LD_VAR 0 1
38714: PUSH
38715: LD_INT 3
38717: MINUS
38718: PUSH
38719: LD_VAR 0 2
38723: PUSH
38724: LD_INT 3
38726: MINUS
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: LIST
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: ST_TO_ADDR
// end ; 4 :
38743: GO 39024
38745: LD_INT 4
38747: DOUBLE
38748: EQUAL
38749: IFTRUE 38753
38751: GO 38886
38753: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38754: LD_ADDR_VAR 0 5
38758: PUSH
38759: LD_VAR 0 1
38763: PUSH
38764: LD_VAR 0 2
38768: PUSH
38769: LD_INT 4
38771: PLUS
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: LIST
38780: PUSH
38781: LD_VAR 0 1
38785: PUSH
38786: LD_INT 3
38788: PLUS
38789: PUSH
38790: LD_VAR 0 2
38794: PUSH
38795: LD_INT 3
38797: PLUS
38798: PUSH
38799: LD_INT 5
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: LIST
38806: PUSH
38807: LD_VAR 0 1
38811: PUSH
38812: LD_INT 4
38814: PLUS
38815: PUSH
38816: LD_VAR 0 2
38820: PUSH
38821: LD_INT 4
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: LIST
38828: PUSH
38829: LD_VAR 0 1
38833: PUSH
38834: LD_VAR 0 2
38838: PUSH
38839: LD_INT 3
38841: MINUS
38842: PUSH
38843: LD_INT 3
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: LIST
38850: PUSH
38851: LD_VAR 0 1
38855: PUSH
38856: LD_INT 4
38858: MINUS
38859: PUSH
38860: LD_VAR 0 2
38864: PUSH
38865: LD_INT 4
38867: MINUS
38868: PUSH
38869: LD_INT 2
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: ST_TO_ADDR
// end ; 5 :
38884: GO 39024
38886: LD_INT 5
38888: DOUBLE
38889: EQUAL
38890: IFTRUE 38894
38892: GO 39023
38894: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38895: LD_ADDR_VAR 0 5
38899: PUSH
38900: LD_VAR 0 1
38904: PUSH
38905: LD_INT 4
38907: MINUS
38908: PUSH
38909: LD_VAR 0 2
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: PUSH
38922: LD_VAR 0 1
38926: PUSH
38927: LD_VAR 0 2
38931: PUSH
38932: LD_INT 4
38934: MINUS
38935: PUSH
38936: LD_INT 3
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: LIST
38943: PUSH
38944: LD_VAR 0 1
38948: PUSH
38949: LD_INT 4
38951: PLUS
38952: PUSH
38953: LD_VAR 0 2
38957: PUSH
38958: LD_INT 4
38960: PLUS
38961: PUSH
38962: LD_INT 5
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: PUSH
38970: LD_VAR 0 1
38974: PUSH
38975: LD_INT 3
38977: PLUS
38978: PUSH
38979: LD_VAR 0 2
38983: PUSH
38984: LD_INT 4
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: LIST
38991: PUSH
38992: LD_VAR 0 1
38996: PUSH
38997: LD_VAR 0 2
39001: PUSH
39002: LD_INT 3
39004: PLUS
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: LIST
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: ST_TO_ADDR
// end ; end ;
39021: GO 39024
39023: POP
// result := list ;
39024: LD_ADDR_VAR 0 4
39028: PUSH
39029: LD_VAR 0 5
39033: ST_TO_ADDR
// end ;
39034: LD_VAR 0 4
39038: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39039: LD_INT 0
39041: PPUSH
39042: PPUSH
39043: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39044: LD_VAR 0 1
39048: NOT
39049: PUSH
39050: LD_VAR 0 2
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: LD_INT 3
39063: PUSH
39064: LD_INT 4
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: IN
39073: NOT
39074: OR
39075: IFFALSE 39079
// exit ;
39077: GO 39171
// tmp := [ ] ;
39079: LD_ADDR_VAR 0 5
39083: PUSH
39084: EMPTY
39085: ST_TO_ADDR
// for i in units do
39086: LD_ADDR_VAR 0 4
39090: PUSH
39091: LD_VAR 0 1
39095: PUSH
39096: FOR_IN
39097: IFFALSE 39140
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
39099: LD_ADDR_VAR 0 5
39103: PUSH
39104: LD_VAR 0 5
39108: PPUSH
39109: LD_VAR 0 5
39113: PUSH
39114: LD_INT 1
39116: PLUS
39117: PPUSH
39118: LD_VAR 0 4
39122: PPUSH
39123: LD_VAR 0 2
39127: PPUSH
39128: CALL_OW 259
39132: PPUSH
39133: CALL_OW 2
39137: ST_TO_ADDR
39138: GO 39096
39140: POP
39141: POP
// if not tmp then
39142: LD_VAR 0 5
39146: NOT
39147: IFFALSE 39151
// exit ;
39149: GO 39171
// result := SortListByListDesc ( units , tmp ) ;
39151: LD_ADDR_VAR 0 3
39155: PUSH
39156: LD_VAR 0 1
39160: PPUSH
39161: LD_VAR 0 5
39165: PPUSH
39166: CALL_OW 77
39170: ST_TO_ADDR
// end ;
39171: LD_VAR 0 3
39175: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39176: LD_INT 0
39178: PPUSH
39179: PPUSH
39180: PPUSH
// result := false ;
39181: LD_ADDR_VAR 0 3
39185: PUSH
39186: LD_INT 0
39188: ST_TO_ADDR
// x := GetX ( building ) ;
39189: LD_ADDR_VAR 0 4
39193: PUSH
39194: LD_VAR 0 2
39198: PPUSH
39199: CALL_OW 250
39203: ST_TO_ADDR
// y := GetY ( building ) ;
39204: LD_ADDR_VAR 0 5
39208: PUSH
39209: LD_VAR 0 2
39213: PPUSH
39214: CALL_OW 251
39218: ST_TO_ADDR
// if not building or not x or not y then
39219: LD_VAR 0 2
39223: NOT
39224: PUSH
39225: LD_VAR 0 4
39229: NOT
39230: OR
39231: PUSH
39232: LD_VAR 0 5
39236: NOT
39237: OR
39238: IFFALSE 39242
// exit ;
39240: GO 39334
// if GetTaskList ( unit ) then
39242: LD_VAR 0 1
39246: PPUSH
39247: CALL_OW 437
39251: IFFALSE 39334
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39253: LD_STRING e
39255: PUSH
39256: LD_VAR 0 1
39260: PPUSH
39261: CALL_OW 437
39265: PUSH
39266: LD_INT 1
39268: ARRAY
39269: PUSH
39270: LD_INT 1
39272: ARRAY
39273: EQUAL
39274: PUSH
39275: LD_VAR 0 4
39279: PUSH
39280: LD_VAR 0 1
39284: PPUSH
39285: CALL_OW 437
39289: PUSH
39290: LD_INT 1
39292: ARRAY
39293: PUSH
39294: LD_INT 2
39296: ARRAY
39297: EQUAL
39298: AND
39299: PUSH
39300: LD_VAR 0 5
39304: PUSH
39305: LD_VAR 0 1
39309: PPUSH
39310: CALL_OW 437
39314: PUSH
39315: LD_INT 1
39317: ARRAY
39318: PUSH
39319: LD_INT 3
39321: ARRAY
39322: EQUAL
39323: AND
39324: IFFALSE 39334
// result := true end ;
39326: LD_ADDR_VAR 0 3
39330: PUSH
39331: LD_INT 1
39333: ST_TO_ADDR
// end ;
39334: LD_VAR 0 3
39338: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39339: LD_INT 0
39341: PPUSH
// result := false ;
39342: LD_ADDR_VAR 0 4
39346: PUSH
39347: LD_INT 0
39349: ST_TO_ADDR
// if GetTaskList ( unit ) then
39350: LD_VAR 0 1
39354: PPUSH
39355: CALL_OW 437
39359: IFFALSE 39442
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39361: LD_STRING M
39363: PUSH
39364: LD_VAR 0 1
39368: PPUSH
39369: CALL_OW 437
39373: PUSH
39374: LD_INT 1
39376: ARRAY
39377: PUSH
39378: LD_INT 1
39380: ARRAY
39381: EQUAL
39382: PUSH
39383: LD_VAR 0 2
39387: PUSH
39388: LD_VAR 0 1
39392: PPUSH
39393: CALL_OW 437
39397: PUSH
39398: LD_INT 1
39400: ARRAY
39401: PUSH
39402: LD_INT 2
39404: ARRAY
39405: EQUAL
39406: AND
39407: PUSH
39408: LD_VAR 0 3
39412: PUSH
39413: LD_VAR 0 1
39417: PPUSH
39418: CALL_OW 437
39422: PUSH
39423: LD_INT 1
39425: ARRAY
39426: PUSH
39427: LD_INT 3
39429: ARRAY
39430: EQUAL
39431: AND
39432: IFFALSE 39442
// result := true ;
39434: LD_ADDR_VAR 0 4
39438: PUSH
39439: LD_INT 1
39441: ST_TO_ADDR
// end ; end ;
39442: LD_VAR 0 4
39446: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39447: LD_INT 0
39449: PPUSH
39450: PPUSH
39451: PPUSH
39452: PPUSH
// if not unit or not area then
39453: LD_VAR 0 1
39457: NOT
39458: PUSH
39459: LD_VAR 0 2
39463: NOT
39464: OR
39465: IFFALSE 39469
// exit ;
39467: GO 39633
// tmp := AreaToList ( area , i ) ;
39469: LD_ADDR_VAR 0 6
39473: PUSH
39474: LD_VAR 0 2
39478: PPUSH
39479: LD_VAR 0 5
39483: PPUSH
39484: CALL_OW 517
39488: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
39489: LD_ADDR_VAR 0 5
39493: PUSH
39494: DOUBLE
39495: LD_INT 1
39497: DEC
39498: ST_TO_ADDR
39499: LD_VAR 0 6
39503: PUSH
39504: LD_INT 1
39506: ARRAY
39507: PUSH
39508: FOR_TO
39509: IFFALSE 39631
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39511: LD_ADDR_VAR 0 7
39515: PUSH
39516: LD_VAR 0 6
39520: PUSH
39521: LD_INT 1
39523: ARRAY
39524: PUSH
39525: LD_VAR 0 5
39529: ARRAY
39530: PUSH
39531: LD_VAR 0 6
39535: PUSH
39536: LD_INT 2
39538: ARRAY
39539: PUSH
39540: LD_VAR 0 5
39544: ARRAY
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39550: LD_VAR 0 7
39554: PUSH
39555: LD_INT 1
39557: ARRAY
39558: PPUSH
39559: LD_VAR 0 7
39563: PUSH
39564: LD_INT 2
39566: ARRAY
39567: PPUSH
39568: CALL_OW 428
39572: PUSH
39573: LD_INT 0
39575: EQUAL
39576: IFFALSE 39629
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39578: LD_VAR 0 1
39582: PPUSH
39583: LD_VAR 0 7
39587: PUSH
39588: LD_INT 1
39590: ARRAY
39591: PPUSH
39592: LD_VAR 0 7
39596: PUSH
39597: LD_INT 2
39599: ARRAY
39600: PPUSH
39601: LD_VAR 0 3
39605: PPUSH
39606: CALL_OW 48
// result := IsPlaced ( unit ) ;
39610: LD_ADDR_VAR 0 4
39614: PUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 305
39624: ST_TO_ADDR
// exit ;
39625: POP
39626: POP
39627: GO 39633
// end ; end ;
39629: GO 39508
39631: POP
39632: POP
// end ;
39633: LD_VAR 0 4
39637: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39638: LD_INT 0
39640: PPUSH
39641: PPUSH
39642: PPUSH
// if not side or side > 8 then
39643: LD_VAR 0 1
39647: NOT
39648: PUSH
39649: LD_VAR 0 1
39653: PUSH
39654: LD_INT 8
39656: GREATER
39657: OR
39658: IFFALSE 39662
// exit ;
39660: GO 39849
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39662: LD_ADDR_VAR 0 4
39666: PUSH
39667: LD_INT 22
39669: PUSH
39670: LD_VAR 0 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 21
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PPUSH
39693: CALL_OW 69
39697: ST_TO_ADDR
// if not tmp then
39698: LD_VAR 0 4
39702: NOT
39703: IFFALSE 39707
// exit ;
39705: GO 39849
// enable_addtolog := true ;
39707: LD_ADDR_OWVAR 81
39711: PUSH
39712: LD_INT 1
39714: ST_TO_ADDR
// AddToLog ( [ ) ;
39715: LD_STRING [
39717: PPUSH
39718: CALL_OW 561
// for i in tmp do
39722: LD_ADDR_VAR 0 3
39726: PUSH
39727: LD_VAR 0 4
39731: PUSH
39732: FOR_IN
39733: IFFALSE 39840
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39735: LD_STRING [
39737: PUSH
39738: LD_VAR 0 3
39742: PPUSH
39743: CALL_OW 266
39747: STR
39748: PUSH
39749: LD_STRING , 
39751: STR
39752: PUSH
39753: LD_VAR 0 3
39757: PPUSH
39758: CALL_OW 250
39762: STR
39763: PUSH
39764: LD_STRING , 
39766: STR
39767: PUSH
39768: LD_VAR 0 3
39772: PPUSH
39773: CALL_OW 251
39777: STR
39778: PUSH
39779: LD_STRING , 
39781: STR
39782: PUSH
39783: LD_VAR 0 3
39787: PPUSH
39788: CALL_OW 254
39792: STR
39793: PUSH
39794: LD_STRING , 
39796: STR
39797: PUSH
39798: LD_VAR 0 3
39802: PPUSH
39803: LD_INT 1
39805: PPUSH
39806: CALL_OW 268
39810: STR
39811: PUSH
39812: LD_STRING , 
39814: STR
39815: PUSH
39816: LD_VAR 0 3
39820: PPUSH
39821: LD_INT 2
39823: PPUSH
39824: CALL_OW 268
39828: STR
39829: PUSH
39830: LD_STRING ],
39832: STR
39833: PPUSH
39834: CALL_OW 561
// end ;
39838: GO 39732
39840: POP
39841: POP
// AddToLog ( ]; ) ;
39842: LD_STRING ];
39844: PPUSH
39845: CALL_OW 561
// end ;
39849: LD_VAR 0 2
39853: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39854: LD_INT 0
39856: PPUSH
39857: PPUSH
39858: PPUSH
39859: PPUSH
39860: PPUSH
// if not area or not rate or not max then
39861: LD_VAR 0 1
39865: NOT
39866: PUSH
39867: LD_VAR 0 2
39871: NOT
39872: OR
39873: PUSH
39874: LD_VAR 0 4
39878: NOT
39879: OR
39880: IFFALSE 39884
// exit ;
39882: GO 40073
// while 1 do
39884: LD_INT 1
39886: IFFALSE 40073
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39888: LD_ADDR_VAR 0 9
39892: PUSH
39893: LD_VAR 0 1
39897: PPUSH
39898: LD_INT 1
39900: PPUSH
39901: CALL_OW 287
39905: PUSH
39906: LD_INT 10
39908: MUL
39909: ST_TO_ADDR
// r := rate / 10 ;
39910: LD_ADDR_VAR 0 7
39914: PUSH
39915: LD_VAR 0 2
39919: PUSH
39920: LD_INT 10
39922: DIVREAL
39923: ST_TO_ADDR
// time := 1 1$00 ;
39924: LD_ADDR_VAR 0 8
39928: PUSH
39929: LD_INT 2100
39931: ST_TO_ADDR
// if amount < min then
39932: LD_VAR 0 9
39936: PUSH
39937: LD_VAR 0 3
39941: LESS
39942: IFFALSE 39960
// r := r * 2 else
39944: LD_ADDR_VAR 0 7
39948: PUSH
39949: LD_VAR 0 7
39953: PUSH
39954: LD_INT 2
39956: MUL
39957: ST_TO_ADDR
39958: GO 39986
// if amount > max then
39960: LD_VAR 0 9
39964: PUSH
39965: LD_VAR 0 4
39969: GREATER
39970: IFFALSE 39986
// r := r / 2 ;
39972: LD_ADDR_VAR 0 7
39976: PUSH
39977: LD_VAR 0 7
39981: PUSH
39982: LD_INT 2
39984: DIVREAL
39985: ST_TO_ADDR
// time := time / r ;
39986: LD_ADDR_VAR 0 8
39990: PUSH
39991: LD_VAR 0 8
39995: PUSH
39996: LD_VAR 0 7
40000: DIVREAL
40001: ST_TO_ADDR
// if time < 0 then
40002: LD_VAR 0 8
40006: PUSH
40007: LD_INT 0
40009: LESS
40010: IFFALSE 40027
// time := time * - 1 ;
40012: LD_ADDR_VAR 0 8
40016: PUSH
40017: LD_VAR 0 8
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: MUL
40026: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40027: LD_VAR 0 8
40031: PUSH
40032: LD_INT 35
40034: PPUSH
40035: LD_INT 875
40037: PPUSH
40038: CALL_OW 12
40042: PLUS
40043: PPUSH
40044: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40048: LD_INT 1
40050: PPUSH
40051: LD_INT 5
40053: PPUSH
40054: CALL_OW 12
40058: PPUSH
40059: LD_VAR 0 1
40063: PPUSH
40064: LD_INT 1
40066: PPUSH
40067: CALL_OW 55
// end ;
40071: GO 39884
// end ;
40073: LD_VAR 0 5
40077: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40078: LD_INT 0
40080: PPUSH
40081: PPUSH
40082: PPUSH
40083: PPUSH
40084: PPUSH
40085: PPUSH
40086: PPUSH
40087: PPUSH
// if not turrets or not factories then
40088: LD_VAR 0 1
40092: NOT
40093: PUSH
40094: LD_VAR 0 2
40098: NOT
40099: OR
40100: IFFALSE 40104
// exit ;
40102: GO 40411
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40104: LD_ADDR_VAR 0 10
40108: PUSH
40109: LD_INT 5
40111: PUSH
40112: LD_INT 6
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 4
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 3
40131: PUSH
40132: LD_INT 5
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 24
40146: PUSH
40147: LD_INT 25
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 23
40156: PUSH
40157: LD_INT 27
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 42
40170: PUSH
40171: LD_INT 43
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 44
40180: PUSH
40181: LD_INT 46
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 45
40190: PUSH
40191: LD_INT 47
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: LIST
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: LIST
40207: ST_TO_ADDR
// result := [ ] ;
40208: LD_ADDR_VAR 0 3
40212: PUSH
40213: EMPTY
40214: ST_TO_ADDR
// for i in turrets do
40215: LD_ADDR_VAR 0 4
40219: PUSH
40220: LD_VAR 0 1
40224: PUSH
40225: FOR_IN
40226: IFFALSE 40409
// begin nat := GetNation ( i ) ;
40228: LD_ADDR_VAR 0 7
40232: PUSH
40233: LD_VAR 0 4
40237: PPUSH
40238: CALL_OW 248
40242: ST_TO_ADDR
// weapon := 0 ;
40243: LD_ADDR_VAR 0 8
40247: PUSH
40248: LD_INT 0
40250: ST_TO_ADDR
// if not nat then
40251: LD_VAR 0 7
40255: NOT
40256: IFFALSE 40260
// continue ;
40258: GO 40225
// for j in list [ nat ] do
40260: LD_ADDR_VAR 0 5
40264: PUSH
40265: LD_VAR 0 10
40269: PUSH
40270: LD_VAR 0 7
40274: ARRAY
40275: PUSH
40276: FOR_IN
40277: IFFALSE 40318
// if GetBWeapon ( i ) = j [ 1 ] then
40279: LD_VAR 0 4
40283: PPUSH
40284: CALL_OW 269
40288: PUSH
40289: LD_VAR 0 5
40293: PUSH
40294: LD_INT 1
40296: ARRAY
40297: EQUAL
40298: IFFALSE 40316
// begin weapon := j [ 2 ] ;
40300: LD_ADDR_VAR 0 8
40304: PUSH
40305: LD_VAR 0 5
40309: PUSH
40310: LD_INT 2
40312: ARRAY
40313: ST_TO_ADDR
// break ;
40314: GO 40318
// end ;
40316: GO 40276
40318: POP
40319: POP
// if not weapon then
40320: LD_VAR 0 8
40324: NOT
40325: IFFALSE 40329
// continue ;
40327: GO 40225
// for k in factories do
40329: LD_ADDR_VAR 0 6
40333: PUSH
40334: LD_VAR 0 2
40338: PUSH
40339: FOR_IN
40340: IFFALSE 40405
// begin weapons := AvailableWeaponList ( k ) ;
40342: LD_ADDR_VAR 0 9
40346: PUSH
40347: LD_VAR 0 6
40351: PPUSH
40352: CALL_OW 478
40356: ST_TO_ADDR
// if not weapons then
40357: LD_VAR 0 9
40361: NOT
40362: IFFALSE 40366
// continue ;
40364: GO 40339
// if weapon in weapons then
40366: LD_VAR 0 8
40370: PUSH
40371: LD_VAR 0 9
40375: IN
40376: IFFALSE 40403
// begin result := [ i , weapon ] ;
40378: LD_ADDR_VAR 0 3
40382: PUSH
40383: LD_VAR 0 4
40387: PUSH
40388: LD_VAR 0 8
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: ST_TO_ADDR
// exit ;
40397: POP
40398: POP
40399: POP
40400: POP
40401: GO 40411
// end ; end ;
40403: GO 40339
40405: POP
40406: POP
// end ;
40407: GO 40225
40409: POP
40410: POP
// end ;
40411: LD_VAR 0 3
40415: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40416: LD_INT 0
40418: PPUSH
// if not side or side > 8 then
40419: LD_VAR 0 3
40423: NOT
40424: PUSH
40425: LD_VAR 0 3
40429: PUSH
40430: LD_INT 8
40432: GREATER
40433: OR
40434: IFFALSE 40438
// exit ;
40436: GO 40497
// if not range then
40438: LD_VAR 0 4
40442: NOT
40443: IFFALSE 40454
// range := - 12 ;
40445: LD_ADDR_VAR 0 4
40449: PUSH
40450: LD_INT 12
40452: NEG
40453: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40454: LD_VAR 0 1
40458: PPUSH
40459: LD_VAR 0 2
40463: PPUSH
40464: LD_VAR 0 3
40468: PPUSH
40469: LD_VAR 0 4
40473: PPUSH
40474: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
40478: LD_VAR 0 1
40482: PPUSH
40483: LD_VAR 0 2
40487: PPUSH
40488: LD_VAR 0 3
40492: PPUSH
40493: CALL_OW 331
// end ;
40497: LD_VAR 0 5
40501: RET
// export function Video ( mode ) ; begin
40502: LD_INT 0
40504: PPUSH
// ingame_video = mode ;
40505: LD_ADDR_OWVAR 52
40509: PUSH
40510: LD_VAR 0 1
40514: ST_TO_ADDR
// interface_hidden = mode ;
40515: LD_ADDR_OWVAR 54
40519: PUSH
40520: LD_VAR 0 1
40524: ST_TO_ADDR
// end ;
40525: LD_VAR 0 2
40529: RET
// export function Join ( array , element ) ; begin
40530: LD_INT 0
40532: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40533: LD_ADDR_VAR 0 3
40537: PUSH
40538: LD_VAR 0 1
40542: PPUSH
40543: LD_VAR 0 1
40547: PUSH
40548: LD_INT 1
40550: PLUS
40551: PPUSH
40552: LD_VAR 0 2
40556: PPUSH
40557: CALL_OW 1
40561: ST_TO_ADDR
// end ;
40562: LD_VAR 0 3
40566: RET
// export function JoinUnion ( array , element ) ; begin
40567: LD_INT 0
40569: PPUSH
// result := array union element ;
40570: LD_ADDR_VAR 0 3
40574: PUSH
40575: LD_VAR 0 1
40579: PUSH
40580: LD_VAR 0 2
40584: UNION
40585: ST_TO_ADDR
// end ;
40586: LD_VAR 0 3
40590: RET
// export function GetBehemoths ( side ) ; begin
40591: LD_INT 0
40593: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
40594: LD_ADDR_VAR 0 2
40598: PUSH
40599: LD_INT 22
40601: PUSH
40602: LD_VAR 0 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 31
40613: PUSH
40614: LD_INT 25
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PPUSH
40625: CALL_OW 69
40629: ST_TO_ADDR
// end ;
40630: LD_VAR 0 2
40634: RET
// export function Shuffle ( array ) ; var i , index ; begin
40635: LD_INT 0
40637: PPUSH
40638: PPUSH
40639: PPUSH
// result := [ ] ;
40640: LD_ADDR_VAR 0 2
40644: PUSH
40645: EMPTY
40646: ST_TO_ADDR
// if not array then
40647: LD_VAR 0 1
40651: NOT
40652: IFFALSE 40656
// exit ;
40654: GO 40755
// Randomize ;
40656: CALL_OW 10
// for i = array downto 1 do
40660: LD_ADDR_VAR 0 3
40664: PUSH
40665: DOUBLE
40666: LD_VAR 0 1
40670: INC
40671: ST_TO_ADDR
40672: LD_INT 1
40674: PUSH
40675: FOR_DOWNTO
40676: IFFALSE 40753
// begin index := rand ( 1 , array ) ;
40678: LD_ADDR_VAR 0 4
40682: PUSH
40683: LD_INT 1
40685: PPUSH
40686: LD_VAR 0 1
40690: PPUSH
40691: CALL_OW 12
40695: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40696: LD_ADDR_VAR 0 2
40700: PUSH
40701: LD_VAR 0 2
40705: PPUSH
40706: LD_VAR 0 2
40710: PUSH
40711: LD_INT 1
40713: PLUS
40714: PPUSH
40715: LD_VAR 0 1
40719: PUSH
40720: LD_VAR 0 4
40724: ARRAY
40725: PPUSH
40726: CALL_OW 2
40730: ST_TO_ADDR
// array := Delete ( array , index ) ;
40731: LD_ADDR_VAR 0 1
40735: PUSH
40736: LD_VAR 0 1
40740: PPUSH
40741: LD_VAR 0 4
40745: PPUSH
40746: CALL_OW 3
40750: ST_TO_ADDR
// end ;
40751: GO 40675
40753: POP
40754: POP
// end ;
40755: LD_VAR 0 2
40759: RET
// export function GetBaseMaterials ( base ) ; begin
40760: LD_INT 0
40762: PPUSH
// result := [ 0 , 0 , 0 ] ;
40763: LD_ADDR_VAR 0 2
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: LIST
40781: ST_TO_ADDR
// if not base then
40782: LD_VAR 0 1
40786: NOT
40787: IFFALSE 40791
// exit ;
40789: GO 40840
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40791: LD_ADDR_VAR 0 2
40795: PUSH
40796: LD_VAR 0 1
40800: PPUSH
40801: LD_INT 1
40803: PPUSH
40804: CALL_OW 275
40808: PUSH
40809: LD_VAR 0 1
40813: PPUSH
40814: LD_INT 2
40816: PPUSH
40817: CALL_OW 275
40821: PUSH
40822: LD_VAR 0 1
40826: PPUSH
40827: LD_INT 3
40829: PPUSH
40830: CALL_OW 275
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: LIST
40839: ST_TO_ADDR
// end ;
40840: LD_VAR 0 2
40844: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40845: LD_INT 0
40847: PPUSH
40848: PPUSH
// result := array ;
40849: LD_ADDR_VAR 0 3
40853: PUSH
40854: LD_VAR 0 1
40858: ST_TO_ADDR
// if size > 0 then
40859: LD_VAR 0 2
40863: PUSH
40864: LD_INT 0
40866: GREATER
40867: IFFALSE 40913
// for i := array downto size do
40869: LD_ADDR_VAR 0 4
40873: PUSH
40874: DOUBLE
40875: LD_VAR 0 1
40879: INC
40880: ST_TO_ADDR
40881: LD_VAR 0 2
40885: PUSH
40886: FOR_DOWNTO
40887: IFFALSE 40911
// result := Delete ( result , result ) ;
40889: LD_ADDR_VAR 0 3
40893: PUSH
40894: LD_VAR 0 3
40898: PPUSH
40899: LD_VAR 0 3
40903: PPUSH
40904: CALL_OW 3
40908: ST_TO_ADDR
40909: GO 40886
40911: POP
40912: POP
// end ;
40913: LD_VAR 0 3
40917: RET
// export function ComExit ( unit ) ; var tmp ; begin
40918: LD_INT 0
40920: PPUSH
40921: PPUSH
// if not IsInUnit ( unit ) then
40922: LD_VAR 0 1
40926: PPUSH
40927: CALL_OW 310
40931: NOT
40932: IFFALSE 40936
// exit ;
40934: GO 40996
// tmp := IsInUnit ( unit ) ;
40936: LD_ADDR_VAR 0 3
40940: PUSH
40941: LD_VAR 0 1
40945: PPUSH
40946: CALL_OW 310
40950: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40951: LD_VAR 0 3
40955: PPUSH
40956: CALL_OW 247
40960: PUSH
40961: LD_INT 2
40963: EQUAL
40964: IFFALSE 40977
// ComExitVehicle ( unit ) else
40966: LD_VAR 0 1
40970: PPUSH
40971: CALL_OW 121
40975: GO 40986
// ComExitBuilding ( unit ) ;
40977: LD_VAR 0 1
40981: PPUSH
40982: CALL_OW 122
// result := tmp ;
40986: LD_ADDR_VAR 0 2
40990: PUSH
40991: LD_VAR 0 3
40995: ST_TO_ADDR
// end ;
40996: LD_VAR 0 2
41000: RET
// export function ComExitAll ( units ) ; var i ; begin
41001: LD_INT 0
41003: PPUSH
41004: PPUSH
// if not units then
41005: LD_VAR 0 1
41009: NOT
41010: IFFALSE 41014
// exit ;
41012: GO 41040
// for i in units do
41014: LD_ADDR_VAR 0 3
41018: PUSH
41019: LD_VAR 0 1
41023: PUSH
41024: FOR_IN
41025: IFFALSE 41038
// ComExit ( i ) ;
41027: LD_VAR 0 3
41031: PPUSH
41032: CALL 40918 0 1
41036: GO 41024
41038: POP
41039: POP
// end ;
41040: LD_VAR 0 2
41044: RET
// export function ResetHc ; begin
41045: LD_INT 0
41047: PPUSH
// InitHc ;
41048: CALL_OW 19
// hc_importance := 0 ;
41052: LD_ADDR_OWVAR 32
41056: PUSH
41057: LD_INT 0
41059: ST_TO_ADDR
// end ;
41060: LD_VAR 0 1
41064: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41065: LD_INT 0
41067: PPUSH
41068: PPUSH
41069: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41070: LD_ADDR_VAR 0 6
41074: PUSH
41075: LD_VAR 0 1
41079: PUSH
41080: LD_VAR 0 3
41084: PLUS
41085: PUSH
41086: LD_INT 2
41088: DIV
41089: ST_TO_ADDR
// if _x < 0 then
41090: LD_VAR 0 6
41094: PUSH
41095: LD_INT 0
41097: LESS
41098: IFFALSE 41115
// _x := _x * - 1 ;
41100: LD_ADDR_VAR 0 6
41104: PUSH
41105: LD_VAR 0 6
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: MUL
41114: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41115: LD_ADDR_VAR 0 7
41119: PUSH
41120: LD_VAR 0 2
41124: PUSH
41125: LD_VAR 0 4
41129: PLUS
41130: PUSH
41131: LD_INT 2
41133: DIV
41134: ST_TO_ADDR
// if _y < 0 then
41135: LD_VAR 0 7
41139: PUSH
41140: LD_INT 0
41142: LESS
41143: IFFALSE 41160
// _y := _y * - 1 ;
41145: LD_ADDR_VAR 0 7
41149: PUSH
41150: LD_VAR 0 7
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: MUL
41159: ST_TO_ADDR
// result := [ _x , _y ] ;
41160: LD_ADDR_VAR 0 5
41164: PUSH
41165: LD_VAR 0 6
41169: PUSH
41170: LD_VAR 0 7
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: ST_TO_ADDR
// end ;
41179: LD_VAR 0 5
41183: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41184: LD_INT 0
41186: PPUSH
41187: PPUSH
41188: PPUSH
41189: PPUSH
// task := GetTaskList ( unit ) ;
41190: LD_ADDR_VAR 0 7
41194: PUSH
41195: LD_VAR 0 1
41199: PPUSH
41200: CALL_OW 437
41204: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41205: LD_VAR 0 7
41209: NOT
41210: PUSH
41211: LD_VAR 0 1
41215: PPUSH
41216: LD_VAR 0 2
41220: PPUSH
41221: CALL_OW 308
41225: NOT
41226: AND
41227: IFFALSE 41231
// exit ;
41229: GO 41349
// if IsInArea ( unit , area ) then
41231: LD_VAR 0 1
41235: PPUSH
41236: LD_VAR 0 2
41240: PPUSH
41241: CALL_OW 308
41245: IFFALSE 41263
// begin ComMoveToArea ( unit , goAway ) ;
41247: LD_VAR 0 1
41251: PPUSH
41252: LD_VAR 0 3
41256: PPUSH
41257: CALL_OW 113
// exit ;
41261: GO 41349
// end ; if task [ 1 ] [ 1 ] <> M then
41263: LD_VAR 0 7
41267: PUSH
41268: LD_INT 1
41270: ARRAY
41271: PUSH
41272: LD_INT 1
41274: ARRAY
41275: PUSH
41276: LD_STRING M
41278: NONEQUAL
41279: IFFALSE 41283
// exit ;
41281: GO 41349
// x := task [ 1 ] [ 2 ] ;
41283: LD_ADDR_VAR 0 5
41287: PUSH
41288: LD_VAR 0 7
41292: PUSH
41293: LD_INT 1
41295: ARRAY
41296: PUSH
41297: LD_INT 2
41299: ARRAY
41300: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41301: LD_ADDR_VAR 0 6
41305: PUSH
41306: LD_VAR 0 7
41310: PUSH
41311: LD_INT 1
41313: ARRAY
41314: PUSH
41315: LD_INT 3
41317: ARRAY
41318: ST_TO_ADDR
// if InArea ( x , y , area ) then
41319: LD_VAR 0 5
41323: PPUSH
41324: LD_VAR 0 6
41328: PPUSH
41329: LD_VAR 0 2
41333: PPUSH
41334: CALL_OW 309
41338: IFFALSE 41349
// ComStop ( unit ) ;
41340: LD_VAR 0 1
41344: PPUSH
41345: CALL_OW 141
// end ;
41349: LD_VAR 0 4
41353: RET
// export function Abs ( value ) ; begin
41354: LD_INT 0
41356: PPUSH
// result := value ;
41357: LD_ADDR_VAR 0 2
41361: PUSH
41362: LD_VAR 0 1
41366: ST_TO_ADDR
// if value < 0 then
41367: LD_VAR 0 1
41371: PUSH
41372: LD_INT 0
41374: LESS
41375: IFFALSE 41392
// result := value * - 1 ;
41377: LD_ADDR_VAR 0 2
41381: PUSH
41382: LD_VAR 0 1
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: MUL
41391: ST_TO_ADDR
// end ;
41392: LD_VAR 0 2
41396: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41397: LD_INT 0
41399: PPUSH
41400: PPUSH
41401: PPUSH
41402: PPUSH
41403: PPUSH
41404: PPUSH
41405: PPUSH
41406: PPUSH
// if not unit or not building then
41407: LD_VAR 0 1
41411: NOT
41412: PUSH
41413: LD_VAR 0 2
41417: NOT
41418: OR
41419: IFFALSE 41423
// exit ;
41421: GO 41649
// x := GetX ( building ) ;
41423: LD_ADDR_VAR 0 4
41427: PUSH
41428: LD_VAR 0 2
41432: PPUSH
41433: CALL_OW 250
41437: ST_TO_ADDR
// y := GetY ( building ) ;
41438: LD_ADDR_VAR 0 6
41442: PUSH
41443: LD_VAR 0 2
41447: PPUSH
41448: CALL_OW 251
41452: ST_TO_ADDR
// d := GetDir ( building ) ;
41453: LD_ADDR_VAR 0 8
41457: PUSH
41458: LD_VAR 0 2
41462: PPUSH
41463: CALL_OW 254
41467: ST_TO_ADDR
// r := 4 ;
41468: LD_ADDR_VAR 0 9
41472: PUSH
41473: LD_INT 4
41475: ST_TO_ADDR
// for i := 1 to 5 do
41476: LD_ADDR_VAR 0 10
41480: PUSH
41481: DOUBLE
41482: LD_INT 1
41484: DEC
41485: ST_TO_ADDR
41486: LD_INT 5
41488: PUSH
41489: FOR_TO
41490: IFFALSE 41647
// begin _x := ShiftX ( x , d , r + i ) ;
41492: LD_ADDR_VAR 0 5
41496: PUSH
41497: LD_VAR 0 4
41501: PPUSH
41502: LD_VAR 0 8
41506: PPUSH
41507: LD_VAR 0 9
41511: PUSH
41512: LD_VAR 0 10
41516: PLUS
41517: PPUSH
41518: CALL_OW 272
41522: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41523: LD_ADDR_VAR 0 7
41527: PUSH
41528: LD_VAR 0 6
41532: PPUSH
41533: LD_VAR 0 8
41537: PPUSH
41538: LD_VAR 0 9
41542: PUSH
41543: LD_VAR 0 10
41547: PLUS
41548: PPUSH
41549: CALL_OW 273
41553: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41554: LD_VAR 0 5
41558: PPUSH
41559: LD_VAR 0 7
41563: PPUSH
41564: CALL_OW 488
41568: PUSH
41569: LD_VAR 0 5
41573: PPUSH
41574: LD_VAR 0 7
41578: PPUSH
41579: CALL_OW 428
41583: PPUSH
41584: CALL_OW 247
41588: PUSH
41589: LD_INT 3
41591: PUSH
41592: LD_INT 2
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: IN
41599: NOT
41600: AND
41601: IFFALSE 41645
// begin ComMoveXY ( unit , _x , _y ) ;
41603: LD_VAR 0 1
41607: PPUSH
41608: LD_VAR 0 5
41612: PPUSH
41613: LD_VAR 0 7
41617: PPUSH
41618: CALL_OW 111
// result := [ _x , _y ] ;
41622: LD_ADDR_VAR 0 3
41626: PUSH
41627: LD_VAR 0 5
41631: PUSH
41632: LD_VAR 0 7
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: ST_TO_ADDR
// exit ;
41641: POP
41642: POP
41643: GO 41649
// end ; end ;
41645: GO 41489
41647: POP
41648: POP
// end ;
41649: LD_VAR 0 3
41653: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41654: LD_INT 0
41656: PPUSH
41657: PPUSH
41658: PPUSH
// result := 0 ;
41659: LD_ADDR_VAR 0 3
41663: PUSH
41664: LD_INT 0
41666: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41667: LD_VAR 0 1
41671: PUSH
41672: LD_INT 0
41674: LESS
41675: PUSH
41676: LD_VAR 0 1
41680: PUSH
41681: LD_INT 8
41683: GREATER
41684: OR
41685: PUSH
41686: LD_VAR 0 2
41690: PUSH
41691: LD_INT 0
41693: LESS
41694: OR
41695: PUSH
41696: LD_VAR 0 2
41700: PUSH
41701: LD_INT 8
41703: GREATER
41704: OR
41705: IFFALSE 41709
// exit ;
41707: GO 41784
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41709: LD_ADDR_VAR 0 4
41713: PUSH
41714: LD_INT 22
41716: PUSH
41717: LD_VAR 0 2
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PPUSH
41726: CALL_OW 69
41730: PUSH
41731: FOR_IN
41732: IFFALSE 41782
// begin un := UnitShoot ( i ) ;
41734: LD_ADDR_VAR 0 5
41738: PUSH
41739: LD_VAR 0 4
41743: PPUSH
41744: CALL_OW 504
41748: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41749: LD_VAR 0 5
41753: PPUSH
41754: CALL_OW 255
41758: PUSH
41759: LD_VAR 0 1
41763: EQUAL
41764: IFFALSE 41780
// begin result := un ;
41766: LD_ADDR_VAR 0 3
41770: PUSH
41771: LD_VAR 0 5
41775: ST_TO_ADDR
// exit ;
41776: POP
41777: POP
41778: GO 41784
// end ; end ;
41780: GO 41731
41782: POP
41783: POP
// end ;
41784: LD_VAR 0 3
41788: RET
// export function GetCargoBay ( units ) ; begin
41789: LD_INT 0
41791: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41792: LD_ADDR_VAR 0 2
41796: PUSH
41797: LD_VAR 0 1
41801: PPUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 34
41807: PUSH
41808: LD_INT 12
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 34
41817: PUSH
41818: LD_INT 51
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 34
41827: PUSH
41828: LD_INT 32
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 34
41837: PUSH
41838: LD_EXP 46
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: PPUSH
41854: CALL_OW 72
41858: ST_TO_ADDR
// end ;
41859: LD_VAR 0 2
41863: RET
// export function Negate ( value ) ; begin
41864: LD_INT 0
41866: PPUSH
// result := not value ;
41867: LD_ADDR_VAR 0 2
41871: PUSH
41872: LD_VAR 0 1
41876: NOT
41877: ST_TO_ADDR
// end ;
41878: LD_VAR 0 2
41882: RET
// export function Inc ( value ) ; begin
41883: LD_INT 0
41885: PPUSH
// result := value + 1 ;
41886: LD_ADDR_VAR 0 2
41890: PUSH
41891: LD_VAR 0 1
41895: PUSH
41896: LD_INT 1
41898: PLUS
41899: ST_TO_ADDR
// end ;
41900: LD_VAR 0 2
41904: RET
// export function Dec ( value ) ; begin
41905: LD_INT 0
41907: PPUSH
// result := value - 1 ;
41908: LD_ADDR_VAR 0 2
41912: PUSH
41913: LD_VAR 0 1
41917: PUSH
41918: LD_INT 1
41920: MINUS
41921: ST_TO_ADDR
// end ;
41922: LD_VAR 0 2
41926: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41927: LD_INT 0
41929: PPUSH
41930: PPUSH
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
41935: PPUSH
41936: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41937: LD_VAR 0 1
41941: PPUSH
41942: LD_VAR 0 2
41946: PPUSH
41947: CALL_OW 488
41951: NOT
41952: PUSH
41953: LD_VAR 0 3
41957: PPUSH
41958: LD_VAR 0 4
41962: PPUSH
41963: CALL_OW 488
41967: NOT
41968: OR
41969: IFFALSE 41982
// begin result := - 1 ;
41971: LD_ADDR_VAR 0 5
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: ST_TO_ADDR
// exit ;
41980: GO 42217
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41982: LD_ADDR_VAR 0 12
41986: PUSH
41987: LD_VAR 0 1
41991: PPUSH
41992: LD_VAR 0 2
41996: PPUSH
41997: LD_VAR 0 3
42001: PPUSH
42002: LD_VAR 0 4
42006: PPUSH
42007: CALL 41065 0 4
42011: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42012: LD_ADDR_VAR 0 11
42016: PUSH
42017: LD_VAR 0 1
42021: PPUSH
42022: LD_VAR 0 2
42026: PPUSH
42027: LD_VAR 0 12
42031: PUSH
42032: LD_INT 1
42034: ARRAY
42035: PPUSH
42036: LD_VAR 0 12
42040: PUSH
42041: LD_INT 2
42043: ARRAY
42044: PPUSH
42045: CALL_OW 298
42049: ST_TO_ADDR
// distance := 9999 ;
42050: LD_ADDR_VAR 0 10
42054: PUSH
42055: LD_INT 9999
42057: ST_TO_ADDR
// for i := 0 to 5 do
42058: LD_ADDR_VAR 0 6
42062: PUSH
42063: DOUBLE
42064: LD_INT 0
42066: DEC
42067: ST_TO_ADDR
42068: LD_INT 5
42070: PUSH
42071: FOR_TO
42072: IFFALSE 42215
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42074: LD_ADDR_VAR 0 7
42078: PUSH
42079: LD_VAR 0 1
42083: PPUSH
42084: LD_VAR 0 6
42088: PPUSH
42089: LD_VAR 0 11
42093: PPUSH
42094: CALL_OW 272
42098: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42099: LD_ADDR_VAR 0 8
42103: PUSH
42104: LD_VAR 0 2
42108: PPUSH
42109: LD_VAR 0 6
42113: PPUSH
42114: LD_VAR 0 11
42118: PPUSH
42119: CALL_OW 273
42123: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42124: LD_VAR 0 7
42128: PPUSH
42129: LD_VAR 0 8
42133: PPUSH
42134: CALL_OW 488
42138: NOT
42139: IFFALSE 42143
// continue ;
42141: GO 42071
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42143: LD_ADDR_VAR 0 9
42147: PUSH
42148: LD_VAR 0 12
42152: PUSH
42153: LD_INT 1
42155: ARRAY
42156: PPUSH
42157: LD_VAR 0 12
42161: PUSH
42162: LD_INT 2
42164: ARRAY
42165: PPUSH
42166: LD_VAR 0 7
42170: PPUSH
42171: LD_VAR 0 8
42175: PPUSH
42176: CALL_OW 298
42180: ST_TO_ADDR
// if tmp < distance then
42181: LD_VAR 0 9
42185: PUSH
42186: LD_VAR 0 10
42190: LESS
42191: IFFALSE 42213
// begin result := i ;
42193: LD_ADDR_VAR 0 5
42197: PUSH
42198: LD_VAR 0 6
42202: ST_TO_ADDR
// distance := tmp ;
42203: LD_ADDR_VAR 0 10
42207: PUSH
42208: LD_VAR 0 9
42212: ST_TO_ADDR
// end ; end ;
42213: GO 42071
42215: POP
42216: POP
// end ;
42217: LD_VAR 0 5
42221: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42222: LD_INT 0
42224: PPUSH
42225: PPUSH
// if not driver or not IsInUnit ( driver ) then
42226: LD_VAR 0 1
42230: NOT
42231: PUSH
42232: LD_VAR 0 1
42236: PPUSH
42237: CALL_OW 310
42241: NOT
42242: OR
42243: IFFALSE 42247
// exit ;
42245: GO 42337
// vehicle := IsInUnit ( driver ) ;
42247: LD_ADDR_VAR 0 3
42251: PUSH
42252: LD_VAR 0 1
42256: PPUSH
42257: CALL_OW 310
42261: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42262: LD_VAR 0 1
42266: PPUSH
42267: LD_STRING \
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: PUSH
42297: LD_STRING E
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: LD_VAR 0 3
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PPUSH
42333: CALL_OW 446
// end ;
42337: LD_VAR 0 2
42341: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42342: LD_INT 0
42344: PPUSH
42345: PPUSH
// if not driver or not IsInUnit ( driver ) then
42346: LD_VAR 0 1
42350: NOT
42351: PUSH
42352: LD_VAR 0 1
42356: PPUSH
42357: CALL_OW 310
42361: NOT
42362: OR
42363: IFFALSE 42367
// exit ;
42365: GO 42457
// vehicle := IsInUnit ( driver ) ;
42367: LD_ADDR_VAR 0 3
42371: PUSH
42372: LD_VAR 0 1
42376: PPUSH
42377: CALL_OW 310
42381: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42382: LD_VAR 0 1
42386: PPUSH
42387: LD_STRING \
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: PUSH
42417: LD_STRING E
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_VAR 0 3
42430: PUSH
42431: LD_INT 0
42433: PUSH
42434: LD_INT 0
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PPUSH
42453: CALL_OW 447
// end ;
42457: LD_VAR 0 2
42461: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
42462: LD_INT 0
42464: PPUSH
42465: PPUSH
42466: PPUSH
// tmp := [ ] ;
42467: LD_ADDR_VAR 0 5
42471: PUSH
42472: EMPTY
42473: ST_TO_ADDR
// for i in units do
42474: LD_ADDR_VAR 0 4
42478: PUSH
42479: LD_VAR 0 1
42483: PUSH
42484: FOR_IN
42485: IFFALSE 42523
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
42487: LD_ADDR_VAR 0 5
42491: PUSH
42492: LD_VAR 0 5
42496: PPUSH
42497: LD_VAR 0 5
42501: PUSH
42502: LD_INT 1
42504: PLUS
42505: PPUSH
42506: LD_VAR 0 4
42510: PPUSH
42511: CALL_OW 256
42515: PPUSH
42516: CALL_OW 2
42520: ST_TO_ADDR
42521: GO 42484
42523: POP
42524: POP
// if not tmp then
42525: LD_VAR 0 5
42529: NOT
42530: IFFALSE 42534
// exit ;
42532: GO 42582
// if asc then
42534: LD_VAR 0 2
42538: IFFALSE 42562
// result := SortListByListAsc ( units , tmp ) else
42540: LD_ADDR_VAR 0 3
42544: PUSH
42545: LD_VAR 0 1
42549: PPUSH
42550: LD_VAR 0 5
42554: PPUSH
42555: CALL_OW 76
42559: ST_TO_ADDR
42560: GO 42582
// result := SortListByListDesc ( units , tmp ) ;
42562: LD_ADDR_VAR 0 3
42566: PUSH
42567: LD_VAR 0 1
42571: PPUSH
42572: LD_VAR 0 5
42576: PPUSH
42577: CALL_OW 77
42581: ST_TO_ADDR
// end ;
42582: LD_VAR 0 3
42586: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42587: LD_INT 0
42589: PPUSH
42590: PPUSH
// task := GetTaskList ( mech ) ;
42591: LD_ADDR_VAR 0 4
42595: PUSH
42596: LD_VAR 0 1
42600: PPUSH
42601: CALL_OW 437
42605: ST_TO_ADDR
// if not task then
42606: LD_VAR 0 4
42610: NOT
42611: IFFALSE 42615
// exit ;
42613: GO 42657
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42615: LD_ADDR_VAR 0 3
42619: PUSH
42620: LD_VAR 0 4
42624: PUSH
42625: LD_INT 1
42627: ARRAY
42628: PUSH
42629: LD_INT 1
42631: ARRAY
42632: PUSH
42633: LD_STRING r
42635: EQUAL
42636: PUSH
42637: LD_VAR 0 4
42641: PUSH
42642: LD_INT 1
42644: ARRAY
42645: PUSH
42646: LD_INT 4
42648: ARRAY
42649: PUSH
42650: LD_VAR 0 2
42654: EQUAL
42655: AND
42656: ST_TO_ADDR
// end ;
42657: LD_VAR 0 3
42661: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42662: LD_INT 0
42664: PPUSH
// SetDir ( unit , d ) ;
42665: LD_VAR 0 1
42669: PPUSH
42670: LD_VAR 0 4
42674: PPUSH
42675: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42679: LD_VAR 0 1
42683: PPUSH
42684: LD_VAR 0 2
42688: PPUSH
42689: LD_VAR 0 3
42693: PPUSH
42694: LD_VAR 0 5
42698: PPUSH
42699: CALL_OW 48
// end ;
42703: LD_VAR 0 6
42707: RET
// export function ToNaturalNumber ( number ) ; begin
42708: LD_INT 0
42710: PPUSH
// result := number div 1 ;
42711: LD_ADDR_VAR 0 2
42715: PUSH
42716: LD_VAR 0 1
42720: PUSH
42721: LD_INT 1
42723: DIV
42724: ST_TO_ADDR
// if number < 0 then
42725: LD_VAR 0 1
42729: PUSH
42730: LD_INT 0
42732: LESS
42733: IFFALSE 42743
// result := 0 ;
42735: LD_ADDR_VAR 0 2
42739: PUSH
42740: LD_INT 0
42742: ST_TO_ADDR
// end ;
42743: LD_VAR 0 2
42747: RET
// export function SortByClass ( units , class ) ; var un ; begin
42748: LD_INT 0
42750: PPUSH
42751: PPUSH
// if not units or not class then
42752: LD_VAR 0 1
42756: NOT
42757: PUSH
42758: LD_VAR 0 2
42762: NOT
42763: OR
42764: IFFALSE 42768
// exit ;
42766: GO 42863
// result := [ ] ;
42768: LD_ADDR_VAR 0 3
42772: PUSH
42773: EMPTY
42774: ST_TO_ADDR
// for un in units do
42775: LD_ADDR_VAR 0 4
42779: PUSH
42780: LD_VAR 0 1
42784: PUSH
42785: FOR_IN
42786: IFFALSE 42861
// if GetClass ( un ) = class then
42788: LD_VAR 0 4
42792: PPUSH
42793: CALL_OW 257
42797: PUSH
42798: LD_VAR 0 2
42802: EQUAL
42803: IFFALSE 42830
// result := Insert ( result , 1 , un ) else
42805: LD_ADDR_VAR 0 3
42809: PUSH
42810: LD_VAR 0 3
42814: PPUSH
42815: LD_INT 1
42817: PPUSH
42818: LD_VAR 0 4
42822: PPUSH
42823: CALL_OW 2
42827: ST_TO_ADDR
42828: GO 42859
// result := Replace ( result , result + 1 , un ) ;
42830: LD_ADDR_VAR 0 3
42834: PUSH
42835: LD_VAR 0 3
42839: PPUSH
42840: LD_VAR 0 3
42844: PUSH
42845: LD_INT 1
42847: PLUS
42848: PPUSH
42849: LD_VAR 0 4
42853: PPUSH
42854: CALL_OW 1
42858: ST_TO_ADDR
42859: GO 42785
42861: POP
42862: POP
// end ;
42863: LD_VAR 0 3
42867: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42868: LD_INT 0
42870: PPUSH
42871: PPUSH
42872: PPUSH
42873: PPUSH
42874: PPUSH
42875: PPUSH
42876: PPUSH
// result := [ ] ;
42877: LD_ADDR_VAR 0 4
42881: PUSH
42882: EMPTY
42883: ST_TO_ADDR
// if x - r < 0 then
42884: LD_VAR 0 1
42888: PUSH
42889: LD_VAR 0 3
42893: MINUS
42894: PUSH
42895: LD_INT 0
42897: LESS
42898: IFFALSE 42910
// min_x := 0 else
42900: LD_ADDR_VAR 0 8
42904: PUSH
42905: LD_INT 0
42907: ST_TO_ADDR
42908: GO 42926
// min_x := x - r ;
42910: LD_ADDR_VAR 0 8
42914: PUSH
42915: LD_VAR 0 1
42919: PUSH
42920: LD_VAR 0 3
42924: MINUS
42925: ST_TO_ADDR
// if y - r < 0 then
42926: LD_VAR 0 2
42930: PUSH
42931: LD_VAR 0 3
42935: MINUS
42936: PUSH
42937: LD_INT 0
42939: LESS
42940: IFFALSE 42952
// min_y := 0 else
42942: LD_ADDR_VAR 0 7
42946: PUSH
42947: LD_INT 0
42949: ST_TO_ADDR
42950: GO 42968
// min_y := y - r ;
42952: LD_ADDR_VAR 0 7
42956: PUSH
42957: LD_VAR 0 2
42961: PUSH
42962: LD_VAR 0 3
42966: MINUS
42967: ST_TO_ADDR
// max_x := x + r ;
42968: LD_ADDR_VAR 0 9
42972: PUSH
42973: LD_VAR 0 1
42977: PUSH
42978: LD_VAR 0 3
42982: PLUS
42983: ST_TO_ADDR
// max_y := y + r ;
42984: LD_ADDR_VAR 0 10
42988: PUSH
42989: LD_VAR 0 2
42993: PUSH
42994: LD_VAR 0 3
42998: PLUS
42999: ST_TO_ADDR
// for _x = min_x to max_x do
43000: LD_ADDR_VAR 0 5
43004: PUSH
43005: DOUBLE
43006: LD_VAR 0 8
43010: DEC
43011: ST_TO_ADDR
43012: LD_VAR 0 9
43016: PUSH
43017: FOR_TO
43018: IFFALSE 43119
// for _y = min_y to max_y do
43020: LD_ADDR_VAR 0 6
43024: PUSH
43025: DOUBLE
43026: LD_VAR 0 7
43030: DEC
43031: ST_TO_ADDR
43032: LD_VAR 0 10
43036: PUSH
43037: FOR_TO
43038: IFFALSE 43115
// begin if not ValidHex ( _x , _y ) then
43040: LD_VAR 0 5
43044: PPUSH
43045: LD_VAR 0 6
43049: PPUSH
43050: CALL_OW 488
43054: NOT
43055: IFFALSE 43059
// continue ;
43057: GO 43037
// if GetResourceTypeXY ( _x , _y ) then
43059: LD_VAR 0 5
43063: PPUSH
43064: LD_VAR 0 6
43068: PPUSH
43069: CALL_OW 283
43073: IFFALSE 43113
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43075: LD_ADDR_VAR 0 4
43079: PUSH
43080: LD_VAR 0 4
43084: PPUSH
43085: LD_VAR 0 4
43089: PUSH
43090: LD_INT 1
43092: PLUS
43093: PPUSH
43094: LD_VAR 0 5
43098: PUSH
43099: LD_VAR 0 6
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PPUSH
43108: CALL_OW 1
43112: ST_TO_ADDR
// end ;
43113: GO 43037
43115: POP
43116: POP
43117: GO 43017
43119: POP
43120: POP
// end ;
43121: LD_VAR 0 4
43125: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43126: LD_INT 0
43128: PPUSH
43129: PPUSH
43130: PPUSH
43131: PPUSH
43132: PPUSH
43133: PPUSH
43134: PPUSH
43135: PPUSH
// if not units then
43136: LD_VAR 0 1
43140: NOT
43141: IFFALSE 43145
// exit ;
43143: GO 43570
// result := UnitFilter ( units , [ f_ok ] ) ;
43145: LD_ADDR_VAR 0 3
43149: PUSH
43150: LD_VAR 0 1
43154: PPUSH
43155: LD_INT 50
43157: PUSH
43158: EMPTY
43159: LIST
43160: PPUSH
43161: CALL_OW 72
43165: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43166: LD_ADDR_VAR 0 8
43170: PUSH
43171: LD_VAR 0 1
43175: PUSH
43176: LD_INT 1
43178: ARRAY
43179: PPUSH
43180: CALL_OW 255
43184: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
43185: LD_ADDR_VAR 0 10
43189: PUSH
43190: LD_INT 29
43192: PUSH
43193: LD_EXP 49
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: ST_TO_ADDR
// if not result then
43202: LD_VAR 0 3
43206: NOT
43207: IFFALSE 43211
// exit ;
43209: GO 43570
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43211: LD_ADDR_VAR 0 5
43215: PUSH
43216: LD_INT 81
43218: PUSH
43219: LD_VAR 0 8
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PPUSH
43228: CALL_OW 69
43232: ST_TO_ADDR
// for i in result do
43233: LD_ADDR_VAR 0 4
43237: PUSH
43238: LD_VAR 0 3
43242: PUSH
43243: FOR_IN
43244: IFFALSE 43568
// begin tag := GetTag ( i ) + 1 ;
43246: LD_ADDR_VAR 0 9
43250: PUSH
43251: LD_VAR 0 4
43255: PPUSH
43256: CALL_OW 110
43260: PUSH
43261: LD_INT 1
43263: PLUS
43264: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
43265: LD_ADDR_VAR 0 7
43269: PUSH
43270: LD_VAR 0 4
43274: PPUSH
43275: CALL_OW 250
43279: PPUSH
43280: LD_VAR 0 4
43284: PPUSH
43285: CALL_OW 251
43289: PPUSH
43290: LD_INT 6
43292: PPUSH
43293: CALL 42868 0 3
43297: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
43298: LD_VAR 0 7
43302: PUSH
43303: LD_VAR 0 4
43307: PPUSH
43308: CALL_OW 264
43312: PUSH
43313: LD_VAR 0 10
43317: IN
43318: NOT
43319: AND
43320: IFFALSE 43359
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
43322: LD_VAR 0 4
43326: PPUSH
43327: LD_VAR 0 7
43331: PUSH
43332: LD_INT 1
43334: ARRAY
43335: PUSH
43336: LD_INT 1
43338: ARRAY
43339: PPUSH
43340: LD_VAR 0 7
43344: PUSH
43345: LD_INT 1
43347: ARRAY
43348: PUSH
43349: LD_INT 2
43351: ARRAY
43352: PPUSH
43353: CALL_OW 116
43357: GO 43566
// if path > tag then
43359: LD_VAR 0 2
43363: PUSH
43364: LD_VAR 0 9
43368: GREATER
43369: IFFALSE 43536
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
43371: LD_ADDR_VAR 0 6
43375: PUSH
43376: LD_VAR 0 5
43380: PPUSH
43381: LD_INT 91
43383: PUSH
43384: LD_VAR 0 4
43388: PUSH
43389: LD_INT 12
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: LIST
43396: PPUSH
43397: CALL_OW 72
43401: ST_TO_ADDR
// if nearEnemy then
43402: LD_VAR 0 6
43406: IFFALSE 43434
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
43408: LD_VAR 0 4
43412: PPUSH
43413: LD_VAR 0 6
43417: PPUSH
43418: LD_VAR 0 4
43422: PPUSH
43423: CALL_OW 74
43427: PPUSH
43428: CALL_OW 115
43432: GO 43534
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43434: LD_VAR 0 4
43438: PPUSH
43439: LD_VAR 0 2
43443: PUSH
43444: LD_VAR 0 9
43448: ARRAY
43449: PUSH
43450: LD_INT 1
43452: ARRAY
43453: PPUSH
43454: LD_VAR 0 2
43458: PUSH
43459: LD_VAR 0 9
43463: ARRAY
43464: PUSH
43465: LD_INT 2
43467: ARRAY
43468: PPUSH
43469: CALL_OW 297
43473: PUSH
43474: LD_INT 6
43476: GREATER
43477: IFFALSE 43520
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43479: LD_VAR 0 4
43483: PPUSH
43484: LD_VAR 0 2
43488: PUSH
43489: LD_VAR 0 9
43493: ARRAY
43494: PUSH
43495: LD_INT 1
43497: ARRAY
43498: PPUSH
43499: LD_VAR 0 2
43503: PUSH
43504: LD_VAR 0 9
43508: ARRAY
43509: PUSH
43510: LD_INT 2
43512: ARRAY
43513: PPUSH
43514: CALL_OW 114
43518: GO 43534
// SetTag ( i , tag ) ;
43520: LD_VAR 0 4
43524: PPUSH
43525: LD_VAR 0 9
43529: PPUSH
43530: CALL_OW 109
// end else
43534: GO 43566
// if enemy then
43536: LD_VAR 0 5
43540: IFFALSE 43566
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43542: LD_VAR 0 4
43546: PPUSH
43547: LD_VAR 0 5
43551: PPUSH
43552: LD_VAR 0 4
43556: PPUSH
43557: CALL_OW 74
43561: PPUSH
43562: CALL_OW 115
// end ;
43566: GO 43243
43568: POP
43569: POP
// end ;
43570: LD_VAR 0 3
43574: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43575: LD_INT 0
43577: PPUSH
43578: PPUSH
43579: PPUSH
// if not unit or IsInUnit ( unit ) then
43580: LD_VAR 0 1
43584: NOT
43585: PUSH
43586: LD_VAR 0 1
43590: PPUSH
43591: CALL_OW 310
43595: OR
43596: IFFALSE 43600
// exit ;
43598: GO 43691
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43600: LD_ADDR_VAR 0 4
43604: PUSH
43605: LD_VAR 0 1
43609: PPUSH
43610: CALL_OW 250
43614: PPUSH
43615: LD_VAR 0 2
43619: PPUSH
43620: LD_INT 1
43622: PPUSH
43623: CALL_OW 272
43627: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43628: LD_ADDR_VAR 0 5
43632: PUSH
43633: LD_VAR 0 1
43637: PPUSH
43638: CALL_OW 251
43642: PPUSH
43643: LD_VAR 0 2
43647: PPUSH
43648: LD_INT 1
43650: PPUSH
43651: CALL_OW 273
43655: ST_TO_ADDR
// if ValidHex ( x , y ) then
43656: LD_VAR 0 4
43660: PPUSH
43661: LD_VAR 0 5
43665: PPUSH
43666: CALL_OW 488
43670: IFFALSE 43691
// ComTurnXY ( unit , x , y ) ;
43672: LD_VAR 0 1
43676: PPUSH
43677: LD_VAR 0 4
43681: PPUSH
43682: LD_VAR 0 5
43686: PPUSH
43687: CALL_OW 118
// end ;
43691: LD_VAR 0 3
43695: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43696: LD_INT 0
43698: PPUSH
43699: PPUSH
// result := false ;
43700: LD_ADDR_VAR 0 3
43704: PUSH
43705: LD_INT 0
43707: ST_TO_ADDR
// if not units then
43708: LD_VAR 0 2
43712: NOT
43713: IFFALSE 43717
// exit ;
43715: GO 43762
// for i in units do
43717: LD_ADDR_VAR 0 4
43721: PUSH
43722: LD_VAR 0 2
43726: PUSH
43727: FOR_IN
43728: IFFALSE 43760
// if See ( side , i ) then
43730: LD_VAR 0 1
43734: PPUSH
43735: LD_VAR 0 4
43739: PPUSH
43740: CALL_OW 292
43744: IFFALSE 43758
// begin result := true ;
43746: LD_ADDR_VAR 0 3
43750: PUSH
43751: LD_INT 1
43753: ST_TO_ADDR
// exit ;
43754: POP
43755: POP
43756: GO 43762
// end ;
43758: GO 43727
43760: POP
43761: POP
// end ;
43762: LD_VAR 0 3
43766: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43767: LD_INT 0
43769: PPUSH
43770: PPUSH
43771: PPUSH
43772: PPUSH
// if not unit or not points then
43773: LD_VAR 0 1
43777: NOT
43778: PUSH
43779: LD_VAR 0 2
43783: NOT
43784: OR
43785: IFFALSE 43789
// exit ;
43787: GO 43879
// dist := 99999 ;
43789: LD_ADDR_VAR 0 5
43793: PUSH
43794: LD_INT 99999
43796: ST_TO_ADDR
// for i in points do
43797: LD_ADDR_VAR 0 4
43801: PUSH
43802: LD_VAR 0 2
43806: PUSH
43807: FOR_IN
43808: IFFALSE 43877
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43810: LD_ADDR_VAR 0 6
43814: PUSH
43815: LD_VAR 0 1
43819: PPUSH
43820: LD_VAR 0 4
43824: PUSH
43825: LD_INT 1
43827: ARRAY
43828: PPUSH
43829: LD_VAR 0 4
43833: PUSH
43834: LD_INT 2
43836: ARRAY
43837: PPUSH
43838: CALL_OW 297
43842: ST_TO_ADDR
// if tmpDist < dist then
43843: LD_VAR 0 6
43847: PUSH
43848: LD_VAR 0 5
43852: LESS
43853: IFFALSE 43875
// begin result := i ;
43855: LD_ADDR_VAR 0 3
43859: PUSH
43860: LD_VAR 0 4
43864: ST_TO_ADDR
// dist := tmpDist ;
43865: LD_ADDR_VAR 0 5
43869: PUSH
43870: LD_VAR 0 6
43874: ST_TO_ADDR
// end ; end ;
43875: GO 43807
43877: POP
43878: POP
// end ;
43879: LD_VAR 0 3
43883: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43884: LD_INT 0
43886: PPUSH
// uc_side := side ;
43887: LD_ADDR_OWVAR 20
43891: PUSH
43892: LD_VAR 0 1
43896: ST_TO_ADDR
// uc_nation := 3 ;
43897: LD_ADDR_OWVAR 21
43901: PUSH
43902: LD_INT 3
43904: ST_TO_ADDR
// vc_chassis := 25 ;
43905: LD_ADDR_OWVAR 37
43909: PUSH
43910: LD_INT 25
43912: ST_TO_ADDR
// vc_engine := engine_siberite ;
43913: LD_ADDR_OWVAR 39
43917: PUSH
43918: LD_INT 3
43920: ST_TO_ADDR
// vc_control := control_computer ;
43921: LD_ADDR_OWVAR 38
43925: PUSH
43926: LD_INT 3
43928: ST_TO_ADDR
// vc_weapon := 59 ;
43929: LD_ADDR_OWVAR 40
43933: PUSH
43934: LD_INT 59
43936: ST_TO_ADDR
// result := CreateVehicle ;
43937: LD_ADDR_VAR 0 5
43941: PUSH
43942: CALL_OW 45
43946: ST_TO_ADDR
// SetDir ( result , d ) ;
43947: LD_VAR 0 5
43951: PPUSH
43952: LD_VAR 0 4
43956: PPUSH
43957: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43961: LD_VAR 0 5
43965: PPUSH
43966: LD_VAR 0 2
43970: PPUSH
43971: LD_VAR 0 3
43975: PPUSH
43976: LD_INT 0
43978: PPUSH
43979: CALL_OW 48
// end ;
43983: LD_VAR 0 5
43987: RET
