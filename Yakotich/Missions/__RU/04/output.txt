// starting var b , n ; begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 208 0 0
// SetBname ( NorthLenin , lenin ) ;
   8: LD_INT 253
  10: PPUSH
  11: LD_STRING lenin
  13: PPUSH
  14: CALL_OW 500
// SetBname ( SouthLenin , lenin ) ;
  18: LD_INT 218
  20: PPUSH
  21: LD_STRING lenin
  23: PPUSH
  24: CALL_OW 500
// SetBname ( MorozovBase , OC ) ;
  28: LD_INT 348
  30: PPUSH
  31: LD_STRING OC
  33: PPUSH
  34: CALL_OW 500
// SetBname ( YakotichBase , kamenev ) ;
  38: LD_INT 312
  40: PPUSH
  41: LD_STRING kamenev
  43: PPUSH
  44: CALL_OW 500
// SetBname ( BukovBase , Kuybyshev ) ;
  48: LD_INT 127
  50: PPUSH
  51: LD_STRING Kuybyshev
  53: PPUSH
  54: CALL_OW 500
// AnimateTrees ( true ) ;
  58: LD_INT 1
  60: PPUSH
  61: CALL_OW 573
// Randomize ;
  65: CALL_OW 10
// RandomizeAll ;
  69: CALL_OW 11
// for b in FilterUnitsInArea ( SouthLeninArea , [ [ f_type , unit_building ] ] ) do
  73: LD_ADDR_VAR 0 1
  77: PUSH
  78: LD_INT 4
  80: PPUSH
  81: LD_INT 21
  83: PUSH
  84: LD_INT 3
  86: PUSH
  87: EMPTY
  88: LIST
  89: LIST
  90: PUSH
  91: EMPTY
  92: LIST
  93: PPUSH
  94: CALL_OW 70
  98: PUSH
  99: FOR_IN
 100: IFFALSE 116
// ComLinkToBase ( SouthLenin , b ) ;
 102: LD_INT 218
 104: PPUSH
 105: LD_VAR 0 1
 109: PPUSH
 110: CALL_OW 169
 114: GO 99
 116: POP
 117: POP
// for n in FilterUnitsInArea ( NorthLeninArea , [ [ f_type , unit_building ] ] ) do
 118: LD_ADDR_VAR 0 2
 122: PUSH
 123: LD_INT 5
 125: PPUSH
 126: LD_INT 21
 128: PUSH
 129: LD_INT 3
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: PUSH
 136: EMPTY
 137: LIST
 138: PPUSH
 139: CALL_OW 70
 143: PUSH
 144: FOR_IN
 145: IFFALSE 161
// ComLinkToBase ( NorthLenin , n ) ;
 147: LD_INT 253
 149: PPUSH
 150: LD_VAR 0 2
 154: PPUSH
 155: CALL_OW 169
 159: GO 144
 161: POP
 162: POP
// InitGlobalVariables ;
 163: CALL 12579 0 0
// InitMiotacz ;
 167: CALL 1921 0 0
// InitRussian ;
 171: CALL 530 0 0
// InitCommanders ;
 175: CALL 5959 0 0
// InitBierezovPersonel ;
 179: CALL 2036 0 0
// InitRussianAI ;
 183: CALL 6213 0 0
// InitArabianAI ;
 187: CALL 11263 0 0
// Action ;
 191: CALL 2722 0 0
// DebugMode ;
 195: CALL 355 0 0
// game_speed = 6 ;
 199: LD_ADDR_OWVAR 65
 203: PUSH
 204: LD_INT 6
 206: ST_TO_ADDR
// end ;
 207: END
// export YakotichCrew , BierezovCrew , BierezovNewCrew , PompaCrew , BukovCrew , GaydarCrew , NorthLeninCrew , SouthLeninCrew , CheckpointsCrew , SouthCheckpointCrew , HeikeCrew , OmarCrew ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav , Jegor , Grigori , Anton ; export Heike , Omar , Shulz , Bergkamp ; export Tank , Cargo1 , Cargo2 ; export Natasza , Belkov2 , Oblukov , Kovalyuk , Kozlov ; export Bierezov , Sharonov , Lesov , Aleinik , Korotajev , Bautin ; export Pompa , Smirnov , Petrov , Konajev , Radenko ; export Morozov , Platonov , Popov , Gaydar , Bukov , Yashin ; export PrepareTime ; export debug ; export mission_prefix ; export start_ended , control_taken_over , ivan_came , apeman_tamed , flame_researched , heavy_gun_researched , weaponry_researched , fall_back ; function Init ; begin
 208: LD_INT 0
 210: PPUSH
// SetAttitude ( 9 , 3 , 1 , true ) ;
 211: LD_INT 9
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: CALL_OW 80
// SetAttitude ( 9 , 6 , 1 , true ) ;
 227: LD_INT 9
 229: PPUSH
 230: LD_INT 6
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: LD_INT 1
 238: PPUSH
 239: CALL_OW 80
// ChangeSideFog ( 9 , 3 ) ;
 243: LD_INT 9
 245: PPUSH
 246: LD_INT 3
 248: PPUSH
 249: CALL_OW 343
// mission_prefix := 04_ ;
 253: LD_ADDR_EXP 61
 257: PUSH
 258: LD_STRING 04_
 260: ST_TO_ADDR
// start_ended = false ;
 261: LD_ADDR_EXP 62
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// ivan_came = false ;
 269: LD_ADDR_EXP 64
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// control_taken_over = false ;
 277: LD_ADDR_EXP 63
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// apeman_tamed = false ;
 285: LD_ADDR_EXP 65
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// flame_researched = false ;
 293: LD_ADDR_EXP 66
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// heavy_gun_researched = false ;
 301: LD_ADDR_EXP 67
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// weaponry_researched = false ;
 309: LD_ADDR_EXP 68
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// fall_back = false ;
 317: LD_ADDR_EXP 69
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// PrepareTime := [ 35 35$0 , 30 30$0 , 25 25$0 ] [ Difficulty ] ;
 325: LD_ADDR_EXP 59
 329: PUSH
 330: LD_INT 73500
 332: PUSH
 333: LD_INT 63000
 335: PUSH
 336: LD_INT 52500
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// export function DebugMode ; begin
 355: LD_INT 0
 357: PPUSH
// if Debug = true then
 358: LD_EXP 60
 362: PUSH
 363: LD_INT 1
 365: EQUAL
 366: IFFALSE 387
// begin Difficulty := 3 ;
 368: LD_ADDR_OWVAR 67
 372: PUSH
 373: LD_INT 3
 375: ST_TO_ADDR
// TurnFogOff ( ) ;
 376: CALL_OW 537
// FogOff ( 3 ) ;
 380: LD_INT 3
 382: PPUSH
 383: CALL_OW 344
// end ; end ; end_of_file
 387: LD_VAR 0 1
 391: RET
// every 3 3$0 do
 392: GO 394
 394: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , YakotichCrates , true ) ;
 395: LD_INT 3
 397: PPUSH
 398: LD_INT 5
 400: PPUSH
 401: CALL_OW 12
 405: PPUSH
 406: LD_INT 11
 408: PPUSH
 409: LD_INT 1
 411: PPUSH
 412: CALL_OW 55
// enable ;
 416: ENABLE
// end ;
 417: END
// every 7 7$0 do var i ;
 418: GO 420
 420: DISABLE
 421: LD_INT 0
 423: PPUSH
// begin for i = 1 to 5 do
 424: LD_ADDR_VAR 0 1
 428: PUSH
 429: DOUBLE
 430: LD_INT 1
 432: DEC
 433: ST_TO_ADDR
 434: LD_INT 5
 436: PUSH
 437: FOR_TO
 438: IFFALSE 463
// begin CreateCratesArea ( rand ( 4 , 5 ) , CratesArea , true ) ;
 440: LD_INT 4
 442: PPUSH
 443: LD_INT 5
 445: PPUSH
 446: CALL_OW 12
 450: PPUSH
 451: LD_INT 12
 453: PPUSH
 454: LD_INT 1
 456: PPUSH
 457: CALL_OW 55
// end ;
 461: GO 437
 463: POP
 464: POP
// enable ;
 465: ENABLE
// end ;
 466: PPOPN 1
 468: END
// every 5 5$0 trigger ivan_came = true do var i ;
 469: LD_EXP 64
 473: PUSH
 474: LD_INT 1
 476: EQUAL
 477: IFFALSE 527
 479: GO 481
 481: DISABLE
 482: LD_INT 0
 484: PPUSH
// begin for i = 1 to 2 do
 485: LD_ADDR_VAR 0 1
 489: PUSH
 490: DOUBLE
 491: LD_INT 1
 493: DEC
 494: ST_TO_ADDR
 495: LD_INT 2
 497: PUSH
 498: FOR_TO
 499: IFFALSE 525
// begin CreateCratesArea ( rand ( 1 , 5 ) , BierezovCrates , true ) ;
 501: LD_INT 1
 503: PPUSH
 504: LD_INT 5
 506: PPUSH
 507: CALL_OW 12
 511: PPUSH
 512: LD_INT 13
 514: PPUSH
 515: LD_INT 1
 517: PPUSH
 518: CALL_OW 55
// enable ;
 522: ENABLE
// end ;
 523: GO 498
 525: POP
 526: POP
// end ; end_of_file
 527: PPOPN 1
 529: END
// export RuCargo1 , RuCargo2 ; export function InitRussian ; begin
 530: LD_INT 0
 532: PPUSH
// Uc_Nation := 3 ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_INT 3
 540: ST_TO_ADDR
// Uc_Side := 3 ;
 541: LD_ADDR_OWVAR 20
 545: PUSH
 546: LD_INT 3
 548: ST_TO_ADDR
// Uc_Direction := 2 ;
 549: LD_ADDR_OWVAR 24
 553: PUSH
 554: LD_INT 2
 556: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 03_ ) ;
 557: LD_ADDR_EXP 13
 561: PUSH
 562: LD_STRING Yakotich
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: LD_STRING 03_
 570: PPUSH
 571: CALL 12755 0 3
 575: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 03_ ) ;
 576: LD_ADDR_EXP 14
 580: PUSH
 581: LD_STRING Mietek
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_STRING 03_
 589: PPUSH
 590: CALL 12755 0 3
 594: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 03_ ) ;
 595: LD_ADDR_EXP 15
 599: PUSH
 600: LD_STRING Boris
 602: PPUSH
 603: LD_INT 1
 605: PPUSH
 606: LD_STRING 03_
 608: PPUSH
 609: CALL 12755 0 3
 613: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 03_ ) ;
 614: LD_ADDR_EXP 17
 618: PUSH
 619: LD_STRING Michail
 621: PPUSH
 622: LD_INT 1
 624: PPUSH
 625: LD_STRING 03_
 627: PPUSH
 628: CALL 12755 0 3
 632: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 03_ ) ;
 633: LD_ADDR_EXP 16
 637: PUSH
 638: LD_STRING Vasilij
 640: PPUSH
 641: LD_INT 1
 643: PPUSH
 644: LD_STRING 03_
 646: PPUSH
 647: CALL 12755 0 3
 651: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 03_ ) ;
 652: LD_ADDR_EXP 18
 656: PUSH
 657: LD_STRING Constantin
 659: PPUSH
 660: LD_INT 1
 662: PPUSH
 663: LD_STRING 03_
 665: PPUSH
 666: CALL 12755 0 3
 670: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 03_ ) ;
 671: LD_ADDR_EXP 19
 675: PUSH
 676: LD_STRING Maksim
 678: PPUSH
 679: LD_INT 1
 681: PPUSH
 682: LD_STRING 03_
 684: PPUSH
 685: CALL 12755 0 3
 689: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 03_ ) ;
 690: LD_ADDR_EXP 20
 694: PUSH
 695: LD_STRING Fiodor
 697: PPUSH
 698: LD_INT 1
 700: PPUSH
 701: LD_STRING 03_
 703: PPUSH
 704: CALL 12755 0 3
 708: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 03_ ) ;
 709: LD_ADDR_EXP 23
 713: PUSH
 714: LD_STRING Aleksiej
 716: PPUSH
 717: LD_INT 1
 719: PPUSH
 720: LD_STRING 03_
 722: PPUSH
 723: CALL 12755 0 3
 727: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 03_ ) ;
 728: LD_ADDR_EXP 21
 732: PUSH
 733: LD_STRING Pavel
 735: PPUSH
 736: LD_INT 1
 738: PPUSH
 739: LD_STRING 03_
 741: PPUSH
 742: CALL 12755 0 3
 746: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 03_ ) ;
 747: LD_ADDR_EXP 22
 751: PUSH
 752: LD_STRING Zakhar
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_STRING 03_
 760: PPUSH
 761: CALL 12755 0 3
 765: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 03_ ) ;
 766: LD_ADDR_EXP 24
 770: PUSH
 771: LD_STRING Aleksandr
 773: PPUSH
 774: LD_INT 1
 776: PPUSH
 777: LD_STRING 03_
 779: PPUSH
 780: CALL 12755 0 3
 784: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , true , 03_ ) ;
 785: LD_ADDR_EXP 26
 789: PUSH
 790: LD_STRING Stanislav
 792: PPUSH
 793: LD_INT 1
 795: PPUSH
 796: LD_STRING 03_
 798: PPUSH
 799: CALL 12755 0 3
 803: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , true , 03_ ) ;
 804: LD_ADDR_EXP 25
 808: PUSH
 809: LD_STRING Josif
 811: PPUSH
 812: LD_INT 1
 814: PPUSH
 815: LD_STRING 03_
 817: PPUSH
 818: CALL 12755 0 3
 822: ST_TO_ADDR
// Jegor := PrepareUnit ( Jegor , true , 03_ ) ;
 823: LD_ADDR_EXP 27
 827: PUSH
 828: LD_STRING Jegor
 830: PPUSH
 831: LD_INT 1
 833: PPUSH
 834: LD_STRING 03_
 836: PPUSH
 837: CALL 12755 0 3
 841: ST_TO_ADDR
// Grigori := PrepareUnit ( Grigori , true , 03_ ) ;
 842: LD_ADDR_EXP 28
 846: PUSH
 847: LD_STRING Grigori
 849: PPUSH
 850: LD_INT 1
 852: PPUSH
 853: LD_STRING 03_
 855: PPUSH
 856: CALL 12755 0 3
 860: ST_TO_ADDR
// Anton := PrepareUnit ( Anton , true , 03_ ) ;
 861: LD_ADDR_EXP 29
 865: PUSH
 866: LD_STRING Anton
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: LD_STRING 03_
 874: PPUSH
 875: CALL 12755 0 3
 879: ST_TO_ADDR
// YakotichCrew = YakotichCrew ^ Boris ^ Michail ^ Vasilij ^ Constantin ^ Maksim ^ Fiodor ^ Aleksiej ^ Pavel ^ Zakhar ^ Aleksandr ^ Stanislav ^ Josif ^ Jegor ^ Grigori ^ Anton ;
 880: LD_ADDR_EXP 1
 884: PUSH
 885: LD_EXP 1
 889: PUSH
 890: LD_EXP 15
 894: ADD
 895: PUSH
 896: LD_EXP 17
 900: ADD
 901: PUSH
 902: LD_EXP 16
 906: ADD
 907: PUSH
 908: LD_EXP 18
 912: ADD
 913: PUSH
 914: LD_EXP 19
 918: ADD
 919: PUSH
 920: LD_EXP 20
 924: ADD
 925: PUSH
 926: LD_EXP 23
 930: ADD
 931: PUSH
 932: LD_EXP 21
 936: ADD
 937: PUSH
 938: LD_EXP 22
 942: ADD
 943: PUSH
 944: LD_EXP 24
 948: ADD
 949: PUSH
 950: LD_EXP 26
 954: ADD
 955: PUSH
 956: LD_EXP 25
 960: ADD
 961: PUSH
 962: LD_EXP 27
 966: ADD
 967: PUSH
 968: LD_EXP 28
 972: ADD
 973: PUSH
 974: LD_EXP 29
 978: ADD
 979: ST_TO_ADDR
// SetClass ( [ Yakotich , Mietek , Constantin , Maksim , Fiodor , Aleksiej , Zakhar , Aleksandr , Josif ] , 1 ) ;
 980: LD_EXP 13
 984: PUSH
 985: LD_EXP 14
 989: PUSH
 990: LD_EXP 18
 994: PUSH
 995: LD_EXP 19
 999: PUSH
1000: LD_EXP 20
1004: PUSH
1005: LD_EXP 23
1009: PUSH
1010: LD_EXP 22
1014: PUSH
1015: LD_EXP 24
1019: PUSH
1020: LD_EXP 25
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PPUSH
1036: LD_INT 1
1038: PPUSH
1039: CALL_OW 336
// SetClass ( [ Boris , Anton ] , 2 ) ;
1043: LD_EXP 15
1047: PUSH
1048: LD_EXP 29
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: LD_INT 2
1059: PPUSH
1060: CALL_OW 336
// SetClass ( [ Michail , Pavel , Jegor ] , 3 ) ;
1064: LD_EXP 17
1068: PUSH
1069: LD_EXP 21
1073: PUSH
1074: LD_EXP 27
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: CALL_OW 336
// SetClass ( [ Stanislav , Vasilij , Grigori ] , 4 ) ;
1091: LD_EXP 26
1095: PUSH
1096: LD_EXP 16
1100: PUSH
1101: LD_EXP 28
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: PPUSH
1111: LD_INT 4
1113: PPUSH
1114: CALL_OW 336
// vc_chassis = 24 ;
1118: LD_ADDR_OWVAR 37
1122: PUSH
1123: LD_INT 24
1125: ST_TO_ADDR
// vc_control = 1 ;
1126: LD_ADDR_OWVAR 38
1130: PUSH
1131: LD_INT 1
1133: ST_TO_ADDR
// vc_engine = 1 ;
1134: LD_ADDR_OWVAR 39
1138: PUSH
1139: LD_INT 1
1141: ST_TO_ADDR
// vc_weapon = 89 ;
1142: LD_ADDR_OWVAR 40
1146: PUSH
1147: LD_INT 89
1149: ST_TO_ADDR
// RuCargo1 = CreateVehicle ;
1150: LD_ADDR_EXP 70
1154: PUSH
1155: CALL_OW 45
1159: ST_TO_ADDR
// PlaceUnitArea ( RuCargo1 , TanksEnterArea , false ) ;
1160: LD_EXP 70
1164: PPUSH
1165: LD_INT 25
1167: PPUSH
1168: LD_INT 0
1170: PPUSH
1171: CALL_OW 49
// SetCargo ( RuCargo1 , mat_siberit , 200 ) ;
1175: LD_EXP 70
1179: PPUSH
1180: LD_INT 3
1182: PPUSH
1183: LD_INT 200
1185: PPUSH
1186: CALL_OW 290
// PlaceHumanInUnit ( Jegor , RuCargo1 ) ;
1190: LD_EXP 27
1194: PPUSH
1195: LD_EXP 70
1199: PPUSH
1200: CALL_OW 52
// vc_chassis = 22 ;
1204: LD_ADDR_OWVAR 37
1208: PUSH
1209: LD_INT 22
1211: ST_TO_ADDR
// vc_weapon = 51 ;
1212: LD_ADDR_OWVAR 40
1216: PUSH
1217: LD_INT 51
1219: ST_TO_ADDR
// RuCargo2 = CreateVehicle ;
1220: LD_ADDR_EXP 71
1224: PUSH
1225: CALL_OW 45
1229: ST_TO_ADDR
// PlaceUnitArea ( RuCargo2 , TanksEnterArea , false ) ;
1230: LD_EXP 71
1234: PPUSH
1235: LD_INT 25
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: CALL_OW 49
// SetCargo ( RuCargo2 , mat_cans , 100 ) ;
1245: LD_EXP 71
1249: PPUSH
1250: LD_INT 1
1252: PPUSH
1253: LD_INT 100
1255: PPUSH
1256: CALL_OW 290
// PlaceHumanInUnit ( Anton , RuCargo2 ) ;
1260: LD_EXP 29
1264: PPUSH
1265: LD_EXP 71
1269: PPUSH
1270: CALL_OW 52
// PlaceUnitArea ( Yakotich , EnterArea , false ) ;
1274: LD_EXP 13
1278: PPUSH
1279: LD_INT 3
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 49
// PlaceUnitArea ( Mietek , EnterArea , false ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_INT 3
1296: PPUSH
1297: LD_INT 0
1299: PPUSH
1300: CALL_OW 49
// PlaceUnitArea ( Boris , EnterArea , false ) ;
1304: LD_EXP 15
1308: PPUSH
1309: LD_INT 3
1311: PPUSH
1312: LD_INT 0
1314: PPUSH
1315: CALL_OW 49
// PlaceUnitArea ( Vasilij , EnterArea , false ) ;
1319: LD_EXP 16
1323: PPUSH
1324: LD_INT 3
1326: PPUSH
1327: LD_INT 0
1329: PPUSH
1330: CALL_OW 49
// PlaceUnitArea ( Constantin , EnterArea , false ) ;
1334: LD_EXP 18
1338: PPUSH
1339: LD_INT 3
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: CALL_OW 49
// PlaceUnitArea ( Maksim , EnterArea , false ) ;
1349: LD_EXP 19
1353: PPUSH
1354: LD_INT 3
1356: PPUSH
1357: LD_INT 0
1359: PPUSH
1360: CALL_OW 49
// PlaceUnitArea ( Fiodor , EnterArea , false ) ;
1364: LD_EXP 20
1368: PPUSH
1369: LD_INT 3
1371: PPUSH
1372: LD_INT 0
1374: PPUSH
1375: CALL_OW 49
// PlaceUnitArea ( Zakhar , EnterArea , false ) ;
1379: LD_EXP 22
1383: PPUSH
1384: LD_INT 3
1386: PPUSH
1387: LD_INT 0
1389: PPUSH
1390: CALL_OW 49
// PlaceUnitArea ( Aleksiej , EnterArea , false ) ;
1394: LD_EXP 23
1398: PPUSH
1399: LD_INT 3
1401: PPUSH
1402: LD_INT 0
1404: PPUSH
1405: CALL_OW 49
// PlaceUnitArea ( Aleksandr , EnterArea , false ) ;
1409: LD_EXP 24
1413: PPUSH
1414: LD_INT 3
1416: PPUSH
1417: LD_INT 0
1419: PPUSH
1420: CALL_OW 49
// PlaceUnitArea ( Stanislav , EnterArea , false ) ;
1424: LD_EXP 26
1428: PPUSH
1429: LD_INT 3
1431: PPUSH
1432: LD_INT 0
1434: PPUSH
1435: CALL_OW 49
// PlaceUnitArea ( Josif , EnterArea , false ) ;
1439: LD_EXP 25
1443: PPUSH
1444: LD_INT 3
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: CALL_OW 49
// PlaceUnitArea ( Grigori , EnterArea , false ) ;
1454: LD_EXP 28
1458: PPUSH
1459: LD_INT 3
1461: PPUSH
1462: LD_INT 0
1464: PPUSH
1465: CALL_OW 49
// PlaceUnitArea ( Pavel , EnterArea , false ) ;
1469: LD_EXP 21
1473: PPUSH
1474: LD_INT 3
1476: PPUSH
1477: LD_INT 0
1479: PPUSH
1480: CALL_OW 49
// Natasza := PrepareUnit ( Natasza , false ,  ) ;
1484: LD_ADDR_EXP 37
1488: PUSH
1489: LD_STRING Natasza
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: LD_STRING 
1497: PPUSH
1498: CALL 12755 0 3
1502: ST_TO_ADDR
// Belkov2 := PrepareUnit ( Belkov2 , false ,  ) ;
1503: LD_ADDR_EXP 38
1507: PUSH
1508: LD_STRING Belkov2
1510: PPUSH
1511: LD_INT 0
1513: PPUSH
1514: LD_STRING 
1516: PPUSH
1517: CALL 12755 0 3
1521: ST_TO_ADDR
// Oblukov := PrepareUnit ( Oblukov , false ,  ) ;
1522: LD_ADDR_EXP 39
1526: PUSH
1527: LD_STRING Oblukov
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: LD_STRING 
1535: PPUSH
1536: CALL 12755 0 3
1540: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , false ,  ) ;
1541: LD_ADDR_EXP 40
1545: PUSH
1546: LD_STRING Kovalyuk
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: LD_STRING 
1554: PPUSH
1555: CALL 12755 0 3
1559: ST_TO_ADDR
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
1560: LD_ADDR_EXP 41
1564: PUSH
1565: LD_STRING Kozlov
1567: PPUSH
1568: LD_INT 0
1570: PPUSH
1571: LD_STRING 
1573: PPUSH
1574: CALL 12755 0 3
1578: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
1579: LD_EXP 37
1583: PPUSH
1584: LD_INT 18
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL_OW 49
// ComTurnUnit ( Natasza , Yakotich ) ;
1594: LD_EXP 37
1598: PPUSH
1599: LD_EXP 13
1603: PPUSH
1604: CALL_OW 119
// PlaceHumanInUnit ( Belkov2 , b1 ) ;
1608: LD_EXP 38
1612: PPUSH
1613: LD_INT 319
1615: PPUSH
1616: CALL_OW 52
// PlaceHumanInUnit ( Oblukov , b2 ) ;
1620: LD_EXP 39
1624: PPUSH
1625: LD_INT 318
1627: PPUSH
1628: CALL_OW 52
// PlaceHumanInUnit ( Kovalyuk , w1 ) ;
1632: LD_EXP 40
1636: PPUSH
1637: LD_INT 313
1639: PPUSH
1640: CALL_OW 52
// PlaceHumanInUnit ( Kozlov , l1 ) ;
1644: LD_EXP 41
1648: PPUSH
1649: LD_INT 317
1651: PPUSH
1652: CALL_OW 52
// end ;
1656: LD_VAR 0 1
1660: RET
// export function InitBierezov ; begin
1661: LD_INT 0
1663: PPUSH
// Uc_Side = 4 ;
1664: LD_ADDR_OWVAR 20
1668: PUSH
1669: LD_INT 4
1671: ST_TO_ADDR
// Bierezov := PrepareUnit ( Bierezov , false ,  ) ;
1672: LD_ADDR_EXP 42
1676: PUSH
1677: LD_STRING Bierezov
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: LD_STRING 
1685: PPUSH
1686: CALL 12755 0 3
1690: ST_TO_ADDR
// Sharonov := PrepareUnit ( Sharonov , false ,  ) ;
1691: LD_ADDR_EXP 43
1695: PUSH
1696: LD_STRING Sharonov
1698: PPUSH
1699: LD_INT 0
1701: PPUSH
1702: LD_STRING 
1704: PPUSH
1705: CALL 12755 0 3
1709: ST_TO_ADDR
// Lesov := PrepareUnit ( Lesov , false ,  ) ;
1710: LD_ADDR_EXP 44
1714: PUSH
1715: LD_STRING Lesov
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_STRING 
1723: PPUSH
1724: CALL 12755 0 3
1728: ST_TO_ADDR
// Aleinik := PrepareUnit ( Aleinik , false ,  ) ;
1729: LD_ADDR_EXP 45
1733: PUSH
1734: LD_STRING Aleinik
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: LD_STRING 
1742: PPUSH
1743: CALL 12755 0 3
1747: ST_TO_ADDR
// Korotajev := PrepareUnit ( Korotajev , false ,  ) ;
1748: LD_ADDR_EXP 46
1752: PUSH
1753: LD_STRING Korotajev
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: LD_STRING 
1761: PPUSH
1762: CALL 12755 0 3
1766: ST_TO_ADDR
// Bautin := PrepareUnit ( Bautin , false ,  ) ;
1767: LD_ADDR_EXP 47
1771: PUSH
1772: LD_STRING Bautin
1774: PPUSH
1775: LD_INT 0
1777: PPUSH
1778: LD_STRING 
1780: PPUSH
1781: CALL 12755 0 3
1785: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , EnterArea , false ) ;
1786: LD_EXP 42
1790: PPUSH
1791: LD_INT 3
1793: PPUSH
1794: LD_INT 0
1796: PPUSH
1797: CALL_OW 49
// PlaceUnitArea ( Sharonov , EnterArea , false ) ;
1801: LD_EXP 43
1805: PPUSH
1806: LD_INT 3
1808: PPUSH
1809: LD_INT 0
1811: PPUSH
1812: CALL_OW 49
// PlaceUnitArea ( Lesov , EnterArea , false ) ;
1816: LD_EXP 44
1820: PPUSH
1821: LD_INT 3
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 49
// PlaceUnitArea ( Aleinik , EnterArea , false ) ;
1831: LD_EXP 45
1835: PPUSH
1836: LD_INT 3
1838: PPUSH
1839: LD_INT 0
1841: PPUSH
1842: CALL_OW 49
// PlaceUnitArea ( Korotajev , EnterArea , false ) ;
1846: LD_EXP 46
1850: PPUSH
1851: LD_INT 3
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: CALL_OW 49
// PlaceUnitArea ( Bautin , EnterArea , false ) ;
1861: LD_EXP 47
1865: PPUSH
1866: LD_INT 3
1868: PPUSH
1869: LD_INT 0
1871: PPUSH
1872: CALL_OW 49
// BierezovCrew := BierezovCrew ^ Sharonov ^ Lesov ^ Aleinik ^ Korotajev ^ Bautin ;
1876: LD_ADDR_EXP 2
1880: PUSH
1881: LD_EXP 2
1885: PUSH
1886: LD_EXP 43
1890: ADD
1891: PUSH
1892: LD_EXP 44
1896: ADD
1897: PUSH
1898: LD_EXP 45
1902: ADD
1903: PUSH
1904: LD_EXP 46
1908: ADD
1909: PUSH
1910: LD_EXP 47
1914: ADD
1915: ST_TO_ADDR
// end ;
1916: LD_VAR 0 1
1920: RET
// export function InitMiotacz ; begin
1921: LD_INT 0
1923: PPUSH
// if LoadVariable ( 03_FlameSaved , 1 ) then
1924: LD_STRING 03_FlameSaved
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: CALL_OW 30
1934: IFFALSE 2031
// begin Uc_Side = 3 ;
1936: LD_ADDR_OWVAR 20
1940: PUSH
1941: LD_INT 3
1943: ST_TO_ADDR
// Uc_Nation = 2 ;
1944: LD_ADDR_OWVAR 21
1948: PUSH
1949: LD_INT 2
1951: ST_TO_ADDR
// Uc_Direction = 2 ;
1952: LD_ADDR_OWVAR 24
1956: PUSH
1957: LD_INT 2
1959: ST_TO_ADDR
// Vc_Chassis = 14 ;
1960: LD_ADDR_OWVAR 37
1964: PUSH
1965: LD_INT 14
1967: ST_TO_ADDR
// Vc_Control = 1 ;
1968: LD_ADDR_OWVAR 38
1972: PUSH
1973: LD_INT 1
1975: ST_TO_ADDR
// Vc_Engine = 1 ;
1976: LD_ADDR_OWVAR 39
1980: PUSH
1981: LD_INT 1
1983: ST_TO_ADDR
// Vc_Weapon = 26 ;
1984: LD_ADDR_OWVAR 40
1988: PUSH
1989: LD_INT 26
1991: ST_TO_ADDR
// Tank := CreateVehicle ;
1992: LD_ADDR_EXP 34
1996: PUSH
1997: CALL_OW 45
2001: ST_TO_ADDR
// PlaceUnitArea ( Tank , TanksEnterArea , false ) ;
2002: LD_EXP 34
2006: PPUSH
2007: LD_INT 25
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: CALL_OW 49
// PlaceHumanInUnit ( Michail , Tank ) ;
2017: LD_EXP 17
2021: PPUSH
2022: LD_EXP 34
2026: PPUSH
2027: CALL_OW 52
// end ; end ;
2031: LD_VAR 0 1
2035: RET
// export BierezovEngineers ; export function InitBierezovPersonel ; var i ; begin
2036: LD_INT 0
2038: PPUSH
2039: PPUSH
// Hc_Gallery :=  ;
2040: LD_ADDR_OWVAR 33
2044: PUSH
2045: LD_STRING 
2047: ST_TO_ADDR
// Hc_Name :=  ;
2048: LD_ADDR_OWVAR 26
2052: PUSH
2053: LD_STRING 
2055: ST_TO_ADDR
// Uc_Side := 4 ;
2056: LD_ADDR_OWVAR 20
2060: PUSH
2061: LD_INT 4
2063: ST_TO_ADDR
// BierezovNewCrew := [ ] ;
2064: LD_ADDR_EXP 3
2068: PUSH
2069: EMPTY
2070: ST_TO_ADDR
// for i = 1 to 6 do
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: DOUBLE
2077: LD_INT 1
2079: DEC
2080: ST_TO_ADDR
2081: LD_INT 6
2083: PUSH
2084: FOR_TO
2085: IFFALSE 2140
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2087: LD_INT 0
2089: PPUSH
2090: LD_INT 1
2092: PPUSH
2093: CALL_OW 12
2097: PPUSH
2098: LD_INT 5
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 3
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: LD_OWVAR 67
2116: ARRAY
2117: PPUSH
2118: CALL_OW 381
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2122: LD_ADDR_EXP 3
2126: PUSH
2127: LD_EXP 3
2131: PUSH
2132: CALL_OW 44
2136: ADD
2137: ST_TO_ADDR
// end ;
2138: GO 2084
2140: POP
2141: POP
// for i = 1 to 2 do
2142: LD_ADDR_VAR 0 2
2146: PUSH
2147: DOUBLE
2148: LD_INT 1
2150: DEC
2151: ST_TO_ADDR
2152: LD_INT 2
2154: PUSH
2155: FOR_TO
2156: IFFALSE 2211
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2158: LD_INT 0
2160: PPUSH
2161: LD_INT 1
2163: PPUSH
2164: CALL_OW 12
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_INT 4
2174: PUSH
2175: LD_INT 3
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: PUSH
2183: LD_OWVAR 67
2187: ARRAY
2188: PPUSH
2189: CALL_OW 382
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2193: LD_ADDR_EXP 3
2197: PUSH
2198: LD_EXP 3
2202: PUSH
2203: CALL_OW 44
2207: ADD
2208: ST_TO_ADDR
// end ;
2209: GO 2155
2211: POP
2212: POP
// BierezovNewCrew := BierezovNewCrew ^ BierezovEngineers ;
2213: LD_ADDR_EXP 3
2217: PUSH
2218: LD_EXP 3
2222: PUSH
2223: LD_EXP 72
2227: ADD
2228: ST_TO_ADDR
// for i = 1 to 2 do
2229: LD_ADDR_VAR 0 2
2233: PUSH
2234: DOUBLE
2235: LD_INT 1
2237: DEC
2238: ST_TO_ADDR
2239: LD_INT 2
2241: PUSH
2242: FOR_TO
2243: IFFALSE 2298
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2245: LD_INT 0
2247: PPUSH
2248: LD_INT 1
2250: PPUSH
2251: CALL_OW 12
2255: PPUSH
2256: LD_INT 5
2258: PUSH
2259: LD_INT 4
2261: PUSH
2262: LD_INT 3
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_OWVAR 67
2274: ARRAY
2275: PPUSH
2276: CALL_OW 383
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2280: LD_ADDR_EXP 3
2284: PUSH
2285: LD_EXP 3
2289: PUSH
2290: CALL_OW 44
2294: ADD
2295: ST_TO_ADDR
// end ;
2296: GO 2242
2298: POP
2299: POP
// for i = 1 to 1 do
2300: LD_ADDR_VAR 0 2
2304: PUSH
2305: DOUBLE
2306: LD_INT 1
2308: DEC
2309: ST_TO_ADDR
2310: LD_INT 1
2312: PUSH
2313: FOR_TO
2314: IFFALSE 2369
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2316: LD_INT 0
2318: PPUSH
2319: LD_INT 1
2321: PPUSH
2322: CALL_OW 12
2326: PPUSH
2327: LD_INT 5
2329: PUSH
2330: LD_INT 4
2332: PUSH
2333: LD_INT 3
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: LIST
2340: PUSH
2341: LD_OWVAR 67
2345: ARRAY
2346: PPUSH
2347: CALL_OW 384
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2351: LD_ADDR_EXP 3
2355: PUSH
2356: LD_EXP 3
2360: PUSH
2361: CALL_OW 44
2365: ADD
2366: ST_TO_ADDR
// end ;
2367: GO 2313
2369: POP
2370: POP
// for i in BierezovNewCrew do
2371: LD_ADDR_VAR 0 2
2375: PUSH
2376: LD_EXP 3
2380: PUSH
2381: FOR_IN
2382: IFFALSE 2489
// begin case GetClass ( i ) of 1 :
2384: LD_VAR 0 2
2388: PPUSH
2389: CALL_OW 257
2393: PUSH
2394: LD_INT 1
2396: DOUBLE
2397: EQUAL
2398: IFTRUE 2402
2400: GO 2417
2402: POP
// PlaceHumanInUnit ( i , LArmor1 ) ; 2 :
2403: LD_VAR 0 2
2407: PPUSH
2408: LD_INT 279
2410: PPUSH
2411: CALL_OW 52
2415: GO 2487
2417: LD_INT 2
2419: DOUBLE
2420: EQUAL
2421: IFTRUE 2425
2423: GO 2440
2425: POP
// PlaceHumanInUnit ( i , LArmor2 ) ; 3 :
2426: LD_VAR 0 2
2430: PPUSH
2431: LD_INT 278
2433: PPUSH
2434: CALL_OW 52
2438: GO 2487
2440: LD_INT 3
2442: DOUBLE
2443: EQUAL
2444: IFTRUE 2448
2446: GO 2463
2448: POP
// PlaceHumanInUnit ( i , LArmor2 ) ; 4 :
2449: LD_VAR 0 2
2453: PPUSH
2454: LD_INT 278
2456: PPUSH
2457: CALL_OW 52
2461: GO 2487
2463: LD_INT 4
2465: DOUBLE
2466: EQUAL
2467: IFTRUE 2471
2469: GO 2486
2471: POP
// PlaceHumanInUnit ( i , LArmor2 ) ; end ;
2472: LD_VAR 0 2
2476: PPUSH
2477: LD_INT 278
2479: PPUSH
2480: CALL_OW 52
2484: GO 2487
2486: POP
// end ;
2487: GO 2381
2489: POP
2490: POP
// end ;
2491: LD_VAR 0 1
2495: RET
// export function InitPompa ; begin
2496: LD_INT 0
2498: PPUSH
// Uc_Side = 6 ;
2499: LD_ADDR_OWVAR 20
2503: PUSH
2504: LD_INT 6
2506: ST_TO_ADDR
// Pompa := PrepareUnit ( Pompa , false ,  ) ;
2507: LD_ADDR_EXP 48
2511: PUSH
2512: LD_STRING Pompa
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: LD_STRING 
2520: PPUSH
2521: CALL 12755 0 3
2525: ST_TO_ADDR
// Petrov := PrepareUnit ( Petrov , false ,  ) ;
2526: LD_ADDR_EXP 50
2530: PUSH
2531: LD_STRING Petrov
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: LD_STRING 
2539: PPUSH
2540: CALL 12755 0 3
2544: ST_TO_ADDR
// Konajev := PrepareUnit ( Konajev , false ,  ) ;
2545: LD_ADDR_EXP 51
2549: PUSH
2550: LD_STRING Konajev
2552: PPUSH
2553: LD_INT 0
2555: PPUSH
2556: LD_STRING 
2558: PPUSH
2559: CALL 12755 0 3
2563: ST_TO_ADDR
// Smirnov := PrepareUnit ( Smirnov , false ,  ) ;
2564: LD_ADDR_EXP 49
2568: PUSH
2569: LD_STRING Smirnov
2571: PPUSH
2572: LD_INT 0
2574: PPUSH
2575: LD_STRING 
2577: PPUSH
2578: CALL 12755 0 3
2582: ST_TO_ADDR
// Radenko := PrepareUnit ( Radenko , false ,  ) ;
2583: LD_ADDR_EXP 52
2587: PUSH
2588: LD_STRING Radenko
2590: PPUSH
2591: LD_INT 0
2593: PPUSH
2594: LD_STRING 
2596: PPUSH
2597: CALL 12755 0 3
2601: ST_TO_ADDR
// PompaCrew := PompaCrew ^ Pompa ^ Petrov ^ Konajev ^ Smirnov ^ Radenko ;
2602: LD_ADDR_EXP 4
2606: PUSH
2607: LD_EXP 4
2611: PUSH
2612: LD_EXP 48
2616: ADD
2617: PUSH
2618: LD_EXP 50
2622: ADD
2623: PUSH
2624: LD_EXP 51
2628: ADD
2629: PUSH
2630: LD_EXP 49
2634: ADD
2635: PUSH
2636: LD_EXP 52
2640: ADD
2641: ST_TO_ADDR
// PlaceUnitArea ( Pompa , EnterArea , false ) ;
2642: LD_EXP 48
2646: PPUSH
2647: LD_INT 3
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 49
// PlaceUnitArea ( Petrov , EnterArea , false ) ;
2657: LD_EXP 50
2661: PPUSH
2662: LD_INT 3
2664: PPUSH
2665: LD_INT 0
2667: PPUSH
2668: CALL_OW 49
// PlaceUnitArea ( Konajev , EnterArea , false ) ;
2672: LD_EXP 51
2676: PPUSH
2677: LD_INT 3
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// PlaceUnitArea ( Smirnov , EnterArea , false ) ;
2687: LD_EXP 49
2691: PPUSH
2692: LD_INT 3
2694: PPUSH
2695: LD_INT 0
2697: PPUSH
2698: CALL_OW 49
// PlaceUnitArea ( Radenko , EnterArea , false ) ;
2702: LD_EXP 52
2706: PPUSH
2707: LD_INT 3
2709: PPUSH
2710: LD_INT 0
2712: PPUSH
2713: CALL_OW 49
// end ; end_of_file
2717: LD_VAR 0 1
2721: RET
// export function Action ; begin
2722: LD_INT 0
2724: PPUSH
// InGameOn ;
2725: CALL_OW 8
// ComTurnXY ( Janusz , 133 , 27 ) ;
2729: LD_INT 420
2731: PPUSH
2732: LD_INT 133
2734: PPUSH
2735: LD_INT 27
2737: PPUSH
2738: CALL_OW 118
// ComTurnXY ( Livid , 293 , 225 ) ;
2742: LD_INT 425
2744: PPUSH
2745: LD_INT 293
2747: PPUSH
2748: LD_INT 225
2750: PPUSH
2751: CALL_OW 118
// if LoadVariable ( 03_FlameSaved , 1 ) then
2755: LD_STRING 03_FlameSaved
2757: PPUSH
2758: LD_INT 1
2760: PPUSH
2761: CALL_OW 30
2765: IFFALSE 2783
// PlaceHumanInUnit ( Michail , Tank ) else
2767: LD_EXP 17
2771: PPUSH
2772: LD_EXP 34
2776: PPUSH
2777: CALL_OW 52
2781: GO 2798
// PlaceUnitArea ( Michail , EnterArea , false ) ;
2783: LD_EXP 17
2787: PPUSH
2788: LD_INT 3
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 49
// RevealFogArea ( 3 , RevealArea ) ;
2798: LD_INT 3
2800: PPUSH
2801: LD_INT 20
2803: PPUSH
2804: CALL_OW 332
// RevealFogArea ( 3 , ArRevealArea ) ;
2808: LD_INT 3
2810: PPUSH
2811: LD_INT 21
2813: PPUSH
2814: CALL_OW 332
// RevealFogArea ( 3 , BukovBaseArea ) ;
2818: LD_INT 3
2820: PPUSH
2821: LD_INT 7
2823: PPUSH
2824: CALL_OW 332
// Say ( Yakotich , 4Yak-01 ) ;
2828: LD_EXP 13
2832: PPUSH
2833: LD_STRING 4Yak-01
2835: PPUSH
2836: CALL_OW 88
// ComMoveXY ( YakotichCrew , 41 , 17 ) ;
2840: LD_EXP 1
2844: PPUSH
2845: LD_INT 41
2847: PPUSH
2848: LD_INT 17
2850: PPUSH
2851: CALL_OW 111
// ComMoveXY ( Yakotich , 41 , 17 ) ;
2855: LD_EXP 13
2859: PPUSH
2860: LD_INT 41
2862: PPUSH
2863: LD_INT 17
2865: PPUSH
2866: CALL_OW 111
// ComMoveXY ( Mietek , 41 , 17 ) ;
2870: LD_EXP 14
2874: PPUSH
2875: LD_INT 41
2877: PPUSH
2878: LD_INT 17
2880: PPUSH
2881: CALL_OW 111
// AddComMoveXY ( YakotichCrew , 130 , 105 ) ;
2885: LD_EXP 1
2889: PPUSH
2890: LD_INT 130
2892: PPUSH
2893: LD_INT 105
2895: PPUSH
2896: CALL_OW 171
// AddComMoveXY ( Yakotich , 130 , 105 ) ;
2900: LD_EXP 13
2904: PPUSH
2905: LD_INT 130
2907: PPUSH
2908: LD_INT 105
2910: PPUSH
2911: CALL_OW 171
// AddComMoveXY ( Mietek , 130 , 105 ) ;
2915: LD_EXP 14
2919: PPUSH
2920: LD_INT 130
2922: PPUSH
2923: LD_INT 105
2925: PPUSH
2926: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 77 , 93 ) ;
2930: LD_EXP 1
2934: PPUSH
2935: LD_INT 77
2937: PPUSH
2938: LD_INT 93
2940: PPUSH
2941: CALL_OW 171
// AddComMoveToArea ( [ Stanislav , Vasilij ] , HGCheckArea ) ;
2945: LD_EXP 26
2949: PUSH
2950: LD_EXP 16
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PPUSH
2959: LD_INT 22
2961: PPUSH
2962: CALL_OW 173
// AddComTurnXY ( [ Vasilij , Stanislav ] , 75 , 86 ) ;
2966: LD_EXP 16
2970: PUSH
2971: LD_EXP 26
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PPUSH
2980: LD_INT 75
2982: PPUSH
2983: LD_INT 86
2985: PPUSH
2986: CALL_OW 178
// AddComMoveToArea ( Yakotich , YakTalk1 ) ;
2990: LD_EXP 13
2994: PPUSH
2995: LD_INT 23
2997: PPUSH
2998: CALL_OW 173
// AddComMoveXY ( Mietek , 73 , 98 ) ;
3002: LD_EXP 14
3006: PPUSH
3007: LD_INT 73
3009: PPUSH
3010: LD_INT 98
3012: PPUSH
3013: CALL_OW 171
// AddComTurnXY ( [ Yakotich , Mietek ] , 70 , 99 ) ;
3017: LD_EXP 13
3021: PUSH
3022: LD_EXP 14
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PPUSH
3031: LD_INT 70
3033: PPUSH
3034: LD_INT 99
3036: PPUSH
3037: CALL_OW 178
// end ;
3041: LD_VAR 0 1
3045: RET
// every 0 0$1 trigger IsInArea ( Yakotich , YakTalk1 ) do
3046: LD_EXP 13
3050: PPUSH
3051: LD_INT 23
3053: PPUSH
3054: CALL_OW 308
3058: IFFALSE 3885
3060: GO 3062
3062: DISABLE
// begin Say ( Yakotich , 4Yak-02 ) ;
3063: LD_EXP 13
3067: PPUSH
3068: LD_STRING 4Yak-02
3070: PPUSH
3071: CALL_OW 88
// Say ( Morozov , 4Moro-01 ) ;
3075: LD_EXP 53
3079: PPUSH
3080: LD_STRING 4Moro-01
3082: PPUSH
3083: CALL_OW 88
// Say ( Yakotich , 4Yak-03 ) ;
3087: LD_EXP 13
3091: PPUSH
3092: LD_STRING 4Yak-03
3094: PPUSH
3095: CALL_OW 88
// Say ( Morozov , 4Moro-02 ) ;
3099: LD_EXP 53
3103: PPUSH
3104: LD_STRING 4Moro-02
3106: PPUSH
3107: CALL_OW 88
// SetSide ( [ Vasilij , Stanislav ] , 6 ) ;
3111: LD_EXP 16
3115: PUSH
3116: LD_EXP 26
3120: PUSH
3121: EMPTY
3122: LIST
3123: LIST
3124: PPUSH
3125: LD_INT 6
3127: PPUSH
3128: CALL_OW 235
// ComEnterUnit ( [ Vasilij , Stanislav ] , L1L1 ) ;
3132: LD_EXP 16
3136: PUSH
3137: LD_EXP 26
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PPUSH
3146: LD_INT 43
3148: PPUSH
3149: CALL_OW 120
// Say ( Morozov , 4Moro-03 ) ;
3153: LD_EXP 53
3157: PPUSH
3158: LD_STRING 4Moro-03
3160: PPUSH
3161: CALL_OW 88
// ComMoveXY ( Grigori , 74 , 102 ) ;
3165: LD_EXP 28
3169: PPUSH
3170: LD_INT 74
3172: PPUSH
3173: LD_INT 102
3175: PPUSH
3176: CALL_OW 111
// Say ( Grigori , 4Grig-01 ) ;
3180: LD_EXP 28
3184: PPUSH
3185: LD_STRING 4Grig-01
3187: PPUSH
3188: CALL_OW 88
// Say ( Morozov , 4Moro-04 ) ;
3192: LD_EXP 53
3196: PPUSH
3197: LD_STRING 4Moro-04
3199: PPUSH
3200: CALL_OW 88
// Say ( Grigori , 4Grig-02 ) ;
3204: LD_EXP 28
3208: PPUSH
3209: LD_STRING 4Grig-02
3211: PPUSH
3212: CALL_OW 88
// Say ( Popov , 4Popov-01 ) ;
3216: LD_EXP 55
3220: PPUSH
3221: LD_STRING 4Popov-01
3223: PPUSH
3224: CALL_OW 88
// SetSide ( Grigori , 6 ) ;
3228: LD_EXP 28
3232: PPUSH
3233: LD_INT 6
3235: PPUSH
3236: CALL_OW 235
// ComEnterUnit ( Grigori , L1L1 ) ;
3240: LD_EXP 28
3244: PPUSH
3245: LD_INT 43
3247: PPUSH
3248: CALL_OW 120
// Say ( Yakotich , 4Yak-04 ) ;
3252: LD_EXP 13
3256: PPUSH
3257: LD_STRING 4Yak-04
3259: PPUSH
3260: CALL_OW 88
// Say ( Popov , 4Popov-02 ) ;
3264: LD_EXP 55
3268: PPUSH
3269: LD_STRING 4Popov-02
3271: PPUSH
3272: CALL_OW 88
// Say ( Yakotich , 4Yak-05 ) ;
3276: LD_EXP 13
3280: PPUSH
3281: LD_STRING 4Yak-05
3283: PPUSH
3284: CALL_OW 88
// Say ( Morozov , 4Moro-05 ) ;
3288: LD_EXP 53
3292: PPUSH
3293: LD_STRING 4Moro-05
3295: PPUSH
3296: CALL_OW 88
// Say ( Morozov , 4Moro-06 ) ;
3300: LD_EXP 53
3304: PPUSH
3305: LD_STRING 4Moro-06
3307: PPUSH
3308: CALL_OW 88
// Say ( Popov , 4Popov-03 ) ;
3312: LD_EXP 55
3316: PPUSH
3317: LD_STRING 4Popov-03
3319: PPUSH
3320: CALL_OW 88
// Say ( Popov , 4Popov-04 ) ;
3324: LD_EXP 55
3328: PPUSH
3329: LD_STRING 4Popov-04
3331: PPUSH
3332: CALL_OW 88
// ComExitBuilding ( [ Vasilij , Stanislav ] ) ;
3336: LD_EXP 16
3340: PUSH
3341: LD_EXP 26
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PPUSH
3350: CALL_OW 122
// SetSide ( [ Vasilij , Stanislav ] , 3 ) ;
3354: LD_EXP 16
3358: PUSH
3359: LD_EXP 26
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PPUSH
3368: LD_INT 3
3370: PPUSH
3371: CALL_OW 235
// ComMoveXY ( [ Vasilij , Stanislav ] , 73 , 89 ) ;
3375: LD_EXP 16
3379: PUSH
3380: LD_EXP 26
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PPUSH
3389: LD_INT 73
3391: PPUSH
3392: LD_INT 89
3394: PPUSH
3395: CALL_OW 111
// Say ( Yakotich , 4Yak-06 ) ;
3399: LD_EXP 13
3403: PPUSH
3404: LD_STRING 4Yak-06
3406: PPUSH
3407: CALL_OW 88
// Say ( Platonov , 4Plat-01 ) ;
3411: LD_EXP 54
3415: PPUSH
3416: LD_STRING 4Plat-01
3418: PPUSH
3419: CALL_OW 88
// Say ( Platonov , 4Plat-02 ) ;
3423: LD_EXP 54
3427: PPUSH
3428: LD_STRING 4Plat-02
3430: PPUSH
3431: CALL_OW 88
// Say ( Platonov , 4Plat-03 ) ;
3435: LD_EXP 54
3439: PPUSH
3440: LD_STRING 4Plat-03
3442: PPUSH
3443: CALL_OW 88
// if Difficulty = 3 then
3447: LD_OWVAR 67
3451: PUSH
3452: LD_INT 3
3454: EQUAL
3455: IFFALSE 3469
// begin Say ( Morozov , 4Moro-Units ) ;
3457: LD_EXP 53
3461: PPUSH
3462: LD_STRING 4Moro-Units
3464: PPUSH
3465: CALL_OW 88
// end ; Say ( Platonov , 4Plat-04 ) ;
3469: LD_EXP 54
3473: PPUSH
3474: LD_STRING 4Plat-04
3476: PPUSH
3477: CALL_OW 88
// Say ( Yakotich , 4Yak-07 ) ;
3481: LD_EXP 13
3485: PPUSH
3486: LD_STRING 4Yak-07
3488: PPUSH
3489: CALL_OW 88
// ComExitBuilding ( Grigori ) ;
3493: LD_EXP 28
3497: PPUSH
3498: CALL_OW 122
// SetSide ( Grigori , 3 ) ;
3502: LD_EXP 28
3506: PPUSH
3507: LD_INT 3
3509: PPUSH
3510: CALL_OW 235
// ComTurnUnit ( Grigori , Yakotich ) ;
3514: LD_EXP 28
3518: PPUSH
3519: LD_EXP 13
3523: PPUSH
3524: CALL_OW 119
// Say ( Grigori , 4Grig-03 ) ;
3528: LD_EXP 28
3532: PPUSH
3533: LD_STRING 4Grig-03
3535: PPUSH
3536: CALL_OW 88
// AddComMoveXY ( YakotichCrew , 117 , 162 ) ;
3540: LD_EXP 1
3544: PPUSH
3545: LD_INT 117
3547: PPUSH
3548: LD_INT 162
3550: PPUSH
3551: CALL_OW 171
// ComMoveXY ( [ RuCargo1 , RuCargo2 ] , 157 , 232 ) ;
3555: LD_EXP 70
3559: PUSH
3560: LD_EXP 71
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: LD_INT 157
3571: PPUSH
3572: LD_INT 232
3574: PPUSH
3575: CALL_OW 111
// AddComMoveXY ( Yakotich , 117 , 162 ) ;
3579: LD_EXP 13
3583: PPUSH
3584: LD_INT 117
3586: PPUSH
3587: LD_INT 162
3589: PPUSH
3590: CALL_OW 171
// AddComMoveXY ( Mietek , 117 , 162 ) ;
3594: LD_EXP 14
3598: PPUSH
3599: LD_INT 117
3601: PPUSH
3602: LD_INT 162
3604: PPUSH
3605: CALL_OW 171
// ComEnterUnit ( [ Morozov , Platonov , Popov ] , MorozovBase ) ;
3609: LD_EXP 53
3613: PUSH
3614: LD_EXP 54
3618: PUSH
3619: LD_EXP 55
3623: PUSH
3624: EMPTY
3625: LIST
3626: LIST
3627: LIST
3628: PPUSH
3629: LD_INT 348
3631: PPUSH
3632: CALL_OW 120
// AddComMoveXY ( YakotichCrew , 138 , 168 ) ;
3636: LD_EXP 1
3640: PPUSH
3641: LD_INT 138
3643: PPUSH
3644: LD_INT 168
3646: PPUSH
3647: CALL_OW 171
// AddComMoveXY ( Yakotich , 138 , 168 ) ;
3651: LD_EXP 13
3655: PPUSH
3656: LD_INT 138
3658: PPUSH
3659: LD_INT 168
3661: PPUSH
3662: CALL_OW 171
// AddComMoveXY ( Mietek , 138 , 168 ) ;
3666: LD_EXP 14
3670: PPUSH
3671: LD_INT 138
3673: PPUSH
3674: LD_INT 168
3676: PPUSH
3677: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 142 , 199 ) ;
3681: LD_EXP 1
3685: PPUSH
3686: LD_INT 142
3688: PPUSH
3689: LD_INT 199
3691: PPUSH
3692: CALL_OW 171
// AddComMoveXY ( Yakotich , 142 , 199 ) ;
3696: LD_EXP 13
3700: PPUSH
3701: LD_INT 142
3703: PPUSH
3704: LD_INT 199
3706: PPUSH
3707: CALL_OW 171
// AddComMoveXY ( Mietek , 142 , 199 ) ;
3711: LD_EXP 14
3715: PPUSH
3716: LD_INT 142
3718: PPUSH
3719: LD_INT 199
3721: PPUSH
3722: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 157 , 232 ) ;
3726: LD_EXP 1
3730: PPUSH
3731: LD_INT 157
3733: PPUSH
3734: LD_INT 232
3736: PPUSH
3737: CALL_OW 171
// AddComMoveToArea ( Yakotich , YakTalk2 ) ;
3741: LD_EXP 13
3745: PPUSH
3746: LD_INT 24
3748: PPUSH
3749: CALL_OW 173
// AddComMoveXY ( Mietek , 167 , 240 ) ;
3753: LD_EXP 14
3757: PPUSH
3758: LD_INT 167
3760: PPUSH
3761: LD_INT 240
3763: PPUSH
3764: CALL_OW 171
// AddComTurnUnit ( [ Yakotich , Mietek ] , Natasza ) ;
3768: LD_EXP 13
3772: PUSH
3773: LD_EXP 14
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: PPUSH
3782: LD_EXP 37
3786: PPUSH
3787: CALL_OW 179
// if Difficulty = 3 then
3791: LD_OWVAR 67
3795: PUSH
3796: LD_INT 3
3798: EQUAL
3799: IFFALSE 3885
// begin SetSide ( [ Constantin , Josif , Aleksiej , Pavel , Zakhar ] , 6 ) ;
3801: LD_EXP 18
3805: PUSH
3806: LD_EXP 25
3810: PUSH
3811: LD_EXP 23
3815: PUSH
3816: LD_EXP 21
3820: PUSH
3821: LD_EXP 22
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: PPUSH
3833: LD_INT 6
3835: PPUSH
3836: CALL_OW 235
// ComEnterUnit ( [ Constantin , Josif , Aleksiej , Zakhar ] , SB1 ) ;
3840: LD_EXP 18
3844: PUSH
3845: LD_EXP 25
3849: PUSH
3850: LD_EXP 23
3854: PUSH
3855: LD_EXP 22
3859: PUSH
3860: EMPTY
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: PPUSH
3866: LD_INT 430
3868: PPUSH
3869: CALL_OW 120
// ComEnterUnit ( Pavel , SW1 ) ;
3873: LD_EXP 21
3877: PPUSH
3878: LD_INT 435
3880: PPUSH
3881: CALL_OW 120
// end ; end ;
3885: END
// every 0 0$1 trigger IsInArea ( Yakotich , YakTalk2 ) do
3886: LD_EXP 13
3890: PPUSH
3891: LD_INT 24
3893: PPUSH
3894: CALL_OW 308
3898: IFFALSE 4275
3900: GO 3902
3902: DISABLE
// begin Say ( Natasza , 4Nati-01 ) ;
3903: LD_EXP 37
3907: PPUSH
3908: LD_STRING 4Nati-01
3910: PPUSH
3911: CALL_OW 88
// Say ( Yakotich , 4Yak-09 ) ;
3915: LD_EXP 13
3919: PPUSH
3920: LD_STRING 4Yak-09
3922: PPUSH
3923: CALL_OW 88
// Say ( Natasza , 4Nati-02 ) ;
3927: LD_EXP 37
3931: PPUSH
3932: LD_STRING 4Nati-02
3934: PPUSH
3935: CALL_OW 88
// Say ( Natasza , 4Nati-03 ) ;
3939: LD_EXP 37
3943: PPUSH
3944: LD_STRING 4Nati-03
3946: PPUSH
3947: CALL_OW 88
// Say ( Natasza , 4Nati-04 ) ;
3951: LD_EXP 37
3955: PPUSH
3956: LD_STRING 4Nati-04
3958: PPUSH
3959: CALL_OW 88
// Say ( Yakotich , 4Yak-10 ) ;
3963: LD_EXP 13
3967: PPUSH
3968: LD_STRING 4Yak-10
3970: PPUSH
3971: CALL_OW 88
// Say ( Natasza , 4Nati-05 ) ;
3975: LD_EXP 37
3979: PPUSH
3980: LD_STRING 4Nati-05
3982: PPUSH
3983: CALL_OW 88
// ComMoveXY ( Stanislav , 167 , 238 ) ;
3987: LD_EXP 26
3991: PPUSH
3992: LD_INT 167
3994: PPUSH
3995: LD_INT 238
3997: PPUSH
3998: CALL_OW 111
// AddComTurnUnit ( Stanislav , Natasza ) ;
4002: LD_EXP 26
4006: PPUSH
4007: LD_EXP 37
4011: PPUSH
4012: CALL_OW 179
// Say ( Stanislav , 4Stan-01 ) ;
4016: LD_EXP 26
4020: PPUSH
4021: LD_STRING 4Stan-01
4023: PPUSH
4024: CALL_OW 88
// Say ( Yakotich , 4Yak-11 ) ;
4028: LD_EXP 13
4032: PPUSH
4033: LD_STRING 4Yak-11
4035: PPUSH
4036: CALL_OW 88
// Say ( Natasza , 4Nati-06 ) ;
4040: LD_EXP 37
4044: PPUSH
4045: LD_STRING 4Nati-06
4047: PPUSH
4048: CALL_OW 88
// Say ( Mietek , 4Mietek-03 ) ;
4052: LD_EXP 14
4056: PPUSH
4057: LD_STRING 4Mietek-03
4059: PPUSH
4060: CALL_OW 88
// Say ( Yakotich , 4Yak-12 ) ;
4064: LD_EXP 13
4068: PPUSH
4069: LD_STRING 4Yak-12
4071: PPUSH
4072: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
4076: LD_STRING o1
4078: PPUSH
4079: CALL_OW 337
// start_ended = true ;
4083: LD_ADDR_EXP 62
4087: PUSH
4088: LD_INT 1
4090: ST_TO_ADDR
// SayRadio ( Yakotich , 4Yak-Sib-01 ) ;
4091: LD_EXP 13
4095: PPUSH
4096: LD_STRING 4Yak-Sib-01
4098: PPUSH
4099: CALL_OW 94
// SayRadio ( Morozov , 4Moro-Sib-01 ) ;
4103: LD_EXP 53
4107: PPUSH
4108: LD_STRING 4Moro-Sib-01
4110: PPUSH
4111: CALL_OW 94
// InGameOff ;
4115: CALL_OW 9
// if LoadVariable ( 03_FlameSaved , 1 ) then
4119: LD_STRING 03_FlameSaved
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: CALL_OW 30
4129: IFFALSE 4177
// begin Wait ( 0 0$15 ) ;
4131: LD_INT 525
4133: PPUSH
4134: CALL_OW 67
// DialogueOn ;
4138: CALL_OW 6
// Say ( Vasilij , 4Vas-Flame-01 ) ;
4142: LD_EXP 16
4146: PPUSH
4147: LD_STRING 4Vas-Flame-01
4149: PPUSH
4150: CALL_OW 88
// Say ( Vasilij , 4Vas-Flame-02 ) ;
4154: LD_EXP 16
4158: PPUSH
4159: LD_STRING 4Vas-Flame-02
4161: PPUSH
4162: CALL_OW 88
// ChangeMissionObjectives ( o2 ) ;
4166: LD_STRING o2
4168: PPUSH
4169: CALL_OW 337
// DialogueOff ;
4173: CALL_OW 7
// end ; Wait ( 5 5$0 ) ;
4177: LD_INT 10500
4179: PPUSH
4180: CALL_OW 67
// InitBierezov ;
4184: CALL 1661 0 0
// ComMoveXY ( BierezovCrew , 77 , 50 ) ;
4188: LD_EXP 2
4192: PPUSH
4193: LD_INT 77
4195: PPUSH
4196: LD_INT 50
4198: PPUSH
4199: CALL_OW 111
// AddComMoveXY ( Bierezov , 77 , 50 ) ;
4203: LD_EXP 42
4207: PPUSH
4208: LD_INT 77
4210: PPUSH
4211: LD_INT 50
4213: PPUSH
4214: CALL_OW 171
// AddComMoveXY ( BierezovCrew , 132 , 106 ) ;
4218: LD_EXP 2
4222: PPUSH
4223: LD_INT 132
4225: PPUSH
4226: LD_INT 106
4228: PPUSH
4229: CALL_OW 171
// AddComMoveXY ( Bierezov , 132 , 106 ) ;
4233: LD_EXP 42
4237: PPUSH
4238: LD_INT 132
4240: PPUSH
4241: LD_INT 106
4243: PPUSH
4244: CALL_OW 171
// AddComMoveXY ( BierezovCrew , 79 , 104 ) ;
4248: LD_EXP 2
4252: PPUSH
4253: LD_INT 79
4255: PPUSH
4256: LD_INT 104
4258: PPUSH
4259: CALL_OW 171
// AddComEnterUnit ( Bierezov , MorozovBase ) ;
4263: LD_EXP 42
4267: PPUSH
4268: LD_INT 348
4270: PPUSH
4271: CALL_OW 180
// end ;
4275: END
// every 0 0$1 trigger IsInArea ( Bierezov , NorthLeninArea ) do
4276: LD_EXP 42
4280: PPUSH
4281: LD_INT 5
4283: PPUSH
4284: CALL_OW 308
4288: IFFALSE 4478
4290: GO 4292
4292: DISABLE
// begin SetSide ( Bierezov , 6 ) ;
4293: LD_EXP 42
4297: PPUSH
4298: LD_INT 6
4300: PPUSH
4301: CALL_OW 235
// Wait ( 1 1$30 ) ;
4305: LD_INT 3150
4307: PPUSH
4308: CALL_OW 67
// ComExitBuilding ( Bierezov ) ;
4312: LD_EXP 42
4316: PPUSH
4317: CALL_OW 122
// ComExitBuilding ( BierezovNewCrew ) ;
4321: LD_EXP 3
4325: PPUSH
4326: CALL_OW 122
// SetSide ( Bierezov , 4 ) ;
4330: LD_EXP 42
4334: PPUSH
4335: LD_INT 4
4337: PPUSH
4338: CALL_OW 235
// BierezovCrew := BierezovCrew ^ BierezovNewCrew ;
4342: LD_ADDR_EXP 2
4346: PUSH
4347: LD_EXP 2
4351: PUSH
4352: LD_EXP 3
4356: ADD
4357: ST_TO_ADDR
// BierezovEngineers := BierezovEngineers ^ FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) ;
4358: LD_ADDR_EXP 72
4362: PUSH
4363: LD_EXP 72
4367: PUSH
4368: LD_INT 22
4370: PUSH
4371: LD_INT 4
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: PUSH
4378: LD_INT 25
4380: PUSH
4381: LD_INT 2
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PPUSH
4392: CALL_OW 69
4396: ADD
4397: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
4398: LD_INT 35
4400: PPUSH
4401: CALL_OW 67
// AddComMoveXY ( BierezovCrew , 82 , 54 ) ;
4405: LD_EXP 2
4409: PPUSH
4410: LD_INT 82
4412: PPUSH
4413: LD_INT 54
4415: PPUSH
4416: CALL_OW 171
// AddComMoveXY ( [ Sharonov , Korotajev ] , 87 , 34 ) ;
4420: LD_EXP 43
4424: PUSH
4425: LD_EXP 46
4429: PUSH
4430: EMPTY
4431: LIST
4432: LIST
4433: PPUSH
4434: LD_INT 87
4436: PPUSH
4437: LD_INT 34
4439: PPUSH
4440: CALL_OW 171
// AddComMoveXY ( Bierezov , 85 , 52 ) ;
4444: LD_EXP 42
4448: PPUSH
4449: LD_INT 85
4451: PPUSH
4452: LD_INT 52
4454: PPUSH
4455: CALL_OW 171
// AddComTurnXY ( Bierezov , 84 , 54 ) ;
4459: LD_EXP 42
4463: PPUSH
4464: LD_INT 84
4466: PPUSH
4467: LD_INT 54
4469: PPUSH
4470: CALL_OW 178
// BierezovAI ;
4474: CALL 5311 0 0
// end ;
4478: END
// every 0 0$1 trigger not PrepareTime do
4479: LD_EXP 59
4483: NOT
4484: IFFALSE 4672
4486: GO 4488
4488: DISABLE
// begin Wait ( 0 0$24 ) ;
4489: LD_INT 840
4491: PPUSH
4492: CALL_OW 67
// InGameOn ;
4496: CALL_OW 8
// DialogueOn ;
4500: CALL_OW 6
// SayRadio ( Pompa , 4Pompa-01 ) ;
4504: LD_EXP 48
4508: PPUSH
4509: LD_STRING 4Pompa-01
4511: PPUSH
4512: CALL_OW 94
// SayRadio ( Platonov , 4Plat-05 ) ;
4516: LD_EXP 54
4520: PPUSH
4521: LD_STRING 4Plat-05
4523: PPUSH
4524: CALL_OW 94
// SayRadio ( Pompa , 4Pompa-02 ) ;
4528: LD_EXP 48
4532: PPUSH
4533: LD_STRING 4Pompa-02
4535: PPUSH
4536: CALL_OW 94
// SayRadio ( Platonov , 4Plat-06 ) ;
4540: LD_EXP 54
4544: PPUSH
4545: LD_STRING 4Plat-06
4547: PPUSH
4548: CALL_OW 94
// SayRadio ( Platonov , 4Plat-07 ) ;
4552: LD_EXP 54
4556: PPUSH
4557: LD_STRING 4Plat-07
4559: PPUSH
4560: CALL_OW 94
// SayRadio ( Bukov , 4Bukov-01 ) ;
4564: LD_EXP 57
4568: PPUSH
4569: LD_STRING 4Bukov-01
4571: PPUSH
4572: CALL_OW 94
// SayRadio ( Platonov , 4Plat-08 ) ;
4576: LD_EXP 54
4580: PPUSH
4581: LD_STRING 4Plat-08
4583: PPUSH
4584: CALL_OW 94
// ChangeMissionObjectives ( o4 ) ;
4588: LD_STRING o4
4590: PPUSH
4591: CALL_OW 337
// InGameOff ;
4595: CALL_OW 9
// DialogueOff ;
4599: CALL_OW 7
// Wait ( 0 0$36 ) ;
4603: LD_INT 1260
4605: PPUSH
4606: CALL_OW 67
// InitPompa ;
4610: CALL 2496 0 0
// ComMoveXY ( PompaCrew , 76 , 100 ) ;
4614: LD_EXP 4
4618: PPUSH
4619: LD_INT 76
4621: PPUSH
4622: LD_INT 100
4624: PPUSH
4625: CALL_OW 111
// NorthLeninCrew := NorthLeninCrew union PompaCrew ;
4629: LD_ADDR_EXP 7
4633: PUSH
4634: LD_EXP 7
4638: PUSH
4639: LD_EXP 4
4643: UNION
4644: ST_TO_ADDR
// ComEnterUnit ( Bukov , BukovTank ) ;
4645: LD_EXP 57
4649: PPUSH
4650: LD_INT 342
4652: PPUSH
4653: CALL_OW 120
// ComMoveXY ( Bukov , 177 , 204 ) ;
4657: LD_EXP 57
4661: PPUSH
4662: LD_INT 177
4664: PPUSH
4665: LD_INT 204
4667: PPUSH
4668: CALL_OW 111
// end ; end_of_file
4672: END
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4673: LD_INT 0
4675: PPUSH
4676: PPUSH
4677: PPUSH
// uc_side := GetSide ( b ) ;
4678: LD_ADDR_OWVAR 20
4682: PUSH
4683: LD_VAR 0 2
4687: PPUSH
4688: CALL_OW 255
4692: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4693: LD_ADDR_OWVAR 21
4697: PUSH
4698: LD_VAR 0 2
4702: PPUSH
4703: CALL_OW 248
4707: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4708: LD_ADDR_VAR 0 5
4712: PUSH
4713: LD_VAR 0 2
4717: PPUSH
4718: CALL_OW 254
4722: PUSH
4723: LD_INT 3
4725: MINUS
4726: ST_TO_ADDR
// if dir < 0 then
4727: LD_VAR 0 5
4731: PUSH
4732: LD_INT 0
4734: LESS
4735: IFFALSE 4751
// dir := 6 + dir ;
4737: LD_ADDR_VAR 0 5
4741: PUSH
4742: LD_INT 6
4744: PUSH
4745: LD_VAR 0 5
4749: PLUS
4750: ST_TO_ADDR
// un := CreateHuman ;
4751: LD_ADDR_VAR 0 4
4755: PUSH
4756: CALL_OW 44
4760: ST_TO_ADDR
// SetDir ( un , dir ) ;
4761: LD_VAR 0 4
4765: PPUSH
4766: LD_VAR 0 5
4770: PPUSH
4771: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4775: LD_VAR 0 4
4779: PPUSH
4780: LD_VAR 0 2
4784: PPUSH
4785: CALL_OW 52
// end ;
4789: LD_VAR 0 3
4793: RET
// every 1 trigger IsSelected ( Janusz ) do
4794: LD_INT 420
4796: PPUSH
4797: CALL_OW 306
4801: IFFALSE 4898
4803: GO 4805
4805: DISABLE
// begin JanuszExp ( [ 1 , 2 , 3 , 4 ] ) ;
4806: LD_INT 1
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: LD_INT 3
4814: PUSH
4815: LD_INT 4
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: PPUSH
4824: CALL 4899 0 1
// Wait ( 0 0$03 ) ;
4828: LD_INT 105
4830: PPUSH
4831: CALL_OW 67
// Say ( Janusz , 4Janusz-Sikret ) ;
4835: LD_INT 420
4837: PPUSH
4838: LD_STRING 4Janusz-Sikret
4840: PPUSH
4841: CALL_OW 88
// TeleportUnit ( Janusz , 120 , 246 , 246 , true ) ;
4845: LD_INT 420
4847: PPUSH
4848: LD_INT 120
4850: PPUSH
4851: LD_INT 246
4853: PPUSH
4854: LD_INT 246
4856: PPUSH
4857: LD_INT 1
4859: PPUSH
4860: CALL_OW 483
// Wait ( 0 0$03 ) ;
4864: LD_INT 105
4866: PPUSH
4867: CALL_OW 67
// RemoveUnit ( Janusz ) ;
4871: LD_INT 420
4873: PPUSH
4874: CALL_OW 64
// SaveVariable ( 1 , JanuszSaved ) ;
4878: LD_INT 1
4880: PPUSH
4881: LD_STRING JanuszSaved
4883: PPUSH
4884: CALL_OW 39
// SaveCharacters ( Janusz , Janusz ) ;
4888: LD_INT 420
4890: PPUSH
4891: LD_STRING Janusz
4893: PPUSH
4894: CALL_OW 38
// end ;
4898: END
// export function JanuszExp ( q ) ; var dec , q1 ; begin
4899: LD_INT 0
4901: PPUSH
4902: PPUSH
4903: PPUSH
// dec = SelectiveQuery ( JanuszQuery , q ) ;
4904: LD_ADDR_VAR 0 3
4908: PUSH
4909: LD_STRING JanuszQuery
4911: PPUSH
4912: LD_VAR 0 1
4916: PPUSH
4917: CALL_OW 98
4921: ST_TO_ADDR
// case dec of 1 :
4922: LD_VAR 0 3
4926: PUSH
4927: LD_INT 1
4929: DOUBLE
4930: EQUAL
4931: IFTRUE 4935
4933: GO 4953
4935: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 2500 ) ;
4936: LD_EXP 13
4940: PPUSH
4941: LD_INT 1
4943: PPUSH
4944: LD_INT 2500
4946: PPUSH
4947: CALL_OW 591
// end ; 2 :
4951: GO 5032
4953: LD_INT 2
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 4961
4959: GO 4979
4961: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 2500 ) ;
4962: LD_EXP 13
4966: PPUSH
4967: LD_INT 2
4969: PPUSH
4970: LD_INT 2500
4972: PPUSH
4973: CALL_OW 591
// end ; 3 :
4977: GO 5032
4979: LD_INT 3
4981: DOUBLE
4982: EQUAL
4983: IFTRUE 4987
4985: GO 5005
4987: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 2500 ) ;
4988: LD_EXP 13
4992: PPUSH
4993: LD_INT 3
4995: PPUSH
4996: LD_INT 2500
4998: PPUSH
4999: CALL_OW 591
// end ; 4 :
5003: GO 5032
5005: LD_INT 4
5007: DOUBLE
5008: EQUAL
5009: IFTRUE 5013
5011: GO 5031
5013: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 2500 ) ;
5014: LD_EXP 13
5018: PPUSH
5019: LD_INT 4
5021: PPUSH
5022: LD_INT 2500
5024: PPUSH
5025: CALL_OW 591
// end ; end ;
5029: GO 5032
5031: POP
// end ;
5032: LD_VAR 0 2
5036: RET
// export function TransportQuery ( q ) ; var dec , q1 ; begin
5037: LD_INT 0
5039: PPUSH
5040: PPUSH
5041: PPUSH
// dec = SelectiveQuery ( TransportQuery , q ) ;
5042: LD_ADDR_VAR 0 3
5046: PUSH
5047: LD_STRING TransportQuery
5049: PPUSH
5050: LD_VAR 0 1
5054: PPUSH
5055: CALL_OW 98
5059: ST_TO_ADDR
// case dec of 1 :
5060: LD_VAR 0 3
5064: PUSH
5065: LD_INT 1
5067: DOUBLE
5068: EQUAL
5069: IFTRUE 5073
5071: GO 5076
5073: POP
// begin end ; end ;
5074: GO 5077
5076: POP
// end ;
5077: LD_VAR 0 2
5081: RET
// every 1 trigger start_ended = false do
5082: LD_EXP 62
5086: PUSH
5087: LD_INT 0
5089: EQUAL
5090: IFFALSE 5105
5092: GO 5094
5094: DISABLE
// begin CenterOnUnits ( Yakotich ) ;
5095: LD_EXP 13
5099: PPUSH
5100: CALL_OW 85
// enable ;
5104: ENABLE
// end ;
5105: END
// every 1 trigger FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
5106: LD_INT 10
5108: PPUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 2
5121: PUSH
5122: LD_INT 21
5124: PUSH
5125: LD_INT 1
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: PUSH
5132: LD_INT 21
5134: PUSH
5135: LD_INT 2
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: PUSH
5147: EMPTY
5148: LIST
5149: LIST
5150: PPUSH
5151: CALL_OW 70
5155: PUSH
5156: LD_INT 0
5158: GREATER
5159: IFFALSE 5245
5161: GO 5163
5163: DISABLE
5164: LD_INT 0
5166: PPUSH
// begin enable ;
5167: ENABLE
// for unit in FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
5168: LD_ADDR_VAR 0 1
5172: PUSH
5173: LD_INT 10
5175: PPUSH
5176: LD_INT 22
5178: PUSH
5179: LD_INT 3
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 2
5188: PUSH
5189: LD_INT 21
5191: PUSH
5192: LD_INT 1
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 21
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PPUSH
5218: CALL_OW 70
5222: PUSH
5223: FOR_IN
5224: IFFALSE 5243
// begin ComMoveXY ( unit , 163 , 235 ) ;
5226: LD_VAR 0 1
5230: PPUSH
5231: LD_INT 163
5233: PPUSH
5234: LD_INT 235
5236: PPUSH
5237: CALL_OW 111
// end ;
5241: GO 5223
5243: POP
5244: POP
// end ;
5245: PPOPN 1
5247: END
// every 0 0$1 trigger start_ended = true do
5248: LD_EXP 62
5252: PUSH
5253: LD_INT 1
5255: EQUAL
5256: IFFALSE 5310
5258: GO 5260
5260: DISABLE
// begin enable ;
5261: ENABLE
// if PrepareTime then
5262: LD_EXP 59
5266: IFFALSE 5301
// begin PrepareTime := PrepareTime - 0 0$1 ;
5268: LD_ADDR_EXP 59
5272: PUSH
5273: LD_EXP 59
5277: PUSH
5278: LD_INT 35
5280: MINUS
5281: ST_TO_ADDR
// display_strings := [ #PrepareTime , PrepareTime ] ;
5282: LD_ADDR_OWVAR 47
5286: PUSH
5287: LD_STRING #PrepareTime
5289: PUSH
5290: LD_EXP 59
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: ST_TO_ADDR
// end else
5299: GO 5310
// begin display_strings :=  ;
5301: LD_ADDR_OWVAR 47
5305: PUSH
5306: LD_STRING 
5308: ST_TO_ADDR
// disable ;
5309: DISABLE
// end ; end ;
5310: END
// export function BierezovAI ; begin
5311: LD_INT 0
5313: PPUSH
// AddComBuild ( BierezovEngineers , b_depot , 80 , 47 , 3 ) ;
5314: LD_EXP 72
5318: PPUSH
5319: LD_INT 0
5321: PPUSH
5322: LD_INT 80
5324: PPUSH
5325: LD_INT 47
5327: PPUSH
5328: LD_INT 3
5330: PPUSH
5331: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_lab , 78 , 34 , 0 ) ;
5335: LD_EXP 72
5339: PPUSH
5340: LD_INT 6
5342: PPUSH
5343: LD_INT 78
5345: PPUSH
5346: LD_INT 34
5348: PPUSH
5349: LD_INT 0
5351: PPUSH
5352: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_oil_mine , 79 , 26 , 0 ) ;
5356: LD_EXP 72
5360: PPUSH
5361: LD_INT 29
5363: PPUSH
5364: LD_INT 79
5366: PPUSH
5367: LD_INT 26
5369: PPUSH
5370: LD_INT 0
5372: PPUSH
5373: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_oil_power , 84 , 28 , 5 ) ;
5377: LD_EXP 72
5381: PPUSH
5382: LD_INT 26
5384: PPUSH
5385: LD_INT 84
5387: PPUSH
5388: LD_INT 28
5390: PPUSH
5391: LD_INT 5
5393: PPUSH
5394: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_workshop , 92 , 41 , 3 ) ;
5398: LD_EXP 72
5402: PPUSH
5403: LD_INT 2
5405: PPUSH
5406: LD_INT 92
5408: PPUSH
5409: LD_INT 41
5411: PPUSH
5412: LD_INT 3
5414: PPUSH
5415: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_ext_gun , 95 , 41 , 4 ) ;
5419: LD_EXP 72
5423: PPUSH
5424: LD_INT 17
5426: PPUSH
5427: LD_INT 95
5429: PPUSH
5430: LD_INT 41
5432: PPUSH
5433: LD_INT 4
5435: PPUSH
5436: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_ext_rocket , 96 , 45 , 5 ) ;
5440: LD_EXP 72
5444: PPUSH
5445: LD_INT 18
5447: PPUSH
5448: LD_INT 96
5450: PPUSH
5451: LD_INT 45
5453: PPUSH
5454: LD_INT 5
5456: PPUSH
5457: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_ext_noncombat , 92 , 37 , 3 ) ;
5461: LD_EXP 72
5465: PPUSH
5466: LD_INT 19
5468: PPUSH
5469: LD_INT 92
5471: PPUSH
5472: LD_INT 37
5474: PPUSH
5475: LD_INT 3
5477: PPUSH
5478: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_oil_power , 74 , 25 , 2 ) ;
5482: LD_EXP 72
5486: PPUSH
5487: LD_INT 26
5489: PPUSH
5490: LD_INT 74
5492: PPUSH
5493: LD_INT 25
5495: PPUSH
5496: LD_INT 2
5498: PPUSH
5499: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_oil_power , 75 , 21 , 1 ) ;
5503: LD_EXP 72
5507: PPUSH
5508: LD_INT 26
5510: PPUSH
5511: LD_INT 75
5513: PPUSH
5514: LD_INT 21
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_armoury , 80 , 59 , 0 ) ;
5524: LD_EXP 72
5528: PPUSH
5529: LD_INT 4
5531: PPUSH
5532: LD_INT 80
5534: PPUSH
5535: LD_INT 59
5537: PPUSH
5538: LD_INT 0
5540: PPUSH
5541: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_bunker , 89 , 56 , 0 ) ;
5545: LD_EXP 72
5549: PPUSH
5550: LD_INT 32
5552: PPUSH
5553: LD_INT 89
5555: PPUSH
5556: LD_INT 56
5558: PPUSH
5559: LD_INT 0
5561: PPUSH
5562: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_bunker , 99 , 57 , 0 ) ;
5566: LD_EXP 72
5570: PPUSH
5571: LD_INT 32
5573: PPUSH
5574: LD_INT 99
5576: PPUSH
5577: LD_INT 57
5579: PPUSH
5580: LD_INT 0
5582: PPUSH
5583: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_bunker , 94 , 58 , 0 ) ;
5587: LD_EXP 72
5591: PPUSH
5592: LD_INT 32
5594: PPUSH
5595: LD_INT 94
5597: PPUSH
5598: LD_INT 58
5600: PPUSH
5601: LD_INT 0
5603: PPUSH
5604: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_bunker , 56 , 25 , 2 ) ;
5608: LD_EXP 72
5612: PPUSH
5613: LD_INT 32
5615: PPUSH
5616: LD_INT 56
5618: PPUSH
5619: LD_INT 25
5621: PPUSH
5622: LD_INT 2
5624: PPUSH
5625: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_breastwork , 52 , 30 , 2 ) ;
5629: LD_EXP 72
5633: PPUSH
5634: LD_INT 31
5636: PPUSH
5637: LD_INT 52
5639: PPUSH
5640: LD_INT 30
5642: PPUSH
5643: LD_INT 2
5645: PPUSH
5646: CALL_OW 205
// end ; end_of_file
5650: LD_VAR 0 1
5654: RET
// every 0 0$1 trigger start_ended = true do
5655: LD_EXP 62
5659: PUSH
5660: LD_INT 1
5662: EQUAL
5663: IFFALSE 5958
5665: GO 5667
5667: DISABLE
// begin ComResearch ( [ L1L1 , L1L2 ] , 48 ) ;
5668: LD_INT 43
5670: PUSH
5671: LD_INT 234
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: LD_INT 48
5680: PPUSH
5681: CALL_OW 124
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 49 ) ;
5685: LD_INT 43
5687: PUSH
5688: LD_INT 234
5690: PUSH
5691: LD_INT 129
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: LIST
5698: PPUSH
5699: LD_INT 49
5701: PPUSH
5702: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 51 ) ;
5706: LD_INT 43
5708: PUSH
5709: LD_INT 234
5711: PUSH
5712: LD_INT 129
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: LIST
5719: PPUSH
5720: LD_INT 51
5722: PPUSH
5723: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 57 ) ;
5727: LD_INT 43
5729: PUSH
5730: LD_INT 234
5732: PUSH
5733: LD_INT 129
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: PPUSH
5741: LD_INT 57
5743: PPUSH
5744: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 82 ) ;
5748: LD_INT 43
5750: PUSH
5751: LD_INT 234
5753: PUSH
5754: LD_INT 129
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: PPUSH
5762: LD_INT 82
5764: PPUSH
5765: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 83 ) ;
5769: LD_INT 43
5771: PUSH
5772: LD_INT 234
5774: PUSH
5775: LD_INT 129
5777: PUSH
5778: EMPTY
5779: LIST
5780: LIST
5781: LIST
5782: PPUSH
5783: LD_INT 83
5785: PPUSH
5786: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 84 ) ;
5790: LD_INT 43
5792: PUSH
5793: LD_INT 234
5795: PUSH
5796: LD_INT 129
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: LIST
5803: PPUSH
5804: LD_INT 84
5806: PPUSH
5807: CALL_OW 184
// ComExitBuilding ( [ SouthLeninEngineers , NorthLeninEngineers ] ) ;
5811: LD_EXP 73
5815: PUSH
5816: LD_EXP 74
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PPUSH
5825: CALL_OW 122
// AddComBuild ( NorthLeninEngineers , 32 , 82 , 93 , 4 ) ;
5829: LD_EXP 74
5833: PPUSH
5834: LD_INT 32
5836: PPUSH
5837: LD_INT 82
5839: PPUSH
5840: LD_INT 93
5842: PPUSH
5843: LD_INT 4
5845: PPUSH
5846: CALL_OW 205
// AddComBuild ( NorthLeninEngineers , 32 , 95 , 120 , 4 ) ;
5850: LD_EXP 74
5854: PPUSH
5855: LD_INT 32
5857: PPUSH
5858: LD_INT 95
5860: PPUSH
5861: LD_INT 120
5863: PPUSH
5864: LD_INT 4
5866: PPUSH
5867: CALL_OW 205
// AddComBuild ( NorthLeninEngineers , 32 , 69 , 81 , 3 ) ;
5871: LD_EXP 74
5875: PPUSH
5876: LD_INT 32
5878: PPUSH
5879: LD_INT 69
5881: PPUSH
5882: LD_INT 81
5884: PPUSH
5885: LD_INT 3
5887: PPUSH
5888: CALL_OW 205
// AddComEnterUnit ( NorthLeninEngineers , NorthLenin ) ;
5892: LD_EXP 74
5896: PPUSH
5897: LD_INT 253
5899: PPUSH
5900: CALL_OW 180
// AddComBuild ( SouthLeninEngineers , 32 , 123 , 174 , 4 ) ;
5904: LD_EXP 73
5908: PPUSH
5909: LD_INT 32
5911: PPUSH
5912: LD_INT 123
5914: PPUSH
5915: LD_INT 174
5917: PPUSH
5918: LD_INT 4
5920: PPUSH
5921: CALL_OW 205
// AddComBuild ( SouthLeninEngineers , 32 , 124 , 184 , 5 ) ;
5925: LD_EXP 73
5929: PPUSH
5930: LD_INT 32
5932: PPUSH
5933: LD_INT 124
5935: PPUSH
5936: LD_INT 184
5938: PPUSH
5939: LD_INT 5
5941: PPUSH
5942: CALL_OW 205
// AddComEnterUnit ( SouthLeninEngineers , SouthLenin ) ;
5946: LD_EXP 73
5950: PPUSH
5951: LD_INT 218
5953: PPUSH
5954: CALL_OW 180
// end ;
5958: END
// export function InitCommanders ; begin
5959: LD_INT 0
5961: PPUSH
// Uc_Side := 6 ;
5962: LD_ADDR_OWVAR 20
5966: PUSH
5967: LD_INT 6
5969: ST_TO_ADDR
// Uc_Nation := 3 ;
5970: LD_ADDR_OWVAR 21
5974: PUSH
5975: LD_INT 3
5977: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
5978: LD_ADDR_EXP 53
5982: PUSH
5983: LD_STRING Morozov
5985: PPUSH
5986: LD_INT 0
5988: PPUSH
5989: LD_STRING 
5991: PPUSH
5992: CALL 12755 0 3
5996: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
5997: LD_ADDR_EXP 54
6001: PUSH
6002: LD_STRING Platonov
6004: PPUSH
6005: LD_INT 0
6007: PPUSH
6008: LD_STRING 
6010: PPUSH
6011: CALL 12755 0 3
6015: ST_TO_ADDR
// Popov := PrepareUnit ( Popov , false ,  ) ;
6016: LD_ADDR_EXP 55
6020: PUSH
6021: LD_STRING Popov
6023: PPUSH
6024: LD_INT 0
6026: PPUSH
6027: LD_STRING 
6029: PPUSH
6030: CALL 12755 0 3
6034: ST_TO_ADDR
// Bukov := PrepareUnit ( Bukov , false ,  ) ;
6035: LD_ADDR_EXP 57
6039: PUSH
6040: LD_STRING Bukov
6042: PPUSH
6043: LD_INT 0
6045: PPUSH
6046: LD_STRING 
6048: PPUSH
6049: CALL 12755 0 3
6053: ST_TO_ADDR
// Gaydar := PrepareUnit ( Gaydar , false ,  ) ;
6054: LD_ADDR_EXP 56
6058: PUSH
6059: LD_STRING Gaydar
6061: PPUSH
6062: LD_INT 0
6064: PPUSH
6065: LD_STRING 
6067: PPUSH
6068: CALL 12755 0 3
6072: ST_TO_ADDR
// PlaceUnitArea ( Morozov , CommanderSpawn , false ) ;
6073: LD_EXP 53
6077: PPUSH
6078: LD_INT 19
6080: PPUSH
6081: LD_INT 0
6083: PPUSH
6084: CALL_OW 49
// PlaceUnitArea ( Platonov , CommanderSpawn , false ) ;
6088: LD_EXP 54
6092: PPUSH
6093: LD_INT 19
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 49
// PlaceUnitArea ( Popov , CommanderSpawn , false ) ;
6103: LD_EXP 55
6107: PPUSH
6108: LD_INT 19
6110: PPUSH
6111: LD_INT 0
6113: PPUSH
6114: CALL_OW 49
// ComTurnXY ( [ Morozov , Platonov , Popov ] , 73 , 100 ) ;
6118: LD_EXP 53
6122: PUSH
6123: LD_EXP 54
6127: PUSH
6128: LD_EXP 55
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: PPUSH
6138: LD_INT 73
6140: PPUSH
6141: LD_INT 100
6143: PPUSH
6144: CALL_OW 118
// PlaceUnitArea ( Gaydar , GaydarSpawn , false ) ;
6148: LD_EXP 56
6152: PPUSH
6153: LD_INT 15
6155: PPUSH
6156: LD_INT 0
6158: PPUSH
6159: CALL_OW 49
// ComTurnXY ( Gaydar , 214 , 160 ) ;
6163: LD_EXP 56
6167: PPUSH
6168: LD_INT 214
6170: PPUSH
6171: LD_INT 160
6173: PPUSH
6174: CALL_OW 118
// PlaceUnitArea ( Bukov , BukovSpawn , false ) ;
6178: LD_EXP 57
6182: PPUSH
6183: LD_INT 16
6185: PPUSH
6186: LD_INT 0
6188: PPUSH
6189: CALL_OW 49
// ComTurnXY ( Bukov , 312 , 218 ) ;
6193: LD_EXP 57
6197: PPUSH
6198: LD_INT 312
6200: PPUSH
6201: LD_INT 218
6203: PPUSH
6204: CALL_OW 118
// end ;
6208: LD_VAR 0 1
6212: RET
// export SouthLeninEngineers , NorthLeninEngineers ; export function InitRussianAI ; var i , z , y , turrety , fabryka , lab , zbrojka ; begin
6213: LD_INT 0
6215: PPUSH
6216: PPUSH
6217: PPUSH
6218: PPUSH
6219: PPUSH
6220: PPUSH
6221: PPUSH
6222: PPUSH
// Hc_Gallery :=  ;
6223: LD_ADDR_OWVAR 33
6227: PUSH
6228: LD_STRING 
6230: ST_TO_ADDR
// Hc_Name :=  ;
6231: LD_ADDR_OWVAR 26
6235: PUSH
6236: LD_STRING 
6238: ST_TO_ADDR
// NorthLeninCrew := [ ] ;
6239: LD_ADDR_EXP 7
6243: PUSH
6244: EMPTY
6245: ST_TO_ADDR
// uc_side := 6 ;
6246: LD_ADDR_OWVAR 20
6250: PUSH
6251: LD_INT 6
6253: ST_TO_ADDR
// uc_nation := 3 ;
6254: LD_ADDR_OWVAR 21
6258: PUSH
6259: LD_INT 3
6261: ST_TO_ADDR
// for i = 1 to 8 do
6262: LD_ADDR_VAR 0 2
6266: PUSH
6267: DOUBLE
6268: LD_INT 1
6270: DEC
6271: ST_TO_ADDR
6272: LD_INT 8
6274: PUSH
6275: FOR_TO
6276: IFFALSE 6331
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6278: LD_INT 0
6280: PPUSH
6281: LD_INT 1
6283: PPUSH
6284: CALL_OW 12
6288: PPUSH
6289: LD_INT 7
6291: PUSH
6292: LD_INT 5
6294: PUSH
6295: LD_INT 3
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: PUSH
6303: LD_OWVAR 67
6307: ARRAY
6308: PPUSH
6309: CALL_OW 381
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
6313: LD_ADDR_EXP 7
6317: PUSH
6318: LD_EXP 7
6322: PUSH
6323: CALL_OW 44
6327: ADD
6328: ST_TO_ADDR
// end ;
6329: GO 6275
6331: POP
6332: POP
// for i = 1 to 2 do
6333: LD_ADDR_VAR 0 2
6337: PUSH
6338: DOUBLE
6339: LD_INT 1
6341: DEC
6342: ST_TO_ADDR
6343: LD_INT 2
6345: PUSH
6346: FOR_TO
6347: IFFALSE 6402
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6349: LD_INT 0
6351: PPUSH
6352: LD_INT 1
6354: PPUSH
6355: CALL_OW 12
6359: PPUSH
6360: LD_INT 7
6362: PUSH
6363: LD_INT 5
6365: PUSH
6366: LD_INT 3
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: LD_OWVAR 67
6378: ARRAY
6379: PPUSH
6380: CALL_OW 382
// NorthLeninEngineers := NorthLeninEngineers ^ CreateHuman ;
6384: LD_ADDR_EXP 74
6388: PUSH
6389: LD_EXP 74
6393: PUSH
6394: CALL_OW 44
6398: ADD
6399: ST_TO_ADDR
// end ;
6400: GO 6346
6402: POP
6403: POP
// NorthLeninCrew := NorthLeninCrew ^ NorthLeninEngineers ;
6404: LD_ADDR_EXP 7
6408: PUSH
6409: LD_EXP 7
6413: PUSH
6414: LD_EXP 74
6418: ADD
6419: ST_TO_ADDR
// for i = 1 to 3 do
6420: LD_ADDR_VAR 0 2
6424: PUSH
6425: DOUBLE
6426: LD_INT 1
6428: DEC
6429: ST_TO_ADDR
6430: LD_INT 3
6432: PUSH
6433: FOR_TO
6434: IFFALSE 6489
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6436: LD_INT 0
6438: PPUSH
6439: LD_INT 1
6441: PPUSH
6442: CALL_OW 12
6446: PPUSH
6447: LD_INT 7
6449: PUSH
6450: LD_INT 5
6452: PUSH
6453: LD_INT 3
6455: PUSH
6456: EMPTY
6457: LIST
6458: LIST
6459: LIST
6460: PUSH
6461: LD_OWVAR 67
6465: ARRAY
6466: PPUSH
6467: CALL_OW 383
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
6471: LD_ADDR_EXP 7
6475: PUSH
6476: LD_EXP 7
6480: PUSH
6481: CALL_OW 44
6485: ADD
6486: ST_TO_ADDR
// end ;
6487: GO 6433
6489: POP
6490: POP
// for i = 1 to 3 do
6491: LD_ADDR_VAR 0 2
6495: PUSH
6496: DOUBLE
6497: LD_INT 1
6499: DEC
6500: ST_TO_ADDR
6501: LD_INT 3
6503: PUSH
6504: FOR_TO
6505: IFFALSE 6560
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6507: LD_INT 0
6509: PPUSH
6510: LD_INT 1
6512: PPUSH
6513: CALL_OW 12
6517: PPUSH
6518: LD_INT 7
6520: PUSH
6521: LD_INT 5
6523: PUSH
6524: LD_INT 3
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: LIST
6531: PUSH
6532: LD_OWVAR 67
6536: ARRAY
6537: PPUSH
6538: CALL_OW 384
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
6542: LD_ADDR_EXP 7
6546: PUSH
6547: LD_EXP 7
6551: PUSH
6552: CALL_OW 44
6556: ADD
6557: ST_TO_ADDR
// end ;
6558: GO 6504
6560: POP
6561: POP
// turrety := FilterUnitsInArea ( NorthLeninArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
6562: LD_ADDR_VAR 0 5
6566: PUSH
6567: LD_INT 5
6569: PPUSH
6570: LD_INT 2
6572: PUSH
6573: LD_INT 30
6575: PUSH
6576: LD_INT 31
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 30
6585: PUSH
6586: LD_INT 32
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: PPUSH
6598: CALL_OW 70
6602: ST_TO_ADDR
// lab := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_lab_full ] ] ) ;
6603: LD_ADDR_VAR 0 7
6607: PUSH
6608: LD_INT 5
6610: PPUSH
6611: LD_INT 30
6613: PUSH
6614: LD_INT 8
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: PPUSH
6624: CALL_OW 70
6628: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_factory ] ] ) ;
6629: LD_ADDR_VAR 0 6
6633: PUSH
6634: LD_INT 5
6636: PPUSH
6637: LD_INT 30
6639: PUSH
6640: LD_INT 3
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: EMPTY
6648: LIST
6649: PPUSH
6650: CALL_OW 70
6654: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_barracks ] ] ) ;
6655: LD_ADDR_VAR 0 8
6659: PUSH
6660: LD_INT 5
6662: PPUSH
6663: LD_INT 30
6665: PUSH
6666: LD_INT 5
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: PPUSH
6676: CALL_OW 70
6680: ST_TO_ADDR
// y := 1 ;
6681: LD_ADDR_VAR 0 4
6685: PUSH
6686: LD_INT 1
6688: ST_TO_ADDR
// z := 1 ;
6689: LD_ADDR_VAR 0 3
6693: PUSH
6694: LD_INT 1
6696: ST_TO_ADDR
// for i in NorthLeninCrew do
6697: LD_ADDR_VAR 0 2
6701: PUSH
6702: LD_EXP 7
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6879
// begin case GetClass ( i ) of 1 :
6710: LD_VAR 0 2
6714: PPUSH
6715: CALL_OW 257
6719: PUSH
6720: LD_INT 1
6722: DOUBLE
6723: EQUAL
6724: IFTRUE 6728
6726: GO 6795
6728: POP
// begin if y > 6 then
6729: LD_VAR 0 4
6733: PUSH
6734: LD_INT 6
6736: GREATER
6737: IFFALSE 6759
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
6739: LD_VAR 0 2
6743: PPUSH
6744: LD_VAR 0 8
6748: PUSH
6749: LD_INT 1
6751: ARRAY
6752: PPUSH
6753: CALL_OW 52
6757: GO 6779
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
6759: LD_VAR 0 2
6763: PPUSH
6764: LD_VAR 0 5
6768: PUSH
6769: LD_VAR 0 4
6773: ARRAY
6774: PPUSH
6775: CALL_OW 52
// y = y + 1 ;
6779: LD_ADDR_VAR 0 4
6783: PUSH
6784: LD_VAR 0 4
6788: PUSH
6789: LD_INT 1
6791: PLUS
6792: ST_TO_ADDR
// end ; 2 :
6793: GO 6877
6795: LD_INT 2
6797: DOUBLE
6798: EQUAL
6799: IFTRUE 6803
6801: GO 6818
6803: POP
// PlaceHumanInUnit ( i , NorthLenin ) ; 3 :
6804: LD_VAR 0 2
6808: PPUSH
6809: LD_INT 253
6811: PPUSH
6812: CALL_OW 52
6816: GO 6877
6818: LD_INT 3
6820: DOUBLE
6821: EQUAL
6822: IFTRUE 6826
6824: GO 6847
6826: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
6827: LD_VAR 0 2
6831: PPUSH
6832: LD_VAR 0 6
6836: PUSH
6837: LD_INT 1
6839: ARRAY
6840: PPUSH
6841: CALL_OW 52
6845: GO 6877
6847: LD_INT 4
6849: DOUBLE
6850: EQUAL
6851: IFTRUE 6855
6853: GO 6876
6855: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
6856: LD_VAR 0 2
6860: PPUSH
6861: LD_VAR 0 7
6865: PUSH
6866: LD_INT 1
6868: ARRAY
6869: PPUSH
6870: CALL_OW 52
6874: GO 6877
6876: POP
// end ;
6877: GO 6707
6879: POP
6880: POP
// SouthLeninCrew := [ ] ;
6881: LD_ADDR_EXP 8
6885: PUSH
6886: EMPTY
6887: ST_TO_ADDR
// for i = 1 to 6 do
6888: LD_ADDR_VAR 0 2
6892: PUSH
6893: DOUBLE
6894: LD_INT 1
6896: DEC
6897: ST_TO_ADDR
6898: LD_INT 6
6900: PUSH
6901: FOR_TO
6902: IFFALSE 6957
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6904: LD_INT 0
6906: PPUSH
6907: LD_INT 1
6909: PPUSH
6910: CALL_OW 12
6914: PPUSH
6915: LD_INT 7
6917: PUSH
6918: LD_INT 5
6920: PUSH
6921: LD_INT 3
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: LIST
6928: PUSH
6929: LD_OWVAR 67
6933: ARRAY
6934: PPUSH
6935: CALL_OW 381
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
6939: LD_ADDR_EXP 8
6943: PUSH
6944: LD_EXP 8
6948: PUSH
6949: CALL_OW 44
6953: ADD
6954: ST_TO_ADDR
// end ;
6955: GO 6901
6957: POP
6958: POP
// for i = 1 to 1 do
6959: LD_ADDR_VAR 0 2
6963: PUSH
6964: DOUBLE
6965: LD_INT 1
6967: DEC
6968: ST_TO_ADDR
6969: LD_INT 1
6971: PUSH
6972: FOR_TO
6973: IFFALSE 7028
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6975: LD_INT 0
6977: PPUSH
6978: LD_INT 1
6980: PPUSH
6981: CALL_OW 12
6985: PPUSH
6986: LD_INT 7
6988: PUSH
6989: LD_INT 5
6991: PUSH
6992: LD_INT 3
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: LD_OWVAR 67
7004: ARRAY
7005: PPUSH
7006: CALL_OW 382
// SouthLeninEngineers := SouthLeninEngineers ^ CreateHuman ;
7010: LD_ADDR_EXP 73
7014: PUSH
7015: LD_EXP 73
7019: PUSH
7020: CALL_OW 44
7024: ADD
7025: ST_TO_ADDR
// end ;
7026: GO 6972
7028: POP
7029: POP
// SouthLeninCrew := SouthLeninCrew ^ SouthLeninEngineers ;
7030: LD_ADDR_EXP 8
7034: PUSH
7035: LD_EXP 8
7039: PUSH
7040: LD_EXP 73
7044: ADD
7045: ST_TO_ADDR
// for i = 1 to 1 do
7046: LD_ADDR_VAR 0 2
7050: PUSH
7051: DOUBLE
7052: LD_INT 1
7054: DEC
7055: ST_TO_ADDR
7056: LD_INT 1
7058: PUSH
7059: FOR_TO
7060: IFFALSE 7115
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7062: LD_INT 0
7064: PPUSH
7065: LD_INT 1
7067: PPUSH
7068: CALL_OW 12
7072: PPUSH
7073: LD_INT 7
7075: PUSH
7076: LD_INT 5
7078: PUSH
7079: LD_INT 3
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: LIST
7086: PUSH
7087: LD_OWVAR 67
7091: ARRAY
7092: PPUSH
7093: CALL_OW 383
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
7097: LD_ADDR_EXP 8
7101: PUSH
7102: LD_EXP 8
7106: PUSH
7107: CALL_OW 44
7111: ADD
7112: ST_TO_ADDR
// end ;
7113: GO 7059
7115: POP
7116: POP
// for i = 1 to 1 do
7117: LD_ADDR_VAR 0 2
7121: PUSH
7122: DOUBLE
7123: LD_INT 1
7125: DEC
7126: ST_TO_ADDR
7127: LD_INT 1
7129: PUSH
7130: FOR_TO
7131: IFFALSE 7186
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7133: LD_INT 0
7135: PPUSH
7136: LD_INT 1
7138: PPUSH
7139: CALL_OW 12
7143: PPUSH
7144: LD_INT 7
7146: PUSH
7147: LD_INT 5
7149: PUSH
7150: LD_INT 3
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: LIST
7157: PUSH
7158: LD_OWVAR 67
7162: ARRAY
7163: PPUSH
7164: CALL_OW 384
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
7168: LD_ADDR_EXP 8
7172: PUSH
7173: LD_EXP 8
7177: PUSH
7178: CALL_OW 44
7182: ADD
7183: ST_TO_ADDR
// end ;
7184: GO 7130
7186: POP
7187: POP
// turrety := FilterUnitsInArea ( SouthLeninArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
7188: LD_ADDR_VAR 0 5
7192: PUSH
7193: LD_INT 4
7195: PPUSH
7196: LD_INT 2
7198: PUSH
7199: LD_INT 30
7201: PUSH
7202: LD_INT 31
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: LD_INT 30
7211: PUSH
7212: LD_INT 32
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: PPUSH
7224: CALL_OW 70
7228: ST_TO_ADDR
// lab := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_lab_full ] ] ) ;
7229: LD_ADDR_VAR 0 7
7233: PUSH
7234: LD_INT 4
7236: PPUSH
7237: LD_INT 30
7239: PUSH
7240: LD_INT 8
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: PPUSH
7250: CALL_OW 70
7254: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_factory ] ] ) ;
7255: LD_ADDR_VAR 0 6
7259: PUSH
7260: LD_INT 4
7262: PPUSH
7263: LD_INT 30
7265: PUSH
7266: LD_INT 3
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: PPUSH
7276: CALL_OW 70
7280: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_barracks ] ] ) ;
7281: LD_ADDR_VAR 0 8
7285: PUSH
7286: LD_INT 4
7288: PPUSH
7289: LD_INT 30
7291: PUSH
7292: LD_INT 5
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: PPUSH
7302: CALL_OW 70
7306: ST_TO_ADDR
// y := 1 ;
7307: LD_ADDR_VAR 0 4
7311: PUSH
7312: LD_INT 1
7314: ST_TO_ADDR
// z := 1 ;
7315: LD_ADDR_VAR 0 3
7319: PUSH
7320: LD_INT 1
7322: ST_TO_ADDR
// for i in SouthLeninCrew do
7323: LD_ADDR_VAR 0 2
7327: PUSH
7328: LD_EXP 8
7332: PUSH
7333: FOR_IN
7334: IFFALSE 7505
// begin case GetClass ( i ) of 1 :
7336: LD_VAR 0 2
7340: PPUSH
7341: CALL_OW 257
7345: PUSH
7346: LD_INT 1
7348: DOUBLE
7349: EQUAL
7350: IFTRUE 7354
7352: GO 7421
7354: POP
// begin if y > 6 then
7355: LD_VAR 0 4
7359: PUSH
7360: LD_INT 6
7362: GREATER
7363: IFFALSE 7385
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
7365: LD_VAR 0 2
7369: PPUSH
7370: LD_VAR 0 8
7374: PUSH
7375: LD_INT 1
7377: ARRAY
7378: PPUSH
7379: CALL_OW 52
7383: GO 7405
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
7385: LD_VAR 0 2
7389: PPUSH
7390: LD_VAR 0 5
7394: PUSH
7395: LD_VAR 0 4
7399: ARRAY
7400: PPUSH
7401: CALL_OW 52
// y = y + 1 ;
7405: LD_ADDR_VAR 0 4
7409: PUSH
7410: LD_VAR 0 4
7414: PUSH
7415: LD_INT 1
7417: PLUS
7418: ST_TO_ADDR
// end ; 2 :
7419: GO 7503
7421: LD_INT 2
7423: DOUBLE
7424: EQUAL
7425: IFTRUE 7429
7427: GO 7444
7429: POP
// PlaceHumanInUnit ( i , SouthLenin ) ; 3 :
7430: LD_VAR 0 2
7434: PPUSH
7435: LD_INT 218
7437: PPUSH
7438: CALL_OW 52
7442: GO 7503
7444: LD_INT 3
7446: DOUBLE
7447: EQUAL
7448: IFTRUE 7452
7450: GO 7473
7452: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
7453: LD_VAR 0 2
7457: PPUSH
7458: LD_VAR 0 6
7462: PUSH
7463: LD_INT 1
7465: ARRAY
7466: PPUSH
7467: CALL_OW 52
7471: GO 7503
7473: LD_INT 4
7475: DOUBLE
7476: EQUAL
7477: IFTRUE 7481
7479: GO 7502
7481: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
7482: LD_VAR 0 2
7486: PPUSH
7487: LD_VAR 0 7
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: CALL_OW 52
7500: GO 7503
7502: POP
// end ;
7503: GO 7333
7505: POP
7506: POP
// BukovCrew := [ ] ;
7507: LD_ADDR_EXP 5
7511: PUSH
7512: EMPTY
7513: ST_TO_ADDR
// for i = 1 to 6 do
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: DOUBLE
7520: LD_INT 1
7522: DEC
7523: ST_TO_ADDR
7524: LD_INT 6
7526: PUSH
7527: FOR_TO
7528: IFFALSE 7583
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7530: LD_INT 0
7532: PPUSH
7533: LD_INT 1
7535: PPUSH
7536: CALL_OW 12
7540: PPUSH
7541: LD_INT 7
7543: PUSH
7544: LD_INT 5
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: LIST
7554: PUSH
7555: LD_OWVAR 67
7559: ARRAY
7560: PPUSH
7561: CALL_OW 381
// BukovCrew := BukovCrew ^ CreateHuman ;
7565: LD_ADDR_EXP 5
7569: PUSH
7570: LD_EXP 5
7574: PUSH
7575: CALL_OW 44
7579: ADD
7580: ST_TO_ADDR
// end ;
7581: GO 7527
7583: POP
7584: POP
// for i = 1 to 2 do
7585: LD_ADDR_VAR 0 2
7589: PUSH
7590: DOUBLE
7591: LD_INT 1
7593: DEC
7594: ST_TO_ADDR
7595: LD_INT 2
7597: PUSH
7598: FOR_TO
7599: IFFALSE 7654
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7601: LD_INT 0
7603: PPUSH
7604: LD_INT 1
7606: PPUSH
7607: CALL_OW 12
7611: PPUSH
7612: LD_INT 7
7614: PUSH
7615: LD_INT 5
7617: PUSH
7618: LD_INT 3
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: PUSH
7626: LD_OWVAR 67
7630: ARRAY
7631: PPUSH
7632: CALL_OW 383
// BukovCrew := BukovCrew ^ CreateHuman ;
7636: LD_ADDR_EXP 5
7640: PUSH
7641: LD_EXP 5
7645: PUSH
7646: CALL_OW 44
7650: ADD
7651: ST_TO_ADDR
// end ;
7652: GO 7598
7654: POP
7655: POP
// for i = 1 to 2 do
7656: LD_ADDR_VAR 0 2
7660: PUSH
7661: DOUBLE
7662: LD_INT 1
7664: DEC
7665: ST_TO_ADDR
7666: LD_INT 2
7668: PUSH
7669: FOR_TO
7670: IFFALSE 7725
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7672: LD_INT 0
7674: PPUSH
7675: LD_INT 1
7677: PPUSH
7678: CALL_OW 12
7682: PPUSH
7683: LD_INT 7
7685: PUSH
7686: LD_INT 5
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: PUSH
7697: LD_OWVAR 67
7701: ARRAY
7702: PPUSH
7703: CALL_OW 384
// BukovCrew := BukovCrew ^ CreateHuman ;
7707: LD_ADDR_EXP 5
7711: PUSH
7712: LD_EXP 5
7716: PUSH
7717: CALL_OW 44
7721: ADD
7722: ST_TO_ADDR
// end ;
7723: GO 7669
7725: POP
7726: POP
// turrety := FilterUnitsInArea ( BukovBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
7727: LD_ADDR_VAR 0 5
7731: PUSH
7732: LD_INT 7
7734: PPUSH
7735: LD_INT 2
7737: PUSH
7738: LD_INT 30
7740: PUSH
7741: LD_INT 31
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 30
7750: PUSH
7751: LD_INT 32
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: PPUSH
7763: CALL_OW 70
7767: ST_TO_ADDR
// lab := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_lab_half ] ] ) ;
7768: LD_ADDR_VAR 0 7
7772: PUSH
7773: LD_INT 7
7775: PPUSH
7776: LD_INT 30
7778: PUSH
7779: LD_INT 7
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: PPUSH
7789: CALL_OW 70
7793: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_factory ] ] ) ;
7794: LD_ADDR_VAR 0 6
7798: PUSH
7799: LD_INT 7
7801: PPUSH
7802: LD_INT 30
7804: PUSH
7805: LD_INT 3
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: EMPTY
7813: LIST
7814: PPUSH
7815: CALL_OW 70
7819: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_armoury ] ] ) ;
7820: LD_ADDR_VAR 0 8
7824: PUSH
7825: LD_INT 7
7827: PPUSH
7828: LD_INT 30
7830: PUSH
7831: LD_INT 4
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: EMPTY
7839: LIST
7840: PPUSH
7841: CALL_OW 70
7845: ST_TO_ADDR
// y := 1 ;
7846: LD_ADDR_VAR 0 4
7850: PUSH
7851: LD_INT 1
7853: ST_TO_ADDR
// z := 1 ;
7854: LD_ADDR_VAR 0 3
7858: PUSH
7859: LD_INT 1
7861: ST_TO_ADDR
// for i in BukovCrew do
7862: LD_ADDR_VAR 0 2
7866: PUSH
7867: LD_EXP 5
7871: PUSH
7872: FOR_IN
7873: IFFALSE 8021
// begin case GetClass ( i ) of 1 :
7875: LD_VAR 0 2
7879: PPUSH
7880: CALL_OW 257
7884: PUSH
7885: LD_INT 1
7887: DOUBLE
7888: EQUAL
7889: IFTRUE 7893
7891: GO 7960
7893: POP
// begin if y > 4 then
7894: LD_VAR 0 4
7898: PUSH
7899: LD_INT 4
7901: GREATER
7902: IFFALSE 7924
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
7904: LD_VAR 0 2
7908: PPUSH
7909: LD_VAR 0 8
7913: PUSH
7914: LD_INT 1
7916: ARRAY
7917: PPUSH
7918: CALL_OW 52
7922: GO 7944
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
7924: LD_VAR 0 2
7928: PPUSH
7929: LD_VAR 0 5
7933: PUSH
7934: LD_VAR 0 4
7938: ARRAY
7939: PPUSH
7940: CALL_OW 52
// y = y + 1 ;
7944: LD_ADDR_VAR 0 4
7948: PUSH
7949: LD_VAR 0 4
7953: PUSH
7954: LD_INT 1
7956: PLUS
7957: ST_TO_ADDR
// end ; 3 :
7958: GO 8019
7960: LD_INT 3
7962: DOUBLE
7963: EQUAL
7964: IFTRUE 7968
7966: GO 7989
7968: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
7969: LD_VAR 0 2
7973: PPUSH
7974: LD_VAR 0 6
7978: PUSH
7979: LD_INT 1
7981: ARRAY
7982: PPUSH
7983: CALL_OW 52
7987: GO 8019
7989: LD_INT 4
7991: DOUBLE
7992: EQUAL
7993: IFTRUE 7997
7995: GO 8018
7997: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
7998: LD_VAR 0 2
8002: PPUSH
8003: LD_VAR 0 7
8007: PUSH
8008: LD_INT 1
8010: ARRAY
8011: PPUSH
8012: CALL_OW 52
8016: GO 8019
8018: POP
// end ;
8019: GO 7872
8021: POP
8022: POP
// CheckpointsCrew := [ ] ;
8023: LD_ADDR_EXP 9
8027: PUSH
8028: EMPTY
8029: ST_TO_ADDR
// for i = 1 to 6 do
8030: LD_ADDR_VAR 0 2
8034: PUSH
8035: DOUBLE
8036: LD_INT 1
8038: DEC
8039: ST_TO_ADDR
8040: LD_INT 6
8042: PUSH
8043: FOR_TO
8044: IFFALSE 8099
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8046: LD_INT 0
8048: PPUSH
8049: LD_INT 1
8051: PPUSH
8052: CALL_OW 12
8056: PPUSH
8057: LD_INT 7
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: LD_INT 3
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: PUSH
8071: LD_OWVAR 67
8075: ARRAY
8076: PPUSH
8077: CALL_OW 381
// CheckpointsCrew := CheckpointsCrew ^ CreateHuman ;
8081: LD_ADDR_EXP 9
8085: PUSH
8086: LD_EXP 9
8090: PUSH
8091: CALL_OW 44
8095: ADD
8096: ST_TO_ADDR
// end ;
8097: GO 8043
8099: POP
8100: POP
// turrety := FilterUnitsInArea ( Checkpoints , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
8101: LD_ADDR_VAR 0 5
8105: PUSH
8106: LD_INT 6
8108: PPUSH
8109: LD_INT 2
8111: PUSH
8112: LD_INT 30
8114: PUSH
8115: LD_INT 31
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 30
8124: PUSH
8125: LD_INT 32
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: LIST
8136: PPUSH
8137: CALL_OW 70
8141: ST_TO_ADDR
// y := 1 ;
8142: LD_ADDR_VAR 0 4
8146: PUSH
8147: LD_INT 1
8149: ST_TO_ADDR
// for i in CheckpointsCrew do
8150: LD_ADDR_VAR 0 2
8154: PUSH
8155: LD_EXP 9
8159: PUSH
8160: FOR_IN
8161: IFFALSE 8221
// begin case GetClass ( i ) of 1 :
8163: LD_VAR 0 2
8167: PPUSH
8168: CALL_OW 257
8172: PUSH
8173: LD_INT 1
8175: DOUBLE
8176: EQUAL
8177: IFTRUE 8181
8179: GO 8218
8181: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
8182: LD_VAR 0 2
8186: PPUSH
8187: LD_VAR 0 5
8191: PUSH
8192: LD_VAR 0 4
8196: ARRAY
8197: PPUSH
8198: CALL_OW 52
// y = y + 1 ;
8202: LD_ADDR_VAR 0 4
8206: PUSH
8207: LD_VAR 0 4
8211: PUSH
8212: LD_INT 1
8214: PLUS
8215: ST_TO_ADDR
// end ; end ;
8216: GO 8219
8218: POP
// end ;
8219: GO 8160
8221: POP
8222: POP
// GaydarCrew := [ ] ;
8223: LD_ADDR_EXP 6
8227: PUSH
8228: EMPTY
8229: ST_TO_ADDR
// for i = 1 to 6 do
8230: LD_ADDR_VAR 0 2
8234: PUSH
8235: DOUBLE
8236: LD_INT 1
8238: DEC
8239: ST_TO_ADDR
8240: LD_INT 6
8242: PUSH
8243: FOR_TO
8244: IFFALSE 8299
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8246: LD_INT 0
8248: PPUSH
8249: LD_INT 1
8251: PPUSH
8252: CALL_OW 12
8256: PPUSH
8257: LD_INT 7
8259: PUSH
8260: LD_INT 5
8262: PUSH
8263: LD_INT 3
8265: PUSH
8266: EMPTY
8267: LIST
8268: LIST
8269: LIST
8270: PUSH
8271: LD_OWVAR 67
8275: ARRAY
8276: PPUSH
8277: CALL_OW 381
// GaydarCrew := GaydarCrew ^ CreateHuman ;
8281: LD_ADDR_EXP 6
8285: PUSH
8286: LD_EXP 6
8290: PUSH
8291: CALL_OW 44
8295: ADD
8296: ST_TO_ADDR
// end ;
8297: GO 8243
8299: POP
8300: POP
// for i = 1 to 2 do
8301: LD_ADDR_VAR 0 2
8305: PUSH
8306: DOUBLE
8307: LD_INT 1
8309: DEC
8310: ST_TO_ADDR
8311: LD_INT 2
8313: PUSH
8314: FOR_TO
8315: IFFALSE 8370
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8317: LD_INT 0
8319: PPUSH
8320: LD_INT 1
8322: PPUSH
8323: CALL_OW 12
8327: PPUSH
8328: LD_INT 7
8330: PUSH
8331: LD_INT 5
8333: PUSH
8334: LD_INT 3
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: PUSH
8342: LD_OWVAR 67
8346: ARRAY
8347: PPUSH
8348: CALL_OW 382
// GaydarCrew := GaydarCrew ^ CreateHuman ;
8352: LD_ADDR_EXP 6
8356: PUSH
8357: LD_EXP 6
8361: PUSH
8362: CALL_OW 44
8366: ADD
8367: ST_TO_ADDR
// end ;
8368: GO 8314
8370: POP
8371: POP
// turrety := FilterUnitsInArea ( MiddleCheckPoint , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
8372: LD_ADDR_VAR 0 5
8376: PUSH
8377: LD_INT 1
8379: PPUSH
8380: LD_INT 2
8382: PUSH
8383: LD_INT 30
8385: PUSH
8386: LD_INT 31
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_INT 30
8395: PUSH
8396: LD_INT 32
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 70
8412: ST_TO_ADDR
// y := 1 ;
8413: LD_ADDR_VAR 0 4
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// for i in GaydarCrew do
8421: LD_ADDR_VAR 0 2
8425: PUSH
8426: LD_EXP 6
8430: PUSH
8431: FOR_IN
8432: IFFALSE 8515
// begin case GetClass ( i ) of 1 :
8434: LD_VAR 0 2
8438: PPUSH
8439: CALL_OW 257
8443: PUSH
8444: LD_INT 1
8446: DOUBLE
8447: EQUAL
8448: IFTRUE 8452
8450: GO 8489
8452: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
8453: LD_VAR 0 2
8457: PPUSH
8458: LD_VAR 0 5
8462: PUSH
8463: LD_VAR 0 4
8467: ARRAY
8468: PPUSH
8469: CALL_OW 52
// y = y + 1 ;
8473: LD_ADDR_VAR 0 4
8477: PUSH
8478: LD_VAR 0 4
8482: PUSH
8483: LD_INT 1
8485: PLUS
8486: ST_TO_ADDR
// end ; 2 :
8487: GO 8513
8489: LD_INT 2
8491: DOUBLE
8492: EQUAL
8493: IFTRUE 8497
8495: GO 8512
8497: POP
// PlaceHumanInUnit ( i , GaydarDepot ) ; end ;
8498: LD_VAR 0 2
8502: PPUSH
8503: LD_INT 144
8505: PPUSH
8506: CALL_OW 52
8510: GO 8513
8512: POP
// end ;
8513: GO 8431
8515: POP
8516: POP
// SouthCheckpointCrew := [ ] ;
8517: LD_ADDR_EXP 10
8521: PUSH
8522: EMPTY
8523: ST_TO_ADDR
// for i = 1 to 4 do
8524: LD_ADDR_VAR 0 2
8528: PUSH
8529: DOUBLE
8530: LD_INT 1
8532: DEC
8533: ST_TO_ADDR
8534: LD_INT 4
8536: PUSH
8537: FOR_TO
8538: IFFALSE 8593
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8540: LD_INT 0
8542: PPUSH
8543: LD_INT 1
8545: PPUSH
8546: CALL_OW 12
8550: PPUSH
8551: LD_INT 7
8553: PUSH
8554: LD_INT 5
8556: PUSH
8557: LD_INT 3
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: LIST
8564: PUSH
8565: LD_OWVAR 67
8569: ARRAY
8570: PPUSH
8571: CALL_OW 381
// SouthCheckpointCrew := SouthCheckpointCrew ^ CreateHuman ;
8575: LD_ADDR_EXP 10
8579: PUSH
8580: LD_EXP 10
8584: PUSH
8585: CALL_OW 44
8589: ADD
8590: ST_TO_ADDR
// end ;
8591: GO 8537
8593: POP
8594: POP
// for i = 1 to 2 do
8595: LD_ADDR_VAR 0 2
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_INT 2
8607: PUSH
8608: FOR_TO
8609: IFFALSE 8664
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8611: LD_INT 0
8613: PPUSH
8614: LD_INT 1
8616: PPUSH
8617: CALL_OW 12
8621: PPUSH
8622: LD_INT 7
8624: PUSH
8625: LD_INT 5
8627: PUSH
8628: LD_INT 3
8630: PUSH
8631: EMPTY
8632: LIST
8633: LIST
8634: LIST
8635: PUSH
8636: LD_OWVAR 67
8640: ARRAY
8641: PPUSH
8642: CALL_OW 382
// SouthCheckpointCrew := SouthCheckpointCrew ^ CreateHuman ;
8646: LD_ADDR_EXP 10
8650: PUSH
8651: LD_EXP 10
8655: PUSH
8656: CALL_OW 44
8660: ADD
8661: ST_TO_ADDR
// end ;
8662: GO 8608
8664: POP
8665: POP
// turrety := FilterUnitsInArea ( SouthCheckpoint , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
8666: LD_ADDR_VAR 0 5
8670: PUSH
8671: LD_INT 2
8673: PPUSH
8674: LD_INT 2
8676: PUSH
8677: LD_INT 30
8679: PUSH
8680: LD_INT 31
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 30
8689: PUSH
8690: LD_INT 32
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 70
8706: ST_TO_ADDR
// y := 1 ;
8707: LD_ADDR_VAR 0 4
8711: PUSH
8712: LD_INT 1
8714: ST_TO_ADDR
// for i in SouthCheckpointCrew do
8715: LD_ADDR_VAR 0 2
8719: PUSH
8720: LD_EXP 10
8724: PUSH
8725: FOR_IN
8726: IFFALSE 8809
// begin case GetClass ( i ) of 1 :
8728: LD_VAR 0 2
8732: PPUSH
8733: CALL_OW 257
8737: PUSH
8738: LD_INT 1
8740: DOUBLE
8741: EQUAL
8742: IFTRUE 8746
8744: GO 8783
8746: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
8747: LD_VAR 0 2
8751: PPUSH
8752: LD_VAR 0 5
8756: PUSH
8757: LD_VAR 0 4
8761: ARRAY
8762: PPUSH
8763: CALL_OW 52
// y = y + 1 ;
8767: LD_ADDR_VAR 0 4
8771: PUSH
8772: LD_VAR 0 4
8776: PUSH
8777: LD_INT 1
8779: PLUS
8780: ST_TO_ADDR
// end ; 2 :
8781: GO 8807
8783: LD_INT 2
8785: DOUBLE
8786: EQUAL
8787: IFTRUE 8791
8789: GO 8806
8791: POP
// PlaceHumanInUnit ( i , SouthDepot ) ; end ;
8792: LD_VAR 0 2
8796: PPUSH
8797: LD_INT 193
8799: PPUSH
8800: CALL_OW 52
8804: GO 8807
8806: POP
// end ;
8807: GO 8725
8809: POP
8810: POP
// end ; end_of_file
8811: LD_VAR 0 1
8815: RET
// every 0 0$1 trigger IsDead ( YakotichBase ) or IsDead ( NorthLenin ) or IsDead ( SouthLenin ) do
8816: LD_INT 312
8818: PPUSH
8819: CALL_OW 301
8823: PUSH
8824: LD_INT 253
8826: PPUSH
8827: CALL_OW 301
8831: OR
8832: PUSH
8833: LD_INT 218
8835: PPUSH
8836: CALL_OW 301
8840: OR
8841: IFFALSE 8853
8843: GO 8845
8845: DISABLE
// begin YouLost ( DepotDead ) ;
8846: LD_STRING DepotDead
8848: PPUSH
8849: CALL_OW 104
// end ;
8853: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 3 and s2 = 6 ) or ( s2 = 6 and s1 = 3 ) or ( s2 = 4 and s1 = 3 ) or ( s2 = 3 and s1 = 4 ) then
8854: LD_VAR 0 1
8858: PUSH
8859: LD_INT 3
8861: EQUAL
8862: PUSH
8863: LD_VAR 0 2
8867: PUSH
8868: LD_INT 6
8870: EQUAL
8871: AND
8872: PUSH
8873: LD_VAR 0 2
8877: PUSH
8878: LD_INT 6
8880: EQUAL
8881: PUSH
8882: LD_VAR 0 1
8886: PUSH
8887: LD_INT 3
8889: EQUAL
8890: AND
8891: OR
8892: PUSH
8893: LD_VAR 0 2
8897: PUSH
8898: LD_INT 4
8900: EQUAL
8901: PUSH
8902: LD_VAR 0 1
8906: PUSH
8907: LD_INT 3
8909: EQUAL
8910: AND
8911: OR
8912: PUSH
8913: LD_VAR 0 2
8917: PUSH
8918: LD_INT 3
8920: EQUAL
8921: PUSH
8922: LD_VAR 0 1
8926: PUSH
8927: LD_INT 4
8929: EQUAL
8930: AND
8931: OR
8932: IFFALSE 8941
// begin YouLost ( AllyAttacked ) ;
8934: LD_STRING AllyAttacked
8936: PPUSH
8937: CALL_OW 104
// end ; end ;
8941: PPOPN 2
8943: END
// on BuildingCaptured ( cb , bfs , cu ) do begin if GetSide ( cb ) = 6 and GetSide ( cu ) = 3 then
8944: LD_VAR 0 1
8948: PPUSH
8949: CALL_OW 255
8953: PUSH
8954: LD_INT 6
8956: EQUAL
8957: PUSH
8958: LD_VAR 0 3
8962: PPUSH
8963: CALL_OW 255
8967: PUSH
8968: LD_INT 3
8970: EQUAL
8971: AND
8972: IFFALSE 8981
// begin YouLost ( AllyAttacked ) ;
8974: LD_STRING AllyAttacked
8976: PPUSH
8977: CALL_OW 104
// end ; end ;
8981: PPOPN 3
8983: END
// export ru_bul , ru2_bul ; on UnitDestroyed ( un ) do begin if un = Yakotich then
8984: LD_VAR 0 1
8988: PUSH
8989: LD_EXP 13
8993: EQUAL
8994: IFFALSE 9003
// YouLost ( YakotichDead ) ;
8996: LD_STRING YakotichDead
8998: PPUSH
8999: CALL_OW 104
// if un = Mietek then
9003: LD_VAR 0 1
9007: PUSH
9008: LD_EXP 14
9012: EQUAL
9013: IFFALSE 9022
// YouLost ( MietekDead ) ;
9015: LD_STRING MietekDead
9017: PPUSH
9018: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
9022: LD_VAR 0 1
9026: PUSH
9027: LD_INT 22
9029: PUSH
9030: LD_INT 3
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: LD_INT 3
9039: PUSH
9040: LD_INT 23
9042: PUSH
9043: LD_INT 0
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: PUSH
9054: LD_INT 21
9056: PUSH
9057: LD_INT 1
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: PPUSH
9069: CALL_OW 69
9073: IN
9074: IFFALSE 9083
// YouLost ( PeopleDead ) ;
9076: LD_STRING PeopleDead
9078: PPUSH
9079: CALL_OW 104
// end ;
9083: PPOPN 1
9085: END
// on BuildingStarted ( b , builder ) do var x , y ;
9086: LD_INT 0
9088: PPUSH
9089: PPUSH
// begin if GetBType ( b ) = b_bunker or GetBType ( b ) = b_breastwork and GetSide ( b ) = 4 then
9090: LD_VAR 0 1
9094: PPUSH
9095: CALL_OW 266
9099: PUSH
9100: LD_INT 32
9102: EQUAL
9103: PUSH
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 266
9113: PUSH
9114: LD_INT 31
9116: EQUAL
9117: PUSH
9118: LD_VAR 0 1
9122: PPUSH
9123: CALL_OW 255
9127: PUSH
9128: LD_INT 4
9130: EQUAL
9131: AND
9132: OR
9133: IFFALSE 9222
// begin x = GetX ( b ) ;
9135: LD_ADDR_VAR 0 3
9139: PUSH
9140: LD_VAR 0 1
9144: PPUSH
9145: CALL_OW 250
9149: ST_TO_ADDR
// y = GetY ( b ) ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: LD_VAR 0 1
9159: PPUSH
9160: CALL_OW 251
9164: ST_TO_ADDR
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , x , y ) ;
9165: LD_INT 22
9167: PUSH
9168: LD_INT 4
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: LD_INT 25
9177: PUSH
9178: LD_INT 1
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: PUSH
9185: LD_INT 3
9187: PUSH
9188: LD_INT 54
9190: PUSH
9191: EMPTY
9192: LIST
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: PPUSH
9208: LD_VAR 0 3
9212: PPUSH
9213: LD_VAR 0 4
9217: PPUSH
9218: CALL_OW 171
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 4 then
9222: LD_VAR 0 1
9226: PPUSH
9227: CALL_OW 266
9231: PUSH
9232: LD_INT 6
9234: EQUAL
9235: PUSH
9236: LD_VAR 0 1
9240: PPUSH
9241: CALL_OW 255
9245: PUSH
9246: LD_INT 4
9248: EQUAL
9249: AND
9250: IFFALSE 9339
// begin x = GetX ( b ) ;
9252: LD_ADDR_VAR 0 3
9256: PUSH
9257: LD_VAR 0 1
9261: PPUSH
9262: CALL_OW 250
9266: ST_TO_ADDR
// y = GetY ( b ) ;
9267: LD_ADDR_VAR 0 4
9271: PUSH
9272: LD_VAR 0 1
9276: PPUSH
9277: CALL_OW 251
9281: ST_TO_ADDR
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) , x , y ) ;
9282: LD_INT 22
9284: PUSH
9285: LD_INT 4
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 25
9294: PUSH
9295: LD_INT 4
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 3
9304: PUSH
9305: LD_INT 54
9307: PUSH
9308: EMPTY
9309: LIST
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: LIST
9319: PPUSH
9320: CALL_OW 69
9324: PPUSH
9325: LD_VAR 0 3
9329: PPUSH
9330: LD_VAR 0 4
9334: PPUSH
9335: CALL_OW 171
// end ; if GetBType ( b ) = b_workshop and GetSide ( b ) = 4 then
9339: LD_VAR 0 1
9343: PPUSH
9344: CALL_OW 266
9348: PUSH
9349: LD_INT 2
9351: EQUAL
9352: PUSH
9353: LD_VAR 0 1
9357: PPUSH
9358: CALL_OW 255
9362: PUSH
9363: LD_INT 4
9365: EQUAL
9366: AND
9367: IFFALSE 9456
// begin x = GetX ( b ) ;
9369: LD_ADDR_VAR 0 3
9373: PUSH
9374: LD_VAR 0 1
9378: PPUSH
9379: CALL_OW 250
9383: ST_TO_ADDR
// y = GetY ( b ) ;
9384: LD_ADDR_VAR 0 4
9388: PUSH
9389: LD_VAR 0 1
9393: PPUSH
9394: CALL_OW 251
9398: ST_TO_ADDR
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 3 ] , [ f_not , [ f_inside ] ] ] ) , x , y ) ;
9399: LD_INT 22
9401: PUSH
9402: LD_INT 4
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: PUSH
9409: LD_INT 25
9411: PUSH
9412: LD_INT 3
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PUSH
9419: LD_INT 3
9421: PUSH
9422: LD_INT 54
9424: PUSH
9425: EMPTY
9426: LIST
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: PPUSH
9437: CALL_OW 69
9441: PPUSH
9442: LD_VAR 0 3
9446: PPUSH
9447: LD_VAR 0 4
9451: PPUSH
9452: CALL_OW 171
// end ; end ;
9456: PPOPN 4
9458: END
// export BierezovDepot , BierezovArmoury ; on BuildingComplete ( b ) do var i ;
9459: LD_INT 0
9461: PPUSH
// begin if GetBType ( b ) = b_bunker and GetSide ( b ) = 6 and IsInArea ( b , NorthLeninArea ) then
9462: LD_VAR 0 1
9466: PPUSH
9467: CALL_OW 266
9471: PUSH
9472: LD_INT 32
9474: EQUAL
9475: PUSH
9476: LD_VAR 0 1
9480: PPUSH
9481: CALL_OW 255
9485: PUSH
9486: LD_INT 6
9488: EQUAL
9489: AND
9490: PUSH
9491: LD_VAR 0 1
9495: PPUSH
9496: LD_INT 5
9498: PPUSH
9499: CALL_OW 308
9503: AND
9504: IFFALSE 9526
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
9506: LD_VAR 0 1
9510: PPUSH
9511: LD_INT 43
9513: PPUSH
9514: LD_INT 46
9516: PPUSH
9517: CALL_OW 12
9521: PPUSH
9522: CALL_OW 208
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9526: LD_VAR 0 1
9530: PPUSH
9531: CALL_OW 266
9535: PUSH
9536: LD_INT 32
9538: EQUAL
9539: PUSH
9540: LD_VAR 0 1
9544: PPUSH
9545: CALL_OW 255
9549: PUSH
9550: LD_INT 4
9552: EQUAL
9553: AND
9554: PUSH
9555: LD_VAR 0 1
9559: PPUSH
9560: LD_INT 27
9562: PPUSH
9563: CALL_OW 308
9567: AND
9568: IFFALSE 9590
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
9570: LD_VAR 0 1
9574: PPUSH
9575: LD_INT 43
9577: PPUSH
9578: LD_INT 46
9580: PPUSH
9581: CALL_OW 12
9585: PPUSH
9586: CALL_OW 208
// end ; if GetBType ( b ) = b_bunker or GetBType ( b ) = b_breastwork and GetSide ( b ) = 4 then
9590: LD_VAR 0 1
9594: PPUSH
9595: CALL_OW 266
9599: PUSH
9600: LD_INT 32
9602: EQUAL
9603: PUSH
9604: LD_VAR 0 1
9608: PPUSH
9609: CALL_OW 266
9613: PUSH
9614: LD_INT 31
9616: EQUAL
9617: PUSH
9618: LD_VAR 0 1
9622: PPUSH
9623: CALL_OW 255
9627: PUSH
9628: LD_INT 4
9630: EQUAL
9631: AND
9632: OR
9633: IFFALSE 9693
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff Bierezov , b ) ;
9635: LD_INT 22
9637: PUSH
9638: LD_INT 4
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 25
9647: PUSH
9648: LD_INT 1
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 3
9657: PUSH
9658: LD_INT 54
9660: PUSH
9661: EMPTY
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: PPUSH
9673: CALL_OW 69
9677: PUSH
9678: LD_EXP 42
9682: DIFF
9683: PPUSH
9684: LD_VAR 0 1
9688: PPUSH
9689: CALL_OW 180
// end ; if GetBType ( b ) = b_depot and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9693: LD_VAR 0 1
9697: PPUSH
9698: CALL_OW 266
9702: PUSH
9703: LD_INT 0
9705: EQUAL
9706: PUSH
9707: LD_VAR 0 1
9711: PPUSH
9712: CALL_OW 255
9716: PUSH
9717: LD_INT 4
9719: EQUAL
9720: AND
9721: PUSH
9722: LD_VAR 0 1
9726: PPUSH
9727: LD_INT 27
9729: PPUSH
9730: CALL_OW 308
9734: AND
9735: IFFALSE 9827
// begin SetBName ( b , zinoviev ) ;
9737: LD_VAR 0 1
9741: PPUSH
9742: LD_STRING zinoviev
9744: PPUSH
9745: CALL_OW 500
// DialogueOn ;
9749: CALL_OW 6
// CenterNowOnUnits ( Bierezov ) ;
9753: LD_EXP 42
9757: PPUSH
9758: CALL_OW 87
// SayRadio ( Bierezov , 4Bierezov-01 ) ;
9762: LD_EXP 42
9766: PPUSH
9767: LD_STRING 4Bierezov-01
9769: PPUSH
9770: CALL_OW 94
// DialogueOff ;
9774: CALL_OW 7
// ComUpgrade ( b ) ;
9778: LD_VAR 0 1
9782: PPUSH
9783: CALL_OW 146
// SetResourceType ( GetBase ( b ) , mat_cans , 2500 ) ;
9787: LD_VAR 0 1
9791: PPUSH
9792: CALL_OW 274
9796: PPUSH
9797: LD_INT 1
9799: PPUSH
9800: LD_INT 2500
9802: PPUSH
9803: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 500 ) ;
9807: LD_VAR 0 1
9811: PPUSH
9812: CALL_OW 274
9816: PPUSH
9817: LD_INT 2
9819: PPUSH
9820: LD_INT 500
9822: PPUSH
9823: CALL_OW 277
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9827: LD_VAR 0 1
9831: PPUSH
9832: CALL_OW 266
9836: PUSH
9837: LD_INT 6
9839: EQUAL
9840: PUSH
9841: LD_VAR 0 1
9845: PPUSH
9846: CALL_OW 255
9850: PUSH
9851: LD_INT 4
9853: EQUAL
9854: AND
9855: PUSH
9856: LD_VAR 0 1
9860: PPUSH
9861: LD_INT 27
9863: PPUSH
9864: CALL_OW 308
9868: AND
9869: IFFALSE 9883
// begin ComUpgradeLab ( b , 10 ) ;
9871: LD_VAR 0 1
9875: PPUSH
9876: LD_INT 10
9878: PPUSH
9879: CALL_OW 147
// end ; if GetBType ( b ) = b_workshop and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9883: LD_VAR 0 1
9887: PPUSH
9888: CALL_OW 266
9892: PUSH
9893: LD_INT 2
9895: EQUAL
9896: PUSH
9897: LD_VAR 0 1
9901: PPUSH
9902: CALL_OW 255
9906: PUSH
9907: LD_INT 4
9909: EQUAL
9910: AND
9911: PUSH
9912: LD_VAR 0 1
9916: PPUSH
9917: LD_INT 27
9919: PPUSH
9920: CALL_OW 308
9924: AND
9925: IFFALSE 9936
// begin ComUpgrade ( b ) ;
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 146
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 6 and IsInArea ( b , SouthLeninArea ) and control_taken_over = false then
9936: LD_VAR 0 1
9940: PPUSH
9941: CALL_OW 266
9945: PUSH
9946: LD_INT 32
9948: EQUAL
9949: PUSH
9950: LD_VAR 0 1
9954: PPUSH
9955: CALL_OW 255
9959: PUSH
9960: LD_INT 6
9962: EQUAL
9963: AND
9964: PUSH
9965: LD_VAR 0 1
9969: PPUSH
9970: LD_INT 4
9972: PPUSH
9973: CALL_OW 308
9977: AND
9978: PUSH
9979: LD_EXP 63
9983: PUSH
9984: LD_INT 0
9986: EQUAL
9987: AND
9988: IFFALSE 10010
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
9990: LD_VAR 0 1
9994: PPUSH
9995: LD_INT 43
9997: PPUSH
9998: LD_INT 46
10000: PPUSH
10001: CALL_OW 12
10005: PPUSH
10006: CALL_OW 208
// end ; if GetBType ( b ) = b_armoury and GetSide ( b ) = 4 then
10010: LD_VAR 0 1
10014: PPUSH
10015: CALL_OW 266
10019: PUSH
10020: LD_INT 4
10022: EQUAL
10023: PUSH
10024: LD_VAR 0 1
10028: PPUSH
10029: CALL_OW 255
10033: PUSH
10034: LD_INT 4
10036: EQUAL
10037: AND
10038: IFFALSE 10050
// begin BierezovArmoury = b ;
10040: LD_ADDR_EXP 78
10044: PUSH
10045: LD_VAR 0 1
10049: ST_TO_ADDR
// end ; end ;
10050: PPOPN 2
10052: END
// on UpgradeComplete ( b ) do begin if GetBType ( b ) = b_warehouse and GetSide ( b ) = 4 then
10053: LD_VAR 0 1
10057: PPUSH
10058: CALL_OW 266
10062: PUSH
10063: LD_INT 1
10065: EQUAL
10066: PUSH
10067: LD_VAR 0 1
10071: PPUSH
10072: CALL_OW 255
10076: PUSH
10077: LD_INT 4
10079: EQUAL
10080: AND
10081: IFFALSE 10128
// begin BierezovDepot = b ;
10083: LD_ADDR_EXP 77
10087: PUSH
10088: LD_VAR 0 1
10092: ST_TO_ADDR
// Wait ( 0 0$3 ) ;
10093: LD_INT 105
10095: PPUSH
10096: CALL_OW 67
// ComEnterUnit ( Bierezov , BierezovDepot ) ;
10100: LD_EXP 42
10104: PPUSH
10105: LD_EXP 77
10109: PPUSH
10110: CALL_OW 120
// ComEnterUnit ( Aleinik , BierezovDepot ) ;
10114: LD_EXP 45
10118: PPUSH
10119: LD_EXP 77
10123: PPUSH
10124: CALL_OW 120
// end ; if GetBType ( b ) = b_lab_half and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
10128: LD_VAR 0 1
10132: PPUSH
10133: CALL_OW 266
10137: PUSH
10138: LD_INT 7
10140: EQUAL
10141: PUSH
10142: LD_VAR 0 1
10146: PPUSH
10147: CALL_OW 255
10151: PUSH
10152: LD_INT 4
10154: EQUAL
10155: AND
10156: PUSH
10157: LD_VAR 0 1
10161: PPUSH
10162: LD_INT 27
10164: PPUSH
10165: CALL_OW 308
10169: AND
10170: IFFALSE 10184
// begin AddComUpgradeLab ( b , 12 ) ;
10172: LD_VAR 0 1
10176: PPUSH
10177: LD_INT 12
10179: PPUSH
10180: CALL_OW 207
// end ; if GetBType ( b ) = b_lab_full and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
10184: LD_VAR 0 1
10188: PPUSH
10189: CALL_OW 266
10193: PUSH
10194: LD_INT 8
10196: EQUAL
10197: PUSH
10198: LD_VAR 0 1
10202: PPUSH
10203: CALL_OW 255
10207: PUSH
10208: LD_INT 4
10210: EQUAL
10211: AND
10212: PUSH
10213: LD_VAR 0 1
10217: PPUSH
10218: LD_INT 27
10220: PPUSH
10221: CALL_OW 308
10225: AND
10226: IFFALSE 10350
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 4 ] ] ) , b ) ;
10228: LD_INT 22
10230: PUSH
10231: LD_INT 4
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 25
10240: PUSH
10241: LD_INT 4
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: PPUSH
10252: CALL_OW 69
10256: PPUSH
10257: LD_VAR 0 1
10261: PPUSH
10262: CALL_OW 180
// AddComResearch ( b , 83 ) ;
10266: LD_VAR 0 1
10270: PPUSH
10271: LD_INT 83
10273: PPUSH
10274: CALL_OW 184
// AddComResearch ( b , 84 ) ;
10278: LD_VAR 0 1
10282: PPUSH
10283: LD_INT 84
10285: PPUSH
10286: CALL_OW 184
// AddComResearch ( b , 85 ) ;
10290: LD_VAR 0 1
10294: PPUSH
10295: LD_INT 85
10297: PPUSH
10298: CALL_OW 184
// AddComResearch ( b , 48 ) ;
10302: LD_VAR 0 1
10306: PPUSH
10307: LD_INT 48
10309: PPUSH
10310: CALL_OW 184
// AddComResearch ( b , 49 ) ;
10314: LD_VAR 0 1
10318: PPUSH
10319: LD_INT 49
10321: PPUSH
10322: CALL_OW 184
// AddComResearch ( b , 51 ) ;
10326: LD_VAR 0 1
10330: PPUSH
10331: LD_INT 51
10333: PPUSH
10334: CALL_OW 184
// AddComResearch ( b , 57 ) ;
10338: LD_VAR 0 1
10342: PPUSH
10343: LD_INT 57
10345: PPUSH
10346: CALL_OW 184
// end ; if GetBType ( b ) = b_factory and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 266
10359: PUSH
10360: LD_INT 3
10362: EQUAL
10363: PUSH
10364: LD_VAR 0 1
10368: PPUSH
10369: CALL_OW 255
10373: PUSH
10374: LD_INT 4
10376: EQUAL
10377: AND
10378: PUSH
10379: LD_VAR 0 1
10383: PPUSH
10384: LD_INT 27
10386: PPUSH
10387: CALL_OW 308
10391: AND
10392: IFFALSE 10432
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 3 ] ] ) , b ) ;
10394: LD_INT 22
10396: PUSH
10397: LD_INT 4
10399: PUSH
10400: EMPTY
10401: LIST
10402: LIST
10403: PUSH
10404: LD_INT 25
10406: PUSH
10407: LD_INT 3
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PPUSH
10418: CALL_OW 69
10422: PPUSH
10423: LD_VAR 0 1
10427: PPUSH
10428: CALL_OW 180
// end ; end ;
10432: PPOPN 1
10434: END
// on ApemanTamed ( ape , scientist ) do begin if GetSide ( ape ) = 3 and apeman_tamed = false then
10435: LD_VAR 0 1
10439: PPUSH
10440: CALL_OW 255
10444: PUSH
10445: LD_INT 3
10447: EQUAL
10448: PUSH
10449: LD_EXP 65
10453: PUSH
10454: LD_INT 0
10456: EQUAL
10457: AND
10458: IFFALSE 10512
// begin DialogueOn ;
10460: CALL_OW 6
// Say ( Grigori , 4Grig-Ape-02 ) ;
10464: LD_EXP 28
10468: PPUSH
10469: LD_STRING 4Grig-Ape-02
10471: PPUSH
10472: CALL_OW 88
// Say ( Yakotich , 4Yak-Ape-02 ) ;
10476: LD_EXP 13
10480: PPUSH
10481: LD_STRING 4Yak-Ape-02
10483: PPUSH
10484: CALL_OW 88
// Say ( Grigori , 4Grig-Ape-03 ) ;
10488: LD_EXP 28
10492: PPUSH
10493: LD_STRING 4Grig-Ape-03
10495: PPUSH
10496: CALL_OW 88
// DialogueOff ;
10500: CALL_OW 7
// apeman_tamed = true ;
10504: LD_ADDR_EXP 65
10508: PUSH
10509: LD_INT 1
10511: ST_TO_ADDR
// end ; end ;
10512: PPOPN 2
10514: END
// on VehicleRecycled ( BuildingID , VehicleID , Side , Nation , X , Y , Direction , Chassis , Controller , Engine , Weapon ) do begin if Side = 3 and Nation = 2 and Weapon = 26 then
10515: LD_VAR 0 3
10519: PUSH
10520: LD_INT 3
10522: EQUAL
10523: PUSH
10524: LD_VAR 0 4
10528: PUSH
10529: LD_INT 2
10531: EQUAL
10532: AND
10533: PUSH
10534: LD_VAR 0 11
10538: PUSH
10539: LD_INT 26
10541: EQUAL
10542: AND
10543: IFFALSE 10558
// begin SetTech ( 70 , 3 , 1 ) ;
10545: LD_INT 70
10547: PPUSH
10548: LD_INT 3
10550: PPUSH
10551: LD_INT 1
10553: PPUSH
10554: CALL_OW 322
// end ; end ;
10558: PPOPN 11
10560: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = 89 and GetSide ( vehicle ) = 6 then
10561: LD_VAR 0 1
10565: PPUSH
10566: CALL_OW 264
10570: PUSH
10571: LD_INT 89
10573: EQUAL
10574: PUSH
10575: LD_VAR 0 1
10579: PPUSH
10580: CALL_OW 255
10584: PUSH
10585: LD_INT 6
10587: EQUAL
10588: AND
10589: IFFALSE 10747
// begin Wait ( 0 0$5 ) ;
10591: LD_INT 175
10593: PPUSH
10594: CALL_OW 67
// DialogueOn ;
10598: CALL_OW 6
// CenterNowOnUnits ( vehicle ) ;
10602: LD_VAR 0 1
10606: PPUSH
10607: CALL_OW 87
// SayRadio ( Bukov , 4Bukov-Transport-01 ) ;
10611: LD_EXP 57
10615: PPUSH
10616: LD_STRING 4Bukov-Transport-01
10618: PPUSH
10619: CALL_OW 94
// SayRadio ( Platonov , 4Plat-Transport-01 ) ;
10623: LD_EXP 54
10627: PPUSH
10628: LD_STRING 4Plat-Transport-01
10630: PPUSH
10631: CALL_OW 94
// TransportQuery ( 1 ) ;
10635: LD_INT 1
10637: PPUSH
10638: CALL 5037 0 1
// SetAreaMapShow ( LeninCargo , 2 ) ;
10642: LD_INT 17
10644: PPUSH
10645: LD_INT 2
10647: PPUSH
10648: CALL_OW 424
// CenterNowOnXY ( 102 , 165 ) ;
10652: LD_INT 102
10654: PPUSH
10655: LD_INT 165
10657: PPUSH
10658: CALL_OW 86
// DialogueOff ;
10662: CALL_OW 7
// repeat AddComTransport ( vehicle , BukovBase , mat_cans ) ;
10666: LD_VAR 0 1
10670: PPUSH
10671: LD_INT 127
10673: PPUSH
10674: LD_INT 1
10676: PPUSH
10677: CALL_OW 211
// AddComGive ( vehicle , SouthLenin ) ;
10681: LD_VAR 0 1
10685: PPUSH
10686: LD_INT 218
10688: PPUSH
10689: CALL_OW 221
// SetFuel ( vehicle , 85 ) ;
10693: LD_VAR 0 1
10697: PPUSH
10698: LD_INT 85
10700: PPUSH
10701: CALL_OW 240
// wait ( 0 0$1 ) ;
10705: LD_INT 35
10707: PPUSH
10708: CALL_OW 67
// until fall_back = true ;
10712: LD_EXP 69
10716: PUSH
10717: LD_INT 1
10719: EQUAL
10720: IFFALSE 10666
// if fall_back = true then
10722: LD_EXP 69
10726: PUSH
10727: LD_INT 1
10729: EQUAL
10730: IFFALSE 10747
// ComMoveXY ( vehicle , 110 , 168 ) ;
10732: LD_VAR 0 1
10736: PPUSH
10737: LD_INT 110
10739: PPUSH
10740: LD_INT 168
10742: PPUSH
10743: CALL_OW 111
// end ; end ;
10747: PPOPN 2
10749: END
// every 0 0$1 trigger Researched ( 6 , 84 ) do
10750: LD_INT 6
10752: PPUSH
10753: LD_INT 84
10755: PPUSH
10756: CALL_OW 325
10760: IFFALSE 10784
10762: GO 10764
10764: DISABLE
// begin AddComConstruct ( BukovF , 24 , 1 , 1 , 89 ) ;
10765: LD_INT 128
10767: PPUSH
10768: LD_INT 24
10770: PPUSH
10771: LD_INT 1
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: LD_INT 89
10779: PPUSH
10780: CALL_OW 185
// end ;
10784: END
// every 0 0$1 trigger Researched ( 3 , 34 ) do
10785: LD_INT 3
10787: PPUSH
10788: LD_INT 34
10790: PPUSH
10791: CALL_OW 325
10795: IFFALSE 10835
10797: GO 10799
10799: DISABLE
// begin DialogueOn ;
10800: CALL_OW 6
// Say ( Vasilij , 4Vas-HG-01 ) ;
10804: LD_EXP 16
10808: PPUSH
10809: LD_STRING 4Vas-HG-01
10811: PPUSH
10812: CALL_OW 88
// DialogueOff ;
10816: CALL_OW 7
// ChangeMissionObjectives ( hg2 ) ;
10820: LD_STRING hg2
10822: PPUSH
10823: CALL_OW 337
// heavy_gun_researched = true ;
10827: LD_ADDR_EXP 67
10831: PUSH
10832: LD_INT 1
10834: ST_TO_ADDR
// end ;
10835: END
// every 0 0$1 trigger Researched ( 3 , 1 ) do
10836: LD_INT 3
10838: PPUSH
10839: LD_INT 1
10841: PPUSH
10842: CALL_OW 325
10846: IFFALSE 10883
10848: GO 10850
10850: DISABLE
// begin DialogueOn ;
10851: CALL_OW 6
// Say ( Grigori , 4Grig-Ape-01 ) ;
10855: LD_EXP 28
10859: PPUSH
10860: LD_STRING 4Grig-Ape-01
10862: PPUSH
10863: CALL_OW 88
// Say ( Yakotich , 4Yak-Ape-01 ) ;
10867: LD_EXP 13
10871: PPUSH
10872: LD_STRING 4Yak-Ape-01
10874: PPUSH
10875: CALL_OW 88
// DialogueOff ;
10879: CALL_OW 7
// end ;
10883: END
// every 0 0$1 trigger Researched ( 3 , 70 ) do
10884: LD_INT 3
10886: PPUSH
10887: LD_INT 70
10889: PPUSH
10890: CALL_OW 325
10894: IFFALSE 10958
10896: GO 10898
10898: DISABLE
// begin DialogueOn ;
10899: CALL_OW 6
// Say ( Stanislav , 4Stan-Flame-01 ) ;
10903: LD_EXP 26
10907: PPUSH
10908: LD_STRING 4Stan-Flame-01
10910: PPUSH
10911: CALL_OW 88
// Say ( Stanislav , 4Stan-Flame-02 ) ;
10915: LD_EXP 26
10919: PPUSH
10920: LD_STRING 4Stan-Flame-02
10922: PPUSH
10923: CALL_OW 88
// Say ( Stanislav , 4Stan-Flame-03 ) ;
10927: LD_EXP 26
10931: PPUSH
10932: LD_STRING 4Stan-Flame-03
10934: PPUSH
10935: CALL_OW 88
// ChangeMissionObjectives ( flame ) ;
10939: LD_STRING flame
10941: PPUSH
10942: CALL_OW 337
// flame_researched = true ;
10946: LD_ADDR_EXP 66
10950: PUSH
10951: LD_INT 1
10953: ST_TO_ADDR
// DialogueOff ;
10954: CALL_OW 7
// end ;
10958: END
// every 0 0$5 trigger FilterUnitsInArea ( BierezovBaseArea , ( [ [ f_side , 4 ] , [ f_constructed ] , [ f_btype , b_breastwork ] ] ) ) >= 1 do
10959: LD_INT 27
10961: PPUSH
10962: LD_INT 22
10964: PUSH
10965: LD_INT 4
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 57
10974: PUSH
10975: EMPTY
10976: LIST
10977: PUSH
10978: LD_INT 30
10980: PUSH
10981: LD_INT 31
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: LIST
10992: PPUSH
10993: CALL_OW 70
10997: PUSH
10998: LD_INT 1
11000: GREATEREQUAL
11001: IFFALSE 11262
11003: GO 11005
11005: DISABLE
// begin Wait ( 0 0$15 ) ;
11006: LD_INT 525
11008: PPUSH
11009: CALL_OW 67
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_outside ] , [ f_class , 1 ] ] ) , BierezovArmoury ) ;
11013: LD_INT 22
11015: PUSH
11016: LD_INT 4
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 56
11025: PUSH
11026: EMPTY
11027: LIST
11028: PUSH
11029: LD_INT 25
11031: PUSH
11032: LD_INT 1
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: LIST
11043: PPUSH
11044: CALL_OW 69
11048: PPUSH
11049: LD_EXP 78
11053: PPUSH
11054: CALL_OW 180
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_outside ] , [ f_class , 2 ] ] ) , BierezovDepot ) ;
11058: LD_INT 22
11060: PUSH
11061: LD_INT 4
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 56
11070: PUSH
11071: EMPTY
11072: LIST
11073: PUSH
11074: LD_INT 25
11076: PUSH
11077: LD_INT 2
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: LIST
11088: PPUSH
11089: CALL_OW 69
11093: PPUSH
11094: LD_EXP 77
11098: PPUSH
11099: CALL_OW 180
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) , 23 , 1 , 1 , rand ( 44 , 46 ) ) ;
11103: LD_INT 22
11105: PUSH
11106: LD_INT 4
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PUSH
11113: LD_INT 30
11115: PUSH
11116: LD_INT 3
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PPUSH
11127: CALL_OW 69
11131: PPUSH
11132: LD_INT 23
11134: PPUSH
11135: LD_INT 1
11137: PPUSH
11138: LD_INT 1
11140: PPUSH
11141: LD_INT 44
11143: PPUSH
11144: LD_INT 46
11146: PPUSH
11147: CALL_OW 12
11151: PPUSH
11152: CALL_OW 185
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) , 23 , 1 , 1 , rand ( 45 , 46 ) ) ;
11156: LD_INT 22
11158: PUSH
11159: LD_INT 4
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: LD_INT 30
11168: PUSH
11169: LD_INT 3
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PPUSH
11180: CALL_OW 69
11184: PPUSH
11185: LD_INT 23
11187: PPUSH
11188: LD_INT 1
11190: PPUSH
11191: LD_INT 1
11193: PPUSH
11194: LD_INT 45
11196: PPUSH
11197: LD_INT 46
11199: PPUSH
11200: CALL_OW 12
11204: PPUSH
11205: CALL_OW 185
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) , 23 , 1 , 1 , rand ( 43 , 46 ) ) ;
11209: LD_INT 22
11211: PUSH
11212: LD_INT 4
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: PUSH
11219: LD_INT 30
11221: PUSH
11222: LD_INT 3
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PPUSH
11233: CALL_OW 69
11237: PPUSH
11238: LD_INT 23
11240: PPUSH
11241: LD_INT 1
11243: PPUSH
11244: LD_INT 1
11246: PPUSH
11247: LD_INT 43
11249: PPUSH
11250: LD_INT 46
11252: PPUSH
11253: CALL_OW 12
11257: PPUSH
11258: CALL_OW 185
// end ; end_of_file
11262: END
// export OmarTanks , OmarMechs , OmarMastodont ; export function InitArabianAI ; var i , z , y , turrety , fabryka , lab , zbrojka ; begin
11263: LD_INT 0
11265: PPUSH
11266: PPUSH
11267: PPUSH
11268: PPUSH
11269: PPUSH
11270: PPUSH
11271: PPUSH
11272: PPUSH
// uc_side := 2 ;
11273: LD_ADDR_OWVAR 20
11277: PUSH
11278: LD_INT 2
11280: ST_TO_ADDR
// uc_nation := 2 ;
11281: LD_ADDR_OWVAR 21
11285: PUSH
11286: LD_INT 2
11288: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , false ,  ) ;
11289: LD_ADDR_EXP 30
11293: PUSH
11294: LD_STRING Heike
11296: PPUSH
11297: LD_INT 0
11299: PPUSH
11300: LD_STRING 
11302: PPUSH
11303: CALL 12755 0 3
11307: ST_TO_ADDR
// PlaceHumanInUnit ( Heike , HeikeDepot ) ;
11308: LD_EXP 30
11312: PPUSH
11313: LD_INT 86
11315: PPUSH
11316: CALL_OW 52
// Hc_Gallery :=  ;
11320: LD_ADDR_OWVAR 33
11324: PUSH
11325: LD_STRING 
11327: ST_TO_ADDR
// Hc_Name :=  ;
11328: LD_ADDR_OWVAR 26
11332: PUSH
11333: LD_STRING 
11335: ST_TO_ADDR
// HeikeCrew := [ ] ;
11336: LD_ADDR_EXP 11
11340: PUSH
11341: EMPTY
11342: ST_TO_ADDR
// for i = 1 to 15 do
11343: LD_ADDR_VAR 0 2
11347: PUSH
11348: DOUBLE
11349: LD_INT 1
11351: DEC
11352: ST_TO_ADDR
11353: LD_INT 15
11355: PUSH
11356: FOR_TO
11357: IFFALSE 11412
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11359: LD_INT 0
11361: PPUSH
11362: LD_INT 1
11364: PPUSH
11365: CALL_OW 12
11369: PPUSH
11370: LD_INT 3
11372: PUSH
11373: LD_INT 5
11375: PUSH
11376: LD_INT 7
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: LD_OWVAR 67
11388: ARRAY
11389: PPUSH
11390: CALL_OW 381
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11394: LD_ADDR_EXP 11
11398: PUSH
11399: LD_EXP 11
11403: PUSH
11404: CALL_OW 44
11408: ADD
11409: ST_TO_ADDR
// end ;
11410: GO 11356
11412: POP
11413: POP
// for i = 1 to 3 do
11414: LD_ADDR_VAR 0 2
11418: PUSH
11419: DOUBLE
11420: LD_INT 1
11422: DEC
11423: ST_TO_ADDR
11424: LD_INT 3
11426: PUSH
11427: FOR_TO
11428: IFFALSE 11483
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11430: LD_INT 0
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 12
11440: PPUSH
11441: LD_INT 3
11443: PUSH
11444: LD_INT 5
11446: PUSH
11447: LD_INT 7
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: LD_OWVAR 67
11459: ARRAY
11460: PPUSH
11461: CALL_OW 382
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11465: LD_ADDR_EXP 11
11469: PUSH
11470: LD_EXP 11
11474: PUSH
11475: CALL_OW 44
11479: ADD
11480: ST_TO_ADDR
// end ;
11481: GO 11427
11483: POP
11484: POP
// for i = 1 to 6 do
11485: LD_ADDR_VAR 0 2
11489: PUSH
11490: DOUBLE
11491: LD_INT 1
11493: DEC
11494: ST_TO_ADDR
11495: LD_INT 6
11497: PUSH
11498: FOR_TO
11499: IFFALSE 11554
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11501: LD_INT 0
11503: PPUSH
11504: LD_INT 1
11506: PPUSH
11507: CALL_OW 12
11511: PPUSH
11512: LD_INT 3
11514: PUSH
11515: LD_INT 5
11517: PUSH
11518: LD_INT 7
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: LD_OWVAR 67
11530: ARRAY
11531: PPUSH
11532: CALL_OW 383
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11536: LD_ADDR_EXP 11
11540: PUSH
11541: LD_EXP 11
11545: PUSH
11546: CALL_OW 44
11550: ADD
11551: ST_TO_ADDR
// end ;
11552: GO 11498
11554: POP
11555: POP
// for i = 1 to 3 do
11556: LD_ADDR_VAR 0 2
11560: PUSH
11561: DOUBLE
11562: LD_INT 1
11564: DEC
11565: ST_TO_ADDR
11566: LD_INT 3
11568: PUSH
11569: FOR_TO
11570: IFFALSE 11625
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11572: LD_INT 0
11574: PPUSH
11575: LD_INT 1
11577: PPUSH
11578: CALL_OW 12
11582: PPUSH
11583: LD_INT 3
11585: PUSH
11586: LD_INT 5
11588: PUSH
11589: LD_INT 7
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_OWVAR 67
11601: ARRAY
11602: PPUSH
11603: CALL_OW 384
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11607: LD_ADDR_EXP 11
11611: PUSH
11612: LD_EXP 11
11616: PUSH
11617: CALL_OW 44
11621: ADD
11622: ST_TO_ADDR
// end ;
11623: GO 11569
11625: POP
11626: POP
// turrety := FilterUnitsInArea ( HeikeBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
11627: LD_ADDR_VAR 0 5
11631: PUSH
11632: LD_INT 26
11634: PPUSH
11635: LD_INT 2
11637: PUSH
11638: LD_INT 30
11640: PUSH
11641: LD_INT 31
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 30
11650: PUSH
11651: LD_INT 32
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: PPUSH
11663: CALL_OW 70
11667: ST_TO_ADDR
// lab := FilterUnitsInArea ( HeikeBaseArea , [ [ f_btype , b_lab_full ] ] ) ;
11668: LD_ADDR_VAR 0 7
11672: PUSH
11673: LD_INT 26
11675: PPUSH
11676: LD_INT 30
11678: PUSH
11679: LD_INT 8
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PUSH
11686: EMPTY
11687: LIST
11688: PPUSH
11689: CALL_OW 70
11693: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( HeikeBaseArea , [ [ f_btype , b_factory ] ] ) ;
11694: LD_ADDR_VAR 0 6
11698: PUSH
11699: LD_INT 26
11701: PPUSH
11702: LD_INT 30
11704: PUSH
11705: LD_INT 3
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: EMPTY
11713: LIST
11714: PPUSH
11715: CALL_OW 70
11719: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( HeikeBaseArea , [ [ f_btype , b_barracks ] ] ) ;
11720: LD_ADDR_VAR 0 8
11724: PUSH
11725: LD_INT 26
11727: PPUSH
11728: LD_INT 30
11730: PUSH
11731: LD_INT 5
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: PPUSH
11741: CALL_OW 70
11745: ST_TO_ADDR
// y := 1 ;
11746: LD_ADDR_VAR 0 4
11750: PUSH
11751: LD_INT 1
11753: ST_TO_ADDR
// for i in HeikeCrew do
11754: LD_ADDR_VAR 0 2
11758: PUSH
11759: LD_EXP 11
11763: PUSH
11764: FOR_IN
11765: IFFALSE 11936
// begin case GetClass ( i ) of 1 :
11767: LD_VAR 0 2
11771: PPUSH
11772: CALL_OW 257
11776: PUSH
11777: LD_INT 1
11779: DOUBLE
11780: EQUAL
11781: IFTRUE 11785
11783: GO 11852
11785: POP
// begin if y > 9 then
11786: LD_VAR 0 4
11790: PUSH
11791: LD_INT 9
11793: GREATER
11794: IFFALSE 11816
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
11796: LD_VAR 0 2
11800: PPUSH
11801: LD_VAR 0 8
11805: PUSH
11806: LD_INT 1
11808: ARRAY
11809: PPUSH
11810: CALL_OW 52
11814: GO 11836
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
11816: LD_VAR 0 2
11820: PPUSH
11821: LD_VAR 0 5
11825: PUSH
11826: LD_VAR 0 4
11830: ARRAY
11831: PPUSH
11832: CALL_OW 52
// y = y + 1 ;
11836: LD_ADDR_VAR 0 4
11840: PUSH
11841: LD_VAR 0 4
11845: PUSH
11846: LD_INT 1
11848: PLUS
11849: ST_TO_ADDR
// end ; 2 :
11850: GO 11934
11852: LD_INT 2
11854: DOUBLE
11855: EQUAL
11856: IFTRUE 11860
11858: GO 11875
11860: POP
// PlaceHumanInUnit ( i , HeikeDepot ) ; 3 :
11861: LD_VAR 0 2
11865: PPUSH
11866: LD_INT 86
11868: PPUSH
11869: CALL_OW 52
11873: GO 11934
11875: LD_INT 3
11877: DOUBLE
11878: EQUAL
11879: IFTRUE 11883
11881: GO 11904
11883: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
11884: LD_VAR 0 2
11888: PPUSH
11889: LD_VAR 0 6
11893: PUSH
11894: LD_INT 1
11896: ARRAY
11897: PPUSH
11898: CALL_OW 52
11902: GO 11934
11904: LD_INT 4
11906: DOUBLE
11907: EQUAL
11908: IFTRUE 11912
11910: GO 11933
11912: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
11913: LD_VAR 0 2
11917: PPUSH
11918: LD_VAR 0 7
11922: PUSH
11923: LD_INT 1
11925: ARRAY
11926: PPUSH
11927: CALL_OW 52
11931: GO 11934
11933: POP
// end ;
11934: GO 11764
11936: POP
11937: POP
// end ;
11938: LD_VAR 0 1
11942: RET
// export function OmarAttack ; var i , z , y , turrety , fabryka , lab , zbrojka ; begin
11943: LD_INT 0
11945: PPUSH
11946: PPUSH
11947: PPUSH
11948: PPUSH
11949: PPUSH
11950: PPUSH
11951: PPUSH
11952: PPUSH
// uc_side := 5 ;
11953: LD_ADDR_OWVAR 20
11957: PUSH
11958: LD_INT 5
11960: ST_TO_ADDR
// uc_nation := 2 ;
11961: LD_ADDR_OWVAR 21
11965: PUSH
11966: LD_INT 2
11968: ST_TO_ADDR
// vc_chassis := 31 ;
11969: LD_ADDR_OWVAR 37
11973: PUSH
11974: LD_INT 31
11976: ST_TO_ADDR
// vc_control := control_rider ;
11977: LD_ADDR_OWVAR 38
11981: PUSH
11982: LD_INT 4
11984: ST_TO_ADDR
// OmarMastodont := CreateVehicle ;
11985: LD_ADDR_EXP 81
11989: PUSH
11990: CALL_OW 45
11994: ST_TO_ADDR
// OmarCrew := OmarCrew ^ OmarMastodont ;
11995: LD_ADDR_EXP 12
11999: PUSH
12000: LD_EXP 12
12004: PUSH
12005: LD_EXP 81
12009: ADD
12010: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
12011: LD_ADDR_EXP 31
12015: PUSH
12016: LD_STRING Omar
12018: PPUSH
12019: LD_INT 0
12021: PPUSH
12022: LD_STRING 
12024: PPUSH
12025: CALL 12755 0 3
12029: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , OmarMastodont ) ;
12030: LD_EXP 31
12034: PPUSH
12035: LD_EXP 81
12039: PPUSH
12040: CALL_OW 52
// Hc_Gallery :=  ;
12044: LD_ADDR_OWVAR 33
12048: PUSH
12049: LD_STRING 
12051: ST_TO_ADDR
// Hc_Name :=  ;
12052: LD_ADDR_OWVAR 26
12056: PUSH
12057: LD_STRING 
12059: ST_TO_ADDR
// OmarCrew := [ ] ;
12060: LD_ADDR_EXP 12
12064: PUSH
12065: EMPTY
12066: ST_TO_ADDR
// for i = 1 to 8 do
12067: LD_ADDR_VAR 0 2
12071: PUSH
12072: DOUBLE
12073: LD_INT 1
12075: DEC
12076: ST_TO_ADDR
12077: LD_INT 8
12079: PUSH
12080: FOR_TO
12081: IFFALSE 12136
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12083: LD_INT 0
12085: PPUSH
12086: LD_INT 1
12088: PPUSH
12089: CALL_OW 12
12093: PPUSH
12094: LD_INT 3
12096: PUSH
12097: LD_INT 5
12099: PUSH
12100: LD_INT 7
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: PUSH
12108: LD_OWVAR 67
12112: ARRAY
12113: PPUSH
12114: CALL_OW 381
// OmarCrew := OmarCrew ^ CreateHuman ;
12118: LD_ADDR_EXP 12
12122: PUSH
12123: LD_EXP 12
12127: PUSH
12128: CALL_OW 44
12132: ADD
12133: ST_TO_ADDR
// end ;
12134: GO 12080
12136: POP
12137: POP
// for i = 1 to 6 do
12138: LD_ADDR_VAR 0 2
12142: PUSH
12143: DOUBLE
12144: LD_INT 1
12146: DEC
12147: ST_TO_ADDR
12148: LD_INT 6
12150: PUSH
12151: FOR_TO
12152: IFFALSE 12219
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12154: LD_INT 0
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: CALL_OW 12
12164: PPUSH
12165: LD_INT 3
12167: PUSH
12168: LD_INT 5
12170: PUSH
12171: LD_INT 7
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: LD_OWVAR 67
12183: ARRAY
12184: PPUSH
12185: CALL_OW 381
// OmarCrew := OmarCrew ^ CreateHuman ;
12189: LD_ADDR_EXP 12
12193: PUSH
12194: LD_EXP 12
12198: PUSH
12199: CALL_OW 44
12203: ADD
12204: ST_TO_ADDR
// SetClass ( CreateHuman , 8 ) ;
12205: CALL_OW 44
12209: PPUSH
12210: LD_INT 8
12212: PPUSH
12213: CALL_OW 336
// end ;
12217: GO 12151
12219: POP
12220: POP
// for i = 1 to 2 do
12221: LD_ADDR_VAR 0 2
12225: PUSH
12226: DOUBLE
12227: LD_INT 1
12229: DEC
12230: ST_TO_ADDR
12231: LD_INT 2
12233: PUSH
12234: FOR_TO
12235: IFFALSE 12290
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12237: LD_INT 0
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 12
12247: PPUSH
12248: LD_INT 3
12250: PUSH
12251: LD_INT 5
12253: PUSH
12254: LD_INT 7
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: PUSH
12262: LD_OWVAR 67
12266: ARRAY
12267: PPUSH
12268: CALL_OW 382
// OmarCrew := OmarCrew ^ CreateHuman ;
12272: LD_ADDR_EXP 12
12276: PUSH
12277: LD_EXP 12
12281: PUSH
12282: CALL_OW 44
12286: ADD
12287: ST_TO_ADDR
// end ;
12288: GO 12234
12290: POP
12291: POP
// for i = 1 to 6 do
12292: LD_ADDR_VAR 0 2
12296: PUSH
12297: DOUBLE
12298: LD_INT 1
12300: DEC
12301: ST_TO_ADDR
12302: LD_INT 6
12304: PUSH
12305: FOR_TO
12306: IFFALSE 12369
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12308: LD_INT 0
12310: PPUSH
12311: LD_INT 1
12313: PPUSH
12314: CALL_OW 12
12318: PPUSH
12319: LD_INT 3
12321: PUSH
12322: LD_INT 5
12324: PUSH
12325: LD_INT 7
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: PUSH
12333: LD_OWVAR 67
12337: ARRAY
12338: PPUSH
12339: CALL_OW 383
// OmarMechs = CreateHuman ;
12343: LD_ADDR_EXP 80
12347: PUSH
12348: CALL_OW 44
12352: ST_TO_ADDR
// PlaceHumanInUnit ( OmarMechs , OmarTanks ) ;
12353: LD_EXP 80
12357: PPUSH
12358: LD_EXP 79
12362: PPUSH
12363: CALL_OW 52
// end ;
12367: GO 12305
12369: POP
12370: POP
// for i = 1 to 6 do
12371: LD_ADDR_VAR 0 2
12375: PUSH
12376: DOUBLE
12377: LD_INT 1
12379: DEC
12380: ST_TO_ADDR
12381: LD_INT 6
12383: PUSH
12384: FOR_TO
12385: IFFALSE 12471
// begin vc_chassis = rand ( 13 , 14 ) ;
12387: LD_ADDR_OWVAR 37
12391: PUSH
12392: LD_INT 13
12394: PPUSH
12395: LD_INT 14
12397: PPUSH
12398: CALL_OW 12
12402: ST_TO_ADDR
// vc_control = 1 ;
12403: LD_ADDR_OWVAR 38
12407: PUSH
12408: LD_INT 1
12410: ST_TO_ADDR
// vc_engine = 1 ;
12411: LD_ADDR_OWVAR 39
12415: PUSH
12416: LD_INT 1
12418: ST_TO_ADDR
// vc_fuel_battery = 80 ;
12419: LD_ADDR_OWVAR 41
12423: PUSH
12424: LD_INT 80
12426: ST_TO_ADDR
// vc_weapon = rand ( 26 , 27 ) ;
12427: LD_ADDR_OWVAR 40
12431: PUSH
12432: LD_INT 26
12434: PPUSH
12435: LD_INT 27
12437: PPUSH
12438: CALL_OW 12
12442: ST_TO_ADDR
// OmarTanks = CreateVehicle ;
12443: LD_ADDR_EXP 79
12447: PUSH
12448: CALL_OW 45
12452: ST_TO_ADDR
// OmarCrew := OmarCrew ^ OmarTanks ;
12453: LD_ADDR_EXP 12
12457: PUSH
12458: LD_EXP 12
12462: PUSH
12463: LD_EXP 79
12467: ADD
12468: ST_TO_ADDR
// end ;
12469: GO 12384
12471: POP
12472: POP
// for i = 1 to 3 do
12473: LD_ADDR_VAR 0 2
12477: PUSH
12478: DOUBLE
12479: LD_INT 1
12481: DEC
12482: ST_TO_ADDR
12483: LD_INT 3
12485: PUSH
12486: FOR_TO
12487: IFFALSE 12542
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12489: LD_INT 0
12491: PPUSH
12492: LD_INT 1
12494: PPUSH
12495: CALL_OW 12
12499: PPUSH
12500: LD_INT 3
12502: PUSH
12503: LD_INT 5
12505: PUSH
12506: LD_INT 7
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: LIST
12513: PUSH
12514: LD_OWVAR 67
12518: ARRAY
12519: PPUSH
12520: CALL_OW 384
// OmarCrew := OmarCrew ^ CreateHuman ;
12524: LD_ADDR_EXP 12
12528: PUSH
12529: LD_EXP 12
12533: PUSH
12534: CALL_OW 44
12538: ADD
12539: ST_TO_ADDR
// end ;
12540: GO 12486
12542: POP
12543: POP
// PlaceUnitArea ( OmarCrew , OmarAttackArea , false ) ;
12544: LD_EXP 12
12548: PPUSH
12549: LD_INT 29
12551: PPUSH
12552: LD_INT 0
12554: PPUSH
12555: CALL_OW 49
// ComAgressiveMove ( OmarCrew , 333 , 236 ) ;
12559: LD_EXP 12
12563: PPUSH
12564: LD_INT 333
12566: PPUSH
12567: LD_INT 236
12569: PPUSH
12570: CALL_OW 114
// end ; end_of_file
12574: LD_VAR 0 1
12578: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12579: LD_INT 0
12581: PPUSH
// ar_miner := 81 ;
12582: LD_ADDR_EXP 89
12586: PUSH
12587: LD_INT 81
12589: ST_TO_ADDR
// ar_crane := 88 ;
12590: LD_ADDR_EXP 88
12594: PUSH
12595: LD_INT 88
12597: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12598: LD_ADDR_EXP 83
12602: PUSH
12603: LD_INT 89
12605: ST_TO_ADDR
// us_hack := 99 ;
12606: LD_ADDR_EXP 84
12610: PUSH
12611: LD_INT 99
12613: ST_TO_ADDR
// us_artillery := 97 ;
12614: LD_ADDR_EXP 85
12618: PUSH
12619: LD_INT 97
12621: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12622: LD_ADDR_EXP 86
12626: PUSH
12627: LD_INT 91
12629: ST_TO_ADDR
// ar_mortar := 92 ;
12630: LD_ADDR_EXP 87
12634: PUSH
12635: LD_INT 92
12637: ST_TO_ADDR
// ru_flamethrower := 93 ;
12638: LD_ADDR_EXP 90
12642: PUSH
12643: LD_INT 93
12645: ST_TO_ADDR
// ru_radar := 98 ;
12646: LD_ADDR_EXP 82
12650: PUSH
12651: LD_INT 98
12653: ST_TO_ADDR
// tech_Artillery := 80 ;
12654: LD_ADDR_EXP 91
12658: PUSH
12659: LD_INT 80
12661: ST_TO_ADDR
// tech_RadMat := 81 ;
12662: LD_ADDR_EXP 92
12666: PUSH
12667: LD_INT 81
12669: ST_TO_ADDR
// tech_BasicTools := 82 ;
12670: LD_ADDR_EXP 93
12674: PUSH
12675: LD_INT 82
12677: ST_TO_ADDR
// tech_Cargo := 83 ;
12678: LD_ADDR_EXP 94
12682: PUSH
12683: LD_INT 83
12685: ST_TO_ADDR
// tech_Track := 84 ;
12686: LD_ADDR_EXP 95
12690: PUSH
12691: LD_INT 84
12693: ST_TO_ADDR
// tech_Crane := 85 ;
12694: LD_ADDR_EXP 96
12698: PUSH
12699: LD_INT 85
12701: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12702: LD_ADDR_EXP 97
12706: PUSH
12707: LD_INT 86
12709: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12710: LD_ADDR_EXP 98
12714: PUSH
12715: LD_INT 87
12717: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12718: LD_ADDR_EXP 99
12722: PUSH
12723: LD_INT 88
12725: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
12726: LD_ADDR_EXP 100
12730: PUSH
12731: LD_INT 90
12733: ST_TO_ADDR
// class_mastodont := 31 ;
12734: LD_ADDR_EXP 101
12738: PUSH
12739: LD_INT 31
12741: ST_TO_ADDR
// class_horse := 21 ;
12742: LD_ADDR_EXP 102
12746: PUSH
12747: LD_INT 21
12749: ST_TO_ADDR
// end ; end_of_file
12750: LD_VAR 0 1
12754: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12755: LD_INT 0
12757: PPUSH
12758: PPUSH
// if exist_mode then
12759: LD_VAR 0 2
12763: IFFALSE 12788
// unit := CreateCharacter ( prefix & ident ) else
12765: LD_ADDR_VAR 0 5
12769: PUSH
12770: LD_VAR 0 3
12774: PUSH
12775: LD_VAR 0 1
12779: STR
12780: PPUSH
12781: CALL_OW 34
12785: ST_TO_ADDR
12786: GO 12803
// unit := NewCharacter ( ident ) ;
12788: LD_ADDR_VAR 0 5
12792: PUSH
12793: LD_VAR 0 1
12797: PPUSH
12798: CALL_OW 25
12802: ST_TO_ADDR
// result := unit ;
12803: LD_ADDR_VAR 0 4
12807: PUSH
12808: LD_VAR 0 5
12812: ST_TO_ADDR
// end ;
12813: LD_VAR 0 4
12817: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12818: LD_INT 0
12820: PPUSH
12821: PPUSH
// if not side or not nation then
12822: LD_VAR 0 1
12826: NOT
12827: PUSH
12828: LD_VAR 0 2
12832: NOT
12833: OR
12834: IFFALSE 12838
// exit ;
12836: GO 13606
// case nation of nation_american :
12838: LD_VAR 0 2
12842: PUSH
12843: LD_INT 1
12845: DOUBLE
12846: EQUAL
12847: IFTRUE 12851
12849: GO 13065
12851: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
12852: LD_ADDR_VAR 0 4
12856: PUSH
12857: LD_INT 35
12859: PUSH
12860: LD_INT 45
12862: PUSH
12863: LD_INT 46
12865: PUSH
12866: LD_INT 47
12868: PUSH
12869: LD_INT 82
12871: PUSH
12872: LD_INT 83
12874: PUSH
12875: LD_INT 84
12877: PUSH
12878: LD_INT 85
12880: PUSH
12881: LD_INT 86
12883: PUSH
12884: LD_INT 1
12886: PUSH
12887: LD_INT 2
12889: PUSH
12890: LD_INT 6
12892: PUSH
12893: LD_INT 15
12895: PUSH
12896: LD_INT 16
12898: PUSH
12899: LD_INT 7
12901: PUSH
12902: LD_INT 12
12904: PUSH
12905: LD_INT 13
12907: PUSH
12908: LD_INT 10
12910: PUSH
12911: LD_INT 14
12913: PUSH
12914: LD_INT 20
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 22
12922: PUSH
12923: LD_INT 25
12925: PUSH
12926: LD_INT 32
12928: PUSH
12929: LD_INT 27
12931: PUSH
12932: LD_INT 36
12934: PUSH
12935: LD_INT 69
12937: PUSH
12938: LD_INT 39
12940: PUSH
12941: LD_INT 34
12943: PUSH
12944: LD_INT 40
12946: PUSH
12947: LD_INT 48
12949: PUSH
12950: LD_INT 49
12952: PUSH
12953: LD_INT 50
12955: PUSH
12956: LD_INT 51
12958: PUSH
12959: LD_INT 52
12961: PUSH
12962: LD_INT 53
12964: PUSH
12965: LD_INT 54
12967: PUSH
12968: LD_INT 55
12970: PUSH
12971: LD_INT 56
12973: PUSH
12974: LD_INT 57
12976: PUSH
12977: LD_INT 58
12979: PUSH
12980: LD_INT 59
12982: PUSH
12983: LD_INT 60
12985: PUSH
12986: LD_INT 61
12988: PUSH
12989: LD_INT 62
12991: PUSH
12992: LD_INT 80
12994: PUSH
12995: LD_INT 82
12997: PUSH
12998: LD_INT 83
13000: PUSH
13001: LD_INT 84
13003: PUSH
13004: LD_INT 85
13006: PUSH
13007: LD_INT 86
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: ST_TO_ADDR
13063: GO 13530
13065: LD_INT 2
13067: DOUBLE
13068: EQUAL
13069: IFTRUE 13073
13071: GO 13299
13073: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
13074: LD_ADDR_VAR 0 4
13078: PUSH
13079: LD_INT 35
13081: PUSH
13082: LD_INT 45
13084: PUSH
13085: LD_INT 46
13087: PUSH
13088: LD_INT 47
13090: PUSH
13091: LD_INT 82
13093: PUSH
13094: LD_INT 83
13096: PUSH
13097: LD_INT 84
13099: PUSH
13100: LD_INT 85
13102: PUSH
13103: LD_INT 87
13105: PUSH
13106: LD_INT 70
13108: PUSH
13109: LD_INT 1
13111: PUSH
13112: LD_INT 11
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: LD_INT 4
13120: PUSH
13121: LD_INT 5
13123: PUSH
13124: LD_INT 6
13126: PUSH
13127: LD_INT 15
13129: PUSH
13130: LD_INT 18
13132: PUSH
13133: LD_INT 7
13135: PUSH
13136: LD_INT 17
13138: PUSH
13139: LD_INT 8
13141: PUSH
13142: LD_INT 20
13144: PUSH
13145: LD_INT 21
13147: PUSH
13148: LD_INT 22
13150: PUSH
13151: LD_INT 72
13153: PUSH
13154: LD_INT 26
13156: PUSH
13157: LD_INT 69
13159: PUSH
13160: LD_INT 39
13162: PUSH
13163: LD_INT 40
13165: PUSH
13166: LD_INT 41
13168: PUSH
13169: LD_INT 42
13171: PUSH
13172: LD_INT 43
13174: PUSH
13175: LD_INT 48
13177: PUSH
13178: LD_INT 49
13180: PUSH
13181: LD_INT 50
13183: PUSH
13184: LD_INT 51
13186: PUSH
13187: LD_INT 52
13189: PUSH
13190: LD_INT 53
13192: PUSH
13193: LD_INT 54
13195: PUSH
13196: LD_INT 55
13198: PUSH
13199: LD_INT 56
13201: PUSH
13202: LD_INT 60
13204: PUSH
13205: LD_INT 61
13207: PUSH
13208: LD_INT 62
13210: PUSH
13211: LD_INT 66
13213: PUSH
13214: LD_INT 67
13216: PUSH
13217: LD_INT 68
13219: PUSH
13220: LD_INT 81
13222: PUSH
13223: LD_INT 82
13225: PUSH
13226: LD_INT 83
13228: PUSH
13229: LD_INT 84
13231: PUSH
13232: LD_INT 85
13234: PUSH
13235: LD_INT 87
13237: PUSH
13238: LD_INT 88
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: ST_TO_ADDR
13297: GO 13530
13299: LD_INT 3
13301: DOUBLE
13302: EQUAL
13303: IFTRUE 13307
13305: GO 13529
13307: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
13308: LD_ADDR_VAR 0 4
13312: PUSH
13313: LD_INT 46
13315: PUSH
13316: LD_INT 47
13318: PUSH
13319: LD_INT 1
13321: PUSH
13322: LD_INT 2
13324: PUSH
13325: LD_INT 82
13327: PUSH
13328: LD_INT 83
13330: PUSH
13331: LD_INT 84
13333: PUSH
13334: LD_INT 85
13336: PUSH
13337: LD_INT 86
13339: PUSH
13340: LD_INT 11
13342: PUSH
13343: LD_INT 9
13345: PUSH
13346: LD_INT 20
13348: PUSH
13349: LD_INT 19
13351: PUSH
13352: LD_INT 21
13354: PUSH
13355: LD_INT 24
13357: PUSH
13358: LD_INT 22
13360: PUSH
13361: LD_INT 25
13363: PUSH
13364: LD_INT 28
13366: PUSH
13367: LD_INT 29
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 31
13375: PUSH
13376: LD_INT 37
13378: PUSH
13379: LD_INT 38
13381: PUSH
13382: LD_INT 32
13384: PUSH
13385: LD_INT 27
13387: PUSH
13388: LD_INT 33
13390: PUSH
13391: LD_INT 69
13393: PUSH
13394: LD_INT 39
13396: PUSH
13397: LD_INT 34
13399: PUSH
13400: LD_INT 40
13402: PUSH
13403: LD_INT 71
13405: PUSH
13406: LD_INT 23
13408: PUSH
13409: LD_INT 44
13411: PUSH
13412: LD_INT 48
13414: PUSH
13415: LD_INT 49
13417: PUSH
13418: LD_INT 50
13420: PUSH
13421: LD_INT 51
13423: PUSH
13424: LD_INT 52
13426: PUSH
13427: LD_INT 53
13429: PUSH
13430: LD_INT 54
13432: PUSH
13433: LD_INT 55
13435: PUSH
13436: LD_INT 56
13438: PUSH
13439: LD_INT 57
13441: PUSH
13442: LD_INT 58
13444: PUSH
13445: LD_INT 59
13447: PUSH
13448: LD_INT 63
13450: PUSH
13451: LD_INT 64
13453: PUSH
13454: LD_INT 65
13456: PUSH
13457: LD_INT 82
13459: PUSH
13460: LD_INT 83
13462: PUSH
13463: LD_INT 84
13465: PUSH
13466: LD_INT 85
13468: PUSH
13469: LD_INT 86
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: ST_TO_ADDR
13527: GO 13530
13529: POP
// if state > - 1 and state < 3 then
13530: LD_VAR 0 3
13534: PUSH
13535: LD_INT 1
13537: NEG
13538: GREATER
13539: PUSH
13540: LD_VAR 0 3
13544: PUSH
13545: LD_INT 3
13547: LESS
13548: AND
13549: IFFALSE 13606
// for i in result do
13551: LD_ADDR_VAR 0 5
13555: PUSH
13556: LD_VAR 0 4
13560: PUSH
13561: FOR_IN
13562: IFFALSE 13604
// if GetTech ( i , side ) <> state then
13564: LD_VAR 0 5
13568: PPUSH
13569: LD_VAR 0 1
13573: PPUSH
13574: CALL_OW 321
13578: PUSH
13579: LD_VAR 0 3
13583: NONEQUAL
13584: IFFALSE 13602
// result := result diff i ;
13586: LD_ADDR_VAR 0 4
13590: PUSH
13591: LD_VAR 0 4
13595: PUSH
13596: LD_VAR 0 5
13600: DIFF
13601: ST_TO_ADDR
13602: GO 13561
13604: POP
13605: POP
// end ;
13606: LD_VAR 0 4
13610: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13611: LD_INT 0
13613: PPUSH
13614: PPUSH
13615: PPUSH
// result := true ;
13616: LD_ADDR_VAR 0 3
13620: PUSH
13621: LD_INT 1
13623: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13624: LD_ADDR_VAR 0 5
13628: PUSH
13629: LD_VAR 0 2
13633: PPUSH
13634: CALL_OW 480
13638: ST_TO_ADDR
// if not tmp then
13639: LD_VAR 0 5
13643: NOT
13644: IFFALSE 13648
// exit ;
13646: GO 13697
// for i in tmp do
13648: LD_ADDR_VAR 0 4
13652: PUSH
13653: LD_VAR 0 5
13657: PUSH
13658: FOR_IN
13659: IFFALSE 13695
// if GetTech ( i , side ) <> state_researched then
13661: LD_VAR 0 4
13665: PPUSH
13666: LD_VAR 0 1
13670: PPUSH
13671: CALL_OW 321
13675: PUSH
13676: LD_INT 2
13678: NONEQUAL
13679: IFFALSE 13693
// begin result := false ;
13681: LD_ADDR_VAR 0 3
13685: PUSH
13686: LD_INT 0
13688: ST_TO_ADDR
// exit ;
13689: POP
13690: POP
13691: GO 13697
// end ;
13693: GO 13658
13695: POP
13696: POP
// end ;
13697: LD_VAR 0 3
13701: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13702: LD_INT 0
13704: PPUSH
13705: PPUSH
13706: PPUSH
13707: PPUSH
13708: PPUSH
13709: PPUSH
13710: PPUSH
13711: PPUSH
13712: PPUSH
13713: PPUSH
13714: PPUSH
13715: PPUSH
13716: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13717: LD_VAR 0 1
13721: NOT
13722: PUSH
13723: LD_VAR 0 1
13727: PPUSH
13728: CALL_OW 257
13732: PUSH
13733: LD_INT 9
13735: NONEQUAL
13736: OR
13737: IFFALSE 13741
// exit ;
13739: GO 14314
// side := GetSide ( unit ) ;
13741: LD_ADDR_VAR 0 9
13745: PUSH
13746: LD_VAR 0 1
13750: PPUSH
13751: CALL_OW 255
13755: ST_TO_ADDR
// tech_space := tech_spacanom ;
13756: LD_ADDR_VAR 0 12
13760: PUSH
13761: LD_INT 29
13763: ST_TO_ADDR
// tech_time := tech_taurad ;
13764: LD_ADDR_VAR 0 13
13768: PUSH
13769: LD_INT 28
13771: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13772: LD_ADDR_VAR 0 11
13776: PUSH
13777: LD_VAR 0 1
13781: PPUSH
13782: CALL_OW 310
13786: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13787: LD_VAR 0 11
13791: PPUSH
13792: CALL_OW 247
13796: PUSH
13797: LD_INT 2
13799: EQUAL
13800: IFFALSE 13804
// exit ;
13802: GO 14314
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13804: LD_ADDR_VAR 0 8
13808: PUSH
13809: LD_INT 81
13811: PUSH
13812: LD_VAR 0 9
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 3
13823: PUSH
13824: LD_INT 21
13826: PUSH
13827: LD_INT 3
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PPUSH
13842: CALL_OW 69
13846: ST_TO_ADDR
// if not tmp then
13847: LD_VAR 0 8
13851: NOT
13852: IFFALSE 13856
// exit ;
13854: GO 14314
// if in_unit then
13856: LD_VAR 0 11
13860: IFFALSE 13884
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13862: LD_ADDR_VAR 0 10
13866: PUSH
13867: LD_VAR 0 8
13871: PPUSH
13872: LD_VAR 0 11
13876: PPUSH
13877: CALL_OW 74
13881: ST_TO_ADDR
13882: GO 13904
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13884: LD_ADDR_VAR 0 10
13888: PUSH
13889: LD_VAR 0 8
13893: PPUSH
13894: LD_VAR 0 1
13898: PPUSH
13899: CALL_OW 74
13903: ST_TO_ADDR
// if not enemy then
13904: LD_VAR 0 10
13908: NOT
13909: IFFALSE 13913
// exit ;
13911: GO 14314
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13913: LD_VAR 0 11
13917: PUSH
13918: LD_VAR 0 11
13922: PPUSH
13923: LD_VAR 0 10
13927: PPUSH
13928: CALL_OW 296
13932: PUSH
13933: LD_INT 13
13935: GREATER
13936: AND
13937: PUSH
13938: LD_VAR 0 1
13942: PPUSH
13943: LD_VAR 0 10
13947: PPUSH
13948: CALL_OW 296
13952: PUSH
13953: LD_INT 12
13955: GREATER
13956: OR
13957: IFFALSE 13961
// exit ;
13959: GO 14314
// missile := [ 1 ] ;
13961: LD_ADDR_VAR 0 14
13965: PUSH
13966: LD_INT 1
13968: PUSH
13969: EMPTY
13970: LIST
13971: ST_TO_ADDR
// if Researched ( side , tech_space ) then
13972: LD_VAR 0 9
13976: PPUSH
13977: LD_VAR 0 12
13981: PPUSH
13982: CALL_OW 325
13986: IFFALSE 14015
// missile := Replace ( missile , missile + 1 , 2 ) ;
13988: LD_ADDR_VAR 0 14
13992: PUSH
13993: LD_VAR 0 14
13997: PPUSH
13998: LD_VAR 0 14
14002: PUSH
14003: LD_INT 1
14005: PLUS
14006: PPUSH
14007: LD_INT 2
14009: PPUSH
14010: CALL_OW 1
14014: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14015: LD_VAR 0 9
14019: PPUSH
14020: LD_VAR 0 13
14024: PPUSH
14025: CALL_OW 325
14029: PUSH
14030: LD_VAR 0 10
14034: PPUSH
14035: CALL_OW 255
14039: PPUSH
14040: LD_VAR 0 13
14044: PPUSH
14045: CALL_OW 325
14049: NOT
14050: AND
14051: IFFALSE 14080
// missile := Replace ( missile , missile + 1 , 3 ) ;
14053: LD_ADDR_VAR 0 14
14057: PUSH
14058: LD_VAR 0 14
14062: PPUSH
14063: LD_VAR 0 14
14067: PUSH
14068: LD_INT 1
14070: PLUS
14071: PPUSH
14072: LD_INT 3
14074: PPUSH
14075: CALL_OW 1
14079: ST_TO_ADDR
// if missile < 2 then
14080: LD_VAR 0 14
14084: PUSH
14085: LD_INT 2
14087: LESS
14088: IFFALSE 14092
// exit ;
14090: GO 14314
// x := GetX ( enemy ) ;
14092: LD_ADDR_VAR 0 4
14096: PUSH
14097: LD_VAR 0 10
14101: PPUSH
14102: CALL_OW 250
14106: ST_TO_ADDR
// y := GetY ( enemy ) ;
14107: LD_ADDR_VAR 0 5
14111: PUSH
14112: LD_VAR 0 10
14116: PPUSH
14117: CALL_OW 251
14121: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14122: LD_ADDR_VAR 0 6
14126: PUSH
14127: LD_VAR 0 4
14131: PUSH
14132: LD_INT 1
14134: NEG
14135: PPUSH
14136: LD_INT 1
14138: PPUSH
14139: CALL_OW 12
14143: PLUS
14144: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14145: LD_ADDR_VAR 0 7
14149: PUSH
14150: LD_VAR 0 5
14154: PUSH
14155: LD_INT 1
14157: NEG
14158: PPUSH
14159: LD_INT 1
14161: PPUSH
14162: CALL_OW 12
14166: PLUS
14167: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14168: LD_VAR 0 6
14172: PPUSH
14173: LD_VAR 0 7
14177: PPUSH
14178: CALL_OW 488
14182: NOT
14183: IFFALSE 14205
// begin _x := x ;
14185: LD_ADDR_VAR 0 6
14189: PUSH
14190: LD_VAR 0 4
14194: ST_TO_ADDR
// _y := y ;
14195: LD_ADDR_VAR 0 7
14199: PUSH
14200: LD_VAR 0 5
14204: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14205: LD_ADDR_VAR 0 3
14209: PUSH
14210: LD_INT 1
14212: PPUSH
14213: LD_VAR 0 14
14217: PPUSH
14218: CALL_OW 12
14222: ST_TO_ADDR
// case i of 1 :
14223: LD_VAR 0 3
14227: PUSH
14228: LD_INT 1
14230: DOUBLE
14231: EQUAL
14232: IFTRUE 14236
14234: GO 14253
14236: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14237: LD_VAR 0 1
14241: PPUSH
14242: LD_VAR 0 10
14246: PPUSH
14247: CALL_OW 115
14251: GO 14314
14253: LD_INT 2
14255: DOUBLE
14256: EQUAL
14257: IFTRUE 14261
14259: GO 14283
14261: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14262: LD_VAR 0 1
14266: PPUSH
14267: LD_VAR 0 6
14271: PPUSH
14272: LD_VAR 0 7
14276: PPUSH
14277: CALL_OW 153
14281: GO 14314
14283: LD_INT 3
14285: DOUBLE
14286: EQUAL
14287: IFTRUE 14291
14289: GO 14313
14291: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14292: LD_VAR 0 1
14296: PPUSH
14297: LD_VAR 0 6
14301: PPUSH
14302: LD_VAR 0 7
14306: PPUSH
14307: CALL_OW 154
14311: GO 14314
14313: POP
// end ;
14314: LD_VAR 0 2
14318: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14319: LD_INT 0
14321: PPUSH
14322: PPUSH
14323: PPUSH
14324: PPUSH
14325: PPUSH
14326: PPUSH
// if not unit or not building then
14327: LD_VAR 0 1
14331: NOT
14332: PUSH
14333: LD_VAR 0 2
14337: NOT
14338: OR
14339: IFFALSE 14343
// exit ;
14341: GO 14501
// x := GetX ( building ) ;
14343: LD_ADDR_VAR 0 5
14347: PUSH
14348: LD_VAR 0 2
14352: PPUSH
14353: CALL_OW 250
14357: ST_TO_ADDR
// y := GetY ( building ) ;
14358: LD_ADDR_VAR 0 6
14362: PUSH
14363: LD_VAR 0 2
14367: PPUSH
14368: CALL_OW 251
14372: ST_TO_ADDR
// for i = 0 to 5 do
14373: LD_ADDR_VAR 0 4
14377: PUSH
14378: DOUBLE
14379: LD_INT 0
14381: DEC
14382: ST_TO_ADDR
14383: LD_INT 5
14385: PUSH
14386: FOR_TO
14387: IFFALSE 14499
// begin _x := ShiftX ( x , i , 3 ) ;
14389: LD_ADDR_VAR 0 7
14393: PUSH
14394: LD_VAR 0 5
14398: PPUSH
14399: LD_VAR 0 4
14403: PPUSH
14404: LD_INT 3
14406: PPUSH
14407: CALL_OW 272
14411: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14412: LD_ADDR_VAR 0 8
14416: PUSH
14417: LD_VAR 0 6
14421: PPUSH
14422: LD_VAR 0 4
14426: PPUSH
14427: LD_INT 3
14429: PPUSH
14430: CALL_OW 273
14434: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14435: LD_VAR 0 7
14439: PPUSH
14440: LD_VAR 0 8
14444: PPUSH
14445: CALL_OW 488
14449: NOT
14450: IFFALSE 14454
// continue ;
14452: GO 14386
// if HexInfo ( _x , _y ) = 0 then
14454: LD_VAR 0 7
14458: PPUSH
14459: LD_VAR 0 8
14463: PPUSH
14464: CALL_OW 428
14468: PUSH
14469: LD_INT 0
14471: EQUAL
14472: IFFALSE 14497
// begin ComMoveXY ( unit , _x , _y ) ;
14474: LD_VAR 0 1
14478: PPUSH
14479: LD_VAR 0 7
14483: PPUSH
14484: LD_VAR 0 8
14488: PPUSH
14489: CALL_OW 111
// exit ;
14493: POP
14494: POP
14495: GO 14501
// end ; end ;
14497: GO 14386
14499: POP
14500: POP
// end ;
14501: LD_VAR 0 3
14505: RET
// export function ScanBase ( side , base_area ) ; begin
14506: LD_INT 0
14508: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14509: LD_ADDR_VAR 0 3
14513: PUSH
14514: LD_VAR 0 2
14518: PPUSH
14519: LD_INT 81
14521: PUSH
14522: LD_VAR 0 1
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PPUSH
14531: CALL_OW 70
14535: ST_TO_ADDR
// end ;
14536: LD_VAR 0 3
14540: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14541: LD_INT 0
14543: PPUSH
14544: PPUSH
14545: PPUSH
14546: PPUSH
// result := false ;
14547: LD_ADDR_VAR 0 2
14551: PUSH
14552: LD_INT 0
14554: ST_TO_ADDR
// side := GetSide ( unit ) ;
14555: LD_ADDR_VAR 0 3
14559: PUSH
14560: LD_VAR 0 1
14564: PPUSH
14565: CALL_OW 255
14569: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14570: LD_ADDR_VAR 0 4
14574: PUSH
14575: LD_VAR 0 1
14579: PPUSH
14580: CALL_OW 248
14584: ST_TO_ADDR
// case nat of 1 :
14585: LD_VAR 0 4
14589: PUSH
14590: LD_INT 1
14592: DOUBLE
14593: EQUAL
14594: IFTRUE 14598
14596: GO 14609
14598: POP
// tech := tech_lassight ; 2 :
14599: LD_ADDR_VAR 0 5
14603: PUSH
14604: LD_INT 12
14606: ST_TO_ADDR
14607: GO 14648
14609: LD_INT 2
14611: DOUBLE
14612: EQUAL
14613: IFTRUE 14617
14615: GO 14628
14617: POP
// tech := tech_mortar ; 3 :
14618: LD_ADDR_VAR 0 5
14622: PUSH
14623: LD_INT 41
14625: ST_TO_ADDR
14626: GO 14648
14628: LD_INT 3
14630: DOUBLE
14631: EQUAL
14632: IFTRUE 14636
14634: GO 14647
14636: POP
// tech := tech_bazooka ; end ;
14637: LD_ADDR_VAR 0 5
14641: PUSH
14642: LD_INT 44
14644: ST_TO_ADDR
14645: GO 14648
14647: POP
// if Researched ( side , tech ) then
14648: LD_VAR 0 3
14652: PPUSH
14653: LD_VAR 0 5
14657: PPUSH
14658: CALL_OW 325
14662: IFFALSE 14689
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14664: LD_ADDR_VAR 0 2
14668: PUSH
14669: LD_INT 5
14671: PUSH
14672: LD_INT 8
14674: PUSH
14675: LD_INT 9
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: LIST
14682: PUSH
14683: LD_VAR 0 4
14687: ARRAY
14688: ST_TO_ADDR
// end ;
14689: LD_VAR 0 2
14693: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14694: LD_INT 0
14696: PPUSH
14697: PPUSH
14698: PPUSH
// if not mines then
14699: LD_VAR 0 2
14703: NOT
14704: IFFALSE 14708
// exit ;
14706: GO 14852
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14708: LD_ADDR_VAR 0 5
14712: PUSH
14713: LD_INT 81
14715: PUSH
14716: LD_VAR 0 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 3
14727: PUSH
14728: LD_INT 21
14730: PUSH
14731: LD_INT 3
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PPUSH
14746: CALL_OW 69
14750: ST_TO_ADDR
// for i in mines do
14751: LD_ADDR_VAR 0 4
14755: PUSH
14756: LD_VAR 0 2
14760: PUSH
14761: FOR_IN
14762: IFFALSE 14850
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14764: LD_VAR 0 4
14768: PUSH
14769: LD_INT 1
14771: ARRAY
14772: PPUSH
14773: LD_VAR 0 4
14777: PUSH
14778: LD_INT 2
14780: ARRAY
14781: PPUSH
14782: CALL_OW 458
14786: NOT
14787: IFFALSE 14791
// continue ;
14789: GO 14761
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14791: LD_VAR 0 4
14795: PUSH
14796: LD_INT 1
14798: ARRAY
14799: PPUSH
14800: LD_VAR 0 4
14804: PUSH
14805: LD_INT 2
14807: ARRAY
14808: PPUSH
14809: CALL_OW 428
14813: PUSH
14814: LD_VAR 0 5
14818: IN
14819: IFFALSE 14848
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14821: LD_VAR 0 4
14825: PUSH
14826: LD_INT 1
14828: ARRAY
14829: PPUSH
14830: LD_VAR 0 4
14834: PUSH
14835: LD_INT 2
14837: ARRAY
14838: PPUSH
14839: LD_VAR 0 1
14843: PPUSH
14844: CALL_OW 456
// end ;
14848: GO 14761
14850: POP
14851: POP
// end ;
14852: LD_VAR 0 3
14856: RET
// export function Count ( array ) ; var i ; begin
14857: LD_INT 0
14859: PPUSH
14860: PPUSH
// result := 0 ;
14861: LD_ADDR_VAR 0 2
14865: PUSH
14866: LD_INT 0
14868: ST_TO_ADDR
// for i in array do
14869: LD_ADDR_VAR 0 3
14873: PUSH
14874: LD_VAR 0 1
14878: PUSH
14879: FOR_IN
14880: IFFALSE 14904
// if i then
14882: LD_VAR 0 3
14886: IFFALSE 14902
// result := result + 1 ;
14888: LD_ADDR_VAR 0 2
14892: PUSH
14893: LD_VAR 0 2
14897: PUSH
14898: LD_INT 1
14900: PLUS
14901: ST_TO_ADDR
14902: GO 14879
14904: POP
14905: POP
// end ;
14906: LD_VAR 0 2
14910: RET
// export function IsEmpty ( building ) ; begin
14911: LD_INT 0
14913: PPUSH
// if not building then
14914: LD_VAR 0 1
14918: NOT
14919: IFFALSE 14923
// exit ;
14921: GO 14966
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14923: LD_ADDR_VAR 0 2
14927: PUSH
14928: LD_VAR 0 1
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_VAR 0 1
14940: PPUSH
14941: CALL_OW 255
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 58
14952: PUSH
14953: EMPTY
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 69
14964: IN
14965: ST_TO_ADDR
// end ;
14966: LD_VAR 0 2
14970: RET
// export function IsNotFull ( building ) ; begin
14971: LD_INT 0
14973: PPUSH
// if not building then
14974: LD_VAR 0 1
14978: NOT
14979: IFFALSE 14983
// exit ;
14981: GO 15002
// result := UnitsInside ( building ) < 6 ;
14983: LD_ADDR_VAR 0 2
14987: PUSH
14988: LD_VAR 0 1
14992: PPUSH
14993: CALL_OW 313
14997: PUSH
14998: LD_INT 6
15000: LESS
15001: ST_TO_ADDR
// end ;
15002: LD_VAR 0 2
15006: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15007: LD_INT 0
15009: PPUSH
15010: PPUSH
15011: PPUSH
15012: PPUSH
// tmp := [ ] ;
15013: LD_ADDR_VAR 0 3
15017: PUSH
15018: EMPTY
15019: ST_TO_ADDR
// list := [ ] ;
15020: LD_ADDR_VAR 0 5
15024: PUSH
15025: EMPTY
15026: ST_TO_ADDR
// for i = 16 to 25 do
15027: LD_ADDR_VAR 0 4
15031: PUSH
15032: DOUBLE
15033: LD_INT 16
15035: DEC
15036: ST_TO_ADDR
15037: LD_INT 25
15039: PUSH
15040: FOR_TO
15041: IFFALSE 15114
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15043: LD_ADDR_VAR 0 3
15047: PUSH
15048: LD_VAR 0 3
15052: PUSH
15053: LD_INT 22
15055: PUSH
15056: LD_VAR 0 1
15060: PPUSH
15061: CALL_OW 255
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 91
15072: PUSH
15073: LD_VAR 0 1
15077: PUSH
15078: LD_INT 6
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: LIST
15085: PUSH
15086: LD_INT 30
15088: PUSH
15089: LD_VAR 0 4
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: PUSH
15103: EMPTY
15104: LIST
15105: PPUSH
15106: CALL_OW 69
15110: ADD
15111: ST_TO_ADDR
15112: GO 15040
15114: POP
15115: POP
// for i = 1 to tmp do
15116: LD_ADDR_VAR 0 4
15120: PUSH
15121: DOUBLE
15122: LD_INT 1
15124: DEC
15125: ST_TO_ADDR
15126: LD_VAR 0 3
15130: PUSH
15131: FOR_TO
15132: IFFALSE 15220
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15134: LD_ADDR_VAR 0 5
15138: PUSH
15139: LD_VAR 0 5
15143: PUSH
15144: LD_VAR 0 3
15148: PUSH
15149: LD_VAR 0 4
15153: ARRAY
15154: PPUSH
15155: CALL_OW 266
15159: PUSH
15160: LD_VAR 0 3
15164: PUSH
15165: LD_VAR 0 4
15169: ARRAY
15170: PPUSH
15171: CALL_OW 250
15175: PUSH
15176: LD_VAR 0 3
15180: PUSH
15181: LD_VAR 0 4
15185: ARRAY
15186: PPUSH
15187: CALL_OW 251
15191: PUSH
15192: LD_VAR 0 3
15196: PUSH
15197: LD_VAR 0 4
15201: ARRAY
15202: PPUSH
15203: CALL_OW 254
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: ADD
15217: ST_TO_ADDR
15218: GO 15131
15220: POP
15221: POP
// result := list ;
15222: LD_ADDR_VAR 0 2
15226: PUSH
15227: LD_VAR 0 5
15231: ST_TO_ADDR
// end ;
15232: LD_VAR 0 2
15236: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15237: LD_INT 0
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
// if not factory then
15246: LD_VAR 0 1
15250: NOT
15251: IFFALSE 15255
// exit ;
15253: GO 15848
// if control = control_apeman then
15255: LD_VAR 0 4
15259: PUSH
15260: LD_INT 5
15262: EQUAL
15263: IFFALSE 15372
// begin tmp := UnitsInside ( factory ) ;
15265: LD_ADDR_VAR 0 8
15269: PUSH
15270: LD_VAR 0 1
15274: PPUSH
15275: CALL_OW 313
15279: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15280: LD_VAR 0 8
15284: PPUSH
15285: LD_INT 25
15287: PUSH
15288: LD_INT 12
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PPUSH
15295: CALL_OW 72
15299: NOT
15300: IFFALSE 15310
// control := control_manual ;
15302: LD_ADDR_VAR 0 4
15306: PUSH
15307: LD_INT 1
15309: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15310: LD_ADDR_VAR 0 8
15314: PUSH
15315: LD_VAR 0 1
15319: PPUSH
15320: CALL 15007 0 1
15324: ST_TO_ADDR
// if tmp then
15325: LD_VAR 0 8
15329: IFFALSE 15372
// begin for i in tmp do
15331: LD_ADDR_VAR 0 7
15335: PUSH
15336: LD_VAR 0 8
15340: PUSH
15341: FOR_IN
15342: IFFALSE 15370
// if i [ 1 ] = b_ext_radio then
15344: LD_VAR 0 7
15348: PUSH
15349: LD_INT 1
15351: ARRAY
15352: PUSH
15353: LD_INT 22
15355: EQUAL
15356: IFFALSE 15368
// begin control := control_remote ;
15358: LD_ADDR_VAR 0 4
15362: PUSH
15363: LD_INT 2
15365: ST_TO_ADDR
// break ;
15366: GO 15370
// end ;
15368: GO 15341
15370: POP
15371: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15372: LD_VAR 0 1
15376: PPUSH
15377: LD_VAR 0 2
15381: PPUSH
15382: LD_VAR 0 3
15386: PPUSH
15387: LD_VAR 0 4
15391: PPUSH
15392: LD_VAR 0 5
15396: PPUSH
15397: CALL_OW 448
15401: IFFALSE 15436
// begin result := [ chassis , engine , control , weapon ] ;
15403: LD_ADDR_VAR 0 6
15407: PUSH
15408: LD_VAR 0 2
15412: PUSH
15413: LD_VAR 0 3
15417: PUSH
15418: LD_VAR 0 4
15422: PUSH
15423: LD_VAR 0 5
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: ST_TO_ADDR
// exit ;
15434: GO 15848
// end ; _chassis := AvailableChassisList ( factory ) ;
15436: LD_ADDR_VAR 0 9
15440: PUSH
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 475
15450: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15451: LD_ADDR_VAR 0 11
15455: PUSH
15456: LD_VAR 0 1
15460: PPUSH
15461: CALL_OW 476
15465: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15466: LD_ADDR_VAR 0 12
15470: PUSH
15471: LD_VAR 0 1
15475: PPUSH
15476: CALL_OW 477
15480: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15481: LD_ADDR_VAR 0 10
15485: PUSH
15486: LD_VAR 0 1
15490: PPUSH
15491: CALL_OW 478
15495: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15496: LD_VAR 0 9
15500: NOT
15501: PUSH
15502: LD_VAR 0 11
15506: NOT
15507: OR
15508: PUSH
15509: LD_VAR 0 12
15513: NOT
15514: OR
15515: PUSH
15516: LD_VAR 0 10
15520: NOT
15521: OR
15522: IFFALSE 15557
// begin result := [ chassis , engine , control , weapon ] ;
15524: LD_ADDR_VAR 0 6
15528: PUSH
15529: LD_VAR 0 2
15533: PUSH
15534: LD_VAR 0 3
15538: PUSH
15539: LD_VAR 0 4
15543: PUSH
15544: LD_VAR 0 5
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: ST_TO_ADDR
// exit ;
15555: GO 15848
// end ; if not chassis in _chassis then
15557: LD_VAR 0 2
15561: PUSH
15562: LD_VAR 0 9
15566: IN
15567: NOT
15568: IFFALSE 15594
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15570: LD_ADDR_VAR 0 2
15574: PUSH
15575: LD_VAR 0 9
15579: PUSH
15580: LD_INT 1
15582: PPUSH
15583: LD_VAR 0 9
15587: PPUSH
15588: CALL_OW 12
15592: ARRAY
15593: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15594: LD_VAR 0 2
15598: PPUSH
15599: LD_VAR 0 3
15603: PPUSH
15604: CALL 15853 0 2
15608: NOT
15609: IFFALSE 15668
// repeat engine := _engine [ 1 ] ;
15611: LD_ADDR_VAR 0 3
15615: PUSH
15616: LD_VAR 0 11
15620: PUSH
15621: LD_INT 1
15623: ARRAY
15624: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15625: LD_ADDR_VAR 0 11
15629: PUSH
15630: LD_VAR 0 11
15634: PPUSH
15635: LD_INT 1
15637: PPUSH
15638: CALL_OW 3
15642: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15643: LD_VAR 0 2
15647: PPUSH
15648: LD_VAR 0 3
15652: PPUSH
15653: CALL 15853 0 2
15657: PUSH
15658: LD_VAR 0 11
15662: PUSH
15663: EMPTY
15664: EQUAL
15665: OR
15666: IFFALSE 15611
// if not control in _control then
15668: LD_VAR 0 4
15672: PUSH
15673: LD_VAR 0 12
15677: IN
15678: NOT
15679: IFFALSE 15705
// control := _control [ rand ( 1 , _control ) ] ;
15681: LD_ADDR_VAR 0 4
15685: PUSH
15686: LD_VAR 0 12
15690: PUSH
15691: LD_INT 1
15693: PPUSH
15694: LD_VAR 0 12
15698: PPUSH
15699: CALL_OW 12
15703: ARRAY
15704: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15705: LD_VAR 0 2
15709: PPUSH
15710: LD_VAR 0 5
15714: PPUSH
15715: CALL 16073 0 2
15719: NOT
15720: IFFALSE 15779
// repeat weapon := _weapon [ 1 ] ;
15722: LD_ADDR_VAR 0 5
15726: PUSH
15727: LD_VAR 0 10
15731: PUSH
15732: LD_INT 1
15734: ARRAY
15735: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15736: LD_ADDR_VAR 0 10
15740: PUSH
15741: LD_VAR 0 10
15745: PPUSH
15746: LD_INT 1
15748: PPUSH
15749: CALL_OW 3
15753: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15754: LD_VAR 0 2
15758: PPUSH
15759: LD_VAR 0 5
15763: PPUSH
15764: CALL 16073 0 2
15768: PUSH
15769: LD_VAR 0 10
15773: PUSH
15774: EMPTY
15775: EQUAL
15776: OR
15777: IFFALSE 15722
// result := [ ] ;
15779: LD_ADDR_VAR 0 6
15783: PUSH
15784: EMPTY
15785: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15786: LD_VAR 0 1
15790: PPUSH
15791: LD_VAR 0 2
15795: PPUSH
15796: LD_VAR 0 3
15800: PPUSH
15801: LD_VAR 0 4
15805: PPUSH
15806: LD_VAR 0 5
15810: PPUSH
15811: CALL_OW 448
15815: IFFALSE 15848
// result := [ chassis , engine , control , weapon ] ;
15817: LD_ADDR_VAR 0 6
15821: PUSH
15822: LD_VAR 0 2
15826: PUSH
15827: LD_VAR 0 3
15831: PUSH
15832: LD_VAR 0 4
15836: PUSH
15837: LD_VAR 0 5
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: ST_TO_ADDR
// end ;
15848: LD_VAR 0 6
15852: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15853: LD_INT 0
15855: PPUSH
// if not chassis or not engine then
15856: LD_VAR 0 1
15860: NOT
15861: PUSH
15862: LD_VAR 0 2
15866: NOT
15867: OR
15868: IFFALSE 15872
// exit ;
15870: GO 16068
// case engine of engine_solar :
15872: LD_VAR 0 2
15876: PUSH
15877: LD_INT 2
15879: DOUBLE
15880: EQUAL
15881: IFTRUE 15885
15883: GO 15923
15885: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15886: LD_ADDR_VAR 0 3
15890: PUSH
15891: LD_INT 11
15893: PUSH
15894: LD_INT 12
15896: PUSH
15897: LD_INT 13
15899: PUSH
15900: LD_INT 14
15902: PUSH
15903: LD_INT 1
15905: PUSH
15906: LD_INT 2
15908: PUSH
15909: LD_INT 3
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: ST_TO_ADDR
15921: GO 16052
15923: LD_INT 1
15925: DOUBLE
15926: EQUAL
15927: IFTRUE 15931
15929: GO 15993
15931: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15932: LD_ADDR_VAR 0 3
15936: PUSH
15937: LD_INT 11
15939: PUSH
15940: LD_INT 12
15942: PUSH
15943: LD_INT 13
15945: PUSH
15946: LD_INT 14
15948: PUSH
15949: LD_INT 1
15951: PUSH
15952: LD_INT 2
15954: PUSH
15955: LD_INT 3
15957: PUSH
15958: LD_INT 4
15960: PUSH
15961: LD_INT 5
15963: PUSH
15964: LD_INT 21
15966: PUSH
15967: LD_INT 23
15969: PUSH
15970: LD_INT 22
15972: PUSH
15973: LD_INT 24
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: ST_TO_ADDR
15991: GO 16052
15993: LD_INT 3
15995: DOUBLE
15996: EQUAL
15997: IFTRUE 16001
15999: GO 16051
16001: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16002: LD_ADDR_VAR 0 3
16006: PUSH
16007: LD_INT 13
16009: PUSH
16010: LD_INT 14
16012: PUSH
16013: LD_INT 2
16015: PUSH
16016: LD_INT 3
16018: PUSH
16019: LD_INT 4
16021: PUSH
16022: LD_INT 5
16024: PUSH
16025: LD_INT 21
16027: PUSH
16028: LD_INT 22
16030: PUSH
16031: LD_INT 23
16033: PUSH
16034: LD_INT 24
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: ST_TO_ADDR
16049: GO 16052
16051: POP
// result := ( chassis in result ) ;
16052: LD_ADDR_VAR 0 3
16056: PUSH
16057: LD_VAR 0 1
16061: PUSH
16062: LD_VAR 0 3
16066: IN
16067: ST_TO_ADDR
// end ;
16068: LD_VAR 0 3
16072: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16073: LD_INT 0
16075: PPUSH
// if not chassis or not weapon then
16076: LD_VAR 0 1
16080: NOT
16081: PUSH
16082: LD_VAR 0 2
16086: NOT
16087: OR
16088: IFFALSE 16092
// exit ;
16090: GO 17154
// case weapon of us_machine_gun :
16092: LD_VAR 0 2
16096: PUSH
16097: LD_INT 2
16099: DOUBLE
16100: EQUAL
16101: IFTRUE 16105
16103: GO 16135
16105: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16106: LD_ADDR_VAR 0 3
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: LD_INT 2
16116: PUSH
16117: LD_INT 3
16119: PUSH
16120: LD_INT 4
16122: PUSH
16123: LD_INT 5
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: ST_TO_ADDR
16133: GO 17138
16135: LD_INT 3
16137: DOUBLE
16138: EQUAL
16139: IFTRUE 16143
16141: GO 16173
16143: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16144: LD_ADDR_VAR 0 3
16148: PUSH
16149: LD_INT 1
16151: PUSH
16152: LD_INT 2
16154: PUSH
16155: LD_INT 3
16157: PUSH
16158: LD_INT 4
16160: PUSH
16161: LD_INT 5
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: ST_TO_ADDR
16171: GO 17138
16173: LD_INT 11
16175: DOUBLE
16176: EQUAL
16177: IFTRUE 16181
16179: GO 16211
16181: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: LD_INT 1
16189: PUSH
16190: LD_INT 2
16192: PUSH
16193: LD_INT 3
16195: PUSH
16196: LD_INT 4
16198: PUSH
16199: LD_INT 5
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: ST_TO_ADDR
16209: GO 17138
16211: LD_INT 4
16213: DOUBLE
16214: EQUAL
16215: IFTRUE 16219
16217: GO 16245
16219: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16220: LD_ADDR_VAR 0 3
16224: PUSH
16225: LD_INT 2
16227: PUSH
16228: LD_INT 3
16230: PUSH
16231: LD_INT 4
16233: PUSH
16234: LD_INT 5
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: ST_TO_ADDR
16243: GO 17138
16245: LD_INT 5
16247: DOUBLE
16248: EQUAL
16249: IFTRUE 16253
16251: GO 16279
16253: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16254: LD_ADDR_VAR 0 3
16258: PUSH
16259: LD_INT 2
16261: PUSH
16262: LD_INT 3
16264: PUSH
16265: LD_INT 4
16267: PUSH
16268: LD_INT 5
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: ST_TO_ADDR
16277: GO 17138
16279: LD_INT 9
16281: DOUBLE
16282: EQUAL
16283: IFTRUE 16287
16285: GO 16313
16287: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16288: LD_ADDR_VAR 0 3
16292: PUSH
16293: LD_INT 2
16295: PUSH
16296: LD_INT 3
16298: PUSH
16299: LD_INT 4
16301: PUSH
16302: LD_INT 5
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: ST_TO_ADDR
16311: GO 17138
16313: LD_INT 7
16315: DOUBLE
16316: EQUAL
16317: IFTRUE 16321
16319: GO 16347
16321: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16322: LD_ADDR_VAR 0 3
16326: PUSH
16327: LD_INT 2
16329: PUSH
16330: LD_INT 3
16332: PUSH
16333: LD_INT 4
16335: PUSH
16336: LD_INT 5
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: ST_TO_ADDR
16345: GO 17138
16347: LD_INT 12
16349: DOUBLE
16350: EQUAL
16351: IFTRUE 16355
16353: GO 16381
16355: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16356: LD_ADDR_VAR 0 3
16360: PUSH
16361: LD_INT 2
16363: PUSH
16364: LD_INT 3
16366: PUSH
16367: LD_INT 4
16369: PUSH
16370: LD_INT 5
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: ST_TO_ADDR
16379: GO 17138
16381: LD_INT 13
16383: DOUBLE
16384: EQUAL
16385: IFTRUE 16389
16387: GO 16415
16389: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16390: LD_ADDR_VAR 0 3
16394: PUSH
16395: LD_INT 2
16397: PUSH
16398: LD_INT 3
16400: PUSH
16401: LD_INT 4
16403: PUSH
16404: LD_INT 5
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: ST_TO_ADDR
16413: GO 17138
16415: LD_INT 14
16417: DOUBLE
16418: EQUAL
16419: IFTRUE 16423
16421: GO 16441
16423: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16424: LD_ADDR_VAR 0 3
16428: PUSH
16429: LD_INT 4
16431: PUSH
16432: LD_INT 5
16434: PUSH
16435: EMPTY
16436: LIST
16437: LIST
16438: ST_TO_ADDR
16439: GO 17138
16441: LD_INT 6
16443: DOUBLE
16444: EQUAL
16445: IFTRUE 16449
16447: GO 16467
16449: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16450: LD_ADDR_VAR 0 3
16454: PUSH
16455: LD_INT 4
16457: PUSH
16458: LD_INT 5
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: ST_TO_ADDR
16465: GO 17138
16467: LD_INT 10
16469: DOUBLE
16470: EQUAL
16471: IFTRUE 16475
16473: GO 16493
16475: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16476: LD_ADDR_VAR 0 3
16480: PUSH
16481: LD_INT 4
16483: PUSH
16484: LD_INT 5
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: ST_TO_ADDR
16491: GO 17138
16493: LD_INT 22
16495: DOUBLE
16496: EQUAL
16497: IFTRUE 16501
16499: GO 16527
16501: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16502: LD_ADDR_VAR 0 3
16506: PUSH
16507: LD_INT 11
16509: PUSH
16510: LD_INT 12
16512: PUSH
16513: LD_INT 13
16515: PUSH
16516: LD_INT 14
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: ST_TO_ADDR
16525: GO 17138
16527: LD_INT 23
16529: DOUBLE
16530: EQUAL
16531: IFTRUE 16535
16533: GO 16561
16535: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16536: LD_ADDR_VAR 0 3
16540: PUSH
16541: LD_INT 11
16543: PUSH
16544: LD_INT 12
16546: PUSH
16547: LD_INT 13
16549: PUSH
16550: LD_INT 14
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: ST_TO_ADDR
16559: GO 17138
16561: LD_INT 24
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16595
16569: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16570: LD_ADDR_VAR 0 3
16574: PUSH
16575: LD_INT 11
16577: PUSH
16578: LD_INT 12
16580: PUSH
16581: LD_INT 13
16583: PUSH
16584: LD_INT 14
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: ST_TO_ADDR
16593: GO 17138
16595: LD_INT 30
16597: DOUBLE
16598: EQUAL
16599: IFTRUE 16603
16601: GO 16629
16603: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16604: LD_ADDR_VAR 0 3
16608: PUSH
16609: LD_INT 11
16611: PUSH
16612: LD_INT 12
16614: PUSH
16615: LD_INT 13
16617: PUSH
16618: LD_INT 14
16620: PUSH
16621: EMPTY
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: ST_TO_ADDR
16627: GO 17138
16629: LD_INT 25
16631: DOUBLE
16632: EQUAL
16633: IFTRUE 16637
16635: GO 16655
16637: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16638: LD_ADDR_VAR 0 3
16642: PUSH
16643: LD_INT 13
16645: PUSH
16646: LD_INT 14
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: ST_TO_ADDR
16653: GO 17138
16655: LD_INT 27
16657: DOUBLE
16658: EQUAL
16659: IFTRUE 16663
16661: GO 16681
16663: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
16664: LD_ADDR_VAR 0 3
16668: PUSH
16669: LD_INT 13
16671: PUSH
16672: LD_INT 14
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: ST_TO_ADDR
16679: GO 17138
16681: LD_EXP 87
16685: DOUBLE
16686: EQUAL
16687: IFTRUE 16691
16689: GO 16717
16691: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16692: LD_ADDR_VAR 0 3
16696: PUSH
16697: LD_INT 11
16699: PUSH
16700: LD_INT 12
16702: PUSH
16703: LD_INT 13
16705: PUSH
16706: LD_INT 14
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: ST_TO_ADDR
16715: GO 17138
16717: LD_INT 28
16719: DOUBLE
16720: EQUAL
16721: IFTRUE 16725
16723: GO 16743
16725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16726: LD_ADDR_VAR 0 3
16730: PUSH
16731: LD_INT 13
16733: PUSH
16734: LD_INT 14
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: ST_TO_ADDR
16741: GO 17138
16743: LD_INT 29
16745: DOUBLE
16746: EQUAL
16747: IFTRUE 16751
16749: GO 16769
16751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16752: LD_ADDR_VAR 0 3
16756: PUSH
16757: LD_INT 13
16759: PUSH
16760: LD_INT 14
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: ST_TO_ADDR
16767: GO 17138
16769: LD_INT 31
16771: DOUBLE
16772: EQUAL
16773: IFTRUE 16777
16775: GO 16795
16777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16778: LD_ADDR_VAR 0 3
16782: PUSH
16783: LD_INT 13
16785: PUSH
16786: LD_INT 14
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: ST_TO_ADDR
16793: GO 17138
16795: LD_INT 26
16797: DOUBLE
16798: EQUAL
16799: IFTRUE 16803
16801: GO 16821
16803: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16804: LD_ADDR_VAR 0 3
16808: PUSH
16809: LD_INT 13
16811: PUSH
16812: LD_INT 14
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: ST_TO_ADDR
16819: GO 17138
16821: LD_INT 42
16823: DOUBLE
16824: EQUAL
16825: IFTRUE 16829
16827: GO 16855
16829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16830: LD_ADDR_VAR 0 3
16834: PUSH
16835: LD_INT 21
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_INT 23
16843: PUSH
16844: LD_INT 24
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: ST_TO_ADDR
16853: GO 17138
16855: LD_INT 43
16857: DOUBLE
16858: EQUAL
16859: IFTRUE 16863
16861: GO 16889
16863: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16864: LD_ADDR_VAR 0 3
16868: PUSH
16869: LD_INT 21
16871: PUSH
16872: LD_INT 22
16874: PUSH
16875: LD_INT 23
16877: PUSH
16878: LD_INT 24
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: ST_TO_ADDR
16887: GO 17138
16889: LD_INT 44
16891: DOUBLE
16892: EQUAL
16893: IFTRUE 16897
16895: GO 16923
16897: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16898: LD_ADDR_VAR 0 3
16902: PUSH
16903: LD_INT 21
16905: PUSH
16906: LD_INT 22
16908: PUSH
16909: LD_INT 23
16911: PUSH
16912: LD_INT 24
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: ST_TO_ADDR
16921: GO 17138
16923: LD_INT 45
16925: DOUBLE
16926: EQUAL
16927: IFTRUE 16931
16929: GO 16957
16931: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16932: LD_ADDR_VAR 0 3
16936: PUSH
16937: LD_INT 21
16939: PUSH
16940: LD_INT 22
16942: PUSH
16943: LD_INT 23
16945: PUSH
16946: LD_INT 24
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: ST_TO_ADDR
16955: GO 17138
16957: LD_INT 49
16959: DOUBLE
16960: EQUAL
16961: IFTRUE 16965
16963: GO 16991
16965: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16966: LD_ADDR_VAR 0 3
16970: PUSH
16971: LD_INT 21
16973: PUSH
16974: LD_INT 22
16976: PUSH
16977: LD_INT 23
16979: PUSH
16980: LD_INT 24
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: ST_TO_ADDR
16989: GO 17138
16991: LD_INT 51
16993: DOUBLE
16994: EQUAL
16995: IFTRUE 16999
16997: GO 17025
16999: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17000: LD_ADDR_VAR 0 3
17004: PUSH
17005: LD_INT 21
17007: PUSH
17008: LD_INT 22
17010: PUSH
17011: LD_INT 23
17013: PUSH
17014: LD_INT 24
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: ST_TO_ADDR
17023: GO 17138
17025: LD_INT 52
17027: DOUBLE
17028: EQUAL
17029: IFTRUE 17033
17031: GO 17059
17033: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17034: LD_ADDR_VAR 0 3
17038: PUSH
17039: LD_INT 21
17041: PUSH
17042: LD_INT 22
17044: PUSH
17045: LD_INT 23
17047: PUSH
17048: LD_INT 24
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: ST_TO_ADDR
17057: GO 17138
17059: LD_INT 53
17061: DOUBLE
17062: EQUAL
17063: IFTRUE 17067
17065: GO 17085
17067: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17068: LD_ADDR_VAR 0 3
17072: PUSH
17073: LD_INT 23
17075: PUSH
17076: LD_INT 24
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: ST_TO_ADDR
17083: GO 17138
17085: LD_INT 46
17087: DOUBLE
17088: EQUAL
17089: IFTRUE 17093
17091: GO 17111
17093: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17094: LD_ADDR_VAR 0 3
17098: PUSH
17099: LD_INT 23
17101: PUSH
17102: LD_INT 24
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: ST_TO_ADDR
17109: GO 17138
17111: LD_INT 47
17113: DOUBLE
17114: EQUAL
17115: IFTRUE 17119
17117: GO 17137
17119: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17120: LD_ADDR_VAR 0 3
17124: PUSH
17125: LD_INT 23
17127: PUSH
17128: LD_INT 24
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: ST_TO_ADDR
17135: GO 17138
17137: POP
// result := ( chassis in result ) ;
17138: LD_ADDR_VAR 0 3
17142: PUSH
17143: LD_VAR 0 1
17147: PUSH
17148: LD_VAR 0 3
17152: IN
17153: ST_TO_ADDR
// end ;
17154: LD_VAR 0 3
17158: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17159: LD_INT 0
17161: PPUSH
17162: PPUSH
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
// result := array ;
17168: LD_ADDR_VAR 0 5
17172: PUSH
17173: LD_VAR 0 1
17177: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17178: LD_VAR 0 1
17182: NOT
17183: PUSH
17184: LD_VAR 0 2
17188: NOT
17189: OR
17190: PUSH
17191: LD_VAR 0 3
17195: NOT
17196: OR
17197: PUSH
17198: LD_VAR 0 2
17202: PUSH
17203: LD_VAR 0 1
17207: GREATER
17208: OR
17209: PUSH
17210: LD_VAR 0 3
17214: PUSH
17215: LD_VAR 0 1
17219: GREATER
17220: OR
17221: IFFALSE 17225
// exit ;
17223: GO 17521
// if direction then
17225: LD_VAR 0 4
17229: IFFALSE 17293
// begin d := 1 ;
17231: LD_ADDR_VAR 0 9
17235: PUSH
17236: LD_INT 1
17238: ST_TO_ADDR
// if i_from > i_to then
17239: LD_VAR 0 2
17243: PUSH
17244: LD_VAR 0 3
17248: GREATER
17249: IFFALSE 17275
// length := ( array - i_from ) + i_to else
17251: LD_ADDR_VAR 0 11
17255: PUSH
17256: LD_VAR 0 1
17260: PUSH
17261: LD_VAR 0 2
17265: MINUS
17266: PUSH
17267: LD_VAR 0 3
17271: PLUS
17272: ST_TO_ADDR
17273: GO 17291
// length := i_to - i_from ;
17275: LD_ADDR_VAR 0 11
17279: PUSH
17280: LD_VAR 0 3
17284: PUSH
17285: LD_VAR 0 2
17289: MINUS
17290: ST_TO_ADDR
// end else
17291: GO 17354
// begin d := - 1 ;
17293: LD_ADDR_VAR 0 9
17297: PUSH
17298: LD_INT 1
17300: NEG
17301: ST_TO_ADDR
// if i_from > i_to then
17302: LD_VAR 0 2
17306: PUSH
17307: LD_VAR 0 3
17311: GREATER
17312: IFFALSE 17332
// length := i_from - i_to else
17314: LD_ADDR_VAR 0 11
17318: PUSH
17319: LD_VAR 0 2
17323: PUSH
17324: LD_VAR 0 3
17328: MINUS
17329: ST_TO_ADDR
17330: GO 17354
// length := ( array - i_to ) + i_from ;
17332: LD_ADDR_VAR 0 11
17336: PUSH
17337: LD_VAR 0 1
17341: PUSH
17342: LD_VAR 0 3
17346: MINUS
17347: PUSH
17348: LD_VAR 0 2
17352: PLUS
17353: ST_TO_ADDR
// end ; if not length then
17354: LD_VAR 0 11
17358: NOT
17359: IFFALSE 17363
// exit ;
17361: GO 17521
// tmp := array ;
17363: LD_ADDR_VAR 0 10
17367: PUSH
17368: LD_VAR 0 1
17372: ST_TO_ADDR
// for i = 1 to length do
17373: LD_ADDR_VAR 0 6
17377: PUSH
17378: DOUBLE
17379: LD_INT 1
17381: DEC
17382: ST_TO_ADDR
17383: LD_VAR 0 11
17387: PUSH
17388: FOR_TO
17389: IFFALSE 17509
// begin for j = 1 to array do
17391: LD_ADDR_VAR 0 7
17395: PUSH
17396: DOUBLE
17397: LD_INT 1
17399: DEC
17400: ST_TO_ADDR
17401: LD_VAR 0 1
17405: PUSH
17406: FOR_TO
17407: IFFALSE 17495
// begin k := j + d ;
17409: LD_ADDR_VAR 0 8
17413: PUSH
17414: LD_VAR 0 7
17418: PUSH
17419: LD_VAR 0 9
17423: PLUS
17424: ST_TO_ADDR
// if k > array then
17425: LD_VAR 0 8
17429: PUSH
17430: LD_VAR 0 1
17434: GREATER
17435: IFFALSE 17445
// k := 1 ;
17437: LD_ADDR_VAR 0 8
17441: PUSH
17442: LD_INT 1
17444: ST_TO_ADDR
// if not k then
17445: LD_VAR 0 8
17449: NOT
17450: IFFALSE 17462
// k := array ;
17452: LD_ADDR_VAR 0 8
17456: PUSH
17457: LD_VAR 0 1
17461: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17462: LD_ADDR_VAR 0 10
17466: PUSH
17467: LD_VAR 0 10
17471: PPUSH
17472: LD_VAR 0 8
17476: PPUSH
17477: LD_VAR 0 1
17481: PUSH
17482: LD_VAR 0 7
17486: ARRAY
17487: PPUSH
17488: CALL_OW 1
17492: ST_TO_ADDR
// end ;
17493: GO 17406
17495: POP
17496: POP
// array := tmp ;
17497: LD_ADDR_VAR 0 1
17501: PUSH
17502: LD_VAR 0 10
17506: ST_TO_ADDR
// end ;
17507: GO 17388
17509: POP
17510: POP
// result := array ;
17511: LD_ADDR_VAR 0 5
17515: PUSH
17516: LD_VAR 0 1
17520: ST_TO_ADDR
// end ;
17521: LD_VAR 0 5
17525: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17526: LD_INT 0
17528: PPUSH
17529: PPUSH
// result := 0 ;
17530: LD_ADDR_VAR 0 3
17534: PUSH
17535: LD_INT 0
17537: ST_TO_ADDR
// if not array or not value in array then
17538: LD_VAR 0 1
17542: NOT
17543: PUSH
17544: LD_VAR 0 2
17548: PUSH
17549: LD_VAR 0 1
17553: IN
17554: NOT
17555: OR
17556: IFFALSE 17560
// exit ;
17558: GO 17614
// for i = 1 to array do
17560: LD_ADDR_VAR 0 4
17564: PUSH
17565: DOUBLE
17566: LD_INT 1
17568: DEC
17569: ST_TO_ADDR
17570: LD_VAR 0 1
17574: PUSH
17575: FOR_TO
17576: IFFALSE 17612
// if value = array [ i ] then
17578: LD_VAR 0 2
17582: PUSH
17583: LD_VAR 0 1
17587: PUSH
17588: LD_VAR 0 4
17592: ARRAY
17593: EQUAL
17594: IFFALSE 17610
// begin result := i ;
17596: LD_ADDR_VAR 0 3
17600: PUSH
17601: LD_VAR 0 4
17605: ST_TO_ADDR
// exit ;
17606: POP
17607: POP
17608: GO 17614
// end ;
17610: GO 17575
17612: POP
17613: POP
// end ;
17614: LD_VAR 0 3
17618: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17619: LD_INT 0
17621: PPUSH
// vc_chassis := chassis ;
17622: LD_ADDR_OWVAR 37
17626: PUSH
17627: LD_VAR 0 1
17631: ST_TO_ADDR
// vc_engine := engine ;
17632: LD_ADDR_OWVAR 39
17636: PUSH
17637: LD_VAR 0 2
17641: ST_TO_ADDR
// vc_control := control ;
17642: LD_ADDR_OWVAR 38
17646: PUSH
17647: LD_VAR 0 3
17651: ST_TO_ADDR
// vc_weapon := weapon ;
17652: LD_ADDR_OWVAR 40
17656: PUSH
17657: LD_VAR 0 4
17661: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17662: LD_ADDR_OWVAR 41
17666: PUSH
17667: LD_VAR 0 5
17671: ST_TO_ADDR
// end ;
17672: LD_VAR 0 6
17676: RET
// export function WantPlant ( unit ) ; var task ; begin
17677: LD_INT 0
17679: PPUSH
17680: PPUSH
// result := false ;
17681: LD_ADDR_VAR 0 2
17685: PUSH
17686: LD_INT 0
17688: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17689: LD_ADDR_VAR 0 3
17693: PUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 437
17703: ST_TO_ADDR
// if task then
17704: LD_VAR 0 3
17708: IFFALSE 17736
// if task [ 1 ] [ 1 ] = p then
17710: LD_VAR 0 3
17714: PUSH
17715: LD_INT 1
17717: ARRAY
17718: PUSH
17719: LD_INT 1
17721: ARRAY
17722: PUSH
17723: LD_STRING p
17725: EQUAL
17726: IFFALSE 17736
// result := true ;
17728: LD_ADDR_VAR 0 2
17732: PUSH
17733: LD_INT 1
17735: ST_TO_ADDR
// end ;
17736: LD_VAR 0 2
17740: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17741: LD_INT 0
17743: PPUSH
17744: PPUSH
17745: PPUSH
17746: PPUSH
// if pos < 1 then
17747: LD_VAR 0 2
17751: PUSH
17752: LD_INT 1
17754: LESS
17755: IFFALSE 17759
// exit ;
17757: GO 18062
// if pos = 1 then
17759: LD_VAR 0 2
17763: PUSH
17764: LD_INT 1
17766: EQUAL
17767: IFFALSE 17800
// result := Replace ( arr , pos [ 1 ] , value ) else
17769: LD_ADDR_VAR 0 4
17773: PUSH
17774: LD_VAR 0 1
17778: PPUSH
17779: LD_VAR 0 2
17783: PUSH
17784: LD_INT 1
17786: ARRAY
17787: PPUSH
17788: LD_VAR 0 3
17792: PPUSH
17793: CALL_OW 1
17797: ST_TO_ADDR
17798: GO 18062
// begin tmp := arr ;
17800: LD_ADDR_VAR 0 6
17804: PUSH
17805: LD_VAR 0 1
17809: ST_TO_ADDR
// s_arr := [ tmp ] ;
17810: LD_ADDR_VAR 0 7
17814: PUSH
17815: LD_VAR 0 6
17819: PUSH
17820: EMPTY
17821: LIST
17822: ST_TO_ADDR
// for i = 1 to pos - 1 do
17823: LD_ADDR_VAR 0 5
17827: PUSH
17828: DOUBLE
17829: LD_INT 1
17831: DEC
17832: ST_TO_ADDR
17833: LD_VAR 0 2
17837: PUSH
17838: LD_INT 1
17840: MINUS
17841: PUSH
17842: FOR_TO
17843: IFFALSE 17888
// begin tmp := tmp [ pos [ i ] ] ;
17845: LD_ADDR_VAR 0 6
17849: PUSH
17850: LD_VAR 0 6
17854: PUSH
17855: LD_VAR 0 2
17859: PUSH
17860: LD_VAR 0 5
17864: ARRAY
17865: ARRAY
17866: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17867: LD_ADDR_VAR 0 7
17871: PUSH
17872: LD_VAR 0 7
17876: PUSH
17877: LD_VAR 0 6
17881: PUSH
17882: EMPTY
17883: LIST
17884: ADD
17885: ST_TO_ADDR
// end ;
17886: GO 17842
17888: POP
17889: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17890: LD_ADDR_VAR 0 6
17894: PUSH
17895: LD_VAR 0 6
17899: PPUSH
17900: LD_VAR 0 2
17904: PUSH
17905: LD_VAR 0 2
17909: ARRAY
17910: PPUSH
17911: LD_VAR 0 3
17915: PPUSH
17916: CALL_OW 1
17920: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17921: LD_ADDR_VAR 0 7
17925: PUSH
17926: LD_VAR 0 7
17930: PPUSH
17931: LD_VAR 0 7
17935: PPUSH
17936: LD_VAR 0 6
17940: PPUSH
17941: CALL_OW 1
17945: ST_TO_ADDR
// for i = s_arr downto 2 do
17946: LD_ADDR_VAR 0 5
17950: PUSH
17951: DOUBLE
17952: LD_VAR 0 7
17956: INC
17957: ST_TO_ADDR
17958: LD_INT 2
17960: PUSH
17961: FOR_DOWNTO
17962: IFFALSE 18046
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17964: LD_ADDR_VAR 0 6
17968: PUSH
17969: LD_VAR 0 7
17973: PUSH
17974: LD_VAR 0 5
17978: PUSH
17979: LD_INT 1
17981: MINUS
17982: ARRAY
17983: PPUSH
17984: LD_VAR 0 2
17988: PUSH
17989: LD_VAR 0 5
17993: PUSH
17994: LD_INT 1
17996: MINUS
17997: ARRAY
17998: PPUSH
17999: LD_VAR 0 7
18003: PUSH
18004: LD_VAR 0 5
18008: ARRAY
18009: PPUSH
18010: CALL_OW 1
18014: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18015: LD_ADDR_VAR 0 7
18019: PUSH
18020: LD_VAR 0 7
18024: PPUSH
18025: LD_VAR 0 5
18029: PUSH
18030: LD_INT 1
18032: MINUS
18033: PPUSH
18034: LD_VAR 0 6
18038: PPUSH
18039: CALL_OW 1
18043: ST_TO_ADDR
// end ;
18044: GO 17961
18046: POP
18047: POP
// result := s_arr [ 1 ] ;
18048: LD_ADDR_VAR 0 4
18052: PUSH
18053: LD_VAR 0 7
18057: PUSH
18058: LD_INT 1
18060: ARRAY
18061: ST_TO_ADDR
// end ; end ;
18062: LD_VAR 0 4
18066: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18067: LD_INT 0
18069: PPUSH
18070: PPUSH
// if not list then
18071: LD_VAR 0 1
18075: NOT
18076: IFFALSE 18080
// exit ;
18078: GO 18171
// i := list [ pos1 ] ;
18080: LD_ADDR_VAR 0 5
18084: PUSH
18085: LD_VAR 0 1
18089: PUSH
18090: LD_VAR 0 2
18094: ARRAY
18095: ST_TO_ADDR
// if not i then
18096: LD_VAR 0 5
18100: NOT
18101: IFFALSE 18105
// exit ;
18103: GO 18171
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18105: LD_ADDR_VAR 0 1
18109: PUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: LD_VAR 0 2
18119: PPUSH
18120: LD_VAR 0 1
18124: PUSH
18125: LD_VAR 0 3
18129: ARRAY
18130: PPUSH
18131: CALL_OW 1
18135: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18136: LD_ADDR_VAR 0 1
18140: PUSH
18141: LD_VAR 0 1
18145: PPUSH
18146: LD_VAR 0 3
18150: PPUSH
18151: LD_VAR 0 5
18155: PPUSH
18156: CALL_OW 1
18160: ST_TO_ADDR
// result := list ;
18161: LD_ADDR_VAR 0 4
18165: PUSH
18166: LD_VAR 0 1
18170: ST_TO_ADDR
// end ;
18171: LD_VAR 0 4
18175: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18176: LD_INT 0
18178: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18179: LD_ADDR_VAR 0 5
18183: PUSH
18184: LD_VAR 0 1
18188: PPUSH
18189: CALL_OW 250
18193: PPUSH
18194: LD_VAR 0 1
18198: PPUSH
18199: CALL_OW 251
18203: PPUSH
18204: LD_VAR 0 2
18208: PPUSH
18209: LD_VAR 0 3
18213: PPUSH
18214: LD_VAR 0 4
18218: PPUSH
18219: CALL 18229 0 5
18223: ST_TO_ADDR
// end ;
18224: LD_VAR 0 5
18228: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18229: LD_INT 0
18231: PPUSH
18232: PPUSH
18233: PPUSH
18234: PPUSH
// if not list then
18235: LD_VAR 0 3
18239: NOT
18240: IFFALSE 18244
// exit ;
18242: GO 18632
// result := [ ] ;
18244: LD_ADDR_VAR 0 6
18248: PUSH
18249: EMPTY
18250: ST_TO_ADDR
// for i in list do
18251: LD_ADDR_VAR 0 7
18255: PUSH
18256: LD_VAR 0 3
18260: PUSH
18261: FOR_IN
18262: IFFALSE 18464
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18264: LD_ADDR_VAR 0 9
18268: PUSH
18269: LD_VAR 0 7
18273: PPUSH
18274: LD_VAR 0 1
18278: PPUSH
18279: LD_VAR 0 2
18283: PPUSH
18284: CALL_OW 297
18288: ST_TO_ADDR
// if not result then
18289: LD_VAR 0 6
18293: NOT
18294: IFFALSE 18320
// result := [ [ i , tmp ] ] else
18296: LD_ADDR_VAR 0 6
18300: PUSH
18301: LD_VAR 0 7
18305: PUSH
18306: LD_VAR 0 9
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: ST_TO_ADDR
18318: GO 18462
// begin if result [ result ] [ 2 ] < tmp then
18320: LD_VAR 0 6
18324: PUSH
18325: LD_VAR 0 6
18329: ARRAY
18330: PUSH
18331: LD_INT 2
18333: ARRAY
18334: PUSH
18335: LD_VAR 0 9
18339: LESS
18340: IFFALSE 18382
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18342: LD_ADDR_VAR 0 6
18346: PUSH
18347: LD_VAR 0 6
18351: PPUSH
18352: LD_VAR 0 6
18356: PUSH
18357: LD_INT 1
18359: PLUS
18360: PPUSH
18361: LD_VAR 0 7
18365: PUSH
18366: LD_VAR 0 9
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PPUSH
18375: CALL_OW 2
18379: ST_TO_ADDR
18380: GO 18462
// for j = 1 to result do
18382: LD_ADDR_VAR 0 8
18386: PUSH
18387: DOUBLE
18388: LD_INT 1
18390: DEC
18391: ST_TO_ADDR
18392: LD_VAR 0 6
18396: PUSH
18397: FOR_TO
18398: IFFALSE 18460
// begin if tmp < result [ j ] [ 2 ] then
18400: LD_VAR 0 9
18404: PUSH
18405: LD_VAR 0 6
18409: PUSH
18410: LD_VAR 0 8
18414: ARRAY
18415: PUSH
18416: LD_INT 2
18418: ARRAY
18419: LESS
18420: IFFALSE 18458
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18422: LD_ADDR_VAR 0 6
18426: PUSH
18427: LD_VAR 0 6
18431: PPUSH
18432: LD_VAR 0 8
18436: PPUSH
18437: LD_VAR 0 7
18441: PUSH
18442: LD_VAR 0 9
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PPUSH
18451: CALL_OW 2
18455: ST_TO_ADDR
// break ;
18456: GO 18460
// end ; end ;
18458: GO 18397
18460: POP
18461: POP
// end ; end ;
18462: GO 18261
18464: POP
18465: POP
// if result and not asc then
18466: LD_VAR 0 6
18470: PUSH
18471: LD_VAR 0 4
18475: NOT
18476: AND
18477: IFFALSE 18552
// begin tmp := result ;
18479: LD_ADDR_VAR 0 9
18483: PUSH
18484: LD_VAR 0 6
18488: ST_TO_ADDR
// for i = tmp downto 1 do
18489: LD_ADDR_VAR 0 7
18493: PUSH
18494: DOUBLE
18495: LD_VAR 0 9
18499: INC
18500: ST_TO_ADDR
18501: LD_INT 1
18503: PUSH
18504: FOR_DOWNTO
18505: IFFALSE 18550
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18507: LD_ADDR_VAR 0 6
18511: PUSH
18512: LD_VAR 0 6
18516: PPUSH
18517: LD_VAR 0 9
18521: PUSH
18522: LD_VAR 0 7
18526: MINUS
18527: PUSH
18528: LD_INT 1
18530: PLUS
18531: PPUSH
18532: LD_VAR 0 9
18536: PUSH
18537: LD_VAR 0 7
18541: ARRAY
18542: PPUSH
18543: CALL_OW 1
18547: ST_TO_ADDR
18548: GO 18504
18550: POP
18551: POP
// end ; tmp := [ ] ;
18552: LD_ADDR_VAR 0 9
18556: PUSH
18557: EMPTY
18558: ST_TO_ADDR
// if mode then
18559: LD_VAR 0 5
18563: IFFALSE 18632
// begin for i = 1 to result do
18565: LD_ADDR_VAR 0 7
18569: PUSH
18570: DOUBLE
18571: LD_INT 1
18573: DEC
18574: ST_TO_ADDR
18575: LD_VAR 0 6
18579: PUSH
18580: FOR_TO
18581: IFFALSE 18620
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18583: LD_ADDR_VAR 0 9
18587: PUSH
18588: LD_VAR 0 9
18592: PPUSH
18593: LD_VAR 0 7
18597: PPUSH
18598: LD_VAR 0 6
18602: PUSH
18603: LD_VAR 0 7
18607: ARRAY
18608: PUSH
18609: LD_INT 1
18611: ARRAY
18612: PPUSH
18613: CALL_OW 1
18617: ST_TO_ADDR
18618: GO 18580
18620: POP
18621: POP
// result := tmp ;
18622: LD_ADDR_VAR 0 6
18626: PUSH
18627: LD_VAR 0 9
18631: ST_TO_ADDR
// end ; end ;
18632: LD_VAR 0 6
18636: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18637: LD_INT 0
18639: PPUSH
18640: PPUSH
18641: PPUSH
18642: PPUSH
18643: PPUSH
18644: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18645: LD_ADDR_VAR 0 5
18649: PUSH
18650: LD_INT 0
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: LD_INT 0
18658: PUSH
18659: EMPTY
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: ST_TO_ADDR
// if not x or not y then
18667: LD_VAR 0 2
18671: NOT
18672: PUSH
18673: LD_VAR 0 3
18677: NOT
18678: OR
18679: IFFALSE 18683
// exit ;
18681: GO 20335
// if not range then
18683: LD_VAR 0 4
18687: NOT
18688: IFFALSE 18698
// range := 10 ;
18690: LD_ADDR_VAR 0 4
18694: PUSH
18695: LD_INT 10
18697: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18698: LD_ADDR_VAR 0 8
18702: PUSH
18703: LD_INT 81
18705: PUSH
18706: LD_VAR 0 1
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 92
18717: PUSH
18718: LD_VAR 0 2
18722: PUSH
18723: LD_VAR 0 3
18727: PUSH
18728: LD_VAR 0 4
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 3
18741: PUSH
18742: LD_INT 21
18744: PUSH
18745: LD_INT 3
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: LIST
18760: PPUSH
18761: CALL_OW 69
18765: ST_TO_ADDR
// if not tmp then
18766: LD_VAR 0 8
18770: NOT
18771: IFFALSE 18775
// exit ;
18773: GO 20335
// for i in tmp do
18775: LD_ADDR_VAR 0 6
18779: PUSH
18780: LD_VAR 0 8
18784: PUSH
18785: FOR_IN
18786: IFFALSE 20310
// begin points := [ 0 , 0 , 0 ] ;
18788: LD_ADDR_VAR 0 9
18792: PUSH
18793: LD_INT 0
18795: PUSH
18796: LD_INT 0
18798: PUSH
18799: LD_INT 0
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: ST_TO_ADDR
// bpoints := 1 ;
18807: LD_ADDR_VAR 0 10
18811: PUSH
18812: LD_INT 1
18814: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18815: LD_VAR 0 6
18819: PPUSH
18820: CALL_OW 247
18824: PUSH
18825: LD_INT 1
18827: DOUBLE
18828: EQUAL
18829: IFTRUE 18833
18831: GO 19411
18833: POP
// begin if GetClass ( i ) = 1 then
18834: LD_VAR 0 6
18838: PPUSH
18839: CALL_OW 257
18843: PUSH
18844: LD_INT 1
18846: EQUAL
18847: IFFALSE 18868
// points := [ 10 , 5 , 3 ] ;
18849: LD_ADDR_VAR 0 9
18853: PUSH
18854: LD_INT 10
18856: PUSH
18857: LD_INT 5
18859: PUSH
18860: LD_INT 3
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: LIST
18867: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18868: LD_VAR 0 6
18872: PPUSH
18873: CALL_OW 257
18877: PUSH
18878: LD_INT 2
18880: PUSH
18881: LD_INT 3
18883: PUSH
18884: LD_INT 4
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: IN
18892: IFFALSE 18913
// points := [ 3 , 2 , 1 ] ;
18894: LD_ADDR_VAR 0 9
18898: PUSH
18899: LD_INT 3
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: LIST
18912: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18913: LD_VAR 0 6
18917: PPUSH
18918: CALL_OW 257
18922: PUSH
18923: LD_INT 5
18925: EQUAL
18926: IFFALSE 18947
// points := [ 130 , 5 , 2 ] ;
18928: LD_ADDR_VAR 0 9
18932: PUSH
18933: LD_INT 130
18935: PUSH
18936: LD_INT 5
18938: PUSH
18939: LD_INT 2
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: LIST
18946: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18947: LD_VAR 0 6
18951: PPUSH
18952: CALL_OW 257
18956: PUSH
18957: LD_INT 8
18959: EQUAL
18960: IFFALSE 18981
// points := [ 35 , 35 , 30 ] ;
18962: LD_ADDR_VAR 0 9
18966: PUSH
18967: LD_INT 35
18969: PUSH
18970: LD_INT 35
18972: PUSH
18973: LD_INT 30
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: LIST
18980: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18981: LD_VAR 0 6
18985: PPUSH
18986: CALL_OW 257
18990: PUSH
18991: LD_INT 9
18993: EQUAL
18994: IFFALSE 19015
// points := [ 20 , 55 , 40 ] ;
18996: LD_ADDR_VAR 0 9
19000: PUSH
19001: LD_INT 20
19003: PUSH
19004: LD_INT 55
19006: PUSH
19007: LD_INT 40
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: LIST
19014: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19015: LD_VAR 0 6
19019: PPUSH
19020: CALL_OW 257
19024: PUSH
19025: LD_INT 12
19027: PUSH
19028: LD_INT 16
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: IN
19035: IFFALSE 19056
// points := [ 5 , 3 , 2 ] ;
19037: LD_ADDR_VAR 0 9
19041: PUSH
19042: LD_INT 5
19044: PUSH
19045: LD_INT 3
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: LIST
19055: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19056: LD_VAR 0 6
19060: PPUSH
19061: CALL_OW 257
19065: PUSH
19066: LD_INT 17
19068: EQUAL
19069: IFFALSE 19090
// points := [ 100 , 50 , 75 ] ;
19071: LD_ADDR_VAR 0 9
19075: PUSH
19076: LD_INT 100
19078: PUSH
19079: LD_INT 50
19081: PUSH
19082: LD_INT 75
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19090: LD_VAR 0 6
19094: PPUSH
19095: CALL_OW 257
19099: PUSH
19100: LD_INT 15
19102: EQUAL
19103: IFFALSE 19124
// points := [ 10 , 5 , 3 ] ;
19105: LD_ADDR_VAR 0 9
19109: PUSH
19110: LD_INT 10
19112: PUSH
19113: LD_INT 5
19115: PUSH
19116: LD_INT 3
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19124: LD_VAR 0 6
19128: PPUSH
19129: CALL_OW 257
19133: PUSH
19134: LD_INT 14
19136: EQUAL
19137: IFFALSE 19158
// points := [ 10 , 0 , 0 ] ;
19139: LD_ADDR_VAR 0 9
19143: PUSH
19144: LD_INT 10
19146: PUSH
19147: LD_INT 0
19149: PUSH
19150: LD_INT 0
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: LIST
19157: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19158: LD_VAR 0 6
19162: PPUSH
19163: CALL_OW 257
19167: PUSH
19168: LD_INT 11
19170: EQUAL
19171: IFFALSE 19192
// points := [ 30 , 10 , 5 ] ;
19173: LD_ADDR_VAR 0 9
19177: PUSH
19178: LD_INT 30
19180: PUSH
19181: LD_INT 10
19183: PUSH
19184: LD_INT 5
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: LIST
19191: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19192: LD_VAR 0 1
19196: PPUSH
19197: LD_INT 5
19199: PPUSH
19200: CALL_OW 321
19204: PUSH
19205: LD_INT 2
19207: EQUAL
19208: IFFALSE 19225
// bpoints := bpoints * 1.8 ;
19210: LD_ADDR_VAR 0 10
19214: PUSH
19215: LD_VAR 0 10
19219: PUSH
19220: LD_REAL  1.80000000000000E+0000
19223: MUL
19224: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19225: LD_VAR 0 6
19229: PPUSH
19230: CALL_OW 257
19234: PUSH
19235: LD_INT 1
19237: PUSH
19238: LD_INT 2
19240: PUSH
19241: LD_INT 3
19243: PUSH
19244: LD_INT 4
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: IN
19253: PUSH
19254: LD_VAR 0 1
19258: PPUSH
19259: LD_INT 51
19261: PPUSH
19262: CALL_OW 321
19266: PUSH
19267: LD_INT 2
19269: EQUAL
19270: AND
19271: IFFALSE 19288
// bpoints := bpoints * 1.2 ;
19273: LD_ADDR_VAR 0 10
19277: PUSH
19278: LD_VAR 0 10
19282: PUSH
19283: LD_REAL  1.20000000000000E+0000
19286: MUL
19287: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19288: LD_VAR 0 6
19292: PPUSH
19293: CALL_OW 257
19297: PUSH
19298: LD_INT 5
19300: PUSH
19301: LD_INT 7
19303: PUSH
19304: LD_INT 9
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: IN
19312: PUSH
19313: LD_VAR 0 1
19317: PPUSH
19318: LD_INT 52
19320: PPUSH
19321: CALL_OW 321
19325: PUSH
19326: LD_INT 2
19328: EQUAL
19329: AND
19330: IFFALSE 19347
// bpoints := bpoints * 1.5 ;
19332: LD_ADDR_VAR 0 10
19336: PUSH
19337: LD_VAR 0 10
19341: PUSH
19342: LD_REAL  1.50000000000000E+0000
19345: MUL
19346: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19347: LD_VAR 0 1
19351: PPUSH
19352: LD_INT 66
19354: PPUSH
19355: CALL_OW 321
19359: PUSH
19360: LD_INT 2
19362: EQUAL
19363: IFFALSE 19380
// bpoints := bpoints * 1.1 ;
19365: LD_ADDR_VAR 0 10
19369: PUSH
19370: LD_VAR 0 10
19374: PUSH
19375: LD_REAL  1.10000000000000E+0000
19378: MUL
19379: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19380: LD_ADDR_VAR 0 10
19384: PUSH
19385: LD_VAR 0 10
19389: PUSH
19390: LD_VAR 0 6
19394: PPUSH
19395: LD_INT 1
19397: PPUSH
19398: CALL_OW 259
19402: PUSH
19403: LD_REAL  1.15000000000000E+0000
19406: MUL
19407: MUL
19408: ST_TO_ADDR
// end ; unit_vehicle :
19409: GO 20239
19411: LD_INT 2
19413: DOUBLE
19414: EQUAL
19415: IFTRUE 19419
19417: GO 20227
19419: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19420: LD_VAR 0 6
19424: PPUSH
19425: CALL_OW 264
19429: PUSH
19430: LD_INT 2
19432: PUSH
19433: LD_INT 42
19435: PUSH
19436: LD_INT 24
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: IN
19444: IFFALSE 19465
// points := [ 25 , 5 , 3 ] ;
19446: LD_ADDR_VAR 0 9
19450: PUSH
19451: LD_INT 25
19453: PUSH
19454: LD_INT 5
19456: PUSH
19457: LD_INT 3
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: LIST
19464: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19465: LD_VAR 0 6
19469: PPUSH
19470: CALL_OW 264
19474: PUSH
19475: LD_INT 4
19477: PUSH
19478: LD_INT 43
19480: PUSH
19481: LD_INT 25
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: LIST
19488: IN
19489: IFFALSE 19510
// points := [ 40 , 15 , 5 ] ;
19491: LD_ADDR_VAR 0 9
19495: PUSH
19496: LD_INT 40
19498: PUSH
19499: LD_INT 15
19501: PUSH
19502: LD_INT 5
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: LIST
19509: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19510: LD_VAR 0 6
19514: PPUSH
19515: CALL_OW 264
19519: PUSH
19520: LD_INT 3
19522: PUSH
19523: LD_INT 23
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: IN
19530: IFFALSE 19551
// points := [ 7 , 25 , 8 ] ;
19532: LD_ADDR_VAR 0 9
19536: PUSH
19537: LD_INT 7
19539: PUSH
19540: LD_INT 25
19542: PUSH
19543: LD_INT 8
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19551: LD_VAR 0 6
19555: PPUSH
19556: CALL_OW 264
19560: PUSH
19561: LD_INT 5
19563: PUSH
19564: LD_INT 27
19566: PUSH
19567: LD_INT 44
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: LIST
19574: IN
19575: IFFALSE 19596
// points := [ 14 , 50 , 16 ] ;
19577: LD_ADDR_VAR 0 9
19581: PUSH
19582: LD_INT 14
19584: PUSH
19585: LD_INT 50
19587: PUSH
19588: LD_INT 16
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: LIST
19595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19596: LD_VAR 0 6
19600: PPUSH
19601: CALL_OW 264
19605: PUSH
19606: LD_INT 6
19608: PUSH
19609: LD_INT 46
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: IN
19616: IFFALSE 19637
// points := [ 32 , 120 , 70 ] ;
19618: LD_ADDR_VAR 0 9
19622: PUSH
19623: LD_INT 32
19625: PUSH
19626: LD_INT 120
19628: PUSH
19629: LD_INT 70
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: LIST
19636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
19637: LD_VAR 0 6
19641: PPUSH
19642: CALL_OW 264
19646: PUSH
19647: LD_INT 7
19649: PUSH
19650: LD_INT 28
19652: PUSH
19653: LD_INT 45
19655: PUSH
19656: LD_EXP 87
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: IN
19667: IFFALSE 19688
// points := [ 35 , 20 , 45 ] ;
19669: LD_ADDR_VAR 0 9
19673: PUSH
19674: LD_INT 35
19676: PUSH
19677: LD_INT 20
19679: PUSH
19680: LD_INT 45
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19688: LD_VAR 0 6
19692: PPUSH
19693: CALL_OW 264
19697: PUSH
19698: LD_INT 47
19700: PUSH
19701: EMPTY
19702: LIST
19703: IN
19704: IFFALSE 19725
// points := [ 67 , 45 , 75 ] ;
19706: LD_ADDR_VAR 0 9
19710: PUSH
19711: LD_INT 67
19713: PUSH
19714: LD_INT 45
19716: PUSH
19717: LD_INT 75
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: LIST
19724: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19725: LD_VAR 0 6
19729: PPUSH
19730: CALL_OW 264
19734: PUSH
19735: LD_INT 26
19737: PUSH
19738: EMPTY
19739: LIST
19740: IN
19741: IFFALSE 19762
// points := [ 120 , 30 , 80 ] ;
19743: LD_ADDR_VAR 0 9
19747: PUSH
19748: LD_INT 120
19750: PUSH
19751: LD_INT 30
19753: PUSH
19754: LD_INT 80
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: LIST
19761: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19762: LD_VAR 0 6
19766: PPUSH
19767: CALL_OW 264
19771: PUSH
19772: LD_INT 22
19774: PUSH
19775: EMPTY
19776: LIST
19777: IN
19778: IFFALSE 19799
// points := [ 40 , 1 , 1 ] ;
19780: LD_ADDR_VAR 0 9
19784: PUSH
19785: LD_INT 40
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: LD_INT 1
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: LIST
19798: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19799: LD_VAR 0 6
19803: PPUSH
19804: CALL_OW 264
19808: PUSH
19809: LD_INT 29
19811: PUSH
19812: EMPTY
19813: LIST
19814: IN
19815: IFFALSE 19836
// points := [ 70 , 200 , 400 ] ;
19817: LD_ADDR_VAR 0 9
19821: PUSH
19822: LD_INT 70
19824: PUSH
19825: LD_INT 200
19827: PUSH
19828: LD_INT 400
19830: PUSH
19831: EMPTY
19832: LIST
19833: LIST
19834: LIST
19835: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19836: LD_VAR 0 6
19840: PPUSH
19841: CALL_OW 264
19845: PUSH
19846: LD_INT 14
19848: PUSH
19849: LD_INT 53
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: IN
19856: IFFALSE 19877
// points := [ 40 , 10 , 20 ] ;
19858: LD_ADDR_VAR 0 9
19862: PUSH
19863: LD_INT 40
19865: PUSH
19866: LD_INT 10
19868: PUSH
19869: LD_INT 20
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: LIST
19876: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19877: LD_VAR 0 6
19881: PPUSH
19882: CALL_OW 264
19886: PUSH
19887: LD_INT 9
19889: PUSH
19890: EMPTY
19891: LIST
19892: IN
19893: IFFALSE 19914
// points := [ 5 , 70 , 20 ] ;
19895: LD_ADDR_VAR 0 9
19899: PUSH
19900: LD_INT 5
19902: PUSH
19903: LD_INT 70
19905: PUSH
19906: LD_INT 20
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: LIST
19913: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19914: LD_VAR 0 6
19918: PPUSH
19919: CALL_OW 264
19923: PUSH
19924: LD_INT 10
19926: PUSH
19927: EMPTY
19928: LIST
19929: IN
19930: IFFALSE 19951
// points := [ 35 , 110 , 70 ] ;
19932: LD_ADDR_VAR 0 9
19936: PUSH
19937: LD_INT 35
19939: PUSH
19940: LD_INT 110
19942: PUSH
19943: LD_INT 70
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: LIST
19950: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19951: LD_VAR 0 6
19955: PPUSH
19956: CALL_OW 265
19960: PUSH
19961: LD_INT 25
19963: EQUAL
19964: IFFALSE 19985
// points := [ 80 , 65 , 100 ] ;
19966: LD_ADDR_VAR 0 9
19970: PUSH
19971: LD_INT 80
19973: PUSH
19974: LD_INT 65
19976: PUSH
19977: LD_INT 100
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: LIST
19984: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19985: LD_VAR 0 6
19989: PPUSH
19990: CALL_OW 263
19994: PUSH
19995: LD_INT 1
19997: EQUAL
19998: IFFALSE 20033
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20000: LD_ADDR_VAR 0 10
20004: PUSH
20005: LD_VAR 0 10
20009: PUSH
20010: LD_VAR 0 6
20014: PPUSH
20015: CALL_OW 311
20019: PPUSH
20020: LD_INT 3
20022: PPUSH
20023: CALL_OW 259
20027: PUSH
20028: LD_INT 4
20030: MUL
20031: MUL
20032: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20033: LD_VAR 0 6
20037: PPUSH
20038: CALL_OW 263
20042: PUSH
20043: LD_INT 2
20045: EQUAL
20046: IFFALSE 20097
// begin j := IsControledBy ( i ) ;
20048: LD_ADDR_VAR 0 7
20052: PUSH
20053: LD_VAR 0 6
20057: PPUSH
20058: CALL_OW 312
20062: ST_TO_ADDR
// if j then
20063: LD_VAR 0 7
20067: IFFALSE 20097
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20069: LD_ADDR_VAR 0 10
20073: PUSH
20074: LD_VAR 0 10
20078: PUSH
20079: LD_VAR 0 7
20083: PPUSH
20084: LD_INT 3
20086: PPUSH
20087: CALL_OW 259
20091: PUSH
20092: LD_INT 3
20094: MUL
20095: MUL
20096: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20097: LD_VAR 0 6
20101: PPUSH
20102: CALL_OW 264
20106: PUSH
20107: LD_INT 5
20109: PUSH
20110: LD_INT 6
20112: PUSH
20113: LD_INT 46
20115: PUSH
20116: LD_INT 44
20118: PUSH
20119: LD_INT 47
20121: PUSH
20122: LD_INT 45
20124: PUSH
20125: LD_INT 28
20127: PUSH
20128: LD_INT 7
20130: PUSH
20131: LD_INT 27
20133: PUSH
20134: LD_INT 29
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: IN
20149: PUSH
20150: LD_VAR 0 1
20154: PPUSH
20155: LD_INT 52
20157: PPUSH
20158: CALL_OW 321
20162: PUSH
20163: LD_INT 2
20165: EQUAL
20166: AND
20167: IFFALSE 20184
// bpoints := bpoints * 1.2 ;
20169: LD_ADDR_VAR 0 10
20173: PUSH
20174: LD_VAR 0 10
20178: PUSH
20179: LD_REAL  1.20000000000000E+0000
20182: MUL
20183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20184: LD_VAR 0 6
20188: PPUSH
20189: CALL_OW 264
20193: PUSH
20194: LD_INT 6
20196: PUSH
20197: LD_INT 46
20199: PUSH
20200: LD_INT 47
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: LIST
20207: IN
20208: IFFALSE 20225
// bpoints := bpoints * 1.2 ;
20210: LD_ADDR_VAR 0 10
20214: PUSH
20215: LD_VAR 0 10
20219: PUSH
20220: LD_REAL  1.20000000000000E+0000
20223: MUL
20224: ST_TO_ADDR
// end ; unit_building :
20225: GO 20239
20227: LD_INT 3
20229: DOUBLE
20230: EQUAL
20231: IFTRUE 20235
20233: GO 20238
20235: POP
// ; end ;
20236: GO 20239
20238: POP
// for j = 1 to 3 do
20239: LD_ADDR_VAR 0 7
20243: PUSH
20244: DOUBLE
20245: LD_INT 1
20247: DEC
20248: ST_TO_ADDR
20249: LD_INT 3
20251: PUSH
20252: FOR_TO
20253: IFFALSE 20306
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20255: LD_ADDR_VAR 0 5
20259: PUSH
20260: LD_VAR 0 5
20264: PPUSH
20265: LD_VAR 0 7
20269: PPUSH
20270: LD_VAR 0 5
20274: PUSH
20275: LD_VAR 0 7
20279: ARRAY
20280: PUSH
20281: LD_VAR 0 9
20285: PUSH
20286: LD_VAR 0 7
20290: ARRAY
20291: PUSH
20292: LD_VAR 0 10
20296: MUL
20297: PLUS
20298: PPUSH
20299: CALL_OW 1
20303: ST_TO_ADDR
20304: GO 20252
20306: POP
20307: POP
// end ;
20308: GO 18785
20310: POP
20311: POP
// result := Replace ( result , 4 , tmp ) ;
20312: LD_ADDR_VAR 0 5
20316: PUSH
20317: LD_VAR 0 5
20321: PPUSH
20322: LD_INT 4
20324: PPUSH
20325: LD_VAR 0 8
20329: PPUSH
20330: CALL_OW 1
20334: ST_TO_ADDR
// end ;
20335: LD_VAR 0 5
20339: RET
// export function DangerAtRange ( unit , range ) ; begin
20340: LD_INT 0
20342: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20343: LD_ADDR_VAR 0 3
20347: PUSH
20348: LD_VAR 0 1
20352: PPUSH
20353: CALL_OW 255
20357: PPUSH
20358: LD_VAR 0 1
20362: PPUSH
20363: CALL_OW 250
20367: PPUSH
20368: LD_VAR 0 1
20372: PPUSH
20373: CALL_OW 251
20377: PPUSH
20378: LD_VAR 0 2
20382: PPUSH
20383: CALL 18637 0 4
20387: ST_TO_ADDR
// end ;
20388: LD_VAR 0 3
20392: RET
// export function DangerInArea ( side , area ) ; begin
20393: LD_INT 0
20395: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20396: LD_ADDR_VAR 0 3
20400: PUSH
20401: LD_VAR 0 2
20405: PPUSH
20406: LD_INT 81
20408: PUSH
20409: LD_VAR 0 1
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PPUSH
20418: CALL_OW 70
20422: ST_TO_ADDR
// end ;
20423: LD_VAR 0 3
20427: RET
// export function IsExtension ( b ) ; begin
20428: LD_INT 0
20430: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20431: LD_ADDR_VAR 0 2
20435: PUSH
20436: LD_VAR 0 1
20440: PUSH
20441: LD_INT 23
20443: PUSH
20444: LD_INT 20
20446: PUSH
20447: LD_INT 22
20449: PUSH
20450: LD_INT 17
20452: PUSH
20453: LD_INT 24
20455: PUSH
20456: LD_INT 21
20458: PUSH
20459: LD_INT 19
20461: PUSH
20462: LD_INT 16
20464: PUSH
20465: LD_INT 25
20467: PUSH
20468: LD_INT 18
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: IN
20483: ST_TO_ADDR
// end ;
20484: LD_VAR 0 2
20488: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
20489: LD_INT 0
20491: PPUSH
20492: PPUSH
20493: PPUSH
// result := [ ] ;
20494: LD_ADDR_VAR 0 4
20498: PUSH
20499: EMPTY
20500: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20501: LD_ADDR_VAR 0 5
20505: PUSH
20506: LD_VAR 0 2
20510: PPUSH
20511: LD_INT 21
20513: PUSH
20514: LD_INT 3
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PPUSH
20521: CALL_OW 70
20525: ST_TO_ADDR
// if not tmp then
20526: LD_VAR 0 5
20530: NOT
20531: IFFALSE 20535
// exit ;
20533: GO 20599
// if checkLink then
20535: LD_VAR 0 3
20539: IFFALSE 20589
// begin for i in tmp do
20541: LD_ADDR_VAR 0 6
20545: PUSH
20546: LD_VAR 0 5
20550: PUSH
20551: FOR_IN
20552: IFFALSE 20587
// if GetBase ( i ) <> base then
20554: LD_VAR 0 6
20558: PPUSH
20559: CALL_OW 274
20563: PUSH
20564: LD_VAR 0 1
20568: NONEQUAL
20569: IFFALSE 20585
// ComLinkToBase ( base , i ) ;
20571: LD_VAR 0 1
20575: PPUSH
20576: LD_VAR 0 6
20580: PPUSH
20581: CALL_OW 169
20585: GO 20551
20587: POP
20588: POP
// end ; result := tmp ;
20589: LD_ADDR_VAR 0 4
20593: PUSH
20594: LD_VAR 0 5
20598: ST_TO_ADDR
// end ;
20599: LD_VAR 0 4
20603: RET
// export function ComComplete ( units , b ) ; var i ; begin
20604: LD_INT 0
20606: PPUSH
20607: PPUSH
// if not units then
20608: LD_VAR 0 1
20612: NOT
20613: IFFALSE 20617
// exit ;
20615: GO 20707
// for i in units do
20617: LD_ADDR_VAR 0 4
20621: PUSH
20622: LD_VAR 0 1
20626: PUSH
20627: FOR_IN
20628: IFFALSE 20705
// if BuildingStatus ( b ) = bs_build then
20630: LD_VAR 0 2
20634: PPUSH
20635: CALL_OW 461
20639: PUSH
20640: LD_INT 1
20642: EQUAL
20643: IFFALSE 20703
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20645: LD_VAR 0 4
20649: PPUSH
20650: LD_STRING h
20652: PUSH
20653: LD_VAR 0 2
20657: PPUSH
20658: CALL_OW 250
20662: PUSH
20663: LD_VAR 0 2
20667: PPUSH
20668: CALL_OW 251
20672: PUSH
20673: LD_VAR 0 2
20677: PUSH
20678: LD_INT 0
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: PUSH
20696: EMPTY
20697: LIST
20698: PPUSH
20699: CALL_OW 446
20703: GO 20627
20705: POP
20706: POP
// end ;
20707: LD_VAR 0 3
20711: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20712: LD_INT 0
20714: PPUSH
20715: PPUSH
20716: PPUSH
20717: PPUSH
20718: PPUSH
20719: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
20720: LD_VAR 0 1
20724: NOT
20725: PUSH
20726: LD_VAR 0 1
20730: PPUSH
20731: CALL_OW 263
20735: PUSH
20736: LD_INT 2
20738: NONEQUAL
20739: OR
20740: IFFALSE 20744
// exit ;
20742: GO 21060
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20744: LD_ADDR_VAR 0 6
20748: PUSH
20749: LD_INT 22
20751: PUSH
20752: LD_VAR 0 1
20756: PPUSH
20757: CALL_OW 255
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 2
20768: PUSH
20769: LD_INT 30
20771: PUSH
20772: LD_INT 36
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 34
20781: PUSH
20782: LD_INT 31
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: LIST
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PPUSH
20798: CALL_OW 69
20802: ST_TO_ADDR
// if not tmp then
20803: LD_VAR 0 6
20807: NOT
20808: IFFALSE 20812
// exit ;
20810: GO 21060
// result := [ ] ;
20812: LD_ADDR_VAR 0 2
20816: PUSH
20817: EMPTY
20818: ST_TO_ADDR
// for i in tmp do
20819: LD_ADDR_VAR 0 3
20823: PUSH
20824: LD_VAR 0 6
20828: PUSH
20829: FOR_IN
20830: IFFALSE 20901
// begin t := UnitsInside ( i ) ;
20832: LD_ADDR_VAR 0 4
20836: PUSH
20837: LD_VAR 0 3
20841: PPUSH
20842: CALL_OW 313
20846: ST_TO_ADDR
// if t then
20847: LD_VAR 0 4
20851: IFFALSE 20899
// for j in t do
20853: LD_ADDR_VAR 0 7
20857: PUSH
20858: LD_VAR 0 4
20862: PUSH
20863: FOR_IN
20864: IFFALSE 20897
// result := Replace ( result , result + 1 , j ) ;
20866: LD_ADDR_VAR 0 2
20870: PUSH
20871: LD_VAR 0 2
20875: PPUSH
20876: LD_VAR 0 2
20880: PUSH
20881: LD_INT 1
20883: PLUS
20884: PPUSH
20885: LD_VAR 0 7
20889: PPUSH
20890: CALL_OW 1
20894: ST_TO_ADDR
20895: GO 20863
20897: POP
20898: POP
// end ;
20899: GO 20829
20901: POP
20902: POP
// if not result then
20903: LD_VAR 0 2
20907: NOT
20908: IFFALSE 20912
// exit ;
20910: GO 21060
// mech := result [ 1 ] ;
20912: LD_ADDR_VAR 0 5
20916: PUSH
20917: LD_VAR 0 2
20921: PUSH
20922: LD_INT 1
20924: ARRAY
20925: ST_TO_ADDR
// if result > 1 then
20926: LD_VAR 0 2
20930: PUSH
20931: LD_INT 1
20933: GREATER
20934: IFFALSE 21046
// begin for i = 2 to result do
20936: LD_ADDR_VAR 0 3
20940: PUSH
20941: DOUBLE
20942: LD_INT 2
20944: DEC
20945: ST_TO_ADDR
20946: LD_VAR 0 2
20950: PUSH
20951: FOR_TO
20952: IFFALSE 21044
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20954: LD_ADDR_VAR 0 4
20958: PUSH
20959: LD_VAR 0 2
20963: PUSH
20964: LD_VAR 0 3
20968: ARRAY
20969: PPUSH
20970: LD_INT 3
20972: PPUSH
20973: CALL_OW 259
20977: PUSH
20978: LD_VAR 0 2
20982: PUSH
20983: LD_VAR 0 3
20987: ARRAY
20988: PPUSH
20989: CALL_OW 432
20993: MINUS
20994: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20995: LD_VAR 0 4
20999: PUSH
21000: LD_VAR 0 5
21004: PPUSH
21005: LD_INT 3
21007: PPUSH
21008: CALL_OW 259
21012: PUSH
21013: LD_VAR 0 5
21017: PPUSH
21018: CALL_OW 432
21022: MINUS
21023: GREATEREQUAL
21024: IFFALSE 21042
// mech := result [ i ] ;
21026: LD_ADDR_VAR 0 5
21030: PUSH
21031: LD_VAR 0 2
21035: PUSH
21036: LD_VAR 0 3
21040: ARRAY
21041: ST_TO_ADDR
// end ;
21042: GO 20951
21044: POP
21045: POP
// end ; ComLinkTo ( vehicle , mech ) ;
21046: LD_VAR 0 1
21050: PPUSH
21051: LD_VAR 0 5
21055: PPUSH
21056: CALL_OW 135
// end ;
21060: LD_VAR 0 2
21064: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21065: LD_INT 0
21067: PPUSH
21068: PPUSH
21069: PPUSH
21070: PPUSH
21071: PPUSH
21072: PPUSH
21073: PPUSH
21074: PPUSH
21075: PPUSH
21076: PPUSH
21077: PPUSH
21078: PPUSH
21079: PPUSH
// result := [ ] ;
21080: LD_ADDR_VAR 0 7
21084: PUSH
21085: EMPTY
21086: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21087: LD_VAR 0 1
21091: PPUSH
21092: CALL_OW 266
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: IN
21107: NOT
21108: IFFALSE 21112
// exit ;
21110: GO 22746
// if name then
21112: LD_VAR 0 3
21116: IFFALSE 21132
// SetBName ( base_dep , name ) ;
21118: LD_VAR 0 1
21122: PPUSH
21123: LD_VAR 0 3
21127: PPUSH
21128: CALL_OW 500
// base := GetBase ( base_dep ) ;
21132: LD_ADDR_VAR 0 15
21136: PUSH
21137: LD_VAR 0 1
21141: PPUSH
21142: CALL_OW 274
21146: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21147: LD_ADDR_VAR 0 16
21151: PUSH
21152: LD_VAR 0 1
21156: PPUSH
21157: CALL_OW 255
21161: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21162: LD_ADDR_VAR 0 17
21166: PUSH
21167: LD_VAR 0 1
21171: PPUSH
21172: CALL_OW 248
21176: ST_TO_ADDR
// if sources then
21177: LD_VAR 0 5
21181: IFFALSE 21228
// for i = 1 to 3 do
21183: LD_ADDR_VAR 0 8
21187: PUSH
21188: DOUBLE
21189: LD_INT 1
21191: DEC
21192: ST_TO_ADDR
21193: LD_INT 3
21195: PUSH
21196: FOR_TO
21197: IFFALSE 21226
// AddResourceType ( base , i , sources [ i ] ) ;
21199: LD_VAR 0 15
21203: PPUSH
21204: LD_VAR 0 8
21208: PPUSH
21209: LD_VAR 0 5
21213: PUSH
21214: LD_VAR 0 8
21218: ARRAY
21219: PPUSH
21220: CALL_OW 276
21224: GO 21196
21226: POP
21227: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
21228: LD_ADDR_VAR 0 18
21232: PUSH
21233: LD_VAR 0 15
21237: PPUSH
21238: LD_VAR 0 2
21242: PPUSH
21243: LD_INT 1
21245: PPUSH
21246: CALL 20489 0 3
21250: ST_TO_ADDR
// InitHc ;
21251: CALL_OW 19
// InitUc ;
21255: CALL_OW 18
// uc_side := side ;
21259: LD_ADDR_OWVAR 20
21263: PUSH
21264: LD_VAR 0 16
21268: ST_TO_ADDR
// uc_nation := nation ;
21269: LD_ADDR_OWVAR 21
21273: PUSH
21274: LD_VAR 0 17
21278: ST_TO_ADDR
// if buildings then
21279: LD_VAR 0 18
21283: IFFALSE 22605
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21285: LD_ADDR_VAR 0 19
21289: PUSH
21290: LD_VAR 0 18
21294: PPUSH
21295: LD_INT 2
21297: PUSH
21298: LD_INT 30
21300: PUSH
21301: LD_INT 29
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 30
21310: PUSH
21311: LD_INT 30
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: LIST
21322: PPUSH
21323: CALL_OW 72
21327: ST_TO_ADDR
// if tmp then
21328: LD_VAR 0 19
21332: IFFALSE 21380
// for i in tmp do
21334: LD_ADDR_VAR 0 8
21338: PUSH
21339: LD_VAR 0 19
21343: PUSH
21344: FOR_IN
21345: IFFALSE 21378
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21347: LD_VAR 0 8
21351: PPUSH
21352: CALL_OW 250
21356: PPUSH
21357: LD_VAR 0 8
21361: PPUSH
21362: CALL_OW 251
21366: PPUSH
21367: LD_VAR 0 16
21371: PPUSH
21372: CALL_OW 441
21376: GO 21344
21378: POP
21379: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21380: LD_VAR 0 18
21384: PPUSH
21385: LD_INT 2
21387: PUSH
21388: LD_INT 30
21390: PUSH
21391: LD_INT 32
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: LD_INT 30
21400: PUSH
21401: LD_INT 33
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: LIST
21412: PPUSH
21413: CALL_OW 72
21417: IFFALSE 21505
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21419: LD_ADDR_VAR 0 8
21423: PUSH
21424: LD_VAR 0 18
21428: PPUSH
21429: LD_INT 2
21431: PUSH
21432: LD_INT 30
21434: PUSH
21435: LD_INT 32
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 30
21444: PUSH
21445: LD_INT 33
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: LIST
21456: PPUSH
21457: CALL_OW 72
21461: PUSH
21462: FOR_IN
21463: IFFALSE 21503
// begin if not GetBWeapon ( i ) then
21465: LD_VAR 0 8
21469: PPUSH
21470: CALL_OW 269
21474: NOT
21475: IFFALSE 21501
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21477: LD_VAR 0 8
21481: PPUSH
21482: LD_VAR 0 8
21486: PPUSH
21487: LD_VAR 0 2
21491: PPUSH
21492: CALL 22751 0 2
21496: PPUSH
21497: CALL_OW 431
// end ;
21501: GO 21462
21503: POP
21504: POP
// end ; for i = 1 to personel do
21505: LD_ADDR_VAR 0 8
21509: PUSH
21510: DOUBLE
21511: LD_INT 1
21513: DEC
21514: ST_TO_ADDR
21515: LD_VAR 0 6
21519: PUSH
21520: FOR_TO
21521: IFFALSE 22585
// begin if i > 4 then
21523: LD_VAR 0 8
21527: PUSH
21528: LD_INT 4
21530: GREATER
21531: IFFALSE 21535
// break ;
21533: GO 22585
// case i of 1 :
21535: LD_VAR 0 8
21539: PUSH
21540: LD_INT 1
21542: DOUBLE
21543: EQUAL
21544: IFTRUE 21548
21546: GO 21628
21548: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21549: LD_ADDR_VAR 0 12
21553: PUSH
21554: LD_VAR 0 18
21558: PPUSH
21559: LD_INT 22
21561: PUSH
21562: LD_VAR 0 16
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 58
21573: PUSH
21574: EMPTY
21575: LIST
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 30
21582: PUSH
21583: LD_INT 32
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 30
21592: PUSH
21593: LD_INT 4
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 30
21602: PUSH
21603: LD_INT 5
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: PUSH
21616: EMPTY
21617: LIST
21618: LIST
21619: LIST
21620: PPUSH
21621: CALL_OW 72
21625: ST_TO_ADDR
21626: GO 21850
21628: LD_INT 2
21630: DOUBLE
21631: EQUAL
21632: IFTRUE 21636
21634: GO 21698
21636: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21637: LD_ADDR_VAR 0 12
21641: PUSH
21642: LD_VAR 0 18
21646: PPUSH
21647: LD_INT 22
21649: PUSH
21650: LD_VAR 0 16
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 2
21661: PUSH
21662: LD_INT 30
21664: PUSH
21665: LD_INT 0
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 30
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PPUSH
21691: CALL_OW 72
21695: ST_TO_ADDR
21696: GO 21850
21698: LD_INT 3
21700: DOUBLE
21701: EQUAL
21702: IFTRUE 21706
21704: GO 21768
21706: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21707: LD_ADDR_VAR 0 12
21711: PUSH
21712: LD_VAR 0 18
21716: PPUSH
21717: LD_INT 22
21719: PUSH
21720: LD_VAR 0 16
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 2
21731: PUSH
21732: LD_INT 30
21734: PUSH
21735: LD_INT 2
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 30
21744: PUSH
21745: LD_INT 3
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: LIST
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PPUSH
21761: CALL_OW 72
21765: ST_TO_ADDR
21766: GO 21850
21768: LD_INT 4
21770: DOUBLE
21771: EQUAL
21772: IFTRUE 21776
21774: GO 21849
21776: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21777: LD_ADDR_VAR 0 12
21781: PUSH
21782: LD_VAR 0 18
21786: PPUSH
21787: LD_INT 22
21789: PUSH
21790: LD_VAR 0 16
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 2
21801: PUSH
21802: LD_INT 30
21804: PUSH
21805: LD_INT 6
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 30
21814: PUSH
21815: LD_INT 7
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 30
21824: PUSH
21825: LD_INT 8
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PPUSH
21842: CALL_OW 72
21846: ST_TO_ADDR
21847: GO 21850
21849: POP
// if i = 1 then
21850: LD_VAR 0 8
21854: PUSH
21855: LD_INT 1
21857: EQUAL
21858: IFFALSE 21969
// begin tmp := [ ] ;
21860: LD_ADDR_VAR 0 19
21864: PUSH
21865: EMPTY
21866: ST_TO_ADDR
// for j in f do
21867: LD_ADDR_VAR 0 9
21871: PUSH
21872: LD_VAR 0 12
21876: PUSH
21877: FOR_IN
21878: IFFALSE 21951
// if GetBType ( j ) = b_bunker then
21880: LD_VAR 0 9
21884: PPUSH
21885: CALL_OW 266
21889: PUSH
21890: LD_INT 32
21892: EQUAL
21893: IFFALSE 21920
// tmp := Insert ( tmp , 1 , j ) else
21895: LD_ADDR_VAR 0 19
21899: PUSH
21900: LD_VAR 0 19
21904: PPUSH
21905: LD_INT 1
21907: PPUSH
21908: LD_VAR 0 9
21912: PPUSH
21913: CALL_OW 2
21917: ST_TO_ADDR
21918: GO 21949
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21920: LD_ADDR_VAR 0 19
21924: PUSH
21925: LD_VAR 0 19
21929: PPUSH
21930: LD_VAR 0 19
21934: PUSH
21935: LD_INT 1
21937: PLUS
21938: PPUSH
21939: LD_VAR 0 9
21943: PPUSH
21944: CALL_OW 2
21948: ST_TO_ADDR
21949: GO 21877
21951: POP
21952: POP
// if tmp then
21953: LD_VAR 0 19
21957: IFFALSE 21969
// f := tmp ;
21959: LD_ADDR_VAR 0 12
21963: PUSH
21964: LD_VAR 0 19
21968: ST_TO_ADDR
// end ; x := personel [ i ] ;
21969: LD_ADDR_VAR 0 13
21973: PUSH
21974: LD_VAR 0 6
21978: PUSH
21979: LD_VAR 0 8
21983: ARRAY
21984: ST_TO_ADDR
// if x = - 1 then
21985: LD_VAR 0 13
21989: PUSH
21990: LD_INT 1
21992: NEG
21993: EQUAL
21994: IFFALSE 22203
// begin for j in f do
21996: LD_ADDR_VAR 0 9
22000: PUSH
22001: LD_VAR 0 12
22005: PUSH
22006: FOR_IN
22007: IFFALSE 22199
// repeat InitHc ;
22009: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22013: LD_VAR 0 9
22017: PPUSH
22018: CALL_OW 266
22022: PUSH
22023: LD_INT 5
22025: EQUAL
22026: IFFALSE 22096
// begin if UnitsInside ( j ) < 3 then
22028: LD_VAR 0 9
22032: PPUSH
22033: CALL_OW 313
22037: PUSH
22038: LD_INT 3
22040: LESS
22041: IFFALSE 22077
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22043: LD_INT 0
22045: PPUSH
22046: LD_INT 5
22048: PUSH
22049: LD_INT 8
22051: PUSH
22052: LD_INT 9
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: LIST
22059: PUSH
22060: LD_VAR 0 17
22064: ARRAY
22065: PPUSH
22066: LD_VAR 0 4
22070: PPUSH
22071: CALL_OW 380
22075: GO 22094
// PrepareHuman ( false , i , skill ) ;
22077: LD_INT 0
22079: PPUSH
22080: LD_VAR 0 8
22084: PPUSH
22085: LD_VAR 0 4
22089: PPUSH
22090: CALL_OW 380
// end else
22094: GO 22113
// PrepareHuman ( false , i , skill ) ;
22096: LD_INT 0
22098: PPUSH
22099: LD_VAR 0 8
22103: PPUSH
22104: LD_VAR 0 4
22108: PPUSH
22109: CALL_OW 380
// un := CreateHuman ;
22113: LD_ADDR_VAR 0 14
22117: PUSH
22118: CALL_OW 44
22122: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22123: LD_ADDR_VAR 0 7
22127: PUSH
22128: LD_VAR 0 7
22132: PPUSH
22133: LD_INT 1
22135: PPUSH
22136: LD_VAR 0 14
22140: PPUSH
22141: CALL_OW 2
22145: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22146: LD_VAR 0 14
22150: PPUSH
22151: LD_VAR 0 9
22155: PPUSH
22156: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22160: LD_VAR 0 9
22164: PPUSH
22165: CALL_OW 313
22169: PUSH
22170: LD_INT 6
22172: EQUAL
22173: PUSH
22174: LD_VAR 0 9
22178: PPUSH
22179: CALL_OW 266
22183: PUSH
22184: LD_INT 32
22186: PUSH
22187: LD_INT 31
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: IN
22194: OR
22195: IFFALSE 22009
22197: GO 22006
22199: POP
22200: POP
// end else
22201: GO 22583
// for j = 1 to x do
22203: LD_ADDR_VAR 0 9
22207: PUSH
22208: DOUBLE
22209: LD_INT 1
22211: DEC
22212: ST_TO_ADDR
22213: LD_VAR 0 13
22217: PUSH
22218: FOR_TO
22219: IFFALSE 22581
// begin InitHc ;
22221: CALL_OW 19
// if not f then
22225: LD_VAR 0 12
22229: NOT
22230: IFFALSE 22319
// begin PrepareHuman ( false , i , skill ) ;
22232: LD_INT 0
22234: PPUSH
22235: LD_VAR 0 8
22239: PPUSH
22240: LD_VAR 0 4
22244: PPUSH
22245: CALL_OW 380
// un := CreateHuman ;
22249: LD_ADDR_VAR 0 14
22253: PUSH
22254: CALL_OW 44
22258: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22259: LD_ADDR_VAR 0 7
22263: PUSH
22264: LD_VAR 0 7
22268: PPUSH
22269: LD_INT 1
22271: PPUSH
22272: LD_VAR 0 14
22276: PPUSH
22277: CALL_OW 2
22281: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22282: LD_VAR 0 14
22286: PPUSH
22287: LD_VAR 0 1
22291: PPUSH
22292: CALL_OW 250
22296: PPUSH
22297: LD_VAR 0 1
22301: PPUSH
22302: CALL_OW 251
22306: PPUSH
22307: LD_INT 10
22309: PPUSH
22310: LD_INT 0
22312: PPUSH
22313: CALL_OW 50
// continue ;
22317: GO 22218
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22319: LD_VAR 0 12
22323: PUSH
22324: LD_INT 1
22326: ARRAY
22327: PPUSH
22328: CALL_OW 313
22332: PUSH
22333: LD_VAR 0 12
22337: PUSH
22338: LD_INT 1
22340: ARRAY
22341: PPUSH
22342: CALL_OW 266
22346: PUSH
22347: LD_INT 32
22349: PUSH
22350: LD_INT 31
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: IN
22357: AND
22358: PUSH
22359: LD_VAR 0 12
22363: PUSH
22364: LD_INT 1
22366: ARRAY
22367: PPUSH
22368: CALL_OW 313
22372: PUSH
22373: LD_INT 6
22375: EQUAL
22376: OR
22377: IFFALSE 22397
// f := Delete ( f , 1 ) ;
22379: LD_ADDR_VAR 0 12
22383: PUSH
22384: LD_VAR 0 12
22388: PPUSH
22389: LD_INT 1
22391: PPUSH
22392: CALL_OW 3
22396: ST_TO_ADDR
// if not f then
22397: LD_VAR 0 12
22401: NOT
22402: IFFALSE 22420
// begin x := x + 2 ;
22404: LD_ADDR_VAR 0 13
22408: PUSH
22409: LD_VAR 0 13
22413: PUSH
22414: LD_INT 2
22416: PLUS
22417: ST_TO_ADDR
// continue ;
22418: GO 22218
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22420: LD_VAR 0 12
22424: PUSH
22425: LD_INT 1
22427: ARRAY
22428: PPUSH
22429: CALL_OW 266
22433: PUSH
22434: LD_INT 5
22436: EQUAL
22437: IFFALSE 22511
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22439: LD_VAR 0 12
22443: PUSH
22444: LD_INT 1
22446: ARRAY
22447: PPUSH
22448: CALL_OW 313
22452: PUSH
22453: LD_INT 3
22455: LESS
22456: IFFALSE 22492
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22458: LD_INT 0
22460: PPUSH
22461: LD_INT 5
22463: PUSH
22464: LD_INT 8
22466: PUSH
22467: LD_INT 9
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: LIST
22474: PUSH
22475: LD_VAR 0 17
22479: ARRAY
22480: PPUSH
22481: LD_VAR 0 4
22485: PPUSH
22486: CALL_OW 380
22490: GO 22509
// PrepareHuman ( false , i , skill ) ;
22492: LD_INT 0
22494: PPUSH
22495: LD_VAR 0 8
22499: PPUSH
22500: LD_VAR 0 4
22504: PPUSH
22505: CALL_OW 380
// end else
22509: GO 22528
// PrepareHuman ( false , i , skill ) ;
22511: LD_INT 0
22513: PPUSH
22514: LD_VAR 0 8
22518: PPUSH
22519: LD_VAR 0 4
22523: PPUSH
22524: CALL_OW 380
// un := CreateHuman ;
22528: LD_ADDR_VAR 0 14
22532: PUSH
22533: CALL_OW 44
22537: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22538: LD_ADDR_VAR 0 7
22542: PUSH
22543: LD_VAR 0 7
22547: PPUSH
22548: LD_INT 1
22550: PPUSH
22551: LD_VAR 0 14
22555: PPUSH
22556: CALL_OW 2
22560: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22561: LD_VAR 0 14
22565: PPUSH
22566: LD_VAR 0 12
22570: PUSH
22571: LD_INT 1
22573: ARRAY
22574: PPUSH
22575: CALL_OW 52
// end ;
22579: GO 22218
22581: POP
22582: POP
// end ;
22583: GO 21520
22585: POP
22586: POP
// result := result ^ buildings ;
22587: LD_ADDR_VAR 0 7
22591: PUSH
22592: LD_VAR 0 7
22596: PUSH
22597: LD_VAR 0 18
22601: ADD
22602: ST_TO_ADDR
// end else
22603: GO 22746
// begin for i = 1 to personel do
22605: LD_ADDR_VAR 0 8
22609: PUSH
22610: DOUBLE
22611: LD_INT 1
22613: DEC
22614: ST_TO_ADDR
22615: LD_VAR 0 6
22619: PUSH
22620: FOR_TO
22621: IFFALSE 22744
// begin if i > 4 then
22623: LD_VAR 0 8
22627: PUSH
22628: LD_INT 4
22630: GREATER
22631: IFFALSE 22635
// break ;
22633: GO 22744
// x := personel [ i ] ;
22635: LD_ADDR_VAR 0 13
22639: PUSH
22640: LD_VAR 0 6
22644: PUSH
22645: LD_VAR 0 8
22649: ARRAY
22650: ST_TO_ADDR
// if x = - 1 then
22651: LD_VAR 0 13
22655: PUSH
22656: LD_INT 1
22658: NEG
22659: EQUAL
22660: IFFALSE 22664
// continue ;
22662: GO 22620
// PrepareHuman ( false , i , skill ) ;
22664: LD_INT 0
22666: PPUSH
22667: LD_VAR 0 8
22671: PPUSH
22672: LD_VAR 0 4
22676: PPUSH
22677: CALL_OW 380
// un := CreateHuman ;
22681: LD_ADDR_VAR 0 14
22685: PUSH
22686: CALL_OW 44
22690: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22691: LD_VAR 0 14
22695: PPUSH
22696: LD_VAR 0 1
22700: PPUSH
22701: CALL_OW 250
22705: PPUSH
22706: LD_VAR 0 1
22710: PPUSH
22711: CALL_OW 251
22715: PPUSH
22716: LD_INT 10
22718: PPUSH
22719: LD_INT 0
22721: PPUSH
22722: CALL_OW 50
// result := result ^ un ;
22726: LD_ADDR_VAR 0 7
22730: PUSH
22731: LD_VAR 0 7
22735: PUSH
22736: LD_VAR 0 14
22740: ADD
22741: ST_TO_ADDR
// end ;
22742: GO 22620
22744: POP
22745: POP
// end ; end ;
22746: LD_VAR 0 7
22750: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22751: LD_INT 0
22753: PPUSH
22754: PPUSH
22755: PPUSH
22756: PPUSH
22757: PPUSH
22758: PPUSH
22759: PPUSH
22760: PPUSH
22761: PPUSH
22762: PPUSH
22763: PPUSH
22764: PPUSH
22765: PPUSH
22766: PPUSH
22767: PPUSH
22768: PPUSH
// result := false ;
22769: LD_ADDR_VAR 0 3
22773: PUSH
22774: LD_INT 0
22776: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22777: LD_VAR 0 1
22781: NOT
22782: PUSH
22783: LD_VAR 0 1
22787: PPUSH
22788: CALL_OW 266
22792: PUSH
22793: LD_INT 32
22795: PUSH
22796: LD_INT 33
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: IN
22803: NOT
22804: OR
22805: IFFALSE 22809
// exit ;
22807: GO 23918
// nat := GetNation ( tower ) ;
22809: LD_ADDR_VAR 0 12
22813: PUSH
22814: LD_VAR 0 1
22818: PPUSH
22819: CALL_OW 248
22823: ST_TO_ADDR
// side := GetSide ( tower ) ;
22824: LD_ADDR_VAR 0 16
22828: PUSH
22829: LD_VAR 0 1
22833: PPUSH
22834: CALL_OW 255
22838: ST_TO_ADDR
// x := GetX ( tower ) ;
22839: LD_ADDR_VAR 0 10
22843: PUSH
22844: LD_VAR 0 1
22848: PPUSH
22849: CALL_OW 250
22853: ST_TO_ADDR
// y := GetY ( tower ) ;
22854: LD_ADDR_VAR 0 11
22858: PUSH
22859: LD_VAR 0 1
22863: PPUSH
22864: CALL_OW 251
22868: ST_TO_ADDR
// if not x or not y then
22869: LD_VAR 0 10
22873: NOT
22874: PUSH
22875: LD_VAR 0 11
22879: NOT
22880: OR
22881: IFFALSE 22885
// exit ;
22883: GO 23918
// weapon := 0 ;
22885: LD_ADDR_VAR 0 18
22889: PUSH
22890: LD_INT 0
22892: ST_TO_ADDR
// fac_list := [ ] ;
22893: LD_ADDR_VAR 0 17
22897: PUSH
22898: EMPTY
22899: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22900: LD_ADDR_VAR 0 6
22904: PUSH
22905: LD_VAR 0 1
22909: PPUSH
22910: CALL_OW 274
22914: PPUSH
22915: LD_VAR 0 2
22919: PPUSH
22920: LD_INT 0
22922: PPUSH
22923: CALL 20489 0 3
22927: PPUSH
22928: LD_INT 30
22930: PUSH
22931: LD_INT 3
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PPUSH
22938: CALL_OW 72
22942: ST_TO_ADDR
// if not factories then
22943: LD_VAR 0 6
22947: NOT
22948: IFFALSE 22952
// exit ;
22950: GO 23918
// for i in factories do
22952: LD_ADDR_VAR 0 8
22956: PUSH
22957: LD_VAR 0 6
22961: PUSH
22962: FOR_IN
22963: IFFALSE 22988
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22965: LD_ADDR_VAR 0 17
22969: PUSH
22970: LD_VAR 0 17
22974: PUSH
22975: LD_VAR 0 8
22979: PPUSH
22980: CALL_OW 478
22984: UNION
22985: ST_TO_ADDR
22986: GO 22962
22988: POP
22989: POP
// if not fac_list then
22990: LD_VAR 0 17
22994: NOT
22995: IFFALSE 22999
// exit ;
22997: GO 23918
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22999: LD_ADDR_VAR 0 5
23003: PUSH
23004: LD_INT 4
23006: PUSH
23007: LD_INT 5
23009: PUSH
23010: LD_INT 9
23012: PUSH
23013: LD_INT 10
23015: PUSH
23016: LD_INT 6
23018: PUSH
23019: LD_INT 7
23021: PUSH
23022: LD_INT 11
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: PUSH
23034: LD_INT 27
23036: PUSH
23037: LD_INT 28
23039: PUSH
23040: LD_INT 26
23042: PUSH
23043: LD_INT 30
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 43
23054: PUSH
23055: LD_INT 44
23057: PUSH
23058: LD_INT 46
23060: PUSH
23061: LD_INT 45
23063: PUSH
23064: LD_INT 47
23066: PUSH
23067: LD_INT 49
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: LIST
23082: PUSH
23083: LD_VAR 0 12
23087: ARRAY
23088: ST_TO_ADDR
// list := list isect fac_list ;
23089: LD_ADDR_VAR 0 5
23093: PUSH
23094: LD_VAR 0 5
23098: PUSH
23099: LD_VAR 0 17
23103: ISECT
23104: ST_TO_ADDR
// if not list then
23105: LD_VAR 0 5
23109: NOT
23110: IFFALSE 23114
// exit ;
23112: GO 23918
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23114: LD_VAR 0 12
23118: PUSH
23119: LD_INT 3
23121: EQUAL
23122: PUSH
23123: LD_INT 49
23125: PUSH
23126: LD_VAR 0 5
23130: IN
23131: AND
23132: PUSH
23133: LD_INT 31
23135: PPUSH
23136: LD_VAR 0 16
23140: PPUSH
23141: CALL_OW 321
23145: PUSH
23146: LD_INT 2
23148: EQUAL
23149: AND
23150: IFFALSE 23210
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23152: LD_INT 22
23154: PUSH
23155: LD_VAR 0 16
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 35
23166: PUSH
23167: LD_INT 49
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 91
23176: PUSH
23177: LD_VAR 0 1
23181: PUSH
23182: LD_INT 10
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: LIST
23194: PPUSH
23195: CALL_OW 69
23199: NOT
23200: IFFALSE 23210
// weapon := ru_time_lapser ;
23202: LD_ADDR_VAR 0 18
23206: PUSH
23207: LD_INT 49
23209: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23210: LD_VAR 0 12
23214: PUSH
23215: LD_INT 1
23217: PUSH
23218: LD_INT 2
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: IN
23225: PUSH
23226: LD_INT 11
23228: PUSH
23229: LD_VAR 0 5
23233: IN
23234: PUSH
23235: LD_INT 30
23237: PUSH
23238: LD_VAR 0 5
23242: IN
23243: OR
23244: AND
23245: PUSH
23246: LD_INT 6
23248: PPUSH
23249: LD_VAR 0 16
23253: PPUSH
23254: CALL_OW 321
23258: PUSH
23259: LD_INT 2
23261: EQUAL
23262: AND
23263: IFFALSE 23428
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23265: LD_INT 22
23267: PUSH
23268: LD_VAR 0 16
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 2
23279: PUSH
23280: LD_INT 35
23282: PUSH
23283: LD_INT 11
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: PUSH
23290: LD_INT 35
23292: PUSH
23293: LD_INT 30
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 91
23307: PUSH
23308: LD_VAR 0 1
23312: PUSH
23313: LD_INT 18
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: LIST
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: LIST
23325: PPUSH
23326: CALL_OW 69
23330: NOT
23331: PUSH
23332: LD_INT 22
23334: PUSH
23335: LD_VAR 0 16
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 2
23346: PUSH
23347: LD_INT 30
23349: PUSH
23350: LD_INT 32
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 30
23359: PUSH
23360: LD_INT 33
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 91
23374: PUSH
23375: LD_VAR 0 1
23379: PUSH
23380: LD_INT 12
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: PUSH
23393: EMPTY
23394: LIST
23395: PPUSH
23396: CALL_OW 69
23400: PUSH
23401: LD_INT 2
23403: GREATER
23404: AND
23405: IFFALSE 23428
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23407: LD_ADDR_VAR 0 18
23411: PUSH
23412: LD_INT 11
23414: PUSH
23415: LD_INT 30
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_VAR 0 12
23426: ARRAY
23427: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23428: LD_VAR 0 18
23432: NOT
23433: PUSH
23434: LD_INT 40
23436: PPUSH
23437: LD_VAR 0 16
23441: PPUSH
23442: CALL_OW 321
23446: PUSH
23447: LD_INT 2
23449: EQUAL
23450: AND
23451: PUSH
23452: LD_INT 7
23454: PUSH
23455: LD_VAR 0 5
23459: IN
23460: PUSH
23461: LD_INT 28
23463: PUSH
23464: LD_VAR 0 5
23468: IN
23469: OR
23470: PUSH
23471: LD_INT 45
23473: PUSH
23474: LD_VAR 0 5
23478: IN
23479: OR
23480: AND
23481: IFFALSE 23735
// begin hex := GetHexInfo ( x , y ) ;
23483: LD_ADDR_VAR 0 4
23487: PUSH
23488: LD_VAR 0 10
23492: PPUSH
23493: LD_VAR 0 11
23497: PPUSH
23498: CALL_OW 546
23502: ST_TO_ADDR
// if hex [ 1 ] then
23503: LD_VAR 0 4
23507: PUSH
23508: LD_INT 1
23510: ARRAY
23511: IFFALSE 23515
// exit ;
23513: GO 23918
// height := hex [ 2 ] ;
23515: LD_ADDR_VAR 0 15
23519: PUSH
23520: LD_VAR 0 4
23524: PUSH
23525: LD_INT 2
23527: ARRAY
23528: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23529: LD_ADDR_VAR 0 14
23533: PUSH
23534: LD_INT 0
23536: PUSH
23537: LD_INT 2
23539: PUSH
23540: LD_INT 3
23542: PUSH
23543: LD_INT 5
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: ST_TO_ADDR
// for i in tmp do
23552: LD_ADDR_VAR 0 8
23556: PUSH
23557: LD_VAR 0 14
23561: PUSH
23562: FOR_IN
23563: IFFALSE 23733
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23565: LD_ADDR_VAR 0 9
23569: PUSH
23570: LD_VAR 0 10
23574: PPUSH
23575: LD_VAR 0 8
23579: PPUSH
23580: LD_INT 5
23582: PPUSH
23583: CALL_OW 272
23587: PUSH
23588: LD_VAR 0 11
23592: PPUSH
23593: LD_VAR 0 8
23597: PPUSH
23598: LD_INT 5
23600: PPUSH
23601: CALL_OW 273
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23610: LD_VAR 0 9
23614: PUSH
23615: LD_INT 1
23617: ARRAY
23618: PPUSH
23619: LD_VAR 0 9
23623: PUSH
23624: LD_INT 2
23626: ARRAY
23627: PPUSH
23628: CALL_OW 488
23632: IFFALSE 23731
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23634: LD_ADDR_VAR 0 4
23638: PUSH
23639: LD_VAR 0 9
23643: PUSH
23644: LD_INT 1
23646: ARRAY
23647: PPUSH
23648: LD_VAR 0 9
23652: PUSH
23653: LD_INT 2
23655: ARRAY
23656: PPUSH
23657: CALL_OW 546
23661: ST_TO_ADDR
// if hex [ 1 ] then
23662: LD_VAR 0 4
23666: PUSH
23667: LD_INT 1
23669: ARRAY
23670: IFFALSE 23674
// continue ;
23672: GO 23562
// h := hex [ 2 ] ;
23674: LD_ADDR_VAR 0 13
23678: PUSH
23679: LD_VAR 0 4
23683: PUSH
23684: LD_INT 2
23686: ARRAY
23687: ST_TO_ADDR
// if h + 7 < height then
23688: LD_VAR 0 13
23692: PUSH
23693: LD_INT 7
23695: PLUS
23696: PUSH
23697: LD_VAR 0 15
23701: LESS
23702: IFFALSE 23731
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23704: LD_ADDR_VAR 0 18
23708: PUSH
23709: LD_INT 7
23711: PUSH
23712: LD_INT 28
23714: PUSH
23715: LD_INT 45
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: LIST
23722: PUSH
23723: LD_VAR 0 12
23727: ARRAY
23728: ST_TO_ADDR
// break ;
23729: GO 23733
// end ; end ; end ;
23731: GO 23562
23733: POP
23734: POP
// end ; if not weapon then
23735: LD_VAR 0 18
23739: NOT
23740: IFFALSE 23800
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23742: LD_ADDR_VAR 0 5
23746: PUSH
23747: LD_VAR 0 5
23751: PUSH
23752: LD_INT 11
23754: PUSH
23755: LD_INT 30
23757: PUSH
23758: LD_INT 49
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: LIST
23765: DIFF
23766: ST_TO_ADDR
// if not list then
23767: LD_VAR 0 5
23771: NOT
23772: IFFALSE 23776
// exit ;
23774: GO 23918
// weapon := list [ rand ( 1 , list ) ] ;
23776: LD_ADDR_VAR 0 18
23780: PUSH
23781: LD_VAR 0 5
23785: PUSH
23786: LD_INT 1
23788: PPUSH
23789: LD_VAR 0 5
23793: PPUSH
23794: CALL_OW 12
23798: ARRAY
23799: ST_TO_ADDR
// end ; if weapon then
23800: LD_VAR 0 18
23804: IFFALSE 23918
// begin tmp := CostOfWeapon ( weapon ) ;
23806: LD_ADDR_VAR 0 14
23810: PUSH
23811: LD_VAR 0 18
23815: PPUSH
23816: CALL_OW 451
23820: ST_TO_ADDR
// j := GetBase ( tower ) ;
23821: LD_ADDR_VAR 0 9
23825: PUSH
23826: LD_VAR 0 1
23830: PPUSH
23831: CALL_OW 274
23835: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23836: LD_VAR 0 9
23840: PPUSH
23841: LD_INT 1
23843: PPUSH
23844: CALL_OW 275
23848: PUSH
23849: LD_VAR 0 14
23853: PUSH
23854: LD_INT 1
23856: ARRAY
23857: GREATEREQUAL
23858: PUSH
23859: LD_VAR 0 9
23863: PPUSH
23864: LD_INT 2
23866: PPUSH
23867: CALL_OW 275
23871: PUSH
23872: LD_VAR 0 14
23876: PUSH
23877: LD_INT 2
23879: ARRAY
23880: GREATEREQUAL
23881: AND
23882: PUSH
23883: LD_VAR 0 9
23887: PPUSH
23888: LD_INT 3
23890: PPUSH
23891: CALL_OW 275
23895: PUSH
23896: LD_VAR 0 14
23900: PUSH
23901: LD_INT 3
23903: ARRAY
23904: GREATEREQUAL
23905: AND
23906: IFFALSE 23918
// result := weapon ;
23908: LD_ADDR_VAR 0 3
23912: PUSH
23913: LD_VAR 0 18
23917: ST_TO_ADDR
// end ; end ;
23918: LD_VAR 0 3
23922: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23923: LD_INT 0
23925: PPUSH
23926: PPUSH
// result := true ;
23927: LD_ADDR_VAR 0 3
23931: PUSH
23932: LD_INT 1
23934: ST_TO_ADDR
// if array1 = array2 then
23935: LD_VAR 0 1
23939: PUSH
23940: LD_VAR 0 2
23944: EQUAL
23945: IFFALSE 24005
// begin for i = 1 to array1 do
23947: LD_ADDR_VAR 0 4
23951: PUSH
23952: DOUBLE
23953: LD_INT 1
23955: DEC
23956: ST_TO_ADDR
23957: LD_VAR 0 1
23961: PUSH
23962: FOR_TO
23963: IFFALSE 24001
// if array1 [ i ] <> array2 [ i ] then
23965: LD_VAR 0 1
23969: PUSH
23970: LD_VAR 0 4
23974: ARRAY
23975: PUSH
23976: LD_VAR 0 2
23980: PUSH
23981: LD_VAR 0 4
23985: ARRAY
23986: NONEQUAL
23987: IFFALSE 23999
// begin result := false ;
23989: LD_ADDR_VAR 0 3
23993: PUSH
23994: LD_INT 0
23996: ST_TO_ADDR
// break ;
23997: GO 24001
// end ;
23999: GO 23962
24001: POP
24002: POP
// end else
24003: GO 24013
// result := false ;
24005: LD_ADDR_VAR 0 3
24009: PUSH
24010: LD_INT 0
24012: ST_TO_ADDR
// end ;
24013: LD_VAR 0 3
24017: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
24018: LD_INT 0
24020: PPUSH
24021: PPUSH
// if not array1 or not array2 then
24022: LD_VAR 0 1
24026: NOT
24027: PUSH
24028: LD_VAR 0 2
24032: NOT
24033: OR
24034: IFFALSE 24038
// exit ;
24036: GO 24102
// result := true ;
24038: LD_ADDR_VAR 0 3
24042: PUSH
24043: LD_INT 1
24045: ST_TO_ADDR
// for i = 1 to array1 do
24046: LD_ADDR_VAR 0 4
24050: PUSH
24051: DOUBLE
24052: LD_INT 1
24054: DEC
24055: ST_TO_ADDR
24056: LD_VAR 0 1
24060: PUSH
24061: FOR_TO
24062: IFFALSE 24100
// if array1 [ i ] <> array2 [ i ] then
24064: LD_VAR 0 1
24068: PUSH
24069: LD_VAR 0 4
24073: ARRAY
24074: PUSH
24075: LD_VAR 0 2
24079: PUSH
24080: LD_VAR 0 4
24084: ARRAY
24085: NONEQUAL
24086: IFFALSE 24098
// begin result := false ;
24088: LD_ADDR_VAR 0 3
24092: PUSH
24093: LD_INT 0
24095: ST_TO_ADDR
// break ;
24096: GO 24100
// end ;
24098: GO 24061
24100: POP
24101: POP
// end ;
24102: LD_VAR 0 3
24106: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24107: LD_INT 0
24109: PPUSH
24110: PPUSH
24111: PPUSH
// pom := GetBase ( fac ) ;
24112: LD_ADDR_VAR 0 5
24116: PUSH
24117: LD_VAR 0 1
24121: PPUSH
24122: CALL_OW 274
24126: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24127: LD_ADDR_VAR 0 4
24131: PUSH
24132: LD_VAR 0 2
24136: PUSH
24137: LD_INT 1
24139: ARRAY
24140: PPUSH
24141: LD_VAR 0 2
24145: PUSH
24146: LD_INT 2
24148: ARRAY
24149: PPUSH
24150: LD_VAR 0 2
24154: PUSH
24155: LD_INT 3
24157: ARRAY
24158: PPUSH
24159: LD_VAR 0 2
24163: PUSH
24164: LD_INT 4
24166: ARRAY
24167: PPUSH
24168: CALL_OW 449
24172: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24173: LD_ADDR_VAR 0 3
24177: PUSH
24178: LD_VAR 0 5
24182: PPUSH
24183: LD_INT 1
24185: PPUSH
24186: CALL_OW 275
24190: PUSH
24191: LD_VAR 0 4
24195: PUSH
24196: LD_INT 1
24198: ARRAY
24199: GREATEREQUAL
24200: PUSH
24201: LD_VAR 0 5
24205: PPUSH
24206: LD_INT 2
24208: PPUSH
24209: CALL_OW 275
24213: PUSH
24214: LD_VAR 0 4
24218: PUSH
24219: LD_INT 2
24221: ARRAY
24222: GREATEREQUAL
24223: AND
24224: PUSH
24225: LD_VAR 0 5
24229: PPUSH
24230: LD_INT 3
24232: PPUSH
24233: CALL_OW 275
24237: PUSH
24238: LD_VAR 0 4
24242: PUSH
24243: LD_INT 3
24245: ARRAY
24246: GREATEREQUAL
24247: AND
24248: ST_TO_ADDR
// end ;
24249: LD_VAR 0 3
24253: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24254: LD_INT 0
24256: PPUSH
24257: PPUSH
24258: PPUSH
24259: PPUSH
// pom := GetBase ( building ) ;
24260: LD_ADDR_VAR 0 3
24264: PUSH
24265: LD_VAR 0 1
24269: PPUSH
24270: CALL_OW 274
24274: ST_TO_ADDR
// if not pom then
24275: LD_VAR 0 3
24279: NOT
24280: IFFALSE 24284
// exit ;
24282: GO 24454
// btype := GetBType ( building ) ;
24284: LD_ADDR_VAR 0 5
24288: PUSH
24289: LD_VAR 0 1
24293: PPUSH
24294: CALL_OW 266
24298: ST_TO_ADDR
// if btype = b_armoury then
24299: LD_VAR 0 5
24303: PUSH
24304: LD_INT 4
24306: EQUAL
24307: IFFALSE 24317
// btype := b_barracks ;
24309: LD_ADDR_VAR 0 5
24313: PUSH
24314: LD_INT 5
24316: ST_TO_ADDR
// if btype = b_depot then
24317: LD_VAR 0 5
24321: PUSH
24322: LD_INT 0
24324: EQUAL
24325: IFFALSE 24335
// btype := b_warehouse ;
24327: LD_ADDR_VAR 0 5
24331: PUSH
24332: LD_INT 1
24334: ST_TO_ADDR
// if btype = b_workshop then
24335: LD_VAR 0 5
24339: PUSH
24340: LD_INT 2
24342: EQUAL
24343: IFFALSE 24353
// btype := b_factory ;
24345: LD_ADDR_VAR 0 5
24349: PUSH
24350: LD_INT 3
24352: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24353: LD_ADDR_VAR 0 4
24357: PUSH
24358: LD_VAR 0 5
24362: PPUSH
24363: LD_VAR 0 1
24367: PPUSH
24368: CALL_OW 248
24372: PPUSH
24373: CALL_OW 450
24377: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24378: LD_ADDR_VAR 0 2
24382: PUSH
24383: LD_VAR 0 3
24387: PPUSH
24388: LD_INT 1
24390: PPUSH
24391: CALL_OW 275
24395: PUSH
24396: LD_VAR 0 4
24400: PUSH
24401: LD_INT 1
24403: ARRAY
24404: GREATEREQUAL
24405: PUSH
24406: LD_VAR 0 3
24410: PPUSH
24411: LD_INT 2
24413: PPUSH
24414: CALL_OW 275
24418: PUSH
24419: LD_VAR 0 4
24423: PUSH
24424: LD_INT 2
24426: ARRAY
24427: GREATEREQUAL
24428: AND
24429: PUSH
24430: LD_VAR 0 3
24434: PPUSH
24435: LD_INT 3
24437: PPUSH
24438: CALL_OW 275
24442: PUSH
24443: LD_VAR 0 4
24447: PUSH
24448: LD_INT 3
24450: ARRAY
24451: GREATEREQUAL
24452: AND
24453: ST_TO_ADDR
// end ;
24454: LD_VAR 0 2
24458: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24459: LD_INT 0
24461: PPUSH
24462: PPUSH
24463: PPUSH
// pom := GetBase ( building ) ;
24464: LD_ADDR_VAR 0 4
24468: PUSH
24469: LD_VAR 0 1
24473: PPUSH
24474: CALL_OW 274
24478: ST_TO_ADDR
// if not pom then
24479: LD_VAR 0 4
24483: NOT
24484: IFFALSE 24488
// exit ;
24486: GO 24589
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24488: LD_ADDR_VAR 0 5
24492: PUSH
24493: LD_VAR 0 2
24497: PPUSH
24498: LD_VAR 0 1
24502: PPUSH
24503: CALL_OW 248
24507: PPUSH
24508: CALL_OW 450
24512: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24513: LD_ADDR_VAR 0 3
24517: PUSH
24518: LD_VAR 0 4
24522: PPUSH
24523: LD_INT 1
24525: PPUSH
24526: CALL_OW 275
24530: PUSH
24531: LD_VAR 0 5
24535: PUSH
24536: LD_INT 1
24538: ARRAY
24539: GREATEREQUAL
24540: PUSH
24541: LD_VAR 0 4
24545: PPUSH
24546: LD_INT 2
24548: PPUSH
24549: CALL_OW 275
24553: PUSH
24554: LD_VAR 0 5
24558: PUSH
24559: LD_INT 2
24561: ARRAY
24562: GREATEREQUAL
24563: AND
24564: PUSH
24565: LD_VAR 0 4
24569: PPUSH
24570: LD_INT 3
24572: PPUSH
24573: CALL_OW 275
24577: PUSH
24578: LD_VAR 0 5
24582: PUSH
24583: LD_INT 3
24585: ARRAY
24586: GREATEREQUAL
24587: AND
24588: ST_TO_ADDR
// end ;
24589: LD_VAR 0 3
24593: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
24594: LD_INT 0
24596: PPUSH
24597: PPUSH
24598: PPUSH
24599: PPUSH
24600: PPUSH
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
24606: PPUSH
// result := false ;
24607: LD_ADDR_VAR 0 8
24611: PUSH
24612: LD_INT 0
24614: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
24615: LD_VAR 0 5
24619: NOT
24620: PUSH
24621: LD_VAR 0 1
24625: NOT
24626: OR
24627: PUSH
24628: LD_VAR 0 2
24632: NOT
24633: OR
24634: PUSH
24635: LD_VAR 0 3
24639: NOT
24640: OR
24641: IFFALSE 24645
// exit ;
24643: GO 25459
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
24645: LD_ADDR_VAR 0 14
24649: PUSH
24650: LD_VAR 0 1
24654: PPUSH
24655: LD_VAR 0 2
24659: PPUSH
24660: LD_VAR 0 3
24664: PPUSH
24665: LD_VAR 0 4
24669: PPUSH
24670: LD_VAR 0 5
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: PPUSH
24679: CALL_OW 248
24683: PPUSH
24684: LD_INT 0
24686: PPUSH
24687: CALL 26696 0 6
24691: ST_TO_ADDR
// if not hexes then
24692: LD_VAR 0 14
24696: NOT
24697: IFFALSE 24701
// exit ;
24699: GO 25459
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24701: LD_ADDR_VAR 0 17
24705: PUSH
24706: LD_VAR 0 5
24710: PPUSH
24711: LD_INT 22
24713: PUSH
24714: LD_VAR 0 13
24718: PPUSH
24719: CALL_OW 255
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 2
24730: PUSH
24731: LD_INT 30
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: LD_INT 30
24743: PUSH
24744: LD_INT 1
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: LIST
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PPUSH
24760: CALL_OW 72
24764: ST_TO_ADDR
// for i = 1 to hexes do
24765: LD_ADDR_VAR 0 9
24769: PUSH
24770: DOUBLE
24771: LD_INT 1
24773: DEC
24774: ST_TO_ADDR
24775: LD_VAR 0 14
24779: PUSH
24780: FOR_TO
24781: IFFALSE 25457
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24783: LD_ADDR_VAR 0 13
24787: PUSH
24788: LD_VAR 0 14
24792: PUSH
24793: LD_VAR 0 9
24797: ARRAY
24798: PUSH
24799: LD_INT 1
24801: ARRAY
24802: PPUSH
24803: LD_VAR 0 14
24807: PUSH
24808: LD_VAR 0 9
24812: ARRAY
24813: PUSH
24814: LD_INT 2
24816: ARRAY
24817: PPUSH
24818: CALL_OW 428
24822: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24823: LD_VAR 0 14
24827: PUSH
24828: LD_VAR 0 9
24832: ARRAY
24833: PUSH
24834: LD_INT 1
24836: ARRAY
24837: PPUSH
24838: LD_VAR 0 14
24842: PUSH
24843: LD_VAR 0 9
24847: ARRAY
24848: PUSH
24849: LD_INT 2
24851: ARRAY
24852: PPUSH
24853: CALL_OW 351
24857: PUSH
24858: LD_VAR 0 14
24862: PUSH
24863: LD_VAR 0 9
24867: ARRAY
24868: PUSH
24869: LD_INT 1
24871: ARRAY
24872: PPUSH
24873: LD_VAR 0 14
24877: PUSH
24878: LD_VAR 0 9
24882: ARRAY
24883: PUSH
24884: LD_INT 2
24886: ARRAY
24887: PPUSH
24888: CALL_OW 488
24892: NOT
24893: OR
24894: PUSH
24895: LD_VAR 0 13
24899: PPUSH
24900: CALL_OW 247
24904: PUSH
24905: LD_INT 3
24907: EQUAL
24908: OR
24909: IFFALSE 24915
// exit ;
24911: POP
24912: POP
24913: GO 25459
// if not tmp then
24915: LD_VAR 0 13
24919: NOT
24920: IFFALSE 24924
// continue ;
24922: GO 24780
// result := true ;
24924: LD_ADDR_VAR 0 8
24928: PUSH
24929: LD_INT 1
24931: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24932: LD_VAR 0 6
24936: PUSH
24937: LD_VAR 0 13
24941: PPUSH
24942: CALL_OW 247
24946: PUSH
24947: LD_INT 2
24949: EQUAL
24950: AND
24951: PUSH
24952: LD_VAR 0 13
24956: PPUSH
24957: CALL_OW 263
24961: PUSH
24962: LD_INT 1
24964: EQUAL
24965: AND
24966: IFFALSE 25130
// begin if IsDrivenBy ( tmp ) then
24968: LD_VAR 0 13
24972: PPUSH
24973: CALL_OW 311
24977: IFFALSE 24981
// continue ;
24979: GO 24780
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24981: LD_VAR 0 6
24985: PPUSH
24986: LD_INT 3
24988: PUSH
24989: LD_INT 60
24991: PUSH
24992: EMPTY
24993: LIST
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 3
25001: PUSH
25002: LD_INT 55
25004: PUSH
25005: EMPTY
25006: LIST
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PPUSH
25016: CALL_OW 72
25020: IFFALSE 25128
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
25022: LD_ADDR_VAR 0 18
25026: PUSH
25027: LD_VAR 0 6
25031: PPUSH
25032: LD_INT 3
25034: PUSH
25035: LD_INT 60
25037: PUSH
25038: EMPTY
25039: LIST
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 3
25047: PUSH
25048: LD_INT 55
25050: PUSH
25051: EMPTY
25052: LIST
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PPUSH
25062: CALL_OW 72
25066: PUSH
25067: LD_INT 1
25069: ARRAY
25070: ST_TO_ADDR
// if IsInUnit ( driver ) then
25071: LD_VAR 0 18
25075: PPUSH
25076: CALL_OW 310
25080: IFFALSE 25091
// ComExit ( driver ) ;
25082: LD_VAR 0 18
25086: PPUSH
25087: CALL 49824 0 1
// AddComEnterUnit ( driver , tmp ) ;
25091: LD_VAR 0 18
25095: PPUSH
25096: LD_VAR 0 13
25100: PPUSH
25101: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
25105: LD_VAR 0 18
25109: PPUSH
25110: LD_VAR 0 7
25114: PPUSH
25115: CALL_OW 173
// AddComExitVehicle ( driver ) ;
25119: LD_VAR 0 18
25123: PPUSH
25124: CALL_OW 181
// end ; continue ;
25128: GO 24780
// end ; if not cleaners or not tmp in cleaners then
25130: LD_VAR 0 6
25134: NOT
25135: PUSH
25136: LD_VAR 0 13
25140: PUSH
25141: LD_VAR 0 6
25145: IN
25146: NOT
25147: OR
25148: IFFALSE 25455
// begin if dep then
25150: LD_VAR 0 17
25154: IFFALSE 25290
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25156: LD_ADDR_VAR 0 16
25160: PUSH
25161: LD_VAR 0 17
25165: PUSH
25166: LD_INT 1
25168: ARRAY
25169: PPUSH
25170: CALL_OW 250
25174: PPUSH
25175: LD_VAR 0 17
25179: PUSH
25180: LD_INT 1
25182: ARRAY
25183: PPUSH
25184: CALL_OW 254
25188: PPUSH
25189: LD_INT 5
25191: PPUSH
25192: CALL_OW 272
25196: PUSH
25197: LD_VAR 0 17
25201: PUSH
25202: LD_INT 1
25204: ARRAY
25205: PPUSH
25206: CALL_OW 251
25210: PPUSH
25211: LD_VAR 0 17
25215: PUSH
25216: LD_INT 1
25218: ARRAY
25219: PPUSH
25220: CALL_OW 254
25224: PPUSH
25225: LD_INT 5
25227: PPUSH
25228: CALL_OW 273
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25237: LD_VAR 0 16
25241: PUSH
25242: LD_INT 1
25244: ARRAY
25245: PPUSH
25246: LD_VAR 0 16
25250: PUSH
25251: LD_INT 2
25253: ARRAY
25254: PPUSH
25255: CALL_OW 488
25259: IFFALSE 25290
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25261: LD_VAR 0 13
25265: PPUSH
25266: LD_VAR 0 16
25270: PUSH
25271: LD_INT 1
25273: ARRAY
25274: PPUSH
25275: LD_VAR 0 16
25279: PUSH
25280: LD_INT 2
25282: ARRAY
25283: PPUSH
25284: CALL_OW 111
// continue ;
25288: GO 24780
// end ; end ; r := GetDir ( tmp ) ;
25290: LD_ADDR_VAR 0 15
25294: PUSH
25295: LD_VAR 0 13
25299: PPUSH
25300: CALL_OW 254
25304: ST_TO_ADDR
// if r = 5 then
25305: LD_VAR 0 15
25309: PUSH
25310: LD_INT 5
25312: EQUAL
25313: IFFALSE 25323
// r := 0 ;
25315: LD_ADDR_VAR 0 15
25319: PUSH
25320: LD_INT 0
25322: ST_TO_ADDR
// for j = r to 5 do
25323: LD_ADDR_VAR 0 10
25327: PUSH
25328: DOUBLE
25329: LD_VAR 0 15
25333: DEC
25334: ST_TO_ADDR
25335: LD_INT 5
25337: PUSH
25338: FOR_TO
25339: IFFALSE 25453
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25341: LD_ADDR_VAR 0 11
25345: PUSH
25346: LD_VAR 0 13
25350: PPUSH
25351: CALL_OW 250
25355: PPUSH
25356: LD_VAR 0 10
25360: PPUSH
25361: LD_INT 2
25363: PPUSH
25364: CALL_OW 272
25368: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25369: LD_ADDR_VAR 0 12
25373: PUSH
25374: LD_VAR 0 13
25378: PPUSH
25379: CALL_OW 251
25383: PPUSH
25384: LD_VAR 0 10
25388: PPUSH
25389: LD_INT 2
25391: PPUSH
25392: CALL_OW 273
25396: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25397: LD_VAR 0 11
25401: PPUSH
25402: LD_VAR 0 12
25406: PPUSH
25407: CALL_OW 488
25411: PUSH
25412: LD_VAR 0 11
25416: PPUSH
25417: LD_VAR 0 12
25421: PPUSH
25422: CALL_OW 428
25426: NOT
25427: AND
25428: IFFALSE 25451
// begin ComMoveXY ( tmp , _x , _y ) ;
25430: LD_VAR 0 13
25434: PPUSH
25435: LD_VAR 0 11
25439: PPUSH
25440: LD_VAR 0 12
25444: PPUSH
25445: CALL_OW 111
// break ;
25449: GO 25453
// end ; end ;
25451: GO 25338
25453: POP
25454: POP
// end ; end ;
25455: GO 24780
25457: POP
25458: POP
// end ;
25459: LD_VAR 0 8
25463: RET
// export function BuildingTechInvented ( side , btype ) ; begin
25464: LD_INT 0
25466: PPUSH
// result := true ;
25467: LD_ADDR_VAR 0 3
25471: PUSH
25472: LD_INT 1
25474: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
25475: LD_VAR 0 2
25479: PUSH
25480: LD_INT 24
25482: DOUBLE
25483: EQUAL
25484: IFTRUE 25494
25486: LD_INT 33
25488: DOUBLE
25489: EQUAL
25490: IFTRUE 25494
25492: GO 25519
25494: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
25495: LD_ADDR_VAR 0 3
25499: PUSH
25500: LD_INT 32
25502: PPUSH
25503: LD_VAR 0 1
25507: PPUSH
25508: CALL_OW 321
25512: PUSH
25513: LD_INT 2
25515: EQUAL
25516: ST_TO_ADDR
25517: GO 25839
25519: LD_INT 20
25521: DOUBLE
25522: EQUAL
25523: IFTRUE 25527
25525: GO 25552
25527: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
25528: LD_ADDR_VAR 0 3
25532: PUSH
25533: LD_INT 6
25535: PPUSH
25536: LD_VAR 0 1
25540: PPUSH
25541: CALL_OW 321
25545: PUSH
25546: LD_INT 2
25548: EQUAL
25549: ST_TO_ADDR
25550: GO 25839
25552: LD_INT 22
25554: DOUBLE
25555: EQUAL
25556: IFTRUE 25566
25558: LD_INT 36
25560: DOUBLE
25561: EQUAL
25562: IFTRUE 25566
25564: GO 25591
25566: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
25567: LD_ADDR_VAR 0 3
25571: PUSH
25572: LD_INT 15
25574: PPUSH
25575: LD_VAR 0 1
25579: PPUSH
25580: CALL_OW 321
25584: PUSH
25585: LD_INT 2
25587: EQUAL
25588: ST_TO_ADDR
25589: GO 25839
25591: LD_INT 30
25593: DOUBLE
25594: EQUAL
25595: IFTRUE 25599
25597: GO 25624
25599: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
25600: LD_ADDR_VAR 0 3
25604: PUSH
25605: LD_INT 20
25607: PPUSH
25608: LD_VAR 0 1
25612: PPUSH
25613: CALL_OW 321
25617: PUSH
25618: LD_INT 2
25620: EQUAL
25621: ST_TO_ADDR
25622: GO 25839
25624: LD_INT 28
25626: DOUBLE
25627: EQUAL
25628: IFTRUE 25638
25630: LD_INT 21
25632: DOUBLE
25633: EQUAL
25634: IFTRUE 25638
25636: GO 25663
25638: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
25639: LD_ADDR_VAR 0 3
25643: PUSH
25644: LD_INT 21
25646: PPUSH
25647: LD_VAR 0 1
25651: PPUSH
25652: CALL_OW 321
25656: PUSH
25657: LD_INT 2
25659: EQUAL
25660: ST_TO_ADDR
25661: GO 25839
25663: LD_INT 16
25665: DOUBLE
25666: EQUAL
25667: IFTRUE 25671
25669: GO 25698
25671: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
25672: LD_ADDR_VAR 0 3
25676: PUSH
25677: LD_EXP 95
25681: PPUSH
25682: LD_VAR 0 1
25686: PPUSH
25687: CALL_OW 321
25691: PUSH
25692: LD_INT 2
25694: EQUAL
25695: ST_TO_ADDR
25696: GO 25839
25698: LD_INT 19
25700: DOUBLE
25701: EQUAL
25702: IFTRUE 25712
25704: LD_INT 23
25706: DOUBLE
25707: EQUAL
25708: IFTRUE 25712
25710: GO 25739
25712: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
25713: LD_ADDR_VAR 0 3
25717: PUSH
25718: LD_EXP 94
25722: PPUSH
25723: LD_VAR 0 1
25727: PPUSH
25728: CALL_OW 321
25732: PUSH
25733: LD_INT 2
25735: EQUAL
25736: ST_TO_ADDR
25737: GO 25839
25739: LD_INT 17
25741: DOUBLE
25742: EQUAL
25743: IFTRUE 25747
25745: GO 25772
25747: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
25748: LD_ADDR_VAR 0 3
25752: PUSH
25753: LD_INT 39
25755: PPUSH
25756: LD_VAR 0 1
25760: PPUSH
25761: CALL_OW 321
25765: PUSH
25766: LD_INT 2
25768: EQUAL
25769: ST_TO_ADDR
25770: GO 25839
25772: LD_INT 18
25774: DOUBLE
25775: EQUAL
25776: IFTRUE 25780
25778: GO 25805
25780: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
25781: LD_ADDR_VAR 0 3
25785: PUSH
25786: LD_INT 40
25788: PPUSH
25789: LD_VAR 0 1
25793: PPUSH
25794: CALL_OW 321
25798: PUSH
25799: LD_INT 2
25801: EQUAL
25802: ST_TO_ADDR
25803: GO 25839
25805: LD_INT 27
25807: DOUBLE
25808: EQUAL
25809: IFTRUE 25813
25811: GO 25838
25813: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25814: LD_ADDR_VAR 0 3
25818: PUSH
25819: LD_INT 35
25821: PPUSH
25822: LD_VAR 0 1
25826: PPUSH
25827: CALL_OW 321
25831: PUSH
25832: LD_INT 2
25834: EQUAL
25835: ST_TO_ADDR
25836: GO 25839
25838: POP
// end ;
25839: LD_VAR 0 3
25843: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25844: LD_INT 0
25846: PPUSH
25847: PPUSH
25848: PPUSH
25849: PPUSH
25850: PPUSH
25851: PPUSH
25852: PPUSH
25853: PPUSH
25854: PPUSH
25855: PPUSH
25856: PPUSH
// result := false ;
25857: LD_ADDR_VAR 0 6
25861: PUSH
25862: LD_INT 0
25864: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25865: LD_VAR 0 1
25869: NOT
25870: PUSH
25871: LD_VAR 0 1
25875: PPUSH
25876: CALL_OW 266
25880: PUSH
25881: LD_INT 0
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: IN
25891: NOT
25892: OR
25893: PUSH
25894: LD_VAR 0 2
25898: NOT
25899: OR
25900: PUSH
25901: LD_VAR 0 5
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: LD_INT 1
25911: PUSH
25912: LD_INT 2
25914: PUSH
25915: LD_INT 3
25917: PUSH
25918: LD_INT 4
25920: PUSH
25921: LD_INT 5
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: IN
25932: NOT
25933: OR
25934: PUSH
25935: LD_VAR 0 3
25939: PPUSH
25940: LD_VAR 0 4
25944: PPUSH
25945: CALL_OW 488
25949: NOT
25950: OR
25951: IFFALSE 25955
// exit ;
25953: GO 26691
// side := GetSide ( depot ) ;
25955: LD_ADDR_VAR 0 9
25959: PUSH
25960: LD_VAR 0 1
25964: PPUSH
25965: CALL_OW 255
25969: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25970: LD_VAR 0 9
25974: PPUSH
25975: LD_VAR 0 2
25979: PPUSH
25980: CALL 25464 0 2
25984: NOT
25985: IFFALSE 25989
// exit ;
25987: GO 26691
// pom := GetBase ( depot ) ;
25989: LD_ADDR_VAR 0 10
25993: PUSH
25994: LD_VAR 0 1
25998: PPUSH
25999: CALL_OW 274
26003: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26004: LD_ADDR_VAR 0 11
26008: PUSH
26009: LD_VAR 0 2
26013: PPUSH
26014: LD_VAR 0 1
26018: PPUSH
26019: CALL_OW 248
26023: PPUSH
26024: CALL_OW 450
26028: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26029: LD_VAR 0 10
26033: PPUSH
26034: LD_INT 1
26036: PPUSH
26037: CALL_OW 275
26041: PUSH
26042: LD_VAR 0 11
26046: PUSH
26047: LD_INT 1
26049: ARRAY
26050: GREATEREQUAL
26051: PUSH
26052: LD_VAR 0 10
26056: PPUSH
26057: LD_INT 2
26059: PPUSH
26060: CALL_OW 275
26064: PUSH
26065: LD_VAR 0 11
26069: PUSH
26070: LD_INT 2
26072: ARRAY
26073: GREATEREQUAL
26074: AND
26075: PUSH
26076: LD_VAR 0 10
26080: PPUSH
26081: LD_INT 3
26083: PPUSH
26084: CALL_OW 275
26088: PUSH
26089: LD_VAR 0 11
26093: PUSH
26094: LD_INT 3
26096: ARRAY
26097: GREATEREQUAL
26098: AND
26099: NOT
26100: IFFALSE 26104
// exit ;
26102: GO 26691
// if GetBType ( depot ) = b_depot then
26104: LD_VAR 0 1
26108: PPUSH
26109: CALL_OW 266
26113: PUSH
26114: LD_INT 0
26116: EQUAL
26117: IFFALSE 26129
// dist := 28 else
26119: LD_ADDR_VAR 0 14
26123: PUSH
26124: LD_INT 28
26126: ST_TO_ADDR
26127: GO 26137
// dist := 36 ;
26129: LD_ADDR_VAR 0 14
26133: PUSH
26134: LD_INT 36
26136: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26137: LD_VAR 0 1
26141: PPUSH
26142: LD_VAR 0 3
26146: PPUSH
26147: LD_VAR 0 4
26151: PPUSH
26152: CALL_OW 297
26156: PUSH
26157: LD_VAR 0 14
26161: GREATER
26162: IFFALSE 26166
// exit ;
26164: GO 26691
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26166: LD_ADDR_VAR 0 12
26170: PUSH
26171: LD_VAR 0 2
26175: PPUSH
26176: LD_VAR 0 3
26180: PPUSH
26181: LD_VAR 0 4
26185: PPUSH
26186: LD_VAR 0 5
26190: PPUSH
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 248
26200: PPUSH
26201: LD_INT 0
26203: PPUSH
26204: CALL 26696 0 6
26208: ST_TO_ADDR
// if not hexes then
26209: LD_VAR 0 12
26213: NOT
26214: IFFALSE 26218
// exit ;
26216: GO 26691
// hex := GetHexInfo ( x , y ) ;
26218: LD_ADDR_VAR 0 15
26222: PUSH
26223: LD_VAR 0 3
26227: PPUSH
26228: LD_VAR 0 4
26232: PPUSH
26233: CALL_OW 546
26237: ST_TO_ADDR
// if hex [ 1 ] then
26238: LD_VAR 0 15
26242: PUSH
26243: LD_INT 1
26245: ARRAY
26246: IFFALSE 26250
// exit ;
26248: GO 26691
// height := hex [ 2 ] ;
26250: LD_ADDR_VAR 0 13
26254: PUSH
26255: LD_VAR 0 15
26259: PUSH
26260: LD_INT 2
26262: ARRAY
26263: ST_TO_ADDR
// for i = 1 to hexes do
26264: LD_ADDR_VAR 0 7
26268: PUSH
26269: DOUBLE
26270: LD_INT 1
26272: DEC
26273: ST_TO_ADDR
26274: LD_VAR 0 12
26278: PUSH
26279: FOR_TO
26280: IFFALSE 26610
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26282: LD_VAR 0 12
26286: PUSH
26287: LD_VAR 0 7
26291: ARRAY
26292: PUSH
26293: LD_INT 1
26295: ARRAY
26296: PPUSH
26297: LD_VAR 0 12
26301: PUSH
26302: LD_VAR 0 7
26306: ARRAY
26307: PUSH
26308: LD_INT 2
26310: ARRAY
26311: PPUSH
26312: CALL_OW 488
26316: NOT
26317: PUSH
26318: LD_VAR 0 12
26322: PUSH
26323: LD_VAR 0 7
26327: ARRAY
26328: PUSH
26329: LD_INT 1
26331: ARRAY
26332: PPUSH
26333: LD_VAR 0 12
26337: PUSH
26338: LD_VAR 0 7
26342: ARRAY
26343: PUSH
26344: LD_INT 2
26346: ARRAY
26347: PPUSH
26348: CALL_OW 428
26352: PUSH
26353: LD_INT 0
26355: GREATER
26356: OR
26357: PUSH
26358: LD_VAR 0 12
26362: PUSH
26363: LD_VAR 0 7
26367: ARRAY
26368: PUSH
26369: LD_INT 1
26371: ARRAY
26372: PPUSH
26373: LD_VAR 0 12
26377: PUSH
26378: LD_VAR 0 7
26382: ARRAY
26383: PUSH
26384: LD_INT 2
26386: ARRAY
26387: PPUSH
26388: CALL_OW 351
26392: OR
26393: IFFALSE 26399
// exit ;
26395: POP
26396: POP
26397: GO 26691
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26399: LD_ADDR_VAR 0 8
26403: PUSH
26404: LD_VAR 0 12
26408: PUSH
26409: LD_VAR 0 7
26413: ARRAY
26414: PUSH
26415: LD_INT 1
26417: ARRAY
26418: PPUSH
26419: LD_VAR 0 12
26423: PUSH
26424: LD_VAR 0 7
26428: ARRAY
26429: PUSH
26430: LD_INT 2
26432: ARRAY
26433: PPUSH
26434: CALL_OW 546
26438: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26439: LD_VAR 0 8
26443: PUSH
26444: LD_INT 1
26446: ARRAY
26447: PUSH
26448: LD_VAR 0 8
26452: PUSH
26453: LD_INT 2
26455: ARRAY
26456: PUSH
26457: LD_VAR 0 13
26461: PUSH
26462: LD_INT 2
26464: PLUS
26465: GREATER
26466: OR
26467: PUSH
26468: LD_VAR 0 8
26472: PUSH
26473: LD_INT 2
26475: ARRAY
26476: PUSH
26477: LD_VAR 0 13
26481: PUSH
26482: LD_INT 2
26484: MINUS
26485: LESS
26486: OR
26487: PUSH
26488: LD_VAR 0 8
26492: PUSH
26493: LD_INT 3
26495: ARRAY
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: LD_INT 8
26502: PUSH
26503: LD_INT 9
26505: PUSH
26506: LD_INT 10
26508: PUSH
26509: LD_INT 11
26511: PUSH
26512: LD_INT 12
26514: PUSH
26515: LD_INT 13
26517: PUSH
26518: LD_INT 16
26520: PUSH
26521: LD_INT 17
26523: PUSH
26524: LD_INT 18
26526: PUSH
26527: LD_INT 19
26529: PUSH
26530: LD_INT 20
26532: PUSH
26533: LD_INT 21
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: IN
26551: NOT
26552: OR
26553: PUSH
26554: LD_VAR 0 8
26558: PUSH
26559: LD_INT 5
26561: ARRAY
26562: NOT
26563: OR
26564: PUSH
26565: LD_VAR 0 8
26569: PUSH
26570: LD_INT 6
26572: ARRAY
26573: PUSH
26574: LD_INT 1
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: LD_INT 7
26582: PUSH
26583: LD_INT 9
26585: PUSH
26586: LD_INT 10
26588: PUSH
26589: LD_INT 11
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: IN
26600: NOT
26601: OR
26602: IFFALSE 26608
// exit ;
26604: POP
26605: POP
26606: GO 26691
// end ;
26608: GO 26279
26610: POP
26611: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26612: LD_VAR 0 9
26616: PPUSH
26617: LD_VAR 0 3
26621: PPUSH
26622: LD_VAR 0 4
26626: PPUSH
26627: LD_INT 20
26629: PPUSH
26630: CALL 18637 0 4
26634: PUSH
26635: LD_INT 4
26637: ARRAY
26638: IFFALSE 26642
// exit ;
26640: GO 26691
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26642: LD_VAR 0 2
26646: PUSH
26647: LD_INT 29
26649: PUSH
26650: LD_INT 30
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: IN
26657: PUSH
26658: LD_VAR 0 3
26662: PPUSH
26663: LD_VAR 0 4
26667: PPUSH
26668: LD_VAR 0 9
26672: PPUSH
26673: CALL_OW 440
26677: NOT
26678: AND
26679: IFFALSE 26683
// exit ;
26681: GO 26691
// result := true ;
26683: LD_ADDR_VAR 0 6
26687: PUSH
26688: LD_INT 1
26690: ST_TO_ADDR
// end ;
26691: LD_VAR 0 6
26695: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
26696: LD_INT 0
26698: PPUSH
26699: PPUSH
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
26715: PPUSH
26716: PPUSH
26717: PPUSH
26718: PPUSH
26719: PPUSH
26720: PPUSH
26721: PPUSH
26722: PPUSH
26723: PPUSH
26724: PPUSH
26725: PPUSH
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
26736: PPUSH
26737: PPUSH
26738: PPUSH
26739: PPUSH
26740: PPUSH
26741: PPUSH
26742: PPUSH
26743: PPUSH
26744: PPUSH
26745: PPUSH
26746: PPUSH
26747: PPUSH
26748: PPUSH
26749: PPUSH
26750: PPUSH
26751: PPUSH
26752: PPUSH
26753: PPUSH
26754: PPUSH
26755: PPUSH
// result = [ ] ;
26756: LD_ADDR_VAR 0 7
26760: PUSH
26761: EMPTY
26762: ST_TO_ADDR
// temp_list = [ ] ;
26763: LD_ADDR_VAR 0 9
26767: PUSH
26768: EMPTY
26769: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26770: LD_VAR 0 4
26774: PUSH
26775: LD_INT 0
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: LD_INT 2
26783: PUSH
26784: LD_INT 3
26786: PUSH
26787: LD_INT 4
26789: PUSH
26790: LD_INT 5
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: IN
26801: NOT
26802: PUSH
26803: LD_VAR 0 1
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: LD_INT 1
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: IN
26818: PUSH
26819: LD_VAR 0 5
26823: PUSH
26824: LD_INT 1
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: LD_INT 3
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: LIST
26837: IN
26838: NOT
26839: AND
26840: OR
26841: IFFALSE 26845
// exit ;
26843: GO 45236
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26845: LD_VAR 0 1
26849: PUSH
26850: LD_INT 6
26852: PUSH
26853: LD_INT 7
26855: PUSH
26856: LD_INT 8
26858: PUSH
26859: LD_INT 13
26861: PUSH
26862: LD_INT 12
26864: PUSH
26865: LD_INT 15
26867: PUSH
26868: LD_INT 11
26870: PUSH
26871: LD_INT 14
26873: PUSH
26874: LD_INT 10
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: IN
26888: IFFALSE 26898
// btype = b_lab ;
26890: LD_ADDR_VAR 0 1
26894: PUSH
26895: LD_INT 6
26897: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26898: LD_VAR 0 6
26902: PUSH
26903: LD_INT 0
26905: PUSH
26906: LD_INT 1
26908: PUSH
26909: LD_INT 2
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: IN
26917: NOT
26918: PUSH
26919: LD_VAR 0 1
26923: PUSH
26924: LD_INT 0
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: LD_INT 2
26932: PUSH
26933: LD_INT 3
26935: PUSH
26936: LD_INT 6
26938: PUSH
26939: LD_INT 36
26941: PUSH
26942: LD_INT 4
26944: PUSH
26945: LD_INT 5
26947: PUSH
26948: LD_INT 31
26950: PUSH
26951: LD_INT 32
26953: PUSH
26954: LD_INT 33
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: IN
26970: NOT
26971: PUSH
26972: LD_VAR 0 6
26976: PUSH
26977: LD_INT 1
26979: EQUAL
26980: AND
26981: OR
26982: PUSH
26983: LD_VAR 0 1
26987: PUSH
26988: LD_INT 2
26990: PUSH
26991: LD_INT 3
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: IN
26998: NOT
26999: PUSH
27000: LD_VAR 0 6
27004: PUSH
27005: LD_INT 2
27007: EQUAL
27008: AND
27009: OR
27010: IFFALSE 27020
// mode = 0 ;
27012: LD_ADDR_VAR 0 6
27016: PUSH
27017: LD_INT 0
27019: ST_TO_ADDR
// case mode of 0 :
27020: LD_VAR 0 6
27024: PUSH
27025: LD_INT 0
27027: DOUBLE
27028: EQUAL
27029: IFTRUE 27033
27031: GO 38486
27033: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27034: LD_ADDR_VAR 0 11
27038: PUSH
27039: LD_INT 0
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 0
27051: PUSH
27052: LD_INT 1
27054: NEG
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: LD_INT 0
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: PUSH
27073: LD_INT 1
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 0
27082: PUSH
27083: LD_INT 1
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 1
27092: NEG
27093: PUSH
27094: LD_INT 0
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: NEG
27104: PUSH
27105: LD_INT 1
27107: NEG
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 1
27115: NEG
27116: PUSH
27117: LD_INT 2
27119: NEG
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: LD_INT 2
27130: NEG
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: LD_INT 1
27141: NEG
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 1
27149: PUSH
27150: LD_INT 2
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 0
27159: PUSH
27160: LD_INT 2
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 1
27169: NEG
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 1
27180: PUSH
27181: LD_INT 3
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 0
27190: PUSH
27191: LD_INT 3
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: NEG
27201: PUSH
27202: LD_INT 2
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27227: LD_ADDR_VAR 0 12
27231: PUSH
27232: LD_INT 0
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: EMPTY
27250: LIST
27251: LIST
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: LD_INT 0
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: NEG
27286: PUSH
27287: LD_INT 0
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 1
27296: NEG
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: LD_INT 1
27311: NEG
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 2
27329: PUSH
27330: LD_INT 1
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 2
27350: NEG
27351: PUSH
27352: LD_INT 0
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 2
27361: NEG
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 2
27373: NEG
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 3
27384: NEG
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 3
27395: NEG
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27423: LD_ADDR_VAR 0 13
27427: PUSH
27428: LD_INT 0
27430: PUSH
27431: LD_INT 0
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 1
27451: PUSH
27452: LD_INT 0
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: LD_INT 1
27464: PUSH
27465: EMPTY
27466: LIST
27467: LIST
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 1
27481: NEG
27482: PUSH
27483: LD_INT 0
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: LD_INT 1
27492: NEG
27493: PUSH
27494: LD_INT 1
27496: NEG
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 1
27504: NEG
27505: PUSH
27506: LD_INT 2
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 2
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 2
27526: PUSH
27527: LD_INT 2
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: LD_INT 2
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 2
27546: NEG
27547: PUSH
27548: LD_INT 1
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: LD_INT 2
27558: NEG
27559: PUSH
27560: LD_INT 2
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 2
27570: NEG
27571: PUSH
27572: LD_INT 3
27574: NEG
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 3
27582: NEG
27583: PUSH
27584: LD_INT 2
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 3
27594: NEG
27595: PUSH
27596: LD_INT 3
27598: NEG
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27622: LD_ADDR_VAR 0 14
27626: PUSH
27627: LD_INT 0
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 0
27639: PUSH
27640: LD_INT 1
27642: NEG
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: LD_INT 0
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 0
27670: PUSH
27671: LD_INT 1
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 1
27680: NEG
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: LD_INT 1
27695: NEG
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: LD_INT 2
27707: NEG
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 0
27715: PUSH
27716: LD_INT 2
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: LD_INT 1
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: LD_INT 2
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: LD_INT 2
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: NEG
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: NEG
27769: PUSH
27770: LD_INT 3
27772: NEG
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 0
27780: PUSH
27781: LD_INT 3
27783: NEG
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: LD_INT 2
27794: NEG
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27818: LD_ADDR_VAR 0 15
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: LD_INT 0
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 0
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: LD_INT 0
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: LD_INT 1
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 1
27899: PUSH
27900: LD_INT 1
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 2
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 2
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 1
27930: NEG
27931: PUSH
27932: LD_INT 1
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 2
27941: NEG
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 2
27952: NEG
27953: PUSH
27954: LD_INT 1
27956: NEG
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 2
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 3
27975: PUSH
27976: LD_INT 0
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 3
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28011: LD_ADDR_VAR 0 16
28015: PUSH
28016: LD_INT 0
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 0
28028: PUSH
28029: LD_INT 1
28031: NEG
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 1
28039: PUSH
28040: LD_INT 0
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 0
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 1
28069: NEG
28070: PUSH
28071: LD_INT 0
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PUSH
28082: LD_INT 1
28084: NEG
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: NEG
28093: PUSH
28094: LD_INT 2
28096: NEG
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 2
28104: PUSH
28105: LD_INT 1
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 2
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: LD_INT 2
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 2
28134: NEG
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 2
28146: NEG
28147: PUSH
28148: LD_INT 2
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 3
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 3
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 2
28178: PUSH
28179: LD_INT 3
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28204: LD_ADDR_VAR 0 17
28208: PUSH
28209: LD_INT 0
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: LD_INT 1
28224: NEG
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: LD_INT 1
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 0
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: LD_INT 0
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: LD_INT 1
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 1
28285: NEG
28286: PUSH
28287: LD_INT 2
28289: NEG
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 0
28297: PUSH
28298: LD_INT 2
28300: NEG
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: LD_INT 1
28311: NEG
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 2
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: LD_INT 2
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 2
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: LD_INT 2
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 0
28359: PUSH
28360: LD_INT 2
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: NEG
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 2
28380: NEG
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 2
28391: NEG
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: LD_INT 2
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28434: LD_ADDR_VAR 0 18
28438: PUSH
28439: LD_INT 0
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: LD_INT 1
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: LD_INT 0
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 1
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: LD_INT 0
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: NEG
28504: PUSH
28505: LD_INT 1
28507: NEG
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: PUSH
28513: LD_INT 1
28515: NEG
28516: PUSH
28517: LD_INT 2
28519: NEG
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: LD_INT 2
28530: NEG
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: PUSH
28539: LD_INT 1
28541: NEG
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 2
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 2
28569: PUSH
28570: LD_INT 2
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: LD_INT 2
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 0
28589: PUSH
28590: LD_INT 2
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: LD_INT 1
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: NEG
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 2
28621: NEG
28622: PUSH
28623: LD_INT 1
28625: NEG
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 2
28633: NEG
28634: PUSH
28635: LD_INT 2
28637: NEG
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28664: LD_ADDR_VAR 0 19
28668: PUSH
28669: LD_INT 0
28671: PUSH
28672: LD_INT 0
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 0
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: LD_INT 0
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 1
28702: PUSH
28703: LD_INT 1
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: LD_INT 0
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 1
28733: NEG
28734: PUSH
28735: LD_INT 1
28737: NEG
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: LD_INT 2
28749: NEG
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 0
28757: PUSH
28758: LD_INT 2
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 2
28779: PUSH
28780: LD_INT 0
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 2
28789: PUSH
28790: LD_INT 1
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 2
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 1
28809: PUSH
28810: LD_INT 2
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: LD_INT 2
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 2
28840: NEG
28841: PUSH
28842: LD_INT 0
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 2
28851: NEG
28852: PUSH
28853: LD_INT 1
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: LD_INT 2
28867: NEG
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28894: LD_ADDR_VAR 0 20
28898: PUSH
28899: LD_INT 0
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 1
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: LD_INT 0
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 1
28963: NEG
28964: PUSH
28965: LD_INT 1
28967: NEG
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: LD_INT 2
28979: NEG
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 0
28987: PUSH
28988: LD_INT 2
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 1
28998: PUSH
28999: LD_INT 1
29001: NEG
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 2
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: LD_INT 1
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 2
29029: PUSH
29030: LD_INT 2
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 2
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: LD_INT 2
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 2
29070: NEG
29071: PUSH
29072: LD_INT 0
29074: PUSH
29075: EMPTY
29076: LIST
29077: LIST
29078: PUSH
29079: LD_INT 2
29081: NEG
29082: PUSH
29083: LD_INT 1
29085: NEG
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 2
29093: NEG
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29124: LD_ADDR_VAR 0 21
29128: PUSH
29129: LD_INT 0
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 0
29141: PUSH
29142: LD_INT 1
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 1
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 1
29162: PUSH
29163: LD_INT 1
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PUSH
29170: LD_INT 0
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: NEG
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: PUSH
29191: LD_INT 1
29193: NEG
29194: PUSH
29195: LD_INT 1
29197: NEG
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: LD_INT 2
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 1
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 2
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 2
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 2
29259: PUSH
29260: LD_INT 2
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 2
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: LD_INT 2
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: LD_INT 1
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 2
29300: NEG
29301: PUSH
29302: LD_INT 0
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 2
29311: NEG
29312: PUSH
29313: LD_INT 1
29315: NEG
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: NEG
29324: PUSH
29325: LD_INT 2
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29354: LD_ADDR_VAR 0 22
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 0
29371: PUSH
29372: LD_INT 1
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: PUSH
29383: LD_INT 0
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 1
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 0
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 1
29412: NEG
29413: PUSH
29414: LD_INT 0
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 1
29423: NEG
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: LD_INT 2
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 0
29447: PUSH
29448: LD_INT 2
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 2
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 2
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 2
29489: PUSH
29490: LD_INT 2
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 1
29499: PUSH
29500: LD_INT 2
29502: PUSH
29503: EMPTY
29504: LIST
29505: LIST
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: LD_INT 2
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 1
29519: NEG
29520: PUSH
29521: LD_INT 1
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 2
29530: NEG
29531: PUSH
29532: LD_INT 0
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 2
29541: NEG
29542: PUSH
29543: LD_INT 1
29545: NEG
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 2
29553: NEG
29554: PUSH
29555: LD_INT 2
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29584: LD_ADDR_VAR 0 23
29588: PUSH
29589: LD_INT 0
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: LD_INT 1
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 1
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 0
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 1
29642: NEG
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: NEG
29654: PUSH
29655: LD_INT 1
29657: NEG
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 1
29665: NEG
29666: PUSH
29667: LD_INT 2
29669: NEG
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 0
29677: PUSH
29678: LD_INT 2
29680: NEG
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 1
29688: PUSH
29689: LD_INT 1
29691: NEG
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 2
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 2
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 2
29719: PUSH
29720: LD_INT 2
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: LD_INT 2
29742: PUSH
29743: EMPTY
29744: LIST
29745: LIST
29746: PUSH
29747: LD_INT 1
29749: NEG
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PUSH
29758: LD_INT 2
29760: NEG
29761: PUSH
29762: LD_INT 0
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 2
29771: NEG
29772: PUSH
29773: LD_INT 1
29775: NEG
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 2
29783: NEG
29784: PUSH
29785: LD_INT 2
29787: NEG
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 2
29795: NEG
29796: PUSH
29797: LD_INT 3
29799: NEG
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: LD_INT 3
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: PUSH
29820: LD_INT 2
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 2
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29864: LD_ADDR_VAR 0 24
29868: PUSH
29869: LD_INT 0
29871: PUSH
29872: LD_INT 0
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 0
29881: PUSH
29882: LD_INT 1
29884: NEG
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: PUSH
29890: LD_INT 1
29892: PUSH
29893: LD_INT 0
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: LD_INT 1
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 0
29912: PUSH
29913: LD_INT 1
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: EMPTY
29940: LIST
29941: LIST
29942: PUSH
29943: LD_INT 1
29945: NEG
29946: PUSH
29947: LD_INT 2
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: LD_INT 2
29960: NEG
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: PUSH
29966: LD_INT 1
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 2
29989: PUSH
29990: LD_INT 1
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 2
29999: PUSH
30000: LD_INT 2
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: LD_INT 1
30009: PUSH
30010: LD_INT 2
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: LD_INT 2
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: LD_INT 1
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 2
30040: NEG
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 2
30051: NEG
30052: PUSH
30053: LD_INT 1
30055: NEG
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: PUSH
30061: LD_INT 2
30063: NEG
30064: PUSH
30065: LD_INT 2
30067: NEG
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: LD_INT 2
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 1
30089: NEG
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 3
30097: PUSH
30098: LD_INT 1
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 3
30107: PUSH
30108: LD_INT 2
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30140: LD_ADDR_VAR 0 25
30144: PUSH
30145: LD_INT 0
30147: PUSH
30148: LD_INT 0
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 0
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: LD_INT 0
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 1
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 1
30198: NEG
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: NEG
30210: PUSH
30211: LD_INT 1
30213: NEG
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 1
30221: NEG
30222: PUSH
30223: LD_INT 2
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: LD_INT 2
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: PUSH
30245: LD_INT 1
30247: NEG
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 2
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 2
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: LD_INT 2
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 1
30305: NEG
30306: PUSH
30307: LD_INT 1
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 2
30316: NEG
30317: PUSH
30318: LD_INT 0
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PUSH
30325: LD_INT 2
30327: NEG
30328: PUSH
30329: LD_INT 1
30331: NEG
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 2
30339: NEG
30340: PUSH
30341: LD_INT 2
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 3
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 3
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: LD_INT 3
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30414: LD_ADDR_VAR 0 26
30418: PUSH
30419: LD_INT 0
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 0
30431: PUSH
30432: LD_INT 1
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: PUSH
30443: LD_INT 0
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 0
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 1
30472: NEG
30473: PUSH
30474: LD_INT 0
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: LD_INT 1
30483: NEG
30484: PUSH
30485: LD_INT 1
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: LD_INT 2
30499: NEG
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 0
30507: PUSH
30508: LD_INT 2
30510: NEG
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 1
30518: PUSH
30519: LD_INT 1
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 2
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 2
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 2
30549: PUSH
30550: LD_INT 2
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: LD_INT 2
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 0
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: LD_INT 1
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 2
30590: NEG
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 2
30601: NEG
30602: PUSH
30603: LD_INT 1
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 2
30613: NEG
30614: PUSH
30615: LD_INT 2
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: LD_INT 3
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: LD_INT 3
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 1
30645: NEG
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 2
30656: NEG
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30690: LD_ADDR_VAR 0 27
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 0
30707: PUSH
30708: LD_INT 1
30710: NEG
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 1
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 1
30748: NEG
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: LD_INT 1
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: LD_INT 2
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 0
30783: PUSH
30784: LD_INT 2
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: LD_INT 1
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 2
30805: PUSH
30806: LD_INT 0
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 2
30825: PUSH
30826: LD_INT 2
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 1
30835: PUSH
30836: LD_INT 2
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: LD_INT 2
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 1
30855: NEG
30856: PUSH
30857: LD_INT 1
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 2
30866: NEG
30867: PUSH
30868: LD_INT 0
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 2
30877: NEG
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 2
30889: NEG
30890: PUSH
30891: LD_INT 2
30893: NEG
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 1
30901: NEG
30902: PUSH
30903: LD_INT 2
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 2
30912: NEG
30913: PUSH
30914: LD_INT 1
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 3
30923: NEG
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 3
30935: NEG
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30970: LD_ADDR_VAR 0 28
30974: PUSH
30975: LD_INT 0
30977: PUSH
30978: LD_INT 0
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 0
30987: PUSH
30988: LD_INT 1
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: LD_INT 1
31021: PUSH
31022: EMPTY
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 1
31028: NEG
31029: PUSH
31030: LD_INT 0
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: LD_INT 1
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 2
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: LD_INT 2
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 2
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 2
31105: PUSH
31106: LD_INT 2
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 1
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 1
31135: NEG
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 2
31146: NEG
31147: PUSH
31148: LD_INT 0
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 2
31157: NEG
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 2
31169: NEG
31170: PUSH
31171: LD_INT 2
31173: NEG
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: NEG
31182: PUSH
31183: LD_INT 3
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 1
31193: NEG
31194: PUSH
31195: LD_INT 3
31197: NEG
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 3
31205: NEG
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 3
31217: NEG
31218: PUSH
31219: LD_INT 2
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31252: LD_ADDR_VAR 0 29
31256: PUSH
31257: LD_INT 0
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 0
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: NEG
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 2
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: LD_INT 2
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: LD_INT 0
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 2
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: LD_INT 2
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: LD_INT 2
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: LD_INT 1
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 2
31418: NEG
31419: PUSH
31420: LD_INT 1
31422: NEG
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 2
31430: NEG
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 2
31442: NEG
31443: PUSH
31444: LD_INT 3
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 3
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: LD_INT 3
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: LD_INT 1
31485: NEG
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 3
31496: NEG
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31531: LD_ADDR_VAR 0 30
31535: PUSH
31536: LD_INT 0
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 0
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 1
31559: PUSH
31560: LD_INT 0
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 1
31589: NEG
31590: PUSH
31591: LD_INT 0
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: LD_INT 1
31600: NEG
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: LD_INT 2
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: LD_INT 2
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: LD_INT 1
31638: NEG
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 2
31646: PUSH
31647: LD_INT 0
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 2
31656: PUSH
31657: LD_INT 1
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 2
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: LD_INT 1
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 2
31697: NEG
31698: PUSH
31699: LD_INT 0
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 2
31708: NEG
31709: PUSH
31710: LD_INT 1
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: LD_INT 3
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: LD_INT 2
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 3
31743: PUSH
31744: LD_INT 2
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 2
31753: PUSH
31754: LD_INT 3
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 2
31763: NEG
31764: PUSH
31765: LD_INT 1
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 3
31774: NEG
31775: PUSH
31776: LD_INT 1
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31809: LD_ADDR_VAR 0 31
31813: PUSH
31814: LD_INT 0
31816: PUSH
31817: LD_INT 0
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: LD_INT 1
31829: NEG
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: LD_INT 0
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 1
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: NEG
31879: PUSH
31880: LD_INT 1
31882: NEG
31883: PUSH
31884: EMPTY
31885: LIST
31886: LIST
31887: PUSH
31888: LD_INT 1
31890: NEG
31891: PUSH
31892: LD_INT 2
31894: NEG
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PUSH
31900: LD_INT 1
31902: PUSH
31903: LD_INT 1
31905: NEG
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 2
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 2
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 2
31933: PUSH
31934: LD_INT 2
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: LD_INT 2
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: LD_INT 2
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 1
31963: NEG
31964: PUSH
31965: LD_INT 1
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 2
31974: NEG
31975: PUSH
31976: LD_INT 1
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 2
31986: NEG
31987: PUSH
31988: LD_INT 2
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: LD_INT 2
31998: NEG
31999: PUSH
32000: LD_INT 3
32002: NEG
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: LD_INT 1
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 3
32021: PUSH
32022: LD_INT 1
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: LD_INT 3
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: LD_INT 2
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 3
32052: NEG
32053: PUSH
32054: LD_INT 2
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32087: LD_ADDR_VAR 0 32
32091: PUSH
32092: LD_INT 0
32094: PUSH
32095: LD_INT 0
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: LD_INT 1
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: LD_INT 0
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 1
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: LD_INT 1
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: LD_INT 0
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: NEG
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 1
32168: NEG
32169: PUSH
32170: LD_INT 2
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: LD_INT 2
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: LD_INT 1
32194: NEG
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 2
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 2
32212: PUSH
32213: LD_INT 2
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: LD_INT 2
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 2
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 2
32253: NEG
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 2
32264: NEG
32265: PUSH
32266: LD_INT 1
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: LD_INT 3
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 1
32288: PUSH
32289: LD_INT 2
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 3
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 2
32309: PUSH
32310: LD_INT 3
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 2
32319: NEG
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 3
32330: NEG
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32365: LD_ADDR_VAR 0 33
32369: PUSH
32370: LD_INT 0
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 0
32382: PUSH
32383: LD_INT 1
32385: NEG
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: LD_INT 0
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 0
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: NEG
32424: PUSH
32425: LD_INT 0
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 1
32434: NEG
32435: PUSH
32436: LD_INT 1
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: LD_INT 2
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: PUSH
32459: LD_INT 1
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 2
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: LD_INT 2
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: LD_INT 2
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 2
32520: NEG
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: NEG
32532: PUSH
32533: LD_INT 1
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 2
32543: NEG
32544: PUSH
32545: LD_INT 2
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 2
32555: NEG
32556: PUSH
32557: LD_INT 3
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: PUSH
32568: LD_INT 1
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 3
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 1
32588: PUSH
32589: LD_INT 3
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 1
32598: NEG
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 3
32609: NEG
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32644: LD_ADDR_VAR 0 34
32648: PUSH
32649: LD_INT 0
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 0
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 1
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: LD_INT 0
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: LD_INT 1
32717: NEG
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: PUSH
32727: LD_INT 2
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 0
32737: PUSH
32738: LD_INT 2
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 2
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 1
32779: PUSH
32780: LD_INT 2
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 1
32789: NEG
32790: PUSH
32791: LD_INT 1
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 2
32800: NEG
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 2
32811: NEG
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 2
32823: NEG
32824: PUSH
32825: LD_INT 2
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: LD_INT 3
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 1
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 3
32858: PUSH
32859: LD_INT 2
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 2
32868: PUSH
32869: LD_INT 3
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: NEG
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 3
32889: NEG
32890: PUSH
32891: LD_INT 1
32893: NEG
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32924: LD_ADDR_VAR 0 35
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 0
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 1
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: LD_INT 1
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 1
32982: NEG
32983: PUSH
32984: LD_INT 0
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 1
32993: NEG
32994: PUSH
32995: LD_INT 1
32997: NEG
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 2
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 2
33015: NEG
33016: PUSH
33017: LD_INT 1
33019: NEG
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33036: LD_ADDR_VAR 0 36
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 0
33053: PUSH
33054: LD_INT 1
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 0
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: NEG
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 1
33105: NEG
33106: PUSH
33107: LD_INT 1
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: LD_INT 2
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33148: LD_ADDR_VAR 0 37
33152: PUSH
33153: LD_INT 0
33155: PUSH
33156: LD_INT 0
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 0
33165: PUSH
33166: LD_INT 1
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: LD_INT 0
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: LD_INT 1
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: LD_INT 1
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 1
33206: NEG
33207: PUSH
33208: LD_INT 0
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: LD_INT 1
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 1
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: LD_INT 1
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33260: LD_ADDR_VAR 0 38
33264: PUSH
33265: LD_INT 0
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: LD_INT 1
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 1
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 1
33298: PUSH
33299: LD_INT 1
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 0
33308: PUSH
33309: LD_INT 1
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 1
33329: NEG
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 2
33341: PUSH
33342: LD_INT 1
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 2
33351: NEG
33352: PUSH
33353: LD_INT 1
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33372: LD_ADDR_VAR 0 39
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: LD_INT 0
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 1
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 1
33400: PUSH
33401: LD_INT 0
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: NEG
33431: PUSH
33432: LD_INT 0
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: LD_INT 1
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: NEG
33454: PUSH
33455: LD_INT 2
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: LD_INT 2
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33484: LD_ADDR_VAR 0 40
33488: PUSH
33489: LD_INT 0
33491: PUSH
33492: LD_INT 0
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 1
33553: NEG
33554: PUSH
33555: LD_INT 1
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 1
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 1
33576: NEG
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33596: LD_ADDR_VAR 0 41
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: LD_INT 0
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 0
33613: PUSH
33614: LD_INT 1
33616: NEG
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 1
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: LD_INT 1
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 1
33654: NEG
33655: PUSH
33656: LD_INT 0
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 1
33665: NEG
33666: PUSH
33667: LD_INT 1
33669: NEG
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: NEG
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: PUSH
33687: LD_INT 1
33689: PUSH
33690: LD_INT 1
33692: NEG
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 2
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: EMPTY
33705: LIST
33706: LIST
33707: PUSH
33708: LD_INT 2
33710: PUSH
33711: LD_INT 1
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: LD_INT 2
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 1
33740: NEG
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: LD_INT 0
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 2
33762: NEG
33763: PUSH
33764: LD_INT 1
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: LD_INT 2
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 2
33786: NEG
33787: PUSH
33788: LD_INT 3
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 2
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 3
33809: PUSH
33810: LD_INT 0
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 3
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 3
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 3
33839: PUSH
33840: LD_INT 3
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 2
33849: PUSH
33850: LD_INT 3
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 2
33859: NEG
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 3
33870: NEG
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 3
33881: NEG
33882: PUSH
33883: LD_INT 1
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 3
33893: NEG
33894: PUSH
33895: LD_INT 2
33897: NEG
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 3
33905: NEG
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33946: LD_ADDR_VAR 0 42
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: LD_INT 1
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: PUSH
33975: LD_INT 0
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 1
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: NEG
34005: PUSH
34006: LD_INT 0
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: PUSH
34017: LD_INT 1
34019: NEG
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: LD_INT 2
34031: NEG
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 0
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 2
34071: PUSH
34072: LD_INT 2
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: PUSH
34079: LD_INT 1
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 0
34091: PUSH
34092: LD_INT 2
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 1
34101: NEG
34102: PUSH
34103: LD_INT 1
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: LD_INT 2
34112: NEG
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 2
34124: NEG
34125: PUSH
34126: LD_INT 2
34128: NEG
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 2
34136: NEG
34137: PUSH
34138: LD_INT 3
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: LD_INT 3
34152: NEG
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 0
34160: PUSH
34161: LD_INT 3
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 1
34171: PUSH
34172: LD_INT 2
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 3
34182: PUSH
34183: LD_INT 2
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 3
34192: PUSH
34193: LD_INT 3
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 2
34202: PUSH
34203: LD_INT 3
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 3
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: LD_INT 3
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: LD_INT 2
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 3
34243: NEG
34244: PUSH
34245: LD_INT 2
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 3
34255: NEG
34256: PUSH
34257: LD_INT 3
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34296: LD_ADDR_VAR 0 43
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 0
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: NEG
34355: PUSH
34356: LD_INT 0
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: EMPTY
34372: LIST
34373: LIST
34374: PUSH
34375: LD_INT 1
34377: NEG
34378: PUSH
34379: LD_INT 2
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 1
34451: NEG
34452: PUSH
34453: LD_INT 1
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 2
34462: NEG
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 2
34473: NEG
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 3
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 3
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: LD_INT 2
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 2
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 3
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 3
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 3
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: LD_INT 3
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: LD_INT 2
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 2
34581: NEG
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 3
34592: NEG
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 3
34603: NEG
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34644: LD_ADDR_VAR 0 44
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 0
34661: PUSH
34662: LD_INT 1
34664: NEG
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 1
34725: NEG
34726: PUSH
34727: LD_INT 2
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 1
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: LD_INT 1
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 2
34768: PUSH
34769: LD_INT 2
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: LD_INT 2
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 2
34799: NEG
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 2
34810: NEG
34811: PUSH
34812: LD_INT 1
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 2
34822: NEG
34823: PUSH
34824: LD_INT 2
34826: NEG
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 2
34834: NEG
34835: PUSH
34836: LD_INT 3
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 3
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 3
34867: PUSH
34868: LD_INT 1
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 3
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 3
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 2
34897: PUSH
34898: LD_INT 3
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: LD_INT 1
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: LD_INT 3
34918: NEG
34919: PUSH
34920: LD_INT 0
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 3
34929: NEG
34930: PUSH
34931: LD_INT 1
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 3
34941: NEG
34942: PUSH
34943: LD_INT 2
34945: NEG
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: PUSH
34951: LD_INT 3
34953: NEG
34954: PUSH
34955: LD_INT 3
34957: NEG
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34994: LD_ADDR_VAR 0 45
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 0
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: NEG
35064: PUSH
35065: LD_INT 1
35067: NEG
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: PUSH
35073: LD_INT 1
35075: NEG
35076: PUSH
35077: LD_INT 2
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: LD_INT 2
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: LD_INT 1
35101: NEG
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 2
35109: PUSH
35110: LD_INT 1
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 2
35119: PUSH
35120: LD_INT 2
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: LD_INT 2
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 0
35139: PUSH
35140: LD_INT 2
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 1
35149: NEG
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 2
35160: NEG
35161: PUSH
35162: LD_INT 1
35164: NEG
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 2
35172: NEG
35173: PUSH
35174: LD_INT 2
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 2
35184: NEG
35185: PUSH
35186: LD_INT 3
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: LD_INT 3
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: LD_INT 3
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 3
35230: PUSH
35231: LD_INT 2
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 3
35240: PUSH
35241: LD_INT 3
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: LD_INT 3
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: LD_INT 1
35260: PUSH
35261: LD_INT 3
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: LD_INT 3
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 1
35280: NEG
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PUSH
35289: LD_INT 3
35291: NEG
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 3
35303: NEG
35304: PUSH
35305: LD_INT 3
35307: NEG
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35344: LD_ADDR_VAR 0 46
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 0
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 1
35372: PUSH
35373: LD_INT 0
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 0
35392: PUSH
35393: LD_INT 1
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 1
35413: NEG
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: NEG
35426: PUSH
35427: LD_INT 2
35429: NEG
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 2
35440: NEG
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 2
35459: PUSH
35460: LD_INT 0
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 1
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: LD_INT 2
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: LD_INT 0
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 2
35521: NEG
35522: PUSH
35523: LD_INT 1
35525: NEG
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: NEG
35534: PUSH
35535: LD_INT 3
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 3
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: LD_INT 2
35559: NEG
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: LD_INT 1
35570: NEG
35571: PUSH
35572: EMPTY
35573: LIST
35574: LIST
35575: PUSH
35576: LD_INT 3
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 3
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 1
35598: PUSH
35599: LD_INT 3
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: LD_INT 3
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 1
35618: NEG
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: NEG
35630: PUSH
35631: LD_INT 1
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 3
35640: NEG
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 3
35651: NEG
35652: PUSH
35653: LD_INT 1
35655: NEG
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35692: LD_ADDR_VAR 0 47
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: LD_INT 1
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 1
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 0
35740: PUSH
35741: LD_INT 1
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 1
35750: NEG
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: NEG
35762: PUSH
35763: LD_INT 1
35765: NEG
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: LD_INT 2
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 0
35785: PUSH
35786: LD_INT 2
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 2
35807: NEG
35808: PUSH
35809: LD_INT 1
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: LD_INT 2
35823: NEG
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35843: LD_ADDR_VAR 0 48
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: LD_INT 0
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: LD_INT 2
35928: NEG
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: LD_INT 2
35939: NEG
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 2
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35990: LD_ADDR_VAR 0 49
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: LD_INT 0
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: LD_INT 1
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: LD_INT 0
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: LD_INT 1
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: NEG
36049: PUSH
36050: LD_INT 0
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: PUSH
36072: LD_INT 1
36074: NEG
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 2
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 2
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36134: LD_ADDR_VAR 0 50
36138: PUSH
36139: LD_INT 0
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 1
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: PUSH
36173: LD_INT 1
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: LD_INT 1
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: LD_INT 1
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 2
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 2
36225: PUSH
36226: LD_INT 2
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: LD_INT 2
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36278: LD_ADDR_VAR 0 51
36282: PUSH
36283: LD_INT 0
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: LD_INT 1
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: LD_INT 0
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: NEG
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 1
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: LD_INT 2
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 0
36369: PUSH
36370: LD_INT 2
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 2
36390: NEG
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: NEG
36402: PUSH
36403: LD_INT 1
36405: NEG
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36425: LD_ADDR_VAR 0 52
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 0
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 1
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 0
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 1
36483: NEG
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: LD_INT 1
36498: NEG
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: LD_INT 2
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 2
36529: NEG
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 2
36540: NEG
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 2
36552: NEG
36553: PUSH
36554: LD_INT 2
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36576: LD_ADDR_VAR 0 53
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: LD_INT 0
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: LD_INT 1
36596: NEG
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: LD_INT 0
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: LD_INT 2
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 2
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: PUSH
36712: LD_INT 2
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: LD_INT 2
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: LD_INT 2
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 2
36752: NEG
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 2
36763: NEG
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 2
36775: NEG
36776: PUSH
36777: LD_INT 2
36779: NEG
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36806: LD_ADDR_VAR 0 54
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 1
36834: PUSH
36835: LD_INT 0
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: LD_INT 1
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 0
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 1
36864: NEG
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 1
36875: NEG
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: LD_INT 2
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 1
36910: PUSH
36911: LD_INT 1
36913: NEG
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: LD_INT 0
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 2
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: LD_INT 2
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: LD_INT 2
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: LD_INT 1
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: LD_INT 2
36982: NEG
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 2
36993: NEG
36994: PUSH
36995: LD_INT 1
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 2
37005: NEG
37006: PUSH
37007: LD_INT 2
37009: NEG
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37036: LD_ADDR_VAR 0 55
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: LD_INT 0
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 0
37084: PUSH
37085: LD_INT 1
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: PUSH
37096: LD_INT 0
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: NEG
37106: PUSH
37107: LD_INT 1
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: LD_INT 2
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 1
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 1
37201: NEG
37202: PUSH
37203: LD_INT 1
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 2
37212: NEG
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 2
37223: NEG
37224: PUSH
37225: LD_INT 1
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 2
37235: NEG
37236: PUSH
37237: LD_INT 2
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37266: LD_ADDR_VAR 0 56
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: LD_INT 0
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: LD_INT 1
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 1
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 0
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: LD_INT 0
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PUSH
37333: LD_INT 1
37335: NEG
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: LD_INT 2
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: LD_INT 2
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: LD_INT 1
37373: NEG
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 2
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 2
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 2
37401: PUSH
37402: LD_INT 2
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 1
37411: PUSH
37412: LD_INT 2
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 2
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 2
37442: NEG
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: NEG
37454: PUSH
37455: LD_INT 1
37457: NEG
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 2
37465: NEG
37466: PUSH
37467: LD_INT 2
37469: NEG
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37496: LD_ADDR_VAR 0 57
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: LD_INT 0
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 0
37513: PUSH
37514: LD_INT 1
37516: NEG
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: LD_INT 2
37581: NEG
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: LD_INT 2
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: LD_INT 1
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 2
37621: PUSH
37622: LD_INT 1
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 1
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: LD_INT 2
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: NEG
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 2
37695: NEG
37696: PUSH
37697: LD_INT 2
37699: NEG
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37726: LD_ADDR_VAR 0 58
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: LD_INT 2
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 1
37830: PUSH
37831: LD_INT 1
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 2
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 2
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 1
37871: PUSH
37872: LD_INT 2
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: LD_INT 2
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 2
37902: NEG
37903: PUSH
37904: LD_INT 0
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 2
37913: NEG
37914: PUSH
37915: LD_INT 1
37917: NEG
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 2
37925: NEG
37926: PUSH
37927: LD_INT 2
37929: NEG
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37956: LD_ADDR_VAR 0 59
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 0
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: NEG
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38044: LD_ADDR_VAR 0 60
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: LD_INT 0
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: LD_INT 1
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: NEG
38103: PUSH
38104: LD_INT 0
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 1
38113: NEG
38114: PUSH
38115: LD_INT 1
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38132: LD_ADDR_VAR 0 61
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38220: LD_ADDR_VAR 0 62
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: LD_INT 1
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38308: LD_ADDR_VAR 0 63
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 0
38325: PUSH
38326: LD_INT 1
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 1
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 1
38366: NEG
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38396: LD_ADDR_VAR 0 64
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 0
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 0
38413: PUSH
38414: LD_INT 1
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: LD_INT 1
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 0
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 1
38454: NEG
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 1
38465: NEG
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: ST_TO_ADDR
// end ; 1 :
38484: GO 44381
38486: LD_INT 1
38488: DOUBLE
38489: EQUAL
38490: IFTRUE 38494
38492: GO 41117
38494: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38495: LD_ADDR_VAR 0 11
38499: PUSH
38500: LD_INT 1
38502: NEG
38503: PUSH
38504: LD_INT 3
38506: NEG
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: LD_INT 3
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: LD_INT 2
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: LIST
38538: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38539: LD_ADDR_VAR 0 12
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: LD_INT 1
38549: NEG
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: PUSH
38555: LD_INT 3
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 3
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: LIST
38579: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38580: LD_ADDR_VAR 0 13
38584: PUSH
38585: LD_INT 3
38587: PUSH
38588: LD_INT 2
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 3
38597: PUSH
38598: LD_INT 3
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: LD_INT 3
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38620: LD_ADDR_VAR 0 14
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: LD_INT 3
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 0
38637: PUSH
38638: LD_INT 3
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: LD_INT 2
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38661: LD_ADDR_VAR 0 15
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: LD_INT 1
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 3
38679: NEG
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 3
38690: NEG
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: LIST
38704: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38705: LD_ADDR_VAR 0 16
38709: PUSH
38710: LD_INT 2
38712: NEG
38713: PUSH
38714: LD_INT 3
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 3
38724: NEG
38725: PUSH
38726: LD_INT 2
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 3
38736: NEG
38737: PUSH
38738: LD_INT 3
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38751: LD_ADDR_VAR 0 17
38755: PUSH
38756: LD_INT 1
38758: NEG
38759: PUSH
38760: LD_INT 3
38762: NEG
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 3
38773: NEG
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: LD_INT 2
38784: NEG
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: LIST
38794: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38795: LD_ADDR_VAR 0 18
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 3
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 3
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: LIST
38835: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38836: LD_ADDR_VAR 0 19
38840: PUSH
38841: LD_INT 3
38843: PUSH
38844: LD_INT 2
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 3
38853: PUSH
38854: LD_INT 3
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 3
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: LIST
38875: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38876: LD_ADDR_VAR 0 20
38880: PUSH
38881: LD_INT 1
38883: PUSH
38884: LD_INT 3
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 0
38893: PUSH
38894: LD_INT 3
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: LD_INT 1
38903: NEG
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: LIST
38916: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38917: LD_ADDR_VAR 0 21
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: LD_INT 1
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 3
38935: NEG
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 3
38946: NEG
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: LIST
38960: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38961: LD_ADDR_VAR 0 22
38965: PUSH
38966: LD_INT 2
38968: NEG
38969: PUSH
38970: LD_INT 3
38972: NEG
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 3
38980: NEG
38981: PUSH
38982: LD_INT 2
38984: NEG
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 3
38992: NEG
38993: PUSH
38994: LD_INT 3
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: LIST
39006: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39007: LD_ADDR_VAR 0 23
39011: PUSH
39012: LD_INT 0
39014: PUSH
39015: LD_INT 3
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 4
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: LD_INT 3
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39051: LD_ADDR_VAR 0 24
39055: PUSH
39056: LD_INT 3
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 3
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 4
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: LIST
39091: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39092: LD_ADDR_VAR 0 25
39096: PUSH
39097: LD_INT 3
39099: PUSH
39100: LD_INT 3
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 4
39109: PUSH
39110: LD_INT 3
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 3
39119: PUSH
39120: LD_INT 4
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: LIST
39131: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39132: LD_ADDR_VAR 0 26
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: LD_INT 3
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: PUSH
39150: LD_INT 4
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: LD_INT 3
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: LIST
39172: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39173: LD_ADDR_VAR 0 27
39177: PUSH
39178: LD_INT 3
39180: NEG
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 3
39191: NEG
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 4
39202: NEG
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: LIST
39216: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39217: LD_ADDR_VAR 0 28
39221: PUSH
39222: LD_INT 3
39224: NEG
39225: PUSH
39226: LD_INT 3
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 3
39236: NEG
39237: PUSH
39238: LD_INT 4
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 4
39248: NEG
39249: PUSH
39250: LD_INT 3
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: LIST
39262: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39263: LD_ADDR_VAR 0 29
39267: PUSH
39268: LD_INT 1
39270: NEG
39271: PUSH
39272: LD_INT 3
39274: NEG
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 0
39282: PUSH
39283: LD_INT 3
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: LD_INT 2
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: LD_INT 4
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: LD_INT 4
39319: NEG
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 3
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: LD_INT 5
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: LD_INT 5
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 4
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: LD_INT 6
39376: NEG
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: LD_INT 6
39387: NEG
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: LD_INT 5
39398: NEG
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39418: LD_ADDR_VAR 0 30
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 3
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 3
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 3
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 4
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 4
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 4
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 5
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 5
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 5
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 6
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 6
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39561: LD_ADDR_VAR 0 31
39565: PUSH
39566: LD_INT 3
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 3
39578: PUSH
39579: LD_INT 3
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: LD_INT 3
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 4
39598: PUSH
39599: LD_INT 3
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 4
39608: PUSH
39609: LD_INT 4
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 3
39618: PUSH
39619: LD_INT 4
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 5
39628: PUSH
39629: LD_INT 4
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 5
39638: PUSH
39639: LD_INT 5
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 4
39648: PUSH
39649: LD_INT 5
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 6
39658: PUSH
39659: LD_INT 5
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 6
39668: PUSH
39669: LD_INT 6
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 5
39678: PUSH
39679: LD_INT 6
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39700: LD_ADDR_VAR 0 32
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: LD_INT 3
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: LD_INT 3
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: LD_INT 4
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: LD_INT 4
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: LD_INT 3
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: LD_INT 5
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: LD_INT 5
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: LD_INT 4
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: LD_INT 6
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 6
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 5
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39843: LD_ADDR_VAR 0 33
39847: PUSH
39848: LD_INT 2
39850: NEG
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 3
39861: NEG
39862: PUSH
39863: LD_INT 0
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 3
39872: NEG
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 3
39884: NEG
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 4
39895: NEG
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 4
39906: NEG
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 4
39918: NEG
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 5
39929: NEG
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 5
39940: NEG
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 5
39952: NEG
39953: PUSH
39954: LD_INT 1
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 6
39963: NEG
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 6
39974: NEG
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39998: LD_ADDR_VAR 0 34
40002: PUSH
40003: LD_INT 2
40005: NEG
40006: PUSH
40007: LD_INT 3
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 3
40017: NEG
40018: PUSH
40019: LD_INT 2
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 3
40029: NEG
40030: PUSH
40031: LD_INT 3
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 3
40041: NEG
40042: PUSH
40043: LD_INT 4
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 4
40053: NEG
40054: PUSH
40055: LD_INT 3
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 4
40065: NEG
40066: PUSH
40067: LD_INT 4
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 4
40077: NEG
40078: PUSH
40079: LD_INT 5
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 5
40089: NEG
40090: PUSH
40091: LD_INT 4
40093: NEG
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 5
40101: NEG
40102: PUSH
40103: LD_INT 5
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 5
40113: NEG
40114: PUSH
40115: LD_INT 6
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 6
40125: NEG
40126: PUSH
40127: LD_INT 5
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 6
40137: NEG
40138: PUSH
40139: LD_INT 6
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40161: LD_ADDR_VAR 0 41
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: LD_INT 2
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: LD_INT 3
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: LIST
40204: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40205: LD_ADDR_VAR 0 42
40209: PUSH
40210: LD_INT 2
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 2
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 3
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: LIST
40245: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40246: LD_ADDR_VAR 0 43
40250: PUSH
40251: LD_INT 2
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 3
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 3
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: LIST
40285: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40286: LD_ADDR_VAR 0 44
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 2
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: LD_INT 3
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: LD_INT 2
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: LIST
40326: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40327: LD_ADDR_VAR 0 45
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 3
40356: NEG
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40371: LD_ADDR_VAR 0 46
40375: PUSH
40376: LD_INT 2
40378: NEG
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: LD_INT 3
40394: NEG
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 3
40402: NEG
40403: PUSH
40404: LD_INT 2
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: LIST
40416: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40417: LD_ADDR_VAR 0 47
40421: PUSH
40422: LD_INT 2
40424: NEG
40425: PUSH
40426: LD_INT 3
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: NEG
40437: PUSH
40438: LD_INT 3
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40450: LD_ADDR_VAR 0 48
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40481: LD_ADDR_VAR 0 49
40485: PUSH
40486: LD_INT 3
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 3
40498: PUSH
40499: LD_INT 2
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40510: LD_ADDR_VAR 0 50
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 3
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 3
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40539: LD_ADDR_VAR 0 51
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 2
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 2
40557: NEG
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40570: LD_ADDR_VAR 0 52
40574: PUSH
40575: LD_INT 3
40577: NEG
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 3
40589: NEG
40590: PUSH
40591: LD_INT 2
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40603: LD_ADDR_VAR 0 53
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: LD_INT 3
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 3
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: LIST
40646: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40647: LD_ADDR_VAR 0 54
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 3
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 3
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: LIST
40687: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40688: LD_ADDR_VAR 0 55
40692: PUSH
40693: LD_INT 3
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: PUSH
40703: LD_INT 3
40705: PUSH
40706: LD_INT 3
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: LD_INT 3
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: LIST
40727: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40728: LD_ADDR_VAR 0 56
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 3
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: LD_INT 3
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: LIST
40768: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40769: LD_ADDR_VAR 0 57
40773: PUSH
40774: LD_INT 2
40776: NEG
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 3
40787: NEG
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 3
40798: NEG
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: LIST
40812: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40813: LD_ADDR_VAR 0 58
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: LD_INT 3
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 3
40832: NEG
40833: PUSH
40834: LD_INT 2
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 3
40844: NEG
40845: PUSH
40846: LD_INT 3
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: LIST
40858: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40859: LD_ADDR_VAR 0 59
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: LD_INT 2
40870: NEG
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 2
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40903: LD_ADDR_VAR 0 60
40907: PUSH
40908: LD_INT 1
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: PUSH
40922: LD_INT 0
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: PUSH
40929: LD_INT 2
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: LIST
40943: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40944: LD_ADDR_VAR 0 61
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 1
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: LIST
40983: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40984: LD_ADDR_VAR 0 62
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: LD_INT 2
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: LIST
41024: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41025: LD_ADDR_VAR 0 63
41029: PUSH
41030: LD_INT 1
41032: NEG
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: NEG
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: LIST
41068: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41069: LD_ADDR_VAR 0 64
41073: PUSH
41074: LD_INT 1
41076: NEG
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: LD_INT 1
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 2
41100: NEG
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: ST_TO_ADDR
// end ; 2 :
41115: GO 44381
41117: LD_INT 2
41119: DOUBLE
41120: EQUAL
41121: IFTRUE 41125
41123: GO 44380
41125: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41126: LD_ADDR_VAR 0 29
41130: PUSH
41131: LD_INT 4
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 4
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 5
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 5
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 4
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 3
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 3
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 3
41205: PUSH
41206: LD_INT 2
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 5
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 3
41226: PUSH
41227: LD_INT 3
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 3
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 4
41246: PUSH
41247: LD_INT 3
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 4
41256: PUSH
41257: LD_INT 4
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 3
41266: PUSH
41267: LD_INT 4
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 2
41276: PUSH
41277: LD_INT 3
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: LD_INT 2
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 4
41296: PUSH
41297: LD_INT 2
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: PUSH
41307: LD_INT 4
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 4
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: LD_INT 3
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 4
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 5
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 5
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 4
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: NEG
41378: PUSH
41379: LD_INT 3
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: PUSH
41389: LD_INT 5
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 2
41398: NEG
41399: PUSH
41400: LD_INT 3
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 3
41409: NEG
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 3
41420: NEG
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 2
41432: NEG
41433: PUSH
41434: LD_INT 0
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 2
41443: NEG
41444: PUSH
41445: LD_INT 1
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 3
41454: NEG
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 4
41465: NEG
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 4
41476: NEG
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 4
41488: NEG
41489: PUSH
41490: LD_INT 2
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 2
41500: NEG
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 4
41511: NEG
41512: PUSH
41513: LD_INT 4
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 4
41523: NEG
41524: PUSH
41525: LD_INT 5
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 3
41535: NEG
41536: PUSH
41537: LD_INT 4
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 3
41547: NEG
41548: PUSH
41549: LD_INT 3
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 4
41559: NEG
41560: PUSH
41561: LD_INT 3
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 5
41571: NEG
41572: PUSH
41573: LD_INT 4
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 5
41583: NEG
41584: PUSH
41585: LD_INT 5
41587: NEG
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 3
41595: NEG
41596: PUSH
41597: LD_INT 5
41599: NEG
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 5
41607: NEG
41608: PUSH
41609: LD_INT 3
41611: NEG
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41664: LD_ADDR_VAR 0 30
41668: PUSH
41669: LD_INT 4
41671: PUSH
41672: LD_INT 4
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 4
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 5
41691: PUSH
41692: LD_INT 4
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 5
41701: PUSH
41702: LD_INT 5
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 4
41711: PUSH
41712: LD_INT 5
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 3
41721: PUSH
41722: LD_INT 4
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 3
41731: PUSH
41732: LD_INT 3
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 5
41741: PUSH
41742: LD_INT 3
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 3
41751: PUSH
41752: LD_INT 5
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 3
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 2
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 1
41781: PUSH
41782: LD_INT 3
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: LD_INT 4
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: LD_INT 4
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: LD_INT 3
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 2
41833: PUSH
41834: LD_INT 4
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 2
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 4
41854: NEG
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 4
41865: NEG
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 3
41877: NEG
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 3
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 4
41899: NEG
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 5
41910: NEG
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 5
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 5
41933: NEG
41934: PUSH
41935: LD_INT 2
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 3
41945: NEG
41946: PUSH
41947: LD_INT 2
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 3
41956: NEG
41957: PUSH
41958: LD_INT 3
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 3
41968: NEG
41969: PUSH
41970: LD_INT 4
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 2
41980: NEG
41981: PUSH
41982: LD_INT 3
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 2
41992: NEG
41993: PUSH
41994: LD_INT 2
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 4
42016: NEG
42017: PUSH
42018: LD_INT 3
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 4
42028: NEG
42029: PUSH
42030: LD_INT 4
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 2
42040: NEG
42041: PUSH
42042: LD_INT 4
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 4
42052: NEG
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 4
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: LD_INT 5
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: LD_INT 4
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: LD_INT 3
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 3
42111: NEG
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: LD_INT 4
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: LD_INT 5
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 2
42143: PUSH
42144: LD_INT 3
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 2
42154: NEG
42155: PUSH
42156: LD_INT 5
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42211: LD_ADDR_VAR 0 31
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 4
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: LD_INT 3
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: LD_INT 4
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 1
42248: PUSH
42249: LD_INT 5
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 0
42258: PUSH
42259: LD_INT 5
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: LD_INT 4
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: LD_INT 3
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 2
42290: PUSH
42291: LD_INT 5
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 2
42300: NEG
42301: PUSH
42302: LD_INT 3
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 3
42311: NEG
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 3
42322: NEG
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 2
42334: NEG
42335: PUSH
42336: LD_INT 0
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_INT 2
42345: NEG
42346: PUSH
42347: LD_INT 1
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 3
42356: NEG
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 4
42367: NEG
42368: PUSH
42369: LD_INT 0
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 4
42378: NEG
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 4
42390: NEG
42391: PUSH
42392: LD_INT 2
42394: NEG
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 2
42402: NEG
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 4
42413: NEG
42414: PUSH
42415: LD_INT 4
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 4
42425: NEG
42426: PUSH
42427: LD_INT 5
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 3
42437: NEG
42438: PUSH
42439: LD_INT 4
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 3
42449: NEG
42450: PUSH
42451: LD_INT 3
42453: NEG
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 4
42461: NEG
42462: PUSH
42463: LD_INT 3
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 5
42473: NEG
42474: PUSH
42475: LD_INT 4
42477: NEG
42478: PUSH
42479: EMPTY
42480: LIST
42481: LIST
42482: PUSH
42483: LD_INT 5
42485: NEG
42486: PUSH
42487: LD_INT 5
42489: NEG
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 3
42497: NEG
42498: PUSH
42499: LD_INT 5
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 5
42509: NEG
42510: PUSH
42511: LD_INT 3
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 4
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 3
42546: NEG
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: LD_INT 2
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 2
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: NEG
42577: PUSH
42578: LD_INT 3
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: LD_INT 4
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 2
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: NEG
42612: PUSH
42613: LD_INT 4
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 4
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 4
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 5
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 5
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 4
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 3
42674: PUSH
42675: LD_INT 0
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 3
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 3
42695: PUSH
42696: LD_INT 2
42698: NEG
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 5
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42761: LD_ADDR_VAR 0 32
42765: PUSH
42766: LD_INT 4
42768: NEG
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 4
42779: NEG
42780: PUSH
42781: LD_INT 1
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 3
42791: NEG
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 3
42802: NEG
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 4
42813: NEG
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 5
42824: NEG
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 5
42835: NEG
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 5
42847: NEG
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 3
42859: NEG
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 3
42870: NEG
42871: PUSH
42872: LD_INT 3
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 3
42882: NEG
42883: PUSH
42884: LD_INT 4
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: LD_INT 3
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 2
42906: NEG
42907: PUSH
42908: LD_INT 2
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 3
42918: NEG
42919: PUSH
42920: LD_INT 2
42922: NEG
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 4
42930: NEG
42931: PUSH
42932: LD_INT 3
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 4
42942: NEG
42943: PUSH
42944: LD_INT 4
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 2
42954: NEG
42955: PUSH
42956: LD_INT 4
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 4
42966: NEG
42967: PUSH
42968: LD_INT 2
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 4
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 5
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 4
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 1
43011: PUSH
43012: LD_INT 3
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 3
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: NEG
43034: PUSH
43035: LD_INT 4
43037: NEG
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: LD_INT 5
43049: NEG
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: LD_INT 3
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: LD_INT 5
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 3
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 3
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 4
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 4
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 3
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 4
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 4
43173: PUSH
43174: LD_INT 4
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 4
43183: PUSH
43184: LD_INT 3
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 5
43193: PUSH
43194: LD_INT 4
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 5
43203: PUSH
43204: LD_INT 5
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 4
43213: PUSH
43214: LD_INT 5
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 3
43223: PUSH
43224: LD_INT 4
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 3
43233: PUSH
43234: LD_INT 3
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 5
43243: PUSH
43244: LD_INT 3
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 3
43253: PUSH
43254: LD_INT 5
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43308: LD_ADDR_VAR 0 33
43312: PUSH
43313: LD_INT 4
43315: NEG
43316: PUSH
43317: LD_INT 4
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 4
43327: NEG
43328: PUSH
43329: LD_INT 5
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 3
43339: NEG
43340: PUSH
43341: LD_INT 4
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 3
43351: NEG
43352: PUSH
43353: LD_INT 3
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 4
43363: NEG
43364: PUSH
43365: LD_INT 3
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 5
43375: NEG
43376: PUSH
43377: LD_INT 4
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 5
43387: NEG
43388: PUSH
43389: LD_INT 5
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 3
43399: NEG
43400: PUSH
43401: LD_INT 5
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 5
43411: NEG
43412: PUSH
43413: LD_INT 3
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: LD_INT 3
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 4
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 3
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 2
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 3
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: LD_INT 4
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: LD_INT 4
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 4
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 4
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 5
43546: PUSH
43547: LD_INT 0
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 5
43556: PUSH
43557: LD_INT 1
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 4
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 3
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 3
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 3
43597: PUSH
43598: LD_INT 2
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 5
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 3
43618: PUSH
43619: LD_INT 3
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 3
43628: PUSH
43629: LD_INT 2
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 4
43638: PUSH
43639: LD_INT 3
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 4
43648: PUSH
43649: LD_INT 4
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 3
43658: PUSH
43659: LD_INT 4
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: LD_INT 3
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 2
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 4
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 2
43698: PUSH
43699: LD_INT 4
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_INT 4
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 3
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: LD_INT 4
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 5
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 5
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 4
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: NEG
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: LD_INT 5
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43846: LD_ADDR_VAR 0 34
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 4
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 5
43867: NEG
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: LD_INT 4
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 3
43889: NEG
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 3
43900: NEG
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: LD_INT 4
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: LD_INT 5
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 3
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 2
43943: NEG
43944: PUSH
43945: LD_INT 5
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 3
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 3
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 4
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 4
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 3
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 2
44006: PUSH
44007: LD_INT 0
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: LD_INT 2
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 4
44038: PUSH
44039: LD_INT 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 4
44048: PUSH
44049: LD_INT 4
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 4
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 5
44068: PUSH
44069: LD_INT 4
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 5
44078: PUSH
44079: LD_INT 5
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 4
44088: PUSH
44089: LD_INT 5
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 3
44098: PUSH
44099: LD_INT 4
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: LD_INT 3
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 5
44118: PUSH
44119: LD_INT 3
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 3
44128: PUSH
44129: LD_INT 5
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: LD_INT 3
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: LD_INT 3
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 4
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 4
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: NEG
44189: PUSH
44190: LD_INT 3
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 2
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: LD_INT 4
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: NEG
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 4
44231: NEG
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 4
44242: NEG
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 3
44254: NEG
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 3
44265: NEG
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 4
44276: NEG
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 5
44287: NEG
44288: PUSH
44289: LD_INT 0
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: PUSH
44296: LD_INT 5
44298: NEG
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 5
44310: NEG
44311: PUSH
44312: LD_INT 2
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 3
44322: NEG
44323: PUSH
44324: LD_INT 2
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: ST_TO_ADDR
// end ; end ;
44378: GO 44381
44380: POP
// case btype of b_depot , b_warehouse :
44381: LD_VAR 0 1
44385: PUSH
44386: LD_INT 0
44388: DOUBLE
44389: EQUAL
44390: IFTRUE 44400
44392: LD_INT 1
44394: DOUBLE
44395: EQUAL
44396: IFTRUE 44400
44398: GO 44601
44400: POP
// case nation of nation_american :
44401: LD_VAR 0 5
44405: PUSH
44406: LD_INT 1
44408: DOUBLE
44409: EQUAL
44410: IFTRUE 44414
44412: GO 44470
44414: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
44415: LD_ADDR_VAR 0 9
44419: PUSH
44420: LD_VAR 0 11
44424: PUSH
44425: LD_VAR 0 12
44429: PUSH
44430: LD_VAR 0 13
44434: PUSH
44435: LD_VAR 0 14
44439: PUSH
44440: LD_VAR 0 15
44444: PUSH
44445: LD_VAR 0 16
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: PUSH
44458: LD_VAR 0 4
44462: PUSH
44463: LD_INT 1
44465: PLUS
44466: ARRAY
44467: ST_TO_ADDR
44468: GO 44599
44470: LD_INT 2
44472: DOUBLE
44473: EQUAL
44474: IFTRUE 44478
44476: GO 44534
44478: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
44479: LD_ADDR_VAR 0 9
44483: PUSH
44484: LD_VAR 0 17
44488: PUSH
44489: LD_VAR 0 18
44493: PUSH
44494: LD_VAR 0 19
44498: PUSH
44499: LD_VAR 0 20
44503: PUSH
44504: LD_VAR 0 21
44508: PUSH
44509: LD_VAR 0 22
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: PUSH
44522: LD_VAR 0 4
44526: PUSH
44527: LD_INT 1
44529: PLUS
44530: ARRAY
44531: ST_TO_ADDR
44532: GO 44599
44534: LD_INT 3
44536: DOUBLE
44537: EQUAL
44538: IFTRUE 44542
44540: GO 44598
44542: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44543: LD_ADDR_VAR 0 9
44547: PUSH
44548: LD_VAR 0 23
44552: PUSH
44553: LD_VAR 0 24
44557: PUSH
44558: LD_VAR 0 25
44562: PUSH
44563: LD_VAR 0 26
44567: PUSH
44568: LD_VAR 0 27
44572: PUSH
44573: LD_VAR 0 28
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: PUSH
44586: LD_VAR 0 4
44590: PUSH
44591: LD_INT 1
44593: PLUS
44594: ARRAY
44595: ST_TO_ADDR
44596: GO 44599
44598: POP
44599: GO 45154
44601: LD_INT 2
44603: DOUBLE
44604: EQUAL
44605: IFTRUE 44615
44607: LD_INT 3
44609: DOUBLE
44610: EQUAL
44611: IFTRUE 44615
44613: GO 44671
44615: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44616: LD_ADDR_VAR 0 9
44620: PUSH
44621: LD_VAR 0 29
44625: PUSH
44626: LD_VAR 0 30
44630: PUSH
44631: LD_VAR 0 31
44635: PUSH
44636: LD_VAR 0 32
44640: PUSH
44641: LD_VAR 0 33
44645: PUSH
44646: LD_VAR 0 34
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: PUSH
44659: LD_VAR 0 4
44663: PUSH
44664: LD_INT 1
44666: PLUS
44667: ARRAY
44668: ST_TO_ADDR
44669: GO 45154
44671: LD_INT 16
44673: DOUBLE
44674: EQUAL
44675: IFTRUE 44733
44677: LD_INT 17
44679: DOUBLE
44680: EQUAL
44681: IFTRUE 44733
44683: LD_INT 18
44685: DOUBLE
44686: EQUAL
44687: IFTRUE 44733
44689: LD_INT 19
44691: DOUBLE
44692: EQUAL
44693: IFTRUE 44733
44695: LD_INT 22
44697: DOUBLE
44698: EQUAL
44699: IFTRUE 44733
44701: LD_INT 20
44703: DOUBLE
44704: EQUAL
44705: IFTRUE 44733
44707: LD_INT 21
44709: DOUBLE
44710: EQUAL
44711: IFTRUE 44733
44713: LD_INT 23
44715: DOUBLE
44716: EQUAL
44717: IFTRUE 44733
44719: LD_INT 24
44721: DOUBLE
44722: EQUAL
44723: IFTRUE 44733
44725: LD_INT 25
44727: DOUBLE
44728: EQUAL
44729: IFTRUE 44733
44731: GO 44789
44733: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44734: LD_ADDR_VAR 0 9
44738: PUSH
44739: LD_VAR 0 35
44743: PUSH
44744: LD_VAR 0 36
44748: PUSH
44749: LD_VAR 0 37
44753: PUSH
44754: LD_VAR 0 38
44758: PUSH
44759: LD_VAR 0 39
44763: PUSH
44764: LD_VAR 0 40
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: PUSH
44777: LD_VAR 0 4
44781: PUSH
44782: LD_INT 1
44784: PLUS
44785: ARRAY
44786: ST_TO_ADDR
44787: GO 45154
44789: LD_INT 6
44791: DOUBLE
44792: EQUAL
44793: IFTRUE 44845
44795: LD_INT 7
44797: DOUBLE
44798: EQUAL
44799: IFTRUE 44845
44801: LD_INT 8
44803: DOUBLE
44804: EQUAL
44805: IFTRUE 44845
44807: LD_INT 13
44809: DOUBLE
44810: EQUAL
44811: IFTRUE 44845
44813: LD_INT 12
44815: DOUBLE
44816: EQUAL
44817: IFTRUE 44845
44819: LD_INT 15
44821: DOUBLE
44822: EQUAL
44823: IFTRUE 44845
44825: LD_INT 11
44827: DOUBLE
44828: EQUAL
44829: IFTRUE 44845
44831: LD_INT 14
44833: DOUBLE
44834: EQUAL
44835: IFTRUE 44845
44837: LD_INT 10
44839: DOUBLE
44840: EQUAL
44841: IFTRUE 44845
44843: GO 44901
44845: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44846: LD_ADDR_VAR 0 9
44850: PUSH
44851: LD_VAR 0 41
44855: PUSH
44856: LD_VAR 0 42
44860: PUSH
44861: LD_VAR 0 43
44865: PUSH
44866: LD_VAR 0 44
44870: PUSH
44871: LD_VAR 0 45
44875: PUSH
44876: LD_VAR 0 46
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: PUSH
44889: LD_VAR 0 4
44893: PUSH
44894: LD_INT 1
44896: PLUS
44897: ARRAY
44898: ST_TO_ADDR
44899: GO 45154
44901: LD_INT 36
44903: DOUBLE
44904: EQUAL
44905: IFTRUE 44909
44907: GO 44965
44909: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44910: LD_ADDR_VAR 0 9
44914: PUSH
44915: LD_VAR 0 47
44919: PUSH
44920: LD_VAR 0 48
44924: PUSH
44925: LD_VAR 0 49
44929: PUSH
44930: LD_VAR 0 50
44934: PUSH
44935: LD_VAR 0 51
44939: PUSH
44940: LD_VAR 0 52
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: PUSH
44953: LD_VAR 0 4
44957: PUSH
44958: LD_INT 1
44960: PLUS
44961: ARRAY
44962: ST_TO_ADDR
44963: GO 45154
44965: LD_INT 4
44967: DOUBLE
44968: EQUAL
44969: IFTRUE 44991
44971: LD_INT 5
44973: DOUBLE
44974: EQUAL
44975: IFTRUE 44991
44977: LD_INT 34
44979: DOUBLE
44980: EQUAL
44981: IFTRUE 44991
44983: LD_INT 37
44985: DOUBLE
44986: EQUAL
44987: IFTRUE 44991
44989: GO 45047
44991: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44992: LD_ADDR_VAR 0 9
44996: PUSH
44997: LD_VAR 0 53
45001: PUSH
45002: LD_VAR 0 54
45006: PUSH
45007: LD_VAR 0 55
45011: PUSH
45012: LD_VAR 0 56
45016: PUSH
45017: LD_VAR 0 57
45021: PUSH
45022: LD_VAR 0 58
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: PUSH
45035: LD_VAR 0 4
45039: PUSH
45040: LD_INT 1
45042: PLUS
45043: ARRAY
45044: ST_TO_ADDR
45045: GO 45154
45047: LD_INT 31
45049: DOUBLE
45050: EQUAL
45051: IFTRUE 45097
45053: LD_INT 32
45055: DOUBLE
45056: EQUAL
45057: IFTRUE 45097
45059: LD_INT 33
45061: DOUBLE
45062: EQUAL
45063: IFTRUE 45097
45065: LD_INT 27
45067: DOUBLE
45068: EQUAL
45069: IFTRUE 45097
45071: LD_INT 26
45073: DOUBLE
45074: EQUAL
45075: IFTRUE 45097
45077: LD_INT 28
45079: DOUBLE
45080: EQUAL
45081: IFTRUE 45097
45083: LD_INT 29
45085: DOUBLE
45086: EQUAL
45087: IFTRUE 45097
45089: LD_INT 30
45091: DOUBLE
45092: EQUAL
45093: IFTRUE 45097
45095: GO 45153
45097: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45098: LD_ADDR_VAR 0 9
45102: PUSH
45103: LD_VAR 0 59
45107: PUSH
45108: LD_VAR 0 60
45112: PUSH
45113: LD_VAR 0 61
45117: PUSH
45118: LD_VAR 0 62
45122: PUSH
45123: LD_VAR 0 63
45127: PUSH
45128: LD_VAR 0 64
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: PUSH
45141: LD_VAR 0 4
45145: PUSH
45146: LD_INT 1
45148: PLUS
45149: ARRAY
45150: ST_TO_ADDR
45151: GO 45154
45153: POP
// temp_list2 = [ ] ;
45154: LD_ADDR_VAR 0 10
45158: PUSH
45159: EMPTY
45160: ST_TO_ADDR
// for i in temp_list do
45161: LD_ADDR_VAR 0 8
45165: PUSH
45166: LD_VAR 0 9
45170: PUSH
45171: FOR_IN
45172: IFFALSE 45224
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45174: LD_ADDR_VAR 0 10
45178: PUSH
45179: LD_VAR 0 10
45183: PUSH
45184: LD_VAR 0 8
45188: PUSH
45189: LD_INT 1
45191: ARRAY
45192: PUSH
45193: LD_VAR 0 2
45197: PLUS
45198: PUSH
45199: LD_VAR 0 8
45203: PUSH
45204: LD_INT 2
45206: ARRAY
45207: PUSH
45208: LD_VAR 0 3
45212: PLUS
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: EMPTY
45219: LIST
45220: ADD
45221: ST_TO_ADDR
45222: GO 45171
45224: POP
45225: POP
// result = temp_list2 ;
45226: LD_ADDR_VAR 0 7
45230: PUSH
45231: LD_VAR 0 10
45235: ST_TO_ADDR
// end ;
45236: LD_VAR 0 7
45240: RET
// export function EnemyInRange ( unit , dist ) ; begin
45241: LD_INT 0
45243: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45244: LD_ADDR_VAR 0 3
45248: PUSH
45249: LD_VAR 0 1
45253: PPUSH
45254: CALL_OW 255
45258: PPUSH
45259: LD_VAR 0 1
45263: PPUSH
45264: CALL_OW 250
45268: PPUSH
45269: LD_VAR 0 1
45273: PPUSH
45274: CALL_OW 251
45278: PPUSH
45279: LD_VAR 0 2
45283: PPUSH
45284: CALL 18637 0 4
45288: PUSH
45289: LD_INT 4
45291: ARRAY
45292: ST_TO_ADDR
// end ;
45293: LD_VAR 0 3
45297: RET
// export function PlayerSeeMe ( unit ) ; begin
45298: LD_INT 0
45300: PPUSH
// result := See ( your_side , unit ) ;
45301: LD_ADDR_VAR 0 2
45305: PUSH
45306: LD_OWVAR 2
45310: PPUSH
45311: LD_VAR 0 1
45315: PPUSH
45316: CALL_OW 292
45320: ST_TO_ADDR
// end ;
45321: LD_VAR 0 2
45325: RET
// export function ReverseDir ( unit ) ; begin
45326: LD_INT 0
45328: PPUSH
// if not unit then
45329: LD_VAR 0 1
45333: NOT
45334: IFFALSE 45338
// exit ;
45336: GO 45361
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45338: LD_ADDR_VAR 0 2
45342: PUSH
45343: LD_VAR 0 1
45347: PPUSH
45348: CALL_OW 254
45352: PUSH
45353: LD_INT 3
45355: PLUS
45356: PUSH
45357: LD_INT 6
45359: MOD
45360: ST_TO_ADDR
// end ;
45361: LD_VAR 0 2
45365: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45366: LD_INT 0
45368: PPUSH
45369: PPUSH
45370: PPUSH
45371: PPUSH
45372: PPUSH
// if not hexes then
45373: LD_VAR 0 2
45377: NOT
45378: IFFALSE 45382
// exit ;
45380: GO 45530
// dist := 9999 ;
45382: LD_ADDR_VAR 0 5
45386: PUSH
45387: LD_INT 9999
45389: ST_TO_ADDR
// for i = 1 to hexes do
45390: LD_ADDR_VAR 0 4
45394: PUSH
45395: DOUBLE
45396: LD_INT 1
45398: DEC
45399: ST_TO_ADDR
45400: LD_VAR 0 2
45404: PUSH
45405: FOR_TO
45406: IFFALSE 45518
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45408: LD_VAR 0 1
45412: PPUSH
45413: LD_VAR 0 2
45417: PUSH
45418: LD_VAR 0 4
45422: ARRAY
45423: PUSH
45424: LD_INT 1
45426: ARRAY
45427: PPUSH
45428: LD_VAR 0 2
45432: PUSH
45433: LD_VAR 0 4
45437: ARRAY
45438: PUSH
45439: LD_INT 2
45441: ARRAY
45442: PPUSH
45443: CALL_OW 297
45447: PUSH
45448: LD_VAR 0 5
45452: LESS
45453: IFFALSE 45516
// begin hex := hexes [ i ] ;
45455: LD_ADDR_VAR 0 7
45459: PUSH
45460: LD_VAR 0 2
45464: PUSH
45465: LD_VAR 0 4
45469: ARRAY
45470: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45471: LD_ADDR_VAR 0 5
45475: PUSH
45476: LD_VAR 0 1
45480: PPUSH
45481: LD_VAR 0 2
45485: PUSH
45486: LD_VAR 0 4
45490: ARRAY
45491: PUSH
45492: LD_INT 1
45494: ARRAY
45495: PPUSH
45496: LD_VAR 0 2
45500: PUSH
45501: LD_VAR 0 4
45505: ARRAY
45506: PUSH
45507: LD_INT 2
45509: ARRAY
45510: PPUSH
45511: CALL_OW 297
45515: ST_TO_ADDR
// end ; end ;
45516: GO 45405
45518: POP
45519: POP
// result := hex ;
45520: LD_ADDR_VAR 0 3
45524: PUSH
45525: LD_VAR 0 7
45529: ST_TO_ADDR
// end ;
45530: LD_VAR 0 3
45534: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45535: LD_INT 0
45537: PPUSH
45538: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45539: LD_VAR 0 1
45543: NOT
45544: PUSH
45545: LD_VAR 0 1
45549: PUSH
45550: LD_INT 21
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: EMPTY
45557: LIST
45558: LIST
45559: PUSH
45560: LD_INT 23
45562: PUSH
45563: LD_INT 2
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PPUSH
45574: CALL_OW 69
45578: IN
45579: NOT
45580: OR
45581: IFFALSE 45585
// exit ;
45583: GO 45632
// for i = 1 to 3 do
45585: LD_ADDR_VAR 0 3
45589: PUSH
45590: DOUBLE
45591: LD_INT 1
45593: DEC
45594: ST_TO_ADDR
45595: LD_INT 3
45597: PUSH
45598: FOR_TO
45599: IFFALSE 45630
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45601: LD_VAR 0 1
45605: PPUSH
45606: CALL_OW 250
45610: PPUSH
45611: LD_VAR 0 1
45615: PPUSH
45616: CALL_OW 251
45620: PPUSH
45621: LD_INT 1
45623: PPUSH
45624: CALL_OW 453
45628: GO 45598
45630: POP
45631: POP
// end ;
45632: LD_VAR 0 2
45636: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45637: LD_INT 0
45639: PPUSH
45640: PPUSH
45641: PPUSH
45642: PPUSH
45643: PPUSH
45644: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45645: LD_VAR 0 1
45649: NOT
45650: PUSH
45651: LD_VAR 0 2
45655: NOT
45656: OR
45657: PUSH
45658: LD_VAR 0 1
45662: PPUSH
45663: CALL_OW 314
45667: OR
45668: IFFALSE 45672
// exit ;
45670: GO 46113
// x := GetX ( enemy_unit ) ;
45672: LD_ADDR_VAR 0 7
45676: PUSH
45677: LD_VAR 0 2
45681: PPUSH
45682: CALL_OW 250
45686: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45687: LD_ADDR_VAR 0 8
45691: PUSH
45692: LD_VAR 0 2
45696: PPUSH
45697: CALL_OW 251
45701: ST_TO_ADDR
// if not x or not y then
45702: LD_VAR 0 7
45706: NOT
45707: PUSH
45708: LD_VAR 0 8
45712: NOT
45713: OR
45714: IFFALSE 45718
// exit ;
45716: GO 46113
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45718: LD_ADDR_VAR 0 6
45722: PUSH
45723: LD_VAR 0 7
45727: PPUSH
45728: LD_INT 0
45730: PPUSH
45731: LD_INT 4
45733: PPUSH
45734: CALL_OW 272
45738: PUSH
45739: LD_VAR 0 8
45743: PPUSH
45744: LD_INT 0
45746: PPUSH
45747: LD_INT 4
45749: PPUSH
45750: CALL_OW 273
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_VAR 0 7
45763: PPUSH
45764: LD_INT 1
45766: PPUSH
45767: LD_INT 4
45769: PPUSH
45770: CALL_OW 272
45774: PUSH
45775: LD_VAR 0 8
45779: PPUSH
45780: LD_INT 1
45782: PPUSH
45783: LD_INT 4
45785: PPUSH
45786: CALL_OW 273
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_VAR 0 7
45799: PPUSH
45800: LD_INT 2
45802: PPUSH
45803: LD_INT 4
45805: PPUSH
45806: CALL_OW 272
45810: PUSH
45811: LD_VAR 0 8
45815: PPUSH
45816: LD_INT 2
45818: PPUSH
45819: LD_INT 4
45821: PPUSH
45822: CALL_OW 273
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_VAR 0 7
45835: PPUSH
45836: LD_INT 3
45838: PPUSH
45839: LD_INT 4
45841: PPUSH
45842: CALL_OW 272
45846: PUSH
45847: LD_VAR 0 8
45851: PPUSH
45852: LD_INT 3
45854: PPUSH
45855: LD_INT 4
45857: PPUSH
45858: CALL_OW 273
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_VAR 0 7
45871: PPUSH
45872: LD_INT 4
45874: PPUSH
45875: LD_INT 4
45877: PPUSH
45878: CALL_OW 272
45882: PUSH
45883: LD_VAR 0 8
45887: PPUSH
45888: LD_INT 4
45890: PPUSH
45891: LD_INT 4
45893: PPUSH
45894: CALL_OW 273
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_VAR 0 7
45907: PPUSH
45908: LD_INT 5
45910: PPUSH
45911: LD_INT 4
45913: PPUSH
45914: CALL_OW 272
45918: PUSH
45919: LD_VAR 0 8
45923: PPUSH
45924: LD_INT 5
45926: PPUSH
45927: LD_INT 4
45929: PPUSH
45930: CALL_OW 273
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: ST_TO_ADDR
// for i = tmp downto 1 do
45947: LD_ADDR_VAR 0 4
45951: PUSH
45952: DOUBLE
45953: LD_VAR 0 6
45957: INC
45958: ST_TO_ADDR
45959: LD_INT 1
45961: PUSH
45962: FOR_DOWNTO
45963: IFFALSE 46064
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45965: LD_VAR 0 6
45969: PUSH
45970: LD_VAR 0 4
45974: ARRAY
45975: PUSH
45976: LD_INT 1
45978: ARRAY
45979: PPUSH
45980: LD_VAR 0 6
45984: PUSH
45985: LD_VAR 0 4
45989: ARRAY
45990: PUSH
45991: LD_INT 2
45993: ARRAY
45994: PPUSH
45995: CALL_OW 488
45999: NOT
46000: PUSH
46001: LD_VAR 0 6
46005: PUSH
46006: LD_VAR 0 4
46010: ARRAY
46011: PUSH
46012: LD_INT 1
46014: ARRAY
46015: PPUSH
46016: LD_VAR 0 6
46020: PUSH
46021: LD_VAR 0 4
46025: ARRAY
46026: PUSH
46027: LD_INT 2
46029: ARRAY
46030: PPUSH
46031: CALL_OW 428
46035: PUSH
46036: LD_INT 0
46038: NONEQUAL
46039: OR
46040: IFFALSE 46062
// tmp := Delete ( tmp , i ) ;
46042: LD_ADDR_VAR 0 6
46046: PUSH
46047: LD_VAR 0 6
46051: PPUSH
46052: LD_VAR 0 4
46056: PPUSH
46057: CALL_OW 3
46061: ST_TO_ADDR
46062: GO 45962
46064: POP
46065: POP
// j := GetClosestHex ( unit , tmp ) ;
46066: LD_ADDR_VAR 0 5
46070: PUSH
46071: LD_VAR 0 1
46075: PPUSH
46076: LD_VAR 0 6
46080: PPUSH
46081: CALL 45366 0 2
46085: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46086: LD_VAR 0 1
46090: PPUSH
46091: LD_VAR 0 5
46095: PUSH
46096: LD_INT 1
46098: ARRAY
46099: PPUSH
46100: LD_VAR 0 5
46104: PUSH
46105: LD_INT 2
46107: ARRAY
46108: PPUSH
46109: CALL_OW 111
// end ;
46113: LD_VAR 0 3
46117: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46118: LD_INT 0
46120: PPUSH
46121: PPUSH
46122: PPUSH
// uc_side = 0 ;
46123: LD_ADDR_OWVAR 20
46127: PUSH
46128: LD_INT 0
46130: ST_TO_ADDR
// uc_nation = 0 ;
46131: LD_ADDR_OWVAR 21
46135: PUSH
46136: LD_INT 0
46138: ST_TO_ADDR
// InitHc_All ( ) ;
46139: CALL_OW 584
// InitVc ;
46143: CALL_OW 20
// if mastodonts then
46147: LD_VAR 0 6
46151: IFFALSE 46218
// for i = 1 to mastodonts do
46153: LD_ADDR_VAR 0 11
46157: PUSH
46158: DOUBLE
46159: LD_INT 1
46161: DEC
46162: ST_TO_ADDR
46163: LD_VAR 0 6
46167: PUSH
46168: FOR_TO
46169: IFFALSE 46216
// begin vc_chassis := 31 ;
46171: LD_ADDR_OWVAR 37
46175: PUSH
46176: LD_INT 31
46178: ST_TO_ADDR
// vc_control := control_rider ;
46179: LD_ADDR_OWVAR 38
46183: PUSH
46184: LD_INT 4
46186: ST_TO_ADDR
// animal := CreateVehicle ;
46187: LD_ADDR_VAR 0 12
46191: PUSH
46192: CALL_OW 45
46196: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46197: LD_VAR 0 12
46201: PPUSH
46202: LD_VAR 0 8
46206: PPUSH
46207: LD_INT 0
46209: PPUSH
46210: CALL 48353 0 3
// end ;
46214: GO 46168
46216: POP
46217: POP
// if horses then
46218: LD_VAR 0 5
46222: IFFALSE 46289
// for i = 1 to horses do
46224: LD_ADDR_VAR 0 11
46228: PUSH
46229: DOUBLE
46230: LD_INT 1
46232: DEC
46233: ST_TO_ADDR
46234: LD_VAR 0 5
46238: PUSH
46239: FOR_TO
46240: IFFALSE 46287
// begin hc_class := 21 ;
46242: LD_ADDR_OWVAR 28
46246: PUSH
46247: LD_INT 21
46249: ST_TO_ADDR
// hc_gallery :=  ;
46250: LD_ADDR_OWVAR 33
46254: PUSH
46255: LD_STRING 
46257: ST_TO_ADDR
// animal := CreateHuman ;
46258: LD_ADDR_VAR 0 12
46262: PUSH
46263: CALL_OW 44
46267: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46268: LD_VAR 0 12
46272: PPUSH
46273: LD_VAR 0 8
46277: PPUSH
46278: LD_INT 0
46280: PPUSH
46281: CALL 48353 0 3
// end ;
46285: GO 46239
46287: POP
46288: POP
// if birds then
46289: LD_VAR 0 1
46293: IFFALSE 46360
// for i = 1 to birds do
46295: LD_ADDR_VAR 0 11
46299: PUSH
46300: DOUBLE
46301: LD_INT 1
46303: DEC
46304: ST_TO_ADDR
46305: LD_VAR 0 1
46309: PUSH
46310: FOR_TO
46311: IFFALSE 46358
// begin hc_class = 18 ;
46313: LD_ADDR_OWVAR 28
46317: PUSH
46318: LD_INT 18
46320: ST_TO_ADDR
// hc_gallery =  ;
46321: LD_ADDR_OWVAR 33
46325: PUSH
46326: LD_STRING 
46328: ST_TO_ADDR
// animal := CreateHuman ;
46329: LD_ADDR_VAR 0 12
46333: PUSH
46334: CALL_OW 44
46338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46339: LD_VAR 0 12
46343: PPUSH
46344: LD_VAR 0 8
46348: PPUSH
46349: LD_INT 0
46351: PPUSH
46352: CALL 48353 0 3
// end ;
46356: GO 46310
46358: POP
46359: POP
// if tigers then
46360: LD_VAR 0 2
46364: IFFALSE 46448
// for i = 1 to tigers do
46366: LD_ADDR_VAR 0 11
46370: PUSH
46371: DOUBLE
46372: LD_INT 1
46374: DEC
46375: ST_TO_ADDR
46376: LD_VAR 0 2
46380: PUSH
46381: FOR_TO
46382: IFFALSE 46446
// begin hc_class = class_tiger ;
46384: LD_ADDR_OWVAR 28
46388: PUSH
46389: LD_INT 14
46391: ST_TO_ADDR
// hc_gallery =  ;
46392: LD_ADDR_OWVAR 33
46396: PUSH
46397: LD_STRING 
46399: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46400: LD_ADDR_OWVAR 35
46404: PUSH
46405: LD_INT 7
46407: NEG
46408: PPUSH
46409: LD_INT 7
46411: PPUSH
46412: CALL_OW 12
46416: ST_TO_ADDR
// animal := CreateHuman ;
46417: LD_ADDR_VAR 0 12
46421: PUSH
46422: CALL_OW 44
46426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46427: LD_VAR 0 12
46431: PPUSH
46432: LD_VAR 0 8
46436: PPUSH
46437: LD_INT 0
46439: PPUSH
46440: CALL 48353 0 3
// end ;
46444: GO 46381
46446: POP
46447: POP
// if apemans then
46448: LD_VAR 0 3
46452: IFFALSE 46575
// for i = 1 to apemans do
46454: LD_ADDR_VAR 0 11
46458: PUSH
46459: DOUBLE
46460: LD_INT 1
46462: DEC
46463: ST_TO_ADDR
46464: LD_VAR 0 3
46468: PUSH
46469: FOR_TO
46470: IFFALSE 46573
// begin hc_class = class_apeman ;
46472: LD_ADDR_OWVAR 28
46476: PUSH
46477: LD_INT 12
46479: ST_TO_ADDR
// hc_gallery =  ;
46480: LD_ADDR_OWVAR 33
46484: PUSH
46485: LD_STRING 
46487: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46488: LD_ADDR_OWVAR 35
46492: PUSH
46493: LD_INT 2
46495: NEG
46496: PPUSH
46497: LD_INT 2
46499: PPUSH
46500: CALL_OW 12
46504: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46505: LD_ADDR_OWVAR 31
46509: PUSH
46510: LD_INT 1
46512: PPUSH
46513: LD_INT 3
46515: PPUSH
46516: CALL_OW 12
46520: PUSH
46521: LD_INT 1
46523: PPUSH
46524: LD_INT 3
46526: PPUSH
46527: CALL_OW 12
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: ST_TO_ADDR
// animal := CreateHuman ;
46544: LD_ADDR_VAR 0 12
46548: PUSH
46549: CALL_OW 44
46553: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46554: LD_VAR 0 12
46558: PPUSH
46559: LD_VAR 0 8
46563: PPUSH
46564: LD_INT 0
46566: PPUSH
46567: CALL 48353 0 3
// end ;
46571: GO 46469
46573: POP
46574: POP
// if enchidnas then
46575: LD_VAR 0 4
46579: IFFALSE 46646
// for i = 1 to enchidnas do
46581: LD_ADDR_VAR 0 11
46585: PUSH
46586: DOUBLE
46587: LD_INT 1
46589: DEC
46590: ST_TO_ADDR
46591: LD_VAR 0 4
46595: PUSH
46596: FOR_TO
46597: IFFALSE 46644
// begin hc_class = 13 ;
46599: LD_ADDR_OWVAR 28
46603: PUSH
46604: LD_INT 13
46606: ST_TO_ADDR
// hc_gallery =  ;
46607: LD_ADDR_OWVAR 33
46611: PUSH
46612: LD_STRING 
46614: ST_TO_ADDR
// animal := CreateHuman ;
46615: LD_ADDR_VAR 0 12
46619: PUSH
46620: CALL_OW 44
46624: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46625: LD_VAR 0 12
46629: PPUSH
46630: LD_VAR 0 8
46634: PPUSH
46635: LD_INT 0
46637: PPUSH
46638: CALL 48353 0 3
// end ;
46642: GO 46596
46644: POP
46645: POP
// if fishes then
46646: LD_VAR 0 7
46650: IFFALSE 46717
// for i = 1 to fishes do
46652: LD_ADDR_VAR 0 11
46656: PUSH
46657: DOUBLE
46658: LD_INT 1
46660: DEC
46661: ST_TO_ADDR
46662: LD_VAR 0 7
46666: PUSH
46667: FOR_TO
46668: IFFALSE 46715
// begin hc_class = 20 ;
46670: LD_ADDR_OWVAR 28
46674: PUSH
46675: LD_INT 20
46677: ST_TO_ADDR
// hc_gallery =  ;
46678: LD_ADDR_OWVAR 33
46682: PUSH
46683: LD_STRING 
46685: ST_TO_ADDR
// animal := CreateHuman ;
46686: LD_ADDR_VAR 0 12
46690: PUSH
46691: CALL_OW 44
46695: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46696: LD_VAR 0 12
46700: PPUSH
46701: LD_VAR 0 9
46705: PPUSH
46706: LD_INT 0
46708: PPUSH
46709: CALL 48353 0 3
// end ;
46713: GO 46667
46715: POP
46716: POP
// end ;
46717: LD_VAR 0 10
46721: RET
// export function WantHeal ( sci , unit ) ; begin
46722: LD_INT 0
46724: PPUSH
// if GetTaskList ( sci ) > 0 then
46725: LD_VAR 0 1
46729: PPUSH
46730: CALL_OW 437
46734: PUSH
46735: LD_INT 0
46737: GREATER
46738: IFFALSE 46808
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46740: LD_VAR 0 1
46744: PPUSH
46745: CALL_OW 437
46749: PUSH
46750: LD_INT 1
46752: ARRAY
46753: PUSH
46754: LD_INT 1
46756: ARRAY
46757: PUSH
46758: LD_STRING l
46760: EQUAL
46761: PUSH
46762: LD_VAR 0 1
46766: PPUSH
46767: CALL_OW 437
46771: PUSH
46772: LD_INT 1
46774: ARRAY
46775: PUSH
46776: LD_INT 4
46778: ARRAY
46779: PUSH
46780: LD_VAR 0 2
46784: EQUAL
46785: AND
46786: IFFALSE 46798
// result := true else
46788: LD_ADDR_VAR 0 3
46792: PUSH
46793: LD_INT 1
46795: ST_TO_ADDR
46796: GO 46806
// result := false ;
46798: LD_ADDR_VAR 0 3
46802: PUSH
46803: LD_INT 0
46805: ST_TO_ADDR
// end else
46806: GO 46816
// result := false ;
46808: LD_ADDR_VAR 0 3
46812: PUSH
46813: LD_INT 0
46815: ST_TO_ADDR
// end ;
46816: LD_VAR 0 3
46820: RET
// export function HealTarget ( sci ) ; begin
46821: LD_INT 0
46823: PPUSH
// if not sci then
46824: LD_VAR 0 1
46828: NOT
46829: IFFALSE 46833
// exit ;
46831: GO 46898
// result := 0 ;
46833: LD_ADDR_VAR 0 2
46837: PUSH
46838: LD_INT 0
46840: ST_TO_ADDR
// if GetTaskList ( sci ) then
46841: LD_VAR 0 1
46845: PPUSH
46846: CALL_OW 437
46850: IFFALSE 46898
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46852: LD_VAR 0 1
46856: PPUSH
46857: CALL_OW 437
46861: PUSH
46862: LD_INT 1
46864: ARRAY
46865: PUSH
46866: LD_INT 1
46868: ARRAY
46869: PUSH
46870: LD_STRING l
46872: EQUAL
46873: IFFALSE 46898
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46875: LD_ADDR_VAR 0 2
46879: PUSH
46880: LD_VAR 0 1
46884: PPUSH
46885: CALL_OW 437
46889: PUSH
46890: LD_INT 1
46892: ARRAY
46893: PUSH
46894: LD_INT 4
46896: ARRAY
46897: ST_TO_ADDR
// end ;
46898: LD_VAR 0 2
46902: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46903: LD_INT 0
46905: PPUSH
46906: PPUSH
46907: PPUSH
46908: PPUSH
// if not base_units then
46909: LD_VAR 0 1
46913: NOT
46914: IFFALSE 46918
// exit ;
46916: GO 47005
// result := false ;
46918: LD_ADDR_VAR 0 2
46922: PUSH
46923: LD_INT 0
46925: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46926: LD_ADDR_VAR 0 5
46930: PUSH
46931: LD_VAR 0 1
46935: PPUSH
46936: LD_INT 21
46938: PUSH
46939: LD_INT 3
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PPUSH
46946: CALL_OW 72
46950: ST_TO_ADDR
// if not tmp then
46951: LD_VAR 0 5
46955: NOT
46956: IFFALSE 46960
// exit ;
46958: GO 47005
// for i in tmp do
46960: LD_ADDR_VAR 0 3
46964: PUSH
46965: LD_VAR 0 5
46969: PUSH
46970: FOR_IN
46971: IFFALSE 47003
// begin result := EnemyInRange ( i , 22 ) ;
46973: LD_ADDR_VAR 0 2
46977: PUSH
46978: LD_VAR 0 3
46982: PPUSH
46983: LD_INT 22
46985: PPUSH
46986: CALL 45241 0 2
46990: ST_TO_ADDR
// if result then
46991: LD_VAR 0 2
46995: IFFALSE 47001
// exit ;
46997: POP
46998: POP
46999: GO 47005
// end ;
47001: GO 46970
47003: POP
47004: POP
// end ;
47005: LD_VAR 0 2
47009: RET
// export function FilterByTag ( units , tag ) ; begin
47010: LD_INT 0
47012: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47013: LD_ADDR_VAR 0 3
47017: PUSH
47018: LD_VAR 0 1
47022: PPUSH
47023: LD_INT 120
47025: PUSH
47026: LD_VAR 0 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PPUSH
47035: CALL_OW 72
47039: ST_TO_ADDR
// end ;
47040: LD_VAR 0 3
47044: RET
// export function IsDriver ( un ) ; begin
47045: LD_INT 0
47047: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47048: LD_ADDR_VAR 0 2
47052: PUSH
47053: LD_VAR 0 1
47057: PUSH
47058: LD_INT 55
47060: PUSH
47061: EMPTY
47062: LIST
47063: PPUSH
47064: CALL_OW 69
47068: IN
47069: ST_TO_ADDR
// end ;
47070: LD_VAR 0 2
47074: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47075: LD_INT 0
47077: PPUSH
47078: PPUSH
// list := [ ] ;
47079: LD_ADDR_VAR 0 5
47083: PUSH
47084: EMPTY
47085: ST_TO_ADDR
// case d of 0 :
47086: LD_VAR 0 3
47090: PUSH
47091: LD_INT 0
47093: DOUBLE
47094: EQUAL
47095: IFTRUE 47099
47097: GO 47232
47099: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47100: LD_ADDR_VAR 0 5
47104: PUSH
47105: LD_VAR 0 1
47109: PUSH
47110: LD_INT 4
47112: MINUS
47113: PUSH
47114: LD_VAR 0 2
47118: PUSH
47119: LD_INT 4
47121: MINUS
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: LIST
47130: PUSH
47131: LD_VAR 0 1
47135: PUSH
47136: LD_INT 3
47138: MINUS
47139: PUSH
47140: LD_VAR 0 2
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: LIST
47152: PUSH
47153: LD_VAR 0 1
47157: PUSH
47158: LD_INT 4
47160: PLUS
47161: PUSH
47162: LD_VAR 0 2
47166: PUSH
47167: LD_INT 4
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: LIST
47174: PUSH
47175: LD_VAR 0 1
47179: PUSH
47180: LD_INT 3
47182: PLUS
47183: PUSH
47184: LD_VAR 0 2
47188: PUSH
47189: LD_INT 3
47191: PLUS
47192: PUSH
47193: LD_INT 5
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: LIST
47200: PUSH
47201: LD_VAR 0 1
47205: PUSH
47206: LD_VAR 0 2
47210: PUSH
47211: LD_INT 4
47213: PLUS
47214: PUSH
47215: LD_INT 0
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: LIST
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: ST_TO_ADDR
// end ; 1 :
47230: GO 47930
47232: LD_INT 1
47234: DOUBLE
47235: EQUAL
47236: IFTRUE 47240
47238: GO 47373
47240: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47241: LD_ADDR_VAR 0 5
47245: PUSH
47246: LD_VAR 0 1
47250: PUSH
47251: LD_VAR 0 2
47255: PUSH
47256: LD_INT 4
47258: MINUS
47259: PUSH
47260: LD_INT 3
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: PUSH
47268: LD_VAR 0 1
47272: PUSH
47273: LD_INT 3
47275: MINUS
47276: PUSH
47277: LD_VAR 0 2
47281: PUSH
47282: LD_INT 3
47284: MINUS
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: LIST
47293: PUSH
47294: LD_VAR 0 1
47298: PUSH
47299: LD_INT 4
47301: MINUS
47302: PUSH
47303: LD_VAR 0 2
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: LIST
47315: PUSH
47316: LD_VAR 0 1
47320: PUSH
47321: LD_VAR 0 2
47325: PUSH
47326: LD_INT 3
47328: PLUS
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: LIST
47337: PUSH
47338: LD_VAR 0 1
47342: PUSH
47343: LD_INT 4
47345: PLUS
47346: PUSH
47347: LD_VAR 0 2
47351: PUSH
47352: LD_INT 4
47354: PLUS
47355: PUSH
47356: LD_INT 5
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: LIST
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: ST_TO_ADDR
// end ; 2 :
47371: GO 47930
47373: LD_INT 2
47375: DOUBLE
47376: EQUAL
47377: IFTRUE 47381
47379: GO 47510
47381: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47382: LD_ADDR_VAR 0 5
47386: PUSH
47387: LD_VAR 0 1
47391: PUSH
47392: LD_VAR 0 2
47396: PUSH
47397: LD_INT 3
47399: MINUS
47400: PUSH
47401: LD_INT 3
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: PUSH
47409: LD_VAR 0 1
47413: PUSH
47414: LD_INT 4
47416: PLUS
47417: PUSH
47418: LD_VAR 0 2
47422: PUSH
47423: LD_INT 4
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: LIST
47430: PUSH
47431: LD_VAR 0 1
47435: PUSH
47436: LD_VAR 0 2
47440: PUSH
47441: LD_INT 4
47443: PLUS
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: PUSH
47453: LD_VAR 0 1
47457: PUSH
47458: LD_INT 3
47460: MINUS
47461: PUSH
47462: LD_VAR 0 2
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: LIST
47474: PUSH
47475: LD_VAR 0 1
47479: PUSH
47480: LD_INT 4
47482: MINUS
47483: PUSH
47484: LD_VAR 0 2
47488: PUSH
47489: LD_INT 4
47491: MINUS
47492: PUSH
47493: LD_INT 2
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: LIST
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// end ; 3 :
47508: GO 47930
47510: LD_INT 3
47512: DOUBLE
47513: EQUAL
47514: IFTRUE 47518
47516: GO 47651
47518: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47519: LD_ADDR_VAR 0 5
47523: PUSH
47524: LD_VAR 0 1
47528: PUSH
47529: LD_INT 3
47531: PLUS
47532: PUSH
47533: LD_VAR 0 2
47537: PUSH
47538: LD_INT 4
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: LIST
47545: PUSH
47546: LD_VAR 0 1
47550: PUSH
47551: LD_INT 4
47553: PLUS
47554: PUSH
47555: LD_VAR 0 2
47559: PUSH
47560: LD_INT 4
47562: PLUS
47563: PUSH
47564: LD_INT 5
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: LIST
47571: PUSH
47572: LD_VAR 0 1
47576: PUSH
47577: LD_INT 4
47579: MINUS
47580: PUSH
47581: LD_VAR 0 2
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: LIST
47593: PUSH
47594: LD_VAR 0 1
47598: PUSH
47599: LD_VAR 0 2
47603: PUSH
47604: LD_INT 4
47606: MINUS
47607: PUSH
47608: LD_INT 3
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: LIST
47615: PUSH
47616: LD_VAR 0 1
47620: PUSH
47621: LD_INT 3
47623: MINUS
47624: PUSH
47625: LD_VAR 0 2
47629: PUSH
47630: LD_INT 3
47632: MINUS
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: LIST
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: ST_TO_ADDR
// end ; 4 :
47649: GO 47930
47651: LD_INT 4
47653: DOUBLE
47654: EQUAL
47655: IFTRUE 47659
47657: GO 47792
47659: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47660: LD_ADDR_VAR 0 5
47664: PUSH
47665: LD_VAR 0 1
47669: PUSH
47670: LD_VAR 0 2
47674: PUSH
47675: LD_INT 4
47677: PLUS
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: LIST
47686: PUSH
47687: LD_VAR 0 1
47691: PUSH
47692: LD_INT 3
47694: PLUS
47695: PUSH
47696: LD_VAR 0 2
47700: PUSH
47701: LD_INT 3
47703: PLUS
47704: PUSH
47705: LD_INT 5
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: LIST
47712: PUSH
47713: LD_VAR 0 1
47717: PUSH
47718: LD_INT 4
47720: PLUS
47721: PUSH
47722: LD_VAR 0 2
47726: PUSH
47727: LD_INT 4
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: PUSH
47735: LD_VAR 0 1
47739: PUSH
47740: LD_VAR 0 2
47744: PUSH
47745: LD_INT 3
47747: MINUS
47748: PUSH
47749: LD_INT 3
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: LIST
47756: PUSH
47757: LD_VAR 0 1
47761: PUSH
47762: LD_INT 4
47764: MINUS
47765: PUSH
47766: LD_VAR 0 2
47770: PUSH
47771: LD_INT 4
47773: MINUS
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: ST_TO_ADDR
// end ; 5 :
47790: GO 47930
47792: LD_INT 5
47794: DOUBLE
47795: EQUAL
47796: IFTRUE 47800
47798: GO 47929
47800: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47801: LD_ADDR_VAR 0 5
47805: PUSH
47806: LD_VAR 0 1
47810: PUSH
47811: LD_INT 4
47813: MINUS
47814: PUSH
47815: LD_VAR 0 2
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: LIST
47827: PUSH
47828: LD_VAR 0 1
47832: PUSH
47833: LD_VAR 0 2
47837: PUSH
47838: LD_INT 4
47840: MINUS
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: LIST
47849: PUSH
47850: LD_VAR 0 1
47854: PUSH
47855: LD_INT 4
47857: PLUS
47858: PUSH
47859: LD_VAR 0 2
47863: PUSH
47864: LD_INT 4
47866: PLUS
47867: PUSH
47868: LD_INT 5
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: LIST
47875: PUSH
47876: LD_VAR 0 1
47880: PUSH
47881: LD_INT 3
47883: PLUS
47884: PUSH
47885: LD_VAR 0 2
47889: PUSH
47890: LD_INT 4
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: LIST
47897: PUSH
47898: LD_VAR 0 1
47902: PUSH
47903: LD_VAR 0 2
47907: PUSH
47908: LD_INT 3
47910: PLUS
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: LIST
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: ST_TO_ADDR
// end ; end ;
47927: GO 47930
47929: POP
// result := list ;
47930: LD_ADDR_VAR 0 4
47934: PUSH
47935: LD_VAR 0 5
47939: ST_TO_ADDR
// end ;
47940: LD_VAR 0 4
47944: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47945: LD_INT 0
47947: PPUSH
47948: PPUSH
47949: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47950: LD_VAR 0 1
47954: NOT
47955: PUSH
47956: LD_VAR 0 2
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: LD_INT 3
47969: PUSH
47970: LD_INT 4
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: IN
47979: NOT
47980: OR
47981: IFFALSE 47985
// exit ;
47983: GO 48077
// tmp := [ ] ;
47985: LD_ADDR_VAR 0 5
47989: PUSH
47990: EMPTY
47991: ST_TO_ADDR
// for i in units do
47992: LD_ADDR_VAR 0 4
47996: PUSH
47997: LD_VAR 0 1
48001: PUSH
48002: FOR_IN
48003: IFFALSE 48046
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48005: LD_ADDR_VAR 0 5
48009: PUSH
48010: LD_VAR 0 5
48014: PPUSH
48015: LD_VAR 0 5
48019: PUSH
48020: LD_INT 1
48022: PLUS
48023: PPUSH
48024: LD_VAR 0 4
48028: PPUSH
48029: LD_VAR 0 2
48033: PPUSH
48034: CALL_OW 259
48038: PPUSH
48039: CALL_OW 2
48043: ST_TO_ADDR
48044: GO 48002
48046: POP
48047: POP
// if not tmp then
48048: LD_VAR 0 5
48052: NOT
48053: IFFALSE 48057
// exit ;
48055: GO 48077
// result := SortListByListDesc ( units , tmp ) ;
48057: LD_ADDR_VAR 0 3
48061: PUSH
48062: LD_VAR 0 1
48066: PPUSH
48067: LD_VAR 0 5
48071: PPUSH
48072: CALL_OW 77
48076: ST_TO_ADDR
// end ;
48077: LD_VAR 0 3
48081: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48082: LD_INT 0
48084: PPUSH
48085: PPUSH
48086: PPUSH
// result := false ;
48087: LD_ADDR_VAR 0 3
48091: PUSH
48092: LD_INT 0
48094: ST_TO_ADDR
// x := GetX ( building ) ;
48095: LD_ADDR_VAR 0 4
48099: PUSH
48100: LD_VAR 0 2
48104: PPUSH
48105: CALL_OW 250
48109: ST_TO_ADDR
// y := GetY ( building ) ;
48110: LD_ADDR_VAR 0 5
48114: PUSH
48115: LD_VAR 0 2
48119: PPUSH
48120: CALL_OW 251
48124: ST_TO_ADDR
// if not building or not x or not y then
48125: LD_VAR 0 2
48129: NOT
48130: PUSH
48131: LD_VAR 0 4
48135: NOT
48136: OR
48137: PUSH
48138: LD_VAR 0 5
48142: NOT
48143: OR
48144: IFFALSE 48148
// exit ;
48146: GO 48240
// if GetTaskList ( unit ) then
48148: LD_VAR 0 1
48152: PPUSH
48153: CALL_OW 437
48157: IFFALSE 48240
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48159: LD_STRING e
48161: PUSH
48162: LD_VAR 0 1
48166: PPUSH
48167: CALL_OW 437
48171: PUSH
48172: LD_INT 1
48174: ARRAY
48175: PUSH
48176: LD_INT 1
48178: ARRAY
48179: EQUAL
48180: PUSH
48181: LD_VAR 0 4
48185: PUSH
48186: LD_VAR 0 1
48190: PPUSH
48191: CALL_OW 437
48195: PUSH
48196: LD_INT 1
48198: ARRAY
48199: PUSH
48200: LD_INT 2
48202: ARRAY
48203: EQUAL
48204: AND
48205: PUSH
48206: LD_VAR 0 5
48210: PUSH
48211: LD_VAR 0 1
48215: PPUSH
48216: CALL_OW 437
48220: PUSH
48221: LD_INT 1
48223: ARRAY
48224: PUSH
48225: LD_INT 3
48227: ARRAY
48228: EQUAL
48229: AND
48230: IFFALSE 48240
// result := true end ;
48232: LD_ADDR_VAR 0 3
48236: PUSH
48237: LD_INT 1
48239: ST_TO_ADDR
// end ;
48240: LD_VAR 0 3
48244: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48245: LD_INT 0
48247: PPUSH
// result := false ;
48248: LD_ADDR_VAR 0 4
48252: PUSH
48253: LD_INT 0
48255: ST_TO_ADDR
// if GetTaskList ( unit ) then
48256: LD_VAR 0 1
48260: PPUSH
48261: CALL_OW 437
48265: IFFALSE 48348
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48267: LD_STRING M
48269: PUSH
48270: LD_VAR 0 1
48274: PPUSH
48275: CALL_OW 437
48279: PUSH
48280: LD_INT 1
48282: ARRAY
48283: PUSH
48284: LD_INT 1
48286: ARRAY
48287: EQUAL
48288: PUSH
48289: LD_VAR 0 2
48293: PUSH
48294: LD_VAR 0 1
48298: PPUSH
48299: CALL_OW 437
48303: PUSH
48304: LD_INT 1
48306: ARRAY
48307: PUSH
48308: LD_INT 2
48310: ARRAY
48311: EQUAL
48312: AND
48313: PUSH
48314: LD_VAR 0 3
48318: PUSH
48319: LD_VAR 0 1
48323: PPUSH
48324: CALL_OW 437
48328: PUSH
48329: LD_INT 1
48331: ARRAY
48332: PUSH
48333: LD_INT 3
48335: ARRAY
48336: EQUAL
48337: AND
48338: IFFALSE 48348
// result := true ;
48340: LD_ADDR_VAR 0 4
48344: PUSH
48345: LD_INT 1
48347: ST_TO_ADDR
// end ; end ;
48348: LD_VAR 0 4
48352: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48353: LD_INT 0
48355: PPUSH
48356: PPUSH
48357: PPUSH
48358: PPUSH
// if not unit or not area then
48359: LD_VAR 0 1
48363: NOT
48364: PUSH
48365: LD_VAR 0 2
48369: NOT
48370: OR
48371: IFFALSE 48375
// exit ;
48373: GO 48539
// tmp := AreaToList ( area , i ) ;
48375: LD_ADDR_VAR 0 6
48379: PUSH
48380: LD_VAR 0 2
48384: PPUSH
48385: LD_VAR 0 5
48389: PPUSH
48390: CALL_OW 517
48394: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48395: LD_ADDR_VAR 0 5
48399: PUSH
48400: DOUBLE
48401: LD_INT 1
48403: DEC
48404: ST_TO_ADDR
48405: LD_VAR 0 6
48409: PUSH
48410: LD_INT 1
48412: ARRAY
48413: PUSH
48414: FOR_TO
48415: IFFALSE 48537
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48417: LD_ADDR_VAR 0 7
48421: PUSH
48422: LD_VAR 0 6
48426: PUSH
48427: LD_INT 1
48429: ARRAY
48430: PUSH
48431: LD_VAR 0 5
48435: ARRAY
48436: PUSH
48437: LD_VAR 0 6
48441: PUSH
48442: LD_INT 2
48444: ARRAY
48445: PUSH
48446: LD_VAR 0 5
48450: ARRAY
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
48456: LD_VAR 0 7
48460: PUSH
48461: LD_INT 1
48463: ARRAY
48464: PPUSH
48465: LD_VAR 0 7
48469: PUSH
48470: LD_INT 2
48472: ARRAY
48473: PPUSH
48474: CALL_OW 428
48478: PUSH
48479: LD_INT 0
48481: EQUAL
48482: IFFALSE 48535
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48484: LD_VAR 0 1
48488: PPUSH
48489: LD_VAR 0 7
48493: PUSH
48494: LD_INT 1
48496: ARRAY
48497: PPUSH
48498: LD_VAR 0 7
48502: PUSH
48503: LD_INT 2
48505: ARRAY
48506: PPUSH
48507: LD_VAR 0 3
48511: PPUSH
48512: CALL_OW 48
// result := IsPlaced ( unit ) ;
48516: LD_ADDR_VAR 0 4
48520: PUSH
48521: LD_VAR 0 1
48525: PPUSH
48526: CALL_OW 305
48530: ST_TO_ADDR
// exit ;
48531: POP
48532: POP
48533: GO 48539
// end ; end ;
48535: GO 48414
48537: POP
48538: POP
// end ;
48539: LD_VAR 0 4
48543: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48544: LD_INT 0
48546: PPUSH
48547: PPUSH
48548: PPUSH
// if not side or side > 8 then
48549: LD_VAR 0 1
48553: NOT
48554: PUSH
48555: LD_VAR 0 1
48559: PUSH
48560: LD_INT 8
48562: GREATER
48563: OR
48564: IFFALSE 48568
// exit ;
48566: GO 48755
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48568: LD_ADDR_VAR 0 4
48572: PUSH
48573: LD_INT 22
48575: PUSH
48576: LD_VAR 0 1
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 21
48587: PUSH
48588: LD_INT 3
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PPUSH
48599: CALL_OW 69
48603: ST_TO_ADDR
// if not tmp then
48604: LD_VAR 0 4
48608: NOT
48609: IFFALSE 48613
// exit ;
48611: GO 48755
// enable_addtolog := true ;
48613: LD_ADDR_OWVAR 81
48617: PUSH
48618: LD_INT 1
48620: ST_TO_ADDR
// AddToLog ( [ ) ;
48621: LD_STRING [
48623: PPUSH
48624: CALL_OW 561
// for i in tmp do
48628: LD_ADDR_VAR 0 3
48632: PUSH
48633: LD_VAR 0 4
48637: PUSH
48638: FOR_IN
48639: IFFALSE 48746
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48641: LD_STRING [
48643: PUSH
48644: LD_VAR 0 3
48648: PPUSH
48649: CALL_OW 266
48653: STR
48654: PUSH
48655: LD_STRING , 
48657: STR
48658: PUSH
48659: LD_VAR 0 3
48663: PPUSH
48664: CALL_OW 250
48668: STR
48669: PUSH
48670: LD_STRING , 
48672: STR
48673: PUSH
48674: LD_VAR 0 3
48678: PPUSH
48679: CALL_OW 251
48683: STR
48684: PUSH
48685: LD_STRING , 
48687: STR
48688: PUSH
48689: LD_VAR 0 3
48693: PPUSH
48694: CALL_OW 254
48698: STR
48699: PUSH
48700: LD_STRING , 
48702: STR
48703: PUSH
48704: LD_VAR 0 3
48708: PPUSH
48709: LD_INT 1
48711: PPUSH
48712: CALL_OW 268
48716: STR
48717: PUSH
48718: LD_STRING , 
48720: STR
48721: PUSH
48722: LD_VAR 0 3
48726: PPUSH
48727: LD_INT 2
48729: PPUSH
48730: CALL_OW 268
48734: STR
48735: PUSH
48736: LD_STRING ],
48738: STR
48739: PPUSH
48740: CALL_OW 561
// end ;
48744: GO 48638
48746: POP
48747: POP
// AddToLog ( ]; ) ;
48748: LD_STRING ];
48750: PPUSH
48751: CALL_OW 561
// end ;
48755: LD_VAR 0 2
48759: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48760: LD_INT 0
48762: PPUSH
48763: PPUSH
48764: PPUSH
48765: PPUSH
48766: PPUSH
// if not area or not rate or not max then
48767: LD_VAR 0 1
48771: NOT
48772: PUSH
48773: LD_VAR 0 2
48777: NOT
48778: OR
48779: PUSH
48780: LD_VAR 0 4
48784: NOT
48785: OR
48786: IFFALSE 48790
// exit ;
48788: GO 48979
// while 1 do
48790: LD_INT 1
48792: IFFALSE 48979
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48794: LD_ADDR_VAR 0 9
48798: PUSH
48799: LD_VAR 0 1
48803: PPUSH
48804: LD_INT 1
48806: PPUSH
48807: CALL_OW 287
48811: PUSH
48812: LD_INT 10
48814: MUL
48815: ST_TO_ADDR
// r := rate / 10 ;
48816: LD_ADDR_VAR 0 7
48820: PUSH
48821: LD_VAR 0 2
48825: PUSH
48826: LD_INT 10
48828: DIVREAL
48829: ST_TO_ADDR
// time := 1 1$00 ;
48830: LD_ADDR_VAR 0 8
48834: PUSH
48835: LD_INT 2100
48837: ST_TO_ADDR
// if amount < min then
48838: LD_VAR 0 9
48842: PUSH
48843: LD_VAR 0 3
48847: LESS
48848: IFFALSE 48866
// r := r * 2 else
48850: LD_ADDR_VAR 0 7
48854: PUSH
48855: LD_VAR 0 7
48859: PUSH
48860: LD_INT 2
48862: MUL
48863: ST_TO_ADDR
48864: GO 48892
// if amount > max then
48866: LD_VAR 0 9
48870: PUSH
48871: LD_VAR 0 4
48875: GREATER
48876: IFFALSE 48892
// r := r / 2 ;
48878: LD_ADDR_VAR 0 7
48882: PUSH
48883: LD_VAR 0 7
48887: PUSH
48888: LD_INT 2
48890: DIVREAL
48891: ST_TO_ADDR
// time := time / r ;
48892: LD_ADDR_VAR 0 8
48896: PUSH
48897: LD_VAR 0 8
48901: PUSH
48902: LD_VAR 0 7
48906: DIVREAL
48907: ST_TO_ADDR
// if time < 0 then
48908: LD_VAR 0 8
48912: PUSH
48913: LD_INT 0
48915: LESS
48916: IFFALSE 48933
// time := time * - 1 ;
48918: LD_ADDR_VAR 0 8
48922: PUSH
48923: LD_VAR 0 8
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: MUL
48932: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48933: LD_VAR 0 8
48937: PUSH
48938: LD_INT 35
48940: PPUSH
48941: LD_INT 875
48943: PPUSH
48944: CALL_OW 12
48948: PLUS
48949: PPUSH
48950: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48954: LD_INT 1
48956: PPUSH
48957: LD_INT 5
48959: PPUSH
48960: CALL_OW 12
48964: PPUSH
48965: LD_VAR 0 1
48969: PPUSH
48970: LD_INT 1
48972: PPUSH
48973: CALL_OW 55
// end ;
48977: GO 48790
// end ;
48979: LD_VAR 0 5
48983: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48984: LD_INT 0
48986: PPUSH
48987: PPUSH
48988: PPUSH
48989: PPUSH
48990: PPUSH
48991: PPUSH
48992: PPUSH
48993: PPUSH
// if not turrets or not factories then
48994: LD_VAR 0 1
48998: NOT
48999: PUSH
49000: LD_VAR 0 2
49004: NOT
49005: OR
49006: IFFALSE 49010
// exit ;
49008: GO 49317
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49010: LD_ADDR_VAR 0 10
49014: PUSH
49015: LD_INT 5
49017: PUSH
49018: LD_INT 6
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: LD_INT 4
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 3
49037: PUSH
49038: LD_INT 5
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 24
49052: PUSH
49053: LD_INT 25
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 23
49062: PUSH
49063: LD_INT 27
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 42
49076: PUSH
49077: LD_INT 43
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 44
49086: PUSH
49087: LD_INT 46
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 45
49096: PUSH
49097: LD_INT 47
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: ST_TO_ADDR
// result := [ ] ;
49114: LD_ADDR_VAR 0 3
49118: PUSH
49119: EMPTY
49120: ST_TO_ADDR
// for i in turrets do
49121: LD_ADDR_VAR 0 4
49125: PUSH
49126: LD_VAR 0 1
49130: PUSH
49131: FOR_IN
49132: IFFALSE 49315
// begin nat := GetNation ( i ) ;
49134: LD_ADDR_VAR 0 7
49138: PUSH
49139: LD_VAR 0 4
49143: PPUSH
49144: CALL_OW 248
49148: ST_TO_ADDR
// weapon := 0 ;
49149: LD_ADDR_VAR 0 8
49153: PUSH
49154: LD_INT 0
49156: ST_TO_ADDR
// if not nat then
49157: LD_VAR 0 7
49161: NOT
49162: IFFALSE 49166
// continue ;
49164: GO 49131
// for j in list [ nat ] do
49166: LD_ADDR_VAR 0 5
49170: PUSH
49171: LD_VAR 0 10
49175: PUSH
49176: LD_VAR 0 7
49180: ARRAY
49181: PUSH
49182: FOR_IN
49183: IFFALSE 49224
// if GetBWeapon ( i ) = j [ 1 ] then
49185: LD_VAR 0 4
49189: PPUSH
49190: CALL_OW 269
49194: PUSH
49195: LD_VAR 0 5
49199: PUSH
49200: LD_INT 1
49202: ARRAY
49203: EQUAL
49204: IFFALSE 49222
// begin weapon := j [ 2 ] ;
49206: LD_ADDR_VAR 0 8
49210: PUSH
49211: LD_VAR 0 5
49215: PUSH
49216: LD_INT 2
49218: ARRAY
49219: ST_TO_ADDR
// break ;
49220: GO 49224
// end ;
49222: GO 49182
49224: POP
49225: POP
// if not weapon then
49226: LD_VAR 0 8
49230: NOT
49231: IFFALSE 49235
// continue ;
49233: GO 49131
// for k in factories do
49235: LD_ADDR_VAR 0 6
49239: PUSH
49240: LD_VAR 0 2
49244: PUSH
49245: FOR_IN
49246: IFFALSE 49311
// begin weapons := AvailableWeaponList ( k ) ;
49248: LD_ADDR_VAR 0 9
49252: PUSH
49253: LD_VAR 0 6
49257: PPUSH
49258: CALL_OW 478
49262: ST_TO_ADDR
// if not weapons then
49263: LD_VAR 0 9
49267: NOT
49268: IFFALSE 49272
// continue ;
49270: GO 49245
// if weapon in weapons then
49272: LD_VAR 0 8
49276: PUSH
49277: LD_VAR 0 9
49281: IN
49282: IFFALSE 49309
// begin result := [ i , weapon ] ;
49284: LD_ADDR_VAR 0 3
49288: PUSH
49289: LD_VAR 0 4
49293: PUSH
49294: LD_VAR 0 8
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: ST_TO_ADDR
// exit ;
49303: POP
49304: POP
49305: POP
49306: POP
49307: GO 49317
// end ; end ;
49309: GO 49245
49311: POP
49312: POP
// end ;
49313: GO 49131
49315: POP
49316: POP
// end ;
49317: LD_VAR 0 3
49321: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49322: LD_INT 0
49324: PPUSH
// if not side or side > 8 then
49325: LD_VAR 0 3
49329: NOT
49330: PUSH
49331: LD_VAR 0 3
49335: PUSH
49336: LD_INT 8
49338: GREATER
49339: OR
49340: IFFALSE 49344
// exit ;
49342: GO 49403
// if not range then
49344: LD_VAR 0 4
49348: NOT
49349: IFFALSE 49360
// range := - 12 ;
49351: LD_ADDR_VAR 0 4
49355: PUSH
49356: LD_INT 12
49358: NEG
49359: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49360: LD_VAR 0 1
49364: PPUSH
49365: LD_VAR 0 2
49369: PPUSH
49370: LD_VAR 0 3
49374: PPUSH
49375: LD_VAR 0 4
49379: PPUSH
49380: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49384: LD_VAR 0 1
49388: PPUSH
49389: LD_VAR 0 2
49393: PPUSH
49394: LD_VAR 0 3
49398: PPUSH
49399: CALL_OW 331
// end ;
49403: LD_VAR 0 5
49407: RET
// export function Video ( mode ) ; begin
49408: LD_INT 0
49410: PPUSH
// ingame_video = mode ;
49411: LD_ADDR_OWVAR 52
49415: PUSH
49416: LD_VAR 0 1
49420: ST_TO_ADDR
// interface_hidden = mode ;
49421: LD_ADDR_OWVAR 54
49425: PUSH
49426: LD_VAR 0 1
49430: ST_TO_ADDR
// end ;
49431: LD_VAR 0 2
49435: RET
// export function Join ( array , element ) ; begin
49436: LD_INT 0
49438: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49439: LD_ADDR_VAR 0 3
49443: PUSH
49444: LD_VAR 0 1
49448: PPUSH
49449: LD_VAR 0 1
49453: PUSH
49454: LD_INT 1
49456: PLUS
49457: PPUSH
49458: LD_VAR 0 2
49462: PPUSH
49463: CALL_OW 1
49467: ST_TO_ADDR
// end ;
49468: LD_VAR 0 3
49472: RET
// export function JoinUnion ( array , element ) ; begin
49473: LD_INT 0
49475: PPUSH
// result := array union element ;
49476: LD_ADDR_VAR 0 3
49480: PUSH
49481: LD_VAR 0 1
49485: PUSH
49486: LD_VAR 0 2
49490: UNION
49491: ST_TO_ADDR
// end ;
49492: LD_VAR 0 3
49496: RET
// export function GetBehemoths ( side ) ; begin
49497: LD_INT 0
49499: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
49500: LD_ADDR_VAR 0 2
49504: PUSH
49505: LD_INT 22
49507: PUSH
49508: LD_VAR 0 1
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 31
49519: PUSH
49520: LD_INT 25
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PPUSH
49531: CALL_OW 69
49535: ST_TO_ADDR
// end ;
49536: LD_VAR 0 2
49540: RET
// export function Shuffle ( array ) ; var i , index ; begin
49541: LD_INT 0
49543: PPUSH
49544: PPUSH
49545: PPUSH
// result := [ ] ;
49546: LD_ADDR_VAR 0 2
49550: PUSH
49551: EMPTY
49552: ST_TO_ADDR
// if not array then
49553: LD_VAR 0 1
49557: NOT
49558: IFFALSE 49562
// exit ;
49560: GO 49661
// Randomize ;
49562: CALL_OW 10
// for i = array downto 1 do
49566: LD_ADDR_VAR 0 3
49570: PUSH
49571: DOUBLE
49572: LD_VAR 0 1
49576: INC
49577: ST_TO_ADDR
49578: LD_INT 1
49580: PUSH
49581: FOR_DOWNTO
49582: IFFALSE 49659
// begin index := rand ( 1 , array ) ;
49584: LD_ADDR_VAR 0 4
49588: PUSH
49589: LD_INT 1
49591: PPUSH
49592: LD_VAR 0 1
49596: PPUSH
49597: CALL_OW 12
49601: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49602: LD_ADDR_VAR 0 2
49606: PUSH
49607: LD_VAR 0 2
49611: PPUSH
49612: LD_VAR 0 2
49616: PUSH
49617: LD_INT 1
49619: PLUS
49620: PPUSH
49621: LD_VAR 0 1
49625: PUSH
49626: LD_VAR 0 4
49630: ARRAY
49631: PPUSH
49632: CALL_OW 2
49636: ST_TO_ADDR
// array := Delete ( array , index ) ;
49637: LD_ADDR_VAR 0 1
49641: PUSH
49642: LD_VAR 0 1
49646: PPUSH
49647: LD_VAR 0 4
49651: PPUSH
49652: CALL_OW 3
49656: ST_TO_ADDR
// end ;
49657: GO 49581
49659: POP
49660: POP
// end ;
49661: LD_VAR 0 2
49665: RET
// export function GetBaseMaterials ( base ) ; begin
49666: LD_INT 0
49668: PPUSH
// result := [ 0 , 0 , 0 ] ;
49669: LD_ADDR_VAR 0 2
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: LIST
49687: ST_TO_ADDR
// if not base then
49688: LD_VAR 0 1
49692: NOT
49693: IFFALSE 49697
// exit ;
49695: GO 49746
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49697: LD_ADDR_VAR 0 2
49701: PUSH
49702: LD_VAR 0 1
49706: PPUSH
49707: LD_INT 1
49709: PPUSH
49710: CALL_OW 275
49714: PUSH
49715: LD_VAR 0 1
49719: PPUSH
49720: LD_INT 2
49722: PPUSH
49723: CALL_OW 275
49727: PUSH
49728: LD_VAR 0 1
49732: PPUSH
49733: LD_INT 3
49735: PPUSH
49736: CALL_OW 275
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: LIST
49745: ST_TO_ADDR
// end ;
49746: LD_VAR 0 2
49750: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49751: LD_INT 0
49753: PPUSH
49754: PPUSH
// result := array ;
49755: LD_ADDR_VAR 0 3
49759: PUSH
49760: LD_VAR 0 1
49764: ST_TO_ADDR
// if size > 0 then
49765: LD_VAR 0 2
49769: PUSH
49770: LD_INT 0
49772: GREATER
49773: IFFALSE 49819
// for i := array downto size do
49775: LD_ADDR_VAR 0 4
49779: PUSH
49780: DOUBLE
49781: LD_VAR 0 1
49785: INC
49786: ST_TO_ADDR
49787: LD_VAR 0 2
49791: PUSH
49792: FOR_DOWNTO
49793: IFFALSE 49817
// result := Delete ( result , result ) ;
49795: LD_ADDR_VAR 0 3
49799: PUSH
49800: LD_VAR 0 3
49804: PPUSH
49805: LD_VAR 0 3
49809: PPUSH
49810: CALL_OW 3
49814: ST_TO_ADDR
49815: GO 49792
49817: POP
49818: POP
// end ;
49819: LD_VAR 0 3
49823: RET
// export function ComExit ( unit ) ; var tmp ; begin
49824: LD_INT 0
49826: PPUSH
49827: PPUSH
// if not IsInUnit ( unit ) then
49828: LD_VAR 0 1
49832: PPUSH
49833: CALL_OW 310
49837: NOT
49838: IFFALSE 49842
// exit ;
49840: GO 49902
// tmp := IsInUnit ( unit ) ;
49842: LD_ADDR_VAR 0 3
49846: PUSH
49847: LD_VAR 0 1
49851: PPUSH
49852: CALL_OW 310
49856: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49857: LD_VAR 0 3
49861: PPUSH
49862: CALL_OW 247
49866: PUSH
49867: LD_INT 2
49869: EQUAL
49870: IFFALSE 49883
// ComExitVehicle ( unit ) else
49872: LD_VAR 0 1
49876: PPUSH
49877: CALL_OW 121
49881: GO 49892
// ComExitBuilding ( unit ) ;
49883: LD_VAR 0 1
49887: PPUSH
49888: CALL_OW 122
// result := tmp ;
49892: LD_ADDR_VAR 0 2
49896: PUSH
49897: LD_VAR 0 3
49901: ST_TO_ADDR
// end ;
49902: LD_VAR 0 2
49906: RET
// export function ComExitAll ( units ) ; var i ; begin
49907: LD_INT 0
49909: PPUSH
49910: PPUSH
// if not units then
49911: LD_VAR 0 1
49915: NOT
49916: IFFALSE 49920
// exit ;
49918: GO 49946
// for i in units do
49920: LD_ADDR_VAR 0 3
49924: PUSH
49925: LD_VAR 0 1
49929: PUSH
49930: FOR_IN
49931: IFFALSE 49944
// ComExit ( i ) ;
49933: LD_VAR 0 3
49937: PPUSH
49938: CALL 49824 0 1
49942: GO 49930
49944: POP
49945: POP
// end ;
49946: LD_VAR 0 2
49950: RET
// export function ResetHc ; begin
49951: LD_INT 0
49953: PPUSH
// InitHc ;
49954: CALL_OW 19
// hc_importance := 0 ;
49958: LD_ADDR_OWVAR 32
49962: PUSH
49963: LD_INT 0
49965: ST_TO_ADDR
// end ;
49966: LD_VAR 0 1
49970: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49971: LD_INT 0
49973: PPUSH
49974: PPUSH
49975: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49976: LD_ADDR_VAR 0 6
49980: PUSH
49981: LD_VAR 0 1
49985: PUSH
49986: LD_VAR 0 3
49990: PLUS
49991: PUSH
49992: LD_INT 2
49994: DIV
49995: ST_TO_ADDR
// if _x < 0 then
49996: LD_VAR 0 6
50000: PUSH
50001: LD_INT 0
50003: LESS
50004: IFFALSE 50021
// _x := _x * - 1 ;
50006: LD_ADDR_VAR 0 6
50010: PUSH
50011: LD_VAR 0 6
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: MUL
50020: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50021: LD_ADDR_VAR 0 7
50025: PUSH
50026: LD_VAR 0 2
50030: PUSH
50031: LD_VAR 0 4
50035: PLUS
50036: PUSH
50037: LD_INT 2
50039: DIV
50040: ST_TO_ADDR
// if _y < 0 then
50041: LD_VAR 0 7
50045: PUSH
50046: LD_INT 0
50048: LESS
50049: IFFALSE 50066
// _y := _y * - 1 ;
50051: LD_ADDR_VAR 0 7
50055: PUSH
50056: LD_VAR 0 7
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: MUL
50065: ST_TO_ADDR
// result := [ _x , _y ] ;
50066: LD_ADDR_VAR 0 5
50070: PUSH
50071: LD_VAR 0 6
50075: PUSH
50076: LD_VAR 0 7
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: ST_TO_ADDR
// end ;
50085: LD_VAR 0 5
50089: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50090: LD_INT 0
50092: PPUSH
50093: PPUSH
50094: PPUSH
50095: PPUSH
// task := GetTaskList ( unit ) ;
50096: LD_ADDR_VAR 0 7
50100: PUSH
50101: LD_VAR 0 1
50105: PPUSH
50106: CALL_OW 437
50110: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50111: LD_VAR 0 7
50115: NOT
50116: PUSH
50117: LD_VAR 0 1
50121: PPUSH
50122: LD_VAR 0 2
50126: PPUSH
50127: CALL_OW 308
50131: NOT
50132: AND
50133: IFFALSE 50137
// exit ;
50135: GO 50255
// if IsInArea ( unit , area ) then
50137: LD_VAR 0 1
50141: PPUSH
50142: LD_VAR 0 2
50146: PPUSH
50147: CALL_OW 308
50151: IFFALSE 50169
// begin ComMoveToArea ( unit , goAway ) ;
50153: LD_VAR 0 1
50157: PPUSH
50158: LD_VAR 0 3
50162: PPUSH
50163: CALL_OW 113
// exit ;
50167: GO 50255
// end ; if task [ 1 ] [ 1 ] <> M then
50169: LD_VAR 0 7
50173: PUSH
50174: LD_INT 1
50176: ARRAY
50177: PUSH
50178: LD_INT 1
50180: ARRAY
50181: PUSH
50182: LD_STRING M
50184: NONEQUAL
50185: IFFALSE 50189
// exit ;
50187: GO 50255
// x := task [ 1 ] [ 2 ] ;
50189: LD_ADDR_VAR 0 5
50193: PUSH
50194: LD_VAR 0 7
50198: PUSH
50199: LD_INT 1
50201: ARRAY
50202: PUSH
50203: LD_INT 2
50205: ARRAY
50206: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50207: LD_ADDR_VAR 0 6
50211: PUSH
50212: LD_VAR 0 7
50216: PUSH
50217: LD_INT 1
50219: ARRAY
50220: PUSH
50221: LD_INT 3
50223: ARRAY
50224: ST_TO_ADDR
// if InArea ( x , y , area ) then
50225: LD_VAR 0 5
50229: PPUSH
50230: LD_VAR 0 6
50234: PPUSH
50235: LD_VAR 0 2
50239: PPUSH
50240: CALL_OW 309
50244: IFFALSE 50255
// ComStop ( unit ) ;
50246: LD_VAR 0 1
50250: PPUSH
50251: CALL_OW 141
// end ;
50255: LD_VAR 0 4
50259: RET
// export function Abs ( value ) ; begin
50260: LD_INT 0
50262: PPUSH
// result := value ;
50263: LD_ADDR_VAR 0 2
50267: PUSH
50268: LD_VAR 0 1
50272: ST_TO_ADDR
// if value < 0 then
50273: LD_VAR 0 1
50277: PUSH
50278: LD_INT 0
50280: LESS
50281: IFFALSE 50298
// result := value * - 1 ;
50283: LD_ADDR_VAR 0 2
50287: PUSH
50288: LD_VAR 0 1
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: MUL
50297: ST_TO_ADDR
// end ;
50298: LD_VAR 0 2
50302: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50303: LD_INT 0
50305: PPUSH
50306: PPUSH
50307: PPUSH
50308: PPUSH
50309: PPUSH
50310: PPUSH
50311: PPUSH
50312: PPUSH
// if not unit or not building then
50313: LD_VAR 0 1
50317: NOT
50318: PUSH
50319: LD_VAR 0 2
50323: NOT
50324: OR
50325: IFFALSE 50329
// exit ;
50327: GO 50555
// x := GetX ( building ) ;
50329: LD_ADDR_VAR 0 4
50333: PUSH
50334: LD_VAR 0 2
50338: PPUSH
50339: CALL_OW 250
50343: ST_TO_ADDR
// y := GetY ( building ) ;
50344: LD_ADDR_VAR 0 6
50348: PUSH
50349: LD_VAR 0 2
50353: PPUSH
50354: CALL_OW 251
50358: ST_TO_ADDR
// d := GetDir ( building ) ;
50359: LD_ADDR_VAR 0 8
50363: PUSH
50364: LD_VAR 0 2
50368: PPUSH
50369: CALL_OW 254
50373: ST_TO_ADDR
// r := 4 ;
50374: LD_ADDR_VAR 0 9
50378: PUSH
50379: LD_INT 4
50381: ST_TO_ADDR
// for i := 1 to 5 do
50382: LD_ADDR_VAR 0 10
50386: PUSH
50387: DOUBLE
50388: LD_INT 1
50390: DEC
50391: ST_TO_ADDR
50392: LD_INT 5
50394: PUSH
50395: FOR_TO
50396: IFFALSE 50553
// begin _x := ShiftX ( x , d , r + i ) ;
50398: LD_ADDR_VAR 0 5
50402: PUSH
50403: LD_VAR 0 4
50407: PPUSH
50408: LD_VAR 0 8
50412: PPUSH
50413: LD_VAR 0 9
50417: PUSH
50418: LD_VAR 0 10
50422: PLUS
50423: PPUSH
50424: CALL_OW 272
50428: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50429: LD_ADDR_VAR 0 7
50433: PUSH
50434: LD_VAR 0 6
50438: PPUSH
50439: LD_VAR 0 8
50443: PPUSH
50444: LD_VAR 0 9
50448: PUSH
50449: LD_VAR 0 10
50453: PLUS
50454: PPUSH
50455: CALL_OW 273
50459: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50460: LD_VAR 0 5
50464: PPUSH
50465: LD_VAR 0 7
50469: PPUSH
50470: CALL_OW 488
50474: PUSH
50475: LD_VAR 0 5
50479: PPUSH
50480: LD_VAR 0 7
50484: PPUSH
50485: CALL_OW 428
50489: PPUSH
50490: CALL_OW 247
50494: PUSH
50495: LD_INT 3
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: IN
50505: NOT
50506: AND
50507: IFFALSE 50551
// begin ComMoveXY ( unit , _x , _y ) ;
50509: LD_VAR 0 1
50513: PPUSH
50514: LD_VAR 0 5
50518: PPUSH
50519: LD_VAR 0 7
50523: PPUSH
50524: CALL_OW 111
// result := [ _x , _y ] ;
50528: LD_ADDR_VAR 0 3
50532: PUSH
50533: LD_VAR 0 5
50537: PUSH
50538: LD_VAR 0 7
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: ST_TO_ADDR
// exit ;
50547: POP
50548: POP
50549: GO 50555
// end ; end ;
50551: GO 50395
50553: POP
50554: POP
// end ;
50555: LD_VAR 0 3
50559: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50560: LD_INT 0
50562: PPUSH
50563: PPUSH
50564: PPUSH
// result := 0 ;
50565: LD_ADDR_VAR 0 3
50569: PUSH
50570: LD_INT 0
50572: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50573: LD_VAR 0 1
50577: PUSH
50578: LD_INT 0
50580: LESS
50581: PUSH
50582: LD_VAR 0 1
50586: PUSH
50587: LD_INT 8
50589: GREATER
50590: OR
50591: PUSH
50592: LD_VAR 0 2
50596: PUSH
50597: LD_INT 0
50599: LESS
50600: OR
50601: PUSH
50602: LD_VAR 0 2
50606: PUSH
50607: LD_INT 8
50609: GREATER
50610: OR
50611: IFFALSE 50615
// exit ;
50613: GO 50690
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50615: LD_ADDR_VAR 0 4
50619: PUSH
50620: LD_INT 22
50622: PUSH
50623: LD_VAR 0 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PPUSH
50632: CALL_OW 69
50636: PUSH
50637: FOR_IN
50638: IFFALSE 50688
// begin un := UnitShoot ( i ) ;
50640: LD_ADDR_VAR 0 5
50644: PUSH
50645: LD_VAR 0 4
50649: PPUSH
50650: CALL_OW 504
50654: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50655: LD_VAR 0 5
50659: PPUSH
50660: CALL_OW 255
50664: PUSH
50665: LD_VAR 0 1
50669: EQUAL
50670: IFFALSE 50686
// begin result := un ;
50672: LD_ADDR_VAR 0 3
50676: PUSH
50677: LD_VAR 0 5
50681: ST_TO_ADDR
// exit ;
50682: POP
50683: POP
50684: GO 50690
// end ; end ;
50686: GO 50637
50688: POP
50689: POP
// end ;
50690: LD_VAR 0 3
50694: RET
// export function GetCargoBay ( units ) ; begin
50695: LD_INT 0
50697: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50698: LD_ADDR_VAR 0 2
50702: PUSH
50703: LD_VAR 0 1
50707: PPUSH
50708: LD_INT 2
50710: PUSH
50711: LD_INT 34
50713: PUSH
50714: LD_INT 12
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 34
50723: PUSH
50724: LD_INT 51
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 34
50733: PUSH
50734: LD_INT 32
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 34
50743: PUSH
50744: LD_EXP 83
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: PPUSH
50760: CALL_OW 72
50764: ST_TO_ADDR
// end ;
50765: LD_VAR 0 2
50769: RET
// export function Negate ( value ) ; begin
50770: LD_INT 0
50772: PPUSH
// result := not value ;
50773: LD_ADDR_VAR 0 2
50777: PUSH
50778: LD_VAR 0 1
50782: NOT
50783: ST_TO_ADDR
// end ;
50784: LD_VAR 0 2
50788: RET
// export function Inc ( value ) ; begin
50789: LD_INT 0
50791: PPUSH
// result := value + 1 ;
50792: LD_ADDR_VAR 0 2
50796: PUSH
50797: LD_VAR 0 1
50801: PUSH
50802: LD_INT 1
50804: PLUS
50805: ST_TO_ADDR
// end ;
50806: LD_VAR 0 2
50810: RET
// export function Dec ( value ) ; begin
50811: LD_INT 0
50813: PPUSH
// result := value - 1 ;
50814: LD_ADDR_VAR 0 2
50818: PUSH
50819: LD_VAR 0 1
50823: PUSH
50824: LD_INT 1
50826: MINUS
50827: ST_TO_ADDR
// end ;
50828: LD_VAR 0 2
50832: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50833: LD_INT 0
50835: PPUSH
50836: PPUSH
50837: PPUSH
50838: PPUSH
50839: PPUSH
50840: PPUSH
50841: PPUSH
50842: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50843: LD_VAR 0 1
50847: PPUSH
50848: LD_VAR 0 2
50852: PPUSH
50853: CALL_OW 488
50857: NOT
50858: PUSH
50859: LD_VAR 0 3
50863: PPUSH
50864: LD_VAR 0 4
50868: PPUSH
50869: CALL_OW 488
50873: NOT
50874: OR
50875: IFFALSE 50888
// begin result := - 1 ;
50877: LD_ADDR_VAR 0 5
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: ST_TO_ADDR
// exit ;
50886: GO 51123
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50888: LD_ADDR_VAR 0 12
50892: PUSH
50893: LD_VAR 0 1
50897: PPUSH
50898: LD_VAR 0 2
50902: PPUSH
50903: LD_VAR 0 3
50907: PPUSH
50908: LD_VAR 0 4
50912: PPUSH
50913: CALL 49971 0 4
50917: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50918: LD_ADDR_VAR 0 11
50922: PUSH
50923: LD_VAR 0 1
50927: PPUSH
50928: LD_VAR 0 2
50932: PPUSH
50933: LD_VAR 0 12
50937: PUSH
50938: LD_INT 1
50940: ARRAY
50941: PPUSH
50942: LD_VAR 0 12
50946: PUSH
50947: LD_INT 2
50949: ARRAY
50950: PPUSH
50951: CALL_OW 298
50955: ST_TO_ADDR
// distance := 9999 ;
50956: LD_ADDR_VAR 0 10
50960: PUSH
50961: LD_INT 9999
50963: ST_TO_ADDR
// for i := 0 to 5 do
50964: LD_ADDR_VAR 0 6
50968: PUSH
50969: DOUBLE
50970: LD_INT 0
50972: DEC
50973: ST_TO_ADDR
50974: LD_INT 5
50976: PUSH
50977: FOR_TO
50978: IFFALSE 51121
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50980: LD_ADDR_VAR 0 7
50984: PUSH
50985: LD_VAR 0 1
50989: PPUSH
50990: LD_VAR 0 6
50994: PPUSH
50995: LD_VAR 0 11
50999: PPUSH
51000: CALL_OW 272
51004: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51005: LD_ADDR_VAR 0 8
51009: PUSH
51010: LD_VAR 0 2
51014: PPUSH
51015: LD_VAR 0 6
51019: PPUSH
51020: LD_VAR 0 11
51024: PPUSH
51025: CALL_OW 273
51029: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51030: LD_VAR 0 7
51034: PPUSH
51035: LD_VAR 0 8
51039: PPUSH
51040: CALL_OW 488
51044: NOT
51045: IFFALSE 51049
// continue ;
51047: GO 50977
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51049: LD_ADDR_VAR 0 9
51053: PUSH
51054: LD_VAR 0 12
51058: PUSH
51059: LD_INT 1
51061: ARRAY
51062: PPUSH
51063: LD_VAR 0 12
51067: PUSH
51068: LD_INT 2
51070: ARRAY
51071: PPUSH
51072: LD_VAR 0 7
51076: PPUSH
51077: LD_VAR 0 8
51081: PPUSH
51082: CALL_OW 298
51086: ST_TO_ADDR
// if tmp < distance then
51087: LD_VAR 0 9
51091: PUSH
51092: LD_VAR 0 10
51096: LESS
51097: IFFALSE 51119
// begin result := i ;
51099: LD_ADDR_VAR 0 5
51103: PUSH
51104: LD_VAR 0 6
51108: ST_TO_ADDR
// distance := tmp ;
51109: LD_ADDR_VAR 0 10
51113: PUSH
51114: LD_VAR 0 9
51118: ST_TO_ADDR
// end ; end ;
51119: GO 50977
51121: POP
51122: POP
// end ;
51123: LD_VAR 0 5
51127: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51128: LD_INT 0
51130: PPUSH
51131: PPUSH
// if not driver or not IsInUnit ( driver ) then
51132: LD_VAR 0 1
51136: NOT
51137: PUSH
51138: LD_VAR 0 1
51142: PPUSH
51143: CALL_OW 310
51147: NOT
51148: OR
51149: IFFALSE 51153
// exit ;
51151: GO 51243
// vehicle := IsInUnit ( driver ) ;
51153: LD_ADDR_VAR 0 3
51157: PUSH
51158: LD_VAR 0 1
51162: PPUSH
51163: CALL_OW 310
51167: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51168: LD_VAR 0 1
51172: PPUSH
51173: LD_STRING \
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: PUSH
51203: LD_STRING E
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: LD_VAR 0 3
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PPUSH
51239: CALL_OW 446
// end ;
51243: LD_VAR 0 2
51247: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51248: LD_INT 0
51250: PPUSH
51251: PPUSH
// if not driver or not IsInUnit ( driver ) then
51252: LD_VAR 0 1
51256: NOT
51257: PUSH
51258: LD_VAR 0 1
51262: PPUSH
51263: CALL_OW 310
51267: NOT
51268: OR
51269: IFFALSE 51273
// exit ;
51271: GO 51363
// vehicle := IsInUnit ( driver ) ;
51273: LD_ADDR_VAR 0 3
51277: PUSH
51278: LD_VAR 0 1
51282: PPUSH
51283: CALL_OW 310
51287: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51288: LD_VAR 0 1
51292: PPUSH
51293: LD_STRING \
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: PUSH
51323: LD_STRING E
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_VAR 0 3
51336: PUSH
51337: LD_INT 0
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PPUSH
51359: CALL_OW 447
// end ;
51363: LD_VAR 0 2
51367: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51368: LD_INT 0
51370: PPUSH
51371: PPUSH
51372: PPUSH
// tmp := [ ] ;
51373: LD_ADDR_VAR 0 5
51377: PUSH
51378: EMPTY
51379: ST_TO_ADDR
// for i in units do
51380: LD_ADDR_VAR 0 4
51384: PUSH
51385: LD_VAR 0 1
51389: PUSH
51390: FOR_IN
51391: IFFALSE 51429
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51393: LD_ADDR_VAR 0 5
51397: PUSH
51398: LD_VAR 0 5
51402: PPUSH
51403: LD_VAR 0 5
51407: PUSH
51408: LD_INT 1
51410: PLUS
51411: PPUSH
51412: LD_VAR 0 4
51416: PPUSH
51417: CALL_OW 256
51421: PPUSH
51422: CALL_OW 2
51426: ST_TO_ADDR
51427: GO 51390
51429: POP
51430: POP
// if not tmp then
51431: LD_VAR 0 5
51435: NOT
51436: IFFALSE 51440
// exit ;
51438: GO 51488
// if asc then
51440: LD_VAR 0 2
51444: IFFALSE 51468
// result := SortListByListAsc ( units , tmp ) else
51446: LD_ADDR_VAR 0 3
51450: PUSH
51451: LD_VAR 0 1
51455: PPUSH
51456: LD_VAR 0 5
51460: PPUSH
51461: CALL_OW 76
51465: ST_TO_ADDR
51466: GO 51488
// result := SortListByListDesc ( units , tmp ) ;
51468: LD_ADDR_VAR 0 3
51472: PUSH
51473: LD_VAR 0 1
51477: PPUSH
51478: LD_VAR 0 5
51482: PPUSH
51483: CALL_OW 77
51487: ST_TO_ADDR
// end ;
51488: LD_VAR 0 3
51492: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51493: LD_INT 0
51495: PPUSH
51496: PPUSH
// task := GetTaskList ( mech ) ;
51497: LD_ADDR_VAR 0 4
51501: PUSH
51502: LD_VAR 0 1
51506: PPUSH
51507: CALL_OW 437
51511: ST_TO_ADDR
// if not task then
51512: LD_VAR 0 4
51516: NOT
51517: IFFALSE 51521
// exit ;
51519: GO 51563
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51521: LD_ADDR_VAR 0 3
51525: PUSH
51526: LD_VAR 0 4
51530: PUSH
51531: LD_INT 1
51533: ARRAY
51534: PUSH
51535: LD_INT 1
51537: ARRAY
51538: PUSH
51539: LD_STRING r
51541: EQUAL
51542: PUSH
51543: LD_VAR 0 4
51547: PUSH
51548: LD_INT 1
51550: ARRAY
51551: PUSH
51552: LD_INT 4
51554: ARRAY
51555: PUSH
51556: LD_VAR 0 2
51560: EQUAL
51561: AND
51562: ST_TO_ADDR
// end ;
51563: LD_VAR 0 3
51567: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51568: LD_INT 0
51570: PPUSH
// SetDir ( unit , d ) ;
51571: LD_VAR 0 1
51575: PPUSH
51576: LD_VAR 0 4
51580: PPUSH
51581: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
51585: LD_VAR 0 1
51589: PPUSH
51590: LD_VAR 0 2
51594: PPUSH
51595: LD_VAR 0 3
51599: PPUSH
51600: LD_VAR 0 5
51604: PPUSH
51605: CALL_OW 48
// end ;
51609: LD_VAR 0 6
51613: RET
// export function ToNaturalNumber ( number ) ; begin
51614: LD_INT 0
51616: PPUSH
// result := number div 1 ;
51617: LD_ADDR_VAR 0 2
51621: PUSH
51622: LD_VAR 0 1
51626: PUSH
51627: LD_INT 1
51629: DIV
51630: ST_TO_ADDR
// if number < 0 then
51631: LD_VAR 0 1
51635: PUSH
51636: LD_INT 0
51638: LESS
51639: IFFALSE 51649
// result := 0 ;
51641: LD_ADDR_VAR 0 2
51645: PUSH
51646: LD_INT 0
51648: ST_TO_ADDR
// end ;
51649: LD_VAR 0 2
51653: RET
// export function SortByClass ( units , class ) ; var un ; begin
51654: LD_INT 0
51656: PPUSH
51657: PPUSH
// if not units or not class then
51658: LD_VAR 0 1
51662: NOT
51663: PUSH
51664: LD_VAR 0 2
51668: NOT
51669: OR
51670: IFFALSE 51674
// exit ;
51672: GO 51769
// result := [ ] ;
51674: LD_ADDR_VAR 0 3
51678: PUSH
51679: EMPTY
51680: ST_TO_ADDR
// for un in units do
51681: LD_ADDR_VAR 0 4
51685: PUSH
51686: LD_VAR 0 1
51690: PUSH
51691: FOR_IN
51692: IFFALSE 51767
// if GetClass ( un ) = class then
51694: LD_VAR 0 4
51698: PPUSH
51699: CALL_OW 257
51703: PUSH
51704: LD_VAR 0 2
51708: EQUAL
51709: IFFALSE 51736
// result := Insert ( result , 1 , un ) else
51711: LD_ADDR_VAR 0 3
51715: PUSH
51716: LD_VAR 0 3
51720: PPUSH
51721: LD_INT 1
51723: PPUSH
51724: LD_VAR 0 4
51728: PPUSH
51729: CALL_OW 2
51733: ST_TO_ADDR
51734: GO 51765
// result := Replace ( result , result + 1 , un ) ;
51736: LD_ADDR_VAR 0 3
51740: PUSH
51741: LD_VAR 0 3
51745: PPUSH
51746: LD_VAR 0 3
51750: PUSH
51751: LD_INT 1
51753: PLUS
51754: PPUSH
51755: LD_VAR 0 4
51759: PPUSH
51760: CALL_OW 1
51764: ST_TO_ADDR
51765: GO 51691
51767: POP
51768: POP
// end ;
51769: LD_VAR 0 3
51773: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51774: LD_INT 0
51776: PPUSH
51777: PPUSH
51778: PPUSH
51779: PPUSH
51780: PPUSH
51781: PPUSH
51782: PPUSH
// result := [ ] ;
51783: LD_ADDR_VAR 0 4
51787: PUSH
51788: EMPTY
51789: ST_TO_ADDR
// if x - r < 0 then
51790: LD_VAR 0 1
51794: PUSH
51795: LD_VAR 0 3
51799: MINUS
51800: PUSH
51801: LD_INT 0
51803: LESS
51804: IFFALSE 51816
// min_x := 0 else
51806: LD_ADDR_VAR 0 8
51810: PUSH
51811: LD_INT 0
51813: ST_TO_ADDR
51814: GO 51832
// min_x := x - r ;
51816: LD_ADDR_VAR 0 8
51820: PUSH
51821: LD_VAR 0 1
51825: PUSH
51826: LD_VAR 0 3
51830: MINUS
51831: ST_TO_ADDR
// if y - r < 0 then
51832: LD_VAR 0 2
51836: PUSH
51837: LD_VAR 0 3
51841: MINUS
51842: PUSH
51843: LD_INT 0
51845: LESS
51846: IFFALSE 51858
// min_y := 0 else
51848: LD_ADDR_VAR 0 7
51852: PUSH
51853: LD_INT 0
51855: ST_TO_ADDR
51856: GO 51874
// min_y := y - r ;
51858: LD_ADDR_VAR 0 7
51862: PUSH
51863: LD_VAR 0 2
51867: PUSH
51868: LD_VAR 0 3
51872: MINUS
51873: ST_TO_ADDR
// max_x := x + r ;
51874: LD_ADDR_VAR 0 9
51878: PUSH
51879: LD_VAR 0 1
51883: PUSH
51884: LD_VAR 0 3
51888: PLUS
51889: ST_TO_ADDR
// max_y := y + r ;
51890: LD_ADDR_VAR 0 10
51894: PUSH
51895: LD_VAR 0 2
51899: PUSH
51900: LD_VAR 0 3
51904: PLUS
51905: ST_TO_ADDR
// for _x = min_x to max_x do
51906: LD_ADDR_VAR 0 5
51910: PUSH
51911: DOUBLE
51912: LD_VAR 0 8
51916: DEC
51917: ST_TO_ADDR
51918: LD_VAR 0 9
51922: PUSH
51923: FOR_TO
51924: IFFALSE 52025
// for _y = min_y to max_y do
51926: LD_ADDR_VAR 0 6
51930: PUSH
51931: DOUBLE
51932: LD_VAR 0 7
51936: DEC
51937: ST_TO_ADDR
51938: LD_VAR 0 10
51942: PUSH
51943: FOR_TO
51944: IFFALSE 52021
// begin if not ValidHex ( _x , _y ) then
51946: LD_VAR 0 5
51950: PPUSH
51951: LD_VAR 0 6
51955: PPUSH
51956: CALL_OW 488
51960: NOT
51961: IFFALSE 51965
// continue ;
51963: GO 51943
// if GetResourceTypeXY ( _x , _y ) then
51965: LD_VAR 0 5
51969: PPUSH
51970: LD_VAR 0 6
51974: PPUSH
51975: CALL_OW 283
51979: IFFALSE 52019
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51981: LD_ADDR_VAR 0 4
51985: PUSH
51986: LD_VAR 0 4
51990: PPUSH
51991: LD_VAR 0 4
51995: PUSH
51996: LD_INT 1
51998: PLUS
51999: PPUSH
52000: LD_VAR 0 5
52004: PUSH
52005: LD_VAR 0 6
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PPUSH
52014: CALL_OW 1
52018: ST_TO_ADDR
// end ;
52019: GO 51943
52021: POP
52022: POP
52023: GO 51923
52025: POP
52026: POP
// end ;
52027: LD_VAR 0 4
52031: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52032: LD_INT 0
52034: PPUSH
52035: PPUSH
52036: PPUSH
52037: PPUSH
52038: PPUSH
52039: PPUSH
52040: PPUSH
52041: PPUSH
// if not units then
52042: LD_VAR 0 1
52046: NOT
52047: IFFALSE 52051
// exit ;
52049: GO 52476
// result := UnitFilter ( units , [ f_ok ] ) ;
52051: LD_ADDR_VAR 0 3
52055: PUSH
52056: LD_VAR 0 1
52060: PPUSH
52061: LD_INT 50
52063: PUSH
52064: EMPTY
52065: LIST
52066: PPUSH
52067: CALL_OW 72
52071: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52072: LD_ADDR_VAR 0 8
52076: PUSH
52077: LD_VAR 0 1
52081: PUSH
52082: LD_INT 1
52084: ARRAY
52085: PPUSH
52086: CALL_OW 255
52090: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
52091: LD_ADDR_VAR 0 10
52095: PUSH
52096: LD_INT 29
52098: PUSH
52099: LD_EXP 86
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: ST_TO_ADDR
// if not result then
52108: LD_VAR 0 3
52112: NOT
52113: IFFALSE 52117
// exit ;
52115: GO 52476
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52117: LD_ADDR_VAR 0 5
52121: PUSH
52122: LD_INT 81
52124: PUSH
52125: LD_VAR 0 8
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PPUSH
52134: CALL_OW 69
52138: ST_TO_ADDR
// for i in result do
52139: LD_ADDR_VAR 0 4
52143: PUSH
52144: LD_VAR 0 3
52148: PUSH
52149: FOR_IN
52150: IFFALSE 52474
// begin tag := GetTag ( i ) + 1 ;
52152: LD_ADDR_VAR 0 9
52156: PUSH
52157: LD_VAR 0 4
52161: PPUSH
52162: CALL_OW 110
52166: PUSH
52167: LD_INT 1
52169: PLUS
52170: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
52171: LD_ADDR_VAR 0 7
52175: PUSH
52176: LD_VAR 0 4
52180: PPUSH
52181: CALL_OW 250
52185: PPUSH
52186: LD_VAR 0 4
52190: PPUSH
52191: CALL_OW 251
52195: PPUSH
52196: LD_INT 6
52198: PPUSH
52199: CALL 51774 0 3
52203: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
52204: LD_VAR 0 7
52208: PUSH
52209: LD_VAR 0 4
52213: PPUSH
52214: CALL_OW 264
52218: PUSH
52219: LD_VAR 0 10
52223: IN
52224: NOT
52225: AND
52226: IFFALSE 52265
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52228: LD_VAR 0 4
52232: PPUSH
52233: LD_VAR 0 7
52237: PUSH
52238: LD_INT 1
52240: ARRAY
52241: PUSH
52242: LD_INT 1
52244: ARRAY
52245: PPUSH
52246: LD_VAR 0 7
52250: PUSH
52251: LD_INT 1
52253: ARRAY
52254: PUSH
52255: LD_INT 2
52257: ARRAY
52258: PPUSH
52259: CALL_OW 116
52263: GO 52472
// if path > tag then
52265: LD_VAR 0 2
52269: PUSH
52270: LD_VAR 0 9
52274: GREATER
52275: IFFALSE 52442
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
52277: LD_ADDR_VAR 0 6
52281: PUSH
52282: LD_VAR 0 5
52286: PPUSH
52287: LD_INT 91
52289: PUSH
52290: LD_VAR 0 4
52294: PUSH
52295: LD_INT 12
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: PPUSH
52303: CALL_OW 72
52307: ST_TO_ADDR
// if nearEnemy then
52308: LD_VAR 0 6
52312: IFFALSE 52340
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52314: LD_VAR 0 4
52318: PPUSH
52319: LD_VAR 0 6
52323: PPUSH
52324: LD_VAR 0 4
52328: PPUSH
52329: CALL_OW 74
52333: PPUSH
52334: CALL_OW 115
52338: GO 52440
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52340: LD_VAR 0 4
52344: PPUSH
52345: LD_VAR 0 2
52349: PUSH
52350: LD_VAR 0 9
52354: ARRAY
52355: PUSH
52356: LD_INT 1
52358: ARRAY
52359: PPUSH
52360: LD_VAR 0 2
52364: PUSH
52365: LD_VAR 0 9
52369: ARRAY
52370: PUSH
52371: LD_INT 2
52373: ARRAY
52374: PPUSH
52375: CALL_OW 297
52379: PUSH
52380: LD_INT 6
52382: GREATER
52383: IFFALSE 52426
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52385: LD_VAR 0 4
52389: PPUSH
52390: LD_VAR 0 2
52394: PUSH
52395: LD_VAR 0 9
52399: ARRAY
52400: PUSH
52401: LD_INT 1
52403: ARRAY
52404: PPUSH
52405: LD_VAR 0 2
52409: PUSH
52410: LD_VAR 0 9
52414: ARRAY
52415: PUSH
52416: LD_INT 2
52418: ARRAY
52419: PPUSH
52420: CALL_OW 114
52424: GO 52440
// SetTag ( i , tag ) ;
52426: LD_VAR 0 4
52430: PPUSH
52431: LD_VAR 0 9
52435: PPUSH
52436: CALL_OW 109
// end else
52440: GO 52472
// if enemy then
52442: LD_VAR 0 5
52446: IFFALSE 52472
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52448: LD_VAR 0 4
52452: PPUSH
52453: LD_VAR 0 5
52457: PPUSH
52458: LD_VAR 0 4
52462: PPUSH
52463: CALL_OW 74
52467: PPUSH
52468: CALL_OW 115
// end ;
52472: GO 52149
52474: POP
52475: POP
// end ;
52476: LD_VAR 0 3
52480: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52481: LD_INT 0
52483: PPUSH
52484: PPUSH
52485: PPUSH
// if not unit or IsInUnit ( unit ) then
52486: LD_VAR 0 1
52490: NOT
52491: PUSH
52492: LD_VAR 0 1
52496: PPUSH
52497: CALL_OW 310
52501: OR
52502: IFFALSE 52506
// exit ;
52504: GO 52597
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52506: LD_ADDR_VAR 0 4
52510: PUSH
52511: LD_VAR 0 1
52515: PPUSH
52516: CALL_OW 250
52520: PPUSH
52521: LD_VAR 0 2
52525: PPUSH
52526: LD_INT 1
52528: PPUSH
52529: CALL_OW 272
52533: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52534: LD_ADDR_VAR 0 5
52538: PUSH
52539: LD_VAR 0 1
52543: PPUSH
52544: CALL_OW 251
52548: PPUSH
52549: LD_VAR 0 2
52553: PPUSH
52554: LD_INT 1
52556: PPUSH
52557: CALL_OW 273
52561: ST_TO_ADDR
// if ValidHex ( x , y ) then
52562: LD_VAR 0 4
52566: PPUSH
52567: LD_VAR 0 5
52571: PPUSH
52572: CALL_OW 488
52576: IFFALSE 52597
// ComTurnXY ( unit , x , y ) ;
52578: LD_VAR 0 1
52582: PPUSH
52583: LD_VAR 0 4
52587: PPUSH
52588: LD_VAR 0 5
52592: PPUSH
52593: CALL_OW 118
// end ;
52597: LD_VAR 0 3
52601: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52602: LD_INT 0
52604: PPUSH
52605: PPUSH
// result := false ;
52606: LD_ADDR_VAR 0 3
52610: PUSH
52611: LD_INT 0
52613: ST_TO_ADDR
// if not units then
52614: LD_VAR 0 2
52618: NOT
52619: IFFALSE 52623
// exit ;
52621: GO 52668
// for i in units do
52623: LD_ADDR_VAR 0 4
52627: PUSH
52628: LD_VAR 0 2
52632: PUSH
52633: FOR_IN
52634: IFFALSE 52666
// if See ( side , i ) then
52636: LD_VAR 0 1
52640: PPUSH
52641: LD_VAR 0 4
52645: PPUSH
52646: CALL_OW 292
52650: IFFALSE 52664
// begin result := true ;
52652: LD_ADDR_VAR 0 3
52656: PUSH
52657: LD_INT 1
52659: ST_TO_ADDR
// exit ;
52660: POP
52661: POP
52662: GO 52668
// end ;
52664: GO 52633
52666: POP
52667: POP
// end ;
52668: LD_VAR 0 3
52672: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52673: LD_INT 0
52675: PPUSH
52676: PPUSH
52677: PPUSH
52678: PPUSH
// if not unit or not points then
52679: LD_VAR 0 1
52683: NOT
52684: PUSH
52685: LD_VAR 0 2
52689: NOT
52690: OR
52691: IFFALSE 52695
// exit ;
52693: GO 52785
// dist := 99999 ;
52695: LD_ADDR_VAR 0 5
52699: PUSH
52700: LD_INT 99999
52702: ST_TO_ADDR
// for i in points do
52703: LD_ADDR_VAR 0 4
52707: PUSH
52708: LD_VAR 0 2
52712: PUSH
52713: FOR_IN
52714: IFFALSE 52783
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52716: LD_ADDR_VAR 0 6
52720: PUSH
52721: LD_VAR 0 1
52725: PPUSH
52726: LD_VAR 0 4
52730: PUSH
52731: LD_INT 1
52733: ARRAY
52734: PPUSH
52735: LD_VAR 0 4
52739: PUSH
52740: LD_INT 2
52742: ARRAY
52743: PPUSH
52744: CALL_OW 297
52748: ST_TO_ADDR
// if tmpDist < dist then
52749: LD_VAR 0 6
52753: PUSH
52754: LD_VAR 0 5
52758: LESS
52759: IFFALSE 52781
// begin result := i ;
52761: LD_ADDR_VAR 0 3
52765: PUSH
52766: LD_VAR 0 4
52770: ST_TO_ADDR
// dist := tmpDist ;
52771: LD_ADDR_VAR 0 5
52775: PUSH
52776: LD_VAR 0 6
52780: ST_TO_ADDR
// end ; end ;
52781: GO 52713
52783: POP
52784: POP
// end ;
52785: LD_VAR 0 3
52789: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52790: LD_INT 0
52792: PPUSH
// uc_side := side ;
52793: LD_ADDR_OWVAR 20
52797: PUSH
52798: LD_VAR 0 1
52802: ST_TO_ADDR
// uc_nation := 3 ;
52803: LD_ADDR_OWVAR 21
52807: PUSH
52808: LD_INT 3
52810: ST_TO_ADDR
// vc_chassis := 25 ;
52811: LD_ADDR_OWVAR 37
52815: PUSH
52816: LD_INT 25
52818: ST_TO_ADDR
// vc_engine := engine_siberite ;
52819: LD_ADDR_OWVAR 39
52823: PUSH
52824: LD_INT 3
52826: ST_TO_ADDR
// vc_control := control_computer ;
52827: LD_ADDR_OWVAR 38
52831: PUSH
52832: LD_INT 3
52834: ST_TO_ADDR
// vc_weapon := 59 ;
52835: LD_ADDR_OWVAR 40
52839: PUSH
52840: LD_INT 59
52842: ST_TO_ADDR
// result := CreateVehicle ;
52843: LD_ADDR_VAR 0 5
52847: PUSH
52848: CALL_OW 45
52852: ST_TO_ADDR
// SetDir ( result , d ) ;
52853: LD_VAR 0 5
52857: PPUSH
52858: LD_VAR 0 4
52862: PPUSH
52863: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52867: LD_VAR 0 5
52871: PPUSH
52872: LD_VAR 0 2
52876: PPUSH
52877: LD_VAR 0 3
52881: PPUSH
52882: LD_INT 0
52884: PPUSH
52885: CALL_OW 48
// end ;
52889: LD_VAR 0 5
52893: RET
