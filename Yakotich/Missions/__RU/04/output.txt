// starting var b , n ; begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 204 0 0
// SetBname ( NorthLenin , lenin ) ;
   8: LD_INT 253
  10: PPUSH
  11: LD_STRING lenin
  13: PPUSH
  14: CALL_OW 500
// SetBname ( SouthLenin , lenin ) ;
  18: LD_INT 218
  20: PPUSH
  21: LD_STRING lenin
  23: PPUSH
  24: CALL_OW 500
// SetBname ( MorozovBase , OC ) ;
  28: LD_INT 348
  30: PPUSH
  31: LD_STRING OC
  33: PPUSH
  34: CALL_OW 500
// SetBname ( YakotichBase , kamenev ) ;
  38: LD_INT 312
  40: PPUSH
  41: LD_STRING kamenev
  43: PPUSH
  44: CALL_OW 500
// SetBname ( BukovBase , Kuybyshev ) ;
  48: LD_INT 127
  50: PPUSH
  51: LD_STRING Kuybyshev
  53: PPUSH
  54: CALL_OW 500
// AnimateTrees ( true ) ;
  58: LD_INT 1
  60: PPUSH
  61: CALL_OW 573
// Randomize ;
  65: CALL_OW 10
// RandomizeAll ;
  69: CALL_OW 11
// for b in FilterUnitsInArea ( SouthLeninArea , [ [ f_type , unit_building ] ] ) do
  73: LD_ADDR_VAR 0 1
  77: PUSH
  78: LD_INT 4
  80: PPUSH
  81: LD_INT 21
  83: PUSH
  84: LD_INT 3
  86: PUSH
  87: EMPTY
  88: LIST
  89: LIST
  90: PUSH
  91: EMPTY
  92: LIST
  93: PPUSH
  94: CALL_OW 70
  98: PUSH
  99: FOR_IN
 100: IFFALSE 116
// ComLinkToBase ( SouthLenin , b ) ;
 102: LD_INT 218
 104: PPUSH
 105: LD_VAR 0 1
 109: PPUSH
 110: CALL_OW 169
 114: GO 99
 116: POP
 117: POP
// for n in FilterUnitsInArea ( NorthLeninArea , [ [ f_type , unit_building ] ] ) do
 118: LD_ADDR_VAR 0 2
 122: PUSH
 123: LD_INT 5
 125: PPUSH
 126: LD_INT 21
 128: PUSH
 129: LD_INT 3
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: PUSH
 136: EMPTY
 137: LIST
 138: PPUSH
 139: CALL_OW 70
 143: PUSH
 144: FOR_IN
 145: IFFALSE 161
// ComLinkToBase ( NorthLenin , n ) ;
 147: LD_INT 253
 149: PPUSH
 150: LD_VAR 0 2
 154: PPUSH
 155: CALL_OW 169
 159: GO 144
 161: POP
 162: POP
// InitGlobalVariables ;
 163: CALL 11828 0 0
// InitMiotacz ;
 167: CALL 1917 0 0
// InitRussian ;
 171: CALL 526 0 0
// InitCommanders ;
 175: CALL 5928 0 0
// InitBierezovPersonel ;
 179: CALL 2032 0 0
// InitRussianAI ;
 183: CALL 6182 0 0
// Action ;
 187: CALL 2718 0 0
// DebugMode ;
 191: CALL 351 0 0
// game_speed = 6 ;
 195: LD_ADDR_OWVAR 65
 199: PUSH
 200: LD_INT 6
 202: ST_TO_ADDR
// end ;
 203: END
// export YakotichCrew , BierezovCrew , BierezovNewCrew , PompaCrew , BukovCrew , GaydarCrew , NorthLeninCrew , SouthLeninCrew , CheckpointsCrew , SouthCheckpointCrew , HeikeCrew , OmarCrew ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav , Jegor , Grigori , Anton ; export Heike , Omar , Shulz , Bergkamp ; export Tank , Cargo1 , Cargo2 ; export Natasza , Belkov2 , Oblukov , Kovalyuk , Kozlov ; export Bierezov , Sharonov , Lesov , Aleinik , Korotajev , Bautin ; export Pompa , Smirnov , Petrov , Konajev , Radenko ; export Morozov , Platonov , Popov , Gaydar , Bukov , Yashin ; export PrepareTime ; export debug ; export mission_prefix ; export start_ended , control_taken_over , ivan_came , apeman_tamed , flame_researched , heavy_gun_researched , weaponry_researched , fall_back ; function Init ; begin
 204: LD_INT 0
 206: PPUSH
// SetAttitude ( 9 , 3 , 1 , true ) ;
 207: LD_INT 9
 209: PPUSH
 210: LD_INT 3
 212: PPUSH
 213: LD_INT 1
 215: PPUSH
 216: LD_INT 1
 218: PPUSH
 219: CALL_OW 80
// SetAttitude ( 9 , 6 , 1 , true ) ;
 223: LD_INT 9
 225: PPUSH
 226: LD_INT 6
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: LD_INT 1
 234: PPUSH
 235: CALL_OW 80
// ChangeSideFog ( 9 , 3 ) ;
 239: LD_INT 9
 241: PPUSH
 242: LD_INT 3
 244: PPUSH
 245: CALL_OW 343
// mission_prefix := 04_ ;
 249: LD_ADDR_EXP 61
 253: PUSH
 254: LD_STRING 04_
 256: ST_TO_ADDR
// start_ended = false ;
 257: LD_ADDR_EXP 62
 261: PUSH
 262: LD_INT 0
 264: ST_TO_ADDR
// ivan_came = false ;
 265: LD_ADDR_EXP 64
 269: PUSH
 270: LD_INT 0
 272: ST_TO_ADDR
// control_taken_over = false ;
 273: LD_ADDR_EXP 63
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// apeman_tamed = false ;
 281: LD_ADDR_EXP 65
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// flame_researched = false ;
 289: LD_ADDR_EXP 66
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// heavy_gun_researched = false ;
 297: LD_ADDR_EXP 67
 301: PUSH
 302: LD_INT 0
 304: ST_TO_ADDR
// weaponry_researched = false ;
 305: LD_ADDR_EXP 68
 309: PUSH
 310: LD_INT 0
 312: ST_TO_ADDR
// fall_back = false ;
 313: LD_ADDR_EXP 69
 317: PUSH
 318: LD_INT 0
 320: ST_TO_ADDR
// PrepareTime := [ 35 35$0 , 30 30$0 , 25 25$0 ] [ Difficulty ] ;
 321: LD_ADDR_EXP 59
 325: PUSH
 326: LD_INT 73500
 328: PUSH
 329: LD_INT 63000
 331: PUSH
 332: LD_INT 52500
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: PUSH
 340: LD_OWVAR 67
 344: ARRAY
 345: ST_TO_ADDR
// end ;
 346: LD_VAR 0 1
 350: RET
// export function DebugMode ; begin
 351: LD_INT 0
 353: PPUSH
// if Debug = true then
 354: LD_EXP 60
 358: PUSH
 359: LD_INT 1
 361: EQUAL
 362: IFFALSE 383
// begin Difficulty := 3 ;
 364: LD_ADDR_OWVAR 67
 368: PUSH
 369: LD_INT 3
 371: ST_TO_ADDR
// TurnFogOff ( ) ;
 372: CALL_OW 537
// FogOff ( 3 ) ;
 376: LD_INT 3
 378: PPUSH
 379: CALL_OW 344
// end ; end ; end_of_file
 383: LD_VAR 0 1
 387: RET
// every 3 3$0 do
 388: GO 390
 390: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , YakotichCrates , true ) ;
 391: LD_INT 3
 393: PPUSH
 394: LD_INT 5
 396: PPUSH
 397: CALL_OW 12
 401: PPUSH
 402: LD_INT 11
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: CALL_OW 55
// enable ;
 412: ENABLE
// end ;
 413: END
// every 7 7$0 do var i ;
 414: GO 416
 416: DISABLE
 417: LD_INT 0
 419: PPUSH
// begin for i = 1 to 5 do
 420: LD_ADDR_VAR 0 1
 424: PUSH
 425: DOUBLE
 426: LD_INT 1
 428: DEC
 429: ST_TO_ADDR
 430: LD_INT 5
 432: PUSH
 433: FOR_TO
 434: IFFALSE 459
// begin CreateCratesArea ( rand ( 4 , 5 ) , CratesArea , true ) ;
 436: LD_INT 4
 438: PPUSH
 439: LD_INT 5
 441: PPUSH
 442: CALL_OW 12
 446: PPUSH
 447: LD_INT 12
 449: PPUSH
 450: LD_INT 1
 452: PPUSH
 453: CALL_OW 55
// end ;
 457: GO 433
 459: POP
 460: POP
// enable ;
 461: ENABLE
// end ;
 462: PPOPN 1
 464: END
// every 5 5$0 trigger ivan_came = true do var i ;
 465: LD_EXP 64
 469: PUSH
 470: LD_INT 1
 472: EQUAL
 473: IFFALSE 523
 475: GO 477
 477: DISABLE
 478: LD_INT 0
 480: PPUSH
// begin for i = 1 to 2 do
 481: LD_ADDR_VAR 0 1
 485: PUSH
 486: DOUBLE
 487: LD_INT 1
 489: DEC
 490: ST_TO_ADDR
 491: LD_INT 2
 493: PUSH
 494: FOR_TO
 495: IFFALSE 521
// begin CreateCratesArea ( rand ( 1 , 5 ) , BierezovCrates , true ) ;
 497: LD_INT 1
 499: PPUSH
 500: LD_INT 5
 502: PPUSH
 503: CALL_OW 12
 507: PPUSH
 508: LD_INT 13
 510: PPUSH
 511: LD_INT 1
 513: PPUSH
 514: CALL_OW 55
// enable ;
 518: ENABLE
// end ;
 519: GO 494
 521: POP
 522: POP
// end ; end_of_file
 523: PPOPN 1
 525: END
// export RuCargo1 , RuCargo2 ; export function InitRussian ; begin
 526: LD_INT 0
 528: PPUSH
// Uc_Nation := 3 ;
 529: LD_ADDR_OWVAR 21
 533: PUSH
 534: LD_INT 3
 536: ST_TO_ADDR
// Uc_Side := 3 ;
 537: LD_ADDR_OWVAR 20
 541: PUSH
 542: LD_INT 3
 544: ST_TO_ADDR
// Uc_Direction := 2 ;
 545: LD_ADDR_OWVAR 24
 549: PUSH
 550: LD_INT 2
 552: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 03_ ) ;
 553: LD_ADDR_EXP 13
 557: PUSH
 558: LD_STRING Yakotich
 560: PPUSH
 561: LD_INT 1
 563: PPUSH
 564: LD_STRING 03_
 566: PPUSH
 567: CALL 12004 0 3
 571: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 03_ ) ;
 572: LD_ADDR_EXP 14
 576: PUSH
 577: LD_STRING Mietek
 579: PPUSH
 580: LD_INT 1
 582: PPUSH
 583: LD_STRING 03_
 585: PPUSH
 586: CALL 12004 0 3
 590: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 03_ ) ;
 591: LD_ADDR_EXP 15
 595: PUSH
 596: LD_STRING Boris
 598: PPUSH
 599: LD_INT 1
 601: PPUSH
 602: LD_STRING 03_
 604: PPUSH
 605: CALL 12004 0 3
 609: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 03_ ) ;
 610: LD_ADDR_EXP 17
 614: PUSH
 615: LD_STRING Michail
 617: PPUSH
 618: LD_INT 1
 620: PPUSH
 621: LD_STRING 03_
 623: PPUSH
 624: CALL 12004 0 3
 628: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 03_ ) ;
 629: LD_ADDR_EXP 16
 633: PUSH
 634: LD_STRING Vasilij
 636: PPUSH
 637: LD_INT 1
 639: PPUSH
 640: LD_STRING 03_
 642: PPUSH
 643: CALL 12004 0 3
 647: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 03_ ) ;
 648: LD_ADDR_EXP 18
 652: PUSH
 653: LD_STRING Constantin
 655: PPUSH
 656: LD_INT 1
 658: PPUSH
 659: LD_STRING 03_
 661: PPUSH
 662: CALL 12004 0 3
 666: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 03_ ) ;
 667: LD_ADDR_EXP 19
 671: PUSH
 672: LD_STRING Maksim
 674: PPUSH
 675: LD_INT 1
 677: PPUSH
 678: LD_STRING 03_
 680: PPUSH
 681: CALL 12004 0 3
 685: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 03_ ) ;
 686: LD_ADDR_EXP 20
 690: PUSH
 691: LD_STRING Fiodor
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_STRING 03_
 699: PPUSH
 700: CALL 12004 0 3
 704: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 03_ ) ;
 705: LD_ADDR_EXP 23
 709: PUSH
 710: LD_STRING Aleksiej
 712: PPUSH
 713: LD_INT 1
 715: PPUSH
 716: LD_STRING 03_
 718: PPUSH
 719: CALL 12004 0 3
 723: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 03_ ) ;
 724: LD_ADDR_EXP 21
 728: PUSH
 729: LD_STRING Pavel
 731: PPUSH
 732: LD_INT 1
 734: PPUSH
 735: LD_STRING 03_
 737: PPUSH
 738: CALL 12004 0 3
 742: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 03_ ) ;
 743: LD_ADDR_EXP 22
 747: PUSH
 748: LD_STRING Zakhar
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_STRING 03_
 756: PPUSH
 757: CALL 12004 0 3
 761: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 03_ ) ;
 762: LD_ADDR_EXP 24
 766: PUSH
 767: LD_STRING Aleksandr
 769: PPUSH
 770: LD_INT 1
 772: PPUSH
 773: LD_STRING 03_
 775: PPUSH
 776: CALL 12004 0 3
 780: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , true , 03_ ) ;
 781: LD_ADDR_EXP 26
 785: PUSH
 786: LD_STRING Stanislav
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: LD_STRING 03_
 794: PPUSH
 795: CALL 12004 0 3
 799: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , true , 03_ ) ;
 800: LD_ADDR_EXP 25
 804: PUSH
 805: LD_STRING Josif
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: LD_STRING 03_
 813: PPUSH
 814: CALL 12004 0 3
 818: ST_TO_ADDR
// Jegor := PrepareUnit ( Jegor , true , 03_ ) ;
 819: LD_ADDR_EXP 27
 823: PUSH
 824: LD_STRING Jegor
 826: PPUSH
 827: LD_INT 1
 829: PPUSH
 830: LD_STRING 03_
 832: PPUSH
 833: CALL 12004 0 3
 837: ST_TO_ADDR
// Grigori := PrepareUnit ( Grigori , true , 03_ ) ;
 838: LD_ADDR_EXP 28
 842: PUSH
 843: LD_STRING Grigori
 845: PPUSH
 846: LD_INT 1
 848: PPUSH
 849: LD_STRING 03_
 851: PPUSH
 852: CALL 12004 0 3
 856: ST_TO_ADDR
// Anton := PrepareUnit ( Anton , true , 03_ ) ;
 857: LD_ADDR_EXP 29
 861: PUSH
 862: LD_STRING Anton
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_STRING 03_
 870: PPUSH
 871: CALL 12004 0 3
 875: ST_TO_ADDR
// YakotichCrew = YakotichCrew ^ Boris ^ Michail ^ Vasilij ^ Constantin ^ Maksim ^ Fiodor ^ Aleksiej ^ Pavel ^ Zakhar ^ Aleksandr ^ Stanislav ^ Josif ^ Jegor ^ Grigori ^ Anton ;
 876: LD_ADDR_EXP 1
 880: PUSH
 881: LD_EXP 1
 885: PUSH
 886: LD_EXP 15
 890: ADD
 891: PUSH
 892: LD_EXP 17
 896: ADD
 897: PUSH
 898: LD_EXP 16
 902: ADD
 903: PUSH
 904: LD_EXP 18
 908: ADD
 909: PUSH
 910: LD_EXP 19
 914: ADD
 915: PUSH
 916: LD_EXP 20
 920: ADD
 921: PUSH
 922: LD_EXP 23
 926: ADD
 927: PUSH
 928: LD_EXP 21
 932: ADD
 933: PUSH
 934: LD_EXP 22
 938: ADD
 939: PUSH
 940: LD_EXP 24
 944: ADD
 945: PUSH
 946: LD_EXP 26
 950: ADD
 951: PUSH
 952: LD_EXP 25
 956: ADD
 957: PUSH
 958: LD_EXP 27
 962: ADD
 963: PUSH
 964: LD_EXP 28
 968: ADD
 969: PUSH
 970: LD_EXP 29
 974: ADD
 975: ST_TO_ADDR
// SetClass ( [ Yakotich , Mietek , Constantin , Maksim , Fiodor , Aleksiej , Zakhar , Aleksandr , Josif ] , 1 ) ;
 976: LD_EXP 13
 980: PUSH
 981: LD_EXP 14
 985: PUSH
 986: LD_EXP 18
 990: PUSH
 991: LD_EXP 19
 995: PUSH
 996: LD_EXP 20
1000: PUSH
1001: LD_EXP 23
1005: PUSH
1006: LD_EXP 22
1010: PUSH
1011: LD_EXP 24
1015: PUSH
1016: LD_EXP 25
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: LIST
1025: LIST
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: PPUSH
1032: LD_INT 1
1034: PPUSH
1035: CALL_OW 336
// SetClass ( [ Boris , Anton ] , 2 ) ;
1039: LD_EXP 15
1043: PUSH
1044: LD_EXP 29
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: PPUSH
1053: LD_INT 2
1055: PPUSH
1056: CALL_OW 336
// SetClass ( [ Michail , Pavel , Jegor ] , 3 ) ;
1060: LD_EXP 17
1064: PUSH
1065: LD_EXP 21
1069: PUSH
1070: LD_EXP 27
1074: PUSH
1075: EMPTY
1076: LIST
1077: LIST
1078: LIST
1079: PPUSH
1080: LD_INT 3
1082: PPUSH
1083: CALL_OW 336
// SetClass ( [ Stanislav , Vasilij , Grigori ] , 4 ) ;
1087: LD_EXP 26
1091: PUSH
1092: LD_EXP 16
1096: PUSH
1097: LD_EXP 28
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: LIST
1106: PPUSH
1107: LD_INT 4
1109: PPUSH
1110: CALL_OW 336
// vc_chassis = 24 ;
1114: LD_ADDR_OWVAR 37
1118: PUSH
1119: LD_INT 24
1121: ST_TO_ADDR
// vc_control = 1 ;
1122: LD_ADDR_OWVAR 38
1126: PUSH
1127: LD_INT 1
1129: ST_TO_ADDR
// vc_engine = 1 ;
1130: LD_ADDR_OWVAR 39
1134: PUSH
1135: LD_INT 1
1137: ST_TO_ADDR
// vc_weapon = 89 ;
1138: LD_ADDR_OWVAR 40
1142: PUSH
1143: LD_INT 89
1145: ST_TO_ADDR
// RuCargo1 = CreateVehicle ;
1146: LD_ADDR_EXP 70
1150: PUSH
1151: CALL_OW 45
1155: ST_TO_ADDR
// PlaceUnitArea ( RuCargo1 , TanksEnterArea , false ) ;
1156: LD_EXP 70
1160: PPUSH
1161: LD_INT 25
1163: PPUSH
1164: LD_INT 0
1166: PPUSH
1167: CALL_OW 49
// SetCargo ( RuCargo1 , mat_siberit , 200 ) ;
1171: LD_EXP 70
1175: PPUSH
1176: LD_INT 3
1178: PPUSH
1179: LD_INT 200
1181: PPUSH
1182: CALL_OW 290
// PlaceHumanInUnit ( Jegor , RuCargo1 ) ;
1186: LD_EXP 27
1190: PPUSH
1191: LD_EXP 70
1195: PPUSH
1196: CALL_OW 52
// vc_chassis = 22 ;
1200: LD_ADDR_OWVAR 37
1204: PUSH
1205: LD_INT 22
1207: ST_TO_ADDR
// vc_weapon = 51 ;
1208: LD_ADDR_OWVAR 40
1212: PUSH
1213: LD_INT 51
1215: ST_TO_ADDR
// RuCargo2 = CreateVehicle ;
1216: LD_ADDR_EXP 71
1220: PUSH
1221: CALL_OW 45
1225: ST_TO_ADDR
// PlaceUnitArea ( RuCargo2 , TanksEnterArea , false ) ;
1226: LD_EXP 71
1230: PPUSH
1231: LD_INT 25
1233: PPUSH
1234: LD_INT 0
1236: PPUSH
1237: CALL_OW 49
// SetCargo ( RuCargo2 , mat_cans , 100 ) ;
1241: LD_EXP 71
1245: PPUSH
1246: LD_INT 1
1248: PPUSH
1249: LD_INT 100
1251: PPUSH
1252: CALL_OW 290
// PlaceHumanInUnit ( Anton , RuCargo2 ) ;
1256: LD_EXP 29
1260: PPUSH
1261: LD_EXP 71
1265: PPUSH
1266: CALL_OW 52
// PlaceUnitArea ( Yakotich , EnterArea , false ) ;
1270: LD_EXP 13
1274: PPUSH
1275: LD_INT 3
1277: PPUSH
1278: LD_INT 0
1280: PPUSH
1281: CALL_OW 49
// PlaceUnitArea ( Mietek , EnterArea , false ) ;
1285: LD_EXP 14
1289: PPUSH
1290: LD_INT 3
1292: PPUSH
1293: LD_INT 0
1295: PPUSH
1296: CALL_OW 49
// PlaceUnitArea ( Boris , EnterArea , false ) ;
1300: LD_EXP 15
1304: PPUSH
1305: LD_INT 3
1307: PPUSH
1308: LD_INT 0
1310: PPUSH
1311: CALL_OW 49
// PlaceUnitArea ( Vasilij , EnterArea , false ) ;
1315: LD_EXP 16
1319: PPUSH
1320: LD_INT 3
1322: PPUSH
1323: LD_INT 0
1325: PPUSH
1326: CALL_OW 49
// PlaceUnitArea ( Constantin , EnterArea , false ) ;
1330: LD_EXP 18
1334: PPUSH
1335: LD_INT 3
1337: PPUSH
1338: LD_INT 0
1340: PPUSH
1341: CALL_OW 49
// PlaceUnitArea ( Maksim , EnterArea , false ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_INT 3
1352: PPUSH
1353: LD_INT 0
1355: PPUSH
1356: CALL_OW 49
// PlaceUnitArea ( Fiodor , EnterArea , false ) ;
1360: LD_EXP 20
1364: PPUSH
1365: LD_INT 3
1367: PPUSH
1368: LD_INT 0
1370: PPUSH
1371: CALL_OW 49
// PlaceUnitArea ( Zakhar , EnterArea , false ) ;
1375: LD_EXP 22
1379: PPUSH
1380: LD_INT 3
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 49
// PlaceUnitArea ( Aleksiej , EnterArea , false ) ;
1390: LD_EXP 23
1394: PPUSH
1395: LD_INT 3
1397: PPUSH
1398: LD_INT 0
1400: PPUSH
1401: CALL_OW 49
// PlaceUnitArea ( Aleksandr , EnterArea , false ) ;
1405: LD_EXP 24
1409: PPUSH
1410: LD_INT 3
1412: PPUSH
1413: LD_INT 0
1415: PPUSH
1416: CALL_OW 49
// PlaceUnitArea ( Stanislav , EnterArea , false ) ;
1420: LD_EXP 26
1424: PPUSH
1425: LD_INT 3
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: CALL_OW 49
// PlaceUnitArea ( Josif , EnterArea , false ) ;
1435: LD_EXP 25
1439: PPUSH
1440: LD_INT 3
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// PlaceUnitArea ( Grigori , EnterArea , false ) ;
1450: LD_EXP 28
1454: PPUSH
1455: LD_INT 3
1457: PPUSH
1458: LD_INT 0
1460: PPUSH
1461: CALL_OW 49
// PlaceUnitArea ( Pavel , EnterArea , false ) ;
1465: LD_EXP 21
1469: PPUSH
1470: LD_INT 3
1472: PPUSH
1473: LD_INT 0
1475: PPUSH
1476: CALL_OW 49
// Natasza := PrepareUnit ( Natasza , false ,  ) ;
1480: LD_ADDR_EXP 37
1484: PUSH
1485: LD_STRING Natasza
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: LD_STRING 
1493: PPUSH
1494: CALL 12004 0 3
1498: ST_TO_ADDR
// Belkov2 := PrepareUnit ( Belkov2 , false ,  ) ;
1499: LD_ADDR_EXP 38
1503: PUSH
1504: LD_STRING Belkov2
1506: PPUSH
1507: LD_INT 0
1509: PPUSH
1510: LD_STRING 
1512: PPUSH
1513: CALL 12004 0 3
1517: ST_TO_ADDR
// Oblukov := PrepareUnit ( Oblukov , false ,  ) ;
1518: LD_ADDR_EXP 39
1522: PUSH
1523: LD_STRING Oblukov
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: LD_STRING 
1531: PPUSH
1532: CALL 12004 0 3
1536: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , false ,  ) ;
1537: LD_ADDR_EXP 40
1541: PUSH
1542: LD_STRING Kovalyuk
1544: PPUSH
1545: LD_INT 0
1547: PPUSH
1548: LD_STRING 
1550: PPUSH
1551: CALL 12004 0 3
1555: ST_TO_ADDR
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
1556: LD_ADDR_EXP 41
1560: PUSH
1561: LD_STRING Kozlov
1563: PPUSH
1564: LD_INT 0
1566: PPUSH
1567: LD_STRING 
1569: PPUSH
1570: CALL 12004 0 3
1574: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
1575: LD_EXP 37
1579: PPUSH
1580: LD_INT 18
1582: PPUSH
1583: LD_INT 0
1585: PPUSH
1586: CALL_OW 49
// ComTurnUnit ( Natasza , Yakotich ) ;
1590: LD_EXP 37
1594: PPUSH
1595: LD_EXP 13
1599: PPUSH
1600: CALL_OW 119
// PlaceHumanInUnit ( Belkov2 , b1 ) ;
1604: LD_EXP 38
1608: PPUSH
1609: LD_INT 319
1611: PPUSH
1612: CALL_OW 52
// PlaceHumanInUnit ( Oblukov , b2 ) ;
1616: LD_EXP 39
1620: PPUSH
1621: LD_INT 318
1623: PPUSH
1624: CALL_OW 52
// PlaceHumanInUnit ( Kovalyuk , w1 ) ;
1628: LD_EXP 40
1632: PPUSH
1633: LD_INT 313
1635: PPUSH
1636: CALL_OW 52
// PlaceHumanInUnit ( Kozlov , l1 ) ;
1640: LD_EXP 41
1644: PPUSH
1645: LD_INT 317
1647: PPUSH
1648: CALL_OW 52
// end ;
1652: LD_VAR 0 1
1656: RET
// export function InitBierezov ; begin
1657: LD_INT 0
1659: PPUSH
// Uc_Side = 4 ;
1660: LD_ADDR_OWVAR 20
1664: PUSH
1665: LD_INT 4
1667: ST_TO_ADDR
// Bierezov := PrepareUnit ( Bierezov , false ,  ) ;
1668: LD_ADDR_EXP 42
1672: PUSH
1673: LD_STRING Bierezov
1675: PPUSH
1676: LD_INT 0
1678: PPUSH
1679: LD_STRING 
1681: PPUSH
1682: CALL 12004 0 3
1686: ST_TO_ADDR
// Sharonov := PrepareUnit ( Sharonov , false ,  ) ;
1687: LD_ADDR_EXP 43
1691: PUSH
1692: LD_STRING Sharonov
1694: PPUSH
1695: LD_INT 0
1697: PPUSH
1698: LD_STRING 
1700: PPUSH
1701: CALL 12004 0 3
1705: ST_TO_ADDR
// Lesov := PrepareUnit ( Lesov , false ,  ) ;
1706: LD_ADDR_EXP 44
1710: PUSH
1711: LD_STRING Lesov
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: LD_STRING 
1719: PPUSH
1720: CALL 12004 0 3
1724: ST_TO_ADDR
// Aleinik := PrepareUnit ( Aleinik , false ,  ) ;
1725: LD_ADDR_EXP 45
1729: PUSH
1730: LD_STRING Aleinik
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: LD_STRING 
1738: PPUSH
1739: CALL 12004 0 3
1743: ST_TO_ADDR
// Korotajev := PrepareUnit ( Korotajev , false ,  ) ;
1744: LD_ADDR_EXP 46
1748: PUSH
1749: LD_STRING Korotajev
1751: PPUSH
1752: LD_INT 0
1754: PPUSH
1755: LD_STRING 
1757: PPUSH
1758: CALL 12004 0 3
1762: ST_TO_ADDR
// Bautin := PrepareUnit ( Bautin , false ,  ) ;
1763: LD_ADDR_EXP 47
1767: PUSH
1768: LD_STRING Bautin
1770: PPUSH
1771: LD_INT 0
1773: PPUSH
1774: LD_STRING 
1776: PPUSH
1777: CALL 12004 0 3
1781: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , EnterArea , false ) ;
1782: LD_EXP 42
1786: PPUSH
1787: LD_INT 3
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL_OW 49
// PlaceUnitArea ( Sharonov , EnterArea , false ) ;
1797: LD_EXP 43
1801: PPUSH
1802: LD_INT 3
1804: PPUSH
1805: LD_INT 0
1807: PPUSH
1808: CALL_OW 49
// PlaceUnitArea ( Lesov , EnterArea , false ) ;
1812: LD_EXP 44
1816: PPUSH
1817: LD_INT 3
1819: PPUSH
1820: LD_INT 0
1822: PPUSH
1823: CALL_OW 49
// PlaceUnitArea ( Aleinik , EnterArea , false ) ;
1827: LD_EXP 45
1831: PPUSH
1832: LD_INT 3
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL_OW 49
// PlaceUnitArea ( Korotajev , EnterArea , false ) ;
1842: LD_EXP 46
1846: PPUSH
1847: LD_INT 3
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// PlaceUnitArea ( Bautin , EnterArea , false ) ;
1857: LD_EXP 47
1861: PPUSH
1862: LD_INT 3
1864: PPUSH
1865: LD_INT 0
1867: PPUSH
1868: CALL_OW 49
// BierezovCrew := BierezovCrew ^ Sharonov ^ Lesov ^ Aleinik ^ Korotajev ^ Bautin ;
1872: LD_ADDR_EXP 2
1876: PUSH
1877: LD_EXP 2
1881: PUSH
1882: LD_EXP 43
1886: ADD
1887: PUSH
1888: LD_EXP 44
1892: ADD
1893: PUSH
1894: LD_EXP 45
1898: ADD
1899: PUSH
1900: LD_EXP 46
1904: ADD
1905: PUSH
1906: LD_EXP 47
1910: ADD
1911: ST_TO_ADDR
// end ;
1912: LD_VAR 0 1
1916: RET
// export function InitMiotacz ; begin
1917: LD_INT 0
1919: PPUSH
// if LoadVariable ( 03_FlameSaved , 1 ) then
1920: LD_STRING 03_FlameSaved
1922: PPUSH
1923: LD_INT 1
1925: PPUSH
1926: CALL_OW 30
1930: IFFALSE 2027
// begin Uc_Side = 3 ;
1932: LD_ADDR_OWVAR 20
1936: PUSH
1937: LD_INT 3
1939: ST_TO_ADDR
// Uc_Nation = 2 ;
1940: LD_ADDR_OWVAR 21
1944: PUSH
1945: LD_INT 2
1947: ST_TO_ADDR
// Uc_Direction = 2 ;
1948: LD_ADDR_OWVAR 24
1952: PUSH
1953: LD_INT 2
1955: ST_TO_ADDR
// Vc_Chassis = 14 ;
1956: LD_ADDR_OWVAR 37
1960: PUSH
1961: LD_INT 14
1963: ST_TO_ADDR
// Vc_Control = 1 ;
1964: LD_ADDR_OWVAR 38
1968: PUSH
1969: LD_INT 1
1971: ST_TO_ADDR
// Vc_Engine = 1 ;
1972: LD_ADDR_OWVAR 39
1976: PUSH
1977: LD_INT 1
1979: ST_TO_ADDR
// Vc_Weapon = 26 ;
1980: LD_ADDR_OWVAR 40
1984: PUSH
1985: LD_INT 26
1987: ST_TO_ADDR
// Tank := CreateVehicle ;
1988: LD_ADDR_EXP 34
1992: PUSH
1993: CALL_OW 45
1997: ST_TO_ADDR
// PlaceUnitArea ( Tank , TanksEnterArea , false ) ;
1998: LD_EXP 34
2002: PPUSH
2003: LD_INT 25
2005: PPUSH
2006: LD_INT 0
2008: PPUSH
2009: CALL_OW 49
// PlaceHumanInUnit ( Michail , Tank ) ;
2013: LD_EXP 17
2017: PPUSH
2018: LD_EXP 34
2022: PPUSH
2023: CALL_OW 52
// end ; end ;
2027: LD_VAR 0 1
2031: RET
// export BierezovEngineers ; export function InitBierezovPersonel ; var i ; begin
2032: LD_INT 0
2034: PPUSH
2035: PPUSH
// Hc_Gallery :=  ;
2036: LD_ADDR_OWVAR 33
2040: PUSH
2041: LD_STRING 
2043: ST_TO_ADDR
// Hc_Name :=  ;
2044: LD_ADDR_OWVAR 26
2048: PUSH
2049: LD_STRING 
2051: ST_TO_ADDR
// Uc_Side := 4 ;
2052: LD_ADDR_OWVAR 20
2056: PUSH
2057: LD_INT 4
2059: ST_TO_ADDR
// BierezovNewCrew := [ ] ;
2060: LD_ADDR_EXP 3
2064: PUSH
2065: EMPTY
2066: ST_TO_ADDR
// for i = 1 to 6 do
2067: LD_ADDR_VAR 0 2
2071: PUSH
2072: DOUBLE
2073: LD_INT 1
2075: DEC
2076: ST_TO_ADDR
2077: LD_INT 6
2079: PUSH
2080: FOR_TO
2081: IFFALSE 2136
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2083: LD_INT 0
2085: PPUSH
2086: LD_INT 1
2088: PPUSH
2089: CALL_OW 12
2093: PPUSH
2094: LD_INT 5
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: LIST
2107: PUSH
2108: LD_OWVAR 67
2112: ARRAY
2113: PPUSH
2114: CALL_OW 381
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2118: LD_ADDR_EXP 3
2122: PUSH
2123: LD_EXP 3
2127: PUSH
2128: CALL_OW 44
2132: ADD
2133: ST_TO_ADDR
// end ;
2134: GO 2080
2136: POP
2137: POP
// for i = 1 to 2 do
2138: LD_ADDR_VAR 0 2
2142: PUSH
2143: DOUBLE
2144: LD_INT 1
2146: DEC
2147: ST_TO_ADDR
2148: LD_INT 2
2150: PUSH
2151: FOR_TO
2152: IFFALSE 2207
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2154: LD_INT 0
2156: PPUSH
2157: LD_INT 1
2159: PPUSH
2160: CALL_OW 12
2164: PPUSH
2165: LD_INT 5
2167: PUSH
2168: LD_INT 4
2170: PUSH
2171: LD_INT 3
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_OWVAR 67
2183: ARRAY
2184: PPUSH
2185: CALL_OW 382
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2189: LD_ADDR_EXP 3
2193: PUSH
2194: LD_EXP 3
2198: PUSH
2199: CALL_OW 44
2203: ADD
2204: ST_TO_ADDR
// end ;
2205: GO 2151
2207: POP
2208: POP
// BierezovNewCrew := BierezovNewCrew ^ BierezovEngineers ;
2209: LD_ADDR_EXP 3
2213: PUSH
2214: LD_EXP 3
2218: PUSH
2219: LD_EXP 72
2223: ADD
2224: ST_TO_ADDR
// for i = 1 to 2 do
2225: LD_ADDR_VAR 0 2
2229: PUSH
2230: DOUBLE
2231: LD_INT 1
2233: DEC
2234: ST_TO_ADDR
2235: LD_INT 2
2237: PUSH
2238: FOR_TO
2239: IFFALSE 2294
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2241: LD_INT 0
2243: PPUSH
2244: LD_INT 1
2246: PPUSH
2247: CALL_OW 12
2251: PPUSH
2252: LD_INT 5
2254: PUSH
2255: LD_INT 4
2257: PUSH
2258: LD_INT 3
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: LIST
2265: PUSH
2266: LD_OWVAR 67
2270: ARRAY
2271: PPUSH
2272: CALL_OW 383
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2276: LD_ADDR_EXP 3
2280: PUSH
2281: LD_EXP 3
2285: PUSH
2286: CALL_OW 44
2290: ADD
2291: ST_TO_ADDR
// end ;
2292: GO 2238
2294: POP
2295: POP
// for i = 1 to 1 do
2296: LD_ADDR_VAR 0 2
2300: PUSH
2301: DOUBLE
2302: LD_INT 1
2304: DEC
2305: ST_TO_ADDR
2306: LD_INT 1
2308: PUSH
2309: FOR_TO
2310: IFFALSE 2365
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2312: LD_INT 0
2314: PPUSH
2315: LD_INT 1
2317: PPUSH
2318: CALL_OW 12
2322: PPUSH
2323: LD_INT 5
2325: PUSH
2326: LD_INT 4
2328: PUSH
2329: LD_INT 3
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: LIST
2336: PUSH
2337: LD_OWVAR 67
2341: ARRAY
2342: PPUSH
2343: CALL_OW 384
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2347: LD_ADDR_EXP 3
2351: PUSH
2352: LD_EXP 3
2356: PUSH
2357: CALL_OW 44
2361: ADD
2362: ST_TO_ADDR
// end ;
2363: GO 2309
2365: POP
2366: POP
// for i in BierezovNewCrew do
2367: LD_ADDR_VAR 0 2
2371: PUSH
2372: LD_EXP 3
2376: PUSH
2377: FOR_IN
2378: IFFALSE 2485
// begin case GetClass ( i ) of 1 :
2380: LD_VAR 0 2
2384: PPUSH
2385: CALL_OW 257
2389: PUSH
2390: LD_INT 1
2392: DOUBLE
2393: EQUAL
2394: IFTRUE 2398
2396: GO 2413
2398: POP
// PlaceHumanInUnit ( i , LArmor1 ) ; 2 :
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_INT 279
2406: PPUSH
2407: CALL_OW 52
2411: GO 2483
2413: LD_INT 2
2415: DOUBLE
2416: EQUAL
2417: IFTRUE 2421
2419: GO 2436
2421: POP
// PlaceHumanInUnit ( i , LArmor2 ) ; 3 :
2422: LD_VAR 0 2
2426: PPUSH
2427: LD_INT 278
2429: PPUSH
2430: CALL_OW 52
2434: GO 2483
2436: LD_INT 3
2438: DOUBLE
2439: EQUAL
2440: IFTRUE 2444
2442: GO 2459
2444: POP
// PlaceHumanInUnit ( i , LArmor2 ) ; 4 :
2445: LD_VAR 0 2
2449: PPUSH
2450: LD_INT 278
2452: PPUSH
2453: CALL_OW 52
2457: GO 2483
2459: LD_INT 4
2461: DOUBLE
2462: EQUAL
2463: IFTRUE 2467
2465: GO 2482
2467: POP
// PlaceHumanInUnit ( i , LArmor2 ) ; end ;
2468: LD_VAR 0 2
2472: PPUSH
2473: LD_INT 278
2475: PPUSH
2476: CALL_OW 52
2480: GO 2483
2482: POP
// end ;
2483: GO 2377
2485: POP
2486: POP
// end ;
2487: LD_VAR 0 1
2491: RET
// export function InitPompa ; begin
2492: LD_INT 0
2494: PPUSH
// Uc_Side = 6 ;
2495: LD_ADDR_OWVAR 20
2499: PUSH
2500: LD_INT 6
2502: ST_TO_ADDR
// Pompa := PrepareUnit ( Pompa , false ,  ) ;
2503: LD_ADDR_EXP 48
2507: PUSH
2508: LD_STRING Pompa
2510: PPUSH
2511: LD_INT 0
2513: PPUSH
2514: LD_STRING 
2516: PPUSH
2517: CALL 12004 0 3
2521: ST_TO_ADDR
// Petrov := PrepareUnit ( Petrov , false ,  ) ;
2522: LD_ADDR_EXP 50
2526: PUSH
2527: LD_STRING Petrov
2529: PPUSH
2530: LD_INT 0
2532: PPUSH
2533: LD_STRING 
2535: PPUSH
2536: CALL 12004 0 3
2540: ST_TO_ADDR
// Konajev := PrepareUnit ( Konajev , false ,  ) ;
2541: LD_ADDR_EXP 51
2545: PUSH
2546: LD_STRING Konajev
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: LD_STRING 
2554: PPUSH
2555: CALL 12004 0 3
2559: ST_TO_ADDR
// Smirnov := PrepareUnit ( Smirnov , false ,  ) ;
2560: LD_ADDR_EXP 49
2564: PUSH
2565: LD_STRING Smirnov
2567: PPUSH
2568: LD_INT 0
2570: PPUSH
2571: LD_STRING 
2573: PPUSH
2574: CALL 12004 0 3
2578: ST_TO_ADDR
// Radenko := PrepareUnit ( Radenko , false ,  ) ;
2579: LD_ADDR_EXP 52
2583: PUSH
2584: LD_STRING Radenko
2586: PPUSH
2587: LD_INT 0
2589: PPUSH
2590: LD_STRING 
2592: PPUSH
2593: CALL 12004 0 3
2597: ST_TO_ADDR
// PompaCrew := PompaCrew ^ Pompa ^ Petrov ^ Konajev ^ Smirnov ^ Radenko ;
2598: LD_ADDR_EXP 4
2602: PUSH
2603: LD_EXP 4
2607: PUSH
2608: LD_EXP 48
2612: ADD
2613: PUSH
2614: LD_EXP 50
2618: ADD
2619: PUSH
2620: LD_EXP 51
2624: ADD
2625: PUSH
2626: LD_EXP 49
2630: ADD
2631: PUSH
2632: LD_EXP 52
2636: ADD
2637: ST_TO_ADDR
// PlaceUnitArea ( Pompa , EnterArea , false ) ;
2638: LD_EXP 48
2642: PPUSH
2643: LD_INT 3
2645: PPUSH
2646: LD_INT 0
2648: PPUSH
2649: CALL_OW 49
// PlaceUnitArea ( Petrov , EnterArea , false ) ;
2653: LD_EXP 50
2657: PPUSH
2658: LD_INT 3
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 49
// PlaceUnitArea ( Konajev , EnterArea , false ) ;
2668: LD_EXP 51
2672: PPUSH
2673: LD_INT 3
2675: PPUSH
2676: LD_INT 0
2678: PPUSH
2679: CALL_OW 49
// PlaceUnitArea ( Smirnov , EnterArea , false ) ;
2683: LD_EXP 49
2687: PPUSH
2688: LD_INT 3
2690: PPUSH
2691: LD_INT 0
2693: PPUSH
2694: CALL_OW 49
// PlaceUnitArea ( Radenko , EnterArea , false ) ;
2698: LD_EXP 52
2702: PPUSH
2703: LD_INT 3
2705: PPUSH
2706: LD_INT 0
2708: PPUSH
2709: CALL_OW 49
// end ; end_of_file
2713: LD_VAR 0 1
2717: RET
// export function Action ; begin
2718: LD_INT 0
2720: PPUSH
// InGameOn ;
2721: CALL_OW 8
// ComTurnXY ( Janusz , 133 , 27 ) ;
2725: LD_INT 420
2727: PPUSH
2728: LD_INT 133
2730: PPUSH
2731: LD_INT 27
2733: PPUSH
2734: CALL_OW 118
// ComTurnXY ( Livid , 293 , 225 ) ;
2738: LD_INT 425
2740: PPUSH
2741: LD_INT 293
2743: PPUSH
2744: LD_INT 225
2746: PPUSH
2747: CALL_OW 118
// if LoadVariable ( 03_FlameSaved , 1 ) then
2751: LD_STRING 03_FlameSaved
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: CALL_OW 30
2761: IFFALSE 2779
// PlaceHumanInUnit ( Michail , Tank ) else
2763: LD_EXP 17
2767: PPUSH
2768: LD_EXP 34
2772: PPUSH
2773: CALL_OW 52
2777: GO 2794
// PlaceUnitArea ( Michail , EnterArea , false ) ;
2779: LD_EXP 17
2783: PPUSH
2784: LD_INT 3
2786: PPUSH
2787: LD_INT 0
2789: PPUSH
2790: CALL_OW 49
// RevealFogArea ( 3 , RevealArea ) ;
2794: LD_INT 3
2796: PPUSH
2797: LD_INT 20
2799: PPUSH
2800: CALL_OW 332
// RevealFogArea ( 3 , ArRevealArea ) ;
2804: LD_INT 3
2806: PPUSH
2807: LD_INT 21
2809: PPUSH
2810: CALL_OW 332
// RevealFogArea ( 3 , BukovBaseArea ) ;
2814: LD_INT 3
2816: PPUSH
2817: LD_INT 7
2819: PPUSH
2820: CALL_OW 332
// Say ( Yakotich , 4Yak-01 ) ;
2824: LD_EXP 13
2828: PPUSH
2829: LD_STRING 4Yak-01
2831: PPUSH
2832: CALL_OW 88
// ComMoveXY ( YakotichCrew , 41 , 17 ) ;
2836: LD_EXP 1
2840: PPUSH
2841: LD_INT 41
2843: PPUSH
2844: LD_INT 17
2846: PPUSH
2847: CALL_OW 111
// ComMoveXY ( Yakotich , 41 , 17 ) ;
2851: LD_EXP 13
2855: PPUSH
2856: LD_INT 41
2858: PPUSH
2859: LD_INT 17
2861: PPUSH
2862: CALL_OW 111
// ComMoveXY ( Mietek , 41 , 17 ) ;
2866: LD_EXP 14
2870: PPUSH
2871: LD_INT 41
2873: PPUSH
2874: LD_INT 17
2876: PPUSH
2877: CALL_OW 111
// AddComMoveXY ( YakotichCrew , 130 , 105 ) ;
2881: LD_EXP 1
2885: PPUSH
2886: LD_INT 130
2888: PPUSH
2889: LD_INT 105
2891: PPUSH
2892: CALL_OW 171
// AddComMoveXY ( Yakotich , 130 , 105 ) ;
2896: LD_EXP 13
2900: PPUSH
2901: LD_INT 130
2903: PPUSH
2904: LD_INT 105
2906: PPUSH
2907: CALL_OW 171
// AddComMoveXY ( Mietek , 130 , 105 ) ;
2911: LD_EXP 14
2915: PPUSH
2916: LD_INT 130
2918: PPUSH
2919: LD_INT 105
2921: PPUSH
2922: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 77 , 93 ) ;
2926: LD_EXP 1
2930: PPUSH
2931: LD_INT 77
2933: PPUSH
2934: LD_INT 93
2936: PPUSH
2937: CALL_OW 171
// AddComMoveToArea ( [ Stanislav , Vasilij ] , HGCheckArea ) ;
2941: LD_EXP 26
2945: PUSH
2946: LD_EXP 16
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: PPUSH
2955: LD_INT 22
2957: PPUSH
2958: CALL_OW 173
// AddComTurnXY ( [ Vasilij , Stanislav ] , 75 , 86 ) ;
2962: LD_EXP 16
2966: PUSH
2967: LD_EXP 26
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PPUSH
2976: LD_INT 75
2978: PPUSH
2979: LD_INT 86
2981: PPUSH
2982: CALL_OW 178
// AddComMoveToArea ( Yakotich , YakTalk1 ) ;
2986: LD_EXP 13
2990: PPUSH
2991: LD_INT 23
2993: PPUSH
2994: CALL_OW 173
// AddComMoveXY ( Mietek , 73 , 98 ) ;
2998: LD_EXP 14
3002: PPUSH
3003: LD_INT 73
3005: PPUSH
3006: LD_INT 98
3008: PPUSH
3009: CALL_OW 171
// AddComTurnXY ( [ Yakotich , Mietek ] , 70 , 99 ) ;
3013: LD_EXP 13
3017: PUSH
3018: LD_EXP 14
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PPUSH
3027: LD_INT 70
3029: PPUSH
3030: LD_INT 99
3032: PPUSH
3033: CALL_OW 178
// end ;
3037: LD_VAR 0 1
3041: RET
// every 0 0$1 trigger IsInArea ( Yakotich , YakTalk1 ) do
3042: LD_EXP 13
3046: PPUSH
3047: LD_INT 23
3049: PPUSH
3050: CALL_OW 308
3054: IFFALSE 3881
3056: GO 3058
3058: DISABLE
// begin Say ( Yakotich , 4Yak-02 ) ;
3059: LD_EXP 13
3063: PPUSH
3064: LD_STRING 4Yak-02
3066: PPUSH
3067: CALL_OW 88
// Say ( Morozov , 4Moro-01 ) ;
3071: LD_EXP 53
3075: PPUSH
3076: LD_STRING 4Moro-01
3078: PPUSH
3079: CALL_OW 88
// Say ( Yakotich , 4Yak-03 ) ;
3083: LD_EXP 13
3087: PPUSH
3088: LD_STRING 4Yak-03
3090: PPUSH
3091: CALL_OW 88
// Say ( Morozov , 4Moro-02 ) ;
3095: LD_EXP 53
3099: PPUSH
3100: LD_STRING 4Moro-02
3102: PPUSH
3103: CALL_OW 88
// SetSide ( [ Vasilij , Stanislav ] , 6 ) ;
3107: LD_EXP 16
3111: PUSH
3112: LD_EXP 26
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: LD_INT 6
3123: PPUSH
3124: CALL_OW 235
// ComEnterUnit ( [ Vasilij , Stanislav ] , L1L1 ) ;
3128: LD_EXP 16
3132: PUSH
3133: LD_EXP 26
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: LD_INT 43
3144: PPUSH
3145: CALL_OW 120
// Say ( Morozov , 4Moro-03 ) ;
3149: LD_EXP 53
3153: PPUSH
3154: LD_STRING 4Moro-03
3156: PPUSH
3157: CALL_OW 88
// ComMoveXY ( Grigori , 74 , 102 ) ;
3161: LD_EXP 28
3165: PPUSH
3166: LD_INT 74
3168: PPUSH
3169: LD_INT 102
3171: PPUSH
3172: CALL_OW 111
// Say ( Grigori , 4Grig-01 ) ;
3176: LD_EXP 28
3180: PPUSH
3181: LD_STRING 4Grig-01
3183: PPUSH
3184: CALL_OW 88
// Say ( Morozov , 4Moro-04 ) ;
3188: LD_EXP 53
3192: PPUSH
3193: LD_STRING 4Moro-04
3195: PPUSH
3196: CALL_OW 88
// Say ( Grigori , 4Grig-02 ) ;
3200: LD_EXP 28
3204: PPUSH
3205: LD_STRING 4Grig-02
3207: PPUSH
3208: CALL_OW 88
// Say ( Popov , 4Popov-01 ) ;
3212: LD_EXP 55
3216: PPUSH
3217: LD_STRING 4Popov-01
3219: PPUSH
3220: CALL_OW 88
// SetSide ( Grigori , 6 ) ;
3224: LD_EXP 28
3228: PPUSH
3229: LD_INT 6
3231: PPUSH
3232: CALL_OW 235
// ComEnterUnit ( Grigori , L1L1 ) ;
3236: LD_EXP 28
3240: PPUSH
3241: LD_INT 43
3243: PPUSH
3244: CALL_OW 120
// Say ( Yakotich , 4Yak-04 ) ;
3248: LD_EXP 13
3252: PPUSH
3253: LD_STRING 4Yak-04
3255: PPUSH
3256: CALL_OW 88
// Say ( Popov , 4Popov-02 ) ;
3260: LD_EXP 55
3264: PPUSH
3265: LD_STRING 4Popov-02
3267: PPUSH
3268: CALL_OW 88
// Say ( Yakotich , 4Yak-05 ) ;
3272: LD_EXP 13
3276: PPUSH
3277: LD_STRING 4Yak-05
3279: PPUSH
3280: CALL_OW 88
// Say ( Morozov , 4Moro-05 ) ;
3284: LD_EXP 53
3288: PPUSH
3289: LD_STRING 4Moro-05
3291: PPUSH
3292: CALL_OW 88
// Say ( Morozov , 4Moro-06 ) ;
3296: LD_EXP 53
3300: PPUSH
3301: LD_STRING 4Moro-06
3303: PPUSH
3304: CALL_OW 88
// Say ( Popov , 4Popov-03 ) ;
3308: LD_EXP 55
3312: PPUSH
3313: LD_STRING 4Popov-03
3315: PPUSH
3316: CALL_OW 88
// Say ( Popov , 4Popov-04 ) ;
3320: LD_EXP 55
3324: PPUSH
3325: LD_STRING 4Popov-04
3327: PPUSH
3328: CALL_OW 88
// ComExitBuilding ( [ Vasilij , Stanislav ] ) ;
3332: LD_EXP 16
3336: PUSH
3337: LD_EXP 26
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PPUSH
3346: CALL_OW 122
// SetSide ( [ Vasilij , Stanislav ] , 3 ) ;
3350: LD_EXP 16
3354: PUSH
3355: LD_EXP 26
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL_OW 235
// ComMoveXY ( [ Vasilij , Stanislav ] , 73 , 89 ) ;
3371: LD_EXP 16
3375: PUSH
3376: LD_EXP 26
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PPUSH
3385: LD_INT 73
3387: PPUSH
3388: LD_INT 89
3390: PPUSH
3391: CALL_OW 111
// Say ( Yakotich , 4Yak-06 ) ;
3395: LD_EXP 13
3399: PPUSH
3400: LD_STRING 4Yak-06
3402: PPUSH
3403: CALL_OW 88
// Say ( Platonov , 4Plat-01 ) ;
3407: LD_EXP 54
3411: PPUSH
3412: LD_STRING 4Plat-01
3414: PPUSH
3415: CALL_OW 88
// Say ( Platonov , 4Plat-02 ) ;
3419: LD_EXP 54
3423: PPUSH
3424: LD_STRING 4Plat-02
3426: PPUSH
3427: CALL_OW 88
// Say ( Platonov , 4Plat-03 ) ;
3431: LD_EXP 54
3435: PPUSH
3436: LD_STRING 4Plat-03
3438: PPUSH
3439: CALL_OW 88
// if Difficulty = 3 then
3443: LD_OWVAR 67
3447: PUSH
3448: LD_INT 3
3450: EQUAL
3451: IFFALSE 3465
// begin Say ( Morozov , 4Moro-Units ) ;
3453: LD_EXP 53
3457: PPUSH
3458: LD_STRING 4Moro-Units
3460: PPUSH
3461: CALL_OW 88
// end ; Say ( Platonov , 4Plat-04 ) ;
3465: LD_EXP 54
3469: PPUSH
3470: LD_STRING 4Plat-04
3472: PPUSH
3473: CALL_OW 88
// Say ( Yakotich , 4Yak-07 ) ;
3477: LD_EXP 13
3481: PPUSH
3482: LD_STRING 4Yak-07
3484: PPUSH
3485: CALL_OW 88
// ComExitBuilding ( Grigori ) ;
3489: LD_EXP 28
3493: PPUSH
3494: CALL_OW 122
// SetSide ( Grigori , 3 ) ;
3498: LD_EXP 28
3502: PPUSH
3503: LD_INT 3
3505: PPUSH
3506: CALL_OW 235
// ComTurnUnit ( Grigori , Yakotich ) ;
3510: LD_EXP 28
3514: PPUSH
3515: LD_EXP 13
3519: PPUSH
3520: CALL_OW 119
// Say ( Grigori , 4Grig-03 ) ;
3524: LD_EXP 28
3528: PPUSH
3529: LD_STRING 4Grig-03
3531: PPUSH
3532: CALL_OW 88
// AddComMoveXY ( YakotichCrew , 117 , 162 ) ;
3536: LD_EXP 1
3540: PPUSH
3541: LD_INT 117
3543: PPUSH
3544: LD_INT 162
3546: PPUSH
3547: CALL_OW 171
// ComMoveXY ( [ RuCargo1 , RuCargo2 ] , 157 , 232 ) ;
3551: LD_EXP 70
3555: PUSH
3556: LD_EXP 71
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PPUSH
3565: LD_INT 157
3567: PPUSH
3568: LD_INT 232
3570: PPUSH
3571: CALL_OW 111
// AddComMoveXY ( Yakotich , 117 , 162 ) ;
3575: LD_EXP 13
3579: PPUSH
3580: LD_INT 117
3582: PPUSH
3583: LD_INT 162
3585: PPUSH
3586: CALL_OW 171
// AddComMoveXY ( Mietek , 117 , 162 ) ;
3590: LD_EXP 14
3594: PPUSH
3595: LD_INT 117
3597: PPUSH
3598: LD_INT 162
3600: PPUSH
3601: CALL_OW 171
// ComEnterUnit ( [ Morozov , Platonov , Popov ] , MorozovBase ) ;
3605: LD_EXP 53
3609: PUSH
3610: LD_EXP 54
3614: PUSH
3615: LD_EXP 55
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: LIST
3624: PPUSH
3625: LD_INT 348
3627: PPUSH
3628: CALL_OW 120
// AddComMoveXY ( YakotichCrew , 138 , 168 ) ;
3632: LD_EXP 1
3636: PPUSH
3637: LD_INT 138
3639: PPUSH
3640: LD_INT 168
3642: PPUSH
3643: CALL_OW 171
// AddComMoveXY ( Yakotich , 138 , 168 ) ;
3647: LD_EXP 13
3651: PPUSH
3652: LD_INT 138
3654: PPUSH
3655: LD_INT 168
3657: PPUSH
3658: CALL_OW 171
// AddComMoveXY ( Mietek , 138 , 168 ) ;
3662: LD_EXP 14
3666: PPUSH
3667: LD_INT 138
3669: PPUSH
3670: LD_INT 168
3672: PPUSH
3673: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 142 , 199 ) ;
3677: LD_EXP 1
3681: PPUSH
3682: LD_INT 142
3684: PPUSH
3685: LD_INT 199
3687: PPUSH
3688: CALL_OW 171
// AddComMoveXY ( Yakotich , 142 , 199 ) ;
3692: LD_EXP 13
3696: PPUSH
3697: LD_INT 142
3699: PPUSH
3700: LD_INT 199
3702: PPUSH
3703: CALL_OW 171
// AddComMoveXY ( Mietek , 142 , 199 ) ;
3707: LD_EXP 14
3711: PPUSH
3712: LD_INT 142
3714: PPUSH
3715: LD_INT 199
3717: PPUSH
3718: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 157 , 232 ) ;
3722: LD_EXP 1
3726: PPUSH
3727: LD_INT 157
3729: PPUSH
3730: LD_INT 232
3732: PPUSH
3733: CALL_OW 171
// AddComMoveToArea ( Yakotich , YakTalk2 ) ;
3737: LD_EXP 13
3741: PPUSH
3742: LD_INT 24
3744: PPUSH
3745: CALL_OW 173
// AddComMoveXY ( Mietek , 167 , 240 ) ;
3749: LD_EXP 14
3753: PPUSH
3754: LD_INT 167
3756: PPUSH
3757: LD_INT 240
3759: PPUSH
3760: CALL_OW 171
// AddComTurnUnit ( [ Yakotich , Mietek ] , Natasza ) ;
3764: LD_EXP 13
3768: PUSH
3769: LD_EXP 14
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PPUSH
3778: LD_EXP 37
3782: PPUSH
3783: CALL_OW 179
// if Difficulty = 3 then
3787: LD_OWVAR 67
3791: PUSH
3792: LD_INT 3
3794: EQUAL
3795: IFFALSE 3881
// begin SetSide ( [ Constantin , Josif , Aleksiej , Pavel , Zakhar ] , 6 ) ;
3797: LD_EXP 18
3801: PUSH
3802: LD_EXP 25
3806: PUSH
3807: LD_EXP 23
3811: PUSH
3812: LD_EXP 21
3816: PUSH
3817: LD_EXP 22
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: PPUSH
3829: LD_INT 6
3831: PPUSH
3832: CALL_OW 235
// ComEnterUnit ( [ Constantin , Josif , Aleksiej , Zakhar ] , SB1 ) ;
3836: LD_EXP 18
3840: PUSH
3841: LD_EXP 25
3845: PUSH
3846: LD_EXP 23
3850: PUSH
3851: LD_EXP 22
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: PPUSH
3862: LD_INT 430
3864: PPUSH
3865: CALL_OW 120
// ComEnterUnit ( Pavel , SW1 ) ;
3869: LD_EXP 21
3873: PPUSH
3874: LD_INT 435
3876: PPUSH
3877: CALL_OW 120
// end ; end ;
3881: END
// every 0 0$1 trigger IsInArea ( Yakotich , YakTalk2 ) do
3882: LD_EXP 13
3886: PPUSH
3887: LD_INT 24
3889: PPUSH
3890: CALL_OW 308
3894: IFFALSE 4271
3896: GO 3898
3898: DISABLE
// begin Say ( Natasza , 4Nati-01 ) ;
3899: LD_EXP 37
3903: PPUSH
3904: LD_STRING 4Nati-01
3906: PPUSH
3907: CALL_OW 88
// Say ( Yakotich , 4Yak-09 ) ;
3911: LD_EXP 13
3915: PPUSH
3916: LD_STRING 4Yak-09
3918: PPUSH
3919: CALL_OW 88
// Say ( Natasza , 4Nati-02 ) ;
3923: LD_EXP 37
3927: PPUSH
3928: LD_STRING 4Nati-02
3930: PPUSH
3931: CALL_OW 88
// Say ( Natasza , 4Nati-03 ) ;
3935: LD_EXP 37
3939: PPUSH
3940: LD_STRING 4Nati-03
3942: PPUSH
3943: CALL_OW 88
// Say ( Natasza , 4Nati-04 ) ;
3947: LD_EXP 37
3951: PPUSH
3952: LD_STRING 4Nati-04
3954: PPUSH
3955: CALL_OW 88
// Say ( Yakotich , 4Yak-10 ) ;
3959: LD_EXP 13
3963: PPUSH
3964: LD_STRING 4Yak-10
3966: PPUSH
3967: CALL_OW 88
// Say ( Natasza , 4Nati-05 ) ;
3971: LD_EXP 37
3975: PPUSH
3976: LD_STRING 4Nati-05
3978: PPUSH
3979: CALL_OW 88
// ComMoveXY ( Stanislav , 167 , 238 ) ;
3983: LD_EXP 26
3987: PPUSH
3988: LD_INT 167
3990: PPUSH
3991: LD_INT 238
3993: PPUSH
3994: CALL_OW 111
// AddComTurnUnit ( Stanislav , Natasza ) ;
3998: LD_EXP 26
4002: PPUSH
4003: LD_EXP 37
4007: PPUSH
4008: CALL_OW 179
// Say ( Stanislav , 4Stan-01 ) ;
4012: LD_EXP 26
4016: PPUSH
4017: LD_STRING 4Stan-01
4019: PPUSH
4020: CALL_OW 88
// Say ( Yakotich , 4Yak-11 ) ;
4024: LD_EXP 13
4028: PPUSH
4029: LD_STRING 4Yak-11
4031: PPUSH
4032: CALL_OW 88
// Say ( Natasza , 4Nati-06 ) ;
4036: LD_EXP 37
4040: PPUSH
4041: LD_STRING 4Nati-06
4043: PPUSH
4044: CALL_OW 88
// Say ( Mietek , 4Mietek-03 ) ;
4048: LD_EXP 14
4052: PPUSH
4053: LD_STRING 4Mietek-03
4055: PPUSH
4056: CALL_OW 88
// Say ( Yakotich , 4Yak-12 ) ;
4060: LD_EXP 13
4064: PPUSH
4065: LD_STRING 4Yak-12
4067: PPUSH
4068: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
4072: LD_STRING o1
4074: PPUSH
4075: CALL_OW 337
// start_ended = true ;
4079: LD_ADDR_EXP 62
4083: PUSH
4084: LD_INT 1
4086: ST_TO_ADDR
// SayRadio ( Yakotich , 4Yak-Sib-01 ) ;
4087: LD_EXP 13
4091: PPUSH
4092: LD_STRING 4Yak-Sib-01
4094: PPUSH
4095: CALL_OW 94
// SayRadio ( Morozov , 4Moro-Sib-01 ) ;
4099: LD_EXP 53
4103: PPUSH
4104: LD_STRING 4Moro-Sib-01
4106: PPUSH
4107: CALL_OW 94
// InGameOff ;
4111: CALL_OW 9
// if LoadVariable ( 03_FlameSaved , 1 ) then
4115: LD_STRING 03_FlameSaved
4117: PPUSH
4118: LD_INT 1
4120: PPUSH
4121: CALL_OW 30
4125: IFFALSE 4173
// begin Wait ( 0 0$15 ) ;
4127: LD_INT 525
4129: PPUSH
4130: CALL_OW 67
// DialogueOn ;
4134: CALL_OW 6
// Say ( Vasilij , 4Vas-Flame-01 ) ;
4138: LD_EXP 16
4142: PPUSH
4143: LD_STRING 4Vas-Flame-01
4145: PPUSH
4146: CALL_OW 88
// Say ( Vasilij , 4Vas-Flame-02 ) ;
4150: LD_EXP 16
4154: PPUSH
4155: LD_STRING 4Vas-Flame-02
4157: PPUSH
4158: CALL_OW 88
// ChangeMissionObjectives ( o2 ) ;
4162: LD_STRING o2
4164: PPUSH
4165: CALL_OW 337
// DialogueOff ;
4169: CALL_OW 7
// end ; Wait ( 5 5$0 ) ;
4173: LD_INT 10500
4175: PPUSH
4176: CALL_OW 67
// InitBierezov ;
4180: CALL 1657 0 0
// ComMoveXY ( BierezovCrew , 77 , 50 ) ;
4184: LD_EXP 2
4188: PPUSH
4189: LD_INT 77
4191: PPUSH
4192: LD_INT 50
4194: PPUSH
4195: CALL_OW 111
// AddComMoveXY ( Bierezov , 77 , 50 ) ;
4199: LD_EXP 42
4203: PPUSH
4204: LD_INT 77
4206: PPUSH
4207: LD_INT 50
4209: PPUSH
4210: CALL_OW 171
// AddComMoveXY ( BierezovCrew , 132 , 106 ) ;
4214: LD_EXP 2
4218: PPUSH
4219: LD_INT 132
4221: PPUSH
4222: LD_INT 106
4224: PPUSH
4225: CALL_OW 171
// AddComMoveXY ( Bierezov , 132 , 106 ) ;
4229: LD_EXP 42
4233: PPUSH
4234: LD_INT 132
4236: PPUSH
4237: LD_INT 106
4239: PPUSH
4240: CALL_OW 171
// AddComMoveXY ( BierezovCrew , 79 , 104 ) ;
4244: LD_EXP 2
4248: PPUSH
4249: LD_INT 79
4251: PPUSH
4252: LD_INT 104
4254: PPUSH
4255: CALL_OW 171
// AddComEnterUnit ( Bierezov , MorozovBase ) ;
4259: LD_EXP 42
4263: PPUSH
4264: LD_INT 348
4266: PPUSH
4267: CALL_OW 180
// end ;
4271: END
// every 0 0$1 trigger IsInArea ( Bierezov , NorthLeninArea ) do
4272: LD_EXP 42
4276: PPUSH
4277: LD_INT 5
4279: PPUSH
4280: CALL_OW 308
4284: IFFALSE 4474
4286: GO 4288
4288: DISABLE
// begin SetSide ( Bierezov , 6 ) ;
4289: LD_EXP 42
4293: PPUSH
4294: LD_INT 6
4296: PPUSH
4297: CALL_OW 235
// Wait ( 1 1$30 ) ;
4301: LD_INT 3150
4303: PPUSH
4304: CALL_OW 67
// ComExitBuilding ( Bierezov ) ;
4308: LD_EXP 42
4312: PPUSH
4313: CALL_OW 122
// ComExitBuilding ( BierezovNewCrew ) ;
4317: LD_EXP 3
4321: PPUSH
4322: CALL_OW 122
// SetSide ( Bierezov , 4 ) ;
4326: LD_EXP 42
4330: PPUSH
4331: LD_INT 4
4333: PPUSH
4334: CALL_OW 235
// BierezovCrew := BierezovCrew ^ BierezovNewCrew ;
4338: LD_ADDR_EXP 2
4342: PUSH
4343: LD_EXP 2
4347: PUSH
4348: LD_EXP 3
4352: ADD
4353: ST_TO_ADDR
// BierezovEngineers := BierezovEngineers ^ FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) ;
4354: LD_ADDR_EXP 72
4358: PUSH
4359: LD_EXP 72
4363: PUSH
4364: LD_INT 22
4366: PUSH
4367: LD_INT 4
4369: PUSH
4370: EMPTY
4371: LIST
4372: LIST
4373: PUSH
4374: LD_INT 25
4376: PUSH
4377: LD_INT 2
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: PPUSH
4388: CALL_OW 69
4392: ADD
4393: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
4394: LD_INT 35
4396: PPUSH
4397: CALL_OW 67
// AddComMoveXY ( BierezovCrew , 82 , 54 ) ;
4401: LD_EXP 2
4405: PPUSH
4406: LD_INT 82
4408: PPUSH
4409: LD_INT 54
4411: PPUSH
4412: CALL_OW 171
// AddComMoveXY ( [ Sharonov , Korotajev ] , 87 , 34 ) ;
4416: LD_EXP 43
4420: PUSH
4421: LD_EXP 46
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PPUSH
4430: LD_INT 87
4432: PPUSH
4433: LD_INT 34
4435: PPUSH
4436: CALL_OW 171
// AddComMoveXY ( Bierezov , 85 , 52 ) ;
4440: LD_EXP 42
4444: PPUSH
4445: LD_INT 85
4447: PPUSH
4448: LD_INT 52
4450: PPUSH
4451: CALL_OW 171
// AddComTurnXY ( Bierezov , 84 , 54 ) ;
4455: LD_EXP 42
4459: PPUSH
4460: LD_INT 84
4462: PPUSH
4463: LD_INT 54
4465: PPUSH
4466: CALL_OW 178
// BierezovAI ;
4470: CALL 5280 0 0
// end ;
4474: END
// every 0 0$1 trigger not PrepareTime do
4475: LD_EXP 59
4479: NOT
4480: IFFALSE 4641
4482: GO 4484
4484: DISABLE
// begin Wait ( 0 0$24 ) ;
4485: LD_INT 840
4487: PPUSH
4488: CALL_OW 67
// InGameOn ;
4492: CALL_OW 8
// DialogueOn ;
4496: CALL_OW 6
// SayRadio ( Pompa , 4Pompa-01 ) ;
4500: LD_EXP 48
4504: PPUSH
4505: LD_STRING 4Pompa-01
4507: PPUSH
4508: CALL_OW 94
// SayRadio ( Platonov , 4Plat-05 ) ;
4512: LD_EXP 54
4516: PPUSH
4517: LD_STRING 4Plat-05
4519: PPUSH
4520: CALL_OW 94
// SayRadio ( Pompa , 4Pompa-02 ) ;
4524: LD_EXP 48
4528: PPUSH
4529: LD_STRING 4Pompa-02
4531: PPUSH
4532: CALL_OW 94
// SayRadio ( Platonov , 4Plat-06 ) ;
4536: LD_EXP 54
4540: PPUSH
4541: LD_STRING 4Plat-06
4543: PPUSH
4544: CALL_OW 94
// SayRadio ( Platonov , 4Plat-07 ) ;
4548: LD_EXP 54
4552: PPUSH
4553: LD_STRING 4Plat-07
4555: PPUSH
4556: CALL_OW 94
// SayRadio ( Bukov , 4Bukov-01 ) ;
4560: LD_EXP 57
4564: PPUSH
4565: LD_STRING 4Bukov-01
4567: PPUSH
4568: CALL_OW 94
// SayRadio ( Platonov , 4Plat-08 ) ;
4572: LD_EXP 54
4576: PPUSH
4577: LD_STRING 4Plat-08
4579: PPUSH
4580: CALL_OW 94
// ChangeMissionObjectives ( o4 ) ;
4584: LD_STRING o4
4586: PPUSH
4587: CALL_OW 337
// InGameOff ;
4591: CALL_OW 9
// DialogueOff ;
4595: CALL_OW 7
// Wait ( 0 0$36 ) ;
4599: LD_INT 1260
4601: PPUSH
4602: CALL_OW 67
// InitPompa ;
4606: CALL 2492 0 0
// ComMoveXY ( PompaCrew , 76 , 100 ) ;
4610: LD_EXP 4
4614: PPUSH
4615: LD_INT 76
4617: PPUSH
4618: LD_INT 100
4620: PPUSH
4621: CALL_OW 111
// NorthLeninCrew := NorthLeninCrew union PompaCrew ;
4625: LD_ADDR_EXP 7
4629: PUSH
4630: LD_EXP 7
4634: PUSH
4635: LD_EXP 4
4639: UNION
4640: ST_TO_ADDR
// end ; end_of_file
4641: END
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4642: LD_INT 0
4644: PPUSH
4645: PPUSH
4646: PPUSH
// uc_side := GetSide ( b ) ;
4647: LD_ADDR_OWVAR 20
4651: PUSH
4652: LD_VAR 0 2
4656: PPUSH
4657: CALL_OW 255
4661: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4662: LD_ADDR_OWVAR 21
4666: PUSH
4667: LD_VAR 0 2
4671: PPUSH
4672: CALL_OW 248
4676: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4677: LD_ADDR_VAR 0 5
4681: PUSH
4682: LD_VAR 0 2
4686: PPUSH
4687: CALL_OW 254
4691: PUSH
4692: LD_INT 3
4694: MINUS
4695: ST_TO_ADDR
// if dir < 0 then
4696: LD_VAR 0 5
4700: PUSH
4701: LD_INT 0
4703: LESS
4704: IFFALSE 4720
// dir := 6 + dir ;
4706: LD_ADDR_VAR 0 5
4710: PUSH
4711: LD_INT 6
4713: PUSH
4714: LD_VAR 0 5
4718: PLUS
4719: ST_TO_ADDR
// un := CreateHuman ;
4720: LD_ADDR_VAR 0 4
4724: PUSH
4725: CALL_OW 44
4729: ST_TO_ADDR
// SetDir ( un , dir ) ;
4730: LD_VAR 0 4
4734: PPUSH
4735: LD_VAR 0 5
4739: PPUSH
4740: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4744: LD_VAR 0 4
4748: PPUSH
4749: LD_VAR 0 2
4753: PPUSH
4754: CALL_OW 52
// end ;
4758: LD_VAR 0 3
4762: RET
// every 1 trigger IsSelected ( Janusz ) do
4763: LD_INT 420
4765: PPUSH
4766: CALL_OW 306
4770: IFFALSE 4867
4772: GO 4774
4774: DISABLE
// begin JanuszExp ( [ 1 , 2 , 3 , 4 ] ) ;
4775: LD_INT 1
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 3
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: PPUSH
4793: CALL 4868 0 1
// Wait ( 0 0$03 ) ;
4797: LD_INT 105
4799: PPUSH
4800: CALL_OW 67
// Say ( Janusz , 4Janusz-Sikret ) ;
4804: LD_INT 420
4806: PPUSH
4807: LD_STRING 4Janusz-Sikret
4809: PPUSH
4810: CALL_OW 88
// TeleportUnit ( Janusz , 120 , 246 , 246 , true ) ;
4814: LD_INT 420
4816: PPUSH
4817: LD_INT 120
4819: PPUSH
4820: LD_INT 246
4822: PPUSH
4823: LD_INT 246
4825: PPUSH
4826: LD_INT 1
4828: PPUSH
4829: CALL_OW 483
// Wait ( 0 0$03 ) ;
4833: LD_INT 105
4835: PPUSH
4836: CALL_OW 67
// RemoveUnit ( Janusz ) ;
4840: LD_INT 420
4842: PPUSH
4843: CALL_OW 64
// SaveVariable ( 1 , JanuszSaved ) ;
4847: LD_INT 1
4849: PPUSH
4850: LD_STRING JanuszSaved
4852: PPUSH
4853: CALL_OW 39
// SaveCharacters ( Janusz , Janusz ) ;
4857: LD_INT 420
4859: PPUSH
4860: LD_STRING Janusz
4862: PPUSH
4863: CALL_OW 38
// end ;
4867: END
// export function JanuszExp ( q ) ; var dec , q1 ; begin
4868: LD_INT 0
4870: PPUSH
4871: PPUSH
4872: PPUSH
// dec = SelectiveQuery ( JanuszQuery , q ) ;
4873: LD_ADDR_VAR 0 3
4877: PUSH
4878: LD_STRING JanuszQuery
4880: PPUSH
4881: LD_VAR 0 1
4885: PPUSH
4886: CALL_OW 98
4890: ST_TO_ADDR
// case dec of 1 :
4891: LD_VAR 0 3
4895: PUSH
4896: LD_INT 1
4898: DOUBLE
4899: EQUAL
4900: IFTRUE 4904
4902: GO 4922
4904: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 2500 ) ;
4905: LD_EXP 13
4909: PPUSH
4910: LD_INT 1
4912: PPUSH
4913: LD_INT 2500
4915: PPUSH
4916: CALL_OW 591
// end ; 2 :
4920: GO 5001
4922: LD_INT 2
4924: DOUBLE
4925: EQUAL
4926: IFTRUE 4930
4928: GO 4948
4930: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 2500 ) ;
4931: LD_EXP 13
4935: PPUSH
4936: LD_INT 2
4938: PPUSH
4939: LD_INT 2500
4941: PPUSH
4942: CALL_OW 591
// end ; 3 :
4946: GO 5001
4948: LD_INT 3
4950: DOUBLE
4951: EQUAL
4952: IFTRUE 4956
4954: GO 4974
4956: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 2500 ) ;
4957: LD_EXP 13
4961: PPUSH
4962: LD_INT 3
4964: PPUSH
4965: LD_INT 2500
4967: PPUSH
4968: CALL_OW 591
// end ; 4 :
4972: GO 5001
4974: LD_INT 4
4976: DOUBLE
4977: EQUAL
4978: IFTRUE 4982
4980: GO 5000
4982: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 2500 ) ;
4983: LD_EXP 13
4987: PPUSH
4988: LD_INT 4
4990: PPUSH
4991: LD_INT 2500
4993: PPUSH
4994: CALL_OW 591
// end ; end ;
4998: GO 5001
5000: POP
// end ;
5001: LD_VAR 0 2
5005: RET
// export function TransportQuery ( q ) ; var dec , q1 ; begin
5006: LD_INT 0
5008: PPUSH
5009: PPUSH
5010: PPUSH
// dec = SelectiveQuery ( TransportQuery , q ) ;
5011: LD_ADDR_VAR 0 3
5015: PUSH
5016: LD_STRING TransportQuery
5018: PPUSH
5019: LD_VAR 0 1
5023: PPUSH
5024: CALL_OW 98
5028: ST_TO_ADDR
// case dec of 1 :
5029: LD_VAR 0 3
5033: PUSH
5034: LD_INT 1
5036: DOUBLE
5037: EQUAL
5038: IFTRUE 5042
5040: GO 5045
5042: POP
// begin end ; end ;
5043: GO 5046
5045: POP
// end ;
5046: LD_VAR 0 2
5050: RET
// every 1 trigger start_ended = false do
5051: LD_EXP 62
5055: PUSH
5056: LD_INT 0
5058: EQUAL
5059: IFFALSE 5074
5061: GO 5063
5063: DISABLE
// begin CenterOnUnits ( Yakotich ) ;
5064: LD_EXP 13
5068: PPUSH
5069: CALL_OW 85
// enable ;
5073: ENABLE
// end ;
5074: END
// every 1 trigger FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
5075: LD_INT 10
5077: PPUSH
5078: LD_INT 22
5080: PUSH
5081: LD_INT 3
5083: PUSH
5084: EMPTY
5085: LIST
5086: LIST
5087: PUSH
5088: LD_INT 2
5090: PUSH
5091: LD_INT 21
5093: PUSH
5094: LD_INT 1
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 21
5103: PUSH
5104: LD_INT 2
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 70
5124: PUSH
5125: LD_INT 0
5127: GREATER
5128: IFFALSE 5214
5130: GO 5132
5132: DISABLE
5133: LD_INT 0
5135: PPUSH
// begin enable ;
5136: ENABLE
// for unit in FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
5137: LD_ADDR_VAR 0 1
5141: PUSH
5142: LD_INT 10
5144: PPUSH
5145: LD_INT 22
5147: PUSH
5148: LD_INT 3
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PUSH
5155: LD_INT 2
5157: PUSH
5158: LD_INT 21
5160: PUSH
5161: LD_INT 1
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PUSH
5168: LD_INT 21
5170: PUSH
5171: LD_INT 2
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PPUSH
5187: CALL_OW 70
5191: PUSH
5192: FOR_IN
5193: IFFALSE 5212
// begin ComMoveXY ( unit , 163 , 235 ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: LD_INT 163
5202: PPUSH
5203: LD_INT 235
5205: PPUSH
5206: CALL_OW 111
// end ;
5210: GO 5192
5212: POP
5213: POP
// end ;
5214: PPOPN 1
5216: END
// every 0 0$1 trigger start_ended = true do
5217: LD_EXP 62
5221: PUSH
5222: LD_INT 1
5224: EQUAL
5225: IFFALSE 5279
5227: GO 5229
5229: DISABLE
// begin enable ;
5230: ENABLE
// if PrepareTime then
5231: LD_EXP 59
5235: IFFALSE 5270
// begin PrepareTime := PrepareTime - 0 0$1 ;
5237: LD_ADDR_EXP 59
5241: PUSH
5242: LD_EXP 59
5246: PUSH
5247: LD_INT 35
5249: MINUS
5250: ST_TO_ADDR
// display_strings := [ #PrepareTime , PrepareTime ] ;
5251: LD_ADDR_OWVAR 47
5255: PUSH
5256: LD_STRING #PrepareTime
5258: PUSH
5259: LD_EXP 59
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: ST_TO_ADDR
// end else
5268: GO 5279
// begin display_strings :=  ;
5270: LD_ADDR_OWVAR 47
5274: PUSH
5275: LD_STRING 
5277: ST_TO_ADDR
// disable ;
5278: DISABLE
// end ; end ;
5279: END
// export function BierezovAI ; begin
5280: LD_INT 0
5282: PPUSH
// AddComBuild ( BierezovEngineers , b_depot , 80 , 47 , 3 ) ;
5283: LD_EXP 72
5287: PPUSH
5288: LD_INT 0
5290: PPUSH
5291: LD_INT 80
5293: PPUSH
5294: LD_INT 47
5296: PPUSH
5297: LD_INT 3
5299: PPUSH
5300: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_lab , 78 , 34 , 0 ) ;
5304: LD_EXP 72
5308: PPUSH
5309: LD_INT 6
5311: PPUSH
5312: LD_INT 78
5314: PPUSH
5315: LD_INT 34
5317: PPUSH
5318: LD_INT 0
5320: PPUSH
5321: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_oil_mine , 79 , 26 , 0 ) ;
5325: LD_EXP 72
5329: PPUSH
5330: LD_INT 29
5332: PPUSH
5333: LD_INT 79
5335: PPUSH
5336: LD_INT 26
5338: PPUSH
5339: LD_INT 0
5341: PPUSH
5342: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_oil_power , 84 , 28 , 5 ) ;
5346: LD_EXP 72
5350: PPUSH
5351: LD_INT 26
5353: PPUSH
5354: LD_INT 84
5356: PPUSH
5357: LD_INT 28
5359: PPUSH
5360: LD_INT 5
5362: PPUSH
5363: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_workshop , 92 , 41 , 3 ) ;
5367: LD_EXP 72
5371: PPUSH
5372: LD_INT 2
5374: PPUSH
5375: LD_INT 92
5377: PPUSH
5378: LD_INT 41
5380: PPUSH
5381: LD_INT 3
5383: PPUSH
5384: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_ext_gun , 95 , 41 , 4 ) ;
5388: LD_EXP 72
5392: PPUSH
5393: LD_INT 17
5395: PPUSH
5396: LD_INT 95
5398: PPUSH
5399: LD_INT 41
5401: PPUSH
5402: LD_INT 4
5404: PPUSH
5405: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_ext_rocket , 96 , 45 , 5 ) ;
5409: LD_EXP 72
5413: PPUSH
5414: LD_INT 18
5416: PPUSH
5417: LD_INT 96
5419: PPUSH
5420: LD_INT 45
5422: PPUSH
5423: LD_INT 5
5425: PPUSH
5426: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_ext_noncombat , 92 , 37 , 3 ) ;
5430: LD_EXP 72
5434: PPUSH
5435: LD_INT 19
5437: PPUSH
5438: LD_INT 92
5440: PPUSH
5441: LD_INT 37
5443: PPUSH
5444: LD_INT 3
5446: PPUSH
5447: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_oil_power , 74 , 25 , 2 ) ;
5451: LD_EXP 72
5455: PPUSH
5456: LD_INT 26
5458: PPUSH
5459: LD_INT 74
5461: PPUSH
5462: LD_INT 25
5464: PPUSH
5465: LD_INT 2
5467: PPUSH
5468: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_oil_power , 75 , 21 , 1 ) ;
5472: LD_EXP 72
5476: PPUSH
5477: LD_INT 26
5479: PPUSH
5480: LD_INT 75
5482: PPUSH
5483: LD_INT 21
5485: PPUSH
5486: LD_INT 1
5488: PPUSH
5489: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_armoury , 80 , 59 , 0 ) ;
5493: LD_EXP 72
5497: PPUSH
5498: LD_INT 4
5500: PPUSH
5501: LD_INT 80
5503: PPUSH
5504: LD_INT 59
5506: PPUSH
5507: LD_INT 0
5509: PPUSH
5510: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_bunker , 89 , 56 , 0 ) ;
5514: LD_EXP 72
5518: PPUSH
5519: LD_INT 32
5521: PPUSH
5522: LD_INT 89
5524: PPUSH
5525: LD_INT 56
5527: PPUSH
5528: LD_INT 0
5530: PPUSH
5531: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_bunker , 99 , 57 , 0 ) ;
5535: LD_EXP 72
5539: PPUSH
5540: LD_INT 32
5542: PPUSH
5543: LD_INT 99
5545: PPUSH
5546: LD_INT 57
5548: PPUSH
5549: LD_INT 0
5551: PPUSH
5552: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_bunker , 94 , 58 , 0 ) ;
5556: LD_EXP 72
5560: PPUSH
5561: LD_INT 32
5563: PPUSH
5564: LD_INT 94
5566: PPUSH
5567: LD_INT 58
5569: PPUSH
5570: LD_INT 0
5572: PPUSH
5573: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_bunker , 56 , 25 , 2 ) ;
5577: LD_EXP 72
5581: PPUSH
5582: LD_INT 32
5584: PPUSH
5585: LD_INT 56
5587: PPUSH
5588: LD_INT 25
5590: PPUSH
5591: LD_INT 2
5593: PPUSH
5594: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_breastwork , 52 , 30 , 2 ) ;
5598: LD_EXP 72
5602: PPUSH
5603: LD_INT 31
5605: PPUSH
5606: LD_INT 52
5608: PPUSH
5609: LD_INT 30
5611: PPUSH
5612: LD_INT 2
5614: PPUSH
5615: CALL_OW 205
// end ; end_of_file
5619: LD_VAR 0 1
5623: RET
// every 0 0$1 trigger start_ended = true do
5624: LD_EXP 62
5628: PUSH
5629: LD_INT 1
5631: EQUAL
5632: IFFALSE 5927
5634: GO 5636
5636: DISABLE
// begin ComResearch ( [ L1L1 , L1L2 ] , 48 ) ;
5637: LD_INT 43
5639: PUSH
5640: LD_INT 234
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: PPUSH
5647: LD_INT 48
5649: PPUSH
5650: CALL_OW 124
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 49 ) ;
5654: LD_INT 43
5656: PUSH
5657: LD_INT 234
5659: PUSH
5660: LD_INT 129
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: LIST
5667: PPUSH
5668: LD_INT 49
5670: PPUSH
5671: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 51 ) ;
5675: LD_INT 43
5677: PUSH
5678: LD_INT 234
5680: PUSH
5681: LD_INT 129
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: LIST
5688: PPUSH
5689: LD_INT 51
5691: PPUSH
5692: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 57 ) ;
5696: LD_INT 43
5698: PUSH
5699: LD_INT 234
5701: PUSH
5702: LD_INT 129
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: PPUSH
5710: LD_INT 57
5712: PPUSH
5713: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 82 ) ;
5717: LD_INT 43
5719: PUSH
5720: LD_INT 234
5722: PUSH
5723: LD_INT 129
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_INT 82
5733: PPUSH
5734: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 83 ) ;
5738: LD_INT 43
5740: PUSH
5741: LD_INT 234
5743: PUSH
5744: LD_INT 129
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: LIST
5751: PPUSH
5752: LD_INT 83
5754: PPUSH
5755: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 84 ) ;
5759: LD_INT 43
5761: PUSH
5762: LD_INT 234
5764: PUSH
5765: LD_INT 129
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: LIST
5772: PPUSH
5773: LD_INT 84
5775: PPUSH
5776: CALL_OW 184
// ComExitBuilding ( [ SouthLeninEngineers , NorthLeninEngineers ] ) ;
5780: LD_EXP 73
5784: PUSH
5785: LD_EXP 74
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 122
// AddComBuild ( NorthLeninEngineers , 32 , 82 , 93 , 4 ) ;
5798: LD_EXP 74
5802: PPUSH
5803: LD_INT 32
5805: PPUSH
5806: LD_INT 82
5808: PPUSH
5809: LD_INT 93
5811: PPUSH
5812: LD_INT 4
5814: PPUSH
5815: CALL_OW 205
// AddComBuild ( NorthLeninEngineers , 32 , 95 , 120 , 4 ) ;
5819: LD_EXP 74
5823: PPUSH
5824: LD_INT 32
5826: PPUSH
5827: LD_INT 95
5829: PPUSH
5830: LD_INT 120
5832: PPUSH
5833: LD_INT 4
5835: PPUSH
5836: CALL_OW 205
// AddComBuild ( NorthLeninEngineers , 32 , 69 , 81 , 3 ) ;
5840: LD_EXP 74
5844: PPUSH
5845: LD_INT 32
5847: PPUSH
5848: LD_INT 69
5850: PPUSH
5851: LD_INT 81
5853: PPUSH
5854: LD_INT 3
5856: PPUSH
5857: CALL_OW 205
// AddComEnterUnit ( NorthLeninEngineers , NorthLenin ) ;
5861: LD_EXP 74
5865: PPUSH
5866: LD_INT 253
5868: PPUSH
5869: CALL_OW 180
// AddComBuild ( SouthLeninEngineers , 32 , 123 , 174 , 4 ) ;
5873: LD_EXP 73
5877: PPUSH
5878: LD_INT 32
5880: PPUSH
5881: LD_INT 123
5883: PPUSH
5884: LD_INT 174
5886: PPUSH
5887: LD_INT 4
5889: PPUSH
5890: CALL_OW 205
// AddComBuild ( SouthLeninEngineers , 32 , 124 , 184 , 5 ) ;
5894: LD_EXP 73
5898: PPUSH
5899: LD_INT 32
5901: PPUSH
5902: LD_INT 124
5904: PPUSH
5905: LD_INT 184
5907: PPUSH
5908: LD_INT 5
5910: PPUSH
5911: CALL_OW 205
// AddComEnterUnit ( SouthLeninEngineers , SouthLenin ) ;
5915: LD_EXP 73
5919: PPUSH
5920: LD_INT 218
5922: PPUSH
5923: CALL_OW 180
// end ;
5927: END
// export function InitCommanders ; begin
5928: LD_INT 0
5930: PPUSH
// Uc_Side := 6 ;
5931: LD_ADDR_OWVAR 20
5935: PUSH
5936: LD_INT 6
5938: ST_TO_ADDR
// Uc_Nation := 3 ;
5939: LD_ADDR_OWVAR 21
5943: PUSH
5944: LD_INT 3
5946: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
5947: LD_ADDR_EXP 53
5951: PUSH
5952: LD_STRING Morozov
5954: PPUSH
5955: LD_INT 0
5957: PPUSH
5958: LD_STRING 
5960: PPUSH
5961: CALL 12004 0 3
5965: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
5966: LD_ADDR_EXP 54
5970: PUSH
5971: LD_STRING Platonov
5973: PPUSH
5974: LD_INT 0
5976: PPUSH
5977: LD_STRING 
5979: PPUSH
5980: CALL 12004 0 3
5984: ST_TO_ADDR
// Popov := PrepareUnit ( Popov , false ,  ) ;
5985: LD_ADDR_EXP 55
5989: PUSH
5990: LD_STRING Popov
5992: PPUSH
5993: LD_INT 0
5995: PPUSH
5996: LD_STRING 
5998: PPUSH
5999: CALL 12004 0 3
6003: ST_TO_ADDR
// Bukov := PrepareUnit ( Bukov , false ,  ) ;
6004: LD_ADDR_EXP 57
6008: PUSH
6009: LD_STRING Bukov
6011: PPUSH
6012: LD_INT 0
6014: PPUSH
6015: LD_STRING 
6017: PPUSH
6018: CALL 12004 0 3
6022: ST_TO_ADDR
// Gaydar := PrepareUnit ( Gaydar , false ,  ) ;
6023: LD_ADDR_EXP 56
6027: PUSH
6028: LD_STRING Gaydar
6030: PPUSH
6031: LD_INT 0
6033: PPUSH
6034: LD_STRING 
6036: PPUSH
6037: CALL 12004 0 3
6041: ST_TO_ADDR
// PlaceUnitArea ( Morozov , CommanderSpawn , false ) ;
6042: LD_EXP 53
6046: PPUSH
6047: LD_INT 19
6049: PPUSH
6050: LD_INT 0
6052: PPUSH
6053: CALL_OW 49
// PlaceUnitArea ( Platonov , CommanderSpawn , false ) ;
6057: LD_EXP 54
6061: PPUSH
6062: LD_INT 19
6064: PPUSH
6065: LD_INT 0
6067: PPUSH
6068: CALL_OW 49
// PlaceUnitArea ( Popov , CommanderSpawn , false ) ;
6072: LD_EXP 55
6076: PPUSH
6077: LD_INT 19
6079: PPUSH
6080: LD_INT 0
6082: PPUSH
6083: CALL_OW 49
// ComTurnXY ( [ Morozov , Platonov , Popov ] , 73 , 100 ) ;
6087: LD_EXP 53
6091: PUSH
6092: LD_EXP 54
6096: PUSH
6097: LD_EXP 55
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: PPUSH
6107: LD_INT 73
6109: PPUSH
6110: LD_INT 100
6112: PPUSH
6113: CALL_OW 118
// PlaceUnitArea ( Gaydar , GaydarSpawn , false ) ;
6117: LD_EXP 56
6121: PPUSH
6122: LD_INT 15
6124: PPUSH
6125: LD_INT 0
6127: PPUSH
6128: CALL_OW 49
// ComTurnXY ( Gaydar , 214 , 160 ) ;
6132: LD_EXP 56
6136: PPUSH
6137: LD_INT 214
6139: PPUSH
6140: LD_INT 160
6142: PPUSH
6143: CALL_OW 118
// PlaceUnitArea ( Bukov , BukovSpawn , false ) ;
6147: LD_EXP 57
6151: PPUSH
6152: LD_INT 16
6154: PPUSH
6155: LD_INT 0
6157: PPUSH
6158: CALL_OW 49
// ComTurnXY ( Bukov , 312 , 218 ) ;
6162: LD_EXP 57
6166: PPUSH
6167: LD_INT 312
6169: PPUSH
6170: LD_INT 218
6172: PPUSH
6173: CALL_OW 118
// end ;
6177: LD_VAR 0 1
6181: RET
// export SouthLeninEngineers , NorthLeninEngineers ; export function InitRussianAI ; var i , z , y , turrety , fabryka , lab , zbrojka ; begin
6182: LD_INT 0
6184: PPUSH
6185: PPUSH
6186: PPUSH
6187: PPUSH
6188: PPUSH
6189: PPUSH
6190: PPUSH
6191: PPUSH
// Hc_Gallery :=  ;
6192: LD_ADDR_OWVAR 33
6196: PUSH
6197: LD_STRING 
6199: ST_TO_ADDR
// Hc_Name :=  ;
6200: LD_ADDR_OWVAR 26
6204: PUSH
6205: LD_STRING 
6207: ST_TO_ADDR
// NorthLeninCrew := [ ] ;
6208: LD_ADDR_EXP 7
6212: PUSH
6213: EMPTY
6214: ST_TO_ADDR
// uc_side := 6 ;
6215: LD_ADDR_OWVAR 20
6219: PUSH
6220: LD_INT 6
6222: ST_TO_ADDR
// uc_nation := 3 ;
6223: LD_ADDR_OWVAR 21
6227: PUSH
6228: LD_INT 3
6230: ST_TO_ADDR
// for i = 1 to 8 do
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: DOUBLE
6237: LD_INT 1
6239: DEC
6240: ST_TO_ADDR
6241: LD_INT 8
6243: PUSH
6244: FOR_TO
6245: IFFALSE 6300
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6247: LD_INT 0
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: CALL_OW 12
6257: PPUSH
6258: LD_INT 7
6260: PUSH
6261: LD_INT 5
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: LIST
6271: PUSH
6272: LD_OWVAR 67
6276: ARRAY
6277: PPUSH
6278: CALL_OW 381
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
6282: LD_ADDR_EXP 7
6286: PUSH
6287: LD_EXP 7
6291: PUSH
6292: CALL_OW 44
6296: ADD
6297: ST_TO_ADDR
// end ;
6298: GO 6244
6300: POP
6301: POP
// for i = 1 to 2 do
6302: LD_ADDR_VAR 0 2
6306: PUSH
6307: DOUBLE
6308: LD_INT 1
6310: DEC
6311: ST_TO_ADDR
6312: LD_INT 2
6314: PUSH
6315: FOR_TO
6316: IFFALSE 6371
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6318: LD_INT 0
6320: PPUSH
6321: LD_INT 1
6323: PPUSH
6324: CALL_OW 12
6328: PPUSH
6329: LD_INT 7
6331: PUSH
6332: LD_INT 5
6334: PUSH
6335: LD_INT 3
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: LIST
6342: PUSH
6343: LD_OWVAR 67
6347: ARRAY
6348: PPUSH
6349: CALL_OW 382
// NorthLeninEngineers := NorthLeninEngineers ^ CreateHuman ;
6353: LD_ADDR_EXP 74
6357: PUSH
6358: LD_EXP 74
6362: PUSH
6363: CALL_OW 44
6367: ADD
6368: ST_TO_ADDR
// end ;
6369: GO 6315
6371: POP
6372: POP
// NorthLeninCrew := NorthLeninCrew ^ NorthLeninEngineers ;
6373: LD_ADDR_EXP 7
6377: PUSH
6378: LD_EXP 7
6382: PUSH
6383: LD_EXP 74
6387: ADD
6388: ST_TO_ADDR
// for i = 1 to 3 do
6389: LD_ADDR_VAR 0 2
6393: PUSH
6394: DOUBLE
6395: LD_INT 1
6397: DEC
6398: ST_TO_ADDR
6399: LD_INT 3
6401: PUSH
6402: FOR_TO
6403: IFFALSE 6458
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6405: LD_INT 0
6407: PPUSH
6408: LD_INT 1
6410: PPUSH
6411: CALL_OW 12
6415: PPUSH
6416: LD_INT 7
6418: PUSH
6419: LD_INT 5
6421: PUSH
6422: LD_INT 3
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: PUSH
6430: LD_OWVAR 67
6434: ARRAY
6435: PPUSH
6436: CALL_OW 383
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
6440: LD_ADDR_EXP 7
6444: PUSH
6445: LD_EXP 7
6449: PUSH
6450: CALL_OW 44
6454: ADD
6455: ST_TO_ADDR
// end ;
6456: GO 6402
6458: POP
6459: POP
// for i = 1 to 3 do
6460: LD_ADDR_VAR 0 2
6464: PUSH
6465: DOUBLE
6466: LD_INT 1
6468: DEC
6469: ST_TO_ADDR
6470: LD_INT 3
6472: PUSH
6473: FOR_TO
6474: IFFALSE 6529
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6476: LD_INT 0
6478: PPUSH
6479: LD_INT 1
6481: PPUSH
6482: CALL_OW 12
6486: PPUSH
6487: LD_INT 7
6489: PUSH
6490: LD_INT 5
6492: PUSH
6493: LD_INT 3
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: LD_OWVAR 67
6505: ARRAY
6506: PPUSH
6507: CALL_OW 384
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
6511: LD_ADDR_EXP 7
6515: PUSH
6516: LD_EXP 7
6520: PUSH
6521: CALL_OW 44
6525: ADD
6526: ST_TO_ADDR
// end ;
6527: GO 6473
6529: POP
6530: POP
// turrety := FilterUnitsInArea ( NorthLeninArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
6531: LD_ADDR_VAR 0 5
6535: PUSH
6536: LD_INT 5
6538: PPUSH
6539: LD_INT 2
6541: PUSH
6542: LD_INT 30
6544: PUSH
6545: LD_INT 31
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 30
6554: PUSH
6555: LD_INT 32
6557: PUSH
6558: EMPTY
6559: LIST
6560: LIST
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: LIST
6566: PPUSH
6567: CALL_OW 70
6571: ST_TO_ADDR
// lab := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_lab_full ] ] ) ;
6572: LD_ADDR_VAR 0 7
6576: PUSH
6577: LD_INT 5
6579: PPUSH
6580: LD_INT 30
6582: PUSH
6583: LD_INT 8
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: PPUSH
6593: CALL_OW 70
6597: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_factory ] ] ) ;
6598: LD_ADDR_VAR 0 6
6602: PUSH
6603: LD_INT 5
6605: PPUSH
6606: LD_INT 30
6608: PUSH
6609: LD_INT 3
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: EMPTY
6617: LIST
6618: PPUSH
6619: CALL_OW 70
6623: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_barracks ] ] ) ;
6624: LD_ADDR_VAR 0 8
6628: PUSH
6629: LD_INT 5
6631: PPUSH
6632: LD_INT 30
6634: PUSH
6635: LD_INT 5
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: EMPTY
6643: LIST
6644: PPUSH
6645: CALL_OW 70
6649: ST_TO_ADDR
// y := 1 ;
6650: LD_ADDR_VAR 0 4
6654: PUSH
6655: LD_INT 1
6657: ST_TO_ADDR
// z := 1 ;
6658: LD_ADDR_VAR 0 3
6662: PUSH
6663: LD_INT 1
6665: ST_TO_ADDR
// for i in NorthLeninCrew do
6666: LD_ADDR_VAR 0 2
6670: PUSH
6671: LD_EXP 7
6675: PUSH
6676: FOR_IN
6677: IFFALSE 6848
// begin case GetClass ( i ) of 1 :
6679: LD_VAR 0 2
6683: PPUSH
6684: CALL_OW 257
6688: PUSH
6689: LD_INT 1
6691: DOUBLE
6692: EQUAL
6693: IFTRUE 6697
6695: GO 6764
6697: POP
// begin if y > 6 then
6698: LD_VAR 0 4
6702: PUSH
6703: LD_INT 6
6705: GREATER
6706: IFFALSE 6728
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
6708: LD_VAR 0 2
6712: PPUSH
6713: LD_VAR 0 8
6717: PUSH
6718: LD_INT 1
6720: ARRAY
6721: PPUSH
6722: CALL_OW 52
6726: GO 6748
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
6728: LD_VAR 0 2
6732: PPUSH
6733: LD_VAR 0 5
6737: PUSH
6738: LD_VAR 0 4
6742: ARRAY
6743: PPUSH
6744: CALL_OW 52
// y = y + 1 ;
6748: LD_ADDR_VAR 0 4
6752: PUSH
6753: LD_VAR 0 4
6757: PUSH
6758: LD_INT 1
6760: PLUS
6761: ST_TO_ADDR
// end ; 2 :
6762: GO 6846
6764: LD_INT 2
6766: DOUBLE
6767: EQUAL
6768: IFTRUE 6772
6770: GO 6787
6772: POP
// PlaceHumanInUnit ( i , NorthLenin ) ; 3 :
6773: LD_VAR 0 2
6777: PPUSH
6778: LD_INT 253
6780: PPUSH
6781: CALL_OW 52
6785: GO 6846
6787: LD_INT 3
6789: DOUBLE
6790: EQUAL
6791: IFTRUE 6795
6793: GO 6816
6795: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
6796: LD_VAR 0 2
6800: PPUSH
6801: LD_VAR 0 6
6805: PUSH
6806: LD_INT 1
6808: ARRAY
6809: PPUSH
6810: CALL_OW 52
6814: GO 6846
6816: LD_INT 4
6818: DOUBLE
6819: EQUAL
6820: IFTRUE 6824
6822: GO 6845
6824: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
6825: LD_VAR 0 2
6829: PPUSH
6830: LD_VAR 0 7
6834: PUSH
6835: LD_INT 1
6837: ARRAY
6838: PPUSH
6839: CALL_OW 52
6843: GO 6846
6845: POP
// end ;
6846: GO 6676
6848: POP
6849: POP
// SouthLeninCrew := [ ] ;
6850: LD_ADDR_EXP 8
6854: PUSH
6855: EMPTY
6856: ST_TO_ADDR
// for i = 1 to 6 do
6857: LD_ADDR_VAR 0 2
6861: PUSH
6862: DOUBLE
6863: LD_INT 1
6865: DEC
6866: ST_TO_ADDR
6867: LD_INT 6
6869: PUSH
6870: FOR_TO
6871: IFFALSE 6926
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6873: LD_INT 0
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: CALL_OW 12
6883: PPUSH
6884: LD_INT 7
6886: PUSH
6887: LD_INT 5
6889: PUSH
6890: LD_INT 3
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: LD_OWVAR 67
6902: ARRAY
6903: PPUSH
6904: CALL_OW 381
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
6908: LD_ADDR_EXP 8
6912: PUSH
6913: LD_EXP 8
6917: PUSH
6918: CALL_OW 44
6922: ADD
6923: ST_TO_ADDR
// end ;
6924: GO 6870
6926: POP
6927: POP
// for i = 1 to 1 do
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: DOUBLE
6934: LD_INT 1
6936: DEC
6937: ST_TO_ADDR
6938: LD_INT 1
6940: PUSH
6941: FOR_TO
6942: IFFALSE 6997
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6944: LD_INT 0
6946: PPUSH
6947: LD_INT 1
6949: PPUSH
6950: CALL_OW 12
6954: PPUSH
6955: LD_INT 7
6957: PUSH
6958: LD_INT 5
6960: PUSH
6961: LD_INT 3
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: LIST
6968: PUSH
6969: LD_OWVAR 67
6973: ARRAY
6974: PPUSH
6975: CALL_OW 382
// SouthLeninEngineers := SouthLeninEngineers ^ CreateHuman ;
6979: LD_ADDR_EXP 73
6983: PUSH
6984: LD_EXP 73
6988: PUSH
6989: CALL_OW 44
6993: ADD
6994: ST_TO_ADDR
// end ;
6995: GO 6941
6997: POP
6998: POP
// SouthLeninCrew := SouthLeninCrew ^ SouthLeninEngineers ;
6999: LD_ADDR_EXP 8
7003: PUSH
7004: LD_EXP 8
7008: PUSH
7009: LD_EXP 73
7013: ADD
7014: ST_TO_ADDR
// for i = 1 to 1 do
7015: LD_ADDR_VAR 0 2
7019: PUSH
7020: DOUBLE
7021: LD_INT 1
7023: DEC
7024: ST_TO_ADDR
7025: LD_INT 1
7027: PUSH
7028: FOR_TO
7029: IFFALSE 7084
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7031: LD_INT 0
7033: PPUSH
7034: LD_INT 1
7036: PPUSH
7037: CALL_OW 12
7041: PPUSH
7042: LD_INT 7
7044: PUSH
7045: LD_INT 5
7047: PUSH
7048: LD_INT 3
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: LIST
7055: PUSH
7056: LD_OWVAR 67
7060: ARRAY
7061: PPUSH
7062: CALL_OW 383
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
7066: LD_ADDR_EXP 8
7070: PUSH
7071: LD_EXP 8
7075: PUSH
7076: CALL_OW 44
7080: ADD
7081: ST_TO_ADDR
// end ;
7082: GO 7028
7084: POP
7085: POP
// for i = 1 to 1 do
7086: LD_ADDR_VAR 0 2
7090: PUSH
7091: DOUBLE
7092: LD_INT 1
7094: DEC
7095: ST_TO_ADDR
7096: LD_INT 1
7098: PUSH
7099: FOR_TO
7100: IFFALSE 7155
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7102: LD_INT 0
7104: PPUSH
7105: LD_INT 1
7107: PPUSH
7108: CALL_OW 12
7112: PPUSH
7113: LD_INT 7
7115: PUSH
7116: LD_INT 5
7118: PUSH
7119: LD_INT 3
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: PUSH
7127: LD_OWVAR 67
7131: ARRAY
7132: PPUSH
7133: CALL_OW 384
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
7137: LD_ADDR_EXP 8
7141: PUSH
7142: LD_EXP 8
7146: PUSH
7147: CALL_OW 44
7151: ADD
7152: ST_TO_ADDR
// end ;
7153: GO 7099
7155: POP
7156: POP
// turrety := FilterUnitsInArea ( SouthLeninArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
7157: LD_ADDR_VAR 0 5
7161: PUSH
7162: LD_INT 4
7164: PPUSH
7165: LD_INT 2
7167: PUSH
7168: LD_INT 30
7170: PUSH
7171: LD_INT 31
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 30
7180: PUSH
7181: LD_INT 32
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: PPUSH
7193: CALL_OW 70
7197: ST_TO_ADDR
// lab := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_lab_full ] ] ) ;
7198: LD_ADDR_VAR 0 7
7202: PUSH
7203: LD_INT 4
7205: PPUSH
7206: LD_INT 30
7208: PUSH
7209: LD_INT 8
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: PPUSH
7219: CALL_OW 70
7223: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_factory ] ] ) ;
7224: LD_ADDR_VAR 0 6
7228: PUSH
7229: LD_INT 4
7231: PPUSH
7232: LD_INT 30
7234: PUSH
7235: LD_INT 3
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: PPUSH
7245: CALL_OW 70
7249: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_barracks ] ] ) ;
7250: LD_ADDR_VAR 0 8
7254: PUSH
7255: LD_INT 4
7257: PPUSH
7258: LD_INT 30
7260: PUSH
7261: LD_INT 5
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: PPUSH
7271: CALL_OW 70
7275: ST_TO_ADDR
// y := 1 ;
7276: LD_ADDR_VAR 0 4
7280: PUSH
7281: LD_INT 1
7283: ST_TO_ADDR
// z := 1 ;
7284: LD_ADDR_VAR 0 3
7288: PUSH
7289: LD_INT 1
7291: ST_TO_ADDR
// for i in SouthLeninCrew do
7292: LD_ADDR_VAR 0 2
7296: PUSH
7297: LD_EXP 8
7301: PUSH
7302: FOR_IN
7303: IFFALSE 7474
// begin case GetClass ( i ) of 1 :
7305: LD_VAR 0 2
7309: PPUSH
7310: CALL_OW 257
7314: PUSH
7315: LD_INT 1
7317: DOUBLE
7318: EQUAL
7319: IFTRUE 7323
7321: GO 7390
7323: POP
// begin if y > 6 then
7324: LD_VAR 0 4
7328: PUSH
7329: LD_INT 6
7331: GREATER
7332: IFFALSE 7354
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
7334: LD_VAR 0 2
7338: PPUSH
7339: LD_VAR 0 8
7343: PUSH
7344: LD_INT 1
7346: ARRAY
7347: PPUSH
7348: CALL_OW 52
7352: GO 7374
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
7354: LD_VAR 0 2
7358: PPUSH
7359: LD_VAR 0 5
7363: PUSH
7364: LD_VAR 0 4
7368: ARRAY
7369: PPUSH
7370: CALL_OW 52
// y = y + 1 ;
7374: LD_ADDR_VAR 0 4
7378: PUSH
7379: LD_VAR 0 4
7383: PUSH
7384: LD_INT 1
7386: PLUS
7387: ST_TO_ADDR
// end ; 2 :
7388: GO 7472
7390: LD_INT 2
7392: DOUBLE
7393: EQUAL
7394: IFTRUE 7398
7396: GO 7413
7398: POP
// PlaceHumanInUnit ( i , SouthLenin ) ; 3 :
7399: LD_VAR 0 2
7403: PPUSH
7404: LD_INT 218
7406: PPUSH
7407: CALL_OW 52
7411: GO 7472
7413: LD_INT 3
7415: DOUBLE
7416: EQUAL
7417: IFTRUE 7421
7419: GO 7442
7421: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
7422: LD_VAR 0 2
7426: PPUSH
7427: LD_VAR 0 6
7431: PUSH
7432: LD_INT 1
7434: ARRAY
7435: PPUSH
7436: CALL_OW 52
7440: GO 7472
7442: LD_INT 4
7444: DOUBLE
7445: EQUAL
7446: IFTRUE 7450
7448: GO 7471
7450: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
7451: LD_VAR 0 2
7455: PPUSH
7456: LD_VAR 0 7
7460: PUSH
7461: LD_INT 1
7463: ARRAY
7464: PPUSH
7465: CALL_OW 52
7469: GO 7472
7471: POP
// end ;
7472: GO 7302
7474: POP
7475: POP
// BukovCrew := [ ] ;
7476: LD_ADDR_EXP 5
7480: PUSH
7481: EMPTY
7482: ST_TO_ADDR
// for i = 1 to 6 do
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: DOUBLE
7489: LD_INT 1
7491: DEC
7492: ST_TO_ADDR
7493: LD_INT 6
7495: PUSH
7496: FOR_TO
7497: IFFALSE 7552
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7499: LD_INT 0
7501: PPUSH
7502: LD_INT 1
7504: PPUSH
7505: CALL_OW 12
7509: PPUSH
7510: LD_INT 7
7512: PUSH
7513: LD_INT 5
7515: PUSH
7516: LD_INT 3
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: PUSH
7524: LD_OWVAR 67
7528: ARRAY
7529: PPUSH
7530: CALL_OW 381
// BukovCrew := BukovCrew ^ CreateHuman ;
7534: LD_ADDR_EXP 5
7538: PUSH
7539: LD_EXP 5
7543: PUSH
7544: CALL_OW 44
7548: ADD
7549: ST_TO_ADDR
// end ;
7550: GO 7496
7552: POP
7553: POP
// for i = 1 to 2 do
7554: LD_ADDR_VAR 0 2
7558: PUSH
7559: DOUBLE
7560: LD_INT 1
7562: DEC
7563: ST_TO_ADDR
7564: LD_INT 2
7566: PUSH
7567: FOR_TO
7568: IFFALSE 7623
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7570: LD_INT 0
7572: PPUSH
7573: LD_INT 1
7575: PPUSH
7576: CALL_OW 12
7580: PPUSH
7581: LD_INT 7
7583: PUSH
7584: LD_INT 5
7586: PUSH
7587: LD_INT 3
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: LIST
7594: PUSH
7595: LD_OWVAR 67
7599: ARRAY
7600: PPUSH
7601: CALL_OW 383
// BukovCrew := BukovCrew ^ CreateHuman ;
7605: LD_ADDR_EXP 5
7609: PUSH
7610: LD_EXP 5
7614: PUSH
7615: CALL_OW 44
7619: ADD
7620: ST_TO_ADDR
// end ;
7621: GO 7567
7623: POP
7624: POP
// for i = 1 to 2 do
7625: LD_ADDR_VAR 0 2
7629: PUSH
7630: DOUBLE
7631: LD_INT 1
7633: DEC
7634: ST_TO_ADDR
7635: LD_INT 2
7637: PUSH
7638: FOR_TO
7639: IFFALSE 7694
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7641: LD_INT 0
7643: PPUSH
7644: LD_INT 1
7646: PPUSH
7647: CALL_OW 12
7651: PPUSH
7652: LD_INT 7
7654: PUSH
7655: LD_INT 5
7657: PUSH
7658: LD_INT 3
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: PUSH
7666: LD_OWVAR 67
7670: ARRAY
7671: PPUSH
7672: CALL_OW 384
// BukovCrew := BukovCrew ^ CreateHuman ;
7676: LD_ADDR_EXP 5
7680: PUSH
7681: LD_EXP 5
7685: PUSH
7686: CALL_OW 44
7690: ADD
7691: ST_TO_ADDR
// end ;
7692: GO 7638
7694: POP
7695: POP
// turrety := FilterUnitsInArea ( BukovBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
7696: LD_ADDR_VAR 0 5
7700: PUSH
7701: LD_INT 7
7703: PPUSH
7704: LD_INT 2
7706: PUSH
7707: LD_INT 30
7709: PUSH
7710: LD_INT 31
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: LD_INT 30
7719: PUSH
7720: LD_INT 32
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: LIST
7731: PPUSH
7732: CALL_OW 70
7736: ST_TO_ADDR
// lab := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_lab_half ] ] ) ;
7737: LD_ADDR_VAR 0 7
7741: PUSH
7742: LD_INT 7
7744: PPUSH
7745: LD_INT 30
7747: PUSH
7748: LD_INT 7
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: EMPTY
7756: LIST
7757: PPUSH
7758: CALL_OW 70
7762: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_factory ] ] ) ;
7763: LD_ADDR_VAR 0 6
7767: PUSH
7768: LD_INT 7
7770: PPUSH
7771: LD_INT 30
7773: PUSH
7774: LD_INT 3
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: PPUSH
7784: CALL_OW 70
7788: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_armoury ] ] ) ;
7789: LD_ADDR_VAR 0 8
7793: PUSH
7794: LD_INT 7
7796: PPUSH
7797: LD_INT 30
7799: PUSH
7800: LD_INT 4
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: PPUSH
7810: CALL_OW 70
7814: ST_TO_ADDR
// y := 1 ;
7815: LD_ADDR_VAR 0 4
7819: PUSH
7820: LD_INT 1
7822: ST_TO_ADDR
// z := 1 ;
7823: LD_ADDR_VAR 0 3
7827: PUSH
7828: LD_INT 1
7830: ST_TO_ADDR
// for i in BukovCrew do
7831: LD_ADDR_VAR 0 2
7835: PUSH
7836: LD_EXP 5
7840: PUSH
7841: FOR_IN
7842: IFFALSE 7990
// begin case GetClass ( i ) of 1 :
7844: LD_VAR 0 2
7848: PPUSH
7849: CALL_OW 257
7853: PUSH
7854: LD_INT 1
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7929
7862: POP
// begin if y > 4 then
7863: LD_VAR 0 4
7867: PUSH
7868: LD_INT 4
7870: GREATER
7871: IFFALSE 7893
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
7873: LD_VAR 0 2
7877: PPUSH
7878: LD_VAR 0 8
7882: PUSH
7883: LD_INT 1
7885: ARRAY
7886: PPUSH
7887: CALL_OW 52
7891: GO 7913
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
7893: LD_VAR 0 2
7897: PPUSH
7898: LD_VAR 0 5
7902: PUSH
7903: LD_VAR 0 4
7907: ARRAY
7908: PPUSH
7909: CALL_OW 52
// y = y + 1 ;
7913: LD_ADDR_VAR 0 4
7917: PUSH
7918: LD_VAR 0 4
7922: PUSH
7923: LD_INT 1
7925: PLUS
7926: ST_TO_ADDR
// end ; 3 :
7927: GO 7988
7929: LD_INT 3
7931: DOUBLE
7932: EQUAL
7933: IFTRUE 7937
7935: GO 7958
7937: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
7938: LD_VAR 0 2
7942: PPUSH
7943: LD_VAR 0 6
7947: PUSH
7948: LD_INT 1
7950: ARRAY
7951: PPUSH
7952: CALL_OW 52
7956: GO 7988
7958: LD_INT 4
7960: DOUBLE
7961: EQUAL
7962: IFTRUE 7966
7964: GO 7987
7966: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
7967: LD_VAR 0 2
7971: PPUSH
7972: LD_VAR 0 7
7976: PUSH
7977: LD_INT 1
7979: ARRAY
7980: PPUSH
7981: CALL_OW 52
7985: GO 7988
7987: POP
// end ;
7988: GO 7841
7990: POP
7991: POP
// CheckpointsCrew := [ ] ;
7992: LD_ADDR_EXP 9
7996: PUSH
7997: EMPTY
7998: ST_TO_ADDR
// for i = 1 to 6 do
7999: LD_ADDR_VAR 0 2
8003: PUSH
8004: DOUBLE
8005: LD_INT 1
8007: DEC
8008: ST_TO_ADDR
8009: LD_INT 6
8011: PUSH
8012: FOR_TO
8013: IFFALSE 8068
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8015: LD_INT 0
8017: PPUSH
8018: LD_INT 1
8020: PPUSH
8021: CALL_OW 12
8025: PPUSH
8026: LD_INT 7
8028: PUSH
8029: LD_INT 5
8031: PUSH
8032: LD_INT 3
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: LIST
8039: PUSH
8040: LD_OWVAR 67
8044: ARRAY
8045: PPUSH
8046: CALL_OW 381
// CheckpointsCrew := CheckpointsCrew ^ CreateHuman ;
8050: LD_ADDR_EXP 9
8054: PUSH
8055: LD_EXP 9
8059: PUSH
8060: CALL_OW 44
8064: ADD
8065: ST_TO_ADDR
// end ;
8066: GO 8012
8068: POP
8069: POP
// turrety := FilterUnitsInArea ( Checkpoints , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
8070: LD_ADDR_VAR 0 5
8074: PUSH
8075: LD_INT 6
8077: PPUSH
8078: LD_INT 2
8080: PUSH
8081: LD_INT 30
8083: PUSH
8084: LD_INT 31
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: PUSH
8091: LD_INT 30
8093: PUSH
8094: LD_INT 32
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 70
8110: ST_TO_ADDR
// y := 1 ;
8111: LD_ADDR_VAR 0 4
8115: PUSH
8116: LD_INT 1
8118: ST_TO_ADDR
// for i in CheckpointsCrew do
8119: LD_ADDR_VAR 0 2
8123: PUSH
8124: LD_EXP 9
8128: PUSH
8129: FOR_IN
8130: IFFALSE 8190
// begin case GetClass ( i ) of 1 :
8132: LD_VAR 0 2
8136: PPUSH
8137: CALL_OW 257
8141: PUSH
8142: LD_INT 1
8144: DOUBLE
8145: EQUAL
8146: IFTRUE 8150
8148: GO 8187
8150: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
8151: LD_VAR 0 2
8155: PPUSH
8156: LD_VAR 0 5
8160: PUSH
8161: LD_VAR 0 4
8165: ARRAY
8166: PPUSH
8167: CALL_OW 52
// y = y + 1 ;
8171: LD_ADDR_VAR 0 4
8175: PUSH
8176: LD_VAR 0 4
8180: PUSH
8181: LD_INT 1
8183: PLUS
8184: ST_TO_ADDR
// end ; end ;
8185: GO 8188
8187: POP
// end ;
8188: GO 8129
8190: POP
8191: POP
// GaydarCrew := [ ] ;
8192: LD_ADDR_EXP 6
8196: PUSH
8197: EMPTY
8198: ST_TO_ADDR
// for i = 1 to 6 do
8199: LD_ADDR_VAR 0 2
8203: PUSH
8204: DOUBLE
8205: LD_INT 1
8207: DEC
8208: ST_TO_ADDR
8209: LD_INT 6
8211: PUSH
8212: FOR_TO
8213: IFFALSE 8268
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8215: LD_INT 0
8217: PPUSH
8218: LD_INT 1
8220: PPUSH
8221: CALL_OW 12
8225: PPUSH
8226: LD_INT 7
8228: PUSH
8229: LD_INT 5
8231: PUSH
8232: LD_INT 3
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: LIST
8239: PUSH
8240: LD_OWVAR 67
8244: ARRAY
8245: PPUSH
8246: CALL_OW 381
// GaydarCrew := GaydarCrew ^ CreateHuman ;
8250: LD_ADDR_EXP 6
8254: PUSH
8255: LD_EXP 6
8259: PUSH
8260: CALL_OW 44
8264: ADD
8265: ST_TO_ADDR
// end ;
8266: GO 8212
8268: POP
8269: POP
// for i = 1 to 2 do
8270: LD_ADDR_VAR 0 2
8274: PUSH
8275: DOUBLE
8276: LD_INT 1
8278: DEC
8279: ST_TO_ADDR
8280: LD_INT 2
8282: PUSH
8283: FOR_TO
8284: IFFALSE 8339
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8286: LD_INT 0
8288: PPUSH
8289: LD_INT 1
8291: PPUSH
8292: CALL_OW 12
8296: PPUSH
8297: LD_INT 7
8299: PUSH
8300: LD_INT 5
8302: PUSH
8303: LD_INT 3
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: LIST
8310: PUSH
8311: LD_OWVAR 67
8315: ARRAY
8316: PPUSH
8317: CALL_OW 382
// GaydarCrew := GaydarCrew ^ CreateHuman ;
8321: LD_ADDR_EXP 6
8325: PUSH
8326: LD_EXP 6
8330: PUSH
8331: CALL_OW 44
8335: ADD
8336: ST_TO_ADDR
// end ;
8337: GO 8283
8339: POP
8340: POP
// turrety := FilterUnitsInArea ( MiddleCheckPoint , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
8341: LD_ADDR_VAR 0 5
8345: PUSH
8346: LD_INT 1
8348: PPUSH
8349: LD_INT 2
8351: PUSH
8352: LD_INT 30
8354: PUSH
8355: LD_INT 31
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PUSH
8362: LD_INT 30
8364: PUSH
8365: LD_INT 32
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: LIST
8376: PPUSH
8377: CALL_OW 70
8381: ST_TO_ADDR
// y := 1 ;
8382: LD_ADDR_VAR 0 4
8386: PUSH
8387: LD_INT 1
8389: ST_TO_ADDR
// for i in GaydarCrew do
8390: LD_ADDR_VAR 0 2
8394: PUSH
8395: LD_EXP 6
8399: PUSH
8400: FOR_IN
8401: IFFALSE 8484
// begin case GetClass ( i ) of 1 :
8403: LD_VAR 0 2
8407: PPUSH
8408: CALL_OW 257
8412: PUSH
8413: LD_INT 1
8415: DOUBLE
8416: EQUAL
8417: IFTRUE 8421
8419: GO 8458
8421: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
8422: LD_VAR 0 2
8426: PPUSH
8427: LD_VAR 0 5
8431: PUSH
8432: LD_VAR 0 4
8436: ARRAY
8437: PPUSH
8438: CALL_OW 52
// y = y + 1 ;
8442: LD_ADDR_VAR 0 4
8446: PUSH
8447: LD_VAR 0 4
8451: PUSH
8452: LD_INT 1
8454: PLUS
8455: ST_TO_ADDR
// end ; 2 :
8456: GO 8482
8458: LD_INT 2
8460: DOUBLE
8461: EQUAL
8462: IFTRUE 8466
8464: GO 8481
8466: POP
// PlaceHumanInUnit ( i , GaydarDepot ) ; end ;
8467: LD_VAR 0 2
8471: PPUSH
8472: LD_INT 144
8474: PPUSH
8475: CALL_OW 52
8479: GO 8482
8481: POP
// end ;
8482: GO 8400
8484: POP
8485: POP
// SouthCheckpointCrew := [ ] ;
8486: LD_ADDR_EXP 10
8490: PUSH
8491: EMPTY
8492: ST_TO_ADDR
// for i = 1 to 4 do
8493: LD_ADDR_VAR 0 2
8497: PUSH
8498: DOUBLE
8499: LD_INT 1
8501: DEC
8502: ST_TO_ADDR
8503: LD_INT 4
8505: PUSH
8506: FOR_TO
8507: IFFALSE 8562
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8509: LD_INT 0
8511: PPUSH
8512: LD_INT 1
8514: PPUSH
8515: CALL_OW 12
8519: PPUSH
8520: LD_INT 7
8522: PUSH
8523: LD_INT 5
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: LIST
8533: PUSH
8534: LD_OWVAR 67
8538: ARRAY
8539: PPUSH
8540: CALL_OW 381
// SouthCheckpointCrew := SouthCheckpointCrew ^ CreateHuman ;
8544: LD_ADDR_EXP 10
8548: PUSH
8549: LD_EXP 10
8553: PUSH
8554: CALL_OW 44
8558: ADD
8559: ST_TO_ADDR
// end ;
8560: GO 8506
8562: POP
8563: POP
// for i = 1 to 2 do
8564: LD_ADDR_VAR 0 2
8568: PUSH
8569: DOUBLE
8570: LD_INT 1
8572: DEC
8573: ST_TO_ADDR
8574: LD_INT 2
8576: PUSH
8577: FOR_TO
8578: IFFALSE 8633
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8580: LD_INT 0
8582: PPUSH
8583: LD_INT 1
8585: PPUSH
8586: CALL_OW 12
8590: PPUSH
8591: LD_INT 7
8593: PUSH
8594: LD_INT 5
8596: PUSH
8597: LD_INT 3
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: LD_OWVAR 67
8609: ARRAY
8610: PPUSH
8611: CALL_OW 382
// SouthCheckpointCrew := SouthCheckpointCrew ^ CreateHuman ;
8615: LD_ADDR_EXP 10
8619: PUSH
8620: LD_EXP 10
8624: PUSH
8625: CALL_OW 44
8629: ADD
8630: ST_TO_ADDR
// end ;
8631: GO 8577
8633: POP
8634: POP
// turrety := FilterUnitsInArea ( SouthCheckpoint , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
8635: LD_ADDR_VAR 0 5
8639: PUSH
8640: LD_INT 2
8642: PPUSH
8643: LD_INT 2
8645: PUSH
8646: LD_INT 30
8648: PUSH
8649: LD_INT 31
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: PUSH
8656: LD_INT 30
8658: PUSH
8659: LD_INT 32
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: PPUSH
8671: CALL_OW 70
8675: ST_TO_ADDR
// y := 1 ;
8676: LD_ADDR_VAR 0 4
8680: PUSH
8681: LD_INT 1
8683: ST_TO_ADDR
// for i in SouthCheckpointCrew do
8684: LD_ADDR_VAR 0 2
8688: PUSH
8689: LD_EXP 10
8693: PUSH
8694: FOR_IN
8695: IFFALSE 8778
// begin case GetClass ( i ) of 1 :
8697: LD_VAR 0 2
8701: PPUSH
8702: CALL_OW 257
8706: PUSH
8707: LD_INT 1
8709: DOUBLE
8710: EQUAL
8711: IFTRUE 8715
8713: GO 8752
8715: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
8716: LD_VAR 0 2
8720: PPUSH
8721: LD_VAR 0 5
8725: PUSH
8726: LD_VAR 0 4
8730: ARRAY
8731: PPUSH
8732: CALL_OW 52
// y = y + 1 ;
8736: LD_ADDR_VAR 0 4
8740: PUSH
8741: LD_VAR 0 4
8745: PUSH
8746: LD_INT 1
8748: PLUS
8749: ST_TO_ADDR
// end ; 2 :
8750: GO 8776
8752: LD_INT 2
8754: DOUBLE
8755: EQUAL
8756: IFTRUE 8760
8758: GO 8775
8760: POP
// PlaceHumanInUnit ( i , SouthDepot ) ; end ;
8761: LD_VAR 0 2
8765: PPUSH
8766: LD_INT 193
8768: PPUSH
8769: CALL_OW 52
8773: GO 8776
8775: POP
// end ;
8776: GO 8694
8778: POP
8779: POP
// end ; end_of_file
8780: LD_VAR 0 1
8784: RET
// every 0 0$1 trigger IsDead ( YakotichBase ) or IsDead ( NorthLenin ) or IsDead ( SouthLenin ) do
8785: LD_INT 312
8787: PPUSH
8788: CALL_OW 301
8792: PUSH
8793: LD_INT 253
8795: PPUSH
8796: CALL_OW 301
8800: OR
8801: PUSH
8802: LD_INT 218
8804: PPUSH
8805: CALL_OW 301
8809: OR
8810: IFFALSE 8822
8812: GO 8814
8814: DISABLE
// begin YouLost ( DepotDead ) ;
8815: LD_STRING DepotDead
8817: PPUSH
8818: CALL_OW 104
// end ;
8822: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 3 and s2 = 6 ) or ( s2 = 6 and s1 = 3 ) or ( s2 = 4 and s1 = 3 ) or ( s2 = 3 and s1 = 4 ) then
8823: LD_VAR 0 1
8827: PUSH
8828: LD_INT 3
8830: EQUAL
8831: PUSH
8832: LD_VAR 0 2
8836: PUSH
8837: LD_INT 6
8839: EQUAL
8840: AND
8841: PUSH
8842: LD_VAR 0 2
8846: PUSH
8847: LD_INT 6
8849: EQUAL
8850: PUSH
8851: LD_VAR 0 1
8855: PUSH
8856: LD_INT 3
8858: EQUAL
8859: AND
8860: OR
8861: PUSH
8862: LD_VAR 0 2
8866: PUSH
8867: LD_INT 4
8869: EQUAL
8870: PUSH
8871: LD_VAR 0 1
8875: PUSH
8876: LD_INT 3
8878: EQUAL
8879: AND
8880: OR
8881: PUSH
8882: LD_VAR 0 2
8886: PUSH
8887: LD_INT 3
8889: EQUAL
8890: PUSH
8891: LD_VAR 0 1
8895: PUSH
8896: LD_INT 4
8898: EQUAL
8899: AND
8900: OR
8901: IFFALSE 8910
// begin YouLost ( AllyAttacked ) ;
8903: LD_STRING AllyAttacked
8905: PPUSH
8906: CALL_OW 104
// end ; end ;
8910: PPOPN 2
8912: END
// on BuildingCaptured ( cb , bfs , cu ) do begin if GetSide ( cb ) = 6 and GetSide ( cu ) = 3 then
8913: LD_VAR 0 1
8917: PPUSH
8918: CALL_OW 255
8922: PUSH
8923: LD_INT 6
8925: EQUAL
8926: PUSH
8927: LD_VAR 0 3
8931: PPUSH
8932: CALL_OW 255
8936: PUSH
8937: LD_INT 3
8939: EQUAL
8940: AND
8941: IFFALSE 8950
// begin YouLost ( AllyAttacked ) ;
8943: LD_STRING AllyAttacked
8945: PPUSH
8946: CALL_OW 104
// end ; end ;
8950: PPOPN 3
8952: END
// export ru_bul , ru2_bul ; on UnitDestroyed ( un ) do begin if un = Yakotich then
8953: LD_VAR 0 1
8957: PUSH
8958: LD_EXP 13
8962: EQUAL
8963: IFFALSE 8972
// YouLost ( YakotichDead ) ;
8965: LD_STRING YakotichDead
8967: PPUSH
8968: CALL_OW 104
// if un = Mietek then
8972: LD_VAR 0 1
8976: PUSH
8977: LD_EXP 14
8981: EQUAL
8982: IFFALSE 8991
// YouLost ( MietekDead ) ;
8984: LD_STRING MietekDead
8986: PPUSH
8987: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
8991: LD_VAR 0 1
8995: PUSH
8996: LD_INT 22
8998: PUSH
8999: LD_INT 3
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: LD_INT 3
9008: PUSH
9009: LD_INT 23
9011: PUSH
9012: LD_INT 0
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 21
9025: PUSH
9026: LD_INT 1
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: LIST
9037: PPUSH
9038: CALL_OW 69
9042: IN
9043: IFFALSE 9052
// YouLost ( PeopleDead ) ;
9045: LD_STRING PeopleDead
9047: PPUSH
9048: CALL_OW 104
// end ;
9052: PPOPN 1
9054: END
// on BuildingStarted ( b , builder ) do var x , y ;
9055: LD_INT 0
9057: PPUSH
9058: PPUSH
// begin if GetBType ( b ) = b_bunker or GetBType ( b ) = b_breastwork and GetSide ( b ) = 4 then
9059: LD_VAR 0 1
9063: PPUSH
9064: CALL_OW 266
9068: PUSH
9069: LD_INT 32
9071: EQUAL
9072: PUSH
9073: LD_VAR 0 1
9077: PPUSH
9078: CALL_OW 266
9082: PUSH
9083: LD_INT 31
9085: EQUAL
9086: PUSH
9087: LD_VAR 0 1
9091: PPUSH
9092: CALL_OW 255
9096: PUSH
9097: LD_INT 4
9099: EQUAL
9100: AND
9101: OR
9102: IFFALSE 9191
// begin x = GetX ( b ) ;
9104: LD_ADDR_VAR 0 3
9108: PUSH
9109: LD_VAR 0 1
9113: PPUSH
9114: CALL_OW 250
9118: ST_TO_ADDR
// y = GetY ( b ) ;
9119: LD_ADDR_VAR 0 4
9123: PUSH
9124: LD_VAR 0 1
9128: PPUSH
9129: CALL_OW 251
9133: ST_TO_ADDR
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , x , y ) ;
9134: LD_INT 22
9136: PUSH
9137: LD_INT 4
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PUSH
9144: LD_INT 25
9146: PUSH
9147: LD_INT 1
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: PUSH
9154: LD_INT 3
9156: PUSH
9157: LD_INT 54
9159: PUSH
9160: EMPTY
9161: LIST
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: LIST
9171: PPUSH
9172: CALL_OW 69
9176: PPUSH
9177: LD_VAR 0 3
9181: PPUSH
9182: LD_VAR 0 4
9186: PPUSH
9187: CALL_OW 171
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 4 then
9191: LD_VAR 0 1
9195: PPUSH
9196: CALL_OW 266
9200: PUSH
9201: LD_INT 6
9203: EQUAL
9204: PUSH
9205: LD_VAR 0 1
9209: PPUSH
9210: CALL_OW 255
9214: PUSH
9215: LD_INT 4
9217: EQUAL
9218: AND
9219: IFFALSE 9308
// begin x = GetX ( b ) ;
9221: LD_ADDR_VAR 0 3
9225: PUSH
9226: LD_VAR 0 1
9230: PPUSH
9231: CALL_OW 250
9235: ST_TO_ADDR
// y = GetY ( b ) ;
9236: LD_ADDR_VAR 0 4
9240: PUSH
9241: LD_VAR 0 1
9245: PPUSH
9246: CALL_OW 251
9250: ST_TO_ADDR
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) , x , y ) ;
9251: LD_INT 22
9253: PUSH
9254: LD_INT 4
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: PUSH
9261: LD_INT 25
9263: PUSH
9264: LD_INT 4
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: LD_INT 3
9273: PUSH
9274: LD_INT 54
9276: PUSH
9277: EMPTY
9278: LIST
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: EMPTY
9285: LIST
9286: LIST
9287: LIST
9288: PPUSH
9289: CALL_OW 69
9293: PPUSH
9294: LD_VAR 0 3
9298: PPUSH
9299: LD_VAR 0 4
9303: PPUSH
9304: CALL_OW 171
// end ; if GetBType ( b ) = b_workshop and GetSide ( b ) = 4 then
9308: LD_VAR 0 1
9312: PPUSH
9313: CALL_OW 266
9317: PUSH
9318: LD_INT 2
9320: EQUAL
9321: PUSH
9322: LD_VAR 0 1
9326: PPUSH
9327: CALL_OW 255
9331: PUSH
9332: LD_INT 4
9334: EQUAL
9335: AND
9336: IFFALSE 9425
// begin x = GetX ( b ) ;
9338: LD_ADDR_VAR 0 3
9342: PUSH
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 250
9352: ST_TO_ADDR
// y = GetY ( b ) ;
9353: LD_ADDR_VAR 0 4
9357: PUSH
9358: LD_VAR 0 1
9362: PPUSH
9363: CALL_OW 251
9367: ST_TO_ADDR
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 3 ] , [ f_not , [ f_inside ] ] ] ) , x , y ) ;
9368: LD_INT 22
9370: PUSH
9371: LD_INT 4
9373: PUSH
9374: EMPTY
9375: LIST
9376: LIST
9377: PUSH
9378: LD_INT 25
9380: PUSH
9381: LD_INT 3
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: PUSH
9388: LD_INT 3
9390: PUSH
9391: LD_INT 54
9393: PUSH
9394: EMPTY
9395: LIST
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: PPUSH
9406: CALL_OW 69
9410: PPUSH
9411: LD_VAR 0 3
9415: PPUSH
9416: LD_VAR 0 4
9420: PPUSH
9421: CALL_OW 171
// end ; end ;
9425: PPOPN 4
9427: END
// export BierezovDepot , BierezovArmoury ; on BuildingComplete ( b ) do var i ;
9428: LD_INT 0
9430: PPUSH
// begin if GetBType ( b ) = b_bunker and GetSide ( b ) = 6 and IsInArea ( b , NorthLeninArea ) then
9431: LD_VAR 0 1
9435: PPUSH
9436: CALL_OW 266
9440: PUSH
9441: LD_INT 32
9443: EQUAL
9444: PUSH
9445: LD_VAR 0 1
9449: PPUSH
9450: CALL_OW 255
9454: PUSH
9455: LD_INT 6
9457: EQUAL
9458: AND
9459: PUSH
9460: LD_VAR 0 1
9464: PPUSH
9465: LD_INT 5
9467: PPUSH
9468: CALL_OW 308
9472: AND
9473: IFFALSE 9495
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
9475: LD_VAR 0 1
9479: PPUSH
9480: LD_INT 43
9482: PPUSH
9483: LD_INT 46
9485: PPUSH
9486: CALL_OW 12
9490: PPUSH
9491: CALL_OW 208
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 266
9504: PUSH
9505: LD_INT 32
9507: EQUAL
9508: PUSH
9509: LD_VAR 0 1
9513: PPUSH
9514: CALL_OW 255
9518: PUSH
9519: LD_INT 4
9521: EQUAL
9522: AND
9523: PUSH
9524: LD_VAR 0 1
9528: PPUSH
9529: LD_INT 27
9531: PPUSH
9532: CALL_OW 308
9536: AND
9537: IFFALSE 9559
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
9539: LD_VAR 0 1
9543: PPUSH
9544: LD_INT 43
9546: PPUSH
9547: LD_INT 46
9549: PPUSH
9550: CALL_OW 12
9554: PPUSH
9555: CALL_OW 208
// end ; if GetBType ( b ) = b_bunker or GetBType ( b ) = b_breastwork and GetSide ( b ) = 4 then
9559: LD_VAR 0 1
9563: PPUSH
9564: CALL_OW 266
9568: PUSH
9569: LD_INT 32
9571: EQUAL
9572: PUSH
9573: LD_VAR 0 1
9577: PPUSH
9578: CALL_OW 266
9582: PUSH
9583: LD_INT 31
9585: EQUAL
9586: PUSH
9587: LD_VAR 0 1
9591: PPUSH
9592: CALL_OW 255
9596: PUSH
9597: LD_INT 4
9599: EQUAL
9600: AND
9601: OR
9602: IFFALSE 9662
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff Bierezov , b ) ;
9604: LD_INT 22
9606: PUSH
9607: LD_INT 4
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 25
9616: PUSH
9617: LD_INT 1
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 3
9626: PUSH
9627: LD_INT 54
9629: PUSH
9630: EMPTY
9631: LIST
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: PPUSH
9642: CALL_OW 69
9646: PUSH
9647: LD_EXP 42
9651: DIFF
9652: PPUSH
9653: LD_VAR 0 1
9657: PPUSH
9658: CALL_OW 180
// end ; if GetBType ( b ) = b_depot and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9662: LD_VAR 0 1
9666: PPUSH
9667: CALL_OW 266
9671: PUSH
9672: LD_INT 0
9674: EQUAL
9675: PUSH
9676: LD_VAR 0 1
9680: PPUSH
9681: CALL_OW 255
9685: PUSH
9686: LD_INT 4
9688: EQUAL
9689: AND
9690: PUSH
9691: LD_VAR 0 1
9695: PPUSH
9696: LD_INT 27
9698: PPUSH
9699: CALL_OW 308
9703: AND
9704: IFFALSE 9796
// begin SetBName ( b , zinoviev ) ;
9706: LD_VAR 0 1
9710: PPUSH
9711: LD_STRING zinoviev
9713: PPUSH
9714: CALL_OW 500
// DialogueOn ;
9718: CALL_OW 6
// CenterNowOnUnits ( Bierezov ) ;
9722: LD_EXP 42
9726: PPUSH
9727: CALL_OW 87
// SayRadio ( Bierezov , 4Bierezov-01 ) ;
9731: LD_EXP 42
9735: PPUSH
9736: LD_STRING 4Bierezov-01
9738: PPUSH
9739: CALL_OW 94
// DialogueOff ;
9743: CALL_OW 7
// ComUpgrade ( b ) ;
9747: LD_VAR 0 1
9751: PPUSH
9752: CALL_OW 146
// SetResourceType ( GetBase ( b ) , mat_cans , 2500 ) ;
9756: LD_VAR 0 1
9760: PPUSH
9761: CALL_OW 274
9765: PPUSH
9766: LD_INT 1
9768: PPUSH
9769: LD_INT 2500
9771: PPUSH
9772: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 500 ) ;
9776: LD_VAR 0 1
9780: PPUSH
9781: CALL_OW 274
9785: PPUSH
9786: LD_INT 2
9788: PPUSH
9789: LD_INT 500
9791: PPUSH
9792: CALL_OW 277
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9796: LD_VAR 0 1
9800: PPUSH
9801: CALL_OW 266
9805: PUSH
9806: LD_INT 6
9808: EQUAL
9809: PUSH
9810: LD_VAR 0 1
9814: PPUSH
9815: CALL_OW 255
9819: PUSH
9820: LD_INT 4
9822: EQUAL
9823: AND
9824: PUSH
9825: LD_VAR 0 1
9829: PPUSH
9830: LD_INT 27
9832: PPUSH
9833: CALL_OW 308
9837: AND
9838: IFFALSE 9852
// begin ComUpgradeLab ( b , 10 ) ;
9840: LD_VAR 0 1
9844: PPUSH
9845: LD_INT 10
9847: PPUSH
9848: CALL_OW 147
// end ; if GetBType ( b ) = b_workshop and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9852: LD_VAR 0 1
9856: PPUSH
9857: CALL_OW 266
9861: PUSH
9862: LD_INT 2
9864: EQUAL
9865: PUSH
9866: LD_VAR 0 1
9870: PPUSH
9871: CALL_OW 255
9875: PUSH
9876: LD_INT 4
9878: EQUAL
9879: AND
9880: PUSH
9881: LD_VAR 0 1
9885: PPUSH
9886: LD_INT 27
9888: PPUSH
9889: CALL_OW 308
9893: AND
9894: IFFALSE 9905
// begin ComUpgrade ( b ) ;
9896: LD_VAR 0 1
9900: PPUSH
9901: CALL_OW 146
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 6 and IsInArea ( b , SouthLeninArea ) and control_taken_over = false then
9905: LD_VAR 0 1
9909: PPUSH
9910: CALL_OW 266
9914: PUSH
9915: LD_INT 32
9917: EQUAL
9918: PUSH
9919: LD_VAR 0 1
9923: PPUSH
9924: CALL_OW 255
9928: PUSH
9929: LD_INT 6
9931: EQUAL
9932: AND
9933: PUSH
9934: LD_VAR 0 1
9938: PPUSH
9939: LD_INT 4
9941: PPUSH
9942: CALL_OW 308
9946: AND
9947: PUSH
9948: LD_EXP 63
9952: PUSH
9953: LD_INT 0
9955: EQUAL
9956: AND
9957: IFFALSE 9979
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
9959: LD_VAR 0 1
9963: PPUSH
9964: LD_INT 43
9966: PPUSH
9967: LD_INT 46
9969: PPUSH
9970: CALL_OW 12
9974: PPUSH
9975: CALL_OW 208
// end ; if GetBType ( b ) = b_armoury and GetSide ( b ) = 4 then
9979: LD_VAR 0 1
9983: PPUSH
9984: CALL_OW 266
9988: PUSH
9989: LD_INT 4
9991: EQUAL
9992: PUSH
9993: LD_VAR 0 1
9997: PPUSH
9998: CALL_OW 255
10002: PUSH
10003: LD_INT 4
10005: EQUAL
10006: AND
10007: IFFALSE 10019
// begin BierezovArmoury = b ;
10009: LD_ADDR_EXP 78
10013: PUSH
10014: LD_VAR 0 1
10018: ST_TO_ADDR
// end ; end ;
10019: PPOPN 2
10021: END
// on UpgradeComplete ( b ) do begin if GetBType ( b ) = b_warehouse and GetSide ( b ) = 4 then
10022: LD_VAR 0 1
10026: PPUSH
10027: CALL_OW 266
10031: PUSH
10032: LD_INT 1
10034: EQUAL
10035: PUSH
10036: LD_VAR 0 1
10040: PPUSH
10041: CALL_OW 255
10045: PUSH
10046: LD_INT 4
10048: EQUAL
10049: AND
10050: IFFALSE 10097
// begin BierezovDepot = b ;
10052: LD_ADDR_EXP 77
10056: PUSH
10057: LD_VAR 0 1
10061: ST_TO_ADDR
// Wait ( 0 0$3 ) ;
10062: LD_INT 105
10064: PPUSH
10065: CALL_OW 67
// ComEnterUnit ( Bierezov , BierezovDepot ) ;
10069: LD_EXP 42
10073: PPUSH
10074: LD_EXP 77
10078: PPUSH
10079: CALL_OW 120
// ComEnterUnit ( Aleinik , BierezovDepot ) ;
10083: LD_EXP 45
10087: PPUSH
10088: LD_EXP 77
10092: PPUSH
10093: CALL_OW 120
// end ; if GetBType ( b ) = b_lab_half and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
10097: LD_VAR 0 1
10101: PPUSH
10102: CALL_OW 266
10106: PUSH
10107: LD_INT 7
10109: EQUAL
10110: PUSH
10111: LD_VAR 0 1
10115: PPUSH
10116: CALL_OW 255
10120: PUSH
10121: LD_INT 4
10123: EQUAL
10124: AND
10125: PUSH
10126: LD_VAR 0 1
10130: PPUSH
10131: LD_INT 27
10133: PPUSH
10134: CALL_OW 308
10138: AND
10139: IFFALSE 10153
// begin AddComUpgradeLab ( b , 12 ) ;
10141: LD_VAR 0 1
10145: PPUSH
10146: LD_INT 12
10148: PPUSH
10149: CALL_OW 207
// end ; if GetBType ( b ) = b_lab_full and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
10153: LD_VAR 0 1
10157: PPUSH
10158: CALL_OW 266
10162: PUSH
10163: LD_INT 8
10165: EQUAL
10166: PUSH
10167: LD_VAR 0 1
10171: PPUSH
10172: CALL_OW 255
10176: PUSH
10177: LD_INT 4
10179: EQUAL
10180: AND
10181: PUSH
10182: LD_VAR 0 1
10186: PPUSH
10187: LD_INT 27
10189: PPUSH
10190: CALL_OW 308
10194: AND
10195: IFFALSE 10319
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 4 ] ] ) , b ) ;
10197: LD_INT 22
10199: PUSH
10200: LD_INT 4
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 25
10209: PUSH
10210: LD_INT 4
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PPUSH
10221: CALL_OW 69
10225: PPUSH
10226: LD_VAR 0 1
10230: PPUSH
10231: CALL_OW 180
// AddComResearch ( b , 83 ) ;
10235: LD_VAR 0 1
10239: PPUSH
10240: LD_INT 83
10242: PPUSH
10243: CALL_OW 184
// AddComResearch ( b , 84 ) ;
10247: LD_VAR 0 1
10251: PPUSH
10252: LD_INT 84
10254: PPUSH
10255: CALL_OW 184
// AddComResearch ( b , 85 ) ;
10259: LD_VAR 0 1
10263: PPUSH
10264: LD_INT 85
10266: PPUSH
10267: CALL_OW 184
// AddComResearch ( b , 48 ) ;
10271: LD_VAR 0 1
10275: PPUSH
10276: LD_INT 48
10278: PPUSH
10279: CALL_OW 184
// AddComResearch ( b , 49 ) ;
10283: LD_VAR 0 1
10287: PPUSH
10288: LD_INT 49
10290: PPUSH
10291: CALL_OW 184
// AddComResearch ( b , 51 ) ;
10295: LD_VAR 0 1
10299: PPUSH
10300: LD_INT 51
10302: PPUSH
10303: CALL_OW 184
// AddComResearch ( b , 57 ) ;
10307: LD_VAR 0 1
10311: PPUSH
10312: LD_INT 57
10314: PPUSH
10315: CALL_OW 184
// end ; if GetBType ( b ) = b_factory and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
10319: LD_VAR 0 1
10323: PPUSH
10324: CALL_OW 266
10328: PUSH
10329: LD_INT 3
10331: EQUAL
10332: PUSH
10333: LD_VAR 0 1
10337: PPUSH
10338: CALL_OW 255
10342: PUSH
10343: LD_INT 4
10345: EQUAL
10346: AND
10347: PUSH
10348: LD_VAR 0 1
10352: PPUSH
10353: LD_INT 27
10355: PPUSH
10356: CALL_OW 308
10360: AND
10361: IFFALSE 10401
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 3 ] ] ) , b ) ;
10363: LD_INT 22
10365: PUSH
10366: LD_INT 4
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: PUSH
10373: LD_INT 25
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PPUSH
10387: CALL_OW 69
10391: PPUSH
10392: LD_VAR 0 1
10396: PPUSH
10397: CALL_OW 180
// end ; end ;
10401: PPOPN 1
10403: END
// on ApemanTamed ( ape , scientist ) do begin if GetSide ( ape ) = 3 and apeman_tamed = false then
10404: LD_VAR 0 1
10408: PPUSH
10409: CALL_OW 255
10413: PUSH
10414: LD_INT 3
10416: EQUAL
10417: PUSH
10418: LD_EXP 65
10422: PUSH
10423: LD_INT 0
10425: EQUAL
10426: AND
10427: IFFALSE 10481
// begin DialogueOn ;
10429: CALL_OW 6
// Say ( Grigori , 4Grig-Ape-02 ) ;
10433: LD_EXP 28
10437: PPUSH
10438: LD_STRING 4Grig-Ape-02
10440: PPUSH
10441: CALL_OW 88
// Say ( Yakotich , 4Yak-Ape-02 ) ;
10445: LD_EXP 13
10449: PPUSH
10450: LD_STRING 4Yak-Ape-02
10452: PPUSH
10453: CALL_OW 88
// Say ( Grigori , 4Grig-Ape-03 ) ;
10457: LD_EXP 28
10461: PPUSH
10462: LD_STRING 4Grig-Ape-03
10464: PPUSH
10465: CALL_OW 88
// DialogueOff ;
10469: CALL_OW 7
// apeman_tamed = true ;
10473: LD_ADDR_EXP 65
10477: PUSH
10478: LD_INT 1
10480: ST_TO_ADDR
// end ; end ;
10481: PPOPN 2
10483: END
// on VehicleRecycled ( BuildingID , VehicleID , Side , Nation , X , Y , Direction , Chassis , Controller , Engine , Weapon ) do begin if Side = 3 and Nation = 2 and Weapon = 26 then
10484: LD_VAR 0 3
10488: PUSH
10489: LD_INT 3
10491: EQUAL
10492: PUSH
10493: LD_VAR 0 4
10497: PUSH
10498: LD_INT 2
10500: EQUAL
10501: AND
10502: PUSH
10503: LD_VAR 0 11
10507: PUSH
10508: LD_INT 26
10510: EQUAL
10511: AND
10512: IFFALSE 10527
// begin SetTech ( 70 , 3 , 1 ) ;
10514: LD_INT 70
10516: PPUSH
10517: LD_INT 3
10519: PPUSH
10520: LD_INT 1
10522: PPUSH
10523: CALL_OW 322
// end ; end ;
10527: PPOPN 11
10529: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = 89 and GetSide ( vehicle ) = 6 then
10530: LD_VAR 0 1
10534: PPUSH
10535: CALL_OW 264
10539: PUSH
10540: LD_INT 89
10542: EQUAL
10543: PUSH
10544: LD_VAR 0 1
10548: PPUSH
10549: CALL_OW 255
10553: PUSH
10554: LD_INT 6
10556: EQUAL
10557: AND
10558: IFFALSE 10716
// begin Wait ( 0 0$5 ) ;
10560: LD_INT 175
10562: PPUSH
10563: CALL_OW 67
// DialogueOn ;
10567: CALL_OW 6
// CenterNowOnUnits ( vehicle ) ;
10571: LD_VAR 0 1
10575: PPUSH
10576: CALL_OW 87
// SayRadio ( Bukov , 4Bukov-Transport-01 ) ;
10580: LD_EXP 57
10584: PPUSH
10585: LD_STRING 4Bukov-Transport-01
10587: PPUSH
10588: CALL_OW 94
// SayRadio ( Platonov , 4Plat-Transport-01 ) ;
10592: LD_EXP 54
10596: PPUSH
10597: LD_STRING 4Plat-Transport-01
10599: PPUSH
10600: CALL_OW 94
// TransportQuery ( 1 ) ;
10604: LD_INT 1
10606: PPUSH
10607: CALL 5006 0 1
// SetAreaMapShow ( LeninCargo , 2 ) ;
10611: LD_INT 17
10613: PPUSH
10614: LD_INT 2
10616: PPUSH
10617: CALL_OW 424
// CenterNowOnXY ( 102 , 165 ) ;
10621: LD_INT 102
10623: PPUSH
10624: LD_INT 165
10626: PPUSH
10627: CALL_OW 86
// DialogueOff ;
10631: CALL_OW 7
// repeat AddComTransport ( vehicle , BukovBase , mat_cans ) ;
10635: LD_VAR 0 1
10639: PPUSH
10640: LD_INT 127
10642: PPUSH
10643: LD_INT 1
10645: PPUSH
10646: CALL_OW 211
// AddComGive ( vehicle , SouthLenin ) ;
10650: LD_VAR 0 1
10654: PPUSH
10655: LD_INT 218
10657: PPUSH
10658: CALL_OW 221
// SetFuel ( vehicle , 85 ) ;
10662: LD_VAR 0 1
10666: PPUSH
10667: LD_INT 85
10669: PPUSH
10670: CALL_OW 240
// wait ( 0 0$1 ) ;
10674: LD_INT 35
10676: PPUSH
10677: CALL_OW 67
// until fall_back = true ;
10681: LD_EXP 69
10685: PUSH
10686: LD_INT 1
10688: EQUAL
10689: IFFALSE 10635
// if fall_back = true then
10691: LD_EXP 69
10695: PUSH
10696: LD_INT 1
10698: EQUAL
10699: IFFALSE 10716
// ComMoveXY ( vehicle , 110 , 168 ) ;
10701: LD_VAR 0 1
10705: PPUSH
10706: LD_INT 110
10708: PPUSH
10709: LD_INT 168
10711: PPUSH
10712: CALL_OW 111
// end ; end ;
10716: PPOPN 2
10718: END
// every 0 0$1 trigger Researched ( 6 , 84 ) do
10719: LD_INT 6
10721: PPUSH
10722: LD_INT 84
10724: PPUSH
10725: CALL_OW 325
10729: IFFALSE 10753
10731: GO 10733
10733: DISABLE
// begin AddComConstruct ( BukovF , 24 , 1 , 1 , 89 ) ;
10734: LD_INT 128
10736: PPUSH
10737: LD_INT 24
10739: PPUSH
10740: LD_INT 1
10742: PPUSH
10743: LD_INT 1
10745: PPUSH
10746: LD_INT 89
10748: PPUSH
10749: CALL_OW 185
// end ;
10753: END
// every 0 0$1 trigger Researched ( 3 , 34 ) do
10754: LD_INT 3
10756: PPUSH
10757: LD_INT 34
10759: PPUSH
10760: CALL_OW 325
10764: IFFALSE 10804
10766: GO 10768
10768: DISABLE
// begin DialogueOn ;
10769: CALL_OW 6
// Say ( Vasilij , 4Vas-HG-01 ) ;
10773: LD_EXP 16
10777: PPUSH
10778: LD_STRING 4Vas-HG-01
10780: PPUSH
10781: CALL_OW 88
// DialogueOff ;
10785: CALL_OW 7
// ChangeMissionObjectives ( hg2 ) ;
10789: LD_STRING hg2
10791: PPUSH
10792: CALL_OW 337
// heavy_gun_researched = true ;
10796: LD_ADDR_EXP 67
10800: PUSH
10801: LD_INT 1
10803: ST_TO_ADDR
// end ;
10804: END
// every 0 0$1 trigger Researched ( 3 , 1 ) do
10805: LD_INT 3
10807: PPUSH
10808: LD_INT 1
10810: PPUSH
10811: CALL_OW 325
10815: IFFALSE 10852
10817: GO 10819
10819: DISABLE
// begin DialogueOn ;
10820: CALL_OW 6
// Say ( Grigori , 4Grig-Ape-01 ) ;
10824: LD_EXP 28
10828: PPUSH
10829: LD_STRING 4Grig-Ape-01
10831: PPUSH
10832: CALL_OW 88
// Say ( Yakotich , 4Yak-Ape-01 ) ;
10836: LD_EXP 13
10840: PPUSH
10841: LD_STRING 4Yak-Ape-01
10843: PPUSH
10844: CALL_OW 88
// DialogueOff ;
10848: CALL_OW 7
// end ;
10852: END
// every 0 0$1 trigger Researched ( 3 , 70 ) do
10853: LD_INT 3
10855: PPUSH
10856: LD_INT 70
10858: PPUSH
10859: CALL_OW 325
10863: IFFALSE 10927
10865: GO 10867
10867: DISABLE
// begin DialogueOn ;
10868: CALL_OW 6
// Say ( Stanislav , 4Stan-Flame-01 ) ;
10872: LD_EXP 26
10876: PPUSH
10877: LD_STRING 4Stan-Flame-01
10879: PPUSH
10880: CALL_OW 88
// Say ( Stanislav , 4Stan-Flame-02 ) ;
10884: LD_EXP 26
10888: PPUSH
10889: LD_STRING 4Stan-Flame-02
10891: PPUSH
10892: CALL_OW 88
// Say ( Stanislav , 4Stan-Flame-03 ) ;
10896: LD_EXP 26
10900: PPUSH
10901: LD_STRING 4Stan-Flame-03
10903: PPUSH
10904: CALL_OW 88
// ChangeMissionObjectives ( flame ) ;
10908: LD_STRING flame
10910: PPUSH
10911: CALL_OW 337
// flame_researched = true ;
10915: LD_ADDR_EXP 66
10919: PUSH
10920: LD_INT 1
10922: ST_TO_ADDR
// DialogueOff ;
10923: CALL_OW 7
// end ;
10927: END
// every 0 0$5 trigger FilterUnitsInArea ( BierezovBaseArea , ( [ [ f_side , 4 ] , [ f_constructed ] , [ f_btype , b_breastwork ] ] ) ) >= 1 do
10928: LD_INT 27
10930: PPUSH
10931: LD_INT 22
10933: PUSH
10934: LD_INT 4
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: PUSH
10941: LD_INT 57
10943: PUSH
10944: EMPTY
10945: LIST
10946: PUSH
10947: LD_INT 30
10949: PUSH
10950: LD_INT 31
10952: PUSH
10953: EMPTY
10954: LIST
10955: LIST
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: PPUSH
10962: CALL_OW 70
10966: PUSH
10967: LD_INT 1
10969: GREATEREQUAL
10970: IFFALSE 11178
10972: GO 10974
10974: DISABLE
// begin Wait ( 0 0$10 ) ;
10975: LD_INT 350
10977: PPUSH
10978: CALL_OW 67
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_outside ] , [ f_class , 1 ] ] ) , BierezovArmoury ) ;
10982: LD_INT 22
10984: PUSH
10985: LD_INT 4
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 56
10994: PUSH
10995: EMPTY
10996: LIST
10997: PUSH
10998: LD_INT 25
11000: PUSH
11001: LD_INT 1
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: LIST
11012: PPUSH
11013: CALL_OW 69
11017: PPUSH
11018: LD_EXP 78
11022: PPUSH
11023: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_outside ] , [ f_class , 2 ] ] ) , BierezovDepot ) ;
11027: LD_INT 22
11029: PUSH
11030: LD_INT 4
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 56
11039: PUSH
11040: EMPTY
11041: LIST
11042: PUSH
11043: LD_INT 25
11045: PUSH
11046: LD_INT 2
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: PPUSH
11058: CALL_OW 69
11062: PPUSH
11063: LD_EXP 77
11067: PPUSH
11068: CALL_OW 120
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) , 23 , 1 , 1 , rand ( 44 , 46 ) ) ;
11072: LD_INT 22
11074: PUSH
11075: LD_INT 4
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 30
11084: PUSH
11085: LD_INT 3
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PPUSH
11096: CALL_OW 69
11100: PPUSH
11101: LD_INT 23
11103: PPUSH
11104: LD_INT 1
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: LD_INT 44
11112: PPUSH
11113: LD_INT 46
11115: PPUSH
11116: CALL_OW 12
11120: PPUSH
11121: CALL_OW 185
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) , 23 , 1 , 1 , rand ( 45 , 46 ) ) ;
11125: LD_INT 22
11127: PUSH
11128: LD_INT 4
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PUSH
11135: LD_INT 30
11137: PUSH
11138: LD_INT 3
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PPUSH
11149: CALL_OW 69
11153: PPUSH
11154: LD_INT 23
11156: PPUSH
11157: LD_INT 1
11159: PPUSH
11160: LD_INT 1
11162: PPUSH
11163: LD_INT 45
11165: PPUSH
11166: LD_INT 46
11168: PPUSH
11169: CALL_OW 12
11173: PPUSH
11174: CALL_OW 185
// end ; end_of_file
11178: END
// export function InitArabianAI ; var i , z , y , turrety , fabryka , lab , zbrojka ; begin
11179: LD_INT 0
11181: PPUSH
11182: PPUSH
11183: PPUSH
11184: PPUSH
11185: PPUSH
11186: PPUSH
11187: PPUSH
11188: PPUSH
// uc_side := 2 ;
11189: LD_ADDR_OWVAR 20
11193: PUSH
11194: LD_INT 2
11196: ST_TO_ADDR
// uc_nation := 2 ;
11197: LD_ADDR_OWVAR 21
11201: PUSH
11202: LD_INT 2
11204: ST_TO_ADDR
// Hc_Gallery :=  ;
11205: LD_ADDR_OWVAR 33
11209: PUSH
11210: LD_STRING 
11212: ST_TO_ADDR
// Hc_Name :=  ;
11213: LD_ADDR_OWVAR 26
11217: PUSH
11218: LD_STRING 
11220: ST_TO_ADDR
// HeikeCrew := [ ] ;
11221: LD_ADDR_EXP 11
11225: PUSH
11226: EMPTY
11227: ST_TO_ADDR
// for i = 1 to 15 do
11228: LD_ADDR_VAR 0 2
11232: PUSH
11233: DOUBLE
11234: LD_INT 1
11236: DEC
11237: ST_TO_ADDR
11238: LD_INT 15
11240: PUSH
11241: FOR_TO
11242: IFFALSE 11297
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11244: LD_INT 0
11246: PPUSH
11247: LD_INT 1
11249: PPUSH
11250: CALL_OW 12
11254: PPUSH
11255: LD_INT 3
11257: PUSH
11258: LD_INT 5
11260: PUSH
11261: LD_INT 7
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: LIST
11268: PUSH
11269: LD_OWVAR 67
11273: ARRAY
11274: PPUSH
11275: CALL_OW 381
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11279: LD_ADDR_EXP 11
11283: PUSH
11284: LD_EXP 11
11288: PUSH
11289: CALL_OW 44
11293: ADD
11294: ST_TO_ADDR
// end ;
11295: GO 11241
11297: POP
11298: POP
// for i = 1 to 3 do
11299: LD_ADDR_VAR 0 2
11303: PUSH
11304: DOUBLE
11305: LD_INT 1
11307: DEC
11308: ST_TO_ADDR
11309: LD_INT 3
11311: PUSH
11312: FOR_TO
11313: IFFALSE 11368
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11315: LD_INT 0
11317: PPUSH
11318: LD_INT 1
11320: PPUSH
11321: CALL_OW 12
11325: PPUSH
11326: LD_INT 3
11328: PUSH
11329: LD_INT 5
11331: PUSH
11332: LD_INT 7
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: PUSH
11340: LD_OWVAR 67
11344: ARRAY
11345: PPUSH
11346: CALL_OW 382
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11350: LD_ADDR_EXP 11
11354: PUSH
11355: LD_EXP 11
11359: PUSH
11360: CALL_OW 44
11364: ADD
11365: ST_TO_ADDR
// end ;
11366: GO 11312
11368: POP
11369: POP
// for i = 1 to 6 do
11370: LD_ADDR_VAR 0 2
11374: PUSH
11375: DOUBLE
11376: LD_INT 1
11378: DEC
11379: ST_TO_ADDR
11380: LD_INT 6
11382: PUSH
11383: FOR_TO
11384: IFFALSE 11439
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11386: LD_INT 0
11388: PPUSH
11389: LD_INT 1
11391: PPUSH
11392: CALL_OW 12
11396: PPUSH
11397: LD_INT 3
11399: PUSH
11400: LD_INT 5
11402: PUSH
11403: LD_INT 7
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: PUSH
11411: LD_OWVAR 67
11415: ARRAY
11416: PPUSH
11417: CALL_OW 383
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11421: LD_ADDR_EXP 11
11425: PUSH
11426: LD_EXP 11
11430: PUSH
11431: CALL_OW 44
11435: ADD
11436: ST_TO_ADDR
// end ;
11437: GO 11383
11439: POP
11440: POP
// for i = 1 to 3 do
11441: LD_ADDR_VAR 0 2
11445: PUSH
11446: DOUBLE
11447: LD_INT 1
11449: DEC
11450: ST_TO_ADDR
11451: LD_INT 3
11453: PUSH
11454: FOR_TO
11455: IFFALSE 11510
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11457: LD_INT 0
11459: PPUSH
11460: LD_INT 1
11462: PPUSH
11463: CALL_OW 12
11467: PPUSH
11468: LD_INT 3
11470: PUSH
11471: LD_INT 5
11473: PUSH
11474: LD_INT 7
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: LIST
11481: PUSH
11482: LD_OWVAR 67
11486: ARRAY
11487: PPUSH
11488: CALL_OW 384
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11492: LD_ADDR_EXP 11
11496: PUSH
11497: LD_EXP 11
11501: PUSH
11502: CALL_OW 44
11506: ADD
11507: ST_TO_ADDR
// end ;
11508: GO 11454
11510: POP
11511: POP
// turrety := FilterUnitsInArea ( HeikeBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
11512: LD_ADDR_VAR 0 5
11516: PUSH
11517: LD_INT 26
11519: PPUSH
11520: LD_INT 2
11522: PUSH
11523: LD_INT 30
11525: PUSH
11526: LD_INT 31
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 30
11535: PUSH
11536: LD_INT 32
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: PPUSH
11548: CALL_OW 70
11552: ST_TO_ADDR
// lab := FilterUnitsInArea ( HeikeBaseArea , [ [ f_btype , b_lab_full ] ] ) ;
11553: LD_ADDR_VAR 0 7
11557: PUSH
11558: LD_INT 26
11560: PPUSH
11561: LD_INT 30
11563: PUSH
11564: LD_INT 8
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: EMPTY
11572: LIST
11573: PPUSH
11574: CALL_OW 70
11578: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( HeikeBaseArea , [ [ f_btype , b_factory ] ] ) ;
11579: LD_ADDR_VAR 0 6
11583: PUSH
11584: LD_INT 26
11586: PPUSH
11587: LD_INT 30
11589: PUSH
11590: LD_INT 3
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: EMPTY
11598: LIST
11599: PPUSH
11600: CALL_OW 70
11604: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( HeikeBaseArea , [ [ f_btype , b_barracks ] ] ) ;
11605: LD_ADDR_VAR 0 8
11609: PUSH
11610: LD_INT 26
11612: PPUSH
11613: LD_INT 30
11615: PUSH
11616: LD_INT 5
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: EMPTY
11624: LIST
11625: PPUSH
11626: CALL_OW 70
11630: ST_TO_ADDR
// y := 1 ;
11631: LD_ADDR_VAR 0 4
11635: PUSH
11636: LD_INT 1
11638: ST_TO_ADDR
// for i in HeikeCrew do
11639: LD_ADDR_VAR 0 2
11643: PUSH
11644: LD_EXP 11
11648: PUSH
11649: FOR_IN
11650: IFFALSE 11821
// begin case GetClass ( i ) of 1 :
11652: LD_VAR 0 2
11656: PPUSH
11657: CALL_OW 257
11661: PUSH
11662: LD_INT 1
11664: DOUBLE
11665: EQUAL
11666: IFTRUE 11670
11668: GO 11737
11670: POP
// begin if y > 9 then
11671: LD_VAR 0 4
11675: PUSH
11676: LD_INT 9
11678: GREATER
11679: IFFALSE 11701
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
11681: LD_VAR 0 2
11685: PPUSH
11686: LD_VAR 0 8
11690: PUSH
11691: LD_INT 1
11693: ARRAY
11694: PPUSH
11695: CALL_OW 52
11699: GO 11721
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
11701: LD_VAR 0 2
11705: PPUSH
11706: LD_VAR 0 5
11710: PUSH
11711: LD_VAR 0 4
11715: ARRAY
11716: PPUSH
11717: CALL_OW 52
// y = y + 1 ;
11721: LD_ADDR_VAR 0 4
11725: PUSH
11726: LD_VAR 0 4
11730: PUSH
11731: LD_INT 1
11733: PLUS
11734: ST_TO_ADDR
// end ; 2 :
11735: GO 11819
11737: LD_INT 2
11739: DOUBLE
11740: EQUAL
11741: IFTRUE 11745
11743: GO 11760
11745: POP
// PlaceHumanInUnit ( i , HeikeDepot ) ; 3 :
11746: LD_VAR 0 2
11750: PPUSH
11751: LD_INT 86
11753: PPUSH
11754: CALL_OW 52
11758: GO 11819
11760: LD_INT 3
11762: DOUBLE
11763: EQUAL
11764: IFTRUE 11768
11766: GO 11789
11768: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
11769: LD_VAR 0 2
11773: PPUSH
11774: LD_VAR 0 6
11778: PUSH
11779: LD_INT 1
11781: ARRAY
11782: PPUSH
11783: CALL_OW 52
11787: GO 11819
11789: LD_INT 4
11791: DOUBLE
11792: EQUAL
11793: IFTRUE 11797
11795: GO 11818
11797: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
11798: LD_VAR 0 2
11802: PPUSH
11803: LD_VAR 0 7
11807: PUSH
11808: LD_INT 1
11810: ARRAY
11811: PPUSH
11812: CALL_OW 52
11816: GO 11819
11818: POP
// end ;
11819: GO 11649
11821: POP
11822: POP
// end ; end_of_file
11823: LD_VAR 0 1
11827: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11828: LD_INT 0
11830: PPUSH
// ar_miner := 81 ;
11831: LD_ADDR_EXP 86
11835: PUSH
11836: LD_INT 81
11838: ST_TO_ADDR
// ar_crane := 88 ;
11839: LD_ADDR_EXP 85
11843: PUSH
11844: LD_INT 88
11846: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11847: LD_ADDR_EXP 80
11851: PUSH
11852: LD_INT 89
11854: ST_TO_ADDR
// us_hack := 99 ;
11855: LD_ADDR_EXP 81
11859: PUSH
11860: LD_INT 99
11862: ST_TO_ADDR
// us_artillery := 97 ;
11863: LD_ADDR_EXP 82
11867: PUSH
11868: LD_INT 97
11870: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11871: LD_ADDR_EXP 83
11875: PUSH
11876: LD_INT 91
11878: ST_TO_ADDR
// ar_mortar := 92 ;
11879: LD_ADDR_EXP 84
11883: PUSH
11884: LD_INT 92
11886: ST_TO_ADDR
// ru_flamethrower := 93 ;
11887: LD_ADDR_EXP 87
11891: PUSH
11892: LD_INT 93
11894: ST_TO_ADDR
// ru_radar := 98 ;
11895: LD_ADDR_EXP 79
11899: PUSH
11900: LD_INT 98
11902: ST_TO_ADDR
// tech_Artillery := 80 ;
11903: LD_ADDR_EXP 88
11907: PUSH
11908: LD_INT 80
11910: ST_TO_ADDR
// tech_RadMat := 81 ;
11911: LD_ADDR_EXP 89
11915: PUSH
11916: LD_INT 81
11918: ST_TO_ADDR
// tech_BasicTools := 82 ;
11919: LD_ADDR_EXP 90
11923: PUSH
11924: LD_INT 82
11926: ST_TO_ADDR
// tech_Cargo := 83 ;
11927: LD_ADDR_EXP 91
11931: PUSH
11932: LD_INT 83
11934: ST_TO_ADDR
// tech_Track := 84 ;
11935: LD_ADDR_EXP 92
11939: PUSH
11940: LD_INT 84
11942: ST_TO_ADDR
// tech_Crane := 85 ;
11943: LD_ADDR_EXP 93
11947: PUSH
11948: LD_INT 85
11950: ST_TO_ADDR
// tech_Bulldozer := 86 ;
11951: LD_ADDR_EXP 94
11955: PUSH
11956: LD_INT 86
11958: ST_TO_ADDR
// tech_Hovercraft := 87 ;
11959: LD_ADDR_EXP 95
11963: PUSH
11964: LD_INT 87
11966: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
11967: LD_ADDR_EXP 96
11971: PUSH
11972: LD_INT 88
11974: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
11975: LD_ADDR_EXP 97
11979: PUSH
11980: LD_INT 90
11982: ST_TO_ADDR
// class_mastodont := 31 ;
11983: LD_ADDR_EXP 98
11987: PUSH
11988: LD_INT 31
11990: ST_TO_ADDR
// class_horse := 21 ;
11991: LD_ADDR_EXP 99
11995: PUSH
11996: LD_INT 21
11998: ST_TO_ADDR
// end ; end_of_file
11999: LD_VAR 0 1
12003: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12004: LD_INT 0
12006: PPUSH
12007: PPUSH
// if exist_mode then
12008: LD_VAR 0 2
12012: IFFALSE 12037
// unit := CreateCharacter ( prefix & ident ) else
12014: LD_ADDR_VAR 0 5
12018: PUSH
12019: LD_VAR 0 3
12023: PUSH
12024: LD_VAR 0 1
12028: STR
12029: PPUSH
12030: CALL_OW 34
12034: ST_TO_ADDR
12035: GO 12052
// unit := NewCharacter ( ident ) ;
12037: LD_ADDR_VAR 0 5
12041: PUSH
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 25
12051: ST_TO_ADDR
// result := unit ;
12052: LD_ADDR_VAR 0 4
12056: PUSH
12057: LD_VAR 0 5
12061: ST_TO_ADDR
// end ;
12062: LD_VAR 0 4
12066: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12067: LD_INT 0
12069: PPUSH
12070: PPUSH
// if not side or not nation then
12071: LD_VAR 0 1
12075: NOT
12076: PUSH
12077: LD_VAR 0 2
12081: NOT
12082: OR
12083: IFFALSE 12087
// exit ;
12085: GO 12855
// case nation of nation_american :
12087: LD_VAR 0 2
12091: PUSH
12092: LD_INT 1
12094: DOUBLE
12095: EQUAL
12096: IFTRUE 12100
12098: GO 12314
12100: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
12101: LD_ADDR_VAR 0 4
12105: PUSH
12106: LD_INT 35
12108: PUSH
12109: LD_INT 45
12111: PUSH
12112: LD_INT 46
12114: PUSH
12115: LD_INT 47
12117: PUSH
12118: LD_INT 82
12120: PUSH
12121: LD_INT 83
12123: PUSH
12124: LD_INT 84
12126: PUSH
12127: LD_INT 85
12129: PUSH
12130: LD_INT 86
12132: PUSH
12133: LD_INT 1
12135: PUSH
12136: LD_INT 2
12138: PUSH
12139: LD_INT 6
12141: PUSH
12142: LD_INT 15
12144: PUSH
12145: LD_INT 16
12147: PUSH
12148: LD_INT 7
12150: PUSH
12151: LD_INT 12
12153: PUSH
12154: LD_INT 13
12156: PUSH
12157: LD_INT 10
12159: PUSH
12160: LD_INT 14
12162: PUSH
12163: LD_INT 20
12165: PUSH
12166: LD_INT 21
12168: PUSH
12169: LD_INT 22
12171: PUSH
12172: LD_INT 25
12174: PUSH
12175: LD_INT 32
12177: PUSH
12178: LD_INT 27
12180: PUSH
12181: LD_INT 36
12183: PUSH
12184: LD_INT 69
12186: PUSH
12187: LD_INT 39
12189: PUSH
12190: LD_INT 34
12192: PUSH
12193: LD_INT 40
12195: PUSH
12196: LD_INT 48
12198: PUSH
12199: LD_INT 49
12201: PUSH
12202: LD_INT 50
12204: PUSH
12205: LD_INT 51
12207: PUSH
12208: LD_INT 52
12210: PUSH
12211: LD_INT 53
12213: PUSH
12214: LD_INT 54
12216: PUSH
12217: LD_INT 55
12219: PUSH
12220: LD_INT 56
12222: PUSH
12223: LD_INT 57
12225: PUSH
12226: LD_INT 58
12228: PUSH
12229: LD_INT 59
12231: PUSH
12232: LD_INT 60
12234: PUSH
12235: LD_INT 61
12237: PUSH
12238: LD_INT 62
12240: PUSH
12241: LD_INT 80
12243: PUSH
12244: LD_INT 82
12246: PUSH
12247: LD_INT 83
12249: PUSH
12250: LD_INT 84
12252: PUSH
12253: LD_INT 85
12255: PUSH
12256: LD_INT 86
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: ST_TO_ADDR
12312: GO 12779
12314: LD_INT 2
12316: DOUBLE
12317: EQUAL
12318: IFTRUE 12322
12320: GO 12548
12322: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
12323: LD_ADDR_VAR 0 4
12327: PUSH
12328: LD_INT 35
12330: PUSH
12331: LD_INT 45
12333: PUSH
12334: LD_INT 46
12336: PUSH
12337: LD_INT 47
12339: PUSH
12340: LD_INT 82
12342: PUSH
12343: LD_INT 83
12345: PUSH
12346: LD_INT 84
12348: PUSH
12349: LD_INT 85
12351: PUSH
12352: LD_INT 87
12354: PUSH
12355: LD_INT 70
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: LD_INT 11
12363: PUSH
12364: LD_INT 3
12366: PUSH
12367: LD_INT 4
12369: PUSH
12370: LD_INT 5
12372: PUSH
12373: LD_INT 6
12375: PUSH
12376: LD_INT 15
12378: PUSH
12379: LD_INT 18
12381: PUSH
12382: LD_INT 7
12384: PUSH
12385: LD_INT 17
12387: PUSH
12388: LD_INT 8
12390: PUSH
12391: LD_INT 20
12393: PUSH
12394: LD_INT 21
12396: PUSH
12397: LD_INT 22
12399: PUSH
12400: LD_INT 72
12402: PUSH
12403: LD_INT 26
12405: PUSH
12406: LD_INT 69
12408: PUSH
12409: LD_INT 39
12411: PUSH
12412: LD_INT 40
12414: PUSH
12415: LD_INT 41
12417: PUSH
12418: LD_INT 42
12420: PUSH
12421: LD_INT 43
12423: PUSH
12424: LD_INT 48
12426: PUSH
12427: LD_INT 49
12429: PUSH
12430: LD_INT 50
12432: PUSH
12433: LD_INT 51
12435: PUSH
12436: LD_INT 52
12438: PUSH
12439: LD_INT 53
12441: PUSH
12442: LD_INT 54
12444: PUSH
12445: LD_INT 55
12447: PUSH
12448: LD_INT 56
12450: PUSH
12451: LD_INT 60
12453: PUSH
12454: LD_INT 61
12456: PUSH
12457: LD_INT 62
12459: PUSH
12460: LD_INT 66
12462: PUSH
12463: LD_INT 67
12465: PUSH
12466: LD_INT 68
12468: PUSH
12469: LD_INT 81
12471: PUSH
12472: LD_INT 82
12474: PUSH
12475: LD_INT 83
12477: PUSH
12478: LD_INT 84
12480: PUSH
12481: LD_INT 85
12483: PUSH
12484: LD_INT 87
12486: PUSH
12487: LD_INT 88
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: ST_TO_ADDR
12546: GO 12779
12548: LD_INT 3
12550: DOUBLE
12551: EQUAL
12552: IFTRUE 12556
12554: GO 12778
12556: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
12557: LD_ADDR_VAR 0 4
12561: PUSH
12562: LD_INT 46
12564: PUSH
12565: LD_INT 47
12567: PUSH
12568: LD_INT 1
12570: PUSH
12571: LD_INT 2
12573: PUSH
12574: LD_INT 82
12576: PUSH
12577: LD_INT 83
12579: PUSH
12580: LD_INT 84
12582: PUSH
12583: LD_INT 85
12585: PUSH
12586: LD_INT 86
12588: PUSH
12589: LD_INT 11
12591: PUSH
12592: LD_INT 9
12594: PUSH
12595: LD_INT 20
12597: PUSH
12598: LD_INT 19
12600: PUSH
12601: LD_INT 21
12603: PUSH
12604: LD_INT 24
12606: PUSH
12607: LD_INT 22
12609: PUSH
12610: LD_INT 25
12612: PUSH
12613: LD_INT 28
12615: PUSH
12616: LD_INT 29
12618: PUSH
12619: LD_INT 30
12621: PUSH
12622: LD_INT 31
12624: PUSH
12625: LD_INT 37
12627: PUSH
12628: LD_INT 38
12630: PUSH
12631: LD_INT 32
12633: PUSH
12634: LD_INT 27
12636: PUSH
12637: LD_INT 33
12639: PUSH
12640: LD_INT 69
12642: PUSH
12643: LD_INT 39
12645: PUSH
12646: LD_INT 34
12648: PUSH
12649: LD_INT 40
12651: PUSH
12652: LD_INT 71
12654: PUSH
12655: LD_INT 23
12657: PUSH
12658: LD_INT 44
12660: PUSH
12661: LD_INT 48
12663: PUSH
12664: LD_INT 49
12666: PUSH
12667: LD_INT 50
12669: PUSH
12670: LD_INT 51
12672: PUSH
12673: LD_INT 52
12675: PUSH
12676: LD_INT 53
12678: PUSH
12679: LD_INT 54
12681: PUSH
12682: LD_INT 55
12684: PUSH
12685: LD_INT 56
12687: PUSH
12688: LD_INT 57
12690: PUSH
12691: LD_INT 58
12693: PUSH
12694: LD_INT 59
12696: PUSH
12697: LD_INT 63
12699: PUSH
12700: LD_INT 64
12702: PUSH
12703: LD_INT 65
12705: PUSH
12706: LD_INT 82
12708: PUSH
12709: LD_INT 83
12711: PUSH
12712: LD_INT 84
12714: PUSH
12715: LD_INT 85
12717: PUSH
12718: LD_INT 86
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: ST_TO_ADDR
12776: GO 12779
12778: POP
// if state > - 1 and state < 3 then
12779: LD_VAR 0 3
12783: PUSH
12784: LD_INT 1
12786: NEG
12787: GREATER
12788: PUSH
12789: LD_VAR 0 3
12793: PUSH
12794: LD_INT 3
12796: LESS
12797: AND
12798: IFFALSE 12855
// for i in result do
12800: LD_ADDR_VAR 0 5
12804: PUSH
12805: LD_VAR 0 4
12809: PUSH
12810: FOR_IN
12811: IFFALSE 12853
// if GetTech ( i , side ) <> state then
12813: LD_VAR 0 5
12817: PPUSH
12818: LD_VAR 0 1
12822: PPUSH
12823: CALL_OW 321
12827: PUSH
12828: LD_VAR 0 3
12832: NONEQUAL
12833: IFFALSE 12851
// result := result diff i ;
12835: LD_ADDR_VAR 0 4
12839: PUSH
12840: LD_VAR 0 4
12844: PUSH
12845: LD_VAR 0 5
12849: DIFF
12850: ST_TO_ADDR
12851: GO 12810
12853: POP
12854: POP
// end ;
12855: LD_VAR 0 4
12859: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
12860: LD_INT 0
12862: PPUSH
12863: PPUSH
12864: PPUSH
// result := true ;
12865: LD_ADDR_VAR 0 3
12869: PUSH
12870: LD_INT 1
12872: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
12873: LD_ADDR_VAR 0 5
12877: PUSH
12878: LD_VAR 0 2
12882: PPUSH
12883: CALL_OW 480
12887: ST_TO_ADDR
// if not tmp then
12888: LD_VAR 0 5
12892: NOT
12893: IFFALSE 12897
// exit ;
12895: GO 12946
// for i in tmp do
12897: LD_ADDR_VAR 0 4
12901: PUSH
12902: LD_VAR 0 5
12906: PUSH
12907: FOR_IN
12908: IFFALSE 12944
// if GetTech ( i , side ) <> state_researched then
12910: LD_VAR 0 4
12914: PPUSH
12915: LD_VAR 0 1
12919: PPUSH
12920: CALL_OW 321
12924: PUSH
12925: LD_INT 2
12927: NONEQUAL
12928: IFFALSE 12942
// begin result := false ;
12930: LD_ADDR_VAR 0 3
12934: PUSH
12935: LD_INT 0
12937: ST_TO_ADDR
// exit ;
12938: POP
12939: POP
12940: GO 12946
// end ;
12942: GO 12907
12944: POP
12945: POP
// end ;
12946: LD_VAR 0 3
12950: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
12951: LD_INT 0
12953: PPUSH
12954: PPUSH
12955: PPUSH
12956: PPUSH
12957: PPUSH
12958: PPUSH
12959: PPUSH
12960: PPUSH
12961: PPUSH
12962: PPUSH
12963: PPUSH
12964: PPUSH
12965: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
12966: LD_VAR 0 1
12970: NOT
12971: PUSH
12972: LD_VAR 0 1
12976: PPUSH
12977: CALL_OW 257
12981: PUSH
12982: LD_INT 9
12984: NONEQUAL
12985: OR
12986: IFFALSE 12990
// exit ;
12988: GO 13563
// side := GetSide ( unit ) ;
12990: LD_ADDR_VAR 0 9
12994: PUSH
12995: LD_VAR 0 1
12999: PPUSH
13000: CALL_OW 255
13004: ST_TO_ADDR
// tech_space := tech_spacanom ;
13005: LD_ADDR_VAR 0 12
13009: PUSH
13010: LD_INT 29
13012: ST_TO_ADDR
// tech_time := tech_taurad ;
13013: LD_ADDR_VAR 0 13
13017: PUSH
13018: LD_INT 28
13020: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13021: LD_ADDR_VAR 0 11
13025: PUSH
13026: LD_VAR 0 1
13030: PPUSH
13031: CALL_OW 310
13035: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13036: LD_VAR 0 11
13040: PPUSH
13041: CALL_OW 247
13045: PUSH
13046: LD_INT 2
13048: EQUAL
13049: IFFALSE 13053
// exit ;
13051: GO 13563
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13053: LD_ADDR_VAR 0 8
13057: PUSH
13058: LD_INT 81
13060: PUSH
13061: LD_VAR 0 9
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 3
13072: PUSH
13073: LD_INT 21
13075: PUSH
13076: LD_INT 3
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: PPUSH
13091: CALL_OW 69
13095: ST_TO_ADDR
// if not tmp then
13096: LD_VAR 0 8
13100: NOT
13101: IFFALSE 13105
// exit ;
13103: GO 13563
// if in_unit then
13105: LD_VAR 0 11
13109: IFFALSE 13133
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13111: LD_ADDR_VAR 0 10
13115: PUSH
13116: LD_VAR 0 8
13120: PPUSH
13121: LD_VAR 0 11
13125: PPUSH
13126: CALL_OW 74
13130: ST_TO_ADDR
13131: GO 13153
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13133: LD_ADDR_VAR 0 10
13137: PUSH
13138: LD_VAR 0 8
13142: PPUSH
13143: LD_VAR 0 1
13147: PPUSH
13148: CALL_OW 74
13152: ST_TO_ADDR
// if not enemy then
13153: LD_VAR 0 10
13157: NOT
13158: IFFALSE 13162
// exit ;
13160: GO 13563
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13162: LD_VAR 0 11
13166: PUSH
13167: LD_VAR 0 11
13171: PPUSH
13172: LD_VAR 0 10
13176: PPUSH
13177: CALL_OW 296
13181: PUSH
13182: LD_INT 13
13184: GREATER
13185: AND
13186: PUSH
13187: LD_VAR 0 1
13191: PPUSH
13192: LD_VAR 0 10
13196: PPUSH
13197: CALL_OW 296
13201: PUSH
13202: LD_INT 12
13204: GREATER
13205: OR
13206: IFFALSE 13210
// exit ;
13208: GO 13563
// missile := [ 1 ] ;
13210: LD_ADDR_VAR 0 14
13214: PUSH
13215: LD_INT 1
13217: PUSH
13218: EMPTY
13219: LIST
13220: ST_TO_ADDR
// if Researched ( side , tech_space ) then
13221: LD_VAR 0 9
13225: PPUSH
13226: LD_VAR 0 12
13230: PPUSH
13231: CALL_OW 325
13235: IFFALSE 13264
// missile := Replace ( missile , missile + 1 , 2 ) ;
13237: LD_ADDR_VAR 0 14
13241: PUSH
13242: LD_VAR 0 14
13246: PPUSH
13247: LD_VAR 0 14
13251: PUSH
13252: LD_INT 1
13254: PLUS
13255: PPUSH
13256: LD_INT 2
13258: PPUSH
13259: CALL_OW 1
13263: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
13264: LD_VAR 0 9
13268: PPUSH
13269: LD_VAR 0 13
13273: PPUSH
13274: CALL_OW 325
13278: PUSH
13279: LD_VAR 0 10
13283: PPUSH
13284: CALL_OW 255
13288: PPUSH
13289: LD_VAR 0 13
13293: PPUSH
13294: CALL_OW 325
13298: NOT
13299: AND
13300: IFFALSE 13329
// missile := Replace ( missile , missile + 1 , 3 ) ;
13302: LD_ADDR_VAR 0 14
13306: PUSH
13307: LD_VAR 0 14
13311: PPUSH
13312: LD_VAR 0 14
13316: PUSH
13317: LD_INT 1
13319: PLUS
13320: PPUSH
13321: LD_INT 3
13323: PPUSH
13324: CALL_OW 1
13328: ST_TO_ADDR
// if missile < 2 then
13329: LD_VAR 0 14
13333: PUSH
13334: LD_INT 2
13336: LESS
13337: IFFALSE 13341
// exit ;
13339: GO 13563
// x := GetX ( enemy ) ;
13341: LD_ADDR_VAR 0 4
13345: PUSH
13346: LD_VAR 0 10
13350: PPUSH
13351: CALL_OW 250
13355: ST_TO_ADDR
// y := GetY ( enemy ) ;
13356: LD_ADDR_VAR 0 5
13360: PUSH
13361: LD_VAR 0 10
13365: PPUSH
13366: CALL_OW 251
13370: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
13371: LD_ADDR_VAR 0 6
13375: PUSH
13376: LD_VAR 0 4
13380: PUSH
13381: LD_INT 1
13383: NEG
13384: PPUSH
13385: LD_INT 1
13387: PPUSH
13388: CALL_OW 12
13392: PLUS
13393: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
13394: LD_ADDR_VAR 0 7
13398: PUSH
13399: LD_VAR 0 5
13403: PUSH
13404: LD_INT 1
13406: NEG
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 12
13415: PLUS
13416: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13417: LD_VAR 0 6
13421: PPUSH
13422: LD_VAR 0 7
13426: PPUSH
13427: CALL_OW 488
13431: NOT
13432: IFFALSE 13454
// begin _x := x ;
13434: LD_ADDR_VAR 0 6
13438: PUSH
13439: LD_VAR 0 4
13443: ST_TO_ADDR
// _y := y ;
13444: LD_ADDR_VAR 0 7
13448: PUSH
13449: LD_VAR 0 5
13453: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
13454: LD_ADDR_VAR 0 3
13458: PUSH
13459: LD_INT 1
13461: PPUSH
13462: LD_VAR 0 14
13466: PPUSH
13467: CALL_OW 12
13471: ST_TO_ADDR
// case i of 1 :
13472: LD_VAR 0 3
13476: PUSH
13477: LD_INT 1
13479: DOUBLE
13480: EQUAL
13481: IFTRUE 13485
13483: GO 13502
13485: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
13486: LD_VAR 0 1
13490: PPUSH
13491: LD_VAR 0 10
13495: PPUSH
13496: CALL_OW 115
13500: GO 13563
13502: LD_INT 2
13504: DOUBLE
13505: EQUAL
13506: IFTRUE 13510
13508: GO 13532
13510: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
13511: LD_VAR 0 1
13515: PPUSH
13516: LD_VAR 0 6
13520: PPUSH
13521: LD_VAR 0 7
13525: PPUSH
13526: CALL_OW 153
13530: GO 13563
13532: LD_INT 3
13534: DOUBLE
13535: EQUAL
13536: IFTRUE 13540
13538: GO 13562
13540: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
13541: LD_VAR 0 1
13545: PPUSH
13546: LD_VAR 0 6
13550: PPUSH
13551: LD_VAR 0 7
13555: PPUSH
13556: CALL_OW 154
13560: GO 13563
13562: POP
// end ;
13563: LD_VAR 0 2
13567: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
13568: LD_INT 0
13570: PPUSH
13571: PPUSH
13572: PPUSH
13573: PPUSH
13574: PPUSH
13575: PPUSH
// if not unit or not building then
13576: LD_VAR 0 1
13580: NOT
13581: PUSH
13582: LD_VAR 0 2
13586: NOT
13587: OR
13588: IFFALSE 13592
// exit ;
13590: GO 13750
// x := GetX ( building ) ;
13592: LD_ADDR_VAR 0 5
13596: PUSH
13597: LD_VAR 0 2
13601: PPUSH
13602: CALL_OW 250
13606: ST_TO_ADDR
// y := GetY ( building ) ;
13607: LD_ADDR_VAR 0 6
13611: PUSH
13612: LD_VAR 0 2
13616: PPUSH
13617: CALL_OW 251
13621: ST_TO_ADDR
// for i = 0 to 5 do
13622: LD_ADDR_VAR 0 4
13626: PUSH
13627: DOUBLE
13628: LD_INT 0
13630: DEC
13631: ST_TO_ADDR
13632: LD_INT 5
13634: PUSH
13635: FOR_TO
13636: IFFALSE 13748
// begin _x := ShiftX ( x , i , 3 ) ;
13638: LD_ADDR_VAR 0 7
13642: PUSH
13643: LD_VAR 0 5
13647: PPUSH
13648: LD_VAR 0 4
13652: PPUSH
13653: LD_INT 3
13655: PPUSH
13656: CALL_OW 272
13660: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
13661: LD_ADDR_VAR 0 8
13665: PUSH
13666: LD_VAR 0 6
13670: PPUSH
13671: LD_VAR 0 4
13675: PPUSH
13676: LD_INT 3
13678: PPUSH
13679: CALL_OW 273
13683: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
13684: LD_VAR 0 7
13688: PPUSH
13689: LD_VAR 0 8
13693: PPUSH
13694: CALL_OW 488
13698: NOT
13699: IFFALSE 13703
// continue ;
13701: GO 13635
// if HexInfo ( _x , _y ) = 0 then
13703: LD_VAR 0 7
13707: PPUSH
13708: LD_VAR 0 8
13712: PPUSH
13713: CALL_OW 428
13717: PUSH
13718: LD_INT 0
13720: EQUAL
13721: IFFALSE 13746
// begin ComMoveXY ( unit , _x , _y ) ;
13723: LD_VAR 0 1
13727: PPUSH
13728: LD_VAR 0 7
13732: PPUSH
13733: LD_VAR 0 8
13737: PPUSH
13738: CALL_OW 111
// exit ;
13742: POP
13743: POP
13744: GO 13750
// end ; end ;
13746: GO 13635
13748: POP
13749: POP
// end ;
13750: LD_VAR 0 3
13754: RET
// export function ScanBase ( side , base_area ) ; begin
13755: LD_INT 0
13757: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
13758: LD_ADDR_VAR 0 3
13762: PUSH
13763: LD_VAR 0 2
13767: PPUSH
13768: LD_INT 81
13770: PUSH
13771: LD_VAR 0 1
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PPUSH
13780: CALL_OW 70
13784: ST_TO_ADDR
// end ;
13785: LD_VAR 0 3
13789: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
13790: LD_INT 0
13792: PPUSH
13793: PPUSH
13794: PPUSH
13795: PPUSH
// result := false ;
13796: LD_ADDR_VAR 0 2
13800: PUSH
13801: LD_INT 0
13803: ST_TO_ADDR
// side := GetSide ( unit ) ;
13804: LD_ADDR_VAR 0 3
13808: PUSH
13809: LD_VAR 0 1
13813: PPUSH
13814: CALL_OW 255
13818: ST_TO_ADDR
// nat := GetNation ( unit ) ;
13819: LD_ADDR_VAR 0 4
13823: PUSH
13824: LD_VAR 0 1
13828: PPUSH
13829: CALL_OW 248
13833: ST_TO_ADDR
// case nat of 1 :
13834: LD_VAR 0 4
13838: PUSH
13839: LD_INT 1
13841: DOUBLE
13842: EQUAL
13843: IFTRUE 13847
13845: GO 13858
13847: POP
// tech := tech_lassight ; 2 :
13848: LD_ADDR_VAR 0 5
13852: PUSH
13853: LD_INT 12
13855: ST_TO_ADDR
13856: GO 13897
13858: LD_INT 2
13860: DOUBLE
13861: EQUAL
13862: IFTRUE 13866
13864: GO 13877
13866: POP
// tech := tech_mortar ; 3 :
13867: LD_ADDR_VAR 0 5
13871: PUSH
13872: LD_INT 41
13874: ST_TO_ADDR
13875: GO 13897
13877: LD_INT 3
13879: DOUBLE
13880: EQUAL
13881: IFTRUE 13885
13883: GO 13896
13885: POP
// tech := tech_bazooka ; end ;
13886: LD_ADDR_VAR 0 5
13890: PUSH
13891: LD_INT 44
13893: ST_TO_ADDR
13894: GO 13897
13896: POP
// if Researched ( side , tech ) then
13897: LD_VAR 0 3
13901: PPUSH
13902: LD_VAR 0 5
13906: PPUSH
13907: CALL_OW 325
13911: IFFALSE 13938
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
13913: LD_ADDR_VAR 0 2
13917: PUSH
13918: LD_INT 5
13920: PUSH
13921: LD_INT 8
13923: PUSH
13924: LD_INT 9
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PUSH
13932: LD_VAR 0 4
13936: ARRAY
13937: ST_TO_ADDR
// end ;
13938: LD_VAR 0 2
13942: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
13943: LD_INT 0
13945: PPUSH
13946: PPUSH
13947: PPUSH
// if not mines then
13948: LD_VAR 0 2
13952: NOT
13953: IFFALSE 13957
// exit ;
13955: GO 14101
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13957: LD_ADDR_VAR 0 5
13961: PUSH
13962: LD_INT 81
13964: PUSH
13965: LD_VAR 0 1
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 3
13976: PUSH
13977: LD_INT 21
13979: PUSH
13980: LD_INT 3
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PPUSH
13995: CALL_OW 69
13999: ST_TO_ADDR
// for i in mines do
14000: LD_ADDR_VAR 0 4
14004: PUSH
14005: LD_VAR 0 2
14009: PUSH
14010: FOR_IN
14011: IFFALSE 14099
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14013: LD_VAR 0 4
14017: PUSH
14018: LD_INT 1
14020: ARRAY
14021: PPUSH
14022: LD_VAR 0 4
14026: PUSH
14027: LD_INT 2
14029: ARRAY
14030: PPUSH
14031: CALL_OW 458
14035: NOT
14036: IFFALSE 14040
// continue ;
14038: GO 14010
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14040: LD_VAR 0 4
14044: PUSH
14045: LD_INT 1
14047: ARRAY
14048: PPUSH
14049: LD_VAR 0 4
14053: PUSH
14054: LD_INT 2
14056: ARRAY
14057: PPUSH
14058: CALL_OW 428
14062: PUSH
14063: LD_VAR 0 5
14067: IN
14068: IFFALSE 14097
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14070: LD_VAR 0 4
14074: PUSH
14075: LD_INT 1
14077: ARRAY
14078: PPUSH
14079: LD_VAR 0 4
14083: PUSH
14084: LD_INT 2
14086: ARRAY
14087: PPUSH
14088: LD_VAR 0 1
14092: PPUSH
14093: CALL_OW 456
// end ;
14097: GO 14010
14099: POP
14100: POP
// end ;
14101: LD_VAR 0 3
14105: RET
// export function Count ( array ) ; var i ; begin
14106: LD_INT 0
14108: PPUSH
14109: PPUSH
// result := 0 ;
14110: LD_ADDR_VAR 0 2
14114: PUSH
14115: LD_INT 0
14117: ST_TO_ADDR
// for i in array do
14118: LD_ADDR_VAR 0 3
14122: PUSH
14123: LD_VAR 0 1
14127: PUSH
14128: FOR_IN
14129: IFFALSE 14153
// if i then
14131: LD_VAR 0 3
14135: IFFALSE 14151
// result := result + 1 ;
14137: LD_ADDR_VAR 0 2
14141: PUSH
14142: LD_VAR 0 2
14146: PUSH
14147: LD_INT 1
14149: PLUS
14150: ST_TO_ADDR
14151: GO 14128
14153: POP
14154: POP
// end ;
14155: LD_VAR 0 2
14159: RET
// export function IsEmpty ( building ) ; begin
14160: LD_INT 0
14162: PPUSH
// if not building then
14163: LD_VAR 0 1
14167: NOT
14168: IFFALSE 14172
// exit ;
14170: GO 14215
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14172: LD_ADDR_VAR 0 2
14176: PUSH
14177: LD_VAR 0 1
14181: PUSH
14182: LD_INT 22
14184: PUSH
14185: LD_VAR 0 1
14189: PPUSH
14190: CALL_OW 255
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 58
14201: PUSH
14202: EMPTY
14203: LIST
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PPUSH
14209: CALL_OW 69
14213: IN
14214: ST_TO_ADDR
// end ;
14215: LD_VAR 0 2
14219: RET
// export function IsNotFull ( building ) ; begin
14220: LD_INT 0
14222: PPUSH
// if not building then
14223: LD_VAR 0 1
14227: NOT
14228: IFFALSE 14232
// exit ;
14230: GO 14251
// result := UnitsInside ( building ) < 6 ;
14232: LD_ADDR_VAR 0 2
14236: PUSH
14237: LD_VAR 0 1
14241: PPUSH
14242: CALL_OW 313
14246: PUSH
14247: LD_INT 6
14249: LESS
14250: ST_TO_ADDR
// end ;
14251: LD_VAR 0 2
14255: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
14256: LD_INT 0
14258: PPUSH
14259: PPUSH
14260: PPUSH
14261: PPUSH
// tmp := [ ] ;
14262: LD_ADDR_VAR 0 3
14266: PUSH
14267: EMPTY
14268: ST_TO_ADDR
// list := [ ] ;
14269: LD_ADDR_VAR 0 5
14273: PUSH
14274: EMPTY
14275: ST_TO_ADDR
// for i = 16 to 25 do
14276: LD_ADDR_VAR 0 4
14280: PUSH
14281: DOUBLE
14282: LD_INT 16
14284: DEC
14285: ST_TO_ADDR
14286: LD_INT 25
14288: PUSH
14289: FOR_TO
14290: IFFALSE 14363
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
14292: LD_ADDR_VAR 0 3
14296: PUSH
14297: LD_VAR 0 3
14301: PUSH
14302: LD_INT 22
14304: PUSH
14305: LD_VAR 0 1
14309: PPUSH
14310: CALL_OW 255
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 91
14321: PUSH
14322: LD_VAR 0 1
14326: PUSH
14327: LD_INT 6
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: LIST
14334: PUSH
14335: LD_INT 30
14337: PUSH
14338: LD_VAR 0 4
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: PPUSH
14355: CALL_OW 69
14359: ADD
14360: ST_TO_ADDR
14361: GO 14289
14363: POP
14364: POP
// for i = 1 to tmp do
14365: LD_ADDR_VAR 0 4
14369: PUSH
14370: DOUBLE
14371: LD_INT 1
14373: DEC
14374: ST_TO_ADDR
14375: LD_VAR 0 3
14379: PUSH
14380: FOR_TO
14381: IFFALSE 14469
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
14383: LD_ADDR_VAR 0 5
14387: PUSH
14388: LD_VAR 0 5
14392: PUSH
14393: LD_VAR 0 3
14397: PUSH
14398: LD_VAR 0 4
14402: ARRAY
14403: PPUSH
14404: CALL_OW 266
14408: PUSH
14409: LD_VAR 0 3
14413: PUSH
14414: LD_VAR 0 4
14418: ARRAY
14419: PPUSH
14420: CALL_OW 250
14424: PUSH
14425: LD_VAR 0 3
14429: PUSH
14430: LD_VAR 0 4
14434: ARRAY
14435: PPUSH
14436: CALL_OW 251
14440: PUSH
14441: LD_VAR 0 3
14445: PUSH
14446: LD_VAR 0 4
14450: ARRAY
14451: PPUSH
14452: CALL_OW 254
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: ADD
14466: ST_TO_ADDR
14467: GO 14380
14469: POP
14470: POP
// result := list ;
14471: LD_ADDR_VAR 0 2
14475: PUSH
14476: LD_VAR 0 5
14480: ST_TO_ADDR
// end ;
14481: LD_VAR 0 2
14485: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
14486: LD_INT 0
14488: PPUSH
14489: PPUSH
14490: PPUSH
14491: PPUSH
14492: PPUSH
14493: PPUSH
14494: PPUSH
// if not factory then
14495: LD_VAR 0 1
14499: NOT
14500: IFFALSE 14504
// exit ;
14502: GO 15097
// if control = control_apeman then
14504: LD_VAR 0 4
14508: PUSH
14509: LD_INT 5
14511: EQUAL
14512: IFFALSE 14621
// begin tmp := UnitsInside ( factory ) ;
14514: LD_ADDR_VAR 0 8
14518: PUSH
14519: LD_VAR 0 1
14523: PPUSH
14524: CALL_OW 313
14528: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
14529: LD_VAR 0 8
14533: PPUSH
14534: LD_INT 25
14536: PUSH
14537: LD_INT 12
14539: PUSH
14540: EMPTY
14541: LIST
14542: LIST
14543: PPUSH
14544: CALL_OW 72
14548: NOT
14549: IFFALSE 14559
// control := control_manual ;
14551: LD_ADDR_VAR 0 4
14555: PUSH
14556: LD_INT 1
14558: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
14559: LD_ADDR_VAR 0 8
14563: PUSH
14564: LD_VAR 0 1
14568: PPUSH
14569: CALL 14256 0 1
14573: ST_TO_ADDR
// if tmp then
14574: LD_VAR 0 8
14578: IFFALSE 14621
// begin for i in tmp do
14580: LD_ADDR_VAR 0 7
14584: PUSH
14585: LD_VAR 0 8
14589: PUSH
14590: FOR_IN
14591: IFFALSE 14619
// if i [ 1 ] = b_ext_radio then
14593: LD_VAR 0 7
14597: PUSH
14598: LD_INT 1
14600: ARRAY
14601: PUSH
14602: LD_INT 22
14604: EQUAL
14605: IFFALSE 14617
// begin control := control_remote ;
14607: LD_ADDR_VAR 0 4
14611: PUSH
14612: LD_INT 2
14614: ST_TO_ADDR
// break ;
14615: GO 14619
// end ;
14617: GO 14590
14619: POP
14620: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
14621: LD_VAR 0 1
14625: PPUSH
14626: LD_VAR 0 2
14630: PPUSH
14631: LD_VAR 0 3
14635: PPUSH
14636: LD_VAR 0 4
14640: PPUSH
14641: LD_VAR 0 5
14645: PPUSH
14646: CALL_OW 448
14650: IFFALSE 14685
// begin result := [ chassis , engine , control , weapon ] ;
14652: LD_ADDR_VAR 0 6
14656: PUSH
14657: LD_VAR 0 2
14661: PUSH
14662: LD_VAR 0 3
14666: PUSH
14667: LD_VAR 0 4
14671: PUSH
14672: LD_VAR 0 5
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: ST_TO_ADDR
// exit ;
14683: GO 15097
// end ; _chassis := AvailableChassisList ( factory ) ;
14685: LD_ADDR_VAR 0 9
14689: PUSH
14690: LD_VAR 0 1
14694: PPUSH
14695: CALL_OW 475
14699: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
14700: LD_ADDR_VAR 0 11
14704: PUSH
14705: LD_VAR 0 1
14709: PPUSH
14710: CALL_OW 476
14714: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
14715: LD_ADDR_VAR 0 12
14719: PUSH
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 477
14729: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
14730: LD_ADDR_VAR 0 10
14734: PUSH
14735: LD_VAR 0 1
14739: PPUSH
14740: CALL_OW 478
14744: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
14745: LD_VAR 0 9
14749: NOT
14750: PUSH
14751: LD_VAR 0 11
14755: NOT
14756: OR
14757: PUSH
14758: LD_VAR 0 12
14762: NOT
14763: OR
14764: PUSH
14765: LD_VAR 0 10
14769: NOT
14770: OR
14771: IFFALSE 14806
// begin result := [ chassis , engine , control , weapon ] ;
14773: LD_ADDR_VAR 0 6
14777: PUSH
14778: LD_VAR 0 2
14782: PUSH
14783: LD_VAR 0 3
14787: PUSH
14788: LD_VAR 0 4
14792: PUSH
14793: LD_VAR 0 5
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: ST_TO_ADDR
// exit ;
14804: GO 15097
// end ; if not chassis in _chassis then
14806: LD_VAR 0 2
14810: PUSH
14811: LD_VAR 0 9
14815: IN
14816: NOT
14817: IFFALSE 14843
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
14819: LD_ADDR_VAR 0 2
14823: PUSH
14824: LD_VAR 0 9
14828: PUSH
14829: LD_INT 1
14831: PPUSH
14832: LD_VAR 0 9
14836: PPUSH
14837: CALL_OW 12
14841: ARRAY
14842: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
14843: LD_VAR 0 2
14847: PPUSH
14848: LD_VAR 0 3
14852: PPUSH
14853: CALL 15102 0 2
14857: NOT
14858: IFFALSE 14917
// repeat engine := _engine [ 1 ] ;
14860: LD_ADDR_VAR 0 3
14864: PUSH
14865: LD_VAR 0 11
14869: PUSH
14870: LD_INT 1
14872: ARRAY
14873: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
14874: LD_ADDR_VAR 0 11
14878: PUSH
14879: LD_VAR 0 11
14883: PPUSH
14884: LD_INT 1
14886: PPUSH
14887: CALL_OW 3
14891: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
14892: LD_VAR 0 2
14896: PPUSH
14897: LD_VAR 0 3
14901: PPUSH
14902: CALL 15102 0 2
14906: PUSH
14907: LD_VAR 0 11
14911: PUSH
14912: EMPTY
14913: EQUAL
14914: OR
14915: IFFALSE 14860
// if not control in _control then
14917: LD_VAR 0 4
14921: PUSH
14922: LD_VAR 0 12
14926: IN
14927: NOT
14928: IFFALSE 14954
// control := _control [ rand ( 1 , _control ) ] ;
14930: LD_ADDR_VAR 0 4
14934: PUSH
14935: LD_VAR 0 12
14939: PUSH
14940: LD_INT 1
14942: PPUSH
14943: LD_VAR 0 12
14947: PPUSH
14948: CALL_OW 12
14952: ARRAY
14953: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
14954: LD_VAR 0 2
14958: PPUSH
14959: LD_VAR 0 5
14963: PPUSH
14964: CALL 15322 0 2
14968: NOT
14969: IFFALSE 15028
// repeat weapon := _weapon [ 1 ] ;
14971: LD_ADDR_VAR 0 5
14975: PUSH
14976: LD_VAR 0 10
14980: PUSH
14981: LD_INT 1
14983: ARRAY
14984: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
14985: LD_ADDR_VAR 0 10
14989: PUSH
14990: LD_VAR 0 10
14994: PPUSH
14995: LD_INT 1
14997: PPUSH
14998: CALL_OW 3
15002: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15003: LD_VAR 0 2
15007: PPUSH
15008: LD_VAR 0 5
15012: PPUSH
15013: CALL 15322 0 2
15017: PUSH
15018: LD_VAR 0 10
15022: PUSH
15023: EMPTY
15024: EQUAL
15025: OR
15026: IFFALSE 14971
// result := [ ] ;
15028: LD_ADDR_VAR 0 6
15032: PUSH
15033: EMPTY
15034: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15035: LD_VAR 0 1
15039: PPUSH
15040: LD_VAR 0 2
15044: PPUSH
15045: LD_VAR 0 3
15049: PPUSH
15050: LD_VAR 0 4
15054: PPUSH
15055: LD_VAR 0 5
15059: PPUSH
15060: CALL_OW 448
15064: IFFALSE 15097
// result := [ chassis , engine , control , weapon ] ;
15066: LD_ADDR_VAR 0 6
15070: PUSH
15071: LD_VAR 0 2
15075: PUSH
15076: LD_VAR 0 3
15080: PUSH
15081: LD_VAR 0 4
15085: PUSH
15086: LD_VAR 0 5
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: ST_TO_ADDR
// end ;
15097: LD_VAR 0 6
15101: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15102: LD_INT 0
15104: PPUSH
// if not chassis or not engine then
15105: LD_VAR 0 1
15109: NOT
15110: PUSH
15111: LD_VAR 0 2
15115: NOT
15116: OR
15117: IFFALSE 15121
// exit ;
15119: GO 15317
// case engine of engine_solar :
15121: LD_VAR 0 2
15125: PUSH
15126: LD_INT 2
15128: DOUBLE
15129: EQUAL
15130: IFTRUE 15134
15132: GO 15172
15134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15135: LD_ADDR_VAR 0 3
15139: PUSH
15140: LD_INT 11
15142: PUSH
15143: LD_INT 12
15145: PUSH
15146: LD_INT 13
15148: PUSH
15149: LD_INT 14
15151: PUSH
15152: LD_INT 1
15154: PUSH
15155: LD_INT 2
15157: PUSH
15158: LD_INT 3
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: ST_TO_ADDR
15170: GO 15301
15172: LD_INT 1
15174: DOUBLE
15175: EQUAL
15176: IFTRUE 15180
15178: GO 15242
15180: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15181: LD_ADDR_VAR 0 3
15185: PUSH
15186: LD_INT 11
15188: PUSH
15189: LD_INT 12
15191: PUSH
15192: LD_INT 13
15194: PUSH
15195: LD_INT 14
15197: PUSH
15198: LD_INT 1
15200: PUSH
15201: LD_INT 2
15203: PUSH
15204: LD_INT 3
15206: PUSH
15207: LD_INT 4
15209: PUSH
15210: LD_INT 5
15212: PUSH
15213: LD_INT 21
15215: PUSH
15216: LD_INT 23
15218: PUSH
15219: LD_INT 22
15221: PUSH
15222: LD_INT 24
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: ST_TO_ADDR
15240: GO 15301
15242: LD_INT 3
15244: DOUBLE
15245: EQUAL
15246: IFTRUE 15250
15248: GO 15300
15250: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
15251: LD_ADDR_VAR 0 3
15255: PUSH
15256: LD_INT 13
15258: PUSH
15259: LD_INT 14
15261: PUSH
15262: LD_INT 2
15264: PUSH
15265: LD_INT 3
15267: PUSH
15268: LD_INT 4
15270: PUSH
15271: LD_INT 5
15273: PUSH
15274: LD_INT 21
15276: PUSH
15277: LD_INT 22
15279: PUSH
15280: LD_INT 23
15282: PUSH
15283: LD_INT 24
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: ST_TO_ADDR
15298: GO 15301
15300: POP
// result := ( chassis in result ) ;
15301: LD_ADDR_VAR 0 3
15305: PUSH
15306: LD_VAR 0 1
15310: PUSH
15311: LD_VAR 0 3
15315: IN
15316: ST_TO_ADDR
// end ;
15317: LD_VAR 0 3
15321: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
15322: LD_INT 0
15324: PPUSH
// if not chassis or not weapon then
15325: LD_VAR 0 1
15329: NOT
15330: PUSH
15331: LD_VAR 0 2
15335: NOT
15336: OR
15337: IFFALSE 15341
// exit ;
15339: GO 16403
// case weapon of us_machine_gun :
15341: LD_VAR 0 2
15345: PUSH
15346: LD_INT 2
15348: DOUBLE
15349: EQUAL
15350: IFTRUE 15354
15352: GO 15384
15354: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
15355: LD_ADDR_VAR 0 3
15359: PUSH
15360: LD_INT 1
15362: PUSH
15363: LD_INT 2
15365: PUSH
15366: LD_INT 3
15368: PUSH
15369: LD_INT 4
15371: PUSH
15372: LD_INT 5
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: ST_TO_ADDR
15382: GO 16387
15384: LD_INT 3
15386: DOUBLE
15387: EQUAL
15388: IFTRUE 15392
15390: GO 15422
15392: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
15393: LD_ADDR_VAR 0 3
15397: PUSH
15398: LD_INT 1
15400: PUSH
15401: LD_INT 2
15403: PUSH
15404: LD_INT 3
15406: PUSH
15407: LD_INT 4
15409: PUSH
15410: LD_INT 5
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: ST_TO_ADDR
15420: GO 16387
15422: LD_INT 11
15424: DOUBLE
15425: EQUAL
15426: IFTRUE 15430
15428: GO 15460
15430: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
15431: LD_ADDR_VAR 0 3
15435: PUSH
15436: LD_INT 1
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: LD_INT 3
15444: PUSH
15445: LD_INT 4
15447: PUSH
15448: LD_INT 5
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: ST_TO_ADDR
15458: GO 16387
15460: LD_INT 4
15462: DOUBLE
15463: EQUAL
15464: IFTRUE 15468
15466: GO 15494
15468: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
15469: LD_ADDR_VAR 0 3
15473: PUSH
15474: LD_INT 2
15476: PUSH
15477: LD_INT 3
15479: PUSH
15480: LD_INT 4
15482: PUSH
15483: LD_INT 5
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: ST_TO_ADDR
15492: GO 16387
15494: LD_INT 5
15496: DOUBLE
15497: EQUAL
15498: IFTRUE 15502
15500: GO 15528
15502: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
15503: LD_ADDR_VAR 0 3
15507: PUSH
15508: LD_INT 2
15510: PUSH
15511: LD_INT 3
15513: PUSH
15514: LD_INT 4
15516: PUSH
15517: LD_INT 5
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: ST_TO_ADDR
15526: GO 16387
15528: LD_INT 9
15530: DOUBLE
15531: EQUAL
15532: IFTRUE 15536
15534: GO 15562
15536: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
15537: LD_ADDR_VAR 0 3
15541: PUSH
15542: LD_INT 2
15544: PUSH
15545: LD_INT 3
15547: PUSH
15548: LD_INT 4
15550: PUSH
15551: LD_INT 5
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: ST_TO_ADDR
15560: GO 16387
15562: LD_INT 7
15564: DOUBLE
15565: EQUAL
15566: IFTRUE 15570
15568: GO 15596
15570: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
15571: LD_ADDR_VAR 0 3
15575: PUSH
15576: LD_INT 2
15578: PUSH
15579: LD_INT 3
15581: PUSH
15582: LD_INT 4
15584: PUSH
15585: LD_INT 5
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: ST_TO_ADDR
15594: GO 16387
15596: LD_INT 12
15598: DOUBLE
15599: EQUAL
15600: IFTRUE 15604
15602: GO 15630
15604: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_INT 2
15612: PUSH
15613: LD_INT 3
15615: PUSH
15616: LD_INT 4
15618: PUSH
15619: LD_INT 5
15621: PUSH
15622: EMPTY
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: ST_TO_ADDR
15628: GO 16387
15630: LD_INT 13
15632: DOUBLE
15633: EQUAL
15634: IFTRUE 15638
15636: GO 15664
15638: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: LD_INT 2
15646: PUSH
15647: LD_INT 3
15649: PUSH
15650: LD_INT 4
15652: PUSH
15653: LD_INT 5
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: ST_TO_ADDR
15662: GO 16387
15664: LD_INT 14
15666: DOUBLE
15667: EQUAL
15668: IFTRUE 15672
15670: GO 15690
15672: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
15673: LD_ADDR_VAR 0 3
15677: PUSH
15678: LD_INT 4
15680: PUSH
15681: LD_INT 5
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: ST_TO_ADDR
15688: GO 16387
15690: LD_INT 6
15692: DOUBLE
15693: EQUAL
15694: IFTRUE 15698
15696: GO 15716
15698: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
15699: LD_ADDR_VAR 0 3
15703: PUSH
15704: LD_INT 4
15706: PUSH
15707: LD_INT 5
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: ST_TO_ADDR
15714: GO 16387
15716: LD_INT 10
15718: DOUBLE
15719: EQUAL
15720: IFTRUE 15724
15722: GO 15742
15724: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
15725: LD_ADDR_VAR 0 3
15729: PUSH
15730: LD_INT 4
15732: PUSH
15733: LD_INT 5
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: ST_TO_ADDR
15740: GO 16387
15742: LD_INT 22
15744: DOUBLE
15745: EQUAL
15746: IFTRUE 15750
15748: GO 15776
15750: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
15751: LD_ADDR_VAR 0 3
15755: PUSH
15756: LD_INT 11
15758: PUSH
15759: LD_INT 12
15761: PUSH
15762: LD_INT 13
15764: PUSH
15765: LD_INT 14
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: ST_TO_ADDR
15774: GO 16387
15776: LD_INT 23
15778: DOUBLE
15779: EQUAL
15780: IFTRUE 15784
15782: GO 15810
15784: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
15785: LD_ADDR_VAR 0 3
15789: PUSH
15790: LD_INT 11
15792: PUSH
15793: LD_INT 12
15795: PUSH
15796: LD_INT 13
15798: PUSH
15799: LD_INT 14
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: ST_TO_ADDR
15808: GO 16387
15810: LD_INT 24
15812: DOUBLE
15813: EQUAL
15814: IFTRUE 15818
15816: GO 15844
15818: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
15819: LD_ADDR_VAR 0 3
15823: PUSH
15824: LD_INT 11
15826: PUSH
15827: LD_INT 12
15829: PUSH
15830: LD_INT 13
15832: PUSH
15833: LD_INT 14
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: ST_TO_ADDR
15842: GO 16387
15844: LD_INT 30
15846: DOUBLE
15847: EQUAL
15848: IFTRUE 15852
15850: GO 15878
15852: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
15853: LD_ADDR_VAR 0 3
15857: PUSH
15858: LD_INT 11
15860: PUSH
15861: LD_INT 12
15863: PUSH
15864: LD_INT 13
15866: PUSH
15867: LD_INT 14
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: ST_TO_ADDR
15876: GO 16387
15878: LD_INT 25
15880: DOUBLE
15881: EQUAL
15882: IFTRUE 15886
15884: GO 15904
15886: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
15887: LD_ADDR_VAR 0 3
15891: PUSH
15892: LD_INT 13
15894: PUSH
15895: LD_INT 14
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: ST_TO_ADDR
15902: GO 16387
15904: LD_INT 27
15906: DOUBLE
15907: EQUAL
15908: IFTRUE 15912
15910: GO 15930
15912: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
15913: LD_ADDR_VAR 0 3
15917: PUSH
15918: LD_INT 13
15920: PUSH
15921: LD_INT 14
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: ST_TO_ADDR
15928: GO 16387
15930: LD_EXP 84
15934: DOUBLE
15935: EQUAL
15936: IFTRUE 15940
15938: GO 15966
15940: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
15941: LD_ADDR_VAR 0 3
15945: PUSH
15946: LD_INT 11
15948: PUSH
15949: LD_INT 12
15951: PUSH
15952: LD_INT 13
15954: PUSH
15955: LD_INT 14
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: ST_TO_ADDR
15964: GO 16387
15966: LD_INT 28
15968: DOUBLE
15969: EQUAL
15970: IFTRUE 15974
15972: GO 15992
15974: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
15975: LD_ADDR_VAR 0 3
15979: PUSH
15980: LD_INT 13
15982: PUSH
15983: LD_INT 14
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: ST_TO_ADDR
15990: GO 16387
15992: LD_INT 29
15994: DOUBLE
15995: EQUAL
15996: IFTRUE 16000
15998: GO 16018
16000: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16001: LD_ADDR_VAR 0 3
16005: PUSH
16006: LD_INT 13
16008: PUSH
16009: LD_INT 14
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: ST_TO_ADDR
16016: GO 16387
16018: LD_INT 31
16020: DOUBLE
16021: EQUAL
16022: IFTRUE 16026
16024: GO 16044
16026: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16027: LD_ADDR_VAR 0 3
16031: PUSH
16032: LD_INT 13
16034: PUSH
16035: LD_INT 14
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: ST_TO_ADDR
16042: GO 16387
16044: LD_INT 26
16046: DOUBLE
16047: EQUAL
16048: IFTRUE 16052
16050: GO 16070
16052: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16053: LD_ADDR_VAR 0 3
16057: PUSH
16058: LD_INT 13
16060: PUSH
16061: LD_INT 14
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: ST_TO_ADDR
16068: GO 16387
16070: LD_INT 42
16072: DOUBLE
16073: EQUAL
16074: IFTRUE 16078
16076: GO 16104
16078: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16079: LD_ADDR_VAR 0 3
16083: PUSH
16084: LD_INT 21
16086: PUSH
16087: LD_INT 22
16089: PUSH
16090: LD_INT 23
16092: PUSH
16093: LD_INT 24
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: ST_TO_ADDR
16102: GO 16387
16104: LD_INT 43
16106: DOUBLE
16107: EQUAL
16108: IFTRUE 16112
16110: GO 16138
16112: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16113: LD_ADDR_VAR 0 3
16117: PUSH
16118: LD_INT 21
16120: PUSH
16121: LD_INT 22
16123: PUSH
16124: LD_INT 23
16126: PUSH
16127: LD_INT 24
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: ST_TO_ADDR
16136: GO 16387
16138: LD_INT 44
16140: DOUBLE
16141: EQUAL
16142: IFTRUE 16146
16144: GO 16172
16146: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: LD_INT 21
16154: PUSH
16155: LD_INT 22
16157: PUSH
16158: LD_INT 23
16160: PUSH
16161: LD_INT 24
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: ST_TO_ADDR
16170: GO 16387
16172: LD_INT 45
16174: DOUBLE
16175: EQUAL
16176: IFTRUE 16180
16178: GO 16206
16180: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16181: LD_ADDR_VAR 0 3
16185: PUSH
16186: LD_INT 21
16188: PUSH
16189: LD_INT 22
16191: PUSH
16192: LD_INT 23
16194: PUSH
16195: LD_INT 24
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: ST_TO_ADDR
16204: GO 16387
16206: LD_INT 49
16208: DOUBLE
16209: EQUAL
16210: IFTRUE 16214
16212: GO 16240
16214: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16215: LD_ADDR_VAR 0 3
16219: PUSH
16220: LD_INT 21
16222: PUSH
16223: LD_INT 22
16225: PUSH
16226: LD_INT 23
16228: PUSH
16229: LD_INT 24
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: ST_TO_ADDR
16238: GO 16387
16240: LD_INT 51
16242: DOUBLE
16243: EQUAL
16244: IFTRUE 16248
16246: GO 16274
16248: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
16249: LD_ADDR_VAR 0 3
16253: PUSH
16254: LD_INT 21
16256: PUSH
16257: LD_INT 22
16259: PUSH
16260: LD_INT 23
16262: PUSH
16263: LD_INT 24
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: ST_TO_ADDR
16272: GO 16387
16274: LD_INT 52
16276: DOUBLE
16277: EQUAL
16278: IFTRUE 16282
16280: GO 16308
16282: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
16283: LD_ADDR_VAR 0 3
16287: PUSH
16288: LD_INT 21
16290: PUSH
16291: LD_INT 22
16293: PUSH
16294: LD_INT 23
16296: PUSH
16297: LD_INT 24
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: ST_TO_ADDR
16306: GO 16387
16308: LD_INT 53
16310: DOUBLE
16311: EQUAL
16312: IFTRUE 16316
16314: GO 16334
16316: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
16317: LD_ADDR_VAR 0 3
16321: PUSH
16322: LD_INT 23
16324: PUSH
16325: LD_INT 24
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: ST_TO_ADDR
16332: GO 16387
16334: LD_INT 46
16336: DOUBLE
16337: EQUAL
16338: IFTRUE 16342
16340: GO 16360
16342: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
16343: LD_ADDR_VAR 0 3
16347: PUSH
16348: LD_INT 23
16350: PUSH
16351: LD_INT 24
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: ST_TO_ADDR
16358: GO 16387
16360: LD_INT 47
16362: DOUBLE
16363: EQUAL
16364: IFTRUE 16368
16366: GO 16386
16368: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16369: LD_ADDR_VAR 0 3
16373: PUSH
16374: LD_INT 23
16376: PUSH
16377: LD_INT 24
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: ST_TO_ADDR
16384: GO 16387
16386: POP
// result := ( chassis in result ) ;
16387: LD_ADDR_VAR 0 3
16391: PUSH
16392: LD_VAR 0 1
16396: PUSH
16397: LD_VAR 0 3
16401: IN
16402: ST_TO_ADDR
// end ;
16403: LD_VAR 0 3
16407: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
16408: LD_INT 0
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
16416: PPUSH
// result := array ;
16417: LD_ADDR_VAR 0 5
16421: PUSH
16422: LD_VAR 0 1
16426: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
16427: LD_VAR 0 1
16431: NOT
16432: PUSH
16433: LD_VAR 0 2
16437: NOT
16438: OR
16439: PUSH
16440: LD_VAR 0 3
16444: NOT
16445: OR
16446: PUSH
16447: LD_VAR 0 2
16451: PUSH
16452: LD_VAR 0 1
16456: GREATER
16457: OR
16458: PUSH
16459: LD_VAR 0 3
16463: PUSH
16464: LD_VAR 0 1
16468: GREATER
16469: OR
16470: IFFALSE 16474
// exit ;
16472: GO 16770
// if direction then
16474: LD_VAR 0 4
16478: IFFALSE 16542
// begin d := 1 ;
16480: LD_ADDR_VAR 0 9
16484: PUSH
16485: LD_INT 1
16487: ST_TO_ADDR
// if i_from > i_to then
16488: LD_VAR 0 2
16492: PUSH
16493: LD_VAR 0 3
16497: GREATER
16498: IFFALSE 16524
// length := ( array - i_from ) + i_to else
16500: LD_ADDR_VAR 0 11
16504: PUSH
16505: LD_VAR 0 1
16509: PUSH
16510: LD_VAR 0 2
16514: MINUS
16515: PUSH
16516: LD_VAR 0 3
16520: PLUS
16521: ST_TO_ADDR
16522: GO 16540
// length := i_to - i_from ;
16524: LD_ADDR_VAR 0 11
16528: PUSH
16529: LD_VAR 0 3
16533: PUSH
16534: LD_VAR 0 2
16538: MINUS
16539: ST_TO_ADDR
// end else
16540: GO 16603
// begin d := - 1 ;
16542: LD_ADDR_VAR 0 9
16546: PUSH
16547: LD_INT 1
16549: NEG
16550: ST_TO_ADDR
// if i_from > i_to then
16551: LD_VAR 0 2
16555: PUSH
16556: LD_VAR 0 3
16560: GREATER
16561: IFFALSE 16581
// length := i_from - i_to else
16563: LD_ADDR_VAR 0 11
16567: PUSH
16568: LD_VAR 0 2
16572: PUSH
16573: LD_VAR 0 3
16577: MINUS
16578: ST_TO_ADDR
16579: GO 16603
// length := ( array - i_to ) + i_from ;
16581: LD_ADDR_VAR 0 11
16585: PUSH
16586: LD_VAR 0 1
16590: PUSH
16591: LD_VAR 0 3
16595: MINUS
16596: PUSH
16597: LD_VAR 0 2
16601: PLUS
16602: ST_TO_ADDR
// end ; if not length then
16603: LD_VAR 0 11
16607: NOT
16608: IFFALSE 16612
// exit ;
16610: GO 16770
// tmp := array ;
16612: LD_ADDR_VAR 0 10
16616: PUSH
16617: LD_VAR 0 1
16621: ST_TO_ADDR
// for i = 1 to length do
16622: LD_ADDR_VAR 0 6
16626: PUSH
16627: DOUBLE
16628: LD_INT 1
16630: DEC
16631: ST_TO_ADDR
16632: LD_VAR 0 11
16636: PUSH
16637: FOR_TO
16638: IFFALSE 16758
// begin for j = 1 to array do
16640: LD_ADDR_VAR 0 7
16644: PUSH
16645: DOUBLE
16646: LD_INT 1
16648: DEC
16649: ST_TO_ADDR
16650: LD_VAR 0 1
16654: PUSH
16655: FOR_TO
16656: IFFALSE 16744
// begin k := j + d ;
16658: LD_ADDR_VAR 0 8
16662: PUSH
16663: LD_VAR 0 7
16667: PUSH
16668: LD_VAR 0 9
16672: PLUS
16673: ST_TO_ADDR
// if k > array then
16674: LD_VAR 0 8
16678: PUSH
16679: LD_VAR 0 1
16683: GREATER
16684: IFFALSE 16694
// k := 1 ;
16686: LD_ADDR_VAR 0 8
16690: PUSH
16691: LD_INT 1
16693: ST_TO_ADDR
// if not k then
16694: LD_VAR 0 8
16698: NOT
16699: IFFALSE 16711
// k := array ;
16701: LD_ADDR_VAR 0 8
16705: PUSH
16706: LD_VAR 0 1
16710: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
16711: LD_ADDR_VAR 0 10
16715: PUSH
16716: LD_VAR 0 10
16720: PPUSH
16721: LD_VAR 0 8
16725: PPUSH
16726: LD_VAR 0 1
16730: PUSH
16731: LD_VAR 0 7
16735: ARRAY
16736: PPUSH
16737: CALL_OW 1
16741: ST_TO_ADDR
// end ;
16742: GO 16655
16744: POP
16745: POP
// array := tmp ;
16746: LD_ADDR_VAR 0 1
16750: PUSH
16751: LD_VAR 0 10
16755: ST_TO_ADDR
// end ;
16756: GO 16637
16758: POP
16759: POP
// result := array ;
16760: LD_ADDR_VAR 0 5
16764: PUSH
16765: LD_VAR 0 1
16769: ST_TO_ADDR
// end ;
16770: LD_VAR 0 5
16774: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
16775: LD_INT 0
16777: PPUSH
16778: PPUSH
// result := 0 ;
16779: LD_ADDR_VAR 0 3
16783: PUSH
16784: LD_INT 0
16786: ST_TO_ADDR
// if not array or not value in array then
16787: LD_VAR 0 1
16791: NOT
16792: PUSH
16793: LD_VAR 0 2
16797: PUSH
16798: LD_VAR 0 1
16802: IN
16803: NOT
16804: OR
16805: IFFALSE 16809
// exit ;
16807: GO 16863
// for i = 1 to array do
16809: LD_ADDR_VAR 0 4
16813: PUSH
16814: DOUBLE
16815: LD_INT 1
16817: DEC
16818: ST_TO_ADDR
16819: LD_VAR 0 1
16823: PUSH
16824: FOR_TO
16825: IFFALSE 16861
// if value = array [ i ] then
16827: LD_VAR 0 2
16831: PUSH
16832: LD_VAR 0 1
16836: PUSH
16837: LD_VAR 0 4
16841: ARRAY
16842: EQUAL
16843: IFFALSE 16859
// begin result := i ;
16845: LD_ADDR_VAR 0 3
16849: PUSH
16850: LD_VAR 0 4
16854: ST_TO_ADDR
// exit ;
16855: POP
16856: POP
16857: GO 16863
// end ;
16859: GO 16824
16861: POP
16862: POP
// end ;
16863: LD_VAR 0 3
16867: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
16868: LD_INT 0
16870: PPUSH
// vc_chassis := chassis ;
16871: LD_ADDR_OWVAR 37
16875: PUSH
16876: LD_VAR 0 1
16880: ST_TO_ADDR
// vc_engine := engine ;
16881: LD_ADDR_OWVAR 39
16885: PUSH
16886: LD_VAR 0 2
16890: ST_TO_ADDR
// vc_control := control ;
16891: LD_ADDR_OWVAR 38
16895: PUSH
16896: LD_VAR 0 3
16900: ST_TO_ADDR
// vc_weapon := weapon ;
16901: LD_ADDR_OWVAR 40
16905: PUSH
16906: LD_VAR 0 4
16910: ST_TO_ADDR
// vc_fuel_battery := fuel ;
16911: LD_ADDR_OWVAR 41
16915: PUSH
16916: LD_VAR 0 5
16920: ST_TO_ADDR
// end ;
16921: LD_VAR 0 6
16925: RET
// export function WantPlant ( unit ) ; var task ; begin
16926: LD_INT 0
16928: PPUSH
16929: PPUSH
// result := false ;
16930: LD_ADDR_VAR 0 2
16934: PUSH
16935: LD_INT 0
16937: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
16938: LD_ADDR_VAR 0 3
16942: PUSH
16943: LD_VAR 0 1
16947: PPUSH
16948: CALL_OW 437
16952: ST_TO_ADDR
// if task then
16953: LD_VAR 0 3
16957: IFFALSE 16985
// if task [ 1 ] [ 1 ] = p then
16959: LD_VAR 0 3
16963: PUSH
16964: LD_INT 1
16966: ARRAY
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PUSH
16972: LD_STRING p
16974: EQUAL
16975: IFFALSE 16985
// result := true ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: LD_INT 1
16984: ST_TO_ADDR
// end ;
16985: LD_VAR 0 2
16989: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
16990: LD_INT 0
16992: PPUSH
16993: PPUSH
16994: PPUSH
16995: PPUSH
// if pos < 1 then
16996: LD_VAR 0 2
17000: PUSH
17001: LD_INT 1
17003: LESS
17004: IFFALSE 17008
// exit ;
17006: GO 17311
// if pos = 1 then
17008: LD_VAR 0 2
17012: PUSH
17013: LD_INT 1
17015: EQUAL
17016: IFFALSE 17049
// result := Replace ( arr , pos [ 1 ] , value ) else
17018: LD_ADDR_VAR 0 4
17022: PUSH
17023: LD_VAR 0 1
17027: PPUSH
17028: LD_VAR 0 2
17032: PUSH
17033: LD_INT 1
17035: ARRAY
17036: PPUSH
17037: LD_VAR 0 3
17041: PPUSH
17042: CALL_OW 1
17046: ST_TO_ADDR
17047: GO 17311
// begin tmp := arr ;
17049: LD_ADDR_VAR 0 6
17053: PUSH
17054: LD_VAR 0 1
17058: ST_TO_ADDR
// s_arr := [ tmp ] ;
17059: LD_ADDR_VAR 0 7
17063: PUSH
17064: LD_VAR 0 6
17068: PUSH
17069: EMPTY
17070: LIST
17071: ST_TO_ADDR
// for i = 1 to pos - 1 do
17072: LD_ADDR_VAR 0 5
17076: PUSH
17077: DOUBLE
17078: LD_INT 1
17080: DEC
17081: ST_TO_ADDR
17082: LD_VAR 0 2
17086: PUSH
17087: LD_INT 1
17089: MINUS
17090: PUSH
17091: FOR_TO
17092: IFFALSE 17137
// begin tmp := tmp [ pos [ i ] ] ;
17094: LD_ADDR_VAR 0 6
17098: PUSH
17099: LD_VAR 0 6
17103: PUSH
17104: LD_VAR 0 2
17108: PUSH
17109: LD_VAR 0 5
17113: ARRAY
17114: ARRAY
17115: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17116: LD_ADDR_VAR 0 7
17120: PUSH
17121: LD_VAR 0 7
17125: PUSH
17126: LD_VAR 0 6
17130: PUSH
17131: EMPTY
17132: LIST
17133: ADD
17134: ST_TO_ADDR
// end ;
17135: GO 17091
17137: POP
17138: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17139: LD_ADDR_VAR 0 6
17143: PUSH
17144: LD_VAR 0 6
17148: PPUSH
17149: LD_VAR 0 2
17153: PUSH
17154: LD_VAR 0 2
17158: ARRAY
17159: PPUSH
17160: LD_VAR 0 3
17164: PPUSH
17165: CALL_OW 1
17169: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17170: LD_ADDR_VAR 0 7
17174: PUSH
17175: LD_VAR 0 7
17179: PPUSH
17180: LD_VAR 0 7
17184: PPUSH
17185: LD_VAR 0 6
17189: PPUSH
17190: CALL_OW 1
17194: ST_TO_ADDR
// for i = s_arr downto 2 do
17195: LD_ADDR_VAR 0 5
17199: PUSH
17200: DOUBLE
17201: LD_VAR 0 7
17205: INC
17206: ST_TO_ADDR
17207: LD_INT 2
17209: PUSH
17210: FOR_DOWNTO
17211: IFFALSE 17295
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17213: LD_ADDR_VAR 0 6
17217: PUSH
17218: LD_VAR 0 7
17222: PUSH
17223: LD_VAR 0 5
17227: PUSH
17228: LD_INT 1
17230: MINUS
17231: ARRAY
17232: PPUSH
17233: LD_VAR 0 2
17237: PUSH
17238: LD_VAR 0 5
17242: PUSH
17243: LD_INT 1
17245: MINUS
17246: ARRAY
17247: PPUSH
17248: LD_VAR 0 7
17252: PUSH
17253: LD_VAR 0 5
17257: ARRAY
17258: PPUSH
17259: CALL_OW 1
17263: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
17264: LD_ADDR_VAR 0 7
17268: PUSH
17269: LD_VAR 0 7
17273: PPUSH
17274: LD_VAR 0 5
17278: PUSH
17279: LD_INT 1
17281: MINUS
17282: PPUSH
17283: LD_VAR 0 6
17287: PPUSH
17288: CALL_OW 1
17292: ST_TO_ADDR
// end ;
17293: GO 17210
17295: POP
17296: POP
// result := s_arr [ 1 ] ;
17297: LD_ADDR_VAR 0 4
17301: PUSH
17302: LD_VAR 0 7
17306: PUSH
17307: LD_INT 1
17309: ARRAY
17310: ST_TO_ADDR
// end ; end ;
17311: LD_VAR 0 4
17315: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
17316: LD_INT 0
17318: PPUSH
17319: PPUSH
// if not list then
17320: LD_VAR 0 1
17324: NOT
17325: IFFALSE 17329
// exit ;
17327: GO 17420
// i := list [ pos1 ] ;
17329: LD_ADDR_VAR 0 5
17333: PUSH
17334: LD_VAR 0 1
17338: PUSH
17339: LD_VAR 0 2
17343: ARRAY
17344: ST_TO_ADDR
// if not i then
17345: LD_VAR 0 5
17349: NOT
17350: IFFALSE 17354
// exit ;
17352: GO 17420
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
17354: LD_ADDR_VAR 0 1
17358: PUSH
17359: LD_VAR 0 1
17363: PPUSH
17364: LD_VAR 0 2
17368: PPUSH
17369: LD_VAR 0 1
17373: PUSH
17374: LD_VAR 0 3
17378: ARRAY
17379: PPUSH
17380: CALL_OW 1
17384: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
17385: LD_ADDR_VAR 0 1
17389: PUSH
17390: LD_VAR 0 1
17394: PPUSH
17395: LD_VAR 0 3
17399: PPUSH
17400: LD_VAR 0 5
17404: PPUSH
17405: CALL_OW 1
17409: ST_TO_ADDR
// result := list ;
17410: LD_ADDR_VAR 0 4
17414: PUSH
17415: LD_VAR 0 1
17419: ST_TO_ADDR
// end ;
17420: LD_VAR 0 4
17424: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
17425: LD_INT 0
17427: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
17428: LD_ADDR_VAR 0 5
17432: PUSH
17433: LD_VAR 0 1
17437: PPUSH
17438: CALL_OW 250
17442: PPUSH
17443: LD_VAR 0 1
17447: PPUSH
17448: CALL_OW 251
17452: PPUSH
17453: LD_VAR 0 2
17457: PPUSH
17458: LD_VAR 0 3
17462: PPUSH
17463: LD_VAR 0 4
17467: PPUSH
17468: CALL 17478 0 5
17472: ST_TO_ADDR
// end ;
17473: LD_VAR 0 5
17477: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
17478: LD_INT 0
17480: PPUSH
17481: PPUSH
17482: PPUSH
17483: PPUSH
// if not list then
17484: LD_VAR 0 3
17488: NOT
17489: IFFALSE 17493
// exit ;
17491: GO 17881
// result := [ ] ;
17493: LD_ADDR_VAR 0 6
17497: PUSH
17498: EMPTY
17499: ST_TO_ADDR
// for i in list do
17500: LD_ADDR_VAR 0 7
17504: PUSH
17505: LD_VAR 0 3
17509: PUSH
17510: FOR_IN
17511: IFFALSE 17713
// begin tmp := GetDistUnitXY ( i , x , y ) ;
17513: LD_ADDR_VAR 0 9
17517: PUSH
17518: LD_VAR 0 7
17522: PPUSH
17523: LD_VAR 0 1
17527: PPUSH
17528: LD_VAR 0 2
17532: PPUSH
17533: CALL_OW 297
17537: ST_TO_ADDR
// if not result then
17538: LD_VAR 0 6
17542: NOT
17543: IFFALSE 17569
// result := [ [ i , tmp ] ] else
17545: LD_ADDR_VAR 0 6
17549: PUSH
17550: LD_VAR 0 7
17554: PUSH
17555: LD_VAR 0 9
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PUSH
17564: EMPTY
17565: LIST
17566: ST_TO_ADDR
17567: GO 17711
// begin if result [ result ] [ 2 ] < tmp then
17569: LD_VAR 0 6
17573: PUSH
17574: LD_VAR 0 6
17578: ARRAY
17579: PUSH
17580: LD_INT 2
17582: ARRAY
17583: PUSH
17584: LD_VAR 0 9
17588: LESS
17589: IFFALSE 17631
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
17591: LD_ADDR_VAR 0 6
17595: PUSH
17596: LD_VAR 0 6
17600: PPUSH
17601: LD_VAR 0 6
17605: PUSH
17606: LD_INT 1
17608: PLUS
17609: PPUSH
17610: LD_VAR 0 7
17614: PUSH
17615: LD_VAR 0 9
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: PPUSH
17624: CALL_OW 2
17628: ST_TO_ADDR
17629: GO 17711
// for j = 1 to result do
17631: LD_ADDR_VAR 0 8
17635: PUSH
17636: DOUBLE
17637: LD_INT 1
17639: DEC
17640: ST_TO_ADDR
17641: LD_VAR 0 6
17645: PUSH
17646: FOR_TO
17647: IFFALSE 17709
// begin if tmp < result [ j ] [ 2 ] then
17649: LD_VAR 0 9
17653: PUSH
17654: LD_VAR 0 6
17658: PUSH
17659: LD_VAR 0 8
17663: ARRAY
17664: PUSH
17665: LD_INT 2
17667: ARRAY
17668: LESS
17669: IFFALSE 17707
// begin result := Insert ( result , j , [ i , tmp ] ) ;
17671: LD_ADDR_VAR 0 6
17675: PUSH
17676: LD_VAR 0 6
17680: PPUSH
17681: LD_VAR 0 8
17685: PPUSH
17686: LD_VAR 0 7
17690: PUSH
17691: LD_VAR 0 9
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 2
17704: ST_TO_ADDR
// break ;
17705: GO 17709
// end ; end ;
17707: GO 17646
17709: POP
17710: POP
// end ; end ;
17711: GO 17510
17713: POP
17714: POP
// if result and not asc then
17715: LD_VAR 0 6
17719: PUSH
17720: LD_VAR 0 4
17724: NOT
17725: AND
17726: IFFALSE 17801
// begin tmp := result ;
17728: LD_ADDR_VAR 0 9
17732: PUSH
17733: LD_VAR 0 6
17737: ST_TO_ADDR
// for i = tmp downto 1 do
17738: LD_ADDR_VAR 0 7
17742: PUSH
17743: DOUBLE
17744: LD_VAR 0 9
17748: INC
17749: ST_TO_ADDR
17750: LD_INT 1
17752: PUSH
17753: FOR_DOWNTO
17754: IFFALSE 17799
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
17756: LD_ADDR_VAR 0 6
17760: PUSH
17761: LD_VAR 0 6
17765: PPUSH
17766: LD_VAR 0 9
17770: PUSH
17771: LD_VAR 0 7
17775: MINUS
17776: PUSH
17777: LD_INT 1
17779: PLUS
17780: PPUSH
17781: LD_VAR 0 9
17785: PUSH
17786: LD_VAR 0 7
17790: ARRAY
17791: PPUSH
17792: CALL_OW 1
17796: ST_TO_ADDR
17797: GO 17753
17799: POP
17800: POP
// end ; tmp := [ ] ;
17801: LD_ADDR_VAR 0 9
17805: PUSH
17806: EMPTY
17807: ST_TO_ADDR
// if mode then
17808: LD_VAR 0 5
17812: IFFALSE 17881
// begin for i = 1 to result do
17814: LD_ADDR_VAR 0 7
17818: PUSH
17819: DOUBLE
17820: LD_INT 1
17822: DEC
17823: ST_TO_ADDR
17824: LD_VAR 0 6
17828: PUSH
17829: FOR_TO
17830: IFFALSE 17869
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
17832: LD_ADDR_VAR 0 9
17836: PUSH
17837: LD_VAR 0 9
17841: PPUSH
17842: LD_VAR 0 7
17846: PPUSH
17847: LD_VAR 0 6
17851: PUSH
17852: LD_VAR 0 7
17856: ARRAY
17857: PUSH
17858: LD_INT 1
17860: ARRAY
17861: PPUSH
17862: CALL_OW 1
17866: ST_TO_ADDR
17867: GO 17829
17869: POP
17870: POP
// result := tmp ;
17871: LD_ADDR_VAR 0 6
17875: PUSH
17876: LD_VAR 0 9
17880: ST_TO_ADDR
// end ; end ;
17881: LD_VAR 0 6
17885: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
17886: LD_INT 0
17888: PPUSH
17889: PPUSH
17890: PPUSH
17891: PPUSH
17892: PPUSH
17893: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
17894: LD_ADDR_VAR 0 5
17898: PUSH
17899: LD_INT 0
17901: PUSH
17902: LD_INT 0
17904: PUSH
17905: LD_INT 0
17907: PUSH
17908: EMPTY
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: ST_TO_ADDR
// if not x or not y then
17916: LD_VAR 0 2
17920: NOT
17921: PUSH
17922: LD_VAR 0 3
17926: NOT
17927: OR
17928: IFFALSE 17932
// exit ;
17930: GO 19584
// if not range then
17932: LD_VAR 0 4
17936: NOT
17937: IFFALSE 17947
// range := 10 ;
17939: LD_ADDR_VAR 0 4
17943: PUSH
17944: LD_INT 10
17946: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17947: LD_ADDR_VAR 0 8
17951: PUSH
17952: LD_INT 81
17954: PUSH
17955: LD_VAR 0 1
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 92
17966: PUSH
17967: LD_VAR 0 2
17971: PUSH
17972: LD_VAR 0 3
17976: PUSH
17977: LD_VAR 0 4
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 3
17990: PUSH
17991: LD_INT 21
17993: PUSH
17994: LD_INT 3
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: PPUSH
18010: CALL_OW 69
18014: ST_TO_ADDR
// if not tmp then
18015: LD_VAR 0 8
18019: NOT
18020: IFFALSE 18024
// exit ;
18022: GO 19584
// for i in tmp do
18024: LD_ADDR_VAR 0 6
18028: PUSH
18029: LD_VAR 0 8
18033: PUSH
18034: FOR_IN
18035: IFFALSE 19559
// begin points := [ 0 , 0 , 0 ] ;
18037: LD_ADDR_VAR 0 9
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: LD_INT 0
18047: PUSH
18048: LD_INT 0
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: LIST
18055: ST_TO_ADDR
// bpoints := 1 ;
18056: LD_ADDR_VAR 0 10
18060: PUSH
18061: LD_INT 1
18063: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18064: LD_VAR 0 6
18068: PPUSH
18069: CALL_OW 247
18073: PUSH
18074: LD_INT 1
18076: DOUBLE
18077: EQUAL
18078: IFTRUE 18082
18080: GO 18660
18082: POP
// begin if GetClass ( i ) = 1 then
18083: LD_VAR 0 6
18087: PPUSH
18088: CALL_OW 257
18092: PUSH
18093: LD_INT 1
18095: EQUAL
18096: IFFALSE 18117
// points := [ 10 , 5 , 3 ] ;
18098: LD_ADDR_VAR 0 9
18102: PUSH
18103: LD_INT 10
18105: PUSH
18106: LD_INT 5
18108: PUSH
18109: LD_INT 3
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: LIST
18116: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18117: LD_VAR 0 6
18121: PPUSH
18122: CALL_OW 257
18126: PUSH
18127: LD_INT 2
18129: PUSH
18130: LD_INT 3
18132: PUSH
18133: LD_INT 4
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: LIST
18140: IN
18141: IFFALSE 18162
// points := [ 3 , 2 , 1 ] ;
18143: LD_ADDR_VAR 0 9
18147: PUSH
18148: LD_INT 3
18150: PUSH
18151: LD_INT 2
18153: PUSH
18154: LD_INT 1
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18162: LD_VAR 0 6
18166: PPUSH
18167: CALL_OW 257
18171: PUSH
18172: LD_INT 5
18174: EQUAL
18175: IFFALSE 18196
// points := [ 130 , 5 , 2 ] ;
18177: LD_ADDR_VAR 0 9
18181: PUSH
18182: LD_INT 130
18184: PUSH
18185: LD_INT 5
18187: PUSH
18188: LD_INT 2
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: LIST
18195: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18196: LD_VAR 0 6
18200: PPUSH
18201: CALL_OW 257
18205: PUSH
18206: LD_INT 8
18208: EQUAL
18209: IFFALSE 18230
// points := [ 35 , 35 , 30 ] ;
18211: LD_ADDR_VAR 0 9
18215: PUSH
18216: LD_INT 35
18218: PUSH
18219: LD_INT 35
18221: PUSH
18222: LD_INT 30
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: LIST
18229: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18230: LD_VAR 0 6
18234: PPUSH
18235: CALL_OW 257
18239: PUSH
18240: LD_INT 9
18242: EQUAL
18243: IFFALSE 18264
// points := [ 20 , 55 , 40 ] ;
18245: LD_ADDR_VAR 0 9
18249: PUSH
18250: LD_INT 20
18252: PUSH
18253: LD_INT 55
18255: PUSH
18256: LD_INT 40
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: LIST
18263: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
18264: LD_VAR 0 6
18268: PPUSH
18269: CALL_OW 257
18273: PUSH
18274: LD_INT 12
18276: PUSH
18277: LD_INT 16
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: IN
18284: IFFALSE 18305
// points := [ 5 , 3 , 2 ] ;
18286: LD_ADDR_VAR 0 9
18290: PUSH
18291: LD_INT 5
18293: PUSH
18294: LD_INT 3
18296: PUSH
18297: LD_INT 2
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: LIST
18304: ST_TO_ADDR
// if GetClass ( i ) = 17 then
18305: LD_VAR 0 6
18309: PPUSH
18310: CALL_OW 257
18314: PUSH
18315: LD_INT 17
18317: EQUAL
18318: IFFALSE 18339
// points := [ 100 , 50 , 75 ] ;
18320: LD_ADDR_VAR 0 9
18324: PUSH
18325: LD_INT 100
18327: PUSH
18328: LD_INT 50
18330: PUSH
18331: LD_INT 75
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: LIST
18338: ST_TO_ADDR
// if GetClass ( i ) = 15 then
18339: LD_VAR 0 6
18343: PPUSH
18344: CALL_OW 257
18348: PUSH
18349: LD_INT 15
18351: EQUAL
18352: IFFALSE 18373
// points := [ 10 , 5 , 3 ] ;
18354: LD_ADDR_VAR 0 9
18358: PUSH
18359: LD_INT 10
18361: PUSH
18362: LD_INT 5
18364: PUSH
18365: LD_INT 3
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: LIST
18372: ST_TO_ADDR
// if GetClass ( i ) = 14 then
18373: LD_VAR 0 6
18377: PPUSH
18378: CALL_OW 257
18382: PUSH
18383: LD_INT 14
18385: EQUAL
18386: IFFALSE 18407
// points := [ 10 , 0 , 0 ] ;
18388: LD_ADDR_VAR 0 9
18392: PUSH
18393: LD_INT 10
18395: PUSH
18396: LD_INT 0
18398: PUSH
18399: LD_INT 0
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: LIST
18406: ST_TO_ADDR
// if GetClass ( i ) = 11 then
18407: LD_VAR 0 6
18411: PPUSH
18412: CALL_OW 257
18416: PUSH
18417: LD_INT 11
18419: EQUAL
18420: IFFALSE 18441
// points := [ 30 , 10 , 5 ] ;
18422: LD_ADDR_VAR 0 9
18426: PUSH
18427: LD_INT 30
18429: PUSH
18430: LD_INT 10
18432: PUSH
18433: LD_INT 5
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: LIST
18440: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
18441: LD_VAR 0 1
18445: PPUSH
18446: LD_INT 5
18448: PPUSH
18449: CALL_OW 321
18453: PUSH
18454: LD_INT 2
18456: EQUAL
18457: IFFALSE 18474
// bpoints := bpoints * 1.8 ;
18459: LD_ADDR_VAR 0 10
18463: PUSH
18464: LD_VAR 0 10
18468: PUSH
18469: LD_REAL  1.80000000000000E+0000
18472: MUL
18473: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
18474: LD_VAR 0 6
18478: PPUSH
18479: CALL_OW 257
18483: PUSH
18484: LD_INT 1
18486: PUSH
18487: LD_INT 2
18489: PUSH
18490: LD_INT 3
18492: PUSH
18493: LD_INT 4
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: IN
18502: PUSH
18503: LD_VAR 0 1
18507: PPUSH
18508: LD_INT 51
18510: PPUSH
18511: CALL_OW 321
18515: PUSH
18516: LD_INT 2
18518: EQUAL
18519: AND
18520: IFFALSE 18537
// bpoints := bpoints * 1.2 ;
18522: LD_ADDR_VAR 0 10
18526: PUSH
18527: LD_VAR 0 10
18531: PUSH
18532: LD_REAL  1.20000000000000E+0000
18535: MUL
18536: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
18537: LD_VAR 0 6
18541: PPUSH
18542: CALL_OW 257
18546: PUSH
18547: LD_INT 5
18549: PUSH
18550: LD_INT 7
18552: PUSH
18553: LD_INT 9
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: IN
18561: PUSH
18562: LD_VAR 0 1
18566: PPUSH
18567: LD_INT 52
18569: PPUSH
18570: CALL_OW 321
18574: PUSH
18575: LD_INT 2
18577: EQUAL
18578: AND
18579: IFFALSE 18596
// bpoints := bpoints * 1.5 ;
18581: LD_ADDR_VAR 0 10
18585: PUSH
18586: LD_VAR 0 10
18590: PUSH
18591: LD_REAL  1.50000000000000E+0000
18594: MUL
18595: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
18596: LD_VAR 0 1
18600: PPUSH
18601: LD_INT 66
18603: PPUSH
18604: CALL_OW 321
18608: PUSH
18609: LD_INT 2
18611: EQUAL
18612: IFFALSE 18629
// bpoints := bpoints * 1.1 ;
18614: LD_ADDR_VAR 0 10
18618: PUSH
18619: LD_VAR 0 10
18623: PUSH
18624: LD_REAL  1.10000000000000E+0000
18627: MUL
18628: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
18629: LD_ADDR_VAR 0 10
18633: PUSH
18634: LD_VAR 0 10
18638: PUSH
18639: LD_VAR 0 6
18643: PPUSH
18644: LD_INT 1
18646: PPUSH
18647: CALL_OW 259
18651: PUSH
18652: LD_REAL  1.15000000000000E+0000
18655: MUL
18656: MUL
18657: ST_TO_ADDR
// end ; unit_vehicle :
18658: GO 19488
18660: LD_INT 2
18662: DOUBLE
18663: EQUAL
18664: IFTRUE 18668
18666: GO 19476
18668: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
18669: LD_VAR 0 6
18673: PPUSH
18674: CALL_OW 264
18678: PUSH
18679: LD_INT 2
18681: PUSH
18682: LD_INT 42
18684: PUSH
18685: LD_INT 24
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: IN
18693: IFFALSE 18714
// points := [ 25 , 5 , 3 ] ;
18695: LD_ADDR_VAR 0 9
18699: PUSH
18700: LD_INT 25
18702: PUSH
18703: LD_INT 5
18705: PUSH
18706: LD_INT 3
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: LIST
18713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
18714: LD_VAR 0 6
18718: PPUSH
18719: CALL_OW 264
18723: PUSH
18724: LD_INT 4
18726: PUSH
18727: LD_INT 43
18729: PUSH
18730: LD_INT 25
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: LIST
18737: IN
18738: IFFALSE 18759
// points := [ 40 , 15 , 5 ] ;
18740: LD_ADDR_VAR 0 9
18744: PUSH
18745: LD_INT 40
18747: PUSH
18748: LD_INT 15
18750: PUSH
18751: LD_INT 5
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: LIST
18758: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
18759: LD_VAR 0 6
18763: PPUSH
18764: CALL_OW 264
18768: PUSH
18769: LD_INT 3
18771: PUSH
18772: LD_INT 23
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: IN
18779: IFFALSE 18800
// points := [ 7 , 25 , 8 ] ;
18781: LD_ADDR_VAR 0 9
18785: PUSH
18786: LD_INT 7
18788: PUSH
18789: LD_INT 25
18791: PUSH
18792: LD_INT 8
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: LIST
18799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
18800: LD_VAR 0 6
18804: PPUSH
18805: CALL_OW 264
18809: PUSH
18810: LD_INT 5
18812: PUSH
18813: LD_INT 27
18815: PUSH
18816: LD_INT 44
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: LIST
18823: IN
18824: IFFALSE 18845
// points := [ 14 , 50 , 16 ] ;
18826: LD_ADDR_VAR 0 9
18830: PUSH
18831: LD_INT 14
18833: PUSH
18834: LD_INT 50
18836: PUSH
18837: LD_INT 16
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: LIST
18844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
18845: LD_VAR 0 6
18849: PPUSH
18850: CALL_OW 264
18854: PUSH
18855: LD_INT 6
18857: PUSH
18858: LD_INT 46
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: IN
18865: IFFALSE 18886
// points := [ 32 , 120 , 70 ] ;
18867: LD_ADDR_VAR 0 9
18871: PUSH
18872: LD_INT 32
18874: PUSH
18875: LD_INT 120
18877: PUSH
18878: LD_INT 70
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
18886: LD_VAR 0 6
18890: PPUSH
18891: CALL_OW 264
18895: PUSH
18896: LD_INT 7
18898: PUSH
18899: LD_INT 28
18901: PUSH
18902: LD_INT 45
18904: PUSH
18905: LD_EXP 84
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: IN
18916: IFFALSE 18937
// points := [ 35 , 20 , 45 ] ;
18918: LD_ADDR_VAR 0 9
18922: PUSH
18923: LD_INT 35
18925: PUSH
18926: LD_INT 20
18928: PUSH
18929: LD_INT 45
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: LIST
18936: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
18937: LD_VAR 0 6
18941: PPUSH
18942: CALL_OW 264
18946: PUSH
18947: LD_INT 47
18949: PUSH
18950: EMPTY
18951: LIST
18952: IN
18953: IFFALSE 18974
// points := [ 67 , 45 , 75 ] ;
18955: LD_ADDR_VAR 0 9
18959: PUSH
18960: LD_INT 67
18962: PUSH
18963: LD_INT 45
18965: PUSH
18966: LD_INT 75
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: LIST
18973: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
18974: LD_VAR 0 6
18978: PPUSH
18979: CALL_OW 264
18983: PUSH
18984: LD_INT 26
18986: PUSH
18987: EMPTY
18988: LIST
18989: IN
18990: IFFALSE 19011
// points := [ 120 , 30 , 80 ] ;
18992: LD_ADDR_VAR 0 9
18996: PUSH
18997: LD_INT 120
18999: PUSH
19000: LD_INT 30
19002: PUSH
19003: LD_INT 80
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: LIST
19010: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19011: LD_VAR 0 6
19015: PPUSH
19016: CALL_OW 264
19020: PUSH
19021: LD_INT 22
19023: PUSH
19024: EMPTY
19025: LIST
19026: IN
19027: IFFALSE 19048
// points := [ 40 , 1 , 1 ] ;
19029: LD_ADDR_VAR 0 9
19033: PUSH
19034: LD_INT 40
19036: PUSH
19037: LD_INT 1
19039: PUSH
19040: LD_INT 1
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: LIST
19047: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19048: LD_VAR 0 6
19052: PPUSH
19053: CALL_OW 264
19057: PUSH
19058: LD_INT 29
19060: PUSH
19061: EMPTY
19062: LIST
19063: IN
19064: IFFALSE 19085
// points := [ 70 , 200 , 400 ] ;
19066: LD_ADDR_VAR 0 9
19070: PUSH
19071: LD_INT 70
19073: PUSH
19074: LD_INT 200
19076: PUSH
19077: LD_INT 400
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19085: LD_VAR 0 6
19089: PPUSH
19090: CALL_OW 264
19094: PUSH
19095: LD_INT 14
19097: PUSH
19098: LD_INT 53
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: IN
19105: IFFALSE 19126
// points := [ 40 , 10 , 20 ] ;
19107: LD_ADDR_VAR 0 9
19111: PUSH
19112: LD_INT 40
19114: PUSH
19115: LD_INT 10
19117: PUSH
19118: LD_INT 20
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19126: LD_VAR 0 6
19130: PPUSH
19131: CALL_OW 264
19135: PUSH
19136: LD_INT 9
19138: PUSH
19139: EMPTY
19140: LIST
19141: IN
19142: IFFALSE 19163
// points := [ 5 , 70 , 20 ] ;
19144: LD_ADDR_VAR 0 9
19148: PUSH
19149: LD_INT 5
19151: PUSH
19152: LD_INT 70
19154: PUSH
19155: LD_INT 20
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: LIST
19162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19163: LD_VAR 0 6
19167: PPUSH
19168: CALL_OW 264
19172: PUSH
19173: LD_INT 10
19175: PUSH
19176: EMPTY
19177: LIST
19178: IN
19179: IFFALSE 19200
// points := [ 35 , 110 , 70 ] ;
19181: LD_ADDR_VAR 0 9
19185: PUSH
19186: LD_INT 35
19188: PUSH
19189: LD_INT 110
19191: PUSH
19192: LD_INT 70
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19200: LD_VAR 0 6
19204: PPUSH
19205: CALL_OW 265
19209: PUSH
19210: LD_INT 25
19212: EQUAL
19213: IFFALSE 19234
// points := [ 80 , 65 , 100 ] ;
19215: LD_ADDR_VAR 0 9
19219: PUSH
19220: LD_INT 80
19222: PUSH
19223: LD_INT 65
19225: PUSH
19226: LD_INT 100
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19234: LD_VAR 0 6
19238: PPUSH
19239: CALL_OW 263
19243: PUSH
19244: LD_INT 1
19246: EQUAL
19247: IFFALSE 19282
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
19249: LD_ADDR_VAR 0 10
19253: PUSH
19254: LD_VAR 0 10
19258: PUSH
19259: LD_VAR 0 6
19263: PPUSH
19264: CALL_OW 311
19268: PPUSH
19269: LD_INT 3
19271: PPUSH
19272: CALL_OW 259
19276: PUSH
19277: LD_INT 4
19279: MUL
19280: MUL
19281: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
19282: LD_VAR 0 6
19286: PPUSH
19287: CALL_OW 263
19291: PUSH
19292: LD_INT 2
19294: EQUAL
19295: IFFALSE 19346
// begin j := IsControledBy ( i ) ;
19297: LD_ADDR_VAR 0 7
19301: PUSH
19302: LD_VAR 0 6
19306: PPUSH
19307: CALL_OW 312
19311: ST_TO_ADDR
// if j then
19312: LD_VAR 0 7
19316: IFFALSE 19346
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
19318: LD_ADDR_VAR 0 10
19322: PUSH
19323: LD_VAR 0 10
19327: PUSH
19328: LD_VAR 0 7
19332: PPUSH
19333: LD_INT 3
19335: PPUSH
19336: CALL_OW 259
19340: PUSH
19341: LD_INT 3
19343: MUL
19344: MUL
19345: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
19346: LD_VAR 0 6
19350: PPUSH
19351: CALL_OW 264
19355: PUSH
19356: LD_INT 5
19358: PUSH
19359: LD_INT 6
19361: PUSH
19362: LD_INT 46
19364: PUSH
19365: LD_INT 44
19367: PUSH
19368: LD_INT 47
19370: PUSH
19371: LD_INT 45
19373: PUSH
19374: LD_INT 28
19376: PUSH
19377: LD_INT 7
19379: PUSH
19380: LD_INT 27
19382: PUSH
19383: LD_INT 29
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: IN
19398: PUSH
19399: LD_VAR 0 1
19403: PPUSH
19404: LD_INT 52
19406: PPUSH
19407: CALL_OW 321
19411: PUSH
19412: LD_INT 2
19414: EQUAL
19415: AND
19416: IFFALSE 19433
// bpoints := bpoints * 1.2 ;
19418: LD_ADDR_VAR 0 10
19422: PUSH
19423: LD_VAR 0 10
19427: PUSH
19428: LD_REAL  1.20000000000000E+0000
19431: MUL
19432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
19433: LD_VAR 0 6
19437: PPUSH
19438: CALL_OW 264
19442: PUSH
19443: LD_INT 6
19445: PUSH
19446: LD_INT 46
19448: PUSH
19449: LD_INT 47
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: LIST
19456: IN
19457: IFFALSE 19474
// bpoints := bpoints * 1.2 ;
19459: LD_ADDR_VAR 0 10
19463: PUSH
19464: LD_VAR 0 10
19468: PUSH
19469: LD_REAL  1.20000000000000E+0000
19472: MUL
19473: ST_TO_ADDR
// end ; unit_building :
19474: GO 19488
19476: LD_INT 3
19478: DOUBLE
19479: EQUAL
19480: IFTRUE 19484
19482: GO 19487
19484: POP
// ; end ;
19485: GO 19488
19487: POP
// for j = 1 to 3 do
19488: LD_ADDR_VAR 0 7
19492: PUSH
19493: DOUBLE
19494: LD_INT 1
19496: DEC
19497: ST_TO_ADDR
19498: LD_INT 3
19500: PUSH
19501: FOR_TO
19502: IFFALSE 19555
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
19504: LD_ADDR_VAR 0 5
19508: PUSH
19509: LD_VAR 0 5
19513: PPUSH
19514: LD_VAR 0 7
19518: PPUSH
19519: LD_VAR 0 5
19523: PUSH
19524: LD_VAR 0 7
19528: ARRAY
19529: PUSH
19530: LD_VAR 0 9
19534: PUSH
19535: LD_VAR 0 7
19539: ARRAY
19540: PUSH
19541: LD_VAR 0 10
19545: MUL
19546: PLUS
19547: PPUSH
19548: CALL_OW 1
19552: ST_TO_ADDR
19553: GO 19501
19555: POP
19556: POP
// end ;
19557: GO 18034
19559: POP
19560: POP
// result := Replace ( result , 4 , tmp ) ;
19561: LD_ADDR_VAR 0 5
19565: PUSH
19566: LD_VAR 0 5
19570: PPUSH
19571: LD_INT 4
19573: PPUSH
19574: LD_VAR 0 8
19578: PPUSH
19579: CALL_OW 1
19583: ST_TO_ADDR
// end ;
19584: LD_VAR 0 5
19588: RET
// export function DangerAtRange ( unit , range ) ; begin
19589: LD_INT 0
19591: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
19592: LD_ADDR_VAR 0 3
19596: PUSH
19597: LD_VAR 0 1
19601: PPUSH
19602: CALL_OW 255
19606: PPUSH
19607: LD_VAR 0 1
19611: PPUSH
19612: CALL_OW 250
19616: PPUSH
19617: LD_VAR 0 1
19621: PPUSH
19622: CALL_OW 251
19626: PPUSH
19627: LD_VAR 0 2
19631: PPUSH
19632: CALL 17886 0 4
19636: ST_TO_ADDR
// end ;
19637: LD_VAR 0 3
19641: RET
// export function DangerInArea ( side , area ) ; begin
19642: LD_INT 0
19644: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
19645: LD_ADDR_VAR 0 3
19649: PUSH
19650: LD_VAR 0 2
19654: PPUSH
19655: LD_INT 81
19657: PUSH
19658: LD_VAR 0 1
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PPUSH
19667: CALL_OW 70
19671: ST_TO_ADDR
// end ;
19672: LD_VAR 0 3
19676: RET
// export function IsExtension ( b ) ; begin
19677: LD_INT 0
19679: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
19680: LD_ADDR_VAR 0 2
19684: PUSH
19685: LD_VAR 0 1
19689: PUSH
19690: LD_INT 23
19692: PUSH
19693: LD_INT 20
19695: PUSH
19696: LD_INT 22
19698: PUSH
19699: LD_INT 17
19701: PUSH
19702: LD_INT 24
19704: PUSH
19705: LD_INT 21
19707: PUSH
19708: LD_INT 19
19710: PUSH
19711: LD_INT 16
19713: PUSH
19714: LD_INT 25
19716: PUSH
19717: LD_INT 18
19719: PUSH
19720: EMPTY
19721: LIST
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: IN
19732: ST_TO_ADDR
// end ;
19733: LD_VAR 0 2
19737: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
19738: LD_INT 0
19740: PPUSH
19741: PPUSH
19742: PPUSH
// result := [ ] ;
19743: LD_ADDR_VAR 0 4
19747: PUSH
19748: EMPTY
19749: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
19750: LD_ADDR_VAR 0 5
19754: PUSH
19755: LD_VAR 0 2
19759: PPUSH
19760: LD_INT 21
19762: PUSH
19763: LD_INT 3
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PPUSH
19770: CALL_OW 70
19774: ST_TO_ADDR
// if not tmp then
19775: LD_VAR 0 5
19779: NOT
19780: IFFALSE 19784
// exit ;
19782: GO 19848
// if checkLink then
19784: LD_VAR 0 3
19788: IFFALSE 19838
// begin for i in tmp do
19790: LD_ADDR_VAR 0 6
19794: PUSH
19795: LD_VAR 0 5
19799: PUSH
19800: FOR_IN
19801: IFFALSE 19836
// if GetBase ( i ) <> base then
19803: LD_VAR 0 6
19807: PPUSH
19808: CALL_OW 274
19812: PUSH
19813: LD_VAR 0 1
19817: NONEQUAL
19818: IFFALSE 19834
// ComLinkToBase ( base , i ) ;
19820: LD_VAR 0 1
19824: PPUSH
19825: LD_VAR 0 6
19829: PPUSH
19830: CALL_OW 169
19834: GO 19800
19836: POP
19837: POP
// end ; result := tmp ;
19838: LD_ADDR_VAR 0 4
19842: PUSH
19843: LD_VAR 0 5
19847: ST_TO_ADDR
// end ;
19848: LD_VAR 0 4
19852: RET
// export function ComComplete ( units , b ) ; var i ; begin
19853: LD_INT 0
19855: PPUSH
19856: PPUSH
// if not units then
19857: LD_VAR 0 1
19861: NOT
19862: IFFALSE 19866
// exit ;
19864: GO 19956
// for i in units do
19866: LD_ADDR_VAR 0 4
19870: PUSH
19871: LD_VAR 0 1
19875: PUSH
19876: FOR_IN
19877: IFFALSE 19954
// if BuildingStatus ( b ) = bs_build then
19879: LD_VAR 0 2
19883: PPUSH
19884: CALL_OW 461
19888: PUSH
19889: LD_INT 1
19891: EQUAL
19892: IFFALSE 19952
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
19894: LD_VAR 0 4
19898: PPUSH
19899: LD_STRING h
19901: PUSH
19902: LD_VAR 0 2
19906: PPUSH
19907: CALL_OW 250
19911: PUSH
19912: LD_VAR 0 2
19916: PPUSH
19917: CALL_OW 251
19921: PUSH
19922: LD_VAR 0 2
19926: PUSH
19927: LD_INT 0
19929: PUSH
19930: LD_INT 0
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: PPUSH
19948: CALL_OW 446
19952: GO 19876
19954: POP
19955: POP
// end ;
19956: LD_VAR 0 3
19960: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
19961: LD_INT 0
19963: PPUSH
19964: PPUSH
19965: PPUSH
19966: PPUSH
19967: PPUSH
19968: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
19969: LD_VAR 0 1
19973: NOT
19974: PUSH
19975: LD_VAR 0 1
19979: PPUSH
19980: CALL_OW 263
19984: PUSH
19985: LD_INT 2
19987: NONEQUAL
19988: OR
19989: IFFALSE 19993
// exit ;
19991: GO 20309
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
19993: LD_ADDR_VAR 0 6
19997: PUSH
19998: LD_INT 22
20000: PUSH
20001: LD_VAR 0 1
20005: PPUSH
20006: CALL_OW 255
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: LD_INT 30
20020: PUSH
20021: LD_INT 36
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 34
20030: PUSH
20031: LD_INT 31
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: LIST
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: PPUSH
20047: CALL_OW 69
20051: ST_TO_ADDR
// if not tmp then
20052: LD_VAR 0 6
20056: NOT
20057: IFFALSE 20061
// exit ;
20059: GO 20309
// result := [ ] ;
20061: LD_ADDR_VAR 0 2
20065: PUSH
20066: EMPTY
20067: ST_TO_ADDR
// for i in tmp do
20068: LD_ADDR_VAR 0 3
20072: PUSH
20073: LD_VAR 0 6
20077: PUSH
20078: FOR_IN
20079: IFFALSE 20150
// begin t := UnitsInside ( i ) ;
20081: LD_ADDR_VAR 0 4
20085: PUSH
20086: LD_VAR 0 3
20090: PPUSH
20091: CALL_OW 313
20095: ST_TO_ADDR
// if t then
20096: LD_VAR 0 4
20100: IFFALSE 20148
// for j in t do
20102: LD_ADDR_VAR 0 7
20106: PUSH
20107: LD_VAR 0 4
20111: PUSH
20112: FOR_IN
20113: IFFALSE 20146
// result := Replace ( result , result + 1 , j ) ;
20115: LD_ADDR_VAR 0 2
20119: PUSH
20120: LD_VAR 0 2
20124: PPUSH
20125: LD_VAR 0 2
20129: PUSH
20130: LD_INT 1
20132: PLUS
20133: PPUSH
20134: LD_VAR 0 7
20138: PPUSH
20139: CALL_OW 1
20143: ST_TO_ADDR
20144: GO 20112
20146: POP
20147: POP
// end ;
20148: GO 20078
20150: POP
20151: POP
// if not result then
20152: LD_VAR 0 2
20156: NOT
20157: IFFALSE 20161
// exit ;
20159: GO 20309
// mech := result [ 1 ] ;
20161: LD_ADDR_VAR 0 5
20165: PUSH
20166: LD_VAR 0 2
20170: PUSH
20171: LD_INT 1
20173: ARRAY
20174: ST_TO_ADDR
// if result > 1 then
20175: LD_VAR 0 2
20179: PUSH
20180: LD_INT 1
20182: GREATER
20183: IFFALSE 20295
// begin for i = 2 to result do
20185: LD_ADDR_VAR 0 3
20189: PUSH
20190: DOUBLE
20191: LD_INT 2
20193: DEC
20194: ST_TO_ADDR
20195: LD_VAR 0 2
20199: PUSH
20200: FOR_TO
20201: IFFALSE 20293
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20203: LD_ADDR_VAR 0 4
20207: PUSH
20208: LD_VAR 0 2
20212: PUSH
20213: LD_VAR 0 3
20217: ARRAY
20218: PPUSH
20219: LD_INT 3
20221: PPUSH
20222: CALL_OW 259
20226: PUSH
20227: LD_VAR 0 2
20231: PUSH
20232: LD_VAR 0 3
20236: ARRAY
20237: PPUSH
20238: CALL_OW 432
20242: MINUS
20243: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20244: LD_VAR 0 4
20248: PUSH
20249: LD_VAR 0 5
20253: PPUSH
20254: LD_INT 3
20256: PPUSH
20257: CALL_OW 259
20261: PUSH
20262: LD_VAR 0 5
20266: PPUSH
20267: CALL_OW 432
20271: MINUS
20272: GREATEREQUAL
20273: IFFALSE 20291
// mech := result [ i ] ;
20275: LD_ADDR_VAR 0 5
20279: PUSH
20280: LD_VAR 0 2
20284: PUSH
20285: LD_VAR 0 3
20289: ARRAY
20290: ST_TO_ADDR
// end ;
20291: GO 20200
20293: POP
20294: POP
// end ; ComLinkTo ( vehicle , mech ) ;
20295: LD_VAR 0 1
20299: PPUSH
20300: LD_VAR 0 5
20304: PPUSH
20305: CALL_OW 135
// end ;
20309: LD_VAR 0 2
20313: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
20314: LD_INT 0
20316: PPUSH
20317: PPUSH
20318: PPUSH
20319: PPUSH
20320: PPUSH
20321: PPUSH
20322: PPUSH
20323: PPUSH
20324: PPUSH
20325: PPUSH
20326: PPUSH
20327: PPUSH
20328: PPUSH
// result := [ ] ;
20329: LD_ADDR_VAR 0 7
20333: PUSH
20334: EMPTY
20335: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
20336: LD_VAR 0 1
20340: PPUSH
20341: CALL_OW 266
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: LD_INT 1
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: IN
20356: NOT
20357: IFFALSE 20361
// exit ;
20359: GO 21995
// if name then
20361: LD_VAR 0 3
20365: IFFALSE 20381
// SetBName ( base_dep , name ) ;
20367: LD_VAR 0 1
20371: PPUSH
20372: LD_VAR 0 3
20376: PPUSH
20377: CALL_OW 500
// base := GetBase ( base_dep ) ;
20381: LD_ADDR_VAR 0 15
20385: PUSH
20386: LD_VAR 0 1
20390: PPUSH
20391: CALL_OW 274
20395: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
20396: LD_ADDR_VAR 0 16
20400: PUSH
20401: LD_VAR 0 1
20405: PPUSH
20406: CALL_OW 255
20410: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
20411: LD_ADDR_VAR 0 17
20415: PUSH
20416: LD_VAR 0 1
20420: PPUSH
20421: CALL_OW 248
20425: ST_TO_ADDR
// if sources then
20426: LD_VAR 0 5
20430: IFFALSE 20477
// for i = 1 to 3 do
20432: LD_ADDR_VAR 0 8
20436: PUSH
20437: DOUBLE
20438: LD_INT 1
20440: DEC
20441: ST_TO_ADDR
20442: LD_INT 3
20444: PUSH
20445: FOR_TO
20446: IFFALSE 20475
// AddResourceType ( base , i , sources [ i ] ) ;
20448: LD_VAR 0 15
20452: PPUSH
20453: LD_VAR 0 8
20457: PPUSH
20458: LD_VAR 0 5
20462: PUSH
20463: LD_VAR 0 8
20467: ARRAY
20468: PPUSH
20469: CALL_OW 276
20473: GO 20445
20475: POP
20476: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
20477: LD_ADDR_VAR 0 18
20481: PUSH
20482: LD_VAR 0 15
20486: PPUSH
20487: LD_VAR 0 2
20491: PPUSH
20492: LD_INT 1
20494: PPUSH
20495: CALL 19738 0 3
20499: ST_TO_ADDR
// InitHc ;
20500: CALL_OW 19
// InitUc ;
20504: CALL_OW 18
// uc_side := side ;
20508: LD_ADDR_OWVAR 20
20512: PUSH
20513: LD_VAR 0 16
20517: ST_TO_ADDR
// uc_nation := nation ;
20518: LD_ADDR_OWVAR 21
20522: PUSH
20523: LD_VAR 0 17
20527: ST_TO_ADDR
// if buildings then
20528: LD_VAR 0 18
20532: IFFALSE 21854
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
20534: LD_ADDR_VAR 0 19
20538: PUSH
20539: LD_VAR 0 18
20543: PPUSH
20544: LD_INT 2
20546: PUSH
20547: LD_INT 30
20549: PUSH
20550: LD_INT 29
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 30
20559: PUSH
20560: LD_INT 30
20562: PUSH
20563: EMPTY
20564: LIST
20565: LIST
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: LIST
20571: PPUSH
20572: CALL_OW 72
20576: ST_TO_ADDR
// if tmp then
20577: LD_VAR 0 19
20581: IFFALSE 20629
// for i in tmp do
20583: LD_ADDR_VAR 0 8
20587: PUSH
20588: LD_VAR 0 19
20592: PUSH
20593: FOR_IN
20594: IFFALSE 20627
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
20596: LD_VAR 0 8
20600: PPUSH
20601: CALL_OW 250
20605: PPUSH
20606: LD_VAR 0 8
20610: PPUSH
20611: CALL_OW 251
20615: PPUSH
20616: LD_VAR 0 16
20620: PPUSH
20621: CALL_OW 441
20625: GO 20593
20627: POP
20628: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
20629: LD_VAR 0 18
20633: PPUSH
20634: LD_INT 2
20636: PUSH
20637: LD_INT 30
20639: PUSH
20640: LD_INT 32
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 30
20649: PUSH
20650: LD_INT 33
20652: PUSH
20653: EMPTY
20654: LIST
20655: LIST
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: LIST
20661: PPUSH
20662: CALL_OW 72
20666: IFFALSE 20754
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
20668: LD_ADDR_VAR 0 8
20672: PUSH
20673: LD_VAR 0 18
20677: PPUSH
20678: LD_INT 2
20680: PUSH
20681: LD_INT 30
20683: PUSH
20684: LD_INT 32
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 30
20693: PUSH
20694: LD_INT 33
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: LIST
20705: PPUSH
20706: CALL_OW 72
20710: PUSH
20711: FOR_IN
20712: IFFALSE 20752
// begin if not GetBWeapon ( i ) then
20714: LD_VAR 0 8
20718: PPUSH
20719: CALL_OW 269
20723: NOT
20724: IFFALSE 20750
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
20726: LD_VAR 0 8
20730: PPUSH
20731: LD_VAR 0 8
20735: PPUSH
20736: LD_VAR 0 2
20740: PPUSH
20741: CALL 22000 0 2
20745: PPUSH
20746: CALL_OW 431
// end ;
20750: GO 20711
20752: POP
20753: POP
// end ; for i = 1 to personel do
20754: LD_ADDR_VAR 0 8
20758: PUSH
20759: DOUBLE
20760: LD_INT 1
20762: DEC
20763: ST_TO_ADDR
20764: LD_VAR 0 6
20768: PUSH
20769: FOR_TO
20770: IFFALSE 21834
// begin if i > 4 then
20772: LD_VAR 0 8
20776: PUSH
20777: LD_INT 4
20779: GREATER
20780: IFFALSE 20784
// break ;
20782: GO 21834
// case i of 1 :
20784: LD_VAR 0 8
20788: PUSH
20789: LD_INT 1
20791: DOUBLE
20792: EQUAL
20793: IFTRUE 20797
20795: GO 20877
20797: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
20798: LD_ADDR_VAR 0 12
20802: PUSH
20803: LD_VAR 0 18
20807: PPUSH
20808: LD_INT 22
20810: PUSH
20811: LD_VAR 0 16
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 58
20822: PUSH
20823: EMPTY
20824: LIST
20825: PUSH
20826: LD_INT 2
20828: PUSH
20829: LD_INT 30
20831: PUSH
20832: LD_INT 32
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 30
20841: PUSH
20842: LD_INT 4
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 30
20851: PUSH
20852: LD_INT 5
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: PPUSH
20870: CALL_OW 72
20874: ST_TO_ADDR
20875: GO 21099
20877: LD_INT 2
20879: DOUBLE
20880: EQUAL
20881: IFTRUE 20885
20883: GO 20947
20885: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
20886: LD_ADDR_VAR 0 12
20890: PUSH
20891: LD_VAR 0 18
20895: PPUSH
20896: LD_INT 22
20898: PUSH
20899: LD_VAR 0 16
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: LD_INT 30
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 30
20923: PUSH
20924: LD_INT 1
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: LIST
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PPUSH
20940: CALL_OW 72
20944: ST_TO_ADDR
20945: GO 21099
20947: LD_INT 3
20949: DOUBLE
20950: EQUAL
20951: IFTRUE 20955
20953: GO 21017
20955: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
20956: LD_ADDR_VAR 0 12
20960: PUSH
20961: LD_VAR 0 18
20965: PPUSH
20966: LD_INT 22
20968: PUSH
20969: LD_VAR 0 16
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 30
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 30
20993: PUSH
20994: LD_INT 3
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PPUSH
21010: CALL_OW 72
21014: ST_TO_ADDR
21015: GO 21099
21017: LD_INT 4
21019: DOUBLE
21020: EQUAL
21021: IFTRUE 21025
21023: GO 21098
21025: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21026: LD_ADDR_VAR 0 12
21030: PUSH
21031: LD_VAR 0 18
21035: PPUSH
21036: LD_INT 22
21038: PUSH
21039: LD_VAR 0 16
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 2
21050: PUSH
21051: LD_INT 30
21053: PUSH
21054: LD_INT 6
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 30
21063: PUSH
21064: LD_INT 7
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: PUSH
21071: LD_INT 30
21073: PUSH
21074: LD_INT 8
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PPUSH
21091: CALL_OW 72
21095: ST_TO_ADDR
21096: GO 21099
21098: POP
// if i = 1 then
21099: LD_VAR 0 8
21103: PUSH
21104: LD_INT 1
21106: EQUAL
21107: IFFALSE 21218
// begin tmp := [ ] ;
21109: LD_ADDR_VAR 0 19
21113: PUSH
21114: EMPTY
21115: ST_TO_ADDR
// for j in f do
21116: LD_ADDR_VAR 0 9
21120: PUSH
21121: LD_VAR 0 12
21125: PUSH
21126: FOR_IN
21127: IFFALSE 21200
// if GetBType ( j ) = b_bunker then
21129: LD_VAR 0 9
21133: PPUSH
21134: CALL_OW 266
21138: PUSH
21139: LD_INT 32
21141: EQUAL
21142: IFFALSE 21169
// tmp := Insert ( tmp , 1 , j ) else
21144: LD_ADDR_VAR 0 19
21148: PUSH
21149: LD_VAR 0 19
21153: PPUSH
21154: LD_INT 1
21156: PPUSH
21157: LD_VAR 0 9
21161: PPUSH
21162: CALL_OW 2
21166: ST_TO_ADDR
21167: GO 21198
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21169: LD_ADDR_VAR 0 19
21173: PUSH
21174: LD_VAR 0 19
21178: PPUSH
21179: LD_VAR 0 19
21183: PUSH
21184: LD_INT 1
21186: PLUS
21187: PPUSH
21188: LD_VAR 0 9
21192: PPUSH
21193: CALL_OW 2
21197: ST_TO_ADDR
21198: GO 21126
21200: POP
21201: POP
// if tmp then
21202: LD_VAR 0 19
21206: IFFALSE 21218
// f := tmp ;
21208: LD_ADDR_VAR 0 12
21212: PUSH
21213: LD_VAR 0 19
21217: ST_TO_ADDR
// end ; x := personel [ i ] ;
21218: LD_ADDR_VAR 0 13
21222: PUSH
21223: LD_VAR 0 6
21227: PUSH
21228: LD_VAR 0 8
21232: ARRAY
21233: ST_TO_ADDR
// if x = - 1 then
21234: LD_VAR 0 13
21238: PUSH
21239: LD_INT 1
21241: NEG
21242: EQUAL
21243: IFFALSE 21452
// begin for j in f do
21245: LD_ADDR_VAR 0 9
21249: PUSH
21250: LD_VAR 0 12
21254: PUSH
21255: FOR_IN
21256: IFFALSE 21448
// repeat InitHc ;
21258: CALL_OW 19
// if GetBType ( j ) = b_barracks then
21262: LD_VAR 0 9
21266: PPUSH
21267: CALL_OW 266
21271: PUSH
21272: LD_INT 5
21274: EQUAL
21275: IFFALSE 21345
// begin if UnitsInside ( j ) < 3 then
21277: LD_VAR 0 9
21281: PPUSH
21282: CALL_OW 313
21286: PUSH
21287: LD_INT 3
21289: LESS
21290: IFFALSE 21326
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21292: LD_INT 0
21294: PPUSH
21295: LD_INT 5
21297: PUSH
21298: LD_INT 8
21300: PUSH
21301: LD_INT 9
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: PUSH
21309: LD_VAR 0 17
21313: ARRAY
21314: PPUSH
21315: LD_VAR 0 4
21319: PPUSH
21320: CALL_OW 380
21324: GO 21343
// PrepareHuman ( false , i , skill ) ;
21326: LD_INT 0
21328: PPUSH
21329: LD_VAR 0 8
21333: PPUSH
21334: LD_VAR 0 4
21338: PPUSH
21339: CALL_OW 380
// end else
21343: GO 21362
// PrepareHuman ( false , i , skill ) ;
21345: LD_INT 0
21347: PPUSH
21348: LD_VAR 0 8
21352: PPUSH
21353: LD_VAR 0 4
21357: PPUSH
21358: CALL_OW 380
// un := CreateHuman ;
21362: LD_ADDR_VAR 0 14
21366: PUSH
21367: CALL_OW 44
21371: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21372: LD_ADDR_VAR 0 7
21376: PUSH
21377: LD_VAR 0 7
21381: PPUSH
21382: LD_INT 1
21384: PPUSH
21385: LD_VAR 0 14
21389: PPUSH
21390: CALL_OW 2
21394: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
21395: LD_VAR 0 14
21399: PPUSH
21400: LD_VAR 0 9
21404: PPUSH
21405: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
21409: LD_VAR 0 9
21413: PPUSH
21414: CALL_OW 313
21418: PUSH
21419: LD_INT 6
21421: EQUAL
21422: PUSH
21423: LD_VAR 0 9
21427: PPUSH
21428: CALL_OW 266
21432: PUSH
21433: LD_INT 32
21435: PUSH
21436: LD_INT 31
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: IN
21443: OR
21444: IFFALSE 21258
21446: GO 21255
21448: POP
21449: POP
// end else
21450: GO 21832
// for j = 1 to x do
21452: LD_ADDR_VAR 0 9
21456: PUSH
21457: DOUBLE
21458: LD_INT 1
21460: DEC
21461: ST_TO_ADDR
21462: LD_VAR 0 13
21466: PUSH
21467: FOR_TO
21468: IFFALSE 21830
// begin InitHc ;
21470: CALL_OW 19
// if not f then
21474: LD_VAR 0 12
21478: NOT
21479: IFFALSE 21568
// begin PrepareHuman ( false , i , skill ) ;
21481: LD_INT 0
21483: PPUSH
21484: LD_VAR 0 8
21488: PPUSH
21489: LD_VAR 0 4
21493: PPUSH
21494: CALL_OW 380
// un := CreateHuman ;
21498: LD_ADDR_VAR 0 14
21502: PUSH
21503: CALL_OW 44
21507: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21508: LD_ADDR_VAR 0 7
21512: PUSH
21513: LD_VAR 0 7
21517: PPUSH
21518: LD_INT 1
21520: PPUSH
21521: LD_VAR 0 14
21525: PPUSH
21526: CALL_OW 2
21530: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21531: LD_VAR 0 14
21535: PPUSH
21536: LD_VAR 0 1
21540: PPUSH
21541: CALL_OW 250
21545: PPUSH
21546: LD_VAR 0 1
21550: PPUSH
21551: CALL_OW 251
21555: PPUSH
21556: LD_INT 10
21558: PPUSH
21559: LD_INT 0
21561: PPUSH
21562: CALL_OW 50
// continue ;
21566: GO 21467
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
21568: LD_VAR 0 12
21572: PUSH
21573: LD_INT 1
21575: ARRAY
21576: PPUSH
21577: CALL_OW 313
21581: PUSH
21582: LD_VAR 0 12
21586: PUSH
21587: LD_INT 1
21589: ARRAY
21590: PPUSH
21591: CALL_OW 266
21595: PUSH
21596: LD_INT 32
21598: PUSH
21599: LD_INT 31
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: IN
21606: AND
21607: PUSH
21608: LD_VAR 0 12
21612: PUSH
21613: LD_INT 1
21615: ARRAY
21616: PPUSH
21617: CALL_OW 313
21621: PUSH
21622: LD_INT 6
21624: EQUAL
21625: OR
21626: IFFALSE 21646
// f := Delete ( f , 1 ) ;
21628: LD_ADDR_VAR 0 12
21632: PUSH
21633: LD_VAR 0 12
21637: PPUSH
21638: LD_INT 1
21640: PPUSH
21641: CALL_OW 3
21645: ST_TO_ADDR
// if not f then
21646: LD_VAR 0 12
21650: NOT
21651: IFFALSE 21669
// begin x := x + 2 ;
21653: LD_ADDR_VAR 0 13
21657: PUSH
21658: LD_VAR 0 13
21662: PUSH
21663: LD_INT 2
21665: PLUS
21666: ST_TO_ADDR
// continue ;
21667: GO 21467
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
21669: LD_VAR 0 12
21673: PUSH
21674: LD_INT 1
21676: ARRAY
21677: PPUSH
21678: CALL_OW 266
21682: PUSH
21683: LD_INT 5
21685: EQUAL
21686: IFFALSE 21760
// begin if UnitsInside ( f [ 1 ] ) < 3 then
21688: LD_VAR 0 12
21692: PUSH
21693: LD_INT 1
21695: ARRAY
21696: PPUSH
21697: CALL_OW 313
21701: PUSH
21702: LD_INT 3
21704: LESS
21705: IFFALSE 21741
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
21707: LD_INT 0
21709: PPUSH
21710: LD_INT 5
21712: PUSH
21713: LD_INT 8
21715: PUSH
21716: LD_INT 9
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: PUSH
21724: LD_VAR 0 17
21728: ARRAY
21729: PPUSH
21730: LD_VAR 0 4
21734: PPUSH
21735: CALL_OW 380
21739: GO 21758
// PrepareHuman ( false , i , skill ) ;
21741: LD_INT 0
21743: PPUSH
21744: LD_VAR 0 8
21748: PPUSH
21749: LD_VAR 0 4
21753: PPUSH
21754: CALL_OW 380
// end else
21758: GO 21777
// PrepareHuman ( false , i , skill ) ;
21760: LD_INT 0
21762: PPUSH
21763: LD_VAR 0 8
21767: PPUSH
21768: LD_VAR 0 4
21772: PPUSH
21773: CALL_OW 380
// un := CreateHuman ;
21777: LD_ADDR_VAR 0 14
21781: PUSH
21782: CALL_OW 44
21786: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
21787: LD_ADDR_VAR 0 7
21791: PUSH
21792: LD_VAR 0 7
21796: PPUSH
21797: LD_INT 1
21799: PPUSH
21800: LD_VAR 0 14
21804: PPUSH
21805: CALL_OW 2
21809: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
21810: LD_VAR 0 14
21814: PPUSH
21815: LD_VAR 0 12
21819: PUSH
21820: LD_INT 1
21822: ARRAY
21823: PPUSH
21824: CALL_OW 52
// end ;
21828: GO 21467
21830: POP
21831: POP
// end ;
21832: GO 20769
21834: POP
21835: POP
// result := result ^ buildings ;
21836: LD_ADDR_VAR 0 7
21840: PUSH
21841: LD_VAR 0 7
21845: PUSH
21846: LD_VAR 0 18
21850: ADD
21851: ST_TO_ADDR
// end else
21852: GO 21995
// begin for i = 1 to personel do
21854: LD_ADDR_VAR 0 8
21858: PUSH
21859: DOUBLE
21860: LD_INT 1
21862: DEC
21863: ST_TO_ADDR
21864: LD_VAR 0 6
21868: PUSH
21869: FOR_TO
21870: IFFALSE 21993
// begin if i > 4 then
21872: LD_VAR 0 8
21876: PUSH
21877: LD_INT 4
21879: GREATER
21880: IFFALSE 21884
// break ;
21882: GO 21993
// x := personel [ i ] ;
21884: LD_ADDR_VAR 0 13
21888: PUSH
21889: LD_VAR 0 6
21893: PUSH
21894: LD_VAR 0 8
21898: ARRAY
21899: ST_TO_ADDR
// if x = - 1 then
21900: LD_VAR 0 13
21904: PUSH
21905: LD_INT 1
21907: NEG
21908: EQUAL
21909: IFFALSE 21913
// continue ;
21911: GO 21869
// PrepareHuman ( false , i , skill ) ;
21913: LD_INT 0
21915: PPUSH
21916: LD_VAR 0 8
21920: PPUSH
21921: LD_VAR 0 4
21925: PPUSH
21926: CALL_OW 380
// un := CreateHuman ;
21930: LD_ADDR_VAR 0 14
21934: PUSH
21935: CALL_OW 44
21939: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
21940: LD_VAR 0 14
21944: PPUSH
21945: LD_VAR 0 1
21949: PPUSH
21950: CALL_OW 250
21954: PPUSH
21955: LD_VAR 0 1
21959: PPUSH
21960: CALL_OW 251
21964: PPUSH
21965: LD_INT 10
21967: PPUSH
21968: LD_INT 0
21970: PPUSH
21971: CALL_OW 50
// result := result ^ un ;
21975: LD_ADDR_VAR 0 7
21979: PUSH
21980: LD_VAR 0 7
21984: PUSH
21985: LD_VAR 0 14
21989: ADD
21990: ST_TO_ADDR
// end ;
21991: GO 21869
21993: POP
21994: POP
// end ; end ;
21995: LD_VAR 0 7
21999: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22000: LD_INT 0
22002: PPUSH
22003: PPUSH
22004: PPUSH
22005: PPUSH
22006: PPUSH
22007: PPUSH
22008: PPUSH
22009: PPUSH
22010: PPUSH
22011: PPUSH
22012: PPUSH
22013: PPUSH
22014: PPUSH
22015: PPUSH
22016: PPUSH
22017: PPUSH
// result := false ;
22018: LD_ADDR_VAR 0 3
22022: PUSH
22023: LD_INT 0
22025: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22026: LD_VAR 0 1
22030: NOT
22031: PUSH
22032: LD_VAR 0 1
22036: PPUSH
22037: CALL_OW 266
22041: PUSH
22042: LD_INT 32
22044: PUSH
22045: LD_INT 33
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: IN
22052: NOT
22053: OR
22054: IFFALSE 22058
// exit ;
22056: GO 23167
// nat := GetNation ( tower ) ;
22058: LD_ADDR_VAR 0 12
22062: PUSH
22063: LD_VAR 0 1
22067: PPUSH
22068: CALL_OW 248
22072: ST_TO_ADDR
// side := GetSide ( tower ) ;
22073: LD_ADDR_VAR 0 16
22077: PUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: CALL_OW 255
22087: ST_TO_ADDR
// x := GetX ( tower ) ;
22088: LD_ADDR_VAR 0 10
22092: PUSH
22093: LD_VAR 0 1
22097: PPUSH
22098: CALL_OW 250
22102: ST_TO_ADDR
// y := GetY ( tower ) ;
22103: LD_ADDR_VAR 0 11
22107: PUSH
22108: LD_VAR 0 1
22112: PPUSH
22113: CALL_OW 251
22117: ST_TO_ADDR
// if not x or not y then
22118: LD_VAR 0 10
22122: NOT
22123: PUSH
22124: LD_VAR 0 11
22128: NOT
22129: OR
22130: IFFALSE 22134
// exit ;
22132: GO 23167
// weapon := 0 ;
22134: LD_ADDR_VAR 0 18
22138: PUSH
22139: LD_INT 0
22141: ST_TO_ADDR
// fac_list := [ ] ;
22142: LD_ADDR_VAR 0 17
22146: PUSH
22147: EMPTY
22148: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22149: LD_ADDR_VAR 0 6
22153: PUSH
22154: LD_VAR 0 1
22158: PPUSH
22159: CALL_OW 274
22163: PPUSH
22164: LD_VAR 0 2
22168: PPUSH
22169: LD_INT 0
22171: PPUSH
22172: CALL 19738 0 3
22176: PPUSH
22177: LD_INT 30
22179: PUSH
22180: LD_INT 3
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PPUSH
22187: CALL_OW 72
22191: ST_TO_ADDR
// if not factories then
22192: LD_VAR 0 6
22196: NOT
22197: IFFALSE 22201
// exit ;
22199: GO 23167
// for i in factories do
22201: LD_ADDR_VAR 0 8
22205: PUSH
22206: LD_VAR 0 6
22210: PUSH
22211: FOR_IN
22212: IFFALSE 22237
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22214: LD_ADDR_VAR 0 17
22218: PUSH
22219: LD_VAR 0 17
22223: PUSH
22224: LD_VAR 0 8
22228: PPUSH
22229: CALL_OW 478
22233: UNION
22234: ST_TO_ADDR
22235: GO 22211
22237: POP
22238: POP
// if not fac_list then
22239: LD_VAR 0 17
22243: NOT
22244: IFFALSE 22248
// exit ;
22246: GO 23167
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
22248: LD_ADDR_VAR 0 5
22252: PUSH
22253: LD_INT 4
22255: PUSH
22256: LD_INT 5
22258: PUSH
22259: LD_INT 9
22261: PUSH
22262: LD_INT 10
22264: PUSH
22265: LD_INT 6
22267: PUSH
22268: LD_INT 7
22270: PUSH
22271: LD_INT 11
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 27
22285: PUSH
22286: LD_INT 28
22288: PUSH
22289: LD_INT 26
22291: PUSH
22292: LD_INT 30
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 43
22303: PUSH
22304: LD_INT 44
22306: PUSH
22307: LD_INT 46
22309: PUSH
22310: LD_INT 45
22312: PUSH
22313: LD_INT 47
22315: PUSH
22316: LD_INT 49
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: PUSH
22332: LD_VAR 0 12
22336: ARRAY
22337: ST_TO_ADDR
// list := list isect fac_list ;
22338: LD_ADDR_VAR 0 5
22342: PUSH
22343: LD_VAR 0 5
22347: PUSH
22348: LD_VAR 0 17
22352: ISECT
22353: ST_TO_ADDR
// if not list then
22354: LD_VAR 0 5
22358: NOT
22359: IFFALSE 22363
// exit ;
22361: GO 23167
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
22363: LD_VAR 0 12
22367: PUSH
22368: LD_INT 3
22370: EQUAL
22371: PUSH
22372: LD_INT 49
22374: PUSH
22375: LD_VAR 0 5
22379: IN
22380: AND
22381: PUSH
22382: LD_INT 31
22384: PPUSH
22385: LD_VAR 0 16
22389: PPUSH
22390: CALL_OW 321
22394: PUSH
22395: LD_INT 2
22397: EQUAL
22398: AND
22399: IFFALSE 22459
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
22401: LD_INT 22
22403: PUSH
22404: LD_VAR 0 16
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 35
22415: PUSH
22416: LD_INT 49
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 91
22425: PUSH
22426: LD_VAR 0 1
22430: PUSH
22431: LD_INT 10
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: PPUSH
22444: CALL_OW 69
22448: NOT
22449: IFFALSE 22459
// weapon := ru_time_lapser ;
22451: LD_ADDR_VAR 0 18
22455: PUSH
22456: LD_INT 49
22458: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
22459: LD_VAR 0 12
22463: PUSH
22464: LD_INT 1
22466: PUSH
22467: LD_INT 2
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: IN
22474: PUSH
22475: LD_INT 11
22477: PUSH
22478: LD_VAR 0 5
22482: IN
22483: PUSH
22484: LD_INT 30
22486: PUSH
22487: LD_VAR 0 5
22491: IN
22492: OR
22493: AND
22494: PUSH
22495: LD_INT 6
22497: PPUSH
22498: LD_VAR 0 16
22502: PPUSH
22503: CALL_OW 321
22507: PUSH
22508: LD_INT 2
22510: EQUAL
22511: AND
22512: IFFALSE 22677
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
22514: LD_INT 22
22516: PUSH
22517: LD_VAR 0 16
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 2
22528: PUSH
22529: LD_INT 35
22531: PUSH
22532: LD_INT 11
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 35
22541: PUSH
22542: LD_INT 30
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: LIST
22553: PUSH
22554: LD_INT 91
22556: PUSH
22557: LD_VAR 0 1
22561: PUSH
22562: LD_INT 18
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: LIST
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: LIST
22574: PPUSH
22575: CALL_OW 69
22579: NOT
22580: PUSH
22581: LD_INT 22
22583: PUSH
22584: LD_VAR 0 16
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: LD_INT 30
22598: PUSH
22599: LD_INT 32
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 30
22608: PUSH
22609: LD_INT 33
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 91
22623: PUSH
22624: LD_VAR 0 1
22628: PUSH
22629: LD_INT 12
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: LIST
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: LIST
22641: PUSH
22642: EMPTY
22643: LIST
22644: PPUSH
22645: CALL_OW 69
22649: PUSH
22650: LD_INT 2
22652: GREATER
22653: AND
22654: IFFALSE 22677
// weapon := [ us_radar , ar_radar ] [ nat ] ;
22656: LD_ADDR_VAR 0 18
22660: PUSH
22661: LD_INT 11
22663: PUSH
22664: LD_INT 30
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_VAR 0 12
22675: ARRAY
22676: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
22677: LD_VAR 0 18
22681: NOT
22682: PUSH
22683: LD_INT 40
22685: PPUSH
22686: LD_VAR 0 16
22690: PPUSH
22691: CALL_OW 321
22695: PUSH
22696: LD_INT 2
22698: EQUAL
22699: AND
22700: PUSH
22701: LD_INT 7
22703: PUSH
22704: LD_VAR 0 5
22708: IN
22709: PUSH
22710: LD_INT 28
22712: PUSH
22713: LD_VAR 0 5
22717: IN
22718: OR
22719: PUSH
22720: LD_INT 45
22722: PUSH
22723: LD_VAR 0 5
22727: IN
22728: OR
22729: AND
22730: IFFALSE 22984
// begin hex := GetHexInfo ( x , y ) ;
22732: LD_ADDR_VAR 0 4
22736: PUSH
22737: LD_VAR 0 10
22741: PPUSH
22742: LD_VAR 0 11
22746: PPUSH
22747: CALL_OW 546
22751: ST_TO_ADDR
// if hex [ 1 ] then
22752: LD_VAR 0 4
22756: PUSH
22757: LD_INT 1
22759: ARRAY
22760: IFFALSE 22764
// exit ;
22762: GO 23167
// height := hex [ 2 ] ;
22764: LD_ADDR_VAR 0 15
22768: PUSH
22769: LD_VAR 0 4
22773: PUSH
22774: LD_INT 2
22776: ARRAY
22777: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
22778: LD_ADDR_VAR 0 14
22782: PUSH
22783: LD_INT 0
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 3
22791: PUSH
22792: LD_INT 5
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: ST_TO_ADDR
// for i in tmp do
22801: LD_ADDR_VAR 0 8
22805: PUSH
22806: LD_VAR 0 14
22810: PUSH
22811: FOR_IN
22812: IFFALSE 22982
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
22814: LD_ADDR_VAR 0 9
22818: PUSH
22819: LD_VAR 0 10
22823: PPUSH
22824: LD_VAR 0 8
22828: PPUSH
22829: LD_INT 5
22831: PPUSH
22832: CALL_OW 272
22836: PUSH
22837: LD_VAR 0 11
22841: PPUSH
22842: LD_VAR 0 8
22846: PPUSH
22847: LD_INT 5
22849: PPUSH
22850: CALL_OW 273
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
22859: LD_VAR 0 9
22863: PUSH
22864: LD_INT 1
22866: ARRAY
22867: PPUSH
22868: LD_VAR 0 9
22872: PUSH
22873: LD_INT 2
22875: ARRAY
22876: PPUSH
22877: CALL_OW 488
22881: IFFALSE 22980
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
22883: LD_ADDR_VAR 0 4
22887: PUSH
22888: LD_VAR 0 9
22892: PUSH
22893: LD_INT 1
22895: ARRAY
22896: PPUSH
22897: LD_VAR 0 9
22901: PUSH
22902: LD_INT 2
22904: ARRAY
22905: PPUSH
22906: CALL_OW 546
22910: ST_TO_ADDR
// if hex [ 1 ] then
22911: LD_VAR 0 4
22915: PUSH
22916: LD_INT 1
22918: ARRAY
22919: IFFALSE 22923
// continue ;
22921: GO 22811
// h := hex [ 2 ] ;
22923: LD_ADDR_VAR 0 13
22927: PUSH
22928: LD_VAR 0 4
22932: PUSH
22933: LD_INT 2
22935: ARRAY
22936: ST_TO_ADDR
// if h + 7 < height then
22937: LD_VAR 0 13
22941: PUSH
22942: LD_INT 7
22944: PLUS
22945: PUSH
22946: LD_VAR 0 15
22950: LESS
22951: IFFALSE 22980
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
22953: LD_ADDR_VAR 0 18
22957: PUSH
22958: LD_INT 7
22960: PUSH
22961: LD_INT 28
22963: PUSH
22964: LD_INT 45
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: LIST
22971: PUSH
22972: LD_VAR 0 12
22976: ARRAY
22977: ST_TO_ADDR
// break ;
22978: GO 22982
// end ; end ; end ;
22980: GO 22811
22982: POP
22983: POP
// end ; if not weapon then
22984: LD_VAR 0 18
22988: NOT
22989: IFFALSE 23049
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
22991: LD_ADDR_VAR 0 5
22995: PUSH
22996: LD_VAR 0 5
23000: PUSH
23001: LD_INT 11
23003: PUSH
23004: LD_INT 30
23006: PUSH
23007: LD_INT 49
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: LIST
23014: DIFF
23015: ST_TO_ADDR
// if not list then
23016: LD_VAR 0 5
23020: NOT
23021: IFFALSE 23025
// exit ;
23023: GO 23167
// weapon := list [ rand ( 1 , list ) ] ;
23025: LD_ADDR_VAR 0 18
23029: PUSH
23030: LD_VAR 0 5
23034: PUSH
23035: LD_INT 1
23037: PPUSH
23038: LD_VAR 0 5
23042: PPUSH
23043: CALL_OW 12
23047: ARRAY
23048: ST_TO_ADDR
// end ; if weapon then
23049: LD_VAR 0 18
23053: IFFALSE 23167
// begin tmp := CostOfWeapon ( weapon ) ;
23055: LD_ADDR_VAR 0 14
23059: PUSH
23060: LD_VAR 0 18
23064: PPUSH
23065: CALL_OW 451
23069: ST_TO_ADDR
// j := GetBase ( tower ) ;
23070: LD_ADDR_VAR 0 9
23074: PUSH
23075: LD_VAR 0 1
23079: PPUSH
23080: CALL_OW 274
23084: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23085: LD_VAR 0 9
23089: PPUSH
23090: LD_INT 1
23092: PPUSH
23093: CALL_OW 275
23097: PUSH
23098: LD_VAR 0 14
23102: PUSH
23103: LD_INT 1
23105: ARRAY
23106: GREATEREQUAL
23107: PUSH
23108: LD_VAR 0 9
23112: PPUSH
23113: LD_INT 2
23115: PPUSH
23116: CALL_OW 275
23120: PUSH
23121: LD_VAR 0 14
23125: PUSH
23126: LD_INT 2
23128: ARRAY
23129: GREATEREQUAL
23130: AND
23131: PUSH
23132: LD_VAR 0 9
23136: PPUSH
23137: LD_INT 3
23139: PPUSH
23140: CALL_OW 275
23144: PUSH
23145: LD_VAR 0 14
23149: PUSH
23150: LD_INT 3
23152: ARRAY
23153: GREATEREQUAL
23154: AND
23155: IFFALSE 23167
// result := weapon ;
23157: LD_ADDR_VAR 0 3
23161: PUSH
23162: LD_VAR 0 18
23166: ST_TO_ADDR
// end ; end ;
23167: LD_VAR 0 3
23171: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23172: LD_INT 0
23174: PPUSH
23175: PPUSH
// result := true ;
23176: LD_ADDR_VAR 0 3
23180: PUSH
23181: LD_INT 1
23183: ST_TO_ADDR
// if array1 = array2 then
23184: LD_VAR 0 1
23188: PUSH
23189: LD_VAR 0 2
23193: EQUAL
23194: IFFALSE 23254
// begin for i = 1 to array1 do
23196: LD_ADDR_VAR 0 4
23200: PUSH
23201: DOUBLE
23202: LD_INT 1
23204: DEC
23205: ST_TO_ADDR
23206: LD_VAR 0 1
23210: PUSH
23211: FOR_TO
23212: IFFALSE 23250
// if array1 [ i ] <> array2 [ i ] then
23214: LD_VAR 0 1
23218: PUSH
23219: LD_VAR 0 4
23223: ARRAY
23224: PUSH
23225: LD_VAR 0 2
23229: PUSH
23230: LD_VAR 0 4
23234: ARRAY
23235: NONEQUAL
23236: IFFALSE 23248
// begin result := false ;
23238: LD_ADDR_VAR 0 3
23242: PUSH
23243: LD_INT 0
23245: ST_TO_ADDR
// break ;
23246: GO 23250
// end ;
23248: GO 23211
23250: POP
23251: POP
// end else
23252: GO 23262
// result := false ;
23254: LD_ADDR_VAR 0 3
23258: PUSH
23259: LD_INT 0
23261: ST_TO_ADDR
// end ;
23262: LD_VAR 0 3
23266: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
23267: LD_INT 0
23269: PPUSH
23270: PPUSH
// if not array1 or not array2 then
23271: LD_VAR 0 1
23275: NOT
23276: PUSH
23277: LD_VAR 0 2
23281: NOT
23282: OR
23283: IFFALSE 23287
// exit ;
23285: GO 23351
// result := true ;
23287: LD_ADDR_VAR 0 3
23291: PUSH
23292: LD_INT 1
23294: ST_TO_ADDR
// for i = 1 to array1 do
23295: LD_ADDR_VAR 0 4
23299: PUSH
23300: DOUBLE
23301: LD_INT 1
23303: DEC
23304: ST_TO_ADDR
23305: LD_VAR 0 1
23309: PUSH
23310: FOR_TO
23311: IFFALSE 23349
// if array1 [ i ] <> array2 [ i ] then
23313: LD_VAR 0 1
23317: PUSH
23318: LD_VAR 0 4
23322: ARRAY
23323: PUSH
23324: LD_VAR 0 2
23328: PUSH
23329: LD_VAR 0 4
23333: ARRAY
23334: NONEQUAL
23335: IFFALSE 23347
// begin result := false ;
23337: LD_ADDR_VAR 0 3
23341: PUSH
23342: LD_INT 0
23344: ST_TO_ADDR
// break ;
23345: GO 23349
// end ;
23347: GO 23310
23349: POP
23350: POP
// end ;
23351: LD_VAR 0 3
23355: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
23356: LD_INT 0
23358: PPUSH
23359: PPUSH
23360: PPUSH
// pom := GetBase ( fac ) ;
23361: LD_ADDR_VAR 0 5
23365: PUSH
23366: LD_VAR 0 1
23370: PPUSH
23371: CALL_OW 274
23375: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
23376: LD_ADDR_VAR 0 4
23380: PUSH
23381: LD_VAR 0 2
23385: PUSH
23386: LD_INT 1
23388: ARRAY
23389: PPUSH
23390: LD_VAR 0 2
23394: PUSH
23395: LD_INT 2
23397: ARRAY
23398: PPUSH
23399: LD_VAR 0 2
23403: PUSH
23404: LD_INT 3
23406: ARRAY
23407: PPUSH
23408: LD_VAR 0 2
23412: PUSH
23413: LD_INT 4
23415: ARRAY
23416: PPUSH
23417: CALL_OW 449
23421: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23422: LD_ADDR_VAR 0 3
23426: PUSH
23427: LD_VAR 0 5
23431: PPUSH
23432: LD_INT 1
23434: PPUSH
23435: CALL_OW 275
23439: PUSH
23440: LD_VAR 0 4
23444: PUSH
23445: LD_INT 1
23447: ARRAY
23448: GREATEREQUAL
23449: PUSH
23450: LD_VAR 0 5
23454: PPUSH
23455: LD_INT 2
23457: PPUSH
23458: CALL_OW 275
23462: PUSH
23463: LD_VAR 0 4
23467: PUSH
23468: LD_INT 2
23470: ARRAY
23471: GREATEREQUAL
23472: AND
23473: PUSH
23474: LD_VAR 0 5
23478: PPUSH
23479: LD_INT 3
23481: PPUSH
23482: CALL_OW 275
23486: PUSH
23487: LD_VAR 0 4
23491: PUSH
23492: LD_INT 3
23494: ARRAY
23495: GREATEREQUAL
23496: AND
23497: ST_TO_ADDR
// end ;
23498: LD_VAR 0 3
23502: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
23503: LD_INT 0
23505: PPUSH
23506: PPUSH
23507: PPUSH
23508: PPUSH
// pom := GetBase ( building ) ;
23509: LD_ADDR_VAR 0 3
23513: PUSH
23514: LD_VAR 0 1
23518: PPUSH
23519: CALL_OW 274
23523: ST_TO_ADDR
// if not pom then
23524: LD_VAR 0 3
23528: NOT
23529: IFFALSE 23533
// exit ;
23531: GO 23703
// btype := GetBType ( building ) ;
23533: LD_ADDR_VAR 0 5
23537: PUSH
23538: LD_VAR 0 1
23542: PPUSH
23543: CALL_OW 266
23547: ST_TO_ADDR
// if btype = b_armoury then
23548: LD_VAR 0 5
23552: PUSH
23553: LD_INT 4
23555: EQUAL
23556: IFFALSE 23566
// btype := b_barracks ;
23558: LD_ADDR_VAR 0 5
23562: PUSH
23563: LD_INT 5
23565: ST_TO_ADDR
// if btype = b_depot then
23566: LD_VAR 0 5
23570: PUSH
23571: LD_INT 0
23573: EQUAL
23574: IFFALSE 23584
// btype := b_warehouse ;
23576: LD_ADDR_VAR 0 5
23580: PUSH
23581: LD_INT 1
23583: ST_TO_ADDR
// if btype = b_workshop then
23584: LD_VAR 0 5
23588: PUSH
23589: LD_INT 2
23591: EQUAL
23592: IFFALSE 23602
// btype := b_factory ;
23594: LD_ADDR_VAR 0 5
23598: PUSH
23599: LD_INT 3
23601: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23602: LD_ADDR_VAR 0 4
23606: PUSH
23607: LD_VAR 0 5
23611: PPUSH
23612: LD_VAR 0 1
23616: PPUSH
23617: CALL_OW 248
23621: PPUSH
23622: CALL_OW 450
23626: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23627: LD_ADDR_VAR 0 2
23631: PUSH
23632: LD_VAR 0 3
23636: PPUSH
23637: LD_INT 1
23639: PPUSH
23640: CALL_OW 275
23644: PUSH
23645: LD_VAR 0 4
23649: PUSH
23650: LD_INT 1
23652: ARRAY
23653: GREATEREQUAL
23654: PUSH
23655: LD_VAR 0 3
23659: PPUSH
23660: LD_INT 2
23662: PPUSH
23663: CALL_OW 275
23667: PUSH
23668: LD_VAR 0 4
23672: PUSH
23673: LD_INT 2
23675: ARRAY
23676: GREATEREQUAL
23677: AND
23678: PUSH
23679: LD_VAR 0 3
23683: PPUSH
23684: LD_INT 3
23686: PPUSH
23687: CALL_OW 275
23691: PUSH
23692: LD_VAR 0 4
23696: PUSH
23697: LD_INT 3
23699: ARRAY
23700: GREATEREQUAL
23701: AND
23702: ST_TO_ADDR
// end ;
23703: LD_VAR 0 2
23707: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
23708: LD_INT 0
23710: PPUSH
23711: PPUSH
23712: PPUSH
// pom := GetBase ( building ) ;
23713: LD_ADDR_VAR 0 4
23717: PUSH
23718: LD_VAR 0 1
23722: PPUSH
23723: CALL_OW 274
23727: ST_TO_ADDR
// if not pom then
23728: LD_VAR 0 4
23732: NOT
23733: IFFALSE 23737
// exit ;
23735: GO 23838
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
23737: LD_ADDR_VAR 0 5
23741: PUSH
23742: LD_VAR 0 2
23746: PPUSH
23747: LD_VAR 0 1
23751: PPUSH
23752: CALL_OW 248
23756: PPUSH
23757: CALL_OW 450
23761: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
23762: LD_ADDR_VAR 0 3
23766: PUSH
23767: LD_VAR 0 4
23771: PPUSH
23772: LD_INT 1
23774: PPUSH
23775: CALL_OW 275
23779: PUSH
23780: LD_VAR 0 5
23784: PUSH
23785: LD_INT 1
23787: ARRAY
23788: GREATEREQUAL
23789: PUSH
23790: LD_VAR 0 4
23794: PPUSH
23795: LD_INT 2
23797: PPUSH
23798: CALL_OW 275
23802: PUSH
23803: LD_VAR 0 5
23807: PUSH
23808: LD_INT 2
23810: ARRAY
23811: GREATEREQUAL
23812: AND
23813: PUSH
23814: LD_VAR 0 4
23818: PPUSH
23819: LD_INT 3
23821: PPUSH
23822: CALL_OW 275
23826: PUSH
23827: LD_VAR 0 5
23831: PUSH
23832: LD_INT 3
23834: ARRAY
23835: GREATEREQUAL
23836: AND
23837: ST_TO_ADDR
// end ;
23838: LD_VAR 0 3
23842: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
23843: LD_INT 0
23845: PPUSH
23846: PPUSH
23847: PPUSH
23848: PPUSH
23849: PPUSH
23850: PPUSH
23851: PPUSH
23852: PPUSH
23853: PPUSH
23854: PPUSH
23855: PPUSH
// result := false ;
23856: LD_ADDR_VAR 0 8
23860: PUSH
23861: LD_INT 0
23863: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
23864: LD_VAR 0 5
23868: NOT
23869: PUSH
23870: LD_VAR 0 1
23874: NOT
23875: OR
23876: PUSH
23877: LD_VAR 0 2
23881: NOT
23882: OR
23883: PUSH
23884: LD_VAR 0 3
23888: NOT
23889: OR
23890: IFFALSE 23894
// exit ;
23892: GO 24708
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
23894: LD_ADDR_VAR 0 14
23898: PUSH
23899: LD_VAR 0 1
23903: PPUSH
23904: LD_VAR 0 2
23908: PPUSH
23909: LD_VAR 0 3
23913: PPUSH
23914: LD_VAR 0 4
23918: PPUSH
23919: LD_VAR 0 5
23923: PUSH
23924: LD_INT 1
23926: ARRAY
23927: PPUSH
23928: CALL_OW 248
23932: PPUSH
23933: LD_INT 0
23935: PPUSH
23936: CALL 25945 0 6
23940: ST_TO_ADDR
// if not hexes then
23941: LD_VAR 0 14
23945: NOT
23946: IFFALSE 23950
// exit ;
23948: GO 24708
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23950: LD_ADDR_VAR 0 17
23954: PUSH
23955: LD_VAR 0 5
23959: PPUSH
23960: LD_INT 22
23962: PUSH
23963: LD_VAR 0 13
23967: PPUSH
23968: CALL_OW 255
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 2
23979: PUSH
23980: LD_INT 30
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 30
23992: PUSH
23993: LD_INT 1
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: LIST
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PPUSH
24009: CALL_OW 72
24013: ST_TO_ADDR
// for i = 1 to hexes do
24014: LD_ADDR_VAR 0 9
24018: PUSH
24019: DOUBLE
24020: LD_INT 1
24022: DEC
24023: ST_TO_ADDR
24024: LD_VAR 0 14
24028: PUSH
24029: FOR_TO
24030: IFFALSE 24706
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24032: LD_ADDR_VAR 0 13
24036: PUSH
24037: LD_VAR 0 14
24041: PUSH
24042: LD_VAR 0 9
24046: ARRAY
24047: PUSH
24048: LD_INT 1
24050: ARRAY
24051: PPUSH
24052: LD_VAR 0 14
24056: PUSH
24057: LD_VAR 0 9
24061: ARRAY
24062: PUSH
24063: LD_INT 2
24065: ARRAY
24066: PPUSH
24067: CALL_OW 428
24071: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24072: LD_VAR 0 14
24076: PUSH
24077: LD_VAR 0 9
24081: ARRAY
24082: PUSH
24083: LD_INT 1
24085: ARRAY
24086: PPUSH
24087: LD_VAR 0 14
24091: PUSH
24092: LD_VAR 0 9
24096: ARRAY
24097: PUSH
24098: LD_INT 2
24100: ARRAY
24101: PPUSH
24102: CALL_OW 351
24106: PUSH
24107: LD_VAR 0 14
24111: PUSH
24112: LD_VAR 0 9
24116: ARRAY
24117: PUSH
24118: LD_INT 1
24120: ARRAY
24121: PPUSH
24122: LD_VAR 0 14
24126: PUSH
24127: LD_VAR 0 9
24131: ARRAY
24132: PUSH
24133: LD_INT 2
24135: ARRAY
24136: PPUSH
24137: CALL_OW 488
24141: NOT
24142: OR
24143: PUSH
24144: LD_VAR 0 13
24148: PPUSH
24149: CALL_OW 247
24153: PUSH
24154: LD_INT 3
24156: EQUAL
24157: OR
24158: IFFALSE 24164
// exit ;
24160: POP
24161: POP
24162: GO 24708
// if not tmp then
24164: LD_VAR 0 13
24168: NOT
24169: IFFALSE 24173
// continue ;
24171: GO 24029
// result := true ;
24173: LD_ADDR_VAR 0 8
24177: PUSH
24178: LD_INT 1
24180: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24181: LD_VAR 0 6
24185: PUSH
24186: LD_VAR 0 13
24190: PPUSH
24191: CALL_OW 247
24195: PUSH
24196: LD_INT 2
24198: EQUAL
24199: AND
24200: PUSH
24201: LD_VAR 0 13
24205: PPUSH
24206: CALL_OW 263
24210: PUSH
24211: LD_INT 1
24213: EQUAL
24214: AND
24215: IFFALSE 24379
// begin if IsDrivenBy ( tmp ) then
24217: LD_VAR 0 13
24221: PPUSH
24222: CALL_OW 311
24226: IFFALSE 24230
// continue ;
24228: GO 24029
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24230: LD_VAR 0 6
24234: PPUSH
24235: LD_INT 3
24237: PUSH
24238: LD_INT 60
24240: PUSH
24241: EMPTY
24242: LIST
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 3
24250: PUSH
24251: LD_INT 55
24253: PUSH
24254: EMPTY
24255: LIST
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PPUSH
24265: CALL_OW 72
24269: IFFALSE 24377
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
24271: LD_ADDR_VAR 0 18
24275: PUSH
24276: LD_VAR 0 6
24280: PPUSH
24281: LD_INT 3
24283: PUSH
24284: LD_INT 60
24286: PUSH
24287: EMPTY
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 3
24296: PUSH
24297: LD_INT 55
24299: PUSH
24300: EMPTY
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PPUSH
24311: CALL_OW 72
24315: PUSH
24316: LD_INT 1
24318: ARRAY
24319: ST_TO_ADDR
// if IsInUnit ( driver ) then
24320: LD_VAR 0 18
24324: PPUSH
24325: CALL_OW 310
24329: IFFALSE 24340
// ComExit ( driver ) ;
24331: LD_VAR 0 18
24335: PPUSH
24336: CALL 49073 0 1
// AddComEnterUnit ( driver , tmp ) ;
24340: LD_VAR 0 18
24344: PPUSH
24345: LD_VAR 0 13
24349: PPUSH
24350: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
24354: LD_VAR 0 18
24358: PPUSH
24359: LD_VAR 0 7
24363: PPUSH
24364: CALL_OW 173
// AddComExitVehicle ( driver ) ;
24368: LD_VAR 0 18
24372: PPUSH
24373: CALL_OW 181
// end ; continue ;
24377: GO 24029
// end ; if not cleaners or not tmp in cleaners then
24379: LD_VAR 0 6
24383: NOT
24384: PUSH
24385: LD_VAR 0 13
24389: PUSH
24390: LD_VAR 0 6
24394: IN
24395: NOT
24396: OR
24397: IFFALSE 24704
// begin if dep then
24399: LD_VAR 0 17
24403: IFFALSE 24539
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
24405: LD_ADDR_VAR 0 16
24409: PUSH
24410: LD_VAR 0 17
24414: PUSH
24415: LD_INT 1
24417: ARRAY
24418: PPUSH
24419: CALL_OW 250
24423: PPUSH
24424: LD_VAR 0 17
24428: PUSH
24429: LD_INT 1
24431: ARRAY
24432: PPUSH
24433: CALL_OW 254
24437: PPUSH
24438: LD_INT 5
24440: PPUSH
24441: CALL_OW 272
24445: PUSH
24446: LD_VAR 0 17
24450: PUSH
24451: LD_INT 1
24453: ARRAY
24454: PPUSH
24455: CALL_OW 251
24459: PPUSH
24460: LD_VAR 0 17
24464: PUSH
24465: LD_INT 1
24467: ARRAY
24468: PPUSH
24469: CALL_OW 254
24473: PPUSH
24474: LD_INT 5
24476: PPUSH
24477: CALL_OW 273
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
24486: LD_VAR 0 16
24490: PUSH
24491: LD_INT 1
24493: ARRAY
24494: PPUSH
24495: LD_VAR 0 16
24499: PUSH
24500: LD_INT 2
24502: ARRAY
24503: PPUSH
24504: CALL_OW 488
24508: IFFALSE 24539
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
24510: LD_VAR 0 13
24514: PPUSH
24515: LD_VAR 0 16
24519: PUSH
24520: LD_INT 1
24522: ARRAY
24523: PPUSH
24524: LD_VAR 0 16
24528: PUSH
24529: LD_INT 2
24531: ARRAY
24532: PPUSH
24533: CALL_OW 111
// continue ;
24537: GO 24029
// end ; end ; r := GetDir ( tmp ) ;
24539: LD_ADDR_VAR 0 15
24543: PUSH
24544: LD_VAR 0 13
24548: PPUSH
24549: CALL_OW 254
24553: ST_TO_ADDR
// if r = 5 then
24554: LD_VAR 0 15
24558: PUSH
24559: LD_INT 5
24561: EQUAL
24562: IFFALSE 24572
// r := 0 ;
24564: LD_ADDR_VAR 0 15
24568: PUSH
24569: LD_INT 0
24571: ST_TO_ADDR
// for j = r to 5 do
24572: LD_ADDR_VAR 0 10
24576: PUSH
24577: DOUBLE
24578: LD_VAR 0 15
24582: DEC
24583: ST_TO_ADDR
24584: LD_INT 5
24586: PUSH
24587: FOR_TO
24588: IFFALSE 24702
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
24590: LD_ADDR_VAR 0 11
24594: PUSH
24595: LD_VAR 0 13
24599: PPUSH
24600: CALL_OW 250
24604: PPUSH
24605: LD_VAR 0 10
24609: PPUSH
24610: LD_INT 2
24612: PPUSH
24613: CALL_OW 272
24617: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
24618: LD_ADDR_VAR 0 12
24622: PUSH
24623: LD_VAR 0 13
24627: PPUSH
24628: CALL_OW 251
24632: PPUSH
24633: LD_VAR 0 10
24637: PPUSH
24638: LD_INT 2
24640: PPUSH
24641: CALL_OW 273
24645: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
24646: LD_VAR 0 11
24650: PPUSH
24651: LD_VAR 0 12
24655: PPUSH
24656: CALL_OW 488
24660: PUSH
24661: LD_VAR 0 11
24665: PPUSH
24666: LD_VAR 0 12
24670: PPUSH
24671: CALL_OW 428
24675: NOT
24676: AND
24677: IFFALSE 24700
// begin ComMoveXY ( tmp , _x , _y ) ;
24679: LD_VAR 0 13
24683: PPUSH
24684: LD_VAR 0 11
24688: PPUSH
24689: LD_VAR 0 12
24693: PPUSH
24694: CALL_OW 111
// break ;
24698: GO 24702
// end ; end ;
24700: GO 24587
24702: POP
24703: POP
// end ; end ;
24704: GO 24029
24706: POP
24707: POP
// end ;
24708: LD_VAR 0 8
24712: RET
// export function BuildingTechInvented ( side , btype ) ; begin
24713: LD_INT 0
24715: PPUSH
// result := true ;
24716: LD_ADDR_VAR 0 3
24720: PUSH
24721: LD_INT 1
24723: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
24724: LD_VAR 0 2
24728: PUSH
24729: LD_INT 24
24731: DOUBLE
24732: EQUAL
24733: IFTRUE 24743
24735: LD_INT 33
24737: DOUBLE
24738: EQUAL
24739: IFTRUE 24743
24741: GO 24768
24743: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
24744: LD_ADDR_VAR 0 3
24748: PUSH
24749: LD_INT 32
24751: PPUSH
24752: LD_VAR 0 1
24756: PPUSH
24757: CALL_OW 321
24761: PUSH
24762: LD_INT 2
24764: EQUAL
24765: ST_TO_ADDR
24766: GO 25088
24768: LD_INT 20
24770: DOUBLE
24771: EQUAL
24772: IFTRUE 24776
24774: GO 24801
24776: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
24777: LD_ADDR_VAR 0 3
24781: PUSH
24782: LD_INT 6
24784: PPUSH
24785: LD_VAR 0 1
24789: PPUSH
24790: CALL_OW 321
24794: PUSH
24795: LD_INT 2
24797: EQUAL
24798: ST_TO_ADDR
24799: GO 25088
24801: LD_INT 22
24803: DOUBLE
24804: EQUAL
24805: IFTRUE 24815
24807: LD_INT 36
24809: DOUBLE
24810: EQUAL
24811: IFTRUE 24815
24813: GO 24840
24815: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
24816: LD_ADDR_VAR 0 3
24820: PUSH
24821: LD_INT 15
24823: PPUSH
24824: LD_VAR 0 1
24828: PPUSH
24829: CALL_OW 321
24833: PUSH
24834: LD_INT 2
24836: EQUAL
24837: ST_TO_ADDR
24838: GO 25088
24840: LD_INT 30
24842: DOUBLE
24843: EQUAL
24844: IFTRUE 24848
24846: GO 24873
24848: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
24849: LD_ADDR_VAR 0 3
24853: PUSH
24854: LD_INT 20
24856: PPUSH
24857: LD_VAR 0 1
24861: PPUSH
24862: CALL_OW 321
24866: PUSH
24867: LD_INT 2
24869: EQUAL
24870: ST_TO_ADDR
24871: GO 25088
24873: LD_INT 28
24875: DOUBLE
24876: EQUAL
24877: IFTRUE 24887
24879: LD_INT 21
24881: DOUBLE
24882: EQUAL
24883: IFTRUE 24887
24885: GO 24912
24887: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
24888: LD_ADDR_VAR 0 3
24892: PUSH
24893: LD_INT 21
24895: PPUSH
24896: LD_VAR 0 1
24900: PPUSH
24901: CALL_OW 321
24905: PUSH
24906: LD_INT 2
24908: EQUAL
24909: ST_TO_ADDR
24910: GO 25088
24912: LD_INT 16
24914: DOUBLE
24915: EQUAL
24916: IFTRUE 24920
24918: GO 24947
24920: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
24921: LD_ADDR_VAR 0 3
24925: PUSH
24926: LD_EXP 92
24930: PPUSH
24931: LD_VAR 0 1
24935: PPUSH
24936: CALL_OW 321
24940: PUSH
24941: LD_INT 2
24943: EQUAL
24944: ST_TO_ADDR
24945: GO 25088
24947: LD_INT 19
24949: DOUBLE
24950: EQUAL
24951: IFTRUE 24961
24953: LD_INT 23
24955: DOUBLE
24956: EQUAL
24957: IFTRUE 24961
24959: GO 24988
24961: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
24962: LD_ADDR_VAR 0 3
24966: PUSH
24967: LD_EXP 91
24971: PPUSH
24972: LD_VAR 0 1
24976: PPUSH
24977: CALL_OW 321
24981: PUSH
24982: LD_INT 2
24984: EQUAL
24985: ST_TO_ADDR
24986: GO 25088
24988: LD_INT 17
24990: DOUBLE
24991: EQUAL
24992: IFTRUE 24996
24994: GO 25021
24996: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
24997: LD_ADDR_VAR 0 3
25001: PUSH
25002: LD_INT 39
25004: PPUSH
25005: LD_VAR 0 1
25009: PPUSH
25010: CALL_OW 321
25014: PUSH
25015: LD_INT 2
25017: EQUAL
25018: ST_TO_ADDR
25019: GO 25088
25021: LD_INT 18
25023: DOUBLE
25024: EQUAL
25025: IFTRUE 25029
25027: GO 25054
25029: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
25030: LD_ADDR_VAR 0 3
25034: PUSH
25035: LD_INT 40
25037: PPUSH
25038: LD_VAR 0 1
25042: PPUSH
25043: CALL_OW 321
25047: PUSH
25048: LD_INT 2
25050: EQUAL
25051: ST_TO_ADDR
25052: GO 25088
25054: LD_INT 27
25056: DOUBLE
25057: EQUAL
25058: IFTRUE 25062
25060: GO 25087
25062: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25063: LD_ADDR_VAR 0 3
25067: PUSH
25068: LD_INT 35
25070: PPUSH
25071: LD_VAR 0 1
25075: PPUSH
25076: CALL_OW 321
25080: PUSH
25081: LD_INT 2
25083: EQUAL
25084: ST_TO_ADDR
25085: GO 25088
25087: POP
// end ;
25088: LD_VAR 0 3
25092: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25093: LD_INT 0
25095: PPUSH
25096: PPUSH
25097: PPUSH
25098: PPUSH
25099: PPUSH
25100: PPUSH
25101: PPUSH
25102: PPUSH
25103: PPUSH
25104: PPUSH
25105: PPUSH
// result := false ;
25106: LD_ADDR_VAR 0 6
25110: PUSH
25111: LD_INT 0
25113: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25114: LD_VAR 0 1
25118: NOT
25119: PUSH
25120: LD_VAR 0 1
25124: PPUSH
25125: CALL_OW 266
25129: PUSH
25130: LD_INT 0
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: IN
25140: NOT
25141: OR
25142: PUSH
25143: LD_VAR 0 2
25147: NOT
25148: OR
25149: PUSH
25150: LD_VAR 0 5
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: LD_INT 1
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: LD_INT 4
25169: PUSH
25170: LD_INT 5
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: IN
25181: NOT
25182: OR
25183: PUSH
25184: LD_VAR 0 3
25188: PPUSH
25189: LD_VAR 0 4
25193: PPUSH
25194: CALL_OW 488
25198: NOT
25199: OR
25200: IFFALSE 25204
// exit ;
25202: GO 25940
// side := GetSide ( depot ) ;
25204: LD_ADDR_VAR 0 9
25208: PUSH
25209: LD_VAR 0 1
25213: PPUSH
25214: CALL_OW 255
25218: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25219: LD_VAR 0 9
25223: PPUSH
25224: LD_VAR 0 2
25228: PPUSH
25229: CALL 24713 0 2
25233: NOT
25234: IFFALSE 25238
// exit ;
25236: GO 25940
// pom := GetBase ( depot ) ;
25238: LD_ADDR_VAR 0 10
25242: PUSH
25243: LD_VAR 0 1
25247: PPUSH
25248: CALL_OW 274
25252: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25253: LD_ADDR_VAR 0 11
25257: PUSH
25258: LD_VAR 0 2
25262: PPUSH
25263: LD_VAR 0 1
25267: PPUSH
25268: CALL_OW 248
25272: PPUSH
25273: CALL_OW 450
25277: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
25278: LD_VAR 0 10
25282: PPUSH
25283: LD_INT 1
25285: PPUSH
25286: CALL_OW 275
25290: PUSH
25291: LD_VAR 0 11
25295: PUSH
25296: LD_INT 1
25298: ARRAY
25299: GREATEREQUAL
25300: PUSH
25301: LD_VAR 0 10
25305: PPUSH
25306: LD_INT 2
25308: PPUSH
25309: CALL_OW 275
25313: PUSH
25314: LD_VAR 0 11
25318: PUSH
25319: LD_INT 2
25321: ARRAY
25322: GREATEREQUAL
25323: AND
25324: PUSH
25325: LD_VAR 0 10
25329: PPUSH
25330: LD_INT 3
25332: PPUSH
25333: CALL_OW 275
25337: PUSH
25338: LD_VAR 0 11
25342: PUSH
25343: LD_INT 3
25345: ARRAY
25346: GREATEREQUAL
25347: AND
25348: NOT
25349: IFFALSE 25353
// exit ;
25351: GO 25940
// if GetBType ( depot ) = b_depot then
25353: LD_VAR 0 1
25357: PPUSH
25358: CALL_OW 266
25362: PUSH
25363: LD_INT 0
25365: EQUAL
25366: IFFALSE 25378
// dist := 28 else
25368: LD_ADDR_VAR 0 14
25372: PUSH
25373: LD_INT 28
25375: ST_TO_ADDR
25376: GO 25386
// dist := 36 ;
25378: LD_ADDR_VAR 0 14
25382: PUSH
25383: LD_INT 36
25385: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
25386: LD_VAR 0 1
25390: PPUSH
25391: LD_VAR 0 3
25395: PPUSH
25396: LD_VAR 0 4
25400: PPUSH
25401: CALL_OW 297
25405: PUSH
25406: LD_VAR 0 14
25410: GREATER
25411: IFFALSE 25415
// exit ;
25413: GO 25940
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
25415: LD_ADDR_VAR 0 12
25419: PUSH
25420: LD_VAR 0 2
25424: PPUSH
25425: LD_VAR 0 3
25429: PPUSH
25430: LD_VAR 0 4
25434: PPUSH
25435: LD_VAR 0 5
25439: PPUSH
25440: LD_VAR 0 1
25444: PPUSH
25445: CALL_OW 248
25449: PPUSH
25450: LD_INT 0
25452: PPUSH
25453: CALL 25945 0 6
25457: ST_TO_ADDR
// if not hexes then
25458: LD_VAR 0 12
25462: NOT
25463: IFFALSE 25467
// exit ;
25465: GO 25940
// hex := GetHexInfo ( x , y ) ;
25467: LD_ADDR_VAR 0 15
25471: PUSH
25472: LD_VAR 0 3
25476: PPUSH
25477: LD_VAR 0 4
25481: PPUSH
25482: CALL_OW 546
25486: ST_TO_ADDR
// if hex [ 1 ] then
25487: LD_VAR 0 15
25491: PUSH
25492: LD_INT 1
25494: ARRAY
25495: IFFALSE 25499
// exit ;
25497: GO 25940
// height := hex [ 2 ] ;
25499: LD_ADDR_VAR 0 13
25503: PUSH
25504: LD_VAR 0 15
25508: PUSH
25509: LD_INT 2
25511: ARRAY
25512: ST_TO_ADDR
// for i = 1 to hexes do
25513: LD_ADDR_VAR 0 7
25517: PUSH
25518: DOUBLE
25519: LD_INT 1
25521: DEC
25522: ST_TO_ADDR
25523: LD_VAR 0 12
25527: PUSH
25528: FOR_TO
25529: IFFALSE 25859
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
25531: LD_VAR 0 12
25535: PUSH
25536: LD_VAR 0 7
25540: ARRAY
25541: PUSH
25542: LD_INT 1
25544: ARRAY
25545: PPUSH
25546: LD_VAR 0 12
25550: PUSH
25551: LD_VAR 0 7
25555: ARRAY
25556: PUSH
25557: LD_INT 2
25559: ARRAY
25560: PPUSH
25561: CALL_OW 488
25565: NOT
25566: PUSH
25567: LD_VAR 0 12
25571: PUSH
25572: LD_VAR 0 7
25576: ARRAY
25577: PUSH
25578: LD_INT 1
25580: ARRAY
25581: PPUSH
25582: LD_VAR 0 12
25586: PUSH
25587: LD_VAR 0 7
25591: ARRAY
25592: PUSH
25593: LD_INT 2
25595: ARRAY
25596: PPUSH
25597: CALL_OW 428
25601: PUSH
25602: LD_INT 0
25604: GREATER
25605: OR
25606: PUSH
25607: LD_VAR 0 12
25611: PUSH
25612: LD_VAR 0 7
25616: ARRAY
25617: PUSH
25618: LD_INT 1
25620: ARRAY
25621: PPUSH
25622: LD_VAR 0 12
25626: PUSH
25627: LD_VAR 0 7
25631: ARRAY
25632: PUSH
25633: LD_INT 2
25635: ARRAY
25636: PPUSH
25637: CALL_OW 351
25641: OR
25642: IFFALSE 25648
// exit ;
25644: POP
25645: POP
25646: GO 25940
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
25648: LD_ADDR_VAR 0 8
25652: PUSH
25653: LD_VAR 0 12
25657: PUSH
25658: LD_VAR 0 7
25662: ARRAY
25663: PUSH
25664: LD_INT 1
25666: ARRAY
25667: PPUSH
25668: LD_VAR 0 12
25672: PUSH
25673: LD_VAR 0 7
25677: ARRAY
25678: PUSH
25679: LD_INT 2
25681: ARRAY
25682: PPUSH
25683: CALL_OW 546
25687: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
25688: LD_VAR 0 8
25692: PUSH
25693: LD_INT 1
25695: ARRAY
25696: PUSH
25697: LD_VAR 0 8
25701: PUSH
25702: LD_INT 2
25704: ARRAY
25705: PUSH
25706: LD_VAR 0 13
25710: PUSH
25711: LD_INT 2
25713: PLUS
25714: GREATER
25715: OR
25716: PUSH
25717: LD_VAR 0 8
25721: PUSH
25722: LD_INT 2
25724: ARRAY
25725: PUSH
25726: LD_VAR 0 13
25730: PUSH
25731: LD_INT 2
25733: MINUS
25734: LESS
25735: OR
25736: PUSH
25737: LD_VAR 0 8
25741: PUSH
25742: LD_INT 3
25744: ARRAY
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: LD_INT 8
25751: PUSH
25752: LD_INT 9
25754: PUSH
25755: LD_INT 10
25757: PUSH
25758: LD_INT 11
25760: PUSH
25761: LD_INT 12
25763: PUSH
25764: LD_INT 13
25766: PUSH
25767: LD_INT 16
25769: PUSH
25770: LD_INT 17
25772: PUSH
25773: LD_INT 18
25775: PUSH
25776: LD_INT 19
25778: PUSH
25779: LD_INT 20
25781: PUSH
25782: LD_INT 21
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: IN
25800: NOT
25801: OR
25802: PUSH
25803: LD_VAR 0 8
25807: PUSH
25808: LD_INT 5
25810: ARRAY
25811: NOT
25812: OR
25813: PUSH
25814: LD_VAR 0 8
25818: PUSH
25819: LD_INT 6
25821: ARRAY
25822: PUSH
25823: LD_INT 1
25825: PUSH
25826: LD_INT 2
25828: PUSH
25829: LD_INT 7
25831: PUSH
25832: LD_INT 9
25834: PUSH
25835: LD_INT 10
25837: PUSH
25838: LD_INT 11
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: IN
25849: NOT
25850: OR
25851: IFFALSE 25857
// exit ;
25853: POP
25854: POP
25855: GO 25940
// end ;
25857: GO 25528
25859: POP
25860: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
25861: LD_VAR 0 9
25865: PPUSH
25866: LD_VAR 0 3
25870: PPUSH
25871: LD_VAR 0 4
25875: PPUSH
25876: LD_INT 20
25878: PPUSH
25879: CALL 17886 0 4
25883: PUSH
25884: LD_INT 4
25886: ARRAY
25887: IFFALSE 25891
// exit ;
25889: GO 25940
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
25891: LD_VAR 0 2
25895: PUSH
25896: LD_INT 29
25898: PUSH
25899: LD_INT 30
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: IN
25906: PUSH
25907: LD_VAR 0 3
25911: PPUSH
25912: LD_VAR 0 4
25916: PPUSH
25917: LD_VAR 0 9
25921: PPUSH
25922: CALL_OW 440
25926: NOT
25927: AND
25928: IFFALSE 25932
// exit ;
25930: GO 25940
// result := true ;
25932: LD_ADDR_VAR 0 6
25936: PUSH
25937: LD_INT 1
25939: ST_TO_ADDR
// end ;
25940: LD_VAR 0 6
25944: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
25945: LD_INT 0
25947: PPUSH
25948: PPUSH
25949: PPUSH
25950: PPUSH
25951: PPUSH
25952: PPUSH
25953: PPUSH
25954: PPUSH
25955: PPUSH
25956: PPUSH
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
25962: PPUSH
25963: PPUSH
25964: PPUSH
25965: PPUSH
25966: PPUSH
25967: PPUSH
25968: PPUSH
25969: PPUSH
25970: PPUSH
25971: PPUSH
25972: PPUSH
25973: PPUSH
25974: PPUSH
25975: PPUSH
25976: PPUSH
25977: PPUSH
25978: PPUSH
25979: PPUSH
25980: PPUSH
25981: PPUSH
25982: PPUSH
25983: PPUSH
25984: PPUSH
25985: PPUSH
25986: PPUSH
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
25993: PPUSH
25994: PPUSH
25995: PPUSH
25996: PPUSH
25997: PPUSH
25998: PPUSH
25999: PPUSH
26000: PPUSH
26001: PPUSH
26002: PPUSH
26003: PPUSH
26004: PPUSH
// result = [ ] ;
26005: LD_ADDR_VAR 0 7
26009: PUSH
26010: EMPTY
26011: ST_TO_ADDR
// temp_list = [ ] ;
26012: LD_ADDR_VAR 0 9
26016: PUSH
26017: EMPTY
26018: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26019: LD_VAR 0 4
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: LD_INT 3
26035: PUSH
26036: LD_INT 4
26038: PUSH
26039: LD_INT 5
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: IN
26050: NOT
26051: PUSH
26052: LD_VAR 0 1
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: LD_INT 1
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: IN
26067: PUSH
26068: LD_VAR 0 5
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: LD_INT 2
26078: PUSH
26079: LD_INT 3
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: LIST
26086: IN
26087: NOT
26088: AND
26089: OR
26090: IFFALSE 26094
// exit ;
26092: GO 44485
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26094: LD_VAR 0 1
26098: PUSH
26099: LD_INT 6
26101: PUSH
26102: LD_INT 7
26104: PUSH
26105: LD_INT 8
26107: PUSH
26108: LD_INT 13
26110: PUSH
26111: LD_INT 12
26113: PUSH
26114: LD_INT 15
26116: PUSH
26117: LD_INT 11
26119: PUSH
26120: LD_INT 14
26122: PUSH
26123: LD_INT 10
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: IN
26137: IFFALSE 26147
// btype = b_lab ;
26139: LD_ADDR_VAR 0 1
26143: PUSH
26144: LD_INT 6
26146: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26147: LD_VAR 0 6
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: LD_INT 2
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: LIST
26165: IN
26166: NOT
26167: PUSH
26168: LD_VAR 0 1
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: LD_INT 3
26184: PUSH
26185: LD_INT 6
26187: PUSH
26188: LD_INT 36
26190: PUSH
26191: LD_INT 4
26193: PUSH
26194: LD_INT 5
26196: PUSH
26197: LD_INT 31
26199: PUSH
26200: LD_INT 32
26202: PUSH
26203: LD_INT 33
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: IN
26219: NOT
26220: PUSH
26221: LD_VAR 0 6
26225: PUSH
26226: LD_INT 1
26228: EQUAL
26229: AND
26230: OR
26231: PUSH
26232: LD_VAR 0 1
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 3
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: IN
26247: NOT
26248: PUSH
26249: LD_VAR 0 6
26253: PUSH
26254: LD_INT 2
26256: EQUAL
26257: AND
26258: OR
26259: IFFALSE 26269
// mode = 0 ;
26261: LD_ADDR_VAR 0 6
26265: PUSH
26266: LD_INT 0
26268: ST_TO_ADDR
// case mode of 0 :
26269: LD_VAR 0 6
26273: PUSH
26274: LD_INT 0
26276: DOUBLE
26277: EQUAL
26278: IFTRUE 26282
26280: GO 37735
26282: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26283: LD_ADDR_VAR 0 11
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: LD_INT 0
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: LD_INT 1
26303: NEG
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 1
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 1
26321: PUSH
26322: LD_INT 1
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: LD_INT 1
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 1
26341: NEG
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 1
26352: NEG
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 1
26364: NEG
26365: PUSH
26366: LD_INT 2
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 0
26376: PUSH
26377: LD_INT 2
26379: NEG
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 1
26387: PUSH
26388: LD_INT 1
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 1
26398: PUSH
26399: LD_INT 2
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 0
26408: PUSH
26409: LD_INT 2
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: NEG
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 1
26429: PUSH
26430: LD_INT 3
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: LD_INT 3
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26476: LD_ADDR_VAR 0 12
26480: PUSH
26481: LD_INT 0
26483: PUSH
26484: LD_INT 0
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: PUSH
26491: LD_INT 0
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: LD_INT 0
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: LD_INT 0
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: LD_INT 1
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 1
26557: PUSH
26558: LD_INT 1
26560: NEG
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 2
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 2
26578: PUSH
26579: LD_INT 1
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 2
26599: NEG
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 2
26610: NEG
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 2
26622: NEG
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 3
26633: NEG
26634: PUSH
26635: LD_INT 0
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: LD_INT 3
26644: NEG
26645: PUSH
26646: LD_INT 1
26648: NEG
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26672: LD_ADDR_VAR 0 13
26676: PUSH
26677: LD_INT 0
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: LD_INT 1
26692: NEG
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: LD_INT 1
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 1
26730: NEG
26731: PUSH
26732: LD_INT 0
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: PUSH
26739: LD_INT 1
26741: NEG
26742: PUSH
26743: LD_INT 1
26745: NEG
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: LD_INT 2
26757: NEG
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 2
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 2
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 2
26795: NEG
26796: PUSH
26797: LD_INT 1
26799: NEG
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 2
26807: NEG
26808: PUSH
26809: LD_INT 2
26811: NEG
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 2
26819: NEG
26820: PUSH
26821: LD_INT 3
26823: NEG
26824: PUSH
26825: EMPTY
26826: LIST
26827: LIST
26828: PUSH
26829: LD_INT 3
26831: NEG
26832: PUSH
26833: LD_INT 2
26835: NEG
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 3
26843: NEG
26844: PUSH
26845: LD_INT 3
26847: NEG
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26871: LD_ADDR_VAR 0 14
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: LD_INT 1
26891: NEG
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: LD_INT 1
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: PUSH
26917: LD_INT 0
26919: PUSH
26920: LD_INT 1
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: NEG
26941: PUSH
26942: LD_INT 1
26944: NEG
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: NEG
26953: PUSH
26954: LD_INT 2
26956: NEG
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: LD_INT 2
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 1
26975: PUSH
26976: LD_INT 1
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 2
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: PUSH
26994: LD_INT 0
26996: PUSH
26997: LD_INT 2
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: LD_INT 3
27021: NEG
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 0
27029: PUSH
27030: LD_INT 3
27032: NEG
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: LD_INT 2
27043: NEG
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27067: LD_ADDR_VAR 0 15
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: LD_INT 1
27087: NEG
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 1
27125: NEG
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: LD_INT 1
27151: NEG
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 2
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 2
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: NEG
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 2
27190: NEG
27191: PUSH
27192: LD_INT 0
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 2
27201: NEG
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 2
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PUSH
27222: LD_INT 3
27224: PUSH
27225: LD_INT 0
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 3
27234: PUSH
27235: LD_INT 1
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27260: LD_ADDR_VAR 0 16
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: LD_INT 1
27280: NEG
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 0
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: NEG
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 1
27329: NEG
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: LD_INT 2
27345: NEG
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 2
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 2
27363: PUSH
27364: LD_INT 2
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 1
27373: PUSH
27374: LD_INT 2
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 2
27383: NEG
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: PUSH
27393: LD_INT 2
27395: NEG
27396: PUSH
27397: LD_INT 2
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 3
27407: PUSH
27408: LD_INT 2
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 3
27417: PUSH
27418: LD_INT 3
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 2
27427: PUSH
27428: LD_INT 3
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27453: LD_ADDR_VAR 0 17
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: LD_INT 0
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 1
27491: PUSH
27492: LD_INT 1
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 1
27534: NEG
27535: PUSH
27536: LD_INT 2
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 0
27546: PUSH
27547: LD_INT 2
27549: NEG
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: PUSH
27558: LD_INT 1
27560: NEG
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 2
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: LD_INT 2
27578: PUSH
27579: LD_INT 1
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: LD_INT 2
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 0
27608: PUSH
27609: LD_INT 2
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 1
27618: NEG
27619: PUSH
27620: LD_INT 1
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 2
27629: NEG
27630: PUSH
27631: LD_INT 0
27633: PUSH
27634: EMPTY
27635: LIST
27636: LIST
27637: PUSH
27638: LD_INT 2
27640: NEG
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 2
27652: NEG
27653: PUSH
27654: LD_INT 2
27656: NEG
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27683: LD_ADDR_VAR 0 18
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: LD_INT 0
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: LD_INT 0
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 1
27721: PUSH
27722: LD_INT 1
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: LD_INT 1
27734: PUSH
27735: EMPTY
27736: LIST
27737: LIST
27738: PUSH
27739: LD_INT 1
27741: NEG
27742: PUSH
27743: LD_INT 0
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 1
27752: NEG
27753: PUSH
27754: LD_INT 1
27756: NEG
27757: PUSH
27758: EMPTY
27759: LIST
27760: LIST
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: LD_INT 2
27768: NEG
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: LD_INT 0
27776: PUSH
27777: LD_INT 2
27779: NEG
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: PUSH
27788: LD_INT 1
27790: NEG
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 2
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: PUSH
27806: LD_INT 2
27808: PUSH
27809: LD_INT 1
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 2
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: LD_INT 1
27828: PUSH
27829: LD_INT 2
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 0
27838: PUSH
27839: LD_INT 2
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: NEG
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 2
27859: NEG
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 2
27870: NEG
27871: PUSH
27872: LD_INT 1
27874: NEG
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 2
27882: NEG
27883: PUSH
27884: LD_INT 2
27886: NEG
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27913: LD_ADDR_VAR 0 19
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: LD_INT 0
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 0
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: LD_INT 0
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 1
27951: PUSH
27952: LD_INT 1
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PUSH
27959: LD_INT 0
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 1
27971: NEG
27972: PUSH
27973: LD_INT 0
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 1
27982: NEG
27983: PUSH
27984: LD_INT 1
27986: NEG
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 1
27994: NEG
27995: PUSH
27996: LD_INT 2
27998: NEG
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 0
28006: PUSH
28007: LD_INT 2
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: LD_INT 1
28020: NEG
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 2
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 2
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: LD_INT 1
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: EMPTY
28063: LIST
28064: LIST
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: EMPTY
28073: LIST
28074: LIST
28075: PUSH
28076: LD_INT 1
28078: NEG
28079: PUSH
28080: LD_INT 1
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 2
28089: NEG
28090: PUSH
28091: LD_INT 0
28093: PUSH
28094: EMPTY
28095: LIST
28096: LIST
28097: PUSH
28098: LD_INT 2
28100: NEG
28101: PUSH
28102: LD_INT 1
28104: NEG
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 2
28112: NEG
28113: PUSH
28114: LD_INT 2
28116: NEG
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28143: LD_ADDR_VAR 0 20
28147: PUSH
28148: LD_INT 0
28150: PUSH
28151: LD_INT 0
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 0
28160: PUSH
28161: LD_INT 1
28163: NEG
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 1
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: LD_INT 1
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 1
28201: NEG
28202: PUSH
28203: LD_INT 0
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 1
28224: NEG
28225: PUSH
28226: LD_INT 2
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 0
28236: PUSH
28237: LD_INT 2
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 1
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 2
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 2
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 2
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: LD_INT 2
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: LD_INT 2
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: NEG
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 2
28319: NEG
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 2
28330: NEG
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 2
28342: NEG
28343: PUSH
28344: LD_INT 2
28346: NEG
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: LIST
28372: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28373: LD_ADDR_VAR 0 21
28377: PUSH
28378: LD_INT 0
28380: PUSH
28381: LD_INT 0
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 0
28390: PUSH
28391: LD_INT 1
28393: NEG
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: LD_INT 1
28401: PUSH
28402: LD_INT 0
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: LD_INT 1
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: PUSH
28419: LD_INT 0
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 1
28431: NEG
28432: PUSH
28433: LD_INT 0
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: LD_INT 1
28446: NEG
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: NEG
28455: PUSH
28456: LD_INT 2
28458: NEG
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 0
28466: PUSH
28467: LD_INT 2
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: LD_INT 1
28480: NEG
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 2
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 2
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 2
28508: PUSH
28509: LD_INT 2
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 1
28518: PUSH
28519: LD_INT 2
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 0
28528: PUSH
28529: LD_INT 2
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 1
28538: NEG
28539: PUSH
28540: LD_INT 1
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 2
28549: NEG
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 2
28560: NEG
28561: PUSH
28562: LD_INT 1
28564: NEG
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: PUSH
28570: LD_INT 2
28572: NEG
28573: PUSH
28574: LD_INT 2
28576: NEG
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28603: LD_ADDR_VAR 0 22
28607: PUSH
28608: LD_INT 0
28610: PUSH
28611: LD_INT 0
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 0
28620: PUSH
28621: LD_INT 1
28623: NEG
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: LD_INT 0
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 0
28651: PUSH
28652: LD_INT 1
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: LD_INT 2
28688: NEG
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 0
28696: PUSH
28697: LD_INT 2
28699: NEG
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: LD_INT 1
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 2
28728: PUSH
28729: LD_INT 1
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 2
28738: PUSH
28739: LD_INT 2
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: LD_INT 2
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: PUSH
28756: LD_INT 0
28758: PUSH
28759: LD_INT 2
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: LD_INT 1
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 2
28779: NEG
28780: PUSH
28781: LD_INT 0
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 2
28790: NEG
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 2
28802: NEG
28803: PUSH
28804: LD_INT 2
28806: NEG
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28833: LD_ADDR_VAR 0 23
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: LD_INT 1
28906: NEG
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: LD_INT 2
28918: NEG
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: LD_INT 2
28929: NEG
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: LD_INT 1
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 2
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 2
28958: PUSH
28959: LD_INT 1
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 2
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 0
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 1
28998: NEG
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: LD_INT 2
29009: NEG
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PUSH
29018: LD_INT 2
29020: NEG
29021: PUSH
29022: LD_INT 1
29024: NEG
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 2
29032: NEG
29033: PUSH
29034: LD_INT 2
29036: NEG
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: LD_INT 3
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: NEG
29057: PUSH
29058: LD_INT 3
29060: NEG
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 1
29068: PUSH
29069: LD_INT 2
29071: NEG
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29113: LD_ADDR_VAR 0 24
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 1
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: NEG
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 1
29182: NEG
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: NEG
29195: PUSH
29196: LD_INT 2
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 2
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 2
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: LD_INT 1
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: PUSH
29266: LD_INT 0
29268: PUSH
29269: LD_INT 2
29271: PUSH
29272: EMPTY
29273: LIST
29274: LIST
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 2
29289: NEG
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 2
29300: NEG
29301: PUSH
29302: LD_INT 1
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 2
29312: NEG
29313: PUSH
29314: LD_INT 2
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: LD_INT 1
29324: PUSH
29325: LD_INT 2
29327: NEG
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 3
29346: PUSH
29347: LD_INT 1
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: LD_INT 2
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
29389: LD_ADDR_VAR 0 25
29393: PUSH
29394: LD_INT 0
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: LD_INT 1
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 1
29417: PUSH
29418: LD_INT 0
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 1
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: NEG
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: NEG
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: NEG
29471: PUSH
29472: LD_INT 2
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 0
29482: PUSH
29483: LD_INT 2
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: LD_INT 1
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: LD_INT 0
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: LD_INT 1
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 2
29524: PUSH
29525: LD_INT 2
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 0
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: LD_INT 1
29554: NEG
29555: PUSH
29556: LD_INT 1
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 2
29565: NEG
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 2
29576: NEG
29577: PUSH
29578: LD_INT 1
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 3
29600: PUSH
29601: LD_INT 1
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 3
29610: PUSH
29611: LD_INT 2
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: PUSH
29618: LD_INT 2
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
29663: LD_ADDR_VAR 0 26
29667: PUSH
29668: LD_INT 0
29670: PUSH
29671: LD_INT 0
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: LD_INT 1
29683: NEG
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: LD_INT 0
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: LD_INT 1
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: PUSH
29734: LD_INT 1
29736: NEG
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 1
29744: NEG
29745: PUSH
29746: LD_INT 2
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: LD_INT 2
29759: NEG
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 1
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 2
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 2
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: LD_INT 2
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 0
29818: PUSH
29819: LD_INT 2
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: NEG
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 2
29839: NEG
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 2
29850: NEG
29851: PUSH
29852: LD_INT 1
29854: NEG
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: LD_INT 2
29866: NEG
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: PUSH
29875: LD_INT 3
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: LD_INT 3
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: NEG
29895: PUSH
29896: LD_INT 2
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 2
29905: NEG
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29939: LD_ADDR_VAR 0 27
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: LD_INT 1
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: LD_INT 2
30024: NEG
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: LD_INT 2
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: LD_INT 1
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 2
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 2
30074: PUSH
30075: LD_INT 2
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 1
30084: PUSH
30085: LD_INT 2
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: LD_INT 2
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 2
30115: NEG
30116: PUSH
30117: LD_INT 0
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 2
30126: NEG
30127: PUSH
30128: LD_INT 1
30130: NEG
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 2
30138: NEG
30139: PUSH
30140: LD_INT 2
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 1
30150: NEG
30151: PUSH
30152: LD_INT 2
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: NEG
30162: PUSH
30163: LD_INT 1
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 3
30172: NEG
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 3
30184: NEG
30185: PUSH
30186: LD_INT 2
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30219: LD_ADDR_VAR 0 28
30223: PUSH
30224: LD_INT 0
30226: PUSH
30227: LD_INT 0
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: PUSH
30234: LD_INT 0
30236: PUSH
30237: LD_INT 1
30239: NEG
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: LD_INT 0
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 1
30257: PUSH
30258: LD_INT 1
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: LD_INT 0
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 1
30288: NEG
30289: PUSH
30290: LD_INT 1
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: NEG
30301: PUSH
30302: LD_INT 2
30304: NEG
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: LD_INT 2
30315: NEG
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 1
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 2
30334: PUSH
30335: LD_INT 0
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 2
30344: PUSH
30345: LD_INT 1
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: LD_INT 2
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: LD_INT 2
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: NEG
30385: PUSH
30386: LD_INT 1
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: PUSH
30393: LD_INT 2
30395: NEG
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 2
30406: NEG
30407: PUSH
30408: LD_INT 1
30410: NEG
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: NEG
30419: PUSH
30420: LD_INT 2
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 2
30430: NEG
30431: PUSH
30432: LD_INT 3
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: LD_INT 3
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 3
30454: NEG
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 3
30466: NEG
30467: PUSH
30468: LD_INT 2
30470: NEG
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30501: LD_ADDR_VAR 0 29
30505: PUSH
30506: LD_INT 0
30508: PUSH
30509: LD_INT 0
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: LD_INT 1
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: LD_INT 0
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: LD_INT 1
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 1
30559: NEG
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: LD_INT 1
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: LD_INT 2
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 2
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: LD_INT 1
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 2
30616: PUSH
30617: LD_INT 0
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 2
30626: PUSH
30627: LD_INT 1
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: LD_INT 2
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 0
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 1
30656: NEG
30657: PUSH
30658: LD_INT 1
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: LD_INT 2
30667: NEG
30668: PUSH
30669: LD_INT 1
30671: NEG
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 2
30679: NEG
30680: PUSH
30681: LD_INT 2
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 2
30691: NEG
30692: PUSH
30693: LD_INT 3
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 2
30703: PUSH
30704: LD_INT 1
30706: NEG
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 3
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: LD_INT 3
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: LD_INT 2
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 3
30745: NEG
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30780: LD_ADDR_VAR 0 30
30784: PUSH
30785: LD_INT 0
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 0
30797: PUSH
30798: LD_INT 1
30800: NEG
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 1
30808: PUSH
30809: LD_INT 0
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: LD_INT 1
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: LD_INT 1
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 1
30838: NEG
30839: PUSH
30840: LD_INT 0
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: LD_INT 1
30853: NEG
30854: PUSH
30855: EMPTY
30856: LIST
30857: LIST
30858: PUSH
30859: LD_INT 1
30861: NEG
30862: PUSH
30863: LD_INT 2
30865: NEG
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: LD_INT 2
30876: NEG
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: LD_INT 1
30887: NEG
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 2
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 2
30915: PUSH
30916: LD_INT 2
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 1
30925: PUSH
30926: LD_INT 2
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: LD_INT 1
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 2
30946: NEG
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 2
30957: NEG
30958: PUSH
30959: LD_INT 1
30961: NEG
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: LD_INT 3
30973: NEG
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: PUSH
30979: LD_INT 1
30981: PUSH
30982: LD_INT 2
30984: NEG
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 3
30992: PUSH
30993: LD_INT 2
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 2
31002: PUSH
31003: LD_INT 3
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 2
31012: NEG
31013: PUSH
31014: LD_INT 1
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 3
31023: NEG
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31058: LD_ADDR_VAR 0 31
31062: PUSH
31063: LD_INT 0
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: LD_INT 1
31078: NEG
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: PUSH
31087: LD_INT 0
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 1
31096: PUSH
31097: LD_INT 1
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 1
31116: NEG
31117: PUSH
31118: LD_INT 0
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: PUSH
31141: LD_INT 2
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 2
31162: PUSH
31163: LD_INT 0
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 2
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 2
31182: PUSH
31183: LD_INT 2
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: LD_INT 2
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 0
31202: PUSH
31203: LD_INT 2
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 1
31212: NEG
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 2
31223: NEG
31224: PUSH
31225: LD_INT 1
31227: NEG
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: PUSH
31233: LD_INT 2
31235: NEG
31236: PUSH
31237: LD_INT 2
31239: NEG
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: LD_INT 2
31247: NEG
31248: PUSH
31249: LD_INT 3
31251: NEG
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 2
31259: PUSH
31260: LD_INT 1
31262: NEG
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 3
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: LD_INT 3
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 3
31301: NEG
31302: PUSH
31303: LD_INT 2
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31336: LD_ADDR_VAR 0 32
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: LD_INT 0
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 0
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 1
31374: PUSH
31375: LD_INT 1
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: LD_INT 1
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 1
31394: NEG
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: LD_INT 1
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: NEG
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: LD_INT 2
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: LD_INT 1
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: LD_INT 2
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 0
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: NEG
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: LD_INT 0
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 2
31513: NEG
31514: PUSH
31515: LD_INT 1
31517: NEG
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: LD_INT 3
31529: NEG
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 1
31537: PUSH
31538: LD_INT 2
31540: NEG
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 3
31548: PUSH
31549: LD_INT 2
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: LD_INT 3
31561: PUSH
31562: EMPTY
31563: LIST
31564: LIST
31565: PUSH
31566: LD_INT 2
31568: NEG
31569: PUSH
31570: LD_INT 1
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 3
31579: NEG
31580: PUSH
31581: LD_INT 1
31583: NEG
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31614: LD_ADDR_VAR 0 33
31618: PUSH
31619: LD_INT 0
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 0
31631: PUSH
31632: LD_INT 1
31634: NEG
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 1
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 1
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: LD_INT 1
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 1
31672: NEG
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: NEG
31684: PUSH
31685: LD_INT 1
31687: NEG
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: PUSH
31693: LD_INT 1
31695: NEG
31696: PUSH
31697: LD_INT 2
31699: NEG
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: LD_INT 1
31710: NEG
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 2
31718: PUSH
31719: LD_INT 0
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 2
31728: PUSH
31729: LD_INT 1
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 1
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: LD_INT 2
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 1
31758: NEG
31759: PUSH
31760: LD_INT 1
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 2
31769: NEG
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: LD_INT 1
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 2
31792: NEG
31793: PUSH
31794: LD_INT 2
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: LD_INT 3
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 3
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: LD_INT 3
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 1
31847: NEG
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 3
31858: NEG
31859: PUSH
31860: LD_INT 2
31862: NEG
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31893: LD_ADDR_VAR 0 34
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: LD_INT 0
31910: PUSH
31911: LD_INT 1
31913: NEG
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: LD_INT 1
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 0
31941: PUSH
31942: LD_INT 1
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 1
31962: NEG
31963: PUSH
31964: LD_INT 1
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 1
31974: NEG
31975: PUSH
31976: LD_INT 2
31978: NEG
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: LD_INT 2
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: LD_INT 1
32000: NEG
32001: PUSH
32002: EMPTY
32003: LIST
32004: LIST
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: LD_INT 1
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 2
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: PUSH
32029: LD_INT 2
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 1
32038: NEG
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 2
32049: NEG
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: LD_INT 1
32064: NEG
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 2
32072: NEG
32073: PUSH
32074: LD_INT 2
32076: NEG
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: LD_INT 3
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: LD_INT 2
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 3
32107: PUSH
32108: LD_INT 2
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 2
32117: PUSH
32118: LD_INT 3
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: NEG
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 3
32138: NEG
32139: PUSH
32140: LD_INT 1
32142: NEG
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32173: LD_ADDR_VAR 0 35
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: LD_INT 1
32193: NEG
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: LD_INT 0
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 1
32231: NEG
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: LD_INT 1
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 2
32264: NEG
32265: PUSH
32266: LD_INT 1
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32285: LD_ADDR_VAR 0 36
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 0
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 1
32343: NEG
32344: PUSH
32345: LD_INT 0
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 1
32354: NEG
32355: PUSH
32356: LD_INT 1
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: LD_INT 2
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: PUSH
32379: LD_INT 2
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32397: LD_ADDR_VAR 0 37
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: LD_INT 1
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 0
32445: PUSH
32446: LD_INT 1
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 1
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: LD_INT 1
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32509: LD_ADDR_VAR 0 38
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 0
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 1
32537: PUSH
32538: LD_INT 0
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 0
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 1
32567: NEG
32568: PUSH
32569: LD_INT 0
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 2
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 2
32600: NEG
32601: PUSH
32602: LD_INT 1
32604: NEG
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
32621: LD_ADDR_VAR 0 39
32625: PUSH
32626: LD_INT 0
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: LD_INT 1
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: LD_INT 1
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: LD_INT 1
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 1
32679: NEG
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PUSH
32692: LD_INT 1
32694: NEG
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: LD_INT 2
32706: NEG
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: LD_INT 2
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
32733: LD_ADDR_VAR 0 40
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: LD_INT 0
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 0
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 1
32771: PUSH
32772: LD_INT 1
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: LD_INT 1
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 1
32791: NEG
32792: PUSH
32793: LD_INT 0
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 1
32802: NEG
32803: PUSH
32804: LD_INT 1
32806: NEG
32807: PUSH
32808: EMPTY
32809: LIST
32810: LIST
32811: PUSH
32812: LD_INT 1
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: LD_INT 1
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32845: LD_ADDR_VAR 0 41
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: LD_INT 0
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 0
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: PUSH
32874: LD_INT 0
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 1
32914: NEG
32915: PUSH
32916: LD_INT 1
32918: NEG
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 1
32926: NEG
32927: PUSH
32928: LD_INT 2
32930: NEG
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: PUSH
32936: LD_INT 1
32938: PUSH
32939: LD_INT 1
32941: NEG
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 2
32949: PUSH
32950: LD_INT 0
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 2
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 2
32969: PUSH
32970: LD_INT 2
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 1
32989: NEG
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 2
33000: NEG
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 2
33011: NEG
33012: PUSH
33013: LD_INT 1
33015: NEG
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 2
33023: NEG
33024: PUSH
33025: LD_INT 2
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: NEG
33036: PUSH
33037: LD_INT 3
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: LD_INT 3
33058: PUSH
33059: LD_INT 0
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 3
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 3
33078: PUSH
33079: LD_INT 2
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 3
33088: PUSH
33089: LD_INT 3
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: LD_INT 3
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 2
33108: NEG
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 3
33119: NEG
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 3
33130: NEG
33131: PUSH
33132: LD_INT 1
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 3
33142: NEG
33143: PUSH
33144: LD_INT 2
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 3
33154: NEG
33155: PUSH
33156: LD_INT 3
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33195: LD_ADDR_VAR 0 42
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: LD_INT 2
33280: NEG
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 0
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 2
33320: PUSH
33321: LD_INT 2
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: PUSH
33348: LD_INT 1
33350: NEG
33351: PUSH
33352: LD_INT 1
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PUSH
33359: LD_INT 2
33361: NEG
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 2
33373: NEG
33374: PUSH
33375: LD_INT 2
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 2
33385: NEG
33386: PUSH
33387: LD_INT 3
33389: NEG
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: PUSH
33395: LD_INT 1
33397: NEG
33398: PUSH
33399: LD_INT 3
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: LD_INT 3
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: LD_INT 2
33423: NEG
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 3
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 3
33441: PUSH
33442: LD_INT 3
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: LD_INT 3
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: LD_INT 3
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 0
33471: PUSH
33472: LD_INT 3
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: NEG
33482: PUSH
33483: LD_INT 2
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 3
33492: NEG
33493: PUSH
33494: LD_INT 2
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 3
33504: NEG
33505: PUSH
33506: LD_INT 3
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33545: LD_ADDR_VAR 0 43
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: LD_INT 0
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: LD_INT 1
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: NEG
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: NEG
33627: PUSH
33628: LD_INT 2
33630: NEG
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: PUSH
33636: LD_INT 0
33638: PUSH
33639: LD_INT 2
33641: NEG
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: LD_INT 1
33652: NEG
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 2
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: PUSH
33681: LD_INT 2
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 0
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: EMPTY
33695: LIST
33696: LIST
33697: PUSH
33698: LD_INT 1
33700: NEG
33701: PUSH
33702: LD_INT 1
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: NEG
33712: PUSH
33713: LD_INT 0
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 2
33722: NEG
33723: PUSH
33724: LD_INT 1
33726: NEG
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: NEG
33735: PUSH
33736: LD_INT 3
33738: NEG
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: LD_INT 3
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: LD_INT 2
33760: NEG
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: LD_INT 1
33771: NEG
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 3
33779: PUSH
33780: LD_INT 0
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 3
33789: PUSH
33790: LD_INT 1
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: LD_INT 3
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: PUSH
33817: LD_INT 1
33819: NEG
33820: PUSH
33821: LD_INT 2
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 2
33830: NEG
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 3
33841: NEG
33842: PUSH
33843: LD_INT 0
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 3
33852: NEG
33853: PUSH
33854: LD_INT 1
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33893: LD_ADDR_VAR 0 44
33897: PUSH
33898: LD_INT 0
33900: PUSH
33901: LD_INT 0
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 0
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: NEG
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 1
33962: NEG
33963: PUSH
33964: LD_INT 1
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: LD_INT 2
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 2
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 2
34017: PUSH
34018: LD_INT 2
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: PUSH
34028: LD_INT 2
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 1
34037: NEG
34038: PUSH
34039: LD_INT 1
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 2
34048: NEG
34049: PUSH
34050: LD_INT 0
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 2
34059: NEG
34060: PUSH
34061: LD_INT 1
34063: NEG
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 2
34071: NEG
34072: PUSH
34073: LD_INT 2
34075: NEG
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 2
34083: NEG
34084: PUSH
34085: LD_INT 3
34087: NEG
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 2
34095: PUSH
34096: LD_INT 1
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 3
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 3
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 3
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 3
34136: PUSH
34137: LD_INT 3
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 2
34146: PUSH
34147: LD_INT 3
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 2
34156: NEG
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: PUSH
34165: LD_INT 3
34167: NEG
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: LD_INT 3
34178: NEG
34179: PUSH
34180: LD_INT 1
34182: NEG
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 3
34190: NEG
34191: PUSH
34192: LD_INT 2
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 3
34202: NEG
34203: PUSH
34204: LD_INT 3
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34243: LD_ADDR_VAR 0 45
34247: PUSH
34248: LD_INT 0
34250: PUSH
34251: LD_INT 0
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: LD_INT 1
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 0
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 1
34301: NEG
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: NEG
34313: PUSH
34314: LD_INT 1
34316: NEG
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 1
34324: NEG
34325: PUSH
34326: LD_INT 2
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: LD_INT 2
34339: NEG
34340: PUSH
34341: EMPTY
34342: LIST
34343: LIST
34344: PUSH
34345: LD_INT 1
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 2
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: PUSH
34369: LD_INT 2
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: NEG
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: LD_INT 2
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PUSH
34435: LD_INT 3
34437: NEG
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 1
34445: NEG
34446: PUSH
34447: LD_INT 3
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 0
34457: PUSH
34458: LD_INT 3
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 1
34468: PUSH
34469: LD_INT 2
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 3
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 3
34489: PUSH
34490: LD_INT 3
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 2
34499: PUSH
34500: LD_INT 3
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 1
34509: PUSH
34510: LD_INT 3
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 3
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 3
34540: NEG
34541: PUSH
34542: LD_INT 2
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 3
34552: NEG
34553: PUSH
34554: LD_INT 3
34556: NEG
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34593: LD_ADDR_VAR 0 46
34597: PUSH
34598: LD_INT 0
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 1
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: NEG
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: NEG
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: LD_INT 0
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: LD_INT 1
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: LD_INT 2
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: PUSH
34736: LD_INT 0
34738: PUSH
34739: LD_INT 2
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 1
34748: NEG
34749: PUSH
34750: LD_INT 1
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 2
34759: NEG
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 2
34770: NEG
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: NEG
34783: PUSH
34784: LD_INT 3
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: LD_INT 3
34797: NEG
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 1
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: LD_INT 1
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 3
34827: PUSH
34828: LD_INT 0
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 3
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: LD_INT 3
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: LD_INT 3
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 2
34878: NEG
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 3
34889: NEG
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 3
34900: NEG
34901: PUSH
34902: LD_INT 1
34904: NEG
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34941: LD_ADDR_VAR 0 47
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: LD_INT 1
34961: NEG
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: LD_INT 0
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: LD_INT 1
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 1
34999: NEG
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: LD_INT 1
35014: NEG
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: NEG
35023: PUSH
35024: LD_INT 2
35026: NEG
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: LD_INT 2
35037: NEG
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 2
35056: NEG
35057: PUSH
35058: LD_INT 1
35060: NEG
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 2
35068: NEG
35069: PUSH
35070: LD_INT 2
35072: NEG
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35092: LD_ADDR_VAR 0 48
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: LD_INT 1
35112: NEG
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: PUSH
35121: LD_INT 0
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 1
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 0
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 1
35150: NEG
35151: PUSH
35152: LD_INT 0
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: LD_INT 1
35165: NEG
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: LD_INT 2
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: LD_INT 2
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 2
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 2
35217: PUSH
35218: LD_INT 1
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35239: LD_ADDR_VAR 0 49
35243: PUSH
35244: LD_INT 0
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 0
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 1
35267: PUSH
35268: LD_INT 0
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 0
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 1
35297: NEG
35298: PUSH
35299: LD_INT 0
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: PUSH
35332: LD_INT 0
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 2
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 2
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: PUSH
35359: LD_INT 1
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35383: LD_ADDR_VAR 0 50
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 1
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 1
35452: NEG
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 2
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 2
35474: PUSH
35475: LD_INT 2
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: LD_INT 2
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35527: LD_ADDR_VAR 0 51
35531: PUSH
35532: LD_INT 0
35534: PUSH
35535: LD_INT 0
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: LD_INT 1
35547: NEG
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 1
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: LD_INT 1
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 1
35608: PUSH
35609: LD_INT 2
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: NEG
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 2
35639: NEG
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 2
35650: NEG
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35674: LD_ADDR_VAR 0 52
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: LD_INT 1
35694: NEG
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: PUSH
35703: LD_INT 0
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: NEG
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: LD_INT 1
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: NEG
35756: PUSH
35757: LD_INT 2
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: LD_INT 1
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 2
35778: NEG
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 2
35789: NEG
35790: PUSH
35791: LD_INT 1
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 2
35801: NEG
35802: PUSH
35803: LD_INT 2
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35825: LD_ADDR_VAR 0 53
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: LD_INT 1
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: LD_INT 1
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 1
35883: NEG
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 1
35894: NEG
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: LD_INT 2
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 2
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 2
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 2
35960: PUSH
35961: LD_INT 2
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: PUSH
35971: LD_INT 2
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: LD_INT 2
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 2
36001: NEG
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 2
36012: NEG
36013: PUSH
36014: LD_INT 1
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 2
36024: NEG
36025: PUSH
36026: LD_INT 2
36028: NEG
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36055: LD_ADDR_VAR 0 54
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: LD_INT 0
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 0
36072: PUSH
36073: LD_INT 1
36075: NEG
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 0
36103: PUSH
36104: LD_INT 1
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: NEG
36114: PUSH
36115: LD_INT 0
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 1
36124: NEG
36125: PUSH
36126: LD_INT 1
36128: NEG
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: LD_INT 2
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: LD_INT 2
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 2
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: LD_INT 2
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: LD_INT 2
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: NEG
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 2
36231: NEG
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 2
36242: NEG
36243: PUSH
36244: LD_INT 1
36246: NEG
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 2
36254: NEG
36255: PUSH
36256: LD_INT 2
36258: NEG
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36285: LD_ADDR_VAR 0 55
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 0
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 1
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: LD_INT 0
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 1
36354: NEG
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: LD_INT 2
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: PUSH
36390: LD_INT 1
36392: NEG
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 2
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 1
36430: PUSH
36431: LD_INT 2
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 0
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 2
36461: NEG
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 2
36472: NEG
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 2
36484: NEG
36485: PUSH
36486: LD_INT 2
36488: NEG
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36515: LD_ADDR_VAR 0 56
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: PUSH
36530: LD_INT 0
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 0
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 1
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 1
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: NEG
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: LD_INT 0
36608: PUSH
36609: LD_INT 2
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: LD_INT 1
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 2
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 1
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 2
36650: PUSH
36651: LD_INT 2
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 0
36670: PUSH
36671: LD_INT 2
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 1
36680: NEG
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 2
36691: NEG
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 2
36702: NEG
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 2
36714: NEG
36715: PUSH
36716: LD_INT 2
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: LIST
36744: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36745: LD_ADDR_VAR 0 57
36749: PUSH
36750: LD_INT 0
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 0
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: LD_INT 0
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 1
36803: NEG
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 1
36826: NEG
36827: PUSH
36828: LD_INT 2
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: LD_INT 2
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: LD_INT 1
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 2
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: LD_INT 2
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: LD_INT 2
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: LD_INT 2
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: LD_INT 1
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 2
36921: NEG
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 2
36944: NEG
36945: PUSH
36946: LD_INT 2
36948: NEG
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36975: LD_ADDR_VAR 0 58
36979: PUSH
36980: LD_INT 0
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 0
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: LD_INT 1
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: LD_INT 1
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: LD_INT 1
37048: NEG
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: LD_INT 2
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 2
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 2
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: PUSH
37121: LD_INT 2
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: LD_INT 2
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: LD_INT 1
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: LD_INT 0
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: LD_INT 1
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 2
37174: NEG
37175: PUSH
37176: LD_INT 2
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37205: LD_ADDR_VAR 0 59
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 0
37253: PUSH
37254: LD_INT 1
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: NEG
37264: PUSH
37265: LD_INT 0
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: LD_INT 1
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37293: LD_ADDR_VAR 0 60
37297: PUSH
37298: LD_INT 0
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 1
37331: PUSH
37332: LD_INT 1
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: NEG
37352: PUSH
37353: LD_INT 0
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37381: LD_ADDR_VAR 0 61
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 0
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37469: LD_ADDR_VAR 0 62
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: LD_INT 1
37489: NEG
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: LD_INT 1
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37557: LD_ADDR_VAR 0 63
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: LD_INT 0
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: LD_INT 0
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: LD_INT 1
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37645: LD_ADDR_VAR 0 64
37649: PUSH
37650: LD_INT 0
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 1
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 0
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: LD_INT 1
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: ST_TO_ADDR
// end ; 1 :
37733: GO 43630
37735: LD_INT 1
37737: DOUBLE
37738: EQUAL
37739: IFTRUE 37743
37741: GO 40366
37743: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37744: LD_ADDR_VAR 0 11
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: LD_INT 3
37755: NEG
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: LD_INT 3
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 2
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: LIST
37787: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37788: LD_ADDR_VAR 0 12
37792: PUSH
37793: LD_INT 2
37795: PUSH
37796: LD_INT 1
37798: NEG
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 3
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 3
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37829: LD_ADDR_VAR 0 13
37833: PUSH
37834: LD_INT 3
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 3
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: PUSH
37857: LD_INT 3
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37869: LD_ADDR_VAR 0 14
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: LD_INT 3
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: LD_INT 2
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37910: LD_ADDR_VAR 0 15
37914: PUSH
37915: LD_INT 2
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 3
37928: NEG
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 3
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37954: LD_ADDR_VAR 0 16
37958: PUSH
37959: LD_INT 2
37961: NEG
37962: PUSH
37963: LD_INT 3
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 3
37973: NEG
37974: PUSH
37975: LD_INT 2
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 3
37985: NEG
37986: PUSH
37987: LD_INT 3
37989: NEG
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: LIST
37999: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38000: LD_ADDR_VAR 0 17
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 3
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 3
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: LD_INT 2
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: LIST
38043: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38044: LD_ADDR_VAR 0 18
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 3
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 3
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38085: LD_ADDR_VAR 0 19
38089: PUSH
38090: LD_INT 3
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 3
38102: PUSH
38103: LD_INT 3
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 2
38112: PUSH
38113: LD_INT 3
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: LIST
38124: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38125: LD_ADDR_VAR 0 20
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: LD_INT 3
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: LD_INT 3
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38166: LD_ADDR_VAR 0 21
38170: PUSH
38171: LD_INT 2
38173: NEG
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 3
38184: NEG
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 3
38195: NEG
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: LIST
38209: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38210: LD_ADDR_VAR 0 22
38214: PUSH
38215: LD_INT 2
38217: NEG
38218: PUSH
38219: LD_INT 3
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 3
38229: NEG
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 3
38241: NEG
38242: PUSH
38243: LD_INT 3
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: LIST
38255: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
38256: LD_ADDR_VAR 0 23
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: LD_INT 3
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: LD_INT 4
38278: NEG
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 1
38286: PUSH
38287: LD_INT 3
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: LIST
38299: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
38300: LD_ADDR_VAR 0 24
38304: PUSH
38305: LD_INT 3
38307: PUSH
38308: LD_INT 0
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PUSH
38315: LD_INT 3
38317: PUSH
38318: LD_INT 1
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 4
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
38341: LD_ADDR_VAR 0 25
38345: PUSH
38346: LD_INT 3
38348: PUSH
38349: LD_INT 3
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 4
38358: PUSH
38359: LD_INT 3
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 3
38368: PUSH
38369: LD_INT 4
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
38381: LD_ADDR_VAR 0 26
38385: PUSH
38386: LD_INT 0
38388: PUSH
38389: LD_INT 3
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 1
38398: PUSH
38399: LD_INT 4
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 3
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: LIST
38421: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
38422: LD_ADDR_VAR 0 27
38426: PUSH
38427: LD_INT 3
38429: NEG
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 3
38440: NEG
38441: PUSH
38442: LD_INT 1
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 4
38451: NEG
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: LIST
38465: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
38466: LD_ADDR_VAR 0 28
38470: PUSH
38471: LD_INT 3
38473: NEG
38474: PUSH
38475: LD_INT 3
38477: NEG
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 3
38485: NEG
38486: PUSH
38487: LD_INT 4
38489: NEG
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 4
38497: NEG
38498: PUSH
38499: LD_INT 3
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: LIST
38511: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
38512: LD_ADDR_VAR 0 29
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: LD_INT 3
38523: NEG
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: LD_INT 3
38534: NEG
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: LD_INT 2
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: LD_INT 4
38557: NEG
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 0
38565: PUSH
38566: LD_INT 4
38568: NEG
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: PUSH
38577: LD_INT 3
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 1
38587: NEG
38588: PUSH
38589: LD_INT 5
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: LD_INT 5
38602: NEG
38603: PUSH
38604: EMPTY
38605: LIST
38606: LIST
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: LD_INT 4
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: LD_INT 6
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 6
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: PUSH
38645: LD_INT 5
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
38667: LD_ADDR_VAR 0 30
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: LD_INT 1
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 3
38685: PUSH
38686: LD_INT 0
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 3
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 3
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 4
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 4
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 4
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 5
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 5
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 5
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 6
38778: PUSH
38779: LD_INT 0
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 6
38788: PUSH
38789: LD_INT 1
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
38810: LD_ADDR_VAR 0 31
38814: PUSH
38815: LD_INT 3
38817: PUSH
38818: LD_INT 2
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 3
38827: PUSH
38828: LD_INT 3
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: LD_INT 3
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 4
38847: PUSH
38848: LD_INT 3
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 4
38857: PUSH
38858: LD_INT 4
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 3
38867: PUSH
38868: LD_INT 4
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 5
38877: PUSH
38878: LD_INT 4
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 5
38887: PUSH
38888: LD_INT 5
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 4
38897: PUSH
38898: LD_INT 5
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 6
38907: PUSH
38908: LD_INT 5
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 6
38917: PUSH
38918: LD_INT 6
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 5
38927: PUSH
38928: LD_INT 6
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38949: LD_ADDR_VAR 0 32
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: LD_INT 3
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 0
38966: PUSH
38967: LD_INT 3
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 2
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 4
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: LD_INT 4
39000: PUSH
39001: EMPTY
39002: LIST
39003: LIST
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: LD_INT 3
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: LD_INT 5
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: LD_INT 5
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: NEG
39039: PUSH
39040: LD_INT 4
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: LD_INT 6
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 6
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: LD_INT 5
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39092: LD_ADDR_VAR 0 33
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 3
39110: NEG
39111: PUSH
39112: LD_INT 0
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 3
39121: NEG
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 3
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 4
39144: NEG
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 4
39155: NEG
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 4
39167: NEG
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 5
39178: NEG
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 5
39189: NEG
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 5
39201: NEG
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 6
39212: NEG
39213: PUSH
39214: LD_INT 0
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 6
39223: NEG
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
39247: LD_ADDR_VAR 0 34
39251: PUSH
39252: LD_INT 2
39254: NEG
39255: PUSH
39256: LD_INT 3
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 3
39266: NEG
39267: PUSH
39268: LD_INT 2
39270: NEG
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 3
39278: NEG
39279: PUSH
39280: LD_INT 3
39282: NEG
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 3
39290: NEG
39291: PUSH
39292: LD_INT 4
39294: NEG
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: PUSH
39300: LD_INT 4
39302: NEG
39303: PUSH
39304: LD_INT 3
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 4
39314: NEG
39315: PUSH
39316: LD_INT 4
39318: NEG
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 4
39326: NEG
39327: PUSH
39328: LD_INT 5
39330: NEG
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 5
39338: NEG
39339: PUSH
39340: LD_INT 4
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 5
39350: NEG
39351: PUSH
39352: LD_INT 5
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 5
39362: NEG
39363: PUSH
39364: LD_INT 6
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 6
39374: NEG
39375: PUSH
39376: LD_INT 5
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 6
39386: NEG
39387: PUSH
39388: LD_INT 6
39390: NEG
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
39410: LD_ADDR_VAR 0 41
39414: PUSH
39415: LD_INT 0
39417: PUSH
39418: LD_INT 2
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 1
39428: NEG
39429: PUSH
39430: LD_INT 3
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: LD_INT 2
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
39454: LD_ADDR_VAR 0 42
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: LD_INT 1
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 3
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
39495: LD_ADDR_VAR 0 43
39499: PUSH
39500: LD_INT 2
39502: PUSH
39503: LD_INT 2
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 3
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 3
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
39535: LD_ADDR_VAR 0 44
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: LD_INT 2
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: LD_INT 3
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39576: LD_ADDR_VAR 0 45
39580: PUSH
39581: LD_INT 2
39583: NEG
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 2
39594: NEG
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 3
39605: NEG
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
39620: LD_ADDR_VAR 0 46
39624: PUSH
39625: LD_INT 2
39627: NEG
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: PUSH
39637: LD_INT 2
39639: NEG
39640: PUSH
39641: LD_INT 3
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 3
39651: NEG
39652: PUSH
39653: LD_INT 2
39655: NEG
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: LIST
39665: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
39666: LD_ADDR_VAR 0 47
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: LD_INT 3
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 3
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39699: LD_ADDR_VAR 0 48
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
39730: LD_ADDR_VAR 0 49
39734: PUSH
39735: LD_INT 3
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 3
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
39759: LD_ADDR_VAR 0 50
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: LD_INT 3
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: LD_INT 3
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39788: LD_ADDR_VAR 0 51
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: LD_INT 2
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: LD_INT 1
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39819: LD_ADDR_VAR 0 52
39823: PUSH
39824: LD_INT 3
39826: NEG
39827: PUSH
39828: LD_INT 1
39830: NEG
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 3
39838: NEG
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39852: LD_ADDR_VAR 0 53
39856: PUSH
39857: LD_INT 1
39859: NEG
39860: PUSH
39861: LD_INT 3
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 3
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: LD_INT 2
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: LIST
39895: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39896: LD_ADDR_VAR 0 54
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 3
39914: PUSH
39915: LD_INT 0
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 3
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: LIST
39936: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39937: LD_ADDR_VAR 0 55
39941: PUSH
39942: LD_INT 3
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 3
39954: PUSH
39955: LD_INT 3
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: PUSH
39965: LD_INT 3
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: LIST
39976: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39977: LD_ADDR_VAR 0 56
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: LD_INT 3
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: LD_INT 3
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: LD_INT 2
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: LIST
40017: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40018: LD_ADDR_VAR 0 57
40022: PUSH
40023: LD_INT 2
40025: NEG
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 3
40036: NEG
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 3
40047: NEG
40048: PUSH
40049: LD_INT 1
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40062: LD_ADDR_VAR 0 58
40066: PUSH
40067: LD_INT 2
40069: NEG
40070: PUSH
40071: LD_INT 3
40073: NEG
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 3
40081: NEG
40082: PUSH
40083: LD_INT 2
40085: NEG
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 3
40093: NEG
40094: PUSH
40095: LD_INT 3
40097: NEG
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: LIST
40107: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40108: LD_ADDR_VAR 0 59
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: LD_INT 2
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 0
40127: PUSH
40128: LD_INT 2
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: LIST
40151: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40152: LD_ADDR_VAR 0 60
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: LD_INT 0
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: LD_INT 1
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40193: LD_ADDR_VAR 0 61
40197: PUSH
40198: LD_INT 2
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: LIST
40232: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40233: LD_ADDR_VAR 0 62
40237: PUSH
40238: LD_INT 1
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: LD_INT 2
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: LIST
40273: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40274: LD_ADDR_VAR 0 63
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 2
40292: NEG
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40318: LD_ADDR_VAR 0 64
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: LD_INT 2
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: ST_TO_ADDR
// end ; 2 :
40364: GO 43630
40366: LD_INT 2
40368: DOUBLE
40369: EQUAL
40370: IFTRUE 40374
40372: GO 43629
40374: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
40375: LD_ADDR_VAR 0 29
40379: PUSH
40380: LD_INT 4
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 4
40392: PUSH
40393: LD_INT 1
40395: NEG
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 5
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 5
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 4
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 3
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 3
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 3
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 5
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 3
40475: PUSH
40476: LD_INT 3
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 3
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 4
40495: PUSH
40496: LD_INT 3
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 4
40505: PUSH
40506: LD_INT 4
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 3
40515: PUSH
40516: LD_INT 4
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: LD_INT 3
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 4
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: LD_INT 4
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: LD_INT 4
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 3
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: LD_INT 4
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: LD_INT 5
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 5
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: LD_INT 4
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 3
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: LD_INT 5
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: LD_INT 3
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 3
40658: NEG
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 3
40669: NEG
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 2
40681: NEG
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 2
40692: NEG
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 3
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 4
40714: NEG
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 4
40725: NEG
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 4
40737: NEG
40738: PUSH
40739: LD_INT 2
40741: NEG
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: LD_INT 2
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 4
40760: NEG
40761: PUSH
40762: LD_INT 4
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 4
40772: NEG
40773: PUSH
40774: LD_INT 5
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 3
40784: NEG
40785: PUSH
40786: LD_INT 4
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 3
40796: NEG
40797: PUSH
40798: LD_INT 3
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 4
40808: NEG
40809: PUSH
40810: LD_INT 3
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 5
40820: NEG
40821: PUSH
40822: LD_INT 4
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 5
40832: NEG
40833: PUSH
40834: LD_INT 5
40836: NEG
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 3
40844: NEG
40845: PUSH
40846: LD_INT 5
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 5
40856: NEG
40857: PUSH
40858: LD_INT 3
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
40913: LD_ADDR_VAR 0 30
40917: PUSH
40918: LD_INT 4
40920: PUSH
40921: LD_INT 4
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 4
40930: PUSH
40931: LD_INT 3
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 5
40940: PUSH
40941: LD_INT 4
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 5
40950: PUSH
40951: LD_INT 5
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 4
40960: PUSH
40961: LD_INT 5
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 3
40970: PUSH
40971: LD_INT 4
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 3
40980: PUSH
40981: LD_INT 3
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 5
40990: PUSH
40991: LD_INT 3
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 3
41000: PUSH
41001: LD_INT 5
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: LD_INT 3
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 2
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: LD_INT 3
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: LD_INT 4
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: LD_INT 4
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: LD_INT 3
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 1
41071: NEG
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: LD_INT 4
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 4
41103: NEG
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: LD_INT 4
41114: NEG
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 3
41126: NEG
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 3
41137: NEG
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 4
41148: NEG
41149: PUSH
41150: LD_INT 1
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 5
41159: NEG
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 5
41170: NEG
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 5
41182: NEG
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 3
41194: NEG
41195: PUSH
41196: LD_INT 2
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 3
41205: NEG
41206: PUSH
41207: LD_INT 3
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 3
41217: NEG
41218: PUSH
41219: LD_INT 4
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: NEG
41230: PUSH
41231: LD_INT 3
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 3
41253: NEG
41254: PUSH
41255: LD_INT 2
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 4
41265: NEG
41266: PUSH
41267: LD_INT 3
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 4
41277: NEG
41278: PUSH
41279: LD_INT 4
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: LD_INT 4
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 4
41301: NEG
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 0
41313: PUSH
41314: LD_INT 4
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 5
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: LD_INT 4
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 3
41349: NEG
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: LD_INT 3
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: LD_INT 4
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: LD_INT 5
41384: NEG
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: LD_INT 3
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: NEG
41404: PUSH
41405: LD_INT 5
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
41460: LD_ADDR_VAR 0 31
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: LD_INT 4
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: LD_INT 3
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: LD_INT 4
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: LD_INT 5
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: LD_INT 5
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 1
41517: NEG
41518: PUSH
41519: LD_INT 4
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 1
41528: NEG
41529: PUSH
41530: LD_INT 3
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 2
41539: PUSH
41540: LD_INT 5
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: LD_INT 3
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 3
41560: NEG
41561: PUSH
41562: LD_INT 0
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 3
41571: NEG
41572: PUSH
41573: LD_INT 1
41575: NEG
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 3
41605: NEG
41606: PUSH
41607: LD_INT 1
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 4
41616: NEG
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 4
41627: NEG
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 4
41639: NEG
41640: PUSH
41641: LD_INT 2
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: NEG
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 4
41662: NEG
41663: PUSH
41664: LD_INT 4
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 4
41674: NEG
41675: PUSH
41676: LD_INT 5
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 3
41686: NEG
41687: PUSH
41688: LD_INT 4
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 3
41698: NEG
41699: PUSH
41700: LD_INT 3
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 4
41710: NEG
41711: PUSH
41712: LD_INT 3
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 5
41722: NEG
41723: PUSH
41724: LD_INT 4
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 5
41734: NEG
41735: PUSH
41736: LD_INT 5
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 3
41746: NEG
41747: PUSH
41748: LD_INT 5
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 5
41758: NEG
41759: PUSH
41760: LD_INT 3
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: LD_INT 3
41773: NEG
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 4
41784: NEG
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 3
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 3
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: LD_INT 4
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: LD_INT 2
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 2
41860: NEG
41861: PUSH
41862: LD_INT 4
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 4
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 4
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 5
41893: PUSH
41894: LD_INT 0
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 5
41903: PUSH
41904: LD_INT 1
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 4
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 3
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 3
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 3
41944: PUSH
41945: LD_INT 2
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 5
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42010: LD_ADDR_VAR 0 32
42014: PUSH
42015: LD_INT 4
42017: NEG
42018: PUSH
42019: LD_INT 0
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 4
42028: NEG
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 3
42040: NEG
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 3
42051: NEG
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 4
42062: NEG
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 5
42073: NEG
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 5
42084: NEG
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 5
42096: NEG
42097: PUSH
42098: LD_INT 2
42100: NEG
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 3
42108: NEG
42109: PUSH
42110: LD_INT 2
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 3
42119: NEG
42120: PUSH
42121: LD_INT 3
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 3
42131: NEG
42132: PUSH
42133: LD_INT 4
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: LD_INT 3
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: LD_INT 2
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 3
42167: NEG
42168: PUSH
42169: LD_INT 2
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 4
42179: NEG
42180: PUSH
42181: LD_INT 3
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 4
42191: NEG
42192: PUSH
42193: LD_INT 4
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: LD_INT 4
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 4
42215: NEG
42216: PUSH
42217: LD_INT 2
42219: NEG
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: LD_INT 4
42230: NEG
42231: PUSH
42232: EMPTY
42233: LIST
42234: LIST
42235: PUSH
42236: LD_INT 0
42238: PUSH
42239: LD_INT 5
42241: NEG
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: LD_INT 4
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 3
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: LD_INT 3
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: LD_INT 4
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 1
42294: NEG
42295: PUSH
42296: LD_INT 5
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: LD_INT 3
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: LD_INT 5
42321: NEG
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 3
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 3
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 4
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 4
42360: PUSH
42361: LD_INT 1
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 3
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 4
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 4
42422: PUSH
42423: LD_INT 4
42425: PUSH
42426: EMPTY
42427: LIST
42428: LIST
42429: PUSH
42430: LD_INT 4
42432: PUSH
42433: LD_INT 3
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 5
42442: PUSH
42443: LD_INT 4
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 5
42452: PUSH
42453: LD_INT 5
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 4
42462: PUSH
42463: LD_INT 5
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 3
42472: PUSH
42473: LD_INT 4
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 3
42482: PUSH
42483: LD_INT 3
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 5
42492: PUSH
42493: LD_INT 3
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 3
42502: PUSH
42503: LD_INT 5
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
42557: LD_ADDR_VAR 0 33
42561: PUSH
42562: LD_INT 4
42564: NEG
42565: PUSH
42566: LD_INT 4
42568: NEG
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 4
42576: NEG
42577: PUSH
42578: LD_INT 5
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 3
42588: NEG
42589: PUSH
42590: LD_INT 4
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 3
42600: NEG
42601: PUSH
42602: LD_INT 3
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 4
42612: NEG
42613: PUSH
42614: LD_INT 3
42616: NEG
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 5
42624: NEG
42625: PUSH
42626: LD_INT 4
42628: NEG
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 5
42636: NEG
42637: PUSH
42638: LD_INT 5
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 3
42648: NEG
42649: PUSH
42650: LD_INT 5
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 5
42660: NEG
42661: PUSH
42662: LD_INT 3
42664: NEG
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 3
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 4
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 3
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: LD_INT 2
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: LD_INT 2
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 3
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 4
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 2
42762: NEG
42763: PUSH
42764: LD_INT 4
42766: NEG
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 4
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 4
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 5
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 5
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 4
42815: PUSH
42816: LD_INT 1
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 3
42835: PUSH
42836: LD_INT 1
42838: NEG
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 3
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 5
42857: PUSH
42858: LD_INT 2
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 3
42867: PUSH
42868: LD_INT 3
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 3
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 4
42887: PUSH
42888: LD_INT 3
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 4
42897: PUSH
42898: LD_INT 4
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 3
42907: PUSH
42908: LD_INT 4
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: LD_INT 3
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 4
42937: PUSH
42938: LD_INT 2
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: LD_INT 4
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 4
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 3
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 4
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: LD_INT 5
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 5
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: LD_INT 4
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: NEG
43019: PUSH
43020: LD_INT 3
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: LD_INT 5
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: LD_INT 3
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43095: LD_ADDR_VAR 0 34
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 4
43105: NEG
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 5
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: LD_INT 4
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 3
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: LD_INT 3
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: NEG
43158: PUSH
43159: LD_INT 4
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: LD_INT 5
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: LD_INT 3
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: LD_INT 5
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 3
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 3
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 4
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 4
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 3
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 0
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 4
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 4
43297: PUSH
43298: LD_INT 4
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 4
43307: PUSH
43308: LD_INT 3
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 5
43317: PUSH
43318: LD_INT 4
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 5
43327: PUSH
43328: LD_INT 5
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 4
43337: PUSH
43338: LD_INT 5
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: PUSH
43348: LD_INT 4
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 3
43357: PUSH
43358: LD_INT 3
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 5
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: LD_INT 5
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 3
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 2
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: LD_INT 3
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 4
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 4
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: LD_INT 3
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: LD_INT 2
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: LD_INT 4
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 2
43469: NEG
43470: PUSH
43471: LD_INT 2
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 4
43480: NEG
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 4
43491: NEG
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 3
43503: NEG
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 3
43514: NEG
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 4
43525: NEG
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 5
43536: NEG
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 5
43547: NEG
43548: PUSH
43549: LD_INT 1
43551: NEG
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 5
43559: NEG
43560: PUSH
43561: LD_INT 2
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 3
43571: NEG
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: ST_TO_ADDR
// end ; end ;
43627: GO 43630
43629: POP
// case btype of b_depot , b_warehouse :
43630: LD_VAR 0 1
43634: PUSH
43635: LD_INT 0
43637: DOUBLE
43638: EQUAL
43639: IFTRUE 43649
43641: LD_INT 1
43643: DOUBLE
43644: EQUAL
43645: IFTRUE 43649
43647: GO 43850
43649: POP
// case nation of nation_american :
43650: LD_VAR 0 5
43654: PUSH
43655: LD_INT 1
43657: DOUBLE
43658: EQUAL
43659: IFTRUE 43663
43661: GO 43719
43663: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
43664: LD_ADDR_VAR 0 9
43668: PUSH
43669: LD_VAR 0 11
43673: PUSH
43674: LD_VAR 0 12
43678: PUSH
43679: LD_VAR 0 13
43683: PUSH
43684: LD_VAR 0 14
43688: PUSH
43689: LD_VAR 0 15
43693: PUSH
43694: LD_VAR 0 16
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: PUSH
43707: LD_VAR 0 4
43711: PUSH
43712: LD_INT 1
43714: PLUS
43715: ARRAY
43716: ST_TO_ADDR
43717: GO 43848
43719: LD_INT 2
43721: DOUBLE
43722: EQUAL
43723: IFTRUE 43727
43725: GO 43783
43727: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
43728: LD_ADDR_VAR 0 9
43732: PUSH
43733: LD_VAR 0 17
43737: PUSH
43738: LD_VAR 0 18
43742: PUSH
43743: LD_VAR 0 19
43747: PUSH
43748: LD_VAR 0 20
43752: PUSH
43753: LD_VAR 0 21
43757: PUSH
43758: LD_VAR 0 22
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: PUSH
43771: LD_VAR 0 4
43775: PUSH
43776: LD_INT 1
43778: PLUS
43779: ARRAY
43780: ST_TO_ADDR
43781: GO 43848
43783: LD_INT 3
43785: DOUBLE
43786: EQUAL
43787: IFTRUE 43791
43789: GO 43847
43791: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
43792: LD_ADDR_VAR 0 9
43796: PUSH
43797: LD_VAR 0 23
43801: PUSH
43802: LD_VAR 0 24
43806: PUSH
43807: LD_VAR 0 25
43811: PUSH
43812: LD_VAR 0 26
43816: PUSH
43817: LD_VAR 0 27
43821: PUSH
43822: LD_VAR 0 28
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: PUSH
43835: LD_VAR 0 4
43839: PUSH
43840: LD_INT 1
43842: PLUS
43843: ARRAY
43844: ST_TO_ADDR
43845: GO 43848
43847: POP
43848: GO 44403
43850: LD_INT 2
43852: DOUBLE
43853: EQUAL
43854: IFTRUE 43864
43856: LD_INT 3
43858: DOUBLE
43859: EQUAL
43860: IFTRUE 43864
43862: GO 43920
43864: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
43865: LD_ADDR_VAR 0 9
43869: PUSH
43870: LD_VAR 0 29
43874: PUSH
43875: LD_VAR 0 30
43879: PUSH
43880: LD_VAR 0 31
43884: PUSH
43885: LD_VAR 0 32
43889: PUSH
43890: LD_VAR 0 33
43894: PUSH
43895: LD_VAR 0 34
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: PUSH
43908: LD_VAR 0 4
43912: PUSH
43913: LD_INT 1
43915: PLUS
43916: ARRAY
43917: ST_TO_ADDR
43918: GO 44403
43920: LD_INT 16
43922: DOUBLE
43923: EQUAL
43924: IFTRUE 43982
43926: LD_INT 17
43928: DOUBLE
43929: EQUAL
43930: IFTRUE 43982
43932: LD_INT 18
43934: DOUBLE
43935: EQUAL
43936: IFTRUE 43982
43938: LD_INT 19
43940: DOUBLE
43941: EQUAL
43942: IFTRUE 43982
43944: LD_INT 22
43946: DOUBLE
43947: EQUAL
43948: IFTRUE 43982
43950: LD_INT 20
43952: DOUBLE
43953: EQUAL
43954: IFTRUE 43982
43956: LD_INT 21
43958: DOUBLE
43959: EQUAL
43960: IFTRUE 43982
43962: LD_INT 23
43964: DOUBLE
43965: EQUAL
43966: IFTRUE 43982
43968: LD_INT 24
43970: DOUBLE
43971: EQUAL
43972: IFTRUE 43982
43974: LD_INT 25
43976: DOUBLE
43977: EQUAL
43978: IFTRUE 43982
43980: GO 44038
43982: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43983: LD_ADDR_VAR 0 9
43987: PUSH
43988: LD_VAR 0 35
43992: PUSH
43993: LD_VAR 0 36
43997: PUSH
43998: LD_VAR 0 37
44002: PUSH
44003: LD_VAR 0 38
44007: PUSH
44008: LD_VAR 0 39
44012: PUSH
44013: LD_VAR 0 40
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: PUSH
44026: LD_VAR 0 4
44030: PUSH
44031: LD_INT 1
44033: PLUS
44034: ARRAY
44035: ST_TO_ADDR
44036: GO 44403
44038: LD_INT 6
44040: DOUBLE
44041: EQUAL
44042: IFTRUE 44094
44044: LD_INT 7
44046: DOUBLE
44047: EQUAL
44048: IFTRUE 44094
44050: LD_INT 8
44052: DOUBLE
44053: EQUAL
44054: IFTRUE 44094
44056: LD_INT 13
44058: DOUBLE
44059: EQUAL
44060: IFTRUE 44094
44062: LD_INT 12
44064: DOUBLE
44065: EQUAL
44066: IFTRUE 44094
44068: LD_INT 15
44070: DOUBLE
44071: EQUAL
44072: IFTRUE 44094
44074: LD_INT 11
44076: DOUBLE
44077: EQUAL
44078: IFTRUE 44094
44080: LD_INT 14
44082: DOUBLE
44083: EQUAL
44084: IFTRUE 44094
44086: LD_INT 10
44088: DOUBLE
44089: EQUAL
44090: IFTRUE 44094
44092: GO 44150
44094: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44095: LD_ADDR_VAR 0 9
44099: PUSH
44100: LD_VAR 0 41
44104: PUSH
44105: LD_VAR 0 42
44109: PUSH
44110: LD_VAR 0 43
44114: PUSH
44115: LD_VAR 0 44
44119: PUSH
44120: LD_VAR 0 45
44124: PUSH
44125: LD_VAR 0 46
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: PUSH
44138: LD_VAR 0 4
44142: PUSH
44143: LD_INT 1
44145: PLUS
44146: ARRAY
44147: ST_TO_ADDR
44148: GO 44403
44150: LD_INT 36
44152: DOUBLE
44153: EQUAL
44154: IFTRUE 44158
44156: GO 44214
44158: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44159: LD_ADDR_VAR 0 9
44163: PUSH
44164: LD_VAR 0 47
44168: PUSH
44169: LD_VAR 0 48
44173: PUSH
44174: LD_VAR 0 49
44178: PUSH
44179: LD_VAR 0 50
44183: PUSH
44184: LD_VAR 0 51
44188: PUSH
44189: LD_VAR 0 52
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: PUSH
44202: LD_VAR 0 4
44206: PUSH
44207: LD_INT 1
44209: PLUS
44210: ARRAY
44211: ST_TO_ADDR
44212: GO 44403
44214: LD_INT 4
44216: DOUBLE
44217: EQUAL
44218: IFTRUE 44240
44220: LD_INT 5
44222: DOUBLE
44223: EQUAL
44224: IFTRUE 44240
44226: LD_INT 34
44228: DOUBLE
44229: EQUAL
44230: IFTRUE 44240
44232: LD_INT 37
44234: DOUBLE
44235: EQUAL
44236: IFTRUE 44240
44238: GO 44296
44240: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44241: LD_ADDR_VAR 0 9
44245: PUSH
44246: LD_VAR 0 53
44250: PUSH
44251: LD_VAR 0 54
44255: PUSH
44256: LD_VAR 0 55
44260: PUSH
44261: LD_VAR 0 56
44265: PUSH
44266: LD_VAR 0 57
44270: PUSH
44271: LD_VAR 0 58
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: PUSH
44284: LD_VAR 0 4
44288: PUSH
44289: LD_INT 1
44291: PLUS
44292: ARRAY
44293: ST_TO_ADDR
44294: GO 44403
44296: LD_INT 31
44298: DOUBLE
44299: EQUAL
44300: IFTRUE 44346
44302: LD_INT 32
44304: DOUBLE
44305: EQUAL
44306: IFTRUE 44346
44308: LD_INT 33
44310: DOUBLE
44311: EQUAL
44312: IFTRUE 44346
44314: LD_INT 27
44316: DOUBLE
44317: EQUAL
44318: IFTRUE 44346
44320: LD_INT 26
44322: DOUBLE
44323: EQUAL
44324: IFTRUE 44346
44326: LD_INT 28
44328: DOUBLE
44329: EQUAL
44330: IFTRUE 44346
44332: LD_INT 29
44334: DOUBLE
44335: EQUAL
44336: IFTRUE 44346
44338: LD_INT 30
44340: DOUBLE
44341: EQUAL
44342: IFTRUE 44346
44344: GO 44402
44346: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
44347: LD_ADDR_VAR 0 9
44351: PUSH
44352: LD_VAR 0 59
44356: PUSH
44357: LD_VAR 0 60
44361: PUSH
44362: LD_VAR 0 61
44366: PUSH
44367: LD_VAR 0 62
44371: PUSH
44372: LD_VAR 0 63
44376: PUSH
44377: LD_VAR 0 64
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: PUSH
44390: LD_VAR 0 4
44394: PUSH
44395: LD_INT 1
44397: PLUS
44398: ARRAY
44399: ST_TO_ADDR
44400: GO 44403
44402: POP
// temp_list2 = [ ] ;
44403: LD_ADDR_VAR 0 10
44407: PUSH
44408: EMPTY
44409: ST_TO_ADDR
// for i in temp_list do
44410: LD_ADDR_VAR 0 8
44414: PUSH
44415: LD_VAR 0 9
44419: PUSH
44420: FOR_IN
44421: IFFALSE 44473
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
44423: LD_ADDR_VAR 0 10
44427: PUSH
44428: LD_VAR 0 10
44432: PUSH
44433: LD_VAR 0 8
44437: PUSH
44438: LD_INT 1
44440: ARRAY
44441: PUSH
44442: LD_VAR 0 2
44446: PLUS
44447: PUSH
44448: LD_VAR 0 8
44452: PUSH
44453: LD_INT 2
44455: ARRAY
44456: PUSH
44457: LD_VAR 0 3
44461: PLUS
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: EMPTY
44468: LIST
44469: ADD
44470: ST_TO_ADDR
44471: GO 44420
44473: POP
44474: POP
// result = temp_list2 ;
44475: LD_ADDR_VAR 0 7
44479: PUSH
44480: LD_VAR 0 10
44484: ST_TO_ADDR
// end ;
44485: LD_VAR 0 7
44489: RET
// export function EnemyInRange ( unit , dist ) ; begin
44490: LD_INT 0
44492: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
44493: LD_ADDR_VAR 0 3
44497: PUSH
44498: LD_VAR 0 1
44502: PPUSH
44503: CALL_OW 255
44507: PPUSH
44508: LD_VAR 0 1
44512: PPUSH
44513: CALL_OW 250
44517: PPUSH
44518: LD_VAR 0 1
44522: PPUSH
44523: CALL_OW 251
44527: PPUSH
44528: LD_VAR 0 2
44532: PPUSH
44533: CALL 17886 0 4
44537: PUSH
44538: LD_INT 4
44540: ARRAY
44541: ST_TO_ADDR
// end ;
44542: LD_VAR 0 3
44546: RET
// export function PlayerSeeMe ( unit ) ; begin
44547: LD_INT 0
44549: PPUSH
// result := See ( your_side , unit ) ;
44550: LD_ADDR_VAR 0 2
44554: PUSH
44555: LD_OWVAR 2
44559: PPUSH
44560: LD_VAR 0 1
44564: PPUSH
44565: CALL_OW 292
44569: ST_TO_ADDR
// end ;
44570: LD_VAR 0 2
44574: RET
// export function ReverseDir ( unit ) ; begin
44575: LD_INT 0
44577: PPUSH
// if not unit then
44578: LD_VAR 0 1
44582: NOT
44583: IFFALSE 44587
// exit ;
44585: GO 44610
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
44587: LD_ADDR_VAR 0 2
44591: PUSH
44592: LD_VAR 0 1
44596: PPUSH
44597: CALL_OW 254
44601: PUSH
44602: LD_INT 3
44604: PLUS
44605: PUSH
44606: LD_INT 6
44608: MOD
44609: ST_TO_ADDR
// end ;
44610: LD_VAR 0 2
44614: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
44615: LD_INT 0
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
44621: PPUSH
// if not hexes then
44622: LD_VAR 0 2
44626: NOT
44627: IFFALSE 44631
// exit ;
44629: GO 44779
// dist := 9999 ;
44631: LD_ADDR_VAR 0 5
44635: PUSH
44636: LD_INT 9999
44638: ST_TO_ADDR
// for i = 1 to hexes do
44639: LD_ADDR_VAR 0 4
44643: PUSH
44644: DOUBLE
44645: LD_INT 1
44647: DEC
44648: ST_TO_ADDR
44649: LD_VAR 0 2
44653: PUSH
44654: FOR_TO
44655: IFFALSE 44767
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
44657: LD_VAR 0 1
44661: PPUSH
44662: LD_VAR 0 2
44666: PUSH
44667: LD_VAR 0 4
44671: ARRAY
44672: PUSH
44673: LD_INT 1
44675: ARRAY
44676: PPUSH
44677: LD_VAR 0 2
44681: PUSH
44682: LD_VAR 0 4
44686: ARRAY
44687: PUSH
44688: LD_INT 2
44690: ARRAY
44691: PPUSH
44692: CALL_OW 297
44696: PUSH
44697: LD_VAR 0 5
44701: LESS
44702: IFFALSE 44765
// begin hex := hexes [ i ] ;
44704: LD_ADDR_VAR 0 7
44708: PUSH
44709: LD_VAR 0 2
44713: PUSH
44714: LD_VAR 0 4
44718: ARRAY
44719: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44720: LD_ADDR_VAR 0 5
44724: PUSH
44725: LD_VAR 0 1
44729: PPUSH
44730: LD_VAR 0 2
44734: PUSH
44735: LD_VAR 0 4
44739: ARRAY
44740: PUSH
44741: LD_INT 1
44743: ARRAY
44744: PPUSH
44745: LD_VAR 0 2
44749: PUSH
44750: LD_VAR 0 4
44754: ARRAY
44755: PUSH
44756: LD_INT 2
44758: ARRAY
44759: PPUSH
44760: CALL_OW 297
44764: ST_TO_ADDR
// end ; end ;
44765: GO 44654
44767: POP
44768: POP
// result := hex ;
44769: LD_ADDR_VAR 0 3
44773: PUSH
44774: LD_VAR 0 7
44778: ST_TO_ADDR
// end ;
44779: LD_VAR 0 3
44783: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
44784: LD_INT 0
44786: PPUSH
44787: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
44788: LD_VAR 0 1
44792: NOT
44793: PUSH
44794: LD_VAR 0 1
44798: PUSH
44799: LD_INT 21
44801: PUSH
44802: LD_INT 2
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 23
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PPUSH
44823: CALL_OW 69
44827: IN
44828: NOT
44829: OR
44830: IFFALSE 44834
// exit ;
44832: GO 44881
// for i = 1 to 3 do
44834: LD_ADDR_VAR 0 3
44838: PUSH
44839: DOUBLE
44840: LD_INT 1
44842: DEC
44843: ST_TO_ADDR
44844: LD_INT 3
44846: PUSH
44847: FOR_TO
44848: IFFALSE 44879
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
44850: LD_VAR 0 1
44854: PPUSH
44855: CALL_OW 250
44859: PPUSH
44860: LD_VAR 0 1
44864: PPUSH
44865: CALL_OW 251
44869: PPUSH
44870: LD_INT 1
44872: PPUSH
44873: CALL_OW 453
44877: GO 44847
44879: POP
44880: POP
// end ;
44881: LD_VAR 0 2
44885: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44886: LD_INT 0
44888: PPUSH
44889: PPUSH
44890: PPUSH
44891: PPUSH
44892: PPUSH
44893: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
44894: LD_VAR 0 1
44898: NOT
44899: PUSH
44900: LD_VAR 0 2
44904: NOT
44905: OR
44906: PUSH
44907: LD_VAR 0 1
44911: PPUSH
44912: CALL_OW 314
44916: OR
44917: IFFALSE 44921
// exit ;
44919: GO 45362
// x := GetX ( enemy_unit ) ;
44921: LD_ADDR_VAR 0 7
44925: PUSH
44926: LD_VAR 0 2
44930: PPUSH
44931: CALL_OW 250
44935: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44936: LD_ADDR_VAR 0 8
44940: PUSH
44941: LD_VAR 0 2
44945: PPUSH
44946: CALL_OW 251
44950: ST_TO_ADDR
// if not x or not y then
44951: LD_VAR 0 7
44955: NOT
44956: PUSH
44957: LD_VAR 0 8
44961: NOT
44962: OR
44963: IFFALSE 44967
// exit ;
44965: GO 45362
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44967: LD_ADDR_VAR 0 6
44971: PUSH
44972: LD_VAR 0 7
44976: PPUSH
44977: LD_INT 0
44979: PPUSH
44980: LD_INT 4
44982: PPUSH
44983: CALL_OW 272
44987: PUSH
44988: LD_VAR 0 8
44992: PPUSH
44993: LD_INT 0
44995: PPUSH
44996: LD_INT 4
44998: PPUSH
44999: CALL_OW 273
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_VAR 0 7
45012: PPUSH
45013: LD_INT 1
45015: PPUSH
45016: LD_INT 4
45018: PPUSH
45019: CALL_OW 272
45023: PUSH
45024: LD_VAR 0 8
45028: PPUSH
45029: LD_INT 1
45031: PPUSH
45032: LD_INT 4
45034: PPUSH
45035: CALL_OW 273
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_VAR 0 7
45048: PPUSH
45049: LD_INT 2
45051: PPUSH
45052: LD_INT 4
45054: PPUSH
45055: CALL_OW 272
45059: PUSH
45060: LD_VAR 0 8
45064: PPUSH
45065: LD_INT 2
45067: PPUSH
45068: LD_INT 4
45070: PPUSH
45071: CALL_OW 273
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_VAR 0 7
45084: PPUSH
45085: LD_INT 3
45087: PPUSH
45088: LD_INT 4
45090: PPUSH
45091: CALL_OW 272
45095: PUSH
45096: LD_VAR 0 8
45100: PPUSH
45101: LD_INT 3
45103: PPUSH
45104: LD_INT 4
45106: PPUSH
45107: CALL_OW 273
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_VAR 0 7
45120: PPUSH
45121: LD_INT 4
45123: PPUSH
45124: LD_INT 4
45126: PPUSH
45127: CALL_OW 272
45131: PUSH
45132: LD_VAR 0 8
45136: PPUSH
45137: LD_INT 4
45139: PPUSH
45140: LD_INT 4
45142: PPUSH
45143: CALL_OW 273
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_VAR 0 7
45156: PPUSH
45157: LD_INT 5
45159: PPUSH
45160: LD_INT 4
45162: PPUSH
45163: CALL_OW 272
45167: PUSH
45168: LD_VAR 0 8
45172: PPUSH
45173: LD_INT 5
45175: PPUSH
45176: LD_INT 4
45178: PPUSH
45179: CALL_OW 273
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: ST_TO_ADDR
// for i = tmp downto 1 do
45196: LD_ADDR_VAR 0 4
45200: PUSH
45201: DOUBLE
45202: LD_VAR 0 6
45206: INC
45207: ST_TO_ADDR
45208: LD_INT 1
45210: PUSH
45211: FOR_DOWNTO
45212: IFFALSE 45313
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45214: LD_VAR 0 6
45218: PUSH
45219: LD_VAR 0 4
45223: ARRAY
45224: PUSH
45225: LD_INT 1
45227: ARRAY
45228: PPUSH
45229: LD_VAR 0 6
45233: PUSH
45234: LD_VAR 0 4
45238: ARRAY
45239: PUSH
45240: LD_INT 2
45242: ARRAY
45243: PPUSH
45244: CALL_OW 488
45248: NOT
45249: PUSH
45250: LD_VAR 0 6
45254: PUSH
45255: LD_VAR 0 4
45259: ARRAY
45260: PUSH
45261: LD_INT 1
45263: ARRAY
45264: PPUSH
45265: LD_VAR 0 6
45269: PUSH
45270: LD_VAR 0 4
45274: ARRAY
45275: PUSH
45276: LD_INT 2
45278: ARRAY
45279: PPUSH
45280: CALL_OW 428
45284: PUSH
45285: LD_INT 0
45287: NONEQUAL
45288: OR
45289: IFFALSE 45311
// tmp := Delete ( tmp , i ) ;
45291: LD_ADDR_VAR 0 6
45295: PUSH
45296: LD_VAR 0 6
45300: PPUSH
45301: LD_VAR 0 4
45305: PPUSH
45306: CALL_OW 3
45310: ST_TO_ADDR
45311: GO 45211
45313: POP
45314: POP
// j := GetClosestHex ( unit , tmp ) ;
45315: LD_ADDR_VAR 0 5
45319: PUSH
45320: LD_VAR 0 1
45324: PPUSH
45325: LD_VAR 0 6
45329: PPUSH
45330: CALL 44615 0 2
45334: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
45335: LD_VAR 0 1
45339: PPUSH
45340: LD_VAR 0 5
45344: PUSH
45345: LD_INT 1
45347: ARRAY
45348: PPUSH
45349: LD_VAR 0 5
45353: PUSH
45354: LD_INT 2
45356: ARRAY
45357: PPUSH
45358: CALL_OW 111
// end ;
45362: LD_VAR 0 3
45366: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45367: LD_INT 0
45369: PPUSH
45370: PPUSH
45371: PPUSH
// uc_side = 0 ;
45372: LD_ADDR_OWVAR 20
45376: PUSH
45377: LD_INT 0
45379: ST_TO_ADDR
// uc_nation = 0 ;
45380: LD_ADDR_OWVAR 21
45384: PUSH
45385: LD_INT 0
45387: ST_TO_ADDR
// InitHc_All ( ) ;
45388: CALL_OW 584
// InitVc ;
45392: CALL_OW 20
// if mastodonts then
45396: LD_VAR 0 6
45400: IFFALSE 45467
// for i = 1 to mastodonts do
45402: LD_ADDR_VAR 0 11
45406: PUSH
45407: DOUBLE
45408: LD_INT 1
45410: DEC
45411: ST_TO_ADDR
45412: LD_VAR 0 6
45416: PUSH
45417: FOR_TO
45418: IFFALSE 45465
// begin vc_chassis := 31 ;
45420: LD_ADDR_OWVAR 37
45424: PUSH
45425: LD_INT 31
45427: ST_TO_ADDR
// vc_control := control_rider ;
45428: LD_ADDR_OWVAR 38
45432: PUSH
45433: LD_INT 4
45435: ST_TO_ADDR
// animal := CreateVehicle ;
45436: LD_ADDR_VAR 0 12
45440: PUSH
45441: CALL_OW 45
45445: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45446: LD_VAR 0 12
45450: PPUSH
45451: LD_VAR 0 8
45455: PPUSH
45456: LD_INT 0
45458: PPUSH
45459: CALL 47602 0 3
// end ;
45463: GO 45417
45465: POP
45466: POP
// if horses then
45467: LD_VAR 0 5
45471: IFFALSE 45538
// for i = 1 to horses do
45473: LD_ADDR_VAR 0 11
45477: PUSH
45478: DOUBLE
45479: LD_INT 1
45481: DEC
45482: ST_TO_ADDR
45483: LD_VAR 0 5
45487: PUSH
45488: FOR_TO
45489: IFFALSE 45536
// begin hc_class := 21 ;
45491: LD_ADDR_OWVAR 28
45495: PUSH
45496: LD_INT 21
45498: ST_TO_ADDR
// hc_gallery :=  ;
45499: LD_ADDR_OWVAR 33
45503: PUSH
45504: LD_STRING 
45506: ST_TO_ADDR
// animal := CreateHuman ;
45507: LD_ADDR_VAR 0 12
45511: PUSH
45512: CALL_OW 44
45516: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45517: LD_VAR 0 12
45521: PPUSH
45522: LD_VAR 0 8
45526: PPUSH
45527: LD_INT 0
45529: PPUSH
45530: CALL 47602 0 3
// end ;
45534: GO 45488
45536: POP
45537: POP
// if birds then
45538: LD_VAR 0 1
45542: IFFALSE 45609
// for i = 1 to birds do
45544: LD_ADDR_VAR 0 11
45548: PUSH
45549: DOUBLE
45550: LD_INT 1
45552: DEC
45553: ST_TO_ADDR
45554: LD_VAR 0 1
45558: PUSH
45559: FOR_TO
45560: IFFALSE 45607
// begin hc_class = 18 ;
45562: LD_ADDR_OWVAR 28
45566: PUSH
45567: LD_INT 18
45569: ST_TO_ADDR
// hc_gallery =  ;
45570: LD_ADDR_OWVAR 33
45574: PUSH
45575: LD_STRING 
45577: ST_TO_ADDR
// animal := CreateHuman ;
45578: LD_ADDR_VAR 0 12
45582: PUSH
45583: CALL_OW 44
45587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45588: LD_VAR 0 12
45592: PPUSH
45593: LD_VAR 0 8
45597: PPUSH
45598: LD_INT 0
45600: PPUSH
45601: CALL 47602 0 3
// end ;
45605: GO 45559
45607: POP
45608: POP
// if tigers then
45609: LD_VAR 0 2
45613: IFFALSE 45697
// for i = 1 to tigers do
45615: LD_ADDR_VAR 0 11
45619: PUSH
45620: DOUBLE
45621: LD_INT 1
45623: DEC
45624: ST_TO_ADDR
45625: LD_VAR 0 2
45629: PUSH
45630: FOR_TO
45631: IFFALSE 45695
// begin hc_class = class_tiger ;
45633: LD_ADDR_OWVAR 28
45637: PUSH
45638: LD_INT 14
45640: ST_TO_ADDR
// hc_gallery =  ;
45641: LD_ADDR_OWVAR 33
45645: PUSH
45646: LD_STRING 
45648: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45649: LD_ADDR_OWVAR 35
45653: PUSH
45654: LD_INT 7
45656: NEG
45657: PPUSH
45658: LD_INT 7
45660: PPUSH
45661: CALL_OW 12
45665: ST_TO_ADDR
// animal := CreateHuman ;
45666: LD_ADDR_VAR 0 12
45670: PUSH
45671: CALL_OW 44
45675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45676: LD_VAR 0 12
45680: PPUSH
45681: LD_VAR 0 8
45685: PPUSH
45686: LD_INT 0
45688: PPUSH
45689: CALL 47602 0 3
// end ;
45693: GO 45630
45695: POP
45696: POP
// if apemans then
45697: LD_VAR 0 3
45701: IFFALSE 45824
// for i = 1 to apemans do
45703: LD_ADDR_VAR 0 11
45707: PUSH
45708: DOUBLE
45709: LD_INT 1
45711: DEC
45712: ST_TO_ADDR
45713: LD_VAR 0 3
45717: PUSH
45718: FOR_TO
45719: IFFALSE 45822
// begin hc_class = class_apeman ;
45721: LD_ADDR_OWVAR 28
45725: PUSH
45726: LD_INT 12
45728: ST_TO_ADDR
// hc_gallery =  ;
45729: LD_ADDR_OWVAR 33
45733: PUSH
45734: LD_STRING 
45736: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45737: LD_ADDR_OWVAR 35
45741: PUSH
45742: LD_INT 2
45744: NEG
45745: PPUSH
45746: LD_INT 2
45748: PPUSH
45749: CALL_OW 12
45753: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45754: LD_ADDR_OWVAR 31
45758: PUSH
45759: LD_INT 1
45761: PPUSH
45762: LD_INT 3
45764: PPUSH
45765: CALL_OW 12
45769: PUSH
45770: LD_INT 1
45772: PPUSH
45773: LD_INT 3
45775: PPUSH
45776: CALL_OW 12
45780: PUSH
45781: LD_INT 0
45783: PUSH
45784: LD_INT 0
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: ST_TO_ADDR
// animal := CreateHuman ;
45793: LD_ADDR_VAR 0 12
45797: PUSH
45798: CALL_OW 44
45802: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45803: LD_VAR 0 12
45807: PPUSH
45808: LD_VAR 0 8
45812: PPUSH
45813: LD_INT 0
45815: PPUSH
45816: CALL 47602 0 3
// end ;
45820: GO 45718
45822: POP
45823: POP
// if enchidnas then
45824: LD_VAR 0 4
45828: IFFALSE 45895
// for i = 1 to enchidnas do
45830: LD_ADDR_VAR 0 11
45834: PUSH
45835: DOUBLE
45836: LD_INT 1
45838: DEC
45839: ST_TO_ADDR
45840: LD_VAR 0 4
45844: PUSH
45845: FOR_TO
45846: IFFALSE 45893
// begin hc_class = 13 ;
45848: LD_ADDR_OWVAR 28
45852: PUSH
45853: LD_INT 13
45855: ST_TO_ADDR
// hc_gallery =  ;
45856: LD_ADDR_OWVAR 33
45860: PUSH
45861: LD_STRING 
45863: ST_TO_ADDR
// animal := CreateHuman ;
45864: LD_ADDR_VAR 0 12
45868: PUSH
45869: CALL_OW 44
45873: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45874: LD_VAR 0 12
45878: PPUSH
45879: LD_VAR 0 8
45883: PPUSH
45884: LD_INT 0
45886: PPUSH
45887: CALL 47602 0 3
// end ;
45891: GO 45845
45893: POP
45894: POP
// if fishes then
45895: LD_VAR 0 7
45899: IFFALSE 45966
// for i = 1 to fishes do
45901: LD_ADDR_VAR 0 11
45905: PUSH
45906: DOUBLE
45907: LD_INT 1
45909: DEC
45910: ST_TO_ADDR
45911: LD_VAR 0 7
45915: PUSH
45916: FOR_TO
45917: IFFALSE 45964
// begin hc_class = 20 ;
45919: LD_ADDR_OWVAR 28
45923: PUSH
45924: LD_INT 20
45926: ST_TO_ADDR
// hc_gallery =  ;
45927: LD_ADDR_OWVAR 33
45931: PUSH
45932: LD_STRING 
45934: ST_TO_ADDR
// animal := CreateHuman ;
45935: LD_ADDR_VAR 0 12
45939: PUSH
45940: CALL_OW 44
45944: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45945: LD_VAR 0 12
45949: PPUSH
45950: LD_VAR 0 9
45954: PPUSH
45955: LD_INT 0
45957: PPUSH
45958: CALL 47602 0 3
// end ;
45962: GO 45916
45964: POP
45965: POP
// end ;
45966: LD_VAR 0 10
45970: RET
// export function WantHeal ( sci , unit ) ; begin
45971: LD_INT 0
45973: PPUSH
// if GetTaskList ( sci ) > 0 then
45974: LD_VAR 0 1
45978: PPUSH
45979: CALL_OW 437
45983: PUSH
45984: LD_INT 0
45986: GREATER
45987: IFFALSE 46057
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45989: LD_VAR 0 1
45993: PPUSH
45994: CALL_OW 437
45998: PUSH
45999: LD_INT 1
46001: ARRAY
46002: PUSH
46003: LD_INT 1
46005: ARRAY
46006: PUSH
46007: LD_STRING l
46009: EQUAL
46010: PUSH
46011: LD_VAR 0 1
46015: PPUSH
46016: CALL_OW 437
46020: PUSH
46021: LD_INT 1
46023: ARRAY
46024: PUSH
46025: LD_INT 4
46027: ARRAY
46028: PUSH
46029: LD_VAR 0 2
46033: EQUAL
46034: AND
46035: IFFALSE 46047
// result := true else
46037: LD_ADDR_VAR 0 3
46041: PUSH
46042: LD_INT 1
46044: ST_TO_ADDR
46045: GO 46055
// result := false ;
46047: LD_ADDR_VAR 0 3
46051: PUSH
46052: LD_INT 0
46054: ST_TO_ADDR
// end else
46055: GO 46065
// result := false ;
46057: LD_ADDR_VAR 0 3
46061: PUSH
46062: LD_INT 0
46064: ST_TO_ADDR
// end ;
46065: LD_VAR 0 3
46069: RET
// export function HealTarget ( sci ) ; begin
46070: LD_INT 0
46072: PPUSH
// if not sci then
46073: LD_VAR 0 1
46077: NOT
46078: IFFALSE 46082
// exit ;
46080: GO 46147
// result := 0 ;
46082: LD_ADDR_VAR 0 2
46086: PUSH
46087: LD_INT 0
46089: ST_TO_ADDR
// if GetTaskList ( sci ) then
46090: LD_VAR 0 1
46094: PPUSH
46095: CALL_OW 437
46099: IFFALSE 46147
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46101: LD_VAR 0 1
46105: PPUSH
46106: CALL_OW 437
46110: PUSH
46111: LD_INT 1
46113: ARRAY
46114: PUSH
46115: LD_INT 1
46117: ARRAY
46118: PUSH
46119: LD_STRING l
46121: EQUAL
46122: IFFALSE 46147
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46124: LD_ADDR_VAR 0 2
46128: PUSH
46129: LD_VAR 0 1
46133: PPUSH
46134: CALL_OW 437
46138: PUSH
46139: LD_INT 1
46141: ARRAY
46142: PUSH
46143: LD_INT 4
46145: ARRAY
46146: ST_TO_ADDR
// end ;
46147: LD_VAR 0 2
46151: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46152: LD_INT 0
46154: PPUSH
46155: PPUSH
46156: PPUSH
46157: PPUSH
// if not base_units then
46158: LD_VAR 0 1
46162: NOT
46163: IFFALSE 46167
// exit ;
46165: GO 46254
// result := false ;
46167: LD_ADDR_VAR 0 2
46171: PUSH
46172: LD_INT 0
46174: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46175: LD_ADDR_VAR 0 5
46179: PUSH
46180: LD_VAR 0 1
46184: PPUSH
46185: LD_INT 21
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PPUSH
46195: CALL_OW 72
46199: ST_TO_ADDR
// if not tmp then
46200: LD_VAR 0 5
46204: NOT
46205: IFFALSE 46209
// exit ;
46207: GO 46254
// for i in tmp do
46209: LD_ADDR_VAR 0 3
46213: PUSH
46214: LD_VAR 0 5
46218: PUSH
46219: FOR_IN
46220: IFFALSE 46252
// begin result := EnemyInRange ( i , 22 ) ;
46222: LD_ADDR_VAR 0 2
46226: PUSH
46227: LD_VAR 0 3
46231: PPUSH
46232: LD_INT 22
46234: PPUSH
46235: CALL 44490 0 2
46239: ST_TO_ADDR
// if result then
46240: LD_VAR 0 2
46244: IFFALSE 46250
// exit ;
46246: POP
46247: POP
46248: GO 46254
// end ;
46250: GO 46219
46252: POP
46253: POP
// end ;
46254: LD_VAR 0 2
46258: RET
// export function FilterByTag ( units , tag ) ; begin
46259: LD_INT 0
46261: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46262: LD_ADDR_VAR 0 3
46266: PUSH
46267: LD_VAR 0 1
46271: PPUSH
46272: LD_INT 120
46274: PUSH
46275: LD_VAR 0 2
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PPUSH
46284: CALL_OW 72
46288: ST_TO_ADDR
// end ;
46289: LD_VAR 0 3
46293: RET
// export function IsDriver ( un ) ; begin
46294: LD_INT 0
46296: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46297: LD_ADDR_VAR 0 2
46301: PUSH
46302: LD_VAR 0 1
46306: PUSH
46307: LD_INT 55
46309: PUSH
46310: EMPTY
46311: LIST
46312: PPUSH
46313: CALL_OW 69
46317: IN
46318: ST_TO_ADDR
// end ;
46319: LD_VAR 0 2
46323: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46324: LD_INT 0
46326: PPUSH
46327: PPUSH
// list := [ ] ;
46328: LD_ADDR_VAR 0 5
46332: PUSH
46333: EMPTY
46334: ST_TO_ADDR
// case d of 0 :
46335: LD_VAR 0 3
46339: PUSH
46340: LD_INT 0
46342: DOUBLE
46343: EQUAL
46344: IFTRUE 46348
46346: GO 46481
46348: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46349: LD_ADDR_VAR 0 5
46353: PUSH
46354: LD_VAR 0 1
46358: PUSH
46359: LD_INT 4
46361: MINUS
46362: PUSH
46363: LD_VAR 0 2
46367: PUSH
46368: LD_INT 4
46370: MINUS
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: LIST
46379: PUSH
46380: LD_VAR 0 1
46384: PUSH
46385: LD_INT 3
46387: MINUS
46388: PUSH
46389: LD_VAR 0 2
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: LIST
46401: PUSH
46402: LD_VAR 0 1
46406: PUSH
46407: LD_INT 4
46409: PLUS
46410: PUSH
46411: LD_VAR 0 2
46415: PUSH
46416: LD_INT 4
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: PUSH
46424: LD_VAR 0 1
46428: PUSH
46429: LD_INT 3
46431: PLUS
46432: PUSH
46433: LD_VAR 0 2
46437: PUSH
46438: LD_INT 3
46440: PLUS
46441: PUSH
46442: LD_INT 5
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: LIST
46449: PUSH
46450: LD_VAR 0 1
46454: PUSH
46455: LD_VAR 0 2
46459: PUSH
46460: LD_INT 4
46462: PLUS
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: LIST
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: ST_TO_ADDR
// end ; 1 :
46479: GO 47179
46481: LD_INT 1
46483: DOUBLE
46484: EQUAL
46485: IFTRUE 46489
46487: GO 46622
46489: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46490: LD_ADDR_VAR 0 5
46494: PUSH
46495: LD_VAR 0 1
46499: PUSH
46500: LD_VAR 0 2
46504: PUSH
46505: LD_INT 4
46507: MINUS
46508: PUSH
46509: LD_INT 3
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: PUSH
46517: LD_VAR 0 1
46521: PUSH
46522: LD_INT 3
46524: MINUS
46525: PUSH
46526: LD_VAR 0 2
46530: PUSH
46531: LD_INT 3
46533: MINUS
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: PUSH
46543: LD_VAR 0 1
46547: PUSH
46548: LD_INT 4
46550: MINUS
46551: PUSH
46552: LD_VAR 0 2
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: LIST
46564: PUSH
46565: LD_VAR 0 1
46569: PUSH
46570: LD_VAR 0 2
46574: PUSH
46575: LD_INT 3
46577: PLUS
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: LIST
46586: PUSH
46587: LD_VAR 0 1
46591: PUSH
46592: LD_INT 4
46594: PLUS
46595: PUSH
46596: LD_VAR 0 2
46600: PUSH
46601: LD_INT 4
46603: PLUS
46604: PUSH
46605: LD_INT 5
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: LIST
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: ST_TO_ADDR
// end ; 2 :
46620: GO 47179
46622: LD_INT 2
46624: DOUBLE
46625: EQUAL
46626: IFTRUE 46630
46628: GO 46759
46630: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46631: LD_ADDR_VAR 0 5
46635: PUSH
46636: LD_VAR 0 1
46640: PUSH
46641: LD_VAR 0 2
46645: PUSH
46646: LD_INT 3
46648: MINUS
46649: PUSH
46650: LD_INT 3
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: LIST
46657: PUSH
46658: LD_VAR 0 1
46662: PUSH
46663: LD_INT 4
46665: PLUS
46666: PUSH
46667: LD_VAR 0 2
46671: PUSH
46672: LD_INT 4
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: PUSH
46680: LD_VAR 0 1
46684: PUSH
46685: LD_VAR 0 2
46689: PUSH
46690: LD_INT 4
46692: PLUS
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: PUSH
46702: LD_VAR 0 1
46706: PUSH
46707: LD_INT 3
46709: MINUS
46710: PUSH
46711: LD_VAR 0 2
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: LIST
46723: PUSH
46724: LD_VAR 0 1
46728: PUSH
46729: LD_INT 4
46731: MINUS
46732: PUSH
46733: LD_VAR 0 2
46737: PUSH
46738: LD_INT 4
46740: MINUS
46741: PUSH
46742: LD_INT 2
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: ST_TO_ADDR
// end ; 3 :
46757: GO 47179
46759: LD_INT 3
46761: DOUBLE
46762: EQUAL
46763: IFTRUE 46767
46765: GO 46900
46767: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46768: LD_ADDR_VAR 0 5
46772: PUSH
46773: LD_VAR 0 1
46777: PUSH
46778: LD_INT 3
46780: PLUS
46781: PUSH
46782: LD_VAR 0 2
46786: PUSH
46787: LD_INT 4
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: LIST
46794: PUSH
46795: LD_VAR 0 1
46799: PUSH
46800: LD_INT 4
46802: PLUS
46803: PUSH
46804: LD_VAR 0 2
46808: PUSH
46809: LD_INT 4
46811: PLUS
46812: PUSH
46813: LD_INT 5
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: PUSH
46821: LD_VAR 0 1
46825: PUSH
46826: LD_INT 4
46828: MINUS
46829: PUSH
46830: LD_VAR 0 2
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: PUSH
46843: LD_VAR 0 1
46847: PUSH
46848: LD_VAR 0 2
46852: PUSH
46853: LD_INT 4
46855: MINUS
46856: PUSH
46857: LD_INT 3
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: LIST
46864: PUSH
46865: LD_VAR 0 1
46869: PUSH
46870: LD_INT 3
46872: MINUS
46873: PUSH
46874: LD_VAR 0 2
46878: PUSH
46879: LD_INT 3
46881: MINUS
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: ST_TO_ADDR
// end ; 4 :
46898: GO 47179
46900: LD_INT 4
46902: DOUBLE
46903: EQUAL
46904: IFTRUE 46908
46906: GO 47041
46908: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46909: LD_ADDR_VAR 0 5
46913: PUSH
46914: LD_VAR 0 1
46918: PUSH
46919: LD_VAR 0 2
46923: PUSH
46924: LD_INT 4
46926: PLUS
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: LIST
46935: PUSH
46936: LD_VAR 0 1
46940: PUSH
46941: LD_INT 3
46943: PLUS
46944: PUSH
46945: LD_VAR 0 2
46949: PUSH
46950: LD_INT 3
46952: PLUS
46953: PUSH
46954: LD_INT 5
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: PUSH
46962: LD_VAR 0 1
46966: PUSH
46967: LD_INT 4
46969: PLUS
46970: PUSH
46971: LD_VAR 0 2
46975: PUSH
46976: LD_INT 4
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: LIST
46983: PUSH
46984: LD_VAR 0 1
46988: PUSH
46989: LD_VAR 0 2
46993: PUSH
46994: LD_INT 3
46996: MINUS
46997: PUSH
46998: LD_INT 3
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: LIST
47005: PUSH
47006: LD_VAR 0 1
47010: PUSH
47011: LD_INT 4
47013: MINUS
47014: PUSH
47015: LD_VAR 0 2
47019: PUSH
47020: LD_INT 4
47022: MINUS
47023: PUSH
47024: LD_INT 2
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: LIST
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: ST_TO_ADDR
// end ; 5 :
47039: GO 47179
47041: LD_INT 5
47043: DOUBLE
47044: EQUAL
47045: IFTRUE 47049
47047: GO 47178
47049: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47050: LD_ADDR_VAR 0 5
47054: PUSH
47055: LD_VAR 0 1
47059: PUSH
47060: LD_INT 4
47062: MINUS
47063: PUSH
47064: LD_VAR 0 2
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: LIST
47076: PUSH
47077: LD_VAR 0 1
47081: PUSH
47082: LD_VAR 0 2
47086: PUSH
47087: LD_INT 4
47089: MINUS
47090: PUSH
47091: LD_INT 3
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: LIST
47098: PUSH
47099: LD_VAR 0 1
47103: PUSH
47104: LD_INT 4
47106: PLUS
47107: PUSH
47108: LD_VAR 0 2
47112: PUSH
47113: LD_INT 4
47115: PLUS
47116: PUSH
47117: LD_INT 5
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: LIST
47124: PUSH
47125: LD_VAR 0 1
47129: PUSH
47130: LD_INT 3
47132: PLUS
47133: PUSH
47134: LD_VAR 0 2
47138: PUSH
47139: LD_INT 4
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: PUSH
47147: LD_VAR 0 1
47151: PUSH
47152: LD_VAR 0 2
47156: PUSH
47157: LD_INT 3
47159: PLUS
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: LIST
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: ST_TO_ADDR
// end ; end ;
47176: GO 47179
47178: POP
// result := list ;
47179: LD_ADDR_VAR 0 4
47183: PUSH
47184: LD_VAR 0 5
47188: ST_TO_ADDR
// end ;
47189: LD_VAR 0 4
47193: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47194: LD_INT 0
47196: PPUSH
47197: PPUSH
47198: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47199: LD_VAR 0 1
47203: NOT
47204: PUSH
47205: LD_VAR 0 2
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: LD_INT 3
47218: PUSH
47219: LD_INT 4
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: IN
47228: NOT
47229: OR
47230: IFFALSE 47234
// exit ;
47232: GO 47326
// tmp := [ ] ;
47234: LD_ADDR_VAR 0 5
47238: PUSH
47239: EMPTY
47240: ST_TO_ADDR
// for i in units do
47241: LD_ADDR_VAR 0 4
47245: PUSH
47246: LD_VAR 0 1
47250: PUSH
47251: FOR_IN
47252: IFFALSE 47295
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
47254: LD_ADDR_VAR 0 5
47258: PUSH
47259: LD_VAR 0 5
47263: PPUSH
47264: LD_VAR 0 5
47268: PUSH
47269: LD_INT 1
47271: PLUS
47272: PPUSH
47273: LD_VAR 0 4
47277: PPUSH
47278: LD_VAR 0 2
47282: PPUSH
47283: CALL_OW 259
47287: PPUSH
47288: CALL_OW 2
47292: ST_TO_ADDR
47293: GO 47251
47295: POP
47296: POP
// if not tmp then
47297: LD_VAR 0 5
47301: NOT
47302: IFFALSE 47306
// exit ;
47304: GO 47326
// result := SortListByListDesc ( units , tmp ) ;
47306: LD_ADDR_VAR 0 3
47310: PUSH
47311: LD_VAR 0 1
47315: PPUSH
47316: LD_VAR 0 5
47320: PPUSH
47321: CALL_OW 77
47325: ST_TO_ADDR
// end ;
47326: LD_VAR 0 3
47330: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47331: LD_INT 0
47333: PPUSH
47334: PPUSH
47335: PPUSH
// result := false ;
47336: LD_ADDR_VAR 0 3
47340: PUSH
47341: LD_INT 0
47343: ST_TO_ADDR
// x := GetX ( building ) ;
47344: LD_ADDR_VAR 0 4
47348: PUSH
47349: LD_VAR 0 2
47353: PPUSH
47354: CALL_OW 250
47358: ST_TO_ADDR
// y := GetY ( building ) ;
47359: LD_ADDR_VAR 0 5
47363: PUSH
47364: LD_VAR 0 2
47368: PPUSH
47369: CALL_OW 251
47373: ST_TO_ADDR
// if not building or not x or not y then
47374: LD_VAR 0 2
47378: NOT
47379: PUSH
47380: LD_VAR 0 4
47384: NOT
47385: OR
47386: PUSH
47387: LD_VAR 0 5
47391: NOT
47392: OR
47393: IFFALSE 47397
// exit ;
47395: GO 47489
// if GetTaskList ( unit ) then
47397: LD_VAR 0 1
47401: PPUSH
47402: CALL_OW 437
47406: IFFALSE 47489
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47408: LD_STRING e
47410: PUSH
47411: LD_VAR 0 1
47415: PPUSH
47416: CALL_OW 437
47420: PUSH
47421: LD_INT 1
47423: ARRAY
47424: PUSH
47425: LD_INT 1
47427: ARRAY
47428: EQUAL
47429: PUSH
47430: LD_VAR 0 4
47434: PUSH
47435: LD_VAR 0 1
47439: PPUSH
47440: CALL_OW 437
47444: PUSH
47445: LD_INT 1
47447: ARRAY
47448: PUSH
47449: LD_INT 2
47451: ARRAY
47452: EQUAL
47453: AND
47454: PUSH
47455: LD_VAR 0 5
47459: PUSH
47460: LD_VAR 0 1
47464: PPUSH
47465: CALL_OW 437
47469: PUSH
47470: LD_INT 1
47472: ARRAY
47473: PUSH
47474: LD_INT 3
47476: ARRAY
47477: EQUAL
47478: AND
47479: IFFALSE 47489
// result := true end ;
47481: LD_ADDR_VAR 0 3
47485: PUSH
47486: LD_INT 1
47488: ST_TO_ADDR
// end ;
47489: LD_VAR 0 3
47493: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47494: LD_INT 0
47496: PPUSH
// result := false ;
47497: LD_ADDR_VAR 0 4
47501: PUSH
47502: LD_INT 0
47504: ST_TO_ADDR
// if GetTaskList ( unit ) then
47505: LD_VAR 0 1
47509: PPUSH
47510: CALL_OW 437
47514: IFFALSE 47597
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47516: LD_STRING M
47518: PUSH
47519: LD_VAR 0 1
47523: PPUSH
47524: CALL_OW 437
47528: PUSH
47529: LD_INT 1
47531: ARRAY
47532: PUSH
47533: LD_INT 1
47535: ARRAY
47536: EQUAL
47537: PUSH
47538: LD_VAR 0 2
47542: PUSH
47543: LD_VAR 0 1
47547: PPUSH
47548: CALL_OW 437
47552: PUSH
47553: LD_INT 1
47555: ARRAY
47556: PUSH
47557: LD_INT 2
47559: ARRAY
47560: EQUAL
47561: AND
47562: PUSH
47563: LD_VAR 0 3
47567: PUSH
47568: LD_VAR 0 1
47572: PPUSH
47573: CALL_OW 437
47577: PUSH
47578: LD_INT 1
47580: ARRAY
47581: PUSH
47582: LD_INT 3
47584: ARRAY
47585: EQUAL
47586: AND
47587: IFFALSE 47597
// result := true ;
47589: LD_ADDR_VAR 0 4
47593: PUSH
47594: LD_INT 1
47596: ST_TO_ADDR
// end ; end ;
47597: LD_VAR 0 4
47601: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47602: LD_INT 0
47604: PPUSH
47605: PPUSH
47606: PPUSH
47607: PPUSH
// if not unit or not area then
47608: LD_VAR 0 1
47612: NOT
47613: PUSH
47614: LD_VAR 0 2
47618: NOT
47619: OR
47620: IFFALSE 47624
// exit ;
47622: GO 47788
// tmp := AreaToList ( area , i ) ;
47624: LD_ADDR_VAR 0 6
47628: PUSH
47629: LD_VAR 0 2
47633: PPUSH
47634: LD_VAR 0 5
47638: PPUSH
47639: CALL_OW 517
47643: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47644: LD_ADDR_VAR 0 5
47648: PUSH
47649: DOUBLE
47650: LD_INT 1
47652: DEC
47653: ST_TO_ADDR
47654: LD_VAR 0 6
47658: PUSH
47659: LD_INT 1
47661: ARRAY
47662: PUSH
47663: FOR_TO
47664: IFFALSE 47786
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47666: LD_ADDR_VAR 0 7
47670: PUSH
47671: LD_VAR 0 6
47675: PUSH
47676: LD_INT 1
47678: ARRAY
47679: PUSH
47680: LD_VAR 0 5
47684: ARRAY
47685: PUSH
47686: LD_VAR 0 6
47690: PUSH
47691: LD_INT 2
47693: ARRAY
47694: PUSH
47695: LD_VAR 0 5
47699: ARRAY
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
47705: LD_VAR 0 7
47709: PUSH
47710: LD_INT 1
47712: ARRAY
47713: PPUSH
47714: LD_VAR 0 7
47718: PUSH
47719: LD_INT 2
47721: ARRAY
47722: PPUSH
47723: CALL_OW 428
47727: PUSH
47728: LD_INT 0
47730: EQUAL
47731: IFFALSE 47784
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47733: LD_VAR 0 1
47737: PPUSH
47738: LD_VAR 0 7
47742: PUSH
47743: LD_INT 1
47745: ARRAY
47746: PPUSH
47747: LD_VAR 0 7
47751: PUSH
47752: LD_INT 2
47754: ARRAY
47755: PPUSH
47756: LD_VAR 0 3
47760: PPUSH
47761: CALL_OW 48
// result := IsPlaced ( unit ) ;
47765: LD_ADDR_VAR 0 4
47769: PUSH
47770: LD_VAR 0 1
47774: PPUSH
47775: CALL_OW 305
47779: ST_TO_ADDR
// exit ;
47780: POP
47781: POP
47782: GO 47788
// end ; end ;
47784: GO 47663
47786: POP
47787: POP
// end ;
47788: LD_VAR 0 4
47792: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47793: LD_INT 0
47795: PPUSH
47796: PPUSH
47797: PPUSH
// if not side or side > 8 then
47798: LD_VAR 0 1
47802: NOT
47803: PUSH
47804: LD_VAR 0 1
47808: PUSH
47809: LD_INT 8
47811: GREATER
47812: OR
47813: IFFALSE 47817
// exit ;
47815: GO 48004
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47817: LD_ADDR_VAR 0 4
47821: PUSH
47822: LD_INT 22
47824: PUSH
47825: LD_VAR 0 1
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 21
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PPUSH
47848: CALL_OW 69
47852: ST_TO_ADDR
// if not tmp then
47853: LD_VAR 0 4
47857: NOT
47858: IFFALSE 47862
// exit ;
47860: GO 48004
// enable_addtolog := true ;
47862: LD_ADDR_OWVAR 81
47866: PUSH
47867: LD_INT 1
47869: ST_TO_ADDR
// AddToLog ( [ ) ;
47870: LD_STRING [
47872: PPUSH
47873: CALL_OW 561
// for i in tmp do
47877: LD_ADDR_VAR 0 3
47881: PUSH
47882: LD_VAR 0 4
47886: PUSH
47887: FOR_IN
47888: IFFALSE 47995
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47890: LD_STRING [
47892: PUSH
47893: LD_VAR 0 3
47897: PPUSH
47898: CALL_OW 266
47902: STR
47903: PUSH
47904: LD_STRING , 
47906: STR
47907: PUSH
47908: LD_VAR 0 3
47912: PPUSH
47913: CALL_OW 250
47917: STR
47918: PUSH
47919: LD_STRING , 
47921: STR
47922: PUSH
47923: LD_VAR 0 3
47927: PPUSH
47928: CALL_OW 251
47932: STR
47933: PUSH
47934: LD_STRING , 
47936: STR
47937: PUSH
47938: LD_VAR 0 3
47942: PPUSH
47943: CALL_OW 254
47947: STR
47948: PUSH
47949: LD_STRING , 
47951: STR
47952: PUSH
47953: LD_VAR 0 3
47957: PPUSH
47958: LD_INT 1
47960: PPUSH
47961: CALL_OW 268
47965: STR
47966: PUSH
47967: LD_STRING , 
47969: STR
47970: PUSH
47971: LD_VAR 0 3
47975: PPUSH
47976: LD_INT 2
47978: PPUSH
47979: CALL_OW 268
47983: STR
47984: PUSH
47985: LD_STRING ],
47987: STR
47988: PPUSH
47989: CALL_OW 561
// end ;
47993: GO 47887
47995: POP
47996: POP
// AddToLog ( ]; ) ;
47997: LD_STRING ];
47999: PPUSH
48000: CALL_OW 561
// end ;
48004: LD_VAR 0 2
48008: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48009: LD_INT 0
48011: PPUSH
48012: PPUSH
48013: PPUSH
48014: PPUSH
48015: PPUSH
// if not area or not rate or not max then
48016: LD_VAR 0 1
48020: NOT
48021: PUSH
48022: LD_VAR 0 2
48026: NOT
48027: OR
48028: PUSH
48029: LD_VAR 0 4
48033: NOT
48034: OR
48035: IFFALSE 48039
// exit ;
48037: GO 48228
// while 1 do
48039: LD_INT 1
48041: IFFALSE 48228
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48043: LD_ADDR_VAR 0 9
48047: PUSH
48048: LD_VAR 0 1
48052: PPUSH
48053: LD_INT 1
48055: PPUSH
48056: CALL_OW 287
48060: PUSH
48061: LD_INT 10
48063: MUL
48064: ST_TO_ADDR
// r := rate / 10 ;
48065: LD_ADDR_VAR 0 7
48069: PUSH
48070: LD_VAR 0 2
48074: PUSH
48075: LD_INT 10
48077: DIVREAL
48078: ST_TO_ADDR
// time := 1 1$00 ;
48079: LD_ADDR_VAR 0 8
48083: PUSH
48084: LD_INT 2100
48086: ST_TO_ADDR
// if amount < min then
48087: LD_VAR 0 9
48091: PUSH
48092: LD_VAR 0 3
48096: LESS
48097: IFFALSE 48115
// r := r * 2 else
48099: LD_ADDR_VAR 0 7
48103: PUSH
48104: LD_VAR 0 7
48108: PUSH
48109: LD_INT 2
48111: MUL
48112: ST_TO_ADDR
48113: GO 48141
// if amount > max then
48115: LD_VAR 0 9
48119: PUSH
48120: LD_VAR 0 4
48124: GREATER
48125: IFFALSE 48141
// r := r / 2 ;
48127: LD_ADDR_VAR 0 7
48131: PUSH
48132: LD_VAR 0 7
48136: PUSH
48137: LD_INT 2
48139: DIVREAL
48140: ST_TO_ADDR
// time := time / r ;
48141: LD_ADDR_VAR 0 8
48145: PUSH
48146: LD_VAR 0 8
48150: PUSH
48151: LD_VAR 0 7
48155: DIVREAL
48156: ST_TO_ADDR
// if time < 0 then
48157: LD_VAR 0 8
48161: PUSH
48162: LD_INT 0
48164: LESS
48165: IFFALSE 48182
// time := time * - 1 ;
48167: LD_ADDR_VAR 0 8
48171: PUSH
48172: LD_VAR 0 8
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: MUL
48181: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48182: LD_VAR 0 8
48186: PUSH
48187: LD_INT 35
48189: PPUSH
48190: LD_INT 875
48192: PPUSH
48193: CALL_OW 12
48197: PLUS
48198: PPUSH
48199: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48203: LD_INT 1
48205: PPUSH
48206: LD_INT 5
48208: PPUSH
48209: CALL_OW 12
48213: PPUSH
48214: LD_VAR 0 1
48218: PPUSH
48219: LD_INT 1
48221: PPUSH
48222: CALL_OW 55
// end ;
48226: GO 48039
// end ;
48228: LD_VAR 0 5
48232: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48233: LD_INT 0
48235: PPUSH
48236: PPUSH
48237: PPUSH
48238: PPUSH
48239: PPUSH
48240: PPUSH
48241: PPUSH
48242: PPUSH
// if not turrets or not factories then
48243: LD_VAR 0 1
48247: NOT
48248: PUSH
48249: LD_VAR 0 2
48253: NOT
48254: OR
48255: IFFALSE 48259
// exit ;
48257: GO 48566
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48259: LD_ADDR_VAR 0 10
48263: PUSH
48264: LD_INT 5
48266: PUSH
48267: LD_INT 6
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: LD_INT 4
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 3
48286: PUSH
48287: LD_INT 5
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 24
48301: PUSH
48302: LD_INT 25
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 23
48311: PUSH
48312: LD_INT 27
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 42
48325: PUSH
48326: LD_INT 43
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 44
48335: PUSH
48336: LD_INT 46
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 45
48345: PUSH
48346: LD_INT 47
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: LIST
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: LIST
48362: ST_TO_ADDR
// result := [ ] ;
48363: LD_ADDR_VAR 0 3
48367: PUSH
48368: EMPTY
48369: ST_TO_ADDR
// for i in turrets do
48370: LD_ADDR_VAR 0 4
48374: PUSH
48375: LD_VAR 0 1
48379: PUSH
48380: FOR_IN
48381: IFFALSE 48564
// begin nat := GetNation ( i ) ;
48383: LD_ADDR_VAR 0 7
48387: PUSH
48388: LD_VAR 0 4
48392: PPUSH
48393: CALL_OW 248
48397: ST_TO_ADDR
// weapon := 0 ;
48398: LD_ADDR_VAR 0 8
48402: PUSH
48403: LD_INT 0
48405: ST_TO_ADDR
// if not nat then
48406: LD_VAR 0 7
48410: NOT
48411: IFFALSE 48415
// continue ;
48413: GO 48380
// for j in list [ nat ] do
48415: LD_ADDR_VAR 0 5
48419: PUSH
48420: LD_VAR 0 10
48424: PUSH
48425: LD_VAR 0 7
48429: ARRAY
48430: PUSH
48431: FOR_IN
48432: IFFALSE 48473
// if GetBWeapon ( i ) = j [ 1 ] then
48434: LD_VAR 0 4
48438: PPUSH
48439: CALL_OW 269
48443: PUSH
48444: LD_VAR 0 5
48448: PUSH
48449: LD_INT 1
48451: ARRAY
48452: EQUAL
48453: IFFALSE 48471
// begin weapon := j [ 2 ] ;
48455: LD_ADDR_VAR 0 8
48459: PUSH
48460: LD_VAR 0 5
48464: PUSH
48465: LD_INT 2
48467: ARRAY
48468: ST_TO_ADDR
// break ;
48469: GO 48473
// end ;
48471: GO 48431
48473: POP
48474: POP
// if not weapon then
48475: LD_VAR 0 8
48479: NOT
48480: IFFALSE 48484
// continue ;
48482: GO 48380
// for k in factories do
48484: LD_ADDR_VAR 0 6
48488: PUSH
48489: LD_VAR 0 2
48493: PUSH
48494: FOR_IN
48495: IFFALSE 48560
// begin weapons := AvailableWeaponList ( k ) ;
48497: LD_ADDR_VAR 0 9
48501: PUSH
48502: LD_VAR 0 6
48506: PPUSH
48507: CALL_OW 478
48511: ST_TO_ADDR
// if not weapons then
48512: LD_VAR 0 9
48516: NOT
48517: IFFALSE 48521
// continue ;
48519: GO 48494
// if weapon in weapons then
48521: LD_VAR 0 8
48525: PUSH
48526: LD_VAR 0 9
48530: IN
48531: IFFALSE 48558
// begin result := [ i , weapon ] ;
48533: LD_ADDR_VAR 0 3
48537: PUSH
48538: LD_VAR 0 4
48542: PUSH
48543: LD_VAR 0 8
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: ST_TO_ADDR
// exit ;
48552: POP
48553: POP
48554: POP
48555: POP
48556: GO 48566
// end ; end ;
48558: GO 48494
48560: POP
48561: POP
// end ;
48562: GO 48380
48564: POP
48565: POP
// end ;
48566: LD_VAR 0 3
48570: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48571: LD_INT 0
48573: PPUSH
// if not side or side > 8 then
48574: LD_VAR 0 3
48578: NOT
48579: PUSH
48580: LD_VAR 0 3
48584: PUSH
48585: LD_INT 8
48587: GREATER
48588: OR
48589: IFFALSE 48593
// exit ;
48591: GO 48652
// if not range then
48593: LD_VAR 0 4
48597: NOT
48598: IFFALSE 48609
// range := - 12 ;
48600: LD_ADDR_VAR 0 4
48604: PUSH
48605: LD_INT 12
48607: NEG
48608: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48609: LD_VAR 0 1
48613: PPUSH
48614: LD_VAR 0 2
48618: PPUSH
48619: LD_VAR 0 3
48623: PPUSH
48624: LD_VAR 0 4
48628: PPUSH
48629: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48633: LD_VAR 0 1
48637: PPUSH
48638: LD_VAR 0 2
48642: PPUSH
48643: LD_VAR 0 3
48647: PPUSH
48648: CALL_OW 331
// end ;
48652: LD_VAR 0 5
48656: RET
// export function Video ( mode ) ; begin
48657: LD_INT 0
48659: PPUSH
// ingame_video = mode ;
48660: LD_ADDR_OWVAR 52
48664: PUSH
48665: LD_VAR 0 1
48669: ST_TO_ADDR
// interface_hidden = mode ;
48670: LD_ADDR_OWVAR 54
48674: PUSH
48675: LD_VAR 0 1
48679: ST_TO_ADDR
// end ;
48680: LD_VAR 0 2
48684: RET
// export function Join ( array , element ) ; begin
48685: LD_INT 0
48687: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48688: LD_ADDR_VAR 0 3
48692: PUSH
48693: LD_VAR 0 1
48697: PPUSH
48698: LD_VAR 0 1
48702: PUSH
48703: LD_INT 1
48705: PLUS
48706: PPUSH
48707: LD_VAR 0 2
48711: PPUSH
48712: CALL_OW 1
48716: ST_TO_ADDR
// end ;
48717: LD_VAR 0 3
48721: RET
// export function JoinUnion ( array , element ) ; begin
48722: LD_INT 0
48724: PPUSH
// result := array union element ;
48725: LD_ADDR_VAR 0 3
48729: PUSH
48730: LD_VAR 0 1
48734: PUSH
48735: LD_VAR 0 2
48739: UNION
48740: ST_TO_ADDR
// end ;
48741: LD_VAR 0 3
48745: RET
// export function GetBehemoths ( side ) ; begin
48746: LD_INT 0
48748: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
48749: LD_ADDR_VAR 0 2
48753: PUSH
48754: LD_INT 22
48756: PUSH
48757: LD_VAR 0 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 31
48768: PUSH
48769: LD_INT 25
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PPUSH
48780: CALL_OW 69
48784: ST_TO_ADDR
// end ;
48785: LD_VAR 0 2
48789: RET
// export function Shuffle ( array ) ; var i , index ; begin
48790: LD_INT 0
48792: PPUSH
48793: PPUSH
48794: PPUSH
// result := [ ] ;
48795: LD_ADDR_VAR 0 2
48799: PUSH
48800: EMPTY
48801: ST_TO_ADDR
// if not array then
48802: LD_VAR 0 1
48806: NOT
48807: IFFALSE 48811
// exit ;
48809: GO 48910
// Randomize ;
48811: CALL_OW 10
// for i = array downto 1 do
48815: LD_ADDR_VAR 0 3
48819: PUSH
48820: DOUBLE
48821: LD_VAR 0 1
48825: INC
48826: ST_TO_ADDR
48827: LD_INT 1
48829: PUSH
48830: FOR_DOWNTO
48831: IFFALSE 48908
// begin index := rand ( 1 , array ) ;
48833: LD_ADDR_VAR 0 4
48837: PUSH
48838: LD_INT 1
48840: PPUSH
48841: LD_VAR 0 1
48845: PPUSH
48846: CALL_OW 12
48850: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48851: LD_ADDR_VAR 0 2
48855: PUSH
48856: LD_VAR 0 2
48860: PPUSH
48861: LD_VAR 0 2
48865: PUSH
48866: LD_INT 1
48868: PLUS
48869: PPUSH
48870: LD_VAR 0 1
48874: PUSH
48875: LD_VAR 0 4
48879: ARRAY
48880: PPUSH
48881: CALL_OW 2
48885: ST_TO_ADDR
// array := Delete ( array , index ) ;
48886: LD_ADDR_VAR 0 1
48890: PUSH
48891: LD_VAR 0 1
48895: PPUSH
48896: LD_VAR 0 4
48900: PPUSH
48901: CALL_OW 3
48905: ST_TO_ADDR
// end ;
48906: GO 48830
48908: POP
48909: POP
// end ;
48910: LD_VAR 0 2
48914: RET
// export function GetBaseMaterials ( base ) ; begin
48915: LD_INT 0
48917: PPUSH
// result := [ 0 , 0 , 0 ] ;
48918: LD_ADDR_VAR 0 2
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: LIST
48936: ST_TO_ADDR
// if not base then
48937: LD_VAR 0 1
48941: NOT
48942: IFFALSE 48946
// exit ;
48944: GO 48995
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48946: LD_ADDR_VAR 0 2
48950: PUSH
48951: LD_VAR 0 1
48955: PPUSH
48956: LD_INT 1
48958: PPUSH
48959: CALL_OW 275
48963: PUSH
48964: LD_VAR 0 1
48968: PPUSH
48969: LD_INT 2
48971: PPUSH
48972: CALL_OW 275
48976: PUSH
48977: LD_VAR 0 1
48981: PPUSH
48982: LD_INT 3
48984: PPUSH
48985: CALL_OW 275
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: LIST
48994: ST_TO_ADDR
// end ;
48995: LD_VAR 0 2
48999: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49000: LD_INT 0
49002: PPUSH
49003: PPUSH
// result := array ;
49004: LD_ADDR_VAR 0 3
49008: PUSH
49009: LD_VAR 0 1
49013: ST_TO_ADDR
// if size > 0 then
49014: LD_VAR 0 2
49018: PUSH
49019: LD_INT 0
49021: GREATER
49022: IFFALSE 49068
// for i := array downto size do
49024: LD_ADDR_VAR 0 4
49028: PUSH
49029: DOUBLE
49030: LD_VAR 0 1
49034: INC
49035: ST_TO_ADDR
49036: LD_VAR 0 2
49040: PUSH
49041: FOR_DOWNTO
49042: IFFALSE 49066
// result := Delete ( result , result ) ;
49044: LD_ADDR_VAR 0 3
49048: PUSH
49049: LD_VAR 0 3
49053: PPUSH
49054: LD_VAR 0 3
49058: PPUSH
49059: CALL_OW 3
49063: ST_TO_ADDR
49064: GO 49041
49066: POP
49067: POP
// end ;
49068: LD_VAR 0 3
49072: RET
// export function ComExit ( unit ) ; var tmp ; begin
49073: LD_INT 0
49075: PPUSH
49076: PPUSH
// if not IsInUnit ( unit ) then
49077: LD_VAR 0 1
49081: PPUSH
49082: CALL_OW 310
49086: NOT
49087: IFFALSE 49091
// exit ;
49089: GO 49151
// tmp := IsInUnit ( unit ) ;
49091: LD_ADDR_VAR 0 3
49095: PUSH
49096: LD_VAR 0 1
49100: PPUSH
49101: CALL_OW 310
49105: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49106: LD_VAR 0 3
49110: PPUSH
49111: CALL_OW 247
49115: PUSH
49116: LD_INT 2
49118: EQUAL
49119: IFFALSE 49132
// ComExitVehicle ( unit ) else
49121: LD_VAR 0 1
49125: PPUSH
49126: CALL_OW 121
49130: GO 49141
// ComExitBuilding ( unit ) ;
49132: LD_VAR 0 1
49136: PPUSH
49137: CALL_OW 122
// result := tmp ;
49141: LD_ADDR_VAR 0 2
49145: PUSH
49146: LD_VAR 0 3
49150: ST_TO_ADDR
// end ;
49151: LD_VAR 0 2
49155: RET
// export function ComExitAll ( units ) ; var i ; begin
49156: LD_INT 0
49158: PPUSH
49159: PPUSH
// if not units then
49160: LD_VAR 0 1
49164: NOT
49165: IFFALSE 49169
// exit ;
49167: GO 49195
// for i in units do
49169: LD_ADDR_VAR 0 3
49173: PUSH
49174: LD_VAR 0 1
49178: PUSH
49179: FOR_IN
49180: IFFALSE 49193
// ComExit ( i ) ;
49182: LD_VAR 0 3
49186: PPUSH
49187: CALL 49073 0 1
49191: GO 49179
49193: POP
49194: POP
// end ;
49195: LD_VAR 0 2
49199: RET
// export function ResetHc ; begin
49200: LD_INT 0
49202: PPUSH
// InitHc ;
49203: CALL_OW 19
// hc_importance := 0 ;
49207: LD_ADDR_OWVAR 32
49211: PUSH
49212: LD_INT 0
49214: ST_TO_ADDR
// end ;
49215: LD_VAR 0 1
49219: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49220: LD_INT 0
49222: PPUSH
49223: PPUSH
49224: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49225: LD_ADDR_VAR 0 6
49229: PUSH
49230: LD_VAR 0 1
49234: PUSH
49235: LD_VAR 0 3
49239: PLUS
49240: PUSH
49241: LD_INT 2
49243: DIV
49244: ST_TO_ADDR
// if _x < 0 then
49245: LD_VAR 0 6
49249: PUSH
49250: LD_INT 0
49252: LESS
49253: IFFALSE 49270
// _x := _x * - 1 ;
49255: LD_ADDR_VAR 0 6
49259: PUSH
49260: LD_VAR 0 6
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: MUL
49269: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49270: LD_ADDR_VAR 0 7
49274: PUSH
49275: LD_VAR 0 2
49279: PUSH
49280: LD_VAR 0 4
49284: PLUS
49285: PUSH
49286: LD_INT 2
49288: DIV
49289: ST_TO_ADDR
// if _y < 0 then
49290: LD_VAR 0 7
49294: PUSH
49295: LD_INT 0
49297: LESS
49298: IFFALSE 49315
// _y := _y * - 1 ;
49300: LD_ADDR_VAR 0 7
49304: PUSH
49305: LD_VAR 0 7
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: MUL
49314: ST_TO_ADDR
// result := [ _x , _y ] ;
49315: LD_ADDR_VAR 0 5
49319: PUSH
49320: LD_VAR 0 6
49324: PUSH
49325: LD_VAR 0 7
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: ST_TO_ADDR
// end ;
49334: LD_VAR 0 5
49338: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49339: LD_INT 0
49341: PPUSH
49342: PPUSH
49343: PPUSH
49344: PPUSH
// task := GetTaskList ( unit ) ;
49345: LD_ADDR_VAR 0 7
49349: PUSH
49350: LD_VAR 0 1
49354: PPUSH
49355: CALL_OW 437
49359: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49360: LD_VAR 0 7
49364: NOT
49365: PUSH
49366: LD_VAR 0 1
49370: PPUSH
49371: LD_VAR 0 2
49375: PPUSH
49376: CALL_OW 308
49380: NOT
49381: AND
49382: IFFALSE 49386
// exit ;
49384: GO 49504
// if IsInArea ( unit , area ) then
49386: LD_VAR 0 1
49390: PPUSH
49391: LD_VAR 0 2
49395: PPUSH
49396: CALL_OW 308
49400: IFFALSE 49418
// begin ComMoveToArea ( unit , goAway ) ;
49402: LD_VAR 0 1
49406: PPUSH
49407: LD_VAR 0 3
49411: PPUSH
49412: CALL_OW 113
// exit ;
49416: GO 49504
// end ; if task [ 1 ] [ 1 ] <> M then
49418: LD_VAR 0 7
49422: PUSH
49423: LD_INT 1
49425: ARRAY
49426: PUSH
49427: LD_INT 1
49429: ARRAY
49430: PUSH
49431: LD_STRING M
49433: NONEQUAL
49434: IFFALSE 49438
// exit ;
49436: GO 49504
// x := task [ 1 ] [ 2 ] ;
49438: LD_ADDR_VAR 0 5
49442: PUSH
49443: LD_VAR 0 7
49447: PUSH
49448: LD_INT 1
49450: ARRAY
49451: PUSH
49452: LD_INT 2
49454: ARRAY
49455: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49456: LD_ADDR_VAR 0 6
49460: PUSH
49461: LD_VAR 0 7
49465: PUSH
49466: LD_INT 1
49468: ARRAY
49469: PUSH
49470: LD_INT 3
49472: ARRAY
49473: ST_TO_ADDR
// if InArea ( x , y , area ) then
49474: LD_VAR 0 5
49478: PPUSH
49479: LD_VAR 0 6
49483: PPUSH
49484: LD_VAR 0 2
49488: PPUSH
49489: CALL_OW 309
49493: IFFALSE 49504
// ComStop ( unit ) ;
49495: LD_VAR 0 1
49499: PPUSH
49500: CALL_OW 141
// end ;
49504: LD_VAR 0 4
49508: RET
// export function Abs ( value ) ; begin
49509: LD_INT 0
49511: PPUSH
// result := value ;
49512: LD_ADDR_VAR 0 2
49516: PUSH
49517: LD_VAR 0 1
49521: ST_TO_ADDR
// if value < 0 then
49522: LD_VAR 0 1
49526: PUSH
49527: LD_INT 0
49529: LESS
49530: IFFALSE 49547
// result := value * - 1 ;
49532: LD_ADDR_VAR 0 2
49536: PUSH
49537: LD_VAR 0 1
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: MUL
49546: ST_TO_ADDR
// end ;
49547: LD_VAR 0 2
49551: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49552: LD_INT 0
49554: PPUSH
49555: PPUSH
49556: PPUSH
49557: PPUSH
49558: PPUSH
49559: PPUSH
49560: PPUSH
49561: PPUSH
// if not unit or not building then
49562: LD_VAR 0 1
49566: NOT
49567: PUSH
49568: LD_VAR 0 2
49572: NOT
49573: OR
49574: IFFALSE 49578
// exit ;
49576: GO 49804
// x := GetX ( building ) ;
49578: LD_ADDR_VAR 0 4
49582: PUSH
49583: LD_VAR 0 2
49587: PPUSH
49588: CALL_OW 250
49592: ST_TO_ADDR
// y := GetY ( building ) ;
49593: LD_ADDR_VAR 0 6
49597: PUSH
49598: LD_VAR 0 2
49602: PPUSH
49603: CALL_OW 251
49607: ST_TO_ADDR
// d := GetDir ( building ) ;
49608: LD_ADDR_VAR 0 8
49612: PUSH
49613: LD_VAR 0 2
49617: PPUSH
49618: CALL_OW 254
49622: ST_TO_ADDR
// r := 4 ;
49623: LD_ADDR_VAR 0 9
49627: PUSH
49628: LD_INT 4
49630: ST_TO_ADDR
// for i := 1 to 5 do
49631: LD_ADDR_VAR 0 10
49635: PUSH
49636: DOUBLE
49637: LD_INT 1
49639: DEC
49640: ST_TO_ADDR
49641: LD_INT 5
49643: PUSH
49644: FOR_TO
49645: IFFALSE 49802
// begin _x := ShiftX ( x , d , r + i ) ;
49647: LD_ADDR_VAR 0 5
49651: PUSH
49652: LD_VAR 0 4
49656: PPUSH
49657: LD_VAR 0 8
49661: PPUSH
49662: LD_VAR 0 9
49666: PUSH
49667: LD_VAR 0 10
49671: PLUS
49672: PPUSH
49673: CALL_OW 272
49677: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49678: LD_ADDR_VAR 0 7
49682: PUSH
49683: LD_VAR 0 6
49687: PPUSH
49688: LD_VAR 0 8
49692: PPUSH
49693: LD_VAR 0 9
49697: PUSH
49698: LD_VAR 0 10
49702: PLUS
49703: PPUSH
49704: CALL_OW 273
49708: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49709: LD_VAR 0 5
49713: PPUSH
49714: LD_VAR 0 7
49718: PPUSH
49719: CALL_OW 488
49723: PUSH
49724: LD_VAR 0 5
49728: PPUSH
49729: LD_VAR 0 7
49733: PPUSH
49734: CALL_OW 428
49738: PPUSH
49739: CALL_OW 247
49743: PUSH
49744: LD_INT 3
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: IN
49754: NOT
49755: AND
49756: IFFALSE 49800
// begin ComMoveXY ( unit , _x , _y ) ;
49758: LD_VAR 0 1
49762: PPUSH
49763: LD_VAR 0 5
49767: PPUSH
49768: LD_VAR 0 7
49772: PPUSH
49773: CALL_OW 111
// result := [ _x , _y ] ;
49777: LD_ADDR_VAR 0 3
49781: PUSH
49782: LD_VAR 0 5
49786: PUSH
49787: LD_VAR 0 7
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: ST_TO_ADDR
// exit ;
49796: POP
49797: POP
49798: GO 49804
// end ; end ;
49800: GO 49644
49802: POP
49803: POP
// end ;
49804: LD_VAR 0 3
49808: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49809: LD_INT 0
49811: PPUSH
49812: PPUSH
49813: PPUSH
// result := 0 ;
49814: LD_ADDR_VAR 0 3
49818: PUSH
49819: LD_INT 0
49821: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49822: LD_VAR 0 1
49826: PUSH
49827: LD_INT 0
49829: LESS
49830: PUSH
49831: LD_VAR 0 1
49835: PUSH
49836: LD_INT 8
49838: GREATER
49839: OR
49840: PUSH
49841: LD_VAR 0 2
49845: PUSH
49846: LD_INT 0
49848: LESS
49849: OR
49850: PUSH
49851: LD_VAR 0 2
49855: PUSH
49856: LD_INT 8
49858: GREATER
49859: OR
49860: IFFALSE 49864
// exit ;
49862: GO 49939
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49864: LD_ADDR_VAR 0 4
49868: PUSH
49869: LD_INT 22
49871: PUSH
49872: LD_VAR 0 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PPUSH
49881: CALL_OW 69
49885: PUSH
49886: FOR_IN
49887: IFFALSE 49937
// begin un := UnitShoot ( i ) ;
49889: LD_ADDR_VAR 0 5
49893: PUSH
49894: LD_VAR 0 4
49898: PPUSH
49899: CALL_OW 504
49903: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49904: LD_VAR 0 5
49908: PPUSH
49909: CALL_OW 255
49913: PUSH
49914: LD_VAR 0 1
49918: EQUAL
49919: IFFALSE 49935
// begin result := un ;
49921: LD_ADDR_VAR 0 3
49925: PUSH
49926: LD_VAR 0 5
49930: ST_TO_ADDR
// exit ;
49931: POP
49932: POP
49933: GO 49939
// end ; end ;
49935: GO 49886
49937: POP
49938: POP
// end ;
49939: LD_VAR 0 3
49943: RET
// export function GetCargoBay ( units ) ; begin
49944: LD_INT 0
49946: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49947: LD_ADDR_VAR 0 2
49951: PUSH
49952: LD_VAR 0 1
49956: PPUSH
49957: LD_INT 2
49959: PUSH
49960: LD_INT 34
49962: PUSH
49963: LD_INT 12
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 34
49972: PUSH
49973: LD_INT 51
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 34
49982: PUSH
49983: LD_INT 32
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 34
49992: PUSH
49993: LD_EXP 80
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: PPUSH
50009: CALL_OW 72
50013: ST_TO_ADDR
// end ;
50014: LD_VAR 0 2
50018: RET
// export function Negate ( value ) ; begin
50019: LD_INT 0
50021: PPUSH
// result := not value ;
50022: LD_ADDR_VAR 0 2
50026: PUSH
50027: LD_VAR 0 1
50031: NOT
50032: ST_TO_ADDR
// end ;
50033: LD_VAR 0 2
50037: RET
// export function Inc ( value ) ; begin
50038: LD_INT 0
50040: PPUSH
// result := value + 1 ;
50041: LD_ADDR_VAR 0 2
50045: PUSH
50046: LD_VAR 0 1
50050: PUSH
50051: LD_INT 1
50053: PLUS
50054: ST_TO_ADDR
// end ;
50055: LD_VAR 0 2
50059: RET
// export function Dec ( value ) ; begin
50060: LD_INT 0
50062: PPUSH
// result := value - 1 ;
50063: LD_ADDR_VAR 0 2
50067: PUSH
50068: LD_VAR 0 1
50072: PUSH
50073: LD_INT 1
50075: MINUS
50076: ST_TO_ADDR
// end ;
50077: LD_VAR 0 2
50081: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50082: LD_INT 0
50084: PPUSH
50085: PPUSH
50086: PPUSH
50087: PPUSH
50088: PPUSH
50089: PPUSH
50090: PPUSH
50091: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50092: LD_VAR 0 1
50096: PPUSH
50097: LD_VAR 0 2
50101: PPUSH
50102: CALL_OW 488
50106: NOT
50107: PUSH
50108: LD_VAR 0 3
50112: PPUSH
50113: LD_VAR 0 4
50117: PPUSH
50118: CALL_OW 488
50122: NOT
50123: OR
50124: IFFALSE 50137
// begin result := - 1 ;
50126: LD_ADDR_VAR 0 5
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: ST_TO_ADDR
// exit ;
50135: GO 50372
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50137: LD_ADDR_VAR 0 12
50141: PUSH
50142: LD_VAR 0 1
50146: PPUSH
50147: LD_VAR 0 2
50151: PPUSH
50152: LD_VAR 0 3
50156: PPUSH
50157: LD_VAR 0 4
50161: PPUSH
50162: CALL 49220 0 4
50166: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50167: LD_ADDR_VAR 0 11
50171: PUSH
50172: LD_VAR 0 1
50176: PPUSH
50177: LD_VAR 0 2
50181: PPUSH
50182: LD_VAR 0 12
50186: PUSH
50187: LD_INT 1
50189: ARRAY
50190: PPUSH
50191: LD_VAR 0 12
50195: PUSH
50196: LD_INT 2
50198: ARRAY
50199: PPUSH
50200: CALL_OW 298
50204: ST_TO_ADDR
// distance := 9999 ;
50205: LD_ADDR_VAR 0 10
50209: PUSH
50210: LD_INT 9999
50212: ST_TO_ADDR
// for i := 0 to 5 do
50213: LD_ADDR_VAR 0 6
50217: PUSH
50218: DOUBLE
50219: LD_INT 0
50221: DEC
50222: ST_TO_ADDR
50223: LD_INT 5
50225: PUSH
50226: FOR_TO
50227: IFFALSE 50370
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50229: LD_ADDR_VAR 0 7
50233: PUSH
50234: LD_VAR 0 1
50238: PPUSH
50239: LD_VAR 0 6
50243: PPUSH
50244: LD_VAR 0 11
50248: PPUSH
50249: CALL_OW 272
50253: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50254: LD_ADDR_VAR 0 8
50258: PUSH
50259: LD_VAR 0 2
50263: PPUSH
50264: LD_VAR 0 6
50268: PPUSH
50269: LD_VAR 0 11
50273: PPUSH
50274: CALL_OW 273
50278: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50279: LD_VAR 0 7
50283: PPUSH
50284: LD_VAR 0 8
50288: PPUSH
50289: CALL_OW 488
50293: NOT
50294: IFFALSE 50298
// continue ;
50296: GO 50226
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50298: LD_ADDR_VAR 0 9
50302: PUSH
50303: LD_VAR 0 12
50307: PUSH
50308: LD_INT 1
50310: ARRAY
50311: PPUSH
50312: LD_VAR 0 12
50316: PUSH
50317: LD_INT 2
50319: ARRAY
50320: PPUSH
50321: LD_VAR 0 7
50325: PPUSH
50326: LD_VAR 0 8
50330: PPUSH
50331: CALL_OW 298
50335: ST_TO_ADDR
// if tmp < distance then
50336: LD_VAR 0 9
50340: PUSH
50341: LD_VAR 0 10
50345: LESS
50346: IFFALSE 50368
// begin result := i ;
50348: LD_ADDR_VAR 0 5
50352: PUSH
50353: LD_VAR 0 6
50357: ST_TO_ADDR
// distance := tmp ;
50358: LD_ADDR_VAR 0 10
50362: PUSH
50363: LD_VAR 0 9
50367: ST_TO_ADDR
// end ; end ;
50368: GO 50226
50370: POP
50371: POP
// end ;
50372: LD_VAR 0 5
50376: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50377: LD_INT 0
50379: PPUSH
50380: PPUSH
// if not driver or not IsInUnit ( driver ) then
50381: LD_VAR 0 1
50385: NOT
50386: PUSH
50387: LD_VAR 0 1
50391: PPUSH
50392: CALL_OW 310
50396: NOT
50397: OR
50398: IFFALSE 50402
// exit ;
50400: GO 50492
// vehicle := IsInUnit ( driver ) ;
50402: LD_ADDR_VAR 0 3
50406: PUSH
50407: LD_VAR 0 1
50411: PPUSH
50412: CALL_OW 310
50416: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50417: LD_VAR 0 1
50421: PPUSH
50422: LD_STRING \
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: LD_INT 0
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: PUSH
50452: LD_STRING E
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_VAR 0 3
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PPUSH
50488: CALL_OW 446
// end ;
50492: LD_VAR 0 2
50496: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50497: LD_INT 0
50499: PPUSH
50500: PPUSH
// if not driver or not IsInUnit ( driver ) then
50501: LD_VAR 0 1
50505: NOT
50506: PUSH
50507: LD_VAR 0 1
50511: PPUSH
50512: CALL_OW 310
50516: NOT
50517: OR
50518: IFFALSE 50522
// exit ;
50520: GO 50612
// vehicle := IsInUnit ( driver ) ;
50522: LD_ADDR_VAR 0 3
50526: PUSH
50527: LD_VAR 0 1
50531: PPUSH
50532: CALL_OW 310
50536: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50537: LD_VAR 0 1
50541: PPUSH
50542: LD_STRING \
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: PUSH
50572: LD_STRING E
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: LD_VAR 0 3
50585: PUSH
50586: LD_INT 0
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PPUSH
50608: CALL_OW 447
// end ;
50612: LD_VAR 0 2
50616: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50617: LD_INT 0
50619: PPUSH
50620: PPUSH
50621: PPUSH
// tmp := [ ] ;
50622: LD_ADDR_VAR 0 5
50626: PUSH
50627: EMPTY
50628: ST_TO_ADDR
// for i in units do
50629: LD_ADDR_VAR 0 4
50633: PUSH
50634: LD_VAR 0 1
50638: PUSH
50639: FOR_IN
50640: IFFALSE 50678
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50642: LD_ADDR_VAR 0 5
50646: PUSH
50647: LD_VAR 0 5
50651: PPUSH
50652: LD_VAR 0 5
50656: PUSH
50657: LD_INT 1
50659: PLUS
50660: PPUSH
50661: LD_VAR 0 4
50665: PPUSH
50666: CALL_OW 256
50670: PPUSH
50671: CALL_OW 2
50675: ST_TO_ADDR
50676: GO 50639
50678: POP
50679: POP
// if not tmp then
50680: LD_VAR 0 5
50684: NOT
50685: IFFALSE 50689
// exit ;
50687: GO 50737
// if asc then
50689: LD_VAR 0 2
50693: IFFALSE 50717
// result := SortListByListAsc ( units , tmp ) else
50695: LD_ADDR_VAR 0 3
50699: PUSH
50700: LD_VAR 0 1
50704: PPUSH
50705: LD_VAR 0 5
50709: PPUSH
50710: CALL_OW 76
50714: ST_TO_ADDR
50715: GO 50737
// result := SortListByListDesc ( units , tmp ) ;
50717: LD_ADDR_VAR 0 3
50721: PUSH
50722: LD_VAR 0 1
50726: PPUSH
50727: LD_VAR 0 5
50731: PPUSH
50732: CALL_OW 77
50736: ST_TO_ADDR
// end ;
50737: LD_VAR 0 3
50741: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50742: LD_INT 0
50744: PPUSH
50745: PPUSH
// task := GetTaskList ( mech ) ;
50746: LD_ADDR_VAR 0 4
50750: PUSH
50751: LD_VAR 0 1
50755: PPUSH
50756: CALL_OW 437
50760: ST_TO_ADDR
// if not task then
50761: LD_VAR 0 4
50765: NOT
50766: IFFALSE 50770
// exit ;
50768: GO 50812
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50770: LD_ADDR_VAR 0 3
50774: PUSH
50775: LD_VAR 0 4
50779: PUSH
50780: LD_INT 1
50782: ARRAY
50783: PUSH
50784: LD_INT 1
50786: ARRAY
50787: PUSH
50788: LD_STRING r
50790: EQUAL
50791: PUSH
50792: LD_VAR 0 4
50796: PUSH
50797: LD_INT 1
50799: ARRAY
50800: PUSH
50801: LD_INT 4
50803: ARRAY
50804: PUSH
50805: LD_VAR 0 2
50809: EQUAL
50810: AND
50811: ST_TO_ADDR
// end ;
50812: LD_VAR 0 3
50816: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50817: LD_INT 0
50819: PPUSH
// SetDir ( unit , d ) ;
50820: LD_VAR 0 1
50824: PPUSH
50825: LD_VAR 0 4
50829: PPUSH
50830: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
50834: LD_VAR 0 1
50838: PPUSH
50839: LD_VAR 0 2
50843: PPUSH
50844: LD_VAR 0 3
50848: PPUSH
50849: LD_VAR 0 5
50853: PPUSH
50854: CALL_OW 48
// end ;
50858: LD_VAR 0 6
50862: RET
// export function ToNaturalNumber ( number ) ; begin
50863: LD_INT 0
50865: PPUSH
// result := number div 1 ;
50866: LD_ADDR_VAR 0 2
50870: PUSH
50871: LD_VAR 0 1
50875: PUSH
50876: LD_INT 1
50878: DIV
50879: ST_TO_ADDR
// if number < 0 then
50880: LD_VAR 0 1
50884: PUSH
50885: LD_INT 0
50887: LESS
50888: IFFALSE 50898
// result := 0 ;
50890: LD_ADDR_VAR 0 2
50894: PUSH
50895: LD_INT 0
50897: ST_TO_ADDR
// end ;
50898: LD_VAR 0 2
50902: RET
// export function SortByClass ( units , class ) ; var un ; begin
50903: LD_INT 0
50905: PPUSH
50906: PPUSH
// if not units or not class then
50907: LD_VAR 0 1
50911: NOT
50912: PUSH
50913: LD_VAR 0 2
50917: NOT
50918: OR
50919: IFFALSE 50923
// exit ;
50921: GO 51018
// result := [ ] ;
50923: LD_ADDR_VAR 0 3
50927: PUSH
50928: EMPTY
50929: ST_TO_ADDR
// for un in units do
50930: LD_ADDR_VAR 0 4
50934: PUSH
50935: LD_VAR 0 1
50939: PUSH
50940: FOR_IN
50941: IFFALSE 51016
// if GetClass ( un ) = class then
50943: LD_VAR 0 4
50947: PPUSH
50948: CALL_OW 257
50952: PUSH
50953: LD_VAR 0 2
50957: EQUAL
50958: IFFALSE 50985
// result := Insert ( result , 1 , un ) else
50960: LD_ADDR_VAR 0 3
50964: PUSH
50965: LD_VAR 0 3
50969: PPUSH
50970: LD_INT 1
50972: PPUSH
50973: LD_VAR 0 4
50977: PPUSH
50978: CALL_OW 2
50982: ST_TO_ADDR
50983: GO 51014
// result := Replace ( result , result + 1 , un ) ;
50985: LD_ADDR_VAR 0 3
50989: PUSH
50990: LD_VAR 0 3
50994: PPUSH
50995: LD_VAR 0 3
50999: PUSH
51000: LD_INT 1
51002: PLUS
51003: PPUSH
51004: LD_VAR 0 4
51008: PPUSH
51009: CALL_OW 1
51013: ST_TO_ADDR
51014: GO 50940
51016: POP
51017: POP
// end ;
51018: LD_VAR 0 3
51022: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51023: LD_INT 0
51025: PPUSH
51026: PPUSH
51027: PPUSH
51028: PPUSH
51029: PPUSH
51030: PPUSH
51031: PPUSH
// result := [ ] ;
51032: LD_ADDR_VAR 0 4
51036: PUSH
51037: EMPTY
51038: ST_TO_ADDR
// if x - r < 0 then
51039: LD_VAR 0 1
51043: PUSH
51044: LD_VAR 0 3
51048: MINUS
51049: PUSH
51050: LD_INT 0
51052: LESS
51053: IFFALSE 51065
// min_x := 0 else
51055: LD_ADDR_VAR 0 8
51059: PUSH
51060: LD_INT 0
51062: ST_TO_ADDR
51063: GO 51081
// min_x := x - r ;
51065: LD_ADDR_VAR 0 8
51069: PUSH
51070: LD_VAR 0 1
51074: PUSH
51075: LD_VAR 0 3
51079: MINUS
51080: ST_TO_ADDR
// if y - r < 0 then
51081: LD_VAR 0 2
51085: PUSH
51086: LD_VAR 0 3
51090: MINUS
51091: PUSH
51092: LD_INT 0
51094: LESS
51095: IFFALSE 51107
// min_y := 0 else
51097: LD_ADDR_VAR 0 7
51101: PUSH
51102: LD_INT 0
51104: ST_TO_ADDR
51105: GO 51123
// min_y := y - r ;
51107: LD_ADDR_VAR 0 7
51111: PUSH
51112: LD_VAR 0 2
51116: PUSH
51117: LD_VAR 0 3
51121: MINUS
51122: ST_TO_ADDR
// max_x := x + r ;
51123: LD_ADDR_VAR 0 9
51127: PUSH
51128: LD_VAR 0 1
51132: PUSH
51133: LD_VAR 0 3
51137: PLUS
51138: ST_TO_ADDR
// max_y := y + r ;
51139: LD_ADDR_VAR 0 10
51143: PUSH
51144: LD_VAR 0 2
51148: PUSH
51149: LD_VAR 0 3
51153: PLUS
51154: ST_TO_ADDR
// for _x = min_x to max_x do
51155: LD_ADDR_VAR 0 5
51159: PUSH
51160: DOUBLE
51161: LD_VAR 0 8
51165: DEC
51166: ST_TO_ADDR
51167: LD_VAR 0 9
51171: PUSH
51172: FOR_TO
51173: IFFALSE 51274
// for _y = min_y to max_y do
51175: LD_ADDR_VAR 0 6
51179: PUSH
51180: DOUBLE
51181: LD_VAR 0 7
51185: DEC
51186: ST_TO_ADDR
51187: LD_VAR 0 10
51191: PUSH
51192: FOR_TO
51193: IFFALSE 51270
// begin if not ValidHex ( _x , _y ) then
51195: LD_VAR 0 5
51199: PPUSH
51200: LD_VAR 0 6
51204: PPUSH
51205: CALL_OW 488
51209: NOT
51210: IFFALSE 51214
// continue ;
51212: GO 51192
// if GetResourceTypeXY ( _x , _y ) then
51214: LD_VAR 0 5
51218: PPUSH
51219: LD_VAR 0 6
51223: PPUSH
51224: CALL_OW 283
51228: IFFALSE 51268
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51230: LD_ADDR_VAR 0 4
51234: PUSH
51235: LD_VAR 0 4
51239: PPUSH
51240: LD_VAR 0 4
51244: PUSH
51245: LD_INT 1
51247: PLUS
51248: PPUSH
51249: LD_VAR 0 5
51253: PUSH
51254: LD_VAR 0 6
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PPUSH
51263: CALL_OW 1
51267: ST_TO_ADDR
// end ;
51268: GO 51192
51270: POP
51271: POP
51272: GO 51172
51274: POP
51275: POP
// end ;
51276: LD_VAR 0 4
51280: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51281: LD_INT 0
51283: PPUSH
51284: PPUSH
51285: PPUSH
51286: PPUSH
51287: PPUSH
51288: PPUSH
51289: PPUSH
51290: PPUSH
// if not units then
51291: LD_VAR 0 1
51295: NOT
51296: IFFALSE 51300
// exit ;
51298: GO 51725
// result := UnitFilter ( units , [ f_ok ] ) ;
51300: LD_ADDR_VAR 0 3
51304: PUSH
51305: LD_VAR 0 1
51309: PPUSH
51310: LD_INT 50
51312: PUSH
51313: EMPTY
51314: LIST
51315: PPUSH
51316: CALL_OW 72
51320: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51321: LD_ADDR_VAR 0 8
51325: PUSH
51326: LD_VAR 0 1
51330: PUSH
51331: LD_INT 1
51333: ARRAY
51334: PPUSH
51335: CALL_OW 255
51339: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
51340: LD_ADDR_VAR 0 10
51344: PUSH
51345: LD_INT 29
51347: PUSH
51348: LD_EXP 83
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: ST_TO_ADDR
// if not result then
51357: LD_VAR 0 3
51361: NOT
51362: IFFALSE 51366
// exit ;
51364: GO 51725
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51366: LD_ADDR_VAR 0 5
51370: PUSH
51371: LD_INT 81
51373: PUSH
51374: LD_VAR 0 8
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PPUSH
51383: CALL_OW 69
51387: ST_TO_ADDR
// for i in result do
51388: LD_ADDR_VAR 0 4
51392: PUSH
51393: LD_VAR 0 3
51397: PUSH
51398: FOR_IN
51399: IFFALSE 51723
// begin tag := GetTag ( i ) + 1 ;
51401: LD_ADDR_VAR 0 9
51405: PUSH
51406: LD_VAR 0 4
51410: PPUSH
51411: CALL_OW 110
51415: PUSH
51416: LD_INT 1
51418: PLUS
51419: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
51420: LD_ADDR_VAR 0 7
51424: PUSH
51425: LD_VAR 0 4
51429: PPUSH
51430: CALL_OW 250
51434: PPUSH
51435: LD_VAR 0 4
51439: PPUSH
51440: CALL_OW 251
51444: PPUSH
51445: LD_INT 6
51447: PPUSH
51448: CALL 51023 0 3
51452: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
51453: LD_VAR 0 7
51457: PUSH
51458: LD_VAR 0 4
51462: PPUSH
51463: CALL_OW 264
51467: PUSH
51468: LD_VAR 0 10
51472: IN
51473: NOT
51474: AND
51475: IFFALSE 51514
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51477: LD_VAR 0 4
51481: PPUSH
51482: LD_VAR 0 7
51486: PUSH
51487: LD_INT 1
51489: ARRAY
51490: PUSH
51491: LD_INT 1
51493: ARRAY
51494: PPUSH
51495: LD_VAR 0 7
51499: PUSH
51500: LD_INT 1
51502: ARRAY
51503: PUSH
51504: LD_INT 2
51506: ARRAY
51507: PPUSH
51508: CALL_OW 116
51512: GO 51721
// if path > tag then
51514: LD_VAR 0 2
51518: PUSH
51519: LD_VAR 0 9
51523: GREATER
51524: IFFALSE 51691
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
51526: LD_ADDR_VAR 0 6
51530: PUSH
51531: LD_VAR 0 5
51535: PPUSH
51536: LD_INT 91
51538: PUSH
51539: LD_VAR 0 4
51543: PUSH
51544: LD_INT 12
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: LIST
51551: PPUSH
51552: CALL_OW 72
51556: ST_TO_ADDR
// if nearEnemy then
51557: LD_VAR 0 6
51561: IFFALSE 51589
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51563: LD_VAR 0 4
51567: PPUSH
51568: LD_VAR 0 6
51572: PPUSH
51573: LD_VAR 0 4
51577: PPUSH
51578: CALL_OW 74
51582: PPUSH
51583: CALL_OW 115
51587: GO 51689
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51589: LD_VAR 0 4
51593: PPUSH
51594: LD_VAR 0 2
51598: PUSH
51599: LD_VAR 0 9
51603: ARRAY
51604: PUSH
51605: LD_INT 1
51607: ARRAY
51608: PPUSH
51609: LD_VAR 0 2
51613: PUSH
51614: LD_VAR 0 9
51618: ARRAY
51619: PUSH
51620: LD_INT 2
51622: ARRAY
51623: PPUSH
51624: CALL_OW 297
51628: PUSH
51629: LD_INT 6
51631: GREATER
51632: IFFALSE 51675
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51634: LD_VAR 0 4
51638: PPUSH
51639: LD_VAR 0 2
51643: PUSH
51644: LD_VAR 0 9
51648: ARRAY
51649: PUSH
51650: LD_INT 1
51652: ARRAY
51653: PPUSH
51654: LD_VAR 0 2
51658: PUSH
51659: LD_VAR 0 9
51663: ARRAY
51664: PUSH
51665: LD_INT 2
51667: ARRAY
51668: PPUSH
51669: CALL_OW 114
51673: GO 51689
// SetTag ( i , tag ) ;
51675: LD_VAR 0 4
51679: PPUSH
51680: LD_VAR 0 9
51684: PPUSH
51685: CALL_OW 109
// end else
51689: GO 51721
// if enemy then
51691: LD_VAR 0 5
51695: IFFALSE 51721
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51697: LD_VAR 0 4
51701: PPUSH
51702: LD_VAR 0 5
51706: PPUSH
51707: LD_VAR 0 4
51711: PPUSH
51712: CALL_OW 74
51716: PPUSH
51717: CALL_OW 115
// end ;
51721: GO 51398
51723: POP
51724: POP
// end ;
51725: LD_VAR 0 3
51729: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51730: LD_INT 0
51732: PPUSH
51733: PPUSH
51734: PPUSH
// if not unit or IsInUnit ( unit ) then
51735: LD_VAR 0 1
51739: NOT
51740: PUSH
51741: LD_VAR 0 1
51745: PPUSH
51746: CALL_OW 310
51750: OR
51751: IFFALSE 51755
// exit ;
51753: GO 51846
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51755: LD_ADDR_VAR 0 4
51759: PUSH
51760: LD_VAR 0 1
51764: PPUSH
51765: CALL_OW 250
51769: PPUSH
51770: LD_VAR 0 2
51774: PPUSH
51775: LD_INT 1
51777: PPUSH
51778: CALL_OW 272
51782: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51783: LD_ADDR_VAR 0 5
51787: PUSH
51788: LD_VAR 0 1
51792: PPUSH
51793: CALL_OW 251
51797: PPUSH
51798: LD_VAR 0 2
51802: PPUSH
51803: LD_INT 1
51805: PPUSH
51806: CALL_OW 273
51810: ST_TO_ADDR
// if ValidHex ( x , y ) then
51811: LD_VAR 0 4
51815: PPUSH
51816: LD_VAR 0 5
51820: PPUSH
51821: CALL_OW 488
51825: IFFALSE 51846
// ComTurnXY ( unit , x , y ) ;
51827: LD_VAR 0 1
51831: PPUSH
51832: LD_VAR 0 4
51836: PPUSH
51837: LD_VAR 0 5
51841: PPUSH
51842: CALL_OW 118
// end ;
51846: LD_VAR 0 3
51850: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51851: LD_INT 0
51853: PPUSH
51854: PPUSH
// result := false ;
51855: LD_ADDR_VAR 0 3
51859: PUSH
51860: LD_INT 0
51862: ST_TO_ADDR
// if not units then
51863: LD_VAR 0 2
51867: NOT
51868: IFFALSE 51872
// exit ;
51870: GO 51917
// for i in units do
51872: LD_ADDR_VAR 0 4
51876: PUSH
51877: LD_VAR 0 2
51881: PUSH
51882: FOR_IN
51883: IFFALSE 51915
// if See ( side , i ) then
51885: LD_VAR 0 1
51889: PPUSH
51890: LD_VAR 0 4
51894: PPUSH
51895: CALL_OW 292
51899: IFFALSE 51913
// begin result := true ;
51901: LD_ADDR_VAR 0 3
51905: PUSH
51906: LD_INT 1
51908: ST_TO_ADDR
// exit ;
51909: POP
51910: POP
51911: GO 51917
// end ;
51913: GO 51882
51915: POP
51916: POP
// end ;
51917: LD_VAR 0 3
51921: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51922: LD_INT 0
51924: PPUSH
51925: PPUSH
51926: PPUSH
51927: PPUSH
// if not unit or not points then
51928: LD_VAR 0 1
51932: NOT
51933: PUSH
51934: LD_VAR 0 2
51938: NOT
51939: OR
51940: IFFALSE 51944
// exit ;
51942: GO 52034
// dist := 99999 ;
51944: LD_ADDR_VAR 0 5
51948: PUSH
51949: LD_INT 99999
51951: ST_TO_ADDR
// for i in points do
51952: LD_ADDR_VAR 0 4
51956: PUSH
51957: LD_VAR 0 2
51961: PUSH
51962: FOR_IN
51963: IFFALSE 52032
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51965: LD_ADDR_VAR 0 6
51969: PUSH
51970: LD_VAR 0 1
51974: PPUSH
51975: LD_VAR 0 4
51979: PUSH
51980: LD_INT 1
51982: ARRAY
51983: PPUSH
51984: LD_VAR 0 4
51988: PUSH
51989: LD_INT 2
51991: ARRAY
51992: PPUSH
51993: CALL_OW 297
51997: ST_TO_ADDR
// if tmpDist < dist then
51998: LD_VAR 0 6
52002: PUSH
52003: LD_VAR 0 5
52007: LESS
52008: IFFALSE 52030
// begin result := i ;
52010: LD_ADDR_VAR 0 3
52014: PUSH
52015: LD_VAR 0 4
52019: ST_TO_ADDR
// dist := tmpDist ;
52020: LD_ADDR_VAR 0 5
52024: PUSH
52025: LD_VAR 0 6
52029: ST_TO_ADDR
// end ; end ;
52030: GO 51962
52032: POP
52033: POP
// end ;
52034: LD_VAR 0 3
52038: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52039: LD_INT 0
52041: PPUSH
// uc_side := side ;
52042: LD_ADDR_OWVAR 20
52046: PUSH
52047: LD_VAR 0 1
52051: ST_TO_ADDR
// uc_nation := 3 ;
52052: LD_ADDR_OWVAR 21
52056: PUSH
52057: LD_INT 3
52059: ST_TO_ADDR
// vc_chassis := 25 ;
52060: LD_ADDR_OWVAR 37
52064: PUSH
52065: LD_INT 25
52067: ST_TO_ADDR
// vc_engine := engine_siberite ;
52068: LD_ADDR_OWVAR 39
52072: PUSH
52073: LD_INT 3
52075: ST_TO_ADDR
// vc_control := control_computer ;
52076: LD_ADDR_OWVAR 38
52080: PUSH
52081: LD_INT 3
52083: ST_TO_ADDR
// vc_weapon := 59 ;
52084: LD_ADDR_OWVAR 40
52088: PUSH
52089: LD_INT 59
52091: ST_TO_ADDR
// result := CreateVehicle ;
52092: LD_ADDR_VAR 0 5
52096: PUSH
52097: CALL_OW 45
52101: ST_TO_ADDR
// SetDir ( result , d ) ;
52102: LD_VAR 0 5
52106: PPUSH
52107: LD_VAR 0 4
52111: PPUSH
52112: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52116: LD_VAR 0 5
52120: PPUSH
52121: LD_VAR 0 2
52125: PPUSH
52126: LD_VAR 0 3
52130: PPUSH
52131: LD_INT 0
52133: PPUSH
52134: CALL_OW 48
// end ;
52138: LD_VAR 0 5
52142: RET
