// starting var b , n ; begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 212 0 0
// SetBname ( NorthLenin , lenin ) ;
   8: LD_INT 253
  10: PPUSH
  11: LD_STRING lenin
  13: PPUSH
  14: CALL_OW 500
// SetBname ( SouthLenin , lenin ) ;
  18: LD_INT 218
  20: PPUSH
  21: LD_STRING lenin
  23: PPUSH
  24: CALL_OW 500
// SetBname ( MorozovBase , OC ) ;
  28: LD_INT 348
  30: PPUSH
  31: LD_STRING OC
  33: PPUSH
  34: CALL_OW 500
// SetBname ( YakotichBase , kamenev ) ;
  38: LD_INT 312
  40: PPUSH
  41: LD_STRING kamenev
  43: PPUSH
  44: CALL_OW 500
// SetBname ( BukovBase , Kuybyshev ) ;
  48: LD_INT 127
  50: PPUSH
  51: LD_STRING Kuybyshev
  53: PPUSH
  54: CALL_OW 500
// AnimateTrees ( true ) ;
  58: LD_INT 1
  60: PPUSH
  61: CALL_OW 573
// Randomize ;
  65: CALL_OW 10
// RandomizeAll ;
  69: CALL_OW 11
// for b in FilterUnitsInArea ( SouthLeninArea , [ [ f_type , unit_building ] ] ) do
  73: LD_ADDR_VAR 0 1
  77: PUSH
  78: LD_INT 4
  80: PPUSH
  81: LD_INT 21
  83: PUSH
  84: LD_INT 3
  86: PUSH
  87: EMPTY
  88: LIST
  89: LIST
  90: PUSH
  91: EMPTY
  92: LIST
  93: PPUSH
  94: CALL_OW 70
  98: PUSH
  99: FOR_IN
 100: IFFALSE 116
// ComLinkToBase ( SouthLenin , b ) ;
 102: LD_INT 218
 104: PPUSH
 105: LD_VAR 0 1
 109: PPUSH
 110: CALL_OW 169
 114: GO 99
 116: POP
 117: POP
// for n in FilterUnitsInArea ( NorthLeninArea , [ [ f_type , unit_building ] ] ) do
 118: LD_ADDR_VAR 0 2
 122: PUSH
 123: LD_INT 5
 125: PPUSH
 126: LD_INT 21
 128: PUSH
 129: LD_INT 3
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: PUSH
 136: EMPTY
 137: LIST
 138: PPUSH
 139: CALL_OW 70
 143: PUSH
 144: FOR_IN
 145: IFFALSE 161
// ComLinkToBase ( NorthLenin , n ) ;
 147: LD_INT 253
 149: PPUSH
 150: LD_VAR 0 2
 154: PPUSH
 155: CALL_OW 169
 159: GO 144
 161: POP
 162: POP
// InitGlobalVariables ;
 163: CALL 12489 0 0
// InitMiotacz ;
 167: CALL 1929 0 0
// InitRussian ;
 171: CALL 538 0 0
// InitCommanders ;
 175: CALL 5869 0 0
// InitBierezovPersonel ;
 179: CALL 2044 0 0
// InitBierezov ;
 183: CALL 1669 0 0
// InitRussianAI ;
 187: CALL 6123 0 0
// InitArabianAI ;
 191: CALL 11173 0 0
// Action ;
 195: CALL 2730 0 0
// DebugMode ;
 199: CALL 363 0 0
// game_speed = 6 ;
 203: LD_ADDR_OWVAR 65
 207: PUSH
 208: LD_INT 6
 210: ST_TO_ADDR
// end ;
 211: END
// export YakotichCrew , BierezovCrew , BierezovNewCrew , PompaCrew , BukovCrew , GaydarCrew , NorthLeninCrew , SouthLeninCrew , CheckpointsCrew , SouthCheckpointCrew , HeikeCrew , OmarCrew ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav , Jegor , Grigori , Anton ; export Heike , Omar , Shulz , Bergkamp ; export Tank , Cargo1 , Cargo2 ; export Natasza , Belkov2 , Oblukov , Kovalyuk , Kozlov ; export Bierezov , Sharonov , Lesov , Aleinik , Korotajev , Bautin ; export Pompa , Smirnov , Petrov , Konajev , Radenko ; export Morozov , Platonov , Popov , Gaydar , Bukov , Yashin ; export PrepareTime ; export debug ; export mission_prefix ; export start_ended , control_taken_over , ivan_came , apeman_tamed , flame_researched , heavy_gun_researched , weaponry_researched , fall_back ; function Init ; begin
 212: LD_INT 0
 214: PPUSH
// SetAttitude ( 9 , 3 , 1 , true ) ;
 215: LD_INT 9
 217: PPUSH
 218: LD_INT 3
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 1
 226: PPUSH
 227: CALL_OW 80
// SetAttitude ( 9 , 6 , 1 , true ) ;
 231: LD_INT 9
 233: PPUSH
 234: LD_INT 6
 236: PPUSH
 237: LD_INT 1
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: CALL_OW 80
// ChangeSideFog ( 9 , 3 ) ;
 247: LD_INT 9
 249: PPUSH
 250: LD_INT 3
 252: PPUSH
 253: CALL_OW 343
// mission_prefix := 04_ ;
 257: LD_ADDR_EXP 61
 261: PUSH
 262: LD_STRING 04_
 264: ST_TO_ADDR
// start_ended = false ;
 265: LD_ADDR_EXP 62
 269: PUSH
 270: LD_INT 0
 272: ST_TO_ADDR
// ivan_came = false ;
 273: LD_ADDR_EXP 64
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// control_taken_over = false ;
 281: LD_ADDR_EXP 63
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// apeman_tamed = false ;
 289: LD_ADDR_EXP 65
 293: PUSH
 294: LD_INT 0
 296: ST_TO_ADDR
// flame_researched = false ;
 297: LD_ADDR_EXP 66
 301: PUSH
 302: LD_INT 0
 304: ST_TO_ADDR
// heavy_gun_researched = false ;
 305: LD_ADDR_EXP 67
 309: PUSH
 310: LD_INT 0
 312: ST_TO_ADDR
// weaponry_researched = false ;
 313: LD_ADDR_EXP 68
 317: PUSH
 318: LD_INT 0
 320: ST_TO_ADDR
// fall_back = false ;
 321: LD_ADDR_EXP 69
 325: PUSH
 326: LD_INT 0
 328: ST_TO_ADDR
// PrepareTime := [ 35 35$0 , 30 30$0 , 25 25$0 ] [ 20 20$0 ] [ Difficulty ] ;
 329: LD_ADDR_EXP 59
 333: PUSH
 334: LD_INT 73500
 336: PUSH
 337: LD_INT 63000
 339: PUSH
 340: LD_INT 52500
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 42000
 350: ARRAY
 351: PUSH
 352: LD_OWVAR 67
 356: ARRAY
 357: ST_TO_ADDR
// end ;
 358: LD_VAR 0 1
 362: RET
// export function DebugMode ; begin
 363: LD_INT 0
 365: PPUSH
// if Debug = true then
 366: LD_EXP 60
 370: PUSH
 371: LD_INT 1
 373: EQUAL
 374: IFFALSE 395
// begin Difficulty := 3 ;
 376: LD_ADDR_OWVAR 67
 380: PUSH
 381: LD_INT 3
 383: ST_TO_ADDR
// TurnFogOff ( ) ;
 384: CALL_OW 537
// FogOff ( 3 ) ;
 388: LD_INT 3
 390: PPUSH
 391: CALL_OW 344
// end ; end ; end_of_file
 395: LD_VAR 0 1
 399: RET
// every 3 3$0 do
 400: GO 402
 402: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , YakotichCrates , true ) ;
 403: LD_INT 3
 405: PPUSH
 406: LD_INT 5
 408: PPUSH
 409: CALL_OW 12
 413: PPUSH
 414: LD_INT 11
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL_OW 55
// enable ;
 424: ENABLE
// end ;
 425: END
// every 7 7$0 do var i ;
 426: GO 428
 428: DISABLE
 429: LD_INT 0
 431: PPUSH
// begin for i = 1 to 5 do
 432: LD_ADDR_VAR 0 1
 436: PUSH
 437: DOUBLE
 438: LD_INT 1
 440: DEC
 441: ST_TO_ADDR
 442: LD_INT 5
 444: PUSH
 445: FOR_TO
 446: IFFALSE 471
// begin CreateCratesArea ( rand ( 4 , 5 ) , CratesArea , true ) ;
 448: LD_INT 4
 450: PPUSH
 451: LD_INT 5
 453: PPUSH
 454: CALL_OW 12
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: LD_INT 1
 464: PPUSH
 465: CALL_OW 55
// end ;
 469: GO 445
 471: POP
 472: POP
// enable ;
 473: ENABLE
// end ;
 474: PPOPN 1
 476: END
// every 5 5$0 trigger ivan_came = true do var i ;
 477: LD_EXP 64
 481: PUSH
 482: LD_INT 1
 484: EQUAL
 485: IFFALSE 535
 487: GO 489
 489: DISABLE
 490: LD_INT 0
 492: PPUSH
// begin for i = 1 to 2 do
 493: LD_ADDR_VAR 0 1
 497: PUSH
 498: DOUBLE
 499: LD_INT 1
 501: DEC
 502: ST_TO_ADDR
 503: LD_INT 2
 505: PUSH
 506: FOR_TO
 507: IFFALSE 533
// begin CreateCratesArea ( rand ( 1 , 5 ) , BierezovCrates , true ) ;
 509: LD_INT 1
 511: PPUSH
 512: LD_INT 5
 514: PPUSH
 515: CALL_OW 12
 519: PPUSH
 520: LD_INT 13
 522: PPUSH
 523: LD_INT 1
 525: PPUSH
 526: CALL_OW 55
// enable ;
 530: ENABLE
// end ;
 531: GO 506
 533: POP
 534: POP
// end ; end_of_file
 535: PPOPN 1
 537: END
// export RuCargo1 , RuCargo2 ; export function InitRussian ; begin
 538: LD_INT 0
 540: PPUSH
// Uc_Nation := 3 ;
 541: LD_ADDR_OWVAR 21
 545: PUSH
 546: LD_INT 3
 548: ST_TO_ADDR
// Uc_Side := 3 ;
 549: LD_ADDR_OWVAR 20
 553: PUSH
 554: LD_INT 3
 556: ST_TO_ADDR
// Uc_Direction := 2 ;
 557: LD_ADDR_OWVAR 24
 561: PUSH
 562: LD_INT 2
 564: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , false , 03_ ) ;
 565: LD_ADDR_EXP 13
 569: PUSH
 570: LD_STRING Yakotich
 572: PPUSH
 573: LD_INT 0
 575: PPUSH
 576: LD_STRING 03_
 578: PPUSH
 579: CALL 12649 0 3
 583: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , false , 03_ ) ;
 584: LD_ADDR_EXP 14
 588: PUSH
 589: LD_STRING Mietek
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: LD_STRING 03_
 597: PPUSH
 598: CALL 12649 0 3
 602: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , false , 03_ ) ;
 603: LD_ADDR_EXP 15
 607: PUSH
 608: LD_STRING Boris
 610: PPUSH
 611: LD_INT 0
 613: PPUSH
 614: LD_STRING 03_
 616: PPUSH
 617: CALL 12649 0 3
 621: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , false , 03_ ) ;
 622: LD_ADDR_EXP 17
 626: PUSH
 627: LD_STRING Michail
 629: PPUSH
 630: LD_INT 0
 632: PPUSH
 633: LD_STRING 03_
 635: PPUSH
 636: CALL 12649 0 3
 640: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , false , 03_ ) ;
 641: LD_ADDR_EXP 16
 645: PUSH
 646: LD_STRING Vasilij
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: LD_STRING 03_
 654: PPUSH
 655: CALL 12649 0 3
 659: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , false , 03_ ) ;
 660: LD_ADDR_EXP 18
 664: PUSH
 665: LD_STRING Constantin
 667: PPUSH
 668: LD_INT 0
 670: PPUSH
 671: LD_STRING 03_
 673: PPUSH
 674: CALL 12649 0 3
 678: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , false , 03_ ) ;
 679: LD_ADDR_EXP 19
 683: PUSH
 684: LD_STRING Maksim
 686: PPUSH
 687: LD_INT 0
 689: PPUSH
 690: LD_STRING 03_
 692: PPUSH
 693: CALL 12649 0 3
 697: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , false , 03_ ) ;
 698: LD_ADDR_EXP 20
 702: PUSH
 703: LD_STRING Fiodor
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: LD_STRING 03_
 711: PPUSH
 712: CALL 12649 0 3
 716: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , false , 03_ ) ;
 717: LD_ADDR_EXP 23
 721: PUSH
 722: LD_STRING Aleksiej
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: LD_STRING 03_
 730: PPUSH
 731: CALL 12649 0 3
 735: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , false , 03_ ) ;
 736: LD_ADDR_EXP 21
 740: PUSH
 741: LD_STRING Pavel
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: LD_STRING 03_
 749: PPUSH
 750: CALL 12649 0 3
 754: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , false , 03_ ) ;
 755: LD_ADDR_EXP 22
 759: PUSH
 760: LD_STRING Zakhar
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: LD_STRING 03_
 768: PPUSH
 769: CALL 12649 0 3
 773: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , false , 03_ ) ;
 774: LD_ADDR_EXP 24
 778: PUSH
 779: LD_STRING Aleksandr
 781: PPUSH
 782: LD_INT 0
 784: PPUSH
 785: LD_STRING 03_
 787: PPUSH
 788: CALL 12649 0 3
 792: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , false , 03_ ) ;
 793: LD_ADDR_EXP 26
 797: PUSH
 798: LD_STRING Stanislav
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: LD_STRING 03_
 806: PPUSH
 807: CALL 12649 0 3
 811: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false , 03_ ) ;
 812: LD_ADDR_EXP 25
 816: PUSH
 817: LD_STRING Josif
 819: PPUSH
 820: LD_INT 0
 822: PPUSH
 823: LD_STRING 03_
 825: PPUSH
 826: CALL 12649 0 3
 830: ST_TO_ADDR
// Jegor := PrepareUnit ( Jegor , false , 03_ ) ;
 831: LD_ADDR_EXP 27
 835: PUSH
 836: LD_STRING Jegor
 838: PPUSH
 839: LD_INT 0
 841: PPUSH
 842: LD_STRING 03_
 844: PPUSH
 845: CALL 12649 0 3
 849: ST_TO_ADDR
// Grigori := PrepareUnit ( Grigori , false , 03_ ) ;
 850: LD_ADDR_EXP 28
 854: PUSH
 855: LD_STRING Grigori
 857: PPUSH
 858: LD_INT 0
 860: PPUSH
 861: LD_STRING 03_
 863: PPUSH
 864: CALL 12649 0 3
 868: ST_TO_ADDR
// Anton := PrepareUnit ( Anton , false , 03_ ) ;
 869: LD_ADDR_EXP 29
 873: PUSH
 874: LD_STRING Anton
 876: PPUSH
 877: LD_INT 0
 879: PPUSH
 880: LD_STRING 03_
 882: PPUSH
 883: CALL 12649 0 3
 887: ST_TO_ADDR
// YakotichCrew = YakotichCrew ^ Boris ^ Michail ^ Vasilij ^ Constantin ^ Maksim ^ Fiodor ^ Aleksiej ^ Pavel ^ Zakhar ^ Aleksandr ^ Stanislav ^ Josif ^ Jegor ^ Grigori ^ Anton ;
 888: LD_ADDR_EXP 1
 892: PUSH
 893: LD_EXP 1
 897: PUSH
 898: LD_EXP 15
 902: ADD
 903: PUSH
 904: LD_EXP 17
 908: ADD
 909: PUSH
 910: LD_EXP 16
 914: ADD
 915: PUSH
 916: LD_EXP 18
 920: ADD
 921: PUSH
 922: LD_EXP 19
 926: ADD
 927: PUSH
 928: LD_EXP 20
 932: ADD
 933: PUSH
 934: LD_EXP 23
 938: ADD
 939: PUSH
 940: LD_EXP 21
 944: ADD
 945: PUSH
 946: LD_EXP 22
 950: ADD
 951: PUSH
 952: LD_EXP 24
 956: ADD
 957: PUSH
 958: LD_EXP 26
 962: ADD
 963: PUSH
 964: LD_EXP 25
 968: ADD
 969: PUSH
 970: LD_EXP 27
 974: ADD
 975: PUSH
 976: LD_EXP 28
 980: ADD
 981: PUSH
 982: LD_EXP 29
 986: ADD
 987: ST_TO_ADDR
// SetClass ( [ Yakotich , Mietek , Constantin , Maksim , Fiodor , Aleksiej , Zakhar , Aleksandr , Josif ] , 1 ) ;
 988: LD_EXP 13
 992: PUSH
 993: LD_EXP 14
 997: PUSH
 998: LD_EXP 18
1002: PUSH
1003: LD_EXP 19
1007: PUSH
1008: LD_EXP 20
1012: PUSH
1013: LD_EXP 23
1017: PUSH
1018: LD_EXP 22
1022: PUSH
1023: LD_EXP 24
1027: PUSH
1028: LD_EXP 25
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: LIST
1041: LIST
1042: LIST
1043: PPUSH
1044: LD_INT 1
1046: PPUSH
1047: CALL_OW 336
// SetClass ( [ Boris , Anton ] , 2 ) ;
1051: LD_EXP 15
1055: PUSH
1056: LD_EXP 29
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: PPUSH
1065: LD_INT 2
1067: PPUSH
1068: CALL_OW 336
// SetClass ( [ Michail , Pavel , Jegor ] , 3 ) ;
1072: LD_EXP 17
1076: PUSH
1077: LD_EXP 21
1081: PUSH
1082: LD_EXP 27
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PPUSH
1092: LD_INT 3
1094: PPUSH
1095: CALL_OW 336
// SetClass ( [ Stanislav , Vasilij , Grigori ] , 4 ) ;
1099: LD_EXP 26
1103: PUSH
1104: LD_EXP 16
1108: PUSH
1109: LD_EXP 28
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: LIST
1118: PPUSH
1119: LD_INT 4
1121: PPUSH
1122: CALL_OW 336
// vc_chassis = 24 ;
1126: LD_ADDR_OWVAR 37
1130: PUSH
1131: LD_INT 24
1133: ST_TO_ADDR
// vc_control = 1 ;
1134: LD_ADDR_OWVAR 38
1138: PUSH
1139: LD_INT 1
1141: ST_TO_ADDR
// vc_engine = 1 ;
1142: LD_ADDR_OWVAR 39
1146: PUSH
1147: LD_INT 1
1149: ST_TO_ADDR
// vc_weapon = 89 ;
1150: LD_ADDR_OWVAR 40
1154: PUSH
1155: LD_INT 89
1157: ST_TO_ADDR
// RuCargo1 = CreateVehicle ;
1158: LD_ADDR_EXP 70
1162: PUSH
1163: CALL_OW 45
1167: ST_TO_ADDR
// PlaceUnitArea ( RuCargo1 , TanksEnterArea , false ) ;
1168: LD_EXP 70
1172: PPUSH
1173: LD_INT 25
1175: PPUSH
1176: LD_INT 0
1178: PPUSH
1179: CALL_OW 49
// SetCargo ( RuCargo1 , mat_siberit , 200 ) ;
1183: LD_EXP 70
1187: PPUSH
1188: LD_INT 3
1190: PPUSH
1191: LD_INT 200
1193: PPUSH
1194: CALL_OW 290
// PlaceHumanInUnit ( Jegor , RuCargo1 ) ;
1198: LD_EXP 27
1202: PPUSH
1203: LD_EXP 70
1207: PPUSH
1208: CALL_OW 52
// vc_chassis = 22 ;
1212: LD_ADDR_OWVAR 37
1216: PUSH
1217: LD_INT 22
1219: ST_TO_ADDR
// vc_weapon = 51 ;
1220: LD_ADDR_OWVAR 40
1224: PUSH
1225: LD_INT 51
1227: ST_TO_ADDR
// RuCargo2 = CreateVehicle ;
1228: LD_ADDR_EXP 71
1232: PUSH
1233: CALL_OW 45
1237: ST_TO_ADDR
// PlaceUnitArea ( RuCargo2 , TanksEnterArea , false ) ;
1238: LD_EXP 71
1242: PPUSH
1243: LD_INT 25
1245: PPUSH
1246: LD_INT 0
1248: PPUSH
1249: CALL_OW 49
// SetCargo ( RuCargo2 , mat_cans , 100 ) ;
1253: LD_EXP 71
1257: PPUSH
1258: LD_INT 1
1260: PPUSH
1261: LD_INT 100
1263: PPUSH
1264: CALL_OW 290
// PlaceHumanInUnit ( Anton , RuCargo2 ) ;
1268: LD_EXP 29
1272: PPUSH
1273: LD_EXP 71
1277: PPUSH
1278: CALL_OW 52
// PlaceUnitArea ( Yakotich , EnterArea , false ) ;
1282: LD_EXP 13
1286: PPUSH
1287: LD_INT 3
1289: PPUSH
1290: LD_INT 0
1292: PPUSH
1293: CALL_OW 49
// PlaceUnitArea ( Mietek , EnterArea , false ) ;
1297: LD_EXP 14
1301: PPUSH
1302: LD_INT 3
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 49
// PlaceUnitArea ( Boris , EnterArea , false ) ;
1312: LD_EXP 15
1316: PPUSH
1317: LD_INT 3
1319: PPUSH
1320: LD_INT 0
1322: PPUSH
1323: CALL_OW 49
// PlaceUnitArea ( Vasilij , EnterArea , false ) ;
1327: LD_EXP 16
1331: PPUSH
1332: LD_INT 3
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 49
// PlaceUnitArea ( Constantin , EnterArea , false ) ;
1342: LD_EXP 18
1346: PPUSH
1347: LD_INT 3
1349: PPUSH
1350: LD_INT 0
1352: PPUSH
1353: CALL_OW 49
// PlaceUnitArea ( Maksim , EnterArea , false ) ;
1357: LD_EXP 19
1361: PPUSH
1362: LD_INT 3
1364: PPUSH
1365: LD_INT 0
1367: PPUSH
1368: CALL_OW 49
// PlaceUnitArea ( Fiodor , EnterArea , false ) ;
1372: LD_EXP 20
1376: PPUSH
1377: LD_INT 3
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL_OW 49
// PlaceUnitArea ( Zakhar , EnterArea , false ) ;
1387: LD_EXP 22
1391: PPUSH
1392: LD_INT 3
1394: PPUSH
1395: LD_INT 0
1397: PPUSH
1398: CALL_OW 49
// PlaceUnitArea ( Aleksiej , EnterArea , false ) ;
1402: LD_EXP 23
1406: PPUSH
1407: LD_INT 3
1409: PPUSH
1410: LD_INT 0
1412: PPUSH
1413: CALL_OW 49
// PlaceUnitArea ( Aleksandr , EnterArea , false ) ;
1417: LD_EXP 24
1421: PPUSH
1422: LD_INT 3
1424: PPUSH
1425: LD_INT 0
1427: PPUSH
1428: CALL_OW 49
// PlaceUnitArea ( Stanislav , EnterArea , false ) ;
1432: LD_EXP 26
1436: PPUSH
1437: LD_INT 3
1439: PPUSH
1440: LD_INT 0
1442: PPUSH
1443: CALL_OW 49
// PlaceUnitArea ( Josif , EnterArea , false ) ;
1447: LD_EXP 25
1451: PPUSH
1452: LD_INT 3
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// PlaceUnitArea ( Grigori , EnterArea , false ) ;
1462: LD_EXP 28
1466: PPUSH
1467: LD_INT 3
1469: PPUSH
1470: LD_INT 0
1472: PPUSH
1473: CALL_OW 49
// PlaceUnitArea ( Pavel , EnterArea , false ) ;
1477: LD_EXP 21
1481: PPUSH
1482: LD_INT 3
1484: PPUSH
1485: LD_INT 0
1487: PPUSH
1488: CALL_OW 49
// Natasza := PrepareUnit ( Natasza , false ,  ) ;
1492: LD_ADDR_EXP 37
1496: PUSH
1497: LD_STRING Natasza
1499: PPUSH
1500: LD_INT 0
1502: PPUSH
1503: LD_STRING 
1505: PPUSH
1506: CALL 12649 0 3
1510: ST_TO_ADDR
// Belkov2 := PrepareUnit ( Belkov2 , false ,  ) ;
1511: LD_ADDR_EXP 38
1515: PUSH
1516: LD_STRING Belkov2
1518: PPUSH
1519: LD_INT 0
1521: PPUSH
1522: LD_STRING 
1524: PPUSH
1525: CALL 12649 0 3
1529: ST_TO_ADDR
// Oblukov := PrepareUnit ( Oblukov , false ,  ) ;
1530: LD_ADDR_EXP 39
1534: PUSH
1535: LD_STRING Oblukov
1537: PPUSH
1538: LD_INT 0
1540: PPUSH
1541: LD_STRING 
1543: PPUSH
1544: CALL 12649 0 3
1548: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , false ,  ) ;
1549: LD_ADDR_EXP 40
1553: PUSH
1554: LD_STRING Kovalyuk
1556: PPUSH
1557: LD_INT 0
1559: PPUSH
1560: LD_STRING 
1562: PPUSH
1563: CALL 12649 0 3
1567: ST_TO_ADDR
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
1568: LD_ADDR_EXP 41
1572: PUSH
1573: LD_STRING Kozlov
1575: PPUSH
1576: LD_INT 0
1578: PPUSH
1579: LD_STRING 
1581: PPUSH
1582: CALL 12649 0 3
1586: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
1587: LD_EXP 37
1591: PPUSH
1592: LD_INT 18
1594: PPUSH
1595: LD_INT 0
1597: PPUSH
1598: CALL_OW 49
// ComTurnUnit ( Natasza , Yakotich ) ;
1602: LD_EXP 37
1606: PPUSH
1607: LD_EXP 13
1611: PPUSH
1612: CALL_OW 119
// PlaceHumanInUnit ( Belkov2 , b1 ) ;
1616: LD_EXP 38
1620: PPUSH
1621: LD_INT 319
1623: PPUSH
1624: CALL_OW 52
// PlaceHumanInUnit ( Oblukov , b2 ) ;
1628: LD_EXP 39
1632: PPUSH
1633: LD_INT 318
1635: PPUSH
1636: CALL_OW 52
// PlaceHumanInUnit ( Kovalyuk , w1 ) ;
1640: LD_EXP 40
1644: PPUSH
1645: LD_INT 313
1647: PPUSH
1648: CALL_OW 52
// PlaceHumanInUnit ( Kozlov , l1 ) ;
1652: LD_EXP 41
1656: PPUSH
1657: LD_INT 317
1659: PPUSH
1660: CALL_OW 52
// end ;
1664: LD_VAR 0 1
1668: RET
// export function InitBierezov ; begin
1669: LD_INT 0
1671: PPUSH
// Uc_Side = 4 ;
1672: LD_ADDR_OWVAR 20
1676: PUSH
1677: LD_INT 4
1679: ST_TO_ADDR
// Bierezov := PrepareUnit ( Bierezov , false ,  ) ;
1680: LD_ADDR_EXP 42
1684: PUSH
1685: LD_STRING Bierezov
1687: PPUSH
1688: LD_INT 0
1690: PPUSH
1691: LD_STRING 
1693: PPUSH
1694: CALL 12649 0 3
1698: ST_TO_ADDR
// Sharonov := PrepareUnit ( Sharonov , false ,  ) ;
1699: LD_ADDR_EXP 43
1703: PUSH
1704: LD_STRING Sharonov
1706: PPUSH
1707: LD_INT 0
1709: PPUSH
1710: LD_STRING 
1712: PPUSH
1713: CALL 12649 0 3
1717: ST_TO_ADDR
// Lesov := PrepareUnit ( Lesov , false ,  ) ;
1718: LD_ADDR_EXP 44
1722: PUSH
1723: LD_STRING Lesov
1725: PPUSH
1726: LD_INT 0
1728: PPUSH
1729: LD_STRING 
1731: PPUSH
1732: CALL 12649 0 3
1736: ST_TO_ADDR
// Aleinik := PrepareUnit ( Aleinik , false ,  ) ;
1737: LD_ADDR_EXP 45
1741: PUSH
1742: LD_STRING Aleinik
1744: PPUSH
1745: LD_INT 0
1747: PPUSH
1748: LD_STRING 
1750: PPUSH
1751: CALL 12649 0 3
1755: ST_TO_ADDR
// Korotajev := PrepareUnit ( Korotajev , false ,  ) ;
1756: LD_ADDR_EXP 46
1760: PUSH
1761: LD_STRING Korotajev
1763: PPUSH
1764: LD_INT 0
1766: PPUSH
1767: LD_STRING 
1769: PPUSH
1770: CALL 12649 0 3
1774: ST_TO_ADDR
// Bautin := PrepareUnit ( Bautin , false ,  ) ;
1775: LD_ADDR_EXP 47
1779: PUSH
1780: LD_STRING Bautin
1782: PPUSH
1783: LD_INT 0
1785: PPUSH
1786: LD_STRING 
1788: PPUSH
1789: CALL 12649 0 3
1793: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , EnterArea , false ) ;
1794: LD_EXP 42
1798: PPUSH
1799: LD_INT 3
1801: PPUSH
1802: LD_INT 0
1804: PPUSH
1805: CALL_OW 49
// PlaceUnitArea ( Sharonov , EnterArea , false ) ;
1809: LD_EXP 43
1813: PPUSH
1814: LD_INT 3
1816: PPUSH
1817: LD_INT 0
1819: PPUSH
1820: CALL_OW 49
// PlaceUnitArea ( Lesov , EnterArea , false ) ;
1824: LD_EXP 44
1828: PPUSH
1829: LD_INT 3
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// PlaceUnitArea ( Aleinik , EnterArea , false ) ;
1839: LD_EXP 45
1843: PPUSH
1844: LD_INT 3
1846: PPUSH
1847: LD_INT 0
1849: PPUSH
1850: CALL_OW 49
// PlaceUnitArea ( Korotajev , EnterArea , false ) ;
1854: LD_EXP 46
1858: PPUSH
1859: LD_INT 3
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL_OW 49
// PlaceUnitArea ( Bautin , EnterArea , false ) ;
1869: LD_EXP 47
1873: PPUSH
1874: LD_INT 3
1876: PPUSH
1877: LD_INT 0
1879: PPUSH
1880: CALL_OW 49
// BierezovCrew := BierezovCrew ^ Sharonov ^ Lesov ^ Aleinik ^ Korotajev ^ Bautin ;
1884: LD_ADDR_EXP 2
1888: PUSH
1889: LD_EXP 2
1893: PUSH
1894: LD_EXP 43
1898: ADD
1899: PUSH
1900: LD_EXP 44
1904: ADD
1905: PUSH
1906: LD_EXP 45
1910: ADD
1911: PUSH
1912: LD_EXP 46
1916: ADD
1917: PUSH
1918: LD_EXP 47
1922: ADD
1923: ST_TO_ADDR
// end ;
1924: LD_VAR 0 1
1928: RET
// export function InitMiotacz ; begin
1929: LD_INT 0
1931: PPUSH
// if LoadVariable ( 03_FlameSaved , 1 ) then
1932: LD_STRING 03_FlameSaved
1934: PPUSH
1935: LD_INT 1
1937: PPUSH
1938: CALL_OW 30
1942: IFFALSE 2039
// begin Uc_Side = 3 ;
1944: LD_ADDR_OWVAR 20
1948: PUSH
1949: LD_INT 3
1951: ST_TO_ADDR
// Uc_Nation = 2 ;
1952: LD_ADDR_OWVAR 21
1956: PUSH
1957: LD_INT 2
1959: ST_TO_ADDR
// Uc_Direction = 2 ;
1960: LD_ADDR_OWVAR 24
1964: PUSH
1965: LD_INT 2
1967: ST_TO_ADDR
// Vc_Chassis = 14 ;
1968: LD_ADDR_OWVAR 37
1972: PUSH
1973: LD_INT 14
1975: ST_TO_ADDR
// Vc_Control = 1 ;
1976: LD_ADDR_OWVAR 38
1980: PUSH
1981: LD_INT 1
1983: ST_TO_ADDR
// Vc_Engine = 1 ;
1984: LD_ADDR_OWVAR 39
1988: PUSH
1989: LD_INT 1
1991: ST_TO_ADDR
// Vc_Weapon = 26 ;
1992: LD_ADDR_OWVAR 40
1996: PUSH
1997: LD_INT 26
1999: ST_TO_ADDR
// Tank := CreateVehicle ;
2000: LD_ADDR_EXP 34
2004: PUSH
2005: CALL_OW 45
2009: ST_TO_ADDR
// PlaceUnitArea ( Tank , TanksEnterArea , false ) ;
2010: LD_EXP 34
2014: PPUSH
2015: LD_INT 25
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// PlaceHumanInUnit ( Michail , Tank ) ;
2025: LD_EXP 17
2029: PPUSH
2030: LD_EXP 34
2034: PPUSH
2035: CALL_OW 52
// end ; end ;
2039: LD_VAR 0 1
2043: RET
// export BierezovEngineers ; export function InitBierezovPersonel ; var i ; begin
2044: LD_INT 0
2046: PPUSH
2047: PPUSH
// Hc_Gallery :=  ;
2048: LD_ADDR_OWVAR 33
2052: PUSH
2053: LD_STRING 
2055: ST_TO_ADDR
// Hc_Name :=  ;
2056: LD_ADDR_OWVAR 26
2060: PUSH
2061: LD_STRING 
2063: ST_TO_ADDR
// Uc_Side := 4 ;
2064: LD_ADDR_OWVAR 20
2068: PUSH
2069: LD_INT 4
2071: ST_TO_ADDR
// BierezovNewCrew := [ ] ;
2072: LD_ADDR_EXP 3
2076: PUSH
2077: EMPTY
2078: ST_TO_ADDR
// for i = 1 to 6 do
2079: LD_ADDR_VAR 0 2
2083: PUSH
2084: DOUBLE
2085: LD_INT 1
2087: DEC
2088: ST_TO_ADDR
2089: LD_INT 6
2091: PUSH
2092: FOR_TO
2093: IFFALSE 2148
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2095: LD_INT 0
2097: PPUSH
2098: LD_INT 1
2100: PPUSH
2101: CALL_OW 12
2105: PPUSH
2106: LD_INT 5
2108: PUSH
2109: LD_INT 4
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PUSH
2120: LD_OWVAR 67
2124: ARRAY
2125: PPUSH
2126: CALL_OW 381
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2130: LD_ADDR_EXP 3
2134: PUSH
2135: LD_EXP 3
2139: PUSH
2140: CALL_OW 44
2144: ADD
2145: ST_TO_ADDR
// end ;
2146: GO 2092
2148: POP
2149: POP
// for i = 1 to 2 do
2150: LD_ADDR_VAR 0 2
2154: PUSH
2155: DOUBLE
2156: LD_INT 1
2158: DEC
2159: ST_TO_ADDR
2160: LD_INT 2
2162: PUSH
2163: FOR_TO
2164: IFFALSE 2219
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2166: LD_INT 0
2168: PPUSH
2169: LD_INT 1
2171: PPUSH
2172: CALL_OW 12
2176: PPUSH
2177: LD_INT 5
2179: PUSH
2180: LD_INT 4
2182: PUSH
2183: LD_INT 3
2185: PUSH
2186: EMPTY
2187: LIST
2188: LIST
2189: LIST
2190: PUSH
2191: LD_OWVAR 67
2195: ARRAY
2196: PPUSH
2197: CALL_OW 382
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2201: LD_ADDR_EXP 3
2205: PUSH
2206: LD_EXP 3
2210: PUSH
2211: CALL_OW 44
2215: ADD
2216: ST_TO_ADDR
// end ;
2217: GO 2163
2219: POP
2220: POP
// BierezovNewCrew := BierezovNewCrew ^ BierezovEngineers ;
2221: LD_ADDR_EXP 3
2225: PUSH
2226: LD_EXP 3
2230: PUSH
2231: LD_EXP 72
2235: ADD
2236: ST_TO_ADDR
// for i = 1 to 2 do
2237: LD_ADDR_VAR 0 2
2241: PUSH
2242: DOUBLE
2243: LD_INT 1
2245: DEC
2246: ST_TO_ADDR
2247: LD_INT 2
2249: PUSH
2250: FOR_TO
2251: IFFALSE 2306
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2253: LD_INT 0
2255: PPUSH
2256: LD_INT 1
2258: PPUSH
2259: CALL_OW 12
2263: PPUSH
2264: LD_INT 5
2266: PUSH
2267: LD_INT 4
2269: PUSH
2270: LD_INT 3
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: LIST
2277: PUSH
2278: LD_OWVAR 67
2282: ARRAY
2283: PPUSH
2284: CALL_OW 383
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2288: LD_ADDR_EXP 3
2292: PUSH
2293: LD_EXP 3
2297: PUSH
2298: CALL_OW 44
2302: ADD
2303: ST_TO_ADDR
// end ;
2304: GO 2250
2306: POP
2307: POP
// for i = 1 to 1 do
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: DOUBLE
2314: LD_INT 1
2316: DEC
2317: ST_TO_ADDR
2318: LD_INT 1
2320: PUSH
2321: FOR_TO
2322: IFFALSE 2377
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 1
2329: PPUSH
2330: CALL_OW 12
2334: PPUSH
2335: LD_INT 5
2337: PUSH
2338: LD_INT 4
2340: PUSH
2341: LD_INT 3
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: LIST
2348: PUSH
2349: LD_OWVAR 67
2353: ARRAY
2354: PPUSH
2355: CALL_OW 384
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2359: LD_ADDR_EXP 3
2363: PUSH
2364: LD_EXP 3
2368: PUSH
2369: CALL_OW 44
2373: ADD
2374: ST_TO_ADDR
// end ;
2375: GO 2321
2377: POP
2378: POP
// for i in BierezovNewCrew do
2379: LD_ADDR_VAR 0 2
2383: PUSH
2384: LD_EXP 3
2388: PUSH
2389: FOR_IN
2390: IFFALSE 2497
// begin case GetClass ( i ) of 1 :
2392: LD_VAR 0 2
2396: PPUSH
2397: CALL_OW 257
2401: PUSH
2402: LD_INT 1
2404: DOUBLE
2405: EQUAL
2406: IFTRUE 2410
2408: GO 2425
2410: POP
// PlaceHumanInUnit ( i , LArmor1 ) ; 2 :
2411: LD_VAR 0 2
2415: PPUSH
2416: LD_INT 279
2418: PPUSH
2419: CALL_OW 52
2423: GO 2495
2425: LD_INT 2
2427: DOUBLE
2428: EQUAL
2429: IFTRUE 2433
2431: GO 2448
2433: POP
// PlaceHumanInUnit ( i , LArmor2 ) ; 3 :
2434: LD_VAR 0 2
2438: PPUSH
2439: LD_INT 278
2441: PPUSH
2442: CALL_OW 52
2446: GO 2495
2448: LD_INT 3
2450: DOUBLE
2451: EQUAL
2452: IFTRUE 2456
2454: GO 2471
2456: POP
// PlaceHumanInUnit ( i , LArmor2 ) ; 4 :
2457: LD_VAR 0 2
2461: PPUSH
2462: LD_INT 278
2464: PPUSH
2465: CALL_OW 52
2469: GO 2495
2471: LD_INT 4
2473: DOUBLE
2474: EQUAL
2475: IFTRUE 2479
2477: GO 2494
2479: POP
// PlaceHumanInUnit ( i , LArmor2 ) ; end ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_INT 278
2487: PPUSH
2488: CALL_OW 52
2492: GO 2495
2494: POP
// end ;
2495: GO 2389
2497: POP
2498: POP
// end ;
2499: LD_VAR 0 1
2503: RET
// export function InitPompa ; begin
2504: LD_INT 0
2506: PPUSH
// Uc_Side = 6 ;
2507: LD_ADDR_OWVAR 20
2511: PUSH
2512: LD_INT 6
2514: ST_TO_ADDR
// Pompa := PrepareUnit ( Pompa , false ,  ) ;
2515: LD_ADDR_EXP 48
2519: PUSH
2520: LD_STRING Pompa
2522: PPUSH
2523: LD_INT 0
2525: PPUSH
2526: LD_STRING 
2528: PPUSH
2529: CALL 12649 0 3
2533: ST_TO_ADDR
// Petrov := PrepareUnit ( Petrov , false ,  ) ;
2534: LD_ADDR_EXP 50
2538: PUSH
2539: LD_STRING Petrov
2541: PPUSH
2542: LD_INT 0
2544: PPUSH
2545: LD_STRING 
2547: PPUSH
2548: CALL 12649 0 3
2552: ST_TO_ADDR
// Konajev := PrepareUnit ( Konajev , false ,  ) ;
2553: LD_ADDR_EXP 51
2557: PUSH
2558: LD_STRING Konajev
2560: PPUSH
2561: LD_INT 0
2563: PPUSH
2564: LD_STRING 
2566: PPUSH
2567: CALL 12649 0 3
2571: ST_TO_ADDR
// Smirnov := PrepareUnit ( Smirnov , false ,  ) ;
2572: LD_ADDR_EXP 49
2576: PUSH
2577: LD_STRING Smirnov
2579: PPUSH
2580: LD_INT 0
2582: PPUSH
2583: LD_STRING 
2585: PPUSH
2586: CALL 12649 0 3
2590: ST_TO_ADDR
// Radenko := PrepareUnit ( Radenko , false ,  ) ;
2591: LD_ADDR_EXP 52
2595: PUSH
2596: LD_STRING Radenko
2598: PPUSH
2599: LD_INT 0
2601: PPUSH
2602: LD_STRING 
2604: PPUSH
2605: CALL 12649 0 3
2609: ST_TO_ADDR
// PompaCrew := PompaCrew ^ Pompa ^ Petrov ^ Konajev ^ Smirnov ^ Radenko ;
2610: LD_ADDR_EXP 4
2614: PUSH
2615: LD_EXP 4
2619: PUSH
2620: LD_EXP 48
2624: ADD
2625: PUSH
2626: LD_EXP 50
2630: ADD
2631: PUSH
2632: LD_EXP 51
2636: ADD
2637: PUSH
2638: LD_EXP 49
2642: ADD
2643: PUSH
2644: LD_EXP 52
2648: ADD
2649: ST_TO_ADDR
// PlaceUnitArea ( Pompa , EnterArea , false ) ;
2650: LD_EXP 48
2654: PPUSH
2655: LD_INT 3
2657: PPUSH
2658: LD_INT 0
2660: PPUSH
2661: CALL_OW 49
// PlaceUnitArea ( Petrov , EnterArea , false ) ;
2665: LD_EXP 50
2669: PPUSH
2670: LD_INT 3
2672: PPUSH
2673: LD_INT 0
2675: PPUSH
2676: CALL_OW 49
// PlaceUnitArea ( Konajev , EnterArea , false ) ;
2680: LD_EXP 51
2684: PPUSH
2685: LD_INT 3
2687: PPUSH
2688: LD_INT 0
2690: PPUSH
2691: CALL_OW 49
// PlaceUnitArea ( Smirnov , EnterArea , false ) ;
2695: LD_EXP 49
2699: PPUSH
2700: LD_INT 3
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 49
// PlaceUnitArea ( Radenko , EnterArea , false ) ;
2710: LD_EXP 52
2714: PPUSH
2715: LD_INT 3
2717: PPUSH
2718: LD_INT 0
2720: PPUSH
2721: CALL_OW 49
// end ; end_of_file
2725: LD_VAR 0 1
2729: RET
// export function Action ; begin
2730: LD_INT 0
2732: PPUSH
// InGameOn ;
2733: CALL_OW 8
// ComTurnXY ( Janusz , 133 , 27 ) ;
2737: LD_INT 420
2739: PPUSH
2740: LD_INT 133
2742: PPUSH
2743: LD_INT 27
2745: PPUSH
2746: CALL_OW 118
// ComTurnXY ( Livid , 293 , 225 ) ;
2750: LD_INT 470
2752: PPUSH
2753: LD_INT 293
2755: PPUSH
2756: LD_INT 225
2758: PPUSH
2759: CALL_OW 118
// if LoadVariable ( 03_FlameSaved , 1 ) then
2763: LD_STRING 03_FlameSaved
2765: PPUSH
2766: LD_INT 1
2768: PPUSH
2769: CALL_OW 30
2773: IFFALSE 2791
// PlaceHumanInUnit ( Michail , Tank ) else
2775: LD_EXP 17
2779: PPUSH
2780: LD_EXP 34
2784: PPUSH
2785: CALL_OW 52
2789: GO 2806
// PlaceUnitArea ( Michail , EnterArea , false ) ;
2791: LD_EXP 17
2795: PPUSH
2796: LD_INT 3
2798: PPUSH
2799: LD_INT 0
2801: PPUSH
2802: CALL_OW 49
// RevealFogArea ( 3 , RevealArea ) ;
2806: LD_INT 3
2808: PPUSH
2809: LD_INT 20
2811: PPUSH
2812: CALL_OW 332
// RevealFogArea ( 3 , ArRevealArea ) ;
2816: LD_INT 3
2818: PPUSH
2819: LD_INT 21
2821: PPUSH
2822: CALL_OW 332
// RevealFogArea ( 3 , BukovBaseArea ) ;
2826: LD_INT 3
2828: PPUSH
2829: LD_INT 7
2831: PPUSH
2832: CALL_OW 332
// Say ( Yakotich , 4Yak-01 ) ;
2836: LD_EXP 13
2840: PPUSH
2841: LD_STRING 4Yak-01
2843: PPUSH
2844: CALL_OW 88
// ComMoveXY ( YakotichCrew , 41 , 17 ) ;
2848: LD_EXP 1
2852: PPUSH
2853: LD_INT 41
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 111
// ComMoveXY ( Yakotich , 41 , 17 ) ;
2863: LD_EXP 13
2867: PPUSH
2868: LD_INT 41
2870: PPUSH
2871: LD_INT 17
2873: PPUSH
2874: CALL_OW 111
// ComMoveXY ( Mietek , 41 , 17 ) ;
2878: LD_EXP 14
2882: PPUSH
2883: LD_INT 41
2885: PPUSH
2886: LD_INT 17
2888: PPUSH
2889: CALL_OW 111
// AddComMoveXY ( YakotichCrew , 130 , 105 ) ;
2893: LD_EXP 1
2897: PPUSH
2898: LD_INT 130
2900: PPUSH
2901: LD_INT 105
2903: PPUSH
2904: CALL_OW 171
// AddComMoveXY ( Yakotich , 130 , 105 ) ;
2908: LD_EXP 13
2912: PPUSH
2913: LD_INT 130
2915: PPUSH
2916: LD_INT 105
2918: PPUSH
2919: CALL_OW 171
// AddComMoveXY ( Mietek , 130 , 105 ) ;
2923: LD_EXP 14
2927: PPUSH
2928: LD_INT 130
2930: PPUSH
2931: LD_INT 105
2933: PPUSH
2934: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 77 , 93 ) ;
2938: LD_EXP 1
2942: PPUSH
2943: LD_INT 77
2945: PPUSH
2946: LD_INT 93
2948: PPUSH
2949: CALL_OW 171
// AddComMoveToArea ( [ Stanislav , Vasilij ] , HGCheckArea ) ;
2953: LD_EXP 26
2957: PUSH
2958: LD_EXP 16
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: LD_INT 22
2969: PPUSH
2970: CALL_OW 173
// AddComTurnXY ( [ Vasilij , Stanislav ] , 75 , 86 ) ;
2974: LD_EXP 16
2978: PUSH
2979: LD_EXP 26
2983: PUSH
2984: EMPTY
2985: LIST
2986: LIST
2987: PPUSH
2988: LD_INT 75
2990: PPUSH
2991: LD_INT 86
2993: PPUSH
2994: CALL_OW 178
// AddComMoveToArea ( Yakotich , YakTalk1 ) ;
2998: LD_EXP 13
3002: PPUSH
3003: LD_INT 23
3005: PPUSH
3006: CALL_OW 173
// AddComMoveXY ( Mietek , 73 , 98 ) ;
3010: LD_EXP 14
3014: PPUSH
3015: LD_INT 73
3017: PPUSH
3018: LD_INT 98
3020: PPUSH
3021: CALL_OW 171
// AddComTurnXY ( [ Yakotich , Mietek ] , 70 , 99 ) ;
3025: LD_EXP 13
3029: PUSH
3030: LD_EXP 14
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PPUSH
3039: LD_INT 70
3041: PPUSH
3042: LD_INT 99
3044: PPUSH
3045: CALL_OW 178
// end ;
3049: LD_VAR 0 1
3053: RET
// every 0 0$1 trigger IsInArea ( Yakotich , YakTalk1 ) do
3054: LD_EXP 13
3058: PPUSH
3059: LD_INT 23
3061: PPUSH
3062: CALL_OW 308
3066: IFFALSE 3893
3068: GO 3070
3070: DISABLE
// begin Say ( Yakotich , 4Yak-02 ) ;
3071: LD_EXP 13
3075: PPUSH
3076: LD_STRING 4Yak-02
3078: PPUSH
3079: CALL_OW 88
// Say ( Morozov , 4Moro-01 ) ;
3083: LD_EXP 53
3087: PPUSH
3088: LD_STRING 4Moro-01
3090: PPUSH
3091: CALL_OW 88
// Say ( Yakotich , 4Yak-03 ) ;
3095: LD_EXP 13
3099: PPUSH
3100: LD_STRING 4Yak-03
3102: PPUSH
3103: CALL_OW 88
// Say ( Morozov , 4Moro-02 ) ;
3107: LD_EXP 53
3111: PPUSH
3112: LD_STRING 4Moro-02
3114: PPUSH
3115: CALL_OW 88
// SetSide ( [ Vasilij , Stanislav ] , 6 ) ;
3119: LD_EXP 16
3123: PUSH
3124: LD_EXP 26
3128: PUSH
3129: EMPTY
3130: LIST
3131: LIST
3132: PPUSH
3133: LD_INT 6
3135: PPUSH
3136: CALL_OW 235
// ComEnterUnit ( [ Vasilij , Stanislav ] , L1L1 ) ;
3140: LD_EXP 16
3144: PUSH
3145: LD_EXP 26
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PPUSH
3154: LD_INT 43
3156: PPUSH
3157: CALL_OW 120
// Say ( Morozov , 4Moro-03 ) ;
3161: LD_EXP 53
3165: PPUSH
3166: LD_STRING 4Moro-03
3168: PPUSH
3169: CALL_OW 88
// ComMoveXY ( Grigori , 74 , 102 ) ;
3173: LD_EXP 28
3177: PPUSH
3178: LD_INT 74
3180: PPUSH
3181: LD_INT 102
3183: PPUSH
3184: CALL_OW 111
// Say ( Grigori , 4Grig-01 ) ;
3188: LD_EXP 28
3192: PPUSH
3193: LD_STRING 4Grig-01
3195: PPUSH
3196: CALL_OW 88
// Say ( Morozov , 4Moro-04 ) ;
3200: LD_EXP 53
3204: PPUSH
3205: LD_STRING 4Moro-04
3207: PPUSH
3208: CALL_OW 88
// Say ( Grigori , 4Grig-02 ) ;
3212: LD_EXP 28
3216: PPUSH
3217: LD_STRING 4Grig-02
3219: PPUSH
3220: CALL_OW 88
// Say ( Popov , 4Popov-01 ) ;
3224: LD_EXP 55
3228: PPUSH
3229: LD_STRING 4Popov-01
3231: PPUSH
3232: CALL_OW 88
// SetSide ( Grigori , 6 ) ;
3236: LD_EXP 28
3240: PPUSH
3241: LD_INT 6
3243: PPUSH
3244: CALL_OW 235
// ComEnterUnit ( Grigori , L1L1 ) ;
3248: LD_EXP 28
3252: PPUSH
3253: LD_INT 43
3255: PPUSH
3256: CALL_OW 120
// Say ( Yakotich , 4Yak-04 ) ;
3260: LD_EXP 13
3264: PPUSH
3265: LD_STRING 4Yak-04
3267: PPUSH
3268: CALL_OW 88
// Say ( Popov , 4Popov-02 ) ;
3272: LD_EXP 55
3276: PPUSH
3277: LD_STRING 4Popov-02
3279: PPUSH
3280: CALL_OW 88
// Say ( Yakotich , 4Yak-05 ) ;
3284: LD_EXP 13
3288: PPUSH
3289: LD_STRING 4Yak-05
3291: PPUSH
3292: CALL_OW 88
// Say ( Morozov , 4Moro-05 ) ;
3296: LD_EXP 53
3300: PPUSH
3301: LD_STRING 4Moro-05
3303: PPUSH
3304: CALL_OW 88
// Say ( Morozov , 4Moro-06 ) ;
3308: LD_EXP 53
3312: PPUSH
3313: LD_STRING 4Moro-06
3315: PPUSH
3316: CALL_OW 88
// Say ( Popov , 4Popov-03 ) ;
3320: LD_EXP 55
3324: PPUSH
3325: LD_STRING 4Popov-03
3327: PPUSH
3328: CALL_OW 88
// Say ( Popov , 4Popov-04 ) ;
3332: LD_EXP 55
3336: PPUSH
3337: LD_STRING 4Popov-04
3339: PPUSH
3340: CALL_OW 88
// ComExitBuilding ( [ Vasilij , Stanislav ] ) ;
3344: LD_EXP 16
3348: PUSH
3349: LD_EXP 26
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PPUSH
3358: CALL_OW 122
// SetSide ( [ Vasilij , Stanislav ] , 3 ) ;
3362: LD_EXP 16
3366: PUSH
3367: LD_EXP 26
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: PPUSH
3376: LD_INT 3
3378: PPUSH
3379: CALL_OW 235
// ComMoveXY ( [ Vasilij , Stanislav ] , 73 , 89 ) ;
3383: LD_EXP 16
3387: PUSH
3388: LD_EXP 26
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PPUSH
3397: LD_INT 73
3399: PPUSH
3400: LD_INT 89
3402: PPUSH
3403: CALL_OW 111
// Say ( Yakotich , 4Yak-06 ) ;
3407: LD_EXP 13
3411: PPUSH
3412: LD_STRING 4Yak-06
3414: PPUSH
3415: CALL_OW 88
// Say ( Platonov , 4Plat-01 ) ;
3419: LD_EXP 54
3423: PPUSH
3424: LD_STRING 4Plat-01
3426: PPUSH
3427: CALL_OW 88
// Say ( Platonov , 4Plat-02 ) ;
3431: LD_EXP 54
3435: PPUSH
3436: LD_STRING 4Plat-02
3438: PPUSH
3439: CALL_OW 88
// Say ( Platonov , 4Plat-03 ) ;
3443: LD_EXP 54
3447: PPUSH
3448: LD_STRING 4Plat-03
3450: PPUSH
3451: CALL_OW 88
// if Difficulty = 4 then
3455: LD_OWVAR 67
3459: PUSH
3460: LD_INT 4
3462: EQUAL
3463: IFFALSE 3477
// begin Say ( Morozov , 4Moro-Units ) ;
3465: LD_EXP 53
3469: PPUSH
3470: LD_STRING 4Moro-Units
3472: PPUSH
3473: CALL_OW 88
// end ; Say ( Platonov , 4Plat-04 ) ;
3477: LD_EXP 54
3481: PPUSH
3482: LD_STRING 4Plat-04
3484: PPUSH
3485: CALL_OW 88
// Say ( Yakotich , 4Yak-07 ) ;
3489: LD_EXP 13
3493: PPUSH
3494: LD_STRING 4Yak-07
3496: PPUSH
3497: CALL_OW 88
// ComExitBuilding ( Grigori ) ;
3501: LD_EXP 28
3505: PPUSH
3506: CALL_OW 122
// SetSide ( Grigori , 3 ) ;
3510: LD_EXP 28
3514: PPUSH
3515: LD_INT 3
3517: PPUSH
3518: CALL_OW 235
// ComTurnUnit ( Grigori , Yakotich ) ;
3522: LD_EXP 28
3526: PPUSH
3527: LD_EXP 13
3531: PPUSH
3532: CALL_OW 119
// Say ( Grigori , 4Grig-03 ) ;
3536: LD_EXP 28
3540: PPUSH
3541: LD_STRING 4Grig-03
3543: PPUSH
3544: CALL_OW 88
// AddComMoveXY ( YakotichCrew , 117 , 162 ) ;
3548: LD_EXP 1
3552: PPUSH
3553: LD_INT 117
3555: PPUSH
3556: LD_INT 162
3558: PPUSH
3559: CALL_OW 171
// ComMoveXY ( [ RuCargo1 , RuCargo2 ] , 157 , 232 ) ;
3563: LD_EXP 70
3567: PUSH
3568: LD_EXP 71
3572: PUSH
3573: EMPTY
3574: LIST
3575: LIST
3576: PPUSH
3577: LD_INT 157
3579: PPUSH
3580: LD_INT 232
3582: PPUSH
3583: CALL_OW 111
// AddComMoveXY ( Yakotich , 117 , 162 ) ;
3587: LD_EXP 13
3591: PPUSH
3592: LD_INT 117
3594: PPUSH
3595: LD_INT 162
3597: PPUSH
3598: CALL_OW 171
// AddComMoveXY ( Mietek , 117 , 162 ) ;
3602: LD_EXP 14
3606: PPUSH
3607: LD_INT 117
3609: PPUSH
3610: LD_INT 162
3612: PPUSH
3613: CALL_OW 171
// ComEnterUnit ( [ Morozov , Platonov , Popov ] , MorozovBase ) ;
3617: LD_EXP 53
3621: PUSH
3622: LD_EXP 54
3626: PUSH
3627: LD_EXP 55
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: PPUSH
3637: LD_INT 348
3639: PPUSH
3640: CALL_OW 120
// AddComMoveXY ( YakotichCrew , 138 , 168 ) ;
3644: LD_EXP 1
3648: PPUSH
3649: LD_INT 138
3651: PPUSH
3652: LD_INT 168
3654: PPUSH
3655: CALL_OW 171
// AddComMoveXY ( Yakotich , 138 , 168 ) ;
3659: LD_EXP 13
3663: PPUSH
3664: LD_INT 138
3666: PPUSH
3667: LD_INT 168
3669: PPUSH
3670: CALL_OW 171
// AddComMoveXY ( Mietek , 138 , 168 ) ;
3674: LD_EXP 14
3678: PPUSH
3679: LD_INT 138
3681: PPUSH
3682: LD_INT 168
3684: PPUSH
3685: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 142 , 199 ) ;
3689: LD_EXP 1
3693: PPUSH
3694: LD_INT 142
3696: PPUSH
3697: LD_INT 199
3699: PPUSH
3700: CALL_OW 171
// AddComMoveXY ( Yakotich , 142 , 199 ) ;
3704: LD_EXP 13
3708: PPUSH
3709: LD_INT 142
3711: PPUSH
3712: LD_INT 199
3714: PPUSH
3715: CALL_OW 171
// AddComMoveXY ( Mietek , 142 , 199 ) ;
3719: LD_EXP 14
3723: PPUSH
3724: LD_INT 142
3726: PPUSH
3727: LD_INT 199
3729: PPUSH
3730: CALL_OW 171
// AddComMoveXY ( YakotichCrew , 157 , 232 ) ;
3734: LD_EXP 1
3738: PPUSH
3739: LD_INT 157
3741: PPUSH
3742: LD_INT 232
3744: PPUSH
3745: CALL_OW 171
// AddComMoveToArea ( Yakotich , YakTalk2 ) ;
3749: LD_EXP 13
3753: PPUSH
3754: LD_INT 24
3756: PPUSH
3757: CALL_OW 173
// AddComMoveXY ( Mietek , 167 , 240 ) ;
3761: LD_EXP 14
3765: PPUSH
3766: LD_INT 167
3768: PPUSH
3769: LD_INT 240
3771: PPUSH
3772: CALL_OW 171
// AddComTurnUnit ( [ Yakotich , Mietek ] , Natasza ) ;
3776: LD_EXP 13
3780: PUSH
3781: LD_EXP 14
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: PPUSH
3790: LD_EXP 37
3794: PPUSH
3795: CALL_OW 179
// if Difficulty = 4 then
3799: LD_OWVAR 67
3803: PUSH
3804: LD_INT 4
3806: EQUAL
3807: IFFALSE 3893
// begin SetSide ( [ Constantin , Josif , Aleksiej , Pavel , Zakhar ] , 6 ) ;
3809: LD_EXP 18
3813: PUSH
3814: LD_EXP 25
3818: PUSH
3819: LD_EXP 23
3823: PUSH
3824: LD_EXP 21
3828: PUSH
3829: LD_EXP 22
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: PPUSH
3841: LD_INT 6
3843: PPUSH
3844: CALL_OW 235
// ComEnterUnit ( [ Constantin , Josif , Aleksiej , Zakhar ] , SB1 ) ;
3848: LD_EXP 18
3852: PUSH
3853: LD_EXP 25
3857: PUSH
3858: LD_EXP 23
3862: PUSH
3863: LD_EXP 22
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: PPUSH
3874: LD_INT 430
3876: PPUSH
3877: CALL_OW 120
// ComEnterUnit ( Pavel , SW1 ) ;
3881: LD_EXP 21
3885: PPUSH
3886: LD_INT 435
3888: PPUSH
3889: CALL_OW 120
// end ; end ;
3893: END
// every 0 0$1 trigger IsInArea ( Yakotich , YakTalk2 ) do
3894: LD_EXP 13
3898: PPUSH
3899: LD_INT 24
3901: PPUSH
3902: CALL_OW 308
3906: IFFALSE 4185
3908: GO 3910
3910: DISABLE
// begin Say ( Natasza , 4Nati-01 ) ;
3911: LD_EXP 37
3915: PPUSH
3916: LD_STRING 4Nati-01
3918: PPUSH
3919: CALL_OW 88
// Say ( Yakotich , 4Yak-09 ) ;
3923: LD_EXP 13
3927: PPUSH
3928: LD_STRING 4Yak-09
3930: PPUSH
3931: CALL_OW 88
// Say ( Natasza , 4Nati-02 ) ;
3935: LD_EXP 37
3939: PPUSH
3940: LD_STRING 4Nati-02
3942: PPUSH
3943: CALL_OW 88
// Say ( Natasza , 4Nati-03 ) ;
3947: LD_EXP 37
3951: PPUSH
3952: LD_STRING 4Nati-03
3954: PPUSH
3955: CALL_OW 88
// Say ( Natasza , 4Nati-04 ) ;
3959: LD_EXP 37
3963: PPUSH
3964: LD_STRING 4Nati-04
3966: PPUSH
3967: CALL_OW 88
// Say ( Yakotich , 4Yak-10 ) ;
3971: LD_EXP 13
3975: PPUSH
3976: LD_STRING 4Yak-10
3978: PPUSH
3979: CALL_OW 88
// Say ( Natasza , 4Nati-05 ) ;
3983: LD_EXP 37
3987: PPUSH
3988: LD_STRING 4Nati-05
3990: PPUSH
3991: CALL_OW 88
// ComMoveXY ( Stanislav , 167 , 238 ) ;
3995: LD_EXP 26
3999: PPUSH
4000: LD_INT 167
4002: PPUSH
4003: LD_INT 238
4005: PPUSH
4006: CALL_OW 111
// AddComTurnUnit ( Stanislav , Natasza ) ;
4010: LD_EXP 26
4014: PPUSH
4015: LD_EXP 37
4019: PPUSH
4020: CALL_OW 179
// Say ( Stanislav , 4Stan-01 ) ;
4024: LD_EXP 26
4028: PPUSH
4029: LD_STRING 4Stan-01
4031: PPUSH
4032: CALL_OW 88
// Say ( Yakotich , 4Yak-11 ) ;
4036: LD_EXP 13
4040: PPUSH
4041: LD_STRING 4Yak-11
4043: PPUSH
4044: CALL_OW 88
// Say ( Natasza , 4Nati-06 ) ;
4048: LD_EXP 37
4052: PPUSH
4053: LD_STRING 4Nati-06
4055: PPUSH
4056: CALL_OW 88
// Say ( Mietek , 4Mietek-03 ) ;
4060: LD_EXP 14
4064: PPUSH
4065: LD_STRING 4Mietek-03
4067: PPUSH
4068: CALL_OW 88
// Say ( Yakotich , 4Yak-12 ) ;
4072: LD_EXP 13
4076: PPUSH
4077: LD_STRING 4Yak-12
4079: PPUSH
4080: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
4084: LD_STRING o1
4086: PPUSH
4087: CALL_OW 337
// start_ended = true ;
4091: LD_ADDR_EXP 62
4095: PUSH
4096: LD_INT 1
4098: ST_TO_ADDR
// SayRadio ( Yakotich , 4Yak-Sib-01 ) ;
4099: LD_EXP 13
4103: PPUSH
4104: LD_STRING 4Yak-Sib-01
4106: PPUSH
4107: CALL_OW 94
// SayRadio ( Morozov , 4Moro-Sib-01 ) ;
4111: LD_EXP 53
4115: PPUSH
4116: LD_STRING 4Moro-Sib-01
4118: PPUSH
4119: CALL_OW 94
// InGameOff ;
4123: CALL_OW 9
// if LoadVariable ( 03_FlameSaved , 1 ) then
4127: LD_STRING 03_FlameSaved
4129: PPUSH
4130: LD_INT 1
4132: PPUSH
4133: CALL_OW 30
4137: IFFALSE 4185
// begin Wait ( 0 0$15 ) ;
4139: LD_INT 525
4141: PPUSH
4142: CALL_OW 67
// DialogueOn ;
4146: CALL_OW 6
// Say ( Vasilij , 4Vas-Flame-01 ) ;
4150: LD_EXP 16
4154: PPUSH
4155: LD_STRING 4Vas-Flame-01
4157: PPUSH
4158: CALL_OW 88
// Say ( Vasilij , 4Vas-Flame-02 ) ;
4162: LD_EXP 16
4166: PPUSH
4167: LD_STRING 4Vas-Flame-02
4169: PPUSH
4170: CALL_OW 88
// ChangeMissionObjectives ( o2 ) ;
4174: LD_STRING o2
4176: PPUSH
4177: CALL_OW 337
// DialogueOff ;
4181: CALL_OW 7
// end ; end ;
4185: END
// every 0 0$1 trigger IsInArea ( Bierezov , NorthLeninArea ) do
4186: LD_EXP 42
4190: PPUSH
4191: LD_INT 5
4193: PPUSH
4194: CALL_OW 308
4198: IFFALSE 4388
4200: GO 4202
4202: DISABLE
// begin SetSide ( Bierezov , 6 ) ;
4203: LD_EXP 42
4207: PPUSH
4208: LD_INT 6
4210: PPUSH
4211: CALL_OW 235
// Wait ( 1 1$30 ) ;
4215: LD_INT 3150
4217: PPUSH
4218: CALL_OW 67
// ComExitBuilding ( Bierezov ) ;
4222: LD_EXP 42
4226: PPUSH
4227: CALL_OW 122
// ComExitBuilding ( BierezovNewCrew ) ;
4231: LD_EXP 3
4235: PPUSH
4236: CALL_OW 122
// SetSide ( Bierezov , 4 ) ;
4240: LD_EXP 42
4244: PPUSH
4245: LD_INT 4
4247: PPUSH
4248: CALL_OW 235
// BierezovCrew := BierezovCrew ^ BierezovNewCrew ;
4252: LD_ADDR_EXP 2
4256: PUSH
4257: LD_EXP 2
4261: PUSH
4262: LD_EXP 3
4266: ADD
4267: ST_TO_ADDR
// BierezovEngineers := BierezovEngineers ^ FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) ;
4268: LD_ADDR_EXP 72
4272: PUSH
4273: LD_EXP 72
4277: PUSH
4278: LD_INT 22
4280: PUSH
4281: LD_INT 4
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_INT 25
4290: PUSH
4291: LD_INT 2
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: PPUSH
4302: CALL_OW 69
4306: ADD
4307: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
4308: LD_INT 35
4310: PPUSH
4311: CALL_OW 67
// AddComMoveXY ( BierezovCrew , 82 , 54 ) ;
4315: LD_EXP 2
4319: PPUSH
4320: LD_INT 82
4322: PPUSH
4323: LD_INT 54
4325: PPUSH
4326: CALL_OW 171
// AddComMoveXY ( [ Sharonov , Korotajev ] , 87 , 34 ) ;
4330: LD_EXP 43
4334: PUSH
4335: LD_EXP 46
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: PPUSH
4344: LD_INT 87
4346: PPUSH
4347: LD_INT 34
4349: PPUSH
4350: CALL_OW 171
// AddComMoveXY ( Bierezov , 85 , 52 ) ;
4354: LD_EXP 42
4358: PPUSH
4359: LD_INT 85
4361: PPUSH
4362: LD_INT 52
4364: PPUSH
4365: CALL_OW 171
// AddComTurnXY ( Bierezov , 84 , 54 ) ;
4369: LD_EXP 42
4373: PPUSH
4374: LD_INT 84
4376: PPUSH
4377: LD_INT 54
4379: PPUSH
4380: CALL_OW 178
// BierezovAI ;
4384: CALL 5221 0 0
// end ;
4388: END
// every 0 0$1 trigger not PrepareTime do
4389: LD_EXP 59
4393: NOT
4394: IFFALSE 4582
4396: GO 4398
4398: DISABLE
// begin Wait ( 0 0$24 ) ;
4399: LD_INT 840
4401: PPUSH
4402: CALL_OW 67
// InGameOn ;
4406: CALL_OW 8
// DialogueOn ;
4410: CALL_OW 6
// SayRadio ( Pompa , 4Pompa-01 ) ;
4414: LD_EXP 48
4418: PPUSH
4419: LD_STRING 4Pompa-01
4421: PPUSH
4422: CALL_OW 94
// SayRadio ( Platonov , 4Plat-05 ) ;
4426: LD_EXP 54
4430: PPUSH
4431: LD_STRING 4Plat-05
4433: PPUSH
4434: CALL_OW 94
// SayRadio ( Pompa , 4Pompa-02 ) ;
4438: LD_EXP 48
4442: PPUSH
4443: LD_STRING 4Pompa-02
4445: PPUSH
4446: CALL_OW 94
// SayRadio ( Platonov , 4Plat-06 ) ;
4450: LD_EXP 54
4454: PPUSH
4455: LD_STRING 4Plat-06
4457: PPUSH
4458: CALL_OW 94
// SayRadio ( Platonov , 4Plat-07 ) ;
4462: LD_EXP 54
4466: PPUSH
4467: LD_STRING 4Plat-07
4469: PPUSH
4470: CALL_OW 94
// SayRadio ( Bukov , 4Bukov-01 ) ;
4474: LD_EXP 57
4478: PPUSH
4479: LD_STRING 4Bukov-01
4481: PPUSH
4482: CALL_OW 94
// SayRadio ( Platonov , 4Plat-08 ) ;
4486: LD_EXP 54
4490: PPUSH
4491: LD_STRING 4Plat-08
4493: PPUSH
4494: CALL_OW 94
// ChangeMissionObjectives ( o4 ) ;
4498: LD_STRING o4
4500: PPUSH
4501: CALL_OW 337
// InGameOff ;
4505: CALL_OW 9
// DialogueOff ;
4509: CALL_OW 7
// Wait ( 0 0$36 ) ;
4513: LD_INT 1260
4515: PPUSH
4516: CALL_OW 67
// InitPompa ;
4520: CALL 2504 0 0
// ComMoveXY ( PompaCrew , 76 , 100 ) ;
4524: LD_EXP 4
4528: PPUSH
4529: LD_INT 76
4531: PPUSH
4532: LD_INT 100
4534: PPUSH
4535: CALL_OW 111
// NorthLeninCrew := NorthLeninCrew union PompaCrew ;
4539: LD_ADDR_EXP 7
4543: PUSH
4544: LD_EXP 7
4548: PUSH
4549: LD_EXP 4
4553: UNION
4554: ST_TO_ADDR
// ComEnterUnit ( Bukov , BukovTank ) ;
4555: LD_EXP 57
4559: PPUSH
4560: LD_INT 342
4562: PPUSH
4563: CALL_OW 120
// ComMoveXY ( Bukov , 177 , 204 ) ;
4567: LD_EXP 57
4571: PPUSH
4572: LD_INT 177
4574: PPUSH
4575: LD_INT 204
4577: PPUSH
4578: CALL_OW 111
// end ; end_of_file
4582: END
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4583: LD_INT 0
4585: PPUSH
4586: PPUSH
4587: PPUSH
// uc_side := GetSide ( b ) ;
4588: LD_ADDR_OWVAR 20
4592: PUSH
4593: LD_VAR 0 2
4597: PPUSH
4598: CALL_OW 255
4602: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4603: LD_ADDR_OWVAR 21
4607: PUSH
4608: LD_VAR 0 2
4612: PPUSH
4613: CALL_OW 248
4617: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4618: LD_ADDR_VAR 0 5
4622: PUSH
4623: LD_VAR 0 2
4627: PPUSH
4628: CALL_OW 254
4632: PUSH
4633: LD_INT 3
4635: MINUS
4636: ST_TO_ADDR
// if dir < 0 then
4637: LD_VAR 0 5
4641: PUSH
4642: LD_INT 0
4644: LESS
4645: IFFALSE 4661
// dir := 6 + dir ;
4647: LD_ADDR_VAR 0 5
4651: PUSH
4652: LD_INT 6
4654: PUSH
4655: LD_VAR 0 5
4659: PLUS
4660: ST_TO_ADDR
// un := CreateHuman ;
4661: LD_ADDR_VAR 0 4
4665: PUSH
4666: CALL_OW 44
4670: ST_TO_ADDR
// SetDir ( un , dir ) ;
4671: LD_VAR 0 4
4675: PPUSH
4676: LD_VAR 0 5
4680: PPUSH
4681: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4685: LD_VAR 0 4
4689: PPUSH
4690: LD_VAR 0 2
4694: PPUSH
4695: CALL_OW 52
// end ;
4699: LD_VAR 0 3
4703: RET
// every 1 trigger IsSelected ( Janusz ) do
4704: LD_INT 420
4706: PPUSH
4707: CALL_OW 306
4711: IFFALSE 4808
4713: GO 4715
4715: DISABLE
// begin JanuszExp ( [ 1 , 2 , 3 , 4 ] ) ;
4716: LD_INT 1
4718: PUSH
4719: LD_INT 2
4721: PUSH
4722: LD_INT 3
4724: PUSH
4725: LD_INT 4
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: PPUSH
4734: CALL 4809 0 1
// Wait ( 0 0$03 ) ;
4738: LD_INT 105
4740: PPUSH
4741: CALL_OW 67
// Say ( Janusz , 4Janusz-Sikret ) ;
4745: LD_INT 420
4747: PPUSH
4748: LD_STRING 4Janusz-Sikret
4750: PPUSH
4751: CALL_OW 88
// TeleportUnit ( Janusz , 120 , 246 , 246 , true ) ;
4755: LD_INT 420
4757: PPUSH
4758: LD_INT 120
4760: PPUSH
4761: LD_INT 246
4763: PPUSH
4764: LD_INT 246
4766: PPUSH
4767: LD_INT 1
4769: PPUSH
4770: CALL_OW 483
// Wait ( 0 0$03 ) ;
4774: LD_INT 105
4776: PPUSH
4777: CALL_OW 67
// RemoveUnit ( Janusz ) ;
4781: LD_INT 420
4783: PPUSH
4784: CALL_OW 64
// SaveVariable ( 1 , JanuszSaved ) ;
4788: LD_INT 1
4790: PPUSH
4791: LD_STRING JanuszSaved
4793: PPUSH
4794: CALL_OW 39
// SaveCharacters ( Janusz , Janusz ) ;
4798: LD_INT 420
4800: PPUSH
4801: LD_STRING Janusz
4803: PPUSH
4804: CALL_OW 38
// end ;
4808: END
// export function JanuszExp ( q ) ; var dec , q1 ; begin
4809: LD_INT 0
4811: PPUSH
4812: PPUSH
4813: PPUSH
// dec = SelectiveQuery ( JanuszQuery , q ) ;
4814: LD_ADDR_VAR 0 3
4818: PUSH
4819: LD_STRING JanuszQuery
4821: PPUSH
4822: LD_VAR 0 1
4826: PPUSH
4827: CALL_OW 98
4831: ST_TO_ADDR
// case dec of 1 :
4832: LD_VAR 0 3
4836: PUSH
4837: LD_INT 1
4839: DOUBLE
4840: EQUAL
4841: IFTRUE 4845
4843: GO 4863
4845: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 2500 ) ;
4846: LD_EXP 13
4850: PPUSH
4851: LD_INT 1
4853: PPUSH
4854: LD_INT 2500
4856: PPUSH
4857: CALL_OW 591
// end ; 2 :
4861: GO 4942
4863: LD_INT 2
4865: DOUBLE
4866: EQUAL
4867: IFTRUE 4871
4869: GO 4889
4871: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 2500 ) ;
4872: LD_EXP 13
4876: PPUSH
4877: LD_INT 2
4879: PPUSH
4880: LD_INT 2500
4882: PPUSH
4883: CALL_OW 591
// end ; 3 :
4887: GO 4942
4889: LD_INT 3
4891: DOUBLE
4892: EQUAL
4893: IFTRUE 4897
4895: GO 4915
4897: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 2500 ) ;
4898: LD_EXP 13
4902: PPUSH
4903: LD_INT 3
4905: PPUSH
4906: LD_INT 2500
4908: PPUSH
4909: CALL_OW 591
// end ; 4 :
4913: GO 4942
4915: LD_INT 4
4917: DOUBLE
4918: EQUAL
4919: IFTRUE 4923
4921: GO 4941
4923: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 2500 ) ;
4924: LD_EXP 13
4928: PPUSH
4929: LD_INT 4
4931: PPUSH
4932: LD_INT 2500
4934: PPUSH
4935: CALL_OW 591
// end ; end ;
4939: GO 4942
4941: POP
// end ;
4942: LD_VAR 0 2
4946: RET
// export function TransportQuery ( q ) ; var dec , q1 ; begin
4947: LD_INT 0
4949: PPUSH
4950: PPUSH
4951: PPUSH
// dec = SelectiveQuery ( TransportQuery , q ) ;
4952: LD_ADDR_VAR 0 3
4956: PUSH
4957: LD_STRING TransportQuery
4959: PPUSH
4960: LD_VAR 0 1
4964: PPUSH
4965: CALL_OW 98
4969: ST_TO_ADDR
// case dec of 1 :
4970: LD_VAR 0 3
4974: PUSH
4975: LD_INT 1
4977: DOUBLE
4978: EQUAL
4979: IFTRUE 4983
4981: GO 4986
4983: POP
// begin end ; end ;
4984: GO 4987
4986: POP
// end ;
4987: LD_VAR 0 2
4991: RET
// every 1 trigger start_ended = false do
4992: LD_EXP 62
4996: PUSH
4997: LD_INT 0
4999: EQUAL
5000: IFFALSE 5015
5002: GO 5004
5004: DISABLE
// begin CenterOnUnits ( Yakotich ) ;
5005: LD_EXP 13
5009: PPUSH
5010: CALL_OW 85
// enable ;
5014: ENABLE
// end ;
5015: END
// every 1 trigger FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
5016: LD_INT 10
5018: PPUSH
5019: LD_INT 22
5021: PUSH
5022: LD_INT 3
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: LD_INT 2
5031: PUSH
5032: LD_INT 21
5034: PUSH
5035: LD_INT 1
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: LD_INT 21
5044: PUSH
5045: LD_INT 2
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PPUSH
5061: CALL_OW 70
5065: PUSH
5066: LD_INT 0
5068: GREATER
5069: IFFALSE 5155
5071: GO 5073
5073: DISABLE
5074: LD_INT 0
5076: PPUSH
// begin enable ;
5077: ENABLE
// for unit in FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
5078: LD_ADDR_VAR 0 1
5082: PUSH
5083: LD_INT 10
5085: PPUSH
5086: LD_INT 22
5088: PUSH
5089: LD_INT 3
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 2
5098: PUSH
5099: LD_INT 21
5101: PUSH
5102: LD_INT 1
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PUSH
5109: LD_INT 21
5111: PUSH
5112: LD_INT 2
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: LIST
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: PPUSH
5128: CALL_OW 70
5132: PUSH
5133: FOR_IN
5134: IFFALSE 5153
// begin ComMoveXY ( unit , 163 , 235 ) ;
5136: LD_VAR 0 1
5140: PPUSH
5141: LD_INT 163
5143: PPUSH
5144: LD_INT 235
5146: PPUSH
5147: CALL_OW 111
// end ;
5151: GO 5133
5153: POP
5154: POP
// end ;
5155: PPOPN 1
5157: END
// every 0 0$1 trigger start_ended = true do
5158: LD_EXP 62
5162: PUSH
5163: LD_INT 1
5165: EQUAL
5166: IFFALSE 5220
5168: GO 5170
5170: DISABLE
// begin enable ;
5171: ENABLE
// if PrepareTime then
5172: LD_EXP 59
5176: IFFALSE 5211
// begin PrepareTime := PrepareTime - 0 0$1 ;
5178: LD_ADDR_EXP 59
5182: PUSH
5183: LD_EXP 59
5187: PUSH
5188: LD_INT 35
5190: MINUS
5191: ST_TO_ADDR
// display_strings := [ #PrepareTime , PrepareTime ] ;
5192: LD_ADDR_OWVAR 47
5196: PUSH
5197: LD_STRING #PrepareTime
5199: PUSH
5200: LD_EXP 59
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: ST_TO_ADDR
// end else
5209: GO 5220
// begin display_strings :=  ;
5211: LD_ADDR_OWVAR 47
5215: PUSH
5216: LD_STRING 
5218: ST_TO_ADDR
// disable ;
5219: DISABLE
// end ; end ;
5220: END
// export function BierezovAI ; begin
5221: LD_INT 0
5223: PPUSH
// AddComBuild ( BierezovEngineers , b_depot , 80 , 47 , 3 ) ;
5224: LD_EXP 72
5228: PPUSH
5229: LD_INT 0
5231: PPUSH
5232: LD_INT 80
5234: PPUSH
5235: LD_INT 47
5237: PPUSH
5238: LD_INT 3
5240: PPUSH
5241: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_lab , 78 , 34 , 0 ) ;
5245: LD_EXP 72
5249: PPUSH
5250: LD_INT 6
5252: PPUSH
5253: LD_INT 78
5255: PPUSH
5256: LD_INT 34
5258: PPUSH
5259: LD_INT 0
5261: PPUSH
5262: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_oil_mine , 79 , 26 , 0 ) ;
5266: LD_EXP 72
5270: PPUSH
5271: LD_INT 29
5273: PPUSH
5274: LD_INT 79
5276: PPUSH
5277: LD_INT 26
5279: PPUSH
5280: LD_INT 0
5282: PPUSH
5283: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_oil_power , 84 , 28 , 5 ) ;
5287: LD_EXP 72
5291: PPUSH
5292: LD_INT 26
5294: PPUSH
5295: LD_INT 84
5297: PPUSH
5298: LD_INT 28
5300: PPUSH
5301: LD_INT 5
5303: PPUSH
5304: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_workshop , 92 , 41 , 3 ) ;
5308: LD_EXP 72
5312: PPUSH
5313: LD_INT 2
5315: PPUSH
5316: LD_INT 92
5318: PPUSH
5319: LD_INT 41
5321: PPUSH
5322: LD_INT 3
5324: PPUSH
5325: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_ext_gun , 95 , 41 , 4 ) ;
5329: LD_EXP 72
5333: PPUSH
5334: LD_INT 17
5336: PPUSH
5337: LD_INT 95
5339: PPUSH
5340: LD_INT 41
5342: PPUSH
5343: LD_INT 4
5345: PPUSH
5346: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_ext_rocket , 96 , 45 , 5 ) ;
5350: LD_EXP 72
5354: PPUSH
5355: LD_INT 18
5357: PPUSH
5358: LD_INT 96
5360: PPUSH
5361: LD_INT 45
5363: PPUSH
5364: LD_INT 5
5366: PPUSH
5367: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_ext_noncombat , 92 , 37 , 3 ) ;
5371: LD_EXP 72
5375: PPUSH
5376: LD_INT 19
5378: PPUSH
5379: LD_INT 92
5381: PPUSH
5382: LD_INT 37
5384: PPUSH
5385: LD_INT 3
5387: PPUSH
5388: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_oil_power , 74 , 25 , 2 ) ;
5392: LD_EXP 72
5396: PPUSH
5397: LD_INT 26
5399: PPUSH
5400: LD_INT 74
5402: PPUSH
5403: LD_INT 25
5405: PPUSH
5406: LD_INT 2
5408: PPUSH
5409: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_oil_power , 75 , 21 , 1 ) ;
5413: LD_EXP 72
5417: PPUSH
5418: LD_INT 26
5420: PPUSH
5421: LD_INT 75
5423: PPUSH
5424: LD_INT 21
5426: PPUSH
5427: LD_INT 1
5429: PPUSH
5430: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_armoury , 80 , 59 , 0 ) ;
5434: LD_EXP 72
5438: PPUSH
5439: LD_INT 4
5441: PPUSH
5442: LD_INT 80
5444: PPUSH
5445: LD_INT 59
5447: PPUSH
5448: LD_INT 0
5450: PPUSH
5451: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_bunker , 89 , 56 , 0 ) ;
5455: LD_EXP 72
5459: PPUSH
5460: LD_INT 32
5462: PPUSH
5463: LD_INT 89
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: LD_INT 0
5471: PPUSH
5472: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_bunker , 99 , 57 , 0 ) ;
5476: LD_EXP 72
5480: PPUSH
5481: LD_INT 32
5483: PPUSH
5484: LD_INT 99
5486: PPUSH
5487: LD_INT 57
5489: PPUSH
5490: LD_INT 0
5492: PPUSH
5493: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_bunker , 94 , 58 , 0 ) ;
5497: LD_EXP 72
5501: PPUSH
5502: LD_INT 32
5504: PPUSH
5505: LD_INT 94
5507: PPUSH
5508: LD_INT 58
5510: PPUSH
5511: LD_INT 0
5513: PPUSH
5514: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_bunker , 56 , 25 , 2 ) ;
5518: LD_EXP 72
5522: PPUSH
5523: LD_INT 32
5525: PPUSH
5526: LD_INT 56
5528: PPUSH
5529: LD_INT 25
5531: PPUSH
5532: LD_INT 2
5534: PPUSH
5535: CALL_OW 205
// AddComBuild ( BierezovEngineers , b_breastwork , 52 , 30 , 2 ) ;
5539: LD_EXP 72
5543: PPUSH
5544: LD_INT 31
5546: PPUSH
5547: LD_INT 52
5549: PPUSH
5550: LD_INT 30
5552: PPUSH
5553: LD_INT 2
5555: PPUSH
5556: CALL_OW 205
// end ; end_of_file
5560: LD_VAR 0 1
5564: RET
// every 0 0$1 trigger start_ended = true do
5565: LD_EXP 62
5569: PUSH
5570: LD_INT 1
5572: EQUAL
5573: IFFALSE 5868
5575: GO 5577
5577: DISABLE
// begin ComResearch ( [ L1L1 , L1L2 ] , 48 ) ;
5578: LD_INT 43
5580: PUSH
5581: LD_INT 234
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: PPUSH
5588: LD_INT 48
5590: PPUSH
5591: CALL_OW 124
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 49 ) ;
5595: LD_INT 43
5597: PUSH
5598: LD_INT 234
5600: PUSH
5601: LD_INT 129
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: LIST
5608: PPUSH
5609: LD_INT 49
5611: PPUSH
5612: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 51 ) ;
5616: LD_INT 43
5618: PUSH
5619: LD_INT 234
5621: PUSH
5622: LD_INT 129
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: LIST
5629: PPUSH
5630: LD_INT 51
5632: PPUSH
5633: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 57 ) ;
5637: LD_INT 43
5639: PUSH
5640: LD_INT 234
5642: PUSH
5643: LD_INT 129
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: LIST
5650: PPUSH
5651: LD_INT 57
5653: PPUSH
5654: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 82 ) ;
5658: LD_INT 43
5660: PUSH
5661: LD_INT 234
5663: PUSH
5664: LD_INT 129
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: PPUSH
5672: LD_INT 82
5674: PPUSH
5675: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 83 ) ;
5679: LD_INT 43
5681: PUSH
5682: LD_INT 234
5684: PUSH
5685: LD_INT 129
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: LIST
5692: PPUSH
5693: LD_INT 83
5695: PPUSH
5696: CALL_OW 184
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 84 ) ;
5700: LD_INT 43
5702: PUSH
5703: LD_INT 234
5705: PUSH
5706: LD_INT 129
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: PPUSH
5714: LD_INT 84
5716: PPUSH
5717: CALL_OW 184
// ComExitBuilding ( [ SouthLeninEngineers , NorthLeninEngineers ] ) ;
5721: LD_EXP 73
5725: PUSH
5726: LD_EXP 74
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PPUSH
5735: CALL_OW 122
// AddComBuild ( NorthLeninEngineers , 32 , 82 , 93 , 4 ) ;
5739: LD_EXP 74
5743: PPUSH
5744: LD_INT 32
5746: PPUSH
5747: LD_INT 82
5749: PPUSH
5750: LD_INT 93
5752: PPUSH
5753: LD_INT 4
5755: PPUSH
5756: CALL_OW 205
// AddComBuild ( NorthLeninEngineers , 32 , 95 , 120 , 4 ) ;
5760: LD_EXP 74
5764: PPUSH
5765: LD_INT 32
5767: PPUSH
5768: LD_INT 95
5770: PPUSH
5771: LD_INT 120
5773: PPUSH
5774: LD_INT 4
5776: PPUSH
5777: CALL_OW 205
// AddComBuild ( NorthLeninEngineers , 32 , 69 , 81 , 3 ) ;
5781: LD_EXP 74
5785: PPUSH
5786: LD_INT 32
5788: PPUSH
5789: LD_INT 69
5791: PPUSH
5792: LD_INT 81
5794: PPUSH
5795: LD_INT 3
5797: PPUSH
5798: CALL_OW 205
// AddComEnterUnit ( NorthLeninEngineers , NorthLenin ) ;
5802: LD_EXP 74
5806: PPUSH
5807: LD_INT 253
5809: PPUSH
5810: CALL_OW 180
// AddComBuild ( SouthLeninEngineers , 32 , 123 , 174 , 4 ) ;
5814: LD_EXP 73
5818: PPUSH
5819: LD_INT 32
5821: PPUSH
5822: LD_INT 123
5824: PPUSH
5825: LD_INT 174
5827: PPUSH
5828: LD_INT 4
5830: PPUSH
5831: CALL_OW 205
// AddComBuild ( SouthLeninEngineers , 32 , 124 , 184 , 5 ) ;
5835: LD_EXP 73
5839: PPUSH
5840: LD_INT 32
5842: PPUSH
5843: LD_INT 124
5845: PPUSH
5846: LD_INT 184
5848: PPUSH
5849: LD_INT 5
5851: PPUSH
5852: CALL_OW 205
// AddComEnterUnit ( SouthLeninEngineers , SouthLenin ) ;
5856: LD_EXP 73
5860: PPUSH
5861: LD_INT 218
5863: PPUSH
5864: CALL_OW 180
// end ;
5868: END
// export function InitCommanders ; begin
5869: LD_INT 0
5871: PPUSH
// Uc_Side := 6 ;
5872: LD_ADDR_OWVAR 20
5876: PUSH
5877: LD_INT 6
5879: ST_TO_ADDR
// Uc_Nation := 3 ;
5880: LD_ADDR_OWVAR 21
5884: PUSH
5885: LD_INT 3
5887: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
5888: LD_ADDR_EXP 53
5892: PUSH
5893: LD_STRING Morozov
5895: PPUSH
5896: LD_INT 0
5898: PPUSH
5899: LD_STRING 
5901: PPUSH
5902: CALL 12649 0 3
5906: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
5907: LD_ADDR_EXP 54
5911: PUSH
5912: LD_STRING Platonov
5914: PPUSH
5915: LD_INT 0
5917: PPUSH
5918: LD_STRING 
5920: PPUSH
5921: CALL 12649 0 3
5925: ST_TO_ADDR
// Popov := PrepareUnit ( Popov , false ,  ) ;
5926: LD_ADDR_EXP 55
5930: PUSH
5931: LD_STRING Popov
5933: PPUSH
5934: LD_INT 0
5936: PPUSH
5937: LD_STRING 
5939: PPUSH
5940: CALL 12649 0 3
5944: ST_TO_ADDR
// Bukov := PrepareUnit ( Bukov , false ,  ) ;
5945: LD_ADDR_EXP 57
5949: PUSH
5950: LD_STRING Bukov
5952: PPUSH
5953: LD_INT 0
5955: PPUSH
5956: LD_STRING 
5958: PPUSH
5959: CALL 12649 0 3
5963: ST_TO_ADDR
// Gaydar := PrepareUnit ( Gaydar , false ,  ) ;
5964: LD_ADDR_EXP 56
5968: PUSH
5969: LD_STRING Gaydar
5971: PPUSH
5972: LD_INT 0
5974: PPUSH
5975: LD_STRING 
5977: PPUSH
5978: CALL 12649 0 3
5982: ST_TO_ADDR
// PlaceUnitArea ( Morozov , CommanderSpawn , false ) ;
5983: LD_EXP 53
5987: PPUSH
5988: LD_INT 19
5990: PPUSH
5991: LD_INT 0
5993: PPUSH
5994: CALL_OW 49
// PlaceUnitArea ( Platonov , CommanderSpawn , false ) ;
5998: LD_EXP 54
6002: PPUSH
6003: LD_INT 19
6005: PPUSH
6006: LD_INT 0
6008: PPUSH
6009: CALL_OW 49
// PlaceUnitArea ( Popov , CommanderSpawn , false ) ;
6013: LD_EXP 55
6017: PPUSH
6018: LD_INT 19
6020: PPUSH
6021: LD_INT 0
6023: PPUSH
6024: CALL_OW 49
// ComTurnXY ( [ Morozov , Platonov , Popov ] , 73 , 100 ) ;
6028: LD_EXP 53
6032: PUSH
6033: LD_EXP 54
6037: PUSH
6038: LD_EXP 55
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: PPUSH
6048: LD_INT 73
6050: PPUSH
6051: LD_INT 100
6053: PPUSH
6054: CALL_OW 118
// PlaceUnitArea ( Gaydar , GaydarSpawn , false ) ;
6058: LD_EXP 56
6062: PPUSH
6063: LD_INT 15
6065: PPUSH
6066: LD_INT 0
6068: PPUSH
6069: CALL_OW 49
// ComTurnXY ( Gaydar , 214 , 160 ) ;
6073: LD_EXP 56
6077: PPUSH
6078: LD_INT 214
6080: PPUSH
6081: LD_INT 160
6083: PPUSH
6084: CALL_OW 118
// PlaceUnitArea ( Bukov , BukovSpawn , false ) ;
6088: LD_EXP 57
6092: PPUSH
6093: LD_INT 16
6095: PPUSH
6096: LD_INT 0
6098: PPUSH
6099: CALL_OW 49
// ComTurnXY ( Bukov , 312 , 218 ) ;
6103: LD_EXP 57
6107: PPUSH
6108: LD_INT 312
6110: PPUSH
6111: LD_INT 218
6113: PPUSH
6114: CALL_OW 118
// end ;
6118: LD_VAR 0 1
6122: RET
// export SouthLeninEngineers , NorthLeninEngineers ; export function InitRussianAI ; var i , z , y , turrety , fabryka , lab , zbrojka ; begin
6123: LD_INT 0
6125: PPUSH
6126: PPUSH
6127: PPUSH
6128: PPUSH
6129: PPUSH
6130: PPUSH
6131: PPUSH
6132: PPUSH
// Hc_Gallery :=  ;
6133: LD_ADDR_OWVAR 33
6137: PUSH
6138: LD_STRING 
6140: ST_TO_ADDR
// Hc_Name :=  ;
6141: LD_ADDR_OWVAR 26
6145: PUSH
6146: LD_STRING 
6148: ST_TO_ADDR
// NorthLeninCrew := [ ] ;
6149: LD_ADDR_EXP 7
6153: PUSH
6154: EMPTY
6155: ST_TO_ADDR
// uc_side := 6 ;
6156: LD_ADDR_OWVAR 20
6160: PUSH
6161: LD_INT 6
6163: ST_TO_ADDR
// uc_nation := 3 ;
6164: LD_ADDR_OWVAR 21
6168: PUSH
6169: LD_INT 3
6171: ST_TO_ADDR
// for i = 1 to 8 do
6172: LD_ADDR_VAR 0 2
6176: PUSH
6177: DOUBLE
6178: LD_INT 1
6180: DEC
6181: ST_TO_ADDR
6182: LD_INT 8
6184: PUSH
6185: FOR_TO
6186: IFFALSE 6241
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6188: LD_INT 0
6190: PPUSH
6191: LD_INT 1
6193: PPUSH
6194: CALL_OW 12
6198: PPUSH
6199: LD_INT 7
6201: PUSH
6202: LD_INT 5
6204: PUSH
6205: LD_INT 3
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: LIST
6212: PUSH
6213: LD_OWVAR 67
6217: ARRAY
6218: PPUSH
6219: CALL_OW 381
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
6223: LD_ADDR_EXP 7
6227: PUSH
6228: LD_EXP 7
6232: PUSH
6233: CALL_OW 44
6237: ADD
6238: ST_TO_ADDR
// end ;
6239: GO 6185
6241: POP
6242: POP
// for i = 1 to 2 do
6243: LD_ADDR_VAR 0 2
6247: PUSH
6248: DOUBLE
6249: LD_INT 1
6251: DEC
6252: ST_TO_ADDR
6253: LD_INT 2
6255: PUSH
6256: FOR_TO
6257: IFFALSE 6312
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 12
6269: PPUSH
6270: LD_INT 7
6272: PUSH
6273: LD_INT 5
6275: PUSH
6276: LD_INT 3
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: LIST
6283: PUSH
6284: LD_OWVAR 67
6288: ARRAY
6289: PPUSH
6290: CALL_OW 382
// NorthLeninEngineers := NorthLeninEngineers ^ CreateHuman ;
6294: LD_ADDR_EXP 74
6298: PUSH
6299: LD_EXP 74
6303: PUSH
6304: CALL_OW 44
6308: ADD
6309: ST_TO_ADDR
// end ;
6310: GO 6256
6312: POP
6313: POP
// NorthLeninCrew := NorthLeninCrew ^ NorthLeninEngineers ;
6314: LD_ADDR_EXP 7
6318: PUSH
6319: LD_EXP 7
6323: PUSH
6324: LD_EXP 74
6328: ADD
6329: ST_TO_ADDR
// for i = 1 to 3 do
6330: LD_ADDR_VAR 0 2
6334: PUSH
6335: DOUBLE
6336: LD_INT 1
6338: DEC
6339: ST_TO_ADDR
6340: LD_INT 3
6342: PUSH
6343: FOR_TO
6344: IFFALSE 6399
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6346: LD_INT 0
6348: PPUSH
6349: LD_INT 1
6351: PPUSH
6352: CALL_OW 12
6356: PPUSH
6357: LD_INT 7
6359: PUSH
6360: LD_INT 5
6362: PUSH
6363: LD_INT 3
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: LIST
6370: PUSH
6371: LD_OWVAR 67
6375: ARRAY
6376: PPUSH
6377: CALL_OW 383
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
6381: LD_ADDR_EXP 7
6385: PUSH
6386: LD_EXP 7
6390: PUSH
6391: CALL_OW 44
6395: ADD
6396: ST_TO_ADDR
// end ;
6397: GO 6343
6399: POP
6400: POP
// for i = 1 to 3 do
6401: LD_ADDR_VAR 0 2
6405: PUSH
6406: DOUBLE
6407: LD_INT 1
6409: DEC
6410: ST_TO_ADDR
6411: LD_INT 3
6413: PUSH
6414: FOR_TO
6415: IFFALSE 6470
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6417: LD_INT 0
6419: PPUSH
6420: LD_INT 1
6422: PPUSH
6423: CALL_OW 12
6427: PPUSH
6428: LD_INT 7
6430: PUSH
6431: LD_INT 5
6433: PUSH
6434: LD_INT 3
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PUSH
6442: LD_OWVAR 67
6446: ARRAY
6447: PPUSH
6448: CALL_OW 384
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
6452: LD_ADDR_EXP 7
6456: PUSH
6457: LD_EXP 7
6461: PUSH
6462: CALL_OW 44
6466: ADD
6467: ST_TO_ADDR
// end ;
6468: GO 6414
6470: POP
6471: POP
// turrety := FilterUnitsInArea ( NorthLeninArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
6472: LD_ADDR_VAR 0 5
6476: PUSH
6477: LD_INT 5
6479: PPUSH
6480: LD_INT 2
6482: PUSH
6483: LD_INT 30
6485: PUSH
6486: LD_INT 31
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PUSH
6493: LD_INT 30
6495: PUSH
6496: LD_INT 32
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: LIST
6507: PPUSH
6508: CALL_OW 70
6512: ST_TO_ADDR
// lab := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_lab_full ] ] ) ;
6513: LD_ADDR_VAR 0 7
6517: PUSH
6518: LD_INT 5
6520: PPUSH
6521: LD_INT 30
6523: PUSH
6524: LD_INT 8
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: PPUSH
6534: CALL_OW 70
6538: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_factory ] ] ) ;
6539: LD_ADDR_VAR 0 6
6543: PUSH
6544: LD_INT 5
6546: PPUSH
6547: LD_INT 30
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: PPUSH
6560: CALL_OW 70
6564: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_barracks ] ] ) ;
6565: LD_ADDR_VAR 0 8
6569: PUSH
6570: LD_INT 5
6572: PPUSH
6573: LD_INT 30
6575: PUSH
6576: LD_INT 5
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: PPUSH
6586: CALL_OW 70
6590: ST_TO_ADDR
// y := 1 ;
6591: LD_ADDR_VAR 0 4
6595: PUSH
6596: LD_INT 1
6598: ST_TO_ADDR
// z := 1 ;
6599: LD_ADDR_VAR 0 3
6603: PUSH
6604: LD_INT 1
6606: ST_TO_ADDR
// for i in NorthLeninCrew do
6607: LD_ADDR_VAR 0 2
6611: PUSH
6612: LD_EXP 7
6616: PUSH
6617: FOR_IN
6618: IFFALSE 6789
// begin case GetClass ( i ) of 1 :
6620: LD_VAR 0 2
6624: PPUSH
6625: CALL_OW 257
6629: PUSH
6630: LD_INT 1
6632: DOUBLE
6633: EQUAL
6634: IFTRUE 6638
6636: GO 6705
6638: POP
// begin if y > 6 then
6639: LD_VAR 0 4
6643: PUSH
6644: LD_INT 6
6646: GREATER
6647: IFFALSE 6669
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
6649: LD_VAR 0 2
6653: PPUSH
6654: LD_VAR 0 8
6658: PUSH
6659: LD_INT 1
6661: ARRAY
6662: PPUSH
6663: CALL_OW 52
6667: GO 6689
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
6669: LD_VAR 0 2
6673: PPUSH
6674: LD_VAR 0 5
6678: PUSH
6679: LD_VAR 0 4
6683: ARRAY
6684: PPUSH
6685: CALL_OW 52
// y = y + 1 ;
6689: LD_ADDR_VAR 0 4
6693: PUSH
6694: LD_VAR 0 4
6698: PUSH
6699: LD_INT 1
6701: PLUS
6702: ST_TO_ADDR
// end ; 2 :
6703: GO 6787
6705: LD_INT 2
6707: DOUBLE
6708: EQUAL
6709: IFTRUE 6713
6711: GO 6728
6713: POP
// PlaceHumanInUnit ( i , NorthLenin ) ; 3 :
6714: LD_VAR 0 2
6718: PPUSH
6719: LD_INT 253
6721: PPUSH
6722: CALL_OW 52
6726: GO 6787
6728: LD_INT 3
6730: DOUBLE
6731: EQUAL
6732: IFTRUE 6736
6734: GO 6757
6736: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
6737: LD_VAR 0 2
6741: PPUSH
6742: LD_VAR 0 6
6746: PUSH
6747: LD_INT 1
6749: ARRAY
6750: PPUSH
6751: CALL_OW 52
6755: GO 6787
6757: LD_INT 4
6759: DOUBLE
6760: EQUAL
6761: IFTRUE 6765
6763: GO 6786
6765: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
6766: LD_VAR 0 2
6770: PPUSH
6771: LD_VAR 0 7
6775: PUSH
6776: LD_INT 1
6778: ARRAY
6779: PPUSH
6780: CALL_OW 52
6784: GO 6787
6786: POP
// end ;
6787: GO 6617
6789: POP
6790: POP
// SouthLeninCrew := [ ] ;
6791: LD_ADDR_EXP 8
6795: PUSH
6796: EMPTY
6797: ST_TO_ADDR
// for i = 1 to 6 do
6798: LD_ADDR_VAR 0 2
6802: PUSH
6803: DOUBLE
6804: LD_INT 1
6806: DEC
6807: ST_TO_ADDR
6808: LD_INT 6
6810: PUSH
6811: FOR_TO
6812: IFFALSE 6867
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6814: LD_INT 0
6816: PPUSH
6817: LD_INT 1
6819: PPUSH
6820: CALL_OW 12
6824: PPUSH
6825: LD_INT 7
6827: PUSH
6828: LD_INT 5
6830: PUSH
6831: LD_INT 3
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: LIST
6838: PUSH
6839: LD_OWVAR 67
6843: ARRAY
6844: PPUSH
6845: CALL_OW 381
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
6849: LD_ADDR_EXP 8
6853: PUSH
6854: LD_EXP 8
6858: PUSH
6859: CALL_OW 44
6863: ADD
6864: ST_TO_ADDR
// end ;
6865: GO 6811
6867: POP
6868: POP
// for i = 1 to 1 do
6869: LD_ADDR_VAR 0 2
6873: PUSH
6874: DOUBLE
6875: LD_INT 1
6877: DEC
6878: ST_TO_ADDR
6879: LD_INT 1
6881: PUSH
6882: FOR_TO
6883: IFFALSE 6938
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6885: LD_INT 0
6887: PPUSH
6888: LD_INT 1
6890: PPUSH
6891: CALL_OW 12
6895: PPUSH
6896: LD_INT 7
6898: PUSH
6899: LD_INT 5
6901: PUSH
6902: LD_INT 3
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: LIST
6909: PUSH
6910: LD_OWVAR 67
6914: ARRAY
6915: PPUSH
6916: CALL_OW 382
// SouthLeninEngineers := SouthLeninEngineers ^ CreateHuman ;
6920: LD_ADDR_EXP 73
6924: PUSH
6925: LD_EXP 73
6929: PUSH
6930: CALL_OW 44
6934: ADD
6935: ST_TO_ADDR
// end ;
6936: GO 6882
6938: POP
6939: POP
// SouthLeninCrew := SouthLeninCrew ^ SouthLeninEngineers ;
6940: LD_ADDR_EXP 8
6944: PUSH
6945: LD_EXP 8
6949: PUSH
6950: LD_EXP 73
6954: ADD
6955: ST_TO_ADDR
// for i = 1 to 1 do
6956: LD_ADDR_VAR 0 2
6960: PUSH
6961: DOUBLE
6962: LD_INT 1
6964: DEC
6965: ST_TO_ADDR
6966: LD_INT 1
6968: PUSH
6969: FOR_TO
6970: IFFALSE 7025
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6972: LD_INT 0
6974: PPUSH
6975: LD_INT 1
6977: PPUSH
6978: CALL_OW 12
6982: PPUSH
6983: LD_INT 7
6985: PUSH
6986: LD_INT 5
6988: PUSH
6989: LD_INT 3
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: LIST
6996: PUSH
6997: LD_OWVAR 67
7001: ARRAY
7002: PPUSH
7003: CALL_OW 383
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
7007: LD_ADDR_EXP 8
7011: PUSH
7012: LD_EXP 8
7016: PUSH
7017: CALL_OW 44
7021: ADD
7022: ST_TO_ADDR
// end ;
7023: GO 6969
7025: POP
7026: POP
// for i = 1 to 1 do
7027: LD_ADDR_VAR 0 2
7031: PUSH
7032: DOUBLE
7033: LD_INT 1
7035: DEC
7036: ST_TO_ADDR
7037: LD_INT 1
7039: PUSH
7040: FOR_TO
7041: IFFALSE 7096
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7043: LD_INT 0
7045: PPUSH
7046: LD_INT 1
7048: PPUSH
7049: CALL_OW 12
7053: PPUSH
7054: LD_INT 7
7056: PUSH
7057: LD_INT 5
7059: PUSH
7060: LD_INT 3
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: PUSH
7068: LD_OWVAR 67
7072: ARRAY
7073: PPUSH
7074: CALL_OW 384
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
7078: LD_ADDR_EXP 8
7082: PUSH
7083: LD_EXP 8
7087: PUSH
7088: CALL_OW 44
7092: ADD
7093: ST_TO_ADDR
// end ;
7094: GO 7040
7096: POP
7097: POP
// turrety := FilterUnitsInArea ( SouthLeninArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
7098: LD_ADDR_VAR 0 5
7102: PUSH
7103: LD_INT 4
7105: PPUSH
7106: LD_INT 2
7108: PUSH
7109: LD_INT 30
7111: PUSH
7112: LD_INT 31
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: LD_INT 30
7121: PUSH
7122: LD_INT 32
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: LIST
7133: PPUSH
7134: CALL_OW 70
7138: ST_TO_ADDR
// lab := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_lab_full ] ] ) ;
7139: LD_ADDR_VAR 0 7
7143: PUSH
7144: LD_INT 4
7146: PPUSH
7147: LD_INT 30
7149: PUSH
7150: LD_INT 8
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: EMPTY
7158: LIST
7159: PPUSH
7160: CALL_OW 70
7164: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_factory ] ] ) ;
7165: LD_ADDR_VAR 0 6
7169: PUSH
7170: LD_INT 4
7172: PPUSH
7173: LD_INT 30
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: EMPTY
7184: LIST
7185: PPUSH
7186: CALL_OW 70
7190: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_barracks ] ] ) ;
7191: LD_ADDR_VAR 0 8
7195: PUSH
7196: LD_INT 4
7198: PPUSH
7199: LD_INT 30
7201: PUSH
7202: LD_INT 5
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: PPUSH
7212: CALL_OW 70
7216: ST_TO_ADDR
// y := 1 ;
7217: LD_ADDR_VAR 0 4
7221: PUSH
7222: LD_INT 1
7224: ST_TO_ADDR
// z := 1 ;
7225: LD_ADDR_VAR 0 3
7229: PUSH
7230: LD_INT 1
7232: ST_TO_ADDR
// for i in SouthLeninCrew do
7233: LD_ADDR_VAR 0 2
7237: PUSH
7238: LD_EXP 8
7242: PUSH
7243: FOR_IN
7244: IFFALSE 7415
// begin case GetClass ( i ) of 1 :
7246: LD_VAR 0 2
7250: PPUSH
7251: CALL_OW 257
7255: PUSH
7256: LD_INT 1
7258: DOUBLE
7259: EQUAL
7260: IFTRUE 7264
7262: GO 7331
7264: POP
// begin if y > 6 then
7265: LD_VAR 0 4
7269: PUSH
7270: LD_INT 6
7272: GREATER
7273: IFFALSE 7295
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
7275: LD_VAR 0 2
7279: PPUSH
7280: LD_VAR 0 8
7284: PUSH
7285: LD_INT 1
7287: ARRAY
7288: PPUSH
7289: CALL_OW 52
7293: GO 7315
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
7295: LD_VAR 0 2
7299: PPUSH
7300: LD_VAR 0 5
7304: PUSH
7305: LD_VAR 0 4
7309: ARRAY
7310: PPUSH
7311: CALL_OW 52
// y = y + 1 ;
7315: LD_ADDR_VAR 0 4
7319: PUSH
7320: LD_VAR 0 4
7324: PUSH
7325: LD_INT 1
7327: PLUS
7328: ST_TO_ADDR
// end ; 2 :
7329: GO 7413
7331: LD_INT 2
7333: DOUBLE
7334: EQUAL
7335: IFTRUE 7339
7337: GO 7354
7339: POP
// PlaceHumanInUnit ( i , SouthLenin ) ; 3 :
7340: LD_VAR 0 2
7344: PPUSH
7345: LD_INT 218
7347: PPUSH
7348: CALL_OW 52
7352: GO 7413
7354: LD_INT 3
7356: DOUBLE
7357: EQUAL
7358: IFTRUE 7362
7360: GO 7383
7362: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
7363: LD_VAR 0 2
7367: PPUSH
7368: LD_VAR 0 6
7372: PUSH
7373: LD_INT 1
7375: ARRAY
7376: PPUSH
7377: CALL_OW 52
7381: GO 7413
7383: LD_INT 4
7385: DOUBLE
7386: EQUAL
7387: IFTRUE 7391
7389: GO 7412
7391: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
7392: LD_VAR 0 2
7396: PPUSH
7397: LD_VAR 0 7
7401: PUSH
7402: LD_INT 1
7404: ARRAY
7405: PPUSH
7406: CALL_OW 52
7410: GO 7413
7412: POP
// end ;
7413: GO 7243
7415: POP
7416: POP
// BukovCrew := [ ] ;
7417: LD_ADDR_EXP 5
7421: PUSH
7422: EMPTY
7423: ST_TO_ADDR
// for i = 1 to 6 do
7424: LD_ADDR_VAR 0 2
7428: PUSH
7429: DOUBLE
7430: LD_INT 1
7432: DEC
7433: ST_TO_ADDR
7434: LD_INT 6
7436: PUSH
7437: FOR_TO
7438: IFFALSE 7493
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7440: LD_INT 0
7442: PPUSH
7443: LD_INT 1
7445: PPUSH
7446: CALL_OW 12
7450: PPUSH
7451: LD_INT 7
7453: PUSH
7454: LD_INT 5
7456: PUSH
7457: LD_INT 3
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: PUSH
7465: LD_OWVAR 67
7469: ARRAY
7470: PPUSH
7471: CALL_OW 381
// BukovCrew := BukovCrew ^ CreateHuman ;
7475: LD_ADDR_EXP 5
7479: PUSH
7480: LD_EXP 5
7484: PUSH
7485: CALL_OW 44
7489: ADD
7490: ST_TO_ADDR
// end ;
7491: GO 7437
7493: POP
7494: POP
// for i = 1 to 2 do
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: DOUBLE
7501: LD_INT 1
7503: DEC
7504: ST_TO_ADDR
7505: LD_INT 2
7507: PUSH
7508: FOR_TO
7509: IFFALSE 7564
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7511: LD_INT 0
7513: PPUSH
7514: LD_INT 1
7516: PPUSH
7517: CALL_OW 12
7521: PPUSH
7522: LD_INT 7
7524: PUSH
7525: LD_INT 5
7527: PUSH
7528: LD_INT 3
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: LIST
7535: PUSH
7536: LD_OWVAR 67
7540: ARRAY
7541: PPUSH
7542: CALL_OW 383
// BukovCrew := BukovCrew ^ CreateHuman ;
7546: LD_ADDR_EXP 5
7550: PUSH
7551: LD_EXP 5
7555: PUSH
7556: CALL_OW 44
7560: ADD
7561: ST_TO_ADDR
// end ;
7562: GO 7508
7564: POP
7565: POP
// for i = 1 to 2 do
7566: LD_ADDR_VAR 0 2
7570: PUSH
7571: DOUBLE
7572: LD_INT 1
7574: DEC
7575: ST_TO_ADDR
7576: LD_INT 2
7578: PUSH
7579: FOR_TO
7580: IFFALSE 7635
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7582: LD_INT 0
7584: PPUSH
7585: LD_INT 1
7587: PPUSH
7588: CALL_OW 12
7592: PPUSH
7593: LD_INT 7
7595: PUSH
7596: LD_INT 5
7598: PUSH
7599: LD_INT 3
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: PUSH
7607: LD_OWVAR 67
7611: ARRAY
7612: PPUSH
7613: CALL_OW 384
// BukovCrew := BukovCrew ^ CreateHuman ;
7617: LD_ADDR_EXP 5
7621: PUSH
7622: LD_EXP 5
7626: PUSH
7627: CALL_OW 44
7631: ADD
7632: ST_TO_ADDR
// end ;
7633: GO 7579
7635: POP
7636: POP
// turrety := FilterUnitsInArea ( BukovBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
7637: LD_ADDR_VAR 0 5
7641: PUSH
7642: LD_INT 7
7644: PPUSH
7645: LD_INT 2
7647: PUSH
7648: LD_INT 30
7650: PUSH
7651: LD_INT 31
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 30
7660: PUSH
7661: LD_INT 32
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 70
7677: ST_TO_ADDR
// lab := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_lab_half ] ] ) ;
7678: LD_ADDR_VAR 0 7
7682: PUSH
7683: LD_INT 7
7685: PPUSH
7686: LD_INT 30
7688: PUSH
7689: LD_INT 7
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: PUSH
7696: EMPTY
7697: LIST
7698: PPUSH
7699: CALL_OW 70
7703: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_factory ] ] ) ;
7704: LD_ADDR_VAR 0 6
7708: PUSH
7709: LD_INT 7
7711: PPUSH
7712: LD_INT 30
7714: PUSH
7715: LD_INT 3
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: PUSH
7722: EMPTY
7723: LIST
7724: PPUSH
7725: CALL_OW 70
7729: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_armoury ] ] ) ;
7730: LD_ADDR_VAR 0 8
7734: PUSH
7735: LD_INT 7
7737: PPUSH
7738: LD_INT 30
7740: PUSH
7741: LD_INT 4
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PUSH
7748: EMPTY
7749: LIST
7750: PPUSH
7751: CALL_OW 70
7755: ST_TO_ADDR
// y := 1 ;
7756: LD_ADDR_VAR 0 4
7760: PUSH
7761: LD_INT 1
7763: ST_TO_ADDR
// z := 1 ;
7764: LD_ADDR_VAR 0 3
7768: PUSH
7769: LD_INT 1
7771: ST_TO_ADDR
// for i in BukovCrew do
7772: LD_ADDR_VAR 0 2
7776: PUSH
7777: LD_EXP 5
7781: PUSH
7782: FOR_IN
7783: IFFALSE 7931
// begin case GetClass ( i ) of 1 :
7785: LD_VAR 0 2
7789: PPUSH
7790: CALL_OW 257
7794: PUSH
7795: LD_INT 1
7797: DOUBLE
7798: EQUAL
7799: IFTRUE 7803
7801: GO 7870
7803: POP
// begin if y > 4 then
7804: LD_VAR 0 4
7808: PUSH
7809: LD_INT 4
7811: GREATER
7812: IFFALSE 7834
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
7814: LD_VAR 0 2
7818: PPUSH
7819: LD_VAR 0 8
7823: PUSH
7824: LD_INT 1
7826: ARRAY
7827: PPUSH
7828: CALL_OW 52
7832: GO 7854
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
7834: LD_VAR 0 2
7838: PPUSH
7839: LD_VAR 0 5
7843: PUSH
7844: LD_VAR 0 4
7848: ARRAY
7849: PPUSH
7850: CALL_OW 52
// y = y + 1 ;
7854: LD_ADDR_VAR 0 4
7858: PUSH
7859: LD_VAR 0 4
7863: PUSH
7864: LD_INT 1
7866: PLUS
7867: ST_TO_ADDR
// end ; 3 :
7868: GO 7929
7870: LD_INT 3
7872: DOUBLE
7873: EQUAL
7874: IFTRUE 7878
7876: GO 7899
7878: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
7879: LD_VAR 0 2
7883: PPUSH
7884: LD_VAR 0 6
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PPUSH
7893: CALL_OW 52
7897: GO 7929
7899: LD_INT 4
7901: DOUBLE
7902: EQUAL
7903: IFTRUE 7907
7905: GO 7928
7907: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
7908: LD_VAR 0 2
7912: PPUSH
7913: LD_VAR 0 7
7917: PUSH
7918: LD_INT 1
7920: ARRAY
7921: PPUSH
7922: CALL_OW 52
7926: GO 7929
7928: POP
// end ;
7929: GO 7782
7931: POP
7932: POP
// CheckpointsCrew := [ ] ;
7933: LD_ADDR_EXP 9
7937: PUSH
7938: EMPTY
7939: ST_TO_ADDR
// for i = 1 to 6 do
7940: LD_ADDR_VAR 0 2
7944: PUSH
7945: DOUBLE
7946: LD_INT 1
7948: DEC
7949: ST_TO_ADDR
7950: LD_INT 6
7952: PUSH
7953: FOR_TO
7954: IFFALSE 8009
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7956: LD_INT 0
7958: PPUSH
7959: LD_INT 1
7961: PPUSH
7962: CALL_OW 12
7966: PPUSH
7967: LD_INT 7
7969: PUSH
7970: LD_INT 5
7972: PUSH
7973: LD_INT 3
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: PUSH
7981: LD_OWVAR 67
7985: ARRAY
7986: PPUSH
7987: CALL_OW 381
// CheckpointsCrew := CheckpointsCrew ^ CreateHuman ;
7991: LD_ADDR_EXP 9
7995: PUSH
7996: LD_EXP 9
8000: PUSH
8001: CALL_OW 44
8005: ADD
8006: ST_TO_ADDR
// end ;
8007: GO 7953
8009: POP
8010: POP
// turrety := FilterUnitsInArea ( Checkpoints , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
8011: LD_ADDR_VAR 0 5
8015: PUSH
8016: LD_INT 6
8018: PPUSH
8019: LD_INT 2
8021: PUSH
8022: LD_INT 30
8024: PUSH
8025: LD_INT 31
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 30
8034: PUSH
8035: LD_INT 32
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: PPUSH
8047: CALL_OW 70
8051: ST_TO_ADDR
// y := 1 ;
8052: LD_ADDR_VAR 0 4
8056: PUSH
8057: LD_INT 1
8059: ST_TO_ADDR
// for i in CheckpointsCrew do
8060: LD_ADDR_VAR 0 2
8064: PUSH
8065: LD_EXP 9
8069: PUSH
8070: FOR_IN
8071: IFFALSE 8131
// begin case GetClass ( i ) of 1 :
8073: LD_VAR 0 2
8077: PPUSH
8078: CALL_OW 257
8082: PUSH
8083: LD_INT 1
8085: DOUBLE
8086: EQUAL
8087: IFTRUE 8091
8089: GO 8128
8091: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
8092: LD_VAR 0 2
8096: PPUSH
8097: LD_VAR 0 5
8101: PUSH
8102: LD_VAR 0 4
8106: ARRAY
8107: PPUSH
8108: CALL_OW 52
// y = y + 1 ;
8112: LD_ADDR_VAR 0 4
8116: PUSH
8117: LD_VAR 0 4
8121: PUSH
8122: LD_INT 1
8124: PLUS
8125: ST_TO_ADDR
// end ; end ;
8126: GO 8129
8128: POP
// end ;
8129: GO 8070
8131: POP
8132: POP
// GaydarCrew := [ ] ;
8133: LD_ADDR_EXP 6
8137: PUSH
8138: EMPTY
8139: ST_TO_ADDR
// for i = 1 to 6 do
8140: LD_ADDR_VAR 0 2
8144: PUSH
8145: DOUBLE
8146: LD_INT 1
8148: DEC
8149: ST_TO_ADDR
8150: LD_INT 6
8152: PUSH
8153: FOR_TO
8154: IFFALSE 8209
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8156: LD_INT 0
8158: PPUSH
8159: LD_INT 1
8161: PPUSH
8162: CALL_OW 12
8166: PPUSH
8167: LD_INT 7
8169: PUSH
8170: LD_INT 5
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: LD_OWVAR 67
8185: ARRAY
8186: PPUSH
8187: CALL_OW 381
// GaydarCrew := GaydarCrew ^ CreateHuman ;
8191: LD_ADDR_EXP 6
8195: PUSH
8196: LD_EXP 6
8200: PUSH
8201: CALL_OW 44
8205: ADD
8206: ST_TO_ADDR
// end ;
8207: GO 8153
8209: POP
8210: POP
// for i = 1 to 2 do
8211: LD_ADDR_VAR 0 2
8215: PUSH
8216: DOUBLE
8217: LD_INT 1
8219: DEC
8220: ST_TO_ADDR
8221: LD_INT 2
8223: PUSH
8224: FOR_TO
8225: IFFALSE 8280
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8227: LD_INT 0
8229: PPUSH
8230: LD_INT 1
8232: PPUSH
8233: CALL_OW 12
8237: PPUSH
8238: LD_INT 7
8240: PUSH
8241: LD_INT 5
8243: PUSH
8244: LD_INT 3
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: LIST
8251: PUSH
8252: LD_OWVAR 67
8256: ARRAY
8257: PPUSH
8258: CALL_OW 382
// GaydarCrew := GaydarCrew ^ CreateHuman ;
8262: LD_ADDR_EXP 6
8266: PUSH
8267: LD_EXP 6
8271: PUSH
8272: CALL_OW 44
8276: ADD
8277: ST_TO_ADDR
// end ;
8278: GO 8224
8280: POP
8281: POP
// turrety := FilterUnitsInArea ( MiddleCheckPoint , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
8282: LD_ADDR_VAR 0 5
8286: PUSH
8287: LD_INT 1
8289: PPUSH
8290: LD_INT 2
8292: PUSH
8293: LD_INT 30
8295: PUSH
8296: LD_INT 31
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 30
8305: PUSH
8306: LD_INT 32
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PPUSH
8318: CALL_OW 70
8322: ST_TO_ADDR
// y := 1 ;
8323: LD_ADDR_VAR 0 4
8327: PUSH
8328: LD_INT 1
8330: ST_TO_ADDR
// for i in GaydarCrew do
8331: LD_ADDR_VAR 0 2
8335: PUSH
8336: LD_EXP 6
8340: PUSH
8341: FOR_IN
8342: IFFALSE 8425
// begin case GetClass ( i ) of 1 :
8344: LD_VAR 0 2
8348: PPUSH
8349: CALL_OW 257
8353: PUSH
8354: LD_INT 1
8356: DOUBLE
8357: EQUAL
8358: IFTRUE 8362
8360: GO 8399
8362: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
8363: LD_VAR 0 2
8367: PPUSH
8368: LD_VAR 0 5
8372: PUSH
8373: LD_VAR 0 4
8377: ARRAY
8378: PPUSH
8379: CALL_OW 52
// y = y + 1 ;
8383: LD_ADDR_VAR 0 4
8387: PUSH
8388: LD_VAR 0 4
8392: PUSH
8393: LD_INT 1
8395: PLUS
8396: ST_TO_ADDR
// end ; 2 :
8397: GO 8423
8399: LD_INT 2
8401: DOUBLE
8402: EQUAL
8403: IFTRUE 8407
8405: GO 8422
8407: POP
// PlaceHumanInUnit ( i , GaydarDepot ) ; end ;
8408: LD_VAR 0 2
8412: PPUSH
8413: LD_INT 144
8415: PPUSH
8416: CALL_OW 52
8420: GO 8423
8422: POP
// end ;
8423: GO 8341
8425: POP
8426: POP
// SouthCheckpointCrew := [ ] ;
8427: LD_ADDR_EXP 10
8431: PUSH
8432: EMPTY
8433: ST_TO_ADDR
// for i = 1 to 4 do
8434: LD_ADDR_VAR 0 2
8438: PUSH
8439: DOUBLE
8440: LD_INT 1
8442: DEC
8443: ST_TO_ADDR
8444: LD_INT 4
8446: PUSH
8447: FOR_TO
8448: IFFALSE 8503
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8450: LD_INT 0
8452: PPUSH
8453: LD_INT 1
8455: PPUSH
8456: CALL_OW 12
8460: PPUSH
8461: LD_INT 7
8463: PUSH
8464: LD_INT 5
8466: PUSH
8467: LD_INT 3
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: PUSH
8475: LD_OWVAR 67
8479: ARRAY
8480: PPUSH
8481: CALL_OW 381
// SouthCheckpointCrew := SouthCheckpointCrew ^ CreateHuman ;
8485: LD_ADDR_EXP 10
8489: PUSH
8490: LD_EXP 10
8494: PUSH
8495: CALL_OW 44
8499: ADD
8500: ST_TO_ADDR
// end ;
8501: GO 8447
8503: POP
8504: POP
// for i = 1 to 2 do
8505: LD_ADDR_VAR 0 2
8509: PUSH
8510: DOUBLE
8511: LD_INT 1
8513: DEC
8514: ST_TO_ADDR
8515: LD_INT 2
8517: PUSH
8518: FOR_TO
8519: IFFALSE 8574
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8521: LD_INT 0
8523: PPUSH
8524: LD_INT 1
8526: PPUSH
8527: CALL_OW 12
8531: PPUSH
8532: LD_INT 7
8534: PUSH
8535: LD_INT 5
8537: PUSH
8538: LD_INT 3
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: LIST
8545: PUSH
8546: LD_OWVAR 67
8550: ARRAY
8551: PPUSH
8552: CALL_OW 382
// SouthCheckpointCrew := SouthCheckpointCrew ^ CreateHuman ;
8556: LD_ADDR_EXP 10
8560: PUSH
8561: LD_EXP 10
8565: PUSH
8566: CALL_OW 44
8570: ADD
8571: ST_TO_ADDR
// end ;
8572: GO 8518
8574: POP
8575: POP
// turrety := FilterUnitsInArea ( SouthCheckpoint , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
8576: LD_ADDR_VAR 0 5
8580: PUSH
8581: LD_INT 2
8583: PPUSH
8584: LD_INT 2
8586: PUSH
8587: LD_INT 30
8589: PUSH
8590: LD_INT 31
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: LD_INT 30
8599: PUSH
8600: LD_INT 32
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: PPUSH
8612: CALL_OW 70
8616: ST_TO_ADDR
// y := 1 ;
8617: LD_ADDR_VAR 0 4
8621: PUSH
8622: LD_INT 1
8624: ST_TO_ADDR
// for i in SouthCheckpointCrew do
8625: LD_ADDR_VAR 0 2
8629: PUSH
8630: LD_EXP 10
8634: PUSH
8635: FOR_IN
8636: IFFALSE 8719
// begin case GetClass ( i ) of 1 :
8638: LD_VAR 0 2
8642: PPUSH
8643: CALL_OW 257
8647: PUSH
8648: LD_INT 1
8650: DOUBLE
8651: EQUAL
8652: IFTRUE 8656
8654: GO 8693
8656: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
8657: LD_VAR 0 2
8661: PPUSH
8662: LD_VAR 0 5
8666: PUSH
8667: LD_VAR 0 4
8671: ARRAY
8672: PPUSH
8673: CALL_OW 52
// y = y + 1 ;
8677: LD_ADDR_VAR 0 4
8681: PUSH
8682: LD_VAR 0 4
8686: PUSH
8687: LD_INT 1
8689: PLUS
8690: ST_TO_ADDR
// end ; 2 :
8691: GO 8717
8693: LD_INT 2
8695: DOUBLE
8696: EQUAL
8697: IFTRUE 8701
8699: GO 8716
8701: POP
// PlaceHumanInUnit ( i , SouthDepot ) ; end ;
8702: LD_VAR 0 2
8706: PPUSH
8707: LD_INT 193
8709: PPUSH
8710: CALL_OW 52
8714: GO 8717
8716: POP
// end ;
8717: GO 8635
8719: POP
8720: POP
// end ; end_of_file
8721: LD_VAR 0 1
8725: RET
// every 0 0$1 trigger IsDead ( YakotichBase ) or IsDead ( NorthLenin ) or IsDead ( SouthLenin ) do
8726: LD_INT 312
8728: PPUSH
8729: CALL_OW 301
8733: PUSH
8734: LD_INT 253
8736: PPUSH
8737: CALL_OW 301
8741: OR
8742: PUSH
8743: LD_INT 218
8745: PPUSH
8746: CALL_OW 301
8750: OR
8751: IFFALSE 8763
8753: GO 8755
8755: DISABLE
// begin YouLost ( DepotDead ) ;
8756: LD_STRING DepotDead
8758: PPUSH
8759: CALL_OW 104
// end ;
8763: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 3 and s2 = 6 ) or ( s2 = 6 and s1 = 3 ) or ( s2 = 4 and s1 = 3 ) or ( s2 = 3 and s1 = 4 ) then
8764: LD_VAR 0 1
8768: PUSH
8769: LD_INT 3
8771: EQUAL
8772: PUSH
8773: LD_VAR 0 2
8777: PUSH
8778: LD_INT 6
8780: EQUAL
8781: AND
8782: PUSH
8783: LD_VAR 0 2
8787: PUSH
8788: LD_INT 6
8790: EQUAL
8791: PUSH
8792: LD_VAR 0 1
8796: PUSH
8797: LD_INT 3
8799: EQUAL
8800: AND
8801: OR
8802: PUSH
8803: LD_VAR 0 2
8807: PUSH
8808: LD_INT 4
8810: EQUAL
8811: PUSH
8812: LD_VAR 0 1
8816: PUSH
8817: LD_INT 3
8819: EQUAL
8820: AND
8821: OR
8822: PUSH
8823: LD_VAR 0 2
8827: PUSH
8828: LD_INT 3
8830: EQUAL
8831: PUSH
8832: LD_VAR 0 1
8836: PUSH
8837: LD_INT 4
8839: EQUAL
8840: AND
8841: OR
8842: IFFALSE 8851
// begin YouLost ( AllyAttacked ) ;
8844: LD_STRING AllyAttacked
8846: PPUSH
8847: CALL_OW 104
// end ; end ;
8851: PPOPN 2
8853: END
// on BuildingCaptured ( cb , bfs , cu ) do begin if GetSide ( cb ) = 6 and GetSide ( cu ) = 3 then
8854: LD_VAR 0 1
8858: PPUSH
8859: CALL_OW 255
8863: PUSH
8864: LD_INT 6
8866: EQUAL
8867: PUSH
8868: LD_VAR 0 3
8872: PPUSH
8873: CALL_OW 255
8877: PUSH
8878: LD_INT 3
8880: EQUAL
8881: AND
8882: IFFALSE 8891
// begin YouLost ( AllyAttacked ) ;
8884: LD_STRING AllyAttacked
8886: PPUSH
8887: CALL_OW 104
// end ; end ;
8891: PPOPN 3
8893: END
// export ru_bul , ru2_bul ; on UnitDestroyed ( un ) do begin if un = Yakotich then
8894: LD_VAR 0 1
8898: PUSH
8899: LD_EXP 13
8903: EQUAL
8904: IFFALSE 8913
// YouLost ( YakotichDead ) ;
8906: LD_STRING YakotichDead
8908: PPUSH
8909: CALL_OW 104
// if un = Mietek then
8913: LD_VAR 0 1
8917: PUSH
8918: LD_EXP 14
8922: EQUAL
8923: IFFALSE 8932
// YouLost ( MietekDead ) ;
8925: LD_STRING MietekDead
8927: PPUSH
8928: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
8932: LD_VAR 0 1
8936: PUSH
8937: LD_INT 22
8939: PUSH
8940: LD_INT 3
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: PUSH
8947: LD_INT 3
8949: PUSH
8950: LD_INT 23
8952: PUSH
8953: LD_INT 0
8955: PUSH
8956: EMPTY
8957: LIST
8958: LIST
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 21
8966: PUSH
8967: LD_INT 1
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: PPUSH
8979: CALL_OW 69
8983: IN
8984: IFFALSE 8993
// YouLost ( PeopleDead ) ;
8986: LD_STRING PeopleDead
8988: PPUSH
8989: CALL_OW 104
// end ;
8993: PPOPN 1
8995: END
// on BuildingStarted ( b , builder ) do var x , y ;
8996: LD_INT 0
8998: PPUSH
8999: PPUSH
// begin if GetBType ( b ) = b_bunker or GetBType ( b ) = b_breastwork and GetSide ( b ) = 4 then
9000: LD_VAR 0 1
9004: PPUSH
9005: CALL_OW 266
9009: PUSH
9010: LD_INT 32
9012: EQUAL
9013: PUSH
9014: LD_VAR 0 1
9018: PPUSH
9019: CALL_OW 266
9023: PUSH
9024: LD_INT 31
9026: EQUAL
9027: PUSH
9028: LD_VAR 0 1
9032: PPUSH
9033: CALL_OW 255
9037: PUSH
9038: LD_INT 4
9040: EQUAL
9041: AND
9042: OR
9043: IFFALSE 9132
// begin x = GetX ( b ) ;
9045: LD_ADDR_VAR 0 3
9049: PUSH
9050: LD_VAR 0 1
9054: PPUSH
9055: CALL_OW 250
9059: ST_TO_ADDR
// y = GetY ( b ) ;
9060: LD_ADDR_VAR 0 4
9064: PUSH
9065: LD_VAR 0 1
9069: PPUSH
9070: CALL_OW 251
9074: ST_TO_ADDR
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , x , y ) ;
9075: LD_INT 22
9077: PUSH
9078: LD_INT 4
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: LD_INT 25
9087: PUSH
9088: LD_INT 1
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PUSH
9095: LD_INT 3
9097: PUSH
9098: LD_INT 54
9100: PUSH
9101: EMPTY
9102: LIST
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: LIST
9112: PPUSH
9113: CALL_OW 69
9117: PPUSH
9118: LD_VAR 0 3
9122: PPUSH
9123: LD_VAR 0 4
9127: PPUSH
9128: CALL_OW 171
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 4 then
9132: LD_VAR 0 1
9136: PPUSH
9137: CALL_OW 266
9141: PUSH
9142: LD_INT 6
9144: EQUAL
9145: PUSH
9146: LD_VAR 0 1
9150: PPUSH
9151: CALL_OW 255
9155: PUSH
9156: LD_INT 4
9158: EQUAL
9159: AND
9160: IFFALSE 9249
// begin x = GetX ( b ) ;
9162: LD_ADDR_VAR 0 3
9166: PUSH
9167: LD_VAR 0 1
9171: PPUSH
9172: CALL_OW 250
9176: ST_TO_ADDR
// y = GetY ( b ) ;
9177: LD_ADDR_VAR 0 4
9181: PUSH
9182: LD_VAR 0 1
9186: PPUSH
9187: CALL_OW 251
9191: ST_TO_ADDR
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) , x , y ) ;
9192: LD_INT 22
9194: PUSH
9195: LD_INT 4
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PUSH
9202: LD_INT 25
9204: PUSH
9205: LD_INT 4
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 3
9214: PUSH
9215: LD_INT 54
9217: PUSH
9218: EMPTY
9219: LIST
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: PPUSH
9230: CALL_OW 69
9234: PPUSH
9235: LD_VAR 0 3
9239: PPUSH
9240: LD_VAR 0 4
9244: PPUSH
9245: CALL_OW 171
// end ; if GetBType ( b ) = b_workshop and GetSide ( b ) = 4 then
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 266
9258: PUSH
9259: LD_INT 2
9261: EQUAL
9262: PUSH
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL_OW 255
9272: PUSH
9273: LD_INT 4
9275: EQUAL
9276: AND
9277: IFFALSE 9366
// begin x = GetX ( b ) ;
9279: LD_ADDR_VAR 0 3
9283: PUSH
9284: LD_VAR 0 1
9288: PPUSH
9289: CALL_OW 250
9293: ST_TO_ADDR
// y = GetY ( b ) ;
9294: LD_ADDR_VAR 0 4
9298: PUSH
9299: LD_VAR 0 1
9303: PPUSH
9304: CALL_OW 251
9308: ST_TO_ADDR
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 3 ] , [ f_not , [ f_inside ] ] ] ) , x , y ) ;
9309: LD_INT 22
9311: PUSH
9312: LD_INT 4
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 25
9321: PUSH
9322: LD_INT 3
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 3
9331: PUSH
9332: LD_INT 54
9334: PUSH
9335: EMPTY
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: PPUSH
9347: CALL_OW 69
9351: PPUSH
9352: LD_VAR 0 3
9356: PPUSH
9357: LD_VAR 0 4
9361: PPUSH
9362: CALL_OW 171
// end ; end ;
9366: PPOPN 4
9368: END
// export BierezovDepot , BierezovArmoury ; on BuildingComplete ( b ) do var i ;
9369: LD_INT 0
9371: PPUSH
// begin if GetBType ( b ) = b_bunker and GetSide ( b ) = 6 and IsInArea ( b , NorthLeninArea ) then
9372: LD_VAR 0 1
9376: PPUSH
9377: CALL_OW 266
9381: PUSH
9382: LD_INT 32
9384: EQUAL
9385: PUSH
9386: LD_VAR 0 1
9390: PPUSH
9391: CALL_OW 255
9395: PUSH
9396: LD_INT 6
9398: EQUAL
9399: AND
9400: PUSH
9401: LD_VAR 0 1
9405: PPUSH
9406: LD_INT 5
9408: PPUSH
9409: CALL_OW 308
9413: AND
9414: IFFALSE 9436
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
9416: LD_VAR 0 1
9420: PPUSH
9421: LD_INT 43
9423: PPUSH
9424: LD_INT 46
9426: PPUSH
9427: CALL_OW 12
9431: PPUSH
9432: CALL_OW 208
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9436: LD_VAR 0 1
9440: PPUSH
9441: CALL_OW 266
9445: PUSH
9446: LD_INT 32
9448: EQUAL
9449: PUSH
9450: LD_VAR 0 1
9454: PPUSH
9455: CALL_OW 255
9459: PUSH
9460: LD_INT 4
9462: EQUAL
9463: AND
9464: PUSH
9465: LD_VAR 0 1
9469: PPUSH
9470: LD_INT 27
9472: PPUSH
9473: CALL_OW 308
9477: AND
9478: IFFALSE 9500
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
9480: LD_VAR 0 1
9484: PPUSH
9485: LD_INT 43
9487: PPUSH
9488: LD_INT 46
9490: PPUSH
9491: CALL_OW 12
9495: PPUSH
9496: CALL_OW 208
// end ; if GetBType ( b ) = b_bunker or GetBType ( b ) = b_breastwork and GetSide ( b ) = 4 then
9500: LD_VAR 0 1
9504: PPUSH
9505: CALL_OW 266
9509: PUSH
9510: LD_INT 32
9512: EQUAL
9513: PUSH
9514: LD_VAR 0 1
9518: PPUSH
9519: CALL_OW 266
9523: PUSH
9524: LD_INT 31
9526: EQUAL
9527: PUSH
9528: LD_VAR 0 1
9532: PPUSH
9533: CALL_OW 255
9537: PUSH
9538: LD_INT 4
9540: EQUAL
9541: AND
9542: OR
9543: IFFALSE 9603
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff Bierezov , b ) ;
9545: LD_INT 22
9547: PUSH
9548: LD_INT 4
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 25
9557: PUSH
9558: LD_INT 1
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: LD_INT 3
9567: PUSH
9568: LD_INT 54
9570: PUSH
9571: EMPTY
9572: LIST
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: PPUSH
9583: CALL_OW 69
9587: PUSH
9588: LD_EXP 42
9592: DIFF
9593: PPUSH
9594: LD_VAR 0 1
9598: PPUSH
9599: CALL_OW 180
// end ; if GetBType ( b ) = b_depot and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9603: LD_VAR 0 1
9607: PPUSH
9608: CALL_OW 266
9612: PUSH
9613: LD_INT 0
9615: EQUAL
9616: PUSH
9617: LD_VAR 0 1
9621: PPUSH
9622: CALL_OW 255
9626: PUSH
9627: LD_INT 4
9629: EQUAL
9630: AND
9631: PUSH
9632: LD_VAR 0 1
9636: PPUSH
9637: LD_INT 27
9639: PPUSH
9640: CALL_OW 308
9644: AND
9645: IFFALSE 9737
// begin SetBName ( b , zinoviev ) ;
9647: LD_VAR 0 1
9651: PPUSH
9652: LD_STRING zinoviev
9654: PPUSH
9655: CALL_OW 500
// DialogueOn ;
9659: CALL_OW 6
// CenterNowOnUnits ( Bierezov ) ;
9663: LD_EXP 42
9667: PPUSH
9668: CALL_OW 87
// SayRadio ( Bierezov , 4Bierezov-01 ) ;
9672: LD_EXP 42
9676: PPUSH
9677: LD_STRING 4Bierezov-01
9679: PPUSH
9680: CALL_OW 94
// DialogueOff ;
9684: CALL_OW 7
// ComUpgrade ( b ) ;
9688: LD_VAR 0 1
9692: PPUSH
9693: CALL_OW 146
// SetResourceType ( GetBase ( b ) , mat_cans , 2500 ) ;
9697: LD_VAR 0 1
9701: PPUSH
9702: CALL_OW 274
9706: PPUSH
9707: LD_INT 1
9709: PPUSH
9710: LD_INT 2500
9712: PPUSH
9713: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 500 ) ;
9717: LD_VAR 0 1
9721: PPUSH
9722: CALL_OW 274
9726: PPUSH
9727: LD_INT 2
9729: PPUSH
9730: LD_INT 500
9732: PPUSH
9733: CALL_OW 277
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9737: LD_VAR 0 1
9741: PPUSH
9742: CALL_OW 266
9746: PUSH
9747: LD_INT 6
9749: EQUAL
9750: PUSH
9751: LD_VAR 0 1
9755: PPUSH
9756: CALL_OW 255
9760: PUSH
9761: LD_INT 4
9763: EQUAL
9764: AND
9765: PUSH
9766: LD_VAR 0 1
9770: PPUSH
9771: LD_INT 27
9773: PPUSH
9774: CALL_OW 308
9778: AND
9779: IFFALSE 9793
// begin ComUpgradeLab ( b , 10 ) ;
9781: LD_VAR 0 1
9785: PPUSH
9786: LD_INT 10
9788: PPUSH
9789: CALL_OW 147
// end ; if GetBType ( b ) = b_workshop and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9793: LD_VAR 0 1
9797: PPUSH
9798: CALL_OW 266
9802: PUSH
9803: LD_INT 2
9805: EQUAL
9806: PUSH
9807: LD_VAR 0 1
9811: PPUSH
9812: CALL_OW 255
9816: PUSH
9817: LD_INT 4
9819: EQUAL
9820: AND
9821: PUSH
9822: LD_VAR 0 1
9826: PPUSH
9827: LD_INT 27
9829: PPUSH
9830: CALL_OW 308
9834: AND
9835: IFFALSE 9846
// begin ComUpgrade ( b ) ;
9837: LD_VAR 0 1
9841: PPUSH
9842: CALL_OW 146
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 6 and IsInArea ( b , SouthLeninArea ) and control_taken_over = false then
9846: LD_VAR 0 1
9850: PPUSH
9851: CALL_OW 266
9855: PUSH
9856: LD_INT 32
9858: EQUAL
9859: PUSH
9860: LD_VAR 0 1
9864: PPUSH
9865: CALL_OW 255
9869: PUSH
9870: LD_INT 6
9872: EQUAL
9873: AND
9874: PUSH
9875: LD_VAR 0 1
9879: PPUSH
9880: LD_INT 4
9882: PPUSH
9883: CALL_OW 308
9887: AND
9888: PUSH
9889: LD_EXP 63
9893: PUSH
9894: LD_INT 0
9896: EQUAL
9897: AND
9898: IFFALSE 9920
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
9900: LD_VAR 0 1
9904: PPUSH
9905: LD_INT 43
9907: PPUSH
9908: LD_INT 46
9910: PPUSH
9911: CALL_OW 12
9915: PPUSH
9916: CALL_OW 208
// end ; if GetBType ( b ) = b_armoury and GetSide ( b ) = 4 then
9920: LD_VAR 0 1
9924: PPUSH
9925: CALL_OW 266
9929: PUSH
9930: LD_INT 4
9932: EQUAL
9933: PUSH
9934: LD_VAR 0 1
9938: PPUSH
9939: CALL_OW 255
9943: PUSH
9944: LD_INT 4
9946: EQUAL
9947: AND
9948: IFFALSE 9960
// begin BierezovArmoury = b ;
9950: LD_ADDR_EXP 78
9954: PUSH
9955: LD_VAR 0 1
9959: ST_TO_ADDR
// end ; end ;
9960: PPOPN 2
9962: END
// on UpgradeComplete ( b ) do begin if GetBType ( b ) = b_warehouse and GetSide ( b ) = 4 then
9963: LD_VAR 0 1
9967: PPUSH
9968: CALL_OW 266
9972: PUSH
9973: LD_INT 1
9975: EQUAL
9976: PUSH
9977: LD_VAR 0 1
9981: PPUSH
9982: CALL_OW 255
9986: PUSH
9987: LD_INT 4
9989: EQUAL
9990: AND
9991: IFFALSE 10038
// begin BierezovDepot = b ;
9993: LD_ADDR_EXP 77
9997: PUSH
9998: LD_VAR 0 1
10002: ST_TO_ADDR
// Wait ( 0 0$3 ) ;
10003: LD_INT 105
10005: PPUSH
10006: CALL_OW 67
// ComEnterUnit ( Bierezov , BierezovDepot ) ;
10010: LD_EXP 42
10014: PPUSH
10015: LD_EXP 77
10019: PPUSH
10020: CALL_OW 120
// ComEnterUnit ( Aleinik , BierezovDepot ) ;
10024: LD_EXP 45
10028: PPUSH
10029: LD_EXP 77
10033: PPUSH
10034: CALL_OW 120
// end ; if GetBType ( b ) = b_lab_half and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
10038: LD_VAR 0 1
10042: PPUSH
10043: CALL_OW 266
10047: PUSH
10048: LD_INT 7
10050: EQUAL
10051: PUSH
10052: LD_VAR 0 1
10056: PPUSH
10057: CALL_OW 255
10061: PUSH
10062: LD_INT 4
10064: EQUAL
10065: AND
10066: PUSH
10067: LD_VAR 0 1
10071: PPUSH
10072: LD_INT 27
10074: PPUSH
10075: CALL_OW 308
10079: AND
10080: IFFALSE 10094
// begin AddComUpgradeLab ( b , 12 ) ;
10082: LD_VAR 0 1
10086: PPUSH
10087: LD_INT 12
10089: PPUSH
10090: CALL_OW 207
// end ; if GetBType ( b ) = b_lab_full and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
10094: LD_VAR 0 1
10098: PPUSH
10099: CALL_OW 266
10103: PUSH
10104: LD_INT 8
10106: EQUAL
10107: PUSH
10108: LD_VAR 0 1
10112: PPUSH
10113: CALL_OW 255
10117: PUSH
10118: LD_INT 4
10120: EQUAL
10121: AND
10122: PUSH
10123: LD_VAR 0 1
10127: PPUSH
10128: LD_INT 27
10130: PPUSH
10131: CALL_OW 308
10135: AND
10136: IFFALSE 10260
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 4 ] ] ) , b ) ;
10138: LD_INT 22
10140: PUSH
10141: LD_INT 4
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 25
10150: PUSH
10151: LD_INT 4
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PPUSH
10162: CALL_OW 69
10166: PPUSH
10167: LD_VAR 0 1
10171: PPUSH
10172: CALL_OW 180
// AddComResearch ( b , 83 ) ;
10176: LD_VAR 0 1
10180: PPUSH
10181: LD_INT 83
10183: PPUSH
10184: CALL_OW 184
// AddComResearch ( b , 84 ) ;
10188: LD_VAR 0 1
10192: PPUSH
10193: LD_INT 84
10195: PPUSH
10196: CALL_OW 184
// AddComResearch ( b , 85 ) ;
10200: LD_VAR 0 1
10204: PPUSH
10205: LD_INT 85
10207: PPUSH
10208: CALL_OW 184
// AddComResearch ( b , 48 ) ;
10212: LD_VAR 0 1
10216: PPUSH
10217: LD_INT 48
10219: PPUSH
10220: CALL_OW 184
// AddComResearch ( b , 49 ) ;
10224: LD_VAR 0 1
10228: PPUSH
10229: LD_INT 49
10231: PPUSH
10232: CALL_OW 184
// AddComResearch ( b , 51 ) ;
10236: LD_VAR 0 1
10240: PPUSH
10241: LD_INT 51
10243: PPUSH
10244: CALL_OW 184
// AddComResearch ( b , 57 ) ;
10248: LD_VAR 0 1
10252: PPUSH
10253: LD_INT 57
10255: PPUSH
10256: CALL_OW 184
// end ; if GetBType ( b ) = b_factory and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
10260: LD_VAR 0 1
10264: PPUSH
10265: CALL_OW 266
10269: PUSH
10270: LD_INT 3
10272: EQUAL
10273: PUSH
10274: LD_VAR 0 1
10278: PPUSH
10279: CALL_OW 255
10283: PUSH
10284: LD_INT 4
10286: EQUAL
10287: AND
10288: PUSH
10289: LD_VAR 0 1
10293: PPUSH
10294: LD_INT 27
10296: PPUSH
10297: CALL_OW 308
10301: AND
10302: IFFALSE 10342
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 3 ] ] ) , b ) ;
10304: LD_INT 22
10306: PUSH
10307: LD_INT 4
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: PUSH
10314: LD_INT 25
10316: PUSH
10317: LD_INT 3
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PPUSH
10328: CALL_OW 69
10332: PPUSH
10333: LD_VAR 0 1
10337: PPUSH
10338: CALL_OW 180
// end ; end ;
10342: PPOPN 1
10344: END
// on ApemanTamed ( ape , scientist ) do begin if GetSide ( ape ) = 3 and apeman_tamed = false then
10345: LD_VAR 0 1
10349: PPUSH
10350: CALL_OW 255
10354: PUSH
10355: LD_INT 3
10357: EQUAL
10358: PUSH
10359: LD_EXP 65
10363: PUSH
10364: LD_INT 0
10366: EQUAL
10367: AND
10368: IFFALSE 10422
// begin DialogueOn ;
10370: CALL_OW 6
// Say ( Grigori , 4Grig-Ape-02 ) ;
10374: LD_EXP 28
10378: PPUSH
10379: LD_STRING 4Grig-Ape-02
10381: PPUSH
10382: CALL_OW 88
// Say ( Yakotich , 4Yak-Ape-02 ) ;
10386: LD_EXP 13
10390: PPUSH
10391: LD_STRING 4Yak-Ape-02
10393: PPUSH
10394: CALL_OW 88
// Say ( Grigori , 4Grig-Ape-03 ) ;
10398: LD_EXP 28
10402: PPUSH
10403: LD_STRING 4Grig-Ape-03
10405: PPUSH
10406: CALL_OW 88
// DialogueOff ;
10410: CALL_OW 7
// apeman_tamed = true ;
10414: LD_ADDR_EXP 65
10418: PUSH
10419: LD_INT 1
10421: ST_TO_ADDR
// end ; end ;
10422: PPOPN 2
10424: END
// on VehicleRecycled ( BuildingID , VehicleID , Side , Nation , X , Y , Direction , Chassis , Controller , Engine , Weapon ) do begin if Side = 3 and Nation = 2 and Weapon = 26 then
10425: LD_VAR 0 3
10429: PUSH
10430: LD_INT 3
10432: EQUAL
10433: PUSH
10434: LD_VAR 0 4
10438: PUSH
10439: LD_INT 2
10441: EQUAL
10442: AND
10443: PUSH
10444: LD_VAR 0 11
10448: PUSH
10449: LD_INT 26
10451: EQUAL
10452: AND
10453: IFFALSE 10468
// begin SetTech ( 70 , 3 , 1 ) ;
10455: LD_INT 70
10457: PPUSH
10458: LD_INT 3
10460: PPUSH
10461: LD_INT 1
10463: PPUSH
10464: CALL_OW 322
// end ; end ;
10468: PPOPN 11
10470: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = 89 and GetSide ( vehicle ) = 6 then
10471: LD_VAR 0 1
10475: PPUSH
10476: CALL_OW 264
10480: PUSH
10481: LD_INT 89
10483: EQUAL
10484: PUSH
10485: LD_VAR 0 1
10489: PPUSH
10490: CALL_OW 255
10494: PUSH
10495: LD_INT 6
10497: EQUAL
10498: AND
10499: IFFALSE 10657
// begin Wait ( 0 0$5 ) ;
10501: LD_INT 175
10503: PPUSH
10504: CALL_OW 67
// DialogueOn ;
10508: CALL_OW 6
// CenterNowOnUnits ( vehicle ) ;
10512: LD_VAR 0 1
10516: PPUSH
10517: CALL_OW 87
// SayRadio ( Bukov , 4Bukov-Transport-01 ) ;
10521: LD_EXP 57
10525: PPUSH
10526: LD_STRING 4Bukov-Transport-01
10528: PPUSH
10529: CALL_OW 94
// SayRadio ( Platonov , 4Plat-Transport-01 ) ;
10533: LD_EXP 54
10537: PPUSH
10538: LD_STRING 4Plat-Transport-01
10540: PPUSH
10541: CALL_OW 94
// TransportQuery ( 1 ) ;
10545: LD_INT 1
10547: PPUSH
10548: CALL 4947 0 1
// SetAreaMapShow ( LeninCargo , 2 ) ;
10552: LD_INT 17
10554: PPUSH
10555: LD_INT 2
10557: PPUSH
10558: CALL_OW 424
// CenterNowOnXY ( 102 , 165 ) ;
10562: LD_INT 102
10564: PPUSH
10565: LD_INT 165
10567: PPUSH
10568: CALL_OW 86
// DialogueOff ;
10572: CALL_OW 7
// repeat AddComTransport ( vehicle , BukovBase , mat_cans ) ;
10576: LD_VAR 0 1
10580: PPUSH
10581: LD_INT 127
10583: PPUSH
10584: LD_INT 1
10586: PPUSH
10587: CALL_OW 211
// AddComGive ( vehicle , SouthLenin ) ;
10591: LD_VAR 0 1
10595: PPUSH
10596: LD_INT 218
10598: PPUSH
10599: CALL_OW 221
// SetFuel ( vehicle , 85 ) ;
10603: LD_VAR 0 1
10607: PPUSH
10608: LD_INT 85
10610: PPUSH
10611: CALL_OW 240
// wait ( 0 0$1 ) ;
10615: LD_INT 35
10617: PPUSH
10618: CALL_OW 67
// until fall_back = true ;
10622: LD_EXP 69
10626: PUSH
10627: LD_INT 1
10629: EQUAL
10630: IFFALSE 10576
// if fall_back = true then
10632: LD_EXP 69
10636: PUSH
10637: LD_INT 1
10639: EQUAL
10640: IFFALSE 10657
// ComMoveXY ( vehicle , 110 , 168 ) ;
10642: LD_VAR 0 1
10646: PPUSH
10647: LD_INT 110
10649: PPUSH
10650: LD_INT 168
10652: PPUSH
10653: CALL_OW 111
// end ; end ;
10657: PPOPN 2
10659: END
// every 0 0$1 trigger Researched ( 6 , 84 ) do
10660: LD_INT 6
10662: PPUSH
10663: LD_INT 84
10665: PPUSH
10666: CALL_OW 325
10670: IFFALSE 10694
10672: GO 10674
10674: DISABLE
// begin AddComConstruct ( BukovF , 24 , 1 , 1 , 89 ) ;
10675: LD_INT 128
10677: PPUSH
10678: LD_INT 24
10680: PPUSH
10681: LD_INT 1
10683: PPUSH
10684: LD_INT 1
10686: PPUSH
10687: LD_INT 89
10689: PPUSH
10690: CALL_OW 185
// end ;
10694: END
// every 0 0$1 trigger Researched ( 3 , 34 ) do
10695: LD_INT 3
10697: PPUSH
10698: LD_INT 34
10700: PPUSH
10701: CALL_OW 325
10705: IFFALSE 10745
10707: GO 10709
10709: DISABLE
// begin DialogueOn ;
10710: CALL_OW 6
// Say ( Vasilij , 4Vas-HG-01 ) ;
10714: LD_EXP 16
10718: PPUSH
10719: LD_STRING 4Vas-HG-01
10721: PPUSH
10722: CALL_OW 88
// DialogueOff ;
10726: CALL_OW 7
// ChangeMissionObjectives ( hg2 ) ;
10730: LD_STRING hg2
10732: PPUSH
10733: CALL_OW 337
// heavy_gun_researched = true ;
10737: LD_ADDR_EXP 67
10741: PUSH
10742: LD_INT 1
10744: ST_TO_ADDR
// end ;
10745: END
// every 0 0$1 trigger Researched ( 3 , 1 ) do
10746: LD_INT 3
10748: PPUSH
10749: LD_INT 1
10751: PPUSH
10752: CALL_OW 325
10756: IFFALSE 10793
10758: GO 10760
10760: DISABLE
// begin DialogueOn ;
10761: CALL_OW 6
// Say ( Grigori , 4Grig-Ape-01 ) ;
10765: LD_EXP 28
10769: PPUSH
10770: LD_STRING 4Grig-Ape-01
10772: PPUSH
10773: CALL_OW 88
// Say ( Yakotich , 4Yak-Ape-01 ) ;
10777: LD_EXP 13
10781: PPUSH
10782: LD_STRING 4Yak-Ape-01
10784: PPUSH
10785: CALL_OW 88
// DialogueOff ;
10789: CALL_OW 7
// end ;
10793: END
// every 0 0$1 trigger Researched ( 3 , 70 ) do
10794: LD_INT 3
10796: PPUSH
10797: LD_INT 70
10799: PPUSH
10800: CALL_OW 325
10804: IFFALSE 10868
10806: GO 10808
10808: DISABLE
// begin DialogueOn ;
10809: CALL_OW 6
// Say ( Stanislav , 4Stan-Flame-01 ) ;
10813: LD_EXP 26
10817: PPUSH
10818: LD_STRING 4Stan-Flame-01
10820: PPUSH
10821: CALL_OW 88
// Say ( Stanislav , 4Stan-Flame-02 ) ;
10825: LD_EXP 26
10829: PPUSH
10830: LD_STRING 4Stan-Flame-02
10832: PPUSH
10833: CALL_OW 88
// Say ( Stanislav , 4Stan-Flame-03 ) ;
10837: LD_EXP 26
10841: PPUSH
10842: LD_STRING 4Stan-Flame-03
10844: PPUSH
10845: CALL_OW 88
// ChangeMissionObjectives ( flame ) ;
10849: LD_STRING flame
10851: PPUSH
10852: CALL_OW 337
// flame_researched = true ;
10856: LD_ADDR_EXP 66
10860: PUSH
10861: LD_INT 1
10863: ST_TO_ADDR
// DialogueOff ;
10864: CALL_OW 7
// end ;
10868: END
// every 0 0$5 trigger FilterUnitsInArea ( BierezovBaseArea , ( [ [ f_side , 4 ] , [ f_constructed ] , [ f_btype , b_breastwork ] ] ) ) >= 1 do
10869: LD_INT 27
10871: PPUSH
10872: LD_INT 22
10874: PUSH
10875: LD_INT 4
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 57
10884: PUSH
10885: EMPTY
10886: LIST
10887: PUSH
10888: LD_INT 30
10890: PUSH
10891: LD_INT 31
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: LIST
10902: PPUSH
10903: CALL_OW 70
10907: PUSH
10908: LD_INT 1
10910: GREATEREQUAL
10911: IFFALSE 11172
10913: GO 10915
10915: DISABLE
// begin Wait ( 0 0$15 ) ;
10916: LD_INT 525
10918: PPUSH
10919: CALL_OW 67
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_outside ] , [ f_class , 1 ] ] ) , BierezovArmoury ) ;
10923: LD_INT 22
10925: PUSH
10926: LD_INT 4
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 56
10935: PUSH
10936: EMPTY
10937: LIST
10938: PUSH
10939: LD_INT 25
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: LIST
10953: PPUSH
10954: CALL_OW 69
10958: PPUSH
10959: LD_EXP 78
10963: PPUSH
10964: CALL_OW 180
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_outside ] , [ f_class , 2 ] ] ) , BierezovDepot ) ;
10968: LD_INT 22
10970: PUSH
10971: LD_INT 4
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: LD_INT 56
10980: PUSH
10981: EMPTY
10982: LIST
10983: PUSH
10984: LD_INT 25
10986: PUSH
10987: LD_INT 2
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: LIST
10998: PPUSH
10999: CALL_OW 69
11003: PPUSH
11004: LD_EXP 77
11008: PPUSH
11009: CALL_OW 180
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) , 23 , 1 , 1 , rand ( 44 , 46 ) ) ;
11013: LD_INT 22
11015: PUSH
11016: LD_INT 4
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 30
11025: PUSH
11026: LD_INT 3
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PPUSH
11037: CALL_OW 69
11041: PPUSH
11042: LD_INT 23
11044: PPUSH
11045: LD_INT 1
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: LD_INT 44
11053: PPUSH
11054: LD_INT 46
11056: PPUSH
11057: CALL_OW 12
11061: PPUSH
11062: CALL_OW 185
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) , 23 , 1 , 1 , rand ( 45 , 46 ) ) ;
11066: LD_INT 22
11068: PUSH
11069: LD_INT 4
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 30
11078: PUSH
11079: LD_INT 3
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PPUSH
11090: CALL_OW 69
11094: PPUSH
11095: LD_INT 23
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: LD_INT 1
11103: PPUSH
11104: LD_INT 45
11106: PPUSH
11107: LD_INT 46
11109: PPUSH
11110: CALL_OW 12
11114: PPUSH
11115: CALL_OW 185
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) , 23 , 1 , 1 , rand ( 43 , 46 ) ) ;
11119: LD_INT 22
11121: PUSH
11122: LD_INT 4
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 30
11131: PUSH
11132: LD_INT 3
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: PPUSH
11143: CALL_OW 69
11147: PPUSH
11148: LD_INT 23
11150: PPUSH
11151: LD_INT 1
11153: PPUSH
11154: LD_INT 1
11156: PPUSH
11157: LD_INT 43
11159: PPUSH
11160: LD_INT 46
11162: PPUSH
11163: CALL_OW 12
11167: PPUSH
11168: CALL_OW 185
// end ; end_of_file
11172: END
// export OmarTanks , OmarMechs , OmarMastodont ; export function InitArabianAI ; var i , z , y , turrety , fabryka , lab , zbrojka ; begin
11173: LD_INT 0
11175: PPUSH
11176: PPUSH
11177: PPUSH
11178: PPUSH
11179: PPUSH
11180: PPUSH
11181: PPUSH
11182: PPUSH
// uc_side := 2 ;
11183: LD_ADDR_OWVAR 20
11187: PUSH
11188: LD_INT 2
11190: ST_TO_ADDR
// uc_nation := 2 ;
11191: LD_ADDR_OWVAR 21
11195: PUSH
11196: LD_INT 2
11198: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , false ,  ) ;
11199: LD_ADDR_EXP 30
11203: PUSH
11204: LD_STRING Heike
11206: PPUSH
11207: LD_INT 0
11209: PPUSH
11210: LD_STRING 
11212: PPUSH
11213: CALL 12649 0 3
11217: ST_TO_ADDR
// PlaceHumanInUnit ( Heike , HeikeDepot ) ;
11218: LD_EXP 30
11222: PPUSH
11223: LD_INT 86
11225: PPUSH
11226: CALL_OW 52
// Hc_Gallery :=  ;
11230: LD_ADDR_OWVAR 33
11234: PUSH
11235: LD_STRING 
11237: ST_TO_ADDR
// Hc_Name :=  ;
11238: LD_ADDR_OWVAR 26
11242: PUSH
11243: LD_STRING 
11245: ST_TO_ADDR
// HeikeCrew := [ ] ;
11246: LD_ADDR_EXP 11
11250: PUSH
11251: EMPTY
11252: ST_TO_ADDR
// for i = 1 to 15 do
11253: LD_ADDR_VAR 0 2
11257: PUSH
11258: DOUBLE
11259: LD_INT 1
11261: DEC
11262: ST_TO_ADDR
11263: LD_INT 15
11265: PUSH
11266: FOR_TO
11267: IFFALSE 11322
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11269: LD_INT 0
11271: PPUSH
11272: LD_INT 1
11274: PPUSH
11275: CALL_OW 12
11279: PPUSH
11280: LD_INT 3
11282: PUSH
11283: LD_INT 5
11285: PUSH
11286: LD_INT 7
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: LIST
11293: PUSH
11294: LD_OWVAR 67
11298: ARRAY
11299: PPUSH
11300: CALL_OW 381
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11304: LD_ADDR_EXP 11
11308: PUSH
11309: LD_EXP 11
11313: PUSH
11314: CALL_OW 44
11318: ADD
11319: ST_TO_ADDR
// end ;
11320: GO 11266
11322: POP
11323: POP
// for i = 1 to 3 do
11324: LD_ADDR_VAR 0 2
11328: PUSH
11329: DOUBLE
11330: LD_INT 1
11332: DEC
11333: ST_TO_ADDR
11334: LD_INT 3
11336: PUSH
11337: FOR_TO
11338: IFFALSE 11393
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11340: LD_INT 0
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 12
11350: PPUSH
11351: LD_INT 3
11353: PUSH
11354: LD_INT 5
11356: PUSH
11357: LD_INT 7
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: PUSH
11365: LD_OWVAR 67
11369: ARRAY
11370: PPUSH
11371: CALL_OW 382
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11375: LD_ADDR_EXP 11
11379: PUSH
11380: LD_EXP 11
11384: PUSH
11385: CALL_OW 44
11389: ADD
11390: ST_TO_ADDR
// end ;
11391: GO 11337
11393: POP
11394: POP
// for i = 1 to 6 do
11395: LD_ADDR_VAR 0 2
11399: PUSH
11400: DOUBLE
11401: LD_INT 1
11403: DEC
11404: ST_TO_ADDR
11405: LD_INT 6
11407: PUSH
11408: FOR_TO
11409: IFFALSE 11464
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11411: LD_INT 0
11413: PPUSH
11414: LD_INT 1
11416: PPUSH
11417: CALL_OW 12
11421: PPUSH
11422: LD_INT 3
11424: PUSH
11425: LD_INT 5
11427: PUSH
11428: LD_INT 7
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: PUSH
11436: LD_OWVAR 67
11440: ARRAY
11441: PPUSH
11442: CALL_OW 383
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11446: LD_ADDR_EXP 11
11450: PUSH
11451: LD_EXP 11
11455: PUSH
11456: CALL_OW 44
11460: ADD
11461: ST_TO_ADDR
// end ;
11462: GO 11408
11464: POP
11465: POP
// for i = 1 to 3 do
11466: LD_ADDR_VAR 0 2
11470: PUSH
11471: DOUBLE
11472: LD_INT 1
11474: DEC
11475: ST_TO_ADDR
11476: LD_INT 3
11478: PUSH
11479: FOR_TO
11480: IFFALSE 11535
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11482: LD_INT 0
11484: PPUSH
11485: LD_INT 1
11487: PPUSH
11488: CALL_OW 12
11492: PPUSH
11493: LD_INT 3
11495: PUSH
11496: LD_INT 5
11498: PUSH
11499: LD_INT 7
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_OWVAR 67
11511: ARRAY
11512: PPUSH
11513: CALL_OW 384
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11517: LD_ADDR_EXP 11
11521: PUSH
11522: LD_EXP 11
11526: PUSH
11527: CALL_OW 44
11531: ADD
11532: ST_TO_ADDR
// end ;
11533: GO 11479
11535: POP
11536: POP
// turrety := FilterUnitsInArea ( HeikeBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
11537: LD_ADDR_VAR 0 5
11541: PUSH
11542: LD_INT 26
11544: PPUSH
11545: LD_INT 2
11547: PUSH
11548: LD_INT 30
11550: PUSH
11551: LD_INT 31
11553: PUSH
11554: EMPTY
11555: LIST
11556: LIST
11557: PUSH
11558: LD_INT 30
11560: PUSH
11561: LD_INT 32
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: PPUSH
11573: CALL_OW 70
11577: ST_TO_ADDR
// lab := FilterUnitsInArea ( HeikeBaseArea , [ [ f_btype , b_lab_full ] ] ) ;
11578: LD_ADDR_VAR 0 7
11582: PUSH
11583: LD_INT 26
11585: PPUSH
11586: LD_INT 30
11588: PUSH
11589: LD_INT 8
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: EMPTY
11597: LIST
11598: PPUSH
11599: CALL_OW 70
11603: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( HeikeBaseArea , [ [ f_btype , b_factory ] ] ) ;
11604: LD_ADDR_VAR 0 6
11608: PUSH
11609: LD_INT 26
11611: PPUSH
11612: LD_INT 30
11614: PUSH
11615: LD_INT 3
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: EMPTY
11623: LIST
11624: PPUSH
11625: CALL_OW 70
11629: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( HeikeBaseArea , [ [ f_btype , b_barracks ] ] ) ;
11630: LD_ADDR_VAR 0 8
11634: PUSH
11635: LD_INT 26
11637: PPUSH
11638: LD_INT 30
11640: PUSH
11641: LD_INT 5
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: EMPTY
11649: LIST
11650: PPUSH
11651: CALL_OW 70
11655: ST_TO_ADDR
// y := 1 ;
11656: LD_ADDR_VAR 0 4
11660: PUSH
11661: LD_INT 1
11663: ST_TO_ADDR
// for i in HeikeCrew do
11664: LD_ADDR_VAR 0 2
11668: PUSH
11669: LD_EXP 11
11673: PUSH
11674: FOR_IN
11675: IFFALSE 11846
// begin case GetClass ( i ) of 1 :
11677: LD_VAR 0 2
11681: PPUSH
11682: CALL_OW 257
11686: PUSH
11687: LD_INT 1
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11762
11695: POP
// begin if y > 9 then
11696: LD_VAR 0 4
11700: PUSH
11701: LD_INT 9
11703: GREATER
11704: IFFALSE 11726
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
11706: LD_VAR 0 2
11710: PPUSH
11711: LD_VAR 0 8
11715: PUSH
11716: LD_INT 1
11718: ARRAY
11719: PPUSH
11720: CALL_OW 52
11724: GO 11746
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_VAR 0 5
11735: PUSH
11736: LD_VAR 0 4
11740: ARRAY
11741: PPUSH
11742: CALL_OW 52
// y = y + 1 ;
11746: LD_ADDR_VAR 0 4
11750: PUSH
11751: LD_VAR 0 4
11755: PUSH
11756: LD_INT 1
11758: PLUS
11759: ST_TO_ADDR
// end ; 2 :
11760: GO 11844
11762: LD_INT 2
11764: DOUBLE
11765: EQUAL
11766: IFTRUE 11770
11768: GO 11785
11770: POP
// PlaceHumanInUnit ( i , HeikeDepot ) ; 3 :
11771: LD_VAR 0 2
11775: PPUSH
11776: LD_INT 86
11778: PPUSH
11779: CALL_OW 52
11783: GO 11844
11785: LD_INT 3
11787: DOUBLE
11788: EQUAL
11789: IFTRUE 11793
11791: GO 11814
11793: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
11794: LD_VAR 0 2
11798: PPUSH
11799: LD_VAR 0 6
11803: PUSH
11804: LD_INT 1
11806: ARRAY
11807: PPUSH
11808: CALL_OW 52
11812: GO 11844
11814: LD_INT 4
11816: DOUBLE
11817: EQUAL
11818: IFTRUE 11822
11820: GO 11843
11822: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
11823: LD_VAR 0 2
11827: PPUSH
11828: LD_VAR 0 7
11832: PUSH
11833: LD_INT 1
11835: ARRAY
11836: PPUSH
11837: CALL_OW 52
11841: GO 11844
11843: POP
// end ;
11844: GO 11674
11846: POP
11847: POP
// end ;
11848: LD_VAR 0 1
11852: RET
// export function OmarAttack ; var i , z , y , turrety , fabryka , lab , zbrojka ; begin
11853: LD_INT 0
11855: PPUSH
11856: PPUSH
11857: PPUSH
11858: PPUSH
11859: PPUSH
11860: PPUSH
11861: PPUSH
11862: PPUSH
// uc_side := 5 ;
11863: LD_ADDR_OWVAR 20
11867: PUSH
11868: LD_INT 5
11870: ST_TO_ADDR
// uc_nation := 2 ;
11871: LD_ADDR_OWVAR 21
11875: PUSH
11876: LD_INT 2
11878: ST_TO_ADDR
// vc_chassis := 31 ;
11879: LD_ADDR_OWVAR 37
11883: PUSH
11884: LD_INT 31
11886: ST_TO_ADDR
// vc_control := control_rider ;
11887: LD_ADDR_OWVAR 38
11891: PUSH
11892: LD_INT 4
11894: ST_TO_ADDR
// OmarMastodont := CreateVehicle ;
11895: LD_ADDR_EXP 81
11899: PUSH
11900: CALL_OW 45
11904: ST_TO_ADDR
// OmarCrew := OmarCrew ^ OmarMastodont ;
11905: LD_ADDR_EXP 12
11909: PUSH
11910: LD_EXP 12
11914: PUSH
11915: LD_EXP 81
11919: ADD
11920: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
11921: LD_ADDR_EXP 31
11925: PUSH
11926: LD_STRING Omar
11928: PPUSH
11929: LD_INT 0
11931: PPUSH
11932: LD_STRING 
11934: PPUSH
11935: CALL 12649 0 3
11939: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , OmarMastodont ) ;
11940: LD_EXP 31
11944: PPUSH
11945: LD_EXP 81
11949: PPUSH
11950: CALL_OW 52
// Hc_Gallery :=  ;
11954: LD_ADDR_OWVAR 33
11958: PUSH
11959: LD_STRING 
11961: ST_TO_ADDR
// Hc_Name :=  ;
11962: LD_ADDR_OWVAR 26
11966: PUSH
11967: LD_STRING 
11969: ST_TO_ADDR
// OmarCrew := [ ] ;
11970: LD_ADDR_EXP 12
11974: PUSH
11975: EMPTY
11976: ST_TO_ADDR
// for i = 1 to 8 do
11977: LD_ADDR_VAR 0 2
11981: PUSH
11982: DOUBLE
11983: LD_INT 1
11985: DEC
11986: ST_TO_ADDR
11987: LD_INT 8
11989: PUSH
11990: FOR_TO
11991: IFFALSE 12046
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11993: LD_INT 0
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 12
12003: PPUSH
12004: LD_INT 3
12006: PUSH
12007: LD_INT 5
12009: PUSH
12010: LD_INT 7
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: LIST
12017: PUSH
12018: LD_OWVAR 67
12022: ARRAY
12023: PPUSH
12024: CALL_OW 381
// OmarCrew := OmarCrew ^ CreateHuman ;
12028: LD_ADDR_EXP 12
12032: PUSH
12033: LD_EXP 12
12037: PUSH
12038: CALL_OW 44
12042: ADD
12043: ST_TO_ADDR
// end ;
12044: GO 11990
12046: POP
12047: POP
// for i = 1 to 6 do
12048: LD_ADDR_VAR 0 2
12052: PUSH
12053: DOUBLE
12054: LD_INT 1
12056: DEC
12057: ST_TO_ADDR
12058: LD_INT 6
12060: PUSH
12061: FOR_TO
12062: IFFALSE 12129
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12064: LD_INT 0
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: CALL_OW 12
12074: PPUSH
12075: LD_INT 3
12077: PUSH
12078: LD_INT 5
12080: PUSH
12081: LD_INT 7
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: PUSH
12089: LD_OWVAR 67
12093: ARRAY
12094: PPUSH
12095: CALL_OW 381
// OmarCrew := OmarCrew ^ CreateHuman ;
12099: LD_ADDR_EXP 12
12103: PUSH
12104: LD_EXP 12
12108: PUSH
12109: CALL_OW 44
12113: ADD
12114: ST_TO_ADDR
// SetClass ( CreateHuman , 8 ) ;
12115: CALL_OW 44
12119: PPUSH
12120: LD_INT 8
12122: PPUSH
12123: CALL_OW 336
// end ;
12127: GO 12061
12129: POP
12130: POP
// for i = 1 to 2 do
12131: LD_ADDR_VAR 0 2
12135: PUSH
12136: DOUBLE
12137: LD_INT 1
12139: DEC
12140: ST_TO_ADDR
12141: LD_INT 2
12143: PUSH
12144: FOR_TO
12145: IFFALSE 12200
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12147: LD_INT 0
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: CALL_OW 12
12157: PPUSH
12158: LD_INT 3
12160: PUSH
12161: LD_INT 5
12163: PUSH
12164: LD_INT 7
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: PUSH
12172: LD_OWVAR 67
12176: ARRAY
12177: PPUSH
12178: CALL_OW 382
// OmarCrew := OmarCrew ^ CreateHuman ;
12182: LD_ADDR_EXP 12
12186: PUSH
12187: LD_EXP 12
12191: PUSH
12192: CALL_OW 44
12196: ADD
12197: ST_TO_ADDR
// end ;
12198: GO 12144
12200: POP
12201: POP
// for i = 1 to 6 do
12202: LD_ADDR_VAR 0 2
12206: PUSH
12207: DOUBLE
12208: LD_INT 1
12210: DEC
12211: ST_TO_ADDR
12212: LD_INT 6
12214: PUSH
12215: FOR_TO
12216: IFFALSE 12279
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12218: LD_INT 0
12220: PPUSH
12221: LD_INT 1
12223: PPUSH
12224: CALL_OW 12
12228: PPUSH
12229: LD_INT 3
12231: PUSH
12232: LD_INT 5
12234: PUSH
12235: LD_INT 7
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_OWVAR 67
12247: ARRAY
12248: PPUSH
12249: CALL_OW 383
// OmarMechs = CreateHuman ;
12253: LD_ADDR_EXP 80
12257: PUSH
12258: CALL_OW 44
12262: ST_TO_ADDR
// PlaceHumanInUnit ( OmarMechs , OmarTanks ) ;
12263: LD_EXP 80
12267: PPUSH
12268: LD_EXP 79
12272: PPUSH
12273: CALL_OW 52
// end ;
12277: GO 12215
12279: POP
12280: POP
// for i = 1 to 6 do
12281: LD_ADDR_VAR 0 2
12285: PUSH
12286: DOUBLE
12287: LD_INT 1
12289: DEC
12290: ST_TO_ADDR
12291: LD_INT 6
12293: PUSH
12294: FOR_TO
12295: IFFALSE 12381
// begin vc_chassis = rand ( 13 , 14 ) ;
12297: LD_ADDR_OWVAR 37
12301: PUSH
12302: LD_INT 13
12304: PPUSH
12305: LD_INT 14
12307: PPUSH
12308: CALL_OW 12
12312: ST_TO_ADDR
// vc_control = 1 ;
12313: LD_ADDR_OWVAR 38
12317: PUSH
12318: LD_INT 1
12320: ST_TO_ADDR
// vc_engine = 1 ;
12321: LD_ADDR_OWVAR 39
12325: PUSH
12326: LD_INT 1
12328: ST_TO_ADDR
// vc_fuel_battery = 80 ;
12329: LD_ADDR_OWVAR 41
12333: PUSH
12334: LD_INT 80
12336: ST_TO_ADDR
// vc_weapon = rand ( 26 , 27 ) ;
12337: LD_ADDR_OWVAR 40
12341: PUSH
12342: LD_INT 26
12344: PPUSH
12345: LD_INT 27
12347: PPUSH
12348: CALL_OW 12
12352: ST_TO_ADDR
// OmarTanks = CreateVehicle ;
12353: LD_ADDR_EXP 79
12357: PUSH
12358: CALL_OW 45
12362: ST_TO_ADDR
// OmarCrew := OmarCrew ^ OmarTanks ;
12363: LD_ADDR_EXP 12
12367: PUSH
12368: LD_EXP 12
12372: PUSH
12373: LD_EXP 79
12377: ADD
12378: ST_TO_ADDR
// end ;
12379: GO 12294
12381: POP
12382: POP
// for i = 1 to 3 do
12383: LD_ADDR_VAR 0 2
12387: PUSH
12388: DOUBLE
12389: LD_INT 1
12391: DEC
12392: ST_TO_ADDR
12393: LD_INT 3
12395: PUSH
12396: FOR_TO
12397: IFFALSE 12452
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12399: LD_INT 0
12401: PPUSH
12402: LD_INT 1
12404: PPUSH
12405: CALL_OW 12
12409: PPUSH
12410: LD_INT 3
12412: PUSH
12413: LD_INT 5
12415: PUSH
12416: LD_INT 7
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: LIST
12423: PUSH
12424: LD_OWVAR 67
12428: ARRAY
12429: PPUSH
12430: CALL_OW 384
// OmarCrew := OmarCrew ^ CreateHuman ;
12434: LD_ADDR_EXP 12
12438: PUSH
12439: LD_EXP 12
12443: PUSH
12444: CALL_OW 44
12448: ADD
12449: ST_TO_ADDR
// end ;
12450: GO 12396
12452: POP
12453: POP
// PlaceUnitArea ( OmarCrew , OmarAttackArea , false ) ;
12454: LD_EXP 12
12458: PPUSH
12459: LD_INT 29
12461: PPUSH
12462: LD_INT 0
12464: PPUSH
12465: CALL_OW 49
// ComAgressiveMove ( OmarCrew , 333 , 236 ) ;
12469: LD_EXP 12
12473: PPUSH
12474: LD_INT 333
12476: PPUSH
12477: LD_INT 236
12479: PPUSH
12480: CALL_OW 114
// end ; end_of_file
12484: LD_VAR 0 1
12488: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export function InitGlobalVariables ; begin
12489: LD_INT 0
12491: PPUSH
// ar_miner := 81 ;
12492: LD_ADDR_EXP 89
12496: PUSH
12497: LD_INT 81
12499: ST_TO_ADDR
// ar_crane := 88 ;
12500: LD_ADDR_EXP 88
12504: PUSH
12505: LD_INT 88
12507: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12508: LD_ADDR_EXP 83
12512: PUSH
12513: LD_INT 89
12515: ST_TO_ADDR
// us_hack := 99 ;
12516: LD_ADDR_EXP 84
12520: PUSH
12521: LD_INT 99
12523: ST_TO_ADDR
// us_artillery := 97 ;
12524: LD_ADDR_EXP 85
12528: PUSH
12529: LD_INT 97
12531: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12532: LD_ADDR_EXP 86
12536: PUSH
12537: LD_INT 91
12539: ST_TO_ADDR
// ar_mortar := 92 ;
12540: LD_ADDR_EXP 87
12544: PUSH
12545: LD_INT 92
12547: ST_TO_ADDR
// ru_flamethrower := 93 ;
12548: LD_ADDR_EXP 90
12552: PUSH
12553: LD_INT 93
12555: ST_TO_ADDR
// ru_radar := 98 ;
12556: LD_ADDR_EXP 82
12560: PUSH
12561: LD_INT 98
12563: ST_TO_ADDR
// tech_Artillery := 80 ;
12564: LD_ADDR_EXP 91
12568: PUSH
12569: LD_INT 80
12571: ST_TO_ADDR
// tech_RadMat := 81 ;
12572: LD_ADDR_EXP 92
12576: PUSH
12577: LD_INT 81
12579: ST_TO_ADDR
// tech_BasicTools := 82 ;
12580: LD_ADDR_EXP 93
12584: PUSH
12585: LD_INT 82
12587: ST_TO_ADDR
// tech_Cargo := 83 ;
12588: LD_ADDR_EXP 94
12592: PUSH
12593: LD_INT 83
12595: ST_TO_ADDR
// tech_Track := 84 ;
12596: LD_ADDR_EXP 95
12600: PUSH
12601: LD_INT 84
12603: ST_TO_ADDR
// tech_Crane := 85 ;
12604: LD_ADDR_EXP 96
12608: PUSH
12609: LD_INT 85
12611: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12612: LD_ADDR_EXP 97
12616: PUSH
12617: LD_INT 86
12619: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12620: LD_ADDR_EXP 98
12624: PUSH
12625: LD_INT 87
12627: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12628: LD_ADDR_EXP 99
12632: PUSH
12633: LD_INT 88
12635: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
12636: LD_ADDR_EXP 100
12640: PUSH
12641: LD_INT 90
12643: ST_TO_ADDR
// end ; end_of_file
12644: LD_VAR 0 1
12648: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12649: LD_INT 0
12651: PPUSH
12652: PPUSH
// if exist_mode then
12653: LD_VAR 0 2
12657: IFFALSE 12682
// unit := CreateCharacter ( prefix & ident ) else
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_VAR 0 3
12668: PUSH
12669: LD_VAR 0 1
12673: STR
12674: PPUSH
12675: CALL_OW 34
12679: ST_TO_ADDR
12680: GO 12697
// unit := NewCharacter ( ident ) ;
12682: LD_ADDR_VAR 0 5
12686: PUSH
12687: LD_VAR 0 1
12691: PPUSH
12692: CALL_OW 25
12696: ST_TO_ADDR
// result := unit ;
12697: LD_ADDR_VAR 0 4
12701: PUSH
12702: LD_VAR 0 5
12706: ST_TO_ADDR
// end ;
12707: LD_VAR 0 4
12711: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12712: LD_INT 0
12714: PPUSH
12715: PPUSH
// if not side or not nation then
12716: LD_VAR 0 1
12720: NOT
12721: PUSH
12722: LD_VAR 0 2
12726: NOT
12727: OR
12728: IFFALSE 12732
// exit ;
12730: GO 13500
// case nation of nation_american :
12732: LD_VAR 0 2
12736: PUSH
12737: LD_INT 1
12739: DOUBLE
12740: EQUAL
12741: IFTRUE 12745
12743: GO 12959
12745: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
12746: LD_ADDR_VAR 0 4
12750: PUSH
12751: LD_INT 35
12753: PUSH
12754: LD_INT 45
12756: PUSH
12757: LD_INT 46
12759: PUSH
12760: LD_INT 47
12762: PUSH
12763: LD_INT 82
12765: PUSH
12766: LD_INT 83
12768: PUSH
12769: LD_INT 84
12771: PUSH
12772: LD_INT 85
12774: PUSH
12775: LD_INT 86
12777: PUSH
12778: LD_INT 1
12780: PUSH
12781: LD_INT 2
12783: PUSH
12784: LD_INT 6
12786: PUSH
12787: LD_INT 15
12789: PUSH
12790: LD_INT 16
12792: PUSH
12793: LD_INT 7
12795: PUSH
12796: LD_INT 12
12798: PUSH
12799: LD_INT 13
12801: PUSH
12802: LD_INT 10
12804: PUSH
12805: LD_INT 14
12807: PUSH
12808: LD_INT 20
12810: PUSH
12811: LD_INT 21
12813: PUSH
12814: LD_INT 22
12816: PUSH
12817: LD_INT 25
12819: PUSH
12820: LD_INT 32
12822: PUSH
12823: LD_INT 27
12825: PUSH
12826: LD_INT 36
12828: PUSH
12829: LD_INT 69
12831: PUSH
12832: LD_INT 39
12834: PUSH
12835: LD_INT 34
12837: PUSH
12838: LD_INT 40
12840: PUSH
12841: LD_INT 48
12843: PUSH
12844: LD_INT 49
12846: PUSH
12847: LD_INT 50
12849: PUSH
12850: LD_INT 51
12852: PUSH
12853: LD_INT 52
12855: PUSH
12856: LD_INT 53
12858: PUSH
12859: LD_INT 54
12861: PUSH
12862: LD_INT 55
12864: PUSH
12865: LD_INT 56
12867: PUSH
12868: LD_INT 57
12870: PUSH
12871: LD_INT 58
12873: PUSH
12874: LD_INT 59
12876: PUSH
12877: LD_INT 60
12879: PUSH
12880: LD_INT 61
12882: PUSH
12883: LD_INT 62
12885: PUSH
12886: LD_INT 80
12888: PUSH
12889: LD_INT 82
12891: PUSH
12892: LD_INT 83
12894: PUSH
12895: LD_INT 84
12897: PUSH
12898: LD_INT 85
12900: PUSH
12901: LD_INT 86
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: ST_TO_ADDR
12957: GO 13424
12959: LD_INT 2
12961: DOUBLE
12962: EQUAL
12963: IFTRUE 12967
12965: GO 13193
12967: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
12968: LD_ADDR_VAR 0 4
12972: PUSH
12973: LD_INT 35
12975: PUSH
12976: LD_INT 45
12978: PUSH
12979: LD_INT 46
12981: PUSH
12982: LD_INT 47
12984: PUSH
12985: LD_INT 82
12987: PUSH
12988: LD_INT 83
12990: PUSH
12991: LD_INT 84
12993: PUSH
12994: LD_INT 85
12996: PUSH
12997: LD_INT 87
12999: PUSH
13000: LD_INT 70
13002: PUSH
13003: LD_INT 1
13005: PUSH
13006: LD_INT 11
13008: PUSH
13009: LD_INT 3
13011: PUSH
13012: LD_INT 4
13014: PUSH
13015: LD_INT 5
13017: PUSH
13018: LD_INT 6
13020: PUSH
13021: LD_INT 15
13023: PUSH
13024: LD_INT 18
13026: PUSH
13027: LD_INT 7
13029: PUSH
13030: LD_INT 17
13032: PUSH
13033: LD_INT 8
13035: PUSH
13036: LD_INT 20
13038: PUSH
13039: LD_INT 21
13041: PUSH
13042: LD_INT 22
13044: PUSH
13045: LD_INT 72
13047: PUSH
13048: LD_INT 26
13050: PUSH
13051: LD_INT 69
13053: PUSH
13054: LD_INT 39
13056: PUSH
13057: LD_INT 40
13059: PUSH
13060: LD_INT 41
13062: PUSH
13063: LD_INT 42
13065: PUSH
13066: LD_INT 43
13068: PUSH
13069: LD_INT 48
13071: PUSH
13072: LD_INT 49
13074: PUSH
13075: LD_INT 50
13077: PUSH
13078: LD_INT 51
13080: PUSH
13081: LD_INT 52
13083: PUSH
13084: LD_INT 53
13086: PUSH
13087: LD_INT 54
13089: PUSH
13090: LD_INT 55
13092: PUSH
13093: LD_INT 56
13095: PUSH
13096: LD_INT 60
13098: PUSH
13099: LD_INT 61
13101: PUSH
13102: LD_INT 62
13104: PUSH
13105: LD_INT 66
13107: PUSH
13108: LD_INT 67
13110: PUSH
13111: LD_INT 68
13113: PUSH
13114: LD_INT 81
13116: PUSH
13117: LD_INT 82
13119: PUSH
13120: LD_INT 83
13122: PUSH
13123: LD_INT 84
13125: PUSH
13126: LD_INT 85
13128: PUSH
13129: LD_INT 87
13131: PUSH
13132: LD_INT 88
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: ST_TO_ADDR
13191: GO 13424
13193: LD_INT 3
13195: DOUBLE
13196: EQUAL
13197: IFTRUE 13201
13199: GO 13423
13201: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
13202: LD_ADDR_VAR 0 4
13206: PUSH
13207: LD_INT 46
13209: PUSH
13210: LD_INT 47
13212: PUSH
13213: LD_INT 1
13215: PUSH
13216: LD_INT 2
13218: PUSH
13219: LD_INT 82
13221: PUSH
13222: LD_INT 83
13224: PUSH
13225: LD_INT 84
13227: PUSH
13228: LD_INT 85
13230: PUSH
13231: LD_INT 86
13233: PUSH
13234: LD_INT 11
13236: PUSH
13237: LD_INT 9
13239: PUSH
13240: LD_INT 20
13242: PUSH
13243: LD_INT 19
13245: PUSH
13246: LD_INT 21
13248: PUSH
13249: LD_INT 24
13251: PUSH
13252: LD_INT 22
13254: PUSH
13255: LD_INT 25
13257: PUSH
13258: LD_INT 28
13260: PUSH
13261: LD_INT 29
13263: PUSH
13264: LD_INT 30
13266: PUSH
13267: LD_INT 31
13269: PUSH
13270: LD_INT 37
13272: PUSH
13273: LD_INT 38
13275: PUSH
13276: LD_INT 32
13278: PUSH
13279: LD_INT 27
13281: PUSH
13282: LD_INT 33
13284: PUSH
13285: LD_INT 69
13287: PUSH
13288: LD_INT 39
13290: PUSH
13291: LD_INT 34
13293: PUSH
13294: LD_INT 40
13296: PUSH
13297: LD_INT 71
13299: PUSH
13300: LD_INT 23
13302: PUSH
13303: LD_INT 44
13305: PUSH
13306: LD_INT 48
13308: PUSH
13309: LD_INT 49
13311: PUSH
13312: LD_INT 50
13314: PUSH
13315: LD_INT 51
13317: PUSH
13318: LD_INT 52
13320: PUSH
13321: LD_INT 53
13323: PUSH
13324: LD_INT 54
13326: PUSH
13327: LD_INT 55
13329: PUSH
13330: LD_INT 56
13332: PUSH
13333: LD_INT 57
13335: PUSH
13336: LD_INT 58
13338: PUSH
13339: LD_INT 59
13341: PUSH
13342: LD_INT 63
13344: PUSH
13345: LD_INT 64
13347: PUSH
13348: LD_INT 65
13350: PUSH
13351: LD_INT 82
13353: PUSH
13354: LD_INT 83
13356: PUSH
13357: LD_INT 84
13359: PUSH
13360: LD_INT 85
13362: PUSH
13363: LD_INT 86
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: ST_TO_ADDR
13421: GO 13424
13423: POP
// if state > - 1 and state < 3 then
13424: LD_VAR 0 3
13428: PUSH
13429: LD_INT 1
13431: NEG
13432: GREATER
13433: PUSH
13434: LD_VAR 0 3
13438: PUSH
13439: LD_INT 3
13441: LESS
13442: AND
13443: IFFALSE 13500
// for i in result do
13445: LD_ADDR_VAR 0 5
13449: PUSH
13450: LD_VAR 0 4
13454: PUSH
13455: FOR_IN
13456: IFFALSE 13498
// if GetTech ( i , side ) <> state then
13458: LD_VAR 0 5
13462: PPUSH
13463: LD_VAR 0 1
13467: PPUSH
13468: CALL_OW 321
13472: PUSH
13473: LD_VAR 0 3
13477: NONEQUAL
13478: IFFALSE 13496
// result := result diff i ;
13480: LD_ADDR_VAR 0 4
13484: PUSH
13485: LD_VAR 0 4
13489: PUSH
13490: LD_VAR 0 5
13494: DIFF
13495: ST_TO_ADDR
13496: GO 13455
13498: POP
13499: POP
// end ;
13500: LD_VAR 0 4
13504: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13505: LD_INT 0
13507: PPUSH
13508: PPUSH
13509: PPUSH
// result := true ;
13510: LD_ADDR_VAR 0 3
13514: PUSH
13515: LD_INT 1
13517: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13518: LD_ADDR_VAR 0 5
13522: PUSH
13523: LD_VAR 0 2
13527: PPUSH
13528: CALL_OW 480
13532: ST_TO_ADDR
// if not tmp then
13533: LD_VAR 0 5
13537: NOT
13538: IFFALSE 13542
// exit ;
13540: GO 13591
// for i in tmp do
13542: LD_ADDR_VAR 0 4
13546: PUSH
13547: LD_VAR 0 5
13551: PUSH
13552: FOR_IN
13553: IFFALSE 13589
// if GetTech ( i , side ) <> state_researched then
13555: LD_VAR 0 4
13559: PPUSH
13560: LD_VAR 0 1
13564: PPUSH
13565: CALL_OW 321
13569: PUSH
13570: LD_INT 2
13572: NONEQUAL
13573: IFFALSE 13587
// begin result := false ;
13575: LD_ADDR_VAR 0 3
13579: PUSH
13580: LD_INT 0
13582: ST_TO_ADDR
// exit ;
13583: POP
13584: POP
13585: GO 13591
// end ;
13587: GO 13552
13589: POP
13590: POP
// end ;
13591: LD_VAR 0 3
13595: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13596: LD_INT 0
13598: PPUSH
13599: PPUSH
13600: PPUSH
13601: PPUSH
13602: PPUSH
13603: PPUSH
13604: PPUSH
13605: PPUSH
13606: PPUSH
13607: PPUSH
13608: PPUSH
13609: PPUSH
13610: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13611: LD_VAR 0 1
13615: NOT
13616: PUSH
13617: LD_VAR 0 1
13621: PPUSH
13622: CALL_OW 257
13626: PUSH
13627: LD_INT 9
13629: NONEQUAL
13630: OR
13631: IFFALSE 13635
// exit ;
13633: GO 14208
// side := GetSide ( unit ) ;
13635: LD_ADDR_VAR 0 9
13639: PUSH
13640: LD_VAR 0 1
13644: PPUSH
13645: CALL_OW 255
13649: ST_TO_ADDR
// tech_space := tech_spacanom ;
13650: LD_ADDR_VAR 0 12
13654: PUSH
13655: LD_INT 29
13657: ST_TO_ADDR
// tech_time := tech_taurad ;
13658: LD_ADDR_VAR 0 13
13662: PUSH
13663: LD_INT 28
13665: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13666: LD_ADDR_VAR 0 11
13670: PUSH
13671: LD_VAR 0 1
13675: PPUSH
13676: CALL_OW 310
13680: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13681: LD_VAR 0 11
13685: PPUSH
13686: CALL_OW 247
13690: PUSH
13691: LD_INT 2
13693: EQUAL
13694: IFFALSE 13698
// exit ;
13696: GO 14208
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13698: LD_ADDR_VAR 0 8
13702: PUSH
13703: LD_INT 81
13705: PUSH
13706: LD_VAR 0 9
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 3
13717: PUSH
13718: LD_INT 21
13720: PUSH
13721: LD_INT 3
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PPUSH
13736: CALL_OW 69
13740: ST_TO_ADDR
// if not tmp then
13741: LD_VAR 0 8
13745: NOT
13746: IFFALSE 13750
// exit ;
13748: GO 14208
// if in_unit then
13750: LD_VAR 0 11
13754: IFFALSE 13778
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13756: LD_ADDR_VAR 0 10
13760: PUSH
13761: LD_VAR 0 8
13765: PPUSH
13766: LD_VAR 0 11
13770: PPUSH
13771: CALL_OW 74
13775: ST_TO_ADDR
13776: GO 13798
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13778: LD_ADDR_VAR 0 10
13782: PUSH
13783: LD_VAR 0 8
13787: PPUSH
13788: LD_VAR 0 1
13792: PPUSH
13793: CALL_OW 74
13797: ST_TO_ADDR
// if not enemy then
13798: LD_VAR 0 10
13802: NOT
13803: IFFALSE 13807
// exit ;
13805: GO 14208
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13807: LD_VAR 0 11
13811: PUSH
13812: LD_VAR 0 11
13816: PPUSH
13817: LD_VAR 0 10
13821: PPUSH
13822: CALL_OW 296
13826: PUSH
13827: LD_INT 13
13829: GREATER
13830: AND
13831: PUSH
13832: LD_VAR 0 1
13836: PPUSH
13837: LD_VAR 0 10
13841: PPUSH
13842: CALL_OW 296
13846: PUSH
13847: LD_INT 12
13849: GREATER
13850: OR
13851: IFFALSE 13855
// exit ;
13853: GO 14208
// missile := [ 1 ] ;
13855: LD_ADDR_VAR 0 14
13859: PUSH
13860: LD_INT 1
13862: PUSH
13863: EMPTY
13864: LIST
13865: ST_TO_ADDR
// if Researched ( side , tech_space ) then
13866: LD_VAR 0 9
13870: PPUSH
13871: LD_VAR 0 12
13875: PPUSH
13876: CALL_OW 325
13880: IFFALSE 13909
// missile := Replace ( missile , missile + 1 , 2 ) ;
13882: LD_ADDR_VAR 0 14
13886: PUSH
13887: LD_VAR 0 14
13891: PPUSH
13892: LD_VAR 0 14
13896: PUSH
13897: LD_INT 1
13899: PLUS
13900: PPUSH
13901: LD_INT 2
13903: PPUSH
13904: CALL_OW 1
13908: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
13909: LD_VAR 0 9
13913: PPUSH
13914: LD_VAR 0 13
13918: PPUSH
13919: CALL_OW 325
13923: PUSH
13924: LD_VAR 0 10
13928: PPUSH
13929: CALL_OW 255
13933: PPUSH
13934: LD_VAR 0 13
13938: PPUSH
13939: CALL_OW 325
13943: NOT
13944: AND
13945: IFFALSE 13974
// missile := Replace ( missile , missile + 1 , 3 ) ;
13947: LD_ADDR_VAR 0 14
13951: PUSH
13952: LD_VAR 0 14
13956: PPUSH
13957: LD_VAR 0 14
13961: PUSH
13962: LD_INT 1
13964: PLUS
13965: PPUSH
13966: LD_INT 3
13968: PPUSH
13969: CALL_OW 1
13973: ST_TO_ADDR
// if missile < 2 then
13974: LD_VAR 0 14
13978: PUSH
13979: LD_INT 2
13981: LESS
13982: IFFALSE 13986
// exit ;
13984: GO 14208
// x := GetX ( enemy ) ;
13986: LD_ADDR_VAR 0 4
13990: PUSH
13991: LD_VAR 0 10
13995: PPUSH
13996: CALL_OW 250
14000: ST_TO_ADDR
// y := GetY ( enemy ) ;
14001: LD_ADDR_VAR 0 5
14005: PUSH
14006: LD_VAR 0 10
14010: PPUSH
14011: CALL_OW 251
14015: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14016: LD_ADDR_VAR 0 6
14020: PUSH
14021: LD_VAR 0 4
14025: PUSH
14026: LD_INT 1
14028: NEG
14029: PPUSH
14030: LD_INT 1
14032: PPUSH
14033: CALL_OW 12
14037: PLUS
14038: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14039: LD_ADDR_VAR 0 7
14043: PUSH
14044: LD_VAR 0 5
14048: PUSH
14049: LD_INT 1
14051: NEG
14052: PPUSH
14053: LD_INT 1
14055: PPUSH
14056: CALL_OW 12
14060: PLUS
14061: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14062: LD_VAR 0 6
14066: PPUSH
14067: LD_VAR 0 7
14071: PPUSH
14072: CALL_OW 488
14076: NOT
14077: IFFALSE 14099
// begin _x := x ;
14079: LD_ADDR_VAR 0 6
14083: PUSH
14084: LD_VAR 0 4
14088: ST_TO_ADDR
// _y := y ;
14089: LD_ADDR_VAR 0 7
14093: PUSH
14094: LD_VAR 0 5
14098: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14099: LD_ADDR_VAR 0 3
14103: PUSH
14104: LD_INT 1
14106: PPUSH
14107: LD_VAR 0 14
14111: PPUSH
14112: CALL_OW 12
14116: ST_TO_ADDR
// case i of 1 :
14117: LD_VAR 0 3
14121: PUSH
14122: LD_INT 1
14124: DOUBLE
14125: EQUAL
14126: IFTRUE 14130
14128: GO 14147
14130: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14131: LD_VAR 0 1
14135: PPUSH
14136: LD_VAR 0 10
14140: PPUSH
14141: CALL_OW 115
14145: GO 14208
14147: LD_INT 2
14149: DOUBLE
14150: EQUAL
14151: IFTRUE 14155
14153: GO 14177
14155: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14156: LD_VAR 0 1
14160: PPUSH
14161: LD_VAR 0 6
14165: PPUSH
14166: LD_VAR 0 7
14170: PPUSH
14171: CALL_OW 153
14175: GO 14208
14177: LD_INT 3
14179: DOUBLE
14180: EQUAL
14181: IFTRUE 14185
14183: GO 14207
14185: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14186: LD_VAR 0 1
14190: PPUSH
14191: LD_VAR 0 6
14195: PPUSH
14196: LD_VAR 0 7
14200: PPUSH
14201: CALL_OW 154
14205: GO 14208
14207: POP
// end ;
14208: LD_VAR 0 2
14212: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14213: LD_INT 0
14215: PPUSH
14216: PPUSH
14217: PPUSH
14218: PPUSH
14219: PPUSH
14220: PPUSH
// if not unit or not building then
14221: LD_VAR 0 1
14225: NOT
14226: PUSH
14227: LD_VAR 0 2
14231: NOT
14232: OR
14233: IFFALSE 14237
// exit ;
14235: GO 14395
// x := GetX ( building ) ;
14237: LD_ADDR_VAR 0 5
14241: PUSH
14242: LD_VAR 0 2
14246: PPUSH
14247: CALL_OW 250
14251: ST_TO_ADDR
// y := GetY ( building ) ;
14252: LD_ADDR_VAR 0 6
14256: PUSH
14257: LD_VAR 0 2
14261: PPUSH
14262: CALL_OW 251
14266: ST_TO_ADDR
// for i = 0 to 5 do
14267: LD_ADDR_VAR 0 4
14271: PUSH
14272: DOUBLE
14273: LD_INT 0
14275: DEC
14276: ST_TO_ADDR
14277: LD_INT 5
14279: PUSH
14280: FOR_TO
14281: IFFALSE 14393
// begin _x := ShiftX ( x , i , 3 ) ;
14283: LD_ADDR_VAR 0 7
14287: PUSH
14288: LD_VAR 0 5
14292: PPUSH
14293: LD_VAR 0 4
14297: PPUSH
14298: LD_INT 3
14300: PPUSH
14301: CALL_OW 272
14305: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14306: LD_ADDR_VAR 0 8
14310: PUSH
14311: LD_VAR 0 6
14315: PPUSH
14316: LD_VAR 0 4
14320: PPUSH
14321: LD_INT 3
14323: PPUSH
14324: CALL_OW 273
14328: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14329: LD_VAR 0 7
14333: PPUSH
14334: LD_VAR 0 8
14338: PPUSH
14339: CALL_OW 488
14343: NOT
14344: IFFALSE 14348
// continue ;
14346: GO 14280
// if HexInfo ( _x , _y ) = 0 then
14348: LD_VAR 0 7
14352: PPUSH
14353: LD_VAR 0 8
14357: PPUSH
14358: CALL_OW 428
14362: PUSH
14363: LD_INT 0
14365: EQUAL
14366: IFFALSE 14391
// begin ComMoveXY ( unit , _x , _y ) ;
14368: LD_VAR 0 1
14372: PPUSH
14373: LD_VAR 0 7
14377: PPUSH
14378: LD_VAR 0 8
14382: PPUSH
14383: CALL_OW 111
// exit ;
14387: POP
14388: POP
14389: GO 14395
// end ; end ;
14391: GO 14280
14393: POP
14394: POP
// end ;
14395: LD_VAR 0 3
14399: RET
// export function ScanBase ( side , base_area ) ; begin
14400: LD_INT 0
14402: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14403: LD_ADDR_VAR 0 3
14407: PUSH
14408: LD_VAR 0 2
14412: PPUSH
14413: LD_INT 81
14415: PUSH
14416: LD_VAR 0 1
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 70
14429: ST_TO_ADDR
// end ;
14430: LD_VAR 0 3
14434: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14435: LD_INT 0
14437: PPUSH
14438: PPUSH
14439: PPUSH
14440: PPUSH
// result := false ;
14441: LD_ADDR_VAR 0 2
14445: PUSH
14446: LD_INT 0
14448: ST_TO_ADDR
// side := GetSide ( unit ) ;
14449: LD_ADDR_VAR 0 3
14453: PUSH
14454: LD_VAR 0 1
14458: PPUSH
14459: CALL_OW 255
14463: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14464: LD_ADDR_VAR 0 4
14468: PUSH
14469: LD_VAR 0 1
14473: PPUSH
14474: CALL_OW 248
14478: ST_TO_ADDR
// case nat of 1 :
14479: LD_VAR 0 4
14483: PUSH
14484: LD_INT 1
14486: DOUBLE
14487: EQUAL
14488: IFTRUE 14492
14490: GO 14503
14492: POP
// tech := tech_lassight ; 2 :
14493: LD_ADDR_VAR 0 5
14497: PUSH
14498: LD_INT 12
14500: ST_TO_ADDR
14501: GO 14542
14503: LD_INT 2
14505: DOUBLE
14506: EQUAL
14507: IFTRUE 14511
14509: GO 14522
14511: POP
// tech := tech_mortar ; 3 :
14512: LD_ADDR_VAR 0 5
14516: PUSH
14517: LD_INT 41
14519: ST_TO_ADDR
14520: GO 14542
14522: LD_INT 3
14524: DOUBLE
14525: EQUAL
14526: IFTRUE 14530
14528: GO 14541
14530: POP
// tech := tech_bazooka ; end ;
14531: LD_ADDR_VAR 0 5
14535: PUSH
14536: LD_INT 44
14538: ST_TO_ADDR
14539: GO 14542
14541: POP
// if Researched ( side , tech ) then
14542: LD_VAR 0 3
14546: PPUSH
14547: LD_VAR 0 5
14551: PPUSH
14552: CALL_OW 325
14556: IFFALSE 14583
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14558: LD_ADDR_VAR 0 2
14562: PUSH
14563: LD_INT 5
14565: PUSH
14566: LD_INT 8
14568: PUSH
14569: LD_INT 9
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: LIST
14576: PUSH
14577: LD_VAR 0 4
14581: ARRAY
14582: ST_TO_ADDR
// end ;
14583: LD_VAR 0 2
14587: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14588: LD_INT 0
14590: PPUSH
14591: PPUSH
14592: PPUSH
// if not mines then
14593: LD_VAR 0 2
14597: NOT
14598: IFFALSE 14602
// exit ;
14600: GO 14746
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14602: LD_ADDR_VAR 0 5
14606: PUSH
14607: LD_INT 81
14609: PUSH
14610: LD_VAR 0 1
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PUSH
14619: LD_INT 3
14621: PUSH
14622: LD_INT 21
14624: PUSH
14625: LD_INT 3
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PPUSH
14640: CALL_OW 69
14644: ST_TO_ADDR
// for i in mines do
14645: LD_ADDR_VAR 0 4
14649: PUSH
14650: LD_VAR 0 2
14654: PUSH
14655: FOR_IN
14656: IFFALSE 14744
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14658: LD_VAR 0 4
14662: PUSH
14663: LD_INT 1
14665: ARRAY
14666: PPUSH
14667: LD_VAR 0 4
14671: PUSH
14672: LD_INT 2
14674: ARRAY
14675: PPUSH
14676: CALL_OW 458
14680: NOT
14681: IFFALSE 14685
// continue ;
14683: GO 14655
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14685: LD_VAR 0 4
14689: PUSH
14690: LD_INT 1
14692: ARRAY
14693: PPUSH
14694: LD_VAR 0 4
14698: PUSH
14699: LD_INT 2
14701: ARRAY
14702: PPUSH
14703: CALL_OW 428
14707: PUSH
14708: LD_VAR 0 5
14712: IN
14713: IFFALSE 14742
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14715: LD_VAR 0 4
14719: PUSH
14720: LD_INT 1
14722: ARRAY
14723: PPUSH
14724: LD_VAR 0 4
14728: PUSH
14729: LD_INT 2
14731: ARRAY
14732: PPUSH
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 456
// end ;
14742: GO 14655
14744: POP
14745: POP
// end ;
14746: LD_VAR 0 3
14750: RET
// export function Count ( array ) ; var i ; begin
14751: LD_INT 0
14753: PPUSH
14754: PPUSH
// result := 0 ;
14755: LD_ADDR_VAR 0 2
14759: PUSH
14760: LD_INT 0
14762: ST_TO_ADDR
// for i in array do
14763: LD_ADDR_VAR 0 3
14767: PUSH
14768: LD_VAR 0 1
14772: PUSH
14773: FOR_IN
14774: IFFALSE 14798
// if i then
14776: LD_VAR 0 3
14780: IFFALSE 14796
// result := result + 1 ;
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_VAR 0 2
14791: PUSH
14792: LD_INT 1
14794: PLUS
14795: ST_TO_ADDR
14796: GO 14773
14798: POP
14799: POP
// end ;
14800: LD_VAR 0 2
14804: RET
// export function IsEmpty ( building ) ; begin
14805: LD_INT 0
14807: PPUSH
// if not building then
14808: LD_VAR 0 1
14812: NOT
14813: IFFALSE 14817
// exit ;
14815: GO 14860
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14817: LD_ADDR_VAR 0 2
14821: PUSH
14822: LD_VAR 0 1
14826: PUSH
14827: LD_INT 22
14829: PUSH
14830: LD_VAR 0 1
14834: PPUSH
14835: CALL_OW 255
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 58
14846: PUSH
14847: EMPTY
14848: LIST
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PPUSH
14854: CALL_OW 69
14858: IN
14859: ST_TO_ADDR
// end ;
14860: LD_VAR 0 2
14864: RET
// export function IsNotFull ( building ) ; var places ; begin
14865: LD_INT 0
14867: PPUSH
14868: PPUSH
// if not building then
14869: LD_VAR 0 1
14873: NOT
14874: IFFALSE 14878
// exit ;
14876: GO 15049
// result := false ;
14878: LD_ADDR_VAR 0 2
14882: PUSH
14883: LD_INT 0
14885: ST_TO_ADDR
// places := 0 ;
14886: LD_ADDR_VAR 0 3
14890: PUSH
14891: LD_INT 0
14893: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 266
14903: PUSH
14904: LD_INT 0
14906: DOUBLE
14907: EQUAL
14908: IFTRUE 14966
14910: LD_INT 1
14912: DOUBLE
14913: EQUAL
14914: IFTRUE 14966
14916: LD_INT 6
14918: DOUBLE
14919: EQUAL
14920: IFTRUE 14966
14922: LD_INT 7
14924: DOUBLE
14925: EQUAL
14926: IFTRUE 14966
14928: LD_INT 8
14930: DOUBLE
14931: EQUAL
14932: IFTRUE 14966
14934: LD_INT 4
14936: DOUBLE
14937: EQUAL
14938: IFTRUE 14966
14940: LD_INT 5
14942: DOUBLE
14943: EQUAL
14944: IFTRUE 14966
14946: LD_INT 2
14948: DOUBLE
14949: EQUAL
14950: IFTRUE 14966
14952: LD_INT 3
14954: DOUBLE
14955: EQUAL
14956: IFTRUE 14966
14958: LD_INT 35
14960: DOUBLE
14961: EQUAL
14962: IFTRUE 14966
14964: GO 14977
14966: POP
// places := 6 ; b_bunker , b_breastwork :
14967: LD_ADDR_VAR 0 3
14971: PUSH
14972: LD_INT 6
14974: ST_TO_ADDR
14975: GO 15022
14977: LD_INT 32
14979: DOUBLE
14980: EQUAL
14981: IFTRUE 14991
14983: LD_INT 31
14985: DOUBLE
14986: EQUAL
14987: IFTRUE 14991
14989: GO 15002
14991: POP
// places := 1 ; b_control_tower :
14992: LD_ADDR_VAR 0 3
14996: PUSH
14997: LD_INT 1
14999: ST_TO_ADDR
15000: GO 15022
15002: LD_INT 36
15004: DOUBLE
15005: EQUAL
15006: IFTRUE 15010
15008: GO 15021
15010: POP
// places := 3 ; end ;
15011: LD_ADDR_VAR 0 3
15015: PUSH
15016: LD_INT 3
15018: ST_TO_ADDR
15019: GO 15022
15021: POP
// if places then
15022: LD_VAR 0 3
15026: IFFALSE 15049
// result := UnitsInside ( building ) < places ;
15028: LD_ADDR_VAR 0 2
15032: PUSH
15033: LD_VAR 0 1
15037: PPUSH
15038: CALL_OW 313
15042: PUSH
15043: LD_VAR 0 3
15047: LESS
15048: ST_TO_ADDR
// end ;
15049: LD_VAR 0 2
15053: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15054: LD_INT 0
15056: PPUSH
15057: PPUSH
15058: PPUSH
15059: PPUSH
// tmp := [ ] ;
15060: LD_ADDR_VAR 0 3
15064: PUSH
15065: EMPTY
15066: ST_TO_ADDR
// list := [ ] ;
15067: LD_ADDR_VAR 0 5
15071: PUSH
15072: EMPTY
15073: ST_TO_ADDR
// for i = 16 to 25 do
15074: LD_ADDR_VAR 0 4
15078: PUSH
15079: DOUBLE
15080: LD_INT 16
15082: DEC
15083: ST_TO_ADDR
15084: LD_INT 25
15086: PUSH
15087: FOR_TO
15088: IFFALSE 15161
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15090: LD_ADDR_VAR 0 3
15094: PUSH
15095: LD_VAR 0 3
15099: PUSH
15100: LD_INT 22
15102: PUSH
15103: LD_VAR 0 1
15107: PPUSH
15108: CALL_OW 255
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: LD_INT 91
15119: PUSH
15120: LD_VAR 0 1
15124: PUSH
15125: LD_INT 6
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 30
15135: PUSH
15136: LD_VAR 0 4
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: LIST
15149: PUSH
15150: EMPTY
15151: LIST
15152: PPUSH
15153: CALL_OW 69
15157: ADD
15158: ST_TO_ADDR
15159: GO 15087
15161: POP
15162: POP
// for i = 1 to tmp do
15163: LD_ADDR_VAR 0 4
15167: PUSH
15168: DOUBLE
15169: LD_INT 1
15171: DEC
15172: ST_TO_ADDR
15173: LD_VAR 0 3
15177: PUSH
15178: FOR_TO
15179: IFFALSE 15267
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15181: LD_ADDR_VAR 0 5
15185: PUSH
15186: LD_VAR 0 5
15190: PUSH
15191: LD_VAR 0 3
15195: PUSH
15196: LD_VAR 0 4
15200: ARRAY
15201: PPUSH
15202: CALL_OW 266
15206: PUSH
15207: LD_VAR 0 3
15211: PUSH
15212: LD_VAR 0 4
15216: ARRAY
15217: PPUSH
15218: CALL_OW 250
15222: PUSH
15223: LD_VAR 0 3
15227: PUSH
15228: LD_VAR 0 4
15232: ARRAY
15233: PPUSH
15234: CALL_OW 251
15238: PUSH
15239: LD_VAR 0 3
15243: PUSH
15244: LD_VAR 0 4
15248: ARRAY
15249: PPUSH
15250: CALL_OW 254
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: ADD
15264: ST_TO_ADDR
15265: GO 15178
15267: POP
15268: POP
// result := list ;
15269: LD_ADDR_VAR 0 2
15273: PUSH
15274: LD_VAR 0 5
15278: ST_TO_ADDR
// end ;
15279: LD_VAR 0 2
15283: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15284: LD_INT 0
15286: PPUSH
15287: PPUSH
15288: PPUSH
15289: PPUSH
15290: PPUSH
15291: PPUSH
15292: PPUSH
// if not factory then
15293: LD_VAR 0 1
15297: NOT
15298: IFFALSE 15302
// exit ;
15300: GO 15895
// if control = control_apeman then
15302: LD_VAR 0 4
15306: PUSH
15307: LD_INT 5
15309: EQUAL
15310: IFFALSE 15419
// begin tmp := UnitsInside ( factory ) ;
15312: LD_ADDR_VAR 0 8
15316: PUSH
15317: LD_VAR 0 1
15321: PPUSH
15322: CALL_OW 313
15326: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15327: LD_VAR 0 8
15331: PPUSH
15332: LD_INT 25
15334: PUSH
15335: LD_INT 12
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PPUSH
15342: CALL_OW 72
15346: NOT
15347: IFFALSE 15357
// control := control_manual ;
15349: LD_ADDR_VAR 0 4
15353: PUSH
15354: LD_INT 1
15356: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15357: LD_ADDR_VAR 0 8
15361: PUSH
15362: LD_VAR 0 1
15366: PPUSH
15367: CALL 15054 0 1
15371: ST_TO_ADDR
// if tmp then
15372: LD_VAR 0 8
15376: IFFALSE 15419
// begin for i in tmp do
15378: LD_ADDR_VAR 0 7
15382: PUSH
15383: LD_VAR 0 8
15387: PUSH
15388: FOR_IN
15389: IFFALSE 15417
// if i [ 1 ] = b_ext_radio then
15391: LD_VAR 0 7
15395: PUSH
15396: LD_INT 1
15398: ARRAY
15399: PUSH
15400: LD_INT 22
15402: EQUAL
15403: IFFALSE 15415
// begin control := control_remote ;
15405: LD_ADDR_VAR 0 4
15409: PUSH
15410: LD_INT 2
15412: ST_TO_ADDR
// break ;
15413: GO 15417
// end ;
15415: GO 15388
15417: POP
15418: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15419: LD_VAR 0 1
15423: PPUSH
15424: LD_VAR 0 2
15428: PPUSH
15429: LD_VAR 0 3
15433: PPUSH
15434: LD_VAR 0 4
15438: PPUSH
15439: LD_VAR 0 5
15443: PPUSH
15444: CALL_OW 448
15448: IFFALSE 15483
// begin result := [ chassis , engine , control , weapon ] ;
15450: LD_ADDR_VAR 0 6
15454: PUSH
15455: LD_VAR 0 2
15459: PUSH
15460: LD_VAR 0 3
15464: PUSH
15465: LD_VAR 0 4
15469: PUSH
15470: LD_VAR 0 5
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: ST_TO_ADDR
// exit ;
15481: GO 15895
// end ; _chassis := AvailableChassisList ( factory ) ;
15483: LD_ADDR_VAR 0 9
15487: PUSH
15488: LD_VAR 0 1
15492: PPUSH
15493: CALL_OW 475
15497: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15498: LD_ADDR_VAR 0 11
15502: PUSH
15503: LD_VAR 0 1
15507: PPUSH
15508: CALL_OW 476
15512: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15513: LD_ADDR_VAR 0 12
15517: PUSH
15518: LD_VAR 0 1
15522: PPUSH
15523: CALL_OW 477
15527: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15528: LD_ADDR_VAR 0 10
15532: PUSH
15533: LD_VAR 0 1
15537: PPUSH
15538: CALL_OW 478
15542: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15543: LD_VAR 0 9
15547: NOT
15548: PUSH
15549: LD_VAR 0 11
15553: NOT
15554: OR
15555: PUSH
15556: LD_VAR 0 12
15560: NOT
15561: OR
15562: PUSH
15563: LD_VAR 0 10
15567: NOT
15568: OR
15569: IFFALSE 15604
// begin result := [ chassis , engine , control , weapon ] ;
15571: LD_ADDR_VAR 0 6
15575: PUSH
15576: LD_VAR 0 2
15580: PUSH
15581: LD_VAR 0 3
15585: PUSH
15586: LD_VAR 0 4
15590: PUSH
15591: LD_VAR 0 5
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: ST_TO_ADDR
// exit ;
15602: GO 15895
// end ; if not chassis in _chassis then
15604: LD_VAR 0 2
15608: PUSH
15609: LD_VAR 0 9
15613: IN
15614: NOT
15615: IFFALSE 15641
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: LD_VAR 0 9
15626: PUSH
15627: LD_INT 1
15629: PPUSH
15630: LD_VAR 0 9
15634: PPUSH
15635: CALL_OW 12
15639: ARRAY
15640: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15641: LD_VAR 0 2
15645: PPUSH
15646: LD_VAR 0 3
15650: PPUSH
15651: CALL 15900 0 2
15655: NOT
15656: IFFALSE 15715
// repeat engine := _engine [ 1 ] ;
15658: LD_ADDR_VAR 0 3
15662: PUSH
15663: LD_VAR 0 11
15667: PUSH
15668: LD_INT 1
15670: ARRAY
15671: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15672: LD_ADDR_VAR 0 11
15676: PUSH
15677: LD_VAR 0 11
15681: PPUSH
15682: LD_INT 1
15684: PPUSH
15685: CALL_OW 3
15689: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15690: LD_VAR 0 2
15694: PPUSH
15695: LD_VAR 0 3
15699: PPUSH
15700: CALL 15900 0 2
15704: PUSH
15705: LD_VAR 0 11
15709: PUSH
15710: EMPTY
15711: EQUAL
15712: OR
15713: IFFALSE 15658
// if not control in _control then
15715: LD_VAR 0 4
15719: PUSH
15720: LD_VAR 0 12
15724: IN
15725: NOT
15726: IFFALSE 15752
// control := _control [ rand ( 1 , _control ) ] ;
15728: LD_ADDR_VAR 0 4
15732: PUSH
15733: LD_VAR 0 12
15737: PUSH
15738: LD_INT 1
15740: PPUSH
15741: LD_VAR 0 12
15745: PPUSH
15746: CALL_OW 12
15750: ARRAY
15751: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15752: LD_VAR 0 2
15756: PPUSH
15757: LD_VAR 0 5
15761: PPUSH
15762: CALL 16120 0 2
15766: NOT
15767: IFFALSE 15826
// repeat weapon := _weapon [ 1 ] ;
15769: LD_ADDR_VAR 0 5
15773: PUSH
15774: LD_VAR 0 10
15778: PUSH
15779: LD_INT 1
15781: ARRAY
15782: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15783: LD_ADDR_VAR 0 10
15787: PUSH
15788: LD_VAR 0 10
15792: PPUSH
15793: LD_INT 1
15795: PPUSH
15796: CALL_OW 3
15800: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15801: LD_VAR 0 2
15805: PPUSH
15806: LD_VAR 0 5
15810: PPUSH
15811: CALL 16120 0 2
15815: PUSH
15816: LD_VAR 0 10
15820: PUSH
15821: EMPTY
15822: EQUAL
15823: OR
15824: IFFALSE 15769
// result := [ ] ;
15826: LD_ADDR_VAR 0 6
15830: PUSH
15831: EMPTY
15832: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15833: LD_VAR 0 1
15837: PPUSH
15838: LD_VAR 0 2
15842: PPUSH
15843: LD_VAR 0 3
15847: PPUSH
15848: LD_VAR 0 4
15852: PPUSH
15853: LD_VAR 0 5
15857: PPUSH
15858: CALL_OW 448
15862: IFFALSE 15895
// result := [ chassis , engine , control , weapon ] ;
15864: LD_ADDR_VAR 0 6
15868: PUSH
15869: LD_VAR 0 2
15873: PUSH
15874: LD_VAR 0 3
15878: PUSH
15879: LD_VAR 0 4
15883: PUSH
15884: LD_VAR 0 5
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: ST_TO_ADDR
// end ;
15895: LD_VAR 0 6
15899: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15900: LD_INT 0
15902: PPUSH
// if not chassis or not engine then
15903: LD_VAR 0 1
15907: NOT
15908: PUSH
15909: LD_VAR 0 2
15913: NOT
15914: OR
15915: IFFALSE 15919
// exit ;
15917: GO 16115
// case engine of engine_solar :
15919: LD_VAR 0 2
15923: PUSH
15924: LD_INT 2
15926: DOUBLE
15927: EQUAL
15928: IFTRUE 15932
15930: GO 15970
15932: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15933: LD_ADDR_VAR 0 3
15937: PUSH
15938: LD_INT 11
15940: PUSH
15941: LD_INT 12
15943: PUSH
15944: LD_INT 13
15946: PUSH
15947: LD_INT 14
15949: PUSH
15950: LD_INT 1
15952: PUSH
15953: LD_INT 2
15955: PUSH
15956: LD_INT 3
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: ST_TO_ADDR
15968: GO 16099
15970: LD_INT 1
15972: DOUBLE
15973: EQUAL
15974: IFTRUE 15978
15976: GO 16040
15978: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15979: LD_ADDR_VAR 0 3
15983: PUSH
15984: LD_INT 11
15986: PUSH
15987: LD_INT 12
15989: PUSH
15990: LD_INT 13
15992: PUSH
15993: LD_INT 14
15995: PUSH
15996: LD_INT 1
15998: PUSH
15999: LD_INT 2
16001: PUSH
16002: LD_INT 3
16004: PUSH
16005: LD_INT 4
16007: PUSH
16008: LD_INT 5
16010: PUSH
16011: LD_INT 21
16013: PUSH
16014: LD_INT 23
16016: PUSH
16017: LD_INT 22
16019: PUSH
16020: LD_INT 24
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: ST_TO_ADDR
16038: GO 16099
16040: LD_INT 3
16042: DOUBLE
16043: EQUAL
16044: IFTRUE 16048
16046: GO 16098
16048: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16049: LD_ADDR_VAR 0 3
16053: PUSH
16054: LD_INT 13
16056: PUSH
16057: LD_INT 14
16059: PUSH
16060: LD_INT 2
16062: PUSH
16063: LD_INT 3
16065: PUSH
16066: LD_INT 4
16068: PUSH
16069: LD_INT 5
16071: PUSH
16072: LD_INT 21
16074: PUSH
16075: LD_INT 22
16077: PUSH
16078: LD_INT 23
16080: PUSH
16081: LD_INT 24
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: ST_TO_ADDR
16096: GO 16099
16098: POP
// result := ( chassis in result ) ;
16099: LD_ADDR_VAR 0 3
16103: PUSH
16104: LD_VAR 0 1
16108: PUSH
16109: LD_VAR 0 3
16113: IN
16114: ST_TO_ADDR
// end ;
16115: LD_VAR 0 3
16119: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16120: LD_INT 0
16122: PPUSH
// if not chassis or not weapon then
16123: LD_VAR 0 1
16127: NOT
16128: PUSH
16129: LD_VAR 0 2
16133: NOT
16134: OR
16135: IFFALSE 16139
// exit ;
16137: GO 17201
// case weapon of us_machine_gun :
16139: LD_VAR 0 2
16143: PUSH
16144: LD_INT 2
16146: DOUBLE
16147: EQUAL
16148: IFTRUE 16152
16150: GO 16182
16152: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16153: LD_ADDR_VAR 0 3
16157: PUSH
16158: LD_INT 1
16160: PUSH
16161: LD_INT 2
16163: PUSH
16164: LD_INT 3
16166: PUSH
16167: LD_INT 4
16169: PUSH
16170: LD_INT 5
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: ST_TO_ADDR
16180: GO 17185
16182: LD_INT 3
16184: DOUBLE
16185: EQUAL
16186: IFTRUE 16190
16188: GO 16220
16190: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16191: LD_ADDR_VAR 0 3
16195: PUSH
16196: LD_INT 1
16198: PUSH
16199: LD_INT 2
16201: PUSH
16202: LD_INT 3
16204: PUSH
16205: LD_INT 4
16207: PUSH
16208: LD_INT 5
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: ST_TO_ADDR
16218: GO 17185
16220: LD_INT 11
16222: DOUBLE
16223: EQUAL
16224: IFTRUE 16228
16226: GO 16258
16228: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16229: LD_ADDR_VAR 0 3
16233: PUSH
16234: LD_INT 1
16236: PUSH
16237: LD_INT 2
16239: PUSH
16240: LD_INT 3
16242: PUSH
16243: LD_INT 4
16245: PUSH
16246: LD_INT 5
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: ST_TO_ADDR
16256: GO 17185
16258: LD_INT 4
16260: DOUBLE
16261: EQUAL
16262: IFTRUE 16266
16264: GO 16292
16266: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16267: LD_ADDR_VAR 0 3
16271: PUSH
16272: LD_INT 2
16274: PUSH
16275: LD_INT 3
16277: PUSH
16278: LD_INT 4
16280: PUSH
16281: LD_INT 5
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: ST_TO_ADDR
16290: GO 17185
16292: LD_INT 5
16294: DOUBLE
16295: EQUAL
16296: IFTRUE 16300
16298: GO 16326
16300: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16301: LD_ADDR_VAR 0 3
16305: PUSH
16306: LD_INT 2
16308: PUSH
16309: LD_INT 3
16311: PUSH
16312: LD_INT 4
16314: PUSH
16315: LD_INT 5
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: ST_TO_ADDR
16324: GO 17185
16326: LD_INT 9
16328: DOUBLE
16329: EQUAL
16330: IFTRUE 16334
16332: GO 16360
16334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16335: LD_ADDR_VAR 0 3
16339: PUSH
16340: LD_INT 2
16342: PUSH
16343: LD_INT 3
16345: PUSH
16346: LD_INT 4
16348: PUSH
16349: LD_INT 5
16351: PUSH
16352: EMPTY
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: ST_TO_ADDR
16358: GO 17185
16360: LD_INT 7
16362: DOUBLE
16363: EQUAL
16364: IFTRUE 16368
16366: GO 16394
16368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16369: LD_ADDR_VAR 0 3
16373: PUSH
16374: LD_INT 2
16376: PUSH
16377: LD_INT 3
16379: PUSH
16380: LD_INT 4
16382: PUSH
16383: LD_INT 5
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: ST_TO_ADDR
16392: GO 17185
16394: LD_INT 12
16396: DOUBLE
16397: EQUAL
16398: IFTRUE 16402
16400: GO 16428
16402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16403: LD_ADDR_VAR 0 3
16407: PUSH
16408: LD_INT 2
16410: PUSH
16411: LD_INT 3
16413: PUSH
16414: LD_INT 4
16416: PUSH
16417: LD_INT 5
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: ST_TO_ADDR
16426: GO 17185
16428: LD_INT 13
16430: DOUBLE
16431: EQUAL
16432: IFTRUE 16436
16434: GO 16462
16436: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16437: LD_ADDR_VAR 0 3
16441: PUSH
16442: LD_INT 2
16444: PUSH
16445: LD_INT 3
16447: PUSH
16448: LD_INT 4
16450: PUSH
16451: LD_INT 5
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: ST_TO_ADDR
16460: GO 17185
16462: LD_INT 14
16464: DOUBLE
16465: EQUAL
16466: IFTRUE 16470
16468: GO 16488
16470: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16471: LD_ADDR_VAR 0 3
16475: PUSH
16476: LD_INT 4
16478: PUSH
16479: LD_INT 5
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: ST_TO_ADDR
16486: GO 17185
16488: LD_INT 6
16490: DOUBLE
16491: EQUAL
16492: IFTRUE 16496
16494: GO 16514
16496: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16497: LD_ADDR_VAR 0 3
16501: PUSH
16502: LD_INT 4
16504: PUSH
16505: LD_INT 5
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: ST_TO_ADDR
16512: GO 17185
16514: LD_INT 10
16516: DOUBLE
16517: EQUAL
16518: IFTRUE 16522
16520: GO 16540
16522: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16523: LD_ADDR_VAR 0 3
16527: PUSH
16528: LD_INT 4
16530: PUSH
16531: LD_INT 5
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: ST_TO_ADDR
16538: GO 17185
16540: LD_INT 22
16542: DOUBLE
16543: EQUAL
16544: IFTRUE 16548
16546: GO 16574
16548: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16549: LD_ADDR_VAR 0 3
16553: PUSH
16554: LD_INT 11
16556: PUSH
16557: LD_INT 12
16559: PUSH
16560: LD_INT 13
16562: PUSH
16563: LD_INT 14
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: ST_TO_ADDR
16572: GO 17185
16574: LD_INT 23
16576: DOUBLE
16577: EQUAL
16578: IFTRUE 16582
16580: GO 16608
16582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16583: LD_ADDR_VAR 0 3
16587: PUSH
16588: LD_INT 11
16590: PUSH
16591: LD_INT 12
16593: PUSH
16594: LD_INT 13
16596: PUSH
16597: LD_INT 14
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: ST_TO_ADDR
16606: GO 17185
16608: LD_INT 24
16610: DOUBLE
16611: EQUAL
16612: IFTRUE 16616
16614: GO 16642
16616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16617: LD_ADDR_VAR 0 3
16621: PUSH
16622: LD_INT 11
16624: PUSH
16625: LD_INT 12
16627: PUSH
16628: LD_INT 13
16630: PUSH
16631: LD_INT 14
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: ST_TO_ADDR
16640: GO 17185
16642: LD_INT 30
16644: DOUBLE
16645: EQUAL
16646: IFTRUE 16650
16648: GO 16676
16650: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16651: LD_ADDR_VAR 0 3
16655: PUSH
16656: LD_INT 11
16658: PUSH
16659: LD_INT 12
16661: PUSH
16662: LD_INT 13
16664: PUSH
16665: LD_INT 14
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: ST_TO_ADDR
16674: GO 17185
16676: LD_INT 25
16678: DOUBLE
16679: EQUAL
16680: IFTRUE 16684
16682: GO 16702
16684: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16685: LD_ADDR_VAR 0 3
16689: PUSH
16690: LD_INT 13
16692: PUSH
16693: LD_INT 14
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: ST_TO_ADDR
16700: GO 17185
16702: LD_INT 27
16704: DOUBLE
16705: EQUAL
16706: IFTRUE 16710
16708: GO 16728
16710: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
16711: LD_ADDR_VAR 0 3
16715: PUSH
16716: LD_INT 13
16718: PUSH
16719: LD_INT 14
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: ST_TO_ADDR
16726: GO 17185
16728: LD_EXP 87
16732: DOUBLE
16733: EQUAL
16734: IFTRUE 16738
16736: GO 16764
16738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16739: LD_ADDR_VAR 0 3
16743: PUSH
16744: LD_INT 11
16746: PUSH
16747: LD_INT 12
16749: PUSH
16750: LD_INT 13
16752: PUSH
16753: LD_INT 14
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: ST_TO_ADDR
16762: GO 17185
16764: LD_INT 28
16766: DOUBLE
16767: EQUAL
16768: IFTRUE 16772
16770: GO 16790
16772: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16773: LD_ADDR_VAR 0 3
16777: PUSH
16778: LD_INT 13
16780: PUSH
16781: LD_INT 14
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: ST_TO_ADDR
16788: GO 17185
16790: LD_INT 29
16792: DOUBLE
16793: EQUAL
16794: IFTRUE 16798
16796: GO 16816
16798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16799: LD_ADDR_VAR 0 3
16803: PUSH
16804: LD_INT 13
16806: PUSH
16807: LD_INT 14
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: ST_TO_ADDR
16814: GO 17185
16816: LD_INT 31
16818: DOUBLE
16819: EQUAL
16820: IFTRUE 16824
16822: GO 16842
16824: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16825: LD_ADDR_VAR 0 3
16829: PUSH
16830: LD_INT 13
16832: PUSH
16833: LD_INT 14
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: ST_TO_ADDR
16840: GO 17185
16842: LD_INT 26
16844: DOUBLE
16845: EQUAL
16846: IFTRUE 16850
16848: GO 16868
16850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16851: LD_ADDR_VAR 0 3
16855: PUSH
16856: LD_INT 13
16858: PUSH
16859: LD_INT 14
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: ST_TO_ADDR
16866: GO 17185
16868: LD_INT 42
16870: DOUBLE
16871: EQUAL
16872: IFTRUE 16876
16874: GO 16902
16876: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16877: LD_ADDR_VAR 0 3
16881: PUSH
16882: LD_INT 21
16884: PUSH
16885: LD_INT 22
16887: PUSH
16888: LD_INT 23
16890: PUSH
16891: LD_INT 24
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: ST_TO_ADDR
16900: GO 17185
16902: LD_INT 43
16904: DOUBLE
16905: EQUAL
16906: IFTRUE 16910
16908: GO 16936
16910: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16911: LD_ADDR_VAR 0 3
16915: PUSH
16916: LD_INT 21
16918: PUSH
16919: LD_INT 22
16921: PUSH
16922: LD_INT 23
16924: PUSH
16925: LD_INT 24
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: ST_TO_ADDR
16934: GO 17185
16936: LD_INT 44
16938: DOUBLE
16939: EQUAL
16940: IFTRUE 16944
16942: GO 16970
16944: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16945: LD_ADDR_VAR 0 3
16949: PUSH
16950: LD_INT 21
16952: PUSH
16953: LD_INT 22
16955: PUSH
16956: LD_INT 23
16958: PUSH
16959: LD_INT 24
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: ST_TO_ADDR
16968: GO 17185
16970: LD_INT 45
16972: DOUBLE
16973: EQUAL
16974: IFTRUE 16978
16976: GO 17004
16978: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16979: LD_ADDR_VAR 0 3
16983: PUSH
16984: LD_INT 21
16986: PUSH
16987: LD_INT 22
16989: PUSH
16990: LD_INT 23
16992: PUSH
16993: LD_INT 24
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: ST_TO_ADDR
17002: GO 17185
17004: LD_INT 49
17006: DOUBLE
17007: EQUAL
17008: IFTRUE 17012
17010: GO 17038
17012: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
17013: LD_ADDR_VAR 0 3
17017: PUSH
17018: LD_INT 21
17020: PUSH
17021: LD_INT 22
17023: PUSH
17024: LD_INT 23
17026: PUSH
17027: LD_INT 24
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: ST_TO_ADDR
17036: GO 17185
17038: LD_INT 51
17040: DOUBLE
17041: EQUAL
17042: IFTRUE 17046
17044: GO 17072
17046: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17047: LD_ADDR_VAR 0 3
17051: PUSH
17052: LD_INT 21
17054: PUSH
17055: LD_INT 22
17057: PUSH
17058: LD_INT 23
17060: PUSH
17061: LD_INT 24
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: ST_TO_ADDR
17070: GO 17185
17072: LD_INT 52
17074: DOUBLE
17075: EQUAL
17076: IFTRUE 17080
17078: GO 17106
17080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17081: LD_ADDR_VAR 0 3
17085: PUSH
17086: LD_INT 21
17088: PUSH
17089: LD_INT 22
17091: PUSH
17092: LD_INT 23
17094: PUSH
17095: LD_INT 24
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: ST_TO_ADDR
17104: GO 17185
17106: LD_INT 53
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17132
17114: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17115: LD_ADDR_VAR 0 3
17119: PUSH
17120: LD_INT 23
17122: PUSH
17123: LD_INT 24
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: ST_TO_ADDR
17130: GO 17185
17132: LD_INT 46
17134: DOUBLE
17135: EQUAL
17136: IFTRUE 17140
17138: GO 17158
17140: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17141: LD_ADDR_VAR 0 3
17145: PUSH
17146: LD_INT 23
17148: PUSH
17149: LD_INT 24
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: ST_TO_ADDR
17156: GO 17185
17158: LD_INT 47
17160: DOUBLE
17161: EQUAL
17162: IFTRUE 17166
17164: GO 17184
17166: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17167: LD_ADDR_VAR 0 3
17171: PUSH
17172: LD_INT 23
17174: PUSH
17175: LD_INT 24
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: ST_TO_ADDR
17182: GO 17185
17184: POP
// result := ( chassis in result ) ;
17185: LD_ADDR_VAR 0 3
17189: PUSH
17190: LD_VAR 0 1
17194: PUSH
17195: LD_VAR 0 3
17199: IN
17200: ST_TO_ADDR
// end ;
17201: LD_VAR 0 3
17205: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17206: LD_INT 0
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
17212: PPUSH
17213: PPUSH
17214: PPUSH
// result := array ;
17215: LD_ADDR_VAR 0 5
17219: PUSH
17220: LD_VAR 0 1
17224: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17225: LD_VAR 0 1
17229: NOT
17230: PUSH
17231: LD_VAR 0 2
17235: NOT
17236: OR
17237: PUSH
17238: LD_VAR 0 3
17242: NOT
17243: OR
17244: PUSH
17245: LD_VAR 0 2
17249: PUSH
17250: LD_VAR 0 1
17254: GREATER
17255: OR
17256: PUSH
17257: LD_VAR 0 3
17261: PUSH
17262: LD_VAR 0 1
17266: GREATER
17267: OR
17268: IFFALSE 17272
// exit ;
17270: GO 17568
// if direction then
17272: LD_VAR 0 4
17276: IFFALSE 17340
// begin d := 1 ;
17278: LD_ADDR_VAR 0 9
17282: PUSH
17283: LD_INT 1
17285: ST_TO_ADDR
// if i_from > i_to then
17286: LD_VAR 0 2
17290: PUSH
17291: LD_VAR 0 3
17295: GREATER
17296: IFFALSE 17322
// length := ( array - i_from ) + i_to else
17298: LD_ADDR_VAR 0 11
17302: PUSH
17303: LD_VAR 0 1
17307: PUSH
17308: LD_VAR 0 2
17312: MINUS
17313: PUSH
17314: LD_VAR 0 3
17318: PLUS
17319: ST_TO_ADDR
17320: GO 17338
// length := i_to - i_from ;
17322: LD_ADDR_VAR 0 11
17326: PUSH
17327: LD_VAR 0 3
17331: PUSH
17332: LD_VAR 0 2
17336: MINUS
17337: ST_TO_ADDR
// end else
17338: GO 17401
// begin d := - 1 ;
17340: LD_ADDR_VAR 0 9
17344: PUSH
17345: LD_INT 1
17347: NEG
17348: ST_TO_ADDR
// if i_from > i_to then
17349: LD_VAR 0 2
17353: PUSH
17354: LD_VAR 0 3
17358: GREATER
17359: IFFALSE 17379
// length := i_from - i_to else
17361: LD_ADDR_VAR 0 11
17365: PUSH
17366: LD_VAR 0 2
17370: PUSH
17371: LD_VAR 0 3
17375: MINUS
17376: ST_TO_ADDR
17377: GO 17401
// length := ( array - i_to ) + i_from ;
17379: LD_ADDR_VAR 0 11
17383: PUSH
17384: LD_VAR 0 1
17388: PUSH
17389: LD_VAR 0 3
17393: MINUS
17394: PUSH
17395: LD_VAR 0 2
17399: PLUS
17400: ST_TO_ADDR
// end ; if not length then
17401: LD_VAR 0 11
17405: NOT
17406: IFFALSE 17410
// exit ;
17408: GO 17568
// tmp := array ;
17410: LD_ADDR_VAR 0 10
17414: PUSH
17415: LD_VAR 0 1
17419: ST_TO_ADDR
// for i = 1 to length do
17420: LD_ADDR_VAR 0 6
17424: PUSH
17425: DOUBLE
17426: LD_INT 1
17428: DEC
17429: ST_TO_ADDR
17430: LD_VAR 0 11
17434: PUSH
17435: FOR_TO
17436: IFFALSE 17556
// begin for j = 1 to array do
17438: LD_ADDR_VAR 0 7
17442: PUSH
17443: DOUBLE
17444: LD_INT 1
17446: DEC
17447: ST_TO_ADDR
17448: LD_VAR 0 1
17452: PUSH
17453: FOR_TO
17454: IFFALSE 17542
// begin k := j + d ;
17456: LD_ADDR_VAR 0 8
17460: PUSH
17461: LD_VAR 0 7
17465: PUSH
17466: LD_VAR 0 9
17470: PLUS
17471: ST_TO_ADDR
// if k > array then
17472: LD_VAR 0 8
17476: PUSH
17477: LD_VAR 0 1
17481: GREATER
17482: IFFALSE 17492
// k := 1 ;
17484: LD_ADDR_VAR 0 8
17488: PUSH
17489: LD_INT 1
17491: ST_TO_ADDR
// if not k then
17492: LD_VAR 0 8
17496: NOT
17497: IFFALSE 17509
// k := array ;
17499: LD_ADDR_VAR 0 8
17503: PUSH
17504: LD_VAR 0 1
17508: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17509: LD_ADDR_VAR 0 10
17513: PUSH
17514: LD_VAR 0 10
17518: PPUSH
17519: LD_VAR 0 8
17523: PPUSH
17524: LD_VAR 0 1
17528: PUSH
17529: LD_VAR 0 7
17533: ARRAY
17534: PPUSH
17535: CALL_OW 1
17539: ST_TO_ADDR
// end ;
17540: GO 17453
17542: POP
17543: POP
// array := tmp ;
17544: LD_ADDR_VAR 0 1
17548: PUSH
17549: LD_VAR 0 10
17553: ST_TO_ADDR
// end ;
17554: GO 17435
17556: POP
17557: POP
// result := array ;
17558: LD_ADDR_VAR 0 5
17562: PUSH
17563: LD_VAR 0 1
17567: ST_TO_ADDR
// end ;
17568: LD_VAR 0 5
17572: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17573: LD_INT 0
17575: PPUSH
17576: PPUSH
// result := 0 ;
17577: LD_ADDR_VAR 0 3
17581: PUSH
17582: LD_INT 0
17584: ST_TO_ADDR
// if not array or not value in array then
17585: LD_VAR 0 1
17589: NOT
17590: PUSH
17591: LD_VAR 0 2
17595: PUSH
17596: LD_VAR 0 1
17600: IN
17601: NOT
17602: OR
17603: IFFALSE 17607
// exit ;
17605: GO 17661
// for i = 1 to array do
17607: LD_ADDR_VAR 0 4
17611: PUSH
17612: DOUBLE
17613: LD_INT 1
17615: DEC
17616: ST_TO_ADDR
17617: LD_VAR 0 1
17621: PUSH
17622: FOR_TO
17623: IFFALSE 17659
// if value = array [ i ] then
17625: LD_VAR 0 2
17629: PUSH
17630: LD_VAR 0 1
17634: PUSH
17635: LD_VAR 0 4
17639: ARRAY
17640: EQUAL
17641: IFFALSE 17657
// begin result := i ;
17643: LD_ADDR_VAR 0 3
17647: PUSH
17648: LD_VAR 0 4
17652: ST_TO_ADDR
// exit ;
17653: POP
17654: POP
17655: GO 17661
// end ;
17657: GO 17622
17659: POP
17660: POP
// end ;
17661: LD_VAR 0 3
17665: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17666: LD_INT 0
17668: PPUSH
// vc_chassis := chassis ;
17669: LD_ADDR_OWVAR 37
17673: PUSH
17674: LD_VAR 0 1
17678: ST_TO_ADDR
// vc_engine := engine ;
17679: LD_ADDR_OWVAR 39
17683: PUSH
17684: LD_VAR 0 2
17688: ST_TO_ADDR
// vc_control := control ;
17689: LD_ADDR_OWVAR 38
17693: PUSH
17694: LD_VAR 0 3
17698: ST_TO_ADDR
// vc_weapon := weapon ;
17699: LD_ADDR_OWVAR 40
17703: PUSH
17704: LD_VAR 0 4
17708: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17709: LD_ADDR_OWVAR 41
17713: PUSH
17714: LD_VAR 0 5
17718: ST_TO_ADDR
// end ;
17719: LD_VAR 0 6
17723: RET
// export function WantPlant ( unit ) ; var task ; begin
17724: LD_INT 0
17726: PPUSH
17727: PPUSH
// result := false ;
17728: LD_ADDR_VAR 0 2
17732: PUSH
17733: LD_INT 0
17735: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17736: LD_ADDR_VAR 0 3
17740: PUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: CALL_OW 437
17750: ST_TO_ADDR
// if task then
17751: LD_VAR 0 3
17755: IFFALSE 17783
// if task [ 1 ] [ 1 ] = p then
17757: LD_VAR 0 3
17761: PUSH
17762: LD_INT 1
17764: ARRAY
17765: PUSH
17766: LD_INT 1
17768: ARRAY
17769: PUSH
17770: LD_STRING p
17772: EQUAL
17773: IFFALSE 17783
// result := true ;
17775: LD_ADDR_VAR 0 2
17779: PUSH
17780: LD_INT 1
17782: ST_TO_ADDR
// end ;
17783: LD_VAR 0 2
17787: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17788: LD_INT 0
17790: PPUSH
17791: PPUSH
17792: PPUSH
17793: PPUSH
// if pos < 1 then
17794: LD_VAR 0 2
17798: PUSH
17799: LD_INT 1
17801: LESS
17802: IFFALSE 17806
// exit ;
17804: GO 18109
// if pos = 1 then
17806: LD_VAR 0 2
17810: PUSH
17811: LD_INT 1
17813: EQUAL
17814: IFFALSE 17847
// result := Replace ( arr , pos [ 1 ] , value ) else
17816: LD_ADDR_VAR 0 4
17820: PUSH
17821: LD_VAR 0 1
17825: PPUSH
17826: LD_VAR 0 2
17830: PUSH
17831: LD_INT 1
17833: ARRAY
17834: PPUSH
17835: LD_VAR 0 3
17839: PPUSH
17840: CALL_OW 1
17844: ST_TO_ADDR
17845: GO 18109
// begin tmp := arr ;
17847: LD_ADDR_VAR 0 6
17851: PUSH
17852: LD_VAR 0 1
17856: ST_TO_ADDR
// s_arr := [ tmp ] ;
17857: LD_ADDR_VAR 0 7
17861: PUSH
17862: LD_VAR 0 6
17866: PUSH
17867: EMPTY
17868: LIST
17869: ST_TO_ADDR
// for i = 1 to pos - 1 do
17870: LD_ADDR_VAR 0 5
17874: PUSH
17875: DOUBLE
17876: LD_INT 1
17878: DEC
17879: ST_TO_ADDR
17880: LD_VAR 0 2
17884: PUSH
17885: LD_INT 1
17887: MINUS
17888: PUSH
17889: FOR_TO
17890: IFFALSE 17935
// begin tmp := tmp [ pos [ i ] ] ;
17892: LD_ADDR_VAR 0 6
17896: PUSH
17897: LD_VAR 0 6
17901: PUSH
17902: LD_VAR 0 2
17906: PUSH
17907: LD_VAR 0 5
17911: ARRAY
17912: ARRAY
17913: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17914: LD_ADDR_VAR 0 7
17918: PUSH
17919: LD_VAR 0 7
17923: PUSH
17924: LD_VAR 0 6
17928: PUSH
17929: EMPTY
17930: LIST
17931: ADD
17932: ST_TO_ADDR
// end ;
17933: GO 17889
17935: POP
17936: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17937: LD_ADDR_VAR 0 6
17941: PUSH
17942: LD_VAR 0 6
17946: PPUSH
17947: LD_VAR 0 2
17951: PUSH
17952: LD_VAR 0 2
17956: ARRAY
17957: PPUSH
17958: LD_VAR 0 3
17962: PPUSH
17963: CALL_OW 1
17967: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17968: LD_ADDR_VAR 0 7
17972: PUSH
17973: LD_VAR 0 7
17977: PPUSH
17978: LD_VAR 0 7
17982: PPUSH
17983: LD_VAR 0 6
17987: PPUSH
17988: CALL_OW 1
17992: ST_TO_ADDR
// for i = s_arr downto 2 do
17993: LD_ADDR_VAR 0 5
17997: PUSH
17998: DOUBLE
17999: LD_VAR 0 7
18003: INC
18004: ST_TO_ADDR
18005: LD_INT 2
18007: PUSH
18008: FOR_DOWNTO
18009: IFFALSE 18093
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
18011: LD_ADDR_VAR 0 6
18015: PUSH
18016: LD_VAR 0 7
18020: PUSH
18021: LD_VAR 0 5
18025: PUSH
18026: LD_INT 1
18028: MINUS
18029: ARRAY
18030: PPUSH
18031: LD_VAR 0 2
18035: PUSH
18036: LD_VAR 0 5
18040: PUSH
18041: LD_INT 1
18043: MINUS
18044: ARRAY
18045: PPUSH
18046: LD_VAR 0 7
18050: PUSH
18051: LD_VAR 0 5
18055: ARRAY
18056: PPUSH
18057: CALL_OW 1
18061: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18062: LD_ADDR_VAR 0 7
18066: PUSH
18067: LD_VAR 0 7
18071: PPUSH
18072: LD_VAR 0 5
18076: PUSH
18077: LD_INT 1
18079: MINUS
18080: PPUSH
18081: LD_VAR 0 6
18085: PPUSH
18086: CALL_OW 1
18090: ST_TO_ADDR
// end ;
18091: GO 18008
18093: POP
18094: POP
// result := s_arr [ 1 ] ;
18095: LD_ADDR_VAR 0 4
18099: PUSH
18100: LD_VAR 0 7
18104: PUSH
18105: LD_INT 1
18107: ARRAY
18108: ST_TO_ADDR
// end ; end ;
18109: LD_VAR 0 4
18113: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18114: LD_INT 0
18116: PPUSH
18117: PPUSH
// if not list then
18118: LD_VAR 0 1
18122: NOT
18123: IFFALSE 18127
// exit ;
18125: GO 18218
// i := list [ pos1 ] ;
18127: LD_ADDR_VAR 0 5
18131: PUSH
18132: LD_VAR 0 1
18136: PUSH
18137: LD_VAR 0 2
18141: ARRAY
18142: ST_TO_ADDR
// if not i then
18143: LD_VAR 0 5
18147: NOT
18148: IFFALSE 18152
// exit ;
18150: GO 18218
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18152: LD_ADDR_VAR 0 1
18156: PUSH
18157: LD_VAR 0 1
18161: PPUSH
18162: LD_VAR 0 2
18166: PPUSH
18167: LD_VAR 0 1
18171: PUSH
18172: LD_VAR 0 3
18176: ARRAY
18177: PPUSH
18178: CALL_OW 1
18182: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18183: LD_ADDR_VAR 0 1
18187: PUSH
18188: LD_VAR 0 1
18192: PPUSH
18193: LD_VAR 0 3
18197: PPUSH
18198: LD_VAR 0 5
18202: PPUSH
18203: CALL_OW 1
18207: ST_TO_ADDR
// result := list ;
18208: LD_ADDR_VAR 0 4
18212: PUSH
18213: LD_VAR 0 1
18217: ST_TO_ADDR
// end ;
18218: LD_VAR 0 4
18222: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18223: LD_INT 0
18225: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18226: LD_ADDR_VAR 0 5
18230: PUSH
18231: LD_VAR 0 1
18235: PPUSH
18236: CALL_OW 250
18240: PPUSH
18241: LD_VAR 0 1
18245: PPUSH
18246: CALL_OW 251
18250: PPUSH
18251: LD_VAR 0 2
18255: PPUSH
18256: LD_VAR 0 3
18260: PPUSH
18261: LD_VAR 0 4
18265: PPUSH
18266: CALL 18276 0 5
18270: ST_TO_ADDR
// end ;
18271: LD_VAR 0 5
18275: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18276: LD_INT 0
18278: PPUSH
18279: PPUSH
18280: PPUSH
18281: PPUSH
// if not list then
18282: LD_VAR 0 3
18286: NOT
18287: IFFALSE 18291
// exit ;
18289: GO 18679
// result := [ ] ;
18291: LD_ADDR_VAR 0 6
18295: PUSH
18296: EMPTY
18297: ST_TO_ADDR
// for i in list do
18298: LD_ADDR_VAR 0 7
18302: PUSH
18303: LD_VAR 0 3
18307: PUSH
18308: FOR_IN
18309: IFFALSE 18511
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18311: LD_ADDR_VAR 0 9
18315: PUSH
18316: LD_VAR 0 7
18320: PPUSH
18321: LD_VAR 0 1
18325: PPUSH
18326: LD_VAR 0 2
18330: PPUSH
18331: CALL_OW 297
18335: ST_TO_ADDR
// if not result then
18336: LD_VAR 0 6
18340: NOT
18341: IFFALSE 18367
// result := [ [ i , tmp ] ] else
18343: LD_ADDR_VAR 0 6
18347: PUSH
18348: LD_VAR 0 7
18352: PUSH
18353: LD_VAR 0 9
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: EMPTY
18363: LIST
18364: ST_TO_ADDR
18365: GO 18509
// begin if result [ result ] [ 2 ] < tmp then
18367: LD_VAR 0 6
18371: PUSH
18372: LD_VAR 0 6
18376: ARRAY
18377: PUSH
18378: LD_INT 2
18380: ARRAY
18381: PUSH
18382: LD_VAR 0 9
18386: LESS
18387: IFFALSE 18429
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18389: LD_ADDR_VAR 0 6
18393: PUSH
18394: LD_VAR 0 6
18398: PPUSH
18399: LD_VAR 0 6
18403: PUSH
18404: LD_INT 1
18406: PLUS
18407: PPUSH
18408: LD_VAR 0 7
18412: PUSH
18413: LD_VAR 0 9
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PPUSH
18422: CALL_OW 2
18426: ST_TO_ADDR
18427: GO 18509
// for j = 1 to result do
18429: LD_ADDR_VAR 0 8
18433: PUSH
18434: DOUBLE
18435: LD_INT 1
18437: DEC
18438: ST_TO_ADDR
18439: LD_VAR 0 6
18443: PUSH
18444: FOR_TO
18445: IFFALSE 18507
// begin if tmp < result [ j ] [ 2 ] then
18447: LD_VAR 0 9
18451: PUSH
18452: LD_VAR 0 6
18456: PUSH
18457: LD_VAR 0 8
18461: ARRAY
18462: PUSH
18463: LD_INT 2
18465: ARRAY
18466: LESS
18467: IFFALSE 18505
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18469: LD_ADDR_VAR 0 6
18473: PUSH
18474: LD_VAR 0 6
18478: PPUSH
18479: LD_VAR 0 8
18483: PPUSH
18484: LD_VAR 0 7
18488: PUSH
18489: LD_VAR 0 9
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PPUSH
18498: CALL_OW 2
18502: ST_TO_ADDR
// break ;
18503: GO 18507
// end ; end ;
18505: GO 18444
18507: POP
18508: POP
// end ; end ;
18509: GO 18308
18511: POP
18512: POP
// if result and not asc then
18513: LD_VAR 0 6
18517: PUSH
18518: LD_VAR 0 4
18522: NOT
18523: AND
18524: IFFALSE 18599
// begin tmp := result ;
18526: LD_ADDR_VAR 0 9
18530: PUSH
18531: LD_VAR 0 6
18535: ST_TO_ADDR
// for i = tmp downto 1 do
18536: LD_ADDR_VAR 0 7
18540: PUSH
18541: DOUBLE
18542: LD_VAR 0 9
18546: INC
18547: ST_TO_ADDR
18548: LD_INT 1
18550: PUSH
18551: FOR_DOWNTO
18552: IFFALSE 18597
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18554: LD_ADDR_VAR 0 6
18558: PUSH
18559: LD_VAR 0 6
18563: PPUSH
18564: LD_VAR 0 9
18568: PUSH
18569: LD_VAR 0 7
18573: MINUS
18574: PUSH
18575: LD_INT 1
18577: PLUS
18578: PPUSH
18579: LD_VAR 0 9
18583: PUSH
18584: LD_VAR 0 7
18588: ARRAY
18589: PPUSH
18590: CALL_OW 1
18594: ST_TO_ADDR
18595: GO 18551
18597: POP
18598: POP
// end ; tmp := [ ] ;
18599: LD_ADDR_VAR 0 9
18603: PUSH
18604: EMPTY
18605: ST_TO_ADDR
// if mode then
18606: LD_VAR 0 5
18610: IFFALSE 18679
// begin for i = 1 to result do
18612: LD_ADDR_VAR 0 7
18616: PUSH
18617: DOUBLE
18618: LD_INT 1
18620: DEC
18621: ST_TO_ADDR
18622: LD_VAR 0 6
18626: PUSH
18627: FOR_TO
18628: IFFALSE 18667
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18630: LD_ADDR_VAR 0 9
18634: PUSH
18635: LD_VAR 0 9
18639: PPUSH
18640: LD_VAR 0 7
18644: PPUSH
18645: LD_VAR 0 6
18649: PUSH
18650: LD_VAR 0 7
18654: ARRAY
18655: PUSH
18656: LD_INT 1
18658: ARRAY
18659: PPUSH
18660: CALL_OW 1
18664: ST_TO_ADDR
18665: GO 18627
18667: POP
18668: POP
// result := tmp ;
18669: LD_ADDR_VAR 0 6
18673: PUSH
18674: LD_VAR 0 9
18678: ST_TO_ADDR
// end ; end ;
18679: LD_VAR 0 6
18683: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18684: LD_INT 0
18686: PPUSH
18687: PPUSH
18688: PPUSH
18689: PPUSH
18690: PPUSH
18691: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18692: LD_ADDR_VAR 0 5
18696: PUSH
18697: LD_INT 0
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: LD_INT 0
18705: PUSH
18706: EMPTY
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: ST_TO_ADDR
// if not x or not y then
18714: LD_VAR 0 2
18718: NOT
18719: PUSH
18720: LD_VAR 0 3
18724: NOT
18725: OR
18726: IFFALSE 18730
// exit ;
18728: GO 20382
// if not range then
18730: LD_VAR 0 4
18734: NOT
18735: IFFALSE 18745
// range := 10 ;
18737: LD_ADDR_VAR 0 4
18741: PUSH
18742: LD_INT 10
18744: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18745: LD_ADDR_VAR 0 8
18749: PUSH
18750: LD_INT 81
18752: PUSH
18753: LD_VAR 0 1
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 92
18764: PUSH
18765: LD_VAR 0 2
18769: PUSH
18770: LD_VAR 0 3
18774: PUSH
18775: LD_VAR 0 4
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 3
18788: PUSH
18789: LD_INT 21
18791: PUSH
18792: LD_INT 3
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: LIST
18807: PPUSH
18808: CALL_OW 69
18812: ST_TO_ADDR
// if not tmp then
18813: LD_VAR 0 8
18817: NOT
18818: IFFALSE 18822
// exit ;
18820: GO 20382
// for i in tmp do
18822: LD_ADDR_VAR 0 6
18826: PUSH
18827: LD_VAR 0 8
18831: PUSH
18832: FOR_IN
18833: IFFALSE 20357
// begin points := [ 0 , 0 , 0 ] ;
18835: LD_ADDR_VAR 0 9
18839: PUSH
18840: LD_INT 0
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: ST_TO_ADDR
// bpoints := 1 ;
18854: LD_ADDR_VAR 0 10
18858: PUSH
18859: LD_INT 1
18861: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18862: LD_VAR 0 6
18866: PPUSH
18867: CALL_OW 247
18871: PUSH
18872: LD_INT 1
18874: DOUBLE
18875: EQUAL
18876: IFTRUE 18880
18878: GO 19458
18880: POP
// begin if GetClass ( i ) = 1 then
18881: LD_VAR 0 6
18885: PPUSH
18886: CALL_OW 257
18890: PUSH
18891: LD_INT 1
18893: EQUAL
18894: IFFALSE 18915
// points := [ 10 , 5 , 3 ] ;
18896: LD_ADDR_VAR 0 9
18900: PUSH
18901: LD_INT 10
18903: PUSH
18904: LD_INT 5
18906: PUSH
18907: LD_INT 3
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18915: LD_VAR 0 6
18919: PPUSH
18920: CALL_OW 257
18924: PUSH
18925: LD_INT 2
18927: PUSH
18928: LD_INT 3
18930: PUSH
18931: LD_INT 4
18933: PUSH
18934: EMPTY
18935: LIST
18936: LIST
18937: LIST
18938: IN
18939: IFFALSE 18960
// points := [ 3 , 2 , 1 ] ;
18941: LD_ADDR_VAR 0 9
18945: PUSH
18946: LD_INT 3
18948: PUSH
18949: LD_INT 2
18951: PUSH
18952: LD_INT 1
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: LIST
18959: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18960: LD_VAR 0 6
18964: PPUSH
18965: CALL_OW 257
18969: PUSH
18970: LD_INT 5
18972: EQUAL
18973: IFFALSE 18994
// points := [ 130 , 5 , 2 ] ;
18975: LD_ADDR_VAR 0 9
18979: PUSH
18980: LD_INT 130
18982: PUSH
18983: LD_INT 5
18985: PUSH
18986: LD_INT 2
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18994: LD_VAR 0 6
18998: PPUSH
18999: CALL_OW 257
19003: PUSH
19004: LD_INT 8
19006: EQUAL
19007: IFFALSE 19028
// points := [ 35 , 35 , 30 ] ;
19009: LD_ADDR_VAR 0 9
19013: PUSH
19014: LD_INT 35
19016: PUSH
19017: LD_INT 35
19019: PUSH
19020: LD_INT 30
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: LIST
19027: ST_TO_ADDR
// if GetClass ( i ) = 9 then
19028: LD_VAR 0 6
19032: PPUSH
19033: CALL_OW 257
19037: PUSH
19038: LD_INT 9
19040: EQUAL
19041: IFFALSE 19062
// points := [ 20 , 55 , 40 ] ;
19043: LD_ADDR_VAR 0 9
19047: PUSH
19048: LD_INT 20
19050: PUSH
19051: LD_INT 55
19053: PUSH
19054: LD_INT 40
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19062: LD_VAR 0 6
19066: PPUSH
19067: CALL_OW 257
19071: PUSH
19072: LD_INT 12
19074: PUSH
19075: LD_INT 16
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: IN
19082: IFFALSE 19103
// points := [ 5 , 3 , 2 ] ;
19084: LD_ADDR_VAR 0 9
19088: PUSH
19089: LD_INT 5
19091: PUSH
19092: LD_INT 3
19094: PUSH
19095: LD_INT 2
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: LIST
19102: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19103: LD_VAR 0 6
19107: PPUSH
19108: CALL_OW 257
19112: PUSH
19113: LD_INT 17
19115: EQUAL
19116: IFFALSE 19137
// points := [ 100 , 50 , 75 ] ;
19118: LD_ADDR_VAR 0 9
19122: PUSH
19123: LD_INT 100
19125: PUSH
19126: LD_INT 50
19128: PUSH
19129: LD_INT 75
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: LIST
19136: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19137: LD_VAR 0 6
19141: PPUSH
19142: CALL_OW 257
19146: PUSH
19147: LD_INT 15
19149: EQUAL
19150: IFFALSE 19171
// points := [ 10 , 5 , 3 ] ;
19152: LD_ADDR_VAR 0 9
19156: PUSH
19157: LD_INT 10
19159: PUSH
19160: LD_INT 5
19162: PUSH
19163: LD_INT 3
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: LIST
19170: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19171: LD_VAR 0 6
19175: PPUSH
19176: CALL_OW 257
19180: PUSH
19181: LD_INT 14
19183: EQUAL
19184: IFFALSE 19205
// points := [ 10 , 0 , 0 ] ;
19186: LD_ADDR_VAR 0 9
19190: PUSH
19191: LD_INT 10
19193: PUSH
19194: LD_INT 0
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19205: LD_VAR 0 6
19209: PPUSH
19210: CALL_OW 257
19214: PUSH
19215: LD_INT 11
19217: EQUAL
19218: IFFALSE 19239
// points := [ 30 , 10 , 5 ] ;
19220: LD_ADDR_VAR 0 9
19224: PUSH
19225: LD_INT 30
19227: PUSH
19228: LD_INT 10
19230: PUSH
19231: LD_INT 5
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: LIST
19238: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19239: LD_VAR 0 1
19243: PPUSH
19244: LD_INT 5
19246: PPUSH
19247: CALL_OW 321
19251: PUSH
19252: LD_INT 2
19254: EQUAL
19255: IFFALSE 19272
// bpoints := bpoints * 1.8 ;
19257: LD_ADDR_VAR 0 10
19261: PUSH
19262: LD_VAR 0 10
19266: PUSH
19267: LD_REAL  1.80000000000000E+0000
19270: MUL
19271: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19272: LD_VAR 0 6
19276: PPUSH
19277: CALL_OW 257
19281: PUSH
19282: LD_INT 1
19284: PUSH
19285: LD_INT 2
19287: PUSH
19288: LD_INT 3
19290: PUSH
19291: LD_INT 4
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: IN
19300: PUSH
19301: LD_VAR 0 1
19305: PPUSH
19306: LD_INT 51
19308: PPUSH
19309: CALL_OW 321
19313: PUSH
19314: LD_INT 2
19316: EQUAL
19317: AND
19318: IFFALSE 19335
// bpoints := bpoints * 1.2 ;
19320: LD_ADDR_VAR 0 10
19324: PUSH
19325: LD_VAR 0 10
19329: PUSH
19330: LD_REAL  1.20000000000000E+0000
19333: MUL
19334: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19335: LD_VAR 0 6
19339: PPUSH
19340: CALL_OW 257
19344: PUSH
19345: LD_INT 5
19347: PUSH
19348: LD_INT 7
19350: PUSH
19351: LD_INT 9
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: LIST
19358: IN
19359: PUSH
19360: LD_VAR 0 1
19364: PPUSH
19365: LD_INT 52
19367: PPUSH
19368: CALL_OW 321
19372: PUSH
19373: LD_INT 2
19375: EQUAL
19376: AND
19377: IFFALSE 19394
// bpoints := bpoints * 1.5 ;
19379: LD_ADDR_VAR 0 10
19383: PUSH
19384: LD_VAR 0 10
19388: PUSH
19389: LD_REAL  1.50000000000000E+0000
19392: MUL
19393: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19394: LD_VAR 0 1
19398: PPUSH
19399: LD_INT 66
19401: PPUSH
19402: CALL_OW 321
19406: PUSH
19407: LD_INT 2
19409: EQUAL
19410: IFFALSE 19427
// bpoints := bpoints * 1.1 ;
19412: LD_ADDR_VAR 0 10
19416: PUSH
19417: LD_VAR 0 10
19421: PUSH
19422: LD_REAL  1.10000000000000E+0000
19425: MUL
19426: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19427: LD_ADDR_VAR 0 10
19431: PUSH
19432: LD_VAR 0 10
19436: PUSH
19437: LD_VAR 0 6
19441: PPUSH
19442: LD_INT 1
19444: PPUSH
19445: CALL_OW 259
19449: PUSH
19450: LD_REAL  1.15000000000000E+0000
19453: MUL
19454: MUL
19455: ST_TO_ADDR
// end ; unit_vehicle :
19456: GO 20286
19458: LD_INT 2
19460: DOUBLE
19461: EQUAL
19462: IFTRUE 19466
19464: GO 20274
19466: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19467: LD_VAR 0 6
19471: PPUSH
19472: CALL_OW 264
19476: PUSH
19477: LD_INT 2
19479: PUSH
19480: LD_INT 42
19482: PUSH
19483: LD_INT 24
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: IN
19491: IFFALSE 19512
// points := [ 25 , 5 , 3 ] ;
19493: LD_ADDR_VAR 0 9
19497: PUSH
19498: LD_INT 25
19500: PUSH
19501: LD_INT 5
19503: PUSH
19504: LD_INT 3
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: LIST
19511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19512: LD_VAR 0 6
19516: PPUSH
19517: CALL_OW 264
19521: PUSH
19522: LD_INT 4
19524: PUSH
19525: LD_INT 43
19527: PUSH
19528: LD_INT 25
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: LIST
19535: IN
19536: IFFALSE 19557
// points := [ 40 , 15 , 5 ] ;
19538: LD_ADDR_VAR 0 9
19542: PUSH
19543: LD_INT 40
19545: PUSH
19546: LD_INT 15
19548: PUSH
19549: LD_INT 5
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19557: LD_VAR 0 6
19561: PPUSH
19562: CALL_OW 264
19566: PUSH
19567: LD_INT 3
19569: PUSH
19570: LD_INT 23
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: IN
19577: IFFALSE 19598
// points := [ 7 , 25 , 8 ] ;
19579: LD_ADDR_VAR 0 9
19583: PUSH
19584: LD_INT 7
19586: PUSH
19587: LD_INT 25
19589: PUSH
19590: LD_INT 8
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19598: LD_VAR 0 6
19602: PPUSH
19603: CALL_OW 264
19607: PUSH
19608: LD_INT 5
19610: PUSH
19611: LD_INT 27
19613: PUSH
19614: LD_INT 44
19616: PUSH
19617: EMPTY
19618: LIST
19619: LIST
19620: LIST
19621: IN
19622: IFFALSE 19643
// points := [ 14 , 50 , 16 ] ;
19624: LD_ADDR_VAR 0 9
19628: PUSH
19629: LD_INT 14
19631: PUSH
19632: LD_INT 50
19634: PUSH
19635: LD_INT 16
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: LIST
19642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19643: LD_VAR 0 6
19647: PPUSH
19648: CALL_OW 264
19652: PUSH
19653: LD_INT 6
19655: PUSH
19656: LD_INT 46
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: IN
19663: IFFALSE 19684
// points := [ 32 , 120 , 70 ] ;
19665: LD_ADDR_VAR 0 9
19669: PUSH
19670: LD_INT 32
19672: PUSH
19673: LD_INT 120
19675: PUSH
19676: LD_INT 70
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: LIST
19683: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
19684: LD_VAR 0 6
19688: PPUSH
19689: CALL_OW 264
19693: PUSH
19694: LD_INT 7
19696: PUSH
19697: LD_INT 28
19699: PUSH
19700: LD_INT 45
19702: PUSH
19703: LD_EXP 87
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: IN
19714: IFFALSE 19735
// points := [ 35 , 20 , 45 ] ;
19716: LD_ADDR_VAR 0 9
19720: PUSH
19721: LD_INT 35
19723: PUSH
19724: LD_INT 20
19726: PUSH
19727: LD_INT 45
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: LIST
19734: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19735: LD_VAR 0 6
19739: PPUSH
19740: CALL_OW 264
19744: PUSH
19745: LD_INT 47
19747: PUSH
19748: EMPTY
19749: LIST
19750: IN
19751: IFFALSE 19772
// points := [ 67 , 45 , 75 ] ;
19753: LD_ADDR_VAR 0 9
19757: PUSH
19758: LD_INT 67
19760: PUSH
19761: LD_INT 45
19763: PUSH
19764: LD_INT 75
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19772: LD_VAR 0 6
19776: PPUSH
19777: CALL_OW 264
19781: PUSH
19782: LD_INT 26
19784: PUSH
19785: EMPTY
19786: LIST
19787: IN
19788: IFFALSE 19809
// points := [ 120 , 30 , 80 ] ;
19790: LD_ADDR_VAR 0 9
19794: PUSH
19795: LD_INT 120
19797: PUSH
19798: LD_INT 30
19800: PUSH
19801: LD_INT 80
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: LIST
19808: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19809: LD_VAR 0 6
19813: PPUSH
19814: CALL_OW 264
19818: PUSH
19819: LD_INT 22
19821: PUSH
19822: EMPTY
19823: LIST
19824: IN
19825: IFFALSE 19846
// points := [ 40 , 1 , 1 ] ;
19827: LD_ADDR_VAR 0 9
19831: PUSH
19832: LD_INT 40
19834: PUSH
19835: LD_INT 1
19837: PUSH
19838: LD_INT 1
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: LIST
19845: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19846: LD_VAR 0 6
19850: PPUSH
19851: CALL_OW 264
19855: PUSH
19856: LD_INT 29
19858: PUSH
19859: EMPTY
19860: LIST
19861: IN
19862: IFFALSE 19883
// points := [ 70 , 200 , 400 ] ;
19864: LD_ADDR_VAR 0 9
19868: PUSH
19869: LD_INT 70
19871: PUSH
19872: LD_INT 200
19874: PUSH
19875: LD_INT 400
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: LIST
19882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19883: LD_VAR 0 6
19887: PPUSH
19888: CALL_OW 264
19892: PUSH
19893: LD_INT 14
19895: PUSH
19896: LD_INT 53
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: IN
19903: IFFALSE 19924
// points := [ 40 , 10 , 20 ] ;
19905: LD_ADDR_VAR 0 9
19909: PUSH
19910: LD_INT 40
19912: PUSH
19913: LD_INT 10
19915: PUSH
19916: LD_INT 20
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: LIST
19923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19924: LD_VAR 0 6
19928: PPUSH
19929: CALL_OW 264
19933: PUSH
19934: LD_INT 9
19936: PUSH
19937: EMPTY
19938: LIST
19939: IN
19940: IFFALSE 19961
// points := [ 5 , 70 , 20 ] ;
19942: LD_ADDR_VAR 0 9
19946: PUSH
19947: LD_INT 5
19949: PUSH
19950: LD_INT 70
19952: PUSH
19953: LD_INT 20
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: LIST
19960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19961: LD_VAR 0 6
19965: PPUSH
19966: CALL_OW 264
19970: PUSH
19971: LD_INT 10
19973: PUSH
19974: EMPTY
19975: LIST
19976: IN
19977: IFFALSE 19998
// points := [ 35 , 110 , 70 ] ;
19979: LD_ADDR_VAR 0 9
19983: PUSH
19984: LD_INT 35
19986: PUSH
19987: LD_INT 110
19989: PUSH
19990: LD_INT 70
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: LIST
19997: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19998: LD_VAR 0 6
20002: PPUSH
20003: CALL_OW 265
20007: PUSH
20008: LD_INT 25
20010: EQUAL
20011: IFFALSE 20032
// points := [ 80 , 65 , 100 ] ;
20013: LD_ADDR_VAR 0 9
20017: PUSH
20018: LD_INT 80
20020: PUSH
20021: LD_INT 65
20023: PUSH
20024: LD_INT 100
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: LIST
20031: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
20032: LD_VAR 0 6
20036: PPUSH
20037: CALL_OW 263
20041: PUSH
20042: LD_INT 1
20044: EQUAL
20045: IFFALSE 20080
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20047: LD_ADDR_VAR 0 10
20051: PUSH
20052: LD_VAR 0 10
20056: PUSH
20057: LD_VAR 0 6
20061: PPUSH
20062: CALL_OW 311
20066: PPUSH
20067: LD_INT 3
20069: PPUSH
20070: CALL_OW 259
20074: PUSH
20075: LD_INT 4
20077: MUL
20078: MUL
20079: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20080: LD_VAR 0 6
20084: PPUSH
20085: CALL_OW 263
20089: PUSH
20090: LD_INT 2
20092: EQUAL
20093: IFFALSE 20144
// begin j := IsControledBy ( i ) ;
20095: LD_ADDR_VAR 0 7
20099: PUSH
20100: LD_VAR 0 6
20104: PPUSH
20105: CALL_OW 312
20109: ST_TO_ADDR
// if j then
20110: LD_VAR 0 7
20114: IFFALSE 20144
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20116: LD_ADDR_VAR 0 10
20120: PUSH
20121: LD_VAR 0 10
20125: PUSH
20126: LD_VAR 0 7
20130: PPUSH
20131: LD_INT 3
20133: PPUSH
20134: CALL_OW 259
20138: PUSH
20139: LD_INT 3
20141: MUL
20142: MUL
20143: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20144: LD_VAR 0 6
20148: PPUSH
20149: CALL_OW 264
20153: PUSH
20154: LD_INT 5
20156: PUSH
20157: LD_INT 6
20159: PUSH
20160: LD_INT 46
20162: PUSH
20163: LD_INT 44
20165: PUSH
20166: LD_INT 47
20168: PUSH
20169: LD_INT 45
20171: PUSH
20172: LD_INT 28
20174: PUSH
20175: LD_INT 7
20177: PUSH
20178: LD_INT 27
20180: PUSH
20181: LD_INT 29
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: IN
20196: PUSH
20197: LD_VAR 0 1
20201: PPUSH
20202: LD_INT 52
20204: PPUSH
20205: CALL_OW 321
20209: PUSH
20210: LD_INT 2
20212: EQUAL
20213: AND
20214: IFFALSE 20231
// bpoints := bpoints * 1.2 ;
20216: LD_ADDR_VAR 0 10
20220: PUSH
20221: LD_VAR 0 10
20225: PUSH
20226: LD_REAL  1.20000000000000E+0000
20229: MUL
20230: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20231: LD_VAR 0 6
20235: PPUSH
20236: CALL_OW 264
20240: PUSH
20241: LD_INT 6
20243: PUSH
20244: LD_INT 46
20246: PUSH
20247: LD_INT 47
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: LIST
20254: IN
20255: IFFALSE 20272
// bpoints := bpoints * 1.2 ;
20257: LD_ADDR_VAR 0 10
20261: PUSH
20262: LD_VAR 0 10
20266: PUSH
20267: LD_REAL  1.20000000000000E+0000
20270: MUL
20271: ST_TO_ADDR
// end ; unit_building :
20272: GO 20286
20274: LD_INT 3
20276: DOUBLE
20277: EQUAL
20278: IFTRUE 20282
20280: GO 20285
20282: POP
// ; end ;
20283: GO 20286
20285: POP
// for j = 1 to 3 do
20286: LD_ADDR_VAR 0 7
20290: PUSH
20291: DOUBLE
20292: LD_INT 1
20294: DEC
20295: ST_TO_ADDR
20296: LD_INT 3
20298: PUSH
20299: FOR_TO
20300: IFFALSE 20353
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20302: LD_ADDR_VAR 0 5
20306: PUSH
20307: LD_VAR 0 5
20311: PPUSH
20312: LD_VAR 0 7
20316: PPUSH
20317: LD_VAR 0 5
20321: PUSH
20322: LD_VAR 0 7
20326: ARRAY
20327: PUSH
20328: LD_VAR 0 9
20332: PUSH
20333: LD_VAR 0 7
20337: ARRAY
20338: PUSH
20339: LD_VAR 0 10
20343: MUL
20344: PLUS
20345: PPUSH
20346: CALL_OW 1
20350: ST_TO_ADDR
20351: GO 20299
20353: POP
20354: POP
// end ;
20355: GO 18832
20357: POP
20358: POP
// result := Replace ( result , 4 , tmp ) ;
20359: LD_ADDR_VAR 0 5
20363: PUSH
20364: LD_VAR 0 5
20368: PPUSH
20369: LD_INT 4
20371: PPUSH
20372: LD_VAR 0 8
20376: PPUSH
20377: CALL_OW 1
20381: ST_TO_ADDR
// end ;
20382: LD_VAR 0 5
20386: RET
// export function DangerAtRange ( unit , range ) ; begin
20387: LD_INT 0
20389: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20390: LD_ADDR_VAR 0 3
20394: PUSH
20395: LD_VAR 0 1
20399: PPUSH
20400: CALL_OW 255
20404: PPUSH
20405: LD_VAR 0 1
20409: PPUSH
20410: CALL_OW 250
20414: PPUSH
20415: LD_VAR 0 1
20419: PPUSH
20420: CALL_OW 251
20424: PPUSH
20425: LD_VAR 0 2
20429: PPUSH
20430: CALL 18684 0 4
20434: ST_TO_ADDR
// end ;
20435: LD_VAR 0 3
20439: RET
// export function DangerInArea ( side , area ) ; begin
20440: LD_INT 0
20442: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20443: LD_ADDR_VAR 0 3
20447: PUSH
20448: LD_VAR 0 2
20452: PPUSH
20453: LD_INT 81
20455: PUSH
20456: LD_VAR 0 1
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PPUSH
20465: CALL_OW 70
20469: ST_TO_ADDR
// end ;
20470: LD_VAR 0 3
20474: RET
// export function IsExtension ( b ) ; begin
20475: LD_INT 0
20477: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20478: LD_ADDR_VAR 0 2
20482: PUSH
20483: LD_VAR 0 1
20487: PUSH
20488: LD_INT 23
20490: PUSH
20491: LD_INT 20
20493: PUSH
20494: LD_INT 22
20496: PUSH
20497: LD_INT 17
20499: PUSH
20500: LD_INT 24
20502: PUSH
20503: LD_INT 21
20505: PUSH
20506: LD_INT 19
20508: PUSH
20509: LD_INT 16
20511: PUSH
20512: LD_INT 25
20514: PUSH
20515: LD_INT 18
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: IN
20530: ST_TO_ADDR
// end ;
20531: LD_VAR 0 2
20535: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
20536: LD_INT 0
20538: PPUSH
20539: PPUSH
20540: PPUSH
// result := [ ] ;
20541: LD_ADDR_VAR 0 4
20545: PUSH
20546: EMPTY
20547: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20548: LD_ADDR_VAR 0 5
20552: PUSH
20553: LD_VAR 0 2
20557: PPUSH
20558: LD_INT 21
20560: PUSH
20561: LD_INT 3
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PPUSH
20568: CALL_OW 70
20572: ST_TO_ADDR
// if not tmp then
20573: LD_VAR 0 5
20577: NOT
20578: IFFALSE 20582
// exit ;
20580: GO 20646
// if checkLink then
20582: LD_VAR 0 3
20586: IFFALSE 20636
// begin for i in tmp do
20588: LD_ADDR_VAR 0 6
20592: PUSH
20593: LD_VAR 0 5
20597: PUSH
20598: FOR_IN
20599: IFFALSE 20634
// if GetBase ( i ) <> base then
20601: LD_VAR 0 6
20605: PPUSH
20606: CALL_OW 274
20610: PUSH
20611: LD_VAR 0 1
20615: NONEQUAL
20616: IFFALSE 20632
// ComLinkToBase ( base , i ) ;
20618: LD_VAR 0 1
20622: PPUSH
20623: LD_VAR 0 6
20627: PPUSH
20628: CALL_OW 169
20632: GO 20598
20634: POP
20635: POP
// end ; result := tmp ;
20636: LD_ADDR_VAR 0 4
20640: PUSH
20641: LD_VAR 0 5
20645: ST_TO_ADDR
// end ;
20646: LD_VAR 0 4
20650: RET
// export function ComComplete ( units , b ) ; var i ; begin
20651: LD_INT 0
20653: PPUSH
20654: PPUSH
// if not units then
20655: LD_VAR 0 1
20659: NOT
20660: IFFALSE 20664
// exit ;
20662: GO 20754
// for i in units do
20664: LD_ADDR_VAR 0 4
20668: PUSH
20669: LD_VAR 0 1
20673: PUSH
20674: FOR_IN
20675: IFFALSE 20752
// if BuildingStatus ( b ) = bs_build then
20677: LD_VAR 0 2
20681: PPUSH
20682: CALL_OW 461
20686: PUSH
20687: LD_INT 1
20689: EQUAL
20690: IFFALSE 20750
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20692: LD_VAR 0 4
20696: PPUSH
20697: LD_STRING h
20699: PUSH
20700: LD_VAR 0 2
20704: PPUSH
20705: CALL_OW 250
20709: PUSH
20710: LD_VAR 0 2
20714: PPUSH
20715: CALL_OW 251
20719: PUSH
20720: LD_VAR 0 2
20724: PUSH
20725: LD_INT 0
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: LD_INT 0
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: PPUSH
20746: CALL_OW 446
20750: GO 20674
20752: POP
20753: POP
// end ;
20754: LD_VAR 0 3
20758: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20759: LD_INT 0
20761: PPUSH
20762: PPUSH
20763: PPUSH
20764: PPUSH
20765: PPUSH
20766: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
20767: LD_VAR 0 1
20771: NOT
20772: PUSH
20773: LD_VAR 0 1
20777: PPUSH
20778: CALL_OW 263
20782: PUSH
20783: LD_INT 2
20785: NONEQUAL
20786: OR
20787: IFFALSE 20791
// exit ;
20789: GO 21107
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20791: LD_ADDR_VAR 0 6
20795: PUSH
20796: LD_INT 22
20798: PUSH
20799: LD_VAR 0 1
20803: PPUSH
20804: CALL_OW 255
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 2
20815: PUSH
20816: LD_INT 30
20818: PUSH
20819: LD_INT 36
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 34
20828: PUSH
20829: LD_INT 31
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: LIST
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PPUSH
20845: CALL_OW 69
20849: ST_TO_ADDR
// if not tmp then
20850: LD_VAR 0 6
20854: NOT
20855: IFFALSE 20859
// exit ;
20857: GO 21107
// result := [ ] ;
20859: LD_ADDR_VAR 0 2
20863: PUSH
20864: EMPTY
20865: ST_TO_ADDR
// for i in tmp do
20866: LD_ADDR_VAR 0 3
20870: PUSH
20871: LD_VAR 0 6
20875: PUSH
20876: FOR_IN
20877: IFFALSE 20948
// begin t := UnitsInside ( i ) ;
20879: LD_ADDR_VAR 0 4
20883: PUSH
20884: LD_VAR 0 3
20888: PPUSH
20889: CALL_OW 313
20893: ST_TO_ADDR
// if t then
20894: LD_VAR 0 4
20898: IFFALSE 20946
// for j in t do
20900: LD_ADDR_VAR 0 7
20904: PUSH
20905: LD_VAR 0 4
20909: PUSH
20910: FOR_IN
20911: IFFALSE 20944
// result := Replace ( result , result + 1 , j ) ;
20913: LD_ADDR_VAR 0 2
20917: PUSH
20918: LD_VAR 0 2
20922: PPUSH
20923: LD_VAR 0 2
20927: PUSH
20928: LD_INT 1
20930: PLUS
20931: PPUSH
20932: LD_VAR 0 7
20936: PPUSH
20937: CALL_OW 1
20941: ST_TO_ADDR
20942: GO 20910
20944: POP
20945: POP
// end ;
20946: GO 20876
20948: POP
20949: POP
// if not result then
20950: LD_VAR 0 2
20954: NOT
20955: IFFALSE 20959
// exit ;
20957: GO 21107
// mech := result [ 1 ] ;
20959: LD_ADDR_VAR 0 5
20963: PUSH
20964: LD_VAR 0 2
20968: PUSH
20969: LD_INT 1
20971: ARRAY
20972: ST_TO_ADDR
// if result > 1 then
20973: LD_VAR 0 2
20977: PUSH
20978: LD_INT 1
20980: GREATER
20981: IFFALSE 21093
// begin for i = 2 to result do
20983: LD_ADDR_VAR 0 3
20987: PUSH
20988: DOUBLE
20989: LD_INT 2
20991: DEC
20992: ST_TO_ADDR
20993: LD_VAR 0 2
20997: PUSH
20998: FOR_TO
20999: IFFALSE 21091
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
21001: LD_ADDR_VAR 0 4
21005: PUSH
21006: LD_VAR 0 2
21010: PUSH
21011: LD_VAR 0 3
21015: ARRAY
21016: PPUSH
21017: LD_INT 3
21019: PPUSH
21020: CALL_OW 259
21024: PUSH
21025: LD_VAR 0 2
21029: PUSH
21030: LD_VAR 0 3
21034: ARRAY
21035: PPUSH
21036: CALL_OW 432
21040: MINUS
21041: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
21042: LD_VAR 0 4
21046: PUSH
21047: LD_VAR 0 5
21051: PPUSH
21052: LD_INT 3
21054: PPUSH
21055: CALL_OW 259
21059: PUSH
21060: LD_VAR 0 5
21064: PPUSH
21065: CALL_OW 432
21069: MINUS
21070: GREATEREQUAL
21071: IFFALSE 21089
// mech := result [ i ] ;
21073: LD_ADDR_VAR 0 5
21077: PUSH
21078: LD_VAR 0 2
21082: PUSH
21083: LD_VAR 0 3
21087: ARRAY
21088: ST_TO_ADDR
// end ;
21089: GO 20998
21091: POP
21092: POP
// end ; ComLinkTo ( vehicle , mech ) ;
21093: LD_VAR 0 1
21097: PPUSH
21098: LD_VAR 0 5
21102: PPUSH
21103: CALL_OW 135
// end ;
21107: LD_VAR 0 2
21111: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21112: LD_INT 0
21114: PPUSH
21115: PPUSH
21116: PPUSH
21117: PPUSH
21118: PPUSH
21119: PPUSH
21120: PPUSH
21121: PPUSH
21122: PPUSH
21123: PPUSH
21124: PPUSH
21125: PPUSH
21126: PPUSH
// result := [ ] ;
21127: LD_ADDR_VAR 0 7
21131: PUSH
21132: EMPTY
21133: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21134: LD_VAR 0 1
21138: PPUSH
21139: CALL_OW 266
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: LD_INT 1
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: IN
21154: NOT
21155: IFFALSE 21159
// exit ;
21157: GO 22793
// if name then
21159: LD_VAR 0 3
21163: IFFALSE 21179
// SetBName ( base_dep , name ) ;
21165: LD_VAR 0 1
21169: PPUSH
21170: LD_VAR 0 3
21174: PPUSH
21175: CALL_OW 500
// base := GetBase ( base_dep ) ;
21179: LD_ADDR_VAR 0 15
21183: PUSH
21184: LD_VAR 0 1
21188: PPUSH
21189: CALL_OW 274
21193: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21194: LD_ADDR_VAR 0 16
21198: PUSH
21199: LD_VAR 0 1
21203: PPUSH
21204: CALL_OW 255
21208: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21209: LD_ADDR_VAR 0 17
21213: PUSH
21214: LD_VAR 0 1
21218: PPUSH
21219: CALL_OW 248
21223: ST_TO_ADDR
// if sources then
21224: LD_VAR 0 5
21228: IFFALSE 21275
// for i = 1 to 3 do
21230: LD_ADDR_VAR 0 8
21234: PUSH
21235: DOUBLE
21236: LD_INT 1
21238: DEC
21239: ST_TO_ADDR
21240: LD_INT 3
21242: PUSH
21243: FOR_TO
21244: IFFALSE 21273
// AddResourceType ( base , i , sources [ i ] ) ;
21246: LD_VAR 0 15
21250: PPUSH
21251: LD_VAR 0 8
21255: PPUSH
21256: LD_VAR 0 5
21260: PUSH
21261: LD_VAR 0 8
21265: ARRAY
21266: PPUSH
21267: CALL_OW 276
21271: GO 21243
21273: POP
21274: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
21275: LD_ADDR_VAR 0 18
21279: PUSH
21280: LD_VAR 0 15
21284: PPUSH
21285: LD_VAR 0 2
21289: PPUSH
21290: LD_INT 1
21292: PPUSH
21293: CALL 20536 0 3
21297: ST_TO_ADDR
// InitHc ;
21298: CALL_OW 19
// InitUc ;
21302: CALL_OW 18
// uc_side := side ;
21306: LD_ADDR_OWVAR 20
21310: PUSH
21311: LD_VAR 0 16
21315: ST_TO_ADDR
// uc_nation := nation ;
21316: LD_ADDR_OWVAR 21
21320: PUSH
21321: LD_VAR 0 17
21325: ST_TO_ADDR
// if buildings then
21326: LD_VAR 0 18
21330: IFFALSE 22652
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21332: LD_ADDR_VAR 0 19
21336: PUSH
21337: LD_VAR 0 18
21341: PPUSH
21342: LD_INT 2
21344: PUSH
21345: LD_INT 30
21347: PUSH
21348: LD_INT 29
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 30
21357: PUSH
21358: LD_INT 30
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: LIST
21369: PPUSH
21370: CALL_OW 72
21374: ST_TO_ADDR
// if tmp then
21375: LD_VAR 0 19
21379: IFFALSE 21427
// for i in tmp do
21381: LD_ADDR_VAR 0 8
21385: PUSH
21386: LD_VAR 0 19
21390: PUSH
21391: FOR_IN
21392: IFFALSE 21425
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21394: LD_VAR 0 8
21398: PPUSH
21399: CALL_OW 250
21403: PPUSH
21404: LD_VAR 0 8
21408: PPUSH
21409: CALL_OW 251
21413: PPUSH
21414: LD_VAR 0 16
21418: PPUSH
21419: CALL_OW 441
21423: GO 21391
21425: POP
21426: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21427: LD_VAR 0 18
21431: PPUSH
21432: LD_INT 2
21434: PUSH
21435: LD_INT 30
21437: PUSH
21438: LD_INT 32
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 30
21447: PUSH
21448: LD_INT 33
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: LIST
21459: PPUSH
21460: CALL_OW 72
21464: IFFALSE 21552
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21466: LD_ADDR_VAR 0 8
21470: PUSH
21471: LD_VAR 0 18
21475: PPUSH
21476: LD_INT 2
21478: PUSH
21479: LD_INT 30
21481: PUSH
21482: LD_INT 32
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 30
21491: PUSH
21492: LD_INT 33
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: PPUSH
21504: CALL_OW 72
21508: PUSH
21509: FOR_IN
21510: IFFALSE 21550
// begin if not GetBWeapon ( i ) then
21512: LD_VAR 0 8
21516: PPUSH
21517: CALL_OW 269
21521: NOT
21522: IFFALSE 21548
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21524: LD_VAR 0 8
21528: PPUSH
21529: LD_VAR 0 8
21533: PPUSH
21534: LD_VAR 0 2
21538: PPUSH
21539: CALL 22798 0 2
21543: PPUSH
21544: CALL_OW 431
// end ;
21548: GO 21509
21550: POP
21551: POP
// end ; for i = 1 to personel do
21552: LD_ADDR_VAR 0 8
21556: PUSH
21557: DOUBLE
21558: LD_INT 1
21560: DEC
21561: ST_TO_ADDR
21562: LD_VAR 0 6
21566: PUSH
21567: FOR_TO
21568: IFFALSE 22632
// begin if i > 4 then
21570: LD_VAR 0 8
21574: PUSH
21575: LD_INT 4
21577: GREATER
21578: IFFALSE 21582
// break ;
21580: GO 22632
// case i of 1 :
21582: LD_VAR 0 8
21586: PUSH
21587: LD_INT 1
21589: DOUBLE
21590: EQUAL
21591: IFTRUE 21595
21593: GO 21675
21595: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21596: LD_ADDR_VAR 0 12
21600: PUSH
21601: LD_VAR 0 18
21605: PPUSH
21606: LD_INT 22
21608: PUSH
21609: LD_VAR 0 16
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 58
21620: PUSH
21621: EMPTY
21622: LIST
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: LD_INT 30
21629: PUSH
21630: LD_INT 32
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 30
21639: PUSH
21640: LD_INT 4
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 30
21649: PUSH
21650: LD_INT 5
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: PPUSH
21668: CALL_OW 72
21672: ST_TO_ADDR
21673: GO 21897
21675: LD_INT 2
21677: DOUBLE
21678: EQUAL
21679: IFTRUE 21683
21681: GO 21745
21683: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21684: LD_ADDR_VAR 0 12
21688: PUSH
21689: LD_VAR 0 18
21693: PPUSH
21694: LD_INT 22
21696: PUSH
21697: LD_VAR 0 16
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 2
21708: PUSH
21709: LD_INT 30
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 30
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: LIST
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PPUSH
21738: CALL_OW 72
21742: ST_TO_ADDR
21743: GO 21897
21745: LD_INT 3
21747: DOUBLE
21748: EQUAL
21749: IFTRUE 21753
21751: GO 21815
21753: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21754: LD_ADDR_VAR 0 12
21758: PUSH
21759: LD_VAR 0 18
21763: PPUSH
21764: LD_INT 22
21766: PUSH
21767: LD_VAR 0 16
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 2
21778: PUSH
21779: LD_INT 30
21781: PUSH
21782: LD_INT 2
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PUSH
21789: LD_INT 30
21791: PUSH
21792: LD_INT 3
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PPUSH
21808: CALL_OW 72
21812: ST_TO_ADDR
21813: GO 21897
21815: LD_INT 4
21817: DOUBLE
21818: EQUAL
21819: IFTRUE 21823
21821: GO 21896
21823: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21824: LD_ADDR_VAR 0 12
21828: PUSH
21829: LD_VAR 0 18
21833: PPUSH
21834: LD_INT 22
21836: PUSH
21837: LD_VAR 0 16
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 2
21848: PUSH
21849: LD_INT 30
21851: PUSH
21852: LD_INT 6
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 30
21861: PUSH
21862: LD_INT 7
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 30
21871: PUSH
21872: LD_INT 8
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PPUSH
21889: CALL_OW 72
21893: ST_TO_ADDR
21894: GO 21897
21896: POP
// if i = 1 then
21897: LD_VAR 0 8
21901: PUSH
21902: LD_INT 1
21904: EQUAL
21905: IFFALSE 22016
// begin tmp := [ ] ;
21907: LD_ADDR_VAR 0 19
21911: PUSH
21912: EMPTY
21913: ST_TO_ADDR
// for j in f do
21914: LD_ADDR_VAR 0 9
21918: PUSH
21919: LD_VAR 0 12
21923: PUSH
21924: FOR_IN
21925: IFFALSE 21998
// if GetBType ( j ) = b_bunker then
21927: LD_VAR 0 9
21931: PPUSH
21932: CALL_OW 266
21936: PUSH
21937: LD_INT 32
21939: EQUAL
21940: IFFALSE 21967
// tmp := Insert ( tmp , 1 , j ) else
21942: LD_ADDR_VAR 0 19
21946: PUSH
21947: LD_VAR 0 19
21951: PPUSH
21952: LD_INT 1
21954: PPUSH
21955: LD_VAR 0 9
21959: PPUSH
21960: CALL_OW 2
21964: ST_TO_ADDR
21965: GO 21996
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21967: LD_ADDR_VAR 0 19
21971: PUSH
21972: LD_VAR 0 19
21976: PPUSH
21977: LD_VAR 0 19
21981: PUSH
21982: LD_INT 1
21984: PLUS
21985: PPUSH
21986: LD_VAR 0 9
21990: PPUSH
21991: CALL_OW 2
21995: ST_TO_ADDR
21996: GO 21924
21998: POP
21999: POP
// if tmp then
22000: LD_VAR 0 19
22004: IFFALSE 22016
// f := tmp ;
22006: LD_ADDR_VAR 0 12
22010: PUSH
22011: LD_VAR 0 19
22015: ST_TO_ADDR
// end ; x := personel [ i ] ;
22016: LD_ADDR_VAR 0 13
22020: PUSH
22021: LD_VAR 0 6
22025: PUSH
22026: LD_VAR 0 8
22030: ARRAY
22031: ST_TO_ADDR
// if x = - 1 then
22032: LD_VAR 0 13
22036: PUSH
22037: LD_INT 1
22039: NEG
22040: EQUAL
22041: IFFALSE 22250
// begin for j in f do
22043: LD_ADDR_VAR 0 9
22047: PUSH
22048: LD_VAR 0 12
22052: PUSH
22053: FOR_IN
22054: IFFALSE 22246
// repeat InitHc ;
22056: CALL_OW 19
// if GetBType ( j ) = b_barracks then
22060: LD_VAR 0 9
22064: PPUSH
22065: CALL_OW 266
22069: PUSH
22070: LD_INT 5
22072: EQUAL
22073: IFFALSE 22143
// begin if UnitsInside ( j ) < 3 then
22075: LD_VAR 0 9
22079: PPUSH
22080: CALL_OW 313
22084: PUSH
22085: LD_INT 3
22087: LESS
22088: IFFALSE 22124
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22090: LD_INT 0
22092: PPUSH
22093: LD_INT 5
22095: PUSH
22096: LD_INT 8
22098: PUSH
22099: LD_INT 9
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: PUSH
22107: LD_VAR 0 17
22111: ARRAY
22112: PPUSH
22113: LD_VAR 0 4
22117: PPUSH
22118: CALL_OW 380
22122: GO 22141
// PrepareHuman ( false , i , skill ) ;
22124: LD_INT 0
22126: PPUSH
22127: LD_VAR 0 8
22131: PPUSH
22132: LD_VAR 0 4
22136: PPUSH
22137: CALL_OW 380
// end else
22141: GO 22160
// PrepareHuman ( false , i , skill ) ;
22143: LD_INT 0
22145: PPUSH
22146: LD_VAR 0 8
22150: PPUSH
22151: LD_VAR 0 4
22155: PPUSH
22156: CALL_OW 380
// un := CreateHuman ;
22160: LD_ADDR_VAR 0 14
22164: PUSH
22165: CALL_OW 44
22169: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22170: LD_ADDR_VAR 0 7
22174: PUSH
22175: LD_VAR 0 7
22179: PPUSH
22180: LD_INT 1
22182: PPUSH
22183: LD_VAR 0 14
22187: PPUSH
22188: CALL_OW 2
22192: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22193: LD_VAR 0 14
22197: PPUSH
22198: LD_VAR 0 9
22202: PPUSH
22203: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22207: LD_VAR 0 9
22211: PPUSH
22212: CALL_OW 313
22216: PUSH
22217: LD_INT 6
22219: EQUAL
22220: PUSH
22221: LD_VAR 0 9
22225: PPUSH
22226: CALL_OW 266
22230: PUSH
22231: LD_INT 32
22233: PUSH
22234: LD_INT 31
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: IN
22241: OR
22242: IFFALSE 22056
22244: GO 22053
22246: POP
22247: POP
// end else
22248: GO 22630
// for j = 1 to x do
22250: LD_ADDR_VAR 0 9
22254: PUSH
22255: DOUBLE
22256: LD_INT 1
22258: DEC
22259: ST_TO_ADDR
22260: LD_VAR 0 13
22264: PUSH
22265: FOR_TO
22266: IFFALSE 22628
// begin InitHc ;
22268: CALL_OW 19
// if not f then
22272: LD_VAR 0 12
22276: NOT
22277: IFFALSE 22366
// begin PrepareHuman ( false , i , skill ) ;
22279: LD_INT 0
22281: PPUSH
22282: LD_VAR 0 8
22286: PPUSH
22287: LD_VAR 0 4
22291: PPUSH
22292: CALL_OW 380
// un := CreateHuman ;
22296: LD_ADDR_VAR 0 14
22300: PUSH
22301: CALL_OW 44
22305: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22306: LD_ADDR_VAR 0 7
22310: PUSH
22311: LD_VAR 0 7
22315: PPUSH
22316: LD_INT 1
22318: PPUSH
22319: LD_VAR 0 14
22323: PPUSH
22324: CALL_OW 2
22328: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22329: LD_VAR 0 14
22333: PPUSH
22334: LD_VAR 0 1
22338: PPUSH
22339: CALL_OW 250
22343: PPUSH
22344: LD_VAR 0 1
22348: PPUSH
22349: CALL_OW 251
22353: PPUSH
22354: LD_INT 10
22356: PPUSH
22357: LD_INT 0
22359: PPUSH
22360: CALL_OW 50
// continue ;
22364: GO 22265
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22366: LD_VAR 0 12
22370: PUSH
22371: LD_INT 1
22373: ARRAY
22374: PPUSH
22375: CALL_OW 313
22379: PUSH
22380: LD_VAR 0 12
22384: PUSH
22385: LD_INT 1
22387: ARRAY
22388: PPUSH
22389: CALL_OW 266
22393: PUSH
22394: LD_INT 32
22396: PUSH
22397: LD_INT 31
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: IN
22404: AND
22405: PUSH
22406: LD_VAR 0 12
22410: PUSH
22411: LD_INT 1
22413: ARRAY
22414: PPUSH
22415: CALL_OW 313
22419: PUSH
22420: LD_INT 6
22422: EQUAL
22423: OR
22424: IFFALSE 22444
// f := Delete ( f , 1 ) ;
22426: LD_ADDR_VAR 0 12
22430: PUSH
22431: LD_VAR 0 12
22435: PPUSH
22436: LD_INT 1
22438: PPUSH
22439: CALL_OW 3
22443: ST_TO_ADDR
// if not f then
22444: LD_VAR 0 12
22448: NOT
22449: IFFALSE 22467
// begin x := x + 2 ;
22451: LD_ADDR_VAR 0 13
22455: PUSH
22456: LD_VAR 0 13
22460: PUSH
22461: LD_INT 2
22463: PLUS
22464: ST_TO_ADDR
// continue ;
22465: GO 22265
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22467: LD_VAR 0 12
22471: PUSH
22472: LD_INT 1
22474: ARRAY
22475: PPUSH
22476: CALL_OW 266
22480: PUSH
22481: LD_INT 5
22483: EQUAL
22484: IFFALSE 22558
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22486: LD_VAR 0 12
22490: PUSH
22491: LD_INT 1
22493: ARRAY
22494: PPUSH
22495: CALL_OW 313
22499: PUSH
22500: LD_INT 3
22502: LESS
22503: IFFALSE 22539
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22505: LD_INT 0
22507: PPUSH
22508: LD_INT 5
22510: PUSH
22511: LD_INT 8
22513: PUSH
22514: LD_INT 9
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: LIST
22521: PUSH
22522: LD_VAR 0 17
22526: ARRAY
22527: PPUSH
22528: LD_VAR 0 4
22532: PPUSH
22533: CALL_OW 380
22537: GO 22556
// PrepareHuman ( false , i , skill ) ;
22539: LD_INT 0
22541: PPUSH
22542: LD_VAR 0 8
22546: PPUSH
22547: LD_VAR 0 4
22551: PPUSH
22552: CALL_OW 380
// end else
22556: GO 22575
// PrepareHuman ( false , i , skill ) ;
22558: LD_INT 0
22560: PPUSH
22561: LD_VAR 0 8
22565: PPUSH
22566: LD_VAR 0 4
22570: PPUSH
22571: CALL_OW 380
// un := CreateHuman ;
22575: LD_ADDR_VAR 0 14
22579: PUSH
22580: CALL_OW 44
22584: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22585: LD_ADDR_VAR 0 7
22589: PUSH
22590: LD_VAR 0 7
22594: PPUSH
22595: LD_INT 1
22597: PPUSH
22598: LD_VAR 0 14
22602: PPUSH
22603: CALL_OW 2
22607: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22608: LD_VAR 0 14
22612: PPUSH
22613: LD_VAR 0 12
22617: PUSH
22618: LD_INT 1
22620: ARRAY
22621: PPUSH
22622: CALL_OW 52
// end ;
22626: GO 22265
22628: POP
22629: POP
// end ;
22630: GO 21567
22632: POP
22633: POP
// result := result ^ buildings ;
22634: LD_ADDR_VAR 0 7
22638: PUSH
22639: LD_VAR 0 7
22643: PUSH
22644: LD_VAR 0 18
22648: ADD
22649: ST_TO_ADDR
// end else
22650: GO 22793
// begin for i = 1 to personel do
22652: LD_ADDR_VAR 0 8
22656: PUSH
22657: DOUBLE
22658: LD_INT 1
22660: DEC
22661: ST_TO_ADDR
22662: LD_VAR 0 6
22666: PUSH
22667: FOR_TO
22668: IFFALSE 22791
// begin if i > 4 then
22670: LD_VAR 0 8
22674: PUSH
22675: LD_INT 4
22677: GREATER
22678: IFFALSE 22682
// break ;
22680: GO 22791
// x := personel [ i ] ;
22682: LD_ADDR_VAR 0 13
22686: PUSH
22687: LD_VAR 0 6
22691: PUSH
22692: LD_VAR 0 8
22696: ARRAY
22697: ST_TO_ADDR
// if x = - 1 then
22698: LD_VAR 0 13
22702: PUSH
22703: LD_INT 1
22705: NEG
22706: EQUAL
22707: IFFALSE 22711
// continue ;
22709: GO 22667
// PrepareHuman ( false , i , skill ) ;
22711: LD_INT 0
22713: PPUSH
22714: LD_VAR 0 8
22718: PPUSH
22719: LD_VAR 0 4
22723: PPUSH
22724: CALL_OW 380
// un := CreateHuman ;
22728: LD_ADDR_VAR 0 14
22732: PUSH
22733: CALL_OW 44
22737: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22738: LD_VAR 0 14
22742: PPUSH
22743: LD_VAR 0 1
22747: PPUSH
22748: CALL_OW 250
22752: PPUSH
22753: LD_VAR 0 1
22757: PPUSH
22758: CALL_OW 251
22762: PPUSH
22763: LD_INT 10
22765: PPUSH
22766: LD_INT 0
22768: PPUSH
22769: CALL_OW 50
// result := result ^ un ;
22773: LD_ADDR_VAR 0 7
22777: PUSH
22778: LD_VAR 0 7
22782: PUSH
22783: LD_VAR 0 14
22787: ADD
22788: ST_TO_ADDR
// end ;
22789: GO 22667
22791: POP
22792: POP
// end ; end ;
22793: LD_VAR 0 7
22797: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22798: LD_INT 0
22800: PPUSH
22801: PPUSH
22802: PPUSH
22803: PPUSH
22804: PPUSH
22805: PPUSH
22806: PPUSH
22807: PPUSH
22808: PPUSH
22809: PPUSH
22810: PPUSH
22811: PPUSH
22812: PPUSH
22813: PPUSH
22814: PPUSH
22815: PPUSH
// result := false ;
22816: LD_ADDR_VAR 0 3
22820: PUSH
22821: LD_INT 0
22823: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22824: LD_VAR 0 1
22828: NOT
22829: PUSH
22830: LD_VAR 0 1
22834: PPUSH
22835: CALL_OW 266
22839: PUSH
22840: LD_INT 32
22842: PUSH
22843: LD_INT 33
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: IN
22850: NOT
22851: OR
22852: IFFALSE 22856
// exit ;
22854: GO 23965
// nat := GetNation ( tower ) ;
22856: LD_ADDR_VAR 0 12
22860: PUSH
22861: LD_VAR 0 1
22865: PPUSH
22866: CALL_OW 248
22870: ST_TO_ADDR
// side := GetSide ( tower ) ;
22871: LD_ADDR_VAR 0 16
22875: PUSH
22876: LD_VAR 0 1
22880: PPUSH
22881: CALL_OW 255
22885: ST_TO_ADDR
// x := GetX ( tower ) ;
22886: LD_ADDR_VAR 0 10
22890: PUSH
22891: LD_VAR 0 1
22895: PPUSH
22896: CALL_OW 250
22900: ST_TO_ADDR
// y := GetY ( tower ) ;
22901: LD_ADDR_VAR 0 11
22905: PUSH
22906: LD_VAR 0 1
22910: PPUSH
22911: CALL_OW 251
22915: ST_TO_ADDR
// if not x or not y then
22916: LD_VAR 0 10
22920: NOT
22921: PUSH
22922: LD_VAR 0 11
22926: NOT
22927: OR
22928: IFFALSE 22932
// exit ;
22930: GO 23965
// weapon := 0 ;
22932: LD_ADDR_VAR 0 18
22936: PUSH
22937: LD_INT 0
22939: ST_TO_ADDR
// fac_list := [ ] ;
22940: LD_ADDR_VAR 0 17
22944: PUSH
22945: EMPTY
22946: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22947: LD_ADDR_VAR 0 6
22951: PUSH
22952: LD_VAR 0 1
22956: PPUSH
22957: CALL_OW 274
22961: PPUSH
22962: LD_VAR 0 2
22966: PPUSH
22967: LD_INT 0
22969: PPUSH
22970: CALL 20536 0 3
22974: PPUSH
22975: LD_INT 30
22977: PUSH
22978: LD_INT 3
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PPUSH
22985: CALL_OW 72
22989: ST_TO_ADDR
// if not factories then
22990: LD_VAR 0 6
22994: NOT
22995: IFFALSE 22999
// exit ;
22997: GO 23965
// for i in factories do
22999: LD_ADDR_VAR 0 8
23003: PUSH
23004: LD_VAR 0 6
23008: PUSH
23009: FOR_IN
23010: IFFALSE 23035
// fac_list := fac_list union AvailableWeaponList ( i ) ;
23012: LD_ADDR_VAR 0 17
23016: PUSH
23017: LD_VAR 0 17
23021: PUSH
23022: LD_VAR 0 8
23026: PPUSH
23027: CALL_OW 478
23031: UNION
23032: ST_TO_ADDR
23033: GO 23009
23035: POP
23036: POP
// if not fac_list then
23037: LD_VAR 0 17
23041: NOT
23042: IFFALSE 23046
// exit ;
23044: GO 23965
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23046: LD_ADDR_VAR 0 5
23050: PUSH
23051: LD_INT 4
23053: PUSH
23054: LD_INT 5
23056: PUSH
23057: LD_INT 9
23059: PUSH
23060: LD_INT 10
23062: PUSH
23063: LD_INT 6
23065: PUSH
23066: LD_INT 7
23068: PUSH
23069: LD_INT 11
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 27
23083: PUSH
23084: LD_INT 28
23086: PUSH
23087: LD_INT 26
23089: PUSH
23090: LD_INT 30
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 43
23101: PUSH
23102: LD_INT 44
23104: PUSH
23105: LD_INT 46
23107: PUSH
23108: LD_INT 45
23110: PUSH
23111: LD_INT 47
23113: PUSH
23114: LD_INT 49
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: LIST
23129: PUSH
23130: LD_VAR 0 12
23134: ARRAY
23135: ST_TO_ADDR
// list := list isect fac_list ;
23136: LD_ADDR_VAR 0 5
23140: PUSH
23141: LD_VAR 0 5
23145: PUSH
23146: LD_VAR 0 17
23150: ISECT
23151: ST_TO_ADDR
// if not list then
23152: LD_VAR 0 5
23156: NOT
23157: IFFALSE 23161
// exit ;
23159: GO 23965
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23161: LD_VAR 0 12
23165: PUSH
23166: LD_INT 3
23168: EQUAL
23169: PUSH
23170: LD_INT 49
23172: PUSH
23173: LD_VAR 0 5
23177: IN
23178: AND
23179: PUSH
23180: LD_INT 31
23182: PPUSH
23183: LD_VAR 0 16
23187: PPUSH
23188: CALL_OW 321
23192: PUSH
23193: LD_INT 2
23195: EQUAL
23196: AND
23197: IFFALSE 23257
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23199: LD_INT 22
23201: PUSH
23202: LD_VAR 0 16
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 35
23213: PUSH
23214: LD_INT 49
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 91
23223: PUSH
23224: LD_VAR 0 1
23228: PUSH
23229: LD_INT 10
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: LIST
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: LIST
23241: PPUSH
23242: CALL_OW 69
23246: NOT
23247: IFFALSE 23257
// weapon := ru_time_lapser ;
23249: LD_ADDR_VAR 0 18
23253: PUSH
23254: LD_INT 49
23256: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23257: LD_VAR 0 12
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: LD_INT 2
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: IN
23272: PUSH
23273: LD_INT 11
23275: PUSH
23276: LD_VAR 0 5
23280: IN
23281: PUSH
23282: LD_INT 30
23284: PUSH
23285: LD_VAR 0 5
23289: IN
23290: OR
23291: AND
23292: PUSH
23293: LD_INT 6
23295: PPUSH
23296: LD_VAR 0 16
23300: PPUSH
23301: CALL_OW 321
23305: PUSH
23306: LD_INT 2
23308: EQUAL
23309: AND
23310: IFFALSE 23475
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23312: LD_INT 22
23314: PUSH
23315: LD_VAR 0 16
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 2
23326: PUSH
23327: LD_INT 35
23329: PUSH
23330: LD_INT 11
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: LD_INT 35
23339: PUSH
23340: LD_INT 30
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 91
23354: PUSH
23355: LD_VAR 0 1
23359: PUSH
23360: LD_INT 18
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: LIST
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: PPUSH
23373: CALL_OW 69
23377: NOT
23378: PUSH
23379: LD_INT 22
23381: PUSH
23382: LD_VAR 0 16
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 2
23393: PUSH
23394: LD_INT 30
23396: PUSH
23397: LD_INT 32
23399: PUSH
23400: EMPTY
23401: LIST
23402: LIST
23403: PUSH
23404: LD_INT 30
23406: PUSH
23407: LD_INT 33
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 91
23421: PUSH
23422: LD_VAR 0 1
23426: PUSH
23427: LD_INT 12
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: LIST
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: PUSH
23440: EMPTY
23441: LIST
23442: PPUSH
23443: CALL_OW 69
23447: PUSH
23448: LD_INT 2
23450: GREATER
23451: AND
23452: IFFALSE 23475
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23454: LD_ADDR_VAR 0 18
23458: PUSH
23459: LD_INT 11
23461: PUSH
23462: LD_INT 30
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_VAR 0 12
23473: ARRAY
23474: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23475: LD_VAR 0 18
23479: NOT
23480: PUSH
23481: LD_INT 40
23483: PPUSH
23484: LD_VAR 0 16
23488: PPUSH
23489: CALL_OW 321
23493: PUSH
23494: LD_INT 2
23496: EQUAL
23497: AND
23498: PUSH
23499: LD_INT 7
23501: PUSH
23502: LD_VAR 0 5
23506: IN
23507: PUSH
23508: LD_INT 28
23510: PUSH
23511: LD_VAR 0 5
23515: IN
23516: OR
23517: PUSH
23518: LD_INT 45
23520: PUSH
23521: LD_VAR 0 5
23525: IN
23526: OR
23527: AND
23528: IFFALSE 23782
// begin hex := GetHexInfo ( x , y ) ;
23530: LD_ADDR_VAR 0 4
23534: PUSH
23535: LD_VAR 0 10
23539: PPUSH
23540: LD_VAR 0 11
23544: PPUSH
23545: CALL_OW 546
23549: ST_TO_ADDR
// if hex [ 1 ] then
23550: LD_VAR 0 4
23554: PUSH
23555: LD_INT 1
23557: ARRAY
23558: IFFALSE 23562
// exit ;
23560: GO 23965
// height := hex [ 2 ] ;
23562: LD_ADDR_VAR 0 15
23566: PUSH
23567: LD_VAR 0 4
23571: PUSH
23572: LD_INT 2
23574: ARRAY
23575: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23576: LD_ADDR_VAR 0 14
23580: PUSH
23581: LD_INT 0
23583: PUSH
23584: LD_INT 2
23586: PUSH
23587: LD_INT 3
23589: PUSH
23590: LD_INT 5
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: ST_TO_ADDR
// for i in tmp do
23599: LD_ADDR_VAR 0 8
23603: PUSH
23604: LD_VAR 0 14
23608: PUSH
23609: FOR_IN
23610: IFFALSE 23780
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23612: LD_ADDR_VAR 0 9
23616: PUSH
23617: LD_VAR 0 10
23621: PPUSH
23622: LD_VAR 0 8
23626: PPUSH
23627: LD_INT 5
23629: PPUSH
23630: CALL_OW 272
23634: PUSH
23635: LD_VAR 0 11
23639: PPUSH
23640: LD_VAR 0 8
23644: PPUSH
23645: LD_INT 5
23647: PPUSH
23648: CALL_OW 273
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23657: LD_VAR 0 9
23661: PUSH
23662: LD_INT 1
23664: ARRAY
23665: PPUSH
23666: LD_VAR 0 9
23670: PUSH
23671: LD_INT 2
23673: ARRAY
23674: PPUSH
23675: CALL_OW 488
23679: IFFALSE 23778
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23681: LD_ADDR_VAR 0 4
23685: PUSH
23686: LD_VAR 0 9
23690: PUSH
23691: LD_INT 1
23693: ARRAY
23694: PPUSH
23695: LD_VAR 0 9
23699: PUSH
23700: LD_INT 2
23702: ARRAY
23703: PPUSH
23704: CALL_OW 546
23708: ST_TO_ADDR
// if hex [ 1 ] then
23709: LD_VAR 0 4
23713: PUSH
23714: LD_INT 1
23716: ARRAY
23717: IFFALSE 23721
// continue ;
23719: GO 23609
// h := hex [ 2 ] ;
23721: LD_ADDR_VAR 0 13
23725: PUSH
23726: LD_VAR 0 4
23730: PUSH
23731: LD_INT 2
23733: ARRAY
23734: ST_TO_ADDR
// if h + 7 < height then
23735: LD_VAR 0 13
23739: PUSH
23740: LD_INT 7
23742: PLUS
23743: PUSH
23744: LD_VAR 0 15
23748: LESS
23749: IFFALSE 23778
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23751: LD_ADDR_VAR 0 18
23755: PUSH
23756: LD_INT 7
23758: PUSH
23759: LD_INT 28
23761: PUSH
23762: LD_INT 45
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: PUSH
23770: LD_VAR 0 12
23774: ARRAY
23775: ST_TO_ADDR
// break ;
23776: GO 23780
// end ; end ; end ;
23778: GO 23609
23780: POP
23781: POP
// end ; if not weapon then
23782: LD_VAR 0 18
23786: NOT
23787: IFFALSE 23847
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23789: LD_ADDR_VAR 0 5
23793: PUSH
23794: LD_VAR 0 5
23798: PUSH
23799: LD_INT 11
23801: PUSH
23802: LD_INT 30
23804: PUSH
23805: LD_INT 49
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: LIST
23812: DIFF
23813: ST_TO_ADDR
// if not list then
23814: LD_VAR 0 5
23818: NOT
23819: IFFALSE 23823
// exit ;
23821: GO 23965
// weapon := list [ rand ( 1 , list ) ] ;
23823: LD_ADDR_VAR 0 18
23827: PUSH
23828: LD_VAR 0 5
23832: PUSH
23833: LD_INT 1
23835: PPUSH
23836: LD_VAR 0 5
23840: PPUSH
23841: CALL_OW 12
23845: ARRAY
23846: ST_TO_ADDR
// end ; if weapon then
23847: LD_VAR 0 18
23851: IFFALSE 23965
// begin tmp := CostOfWeapon ( weapon ) ;
23853: LD_ADDR_VAR 0 14
23857: PUSH
23858: LD_VAR 0 18
23862: PPUSH
23863: CALL_OW 451
23867: ST_TO_ADDR
// j := GetBase ( tower ) ;
23868: LD_ADDR_VAR 0 9
23872: PUSH
23873: LD_VAR 0 1
23877: PPUSH
23878: CALL_OW 274
23882: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23883: LD_VAR 0 9
23887: PPUSH
23888: LD_INT 1
23890: PPUSH
23891: CALL_OW 275
23895: PUSH
23896: LD_VAR 0 14
23900: PUSH
23901: LD_INT 1
23903: ARRAY
23904: GREATEREQUAL
23905: PUSH
23906: LD_VAR 0 9
23910: PPUSH
23911: LD_INT 2
23913: PPUSH
23914: CALL_OW 275
23918: PUSH
23919: LD_VAR 0 14
23923: PUSH
23924: LD_INT 2
23926: ARRAY
23927: GREATEREQUAL
23928: AND
23929: PUSH
23930: LD_VAR 0 9
23934: PPUSH
23935: LD_INT 3
23937: PPUSH
23938: CALL_OW 275
23942: PUSH
23943: LD_VAR 0 14
23947: PUSH
23948: LD_INT 3
23950: ARRAY
23951: GREATEREQUAL
23952: AND
23953: IFFALSE 23965
// result := weapon ;
23955: LD_ADDR_VAR 0 3
23959: PUSH
23960: LD_VAR 0 18
23964: ST_TO_ADDR
// end ; end ;
23965: LD_VAR 0 3
23969: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23970: LD_INT 0
23972: PPUSH
23973: PPUSH
// result := true ;
23974: LD_ADDR_VAR 0 3
23978: PUSH
23979: LD_INT 1
23981: ST_TO_ADDR
// if array1 = array2 then
23982: LD_VAR 0 1
23986: PUSH
23987: LD_VAR 0 2
23991: EQUAL
23992: IFFALSE 24052
// begin for i = 1 to array1 do
23994: LD_ADDR_VAR 0 4
23998: PUSH
23999: DOUBLE
24000: LD_INT 1
24002: DEC
24003: ST_TO_ADDR
24004: LD_VAR 0 1
24008: PUSH
24009: FOR_TO
24010: IFFALSE 24048
// if array1 [ i ] <> array2 [ i ] then
24012: LD_VAR 0 1
24016: PUSH
24017: LD_VAR 0 4
24021: ARRAY
24022: PUSH
24023: LD_VAR 0 2
24027: PUSH
24028: LD_VAR 0 4
24032: ARRAY
24033: NONEQUAL
24034: IFFALSE 24046
// begin result := false ;
24036: LD_ADDR_VAR 0 3
24040: PUSH
24041: LD_INT 0
24043: ST_TO_ADDR
// break ;
24044: GO 24048
// end ;
24046: GO 24009
24048: POP
24049: POP
// end else
24050: GO 24060
// result := false ;
24052: LD_ADDR_VAR 0 3
24056: PUSH
24057: LD_INT 0
24059: ST_TO_ADDR
// end ;
24060: LD_VAR 0 3
24064: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
24065: LD_INT 0
24067: PPUSH
24068: PPUSH
// if not array1 or not array2 then
24069: LD_VAR 0 1
24073: NOT
24074: PUSH
24075: LD_VAR 0 2
24079: NOT
24080: OR
24081: IFFALSE 24085
// exit ;
24083: GO 24149
// result := true ;
24085: LD_ADDR_VAR 0 3
24089: PUSH
24090: LD_INT 1
24092: ST_TO_ADDR
// for i = 1 to array1 do
24093: LD_ADDR_VAR 0 4
24097: PUSH
24098: DOUBLE
24099: LD_INT 1
24101: DEC
24102: ST_TO_ADDR
24103: LD_VAR 0 1
24107: PUSH
24108: FOR_TO
24109: IFFALSE 24147
// if array1 [ i ] <> array2 [ i ] then
24111: LD_VAR 0 1
24115: PUSH
24116: LD_VAR 0 4
24120: ARRAY
24121: PUSH
24122: LD_VAR 0 2
24126: PUSH
24127: LD_VAR 0 4
24131: ARRAY
24132: NONEQUAL
24133: IFFALSE 24145
// begin result := false ;
24135: LD_ADDR_VAR 0 3
24139: PUSH
24140: LD_INT 0
24142: ST_TO_ADDR
// break ;
24143: GO 24147
// end ;
24145: GO 24108
24147: POP
24148: POP
// end ;
24149: LD_VAR 0 3
24153: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24154: LD_INT 0
24156: PPUSH
24157: PPUSH
24158: PPUSH
// pom := GetBase ( fac ) ;
24159: LD_ADDR_VAR 0 5
24163: PUSH
24164: LD_VAR 0 1
24168: PPUSH
24169: CALL_OW 274
24173: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24174: LD_ADDR_VAR 0 4
24178: PUSH
24179: LD_VAR 0 2
24183: PUSH
24184: LD_INT 1
24186: ARRAY
24187: PPUSH
24188: LD_VAR 0 2
24192: PUSH
24193: LD_INT 2
24195: ARRAY
24196: PPUSH
24197: LD_VAR 0 2
24201: PUSH
24202: LD_INT 3
24204: ARRAY
24205: PPUSH
24206: LD_VAR 0 2
24210: PUSH
24211: LD_INT 4
24213: ARRAY
24214: PPUSH
24215: CALL_OW 449
24219: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24220: LD_ADDR_VAR 0 3
24224: PUSH
24225: LD_VAR 0 5
24229: PPUSH
24230: LD_INT 1
24232: PPUSH
24233: CALL_OW 275
24237: PUSH
24238: LD_VAR 0 4
24242: PUSH
24243: LD_INT 1
24245: ARRAY
24246: GREATEREQUAL
24247: PUSH
24248: LD_VAR 0 5
24252: PPUSH
24253: LD_INT 2
24255: PPUSH
24256: CALL_OW 275
24260: PUSH
24261: LD_VAR 0 4
24265: PUSH
24266: LD_INT 2
24268: ARRAY
24269: GREATEREQUAL
24270: AND
24271: PUSH
24272: LD_VAR 0 5
24276: PPUSH
24277: LD_INT 3
24279: PPUSH
24280: CALL_OW 275
24284: PUSH
24285: LD_VAR 0 4
24289: PUSH
24290: LD_INT 3
24292: ARRAY
24293: GREATEREQUAL
24294: AND
24295: ST_TO_ADDR
// end ;
24296: LD_VAR 0 3
24300: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24301: LD_INT 0
24303: PPUSH
24304: PPUSH
24305: PPUSH
24306: PPUSH
// pom := GetBase ( building ) ;
24307: LD_ADDR_VAR 0 3
24311: PUSH
24312: LD_VAR 0 1
24316: PPUSH
24317: CALL_OW 274
24321: ST_TO_ADDR
// if not pom then
24322: LD_VAR 0 3
24326: NOT
24327: IFFALSE 24331
// exit ;
24329: GO 24501
// btype := GetBType ( building ) ;
24331: LD_ADDR_VAR 0 5
24335: PUSH
24336: LD_VAR 0 1
24340: PPUSH
24341: CALL_OW 266
24345: ST_TO_ADDR
// if btype = b_armoury then
24346: LD_VAR 0 5
24350: PUSH
24351: LD_INT 4
24353: EQUAL
24354: IFFALSE 24364
// btype := b_barracks ;
24356: LD_ADDR_VAR 0 5
24360: PUSH
24361: LD_INT 5
24363: ST_TO_ADDR
// if btype = b_depot then
24364: LD_VAR 0 5
24368: PUSH
24369: LD_INT 0
24371: EQUAL
24372: IFFALSE 24382
// btype := b_warehouse ;
24374: LD_ADDR_VAR 0 5
24378: PUSH
24379: LD_INT 1
24381: ST_TO_ADDR
// if btype = b_workshop then
24382: LD_VAR 0 5
24386: PUSH
24387: LD_INT 2
24389: EQUAL
24390: IFFALSE 24400
// btype := b_factory ;
24392: LD_ADDR_VAR 0 5
24396: PUSH
24397: LD_INT 3
24399: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24400: LD_ADDR_VAR 0 4
24404: PUSH
24405: LD_VAR 0 5
24409: PPUSH
24410: LD_VAR 0 1
24414: PPUSH
24415: CALL_OW 248
24419: PPUSH
24420: CALL_OW 450
24424: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24425: LD_ADDR_VAR 0 2
24429: PUSH
24430: LD_VAR 0 3
24434: PPUSH
24435: LD_INT 1
24437: PPUSH
24438: CALL_OW 275
24442: PUSH
24443: LD_VAR 0 4
24447: PUSH
24448: LD_INT 1
24450: ARRAY
24451: GREATEREQUAL
24452: PUSH
24453: LD_VAR 0 3
24457: PPUSH
24458: LD_INT 2
24460: PPUSH
24461: CALL_OW 275
24465: PUSH
24466: LD_VAR 0 4
24470: PUSH
24471: LD_INT 2
24473: ARRAY
24474: GREATEREQUAL
24475: AND
24476: PUSH
24477: LD_VAR 0 3
24481: PPUSH
24482: LD_INT 3
24484: PPUSH
24485: CALL_OW 275
24489: PUSH
24490: LD_VAR 0 4
24494: PUSH
24495: LD_INT 3
24497: ARRAY
24498: GREATEREQUAL
24499: AND
24500: ST_TO_ADDR
// end ;
24501: LD_VAR 0 2
24505: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24506: LD_INT 0
24508: PPUSH
24509: PPUSH
24510: PPUSH
// pom := GetBase ( building ) ;
24511: LD_ADDR_VAR 0 4
24515: PUSH
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL_OW 274
24525: ST_TO_ADDR
// if not pom then
24526: LD_VAR 0 4
24530: NOT
24531: IFFALSE 24535
// exit ;
24533: GO 24636
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24535: LD_ADDR_VAR 0 5
24539: PUSH
24540: LD_VAR 0 2
24544: PPUSH
24545: LD_VAR 0 1
24549: PPUSH
24550: CALL_OW 248
24554: PPUSH
24555: CALL_OW 450
24559: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24560: LD_ADDR_VAR 0 3
24564: PUSH
24565: LD_VAR 0 4
24569: PPUSH
24570: LD_INT 1
24572: PPUSH
24573: CALL_OW 275
24577: PUSH
24578: LD_VAR 0 5
24582: PUSH
24583: LD_INT 1
24585: ARRAY
24586: GREATEREQUAL
24587: PUSH
24588: LD_VAR 0 4
24592: PPUSH
24593: LD_INT 2
24595: PPUSH
24596: CALL_OW 275
24600: PUSH
24601: LD_VAR 0 5
24605: PUSH
24606: LD_INT 2
24608: ARRAY
24609: GREATEREQUAL
24610: AND
24611: PUSH
24612: LD_VAR 0 4
24616: PPUSH
24617: LD_INT 3
24619: PPUSH
24620: CALL_OW 275
24624: PUSH
24625: LD_VAR 0 5
24629: PUSH
24630: LD_INT 3
24632: ARRAY
24633: GREATEREQUAL
24634: AND
24635: ST_TO_ADDR
// end ;
24636: LD_VAR 0 3
24640: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
24641: LD_INT 0
24643: PPUSH
24644: PPUSH
24645: PPUSH
24646: PPUSH
24647: PPUSH
24648: PPUSH
24649: PPUSH
24650: PPUSH
24651: PPUSH
24652: PPUSH
24653: PPUSH
// result := false ;
24654: LD_ADDR_VAR 0 8
24658: PUSH
24659: LD_INT 0
24661: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
24662: LD_VAR 0 5
24666: NOT
24667: PUSH
24668: LD_VAR 0 1
24672: NOT
24673: OR
24674: PUSH
24675: LD_VAR 0 2
24679: NOT
24680: OR
24681: PUSH
24682: LD_VAR 0 3
24686: NOT
24687: OR
24688: IFFALSE 24692
// exit ;
24690: GO 25506
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
24692: LD_ADDR_VAR 0 14
24696: PUSH
24697: LD_VAR 0 1
24701: PPUSH
24702: LD_VAR 0 2
24706: PPUSH
24707: LD_VAR 0 3
24711: PPUSH
24712: LD_VAR 0 4
24716: PPUSH
24717: LD_VAR 0 5
24721: PUSH
24722: LD_INT 1
24724: ARRAY
24725: PPUSH
24726: CALL_OW 248
24730: PPUSH
24731: LD_INT 0
24733: PPUSH
24734: CALL 26743 0 6
24738: ST_TO_ADDR
// if not hexes then
24739: LD_VAR 0 14
24743: NOT
24744: IFFALSE 24748
// exit ;
24746: GO 25506
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24748: LD_ADDR_VAR 0 17
24752: PUSH
24753: LD_VAR 0 5
24757: PPUSH
24758: LD_INT 22
24760: PUSH
24761: LD_VAR 0 13
24765: PPUSH
24766: CALL_OW 255
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 2
24777: PUSH
24778: LD_INT 30
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 30
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: LIST
24802: PUSH
24803: EMPTY
24804: LIST
24805: LIST
24806: PPUSH
24807: CALL_OW 72
24811: ST_TO_ADDR
// for i = 1 to hexes do
24812: LD_ADDR_VAR 0 9
24816: PUSH
24817: DOUBLE
24818: LD_INT 1
24820: DEC
24821: ST_TO_ADDR
24822: LD_VAR 0 14
24826: PUSH
24827: FOR_TO
24828: IFFALSE 25504
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24830: LD_ADDR_VAR 0 13
24834: PUSH
24835: LD_VAR 0 14
24839: PUSH
24840: LD_VAR 0 9
24844: ARRAY
24845: PUSH
24846: LD_INT 1
24848: ARRAY
24849: PPUSH
24850: LD_VAR 0 14
24854: PUSH
24855: LD_VAR 0 9
24859: ARRAY
24860: PUSH
24861: LD_INT 2
24863: ARRAY
24864: PPUSH
24865: CALL_OW 428
24869: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24870: LD_VAR 0 14
24874: PUSH
24875: LD_VAR 0 9
24879: ARRAY
24880: PUSH
24881: LD_INT 1
24883: ARRAY
24884: PPUSH
24885: LD_VAR 0 14
24889: PUSH
24890: LD_VAR 0 9
24894: ARRAY
24895: PUSH
24896: LD_INT 2
24898: ARRAY
24899: PPUSH
24900: CALL_OW 351
24904: PUSH
24905: LD_VAR 0 14
24909: PUSH
24910: LD_VAR 0 9
24914: ARRAY
24915: PUSH
24916: LD_INT 1
24918: ARRAY
24919: PPUSH
24920: LD_VAR 0 14
24924: PUSH
24925: LD_VAR 0 9
24929: ARRAY
24930: PUSH
24931: LD_INT 2
24933: ARRAY
24934: PPUSH
24935: CALL_OW 488
24939: NOT
24940: OR
24941: PUSH
24942: LD_VAR 0 13
24946: PPUSH
24947: CALL_OW 247
24951: PUSH
24952: LD_INT 3
24954: EQUAL
24955: OR
24956: IFFALSE 24962
// exit ;
24958: POP
24959: POP
24960: GO 25506
// if not tmp then
24962: LD_VAR 0 13
24966: NOT
24967: IFFALSE 24971
// continue ;
24969: GO 24827
// result := true ;
24971: LD_ADDR_VAR 0 8
24975: PUSH
24976: LD_INT 1
24978: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24979: LD_VAR 0 6
24983: PUSH
24984: LD_VAR 0 13
24988: PPUSH
24989: CALL_OW 247
24993: PUSH
24994: LD_INT 2
24996: EQUAL
24997: AND
24998: PUSH
24999: LD_VAR 0 13
25003: PPUSH
25004: CALL_OW 263
25008: PUSH
25009: LD_INT 1
25011: EQUAL
25012: AND
25013: IFFALSE 25177
// begin if IsDrivenBy ( tmp ) then
25015: LD_VAR 0 13
25019: PPUSH
25020: CALL_OW 311
25024: IFFALSE 25028
// continue ;
25026: GO 24827
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
25028: LD_VAR 0 6
25032: PPUSH
25033: LD_INT 3
25035: PUSH
25036: LD_INT 60
25038: PUSH
25039: EMPTY
25040: LIST
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 3
25048: PUSH
25049: LD_INT 55
25051: PUSH
25052: EMPTY
25053: LIST
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PPUSH
25063: CALL_OW 72
25067: IFFALSE 25175
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
25069: LD_ADDR_VAR 0 18
25073: PUSH
25074: LD_VAR 0 6
25078: PPUSH
25079: LD_INT 3
25081: PUSH
25082: LD_INT 60
25084: PUSH
25085: EMPTY
25086: LIST
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 3
25094: PUSH
25095: LD_INT 55
25097: PUSH
25098: EMPTY
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PPUSH
25109: CALL_OW 72
25113: PUSH
25114: LD_INT 1
25116: ARRAY
25117: ST_TO_ADDR
// if IsInUnit ( driver ) then
25118: LD_VAR 0 18
25122: PPUSH
25123: CALL_OW 310
25127: IFFALSE 25138
// ComExit ( driver ) ;
25129: LD_VAR 0 18
25133: PPUSH
25134: CALL 50448 0 1
// AddComEnterUnit ( driver , tmp ) ;
25138: LD_VAR 0 18
25142: PPUSH
25143: LD_VAR 0 13
25147: PPUSH
25148: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
25152: LD_VAR 0 18
25156: PPUSH
25157: LD_VAR 0 7
25161: PPUSH
25162: CALL_OW 173
// AddComExitVehicle ( driver ) ;
25166: LD_VAR 0 18
25170: PPUSH
25171: CALL_OW 181
// end ; continue ;
25175: GO 24827
// end ; if not cleaners or not tmp in cleaners then
25177: LD_VAR 0 6
25181: NOT
25182: PUSH
25183: LD_VAR 0 13
25187: PUSH
25188: LD_VAR 0 6
25192: IN
25193: NOT
25194: OR
25195: IFFALSE 25502
// begin if dep then
25197: LD_VAR 0 17
25201: IFFALSE 25337
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25203: LD_ADDR_VAR 0 16
25207: PUSH
25208: LD_VAR 0 17
25212: PUSH
25213: LD_INT 1
25215: ARRAY
25216: PPUSH
25217: CALL_OW 250
25221: PPUSH
25222: LD_VAR 0 17
25226: PUSH
25227: LD_INT 1
25229: ARRAY
25230: PPUSH
25231: CALL_OW 254
25235: PPUSH
25236: LD_INT 5
25238: PPUSH
25239: CALL_OW 272
25243: PUSH
25244: LD_VAR 0 17
25248: PUSH
25249: LD_INT 1
25251: ARRAY
25252: PPUSH
25253: CALL_OW 251
25257: PPUSH
25258: LD_VAR 0 17
25262: PUSH
25263: LD_INT 1
25265: ARRAY
25266: PPUSH
25267: CALL_OW 254
25271: PPUSH
25272: LD_INT 5
25274: PPUSH
25275: CALL_OW 273
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25284: LD_VAR 0 16
25288: PUSH
25289: LD_INT 1
25291: ARRAY
25292: PPUSH
25293: LD_VAR 0 16
25297: PUSH
25298: LD_INT 2
25300: ARRAY
25301: PPUSH
25302: CALL_OW 488
25306: IFFALSE 25337
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25308: LD_VAR 0 13
25312: PPUSH
25313: LD_VAR 0 16
25317: PUSH
25318: LD_INT 1
25320: ARRAY
25321: PPUSH
25322: LD_VAR 0 16
25326: PUSH
25327: LD_INT 2
25329: ARRAY
25330: PPUSH
25331: CALL_OW 111
// continue ;
25335: GO 24827
// end ; end ; r := GetDir ( tmp ) ;
25337: LD_ADDR_VAR 0 15
25341: PUSH
25342: LD_VAR 0 13
25346: PPUSH
25347: CALL_OW 254
25351: ST_TO_ADDR
// if r = 5 then
25352: LD_VAR 0 15
25356: PUSH
25357: LD_INT 5
25359: EQUAL
25360: IFFALSE 25370
// r := 0 ;
25362: LD_ADDR_VAR 0 15
25366: PUSH
25367: LD_INT 0
25369: ST_TO_ADDR
// for j = r to 5 do
25370: LD_ADDR_VAR 0 10
25374: PUSH
25375: DOUBLE
25376: LD_VAR 0 15
25380: DEC
25381: ST_TO_ADDR
25382: LD_INT 5
25384: PUSH
25385: FOR_TO
25386: IFFALSE 25500
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25388: LD_ADDR_VAR 0 11
25392: PUSH
25393: LD_VAR 0 13
25397: PPUSH
25398: CALL_OW 250
25402: PPUSH
25403: LD_VAR 0 10
25407: PPUSH
25408: LD_INT 2
25410: PPUSH
25411: CALL_OW 272
25415: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25416: LD_ADDR_VAR 0 12
25420: PUSH
25421: LD_VAR 0 13
25425: PPUSH
25426: CALL_OW 251
25430: PPUSH
25431: LD_VAR 0 10
25435: PPUSH
25436: LD_INT 2
25438: PPUSH
25439: CALL_OW 273
25443: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25444: LD_VAR 0 11
25448: PPUSH
25449: LD_VAR 0 12
25453: PPUSH
25454: CALL_OW 488
25458: PUSH
25459: LD_VAR 0 11
25463: PPUSH
25464: LD_VAR 0 12
25468: PPUSH
25469: CALL_OW 428
25473: NOT
25474: AND
25475: IFFALSE 25498
// begin ComMoveXY ( tmp , _x , _y ) ;
25477: LD_VAR 0 13
25481: PPUSH
25482: LD_VAR 0 11
25486: PPUSH
25487: LD_VAR 0 12
25491: PPUSH
25492: CALL_OW 111
// break ;
25496: GO 25500
// end ; end ;
25498: GO 25385
25500: POP
25501: POP
// end ; end ;
25502: GO 24827
25504: POP
25505: POP
// end ;
25506: LD_VAR 0 8
25510: RET
// export function BuildingTechInvented ( side , btype ) ; begin
25511: LD_INT 0
25513: PPUSH
// result := true ;
25514: LD_ADDR_VAR 0 3
25518: PUSH
25519: LD_INT 1
25521: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
25522: LD_VAR 0 2
25526: PUSH
25527: LD_INT 24
25529: DOUBLE
25530: EQUAL
25531: IFTRUE 25541
25533: LD_INT 33
25535: DOUBLE
25536: EQUAL
25537: IFTRUE 25541
25539: GO 25566
25541: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
25542: LD_ADDR_VAR 0 3
25546: PUSH
25547: LD_INT 32
25549: PPUSH
25550: LD_VAR 0 1
25554: PPUSH
25555: CALL_OW 321
25559: PUSH
25560: LD_INT 2
25562: EQUAL
25563: ST_TO_ADDR
25564: GO 25886
25566: LD_INT 20
25568: DOUBLE
25569: EQUAL
25570: IFTRUE 25574
25572: GO 25599
25574: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
25575: LD_ADDR_VAR 0 3
25579: PUSH
25580: LD_INT 6
25582: PPUSH
25583: LD_VAR 0 1
25587: PPUSH
25588: CALL_OW 321
25592: PUSH
25593: LD_INT 2
25595: EQUAL
25596: ST_TO_ADDR
25597: GO 25886
25599: LD_INT 22
25601: DOUBLE
25602: EQUAL
25603: IFTRUE 25613
25605: LD_INT 36
25607: DOUBLE
25608: EQUAL
25609: IFTRUE 25613
25611: GO 25638
25613: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
25614: LD_ADDR_VAR 0 3
25618: PUSH
25619: LD_INT 15
25621: PPUSH
25622: LD_VAR 0 1
25626: PPUSH
25627: CALL_OW 321
25631: PUSH
25632: LD_INT 2
25634: EQUAL
25635: ST_TO_ADDR
25636: GO 25886
25638: LD_INT 30
25640: DOUBLE
25641: EQUAL
25642: IFTRUE 25646
25644: GO 25671
25646: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
25647: LD_ADDR_VAR 0 3
25651: PUSH
25652: LD_INT 20
25654: PPUSH
25655: LD_VAR 0 1
25659: PPUSH
25660: CALL_OW 321
25664: PUSH
25665: LD_INT 2
25667: EQUAL
25668: ST_TO_ADDR
25669: GO 25886
25671: LD_INT 28
25673: DOUBLE
25674: EQUAL
25675: IFTRUE 25685
25677: LD_INT 21
25679: DOUBLE
25680: EQUAL
25681: IFTRUE 25685
25683: GO 25710
25685: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
25686: LD_ADDR_VAR 0 3
25690: PUSH
25691: LD_INT 21
25693: PPUSH
25694: LD_VAR 0 1
25698: PPUSH
25699: CALL_OW 321
25703: PUSH
25704: LD_INT 2
25706: EQUAL
25707: ST_TO_ADDR
25708: GO 25886
25710: LD_INT 16
25712: DOUBLE
25713: EQUAL
25714: IFTRUE 25718
25716: GO 25745
25718: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
25719: LD_ADDR_VAR 0 3
25723: PUSH
25724: LD_EXP 95
25728: PPUSH
25729: LD_VAR 0 1
25733: PPUSH
25734: CALL_OW 321
25738: PUSH
25739: LD_INT 2
25741: EQUAL
25742: ST_TO_ADDR
25743: GO 25886
25745: LD_INT 19
25747: DOUBLE
25748: EQUAL
25749: IFTRUE 25759
25751: LD_INT 23
25753: DOUBLE
25754: EQUAL
25755: IFTRUE 25759
25757: GO 25786
25759: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
25760: LD_ADDR_VAR 0 3
25764: PUSH
25765: LD_EXP 94
25769: PPUSH
25770: LD_VAR 0 1
25774: PPUSH
25775: CALL_OW 321
25779: PUSH
25780: LD_INT 2
25782: EQUAL
25783: ST_TO_ADDR
25784: GO 25886
25786: LD_INT 17
25788: DOUBLE
25789: EQUAL
25790: IFTRUE 25794
25792: GO 25819
25794: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
25795: LD_ADDR_VAR 0 3
25799: PUSH
25800: LD_INT 39
25802: PPUSH
25803: LD_VAR 0 1
25807: PPUSH
25808: CALL_OW 321
25812: PUSH
25813: LD_INT 2
25815: EQUAL
25816: ST_TO_ADDR
25817: GO 25886
25819: LD_INT 18
25821: DOUBLE
25822: EQUAL
25823: IFTRUE 25827
25825: GO 25852
25827: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
25828: LD_ADDR_VAR 0 3
25832: PUSH
25833: LD_INT 40
25835: PPUSH
25836: LD_VAR 0 1
25840: PPUSH
25841: CALL_OW 321
25845: PUSH
25846: LD_INT 2
25848: EQUAL
25849: ST_TO_ADDR
25850: GO 25886
25852: LD_INT 27
25854: DOUBLE
25855: EQUAL
25856: IFTRUE 25860
25858: GO 25885
25860: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25861: LD_ADDR_VAR 0 3
25865: PUSH
25866: LD_INT 35
25868: PPUSH
25869: LD_VAR 0 1
25873: PPUSH
25874: CALL_OW 321
25878: PUSH
25879: LD_INT 2
25881: EQUAL
25882: ST_TO_ADDR
25883: GO 25886
25885: POP
// end ;
25886: LD_VAR 0 3
25890: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25891: LD_INT 0
25893: PPUSH
25894: PPUSH
25895: PPUSH
25896: PPUSH
25897: PPUSH
25898: PPUSH
25899: PPUSH
25900: PPUSH
25901: PPUSH
25902: PPUSH
25903: PPUSH
// result := false ;
25904: LD_ADDR_VAR 0 6
25908: PUSH
25909: LD_INT 0
25911: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25912: LD_VAR 0 1
25916: NOT
25917: PUSH
25918: LD_VAR 0 1
25922: PPUSH
25923: CALL_OW 266
25927: PUSH
25928: LD_INT 0
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: IN
25938: NOT
25939: OR
25940: PUSH
25941: LD_VAR 0 2
25945: NOT
25946: OR
25947: PUSH
25948: LD_VAR 0 5
25952: PUSH
25953: LD_INT 0
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: LD_INT 2
25961: PUSH
25962: LD_INT 3
25964: PUSH
25965: LD_INT 4
25967: PUSH
25968: LD_INT 5
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: IN
25979: NOT
25980: OR
25981: PUSH
25982: LD_VAR 0 3
25986: PPUSH
25987: LD_VAR 0 4
25991: PPUSH
25992: CALL_OW 488
25996: NOT
25997: OR
25998: IFFALSE 26002
// exit ;
26000: GO 26738
// side := GetSide ( depot ) ;
26002: LD_ADDR_VAR 0 9
26006: PUSH
26007: LD_VAR 0 1
26011: PPUSH
26012: CALL_OW 255
26016: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
26017: LD_VAR 0 9
26021: PPUSH
26022: LD_VAR 0 2
26026: PPUSH
26027: CALL 25511 0 2
26031: NOT
26032: IFFALSE 26036
// exit ;
26034: GO 26738
// pom := GetBase ( depot ) ;
26036: LD_ADDR_VAR 0 10
26040: PUSH
26041: LD_VAR 0 1
26045: PPUSH
26046: CALL_OW 274
26050: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26051: LD_ADDR_VAR 0 11
26055: PUSH
26056: LD_VAR 0 2
26060: PPUSH
26061: LD_VAR 0 1
26065: PPUSH
26066: CALL_OW 248
26070: PPUSH
26071: CALL_OW 450
26075: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26076: LD_VAR 0 10
26080: PPUSH
26081: LD_INT 1
26083: PPUSH
26084: CALL_OW 275
26088: PUSH
26089: LD_VAR 0 11
26093: PUSH
26094: LD_INT 1
26096: ARRAY
26097: GREATEREQUAL
26098: PUSH
26099: LD_VAR 0 10
26103: PPUSH
26104: LD_INT 2
26106: PPUSH
26107: CALL_OW 275
26111: PUSH
26112: LD_VAR 0 11
26116: PUSH
26117: LD_INT 2
26119: ARRAY
26120: GREATEREQUAL
26121: AND
26122: PUSH
26123: LD_VAR 0 10
26127: PPUSH
26128: LD_INT 3
26130: PPUSH
26131: CALL_OW 275
26135: PUSH
26136: LD_VAR 0 11
26140: PUSH
26141: LD_INT 3
26143: ARRAY
26144: GREATEREQUAL
26145: AND
26146: NOT
26147: IFFALSE 26151
// exit ;
26149: GO 26738
// if GetBType ( depot ) = b_depot then
26151: LD_VAR 0 1
26155: PPUSH
26156: CALL_OW 266
26160: PUSH
26161: LD_INT 0
26163: EQUAL
26164: IFFALSE 26176
// dist := 28 else
26166: LD_ADDR_VAR 0 14
26170: PUSH
26171: LD_INT 28
26173: ST_TO_ADDR
26174: GO 26184
// dist := 36 ;
26176: LD_ADDR_VAR 0 14
26180: PUSH
26181: LD_INT 36
26183: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26184: LD_VAR 0 1
26188: PPUSH
26189: LD_VAR 0 3
26193: PPUSH
26194: LD_VAR 0 4
26198: PPUSH
26199: CALL_OW 297
26203: PUSH
26204: LD_VAR 0 14
26208: GREATER
26209: IFFALSE 26213
// exit ;
26211: GO 26738
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26213: LD_ADDR_VAR 0 12
26217: PUSH
26218: LD_VAR 0 2
26222: PPUSH
26223: LD_VAR 0 3
26227: PPUSH
26228: LD_VAR 0 4
26232: PPUSH
26233: LD_VAR 0 5
26237: PPUSH
26238: LD_VAR 0 1
26242: PPUSH
26243: CALL_OW 248
26247: PPUSH
26248: LD_INT 0
26250: PPUSH
26251: CALL 26743 0 6
26255: ST_TO_ADDR
// if not hexes then
26256: LD_VAR 0 12
26260: NOT
26261: IFFALSE 26265
// exit ;
26263: GO 26738
// hex := GetHexInfo ( x , y ) ;
26265: LD_ADDR_VAR 0 15
26269: PUSH
26270: LD_VAR 0 3
26274: PPUSH
26275: LD_VAR 0 4
26279: PPUSH
26280: CALL_OW 546
26284: ST_TO_ADDR
// if hex [ 1 ] then
26285: LD_VAR 0 15
26289: PUSH
26290: LD_INT 1
26292: ARRAY
26293: IFFALSE 26297
// exit ;
26295: GO 26738
// height := hex [ 2 ] ;
26297: LD_ADDR_VAR 0 13
26301: PUSH
26302: LD_VAR 0 15
26306: PUSH
26307: LD_INT 2
26309: ARRAY
26310: ST_TO_ADDR
// for i = 1 to hexes do
26311: LD_ADDR_VAR 0 7
26315: PUSH
26316: DOUBLE
26317: LD_INT 1
26319: DEC
26320: ST_TO_ADDR
26321: LD_VAR 0 12
26325: PUSH
26326: FOR_TO
26327: IFFALSE 26657
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26329: LD_VAR 0 12
26333: PUSH
26334: LD_VAR 0 7
26338: ARRAY
26339: PUSH
26340: LD_INT 1
26342: ARRAY
26343: PPUSH
26344: LD_VAR 0 12
26348: PUSH
26349: LD_VAR 0 7
26353: ARRAY
26354: PUSH
26355: LD_INT 2
26357: ARRAY
26358: PPUSH
26359: CALL_OW 488
26363: NOT
26364: PUSH
26365: LD_VAR 0 12
26369: PUSH
26370: LD_VAR 0 7
26374: ARRAY
26375: PUSH
26376: LD_INT 1
26378: ARRAY
26379: PPUSH
26380: LD_VAR 0 12
26384: PUSH
26385: LD_VAR 0 7
26389: ARRAY
26390: PUSH
26391: LD_INT 2
26393: ARRAY
26394: PPUSH
26395: CALL_OW 428
26399: PUSH
26400: LD_INT 0
26402: GREATER
26403: OR
26404: PUSH
26405: LD_VAR 0 12
26409: PUSH
26410: LD_VAR 0 7
26414: ARRAY
26415: PUSH
26416: LD_INT 1
26418: ARRAY
26419: PPUSH
26420: LD_VAR 0 12
26424: PUSH
26425: LD_VAR 0 7
26429: ARRAY
26430: PUSH
26431: LD_INT 2
26433: ARRAY
26434: PPUSH
26435: CALL_OW 351
26439: OR
26440: IFFALSE 26446
// exit ;
26442: POP
26443: POP
26444: GO 26738
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26446: LD_ADDR_VAR 0 8
26450: PUSH
26451: LD_VAR 0 12
26455: PUSH
26456: LD_VAR 0 7
26460: ARRAY
26461: PUSH
26462: LD_INT 1
26464: ARRAY
26465: PPUSH
26466: LD_VAR 0 12
26470: PUSH
26471: LD_VAR 0 7
26475: ARRAY
26476: PUSH
26477: LD_INT 2
26479: ARRAY
26480: PPUSH
26481: CALL_OW 546
26485: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26486: LD_VAR 0 8
26490: PUSH
26491: LD_INT 1
26493: ARRAY
26494: PUSH
26495: LD_VAR 0 8
26499: PUSH
26500: LD_INT 2
26502: ARRAY
26503: PUSH
26504: LD_VAR 0 13
26508: PUSH
26509: LD_INT 2
26511: PLUS
26512: GREATER
26513: OR
26514: PUSH
26515: LD_VAR 0 8
26519: PUSH
26520: LD_INT 2
26522: ARRAY
26523: PUSH
26524: LD_VAR 0 13
26528: PUSH
26529: LD_INT 2
26531: MINUS
26532: LESS
26533: OR
26534: PUSH
26535: LD_VAR 0 8
26539: PUSH
26540: LD_INT 3
26542: ARRAY
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: LD_INT 8
26549: PUSH
26550: LD_INT 9
26552: PUSH
26553: LD_INT 10
26555: PUSH
26556: LD_INT 11
26558: PUSH
26559: LD_INT 12
26561: PUSH
26562: LD_INT 13
26564: PUSH
26565: LD_INT 16
26567: PUSH
26568: LD_INT 17
26570: PUSH
26571: LD_INT 18
26573: PUSH
26574: LD_INT 19
26576: PUSH
26577: LD_INT 20
26579: PUSH
26580: LD_INT 21
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: IN
26598: NOT
26599: OR
26600: PUSH
26601: LD_VAR 0 8
26605: PUSH
26606: LD_INT 5
26608: ARRAY
26609: NOT
26610: OR
26611: PUSH
26612: LD_VAR 0 8
26616: PUSH
26617: LD_INT 6
26619: ARRAY
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: LD_INT 2
26626: PUSH
26627: LD_INT 7
26629: PUSH
26630: LD_INT 9
26632: PUSH
26633: LD_INT 10
26635: PUSH
26636: LD_INT 11
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: IN
26647: NOT
26648: OR
26649: IFFALSE 26655
// exit ;
26651: POP
26652: POP
26653: GO 26738
// end ;
26655: GO 26326
26657: POP
26658: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26659: LD_VAR 0 9
26663: PPUSH
26664: LD_VAR 0 3
26668: PPUSH
26669: LD_VAR 0 4
26673: PPUSH
26674: LD_INT 20
26676: PPUSH
26677: CALL 18684 0 4
26681: PUSH
26682: LD_INT 4
26684: ARRAY
26685: IFFALSE 26689
// exit ;
26687: GO 26738
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26689: LD_VAR 0 2
26693: PUSH
26694: LD_INT 29
26696: PUSH
26697: LD_INT 30
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: IN
26704: PUSH
26705: LD_VAR 0 3
26709: PPUSH
26710: LD_VAR 0 4
26714: PPUSH
26715: LD_VAR 0 9
26719: PPUSH
26720: CALL_OW 440
26724: NOT
26725: AND
26726: IFFALSE 26730
// exit ;
26728: GO 26738
// result := true ;
26730: LD_ADDR_VAR 0 6
26734: PUSH
26735: LD_INT 1
26737: ST_TO_ADDR
// end ;
26738: LD_VAR 0 6
26742: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
26743: LD_INT 0
26745: PPUSH
26746: PPUSH
26747: PPUSH
26748: PPUSH
26749: PPUSH
26750: PPUSH
26751: PPUSH
26752: PPUSH
26753: PPUSH
26754: PPUSH
26755: PPUSH
26756: PPUSH
26757: PPUSH
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
26769: PPUSH
26770: PPUSH
26771: PPUSH
26772: PPUSH
26773: PPUSH
26774: PPUSH
26775: PPUSH
26776: PPUSH
26777: PPUSH
26778: PPUSH
26779: PPUSH
26780: PPUSH
26781: PPUSH
26782: PPUSH
26783: PPUSH
26784: PPUSH
26785: PPUSH
26786: PPUSH
26787: PPUSH
26788: PPUSH
26789: PPUSH
26790: PPUSH
26791: PPUSH
26792: PPUSH
26793: PPUSH
26794: PPUSH
26795: PPUSH
26796: PPUSH
26797: PPUSH
26798: PPUSH
26799: PPUSH
26800: PPUSH
26801: PPUSH
26802: PPUSH
// result = [ ] ;
26803: LD_ADDR_VAR 0 7
26807: PUSH
26808: EMPTY
26809: ST_TO_ADDR
// temp_list = [ ] ;
26810: LD_ADDR_VAR 0 9
26814: PUSH
26815: EMPTY
26816: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26817: LD_VAR 0 4
26821: PUSH
26822: LD_INT 0
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: LD_INT 3
26833: PUSH
26834: LD_INT 4
26836: PUSH
26837: LD_INT 5
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: IN
26848: NOT
26849: PUSH
26850: LD_VAR 0 1
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: IN
26865: PUSH
26866: LD_VAR 0 5
26870: PUSH
26871: LD_INT 1
26873: PUSH
26874: LD_INT 2
26876: PUSH
26877: LD_INT 3
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: LIST
26884: IN
26885: NOT
26886: AND
26887: OR
26888: IFFALSE 26892
// exit ;
26890: GO 45283
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26892: LD_VAR 0 1
26896: PUSH
26897: LD_INT 6
26899: PUSH
26900: LD_INT 7
26902: PUSH
26903: LD_INT 8
26905: PUSH
26906: LD_INT 13
26908: PUSH
26909: LD_INT 12
26911: PUSH
26912: LD_INT 15
26914: PUSH
26915: LD_INT 11
26917: PUSH
26918: LD_INT 14
26920: PUSH
26921: LD_INT 10
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: IN
26935: IFFALSE 26945
// btype = b_lab ;
26937: LD_ADDR_VAR 0 1
26941: PUSH
26942: LD_INT 6
26944: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26945: LD_VAR 0 6
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: LD_INT 1
26955: PUSH
26956: LD_INT 2
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: LIST
26963: IN
26964: NOT
26965: PUSH
26966: LD_VAR 0 1
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: LD_INT 2
26979: PUSH
26980: LD_INT 3
26982: PUSH
26983: LD_INT 6
26985: PUSH
26986: LD_INT 36
26988: PUSH
26989: LD_INT 4
26991: PUSH
26992: LD_INT 5
26994: PUSH
26995: LD_INT 31
26997: PUSH
26998: LD_INT 32
27000: PUSH
27001: LD_INT 33
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: IN
27017: NOT
27018: PUSH
27019: LD_VAR 0 6
27023: PUSH
27024: LD_INT 1
27026: EQUAL
27027: AND
27028: OR
27029: PUSH
27030: LD_VAR 0 1
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: LD_INT 3
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: IN
27045: NOT
27046: PUSH
27047: LD_VAR 0 6
27051: PUSH
27052: LD_INT 2
27054: EQUAL
27055: AND
27056: OR
27057: IFFALSE 27067
// mode = 0 ;
27059: LD_ADDR_VAR 0 6
27063: PUSH
27064: LD_INT 0
27066: ST_TO_ADDR
// case mode of 0 :
27067: LD_VAR 0 6
27071: PUSH
27072: LD_INT 0
27074: DOUBLE
27075: EQUAL
27076: IFTRUE 27080
27078: GO 38533
27080: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27081: LD_ADDR_VAR 0 11
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 1
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 1
27139: NEG
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: NEG
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: PUSH
27164: LD_INT 2
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: LD_INT 2
27177: NEG
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: EMPTY
27191: LIST
27192: LIST
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: LD_INT 2
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 0
27206: PUSH
27207: LD_INT 2
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: NEG
27217: PUSH
27218: LD_INT 1
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 1
27227: PUSH
27228: LD_INT 3
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: LD_INT 3
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 1
27247: NEG
27248: PUSH
27249: LD_INT 2
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27274: LD_ADDR_VAR 0 12
27278: PUSH
27279: LD_INT 0
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 1
27294: NEG
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: PUSH
27330: LD_INT 1
27332: NEG
27333: PUSH
27334: LD_INT 0
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: NEG
27344: PUSH
27345: LD_INT 1
27347: NEG
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 1
27355: PUSH
27356: LD_INT 1
27358: NEG
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 2
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 2
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: NEG
27387: PUSH
27388: LD_INT 1
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 2
27397: NEG
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: LD_INT 1
27412: NEG
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 2
27420: NEG
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 3
27431: NEG
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 3
27442: NEG
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27470: LD_ADDR_VAR 0 13
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: LD_INT 0
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: LD_INT 0
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 1
27528: NEG
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: NEG
27540: PUSH
27541: LD_INT 1
27543: NEG
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: LD_INT 2
27555: NEG
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 2
27563: PUSH
27564: LD_INT 1
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: LD_INT 2
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 1
27583: PUSH
27584: LD_INT 2
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 2
27593: NEG
27594: PUSH
27595: LD_INT 1
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 2
27605: NEG
27606: PUSH
27607: LD_INT 2
27609: NEG
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 2
27617: NEG
27618: PUSH
27619: LD_INT 3
27621: NEG
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 3
27629: NEG
27630: PUSH
27631: LD_INT 2
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 3
27641: NEG
27642: PUSH
27643: LD_INT 3
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27669: LD_ADDR_VAR 0 14
27673: PUSH
27674: LD_INT 0
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 0
27686: PUSH
27687: LD_INT 1
27689: NEG
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 1
27707: PUSH
27708: LD_INT 1
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 1
27727: NEG
27728: PUSH
27729: LD_INT 0
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: NEG
27751: PUSH
27752: LD_INT 2
27754: NEG
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 0
27762: PUSH
27763: LD_INT 2
27765: NEG
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 1
27773: PUSH
27774: LD_INT 1
27776: NEG
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: LD_INT 2
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 0
27794: PUSH
27795: LD_INT 2
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 1
27804: NEG
27805: PUSH
27806: LD_INT 1
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PUSH
27813: LD_INT 1
27815: NEG
27816: PUSH
27817: LD_INT 3
27819: NEG
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: LD_INT 3
27830: NEG
27831: PUSH
27832: EMPTY
27833: LIST
27834: LIST
27835: PUSH
27836: LD_INT 1
27838: PUSH
27839: LD_INT 2
27841: NEG
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27865: LD_ADDR_VAR 0 15
27869: PUSH
27870: LD_INT 0
27872: PUSH
27873: LD_INT 0
27875: PUSH
27876: EMPTY
27877: LIST
27878: LIST
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: LD_INT 1
27885: NEG
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: LD_INT 0
27896: PUSH
27897: EMPTY
27898: LIST
27899: LIST
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: LD_INT 1
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 0
27913: PUSH
27914: LD_INT 1
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: NEG
27924: PUSH
27925: LD_INT 0
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 1
27934: NEG
27935: PUSH
27936: LD_INT 1
27938: NEG
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: LD_INT 1
27949: NEG
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 2
27957: PUSH
27958: LD_INT 0
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 2
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 2
27988: NEG
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 2
27999: NEG
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 2
28011: PUSH
28012: LD_INT 1
28014: NEG
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: PUSH
28020: LD_INT 3
28022: PUSH
28023: LD_INT 0
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 3
28032: PUSH
28033: LD_INT 1
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28058: LD_ADDR_VAR 0 16
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: LD_INT 0
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: LD_INT 1
28078: NEG
28079: PUSH
28080: EMPTY
28081: LIST
28082: LIST
28083: PUSH
28084: LD_INT 1
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: LD_INT 1
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 1
28116: NEG
28117: PUSH
28118: LD_INT 0
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 1
28127: NEG
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: LD_INT 2
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 2
28151: PUSH
28152: LD_INT 1
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: LD_INT 2
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 1
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 2
28181: NEG
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 2
28193: NEG
28194: PUSH
28195: LD_INT 2
28197: NEG
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 3
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 3
28215: PUSH
28216: LD_INT 3
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 2
28225: PUSH
28226: LD_INT 3
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28251: LD_ADDR_VAR 0 17
28255: PUSH
28256: LD_INT 0
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 1
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 1
28289: PUSH
28290: LD_INT 1
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: LD_INT 1
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 1
28309: NEG
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: NEG
28321: PUSH
28322: LD_INT 1
28324: NEG
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: NEG
28333: PUSH
28334: LD_INT 2
28336: NEG
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: LD_INT 2
28347: NEG
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 2
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 2
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 2
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: NEG
28417: PUSH
28418: LD_INT 1
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 2
28427: NEG
28428: PUSH
28429: LD_INT 0
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 2
28438: NEG
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 2
28450: NEG
28451: PUSH
28452: LD_INT 2
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28481: LD_ADDR_VAR 0 18
28485: PUSH
28486: LD_INT 0
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: PUSH
28517: LD_INT 1
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 0
28529: PUSH
28530: LD_INT 1
28532: PUSH
28533: EMPTY
28534: LIST
28535: LIST
28536: PUSH
28537: LD_INT 1
28539: NEG
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: LD_INT 1
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: LD_INT 2
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: LD_INT 2
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: LD_INT 2
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 1
28626: PUSH
28627: LD_INT 2
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: LD_INT 2
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 1
28646: NEG
28647: PUSH
28648: LD_INT 1
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 2
28657: NEG
28658: PUSH
28659: LD_INT 0
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 2
28668: NEG
28669: PUSH
28670: LD_INT 1
28672: NEG
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 2
28680: NEG
28681: PUSH
28682: LD_INT 2
28684: NEG
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28711: LD_ADDR_VAR 0 19
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: LD_INT 0
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: LD_INT 1
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: LD_INT 1
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 1
28769: NEG
28770: PUSH
28771: LD_INT 0
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: LD_INT 1
28784: NEG
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 1
28792: NEG
28793: PUSH
28794: LD_INT 2
28796: NEG
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: LD_INT 2
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: LD_INT 1
28818: NEG
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 2
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 2
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 1
28856: PUSH
28857: LD_INT 2
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 0
28866: PUSH
28867: LD_INT 2
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 2
28887: NEG
28888: PUSH
28889: LD_INT 0
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 2
28898: NEG
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 2
28910: NEG
28911: PUSH
28912: LD_INT 2
28914: NEG
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: LIST
28924: LIST
28925: LIST
28926: LIST
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28941: LD_ADDR_VAR 0 20
28945: PUSH
28946: LD_INT 0
28948: PUSH
28949: LD_INT 0
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: LD_INT 1
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 1
28979: PUSH
28980: LD_INT 1
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 1
28999: NEG
29000: PUSH
29001: LD_INT 0
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: LD_INT 1
29010: NEG
29011: PUSH
29012: LD_INT 1
29014: NEG
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 1
29022: NEG
29023: PUSH
29024: LD_INT 2
29026: NEG
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 0
29034: PUSH
29035: LD_INT 2
29037: NEG
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 1
29045: PUSH
29046: LD_INT 1
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 2
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 2
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 2
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: PUSH
29087: LD_INT 2
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: LD_INT 2
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: LD_INT 1
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: PUSH
29115: LD_INT 2
29117: NEG
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PUSH
29126: LD_INT 2
29128: NEG
29129: PUSH
29130: LD_INT 1
29132: NEG
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 2
29140: NEG
29141: PUSH
29142: LD_INT 2
29144: NEG
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29171: LD_ADDR_VAR 0 21
29175: PUSH
29176: LD_INT 0
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 1
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 1
29209: PUSH
29210: LD_INT 1
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: LD_INT 1
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 1
29229: NEG
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: LD_INT 2
29256: NEG
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 0
29264: PUSH
29265: LD_INT 2
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 2
29286: PUSH
29287: LD_INT 0
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 2
29296: PUSH
29297: LD_INT 1
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 2
29306: PUSH
29307: LD_INT 2
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 0
29326: PUSH
29327: LD_INT 2
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 1
29336: NEG
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 2
29347: NEG
29348: PUSH
29349: LD_INT 0
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 2
29358: NEG
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 2
29370: NEG
29371: PUSH
29372: LD_INT 2
29374: NEG
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29401: LD_ADDR_VAR 0 22
29405: PUSH
29406: LD_INT 0
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: LD_INT 1
29421: NEG
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: LD_INT 0
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 1
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 1
29459: NEG
29460: PUSH
29461: LD_INT 0
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: PUSH
29468: LD_INT 1
29470: NEG
29471: PUSH
29472: LD_INT 1
29474: NEG
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: NEG
29483: PUSH
29484: LD_INT 2
29486: NEG
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 0
29494: PUSH
29495: LD_INT 2
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: LD_INT 1
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 2
29516: PUSH
29517: LD_INT 0
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 2
29526: PUSH
29527: LD_INT 1
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 2
29536: PUSH
29537: LD_INT 2
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: LD_INT 2
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PUSH
29554: LD_INT 0
29556: PUSH
29557: LD_INT 2
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 1
29566: NEG
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 2
29577: NEG
29578: PUSH
29579: LD_INT 0
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 2
29588: NEG
29589: PUSH
29590: LD_INT 1
29592: NEG
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: PUSH
29598: LD_INT 2
29600: NEG
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29631: LD_ADDR_VAR 0 23
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: LD_INT 0
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: LD_INT 1
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: LD_INT 0
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: LD_INT 1
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: NEG
29701: PUSH
29702: LD_INT 1
29704: NEG
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: NEG
29713: PUSH
29714: LD_INT 2
29716: NEG
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 0
29724: PUSH
29725: LD_INT 2
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: LD_INT 0
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: LD_INT 1
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 2
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: LD_INT 2
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 0
29786: PUSH
29787: LD_INT 2
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 2
29807: NEG
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 2
29818: NEG
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 2
29830: NEG
29831: PUSH
29832: LD_INT 2
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 2
29842: NEG
29843: PUSH
29844: LD_INT 3
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 1
29854: NEG
29855: PUSH
29856: LD_INT 3
29858: NEG
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 1
29866: PUSH
29867: LD_INT 2
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 2
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29911: LD_ADDR_VAR 0 24
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: LD_INT 0
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: LD_INT 1
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 1
29980: NEG
29981: PUSH
29982: LD_INT 1
29984: NEG
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: LD_INT 2
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 0
30004: PUSH
30005: LD_INT 2
30007: NEG
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 2
30026: PUSH
30027: LD_INT 0
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: LD_INT 2
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 2
30046: PUSH
30047: LD_INT 2
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: PUSH
30054: LD_INT 1
30056: PUSH
30057: LD_INT 2
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: PUSH
30064: LD_INT 0
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 1
30076: NEG
30077: PUSH
30078: LD_INT 1
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 2
30087: NEG
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: PUSH
30096: LD_INT 2
30098: NEG
30099: PUSH
30100: LD_INT 1
30102: NEG
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PUSH
30108: LD_INT 2
30110: NEG
30111: PUSH
30112: LD_INT 2
30114: NEG
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: LD_INT 2
30125: NEG
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: PUSH
30131: LD_INT 2
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 3
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 3
30154: PUSH
30155: LD_INT 2
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30187: LD_ADDR_VAR 0 25
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: LD_INT 0
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 1
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 1
30225: PUSH
30226: LD_INT 1
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 1
30245: NEG
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 1
30256: NEG
30257: PUSH
30258: LD_INT 1
30260: NEG
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: LD_INT 2
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: LD_INT 2
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: LD_INT 1
30294: NEG
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 2
30312: PUSH
30313: LD_INT 1
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 2
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 1
30332: PUSH
30333: LD_INT 2
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 0
30342: PUSH
30343: LD_INT 2
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 2
30363: NEG
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 2
30374: NEG
30375: PUSH
30376: LD_INT 1
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 2
30386: NEG
30387: PUSH
30388: LD_INT 2
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 3
30398: PUSH
30399: LD_INT 1
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 3
30408: PUSH
30409: LD_INT 2
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: LD_INT 3
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: LD_INT 3
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30461: LD_ADDR_VAR 0 26
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: LD_INT 1
30481: NEG
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 1
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: LD_INT 1
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: LD_INT 1
30519: NEG
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 1
30530: NEG
30531: PUSH
30532: LD_INT 1
30534: NEG
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PUSH
30540: LD_INT 1
30542: NEG
30543: PUSH
30544: LD_INT 2
30546: NEG
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: LD_INT 2
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 1
30565: PUSH
30566: LD_INT 1
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: LD_INT 0
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: PUSH
30584: LD_INT 2
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 2
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: LD_INT 2
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PUSH
30624: LD_INT 1
30626: NEG
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: NEG
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 2
30648: NEG
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 2
30660: NEG
30661: PUSH
30662: LD_INT 2
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: LD_INT 3
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 2
30703: NEG
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30737: LD_ADDR_VAR 0 27
30741: PUSH
30742: LD_INT 0
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: EMPTY
30760: LIST
30761: LIST
30762: PUSH
30763: LD_INT 1
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: LD_INT 1
30775: PUSH
30776: LD_INT 1
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: LD_INT 1
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: LD_INT 1
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 1
30818: NEG
30819: PUSH
30820: LD_INT 2
30822: NEG
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 0
30830: PUSH
30831: LD_INT 2
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: LD_INT 1
30844: NEG
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 2
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 2
30862: PUSH
30863: LD_INT 1
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: PUSH
30870: LD_INT 2
30872: PUSH
30873: LD_INT 2
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 1
30882: PUSH
30883: LD_INT 2
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: LD_INT 2
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: LD_INT 1
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 2
30913: NEG
30914: PUSH
30915: LD_INT 0
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 2
30924: NEG
30925: PUSH
30926: LD_INT 1
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 2
30936: NEG
30937: PUSH
30938: LD_INT 2
30940: NEG
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 1
30948: NEG
30949: PUSH
30950: LD_INT 2
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 2
30959: NEG
30960: PUSH
30961: LD_INT 1
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: PUSH
30968: LD_INT 3
30970: NEG
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 3
30982: NEG
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31017: LD_ADDR_VAR 0 28
31021: PUSH
31022: LD_INT 0
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: LD_INT 1
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 0
31065: PUSH
31066: LD_INT 1
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 1
31075: NEG
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: LD_INT 1
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: LD_INT 2
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 2
31113: NEG
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 2
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: LD_INT 2
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 1
31162: PUSH
31163: LD_INT 2
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: LD_INT 0
31172: PUSH
31173: LD_INT 2
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: NEG
31183: PUSH
31184: LD_INT 1
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 2
31193: NEG
31194: PUSH
31195: LD_INT 0
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: LD_INT 1
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 2
31216: NEG
31217: PUSH
31218: LD_INT 2
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 2
31228: NEG
31229: PUSH
31230: LD_INT 3
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: LD_INT 3
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 3
31252: NEG
31253: PUSH
31254: LD_INT 1
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 3
31264: NEG
31265: PUSH
31266: LD_INT 2
31268: NEG
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31299: LD_ADDR_VAR 0 29
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 0
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: NEG
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: NEG
31381: PUSH
31382: LD_INT 2
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 2
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 1
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: LD_INT 0
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: PUSH
31435: LD_INT 2
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 0
31444: PUSH
31445: LD_INT 2
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 1
31454: NEG
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 2
31465: NEG
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 2
31477: NEG
31478: PUSH
31479: LD_INT 2
31481: NEG
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 2
31489: NEG
31490: PUSH
31491: LD_INT 3
31493: NEG
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 2
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 3
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 1
31522: PUSH
31523: LD_INT 3
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: LD_INT 2
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 3
31543: NEG
31544: PUSH
31545: LD_INT 2
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: LIST
31559: LIST
31560: LIST
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31578: LD_ADDR_VAR 0 30
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 1
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 1
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: LD_INT 0
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: NEG
31648: PUSH
31649: LD_INT 1
31651: NEG
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: LD_INT 2
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 0
31671: PUSH
31672: LD_INT 2
31674: NEG
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 2
31693: PUSH
31694: LD_INT 0
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 2
31703: PUSH
31704: LD_INT 1
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 2
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: PUSH
31724: LD_INT 2
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: NEG
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: NEG
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 2
31755: NEG
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 1
31767: NEG
31768: PUSH
31769: LD_INT 3
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 1
31779: PUSH
31780: LD_INT 2
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 3
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: LD_INT 3
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 2
31810: NEG
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 3
31821: NEG
31822: PUSH
31823: LD_INT 1
31825: NEG
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31856: LD_ADDR_VAR 0 31
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: LD_INT 1
31876: NEG
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 1
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 0
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 1
31914: NEG
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 1
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: PUSH
31935: LD_INT 1
31937: NEG
31938: PUSH
31939: LD_INT 2
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: PUSH
31950: LD_INT 1
31952: NEG
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 2
31960: PUSH
31961: LD_INT 0
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 2
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 2
31980: PUSH
31981: LD_INT 2
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: LD_INT 2
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: LD_INT 2
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 2
32021: NEG
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 2
32033: NEG
32034: PUSH
32035: LD_INT 2
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: NEG
32046: PUSH
32047: LD_INT 3
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 2
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 3
32068: PUSH
32069: LD_INT 1
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: LD_INT 3
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 1
32088: NEG
32089: PUSH
32090: LD_INT 2
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 3
32099: NEG
32100: PUSH
32101: LD_INT 2
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32134: LD_ADDR_VAR 0 32
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 1
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: LD_INT 1
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 1
32192: NEG
32193: PUSH
32194: LD_INT 0
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: LD_INT 1
32207: NEG
32208: PUSH
32209: EMPTY
32210: LIST
32211: LIST
32212: PUSH
32213: LD_INT 1
32215: NEG
32216: PUSH
32217: LD_INT 2
32219: NEG
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 0
32227: PUSH
32228: LD_INT 2
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 2
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 2
32259: PUSH
32260: LD_INT 2
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 2
32300: NEG
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 2
32311: NEG
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: NEG
32324: PUSH
32325: LD_INT 3
32327: NEG
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 3
32346: PUSH
32347: LD_INT 2
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: LD_INT 3
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: LD_INT 1
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32412: LD_ADDR_VAR 0 33
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: LD_INT 1
32508: NEG
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 2
32516: PUSH
32517: LD_INT 0
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: PUSH
32524: LD_INT 2
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: LD_INT 2
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: LD_INT 2
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: NEG
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 2
32567: NEG
32568: PUSH
32569: LD_INT 0
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: LD_INT 2
32578: NEG
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 2
32590: NEG
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 2
32602: NEG
32603: PUSH
32604: LD_INT 3
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: LD_INT 1
32617: NEG
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 1
32645: NEG
32646: PUSH
32647: LD_INT 2
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 3
32656: NEG
32657: PUSH
32658: LD_INT 2
32660: NEG
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32691: LD_ADDR_VAR 0 34
32695: PUSH
32696: LD_INT 0
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: LD_INT 1
32711: NEG
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 1
32729: PUSH
32730: LD_INT 1
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: PUSH
32751: LD_INT 0
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 1
32760: NEG
32761: PUSH
32762: LD_INT 1
32764: NEG
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: NEG
32773: PUSH
32774: LD_INT 2
32776: NEG
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: LD_INT 2
32787: NEG
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: LD_INT 1
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 2
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 2
32816: PUSH
32817: LD_INT 2
32819: PUSH
32820: EMPTY
32821: LIST
32822: LIST
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: LD_INT 2
32829: PUSH
32830: EMPTY
32831: LIST
32832: LIST
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: LD_INT 1
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 2
32847: NEG
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 2
32858: NEG
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 2
32870: NEG
32871: PUSH
32872: LD_INT 2
32874: NEG
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: LD_INT 3
32886: NEG
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: PUSH
32895: LD_INT 2
32897: NEG
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 3
32905: PUSH
32906: LD_INT 2
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 2
32915: PUSH
32916: LD_INT 3
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 2
32925: NEG
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 3
32936: NEG
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32971: LD_ADDR_VAR 0 35
32975: PUSH
32976: LD_INT 0
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: LD_INT 0
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 2
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 2
33062: NEG
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33083: LD_ADDR_VAR 0 36
33087: PUSH
33088: LD_INT 0
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 1
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: LD_INT 1
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: LD_INT 0
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 1
33164: NEG
33165: PUSH
33166: LD_INT 2
33168: NEG
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: PUSH
33177: LD_INT 2
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33195: LD_ADDR_VAR 0 37
33199: PUSH
33200: LD_INT 0
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 0
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 1
33253: NEG
33254: PUSH
33255: LD_INT 0
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: PUSH
33277: LD_INT 1
33279: NEG
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 1
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33307: LD_ADDR_VAR 0 38
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: LD_INT 1
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: LD_INT 0
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: LD_INT 1
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: LD_INT 1
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: LIST
33416: LIST
33417: LIST
33418: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33419: LD_ADDR_VAR 0 39
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: LD_INT 1
33439: NEG
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 1
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 0
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 1
33477: NEG
33478: PUSH
33479: LD_INT 0
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 1
33488: NEG
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: PUSH
33494: EMPTY
33495: LIST
33496: LIST
33497: PUSH
33498: LD_INT 1
33500: NEG
33501: PUSH
33502: LD_INT 2
33504: NEG
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: LD_INT 2
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33531: LD_ADDR_VAR 0 40
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: LD_INT 0
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 1
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: LD_INT 1
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 1
33589: NEG
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: LD_INT 1
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: LD_INT 1
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33643: LD_ADDR_VAR 0 41
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: LD_INT 1
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: LD_INT 1
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 1
33701: NEG
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 1
33712: NEG
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PUSH
33726: LD_INT 2
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 1
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: LD_INT 0
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 2
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 2
33767: PUSH
33768: LD_INT 2
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: LD_INT 2
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: NEG
33788: PUSH
33789: LD_INT 1
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 2
33798: NEG
33799: PUSH
33800: LD_INT 0
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 2
33809: NEG
33810: PUSH
33811: LD_INT 1
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: NEG
33822: PUSH
33823: LD_INT 2
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 2
33833: NEG
33834: PUSH
33835: LD_INT 3
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 2
33845: PUSH
33846: LD_INT 1
33848: NEG
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 3
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 3
33866: PUSH
33867: LD_INT 1
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 3
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 3
33886: PUSH
33887: LD_INT 3
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: LD_INT 2
33896: PUSH
33897: LD_INT 3
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 2
33906: NEG
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 3
33917: NEG
33918: PUSH
33919: LD_INT 0
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 3
33928: NEG
33929: PUSH
33930: LD_INT 1
33932: NEG
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 3
33940: NEG
33941: PUSH
33942: LD_INT 2
33944: NEG
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 3
33952: NEG
33953: PUSH
33954: LD_INT 3
33956: NEG
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33993: LD_ADDR_VAR 0 42
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: LD_INT 1
34013: NEG
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 1
34021: PUSH
34022: LD_INT 0
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: LD_INT 1
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 1
34051: NEG
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 1
34062: NEG
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: NEG
34075: PUSH
34076: LD_INT 2
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: LD_INT 2
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: LD_INT 1
34100: NEG
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 2
34108: PUSH
34109: LD_INT 1
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: LD_INT 2
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: NEG
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: NEG
34172: PUSH
34173: LD_INT 2
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 2
34183: NEG
34184: PUSH
34185: LD_INT 3
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 1
34195: NEG
34196: PUSH
34197: LD_INT 3
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 0
34207: PUSH
34208: LD_INT 3
34210: NEG
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: LD_INT 2
34221: NEG
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: LD_INT 3
34229: PUSH
34230: LD_INT 2
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: LD_INT 3
34239: PUSH
34240: LD_INT 3
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 3
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: LD_INT 3
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 0
34269: PUSH
34270: LD_INT 3
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: NEG
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 3
34290: NEG
34291: PUSH
34292: LD_INT 2
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 3
34302: NEG
34303: PUSH
34304: LD_INT 3
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: LIST
34331: LIST
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34343: LD_ADDR_VAR 0 43
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: LD_INT 0
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 0
34360: PUSH
34361: LD_INT 1
34363: NEG
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: PUSH
34382: LD_INT 1
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 1
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 1
34412: NEG
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: NEG
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: LD_INT 2
34439: NEG
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 1
34447: PUSH
34448: LD_INT 1
34450: NEG
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 2
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 1
34478: PUSH
34479: LD_INT 2
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 2
34509: NEG
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 2
34520: NEG
34521: PUSH
34522: LD_INT 1
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: LD_INT 3
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: LD_INT 3
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: LD_INT 2
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 2
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 3
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 3
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: LD_INT 3
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 3
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: NEG
34618: PUSH
34619: LD_INT 2
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 3
34639: NEG
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 3
34650: NEG
34651: PUSH
34652: LD_INT 1
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34691: LD_ADDR_VAR 0 44
34695: PUSH
34696: LD_INT 0
34698: PUSH
34699: LD_INT 0
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 1
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: LD_INT 1
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: NEG
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: LD_INT 1
34764: NEG
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: PUSH
34770: LD_INT 1
34772: NEG
34773: PUSH
34774: LD_INT 2
34776: NEG
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 2
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 2
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 2
34815: PUSH
34816: LD_INT 2
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 1
34825: PUSH
34826: LD_INT 2
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 1
34835: NEG
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 2
34857: NEG
34858: PUSH
34859: LD_INT 1
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 2
34869: NEG
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 2
34881: NEG
34882: PUSH
34883: LD_INT 3
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 2
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 3
34904: PUSH
34905: LD_INT 0
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 3
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 3
34924: PUSH
34925: LD_INT 2
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 3
34934: PUSH
34935: LD_INT 3
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 2
34944: PUSH
34945: LD_INT 3
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 2
34954: NEG
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 3
34965: NEG
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 3
34976: NEG
34977: PUSH
34978: LD_INT 1
34980: NEG
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 3
34988: NEG
34989: PUSH
34990: LD_INT 2
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 3
35000: NEG
35001: PUSH
35002: LD_INT 3
35004: NEG
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35041: LD_ADDR_VAR 0 45
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 1
35061: NEG
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: PUSH
35080: LD_INT 1
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 0
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 1
35099: NEG
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: LD_INT 1
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: LD_INT 2
35126: NEG
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: LD_INT 1
35148: NEG
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: LD_INT 1
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: LD_INT 2
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 1
35176: PUSH
35177: LD_INT 2
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 0
35186: PUSH
35187: LD_INT 2
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: LD_INT 1
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 2
35207: NEG
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 2
35219: NEG
35220: PUSH
35221: LD_INT 2
35223: NEG
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 2
35231: NEG
35232: PUSH
35233: LD_INT 3
35235: NEG
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 1
35243: NEG
35244: PUSH
35245: LD_INT 3
35247: NEG
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 0
35255: PUSH
35256: LD_INT 3
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: LD_INT 2
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 3
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 3
35287: PUSH
35288: LD_INT 3
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: LD_INT 3
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: LD_INT 3
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 0
35317: PUSH
35318: LD_INT 3
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: LD_INT 2
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 3
35338: NEG
35339: PUSH
35340: LD_INT 2
35342: NEG
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 3
35350: NEG
35351: PUSH
35352: LD_INT 3
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35391: LD_ADDR_VAR 0 46
35395: PUSH
35396: LD_INT 0
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: LD_INT 1
35411: NEG
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 1
35449: NEG
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: LD_INT 1
35464: NEG
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: LD_INT 2
35476: NEG
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 0
35484: PUSH
35485: LD_INT 2
35487: NEG
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: LD_INT 1
35498: NEG
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 2
35506: PUSH
35507: LD_INT 0
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 1
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 1
35546: NEG
35547: PUSH
35548: LD_INT 1
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: NEG
35558: PUSH
35559: LD_INT 0
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 2
35568: NEG
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 1
35580: NEG
35581: PUSH
35582: LD_INT 3
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: LD_INT 3
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 2
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 3
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 3
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: LD_INT 3
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: LD_INT 3
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 2
35676: NEG
35677: PUSH
35678: LD_INT 1
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 3
35687: NEG
35688: PUSH
35689: LD_INT 0
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 3
35698: NEG
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35739: LD_ADDR_VAR 0 47
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: LD_INT 0
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 1
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 1
35797: NEG
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 1
35808: NEG
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: LD_INT 2
35824: NEG
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: LD_INT 2
35835: NEG
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 2
35854: NEG
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 2
35866: NEG
35867: PUSH
35868: LD_INT 2
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35890: LD_ADDR_VAR 0 48
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: LD_INT 1
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 1
35948: NEG
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 1
35959: NEG
35960: PUSH
35961: LD_INT 1
35963: NEG
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 1
35971: NEG
35972: PUSH
35973: LD_INT 2
35975: NEG
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 2
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 1
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 2
36015: PUSH
36016: LD_INT 1
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
36037: LD_ADDR_VAR 0 49
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 1
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 1
36106: NEG
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 2
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 2
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 1
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36181: LD_ADDR_VAR 0 50
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: NEG
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 2
36262: PUSH
36263: LD_INT 1
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 2
36272: PUSH
36273: LD_INT 2
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36325: LD_ADDR_VAR 0 51
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: LD_INT 1
36345: NEG
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: LD_INT 0
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: LD_INT 1
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 1
36383: NEG
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: LD_INT 1
36398: NEG
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 1
36406: PUSH
36407: LD_INT 2
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 0
36416: PUSH
36417: LD_INT 2
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: LD_INT 1
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 2
36437: NEG
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 2
36448: NEG
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36472: LD_ADDR_VAR 0 52
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 1
36492: NEG
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: LD_INT 0
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 1
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: NEG
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: LD_INT 1
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: LD_INT 2
36557: NEG
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 1
36565: NEG
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 2
36576: NEG
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 2
36587: NEG
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 2
36599: NEG
36600: PUSH
36601: LD_INT 2
36603: NEG
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36623: LD_ADDR_VAR 0 53
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: NEG
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: LD_INT 2
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: PUSH
36728: LD_INT 1
36730: NEG
36731: PUSH
36732: EMPTY
36733: LIST
36734: LIST
36735: PUSH
36736: LD_INT 2
36738: PUSH
36739: LD_INT 0
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: LD_INT 1
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: LD_INT 2
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: LD_INT 1
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 2
36799: NEG
36800: PUSH
36801: LD_INT 0
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 2
36810: NEG
36811: PUSH
36812: LD_INT 1
36814: NEG
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 2
36822: NEG
36823: PUSH
36824: LD_INT 2
36826: NEG
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36853: LD_ADDR_VAR 0 54
36857: PUSH
36858: LD_INT 0
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: LD_INT 1
36873: NEG
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: LD_INT 1
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: LD_INT 1
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: LD_INT 1
36926: NEG
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: NEG
36935: PUSH
36936: LD_INT 2
36938: NEG
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: LD_INT 2
36949: NEG
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: PUSH
36969: LD_INT 0
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 2
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 2
36988: PUSH
36989: LD_INT 2
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: LD_INT 2
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: LD_INT 2
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: LD_INT 1
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 2
37029: NEG
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 2
37040: NEG
37041: PUSH
37042: LD_INT 1
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 2
37052: NEG
37053: PUSH
37054: LD_INT 2
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37083: LD_ADDR_VAR 0 55
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: LD_INT 1
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 1
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: NEG
37153: PUSH
37154: LD_INT 1
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: NEG
37165: PUSH
37166: LD_INT 2
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: LD_INT 2
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: PUSH
37188: LD_INT 1
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 2
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 0
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: LD_INT 1
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 2
37259: NEG
37260: PUSH
37261: LD_INT 0
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: LD_INT 1
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: NEG
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37313: LD_ADDR_VAR 0 56
37317: PUSH
37318: LD_INT 0
37320: PUSH
37321: LD_INT 0
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: LD_INT 1
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 0
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 1
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: LD_INT 2
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: LD_INT 2
37409: NEG
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: LD_INT 1
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: LD_INT 0
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: PUSH
37436: LD_INT 2
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: LD_INT 2
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: LD_INT 2
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 2
37489: NEG
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 2
37500: NEG
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: NEG
37513: PUSH
37514: LD_INT 2
37516: NEG
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37543: LD_ADDR_VAR 0 57
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: LD_INT 1
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 1
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: LD_INT 1
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 1
37601: NEG
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: NEG
37613: PUSH
37614: LD_INT 1
37616: NEG
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 1
37624: NEG
37625: PUSH
37626: LD_INT 2
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 2
37639: NEG
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 2
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 2
37678: PUSH
37679: LD_INT 2
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: LD_INT 2
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 2
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: LD_INT 1
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 2
37719: NEG
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 2
37730: NEG
37731: PUSH
37732: LD_INT 1
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37773: LD_ADDR_VAR 0 58
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: LD_INT 0
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 1
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: LD_INT 0
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 1
37842: NEG
37843: PUSH
37844: LD_INT 1
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: LD_INT 2
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: LD_INT 2
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 1
37877: PUSH
37878: LD_INT 1
37880: NEG
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 2
37898: PUSH
37899: LD_INT 1
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 2
37908: PUSH
37909: LD_INT 2
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: LD_INT 2
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 2
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 2
37949: NEG
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 2
37960: NEG
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: NEG
37973: PUSH
37974: LD_INT 2
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38003: LD_ADDR_VAR 0 59
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: LD_INT 1
38023: NEG
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: LD_INT 1
38076: NEG
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38091: LD_ADDR_VAR 0 60
38095: PUSH
38096: LD_INT 0
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 1
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: LD_INT 1
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38179: LD_ADDR_VAR 0 61
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38267: LD_ADDR_VAR 0 62
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 1
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38355: LD_ADDR_VAR 0 63
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: LD_INT 0
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: LD_INT 1
38375: NEG
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 1
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 1
38413: NEG
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 1
38424: NEG
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38443: LD_ADDR_VAR 0 64
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: LD_INT 0
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: LD_INT 1
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 1
38481: PUSH
38482: LD_INT 1
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: ST_TO_ADDR
// end ; 1 :
38531: GO 44428
38533: LD_INT 1
38535: DOUBLE
38536: EQUAL
38537: IFTRUE 38541
38539: GO 41164
38541: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38542: LD_ADDR_VAR 0 11
38546: PUSH
38547: LD_INT 1
38549: NEG
38550: PUSH
38551: LD_INT 3
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: LD_INT 3
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: LIST
38585: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38586: LD_ADDR_VAR 0 12
38590: PUSH
38591: LD_INT 2
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 3
38604: PUSH
38605: LD_INT 0
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 3
38614: PUSH
38615: LD_INT 1
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: LIST
38626: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38627: LD_ADDR_VAR 0 13
38631: PUSH
38632: LD_INT 3
38634: PUSH
38635: LD_INT 2
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 2
38654: PUSH
38655: LD_INT 3
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38667: LD_ADDR_VAR 0 14
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: LD_INT 3
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 0
38684: PUSH
38685: LD_INT 3
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: LD_INT 2
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38708: LD_ADDR_VAR 0 15
38712: PUSH
38713: LD_INT 2
38715: NEG
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 3
38726: NEG
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 3
38737: NEG
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: LIST
38751: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38752: LD_ADDR_VAR 0 16
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: LD_INT 3
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 3
38771: NEG
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 3
38783: NEG
38784: PUSH
38785: LD_INT 3
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: LIST
38797: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38798: LD_ADDR_VAR 0 17
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: LD_INT 3
38809: NEG
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 3
38820: NEG
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: LD_INT 2
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: LIST
38841: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38842: LD_ADDR_VAR 0 18
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: LIST
38882: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38883: LD_ADDR_VAR 0 19
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: LD_INT 2
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 3
38900: PUSH
38901: LD_INT 3
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 2
38910: PUSH
38911: LD_INT 3
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38923: LD_ADDR_VAR 0 20
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: LD_INT 3
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: LD_INT 3
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: NEG
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38964: LD_ADDR_VAR 0 21
38968: PUSH
38969: LD_INT 2
38971: NEG
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 3
38982: NEG
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 3
38993: NEG
38994: PUSH
38995: LD_INT 1
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39008: LD_ADDR_VAR 0 22
39012: PUSH
39013: LD_INT 2
39015: NEG
39016: PUSH
39017: LD_INT 3
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 3
39027: NEG
39028: PUSH
39029: LD_INT 2
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 3
39039: NEG
39040: PUSH
39041: LD_INT 3
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: LIST
39053: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39054: LD_ADDR_VAR 0 23
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 3
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 4
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: LD_INT 3
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39098: LD_ADDR_VAR 0 24
39102: PUSH
39103: LD_INT 3
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 3
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 4
39126: PUSH
39127: LD_INT 1
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: LIST
39138: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39139: LD_ADDR_VAR 0 25
39143: PUSH
39144: LD_INT 3
39146: PUSH
39147: LD_INT 3
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 4
39156: PUSH
39157: LD_INT 3
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 3
39166: PUSH
39167: LD_INT 4
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: LIST
39178: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39179: LD_ADDR_VAR 0 26
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 3
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: LD_INT 4
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: LD_INT 3
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: LIST
39219: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39220: LD_ADDR_VAR 0 27
39224: PUSH
39225: LD_INT 3
39227: NEG
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 3
39238: NEG
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 4
39249: NEG
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: LIST
39263: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39264: LD_ADDR_VAR 0 28
39268: PUSH
39269: LD_INT 3
39271: NEG
39272: PUSH
39273: LD_INT 3
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 3
39283: NEG
39284: PUSH
39285: LD_INT 4
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 4
39295: NEG
39296: PUSH
39297: LD_INT 3
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: LIST
39309: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39310: LD_ADDR_VAR 0 29
39314: PUSH
39315: LD_INT 1
39317: NEG
39318: PUSH
39319: LD_INT 3
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: LD_INT 3
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 4
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 4
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 3
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: LD_INT 5
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 5
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: LD_INT 4
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: LD_INT 6
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: LD_INT 6
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: LD_INT 5
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39465: LD_ADDR_VAR 0 30
39469: PUSH
39470: LD_INT 2
39472: PUSH
39473: LD_INT 1
39475: NEG
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 3
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 3
39493: PUSH
39494: LD_INT 1
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 3
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 4
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 4
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 4
39534: PUSH
39535: LD_INT 1
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 5
39545: PUSH
39546: LD_INT 0
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 5
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 5
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 6
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 6
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39608: LD_ADDR_VAR 0 31
39612: PUSH
39613: LD_INT 3
39615: PUSH
39616: LD_INT 2
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 3
39625: PUSH
39626: LD_INT 3
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 2
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 4
39645: PUSH
39646: LD_INT 3
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 4
39655: PUSH
39656: LD_INT 4
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 3
39665: PUSH
39666: LD_INT 4
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 5
39675: PUSH
39676: LD_INT 4
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 5
39685: PUSH
39686: LD_INT 5
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 4
39695: PUSH
39696: LD_INT 5
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 6
39705: PUSH
39706: LD_INT 5
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 6
39715: PUSH
39716: LD_INT 6
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 5
39725: PUSH
39726: LD_INT 6
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39747: LD_ADDR_VAR 0 32
39751: PUSH
39752: LD_INT 1
39754: PUSH
39755: LD_INT 3
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: LD_INT 3
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: LD_INT 2
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: LD_INT 4
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: LD_INT 4
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: LD_INT 3
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 5
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: LD_INT 5
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 4
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 1
39847: PUSH
39848: LD_INT 6
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: LD_INT 6
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: LD_INT 5
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39890: LD_ADDR_VAR 0 33
39894: PUSH
39895: LD_INT 2
39897: NEG
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 3
39908: NEG
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 3
39919: NEG
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 3
39931: NEG
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 4
39942: NEG
39943: PUSH
39944: LD_INT 0
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 4
39953: NEG
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 4
39965: NEG
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 5
39976: NEG
39977: PUSH
39978: LD_INT 0
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 5
39987: NEG
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 5
39999: NEG
40000: PUSH
40001: LD_INT 1
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 6
40010: NEG
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 6
40021: NEG
40022: PUSH
40023: LD_INT 1
40025: NEG
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40045: LD_ADDR_VAR 0 34
40049: PUSH
40050: LD_INT 2
40052: NEG
40053: PUSH
40054: LD_INT 3
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 3
40064: NEG
40065: PUSH
40066: LD_INT 2
40068: NEG
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 3
40076: NEG
40077: PUSH
40078: LD_INT 3
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 3
40088: NEG
40089: PUSH
40090: LD_INT 4
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 4
40100: NEG
40101: PUSH
40102: LD_INT 3
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 4
40112: NEG
40113: PUSH
40114: LD_INT 4
40116: NEG
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 4
40124: NEG
40125: PUSH
40126: LD_INT 5
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 5
40136: NEG
40137: PUSH
40138: LD_INT 4
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 5
40148: NEG
40149: PUSH
40150: LD_INT 5
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 5
40160: NEG
40161: PUSH
40162: LD_INT 6
40164: NEG
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 6
40172: NEG
40173: PUSH
40174: LD_INT 5
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 6
40184: NEG
40185: PUSH
40186: LD_INT 6
40188: NEG
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40208: LD_ADDR_VAR 0 41
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: LD_INT 3
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: LD_INT 2
40241: NEG
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: LIST
40251: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40252: LD_ADDR_VAR 0 42
40256: PUSH
40257: LD_INT 2
40259: PUSH
40260: LD_INT 0
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 2
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 3
40280: PUSH
40281: LD_INT 1
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: LIST
40292: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40293: LD_ADDR_VAR 0 43
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 3
40310: PUSH
40311: LD_INT 2
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 2
40320: PUSH
40321: LD_INT 3
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40333: LD_ADDR_VAR 0 44
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: LD_INT 2
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 1
40350: PUSH
40351: LD_INT 3
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: NEG
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40374: LD_ADDR_VAR 0 45
40378: PUSH
40379: LD_INT 2
40381: NEG
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 3
40403: NEG
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40418: LD_ADDR_VAR 0 46
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: LD_INT 2
40429: NEG
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: LD_INT 3
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 3
40449: NEG
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: LIST
40463: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40464: LD_ADDR_VAR 0 47
40468: PUSH
40469: LD_INT 2
40471: NEG
40472: PUSH
40473: LD_INT 3
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 3
40487: NEG
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40497: LD_ADDR_VAR 0 48
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: LD_INT 2
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: LD_INT 1
40518: NEG
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40528: LD_ADDR_VAR 0 49
40532: PUSH
40533: LD_INT 3
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 3
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40557: LD_ADDR_VAR 0 50
40561: PUSH
40562: LD_INT 2
40564: PUSH
40565: LD_INT 3
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: LD_INT 3
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40586: LD_ADDR_VAR 0 51
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: LD_INT 2
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40617: LD_ADDR_VAR 0 52
40621: PUSH
40622: LD_INT 3
40624: NEG
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 3
40636: NEG
40637: PUSH
40638: LD_INT 2
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40650: LD_ADDR_VAR 0 53
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: LD_INT 3
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 3
40672: NEG
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: LIST
40693: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40694: LD_ADDR_VAR 0 54
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 3
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 3
40722: PUSH
40723: LD_INT 1
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: LIST
40734: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40735: LD_ADDR_VAR 0 55
40739: PUSH
40740: LD_INT 3
40742: PUSH
40743: LD_INT 2
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 3
40752: PUSH
40753: LD_INT 3
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 2
40762: PUSH
40763: LD_INT 3
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: LIST
40774: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40775: LD_ADDR_VAR 0 56
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 3
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 3
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: LD_INT 2
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: LIST
40815: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40816: LD_ADDR_VAR 0 57
40820: PUSH
40821: LD_INT 2
40823: NEG
40824: PUSH
40825: LD_INT 1
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 3
40834: NEG
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 3
40845: NEG
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40860: LD_ADDR_VAR 0 58
40864: PUSH
40865: LD_INT 2
40867: NEG
40868: PUSH
40869: LD_INT 3
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 3
40879: NEG
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 3
40891: NEG
40892: PUSH
40893: LD_INT 3
40895: NEG
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40906: LD_ADDR_VAR 0 59
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: LIST
40949: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40950: LD_ADDR_VAR 0 60
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 2
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 2
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: LIST
40990: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40991: LD_ADDR_VAR 0 61
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: LD_INT 2
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: LD_INT 2
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: LIST
41030: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41031: LD_ADDR_VAR 0 62
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: LD_INT 2
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: LIST
41071: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41072: LD_ADDR_VAR 0 63
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 2
41101: NEG
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: LIST
41115: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41116: LD_ADDR_VAR 0 64
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: NEG
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: LD_INT 2
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: LIST
41161: ST_TO_ADDR
// end ; 2 :
41162: GO 44428
41164: LD_INT 2
41166: DOUBLE
41167: EQUAL
41168: IFTRUE 41172
41170: GO 44427
41172: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41173: LD_ADDR_VAR 0 29
41177: PUSH
41178: LD_INT 4
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 4
41190: PUSH
41191: LD_INT 1
41193: NEG
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 5
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 5
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 4
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 3
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 3
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 3
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 5
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 3
41273: PUSH
41274: LD_INT 3
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 3
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 4
41293: PUSH
41294: LD_INT 3
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 4
41303: PUSH
41304: LD_INT 4
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 3
41313: PUSH
41314: LD_INT 4
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: LD_INT 3
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 4
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: LD_INT 4
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 4
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 1
41383: PUSH
41384: LD_INT 4
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: LD_INT 5
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: LD_INT 5
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: NEG
41414: PUSH
41415: LD_INT 4
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: NEG
41425: PUSH
41426: LD_INT 3
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: LD_INT 5
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: NEG
41446: PUSH
41447: LD_INT 3
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 3
41456: NEG
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 3
41467: NEG
41468: PUSH
41469: LD_INT 1
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 2
41479: NEG
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: NEG
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 3
41501: NEG
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 4
41512: NEG
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 4
41523: NEG
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 4
41535: NEG
41536: PUSH
41537: LD_INT 2
41539: NEG
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: LD_INT 2
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 4
41558: NEG
41559: PUSH
41560: LD_INT 4
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 4
41570: NEG
41571: PUSH
41572: LD_INT 5
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 3
41582: NEG
41583: PUSH
41584: LD_INT 4
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 3
41594: NEG
41595: PUSH
41596: LD_INT 3
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 4
41606: NEG
41607: PUSH
41608: LD_INT 3
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 5
41618: NEG
41619: PUSH
41620: LD_INT 4
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 5
41630: NEG
41631: PUSH
41632: LD_INT 5
41634: NEG
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 3
41642: NEG
41643: PUSH
41644: LD_INT 5
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 5
41654: NEG
41655: PUSH
41656: LD_INT 3
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41711: LD_ADDR_VAR 0 30
41715: PUSH
41716: LD_INT 4
41718: PUSH
41719: LD_INT 4
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 4
41728: PUSH
41729: LD_INT 3
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 5
41738: PUSH
41739: LD_INT 4
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 5
41748: PUSH
41749: LD_INT 5
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 4
41758: PUSH
41759: LD_INT 5
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 3
41768: PUSH
41769: LD_INT 4
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 3
41778: PUSH
41779: LD_INT 3
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 5
41788: PUSH
41789: LD_INT 3
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 3
41798: PUSH
41799: LD_INT 5
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 3
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 3
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: LD_INT 4
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: LD_INT 4
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: NEG
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 1
41869: NEG
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 4
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 4
41901: NEG
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 4
41912: NEG
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 3
41924: NEG
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 3
41935: NEG
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 4
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 5
41957: NEG
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 5
41968: NEG
41969: PUSH
41970: LD_INT 1
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 5
41980: NEG
41981: PUSH
41982: LD_INT 2
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 3
41992: NEG
41993: PUSH
41994: LD_INT 2
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 3
42003: NEG
42004: PUSH
42005: LD_INT 3
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 3
42015: NEG
42016: PUSH
42017: LD_INT 4
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 2
42027: NEG
42028: PUSH
42029: LD_INT 3
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 2
42039: NEG
42040: PUSH
42041: LD_INT 2
42043: NEG
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 3
42051: NEG
42052: PUSH
42053: LD_INT 2
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 4
42063: NEG
42064: PUSH
42065: LD_INT 3
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 4
42075: NEG
42076: PUSH
42077: LD_INT 4
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 2
42087: NEG
42088: PUSH
42089: LD_INT 4
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 4
42099: NEG
42100: PUSH
42101: LD_INT 2
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 4
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: LD_INT 5
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: LD_INT 4
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: LD_INT 3
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 3
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: LD_INT 4
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: LD_INT 5
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: PUSH
42191: LD_INT 3
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: LD_INT 5
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42258: LD_ADDR_VAR 0 31
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 4
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 3
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: PUSH
42286: LD_INT 4
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 5
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: LD_INT 5
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: LD_INT 4
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: LD_INT 3
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 2
42337: PUSH
42338: LD_INT 5
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: LD_INT 3
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 3
42358: NEG
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 3
42369: NEG
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: NEG
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 1
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: PUSH
42401: LD_INT 3
42403: NEG
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 4
42414: NEG
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 4
42425: NEG
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 4
42437: NEG
42438: PUSH
42439: LD_INT 2
42441: NEG
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 2
42449: NEG
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 4
42460: NEG
42461: PUSH
42462: LD_INT 4
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 4
42472: NEG
42473: PUSH
42474: LD_INT 5
42476: NEG
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 3
42484: NEG
42485: PUSH
42486: LD_INT 4
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 3
42496: NEG
42497: PUSH
42498: LD_INT 3
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 4
42508: NEG
42509: PUSH
42510: LD_INT 3
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 5
42520: NEG
42521: PUSH
42522: LD_INT 4
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 5
42532: NEG
42533: PUSH
42534: LD_INT 5
42536: NEG
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 3
42544: NEG
42545: PUSH
42546: LD_INT 5
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 5
42556: NEG
42557: PUSH
42558: LD_INT 3
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 3
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 4
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 3
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 3
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 4
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 2
42650: NEG
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 2
42658: NEG
42659: PUSH
42660: LD_INT 4
42662: NEG
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 4
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 4
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 5
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 5
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 4
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 3
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: LD_INT 2
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 5
42753: PUSH
42754: LD_INT 2
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42808: LD_ADDR_VAR 0 32
42812: PUSH
42813: LD_INT 4
42815: NEG
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 4
42826: NEG
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 3
42838: NEG
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 3
42849: NEG
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 4
42860: NEG
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 5
42871: NEG
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 5
42882: NEG
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 5
42894: NEG
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 3
42906: NEG
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 3
42917: NEG
42918: PUSH
42919: LD_INT 3
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 3
42929: NEG
42930: PUSH
42931: LD_INT 4
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: NEG
42942: PUSH
42943: LD_INT 3
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 2
42953: NEG
42954: PUSH
42955: LD_INT 2
42957: NEG
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 3
42965: NEG
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 4
42977: NEG
42978: PUSH
42979: LD_INT 3
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 4
42989: NEG
42990: PUSH
42991: LD_INT 4
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: LD_INT 4
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 4
43013: NEG
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: LD_INT 4
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: LD_INT 5
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: PUSH
43048: LD_INT 4
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: LD_INT 3
43061: NEG
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 3
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: LD_INT 4
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: LD_INT 5
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: LD_INT 3
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: NEG
43116: PUSH
43117: LD_INT 5
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 3
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 3
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 4
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 4
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: PUSH
43200: LD_INT 2
43202: NEG
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 4
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 4
43220: PUSH
43221: LD_INT 4
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 4
43230: PUSH
43231: LD_INT 3
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 5
43240: PUSH
43241: LD_INT 4
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 5
43250: PUSH
43251: LD_INT 5
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 4
43260: PUSH
43261: LD_INT 5
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 3
43270: PUSH
43271: LD_INT 4
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 3
43280: PUSH
43281: LD_INT 3
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 5
43290: PUSH
43291: LD_INT 3
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 3
43300: PUSH
43301: LD_INT 5
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: LIST
43353: LIST
43354: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43355: LD_ADDR_VAR 0 33
43359: PUSH
43360: LD_INT 4
43362: NEG
43363: PUSH
43364: LD_INT 4
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 4
43374: NEG
43375: PUSH
43376: LD_INT 5
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 3
43386: NEG
43387: PUSH
43388: LD_INT 4
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 3
43398: NEG
43399: PUSH
43400: LD_INT 3
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 4
43410: NEG
43411: PUSH
43412: LD_INT 3
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 5
43422: NEG
43423: PUSH
43424: LD_INT 4
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 5
43434: NEG
43435: PUSH
43436: LD_INT 5
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 3
43446: NEG
43447: PUSH
43448: LD_INT 5
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 5
43458: NEG
43459: PUSH
43460: LD_INT 3
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 3
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: LD_INT 4
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 3
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 1
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 0
43514: PUSH
43515: LD_INT 2
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: NEG
43526: PUSH
43527: LD_INT 3
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: LD_INT 4
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: LD_INT 2
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 2
43560: NEG
43561: PUSH
43562: LD_INT 4
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 4
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 4
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 5
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 5
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 4
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 3
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 3
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 3
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 5
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 3
43665: PUSH
43666: LD_INT 3
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 3
43675: PUSH
43676: LD_INT 2
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 4
43685: PUSH
43686: LD_INT 3
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 4
43695: PUSH
43696: LD_INT 4
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 3
43705: PUSH
43706: LD_INT 4
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 3
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 4
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 4
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 4
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 3
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 4
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 5
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 5
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: NEG
43806: PUSH
43807: LD_INT 4
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: LD_INT 5
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 2
43837: NEG
43838: PUSH
43839: LD_INT 3
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43893: LD_ADDR_VAR 0 34
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 4
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: LD_INT 5
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: LD_INT 4
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 3
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 3
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: LD_INT 4
43959: NEG
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 1
43967: NEG
43968: PUSH
43969: LD_INT 5
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 3
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: NEG
43991: PUSH
43992: LD_INT 5
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 3
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 3
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 4
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 4
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 3
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 2
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 4
44085: PUSH
44086: LD_INT 2
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: LD_INT 4
44095: PUSH
44096: LD_INT 4
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 4
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 5
44115: PUSH
44116: LD_INT 4
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 5
44125: PUSH
44126: LD_INT 5
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 4
44135: PUSH
44136: LD_INT 5
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 3
44145: PUSH
44146: LD_INT 4
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 3
44155: PUSH
44156: LD_INT 3
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 5
44165: PUSH
44166: LD_INT 3
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 3
44175: PUSH
44176: LD_INT 5
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: LD_INT 3
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 2
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 3
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 4
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: LD_INT 4
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 3
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: NEG
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: PUSH
44258: LD_INT 4
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 4
44278: NEG
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 4
44289: NEG
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 3
44301: NEG
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 3
44312: NEG
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 4
44323: NEG
44324: PUSH
44325: LD_INT 1
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 5
44334: NEG
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 5
44345: NEG
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 5
44357: NEG
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 3
44369: NEG
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// end ; end ;
44425: GO 44428
44427: POP
// case btype of b_depot , b_warehouse :
44428: LD_VAR 0 1
44432: PUSH
44433: LD_INT 0
44435: DOUBLE
44436: EQUAL
44437: IFTRUE 44447
44439: LD_INT 1
44441: DOUBLE
44442: EQUAL
44443: IFTRUE 44447
44445: GO 44648
44447: POP
// case nation of nation_american :
44448: LD_VAR 0 5
44452: PUSH
44453: LD_INT 1
44455: DOUBLE
44456: EQUAL
44457: IFTRUE 44461
44459: GO 44517
44461: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
44462: LD_ADDR_VAR 0 9
44466: PUSH
44467: LD_VAR 0 11
44471: PUSH
44472: LD_VAR 0 12
44476: PUSH
44477: LD_VAR 0 13
44481: PUSH
44482: LD_VAR 0 14
44486: PUSH
44487: LD_VAR 0 15
44491: PUSH
44492: LD_VAR 0 16
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: PUSH
44505: LD_VAR 0 4
44509: PUSH
44510: LD_INT 1
44512: PLUS
44513: ARRAY
44514: ST_TO_ADDR
44515: GO 44646
44517: LD_INT 2
44519: DOUBLE
44520: EQUAL
44521: IFTRUE 44525
44523: GO 44581
44525: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
44526: LD_ADDR_VAR 0 9
44530: PUSH
44531: LD_VAR 0 17
44535: PUSH
44536: LD_VAR 0 18
44540: PUSH
44541: LD_VAR 0 19
44545: PUSH
44546: LD_VAR 0 20
44550: PUSH
44551: LD_VAR 0 21
44555: PUSH
44556: LD_VAR 0 22
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: PUSH
44569: LD_VAR 0 4
44573: PUSH
44574: LD_INT 1
44576: PLUS
44577: ARRAY
44578: ST_TO_ADDR
44579: GO 44646
44581: LD_INT 3
44583: DOUBLE
44584: EQUAL
44585: IFTRUE 44589
44587: GO 44645
44589: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44590: LD_ADDR_VAR 0 9
44594: PUSH
44595: LD_VAR 0 23
44599: PUSH
44600: LD_VAR 0 24
44604: PUSH
44605: LD_VAR 0 25
44609: PUSH
44610: LD_VAR 0 26
44614: PUSH
44615: LD_VAR 0 27
44619: PUSH
44620: LD_VAR 0 28
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: PUSH
44633: LD_VAR 0 4
44637: PUSH
44638: LD_INT 1
44640: PLUS
44641: ARRAY
44642: ST_TO_ADDR
44643: GO 44646
44645: POP
44646: GO 45201
44648: LD_INT 2
44650: DOUBLE
44651: EQUAL
44652: IFTRUE 44662
44654: LD_INT 3
44656: DOUBLE
44657: EQUAL
44658: IFTRUE 44662
44660: GO 44718
44662: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44663: LD_ADDR_VAR 0 9
44667: PUSH
44668: LD_VAR 0 29
44672: PUSH
44673: LD_VAR 0 30
44677: PUSH
44678: LD_VAR 0 31
44682: PUSH
44683: LD_VAR 0 32
44687: PUSH
44688: LD_VAR 0 33
44692: PUSH
44693: LD_VAR 0 34
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: PUSH
44706: LD_VAR 0 4
44710: PUSH
44711: LD_INT 1
44713: PLUS
44714: ARRAY
44715: ST_TO_ADDR
44716: GO 45201
44718: LD_INT 16
44720: DOUBLE
44721: EQUAL
44722: IFTRUE 44780
44724: LD_INT 17
44726: DOUBLE
44727: EQUAL
44728: IFTRUE 44780
44730: LD_INT 18
44732: DOUBLE
44733: EQUAL
44734: IFTRUE 44780
44736: LD_INT 19
44738: DOUBLE
44739: EQUAL
44740: IFTRUE 44780
44742: LD_INT 22
44744: DOUBLE
44745: EQUAL
44746: IFTRUE 44780
44748: LD_INT 20
44750: DOUBLE
44751: EQUAL
44752: IFTRUE 44780
44754: LD_INT 21
44756: DOUBLE
44757: EQUAL
44758: IFTRUE 44780
44760: LD_INT 23
44762: DOUBLE
44763: EQUAL
44764: IFTRUE 44780
44766: LD_INT 24
44768: DOUBLE
44769: EQUAL
44770: IFTRUE 44780
44772: LD_INT 25
44774: DOUBLE
44775: EQUAL
44776: IFTRUE 44780
44778: GO 44836
44780: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44781: LD_ADDR_VAR 0 9
44785: PUSH
44786: LD_VAR 0 35
44790: PUSH
44791: LD_VAR 0 36
44795: PUSH
44796: LD_VAR 0 37
44800: PUSH
44801: LD_VAR 0 38
44805: PUSH
44806: LD_VAR 0 39
44810: PUSH
44811: LD_VAR 0 40
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: PUSH
44824: LD_VAR 0 4
44828: PUSH
44829: LD_INT 1
44831: PLUS
44832: ARRAY
44833: ST_TO_ADDR
44834: GO 45201
44836: LD_INT 6
44838: DOUBLE
44839: EQUAL
44840: IFTRUE 44892
44842: LD_INT 7
44844: DOUBLE
44845: EQUAL
44846: IFTRUE 44892
44848: LD_INT 8
44850: DOUBLE
44851: EQUAL
44852: IFTRUE 44892
44854: LD_INT 13
44856: DOUBLE
44857: EQUAL
44858: IFTRUE 44892
44860: LD_INT 12
44862: DOUBLE
44863: EQUAL
44864: IFTRUE 44892
44866: LD_INT 15
44868: DOUBLE
44869: EQUAL
44870: IFTRUE 44892
44872: LD_INT 11
44874: DOUBLE
44875: EQUAL
44876: IFTRUE 44892
44878: LD_INT 14
44880: DOUBLE
44881: EQUAL
44882: IFTRUE 44892
44884: LD_INT 10
44886: DOUBLE
44887: EQUAL
44888: IFTRUE 44892
44890: GO 44948
44892: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44893: LD_ADDR_VAR 0 9
44897: PUSH
44898: LD_VAR 0 41
44902: PUSH
44903: LD_VAR 0 42
44907: PUSH
44908: LD_VAR 0 43
44912: PUSH
44913: LD_VAR 0 44
44917: PUSH
44918: LD_VAR 0 45
44922: PUSH
44923: LD_VAR 0 46
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: PUSH
44936: LD_VAR 0 4
44940: PUSH
44941: LD_INT 1
44943: PLUS
44944: ARRAY
44945: ST_TO_ADDR
44946: GO 45201
44948: LD_INT 36
44950: DOUBLE
44951: EQUAL
44952: IFTRUE 44956
44954: GO 45012
44956: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44957: LD_ADDR_VAR 0 9
44961: PUSH
44962: LD_VAR 0 47
44966: PUSH
44967: LD_VAR 0 48
44971: PUSH
44972: LD_VAR 0 49
44976: PUSH
44977: LD_VAR 0 50
44981: PUSH
44982: LD_VAR 0 51
44986: PUSH
44987: LD_VAR 0 52
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: PUSH
45000: LD_VAR 0 4
45004: PUSH
45005: LD_INT 1
45007: PLUS
45008: ARRAY
45009: ST_TO_ADDR
45010: GO 45201
45012: LD_INT 4
45014: DOUBLE
45015: EQUAL
45016: IFTRUE 45038
45018: LD_INT 5
45020: DOUBLE
45021: EQUAL
45022: IFTRUE 45038
45024: LD_INT 34
45026: DOUBLE
45027: EQUAL
45028: IFTRUE 45038
45030: LD_INT 37
45032: DOUBLE
45033: EQUAL
45034: IFTRUE 45038
45036: GO 45094
45038: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
45039: LD_ADDR_VAR 0 9
45043: PUSH
45044: LD_VAR 0 53
45048: PUSH
45049: LD_VAR 0 54
45053: PUSH
45054: LD_VAR 0 55
45058: PUSH
45059: LD_VAR 0 56
45063: PUSH
45064: LD_VAR 0 57
45068: PUSH
45069: LD_VAR 0 58
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: PUSH
45082: LD_VAR 0 4
45086: PUSH
45087: LD_INT 1
45089: PLUS
45090: ARRAY
45091: ST_TO_ADDR
45092: GO 45201
45094: LD_INT 31
45096: DOUBLE
45097: EQUAL
45098: IFTRUE 45144
45100: LD_INT 32
45102: DOUBLE
45103: EQUAL
45104: IFTRUE 45144
45106: LD_INT 33
45108: DOUBLE
45109: EQUAL
45110: IFTRUE 45144
45112: LD_INT 27
45114: DOUBLE
45115: EQUAL
45116: IFTRUE 45144
45118: LD_INT 26
45120: DOUBLE
45121: EQUAL
45122: IFTRUE 45144
45124: LD_INT 28
45126: DOUBLE
45127: EQUAL
45128: IFTRUE 45144
45130: LD_INT 29
45132: DOUBLE
45133: EQUAL
45134: IFTRUE 45144
45136: LD_INT 30
45138: DOUBLE
45139: EQUAL
45140: IFTRUE 45144
45142: GO 45200
45144: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45145: LD_ADDR_VAR 0 9
45149: PUSH
45150: LD_VAR 0 59
45154: PUSH
45155: LD_VAR 0 60
45159: PUSH
45160: LD_VAR 0 61
45164: PUSH
45165: LD_VAR 0 62
45169: PUSH
45170: LD_VAR 0 63
45174: PUSH
45175: LD_VAR 0 64
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: PUSH
45188: LD_VAR 0 4
45192: PUSH
45193: LD_INT 1
45195: PLUS
45196: ARRAY
45197: ST_TO_ADDR
45198: GO 45201
45200: POP
// temp_list2 = [ ] ;
45201: LD_ADDR_VAR 0 10
45205: PUSH
45206: EMPTY
45207: ST_TO_ADDR
// for i in temp_list do
45208: LD_ADDR_VAR 0 8
45212: PUSH
45213: LD_VAR 0 9
45217: PUSH
45218: FOR_IN
45219: IFFALSE 45271
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45221: LD_ADDR_VAR 0 10
45225: PUSH
45226: LD_VAR 0 10
45230: PUSH
45231: LD_VAR 0 8
45235: PUSH
45236: LD_INT 1
45238: ARRAY
45239: PUSH
45240: LD_VAR 0 2
45244: PLUS
45245: PUSH
45246: LD_VAR 0 8
45250: PUSH
45251: LD_INT 2
45253: ARRAY
45254: PUSH
45255: LD_VAR 0 3
45259: PLUS
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: EMPTY
45266: LIST
45267: ADD
45268: ST_TO_ADDR
45269: GO 45218
45271: POP
45272: POP
// result = temp_list2 ;
45273: LD_ADDR_VAR 0 7
45277: PUSH
45278: LD_VAR 0 10
45282: ST_TO_ADDR
// end ;
45283: LD_VAR 0 7
45287: RET
// export function EnemyInRange ( unit , dist ) ; begin
45288: LD_INT 0
45290: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45291: LD_ADDR_VAR 0 3
45295: PUSH
45296: LD_VAR 0 1
45300: PPUSH
45301: CALL_OW 255
45305: PPUSH
45306: LD_VAR 0 1
45310: PPUSH
45311: CALL_OW 250
45315: PPUSH
45316: LD_VAR 0 1
45320: PPUSH
45321: CALL_OW 251
45325: PPUSH
45326: LD_VAR 0 2
45330: PPUSH
45331: CALL 18684 0 4
45335: PUSH
45336: LD_INT 4
45338: ARRAY
45339: ST_TO_ADDR
// end ;
45340: LD_VAR 0 3
45344: RET
// export function PlayerSeeMe ( unit ) ; begin
45345: LD_INT 0
45347: PPUSH
// result := See ( your_side , unit ) ;
45348: LD_ADDR_VAR 0 2
45352: PUSH
45353: LD_OWVAR 2
45357: PPUSH
45358: LD_VAR 0 1
45362: PPUSH
45363: CALL_OW 292
45367: ST_TO_ADDR
// end ;
45368: LD_VAR 0 2
45372: RET
// export function ReverseDir ( unit ) ; begin
45373: LD_INT 0
45375: PPUSH
// if not unit then
45376: LD_VAR 0 1
45380: NOT
45381: IFFALSE 45385
// exit ;
45383: GO 45408
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45385: LD_ADDR_VAR 0 2
45389: PUSH
45390: LD_VAR 0 1
45394: PPUSH
45395: CALL_OW 254
45399: PUSH
45400: LD_INT 3
45402: PLUS
45403: PUSH
45404: LD_INT 6
45406: MOD
45407: ST_TO_ADDR
// end ;
45408: LD_VAR 0 2
45412: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45413: LD_INT 0
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
45419: PPUSH
// if not hexes then
45420: LD_VAR 0 2
45424: NOT
45425: IFFALSE 45429
// exit ;
45427: GO 45577
// dist := 9999 ;
45429: LD_ADDR_VAR 0 5
45433: PUSH
45434: LD_INT 9999
45436: ST_TO_ADDR
// for i = 1 to hexes do
45437: LD_ADDR_VAR 0 4
45441: PUSH
45442: DOUBLE
45443: LD_INT 1
45445: DEC
45446: ST_TO_ADDR
45447: LD_VAR 0 2
45451: PUSH
45452: FOR_TO
45453: IFFALSE 45565
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45455: LD_VAR 0 1
45459: PPUSH
45460: LD_VAR 0 2
45464: PUSH
45465: LD_VAR 0 4
45469: ARRAY
45470: PUSH
45471: LD_INT 1
45473: ARRAY
45474: PPUSH
45475: LD_VAR 0 2
45479: PUSH
45480: LD_VAR 0 4
45484: ARRAY
45485: PUSH
45486: LD_INT 2
45488: ARRAY
45489: PPUSH
45490: CALL_OW 297
45494: PUSH
45495: LD_VAR 0 5
45499: LESS
45500: IFFALSE 45563
// begin hex := hexes [ i ] ;
45502: LD_ADDR_VAR 0 7
45506: PUSH
45507: LD_VAR 0 2
45511: PUSH
45512: LD_VAR 0 4
45516: ARRAY
45517: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45518: LD_ADDR_VAR 0 5
45522: PUSH
45523: LD_VAR 0 1
45527: PPUSH
45528: LD_VAR 0 2
45532: PUSH
45533: LD_VAR 0 4
45537: ARRAY
45538: PUSH
45539: LD_INT 1
45541: ARRAY
45542: PPUSH
45543: LD_VAR 0 2
45547: PUSH
45548: LD_VAR 0 4
45552: ARRAY
45553: PUSH
45554: LD_INT 2
45556: ARRAY
45557: PPUSH
45558: CALL_OW 297
45562: ST_TO_ADDR
// end ; end ;
45563: GO 45452
45565: POP
45566: POP
// result := hex ;
45567: LD_ADDR_VAR 0 3
45571: PUSH
45572: LD_VAR 0 7
45576: ST_TO_ADDR
// end ;
45577: LD_VAR 0 3
45581: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45582: LD_INT 0
45584: PPUSH
45585: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45586: LD_VAR 0 1
45590: NOT
45591: PUSH
45592: LD_VAR 0 1
45596: PUSH
45597: LD_INT 21
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 23
45609: PUSH
45610: LD_INT 2
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PPUSH
45621: CALL_OW 69
45625: IN
45626: NOT
45627: OR
45628: IFFALSE 45632
// exit ;
45630: GO 45679
// for i = 1 to 3 do
45632: LD_ADDR_VAR 0 3
45636: PUSH
45637: DOUBLE
45638: LD_INT 1
45640: DEC
45641: ST_TO_ADDR
45642: LD_INT 3
45644: PUSH
45645: FOR_TO
45646: IFFALSE 45677
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45648: LD_VAR 0 1
45652: PPUSH
45653: CALL_OW 250
45657: PPUSH
45658: LD_VAR 0 1
45662: PPUSH
45663: CALL_OW 251
45667: PPUSH
45668: LD_INT 1
45670: PPUSH
45671: CALL_OW 453
45675: GO 45645
45677: POP
45678: POP
// end ;
45679: LD_VAR 0 2
45683: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45684: LD_INT 0
45686: PPUSH
45687: PPUSH
45688: PPUSH
45689: PPUSH
45690: PPUSH
45691: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45692: LD_VAR 0 1
45696: NOT
45697: PUSH
45698: LD_VAR 0 2
45702: NOT
45703: OR
45704: PUSH
45705: LD_VAR 0 1
45709: PPUSH
45710: CALL_OW 314
45714: OR
45715: IFFALSE 45719
// exit ;
45717: GO 46160
// x := GetX ( enemy_unit ) ;
45719: LD_ADDR_VAR 0 7
45723: PUSH
45724: LD_VAR 0 2
45728: PPUSH
45729: CALL_OW 250
45733: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45734: LD_ADDR_VAR 0 8
45738: PUSH
45739: LD_VAR 0 2
45743: PPUSH
45744: CALL_OW 251
45748: ST_TO_ADDR
// if not x or not y then
45749: LD_VAR 0 7
45753: NOT
45754: PUSH
45755: LD_VAR 0 8
45759: NOT
45760: OR
45761: IFFALSE 45765
// exit ;
45763: GO 46160
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45765: LD_ADDR_VAR 0 6
45769: PUSH
45770: LD_VAR 0 7
45774: PPUSH
45775: LD_INT 0
45777: PPUSH
45778: LD_INT 4
45780: PPUSH
45781: CALL_OW 272
45785: PUSH
45786: LD_VAR 0 8
45790: PPUSH
45791: LD_INT 0
45793: PPUSH
45794: LD_INT 4
45796: PPUSH
45797: CALL_OW 273
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_VAR 0 7
45810: PPUSH
45811: LD_INT 1
45813: PPUSH
45814: LD_INT 4
45816: PPUSH
45817: CALL_OW 272
45821: PUSH
45822: LD_VAR 0 8
45826: PPUSH
45827: LD_INT 1
45829: PPUSH
45830: LD_INT 4
45832: PPUSH
45833: CALL_OW 273
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_VAR 0 7
45846: PPUSH
45847: LD_INT 2
45849: PPUSH
45850: LD_INT 4
45852: PPUSH
45853: CALL_OW 272
45857: PUSH
45858: LD_VAR 0 8
45862: PPUSH
45863: LD_INT 2
45865: PPUSH
45866: LD_INT 4
45868: PPUSH
45869: CALL_OW 273
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_VAR 0 7
45882: PPUSH
45883: LD_INT 3
45885: PPUSH
45886: LD_INT 4
45888: PPUSH
45889: CALL_OW 272
45893: PUSH
45894: LD_VAR 0 8
45898: PPUSH
45899: LD_INT 3
45901: PPUSH
45902: LD_INT 4
45904: PPUSH
45905: CALL_OW 273
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_VAR 0 7
45918: PPUSH
45919: LD_INT 4
45921: PPUSH
45922: LD_INT 4
45924: PPUSH
45925: CALL_OW 272
45929: PUSH
45930: LD_VAR 0 8
45934: PPUSH
45935: LD_INT 4
45937: PPUSH
45938: LD_INT 4
45940: PPUSH
45941: CALL_OW 273
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_VAR 0 7
45954: PPUSH
45955: LD_INT 5
45957: PPUSH
45958: LD_INT 4
45960: PPUSH
45961: CALL_OW 272
45965: PUSH
45966: LD_VAR 0 8
45970: PPUSH
45971: LD_INT 5
45973: PPUSH
45974: LD_INT 4
45976: PPUSH
45977: CALL_OW 273
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: ST_TO_ADDR
// for i = tmp downto 1 do
45994: LD_ADDR_VAR 0 4
45998: PUSH
45999: DOUBLE
46000: LD_VAR 0 6
46004: INC
46005: ST_TO_ADDR
46006: LD_INT 1
46008: PUSH
46009: FOR_DOWNTO
46010: IFFALSE 46111
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
46012: LD_VAR 0 6
46016: PUSH
46017: LD_VAR 0 4
46021: ARRAY
46022: PUSH
46023: LD_INT 1
46025: ARRAY
46026: PPUSH
46027: LD_VAR 0 6
46031: PUSH
46032: LD_VAR 0 4
46036: ARRAY
46037: PUSH
46038: LD_INT 2
46040: ARRAY
46041: PPUSH
46042: CALL_OW 488
46046: NOT
46047: PUSH
46048: LD_VAR 0 6
46052: PUSH
46053: LD_VAR 0 4
46057: ARRAY
46058: PUSH
46059: LD_INT 1
46061: ARRAY
46062: PPUSH
46063: LD_VAR 0 6
46067: PUSH
46068: LD_VAR 0 4
46072: ARRAY
46073: PUSH
46074: LD_INT 2
46076: ARRAY
46077: PPUSH
46078: CALL_OW 428
46082: PUSH
46083: LD_INT 0
46085: NONEQUAL
46086: OR
46087: IFFALSE 46109
// tmp := Delete ( tmp , i ) ;
46089: LD_ADDR_VAR 0 6
46093: PUSH
46094: LD_VAR 0 6
46098: PPUSH
46099: LD_VAR 0 4
46103: PPUSH
46104: CALL_OW 3
46108: ST_TO_ADDR
46109: GO 46009
46111: POP
46112: POP
// j := GetClosestHex ( unit , tmp ) ;
46113: LD_ADDR_VAR 0 5
46117: PUSH
46118: LD_VAR 0 1
46122: PPUSH
46123: LD_VAR 0 6
46127: PPUSH
46128: CALL 45413 0 2
46132: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46133: LD_VAR 0 1
46137: PPUSH
46138: LD_VAR 0 5
46142: PUSH
46143: LD_INT 1
46145: ARRAY
46146: PPUSH
46147: LD_VAR 0 5
46151: PUSH
46152: LD_INT 2
46154: ARRAY
46155: PPUSH
46156: CALL_OW 111
// end ;
46160: LD_VAR 0 3
46164: RET
// export function PrepareApemanSoldier ( ) ; begin
46165: LD_INT 0
46167: PPUSH
// uc_nation := 0 ;
46168: LD_ADDR_OWVAR 21
46172: PUSH
46173: LD_INT 0
46175: ST_TO_ADDR
// hc_sex := sex_male ;
46176: LD_ADDR_OWVAR 27
46180: PUSH
46181: LD_INT 1
46183: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
46184: LD_ADDR_OWVAR 28
46188: PUSH
46189: LD_INT 15
46191: ST_TO_ADDR
// hc_gallery :=  ;
46192: LD_ADDR_OWVAR 33
46196: PUSH
46197: LD_STRING 
46199: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
46200: LD_ADDR_OWVAR 31
46204: PUSH
46205: LD_INT 0
46207: PPUSH
46208: LD_INT 3
46210: PPUSH
46211: CALL_OW 12
46215: PUSH
46216: LD_INT 0
46218: PPUSH
46219: LD_INT 3
46221: PPUSH
46222: CALL_OW 12
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: ST_TO_ADDR
// end ;
46239: LD_VAR 0 1
46243: RET
// export function PrepareApemanEngineer ( ) ; begin
46244: LD_INT 0
46246: PPUSH
// uc_nation := 0 ;
46247: LD_ADDR_OWVAR 21
46251: PUSH
46252: LD_INT 0
46254: ST_TO_ADDR
// hc_sex := sex_male ;
46255: LD_ADDR_OWVAR 27
46259: PUSH
46260: LD_INT 1
46262: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
46263: LD_ADDR_OWVAR 28
46267: PUSH
46268: LD_INT 16
46270: ST_TO_ADDR
// hc_gallery :=  ;
46271: LD_ADDR_OWVAR 33
46275: PUSH
46276: LD_STRING 
46278: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
46279: LD_ADDR_OWVAR 31
46283: PUSH
46284: LD_INT 0
46286: PPUSH
46287: LD_INT 3
46289: PPUSH
46290: CALL_OW 12
46294: PUSH
46295: LD_INT 0
46297: PPUSH
46298: LD_INT 3
46300: PPUSH
46301: CALL_OW 12
46305: PUSH
46306: LD_INT 0
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: ST_TO_ADDR
// end ;
46318: LD_VAR 0 1
46322: RET
// export function PrepareApeman ( agressivity ) ; begin
46323: LD_INT 0
46325: PPUSH
// uc_side := 0 ;
46326: LD_ADDR_OWVAR 20
46330: PUSH
46331: LD_INT 0
46333: ST_TO_ADDR
// uc_nation := 0 ;
46334: LD_ADDR_OWVAR 21
46338: PUSH
46339: LD_INT 0
46341: ST_TO_ADDR
// hc_sex := sex_male ;
46342: LD_ADDR_OWVAR 27
46346: PUSH
46347: LD_INT 1
46349: ST_TO_ADDR
// hc_class := class_apeman ;
46350: LD_ADDR_OWVAR 28
46354: PUSH
46355: LD_INT 12
46357: ST_TO_ADDR
// hc_gallery :=  ;
46358: LD_ADDR_OWVAR 33
46362: PUSH
46363: LD_STRING 
46365: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
46366: LD_ADDR_OWVAR 35
46370: PUSH
46371: LD_VAR 0 1
46375: NEG
46376: PPUSH
46377: LD_VAR 0 1
46381: PPUSH
46382: CALL_OW 12
46386: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
46387: LD_ADDR_OWVAR 31
46391: PUSH
46392: LD_INT 0
46394: PPUSH
46395: LD_INT 3
46397: PPUSH
46398: CALL_OW 12
46402: PUSH
46403: LD_INT 0
46405: PPUSH
46406: LD_INT 3
46408: PPUSH
46409: CALL_OW 12
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: ST_TO_ADDR
// end ;
46426: LD_VAR 0 2
46430: RET
// export function PrepareTiger ( agressivity ) ; begin
46431: LD_INT 0
46433: PPUSH
// uc_side := 0 ;
46434: LD_ADDR_OWVAR 20
46438: PUSH
46439: LD_INT 0
46441: ST_TO_ADDR
// uc_nation := 0 ;
46442: LD_ADDR_OWVAR 21
46446: PUSH
46447: LD_INT 0
46449: ST_TO_ADDR
// hc_class := class_tiger ;
46450: LD_ADDR_OWVAR 28
46454: PUSH
46455: LD_INT 14
46457: ST_TO_ADDR
// hc_gallery :=  ;
46458: LD_ADDR_OWVAR 33
46462: PUSH
46463: LD_STRING 
46465: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
46466: LD_ADDR_OWVAR 35
46470: PUSH
46471: LD_VAR 0 1
46475: NEG
46476: PPUSH
46477: LD_VAR 0 1
46481: PPUSH
46482: CALL_OW 12
46486: ST_TO_ADDR
// end ;
46487: LD_VAR 0 2
46491: RET
// export function PrepareEnchidna ( ) ; begin
46492: LD_INT 0
46494: PPUSH
// uc_side := 0 ;
46495: LD_ADDR_OWVAR 20
46499: PUSH
46500: LD_INT 0
46502: ST_TO_ADDR
// uc_nation := 0 ;
46503: LD_ADDR_OWVAR 21
46507: PUSH
46508: LD_INT 0
46510: ST_TO_ADDR
// hc_class := class_baggie ;
46511: LD_ADDR_OWVAR 28
46515: PUSH
46516: LD_INT 13
46518: ST_TO_ADDR
// hc_gallery :=  ;
46519: LD_ADDR_OWVAR 33
46523: PUSH
46524: LD_STRING 
46526: ST_TO_ADDR
// end ;
46527: LD_VAR 0 1
46531: RET
// export function PrepareFrog ( ) ; begin
46532: LD_INT 0
46534: PPUSH
// uc_side := 0 ;
46535: LD_ADDR_OWVAR 20
46539: PUSH
46540: LD_INT 0
46542: ST_TO_ADDR
// uc_nation := 0 ;
46543: LD_ADDR_OWVAR 21
46547: PUSH
46548: LD_INT 0
46550: ST_TO_ADDR
// hc_class := class_frog ;
46551: LD_ADDR_OWVAR 28
46555: PUSH
46556: LD_INT 19
46558: ST_TO_ADDR
// hc_gallery :=  ;
46559: LD_ADDR_OWVAR 33
46563: PUSH
46564: LD_STRING 
46566: ST_TO_ADDR
// end ;
46567: LD_VAR 0 1
46571: RET
// export function PrepareFish ( ) ; begin
46572: LD_INT 0
46574: PPUSH
// uc_side := 0 ;
46575: LD_ADDR_OWVAR 20
46579: PUSH
46580: LD_INT 0
46582: ST_TO_ADDR
// uc_nation := 0 ;
46583: LD_ADDR_OWVAR 21
46587: PUSH
46588: LD_INT 0
46590: ST_TO_ADDR
// hc_class := class_fish ;
46591: LD_ADDR_OWVAR 28
46595: PUSH
46596: LD_INT 20
46598: ST_TO_ADDR
// hc_gallery :=  ;
46599: LD_ADDR_OWVAR 33
46603: PUSH
46604: LD_STRING 
46606: ST_TO_ADDR
// end ;
46607: LD_VAR 0 1
46611: RET
// export function PrepareBird ( ) ; begin
46612: LD_INT 0
46614: PPUSH
// uc_side := 0 ;
46615: LD_ADDR_OWVAR 20
46619: PUSH
46620: LD_INT 0
46622: ST_TO_ADDR
// uc_nation := 0 ;
46623: LD_ADDR_OWVAR 21
46627: PUSH
46628: LD_INT 0
46630: ST_TO_ADDR
// hc_class := class_phororhacos ;
46631: LD_ADDR_OWVAR 28
46635: PUSH
46636: LD_INT 18
46638: ST_TO_ADDR
// hc_gallery :=  ;
46639: LD_ADDR_OWVAR 33
46643: PUSH
46644: LD_STRING 
46646: ST_TO_ADDR
// end ;
46647: LD_VAR 0 1
46651: RET
// export function PrepareHorse ( ) ; begin
46652: LD_INT 0
46654: PPUSH
// uc_side := 0 ;
46655: LD_ADDR_OWVAR 20
46659: PUSH
46660: LD_INT 0
46662: ST_TO_ADDR
// uc_nation := 0 ;
46663: LD_ADDR_OWVAR 21
46667: PUSH
46668: LD_INT 0
46670: ST_TO_ADDR
// hc_class := 21 ;
46671: LD_ADDR_OWVAR 28
46675: PUSH
46676: LD_INT 21
46678: ST_TO_ADDR
// hc_gallery :=  ;
46679: LD_ADDR_OWVAR 33
46683: PUSH
46684: LD_STRING 
46686: ST_TO_ADDR
// end ;
46687: LD_VAR 0 1
46691: RET
// export function PrepareMastodont ( ) ; begin
46692: LD_INT 0
46694: PPUSH
// uc_side := 0 ;
46695: LD_ADDR_OWVAR 20
46699: PUSH
46700: LD_INT 0
46702: ST_TO_ADDR
// uc_nation := 0 ;
46703: LD_ADDR_OWVAR 21
46707: PUSH
46708: LD_INT 0
46710: ST_TO_ADDR
// vc_chassis := 31 ;
46711: LD_ADDR_OWVAR 37
46715: PUSH
46716: LD_INT 31
46718: ST_TO_ADDR
// vc_control := control_rider ;
46719: LD_ADDR_OWVAR 38
46723: PUSH
46724: LD_INT 4
46726: ST_TO_ADDR
// end ;
46727: LD_VAR 0 1
46731: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46732: LD_INT 0
46734: PPUSH
46735: PPUSH
46736: PPUSH
// uc_side = 0 ;
46737: LD_ADDR_OWVAR 20
46741: PUSH
46742: LD_INT 0
46744: ST_TO_ADDR
// uc_nation = 0 ;
46745: LD_ADDR_OWVAR 21
46749: PUSH
46750: LD_INT 0
46752: ST_TO_ADDR
// InitHc_All ( ) ;
46753: CALL_OW 584
// InitVc ;
46757: CALL_OW 20
// if mastodonts then
46761: LD_VAR 0 6
46765: IFFALSE 46832
// for i = 1 to mastodonts do
46767: LD_ADDR_VAR 0 11
46771: PUSH
46772: DOUBLE
46773: LD_INT 1
46775: DEC
46776: ST_TO_ADDR
46777: LD_VAR 0 6
46781: PUSH
46782: FOR_TO
46783: IFFALSE 46830
// begin vc_chassis := 31 ;
46785: LD_ADDR_OWVAR 37
46789: PUSH
46790: LD_INT 31
46792: ST_TO_ADDR
// vc_control := control_rider ;
46793: LD_ADDR_OWVAR 38
46797: PUSH
46798: LD_INT 4
46800: ST_TO_ADDR
// animal := CreateVehicle ;
46801: LD_ADDR_VAR 0 12
46805: PUSH
46806: CALL_OW 45
46810: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46811: LD_VAR 0 12
46815: PPUSH
46816: LD_VAR 0 8
46820: PPUSH
46821: LD_INT 0
46823: PPUSH
46824: CALL 48967 0 3
// end ;
46828: GO 46782
46830: POP
46831: POP
// if horses then
46832: LD_VAR 0 5
46836: IFFALSE 46903
// for i = 1 to horses do
46838: LD_ADDR_VAR 0 11
46842: PUSH
46843: DOUBLE
46844: LD_INT 1
46846: DEC
46847: ST_TO_ADDR
46848: LD_VAR 0 5
46852: PUSH
46853: FOR_TO
46854: IFFALSE 46901
// begin hc_class := 21 ;
46856: LD_ADDR_OWVAR 28
46860: PUSH
46861: LD_INT 21
46863: ST_TO_ADDR
// hc_gallery :=  ;
46864: LD_ADDR_OWVAR 33
46868: PUSH
46869: LD_STRING 
46871: ST_TO_ADDR
// animal := CreateHuman ;
46872: LD_ADDR_VAR 0 12
46876: PUSH
46877: CALL_OW 44
46881: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46882: LD_VAR 0 12
46886: PPUSH
46887: LD_VAR 0 8
46891: PPUSH
46892: LD_INT 0
46894: PPUSH
46895: CALL 48967 0 3
// end ;
46899: GO 46853
46901: POP
46902: POP
// if birds then
46903: LD_VAR 0 1
46907: IFFALSE 46974
// for i = 1 to birds do
46909: LD_ADDR_VAR 0 11
46913: PUSH
46914: DOUBLE
46915: LD_INT 1
46917: DEC
46918: ST_TO_ADDR
46919: LD_VAR 0 1
46923: PUSH
46924: FOR_TO
46925: IFFALSE 46972
// begin hc_class = 18 ;
46927: LD_ADDR_OWVAR 28
46931: PUSH
46932: LD_INT 18
46934: ST_TO_ADDR
// hc_gallery =  ;
46935: LD_ADDR_OWVAR 33
46939: PUSH
46940: LD_STRING 
46942: ST_TO_ADDR
// animal := CreateHuman ;
46943: LD_ADDR_VAR 0 12
46947: PUSH
46948: CALL_OW 44
46952: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46953: LD_VAR 0 12
46957: PPUSH
46958: LD_VAR 0 8
46962: PPUSH
46963: LD_INT 0
46965: PPUSH
46966: CALL 48967 0 3
// end ;
46970: GO 46924
46972: POP
46973: POP
// if tigers then
46974: LD_VAR 0 2
46978: IFFALSE 47062
// for i = 1 to tigers do
46980: LD_ADDR_VAR 0 11
46984: PUSH
46985: DOUBLE
46986: LD_INT 1
46988: DEC
46989: ST_TO_ADDR
46990: LD_VAR 0 2
46994: PUSH
46995: FOR_TO
46996: IFFALSE 47060
// begin hc_class = class_tiger ;
46998: LD_ADDR_OWVAR 28
47002: PUSH
47003: LD_INT 14
47005: ST_TO_ADDR
// hc_gallery =  ;
47006: LD_ADDR_OWVAR 33
47010: PUSH
47011: LD_STRING 
47013: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
47014: LD_ADDR_OWVAR 35
47018: PUSH
47019: LD_INT 7
47021: NEG
47022: PPUSH
47023: LD_INT 7
47025: PPUSH
47026: CALL_OW 12
47030: ST_TO_ADDR
// animal := CreateHuman ;
47031: LD_ADDR_VAR 0 12
47035: PUSH
47036: CALL_OW 44
47040: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47041: LD_VAR 0 12
47045: PPUSH
47046: LD_VAR 0 8
47050: PPUSH
47051: LD_INT 0
47053: PPUSH
47054: CALL 48967 0 3
// end ;
47058: GO 46995
47060: POP
47061: POP
// if apemans then
47062: LD_VAR 0 3
47066: IFFALSE 47189
// for i = 1 to apemans do
47068: LD_ADDR_VAR 0 11
47072: PUSH
47073: DOUBLE
47074: LD_INT 1
47076: DEC
47077: ST_TO_ADDR
47078: LD_VAR 0 3
47082: PUSH
47083: FOR_TO
47084: IFFALSE 47187
// begin hc_class = class_apeman ;
47086: LD_ADDR_OWVAR 28
47090: PUSH
47091: LD_INT 12
47093: ST_TO_ADDR
// hc_gallery =  ;
47094: LD_ADDR_OWVAR 33
47098: PUSH
47099: LD_STRING 
47101: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
47102: LD_ADDR_OWVAR 35
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PPUSH
47111: LD_INT 2
47113: PPUSH
47114: CALL_OW 12
47118: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
47119: LD_ADDR_OWVAR 31
47123: PUSH
47124: LD_INT 1
47126: PPUSH
47127: LD_INT 3
47129: PPUSH
47130: CALL_OW 12
47134: PUSH
47135: LD_INT 1
47137: PPUSH
47138: LD_INT 3
47140: PPUSH
47141: CALL_OW 12
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: ST_TO_ADDR
// animal := CreateHuman ;
47158: LD_ADDR_VAR 0 12
47162: PUSH
47163: CALL_OW 44
47167: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47168: LD_VAR 0 12
47172: PPUSH
47173: LD_VAR 0 8
47177: PPUSH
47178: LD_INT 0
47180: PPUSH
47181: CALL 48967 0 3
// end ;
47185: GO 47083
47187: POP
47188: POP
// if enchidnas then
47189: LD_VAR 0 4
47193: IFFALSE 47260
// for i = 1 to enchidnas do
47195: LD_ADDR_VAR 0 11
47199: PUSH
47200: DOUBLE
47201: LD_INT 1
47203: DEC
47204: ST_TO_ADDR
47205: LD_VAR 0 4
47209: PUSH
47210: FOR_TO
47211: IFFALSE 47258
// begin hc_class = 13 ;
47213: LD_ADDR_OWVAR 28
47217: PUSH
47218: LD_INT 13
47220: ST_TO_ADDR
// hc_gallery =  ;
47221: LD_ADDR_OWVAR 33
47225: PUSH
47226: LD_STRING 
47228: ST_TO_ADDR
// animal := CreateHuman ;
47229: LD_ADDR_VAR 0 12
47233: PUSH
47234: CALL_OW 44
47238: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
47239: LD_VAR 0 12
47243: PPUSH
47244: LD_VAR 0 8
47248: PPUSH
47249: LD_INT 0
47251: PPUSH
47252: CALL 48967 0 3
// end ;
47256: GO 47210
47258: POP
47259: POP
// if fishes then
47260: LD_VAR 0 7
47264: IFFALSE 47331
// for i = 1 to fishes do
47266: LD_ADDR_VAR 0 11
47270: PUSH
47271: DOUBLE
47272: LD_INT 1
47274: DEC
47275: ST_TO_ADDR
47276: LD_VAR 0 7
47280: PUSH
47281: FOR_TO
47282: IFFALSE 47329
// begin hc_class = 20 ;
47284: LD_ADDR_OWVAR 28
47288: PUSH
47289: LD_INT 20
47291: ST_TO_ADDR
// hc_gallery =  ;
47292: LD_ADDR_OWVAR 33
47296: PUSH
47297: LD_STRING 
47299: ST_TO_ADDR
// animal := CreateHuman ;
47300: LD_ADDR_VAR 0 12
47304: PUSH
47305: CALL_OW 44
47309: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
47310: LD_VAR 0 12
47314: PPUSH
47315: LD_VAR 0 9
47319: PPUSH
47320: LD_INT 0
47322: PPUSH
47323: CALL 48967 0 3
// end ;
47327: GO 47281
47329: POP
47330: POP
// end ;
47331: LD_VAR 0 10
47335: RET
// export function WantHeal ( sci , unit ) ; begin
47336: LD_INT 0
47338: PPUSH
// if GetTaskList ( sci ) > 0 then
47339: LD_VAR 0 1
47343: PPUSH
47344: CALL_OW 437
47348: PUSH
47349: LD_INT 0
47351: GREATER
47352: IFFALSE 47422
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
47354: LD_VAR 0 1
47358: PPUSH
47359: CALL_OW 437
47363: PUSH
47364: LD_INT 1
47366: ARRAY
47367: PUSH
47368: LD_INT 1
47370: ARRAY
47371: PUSH
47372: LD_STRING l
47374: EQUAL
47375: PUSH
47376: LD_VAR 0 1
47380: PPUSH
47381: CALL_OW 437
47385: PUSH
47386: LD_INT 1
47388: ARRAY
47389: PUSH
47390: LD_INT 4
47392: ARRAY
47393: PUSH
47394: LD_VAR 0 2
47398: EQUAL
47399: AND
47400: IFFALSE 47412
// result := true else
47402: LD_ADDR_VAR 0 3
47406: PUSH
47407: LD_INT 1
47409: ST_TO_ADDR
47410: GO 47420
// result := false ;
47412: LD_ADDR_VAR 0 3
47416: PUSH
47417: LD_INT 0
47419: ST_TO_ADDR
// end else
47420: GO 47430
// result := false ;
47422: LD_ADDR_VAR 0 3
47426: PUSH
47427: LD_INT 0
47429: ST_TO_ADDR
// end ;
47430: LD_VAR 0 3
47434: RET
// export function HealTarget ( sci ) ; begin
47435: LD_INT 0
47437: PPUSH
// if not sci then
47438: LD_VAR 0 1
47442: NOT
47443: IFFALSE 47447
// exit ;
47445: GO 47512
// result := 0 ;
47447: LD_ADDR_VAR 0 2
47451: PUSH
47452: LD_INT 0
47454: ST_TO_ADDR
// if GetTaskList ( sci ) then
47455: LD_VAR 0 1
47459: PPUSH
47460: CALL_OW 437
47464: IFFALSE 47512
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
47466: LD_VAR 0 1
47470: PPUSH
47471: CALL_OW 437
47475: PUSH
47476: LD_INT 1
47478: ARRAY
47479: PUSH
47480: LD_INT 1
47482: ARRAY
47483: PUSH
47484: LD_STRING l
47486: EQUAL
47487: IFFALSE 47512
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
47489: LD_ADDR_VAR 0 2
47493: PUSH
47494: LD_VAR 0 1
47498: PPUSH
47499: CALL_OW 437
47503: PUSH
47504: LD_INT 1
47506: ARRAY
47507: PUSH
47508: LD_INT 4
47510: ARRAY
47511: ST_TO_ADDR
// end ;
47512: LD_VAR 0 2
47516: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
47517: LD_INT 0
47519: PPUSH
47520: PPUSH
47521: PPUSH
47522: PPUSH
// if not base_units then
47523: LD_VAR 0 1
47527: NOT
47528: IFFALSE 47532
// exit ;
47530: GO 47619
// result := false ;
47532: LD_ADDR_VAR 0 2
47536: PUSH
47537: LD_INT 0
47539: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
47540: LD_ADDR_VAR 0 5
47544: PUSH
47545: LD_VAR 0 1
47549: PPUSH
47550: LD_INT 21
47552: PUSH
47553: LD_INT 3
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PPUSH
47560: CALL_OW 72
47564: ST_TO_ADDR
// if not tmp then
47565: LD_VAR 0 5
47569: NOT
47570: IFFALSE 47574
// exit ;
47572: GO 47619
// for i in tmp do
47574: LD_ADDR_VAR 0 3
47578: PUSH
47579: LD_VAR 0 5
47583: PUSH
47584: FOR_IN
47585: IFFALSE 47617
// begin result := EnemyInRange ( i , 22 ) ;
47587: LD_ADDR_VAR 0 2
47591: PUSH
47592: LD_VAR 0 3
47596: PPUSH
47597: LD_INT 22
47599: PPUSH
47600: CALL 45288 0 2
47604: ST_TO_ADDR
// if result then
47605: LD_VAR 0 2
47609: IFFALSE 47615
// exit ;
47611: POP
47612: POP
47613: GO 47619
// end ;
47615: GO 47584
47617: POP
47618: POP
// end ;
47619: LD_VAR 0 2
47623: RET
// export function FilterByTag ( units , tag ) ; begin
47624: LD_INT 0
47626: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47627: LD_ADDR_VAR 0 3
47631: PUSH
47632: LD_VAR 0 1
47636: PPUSH
47637: LD_INT 120
47639: PUSH
47640: LD_VAR 0 2
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PPUSH
47649: CALL_OW 72
47653: ST_TO_ADDR
// end ;
47654: LD_VAR 0 3
47658: RET
// export function IsDriver ( un ) ; begin
47659: LD_INT 0
47661: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47662: LD_ADDR_VAR 0 2
47666: PUSH
47667: LD_VAR 0 1
47671: PUSH
47672: LD_INT 55
47674: PUSH
47675: EMPTY
47676: LIST
47677: PPUSH
47678: CALL_OW 69
47682: IN
47683: ST_TO_ADDR
// end ;
47684: LD_VAR 0 2
47688: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47689: LD_INT 0
47691: PPUSH
47692: PPUSH
// list := [ ] ;
47693: LD_ADDR_VAR 0 5
47697: PUSH
47698: EMPTY
47699: ST_TO_ADDR
// case d of 0 :
47700: LD_VAR 0 3
47704: PUSH
47705: LD_INT 0
47707: DOUBLE
47708: EQUAL
47709: IFTRUE 47713
47711: GO 47846
47713: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47714: LD_ADDR_VAR 0 5
47718: PUSH
47719: LD_VAR 0 1
47723: PUSH
47724: LD_INT 4
47726: MINUS
47727: PUSH
47728: LD_VAR 0 2
47732: PUSH
47733: LD_INT 4
47735: MINUS
47736: PUSH
47737: LD_INT 2
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: LIST
47744: PUSH
47745: LD_VAR 0 1
47749: PUSH
47750: LD_INT 3
47752: MINUS
47753: PUSH
47754: LD_VAR 0 2
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: LIST
47766: PUSH
47767: LD_VAR 0 1
47771: PUSH
47772: LD_INT 4
47774: PLUS
47775: PUSH
47776: LD_VAR 0 2
47780: PUSH
47781: LD_INT 4
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: LIST
47788: PUSH
47789: LD_VAR 0 1
47793: PUSH
47794: LD_INT 3
47796: PLUS
47797: PUSH
47798: LD_VAR 0 2
47802: PUSH
47803: LD_INT 3
47805: PLUS
47806: PUSH
47807: LD_INT 5
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: LIST
47814: PUSH
47815: LD_VAR 0 1
47819: PUSH
47820: LD_VAR 0 2
47824: PUSH
47825: LD_INT 4
47827: PLUS
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: LIST
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: ST_TO_ADDR
// end ; 1 :
47844: GO 48544
47846: LD_INT 1
47848: DOUBLE
47849: EQUAL
47850: IFTRUE 47854
47852: GO 47987
47854: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47855: LD_ADDR_VAR 0 5
47859: PUSH
47860: LD_VAR 0 1
47864: PUSH
47865: LD_VAR 0 2
47869: PUSH
47870: LD_INT 4
47872: MINUS
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: LIST
47881: PUSH
47882: LD_VAR 0 1
47886: PUSH
47887: LD_INT 3
47889: MINUS
47890: PUSH
47891: LD_VAR 0 2
47895: PUSH
47896: LD_INT 3
47898: MINUS
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: LIST
47907: PUSH
47908: LD_VAR 0 1
47912: PUSH
47913: LD_INT 4
47915: MINUS
47916: PUSH
47917: LD_VAR 0 2
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: LIST
47929: PUSH
47930: LD_VAR 0 1
47934: PUSH
47935: LD_VAR 0 2
47939: PUSH
47940: LD_INT 3
47942: PLUS
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: LIST
47951: PUSH
47952: LD_VAR 0 1
47956: PUSH
47957: LD_INT 4
47959: PLUS
47960: PUSH
47961: LD_VAR 0 2
47965: PUSH
47966: LD_INT 4
47968: PLUS
47969: PUSH
47970: LD_INT 5
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: LIST
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: ST_TO_ADDR
// end ; 2 :
47985: GO 48544
47987: LD_INT 2
47989: DOUBLE
47990: EQUAL
47991: IFTRUE 47995
47993: GO 48124
47995: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47996: LD_ADDR_VAR 0 5
48000: PUSH
48001: LD_VAR 0 1
48005: PUSH
48006: LD_VAR 0 2
48010: PUSH
48011: LD_INT 3
48013: MINUS
48014: PUSH
48015: LD_INT 3
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: LIST
48022: PUSH
48023: LD_VAR 0 1
48027: PUSH
48028: LD_INT 4
48030: PLUS
48031: PUSH
48032: LD_VAR 0 2
48036: PUSH
48037: LD_INT 4
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: LIST
48044: PUSH
48045: LD_VAR 0 1
48049: PUSH
48050: LD_VAR 0 2
48054: PUSH
48055: LD_INT 4
48057: PLUS
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: PUSH
48067: LD_VAR 0 1
48071: PUSH
48072: LD_INT 3
48074: MINUS
48075: PUSH
48076: LD_VAR 0 2
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: PUSH
48089: LD_VAR 0 1
48093: PUSH
48094: LD_INT 4
48096: MINUS
48097: PUSH
48098: LD_VAR 0 2
48102: PUSH
48103: LD_INT 4
48105: MINUS
48106: PUSH
48107: LD_INT 2
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: ST_TO_ADDR
// end ; 3 :
48122: GO 48544
48124: LD_INT 3
48126: DOUBLE
48127: EQUAL
48128: IFTRUE 48132
48130: GO 48265
48132: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
48133: LD_ADDR_VAR 0 5
48137: PUSH
48138: LD_VAR 0 1
48142: PUSH
48143: LD_INT 3
48145: PLUS
48146: PUSH
48147: LD_VAR 0 2
48151: PUSH
48152: LD_INT 4
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: LIST
48159: PUSH
48160: LD_VAR 0 1
48164: PUSH
48165: LD_INT 4
48167: PLUS
48168: PUSH
48169: LD_VAR 0 2
48173: PUSH
48174: LD_INT 4
48176: PLUS
48177: PUSH
48178: LD_INT 5
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: LIST
48185: PUSH
48186: LD_VAR 0 1
48190: PUSH
48191: LD_INT 4
48193: MINUS
48194: PUSH
48195: LD_VAR 0 2
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: LIST
48207: PUSH
48208: LD_VAR 0 1
48212: PUSH
48213: LD_VAR 0 2
48217: PUSH
48218: LD_INT 4
48220: MINUS
48221: PUSH
48222: LD_INT 3
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: LIST
48229: PUSH
48230: LD_VAR 0 1
48234: PUSH
48235: LD_INT 3
48237: MINUS
48238: PUSH
48239: LD_VAR 0 2
48243: PUSH
48244: LD_INT 3
48246: MINUS
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: LIST
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: ST_TO_ADDR
// end ; 4 :
48263: GO 48544
48265: LD_INT 4
48267: DOUBLE
48268: EQUAL
48269: IFTRUE 48273
48271: GO 48406
48273: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
48274: LD_ADDR_VAR 0 5
48278: PUSH
48279: LD_VAR 0 1
48283: PUSH
48284: LD_VAR 0 2
48288: PUSH
48289: LD_INT 4
48291: PLUS
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: PUSH
48301: LD_VAR 0 1
48305: PUSH
48306: LD_INT 3
48308: PLUS
48309: PUSH
48310: LD_VAR 0 2
48314: PUSH
48315: LD_INT 3
48317: PLUS
48318: PUSH
48319: LD_INT 5
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: PUSH
48327: LD_VAR 0 1
48331: PUSH
48332: LD_INT 4
48334: PLUS
48335: PUSH
48336: LD_VAR 0 2
48340: PUSH
48341: LD_INT 4
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: LIST
48348: PUSH
48349: LD_VAR 0 1
48353: PUSH
48354: LD_VAR 0 2
48358: PUSH
48359: LD_INT 3
48361: MINUS
48362: PUSH
48363: LD_INT 3
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: PUSH
48371: LD_VAR 0 1
48375: PUSH
48376: LD_INT 4
48378: MINUS
48379: PUSH
48380: LD_VAR 0 2
48384: PUSH
48385: LD_INT 4
48387: MINUS
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: LIST
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: ST_TO_ADDR
// end ; 5 :
48404: GO 48544
48406: LD_INT 5
48408: DOUBLE
48409: EQUAL
48410: IFTRUE 48414
48412: GO 48543
48414: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
48415: LD_ADDR_VAR 0 5
48419: PUSH
48420: LD_VAR 0 1
48424: PUSH
48425: LD_INT 4
48427: MINUS
48428: PUSH
48429: LD_VAR 0 2
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: PUSH
48442: LD_VAR 0 1
48446: PUSH
48447: LD_VAR 0 2
48451: PUSH
48452: LD_INT 4
48454: MINUS
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: LIST
48463: PUSH
48464: LD_VAR 0 1
48468: PUSH
48469: LD_INT 4
48471: PLUS
48472: PUSH
48473: LD_VAR 0 2
48477: PUSH
48478: LD_INT 4
48480: PLUS
48481: PUSH
48482: LD_INT 5
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: LIST
48489: PUSH
48490: LD_VAR 0 1
48494: PUSH
48495: LD_INT 3
48497: PLUS
48498: PUSH
48499: LD_VAR 0 2
48503: PUSH
48504: LD_INT 4
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: LIST
48511: PUSH
48512: LD_VAR 0 1
48516: PUSH
48517: LD_VAR 0 2
48521: PUSH
48522: LD_INT 3
48524: PLUS
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: LIST
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: ST_TO_ADDR
// end ; end ;
48541: GO 48544
48543: POP
// result := list ;
48544: LD_ADDR_VAR 0 4
48548: PUSH
48549: LD_VAR 0 5
48553: ST_TO_ADDR
// end ;
48554: LD_VAR 0 4
48558: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
48559: LD_INT 0
48561: PPUSH
48562: PPUSH
48563: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
48564: LD_VAR 0 1
48568: NOT
48569: PUSH
48570: LD_VAR 0 2
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: LD_INT 3
48583: PUSH
48584: LD_INT 4
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: IN
48593: NOT
48594: OR
48595: IFFALSE 48599
// exit ;
48597: GO 48691
// tmp := [ ] ;
48599: LD_ADDR_VAR 0 5
48603: PUSH
48604: EMPTY
48605: ST_TO_ADDR
// for i in units do
48606: LD_ADDR_VAR 0 4
48610: PUSH
48611: LD_VAR 0 1
48615: PUSH
48616: FOR_IN
48617: IFFALSE 48660
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48619: LD_ADDR_VAR 0 5
48623: PUSH
48624: LD_VAR 0 5
48628: PPUSH
48629: LD_VAR 0 5
48633: PUSH
48634: LD_INT 1
48636: PLUS
48637: PPUSH
48638: LD_VAR 0 4
48642: PPUSH
48643: LD_VAR 0 2
48647: PPUSH
48648: CALL_OW 259
48652: PPUSH
48653: CALL_OW 2
48657: ST_TO_ADDR
48658: GO 48616
48660: POP
48661: POP
// if not tmp then
48662: LD_VAR 0 5
48666: NOT
48667: IFFALSE 48671
// exit ;
48669: GO 48691
// result := SortListByListDesc ( units , tmp ) ;
48671: LD_ADDR_VAR 0 3
48675: PUSH
48676: LD_VAR 0 1
48680: PPUSH
48681: LD_VAR 0 5
48685: PPUSH
48686: CALL_OW 77
48690: ST_TO_ADDR
// end ;
48691: LD_VAR 0 3
48695: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48696: LD_INT 0
48698: PPUSH
48699: PPUSH
48700: PPUSH
// result := false ;
48701: LD_ADDR_VAR 0 3
48705: PUSH
48706: LD_INT 0
48708: ST_TO_ADDR
// x := GetX ( building ) ;
48709: LD_ADDR_VAR 0 4
48713: PUSH
48714: LD_VAR 0 2
48718: PPUSH
48719: CALL_OW 250
48723: ST_TO_ADDR
// y := GetY ( building ) ;
48724: LD_ADDR_VAR 0 5
48728: PUSH
48729: LD_VAR 0 2
48733: PPUSH
48734: CALL_OW 251
48738: ST_TO_ADDR
// if not building or not x or not y then
48739: LD_VAR 0 2
48743: NOT
48744: PUSH
48745: LD_VAR 0 4
48749: NOT
48750: OR
48751: PUSH
48752: LD_VAR 0 5
48756: NOT
48757: OR
48758: IFFALSE 48762
// exit ;
48760: GO 48854
// if GetTaskList ( unit ) then
48762: LD_VAR 0 1
48766: PPUSH
48767: CALL_OW 437
48771: IFFALSE 48854
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48773: LD_STRING e
48775: PUSH
48776: LD_VAR 0 1
48780: PPUSH
48781: CALL_OW 437
48785: PUSH
48786: LD_INT 1
48788: ARRAY
48789: PUSH
48790: LD_INT 1
48792: ARRAY
48793: EQUAL
48794: PUSH
48795: LD_VAR 0 4
48799: PUSH
48800: LD_VAR 0 1
48804: PPUSH
48805: CALL_OW 437
48809: PUSH
48810: LD_INT 1
48812: ARRAY
48813: PUSH
48814: LD_INT 2
48816: ARRAY
48817: EQUAL
48818: AND
48819: PUSH
48820: LD_VAR 0 5
48824: PUSH
48825: LD_VAR 0 1
48829: PPUSH
48830: CALL_OW 437
48834: PUSH
48835: LD_INT 1
48837: ARRAY
48838: PUSH
48839: LD_INT 3
48841: ARRAY
48842: EQUAL
48843: AND
48844: IFFALSE 48854
// result := true end ;
48846: LD_ADDR_VAR 0 3
48850: PUSH
48851: LD_INT 1
48853: ST_TO_ADDR
// end ;
48854: LD_VAR 0 3
48858: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48859: LD_INT 0
48861: PPUSH
// result := false ;
48862: LD_ADDR_VAR 0 4
48866: PUSH
48867: LD_INT 0
48869: ST_TO_ADDR
// if GetTaskList ( unit ) then
48870: LD_VAR 0 1
48874: PPUSH
48875: CALL_OW 437
48879: IFFALSE 48962
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48881: LD_STRING M
48883: PUSH
48884: LD_VAR 0 1
48888: PPUSH
48889: CALL_OW 437
48893: PUSH
48894: LD_INT 1
48896: ARRAY
48897: PUSH
48898: LD_INT 1
48900: ARRAY
48901: EQUAL
48902: PUSH
48903: LD_VAR 0 2
48907: PUSH
48908: LD_VAR 0 1
48912: PPUSH
48913: CALL_OW 437
48917: PUSH
48918: LD_INT 1
48920: ARRAY
48921: PUSH
48922: LD_INT 2
48924: ARRAY
48925: EQUAL
48926: AND
48927: PUSH
48928: LD_VAR 0 3
48932: PUSH
48933: LD_VAR 0 1
48937: PPUSH
48938: CALL_OW 437
48942: PUSH
48943: LD_INT 1
48945: ARRAY
48946: PUSH
48947: LD_INT 3
48949: ARRAY
48950: EQUAL
48951: AND
48952: IFFALSE 48962
// result := true ;
48954: LD_ADDR_VAR 0 4
48958: PUSH
48959: LD_INT 1
48961: ST_TO_ADDR
// end ; end ;
48962: LD_VAR 0 4
48966: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48967: LD_INT 0
48969: PPUSH
48970: PPUSH
48971: PPUSH
48972: PPUSH
// if not unit or not area then
48973: LD_VAR 0 1
48977: NOT
48978: PUSH
48979: LD_VAR 0 2
48983: NOT
48984: OR
48985: IFFALSE 48989
// exit ;
48987: GO 49153
// tmp := AreaToList ( area , i ) ;
48989: LD_ADDR_VAR 0 6
48993: PUSH
48994: LD_VAR 0 2
48998: PPUSH
48999: LD_VAR 0 5
49003: PPUSH
49004: CALL_OW 517
49008: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
49009: LD_ADDR_VAR 0 5
49013: PUSH
49014: DOUBLE
49015: LD_INT 1
49017: DEC
49018: ST_TO_ADDR
49019: LD_VAR 0 6
49023: PUSH
49024: LD_INT 1
49026: ARRAY
49027: PUSH
49028: FOR_TO
49029: IFFALSE 49151
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
49031: LD_ADDR_VAR 0 7
49035: PUSH
49036: LD_VAR 0 6
49040: PUSH
49041: LD_INT 1
49043: ARRAY
49044: PUSH
49045: LD_VAR 0 5
49049: ARRAY
49050: PUSH
49051: LD_VAR 0 6
49055: PUSH
49056: LD_INT 2
49058: ARRAY
49059: PUSH
49060: LD_VAR 0 5
49064: ARRAY
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
49070: LD_VAR 0 7
49074: PUSH
49075: LD_INT 1
49077: ARRAY
49078: PPUSH
49079: LD_VAR 0 7
49083: PUSH
49084: LD_INT 2
49086: ARRAY
49087: PPUSH
49088: CALL_OW 428
49092: PUSH
49093: LD_INT 0
49095: EQUAL
49096: IFFALSE 49149
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
49098: LD_VAR 0 1
49102: PPUSH
49103: LD_VAR 0 7
49107: PUSH
49108: LD_INT 1
49110: ARRAY
49111: PPUSH
49112: LD_VAR 0 7
49116: PUSH
49117: LD_INT 2
49119: ARRAY
49120: PPUSH
49121: LD_VAR 0 3
49125: PPUSH
49126: CALL_OW 48
// result := IsPlaced ( unit ) ;
49130: LD_ADDR_VAR 0 4
49134: PUSH
49135: LD_VAR 0 1
49139: PPUSH
49140: CALL_OW 305
49144: ST_TO_ADDR
// exit ;
49145: POP
49146: POP
49147: GO 49153
// end ; end ;
49149: GO 49028
49151: POP
49152: POP
// end ;
49153: LD_VAR 0 4
49157: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
49158: LD_INT 0
49160: PPUSH
49161: PPUSH
49162: PPUSH
// if not side or side > 8 then
49163: LD_VAR 0 1
49167: NOT
49168: PUSH
49169: LD_VAR 0 1
49173: PUSH
49174: LD_INT 8
49176: GREATER
49177: OR
49178: IFFALSE 49182
// exit ;
49180: GO 49369
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
49182: LD_ADDR_VAR 0 4
49186: PUSH
49187: LD_INT 22
49189: PUSH
49190: LD_VAR 0 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 21
49201: PUSH
49202: LD_INT 3
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PPUSH
49213: CALL_OW 69
49217: ST_TO_ADDR
// if not tmp then
49218: LD_VAR 0 4
49222: NOT
49223: IFFALSE 49227
// exit ;
49225: GO 49369
// enable_addtolog := true ;
49227: LD_ADDR_OWVAR 81
49231: PUSH
49232: LD_INT 1
49234: ST_TO_ADDR
// AddToLog ( [ ) ;
49235: LD_STRING [
49237: PPUSH
49238: CALL_OW 561
// for i in tmp do
49242: LD_ADDR_VAR 0 3
49246: PUSH
49247: LD_VAR 0 4
49251: PUSH
49252: FOR_IN
49253: IFFALSE 49360
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
49255: LD_STRING [
49257: PUSH
49258: LD_VAR 0 3
49262: PPUSH
49263: CALL_OW 266
49267: STR
49268: PUSH
49269: LD_STRING , 
49271: STR
49272: PUSH
49273: LD_VAR 0 3
49277: PPUSH
49278: CALL_OW 250
49282: STR
49283: PUSH
49284: LD_STRING , 
49286: STR
49287: PUSH
49288: LD_VAR 0 3
49292: PPUSH
49293: CALL_OW 251
49297: STR
49298: PUSH
49299: LD_STRING , 
49301: STR
49302: PUSH
49303: LD_VAR 0 3
49307: PPUSH
49308: CALL_OW 254
49312: STR
49313: PUSH
49314: LD_STRING , 
49316: STR
49317: PUSH
49318: LD_VAR 0 3
49322: PPUSH
49323: LD_INT 1
49325: PPUSH
49326: CALL_OW 268
49330: STR
49331: PUSH
49332: LD_STRING , 
49334: STR
49335: PUSH
49336: LD_VAR 0 3
49340: PPUSH
49341: LD_INT 2
49343: PPUSH
49344: CALL_OW 268
49348: STR
49349: PUSH
49350: LD_STRING ],
49352: STR
49353: PPUSH
49354: CALL_OW 561
// end ;
49358: GO 49252
49360: POP
49361: POP
// AddToLog ( ]; ) ;
49362: LD_STRING ];
49364: PPUSH
49365: CALL_OW 561
// end ;
49369: LD_VAR 0 2
49373: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
49374: LD_INT 0
49376: PPUSH
49377: PPUSH
49378: PPUSH
49379: PPUSH
49380: PPUSH
// if not area or not rate or not max then
49381: LD_VAR 0 1
49385: NOT
49386: PUSH
49387: LD_VAR 0 2
49391: NOT
49392: OR
49393: PUSH
49394: LD_VAR 0 4
49398: NOT
49399: OR
49400: IFFALSE 49404
// exit ;
49402: GO 49593
// while 1 do
49404: LD_INT 1
49406: IFFALSE 49593
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
49408: LD_ADDR_VAR 0 9
49412: PUSH
49413: LD_VAR 0 1
49417: PPUSH
49418: LD_INT 1
49420: PPUSH
49421: CALL_OW 287
49425: PUSH
49426: LD_INT 10
49428: MUL
49429: ST_TO_ADDR
// r := rate / 10 ;
49430: LD_ADDR_VAR 0 7
49434: PUSH
49435: LD_VAR 0 2
49439: PUSH
49440: LD_INT 10
49442: DIVREAL
49443: ST_TO_ADDR
// time := 1 1$00 ;
49444: LD_ADDR_VAR 0 8
49448: PUSH
49449: LD_INT 2100
49451: ST_TO_ADDR
// if amount < min then
49452: LD_VAR 0 9
49456: PUSH
49457: LD_VAR 0 3
49461: LESS
49462: IFFALSE 49480
// r := r * 2 else
49464: LD_ADDR_VAR 0 7
49468: PUSH
49469: LD_VAR 0 7
49473: PUSH
49474: LD_INT 2
49476: MUL
49477: ST_TO_ADDR
49478: GO 49506
// if amount > max then
49480: LD_VAR 0 9
49484: PUSH
49485: LD_VAR 0 4
49489: GREATER
49490: IFFALSE 49506
// r := r / 2 ;
49492: LD_ADDR_VAR 0 7
49496: PUSH
49497: LD_VAR 0 7
49501: PUSH
49502: LD_INT 2
49504: DIVREAL
49505: ST_TO_ADDR
// time := time / r ;
49506: LD_ADDR_VAR 0 8
49510: PUSH
49511: LD_VAR 0 8
49515: PUSH
49516: LD_VAR 0 7
49520: DIVREAL
49521: ST_TO_ADDR
// if time < 0 then
49522: LD_VAR 0 8
49526: PUSH
49527: LD_INT 0
49529: LESS
49530: IFFALSE 49547
// time := time * - 1 ;
49532: LD_ADDR_VAR 0 8
49536: PUSH
49537: LD_VAR 0 8
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: MUL
49546: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
49547: LD_VAR 0 8
49551: PUSH
49552: LD_INT 35
49554: PPUSH
49555: LD_INT 875
49557: PPUSH
49558: CALL_OW 12
49562: PLUS
49563: PPUSH
49564: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
49568: LD_INT 1
49570: PPUSH
49571: LD_INT 5
49573: PPUSH
49574: CALL_OW 12
49578: PPUSH
49579: LD_VAR 0 1
49583: PPUSH
49584: LD_INT 1
49586: PPUSH
49587: CALL_OW 55
// end ;
49591: GO 49404
// end ;
49593: LD_VAR 0 5
49597: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
49598: LD_INT 0
49600: PPUSH
49601: PPUSH
49602: PPUSH
49603: PPUSH
49604: PPUSH
49605: PPUSH
49606: PPUSH
49607: PPUSH
// if not turrets or not factories then
49608: LD_VAR 0 1
49612: NOT
49613: PUSH
49614: LD_VAR 0 2
49618: NOT
49619: OR
49620: IFFALSE 49624
// exit ;
49622: GO 49931
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49624: LD_ADDR_VAR 0 10
49628: PUSH
49629: LD_INT 5
49631: PUSH
49632: LD_INT 6
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: LD_INT 4
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: PUSH
49652: LD_INT 5
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 24
49666: PUSH
49667: LD_INT 25
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 23
49676: PUSH
49677: LD_INT 27
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 42
49690: PUSH
49691: LD_INT 43
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 44
49700: PUSH
49701: LD_INT 46
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 45
49710: PUSH
49711: LD_INT 47
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: LIST
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// result := [ ] ;
49728: LD_ADDR_VAR 0 3
49732: PUSH
49733: EMPTY
49734: ST_TO_ADDR
// for i in turrets do
49735: LD_ADDR_VAR 0 4
49739: PUSH
49740: LD_VAR 0 1
49744: PUSH
49745: FOR_IN
49746: IFFALSE 49929
// begin nat := GetNation ( i ) ;
49748: LD_ADDR_VAR 0 7
49752: PUSH
49753: LD_VAR 0 4
49757: PPUSH
49758: CALL_OW 248
49762: ST_TO_ADDR
// weapon := 0 ;
49763: LD_ADDR_VAR 0 8
49767: PUSH
49768: LD_INT 0
49770: ST_TO_ADDR
// if not nat then
49771: LD_VAR 0 7
49775: NOT
49776: IFFALSE 49780
// continue ;
49778: GO 49745
// for j in list [ nat ] do
49780: LD_ADDR_VAR 0 5
49784: PUSH
49785: LD_VAR 0 10
49789: PUSH
49790: LD_VAR 0 7
49794: ARRAY
49795: PUSH
49796: FOR_IN
49797: IFFALSE 49838
// if GetBWeapon ( i ) = j [ 1 ] then
49799: LD_VAR 0 4
49803: PPUSH
49804: CALL_OW 269
49808: PUSH
49809: LD_VAR 0 5
49813: PUSH
49814: LD_INT 1
49816: ARRAY
49817: EQUAL
49818: IFFALSE 49836
// begin weapon := j [ 2 ] ;
49820: LD_ADDR_VAR 0 8
49824: PUSH
49825: LD_VAR 0 5
49829: PUSH
49830: LD_INT 2
49832: ARRAY
49833: ST_TO_ADDR
// break ;
49834: GO 49838
// end ;
49836: GO 49796
49838: POP
49839: POP
// if not weapon then
49840: LD_VAR 0 8
49844: NOT
49845: IFFALSE 49849
// continue ;
49847: GO 49745
// for k in factories do
49849: LD_ADDR_VAR 0 6
49853: PUSH
49854: LD_VAR 0 2
49858: PUSH
49859: FOR_IN
49860: IFFALSE 49925
// begin weapons := AvailableWeaponList ( k ) ;
49862: LD_ADDR_VAR 0 9
49866: PUSH
49867: LD_VAR 0 6
49871: PPUSH
49872: CALL_OW 478
49876: ST_TO_ADDR
// if not weapons then
49877: LD_VAR 0 9
49881: NOT
49882: IFFALSE 49886
// continue ;
49884: GO 49859
// if weapon in weapons then
49886: LD_VAR 0 8
49890: PUSH
49891: LD_VAR 0 9
49895: IN
49896: IFFALSE 49923
// begin result := [ i , weapon ] ;
49898: LD_ADDR_VAR 0 3
49902: PUSH
49903: LD_VAR 0 4
49907: PUSH
49908: LD_VAR 0 8
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: ST_TO_ADDR
// exit ;
49917: POP
49918: POP
49919: POP
49920: POP
49921: GO 49931
// end ; end ;
49923: GO 49859
49925: POP
49926: POP
// end ;
49927: GO 49745
49929: POP
49930: POP
// end ;
49931: LD_VAR 0 3
49935: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49936: LD_INT 0
49938: PPUSH
// if not side or side > 8 then
49939: LD_VAR 0 3
49943: NOT
49944: PUSH
49945: LD_VAR 0 3
49949: PUSH
49950: LD_INT 8
49952: GREATER
49953: OR
49954: IFFALSE 49958
// exit ;
49956: GO 50017
// if not range then
49958: LD_VAR 0 4
49962: NOT
49963: IFFALSE 49974
// range := - 12 ;
49965: LD_ADDR_VAR 0 4
49969: PUSH
49970: LD_INT 12
49972: NEG
49973: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49974: LD_VAR 0 1
49978: PPUSH
49979: LD_VAR 0 2
49983: PPUSH
49984: LD_VAR 0 3
49988: PPUSH
49989: LD_VAR 0 4
49993: PPUSH
49994: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
49998: LD_VAR 0 1
50002: PPUSH
50003: LD_VAR 0 2
50007: PPUSH
50008: LD_VAR 0 3
50012: PPUSH
50013: CALL_OW 331
// end ;
50017: LD_VAR 0 5
50021: RET
// export function Video ( mode ) ; begin
50022: LD_INT 0
50024: PPUSH
// ingame_video = mode ;
50025: LD_ADDR_OWVAR 52
50029: PUSH
50030: LD_VAR 0 1
50034: ST_TO_ADDR
// interface_hidden = mode ;
50035: LD_ADDR_OWVAR 54
50039: PUSH
50040: LD_VAR 0 1
50044: ST_TO_ADDR
// end ;
50045: LD_VAR 0 2
50049: RET
// export function Join ( array , element ) ; begin
50050: LD_INT 0
50052: PPUSH
// result := Replace ( array , array + 1 , element ) ;
50053: LD_ADDR_VAR 0 3
50057: PUSH
50058: LD_VAR 0 1
50062: PPUSH
50063: LD_VAR 0 1
50067: PUSH
50068: LD_INT 1
50070: PLUS
50071: PPUSH
50072: LD_VAR 0 2
50076: PPUSH
50077: CALL_OW 1
50081: ST_TO_ADDR
// end ;
50082: LD_VAR 0 3
50086: RET
// export function JoinUnion ( array , element ) ; begin
50087: LD_INT 0
50089: PPUSH
// result := array union element ;
50090: LD_ADDR_VAR 0 3
50094: PUSH
50095: LD_VAR 0 1
50099: PUSH
50100: LD_VAR 0 2
50104: UNION
50105: ST_TO_ADDR
// end ;
50106: LD_VAR 0 3
50110: RET
// export function GetBehemoths ( side ) ; begin
50111: LD_INT 0
50113: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
50114: LD_ADDR_VAR 0 2
50118: PUSH
50119: LD_INT 22
50121: PUSH
50122: LD_VAR 0 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 31
50133: PUSH
50134: LD_INT 25
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PPUSH
50145: CALL_OW 69
50149: ST_TO_ADDR
// end ;
50150: LD_VAR 0 2
50154: RET
// export function Shuffle ( array ) ; var i , index ; begin
50155: LD_INT 0
50157: PPUSH
50158: PPUSH
50159: PPUSH
// result := [ ] ;
50160: LD_ADDR_VAR 0 2
50164: PUSH
50165: EMPTY
50166: ST_TO_ADDR
// if not array then
50167: LD_VAR 0 1
50171: NOT
50172: IFFALSE 50176
// exit ;
50174: GO 50275
// Randomize ;
50176: CALL_OW 10
// for i = array downto 1 do
50180: LD_ADDR_VAR 0 3
50184: PUSH
50185: DOUBLE
50186: LD_VAR 0 1
50190: INC
50191: ST_TO_ADDR
50192: LD_INT 1
50194: PUSH
50195: FOR_DOWNTO
50196: IFFALSE 50273
// begin index := rand ( 1 , array ) ;
50198: LD_ADDR_VAR 0 4
50202: PUSH
50203: LD_INT 1
50205: PPUSH
50206: LD_VAR 0 1
50210: PPUSH
50211: CALL_OW 12
50215: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
50216: LD_ADDR_VAR 0 2
50220: PUSH
50221: LD_VAR 0 2
50225: PPUSH
50226: LD_VAR 0 2
50230: PUSH
50231: LD_INT 1
50233: PLUS
50234: PPUSH
50235: LD_VAR 0 1
50239: PUSH
50240: LD_VAR 0 4
50244: ARRAY
50245: PPUSH
50246: CALL_OW 2
50250: ST_TO_ADDR
// array := Delete ( array , index ) ;
50251: LD_ADDR_VAR 0 1
50255: PUSH
50256: LD_VAR 0 1
50260: PPUSH
50261: LD_VAR 0 4
50265: PPUSH
50266: CALL_OW 3
50270: ST_TO_ADDR
// end ;
50271: GO 50195
50273: POP
50274: POP
// end ;
50275: LD_VAR 0 2
50279: RET
// export function GetBaseMaterials ( base ) ; begin
50280: LD_INT 0
50282: PPUSH
// result := [ 0 , 0 , 0 ] ;
50283: LD_ADDR_VAR 0 2
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: LIST
50301: ST_TO_ADDR
// if not base then
50302: LD_VAR 0 1
50306: NOT
50307: IFFALSE 50311
// exit ;
50309: GO 50360
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
50311: LD_ADDR_VAR 0 2
50315: PUSH
50316: LD_VAR 0 1
50320: PPUSH
50321: LD_INT 1
50323: PPUSH
50324: CALL_OW 275
50328: PUSH
50329: LD_VAR 0 1
50333: PPUSH
50334: LD_INT 2
50336: PPUSH
50337: CALL_OW 275
50341: PUSH
50342: LD_VAR 0 1
50346: PPUSH
50347: LD_INT 3
50349: PPUSH
50350: CALL_OW 275
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: LIST
50359: ST_TO_ADDR
// end ;
50360: LD_VAR 0 2
50364: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
50365: LD_INT 0
50367: PPUSH
50368: PPUSH
// result := array ;
50369: LD_ADDR_VAR 0 3
50373: PUSH
50374: LD_VAR 0 1
50378: ST_TO_ADDR
// if size >= result then
50379: LD_VAR 0 2
50383: PUSH
50384: LD_VAR 0 3
50388: GREATEREQUAL
50389: IFFALSE 50393
// exit ;
50391: GO 50443
// if size then
50393: LD_VAR 0 2
50397: IFFALSE 50443
// for i := array downto size do
50399: LD_ADDR_VAR 0 4
50403: PUSH
50404: DOUBLE
50405: LD_VAR 0 1
50409: INC
50410: ST_TO_ADDR
50411: LD_VAR 0 2
50415: PUSH
50416: FOR_DOWNTO
50417: IFFALSE 50441
// result := Delete ( result , result ) ;
50419: LD_ADDR_VAR 0 3
50423: PUSH
50424: LD_VAR 0 3
50428: PPUSH
50429: LD_VAR 0 3
50433: PPUSH
50434: CALL_OW 3
50438: ST_TO_ADDR
50439: GO 50416
50441: POP
50442: POP
// end ;
50443: LD_VAR 0 3
50447: RET
// export function ComExit ( unit ) ; var tmp ; begin
50448: LD_INT 0
50450: PPUSH
50451: PPUSH
// if not IsInUnit ( unit ) then
50452: LD_VAR 0 1
50456: PPUSH
50457: CALL_OW 310
50461: NOT
50462: IFFALSE 50466
// exit ;
50464: GO 50526
// tmp := IsInUnit ( unit ) ;
50466: LD_ADDR_VAR 0 3
50470: PUSH
50471: LD_VAR 0 1
50475: PPUSH
50476: CALL_OW 310
50480: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
50481: LD_VAR 0 3
50485: PPUSH
50486: CALL_OW 247
50490: PUSH
50491: LD_INT 2
50493: EQUAL
50494: IFFALSE 50507
// ComExitVehicle ( unit ) else
50496: LD_VAR 0 1
50500: PPUSH
50501: CALL_OW 121
50505: GO 50516
// ComExitBuilding ( unit ) ;
50507: LD_VAR 0 1
50511: PPUSH
50512: CALL_OW 122
// result := tmp ;
50516: LD_ADDR_VAR 0 2
50520: PUSH
50521: LD_VAR 0 3
50525: ST_TO_ADDR
// end ;
50526: LD_VAR 0 2
50530: RET
// export function ComExitAll ( units ) ; var i ; begin
50531: LD_INT 0
50533: PPUSH
50534: PPUSH
// if not units then
50535: LD_VAR 0 1
50539: NOT
50540: IFFALSE 50544
// exit ;
50542: GO 50570
// for i in units do
50544: LD_ADDR_VAR 0 3
50548: PUSH
50549: LD_VAR 0 1
50553: PUSH
50554: FOR_IN
50555: IFFALSE 50568
// ComExit ( i ) ;
50557: LD_VAR 0 3
50561: PPUSH
50562: CALL 50448 0 1
50566: GO 50554
50568: POP
50569: POP
// end ;
50570: LD_VAR 0 2
50574: RET
// export function ResetHc ; begin
50575: LD_INT 0
50577: PPUSH
// InitHc ;
50578: CALL_OW 19
// hc_importance := 0 ;
50582: LD_ADDR_OWVAR 32
50586: PUSH
50587: LD_INT 0
50589: ST_TO_ADDR
// end ;
50590: LD_VAR 0 1
50594: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
50595: LD_INT 0
50597: PPUSH
50598: PPUSH
50599: PPUSH
// _x := ( x1 + x2 ) div 2 ;
50600: LD_ADDR_VAR 0 6
50604: PUSH
50605: LD_VAR 0 1
50609: PUSH
50610: LD_VAR 0 3
50614: PLUS
50615: PUSH
50616: LD_INT 2
50618: DIV
50619: ST_TO_ADDR
// if _x < 0 then
50620: LD_VAR 0 6
50624: PUSH
50625: LD_INT 0
50627: LESS
50628: IFFALSE 50645
// _x := _x * - 1 ;
50630: LD_ADDR_VAR 0 6
50634: PUSH
50635: LD_VAR 0 6
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: MUL
50644: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50645: LD_ADDR_VAR 0 7
50649: PUSH
50650: LD_VAR 0 2
50654: PUSH
50655: LD_VAR 0 4
50659: PLUS
50660: PUSH
50661: LD_INT 2
50663: DIV
50664: ST_TO_ADDR
// if _y < 0 then
50665: LD_VAR 0 7
50669: PUSH
50670: LD_INT 0
50672: LESS
50673: IFFALSE 50690
// _y := _y * - 1 ;
50675: LD_ADDR_VAR 0 7
50679: PUSH
50680: LD_VAR 0 7
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: MUL
50689: ST_TO_ADDR
// result := [ _x , _y ] ;
50690: LD_ADDR_VAR 0 5
50694: PUSH
50695: LD_VAR 0 6
50699: PUSH
50700: LD_VAR 0 7
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: ST_TO_ADDR
// end ;
50709: LD_VAR 0 5
50713: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50714: LD_INT 0
50716: PPUSH
50717: PPUSH
50718: PPUSH
50719: PPUSH
// task := GetTaskList ( unit ) ;
50720: LD_ADDR_VAR 0 7
50724: PUSH
50725: LD_VAR 0 1
50729: PPUSH
50730: CALL_OW 437
50734: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50735: LD_VAR 0 7
50739: NOT
50740: PUSH
50741: LD_VAR 0 1
50745: PPUSH
50746: LD_VAR 0 2
50750: PPUSH
50751: CALL_OW 308
50755: NOT
50756: AND
50757: IFFALSE 50761
// exit ;
50759: GO 50879
// if IsInArea ( unit , area ) then
50761: LD_VAR 0 1
50765: PPUSH
50766: LD_VAR 0 2
50770: PPUSH
50771: CALL_OW 308
50775: IFFALSE 50793
// begin ComMoveToArea ( unit , goAway ) ;
50777: LD_VAR 0 1
50781: PPUSH
50782: LD_VAR 0 3
50786: PPUSH
50787: CALL_OW 113
// exit ;
50791: GO 50879
// end ; if task [ 1 ] [ 1 ] <> M then
50793: LD_VAR 0 7
50797: PUSH
50798: LD_INT 1
50800: ARRAY
50801: PUSH
50802: LD_INT 1
50804: ARRAY
50805: PUSH
50806: LD_STRING M
50808: NONEQUAL
50809: IFFALSE 50813
// exit ;
50811: GO 50879
// x := task [ 1 ] [ 2 ] ;
50813: LD_ADDR_VAR 0 5
50817: PUSH
50818: LD_VAR 0 7
50822: PUSH
50823: LD_INT 1
50825: ARRAY
50826: PUSH
50827: LD_INT 2
50829: ARRAY
50830: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50831: LD_ADDR_VAR 0 6
50835: PUSH
50836: LD_VAR 0 7
50840: PUSH
50841: LD_INT 1
50843: ARRAY
50844: PUSH
50845: LD_INT 3
50847: ARRAY
50848: ST_TO_ADDR
// if InArea ( x , y , area ) then
50849: LD_VAR 0 5
50853: PPUSH
50854: LD_VAR 0 6
50858: PPUSH
50859: LD_VAR 0 2
50863: PPUSH
50864: CALL_OW 309
50868: IFFALSE 50879
// ComStop ( unit ) ;
50870: LD_VAR 0 1
50874: PPUSH
50875: CALL_OW 141
// end ;
50879: LD_VAR 0 4
50883: RET
// export function Abs ( value ) ; begin
50884: LD_INT 0
50886: PPUSH
// result := value ;
50887: LD_ADDR_VAR 0 2
50891: PUSH
50892: LD_VAR 0 1
50896: ST_TO_ADDR
// if value < 0 then
50897: LD_VAR 0 1
50901: PUSH
50902: LD_INT 0
50904: LESS
50905: IFFALSE 50922
// result := value * - 1 ;
50907: LD_ADDR_VAR 0 2
50911: PUSH
50912: LD_VAR 0 1
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: MUL
50921: ST_TO_ADDR
// end ;
50922: LD_VAR 0 2
50926: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50927: LD_INT 0
50929: PPUSH
50930: PPUSH
50931: PPUSH
50932: PPUSH
50933: PPUSH
50934: PPUSH
50935: PPUSH
50936: PPUSH
// if not unit or not building then
50937: LD_VAR 0 1
50941: NOT
50942: PUSH
50943: LD_VAR 0 2
50947: NOT
50948: OR
50949: IFFALSE 50953
// exit ;
50951: GO 51179
// x := GetX ( building ) ;
50953: LD_ADDR_VAR 0 4
50957: PUSH
50958: LD_VAR 0 2
50962: PPUSH
50963: CALL_OW 250
50967: ST_TO_ADDR
// y := GetY ( building ) ;
50968: LD_ADDR_VAR 0 6
50972: PUSH
50973: LD_VAR 0 2
50977: PPUSH
50978: CALL_OW 251
50982: ST_TO_ADDR
// d := GetDir ( building ) ;
50983: LD_ADDR_VAR 0 8
50987: PUSH
50988: LD_VAR 0 2
50992: PPUSH
50993: CALL_OW 254
50997: ST_TO_ADDR
// r := 4 ;
50998: LD_ADDR_VAR 0 9
51002: PUSH
51003: LD_INT 4
51005: ST_TO_ADDR
// for i := 1 to 5 do
51006: LD_ADDR_VAR 0 10
51010: PUSH
51011: DOUBLE
51012: LD_INT 1
51014: DEC
51015: ST_TO_ADDR
51016: LD_INT 5
51018: PUSH
51019: FOR_TO
51020: IFFALSE 51177
// begin _x := ShiftX ( x , d , r + i ) ;
51022: LD_ADDR_VAR 0 5
51026: PUSH
51027: LD_VAR 0 4
51031: PPUSH
51032: LD_VAR 0 8
51036: PPUSH
51037: LD_VAR 0 9
51041: PUSH
51042: LD_VAR 0 10
51046: PLUS
51047: PPUSH
51048: CALL_OW 272
51052: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
51053: LD_ADDR_VAR 0 7
51057: PUSH
51058: LD_VAR 0 6
51062: PPUSH
51063: LD_VAR 0 8
51067: PPUSH
51068: LD_VAR 0 9
51072: PUSH
51073: LD_VAR 0 10
51077: PLUS
51078: PPUSH
51079: CALL_OW 273
51083: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
51084: LD_VAR 0 5
51088: PPUSH
51089: LD_VAR 0 7
51093: PPUSH
51094: CALL_OW 488
51098: PUSH
51099: LD_VAR 0 5
51103: PPUSH
51104: LD_VAR 0 7
51108: PPUSH
51109: CALL_OW 428
51113: PPUSH
51114: CALL_OW 247
51118: PUSH
51119: LD_INT 3
51121: PUSH
51122: LD_INT 2
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: IN
51129: NOT
51130: AND
51131: IFFALSE 51175
// begin ComMoveXY ( unit , _x , _y ) ;
51133: LD_VAR 0 1
51137: PPUSH
51138: LD_VAR 0 5
51142: PPUSH
51143: LD_VAR 0 7
51147: PPUSH
51148: CALL_OW 111
// result := [ _x , _y ] ;
51152: LD_ADDR_VAR 0 3
51156: PUSH
51157: LD_VAR 0 5
51161: PUSH
51162: LD_VAR 0 7
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: ST_TO_ADDR
// exit ;
51171: POP
51172: POP
51173: GO 51179
// end ; end ;
51175: GO 51019
51177: POP
51178: POP
// end ;
51179: LD_VAR 0 3
51183: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
51184: LD_INT 0
51186: PPUSH
51187: PPUSH
51188: PPUSH
// result := 0 ;
51189: LD_ADDR_VAR 0 3
51193: PUSH
51194: LD_INT 0
51196: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
51197: LD_VAR 0 1
51201: PUSH
51202: LD_INT 0
51204: LESS
51205: PUSH
51206: LD_VAR 0 1
51210: PUSH
51211: LD_INT 8
51213: GREATER
51214: OR
51215: PUSH
51216: LD_VAR 0 2
51220: PUSH
51221: LD_INT 0
51223: LESS
51224: OR
51225: PUSH
51226: LD_VAR 0 2
51230: PUSH
51231: LD_INT 8
51233: GREATER
51234: OR
51235: IFFALSE 51239
// exit ;
51237: GO 51314
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
51239: LD_ADDR_VAR 0 4
51243: PUSH
51244: LD_INT 22
51246: PUSH
51247: LD_VAR 0 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PPUSH
51256: CALL_OW 69
51260: PUSH
51261: FOR_IN
51262: IFFALSE 51312
// begin un := UnitShoot ( i ) ;
51264: LD_ADDR_VAR 0 5
51268: PUSH
51269: LD_VAR 0 4
51273: PPUSH
51274: CALL_OW 504
51278: ST_TO_ADDR
// if GetSide ( un ) = side1 then
51279: LD_VAR 0 5
51283: PPUSH
51284: CALL_OW 255
51288: PUSH
51289: LD_VAR 0 1
51293: EQUAL
51294: IFFALSE 51310
// begin result := un ;
51296: LD_ADDR_VAR 0 3
51300: PUSH
51301: LD_VAR 0 5
51305: ST_TO_ADDR
// exit ;
51306: POP
51307: POP
51308: GO 51314
// end ; end ;
51310: GO 51261
51312: POP
51313: POP
// end ;
51314: LD_VAR 0 3
51318: RET
// export function GetCargoBay ( units ) ; begin
51319: LD_INT 0
51321: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
51322: LD_ADDR_VAR 0 2
51326: PUSH
51327: LD_VAR 0 1
51331: PPUSH
51332: LD_INT 2
51334: PUSH
51335: LD_INT 34
51337: PUSH
51338: LD_INT 12
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 34
51347: PUSH
51348: LD_INT 51
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 34
51357: PUSH
51358: LD_INT 32
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 34
51367: PUSH
51368: LD_EXP 83
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: PPUSH
51384: CALL_OW 72
51388: ST_TO_ADDR
// end ;
51389: LD_VAR 0 2
51393: RET
// export function Negate ( value ) ; begin
51394: LD_INT 0
51396: PPUSH
// result := not value ;
51397: LD_ADDR_VAR 0 2
51401: PUSH
51402: LD_VAR 0 1
51406: NOT
51407: ST_TO_ADDR
// end ;
51408: LD_VAR 0 2
51412: RET
// export function Inc ( value ) ; begin
51413: LD_INT 0
51415: PPUSH
// result := value + 1 ;
51416: LD_ADDR_VAR 0 2
51420: PUSH
51421: LD_VAR 0 1
51425: PUSH
51426: LD_INT 1
51428: PLUS
51429: ST_TO_ADDR
// end ;
51430: LD_VAR 0 2
51434: RET
// export function Dec ( value ) ; begin
51435: LD_INT 0
51437: PPUSH
// result := value - 1 ;
51438: LD_ADDR_VAR 0 2
51442: PUSH
51443: LD_VAR 0 1
51447: PUSH
51448: LD_INT 1
51450: MINUS
51451: ST_TO_ADDR
// end ;
51452: LD_VAR 0 2
51456: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
51457: LD_INT 0
51459: PPUSH
51460: PPUSH
51461: PPUSH
51462: PPUSH
51463: PPUSH
51464: PPUSH
51465: PPUSH
51466: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
51467: LD_VAR 0 1
51471: PPUSH
51472: LD_VAR 0 2
51476: PPUSH
51477: CALL_OW 488
51481: NOT
51482: PUSH
51483: LD_VAR 0 3
51487: PPUSH
51488: LD_VAR 0 4
51492: PPUSH
51493: CALL_OW 488
51497: NOT
51498: OR
51499: IFFALSE 51512
// begin result := - 1 ;
51501: LD_ADDR_VAR 0 5
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: ST_TO_ADDR
// exit ;
51510: GO 51747
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
51512: LD_ADDR_VAR 0 12
51516: PUSH
51517: LD_VAR 0 1
51521: PPUSH
51522: LD_VAR 0 2
51526: PPUSH
51527: LD_VAR 0 3
51531: PPUSH
51532: LD_VAR 0 4
51536: PPUSH
51537: CALL 50595 0 4
51541: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
51542: LD_ADDR_VAR 0 11
51546: PUSH
51547: LD_VAR 0 1
51551: PPUSH
51552: LD_VAR 0 2
51556: PPUSH
51557: LD_VAR 0 12
51561: PUSH
51562: LD_INT 1
51564: ARRAY
51565: PPUSH
51566: LD_VAR 0 12
51570: PUSH
51571: LD_INT 2
51573: ARRAY
51574: PPUSH
51575: CALL_OW 298
51579: ST_TO_ADDR
// distance := 9999 ;
51580: LD_ADDR_VAR 0 10
51584: PUSH
51585: LD_INT 9999
51587: ST_TO_ADDR
// for i := 0 to 5 do
51588: LD_ADDR_VAR 0 6
51592: PUSH
51593: DOUBLE
51594: LD_INT 0
51596: DEC
51597: ST_TO_ADDR
51598: LD_INT 5
51600: PUSH
51601: FOR_TO
51602: IFFALSE 51745
// begin _x := ShiftX ( x1 , i , centerDist ) ;
51604: LD_ADDR_VAR 0 7
51608: PUSH
51609: LD_VAR 0 1
51613: PPUSH
51614: LD_VAR 0 6
51618: PPUSH
51619: LD_VAR 0 11
51623: PPUSH
51624: CALL_OW 272
51628: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51629: LD_ADDR_VAR 0 8
51633: PUSH
51634: LD_VAR 0 2
51638: PPUSH
51639: LD_VAR 0 6
51643: PPUSH
51644: LD_VAR 0 11
51648: PPUSH
51649: CALL_OW 273
51653: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51654: LD_VAR 0 7
51658: PPUSH
51659: LD_VAR 0 8
51663: PPUSH
51664: CALL_OW 488
51668: NOT
51669: IFFALSE 51673
// continue ;
51671: GO 51601
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51673: LD_ADDR_VAR 0 9
51677: PUSH
51678: LD_VAR 0 12
51682: PUSH
51683: LD_INT 1
51685: ARRAY
51686: PPUSH
51687: LD_VAR 0 12
51691: PUSH
51692: LD_INT 2
51694: ARRAY
51695: PPUSH
51696: LD_VAR 0 7
51700: PPUSH
51701: LD_VAR 0 8
51705: PPUSH
51706: CALL_OW 298
51710: ST_TO_ADDR
// if tmp < distance then
51711: LD_VAR 0 9
51715: PUSH
51716: LD_VAR 0 10
51720: LESS
51721: IFFALSE 51743
// begin result := i ;
51723: LD_ADDR_VAR 0 5
51727: PUSH
51728: LD_VAR 0 6
51732: ST_TO_ADDR
// distance := tmp ;
51733: LD_ADDR_VAR 0 10
51737: PUSH
51738: LD_VAR 0 9
51742: ST_TO_ADDR
// end ; end ;
51743: GO 51601
51745: POP
51746: POP
// end ;
51747: LD_VAR 0 5
51751: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51752: LD_INT 0
51754: PPUSH
51755: PPUSH
// if not driver or not IsInUnit ( driver ) then
51756: LD_VAR 0 1
51760: NOT
51761: PUSH
51762: LD_VAR 0 1
51766: PPUSH
51767: CALL_OW 310
51771: NOT
51772: OR
51773: IFFALSE 51777
// exit ;
51775: GO 51867
// vehicle := IsInUnit ( driver ) ;
51777: LD_ADDR_VAR 0 3
51781: PUSH
51782: LD_VAR 0 1
51786: PPUSH
51787: CALL_OW 310
51791: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51792: LD_VAR 0 1
51796: PPUSH
51797: LD_STRING \
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: PUSH
51827: LD_STRING E
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_VAR 0 3
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PPUSH
51863: CALL_OW 446
// end ;
51867: LD_VAR 0 2
51871: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51872: LD_INT 0
51874: PPUSH
51875: PPUSH
// if not driver or not IsInUnit ( driver ) then
51876: LD_VAR 0 1
51880: NOT
51881: PUSH
51882: LD_VAR 0 1
51886: PPUSH
51887: CALL_OW 310
51891: NOT
51892: OR
51893: IFFALSE 51897
// exit ;
51895: GO 51987
// vehicle := IsInUnit ( driver ) ;
51897: LD_ADDR_VAR 0 3
51901: PUSH
51902: LD_VAR 0 1
51906: PPUSH
51907: CALL_OW 310
51911: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51912: LD_VAR 0 1
51916: PPUSH
51917: LD_STRING \
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: PUSH
51947: LD_STRING E
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_VAR 0 3
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PPUSH
51983: CALL_OW 447
// end ;
51987: LD_VAR 0 2
51991: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51992: LD_INT 0
51994: PPUSH
51995: PPUSH
51996: PPUSH
// tmp := [ ] ;
51997: LD_ADDR_VAR 0 5
52001: PUSH
52002: EMPTY
52003: ST_TO_ADDR
// for i in units do
52004: LD_ADDR_VAR 0 4
52008: PUSH
52009: LD_VAR 0 1
52013: PUSH
52014: FOR_IN
52015: IFFALSE 52053
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
52017: LD_ADDR_VAR 0 5
52021: PUSH
52022: LD_VAR 0 5
52026: PPUSH
52027: LD_VAR 0 5
52031: PUSH
52032: LD_INT 1
52034: PLUS
52035: PPUSH
52036: LD_VAR 0 4
52040: PPUSH
52041: CALL_OW 256
52045: PPUSH
52046: CALL_OW 2
52050: ST_TO_ADDR
52051: GO 52014
52053: POP
52054: POP
// if not tmp then
52055: LD_VAR 0 5
52059: NOT
52060: IFFALSE 52064
// exit ;
52062: GO 52112
// if asc then
52064: LD_VAR 0 2
52068: IFFALSE 52092
// result := SortListByListAsc ( units , tmp ) else
52070: LD_ADDR_VAR 0 3
52074: PUSH
52075: LD_VAR 0 1
52079: PPUSH
52080: LD_VAR 0 5
52084: PPUSH
52085: CALL_OW 76
52089: ST_TO_ADDR
52090: GO 52112
// result := SortListByListDesc ( units , tmp ) ;
52092: LD_ADDR_VAR 0 3
52096: PUSH
52097: LD_VAR 0 1
52101: PPUSH
52102: LD_VAR 0 5
52106: PPUSH
52107: CALL_OW 77
52111: ST_TO_ADDR
// end ;
52112: LD_VAR 0 3
52116: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
52117: LD_INT 0
52119: PPUSH
52120: PPUSH
// task := GetTaskList ( mech ) ;
52121: LD_ADDR_VAR 0 4
52125: PUSH
52126: LD_VAR 0 1
52130: PPUSH
52131: CALL_OW 437
52135: ST_TO_ADDR
// if not task then
52136: LD_VAR 0 4
52140: NOT
52141: IFFALSE 52145
// exit ;
52143: GO 52187
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
52145: LD_ADDR_VAR 0 3
52149: PUSH
52150: LD_VAR 0 4
52154: PUSH
52155: LD_INT 1
52157: ARRAY
52158: PUSH
52159: LD_INT 1
52161: ARRAY
52162: PUSH
52163: LD_STRING r
52165: EQUAL
52166: PUSH
52167: LD_VAR 0 4
52171: PUSH
52172: LD_INT 1
52174: ARRAY
52175: PUSH
52176: LD_INT 4
52178: ARRAY
52179: PUSH
52180: LD_VAR 0 2
52184: EQUAL
52185: AND
52186: ST_TO_ADDR
// end ;
52187: LD_VAR 0 3
52191: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
52192: LD_INT 0
52194: PPUSH
// SetDir ( unit , d ) ;
52195: LD_VAR 0 1
52199: PPUSH
52200: LD_VAR 0 4
52204: PPUSH
52205: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
52209: LD_VAR 0 1
52213: PPUSH
52214: LD_VAR 0 2
52218: PPUSH
52219: LD_VAR 0 3
52223: PPUSH
52224: LD_VAR 0 5
52228: PPUSH
52229: CALL_OW 48
// end ;
52233: LD_VAR 0 6
52237: RET
// export function ToNaturalNumber ( number ) ; begin
52238: LD_INT 0
52240: PPUSH
// result := number div 1 ;
52241: LD_ADDR_VAR 0 2
52245: PUSH
52246: LD_VAR 0 1
52250: PUSH
52251: LD_INT 1
52253: DIV
52254: ST_TO_ADDR
// if number < 0 then
52255: LD_VAR 0 1
52259: PUSH
52260: LD_INT 0
52262: LESS
52263: IFFALSE 52273
// result := 0 ;
52265: LD_ADDR_VAR 0 2
52269: PUSH
52270: LD_INT 0
52272: ST_TO_ADDR
// end ;
52273: LD_VAR 0 2
52277: RET
// export function SortByClass ( units , class ) ; var un ; begin
52278: LD_INT 0
52280: PPUSH
52281: PPUSH
// if not units or not class then
52282: LD_VAR 0 1
52286: NOT
52287: PUSH
52288: LD_VAR 0 2
52292: NOT
52293: OR
52294: IFFALSE 52298
// exit ;
52296: GO 52393
// result := [ ] ;
52298: LD_ADDR_VAR 0 3
52302: PUSH
52303: EMPTY
52304: ST_TO_ADDR
// for un in units do
52305: LD_ADDR_VAR 0 4
52309: PUSH
52310: LD_VAR 0 1
52314: PUSH
52315: FOR_IN
52316: IFFALSE 52391
// if GetClass ( un ) = class then
52318: LD_VAR 0 4
52322: PPUSH
52323: CALL_OW 257
52327: PUSH
52328: LD_VAR 0 2
52332: EQUAL
52333: IFFALSE 52360
// result := Insert ( result , 1 , un ) else
52335: LD_ADDR_VAR 0 3
52339: PUSH
52340: LD_VAR 0 3
52344: PPUSH
52345: LD_INT 1
52347: PPUSH
52348: LD_VAR 0 4
52352: PPUSH
52353: CALL_OW 2
52357: ST_TO_ADDR
52358: GO 52389
// result := Replace ( result , result + 1 , un ) ;
52360: LD_ADDR_VAR 0 3
52364: PUSH
52365: LD_VAR 0 3
52369: PPUSH
52370: LD_VAR 0 3
52374: PUSH
52375: LD_INT 1
52377: PLUS
52378: PPUSH
52379: LD_VAR 0 4
52383: PPUSH
52384: CALL_OW 1
52388: ST_TO_ADDR
52389: GO 52315
52391: POP
52392: POP
// end ;
52393: LD_VAR 0 3
52397: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
52398: LD_INT 0
52400: PPUSH
52401: PPUSH
52402: PPUSH
52403: PPUSH
52404: PPUSH
52405: PPUSH
52406: PPUSH
// result := [ ] ;
52407: LD_ADDR_VAR 0 4
52411: PUSH
52412: EMPTY
52413: ST_TO_ADDR
// if x - r < 0 then
52414: LD_VAR 0 1
52418: PUSH
52419: LD_VAR 0 3
52423: MINUS
52424: PUSH
52425: LD_INT 0
52427: LESS
52428: IFFALSE 52440
// min_x := 0 else
52430: LD_ADDR_VAR 0 8
52434: PUSH
52435: LD_INT 0
52437: ST_TO_ADDR
52438: GO 52456
// min_x := x - r ;
52440: LD_ADDR_VAR 0 8
52444: PUSH
52445: LD_VAR 0 1
52449: PUSH
52450: LD_VAR 0 3
52454: MINUS
52455: ST_TO_ADDR
// if y - r < 0 then
52456: LD_VAR 0 2
52460: PUSH
52461: LD_VAR 0 3
52465: MINUS
52466: PUSH
52467: LD_INT 0
52469: LESS
52470: IFFALSE 52482
// min_y := 0 else
52472: LD_ADDR_VAR 0 7
52476: PUSH
52477: LD_INT 0
52479: ST_TO_ADDR
52480: GO 52498
// min_y := y - r ;
52482: LD_ADDR_VAR 0 7
52486: PUSH
52487: LD_VAR 0 2
52491: PUSH
52492: LD_VAR 0 3
52496: MINUS
52497: ST_TO_ADDR
// max_x := x + r ;
52498: LD_ADDR_VAR 0 9
52502: PUSH
52503: LD_VAR 0 1
52507: PUSH
52508: LD_VAR 0 3
52512: PLUS
52513: ST_TO_ADDR
// max_y := y + r ;
52514: LD_ADDR_VAR 0 10
52518: PUSH
52519: LD_VAR 0 2
52523: PUSH
52524: LD_VAR 0 3
52528: PLUS
52529: ST_TO_ADDR
// for _x = min_x to max_x do
52530: LD_ADDR_VAR 0 5
52534: PUSH
52535: DOUBLE
52536: LD_VAR 0 8
52540: DEC
52541: ST_TO_ADDR
52542: LD_VAR 0 9
52546: PUSH
52547: FOR_TO
52548: IFFALSE 52649
// for _y = min_y to max_y do
52550: LD_ADDR_VAR 0 6
52554: PUSH
52555: DOUBLE
52556: LD_VAR 0 7
52560: DEC
52561: ST_TO_ADDR
52562: LD_VAR 0 10
52566: PUSH
52567: FOR_TO
52568: IFFALSE 52645
// begin if not ValidHex ( _x , _y ) then
52570: LD_VAR 0 5
52574: PPUSH
52575: LD_VAR 0 6
52579: PPUSH
52580: CALL_OW 488
52584: NOT
52585: IFFALSE 52589
// continue ;
52587: GO 52567
// if GetResourceTypeXY ( _x , _y ) then
52589: LD_VAR 0 5
52593: PPUSH
52594: LD_VAR 0 6
52598: PPUSH
52599: CALL_OW 283
52603: IFFALSE 52643
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
52605: LD_ADDR_VAR 0 4
52609: PUSH
52610: LD_VAR 0 4
52614: PPUSH
52615: LD_VAR 0 4
52619: PUSH
52620: LD_INT 1
52622: PLUS
52623: PPUSH
52624: LD_VAR 0 5
52628: PUSH
52629: LD_VAR 0 6
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PPUSH
52638: CALL_OW 1
52642: ST_TO_ADDR
// end ;
52643: GO 52567
52645: POP
52646: POP
52647: GO 52547
52649: POP
52650: POP
// end ;
52651: LD_VAR 0 4
52655: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52656: LD_INT 0
52658: PPUSH
52659: PPUSH
52660: PPUSH
52661: PPUSH
52662: PPUSH
52663: PPUSH
52664: PPUSH
52665: PPUSH
// if not units then
52666: LD_VAR 0 1
52670: NOT
52671: IFFALSE 52675
// exit ;
52673: GO 53201
// result := UnitFilter ( units , [ f_ok ] ) ;
52675: LD_ADDR_VAR 0 3
52679: PUSH
52680: LD_VAR 0 1
52684: PPUSH
52685: LD_INT 50
52687: PUSH
52688: EMPTY
52689: LIST
52690: PPUSH
52691: CALL_OW 72
52695: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52696: LD_ADDR_VAR 0 8
52700: PUSH
52701: LD_VAR 0 1
52705: PUSH
52706: LD_INT 1
52708: ARRAY
52709: PPUSH
52710: CALL_OW 255
52714: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
52715: LD_ADDR_VAR 0 10
52719: PUSH
52720: LD_INT 29
52722: PUSH
52723: LD_EXP 86
52727: PUSH
52728: LD_INT 49
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: ST_TO_ADDR
// if not result then
52736: LD_VAR 0 3
52740: NOT
52741: IFFALSE 52745
// exit ;
52743: GO 53201
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52745: LD_ADDR_VAR 0 5
52749: PUSH
52750: LD_INT 81
52752: PUSH
52753: LD_VAR 0 8
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PPUSH
52762: CALL_OW 69
52766: ST_TO_ADDR
// for i in result do
52767: LD_ADDR_VAR 0 4
52771: PUSH
52772: LD_VAR 0 3
52776: PUSH
52777: FOR_IN
52778: IFFALSE 53199
// begin tag := GetTag ( i ) + 1 ;
52780: LD_ADDR_VAR 0 9
52784: PUSH
52785: LD_VAR 0 4
52789: PPUSH
52790: CALL_OW 110
52794: PUSH
52795: LD_INT 1
52797: PLUS
52798: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
52799: LD_ADDR_VAR 0 7
52803: PUSH
52804: LD_VAR 0 4
52808: PPUSH
52809: CALL_OW 250
52813: PPUSH
52814: LD_VAR 0 4
52818: PPUSH
52819: CALL_OW 251
52823: PPUSH
52824: LD_INT 6
52826: PPUSH
52827: CALL 52398 0 3
52831: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
52832: LD_VAR 0 4
52836: PPUSH
52837: CALL_OW 247
52841: PUSH
52842: LD_INT 2
52844: EQUAL
52845: PUSH
52846: LD_VAR 0 7
52850: AND
52851: PUSH
52852: LD_VAR 0 4
52856: PPUSH
52857: CALL_OW 264
52861: PUSH
52862: LD_VAR 0 10
52866: IN
52867: NOT
52868: AND
52869: IFFALSE 52908
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52871: LD_VAR 0 4
52875: PPUSH
52876: LD_VAR 0 7
52880: PUSH
52881: LD_INT 1
52883: ARRAY
52884: PUSH
52885: LD_INT 1
52887: ARRAY
52888: PPUSH
52889: LD_VAR 0 7
52893: PUSH
52894: LD_INT 1
52896: ARRAY
52897: PUSH
52898: LD_INT 2
52900: ARRAY
52901: PPUSH
52902: CALL_OW 116
52906: GO 53197
// if path > tag then
52908: LD_VAR 0 2
52912: PUSH
52913: LD_VAR 0 9
52917: GREATER
52918: IFFALSE 53126
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
52920: LD_ADDR_VAR 0 6
52924: PUSH
52925: LD_VAR 0 5
52929: PPUSH
52930: LD_INT 91
52932: PUSH
52933: LD_VAR 0 4
52937: PUSH
52938: LD_INT 8
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: LIST
52945: PPUSH
52946: CALL_OW 72
52950: ST_TO_ADDR
// if nearEnemy then
52951: LD_VAR 0 6
52955: IFFALSE 53024
// begin if GetWeapon ( i ) = ru_time_lapser then
52957: LD_VAR 0 4
52961: PPUSH
52962: CALL_OW 264
52966: PUSH
52967: LD_INT 49
52969: EQUAL
52970: IFFALSE 52998
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52972: LD_VAR 0 4
52976: PPUSH
52977: LD_VAR 0 6
52981: PPUSH
52982: LD_VAR 0 4
52986: PPUSH
52987: CALL_OW 74
52991: PPUSH
52992: CALL_OW 112
52996: GO 53022
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
52998: LD_VAR 0 4
53002: PPUSH
53003: LD_VAR 0 6
53007: PPUSH
53008: LD_VAR 0 4
53012: PPUSH
53013: CALL_OW 74
53017: PPUSH
53018: CALL_OW 115
// end else
53022: GO 53124
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
53024: LD_VAR 0 4
53028: PPUSH
53029: LD_VAR 0 2
53033: PUSH
53034: LD_VAR 0 9
53038: ARRAY
53039: PUSH
53040: LD_INT 1
53042: ARRAY
53043: PPUSH
53044: LD_VAR 0 2
53048: PUSH
53049: LD_VAR 0 9
53053: ARRAY
53054: PUSH
53055: LD_INT 2
53057: ARRAY
53058: PPUSH
53059: CALL_OW 297
53063: PUSH
53064: LD_INT 6
53066: GREATER
53067: IFFALSE 53110
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
53069: LD_VAR 0 4
53073: PPUSH
53074: LD_VAR 0 2
53078: PUSH
53079: LD_VAR 0 9
53083: ARRAY
53084: PUSH
53085: LD_INT 1
53087: ARRAY
53088: PPUSH
53089: LD_VAR 0 2
53093: PUSH
53094: LD_VAR 0 9
53098: ARRAY
53099: PUSH
53100: LD_INT 2
53102: ARRAY
53103: PPUSH
53104: CALL_OW 114
53108: GO 53124
// SetTag ( i , tag ) ;
53110: LD_VAR 0 4
53114: PPUSH
53115: LD_VAR 0 9
53119: PPUSH
53120: CALL_OW 109
// end else
53124: GO 53197
// if enemy then
53126: LD_VAR 0 5
53130: IFFALSE 53197
// begin if GetWeapon ( i ) = ru_time_lapser then
53132: LD_VAR 0 4
53136: PPUSH
53137: CALL_OW 264
53141: PUSH
53142: LD_INT 49
53144: EQUAL
53145: IFFALSE 53173
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
53147: LD_VAR 0 4
53151: PPUSH
53152: LD_VAR 0 5
53156: PPUSH
53157: LD_VAR 0 4
53161: PPUSH
53162: CALL_OW 74
53166: PPUSH
53167: CALL_OW 112
53171: GO 53197
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
53173: LD_VAR 0 4
53177: PPUSH
53178: LD_VAR 0 5
53182: PPUSH
53183: LD_VAR 0 4
53187: PPUSH
53188: CALL_OW 74
53192: PPUSH
53193: CALL_OW 115
// end ; end ;
53197: GO 52777
53199: POP
53200: POP
// end ;
53201: LD_VAR 0 3
53205: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
53206: LD_INT 0
53208: PPUSH
53209: PPUSH
53210: PPUSH
// if not unit or IsInUnit ( unit ) then
53211: LD_VAR 0 1
53215: NOT
53216: PUSH
53217: LD_VAR 0 1
53221: PPUSH
53222: CALL_OW 310
53226: OR
53227: IFFALSE 53231
// exit ;
53229: GO 53322
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
53231: LD_ADDR_VAR 0 4
53235: PUSH
53236: LD_VAR 0 1
53240: PPUSH
53241: CALL_OW 250
53245: PPUSH
53246: LD_VAR 0 2
53250: PPUSH
53251: LD_INT 1
53253: PPUSH
53254: CALL_OW 272
53258: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
53259: LD_ADDR_VAR 0 5
53263: PUSH
53264: LD_VAR 0 1
53268: PPUSH
53269: CALL_OW 251
53273: PPUSH
53274: LD_VAR 0 2
53278: PPUSH
53279: LD_INT 1
53281: PPUSH
53282: CALL_OW 273
53286: ST_TO_ADDR
// if ValidHex ( x , y ) then
53287: LD_VAR 0 4
53291: PPUSH
53292: LD_VAR 0 5
53296: PPUSH
53297: CALL_OW 488
53301: IFFALSE 53322
// ComTurnXY ( unit , x , y ) ;
53303: LD_VAR 0 1
53307: PPUSH
53308: LD_VAR 0 4
53312: PPUSH
53313: LD_VAR 0 5
53317: PPUSH
53318: CALL_OW 118
// end ;
53322: LD_VAR 0 3
53326: RET
// export function SeeUnits ( side , units ) ; var i ; begin
53327: LD_INT 0
53329: PPUSH
53330: PPUSH
// result := false ;
53331: LD_ADDR_VAR 0 3
53335: PUSH
53336: LD_INT 0
53338: ST_TO_ADDR
// if not units then
53339: LD_VAR 0 2
53343: NOT
53344: IFFALSE 53348
// exit ;
53346: GO 53393
// for i in units do
53348: LD_ADDR_VAR 0 4
53352: PUSH
53353: LD_VAR 0 2
53357: PUSH
53358: FOR_IN
53359: IFFALSE 53391
// if See ( side , i ) then
53361: LD_VAR 0 1
53365: PPUSH
53366: LD_VAR 0 4
53370: PPUSH
53371: CALL_OW 292
53375: IFFALSE 53389
// begin result := true ;
53377: LD_ADDR_VAR 0 3
53381: PUSH
53382: LD_INT 1
53384: ST_TO_ADDR
// exit ;
53385: POP
53386: POP
53387: GO 53393
// end ;
53389: GO 53358
53391: POP
53392: POP
// end ;
53393: LD_VAR 0 3
53397: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
53398: LD_INT 0
53400: PPUSH
53401: PPUSH
53402: PPUSH
53403: PPUSH
// if not unit or not points then
53404: LD_VAR 0 1
53408: NOT
53409: PUSH
53410: LD_VAR 0 2
53414: NOT
53415: OR
53416: IFFALSE 53420
// exit ;
53418: GO 53510
// dist := 99999 ;
53420: LD_ADDR_VAR 0 5
53424: PUSH
53425: LD_INT 99999
53427: ST_TO_ADDR
// for i in points do
53428: LD_ADDR_VAR 0 4
53432: PUSH
53433: LD_VAR 0 2
53437: PUSH
53438: FOR_IN
53439: IFFALSE 53508
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
53441: LD_ADDR_VAR 0 6
53445: PUSH
53446: LD_VAR 0 1
53450: PPUSH
53451: LD_VAR 0 4
53455: PUSH
53456: LD_INT 1
53458: ARRAY
53459: PPUSH
53460: LD_VAR 0 4
53464: PUSH
53465: LD_INT 2
53467: ARRAY
53468: PPUSH
53469: CALL_OW 297
53473: ST_TO_ADDR
// if tmpDist < dist then
53474: LD_VAR 0 6
53478: PUSH
53479: LD_VAR 0 5
53483: LESS
53484: IFFALSE 53506
// begin result := i ;
53486: LD_ADDR_VAR 0 3
53490: PUSH
53491: LD_VAR 0 4
53495: ST_TO_ADDR
// dist := tmpDist ;
53496: LD_ADDR_VAR 0 5
53500: PUSH
53501: LD_VAR 0 6
53505: ST_TO_ADDR
// end ; end ;
53506: GO 53438
53508: POP
53509: POP
// end ;
53510: LD_VAR 0 3
53514: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
53515: LD_INT 0
53517: PPUSH
// uc_side := side ;
53518: LD_ADDR_OWVAR 20
53522: PUSH
53523: LD_VAR 0 1
53527: ST_TO_ADDR
// uc_nation := 3 ;
53528: LD_ADDR_OWVAR 21
53532: PUSH
53533: LD_INT 3
53535: ST_TO_ADDR
// vc_chassis := 25 ;
53536: LD_ADDR_OWVAR 37
53540: PUSH
53541: LD_INT 25
53543: ST_TO_ADDR
// vc_engine := engine_siberite ;
53544: LD_ADDR_OWVAR 39
53548: PUSH
53549: LD_INT 3
53551: ST_TO_ADDR
// vc_control := control_computer ;
53552: LD_ADDR_OWVAR 38
53556: PUSH
53557: LD_INT 3
53559: ST_TO_ADDR
// vc_weapon := 59 ;
53560: LD_ADDR_OWVAR 40
53564: PUSH
53565: LD_INT 59
53567: ST_TO_ADDR
// result := CreateVehicle ;
53568: LD_ADDR_VAR 0 5
53572: PUSH
53573: CALL_OW 45
53577: ST_TO_ADDR
// SetDir ( result , d ) ;
53578: LD_VAR 0 5
53582: PPUSH
53583: LD_VAR 0 4
53587: PPUSH
53588: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
53592: LD_VAR 0 5
53596: PPUSH
53597: LD_VAR 0 2
53601: PPUSH
53602: LD_VAR 0 3
53606: PPUSH
53607: LD_INT 0
53609: PPUSH
53610: CALL_OW 48
// end ;
53614: LD_VAR 0 5
53618: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
53619: LD_INT 0
53621: PPUSH
53622: PPUSH
53623: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
53624: LD_ADDR_VAR 0 2
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 0
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
53647: LD_VAR 0 1
53651: NOT
53652: PUSH
53653: LD_VAR 0 1
53657: PPUSH
53658: CALL_OW 264
53662: PUSH
53663: LD_INT 12
53665: PUSH
53666: LD_INT 51
53668: PUSH
53669: LD_INT 32
53671: PUSH
53672: LD_EXP 83
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: IN
53683: NOT
53684: OR
53685: IFFALSE 53689
// exit ;
53687: GO 53787
// for i := 1 to 3 do
53689: LD_ADDR_VAR 0 3
53693: PUSH
53694: DOUBLE
53695: LD_INT 1
53697: DEC
53698: ST_TO_ADDR
53699: LD_INT 3
53701: PUSH
53702: FOR_TO
53703: IFFALSE 53785
// begin tmp := GetCargo ( cargo , i ) ;
53705: LD_ADDR_VAR 0 4
53709: PUSH
53710: LD_VAR 0 1
53714: PPUSH
53715: LD_VAR 0 3
53719: PPUSH
53720: CALL_OW 289
53724: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
53725: LD_ADDR_VAR 0 2
53729: PUSH
53730: LD_VAR 0 2
53734: PPUSH
53735: LD_VAR 0 3
53739: PPUSH
53740: LD_VAR 0 4
53744: PPUSH
53745: CALL_OW 1
53749: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
53750: LD_ADDR_VAR 0 2
53754: PUSH
53755: LD_VAR 0 2
53759: PPUSH
53760: LD_INT 4
53762: PPUSH
53763: LD_VAR 0 2
53767: PUSH
53768: LD_INT 4
53770: ARRAY
53771: PUSH
53772: LD_VAR 0 4
53776: PLUS
53777: PPUSH
53778: CALL_OW 1
53782: ST_TO_ADDR
// end ;
53783: GO 53702
53785: POP
53786: POP
// end ;
53787: LD_VAR 0 2
53791: RET
// export function Length ( array ) ; begin
53792: LD_INT 0
53794: PPUSH
// result := array + 0 ;
53795: LD_ADDR_VAR 0 2
53799: PUSH
53800: LD_VAR 0 1
53804: PUSH
53805: LD_INT 0
53807: PLUS
53808: ST_TO_ADDR
// end ;
53809: LD_VAR 0 2
53813: RET
