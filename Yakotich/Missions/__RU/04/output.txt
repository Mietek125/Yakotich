// starting var b , n ; begin ResetFog ;
   0: NOP4
// Init ;
   4: NOP4
// SetBname ( NorthLenin , lenin ) ;
   8: LD_INT 253
  10: PPUSH
  11: LD_STRING lenin
  13: PPUSH
  14: NOP4
// SetBname ( SouthLenin , lenin ) ;
  18: LD_INT 218
  20: PPUSH
  21: LD_STRING lenin
  23: PPUSH
  24: NOP4
// SetBname ( MorozovBase , OC ) ;
  28: LD_INT 348
  30: PPUSH
  31: LD_STRING OC
  33: PPUSH
  34: NOP4
// SetBname ( YakotichBase , kamenev ) ;
  38: LD_INT 312
  40: PPUSH
  41: LD_STRING kamenev
  43: PPUSH
  44: NOP4
// SetBname ( BukovBase , Kuybyshev ) ;
  48: LD_INT 127
  50: PPUSH
  51: LD_STRING Kuybyshev
  53: PPUSH
  54: NOP4
// AnimateTrees ( true ) ;
  58: LD_INT 1
  60: PPUSH
  61: NOP4
// Randomize ;
  65: NOP4
// RandomizeAll ;
  69: NOP4
// for b in FilterUnitsInArea ( SouthLeninArea , [ [ f_type , unit_building ] ] ) do
  73: NOP4
  77: PUSH
  78: LD_INT 4
  80: PPUSH
  81: LD_INT 21
  83: PUSH
  84: LD_INT 3
  86: PUSH
  87: EMPTY
  88: LIST
  89: LIST
  90: PUSH
  91: EMPTY
  92: LIST
  93: PPUSH
  94: NOP4
  98: PUSH
  99: FOR_IN
 100: IFFALSE 116
// ComLinkToBase ( SouthLenin , b ) ;
 102: LD_INT 218
 104: PPUSH
 105: NOP4
 109: PPUSH
 110: NOP4
 114: GO 99
 116: POP
 117: POP
// for n in FilterUnitsInArea ( NorthLeninArea , [ [ f_type , unit_building ] ] ) do
 118: NOP4
 122: PUSH
 123: LD_INT 5
 125: PPUSH
 126: LD_INT 21
 128: PUSH
 129: LD_INT 3
 131: PUSH
 132: EMPTY
 133: LIST
 134: LIST
 135: PUSH
 136: EMPTY
 137: LIST
 138: PPUSH
 139: NOP4
 143: PUSH
 144: FOR_IN
 145: IFFALSE 161
// ComLinkToBase ( NorthLenin , n ) ;
 147: LD_INT 253
 149: PPUSH
 150: NOP4
 154: PPUSH
 155: NOP4
 159: GO 144
 161: POP
 162: POP
// InitGlobalVariables ;
 163: NOP4
// InitMiotacz ;
 167: NOP4
// InitRussian ;
 171: NOP4
// InitCommanders ;
 175: NOP4
// InitBierezovPersonel ;
 179: NOP4
// InitRussianAI ;
 183: NOP4
// InitArabianAI ;
 187: NOP4
// Action ;
 191: NOP4
// DebugMode ;
 195: NOP4
// game_speed = 6 ;
 199: LD_ADDR_OWVAR 65
 203: PUSH
 204: LD_INT 6
 206: ST_TO_ADDR
// end ;
 207: END
// export YakotichCrew , BierezovCrew , BierezovNewCrew , PompaCrew , BukovCrew , GaydarCrew , NorthLeninCrew , SouthLeninCrew , CheckpointsCrew , SouthCheckpointCrew , HeikeCrew , OmarCrew ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin , Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav , Jegor , Grigori , Anton ; export Heike , Omar , Shulz , Bergkamp ; export Tank , Cargo1 , Cargo2 ; export Natasza , Belkov2 , Oblukov , Kovalyuk , Kozlov ; export Bierezov , Sharonov , Lesov , Aleinik , Korotajev , Bautin ; export Pompa , Smirnov , Petrov , Konajev , Radenko ; export Morozov , Platonov , Popov , Gaydar , Bukov , Yashin ; export PrepareTime ; export debug ; export mission_prefix ; export start_ended , control_taken_over , ivan_came , apeman_tamed , flame_researched , heavy_gun_researched , weaponry_researched , fall_back ; function Init ; begin
 208: LD_INT 0
 210: PPUSH
// SetAttitude ( 9 , 3 , 1 , true ) ;
 211: LD_INT 9
 213: PPUSH
 214: LD_INT 3
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: NOP4
// SetAttitude ( 9 , 6 , 1 , true ) ;
 227: LD_INT 9
 229: PPUSH
 230: LD_INT 6
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: LD_INT 1
 238: PPUSH
 239: NOP4
// ChangeSideFog ( 9 , 3 ) ;
 243: LD_INT 9
 245: PPUSH
 246: LD_INT 3
 248: PPUSH
 249: NOP4
// mission_prefix := 04_ ;
 253: NOP4
 257: PUSH
 258: LD_STRING 04_
 260: ST_TO_ADDR
// start_ended = false ;
 261: NOP4
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// ivan_came = false ;
 269: NOP4
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// control_taken_over = false ;
 277: NOP4
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// apeman_tamed = false ;
 285: NOP4
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// flame_researched = false ;
 293: NOP4
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// heavy_gun_researched = false ;
 301: NOP4
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// weaponry_researched = false ;
 309: NOP4
 313: PUSH
 314: LD_INT 0
 316: ST_TO_ADDR
// fall_back = false ;
 317: NOP4
 321: PUSH
 322: LD_INT 0
 324: ST_TO_ADDR
// PrepareTime := [ 35 35$0 , 30 30$0 , 25 25$0 ] [ Difficulty ] ;
 325: NOP4
 329: PUSH
 330: LD_INT 73500
 332: PUSH
 333: LD_INT 63000
 335: PUSH
 336: LD_INT 52500
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: NOP4
 348: ARRAY
 349: ST_TO_ADDR
// end ;
 350: LD_VAR 0 1
 354: RET
// export function DebugMode ; begin
 355: LD_INT 0
 357: PPUSH
// if Debug = true then
 358: NOP4
 362: PUSH
 363: LD_INT 1
 365: EQUAL
 366: IFFALSE 387
// begin Difficulty := 3 ;
 368: LD_ADDR_OWVAR 67
 372: PUSH
 373: LD_INT 3
 375: ST_TO_ADDR
// TurnFogOff ( ) ;
 376: NOP4
// FogOff ( 3 ) ;
 380: LD_INT 3
 382: PPUSH
 383: NOP4
// end ; end ; end_of_file
 387: LD_VAR 0 1
 391: RET
// every 3 3$0 do
 392: GO 394
 394: DISABLE
// begin CreateCratesArea ( Rand ( 3 , 5 ) , YakotichCrates , true ) ;
 395: LD_INT 3
 397: PPUSH
 398: LD_INT 5
 400: PPUSH
 401: NOP4
 405: PPUSH
 406: LD_INT 11
 408: PPUSH
 409: LD_INT 1
 411: PPUSH
 412: NOP4
// enable ;
 416: ENABLE
// end ;
 417: END
// every 7 7$0 do var i ;
 418: GO 420
 420: DISABLE
 421: LD_INT 0
 423: PPUSH
// begin for i = 1 to 5 do
 424: NOP4
 428: PUSH
 429: DOUBLE
 430: LD_INT 1
 432: DEC
 433: ST_TO_ADDR
 434: LD_INT 5
 436: PUSH
 437: FOR_TO
 438: IFFALSE 463
// begin CreateCratesArea ( rand ( 4 , 5 ) , CratesArea , true ) ;
 440: LD_INT 4
 442: PPUSH
 443: LD_INT 5
 445: PPUSH
 446: NOP4
 450: PPUSH
 451: LD_INT 12
 453: PPUSH
 454: LD_INT 1
 456: PPUSH
 457: NOP4
// end ;
 461: GO 437
 463: POP
 464: POP
// enable ;
 465: ENABLE
// end ;
 466: PPOPN 1
 468: END
// every 5 5$0 trigger ivan_came = true do var i ;
 469: NOP4
 473: PUSH
 474: LD_INT 1
 476: EQUAL
 477: IFFALSE 527
 479: GO 481
 481: DISABLE
 482: LD_INT 0
 484: PPUSH
// begin for i = 1 to 2 do
 485: NOP4
 489: PUSH
 490: DOUBLE
 491: LD_INT 1
 493: DEC
 494: ST_TO_ADDR
 495: LD_INT 2
 497: PUSH
 498: FOR_TO
 499: IFFALSE 525
// begin CreateCratesArea ( rand ( 1 , 5 ) , BierezovCrates , true ) ;
 501: LD_INT 1
 503: PPUSH
 504: LD_INT 5
 506: PPUSH
 507: NOP4
 511: PPUSH
 512: LD_INT 13
 514: PPUSH
 515: LD_INT 1
 517: PPUSH
 518: NOP4
// enable ;
 522: ENABLE
// end ;
 523: GO 498
 525: POP
 526: POP
// end ; end_of_file
 527: PPOPN 1
 529: END
// export RuCargo1 , RuCargo2 ; export function InitRussian ; begin
 530: LD_INT 0
 532: PPUSH
// Uc_Nation := 3 ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_INT 3
 540: ST_TO_ADDR
// Uc_Side := 3 ;
 541: LD_ADDR_OWVAR 20
 545: PUSH
 546: LD_INT 3
 548: ST_TO_ADDR
// Uc_Direction := 2 ;
 549: LD_ADDR_OWVAR 24
 553: PUSH
 554: LD_INT 2
 556: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , false , 03_ ) ;
 557: NOP4
 561: PUSH
 562: LD_STRING Yakotich
 564: PPUSH
 565: LD_INT 0
 567: PPUSH
 568: LD_STRING 03_
 570: PPUSH
 571: NOP4
 575: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , false , 03_ ) ;
 576: NOP4
 580: PUSH
 581: LD_STRING Mietek
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: LD_STRING 03_
 589: PPUSH
 590: NOP4
 594: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , false , 03_ ) ;
 595: NOP4
 599: PUSH
 600: LD_STRING Boris
 602: PPUSH
 603: LD_INT 0
 605: PPUSH
 606: LD_STRING 03_
 608: PPUSH
 609: NOP4
 613: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , false , 03_ ) ;
 614: NOP4
 618: PUSH
 619: LD_STRING Michail
 621: PPUSH
 622: LD_INT 0
 624: PPUSH
 625: LD_STRING 03_
 627: PPUSH
 628: NOP4
 632: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , false , 03_ ) ;
 633: NOP4
 637: PUSH
 638: LD_STRING Vasilij
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: LD_STRING 03_
 646: PPUSH
 647: NOP4
 651: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , false , 03_ ) ;
 652: NOP4
 656: PUSH
 657: LD_STRING Constantin
 659: PPUSH
 660: LD_INT 0
 662: PPUSH
 663: LD_STRING 03_
 665: PPUSH
 666: NOP4
 670: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , false , 03_ ) ;
 671: NOP4
 675: PUSH
 676: LD_STRING Maksim
 678: PPUSH
 679: LD_INT 0
 681: PPUSH
 682: LD_STRING 03_
 684: PPUSH
 685: NOP4
 689: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , false , 03_ ) ;
 690: NOP4
 694: PUSH
 695: LD_STRING Fiodor
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: LD_STRING 03_
 703: PPUSH
 704: NOP4
 708: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , false , 03_ ) ;
 709: NOP4
 713: PUSH
 714: LD_STRING Aleksiej
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: LD_STRING 03_
 722: PPUSH
 723: NOP4
 727: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , false , 03_ ) ;
 728: NOP4
 732: PUSH
 733: LD_STRING Pavel
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: LD_STRING 03_
 741: PPUSH
 742: NOP4
 746: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , false , 03_ ) ;
 747: NOP4
 751: PUSH
 752: LD_STRING Zakhar
 754: PPUSH
 755: LD_INT 0
 757: PPUSH
 758: LD_STRING 03_
 760: PPUSH
 761: NOP4
 765: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , false , 03_ ) ;
 766: NOP4
 770: PUSH
 771: LD_STRING Aleksandr
 773: PPUSH
 774: LD_INT 0
 776: PPUSH
 777: LD_STRING 03_
 779: PPUSH
 780: NOP4
 784: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , false , 03_ ) ;
 785: NOP4
 789: PUSH
 790: LD_STRING Stanislav
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: LD_STRING 03_
 798: PPUSH
 799: NOP4
 803: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false , 03_ ) ;
 804: NOP4
 808: PUSH
 809: LD_STRING Josif
 811: PPUSH
 812: LD_INT 0
 814: PPUSH
 815: LD_STRING 03_
 817: PPUSH
 818: NOP4
 822: ST_TO_ADDR
// Jegor := PrepareUnit ( Jegor , false , 03_ ) ;
 823: NOP4
 827: PUSH
 828: LD_STRING Jegor
 830: PPUSH
 831: LD_INT 0
 833: PPUSH
 834: LD_STRING 03_
 836: PPUSH
 837: NOP4
 841: ST_TO_ADDR
// Grigori := PrepareUnit ( Grigori , false , 03_ ) ;
 842: NOP4
 846: PUSH
 847: LD_STRING Grigori
 849: PPUSH
 850: LD_INT 0
 852: PPUSH
 853: LD_STRING 03_
 855: PPUSH
 856: NOP4
 860: ST_TO_ADDR
// Anton := PrepareUnit ( Anton , false , 03_ ) ;
 861: NOP4
 865: PUSH
 866: LD_STRING Anton
 868: PPUSH
 869: LD_INT 0
 871: PPUSH
 872: LD_STRING 03_
 874: PPUSH
 875: NOP4
 879: ST_TO_ADDR
// YakotichCrew = YakotichCrew ^ Boris ^ Michail ^ Vasilij ^ Constantin ^ Maksim ^ Fiodor ^ Aleksiej ^ Pavel ^ Zakhar ^ Aleksandr ^ Stanislav ^ Josif ^ Jegor ^ Grigori ^ Anton ;
 880: NOP4
 884: PUSH
 885: NOP4
 889: PUSH
 890: NOP4
 894: ADD
 895: PUSH
 896: NOP4
 900: ADD
 901: PUSH
 902: NOP4
 906: ADD
 907: PUSH
 908: NOP4
 912: ADD
 913: PUSH
 914: NOP4
 918: ADD
 919: PUSH
 920: NOP4
 924: ADD
 925: PUSH
 926: NOP4
 930: ADD
 931: PUSH
 932: NOP4
 936: ADD
 937: PUSH
 938: NOP4
 942: ADD
 943: PUSH
 944: NOP4
 948: ADD
 949: PUSH
 950: NOP4
 954: ADD
 955: PUSH
 956: NOP4
 960: ADD
 961: PUSH
 962: NOP4
 966: ADD
 967: PUSH
 968: NOP4
 972: ADD
 973: PUSH
 974: NOP4
 978: ADD
 979: ST_TO_ADDR
// SetClass ( [ Yakotich , Mietek , Constantin , Maksim , Fiodor , Aleksiej , Zakhar , Aleksandr , Josif ] , 1 ) ;
 980: NOP4
 984: PUSH
 985: NOP4
 989: PUSH
 990: NOP4
 994: PUSH
 995: NOP4
 999: PUSH
1000: NOP4
1004: PUSH
1005: NOP4
1009: PUSH
1010: NOP4
1014: PUSH
1015: NOP4
1019: PUSH
1020: NOP4
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PPUSH
1036: LD_INT 1
1038: PPUSH
1039: NOP4
// SetClass ( [ Boris , Anton ] , 2 ) ;
1043: NOP4
1047: PUSH
1048: NOP4
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: PPUSH
1057: LD_INT 2
1059: PPUSH
1060: NOP4
// SetClass ( [ Michail , Pavel , Jegor ] , 3 ) ;
1064: NOP4
1068: PUSH
1069: NOP4
1073: PUSH
1074: NOP4
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: LIST
1083: PPUSH
1084: LD_INT 3
1086: PPUSH
1087: NOP4
// SetClass ( [ Stanislav , Vasilij , Grigori ] , 4 ) ;
1091: NOP4
1095: PUSH
1096: NOP4
1100: PUSH
1101: NOP4
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: LIST
1110: PPUSH
1111: LD_INT 4
1113: PPUSH
1114: NOP4
// vc_chassis = 24 ;
1118: LD_ADDR_OWVAR 37
1122: PUSH
1123: LD_INT 24
1125: ST_TO_ADDR
// vc_control = 1 ;
1126: LD_ADDR_OWVAR 38
1130: PUSH
1131: LD_INT 1
1133: ST_TO_ADDR
// vc_engine = 1 ;
1134: LD_ADDR_OWVAR 39
1138: PUSH
1139: LD_INT 1
1141: ST_TO_ADDR
// vc_weapon = 89 ;
1142: LD_ADDR_OWVAR 40
1146: PUSH
1147: LD_INT 89
1149: ST_TO_ADDR
// RuCargo1 = CreateVehicle ;
1150: NOP4
1154: PUSH
1155: NOP4
1159: ST_TO_ADDR
// PlaceUnitArea ( RuCargo1 , TanksEnterArea , false ) ;
1160: NOP4
1164: PPUSH
1165: LD_INT 25
1167: PPUSH
1168: LD_INT 0
1170: PPUSH
1171: NOP4
// SetCargo ( RuCargo1 , mat_siberit , 200 ) ;
1175: NOP4
1179: PPUSH
1180: LD_INT 3
1182: PPUSH
1183: LD_INT 200
1185: PPUSH
1186: NOP4
// PlaceHumanInUnit ( Jegor , RuCargo1 ) ;
1190: NOP4
1194: PPUSH
1195: NOP4
1199: PPUSH
1200: NOP4
// vc_chassis = 22 ;
1204: LD_ADDR_OWVAR 37
1208: PUSH
1209: LD_INT 22
1211: ST_TO_ADDR
// vc_weapon = 51 ;
1212: LD_ADDR_OWVAR 40
1216: PUSH
1217: LD_INT 51
1219: ST_TO_ADDR
// RuCargo2 = CreateVehicle ;
1220: NOP4
1224: PUSH
1225: NOP4
1229: ST_TO_ADDR
// PlaceUnitArea ( RuCargo2 , TanksEnterArea , false ) ;
1230: NOP4
1234: PPUSH
1235: LD_INT 25
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: NOP4
// SetCargo ( RuCargo2 , mat_cans , 100 ) ;
1245: NOP4
1249: PPUSH
1250: LD_INT 1
1252: PPUSH
1253: LD_INT 100
1255: PPUSH
1256: NOP4
// PlaceHumanInUnit ( Anton , RuCargo2 ) ;
1260: NOP4
1264: PPUSH
1265: NOP4
1269: PPUSH
1270: NOP4
// PlaceUnitArea ( Yakotich , EnterArea , false ) ;
1274: NOP4
1278: PPUSH
1279: LD_INT 3
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: NOP4
// PlaceUnitArea ( Mietek , EnterArea , false ) ;
1289: NOP4
1293: PPUSH
1294: LD_INT 3
1296: PPUSH
1297: LD_INT 0
1299: PPUSH
1300: NOP4
// PlaceUnitArea ( Boris , EnterArea , false ) ;
1304: NOP4
1308: PPUSH
1309: LD_INT 3
1311: PPUSH
1312: LD_INT 0
1314: PPUSH
1315: NOP4
// PlaceUnitArea ( Vasilij , EnterArea , false ) ;
1319: NOP4
1323: PPUSH
1324: LD_INT 3
1326: PPUSH
1327: LD_INT 0
1329: PPUSH
1330: NOP4
// PlaceUnitArea ( Constantin , EnterArea , false ) ;
1334: NOP4
1338: PPUSH
1339: LD_INT 3
1341: PPUSH
1342: LD_INT 0
1344: PPUSH
1345: NOP4
// PlaceUnitArea ( Maksim , EnterArea , false ) ;
1349: NOP4
1353: PPUSH
1354: LD_INT 3
1356: PPUSH
1357: LD_INT 0
1359: PPUSH
1360: NOP4
// PlaceUnitArea ( Fiodor , EnterArea , false ) ;
1364: NOP4
1368: PPUSH
1369: LD_INT 3
1371: PPUSH
1372: LD_INT 0
1374: PPUSH
1375: NOP4
// PlaceUnitArea ( Zakhar , EnterArea , false ) ;
1379: NOP4
1383: PPUSH
1384: LD_INT 3
1386: PPUSH
1387: LD_INT 0
1389: PPUSH
1390: NOP4
// PlaceUnitArea ( Aleksiej , EnterArea , false ) ;
1394: NOP4
1398: PPUSH
1399: LD_INT 3
1401: PPUSH
1402: LD_INT 0
1404: PPUSH
1405: NOP4
// PlaceUnitArea ( Aleksandr , EnterArea , false ) ;
1409: NOP4
1413: PPUSH
1414: LD_INT 3
1416: PPUSH
1417: LD_INT 0
1419: PPUSH
1420: NOP4
// PlaceUnitArea ( Stanislav , EnterArea , false ) ;
1424: NOP4
1428: PPUSH
1429: LD_INT 3
1431: PPUSH
1432: LD_INT 0
1434: PPUSH
1435: NOP4
// PlaceUnitArea ( Josif , EnterArea , false ) ;
1439: NOP4
1443: PPUSH
1444: LD_INT 3
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: NOP4
// PlaceUnitArea ( Grigori , EnterArea , false ) ;
1454: NOP4
1458: PPUSH
1459: LD_INT 3
1461: PPUSH
1462: LD_INT 0
1464: PPUSH
1465: NOP4
// PlaceUnitArea ( Pavel , EnterArea , false ) ;
1469: NOP4
1473: PPUSH
1474: LD_INT 3
1476: PPUSH
1477: LD_INT 0
1479: PPUSH
1480: NOP4
// Natasza := PrepareUnit ( Natasza , false ,  ) ;
1484: NOP4
1488: PUSH
1489: LD_STRING Natasza
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: LD_STRING 
1497: PPUSH
1498: NOP4
1502: ST_TO_ADDR
// Belkov2 := PrepareUnit ( Belkov2 , false ,  ) ;
1503: NOP4
1507: PUSH
1508: LD_STRING Belkov2
1510: PPUSH
1511: LD_INT 0
1513: PPUSH
1514: LD_STRING 
1516: PPUSH
1517: NOP4
1521: ST_TO_ADDR
// Oblukov := PrepareUnit ( Oblukov , false ,  ) ;
1522: NOP4
1526: PUSH
1527: LD_STRING Oblukov
1529: PPUSH
1530: LD_INT 0
1532: PPUSH
1533: LD_STRING 
1535: PPUSH
1536: NOP4
1540: ST_TO_ADDR
// Kovalyuk := PrepareUnit ( Kovalyuk , false ,  ) ;
1541: NOP4
1545: PUSH
1546: LD_STRING Kovalyuk
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: LD_STRING 
1554: PPUSH
1555: NOP4
1559: ST_TO_ADDR
// Kozlov := PrepareUnit ( Kozlov , false ,  ) ;
1560: NOP4
1564: PUSH
1565: LD_STRING Kozlov
1567: PPUSH
1568: LD_INT 0
1570: PPUSH
1571: LD_STRING 
1573: PPUSH
1574: NOP4
1578: ST_TO_ADDR
// PlaceUnitArea ( Natasza , NataszaSpawn , false ) ;
1579: NOP4
1583: PPUSH
1584: LD_INT 18
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: NOP4
// ComTurnUnit ( Natasza , Yakotich ) ;
1594: NOP4
1598: PPUSH
1599: NOP4
1603: PPUSH
1604: NOP4
// PlaceHumanInUnit ( Belkov2 , b1 ) ;
1608: NOP4
1612: PPUSH
1613: LD_INT 319
1615: PPUSH
1616: NOP4
// PlaceHumanInUnit ( Oblukov , b2 ) ;
1620: NOP4
1624: PPUSH
1625: LD_INT 318
1627: PPUSH
1628: NOP4
// PlaceHumanInUnit ( Kovalyuk , w1 ) ;
1632: NOP4
1636: PPUSH
1637: LD_INT 313
1639: PPUSH
1640: NOP4
// PlaceHumanInUnit ( Kozlov , l1 ) ;
1644: NOP4
1648: PPUSH
1649: LD_INT 317
1651: PPUSH
1652: NOP4
// end ;
1656: LD_VAR 0 1
1660: RET
// export function InitBierezov ; begin
1661: LD_INT 0
1663: PPUSH
// Uc_Side = 4 ;
1664: LD_ADDR_OWVAR 20
1668: PUSH
1669: LD_INT 4
1671: ST_TO_ADDR
// Bierezov := PrepareUnit ( Bierezov , false ,  ) ;
1672: NOP4
1676: PUSH
1677: LD_STRING Bierezov
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: LD_STRING 
1685: PPUSH
1686: NOP4
1690: ST_TO_ADDR
// Sharonov := PrepareUnit ( Sharonov , false ,  ) ;
1691: NOP4
1695: PUSH
1696: LD_STRING Sharonov
1698: PPUSH
1699: LD_INT 0
1701: PPUSH
1702: LD_STRING 
1704: PPUSH
1705: NOP4
1709: ST_TO_ADDR
// Lesov := PrepareUnit ( Lesov , false ,  ) ;
1710: NOP4
1714: PUSH
1715: LD_STRING Lesov
1717: PPUSH
1718: LD_INT 0
1720: PPUSH
1721: LD_STRING 
1723: PPUSH
1724: NOP4
1728: ST_TO_ADDR
// Aleinik := PrepareUnit ( Aleinik , false ,  ) ;
1729: NOP4
1733: PUSH
1734: LD_STRING Aleinik
1736: PPUSH
1737: LD_INT 0
1739: PPUSH
1740: LD_STRING 
1742: PPUSH
1743: NOP4
1747: ST_TO_ADDR
// Korotajev := PrepareUnit ( Korotajev , false ,  ) ;
1748: NOP4
1752: PUSH
1753: LD_STRING Korotajev
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: LD_STRING 
1761: PPUSH
1762: NOP4
1766: ST_TO_ADDR
// Bautin := PrepareUnit ( Bautin , false ,  ) ;
1767: NOP4
1771: PUSH
1772: LD_STRING Bautin
1774: PPUSH
1775: LD_INT 0
1777: PPUSH
1778: LD_STRING 
1780: PPUSH
1781: NOP4
1785: ST_TO_ADDR
// PlaceUnitArea ( Bierezov , EnterArea , false ) ;
1786: NOP4
1790: PPUSH
1791: LD_INT 3
1793: PPUSH
1794: LD_INT 0
1796: PPUSH
1797: NOP4
// PlaceUnitArea ( Sharonov , EnterArea , false ) ;
1801: NOP4
1805: PPUSH
1806: LD_INT 3
1808: PPUSH
1809: LD_INT 0
1811: PPUSH
1812: NOP4
// PlaceUnitArea ( Lesov , EnterArea , false ) ;
1816: NOP4
1820: PPUSH
1821: LD_INT 3
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: NOP4
// PlaceUnitArea ( Aleinik , EnterArea , false ) ;
1831: NOP4
1835: PPUSH
1836: LD_INT 3
1838: PPUSH
1839: LD_INT 0
1841: PPUSH
1842: NOP4
// PlaceUnitArea ( Korotajev , EnterArea , false ) ;
1846: NOP4
1850: PPUSH
1851: LD_INT 3
1853: PPUSH
1854: LD_INT 0
1856: PPUSH
1857: NOP4
// PlaceUnitArea ( Bautin , EnterArea , false ) ;
1861: NOP4
1865: PPUSH
1866: LD_INT 3
1868: PPUSH
1869: LD_INT 0
1871: PPUSH
1872: NOP4
// BierezovCrew := BierezovCrew ^ Sharonov ^ Lesov ^ Aleinik ^ Korotajev ^ Bautin ;
1876: NOP4
1880: PUSH
1881: NOP4
1885: PUSH
1886: NOP4
1890: ADD
1891: PUSH
1892: NOP4
1896: ADD
1897: PUSH
1898: NOP4
1902: ADD
1903: PUSH
1904: NOP4
1908: ADD
1909: PUSH
1910: NOP4
1914: ADD
1915: ST_TO_ADDR
// end ;
1916: LD_VAR 0 1
1920: RET
// export function InitMiotacz ; begin
1921: LD_INT 0
1923: PPUSH
// if LoadVariable ( 03_FlameSaved , 1 ) then
1924: LD_STRING 03_FlameSaved
1926: PPUSH
1927: LD_INT 1
1929: PPUSH
1930: NOP4
1934: IFFALSE 2031
// begin Uc_Side = 3 ;
1936: LD_ADDR_OWVAR 20
1940: PUSH
1941: LD_INT 3
1943: ST_TO_ADDR
// Uc_Nation = 2 ;
1944: LD_ADDR_OWVAR 21
1948: PUSH
1949: LD_INT 2
1951: ST_TO_ADDR
// Uc_Direction = 2 ;
1952: LD_ADDR_OWVAR 24
1956: PUSH
1957: LD_INT 2
1959: ST_TO_ADDR
// Vc_Chassis = 14 ;
1960: LD_ADDR_OWVAR 37
1964: PUSH
1965: LD_INT 14
1967: ST_TO_ADDR
// Vc_Control = 1 ;
1968: LD_ADDR_OWVAR 38
1972: PUSH
1973: LD_INT 1
1975: ST_TO_ADDR
// Vc_Engine = 1 ;
1976: LD_ADDR_OWVAR 39
1980: PUSH
1981: LD_INT 1
1983: ST_TO_ADDR
// Vc_Weapon = 26 ;
1984: LD_ADDR_OWVAR 40
1988: PUSH
1989: LD_INT 26
1991: ST_TO_ADDR
// Tank := CreateVehicle ;
1992: NOP4
1996: PUSH
1997: NOP4
2001: ST_TO_ADDR
// PlaceUnitArea ( Tank , TanksEnterArea , false ) ;
2002: NOP4
2006: PPUSH
2007: LD_INT 25
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: NOP4
// PlaceHumanInUnit ( Michail , Tank ) ;
2017: NOP4
2021: PPUSH
2022: NOP4
2026: PPUSH
2027: NOP4
// end ; end ;
2031: LD_VAR 0 1
2035: RET
// export BierezovEngineers ; export function InitBierezovPersonel ; var i ; begin
2036: LD_INT 0
2038: PPUSH
2039: PPUSH
// Hc_Gallery :=  ;
2040: LD_ADDR_OWVAR 33
2044: PUSH
2045: LD_STRING 
2047: ST_TO_ADDR
// Hc_Name :=  ;
2048: LD_ADDR_OWVAR 26
2052: PUSH
2053: LD_STRING 
2055: ST_TO_ADDR
// Uc_Side := 4 ;
2056: LD_ADDR_OWVAR 20
2060: PUSH
2061: LD_INT 4
2063: ST_TO_ADDR
// BierezovNewCrew := [ ] ;
2064: NOP4
2068: PUSH
2069: EMPTY
2070: ST_TO_ADDR
// for i = 1 to 6 do
2071: NOP4
2075: PUSH
2076: DOUBLE
2077: LD_INT 1
2079: DEC
2080: ST_TO_ADDR
2081: LD_INT 6
2083: PUSH
2084: FOR_TO
2085: IFFALSE 2140
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2087: LD_INT 0
2089: PPUSH
2090: LD_INT 1
2092: PPUSH
2093: NOP4
2097: PPUSH
2098: LD_INT 5
2100: PUSH
2101: LD_INT 4
2103: PUSH
2104: LD_INT 3
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PUSH
2112: NOP4
2116: ARRAY
2117: PPUSH
2118: NOP4
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2122: NOP4
2126: PUSH
2127: NOP4
2131: PUSH
2132: NOP4
2136: ADD
2137: ST_TO_ADDR
// end ;
2138: GO 2084
2140: POP
2141: POP
// for i = 1 to 2 do
2142: NOP4
2146: PUSH
2147: DOUBLE
2148: LD_INT 1
2150: DEC
2151: ST_TO_ADDR
2152: LD_INT 2
2154: PUSH
2155: FOR_TO
2156: IFFALSE 2211
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2158: LD_INT 0
2160: PPUSH
2161: LD_INT 1
2163: PPUSH
2164: NOP4
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_INT 4
2174: PUSH
2175: LD_INT 3
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: LIST
2182: PUSH
2183: NOP4
2187: ARRAY
2188: PPUSH
2189: NOP4
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2193: NOP4
2197: PUSH
2198: NOP4
2202: PUSH
2203: NOP4
2207: ADD
2208: ST_TO_ADDR
// end ;
2209: GO 2155
2211: POP
2212: POP
// BierezovNewCrew := BierezovNewCrew ^ BierezovEngineers ;
2213: NOP4
2217: PUSH
2218: NOP4
2222: PUSH
2223: NOP4
2227: ADD
2228: ST_TO_ADDR
// for i = 1 to 2 do
2229: NOP4
2233: PUSH
2234: DOUBLE
2235: LD_INT 1
2237: DEC
2238: ST_TO_ADDR
2239: LD_INT 2
2241: PUSH
2242: FOR_TO
2243: IFFALSE 2298
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2245: LD_INT 0
2247: PPUSH
2248: LD_INT 1
2250: PPUSH
2251: NOP4
2255: PPUSH
2256: LD_INT 5
2258: PUSH
2259: LD_INT 4
2261: PUSH
2262: LD_INT 3
2264: PUSH
2265: EMPTY
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: NOP4
2274: ARRAY
2275: PPUSH
2276: NOP4
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2280: NOP4
2284: PUSH
2285: NOP4
2289: PUSH
2290: NOP4
2294: ADD
2295: ST_TO_ADDR
// end ;
2296: GO 2242
2298: POP
2299: POP
// for i = 1 to 1 do
2300: NOP4
2304: PUSH
2305: DOUBLE
2306: LD_INT 1
2308: DEC
2309: ST_TO_ADDR
2310: LD_INT 1
2312: PUSH
2313: FOR_TO
2314: IFFALSE 2369
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
2316: LD_INT 0
2318: PPUSH
2319: LD_INT 1
2321: PPUSH
2322: NOP4
2326: PPUSH
2327: LD_INT 5
2329: PUSH
2330: LD_INT 4
2332: PUSH
2333: LD_INT 3
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: LIST
2340: PUSH
2341: NOP4
2345: ARRAY
2346: PPUSH
2347: NOP4
// BierezovNewCrew := BierezovNewCrew ^ CreateHuman ;
2351: NOP4
2355: PUSH
2356: NOP4
2360: PUSH
2361: NOP4
2365: ADD
2366: ST_TO_ADDR
// end ;
2367: GO 2313
2369: POP
2370: POP
// for i in BierezovNewCrew do
2371: NOP4
2375: PUSH
2376: NOP4
2380: PUSH
2381: FOR_IN
2382: IFFALSE 2489
// begin case GetClass ( i ) of 1 :
2384: NOP4
2388: PPUSH
2389: NOP4
2393: PUSH
2394: LD_INT 1
2396: DOUBLE
2397: EQUAL
2398: IFTRUE 2402
2400: GO 2417
2402: POP
// PlaceHumanInUnit ( i , LArmor1 ) ; 2 :
2403: NOP4
2407: PPUSH
2408: LD_INT 279
2410: PPUSH
2411: NOP4
2415: GO 2487
2417: LD_INT 2
2419: DOUBLE
2420: EQUAL
2421: IFTRUE 2425
2423: GO 2440
2425: POP
// PlaceHumanInUnit ( i , LArmor2 ) ; 3 :
2426: NOP4
2430: PPUSH
2431: LD_INT 278
2433: PPUSH
2434: NOP4
2438: GO 2487
2440: LD_INT 3
2442: DOUBLE
2443: EQUAL
2444: IFTRUE 2448
2446: GO 2463
2448: POP
// PlaceHumanInUnit ( i , LArmor2 ) ; 4 :
2449: NOP4
2453: PPUSH
2454: LD_INT 278
2456: PPUSH
2457: NOP4
2461: GO 2487
2463: LD_INT 4
2465: DOUBLE
2466: EQUAL
2467: IFTRUE 2471
2469: GO 2486
2471: POP
// PlaceHumanInUnit ( i , LArmor2 ) ; end ;
2472: NOP4
2476: PPUSH
2477: LD_INT 278
2479: PPUSH
2480: NOP4
2484: GO 2487
2486: POP
// end ;
2487: GO 2381
2489: POP
2490: POP
// end ;
2491: LD_VAR 0 1
2495: RET
// export function InitPompa ; begin
2496: LD_INT 0
2498: PPUSH
// Uc_Side = 6 ;
2499: LD_ADDR_OWVAR 20
2503: PUSH
2504: LD_INT 6
2506: ST_TO_ADDR
// Pompa := PrepareUnit ( Pompa , false ,  ) ;
2507: NOP4
2511: PUSH
2512: LD_STRING Pompa
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: LD_STRING 
2520: PPUSH
2521: NOP4
2525: ST_TO_ADDR
// Petrov := PrepareUnit ( Petrov , false ,  ) ;
2526: NOP4
2530: PUSH
2531: LD_STRING Petrov
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: LD_STRING 
2539: PPUSH
2540: NOP4
2544: ST_TO_ADDR
// Konajev := PrepareUnit ( Konajev , false ,  ) ;
2545: NOP4
2549: PUSH
2550: LD_STRING Konajev
2552: PPUSH
2553: LD_INT 0
2555: PPUSH
2556: LD_STRING 
2558: PPUSH
2559: NOP4
2563: ST_TO_ADDR
// Smirnov := PrepareUnit ( Smirnov , false ,  ) ;
2564: NOP4
2568: PUSH
2569: LD_STRING Smirnov
2571: PPUSH
2572: LD_INT 0
2574: PPUSH
2575: LD_STRING 
2577: PPUSH
2578: NOP4
2582: ST_TO_ADDR
// Radenko := PrepareUnit ( Radenko , false ,  ) ;
2583: NOP4
2587: PUSH
2588: LD_STRING Radenko
2590: PPUSH
2591: LD_INT 0
2593: PPUSH
2594: LD_STRING 
2596: PPUSH
2597: NOP4
2601: ST_TO_ADDR
// PompaCrew := PompaCrew ^ Pompa ^ Petrov ^ Konajev ^ Smirnov ^ Radenko ;
2602: NOP4
2606: PUSH
2607: NOP4
2611: PUSH
2612: NOP4
2616: ADD
2617: PUSH
2618: NOP4
2622: ADD
2623: PUSH
2624: NOP4
2628: ADD
2629: PUSH
2630: NOP4
2634: ADD
2635: PUSH
2636: NOP4
2640: ADD
2641: ST_TO_ADDR
// PlaceUnitArea ( Pompa , EnterArea , false ) ;
2642: NOP4
2646: PPUSH
2647: LD_INT 3
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: NOP4
// PlaceUnitArea ( Petrov , EnterArea , false ) ;
2657: NOP4
2661: PPUSH
2662: LD_INT 3
2664: PPUSH
2665: LD_INT 0
2667: PPUSH
2668: NOP4
// PlaceUnitArea ( Konajev , EnterArea , false ) ;
2672: NOP4
2676: PPUSH
2677: LD_INT 3
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: NOP4
// PlaceUnitArea ( Smirnov , EnterArea , false ) ;
2687: NOP4
2691: PPUSH
2692: LD_INT 3
2694: PPUSH
2695: LD_INT 0
2697: PPUSH
2698: NOP4
// PlaceUnitArea ( Radenko , EnterArea , false ) ;
2702: NOP4
2706: PPUSH
2707: LD_INT 3
2709: PPUSH
2710: LD_INT 0
2712: PPUSH
2713: NOP4
// end ; end_of_file
2717: LD_VAR 0 1
2721: RET
// export function Action ; begin
2722: LD_INT 0
2724: PPUSH
// InGameOn ;
2725: NOP4
// ComTurnXY ( Janusz , 133 , 27 ) ;
2729: LD_INT 420
2731: PPUSH
2732: LD_INT 133
2734: PPUSH
2735: LD_INT 27
2737: PPUSH
2738: NOP4
// ComTurnXY ( Livid , 293 , 225 ) ;
2742: NOP4
2746: PPUSH
2747: LD_INT 293
2749: PPUSH
2750: LD_INT 225
2752: PPUSH
2753: NOP4
// if LoadVariable ( 03_FlameSaved , 1 ) then
2757: LD_STRING 03_FlameSaved
2759: PPUSH
2760: LD_INT 1
2762: PPUSH
2763: NOP4
2767: IFFALSE 2785
// PlaceHumanInUnit ( Michail , Tank ) else
2769: NOP4
2773: PPUSH
2774: NOP4
2778: PPUSH
2779: NOP4
2783: GO 2800
// PlaceUnitArea ( Michail , EnterArea , false ) ;
2785: NOP4
2789: PPUSH
2790: LD_INT 3
2792: PPUSH
2793: LD_INT 0
2795: PPUSH
2796: NOP4
// RevealFogArea ( 3 , RevealArea ) ;
2800: LD_INT 3
2802: PPUSH
2803: LD_INT 20
2805: PPUSH
2806: NOP4
// RevealFogArea ( 3 , ArRevealArea ) ;
2810: LD_INT 3
2812: PPUSH
2813: LD_INT 21
2815: PPUSH
2816: NOP4
// RevealFogArea ( 3 , BukovBaseArea ) ;
2820: LD_INT 3
2822: PPUSH
2823: LD_INT 7
2825: PPUSH
2826: NOP4
// Say ( Yakotich , 4Yak-01 ) ;
2830: NOP4
2834: PPUSH
2835: LD_STRING 4Yak-01
2837: PPUSH
2838: NOP4
// ComMoveXY ( YakotichCrew , 41 , 17 ) ;
2842: NOP4
2846: PPUSH
2847: LD_INT 41
2849: PPUSH
2850: LD_INT 17
2852: PPUSH
2853: NOP4
// ComMoveXY ( Yakotich , 41 , 17 ) ;
2857: NOP4
2861: PPUSH
2862: LD_INT 41
2864: PPUSH
2865: LD_INT 17
2867: PPUSH
2868: NOP4
// ComMoveXY ( Mietek , 41 , 17 ) ;
2872: NOP4
2876: PPUSH
2877: LD_INT 41
2879: PPUSH
2880: LD_INT 17
2882: PPUSH
2883: NOP4
// AddComMoveXY ( YakotichCrew , 130 , 105 ) ;
2887: NOP4
2891: PPUSH
2892: LD_INT 130
2894: PPUSH
2895: LD_INT 105
2897: PPUSH
2898: NOP4
// AddComMoveXY ( Yakotich , 130 , 105 ) ;
2902: NOP4
2906: PPUSH
2907: LD_INT 130
2909: PPUSH
2910: LD_INT 105
2912: PPUSH
2913: NOP4
// AddComMoveXY ( Mietek , 130 , 105 ) ;
2917: NOP4
2921: PPUSH
2922: LD_INT 130
2924: PPUSH
2925: LD_INT 105
2927: PPUSH
2928: NOP4
// AddComMoveXY ( YakotichCrew , 77 , 93 ) ;
2932: NOP4
2936: PPUSH
2937: LD_INT 77
2939: PPUSH
2940: LD_INT 93
2942: PPUSH
2943: NOP4
// AddComMoveToArea ( [ Stanislav , Vasilij ] , HGCheckArea ) ;
2947: NOP4
2951: PUSH
2952: NOP4
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PPUSH
2961: LD_INT 22
2963: PPUSH
2964: NOP4
// AddComTurnXY ( [ Vasilij , Stanislav ] , 75 , 86 ) ;
2968: NOP4
2972: PUSH
2973: NOP4
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: LD_INT 75
2984: PPUSH
2985: LD_INT 86
2987: PPUSH
2988: NOP4
// AddComMoveToArea ( Yakotich , YakTalk1 ) ;
2992: NOP4
2996: PPUSH
2997: LD_INT 23
2999: PPUSH
3000: NOP4
// AddComMoveXY ( Mietek , 73 , 98 ) ;
3004: NOP4
3008: PPUSH
3009: LD_INT 73
3011: PPUSH
3012: LD_INT 98
3014: PPUSH
3015: NOP4
// AddComTurnXY ( [ Yakotich , Mietek ] , 70 , 99 ) ;
3019: NOP4
3023: PUSH
3024: NOP4
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PPUSH
3033: LD_INT 70
3035: PPUSH
3036: LD_INT 99
3038: PPUSH
3039: NOP4
// end ;
3043: LD_VAR 0 1
3047: RET
// every 0 0$1 trigger IsInArea ( Yakotich , YakTalk1 ) do
3048: NOP4
3052: PPUSH
3053: LD_INT 23
3055: PPUSH
3056: NOP4
3060: IFFALSE 3887
3062: GO 3064
3064: DISABLE
// begin Say ( Yakotich , 4Yak-02 ) ;
3065: NOP4
3069: PPUSH
3070: LD_STRING 4Yak-02
3072: PPUSH
3073: NOP4
// Say ( Morozov , 4Moro-01 ) ;
3077: NOP4
3081: PPUSH
3082: LD_STRING 4Moro-01
3084: PPUSH
3085: NOP4
// Say ( Yakotich , 4Yak-03 ) ;
3089: NOP4
3093: PPUSH
3094: LD_STRING 4Yak-03
3096: PPUSH
3097: NOP4
// Say ( Morozov , 4Moro-02 ) ;
3101: NOP4
3105: PPUSH
3106: LD_STRING 4Moro-02
3108: PPUSH
3109: NOP4
// SetSide ( [ Vasilij , Stanislav ] , 6 ) ;
3113: NOP4
3117: PUSH
3118: NOP4
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PPUSH
3127: LD_INT 6
3129: PPUSH
3130: NOP4
// ComEnterUnit ( [ Vasilij , Stanislav ] , L1L1 ) ;
3134: NOP4
3138: PUSH
3139: NOP4
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: PPUSH
3148: LD_INT 43
3150: PPUSH
3151: NOP4
// Say ( Morozov , 4Moro-03 ) ;
3155: NOP4
3159: PPUSH
3160: LD_STRING 4Moro-03
3162: PPUSH
3163: NOP4
// ComMoveXY ( Grigori , 74 , 102 ) ;
3167: NOP4
3171: PPUSH
3172: LD_INT 74
3174: PPUSH
3175: LD_INT 102
3177: PPUSH
3178: NOP4
// Say ( Grigori , 4Grig-01 ) ;
3182: NOP4
3186: PPUSH
3187: LD_STRING 4Grig-01
3189: PPUSH
3190: NOP4
// Say ( Morozov , 4Moro-04 ) ;
3194: NOP4
3198: PPUSH
3199: LD_STRING 4Moro-04
3201: PPUSH
3202: NOP4
// Say ( Grigori , 4Grig-02 ) ;
3206: NOP4
3210: PPUSH
3211: LD_STRING 4Grig-02
3213: PPUSH
3214: NOP4
// Say ( Popov , 4Popov-01 ) ;
3218: NOP4
3222: PPUSH
3223: LD_STRING 4Popov-01
3225: PPUSH
3226: NOP4
// SetSide ( Grigori , 6 ) ;
3230: NOP4
3234: PPUSH
3235: LD_INT 6
3237: PPUSH
3238: NOP4
// ComEnterUnit ( Grigori , L1L1 ) ;
3242: NOP4
3246: PPUSH
3247: LD_INT 43
3249: PPUSH
3250: NOP4
// Say ( Yakotich , 4Yak-04 ) ;
3254: NOP4
3258: PPUSH
3259: LD_STRING 4Yak-04
3261: PPUSH
3262: NOP4
// Say ( Popov , 4Popov-02 ) ;
3266: NOP4
3270: PPUSH
3271: LD_STRING 4Popov-02
3273: PPUSH
3274: NOP4
// Say ( Yakotich , 4Yak-05 ) ;
3278: NOP4
3282: PPUSH
3283: LD_STRING 4Yak-05
3285: PPUSH
3286: NOP4
// Say ( Morozov , 4Moro-05 ) ;
3290: NOP4
3294: PPUSH
3295: LD_STRING 4Moro-05
3297: PPUSH
3298: NOP4
// Say ( Morozov , 4Moro-06 ) ;
3302: NOP4
3306: PPUSH
3307: LD_STRING 4Moro-06
3309: PPUSH
3310: NOP4
// Say ( Popov , 4Popov-03 ) ;
3314: NOP4
3318: PPUSH
3319: LD_STRING 4Popov-03
3321: PPUSH
3322: NOP4
// Say ( Popov , 4Popov-04 ) ;
3326: NOP4
3330: PPUSH
3331: LD_STRING 4Popov-04
3333: PPUSH
3334: NOP4
// ComExitBuilding ( [ Vasilij , Stanislav ] ) ;
3338: NOP4
3342: PUSH
3343: NOP4
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PPUSH
3352: NOP4
// SetSide ( [ Vasilij , Stanislav ] , 3 ) ;
3356: NOP4
3360: PUSH
3361: NOP4
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PPUSH
3370: LD_INT 3
3372: PPUSH
3373: NOP4
// ComMoveXY ( [ Vasilij , Stanislav ] , 73 , 89 ) ;
3377: NOP4
3381: PUSH
3382: NOP4
3386: PUSH
3387: EMPTY
3388: LIST
3389: LIST
3390: PPUSH
3391: LD_INT 73
3393: PPUSH
3394: LD_INT 89
3396: PPUSH
3397: NOP4
// Say ( Yakotich , 4Yak-06 ) ;
3401: NOP4
3405: PPUSH
3406: LD_STRING 4Yak-06
3408: PPUSH
3409: NOP4
// Say ( Platonov , 4Plat-01 ) ;
3413: NOP4
3417: PPUSH
3418: LD_STRING 4Plat-01
3420: PPUSH
3421: NOP4
// Say ( Platonov , 4Plat-02 ) ;
3425: NOP4
3429: PPUSH
3430: LD_STRING 4Plat-02
3432: PPUSH
3433: NOP4
// Say ( Platonov , 4Plat-03 ) ;
3437: NOP4
3441: PPUSH
3442: LD_STRING 4Plat-03
3444: PPUSH
3445: NOP4
// if Difficulty = 3 then
3449: NOP4
3453: PUSH
3454: LD_INT 3
3456: EQUAL
3457: IFFALSE 3471
// begin Say ( Morozov , 4Moro-Units ) ;
3459: NOP4
3463: PPUSH
3464: LD_STRING 4Moro-Units
3466: PPUSH
3467: NOP4
// end ; Say ( Platonov , 4Plat-04 ) ;
3471: NOP4
3475: PPUSH
3476: LD_STRING 4Plat-04
3478: PPUSH
3479: NOP4
// Say ( Yakotich , 4Yak-07 ) ;
3483: NOP4
3487: PPUSH
3488: LD_STRING 4Yak-07
3490: PPUSH
3491: NOP4
// ComExitBuilding ( Grigori ) ;
3495: NOP4
3499: PPUSH
3500: NOP4
// SetSide ( Grigori , 3 ) ;
3504: NOP4
3508: PPUSH
3509: LD_INT 3
3511: PPUSH
3512: NOP4
// ComTurnUnit ( Grigori , Yakotich ) ;
3516: NOP4
3520: PPUSH
3521: NOP4
3525: PPUSH
3526: NOP4
// Say ( Grigori , 4Grig-03 ) ;
3530: NOP4
3534: PPUSH
3535: LD_STRING 4Grig-03
3537: PPUSH
3538: NOP4
// AddComMoveXY ( YakotichCrew , 117 , 162 ) ;
3542: NOP4
3546: PPUSH
3547: LD_INT 117
3549: PPUSH
3550: LD_INT 162
3552: PPUSH
3553: NOP4
// ComMoveXY ( [ RuCargo1 , RuCargo2 ] , 157 , 232 ) ;
3557: NOP4
3561: PUSH
3562: NOP4
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PPUSH
3571: LD_INT 157
3573: PPUSH
3574: LD_INT 232
3576: PPUSH
3577: NOP4
// AddComMoveXY ( Yakotich , 117 , 162 ) ;
3581: NOP4
3585: PPUSH
3586: LD_INT 117
3588: PPUSH
3589: LD_INT 162
3591: PPUSH
3592: NOP4
// AddComMoveXY ( Mietek , 117 , 162 ) ;
3596: NOP4
3600: PPUSH
3601: LD_INT 117
3603: PPUSH
3604: LD_INT 162
3606: PPUSH
3607: NOP4
// ComEnterUnit ( [ Morozov , Platonov , Popov ] , MorozovBase ) ;
3611: NOP4
3615: PUSH
3616: NOP4
3620: PUSH
3621: NOP4
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: PPUSH
3631: LD_INT 348
3633: PPUSH
3634: NOP4
// AddComMoveXY ( YakotichCrew , 138 , 168 ) ;
3638: NOP4
3642: PPUSH
3643: LD_INT 138
3645: PPUSH
3646: LD_INT 168
3648: PPUSH
3649: NOP4
// AddComMoveXY ( Yakotich , 138 , 168 ) ;
3653: NOP4
3657: PPUSH
3658: LD_INT 138
3660: PPUSH
3661: LD_INT 168
3663: PPUSH
3664: NOP4
// AddComMoveXY ( Mietek , 138 , 168 ) ;
3668: NOP4
3672: PPUSH
3673: LD_INT 138
3675: PPUSH
3676: LD_INT 168
3678: PPUSH
3679: NOP4
// AddComMoveXY ( YakotichCrew , 142 , 199 ) ;
3683: NOP4
3687: PPUSH
3688: LD_INT 142
3690: PPUSH
3691: LD_INT 199
3693: PPUSH
3694: NOP4
// AddComMoveXY ( Yakotich , 142 , 199 ) ;
3698: NOP4
3702: PPUSH
3703: LD_INT 142
3705: PPUSH
3706: LD_INT 199
3708: PPUSH
3709: NOP4
// AddComMoveXY ( Mietek , 142 , 199 ) ;
3713: NOP4
3717: PPUSH
3718: LD_INT 142
3720: PPUSH
3721: LD_INT 199
3723: PPUSH
3724: NOP4
// AddComMoveXY ( YakotichCrew , 157 , 232 ) ;
3728: NOP4
3732: PPUSH
3733: LD_INT 157
3735: PPUSH
3736: LD_INT 232
3738: PPUSH
3739: NOP4
// AddComMoveToArea ( Yakotich , YakTalk2 ) ;
3743: NOP4
3747: PPUSH
3748: LD_INT 24
3750: PPUSH
3751: NOP4
// AddComMoveXY ( Mietek , 167 , 240 ) ;
3755: NOP4
3759: PPUSH
3760: LD_INT 167
3762: PPUSH
3763: LD_INT 240
3765: PPUSH
3766: NOP4
// AddComTurnUnit ( [ Yakotich , Mietek ] , Natasza ) ;
3770: NOP4
3774: PUSH
3775: NOP4
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: PPUSH
3784: NOP4
3788: PPUSH
3789: NOP4
// if Difficulty = 3 then
3793: NOP4
3797: PUSH
3798: LD_INT 3
3800: EQUAL
3801: IFFALSE 3887
// begin SetSide ( [ Constantin , Josif , Aleksiej , Pavel , Zakhar ] , 6 ) ;
3803: NOP4
3807: PUSH
3808: NOP4
3812: PUSH
3813: NOP4
3817: PUSH
3818: NOP4
3822: PUSH
3823: NOP4
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: PPUSH
3835: LD_INT 6
3837: PPUSH
3838: NOP4
// ComEnterUnit ( [ Constantin , Josif , Aleksiej , Zakhar ] , SB1 ) ;
3842: NOP4
3846: PUSH
3847: NOP4
3851: PUSH
3852: NOP4
3856: PUSH
3857: NOP4
3861: PUSH
3862: EMPTY
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: PPUSH
3868: LD_INT 430
3870: PPUSH
3871: NOP4
// ComEnterUnit ( Pavel , SW1 ) ;
3875: NOP4
3879: PPUSH
3880: LD_INT 435
3882: PPUSH
3883: NOP4
// end ; end ;
3887: END
// every 0 0$1 trigger IsInArea ( Yakotich , YakTalk2 ) do
3888: NOP4
3892: PPUSH
3893: LD_INT 24
3895: PPUSH
3896: NOP4
3900: IFFALSE 4277
3902: GO 3904
3904: DISABLE
// begin Say ( Natasza , 4Nati-01 ) ;
3905: NOP4
3909: PPUSH
3910: LD_STRING 4Nati-01
3912: PPUSH
3913: NOP4
// Say ( Yakotich , 4Yak-09 ) ;
3917: NOP4
3921: PPUSH
3922: LD_STRING 4Yak-09
3924: PPUSH
3925: NOP4
// Say ( Natasza , 4Nati-02 ) ;
3929: NOP4
3933: PPUSH
3934: LD_STRING 4Nati-02
3936: PPUSH
3937: NOP4
// Say ( Natasza , 4Nati-03 ) ;
3941: NOP4
3945: PPUSH
3946: LD_STRING 4Nati-03
3948: PPUSH
3949: NOP4
// Say ( Natasza , 4Nati-04 ) ;
3953: NOP4
3957: PPUSH
3958: LD_STRING 4Nati-04
3960: PPUSH
3961: NOP4
// Say ( Yakotich , 4Yak-10 ) ;
3965: NOP4
3969: PPUSH
3970: LD_STRING 4Yak-10
3972: PPUSH
3973: NOP4
// Say ( Natasza , 4Nati-05 ) ;
3977: NOP4
3981: PPUSH
3982: LD_STRING 4Nati-05
3984: PPUSH
3985: NOP4
// ComMoveXY ( Stanislav , 167 , 238 ) ;
3989: NOP4
3993: PPUSH
3994: LD_INT 167
3996: PPUSH
3997: LD_INT 238
3999: PPUSH
4000: NOP4
// AddComTurnUnit ( Stanislav , Natasza ) ;
4004: NOP4
4008: PPUSH
4009: NOP4
4013: PPUSH
4014: NOP4
// Say ( Stanislav , 4Stan-01 ) ;
4018: NOP4
4022: PPUSH
4023: LD_STRING 4Stan-01
4025: PPUSH
4026: NOP4
// Say ( Yakotich , 4Yak-11 ) ;
4030: NOP4
4034: PPUSH
4035: LD_STRING 4Yak-11
4037: PPUSH
4038: NOP4
// Say ( Natasza , 4Nati-06 ) ;
4042: NOP4
4046: PPUSH
4047: LD_STRING 4Nati-06
4049: PPUSH
4050: NOP4
// Say ( Mietek , 4Mietek-03 ) ;
4054: NOP4
4058: PPUSH
4059: LD_STRING 4Mietek-03
4061: PPUSH
4062: NOP4
// Say ( Yakotich , 4Yak-12 ) ;
4066: NOP4
4070: PPUSH
4071: LD_STRING 4Yak-12
4073: PPUSH
4074: NOP4
// ChangeMissionObjectives ( o1 ) ;
4078: LD_STRING o1
4080: PPUSH
4081: NOP4
// start_ended = true ;
4085: NOP4
4089: PUSH
4090: LD_INT 1
4092: ST_TO_ADDR
// SayRadio ( Yakotich , 4Yak-Sib-01 ) ;
4093: NOP4
4097: PPUSH
4098: LD_STRING 4Yak-Sib-01
4100: PPUSH
4101: NOP4
// SayRadio ( Morozov , 4Moro-Sib-01 ) ;
4105: NOP4
4109: PPUSH
4110: LD_STRING 4Moro-Sib-01
4112: PPUSH
4113: NOP4
// InGameOff ;
4117: NOP4
// if LoadVariable ( 03_FlameSaved , 1 ) then
4121: LD_STRING 03_FlameSaved
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: NOP4
4131: IFFALSE 4179
// begin Wait ( 0 0$15 ) ;
4133: LD_INT 525
4135: PPUSH
4136: NOP4
// DialogueOn ;
4140: NOP4
// Say ( Vasilij , 4Vas-Flame-01 ) ;
4144: NOP4
4148: PPUSH
4149: LD_STRING 4Vas-Flame-01
4151: PPUSH
4152: NOP4
// Say ( Vasilij , 4Vas-Flame-02 ) ;
4156: NOP4
4160: PPUSH
4161: LD_STRING 4Vas-Flame-02
4163: PPUSH
4164: NOP4
// ChangeMissionObjectives ( o2 ) ;
4168: LD_STRING o2
4170: PPUSH
4171: NOP4
// DialogueOff ;
4175: NOP4
// end ; Wait ( 5 5$0 ) ;
4179: LD_INT 10500
4181: PPUSH
4182: NOP4
// InitBierezov ;
4186: NOP4
// ComMoveXY ( BierezovCrew , 77 , 50 ) ;
4190: NOP4
4194: PPUSH
4195: LD_INT 77
4197: PPUSH
4198: LD_INT 50
4200: PPUSH
4201: NOP4
// AddComMoveXY ( Bierezov , 77 , 50 ) ;
4205: NOP4
4209: PPUSH
4210: LD_INT 77
4212: PPUSH
4213: LD_INT 50
4215: PPUSH
4216: NOP4
// AddComMoveXY ( BierezovCrew , 132 , 106 ) ;
4220: NOP4
4224: PPUSH
4225: LD_INT 132
4227: PPUSH
4228: LD_INT 106
4230: PPUSH
4231: NOP4
// AddComMoveXY ( Bierezov , 132 , 106 ) ;
4235: NOP4
4239: PPUSH
4240: LD_INT 132
4242: PPUSH
4243: LD_INT 106
4245: PPUSH
4246: NOP4
// AddComMoveXY ( BierezovCrew , 79 , 104 ) ;
4250: NOP4
4254: PPUSH
4255: LD_INT 79
4257: PPUSH
4258: LD_INT 104
4260: PPUSH
4261: NOP4
// AddComEnterUnit ( Bierezov , MorozovBase ) ;
4265: NOP4
4269: PPUSH
4270: LD_INT 348
4272: PPUSH
4273: NOP4
// end ;
4277: END
// every 0 0$1 trigger IsInArea ( Bierezov , NorthLeninArea ) do
4278: NOP4
4282: PPUSH
4283: LD_INT 5
4285: PPUSH
4286: NOP4
4290: IFFALSE 4480
4292: GO 4294
4294: DISABLE
// begin SetSide ( Bierezov , 6 ) ;
4295: NOP4
4299: PPUSH
4300: LD_INT 6
4302: PPUSH
4303: NOP4
// Wait ( 1 1$30 ) ;
4307: LD_INT 3150
4309: PPUSH
4310: NOP4
// ComExitBuilding ( Bierezov ) ;
4314: NOP4
4318: PPUSH
4319: NOP4
// ComExitBuilding ( BierezovNewCrew ) ;
4323: NOP4
4327: PPUSH
4328: NOP4
// SetSide ( Bierezov , 4 ) ;
4332: NOP4
4336: PPUSH
4337: LD_INT 4
4339: PPUSH
4340: NOP4
// BierezovCrew := BierezovCrew ^ BierezovNewCrew ;
4344: NOP4
4348: PUSH
4349: NOP4
4353: PUSH
4354: NOP4
4358: ADD
4359: ST_TO_ADDR
// BierezovEngineers := BierezovEngineers ^ FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) ;
4360: NOP4
4364: PUSH
4365: NOP4
4369: PUSH
4370: LD_INT 22
4372: PUSH
4373: LD_INT 4
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: PUSH
4380: LD_INT 25
4382: PUSH
4383: LD_INT 2
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: EMPTY
4391: LIST
4392: LIST
4393: PPUSH
4394: NOP4
4398: ADD
4399: ST_TO_ADDR
// Wait ( 0 0$01 ) ;
4400: LD_INT 35
4402: PPUSH
4403: NOP4
// AddComMoveXY ( BierezovCrew , 82 , 54 ) ;
4407: NOP4
4411: PPUSH
4412: LD_INT 82
4414: PPUSH
4415: LD_INT 54
4417: PPUSH
4418: NOP4
// AddComMoveXY ( [ Sharonov , Korotajev ] , 87 , 34 ) ;
4422: NOP4
4426: PUSH
4427: NOP4
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: PPUSH
4436: LD_INT 87
4438: PPUSH
4439: LD_INT 34
4441: PPUSH
4442: NOP4
// AddComMoveXY ( Bierezov , 85 , 52 ) ;
4446: NOP4
4450: PPUSH
4451: LD_INT 85
4453: PPUSH
4454: LD_INT 52
4456: PPUSH
4457: NOP4
// AddComTurnXY ( Bierezov , 84 , 54 ) ;
4461: NOP4
4465: PPUSH
4466: LD_INT 84
4468: PPUSH
4469: LD_INT 54
4471: PPUSH
4472: NOP4
// BierezovAI ;
4476: NOP4
// end ;
4480: END
// every 0 0$1 trigger not PrepareTime do
4481: NOP4
4485: NOT
4486: IFFALSE 4674
4488: GO 4490
4490: DISABLE
// begin Wait ( 0 0$24 ) ;
4491: LD_INT 840
4493: PPUSH
4494: NOP4
// InGameOn ;
4498: NOP4
// DialogueOn ;
4502: NOP4
// SayRadio ( Pompa , 4Pompa-01 ) ;
4506: NOP4
4510: PPUSH
4511: LD_STRING 4Pompa-01
4513: PPUSH
4514: NOP4
// SayRadio ( Platonov , 4Plat-05 ) ;
4518: NOP4
4522: PPUSH
4523: LD_STRING 4Plat-05
4525: PPUSH
4526: NOP4
// SayRadio ( Pompa , 4Pompa-02 ) ;
4530: NOP4
4534: PPUSH
4535: LD_STRING 4Pompa-02
4537: PPUSH
4538: NOP4
// SayRadio ( Platonov , 4Plat-06 ) ;
4542: NOP4
4546: PPUSH
4547: LD_STRING 4Plat-06
4549: PPUSH
4550: NOP4
// SayRadio ( Platonov , 4Plat-07 ) ;
4554: NOP4
4558: PPUSH
4559: LD_STRING 4Plat-07
4561: PPUSH
4562: NOP4
// SayRadio ( Bukov , 4Bukov-01 ) ;
4566: NOP4
4570: PPUSH
4571: LD_STRING 4Bukov-01
4573: PPUSH
4574: NOP4
// SayRadio ( Platonov , 4Plat-08 ) ;
4578: NOP4
4582: PPUSH
4583: LD_STRING 4Plat-08
4585: PPUSH
4586: NOP4
// ChangeMissionObjectives ( o4 ) ;
4590: LD_STRING o4
4592: PPUSH
4593: NOP4
// InGameOff ;
4597: NOP4
// DialogueOff ;
4601: NOP4
// Wait ( 0 0$36 ) ;
4605: LD_INT 1260
4607: PPUSH
4608: NOP4
// InitPompa ;
4612: NOP4
// ComMoveXY ( PompaCrew , 76 , 100 ) ;
4616: NOP4
4620: PPUSH
4621: LD_INT 76
4623: PPUSH
4624: LD_INT 100
4626: PPUSH
4627: NOP4
// NorthLeninCrew := NorthLeninCrew union PompaCrew ;
4631: NOP4
4635: PUSH
4636: NOP4
4640: PUSH
4641: NOP4
4645: UNION
4646: ST_TO_ADDR
// ComEnterUnit ( Bukov , BukovTank ) ;
4647: NOP4
4651: PPUSH
4652: LD_INT 342
4654: PPUSH
4655: NOP4
// ComMoveXY ( Bukov , 177 , 204 ) ;
4659: NOP4
4663: PPUSH
4664: LD_INT 177
4666: PPUSH
4667: LD_INT 204
4669: PPUSH
4670: NOP4
// end ; end_of_file
4674: END
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
4675: LD_INT 0
4677: PPUSH
4678: PPUSH
4679: PPUSH
// uc_side := GetSide ( b ) ;
4680: LD_ADDR_OWVAR 20
4684: PUSH
4685: NOP4
4689: PPUSH
4690: NOP4
4694: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4695: LD_ADDR_OWVAR 21
4699: PUSH
4700: NOP4
4704: PPUSH
4705: NOP4
4709: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4710: NOP4
4714: PUSH
4715: NOP4
4719: PPUSH
4720: NOP4
4724: PUSH
4725: LD_INT 3
4727: MINUS
4728: ST_TO_ADDR
// if dir < 0 then
4729: NOP4
4733: PUSH
4734: LD_INT 0
4736: LESS
4737: IFFALSE 4753
// dir := 6 + dir ;
4739: NOP4
4743: PUSH
4744: LD_INT 6
4746: PUSH
4747: NOP4
4751: PLUS
4752: ST_TO_ADDR
// un := CreateHuman ;
4753: NOP4
4757: PUSH
4758: NOP4
4762: ST_TO_ADDR
// SetDir ( un , dir ) ;
4763: NOP4
4767: PPUSH
4768: NOP4
4772: PPUSH
4773: NOP4
// PlaceHumanInUnit ( un , b ) ;
4777: NOP4
4781: PPUSH
4782: NOP4
4786: PPUSH
4787: NOP4
// end ;
4791: LD_VAR 0 3
4795: RET
// every 1 trigger IsSelected ( Janusz ) do
4796: LD_INT 420
4798: PPUSH
4799: NOP4
4803: IFFALSE 4900
4805: GO 4807
4807: DISABLE
// begin JanuszExp ( [ 1 , 2 , 3 , 4 ] ) ;
4808: LD_INT 1
4810: PUSH
4811: LD_INT 2
4813: PUSH
4814: LD_INT 3
4816: PUSH
4817: LD_INT 4
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: PPUSH
4826: NOP4
// Wait ( 0 0$03 ) ;
4830: LD_INT 105
4832: PPUSH
4833: NOP4
// Say ( Janusz , 4Janusz-Sikret ) ;
4837: LD_INT 420
4839: PPUSH
4840: LD_STRING 4Janusz-Sikret
4842: PPUSH
4843: NOP4
// TeleportUnit ( Janusz , 120 , 246 , 246 , true ) ;
4847: LD_INT 420
4849: PPUSH
4850: LD_INT 120
4852: PPUSH
4853: LD_INT 246
4855: PPUSH
4856: LD_INT 246
4858: PPUSH
4859: LD_INT 1
4861: PPUSH
4862: NOP4
// Wait ( 0 0$03 ) ;
4866: LD_INT 105
4868: PPUSH
4869: NOP4
// RemoveUnit ( Janusz ) ;
4873: LD_INT 420
4875: PPUSH
4876: NOP4
// SaveVariable ( 1 , JanuszSaved ) ;
4880: LD_INT 1
4882: PPUSH
4883: LD_STRING JanuszSaved
4885: PPUSH
4886: NOP4
// SaveCharacters ( Janusz , Janusz ) ;
4890: LD_INT 420
4892: PPUSH
4893: LD_STRING Janusz
4895: PPUSH
4896: NOP4
// end ;
4900: END
// export function JanuszExp ( q ) ; var dec , q1 ; begin
4901: LD_INT 0
4903: PPUSH
4904: PPUSH
4905: PPUSH
// dec = SelectiveQuery ( JanuszQuery , q ) ;
4906: NOP4
4910: PUSH
4911: LD_STRING JanuszQuery
4913: PPUSH
4914: NOP4
4918: PPUSH
4919: NOP4
4923: ST_TO_ADDR
// case dec of 1 :
4924: NOP4
4928: PUSH
4929: LD_INT 1
4931: DOUBLE
4932: EQUAL
4933: IFTRUE 4937
4935: GO 4955
4937: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 2500 ) ;
4938: NOP4
4942: PPUSH
4943: LD_INT 1
4945: PPUSH
4946: LD_INT 2500
4948: PPUSH
4949: NOP4
// end ; 2 :
4953: GO 5034
4955: LD_INT 2
4957: DOUBLE
4958: EQUAL
4959: IFTRUE 4963
4961: GO 4981
4963: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 2500 ) ;
4964: NOP4
4968: PPUSH
4969: LD_INT 2
4971: PPUSH
4972: LD_INT 2500
4974: PPUSH
4975: NOP4
// end ; 3 :
4979: GO 5034
4981: LD_INT 3
4983: DOUBLE
4984: EQUAL
4985: IFTRUE 4989
4987: GO 5007
4989: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 2500 ) ;
4990: NOP4
4994: PPUSH
4995: LD_INT 3
4997: PPUSH
4998: LD_INT 2500
5000: PPUSH
5001: NOP4
// end ; 4 :
5005: GO 5034
5007: LD_INT 4
5009: DOUBLE
5010: EQUAL
5011: IFTRUE 5015
5013: GO 5033
5015: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 2500 ) ;
5016: NOP4
5020: PPUSH
5021: LD_INT 4
5023: PPUSH
5024: LD_INT 2500
5026: PPUSH
5027: NOP4
// end ; end ;
5031: GO 5034
5033: POP
// end ;
5034: LD_VAR 0 2
5038: RET
// export function TransportQuery ( q ) ; var dec , q1 ; begin
5039: LD_INT 0
5041: PPUSH
5042: PPUSH
5043: PPUSH
// dec = SelectiveQuery ( TransportQuery , q ) ;
5044: NOP4
5048: PUSH
5049: LD_STRING TransportQuery
5051: PPUSH
5052: NOP4
5056: PPUSH
5057: NOP4
5061: ST_TO_ADDR
// case dec of 1 :
5062: NOP4
5066: PUSH
5067: LD_INT 1
5069: DOUBLE
5070: EQUAL
5071: IFTRUE 5075
5073: GO 5078
5075: POP
// begin end ; end ;
5076: GO 5079
5078: POP
// end ;
5079: LD_VAR 0 2
5083: RET
// every 1 trigger start_ended = false do
5084: NOP4
5088: PUSH
5089: LD_INT 0
5091: EQUAL
5092: IFFALSE 5107
5094: GO 5096
5096: DISABLE
// begin CenterOnUnits ( Yakotich ) ;
5097: NOP4
5101: PPUSH
5102: NOP4
// enable ;
5106: ENABLE
// end ;
5107: END
// every 1 trigger FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
5108: LD_INT 10
5110: PPUSH
5111: LD_INT 22
5113: PUSH
5114: LD_INT 3
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: PUSH
5121: LD_INT 2
5123: PUSH
5124: LD_INT 21
5126: PUSH
5127: LD_INT 1
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: PUSH
5134: LD_INT 21
5136: PUSH
5137: LD_INT 2
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PPUSH
5153: NOP4
5157: PUSH
5158: LD_INT 0
5160: GREATER
5161: IFFALSE 5247
5163: GO 5165
5165: DISABLE
5166: LD_INT 0
5168: PPUSH
// begin enable ;
5169: ENABLE
// for unit in FilterUnitsInArea ( DontEnterArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
5170: NOP4
5174: PUSH
5175: LD_INT 10
5177: PPUSH
5178: LD_INT 22
5180: PUSH
5181: LD_INT 3
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 2
5190: PUSH
5191: LD_INT 21
5193: PUSH
5194: LD_INT 1
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PUSH
5201: LD_INT 21
5203: PUSH
5204: LD_INT 2
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PPUSH
5220: NOP4
5224: PUSH
5225: FOR_IN
5226: IFFALSE 5245
// begin ComMoveXY ( unit , 163 , 235 ) ;
5228: NOP4
5232: PPUSH
5233: LD_INT 163
5235: PPUSH
5236: LD_INT 235
5238: PPUSH
5239: NOP4
// end ;
5243: GO 5225
5245: POP
5246: POP
// end ;
5247: PPOPN 1
5249: END
// every 0 0$1 trigger start_ended = true do
5250: NOP4
5254: PUSH
5255: LD_INT 1
5257: EQUAL
5258: IFFALSE 5312
5260: GO 5262
5262: DISABLE
// begin enable ;
5263: ENABLE
// if PrepareTime then
5264: NOP4
5268: IFFALSE 5303
// begin PrepareTime := PrepareTime - 0 0$1 ;
5270: NOP4
5274: PUSH
5275: NOP4
5279: PUSH
5280: LD_INT 35
5282: MINUS
5283: ST_TO_ADDR
// display_strings := [ #PrepareTime , PrepareTime ] ;
5284: LD_ADDR_OWVAR 47
5288: PUSH
5289: LD_STRING #PrepareTime
5291: PUSH
5292: NOP4
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: ST_TO_ADDR
// end else
5301: GO 5312
// begin display_strings :=  ;
5303: LD_ADDR_OWVAR 47
5307: PUSH
5308: LD_STRING 
5310: ST_TO_ADDR
// disable ;
5311: DISABLE
// end ; end ;
5312: END
// export function BierezovAI ; begin
5313: LD_INT 0
5315: PPUSH
// AddComBuild ( BierezovEngineers , b_depot , 80 , 47 , 3 ) ;
5316: NOP4
5320: PPUSH
5321: LD_INT 0
5323: PPUSH
5324: LD_INT 80
5326: PPUSH
5327: LD_INT 47
5329: PPUSH
5330: LD_INT 3
5332: PPUSH
5333: NOP4
// AddComBuild ( BierezovEngineers , b_lab , 78 , 34 , 0 ) ;
5337: NOP4
5341: PPUSH
5342: LD_INT 6
5344: PPUSH
5345: LD_INT 78
5347: PPUSH
5348: LD_INT 34
5350: PPUSH
5351: LD_INT 0
5353: PPUSH
5354: NOP4
// AddComBuild ( BierezovEngineers , b_oil_mine , 79 , 26 , 0 ) ;
5358: NOP4
5362: PPUSH
5363: LD_INT 29
5365: PPUSH
5366: LD_INT 79
5368: PPUSH
5369: LD_INT 26
5371: PPUSH
5372: LD_INT 0
5374: PPUSH
5375: NOP4
// AddComBuild ( BierezovEngineers , b_oil_power , 84 , 28 , 5 ) ;
5379: NOP4
5383: PPUSH
5384: LD_INT 26
5386: PPUSH
5387: LD_INT 84
5389: PPUSH
5390: LD_INT 28
5392: PPUSH
5393: LD_INT 5
5395: PPUSH
5396: NOP4
// AddComBuild ( BierezovEngineers , b_workshop , 92 , 41 , 3 ) ;
5400: NOP4
5404: PPUSH
5405: LD_INT 2
5407: PPUSH
5408: LD_INT 92
5410: PPUSH
5411: LD_INT 41
5413: PPUSH
5414: LD_INT 3
5416: PPUSH
5417: NOP4
// AddComBuild ( BierezovEngineers , b_ext_gun , 95 , 41 , 4 ) ;
5421: NOP4
5425: PPUSH
5426: LD_INT 17
5428: PPUSH
5429: LD_INT 95
5431: PPUSH
5432: LD_INT 41
5434: PPUSH
5435: LD_INT 4
5437: PPUSH
5438: NOP4
// AddComBuild ( BierezovEngineers , b_ext_rocket , 96 , 45 , 5 ) ;
5442: NOP4
5446: PPUSH
5447: LD_INT 18
5449: PPUSH
5450: LD_INT 96
5452: PPUSH
5453: LD_INT 45
5455: PPUSH
5456: LD_INT 5
5458: PPUSH
5459: NOP4
// AddComBuild ( BierezovEngineers , b_ext_noncombat , 92 , 37 , 3 ) ;
5463: NOP4
5467: PPUSH
5468: LD_INT 19
5470: PPUSH
5471: LD_INT 92
5473: PPUSH
5474: LD_INT 37
5476: PPUSH
5477: LD_INT 3
5479: PPUSH
5480: NOP4
// AddComBuild ( BierezovEngineers , b_oil_power , 74 , 25 , 2 ) ;
5484: NOP4
5488: PPUSH
5489: LD_INT 26
5491: PPUSH
5492: LD_INT 74
5494: PPUSH
5495: LD_INT 25
5497: PPUSH
5498: LD_INT 2
5500: PPUSH
5501: NOP4
// AddComBuild ( BierezovEngineers , b_oil_power , 75 , 21 , 1 ) ;
5505: NOP4
5509: PPUSH
5510: LD_INT 26
5512: PPUSH
5513: LD_INT 75
5515: PPUSH
5516: LD_INT 21
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: NOP4
// AddComBuild ( BierezovEngineers , b_armoury , 80 , 59 , 0 ) ;
5526: NOP4
5530: PPUSH
5531: LD_INT 4
5533: PPUSH
5534: LD_INT 80
5536: PPUSH
5537: LD_INT 59
5539: PPUSH
5540: LD_INT 0
5542: PPUSH
5543: NOP4
// AddComBuild ( BierezovEngineers , b_bunker , 89 , 56 , 0 ) ;
5547: NOP4
5551: PPUSH
5552: LD_INT 32
5554: PPUSH
5555: LD_INT 89
5557: PPUSH
5558: LD_INT 56
5560: PPUSH
5561: LD_INT 0
5563: PPUSH
5564: NOP4
// AddComBuild ( BierezovEngineers , b_bunker , 99 , 57 , 0 ) ;
5568: NOP4
5572: PPUSH
5573: LD_INT 32
5575: PPUSH
5576: LD_INT 99
5578: PPUSH
5579: LD_INT 57
5581: PPUSH
5582: LD_INT 0
5584: PPUSH
5585: NOP4
// AddComBuild ( BierezovEngineers , b_bunker , 94 , 58 , 0 ) ;
5589: NOP4
5593: PPUSH
5594: LD_INT 32
5596: PPUSH
5597: LD_INT 94
5599: PPUSH
5600: LD_INT 58
5602: PPUSH
5603: LD_INT 0
5605: PPUSH
5606: NOP4
// AddComBuild ( BierezovEngineers , b_bunker , 56 , 25 , 2 ) ;
5610: NOP4
5614: PPUSH
5615: LD_INT 32
5617: PPUSH
5618: LD_INT 56
5620: PPUSH
5621: LD_INT 25
5623: PPUSH
5624: LD_INT 2
5626: PPUSH
5627: NOP4
// AddComBuild ( BierezovEngineers , b_breastwork , 52 , 30 , 2 ) ;
5631: NOP4
5635: PPUSH
5636: LD_INT 31
5638: PPUSH
5639: LD_INT 52
5641: PPUSH
5642: LD_INT 30
5644: PPUSH
5645: LD_INT 2
5647: PPUSH
5648: NOP4
// end ; end_of_file
5652: LD_VAR 0 1
5656: RET
// every 0 0$1 trigger start_ended = true do
5657: NOP4
5661: PUSH
5662: LD_INT 1
5664: EQUAL
5665: IFFALSE 5960
5667: GO 5669
5669: DISABLE
// begin ComResearch ( [ L1L1 , L1L2 ] , 48 ) ;
5670: LD_INT 43
5672: PUSH
5673: LD_INT 234
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PPUSH
5680: LD_INT 48
5682: PPUSH
5683: NOP4
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 49 ) ;
5687: LD_INT 43
5689: PUSH
5690: LD_INT 234
5692: PUSH
5693: LD_INT 129
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: LIST
5700: PPUSH
5701: LD_INT 49
5703: PPUSH
5704: NOP4
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 51 ) ;
5708: LD_INT 43
5710: PUSH
5711: LD_INT 234
5713: PUSH
5714: LD_INT 129
5716: PUSH
5717: EMPTY
5718: LIST
5719: LIST
5720: LIST
5721: PPUSH
5722: LD_INT 51
5724: PPUSH
5725: NOP4
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 57 ) ;
5729: LD_INT 43
5731: PUSH
5732: LD_INT 234
5734: PUSH
5735: LD_INT 129
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: LIST
5742: PPUSH
5743: LD_INT 57
5745: PPUSH
5746: NOP4
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 82 ) ;
5750: LD_INT 43
5752: PUSH
5753: LD_INT 234
5755: PUSH
5756: LD_INT 129
5758: PUSH
5759: EMPTY
5760: LIST
5761: LIST
5762: LIST
5763: PPUSH
5764: LD_INT 82
5766: PPUSH
5767: NOP4
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 83 ) ;
5771: LD_INT 43
5773: PUSH
5774: LD_INT 234
5776: PUSH
5777: LD_INT 129
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: LIST
5784: PPUSH
5785: LD_INT 83
5787: PPUSH
5788: NOP4
// AddComResearch ( [ L1L1 , L1L2 , BukovL ] , 84 ) ;
5792: LD_INT 43
5794: PUSH
5795: LD_INT 234
5797: PUSH
5798: LD_INT 129
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: LIST
5805: PPUSH
5806: LD_INT 84
5808: PPUSH
5809: NOP4
// ComExitBuilding ( [ SouthLeninEngineers , NorthLeninEngineers ] ) ;
5813: NOP4
5817: PUSH
5818: NOP4
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PPUSH
5827: NOP4
// AddComBuild ( NorthLeninEngineers , 32 , 82 , 93 , 4 ) ;
5831: NOP4
5835: PPUSH
5836: LD_INT 32
5838: PPUSH
5839: LD_INT 82
5841: PPUSH
5842: LD_INT 93
5844: PPUSH
5845: LD_INT 4
5847: PPUSH
5848: NOP4
// AddComBuild ( NorthLeninEngineers , 32 , 95 , 120 , 4 ) ;
5852: NOP4
5856: PPUSH
5857: LD_INT 32
5859: PPUSH
5860: LD_INT 95
5862: PPUSH
5863: LD_INT 120
5865: PPUSH
5866: LD_INT 4
5868: PPUSH
5869: NOP4
// AddComBuild ( NorthLeninEngineers , 32 , 69 , 81 , 3 ) ;
5873: NOP4
5877: PPUSH
5878: LD_INT 32
5880: PPUSH
5881: LD_INT 69
5883: PPUSH
5884: LD_INT 81
5886: PPUSH
5887: LD_INT 3
5889: PPUSH
5890: NOP4
// AddComEnterUnit ( NorthLeninEngineers , NorthLenin ) ;
5894: NOP4
5898: PPUSH
5899: LD_INT 253
5901: PPUSH
5902: NOP4
// AddComBuild ( SouthLeninEngineers , 32 , 123 , 174 , 4 ) ;
5906: NOP4
5910: PPUSH
5911: LD_INT 32
5913: PPUSH
5914: LD_INT 123
5916: PPUSH
5917: LD_INT 174
5919: PPUSH
5920: LD_INT 4
5922: PPUSH
5923: NOP4
// AddComBuild ( SouthLeninEngineers , 32 , 124 , 184 , 5 ) ;
5927: NOP4
5931: PPUSH
5932: LD_INT 32
5934: PPUSH
5935: LD_INT 124
5937: PPUSH
5938: LD_INT 184
5940: PPUSH
5941: LD_INT 5
5943: PPUSH
5944: NOP4
// AddComEnterUnit ( SouthLeninEngineers , SouthLenin ) ;
5948: NOP4
5952: PPUSH
5953: LD_INT 218
5955: PPUSH
5956: NOP4
// end ;
5960: END
// export function InitCommanders ; begin
5961: LD_INT 0
5963: PPUSH
// Uc_Side := 6 ;
5964: LD_ADDR_OWVAR 20
5968: PUSH
5969: LD_INT 6
5971: ST_TO_ADDR
// Uc_Nation := 3 ;
5972: LD_ADDR_OWVAR 21
5976: PUSH
5977: LD_INT 3
5979: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
5980: NOP4
5984: PUSH
5985: LD_STRING Morozov
5987: PPUSH
5988: LD_INT 0
5990: PPUSH
5991: LD_STRING 
5993: PPUSH
5994: NOP4
5998: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
5999: NOP4
6003: PUSH
6004: LD_STRING Platonov
6006: PPUSH
6007: LD_INT 0
6009: PPUSH
6010: LD_STRING 
6012: PPUSH
6013: NOP4
6017: ST_TO_ADDR
// Popov := PrepareUnit ( Popov , false ,  ) ;
6018: NOP4
6022: PUSH
6023: LD_STRING Popov
6025: PPUSH
6026: LD_INT 0
6028: PPUSH
6029: LD_STRING 
6031: PPUSH
6032: NOP4
6036: ST_TO_ADDR
// Bukov := PrepareUnit ( Bukov , false ,  ) ;
6037: NOP4
6041: PUSH
6042: LD_STRING Bukov
6044: PPUSH
6045: LD_INT 0
6047: PPUSH
6048: LD_STRING 
6050: PPUSH
6051: NOP4
6055: ST_TO_ADDR
// Gaydar := PrepareUnit ( Gaydar , false ,  ) ;
6056: NOP4
6060: PUSH
6061: LD_STRING Gaydar
6063: PPUSH
6064: LD_INT 0
6066: PPUSH
6067: LD_STRING 
6069: PPUSH
6070: NOP4
6074: ST_TO_ADDR
// PlaceUnitArea ( Morozov , CommanderSpawn , false ) ;
6075: NOP4
6079: PPUSH
6080: LD_INT 19
6082: PPUSH
6083: LD_INT 0
6085: PPUSH
6086: NOP4
// PlaceUnitArea ( Platonov , CommanderSpawn , false ) ;
6090: NOP4
6094: PPUSH
6095: LD_INT 19
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: NOP4
// PlaceUnitArea ( Popov , CommanderSpawn , false ) ;
6105: NOP4
6109: PPUSH
6110: LD_INT 19
6112: PPUSH
6113: LD_INT 0
6115: PPUSH
6116: NOP4
// ComTurnXY ( [ Morozov , Platonov , Popov ] , 73 , 100 ) ;
6120: NOP4
6124: PUSH
6125: NOP4
6129: PUSH
6130: NOP4
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: PPUSH
6140: LD_INT 73
6142: PPUSH
6143: LD_INT 100
6145: PPUSH
6146: NOP4
// PlaceUnitArea ( Gaydar , GaydarSpawn , false ) ;
6150: NOP4
6154: PPUSH
6155: LD_INT 15
6157: PPUSH
6158: LD_INT 0
6160: PPUSH
6161: NOP4
// ComTurnXY ( Gaydar , 214 , 160 ) ;
6165: NOP4
6169: PPUSH
6170: LD_INT 214
6172: PPUSH
6173: LD_INT 160
6175: PPUSH
6176: NOP4
// PlaceUnitArea ( Bukov , BukovSpawn , false ) ;
6180: NOP4
6184: PPUSH
6185: LD_INT 16
6187: PPUSH
6188: LD_INT 0
6190: PPUSH
6191: NOP4
// ComTurnXY ( Bukov , 312 , 218 ) ;
6195: NOP4
6199: PPUSH
6200: LD_INT 312
6202: PPUSH
6203: LD_INT 218
6205: PPUSH
6206: NOP4
// end ;
6210: LD_VAR 0 1
6214: RET
// export SouthLeninEngineers , NorthLeninEngineers ; export function InitRussianAI ; var i , z , y , turrety , fabryka , lab , zbrojka ; begin
6215: LD_INT 0
6217: PPUSH
6218: PPUSH
6219: PPUSH
6220: PPUSH
6221: PPUSH
6222: PPUSH
6223: PPUSH
6224: PPUSH
// Hc_Gallery :=  ;
6225: LD_ADDR_OWVAR 33
6229: PUSH
6230: LD_STRING 
6232: ST_TO_ADDR
// Hc_Name :=  ;
6233: LD_ADDR_OWVAR 26
6237: PUSH
6238: LD_STRING 
6240: ST_TO_ADDR
// NorthLeninCrew := [ ] ;
6241: NOP4
6245: PUSH
6246: EMPTY
6247: ST_TO_ADDR
// uc_side := 6 ;
6248: LD_ADDR_OWVAR 20
6252: PUSH
6253: LD_INT 6
6255: ST_TO_ADDR
// uc_nation := 3 ;
6256: LD_ADDR_OWVAR 21
6260: PUSH
6261: LD_INT 3
6263: ST_TO_ADDR
// for i = 1 to 8 do
6264: NOP4
6268: PUSH
6269: DOUBLE
6270: LD_INT 1
6272: DEC
6273: ST_TO_ADDR
6274: LD_INT 8
6276: PUSH
6277: FOR_TO
6278: IFFALSE 6333
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6280: LD_INT 0
6282: PPUSH
6283: LD_INT 1
6285: PPUSH
6286: NOP4
6290: PPUSH
6291: LD_INT 7
6293: PUSH
6294: LD_INT 5
6296: PUSH
6297: LD_INT 3
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: PUSH
6305: NOP4
6309: ARRAY
6310: PPUSH
6311: NOP4
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
6315: NOP4
6319: PUSH
6320: NOP4
6324: PUSH
6325: NOP4
6329: ADD
6330: ST_TO_ADDR
// end ;
6331: GO 6277
6333: POP
6334: POP
// for i = 1 to 2 do
6335: NOP4
6339: PUSH
6340: DOUBLE
6341: LD_INT 1
6343: DEC
6344: ST_TO_ADDR
6345: LD_INT 2
6347: PUSH
6348: FOR_TO
6349: IFFALSE 6404
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6351: LD_INT 0
6353: PPUSH
6354: LD_INT 1
6356: PPUSH
6357: NOP4
6361: PPUSH
6362: LD_INT 7
6364: PUSH
6365: LD_INT 5
6367: PUSH
6368: LD_INT 3
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: LIST
6375: PUSH
6376: NOP4
6380: ARRAY
6381: PPUSH
6382: NOP4
// NorthLeninEngineers := NorthLeninEngineers ^ CreateHuman ;
6386: NOP4
6390: PUSH
6391: NOP4
6395: PUSH
6396: NOP4
6400: ADD
6401: ST_TO_ADDR
// end ;
6402: GO 6348
6404: POP
6405: POP
// NorthLeninCrew := NorthLeninCrew ^ NorthLeninEngineers ;
6406: NOP4
6410: PUSH
6411: NOP4
6415: PUSH
6416: NOP4
6420: ADD
6421: ST_TO_ADDR
// for i = 1 to 3 do
6422: NOP4
6426: PUSH
6427: DOUBLE
6428: LD_INT 1
6430: DEC
6431: ST_TO_ADDR
6432: LD_INT 3
6434: PUSH
6435: FOR_TO
6436: IFFALSE 6491
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6438: LD_INT 0
6440: PPUSH
6441: LD_INT 1
6443: PPUSH
6444: NOP4
6448: PPUSH
6449: LD_INT 7
6451: PUSH
6452: LD_INT 5
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: PUSH
6463: NOP4
6467: ARRAY
6468: PPUSH
6469: NOP4
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
6473: NOP4
6477: PUSH
6478: NOP4
6482: PUSH
6483: NOP4
6487: ADD
6488: ST_TO_ADDR
// end ;
6489: GO 6435
6491: POP
6492: POP
// for i = 1 to 3 do
6493: NOP4
6497: PUSH
6498: DOUBLE
6499: LD_INT 1
6501: DEC
6502: ST_TO_ADDR
6503: LD_INT 3
6505: PUSH
6506: FOR_TO
6507: IFFALSE 6562
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6509: LD_INT 0
6511: PPUSH
6512: LD_INT 1
6514: PPUSH
6515: NOP4
6519: PPUSH
6520: LD_INT 7
6522: PUSH
6523: LD_INT 5
6525: PUSH
6526: LD_INT 3
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: LIST
6533: PUSH
6534: NOP4
6538: ARRAY
6539: PPUSH
6540: NOP4
// NorthLeninCrew := NorthLeninCrew ^ CreateHuman ;
6544: NOP4
6548: PUSH
6549: NOP4
6553: PUSH
6554: NOP4
6558: ADD
6559: ST_TO_ADDR
// end ;
6560: GO 6506
6562: POP
6563: POP
// turrety := FilterUnitsInArea ( NorthLeninArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
6564: NOP4
6568: PUSH
6569: LD_INT 5
6571: PPUSH
6572: LD_INT 2
6574: PUSH
6575: LD_INT 30
6577: PUSH
6578: LD_INT 31
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PUSH
6585: LD_INT 30
6587: PUSH
6588: LD_INT 32
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: LIST
6599: PPUSH
6600: NOP4
6604: ST_TO_ADDR
// lab := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_lab_full ] ] ) ;
6605: NOP4
6609: PUSH
6610: LD_INT 5
6612: PPUSH
6613: LD_INT 30
6615: PUSH
6616: LD_INT 8
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PUSH
6623: EMPTY
6624: LIST
6625: PPUSH
6626: NOP4
6630: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_factory ] ] ) ;
6631: NOP4
6635: PUSH
6636: LD_INT 5
6638: PPUSH
6639: LD_INT 30
6641: PUSH
6642: LD_INT 3
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: PPUSH
6652: NOP4
6656: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( NorthLeninArea , [ [ f_btype , b_barracks ] ] ) ;
6657: NOP4
6661: PUSH
6662: LD_INT 5
6664: PPUSH
6665: LD_INT 30
6667: PUSH
6668: LD_INT 5
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: PUSH
6675: EMPTY
6676: LIST
6677: PPUSH
6678: NOP4
6682: ST_TO_ADDR
// y := 1 ;
6683: NOP4
6687: PUSH
6688: LD_INT 1
6690: ST_TO_ADDR
// z := 1 ;
6691: NOP4
6695: PUSH
6696: LD_INT 1
6698: ST_TO_ADDR
// for i in NorthLeninCrew do
6699: NOP4
6703: PUSH
6704: NOP4
6708: PUSH
6709: FOR_IN
6710: IFFALSE 6881
// begin case GetClass ( i ) of 1 :
6712: NOP4
6716: PPUSH
6717: NOP4
6721: PUSH
6722: LD_INT 1
6724: DOUBLE
6725: EQUAL
6726: IFTRUE 6730
6728: GO 6797
6730: POP
// begin if y > 6 then
6731: NOP4
6735: PUSH
6736: LD_INT 6
6738: GREATER
6739: IFFALSE 6761
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
6741: NOP4
6745: PPUSH
6746: NOP4
6750: PUSH
6751: LD_INT 1
6753: ARRAY
6754: PPUSH
6755: NOP4
6759: GO 6781
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
6761: NOP4
6765: PPUSH
6766: NOP4
6770: PUSH
6771: NOP4
6775: ARRAY
6776: PPUSH
6777: NOP4
// y = y + 1 ;
6781: NOP4
6785: PUSH
6786: NOP4
6790: PUSH
6791: LD_INT 1
6793: PLUS
6794: ST_TO_ADDR
// end ; 2 :
6795: GO 6879
6797: LD_INT 2
6799: DOUBLE
6800: EQUAL
6801: IFTRUE 6805
6803: GO 6820
6805: POP
// PlaceHumanInUnit ( i , NorthLenin ) ; 3 :
6806: NOP4
6810: PPUSH
6811: LD_INT 253
6813: PPUSH
6814: NOP4
6818: GO 6879
6820: LD_INT 3
6822: DOUBLE
6823: EQUAL
6824: IFTRUE 6828
6826: GO 6849
6828: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
6829: NOP4
6833: PPUSH
6834: NOP4
6838: PUSH
6839: LD_INT 1
6841: ARRAY
6842: PPUSH
6843: NOP4
6847: GO 6879
6849: LD_INT 4
6851: DOUBLE
6852: EQUAL
6853: IFTRUE 6857
6855: GO 6878
6857: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
6858: NOP4
6862: PPUSH
6863: NOP4
6867: PUSH
6868: LD_INT 1
6870: ARRAY
6871: PPUSH
6872: NOP4
6876: GO 6879
6878: POP
// end ;
6879: GO 6709
6881: POP
6882: POP
// SouthLeninCrew := [ ] ;
6883: NOP4
6887: PUSH
6888: EMPTY
6889: ST_TO_ADDR
// for i = 1 to 6 do
6890: NOP4
6894: PUSH
6895: DOUBLE
6896: LD_INT 1
6898: DEC
6899: ST_TO_ADDR
6900: LD_INT 6
6902: PUSH
6903: FOR_TO
6904: IFFALSE 6959
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6906: LD_INT 0
6908: PPUSH
6909: LD_INT 1
6911: PPUSH
6912: NOP4
6916: PPUSH
6917: LD_INT 7
6919: PUSH
6920: LD_INT 5
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: LIST
6930: PUSH
6931: NOP4
6935: ARRAY
6936: PPUSH
6937: NOP4
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
6941: NOP4
6945: PUSH
6946: NOP4
6950: PUSH
6951: NOP4
6955: ADD
6956: ST_TO_ADDR
// end ;
6957: GO 6903
6959: POP
6960: POP
// for i = 1 to 1 do
6961: NOP4
6965: PUSH
6966: DOUBLE
6967: LD_INT 1
6969: DEC
6970: ST_TO_ADDR
6971: LD_INT 1
6973: PUSH
6974: FOR_TO
6975: IFFALSE 7030
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
6977: LD_INT 0
6979: PPUSH
6980: LD_INT 1
6982: PPUSH
6983: NOP4
6987: PPUSH
6988: LD_INT 7
6990: PUSH
6991: LD_INT 5
6993: PUSH
6994: LD_INT 3
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: LIST
7001: PUSH
7002: NOP4
7006: ARRAY
7007: PPUSH
7008: NOP4
// SouthLeninEngineers := SouthLeninEngineers ^ CreateHuman ;
7012: NOP4
7016: PUSH
7017: NOP4
7021: PUSH
7022: NOP4
7026: ADD
7027: ST_TO_ADDR
// end ;
7028: GO 6974
7030: POP
7031: POP
// SouthLeninCrew := SouthLeninCrew ^ SouthLeninEngineers ;
7032: NOP4
7036: PUSH
7037: NOP4
7041: PUSH
7042: NOP4
7046: ADD
7047: ST_TO_ADDR
// for i = 1 to 1 do
7048: NOP4
7052: PUSH
7053: DOUBLE
7054: LD_INT 1
7056: DEC
7057: ST_TO_ADDR
7058: LD_INT 1
7060: PUSH
7061: FOR_TO
7062: IFFALSE 7117
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7064: LD_INT 0
7066: PPUSH
7067: LD_INT 1
7069: PPUSH
7070: NOP4
7074: PPUSH
7075: LD_INT 7
7077: PUSH
7078: LD_INT 5
7080: PUSH
7081: LD_INT 3
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: PUSH
7089: NOP4
7093: ARRAY
7094: PPUSH
7095: NOP4
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
7099: NOP4
7103: PUSH
7104: NOP4
7108: PUSH
7109: NOP4
7113: ADD
7114: ST_TO_ADDR
// end ;
7115: GO 7061
7117: POP
7118: POP
// for i = 1 to 1 do
7119: NOP4
7123: PUSH
7124: DOUBLE
7125: LD_INT 1
7127: DEC
7128: ST_TO_ADDR
7129: LD_INT 1
7131: PUSH
7132: FOR_TO
7133: IFFALSE 7188
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7135: LD_INT 0
7137: PPUSH
7138: LD_INT 1
7140: PPUSH
7141: NOP4
7145: PPUSH
7146: LD_INT 7
7148: PUSH
7149: LD_INT 5
7151: PUSH
7152: LD_INT 3
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: LIST
7159: PUSH
7160: NOP4
7164: ARRAY
7165: PPUSH
7166: NOP4
// SouthLeninCrew := SouthLeninCrew ^ CreateHuman ;
7170: NOP4
7174: PUSH
7175: NOP4
7179: PUSH
7180: NOP4
7184: ADD
7185: ST_TO_ADDR
// end ;
7186: GO 7132
7188: POP
7189: POP
// turrety := FilterUnitsInArea ( SouthLeninArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
7190: NOP4
7194: PUSH
7195: LD_INT 4
7197: PPUSH
7198: LD_INT 2
7200: PUSH
7201: LD_INT 30
7203: PUSH
7204: LD_INT 31
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 30
7213: PUSH
7214: LD_INT 32
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: PPUSH
7226: NOP4
7230: ST_TO_ADDR
// lab := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_lab_full ] ] ) ;
7231: NOP4
7235: PUSH
7236: LD_INT 4
7238: PPUSH
7239: LD_INT 30
7241: PUSH
7242: LD_INT 8
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: EMPTY
7250: LIST
7251: PPUSH
7252: NOP4
7256: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_factory ] ] ) ;
7257: NOP4
7261: PUSH
7262: LD_INT 4
7264: PPUSH
7265: LD_INT 30
7267: PUSH
7268: LD_INT 3
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PUSH
7275: EMPTY
7276: LIST
7277: PPUSH
7278: NOP4
7282: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( SouthLeninArea , [ [ f_btype , b_barracks ] ] ) ;
7283: NOP4
7287: PUSH
7288: LD_INT 4
7290: PPUSH
7291: LD_INT 30
7293: PUSH
7294: LD_INT 5
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: EMPTY
7302: LIST
7303: PPUSH
7304: NOP4
7308: ST_TO_ADDR
// y := 1 ;
7309: NOP4
7313: PUSH
7314: LD_INT 1
7316: ST_TO_ADDR
// z := 1 ;
7317: NOP4
7321: PUSH
7322: LD_INT 1
7324: ST_TO_ADDR
// for i in SouthLeninCrew do
7325: NOP4
7329: PUSH
7330: NOP4
7334: PUSH
7335: FOR_IN
7336: IFFALSE 7507
// begin case GetClass ( i ) of 1 :
7338: NOP4
7342: PPUSH
7343: NOP4
7347: PUSH
7348: LD_INT 1
7350: DOUBLE
7351: EQUAL
7352: IFTRUE 7356
7354: GO 7423
7356: POP
// begin if y > 6 then
7357: NOP4
7361: PUSH
7362: LD_INT 6
7364: GREATER
7365: IFFALSE 7387
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
7367: NOP4
7371: PPUSH
7372: NOP4
7376: PUSH
7377: LD_INT 1
7379: ARRAY
7380: PPUSH
7381: NOP4
7385: GO 7407
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
7387: NOP4
7391: PPUSH
7392: NOP4
7396: PUSH
7397: NOP4
7401: ARRAY
7402: PPUSH
7403: NOP4
// y = y + 1 ;
7407: NOP4
7411: PUSH
7412: NOP4
7416: PUSH
7417: LD_INT 1
7419: PLUS
7420: ST_TO_ADDR
// end ; 2 :
7421: GO 7505
7423: LD_INT 2
7425: DOUBLE
7426: EQUAL
7427: IFTRUE 7431
7429: GO 7446
7431: POP
// PlaceHumanInUnit ( i , SouthLenin ) ; 3 :
7432: NOP4
7436: PPUSH
7437: LD_INT 218
7439: PPUSH
7440: NOP4
7444: GO 7505
7446: LD_INT 3
7448: DOUBLE
7449: EQUAL
7450: IFTRUE 7454
7452: GO 7475
7454: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
7455: NOP4
7459: PPUSH
7460: NOP4
7464: PUSH
7465: LD_INT 1
7467: ARRAY
7468: PPUSH
7469: NOP4
7473: GO 7505
7475: LD_INT 4
7477: DOUBLE
7478: EQUAL
7479: IFTRUE 7483
7481: GO 7504
7483: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
7484: NOP4
7488: PPUSH
7489: NOP4
7493: PUSH
7494: LD_INT 1
7496: ARRAY
7497: PPUSH
7498: NOP4
7502: GO 7505
7504: POP
// end ;
7505: GO 7335
7507: POP
7508: POP
// BukovCrew := [ ] ;
7509: NOP4
7513: PUSH
7514: EMPTY
7515: ST_TO_ADDR
// for i = 1 to 6 do
7516: NOP4
7520: PUSH
7521: DOUBLE
7522: LD_INT 1
7524: DEC
7525: ST_TO_ADDR
7526: LD_INT 6
7528: PUSH
7529: FOR_TO
7530: IFFALSE 7585
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7532: LD_INT 0
7534: PPUSH
7535: LD_INT 1
7537: PPUSH
7538: NOP4
7542: PPUSH
7543: LD_INT 7
7545: PUSH
7546: LD_INT 5
7548: PUSH
7549: LD_INT 3
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: PUSH
7557: NOP4
7561: ARRAY
7562: PPUSH
7563: NOP4
// BukovCrew := BukovCrew ^ CreateHuman ;
7567: NOP4
7571: PUSH
7572: NOP4
7576: PUSH
7577: NOP4
7581: ADD
7582: ST_TO_ADDR
// end ;
7583: GO 7529
7585: POP
7586: POP
// for i = 1 to 2 do
7587: NOP4
7591: PUSH
7592: DOUBLE
7593: LD_INT 1
7595: DEC
7596: ST_TO_ADDR
7597: LD_INT 2
7599: PUSH
7600: FOR_TO
7601: IFFALSE 7656
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7603: LD_INT 0
7605: PPUSH
7606: LD_INT 1
7608: PPUSH
7609: NOP4
7613: PPUSH
7614: LD_INT 7
7616: PUSH
7617: LD_INT 5
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: PUSH
7628: NOP4
7632: ARRAY
7633: PPUSH
7634: NOP4
// BukovCrew := BukovCrew ^ CreateHuman ;
7638: NOP4
7642: PUSH
7643: NOP4
7647: PUSH
7648: NOP4
7652: ADD
7653: ST_TO_ADDR
// end ;
7654: GO 7600
7656: POP
7657: POP
// for i = 1 to 2 do
7658: NOP4
7662: PUSH
7663: DOUBLE
7664: LD_INT 1
7666: DEC
7667: ST_TO_ADDR
7668: LD_INT 2
7670: PUSH
7671: FOR_TO
7672: IFFALSE 7727
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
7674: LD_INT 0
7676: PPUSH
7677: LD_INT 1
7679: PPUSH
7680: NOP4
7684: PPUSH
7685: LD_INT 7
7687: PUSH
7688: LD_INT 5
7690: PUSH
7691: LD_INT 3
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: PUSH
7699: NOP4
7703: ARRAY
7704: PPUSH
7705: NOP4
// BukovCrew := BukovCrew ^ CreateHuman ;
7709: NOP4
7713: PUSH
7714: NOP4
7718: PUSH
7719: NOP4
7723: ADD
7724: ST_TO_ADDR
// end ;
7725: GO 7671
7727: POP
7728: POP
// turrety := FilterUnitsInArea ( BukovBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
7729: NOP4
7733: PUSH
7734: LD_INT 7
7736: PPUSH
7737: LD_INT 2
7739: PUSH
7740: LD_INT 30
7742: PUSH
7743: LD_INT 31
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: LD_INT 30
7752: PUSH
7753: LD_INT 32
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: LIST
7764: PPUSH
7765: NOP4
7769: ST_TO_ADDR
// lab := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_lab_half ] ] ) ;
7770: NOP4
7774: PUSH
7775: LD_INT 7
7777: PPUSH
7778: LD_INT 30
7780: PUSH
7781: LD_INT 7
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PUSH
7788: EMPTY
7789: LIST
7790: PPUSH
7791: NOP4
7795: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_factory ] ] ) ;
7796: NOP4
7800: PUSH
7801: LD_INT 7
7803: PPUSH
7804: LD_INT 30
7806: PUSH
7807: LD_INT 3
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: EMPTY
7815: LIST
7816: PPUSH
7817: NOP4
7821: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( BukovBaseArea , [ [ f_btype , b_armoury ] ] ) ;
7822: NOP4
7826: PUSH
7827: LD_INT 7
7829: PPUSH
7830: LD_INT 30
7832: PUSH
7833: LD_INT 4
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: EMPTY
7841: LIST
7842: PPUSH
7843: NOP4
7847: ST_TO_ADDR
// y := 1 ;
7848: NOP4
7852: PUSH
7853: LD_INT 1
7855: ST_TO_ADDR
// z := 1 ;
7856: NOP4
7860: PUSH
7861: LD_INT 1
7863: ST_TO_ADDR
// for i in BukovCrew do
7864: NOP4
7868: PUSH
7869: NOP4
7873: PUSH
7874: FOR_IN
7875: IFFALSE 8023
// begin case GetClass ( i ) of 1 :
7877: NOP4
7881: PPUSH
7882: NOP4
7886: PUSH
7887: LD_INT 1
7889: DOUBLE
7890: EQUAL
7891: IFTRUE 7895
7893: GO 7962
7895: POP
// begin if y > 4 then
7896: NOP4
7900: PUSH
7901: LD_INT 4
7903: GREATER
7904: IFFALSE 7926
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
7906: NOP4
7910: PPUSH
7911: NOP4
7915: PUSH
7916: LD_INT 1
7918: ARRAY
7919: PPUSH
7920: NOP4
7924: GO 7946
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
7926: NOP4
7930: PPUSH
7931: NOP4
7935: PUSH
7936: NOP4
7940: ARRAY
7941: PPUSH
7942: NOP4
// y = y + 1 ;
7946: NOP4
7950: PUSH
7951: NOP4
7955: PUSH
7956: LD_INT 1
7958: PLUS
7959: ST_TO_ADDR
// end ; 3 :
7960: GO 8021
7962: LD_INT 3
7964: DOUBLE
7965: EQUAL
7966: IFTRUE 7970
7968: GO 7991
7970: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
7971: NOP4
7975: PPUSH
7976: NOP4
7980: PUSH
7981: LD_INT 1
7983: ARRAY
7984: PPUSH
7985: NOP4
7989: GO 8021
7991: LD_INT 4
7993: DOUBLE
7994: EQUAL
7995: IFTRUE 7999
7997: GO 8020
7999: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
8000: NOP4
8004: PPUSH
8005: NOP4
8009: PUSH
8010: LD_INT 1
8012: ARRAY
8013: PPUSH
8014: NOP4
8018: GO 8021
8020: POP
// end ;
8021: GO 7874
8023: POP
8024: POP
// CheckpointsCrew := [ ] ;
8025: NOP4
8029: PUSH
8030: EMPTY
8031: ST_TO_ADDR
// for i = 1 to 6 do
8032: NOP4
8036: PUSH
8037: DOUBLE
8038: LD_INT 1
8040: DEC
8041: ST_TO_ADDR
8042: LD_INT 6
8044: PUSH
8045: FOR_TO
8046: IFFALSE 8101
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8048: LD_INT 0
8050: PPUSH
8051: LD_INT 1
8053: PPUSH
8054: NOP4
8058: PPUSH
8059: LD_INT 7
8061: PUSH
8062: LD_INT 5
8064: PUSH
8065: LD_INT 3
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: PUSH
8073: NOP4
8077: ARRAY
8078: PPUSH
8079: NOP4
// CheckpointsCrew := CheckpointsCrew ^ CreateHuman ;
8083: NOP4
8087: PUSH
8088: NOP4
8092: PUSH
8093: NOP4
8097: ADD
8098: ST_TO_ADDR
// end ;
8099: GO 8045
8101: POP
8102: POP
// turrety := FilterUnitsInArea ( Checkpoints , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
8103: NOP4
8107: PUSH
8108: LD_INT 6
8110: PPUSH
8111: LD_INT 2
8113: PUSH
8114: LD_INT 30
8116: PUSH
8117: LD_INT 31
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: LD_INT 30
8126: PUSH
8127: LD_INT 32
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: PPUSH
8139: NOP4
8143: ST_TO_ADDR
// y := 1 ;
8144: NOP4
8148: PUSH
8149: LD_INT 1
8151: ST_TO_ADDR
// for i in CheckpointsCrew do
8152: NOP4
8156: PUSH
8157: NOP4
8161: PUSH
8162: FOR_IN
8163: IFFALSE 8223
// begin case GetClass ( i ) of 1 :
8165: NOP4
8169: PPUSH
8170: NOP4
8174: PUSH
8175: LD_INT 1
8177: DOUBLE
8178: EQUAL
8179: IFTRUE 8183
8181: GO 8220
8183: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
8184: NOP4
8188: PPUSH
8189: NOP4
8193: PUSH
8194: NOP4
8198: ARRAY
8199: PPUSH
8200: NOP4
// y = y + 1 ;
8204: NOP4
8208: PUSH
8209: NOP4
8213: PUSH
8214: LD_INT 1
8216: PLUS
8217: ST_TO_ADDR
// end ; end ;
8218: GO 8221
8220: POP
// end ;
8221: GO 8162
8223: POP
8224: POP
// GaydarCrew := [ ] ;
8225: NOP4
8229: PUSH
8230: EMPTY
8231: ST_TO_ADDR
// for i = 1 to 6 do
8232: NOP4
8236: PUSH
8237: DOUBLE
8238: LD_INT 1
8240: DEC
8241: ST_TO_ADDR
8242: LD_INT 6
8244: PUSH
8245: FOR_TO
8246: IFFALSE 8301
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8248: LD_INT 0
8250: PPUSH
8251: LD_INT 1
8253: PPUSH
8254: NOP4
8258: PPUSH
8259: LD_INT 7
8261: PUSH
8262: LD_INT 5
8264: PUSH
8265: LD_INT 3
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: LIST
8272: PUSH
8273: NOP4
8277: ARRAY
8278: PPUSH
8279: NOP4
// GaydarCrew := GaydarCrew ^ CreateHuman ;
8283: NOP4
8287: PUSH
8288: NOP4
8292: PUSH
8293: NOP4
8297: ADD
8298: ST_TO_ADDR
// end ;
8299: GO 8245
8301: POP
8302: POP
// for i = 1 to 2 do
8303: NOP4
8307: PUSH
8308: DOUBLE
8309: LD_INT 1
8311: DEC
8312: ST_TO_ADDR
8313: LD_INT 2
8315: PUSH
8316: FOR_TO
8317: IFFALSE 8372
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8319: LD_INT 0
8321: PPUSH
8322: LD_INT 1
8324: PPUSH
8325: NOP4
8329: PPUSH
8330: LD_INT 7
8332: PUSH
8333: LD_INT 5
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: LIST
8343: PUSH
8344: NOP4
8348: ARRAY
8349: PPUSH
8350: NOP4
// GaydarCrew := GaydarCrew ^ CreateHuman ;
8354: NOP4
8358: PUSH
8359: NOP4
8363: PUSH
8364: NOP4
8368: ADD
8369: ST_TO_ADDR
// end ;
8370: GO 8316
8372: POP
8373: POP
// turrety := FilterUnitsInArea ( MiddleCheckPoint , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
8374: NOP4
8378: PUSH
8379: LD_INT 1
8381: PPUSH
8382: LD_INT 2
8384: PUSH
8385: LD_INT 30
8387: PUSH
8388: LD_INT 31
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 30
8397: PUSH
8398: LD_INT 32
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: LIST
8409: PPUSH
8410: NOP4
8414: ST_TO_ADDR
// y := 1 ;
8415: NOP4
8419: PUSH
8420: LD_INT 1
8422: ST_TO_ADDR
// for i in GaydarCrew do
8423: NOP4
8427: PUSH
8428: NOP4
8432: PUSH
8433: FOR_IN
8434: IFFALSE 8517
// begin case GetClass ( i ) of 1 :
8436: NOP4
8440: PPUSH
8441: NOP4
8445: PUSH
8446: LD_INT 1
8448: DOUBLE
8449: EQUAL
8450: IFTRUE 8454
8452: GO 8491
8454: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
8455: NOP4
8459: PPUSH
8460: NOP4
8464: PUSH
8465: NOP4
8469: ARRAY
8470: PPUSH
8471: NOP4
// y = y + 1 ;
8475: NOP4
8479: PUSH
8480: NOP4
8484: PUSH
8485: LD_INT 1
8487: PLUS
8488: ST_TO_ADDR
// end ; 2 :
8489: GO 8515
8491: LD_INT 2
8493: DOUBLE
8494: EQUAL
8495: IFTRUE 8499
8497: GO 8514
8499: POP
// PlaceHumanInUnit ( i , GaydarDepot ) ; end ;
8500: NOP4
8504: PPUSH
8505: LD_INT 144
8507: PPUSH
8508: NOP4
8512: GO 8515
8514: POP
// end ;
8515: GO 8433
8517: POP
8518: POP
// SouthCheckpointCrew := [ ] ;
8519: NOP4
8523: PUSH
8524: EMPTY
8525: ST_TO_ADDR
// for i = 1 to 4 do
8526: NOP4
8530: PUSH
8531: DOUBLE
8532: LD_INT 1
8534: DEC
8535: ST_TO_ADDR
8536: LD_INT 4
8538: PUSH
8539: FOR_TO
8540: IFFALSE 8595
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8542: LD_INT 0
8544: PPUSH
8545: LD_INT 1
8547: PPUSH
8548: NOP4
8552: PPUSH
8553: LD_INT 7
8555: PUSH
8556: LD_INT 5
8558: PUSH
8559: LD_INT 3
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: LIST
8566: PUSH
8567: NOP4
8571: ARRAY
8572: PPUSH
8573: NOP4
// SouthCheckpointCrew := SouthCheckpointCrew ^ CreateHuman ;
8577: NOP4
8581: PUSH
8582: NOP4
8586: PUSH
8587: NOP4
8591: ADD
8592: ST_TO_ADDR
// end ;
8593: GO 8539
8595: POP
8596: POP
// for i = 1 to 2 do
8597: NOP4
8601: PUSH
8602: DOUBLE
8603: LD_INT 1
8605: DEC
8606: ST_TO_ADDR
8607: LD_INT 2
8609: PUSH
8610: FOR_TO
8611: IFFALSE 8666
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 7 , 5 , 3 ] [ Difficulty ] ) ;
8613: LD_INT 0
8615: PPUSH
8616: LD_INT 1
8618: PPUSH
8619: NOP4
8623: PPUSH
8624: LD_INT 7
8626: PUSH
8627: LD_INT 5
8629: PUSH
8630: LD_INT 3
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: LIST
8637: PUSH
8638: NOP4
8642: ARRAY
8643: PPUSH
8644: NOP4
// SouthCheckpointCrew := SouthCheckpointCrew ^ CreateHuman ;
8648: NOP4
8652: PUSH
8653: NOP4
8657: PUSH
8658: NOP4
8662: ADD
8663: ST_TO_ADDR
// end ;
8664: GO 8610
8666: POP
8667: POP
// turrety := FilterUnitsInArea ( SouthCheckpoint , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
8668: NOP4
8672: PUSH
8673: LD_INT 2
8675: PPUSH
8676: LD_INT 2
8678: PUSH
8679: LD_INT 30
8681: PUSH
8682: LD_INT 31
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: PUSH
8689: LD_INT 30
8691: PUSH
8692: LD_INT 32
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: LIST
8703: PPUSH
8704: NOP4
8708: ST_TO_ADDR
// y := 1 ;
8709: NOP4
8713: PUSH
8714: LD_INT 1
8716: ST_TO_ADDR
// for i in SouthCheckpointCrew do
8717: NOP4
8721: PUSH
8722: NOP4
8726: PUSH
8727: FOR_IN
8728: IFFALSE 8811
// begin case GetClass ( i ) of 1 :
8730: NOP4
8734: PPUSH
8735: NOP4
8739: PUSH
8740: LD_INT 1
8742: DOUBLE
8743: EQUAL
8744: IFTRUE 8748
8746: GO 8785
8748: POP
// begin PlaceHumanInUnit ( i , turrety [ y ] ) ;
8749: NOP4
8753: PPUSH
8754: NOP4
8758: PUSH
8759: NOP4
8763: ARRAY
8764: PPUSH
8765: NOP4
// y = y + 1 ;
8769: NOP4
8773: PUSH
8774: NOP4
8778: PUSH
8779: LD_INT 1
8781: PLUS
8782: ST_TO_ADDR
// end ; 2 :
8783: GO 8809
8785: LD_INT 2
8787: DOUBLE
8788: EQUAL
8789: IFTRUE 8793
8791: GO 8808
8793: POP
// PlaceHumanInUnit ( i , SouthDepot ) ; end ;
8794: NOP4
8798: PPUSH
8799: LD_INT 193
8801: PPUSH
8802: NOP4
8806: GO 8809
8808: POP
// end ;
8809: GO 8727
8811: POP
8812: POP
// end ; end_of_file
8813: LD_VAR 0 1
8817: RET
// every 0 0$1 trigger IsDead ( YakotichBase ) or IsDead ( NorthLenin ) or IsDead ( SouthLenin ) do
8818: LD_INT 312
8820: PPUSH
8821: NOP4
8825: PUSH
8826: LD_INT 253
8828: PPUSH
8829: NOP4
8833: OR
8834: PUSH
8835: LD_INT 218
8837: PPUSH
8838: NOP4
8842: OR
8843: IFFALSE 8855
8845: GO 8847
8847: DISABLE
// begin YouLost ( DepotDead ) ;
8848: LD_STRING DepotDead
8850: PPUSH
8851: NOP4
// end ;
8855: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 3 and s2 = 6 ) or ( s2 = 6 and s1 = 3 ) or ( s2 = 4 and s1 = 3 ) or ( s2 = 3 and s1 = 4 ) then
8856: NOP4
8860: PUSH
8861: LD_INT 3
8863: EQUAL
8864: PUSH
8865: NOP4
8869: PUSH
8870: LD_INT 6
8872: EQUAL
8873: AND
8874: PUSH
8875: NOP4
8879: PUSH
8880: LD_INT 6
8882: EQUAL
8883: PUSH
8884: NOP4
8888: PUSH
8889: LD_INT 3
8891: EQUAL
8892: AND
8893: OR
8894: PUSH
8895: NOP4
8899: PUSH
8900: LD_INT 4
8902: EQUAL
8903: PUSH
8904: NOP4
8908: PUSH
8909: LD_INT 3
8911: EQUAL
8912: AND
8913: OR
8914: PUSH
8915: NOP4
8919: PUSH
8920: LD_INT 3
8922: EQUAL
8923: PUSH
8924: NOP4
8928: PUSH
8929: LD_INT 4
8931: EQUAL
8932: AND
8933: OR
8934: IFFALSE 8943
// begin YouLost ( AllyAttacked ) ;
8936: LD_STRING AllyAttacked
8938: PPUSH
8939: NOP4
// end ; end ;
8943: PPOPN 2
8945: END
// on BuildingCaptured ( cb , bfs , cu ) do begin if GetSide ( cb ) = 6 and GetSide ( cu ) = 3 then
8946: NOP4
8950: PPUSH
8951: NOP4
8955: PUSH
8956: LD_INT 6
8958: EQUAL
8959: PUSH
8960: NOP4
8964: PPUSH
8965: NOP4
8969: PUSH
8970: LD_INT 3
8972: EQUAL
8973: AND
8974: IFFALSE 8983
// begin YouLost ( AllyAttacked ) ;
8976: LD_STRING AllyAttacked
8978: PPUSH
8979: NOP4
// end ; end ;
8983: PPOPN 3
8985: END
// export ru_bul , ru2_bul ; on UnitDestroyed ( un ) do begin if un = Yakotich then
8986: NOP4
8990: PUSH
8991: NOP4
8995: EQUAL
8996: IFFALSE 9005
// YouLost ( YakotichDead ) ;
8998: LD_STRING YakotichDead
9000: PPUSH
9001: NOP4
// if un = Mietek then
9005: NOP4
9009: PUSH
9010: NOP4
9014: EQUAL
9015: IFFALSE 9024
// YouLost ( MietekDead ) ;
9017: LD_STRING MietekDead
9019: PPUSH
9020: NOP4
// if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
9024: NOP4
9028: PUSH
9029: LD_INT 22
9031: PUSH
9032: LD_INT 3
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: PUSH
9039: LD_INT 3
9041: PUSH
9042: LD_INT 23
9044: PUSH
9045: LD_INT 0
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: LD_INT 21
9058: PUSH
9059: LD_INT 1
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: LIST
9070: PPUSH
9071: NOP4
9075: IN
9076: IFFALSE 9085
// YouLost ( PeopleDead ) ;
9078: LD_STRING PeopleDead
9080: PPUSH
9081: NOP4
// end ;
9085: PPOPN 1
9087: END
// on BuildingStarted ( b , builder ) do var x , y ;
9088: LD_INT 0
9090: PPUSH
9091: PPUSH
// begin if GetBType ( b ) = b_bunker or GetBType ( b ) = b_breastwork and GetSide ( b ) = 4 then
9092: NOP4
9096: PPUSH
9097: NOP4
9101: PUSH
9102: LD_INT 32
9104: EQUAL
9105: PUSH
9106: NOP4
9110: PPUSH
9111: NOP4
9115: PUSH
9116: LD_INT 31
9118: EQUAL
9119: PUSH
9120: NOP4
9124: PPUSH
9125: NOP4
9129: PUSH
9130: LD_INT 4
9132: EQUAL
9133: AND
9134: OR
9135: IFFALSE 9224
// begin x = GetX ( b ) ;
9137: NOP4
9141: PUSH
9142: NOP4
9146: PPUSH
9147: NOP4
9151: ST_TO_ADDR
// y = GetY ( b ) ;
9152: NOP4
9156: PUSH
9157: NOP4
9161: PPUSH
9162: NOP4
9166: ST_TO_ADDR
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) , x , y ) ;
9167: LD_INT 22
9169: PUSH
9170: LD_INT 4
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 25
9179: PUSH
9180: LD_INT 1
9182: PUSH
9183: EMPTY
9184: LIST
9185: LIST
9186: PUSH
9187: LD_INT 3
9189: PUSH
9190: LD_INT 54
9192: PUSH
9193: EMPTY
9194: LIST
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: LIST
9204: PPUSH
9205: NOP4
9209: PPUSH
9210: NOP4
9214: PPUSH
9215: NOP4
9219: PPUSH
9220: NOP4
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 4 then
9224: NOP4
9228: PPUSH
9229: NOP4
9233: PUSH
9234: LD_INT 6
9236: EQUAL
9237: PUSH
9238: NOP4
9242: PPUSH
9243: NOP4
9247: PUSH
9248: LD_INT 4
9250: EQUAL
9251: AND
9252: IFFALSE 9341
// begin x = GetX ( b ) ;
9254: NOP4
9258: PUSH
9259: NOP4
9263: PPUSH
9264: NOP4
9268: ST_TO_ADDR
// y = GetY ( b ) ;
9269: NOP4
9273: PUSH
9274: NOP4
9278: PPUSH
9279: NOP4
9283: ST_TO_ADDR
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) , x , y ) ;
9284: LD_INT 22
9286: PUSH
9287: LD_INT 4
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 25
9296: PUSH
9297: LD_INT 4
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 3
9306: PUSH
9307: LD_INT 54
9309: PUSH
9310: EMPTY
9311: LIST
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: PPUSH
9322: NOP4
9326: PPUSH
9327: NOP4
9331: PPUSH
9332: NOP4
9336: PPUSH
9337: NOP4
// end ; if GetBType ( b ) = b_workshop and GetSide ( b ) = 4 then
9341: NOP4
9345: PPUSH
9346: NOP4
9350: PUSH
9351: LD_INT 2
9353: EQUAL
9354: PUSH
9355: NOP4
9359: PPUSH
9360: NOP4
9364: PUSH
9365: LD_INT 4
9367: EQUAL
9368: AND
9369: IFFALSE 9458
// begin x = GetX ( b ) ;
9371: NOP4
9375: PUSH
9376: NOP4
9380: PPUSH
9381: NOP4
9385: ST_TO_ADDR
// y = GetY ( b ) ;
9386: NOP4
9390: PUSH
9391: NOP4
9395: PPUSH
9396: NOP4
9400: ST_TO_ADDR
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 3 ] , [ f_not , [ f_inside ] ] ] ) , x , y ) ;
9401: LD_INT 22
9403: PUSH
9404: LD_INT 4
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 25
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PUSH
9421: LD_INT 3
9423: PUSH
9424: LD_INT 54
9426: PUSH
9427: EMPTY
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: LIST
9438: PPUSH
9439: NOP4
9443: PPUSH
9444: NOP4
9448: PPUSH
9449: NOP4
9453: PPUSH
9454: NOP4
// end ; end ;
9458: PPOPN 4
9460: END
// export BierezovDepot , BierezovArmoury ; on BuildingComplete ( b ) do var i ;
9461: LD_INT 0
9463: PPUSH
// begin if GetBType ( b ) = b_bunker and GetSide ( b ) = 6 and IsInArea ( b , NorthLeninArea ) then
9464: NOP4
9468: PPUSH
9469: NOP4
9473: PUSH
9474: LD_INT 32
9476: EQUAL
9477: PUSH
9478: NOP4
9482: PPUSH
9483: NOP4
9487: PUSH
9488: LD_INT 6
9490: EQUAL
9491: AND
9492: PUSH
9493: NOP4
9497: PPUSH
9498: LD_INT 5
9500: PPUSH
9501: NOP4
9505: AND
9506: IFFALSE 9528
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
9508: NOP4
9512: PPUSH
9513: LD_INT 43
9515: PPUSH
9516: LD_INT 46
9518: PPUSH
9519: NOP4
9523: PPUSH
9524: NOP4
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9528: NOP4
9532: PPUSH
9533: NOP4
9537: PUSH
9538: LD_INT 32
9540: EQUAL
9541: PUSH
9542: NOP4
9546: PPUSH
9547: NOP4
9551: PUSH
9552: LD_INT 4
9554: EQUAL
9555: AND
9556: PUSH
9557: NOP4
9561: PPUSH
9562: LD_INT 27
9564: PPUSH
9565: NOP4
9569: AND
9570: IFFALSE 9592
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
9572: NOP4
9576: PPUSH
9577: LD_INT 43
9579: PPUSH
9580: LD_INT 46
9582: PPUSH
9583: NOP4
9587: PPUSH
9588: NOP4
// end ; if GetBType ( b ) = b_bunker or GetBType ( b ) = b_breastwork and GetSide ( b ) = 4 then
9592: NOP4
9596: PPUSH
9597: NOP4
9601: PUSH
9602: LD_INT 32
9604: EQUAL
9605: PUSH
9606: NOP4
9610: PPUSH
9611: NOP4
9615: PUSH
9616: LD_INT 31
9618: EQUAL
9619: PUSH
9620: NOP4
9624: PPUSH
9625: NOP4
9629: PUSH
9630: LD_INT 4
9632: EQUAL
9633: AND
9634: OR
9635: IFFALSE 9695
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff Bierezov , b ) ;
9637: LD_INT 22
9639: PUSH
9640: LD_INT 4
9642: PUSH
9643: EMPTY
9644: LIST
9645: LIST
9646: PUSH
9647: LD_INT 25
9649: PUSH
9650: LD_INT 1
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: LD_INT 54
9662: PUSH
9663: EMPTY
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PUSH
9670: EMPTY
9671: LIST
9672: LIST
9673: LIST
9674: PPUSH
9675: NOP4
9679: PUSH
9680: NOP4
9684: DIFF
9685: PPUSH
9686: NOP4
9690: PPUSH
9691: NOP4
// end ; if GetBType ( b ) = b_depot and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9695: NOP4
9699: PPUSH
9700: NOP4
9704: PUSH
9705: LD_INT 0
9707: EQUAL
9708: PUSH
9709: NOP4
9713: PPUSH
9714: NOP4
9718: PUSH
9719: LD_INT 4
9721: EQUAL
9722: AND
9723: PUSH
9724: NOP4
9728: PPUSH
9729: LD_INT 27
9731: PPUSH
9732: NOP4
9736: AND
9737: IFFALSE 9829
// begin SetBName ( b , zinoviev ) ;
9739: NOP4
9743: PPUSH
9744: LD_STRING zinoviev
9746: PPUSH
9747: NOP4
// DialogueOn ;
9751: NOP4
// CenterNowOnUnits ( Bierezov ) ;
9755: NOP4
9759: PPUSH
9760: NOP4
// SayRadio ( Bierezov , 4Bierezov-01 ) ;
9764: NOP4
9768: PPUSH
9769: LD_STRING 4Bierezov-01
9771: PPUSH
9772: NOP4
// DialogueOff ;
9776: NOP4
// ComUpgrade ( b ) ;
9780: NOP4
9784: PPUSH
9785: NOP4
// SetResourceType ( GetBase ( b ) , mat_cans , 2500 ) ;
9789: NOP4
9793: PPUSH
9794: NOP4
9798: PPUSH
9799: LD_INT 1
9801: PPUSH
9802: LD_INT 2500
9804: PPUSH
9805: NOP4
// SetResourceType ( GetBase ( b ) , mat_oil , 500 ) ;
9809: NOP4
9813: PPUSH
9814: NOP4
9818: PPUSH
9819: LD_INT 2
9821: PPUSH
9822: LD_INT 500
9824: PPUSH
9825: NOP4
// end ; if GetBType ( b ) = b_lab and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9829: NOP4
9833: PPUSH
9834: NOP4
9838: PUSH
9839: LD_INT 6
9841: EQUAL
9842: PUSH
9843: NOP4
9847: PPUSH
9848: NOP4
9852: PUSH
9853: LD_INT 4
9855: EQUAL
9856: AND
9857: PUSH
9858: NOP4
9862: PPUSH
9863: LD_INT 27
9865: PPUSH
9866: NOP4
9870: AND
9871: IFFALSE 9885
// begin ComUpgradeLab ( b , 10 ) ;
9873: NOP4
9877: PPUSH
9878: LD_INT 10
9880: PPUSH
9881: NOP4
// end ; if GetBType ( b ) = b_workshop and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
9885: NOP4
9889: PPUSH
9890: NOP4
9894: PUSH
9895: LD_INT 2
9897: EQUAL
9898: PUSH
9899: NOP4
9903: PPUSH
9904: NOP4
9908: PUSH
9909: LD_INT 4
9911: EQUAL
9912: AND
9913: PUSH
9914: NOP4
9918: PPUSH
9919: LD_INT 27
9921: PPUSH
9922: NOP4
9926: AND
9927: IFFALSE 9938
// begin ComUpgrade ( b ) ;
9929: NOP4
9933: PPUSH
9934: NOP4
// end ; if GetBType ( b ) = b_bunker and GetSide ( b ) = 6 and IsInArea ( b , SouthLeninArea ) and control_taken_over = false then
9938: NOP4
9942: PPUSH
9943: NOP4
9947: PUSH
9948: LD_INT 32
9950: EQUAL
9951: PUSH
9952: NOP4
9956: PPUSH
9957: NOP4
9961: PUSH
9962: LD_INT 6
9964: EQUAL
9965: AND
9966: PUSH
9967: NOP4
9971: PPUSH
9972: LD_INT 4
9974: PPUSH
9975: NOP4
9979: AND
9980: PUSH
9981: NOP4
9985: PUSH
9986: LD_INT 0
9988: EQUAL
9989: AND
9990: IFFALSE 10012
// begin AddComPlaceWeapon ( b , rand ( 43 , 46 ) ) ;
9992: NOP4
9996: PPUSH
9997: LD_INT 43
9999: PPUSH
10000: LD_INT 46
10002: PPUSH
10003: NOP4
10007: PPUSH
10008: NOP4
// end ; if GetBType ( b ) = b_armoury and GetSide ( b ) = 4 then
10012: NOP4
10016: PPUSH
10017: NOP4
10021: PUSH
10022: LD_INT 4
10024: EQUAL
10025: PUSH
10026: NOP4
10030: PPUSH
10031: NOP4
10035: PUSH
10036: LD_INT 4
10038: EQUAL
10039: AND
10040: IFFALSE 10052
// begin BierezovArmoury = b ;
10042: NOP4
10046: PUSH
10047: NOP4
10051: ST_TO_ADDR
// end ; end ;
10052: PPOPN 2
10054: END
// on UpgradeComplete ( b ) do begin if GetBType ( b ) = b_warehouse and GetSide ( b ) = 4 then
10055: NOP4
10059: PPUSH
10060: NOP4
10064: PUSH
10065: LD_INT 1
10067: EQUAL
10068: PUSH
10069: NOP4
10073: PPUSH
10074: NOP4
10078: PUSH
10079: LD_INT 4
10081: EQUAL
10082: AND
10083: IFFALSE 10130
// begin BierezovDepot = b ;
10085: NOP4
10089: PUSH
10090: NOP4
10094: ST_TO_ADDR
// Wait ( 0 0$3 ) ;
10095: LD_INT 105
10097: PPUSH
10098: NOP4
// ComEnterUnit ( Bierezov , BierezovDepot ) ;
10102: NOP4
10106: PPUSH
10107: NOP4
10111: PPUSH
10112: NOP4
// ComEnterUnit ( Aleinik , BierezovDepot ) ;
10116: NOP4
10120: PPUSH
10121: NOP4
10125: PPUSH
10126: NOP4
// end ; if GetBType ( b ) = b_lab_half and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
10130: NOP4
10134: PPUSH
10135: NOP4
10139: PUSH
10140: LD_INT 7
10142: EQUAL
10143: PUSH
10144: NOP4
10148: PPUSH
10149: NOP4
10153: PUSH
10154: LD_INT 4
10156: EQUAL
10157: AND
10158: PUSH
10159: NOP4
10163: PPUSH
10164: LD_INT 27
10166: PPUSH
10167: NOP4
10171: AND
10172: IFFALSE 10186
// begin AddComUpgradeLab ( b , 12 ) ;
10174: NOP4
10178: PPUSH
10179: LD_INT 12
10181: PPUSH
10182: NOP4
// end ; if GetBType ( b ) = b_lab_full and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
10186: NOP4
10190: PPUSH
10191: NOP4
10195: PUSH
10196: LD_INT 8
10198: EQUAL
10199: PUSH
10200: NOP4
10204: PPUSH
10205: NOP4
10209: PUSH
10210: LD_INT 4
10212: EQUAL
10213: AND
10214: PUSH
10215: NOP4
10219: PPUSH
10220: LD_INT 27
10222: PPUSH
10223: NOP4
10227: AND
10228: IFFALSE 10352
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 4 ] ] ) , b ) ;
10230: LD_INT 22
10232: PUSH
10233: LD_INT 4
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 25
10242: PUSH
10243: LD_INT 4
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PPUSH
10254: NOP4
10258: PPUSH
10259: NOP4
10263: PPUSH
10264: NOP4
// AddComResearch ( b , 83 ) ;
10268: NOP4
10272: PPUSH
10273: LD_INT 83
10275: PPUSH
10276: NOP4
// AddComResearch ( b , 84 ) ;
10280: NOP4
10284: PPUSH
10285: LD_INT 84
10287: PPUSH
10288: NOP4
// AddComResearch ( b , 85 ) ;
10292: NOP4
10296: PPUSH
10297: LD_INT 85
10299: PPUSH
10300: NOP4
// AddComResearch ( b , 48 ) ;
10304: NOP4
10308: PPUSH
10309: LD_INT 48
10311: PPUSH
10312: NOP4
// AddComResearch ( b , 49 ) ;
10316: NOP4
10320: PPUSH
10321: LD_INT 49
10323: PPUSH
10324: NOP4
// AddComResearch ( b , 51 ) ;
10328: NOP4
10332: PPUSH
10333: LD_INT 51
10335: PPUSH
10336: NOP4
// AddComResearch ( b , 57 ) ;
10340: NOP4
10344: PPUSH
10345: LD_INT 57
10347: PPUSH
10348: NOP4
// end ; if GetBType ( b ) = b_factory and GetSide ( b ) = 4 and IsInArea ( b , BierezovBaseArea ) then
10352: NOP4
10356: PPUSH
10357: NOP4
10361: PUSH
10362: LD_INT 3
10364: EQUAL
10365: PUSH
10366: NOP4
10370: PPUSH
10371: NOP4
10375: PUSH
10376: LD_INT 4
10378: EQUAL
10379: AND
10380: PUSH
10381: NOP4
10385: PPUSH
10386: LD_INT 27
10388: PPUSH
10389: NOP4
10393: AND
10394: IFFALSE 10434
// begin AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 3 ] ] ) , b ) ;
10396: LD_INT 22
10398: PUSH
10399: LD_INT 4
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: PUSH
10406: LD_INT 25
10408: PUSH
10409: LD_INT 3
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PPUSH
10420: NOP4
10424: PPUSH
10425: NOP4
10429: PPUSH
10430: NOP4
// end ; end ;
10434: PPOPN 1
10436: END
// on ApemanTamed ( ape , scientist ) do begin if GetSide ( ape ) = 3 and apeman_tamed = false then
10437: NOP4
10441: PPUSH
10442: NOP4
10446: PUSH
10447: LD_INT 3
10449: EQUAL
10450: PUSH
10451: NOP4
10455: PUSH
10456: LD_INT 0
10458: EQUAL
10459: AND
10460: IFFALSE 10514
// begin DialogueOn ;
10462: NOP4
// Say ( Grigori , 4Grig-Ape-02 ) ;
10466: NOP4
10470: PPUSH
10471: LD_STRING 4Grig-Ape-02
10473: PPUSH
10474: NOP4
// Say ( Yakotich , 4Yak-Ape-02 ) ;
10478: NOP4
10482: PPUSH
10483: LD_STRING 4Yak-Ape-02
10485: PPUSH
10486: NOP4
// Say ( Grigori , 4Grig-Ape-03 ) ;
10490: NOP4
10494: PPUSH
10495: LD_STRING 4Grig-Ape-03
10497: PPUSH
10498: NOP4
// DialogueOff ;
10502: NOP4
// apeman_tamed = true ;
10506: NOP4
10510: PUSH
10511: LD_INT 1
10513: ST_TO_ADDR
// end ; end ;
10514: PPOPN 2
10516: END
// on VehicleRecycled ( BuildingID , VehicleID , Side , Nation , X , Y , Direction , Chassis , Controller , Engine , Weapon ) do begin if Side = 3 and Nation = 2 and Weapon = 26 then
10517: NOP4
10521: PUSH
10522: LD_INT 3
10524: EQUAL
10525: PUSH
10526: NOP4
10530: PUSH
10531: LD_INT 2
10533: EQUAL
10534: AND
10535: PUSH
10536: NOP4
10540: PUSH
10541: LD_INT 26
10543: EQUAL
10544: AND
10545: IFFALSE 10560
// begin SetTech ( 70 , 3 , 1 ) ;
10547: LD_INT 70
10549: PPUSH
10550: LD_INT 3
10552: PPUSH
10553: LD_INT 1
10555: PPUSH
10556: NOP4
// end ; end ;
10560: PPOPN 11
10562: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = 89 and GetSide ( vehicle ) = 6 then
10563: NOP4
10567: PPUSH
10568: NOP4
10572: PUSH
10573: LD_INT 89
10575: EQUAL
10576: PUSH
10577: NOP4
10581: PPUSH
10582: NOP4
10586: PUSH
10587: LD_INT 6
10589: EQUAL
10590: AND
10591: IFFALSE 10749
// begin Wait ( 0 0$5 ) ;
10593: LD_INT 175
10595: PPUSH
10596: NOP4
// DialogueOn ;
10600: NOP4
// CenterNowOnUnits ( vehicle ) ;
10604: NOP4
10608: PPUSH
10609: NOP4
// SayRadio ( Bukov , 4Bukov-Transport-01 ) ;
10613: NOP4
10617: PPUSH
10618: LD_STRING 4Bukov-Transport-01
10620: PPUSH
10621: NOP4
// SayRadio ( Platonov , 4Plat-Transport-01 ) ;
10625: NOP4
10629: PPUSH
10630: LD_STRING 4Plat-Transport-01
10632: PPUSH
10633: NOP4
// TransportQuery ( 1 ) ;
10637: LD_INT 1
10639: PPUSH
10640: NOP4
// SetAreaMapShow ( LeninCargo , 2 ) ;
10644: LD_INT 17
10646: PPUSH
10647: LD_INT 2
10649: PPUSH
10650: NOP4
// CenterNowOnXY ( 102 , 165 ) ;
10654: LD_INT 102
10656: PPUSH
10657: LD_INT 165
10659: PPUSH
10660: NOP4
// DialogueOff ;
10664: NOP4
// repeat AddComTransport ( vehicle , BukovBase , mat_cans ) ;
10668: NOP4
10672: PPUSH
10673: LD_INT 127
10675: PPUSH
10676: LD_INT 1
10678: PPUSH
10679: NOP4
// AddComGive ( vehicle , SouthLenin ) ;
10683: NOP4
10687: PPUSH
10688: LD_INT 218
10690: PPUSH
10691: NOP4
// SetFuel ( vehicle , 85 ) ;
10695: NOP4
10699: PPUSH
10700: LD_INT 85
10702: PPUSH
10703: NOP4
// wait ( 0 0$1 ) ;
10707: LD_INT 35
10709: PPUSH
10710: NOP4
// until fall_back = true ;
10714: NOP4
10718: PUSH
10719: LD_INT 1
10721: EQUAL
10722: IFFALSE 10668
// if fall_back = true then
10724: NOP4
10728: PUSH
10729: LD_INT 1
10731: EQUAL
10732: IFFALSE 10749
// ComMoveXY ( vehicle , 110 , 168 ) ;
10734: NOP4
10738: PPUSH
10739: LD_INT 110
10741: PPUSH
10742: LD_INT 168
10744: PPUSH
10745: NOP4
// end ; end ;
10749: PPOPN 2
10751: END
// every 0 0$1 trigger Researched ( 6 , 84 ) do
10752: LD_INT 6
10754: PPUSH
10755: LD_INT 84
10757: PPUSH
10758: NOP4
10762: IFFALSE 10786
10764: GO 10766
10766: DISABLE
// begin AddComConstruct ( BukovF , 24 , 1 , 1 , 89 ) ;
10767: LD_INT 128
10769: PPUSH
10770: LD_INT 24
10772: PPUSH
10773: LD_INT 1
10775: PPUSH
10776: LD_INT 1
10778: PPUSH
10779: LD_INT 89
10781: PPUSH
10782: NOP4
// end ;
10786: END
// every 0 0$1 trigger Researched ( 3 , 34 ) do
10787: LD_INT 3
10789: PPUSH
10790: LD_INT 34
10792: PPUSH
10793: NOP4
10797: IFFALSE 10837
10799: GO 10801
10801: DISABLE
// begin DialogueOn ;
10802: NOP4
// Say ( Vasilij , 4Vas-HG-01 ) ;
10806: NOP4
10810: PPUSH
10811: LD_STRING 4Vas-HG-01
10813: PPUSH
10814: NOP4
// DialogueOff ;
10818: NOP4
// ChangeMissionObjectives ( hg2 ) ;
10822: LD_STRING hg2
10824: PPUSH
10825: NOP4
// heavy_gun_researched = true ;
10829: NOP4
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// end ;
10837: END
// every 0 0$1 trigger Researched ( 3 , 1 ) do
10838: LD_INT 3
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: NOP4
10848: IFFALSE 10885
10850: GO 10852
10852: DISABLE
// begin DialogueOn ;
10853: NOP4
// Say ( Grigori , 4Grig-Ape-01 ) ;
10857: NOP4
10861: PPUSH
10862: LD_STRING 4Grig-Ape-01
10864: PPUSH
10865: NOP4
// Say ( Yakotich , 4Yak-Ape-01 ) ;
10869: NOP4
10873: PPUSH
10874: LD_STRING 4Yak-Ape-01
10876: PPUSH
10877: NOP4
// DialogueOff ;
10881: NOP4
// end ;
10885: END
// every 0 0$1 trigger Researched ( 3 , 70 ) do
10886: LD_INT 3
10888: PPUSH
10889: LD_INT 70
10891: PPUSH
10892: NOP4
10896: IFFALSE 10960
10898: GO 10900
10900: DISABLE
// begin DialogueOn ;
10901: NOP4
// Say ( Stanislav , 4Stan-Flame-01 ) ;
10905: NOP4
10909: PPUSH
10910: LD_STRING 4Stan-Flame-01
10912: PPUSH
10913: NOP4
// Say ( Stanislav , 4Stan-Flame-02 ) ;
10917: NOP4
10921: PPUSH
10922: LD_STRING 4Stan-Flame-02
10924: PPUSH
10925: NOP4
// Say ( Stanislav , 4Stan-Flame-03 ) ;
10929: NOP4
10933: PPUSH
10934: LD_STRING 4Stan-Flame-03
10936: PPUSH
10937: NOP4
// ChangeMissionObjectives ( flame ) ;
10941: LD_STRING flame
10943: PPUSH
10944: NOP4
// flame_researched = true ;
10948: NOP4
10952: PUSH
10953: LD_INT 1
10955: ST_TO_ADDR
// DialogueOff ;
10956: NOP4
// end ;
10960: END
// every 0 0$5 trigger FilterUnitsInArea ( BierezovBaseArea , ( [ [ f_side , 4 ] , [ f_constructed ] , [ f_btype , b_breastwork ] ] ) ) >= 1 do
10961: LD_INT 27
10963: PPUSH
10964: LD_INT 22
10966: PUSH
10967: LD_INT 4
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 57
10976: PUSH
10977: EMPTY
10978: LIST
10979: PUSH
10980: LD_INT 30
10982: PUSH
10983: LD_INT 31
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: EMPTY
10991: LIST
10992: LIST
10993: LIST
10994: PPUSH
10995: NOP4
10999: PUSH
11000: LD_INT 1
11002: GREATEREQUAL
11003: IFFALSE 11264
11005: GO 11007
11007: DISABLE
// begin Wait ( 0 0$15 ) ;
11008: LD_INT 525
11010: PPUSH
11011: NOP4
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_outside ] , [ f_class , 1 ] ] ) , BierezovArmoury ) ;
11015: LD_INT 22
11017: PUSH
11018: LD_INT 4
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 56
11027: PUSH
11028: EMPTY
11029: LIST
11030: PUSH
11031: LD_INT 25
11033: PUSH
11034: LD_INT 1
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: PPUSH
11046: NOP4
11050: PPUSH
11051: NOP4
11055: PPUSH
11056: NOP4
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_outside ] , [ f_class , 2 ] ] ) , BierezovDepot ) ;
11060: LD_INT 22
11062: PUSH
11063: LD_INT 4
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 56
11072: PUSH
11073: EMPTY
11074: LIST
11075: PUSH
11076: LD_INT 25
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: PPUSH
11091: NOP4
11095: PPUSH
11096: NOP4
11100: PPUSH
11101: NOP4
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) , 23 , 1 , 1 , rand ( 44 , 46 ) ) ;
11105: LD_INT 22
11107: PUSH
11108: LD_INT 4
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 30
11117: PUSH
11118: LD_INT 3
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PPUSH
11129: NOP4
11133: PPUSH
11134: LD_INT 23
11136: PPUSH
11137: LD_INT 1
11139: PPUSH
11140: LD_INT 1
11142: PPUSH
11143: LD_INT 44
11145: PPUSH
11146: LD_INT 46
11148: PPUSH
11149: NOP4
11153: PPUSH
11154: NOP4
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) , 23 , 1 , 1 , rand ( 45 , 46 ) ) ;
11158: LD_INT 22
11160: PUSH
11161: LD_INT 4
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 30
11170: PUSH
11171: LD_INT 3
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PPUSH
11182: NOP4
11186: PPUSH
11187: LD_INT 23
11189: PPUSH
11190: LD_INT 1
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: LD_INT 45
11198: PPUSH
11199: LD_INT 46
11201: PPUSH
11202: NOP4
11206: PPUSH
11207: NOP4
// AddComConstruct ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_factory ] ] ) , 23 , 1 , 1 , rand ( 43 , 46 ) ) ;
11211: LD_INT 22
11213: PUSH
11214: LD_INT 4
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 30
11223: PUSH
11224: LD_INT 3
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PPUSH
11235: NOP4
11239: PPUSH
11240: LD_INT 23
11242: PPUSH
11243: LD_INT 1
11245: PPUSH
11246: LD_INT 1
11248: PPUSH
11249: LD_INT 43
11251: PPUSH
11252: LD_INT 46
11254: PPUSH
11255: NOP4
11259: PPUSH
11260: NOP4
// end ; end_of_file
11264: END
// export OmarTanks , OmarMechs , OmarMastodont ; export function InitArabianAI ; var i , z , y , turrety , fabryka , lab , zbrojka ; begin
11265: LD_INT 0
11267: PPUSH
11268: PPUSH
11269: PPUSH
11270: PPUSH
11271: PPUSH
11272: PPUSH
11273: PPUSH
11274: PPUSH
// uc_side := 2 ;
11275: LD_ADDR_OWVAR 20
11279: PUSH
11280: LD_INT 2
11282: ST_TO_ADDR
// uc_nation := 2 ;
11283: LD_ADDR_OWVAR 21
11287: PUSH
11288: LD_INT 2
11290: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , false ,  ) ;
11291: NOP4
11295: PUSH
11296: LD_STRING Heike
11298: PPUSH
11299: LD_INT 0
11301: PPUSH
11302: LD_STRING 
11304: PPUSH
11305: NOP4
11309: ST_TO_ADDR
// PlaceHumanInUnit ( Heike , HeikeDepot ) ;
11310: NOP4
11314: PPUSH
11315: LD_INT 86
11317: PPUSH
11318: NOP4
// Hc_Gallery :=  ;
11322: LD_ADDR_OWVAR 33
11326: PUSH
11327: LD_STRING 
11329: ST_TO_ADDR
// Hc_Name :=  ;
11330: LD_ADDR_OWVAR 26
11334: PUSH
11335: LD_STRING 
11337: ST_TO_ADDR
// HeikeCrew := [ ] ;
11338: NOP4
11342: PUSH
11343: EMPTY
11344: ST_TO_ADDR
// for i = 1 to 15 do
11345: NOP4
11349: PUSH
11350: DOUBLE
11351: LD_INT 1
11353: DEC
11354: ST_TO_ADDR
11355: LD_INT 15
11357: PUSH
11358: FOR_TO
11359: IFFALSE 11414
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11361: LD_INT 0
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: NOP4
11371: PPUSH
11372: LD_INT 3
11374: PUSH
11375: LD_INT 5
11377: PUSH
11378: LD_INT 7
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: LIST
11385: PUSH
11386: NOP4
11390: ARRAY
11391: PPUSH
11392: NOP4
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11396: NOP4
11400: PUSH
11401: NOP4
11405: PUSH
11406: NOP4
11410: ADD
11411: ST_TO_ADDR
// end ;
11412: GO 11358
11414: POP
11415: POP
// for i = 1 to 3 do
11416: NOP4
11420: PUSH
11421: DOUBLE
11422: LD_INT 1
11424: DEC
11425: ST_TO_ADDR
11426: LD_INT 3
11428: PUSH
11429: FOR_TO
11430: IFFALSE 11485
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11432: LD_INT 0
11434: PPUSH
11435: LD_INT 1
11437: PPUSH
11438: NOP4
11442: PPUSH
11443: LD_INT 3
11445: PUSH
11446: LD_INT 5
11448: PUSH
11449: LD_INT 7
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: LIST
11456: PUSH
11457: NOP4
11461: ARRAY
11462: PPUSH
11463: NOP4
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11467: NOP4
11471: PUSH
11472: NOP4
11476: PUSH
11477: NOP4
11481: ADD
11482: ST_TO_ADDR
// end ;
11483: GO 11429
11485: POP
11486: POP
// for i = 1 to 6 do
11487: NOP4
11491: PUSH
11492: DOUBLE
11493: LD_INT 1
11495: DEC
11496: ST_TO_ADDR
11497: LD_INT 6
11499: PUSH
11500: FOR_TO
11501: IFFALSE 11556
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11503: LD_INT 0
11505: PPUSH
11506: LD_INT 1
11508: PPUSH
11509: NOP4
11513: PPUSH
11514: LD_INT 3
11516: PUSH
11517: LD_INT 5
11519: PUSH
11520: LD_INT 7
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: NOP4
11532: ARRAY
11533: PPUSH
11534: NOP4
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11538: NOP4
11542: PUSH
11543: NOP4
11547: PUSH
11548: NOP4
11552: ADD
11553: ST_TO_ADDR
// end ;
11554: GO 11500
11556: POP
11557: POP
// for i = 1 to 3 do
11558: NOP4
11562: PUSH
11563: DOUBLE
11564: LD_INT 1
11566: DEC
11567: ST_TO_ADDR
11568: LD_INT 3
11570: PUSH
11571: FOR_TO
11572: IFFALSE 11627
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
11574: LD_INT 0
11576: PPUSH
11577: LD_INT 1
11579: PPUSH
11580: NOP4
11584: PPUSH
11585: LD_INT 3
11587: PUSH
11588: LD_INT 5
11590: PUSH
11591: LD_INT 7
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: LIST
11598: PUSH
11599: NOP4
11603: ARRAY
11604: PPUSH
11605: NOP4
// HeikeCrew := HeikeCrew ^ CreateHuman ;
11609: NOP4
11613: PUSH
11614: NOP4
11618: PUSH
11619: NOP4
11623: ADD
11624: ST_TO_ADDR
// end ;
11625: GO 11571
11627: POP
11628: POP
// turrety := FilterUnitsInArea ( HeikeBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
11629: NOP4
11633: PUSH
11634: LD_INT 26
11636: PPUSH
11637: LD_INT 2
11639: PUSH
11640: LD_INT 30
11642: PUSH
11643: LD_INT 31
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 30
11652: PUSH
11653: LD_INT 32
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: LIST
11664: PPUSH
11665: NOP4
11669: ST_TO_ADDR
// lab := FilterUnitsInArea ( HeikeBaseArea , [ [ f_btype , b_lab_full ] ] ) ;
11670: NOP4
11674: PUSH
11675: LD_INT 26
11677: PPUSH
11678: LD_INT 30
11680: PUSH
11681: LD_INT 8
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: PPUSH
11691: NOP4
11695: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( HeikeBaseArea , [ [ f_btype , b_factory ] ] ) ;
11696: NOP4
11700: PUSH
11701: LD_INT 26
11703: PPUSH
11704: LD_INT 30
11706: PUSH
11707: LD_INT 3
11709: PUSH
11710: EMPTY
11711: LIST
11712: LIST
11713: PUSH
11714: EMPTY
11715: LIST
11716: PPUSH
11717: NOP4
11721: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( HeikeBaseArea , [ [ f_btype , b_barracks ] ] ) ;
11722: NOP4
11726: PUSH
11727: LD_INT 26
11729: PPUSH
11730: LD_INT 30
11732: PUSH
11733: LD_INT 5
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: PPUSH
11743: NOP4
11747: ST_TO_ADDR
// y := 1 ;
11748: NOP4
11752: PUSH
11753: LD_INT 1
11755: ST_TO_ADDR
// for i in HeikeCrew do
11756: NOP4
11760: PUSH
11761: NOP4
11765: PUSH
11766: FOR_IN
11767: IFFALSE 11938
// begin case GetClass ( i ) of 1 :
11769: NOP4
11773: PPUSH
11774: NOP4
11778: PUSH
11779: LD_INT 1
11781: DOUBLE
11782: EQUAL
11783: IFTRUE 11787
11785: GO 11854
11787: POP
// begin if y > 9 then
11788: NOP4
11792: PUSH
11793: LD_INT 9
11795: GREATER
11796: IFFALSE 11818
// PlaceHumanInUnit ( i , zbrojka [ 1 ] ) else
11798: NOP4
11802: PPUSH
11803: NOP4
11807: PUSH
11808: LD_INT 1
11810: ARRAY
11811: PPUSH
11812: NOP4
11816: GO 11838
// PlaceHumanInUnit ( i , turrety [ y ] ) ;
11818: NOP4
11822: PPUSH
11823: NOP4
11827: PUSH
11828: NOP4
11832: ARRAY
11833: PPUSH
11834: NOP4
// y = y + 1 ;
11838: NOP4
11842: PUSH
11843: NOP4
11847: PUSH
11848: LD_INT 1
11850: PLUS
11851: ST_TO_ADDR
// end ; 2 :
11852: GO 11936
11854: LD_INT 2
11856: DOUBLE
11857: EQUAL
11858: IFTRUE 11862
11860: GO 11877
11862: POP
// PlaceHumanInUnit ( i , HeikeDepot ) ; 3 :
11863: NOP4
11867: PPUSH
11868: LD_INT 86
11870: PPUSH
11871: NOP4
11875: GO 11936
11877: LD_INT 3
11879: DOUBLE
11880: EQUAL
11881: IFTRUE 11885
11883: GO 11906
11885: POP
// PlaceHumanInUnit ( i , fabryka [ 1 ] ) ; 4 :
11886: NOP4
11890: PPUSH
11891: NOP4
11895: PUSH
11896: LD_INT 1
11898: ARRAY
11899: PPUSH
11900: NOP4
11904: GO 11936
11906: LD_INT 4
11908: DOUBLE
11909: EQUAL
11910: IFTRUE 11914
11912: GO 11935
11914: POP
// PlaceHumanInUnit ( i , lab [ 1 ] ) ; end ;
11915: NOP4
11919: PPUSH
11920: NOP4
11924: PUSH
11925: LD_INT 1
11927: ARRAY
11928: PPUSH
11929: NOP4
11933: GO 11936
11935: POP
// end ;
11936: GO 11766
11938: POP
11939: POP
// end ;
11940: LD_VAR 0 1
11944: RET
// export function OmarAttack ; var i , z , y , turrety , fabryka , lab , zbrojka ; begin
11945: LD_INT 0
11947: PPUSH
11948: PPUSH
11949: PPUSH
11950: PPUSH
11951: PPUSH
11952: PPUSH
11953: PPUSH
11954: PPUSH
// uc_side := 5 ;
11955: LD_ADDR_OWVAR 20
11959: PUSH
11960: LD_INT 5
11962: ST_TO_ADDR
// uc_nation := 2 ;
11963: LD_ADDR_OWVAR 21
11967: PUSH
11968: LD_INT 2
11970: ST_TO_ADDR
// vc_chassis := 31 ;
11971: LD_ADDR_OWVAR 37
11975: PUSH
11976: LD_INT 31
11978: ST_TO_ADDR
// vc_control := control_rider ;
11979: LD_ADDR_OWVAR 38
11983: PUSH
11984: LD_INT 4
11986: ST_TO_ADDR
// OmarMastodont := CreateVehicle ;
11987: NOP4
11991: PUSH
11992: NOP4
11996: ST_TO_ADDR
// OmarCrew := OmarCrew ^ OmarMastodont ;
11997: NOP4
12001: PUSH
12002: NOP4
12006: PUSH
12007: NOP4
12011: ADD
12012: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
12013: NOP4
12017: PUSH
12018: LD_STRING Omar
12020: PPUSH
12021: LD_INT 0
12023: PPUSH
12024: LD_STRING 
12026: PPUSH
12027: NOP4
12031: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , OmarMastodont ) ;
12032: NOP4
12036: PPUSH
12037: NOP4
12041: PPUSH
12042: NOP4
// Hc_Gallery :=  ;
12046: LD_ADDR_OWVAR 33
12050: PUSH
12051: LD_STRING 
12053: ST_TO_ADDR
// Hc_Name :=  ;
12054: LD_ADDR_OWVAR 26
12058: PUSH
12059: LD_STRING 
12061: ST_TO_ADDR
// OmarCrew := [ ] ;
12062: NOP4
12066: PUSH
12067: EMPTY
12068: ST_TO_ADDR
// for i = 1 to 8 do
12069: NOP4
12073: PUSH
12074: DOUBLE
12075: LD_INT 1
12077: DEC
12078: ST_TO_ADDR
12079: LD_INT 8
12081: PUSH
12082: FOR_TO
12083: IFFALSE 12138
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12085: LD_INT 0
12087: PPUSH
12088: LD_INT 1
12090: PPUSH
12091: NOP4
12095: PPUSH
12096: LD_INT 3
12098: PUSH
12099: LD_INT 5
12101: PUSH
12102: LD_INT 7
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: PUSH
12110: NOP4
12114: ARRAY
12115: PPUSH
12116: NOP4
// OmarCrew := OmarCrew ^ CreateHuman ;
12120: NOP4
12124: PUSH
12125: NOP4
12129: PUSH
12130: NOP4
12134: ADD
12135: ST_TO_ADDR
// end ;
12136: GO 12082
12138: POP
12139: POP
// for i = 1 to 6 do
12140: NOP4
12144: PUSH
12145: DOUBLE
12146: LD_INT 1
12148: DEC
12149: ST_TO_ADDR
12150: LD_INT 6
12152: PUSH
12153: FOR_TO
12154: IFFALSE 12221
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12156: LD_INT 0
12158: PPUSH
12159: LD_INT 1
12161: PPUSH
12162: NOP4
12166: PPUSH
12167: LD_INT 3
12169: PUSH
12170: LD_INT 5
12172: PUSH
12173: LD_INT 7
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: PUSH
12181: NOP4
12185: ARRAY
12186: PPUSH
12187: NOP4
// OmarCrew := OmarCrew ^ CreateHuman ;
12191: NOP4
12195: PUSH
12196: NOP4
12200: PUSH
12201: NOP4
12205: ADD
12206: ST_TO_ADDR
// SetClass ( CreateHuman , 8 ) ;
12207: NOP4
12211: PPUSH
12212: LD_INT 8
12214: PPUSH
12215: NOP4
// end ;
12219: GO 12153
12221: POP
12222: POP
// for i = 1 to 2 do
12223: NOP4
12227: PUSH
12228: DOUBLE
12229: LD_INT 1
12231: DEC
12232: ST_TO_ADDR
12233: LD_INT 2
12235: PUSH
12236: FOR_TO
12237: IFFALSE 12292
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12239: LD_INT 0
12241: PPUSH
12242: LD_INT 1
12244: PPUSH
12245: NOP4
12249: PPUSH
12250: LD_INT 3
12252: PUSH
12253: LD_INT 5
12255: PUSH
12256: LD_INT 7
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: PUSH
12264: NOP4
12268: ARRAY
12269: PPUSH
12270: NOP4
// OmarCrew := OmarCrew ^ CreateHuman ;
12274: NOP4
12278: PUSH
12279: NOP4
12283: PUSH
12284: NOP4
12288: ADD
12289: ST_TO_ADDR
// end ;
12290: GO 12236
12292: POP
12293: POP
// for i = 1 to 6 do
12294: NOP4
12298: PUSH
12299: DOUBLE
12300: LD_INT 1
12302: DEC
12303: ST_TO_ADDR
12304: LD_INT 6
12306: PUSH
12307: FOR_TO
12308: IFFALSE 12371
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12310: LD_INT 0
12312: PPUSH
12313: LD_INT 1
12315: PPUSH
12316: NOP4
12320: PPUSH
12321: LD_INT 3
12323: PUSH
12324: LD_INT 5
12326: PUSH
12327: LD_INT 7
12329: PUSH
12330: EMPTY
12331: LIST
12332: LIST
12333: LIST
12334: PUSH
12335: NOP4
12339: ARRAY
12340: PPUSH
12341: NOP4
// OmarMechs = CreateHuman ;
12345: NOP4
12349: PUSH
12350: NOP4
12354: ST_TO_ADDR
// PlaceHumanInUnit ( OmarMechs , OmarTanks ) ;
12355: NOP4
12359: PPUSH
12360: NOP4
12364: PPUSH
12365: NOP4
// end ;
12369: GO 12307
12371: POP
12372: POP
// for i = 1 to 6 do
12373: NOP4
12377: PUSH
12378: DOUBLE
12379: LD_INT 1
12381: DEC
12382: ST_TO_ADDR
12383: LD_INT 6
12385: PUSH
12386: FOR_TO
12387: IFFALSE 12473
// begin vc_chassis = rand ( 13 , 14 ) ;
12389: LD_ADDR_OWVAR 37
12393: PUSH
12394: LD_INT 13
12396: PPUSH
12397: LD_INT 14
12399: PPUSH
12400: NOP4
12404: ST_TO_ADDR
// vc_control = 1 ;
12405: LD_ADDR_OWVAR 38
12409: PUSH
12410: LD_INT 1
12412: ST_TO_ADDR
// vc_engine = 1 ;
12413: LD_ADDR_OWVAR 39
12417: PUSH
12418: LD_INT 1
12420: ST_TO_ADDR
// vc_fuel_battery = 80 ;
12421: LD_ADDR_OWVAR 41
12425: PUSH
12426: LD_INT 80
12428: ST_TO_ADDR
// vc_weapon = rand ( 26 , 27 ) ;
12429: LD_ADDR_OWVAR 40
12433: PUSH
12434: LD_INT 26
12436: PPUSH
12437: LD_INT 27
12439: PPUSH
12440: NOP4
12444: ST_TO_ADDR
// OmarTanks = CreateVehicle ;
12445: NOP4
12449: PUSH
12450: NOP4
12454: ST_TO_ADDR
// OmarCrew := OmarCrew ^ OmarTanks ;
12455: NOP4
12459: PUSH
12460: NOP4
12464: PUSH
12465: NOP4
12469: ADD
12470: ST_TO_ADDR
// end ;
12471: GO 12386
12473: POP
12474: POP
// for i = 1 to 3 do
12475: NOP4
12479: PUSH
12480: DOUBLE
12481: LD_INT 1
12483: DEC
12484: ST_TO_ADDR
12485: LD_INT 3
12487: PUSH
12488: FOR_TO
12489: IFFALSE 12544
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 3 , 5 , 7 ] [ Difficulty ] ) ;
12491: LD_INT 0
12493: PPUSH
12494: LD_INT 1
12496: PPUSH
12497: NOP4
12501: PPUSH
12502: LD_INT 3
12504: PUSH
12505: LD_INT 5
12507: PUSH
12508: LD_INT 7
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: NOP4
12520: ARRAY
12521: PPUSH
12522: NOP4
// OmarCrew := OmarCrew ^ CreateHuman ;
12526: NOP4
12530: PUSH
12531: NOP4
12535: PUSH
12536: NOP4
12540: ADD
12541: ST_TO_ADDR
// end ;
12542: GO 12488
12544: POP
12545: POP
// PlaceUnitArea ( OmarCrew , OmarAttackArea , false ) ;
12546: NOP4
12550: PPUSH
12551: LD_INT 29
12553: PPUSH
12554: LD_INT 0
12556: PPUSH
12557: NOP4
// ComAgressiveMove ( OmarCrew , 333 , 236 ) ;
12561: NOP4
12565: PPUSH
12566: LD_INT 333
12568: PPUSH
12569: LD_INT 236
12571: PPUSH
12572: NOP4
// end ; end_of_file
12576: LD_VAR 0 1
12580: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12581: LD_INT 0
12583: PPUSH
// ar_miner := 81 ;
12584: NOP4
12588: PUSH
12589: LD_INT 81
12591: ST_TO_ADDR
// ar_crane := 88 ;
12592: NOP4
12596: PUSH
12597: LD_INT 88
12599: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12600: NOP4
12604: PUSH
12605: LD_INT 89
12607: ST_TO_ADDR
// us_hack := 99 ;
12608: NOP4
12612: PUSH
12613: LD_INT 99
12615: ST_TO_ADDR
// us_artillery := 97 ;
12616: NOP4
12620: PUSH
12621: LD_INT 97
12623: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12624: NOP4
12628: PUSH
12629: LD_INT 91
12631: ST_TO_ADDR
// ar_mortar := 92 ;
12632: NOP4
12636: PUSH
12637: LD_INT 92
12639: ST_TO_ADDR
// ru_flamethrower := 93 ;
12640: NOP4
12644: PUSH
12645: LD_INT 93
12647: ST_TO_ADDR
// ru_radar := 98 ;
12648: NOP4
12652: PUSH
12653: LD_INT 98
12655: ST_TO_ADDR
// tech_Artillery := 80 ;
12656: NOP4
12660: PUSH
12661: LD_INT 80
12663: ST_TO_ADDR
// tech_RadMat := 81 ;
12664: NOP4
12668: PUSH
12669: LD_INT 81
12671: ST_TO_ADDR
// tech_BasicTools := 82 ;
12672: NOP4
12676: PUSH
12677: LD_INT 82
12679: ST_TO_ADDR
// tech_Cargo := 83 ;
12680: NOP4
12684: PUSH
12685: LD_INT 83
12687: ST_TO_ADDR
// tech_Track := 84 ;
12688: NOP4
12692: PUSH
12693: LD_INT 84
12695: ST_TO_ADDR
// tech_Crane := 85 ;
12696: NOP4
12700: PUSH
12701: LD_INT 85
12703: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12704: NOP4
12708: PUSH
12709: LD_INT 86
12711: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12712: NOP4
12716: PUSH
12717: LD_INT 87
12719: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12720: NOP4
12724: PUSH
12725: LD_INT 88
12727: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
12728: NOP4
12732: PUSH
12733: LD_INT 90
12735: ST_TO_ADDR
// class_mastodont := 31 ;
12736: NOP4
12740: PUSH
12741: LD_INT 31
12743: ST_TO_ADDR
// class_horse := 21 ;
12744: NOP4
12748: PUSH
12749: LD_INT 21
12751: ST_TO_ADDR
// end ; end_of_file
12752: LD_VAR 0 1
12756: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
12757: LD_INT 0
12759: PPUSH
12760: PPUSH
// if exist_mode then
12761: NOP4
12765: IFFALSE 12790
// unit := CreateCharacter ( prefix & ident ) else
12767: NOP4
12771: PUSH
12772: NOP4
12776: PUSH
12777: NOP4
12781: STR
12782: PPUSH
12783: NOP4
12787: ST_TO_ADDR
12788: GO 12805
// unit := NewCharacter ( ident ) ;
12790: NOP4
12794: PUSH
12795: NOP4
12799: PPUSH
12800: NOP4
12804: ST_TO_ADDR
// result := unit ;
12805: NOP4
12809: PUSH
12810: NOP4
12814: ST_TO_ADDR
// end ;
12815: LD_VAR 0 4
12819: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
12820: LD_INT 0
12822: PPUSH
12823: PPUSH
// if not side or not nation then
12824: NOP4
12828: NOT
12829: PUSH
12830: NOP4
12834: NOT
12835: OR
12836: IFFALSE 12840
// exit ;
12838: GO 13608
// case nation of nation_american :
12840: NOP4
12844: PUSH
12845: LD_INT 1
12847: DOUBLE
12848: EQUAL
12849: IFTRUE 12853
12851: GO 13067
12853: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
12854: NOP4
12858: PUSH
12859: LD_INT 35
12861: PUSH
12862: LD_INT 45
12864: PUSH
12865: LD_INT 46
12867: PUSH
12868: LD_INT 47
12870: PUSH
12871: LD_INT 82
12873: PUSH
12874: LD_INT 83
12876: PUSH
12877: LD_INT 84
12879: PUSH
12880: LD_INT 85
12882: PUSH
12883: LD_INT 86
12885: PUSH
12886: LD_INT 1
12888: PUSH
12889: LD_INT 2
12891: PUSH
12892: LD_INT 6
12894: PUSH
12895: LD_INT 15
12897: PUSH
12898: LD_INT 16
12900: PUSH
12901: LD_INT 7
12903: PUSH
12904: LD_INT 12
12906: PUSH
12907: LD_INT 13
12909: PUSH
12910: LD_INT 10
12912: PUSH
12913: LD_INT 14
12915: PUSH
12916: LD_INT 20
12918: PUSH
12919: LD_INT 21
12921: PUSH
12922: LD_INT 22
12924: PUSH
12925: LD_INT 25
12927: PUSH
12928: LD_INT 32
12930: PUSH
12931: LD_INT 27
12933: PUSH
12934: LD_INT 36
12936: PUSH
12937: LD_INT 69
12939: PUSH
12940: LD_INT 39
12942: PUSH
12943: LD_INT 34
12945: PUSH
12946: LD_INT 40
12948: PUSH
12949: LD_INT 48
12951: PUSH
12952: LD_INT 49
12954: PUSH
12955: LD_INT 50
12957: PUSH
12958: LD_INT 51
12960: PUSH
12961: LD_INT 52
12963: PUSH
12964: LD_INT 53
12966: PUSH
12967: LD_INT 54
12969: PUSH
12970: LD_INT 55
12972: PUSH
12973: LD_INT 56
12975: PUSH
12976: LD_INT 57
12978: PUSH
12979: LD_INT 58
12981: PUSH
12982: LD_INT 59
12984: PUSH
12985: LD_INT 60
12987: PUSH
12988: LD_INT 61
12990: PUSH
12991: LD_INT 62
12993: PUSH
12994: LD_INT 80
12996: PUSH
12997: LD_INT 82
12999: PUSH
13000: LD_INT 83
13002: PUSH
13003: LD_INT 84
13005: PUSH
13006: LD_INT 85
13008: PUSH
13009: LD_INT 86
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: ST_TO_ADDR
13065: GO 13532
13067: LD_INT 2
13069: DOUBLE
13070: EQUAL
13071: IFTRUE 13075
13073: GO 13301
13075: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
13076: NOP4
13080: PUSH
13081: LD_INT 35
13083: PUSH
13084: LD_INT 45
13086: PUSH
13087: LD_INT 46
13089: PUSH
13090: LD_INT 47
13092: PUSH
13093: LD_INT 82
13095: PUSH
13096: LD_INT 83
13098: PUSH
13099: LD_INT 84
13101: PUSH
13102: LD_INT 85
13104: PUSH
13105: LD_INT 87
13107: PUSH
13108: LD_INT 70
13110: PUSH
13111: LD_INT 1
13113: PUSH
13114: LD_INT 11
13116: PUSH
13117: LD_INT 3
13119: PUSH
13120: LD_INT 4
13122: PUSH
13123: LD_INT 5
13125: PUSH
13126: LD_INT 6
13128: PUSH
13129: LD_INT 15
13131: PUSH
13132: LD_INT 18
13134: PUSH
13135: LD_INT 7
13137: PUSH
13138: LD_INT 17
13140: PUSH
13141: LD_INT 8
13143: PUSH
13144: LD_INT 20
13146: PUSH
13147: LD_INT 21
13149: PUSH
13150: LD_INT 22
13152: PUSH
13153: LD_INT 72
13155: PUSH
13156: LD_INT 26
13158: PUSH
13159: LD_INT 69
13161: PUSH
13162: LD_INT 39
13164: PUSH
13165: LD_INT 40
13167: PUSH
13168: LD_INT 41
13170: PUSH
13171: LD_INT 42
13173: PUSH
13174: LD_INT 43
13176: PUSH
13177: LD_INT 48
13179: PUSH
13180: LD_INT 49
13182: PUSH
13183: LD_INT 50
13185: PUSH
13186: LD_INT 51
13188: PUSH
13189: LD_INT 52
13191: PUSH
13192: LD_INT 53
13194: PUSH
13195: LD_INT 54
13197: PUSH
13198: LD_INT 55
13200: PUSH
13201: LD_INT 56
13203: PUSH
13204: LD_INT 60
13206: PUSH
13207: LD_INT 61
13209: PUSH
13210: LD_INT 62
13212: PUSH
13213: LD_INT 66
13215: PUSH
13216: LD_INT 67
13218: PUSH
13219: LD_INT 68
13221: PUSH
13222: LD_INT 81
13224: PUSH
13225: LD_INT 82
13227: PUSH
13228: LD_INT 83
13230: PUSH
13231: LD_INT 84
13233: PUSH
13234: LD_INT 85
13236: PUSH
13237: LD_INT 87
13239: PUSH
13240: LD_INT 88
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: ST_TO_ADDR
13299: GO 13532
13301: LD_INT 3
13303: DOUBLE
13304: EQUAL
13305: IFTRUE 13309
13307: GO 13531
13309: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
13310: NOP4
13314: PUSH
13315: LD_INT 46
13317: PUSH
13318: LD_INT 47
13320: PUSH
13321: LD_INT 1
13323: PUSH
13324: LD_INT 2
13326: PUSH
13327: LD_INT 82
13329: PUSH
13330: LD_INT 83
13332: PUSH
13333: LD_INT 84
13335: PUSH
13336: LD_INT 85
13338: PUSH
13339: LD_INT 86
13341: PUSH
13342: LD_INT 11
13344: PUSH
13345: LD_INT 9
13347: PUSH
13348: LD_INT 20
13350: PUSH
13351: LD_INT 19
13353: PUSH
13354: LD_INT 21
13356: PUSH
13357: LD_INT 24
13359: PUSH
13360: LD_INT 22
13362: PUSH
13363: LD_INT 25
13365: PUSH
13366: LD_INT 28
13368: PUSH
13369: LD_INT 29
13371: PUSH
13372: LD_INT 30
13374: PUSH
13375: LD_INT 31
13377: PUSH
13378: LD_INT 37
13380: PUSH
13381: LD_INT 38
13383: PUSH
13384: LD_INT 32
13386: PUSH
13387: LD_INT 27
13389: PUSH
13390: LD_INT 33
13392: PUSH
13393: LD_INT 69
13395: PUSH
13396: LD_INT 39
13398: PUSH
13399: LD_INT 34
13401: PUSH
13402: LD_INT 40
13404: PUSH
13405: LD_INT 71
13407: PUSH
13408: LD_INT 23
13410: PUSH
13411: LD_INT 44
13413: PUSH
13414: LD_INT 48
13416: PUSH
13417: LD_INT 49
13419: PUSH
13420: LD_INT 50
13422: PUSH
13423: LD_INT 51
13425: PUSH
13426: LD_INT 52
13428: PUSH
13429: LD_INT 53
13431: PUSH
13432: LD_INT 54
13434: PUSH
13435: LD_INT 55
13437: PUSH
13438: LD_INT 56
13440: PUSH
13441: LD_INT 57
13443: PUSH
13444: LD_INT 58
13446: PUSH
13447: LD_INT 59
13449: PUSH
13450: LD_INT 63
13452: PUSH
13453: LD_INT 64
13455: PUSH
13456: LD_INT 65
13458: PUSH
13459: LD_INT 82
13461: PUSH
13462: LD_INT 83
13464: PUSH
13465: LD_INT 84
13467: PUSH
13468: LD_INT 85
13470: PUSH
13471: LD_INT 86
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: ST_TO_ADDR
13529: GO 13532
13531: POP
// if state > - 1 and state < 3 then
13532: NOP4
13536: PUSH
13537: LD_INT 1
13539: NEG
13540: GREATER
13541: PUSH
13542: NOP4
13546: PUSH
13547: LD_INT 3
13549: LESS
13550: AND
13551: IFFALSE 13608
// for i in result do
13553: NOP4
13557: PUSH
13558: NOP4
13562: PUSH
13563: FOR_IN
13564: IFFALSE 13606
// if GetTech ( i , side ) <> state then
13566: NOP4
13570: PPUSH
13571: NOP4
13575: PPUSH
13576: NOP4
13580: PUSH
13581: NOP4
13585: NONEQUAL
13586: IFFALSE 13604
// result := result diff i ;
13588: NOP4
13592: PUSH
13593: NOP4
13597: PUSH
13598: NOP4
13602: DIFF
13603: ST_TO_ADDR
13604: GO 13563
13606: POP
13607: POP
// end ;
13608: LD_VAR 0 4
13612: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
13613: LD_INT 0
13615: PPUSH
13616: PPUSH
13617: PPUSH
// result := true ;
13618: NOP4
13622: PUSH
13623: LD_INT 1
13625: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
13626: NOP4
13630: PUSH
13631: NOP4
13635: PPUSH
13636: NOP4
13640: ST_TO_ADDR
// if not tmp then
13641: NOP4
13645: NOT
13646: IFFALSE 13650
// exit ;
13648: GO 13699
// for i in tmp do
13650: NOP4
13654: PUSH
13655: NOP4
13659: PUSH
13660: FOR_IN
13661: IFFALSE 13697
// if GetTech ( i , side ) <> state_researched then
13663: NOP4
13667: PPUSH
13668: NOP4
13672: PPUSH
13673: NOP4
13677: PUSH
13678: LD_INT 2
13680: NONEQUAL
13681: IFFALSE 13695
// begin result := false ;
13683: NOP4
13687: PUSH
13688: LD_INT 0
13690: ST_TO_ADDR
// exit ;
13691: POP
13692: POP
13693: GO 13699
// end ;
13695: GO 13660
13697: POP
13698: POP
// end ;
13699: LD_VAR 0 3
13703: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
13704: LD_INT 0
13706: PPUSH
13707: PPUSH
13708: PPUSH
13709: PPUSH
13710: PPUSH
13711: PPUSH
13712: PPUSH
13713: PPUSH
13714: PPUSH
13715: PPUSH
13716: PPUSH
13717: PPUSH
13718: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
13719: NOP4
13723: NOT
13724: PUSH
13725: NOP4
13729: PPUSH
13730: NOP4
13734: PUSH
13735: LD_INT 9
13737: NONEQUAL
13738: OR
13739: IFFALSE 13743
// exit ;
13741: GO 14316
// side := GetSide ( unit ) ;
13743: NOP4
13747: PUSH
13748: NOP4
13752: PPUSH
13753: NOP4
13757: ST_TO_ADDR
// tech_space := tech_spacanom ;
13758: NOP4
13762: PUSH
13763: LD_INT 29
13765: ST_TO_ADDR
// tech_time := tech_taurad ;
13766: NOP4
13770: PUSH
13771: LD_INT 28
13773: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
13774: NOP4
13778: PUSH
13779: NOP4
13783: PPUSH
13784: NOP4
13788: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
13789: NOP4
13793: PPUSH
13794: NOP4
13798: PUSH
13799: LD_INT 2
13801: EQUAL
13802: IFFALSE 13806
// exit ;
13804: GO 14316
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13806: NOP4
13810: PUSH
13811: LD_INT 81
13813: PUSH
13814: NOP4
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: PUSH
13823: LD_INT 3
13825: PUSH
13826: LD_INT 21
13828: PUSH
13829: LD_INT 3
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PPUSH
13844: NOP4
13848: ST_TO_ADDR
// if not tmp then
13849: NOP4
13853: NOT
13854: IFFALSE 13858
// exit ;
13856: GO 14316
// if in_unit then
13858: NOP4
13862: IFFALSE 13886
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
13864: NOP4
13868: PUSH
13869: NOP4
13873: PPUSH
13874: NOP4
13878: PPUSH
13879: NOP4
13883: ST_TO_ADDR
13884: GO 13906
// enemy := NearestUnitToUnit ( tmp , unit ) ;
13886: NOP4
13890: PUSH
13891: NOP4
13895: PPUSH
13896: NOP4
13900: PPUSH
13901: NOP4
13905: ST_TO_ADDR
// if not enemy then
13906: NOP4
13910: NOT
13911: IFFALSE 13915
// exit ;
13913: GO 14316
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
13915: NOP4
13919: PUSH
13920: NOP4
13924: PPUSH
13925: NOP4
13929: PPUSH
13930: NOP4
13934: PUSH
13935: LD_INT 13
13937: GREATER
13938: AND
13939: PUSH
13940: NOP4
13944: PPUSH
13945: NOP4
13949: PPUSH
13950: NOP4
13954: PUSH
13955: LD_INT 12
13957: GREATER
13958: OR
13959: IFFALSE 13963
// exit ;
13961: GO 14316
// missile := [ 1 ] ;
13963: NOP4
13967: PUSH
13968: LD_INT 1
13970: PUSH
13971: EMPTY
13972: LIST
13973: ST_TO_ADDR
// if Researched ( side , tech_space ) then
13974: NOP4
13978: PPUSH
13979: NOP4
13983: PPUSH
13984: NOP4
13988: IFFALSE 14017
// missile := Replace ( missile , missile + 1 , 2 ) ;
13990: NOP4
13994: PUSH
13995: NOP4
13999: PPUSH
14000: NOP4
14004: PUSH
14005: LD_INT 1
14007: PLUS
14008: PPUSH
14009: LD_INT 2
14011: PPUSH
14012: NOP4
14016: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
14017: NOP4
14021: PPUSH
14022: NOP4
14026: PPUSH
14027: NOP4
14031: PUSH
14032: NOP4
14036: PPUSH
14037: NOP4
14041: PPUSH
14042: NOP4
14046: PPUSH
14047: NOP4
14051: NOT
14052: AND
14053: IFFALSE 14082
// missile := Replace ( missile , missile + 1 , 3 ) ;
14055: NOP4
14059: PUSH
14060: NOP4
14064: PPUSH
14065: NOP4
14069: PUSH
14070: LD_INT 1
14072: PLUS
14073: PPUSH
14074: LD_INT 3
14076: PPUSH
14077: NOP4
14081: ST_TO_ADDR
// if missile < 2 then
14082: NOP4
14086: PUSH
14087: LD_INT 2
14089: LESS
14090: IFFALSE 14094
// exit ;
14092: GO 14316
// x := GetX ( enemy ) ;
14094: NOP4
14098: PUSH
14099: NOP4
14103: PPUSH
14104: NOP4
14108: ST_TO_ADDR
// y := GetY ( enemy ) ;
14109: NOP4
14113: PUSH
14114: NOP4
14118: PPUSH
14119: NOP4
14123: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
14124: NOP4
14128: PUSH
14129: NOP4
14133: PUSH
14134: LD_INT 1
14136: NEG
14137: PPUSH
14138: LD_INT 1
14140: PPUSH
14141: NOP4
14145: PLUS
14146: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
14147: NOP4
14151: PUSH
14152: NOP4
14156: PUSH
14157: LD_INT 1
14159: NEG
14160: PPUSH
14161: LD_INT 1
14163: PPUSH
14164: NOP4
14168: PLUS
14169: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14170: NOP4
14174: PPUSH
14175: NOP4
14179: PPUSH
14180: NOP4
14184: NOT
14185: IFFALSE 14207
// begin _x := x ;
14187: NOP4
14191: PUSH
14192: NOP4
14196: ST_TO_ADDR
// _y := y ;
14197: NOP4
14201: PUSH
14202: NOP4
14206: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
14207: NOP4
14211: PUSH
14212: LD_INT 1
14214: PPUSH
14215: NOP4
14219: PPUSH
14220: NOP4
14224: ST_TO_ADDR
// case i of 1 :
14225: NOP4
14229: PUSH
14230: LD_INT 1
14232: DOUBLE
14233: EQUAL
14234: IFTRUE 14238
14236: GO 14255
14238: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
14239: NOP4
14243: PPUSH
14244: NOP4
14248: PPUSH
14249: NOP4
14253: GO 14316
14255: LD_INT 2
14257: DOUBLE
14258: EQUAL
14259: IFTRUE 14263
14261: GO 14285
14263: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
14264: NOP4
14268: PPUSH
14269: NOP4
14273: PPUSH
14274: NOP4
14278: PPUSH
14279: NOP4
14283: GO 14316
14285: LD_INT 3
14287: DOUBLE
14288: EQUAL
14289: IFTRUE 14293
14291: GO 14315
14293: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
14294: NOP4
14298: PPUSH
14299: NOP4
14303: PPUSH
14304: NOP4
14308: PPUSH
14309: NOP4
14313: GO 14316
14315: POP
// end ;
14316: LD_VAR 0 2
14320: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
14321: LD_INT 0
14323: PPUSH
14324: PPUSH
14325: PPUSH
14326: PPUSH
14327: PPUSH
14328: PPUSH
// if not unit or not building then
14329: NOP4
14333: NOT
14334: PUSH
14335: NOP4
14339: NOT
14340: OR
14341: IFFALSE 14345
// exit ;
14343: GO 14503
// x := GetX ( building ) ;
14345: NOP4
14349: PUSH
14350: NOP4
14354: PPUSH
14355: NOP4
14359: ST_TO_ADDR
// y := GetY ( building ) ;
14360: NOP4
14364: PUSH
14365: NOP4
14369: PPUSH
14370: NOP4
14374: ST_TO_ADDR
// for i = 0 to 5 do
14375: NOP4
14379: PUSH
14380: DOUBLE
14381: LD_INT 0
14383: DEC
14384: ST_TO_ADDR
14385: LD_INT 5
14387: PUSH
14388: FOR_TO
14389: IFFALSE 14501
// begin _x := ShiftX ( x , i , 3 ) ;
14391: NOP4
14395: PUSH
14396: NOP4
14400: PPUSH
14401: NOP4
14405: PPUSH
14406: LD_INT 3
14408: PPUSH
14409: NOP4
14413: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
14414: NOP4
14418: PUSH
14419: NOP4
14423: PPUSH
14424: NOP4
14428: PPUSH
14429: LD_INT 3
14431: PPUSH
14432: NOP4
14436: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
14437: NOP4
14441: PPUSH
14442: NOP4
14446: PPUSH
14447: NOP4
14451: NOT
14452: IFFALSE 14456
// continue ;
14454: GO 14388
// if HexInfo ( _x , _y ) = 0 then
14456: NOP4
14460: PPUSH
14461: NOP4
14465: PPUSH
14466: NOP4
14470: PUSH
14471: LD_INT 0
14473: EQUAL
14474: IFFALSE 14499
// begin ComMoveXY ( unit , _x , _y ) ;
14476: NOP4
14480: PPUSH
14481: NOP4
14485: PPUSH
14486: NOP4
14490: PPUSH
14491: NOP4
// exit ;
14495: POP
14496: POP
14497: GO 14503
// end ; end ;
14499: GO 14388
14501: POP
14502: POP
// end ;
14503: LD_VAR 0 3
14507: RET
// export function ScanBase ( side , base_area ) ; begin
14508: LD_INT 0
14510: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
14511: NOP4
14515: PUSH
14516: NOP4
14520: PPUSH
14521: LD_INT 81
14523: PUSH
14524: NOP4
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PPUSH
14533: NOP4
14537: ST_TO_ADDR
// end ;
14538: LD_VAR 0 3
14542: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
14543: LD_INT 0
14545: PPUSH
14546: PPUSH
14547: PPUSH
14548: PPUSH
// result := false ;
14549: NOP4
14553: PUSH
14554: LD_INT 0
14556: ST_TO_ADDR
// side := GetSide ( unit ) ;
14557: NOP4
14561: PUSH
14562: NOP4
14566: PPUSH
14567: NOP4
14571: ST_TO_ADDR
// nat := GetNation ( unit ) ;
14572: NOP4
14576: PUSH
14577: NOP4
14581: PPUSH
14582: NOP4
14586: ST_TO_ADDR
// case nat of 1 :
14587: NOP4
14591: PUSH
14592: LD_INT 1
14594: DOUBLE
14595: EQUAL
14596: IFTRUE 14600
14598: GO 14611
14600: POP
// tech := tech_lassight ; 2 :
14601: NOP4
14605: PUSH
14606: LD_INT 12
14608: ST_TO_ADDR
14609: GO 14650
14611: LD_INT 2
14613: DOUBLE
14614: EQUAL
14615: IFTRUE 14619
14617: GO 14630
14619: POP
// tech := tech_mortar ; 3 :
14620: NOP4
14624: PUSH
14625: LD_INT 41
14627: ST_TO_ADDR
14628: GO 14650
14630: LD_INT 3
14632: DOUBLE
14633: EQUAL
14634: IFTRUE 14638
14636: GO 14649
14638: POP
// tech := tech_bazooka ; end ;
14639: NOP4
14643: PUSH
14644: LD_INT 44
14646: ST_TO_ADDR
14647: GO 14650
14649: POP
// if Researched ( side , tech ) then
14650: NOP4
14654: PPUSH
14655: NOP4
14659: PPUSH
14660: NOP4
14664: IFFALSE 14691
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
14666: NOP4
14670: PUSH
14671: LD_INT 5
14673: PUSH
14674: LD_INT 8
14676: PUSH
14677: LD_INT 9
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: PUSH
14685: NOP4
14689: ARRAY
14690: ST_TO_ADDR
// end ;
14691: LD_VAR 0 2
14695: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
14696: LD_INT 0
14698: PPUSH
14699: PPUSH
14700: PPUSH
// if not mines then
14701: NOP4
14705: NOT
14706: IFFALSE 14710
// exit ;
14708: GO 14854
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14710: NOP4
14714: PUSH
14715: LD_INT 81
14717: PUSH
14718: NOP4
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: LD_INT 21
14732: PUSH
14733: LD_INT 3
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PPUSH
14748: NOP4
14752: ST_TO_ADDR
// for i in mines do
14753: NOP4
14757: PUSH
14758: NOP4
14762: PUSH
14763: FOR_IN
14764: IFFALSE 14852
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
14766: NOP4
14770: PUSH
14771: LD_INT 1
14773: ARRAY
14774: PPUSH
14775: NOP4
14779: PUSH
14780: LD_INT 2
14782: ARRAY
14783: PPUSH
14784: NOP4
14788: NOT
14789: IFFALSE 14793
// continue ;
14791: GO 14763
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
14793: NOP4
14797: PUSH
14798: LD_INT 1
14800: ARRAY
14801: PPUSH
14802: NOP4
14806: PUSH
14807: LD_INT 2
14809: ARRAY
14810: PPUSH
14811: NOP4
14815: PUSH
14816: NOP4
14820: IN
14821: IFFALSE 14850
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
14823: NOP4
14827: PUSH
14828: LD_INT 1
14830: ARRAY
14831: PPUSH
14832: NOP4
14836: PUSH
14837: LD_INT 2
14839: ARRAY
14840: PPUSH
14841: NOP4
14845: PPUSH
14846: NOP4
// end ;
14850: GO 14763
14852: POP
14853: POP
// end ;
14854: LD_VAR 0 3
14858: RET
// export function Count ( array ) ; var i ; begin
14859: LD_INT 0
14861: PPUSH
14862: PPUSH
// result := 0 ;
14863: NOP4
14867: PUSH
14868: LD_INT 0
14870: ST_TO_ADDR
// for i in array do
14871: NOP4
14875: PUSH
14876: NOP4
14880: PUSH
14881: FOR_IN
14882: IFFALSE 14906
// if i then
14884: NOP4
14888: IFFALSE 14904
// result := result + 1 ;
14890: NOP4
14894: PUSH
14895: NOP4
14899: PUSH
14900: LD_INT 1
14902: PLUS
14903: ST_TO_ADDR
14904: GO 14881
14906: POP
14907: POP
// end ;
14908: LD_VAR 0 2
14912: RET
// export function IsEmpty ( building ) ; begin
14913: LD_INT 0
14915: PPUSH
// if not building then
14916: NOP4
14920: NOT
14921: IFFALSE 14925
// exit ;
14923: GO 14968
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
14925: NOP4
14929: PUSH
14930: NOP4
14934: PUSH
14935: LD_INT 22
14937: PUSH
14938: NOP4
14942: PPUSH
14943: NOP4
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: LD_INT 58
14954: PUSH
14955: EMPTY
14956: LIST
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PPUSH
14962: NOP4
14966: IN
14967: ST_TO_ADDR
// end ;
14968: LD_VAR 0 2
14972: RET
// export function IsNotFull ( building ) ; begin
14973: LD_INT 0
14975: PPUSH
// if not building then
14976: NOP4
14980: NOT
14981: IFFALSE 14985
// exit ;
14983: GO 15004
// result := UnitsInside ( building ) < 6 ;
14985: NOP4
14989: PUSH
14990: NOP4
14994: PPUSH
14995: NOP4
14999: PUSH
15000: LD_INT 6
15002: LESS
15003: ST_TO_ADDR
// end ;
15004: LD_VAR 0 2
15008: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
15009: LD_INT 0
15011: PPUSH
15012: PPUSH
15013: PPUSH
15014: PPUSH
// tmp := [ ] ;
15015: NOP4
15019: PUSH
15020: EMPTY
15021: ST_TO_ADDR
// list := [ ] ;
15022: NOP4
15026: PUSH
15027: EMPTY
15028: ST_TO_ADDR
// for i = 16 to 25 do
15029: NOP4
15033: PUSH
15034: DOUBLE
15035: LD_INT 16
15037: DEC
15038: ST_TO_ADDR
15039: LD_INT 25
15041: PUSH
15042: FOR_TO
15043: IFFALSE 15116
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
15045: NOP4
15049: PUSH
15050: NOP4
15054: PUSH
15055: LD_INT 22
15057: PUSH
15058: NOP4
15062: PPUSH
15063: NOP4
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: LD_INT 91
15074: PUSH
15075: NOP4
15079: PUSH
15080: LD_INT 6
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 30
15090: PUSH
15091: NOP4
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: PPUSH
15108: NOP4
15112: ADD
15113: ST_TO_ADDR
15114: GO 15042
15116: POP
15117: POP
// for i = 1 to tmp do
15118: NOP4
15122: PUSH
15123: DOUBLE
15124: LD_INT 1
15126: DEC
15127: ST_TO_ADDR
15128: NOP4
15132: PUSH
15133: FOR_TO
15134: IFFALSE 15222
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
15136: NOP4
15140: PUSH
15141: NOP4
15145: PUSH
15146: NOP4
15150: PUSH
15151: NOP4
15155: ARRAY
15156: PPUSH
15157: NOP4
15161: PUSH
15162: NOP4
15166: PUSH
15167: NOP4
15171: ARRAY
15172: PPUSH
15173: NOP4
15177: PUSH
15178: NOP4
15182: PUSH
15183: NOP4
15187: ARRAY
15188: PPUSH
15189: NOP4
15193: PUSH
15194: NOP4
15198: PUSH
15199: NOP4
15203: ARRAY
15204: PPUSH
15205: NOP4
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: PUSH
15216: EMPTY
15217: LIST
15218: ADD
15219: ST_TO_ADDR
15220: GO 15133
15222: POP
15223: POP
// result := list ;
15224: NOP4
15228: PUSH
15229: NOP4
15233: ST_TO_ADDR
// end ;
15234: LD_VAR 0 2
15238: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
15239: LD_INT 0
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
15247: PPUSH
// if not factory then
15248: NOP4
15252: NOT
15253: IFFALSE 15257
// exit ;
15255: GO 15850
// if control = control_apeman then
15257: NOP4
15261: PUSH
15262: LD_INT 5
15264: EQUAL
15265: IFFALSE 15374
// begin tmp := UnitsInside ( factory ) ;
15267: NOP4
15271: PUSH
15272: NOP4
15276: PPUSH
15277: NOP4
15281: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
15282: NOP4
15286: PPUSH
15287: LD_INT 25
15289: PUSH
15290: LD_INT 12
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PPUSH
15297: NOP4
15301: NOT
15302: IFFALSE 15312
// control := control_manual ;
15304: NOP4
15308: PUSH
15309: LD_INT 1
15311: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
15312: NOP4
15316: PUSH
15317: NOP4
15321: PPUSH
15322: NOP4
15326: ST_TO_ADDR
// if tmp then
15327: NOP4
15331: IFFALSE 15374
// begin for i in tmp do
15333: NOP4
15337: PUSH
15338: NOP4
15342: PUSH
15343: FOR_IN
15344: IFFALSE 15372
// if i [ 1 ] = b_ext_radio then
15346: NOP4
15350: PUSH
15351: LD_INT 1
15353: ARRAY
15354: PUSH
15355: LD_INT 22
15357: EQUAL
15358: IFFALSE 15370
// begin control := control_remote ;
15360: NOP4
15364: PUSH
15365: LD_INT 2
15367: ST_TO_ADDR
// break ;
15368: GO 15372
// end ;
15370: GO 15343
15372: POP
15373: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15374: NOP4
15378: PPUSH
15379: NOP4
15383: PPUSH
15384: NOP4
15388: PPUSH
15389: NOP4
15393: PPUSH
15394: NOP4
15398: PPUSH
15399: NOP4
15403: IFFALSE 15438
// begin result := [ chassis , engine , control , weapon ] ;
15405: NOP4
15409: PUSH
15410: NOP4
15414: PUSH
15415: NOP4
15419: PUSH
15420: NOP4
15424: PUSH
15425: NOP4
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: ST_TO_ADDR
// exit ;
15436: GO 15850
// end ; _chassis := AvailableChassisList ( factory ) ;
15438: NOP4
15442: PUSH
15443: NOP4
15447: PPUSH
15448: NOP4
15452: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
15453: NOP4
15457: PUSH
15458: NOP4
15462: PPUSH
15463: NOP4
15467: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
15468: NOP4
15472: PUSH
15473: NOP4
15477: PPUSH
15478: NOP4
15482: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
15483: NOP4
15487: PUSH
15488: NOP4
15492: PPUSH
15493: NOP4
15497: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
15498: NOP4
15502: NOT
15503: PUSH
15504: NOP4
15508: NOT
15509: OR
15510: PUSH
15511: NOP4
15515: NOT
15516: OR
15517: PUSH
15518: NOP4
15522: NOT
15523: OR
15524: IFFALSE 15559
// begin result := [ chassis , engine , control , weapon ] ;
15526: NOP4
15530: PUSH
15531: NOP4
15535: PUSH
15536: NOP4
15540: PUSH
15541: NOP4
15545: PUSH
15546: NOP4
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: ST_TO_ADDR
// exit ;
15557: GO 15850
// end ; if not chassis in _chassis then
15559: NOP4
15563: PUSH
15564: NOP4
15568: IN
15569: NOT
15570: IFFALSE 15596
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
15572: NOP4
15576: PUSH
15577: NOP4
15581: PUSH
15582: LD_INT 1
15584: PPUSH
15585: NOP4
15589: PPUSH
15590: NOP4
15594: ARRAY
15595: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
15596: NOP4
15600: PPUSH
15601: NOP4
15605: PPUSH
15606: NOP4
15610: NOT
15611: IFFALSE 15670
// repeat engine := _engine [ 1 ] ;
15613: NOP4
15617: PUSH
15618: NOP4
15622: PUSH
15623: LD_INT 1
15625: ARRAY
15626: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
15627: NOP4
15631: PUSH
15632: NOP4
15636: PPUSH
15637: LD_INT 1
15639: PPUSH
15640: NOP4
15644: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
15645: NOP4
15649: PPUSH
15650: NOP4
15654: PPUSH
15655: NOP4
15659: PUSH
15660: NOP4
15664: PUSH
15665: EMPTY
15666: EQUAL
15667: OR
15668: IFFALSE 15613
// if not control in _control then
15670: NOP4
15674: PUSH
15675: NOP4
15679: IN
15680: NOT
15681: IFFALSE 15707
// control := _control [ rand ( 1 , _control ) ] ;
15683: NOP4
15687: PUSH
15688: NOP4
15692: PUSH
15693: LD_INT 1
15695: PPUSH
15696: NOP4
15700: PPUSH
15701: NOP4
15705: ARRAY
15706: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
15707: NOP4
15711: PPUSH
15712: NOP4
15716: PPUSH
15717: NOP4
15721: NOT
15722: IFFALSE 15781
// repeat weapon := _weapon [ 1 ] ;
15724: NOP4
15728: PUSH
15729: NOP4
15733: PUSH
15734: LD_INT 1
15736: ARRAY
15737: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
15738: NOP4
15742: PUSH
15743: NOP4
15747: PPUSH
15748: LD_INT 1
15750: PPUSH
15751: NOP4
15755: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
15756: NOP4
15760: PPUSH
15761: NOP4
15765: PPUSH
15766: NOP4
15770: PUSH
15771: NOP4
15775: PUSH
15776: EMPTY
15777: EQUAL
15778: OR
15779: IFFALSE 15724
// result := [ ] ;
15781: NOP4
15785: PUSH
15786: EMPTY
15787: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
15788: NOP4
15792: PPUSH
15793: NOP4
15797: PPUSH
15798: NOP4
15802: PPUSH
15803: NOP4
15807: PPUSH
15808: NOP4
15812: PPUSH
15813: NOP4
15817: IFFALSE 15850
// result := [ chassis , engine , control , weapon ] ;
15819: NOP4
15823: PUSH
15824: NOP4
15828: PUSH
15829: NOP4
15833: PUSH
15834: NOP4
15838: PUSH
15839: NOP4
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: ST_TO_ADDR
// end ;
15850: LD_VAR 0 6
15854: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
15855: LD_INT 0
15857: PPUSH
// if not chassis or not engine then
15858: NOP4
15862: NOT
15863: PUSH
15864: NOP4
15868: NOT
15869: OR
15870: IFFALSE 15874
// exit ;
15872: GO 16070
// case engine of engine_solar :
15874: NOP4
15878: PUSH
15879: LD_INT 2
15881: DOUBLE
15882: EQUAL
15883: IFTRUE 15887
15885: GO 15925
15887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
15888: NOP4
15892: PUSH
15893: LD_INT 11
15895: PUSH
15896: LD_INT 12
15898: PUSH
15899: LD_INT 13
15901: PUSH
15902: LD_INT 14
15904: PUSH
15905: LD_INT 1
15907: PUSH
15908: LD_INT 2
15910: PUSH
15911: LD_INT 3
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: ST_TO_ADDR
15923: GO 16054
15925: LD_INT 1
15927: DOUBLE
15928: EQUAL
15929: IFTRUE 15933
15931: GO 15995
15933: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
15934: NOP4
15938: PUSH
15939: LD_INT 11
15941: PUSH
15942: LD_INT 12
15944: PUSH
15945: LD_INT 13
15947: PUSH
15948: LD_INT 14
15950: PUSH
15951: LD_INT 1
15953: PUSH
15954: LD_INT 2
15956: PUSH
15957: LD_INT 3
15959: PUSH
15960: LD_INT 4
15962: PUSH
15963: LD_INT 5
15965: PUSH
15966: LD_INT 21
15968: PUSH
15969: LD_INT 23
15971: PUSH
15972: LD_INT 22
15974: PUSH
15975: LD_INT 24
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: ST_TO_ADDR
15993: GO 16054
15995: LD_INT 3
15997: DOUBLE
15998: EQUAL
15999: IFTRUE 16003
16001: GO 16053
16003: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
16004: NOP4
16008: PUSH
16009: LD_INT 13
16011: PUSH
16012: LD_INT 14
16014: PUSH
16015: LD_INT 2
16017: PUSH
16018: LD_INT 3
16020: PUSH
16021: LD_INT 4
16023: PUSH
16024: LD_INT 5
16026: PUSH
16027: LD_INT 21
16029: PUSH
16030: LD_INT 22
16032: PUSH
16033: LD_INT 23
16035: PUSH
16036: LD_INT 24
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: ST_TO_ADDR
16051: GO 16054
16053: POP
// result := ( chassis in result ) ;
16054: NOP4
16058: PUSH
16059: NOP4
16063: PUSH
16064: NOP4
16068: IN
16069: ST_TO_ADDR
// end ;
16070: LD_VAR 0 3
16074: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
16075: LD_INT 0
16077: PPUSH
// if not chassis or not weapon then
16078: NOP4
16082: NOT
16083: PUSH
16084: NOP4
16088: NOT
16089: OR
16090: IFFALSE 16094
// exit ;
16092: GO 17156
// case weapon of us_machine_gun :
16094: NOP4
16098: PUSH
16099: LD_INT 2
16101: DOUBLE
16102: EQUAL
16103: IFTRUE 16107
16105: GO 16137
16107: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
16108: NOP4
16112: PUSH
16113: LD_INT 1
16115: PUSH
16116: LD_INT 2
16118: PUSH
16119: LD_INT 3
16121: PUSH
16122: LD_INT 4
16124: PUSH
16125: LD_INT 5
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: ST_TO_ADDR
16135: GO 17140
16137: LD_INT 3
16139: DOUBLE
16140: EQUAL
16141: IFTRUE 16145
16143: GO 16175
16145: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
16146: NOP4
16150: PUSH
16151: LD_INT 1
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: LD_INT 3
16159: PUSH
16160: LD_INT 4
16162: PUSH
16163: LD_INT 5
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: ST_TO_ADDR
16173: GO 17140
16175: LD_INT 11
16177: DOUBLE
16178: EQUAL
16179: IFTRUE 16183
16181: GO 16213
16183: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
16184: NOP4
16188: PUSH
16189: LD_INT 1
16191: PUSH
16192: LD_INT 2
16194: PUSH
16195: LD_INT 3
16197: PUSH
16198: LD_INT 4
16200: PUSH
16201: LD_INT 5
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: ST_TO_ADDR
16211: GO 17140
16213: LD_INT 4
16215: DOUBLE
16216: EQUAL
16217: IFTRUE 16221
16219: GO 16247
16221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
16222: NOP4
16226: PUSH
16227: LD_INT 2
16229: PUSH
16230: LD_INT 3
16232: PUSH
16233: LD_INT 4
16235: PUSH
16236: LD_INT 5
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: ST_TO_ADDR
16245: GO 17140
16247: LD_INT 5
16249: DOUBLE
16250: EQUAL
16251: IFTRUE 16255
16253: GO 16281
16255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
16256: NOP4
16260: PUSH
16261: LD_INT 2
16263: PUSH
16264: LD_INT 3
16266: PUSH
16267: LD_INT 4
16269: PUSH
16270: LD_INT 5
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: ST_TO_ADDR
16279: GO 17140
16281: LD_INT 9
16283: DOUBLE
16284: EQUAL
16285: IFTRUE 16289
16287: GO 16315
16289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
16290: NOP4
16294: PUSH
16295: LD_INT 2
16297: PUSH
16298: LD_INT 3
16300: PUSH
16301: LD_INT 4
16303: PUSH
16304: LD_INT 5
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: ST_TO_ADDR
16313: GO 17140
16315: LD_INT 7
16317: DOUBLE
16318: EQUAL
16319: IFTRUE 16323
16321: GO 16349
16323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
16324: NOP4
16328: PUSH
16329: LD_INT 2
16331: PUSH
16332: LD_INT 3
16334: PUSH
16335: LD_INT 4
16337: PUSH
16338: LD_INT 5
16340: PUSH
16341: EMPTY
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: ST_TO_ADDR
16347: GO 17140
16349: LD_INT 12
16351: DOUBLE
16352: EQUAL
16353: IFTRUE 16357
16355: GO 16383
16357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
16358: NOP4
16362: PUSH
16363: LD_INT 2
16365: PUSH
16366: LD_INT 3
16368: PUSH
16369: LD_INT 4
16371: PUSH
16372: LD_INT 5
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: ST_TO_ADDR
16381: GO 17140
16383: LD_INT 13
16385: DOUBLE
16386: EQUAL
16387: IFTRUE 16391
16389: GO 16417
16391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
16392: NOP4
16396: PUSH
16397: LD_INT 2
16399: PUSH
16400: LD_INT 3
16402: PUSH
16403: LD_INT 4
16405: PUSH
16406: LD_INT 5
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: ST_TO_ADDR
16415: GO 17140
16417: LD_INT 14
16419: DOUBLE
16420: EQUAL
16421: IFTRUE 16425
16423: GO 16443
16425: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
16426: NOP4
16430: PUSH
16431: LD_INT 4
16433: PUSH
16434: LD_INT 5
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: ST_TO_ADDR
16441: GO 17140
16443: LD_INT 6
16445: DOUBLE
16446: EQUAL
16447: IFTRUE 16451
16449: GO 16469
16451: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
16452: NOP4
16456: PUSH
16457: LD_INT 4
16459: PUSH
16460: LD_INT 5
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: ST_TO_ADDR
16467: GO 17140
16469: LD_INT 10
16471: DOUBLE
16472: EQUAL
16473: IFTRUE 16477
16475: GO 16495
16477: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
16478: NOP4
16482: PUSH
16483: LD_INT 4
16485: PUSH
16486: LD_INT 5
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: ST_TO_ADDR
16493: GO 17140
16495: LD_INT 22
16497: DOUBLE
16498: EQUAL
16499: IFTRUE 16503
16501: GO 16529
16503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
16504: NOP4
16508: PUSH
16509: LD_INT 11
16511: PUSH
16512: LD_INT 12
16514: PUSH
16515: LD_INT 13
16517: PUSH
16518: LD_INT 14
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: ST_TO_ADDR
16527: GO 17140
16529: LD_INT 23
16531: DOUBLE
16532: EQUAL
16533: IFTRUE 16537
16535: GO 16563
16537: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
16538: NOP4
16542: PUSH
16543: LD_INT 11
16545: PUSH
16546: LD_INT 12
16548: PUSH
16549: LD_INT 13
16551: PUSH
16552: LD_INT 14
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: ST_TO_ADDR
16561: GO 17140
16563: LD_INT 24
16565: DOUBLE
16566: EQUAL
16567: IFTRUE 16571
16569: GO 16597
16571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
16572: NOP4
16576: PUSH
16577: LD_INT 11
16579: PUSH
16580: LD_INT 12
16582: PUSH
16583: LD_INT 13
16585: PUSH
16586: LD_INT 14
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: ST_TO_ADDR
16595: GO 17140
16597: LD_INT 30
16599: DOUBLE
16600: EQUAL
16601: IFTRUE 16605
16603: GO 16631
16605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
16606: NOP4
16610: PUSH
16611: LD_INT 11
16613: PUSH
16614: LD_INT 12
16616: PUSH
16617: LD_INT 13
16619: PUSH
16620: LD_INT 14
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: ST_TO_ADDR
16629: GO 17140
16631: LD_INT 25
16633: DOUBLE
16634: EQUAL
16635: IFTRUE 16639
16637: GO 16657
16639: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
16640: NOP4
16644: PUSH
16645: LD_INT 13
16647: PUSH
16648: LD_INT 14
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: ST_TO_ADDR
16655: GO 17140
16657: LD_INT 27
16659: DOUBLE
16660: EQUAL
16661: IFTRUE 16665
16663: GO 16683
16665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
16666: NOP4
16670: PUSH
16671: LD_INT 13
16673: PUSH
16674: LD_INT 14
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: ST_TO_ADDR
16681: GO 17140
16683: NOP4
16687: DOUBLE
16688: EQUAL
16689: IFTRUE 16693
16691: GO 16719
16693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
16694: NOP4
16698: PUSH
16699: LD_INT 11
16701: PUSH
16702: LD_INT 12
16704: PUSH
16705: LD_INT 13
16707: PUSH
16708: LD_INT 14
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: ST_TO_ADDR
16717: GO 17140
16719: LD_INT 28
16721: DOUBLE
16722: EQUAL
16723: IFTRUE 16727
16725: GO 16745
16727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
16728: NOP4
16732: PUSH
16733: LD_INT 13
16735: PUSH
16736: LD_INT 14
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: ST_TO_ADDR
16743: GO 17140
16745: LD_INT 29
16747: DOUBLE
16748: EQUAL
16749: IFTRUE 16753
16751: GO 16771
16753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
16754: NOP4
16758: PUSH
16759: LD_INT 13
16761: PUSH
16762: LD_INT 14
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: ST_TO_ADDR
16769: GO 17140
16771: LD_INT 31
16773: DOUBLE
16774: EQUAL
16775: IFTRUE 16779
16777: GO 16797
16779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
16780: NOP4
16784: PUSH
16785: LD_INT 13
16787: PUSH
16788: LD_INT 14
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: ST_TO_ADDR
16795: GO 17140
16797: LD_INT 26
16799: DOUBLE
16800: EQUAL
16801: IFTRUE 16805
16803: GO 16823
16805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
16806: NOP4
16810: PUSH
16811: LD_INT 13
16813: PUSH
16814: LD_INT 14
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: ST_TO_ADDR
16821: GO 17140
16823: LD_INT 42
16825: DOUBLE
16826: EQUAL
16827: IFTRUE 16831
16829: GO 16857
16831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
16832: NOP4
16836: PUSH
16837: LD_INT 21
16839: PUSH
16840: LD_INT 22
16842: PUSH
16843: LD_INT 23
16845: PUSH
16846: LD_INT 24
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: ST_TO_ADDR
16855: GO 17140
16857: LD_INT 43
16859: DOUBLE
16860: EQUAL
16861: IFTRUE 16865
16863: GO 16891
16865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
16866: NOP4
16870: PUSH
16871: LD_INT 21
16873: PUSH
16874: LD_INT 22
16876: PUSH
16877: LD_INT 23
16879: PUSH
16880: LD_INT 24
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: ST_TO_ADDR
16889: GO 17140
16891: LD_INT 44
16893: DOUBLE
16894: EQUAL
16895: IFTRUE 16899
16897: GO 16925
16899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
16900: NOP4
16904: PUSH
16905: LD_INT 21
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_INT 23
16913: PUSH
16914: LD_INT 24
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: ST_TO_ADDR
16923: GO 17140
16925: LD_INT 45
16927: DOUBLE
16928: EQUAL
16929: IFTRUE 16933
16931: GO 16959
16933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
16934: NOP4
16938: PUSH
16939: LD_INT 21
16941: PUSH
16942: LD_INT 22
16944: PUSH
16945: LD_INT 23
16947: PUSH
16948: LD_INT 24
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: ST_TO_ADDR
16957: GO 17140
16959: LD_INT 49
16961: DOUBLE
16962: EQUAL
16963: IFTRUE 16967
16965: GO 16993
16967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
16968: NOP4
16972: PUSH
16973: LD_INT 21
16975: PUSH
16976: LD_INT 22
16978: PUSH
16979: LD_INT 23
16981: PUSH
16982: LD_INT 24
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: ST_TO_ADDR
16991: GO 17140
16993: LD_INT 51
16995: DOUBLE
16996: EQUAL
16997: IFTRUE 17001
16999: GO 17027
17001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
17002: NOP4
17006: PUSH
17007: LD_INT 21
17009: PUSH
17010: LD_INT 22
17012: PUSH
17013: LD_INT 23
17015: PUSH
17016: LD_INT 24
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: ST_TO_ADDR
17025: GO 17140
17027: LD_INT 52
17029: DOUBLE
17030: EQUAL
17031: IFTRUE 17035
17033: GO 17061
17035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
17036: NOP4
17040: PUSH
17041: LD_INT 21
17043: PUSH
17044: LD_INT 22
17046: PUSH
17047: LD_INT 23
17049: PUSH
17050: LD_INT 24
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: ST_TO_ADDR
17059: GO 17140
17061: LD_INT 53
17063: DOUBLE
17064: EQUAL
17065: IFTRUE 17069
17067: GO 17087
17069: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
17070: NOP4
17074: PUSH
17075: LD_INT 23
17077: PUSH
17078: LD_INT 24
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: ST_TO_ADDR
17085: GO 17140
17087: LD_INT 46
17089: DOUBLE
17090: EQUAL
17091: IFTRUE 17095
17093: GO 17113
17095: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
17096: NOP4
17100: PUSH
17101: LD_INT 23
17103: PUSH
17104: LD_INT 24
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: ST_TO_ADDR
17111: GO 17140
17113: LD_INT 47
17115: DOUBLE
17116: EQUAL
17117: IFTRUE 17121
17119: GO 17139
17121: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17122: NOP4
17126: PUSH
17127: LD_INT 23
17129: PUSH
17130: LD_INT 24
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: ST_TO_ADDR
17137: GO 17140
17139: POP
// result := ( chassis in result ) ;
17140: NOP4
17144: PUSH
17145: NOP4
17149: PUSH
17150: NOP4
17154: IN
17155: ST_TO_ADDR
// end ;
17156: LD_VAR 0 3
17160: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
17161: LD_INT 0
17163: PPUSH
17164: PPUSH
17165: PPUSH
17166: PPUSH
17167: PPUSH
17168: PPUSH
17169: PPUSH
// result := array ;
17170: NOP4
17174: PUSH
17175: NOP4
17179: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
17180: NOP4
17184: NOT
17185: PUSH
17186: NOP4
17190: NOT
17191: OR
17192: PUSH
17193: NOP4
17197: NOT
17198: OR
17199: PUSH
17200: NOP4
17204: PUSH
17205: NOP4
17209: GREATER
17210: OR
17211: PUSH
17212: NOP4
17216: PUSH
17217: NOP4
17221: GREATER
17222: OR
17223: IFFALSE 17227
// exit ;
17225: GO 17523
// if direction then
17227: NOP4
17231: IFFALSE 17295
// begin d := 1 ;
17233: NOP4
17237: PUSH
17238: LD_INT 1
17240: ST_TO_ADDR
// if i_from > i_to then
17241: NOP4
17245: PUSH
17246: NOP4
17250: GREATER
17251: IFFALSE 17277
// length := ( array - i_from ) + i_to else
17253: NOP4
17257: PUSH
17258: NOP4
17262: PUSH
17263: NOP4
17267: MINUS
17268: PUSH
17269: NOP4
17273: PLUS
17274: ST_TO_ADDR
17275: GO 17293
// length := i_to - i_from ;
17277: NOP4
17281: PUSH
17282: NOP4
17286: PUSH
17287: NOP4
17291: MINUS
17292: ST_TO_ADDR
// end else
17293: GO 17356
// begin d := - 1 ;
17295: NOP4
17299: PUSH
17300: LD_INT 1
17302: NEG
17303: ST_TO_ADDR
// if i_from > i_to then
17304: NOP4
17308: PUSH
17309: NOP4
17313: GREATER
17314: IFFALSE 17334
// length := i_from - i_to else
17316: NOP4
17320: PUSH
17321: NOP4
17325: PUSH
17326: NOP4
17330: MINUS
17331: ST_TO_ADDR
17332: GO 17356
// length := ( array - i_to ) + i_from ;
17334: NOP4
17338: PUSH
17339: NOP4
17343: PUSH
17344: NOP4
17348: MINUS
17349: PUSH
17350: NOP4
17354: PLUS
17355: ST_TO_ADDR
// end ; if not length then
17356: NOP4
17360: NOT
17361: IFFALSE 17365
// exit ;
17363: GO 17523
// tmp := array ;
17365: NOP4
17369: PUSH
17370: NOP4
17374: ST_TO_ADDR
// for i = 1 to length do
17375: NOP4
17379: PUSH
17380: DOUBLE
17381: LD_INT 1
17383: DEC
17384: ST_TO_ADDR
17385: NOP4
17389: PUSH
17390: FOR_TO
17391: IFFALSE 17511
// begin for j = 1 to array do
17393: NOP4
17397: PUSH
17398: DOUBLE
17399: LD_INT 1
17401: DEC
17402: ST_TO_ADDR
17403: NOP4
17407: PUSH
17408: FOR_TO
17409: IFFALSE 17497
// begin k := j + d ;
17411: NOP4
17415: PUSH
17416: NOP4
17420: PUSH
17421: NOP4
17425: PLUS
17426: ST_TO_ADDR
// if k > array then
17427: NOP4
17431: PUSH
17432: NOP4
17436: GREATER
17437: IFFALSE 17447
// k := 1 ;
17439: NOP4
17443: PUSH
17444: LD_INT 1
17446: ST_TO_ADDR
// if not k then
17447: NOP4
17451: NOT
17452: IFFALSE 17464
// k := array ;
17454: NOP4
17458: PUSH
17459: NOP4
17463: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
17464: NOP4
17468: PUSH
17469: NOP4
17473: PPUSH
17474: NOP4
17478: PPUSH
17479: NOP4
17483: PUSH
17484: NOP4
17488: ARRAY
17489: PPUSH
17490: NOP4
17494: ST_TO_ADDR
// end ;
17495: GO 17408
17497: POP
17498: POP
// array := tmp ;
17499: NOP4
17503: PUSH
17504: NOP4
17508: ST_TO_ADDR
// end ;
17509: GO 17390
17511: POP
17512: POP
// result := array ;
17513: NOP4
17517: PUSH
17518: NOP4
17522: ST_TO_ADDR
// end ;
17523: LD_VAR 0 5
17527: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
17528: LD_INT 0
17530: PPUSH
17531: PPUSH
// result := 0 ;
17532: NOP4
17536: PUSH
17537: LD_INT 0
17539: ST_TO_ADDR
// if not array or not value in array then
17540: NOP4
17544: NOT
17545: PUSH
17546: NOP4
17550: PUSH
17551: NOP4
17555: IN
17556: NOT
17557: OR
17558: IFFALSE 17562
// exit ;
17560: GO 17616
// for i = 1 to array do
17562: NOP4
17566: PUSH
17567: DOUBLE
17568: LD_INT 1
17570: DEC
17571: ST_TO_ADDR
17572: NOP4
17576: PUSH
17577: FOR_TO
17578: IFFALSE 17614
// if value = array [ i ] then
17580: NOP4
17584: PUSH
17585: NOP4
17589: PUSH
17590: NOP4
17594: ARRAY
17595: EQUAL
17596: IFFALSE 17612
// begin result := i ;
17598: NOP4
17602: PUSH
17603: NOP4
17607: ST_TO_ADDR
// exit ;
17608: POP
17609: POP
17610: GO 17616
// end ;
17612: GO 17577
17614: POP
17615: POP
// end ;
17616: LD_VAR 0 3
17620: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
17621: LD_INT 0
17623: PPUSH
// vc_chassis := chassis ;
17624: LD_ADDR_OWVAR 37
17628: PUSH
17629: NOP4
17633: ST_TO_ADDR
// vc_engine := engine ;
17634: LD_ADDR_OWVAR 39
17638: PUSH
17639: NOP4
17643: ST_TO_ADDR
// vc_control := control ;
17644: LD_ADDR_OWVAR 38
17648: PUSH
17649: NOP4
17653: ST_TO_ADDR
// vc_weapon := weapon ;
17654: LD_ADDR_OWVAR 40
17658: PUSH
17659: NOP4
17663: ST_TO_ADDR
// vc_fuel_battery := fuel ;
17664: LD_ADDR_OWVAR 41
17668: PUSH
17669: NOP4
17673: ST_TO_ADDR
// end ;
17674: LD_VAR 0 6
17678: RET
// export function WantPlant ( unit ) ; var task ; begin
17679: LD_INT 0
17681: PPUSH
17682: PPUSH
// result := false ;
17683: NOP4
17687: PUSH
17688: LD_INT 0
17690: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
17691: NOP4
17695: PUSH
17696: NOP4
17700: PPUSH
17701: NOP4
17705: ST_TO_ADDR
// if task then
17706: NOP4
17710: IFFALSE 17738
// if task [ 1 ] [ 1 ] = p then
17712: NOP4
17716: PUSH
17717: LD_INT 1
17719: ARRAY
17720: PUSH
17721: LD_INT 1
17723: ARRAY
17724: PUSH
17725: LD_STRING p
17727: EQUAL
17728: IFFALSE 17738
// result := true ;
17730: NOP4
17734: PUSH
17735: LD_INT 1
17737: ST_TO_ADDR
// end ;
17738: LD_VAR 0 2
17742: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
17743: LD_INT 0
17745: PPUSH
17746: PPUSH
17747: PPUSH
17748: PPUSH
// if pos < 1 then
17749: NOP4
17753: PUSH
17754: LD_INT 1
17756: LESS
17757: IFFALSE 17761
// exit ;
17759: GO 18064
// if pos = 1 then
17761: NOP4
17765: PUSH
17766: LD_INT 1
17768: EQUAL
17769: IFFALSE 17802
// result := Replace ( arr , pos [ 1 ] , value ) else
17771: NOP4
17775: PUSH
17776: NOP4
17780: PPUSH
17781: NOP4
17785: PUSH
17786: LD_INT 1
17788: ARRAY
17789: PPUSH
17790: NOP4
17794: PPUSH
17795: NOP4
17799: ST_TO_ADDR
17800: GO 18064
// begin tmp := arr ;
17802: NOP4
17806: PUSH
17807: NOP4
17811: ST_TO_ADDR
// s_arr := [ tmp ] ;
17812: NOP4
17816: PUSH
17817: NOP4
17821: PUSH
17822: EMPTY
17823: LIST
17824: ST_TO_ADDR
// for i = 1 to pos - 1 do
17825: NOP4
17829: PUSH
17830: DOUBLE
17831: LD_INT 1
17833: DEC
17834: ST_TO_ADDR
17835: NOP4
17839: PUSH
17840: LD_INT 1
17842: MINUS
17843: PUSH
17844: FOR_TO
17845: IFFALSE 17890
// begin tmp := tmp [ pos [ i ] ] ;
17847: NOP4
17851: PUSH
17852: NOP4
17856: PUSH
17857: NOP4
17861: PUSH
17862: NOP4
17866: ARRAY
17867: ARRAY
17868: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
17869: NOP4
17873: PUSH
17874: NOP4
17878: PUSH
17879: NOP4
17883: PUSH
17884: EMPTY
17885: LIST
17886: ADD
17887: ST_TO_ADDR
// end ;
17888: GO 17844
17890: POP
17891: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
17892: NOP4
17896: PUSH
17897: NOP4
17901: PPUSH
17902: NOP4
17906: PUSH
17907: NOP4
17911: ARRAY
17912: PPUSH
17913: NOP4
17917: PPUSH
17918: NOP4
17922: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
17923: NOP4
17927: PUSH
17928: NOP4
17932: PPUSH
17933: NOP4
17937: PPUSH
17938: NOP4
17942: PPUSH
17943: NOP4
17947: ST_TO_ADDR
// for i = s_arr downto 2 do
17948: NOP4
17952: PUSH
17953: DOUBLE
17954: NOP4
17958: INC
17959: ST_TO_ADDR
17960: LD_INT 2
17962: PUSH
17963: FOR_DOWNTO
17964: IFFALSE 18048
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
17966: NOP4
17970: PUSH
17971: NOP4
17975: PUSH
17976: NOP4
17980: PUSH
17981: LD_INT 1
17983: MINUS
17984: ARRAY
17985: PPUSH
17986: NOP4
17990: PUSH
17991: NOP4
17995: PUSH
17996: LD_INT 1
17998: MINUS
17999: ARRAY
18000: PPUSH
18001: NOP4
18005: PUSH
18006: NOP4
18010: ARRAY
18011: PPUSH
18012: NOP4
18016: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
18017: NOP4
18021: PUSH
18022: NOP4
18026: PPUSH
18027: NOP4
18031: PUSH
18032: LD_INT 1
18034: MINUS
18035: PPUSH
18036: NOP4
18040: PPUSH
18041: NOP4
18045: ST_TO_ADDR
// end ;
18046: GO 17963
18048: POP
18049: POP
// result := s_arr [ 1 ] ;
18050: NOP4
18054: PUSH
18055: NOP4
18059: PUSH
18060: LD_INT 1
18062: ARRAY
18063: ST_TO_ADDR
// end ; end ;
18064: LD_VAR 0 4
18068: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
18069: LD_INT 0
18071: PPUSH
18072: PPUSH
// if not list then
18073: NOP4
18077: NOT
18078: IFFALSE 18082
// exit ;
18080: GO 18173
// i := list [ pos1 ] ;
18082: NOP4
18086: PUSH
18087: NOP4
18091: PUSH
18092: NOP4
18096: ARRAY
18097: ST_TO_ADDR
// if not i then
18098: NOP4
18102: NOT
18103: IFFALSE 18107
// exit ;
18105: GO 18173
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
18107: NOP4
18111: PUSH
18112: NOP4
18116: PPUSH
18117: NOP4
18121: PPUSH
18122: NOP4
18126: PUSH
18127: NOP4
18131: ARRAY
18132: PPUSH
18133: NOP4
18137: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
18138: NOP4
18142: PUSH
18143: NOP4
18147: PPUSH
18148: NOP4
18152: PPUSH
18153: NOP4
18157: PPUSH
18158: NOP4
18162: ST_TO_ADDR
// result := list ;
18163: NOP4
18167: PUSH
18168: NOP4
18172: ST_TO_ADDR
// end ;
18173: LD_VAR 0 4
18177: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
18178: LD_INT 0
18180: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
18181: NOP4
18185: PUSH
18186: NOP4
18190: PPUSH
18191: NOP4
18195: PPUSH
18196: NOP4
18200: PPUSH
18201: NOP4
18205: PPUSH
18206: NOP4
18210: PPUSH
18211: NOP4
18215: PPUSH
18216: NOP4
18220: PPUSH
18221: NOP4
18225: ST_TO_ADDR
// end ;
18226: LD_VAR 0 5
18230: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
18231: LD_INT 0
18233: PPUSH
18234: PPUSH
18235: PPUSH
18236: PPUSH
// if not list then
18237: NOP4
18241: NOT
18242: IFFALSE 18246
// exit ;
18244: GO 18634
// result := [ ] ;
18246: NOP4
18250: PUSH
18251: EMPTY
18252: ST_TO_ADDR
// for i in list do
18253: NOP4
18257: PUSH
18258: NOP4
18262: PUSH
18263: FOR_IN
18264: IFFALSE 18466
// begin tmp := GetDistUnitXY ( i , x , y ) ;
18266: NOP4
18270: PUSH
18271: NOP4
18275: PPUSH
18276: NOP4
18280: PPUSH
18281: NOP4
18285: PPUSH
18286: NOP4
18290: ST_TO_ADDR
// if not result then
18291: NOP4
18295: NOT
18296: IFFALSE 18322
// result := [ [ i , tmp ] ] else
18298: NOP4
18302: PUSH
18303: NOP4
18307: PUSH
18308: NOP4
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: EMPTY
18318: LIST
18319: ST_TO_ADDR
18320: GO 18464
// begin if result [ result ] [ 2 ] < tmp then
18322: NOP4
18326: PUSH
18327: NOP4
18331: ARRAY
18332: PUSH
18333: LD_INT 2
18335: ARRAY
18336: PUSH
18337: NOP4
18341: LESS
18342: IFFALSE 18384
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
18344: NOP4
18348: PUSH
18349: NOP4
18353: PPUSH
18354: NOP4
18358: PUSH
18359: LD_INT 1
18361: PLUS
18362: PPUSH
18363: NOP4
18367: PUSH
18368: NOP4
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PPUSH
18377: NOP4
18381: ST_TO_ADDR
18382: GO 18464
// for j = 1 to result do
18384: NOP4
18388: PUSH
18389: DOUBLE
18390: LD_INT 1
18392: DEC
18393: ST_TO_ADDR
18394: NOP4
18398: PUSH
18399: FOR_TO
18400: IFFALSE 18462
// begin if tmp < result [ j ] [ 2 ] then
18402: NOP4
18406: PUSH
18407: NOP4
18411: PUSH
18412: NOP4
18416: ARRAY
18417: PUSH
18418: LD_INT 2
18420: ARRAY
18421: LESS
18422: IFFALSE 18460
// begin result := Insert ( result , j , [ i , tmp ] ) ;
18424: NOP4
18428: PUSH
18429: NOP4
18433: PPUSH
18434: NOP4
18438: PPUSH
18439: NOP4
18443: PUSH
18444: NOP4
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PPUSH
18453: NOP4
18457: ST_TO_ADDR
// break ;
18458: GO 18462
// end ; end ;
18460: GO 18399
18462: POP
18463: POP
// end ; end ;
18464: GO 18263
18466: POP
18467: POP
// if result and not asc then
18468: NOP4
18472: PUSH
18473: NOP4
18477: NOT
18478: AND
18479: IFFALSE 18554
// begin tmp := result ;
18481: NOP4
18485: PUSH
18486: NOP4
18490: ST_TO_ADDR
// for i = tmp downto 1 do
18491: NOP4
18495: PUSH
18496: DOUBLE
18497: NOP4
18501: INC
18502: ST_TO_ADDR
18503: LD_INT 1
18505: PUSH
18506: FOR_DOWNTO
18507: IFFALSE 18552
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
18509: NOP4
18513: PUSH
18514: NOP4
18518: PPUSH
18519: NOP4
18523: PUSH
18524: NOP4
18528: MINUS
18529: PUSH
18530: LD_INT 1
18532: PLUS
18533: PPUSH
18534: NOP4
18538: PUSH
18539: NOP4
18543: ARRAY
18544: PPUSH
18545: NOP4
18549: ST_TO_ADDR
18550: GO 18506
18552: POP
18553: POP
// end ; tmp := [ ] ;
18554: NOP4
18558: PUSH
18559: EMPTY
18560: ST_TO_ADDR
// if mode then
18561: NOP4
18565: IFFALSE 18634
// begin for i = 1 to result do
18567: NOP4
18571: PUSH
18572: DOUBLE
18573: LD_INT 1
18575: DEC
18576: ST_TO_ADDR
18577: NOP4
18581: PUSH
18582: FOR_TO
18583: IFFALSE 18622
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
18585: NOP4
18589: PUSH
18590: NOP4
18594: PPUSH
18595: NOP4
18599: PPUSH
18600: NOP4
18604: PUSH
18605: NOP4
18609: ARRAY
18610: PUSH
18611: LD_INT 1
18613: ARRAY
18614: PPUSH
18615: NOP4
18619: ST_TO_ADDR
18620: GO 18582
18622: POP
18623: POP
// result := tmp ;
18624: NOP4
18628: PUSH
18629: NOP4
18633: ST_TO_ADDR
// end ; end ;
18634: LD_VAR 0 6
18638: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
18639: LD_INT 0
18641: PPUSH
18642: PPUSH
18643: PPUSH
18644: PPUSH
18645: PPUSH
18646: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
18647: NOP4
18651: PUSH
18652: LD_INT 0
18654: PUSH
18655: LD_INT 0
18657: PUSH
18658: LD_INT 0
18660: PUSH
18661: EMPTY
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: ST_TO_ADDR
// if not x or not y then
18669: NOP4
18673: NOT
18674: PUSH
18675: NOP4
18679: NOT
18680: OR
18681: IFFALSE 18685
// exit ;
18683: GO 20337
// if not range then
18685: NOP4
18689: NOT
18690: IFFALSE 18700
// range := 10 ;
18692: NOP4
18696: PUSH
18697: LD_INT 10
18699: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18700: NOP4
18704: PUSH
18705: LD_INT 81
18707: PUSH
18708: NOP4
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 92
18719: PUSH
18720: NOP4
18724: PUSH
18725: NOP4
18729: PUSH
18730: NOP4
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 3
18743: PUSH
18744: LD_INT 21
18746: PUSH
18747: LD_INT 3
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: LIST
18762: PPUSH
18763: NOP4
18767: ST_TO_ADDR
// if not tmp then
18768: NOP4
18772: NOT
18773: IFFALSE 18777
// exit ;
18775: GO 20337
// for i in tmp do
18777: NOP4
18781: PUSH
18782: NOP4
18786: PUSH
18787: FOR_IN
18788: IFFALSE 20312
// begin points := [ 0 , 0 , 0 ] ;
18790: NOP4
18794: PUSH
18795: LD_INT 0
18797: PUSH
18798: LD_INT 0
18800: PUSH
18801: LD_INT 0
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: LIST
18808: ST_TO_ADDR
// bpoints := 1 ;
18809: NOP4
18813: PUSH
18814: LD_INT 1
18816: ST_TO_ADDR
// case GetType ( i ) of unit_human :
18817: NOP4
18821: PPUSH
18822: NOP4
18826: PUSH
18827: LD_INT 1
18829: DOUBLE
18830: EQUAL
18831: IFTRUE 18835
18833: GO 19413
18835: POP
// begin if GetClass ( i ) = 1 then
18836: NOP4
18840: PPUSH
18841: NOP4
18845: PUSH
18846: LD_INT 1
18848: EQUAL
18849: IFFALSE 18870
// points := [ 10 , 5 , 3 ] ;
18851: NOP4
18855: PUSH
18856: LD_INT 10
18858: PUSH
18859: LD_INT 5
18861: PUSH
18862: LD_INT 3
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
18870: NOP4
18874: PPUSH
18875: NOP4
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: LD_INT 3
18885: PUSH
18886: LD_INT 4
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: LIST
18893: IN
18894: IFFALSE 18915
// points := [ 3 , 2 , 1 ] ;
18896: NOP4
18900: PUSH
18901: LD_INT 3
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: LD_INT 1
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: LIST
18914: ST_TO_ADDR
// if GetClass ( i ) = 5 then
18915: NOP4
18919: PPUSH
18920: NOP4
18924: PUSH
18925: LD_INT 5
18927: EQUAL
18928: IFFALSE 18949
// points := [ 130 , 5 , 2 ] ;
18930: NOP4
18934: PUSH
18935: LD_INT 130
18937: PUSH
18938: LD_INT 5
18940: PUSH
18941: LD_INT 2
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: ST_TO_ADDR
// if GetClass ( i ) = 8 then
18949: NOP4
18953: PPUSH
18954: NOP4
18958: PUSH
18959: LD_INT 8
18961: EQUAL
18962: IFFALSE 18983
// points := [ 35 , 35 , 30 ] ;
18964: NOP4
18968: PUSH
18969: LD_INT 35
18971: PUSH
18972: LD_INT 35
18974: PUSH
18975: LD_INT 30
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: ST_TO_ADDR
// if GetClass ( i ) = 9 then
18983: NOP4
18987: PPUSH
18988: NOP4
18992: PUSH
18993: LD_INT 9
18995: EQUAL
18996: IFFALSE 19017
// points := [ 20 , 55 , 40 ] ;
18998: NOP4
19002: PUSH
19003: LD_INT 20
19005: PUSH
19006: LD_INT 55
19008: PUSH
19009: LD_INT 40
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
19017: NOP4
19021: PPUSH
19022: NOP4
19026: PUSH
19027: LD_INT 12
19029: PUSH
19030: LD_INT 16
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: IN
19037: IFFALSE 19058
// points := [ 5 , 3 , 2 ] ;
19039: NOP4
19043: PUSH
19044: LD_INT 5
19046: PUSH
19047: LD_INT 3
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: LIST
19057: ST_TO_ADDR
// if GetClass ( i ) = 17 then
19058: NOP4
19062: PPUSH
19063: NOP4
19067: PUSH
19068: LD_INT 17
19070: EQUAL
19071: IFFALSE 19092
// points := [ 100 , 50 , 75 ] ;
19073: NOP4
19077: PUSH
19078: LD_INT 100
19080: PUSH
19081: LD_INT 50
19083: PUSH
19084: LD_INT 75
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: LIST
19091: ST_TO_ADDR
// if GetClass ( i ) = 15 then
19092: NOP4
19096: PPUSH
19097: NOP4
19101: PUSH
19102: LD_INT 15
19104: EQUAL
19105: IFFALSE 19126
// points := [ 10 , 5 , 3 ] ;
19107: NOP4
19111: PUSH
19112: LD_INT 10
19114: PUSH
19115: LD_INT 5
19117: PUSH
19118: LD_INT 3
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: ST_TO_ADDR
// if GetClass ( i ) = 14 then
19126: NOP4
19130: PPUSH
19131: NOP4
19135: PUSH
19136: LD_INT 14
19138: EQUAL
19139: IFFALSE 19160
// points := [ 10 , 0 , 0 ] ;
19141: NOP4
19145: PUSH
19146: LD_INT 10
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: LD_INT 0
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: LIST
19159: ST_TO_ADDR
// if GetClass ( i ) = 11 then
19160: NOP4
19164: PPUSH
19165: NOP4
19169: PUSH
19170: LD_INT 11
19172: EQUAL
19173: IFFALSE 19194
// points := [ 30 , 10 , 5 ] ;
19175: NOP4
19179: PUSH
19180: LD_INT 30
19182: PUSH
19183: LD_INT 10
19185: PUSH
19186: LD_INT 5
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
19194: NOP4
19198: PPUSH
19199: LD_INT 5
19201: PPUSH
19202: NOP4
19206: PUSH
19207: LD_INT 2
19209: EQUAL
19210: IFFALSE 19227
// bpoints := bpoints * 1.8 ;
19212: NOP4
19216: PUSH
19217: NOP4
19221: PUSH
19222: LD_REAL  1.80000000000000E+0000
19225: MUL
19226: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
19227: NOP4
19231: PPUSH
19232: NOP4
19236: PUSH
19237: LD_INT 1
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: LD_INT 3
19245: PUSH
19246: LD_INT 4
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: IN
19255: PUSH
19256: NOP4
19260: PPUSH
19261: LD_INT 51
19263: PPUSH
19264: NOP4
19268: PUSH
19269: LD_INT 2
19271: EQUAL
19272: AND
19273: IFFALSE 19290
// bpoints := bpoints * 1.2 ;
19275: NOP4
19279: PUSH
19280: NOP4
19284: PUSH
19285: LD_REAL  1.20000000000000E+0000
19288: MUL
19289: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
19290: NOP4
19294: PPUSH
19295: NOP4
19299: PUSH
19300: LD_INT 5
19302: PUSH
19303: LD_INT 7
19305: PUSH
19306: LD_INT 9
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: LIST
19313: IN
19314: PUSH
19315: NOP4
19319: PPUSH
19320: LD_INT 52
19322: PPUSH
19323: NOP4
19327: PUSH
19328: LD_INT 2
19330: EQUAL
19331: AND
19332: IFFALSE 19349
// bpoints := bpoints * 1.5 ;
19334: NOP4
19338: PUSH
19339: NOP4
19343: PUSH
19344: LD_REAL  1.50000000000000E+0000
19347: MUL
19348: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
19349: NOP4
19353: PPUSH
19354: LD_INT 66
19356: PPUSH
19357: NOP4
19361: PUSH
19362: LD_INT 2
19364: EQUAL
19365: IFFALSE 19382
// bpoints := bpoints * 1.1 ;
19367: NOP4
19371: PUSH
19372: NOP4
19376: PUSH
19377: LD_REAL  1.10000000000000E+0000
19380: MUL
19381: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
19382: NOP4
19386: PUSH
19387: NOP4
19391: PUSH
19392: NOP4
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: NOP4
19404: PUSH
19405: LD_REAL  1.15000000000000E+0000
19408: MUL
19409: MUL
19410: ST_TO_ADDR
// end ; unit_vehicle :
19411: GO 20241
19413: LD_INT 2
19415: DOUBLE
19416: EQUAL
19417: IFTRUE 19421
19419: GO 20229
19421: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
19422: NOP4
19426: PPUSH
19427: NOP4
19431: PUSH
19432: LD_INT 2
19434: PUSH
19435: LD_INT 42
19437: PUSH
19438: LD_INT 24
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: LIST
19445: IN
19446: IFFALSE 19467
// points := [ 25 , 5 , 3 ] ;
19448: NOP4
19452: PUSH
19453: LD_INT 25
19455: PUSH
19456: LD_INT 5
19458: PUSH
19459: LD_INT 3
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: LIST
19466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
19467: NOP4
19471: PPUSH
19472: NOP4
19476: PUSH
19477: LD_INT 4
19479: PUSH
19480: LD_INT 43
19482: PUSH
19483: LD_INT 25
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: IN
19491: IFFALSE 19512
// points := [ 40 , 15 , 5 ] ;
19493: NOP4
19497: PUSH
19498: LD_INT 40
19500: PUSH
19501: LD_INT 15
19503: PUSH
19504: LD_INT 5
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: LIST
19511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
19512: NOP4
19516: PPUSH
19517: NOP4
19521: PUSH
19522: LD_INT 3
19524: PUSH
19525: LD_INT 23
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: IN
19532: IFFALSE 19553
// points := [ 7 , 25 , 8 ] ;
19534: NOP4
19538: PUSH
19539: LD_INT 7
19541: PUSH
19542: LD_INT 25
19544: PUSH
19545: LD_INT 8
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
19553: NOP4
19557: PPUSH
19558: NOP4
19562: PUSH
19563: LD_INT 5
19565: PUSH
19566: LD_INT 27
19568: PUSH
19569: LD_INT 44
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: LIST
19576: IN
19577: IFFALSE 19598
// points := [ 14 , 50 , 16 ] ;
19579: NOP4
19583: PUSH
19584: LD_INT 14
19586: PUSH
19587: LD_INT 50
19589: PUSH
19590: LD_INT 16
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: LIST
19597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
19598: NOP4
19602: PPUSH
19603: NOP4
19607: PUSH
19608: LD_INT 6
19610: PUSH
19611: LD_INT 46
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: IN
19618: IFFALSE 19639
// points := [ 32 , 120 , 70 ] ;
19620: NOP4
19624: PUSH
19625: LD_INT 32
19627: PUSH
19628: LD_INT 120
19630: PUSH
19631: LD_INT 70
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
19639: NOP4
19643: PPUSH
19644: NOP4
19648: PUSH
19649: LD_INT 7
19651: PUSH
19652: LD_INT 28
19654: PUSH
19655: LD_INT 45
19657: PUSH
19658: NOP4
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: IN
19669: IFFALSE 19690
// points := [ 35 , 20 , 45 ] ;
19671: NOP4
19675: PUSH
19676: LD_INT 35
19678: PUSH
19679: LD_INT 20
19681: PUSH
19682: LD_INT 45
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: LIST
19689: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
19690: NOP4
19694: PPUSH
19695: NOP4
19699: PUSH
19700: LD_INT 47
19702: PUSH
19703: EMPTY
19704: LIST
19705: IN
19706: IFFALSE 19727
// points := [ 67 , 45 , 75 ] ;
19708: NOP4
19712: PUSH
19713: LD_INT 67
19715: PUSH
19716: LD_INT 45
19718: PUSH
19719: LD_INT 75
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: LIST
19726: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
19727: NOP4
19731: PPUSH
19732: NOP4
19736: PUSH
19737: LD_INT 26
19739: PUSH
19740: EMPTY
19741: LIST
19742: IN
19743: IFFALSE 19764
// points := [ 120 , 30 , 80 ] ;
19745: NOP4
19749: PUSH
19750: LD_INT 120
19752: PUSH
19753: LD_INT 30
19755: PUSH
19756: LD_INT 80
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
19764: NOP4
19768: PPUSH
19769: NOP4
19773: PUSH
19774: LD_INT 22
19776: PUSH
19777: EMPTY
19778: LIST
19779: IN
19780: IFFALSE 19801
// points := [ 40 , 1 , 1 ] ;
19782: NOP4
19786: PUSH
19787: LD_INT 40
19789: PUSH
19790: LD_INT 1
19792: PUSH
19793: LD_INT 1
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
19801: NOP4
19805: PPUSH
19806: NOP4
19810: PUSH
19811: LD_INT 29
19813: PUSH
19814: EMPTY
19815: LIST
19816: IN
19817: IFFALSE 19838
// points := [ 70 , 200 , 400 ] ;
19819: NOP4
19823: PUSH
19824: LD_INT 70
19826: PUSH
19827: LD_INT 200
19829: PUSH
19830: LD_INT 400
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: LIST
19837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
19838: NOP4
19842: PPUSH
19843: NOP4
19847: PUSH
19848: LD_INT 14
19850: PUSH
19851: LD_INT 53
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: IN
19858: IFFALSE 19879
// points := [ 40 , 10 , 20 ] ;
19860: NOP4
19864: PUSH
19865: LD_INT 40
19867: PUSH
19868: LD_INT 10
19870: PUSH
19871: LD_INT 20
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: LIST
19878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
19879: NOP4
19883: PPUSH
19884: NOP4
19888: PUSH
19889: LD_INT 9
19891: PUSH
19892: EMPTY
19893: LIST
19894: IN
19895: IFFALSE 19916
// points := [ 5 , 70 , 20 ] ;
19897: NOP4
19901: PUSH
19902: LD_INT 5
19904: PUSH
19905: LD_INT 70
19907: PUSH
19908: LD_INT 20
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: LIST
19915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
19916: NOP4
19920: PPUSH
19921: NOP4
19925: PUSH
19926: LD_INT 10
19928: PUSH
19929: EMPTY
19930: LIST
19931: IN
19932: IFFALSE 19953
// points := [ 35 , 110 , 70 ] ;
19934: NOP4
19938: PUSH
19939: LD_INT 35
19941: PUSH
19942: LD_INT 110
19944: PUSH
19945: LD_INT 70
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: LIST
19952: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
19953: NOP4
19957: PPUSH
19958: NOP4
19962: PUSH
19963: LD_INT 25
19965: EQUAL
19966: IFFALSE 19987
// points := [ 80 , 65 , 100 ] ;
19968: NOP4
19972: PUSH
19973: LD_INT 80
19975: PUSH
19976: LD_INT 65
19978: PUSH
19979: LD_INT 100
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: LIST
19986: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
19987: NOP4
19991: PPUSH
19992: NOP4
19996: PUSH
19997: LD_INT 1
19999: EQUAL
20000: IFFALSE 20035
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
20002: NOP4
20006: PUSH
20007: NOP4
20011: PUSH
20012: NOP4
20016: PPUSH
20017: NOP4
20021: PPUSH
20022: LD_INT 3
20024: PPUSH
20025: NOP4
20029: PUSH
20030: LD_INT 4
20032: MUL
20033: MUL
20034: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
20035: NOP4
20039: PPUSH
20040: NOP4
20044: PUSH
20045: LD_INT 2
20047: EQUAL
20048: IFFALSE 20099
// begin j := IsControledBy ( i ) ;
20050: NOP4
20054: PUSH
20055: NOP4
20059: PPUSH
20060: NOP4
20064: ST_TO_ADDR
// if j then
20065: NOP4
20069: IFFALSE 20099
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
20071: NOP4
20075: PUSH
20076: NOP4
20080: PUSH
20081: NOP4
20085: PPUSH
20086: LD_INT 3
20088: PPUSH
20089: NOP4
20093: PUSH
20094: LD_INT 3
20096: MUL
20097: MUL
20098: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
20099: NOP4
20103: PPUSH
20104: NOP4
20108: PUSH
20109: LD_INT 5
20111: PUSH
20112: LD_INT 6
20114: PUSH
20115: LD_INT 46
20117: PUSH
20118: LD_INT 44
20120: PUSH
20121: LD_INT 47
20123: PUSH
20124: LD_INT 45
20126: PUSH
20127: LD_INT 28
20129: PUSH
20130: LD_INT 7
20132: PUSH
20133: LD_INT 27
20135: PUSH
20136: LD_INT 29
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: IN
20151: PUSH
20152: NOP4
20156: PPUSH
20157: LD_INT 52
20159: PPUSH
20160: NOP4
20164: PUSH
20165: LD_INT 2
20167: EQUAL
20168: AND
20169: IFFALSE 20186
// bpoints := bpoints * 1.2 ;
20171: NOP4
20175: PUSH
20176: NOP4
20180: PUSH
20181: LD_REAL  1.20000000000000E+0000
20184: MUL
20185: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
20186: NOP4
20190: PPUSH
20191: NOP4
20195: PUSH
20196: LD_INT 6
20198: PUSH
20199: LD_INT 46
20201: PUSH
20202: LD_INT 47
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: LIST
20209: IN
20210: IFFALSE 20227
// bpoints := bpoints * 1.2 ;
20212: NOP4
20216: PUSH
20217: NOP4
20221: PUSH
20222: LD_REAL  1.20000000000000E+0000
20225: MUL
20226: ST_TO_ADDR
// end ; unit_building :
20227: GO 20241
20229: LD_INT 3
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20240
20237: POP
// ; end ;
20238: GO 20241
20240: POP
// for j = 1 to 3 do
20241: NOP4
20245: PUSH
20246: DOUBLE
20247: LD_INT 1
20249: DEC
20250: ST_TO_ADDR
20251: LD_INT 3
20253: PUSH
20254: FOR_TO
20255: IFFALSE 20308
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
20257: NOP4
20261: PUSH
20262: NOP4
20266: PPUSH
20267: NOP4
20271: PPUSH
20272: NOP4
20276: PUSH
20277: NOP4
20281: ARRAY
20282: PUSH
20283: NOP4
20287: PUSH
20288: NOP4
20292: ARRAY
20293: PUSH
20294: NOP4
20298: MUL
20299: PLUS
20300: PPUSH
20301: NOP4
20305: ST_TO_ADDR
20306: GO 20254
20308: POP
20309: POP
// end ;
20310: GO 18787
20312: POP
20313: POP
// result := Replace ( result , 4 , tmp ) ;
20314: NOP4
20318: PUSH
20319: NOP4
20323: PPUSH
20324: LD_INT 4
20326: PPUSH
20327: NOP4
20331: PPUSH
20332: NOP4
20336: ST_TO_ADDR
// end ;
20337: LD_VAR 0 5
20341: RET
// export function DangerAtRange ( unit , range ) ; begin
20342: LD_INT 0
20344: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
20345: NOP4
20349: PUSH
20350: NOP4
20354: PPUSH
20355: NOP4
20359: PPUSH
20360: NOP4
20364: PPUSH
20365: NOP4
20369: PPUSH
20370: NOP4
20374: PPUSH
20375: NOP4
20379: PPUSH
20380: NOP4
20384: PPUSH
20385: NOP4
20389: ST_TO_ADDR
// end ;
20390: LD_VAR 0 3
20394: RET
// export function DangerInArea ( side , area ) ; begin
20395: LD_INT 0
20397: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
20398: NOP4
20402: PUSH
20403: NOP4
20407: PPUSH
20408: LD_INT 81
20410: PUSH
20411: NOP4
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PPUSH
20420: NOP4
20424: ST_TO_ADDR
// end ;
20425: LD_VAR 0 3
20429: RET
// export function IsExtension ( b ) ; begin
20430: LD_INT 0
20432: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
20433: NOP4
20437: PUSH
20438: NOP4
20442: PUSH
20443: LD_INT 23
20445: PUSH
20446: LD_INT 20
20448: PUSH
20449: LD_INT 22
20451: PUSH
20452: LD_INT 17
20454: PUSH
20455: LD_INT 24
20457: PUSH
20458: LD_INT 21
20460: PUSH
20461: LD_INT 19
20463: PUSH
20464: LD_INT 16
20466: PUSH
20467: LD_INT 25
20469: PUSH
20470: LD_INT 18
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: IN
20485: ST_TO_ADDR
// end ;
20486: LD_VAR 0 2
20490: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
20491: LD_INT 0
20493: PPUSH
20494: PPUSH
20495: PPUSH
// result := [ ] ;
20496: NOP4
20500: PUSH
20501: EMPTY
20502: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
20503: NOP4
20507: PUSH
20508: NOP4
20512: PPUSH
20513: LD_INT 21
20515: PUSH
20516: LD_INT 3
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PPUSH
20523: NOP4
20527: ST_TO_ADDR
// if not tmp then
20528: NOP4
20532: NOT
20533: IFFALSE 20537
// exit ;
20535: GO 20601
// if checkLink then
20537: NOP4
20541: IFFALSE 20591
// begin for i in tmp do
20543: NOP4
20547: PUSH
20548: NOP4
20552: PUSH
20553: FOR_IN
20554: IFFALSE 20589
// if GetBase ( i ) <> base then
20556: NOP4
20560: PPUSH
20561: NOP4
20565: PUSH
20566: NOP4
20570: NONEQUAL
20571: IFFALSE 20587
// ComLinkToBase ( base , i ) ;
20573: NOP4
20577: PPUSH
20578: NOP4
20582: PPUSH
20583: NOP4
20587: GO 20553
20589: POP
20590: POP
// end ; result := tmp ;
20591: NOP4
20595: PUSH
20596: NOP4
20600: ST_TO_ADDR
// end ;
20601: LD_VAR 0 4
20605: RET
// export function ComComplete ( units , b ) ; var i ; begin
20606: LD_INT 0
20608: PPUSH
20609: PPUSH
// if not units then
20610: NOP4
20614: NOT
20615: IFFALSE 20619
// exit ;
20617: GO 20709
// for i in units do
20619: NOP4
20623: PUSH
20624: NOP4
20628: PUSH
20629: FOR_IN
20630: IFFALSE 20707
// if BuildingStatus ( b ) = bs_build then
20632: NOP4
20636: PPUSH
20637: NOP4
20641: PUSH
20642: LD_INT 1
20644: EQUAL
20645: IFFALSE 20705
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
20647: NOP4
20651: PPUSH
20652: LD_STRING h
20654: PUSH
20655: NOP4
20659: PPUSH
20660: NOP4
20664: PUSH
20665: NOP4
20669: PPUSH
20670: NOP4
20674: PUSH
20675: NOP4
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: LD_INT 0
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: PUSH
20698: EMPTY
20699: LIST
20700: PPUSH
20701: NOP4
20705: GO 20629
20707: POP
20708: POP
// end ;
20709: LD_VAR 0 3
20713: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
20714: LD_INT 0
20716: PPUSH
20717: PPUSH
20718: PPUSH
20719: PPUSH
20720: PPUSH
20721: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
20722: NOP4
20726: NOT
20727: PUSH
20728: NOP4
20732: PPUSH
20733: NOP4
20737: PUSH
20738: LD_INT 2
20740: NONEQUAL
20741: OR
20742: IFFALSE 20746
// exit ;
20744: GO 21062
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
20746: NOP4
20750: PUSH
20751: LD_INT 22
20753: PUSH
20754: NOP4
20758: PPUSH
20759: NOP4
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: PUSH
20771: LD_INT 30
20773: PUSH
20774: LD_INT 36
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 34
20783: PUSH
20784: LD_INT 31
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: LIST
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PPUSH
20800: NOP4
20804: ST_TO_ADDR
// if not tmp then
20805: NOP4
20809: NOT
20810: IFFALSE 20814
// exit ;
20812: GO 21062
// result := [ ] ;
20814: NOP4
20818: PUSH
20819: EMPTY
20820: ST_TO_ADDR
// for i in tmp do
20821: NOP4
20825: PUSH
20826: NOP4
20830: PUSH
20831: FOR_IN
20832: IFFALSE 20903
// begin t := UnitsInside ( i ) ;
20834: NOP4
20838: PUSH
20839: NOP4
20843: PPUSH
20844: NOP4
20848: ST_TO_ADDR
// if t then
20849: NOP4
20853: IFFALSE 20901
// for j in t do
20855: NOP4
20859: PUSH
20860: NOP4
20864: PUSH
20865: FOR_IN
20866: IFFALSE 20899
// result := Replace ( result , result + 1 , j ) ;
20868: NOP4
20872: PUSH
20873: NOP4
20877: PPUSH
20878: NOP4
20882: PUSH
20883: LD_INT 1
20885: PLUS
20886: PPUSH
20887: NOP4
20891: PPUSH
20892: NOP4
20896: ST_TO_ADDR
20897: GO 20865
20899: POP
20900: POP
// end ;
20901: GO 20831
20903: POP
20904: POP
// if not result then
20905: NOP4
20909: NOT
20910: IFFALSE 20914
// exit ;
20912: GO 21062
// mech := result [ 1 ] ;
20914: NOP4
20918: PUSH
20919: NOP4
20923: PUSH
20924: LD_INT 1
20926: ARRAY
20927: ST_TO_ADDR
// if result > 1 then
20928: NOP4
20932: PUSH
20933: LD_INT 1
20935: GREATER
20936: IFFALSE 21048
// begin for i = 2 to result do
20938: NOP4
20942: PUSH
20943: DOUBLE
20944: LD_INT 2
20946: DEC
20947: ST_TO_ADDR
20948: NOP4
20952: PUSH
20953: FOR_TO
20954: IFFALSE 21046
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
20956: NOP4
20960: PUSH
20961: NOP4
20965: PUSH
20966: NOP4
20970: ARRAY
20971: PPUSH
20972: LD_INT 3
20974: PPUSH
20975: NOP4
20979: PUSH
20980: NOP4
20984: PUSH
20985: NOP4
20989: ARRAY
20990: PPUSH
20991: NOP4
20995: MINUS
20996: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
20997: NOP4
21001: PUSH
21002: NOP4
21006: PPUSH
21007: LD_INT 3
21009: PPUSH
21010: NOP4
21014: PUSH
21015: NOP4
21019: PPUSH
21020: NOP4
21024: MINUS
21025: GREATEREQUAL
21026: IFFALSE 21044
// mech := result [ i ] ;
21028: NOP4
21032: PUSH
21033: NOP4
21037: PUSH
21038: NOP4
21042: ARRAY
21043: ST_TO_ADDR
// end ;
21044: GO 20953
21046: POP
21047: POP
// end ; ComLinkTo ( vehicle , mech ) ;
21048: NOP4
21052: PPUSH
21053: NOP4
21057: PPUSH
21058: NOP4
// end ;
21062: LD_VAR 0 2
21066: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
21067: LD_INT 0
21069: PPUSH
21070: PPUSH
21071: PPUSH
21072: PPUSH
21073: PPUSH
21074: PPUSH
21075: PPUSH
21076: PPUSH
21077: PPUSH
21078: PPUSH
21079: PPUSH
21080: PPUSH
21081: PPUSH
// result := [ ] ;
21082: NOP4
21086: PUSH
21087: EMPTY
21088: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
21089: NOP4
21093: PPUSH
21094: NOP4
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: IN
21109: NOT
21110: IFFALSE 21114
// exit ;
21112: GO 22748
// if name then
21114: NOP4
21118: IFFALSE 21134
// SetBName ( base_dep , name ) ;
21120: NOP4
21124: PPUSH
21125: NOP4
21129: PPUSH
21130: NOP4
// base := GetBase ( base_dep ) ;
21134: NOP4
21138: PUSH
21139: NOP4
21143: PPUSH
21144: NOP4
21148: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
21149: NOP4
21153: PUSH
21154: NOP4
21158: PPUSH
21159: NOP4
21163: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
21164: NOP4
21168: PUSH
21169: NOP4
21173: PPUSH
21174: NOP4
21178: ST_TO_ADDR
// if sources then
21179: NOP4
21183: IFFALSE 21230
// for i = 1 to 3 do
21185: NOP4
21189: PUSH
21190: DOUBLE
21191: LD_INT 1
21193: DEC
21194: ST_TO_ADDR
21195: LD_INT 3
21197: PUSH
21198: FOR_TO
21199: IFFALSE 21228
// AddResourceType ( base , i , sources [ i ] ) ;
21201: NOP4
21205: PPUSH
21206: NOP4
21210: PPUSH
21211: NOP4
21215: PUSH
21216: NOP4
21220: ARRAY
21221: PPUSH
21222: NOP4
21226: GO 21198
21228: POP
21229: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
21230: NOP4
21234: PUSH
21235: NOP4
21239: PPUSH
21240: NOP4
21244: PPUSH
21245: LD_INT 1
21247: PPUSH
21248: NOP4
21252: ST_TO_ADDR
// InitHc ;
21253: NOP4
// InitUc ;
21257: NOP4
// uc_side := side ;
21261: LD_ADDR_OWVAR 20
21265: PUSH
21266: NOP4
21270: ST_TO_ADDR
// uc_nation := nation ;
21271: LD_ADDR_OWVAR 21
21275: PUSH
21276: NOP4
21280: ST_TO_ADDR
// if buildings then
21281: NOP4
21285: IFFALSE 22607
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
21287: NOP4
21291: PUSH
21292: NOP4
21296: PPUSH
21297: LD_INT 2
21299: PUSH
21300: LD_INT 30
21302: PUSH
21303: LD_INT 29
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 30
21312: PUSH
21313: LD_INT 30
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: LIST
21324: PPUSH
21325: NOP4
21329: ST_TO_ADDR
// if tmp then
21330: NOP4
21334: IFFALSE 21382
// for i in tmp do
21336: NOP4
21340: PUSH
21341: NOP4
21345: PUSH
21346: FOR_IN
21347: IFFALSE 21380
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
21349: NOP4
21353: PPUSH
21354: NOP4
21358: PPUSH
21359: NOP4
21363: PPUSH
21364: NOP4
21368: PPUSH
21369: NOP4
21373: PPUSH
21374: NOP4
21378: GO 21346
21380: POP
21381: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
21382: NOP4
21386: PPUSH
21387: LD_INT 2
21389: PUSH
21390: LD_INT 30
21392: PUSH
21393: LD_INT 32
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 30
21402: PUSH
21403: LD_INT 33
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: LIST
21414: PPUSH
21415: NOP4
21419: IFFALSE 21507
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
21421: NOP4
21425: PUSH
21426: NOP4
21430: PPUSH
21431: LD_INT 2
21433: PUSH
21434: LD_INT 30
21436: PUSH
21437: LD_INT 32
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 30
21446: PUSH
21447: LD_INT 33
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: PPUSH
21459: NOP4
21463: PUSH
21464: FOR_IN
21465: IFFALSE 21505
// begin if not GetBWeapon ( i ) then
21467: NOP4
21471: PPUSH
21472: NOP4
21476: NOT
21477: IFFALSE 21503
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
21479: NOP4
21483: PPUSH
21484: NOP4
21488: PPUSH
21489: NOP4
21493: PPUSH
21494: NOP4
21498: PPUSH
21499: NOP4
// end ;
21503: GO 21464
21505: POP
21506: POP
// end ; for i = 1 to personel do
21507: NOP4
21511: PUSH
21512: DOUBLE
21513: LD_INT 1
21515: DEC
21516: ST_TO_ADDR
21517: NOP4
21521: PUSH
21522: FOR_TO
21523: IFFALSE 22587
// begin if i > 4 then
21525: NOP4
21529: PUSH
21530: LD_INT 4
21532: GREATER
21533: IFFALSE 21537
// break ;
21535: GO 22587
// case i of 1 :
21537: NOP4
21541: PUSH
21542: LD_INT 1
21544: DOUBLE
21545: EQUAL
21546: IFTRUE 21550
21548: GO 21630
21550: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
21551: NOP4
21555: PUSH
21556: NOP4
21560: PPUSH
21561: LD_INT 22
21563: PUSH
21564: NOP4
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 58
21575: PUSH
21576: EMPTY
21577: LIST
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: LD_INT 30
21584: PUSH
21585: LD_INT 32
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 30
21594: PUSH
21595: LD_INT 4
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 30
21604: PUSH
21605: LD_INT 5
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: LIST
21622: PPUSH
21623: NOP4
21627: ST_TO_ADDR
21628: GO 21852
21630: LD_INT 2
21632: DOUBLE
21633: EQUAL
21634: IFTRUE 21638
21636: GO 21700
21638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
21639: NOP4
21643: PUSH
21644: NOP4
21648: PPUSH
21649: LD_INT 22
21651: PUSH
21652: NOP4
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 2
21663: PUSH
21664: LD_INT 30
21666: PUSH
21667: LD_INT 0
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 30
21676: PUSH
21677: LD_INT 1
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: LIST
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PPUSH
21693: NOP4
21697: ST_TO_ADDR
21698: GO 21852
21700: LD_INT 3
21702: DOUBLE
21703: EQUAL
21704: IFTRUE 21708
21706: GO 21770
21708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
21709: NOP4
21713: PUSH
21714: NOP4
21718: PPUSH
21719: LD_INT 22
21721: PUSH
21722: NOP4
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 2
21733: PUSH
21734: LD_INT 30
21736: PUSH
21737: LD_INT 2
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 30
21746: PUSH
21747: LD_INT 3
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: LIST
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PPUSH
21763: NOP4
21767: ST_TO_ADDR
21768: GO 21852
21770: LD_INT 4
21772: DOUBLE
21773: EQUAL
21774: IFTRUE 21778
21776: GO 21851
21778: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
21779: NOP4
21783: PUSH
21784: NOP4
21788: PPUSH
21789: LD_INT 22
21791: PUSH
21792: NOP4
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 2
21803: PUSH
21804: LD_INT 30
21806: PUSH
21807: LD_INT 6
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 30
21816: PUSH
21817: LD_INT 7
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 30
21826: PUSH
21827: LD_INT 8
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PPUSH
21844: NOP4
21848: ST_TO_ADDR
21849: GO 21852
21851: POP
// if i = 1 then
21852: NOP4
21856: PUSH
21857: LD_INT 1
21859: EQUAL
21860: IFFALSE 21971
// begin tmp := [ ] ;
21862: NOP4
21866: PUSH
21867: EMPTY
21868: ST_TO_ADDR
// for j in f do
21869: NOP4
21873: PUSH
21874: NOP4
21878: PUSH
21879: FOR_IN
21880: IFFALSE 21953
// if GetBType ( j ) = b_bunker then
21882: NOP4
21886: PPUSH
21887: NOP4
21891: PUSH
21892: LD_INT 32
21894: EQUAL
21895: IFFALSE 21922
// tmp := Insert ( tmp , 1 , j ) else
21897: NOP4
21901: PUSH
21902: NOP4
21906: PPUSH
21907: LD_INT 1
21909: PPUSH
21910: NOP4
21914: PPUSH
21915: NOP4
21919: ST_TO_ADDR
21920: GO 21951
// tmp := Insert ( tmp , tmp + 1 , j ) ;
21922: NOP4
21926: PUSH
21927: NOP4
21931: PPUSH
21932: NOP4
21936: PUSH
21937: LD_INT 1
21939: PLUS
21940: PPUSH
21941: NOP4
21945: PPUSH
21946: NOP4
21950: ST_TO_ADDR
21951: GO 21879
21953: POP
21954: POP
// if tmp then
21955: NOP4
21959: IFFALSE 21971
// f := tmp ;
21961: NOP4
21965: PUSH
21966: NOP4
21970: ST_TO_ADDR
// end ; x := personel [ i ] ;
21971: NOP4
21975: PUSH
21976: NOP4
21980: PUSH
21981: NOP4
21985: ARRAY
21986: ST_TO_ADDR
// if x = - 1 then
21987: NOP4
21991: PUSH
21992: LD_INT 1
21994: NEG
21995: EQUAL
21996: IFFALSE 22205
// begin for j in f do
21998: NOP4
22002: PUSH
22003: NOP4
22007: PUSH
22008: FOR_IN
22009: IFFALSE 22201
// repeat InitHc ;
22011: NOP4
// if GetBType ( j ) = b_barracks then
22015: NOP4
22019: PPUSH
22020: NOP4
22024: PUSH
22025: LD_INT 5
22027: EQUAL
22028: IFFALSE 22098
// begin if UnitsInside ( j ) < 3 then
22030: NOP4
22034: PPUSH
22035: NOP4
22039: PUSH
22040: LD_INT 3
22042: LESS
22043: IFFALSE 22079
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22045: LD_INT 0
22047: PPUSH
22048: LD_INT 5
22050: PUSH
22051: LD_INT 8
22053: PUSH
22054: LD_INT 9
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: LIST
22061: PUSH
22062: NOP4
22066: ARRAY
22067: PPUSH
22068: NOP4
22072: PPUSH
22073: NOP4
22077: GO 22096
// PrepareHuman ( false , i , skill ) ;
22079: LD_INT 0
22081: PPUSH
22082: NOP4
22086: PPUSH
22087: NOP4
22091: PPUSH
22092: NOP4
// end else
22096: GO 22115
// PrepareHuman ( false , i , skill ) ;
22098: LD_INT 0
22100: PPUSH
22101: NOP4
22105: PPUSH
22106: NOP4
22110: PPUSH
22111: NOP4
// un := CreateHuman ;
22115: NOP4
22119: PUSH
22120: NOP4
22124: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22125: NOP4
22129: PUSH
22130: NOP4
22134: PPUSH
22135: LD_INT 1
22137: PPUSH
22138: NOP4
22142: PPUSH
22143: NOP4
22147: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
22148: NOP4
22152: PPUSH
22153: NOP4
22157: PPUSH
22158: NOP4
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
22162: NOP4
22166: PPUSH
22167: NOP4
22171: PUSH
22172: LD_INT 6
22174: EQUAL
22175: PUSH
22176: NOP4
22180: PPUSH
22181: NOP4
22185: PUSH
22186: LD_INT 32
22188: PUSH
22189: LD_INT 31
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: IN
22196: OR
22197: IFFALSE 22011
22199: GO 22008
22201: POP
22202: POP
// end else
22203: GO 22585
// for j = 1 to x do
22205: NOP4
22209: PUSH
22210: DOUBLE
22211: LD_INT 1
22213: DEC
22214: ST_TO_ADDR
22215: NOP4
22219: PUSH
22220: FOR_TO
22221: IFFALSE 22583
// begin InitHc ;
22223: NOP4
// if not f then
22227: NOP4
22231: NOT
22232: IFFALSE 22321
// begin PrepareHuman ( false , i , skill ) ;
22234: LD_INT 0
22236: PPUSH
22237: NOP4
22241: PPUSH
22242: NOP4
22246: PPUSH
22247: NOP4
// un := CreateHuman ;
22251: NOP4
22255: PUSH
22256: NOP4
22260: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22261: NOP4
22265: PUSH
22266: NOP4
22270: PPUSH
22271: LD_INT 1
22273: PPUSH
22274: NOP4
22278: PPUSH
22279: NOP4
22283: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22284: NOP4
22288: PPUSH
22289: NOP4
22293: PPUSH
22294: NOP4
22298: PPUSH
22299: NOP4
22303: PPUSH
22304: NOP4
22308: PPUSH
22309: LD_INT 10
22311: PPUSH
22312: LD_INT 0
22314: PPUSH
22315: NOP4
// continue ;
22319: GO 22220
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
22321: NOP4
22325: PUSH
22326: LD_INT 1
22328: ARRAY
22329: PPUSH
22330: NOP4
22334: PUSH
22335: NOP4
22339: PUSH
22340: LD_INT 1
22342: ARRAY
22343: PPUSH
22344: NOP4
22348: PUSH
22349: LD_INT 32
22351: PUSH
22352: LD_INT 31
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: IN
22359: AND
22360: PUSH
22361: NOP4
22365: PUSH
22366: LD_INT 1
22368: ARRAY
22369: PPUSH
22370: NOP4
22374: PUSH
22375: LD_INT 6
22377: EQUAL
22378: OR
22379: IFFALSE 22399
// f := Delete ( f , 1 ) ;
22381: NOP4
22385: PUSH
22386: NOP4
22390: PPUSH
22391: LD_INT 1
22393: PPUSH
22394: NOP4
22398: ST_TO_ADDR
// if not f then
22399: NOP4
22403: NOT
22404: IFFALSE 22422
// begin x := x + 2 ;
22406: NOP4
22410: PUSH
22411: NOP4
22415: PUSH
22416: LD_INT 2
22418: PLUS
22419: ST_TO_ADDR
// continue ;
22420: GO 22220
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
22422: NOP4
22426: PUSH
22427: LD_INT 1
22429: ARRAY
22430: PPUSH
22431: NOP4
22435: PUSH
22436: LD_INT 5
22438: EQUAL
22439: IFFALSE 22513
// begin if UnitsInside ( f [ 1 ] ) < 3 then
22441: NOP4
22445: PUSH
22446: LD_INT 1
22448: ARRAY
22449: PPUSH
22450: NOP4
22454: PUSH
22455: LD_INT 3
22457: LESS
22458: IFFALSE 22494
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
22460: LD_INT 0
22462: PPUSH
22463: LD_INT 5
22465: PUSH
22466: LD_INT 8
22468: PUSH
22469: LD_INT 9
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: PUSH
22477: NOP4
22481: ARRAY
22482: PPUSH
22483: NOP4
22487: PPUSH
22488: NOP4
22492: GO 22511
// PrepareHuman ( false , i , skill ) ;
22494: LD_INT 0
22496: PPUSH
22497: NOP4
22501: PPUSH
22502: NOP4
22506: PPUSH
22507: NOP4
// end else
22511: GO 22530
// PrepareHuman ( false , i , skill ) ;
22513: LD_INT 0
22515: PPUSH
22516: NOP4
22520: PPUSH
22521: NOP4
22525: PPUSH
22526: NOP4
// un := CreateHuman ;
22530: NOP4
22534: PUSH
22535: NOP4
22539: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
22540: NOP4
22544: PUSH
22545: NOP4
22549: PPUSH
22550: LD_INT 1
22552: PPUSH
22553: NOP4
22557: PPUSH
22558: NOP4
22562: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
22563: NOP4
22567: PPUSH
22568: NOP4
22572: PUSH
22573: LD_INT 1
22575: ARRAY
22576: PPUSH
22577: NOP4
// end ;
22581: GO 22220
22583: POP
22584: POP
// end ;
22585: GO 21522
22587: POP
22588: POP
// result := result ^ buildings ;
22589: NOP4
22593: PUSH
22594: NOP4
22598: PUSH
22599: NOP4
22603: ADD
22604: ST_TO_ADDR
// end else
22605: GO 22748
// begin for i = 1 to personel do
22607: NOP4
22611: PUSH
22612: DOUBLE
22613: LD_INT 1
22615: DEC
22616: ST_TO_ADDR
22617: NOP4
22621: PUSH
22622: FOR_TO
22623: IFFALSE 22746
// begin if i > 4 then
22625: NOP4
22629: PUSH
22630: LD_INT 4
22632: GREATER
22633: IFFALSE 22637
// break ;
22635: GO 22746
// x := personel [ i ] ;
22637: NOP4
22641: PUSH
22642: NOP4
22646: PUSH
22647: NOP4
22651: ARRAY
22652: ST_TO_ADDR
// if x = - 1 then
22653: NOP4
22657: PUSH
22658: LD_INT 1
22660: NEG
22661: EQUAL
22662: IFFALSE 22666
// continue ;
22664: GO 22622
// PrepareHuman ( false , i , skill ) ;
22666: LD_INT 0
22668: PPUSH
22669: NOP4
22673: PPUSH
22674: NOP4
22678: PPUSH
22679: NOP4
// un := CreateHuman ;
22683: NOP4
22687: PUSH
22688: NOP4
22692: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
22693: NOP4
22697: PPUSH
22698: NOP4
22702: PPUSH
22703: NOP4
22707: PPUSH
22708: NOP4
22712: PPUSH
22713: NOP4
22717: PPUSH
22718: LD_INT 10
22720: PPUSH
22721: LD_INT 0
22723: PPUSH
22724: NOP4
// result := result ^ un ;
22728: NOP4
22732: PUSH
22733: NOP4
22737: PUSH
22738: NOP4
22742: ADD
22743: ST_TO_ADDR
// end ;
22744: GO 22622
22746: POP
22747: POP
// end ; end ;
22748: LD_VAR 0 7
22752: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
22753: LD_INT 0
22755: PPUSH
22756: PPUSH
22757: PPUSH
22758: PPUSH
22759: PPUSH
22760: PPUSH
22761: PPUSH
22762: PPUSH
22763: PPUSH
22764: PPUSH
22765: PPUSH
22766: PPUSH
22767: PPUSH
22768: PPUSH
22769: PPUSH
22770: PPUSH
// result := false ;
22771: NOP4
22775: PUSH
22776: LD_INT 0
22778: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
22779: NOP4
22783: NOT
22784: PUSH
22785: NOP4
22789: PPUSH
22790: NOP4
22794: PUSH
22795: LD_INT 32
22797: PUSH
22798: LD_INT 33
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: IN
22805: NOT
22806: OR
22807: IFFALSE 22811
// exit ;
22809: GO 23920
// nat := GetNation ( tower ) ;
22811: NOP4
22815: PUSH
22816: NOP4
22820: PPUSH
22821: NOP4
22825: ST_TO_ADDR
// side := GetSide ( tower ) ;
22826: NOP4
22830: PUSH
22831: NOP4
22835: PPUSH
22836: NOP4
22840: ST_TO_ADDR
// x := GetX ( tower ) ;
22841: NOP4
22845: PUSH
22846: NOP4
22850: PPUSH
22851: NOP4
22855: ST_TO_ADDR
// y := GetY ( tower ) ;
22856: NOP4
22860: PUSH
22861: NOP4
22865: PPUSH
22866: NOP4
22870: ST_TO_ADDR
// if not x or not y then
22871: NOP4
22875: NOT
22876: PUSH
22877: NOP4
22881: NOT
22882: OR
22883: IFFALSE 22887
// exit ;
22885: GO 23920
// weapon := 0 ;
22887: NOP4
22891: PUSH
22892: LD_INT 0
22894: ST_TO_ADDR
// fac_list := [ ] ;
22895: NOP4
22899: PUSH
22900: EMPTY
22901: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
22902: NOP4
22906: PUSH
22907: NOP4
22911: PPUSH
22912: NOP4
22916: PPUSH
22917: NOP4
22921: PPUSH
22922: LD_INT 0
22924: PPUSH
22925: NOP4
22929: PPUSH
22930: LD_INT 30
22932: PUSH
22933: LD_INT 3
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PPUSH
22940: NOP4
22944: ST_TO_ADDR
// if not factories then
22945: NOP4
22949: NOT
22950: IFFALSE 22954
// exit ;
22952: GO 23920
// for i in factories do
22954: NOP4
22958: PUSH
22959: NOP4
22963: PUSH
22964: FOR_IN
22965: IFFALSE 22990
// fac_list := fac_list union AvailableWeaponList ( i ) ;
22967: NOP4
22971: PUSH
22972: NOP4
22976: PUSH
22977: NOP4
22981: PPUSH
22982: NOP4
22986: UNION
22987: ST_TO_ADDR
22988: GO 22964
22990: POP
22991: POP
// if not fac_list then
22992: NOP4
22996: NOT
22997: IFFALSE 23001
// exit ;
22999: GO 23920
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
23001: NOP4
23005: PUSH
23006: LD_INT 4
23008: PUSH
23009: LD_INT 5
23011: PUSH
23012: LD_INT 9
23014: PUSH
23015: LD_INT 10
23017: PUSH
23018: LD_INT 6
23020: PUSH
23021: LD_INT 7
23023: PUSH
23024: LD_INT 11
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 27
23038: PUSH
23039: LD_INT 28
23041: PUSH
23042: LD_INT 26
23044: PUSH
23045: LD_INT 30
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 43
23056: PUSH
23057: LD_INT 44
23059: PUSH
23060: LD_INT 46
23062: PUSH
23063: LD_INT 45
23065: PUSH
23066: LD_INT 47
23068: PUSH
23069: LD_INT 49
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: PUSH
23085: NOP4
23089: ARRAY
23090: ST_TO_ADDR
// list := list isect fac_list ;
23091: NOP4
23095: PUSH
23096: NOP4
23100: PUSH
23101: NOP4
23105: ISECT
23106: ST_TO_ADDR
// if not list then
23107: NOP4
23111: NOT
23112: IFFALSE 23116
// exit ;
23114: GO 23920
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
23116: NOP4
23120: PUSH
23121: LD_INT 3
23123: EQUAL
23124: PUSH
23125: LD_INT 49
23127: PUSH
23128: NOP4
23132: IN
23133: AND
23134: PUSH
23135: LD_INT 31
23137: PPUSH
23138: NOP4
23142: PPUSH
23143: NOP4
23147: PUSH
23148: LD_INT 2
23150: EQUAL
23151: AND
23152: IFFALSE 23212
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
23154: LD_INT 22
23156: PUSH
23157: NOP4
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 35
23168: PUSH
23169: LD_INT 49
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 91
23178: PUSH
23179: NOP4
23183: PUSH
23184: LD_INT 10
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: LIST
23196: PPUSH
23197: NOP4
23201: NOT
23202: IFFALSE 23212
// weapon := ru_time_lapser ;
23204: NOP4
23208: PUSH
23209: LD_INT 49
23211: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
23212: NOP4
23216: PUSH
23217: LD_INT 1
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: IN
23227: PUSH
23228: LD_INT 11
23230: PUSH
23231: NOP4
23235: IN
23236: PUSH
23237: LD_INT 30
23239: PUSH
23240: NOP4
23244: IN
23245: OR
23246: AND
23247: PUSH
23248: LD_INT 6
23250: PPUSH
23251: NOP4
23255: PPUSH
23256: NOP4
23260: PUSH
23261: LD_INT 2
23263: EQUAL
23264: AND
23265: IFFALSE 23430
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
23267: LD_INT 22
23269: PUSH
23270: NOP4
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 2
23281: PUSH
23282: LD_INT 35
23284: PUSH
23285: LD_INT 11
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 35
23294: PUSH
23295: LD_INT 30
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 91
23309: PUSH
23310: NOP4
23314: PUSH
23315: LD_INT 18
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: LIST
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: PPUSH
23328: NOP4
23332: NOT
23333: PUSH
23334: LD_INT 22
23336: PUSH
23337: NOP4
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: LD_INT 30
23351: PUSH
23352: LD_INT 32
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 30
23361: PUSH
23362: LD_INT 33
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 91
23376: PUSH
23377: NOP4
23381: PUSH
23382: LD_INT 12
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: LIST
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: PUSH
23395: EMPTY
23396: LIST
23397: PPUSH
23398: NOP4
23402: PUSH
23403: LD_INT 2
23405: GREATER
23406: AND
23407: IFFALSE 23430
// weapon := [ us_radar , ar_radar ] [ nat ] ;
23409: NOP4
23413: PUSH
23414: LD_INT 11
23416: PUSH
23417: LD_INT 30
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: NOP4
23428: ARRAY
23429: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
23430: NOP4
23434: NOT
23435: PUSH
23436: LD_INT 40
23438: PPUSH
23439: NOP4
23443: PPUSH
23444: NOP4
23448: PUSH
23449: LD_INT 2
23451: EQUAL
23452: AND
23453: PUSH
23454: LD_INT 7
23456: PUSH
23457: NOP4
23461: IN
23462: PUSH
23463: LD_INT 28
23465: PUSH
23466: NOP4
23470: IN
23471: OR
23472: PUSH
23473: LD_INT 45
23475: PUSH
23476: NOP4
23480: IN
23481: OR
23482: AND
23483: IFFALSE 23737
// begin hex := GetHexInfo ( x , y ) ;
23485: NOP4
23489: PUSH
23490: NOP4
23494: PPUSH
23495: NOP4
23499: PPUSH
23500: NOP4
23504: ST_TO_ADDR
// if hex [ 1 ] then
23505: NOP4
23509: PUSH
23510: LD_INT 1
23512: ARRAY
23513: IFFALSE 23517
// exit ;
23515: GO 23920
// height := hex [ 2 ] ;
23517: NOP4
23521: PUSH
23522: NOP4
23526: PUSH
23527: LD_INT 2
23529: ARRAY
23530: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
23531: NOP4
23535: PUSH
23536: LD_INT 0
23538: PUSH
23539: LD_INT 2
23541: PUSH
23542: LD_INT 3
23544: PUSH
23545: LD_INT 5
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: ST_TO_ADDR
// for i in tmp do
23554: NOP4
23558: PUSH
23559: NOP4
23563: PUSH
23564: FOR_IN
23565: IFFALSE 23735
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
23567: NOP4
23571: PUSH
23572: NOP4
23576: PPUSH
23577: NOP4
23581: PPUSH
23582: LD_INT 5
23584: PPUSH
23585: NOP4
23589: PUSH
23590: NOP4
23594: PPUSH
23595: NOP4
23599: PPUSH
23600: LD_INT 5
23602: PPUSH
23603: NOP4
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
23612: NOP4
23616: PUSH
23617: LD_INT 1
23619: ARRAY
23620: PPUSH
23621: NOP4
23625: PUSH
23626: LD_INT 2
23628: ARRAY
23629: PPUSH
23630: NOP4
23634: IFFALSE 23733
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
23636: NOP4
23640: PUSH
23641: NOP4
23645: PUSH
23646: LD_INT 1
23648: ARRAY
23649: PPUSH
23650: NOP4
23654: PUSH
23655: LD_INT 2
23657: ARRAY
23658: PPUSH
23659: NOP4
23663: ST_TO_ADDR
// if hex [ 1 ] then
23664: NOP4
23668: PUSH
23669: LD_INT 1
23671: ARRAY
23672: IFFALSE 23676
// continue ;
23674: GO 23564
// h := hex [ 2 ] ;
23676: NOP4
23680: PUSH
23681: NOP4
23685: PUSH
23686: LD_INT 2
23688: ARRAY
23689: ST_TO_ADDR
// if h + 7 < height then
23690: NOP4
23694: PUSH
23695: LD_INT 7
23697: PLUS
23698: PUSH
23699: NOP4
23703: LESS
23704: IFFALSE 23733
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
23706: NOP4
23710: PUSH
23711: LD_INT 7
23713: PUSH
23714: LD_INT 28
23716: PUSH
23717: LD_INT 45
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: PUSH
23725: NOP4
23729: ARRAY
23730: ST_TO_ADDR
// break ;
23731: GO 23735
// end ; end ; end ;
23733: GO 23564
23735: POP
23736: POP
// end ; if not weapon then
23737: NOP4
23741: NOT
23742: IFFALSE 23802
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
23744: NOP4
23748: PUSH
23749: NOP4
23753: PUSH
23754: LD_INT 11
23756: PUSH
23757: LD_INT 30
23759: PUSH
23760: LD_INT 49
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: DIFF
23768: ST_TO_ADDR
// if not list then
23769: NOP4
23773: NOT
23774: IFFALSE 23778
// exit ;
23776: GO 23920
// weapon := list [ rand ( 1 , list ) ] ;
23778: NOP4
23782: PUSH
23783: NOP4
23787: PUSH
23788: LD_INT 1
23790: PPUSH
23791: NOP4
23795: PPUSH
23796: NOP4
23800: ARRAY
23801: ST_TO_ADDR
// end ; if weapon then
23802: NOP4
23806: IFFALSE 23920
// begin tmp := CostOfWeapon ( weapon ) ;
23808: NOP4
23812: PUSH
23813: NOP4
23817: PPUSH
23818: NOP4
23822: ST_TO_ADDR
// j := GetBase ( tower ) ;
23823: NOP4
23827: PUSH
23828: NOP4
23832: PPUSH
23833: NOP4
23837: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
23838: NOP4
23842: PPUSH
23843: LD_INT 1
23845: PPUSH
23846: NOP4
23850: PUSH
23851: NOP4
23855: PUSH
23856: LD_INT 1
23858: ARRAY
23859: GREATEREQUAL
23860: PUSH
23861: NOP4
23865: PPUSH
23866: LD_INT 2
23868: PPUSH
23869: NOP4
23873: PUSH
23874: NOP4
23878: PUSH
23879: LD_INT 2
23881: ARRAY
23882: GREATEREQUAL
23883: AND
23884: PUSH
23885: NOP4
23889: PPUSH
23890: LD_INT 3
23892: PPUSH
23893: NOP4
23897: PUSH
23898: NOP4
23902: PUSH
23903: LD_INT 3
23905: ARRAY
23906: GREATEREQUAL
23907: AND
23908: IFFALSE 23920
// result := weapon ;
23910: NOP4
23914: PUSH
23915: NOP4
23919: ST_TO_ADDR
// end ; end ;
23920: LD_VAR 0 3
23924: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
23925: LD_INT 0
23927: PPUSH
23928: PPUSH
// result := true ;
23929: NOP4
23933: PUSH
23934: LD_INT 1
23936: ST_TO_ADDR
// if array1 = array2 then
23937: NOP4
23941: PUSH
23942: NOP4
23946: EQUAL
23947: IFFALSE 24007
// begin for i = 1 to array1 do
23949: NOP4
23953: PUSH
23954: DOUBLE
23955: LD_INT 1
23957: DEC
23958: ST_TO_ADDR
23959: NOP4
23963: PUSH
23964: FOR_TO
23965: IFFALSE 24003
// if array1 [ i ] <> array2 [ i ] then
23967: NOP4
23971: PUSH
23972: NOP4
23976: ARRAY
23977: PUSH
23978: NOP4
23982: PUSH
23983: NOP4
23987: ARRAY
23988: NONEQUAL
23989: IFFALSE 24001
// begin result := false ;
23991: NOP4
23995: PUSH
23996: LD_INT 0
23998: ST_TO_ADDR
// break ;
23999: GO 24003
// end ;
24001: GO 23964
24003: POP
24004: POP
// end else
24005: GO 24015
// result := false ;
24007: NOP4
24011: PUSH
24012: LD_INT 0
24014: ST_TO_ADDR
// end ;
24015: LD_VAR 0 3
24019: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
24020: LD_INT 0
24022: PPUSH
24023: PPUSH
// if not array1 or not array2 then
24024: NOP4
24028: NOT
24029: PUSH
24030: NOP4
24034: NOT
24035: OR
24036: IFFALSE 24040
// exit ;
24038: GO 24104
// result := true ;
24040: NOP4
24044: PUSH
24045: LD_INT 1
24047: ST_TO_ADDR
// for i = 1 to array1 do
24048: NOP4
24052: PUSH
24053: DOUBLE
24054: LD_INT 1
24056: DEC
24057: ST_TO_ADDR
24058: NOP4
24062: PUSH
24063: FOR_TO
24064: IFFALSE 24102
// if array1 [ i ] <> array2 [ i ] then
24066: NOP4
24070: PUSH
24071: NOP4
24075: ARRAY
24076: PUSH
24077: NOP4
24081: PUSH
24082: NOP4
24086: ARRAY
24087: NONEQUAL
24088: IFFALSE 24100
// begin result := false ;
24090: NOP4
24094: PUSH
24095: LD_INT 0
24097: ST_TO_ADDR
// break ;
24098: GO 24102
// end ;
24100: GO 24063
24102: POP
24103: POP
// end ;
24104: LD_VAR 0 3
24108: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
24109: LD_INT 0
24111: PPUSH
24112: PPUSH
24113: PPUSH
// pom := GetBase ( fac ) ;
24114: NOP4
24118: PUSH
24119: NOP4
24123: PPUSH
24124: NOP4
24128: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
24129: NOP4
24133: PUSH
24134: NOP4
24138: PUSH
24139: LD_INT 1
24141: ARRAY
24142: PPUSH
24143: NOP4
24147: PUSH
24148: LD_INT 2
24150: ARRAY
24151: PPUSH
24152: NOP4
24156: PUSH
24157: LD_INT 3
24159: ARRAY
24160: PPUSH
24161: NOP4
24165: PUSH
24166: LD_INT 4
24168: ARRAY
24169: PPUSH
24170: NOP4
24174: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24175: NOP4
24179: PUSH
24180: NOP4
24184: PPUSH
24185: LD_INT 1
24187: PPUSH
24188: NOP4
24192: PUSH
24193: NOP4
24197: PUSH
24198: LD_INT 1
24200: ARRAY
24201: GREATEREQUAL
24202: PUSH
24203: NOP4
24207: PPUSH
24208: LD_INT 2
24210: PPUSH
24211: NOP4
24215: PUSH
24216: NOP4
24220: PUSH
24221: LD_INT 2
24223: ARRAY
24224: GREATEREQUAL
24225: AND
24226: PUSH
24227: NOP4
24231: PPUSH
24232: LD_INT 3
24234: PPUSH
24235: NOP4
24239: PUSH
24240: NOP4
24244: PUSH
24245: LD_INT 3
24247: ARRAY
24248: GREATEREQUAL
24249: AND
24250: ST_TO_ADDR
// end ;
24251: LD_VAR 0 3
24255: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
24256: LD_INT 0
24258: PPUSH
24259: PPUSH
24260: PPUSH
24261: PPUSH
// pom := GetBase ( building ) ;
24262: NOP4
24266: PUSH
24267: NOP4
24271: PPUSH
24272: NOP4
24276: ST_TO_ADDR
// if not pom then
24277: NOP4
24281: NOT
24282: IFFALSE 24286
// exit ;
24284: GO 24456
// btype := GetBType ( building ) ;
24286: NOP4
24290: PUSH
24291: NOP4
24295: PPUSH
24296: NOP4
24300: ST_TO_ADDR
// if btype = b_armoury then
24301: NOP4
24305: PUSH
24306: LD_INT 4
24308: EQUAL
24309: IFFALSE 24319
// btype := b_barracks ;
24311: NOP4
24315: PUSH
24316: LD_INT 5
24318: ST_TO_ADDR
// if btype = b_depot then
24319: NOP4
24323: PUSH
24324: LD_INT 0
24326: EQUAL
24327: IFFALSE 24337
// btype := b_warehouse ;
24329: NOP4
24333: PUSH
24334: LD_INT 1
24336: ST_TO_ADDR
// if btype = b_workshop then
24337: NOP4
24341: PUSH
24342: LD_INT 2
24344: EQUAL
24345: IFFALSE 24355
// btype := b_factory ;
24347: NOP4
24351: PUSH
24352: LD_INT 3
24354: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24355: NOP4
24359: PUSH
24360: NOP4
24364: PPUSH
24365: NOP4
24369: PPUSH
24370: NOP4
24374: PPUSH
24375: NOP4
24379: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24380: NOP4
24384: PUSH
24385: NOP4
24389: PPUSH
24390: LD_INT 1
24392: PPUSH
24393: NOP4
24397: PUSH
24398: NOP4
24402: PUSH
24403: LD_INT 1
24405: ARRAY
24406: GREATEREQUAL
24407: PUSH
24408: NOP4
24412: PPUSH
24413: LD_INT 2
24415: PPUSH
24416: NOP4
24420: PUSH
24421: NOP4
24425: PUSH
24426: LD_INT 2
24428: ARRAY
24429: GREATEREQUAL
24430: AND
24431: PUSH
24432: NOP4
24436: PPUSH
24437: LD_INT 3
24439: PPUSH
24440: NOP4
24444: PUSH
24445: NOP4
24449: PUSH
24450: LD_INT 3
24452: ARRAY
24453: GREATEREQUAL
24454: AND
24455: ST_TO_ADDR
// end ;
24456: LD_VAR 0 2
24460: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
24461: LD_INT 0
24463: PPUSH
24464: PPUSH
24465: PPUSH
// pom := GetBase ( building ) ;
24466: NOP4
24470: PUSH
24471: NOP4
24475: PPUSH
24476: NOP4
24480: ST_TO_ADDR
// if not pom then
24481: NOP4
24485: NOT
24486: IFFALSE 24490
// exit ;
24488: GO 24591
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
24490: NOP4
24494: PUSH
24495: NOP4
24499: PPUSH
24500: NOP4
24504: PPUSH
24505: NOP4
24509: PPUSH
24510: NOP4
24514: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
24515: NOP4
24519: PUSH
24520: NOP4
24524: PPUSH
24525: LD_INT 1
24527: PPUSH
24528: NOP4
24532: PUSH
24533: NOP4
24537: PUSH
24538: LD_INT 1
24540: ARRAY
24541: GREATEREQUAL
24542: PUSH
24543: NOP4
24547: PPUSH
24548: LD_INT 2
24550: PPUSH
24551: NOP4
24555: PUSH
24556: NOP4
24560: PUSH
24561: LD_INT 2
24563: ARRAY
24564: GREATEREQUAL
24565: AND
24566: PUSH
24567: NOP4
24571: PPUSH
24572: LD_INT 3
24574: PPUSH
24575: NOP4
24579: PUSH
24580: NOP4
24584: PUSH
24585: LD_INT 3
24587: ARRAY
24588: GREATEREQUAL
24589: AND
24590: ST_TO_ADDR
// end ;
24591: LD_VAR 0 3
24595: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
24596: LD_INT 0
24598: PPUSH
24599: PPUSH
24600: PPUSH
24601: PPUSH
24602: PPUSH
24603: PPUSH
24604: PPUSH
24605: PPUSH
24606: PPUSH
24607: PPUSH
24608: PPUSH
// result := false ;
24609: NOP4
24613: PUSH
24614: LD_INT 0
24616: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
24617: NOP4
24621: NOT
24622: PUSH
24623: NOP4
24627: NOT
24628: OR
24629: PUSH
24630: NOP4
24634: NOT
24635: OR
24636: PUSH
24637: NOP4
24641: NOT
24642: OR
24643: IFFALSE 24647
// exit ;
24645: GO 25461
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
24647: NOP4
24651: PUSH
24652: NOP4
24656: PPUSH
24657: NOP4
24661: PPUSH
24662: NOP4
24666: PPUSH
24667: NOP4
24671: PPUSH
24672: NOP4
24676: PUSH
24677: LD_INT 1
24679: ARRAY
24680: PPUSH
24681: NOP4
24685: PPUSH
24686: LD_INT 0
24688: PPUSH
24689: NOP4
24693: ST_TO_ADDR
// if not hexes then
24694: NOP4
24698: NOT
24699: IFFALSE 24703
// exit ;
24701: GO 25461
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24703: NOP4
24707: PUSH
24708: NOP4
24712: PPUSH
24713: LD_INT 22
24715: PUSH
24716: NOP4
24720: PPUSH
24721: NOP4
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 2
24732: PUSH
24733: LD_INT 30
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 30
24745: PUSH
24746: LD_INT 1
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: LIST
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PPUSH
24762: NOP4
24766: ST_TO_ADDR
// for i = 1 to hexes do
24767: NOP4
24771: PUSH
24772: DOUBLE
24773: LD_INT 1
24775: DEC
24776: ST_TO_ADDR
24777: NOP4
24781: PUSH
24782: FOR_TO
24783: IFFALSE 25459
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24785: NOP4
24789: PUSH
24790: NOP4
24794: PUSH
24795: NOP4
24799: ARRAY
24800: PUSH
24801: LD_INT 1
24803: ARRAY
24804: PPUSH
24805: NOP4
24809: PUSH
24810: NOP4
24814: ARRAY
24815: PUSH
24816: LD_INT 2
24818: ARRAY
24819: PPUSH
24820: NOP4
24824: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
24825: NOP4
24829: PUSH
24830: NOP4
24834: ARRAY
24835: PUSH
24836: LD_INT 1
24838: ARRAY
24839: PPUSH
24840: NOP4
24844: PUSH
24845: NOP4
24849: ARRAY
24850: PUSH
24851: LD_INT 2
24853: ARRAY
24854: PPUSH
24855: NOP4
24859: PUSH
24860: NOP4
24864: PUSH
24865: NOP4
24869: ARRAY
24870: PUSH
24871: LD_INT 1
24873: ARRAY
24874: PPUSH
24875: NOP4
24879: PUSH
24880: NOP4
24884: ARRAY
24885: PUSH
24886: LD_INT 2
24888: ARRAY
24889: PPUSH
24890: NOP4
24894: NOT
24895: OR
24896: PUSH
24897: NOP4
24901: PPUSH
24902: NOP4
24906: PUSH
24907: LD_INT 3
24909: EQUAL
24910: OR
24911: IFFALSE 24917
// exit ;
24913: POP
24914: POP
24915: GO 25461
// if not tmp then
24917: NOP4
24921: NOT
24922: IFFALSE 24926
// continue ;
24924: GO 24782
// result := true ;
24926: NOP4
24930: PUSH
24931: LD_INT 1
24933: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
24934: NOP4
24938: PUSH
24939: NOP4
24943: PPUSH
24944: NOP4
24948: PUSH
24949: LD_INT 2
24951: EQUAL
24952: AND
24953: PUSH
24954: NOP4
24958: PPUSH
24959: NOP4
24963: PUSH
24964: LD_INT 1
24966: EQUAL
24967: AND
24968: IFFALSE 25132
// begin if IsDrivenBy ( tmp ) then
24970: NOP4
24974: PPUSH
24975: NOP4
24979: IFFALSE 24983
// continue ;
24981: GO 24782
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
24983: NOP4
24987: PPUSH
24988: LD_INT 3
24990: PUSH
24991: LD_INT 60
24993: PUSH
24994: EMPTY
24995: LIST
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 3
25003: PUSH
25004: LD_INT 55
25006: PUSH
25007: EMPTY
25008: LIST
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PPUSH
25018: NOP4
25022: IFFALSE 25130
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
25024: NOP4
25028: PUSH
25029: NOP4
25033: PPUSH
25034: LD_INT 3
25036: PUSH
25037: LD_INT 60
25039: PUSH
25040: EMPTY
25041: LIST
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 3
25049: PUSH
25050: LD_INT 55
25052: PUSH
25053: EMPTY
25054: LIST
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PPUSH
25064: NOP4
25068: PUSH
25069: LD_INT 1
25071: ARRAY
25072: ST_TO_ADDR
// if IsInUnit ( driver ) then
25073: NOP4
25077: PPUSH
25078: NOP4
25082: IFFALSE 25093
// ComExit ( driver ) ;
25084: NOP4
25088: PPUSH
25089: NOP4
// AddComEnterUnit ( driver , tmp ) ;
25093: NOP4
25097: PPUSH
25098: NOP4
25102: PPUSH
25103: NOP4
// AddComMoveToArea ( driver , parking ) ;
25107: NOP4
25111: PPUSH
25112: NOP4
25116: PPUSH
25117: NOP4
// AddComExitVehicle ( driver ) ;
25121: NOP4
25125: PPUSH
25126: NOP4
// end ; continue ;
25130: GO 24782
// end ; if not cleaners or not tmp in cleaners then
25132: NOP4
25136: NOT
25137: PUSH
25138: NOP4
25142: PUSH
25143: NOP4
25147: IN
25148: NOT
25149: OR
25150: IFFALSE 25457
// begin if dep then
25152: NOP4
25156: IFFALSE 25292
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
25158: NOP4
25162: PUSH
25163: NOP4
25167: PUSH
25168: LD_INT 1
25170: ARRAY
25171: PPUSH
25172: NOP4
25176: PPUSH
25177: NOP4
25181: PUSH
25182: LD_INT 1
25184: ARRAY
25185: PPUSH
25186: NOP4
25190: PPUSH
25191: LD_INT 5
25193: PPUSH
25194: NOP4
25198: PUSH
25199: NOP4
25203: PUSH
25204: LD_INT 1
25206: ARRAY
25207: PPUSH
25208: NOP4
25212: PPUSH
25213: NOP4
25217: PUSH
25218: LD_INT 1
25220: ARRAY
25221: PPUSH
25222: NOP4
25226: PPUSH
25227: LD_INT 5
25229: PPUSH
25230: NOP4
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
25239: NOP4
25243: PUSH
25244: LD_INT 1
25246: ARRAY
25247: PPUSH
25248: NOP4
25252: PUSH
25253: LD_INT 2
25255: ARRAY
25256: PPUSH
25257: NOP4
25261: IFFALSE 25292
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
25263: NOP4
25267: PPUSH
25268: NOP4
25272: PUSH
25273: LD_INT 1
25275: ARRAY
25276: PPUSH
25277: NOP4
25281: PUSH
25282: LD_INT 2
25284: ARRAY
25285: PPUSH
25286: NOP4
// continue ;
25290: GO 24782
// end ; end ; r := GetDir ( tmp ) ;
25292: NOP4
25296: PUSH
25297: NOP4
25301: PPUSH
25302: NOP4
25306: ST_TO_ADDR
// if r = 5 then
25307: NOP4
25311: PUSH
25312: LD_INT 5
25314: EQUAL
25315: IFFALSE 25325
// r := 0 ;
25317: NOP4
25321: PUSH
25322: LD_INT 0
25324: ST_TO_ADDR
// for j = r to 5 do
25325: NOP4
25329: PUSH
25330: DOUBLE
25331: NOP4
25335: DEC
25336: ST_TO_ADDR
25337: LD_INT 5
25339: PUSH
25340: FOR_TO
25341: IFFALSE 25455
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
25343: NOP4
25347: PUSH
25348: NOP4
25352: PPUSH
25353: NOP4
25357: PPUSH
25358: NOP4
25362: PPUSH
25363: LD_INT 2
25365: PPUSH
25366: NOP4
25370: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
25371: NOP4
25375: PUSH
25376: NOP4
25380: PPUSH
25381: NOP4
25385: PPUSH
25386: NOP4
25390: PPUSH
25391: LD_INT 2
25393: PPUSH
25394: NOP4
25398: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
25399: NOP4
25403: PPUSH
25404: NOP4
25408: PPUSH
25409: NOP4
25413: PUSH
25414: NOP4
25418: PPUSH
25419: NOP4
25423: PPUSH
25424: NOP4
25428: NOT
25429: AND
25430: IFFALSE 25453
// begin ComMoveXY ( tmp , _x , _y ) ;
25432: NOP4
25436: PPUSH
25437: NOP4
25441: PPUSH
25442: NOP4
25446: PPUSH
25447: NOP4
// break ;
25451: GO 25455
// end ; end ;
25453: GO 25340
25455: POP
25456: POP
// end ; end ;
25457: GO 24782
25459: POP
25460: POP
// end ;
25461: LD_VAR 0 8
25465: RET
// export function BuildingTechInvented ( side , btype ) ; begin
25466: LD_INT 0
25468: PPUSH
// result := true ;
25469: NOP4
25473: PUSH
25474: LD_INT 1
25476: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
25477: NOP4
25481: PUSH
25482: LD_INT 24
25484: DOUBLE
25485: EQUAL
25486: IFTRUE 25496
25488: LD_INT 33
25490: DOUBLE
25491: EQUAL
25492: IFTRUE 25496
25494: GO 25521
25496: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
25497: NOP4
25501: PUSH
25502: LD_INT 32
25504: PPUSH
25505: NOP4
25509: PPUSH
25510: NOP4
25514: PUSH
25515: LD_INT 2
25517: EQUAL
25518: ST_TO_ADDR
25519: GO 25841
25521: LD_INT 20
25523: DOUBLE
25524: EQUAL
25525: IFTRUE 25529
25527: GO 25554
25529: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
25530: NOP4
25534: PUSH
25535: LD_INT 6
25537: PPUSH
25538: NOP4
25542: PPUSH
25543: NOP4
25547: PUSH
25548: LD_INT 2
25550: EQUAL
25551: ST_TO_ADDR
25552: GO 25841
25554: LD_INT 22
25556: DOUBLE
25557: EQUAL
25558: IFTRUE 25568
25560: LD_INT 36
25562: DOUBLE
25563: EQUAL
25564: IFTRUE 25568
25566: GO 25593
25568: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
25569: NOP4
25573: PUSH
25574: LD_INT 15
25576: PPUSH
25577: NOP4
25581: PPUSH
25582: NOP4
25586: PUSH
25587: LD_INT 2
25589: EQUAL
25590: ST_TO_ADDR
25591: GO 25841
25593: LD_INT 30
25595: DOUBLE
25596: EQUAL
25597: IFTRUE 25601
25599: GO 25626
25601: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
25602: NOP4
25606: PUSH
25607: LD_INT 20
25609: PPUSH
25610: NOP4
25614: PPUSH
25615: NOP4
25619: PUSH
25620: LD_INT 2
25622: EQUAL
25623: ST_TO_ADDR
25624: GO 25841
25626: LD_INT 28
25628: DOUBLE
25629: EQUAL
25630: IFTRUE 25640
25632: LD_INT 21
25634: DOUBLE
25635: EQUAL
25636: IFTRUE 25640
25638: GO 25665
25640: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
25641: NOP4
25645: PUSH
25646: LD_INT 21
25648: PPUSH
25649: NOP4
25653: PPUSH
25654: NOP4
25658: PUSH
25659: LD_INT 2
25661: EQUAL
25662: ST_TO_ADDR
25663: GO 25841
25665: LD_INT 16
25667: DOUBLE
25668: EQUAL
25669: IFTRUE 25673
25671: GO 25700
25673: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
25674: NOP4
25678: PUSH
25679: NOP4
25683: PPUSH
25684: NOP4
25688: PPUSH
25689: NOP4
25693: PUSH
25694: LD_INT 2
25696: EQUAL
25697: ST_TO_ADDR
25698: GO 25841
25700: LD_INT 19
25702: DOUBLE
25703: EQUAL
25704: IFTRUE 25714
25706: LD_INT 23
25708: DOUBLE
25709: EQUAL
25710: IFTRUE 25714
25712: GO 25741
25714: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
25715: NOP4
25719: PUSH
25720: NOP4
25724: PPUSH
25725: NOP4
25729: PPUSH
25730: NOP4
25734: PUSH
25735: LD_INT 2
25737: EQUAL
25738: ST_TO_ADDR
25739: GO 25841
25741: LD_INT 17
25743: DOUBLE
25744: EQUAL
25745: IFTRUE 25749
25747: GO 25774
25749: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
25750: NOP4
25754: PUSH
25755: LD_INT 39
25757: PPUSH
25758: NOP4
25762: PPUSH
25763: NOP4
25767: PUSH
25768: LD_INT 2
25770: EQUAL
25771: ST_TO_ADDR
25772: GO 25841
25774: LD_INT 18
25776: DOUBLE
25777: EQUAL
25778: IFTRUE 25782
25780: GO 25807
25782: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
25783: NOP4
25787: PUSH
25788: LD_INT 40
25790: PPUSH
25791: NOP4
25795: PPUSH
25796: NOP4
25800: PUSH
25801: LD_INT 2
25803: EQUAL
25804: ST_TO_ADDR
25805: GO 25841
25807: LD_INT 27
25809: DOUBLE
25810: EQUAL
25811: IFTRUE 25815
25813: GO 25840
25815: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
25816: NOP4
25820: PUSH
25821: LD_INT 35
25823: PPUSH
25824: NOP4
25828: PPUSH
25829: NOP4
25833: PUSH
25834: LD_INT 2
25836: EQUAL
25837: ST_TO_ADDR
25838: GO 25841
25840: POP
// end ;
25841: LD_VAR 0 3
25845: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
25846: LD_INT 0
25848: PPUSH
25849: PPUSH
25850: PPUSH
25851: PPUSH
25852: PPUSH
25853: PPUSH
25854: PPUSH
25855: PPUSH
25856: PPUSH
25857: PPUSH
25858: PPUSH
// result := false ;
25859: NOP4
25863: PUSH
25864: LD_INT 0
25866: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
25867: NOP4
25871: NOT
25872: PUSH
25873: NOP4
25877: PPUSH
25878: NOP4
25882: PUSH
25883: LD_INT 0
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: IN
25893: NOT
25894: OR
25895: PUSH
25896: NOP4
25900: NOT
25901: OR
25902: PUSH
25903: NOP4
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: LD_INT 2
25916: PUSH
25917: LD_INT 3
25919: PUSH
25920: LD_INT 4
25922: PUSH
25923: LD_INT 5
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: IN
25934: NOT
25935: OR
25936: PUSH
25937: NOP4
25941: PPUSH
25942: NOP4
25946: PPUSH
25947: NOP4
25951: NOT
25952: OR
25953: IFFALSE 25957
// exit ;
25955: GO 26693
// side := GetSide ( depot ) ;
25957: NOP4
25961: PUSH
25962: NOP4
25966: PPUSH
25967: NOP4
25971: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
25972: NOP4
25976: PPUSH
25977: NOP4
25981: PPUSH
25982: NOP4
25986: NOT
25987: IFFALSE 25991
// exit ;
25989: GO 26693
// pom := GetBase ( depot ) ;
25991: NOP4
25995: PUSH
25996: NOP4
26000: PPUSH
26001: NOP4
26005: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
26006: NOP4
26010: PUSH
26011: NOP4
26015: PPUSH
26016: NOP4
26020: PPUSH
26021: NOP4
26025: PPUSH
26026: NOP4
26030: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
26031: NOP4
26035: PPUSH
26036: LD_INT 1
26038: PPUSH
26039: NOP4
26043: PUSH
26044: NOP4
26048: PUSH
26049: LD_INT 1
26051: ARRAY
26052: GREATEREQUAL
26053: PUSH
26054: NOP4
26058: PPUSH
26059: LD_INT 2
26061: PPUSH
26062: NOP4
26066: PUSH
26067: NOP4
26071: PUSH
26072: LD_INT 2
26074: ARRAY
26075: GREATEREQUAL
26076: AND
26077: PUSH
26078: NOP4
26082: PPUSH
26083: LD_INT 3
26085: PPUSH
26086: NOP4
26090: PUSH
26091: NOP4
26095: PUSH
26096: LD_INT 3
26098: ARRAY
26099: GREATEREQUAL
26100: AND
26101: NOT
26102: IFFALSE 26106
// exit ;
26104: GO 26693
// if GetBType ( depot ) = b_depot then
26106: NOP4
26110: PPUSH
26111: NOP4
26115: PUSH
26116: LD_INT 0
26118: EQUAL
26119: IFFALSE 26131
// dist := 28 else
26121: NOP4
26125: PUSH
26126: LD_INT 28
26128: ST_TO_ADDR
26129: GO 26139
// dist := 36 ;
26131: NOP4
26135: PUSH
26136: LD_INT 36
26138: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
26139: NOP4
26143: PPUSH
26144: NOP4
26148: PPUSH
26149: NOP4
26153: PPUSH
26154: NOP4
26158: PUSH
26159: NOP4
26163: GREATER
26164: IFFALSE 26168
// exit ;
26166: GO 26693
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
26168: NOP4
26172: PUSH
26173: NOP4
26177: PPUSH
26178: NOP4
26182: PPUSH
26183: NOP4
26187: PPUSH
26188: NOP4
26192: PPUSH
26193: NOP4
26197: PPUSH
26198: NOP4
26202: PPUSH
26203: LD_INT 0
26205: PPUSH
26206: NOP4
26210: ST_TO_ADDR
// if not hexes then
26211: NOP4
26215: NOT
26216: IFFALSE 26220
// exit ;
26218: GO 26693
// hex := GetHexInfo ( x , y ) ;
26220: NOP4
26224: PUSH
26225: NOP4
26229: PPUSH
26230: NOP4
26234: PPUSH
26235: NOP4
26239: ST_TO_ADDR
// if hex [ 1 ] then
26240: NOP4
26244: PUSH
26245: LD_INT 1
26247: ARRAY
26248: IFFALSE 26252
// exit ;
26250: GO 26693
// height := hex [ 2 ] ;
26252: NOP4
26256: PUSH
26257: NOP4
26261: PUSH
26262: LD_INT 2
26264: ARRAY
26265: ST_TO_ADDR
// for i = 1 to hexes do
26266: NOP4
26270: PUSH
26271: DOUBLE
26272: LD_INT 1
26274: DEC
26275: ST_TO_ADDR
26276: NOP4
26280: PUSH
26281: FOR_TO
26282: IFFALSE 26612
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
26284: NOP4
26288: PUSH
26289: NOP4
26293: ARRAY
26294: PUSH
26295: LD_INT 1
26297: ARRAY
26298: PPUSH
26299: NOP4
26303: PUSH
26304: NOP4
26308: ARRAY
26309: PUSH
26310: LD_INT 2
26312: ARRAY
26313: PPUSH
26314: NOP4
26318: NOT
26319: PUSH
26320: NOP4
26324: PUSH
26325: NOP4
26329: ARRAY
26330: PUSH
26331: LD_INT 1
26333: ARRAY
26334: PPUSH
26335: NOP4
26339: PUSH
26340: NOP4
26344: ARRAY
26345: PUSH
26346: LD_INT 2
26348: ARRAY
26349: PPUSH
26350: NOP4
26354: PUSH
26355: LD_INT 0
26357: GREATER
26358: OR
26359: PUSH
26360: NOP4
26364: PUSH
26365: NOP4
26369: ARRAY
26370: PUSH
26371: LD_INT 1
26373: ARRAY
26374: PPUSH
26375: NOP4
26379: PUSH
26380: NOP4
26384: ARRAY
26385: PUSH
26386: LD_INT 2
26388: ARRAY
26389: PPUSH
26390: NOP4
26394: OR
26395: IFFALSE 26401
// exit ;
26397: POP
26398: POP
26399: GO 26693
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26401: NOP4
26405: PUSH
26406: NOP4
26410: PUSH
26411: NOP4
26415: ARRAY
26416: PUSH
26417: LD_INT 1
26419: ARRAY
26420: PPUSH
26421: NOP4
26425: PUSH
26426: NOP4
26430: ARRAY
26431: PUSH
26432: LD_INT 2
26434: ARRAY
26435: PPUSH
26436: NOP4
26440: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
26441: NOP4
26445: PUSH
26446: LD_INT 1
26448: ARRAY
26449: PUSH
26450: NOP4
26454: PUSH
26455: LD_INT 2
26457: ARRAY
26458: PUSH
26459: NOP4
26463: PUSH
26464: LD_INT 2
26466: PLUS
26467: GREATER
26468: OR
26469: PUSH
26470: NOP4
26474: PUSH
26475: LD_INT 2
26477: ARRAY
26478: PUSH
26479: NOP4
26483: PUSH
26484: LD_INT 2
26486: MINUS
26487: LESS
26488: OR
26489: PUSH
26490: NOP4
26494: PUSH
26495: LD_INT 3
26497: ARRAY
26498: PUSH
26499: LD_INT 0
26501: PUSH
26502: LD_INT 8
26504: PUSH
26505: LD_INT 9
26507: PUSH
26508: LD_INT 10
26510: PUSH
26511: LD_INT 11
26513: PUSH
26514: LD_INT 12
26516: PUSH
26517: LD_INT 13
26519: PUSH
26520: LD_INT 16
26522: PUSH
26523: LD_INT 17
26525: PUSH
26526: LD_INT 18
26528: PUSH
26529: LD_INT 19
26531: PUSH
26532: LD_INT 20
26534: PUSH
26535: LD_INT 21
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: IN
26553: NOT
26554: OR
26555: PUSH
26556: NOP4
26560: PUSH
26561: LD_INT 5
26563: ARRAY
26564: NOT
26565: OR
26566: PUSH
26567: NOP4
26571: PUSH
26572: LD_INT 6
26574: ARRAY
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: LD_INT 2
26581: PUSH
26582: LD_INT 7
26584: PUSH
26585: LD_INT 9
26587: PUSH
26588: LD_INT 10
26590: PUSH
26591: LD_INT 11
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: IN
26602: NOT
26603: OR
26604: IFFALSE 26610
// exit ;
26606: POP
26607: POP
26608: GO 26693
// end ;
26610: GO 26281
26612: POP
26613: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
26614: NOP4
26618: PPUSH
26619: NOP4
26623: PPUSH
26624: NOP4
26628: PPUSH
26629: LD_INT 20
26631: PPUSH
26632: NOP4
26636: PUSH
26637: LD_INT 4
26639: ARRAY
26640: IFFALSE 26644
// exit ;
26642: GO 26693
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
26644: NOP4
26648: PUSH
26649: LD_INT 29
26651: PUSH
26652: LD_INT 30
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: IN
26659: PUSH
26660: NOP4
26664: PPUSH
26665: NOP4
26669: PPUSH
26670: NOP4
26674: PPUSH
26675: NOP4
26679: NOT
26680: AND
26681: IFFALSE 26685
// exit ;
26683: GO 26693
// result := true ;
26685: NOP4
26689: PUSH
26690: LD_INT 1
26692: ST_TO_ADDR
// end ;
26693: LD_VAR 0 6
26697: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
26698: LD_INT 0
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
26704: PPUSH
26705: PPUSH
26706: PPUSH
26707: PPUSH
26708: PPUSH
26709: PPUSH
26710: PPUSH
26711: PPUSH
26712: PPUSH
26713: PPUSH
26714: PPUSH
26715: PPUSH
26716: PPUSH
26717: PPUSH
26718: PPUSH
26719: PPUSH
26720: PPUSH
26721: PPUSH
26722: PPUSH
26723: PPUSH
26724: PPUSH
26725: PPUSH
26726: PPUSH
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
26736: PPUSH
26737: PPUSH
26738: PPUSH
26739: PPUSH
26740: PPUSH
26741: PPUSH
26742: PPUSH
26743: PPUSH
26744: PPUSH
26745: PPUSH
26746: PPUSH
26747: PPUSH
26748: PPUSH
26749: PPUSH
26750: PPUSH
26751: PPUSH
26752: PPUSH
26753: PPUSH
26754: PPUSH
26755: PPUSH
26756: PPUSH
26757: PPUSH
// result = [ ] ;
26758: NOP4
26762: PUSH
26763: EMPTY
26764: ST_TO_ADDR
// temp_list = [ ] ;
26765: NOP4
26769: PUSH
26770: EMPTY
26771: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
26772: NOP4
26776: PUSH
26777: LD_INT 0
26779: PUSH
26780: LD_INT 1
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: LD_INT 3
26788: PUSH
26789: LD_INT 4
26791: PUSH
26792: LD_INT 5
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: IN
26803: NOT
26804: PUSH
26805: NOP4
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: IN
26820: PUSH
26821: NOP4
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: LD_INT 2
26831: PUSH
26832: LD_INT 3
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: LIST
26839: IN
26840: NOT
26841: AND
26842: OR
26843: IFFALSE 26847
// exit ;
26845: GO 45238
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
26847: NOP4
26851: PUSH
26852: LD_INT 6
26854: PUSH
26855: LD_INT 7
26857: PUSH
26858: LD_INT 8
26860: PUSH
26861: LD_INT 13
26863: PUSH
26864: LD_INT 12
26866: PUSH
26867: LD_INT 15
26869: PUSH
26870: LD_INT 11
26872: PUSH
26873: LD_INT 14
26875: PUSH
26876: LD_INT 10
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: IN
26890: IFFALSE 26900
// btype = b_lab ;
26892: NOP4
26896: PUSH
26897: LD_INT 6
26899: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
26900: NOP4
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: LIST
26918: IN
26919: NOT
26920: PUSH
26921: NOP4
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: LD_INT 2
26934: PUSH
26935: LD_INT 3
26937: PUSH
26938: LD_INT 6
26940: PUSH
26941: LD_INT 36
26943: PUSH
26944: LD_INT 4
26946: PUSH
26947: LD_INT 5
26949: PUSH
26950: LD_INT 31
26952: PUSH
26953: LD_INT 32
26955: PUSH
26956: LD_INT 33
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: IN
26972: NOT
26973: PUSH
26974: NOP4
26978: PUSH
26979: LD_INT 1
26981: EQUAL
26982: AND
26983: OR
26984: PUSH
26985: NOP4
26989: PUSH
26990: LD_INT 2
26992: PUSH
26993: LD_INT 3
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: IN
27000: NOT
27001: PUSH
27002: NOP4
27006: PUSH
27007: LD_INT 2
27009: EQUAL
27010: AND
27011: OR
27012: IFFALSE 27022
// mode = 0 ;
27014: NOP4
27018: PUSH
27019: LD_INT 0
27021: ST_TO_ADDR
// case mode of 0 :
27022: NOP4
27026: PUSH
27027: LD_INT 0
27029: DOUBLE
27030: EQUAL
27031: IFTRUE 27035
27033: GO 38488
27035: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27036: NOP4
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: LD_INT 0
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: PUSH
27051: LD_INT 0
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 1
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: LD_INT 1
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 1
27094: NEG
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 1
27105: NEG
27106: PUSH
27107: LD_INT 1
27109: NEG
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 1
27117: NEG
27118: PUSH
27119: LD_INT 2
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 2
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 2
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 1
27171: NEG
27172: PUSH
27173: LD_INT 1
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: LD_INT 3
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 3
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: LD_INT 2
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27229: NOP4
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: LD_INT 0
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: LD_INT 1
27249: NEG
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 1
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 2
27321: PUSH
27322: LD_INT 0
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: LD_INT 2
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 1
27341: NEG
27342: PUSH
27343: LD_INT 1
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 2
27352: NEG
27353: PUSH
27354: LD_INT 0
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: PUSH
27361: LD_INT 2
27363: NEG
27364: PUSH
27365: LD_INT 1
27367: NEG
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 3
27386: NEG
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 3
27397: NEG
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27425: NOP4
27429: PUSH
27430: LD_INT 0
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: LD_INT 1
27445: NEG
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 1
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 1
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 1
27483: NEG
27484: PUSH
27485: LD_INT 0
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: LD_INT 1
27498: NEG
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 1
27506: NEG
27507: PUSH
27508: LD_INT 2
27510: NEG
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: LD_INT 1
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 2
27528: PUSH
27529: LD_INT 2
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 1
27538: PUSH
27539: LD_INT 2
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 2
27548: NEG
27549: PUSH
27550: LD_INT 1
27552: NEG
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 2
27560: NEG
27561: PUSH
27562: LD_INT 2
27564: NEG
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PUSH
27570: LD_INT 2
27572: NEG
27573: PUSH
27574: LD_INT 3
27576: NEG
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: PUSH
27582: LD_INT 3
27584: NEG
27585: PUSH
27586: LD_INT 2
27588: NEG
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 3
27596: NEG
27597: PUSH
27598: LD_INT 3
27600: NEG
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27624: NOP4
27628: PUSH
27629: LD_INT 0
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: LD_INT 1
27644: NEG
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: LD_INT 1
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: PUSH
27660: LD_INT 1
27662: PUSH
27663: LD_INT 1
27665: PUSH
27666: EMPTY
27667: LIST
27668: LIST
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: LD_INT 1
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: LD_INT 0
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: NEG
27694: PUSH
27695: LD_INT 1
27697: NEG
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 1
27705: NEG
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 0
27717: PUSH
27718: LD_INT 2
27720: NEG
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 1
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: LD_INT 2
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 0
27749: PUSH
27750: LD_INT 2
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: PUSH
27772: LD_INT 3
27774: NEG
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 0
27782: PUSH
27783: LD_INT 3
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: LD_INT 2
27796: NEG
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27820: NOP4
27824: PUSH
27825: LD_INT 0
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 0
27837: PUSH
27838: LD_INT 1
27840: NEG
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PUSH
27846: LD_INT 1
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: PUSH
27856: LD_INT 1
27858: PUSH
27859: LD_INT 1
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: LD_INT 1
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: PUSH
27876: LD_INT 1
27878: NEG
27879: PUSH
27880: LD_INT 0
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 1
27889: NEG
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: PUSH
27902: LD_INT 1
27904: NEG
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 2
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 2
27943: NEG
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 2
27954: NEG
27955: PUSH
27956: LD_INT 1
27958: NEG
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 2
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 3
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 3
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28013: NOP4
28017: PUSH
28018: LD_INT 0
28020: PUSH
28021: LD_INT 0
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 0
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 1
28071: NEG
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: NEG
28083: PUSH
28084: LD_INT 1
28086: NEG
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 1
28094: NEG
28095: PUSH
28096: LD_INT 2
28098: NEG
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 2
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: EMPTY
28111: LIST
28112: LIST
28113: PUSH
28114: LD_INT 2
28116: PUSH
28117: LD_INT 2
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 1
28126: PUSH
28127: LD_INT 2
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 2
28136: NEG
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 2
28148: NEG
28149: PUSH
28150: LD_INT 2
28152: NEG
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 3
28160: PUSH
28161: LD_INT 2
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 3
28170: PUSH
28171: LD_INT 3
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 2
28180: PUSH
28181: LD_INT 3
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28206: NOP4
28210: PUSH
28211: LD_INT 0
28213: PUSH
28214: LD_INT 0
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: LD_INT 1
28226: NEG
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: PUSH
28245: LD_INT 1
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 0
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 1
28264: NEG
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 1
28275: NEG
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 1
28287: NEG
28288: PUSH
28289: LD_INT 2
28291: NEG
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: LD_INT 2
28302: NEG
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 1
28310: PUSH
28311: LD_INT 1
28313: NEG
28314: PUSH
28315: EMPTY
28316: LIST
28317: LIST
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: LD_INT 0
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 2
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: LD_INT 2
28341: PUSH
28342: LD_INT 2
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: LD_INT 2
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: LD_INT 2
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 2
28382: NEG
28383: PUSH
28384: LD_INT 0
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: PUSH
28391: LD_INT 2
28393: NEG
28394: PUSH
28395: LD_INT 1
28397: NEG
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 2
28405: NEG
28406: PUSH
28407: LD_INT 2
28409: NEG
28410: PUSH
28411: EMPTY
28412: LIST
28413: LIST
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28436: NOP4
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: LD_INT 1
28456: NEG
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 1
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: EMPTY
28469: LIST
28470: LIST
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: LD_INT 1
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 0
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 1
28494: NEG
28495: PUSH
28496: LD_INT 0
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: LD_INT 2
28521: NEG
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: PUSH
28527: LD_INT 0
28529: PUSH
28530: LD_INT 2
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 1
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 2
28551: PUSH
28552: LD_INT 0
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 2
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 2
28571: PUSH
28572: LD_INT 2
28574: PUSH
28575: EMPTY
28576: LIST
28577: LIST
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: LD_INT 2
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 0
28591: PUSH
28592: LD_INT 2
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 1
28601: NEG
28602: PUSH
28603: LD_INT 1
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: LD_INT 2
28612: NEG
28613: PUSH
28614: LD_INT 0
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 2
28623: NEG
28624: PUSH
28625: LD_INT 1
28627: NEG
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 2
28635: NEG
28636: PUSH
28637: LD_INT 2
28639: NEG
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28666: NOP4
28670: PUSH
28671: LD_INT 0
28673: PUSH
28674: LD_INT 0
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 1
28686: NEG
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: LD_INT 1
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 0
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: NEG
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 1
28735: NEG
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 1
28747: NEG
28748: PUSH
28749: LD_INT 2
28751: NEG
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 0
28759: PUSH
28760: LD_INT 2
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: LD_INT 1
28773: NEG
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 2
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: PUSH
28802: LD_INT 2
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: LD_INT 2
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 0
28821: PUSH
28822: LD_INT 2
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 2
28842: NEG
28843: PUSH
28844: LD_INT 0
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 2
28853: NEG
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 2
28865: NEG
28866: PUSH
28867: LD_INT 2
28869: NEG
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28896: NOP4
28900: PUSH
28901: LD_INT 0
28903: PUSH
28904: LD_INT 0
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: PUSH
28935: LD_INT 1
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 1
28954: NEG
28955: PUSH
28956: LD_INT 0
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: LD_INT 1
28969: NEG
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 1
28977: NEG
28978: PUSH
28979: LD_INT 2
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 2
28992: NEG
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 2
29011: PUSH
29012: LD_INT 0
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 2
29021: PUSH
29022: LD_INT 1
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 2
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 1
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 0
29051: PUSH
29052: LD_INT 2
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: LD_INT 1
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 2
29072: NEG
29073: PUSH
29074: LD_INT 0
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 2
29083: NEG
29084: PUSH
29085: LD_INT 1
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 2
29095: NEG
29096: PUSH
29097: LD_INT 2
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29126: NOP4
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 1
29195: NEG
29196: PUSH
29197: LD_INT 1
29199: NEG
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: LD_INT 2
29211: NEG
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: LD_INT 2
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 2
29241: PUSH
29242: LD_INT 0
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 2
29251: PUSH
29252: LD_INT 1
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 2
29261: PUSH
29262: LD_INT 2
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 1
29271: PUSH
29272: LD_INT 2
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: LD_INT 2
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: LD_INT 1
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 2
29302: NEG
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: NEG
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 2
29325: NEG
29326: PUSH
29327: LD_INT 2
29329: NEG
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29356: NOP4
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 0
29373: PUSH
29374: LD_INT 1
29376: NEG
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: LD_INT 0
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: LD_INT 1
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: LD_INT 1
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: LD_INT 1
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 1
29437: NEG
29438: PUSH
29439: LD_INT 2
29441: NEG
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 2
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: PUSH
29461: LD_INT 1
29463: NEG
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 2
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 2
29491: PUSH
29492: LD_INT 2
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: LD_INT 2
29504: PUSH
29505: EMPTY
29506: LIST
29507: LIST
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 1
29521: NEG
29522: PUSH
29523: LD_INT 1
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 2
29532: NEG
29533: PUSH
29534: LD_INT 0
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 2
29543: NEG
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 2
29555: NEG
29556: PUSH
29557: LD_INT 2
29559: NEG
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: PUSH
29565: EMPTY
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
29586: NOP4
29590: PUSH
29591: LD_INT 0
29593: PUSH
29594: LD_INT 0
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: LD_INT 1
29606: NEG
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: LD_INT 0
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 1
29624: PUSH
29625: LD_INT 1
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 0
29634: PUSH
29635: LD_INT 1
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: LD_INT 1
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 1
29667: NEG
29668: PUSH
29669: LD_INT 2
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: LD_INT 2
29682: NEG
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 1
29690: PUSH
29691: LD_INT 1
29693: NEG
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 2
29721: PUSH
29722: LD_INT 2
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 1
29731: PUSH
29732: LD_INT 2
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 0
29741: PUSH
29742: LD_INT 2
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 1
29751: NEG
29752: PUSH
29753: LD_INT 1
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 2
29762: NEG
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: LD_INT 1
29777: NEG
29778: PUSH
29779: EMPTY
29780: LIST
29781: LIST
29782: PUSH
29783: LD_INT 2
29785: NEG
29786: PUSH
29787: LD_INT 2
29789: NEG
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 2
29797: NEG
29798: PUSH
29799: LD_INT 3
29801: NEG
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: LD_INT 3
29813: NEG
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: LD_INT 2
29824: NEG
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 2
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
29866: NOP4
29870: PUSH
29871: LD_INT 0
29873: PUSH
29874: LD_INT 0
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 0
29883: PUSH
29884: LD_INT 1
29886: NEG
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 0
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: EMPTY
29919: LIST
29920: LIST
29921: PUSH
29922: LD_INT 1
29924: NEG
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: LD_INT 2
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: LD_INT 1
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 2
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 2
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 1
30011: PUSH
30012: LD_INT 2
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 2
30042: NEG
30043: PUSH
30044: LD_INT 0
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 2
30053: NEG
30054: PUSH
30055: LD_INT 1
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 2
30065: NEG
30066: PUSH
30067: LD_INT 2
30069: NEG
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: LD_INT 2
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: PUSH
30089: LD_INT 1
30091: NEG
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 3
30099: PUSH
30100: LD_INT 1
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 3
30109: PUSH
30110: LD_INT 2
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: EMPTY
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
30142: NOP4
30146: PUSH
30147: LD_INT 0
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 0
30159: PUSH
30160: LD_INT 1
30162: NEG
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 0
30190: PUSH
30191: LD_INT 1
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: LD_INT 0
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: NEG
30224: PUSH
30225: LD_INT 2
30227: NEG
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 0
30235: PUSH
30236: LD_INT 2
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 1
30246: PUSH
30247: LD_INT 1
30249: NEG
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 2
30257: PUSH
30258: LD_INT 0
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 2
30267: PUSH
30268: LD_INT 1
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: LD_INT 2
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: LD_INT 2
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 1
30307: NEG
30308: PUSH
30309: LD_INT 1
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 2
30318: NEG
30319: PUSH
30320: LD_INT 0
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 2
30329: NEG
30330: PUSH
30331: LD_INT 1
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 2
30341: NEG
30342: PUSH
30343: LD_INT 2
30345: NEG
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 3
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 3
30363: PUSH
30364: LD_INT 2
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 2
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 1
30383: PUSH
30384: LD_INT 3
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30416: NOP4
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: LD_INT 0
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: LD_INT 0
30433: PUSH
30434: LD_INT 1
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 1
30444: PUSH
30445: LD_INT 0
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: LD_INT 1
30489: NEG
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 1
30497: NEG
30498: PUSH
30499: LD_INT 2
30501: NEG
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: LD_INT 2
30512: NEG
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: PUSH
30521: LD_INT 1
30523: NEG
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 2
30531: PUSH
30532: LD_INT 0
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 2
30541: PUSH
30542: LD_INT 1
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 2
30551: PUSH
30552: LD_INT 2
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 1
30561: PUSH
30562: LD_INT 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: NEG
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 2
30603: NEG
30604: PUSH
30605: LD_INT 1
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 2
30615: NEG
30616: PUSH
30617: LD_INT 2
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 2
30627: PUSH
30628: LD_INT 3
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: PUSH
30638: LD_INT 3
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 1
30647: NEG
30648: PUSH
30649: LD_INT 2
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 2
30658: NEG
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30692: NOP4
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 1
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 1
30733: PUSH
30734: EMPTY
30735: LIST
30736: LIST
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: LD_INT 1
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: LD_INT 1
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: LD_INT 2
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: LD_INT 2
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 1
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 2
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PUSH
30815: LD_INT 2
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 2
30827: PUSH
30828: LD_INT 2
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: LD_INT 2
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 1
30857: NEG
30858: PUSH
30859: LD_INT 1
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: LD_INT 0
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: NEG
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 2
30891: NEG
30892: PUSH
30893: LD_INT 2
30895: NEG
30896: PUSH
30897: EMPTY
30898: LIST
30899: LIST
30900: PUSH
30901: LD_INT 1
30903: NEG
30904: PUSH
30905: LD_INT 2
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 2
30914: NEG
30915: PUSH
30916: LD_INT 1
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 3
30925: NEG
30926: PUSH
30927: LD_INT 1
30929: NEG
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 3
30937: NEG
30938: PUSH
30939: LD_INT 2
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30972: NOP4
30976: PUSH
30977: LD_INT 0
30979: PUSH
30980: LD_INT 0
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: LD_INT 1
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 1
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: LD_INT 0
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: NEG
31042: PUSH
31043: LD_INT 1
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: NEG
31054: PUSH
31055: LD_INT 2
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 0
31065: PUSH
31066: LD_INT 2
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: LD_INT 1
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 2
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 2
31107: PUSH
31108: LD_INT 2
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 1
31117: PUSH
31118: LD_INT 2
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: LD_INT 2
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: LD_INT 1
31137: NEG
31138: PUSH
31139: LD_INT 1
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: PUSH
31146: LD_INT 2
31148: NEG
31149: PUSH
31150: LD_INT 0
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 2
31159: NEG
31160: PUSH
31161: LD_INT 1
31163: NEG
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 2
31171: NEG
31172: PUSH
31173: LD_INT 2
31175: NEG
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 2
31183: NEG
31184: PUSH
31185: LD_INT 3
31187: NEG
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: LD_INT 3
31199: NEG
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 3
31207: NEG
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 3
31219: NEG
31220: PUSH
31221: LD_INT 2
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31254: NOP4
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: LD_INT 0
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: LD_INT 0
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: LD_INT 2
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: LD_INT 2
31350: NEG
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 1
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 2
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: LD_INT 1
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: LD_INT 2
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: NEG
31410: PUSH
31411: LD_INT 1
31413: PUSH
31414: EMPTY
31415: LIST
31416: LIST
31417: PUSH
31418: LD_INT 2
31420: NEG
31421: PUSH
31422: LD_INT 1
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 2
31432: NEG
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 2
31444: NEG
31445: PUSH
31446: LD_INT 3
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 2
31456: PUSH
31457: LD_INT 1
31459: NEG
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 3
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: LD_INT 3
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 3
31498: NEG
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31533: NOP4
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 1
31602: NEG
31603: PUSH
31604: LD_INT 1
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 2
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 2
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 2
31699: NEG
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: LD_INT 3
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: LD_INT 2
31737: NEG
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 3
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: LD_INT 3
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 2
31765: NEG
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 3
31776: NEG
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
31811: NOP4
31815: PUSH
31816: LD_INT 0
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: EMPTY
31834: LIST
31835: LIST
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: PUSH
31847: LD_INT 1
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: LD_INT 0
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: LD_INT 2
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 2
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 2
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 2
31935: PUSH
31936: LD_INT 2
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 1
31945: PUSH
31946: LD_INT 2
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: NEG
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 2
31976: NEG
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 2
31988: NEG
31989: PUSH
31990: LD_INT 2
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 2
32000: NEG
32001: PUSH
32002: LD_INT 3
32004: NEG
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 2
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 3
32023: PUSH
32024: LD_INT 1
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: LD_INT 3
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: NEG
32044: PUSH
32045: LD_INT 2
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 3
32054: NEG
32055: PUSH
32056: LD_INT 2
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32089: NOP4
32093: PUSH
32094: LD_INT 0
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 0
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: LD_INT 0
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 0
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 1
32147: NEG
32148: PUSH
32149: LD_INT 0
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 1
32158: NEG
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: LD_INT 2
32174: NEG
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: LD_INT 2
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 1
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 2
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 2
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 2
32255: NEG
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 2
32266: NEG
32267: PUSH
32268: LD_INT 1
32270: NEG
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: LD_INT 3
32282: NEG
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: LD_INT 2
32293: NEG
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: PUSH
32299: LD_INT 3
32301: PUSH
32302: LD_INT 2
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: LD_INT 3
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 2
32321: NEG
32322: PUSH
32323: LD_INT 1
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 3
32332: NEG
32333: PUSH
32334: LD_INT 1
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32367: NOP4
32371: PUSH
32372: LD_INT 0
32374: PUSH
32375: LD_INT 0
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 0
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 1
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 1
32405: PUSH
32406: LD_INT 1
32408: PUSH
32409: EMPTY
32410: LIST
32411: LIST
32412: PUSH
32413: LD_INT 0
32415: PUSH
32416: LD_INT 1
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 1
32425: NEG
32426: PUSH
32427: LD_INT 0
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: LD_INT 1
32440: NEG
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 1
32448: NEG
32449: PUSH
32450: LD_INT 2
32452: NEG
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 1
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 2
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 1
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 0
32501: PUSH
32502: LD_INT 2
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 1
32511: NEG
32512: PUSH
32513: LD_INT 1
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: LD_INT 0
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 2
32533: NEG
32534: PUSH
32535: LD_INT 1
32537: NEG
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 2
32545: NEG
32546: PUSH
32547: LD_INT 2
32549: NEG
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 2
32557: NEG
32558: PUSH
32559: LD_INT 3
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 2
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 3
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: LD_INT 3
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: LD_INT 2
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 3
32611: NEG
32612: PUSH
32613: LD_INT 2
32615: NEG
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32646: NOP4
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 1
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: NEG
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: LD_INT 2
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 0
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 1
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 2
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 1
32781: PUSH
32782: LD_INT 2
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 1
32791: NEG
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 2
32802: NEG
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 2
32813: NEG
32814: PUSH
32815: LD_INT 1
32817: NEG
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 2
32825: NEG
32826: PUSH
32827: LD_INT 2
32829: NEG
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 1
32837: NEG
32838: PUSH
32839: LD_INT 3
32841: NEG
32842: PUSH
32843: EMPTY
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 1
32849: PUSH
32850: LD_INT 2
32852: NEG
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: PUSH
32861: LD_INT 2
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 3
32891: NEG
32892: PUSH
32893: LD_INT 1
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
32926: NOP4
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: LD_INT 1
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: LD_INT 1
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 1
32984: NEG
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 2
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: LD_INT 1
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33038: NOP4
33042: PUSH
33043: LD_INT 0
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 1
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: LD_INT 0
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 1
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 0
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: NEG
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: LD_INT 1
33111: NEG
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: PUSH
33121: LD_INT 2
33123: NEG
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33150: NOP4
33154: PUSH
33155: LD_INT 0
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: LD_INT 1
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 1
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 1
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: LD_INT 1
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 1
33208: NEG
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 1
33219: NEG
33220: PUSH
33221: LD_INT 1
33223: NEG
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: NEG
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
33262: NOP4
33266: PUSH
33267: LD_INT 0
33269: PUSH
33270: LD_INT 0
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 0
33279: PUSH
33280: LD_INT 1
33282: NEG
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 1
33290: PUSH
33291: LD_INT 0
33293: PUSH
33294: EMPTY
33295: LIST
33296: LIST
33297: PUSH
33298: LD_INT 1
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 1
33320: NEG
33321: PUSH
33322: LD_INT 0
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 1
33331: NEG
33332: PUSH
33333: LD_INT 1
33335: NEG
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: NEG
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
33374: NOP4
33378: PUSH
33379: LD_INT 0
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: LD_INT 1
33394: NEG
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 1
33402: PUSH
33403: LD_INT 0
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 0
33422: PUSH
33423: LD_INT 1
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 1
33432: NEG
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 1
33443: NEG
33444: PUSH
33445: LD_INT 1
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: LD_INT 2
33459: NEG
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: LD_INT 1
33467: PUSH
33468: LD_INT 2
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
33486: NOP4
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: LD_INT 0
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 1
33524: PUSH
33525: LD_INT 1
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: LD_INT 1
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 1
33544: NEG
33545: PUSH
33546: LD_INT 0
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 1
33555: NEG
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: LD_INT 1
33570: NEG
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 1
33578: NEG
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33598: NOP4
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: LD_INT 1
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: LD_INT 1
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: LD_INT 1
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: LD_INT 2
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: PUSH
33692: LD_INT 1
33694: NEG
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 2
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PUSH
33710: LD_INT 2
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PUSH
33720: LD_INT 2
33722: PUSH
33723: LD_INT 2
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: PUSH
33730: LD_INT 1
33732: PUSH
33733: LD_INT 2
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 1
33742: NEG
33743: PUSH
33744: LD_INT 1
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 2
33753: NEG
33754: PUSH
33755: LD_INT 0
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 2
33764: NEG
33765: PUSH
33766: LD_INT 1
33768: NEG
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 2
33776: NEG
33777: PUSH
33778: LD_INT 2
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 2
33788: NEG
33789: PUSH
33790: LD_INT 3
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 2
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 3
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 3
33821: PUSH
33822: LD_INT 1
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: PUSH
33829: LD_INT 3
33831: PUSH
33832: LD_INT 2
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 3
33841: PUSH
33842: LD_INT 3
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: LD_INT 3
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 2
33861: NEG
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 3
33872: NEG
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 3
33883: NEG
33884: PUSH
33885: LD_INT 1
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 3
33895: NEG
33896: PUSH
33897: LD_INT 2
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 3
33907: NEG
33908: PUSH
33909: LD_INT 3
33911: NEG
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33948: NOP4
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 1
33986: PUSH
33987: LD_INT 1
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: LD_INT 1
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 1
34006: NEG
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: LD_INT 1
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: LD_INT 2
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 0
34041: PUSH
34042: LD_INT 2
34044: NEG
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 1
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 2
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 2
34073: PUSH
34074: LD_INT 2
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: PUSH
34081: LD_INT 1
34083: PUSH
34084: LD_INT 2
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: PUSH
34091: LD_INT 0
34093: PUSH
34094: LD_INT 2
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PUSH
34101: LD_INT 1
34103: NEG
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 2
34114: NEG
34115: PUSH
34116: LD_INT 1
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 2
34126: NEG
34127: PUSH
34128: LD_INT 2
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 2
34138: NEG
34139: PUSH
34140: LD_INT 3
34142: NEG
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 1
34150: NEG
34151: PUSH
34152: LD_INT 3
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: LD_INT 3
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: PUSH
34174: LD_INT 2
34176: NEG
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 3
34184: PUSH
34185: LD_INT 2
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 3
34194: PUSH
34195: LD_INT 3
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 2
34204: PUSH
34205: LD_INT 3
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: PUSH
34215: LD_INT 3
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: LD_INT 3
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 3
34245: NEG
34246: PUSH
34247: LD_INT 2
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 3
34257: NEG
34258: PUSH
34259: LD_INT 3
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34298: NOP4
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 1
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: LD_INT 1
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 1
34356: NEG
34357: PUSH
34358: LD_INT 0
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: NEG
34368: PUSH
34369: LD_INT 1
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: NEG
34380: PUSH
34381: LD_INT 2
34383: NEG
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 0
34391: PUSH
34392: LD_INT 2
34394: NEG
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: LD_INT 1
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 2
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: PUSH
34434: LD_INT 2
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 0
34443: PUSH
34444: LD_INT 2
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: NEG
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 2
34464: NEG
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 2
34475: NEG
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: LD_INT 3
34491: NEG
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 3
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: PUSH
34522: LD_INT 1
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 3
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 3
34542: PUSH
34543: LD_INT 1
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 1
34552: PUSH
34553: LD_INT 3
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: LD_INT 3
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: NEG
34573: PUSH
34574: LD_INT 2
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 2
34583: NEG
34584: PUSH
34585: LD_INT 1
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 3
34594: NEG
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 3
34605: NEG
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34646: NOP4
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: LD_INT 0
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 0
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: NEG
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: LD_INT 1
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: LD_INT 1
34727: NEG
34728: PUSH
34729: LD_INT 2
34731: NEG
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 2
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 2
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 2
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: LD_INT 2
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 2
34801: NEG
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: EMPTY
34807: LIST
34808: LIST
34809: PUSH
34810: LD_INT 2
34812: NEG
34813: PUSH
34814: LD_INT 1
34816: NEG
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 2
34824: NEG
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: NEG
34837: PUSH
34838: LD_INT 3
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 2
34848: PUSH
34849: LD_INT 1
34851: NEG
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 3
34859: PUSH
34860: LD_INT 0
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 3
34869: PUSH
34870: LD_INT 1
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: LD_INT 2
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 3
34889: PUSH
34890: LD_INT 3
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: LD_INT 3
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 2
34909: NEG
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 3
34920: NEG
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 3
34931: NEG
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 3
34943: NEG
34944: PUSH
34945: LD_INT 2
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 3
34955: NEG
34956: PUSH
34957: LD_INT 3
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34996: NOP4
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 1
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: LD_INT 1
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: LD_INT 2
35081: NEG
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 0
35089: PUSH
35090: LD_INT 2
35092: NEG
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 1
35100: PUSH
35101: LD_INT 1
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 2
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 2
35121: PUSH
35122: LD_INT 2
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: LD_INT 2
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: LD_INT 2
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 2
35162: NEG
35163: PUSH
35164: LD_INT 1
35166: NEG
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 2
35174: NEG
35175: PUSH
35176: LD_INT 2
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 2
35186: NEG
35187: PUSH
35188: LD_INT 3
35190: NEG
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: LD_INT 3
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: LD_INT 3
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: LD_INT 2
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 3
35232: PUSH
35233: LD_INT 2
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 3
35242: PUSH
35243: LD_INT 3
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: LD_INT 3
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 3
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: LD_INT 3
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 3
35293: NEG
35294: PUSH
35295: LD_INT 2
35297: NEG
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 3
35305: NEG
35306: PUSH
35307: LD_INT 3
35309: NEG
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35346: NOP4
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 1
35374: PUSH
35375: LD_INT 0
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 1
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: NEG
35428: PUSH
35429: LD_INT 2
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: LD_INT 2
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_INT 2
35461: PUSH
35462: LD_INT 0
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: PUSH
35472: LD_INT 1
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: PUSH
35482: LD_INT 2
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: LD_INT 2
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: NEG
35502: PUSH
35503: LD_INT 1
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 2
35512: NEG
35513: PUSH
35514: LD_INT 0
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 2
35523: NEG
35524: PUSH
35525: LD_INT 1
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 1
35535: NEG
35536: PUSH
35537: LD_INT 3
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 0
35547: PUSH
35548: LD_INT 3
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 1
35558: PUSH
35559: LD_INT 2
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 2
35569: PUSH
35570: LD_INT 1
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 3
35580: PUSH
35581: LD_INT 0
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 3
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 1
35600: PUSH
35601: LD_INT 3
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: LD_INT 3
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 1
35620: NEG
35621: PUSH
35622: LD_INT 2
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 2
35631: NEG
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 3
35642: NEG
35643: PUSH
35644: LD_INT 0
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 3
35653: NEG
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35694: NOP4
35698: PUSH
35699: LD_INT 0
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 0
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: NEG
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: NEG
35764: PUSH
35765: LD_INT 1
35767: NEG
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 1
35775: NEG
35776: PUSH
35777: LD_INT 2
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: LD_INT 2
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 1
35798: PUSH
35799: LD_INT 1
35801: NEG
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 2
35809: NEG
35810: PUSH
35811: LD_INT 1
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 2
35821: NEG
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35845: NOP4
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: LD_INT 0
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 1
35903: NEG
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: LD_INT 2
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 0
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 1
35949: PUSH
35950: LD_INT 1
35952: NEG
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 2
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 2
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35992: NOP4
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 1
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 2
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: LD_INT 2
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
36136: NOP4
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: LD_INT 0
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: NEG
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: LD_INT 2
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 0
36247: PUSH
36248: LD_INT 2
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
36280: NOP4
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 0
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: LD_INT 0
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: LD_INT 1
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 2
36392: NEG
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 2
36403: NEG
36404: PUSH
36405: LD_INT 1
36407: NEG
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36427: NOP4
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 0
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 1
36485: NEG
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: NEG
36509: PUSH
36510: LD_INT 2
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: NEG
36532: PUSH
36533: LD_INT 0
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 2
36542: NEG
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 2
36554: NEG
36555: PUSH
36556: LD_INT 2
36558: NEG
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36578: NOP4
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: LD_INT 0
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 1
36636: NEG
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 1
36647: NEG
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: LD_INT 2
36663: NEG
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 2
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: EMPTY
36688: LIST
36689: LIST
36690: PUSH
36691: LD_INT 2
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 2
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 1
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: LD_INT 2
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: NEG
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 2
36754: NEG
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 2
36765: NEG
36766: PUSH
36767: LD_INT 1
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 2
36777: NEG
36778: PUSH
36779: LD_INT 2
36781: NEG
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36808: NOP4
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 0
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: PUSH
36875: LD_INT 1
36877: NEG
36878: PUSH
36879: LD_INT 1
36881: NEG
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: LD_INT 2
36893: NEG
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: LD_INT 2
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: LD_INT 1
36915: NEG
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: PUSH
36921: LD_INT 2
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 2
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 2
36943: PUSH
36944: LD_INT 2
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: LD_INT 2
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 0
36963: PUSH
36964: LD_INT 2
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 1
36973: NEG
36974: PUSH
36975: LD_INT 1
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 2
36984: NEG
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 2
36995: NEG
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: LD_INT 2
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37038: NOP4
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: LD_INT 1
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 1
37119: NEG
37120: PUSH
37121: LD_INT 2
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: LD_INT 2
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: LD_INT 0
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 2
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 1
37183: PUSH
37184: LD_INT 2
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 0
37193: PUSH
37194: LD_INT 2
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 1
37203: NEG
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 2
37214: NEG
37215: PUSH
37216: LD_INT 0
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 2
37225: NEG
37226: PUSH
37227: LD_INT 1
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 2
37237: NEG
37238: PUSH
37239: LD_INT 2
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37268: NOP4
37272: PUSH
37273: LD_INT 0
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 0
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: LD_INT 0
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 0
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 1
37341: NEG
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: NEG
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 2
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 2
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 2
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 1
37433: NEG
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 2
37444: NEG
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 2
37455: NEG
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 2
37467: NEG
37468: PUSH
37469: LD_INT 2
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37498: NOP4
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: NEG
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: LD_INT 2
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 2
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 2
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 2
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 2
37674: NEG
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: LD_INT 2
37701: NEG
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37728: NOP4
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 2
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: LD_INT 2
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 2
37904: NEG
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 2
37915: NEG
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 2
37927: NEG
37928: PUSH
37929: LD_INT 2
37931: NEG
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
37958: NOP4
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38046: NOP4
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: LD_INT 1
38066: NEG
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 1
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 0
38094: PUSH
38095: LD_INT 1
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: LD_INT 1
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38134: NOP4
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: LD_INT 0
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: LD_INT 1
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 0
38182: PUSH
38183: LD_INT 1
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 1
38192: NEG
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38222: NOP4
38226: PUSH
38227: LD_INT 0
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 0
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: LD_INT 0
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 0
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38310: NOP4
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
38398: NOP4
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 0
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 0
38415: PUSH
38416: LD_INT 1
38418: NEG
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 1
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 0
38446: PUSH
38447: LD_INT 1
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: LD_INT 0
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: LD_INT 1
38471: NEG
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: ST_TO_ADDR
// end ; 1 :
38486: GO 44383
38488: LD_INT 1
38490: DOUBLE
38491: EQUAL
38492: IFTRUE 38496
38494: GO 41119
38496: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38497: NOP4
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: LD_INT 3
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: LD_INT 3
38519: NEG
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: LD_INT 2
38530: NEG
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: LIST
38540: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38541: NOP4
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 3
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 3
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: LIST
38581: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38582: NOP4
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: LD_INT 2
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: LD_INT 3
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 2
38609: PUSH
38610: LD_INT 3
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: LIST
38621: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38622: NOP4
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: LD_INT 3
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: LD_INT 3
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: LD_INT 2
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38663: NOP4
38667: PUSH
38668: LD_INT 2
38670: NEG
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 3
38681: NEG
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 3
38692: NEG
38693: PUSH
38694: LD_INT 1
38696: NEG
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: LIST
38706: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38707: NOP4
38711: PUSH
38712: LD_INT 2
38714: NEG
38715: PUSH
38716: LD_INT 3
38718: NEG
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: LD_INT 3
38726: NEG
38727: PUSH
38728: LD_INT 2
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 3
38738: NEG
38739: PUSH
38740: LD_INT 3
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: LIST
38752: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38753: NOP4
38757: PUSH
38758: LD_INT 1
38760: NEG
38761: PUSH
38762: LD_INT 3
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 3
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: LD_INT 2
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: LIST
38796: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38797: NOP4
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: LD_INT 1
38807: NEG
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 3
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 3
38825: PUSH
38826: LD_INT 1
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38838: NOP4
38842: PUSH
38843: LD_INT 3
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 3
38855: PUSH
38856: LD_INT 3
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: LD_INT 3
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: LIST
38877: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38878: NOP4
38882: PUSH
38883: LD_INT 1
38885: PUSH
38886: LD_INT 3
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: LD_INT 3
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: LD_INT 2
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38919: NOP4
38923: PUSH
38924: LD_INT 2
38926: NEG
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 3
38937: NEG
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 3
38948: NEG
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38963: NOP4
38967: PUSH
38968: LD_INT 2
38970: NEG
38971: PUSH
38972: LD_INT 3
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 3
38982: NEG
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 3
38994: NEG
38995: PUSH
38996: LD_INT 3
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
39009: NOP4
39013: PUSH
39014: LD_INT 0
39016: PUSH
39017: LD_INT 3
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 1
39027: NEG
39028: PUSH
39029: LD_INT 4
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: LD_INT 3
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
39053: NOP4
39057: PUSH
39058: LD_INT 3
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 3
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 4
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
39094: NOP4
39098: PUSH
39099: LD_INT 3
39101: PUSH
39102: LD_INT 3
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 4
39111: PUSH
39112: LD_INT 3
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 3
39121: PUSH
39122: LD_INT 4
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: LIST
39133: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
39134: NOP4
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: LD_INT 3
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: LD_INT 4
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: LD_INT 3
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: LIST
39174: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
39175: NOP4
39179: PUSH
39180: LD_INT 3
39182: NEG
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 3
39193: NEG
39194: PUSH
39195: LD_INT 1
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 4
39204: NEG
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
39219: NOP4
39223: PUSH
39224: LD_INT 3
39226: NEG
39227: PUSH
39228: LD_INT 3
39230: NEG
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 3
39238: NEG
39239: PUSH
39240: LD_INT 4
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 4
39250: NEG
39251: PUSH
39252: LD_INT 3
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
39265: NOP4
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: LD_INT 3
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: LD_INT 3
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: LD_INT 2
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: LD_INT 4
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 0
39318: PUSH
39319: LD_INT 4
39321: NEG
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 1
39329: PUSH
39330: LD_INT 3
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: LD_INT 5
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 0
39352: PUSH
39353: LD_INT 5
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 4
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: LD_INT 6
39378: NEG
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: LD_INT 6
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: LD_INT 5
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
39420: NOP4
39424: PUSH
39425: LD_INT 2
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 3
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 3
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 3
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 4
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 4
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 4
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 5
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 5
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 5
39520: PUSH
39521: LD_INT 1
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 6
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 6
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
39563: NOP4
39567: PUSH
39568: LD_INT 3
39570: PUSH
39571: LD_INT 2
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: PUSH
39581: LD_INT 3
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 2
39590: PUSH
39591: LD_INT 3
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 4
39600: PUSH
39601: LD_INT 3
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 4
39610: PUSH
39611: LD_INT 4
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 3
39620: PUSH
39621: LD_INT 4
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 5
39630: PUSH
39631: LD_INT 4
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 5
39640: PUSH
39641: LD_INT 5
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 4
39650: PUSH
39651: LD_INT 5
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 6
39660: PUSH
39661: LD_INT 5
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 6
39670: PUSH
39671: LD_INT 6
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 5
39680: PUSH
39681: LD_INT 6
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
39702: NOP4
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 3
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 3
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 4
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 4
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 3
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: LD_INT 5
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: LD_INT 5
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: LD_INT 4
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: LD_INT 6
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 6
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: LD_INT 5
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
39845: NOP4
39849: PUSH
39850: LD_INT 2
39852: NEG
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 3
39863: NEG
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 3
39874: NEG
39875: PUSH
39876: LD_INT 1
39878: NEG
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 3
39886: NEG
39887: PUSH
39888: LD_INT 1
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 4
39897: NEG
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PUSH
39906: LD_INT 4
39908: NEG
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 4
39920: NEG
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 5
39931: NEG
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 5
39942: NEG
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 5
39954: NEG
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 6
39965: NEG
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 6
39976: NEG
39977: PUSH
39978: LD_INT 1
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
40000: NOP4
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: LD_INT 3
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 3
40019: NEG
40020: PUSH
40021: LD_INT 2
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 3
40031: NEG
40032: PUSH
40033: LD_INT 3
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 3
40043: NEG
40044: PUSH
40045: LD_INT 4
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 4
40055: NEG
40056: PUSH
40057: LD_INT 3
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 4
40067: NEG
40068: PUSH
40069: LD_INT 4
40071: NEG
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 4
40079: NEG
40080: PUSH
40081: LD_INT 5
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 5
40091: NEG
40092: PUSH
40093: LD_INT 4
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 5
40103: NEG
40104: PUSH
40105: LD_INT 5
40107: NEG
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 5
40115: NEG
40116: PUSH
40117: LD_INT 6
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 6
40127: NEG
40128: PUSH
40129: LD_INT 5
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 6
40139: NEG
40140: PUSH
40141: LD_INT 6
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
40163: NOP4
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: LD_INT 2
40173: NEG
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: LD_INT 3
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
40207: NOP4
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 3
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
40248: NOP4
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 3
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: LD_INT 3
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: LIST
40287: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
40288: NOP4
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: LIST
40328: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40329: NOP4
40333: PUSH
40334: LD_INT 2
40336: NEG
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: NEG
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 3
40358: NEG
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: LIST
40372: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
40373: NOP4
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: LD_INT 2
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: LD_INT 3
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 3
40404: NEG
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: LIST
40418: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
40419: NOP4
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 3
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: LD_INT 3
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40452: NOP4
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 2
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
40483: NOP4
40487: PUSH
40488: LD_INT 3
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 3
40500: PUSH
40501: LD_INT 2
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
40512: NOP4
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: LD_INT 3
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 3
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40541: NOP4
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: LD_INT 2
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 2
40559: NEG
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40572: NOP4
40576: PUSH
40577: LD_INT 3
40579: NEG
40580: PUSH
40581: LD_INT 1
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 3
40591: NEG
40592: PUSH
40593: LD_INT 2
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40605: NOP4
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: LD_INT 3
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 3
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: LD_INT 2
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: LIST
40648: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40649: NOP4
40653: PUSH
40654: LD_INT 2
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 3
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 3
40677: PUSH
40678: LD_INT 1
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: LIST
40689: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40690: NOP4
40694: PUSH
40695: LD_INT 3
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 3
40707: PUSH
40708: LD_INT 3
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 2
40717: PUSH
40718: LD_INT 3
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: LIST
40729: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40730: NOP4
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 3
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: LD_INT 3
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: LD_INT 2
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: LIST
40770: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40771: NOP4
40775: PUSH
40776: LD_INT 2
40778: NEG
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 3
40789: NEG
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 3
40800: NEG
40801: PUSH
40802: LD_INT 1
40804: NEG
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: LIST
40814: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40815: NOP4
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: LD_INT 3
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 3
40834: NEG
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 3
40846: NEG
40847: PUSH
40848: LD_INT 3
40850: NEG
40851: PUSH
40852: EMPTY
40853: LIST
40854: LIST
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
40861: NOP4
40865: PUSH
40866: LD_INT 1
40868: NEG
40869: PUSH
40870: LD_INT 2
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: LIST
40904: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40905: NOP4
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40946: NOP4
40950: PUSH
40951: LD_INT 2
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: LD_INT 2
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: PUSH
40974: LD_INT 2
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40986: NOP4
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: LD_INT 2
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: LD_INT 2
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: LIST
41026: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41027: NOP4
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: NEG
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: NEG
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: LIST
41070: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41071: NOP4
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: LD_INT 2
41082: NEG
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 2
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: NEG
41103: PUSH
41104: LD_INT 2
41106: NEG
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: LIST
41116: ST_TO_ADDR
// end ; 2 :
41117: GO 44383
41119: LD_INT 2
41121: DOUBLE
41122: EQUAL
41123: IFTRUE 41127
41125: GO 44382
41127: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
41128: NOP4
41132: PUSH
41133: LD_INT 4
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 4
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 5
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 5
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 4
41176: PUSH
41177: LD_INT 1
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 3
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 3
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 3
41207: PUSH
41208: LD_INT 2
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 5
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 3
41228: PUSH
41229: LD_INT 3
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 3
41238: PUSH
41239: LD_INT 2
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 4
41248: PUSH
41249: LD_INT 3
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 4
41258: PUSH
41259: LD_INT 4
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 3
41268: PUSH
41269: LD_INT 4
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: LD_INT 3
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: LD_INT 2
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 4
41298: PUSH
41299: LD_INT 2
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 2
41308: PUSH
41309: LD_INT 4
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: LD_INT 4
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: LD_INT 3
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: LD_INT 4
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: LD_INT 5
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: LD_INT 5
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: LD_INT 4
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 1
41379: NEG
41380: PUSH
41381: LD_INT 3
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: LD_INT 5
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 3
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 3
41411: NEG
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 3
41422: NEG
41423: PUSH
41424: LD_INT 1
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: NEG
41446: PUSH
41447: LD_INT 1
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 3
41456: NEG
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 4
41467: NEG
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 4
41478: NEG
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 4
41490: NEG
41491: PUSH
41492: LD_INT 2
41494: NEG
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: LD_INT 2
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 4
41513: NEG
41514: PUSH
41515: LD_INT 4
41517: NEG
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 4
41525: NEG
41526: PUSH
41527: LD_INT 5
41529: NEG
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 3
41537: NEG
41538: PUSH
41539: LD_INT 4
41541: NEG
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 3
41549: NEG
41550: PUSH
41551: LD_INT 3
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 4
41561: NEG
41562: PUSH
41563: LD_INT 3
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 5
41573: NEG
41574: PUSH
41575: LD_INT 4
41577: NEG
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 5
41585: NEG
41586: PUSH
41587: LD_INT 5
41589: NEG
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 3
41597: NEG
41598: PUSH
41599: LD_INT 5
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 5
41609: NEG
41610: PUSH
41611: LD_INT 3
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
41666: NOP4
41670: PUSH
41671: LD_INT 4
41673: PUSH
41674: LD_INT 4
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 4
41683: PUSH
41684: LD_INT 3
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 5
41693: PUSH
41694: LD_INT 4
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 5
41703: PUSH
41704: LD_INT 5
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 4
41713: PUSH
41714: LD_INT 5
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 3
41723: PUSH
41724: LD_INT 4
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 3
41733: PUSH
41734: LD_INT 3
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 5
41743: PUSH
41744: LD_INT 3
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 3
41753: PUSH
41754: LD_INT 5
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 0
41763: PUSH
41764: LD_INT 3
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 2
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 3
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: LD_INT 4
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 4
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 3
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 2
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 2
41835: PUSH
41836: LD_INT 4
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 2
41845: NEG
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 4
41856: NEG
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 4
41867: NEG
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 3
41879: NEG
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 3
41890: NEG
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 4
41901: NEG
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 5
41912: NEG
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 5
41923: NEG
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 5
41935: NEG
41936: PUSH
41937: LD_INT 2
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 3
41947: NEG
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 3
41958: NEG
41959: PUSH
41960: LD_INT 3
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 3
41970: NEG
41971: PUSH
41972: LD_INT 4
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: LD_INT 3
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 3
42006: NEG
42007: PUSH
42008: LD_INT 2
42010: NEG
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 4
42018: NEG
42019: PUSH
42020: LD_INT 3
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 4
42030: NEG
42031: PUSH
42032: LD_INT 4
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 2
42042: NEG
42043: PUSH
42044: LD_INT 4
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 4
42054: NEG
42055: PUSH
42056: LD_INT 2
42058: NEG
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 4
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 5
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: LD_INT 4
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: LD_INT 3
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 3
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: LD_INT 4
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: LD_INT 5
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: LD_INT 3
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 2
42156: NEG
42157: PUSH
42158: LD_INT 5
42160: NEG
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
42213: NOP4
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 4
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 0
42230: PUSH
42231: LD_INT 3
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 1
42240: PUSH
42241: LD_INT 4
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 5
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: LD_INT 5
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: LD_INT 4
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: LD_INT 3
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 2
42292: PUSH
42293: LD_INT 5
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: LD_INT 3
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 3
42313: NEG
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 3
42324: NEG
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 2
42336: NEG
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 3
42358: NEG
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 4
42369: NEG
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 4
42380: NEG
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 4
42392: NEG
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: NEG
42405: PUSH
42406: LD_INT 2
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 4
42415: NEG
42416: PUSH
42417: LD_INT 4
42419: NEG
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 4
42427: NEG
42428: PUSH
42429: LD_INT 5
42431: NEG
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 3
42439: NEG
42440: PUSH
42441: LD_INT 4
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 3
42451: NEG
42452: PUSH
42453: LD_INT 3
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 4
42463: NEG
42464: PUSH
42465: LD_INT 3
42467: NEG
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: PUSH
42473: LD_INT 5
42475: NEG
42476: PUSH
42477: LD_INT 4
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 5
42487: NEG
42488: PUSH
42489: LD_INT 5
42491: NEG
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 3
42499: NEG
42500: PUSH
42501: LD_INT 5
42503: NEG
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 5
42511: NEG
42512: PUSH
42513: LD_INT 3
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 3
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 4
42537: NEG
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: PUSH
42546: LD_INT 3
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: LD_INT 3
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: NEG
42591: PUSH
42592: LD_INT 4
42594: NEG
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 2
42605: NEG
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_INT 2
42613: NEG
42614: PUSH
42615: LD_INT 4
42617: NEG
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 4
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 4
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 5
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 5
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 4
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 3
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 3
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 5
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
42763: NOP4
42767: PUSH
42768: LD_INT 4
42770: NEG
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 4
42781: NEG
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 3
42793: NEG
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: LD_INT 3
42804: NEG
42805: PUSH
42806: LD_INT 1
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 4
42815: NEG
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 5
42826: NEG
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 5
42837: NEG
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 5
42849: NEG
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 3
42861: NEG
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 3
42872: NEG
42873: PUSH
42874: LD_INT 3
42876: NEG
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 3
42884: NEG
42885: PUSH
42886: LD_INT 4
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 2
42896: NEG
42897: PUSH
42898: LD_INT 3
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: LD_INT 2
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 3
42920: NEG
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 4
42932: NEG
42933: PUSH
42934: LD_INT 3
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 4
42944: NEG
42945: PUSH
42946: LD_INT 4
42948: NEG
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: LD_INT 4
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 4
42968: NEG
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 4
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 5
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 4
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: LD_INT 3
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 3
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: LD_INT 4
43039: NEG
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: LD_INT 5
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: LD_INT 3
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: LD_INT 5
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 3
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 4
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 4
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 3
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: LD_INT 2
43157: NEG
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 4
43165: PUSH
43166: LD_INT 2
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 4
43175: PUSH
43176: LD_INT 4
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 4
43185: PUSH
43186: LD_INT 3
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: PUSH
43193: LD_INT 5
43195: PUSH
43196: LD_INT 4
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 5
43205: PUSH
43206: LD_INT 5
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 4
43215: PUSH
43216: LD_INT 5
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: PUSH
43223: LD_INT 3
43225: PUSH
43226: LD_INT 4
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: LD_INT 3
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 5
43245: PUSH
43246: LD_INT 3
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 3
43255: PUSH
43256: LD_INT 5
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
43310: NOP4
43314: PUSH
43315: LD_INT 4
43317: NEG
43318: PUSH
43319: LD_INT 4
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 4
43329: NEG
43330: PUSH
43331: LD_INT 5
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: NEG
43342: PUSH
43343: LD_INT 4
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 3
43353: NEG
43354: PUSH
43355: LD_INT 3
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 4
43365: NEG
43366: PUSH
43367: LD_INT 3
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 5
43377: NEG
43378: PUSH
43379: LD_INT 4
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 5
43389: NEG
43390: PUSH
43391: LD_INT 5
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 3
43401: NEG
43402: PUSH
43403: LD_INT 5
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 5
43413: NEG
43414: PUSH
43415: LD_INT 3
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 0
43425: PUSH
43426: LD_INT 3
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: LD_INT 4
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: LD_INT 3
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: LD_INT 2
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: LD_INT 2
43472: NEG
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: LD_INT 3
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: LD_INT 4
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 2
43515: NEG
43516: PUSH
43517: LD_INT 4
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 4
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 4
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 5
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 5
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 4
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 3
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 3
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 3
43599: PUSH
43600: LD_INT 2
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 5
43610: PUSH
43611: LD_INT 2
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: LD_INT 3
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 3
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 4
43640: PUSH
43641: LD_INT 3
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 4
43650: PUSH
43651: LD_INT 4
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 3
43660: PUSH
43661: LD_INT 4
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: LD_INT 3
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 2
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 4
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 2
43700: PUSH
43701: LD_INT 4
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 4
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 4
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: LD_INT 5
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 5
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: LD_INT 4
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: LD_INT 3
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 2
43782: PUSH
43783: LD_INT 5
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: LD_INT 3
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
43848: NOP4
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: LD_INT 4
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 5
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 4
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: LD_INT 3
43891: NEG
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 3
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 4
43914: NEG
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: LD_INT 5
43926: NEG
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: LD_INT 3
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: LD_INT 5
43949: NEG
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 3
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: PUSH
43965: LD_INT 3
43967: PUSH
43968: LD_INT 1
43970: NEG
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 4
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 4
43988: PUSH
43989: LD_INT 1
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 3
43998: PUSH
43999: LD_INT 1
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 2
44029: PUSH
44030: LD_INT 2
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 4
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 4
44050: PUSH
44051: LD_INT 4
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 4
44060: PUSH
44061: LD_INT 3
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 5
44070: PUSH
44071: LD_INT 4
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 5
44080: PUSH
44081: LD_INT 5
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 4
44090: PUSH
44091: LD_INT 5
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 3
44100: PUSH
44101: LD_INT 4
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 3
44110: PUSH
44111: LD_INT 3
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 5
44120: PUSH
44121: LD_INT 3
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 3
44130: PUSH
44131: LD_INT 5
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 3
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 2
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: PUSH
44161: LD_INT 3
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: PUSH
44171: LD_INT 4
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: LD_INT 4
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 1
44190: NEG
44191: PUSH
44192: LD_INT 3
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: LD_INT 4
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 4
44233: NEG
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 4
44244: NEG
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 3
44256: NEG
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 3
44267: NEG
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 4
44278: NEG
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 5
44289: NEG
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 5
44300: NEG
44301: PUSH
44302: LD_INT 1
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 5
44312: NEG
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 3
44324: NEG
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: ST_TO_ADDR
// end ; end ;
44380: GO 44383
44382: POP
// case btype of b_depot , b_warehouse :
44383: NOP4
44387: PUSH
44388: LD_INT 0
44390: DOUBLE
44391: EQUAL
44392: IFTRUE 44402
44394: LD_INT 1
44396: DOUBLE
44397: EQUAL
44398: IFTRUE 44402
44400: GO 44603
44402: POP
// case nation of nation_american :
44403: NOP4
44407: PUSH
44408: LD_INT 1
44410: DOUBLE
44411: EQUAL
44412: IFTRUE 44416
44414: GO 44472
44416: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
44417: NOP4
44421: PUSH
44422: NOP4
44426: PUSH
44427: NOP4
44431: PUSH
44432: NOP4
44436: PUSH
44437: NOP4
44441: PUSH
44442: NOP4
44446: PUSH
44447: NOP4
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: PUSH
44460: NOP4
44464: PUSH
44465: LD_INT 1
44467: PLUS
44468: ARRAY
44469: ST_TO_ADDR
44470: GO 44601
44472: LD_INT 2
44474: DOUBLE
44475: EQUAL
44476: IFTRUE 44480
44478: GO 44536
44480: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
44481: NOP4
44485: PUSH
44486: NOP4
44490: PUSH
44491: NOP4
44495: PUSH
44496: NOP4
44500: PUSH
44501: NOP4
44505: PUSH
44506: NOP4
44510: PUSH
44511: NOP4
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: PUSH
44524: NOP4
44528: PUSH
44529: LD_INT 1
44531: PLUS
44532: ARRAY
44533: ST_TO_ADDR
44534: GO 44601
44536: LD_INT 3
44538: DOUBLE
44539: EQUAL
44540: IFTRUE 44544
44542: GO 44600
44544: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
44545: NOP4
44549: PUSH
44550: NOP4
44554: PUSH
44555: NOP4
44559: PUSH
44560: NOP4
44564: PUSH
44565: NOP4
44569: PUSH
44570: NOP4
44574: PUSH
44575: NOP4
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: PUSH
44588: NOP4
44592: PUSH
44593: LD_INT 1
44595: PLUS
44596: ARRAY
44597: ST_TO_ADDR
44598: GO 44601
44600: POP
44601: GO 45156
44603: LD_INT 2
44605: DOUBLE
44606: EQUAL
44607: IFTRUE 44617
44609: LD_INT 3
44611: DOUBLE
44612: EQUAL
44613: IFTRUE 44617
44615: GO 44673
44617: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
44618: NOP4
44622: PUSH
44623: NOP4
44627: PUSH
44628: NOP4
44632: PUSH
44633: NOP4
44637: PUSH
44638: NOP4
44642: PUSH
44643: NOP4
44647: PUSH
44648: NOP4
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: PUSH
44661: NOP4
44665: PUSH
44666: LD_INT 1
44668: PLUS
44669: ARRAY
44670: ST_TO_ADDR
44671: GO 45156
44673: LD_INT 16
44675: DOUBLE
44676: EQUAL
44677: IFTRUE 44735
44679: LD_INT 17
44681: DOUBLE
44682: EQUAL
44683: IFTRUE 44735
44685: LD_INT 18
44687: DOUBLE
44688: EQUAL
44689: IFTRUE 44735
44691: LD_INT 19
44693: DOUBLE
44694: EQUAL
44695: IFTRUE 44735
44697: LD_INT 22
44699: DOUBLE
44700: EQUAL
44701: IFTRUE 44735
44703: LD_INT 20
44705: DOUBLE
44706: EQUAL
44707: IFTRUE 44735
44709: LD_INT 21
44711: DOUBLE
44712: EQUAL
44713: IFTRUE 44735
44715: LD_INT 23
44717: DOUBLE
44718: EQUAL
44719: IFTRUE 44735
44721: LD_INT 24
44723: DOUBLE
44724: EQUAL
44725: IFTRUE 44735
44727: LD_INT 25
44729: DOUBLE
44730: EQUAL
44731: IFTRUE 44735
44733: GO 44791
44735: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
44736: NOP4
44740: PUSH
44741: NOP4
44745: PUSH
44746: NOP4
44750: PUSH
44751: NOP4
44755: PUSH
44756: NOP4
44760: PUSH
44761: NOP4
44765: PUSH
44766: NOP4
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: PUSH
44779: NOP4
44783: PUSH
44784: LD_INT 1
44786: PLUS
44787: ARRAY
44788: ST_TO_ADDR
44789: GO 45156
44791: LD_INT 6
44793: DOUBLE
44794: EQUAL
44795: IFTRUE 44847
44797: LD_INT 7
44799: DOUBLE
44800: EQUAL
44801: IFTRUE 44847
44803: LD_INT 8
44805: DOUBLE
44806: EQUAL
44807: IFTRUE 44847
44809: LD_INT 13
44811: DOUBLE
44812: EQUAL
44813: IFTRUE 44847
44815: LD_INT 12
44817: DOUBLE
44818: EQUAL
44819: IFTRUE 44847
44821: LD_INT 15
44823: DOUBLE
44824: EQUAL
44825: IFTRUE 44847
44827: LD_INT 11
44829: DOUBLE
44830: EQUAL
44831: IFTRUE 44847
44833: LD_INT 14
44835: DOUBLE
44836: EQUAL
44837: IFTRUE 44847
44839: LD_INT 10
44841: DOUBLE
44842: EQUAL
44843: IFTRUE 44847
44845: GO 44903
44847: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
44848: NOP4
44852: PUSH
44853: NOP4
44857: PUSH
44858: NOP4
44862: PUSH
44863: NOP4
44867: PUSH
44868: NOP4
44872: PUSH
44873: NOP4
44877: PUSH
44878: NOP4
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: PUSH
44891: NOP4
44895: PUSH
44896: LD_INT 1
44898: PLUS
44899: ARRAY
44900: ST_TO_ADDR
44901: GO 45156
44903: LD_INT 36
44905: DOUBLE
44906: EQUAL
44907: IFTRUE 44911
44909: GO 44967
44911: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
44912: NOP4
44916: PUSH
44917: NOP4
44921: PUSH
44922: NOP4
44926: PUSH
44927: NOP4
44931: PUSH
44932: NOP4
44936: PUSH
44937: NOP4
44941: PUSH
44942: NOP4
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: PUSH
44955: NOP4
44959: PUSH
44960: LD_INT 1
44962: PLUS
44963: ARRAY
44964: ST_TO_ADDR
44965: GO 45156
44967: LD_INT 4
44969: DOUBLE
44970: EQUAL
44971: IFTRUE 44993
44973: LD_INT 5
44975: DOUBLE
44976: EQUAL
44977: IFTRUE 44993
44979: LD_INT 34
44981: DOUBLE
44982: EQUAL
44983: IFTRUE 44993
44985: LD_INT 37
44987: DOUBLE
44988: EQUAL
44989: IFTRUE 44993
44991: GO 45049
44993: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
44994: NOP4
44998: PUSH
44999: NOP4
45003: PUSH
45004: NOP4
45008: PUSH
45009: NOP4
45013: PUSH
45014: NOP4
45018: PUSH
45019: NOP4
45023: PUSH
45024: NOP4
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: LIST
45036: PUSH
45037: NOP4
45041: PUSH
45042: LD_INT 1
45044: PLUS
45045: ARRAY
45046: ST_TO_ADDR
45047: GO 45156
45049: LD_INT 31
45051: DOUBLE
45052: EQUAL
45053: IFTRUE 45099
45055: LD_INT 32
45057: DOUBLE
45058: EQUAL
45059: IFTRUE 45099
45061: LD_INT 33
45063: DOUBLE
45064: EQUAL
45065: IFTRUE 45099
45067: LD_INT 27
45069: DOUBLE
45070: EQUAL
45071: IFTRUE 45099
45073: LD_INT 26
45075: DOUBLE
45076: EQUAL
45077: IFTRUE 45099
45079: LD_INT 28
45081: DOUBLE
45082: EQUAL
45083: IFTRUE 45099
45085: LD_INT 29
45087: DOUBLE
45088: EQUAL
45089: IFTRUE 45099
45091: LD_INT 30
45093: DOUBLE
45094: EQUAL
45095: IFTRUE 45099
45097: GO 45155
45099: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
45100: NOP4
45104: PUSH
45105: NOP4
45109: PUSH
45110: NOP4
45114: PUSH
45115: NOP4
45119: PUSH
45120: NOP4
45124: PUSH
45125: NOP4
45129: PUSH
45130: NOP4
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: PUSH
45143: NOP4
45147: PUSH
45148: LD_INT 1
45150: PLUS
45151: ARRAY
45152: ST_TO_ADDR
45153: GO 45156
45155: POP
// temp_list2 = [ ] ;
45156: NOP4
45160: PUSH
45161: EMPTY
45162: ST_TO_ADDR
// for i in temp_list do
45163: NOP4
45167: PUSH
45168: NOP4
45172: PUSH
45173: FOR_IN
45174: IFFALSE 45226
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
45176: NOP4
45180: PUSH
45181: NOP4
45185: PUSH
45186: NOP4
45190: PUSH
45191: LD_INT 1
45193: ARRAY
45194: PUSH
45195: NOP4
45199: PLUS
45200: PUSH
45201: NOP4
45205: PUSH
45206: LD_INT 2
45208: ARRAY
45209: PUSH
45210: NOP4
45214: PLUS
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: EMPTY
45221: LIST
45222: ADD
45223: ST_TO_ADDR
45224: GO 45173
45226: POP
45227: POP
// result = temp_list2 ;
45228: NOP4
45232: PUSH
45233: NOP4
45237: ST_TO_ADDR
// end ;
45238: LD_VAR 0 7
45242: RET
// export function EnemyInRange ( unit , dist ) ; begin
45243: LD_INT 0
45245: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
45246: NOP4
45250: PUSH
45251: NOP4
45255: PPUSH
45256: NOP4
45260: PPUSH
45261: NOP4
45265: PPUSH
45266: NOP4
45270: PPUSH
45271: NOP4
45275: PPUSH
45276: NOP4
45280: PPUSH
45281: NOP4
45285: PPUSH
45286: NOP4
45290: PUSH
45291: LD_INT 4
45293: ARRAY
45294: ST_TO_ADDR
// end ;
45295: LD_VAR 0 3
45299: RET
// export function PlayerSeeMe ( unit ) ; begin
45300: LD_INT 0
45302: PPUSH
// result := See ( your_side , unit ) ;
45303: NOP4
45307: PUSH
45308: NOP4
45312: PPUSH
45313: NOP4
45317: PPUSH
45318: NOP4
45322: ST_TO_ADDR
// end ;
45323: LD_VAR 0 2
45327: RET
// export function ReverseDir ( unit ) ; begin
45328: LD_INT 0
45330: PPUSH
// if not unit then
45331: NOP4
45335: NOT
45336: IFFALSE 45340
// exit ;
45338: GO 45363
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
45340: NOP4
45344: PUSH
45345: NOP4
45349: PPUSH
45350: NOP4
45354: PUSH
45355: LD_INT 3
45357: PLUS
45358: PUSH
45359: LD_INT 6
45361: MOD
45362: ST_TO_ADDR
// end ;
45363: LD_VAR 0 2
45367: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
45368: LD_INT 0
45370: PPUSH
45371: PPUSH
45372: PPUSH
45373: PPUSH
45374: PPUSH
// if not hexes then
45375: NOP4
45379: NOT
45380: IFFALSE 45384
// exit ;
45382: GO 45532
// dist := 9999 ;
45384: NOP4
45388: PUSH
45389: LD_INT 9999
45391: ST_TO_ADDR
// for i = 1 to hexes do
45392: NOP4
45396: PUSH
45397: DOUBLE
45398: LD_INT 1
45400: DEC
45401: ST_TO_ADDR
45402: NOP4
45406: PUSH
45407: FOR_TO
45408: IFFALSE 45520
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
45410: NOP4
45414: PPUSH
45415: NOP4
45419: PUSH
45420: NOP4
45424: ARRAY
45425: PUSH
45426: LD_INT 1
45428: ARRAY
45429: PPUSH
45430: NOP4
45434: PUSH
45435: NOP4
45439: ARRAY
45440: PUSH
45441: LD_INT 2
45443: ARRAY
45444: PPUSH
45445: NOP4
45449: PUSH
45450: NOP4
45454: LESS
45455: IFFALSE 45518
// begin hex := hexes [ i ] ;
45457: NOP4
45461: PUSH
45462: NOP4
45466: PUSH
45467: NOP4
45471: ARRAY
45472: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45473: NOP4
45477: PUSH
45478: NOP4
45482: PPUSH
45483: NOP4
45487: PUSH
45488: NOP4
45492: ARRAY
45493: PUSH
45494: LD_INT 1
45496: ARRAY
45497: PPUSH
45498: NOP4
45502: PUSH
45503: NOP4
45507: ARRAY
45508: PUSH
45509: LD_INT 2
45511: ARRAY
45512: PPUSH
45513: NOP4
45517: ST_TO_ADDR
// end ; end ;
45518: GO 45407
45520: POP
45521: POP
// result := hex ;
45522: NOP4
45526: PUSH
45527: NOP4
45531: ST_TO_ADDR
// end ;
45532: LD_VAR 0 3
45536: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
45537: LD_INT 0
45539: PPUSH
45540: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
45541: NOP4
45545: NOT
45546: PUSH
45547: NOP4
45551: PUSH
45552: LD_INT 21
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 23
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PPUSH
45576: NOP4
45580: IN
45581: NOT
45582: OR
45583: IFFALSE 45587
// exit ;
45585: GO 45634
// for i = 1 to 3 do
45587: NOP4
45591: PUSH
45592: DOUBLE
45593: LD_INT 1
45595: DEC
45596: ST_TO_ADDR
45597: LD_INT 3
45599: PUSH
45600: FOR_TO
45601: IFFALSE 45632
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
45603: NOP4
45607: PPUSH
45608: NOP4
45612: PPUSH
45613: NOP4
45617: PPUSH
45618: NOP4
45622: PPUSH
45623: LD_INT 1
45625: PPUSH
45626: NOP4
45630: GO 45600
45632: POP
45633: POP
// end ;
45634: LD_VAR 0 2
45638: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
45639: LD_INT 0
45641: PPUSH
45642: PPUSH
45643: PPUSH
45644: PPUSH
45645: PPUSH
45646: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
45647: NOP4
45651: NOT
45652: PUSH
45653: NOP4
45657: NOT
45658: OR
45659: PUSH
45660: NOP4
45664: PPUSH
45665: NOP4
45669: OR
45670: IFFALSE 45674
// exit ;
45672: GO 46115
// x := GetX ( enemy_unit ) ;
45674: NOP4
45678: PUSH
45679: NOP4
45683: PPUSH
45684: NOP4
45688: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
45689: NOP4
45693: PUSH
45694: NOP4
45698: PPUSH
45699: NOP4
45703: ST_TO_ADDR
// if not x or not y then
45704: NOP4
45708: NOT
45709: PUSH
45710: NOP4
45714: NOT
45715: OR
45716: IFFALSE 45720
// exit ;
45718: GO 46115
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
45720: NOP4
45724: PUSH
45725: NOP4
45729: PPUSH
45730: LD_INT 0
45732: PPUSH
45733: LD_INT 4
45735: PPUSH
45736: NOP4
45740: PUSH
45741: NOP4
45745: PPUSH
45746: LD_INT 0
45748: PPUSH
45749: LD_INT 4
45751: PPUSH
45752: NOP4
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: NOP4
45765: PPUSH
45766: LD_INT 1
45768: PPUSH
45769: LD_INT 4
45771: PPUSH
45772: NOP4
45776: PUSH
45777: NOP4
45781: PPUSH
45782: LD_INT 1
45784: PPUSH
45785: LD_INT 4
45787: PPUSH
45788: NOP4
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: NOP4
45801: PPUSH
45802: LD_INT 2
45804: PPUSH
45805: LD_INT 4
45807: PPUSH
45808: NOP4
45812: PUSH
45813: NOP4
45817: PPUSH
45818: LD_INT 2
45820: PPUSH
45821: LD_INT 4
45823: PPUSH
45824: NOP4
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: NOP4
45837: PPUSH
45838: LD_INT 3
45840: PPUSH
45841: LD_INT 4
45843: PPUSH
45844: NOP4
45848: PUSH
45849: NOP4
45853: PPUSH
45854: LD_INT 3
45856: PPUSH
45857: LD_INT 4
45859: PPUSH
45860: NOP4
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: NOP4
45873: PPUSH
45874: LD_INT 4
45876: PPUSH
45877: LD_INT 4
45879: PPUSH
45880: NOP4
45884: PUSH
45885: NOP4
45889: PPUSH
45890: LD_INT 4
45892: PPUSH
45893: LD_INT 4
45895: PPUSH
45896: NOP4
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: NOP4
45909: PPUSH
45910: LD_INT 5
45912: PPUSH
45913: LD_INT 4
45915: PPUSH
45916: NOP4
45920: PUSH
45921: NOP4
45925: PPUSH
45926: LD_INT 5
45928: PPUSH
45929: LD_INT 4
45931: PPUSH
45932: NOP4
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: ST_TO_ADDR
// for i = tmp downto 1 do
45949: NOP4
45953: PUSH
45954: DOUBLE
45955: NOP4
45959: INC
45960: ST_TO_ADDR
45961: LD_INT 1
45963: PUSH
45964: FOR_DOWNTO
45965: IFFALSE 46066
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
45967: NOP4
45971: PUSH
45972: NOP4
45976: ARRAY
45977: PUSH
45978: LD_INT 1
45980: ARRAY
45981: PPUSH
45982: NOP4
45986: PUSH
45987: NOP4
45991: ARRAY
45992: PUSH
45993: LD_INT 2
45995: ARRAY
45996: PPUSH
45997: NOP4
46001: NOT
46002: PUSH
46003: NOP4
46007: PUSH
46008: NOP4
46012: ARRAY
46013: PUSH
46014: LD_INT 1
46016: ARRAY
46017: PPUSH
46018: NOP4
46022: PUSH
46023: NOP4
46027: ARRAY
46028: PUSH
46029: LD_INT 2
46031: ARRAY
46032: PPUSH
46033: NOP4
46037: PUSH
46038: LD_INT 0
46040: NONEQUAL
46041: OR
46042: IFFALSE 46064
// tmp := Delete ( tmp , i ) ;
46044: NOP4
46048: PUSH
46049: NOP4
46053: PPUSH
46054: NOP4
46058: PPUSH
46059: NOP4
46063: ST_TO_ADDR
46064: GO 45964
46066: POP
46067: POP
// j := GetClosestHex ( unit , tmp ) ;
46068: NOP4
46072: PUSH
46073: NOP4
46077: PPUSH
46078: NOP4
46082: PPUSH
46083: NOP4
46087: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
46088: NOP4
46092: PPUSH
46093: NOP4
46097: PUSH
46098: LD_INT 1
46100: ARRAY
46101: PPUSH
46102: NOP4
46106: PUSH
46107: LD_INT 2
46109: ARRAY
46110: PPUSH
46111: NOP4
// end ;
46115: LD_VAR 0 3
46119: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
46120: LD_INT 0
46122: PPUSH
46123: PPUSH
46124: PPUSH
// uc_side = 0 ;
46125: LD_ADDR_OWVAR 20
46129: PUSH
46130: LD_INT 0
46132: ST_TO_ADDR
// uc_nation = 0 ;
46133: LD_ADDR_OWVAR 21
46137: PUSH
46138: LD_INT 0
46140: ST_TO_ADDR
// InitHc_All ( ) ;
46141: NOP4
// InitVc ;
46145: NOP4
// if mastodonts then
46149: NOP4
46153: IFFALSE 46220
// for i = 1 to mastodonts do
46155: NOP4
46159: PUSH
46160: DOUBLE
46161: LD_INT 1
46163: DEC
46164: ST_TO_ADDR
46165: NOP4
46169: PUSH
46170: FOR_TO
46171: IFFALSE 46218
// begin vc_chassis := 31 ;
46173: LD_ADDR_OWVAR 37
46177: PUSH
46178: LD_INT 31
46180: ST_TO_ADDR
// vc_control := control_rider ;
46181: LD_ADDR_OWVAR 38
46185: PUSH
46186: LD_INT 4
46188: ST_TO_ADDR
// animal := CreateVehicle ;
46189: NOP4
46193: PUSH
46194: NOP4
46198: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46199: NOP4
46203: PPUSH
46204: NOP4
46208: PPUSH
46209: LD_INT 0
46211: PPUSH
46212: NOP4
// end ;
46216: GO 46170
46218: POP
46219: POP
// if horses then
46220: NOP4
46224: IFFALSE 46291
// for i = 1 to horses do
46226: NOP4
46230: PUSH
46231: DOUBLE
46232: LD_INT 1
46234: DEC
46235: ST_TO_ADDR
46236: NOP4
46240: PUSH
46241: FOR_TO
46242: IFFALSE 46289
// begin hc_class := 21 ;
46244: LD_ADDR_OWVAR 28
46248: PUSH
46249: LD_INT 21
46251: ST_TO_ADDR
// hc_gallery :=  ;
46252: LD_ADDR_OWVAR 33
46256: PUSH
46257: LD_STRING 
46259: ST_TO_ADDR
// animal := CreateHuman ;
46260: NOP4
46264: PUSH
46265: NOP4
46269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46270: NOP4
46274: PPUSH
46275: NOP4
46279: PPUSH
46280: LD_INT 0
46282: PPUSH
46283: NOP4
// end ;
46287: GO 46241
46289: POP
46290: POP
// if birds then
46291: NOP4
46295: IFFALSE 46362
// for i = 1 to birds do
46297: NOP4
46301: PUSH
46302: DOUBLE
46303: LD_INT 1
46305: DEC
46306: ST_TO_ADDR
46307: NOP4
46311: PUSH
46312: FOR_TO
46313: IFFALSE 46360
// begin hc_class = 18 ;
46315: LD_ADDR_OWVAR 28
46319: PUSH
46320: LD_INT 18
46322: ST_TO_ADDR
// hc_gallery =  ;
46323: LD_ADDR_OWVAR 33
46327: PUSH
46328: LD_STRING 
46330: ST_TO_ADDR
// animal := CreateHuman ;
46331: NOP4
46335: PUSH
46336: NOP4
46340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46341: NOP4
46345: PPUSH
46346: NOP4
46350: PPUSH
46351: LD_INT 0
46353: PPUSH
46354: NOP4
// end ;
46358: GO 46312
46360: POP
46361: POP
// if tigers then
46362: NOP4
46366: IFFALSE 46450
// for i = 1 to tigers do
46368: NOP4
46372: PUSH
46373: DOUBLE
46374: LD_INT 1
46376: DEC
46377: ST_TO_ADDR
46378: NOP4
46382: PUSH
46383: FOR_TO
46384: IFFALSE 46448
// begin hc_class = class_tiger ;
46386: LD_ADDR_OWVAR 28
46390: PUSH
46391: LD_INT 14
46393: ST_TO_ADDR
// hc_gallery =  ;
46394: LD_ADDR_OWVAR 33
46398: PUSH
46399: LD_STRING 
46401: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
46402: LD_ADDR_OWVAR 35
46406: PUSH
46407: LD_INT 7
46409: NEG
46410: PPUSH
46411: LD_INT 7
46413: PPUSH
46414: NOP4
46418: ST_TO_ADDR
// animal := CreateHuman ;
46419: NOP4
46423: PUSH
46424: NOP4
46428: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46429: NOP4
46433: PPUSH
46434: NOP4
46438: PPUSH
46439: LD_INT 0
46441: PPUSH
46442: NOP4
// end ;
46446: GO 46383
46448: POP
46449: POP
// if apemans then
46450: NOP4
46454: IFFALSE 46577
// for i = 1 to apemans do
46456: NOP4
46460: PUSH
46461: DOUBLE
46462: LD_INT 1
46464: DEC
46465: ST_TO_ADDR
46466: NOP4
46470: PUSH
46471: FOR_TO
46472: IFFALSE 46575
// begin hc_class = class_apeman ;
46474: LD_ADDR_OWVAR 28
46478: PUSH
46479: LD_INT 12
46481: ST_TO_ADDR
// hc_gallery =  ;
46482: LD_ADDR_OWVAR 33
46486: PUSH
46487: LD_STRING 
46489: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
46490: LD_ADDR_OWVAR 35
46494: PUSH
46495: LD_INT 2
46497: NEG
46498: PPUSH
46499: LD_INT 2
46501: PPUSH
46502: NOP4
46506: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
46507: LD_ADDR_OWVAR 31
46511: PUSH
46512: LD_INT 1
46514: PPUSH
46515: LD_INT 3
46517: PPUSH
46518: NOP4
46522: PUSH
46523: LD_INT 1
46525: PPUSH
46526: LD_INT 3
46528: PPUSH
46529: NOP4
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: ST_TO_ADDR
// animal := CreateHuman ;
46546: NOP4
46550: PUSH
46551: NOP4
46555: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46556: NOP4
46560: PPUSH
46561: NOP4
46565: PPUSH
46566: LD_INT 0
46568: PPUSH
46569: NOP4
// end ;
46573: GO 46471
46575: POP
46576: POP
// if enchidnas then
46577: NOP4
46581: IFFALSE 46648
// for i = 1 to enchidnas do
46583: NOP4
46587: PUSH
46588: DOUBLE
46589: LD_INT 1
46591: DEC
46592: ST_TO_ADDR
46593: NOP4
46597: PUSH
46598: FOR_TO
46599: IFFALSE 46646
// begin hc_class = 13 ;
46601: LD_ADDR_OWVAR 28
46605: PUSH
46606: LD_INT 13
46608: ST_TO_ADDR
// hc_gallery =  ;
46609: LD_ADDR_OWVAR 33
46613: PUSH
46614: LD_STRING 
46616: ST_TO_ADDR
// animal := CreateHuman ;
46617: NOP4
46621: PUSH
46622: NOP4
46626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
46627: NOP4
46631: PPUSH
46632: NOP4
46636: PPUSH
46637: LD_INT 0
46639: PPUSH
46640: NOP4
// end ;
46644: GO 46598
46646: POP
46647: POP
// if fishes then
46648: NOP4
46652: IFFALSE 46719
// for i = 1 to fishes do
46654: NOP4
46658: PUSH
46659: DOUBLE
46660: LD_INT 1
46662: DEC
46663: ST_TO_ADDR
46664: NOP4
46668: PUSH
46669: FOR_TO
46670: IFFALSE 46717
// begin hc_class = 20 ;
46672: LD_ADDR_OWVAR 28
46676: PUSH
46677: LD_INT 20
46679: ST_TO_ADDR
// hc_gallery =  ;
46680: LD_ADDR_OWVAR 33
46684: PUSH
46685: LD_STRING 
46687: ST_TO_ADDR
// animal := CreateHuman ;
46688: NOP4
46692: PUSH
46693: NOP4
46697: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
46698: NOP4
46702: PPUSH
46703: NOP4
46707: PPUSH
46708: LD_INT 0
46710: PPUSH
46711: NOP4
// end ;
46715: GO 46669
46717: POP
46718: POP
// end ;
46719: LD_VAR 0 10
46723: RET
// export function WantHeal ( sci , unit ) ; begin
46724: LD_INT 0
46726: PPUSH
// if GetTaskList ( sci ) > 0 then
46727: NOP4
46731: PPUSH
46732: NOP4
46736: PUSH
46737: LD_INT 0
46739: GREATER
46740: IFFALSE 46810
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
46742: NOP4
46746: PPUSH
46747: NOP4
46751: PUSH
46752: LD_INT 1
46754: ARRAY
46755: PUSH
46756: LD_INT 1
46758: ARRAY
46759: PUSH
46760: LD_STRING l
46762: EQUAL
46763: PUSH
46764: NOP4
46768: PPUSH
46769: NOP4
46773: PUSH
46774: LD_INT 1
46776: ARRAY
46777: PUSH
46778: LD_INT 4
46780: ARRAY
46781: PUSH
46782: NOP4
46786: EQUAL
46787: AND
46788: IFFALSE 46800
// result := true else
46790: NOP4
46794: PUSH
46795: LD_INT 1
46797: ST_TO_ADDR
46798: GO 46808
// result := false ;
46800: NOP4
46804: PUSH
46805: LD_INT 0
46807: ST_TO_ADDR
// end else
46808: GO 46818
// result := false ;
46810: NOP4
46814: PUSH
46815: LD_INT 0
46817: ST_TO_ADDR
// end ;
46818: LD_VAR 0 3
46822: RET
// export function HealTarget ( sci ) ; begin
46823: LD_INT 0
46825: PPUSH
// if not sci then
46826: NOP4
46830: NOT
46831: IFFALSE 46835
// exit ;
46833: GO 46900
// result := 0 ;
46835: NOP4
46839: PUSH
46840: LD_INT 0
46842: ST_TO_ADDR
// if GetTaskList ( sci ) then
46843: NOP4
46847: PPUSH
46848: NOP4
46852: IFFALSE 46900
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
46854: NOP4
46858: PPUSH
46859: NOP4
46863: PUSH
46864: LD_INT 1
46866: ARRAY
46867: PUSH
46868: LD_INT 1
46870: ARRAY
46871: PUSH
46872: LD_STRING l
46874: EQUAL
46875: IFFALSE 46900
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46877: NOP4
46881: PUSH
46882: NOP4
46886: PPUSH
46887: NOP4
46891: PUSH
46892: LD_INT 1
46894: ARRAY
46895: PUSH
46896: LD_INT 4
46898: ARRAY
46899: ST_TO_ADDR
// end ;
46900: LD_VAR 0 2
46904: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46905: LD_INT 0
46907: PPUSH
46908: PPUSH
46909: PPUSH
46910: PPUSH
// if not base_units then
46911: NOP4
46915: NOT
46916: IFFALSE 46920
// exit ;
46918: GO 47007
// result := false ;
46920: NOP4
46924: PUSH
46925: LD_INT 0
46927: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46928: NOP4
46932: PUSH
46933: NOP4
46937: PPUSH
46938: LD_INT 21
46940: PUSH
46941: LD_INT 3
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PPUSH
46948: NOP4
46952: ST_TO_ADDR
// if not tmp then
46953: NOP4
46957: NOT
46958: IFFALSE 46962
// exit ;
46960: GO 47007
// for i in tmp do
46962: NOP4
46966: PUSH
46967: NOP4
46971: PUSH
46972: FOR_IN
46973: IFFALSE 47005
// begin result := EnemyInRange ( i , 22 ) ;
46975: NOP4
46979: PUSH
46980: NOP4
46984: PPUSH
46985: LD_INT 22
46987: PPUSH
46988: NOP4
46992: ST_TO_ADDR
// if result then
46993: NOP4
46997: IFFALSE 47003
// exit ;
46999: POP
47000: POP
47001: GO 47007
// end ;
47003: GO 46972
47005: POP
47006: POP
// end ;
47007: LD_VAR 0 2
47011: RET
// export function FilterByTag ( units , tag ) ; begin
47012: LD_INT 0
47014: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
47015: NOP4
47019: PUSH
47020: NOP4
47024: PPUSH
47025: LD_INT 120
47027: PUSH
47028: NOP4
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PPUSH
47037: NOP4
47041: ST_TO_ADDR
// end ;
47042: LD_VAR 0 3
47046: RET
// export function IsDriver ( un ) ; begin
47047: LD_INT 0
47049: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
47050: NOP4
47054: PUSH
47055: NOP4
47059: PUSH
47060: LD_INT 55
47062: PUSH
47063: EMPTY
47064: LIST
47065: PPUSH
47066: NOP4
47070: IN
47071: ST_TO_ADDR
// end ;
47072: LD_VAR 0 2
47076: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
47077: LD_INT 0
47079: PPUSH
47080: PPUSH
// list := [ ] ;
47081: NOP4
47085: PUSH
47086: EMPTY
47087: ST_TO_ADDR
// case d of 0 :
47088: NOP4
47092: PUSH
47093: LD_INT 0
47095: DOUBLE
47096: EQUAL
47097: IFTRUE 47101
47099: GO 47234
47101: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
47102: NOP4
47106: PUSH
47107: NOP4
47111: PUSH
47112: LD_INT 4
47114: MINUS
47115: PUSH
47116: NOP4
47120: PUSH
47121: LD_INT 4
47123: MINUS
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: LIST
47132: PUSH
47133: NOP4
47137: PUSH
47138: LD_INT 3
47140: MINUS
47141: PUSH
47142: NOP4
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: PUSH
47155: NOP4
47159: PUSH
47160: LD_INT 4
47162: PLUS
47163: PUSH
47164: NOP4
47168: PUSH
47169: LD_INT 4
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: PUSH
47177: NOP4
47181: PUSH
47182: LD_INT 3
47184: PLUS
47185: PUSH
47186: NOP4
47190: PUSH
47191: LD_INT 3
47193: PLUS
47194: PUSH
47195: LD_INT 5
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: LIST
47202: PUSH
47203: NOP4
47207: PUSH
47208: NOP4
47212: PUSH
47213: LD_INT 4
47215: PLUS
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: LIST
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: ST_TO_ADDR
// end ; 1 :
47232: GO 47932
47234: LD_INT 1
47236: DOUBLE
47237: EQUAL
47238: IFTRUE 47242
47240: GO 47375
47242: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
47243: NOP4
47247: PUSH
47248: NOP4
47252: PUSH
47253: NOP4
47257: PUSH
47258: LD_INT 4
47260: MINUS
47261: PUSH
47262: LD_INT 3
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: LIST
47269: PUSH
47270: NOP4
47274: PUSH
47275: LD_INT 3
47277: MINUS
47278: PUSH
47279: NOP4
47283: PUSH
47284: LD_INT 3
47286: MINUS
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: LIST
47295: PUSH
47296: NOP4
47300: PUSH
47301: LD_INT 4
47303: MINUS
47304: PUSH
47305: NOP4
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: LIST
47317: PUSH
47318: NOP4
47322: PUSH
47323: NOP4
47327: PUSH
47328: LD_INT 3
47330: PLUS
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: LIST
47339: PUSH
47340: NOP4
47344: PUSH
47345: LD_INT 4
47347: PLUS
47348: PUSH
47349: NOP4
47353: PUSH
47354: LD_INT 4
47356: PLUS
47357: PUSH
47358: LD_INT 5
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: ST_TO_ADDR
// end ; 2 :
47373: GO 47932
47375: LD_INT 2
47377: DOUBLE
47378: EQUAL
47379: IFTRUE 47383
47381: GO 47512
47383: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
47384: NOP4
47388: PUSH
47389: NOP4
47393: PUSH
47394: NOP4
47398: PUSH
47399: LD_INT 3
47401: MINUS
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: LIST
47410: PUSH
47411: NOP4
47415: PUSH
47416: LD_INT 4
47418: PLUS
47419: PUSH
47420: NOP4
47424: PUSH
47425: LD_INT 4
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: LIST
47432: PUSH
47433: NOP4
47437: PUSH
47438: NOP4
47442: PUSH
47443: LD_INT 4
47445: PLUS
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: LIST
47454: PUSH
47455: NOP4
47459: PUSH
47460: LD_INT 3
47462: MINUS
47463: PUSH
47464: NOP4
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: LIST
47476: PUSH
47477: NOP4
47481: PUSH
47482: LD_INT 4
47484: MINUS
47485: PUSH
47486: NOP4
47490: PUSH
47491: LD_INT 4
47493: MINUS
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: LIST
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: ST_TO_ADDR
// end ; 3 :
47510: GO 47932
47512: LD_INT 3
47514: DOUBLE
47515: EQUAL
47516: IFTRUE 47520
47518: GO 47653
47520: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
47521: NOP4
47525: PUSH
47526: NOP4
47530: PUSH
47531: LD_INT 3
47533: PLUS
47534: PUSH
47535: NOP4
47539: PUSH
47540: LD_INT 4
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: PUSH
47548: NOP4
47552: PUSH
47553: LD_INT 4
47555: PLUS
47556: PUSH
47557: NOP4
47561: PUSH
47562: LD_INT 4
47564: PLUS
47565: PUSH
47566: LD_INT 5
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: PUSH
47574: NOP4
47578: PUSH
47579: LD_INT 4
47581: MINUS
47582: PUSH
47583: NOP4
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: PUSH
47596: NOP4
47600: PUSH
47601: NOP4
47605: PUSH
47606: LD_INT 4
47608: MINUS
47609: PUSH
47610: LD_INT 3
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: LIST
47617: PUSH
47618: NOP4
47622: PUSH
47623: LD_INT 3
47625: MINUS
47626: PUSH
47627: NOP4
47631: PUSH
47632: LD_INT 3
47634: MINUS
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: LIST
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: ST_TO_ADDR
// end ; 4 :
47651: GO 47932
47653: LD_INT 4
47655: DOUBLE
47656: EQUAL
47657: IFTRUE 47661
47659: GO 47794
47661: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
47662: NOP4
47666: PUSH
47667: NOP4
47671: PUSH
47672: NOP4
47676: PUSH
47677: LD_INT 4
47679: PLUS
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: PUSH
47689: NOP4
47693: PUSH
47694: LD_INT 3
47696: PLUS
47697: PUSH
47698: NOP4
47702: PUSH
47703: LD_INT 3
47705: PLUS
47706: PUSH
47707: LD_INT 5
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: LIST
47714: PUSH
47715: NOP4
47719: PUSH
47720: LD_INT 4
47722: PLUS
47723: PUSH
47724: NOP4
47728: PUSH
47729: LD_INT 4
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: LIST
47736: PUSH
47737: NOP4
47741: PUSH
47742: NOP4
47746: PUSH
47747: LD_INT 3
47749: MINUS
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: LIST
47758: PUSH
47759: NOP4
47763: PUSH
47764: LD_INT 4
47766: MINUS
47767: PUSH
47768: NOP4
47772: PUSH
47773: LD_INT 4
47775: MINUS
47776: PUSH
47777: LD_INT 2
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: ST_TO_ADDR
// end ; 5 :
47792: GO 47932
47794: LD_INT 5
47796: DOUBLE
47797: EQUAL
47798: IFTRUE 47802
47800: GO 47931
47802: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
47803: NOP4
47807: PUSH
47808: NOP4
47812: PUSH
47813: LD_INT 4
47815: MINUS
47816: PUSH
47817: NOP4
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: PUSH
47830: NOP4
47834: PUSH
47835: NOP4
47839: PUSH
47840: LD_INT 4
47842: MINUS
47843: PUSH
47844: LD_INT 3
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: LIST
47851: PUSH
47852: NOP4
47856: PUSH
47857: LD_INT 4
47859: PLUS
47860: PUSH
47861: NOP4
47865: PUSH
47866: LD_INT 4
47868: PLUS
47869: PUSH
47870: LD_INT 5
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: LIST
47877: PUSH
47878: NOP4
47882: PUSH
47883: LD_INT 3
47885: PLUS
47886: PUSH
47887: NOP4
47891: PUSH
47892: LD_INT 4
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: PUSH
47900: NOP4
47904: PUSH
47905: NOP4
47909: PUSH
47910: LD_INT 3
47912: PLUS
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: ST_TO_ADDR
// end ; end ;
47929: GO 47932
47931: POP
// result := list ;
47932: NOP4
47936: PUSH
47937: NOP4
47941: ST_TO_ADDR
// end ;
47942: LD_VAR 0 4
47946: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47947: LD_INT 0
47949: PPUSH
47950: PPUSH
47951: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47952: NOP4
47956: NOT
47957: PUSH
47958: NOP4
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: LD_INT 3
47971: PUSH
47972: LD_INT 4
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: IN
47981: NOT
47982: OR
47983: IFFALSE 47987
// exit ;
47985: GO 48079
// tmp := [ ] ;
47987: NOP4
47991: PUSH
47992: EMPTY
47993: ST_TO_ADDR
// for i in units do
47994: NOP4
47998: PUSH
47999: NOP4
48003: PUSH
48004: FOR_IN
48005: IFFALSE 48048
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
48007: NOP4
48011: PUSH
48012: NOP4
48016: PPUSH
48017: NOP4
48021: PUSH
48022: LD_INT 1
48024: PLUS
48025: PPUSH
48026: NOP4
48030: PPUSH
48031: NOP4
48035: PPUSH
48036: NOP4
48040: PPUSH
48041: NOP4
48045: ST_TO_ADDR
48046: GO 48004
48048: POP
48049: POP
// if not tmp then
48050: NOP4
48054: NOT
48055: IFFALSE 48059
// exit ;
48057: GO 48079
// result := SortListByListDesc ( units , tmp ) ;
48059: NOP4
48063: PUSH
48064: NOP4
48068: PPUSH
48069: NOP4
48073: PPUSH
48074: NOP4
48078: ST_TO_ADDR
// end ;
48079: LD_VAR 0 3
48083: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
48084: LD_INT 0
48086: PPUSH
48087: PPUSH
48088: PPUSH
// result := false ;
48089: NOP4
48093: PUSH
48094: LD_INT 0
48096: ST_TO_ADDR
// x := GetX ( building ) ;
48097: NOP4
48101: PUSH
48102: NOP4
48106: PPUSH
48107: NOP4
48111: ST_TO_ADDR
// y := GetY ( building ) ;
48112: NOP4
48116: PUSH
48117: NOP4
48121: PPUSH
48122: NOP4
48126: ST_TO_ADDR
// if not building or not x or not y then
48127: NOP4
48131: NOT
48132: PUSH
48133: NOP4
48137: NOT
48138: OR
48139: PUSH
48140: NOP4
48144: NOT
48145: OR
48146: IFFALSE 48150
// exit ;
48148: GO 48242
// if GetTaskList ( unit ) then
48150: NOP4
48154: PPUSH
48155: NOP4
48159: IFFALSE 48242
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48161: LD_STRING e
48163: PUSH
48164: NOP4
48168: PPUSH
48169: NOP4
48173: PUSH
48174: LD_INT 1
48176: ARRAY
48177: PUSH
48178: LD_INT 1
48180: ARRAY
48181: EQUAL
48182: PUSH
48183: NOP4
48187: PUSH
48188: NOP4
48192: PPUSH
48193: NOP4
48197: PUSH
48198: LD_INT 1
48200: ARRAY
48201: PUSH
48202: LD_INT 2
48204: ARRAY
48205: EQUAL
48206: AND
48207: PUSH
48208: NOP4
48212: PUSH
48213: NOP4
48217: PPUSH
48218: NOP4
48222: PUSH
48223: LD_INT 1
48225: ARRAY
48226: PUSH
48227: LD_INT 3
48229: ARRAY
48230: EQUAL
48231: AND
48232: IFFALSE 48242
// result := true end ;
48234: NOP4
48238: PUSH
48239: LD_INT 1
48241: ST_TO_ADDR
// end ;
48242: LD_VAR 0 3
48246: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
48247: LD_INT 0
48249: PPUSH
// result := false ;
48250: NOP4
48254: PUSH
48255: LD_INT 0
48257: ST_TO_ADDR
// if GetTaskList ( unit ) then
48258: NOP4
48262: PPUSH
48263: NOP4
48267: IFFALSE 48350
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
48269: LD_STRING M
48271: PUSH
48272: NOP4
48276: PPUSH
48277: NOP4
48281: PUSH
48282: LD_INT 1
48284: ARRAY
48285: PUSH
48286: LD_INT 1
48288: ARRAY
48289: EQUAL
48290: PUSH
48291: NOP4
48295: PUSH
48296: NOP4
48300: PPUSH
48301: NOP4
48305: PUSH
48306: LD_INT 1
48308: ARRAY
48309: PUSH
48310: LD_INT 2
48312: ARRAY
48313: EQUAL
48314: AND
48315: PUSH
48316: NOP4
48320: PUSH
48321: NOP4
48325: PPUSH
48326: NOP4
48330: PUSH
48331: LD_INT 1
48333: ARRAY
48334: PUSH
48335: LD_INT 3
48337: ARRAY
48338: EQUAL
48339: AND
48340: IFFALSE 48350
// result := true ;
48342: NOP4
48346: PUSH
48347: LD_INT 1
48349: ST_TO_ADDR
// end ; end ;
48350: LD_VAR 0 4
48354: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
48355: LD_INT 0
48357: PPUSH
48358: PPUSH
48359: PPUSH
48360: PPUSH
// if not unit or not area then
48361: NOP4
48365: NOT
48366: PUSH
48367: NOP4
48371: NOT
48372: OR
48373: IFFALSE 48377
// exit ;
48375: GO 48541
// tmp := AreaToList ( area , i ) ;
48377: NOP4
48381: PUSH
48382: NOP4
48386: PPUSH
48387: NOP4
48391: PPUSH
48392: NOP4
48396: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
48397: NOP4
48401: PUSH
48402: DOUBLE
48403: LD_INT 1
48405: DEC
48406: ST_TO_ADDR
48407: NOP4
48411: PUSH
48412: LD_INT 1
48414: ARRAY
48415: PUSH
48416: FOR_TO
48417: IFFALSE 48539
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
48419: NOP4
48423: PUSH
48424: NOP4
48428: PUSH
48429: LD_INT 1
48431: ARRAY
48432: PUSH
48433: NOP4
48437: ARRAY
48438: PUSH
48439: NOP4
48443: PUSH
48444: LD_INT 2
48446: ARRAY
48447: PUSH
48448: NOP4
48452: ARRAY
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
48458: NOP4
48462: PUSH
48463: LD_INT 1
48465: ARRAY
48466: PPUSH
48467: NOP4
48471: PUSH
48472: LD_INT 2
48474: ARRAY
48475: PPUSH
48476: NOP4
48480: PUSH
48481: LD_INT 0
48483: EQUAL
48484: IFFALSE 48537
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
48486: NOP4
48490: PPUSH
48491: NOP4
48495: PUSH
48496: LD_INT 1
48498: ARRAY
48499: PPUSH
48500: NOP4
48504: PUSH
48505: LD_INT 2
48507: ARRAY
48508: PPUSH
48509: NOP4
48513: PPUSH
48514: NOP4
// result := IsPlaced ( unit ) ;
48518: NOP4
48522: PUSH
48523: NOP4
48527: PPUSH
48528: NOP4
48532: ST_TO_ADDR
// exit ;
48533: POP
48534: POP
48535: GO 48541
// end ; end ;
48537: GO 48416
48539: POP
48540: POP
// end ;
48541: LD_VAR 0 4
48545: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
48546: LD_INT 0
48548: PPUSH
48549: PPUSH
48550: PPUSH
// if not side or side > 8 then
48551: NOP4
48555: NOT
48556: PUSH
48557: NOP4
48561: PUSH
48562: LD_INT 8
48564: GREATER
48565: OR
48566: IFFALSE 48570
// exit ;
48568: GO 48757
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
48570: NOP4
48574: PUSH
48575: LD_INT 22
48577: PUSH
48578: NOP4
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 21
48589: PUSH
48590: LD_INT 3
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PPUSH
48601: NOP4
48605: ST_TO_ADDR
// if not tmp then
48606: NOP4
48610: NOT
48611: IFFALSE 48615
// exit ;
48613: GO 48757
// enable_addtolog := true ;
48615: LD_ADDR_OWVAR 81
48619: PUSH
48620: LD_INT 1
48622: ST_TO_ADDR
// AddToLog ( [ ) ;
48623: LD_STRING [
48625: PPUSH
48626: NOP4
// for i in tmp do
48630: NOP4
48634: PUSH
48635: NOP4
48639: PUSH
48640: FOR_IN
48641: IFFALSE 48748
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
48643: LD_STRING [
48645: PUSH
48646: NOP4
48650: PPUSH
48651: NOP4
48655: STR
48656: PUSH
48657: LD_STRING , 
48659: STR
48660: PUSH
48661: NOP4
48665: PPUSH
48666: NOP4
48670: STR
48671: PUSH
48672: LD_STRING , 
48674: STR
48675: PUSH
48676: NOP4
48680: PPUSH
48681: NOP4
48685: STR
48686: PUSH
48687: LD_STRING , 
48689: STR
48690: PUSH
48691: NOP4
48695: PPUSH
48696: NOP4
48700: STR
48701: PUSH
48702: LD_STRING , 
48704: STR
48705: PUSH
48706: NOP4
48710: PPUSH
48711: LD_INT 1
48713: PPUSH
48714: NOP4
48718: STR
48719: PUSH
48720: LD_STRING , 
48722: STR
48723: PUSH
48724: NOP4
48728: PPUSH
48729: LD_INT 2
48731: PPUSH
48732: NOP4
48736: STR
48737: PUSH
48738: LD_STRING ],
48740: STR
48741: PPUSH
48742: NOP4
// end ;
48746: GO 48640
48748: POP
48749: POP
// AddToLog ( ]; ) ;
48750: LD_STRING ];
48752: PPUSH
48753: NOP4
// end ;
48757: LD_VAR 0 2
48761: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
48762: LD_INT 0
48764: PPUSH
48765: PPUSH
48766: PPUSH
48767: PPUSH
48768: PPUSH
// if not area or not rate or not max then
48769: NOP4
48773: NOT
48774: PUSH
48775: NOP4
48779: NOT
48780: OR
48781: PUSH
48782: NOP4
48786: NOT
48787: OR
48788: IFFALSE 48792
// exit ;
48790: GO 48981
// while 1 do
48792: LD_INT 1
48794: IFFALSE 48981
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
48796: NOP4
48800: PUSH
48801: NOP4
48805: PPUSH
48806: LD_INT 1
48808: PPUSH
48809: NOP4
48813: PUSH
48814: LD_INT 10
48816: MUL
48817: ST_TO_ADDR
// r := rate / 10 ;
48818: NOP4
48822: PUSH
48823: NOP4
48827: PUSH
48828: LD_INT 10
48830: DIVREAL
48831: ST_TO_ADDR
// time := 1 1$00 ;
48832: NOP4
48836: PUSH
48837: LD_INT 2100
48839: ST_TO_ADDR
// if amount < min then
48840: NOP4
48844: PUSH
48845: NOP4
48849: LESS
48850: IFFALSE 48868
// r := r * 2 else
48852: NOP4
48856: PUSH
48857: NOP4
48861: PUSH
48862: LD_INT 2
48864: MUL
48865: ST_TO_ADDR
48866: GO 48894
// if amount > max then
48868: NOP4
48872: PUSH
48873: NOP4
48877: GREATER
48878: IFFALSE 48894
// r := r / 2 ;
48880: NOP4
48884: PUSH
48885: NOP4
48889: PUSH
48890: LD_INT 2
48892: DIVREAL
48893: ST_TO_ADDR
// time := time / r ;
48894: NOP4
48898: PUSH
48899: NOP4
48903: PUSH
48904: NOP4
48908: DIVREAL
48909: ST_TO_ADDR
// if time < 0 then
48910: NOP4
48914: PUSH
48915: LD_INT 0
48917: LESS
48918: IFFALSE 48935
// time := time * - 1 ;
48920: NOP4
48924: PUSH
48925: NOP4
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: MUL
48934: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48935: NOP4
48939: PUSH
48940: LD_INT 35
48942: PPUSH
48943: LD_INT 875
48945: PPUSH
48946: NOP4
48950: PLUS
48951: PPUSH
48952: NOP4
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48956: LD_INT 1
48958: PPUSH
48959: LD_INT 5
48961: PPUSH
48962: NOP4
48966: PPUSH
48967: NOP4
48971: PPUSH
48972: LD_INT 1
48974: PPUSH
48975: NOP4
// end ;
48979: GO 48792
// end ;
48981: LD_VAR 0 5
48985: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48986: LD_INT 0
48988: PPUSH
48989: PPUSH
48990: PPUSH
48991: PPUSH
48992: PPUSH
48993: PPUSH
48994: PPUSH
48995: PPUSH
// if not turrets or not factories then
48996: NOP4
49000: NOT
49001: PUSH
49002: NOP4
49006: NOT
49007: OR
49008: IFFALSE 49012
// exit ;
49010: GO 49319
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
49012: NOP4
49016: PUSH
49017: LD_INT 5
49019: PUSH
49020: LD_INT 6
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: LD_INT 4
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 3
49039: PUSH
49040: LD_INT 5
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 24
49054: PUSH
49055: LD_INT 25
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 23
49064: PUSH
49065: LD_INT 27
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 42
49078: PUSH
49079: LD_INT 43
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 44
49088: PUSH
49089: LD_INT 46
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 45
49098: PUSH
49099: LD_INT 47
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: LIST
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: LIST
49115: ST_TO_ADDR
// result := [ ] ;
49116: NOP4
49120: PUSH
49121: EMPTY
49122: ST_TO_ADDR
// for i in turrets do
49123: NOP4
49127: PUSH
49128: NOP4
49132: PUSH
49133: FOR_IN
49134: IFFALSE 49317
// begin nat := GetNation ( i ) ;
49136: NOP4
49140: PUSH
49141: NOP4
49145: PPUSH
49146: NOP4
49150: ST_TO_ADDR
// weapon := 0 ;
49151: NOP4
49155: PUSH
49156: LD_INT 0
49158: ST_TO_ADDR
// if not nat then
49159: NOP4
49163: NOT
49164: IFFALSE 49168
// continue ;
49166: GO 49133
// for j in list [ nat ] do
49168: NOP4
49172: PUSH
49173: NOP4
49177: PUSH
49178: NOP4
49182: ARRAY
49183: PUSH
49184: FOR_IN
49185: IFFALSE 49226
// if GetBWeapon ( i ) = j [ 1 ] then
49187: NOP4
49191: PPUSH
49192: NOP4
49196: PUSH
49197: NOP4
49201: PUSH
49202: LD_INT 1
49204: ARRAY
49205: EQUAL
49206: IFFALSE 49224
// begin weapon := j [ 2 ] ;
49208: NOP4
49212: PUSH
49213: NOP4
49217: PUSH
49218: LD_INT 2
49220: ARRAY
49221: ST_TO_ADDR
// break ;
49222: GO 49226
// end ;
49224: GO 49184
49226: POP
49227: POP
// if not weapon then
49228: NOP4
49232: NOT
49233: IFFALSE 49237
// continue ;
49235: GO 49133
// for k in factories do
49237: NOP4
49241: PUSH
49242: NOP4
49246: PUSH
49247: FOR_IN
49248: IFFALSE 49313
// begin weapons := AvailableWeaponList ( k ) ;
49250: NOP4
49254: PUSH
49255: NOP4
49259: PPUSH
49260: NOP4
49264: ST_TO_ADDR
// if not weapons then
49265: NOP4
49269: NOT
49270: IFFALSE 49274
// continue ;
49272: GO 49247
// if weapon in weapons then
49274: NOP4
49278: PUSH
49279: NOP4
49283: IN
49284: IFFALSE 49311
// begin result := [ i , weapon ] ;
49286: NOP4
49290: PUSH
49291: NOP4
49295: PUSH
49296: NOP4
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: ST_TO_ADDR
// exit ;
49305: POP
49306: POP
49307: POP
49308: POP
49309: GO 49319
// end ; end ;
49311: GO 49247
49313: POP
49314: POP
// end ;
49315: GO 49133
49317: POP
49318: POP
// end ;
49319: LD_VAR 0 3
49323: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
49324: LD_INT 0
49326: PPUSH
// if not side or side > 8 then
49327: NOP4
49331: NOT
49332: PUSH
49333: NOP4
49337: PUSH
49338: LD_INT 8
49340: GREATER
49341: OR
49342: IFFALSE 49346
// exit ;
49344: GO 49405
// if not range then
49346: NOP4
49350: NOT
49351: IFFALSE 49362
// range := - 12 ;
49353: NOP4
49357: PUSH
49358: LD_INT 12
49360: NEG
49361: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
49362: NOP4
49366: PPUSH
49367: NOP4
49371: PPUSH
49372: NOP4
49376: PPUSH
49377: NOP4
49381: PPUSH
49382: NOP4
// RemoveSeeing ( x , y , side ) ;
49386: NOP4
49390: PPUSH
49391: NOP4
49395: PPUSH
49396: NOP4
49400: PPUSH
49401: NOP4
// end ;
49405: LD_VAR 0 5
49409: RET
// export function Video ( mode ) ; begin
49410: LD_INT 0
49412: PPUSH
// ingame_video = mode ;
49413: LD_ADDR_OWVAR 52
49417: PUSH
49418: NOP4
49422: ST_TO_ADDR
// interface_hidden = mode ;
49423: LD_ADDR_OWVAR 54
49427: PUSH
49428: NOP4
49432: ST_TO_ADDR
// end ;
49433: LD_VAR 0 2
49437: RET
// export function Join ( array , element ) ; begin
49438: LD_INT 0
49440: PPUSH
// result := Replace ( array , array + 1 , element ) ;
49441: NOP4
49445: PUSH
49446: NOP4
49450: PPUSH
49451: NOP4
49455: PUSH
49456: LD_INT 1
49458: PLUS
49459: PPUSH
49460: NOP4
49464: PPUSH
49465: NOP4
49469: ST_TO_ADDR
// end ;
49470: LD_VAR 0 3
49474: RET
// export function JoinUnion ( array , element ) ; begin
49475: LD_INT 0
49477: PPUSH
// result := array union element ;
49478: NOP4
49482: PUSH
49483: NOP4
49487: PUSH
49488: NOP4
49492: UNION
49493: ST_TO_ADDR
// end ;
49494: LD_VAR 0 3
49498: RET
// export function GetBehemoths ( side ) ; begin
49499: LD_INT 0
49501: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
49502: NOP4
49506: PUSH
49507: LD_INT 22
49509: PUSH
49510: NOP4
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 31
49521: PUSH
49522: LD_INT 25
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PPUSH
49533: NOP4
49537: ST_TO_ADDR
// end ;
49538: LD_VAR 0 2
49542: RET
// export function Shuffle ( array ) ; var i , index ; begin
49543: LD_INT 0
49545: PPUSH
49546: PPUSH
49547: PPUSH
// result := [ ] ;
49548: NOP4
49552: PUSH
49553: EMPTY
49554: ST_TO_ADDR
// if not array then
49555: NOP4
49559: NOT
49560: IFFALSE 49564
// exit ;
49562: GO 49663
// Randomize ;
49564: NOP4
// for i = array downto 1 do
49568: NOP4
49572: PUSH
49573: DOUBLE
49574: NOP4
49578: INC
49579: ST_TO_ADDR
49580: LD_INT 1
49582: PUSH
49583: FOR_DOWNTO
49584: IFFALSE 49661
// begin index := rand ( 1 , array ) ;
49586: NOP4
49590: PUSH
49591: LD_INT 1
49593: PPUSH
49594: NOP4
49598: PPUSH
49599: NOP4
49603: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
49604: NOP4
49608: PUSH
49609: NOP4
49613: PPUSH
49614: NOP4
49618: PUSH
49619: LD_INT 1
49621: PLUS
49622: PPUSH
49623: NOP4
49627: PUSH
49628: NOP4
49632: ARRAY
49633: PPUSH
49634: NOP4
49638: ST_TO_ADDR
// array := Delete ( array , index ) ;
49639: NOP4
49643: PUSH
49644: NOP4
49648: PPUSH
49649: NOP4
49653: PPUSH
49654: NOP4
49658: ST_TO_ADDR
// end ;
49659: GO 49583
49661: POP
49662: POP
// end ;
49663: LD_VAR 0 2
49667: RET
// export function GetBaseMaterials ( base ) ; begin
49668: LD_INT 0
49670: PPUSH
// result := [ 0 , 0 , 0 ] ;
49671: NOP4
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: ST_TO_ADDR
// if not base then
49690: NOP4
49694: NOT
49695: IFFALSE 49699
// exit ;
49697: GO 49748
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
49699: NOP4
49703: PUSH
49704: NOP4
49708: PPUSH
49709: LD_INT 1
49711: PPUSH
49712: NOP4
49716: PUSH
49717: NOP4
49721: PPUSH
49722: LD_INT 2
49724: PPUSH
49725: NOP4
49729: PUSH
49730: NOP4
49734: PPUSH
49735: LD_INT 3
49737: PPUSH
49738: NOP4
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: LIST
49747: ST_TO_ADDR
// end ;
49748: LD_VAR 0 2
49752: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
49753: LD_INT 0
49755: PPUSH
49756: PPUSH
// result := array ;
49757: NOP4
49761: PUSH
49762: NOP4
49766: ST_TO_ADDR
// if size > 0 then
49767: NOP4
49771: PUSH
49772: LD_INT 0
49774: GREATER
49775: IFFALSE 49821
// for i := array downto size do
49777: NOP4
49781: PUSH
49782: DOUBLE
49783: NOP4
49787: INC
49788: ST_TO_ADDR
49789: NOP4
49793: PUSH
49794: FOR_DOWNTO
49795: IFFALSE 49819
// result := Delete ( result , result ) ;
49797: NOP4
49801: PUSH
49802: NOP4
49806: PPUSH
49807: NOP4
49811: PPUSH
49812: NOP4
49816: ST_TO_ADDR
49817: GO 49794
49819: POP
49820: POP
// end ;
49821: LD_VAR 0 3
49825: RET
// export function ComExit ( unit ) ; var tmp ; begin
49826: LD_INT 0
49828: PPUSH
49829: PPUSH
// if not IsInUnit ( unit ) then
49830: NOP4
49834: PPUSH
49835: NOP4
49839: NOT
49840: IFFALSE 49844
// exit ;
49842: GO 49904
// tmp := IsInUnit ( unit ) ;
49844: NOP4
49848: PUSH
49849: NOP4
49853: PPUSH
49854: NOP4
49858: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49859: NOP4
49863: PPUSH
49864: NOP4
49868: PUSH
49869: LD_INT 2
49871: EQUAL
49872: IFFALSE 49885
// ComExitVehicle ( unit ) else
49874: NOP4
49878: PPUSH
49879: NOP4
49883: GO 49894
// ComExitBuilding ( unit ) ;
49885: NOP4
49889: PPUSH
49890: NOP4
// result := tmp ;
49894: NOP4
49898: PUSH
49899: NOP4
49903: ST_TO_ADDR
// end ;
49904: LD_VAR 0 2
49908: RET
// export function ComExitAll ( units ) ; var i ; begin
49909: LD_INT 0
49911: PPUSH
49912: PPUSH
// if not units then
49913: NOP4
49917: NOT
49918: IFFALSE 49922
// exit ;
49920: GO 49948
// for i in units do
49922: NOP4
49926: PUSH
49927: NOP4
49931: PUSH
49932: FOR_IN
49933: IFFALSE 49946
// ComExit ( i ) ;
49935: NOP4
49939: PPUSH
49940: NOP4
49944: GO 49932
49946: POP
49947: POP
// end ;
49948: LD_VAR 0 2
49952: RET
// export function ResetHc ; begin
49953: LD_INT 0
49955: PPUSH
// InitHc ;
49956: NOP4
// hc_importance := 0 ;
49960: LD_ADDR_OWVAR 32
49964: PUSH
49965: LD_INT 0
49967: ST_TO_ADDR
// end ;
49968: LD_VAR 0 1
49972: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49973: LD_INT 0
49975: PPUSH
49976: PPUSH
49977: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49978: NOP4
49982: PUSH
49983: NOP4
49987: PUSH
49988: NOP4
49992: PLUS
49993: PUSH
49994: LD_INT 2
49996: DIV
49997: ST_TO_ADDR
// if _x < 0 then
49998: NOP4
50002: PUSH
50003: LD_INT 0
50005: LESS
50006: IFFALSE 50023
// _x := _x * - 1 ;
50008: NOP4
50012: PUSH
50013: NOP4
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: MUL
50022: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
50023: NOP4
50027: PUSH
50028: NOP4
50032: PUSH
50033: NOP4
50037: PLUS
50038: PUSH
50039: LD_INT 2
50041: DIV
50042: ST_TO_ADDR
// if _y < 0 then
50043: NOP4
50047: PUSH
50048: LD_INT 0
50050: LESS
50051: IFFALSE 50068
// _y := _y * - 1 ;
50053: NOP4
50057: PUSH
50058: NOP4
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: MUL
50067: ST_TO_ADDR
// result := [ _x , _y ] ;
50068: NOP4
50072: PUSH
50073: NOP4
50077: PUSH
50078: NOP4
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: ST_TO_ADDR
// end ;
50087: LD_VAR 0 5
50091: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
50092: LD_INT 0
50094: PPUSH
50095: PPUSH
50096: PPUSH
50097: PPUSH
// task := GetTaskList ( unit ) ;
50098: NOP4
50102: PUSH
50103: NOP4
50107: PPUSH
50108: NOP4
50112: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
50113: NOP4
50117: NOT
50118: PUSH
50119: NOP4
50123: PPUSH
50124: NOP4
50128: PPUSH
50129: NOP4
50133: NOT
50134: AND
50135: IFFALSE 50139
// exit ;
50137: GO 50257
// if IsInArea ( unit , area ) then
50139: NOP4
50143: PPUSH
50144: NOP4
50148: PPUSH
50149: NOP4
50153: IFFALSE 50171
// begin ComMoveToArea ( unit , goAway ) ;
50155: NOP4
50159: PPUSH
50160: NOP4
50164: PPUSH
50165: NOP4
// exit ;
50169: GO 50257
// end ; if task [ 1 ] [ 1 ] <> M then
50171: NOP4
50175: PUSH
50176: LD_INT 1
50178: ARRAY
50179: PUSH
50180: LD_INT 1
50182: ARRAY
50183: PUSH
50184: LD_STRING M
50186: NONEQUAL
50187: IFFALSE 50191
// exit ;
50189: GO 50257
// x := task [ 1 ] [ 2 ] ;
50191: NOP4
50195: PUSH
50196: NOP4
50200: PUSH
50201: LD_INT 1
50203: ARRAY
50204: PUSH
50205: LD_INT 2
50207: ARRAY
50208: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
50209: NOP4
50213: PUSH
50214: NOP4
50218: PUSH
50219: LD_INT 1
50221: ARRAY
50222: PUSH
50223: LD_INT 3
50225: ARRAY
50226: ST_TO_ADDR
// if InArea ( x , y , area ) then
50227: NOP4
50231: PPUSH
50232: NOP4
50236: PPUSH
50237: NOP4
50241: PPUSH
50242: NOP4
50246: IFFALSE 50257
// ComStop ( unit ) ;
50248: NOP4
50252: PPUSH
50253: NOP4
// end ;
50257: LD_VAR 0 4
50261: RET
// export function Abs ( value ) ; begin
50262: LD_INT 0
50264: PPUSH
// result := value ;
50265: NOP4
50269: PUSH
50270: NOP4
50274: ST_TO_ADDR
// if value < 0 then
50275: NOP4
50279: PUSH
50280: LD_INT 0
50282: LESS
50283: IFFALSE 50300
// result := value * - 1 ;
50285: NOP4
50289: PUSH
50290: NOP4
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: MUL
50299: ST_TO_ADDR
// end ;
50300: LD_VAR 0 2
50304: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
50305: LD_INT 0
50307: PPUSH
50308: PPUSH
50309: PPUSH
50310: PPUSH
50311: PPUSH
50312: PPUSH
50313: PPUSH
50314: PPUSH
// if not unit or not building then
50315: NOP4
50319: NOT
50320: PUSH
50321: NOP4
50325: NOT
50326: OR
50327: IFFALSE 50331
// exit ;
50329: GO 50557
// x := GetX ( building ) ;
50331: NOP4
50335: PUSH
50336: NOP4
50340: PPUSH
50341: NOP4
50345: ST_TO_ADDR
// y := GetY ( building ) ;
50346: NOP4
50350: PUSH
50351: NOP4
50355: PPUSH
50356: NOP4
50360: ST_TO_ADDR
// d := GetDir ( building ) ;
50361: NOP4
50365: PUSH
50366: NOP4
50370: PPUSH
50371: NOP4
50375: ST_TO_ADDR
// r := 4 ;
50376: NOP4
50380: PUSH
50381: LD_INT 4
50383: ST_TO_ADDR
// for i := 1 to 5 do
50384: NOP4
50388: PUSH
50389: DOUBLE
50390: LD_INT 1
50392: DEC
50393: ST_TO_ADDR
50394: LD_INT 5
50396: PUSH
50397: FOR_TO
50398: IFFALSE 50555
// begin _x := ShiftX ( x , d , r + i ) ;
50400: NOP4
50404: PUSH
50405: NOP4
50409: PPUSH
50410: NOP4
50414: PPUSH
50415: NOP4
50419: PUSH
50420: NOP4
50424: PLUS
50425: PPUSH
50426: NOP4
50430: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
50431: NOP4
50435: PUSH
50436: NOP4
50440: PPUSH
50441: NOP4
50445: PPUSH
50446: NOP4
50450: PUSH
50451: NOP4
50455: PLUS
50456: PPUSH
50457: NOP4
50461: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
50462: NOP4
50466: PPUSH
50467: NOP4
50471: PPUSH
50472: NOP4
50476: PUSH
50477: NOP4
50481: PPUSH
50482: NOP4
50486: PPUSH
50487: NOP4
50491: PPUSH
50492: NOP4
50496: PUSH
50497: LD_INT 3
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: IN
50507: NOT
50508: AND
50509: IFFALSE 50553
// begin ComMoveXY ( unit , _x , _y ) ;
50511: NOP4
50515: PPUSH
50516: NOP4
50520: PPUSH
50521: NOP4
50525: PPUSH
50526: NOP4
// result := [ _x , _y ] ;
50530: NOP4
50534: PUSH
50535: NOP4
50539: PUSH
50540: NOP4
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: ST_TO_ADDR
// exit ;
50549: POP
50550: POP
50551: GO 50557
// end ; end ;
50553: GO 50397
50555: POP
50556: POP
// end ;
50557: LD_VAR 0 3
50561: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
50562: LD_INT 0
50564: PPUSH
50565: PPUSH
50566: PPUSH
// result := 0 ;
50567: NOP4
50571: PUSH
50572: LD_INT 0
50574: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
50575: NOP4
50579: PUSH
50580: LD_INT 0
50582: LESS
50583: PUSH
50584: NOP4
50588: PUSH
50589: LD_INT 8
50591: GREATER
50592: OR
50593: PUSH
50594: NOP4
50598: PUSH
50599: LD_INT 0
50601: LESS
50602: OR
50603: PUSH
50604: NOP4
50608: PUSH
50609: LD_INT 8
50611: GREATER
50612: OR
50613: IFFALSE 50617
// exit ;
50615: GO 50692
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
50617: NOP4
50621: PUSH
50622: LD_INT 22
50624: PUSH
50625: NOP4
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PPUSH
50634: NOP4
50638: PUSH
50639: FOR_IN
50640: IFFALSE 50690
// begin un := UnitShoot ( i ) ;
50642: NOP4
50646: PUSH
50647: NOP4
50651: PPUSH
50652: NOP4
50656: ST_TO_ADDR
// if GetSide ( un ) = side1 then
50657: NOP4
50661: PPUSH
50662: NOP4
50666: PUSH
50667: NOP4
50671: EQUAL
50672: IFFALSE 50688
// begin result := un ;
50674: NOP4
50678: PUSH
50679: NOP4
50683: ST_TO_ADDR
// exit ;
50684: POP
50685: POP
50686: GO 50692
// end ; end ;
50688: GO 50639
50690: POP
50691: POP
// end ;
50692: LD_VAR 0 3
50696: RET
// export function GetCargoBay ( units ) ; begin
50697: LD_INT 0
50699: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
50700: NOP4
50704: PUSH
50705: NOP4
50709: PPUSH
50710: LD_INT 2
50712: PUSH
50713: LD_INT 34
50715: PUSH
50716: LD_INT 12
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 34
50725: PUSH
50726: LD_INT 51
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 34
50735: PUSH
50736: LD_INT 32
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 34
50745: PUSH
50746: NOP4
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: PPUSH
50762: NOP4
50766: ST_TO_ADDR
// end ;
50767: LD_VAR 0 2
50771: RET
// export function Negate ( value ) ; begin
50772: LD_INT 0
50774: PPUSH
// result := not value ;
50775: NOP4
50779: PUSH
50780: NOP4
50784: NOT
50785: ST_TO_ADDR
// end ;
50786: LD_VAR 0 2
50790: RET
// export function Inc ( value ) ; begin
50791: LD_INT 0
50793: PPUSH
// result := value + 1 ;
50794: NOP4
50798: PUSH
50799: NOP4
50803: PUSH
50804: LD_INT 1
50806: PLUS
50807: ST_TO_ADDR
// end ;
50808: LD_VAR 0 2
50812: RET
// export function Dec ( value ) ; begin
50813: LD_INT 0
50815: PPUSH
// result := value - 1 ;
50816: NOP4
50820: PUSH
50821: NOP4
50825: PUSH
50826: LD_INT 1
50828: MINUS
50829: ST_TO_ADDR
// end ;
50830: LD_VAR 0 2
50834: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50835: LD_INT 0
50837: PPUSH
50838: PPUSH
50839: PPUSH
50840: PPUSH
50841: PPUSH
50842: PPUSH
50843: PPUSH
50844: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50845: NOP4
50849: PPUSH
50850: NOP4
50854: PPUSH
50855: NOP4
50859: NOT
50860: PUSH
50861: NOP4
50865: PPUSH
50866: NOP4
50870: PPUSH
50871: NOP4
50875: NOT
50876: OR
50877: IFFALSE 50890
// begin result := - 1 ;
50879: NOP4
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: ST_TO_ADDR
// exit ;
50888: GO 51125
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50890: NOP4
50894: PUSH
50895: NOP4
50899: PPUSH
50900: NOP4
50904: PPUSH
50905: NOP4
50909: PPUSH
50910: NOP4
50914: PPUSH
50915: NOP4
50919: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50920: NOP4
50924: PUSH
50925: NOP4
50929: PPUSH
50930: NOP4
50934: PPUSH
50935: NOP4
50939: PUSH
50940: LD_INT 1
50942: ARRAY
50943: PPUSH
50944: NOP4
50948: PUSH
50949: LD_INT 2
50951: ARRAY
50952: PPUSH
50953: NOP4
50957: ST_TO_ADDR
// distance := 9999 ;
50958: NOP4
50962: PUSH
50963: LD_INT 9999
50965: ST_TO_ADDR
// for i := 0 to 5 do
50966: NOP4
50970: PUSH
50971: DOUBLE
50972: LD_INT 0
50974: DEC
50975: ST_TO_ADDR
50976: LD_INT 5
50978: PUSH
50979: FOR_TO
50980: IFFALSE 51123
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50982: NOP4
50986: PUSH
50987: NOP4
50991: PPUSH
50992: NOP4
50996: PPUSH
50997: NOP4
51001: PPUSH
51002: NOP4
51006: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
51007: NOP4
51011: PUSH
51012: NOP4
51016: PPUSH
51017: NOP4
51021: PPUSH
51022: NOP4
51026: PPUSH
51027: NOP4
51031: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51032: NOP4
51036: PPUSH
51037: NOP4
51041: PPUSH
51042: NOP4
51046: NOT
51047: IFFALSE 51051
// continue ;
51049: GO 50979
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
51051: NOP4
51055: PUSH
51056: NOP4
51060: PUSH
51061: LD_INT 1
51063: ARRAY
51064: PPUSH
51065: NOP4
51069: PUSH
51070: LD_INT 2
51072: ARRAY
51073: PPUSH
51074: NOP4
51078: PPUSH
51079: NOP4
51083: PPUSH
51084: NOP4
51088: ST_TO_ADDR
// if tmp < distance then
51089: NOP4
51093: PUSH
51094: NOP4
51098: LESS
51099: IFFALSE 51121
// begin result := i ;
51101: NOP4
51105: PUSH
51106: NOP4
51110: ST_TO_ADDR
// distance := tmp ;
51111: NOP4
51115: PUSH
51116: NOP4
51120: ST_TO_ADDR
// end ; end ;
51121: GO 50979
51123: POP
51124: POP
// end ;
51125: LD_VAR 0 5
51129: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51130: LD_INT 0
51132: PPUSH
51133: PPUSH
// if not driver or not IsInUnit ( driver ) then
51134: NOP4
51138: NOT
51139: PUSH
51140: NOP4
51144: PPUSH
51145: NOP4
51149: NOT
51150: OR
51151: IFFALSE 51155
// exit ;
51153: GO 51245
// vehicle := IsInUnit ( driver ) ;
51155: NOP4
51159: PUSH
51160: NOP4
51164: PPUSH
51165: NOP4
51169: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51170: NOP4
51174: PPUSH
51175: LD_STRING \
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: PUSH
51205: LD_STRING E
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: NOP4
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PPUSH
51241: NOP4
// end ;
51245: LD_VAR 0 2
51249: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
51250: LD_INT 0
51252: PPUSH
51253: PPUSH
// if not driver or not IsInUnit ( driver ) then
51254: NOP4
51258: NOT
51259: PUSH
51260: NOP4
51264: PPUSH
51265: NOP4
51269: NOT
51270: OR
51271: IFFALSE 51275
// exit ;
51273: GO 51365
// vehicle := IsInUnit ( driver ) ;
51275: NOP4
51279: PUSH
51280: NOP4
51284: PPUSH
51285: NOP4
51289: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
51290: NOP4
51294: PPUSH
51295: LD_STRING \
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 0
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: PUSH
51325: LD_STRING E
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: NOP4
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PPUSH
51361: NOP4
// end ;
51365: LD_VAR 0 2
51369: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
51370: LD_INT 0
51372: PPUSH
51373: PPUSH
51374: PPUSH
// tmp := [ ] ;
51375: NOP4
51379: PUSH
51380: EMPTY
51381: ST_TO_ADDR
// for i in units do
51382: NOP4
51386: PUSH
51387: NOP4
51391: PUSH
51392: FOR_IN
51393: IFFALSE 51431
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
51395: NOP4
51399: PUSH
51400: NOP4
51404: PPUSH
51405: NOP4
51409: PUSH
51410: LD_INT 1
51412: PLUS
51413: PPUSH
51414: NOP4
51418: PPUSH
51419: NOP4
51423: PPUSH
51424: NOP4
51428: ST_TO_ADDR
51429: GO 51392
51431: POP
51432: POP
// if not tmp then
51433: NOP4
51437: NOT
51438: IFFALSE 51442
// exit ;
51440: GO 51490
// if asc then
51442: NOP4
51446: IFFALSE 51470
// result := SortListByListAsc ( units , tmp ) else
51448: NOP4
51452: PUSH
51453: NOP4
51457: PPUSH
51458: NOP4
51462: PPUSH
51463: NOP4
51467: ST_TO_ADDR
51468: GO 51490
// result := SortListByListDesc ( units , tmp ) ;
51470: NOP4
51474: PUSH
51475: NOP4
51479: PPUSH
51480: NOP4
51484: PPUSH
51485: NOP4
51489: ST_TO_ADDR
// end ;
51490: LD_VAR 0 3
51494: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
51495: LD_INT 0
51497: PPUSH
51498: PPUSH
// task := GetTaskList ( mech ) ;
51499: NOP4
51503: PUSH
51504: NOP4
51508: PPUSH
51509: NOP4
51513: ST_TO_ADDR
// if not task then
51514: NOP4
51518: NOT
51519: IFFALSE 51523
// exit ;
51521: GO 51565
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
51523: NOP4
51527: PUSH
51528: NOP4
51532: PUSH
51533: LD_INT 1
51535: ARRAY
51536: PUSH
51537: LD_INT 1
51539: ARRAY
51540: PUSH
51541: LD_STRING r
51543: EQUAL
51544: PUSH
51545: NOP4
51549: PUSH
51550: LD_INT 1
51552: ARRAY
51553: PUSH
51554: LD_INT 4
51556: ARRAY
51557: PUSH
51558: NOP4
51562: EQUAL
51563: AND
51564: ST_TO_ADDR
// end ;
51565: LD_VAR 0 3
51569: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
51570: LD_INT 0
51572: PPUSH
// SetDir ( unit , d ) ;
51573: NOP4
51577: PPUSH
51578: NOP4
51582: PPUSH
51583: NOP4
// PlaceUnitXY ( unit , x , y , mode ) ;
51587: NOP4
51591: PPUSH
51592: NOP4
51596: PPUSH
51597: NOP4
51601: PPUSH
51602: NOP4
51606: PPUSH
51607: NOP4
// end ;
51611: LD_VAR 0 6
51615: RET
// export function ToNaturalNumber ( number ) ; begin
51616: LD_INT 0
51618: PPUSH
// result := number div 1 ;
51619: NOP4
51623: PUSH
51624: NOP4
51628: PUSH
51629: LD_INT 1
51631: DIV
51632: ST_TO_ADDR
// if number < 0 then
51633: NOP4
51637: PUSH
51638: LD_INT 0
51640: LESS
51641: IFFALSE 51651
// result := 0 ;
51643: NOP4
51647: PUSH
51648: LD_INT 0
51650: ST_TO_ADDR
// end ;
51651: LD_VAR 0 2
51655: RET
// export function SortByClass ( units , class ) ; var un ; begin
51656: LD_INT 0
51658: PPUSH
51659: PPUSH
// if not units or not class then
51660: NOP4
51664: NOT
51665: PUSH
51666: NOP4
51670: NOT
51671: OR
51672: IFFALSE 51676
// exit ;
51674: GO 51771
// result := [ ] ;
51676: NOP4
51680: PUSH
51681: EMPTY
51682: ST_TO_ADDR
// for un in units do
51683: NOP4
51687: PUSH
51688: NOP4
51692: PUSH
51693: FOR_IN
51694: IFFALSE 51769
// if GetClass ( un ) = class then
51696: NOP4
51700: PPUSH
51701: NOP4
51705: PUSH
51706: NOP4
51710: EQUAL
51711: IFFALSE 51738
// result := Insert ( result , 1 , un ) else
51713: NOP4
51717: PUSH
51718: NOP4
51722: PPUSH
51723: LD_INT 1
51725: PPUSH
51726: NOP4
51730: PPUSH
51731: NOP4
51735: ST_TO_ADDR
51736: GO 51767
// result := Replace ( result , result + 1 , un ) ;
51738: NOP4
51742: PUSH
51743: NOP4
51747: PPUSH
51748: NOP4
51752: PUSH
51753: LD_INT 1
51755: PLUS
51756: PPUSH
51757: NOP4
51761: PPUSH
51762: NOP4
51766: ST_TO_ADDR
51767: GO 51693
51769: POP
51770: POP
// end ;
51771: LD_VAR 0 3
51775: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51776: LD_INT 0
51778: PPUSH
51779: PPUSH
51780: PPUSH
51781: PPUSH
51782: PPUSH
51783: PPUSH
51784: PPUSH
// result := [ ] ;
51785: NOP4
51789: PUSH
51790: EMPTY
51791: ST_TO_ADDR
// if x - r < 0 then
51792: NOP4
51796: PUSH
51797: NOP4
51801: MINUS
51802: PUSH
51803: LD_INT 0
51805: LESS
51806: IFFALSE 51818
// min_x := 0 else
51808: NOP4
51812: PUSH
51813: LD_INT 0
51815: ST_TO_ADDR
51816: GO 51834
// min_x := x - r ;
51818: NOP4
51822: PUSH
51823: NOP4
51827: PUSH
51828: NOP4
51832: MINUS
51833: ST_TO_ADDR
// if y - r < 0 then
51834: NOP4
51838: PUSH
51839: NOP4
51843: MINUS
51844: PUSH
51845: LD_INT 0
51847: LESS
51848: IFFALSE 51860
// min_y := 0 else
51850: NOP4
51854: PUSH
51855: LD_INT 0
51857: ST_TO_ADDR
51858: GO 51876
// min_y := y - r ;
51860: NOP4
51864: PUSH
51865: NOP4
51869: PUSH
51870: NOP4
51874: MINUS
51875: ST_TO_ADDR
// max_x := x + r ;
51876: NOP4
51880: PUSH
51881: NOP4
51885: PUSH
51886: NOP4
51890: PLUS
51891: ST_TO_ADDR
// max_y := y + r ;
51892: NOP4
51896: PUSH
51897: NOP4
51901: PUSH
51902: NOP4
51906: PLUS
51907: ST_TO_ADDR
// for _x = min_x to max_x do
51908: NOP4
51912: PUSH
51913: DOUBLE
51914: NOP4
51918: DEC
51919: ST_TO_ADDR
51920: NOP4
51924: PUSH
51925: FOR_TO
51926: IFFALSE 52027
// for _y = min_y to max_y do
51928: NOP4
51932: PUSH
51933: DOUBLE
51934: NOP4
51938: DEC
51939: ST_TO_ADDR
51940: NOP4
51944: PUSH
51945: FOR_TO
51946: IFFALSE 52023
// begin if not ValidHex ( _x , _y ) then
51948: NOP4
51952: PPUSH
51953: NOP4
51957: PPUSH
51958: NOP4
51962: NOT
51963: IFFALSE 51967
// continue ;
51965: GO 51945
// if GetResourceTypeXY ( _x , _y ) then
51967: NOP4
51971: PPUSH
51972: NOP4
51976: PPUSH
51977: NOP4
51981: IFFALSE 52021
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51983: NOP4
51987: PUSH
51988: NOP4
51992: PPUSH
51993: NOP4
51997: PUSH
51998: LD_INT 1
52000: PLUS
52001: PPUSH
52002: NOP4
52006: PUSH
52007: NOP4
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PPUSH
52016: NOP4
52020: ST_TO_ADDR
// end ;
52021: GO 51945
52023: POP
52024: POP
52025: GO 51925
52027: POP
52028: POP
// end ;
52029: LD_VAR 0 4
52033: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
52034: LD_INT 0
52036: PPUSH
52037: PPUSH
52038: PPUSH
52039: PPUSH
52040: PPUSH
52041: PPUSH
52042: PPUSH
52043: PPUSH
// if not units then
52044: NOP4
52048: NOT
52049: IFFALSE 52053
// exit ;
52051: GO 52478
// result := UnitFilter ( units , [ f_ok ] ) ;
52053: NOP4
52057: PUSH
52058: NOP4
52062: PPUSH
52063: LD_INT 50
52065: PUSH
52066: EMPTY
52067: LIST
52068: PPUSH
52069: NOP4
52073: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
52074: NOP4
52078: PUSH
52079: NOP4
52083: PUSH
52084: LD_INT 1
52086: ARRAY
52087: PPUSH
52088: NOP4
52092: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
52093: NOP4
52097: PUSH
52098: LD_INT 29
52100: PUSH
52101: NOP4
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: ST_TO_ADDR
// if not result then
52110: NOP4
52114: NOT
52115: IFFALSE 52119
// exit ;
52117: GO 52478
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
52119: NOP4
52123: PUSH
52124: LD_INT 81
52126: PUSH
52127: NOP4
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PPUSH
52136: NOP4
52140: ST_TO_ADDR
// for i in result do
52141: NOP4
52145: PUSH
52146: NOP4
52150: PUSH
52151: FOR_IN
52152: IFFALSE 52476
// begin tag := GetTag ( i ) + 1 ;
52154: NOP4
52158: PUSH
52159: NOP4
52163: PPUSH
52164: NOP4
52168: PUSH
52169: LD_INT 1
52171: PLUS
52172: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
52173: NOP4
52177: PUSH
52178: NOP4
52182: PPUSH
52183: NOP4
52187: PPUSH
52188: NOP4
52192: PPUSH
52193: NOP4
52197: PPUSH
52198: LD_INT 6
52200: PPUSH
52201: NOP4
52205: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
52206: NOP4
52210: PUSH
52211: NOP4
52215: PPUSH
52216: NOP4
52220: PUSH
52221: NOP4
52225: IN
52226: NOT
52227: AND
52228: IFFALSE 52267
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
52230: NOP4
52234: PPUSH
52235: NOP4
52239: PUSH
52240: LD_INT 1
52242: ARRAY
52243: PUSH
52244: LD_INT 1
52246: ARRAY
52247: PPUSH
52248: NOP4
52252: PUSH
52253: LD_INT 1
52255: ARRAY
52256: PUSH
52257: LD_INT 2
52259: ARRAY
52260: PPUSH
52261: NOP4
52265: GO 52474
// if path > tag then
52267: NOP4
52271: PUSH
52272: NOP4
52276: GREATER
52277: IFFALSE 52444
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
52279: NOP4
52283: PUSH
52284: NOP4
52288: PPUSH
52289: LD_INT 91
52291: PUSH
52292: NOP4
52296: PUSH
52297: LD_INT 12
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: PPUSH
52305: NOP4
52309: ST_TO_ADDR
// if nearEnemy then
52310: NOP4
52314: IFFALSE 52342
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
52316: NOP4
52320: PPUSH
52321: NOP4
52325: PPUSH
52326: NOP4
52330: PPUSH
52331: NOP4
52335: PPUSH
52336: NOP4
52340: GO 52442
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
52342: NOP4
52346: PPUSH
52347: NOP4
52351: PUSH
52352: NOP4
52356: ARRAY
52357: PUSH
52358: LD_INT 1
52360: ARRAY
52361: PPUSH
52362: NOP4
52366: PUSH
52367: NOP4
52371: ARRAY
52372: PUSH
52373: LD_INT 2
52375: ARRAY
52376: PPUSH
52377: NOP4
52381: PUSH
52382: LD_INT 6
52384: GREATER
52385: IFFALSE 52428
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
52387: NOP4
52391: PPUSH
52392: NOP4
52396: PUSH
52397: NOP4
52401: ARRAY
52402: PUSH
52403: LD_INT 1
52405: ARRAY
52406: PPUSH
52407: NOP4
52411: PUSH
52412: NOP4
52416: ARRAY
52417: PUSH
52418: LD_INT 2
52420: ARRAY
52421: PPUSH
52422: NOP4
52426: GO 52442
// SetTag ( i , tag ) ;
52428: NOP4
52432: PPUSH
52433: NOP4
52437: PPUSH
52438: NOP4
// end else
52442: GO 52474
// if enemy then
52444: NOP4
52448: IFFALSE 52474
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
52450: NOP4
52454: PPUSH
52455: NOP4
52459: PPUSH
52460: NOP4
52464: PPUSH
52465: NOP4
52469: PPUSH
52470: NOP4
// end ;
52474: GO 52151
52476: POP
52477: POP
// end ;
52478: LD_VAR 0 3
52482: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
52483: LD_INT 0
52485: PPUSH
52486: PPUSH
52487: PPUSH
// if not unit or IsInUnit ( unit ) then
52488: NOP4
52492: NOT
52493: PUSH
52494: NOP4
52498: PPUSH
52499: NOP4
52503: OR
52504: IFFALSE 52508
// exit ;
52506: GO 52599
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
52508: NOP4
52512: PUSH
52513: NOP4
52517: PPUSH
52518: NOP4
52522: PPUSH
52523: NOP4
52527: PPUSH
52528: LD_INT 1
52530: PPUSH
52531: NOP4
52535: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
52536: NOP4
52540: PUSH
52541: NOP4
52545: PPUSH
52546: NOP4
52550: PPUSH
52551: NOP4
52555: PPUSH
52556: LD_INT 1
52558: PPUSH
52559: NOP4
52563: ST_TO_ADDR
// if ValidHex ( x , y ) then
52564: NOP4
52568: PPUSH
52569: NOP4
52573: PPUSH
52574: NOP4
52578: IFFALSE 52599
// ComTurnXY ( unit , x , y ) ;
52580: NOP4
52584: PPUSH
52585: NOP4
52589: PPUSH
52590: NOP4
52594: PPUSH
52595: NOP4
// end ;
52599: LD_VAR 0 3
52603: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52604: LD_INT 0
52606: PPUSH
52607: PPUSH
// result := false ;
52608: NOP4
52612: PUSH
52613: LD_INT 0
52615: ST_TO_ADDR
// if not units then
52616: NOP4
52620: NOT
52621: IFFALSE 52625
// exit ;
52623: GO 52670
// for i in units do
52625: NOP4
52629: PUSH
52630: NOP4
52634: PUSH
52635: FOR_IN
52636: IFFALSE 52668
// if See ( side , i ) then
52638: NOP4
52642: PPUSH
52643: NOP4
52647: PPUSH
52648: NOP4
52652: IFFALSE 52666
// begin result := true ;
52654: NOP4
52658: PUSH
52659: LD_INT 1
52661: ST_TO_ADDR
// exit ;
52662: POP
52663: POP
52664: GO 52670
// end ;
52666: GO 52635
52668: POP
52669: POP
// end ;
52670: LD_VAR 0 3
52674: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52675: LD_INT 0
52677: PPUSH
52678: PPUSH
52679: PPUSH
52680: PPUSH
// if not unit or not points then
52681: NOP4
52685: NOT
52686: PUSH
52687: NOP4
52691: NOT
52692: OR
52693: IFFALSE 52697
// exit ;
52695: GO 52787
// dist := 99999 ;
52697: NOP4
52701: PUSH
52702: LD_INT 99999
52704: ST_TO_ADDR
// for i in points do
52705: NOP4
52709: PUSH
52710: NOP4
52714: PUSH
52715: FOR_IN
52716: IFFALSE 52785
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52718: NOP4
52722: PUSH
52723: NOP4
52727: PPUSH
52728: NOP4
52732: PUSH
52733: LD_INT 1
52735: ARRAY
52736: PPUSH
52737: NOP4
52741: PUSH
52742: LD_INT 2
52744: ARRAY
52745: PPUSH
52746: NOP4
52750: ST_TO_ADDR
// if tmpDist < dist then
52751: NOP4
52755: PUSH
52756: NOP4
52760: LESS
52761: IFFALSE 52783
// begin result := i ;
52763: NOP4
52767: PUSH
52768: NOP4
52772: ST_TO_ADDR
// dist := tmpDist ;
52773: NOP4
52777: PUSH
52778: NOP4
52782: ST_TO_ADDR
// end ; end ;
52783: GO 52715
52785: POP
52786: POP
// end ;
52787: LD_VAR 0 3
52791: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52792: LD_INT 0
52794: PPUSH
// uc_side := side ;
52795: LD_ADDR_OWVAR 20
52799: PUSH
52800: NOP4
52804: ST_TO_ADDR
// uc_nation := 3 ;
52805: LD_ADDR_OWVAR 21
52809: PUSH
52810: LD_INT 3
52812: ST_TO_ADDR
// vc_chassis := 25 ;
52813: LD_ADDR_OWVAR 37
52817: PUSH
52818: LD_INT 25
52820: ST_TO_ADDR
// vc_engine := engine_siberite ;
52821: LD_ADDR_OWVAR 39
52825: PUSH
52826: LD_INT 3
52828: ST_TO_ADDR
// vc_control := control_computer ;
52829: LD_ADDR_OWVAR 38
52833: PUSH
52834: LD_INT 3
52836: ST_TO_ADDR
// vc_weapon := 59 ;
52837: LD_ADDR_OWVAR 40
52841: PUSH
52842: LD_INT 59
52844: ST_TO_ADDR
// result := CreateVehicle ;
52845: NOP4
52849: PUSH
52850: NOP4
52854: ST_TO_ADDR
// SetDir ( result , d ) ;
52855: NOP4
52859: PPUSH
52860: NOP4
52864: PPUSH
52865: NOP4
// PlaceUnitXY ( result , x , y , false ) ;
52869: NOP4
52873: PPUSH
52874: NOP4
52878: PPUSH
52879: NOP4
52883: PPUSH
52884: LD_INT 0
52886: PPUSH
52887: NOP4
// end ;
52891: LD_VAR 0 5
52895: RET
