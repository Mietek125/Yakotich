// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 64 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Randomize ;
  15: CALL_OW 10
// RandomizeAll ;
  19: CALL_OW 11
// InitRussian ;
  23: CALL 6722 0 0
// Czolg ;
  27: CALL 7260 0 0
// Action ;
  31: CALL 7361 0 0
// InitAmerican ;
  35: CALL 2464 0 0
// DebugMode ;
  39: CALL 216 0 0
// SetBName ( AmDep1 , mi ) ;
  43: LD_INT 1
  45: PPUSH
  46: LD_STRING mi
  48: PPUSH
  49: CALL_OW 500
// SetBName ( AmDep2 , ni ) ;
  53: LD_INT 47
  55: PPUSH
  56: LD_STRING ni
  58: PPUSH
  59: CALL_OW 500
// end ;
  63: END
// export YakotichCrew , MietekCrew ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin ; export Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Morozov , Kurin , Grishko , Burlak , Platonov , AmSold ; export KurinTime , MietekTime ; export AmConvoys , AmConvoysVehicles , AmNorthPersonel , AmSouthPersonel ; export AmSoldNorth , AmSciNorth , AmMechNorth , AmEngNorth , AmSoldSouth , AmSciSouth , AmMechSouth , AmEngSouth ; export AmSoldConvoy , AmSciConvoy , AmMechConvoy , AmEngConvoy , AmVehicleConvoy ; export Tank ; export GunCounter ; export debug ; export mission_prefix ; export maksim_scout_ended , maksim_back , turrets_researched , gattling_researched , gun_researched , gun_recycled , second_wave_clear , transport_builded , first_attack_spawned , first_attack_clear , reiforcements_called , kurin_attack_started , end_of_the_mission , passages_touched , riverside_touched ; function Init ; begin
  64: LD_INT 0
  66: PPUSH
// mission_prefix := 02_ ;
  67: LD_ADDR_EXP 45
  71: PUSH
  72: LD_STRING 02_
  74: ST_TO_ADDR
// maksim_scout_ended := false ;
  75: LD_ADDR_EXP 46
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// maksim_back := false ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// turrets_researched := false ;
  91: LD_ADDR_EXP 48
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// gattling_researched := false ;
  99: LD_ADDR_EXP 49
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// gun_recycled := false ;
 107: LD_ADDR_EXP 51
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// gun_researched := false ;
 115: LD_ADDR_EXP 50
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// transport_builded := false ;
 123: LD_ADDR_EXP 53
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// first_attack_spawned := false ;
 131: LD_ADDR_EXP 54
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// first_attack_clear := false ;
 139: LD_ADDR_EXP 55
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// reiforcements_called := false ;
 147: LD_ADDR_EXP 56
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// kurin_attack_started := false ;
 155: LD_ADDR_EXP 57
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// end_of_the_mission := false ;
 163: LD_ADDR_EXP 58
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// passages_touched := false ;
 171: LD_ADDR_EXP 59
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// riverside_touched := false ;
 179: LD_ADDR_EXP 60
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// MietekTime := 5 5$0 ;
 187: LD_ADDR_EXP 24
 191: PUSH
 192: LD_INT 10500
 194: ST_TO_ADDR
// KurinTime := 30 30$0 ;
 195: LD_ADDR_EXP 23
 199: PUSH
 200: LD_INT 63000
 202: ST_TO_ADDR
// GunCounter := 0 ;
 203: LD_ADDR_EXP 43
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// end ;
 211: LD_VAR 0 1
 215: RET
// function DebugMode ; var i ; begin
 216: LD_INT 0
 218: PPUSH
 219: PPUSH
// if not debug then
 220: LD_EXP 44
 224: NOT
 225: IFFALSE 229
// exit ;
 227: GO 248
// Difficulty := 3 ;
 229: LD_ADDR_OWVAR 67
 233: PUSH
 234: LD_INT 3
 236: ST_TO_ADDR
// TurnFogOff ( ) ;
 237: CALL_OW 537
// FogOff ( 3 ) ;
 241: LD_INT 3
 243: PPUSH
 244: CALL_OW 344
// end ; end_of_file
 248: LD_VAR 0 1
 252: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
 257: PPUSH
// uc_side := GetSide ( b ) ;
 258: LD_ADDR_OWVAR 20
 262: PUSH
 263: LD_VAR 0 2
 267: PPUSH
 268: CALL_OW 255
 272: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 273: LD_ADDR_OWVAR 21
 277: PUSH
 278: LD_VAR 0 2
 282: PPUSH
 283: CALL_OW 248
 287: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 288: LD_ADDR_VAR 0 5
 292: PUSH
 293: LD_VAR 0 2
 297: PPUSH
 298: CALL_OW 254
 302: PUSH
 303: LD_INT 3
 305: MINUS
 306: ST_TO_ADDR
// if dir < 0 then
 307: LD_VAR 0 5
 311: PUSH
 312: LD_INT 0
 314: LESS
 315: IFFALSE 331
// dir := 6 + dir ;
 317: LD_ADDR_VAR 0 5
 321: PUSH
 322: LD_INT 6
 324: PUSH
 325: LD_VAR 0 5
 329: PLUS
 330: ST_TO_ADDR
// un := CreateHuman ;
 331: LD_ADDR_VAR 0 4
 335: PUSH
 336: CALL_OW 44
 340: ST_TO_ADDR
// SetDir ( un , dir ) ;
 341: LD_VAR 0 4
 345: PPUSH
 346: LD_VAR 0 5
 350: PPUSH
 351: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 355: LD_VAR 0 4
 359: PPUSH
 360: LD_VAR 0 2
 364: PPUSH
 365: CALL_OW 52
// end ;
 369: LD_VAR 0 3
 373: RET
// export function GetCountOfBuildingsInBase ( base , btype ) ; var i , tmp ; begin
 374: LD_INT 0
 376: PPUSH
 377: PPUSH
 378: PPUSH
// result := 0 ;
 379: LD_ADDR_VAR 0 3
 383: PUSH
 384: LD_INT 0
 386: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_btype , btype ] ) ;
 387: LD_ADDR_VAR 0 5
 391: PUSH
 392: LD_INT 30
 394: PUSH
 395: LD_VAR 0 2
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PPUSH
 404: CALL_OW 69
 408: ST_TO_ADDR
// if not base or not tmp then
 409: LD_VAR 0 1
 413: NOT
 414: PUSH
 415: LD_VAR 0 5
 419: NOT
 420: OR
 421: IFFALSE 425
// exit ;
 423: GO 473
// for i in tmp do
 425: LD_ADDR_VAR 0 4
 429: PUSH
 430: LD_VAR 0 5
 434: PUSH
 435: FOR_IN
 436: IFFALSE 471
// if GetBase ( i ) = base then
 438: LD_VAR 0 4
 442: PPUSH
 443: CALL_OW 274
 447: PUSH
 448: LD_VAR 0 1
 452: EQUAL
 453: IFFALSE 469
// result := result + 1 ;
 455: LD_ADDR_VAR 0 3
 459: PUSH
 460: LD_VAR 0 3
 464: PUSH
 465: LD_INT 1
 467: PLUS
 468: ST_TO_ADDR
 469: GO 435
 471: POP
 472: POP
// end ;
 473: LD_VAR 0 3
 477: RET
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 478: LD_EXP 57
 482: PUSH
 483: LD_INT 0
 485: EQUAL
 486: PUSH
 487: LD_INT 17
 489: PPUSH
 490: LD_INT 22
 492: PUSH
 493: LD_INT 3
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 2
 502: PUSH
 503: LD_INT 21
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 21
 515: PUSH
 516: LD_INT 2
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: LIST
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PPUSH
 532: CALL_OW 70
 536: PUSH
 537: LD_INT 0
 539: GREATER
 540: AND
 541: IFFALSE 627
 543: GO 545
 545: DISABLE
 546: LD_INT 0
 548: PPUSH
// begin enable ;
 549: ENABLE
// for unit in FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 550: LD_ADDR_VAR 0 1
 554: PUSH
 555: LD_INT 17
 557: PPUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 3
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: LD_INT 21
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 21
 583: PUSH
 584: LD_INT 2
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: LIST
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PPUSH
 600: CALL_OW 70
 604: PUSH
 605: FOR_IN
 606: IFFALSE 625
// begin ComMoveXY ( unit , 95 , 59 ) ;
 608: LD_VAR 0 1
 612: PPUSH
 613: LD_INT 95
 615: PPUSH
 616: LD_INT 59
 618: PPUSH
 619: CALL_OW 111
// end ;
 623: GO 605
 625: POP
 626: POP
// end ;
 627: PPOPN 1
 629: END
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 630: LD_EXP 57
 634: PUSH
 635: LD_INT 0
 637: EQUAL
 638: PUSH
 639: LD_INT 18
 641: PPUSH
 642: LD_INT 22
 644: PUSH
 645: LD_INT 3
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 2
 654: PUSH
 655: LD_INT 21
 657: PUSH
 658: LD_INT 1
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PUSH
 665: LD_INT 21
 667: PUSH
 668: LD_INT 2
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PPUSH
 684: CALL_OW 70
 688: PUSH
 689: LD_INT 0
 691: GREATER
 692: AND
 693: IFFALSE 779
 695: GO 697
 697: DISABLE
 698: LD_INT 0
 700: PPUSH
// begin enable ;
 701: ENABLE
// for unit in FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 702: LD_ADDR_VAR 0 1
 706: PUSH
 707: LD_INT 18
 709: PPUSH
 710: LD_INT 22
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: PUSH
 720: LD_INT 2
 722: PUSH
 723: LD_INT 21
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: LIST
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PPUSH
 752: CALL_OW 70
 756: PUSH
 757: FOR_IN
 758: IFFALSE 777
// begin ComMoveXY ( unit , 95 , 59 ) ;
 760: LD_VAR 0 1
 764: PPUSH
 765: LD_INT 95
 767: PPUSH
 768: LD_INT 59
 770: PPUSH
 771: CALL_OW 111
// end ;
 775: GO 757
 777: POP
 778: POP
// end ;
 779: PPOPN 1
 781: END
// every 1 trigger IsSelected ( Serpent ) do
 782: LD_INT 215
 784: PPUSH
 785: CALL_OW 306
 789: IFFALSE 893
 791: GO 793
 793: DISABLE
// begin SerpentExp ( [ 1 , 2 , 3 , 4 ] ) ;
 794: LD_INT 1
 796: PUSH
 797: LD_INT 2
 799: PUSH
 800: LD_INT 3
 802: PUSH
 803: LD_INT 4
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: PPUSH
 812: CALL 894 0 1
// Wait ( 0 0$05 ) ;
 816: LD_INT 175
 818: PPUSH
 819: CALL_OW 67
// Say ( Serpent , 2Langu-Sikret ) ;
 823: LD_INT 215
 825: PPUSH
 826: LD_STRING 2Langu-Sikret
 828: PPUSH
 829: CALL_OW 88
// TeleportUnit ( Serpent , 13 , 4 , 100 , true ) ;
 833: LD_INT 215
 835: PPUSH
 836: LD_INT 13
 838: PPUSH
 839: LD_INT 4
 841: PPUSH
 842: LD_INT 100
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: CALL_OW 483
// Wait ( 0 0$05 ) ;
 852: LD_INT 175
 854: PPUSH
 855: CALL_OW 67
// RemoveUnit ( Serpent ) ;
 859: LD_INT 215
 861: PPUSH
 862: CALL_OW 64
// SaveVariable ( 1 , SerpentSaved ) ;
 866: LD_INT 1
 868: PPUSH
 869: LD_STRING SerpentSaved
 871: PPUSH
 872: CALL_OW 39
// SaveCharacters ( Serpent , Langu ) ;
 876: LD_INT 215
 878: PPUSH
 879: LD_STRING Langu
 881: PPUSH
 882: CALL_OW 38
// SetAchievement ( ACH_SERPENT ) ;
 886: LD_STRING ACH_SERPENT
 888: PPUSH
 889: CALL_OW 543
// end ;
 893: END
// export function SerpentExp ( q ) ; var dec , q1 ; begin
 894: LD_INT 0
 896: PPUSH
 897: PPUSH
 898: PPUSH
// dec = SelectiveQuery ( SerpentQuery , q ) ;
 899: LD_ADDR_VAR 0 3
 903: PUSH
 904: LD_STRING SerpentQuery
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: CALL_OW 98
 916: ST_TO_ADDR
// case dec of 1 :
 917: LD_VAR 0 3
 921: PUSH
 922: LD_INT 1
 924: DOUBLE
 925: EQUAL
 926: IFTRUE 930
 928: GO 948
 930: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 1000 ) ;
 931: LD_EXP 3
 935: PPUSH
 936: LD_INT 1
 938: PPUSH
 939: LD_INT 1000
 941: PPUSH
 942: CALL_OW 591
// end ; 2 :
 946: GO 1027
 948: LD_INT 2
 950: DOUBLE
 951: EQUAL
 952: IFTRUE 956
 954: GO 974
 956: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 1000 ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 1000
 967: PPUSH
 968: CALL_OW 591
// end ; 3 :
 972: GO 1027
 974: LD_INT 3
 976: DOUBLE
 977: EQUAL
 978: IFTRUE 982
 980: GO 1000
 982: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 1000 ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_INT 3
 990: PPUSH
 991: LD_INT 1000
 993: PPUSH
 994: CALL_OW 591
// end ; 4 :
 998: GO 1027
1000: LD_INT 4
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1026
1008: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 1000 ) ;
1009: LD_EXP 3
1013: PPUSH
1014: LD_INT 4
1016: PPUSH
1017: LD_INT 1000
1019: PPUSH
1020: CALL_OW 591
// end ; end ;
1024: GO 1027
1026: POP
// end ;
1027: LD_VAR 0 2
1031: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
1032: LD_EXP 3
1036: PPUSH
1037: CALL_OW 301
1041: IFFALSE 1053
1043: GO 1045
1045: DISABLE
// begin YouLost ( YakotichDead ) ;
1046: LD_STRING YakotichDead
1048: PPUSH
1049: CALL_OW 104
// end ;
1053: END
// every 0 0$1 trigger IsDead ( Mietek ) do
1054: LD_EXP 4
1058: PPUSH
1059: CALL_OW 301
1063: IFFALSE 1075
1065: GO 1067
1067: DISABLE
// begin YouLost ( MietekDead ) ;
1068: LD_STRING MietekDead
1070: PPUSH
1071: CALL_OW 104
// end ;
1075: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
1076: LD_VAR 0 1
1080: PUSH
1081: LD_INT 22
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 3
1093: PUSH
1094: LD_INT 23
1096: PUSH
1097: LD_INT 0
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 21
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: PPUSH
1123: CALL_OW 69
1127: IN
1128: IFFALSE 1137
// YouLost ( PeopleDead ) ;
1130: LD_STRING PeopleDead
1132: PPUSH
1133: CALL_OW 104
// end ;
1137: PPOPN 1
1139: END
// every 0 0$1 trigger FilterUnitsInArea ( OmikronArea , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) do
1140: LD_INT 15
1142: PPUSH
1143: LD_INT 2
1145: PUSH
1146: LD_INT 22
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: LD_INT 22
1158: PUSH
1159: LD_INT 4
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 70
1175: IFFALSE 1187
1177: GO 1179
1179: DISABLE
// begin YouLost ( ConvoysMadeIt ) ;
1180: LD_STRING ConvoysMadeIt
1182: PPUSH
1183: CALL_OW 104
// end ;
1187: END
// every 0 0$1 trigger maksim_back = true do
1188: LD_EXP 47
1192: PUSH
1193: LD_INT 1
1195: EQUAL
1196: IFFALSE 1205
1198: GO 1200
1200: DISABLE
// begin AmAttacks ;
1201: CALL 3879 0 0
// end ;
1205: END
// export function MaksimScout ; begin
1206: LD_INT 0
1208: PPUSH
// SetSide ( Maksim , 6 ) ;
1209: LD_EXP 9
1213: PPUSH
1214: LD_INT 6
1216: PPUSH
1217: CALL_OW 235
// ComMoveToArea ( Maksim , MaksimStop1 ) ;
1221: LD_EXP 9
1225: PPUSH
1226: LD_INT 5
1228: PPUSH
1229: CALL_OW 113
// end ;
1233: LD_VAR 0 1
1237: RET
// every 1 trigger IsInArea ( Maksim , MaksimStop1 ) do
1238: LD_EXP 9
1242: PPUSH
1243: LD_INT 5
1245: PPUSH
1246: CALL_OW 308
1250: IFFALSE 1283
1252: GO 1254
1254: DISABLE
// begin ComHold ( Maksim ) ;
1255: LD_EXP 9
1259: PPUSH
1260: CALL_OW 140
// Wait ( 0 0$10 ) ;
1264: LD_INT 350
1266: PPUSH
1267: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop2 ) ;
1271: LD_EXP 9
1275: PPUSH
1276: LD_INT 6
1278: PPUSH
1279: CALL_OW 113
// end ;
1283: END
// every 1 trigger IsInArea ( Maksim , MaksimStop2 ) do
1284: LD_EXP 9
1288: PPUSH
1289: LD_INT 6
1291: PPUSH
1292: CALL_OW 308
1296: IFFALSE 1320
1298: GO 1300
1300: DISABLE
// begin Wait ( 0 0$10 ) ;
1301: LD_INT 350
1303: PPUSH
1304: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop3 ) ;
1308: LD_EXP 9
1312: PPUSH
1313: LD_INT 7
1315: PPUSH
1316: CALL_OW 113
// end ;
1320: END
// every 1 trigger IsInArea ( Maksim , MaksimStop3 ) do
1321: LD_EXP 9
1325: PPUSH
1326: LD_INT 7
1328: PPUSH
1329: CALL_OW 308
1333: IFFALSE 1367
1335: GO 1337
1337: DISABLE
// begin Wait ( 0 0$10 ) ;
1338: LD_INT 350
1340: PPUSH
1341: CALL_OW 67
// maksim_scout_ended = true ;
1345: LD_ADDR_EXP 46
1349: PUSH
1350: LD_INT 1
1352: ST_TO_ADDR
// ComMoveUnit ( Maksim , Yakotich ) ;
1353: LD_EXP 9
1357: PPUSH
1358: LD_EXP 3
1362: PPUSH
1363: CALL_OW 112
// end ;
1367: END
// every 0 0$1 trigger maksim_back do
1368: LD_EXP 47
1372: IFFALSE 1426
1374: GO 1376
1376: DISABLE
// begin enable ;
1377: ENABLE
// if KurinTime then
1378: LD_EXP 23
1382: IFFALSE 1417
// begin KurinTime := KurinTime - 0 0$1 ;
1384: LD_ADDR_EXP 23
1388: PUSH
1389: LD_EXP 23
1393: PUSH
1394: LD_INT 35
1396: MINUS
1397: ST_TO_ADDR
// display_strings := [ #KurinAttack , KurinTime ] ;
1398: LD_ADDR_OWVAR 47
1402: PUSH
1403: LD_STRING #KurinAttack
1405: PUSH
1406: LD_EXP 23
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: ST_TO_ADDR
// end else
1415: GO 1426
// begin display_strings :=  ;
1417: LD_ADDR_OWVAR 47
1421: PUSH
1422: LD_STRING 
1424: ST_TO_ADDR
// disable ;
1425: DISABLE
// end ; end ;
1426: END
// every 0 0$1 trigger first_attack_clear do
1427: LD_EXP 55
1431: IFFALSE 1491
1433: GO 1435
1435: DISABLE
// begin enable ;
1436: ENABLE
// if MietekTime then
1437: LD_EXP 24
1441: IFFALSE 1482
// begin MietekTime := MietekTime - 0 0$1 ;
1443: LD_ADDR_EXP 24
1447: PUSH
1448: LD_EXP 24
1452: PUSH
1453: LD_INT 35
1455: MINUS
1456: ST_TO_ADDR
// display_strings := display_strings ^ [ #MietekForces , MietekTime ] ;
1457: LD_ADDR_OWVAR 47
1461: PUSH
1462: LD_OWVAR 47
1466: PUSH
1467: LD_STRING #MietekForces
1469: PUSH
1470: LD_EXP 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: ADD
1479: ST_TO_ADDR
// end else
1480: GO 1491
// begin display_strings :=  ;
1482: LD_ADDR_OWVAR 47
1486: PUSH
1487: LD_STRING 
1489: ST_TO_ADDR
// disable ;
1490: DISABLE
// end ; end ; end_of_file
1491: END
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
1492: LD_VAR 0 1
1496: PPUSH
1497: CALL_OW 255
1501: PUSH
1502: LD_INT 3
1504: EQUAL
1505: PUSH
1506: LD_VAR 0 1
1510: PPUSH
1511: CALL_OW 266
1515: PUSH
1516: LD_INT 0
1518: EQUAL
1519: AND
1520: IFFALSE 1545
// begin RuDep := building ;
1522: LD_ADDR_EXP 61
1526: PUSH
1527: LD_VAR 0 1
1531: ST_TO_ADDR
// SetRestrict ( b_depot , 3 , false ) ;
1532: LD_INT 0
1534: PPUSH
1535: LD_INT 3
1537: PPUSH
1538: LD_INT 0
1540: PPUSH
1541: CALL_OW 324
// end ; end ;
1545: PPOPN 2
1547: END
// on VehicleConstructed ( v , f ) do begin if GetSide ( v ) = 3 and GetWeapon ( v ) = ru_gun then
1548: LD_VAR 0 1
1552: PPUSH
1553: CALL_OW 255
1557: PUSH
1558: LD_INT 3
1560: EQUAL
1561: PUSH
1562: LD_VAR 0 1
1566: PPUSH
1567: CALL_OW 264
1571: PUSH
1572: LD_INT 44
1574: EQUAL
1575: AND
1576: IFFALSE 1604
// begin GunCounter := GunCounter + 1 ;
1578: LD_ADDR_EXP 43
1582: PUSH
1583: LD_EXP 43
1587: PUSH
1588: LD_INT 1
1590: PLUS
1591: ST_TO_ADDR
// SetAchievementEX ( ACH_GUN , GunCounter ) ;
1592: LD_STRING ACH_GUN
1594: PPUSH
1595: LD_EXP 43
1599: PPUSH
1600: CALL_OW 564
// end ; end ;
1604: PPOPN 2
1606: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 3 and GetBType ( b ) = b_depot then
1607: LD_VAR 0 1
1611: PPUSH
1612: CALL_OW 255
1616: PUSH
1617: LD_INT 3
1619: EQUAL
1620: PUSH
1621: LD_VAR 0 1
1625: PPUSH
1626: CALL_OW 266
1630: PUSH
1631: LD_INT 0
1633: EQUAL
1634: AND
1635: IFFALSE 1689
// begin DialogueOn ;
1637: CALL_OW 6
// Say ( Boris , 2Bor-01 ) ;
1641: LD_EXP 5
1645: PPUSH
1646: LD_STRING 2Bor-01
1648: PPUSH
1649: CALL_OW 88
// Say ( Vasilij , 2Vas-05 ) ;
1653: LD_EXP 6
1657: PPUSH
1658: LD_STRING 2Vas-05
1660: PPUSH
1661: CALL_OW 88
// ChangeMissionObjectives ( transport ) ;
1665: LD_STRING transport
1667: PPUSH
1668: CALL_OW 337
// SetTech ( 83 , 3 , 1 ) ;
1672: LD_INT 83
1674: PPUSH
1675: LD_INT 3
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 322
// DialogueOff ;
1685: CALL_OW 7
// end ; if GetSide ( b ) = 3 and GetBType ( b ) = b_lab then
1689: LD_VAR 0 1
1693: PPUSH
1694: CALL_OW 255
1698: PUSH
1699: LD_INT 3
1701: EQUAL
1702: PUSH
1703: LD_VAR 0 1
1707: PPUSH
1708: CALL_OW 266
1712: PUSH
1713: LD_INT 6
1715: EQUAL
1716: AND
1717: IFFALSE 1775
// begin Say ( Vasilij , 2Vas-01 ) ;
1719: LD_EXP 6
1723: PPUSH
1724: LD_STRING 2Vas-01
1726: PPUSH
1727: CALL_OW 88
// Say ( Vasilij , 2Vas-02 ) ;
1731: LD_EXP 6
1735: PPUSH
1736: LD_STRING 2Vas-02
1738: PPUSH
1739: CALL_OW 88
// Say ( Yakotich , 2Yak-14 ) ;
1743: LD_EXP 3
1747: PPUSH
1748: LD_STRING 2Yak-14
1750: PPUSH
1751: CALL_OW 88
// ChangeMissionObjectives ( gattling ) ;
1755: LD_STRING gattling
1757: PPUSH
1758: CALL_OW 337
// SetTech ( 69 , 3 , 1 ) ;
1762: LD_INT 69
1764: PPUSH
1765: LD_INT 3
1767: PPUSH
1768: LD_INT 1
1770: PPUSH
1771: CALL_OW 322
// end ; end ;
1775: PPOPN 1
1777: END
// on VehicleRecycled ( BuildingID , VehicleID , Side , Nation , X , Y , Direction , Chassis , Controller , Engine , Weapon ) do begin if Side = 3 and Nation = 1 and Weapon in [ 3 , 5 , 6 ] and gun_recycled = false then
1778: LD_VAR 0 3
1782: PUSH
1783: LD_INT 3
1785: EQUAL
1786: PUSH
1787: LD_VAR 0 4
1791: PUSH
1792: LD_INT 1
1794: EQUAL
1795: AND
1796: PUSH
1797: LD_VAR 0 11
1801: PUSH
1802: LD_INT 3
1804: PUSH
1805: LD_INT 5
1807: PUSH
1808: LD_INT 6
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: IN
1816: AND
1817: PUSH
1818: LD_EXP 51
1822: PUSH
1823: LD_INT 0
1825: EQUAL
1826: AND
1827: IFFALSE 1875
// begin gun_recycled = true ;
1829: LD_ADDR_EXP 51
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// Say ( Stanislav , 2Stan-04 ) ;
1837: LD_EXP 16
1841: PPUSH
1842: LD_STRING 2Stan-04
1844: PPUSH
1845: CALL_OW 88
// SetTech ( 39 , 3 , 1 ) ;
1849: LD_INT 39
1851: PPUSH
1852: LD_INT 3
1854: PPUSH
1855: LD_INT 1
1857: PPUSH
1858: CALL_OW 322
// SetRestrict ( 17 , 3 , 1 ) ;
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 3
1867: PPUSH
1868: LD_INT 1
1870: PPUSH
1871: CALL_OW 324
// end ; end ;
1875: PPOPN 11
1877: END
// on Contact ( side1 , side2 ) do begin if ( ( side1 = 4 and side2 = 3 ) or ( side1 = 3 and side2 = 4 ) ) and reiforcements_called = false then
1878: LD_VAR 0 1
1882: PUSH
1883: LD_INT 4
1885: EQUAL
1886: PUSH
1887: LD_VAR 0 2
1891: PUSH
1892: LD_INT 3
1894: EQUAL
1895: AND
1896: PUSH
1897: LD_VAR 0 1
1901: PUSH
1902: LD_INT 3
1904: EQUAL
1905: PUSH
1906: LD_VAR 0 2
1910: PUSH
1911: LD_INT 4
1913: EQUAL
1914: AND
1915: OR
1916: PUSH
1917: LD_EXP 56
1921: PUSH
1922: LD_INT 0
1924: EQUAL
1925: AND
1926: IFFALSE 2030
// begin reiforcements_called := true ;
1928: LD_ADDR_EXP 56
1932: PUSH
1933: LD_INT 1
1935: ST_TO_ADDR
// Say ( Yakotich , 2Yak-23 ) ;
1936: LD_EXP 3
1940: PPUSH
1941: LD_STRING 2Yak-23
1943: PPUSH
1944: CALL_OW 88
// Wait ( 0 0$10 ) ;
1948: LD_INT 350
1950: PPUSH
1951: CALL_OW 67
// SayRadio ( Yakotich , 2Yak-Reinforcements ) ;
1955: LD_EXP 3
1959: PPUSH
1960: LD_STRING 2Yak-Reinforcements
1962: PPUSH
1963: CALL_OW 94
// SayRadio ( Morozov , 2Moro-Reinforcements ) ;
1967: LD_EXP 17
1971: PPUSH
1972: LD_STRING 2Moro-Reinforcements
1974: PPUSH
1975: CALL_OW 94
// Wait ( 0 0$10 ) ;
1979: LD_INT 350
1981: PPUSH
1982: CALL_OW 67
// SayRadio ( Mietek , 2Ryn-04 ) ;
1986: LD_EXP 4
1990: PPUSH
1991: LD_STRING 2Ryn-04
1993: PPUSH
1994: CALL_OW 94
// SayRadio ( Mietek , 2Ryn-05 ) ;
1998: LD_EXP 4
2002: PPUSH
2003: LD_STRING 2Ryn-05
2005: PPUSH
2006: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-24 ) ;
2010: LD_EXP 3
2014: PPUSH
2015: LD_STRING 2Yak-24
2017: PPUSH
2018: CALL_OW 94
// first_attack_clear = true ;
2022: LD_ADDR_EXP 55
2026: PUSH
2027: LD_INT 1
2029: ST_TO_ADDR
// end ; end ;
2030: PPOPN 2
2032: END
// every 0 0$1 trigger Researched ( 3 , 69 ) do
2033: LD_INT 3
2035: PPUSH
2036: LD_INT 69
2038: PPUSH
2039: CALL_OW 325
2043: IFFALSE 2087
2045: GO 2047
2047: DISABLE
// begin Say ( Vasilij , 2Vas-03 ) ;
2048: LD_EXP 6
2052: PPUSH
2053: LD_STRING 2Vas-03
2055: PPUSH
2056: CALL_OW 88
// Say ( Vasilij , 2Vas-04 ) ;
2060: LD_EXP 6
2064: PPUSH
2065: LD_STRING 2Vas-04
2067: PPUSH
2068: CALL_OW 88
// gattling_researched = true ;
2072: LD_ADDR_EXP 49
2076: PUSH
2077: LD_INT 1
2079: ST_TO_ADDR
// ChangeMissionObjectives ( gattling-2 ) ;
2080: LD_STRING gattling-2
2082: PPUSH
2083: CALL_OW 337
// end ;
2087: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
2088: LD_INT 3
2090: PPUSH
2091: LD_INT 90
2093: PPUSH
2094: CALL_OW 325
2098: IFFALSE 2118
2100: GO 2102
2102: DISABLE
// begin turrets_researched = true ;
2103: LD_ADDR_EXP 48
2107: PUSH
2108: LD_INT 1
2110: ST_TO_ADDR
// ChangeMissionObjectives ( turret-2 ) ;
2111: LD_STRING turret-2
2113: PPUSH
2114: CALL_OW 337
// end ;
2118: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 89 ] , [ f_weapon , 51 ] ] ] ) do
2119: LD_INT 22
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 21
2131: PUSH
2132: LD_INT 2
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: LD_INT 2
2141: PUSH
2142: LD_INT 34
2144: PUSH
2145: LD_INT 89
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 34
2154: PUSH
2155: LD_INT 51
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: PPUSH
2172: CALL_OW 69
2176: IFFALSE 2196
2178: GO 2180
2180: DISABLE
// begin ChangeMissionObjectives ( transport-2 ) ;
2181: LD_STRING transport-2
2183: PPUSH
2184: CALL_OW 337
// transport_builded = true ;
2188: LD_ADDR_EXP 53
2192: PUSH
2193: LD_INT 1
2195: ST_TO_ADDR
// end ;
2196: END
// every 0 0$1 trigger Researched ( 3 , 39 ) do
2197: LD_INT 3
2199: PPUSH
2200: LD_INT 39
2202: PPUSH
2203: CALL_OW 325
2207: IFFALSE 2263
2209: GO 2211
2211: DISABLE
// begin Say ( Stanislav , 2Stan-05 ) ;
2212: LD_EXP 16
2216: PPUSH
2217: LD_STRING 2Stan-05
2219: PPUSH
2220: CALL_OW 88
// Say ( Stanislav , 2Stan-06 ) ;
2224: LD_EXP 16
2228: PPUSH
2229: LD_STRING 2Stan-06
2231: PPUSH
2232: CALL_OW 88
// Say ( Yakotich , 2Yak-Stan-02 ) ;
2236: LD_EXP 3
2240: PPUSH
2241: LD_STRING 2Yak-Stan-02
2243: PPUSH
2244: CALL_OW 88
// gun_researched = true ;
2248: LD_ADDR_EXP 50
2252: PUSH
2253: LD_INT 1
2255: ST_TO_ADDR
// ChangeMissionObjectives ( gun-2 ) ;
2256: LD_STRING gun-2
2258: PPUSH
2259: CALL_OW 337
// end ;
2263: END
// every 0 0$1 trigger IsInArea ( [ f_side , 4 ] , DontEnterAchivArea ) do
2264: LD_INT 22
2266: PUSH
2267: LD_INT 4
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: PPUSH
2274: LD_INT 20
2276: PPUSH
2277: CALL_OW 308
2281: IFFALSE 2294
2283: GO 2285
2285: DISABLE
// begin riverside_touched = true ;
2286: LD_ADDR_EXP 60
2290: PUSH
2291: LD_INT 1
2293: ST_TO_ADDR
// end ;
2294: END
// every 0 0$1 trigger riverside_touched = false and kurin_attack_started = true do
2295: LD_EXP 60
2299: PUSH
2300: LD_INT 0
2302: EQUAL
2303: PUSH
2304: LD_EXP 57
2308: PUSH
2309: LD_INT 1
2311: EQUAL
2312: AND
2313: IFFALSE 2325
2315: GO 2317
2317: DISABLE
// begin SetAchievement ( ACH_RIVER ) ;
2318: LD_STRING ACH_RIVER
2320: PPUSH
2321: CALL_OW 543
// end ;
2325: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthPassage , [ [ f_side , 3 ] ] ) or FilterUnitsInArea ( WestPassage , [ [ f_side , 3 ] ] ) do
2326: LD_INT 9
2328: PPUSH
2329: LD_INT 22
2331: PUSH
2332: LD_INT 3
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: PUSH
2339: EMPTY
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: PUSH
2347: LD_INT 10
2349: PPUSH
2350: LD_INT 22
2352: PUSH
2353: LD_INT 3
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: PUSH
2360: EMPTY
2361: LIST
2362: PPUSH
2363: CALL_OW 70
2367: OR
2368: IFFALSE 2381
2370: GO 2372
2372: DISABLE
// begin passages_touched = true ;
2373: LD_ADDR_EXP 59
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// end ;
2381: END
// every 0 0$1 trigger passages_touched = false and end_of_the_mission = true do
2382: LD_EXP 59
2386: PUSH
2387: LD_INT 0
2389: EQUAL
2390: PUSH
2391: LD_EXP 58
2395: PUSH
2396: LD_INT 1
2398: EQUAL
2399: AND
2400: IFFALSE 2412
2402: GO 2404
2404: DISABLE
// begin SetAchievement ( ACH_SNAKE ) ;
2405: LD_STRING ACH_SNAKE
2407: PPUSH
2408: CALL_OW 543
// end ; end_of_file
2412: END
// every 5 5$0 do var i ;
2413: GO 2415
2415: DISABLE
2416: LD_INT 0
2418: PPUSH
// begin for i = 1 to 4 do
2419: LD_ADDR_VAR 0 1
2423: PUSH
2424: DOUBLE
2425: LD_INT 1
2427: DEC
2428: ST_TO_ADDR
2429: LD_INT 4
2431: PUSH
2432: FOR_TO
2433: IFFALSE 2459
// begin CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
2435: LD_INT 2
2437: PPUSH
2438: LD_INT 5
2440: PPUSH
2441: CALL_OW 12
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: CALL_OW 55
// enable ;
2456: ENABLE
// end ;
2457: GO 2432
2459: POP
2460: POP
// end ; end_of_file
2461: PPOPN 1
2463: END
// export function InitAmerican ; var i , y , turrety , lab , fabryka , zbrojka , turrety2 , lab2 , fabryka2 , zbrojka2 ; begin
2464: LD_INT 0
2466: PPUSH
2467: PPUSH
2468: PPUSH
2469: PPUSH
2470: PPUSH
2471: PPUSH
2472: PPUSH
2473: PPUSH
2474: PPUSH
2475: PPUSH
2476: PPUSH
// AmNorthPersonel := [ ] ;
2477: LD_ADDR_EXP 27
2481: PUSH
2482: EMPTY
2483: ST_TO_ADDR
// uc_side := 1 ;
2484: LD_ADDR_OWVAR 20
2488: PUSH
2489: LD_INT 1
2491: ST_TO_ADDR
// uc_nation := 1 ;
2492: LD_ADDR_OWVAR 21
2496: PUSH
2497: LD_INT 1
2499: ST_TO_ADDR
// for i = 1 to [ 7 , 8 , 9 ] [ Difficulty ] do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 7
2512: PUSH
2513: LD_INT 8
2515: PUSH
2516: LD_INT 9
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: LIST
2523: PUSH
2524: LD_OWVAR 67
2528: ARRAY
2529: PUSH
2530: FOR_TO
2531: IFFALSE 2586
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
2533: LD_INT 0
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 12
2543: PPUSH
2544: LD_INT 0
2546: PUSH
2547: LD_INT 2
2549: PUSH
2550: LD_INT 4
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: LIST
2557: PUSH
2558: LD_OWVAR 67
2562: ARRAY
2563: PPUSH
2564: CALL_OW 381
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2568: LD_ADDR_EXP 27
2572: PUSH
2573: LD_EXP 27
2577: PUSH
2578: CALL_OW 44
2582: ADD
2583: ST_TO_ADDR
// end ;
2584: GO 2530
2586: POP
2587: POP
// for i = 1 to 2 do
2588: LD_ADDR_VAR 0 2
2592: PUSH
2593: DOUBLE
2594: LD_INT 1
2596: DEC
2597: ST_TO_ADDR
2598: LD_INT 2
2600: PUSH
2601: FOR_TO
2602: IFFALSE 2657
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
2604: LD_INT 0
2606: PPUSH
2607: LD_INT 1
2609: PPUSH
2610: CALL_OW 12
2614: PPUSH
2615: LD_INT 0
2617: PUSH
2618: LD_INT 2
2620: PUSH
2621: LD_INT 4
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: PUSH
2629: LD_OWVAR 67
2633: ARRAY
2634: PPUSH
2635: CALL_OW 382
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2639: LD_ADDR_EXP 27
2643: PUSH
2644: LD_EXP 27
2648: PUSH
2649: CALL_OW 44
2653: ADD
2654: ST_TO_ADDR
// end ;
2655: GO 2601
2657: POP
2658: POP
// for i = 1 to 1 do
2659: LD_ADDR_VAR 0 2
2663: PUSH
2664: DOUBLE
2665: LD_INT 1
2667: DEC
2668: ST_TO_ADDR
2669: LD_INT 1
2671: PUSH
2672: FOR_TO
2673: IFFALSE 2728
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
2675: LD_INT 0
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: CALL_OW 12
2685: PPUSH
2686: LD_INT 0
2688: PUSH
2689: LD_INT 2
2691: PUSH
2692: LD_INT 4
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: LIST
2699: PUSH
2700: LD_OWVAR 67
2704: ARRAY
2705: PPUSH
2706: CALL_OW 383
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2710: LD_ADDR_EXP 27
2714: PUSH
2715: LD_EXP 27
2719: PUSH
2720: CALL_OW 44
2724: ADD
2725: ST_TO_ADDR
// end ;
2726: GO 2672
2728: POP
2729: POP
// for i = 1 to 1 do
2730: LD_ADDR_VAR 0 2
2734: PUSH
2735: DOUBLE
2736: LD_INT 1
2738: DEC
2739: ST_TO_ADDR
2740: LD_INT 1
2742: PUSH
2743: FOR_TO
2744: IFFALSE 2799
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: CALL_OW 12
2756: PPUSH
2757: LD_INT 0
2759: PUSH
2760: LD_INT 2
2762: PUSH
2763: LD_INT 4
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: LIST
2770: PUSH
2771: LD_OWVAR 67
2775: ARRAY
2776: PPUSH
2777: CALL_OW 384
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2781: LD_ADDR_EXP 27
2785: PUSH
2786: LD_EXP 27
2790: PUSH
2791: CALL_OW 44
2795: ADD
2796: ST_TO_ADDR
// end ;
2797: GO 2743
2799: POP
2800: POP
// turrety := FilterUnitsInArea ( AmNorthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
2801: LD_ADDR_VAR 0 4
2805: PUSH
2806: LD_INT 11
2808: PPUSH
2809: LD_INT 2
2811: PUSH
2812: LD_INT 30
2814: PUSH
2815: LD_INT 31
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: PUSH
2822: LD_INT 30
2824: PUSH
2825: LD_INT 32
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: PUSH
2832: EMPTY
2833: LIST
2834: LIST
2835: LIST
2836: PPUSH
2837: CALL_OW 70
2841: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_lab_half ] ] ) ;
2842: LD_ADDR_VAR 0 5
2846: PUSH
2847: LD_INT 11
2849: PPUSH
2850: LD_INT 30
2852: PUSH
2853: LD_INT 7
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: PPUSH
2863: CALL_OW 70
2867: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_factory ] ] ) ;
2868: LD_ADDR_VAR 0 6
2872: PUSH
2873: LD_INT 11
2875: PPUSH
2876: LD_INT 30
2878: PUSH
2879: LD_INT 3
2881: PUSH
2882: EMPTY
2883: LIST
2884: LIST
2885: PUSH
2886: EMPTY
2887: LIST
2888: PPUSH
2889: CALL_OW 70
2893: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
2894: LD_ADDR_VAR 0 7
2898: PUSH
2899: LD_INT 11
2901: PPUSH
2902: LD_INT 30
2904: PUSH
2905: LD_INT 4
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: EMPTY
2913: LIST
2914: PPUSH
2915: CALL_OW 70
2919: ST_TO_ADDR
// y := 1 ;
2920: LD_ADDR_VAR 0 3
2924: PUSH
2925: LD_INT 1
2927: ST_TO_ADDR
// for i in AmNorthPersonel do
2928: LD_ADDR_VAR 0 2
2932: PUSH
2933: LD_EXP 27
2937: PUSH
2938: FOR_IN
2939: IFFALSE 3125
// begin PlaceUnitArea ( i , AmNorthArea , false ) ;
2941: LD_VAR 0 2
2945: PPUSH
2946: LD_INT 3
2948: PPUSH
2949: LD_INT 0
2951: PPUSH
2952: CALL_OW 49
// case GetClass ( i ) of 1 :
2956: LD_VAR 0 2
2960: PPUSH
2961: CALL_OW 257
2965: PUSH
2966: LD_INT 1
2968: DOUBLE
2969: EQUAL
2970: IFTRUE 2974
2972: GO 3041
2974: POP
// begin if y > 6 then
2975: LD_VAR 0 3
2979: PUSH
2980: LD_INT 6
2982: GREATER
2983: IFFALSE 3005
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
2985: LD_VAR 0 2
2989: PPUSH
2990: LD_VAR 0 7
2994: PUSH
2995: LD_INT 1
2997: ARRAY
2998: PPUSH
2999: CALL_OW 120
3003: GO 3025
// ComEnterUnit ( i , turrety [ y ] ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_VAR 0 4
3014: PUSH
3015: LD_VAR 0 3
3019: ARRAY
3020: PPUSH
3021: CALL_OW 120
// y = y + 1 ;
3025: LD_ADDR_VAR 0 3
3029: PUSH
3030: LD_VAR 0 3
3034: PUSH
3035: LD_INT 1
3037: PLUS
3038: ST_TO_ADDR
// end ; 2 :
3039: GO 3123
3041: LD_INT 2
3043: DOUBLE
3044: EQUAL
3045: IFTRUE 3049
3047: GO 3064
3049: POP
// ComEnterUnit ( i , AmDep1 ) ; 3 :
3050: LD_VAR 0 2
3054: PPUSH
3055: LD_INT 1
3057: PPUSH
3058: CALL_OW 120
3062: GO 3123
3064: LD_INT 3
3066: DOUBLE
3067: EQUAL
3068: IFTRUE 3072
3070: GO 3093
3072: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3073: LD_VAR 0 2
3077: PPUSH
3078: LD_VAR 0 6
3082: PUSH
3083: LD_INT 1
3085: ARRAY
3086: PPUSH
3087: CALL_OW 120
3091: GO 3123
3093: LD_INT 4
3095: DOUBLE
3096: EQUAL
3097: IFTRUE 3101
3099: GO 3122
3101: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3102: LD_VAR 0 2
3106: PPUSH
3107: LD_VAR 0 5
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: PPUSH
3116: CALL_OW 120
3120: GO 3123
3122: POP
// end ;
3123: GO 2938
3125: POP
3126: POP
// AmSouthPersonel := [ ] ;
3127: LD_ADDR_EXP 28
3131: PUSH
3132: EMPTY
3133: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3134: LD_ADDR_VAR 0 2
3138: PUSH
3139: DOUBLE
3140: LD_INT 1
3142: DEC
3143: ST_TO_ADDR
3144: LD_INT 4
3146: PUSH
3147: LD_INT 5
3149: PUSH
3150: LD_INT 6
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: LIST
3157: PUSH
3158: LD_OWVAR 67
3162: ARRAY
3163: PUSH
3164: FOR_TO
3165: IFFALSE 3220
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
3167: LD_INT 0
3169: PPUSH
3170: LD_INT 1
3172: PPUSH
3173: CALL_OW 12
3177: PPUSH
3178: LD_INT 0
3180: PUSH
3181: LD_INT 2
3183: PUSH
3184: LD_INT 4
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: LIST
3191: PUSH
3192: LD_OWVAR 67
3196: ARRAY
3197: PPUSH
3198: CALL_OW 381
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3202: LD_ADDR_EXP 28
3206: PUSH
3207: LD_EXP 28
3211: PUSH
3212: CALL_OW 44
3216: ADD
3217: ST_TO_ADDR
// end ;
3218: GO 3164
3220: POP
3221: POP
// for i = 1 to 1 do
3222: LD_ADDR_VAR 0 2
3226: PUSH
3227: DOUBLE
3228: LD_INT 1
3230: DEC
3231: ST_TO_ADDR
3232: LD_INT 1
3234: PUSH
3235: FOR_TO
3236: IFFALSE 3291
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
3238: LD_INT 0
3240: PPUSH
3241: LD_INT 1
3243: PPUSH
3244: CALL_OW 12
3248: PPUSH
3249: LD_INT 0
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: LD_INT 4
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_OWVAR 67
3267: ARRAY
3268: PPUSH
3269: CALL_OW 382
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3273: LD_ADDR_EXP 28
3277: PUSH
3278: LD_EXP 28
3282: PUSH
3283: CALL_OW 44
3287: ADD
3288: ST_TO_ADDR
// end ;
3289: GO 3235
3291: POP
3292: POP
// for i = 1 to 2 do
3293: LD_ADDR_VAR 0 2
3297: PUSH
3298: DOUBLE
3299: LD_INT 1
3301: DEC
3302: ST_TO_ADDR
3303: LD_INT 2
3305: PUSH
3306: FOR_TO
3307: IFFALSE 3362
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
3309: LD_INT 0
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 0
3322: PUSH
3323: LD_INT 2
3325: PUSH
3326: LD_INT 4
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_OWVAR 67
3338: ARRAY
3339: PPUSH
3340: CALL_OW 383
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3344: LD_ADDR_EXP 28
3348: PUSH
3349: LD_EXP 28
3353: PUSH
3354: CALL_OW 44
3358: ADD
3359: ST_TO_ADDR
// end ;
3360: GO 3306
3362: POP
3363: POP
// for i = 1 to 1 do
3364: LD_ADDR_VAR 0 2
3368: PUSH
3369: DOUBLE
3370: LD_INT 1
3372: DEC
3373: ST_TO_ADDR
3374: LD_INT 1
3376: PUSH
3377: FOR_TO
3378: IFFALSE 3433
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 0 , 2 , 4 ] [ Difficulty ] ) ;
3380: LD_INT 0
3382: PPUSH
3383: LD_INT 1
3385: PPUSH
3386: CALL_OW 12
3390: PPUSH
3391: LD_INT 0
3393: PUSH
3394: LD_INT 2
3396: PUSH
3397: LD_INT 4
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_OWVAR 67
3409: ARRAY
3410: PPUSH
3411: CALL_OW 384
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3415: LD_ADDR_EXP 28
3419: PUSH
3420: LD_EXP 28
3424: PUSH
3425: CALL_OW 44
3429: ADD
3430: ST_TO_ADDR
// end ;
3431: GO 3377
3433: POP
3434: POP
// turrety := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
3435: LD_ADDR_VAR 0 4
3439: PUSH
3440: LD_INT 13
3442: PPUSH
3443: LD_INT 2
3445: PUSH
3446: LD_INT 30
3448: PUSH
3449: LD_INT 31
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PUSH
3456: LD_INT 30
3458: PUSH
3459: LD_INT 32
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: PPUSH
3471: CALL_OW 70
3475: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_lab ] ] ) ;
3476: LD_ADDR_VAR 0 5
3480: PUSH
3481: LD_INT 13
3483: PPUSH
3484: LD_INT 30
3486: PUSH
3487: LD_INT 6
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: PPUSH
3497: CALL_OW 70
3501: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_workshop ] ] ) ;
3502: LD_ADDR_VAR 0 6
3506: PUSH
3507: LD_INT 13
3509: PPUSH
3510: LD_INT 2
3512: PUSH
3513: LD_INT 30
3515: PUSH
3516: LD_INT 3
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PUSH
3523: LD_INT 30
3525: PUSH
3526: LD_INT 2
3528: PUSH
3529: EMPTY
3530: LIST
3531: LIST
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: PPUSH
3538: CALL_OW 70
3542: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
3543: LD_ADDR_VAR 0 7
3547: PUSH
3548: LD_INT 13
3550: PPUSH
3551: LD_INT 30
3553: PUSH
3554: LD_INT 4
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: EMPTY
3562: LIST
3563: PPUSH
3564: CALL_OW 70
3568: ST_TO_ADDR
// y := 1 ;
3569: LD_ADDR_VAR 0 3
3573: PUSH
3574: LD_INT 1
3576: ST_TO_ADDR
// for i in AmSouthPersonel do
3577: LD_ADDR_VAR 0 2
3581: PUSH
3582: LD_EXP 28
3586: PUSH
3587: FOR_IN
3588: IFFALSE 3774
// begin PlaceUnitArea ( i , AmSouthArea , false ) ;
3590: LD_VAR 0 2
3594: PPUSH
3595: LD_INT 12
3597: PPUSH
3598: LD_INT 0
3600: PPUSH
3601: CALL_OW 49
// case GetClass ( i ) of 1 :
3605: LD_VAR 0 2
3609: PPUSH
3610: CALL_OW 257
3614: PUSH
3615: LD_INT 1
3617: DOUBLE
3618: EQUAL
3619: IFTRUE 3623
3621: GO 3690
3623: POP
// begin if y > 2 then
3624: LD_VAR 0 3
3628: PUSH
3629: LD_INT 2
3631: GREATER
3632: IFFALSE 3654
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_VAR 0 7
3643: PUSH
3644: LD_INT 1
3646: ARRAY
3647: PPUSH
3648: CALL_OW 120
3652: GO 3674
// ComEnterUnit ( i , turrety [ y ] ) ;
3654: LD_VAR 0 2
3658: PPUSH
3659: LD_VAR 0 4
3663: PUSH
3664: LD_VAR 0 3
3668: ARRAY
3669: PPUSH
3670: CALL_OW 120
// y = y + 1 ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PUSH
3684: LD_INT 1
3686: PLUS
3687: ST_TO_ADDR
// end ; 2 :
3688: GO 3772
3690: LD_INT 2
3692: DOUBLE
3693: EQUAL
3694: IFTRUE 3698
3696: GO 3713
3698: POP
// ComEnterUnit ( i , AmDep2 ) ; 3 :
3699: LD_VAR 0 2
3703: PPUSH
3704: LD_INT 47
3706: PPUSH
3707: CALL_OW 120
3711: GO 3772
3713: LD_INT 3
3715: DOUBLE
3716: EQUAL
3717: IFTRUE 3721
3719: GO 3742
3721: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3722: LD_VAR 0 2
3726: PPUSH
3727: LD_VAR 0 6
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: CALL_OW 120
3740: GO 3772
3742: LD_INT 4
3744: DOUBLE
3745: EQUAL
3746: IFTRUE 3750
3748: GO 3771
3750: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3751: LD_VAR 0 2
3755: PPUSH
3756: LD_VAR 0 5
3760: PUSH
3761: LD_INT 1
3763: ARRAY
3764: PPUSH
3765: CALL_OW 120
3769: GO 3772
3771: POP
// end ;
3772: GO 3587
3774: POP
3775: POP
// end ;
3776: LD_VAR 0 1
3780: RET
// every 0 0$1 trigger not kurin_attack_started = true do var enemy , attacker ;
3781: LD_EXP 57
3785: PUSH
3786: LD_INT 1
3788: EQUAL
3789: NOT
3790: IFFALSE 3876
3792: GO 3794
3794: DISABLE
3795: LD_INT 0
3797: PPUSH
3798: PPUSH
// begin enable ;
3799: ENABLE
// ComAgressiveMove ( AmConvoys , 158 , 99 ) ;
3800: LD_EXP 25
3804: PPUSH
3805: LD_INT 158
3807: PPUSH
3808: LD_INT 99
3810: PPUSH
3811: CALL_OW 114
// enemy = Filterallunits ( [ f_side , 3 ] ) ;
3815: LD_ADDR_VAR 0 1
3819: PUSH
3820: LD_INT 22
3822: PUSH
3823: LD_INT 3
3825: PUSH
3826: EMPTY
3827: LIST
3828: LIST
3829: PPUSH
3830: CALL_OW 69
3834: ST_TO_ADDR
// for attacker in AmConvoysVehicles do
3835: LD_ADDR_VAR 0 2
3839: PUSH
3840: LD_EXP 26
3844: PUSH
3845: FOR_IN
3846: IFFALSE 3874
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
3848: LD_VAR 0 2
3852: PPUSH
3853: LD_VAR 0 1
3857: PPUSH
3858: LD_VAR 0 2
3862: PPUSH
3863: CALL_OW 74
3867: PPUSH
3868: CALL_OW 115
3872: GO 3845
3874: POP
3875: POP
// end ;
3876: PPOPN 2
3878: END
// export function AmAttacks ; var i ; begin
3879: LD_INT 0
3881: PPUSH
3882: PPUSH
// Uc_Side = 4 ;
3883: LD_ADDR_OWVAR 20
3887: PUSH
3888: LD_INT 4
3890: ST_TO_ADDR
// Uc_Nation = 1 ;
3891: LD_ADDR_OWVAR 21
3895: PUSH
3896: LD_INT 1
3898: ST_TO_ADDR
// Wait ( 4 4$30 ) ;
3899: LD_INT 9450
3901: PPUSH
3902: CALL_OW 67
// first_attack_spawned = true ;
3906: LD_ADDR_EXP 54
3910: PUSH
3911: LD_INT 1
3913: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
3914: LD_ADDR_VAR 0 2
3918: PUSH
3919: DOUBLE
3920: LD_INT 1
3922: DEC
3923: ST_TO_ADDR
3924: LD_INT 2
3926: PUSH
3927: LD_INT 2
3929: PUSH
3930: LD_INT 3
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: LIST
3937: PUSH
3938: LD_OWVAR 67
3942: ARRAY
3943: PUSH
3944: FOR_TO
3945: IFFALSE 4025
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
3947: LD_INT 0
3949: PPUSH
3950: LD_INT 1
3952: PPUSH
3953: CALL_OW 12
3957: PPUSH
3958: LD_INT 1
3960: PUSH
3961: LD_INT 2
3963: PUSH
3964: LD_INT 3
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_OWVAR 67
3976: ARRAY
3977: PPUSH
3978: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
3982: LD_ADDR_EXP 37
3986: PUSH
3987: CALL_OW 44
3991: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
3992: LD_ADDR_EXP 25
3996: PUSH
3997: LD_EXP 25
4001: PUSH
4002: LD_EXP 37
4006: ADD
4007: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4008: LD_EXP 37
4012: PPUSH
4013: LD_INT 1
4015: PPUSH
4016: LD_INT 0
4018: PPUSH
4019: CALL_OW 49
// end ;
4023: GO 3944
4025: POP
4026: POP
// for i = 1 to [ 0 , 1 , 1 ] [ Difficulty ] do
4027: LD_ADDR_VAR 0 2
4031: PUSH
4032: DOUBLE
4033: LD_INT 1
4035: DEC
4036: ST_TO_ADDR
4037: LD_INT 0
4039: PUSH
4040: LD_INT 1
4042: PUSH
4043: LD_INT 1
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_OWVAR 67
4055: ARRAY
4056: PUSH
4057: FOR_TO
4058: IFFALSE 4138
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4060: LD_INT 0
4062: PPUSH
4063: LD_INT 1
4065: PPUSH
4066: CALL_OW 12
4070: PPUSH
4071: LD_INT 1
4073: PUSH
4074: LD_INT 2
4076: PUSH
4077: LD_INT 3
4079: PUSH
4080: EMPTY
4081: LIST
4082: LIST
4083: LIST
4084: PUSH
4085: LD_OWVAR 67
4089: ARRAY
4090: PPUSH
4091: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4095: LD_ADDR_EXP 38
4099: PUSH
4100: CALL_OW 44
4104: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4105: LD_ADDR_EXP 25
4109: PUSH
4110: LD_EXP 25
4114: PUSH
4115: LD_EXP 38
4119: ADD
4120: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4121: LD_EXP 38
4125: PPUSH
4126: LD_INT 1
4128: PPUSH
4129: LD_INT 0
4131: PPUSH
4132: CALL_OW 49
// end ;
4136: GO 4057
4138: POP
4139: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4140: LD_ADDR_VAR 0 2
4144: PUSH
4145: DOUBLE
4146: LD_INT 1
4148: DEC
4149: ST_TO_ADDR
4150: LD_INT 1
4152: PUSH
4153: LD_INT 1
4155: PUSH
4156: LD_INT 1
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: PUSH
4164: LD_OWVAR 67
4168: ARRAY
4169: PUSH
4170: FOR_TO
4171: IFFALSE 4251
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4173: LD_INT 0
4175: PPUSH
4176: LD_INT 1
4178: PPUSH
4179: CALL_OW 12
4183: PPUSH
4184: LD_INT 1
4186: PUSH
4187: LD_INT 2
4189: PUSH
4190: LD_INT 3
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: PUSH
4198: LD_OWVAR 67
4202: ARRAY
4203: PPUSH
4204: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4208: LD_ADDR_EXP 40
4212: PUSH
4213: CALL_OW 44
4217: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4218: LD_ADDR_EXP 25
4222: PUSH
4223: LD_EXP 25
4227: PUSH
4228: LD_EXP 40
4232: ADD
4233: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4234: LD_EXP 40
4238: PPUSH
4239: LD_INT 1
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 49
// end ;
4249: GO 4170
4251: POP
4252: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4253: LD_ADDR_VAR 0 2
4257: PUSH
4258: DOUBLE
4259: LD_INT 1
4261: DEC
4262: ST_TO_ADDR
4263: LD_INT 1
4265: PUSH
4266: LD_INT 1
4268: PUSH
4269: LD_INT 1
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: PUSH
4277: LD_OWVAR 67
4281: ARRAY
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4458
// begin uc_side := 4 ;
4286: LD_ADDR_OWVAR 20
4290: PUSH
4291: LD_INT 4
4293: ST_TO_ADDR
// uc_nation := 1 ;
4294: LD_ADDR_OWVAR 21
4298: PUSH
4299: LD_INT 1
4301: ST_TO_ADDR
// vc_control = control_manual ;
4302: LD_ADDR_OWVAR 38
4306: PUSH
4307: LD_INT 1
4309: ST_TO_ADDR
// vc_engine = engine_combustion ;
4310: LD_ADDR_OWVAR 39
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4318: LD_ADDR_OWVAR 37
4322: PUSH
4323: LD_INT 2
4325: PPUSH
4326: LD_INT 4
4328: PPUSH
4329: CALL_OW 12
4333: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4334: LD_ADDR_OWVAR 40
4338: PUSH
4339: LD_INT 3
4341: PPUSH
4342: LD_INT 5
4344: PPUSH
4345: CALL_OW 12
4349: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4350: LD_ADDR_EXP 41
4354: PUSH
4355: CALL_OW 45
4359: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4360: LD_INT 0
4362: PPUSH
4363: LD_INT 1
4365: PPUSH
4366: CALL_OW 12
4370: PPUSH
4371: LD_INT 1
4373: PUSH
4374: LD_INT 2
4376: PUSH
4377: LD_INT 3
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: PUSH
4385: LD_OWVAR 67
4389: ARRAY
4390: PPUSH
4391: CALL_OW 383
// AmMechConvoy := CreateHuman ;
4395: LD_ADDR_EXP 39
4399: PUSH
4400: CALL_OW 44
4404: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
4405: LD_EXP 39
4409: PPUSH
4410: LD_EXP 41
4414: PPUSH
4415: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
4419: LD_EXP 41
4423: PPUSH
4424: LD_INT 14
4426: PPUSH
4427: LD_INT 0
4429: PPUSH
4430: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
4434: LD_ADDR_EXP 26
4438: PUSH
4439: LD_EXP 26
4443: PUSH
4444: LD_EXP 39
4448: ADD
4449: PUSH
4450: LD_EXP 41
4454: ADD
4455: ST_TO_ADDR
// end ;
4456: GO 4283
4458: POP
4459: POP
// Wait ( 5 5$45 ) ;
4460: LD_INT 12075
4462: PPUSH
4463: CALL_OW 67
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4467: LD_ADDR_VAR 0 2
4471: PUSH
4472: DOUBLE
4473: LD_INT 1
4475: DEC
4476: ST_TO_ADDR
4477: LD_INT 2
4479: PUSH
4480: LD_INT 3
4482: PUSH
4483: LD_INT 4
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: PUSH
4491: LD_OWVAR 67
4495: ARRAY
4496: PUSH
4497: FOR_TO
4498: IFFALSE 4578
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4500: LD_INT 0
4502: PPUSH
4503: LD_INT 1
4505: PPUSH
4506: CALL_OW 12
4510: PPUSH
4511: LD_INT 1
4513: PUSH
4514: LD_INT 2
4516: PUSH
4517: LD_INT 4
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: PUSH
4525: LD_OWVAR 67
4529: ARRAY
4530: PPUSH
4531: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
4535: LD_ADDR_EXP 37
4539: PUSH
4540: CALL_OW 44
4544: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
4545: LD_ADDR_EXP 25
4549: PUSH
4550: LD_EXP 25
4554: PUSH
4555: LD_EXP 37
4559: ADD
4560: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4561: LD_EXP 37
4565: PPUSH
4566: LD_INT 1
4568: PPUSH
4569: LD_INT 0
4571: PPUSH
4572: CALL_OW 49
// end ;
4576: GO 4497
4578: POP
4579: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4580: LD_ADDR_VAR 0 2
4584: PUSH
4585: DOUBLE
4586: LD_INT 1
4588: DEC
4589: ST_TO_ADDR
4590: LD_INT 1
4592: PUSH
4593: LD_INT 2
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: LIST
4603: PUSH
4604: LD_OWVAR 67
4608: ARRAY
4609: PUSH
4610: FOR_TO
4611: IFFALSE 4691
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4613: LD_INT 0
4615: PPUSH
4616: LD_INT 1
4618: PPUSH
4619: CALL_OW 12
4623: PPUSH
4624: LD_INT 1
4626: PUSH
4627: LD_INT 2
4629: PUSH
4630: LD_INT 4
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PUSH
4638: LD_OWVAR 67
4642: ARRAY
4643: PPUSH
4644: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4648: LD_ADDR_EXP 38
4652: PUSH
4653: CALL_OW 44
4657: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4658: LD_ADDR_EXP 25
4662: PUSH
4663: LD_EXP 25
4667: PUSH
4668: LD_EXP 38
4672: ADD
4673: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4674: LD_EXP 38
4678: PPUSH
4679: LD_INT 1
4681: PPUSH
4682: LD_INT 0
4684: PPUSH
4685: CALL_OW 49
// end ;
4689: GO 4610
4691: POP
4692: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4693: LD_ADDR_VAR 0 2
4697: PUSH
4698: DOUBLE
4699: LD_INT 1
4701: DEC
4702: ST_TO_ADDR
4703: LD_INT 1
4705: PUSH
4706: LD_INT 1
4708: PUSH
4709: LD_INT 1
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: PUSH
4717: LD_OWVAR 67
4721: ARRAY
4722: PUSH
4723: FOR_TO
4724: IFFALSE 4804
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4726: LD_INT 0
4728: PPUSH
4729: LD_INT 1
4731: PPUSH
4732: CALL_OW 12
4736: PPUSH
4737: LD_INT 1
4739: PUSH
4740: LD_INT 2
4742: PUSH
4743: LD_INT 4
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: LIST
4750: PUSH
4751: LD_OWVAR 67
4755: ARRAY
4756: PPUSH
4757: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4761: LD_ADDR_EXP 40
4765: PUSH
4766: CALL_OW 44
4770: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4771: LD_ADDR_EXP 25
4775: PUSH
4776: LD_EXP 25
4780: PUSH
4781: LD_EXP 40
4785: ADD
4786: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4787: LD_EXP 40
4791: PPUSH
4792: LD_INT 1
4794: PPUSH
4795: LD_INT 0
4797: PPUSH
4798: CALL_OW 49
// end ;
4802: GO 4723
4804: POP
4805: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4806: LD_ADDR_VAR 0 2
4810: PUSH
4811: DOUBLE
4812: LD_INT 1
4814: DEC
4815: ST_TO_ADDR
4816: LD_INT 1
4818: PUSH
4819: LD_INT 2
4821: PUSH
4822: LD_INT 2
4824: PUSH
4825: EMPTY
4826: LIST
4827: LIST
4828: LIST
4829: PUSH
4830: LD_OWVAR 67
4834: ARRAY
4835: PUSH
4836: FOR_TO
4837: IFFALSE 5011
// begin uc_side := 4 ;
4839: LD_ADDR_OWVAR 20
4843: PUSH
4844: LD_INT 4
4846: ST_TO_ADDR
// uc_nation := 1 ;
4847: LD_ADDR_OWVAR 21
4851: PUSH
4852: LD_INT 1
4854: ST_TO_ADDR
// vc_control = control_manual ;
4855: LD_ADDR_OWVAR 38
4859: PUSH
4860: LD_INT 1
4862: ST_TO_ADDR
// vc_engine = engine_combustion ;
4863: LD_ADDR_OWVAR 39
4867: PUSH
4868: LD_INT 1
4870: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4871: LD_ADDR_OWVAR 37
4875: PUSH
4876: LD_INT 2
4878: PPUSH
4879: LD_INT 4
4881: PPUSH
4882: CALL_OW 12
4886: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4887: LD_ADDR_OWVAR 40
4891: PUSH
4892: LD_INT 3
4894: PPUSH
4895: LD_INT 5
4897: PPUSH
4898: CALL_OW 12
4902: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4903: LD_ADDR_EXP 41
4907: PUSH
4908: CALL_OW 45
4912: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4913: LD_INT 0
4915: PPUSH
4916: LD_INT 1
4918: PPUSH
4919: CALL_OW 12
4923: PPUSH
4924: LD_INT 1
4926: PUSH
4927: LD_INT 2
4929: PUSH
4930: LD_INT 4
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: LD_OWVAR 67
4942: ARRAY
4943: PPUSH
4944: CALL_OW 383
// AmMechConvoy := CreateHuman ;
4948: LD_ADDR_EXP 39
4952: PUSH
4953: CALL_OW 44
4957: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
4958: LD_EXP 39
4962: PPUSH
4963: LD_EXP 41
4967: PPUSH
4968: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
4972: LD_EXP 41
4976: PPUSH
4977: LD_INT 14
4979: PPUSH
4980: LD_INT 0
4982: PPUSH
4983: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
4987: LD_ADDR_EXP 26
4991: PUSH
4992: LD_EXP 26
4996: PUSH
4997: LD_EXP 39
5001: ADD
5002: PUSH
5003: LD_EXP 41
5007: ADD
5008: ST_TO_ADDR
// end ;
5009: GO 4836
5011: POP
5012: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5013: LD_EXP 25
5017: PPUSH
5018: LD_INT 157
5020: PPUSH
5021: LD_INT 97
5023: PPUSH
5024: CALL_OW 114
// Wait ( 5 5$0 ) ;
5028: LD_INT 10500
5030: PPUSH
5031: CALL_OW 67
// for i = 1 to [ 3 , 4 , 6 ] [ Difficulty ] do
5035: LD_ADDR_VAR 0 2
5039: PUSH
5040: DOUBLE
5041: LD_INT 1
5043: DEC
5044: ST_TO_ADDR
5045: LD_INT 3
5047: PUSH
5048: LD_INT 4
5050: PUSH
5051: LD_INT 6
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: LIST
5058: PUSH
5059: LD_OWVAR 67
5063: ARRAY
5064: PUSH
5065: FOR_TO
5066: IFFALSE 5146
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5068: LD_INT 0
5070: PPUSH
5071: LD_INT 1
5073: PPUSH
5074: CALL_OW 12
5078: PPUSH
5079: LD_INT 1
5081: PUSH
5082: LD_INT 2
5084: PUSH
5085: LD_INT 4
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: PUSH
5093: LD_OWVAR 67
5097: ARRAY
5098: PPUSH
5099: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5103: LD_ADDR_EXP 37
5107: PUSH
5108: CALL_OW 44
5112: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5113: LD_ADDR_EXP 25
5117: PUSH
5118: LD_EXP 25
5122: PUSH
5123: LD_EXP 37
5127: ADD
5128: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5129: LD_EXP 37
5133: PPUSH
5134: LD_INT 1
5136: PPUSH
5137: LD_INT 0
5139: PPUSH
5140: CALL_OW 49
// end ;
5144: GO 5065
5146: POP
5147: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
5148: LD_ADDR_VAR 0 2
5152: PUSH
5153: DOUBLE
5154: LD_INT 1
5156: DEC
5157: ST_TO_ADDR
5158: LD_INT 1
5160: PUSH
5161: LD_INT 2
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: PUSH
5172: LD_OWVAR 67
5176: ARRAY
5177: PUSH
5178: FOR_TO
5179: IFFALSE 5259
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5181: LD_INT 0
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 12
5191: PPUSH
5192: LD_INT 1
5194: PUSH
5195: LD_INT 2
5197: PUSH
5198: LD_INT 4
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: PUSH
5206: LD_OWVAR 67
5210: ARRAY
5211: PPUSH
5212: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5216: LD_ADDR_EXP 38
5220: PUSH
5221: CALL_OW 44
5225: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5226: LD_ADDR_EXP 25
5230: PUSH
5231: LD_EXP 25
5235: PUSH
5236: LD_EXP 38
5240: ADD
5241: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5242: LD_EXP 38
5246: PPUSH
5247: LD_INT 1
5249: PPUSH
5250: LD_INT 0
5252: PPUSH
5253: CALL_OW 49
// end ;
5257: GO 5178
5259: POP
5260: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5261: LD_ADDR_VAR 0 2
5265: PUSH
5266: DOUBLE
5267: LD_INT 1
5269: DEC
5270: ST_TO_ADDR
5271: LD_INT 1
5273: PUSH
5274: LD_INT 1
5276: PUSH
5277: LD_INT 2
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: LIST
5284: PUSH
5285: LD_OWVAR 67
5289: ARRAY
5290: PUSH
5291: FOR_TO
5292: IFFALSE 5372
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5294: LD_INT 0
5296: PPUSH
5297: LD_INT 1
5299: PPUSH
5300: CALL_OW 12
5304: PPUSH
5305: LD_INT 1
5307: PUSH
5308: LD_INT 2
5310: PUSH
5311: LD_INT 4
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: LIST
5318: PUSH
5319: LD_OWVAR 67
5323: ARRAY
5324: PPUSH
5325: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5329: LD_ADDR_EXP 40
5333: PUSH
5334: CALL_OW 44
5338: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5339: LD_ADDR_EXP 25
5343: PUSH
5344: LD_EXP 25
5348: PUSH
5349: LD_EXP 40
5353: ADD
5354: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5355: LD_EXP 40
5359: PPUSH
5360: LD_INT 1
5362: PPUSH
5363: LD_INT 0
5365: PPUSH
5366: CALL_OW 49
// end ;
5370: GO 5291
5372: POP
5373: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5374: LD_ADDR_VAR 0 2
5378: PUSH
5379: DOUBLE
5380: LD_INT 1
5382: DEC
5383: ST_TO_ADDR
5384: LD_INT 1
5386: PUSH
5387: LD_INT 2
5389: PUSH
5390: LD_INT 3
5392: PUSH
5393: EMPTY
5394: LIST
5395: LIST
5396: LIST
5397: PUSH
5398: LD_OWVAR 67
5402: ARRAY
5403: PUSH
5404: FOR_TO
5405: IFFALSE 5579
// begin uc_side := 4 ;
5407: LD_ADDR_OWVAR 20
5411: PUSH
5412: LD_INT 4
5414: ST_TO_ADDR
// uc_nation := 1 ;
5415: LD_ADDR_OWVAR 21
5419: PUSH
5420: LD_INT 1
5422: ST_TO_ADDR
// vc_control = control_manual ;
5423: LD_ADDR_OWVAR 38
5427: PUSH
5428: LD_INT 1
5430: ST_TO_ADDR
// vc_engine = engine_combustion ;
5431: LD_ADDR_OWVAR 39
5435: PUSH
5436: LD_INT 1
5438: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
5439: LD_ADDR_OWVAR 37
5443: PUSH
5444: LD_INT 2
5446: PPUSH
5447: LD_INT 4
5449: PPUSH
5450: CALL_OW 12
5454: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
5455: LD_ADDR_OWVAR 40
5459: PUSH
5460: LD_INT 3
5462: PPUSH
5463: LD_INT 5
5465: PPUSH
5466: CALL_OW 12
5470: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
5471: LD_ADDR_EXP 41
5475: PUSH
5476: CALL_OW 45
5480: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5481: LD_INT 0
5483: PPUSH
5484: LD_INT 1
5486: PPUSH
5487: CALL_OW 12
5491: PPUSH
5492: LD_INT 1
5494: PUSH
5495: LD_INT 2
5497: PUSH
5498: LD_INT 4
5500: PUSH
5501: EMPTY
5502: LIST
5503: LIST
5504: LIST
5505: PUSH
5506: LD_OWVAR 67
5510: ARRAY
5511: PPUSH
5512: CALL_OW 383
// AmMechConvoy := CreateHuman ;
5516: LD_ADDR_EXP 39
5520: PUSH
5521: CALL_OW 44
5525: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
5526: LD_EXP 39
5530: PPUSH
5531: LD_EXP 41
5535: PPUSH
5536: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
5540: LD_EXP 41
5544: PPUSH
5545: LD_INT 14
5547: PPUSH
5548: LD_INT 0
5550: PPUSH
5551: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
5555: LD_ADDR_EXP 26
5559: PUSH
5560: LD_EXP 26
5564: PUSH
5565: LD_EXP 39
5569: ADD
5570: PUSH
5571: LD_EXP 41
5575: ADD
5576: ST_TO_ADDR
// end ;
5577: GO 5404
5579: POP
5580: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5581: LD_EXP 25
5585: PPUSH
5586: LD_INT 157
5588: PPUSH
5589: LD_INT 97
5591: PPUSH
5592: CALL_OW 114
// Wait ( 5 5$0 ) ;
5596: LD_INT 10500
5598: PPUSH
5599: CALL_OW 67
// for i = 1 to [ 3 , 5 , 7 ] [ Difficulty ] do
5603: LD_ADDR_VAR 0 2
5607: PUSH
5608: DOUBLE
5609: LD_INT 1
5611: DEC
5612: ST_TO_ADDR
5613: LD_INT 3
5615: PUSH
5616: LD_INT 5
5618: PUSH
5619: LD_INT 7
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: PUSH
5627: LD_OWVAR 67
5631: ARRAY
5632: PUSH
5633: FOR_TO
5634: IFFALSE 5714
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5636: LD_INT 0
5638: PPUSH
5639: LD_INT 1
5641: PPUSH
5642: CALL_OW 12
5646: PPUSH
5647: LD_INT 1
5649: PUSH
5650: LD_INT 2
5652: PUSH
5653: LD_INT 4
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: PUSH
5661: LD_OWVAR 67
5665: ARRAY
5666: PPUSH
5667: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5671: LD_ADDR_EXP 37
5675: PUSH
5676: CALL_OW 44
5680: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5681: LD_ADDR_EXP 25
5685: PUSH
5686: LD_EXP 25
5690: PUSH
5691: LD_EXP 37
5695: ADD
5696: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5697: LD_EXP 37
5701: PPUSH
5702: LD_INT 1
5704: PPUSH
5705: LD_INT 0
5707: PPUSH
5708: CALL_OW 49
// end ;
5712: GO 5633
5714: POP
5715: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5716: LD_ADDR_VAR 0 2
5720: PUSH
5721: DOUBLE
5722: LD_INT 1
5724: DEC
5725: ST_TO_ADDR
5726: LD_INT 1
5728: PUSH
5729: LD_INT 2
5731: PUSH
5732: LD_INT 3
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: PUSH
5740: LD_OWVAR 67
5744: ARRAY
5745: PUSH
5746: FOR_TO
5747: IFFALSE 5827
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5749: LD_INT 0
5751: PPUSH
5752: LD_INT 1
5754: PPUSH
5755: CALL_OW 12
5759: PPUSH
5760: LD_INT 1
5762: PUSH
5763: LD_INT 2
5765: PUSH
5766: LD_INT 4
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: LIST
5773: PUSH
5774: LD_OWVAR 67
5778: ARRAY
5779: PPUSH
5780: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5784: LD_ADDR_EXP 38
5788: PUSH
5789: CALL_OW 44
5793: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5794: LD_ADDR_EXP 25
5798: PUSH
5799: LD_EXP 25
5803: PUSH
5804: LD_EXP 38
5808: ADD
5809: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5810: LD_EXP 38
5814: PPUSH
5815: LD_INT 1
5817: PPUSH
5818: LD_INT 0
5820: PPUSH
5821: CALL_OW 49
// end ;
5825: GO 5746
5827: POP
5828: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5829: LD_ADDR_VAR 0 2
5833: PUSH
5834: DOUBLE
5835: LD_INT 1
5837: DEC
5838: ST_TO_ADDR
5839: LD_INT 1
5841: PUSH
5842: LD_INT 1
5844: PUSH
5845: LD_INT 2
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: PUSH
5853: LD_OWVAR 67
5857: ARRAY
5858: PUSH
5859: FOR_TO
5860: IFFALSE 5940
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5862: LD_INT 0
5864: PPUSH
5865: LD_INT 1
5867: PPUSH
5868: CALL_OW 12
5872: PPUSH
5873: LD_INT 1
5875: PUSH
5876: LD_INT 2
5878: PUSH
5879: LD_INT 4
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: PUSH
5887: LD_OWVAR 67
5891: ARRAY
5892: PPUSH
5893: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5897: LD_ADDR_EXP 40
5901: PUSH
5902: CALL_OW 44
5906: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5907: LD_ADDR_EXP 25
5911: PUSH
5912: LD_EXP 25
5916: PUSH
5917: LD_EXP 40
5921: ADD
5922: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5923: LD_EXP 40
5927: PPUSH
5928: LD_INT 1
5930: PPUSH
5931: LD_INT 0
5933: PPUSH
5934: CALL_OW 49
// end ;
5938: GO 5859
5940: POP
5941: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5942: LD_ADDR_VAR 0 2
5946: PUSH
5947: DOUBLE
5948: LD_INT 1
5950: DEC
5951: ST_TO_ADDR
5952: LD_INT 1
5954: PUSH
5955: LD_INT 2
5957: PUSH
5958: LD_INT 3
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: LIST
5965: PUSH
5966: LD_OWVAR 67
5970: ARRAY
5971: PUSH
5972: FOR_TO
5973: IFFALSE 6147
// begin uc_side := 4 ;
5975: LD_ADDR_OWVAR 20
5979: PUSH
5980: LD_INT 4
5982: ST_TO_ADDR
// uc_nation := 1 ;
5983: LD_ADDR_OWVAR 21
5987: PUSH
5988: LD_INT 1
5990: ST_TO_ADDR
// vc_control = control_manual ;
5991: LD_ADDR_OWVAR 38
5995: PUSH
5996: LD_INT 1
5998: ST_TO_ADDR
// vc_engine = engine_combustion ;
5999: LD_ADDR_OWVAR 39
6003: PUSH
6004: LD_INT 1
6006: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6007: LD_ADDR_OWVAR 37
6011: PUSH
6012: LD_INT 2
6014: PPUSH
6015: LD_INT 4
6017: PPUSH
6018: CALL_OW 12
6022: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6023: LD_ADDR_OWVAR 40
6027: PUSH
6028: LD_INT 3
6030: PPUSH
6031: LD_INT 5
6033: PPUSH
6034: CALL_OW 12
6038: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6039: LD_ADDR_EXP 41
6043: PUSH
6044: CALL_OW 45
6048: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6049: LD_INT 0
6051: PPUSH
6052: LD_INT 1
6054: PPUSH
6055: CALL_OW 12
6059: PPUSH
6060: LD_INT 1
6062: PUSH
6063: LD_INT 2
6065: PUSH
6066: LD_INT 4
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: LIST
6073: PUSH
6074: LD_OWVAR 67
6078: ARRAY
6079: PPUSH
6080: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6084: LD_ADDR_EXP 39
6088: PUSH
6089: CALL_OW 44
6093: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6094: LD_EXP 39
6098: PPUSH
6099: LD_EXP 41
6103: PPUSH
6104: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6108: LD_EXP 41
6112: PPUSH
6113: LD_INT 14
6115: PPUSH
6116: LD_INT 0
6118: PPUSH
6119: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6123: LD_ADDR_EXP 26
6127: PUSH
6128: LD_EXP 26
6132: PUSH
6133: LD_EXP 39
6137: ADD
6138: PUSH
6139: LD_EXP 41
6143: ADD
6144: ST_TO_ADDR
// end ;
6145: GO 5972
6147: POP
6148: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
6149: LD_EXP 25
6153: PPUSH
6154: LD_INT 157
6156: PPUSH
6157: LD_INT 97
6159: PPUSH
6160: CALL_OW 114
// Wait ( 5 5$0 ) ;
6164: LD_INT 10500
6166: PPUSH
6167: CALL_OW 67
// for i = 1 to [ 4 , 6 , 10 ] [ Difficulty ] do
6171: LD_ADDR_VAR 0 2
6175: PUSH
6176: DOUBLE
6177: LD_INT 1
6179: DEC
6180: ST_TO_ADDR
6181: LD_INT 4
6183: PUSH
6184: LD_INT 6
6186: PUSH
6187: LD_INT 10
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: PUSH
6195: LD_OWVAR 67
6199: ARRAY
6200: PUSH
6201: FOR_TO
6202: IFFALSE 6282
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6204: LD_INT 0
6206: PPUSH
6207: LD_INT 1
6209: PPUSH
6210: CALL_OW 12
6214: PPUSH
6215: LD_INT 1
6217: PUSH
6218: LD_INT 2
6220: PUSH
6221: LD_INT 4
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: LIST
6228: PUSH
6229: LD_OWVAR 67
6233: ARRAY
6234: PPUSH
6235: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
6239: LD_ADDR_EXP 37
6243: PUSH
6244: CALL_OW 44
6248: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
6249: LD_ADDR_EXP 25
6253: PUSH
6254: LD_EXP 25
6258: PUSH
6259: LD_EXP 37
6263: ADD
6264: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
6265: LD_EXP 37
6269: PPUSH
6270: LD_INT 1
6272: PPUSH
6273: LD_INT 0
6275: PPUSH
6276: CALL_OW 49
// end ;
6280: GO 6201
6282: POP
6283: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
6284: LD_ADDR_VAR 0 2
6288: PUSH
6289: DOUBLE
6290: LD_INT 1
6292: DEC
6293: ST_TO_ADDR
6294: LD_INT 1
6296: PUSH
6297: LD_INT 2
6299: PUSH
6300: LD_INT 3
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: LD_OWVAR 67
6312: ARRAY
6313: PUSH
6314: FOR_TO
6315: IFFALSE 6395
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6317: LD_INT 0
6319: PPUSH
6320: LD_INT 1
6322: PPUSH
6323: CALL_OW 12
6327: PPUSH
6328: LD_INT 1
6330: PUSH
6331: LD_INT 2
6333: PUSH
6334: LD_INT 4
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: PUSH
6342: LD_OWVAR 67
6346: ARRAY
6347: PPUSH
6348: CALL_OW 384
// AmSciConvoy = CreateHuman ;
6352: LD_ADDR_EXP 38
6356: PUSH
6357: CALL_OW 44
6361: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
6362: LD_ADDR_EXP 25
6366: PUSH
6367: LD_EXP 25
6371: PUSH
6372: LD_EXP 38
6376: ADD
6377: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
6378: LD_EXP 38
6382: PPUSH
6383: LD_INT 1
6385: PPUSH
6386: LD_INT 0
6388: PPUSH
6389: CALL_OW 49
// end ;
6393: GO 6314
6395: POP
6396: POP
// for i = 1 to [ 1 , 1 , 3 ] [ Difficulty ] do
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: DOUBLE
6403: LD_INT 1
6405: DEC
6406: ST_TO_ADDR
6407: LD_INT 1
6409: PUSH
6410: LD_INT 1
6412: PUSH
6413: LD_INT 3
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: LIST
6420: PUSH
6421: LD_OWVAR 67
6425: ARRAY
6426: PUSH
6427: FOR_TO
6428: IFFALSE 6508
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6430: LD_INT 0
6432: PPUSH
6433: LD_INT 1
6435: PPUSH
6436: CALL_OW 12
6440: PPUSH
6441: LD_INT 1
6443: PUSH
6444: LD_INT 2
6446: PUSH
6447: LD_INT 4
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: LIST
6454: PUSH
6455: LD_OWVAR 67
6459: ARRAY
6460: PPUSH
6461: CALL_OW 382
// AmEngConvoy = CreateHuman ;
6465: LD_ADDR_EXP 40
6469: PUSH
6470: CALL_OW 44
6474: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
6475: LD_ADDR_EXP 25
6479: PUSH
6480: LD_EXP 25
6484: PUSH
6485: LD_EXP 40
6489: ADD
6490: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
6491: LD_EXP 40
6495: PPUSH
6496: LD_INT 1
6498: PPUSH
6499: LD_INT 0
6501: PPUSH
6502: CALL_OW 49
// end ;
6506: GO 6427
6508: POP
6509: POP
// for i = 1 to [ 1 , 2 , 4 ] [ Difficulty ] do
6510: LD_ADDR_VAR 0 2
6514: PUSH
6515: DOUBLE
6516: LD_INT 1
6518: DEC
6519: ST_TO_ADDR
6520: LD_INT 1
6522: PUSH
6523: LD_INT 2
6525: PUSH
6526: LD_INT 4
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: LIST
6533: PUSH
6534: LD_OWVAR 67
6538: ARRAY
6539: PUSH
6540: FOR_TO
6541: IFFALSE 6715
// begin uc_side := 4 ;
6543: LD_ADDR_OWVAR 20
6547: PUSH
6548: LD_INT 4
6550: ST_TO_ADDR
// uc_nation := 1 ;
6551: LD_ADDR_OWVAR 21
6555: PUSH
6556: LD_INT 1
6558: ST_TO_ADDR
// vc_control = control_manual ;
6559: LD_ADDR_OWVAR 38
6563: PUSH
6564: LD_INT 1
6566: ST_TO_ADDR
// vc_engine = engine_combustion ;
6567: LD_ADDR_OWVAR 39
6571: PUSH
6572: LD_INT 1
6574: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6575: LD_ADDR_OWVAR 37
6579: PUSH
6580: LD_INT 2
6582: PPUSH
6583: LD_INT 4
6585: PPUSH
6586: CALL_OW 12
6590: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6591: LD_ADDR_OWVAR 40
6595: PUSH
6596: LD_INT 3
6598: PPUSH
6599: LD_INT 5
6601: PPUSH
6602: CALL_OW 12
6606: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6607: LD_ADDR_EXP 41
6611: PUSH
6612: CALL_OW 45
6616: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6617: LD_INT 0
6619: PPUSH
6620: LD_INT 1
6622: PPUSH
6623: CALL_OW 12
6627: PPUSH
6628: LD_INT 1
6630: PUSH
6631: LD_INT 2
6633: PUSH
6634: LD_INT 4
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PUSH
6642: LD_OWVAR 67
6646: ARRAY
6647: PPUSH
6648: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6652: LD_ADDR_EXP 39
6656: PUSH
6657: CALL_OW 44
6661: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6662: LD_EXP 39
6666: PPUSH
6667: LD_EXP 41
6671: PPUSH
6672: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6676: LD_EXP 41
6680: PPUSH
6681: LD_INT 14
6683: PPUSH
6684: LD_INT 0
6686: PPUSH
6687: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6691: LD_ADDR_EXP 26
6695: PUSH
6696: LD_EXP 26
6700: PUSH
6701: LD_EXP 39
6705: ADD
6706: PUSH
6707: LD_EXP 41
6711: ADD
6712: ST_TO_ADDR
// end ;
6713: GO 6540
6715: POP
6716: POP
// end ; end_of_file
6717: LD_VAR 0 1
6721: RET
// export function InitRussian ; begin
6722: LD_INT 0
6724: PPUSH
// Uc_Nation := 3 ;
6725: LD_ADDR_OWVAR 21
6729: PUSH
6730: LD_INT 3
6732: ST_TO_ADDR
// Uc_Side := 3 ;
6733: LD_ADDR_OWVAR 20
6737: PUSH
6738: LD_INT 3
6740: ST_TO_ADDR
// YakotichCrew := YakotichCrew ^ Yakotich ^ Mietek ^ Boris ^ Michail ^ Vasilij ^ Maksim ^ Fiodor ^ Aleksandr ^ Aleksiej ^ Pavel ^ Zakhar ^ Constantin ^ Stanislav ^ Josif ;
6741: LD_ADDR_EXP 1
6745: PUSH
6746: LD_EXP 1
6750: PUSH
6751: LD_EXP 3
6755: ADD
6756: PUSH
6757: LD_EXP 4
6761: ADD
6762: PUSH
6763: LD_EXP 5
6767: ADD
6768: PUSH
6769: LD_EXP 7
6773: ADD
6774: PUSH
6775: LD_EXP 6
6779: ADD
6780: PUSH
6781: LD_EXP 9
6785: ADD
6786: PUSH
6787: LD_EXP 10
6791: ADD
6792: PUSH
6793: LD_EXP 14
6797: ADD
6798: PUSH
6799: LD_EXP 13
6803: ADD
6804: PUSH
6805: LD_EXP 11
6809: ADD
6810: PUSH
6811: LD_EXP 12
6815: ADD
6816: PUSH
6817: LD_EXP 8
6821: ADD
6822: PUSH
6823: LD_EXP 16
6827: ADD
6828: PUSH
6829: LD_EXP 15
6833: ADD
6834: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 01_ ) ;
6835: LD_ADDR_EXP 3
6839: PUSH
6840: LD_STRING Yakotich
6842: PPUSH
6843: LD_INT 1
6845: PPUSH
6846: LD_STRING 01_
6848: PPUSH
6849: CALL 9202 0 3
6853: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 01_ ) ;
6854: LD_ADDR_EXP 4
6858: PUSH
6859: LD_STRING Mietek
6861: PPUSH
6862: LD_INT 1
6864: PPUSH
6865: LD_STRING 01_
6867: PPUSH
6868: CALL 9202 0 3
6872: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 01_ ) ;
6873: LD_ADDR_EXP 5
6877: PUSH
6878: LD_STRING Boris
6880: PPUSH
6881: LD_INT 1
6883: PPUSH
6884: LD_STRING 01_
6886: PPUSH
6887: CALL 9202 0 3
6891: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 01_ ) ;
6892: LD_ADDR_EXP 7
6896: PUSH
6897: LD_STRING Michail
6899: PPUSH
6900: LD_INT 1
6902: PPUSH
6903: LD_STRING 01_
6905: PPUSH
6906: CALL 9202 0 3
6910: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 01_ ) ;
6911: LD_ADDR_EXP 6
6915: PUSH
6916: LD_STRING Vasilij
6918: PPUSH
6919: LD_INT 1
6921: PPUSH
6922: LD_STRING 01_
6924: PPUSH
6925: CALL 9202 0 3
6929: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 01_ ) ;
6930: LD_ADDR_EXP 9
6934: PUSH
6935: LD_STRING Maksim
6937: PPUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_STRING 01_
6943: PPUSH
6944: CALL 9202 0 3
6948: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 01_ ) ;
6949: LD_ADDR_EXP 10
6953: PUSH
6954: LD_STRING Fiodor
6956: PPUSH
6957: LD_INT 1
6959: PPUSH
6960: LD_STRING 01_
6962: PPUSH
6963: CALL 9202 0 3
6967: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 01_ ) ;
6968: LD_ADDR_EXP 14
6972: PUSH
6973: LD_STRING Aleksandr
6975: PPUSH
6976: LD_INT 1
6978: PPUSH
6979: LD_STRING 01_
6981: PPUSH
6982: CALL 9202 0 3
6986: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 01_ ) ;
6987: LD_ADDR_EXP 13
6991: PUSH
6992: LD_STRING Aleksiej
6994: PPUSH
6995: LD_INT 1
6997: PPUSH
6998: LD_STRING 01_
7000: PPUSH
7001: CALL 9202 0 3
7005: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 01_ ) ;
7006: LD_ADDR_EXP 11
7010: PUSH
7011: LD_STRING Pavel
7013: PPUSH
7014: LD_INT 1
7016: PPUSH
7017: LD_STRING 01_
7019: PPUSH
7020: CALL 9202 0 3
7024: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 01_ ) ;
7025: LD_ADDR_EXP 12
7029: PUSH
7030: LD_STRING Zakhar
7032: PPUSH
7033: LD_INT 1
7035: PPUSH
7036: LD_STRING 01_
7038: PPUSH
7039: CALL 9202 0 3
7043: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 01_ ) ;
7044: LD_ADDR_EXP 8
7048: PUSH
7049: LD_STRING Constantin
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: LD_STRING 01_
7057: PPUSH
7058: CALL 9202 0 3
7062: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , false ,  ) ;
7063: LD_ADDR_EXP 16
7067: PUSH
7068: LD_STRING Stanislav
7070: PPUSH
7071: LD_INT 0
7073: PPUSH
7074: LD_STRING 
7076: PPUSH
7077: CALL 9202 0 3
7081: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false ,  ) ;
7082: LD_ADDR_EXP 15
7086: PUSH
7087: LD_STRING Josif
7089: PPUSH
7090: LD_INT 0
7092: PPUSH
7093: LD_STRING 
7095: PPUSH
7096: CALL 9202 0 3
7100: ST_TO_ADDR
// SetClass ( Boris , 2 ) ;
7101: LD_EXP 5
7105: PPUSH
7106: LD_INT 2
7108: PPUSH
7109: CALL_OW 336
// SetClass ( Vasilij , 4 ) ;
7113: LD_EXP 6
7117: PPUSH
7118: LD_INT 4
7120: PPUSH
7121: CALL_OW 336
// Uc_Side := 6 ;
7125: LD_ADDR_OWVAR 20
7129: PUSH
7130: LD_INT 6
7132: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
7133: LD_ADDR_EXP 17
7137: PUSH
7138: LD_STRING Morozov
7140: PPUSH
7141: LD_INT 0
7143: PPUSH
7144: LD_STRING 
7146: PPUSH
7147: CALL 9202 0 3
7151: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
7152: LD_ADDR_EXP 18
7156: PUSH
7157: LD_STRING Kurin
7159: PPUSH
7160: LD_INT 0
7162: PPUSH
7163: LD_STRING 
7165: PPUSH
7166: CALL 9202 0 3
7170: ST_TO_ADDR
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
7171: LD_ADDR_EXP 19
7175: PUSH
7176: LD_STRING Grishko
7178: PPUSH
7179: LD_INT 0
7181: PPUSH
7182: LD_STRING 
7184: PPUSH
7185: CALL 9202 0 3
7189: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
7190: LD_ADDR_EXP 20
7194: PUSH
7195: LD_STRING Burlak
7197: PPUSH
7198: LD_INT 0
7200: PPUSH
7201: LD_STRING 
7203: PPUSH
7204: CALL 9202 0 3
7208: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
7209: LD_ADDR_EXP 21
7213: PUSH
7214: LD_STRING Platonov
7216: PPUSH
7217: LD_INT 0
7219: PPUSH
7220: LD_STRING 
7222: PPUSH
7223: CALL 9202 0 3
7227: ST_TO_ADDR
// Uc_Side := 1 ;
7228: LD_ADDR_OWVAR 20
7232: PUSH
7233: LD_INT 1
7235: ST_TO_ADDR
// AmSold := PrepareUnit ( AmSold , false ,  ) ;
7236: LD_ADDR_EXP 22
7240: PUSH
7241: LD_STRING AmSold
7243: PPUSH
7244: LD_INT 0
7246: PPUSH
7247: LD_STRING 
7249: PPUSH
7250: CALL 9202 0 3
7254: ST_TO_ADDR
// end ;
7255: LD_VAR 0 1
7259: RET
// export function Czolg ; begin
7260: LD_INT 0
7262: PPUSH
// if LoadVariable ( 01_Vehicle , 1 ) then
7263: LD_STRING 01_Vehicle
7265: PPUSH
7266: LD_INT 1
7268: PPUSH
7269: CALL_OW 30
7273: IFFALSE 7356
// begin Uc_Side = 3 ;
7275: LD_ADDR_OWVAR 20
7279: PUSH
7280: LD_INT 3
7282: ST_TO_ADDR
// Uc_Nation = 3 ;
7283: LD_ADDR_OWVAR 21
7287: PUSH
7288: LD_INT 3
7290: ST_TO_ADDR
// Uc_Direction = 2 ;
7291: LD_ADDR_OWVAR 24
7295: PUSH
7296: LD_INT 2
7298: ST_TO_ADDR
// Vc_Chassis = 21 ;
7299: LD_ADDR_OWVAR 37
7303: PUSH
7304: LD_INT 21
7306: ST_TO_ADDR
// Vc_Control = 1 ;
7307: LD_ADDR_OWVAR 38
7311: PUSH
7312: LD_INT 1
7314: ST_TO_ADDR
// Vc_Engine = 1 ;
7315: LD_ADDR_OWVAR 39
7319: PUSH
7320: LD_INT 1
7322: ST_TO_ADDR
// Vc_Weapon = 42 ;
7323: LD_ADDR_OWVAR 40
7327: PUSH
7328: LD_INT 42
7330: ST_TO_ADDR
// Tank := CreateVehicle ;
7331: LD_ADDR_EXP 42
7335: PUSH
7336: CALL_OW 45
7340: ST_TO_ADDR
// PlaceUnitArea ( Tank , VehSpawn , false ) ;
7341: LD_EXP 42
7345: PPUSH
7346: LD_INT 19
7348: PPUSH
7349: LD_INT 0
7351: PPUSH
7352: CALL_OW 49
// end ; end ; end_of_file
7356: LD_VAR 0 1
7360: RET
// export function Action ; var i ; begin
7361: LD_INT 0
7363: PPUSH
7364: PPUSH
// if LoadVariable ( 01_Vehicle , 1 ) then
7365: LD_STRING 01_Vehicle
7367: PPUSH
7368: LD_INT 1
7370: PPUSH
7371: CALL_OW 30
7375: IFFALSE 7393
// PlaceHumanInUnit ( Yakotich , Tank ) else
7377: LD_EXP 3
7381: PPUSH
7382: LD_EXP 42
7386: PPUSH
7387: CALL_OW 52
7391: GO 7408
// PlaceUnitArea ( Yakotich , RussianSpawn , false ) ;
7393: LD_EXP 3
7397: PPUSH
7398: LD_INT 2
7400: PPUSH
7401: LD_INT 0
7403: PPUSH
7404: CALL_OW 49
// PlaceUnitArea ( Maksim , RussianSpawn , false ) ;
7408: LD_EXP 9
7412: PPUSH
7413: LD_INT 2
7415: PPUSH
7416: LD_INT 0
7418: PPUSH
7419: CALL_OW 49
// PlaceUnitArea ( Vasilij , RussianSpawn , false ) ;
7423: LD_EXP 6
7427: PPUSH
7428: LD_INT 2
7430: PPUSH
7431: LD_INT 0
7433: PPUSH
7434: CALL_OW 49
// PlaceUnitArea ( Michail , RussianSpawn , false ) ;
7438: LD_EXP 7
7442: PPUSH
7443: LD_INT 2
7445: PPUSH
7446: LD_INT 0
7448: PPUSH
7449: CALL_OW 49
// PlaceUnitArea ( Fiodor , RussianSpawn , false ) ;
7453: LD_EXP 10
7457: PPUSH
7458: LD_INT 2
7460: PPUSH
7461: LD_INT 0
7463: PPUSH
7464: CALL_OW 49
// PlaceUnitArea ( Constantin , RussianSpawn , false ) ;
7468: LD_EXP 8
7472: PPUSH
7473: LD_INT 2
7475: PPUSH
7476: LD_INT 0
7478: PPUSH
7479: CALL_OW 49
// PlaceUnitArea ( Boris , RussianSpawn , false ) ;
7483: LD_EXP 5
7487: PPUSH
7488: LD_INT 2
7490: PPUSH
7491: LD_INT 0
7493: PPUSH
7494: CALL_OW 49
// InGameOn ;
7498: CALL_OW 8
// DialogueOn ;
7502: CALL_OW 6
// CenterNowOnXY ( 152 , 28 ) ;
7506: LD_INT 152
7508: PPUSH
7509: LD_INT 28
7511: PPUSH
7512: CALL_OW 86
// Wait ( 0 0$3 ) ;
7516: LD_INT 105
7518: PPUSH
7519: CALL_OW 67
// Say ( Yakotich , 2Yak-13 ) ;
7523: LD_EXP 3
7527: PPUSH
7528: LD_STRING 2Yak-13
7530: PPUSH
7531: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
7535: LD_STRING o1
7537: PPUSH
7538: CALL_OW 337
// MaksimScout ;
7542: CALL 1206 0 0
// InGameOff ;
7546: CALL_OW 9
// DialogueOff ;
7550: CALL_OW 7
// Say ( Michail , 2Mich-02 ) ;
7554: LD_EXP 7
7558: PPUSH
7559: LD_STRING 2Mich-02
7561: PPUSH
7562: CALL_OW 88
// Say ( Michail , 2Mich-03 ) ;
7566: LD_EXP 7
7570: PPUSH
7571: LD_STRING 2Mich-03
7573: PPUSH
7574: CALL_OW 88
// Say ( Yakotich , 2Yak-15 ) ;
7578: LD_EXP 3
7582: PPUSH
7583: LD_STRING 2Yak-15
7585: PPUSH
7586: CALL_OW 88
// ChangeMissionObjectives ( turret ) ;
7590: LD_STRING turret
7592: PPUSH
7593: CALL_OW 337
// SaveForQuickRestart ;
7597: CALL_OW 22
// end ;
7601: LD_VAR 0 1
7605: RET
// every 0 0$1 trigger maksim_scout_ended = true and See ( 3 , Maksim ) do
7606: LD_EXP 46
7610: PUSH
7611: LD_INT 1
7613: EQUAL
7614: PUSH
7615: LD_INT 3
7617: PPUSH
7618: LD_EXP 9
7622: PPUSH
7623: CALL_OW 292
7627: AND
7628: IFFALSE 7964
7630: GO 7632
7632: DISABLE
// begin CenterNowOnUnits ( Maksim ) ;
7633: LD_EXP 9
7637: PPUSH
7638: CALL_OW 87
// DialogueOn ;
7642: CALL_OW 6
// InGameOn ;
7646: CALL_OW 8
// RevealFogArea ( 3 , ScoutedTerrains ) ;
7650: LD_INT 3
7652: PPUSH
7653: LD_INT 8
7655: PPUSH
7656: CALL_OW 332
// Say ( Maksim , 2Mak-06 ) ;
7660: LD_EXP 9
7664: PPUSH
7665: LD_STRING 2Mak-06
7667: PPUSH
7668: CALL_OW 88
// Say ( Yakotich , 2Yak-16 ) ;
7672: LD_EXP 3
7676: PPUSH
7677: LD_STRING 2Yak-16
7679: PPUSH
7680: CALL_OW 88
// CenterNowOnXY ( 40 , 10 ) ;
7684: LD_INT 40
7686: PPUSH
7687: LD_INT 10
7689: PPUSH
7690: CALL_OW 86
// Wait ( 0 0$03 ) ;
7694: LD_INT 105
7696: PPUSH
7697: CALL_OW 67
// CenterOnXY ( 55 , 40 ) ;
7701: LD_INT 55
7703: PPUSH
7704: LD_INT 40
7706: PPUSH
7707: CALL_OW 84
// Wait ( 0 0$03 ) ;
7711: LD_INT 105
7713: PPUSH
7714: CALL_OW 67
// CenterOnXY ( 70 , 72 ) ;
7718: LD_INT 70
7720: PPUSH
7721: LD_INT 72
7723: PPUSH
7724: CALL_OW 84
// Say ( Maksim , 2Mak-07 ) ;
7728: LD_EXP 9
7732: PPUSH
7733: LD_STRING 2Mak-07
7735: PPUSH
7736: CALL_OW 88
// Say ( Maksim , 2Mak-08 ) ;
7740: LD_EXP 9
7744: PPUSH
7745: LD_STRING 2Mak-08
7747: PPUSH
7748: CALL_OW 88
// CenterNowOnUnits ( Yakotich ) ;
7752: LD_EXP 3
7756: PPUSH
7757: CALL_OW 87
// Say ( Yakotich , 2Yak-17 ) ;
7761: LD_EXP 3
7765: PPUSH
7766: LD_STRING 2Yak-17
7768: PPUSH
7769: CALL_OW 88
// Say ( Yakotich , 2Yak-18 ) ;
7773: LD_EXP 3
7777: PPUSH
7778: LD_STRING 2Yak-18
7780: PPUSH
7781: CALL_OW 88
// Say ( Maksim , 2Mak-09 ) ;
7785: LD_EXP 9
7789: PPUSH
7790: LD_STRING 2Mak-09
7792: PPUSH
7793: CALL_OW 88
// Say ( Maksim , 2Mak-10 ) ;
7797: LD_EXP 9
7801: PPUSH
7802: LD_STRING 2Mak-10
7804: PPUSH
7805: CALL_OW 88
// Say ( Maksim , 2Mak-11 ) ;
7809: LD_EXP 9
7813: PPUSH
7814: LD_STRING 2Mak-11
7816: PPUSH
7817: CALL_OW 88
// Say ( Yakotich , 2Yak-19 ) ;
7821: LD_EXP 3
7825: PPUSH
7826: LD_STRING 2Yak-19
7828: PPUSH
7829: CALL_OW 88
// SayRadio ( Yakotich , 2Yak-20 ) ;
7833: LD_EXP 3
7837: PPUSH
7838: LD_STRING 2Yak-20
7840: PPUSH
7841: CALL_OW 94
// SayRadio ( Morozov , 2Moro-05 ) ;
7845: LD_EXP 17
7849: PPUSH
7850: LD_STRING 2Moro-05
7852: PPUSH
7853: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-21 ) ;
7857: LD_EXP 3
7861: PPUSH
7862: LD_STRING 2Yak-21
7864: PPUSH
7865: CALL_OW 94
// SayRadio ( Morozov , 2Moro-06 ) ;
7869: LD_EXP 17
7873: PPUSH
7874: LD_STRING 2Moro-06
7876: PPUSH
7877: CALL_OW 94
// SayRadio ( Morozov , 2Moro-07 ) ;
7881: LD_EXP 17
7885: PPUSH
7886: LD_STRING 2Moro-07
7888: PPUSH
7889: CALL_OW 94
// SayRadio ( Morozov , 2Moro-08 ) ;
7893: LD_EXP 17
7897: PPUSH
7898: LD_STRING 2Moro-08
7900: PPUSH
7901: CALL_OW 94
// SayRadio ( Morozov , 2Moro-09 ) ;
7905: LD_EXP 17
7909: PPUSH
7910: LD_STRING 2Moro-09
7912: PPUSH
7913: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-22 ) ;
7917: LD_EXP 3
7921: PPUSH
7922: LD_STRING 2Yak-22
7924: PPUSH
7925: CALL_OW 94
// ChangeMissionObjectives ( o2 ) ;
7929: LD_STRING o2
7931: PPUSH
7932: CALL_OW 337
// DialogueOff ;
7936: CALL_OW 7
// InGameOff ;
7940: CALL_OW 9
// maksim_back = true ;
7944: LD_ADDR_EXP 47
7948: PUSH
7949: LD_INT 1
7951: ST_TO_ADDR
// SetSide ( Maksim , 3 ) ;
7952: LD_EXP 9
7956: PPUSH
7957: LD_INT 3
7959: PPUSH
7960: CALL_OW 235
// end ;
7964: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
7965: LD_INT 3
7967: PPUSH
7968: LD_INT 90
7970: PPUSH
7971: CALL_OW 325
7975: IFFALSE 8004
7977: GO 7979
7979: DISABLE
// begin Say ( Michail , 2Mich-04 ) ;
7980: LD_EXP 7
7984: PPUSH
7985: LD_STRING 2Mich-04
7987: PPUSH
7988: CALL_OW 88
// Say ( Michail , 2Mich-05 ) ;
7992: LD_EXP 7
7996: PPUSH
7997: LD_STRING 2Mich-05
7999: PPUSH
8000: CALL_OW 88
// end ;
8004: END
// every 0 0$1 trigger Researched ( 3 , 83 ) do
8005: LD_INT 3
8007: PPUSH
8008: LD_INT 83
8010: PPUSH
8011: CALL_OW 325
8015: IFFALSE 8032
8017: GO 8019
8019: DISABLE
// begin Say ( Vasilij , 2Vas-07 ) ;
8020: LD_EXP 6
8024: PPUSH
8025: LD_STRING 2Vas-07
8027: PPUSH
8028: CALL_OW 88
// end ;
8032: END
// every 0 0$1 trigger first_attack_clear do
8033: LD_EXP 55
8037: IFFALSE 8250
8039: GO 8041
8041: DISABLE
// begin Wait ( 5 5$0 ) ;
8042: LD_INT 10500
8044: PPUSH
8045: CALL_OW 67
// PlaceUnitArea ( Mietek , RussianSpawn , false ) ;
8049: LD_EXP 4
8053: PPUSH
8054: LD_INT 2
8056: PPUSH
8057: LD_INT 0
8059: PPUSH
8060: CALL_OW 49
// PlaceUnitArea ( Aleksiej , RussianSpawn , false ) ;
8064: LD_EXP 13
8068: PPUSH
8069: LD_INT 2
8071: PPUSH
8072: LD_INT 0
8074: PPUSH
8075: CALL_OW 49
// PlaceUnitArea ( Aleksandr , RussianSpawn , false ) ;
8079: LD_EXP 14
8083: PPUSH
8084: LD_INT 2
8086: PPUSH
8087: LD_INT 0
8089: PPUSH
8090: CALL_OW 49
// PlaceUnitArea ( Josif , RussianSpawn , false ) ;
8094: LD_EXP 15
8098: PPUSH
8099: LD_INT 2
8101: PPUSH
8102: LD_INT 0
8104: PPUSH
8105: CALL_OW 49
// PlaceUnitArea ( Zakhar , RussianSpawn , false ) ;
8109: LD_EXP 12
8113: PPUSH
8114: LD_INT 2
8116: PPUSH
8117: LD_INT 0
8119: PPUSH
8120: CALL_OW 49
// PlaceUnitArea ( Stanislav , RussianSpawn , false ) ;
8124: LD_EXP 16
8128: PPUSH
8129: LD_INT 2
8131: PPUSH
8132: LD_INT 0
8134: PPUSH
8135: CALL_OW 49
// PlaceUnitArea ( Pavel , RussianSpawn , false ) ;
8139: LD_EXP 11
8143: PPUSH
8144: LD_INT 2
8146: PPUSH
8147: LD_INT 0
8149: PPUSH
8150: CALL_OW 49
// DialogueOn ;
8154: CALL_OW 6
// CenterNowOnUnits ( Mietek ) ;
8158: LD_EXP 4
8162: PPUSH
8163: CALL_OW 87
// SayRadio ( Mietek , 2Ryn-06 ) ;
8167: LD_EXP 4
8171: PPUSH
8172: LD_STRING 2Ryn-06
8174: PPUSH
8175: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-25 ) ;
8179: LD_EXP 3
8183: PPUSH
8184: LD_STRING 2Yak-25
8186: PPUSH
8187: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-01 ) ;
8191: LD_EXP 16
8195: PPUSH
8196: LD_STRING 2Stan-01
8198: PPUSH
8199: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-02 ) ;
8203: LD_EXP 16
8207: PPUSH
8208: LD_STRING 2Stan-02
8210: PPUSH
8211: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-03 ) ;
8215: LD_EXP 16
8219: PPUSH
8220: LD_STRING 2Stan-03
8222: PPUSH
8223: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-Stan-01 ) ;
8227: LD_EXP 3
8231: PPUSH
8232: LD_STRING 2Yak-Stan-01
8234: PPUSH
8235: CALL_OW 94
// ChangeMissionObjectives ( gun ) ;
8239: LD_STRING gun
8241: PPUSH
8242: CALL_OW 337
// DialogueOff ;
8246: CALL_OW 7
// end ;
8250: END
// every 0 0$1 trigger maksim_back = true do
8251: LD_EXP 47
8255: PUSH
8256: LD_INT 1
8258: EQUAL
8259: IFFALSE 8382
8261: GO 8263
8263: DISABLE
// begin Wait ( 30 30$0 ) ;
8264: LD_INT 63000
8266: PPUSH
8267: CALL_OW 67
// DialogueOn ;
8271: CALL_OW 6
// InGameOn ;
8275: CALL_OW 8
// SayRadio ( Kurin , 2Kurin-01 ) ;
8279: LD_EXP 18
8283: PPUSH
8284: LD_STRING 2Kurin-01
8286: PPUSH
8287: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-02 ) ;
8291: LD_EXP 18
8295: PPUSH
8296: LD_STRING 2Kurin-02
8298: PPUSH
8299: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-26 ) ;
8303: LD_EXP 3
8307: PPUSH
8308: LD_STRING 2Yak-26
8310: PPUSH
8311: CALL_OW 94
// ChangeMissionObjectives ( o3 ) ;
8315: LD_STRING o3
8317: PPUSH
8318: CALL_OW 337
// Say ( Maksim , 2Mak-12 ) ;
8322: LD_EXP 9
8326: PPUSH
8327: LD_STRING 2Mak-12
8329: PPUSH
8330: CALL_OW 88
// CenterNowOnXY ( 57 , 2 ) ;
8334: LD_INT 57
8336: PPUSH
8337: LD_INT 2
8339: PPUSH
8340: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
8344: LD_INT 3
8346: PPUSH
8347: LD_INT 9
8349: PPUSH
8350: CALL_OW 332
// Say ( Maksim , 2Mak-13 ) ;
8354: LD_EXP 9
8358: PPUSH
8359: LD_STRING 2Mak-13
8361: PPUSH
8362: CALL_OW 88
// DialogueOff ;
8366: CALL_OW 7
// InGameOff ;
8370: CALL_OW 9
// kurin_attack_started = true ;
8374: LD_ADDR_EXP 57
8378: PUSH
8379: LD_INT 1
8381: ST_TO_ADDR
// end ;
8382: END
// every 1 trigger kurin_attack_started = true and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var unit ;
8383: LD_EXP 57
8387: PUSH
8388: LD_INT 1
8390: EQUAL
8391: PUSH
8392: LD_INT 22
8394: PUSH
8395: LD_INT 1
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: LD_INT 21
8404: PUSH
8405: LD_INT 1
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PPUSH
8416: CALL_OW 69
8420: PUSH
8421: LD_INT 0
8423: EQUAL
8424: AND
8425: IFFALSE 9039
8427: GO 8429
8429: DISABLE
8430: LD_INT 0
8432: PPUSH
// begin InGameOn ;
8433: CALL_OW 8
// SayRadio ( Yakotich , 2Yak-27 ) ;
8437: LD_EXP 3
8441: PPUSH
8442: LD_STRING 2Yak-27
8444: PPUSH
8445: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-03 ) ;
8449: LD_EXP 18
8453: PPUSH
8454: LD_STRING 2Kurin-03
8456: PPUSH
8457: CALL_OW 94
// SayRadio ( AmSold , 2AmSold-01 ) ;
8461: LD_EXP 22
8465: PPUSH
8466: LD_STRING 2AmSold-01
8468: PPUSH
8469: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-04 ) ;
8473: LD_EXP 18
8477: PPUSH
8478: LD_STRING 2Kurin-04
8480: PPUSH
8481: CALL_OW 94
// Wait ( 0 0$02 ) ;
8485: LD_INT 70
8487: PPUSH
8488: CALL_OW 67
// SayRadio ( Grishko , 2Gri-01 ) ;
8492: LD_EXP 19
8496: PPUSH
8497: LD_STRING 2Gri-01
8499: PPUSH
8500: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-05 ) ;
8504: LD_EXP 18
8508: PPUSH
8509: LD_STRING 2Kurin-05
8511: PPUSH
8512: CALL_OW 94
// SayRadio ( Grishko , 2Gri-02 ) ;
8516: LD_EXP 19
8520: PPUSH
8521: LD_STRING 2Gri-02
8523: PPUSH
8524: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-06 ) ;
8528: LD_EXP 18
8532: PPUSH
8533: LD_STRING 2Kurin-06
8535: PPUSH
8536: CALL_OW 94
// SayRadio ( Grishko , 2Gri-03 ) ;
8540: LD_EXP 19
8544: PPUSH
8545: LD_STRING 2Gri-03
8547: PPUSH
8548: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-07 ) ;
8552: LD_EXP 18
8556: PPUSH
8557: LD_STRING 2Kurin-07
8559: PPUSH
8560: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-28 ) ;
8564: LD_EXP 3
8568: PPUSH
8569: LD_STRING 2Yak-28
8571: PPUSH
8572: CALL_OW 94
// Wait ( 0 0$03 ) ;
8576: LD_INT 105
8578: PPUSH
8579: CALL_OW 67
// SayRadio ( Kurin , 2Kurin-08 ) ;
8583: LD_EXP 18
8587: PPUSH
8588: LD_STRING 2Kurin-08
8590: PPUSH
8591: CALL_OW 94
// SayRadio ( Burlak , 2Burlak-01 ) ;
8595: LD_EXP 20
8599: PPUSH
8600: LD_STRING 2Burlak-01
8602: PPUSH
8603: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-09 ) ;
8607: LD_EXP 18
8611: PPUSH
8612: LD_STRING 2Kurin-09
8614: PPUSH
8615: CALL_OW 94
// SayEffect ( 2GunSound ) ;
8619: LD_STRING 2GunSound
8621: PPUSH
8622: CALL_OW 96
// SayRadio ( Morozov , 2Moro-10 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_STRING 2Moro-10
8633: PPUSH
8634: CALL_OW 94
// SayRadio ( Morozov , 2Moro-11 ) ;
8638: LD_EXP 17
8642: PPUSH
8643: LD_STRING 2Moro-11
8645: PPUSH
8646: CALL_OW 94
// SayRadio ( Morozov , 2Moro-12 ) ;
8650: LD_EXP 17
8654: PPUSH
8655: LD_STRING 2Moro-12
8657: PPUSH
8658: CALL_OW 94
// SayRadio ( Morozov , 2Moro-13 ) ;
8662: LD_EXP 17
8666: PPUSH
8667: LD_STRING 2Moro-13
8669: PPUSH
8670: CALL_OW 94
// SayRadio ( Morozov , 2Moro-14 ) ;
8674: LD_EXP 17
8678: PPUSH
8679: LD_STRING 2Moro-14
8681: PPUSH
8682: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-29 ) ;
8686: LD_EXP 3
8690: PPUSH
8691: LD_STRING 2Yak-29
8693: PPUSH
8694: CALL_OW 94
// end_of_the_mission = true ;
8698: LD_ADDR_EXP 58
8702: PUSH
8703: LD_INT 1
8705: ST_TO_ADDR
// InGameOff ;
8706: CALL_OW 9
// AddMedal ( PeopleConvoys , 1 ) ;
8710: LD_STRING PeopleConvoys
8712: PPUSH
8713: LD_INT 1
8715: PPUSH
8716: CALL_OW 101
// if gun_researched = true then
8720: LD_EXP 50
8724: PUSH
8725: LD_INT 1
8727: EQUAL
8728: IFFALSE 8742
// AddMedal ( GunMedal , 1 ) else
8730: LD_STRING GunMedal
8732: PPUSH
8733: LD_INT 1
8735: PPUSH
8736: CALL_OW 101
8740: GO 8753
// AddMedal ( GunMedal , - 1 ) ;
8742: LD_STRING GunMedal
8744: PPUSH
8745: LD_INT 1
8747: NEG
8748: PPUSH
8749: CALL_OW 101
// if gattling_researched = true and gun_researched = true and transport_builded = true and turrets_researched = true then
8753: LD_EXP 49
8757: PUSH
8758: LD_INT 1
8760: EQUAL
8761: PUSH
8762: LD_EXP 50
8766: PUSH
8767: LD_INT 1
8769: EQUAL
8770: AND
8771: PUSH
8772: LD_EXP 53
8776: PUSH
8777: LD_INT 1
8779: EQUAL
8780: AND
8781: PUSH
8782: LD_EXP 48
8786: PUSH
8787: LD_INT 1
8789: EQUAL
8790: AND
8791: IFFALSE 8805
// AddMedal ( Secondary , 1 ) else
8793: LD_STRING Secondary
8795: PPUSH
8796: LD_INT 1
8798: PPUSH
8799: CALL_OW 101
8803: GO 8816
// AddMedal ( Secondary , - 1 ) ;
8805: LD_STRING Secondary
8807: PPUSH
8808: LD_INT 1
8810: NEG
8811: PPUSH
8812: CALL_OW 101
// GiveMedals ( Medals ) ;
8816: LD_STRING Medals
8818: PPUSH
8819: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
8823: LD_INT 22
8825: PUSH
8826: LD_INT 3
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 23
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 21
8845: PUSH
8846: LD_INT 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: LIST
8857: PPUSH
8858: CALL_OW 69
8862: PPUSH
8863: CALL_OW 43
// SaveCharacters ( Yakotich , 02_Yakotich ) ;
8867: LD_EXP 3
8871: PPUSH
8872: LD_STRING 02_Yakotich
8874: PPUSH
8875: CALL_OW 38
// SaveCharacters ( Mietek , 02_Mietek ) ;
8879: LD_EXP 4
8883: PPUSH
8884: LD_STRING 02_Mietek
8886: PPUSH
8887: CALL_OW 38
// SaveCharacters ( Maksim , 02_Maksim ) ;
8891: LD_EXP 9
8895: PPUSH
8896: LD_STRING 02_Maksim
8898: PPUSH
8899: CALL_OW 38
// SaveCharacters ( Vasilij , 02_Vasilij ) ;
8903: LD_EXP 6
8907: PPUSH
8908: LD_STRING 02_Vasilij
8910: PPUSH
8911: CALL_OW 38
// SaveCharacters ( Michail , 02_Michail ) ;
8915: LD_EXP 7
8919: PPUSH
8920: LD_STRING 02_Michail
8922: PPUSH
8923: CALL_OW 38
// SaveCharacters ( Boris , 02_Boris ) ;
8927: LD_EXP 5
8931: PPUSH
8932: LD_STRING 02_Boris
8934: PPUSH
8935: CALL_OW 38
// SaveCharacters ( Constantin , 02_Constantin ) ;
8939: LD_EXP 8
8943: PPUSH
8944: LD_STRING 02_Constantin
8946: PPUSH
8947: CALL_OW 38
// SaveCharacters ( Fiodor , 02_Fiodor ) ;
8951: LD_EXP 10
8955: PPUSH
8956: LD_STRING 02_Fiodor
8958: PPUSH
8959: CALL_OW 38
// SaveCharacters ( Aleksiej , 02_Aleksiej ) ;
8963: LD_EXP 13
8967: PPUSH
8968: LD_STRING 02_Aleksiej
8970: PPUSH
8971: CALL_OW 38
// SaveCharacters ( Pavel , 02_Pavel ) ;
8975: LD_EXP 11
8979: PPUSH
8980: LD_STRING 02_Pavel
8982: PPUSH
8983: CALL_OW 38
// SaveCharacters ( Zakhar , 02_Zakhar ) ;
8987: LD_EXP 12
8991: PPUSH
8992: LD_STRING 02_Zakhar
8994: PPUSH
8995: CALL_OW 38
// SaveCharacters ( Aleksandr , 02_Aleksandr ) ;
8999: LD_EXP 14
9003: PPUSH
9004: LD_STRING 02_Aleksandr
9006: PPUSH
9007: CALL_OW 38
// SaveCharacters ( Stanislav , 02_Stanislav ) ;
9011: LD_EXP 16
9015: PPUSH
9016: LD_STRING 02_Stanislav
9018: PPUSH
9019: CALL_OW 38
// SaveCharacters ( Josif , 02_Josif ) ;
9023: LD_EXP 15
9027: PPUSH
9028: LD_STRING 02_Josif
9030: PPUSH
9031: CALL_OW 38
// YouWin ;
9035: CALL_OW 103
// end ; end_of_file
9039: PPOPN 1
9041: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export function InitGlobalVariables ; begin
9042: LD_INT 0
9044: PPUSH
// ar_miner := 81 ;
9045: LD_ADDR_EXP 69
9049: PUSH
9050: LD_INT 81
9052: ST_TO_ADDR
// ar_crane := 88 ;
9053: LD_ADDR_EXP 68
9057: PUSH
9058: LD_INT 88
9060: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9061: LD_ADDR_EXP 63
9065: PUSH
9066: LD_INT 89
9068: ST_TO_ADDR
// us_hack := 99 ;
9069: LD_ADDR_EXP 64
9073: PUSH
9074: LD_INT 99
9076: ST_TO_ADDR
// us_artillery := 97 ;
9077: LD_ADDR_EXP 65
9081: PUSH
9082: LD_INT 97
9084: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9085: LD_ADDR_EXP 66
9089: PUSH
9090: LD_INT 91
9092: ST_TO_ADDR
// ar_mortar := 92 ;
9093: LD_ADDR_EXP 67
9097: PUSH
9098: LD_INT 92
9100: ST_TO_ADDR
// ru_flamethrower := 93 ;
9101: LD_ADDR_EXP 70
9105: PUSH
9106: LD_INT 93
9108: ST_TO_ADDR
// ru_radar := 98 ;
9109: LD_ADDR_EXP 62
9113: PUSH
9114: LD_INT 98
9116: ST_TO_ADDR
// tech_Artillery := 80 ;
9117: LD_ADDR_EXP 71
9121: PUSH
9122: LD_INT 80
9124: ST_TO_ADDR
// tech_RadMat := 81 ;
9125: LD_ADDR_EXP 72
9129: PUSH
9130: LD_INT 81
9132: ST_TO_ADDR
// tech_BasicTools := 82 ;
9133: LD_ADDR_EXP 73
9137: PUSH
9138: LD_INT 82
9140: ST_TO_ADDR
// tech_Cargo := 83 ;
9141: LD_ADDR_EXP 74
9145: PUSH
9146: LD_INT 83
9148: ST_TO_ADDR
// tech_Track := 84 ;
9149: LD_ADDR_EXP 75
9153: PUSH
9154: LD_INT 84
9156: ST_TO_ADDR
// tech_Crane := 85 ;
9157: LD_ADDR_EXP 76
9161: PUSH
9162: LD_INT 85
9164: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9165: LD_ADDR_EXP 77
9169: PUSH
9170: LD_INT 86
9172: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9173: LD_ADDR_EXP 78
9177: PUSH
9178: LD_INT 87
9180: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
9181: LD_ADDR_EXP 79
9185: PUSH
9186: LD_INT 88
9188: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
9189: LD_ADDR_EXP 80
9193: PUSH
9194: LD_INT 90
9196: ST_TO_ADDR
// end ; end_of_file
9197: LD_VAR 0 1
9201: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9202: LD_INT 0
9204: PPUSH
9205: PPUSH
// if exist_mode then
9206: LD_VAR 0 2
9210: IFFALSE 9235
// unit := CreateCharacter ( prefix & ident ) else
9212: LD_ADDR_VAR 0 5
9216: PUSH
9217: LD_VAR 0 3
9221: PUSH
9222: LD_VAR 0 1
9226: STR
9227: PPUSH
9228: CALL_OW 34
9232: ST_TO_ADDR
9233: GO 9250
// unit := NewCharacter ( ident ) ;
9235: LD_ADDR_VAR 0 5
9239: PUSH
9240: LD_VAR 0 1
9244: PPUSH
9245: CALL_OW 25
9249: ST_TO_ADDR
// result := unit ;
9250: LD_ADDR_VAR 0 4
9254: PUSH
9255: LD_VAR 0 5
9259: ST_TO_ADDR
// end ;
9260: LD_VAR 0 4
9264: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
// if not side or not nation then
9269: LD_VAR 0 1
9273: NOT
9274: PUSH
9275: LD_VAR 0 2
9279: NOT
9280: OR
9281: IFFALSE 9285
// exit ;
9283: GO 10053
// case nation of nation_american :
9285: LD_VAR 0 2
9289: PUSH
9290: LD_INT 1
9292: DOUBLE
9293: EQUAL
9294: IFTRUE 9298
9296: GO 9512
9298: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9299: LD_ADDR_VAR 0 4
9303: PUSH
9304: LD_INT 35
9306: PUSH
9307: LD_INT 45
9309: PUSH
9310: LD_INT 46
9312: PUSH
9313: LD_INT 47
9315: PUSH
9316: LD_INT 82
9318: PUSH
9319: LD_INT 83
9321: PUSH
9322: LD_INT 84
9324: PUSH
9325: LD_INT 85
9327: PUSH
9328: LD_INT 86
9330: PUSH
9331: LD_INT 1
9333: PUSH
9334: LD_INT 2
9336: PUSH
9337: LD_INT 6
9339: PUSH
9340: LD_INT 15
9342: PUSH
9343: LD_INT 16
9345: PUSH
9346: LD_INT 7
9348: PUSH
9349: LD_INT 12
9351: PUSH
9352: LD_INT 13
9354: PUSH
9355: LD_INT 10
9357: PUSH
9358: LD_INT 14
9360: PUSH
9361: LD_INT 20
9363: PUSH
9364: LD_INT 21
9366: PUSH
9367: LD_INT 22
9369: PUSH
9370: LD_INT 25
9372: PUSH
9373: LD_INT 32
9375: PUSH
9376: LD_INT 27
9378: PUSH
9379: LD_INT 36
9381: PUSH
9382: LD_INT 69
9384: PUSH
9385: LD_INT 39
9387: PUSH
9388: LD_INT 34
9390: PUSH
9391: LD_INT 40
9393: PUSH
9394: LD_INT 48
9396: PUSH
9397: LD_INT 49
9399: PUSH
9400: LD_INT 50
9402: PUSH
9403: LD_INT 51
9405: PUSH
9406: LD_INT 52
9408: PUSH
9409: LD_INT 53
9411: PUSH
9412: LD_INT 54
9414: PUSH
9415: LD_INT 55
9417: PUSH
9418: LD_INT 56
9420: PUSH
9421: LD_INT 57
9423: PUSH
9424: LD_INT 58
9426: PUSH
9427: LD_INT 59
9429: PUSH
9430: LD_INT 60
9432: PUSH
9433: LD_INT 61
9435: PUSH
9436: LD_INT 62
9438: PUSH
9439: LD_INT 80
9441: PUSH
9442: LD_INT 82
9444: PUSH
9445: LD_INT 83
9447: PUSH
9448: LD_INT 84
9450: PUSH
9451: LD_INT 85
9453: PUSH
9454: LD_INT 86
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: ST_TO_ADDR
9510: GO 9977
9512: LD_INT 2
9514: DOUBLE
9515: EQUAL
9516: IFTRUE 9520
9518: GO 9746
9520: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9521: LD_ADDR_VAR 0 4
9525: PUSH
9526: LD_INT 35
9528: PUSH
9529: LD_INT 45
9531: PUSH
9532: LD_INT 46
9534: PUSH
9535: LD_INT 47
9537: PUSH
9538: LD_INT 82
9540: PUSH
9541: LD_INT 83
9543: PUSH
9544: LD_INT 84
9546: PUSH
9547: LD_INT 85
9549: PUSH
9550: LD_INT 87
9552: PUSH
9553: LD_INT 70
9555: PUSH
9556: LD_INT 1
9558: PUSH
9559: LD_INT 11
9561: PUSH
9562: LD_INT 3
9564: PUSH
9565: LD_INT 4
9567: PUSH
9568: LD_INT 5
9570: PUSH
9571: LD_INT 6
9573: PUSH
9574: LD_INT 15
9576: PUSH
9577: LD_INT 18
9579: PUSH
9580: LD_INT 7
9582: PUSH
9583: LD_INT 17
9585: PUSH
9586: LD_INT 8
9588: PUSH
9589: LD_INT 20
9591: PUSH
9592: LD_INT 21
9594: PUSH
9595: LD_INT 22
9597: PUSH
9598: LD_INT 72
9600: PUSH
9601: LD_INT 26
9603: PUSH
9604: LD_INT 69
9606: PUSH
9607: LD_INT 39
9609: PUSH
9610: LD_INT 40
9612: PUSH
9613: LD_INT 41
9615: PUSH
9616: LD_INT 42
9618: PUSH
9619: LD_INT 43
9621: PUSH
9622: LD_INT 48
9624: PUSH
9625: LD_INT 49
9627: PUSH
9628: LD_INT 50
9630: PUSH
9631: LD_INT 51
9633: PUSH
9634: LD_INT 52
9636: PUSH
9637: LD_INT 53
9639: PUSH
9640: LD_INT 54
9642: PUSH
9643: LD_INT 55
9645: PUSH
9646: LD_INT 56
9648: PUSH
9649: LD_INT 60
9651: PUSH
9652: LD_INT 61
9654: PUSH
9655: LD_INT 62
9657: PUSH
9658: LD_INT 66
9660: PUSH
9661: LD_INT 67
9663: PUSH
9664: LD_INT 68
9666: PUSH
9667: LD_INT 81
9669: PUSH
9670: LD_INT 82
9672: PUSH
9673: LD_INT 83
9675: PUSH
9676: LD_INT 84
9678: PUSH
9679: LD_INT 85
9681: PUSH
9682: LD_INT 87
9684: PUSH
9685: LD_INT 88
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: ST_TO_ADDR
9744: GO 9977
9746: LD_INT 3
9748: DOUBLE
9749: EQUAL
9750: IFTRUE 9754
9752: GO 9976
9754: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9755: LD_ADDR_VAR 0 4
9759: PUSH
9760: LD_INT 46
9762: PUSH
9763: LD_INT 47
9765: PUSH
9766: LD_INT 1
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: LD_INT 82
9774: PUSH
9775: LD_INT 83
9777: PUSH
9778: LD_INT 84
9780: PUSH
9781: LD_INT 85
9783: PUSH
9784: LD_INT 86
9786: PUSH
9787: LD_INT 11
9789: PUSH
9790: LD_INT 9
9792: PUSH
9793: LD_INT 20
9795: PUSH
9796: LD_INT 19
9798: PUSH
9799: LD_INT 21
9801: PUSH
9802: LD_INT 24
9804: PUSH
9805: LD_INT 22
9807: PUSH
9808: LD_INT 25
9810: PUSH
9811: LD_INT 28
9813: PUSH
9814: LD_INT 29
9816: PUSH
9817: LD_INT 30
9819: PUSH
9820: LD_INT 31
9822: PUSH
9823: LD_INT 37
9825: PUSH
9826: LD_INT 38
9828: PUSH
9829: LD_INT 32
9831: PUSH
9832: LD_INT 27
9834: PUSH
9835: LD_INT 33
9837: PUSH
9838: LD_INT 69
9840: PUSH
9841: LD_INT 39
9843: PUSH
9844: LD_INT 34
9846: PUSH
9847: LD_INT 40
9849: PUSH
9850: LD_INT 71
9852: PUSH
9853: LD_INT 23
9855: PUSH
9856: LD_INT 44
9858: PUSH
9859: LD_INT 48
9861: PUSH
9862: LD_INT 49
9864: PUSH
9865: LD_INT 50
9867: PUSH
9868: LD_INT 51
9870: PUSH
9871: LD_INT 52
9873: PUSH
9874: LD_INT 53
9876: PUSH
9877: LD_INT 54
9879: PUSH
9880: LD_INT 55
9882: PUSH
9883: LD_INT 56
9885: PUSH
9886: LD_INT 57
9888: PUSH
9889: LD_INT 58
9891: PUSH
9892: LD_INT 59
9894: PUSH
9895: LD_INT 63
9897: PUSH
9898: LD_INT 64
9900: PUSH
9901: LD_INT 65
9903: PUSH
9904: LD_INT 82
9906: PUSH
9907: LD_INT 83
9909: PUSH
9910: LD_INT 84
9912: PUSH
9913: LD_INT 85
9915: PUSH
9916: LD_INT 86
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: ST_TO_ADDR
9974: GO 9977
9976: POP
// if state > - 1 and state < 3 then
9977: LD_VAR 0 3
9981: PUSH
9982: LD_INT 1
9984: NEG
9985: GREATER
9986: PUSH
9987: LD_VAR 0 3
9991: PUSH
9992: LD_INT 3
9994: LESS
9995: AND
9996: IFFALSE 10053
// for i in result do
9998: LD_ADDR_VAR 0 5
10002: PUSH
10003: LD_VAR 0 4
10007: PUSH
10008: FOR_IN
10009: IFFALSE 10051
// if GetTech ( i , side ) <> state then
10011: LD_VAR 0 5
10015: PPUSH
10016: LD_VAR 0 1
10020: PPUSH
10021: CALL_OW 321
10025: PUSH
10026: LD_VAR 0 3
10030: NONEQUAL
10031: IFFALSE 10049
// result := result diff i ;
10033: LD_ADDR_VAR 0 4
10037: PUSH
10038: LD_VAR 0 4
10042: PUSH
10043: LD_VAR 0 5
10047: DIFF
10048: ST_TO_ADDR
10049: GO 10008
10051: POP
10052: POP
// end ;
10053: LD_VAR 0 4
10057: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10058: LD_INT 0
10060: PPUSH
10061: PPUSH
10062: PPUSH
// result := true ;
10063: LD_ADDR_VAR 0 3
10067: PUSH
10068: LD_INT 1
10070: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10071: LD_ADDR_VAR 0 5
10075: PUSH
10076: LD_VAR 0 2
10080: PPUSH
10081: CALL_OW 480
10085: ST_TO_ADDR
// if not tmp then
10086: LD_VAR 0 5
10090: NOT
10091: IFFALSE 10095
// exit ;
10093: GO 10144
// for i in tmp do
10095: LD_ADDR_VAR 0 4
10099: PUSH
10100: LD_VAR 0 5
10104: PUSH
10105: FOR_IN
10106: IFFALSE 10142
// if GetTech ( i , side ) <> state_researched then
10108: LD_VAR 0 4
10112: PPUSH
10113: LD_VAR 0 1
10117: PPUSH
10118: CALL_OW 321
10122: PUSH
10123: LD_INT 2
10125: NONEQUAL
10126: IFFALSE 10140
// begin result := false ;
10128: LD_ADDR_VAR 0 3
10132: PUSH
10133: LD_INT 0
10135: ST_TO_ADDR
// exit ;
10136: POP
10137: POP
10138: GO 10144
// end ;
10140: GO 10105
10142: POP
10143: POP
// end ;
10144: LD_VAR 0 3
10148: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10149: LD_INT 0
10151: PPUSH
10152: PPUSH
10153: PPUSH
10154: PPUSH
10155: PPUSH
10156: PPUSH
10157: PPUSH
10158: PPUSH
10159: PPUSH
10160: PPUSH
10161: PPUSH
10162: PPUSH
10163: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10164: LD_VAR 0 1
10168: NOT
10169: PUSH
10170: LD_VAR 0 1
10174: PPUSH
10175: CALL_OW 257
10179: PUSH
10180: LD_INT 9
10182: NONEQUAL
10183: OR
10184: IFFALSE 10188
// exit ;
10186: GO 10761
// side := GetSide ( unit ) ;
10188: LD_ADDR_VAR 0 9
10192: PUSH
10193: LD_VAR 0 1
10197: PPUSH
10198: CALL_OW 255
10202: ST_TO_ADDR
// tech_space := tech_spacanom ;
10203: LD_ADDR_VAR 0 12
10207: PUSH
10208: LD_INT 29
10210: ST_TO_ADDR
// tech_time := tech_taurad ;
10211: LD_ADDR_VAR 0 13
10215: PUSH
10216: LD_INT 28
10218: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10219: LD_ADDR_VAR 0 11
10223: PUSH
10224: LD_VAR 0 1
10228: PPUSH
10229: CALL_OW 310
10233: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10234: LD_VAR 0 11
10238: PPUSH
10239: CALL_OW 247
10243: PUSH
10244: LD_INT 2
10246: EQUAL
10247: IFFALSE 10251
// exit ;
10249: GO 10761
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10251: LD_ADDR_VAR 0 8
10255: PUSH
10256: LD_INT 81
10258: PUSH
10259: LD_VAR 0 9
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: LD_INT 3
10270: PUSH
10271: LD_INT 21
10273: PUSH
10274: LD_INT 3
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PPUSH
10289: CALL_OW 69
10293: ST_TO_ADDR
// if not tmp then
10294: LD_VAR 0 8
10298: NOT
10299: IFFALSE 10303
// exit ;
10301: GO 10761
// if in_unit then
10303: LD_VAR 0 11
10307: IFFALSE 10331
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10309: LD_ADDR_VAR 0 10
10313: PUSH
10314: LD_VAR 0 8
10318: PPUSH
10319: LD_VAR 0 11
10323: PPUSH
10324: CALL_OW 74
10328: ST_TO_ADDR
10329: GO 10351
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10331: LD_ADDR_VAR 0 10
10335: PUSH
10336: LD_VAR 0 8
10340: PPUSH
10341: LD_VAR 0 1
10345: PPUSH
10346: CALL_OW 74
10350: ST_TO_ADDR
// if not enemy then
10351: LD_VAR 0 10
10355: NOT
10356: IFFALSE 10360
// exit ;
10358: GO 10761
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10360: LD_VAR 0 11
10364: PUSH
10365: LD_VAR 0 11
10369: PPUSH
10370: LD_VAR 0 10
10374: PPUSH
10375: CALL_OW 296
10379: PUSH
10380: LD_INT 13
10382: GREATER
10383: AND
10384: PUSH
10385: LD_VAR 0 1
10389: PPUSH
10390: LD_VAR 0 10
10394: PPUSH
10395: CALL_OW 296
10399: PUSH
10400: LD_INT 12
10402: GREATER
10403: OR
10404: IFFALSE 10408
// exit ;
10406: GO 10761
// missile := [ 1 ] ;
10408: LD_ADDR_VAR 0 14
10412: PUSH
10413: LD_INT 1
10415: PUSH
10416: EMPTY
10417: LIST
10418: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10419: LD_VAR 0 9
10423: PPUSH
10424: LD_VAR 0 12
10428: PPUSH
10429: CALL_OW 325
10433: IFFALSE 10462
// missile := Replace ( missile , missile + 1 , 2 ) ;
10435: LD_ADDR_VAR 0 14
10439: PUSH
10440: LD_VAR 0 14
10444: PPUSH
10445: LD_VAR 0 14
10449: PUSH
10450: LD_INT 1
10452: PLUS
10453: PPUSH
10454: LD_INT 2
10456: PPUSH
10457: CALL_OW 1
10461: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10462: LD_VAR 0 9
10466: PPUSH
10467: LD_VAR 0 13
10471: PPUSH
10472: CALL_OW 325
10476: PUSH
10477: LD_VAR 0 10
10481: PPUSH
10482: CALL_OW 255
10486: PPUSH
10487: LD_VAR 0 13
10491: PPUSH
10492: CALL_OW 325
10496: NOT
10497: AND
10498: IFFALSE 10527
// missile := Replace ( missile , missile + 1 , 3 ) ;
10500: LD_ADDR_VAR 0 14
10504: PUSH
10505: LD_VAR 0 14
10509: PPUSH
10510: LD_VAR 0 14
10514: PUSH
10515: LD_INT 1
10517: PLUS
10518: PPUSH
10519: LD_INT 3
10521: PPUSH
10522: CALL_OW 1
10526: ST_TO_ADDR
// if missile < 2 then
10527: LD_VAR 0 14
10531: PUSH
10532: LD_INT 2
10534: LESS
10535: IFFALSE 10539
// exit ;
10537: GO 10761
// x := GetX ( enemy ) ;
10539: LD_ADDR_VAR 0 4
10543: PUSH
10544: LD_VAR 0 10
10548: PPUSH
10549: CALL_OW 250
10553: ST_TO_ADDR
// y := GetY ( enemy ) ;
10554: LD_ADDR_VAR 0 5
10558: PUSH
10559: LD_VAR 0 10
10563: PPUSH
10564: CALL_OW 251
10568: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10569: LD_ADDR_VAR 0 6
10573: PUSH
10574: LD_VAR 0 4
10578: PUSH
10579: LD_INT 1
10581: NEG
10582: PPUSH
10583: LD_INT 1
10585: PPUSH
10586: CALL_OW 12
10590: PLUS
10591: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10592: LD_ADDR_VAR 0 7
10596: PUSH
10597: LD_VAR 0 5
10601: PUSH
10602: LD_INT 1
10604: NEG
10605: PPUSH
10606: LD_INT 1
10608: PPUSH
10609: CALL_OW 12
10613: PLUS
10614: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10615: LD_VAR 0 6
10619: PPUSH
10620: LD_VAR 0 7
10624: PPUSH
10625: CALL_OW 488
10629: NOT
10630: IFFALSE 10652
// begin _x := x ;
10632: LD_ADDR_VAR 0 6
10636: PUSH
10637: LD_VAR 0 4
10641: ST_TO_ADDR
// _y := y ;
10642: LD_ADDR_VAR 0 7
10646: PUSH
10647: LD_VAR 0 5
10651: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10652: LD_ADDR_VAR 0 3
10656: PUSH
10657: LD_INT 1
10659: PPUSH
10660: LD_VAR 0 14
10664: PPUSH
10665: CALL_OW 12
10669: ST_TO_ADDR
// case i of 1 :
10670: LD_VAR 0 3
10674: PUSH
10675: LD_INT 1
10677: DOUBLE
10678: EQUAL
10679: IFTRUE 10683
10681: GO 10700
10683: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10684: LD_VAR 0 1
10688: PPUSH
10689: LD_VAR 0 10
10693: PPUSH
10694: CALL_OW 115
10698: GO 10761
10700: LD_INT 2
10702: DOUBLE
10703: EQUAL
10704: IFTRUE 10708
10706: GO 10730
10708: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10709: LD_VAR 0 1
10713: PPUSH
10714: LD_VAR 0 6
10718: PPUSH
10719: LD_VAR 0 7
10723: PPUSH
10724: CALL_OW 153
10728: GO 10761
10730: LD_INT 3
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10760
10738: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10739: LD_VAR 0 1
10743: PPUSH
10744: LD_VAR 0 6
10748: PPUSH
10749: LD_VAR 0 7
10753: PPUSH
10754: CALL_OW 154
10758: GO 10761
10760: POP
// end ;
10761: LD_VAR 0 2
10765: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10766: LD_INT 0
10768: PPUSH
10769: PPUSH
10770: PPUSH
10771: PPUSH
10772: PPUSH
10773: PPUSH
// if not unit or not building then
10774: LD_VAR 0 1
10778: NOT
10779: PUSH
10780: LD_VAR 0 2
10784: NOT
10785: OR
10786: IFFALSE 10790
// exit ;
10788: GO 10948
// x := GetX ( building ) ;
10790: LD_ADDR_VAR 0 5
10794: PUSH
10795: LD_VAR 0 2
10799: PPUSH
10800: CALL_OW 250
10804: ST_TO_ADDR
// y := GetY ( building ) ;
10805: LD_ADDR_VAR 0 6
10809: PUSH
10810: LD_VAR 0 2
10814: PPUSH
10815: CALL_OW 251
10819: ST_TO_ADDR
// for i = 0 to 5 do
10820: LD_ADDR_VAR 0 4
10824: PUSH
10825: DOUBLE
10826: LD_INT 0
10828: DEC
10829: ST_TO_ADDR
10830: LD_INT 5
10832: PUSH
10833: FOR_TO
10834: IFFALSE 10946
// begin _x := ShiftX ( x , i , 3 ) ;
10836: LD_ADDR_VAR 0 7
10840: PUSH
10841: LD_VAR 0 5
10845: PPUSH
10846: LD_VAR 0 4
10850: PPUSH
10851: LD_INT 3
10853: PPUSH
10854: CALL_OW 272
10858: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10859: LD_ADDR_VAR 0 8
10863: PUSH
10864: LD_VAR 0 6
10868: PPUSH
10869: LD_VAR 0 4
10873: PPUSH
10874: LD_INT 3
10876: PPUSH
10877: CALL_OW 273
10881: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10882: LD_VAR 0 7
10886: PPUSH
10887: LD_VAR 0 8
10891: PPUSH
10892: CALL_OW 488
10896: NOT
10897: IFFALSE 10901
// continue ;
10899: GO 10833
// if HexInfo ( _x , _y ) = 0 then
10901: LD_VAR 0 7
10905: PPUSH
10906: LD_VAR 0 8
10910: PPUSH
10911: CALL_OW 428
10915: PUSH
10916: LD_INT 0
10918: EQUAL
10919: IFFALSE 10944
// begin ComMoveXY ( unit , _x , _y ) ;
10921: LD_VAR 0 1
10925: PPUSH
10926: LD_VAR 0 7
10930: PPUSH
10931: LD_VAR 0 8
10935: PPUSH
10936: CALL_OW 111
// exit ;
10940: POP
10941: POP
10942: GO 10948
// end ; end ;
10944: GO 10833
10946: POP
10947: POP
// end ;
10948: LD_VAR 0 3
10952: RET
// export function ScanBase ( side , base_area ) ; begin
10953: LD_INT 0
10955: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10956: LD_ADDR_VAR 0 3
10960: PUSH
10961: LD_VAR 0 2
10965: PPUSH
10966: LD_INT 81
10968: PUSH
10969: LD_VAR 0 1
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PPUSH
10978: CALL_OW 70
10982: ST_TO_ADDR
// end ;
10983: LD_VAR 0 3
10987: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10988: LD_INT 0
10990: PPUSH
10991: PPUSH
10992: PPUSH
10993: PPUSH
// result := false ;
10994: LD_ADDR_VAR 0 2
10998: PUSH
10999: LD_INT 0
11001: ST_TO_ADDR
// side := GetSide ( unit ) ;
11002: LD_ADDR_VAR 0 3
11006: PUSH
11007: LD_VAR 0 1
11011: PPUSH
11012: CALL_OW 255
11016: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11017: LD_ADDR_VAR 0 4
11021: PUSH
11022: LD_VAR 0 1
11026: PPUSH
11027: CALL_OW 248
11031: ST_TO_ADDR
// case nat of 1 :
11032: LD_VAR 0 4
11036: PUSH
11037: LD_INT 1
11039: DOUBLE
11040: EQUAL
11041: IFTRUE 11045
11043: GO 11056
11045: POP
// tech := tech_lassight ; 2 :
11046: LD_ADDR_VAR 0 5
11050: PUSH
11051: LD_INT 12
11053: ST_TO_ADDR
11054: GO 11095
11056: LD_INT 2
11058: DOUBLE
11059: EQUAL
11060: IFTRUE 11064
11062: GO 11075
11064: POP
// tech := tech_mortar ; 3 :
11065: LD_ADDR_VAR 0 5
11069: PUSH
11070: LD_INT 41
11072: ST_TO_ADDR
11073: GO 11095
11075: LD_INT 3
11077: DOUBLE
11078: EQUAL
11079: IFTRUE 11083
11081: GO 11094
11083: POP
// tech := tech_bazooka ; end ;
11084: LD_ADDR_VAR 0 5
11088: PUSH
11089: LD_INT 44
11091: ST_TO_ADDR
11092: GO 11095
11094: POP
// if Researched ( side , tech ) then
11095: LD_VAR 0 3
11099: PPUSH
11100: LD_VAR 0 5
11104: PPUSH
11105: CALL_OW 325
11109: IFFALSE 11136
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11111: LD_ADDR_VAR 0 2
11115: PUSH
11116: LD_INT 5
11118: PUSH
11119: LD_INT 8
11121: PUSH
11122: LD_INT 9
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: LIST
11129: PUSH
11130: LD_VAR 0 4
11134: ARRAY
11135: ST_TO_ADDR
// end ;
11136: LD_VAR 0 2
11140: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11141: LD_INT 0
11143: PPUSH
11144: PPUSH
11145: PPUSH
// if not mines then
11146: LD_VAR 0 2
11150: NOT
11151: IFFALSE 11155
// exit ;
11153: GO 11299
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11155: LD_ADDR_VAR 0 5
11159: PUSH
11160: LD_INT 81
11162: PUSH
11163: LD_VAR 0 1
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: PUSH
11172: LD_INT 3
11174: PUSH
11175: LD_INT 21
11177: PUSH
11178: LD_INT 3
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PPUSH
11193: CALL_OW 69
11197: ST_TO_ADDR
// for i in mines do
11198: LD_ADDR_VAR 0 4
11202: PUSH
11203: LD_VAR 0 2
11207: PUSH
11208: FOR_IN
11209: IFFALSE 11297
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11211: LD_VAR 0 4
11215: PUSH
11216: LD_INT 1
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 4
11224: PUSH
11225: LD_INT 2
11227: ARRAY
11228: PPUSH
11229: CALL_OW 458
11233: NOT
11234: IFFALSE 11238
// continue ;
11236: GO 11208
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11238: LD_VAR 0 4
11242: PUSH
11243: LD_INT 1
11245: ARRAY
11246: PPUSH
11247: LD_VAR 0 4
11251: PUSH
11252: LD_INT 2
11254: ARRAY
11255: PPUSH
11256: CALL_OW 428
11260: PUSH
11261: LD_VAR 0 5
11265: IN
11266: IFFALSE 11295
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11268: LD_VAR 0 4
11272: PUSH
11273: LD_INT 1
11275: ARRAY
11276: PPUSH
11277: LD_VAR 0 4
11281: PUSH
11282: LD_INT 2
11284: ARRAY
11285: PPUSH
11286: LD_VAR 0 1
11290: PPUSH
11291: CALL_OW 456
// end ;
11295: GO 11208
11297: POP
11298: POP
// end ;
11299: LD_VAR 0 3
11303: RET
// export function Count ( array ) ; var i ; begin
11304: LD_INT 0
11306: PPUSH
11307: PPUSH
// result := 0 ;
11308: LD_ADDR_VAR 0 2
11312: PUSH
11313: LD_INT 0
11315: ST_TO_ADDR
// for i in array do
11316: LD_ADDR_VAR 0 3
11320: PUSH
11321: LD_VAR 0 1
11325: PUSH
11326: FOR_IN
11327: IFFALSE 11351
// if i then
11329: LD_VAR 0 3
11333: IFFALSE 11349
// result := result + 1 ;
11335: LD_ADDR_VAR 0 2
11339: PUSH
11340: LD_VAR 0 2
11344: PUSH
11345: LD_INT 1
11347: PLUS
11348: ST_TO_ADDR
11349: GO 11326
11351: POP
11352: POP
// end ;
11353: LD_VAR 0 2
11357: RET
// export function IsEmpty ( building ) ; begin
11358: LD_INT 0
11360: PPUSH
// if not building then
11361: LD_VAR 0 1
11365: NOT
11366: IFFALSE 11370
// exit ;
11368: GO 11413
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11370: LD_ADDR_VAR 0 2
11374: PUSH
11375: LD_VAR 0 1
11379: PUSH
11380: LD_INT 22
11382: PUSH
11383: LD_VAR 0 1
11387: PPUSH
11388: CALL_OW 255
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 58
11399: PUSH
11400: EMPTY
11401: LIST
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PPUSH
11407: CALL_OW 69
11411: IN
11412: ST_TO_ADDR
// end ;
11413: LD_VAR 0 2
11417: RET
// export function IsNotFull ( building ) ; var places ; begin
11418: LD_INT 0
11420: PPUSH
11421: PPUSH
// if not building then
11422: LD_VAR 0 1
11426: NOT
11427: IFFALSE 11431
// exit ;
11429: GO 11602
// result := false ;
11431: LD_ADDR_VAR 0 2
11435: PUSH
11436: LD_INT 0
11438: ST_TO_ADDR
// places := 0 ;
11439: LD_ADDR_VAR 0 3
11443: PUSH
11444: LD_INT 0
11446: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
11447: LD_VAR 0 1
11451: PPUSH
11452: CALL_OW 266
11456: PUSH
11457: LD_INT 0
11459: DOUBLE
11460: EQUAL
11461: IFTRUE 11519
11463: LD_INT 1
11465: DOUBLE
11466: EQUAL
11467: IFTRUE 11519
11469: LD_INT 6
11471: DOUBLE
11472: EQUAL
11473: IFTRUE 11519
11475: LD_INT 7
11477: DOUBLE
11478: EQUAL
11479: IFTRUE 11519
11481: LD_INT 8
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11519
11487: LD_INT 4
11489: DOUBLE
11490: EQUAL
11491: IFTRUE 11519
11493: LD_INT 5
11495: DOUBLE
11496: EQUAL
11497: IFTRUE 11519
11499: LD_INT 2
11501: DOUBLE
11502: EQUAL
11503: IFTRUE 11519
11505: LD_INT 3
11507: DOUBLE
11508: EQUAL
11509: IFTRUE 11519
11511: LD_INT 35
11513: DOUBLE
11514: EQUAL
11515: IFTRUE 11519
11517: GO 11530
11519: POP
// places := 6 ; b_bunker , b_breastwork :
11520: LD_ADDR_VAR 0 3
11524: PUSH
11525: LD_INT 6
11527: ST_TO_ADDR
11528: GO 11575
11530: LD_INT 32
11532: DOUBLE
11533: EQUAL
11534: IFTRUE 11544
11536: LD_INT 31
11538: DOUBLE
11539: EQUAL
11540: IFTRUE 11544
11542: GO 11555
11544: POP
// places := 1 ; b_control_tower :
11545: LD_ADDR_VAR 0 3
11549: PUSH
11550: LD_INT 1
11552: ST_TO_ADDR
11553: GO 11575
11555: LD_INT 36
11557: DOUBLE
11558: EQUAL
11559: IFTRUE 11563
11561: GO 11574
11563: POP
// places := 3 ; end ;
11564: LD_ADDR_VAR 0 3
11568: PUSH
11569: LD_INT 3
11571: ST_TO_ADDR
11572: GO 11575
11574: POP
// if places then
11575: LD_VAR 0 3
11579: IFFALSE 11602
// result := UnitsInside ( building ) < places ;
11581: LD_ADDR_VAR 0 2
11585: PUSH
11586: LD_VAR 0 1
11590: PPUSH
11591: CALL_OW 313
11595: PUSH
11596: LD_VAR 0 3
11600: LESS
11601: ST_TO_ADDR
// end ;
11602: LD_VAR 0 2
11606: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11607: LD_INT 0
11609: PPUSH
11610: PPUSH
11611: PPUSH
11612: PPUSH
// tmp := [ ] ;
11613: LD_ADDR_VAR 0 3
11617: PUSH
11618: EMPTY
11619: ST_TO_ADDR
// list := [ ] ;
11620: LD_ADDR_VAR 0 5
11624: PUSH
11625: EMPTY
11626: ST_TO_ADDR
// for i = 16 to 25 do
11627: LD_ADDR_VAR 0 4
11631: PUSH
11632: DOUBLE
11633: LD_INT 16
11635: DEC
11636: ST_TO_ADDR
11637: LD_INT 25
11639: PUSH
11640: FOR_TO
11641: IFFALSE 11714
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11643: LD_ADDR_VAR 0 3
11647: PUSH
11648: LD_VAR 0 3
11652: PUSH
11653: LD_INT 22
11655: PUSH
11656: LD_VAR 0 1
11660: PPUSH
11661: CALL_OW 255
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 91
11672: PUSH
11673: LD_VAR 0 1
11677: PUSH
11678: LD_INT 6
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: PUSH
11686: LD_INT 30
11688: PUSH
11689: LD_VAR 0 4
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: LIST
11702: PUSH
11703: EMPTY
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: ADD
11711: ST_TO_ADDR
11712: GO 11640
11714: POP
11715: POP
// for i = 1 to tmp do
11716: LD_ADDR_VAR 0 4
11720: PUSH
11721: DOUBLE
11722: LD_INT 1
11724: DEC
11725: ST_TO_ADDR
11726: LD_VAR 0 3
11730: PUSH
11731: FOR_TO
11732: IFFALSE 11820
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11734: LD_ADDR_VAR 0 5
11738: PUSH
11739: LD_VAR 0 5
11743: PUSH
11744: LD_VAR 0 3
11748: PUSH
11749: LD_VAR 0 4
11753: ARRAY
11754: PPUSH
11755: CALL_OW 266
11759: PUSH
11760: LD_VAR 0 3
11764: PUSH
11765: LD_VAR 0 4
11769: ARRAY
11770: PPUSH
11771: CALL_OW 250
11775: PUSH
11776: LD_VAR 0 3
11780: PUSH
11781: LD_VAR 0 4
11785: ARRAY
11786: PPUSH
11787: CALL_OW 251
11791: PUSH
11792: LD_VAR 0 3
11796: PUSH
11797: LD_VAR 0 4
11801: ARRAY
11802: PPUSH
11803: CALL_OW 254
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: PUSH
11814: EMPTY
11815: LIST
11816: ADD
11817: ST_TO_ADDR
11818: GO 11731
11820: POP
11821: POP
// result := list ;
11822: LD_ADDR_VAR 0 2
11826: PUSH
11827: LD_VAR 0 5
11831: ST_TO_ADDR
// end ;
11832: LD_VAR 0 2
11836: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11837: LD_INT 0
11839: PPUSH
11840: PPUSH
11841: PPUSH
11842: PPUSH
11843: PPUSH
11844: PPUSH
11845: PPUSH
// if not factory then
11846: LD_VAR 0 1
11850: NOT
11851: IFFALSE 11855
// exit ;
11853: GO 12448
// if control = control_apeman then
11855: LD_VAR 0 4
11859: PUSH
11860: LD_INT 5
11862: EQUAL
11863: IFFALSE 11972
// begin tmp := UnitsInside ( factory ) ;
11865: LD_ADDR_VAR 0 8
11869: PUSH
11870: LD_VAR 0 1
11874: PPUSH
11875: CALL_OW 313
11879: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11880: LD_VAR 0 8
11884: PPUSH
11885: LD_INT 25
11887: PUSH
11888: LD_INT 12
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PPUSH
11895: CALL_OW 72
11899: NOT
11900: IFFALSE 11910
// control := control_manual ;
11902: LD_ADDR_VAR 0 4
11906: PUSH
11907: LD_INT 1
11909: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11910: LD_ADDR_VAR 0 8
11914: PUSH
11915: LD_VAR 0 1
11919: PPUSH
11920: CALL 11607 0 1
11924: ST_TO_ADDR
// if tmp then
11925: LD_VAR 0 8
11929: IFFALSE 11972
// begin for i in tmp do
11931: LD_ADDR_VAR 0 7
11935: PUSH
11936: LD_VAR 0 8
11940: PUSH
11941: FOR_IN
11942: IFFALSE 11970
// if i [ 1 ] = b_ext_radio then
11944: LD_VAR 0 7
11948: PUSH
11949: LD_INT 1
11951: ARRAY
11952: PUSH
11953: LD_INT 22
11955: EQUAL
11956: IFFALSE 11968
// begin control := control_remote ;
11958: LD_ADDR_VAR 0 4
11962: PUSH
11963: LD_INT 2
11965: ST_TO_ADDR
// break ;
11966: GO 11970
// end ;
11968: GO 11941
11970: POP
11971: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11972: LD_VAR 0 1
11976: PPUSH
11977: LD_VAR 0 2
11981: PPUSH
11982: LD_VAR 0 3
11986: PPUSH
11987: LD_VAR 0 4
11991: PPUSH
11992: LD_VAR 0 5
11996: PPUSH
11997: CALL_OW 448
12001: IFFALSE 12036
// begin result := [ chassis , engine , control , weapon ] ;
12003: LD_ADDR_VAR 0 6
12007: PUSH
12008: LD_VAR 0 2
12012: PUSH
12013: LD_VAR 0 3
12017: PUSH
12018: LD_VAR 0 4
12022: PUSH
12023: LD_VAR 0 5
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: ST_TO_ADDR
// exit ;
12034: GO 12448
// end ; _chassis := AvailableChassisList ( factory ) ;
12036: LD_ADDR_VAR 0 9
12040: PUSH
12041: LD_VAR 0 1
12045: PPUSH
12046: CALL_OW 475
12050: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12051: LD_ADDR_VAR 0 11
12055: PUSH
12056: LD_VAR 0 1
12060: PPUSH
12061: CALL_OW 476
12065: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12066: LD_ADDR_VAR 0 12
12070: PUSH
12071: LD_VAR 0 1
12075: PPUSH
12076: CALL_OW 477
12080: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12081: LD_ADDR_VAR 0 10
12085: PUSH
12086: LD_VAR 0 1
12090: PPUSH
12091: CALL_OW 478
12095: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12096: LD_VAR 0 9
12100: NOT
12101: PUSH
12102: LD_VAR 0 11
12106: NOT
12107: OR
12108: PUSH
12109: LD_VAR 0 12
12113: NOT
12114: OR
12115: PUSH
12116: LD_VAR 0 10
12120: NOT
12121: OR
12122: IFFALSE 12157
// begin result := [ chassis , engine , control , weapon ] ;
12124: LD_ADDR_VAR 0 6
12128: PUSH
12129: LD_VAR 0 2
12133: PUSH
12134: LD_VAR 0 3
12138: PUSH
12139: LD_VAR 0 4
12143: PUSH
12144: LD_VAR 0 5
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: ST_TO_ADDR
// exit ;
12155: GO 12448
// end ; if not chassis in _chassis then
12157: LD_VAR 0 2
12161: PUSH
12162: LD_VAR 0 9
12166: IN
12167: NOT
12168: IFFALSE 12194
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12170: LD_ADDR_VAR 0 2
12174: PUSH
12175: LD_VAR 0 9
12179: PUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_VAR 0 9
12187: PPUSH
12188: CALL_OW 12
12192: ARRAY
12193: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12194: LD_VAR 0 2
12198: PPUSH
12199: LD_VAR 0 3
12203: PPUSH
12204: CALL 12453 0 2
12208: NOT
12209: IFFALSE 12268
// repeat engine := _engine [ 1 ] ;
12211: LD_ADDR_VAR 0 3
12215: PUSH
12216: LD_VAR 0 11
12220: PUSH
12221: LD_INT 1
12223: ARRAY
12224: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12225: LD_ADDR_VAR 0 11
12229: PUSH
12230: LD_VAR 0 11
12234: PPUSH
12235: LD_INT 1
12237: PPUSH
12238: CALL_OW 3
12242: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12243: LD_VAR 0 2
12247: PPUSH
12248: LD_VAR 0 3
12252: PPUSH
12253: CALL 12453 0 2
12257: PUSH
12258: LD_VAR 0 11
12262: PUSH
12263: EMPTY
12264: EQUAL
12265: OR
12266: IFFALSE 12211
// if not control in _control then
12268: LD_VAR 0 4
12272: PUSH
12273: LD_VAR 0 12
12277: IN
12278: NOT
12279: IFFALSE 12305
// control := _control [ rand ( 1 , _control ) ] ;
12281: LD_ADDR_VAR 0 4
12285: PUSH
12286: LD_VAR 0 12
12290: PUSH
12291: LD_INT 1
12293: PPUSH
12294: LD_VAR 0 12
12298: PPUSH
12299: CALL_OW 12
12303: ARRAY
12304: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12305: LD_VAR 0 2
12309: PPUSH
12310: LD_VAR 0 5
12314: PPUSH
12315: CALL 12673 0 2
12319: NOT
12320: IFFALSE 12379
// repeat weapon := _weapon [ 1 ] ;
12322: LD_ADDR_VAR 0 5
12326: PUSH
12327: LD_VAR 0 10
12331: PUSH
12332: LD_INT 1
12334: ARRAY
12335: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12336: LD_ADDR_VAR 0 10
12340: PUSH
12341: LD_VAR 0 10
12345: PPUSH
12346: LD_INT 1
12348: PPUSH
12349: CALL_OW 3
12353: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12354: LD_VAR 0 2
12358: PPUSH
12359: LD_VAR 0 5
12363: PPUSH
12364: CALL 12673 0 2
12368: PUSH
12369: LD_VAR 0 10
12373: PUSH
12374: EMPTY
12375: EQUAL
12376: OR
12377: IFFALSE 12322
// result := [ ] ;
12379: LD_ADDR_VAR 0 6
12383: PUSH
12384: EMPTY
12385: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12386: LD_VAR 0 1
12390: PPUSH
12391: LD_VAR 0 2
12395: PPUSH
12396: LD_VAR 0 3
12400: PPUSH
12401: LD_VAR 0 4
12405: PPUSH
12406: LD_VAR 0 5
12410: PPUSH
12411: CALL_OW 448
12415: IFFALSE 12448
// result := [ chassis , engine , control , weapon ] ;
12417: LD_ADDR_VAR 0 6
12421: PUSH
12422: LD_VAR 0 2
12426: PUSH
12427: LD_VAR 0 3
12431: PUSH
12432: LD_VAR 0 4
12436: PUSH
12437: LD_VAR 0 5
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: ST_TO_ADDR
// end ;
12448: LD_VAR 0 6
12452: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12453: LD_INT 0
12455: PPUSH
// if not chassis or not engine then
12456: LD_VAR 0 1
12460: NOT
12461: PUSH
12462: LD_VAR 0 2
12466: NOT
12467: OR
12468: IFFALSE 12472
// exit ;
12470: GO 12668
// case engine of engine_solar :
12472: LD_VAR 0 2
12476: PUSH
12477: LD_INT 2
12479: DOUBLE
12480: EQUAL
12481: IFTRUE 12485
12483: GO 12523
12485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12486: LD_ADDR_VAR 0 3
12490: PUSH
12491: LD_INT 11
12493: PUSH
12494: LD_INT 12
12496: PUSH
12497: LD_INT 13
12499: PUSH
12500: LD_INT 14
12502: PUSH
12503: LD_INT 1
12505: PUSH
12506: LD_INT 2
12508: PUSH
12509: LD_INT 3
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: ST_TO_ADDR
12521: GO 12652
12523: LD_INT 1
12525: DOUBLE
12526: EQUAL
12527: IFTRUE 12531
12529: GO 12593
12531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12532: LD_ADDR_VAR 0 3
12536: PUSH
12537: LD_INT 11
12539: PUSH
12540: LD_INT 12
12542: PUSH
12543: LD_INT 13
12545: PUSH
12546: LD_INT 14
12548: PUSH
12549: LD_INT 1
12551: PUSH
12552: LD_INT 2
12554: PUSH
12555: LD_INT 3
12557: PUSH
12558: LD_INT 4
12560: PUSH
12561: LD_INT 5
12563: PUSH
12564: LD_INT 21
12566: PUSH
12567: LD_INT 23
12569: PUSH
12570: LD_INT 22
12572: PUSH
12573: LD_INT 24
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: ST_TO_ADDR
12591: GO 12652
12593: LD_INT 3
12595: DOUBLE
12596: EQUAL
12597: IFTRUE 12601
12599: GO 12651
12601: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12602: LD_ADDR_VAR 0 3
12606: PUSH
12607: LD_INT 13
12609: PUSH
12610: LD_INT 14
12612: PUSH
12613: LD_INT 2
12615: PUSH
12616: LD_INT 3
12618: PUSH
12619: LD_INT 4
12621: PUSH
12622: LD_INT 5
12624: PUSH
12625: LD_INT 21
12627: PUSH
12628: LD_INT 22
12630: PUSH
12631: LD_INT 23
12633: PUSH
12634: LD_INT 24
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: ST_TO_ADDR
12649: GO 12652
12651: POP
// result := ( chassis in result ) ;
12652: LD_ADDR_VAR 0 3
12656: PUSH
12657: LD_VAR 0 1
12661: PUSH
12662: LD_VAR 0 3
12666: IN
12667: ST_TO_ADDR
// end ;
12668: LD_VAR 0 3
12672: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12673: LD_INT 0
12675: PPUSH
// if not chassis or not weapon then
12676: LD_VAR 0 1
12680: NOT
12681: PUSH
12682: LD_VAR 0 2
12686: NOT
12687: OR
12688: IFFALSE 12692
// exit ;
12690: GO 13754
// case weapon of us_machine_gun :
12692: LD_VAR 0 2
12696: PUSH
12697: LD_INT 2
12699: DOUBLE
12700: EQUAL
12701: IFTRUE 12705
12703: GO 12735
12705: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12706: LD_ADDR_VAR 0 3
12710: PUSH
12711: LD_INT 1
12713: PUSH
12714: LD_INT 2
12716: PUSH
12717: LD_INT 3
12719: PUSH
12720: LD_INT 4
12722: PUSH
12723: LD_INT 5
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: ST_TO_ADDR
12733: GO 13738
12735: LD_INT 3
12737: DOUBLE
12738: EQUAL
12739: IFTRUE 12743
12741: GO 12773
12743: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12744: LD_ADDR_VAR 0 3
12748: PUSH
12749: LD_INT 1
12751: PUSH
12752: LD_INT 2
12754: PUSH
12755: LD_INT 3
12757: PUSH
12758: LD_INT 4
12760: PUSH
12761: LD_INT 5
12763: PUSH
12764: EMPTY
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: ST_TO_ADDR
12771: GO 13738
12773: LD_INT 11
12775: DOUBLE
12776: EQUAL
12777: IFTRUE 12781
12779: GO 12811
12781: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12782: LD_ADDR_VAR 0 3
12786: PUSH
12787: LD_INT 1
12789: PUSH
12790: LD_INT 2
12792: PUSH
12793: LD_INT 3
12795: PUSH
12796: LD_INT 4
12798: PUSH
12799: LD_INT 5
12801: PUSH
12802: EMPTY
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: ST_TO_ADDR
12809: GO 13738
12811: LD_INT 4
12813: DOUBLE
12814: EQUAL
12815: IFTRUE 12819
12817: GO 12845
12819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12820: LD_ADDR_VAR 0 3
12824: PUSH
12825: LD_INT 2
12827: PUSH
12828: LD_INT 3
12830: PUSH
12831: LD_INT 4
12833: PUSH
12834: LD_INT 5
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: ST_TO_ADDR
12843: GO 13738
12845: LD_INT 5
12847: DOUBLE
12848: EQUAL
12849: IFTRUE 12853
12851: GO 12879
12853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12854: LD_ADDR_VAR 0 3
12858: PUSH
12859: LD_INT 2
12861: PUSH
12862: LD_INT 3
12864: PUSH
12865: LD_INT 4
12867: PUSH
12868: LD_INT 5
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: ST_TO_ADDR
12877: GO 13738
12879: LD_INT 9
12881: DOUBLE
12882: EQUAL
12883: IFTRUE 12887
12885: GO 12913
12887: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12888: LD_ADDR_VAR 0 3
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: LD_INT 3
12898: PUSH
12899: LD_INT 4
12901: PUSH
12902: LD_INT 5
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: ST_TO_ADDR
12911: GO 13738
12913: LD_INT 7
12915: DOUBLE
12916: EQUAL
12917: IFTRUE 12921
12919: GO 12947
12921: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12922: LD_ADDR_VAR 0 3
12926: PUSH
12927: LD_INT 2
12929: PUSH
12930: LD_INT 3
12932: PUSH
12933: LD_INT 4
12935: PUSH
12936: LD_INT 5
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: ST_TO_ADDR
12945: GO 13738
12947: LD_INT 12
12949: DOUBLE
12950: EQUAL
12951: IFTRUE 12955
12953: GO 12981
12955: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12956: LD_ADDR_VAR 0 3
12960: PUSH
12961: LD_INT 2
12963: PUSH
12964: LD_INT 3
12966: PUSH
12967: LD_INT 4
12969: PUSH
12970: LD_INT 5
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: ST_TO_ADDR
12979: GO 13738
12981: LD_INT 13
12983: DOUBLE
12984: EQUAL
12985: IFTRUE 12989
12987: GO 13015
12989: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12990: LD_ADDR_VAR 0 3
12994: PUSH
12995: LD_INT 2
12997: PUSH
12998: LD_INT 3
13000: PUSH
13001: LD_INT 4
13003: PUSH
13004: LD_INT 5
13006: PUSH
13007: EMPTY
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: ST_TO_ADDR
13013: GO 13738
13015: LD_INT 14
13017: DOUBLE
13018: EQUAL
13019: IFTRUE 13023
13021: GO 13041
13023: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13024: LD_ADDR_VAR 0 3
13028: PUSH
13029: LD_INT 4
13031: PUSH
13032: LD_INT 5
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: ST_TO_ADDR
13039: GO 13738
13041: LD_INT 6
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13067
13049: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13050: LD_ADDR_VAR 0 3
13054: PUSH
13055: LD_INT 4
13057: PUSH
13058: LD_INT 5
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: ST_TO_ADDR
13065: GO 13738
13067: LD_INT 10
13069: DOUBLE
13070: EQUAL
13071: IFTRUE 13075
13073: GO 13093
13075: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13076: LD_ADDR_VAR 0 3
13080: PUSH
13081: LD_INT 4
13083: PUSH
13084: LD_INT 5
13086: PUSH
13087: EMPTY
13088: LIST
13089: LIST
13090: ST_TO_ADDR
13091: GO 13738
13093: LD_INT 22
13095: DOUBLE
13096: EQUAL
13097: IFTRUE 13101
13099: GO 13127
13101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13102: LD_ADDR_VAR 0 3
13106: PUSH
13107: LD_INT 11
13109: PUSH
13110: LD_INT 12
13112: PUSH
13113: LD_INT 13
13115: PUSH
13116: LD_INT 14
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: ST_TO_ADDR
13125: GO 13738
13127: LD_INT 23
13129: DOUBLE
13130: EQUAL
13131: IFTRUE 13135
13133: GO 13161
13135: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13136: LD_ADDR_VAR 0 3
13140: PUSH
13141: LD_INT 11
13143: PUSH
13144: LD_INT 12
13146: PUSH
13147: LD_INT 13
13149: PUSH
13150: LD_INT 14
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: ST_TO_ADDR
13159: GO 13738
13161: LD_INT 24
13163: DOUBLE
13164: EQUAL
13165: IFTRUE 13169
13167: GO 13195
13169: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13170: LD_ADDR_VAR 0 3
13174: PUSH
13175: LD_INT 11
13177: PUSH
13178: LD_INT 12
13180: PUSH
13181: LD_INT 13
13183: PUSH
13184: LD_INT 14
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: ST_TO_ADDR
13193: GO 13738
13195: LD_INT 30
13197: DOUBLE
13198: EQUAL
13199: IFTRUE 13203
13201: GO 13229
13203: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13204: LD_ADDR_VAR 0 3
13208: PUSH
13209: LD_INT 11
13211: PUSH
13212: LD_INT 12
13214: PUSH
13215: LD_INT 13
13217: PUSH
13218: LD_INT 14
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: ST_TO_ADDR
13227: GO 13738
13229: LD_INT 25
13231: DOUBLE
13232: EQUAL
13233: IFTRUE 13237
13235: GO 13255
13237: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13238: LD_ADDR_VAR 0 3
13242: PUSH
13243: LD_INT 13
13245: PUSH
13246: LD_INT 14
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: ST_TO_ADDR
13253: GO 13738
13255: LD_INT 27
13257: DOUBLE
13258: EQUAL
13259: IFTRUE 13263
13261: GO 13281
13263: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13264: LD_ADDR_VAR 0 3
13268: PUSH
13269: LD_INT 13
13271: PUSH
13272: LD_INT 14
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: ST_TO_ADDR
13279: GO 13738
13281: LD_EXP 67
13285: DOUBLE
13286: EQUAL
13287: IFTRUE 13291
13289: GO 13317
13291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13292: LD_ADDR_VAR 0 3
13296: PUSH
13297: LD_INT 11
13299: PUSH
13300: LD_INT 12
13302: PUSH
13303: LD_INT 13
13305: PUSH
13306: LD_INT 14
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: ST_TO_ADDR
13315: GO 13738
13317: LD_INT 28
13319: DOUBLE
13320: EQUAL
13321: IFTRUE 13325
13323: GO 13343
13325: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13326: LD_ADDR_VAR 0 3
13330: PUSH
13331: LD_INT 13
13333: PUSH
13334: LD_INT 14
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: ST_TO_ADDR
13341: GO 13738
13343: LD_INT 29
13345: DOUBLE
13346: EQUAL
13347: IFTRUE 13351
13349: GO 13369
13351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13352: LD_ADDR_VAR 0 3
13356: PUSH
13357: LD_INT 13
13359: PUSH
13360: LD_INT 14
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: ST_TO_ADDR
13367: GO 13738
13369: LD_INT 31
13371: DOUBLE
13372: EQUAL
13373: IFTRUE 13377
13375: GO 13395
13377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13378: LD_ADDR_VAR 0 3
13382: PUSH
13383: LD_INT 13
13385: PUSH
13386: LD_INT 14
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: ST_TO_ADDR
13393: GO 13738
13395: LD_INT 26
13397: DOUBLE
13398: EQUAL
13399: IFTRUE 13403
13401: GO 13421
13403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13404: LD_ADDR_VAR 0 3
13408: PUSH
13409: LD_INT 13
13411: PUSH
13412: LD_INT 14
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: ST_TO_ADDR
13419: GO 13738
13421: LD_INT 42
13423: DOUBLE
13424: EQUAL
13425: IFTRUE 13429
13427: GO 13455
13429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13430: LD_ADDR_VAR 0 3
13434: PUSH
13435: LD_INT 21
13437: PUSH
13438: LD_INT 22
13440: PUSH
13441: LD_INT 23
13443: PUSH
13444: LD_INT 24
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: ST_TO_ADDR
13453: GO 13738
13455: LD_INT 43
13457: DOUBLE
13458: EQUAL
13459: IFTRUE 13463
13461: GO 13489
13463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13464: LD_ADDR_VAR 0 3
13468: PUSH
13469: LD_INT 21
13471: PUSH
13472: LD_INT 22
13474: PUSH
13475: LD_INT 23
13477: PUSH
13478: LD_INT 24
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: ST_TO_ADDR
13487: GO 13738
13489: LD_INT 44
13491: DOUBLE
13492: EQUAL
13493: IFTRUE 13497
13495: GO 13523
13497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13498: LD_ADDR_VAR 0 3
13502: PUSH
13503: LD_INT 21
13505: PUSH
13506: LD_INT 22
13508: PUSH
13509: LD_INT 23
13511: PUSH
13512: LD_INT 24
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: ST_TO_ADDR
13521: GO 13738
13523: LD_INT 45
13525: DOUBLE
13526: EQUAL
13527: IFTRUE 13531
13529: GO 13557
13531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13532: LD_ADDR_VAR 0 3
13536: PUSH
13537: LD_INT 21
13539: PUSH
13540: LD_INT 22
13542: PUSH
13543: LD_INT 23
13545: PUSH
13546: LD_INT 24
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: LIST
13553: LIST
13554: ST_TO_ADDR
13555: GO 13738
13557: LD_INT 49
13559: DOUBLE
13560: EQUAL
13561: IFTRUE 13565
13563: GO 13591
13565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13566: LD_ADDR_VAR 0 3
13570: PUSH
13571: LD_INT 21
13573: PUSH
13574: LD_INT 22
13576: PUSH
13577: LD_INT 23
13579: PUSH
13580: LD_INT 24
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: ST_TO_ADDR
13589: GO 13738
13591: LD_INT 51
13593: DOUBLE
13594: EQUAL
13595: IFTRUE 13599
13597: GO 13625
13599: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13600: LD_ADDR_VAR 0 3
13604: PUSH
13605: LD_INT 21
13607: PUSH
13608: LD_INT 22
13610: PUSH
13611: LD_INT 23
13613: PUSH
13614: LD_INT 24
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: ST_TO_ADDR
13623: GO 13738
13625: LD_INT 52
13627: DOUBLE
13628: EQUAL
13629: IFTRUE 13633
13631: GO 13659
13633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13634: LD_ADDR_VAR 0 3
13638: PUSH
13639: LD_INT 21
13641: PUSH
13642: LD_INT 22
13644: PUSH
13645: LD_INT 23
13647: PUSH
13648: LD_INT 24
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: ST_TO_ADDR
13657: GO 13738
13659: LD_INT 53
13661: DOUBLE
13662: EQUAL
13663: IFTRUE 13667
13665: GO 13685
13667: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13668: LD_ADDR_VAR 0 3
13672: PUSH
13673: LD_INT 23
13675: PUSH
13676: LD_INT 24
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: ST_TO_ADDR
13683: GO 13738
13685: LD_INT 46
13687: DOUBLE
13688: EQUAL
13689: IFTRUE 13693
13691: GO 13711
13693: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13694: LD_ADDR_VAR 0 3
13698: PUSH
13699: LD_INT 23
13701: PUSH
13702: LD_INT 24
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: ST_TO_ADDR
13709: GO 13738
13711: LD_INT 47
13713: DOUBLE
13714: EQUAL
13715: IFTRUE 13719
13717: GO 13737
13719: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13720: LD_ADDR_VAR 0 3
13724: PUSH
13725: LD_INT 23
13727: PUSH
13728: LD_INT 24
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: ST_TO_ADDR
13735: GO 13738
13737: POP
// result := ( chassis in result ) ;
13738: LD_ADDR_VAR 0 3
13742: PUSH
13743: LD_VAR 0 1
13747: PUSH
13748: LD_VAR 0 3
13752: IN
13753: ST_TO_ADDR
// end ;
13754: LD_VAR 0 3
13758: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13759: LD_INT 0
13761: PPUSH
13762: PPUSH
13763: PPUSH
13764: PPUSH
13765: PPUSH
13766: PPUSH
13767: PPUSH
// result := array ;
13768: LD_ADDR_VAR 0 5
13772: PUSH
13773: LD_VAR 0 1
13777: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13778: LD_VAR 0 1
13782: NOT
13783: PUSH
13784: LD_VAR 0 2
13788: NOT
13789: OR
13790: PUSH
13791: LD_VAR 0 3
13795: NOT
13796: OR
13797: PUSH
13798: LD_VAR 0 2
13802: PUSH
13803: LD_VAR 0 1
13807: GREATER
13808: OR
13809: PUSH
13810: LD_VAR 0 3
13814: PUSH
13815: LD_VAR 0 1
13819: GREATER
13820: OR
13821: IFFALSE 13825
// exit ;
13823: GO 14121
// if direction then
13825: LD_VAR 0 4
13829: IFFALSE 13893
// begin d := 1 ;
13831: LD_ADDR_VAR 0 9
13835: PUSH
13836: LD_INT 1
13838: ST_TO_ADDR
// if i_from > i_to then
13839: LD_VAR 0 2
13843: PUSH
13844: LD_VAR 0 3
13848: GREATER
13849: IFFALSE 13875
// length := ( array - i_from ) + i_to else
13851: LD_ADDR_VAR 0 11
13855: PUSH
13856: LD_VAR 0 1
13860: PUSH
13861: LD_VAR 0 2
13865: MINUS
13866: PUSH
13867: LD_VAR 0 3
13871: PLUS
13872: ST_TO_ADDR
13873: GO 13891
// length := i_to - i_from ;
13875: LD_ADDR_VAR 0 11
13879: PUSH
13880: LD_VAR 0 3
13884: PUSH
13885: LD_VAR 0 2
13889: MINUS
13890: ST_TO_ADDR
// end else
13891: GO 13954
// begin d := - 1 ;
13893: LD_ADDR_VAR 0 9
13897: PUSH
13898: LD_INT 1
13900: NEG
13901: ST_TO_ADDR
// if i_from > i_to then
13902: LD_VAR 0 2
13906: PUSH
13907: LD_VAR 0 3
13911: GREATER
13912: IFFALSE 13932
// length := i_from - i_to else
13914: LD_ADDR_VAR 0 11
13918: PUSH
13919: LD_VAR 0 2
13923: PUSH
13924: LD_VAR 0 3
13928: MINUS
13929: ST_TO_ADDR
13930: GO 13954
// length := ( array - i_to ) + i_from ;
13932: LD_ADDR_VAR 0 11
13936: PUSH
13937: LD_VAR 0 1
13941: PUSH
13942: LD_VAR 0 3
13946: MINUS
13947: PUSH
13948: LD_VAR 0 2
13952: PLUS
13953: ST_TO_ADDR
// end ; if not length then
13954: LD_VAR 0 11
13958: NOT
13959: IFFALSE 13963
// exit ;
13961: GO 14121
// tmp := array ;
13963: LD_ADDR_VAR 0 10
13967: PUSH
13968: LD_VAR 0 1
13972: ST_TO_ADDR
// for i = 1 to length do
13973: LD_ADDR_VAR 0 6
13977: PUSH
13978: DOUBLE
13979: LD_INT 1
13981: DEC
13982: ST_TO_ADDR
13983: LD_VAR 0 11
13987: PUSH
13988: FOR_TO
13989: IFFALSE 14109
// begin for j = 1 to array do
13991: LD_ADDR_VAR 0 7
13995: PUSH
13996: DOUBLE
13997: LD_INT 1
13999: DEC
14000: ST_TO_ADDR
14001: LD_VAR 0 1
14005: PUSH
14006: FOR_TO
14007: IFFALSE 14095
// begin k := j + d ;
14009: LD_ADDR_VAR 0 8
14013: PUSH
14014: LD_VAR 0 7
14018: PUSH
14019: LD_VAR 0 9
14023: PLUS
14024: ST_TO_ADDR
// if k > array then
14025: LD_VAR 0 8
14029: PUSH
14030: LD_VAR 0 1
14034: GREATER
14035: IFFALSE 14045
// k := 1 ;
14037: LD_ADDR_VAR 0 8
14041: PUSH
14042: LD_INT 1
14044: ST_TO_ADDR
// if not k then
14045: LD_VAR 0 8
14049: NOT
14050: IFFALSE 14062
// k := array ;
14052: LD_ADDR_VAR 0 8
14056: PUSH
14057: LD_VAR 0 1
14061: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14062: LD_ADDR_VAR 0 10
14066: PUSH
14067: LD_VAR 0 10
14071: PPUSH
14072: LD_VAR 0 8
14076: PPUSH
14077: LD_VAR 0 1
14081: PUSH
14082: LD_VAR 0 7
14086: ARRAY
14087: PPUSH
14088: CALL_OW 1
14092: ST_TO_ADDR
// end ;
14093: GO 14006
14095: POP
14096: POP
// array := tmp ;
14097: LD_ADDR_VAR 0 1
14101: PUSH
14102: LD_VAR 0 10
14106: ST_TO_ADDR
// end ;
14107: GO 13988
14109: POP
14110: POP
// result := array ;
14111: LD_ADDR_VAR 0 5
14115: PUSH
14116: LD_VAR 0 1
14120: ST_TO_ADDR
// end ;
14121: LD_VAR 0 5
14125: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14126: LD_INT 0
14128: PPUSH
14129: PPUSH
// result := 0 ;
14130: LD_ADDR_VAR 0 3
14134: PUSH
14135: LD_INT 0
14137: ST_TO_ADDR
// if not array or not value in array then
14138: LD_VAR 0 1
14142: NOT
14143: PUSH
14144: LD_VAR 0 2
14148: PUSH
14149: LD_VAR 0 1
14153: IN
14154: NOT
14155: OR
14156: IFFALSE 14160
// exit ;
14158: GO 14214
// for i = 1 to array do
14160: LD_ADDR_VAR 0 4
14164: PUSH
14165: DOUBLE
14166: LD_INT 1
14168: DEC
14169: ST_TO_ADDR
14170: LD_VAR 0 1
14174: PUSH
14175: FOR_TO
14176: IFFALSE 14212
// if value = array [ i ] then
14178: LD_VAR 0 2
14182: PUSH
14183: LD_VAR 0 1
14187: PUSH
14188: LD_VAR 0 4
14192: ARRAY
14193: EQUAL
14194: IFFALSE 14210
// begin result := i ;
14196: LD_ADDR_VAR 0 3
14200: PUSH
14201: LD_VAR 0 4
14205: ST_TO_ADDR
// exit ;
14206: POP
14207: POP
14208: GO 14214
// end ;
14210: GO 14175
14212: POP
14213: POP
// end ;
14214: LD_VAR 0 3
14218: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14219: LD_INT 0
14221: PPUSH
// vc_chassis := chassis ;
14222: LD_ADDR_OWVAR 37
14226: PUSH
14227: LD_VAR 0 1
14231: ST_TO_ADDR
// vc_engine := engine ;
14232: LD_ADDR_OWVAR 39
14236: PUSH
14237: LD_VAR 0 2
14241: ST_TO_ADDR
// vc_control := control ;
14242: LD_ADDR_OWVAR 38
14246: PUSH
14247: LD_VAR 0 3
14251: ST_TO_ADDR
// vc_weapon := weapon ;
14252: LD_ADDR_OWVAR 40
14256: PUSH
14257: LD_VAR 0 4
14261: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14262: LD_ADDR_OWVAR 41
14266: PUSH
14267: LD_VAR 0 5
14271: ST_TO_ADDR
// end ;
14272: LD_VAR 0 6
14276: RET
// export function WantPlant ( unit ) ; var task ; begin
14277: LD_INT 0
14279: PPUSH
14280: PPUSH
// result := false ;
14281: LD_ADDR_VAR 0 2
14285: PUSH
14286: LD_INT 0
14288: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14289: LD_ADDR_VAR 0 3
14293: PUSH
14294: LD_VAR 0 1
14298: PPUSH
14299: CALL_OW 437
14303: ST_TO_ADDR
// if task then
14304: LD_VAR 0 3
14308: IFFALSE 14336
// if task [ 1 ] [ 1 ] = p then
14310: LD_VAR 0 3
14314: PUSH
14315: LD_INT 1
14317: ARRAY
14318: PUSH
14319: LD_INT 1
14321: ARRAY
14322: PUSH
14323: LD_STRING p
14325: EQUAL
14326: IFFALSE 14336
// result := true ;
14328: LD_ADDR_VAR 0 2
14332: PUSH
14333: LD_INT 1
14335: ST_TO_ADDR
// end ;
14336: LD_VAR 0 2
14340: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14341: LD_INT 0
14343: PPUSH
14344: PPUSH
14345: PPUSH
14346: PPUSH
// if pos < 1 then
14347: LD_VAR 0 2
14351: PUSH
14352: LD_INT 1
14354: LESS
14355: IFFALSE 14359
// exit ;
14357: GO 14662
// if pos = 1 then
14359: LD_VAR 0 2
14363: PUSH
14364: LD_INT 1
14366: EQUAL
14367: IFFALSE 14400
// result := Replace ( arr , pos [ 1 ] , value ) else
14369: LD_ADDR_VAR 0 4
14373: PUSH
14374: LD_VAR 0 1
14378: PPUSH
14379: LD_VAR 0 2
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: PPUSH
14388: LD_VAR 0 3
14392: PPUSH
14393: CALL_OW 1
14397: ST_TO_ADDR
14398: GO 14662
// begin tmp := arr ;
14400: LD_ADDR_VAR 0 6
14404: PUSH
14405: LD_VAR 0 1
14409: ST_TO_ADDR
// s_arr := [ tmp ] ;
14410: LD_ADDR_VAR 0 7
14414: PUSH
14415: LD_VAR 0 6
14419: PUSH
14420: EMPTY
14421: LIST
14422: ST_TO_ADDR
// for i = 1 to pos - 1 do
14423: LD_ADDR_VAR 0 5
14427: PUSH
14428: DOUBLE
14429: LD_INT 1
14431: DEC
14432: ST_TO_ADDR
14433: LD_VAR 0 2
14437: PUSH
14438: LD_INT 1
14440: MINUS
14441: PUSH
14442: FOR_TO
14443: IFFALSE 14488
// begin tmp := tmp [ pos [ i ] ] ;
14445: LD_ADDR_VAR 0 6
14449: PUSH
14450: LD_VAR 0 6
14454: PUSH
14455: LD_VAR 0 2
14459: PUSH
14460: LD_VAR 0 5
14464: ARRAY
14465: ARRAY
14466: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14467: LD_ADDR_VAR 0 7
14471: PUSH
14472: LD_VAR 0 7
14476: PUSH
14477: LD_VAR 0 6
14481: PUSH
14482: EMPTY
14483: LIST
14484: ADD
14485: ST_TO_ADDR
// end ;
14486: GO 14442
14488: POP
14489: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14490: LD_ADDR_VAR 0 6
14494: PUSH
14495: LD_VAR 0 6
14499: PPUSH
14500: LD_VAR 0 2
14504: PUSH
14505: LD_VAR 0 2
14509: ARRAY
14510: PPUSH
14511: LD_VAR 0 3
14515: PPUSH
14516: CALL_OW 1
14520: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14521: LD_ADDR_VAR 0 7
14525: PUSH
14526: LD_VAR 0 7
14530: PPUSH
14531: LD_VAR 0 7
14535: PPUSH
14536: LD_VAR 0 6
14540: PPUSH
14541: CALL_OW 1
14545: ST_TO_ADDR
// for i = s_arr downto 2 do
14546: LD_ADDR_VAR 0 5
14550: PUSH
14551: DOUBLE
14552: LD_VAR 0 7
14556: INC
14557: ST_TO_ADDR
14558: LD_INT 2
14560: PUSH
14561: FOR_DOWNTO
14562: IFFALSE 14646
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14564: LD_ADDR_VAR 0 6
14568: PUSH
14569: LD_VAR 0 7
14573: PUSH
14574: LD_VAR 0 5
14578: PUSH
14579: LD_INT 1
14581: MINUS
14582: ARRAY
14583: PPUSH
14584: LD_VAR 0 2
14588: PUSH
14589: LD_VAR 0 5
14593: PUSH
14594: LD_INT 1
14596: MINUS
14597: ARRAY
14598: PPUSH
14599: LD_VAR 0 7
14603: PUSH
14604: LD_VAR 0 5
14608: ARRAY
14609: PPUSH
14610: CALL_OW 1
14614: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14615: LD_ADDR_VAR 0 7
14619: PUSH
14620: LD_VAR 0 7
14624: PPUSH
14625: LD_VAR 0 5
14629: PUSH
14630: LD_INT 1
14632: MINUS
14633: PPUSH
14634: LD_VAR 0 6
14638: PPUSH
14639: CALL_OW 1
14643: ST_TO_ADDR
// end ;
14644: GO 14561
14646: POP
14647: POP
// result := s_arr [ 1 ] ;
14648: LD_ADDR_VAR 0 4
14652: PUSH
14653: LD_VAR 0 7
14657: PUSH
14658: LD_INT 1
14660: ARRAY
14661: ST_TO_ADDR
// end ; end ;
14662: LD_VAR 0 4
14666: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14667: LD_INT 0
14669: PPUSH
14670: PPUSH
// if not list then
14671: LD_VAR 0 1
14675: NOT
14676: IFFALSE 14680
// exit ;
14678: GO 14771
// i := list [ pos1 ] ;
14680: LD_ADDR_VAR 0 5
14684: PUSH
14685: LD_VAR 0 1
14689: PUSH
14690: LD_VAR 0 2
14694: ARRAY
14695: ST_TO_ADDR
// if not i then
14696: LD_VAR 0 5
14700: NOT
14701: IFFALSE 14705
// exit ;
14703: GO 14771
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14705: LD_ADDR_VAR 0 1
14709: PUSH
14710: LD_VAR 0 1
14714: PPUSH
14715: LD_VAR 0 2
14719: PPUSH
14720: LD_VAR 0 1
14724: PUSH
14725: LD_VAR 0 3
14729: ARRAY
14730: PPUSH
14731: CALL_OW 1
14735: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14736: LD_ADDR_VAR 0 1
14740: PUSH
14741: LD_VAR 0 1
14745: PPUSH
14746: LD_VAR 0 3
14750: PPUSH
14751: LD_VAR 0 5
14755: PPUSH
14756: CALL_OW 1
14760: ST_TO_ADDR
// result := list ;
14761: LD_ADDR_VAR 0 4
14765: PUSH
14766: LD_VAR 0 1
14770: ST_TO_ADDR
// end ;
14771: LD_VAR 0 4
14775: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14776: LD_INT 0
14778: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14779: LD_ADDR_VAR 0 5
14783: PUSH
14784: LD_VAR 0 1
14788: PPUSH
14789: CALL_OW 250
14793: PPUSH
14794: LD_VAR 0 1
14798: PPUSH
14799: CALL_OW 251
14803: PPUSH
14804: LD_VAR 0 2
14808: PPUSH
14809: LD_VAR 0 3
14813: PPUSH
14814: LD_VAR 0 4
14818: PPUSH
14819: CALL 14829 0 5
14823: ST_TO_ADDR
// end ;
14824: LD_VAR 0 5
14828: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14829: LD_INT 0
14831: PPUSH
14832: PPUSH
14833: PPUSH
14834: PPUSH
// if not list then
14835: LD_VAR 0 3
14839: NOT
14840: IFFALSE 14844
// exit ;
14842: GO 15232
// result := [ ] ;
14844: LD_ADDR_VAR 0 6
14848: PUSH
14849: EMPTY
14850: ST_TO_ADDR
// for i in list do
14851: LD_ADDR_VAR 0 7
14855: PUSH
14856: LD_VAR 0 3
14860: PUSH
14861: FOR_IN
14862: IFFALSE 15064
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14864: LD_ADDR_VAR 0 9
14868: PUSH
14869: LD_VAR 0 7
14873: PPUSH
14874: LD_VAR 0 1
14878: PPUSH
14879: LD_VAR 0 2
14883: PPUSH
14884: CALL_OW 297
14888: ST_TO_ADDR
// if not result then
14889: LD_VAR 0 6
14893: NOT
14894: IFFALSE 14920
// result := [ [ i , tmp ] ] else
14896: LD_ADDR_VAR 0 6
14900: PUSH
14901: LD_VAR 0 7
14905: PUSH
14906: LD_VAR 0 9
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: EMPTY
14916: LIST
14917: ST_TO_ADDR
14918: GO 15062
// begin if result [ result ] [ 2 ] < tmp then
14920: LD_VAR 0 6
14924: PUSH
14925: LD_VAR 0 6
14929: ARRAY
14930: PUSH
14931: LD_INT 2
14933: ARRAY
14934: PUSH
14935: LD_VAR 0 9
14939: LESS
14940: IFFALSE 14982
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14942: LD_ADDR_VAR 0 6
14946: PUSH
14947: LD_VAR 0 6
14951: PPUSH
14952: LD_VAR 0 6
14956: PUSH
14957: LD_INT 1
14959: PLUS
14960: PPUSH
14961: LD_VAR 0 7
14965: PUSH
14966: LD_VAR 0 9
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PPUSH
14975: CALL_OW 2
14979: ST_TO_ADDR
14980: GO 15062
// for j = 1 to result do
14982: LD_ADDR_VAR 0 8
14986: PUSH
14987: DOUBLE
14988: LD_INT 1
14990: DEC
14991: ST_TO_ADDR
14992: LD_VAR 0 6
14996: PUSH
14997: FOR_TO
14998: IFFALSE 15060
// begin if tmp < result [ j ] [ 2 ] then
15000: LD_VAR 0 9
15004: PUSH
15005: LD_VAR 0 6
15009: PUSH
15010: LD_VAR 0 8
15014: ARRAY
15015: PUSH
15016: LD_INT 2
15018: ARRAY
15019: LESS
15020: IFFALSE 15058
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15022: LD_ADDR_VAR 0 6
15026: PUSH
15027: LD_VAR 0 6
15031: PPUSH
15032: LD_VAR 0 8
15036: PPUSH
15037: LD_VAR 0 7
15041: PUSH
15042: LD_VAR 0 9
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PPUSH
15051: CALL_OW 2
15055: ST_TO_ADDR
// break ;
15056: GO 15060
// end ; end ;
15058: GO 14997
15060: POP
15061: POP
// end ; end ;
15062: GO 14861
15064: POP
15065: POP
// if result and not asc then
15066: LD_VAR 0 6
15070: PUSH
15071: LD_VAR 0 4
15075: NOT
15076: AND
15077: IFFALSE 15152
// begin tmp := result ;
15079: LD_ADDR_VAR 0 9
15083: PUSH
15084: LD_VAR 0 6
15088: ST_TO_ADDR
// for i = tmp downto 1 do
15089: LD_ADDR_VAR 0 7
15093: PUSH
15094: DOUBLE
15095: LD_VAR 0 9
15099: INC
15100: ST_TO_ADDR
15101: LD_INT 1
15103: PUSH
15104: FOR_DOWNTO
15105: IFFALSE 15150
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15107: LD_ADDR_VAR 0 6
15111: PUSH
15112: LD_VAR 0 6
15116: PPUSH
15117: LD_VAR 0 9
15121: PUSH
15122: LD_VAR 0 7
15126: MINUS
15127: PUSH
15128: LD_INT 1
15130: PLUS
15131: PPUSH
15132: LD_VAR 0 9
15136: PUSH
15137: LD_VAR 0 7
15141: ARRAY
15142: PPUSH
15143: CALL_OW 1
15147: ST_TO_ADDR
15148: GO 15104
15150: POP
15151: POP
// end ; tmp := [ ] ;
15152: LD_ADDR_VAR 0 9
15156: PUSH
15157: EMPTY
15158: ST_TO_ADDR
// if mode then
15159: LD_VAR 0 5
15163: IFFALSE 15232
// begin for i = 1 to result do
15165: LD_ADDR_VAR 0 7
15169: PUSH
15170: DOUBLE
15171: LD_INT 1
15173: DEC
15174: ST_TO_ADDR
15175: LD_VAR 0 6
15179: PUSH
15180: FOR_TO
15181: IFFALSE 15220
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15183: LD_ADDR_VAR 0 9
15187: PUSH
15188: LD_VAR 0 9
15192: PPUSH
15193: LD_VAR 0 7
15197: PPUSH
15198: LD_VAR 0 6
15202: PUSH
15203: LD_VAR 0 7
15207: ARRAY
15208: PUSH
15209: LD_INT 1
15211: ARRAY
15212: PPUSH
15213: CALL_OW 1
15217: ST_TO_ADDR
15218: GO 15180
15220: POP
15221: POP
// result := tmp ;
15222: LD_ADDR_VAR 0 6
15226: PUSH
15227: LD_VAR 0 9
15231: ST_TO_ADDR
// end ; end ;
15232: LD_VAR 0 6
15236: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15237: LD_INT 0
15239: PPUSH
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15245: LD_ADDR_VAR 0 5
15249: PUSH
15250: LD_INT 0
15252: PUSH
15253: LD_INT 0
15255: PUSH
15256: LD_INT 0
15258: PUSH
15259: EMPTY
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: ST_TO_ADDR
// if not x or not y then
15267: LD_VAR 0 2
15271: NOT
15272: PUSH
15273: LD_VAR 0 3
15277: NOT
15278: OR
15279: IFFALSE 15283
// exit ;
15281: GO 16935
// if not range then
15283: LD_VAR 0 4
15287: NOT
15288: IFFALSE 15298
// range := 10 ;
15290: LD_ADDR_VAR 0 4
15294: PUSH
15295: LD_INT 10
15297: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15298: LD_ADDR_VAR 0 8
15302: PUSH
15303: LD_INT 81
15305: PUSH
15306: LD_VAR 0 1
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: LD_INT 92
15317: PUSH
15318: LD_VAR 0 2
15322: PUSH
15323: LD_VAR 0 3
15327: PUSH
15328: LD_VAR 0 4
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 3
15341: PUSH
15342: LD_INT 21
15344: PUSH
15345: LD_INT 3
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: PPUSH
15361: CALL_OW 69
15365: ST_TO_ADDR
// if not tmp then
15366: LD_VAR 0 8
15370: NOT
15371: IFFALSE 15375
// exit ;
15373: GO 16935
// for i in tmp do
15375: LD_ADDR_VAR 0 6
15379: PUSH
15380: LD_VAR 0 8
15384: PUSH
15385: FOR_IN
15386: IFFALSE 16910
// begin points := [ 0 , 0 , 0 ] ;
15388: LD_ADDR_VAR 0 9
15392: PUSH
15393: LD_INT 0
15395: PUSH
15396: LD_INT 0
15398: PUSH
15399: LD_INT 0
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: ST_TO_ADDR
// bpoints := 1 ;
15407: LD_ADDR_VAR 0 10
15411: PUSH
15412: LD_INT 1
15414: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15415: LD_VAR 0 6
15419: PPUSH
15420: CALL_OW 247
15424: PUSH
15425: LD_INT 1
15427: DOUBLE
15428: EQUAL
15429: IFTRUE 15433
15431: GO 16011
15433: POP
// begin if GetClass ( i ) = 1 then
15434: LD_VAR 0 6
15438: PPUSH
15439: CALL_OW 257
15443: PUSH
15444: LD_INT 1
15446: EQUAL
15447: IFFALSE 15468
// points := [ 10 , 5 , 3 ] ;
15449: LD_ADDR_VAR 0 9
15453: PUSH
15454: LD_INT 10
15456: PUSH
15457: LD_INT 5
15459: PUSH
15460: LD_INT 3
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: LIST
15467: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15468: LD_VAR 0 6
15472: PPUSH
15473: CALL_OW 257
15477: PUSH
15478: LD_INT 2
15480: PUSH
15481: LD_INT 3
15483: PUSH
15484: LD_INT 4
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: IN
15492: IFFALSE 15513
// points := [ 3 , 2 , 1 ] ;
15494: LD_ADDR_VAR 0 9
15498: PUSH
15499: LD_INT 3
15501: PUSH
15502: LD_INT 2
15504: PUSH
15505: LD_INT 1
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: LIST
15512: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15513: LD_VAR 0 6
15517: PPUSH
15518: CALL_OW 257
15522: PUSH
15523: LD_INT 5
15525: EQUAL
15526: IFFALSE 15547
// points := [ 130 , 5 , 2 ] ;
15528: LD_ADDR_VAR 0 9
15532: PUSH
15533: LD_INT 130
15535: PUSH
15536: LD_INT 5
15538: PUSH
15539: LD_INT 2
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: LIST
15546: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15547: LD_VAR 0 6
15551: PPUSH
15552: CALL_OW 257
15556: PUSH
15557: LD_INT 8
15559: EQUAL
15560: IFFALSE 15581
// points := [ 35 , 35 , 30 ] ;
15562: LD_ADDR_VAR 0 9
15566: PUSH
15567: LD_INT 35
15569: PUSH
15570: LD_INT 35
15572: PUSH
15573: LD_INT 30
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: LIST
15580: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15581: LD_VAR 0 6
15585: PPUSH
15586: CALL_OW 257
15590: PUSH
15591: LD_INT 9
15593: EQUAL
15594: IFFALSE 15615
// points := [ 20 , 55 , 40 ] ;
15596: LD_ADDR_VAR 0 9
15600: PUSH
15601: LD_INT 20
15603: PUSH
15604: LD_INT 55
15606: PUSH
15607: LD_INT 40
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15615: LD_VAR 0 6
15619: PPUSH
15620: CALL_OW 257
15624: PUSH
15625: LD_INT 12
15627: PUSH
15628: LD_INT 16
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: IN
15635: IFFALSE 15656
// points := [ 5 , 3 , 2 ] ;
15637: LD_ADDR_VAR 0 9
15641: PUSH
15642: LD_INT 5
15644: PUSH
15645: LD_INT 3
15647: PUSH
15648: LD_INT 2
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: LIST
15655: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15656: LD_VAR 0 6
15660: PPUSH
15661: CALL_OW 257
15665: PUSH
15666: LD_INT 17
15668: EQUAL
15669: IFFALSE 15690
// points := [ 100 , 50 , 75 ] ;
15671: LD_ADDR_VAR 0 9
15675: PUSH
15676: LD_INT 100
15678: PUSH
15679: LD_INT 50
15681: PUSH
15682: LD_INT 75
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15690: LD_VAR 0 6
15694: PPUSH
15695: CALL_OW 257
15699: PUSH
15700: LD_INT 15
15702: EQUAL
15703: IFFALSE 15724
// points := [ 10 , 5 , 3 ] ;
15705: LD_ADDR_VAR 0 9
15709: PUSH
15710: LD_INT 10
15712: PUSH
15713: LD_INT 5
15715: PUSH
15716: LD_INT 3
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: LIST
15723: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15724: LD_VAR 0 6
15728: PPUSH
15729: CALL_OW 257
15733: PUSH
15734: LD_INT 14
15736: EQUAL
15737: IFFALSE 15758
// points := [ 10 , 0 , 0 ] ;
15739: LD_ADDR_VAR 0 9
15743: PUSH
15744: LD_INT 10
15746: PUSH
15747: LD_INT 0
15749: PUSH
15750: LD_INT 0
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: LIST
15757: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15758: LD_VAR 0 6
15762: PPUSH
15763: CALL_OW 257
15767: PUSH
15768: LD_INT 11
15770: EQUAL
15771: IFFALSE 15792
// points := [ 30 , 10 , 5 ] ;
15773: LD_ADDR_VAR 0 9
15777: PUSH
15778: LD_INT 30
15780: PUSH
15781: LD_INT 10
15783: PUSH
15784: LD_INT 5
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: LIST
15791: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15792: LD_VAR 0 1
15796: PPUSH
15797: LD_INT 5
15799: PPUSH
15800: CALL_OW 321
15804: PUSH
15805: LD_INT 2
15807: EQUAL
15808: IFFALSE 15825
// bpoints := bpoints * 1.8 ;
15810: LD_ADDR_VAR 0 10
15814: PUSH
15815: LD_VAR 0 10
15819: PUSH
15820: LD_REAL  1.80000000000000E+0000
15823: MUL
15824: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15825: LD_VAR 0 6
15829: PPUSH
15830: CALL_OW 257
15834: PUSH
15835: LD_INT 1
15837: PUSH
15838: LD_INT 2
15840: PUSH
15841: LD_INT 3
15843: PUSH
15844: LD_INT 4
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: IN
15853: PUSH
15854: LD_VAR 0 1
15858: PPUSH
15859: LD_INT 51
15861: PPUSH
15862: CALL_OW 321
15866: PUSH
15867: LD_INT 2
15869: EQUAL
15870: AND
15871: IFFALSE 15888
// bpoints := bpoints * 1.2 ;
15873: LD_ADDR_VAR 0 10
15877: PUSH
15878: LD_VAR 0 10
15882: PUSH
15883: LD_REAL  1.20000000000000E+0000
15886: MUL
15887: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15888: LD_VAR 0 6
15892: PPUSH
15893: CALL_OW 257
15897: PUSH
15898: LD_INT 5
15900: PUSH
15901: LD_INT 7
15903: PUSH
15904: LD_INT 9
15906: PUSH
15907: EMPTY
15908: LIST
15909: LIST
15910: LIST
15911: IN
15912: PUSH
15913: LD_VAR 0 1
15917: PPUSH
15918: LD_INT 52
15920: PPUSH
15921: CALL_OW 321
15925: PUSH
15926: LD_INT 2
15928: EQUAL
15929: AND
15930: IFFALSE 15947
// bpoints := bpoints * 1.5 ;
15932: LD_ADDR_VAR 0 10
15936: PUSH
15937: LD_VAR 0 10
15941: PUSH
15942: LD_REAL  1.50000000000000E+0000
15945: MUL
15946: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15947: LD_VAR 0 1
15951: PPUSH
15952: LD_INT 66
15954: PPUSH
15955: CALL_OW 321
15959: PUSH
15960: LD_INT 2
15962: EQUAL
15963: IFFALSE 15980
// bpoints := bpoints * 1.1 ;
15965: LD_ADDR_VAR 0 10
15969: PUSH
15970: LD_VAR 0 10
15974: PUSH
15975: LD_REAL  1.10000000000000E+0000
15978: MUL
15979: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15980: LD_ADDR_VAR 0 10
15984: PUSH
15985: LD_VAR 0 10
15989: PUSH
15990: LD_VAR 0 6
15994: PPUSH
15995: LD_INT 1
15997: PPUSH
15998: CALL_OW 259
16002: PUSH
16003: LD_REAL  1.15000000000000E+0000
16006: MUL
16007: MUL
16008: ST_TO_ADDR
// end ; unit_vehicle :
16009: GO 16839
16011: LD_INT 2
16013: DOUBLE
16014: EQUAL
16015: IFTRUE 16019
16017: GO 16827
16019: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16020: LD_VAR 0 6
16024: PPUSH
16025: CALL_OW 264
16029: PUSH
16030: LD_INT 2
16032: PUSH
16033: LD_INT 42
16035: PUSH
16036: LD_INT 24
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: IN
16044: IFFALSE 16065
// points := [ 25 , 5 , 3 ] ;
16046: LD_ADDR_VAR 0 9
16050: PUSH
16051: LD_INT 25
16053: PUSH
16054: LD_INT 5
16056: PUSH
16057: LD_INT 3
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: LIST
16064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16065: LD_VAR 0 6
16069: PPUSH
16070: CALL_OW 264
16074: PUSH
16075: LD_INT 4
16077: PUSH
16078: LD_INT 43
16080: PUSH
16081: LD_INT 25
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: LIST
16088: IN
16089: IFFALSE 16110
// points := [ 40 , 15 , 5 ] ;
16091: LD_ADDR_VAR 0 9
16095: PUSH
16096: LD_INT 40
16098: PUSH
16099: LD_INT 15
16101: PUSH
16102: LD_INT 5
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16110: LD_VAR 0 6
16114: PPUSH
16115: CALL_OW 264
16119: PUSH
16120: LD_INT 3
16122: PUSH
16123: LD_INT 23
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: IN
16130: IFFALSE 16151
// points := [ 7 , 25 , 8 ] ;
16132: LD_ADDR_VAR 0 9
16136: PUSH
16137: LD_INT 7
16139: PUSH
16140: LD_INT 25
16142: PUSH
16143: LD_INT 8
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: LIST
16150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16151: LD_VAR 0 6
16155: PPUSH
16156: CALL_OW 264
16160: PUSH
16161: LD_INT 5
16163: PUSH
16164: LD_INT 27
16166: PUSH
16167: LD_INT 44
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: IN
16175: IFFALSE 16196
// points := [ 14 , 50 , 16 ] ;
16177: LD_ADDR_VAR 0 9
16181: PUSH
16182: LD_INT 14
16184: PUSH
16185: LD_INT 50
16187: PUSH
16188: LD_INT 16
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: LIST
16195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16196: LD_VAR 0 6
16200: PPUSH
16201: CALL_OW 264
16205: PUSH
16206: LD_INT 6
16208: PUSH
16209: LD_INT 46
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: IN
16216: IFFALSE 16237
// points := [ 32 , 120 , 70 ] ;
16218: LD_ADDR_VAR 0 9
16222: PUSH
16223: LD_INT 32
16225: PUSH
16226: LD_INT 120
16228: PUSH
16229: LD_INT 70
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: LIST
16236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16237: LD_VAR 0 6
16241: PPUSH
16242: CALL_OW 264
16246: PUSH
16247: LD_INT 7
16249: PUSH
16250: LD_INT 28
16252: PUSH
16253: LD_INT 45
16255: PUSH
16256: LD_EXP 67
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: IN
16267: IFFALSE 16288
// points := [ 35 , 20 , 45 ] ;
16269: LD_ADDR_VAR 0 9
16273: PUSH
16274: LD_INT 35
16276: PUSH
16277: LD_INT 20
16279: PUSH
16280: LD_INT 45
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16288: LD_VAR 0 6
16292: PPUSH
16293: CALL_OW 264
16297: PUSH
16298: LD_INT 47
16300: PUSH
16301: EMPTY
16302: LIST
16303: IN
16304: IFFALSE 16325
// points := [ 67 , 45 , 75 ] ;
16306: LD_ADDR_VAR 0 9
16310: PUSH
16311: LD_INT 67
16313: PUSH
16314: LD_INT 45
16316: PUSH
16317: LD_INT 75
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16325: LD_VAR 0 6
16329: PPUSH
16330: CALL_OW 264
16334: PUSH
16335: LD_INT 26
16337: PUSH
16338: EMPTY
16339: LIST
16340: IN
16341: IFFALSE 16362
// points := [ 120 , 30 , 80 ] ;
16343: LD_ADDR_VAR 0 9
16347: PUSH
16348: LD_INT 120
16350: PUSH
16351: LD_INT 30
16353: PUSH
16354: LD_INT 80
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: LIST
16361: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16362: LD_VAR 0 6
16366: PPUSH
16367: CALL_OW 264
16371: PUSH
16372: LD_INT 22
16374: PUSH
16375: EMPTY
16376: LIST
16377: IN
16378: IFFALSE 16399
// points := [ 40 , 1 , 1 ] ;
16380: LD_ADDR_VAR 0 9
16384: PUSH
16385: LD_INT 40
16387: PUSH
16388: LD_INT 1
16390: PUSH
16391: LD_INT 1
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: LIST
16398: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16399: LD_VAR 0 6
16403: PPUSH
16404: CALL_OW 264
16408: PUSH
16409: LD_INT 29
16411: PUSH
16412: EMPTY
16413: LIST
16414: IN
16415: IFFALSE 16436
// points := [ 70 , 200 , 400 ] ;
16417: LD_ADDR_VAR 0 9
16421: PUSH
16422: LD_INT 70
16424: PUSH
16425: LD_INT 200
16427: PUSH
16428: LD_INT 400
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: LIST
16435: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16436: LD_VAR 0 6
16440: PPUSH
16441: CALL_OW 264
16445: PUSH
16446: LD_INT 14
16448: PUSH
16449: LD_INT 53
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: IN
16456: IFFALSE 16477
// points := [ 40 , 10 , 20 ] ;
16458: LD_ADDR_VAR 0 9
16462: PUSH
16463: LD_INT 40
16465: PUSH
16466: LD_INT 10
16468: PUSH
16469: LD_INT 20
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16477: LD_VAR 0 6
16481: PPUSH
16482: CALL_OW 264
16486: PUSH
16487: LD_INT 9
16489: PUSH
16490: EMPTY
16491: LIST
16492: IN
16493: IFFALSE 16514
// points := [ 5 , 70 , 20 ] ;
16495: LD_ADDR_VAR 0 9
16499: PUSH
16500: LD_INT 5
16502: PUSH
16503: LD_INT 70
16505: PUSH
16506: LD_INT 20
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: LIST
16513: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16514: LD_VAR 0 6
16518: PPUSH
16519: CALL_OW 264
16523: PUSH
16524: LD_INT 10
16526: PUSH
16527: EMPTY
16528: LIST
16529: IN
16530: IFFALSE 16551
// points := [ 35 , 110 , 70 ] ;
16532: LD_ADDR_VAR 0 9
16536: PUSH
16537: LD_INT 35
16539: PUSH
16540: LD_INT 110
16542: PUSH
16543: LD_INT 70
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16551: LD_VAR 0 6
16555: PPUSH
16556: CALL_OW 265
16560: PUSH
16561: LD_INT 25
16563: EQUAL
16564: IFFALSE 16585
// points := [ 80 , 65 , 100 ] ;
16566: LD_ADDR_VAR 0 9
16570: PUSH
16571: LD_INT 80
16573: PUSH
16574: LD_INT 65
16576: PUSH
16577: LD_INT 100
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16585: LD_VAR 0 6
16589: PPUSH
16590: CALL_OW 263
16594: PUSH
16595: LD_INT 1
16597: EQUAL
16598: IFFALSE 16633
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16600: LD_ADDR_VAR 0 10
16604: PUSH
16605: LD_VAR 0 10
16609: PUSH
16610: LD_VAR 0 6
16614: PPUSH
16615: CALL_OW 311
16619: PPUSH
16620: LD_INT 3
16622: PPUSH
16623: CALL_OW 259
16627: PUSH
16628: LD_INT 4
16630: MUL
16631: MUL
16632: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16633: LD_VAR 0 6
16637: PPUSH
16638: CALL_OW 263
16642: PUSH
16643: LD_INT 2
16645: EQUAL
16646: IFFALSE 16697
// begin j := IsControledBy ( i ) ;
16648: LD_ADDR_VAR 0 7
16652: PUSH
16653: LD_VAR 0 6
16657: PPUSH
16658: CALL_OW 312
16662: ST_TO_ADDR
// if j then
16663: LD_VAR 0 7
16667: IFFALSE 16697
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16669: LD_ADDR_VAR 0 10
16673: PUSH
16674: LD_VAR 0 10
16678: PUSH
16679: LD_VAR 0 7
16683: PPUSH
16684: LD_INT 3
16686: PPUSH
16687: CALL_OW 259
16691: PUSH
16692: LD_INT 3
16694: MUL
16695: MUL
16696: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16697: LD_VAR 0 6
16701: PPUSH
16702: CALL_OW 264
16706: PUSH
16707: LD_INT 5
16709: PUSH
16710: LD_INT 6
16712: PUSH
16713: LD_INT 46
16715: PUSH
16716: LD_INT 44
16718: PUSH
16719: LD_INT 47
16721: PUSH
16722: LD_INT 45
16724: PUSH
16725: LD_INT 28
16727: PUSH
16728: LD_INT 7
16730: PUSH
16731: LD_INT 27
16733: PUSH
16734: LD_INT 29
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: IN
16749: PUSH
16750: LD_VAR 0 1
16754: PPUSH
16755: LD_INT 52
16757: PPUSH
16758: CALL_OW 321
16762: PUSH
16763: LD_INT 2
16765: EQUAL
16766: AND
16767: IFFALSE 16784
// bpoints := bpoints * 1.2 ;
16769: LD_ADDR_VAR 0 10
16773: PUSH
16774: LD_VAR 0 10
16778: PUSH
16779: LD_REAL  1.20000000000000E+0000
16782: MUL
16783: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16784: LD_VAR 0 6
16788: PPUSH
16789: CALL_OW 264
16793: PUSH
16794: LD_INT 6
16796: PUSH
16797: LD_INT 46
16799: PUSH
16800: LD_INT 47
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: IN
16808: IFFALSE 16825
// bpoints := bpoints * 1.2 ;
16810: LD_ADDR_VAR 0 10
16814: PUSH
16815: LD_VAR 0 10
16819: PUSH
16820: LD_REAL  1.20000000000000E+0000
16823: MUL
16824: ST_TO_ADDR
// end ; unit_building :
16825: GO 16839
16827: LD_INT 3
16829: DOUBLE
16830: EQUAL
16831: IFTRUE 16835
16833: GO 16838
16835: POP
// ; end ;
16836: GO 16839
16838: POP
// for j = 1 to 3 do
16839: LD_ADDR_VAR 0 7
16843: PUSH
16844: DOUBLE
16845: LD_INT 1
16847: DEC
16848: ST_TO_ADDR
16849: LD_INT 3
16851: PUSH
16852: FOR_TO
16853: IFFALSE 16906
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16855: LD_ADDR_VAR 0 5
16859: PUSH
16860: LD_VAR 0 5
16864: PPUSH
16865: LD_VAR 0 7
16869: PPUSH
16870: LD_VAR 0 5
16874: PUSH
16875: LD_VAR 0 7
16879: ARRAY
16880: PUSH
16881: LD_VAR 0 9
16885: PUSH
16886: LD_VAR 0 7
16890: ARRAY
16891: PUSH
16892: LD_VAR 0 10
16896: MUL
16897: PLUS
16898: PPUSH
16899: CALL_OW 1
16903: ST_TO_ADDR
16904: GO 16852
16906: POP
16907: POP
// end ;
16908: GO 15385
16910: POP
16911: POP
// result := Replace ( result , 4 , tmp ) ;
16912: LD_ADDR_VAR 0 5
16916: PUSH
16917: LD_VAR 0 5
16921: PPUSH
16922: LD_INT 4
16924: PPUSH
16925: LD_VAR 0 8
16929: PPUSH
16930: CALL_OW 1
16934: ST_TO_ADDR
// end ;
16935: LD_VAR 0 5
16939: RET
// export function DangerAtRange ( unit , range ) ; begin
16940: LD_INT 0
16942: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16943: LD_ADDR_VAR 0 3
16947: PUSH
16948: LD_VAR 0 1
16952: PPUSH
16953: CALL_OW 255
16957: PPUSH
16958: LD_VAR 0 1
16962: PPUSH
16963: CALL_OW 250
16967: PPUSH
16968: LD_VAR 0 1
16972: PPUSH
16973: CALL_OW 251
16977: PPUSH
16978: LD_VAR 0 2
16982: PPUSH
16983: CALL 15237 0 4
16987: ST_TO_ADDR
// end ;
16988: LD_VAR 0 3
16992: RET
// export function DangerInArea ( side , area ) ; begin
16993: LD_INT 0
16995: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16996: LD_ADDR_VAR 0 3
17000: PUSH
17001: LD_VAR 0 2
17005: PPUSH
17006: LD_INT 81
17008: PUSH
17009: LD_VAR 0 1
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PPUSH
17018: CALL_OW 70
17022: ST_TO_ADDR
// end ;
17023: LD_VAR 0 3
17027: RET
// export function IsExtension ( b ) ; begin
17028: LD_INT 0
17030: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17031: LD_ADDR_VAR 0 2
17035: PUSH
17036: LD_VAR 0 1
17040: PUSH
17041: LD_INT 23
17043: PUSH
17044: LD_INT 20
17046: PUSH
17047: LD_INT 22
17049: PUSH
17050: LD_INT 17
17052: PUSH
17053: LD_INT 24
17055: PUSH
17056: LD_INT 21
17058: PUSH
17059: LD_INT 19
17061: PUSH
17062: LD_INT 16
17064: PUSH
17065: LD_INT 25
17067: PUSH
17068: LD_INT 18
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: IN
17083: ST_TO_ADDR
// end ;
17084: LD_VAR 0 2
17088: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17089: LD_INT 0
17091: PPUSH
17092: PPUSH
17093: PPUSH
// result := [ ] ;
17094: LD_ADDR_VAR 0 4
17098: PUSH
17099: EMPTY
17100: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17101: LD_ADDR_VAR 0 5
17105: PUSH
17106: LD_VAR 0 2
17110: PPUSH
17111: LD_INT 21
17113: PUSH
17114: LD_INT 3
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PPUSH
17121: CALL_OW 70
17125: ST_TO_ADDR
// if not tmp then
17126: LD_VAR 0 5
17130: NOT
17131: IFFALSE 17135
// exit ;
17133: GO 17199
// if checkLink then
17135: LD_VAR 0 3
17139: IFFALSE 17189
// begin for i in tmp do
17141: LD_ADDR_VAR 0 6
17145: PUSH
17146: LD_VAR 0 5
17150: PUSH
17151: FOR_IN
17152: IFFALSE 17187
// if GetBase ( i ) <> base then
17154: LD_VAR 0 6
17158: PPUSH
17159: CALL_OW 274
17163: PUSH
17164: LD_VAR 0 1
17168: NONEQUAL
17169: IFFALSE 17185
// ComLinkToBase ( base , i ) ;
17171: LD_VAR 0 1
17175: PPUSH
17176: LD_VAR 0 6
17180: PPUSH
17181: CALL_OW 169
17185: GO 17151
17187: POP
17188: POP
// end ; result := tmp ;
17189: LD_ADDR_VAR 0 4
17193: PUSH
17194: LD_VAR 0 5
17198: ST_TO_ADDR
// end ;
17199: LD_VAR 0 4
17203: RET
// export function ComComplete ( units , b ) ; var i ; begin
17204: LD_INT 0
17206: PPUSH
17207: PPUSH
// if not units then
17208: LD_VAR 0 1
17212: NOT
17213: IFFALSE 17217
// exit ;
17215: GO 17307
// for i in units do
17217: LD_ADDR_VAR 0 4
17221: PUSH
17222: LD_VAR 0 1
17226: PUSH
17227: FOR_IN
17228: IFFALSE 17305
// if BuildingStatus ( b ) = bs_build then
17230: LD_VAR 0 2
17234: PPUSH
17235: CALL_OW 461
17239: PUSH
17240: LD_INT 1
17242: EQUAL
17243: IFFALSE 17303
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17245: LD_VAR 0 4
17249: PPUSH
17250: LD_STRING h
17252: PUSH
17253: LD_VAR 0 2
17257: PPUSH
17258: CALL_OW 250
17262: PUSH
17263: LD_VAR 0 2
17267: PPUSH
17268: CALL_OW 251
17272: PUSH
17273: LD_VAR 0 2
17277: PUSH
17278: LD_INT 0
17280: PUSH
17281: LD_INT 0
17283: PUSH
17284: LD_INT 0
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: PUSH
17296: EMPTY
17297: LIST
17298: PPUSH
17299: CALL_OW 446
17303: GO 17227
17305: POP
17306: POP
// end ;
17307: LD_VAR 0 3
17311: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17312: LD_INT 0
17314: PPUSH
17315: PPUSH
17316: PPUSH
17317: PPUSH
17318: PPUSH
17319: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17320: LD_VAR 0 1
17324: NOT
17325: PUSH
17326: LD_VAR 0 1
17330: PPUSH
17331: CALL_OW 263
17335: PUSH
17336: LD_INT 2
17338: NONEQUAL
17339: OR
17340: IFFALSE 17344
// exit ;
17342: GO 17660
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17344: LD_ADDR_VAR 0 6
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_VAR 0 1
17356: PPUSH
17357: CALL_OW 255
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 2
17368: PUSH
17369: LD_INT 30
17371: PUSH
17372: LD_INT 36
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: LD_INT 34
17381: PUSH
17382: LD_INT 31
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: LIST
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PPUSH
17398: CALL_OW 69
17402: ST_TO_ADDR
// if not tmp then
17403: LD_VAR 0 6
17407: NOT
17408: IFFALSE 17412
// exit ;
17410: GO 17660
// result := [ ] ;
17412: LD_ADDR_VAR 0 2
17416: PUSH
17417: EMPTY
17418: ST_TO_ADDR
// for i in tmp do
17419: LD_ADDR_VAR 0 3
17423: PUSH
17424: LD_VAR 0 6
17428: PUSH
17429: FOR_IN
17430: IFFALSE 17501
// begin t := UnitsInside ( i ) ;
17432: LD_ADDR_VAR 0 4
17436: PUSH
17437: LD_VAR 0 3
17441: PPUSH
17442: CALL_OW 313
17446: ST_TO_ADDR
// if t then
17447: LD_VAR 0 4
17451: IFFALSE 17499
// for j in t do
17453: LD_ADDR_VAR 0 7
17457: PUSH
17458: LD_VAR 0 4
17462: PUSH
17463: FOR_IN
17464: IFFALSE 17497
// result := Replace ( result , result + 1 , j ) ;
17466: LD_ADDR_VAR 0 2
17470: PUSH
17471: LD_VAR 0 2
17475: PPUSH
17476: LD_VAR 0 2
17480: PUSH
17481: LD_INT 1
17483: PLUS
17484: PPUSH
17485: LD_VAR 0 7
17489: PPUSH
17490: CALL_OW 1
17494: ST_TO_ADDR
17495: GO 17463
17497: POP
17498: POP
// end ;
17499: GO 17429
17501: POP
17502: POP
// if not result then
17503: LD_VAR 0 2
17507: NOT
17508: IFFALSE 17512
// exit ;
17510: GO 17660
// mech := result [ 1 ] ;
17512: LD_ADDR_VAR 0 5
17516: PUSH
17517: LD_VAR 0 2
17521: PUSH
17522: LD_INT 1
17524: ARRAY
17525: ST_TO_ADDR
// if result > 1 then
17526: LD_VAR 0 2
17530: PUSH
17531: LD_INT 1
17533: GREATER
17534: IFFALSE 17646
// begin for i = 2 to result do
17536: LD_ADDR_VAR 0 3
17540: PUSH
17541: DOUBLE
17542: LD_INT 2
17544: DEC
17545: ST_TO_ADDR
17546: LD_VAR 0 2
17550: PUSH
17551: FOR_TO
17552: IFFALSE 17644
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17554: LD_ADDR_VAR 0 4
17558: PUSH
17559: LD_VAR 0 2
17563: PUSH
17564: LD_VAR 0 3
17568: ARRAY
17569: PPUSH
17570: LD_INT 3
17572: PPUSH
17573: CALL_OW 259
17577: PUSH
17578: LD_VAR 0 2
17582: PUSH
17583: LD_VAR 0 3
17587: ARRAY
17588: PPUSH
17589: CALL_OW 432
17593: MINUS
17594: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17595: LD_VAR 0 4
17599: PUSH
17600: LD_VAR 0 5
17604: PPUSH
17605: LD_INT 3
17607: PPUSH
17608: CALL_OW 259
17612: PUSH
17613: LD_VAR 0 5
17617: PPUSH
17618: CALL_OW 432
17622: MINUS
17623: GREATEREQUAL
17624: IFFALSE 17642
// mech := result [ i ] ;
17626: LD_ADDR_VAR 0 5
17630: PUSH
17631: LD_VAR 0 2
17635: PUSH
17636: LD_VAR 0 3
17640: ARRAY
17641: ST_TO_ADDR
// end ;
17642: GO 17551
17644: POP
17645: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17646: LD_VAR 0 1
17650: PPUSH
17651: LD_VAR 0 5
17655: PPUSH
17656: CALL_OW 135
// end ;
17660: LD_VAR 0 2
17664: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17665: LD_INT 0
17667: PPUSH
17668: PPUSH
17669: PPUSH
17670: PPUSH
17671: PPUSH
17672: PPUSH
17673: PPUSH
17674: PPUSH
17675: PPUSH
17676: PPUSH
17677: PPUSH
17678: PPUSH
17679: PPUSH
// result := [ ] ;
17680: LD_ADDR_VAR 0 7
17684: PUSH
17685: EMPTY
17686: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL_OW 266
17696: PUSH
17697: LD_INT 0
17699: PUSH
17700: LD_INT 1
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: IN
17707: NOT
17708: IFFALSE 17712
// exit ;
17710: GO 19346
// if name then
17712: LD_VAR 0 3
17716: IFFALSE 17732
// SetBName ( base_dep , name ) ;
17718: LD_VAR 0 1
17722: PPUSH
17723: LD_VAR 0 3
17727: PPUSH
17728: CALL_OW 500
// base := GetBase ( base_dep ) ;
17732: LD_ADDR_VAR 0 15
17736: PUSH
17737: LD_VAR 0 1
17741: PPUSH
17742: CALL_OW 274
17746: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17747: LD_ADDR_VAR 0 16
17751: PUSH
17752: LD_VAR 0 1
17756: PPUSH
17757: CALL_OW 255
17761: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17762: LD_ADDR_VAR 0 17
17766: PUSH
17767: LD_VAR 0 1
17771: PPUSH
17772: CALL_OW 248
17776: ST_TO_ADDR
// if sources then
17777: LD_VAR 0 5
17781: IFFALSE 17828
// for i = 1 to 3 do
17783: LD_ADDR_VAR 0 8
17787: PUSH
17788: DOUBLE
17789: LD_INT 1
17791: DEC
17792: ST_TO_ADDR
17793: LD_INT 3
17795: PUSH
17796: FOR_TO
17797: IFFALSE 17826
// AddResourceType ( base , i , sources [ i ] ) ;
17799: LD_VAR 0 15
17803: PPUSH
17804: LD_VAR 0 8
17808: PPUSH
17809: LD_VAR 0 5
17813: PUSH
17814: LD_VAR 0 8
17818: ARRAY
17819: PPUSH
17820: CALL_OW 276
17824: GO 17796
17826: POP
17827: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17828: LD_ADDR_VAR 0 18
17832: PUSH
17833: LD_VAR 0 15
17837: PPUSH
17838: LD_VAR 0 2
17842: PPUSH
17843: LD_INT 1
17845: PPUSH
17846: CALL 17089 0 3
17850: ST_TO_ADDR
// InitHc ;
17851: CALL_OW 19
// InitUc ;
17855: CALL_OW 18
// uc_side := side ;
17859: LD_ADDR_OWVAR 20
17863: PUSH
17864: LD_VAR 0 16
17868: ST_TO_ADDR
// uc_nation := nation ;
17869: LD_ADDR_OWVAR 21
17873: PUSH
17874: LD_VAR 0 17
17878: ST_TO_ADDR
// if buildings then
17879: LD_VAR 0 18
17883: IFFALSE 19205
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17885: LD_ADDR_VAR 0 19
17889: PUSH
17890: LD_VAR 0 18
17894: PPUSH
17895: LD_INT 2
17897: PUSH
17898: LD_INT 30
17900: PUSH
17901: LD_INT 29
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 30
17910: PUSH
17911: LD_INT 30
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: EMPTY
17919: LIST
17920: LIST
17921: LIST
17922: PPUSH
17923: CALL_OW 72
17927: ST_TO_ADDR
// if tmp then
17928: LD_VAR 0 19
17932: IFFALSE 17980
// for i in tmp do
17934: LD_ADDR_VAR 0 8
17938: PUSH
17939: LD_VAR 0 19
17943: PUSH
17944: FOR_IN
17945: IFFALSE 17978
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17947: LD_VAR 0 8
17951: PPUSH
17952: CALL_OW 250
17956: PPUSH
17957: LD_VAR 0 8
17961: PPUSH
17962: CALL_OW 251
17966: PPUSH
17967: LD_VAR 0 16
17971: PPUSH
17972: CALL_OW 441
17976: GO 17944
17978: POP
17979: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17980: LD_VAR 0 18
17984: PPUSH
17985: LD_INT 2
17987: PUSH
17988: LD_INT 30
17990: PUSH
17991: LD_INT 32
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 30
18000: PUSH
18001: LD_INT 33
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: LIST
18012: PPUSH
18013: CALL_OW 72
18017: IFFALSE 18105
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18019: LD_ADDR_VAR 0 8
18023: PUSH
18024: LD_VAR 0 18
18028: PPUSH
18029: LD_INT 2
18031: PUSH
18032: LD_INT 30
18034: PUSH
18035: LD_INT 32
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 30
18044: PUSH
18045: LD_INT 33
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: LIST
18056: PPUSH
18057: CALL_OW 72
18061: PUSH
18062: FOR_IN
18063: IFFALSE 18103
// begin if not GetBWeapon ( i ) then
18065: LD_VAR 0 8
18069: PPUSH
18070: CALL_OW 269
18074: NOT
18075: IFFALSE 18101
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18077: LD_VAR 0 8
18081: PPUSH
18082: LD_VAR 0 8
18086: PPUSH
18087: LD_VAR 0 2
18091: PPUSH
18092: CALL 19351 0 2
18096: PPUSH
18097: CALL_OW 431
// end ;
18101: GO 18062
18103: POP
18104: POP
// end ; for i = 1 to personel do
18105: LD_ADDR_VAR 0 8
18109: PUSH
18110: DOUBLE
18111: LD_INT 1
18113: DEC
18114: ST_TO_ADDR
18115: LD_VAR 0 6
18119: PUSH
18120: FOR_TO
18121: IFFALSE 19185
// begin if i > 4 then
18123: LD_VAR 0 8
18127: PUSH
18128: LD_INT 4
18130: GREATER
18131: IFFALSE 18135
// break ;
18133: GO 19185
// case i of 1 :
18135: LD_VAR 0 8
18139: PUSH
18140: LD_INT 1
18142: DOUBLE
18143: EQUAL
18144: IFTRUE 18148
18146: GO 18228
18148: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18149: LD_ADDR_VAR 0 12
18153: PUSH
18154: LD_VAR 0 18
18158: PPUSH
18159: LD_INT 22
18161: PUSH
18162: LD_VAR 0 16
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 58
18173: PUSH
18174: EMPTY
18175: LIST
18176: PUSH
18177: LD_INT 2
18179: PUSH
18180: LD_INT 30
18182: PUSH
18183: LD_INT 32
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 30
18192: PUSH
18193: LD_INT 4
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 30
18202: PUSH
18203: LD_INT 5
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: LIST
18220: PPUSH
18221: CALL_OW 72
18225: ST_TO_ADDR
18226: GO 18450
18228: LD_INT 2
18230: DOUBLE
18231: EQUAL
18232: IFTRUE 18236
18234: GO 18298
18236: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18237: LD_ADDR_VAR 0 12
18241: PUSH
18242: LD_VAR 0 18
18246: PPUSH
18247: LD_INT 22
18249: PUSH
18250: LD_VAR 0 16
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 2
18261: PUSH
18262: LD_INT 30
18264: PUSH
18265: LD_INT 0
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 30
18274: PUSH
18275: LD_INT 1
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: LIST
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PPUSH
18291: CALL_OW 72
18295: ST_TO_ADDR
18296: GO 18450
18298: LD_INT 3
18300: DOUBLE
18301: EQUAL
18302: IFTRUE 18306
18304: GO 18368
18306: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18307: LD_ADDR_VAR 0 12
18311: PUSH
18312: LD_VAR 0 18
18316: PPUSH
18317: LD_INT 22
18319: PUSH
18320: LD_VAR 0 16
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 2
18331: PUSH
18332: LD_INT 30
18334: PUSH
18335: LD_INT 2
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 30
18344: PUSH
18345: LD_INT 3
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: LIST
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PPUSH
18361: CALL_OW 72
18365: ST_TO_ADDR
18366: GO 18450
18368: LD_INT 4
18370: DOUBLE
18371: EQUAL
18372: IFTRUE 18376
18374: GO 18449
18376: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18377: LD_ADDR_VAR 0 12
18381: PUSH
18382: LD_VAR 0 18
18386: PPUSH
18387: LD_INT 22
18389: PUSH
18390: LD_VAR 0 16
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 2
18401: PUSH
18402: LD_INT 30
18404: PUSH
18405: LD_INT 6
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 30
18414: PUSH
18415: LD_INT 7
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 30
18424: PUSH
18425: LD_INT 8
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PPUSH
18442: CALL_OW 72
18446: ST_TO_ADDR
18447: GO 18450
18449: POP
// if i = 1 then
18450: LD_VAR 0 8
18454: PUSH
18455: LD_INT 1
18457: EQUAL
18458: IFFALSE 18569
// begin tmp := [ ] ;
18460: LD_ADDR_VAR 0 19
18464: PUSH
18465: EMPTY
18466: ST_TO_ADDR
// for j in f do
18467: LD_ADDR_VAR 0 9
18471: PUSH
18472: LD_VAR 0 12
18476: PUSH
18477: FOR_IN
18478: IFFALSE 18551
// if GetBType ( j ) = b_bunker then
18480: LD_VAR 0 9
18484: PPUSH
18485: CALL_OW 266
18489: PUSH
18490: LD_INT 32
18492: EQUAL
18493: IFFALSE 18520
// tmp := Insert ( tmp , 1 , j ) else
18495: LD_ADDR_VAR 0 19
18499: PUSH
18500: LD_VAR 0 19
18504: PPUSH
18505: LD_INT 1
18507: PPUSH
18508: LD_VAR 0 9
18512: PPUSH
18513: CALL_OW 2
18517: ST_TO_ADDR
18518: GO 18549
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18520: LD_ADDR_VAR 0 19
18524: PUSH
18525: LD_VAR 0 19
18529: PPUSH
18530: LD_VAR 0 19
18534: PUSH
18535: LD_INT 1
18537: PLUS
18538: PPUSH
18539: LD_VAR 0 9
18543: PPUSH
18544: CALL_OW 2
18548: ST_TO_ADDR
18549: GO 18477
18551: POP
18552: POP
// if tmp then
18553: LD_VAR 0 19
18557: IFFALSE 18569
// f := tmp ;
18559: LD_ADDR_VAR 0 12
18563: PUSH
18564: LD_VAR 0 19
18568: ST_TO_ADDR
// end ; x := personel [ i ] ;
18569: LD_ADDR_VAR 0 13
18573: PUSH
18574: LD_VAR 0 6
18578: PUSH
18579: LD_VAR 0 8
18583: ARRAY
18584: ST_TO_ADDR
// if x = - 1 then
18585: LD_VAR 0 13
18589: PUSH
18590: LD_INT 1
18592: NEG
18593: EQUAL
18594: IFFALSE 18803
// begin for j in f do
18596: LD_ADDR_VAR 0 9
18600: PUSH
18601: LD_VAR 0 12
18605: PUSH
18606: FOR_IN
18607: IFFALSE 18799
// repeat InitHc ;
18609: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18613: LD_VAR 0 9
18617: PPUSH
18618: CALL_OW 266
18622: PUSH
18623: LD_INT 5
18625: EQUAL
18626: IFFALSE 18696
// begin if UnitsInside ( j ) < 3 then
18628: LD_VAR 0 9
18632: PPUSH
18633: CALL_OW 313
18637: PUSH
18638: LD_INT 3
18640: LESS
18641: IFFALSE 18677
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18643: LD_INT 0
18645: PPUSH
18646: LD_INT 5
18648: PUSH
18649: LD_INT 8
18651: PUSH
18652: LD_INT 9
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: LIST
18659: PUSH
18660: LD_VAR 0 17
18664: ARRAY
18665: PPUSH
18666: LD_VAR 0 4
18670: PPUSH
18671: CALL_OW 380
18675: GO 18694
// PrepareHuman ( false , i , skill ) ;
18677: LD_INT 0
18679: PPUSH
18680: LD_VAR 0 8
18684: PPUSH
18685: LD_VAR 0 4
18689: PPUSH
18690: CALL_OW 380
// end else
18694: GO 18713
// PrepareHuman ( false , i , skill ) ;
18696: LD_INT 0
18698: PPUSH
18699: LD_VAR 0 8
18703: PPUSH
18704: LD_VAR 0 4
18708: PPUSH
18709: CALL_OW 380
// un := CreateHuman ;
18713: LD_ADDR_VAR 0 14
18717: PUSH
18718: CALL_OW 44
18722: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18723: LD_ADDR_VAR 0 7
18727: PUSH
18728: LD_VAR 0 7
18732: PPUSH
18733: LD_INT 1
18735: PPUSH
18736: LD_VAR 0 14
18740: PPUSH
18741: CALL_OW 2
18745: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18746: LD_VAR 0 14
18750: PPUSH
18751: LD_VAR 0 9
18755: PPUSH
18756: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18760: LD_VAR 0 9
18764: PPUSH
18765: CALL_OW 313
18769: PUSH
18770: LD_INT 6
18772: EQUAL
18773: PUSH
18774: LD_VAR 0 9
18778: PPUSH
18779: CALL_OW 266
18783: PUSH
18784: LD_INT 32
18786: PUSH
18787: LD_INT 31
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: IN
18794: OR
18795: IFFALSE 18609
18797: GO 18606
18799: POP
18800: POP
// end else
18801: GO 19183
// for j = 1 to x do
18803: LD_ADDR_VAR 0 9
18807: PUSH
18808: DOUBLE
18809: LD_INT 1
18811: DEC
18812: ST_TO_ADDR
18813: LD_VAR 0 13
18817: PUSH
18818: FOR_TO
18819: IFFALSE 19181
// begin InitHc ;
18821: CALL_OW 19
// if not f then
18825: LD_VAR 0 12
18829: NOT
18830: IFFALSE 18919
// begin PrepareHuman ( false , i , skill ) ;
18832: LD_INT 0
18834: PPUSH
18835: LD_VAR 0 8
18839: PPUSH
18840: LD_VAR 0 4
18844: PPUSH
18845: CALL_OW 380
// un := CreateHuman ;
18849: LD_ADDR_VAR 0 14
18853: PUSH
18854: CALL_OW 44
18858: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18859: LD_ADDR_VAR 0 7
18863: PUSH
18864: LD_VAR 0 7
18868: PPUSH
18869: LD_INT 1
18871: PPUSH
18872: LD_VAR 0 14
18876: PPUSH
18877: CALL_OW 2
18881: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18882: LD_VAR 0 14
18886: PPUSH
18887: LD_VAR 0 1
18891: PPUSH
18892: CALL_OW 250
18896: PPUSH
18897: LD_VAR 0 1
18901: PPUSH
18902: CALL_OW 251
18906: PPUSH
18907: LD_INT 10
18909: PPUSH
18910: LD_INT 0
18912: PPUSH
18913: CALL_OW 50
// continue ;
18917: GO 18818
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18919: LD_VAR 0 12
18923: PUSH
18924: LD_INT 1
18926: ARRAY
18927: PPUSH
18928: CALL_OW 313
18932: PUSH
18933: LD_VAR 0 12
18937: PUSH
18938: LD_INT 1
18940: ARRAY
18941: PPUSH
18942: CALL_OW 266
18946: PUSH
18947: LD_INT 32
18949: PUSH
18950: LD_INT 31
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: IN
18957: AND
18958: PUSH
18959: LD_VAR 0 12
18963: PUSH
18964: LD_INT 1
18966: ARRAY
18967: PPUSH
18968: CALL_OW 313
18972: PUSH
18973: LD_INT 6
18975: EQUAL
18976: OR
18977: IFFALSE 18997
// f := Delete ( f , 1 ) ;
18979: LD_ADDR_VAR 0 12
18983: PUSH
18984: LD_VAR 0 12
18988: PPUSH
18989: LD_INT 1
18991: PPUSH
18992: CALL_OW 3
18996: ST_TO_ADDR
// if not f then
18997: LD_VAR 0 12
19001: NOT
19002: IFFALSE 19020
// begin x := x + 2 ;
19004: LD_ADDR_VAR 0 13
19008: PUSH
19009: LD_VAR 0 13
19013: PUSH
19014: LD_INT 2
19016: PLUS
19017: ST_TO_ADDR
// continue ;
19018: GO 18818
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19020: LD_VAR 0 12
19024: PUSH
19025: LD_INT 1
19027: ARRAY
19028: PPUSH
19029: CALL_OW 266
19033: PUSH
19034: LD_INT 5
19036: EQUAL
19037: IFFALSE 19111
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19039: LD_VAR 0 12
19043: PUSH
19044: LD_INT 1
19046: ARRAY
19047: PPUSH
19048: CALL_OW 313
19052: PUSH
19053: LD_INT 3
19055: LESS
19056: IFFALSE 19092
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19058: LD_INT 0
19060: PPUSH
19061: LD_INT 5
19063: PUSH
19064: LD_INT 8
19066: PUSH
19067: LD_INT 9
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: LIST
19074: PUSH
19075: LD_VAR 0 17
19079: ARRAY
19080: PPUSH
19081: LD_VAR 0 4
19085: PPUSH
19086: CALL_OW 380
19090: GO 19109
// PrepareHuman ( false , i , skill ) ;
19092: LD_INT 0
19094: PPUSH
19095: LD_VAR 0 8
19099: PPUSH
19100: LD_VAR 0 4
19104: PPUSH
19105: CALL_OW 380
// end else
19109: GO 19128
// PrepareHuman ( false , i , skill ) ;
19111: LD_INT 0
19113: PPUSH
19114: LD_VAR 0 8
19118: PPUSH
19119: LD_VAR 0 4
19123: PPUSH
19124: CALL_OW 380
// un := CreateHuman ;
19128: LD_ADDR_VAR 0 14
19132: PUSH
19133: CALL_OW 44
19137: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19138: LD_ADDR_VAR 0 7
19142: PUSH
19143: LD_VAR 0 7
19147: PPUSH
19148: LD_INT 1
19150: PPUSH
19151: LD_VAR 0 14
19155: PPUSH
19156: CALL_OW 2
19160: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19161: LD_VAR 0 14
19165: PPUSH
19166: LD_VAR 0 12
19170: PUSH
19171: LD_INT 1
19173: ARRAY
19174: PPUSH
19175: CALL_OW 52
// end ;
19179: GO 18818
19181: POP
19182: POP
// end ;
19183: GO 18120
19185: POP
19186: POP
// result := result ^ buildings ;
19187: LD_ADDR_VAR 0 7
19191: PUSH
19192: LD_VAR 0 7
19196: PUSH
19197: LD_VAR 0 18
19201: ADD
19202: ST_TO_ADDR
// end else
19203: GO 19346
// begin for i = 1 to personel do
19205: LD_ADDR_VAR 0 8
19209: PUSH
19210: DOUBLE
19211: LD_INT 1
19213: DEC
19214: ST_TO_ADDR
19215: LD_VAR 0 6
19219: PUSH
19220: FOR_TO
19221: IFFALSE 19344
// begin if i > 4 then
19223: LD_VAR 0 8
19227: PUSH
19228: LD_INT 4
19230: GREATER
19231: IFFALSE 19235
// break ;
19233: GO 19344
// x := personel [ i ] ;
19235: LD_ADDR_VAR 0 13
19239: PUSH
19240: LD_VAR 0 6
19244: PUSH
19245: LD_VAR 0 8
19249: ARRAY
19250: ST_TO_ADDR
// if x = - 1 then
19251: LD_VAR 0 13
19255: PUSH
19256: LD_INT 1
19258: NEG
19259: EQUAL
19260: IFFALSE 19264
// continue ;
19262: GO 19220
// PrepareHuman ( false , i , skill ) ;
19264: LD_INT 0
19266: PPUSH
19267: LD_VAR 0 8
19271: PPUSH
19272: LD_VAR 0 4
19276: PPUSH
19277: CALL_OW 380
// un := CreateHuman ;
19281: LD_ADDR_VAR 0 14
19285: PUSH
19286: CALL_OW 44
19290: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19291: LD_VAR 0 14
19295: PPUSH
19296: LD_VAR 0 1
19300: PPUSH
19301: CALL_OW 250
19305: PPUSH
19306: LD_VAR 0 1
19310: PPUSH
19311: CALL_OW 251
19315: PPUSH
19316: LD_INT 10
19318: PPUSH
19319: LD_INT 0
19321: PPUSH
19322: CALL_OW 50
// result := result ^ un ;
19326: LD_ADDR_VAR 0 7
19330: PUSH
19331: LD_VAR 0 7
19335: PUSH
19336: LD_VAR 0 14
19340: ADD
19341: ST_TO_ADDR
// end ;
19342: GO 19220
19344: POP
19345: POP
// end ; end ;
19346: LD_VAR 0 7
19350: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19351: LD_INT 0
19353: PPUSH
19354: PPUSH
19355: PPUSH
19356: PPUSH
19357: PPUSH
19358: PPUSH
19359: PPUSH
19360: PPUSH
19361: PPUSH
19362: PPUSH
19363: PPUSH
19364: PPUSH
19365: PPUSH
19366: PPUSH
19367: PPUSH
19368: PPUSH
// result := false ;
19369: LD_ADDR_VAR 0 3
19373: PUSH
19374: LD_INT 0
19376: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19377: LD_VAR 0 1
19381: NOT
19382: PUSH
19383: LD_VAR 0 1
19387: PPUSH
19388: CALL_OW 266
19392: PUSH
19393: LD_INT 32
19395: PUSH
19396: LD_INT 33
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: IN
19403: NOT
19404: OR
19405: IFFALSE 19409
// exit ;
19407: GO 20518
// nat := GetNation ( tower ) ;
19409: LD_ADDR_VAR 0 12
19413: PUSH
19414: LD_VAR 0 1
19418: PPUSH
19419: CALL_OW 248
19423: ST_TO_ADDR
// side := GetSide ( tower ) ;
19424: LD_ADDR_VAR 0 16
19428: PUSH
19429: LD_VAR 0 1
19433: PPUSH
19434: CALL_OW 255
19438: ST_TO_ADDR
// x := GetX ( tower ) ;
19439: LD_ADDR_VAR 0 10
19443: PUSH
19444: LD_VAR 0 1
19448: PPUSH
19449: CALL_OW 250
19453: ST_TO_ADDR
// y := GetY ( tower ) ;
19454: LD_ADDR_VAR 0 11
19458: PUSH
19459: LD_VAR 0 1
19463: PPUSH
19464: CALL_OW 251
19468: ST_TO_ADDR
// if not x or not y then
19469: LD_VAR 0 10
19473: NOT
19474: PUSH
19475: LD_VAR 0 11
19479: NOT
19480: OR
19481: IFFALSE 19485
// exit ;
19483: GO 20518
// weapon := 0 ;
19485: LD_ADDR_VAR 0 18
19489: PUSH
19490: LD_INT 0
19492: ST_TO_ADDR
// fac_list := [ ] ;
19493: LD_ADDR_VAR 0 17
19497: PUSH
19498: EMPTY
19499: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19500: LD_ADDR_VAR 0 6
19504: PUSH
19505: LD_VAR 0 1
19509: PPUSH
19510: CALL_OW 274
19514: PPUSH
19515: LD_VAR 0 2
19519: PPUSH
19520: LD_INT 0
19522: PPUSH
19523: CALL 17089 0 3
19527: PPUSH
19528: LD_INT 30
19530: PUSH
19531: LD_INT 3
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 72
19542: ST_TO_ADDR
// if not factories then
19543: LD_VAR 0 6
19547: NOT
19548: IFFALSE 19552
// exit ;
19550: GO 20518
// for i in factories do
19552: LD_ADDR_VAR 0 8
19556: PUSH
19557: LD_VAR 0 6
19561: PUSH
19562: FOR_IN
19563: IFFALSE 19588
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19565: LD_ADDR_VAR 0 17
19569: PUSH
19570: LD_VAR 0 17
19574: PUSH
19575: LD_VAR 0 8
19579: PPUSH
19580: CALL_OW 478
19584: UNION
19585: ST_TO_ADDR
19586: GO 19562
19588: POP
19589: POP
// if not fac_list then
19590: LD_VAR 0 17
19594: NOT
19595: IFFALSE 19599
// exit ;
19597: GO 20518
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19599: LD_ADDR_VAR 0 5
19603: PUSH
19604: LD_INT 4
19606: PUSH
19607: LD_INT 5
19609: PUSH
19610: LD_INT 9
19612: PUSH
19613: LD_INT 10
19615: PUSH
19616: LD_INT 6
19618: PUSH
19619: LD_INT 7
19621: PUSH
19622: LD_INT 11
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 27
19636: PUSH
19637: LD_INT 28
19639: PUSH
19640: LD_INT 26
19642: PUSH
19643: LD_INT 30
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 43
19654: PUSH
19655: LD_INT 44
19657: PUSH
19658: LD_INT 46
19660: PUSH
19661: LD_INT 45
19663: PUSH
19664: LD_INT 47
19666: PUSH
19667: LD_INT 49
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: LIST
19682: PUSH
19683: LD_VAR 0 12
19687: ARRAY
19688: ST_TO_ADDR
// list := list isect fac_list ;
19689: LD_ADDR_VAR 0 5
19693: PUSH
19694: LD_VAR 0 5
19698: PUSH
19699: LD_VAR 0 17
19703: ISECT
19704: ST_TO_ADDR
// if not list then
19705: LD_VAR 0 5
19709: NOT
19710: IFFALSE 19714
// exit ;
19712: GO 20518
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19714: LD_VAR 0 12
19718: PUSH
19719: LD_INT 3
19721: EQUAL
19722: PUSH
19723: LD_INT 49
19725: PUSH
19726: LD_VAR 0 5
19730: IN
19731: AND
19732: PUSH
19733: LD_INT 31
19735: PPUSH
19736: LD_VAR 0 16
19740: PPUSH
19741: CALL_OW 321
19745: PUSH
19746: LD_INT 2
19748: EQUAL
19749: AND
19750: IFFALSE 19810
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19752: LD_INT 22
19754: PUSH
19755: LD_VAR 0 16
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 35
19766: PUSH
19767: LD_INT 49
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 91
19776: PUSH
19777: LD_VAR 0 1
19781: PUSH
19782: LD_INT 10
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: LIST
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: LIST
19794: PPUSH
19795: CALL_OW 69
19799: NOT
19800: IFFALSE 19810
// weapon := ru_time_lapser ;
19802: LD_ADDR_VAR 0 18
19806: PUSH
19807: LD_INT 49
19809: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19810: LD_VAR 0 12
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: LD_INT 2
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: IN
19825: PUSH
19826: LD_INT 11
19828: PUSH
19829: LD_VAR 0 5
19833: IN
19834: PUSH
19835: LD_INT 30
19837: PUSH
19838: LD_VAR 0 5
19842: IN
19843: OR
19844: AND
19845: PUSH
19846: LD_INT 6
19848: PPUSH
19849: LD_VAR 0 16
19853: PPUSH
19854: CALL_OW 321
19858: PUSH
19859: LD_INT 2
19861: EQUAL
19862: AND
19863: IFFALSE 20028
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19865: LD_INT 22
19867: PUSH
19868: LD_VAR 0 16
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: LD_INT 2
19879: PUSH
19880: LD_INT 35
19882: PUSH
19883: LD_INT 11
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 35
19892: PUSH
19893: LD_INT 30
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 91
19907: PUSH
19908: LD_VAR 0 1
19912: PUSH
19913: LD_INT 18
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: LIST
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: PPUSH
19926: CALL_OW 69
19930: NOT
19931: PUSH
19932: LD_INT 22
19934: PUSH
19935: LD_VAR 0 16
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: PUSH
19944: LD_INT 2
19946: PUSH
19947: LD_INT 30
19949: PUSH
19950: LD_INT 32
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 30
19959: PUSH
19960: LD_INT 33
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 91
19974: PUSH
19975: LD_VAR 0 1
19979: PUSH
19980: LD_INT 12
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: LIST
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: PUSH
19993: EMPTY
19994: LIST
19995: PPUSH
19996: CALL_OW 69
20000: PUSH
20001: LD_INT 2
20003: GREATER
20004: AND
20005: IFFALSE 20028
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20007: LD_ADDR_VAR 0 18
20011: PUSH
20012: LD_INT 11
20014: PUSH
20015: LD_INT 30
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_VAR 0 12
20026: ARRAY
20027: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20028: LD_VAR 0 18
20032: NOT
20033: PUSH
20034: LD_INT 40
20036: PPUSH
20037: LD_VAR 0 16
20041: PPUSH
20042: CALL_OW 321
20046: PUSH
20047: LD_INT 2
20049: EQUAL
20050: AND
20051: PUSH
20052: LD_INT 7
20054: PUSH
20055: LD_VAR 0 5
20059: IN
20060: PUSH
20061: LD_INT 28
20063: PUSH
20064: LD_VAR 0 5
20068: IN
20069: OR
20070: PUSH
20071: LD_INT 45
20073: PUSH
20074: LD_VAR 0 5
20078: IN
20079: OR
20080: AND
20081: IFFALSE 20335
// begin hex := GetHexInfo ( x , y ) ;
20083: LD_ADDR_VAR 0 4
20087: PUSH
20088: LD_VAR 0 10
20092: PPUSH
20093: LD_VAR 0 11
20097: PPUSH
20098: CALL_OW 546
20102: ST_TO_ADDR
// if hex [ 1 ] then
20103: LD_VAR 0 4
20107: PUSH
20108: LD_INT 1
20110: ARRAY
20111: IFFALSE 20115
// exit ;
20113: GO 20518
// height := hex [ 2 ] ;
20115: LD_ADDR_VAR 0 15
20119: PUSH
20120: LD_VAR 0 4
20124: PUSH
20125: LD_INT 2
20127: ARRAY
20128: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20129: LD_ADDR_VAR 0 14
20133: PUSH
20134: LD_INT 0
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: LD_INT 3
20142: PUSH
20143: LD_INT 5
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: ST_TO_ADDR
// for i in tmp do
20152: LD_ADDR_VAR 0 8
20156: PUSH
20157: LD_VAR 0 14
20161: PUSH
20162: FOR_IN
20163: IFFALSE 20333
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20165: LD_ADDR_VAR 0 9
20169: PUSH
20170: LD_VAR 0 10
20174: PPUSH
20175: LD_VAR 0 8
20179: PPUSH
20180: LD_INT 5
20182: PPUSH
20183: CALL_OW 272
20187: PUSH
20188: LD_VAR 0 11
20192: PPUSH
20193: LD_VAR 0 8
20197: PPUSH
20198: LD_INT 5
20200: PPUSH
20201: CALL_OW 273
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20210: LD_VAR 0 9
20214: PUSH
20215: LD_INT 1
20217: ARRAY
20218: PPUSH
20219: LD_VAR 0 9
20223: PUSH
20224: LD_INT 2
20226: ARRAY
20227: PPUSH
20228: CALL_OW 488
20232: IFFALSE 20331
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20234: LD_ADDR_VAR 0 4
20238: PUSH
20239: LD_VAR 0 9
20243: PUSH
20244: LD_INT 1
20246: ARRAY
20247: PPUSH
20248: LD_VAR 0 9
20252: PUSH
20253: LD_INT 2
20255: ARRAY
20256: PPUSH
20257: CALL_OW 546
20261: ST_TO_ADDR
// if hex [ 1 ] then
20262: LD_VAR 0 4
20266: PUSH
20267: LD_INT 1
20269: ARRAY
20270: IFFALSE 20274
// continue ;
20272: GO 20162
// h := hex [ 2 ] ;
20274: LD_ADDR_VAR 0 13
20278: PUSH
20279: LD_VAR 0 4
20283: PUSH
20284: LD_INT 2
20286: ARRAY
20287: ST_TO_ADDR
// if h + 7 < height then
20288: LD_VAR 0 13
20292: PUSH
20293: LD_INT 7
20295: PLUS
20296: PUSH
20297: LD_VAR 0 15
20301: LESS
20302: IFFALSE 20331
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20304: LD_ADDR_VAR 0 18
20308: PUSH
20309: LD_INT 7
20311: PUSH
20312: LD_INT 28
20314: PUSH
20315: LD_INT 45
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: PUSH
20323: LD_VAR 0 12
20327: ARRAY
20328: ST_TO_ADDR
// break ;
20329: GO 20333
// end ; end ; end ;
20331: GO 20162
20333: POP
20334: POP
// end ; if not weapon then
20335: LD_VAR 0 18
20339: NOT
20340: IFFALSE 20400
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20342: LD_ADDR_VAR 0 5
20346: PUSH
20347: LD_VAR 0 5
20351: PUSH
20352: LD_INT 11
20354: PUSH
20355: LD_INT 30
20357: PUSH
20358: LD_INT 49
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: LIST
20365: DIFF
20366: ST_TO_ADDR
// if not list then
20367: LD_VAR 0 5
20371: NOT
20372: IFFALSE 20376
// exit ;
20374: GO 20518
// weapon := list [ rand ( 1 , list ) ] ;
20376: LD_ADDR_VAR 0 18
20380: PUSH
20381: LD_VAR 0 5
20385: PUSH
20386: LD_INT 1
20388: PPUSH
20389: LD_VAR 0 5
20393: PPUSH
20394: CALL_OW 12
20398: ARRAY
20399: ST_TO_ADDR
// end ; if weapon then
20400: LD_VAR 0 18
20404: IFFALSE 20518
// begin tmp := CostOfWeapon ( weapon ) ;
20406: LD_ADDR_VAR 0 14
20410: PUSH
20411: LD_VAR 0 18
20415: PPUSH
20416: CALL_OW 451
20420: ST_TO_ADDR
// j := GetBase ( tower ) ;
20421: LD_ADDR_VAR 0 9
20425: PUSH
20426: LD_VAR 0 1
20430: PPUSH
20431: CALL_OW 274
20435: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20436: LD_VAR 0 9
20440: PPUSH
20441: LD_INT 1
20443: PPUSH
20444: CALL_OW 275
20448: PUSH
20449: LD_VAR 0 14
20453: PUSH
20454: LD_INT 1
20456: ARRAY
20457: GREATEREQUAL
20458: PUSH
20459: LD_VAR 0 9
20463: PPUSH
20464: LD_INT 2
20466: PPUSH
20467: CALL_OW 275
20471: PUSH
20472: LD_VAR 0 14
20476: PUSH
20477: LD_INT 2
20479: ARRAY
20480: GREATEREQUAL
20481: AND
20482: PUSH
20483: LD_VAR 0 9
20487: PPUSH
20488: LD_INT 3
20490: PPUSH
20491: CALL_OW 275
20495: PUSH
20496: LD_VAR 0 14
20500: PUSH
20501: LD_INT 3
20503: ARRAY
20504: GREATEREQUAL
20505: AND
20506: IFFALSE 20518
// result := weapon ;
20508: LD_ADDR_VAR 0 3
20512: PUSH
20513: LD_VAR 0 18
20517: ST_TO_ADDR
// end ; end ;
20518: LD_VAR 0 3
20522: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20523: LD_INT 0
20525: PPUSH
20526: PPUSH
// result := true ;
20527: LD_ADDR_VAR 0 3
20531: PUSH
20532: LD_INT 1
20534: ST_TO_ADDR
// if array1 = array2 then
20535: LD_VAR 0 1
20539: PUSH
20540: LD_VAR 0 2
20544: EQUAL
20545: IFFALSE 20605
// begin for i = 1 to array1 do
20547: LD_ADDR_VAR 0 4
20551: PUSH
20552: DOUBLE
20553: LD_INT 1
20555: DEC
20556: ST_TO_ADDR
20557: LD_VAR 0 1
20561: PUSH
20562: FOR_TO
20563: IFFALSE 20601
// if array1 [ i ] <> array2 [ i ] then
20565: LD_VAR 0 1
20569: PUSH
20570: LD_VAR 0 4
20574: ARRAY
20575: PUSH
20576: LD_VAR 0 2
20580: PUSH
20581: LD_VAR 0 4
20585: ARRAY
20586: NONEQUAL
20587: IFFALSE 20599
// begin result := false ;
20589: LD_ADDR_VAR 0 3
20593: PUSH
20594: LD_INT 0
20596: ST_TO_ADDR
// break ;
20597: GO 20601
// end ;
20599: GO 20562
20601: POP
20602: POP
// end else
20603: GO 20613
// result := false ;
20605: LD_ADDR_VAR 0 3
20609: PUSH
20610: LD_INT 0
20612: ST_TO_ADDR
// end ;
20613: LD_VAR 0 3
20617: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20618: LD_INT 0
20620: PPUSH
20621: PPUSH
// if not array1 or not array2 then
20622: LD_VAR 0 1
20626: NOT
20627: PUSH
20628: LD_VAR 0 2
20632: NOT
20633: OR
20634: IFFALSE 20638
// exit ;
20636: GO 20702
// result := true ;
20638: LD_ADDR_VAR 0 3
20642: PUSH
20643: LD_INT 1
20645: ST_TO_ADDR
// for i = 1 to array1 do
20646: LD_ADDR_VAR 0 4
20650: PUSH
20651: DOUBLE
20652: LD_INT 1
20654: DEC
20655: ST_TO_ADDR
20656: LD_VAR 0 1
20660: PUSH
20661: FOR_TO
20662: IFFALSE 20700
// if array1 [ i ] <> array2 [ i ] then
20664: LD_VAR 0 1
20668: PUSH
20669: LD_VAR 0 4
20673: ARRAY
20674: PUSH
20675: LD_VAR 0 2
20679: PUSH
20680: LD_VAR 0 4
20684: ARRAY
20685: NONEQUAL
20686: IFFALSE 20698
// begin result := false ;
20688: LD_ADDR_VAR 0 3
20692: PUSH
20693: LD_INT 0
20695: ST_TO_ADDR
// break ;
20696: GO 20700
// end ;
20698: GO 20661
20700: POP
20701: POP
// end ;
20702: LD_VAR 0 3
20706: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20707: LD_INT 0
20709: PPUSH
20710: PPUSH
20711: PPUSH
// pom := GetBase ( fac ) ;
20712: LD_ADDR_VAR 0 5
20716: PUSH
20717: LD_VAR 0 1
20721: PPUSH
20722: CALL_OW 274
20726: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20727: LD_ADDR_VAR 0 4
20731: PUSH
20732: LD_VAR 0 2
20736: PUSH
20737: LD_INT 1
20739: ARRAY
20740: PPUSH
20741: LD_VAR 0 2
20745: PUSH
20746: LD_INT 2
20748: ARRAY
20749: PPUSH
20750: LD_VAR 0 2
20754: PUSH
20755: LD_INT 3
20757: ARRAY
20758: PPUSH
20759: LD_VAR 0 2
20763: PUSH
20764: LD_INT 4
20766: ARRAY
20767: PPUSH
20768: CALL_OW 449
20772: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20773: LD_ADDR_VAR 0 3
20777: PUSH
20778: LD_VAR 0 5
20782: PPUSH
20783: LD_INT 1
20785: PPUSH
20786: CALL_OW 275
20790: PUSH
20791: LD_VAR 0 4
20795: PUSH
20796: LD_INT 1
20798: ARRAY
20799: GREATEREQUAL
20800: PUSH
20801: LD_VAR 0 5
20805: PPUSH
20806: LD_INT 2
20808: PPUSH
20809: CALL_OW 275
20813: PUSH
20814: LD_VAR 0 4
20818: PUSH
20819: LD_INT 2
20821: ARRAY
20822: GREATEREQUAL
20823: AND
20824: PUSH
20825: LD_VAR 0 5
20829: PPUSH
20830: LD_INT 3
20832: PPUSH
20833: CALL_OW 275
20837: PUSH
20838: LD_VAR 0 4
20842: PUSH
20843: LD_INT 3
20845: ARRAY
20846: GREATEREQUAL
20847: AND
20848: ST_TO_ADDR
// end ;
20849: LD_VAR 0 3
20853: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20854: LD_INT 0
20856: PPUSH
20857: PPUSH
20858: PPUSH
20859: PPUSH
// pom := GetBase ( building ) ;
20860: LD_ADDR_VAR 0 3
20864: PUSH
20865: LD_VAR 0 1
20869: PPUSH
20870: CALL_OW 274
20874: ST_TO_ADDR
// if not pom then
20875: LD_VAR 0 3
20879: NOT
20880: IFFALSE 20884
// exit ;
20882: GO 21054
// btype := GetBType ( building ) ;
20884: LD_ADDR_VAR 0 5
20888: PUSH
20889: LD_VAR 0 1
20893: PPUSH
20894: CALL_OW 266
20898: ST_TO_ADDR
// if btype = b_armoury then
20899: LD_VAR 0 5
20903: PUSH
20904: LD_INT 4
20906: EQUAL
20907: IFFALSE 20917
// btype := b_barracks ;
20909: LD_ADDR_VAR 0 5
20913: PUSH
20914: LD_INT 5
20916: ST_TO_ADDR
// if btype = b_depot then
20917: LD_VAR 0 5
20921: PUSH
20922: LD_INT 0
20924: EQUAL
20925: IFFALSE 20935
// btype := b_warehouse ;
20927: LD_ADDR_VAR 0 5
20931: PUSH
20932: LD_INT 1
20934: ST_TO_ADDR
// if btype = b_workshop then
20935: LD_VAR 0 5
20939: PUSH
20940: LD_INT 2
20942: EQUAL
20943: IFFALSE 20953
// btype := b_factory ;
20945: LD_ADDR_VAR 0 5
20949: PUSH
20950: LD_INT 3
20952: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20953: LD_ADDR_VAR 0 4
20957: PUSH
20958: LD_VAR 0 5
20962: PPUSH
20963: LD_VAR 0 1
20967: PPUSH
20968: CALL_OW 248
20972: PPUSH
20973: CALL_OW 450
20977: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20978: LD_ADDR_VAR 0 2
20982: PUSH
20983: LD_VAR 0 3
20987: PPUSH
20988: LD_INT 1
20990: PPUSH
20991: CALL_OW 275
20995: PUSH
20996: LD_VAR 0 4
21000: PUSH
21001: LD_INT 1
21003: ARRAY
21004: GREATEREQUAL
21005: PUSH
21006: LD_VAR 0 3
21010: PPUSH
21011: LD_INT 2
21013: PPUSH
21014: CALL_OW 275
21018: PUSH
21019: LD_VAR 0 4
21023: PUSH
21024: LD_INT 2
21026: ARRAY
21027: GREATEREQUAL
21028: AND
21029: PUSH
21030: LD_VAR 0 3
21034: PPUSH
21035: LD_INT 3
21037: PPUSH
21038: CALL_OW 275
21042: PUSH
21043: LD_VAR 0 4
21047: PUSH
21048: LD_INT 3
21050: ARRAY
21051: GREATEREQUAL
21052: AND
21053: ST_TO_ADDR
// end ;
21054: LD_VAR 0 2
21058: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21059: LD_INT 0
21061: PPUSH
21062: PPUSH
21063: PPUSH
// pom := GetBase ( building ) ;
21064: LD_ADDR_VAR 0 4
21068: PUSH
21069: LD_VAR 0 1
21073: PPUSH
21074: CALL_OW 274
21078: ST_TO_ADDR
// if not pom then
21079: LD_VAR 0 4
21083: NOT
21084: IFFALSE 21088
// exit ;
21086: GO 21189
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21088: LD_ADDR_VAR 0 5
21092: PUSH
21093: LD_VAR 0 2
21097: PPUSH
21098: LD_VAR 0 1
21102: PPUSH
21103: CALL_OW 248
21107: PPUSH
21108: CALL_OW 450
21112: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21113: LD_ADDR_VAR 0 3
21117: PUSH
21118: LD_VAR 0 4
21122: PPUSH
21123: LD_INT 1
21125: PPUSH
21126: CALL_OW 275
21130: PUSH
21131: LD_VAR 0 5
21135: PUSH
21136: LD_INT 1
21138: ARRAY
21139: GREATEREQUAL
21140: PUSH
21141: LD_VAR 0 4
21145: PPUSH
21146: LD_INT 2
21148: PPUSH
21149: CALL_OW 275
21153: PUSH
21154: LD_VAR 0 5
21158: PUSH
21159: LD_INT 2
21161: ARRAY
21162: GREATEREQUAL
21163: AND
21164: PUSH
21165: LD_VAR 0 4
21169: PPUSH
21170: LD_INT 3
21172: PPUSH
21173: CALL_OW 275
21177: PUSH
21178: LD_VAR 0 5
21182: PUSH
21183: LD_INT 3
21185: ARRAY
21186: GREATEREQUAL
21187: AND
21188: ST_TO_ADDR
// end ;
21189: LD_VAR 0 3
21193: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21194: LD_INT 0
21196: PPUSH
21197: PPUSH
21198: PPUSH
21199: PPUSH
21200: PPUSH
21201: PPUSH
21202: PPUSH
21203: PPUSH
21204: PPUSH
21205: PPUSH
21206: PPUSH
// result := false ;
21207: LD_ADDR_VAR 0 8
21211: PUSH
21212: LD_INT 0
21214: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21215: LD_VAR 0 5
21219: NOT
21220: PUSH
21221: LD_VAR 0 1
21225: NOT
21226: OR
21227: PUSH
21228: LD_VAR 0 2
21232: NOT
21233: OR
21234: PUSH
21235: LD_VAR 0 3
21239: NOT
21240: OR
21241: IFFALSE 21245
// exit ;
21243: GO 22059
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21245: LD_ADDR_VAR 0 14
21249: PUSH
21250: LD_VAR 0 1
21254: PPUSH
21255: LD_VAR 0 2
21259: PPUSH
21260: LD_VAR 0 3
21264: PPUSH
21265: LD_VAR 0 4
21269: PPUSH
21270: LD_VAR 0 5
21274: PUSH
21275: LD_INT 1
21277: ARRAY
21278: PPUSH
21279: CALL_OW 248
21283: PPUSH
21284: LD_INT 0
21286: PPUSH
21287: CALL 23296 0 6
21291: ST_TO_ADDR
// if not hexes then
21292: LD_VAR 0 14
21296: NOT
21297: IFFALSE 21301
// exit ;
21299: GO 22059
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21301: LD_ADDR_VAR 0 17
21305: PUSH
21306: LD_VAR 0 5
21310: PPUSH
21311: LD_INT 22
21313: PUSH
21314: LD_VAR 0 13
21318: PPUSH
21319: CALL_OW 255
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: LD_INT 30
21333: PUSH
21334: LD_INT 0
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 30
21343: PUSH
21344: LD_INT 1
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: LIST
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PPUSH
21360: CALL_OW 72
21364: ST_TO_ADDR
// for i = 1 to hexes do
21365: LD_ADDR_VAR 0 9
21369: PUSH
21370: DOUBLE
21371: LD_INT 1
21373: DEC
21374: ST_TO_ADDR
21375: LD_VAR 0 14
21379: PUSH
21380: FOR_TO
21381: IFFALSE 22057
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21383: LD_ADDR_VAR 0 13
21387: PUSH
21388: LD_VAR 0 14
21392: PUSH
21393: LD_VAR 0 9
21397: ARRAY
21398: PUSH
21399: LD_INT 1
21401: ARRAY
21402: PPUSH
21403: LD_VAR 0 14
21407: PUSH
21408: LD_VAR 0 9
21412: ARRAY
21413: PUSH
21414: LD_INT 2
21416: ARRAY
21417: PPUSH
21418: CALL_OW 428
21422: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21423: LD_VAR 0 14
21427: PUSH
21428: LD_VAR 0 9
21432: ARRAY
21433: PUSH
21434: LD_INT 1
21436: ARRAY
21437: PPUSH
21438: LD_VAR 0 14
21442: PUSH
21443: LD_VAR 0 9
21447: ARRAY
21448: PUSH
21449: LD_INT 2
21451: ARRAY
21452: PPUSH
21453: CALL_OW 351
21457: PUSH
21458: LD_VAR 0 14
21462: PUSH
21463: LD_VAR 0 9
21467: ARRAY
21468: PUSH
21469: LD_INT 1
21471: ARRAY
21472: PPUSH
21473: LD_VAR 0 14
21477: PUSH
21478: LD_VAR 0 9
21482: ARRAY
21483: PUSH
21484: LD_INT 2
21486: ARRAY
21487: PPUSH
21488: CALL_OW 488
21492: NOT
21493: OR
21494: PUSH
21495: LD_VAR 0 13
21499: PPUSH
21500: CALL_OW 247
21504: PUSH
21505: LD_INT 3
21507: EQUAL
21508: OR
21509: IFFALSE 21515
// exit ;
21511: POP
21512: POP
21513: GO 22059
// if not tmp then
21515: LD_VAR 0 13
21519: NOT
21520: IFFALSE 21524
// continue ;
21522: GO 21380
// result := true ;
21524: LD_ADDR_VAR 0 8
21528: PUSH
21529: LD_INT 1
21531: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21532: LD_VAR 0 6
21536: PUSH
21537: LD_VAR 0 13
21541: PPUSH
21542: CALL_OW 247
21546: PUSH
21547: LD_INT 2
21549: EQUAL
21550: AND
21551: PUSH
21552: LD_VAR 0 13
21556: PPUSH
21557: CALL_OW 263
21561: PUSH
21562: LD_INT 1
21564: EQUAL
21565: AND
21566: IFFALSE 21730
// begin if IsDrivenBy ( tmp ) then
21568: LD_VAR 0 13
21572: PPUSH
21573: CALL_OW 311
21577: IFFALSE 21581
// continue ;
21579: GO 21380
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21581: LD_VAR 0 6
21585: PPUSH
21586: LD_INT 3
21588: PUSH
21589: LD_INT 60
21591: PUSH
21592: EMPTY
21593: LIST
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PUSH
21599: LD_INT 3
21601: PUSH
21602: LD_INT 55
21604: PUSH
21605: EMPTY
21606: LIST
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PPUSH
21616: CALL_OW 72
21620: IFFALSE 21728
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21622: LD_ADDR_VAR 0 18
21626: PUSH
21627: LD_VAR 0 6
21631: PPUSH
21632: LD_INT 3
21634: PUSH
21635: LD_INT 60
21637: PUSH
21638: EMPTY
21639: LIST
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 3
21647: PUSH
21648: LD_INT 55
21650: PUSH
21651: EMPTY
21652: LIST
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PPUSH
21662: CALL_OW 72
21666: PUSH
21667: LD_INT 1
21669: ARRAY
21670: ST_TO_ADDR
// if IsInUnit ( driver ) then
21671: LD_VAR 0 18
21675: PPUSH
21676: CALL_OW 310
21680: IFFALSE 21691
// ComExit ( driver ) ;
21682: LD_VAR 0 18
21686: PPUSH
21687: CALL 47001 0 1
// AddComEnterUnit ( driver , tmp ) ;
21691: LD_VAR 0 18
21695: PPUSH
21696: LD_VAR 0 13
21700: PPUSH
21701: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21705: LD_VAR 0 18
21709: PPUSH
21710: LD_VAR 0 7
21714: PPUSH
21715: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21719: LD_VAR 0 18
21723: PPUSH
21724: CALL_OW 181
// end ; continue ;
21728: GO 21380
// end ; if not cleaners or not tmp in cleaners then
21730: LD_VAR 0 6
21734: NOT
21735: PUSH
21736: LD_VAR 0 13
21740: PUSH
21741: LD_VAR 0 6
21745: IN
21746: NOT
21747: OR
21748: IFFALSE 22055
// begin if dep then
21750: LD_VAR 0 17
21754: IFFALSE 21890
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21756: LD_ADDR_VAR 0 16
21760: PUSH
21761: LD_VAR 0 17
21765: PUSH
21766: LD_INT 1
21768: ARRAY
21769: PPUSH
21770: CALL_OW 250
21774: PPUSH
21775: LD_VAR 0 17
21779: PUSH
21780: LD_INT 1
21782: ARRAY
21783: PPUSH
21784: CALL_OW 254
21788: PPUSH
21789: LD_INT 5
21791: PPUSH
21792: CALL_OW 272
21796: PUSH
21797: LD_VAR 0 17
21801: PUSH
21802: LD_INT 1
21804: ARRAY
21805: PPUSH
21806: CALL_OW 251
21810: PPUSH
21811: LD_VAR 0 17
21815: PUSH
21816: LD_INT 1
21818: ARRAY
21819: PPUSH
21820: CALL_OW 254
21824: PPUSH
21825: LD_INT 5
21827: PPUSH
21828: CALL_OW 273
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21837: LD_VAR 0 16
21841: PUSH
21842: LD_INT 1
21844: ARRAY
21845: PPUSH
21846: LD_VAR 0 16
21850: PUSH
21851: LD_INT 2
21853: ARRAY
21854: PPUSH
21855: CALL_OW 488
21859: IFFALSE 21890
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21861: LD_VAR 0 13
21865: PPUSH
21866: LD_VAR 0 16
21870: PUSH
21871: LD_INT 1
21873: ARRAY
21874: PPUSH
21875: LD_VAR 0 16
21879: PUSH
21880: LD_INT 2
21882: ARRAY
21883: PPUSH
21884: CALL_OW 111
// continue ;
21888: GO 21380
// end ; end ; r := GetDir ( tmp ) ;
21890: LD_ADDR_VAR 0 15
21894: PUSH
21895: LD_VAR 0 13
21899: PPUSH
21900: CALL_OW 254
21904: ST_TO_ADDR
// if r = 5 then
21905: LD_VAR 0 15
21909: PUSH
21910: LD_INT 5
21912: EQUAL
21913: IFFALSE 21923
// r := 0 ;
21915: LD_ADDR_VAR 0 15
21919: PUSH
21920: LD_INT 0
21922: ST_TO_ADDR
// for j = r to 5 do
21923: LD_ADDR_VAR 0 10
21927: PUSH
21928: DOUBLE
21929: LD_VAR 0 15
21933: DEC
21934: ST_TO_ADDR
21935: LD_INT 5
21937: PUSH
21938: FOR_TO
21939: IFFALSE 22053
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21941: LD_ADDR_VAR 0 11
21945: PUSH
21946: LD_VAR 0 13
21950: PPUSH
21951: CALL_OW 250
21955: PPUSH
21956: LD_VAR 0 10
21960: PPUSH
21961: LD_INT 2
21963: PPUSH
21964: CALL_OW 272
21968: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21969: LD_ADDR_VAR 0 12
21973: PUSH
21974: LD_VAR 0 13
21978: PPUSH
21979: CALL_OW 251
21983: PPUSH
21984: LD_VAR 0 10
21988: PPUSH
21989: LD_INT 2
21991: PPUSH
21992: CALL_OW 273
21996: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21997: LD_VAR 0 11
22001: PPUSH
22002: LD_VAR 0 12
22006: PPUSH
22007: CALL_OW 488
22011: PUSH
22012: LD_VAR 0 11
22016: PPUSH
22017: LD_VAR 0 12
22021: PPUSH
22022: CALL_OW 428
22026: NOT
22027: AND
22028: IFFALSE 22051
// begin ComMoveXY ( tmp , _x , _y ) ;
22030: LD_VAR 0 13
22034: PPUSH
22035: LD_VAR 0 11
22039: PPUSH
22040: LD_VAR 0 12
22044: PPUSH
22045: CALL_OW 111
// break ;
22049: GO 22053
// end ; end ;
22051: GO 21938
22053: POP
22054: POP
// end ; end ;
22055: GO 21380
22057: POP
22058: POP
// end ;
22059: LD_VAR 0 8
22063: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22064: LD_INT 0
22066: PPUSH
// result := true ;
22067: LD_ADDR_VAR 0 3
22071: PUSH
22072: LD_INT 1
22074: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22075: LD_VAR 0 2
22079: PUSH
22080: LD_INT 24
22082: DOUBLE
22083: EQUAL
22084: IFTRUE 22094
22086: LD_INT 33
22088: DOUBLE
22089: EQUAL
22090: IFTRUE 22094
22092: GO 22119
22094: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22095: LD_ADDR_VAR 0 3
22099: PUSH
22100: LD_INT 32
22102: PPUSH
22103: LD_VAR 0 1
22107: PPUSH
22108: CALL_OW 321
22112: PUSH
22113: LD_INT 2
22115: EQUAL
22116: ST_TO_ADDR
22117: GO 22439
22119: LD_INT 20
22121: DOUBLE
22122: EQUAL
22123: IFTRUE 22127
22125: GO 22152
22127: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22128: LD_ADDR_VAR 0 3
22132: PUSH
22133: LD_INT 6
22135: PPUSH
22136: LD_VAR 0 1
22140: PPUSH
22141: CALL_OW 321
22145: PUSH
22146: LD_INT 2
22148: EQUAL
22149: ST_TO_ADDR
22150: GO 22439
22152: LD_INT 22
22154: DOUBLE
22155: EQUAL
22156: IFTRUE 22166
22158: LD_INT 36
22160: DOUBLE
22161: EQUAL
22162: IFTRUE 22166
22164: GO 22191
22166: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22167: LD_ADDR_VAR 0 3
22171: PUSH
22172: LD_INT 15
22174: PPUSH
22175: LD_VAR 0 1
22179: PPUSH
22180: CALL_OW 321
22184: PUSH
22185: LD_INT 2
22187: EQUAL
22188: ST_TO_ADDR
22189: GO 22439
22191: LD_INT 30
22193: DOUBLE
22194: EQUAL
22195: IFTRUE 22199
22197: GO 22224
22199: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22200: LD_ADDR_VAR 0 3
22204: PUSH
22205: LD_INT 20
22207: PPUSH
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL_OW 321
22217: PUSH
22218: LD_INT 2
22220: EQUAL
22221: ST_TO_ADDR
22222: GO 22439
22224: LD_INT 28
22226: DOUBLE
22227: EQUAL
22228: IFTRUE 22238
22230: LD_INT 21
22232: DOUBLE
22233: EQUAL
22234: IFTRUE 22238
22236: GO 22263
22238: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22239: LD_ADDR_VAR 0 3
22243: PUSH
22244: LD_INT 21
22246: PPUSH
22247: LD_VAR 0 1
22251: PPUSH
22252: CALL_OW 321
22256: PUSH
22257: LD_INT 2
22259: EQUAL
22260: ST_TO_ADDR
22261: GO 22439
22263: LD_INT 16
22265: DOUBLE
22266: EQUAL
22267: IFTRUE 22271
22269: GO 22298
22271: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22272: LD_ADDR_VAR 0 3
22276: PUSH
22277: LD_EXP 75
22281: PPUSH
22282: LD_VAR 0 1
22286: PPUSH
22287: CALL_OW 321
22291: PUSH
22292: LD_INT 2
22294: EQUAL
22295: ST_TO_ADDR
22296: GO 22439
22298: LD_INT 19
22300: DOUBLE
22301: EQUAL
22302: IFTRUE 22312
22304: LD_INT 23
22306: DOUBLE
22307: EQUAL
22308: IFTRUE 22312
22310: GO 22339
22312: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22313: LD_ADDR_VAR 0 3
22317: PUSH
22318: LD_EXP 74
22322: PPUSH
22323: LD_VAR 0 1
22327: PPUSH
22328: CALL_OW 321
22332: PUSH
22333: LD_INT 2
22335: EQUAL
22336: ST_TO_ADDR
22337: GO 22439
22339: LD_INT 17
22341: DOUBLE
22342: EQUAL
22343: IFTRUE 22347
22345: GO 22372
22347: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22348: LD_ADDR_VAR 0 3
22352: PUSH
22353: LD_INT 39
22355: PPUSH
22356: LD_VAR 0 1
22360: PPUSH
22361: CALL_OW 321
22365: PUSH
22366: LD_INT 2
22368: EQUAL
22369: ST_TO_ADDR
22370: GO 22439
22372: LD_INT 18
22374: DOUBLE
22375: EQUAL
22376: IFTRUE 22380
22378: GO 22405
22380: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22381: LD_ADDR_VAR 0 3
22385: PUSH
22386: LD_INT 40
22388: PPUSH
22389: LD_VAR 0 1
22393: PPUSH
22394: CALL_OW 321
22398: PUSH
22399: LD_INT 2
22401: EQUAL
22402: ST_TO_ADDR
22403: GO 22439
22405: LD_INT 27
22407: DOUBLE
22408: EQUAL
22409: IFTRUE 22413
22411: GO 22438
22413: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22414: LD_ADDR_VAR 0 3
22418: PUSH
22419: LD_INT 35
22421: PPUSH
22422: LD_VAR 0 1
22426: PPUSH
22427: CALL_OW 321
22431: PUSH
22432: LD_INT 2
22434: EQUAL
22435: ST_TO_ADDR
22436: GO 22439
22438: POP
// end ;
22439: LD_VAR 0 3
22443: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22444: LD_INT 0
22446: PPUSH
22447: PPUSH
22448: PPUSH
22449: PPUSH
22450: PPUSH
22451: PPUSH
22452: PPUSH
22453: PPUSH
22454: PPUSH
22455: PPUSH
22456: PPUSH
// result := false ;
22457: LD_ADDR_VAR 0 6
22461: PUSH
22462: LD_INT 0
22464: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22465: LD_VAR 0 1
22469: NOT
22470: PUSH
22471: LD_VAR 0 1
22475: PPUSH
22476: CALL_OW 266
22480: PUSH
22481: LD_INT 0
22483: PUSH
22484: LD_INT 1
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: IN
22491: NOT
22492: OR
22493: PUSH
22494: LD_VAR 0 2
22498: NOT
22499: OR
22500: PUSH
22501: LD_VAR 0 5
22505: PUSH
22506: LD_INT 0
22508: PUSH
22509: LD_INT 1
22511: PUSH
22512: LD_INT 2
22514: PUSH
22515: LD_INT 3
22517: PUSH
22518: LD_INT 4
22520: PUSH
22521: LD_INT 5
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: IN
22532: NOT
22533: OR
22534: PUSH
22535: LD_VAR 0 3
22539: PPUSH
22540: LD_VAR 0 4
22544: PPUSH
22545: CALL_OW 488
22549: NOT
22550: OR
22551: IFFALSE 22555
// exit ;
22553: GO 23291
// side := GetSide ( depot ) ;
22555: LD_ADDR_VAR 0 9
22559: PUSH
22560: LD_VAR 0 1
22564: PPUSH
22565: CALL_OW 255
22569: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22570: LD_VAR 0 9
22574: PPUSH
22575: LD_VAR 0 2
22579: PPUSH
22580: CALL 22064 0 2
22584: NOT
22585: IFFALSE 22589
// exit ;
22587: GO 23291
// pom := GetBase ( depot ) ;
22589: LD_ADDR_VAR 0 10
22593: PUSH
22594: LD_VAR 0 1
22598: PPUSH
22599: CALL_OW 274
22603: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22604: LD_ADDR_VAR 0 11
22608: PUSH
22609: LD_VAR 0 2
22613: PPUSH
22614: LD_VAR 0 1
22618: PPUSH
22619: CALL_OW 248
22623: PPUSH
22624: CALL_OW 450
22628: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22629: LD_VAR 0 10
22633: PPUSH
22634: LD_INT 1
22636: PPUSH
22637: CALL_OW 275
22641: PUSH
22642: LD_VAR 0 11
22646: PUSH
22647: LD_INT 1
22649: ARRAY
22650: GREATEREQUAL
22651: PUSH
22652: LD_VAR 0 10
22656: PPUSH
22657: LD_INT 2
22659: PPUSH
22660: CALL_OW 275
22664: PUSH
22665: LD_VAR 0 11
22669: PUSH
22670: LD_INT 2
22672: ARRAY
22673: GREATEREQUAL
22674: AND
22675: PUSH
22676: LD_VAR 0 10
22680: PPUSH
22681: LD_INT 3
22683: PPUSH
22684: CALL_OW 275
22688: PUSH
22689: LD_VAR 0 11
22693: PUSH
22694: LD_INT 3
22696: ARRAY
22697: GREATEREQUAL
22698: AND
22699: NOT
22700: IFFALSE 22704
// exit ;
22702: GO 23291
// if GetBType ( depot ) = b_depot then
22704: LD_VAR 0 1
22708: PPUSH
22709: CALL_OW 266
22713: PUSH
22714: LD_INT 0
22716: EQUAL
22717: IFFALSE 22729
// dist := 28 else
22719: LD_ADDR_VAR 0 14
22723: PUSH
22724: LD_INT 28
22726: ST_TO_ADDR
22727: GO 22737
// dist := 36 ;
22729: LD_ADDR_VAR 0 14
22733: PUSH
22734: LD_INT 36
22736: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22737: LD_VAR 0 1
22741: PPUSH
22742: LD_VAR 0 3
22746: PPUSH
22747: LD_VAR 0 4
22751: PPUSH
22752: CALL_OW 297
22756: PUSH
22757: LD_VAR 0 14
22761: GREATER
22762: IFFALSE 22766
// exit ;
22764: GO 23291
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22766: LD_ADDR_VAR 0 12
22770: PUSH
22771: LD_VAR 0 2
22775: PPUSH
22776: LD_VAR 0 3
22780: PPUSH
22781: LD_VAR 0 4
22785: PPUSH
22786: LD_VAR 0 5
22790: PPUSH
22791: LD_VAR 0 1
22795: PPUSH
22796: CALL_OW 248
22800: PPUSH
22801: LD_INT 0
22803: PPUSH
22804: CALL 23296 0 6
22808: ST_TO_ADDR
// if not hexes then
22809: LD_VAR 0 12
22813: NOT
22814: IFFALSE 22818
// exit ;
22816: GO 23291
// hex := GetHexInfo ( x , y ) ;
22818: LD_ADDR_VAR 0 15
22822: PUSH
22823: LD_VAR 0 3
22827: PPUSH
22828: LD_VAR 0 4
22832: PPUSH
22833: CALL_OW 546
22837: ST_TO_ADDR
// if hex [ 1 ] then
22838: LD_VAR 0 15
22842: PUSH
22843: LD_INT 1
22845: ARRAY
22846: IFFALSE 22850
// exit ;
22848: GO 23291
// height := hex [ 2 ] ;
22850: LD_ADDR_VAR 0 13
22854: PUSH
22855: LD_VAR 0 15
22859: PUSH
22860: LD_INT 2
22862: ARRAY
22863: ST_TO_ADDR
// for i = 1 to hexes do
22864: LD_ADDR_VAR 0 7
22868: PUSH
22869: DOUBLE
22870: LD_INT 1
22872: DEC
22873: ST_TO_ADDR
22874: LD_VAR 0 12
22878: PUSH
22879: FOR_TO
22880: IFFALSE 23210
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22882: LD_VAR 0 12
22886: PUSH
22887: LD_VAR 0 7
22891: ARRAY
22892: PUSH
22893: LD_INT 1
22895: ARRAY
22896: PPUSH
22897: LD_VAR 0 12
22901: PUSH
22902: LD_VAR 0 7
22906: ARRAY
22907: PUSH
22908: LD_INT 2
22910: ARRAY
22911: PPUSH
22912: CALL_OW 488
22916: NOT
22917: PUSH
22918: LD_VAR 0 12
22922: PUSH
22923: LD_VAR 0 7
22927: ARRAY
22928: PUSH
22929: LD_INT 1
22931: ARRAY
22932: PPUSH
22933: LD_VAR 0 12
22937: PUSH
22938: LD_VAR 0 7
22942: ARRAY
22943: PUSH
22944: LD_INT 2
22946: ARRAY
22947: PPUSH
22948: CALL_OW 428
22952: PUSH
22953: LD_INT 0
22955: GREATER
22956: OR
22957: PUSH
22958: LD_VAR 0 12
22962: PUSH
22963: LD_VAR 0 7
22967: ARRAY
22968: PUSH
22969: LD_INT 1
22971: ARRAY
22972: PPUSH
22973: LD_VAR 0 12
22977: PUSH
22978: LD_VAR 0 7
22982: ARRAY
22983: PUSH
22984: LD_INT 2
22986: ARRAY
22987: PPUSH
22988: CALL_OW 351
22992: OR
22993: IFFALSE 22999
// exit ;
22995: POP
22996: POP
22997: GO 23291
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22999: LD_ADDR_VAR 0 8
23003: PUSH
23004: LD_VAR 0 12
23008: PUSH
23009: LD_VAR 0 7
23013: ARRAY
23014: PUSH
23015: LD_INT 1
23017: ARRAY
23018: PPUSH
23019: LD_VAR 0 12
23023: PUSH
23024: LD_VAR 0 7
23028: ARRAY
23029: PUSH
23030: LD_INT 2
23032: ARRAY
23033: PPUSH
23034: CALL_OW 546
23038: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23039: LD_VAR 0 8
23043: PUSH
23044: LD_INT 1
23046: ARRAY
23047: PUSH
23048: LD_VAR 0 8
23052: PUSH
23053: LD_INT 2
23055: ARRAY
23056: PUSH
23057: LD_VAR 0 13
23061: PUSH
23062: LD_INT 2
23064: PLUS
23065: GREATER
23066: OR
23067: PUSH
23068: LD_VAR 0 8
23072: PUSH
23073: LD_INT 2
23075: ARRAY
23076: PUSH
23077: LD_VAR 0 13
23081: PUSH
23082: LD_INT 2
23084: MINUS
23085: LESS
23086: OR
23087: PUSH
23088: LD_VAR 0 8
23092: PUSH
23093: LD_INT 3
23095: ARRAY
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: LD_INT 8
23102: PUSH
23103: LD_INT 9
23105: PUSH
23106: LD_INT 10
23108: PUSH
23109: LD_INT 11
23111: PUSH
23112: LD_INT 12
23114: PUSH
23115: LD_INT 13
23117: PUSH
23118: LD_INT 16
23120: PUSH
23121: LD_INT 17
23123: PUSH
23124: LD_INT 18
23126: PUSH
23127: LD_INT 19
23129: PUSH
23130: LD_INT 20
23132: PUSH
23133: LD_INT 21
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: IN
23151: NOT
23152: OR
23153: PUSH
23154: LD_VAR 0 8
23158: PUSH
23159: LD_INT 5
23161: ARRAY
23162: NOT
23163: OR
23164: PUSH
23165: LD_VAR 0 8
23169: PUSH
23170: LD_INT 6
23172: ARRAY
23173: PUSH
23174: LD_INT 1
23176: PUSH
23177: LD_INT 2
23179: PUSH
23180: LD_INT 7
23182: PUSH
23183: LD_INT 9
23185: PUSH
23186: LD_INT 10
23188: PUSH
23189: LD_INT 11
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: IN
23200: NOT
23201: OR
23202: IFFALSE 23208
// exit ;
23204: POP
23205: POP
23206: GO 23291
// end ;
23208: GO 22879
23210: POP
23211: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23212: LD_VAR 0 9
23216: PPUSH
23217: LD_VAR 0 3
23221: PPUSH
23222: LD_VAR 0 4
23226: PPUSH
23227: LD_INT 20
23229: PPUSH
23230: CALL 15237 0 4
23234: PUSH
23235: LD_INT 4
23237: ARRAY
23238: IFFALSE 23242
// exit ;
23240: GO 23291
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23242: LD_VAR 0 2
23246: PUSH
23247: LD_INT 29
23249: PUSH
23250: LD_INT 30
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: IN
23257: PUSH
23258: LD_VAR 0 3
23262: PPUSH
23263: LD_VAR 0 4
23267: PPUSH
23268: LD_VAR 0 9
23272: PPUSH
23273: CALL_OW 440
23277: NOT
23278: AND
23279: IFFALSE 23283
// exit ;
23281: GO 23291
// result := true ;
23283: LD_ADDR_VAR 0 6
23287: PUSH
23288: LD_INT 1
23290: ST_TO_ADDR
// end ;
23291: LD_VAR 0 6
23295: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23296: LD_INT 0
23298: PPUSH
23299: PPUSH
23300: PPUSH
23301: PPUSH
23302: PPUSH
23303: PPUSH
23304: PPUSH
23305: PPUSH
23306: PPUSH
23307: PPUSH
23308: PPUSH
23309: PPUSH
23310: PPUSH
23311: PPUSH
23312: PPUSH
23313: PPUSH
23314: PPUSH
23315: PPUSH
23316: PPUSH
23317: PPUSH
23318: PPUSH
23319: PPUSH
23320: PPUSH
23321: PPUSH
23322: PPUSH
23323: PPUSH
23324: PPUSH
23325: PPUSH
23326: PPUSH
23327: PPUSH
23328: PPUSH
23329: PPUSH
23330: PPUSH
23331: PPUSH
23332: PPUSH
23333: PPUSH
23334: PPUSH
23335: PPUSH
23336: PPUSH
23337: PPUSH
23338: PPUSH
23339: PPUSH
23340: PPUSH
23341: PPUSH
23342: PPUSH
23343: PPUSH
23344: PPUSH
23345: PPUSH
23346: PPUSH
23347: PPUSH
23348: PPUSH
23349: PPUSH
23350: PPUSH
23351: PPUSH
23352: PPUSH
23353: PPUSH
23354: PPUSH
23355: PPUSH
// result = [ ] ;
23356: LD_ADDR_VAR 0 7
23360: PUSH
23361: EMPTY
23362: ST_TO_ADDR
// temp_list = [ ] ;
23363: LD_ADDR_VAR 0 9
23367: PUSH
23368: EMPTY
23369: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23370: LD_VAR 0 4
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: LD_INT 1
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: LD_INT 3
23386: PUSH
23387: LD_INT 4
23389: PUSH
23390: LD_INT 5
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: IN
23401: NOT
23402: PUSH
23403: LD_VAR 0 1
23407: PUSH
23408: LD_INT 0
23410: PUSH
23411: LD_INT 1
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: IN
23418: PUSH
23419: LD_VAR 0 5
23423: PUSH
23424: LD_INT 1
23426: PUSH
23427: LD_INT 2
23429: PUSH
23430: LD_INT 3
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: LIST
23437: IN
23438: NOT
23439: AND
23440: OR
23441: IFFALSE 23445
// exit ;
23443: GO 41836
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23445: LD_VAR 0 1
23449: PUSH
23450: LD_INT 6
23452: PUSH
23453: LD_INT 7
23455: PUSH
23456: LD_INT 8
23458: PUSH
23459: LD_INT 13
23461: PUSH
23462: LD_INT 12
23464: PUSH
23465: LD_INT 15
23467: PUSH
23468: LD_INT 11
23470: PUSH
23471: LD_INT 14
23473: PUSH
23474: LD_INT 10
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: IN
23488: IFFALSE 23498
// btype = b_lab ;
23490: LD_ADDR_VAR 0 1
23494: PUSH
23495: LD_INT 6
23497: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23498: LD_VAR 0 6
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: LD_INT 2
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: LIST
23516: IN
23517: NOT
23518: PUSH
23519: LD_VAR 0 1
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: LD_INT 1
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: LD_INT 3
23535: PUSH
23536: LD_INT 6
23538: PUSH
23539: LD_INT 36
23541: PUSH
23542: LD_INT 4
23544: PUSH
23545: LD_INT 5
23547: PUSH
23548: LD_INT 31
23550: PUSH
23551: LD_INT 32
23553: PUSH
23554: LD_INT 33
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: IN
23570: NOT
23571: PUSH
23572: LD_VAR 0 6
23576: PUSH
23577: LD_INT 1
23579: EQUAL
23580: AND
23581: OR
23582: PUSH
23583: LD_VAR 0 1
23587: PUSH
23588: LD_INT 2
23590: PUSH
23591: LD_INT 3
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: IN
23598: NOT
23599: PUSH
23600: LD_VAR 0 6
23604: PUSH
23605: LD_INT 2
23607: EQUAL
23608: AND
23609: OR
23610: IFFALSE 23620
// mode = 0 ;
23612: LD_ADDR_VAR 0 6
23616: PUSH
23617: LD_INT 0
23619: ST_TO_ADDR
// case mode of 0 :
23620: LD_VAR 0 6
23624: PUSH
23625: LD_INT 0
23627: DOUBLE
23628: EQUAL
23629: IFTRUE 23633
23631: GO 35086
23633: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23634: LD_ADDR_VAR 0 11
23638: PUSH
23639: LD_INT 0
23641: PUSH
23642: LD_INT 0
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 0
23651: PUSH
23652: LD_INT 1
23654: NEG
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: LD_INT 0
23665: PUSH
23666: EMPTY
23667: LIST
23668: LIST
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: LD_INT 1
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 0
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 1
23692: NEG
23693: PUSH
23694: LD_INT 0
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 1
23703: NEG
23704: PUSH
23705: LD_INT 1
23707: NEG
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: LD_INT 2
23719: NEG
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: LD_INT 2
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 1
23738: PUSH
23739: LD_INT 1
23741: NEG
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: LD_INT 2
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 0
23759: PUSH
23760: LD_INT 2
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 1
23769: NEG
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 1
23780: PUSH
23781: LD_INT 3
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 0
23790: PUSH
23791: LD_INT 3
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 1
23800: NEG
23801: PUSH
23802: LD_INT 2
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23827: LD_ADDR_VAR 0 12
23831: PUSH
23832: LD_INT 0
23834: PUSH
23835: LD_INT 0
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: LD_INT 1
23847: NEG
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 0
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: PUSH
23866: LD_INT 1
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: NEG
23886: PUSH
23887: LD_INT 0
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: NEG
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: PUSH
23909: LD_INT 1
23911: NEG
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 2
23919: PUSH
23920: LD_INT 0
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 2
23929: PUSH
23930: LD_INT 1
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 1
23939: NEG
23940: PUSH
23941: LD_INT 1
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 2
23950: NEG
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 2
23961: NEG
23962: PUSH
23963: LD_INT 1
23965: NEG
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 2
23973: NEG
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 3
23984: NEG
23985: PUSH
23986: LD_INT 0
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 3
23995: NEG
23996: PUSH
23997: LD_INT 1
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24023: LD_ADDR_VAR 0 13
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: LD_INT 0
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: LD_INT 1
24043: NEG
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: LD_INT 1
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 1
24081: NEG
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 1
24092: NEG
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: PUSH
24102: LD_INT 1
24104: NEG
24105: PUSH
24106: LD_INT 2
24108: NEG
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 2
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 2
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 1
24136: PUSH
24137: LD_INT 2
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 2
24146: NEG
24147: PUSH
24148: LD_INT 1
24150: NEG
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 2
24158: NEG
24159: PUSH
24160: LD_INT 2
24162: NEG
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 2
24170: NEG
24171: PUSH
24172: LD_INT 3
24174: NEG
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: PUSH
24180: LD_INT 3
24182: NEG
24183: PUSH
24184: LD_INT 2
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 3
24194: NEG
24195: PUSH
24196: LD_INT 3
24198: NEG
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24222: LD_ADDR_VAR 0 14
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: LD_INT 0
24232: PUSH
24233: EMPTY
24234: LIST
24235: LIST
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: EMPTY
24245: LIST
24246: LIST
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: LD_INT 0
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: LD_INT 0
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 1
24291: NEG
24292: PUSH
24293: LD_INT 1
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: LD_INT 2
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: LD_INT 2
24318: NEG
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 1
24326: PUSH
24327: LD_INT 1
24329: NEG
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 1
24337: PUSH
24338: LD_INT 2
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 0
24347: PUSH
24348: LD_INT 2
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 1
24357: NEG
24358: PUSH
24359: LD_INT 1
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 1
24368: NEG
24369: PUSH
24370: LD_INT 3
24372: NEG
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: LD_INT 3
24383: NEG
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: LD_INT 2
24394: NEG
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24418: LD_ADDR_VAR 0 15
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: LD_INT 1
24438: NEG
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: NEG
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 1
24502: NEG
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 2
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 2
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: LD_INT 1
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 2
24541: NEG
24542: PUSH
24543: LD_INT 0
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 2
24552: NEG
24553: PUSH
24554: LD_INT 1
24556: NEG
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 2
24564: PUSH
24565: LD_INT 1
24567: NEG
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 3
24575: PUSH
24576: LD_INT 0
24578: PUSH
24579: EMPTY
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 3
24585: PUSH
24586: LD_INT 1
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24611: LD_ADDR_VAR 0 16
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 0
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 1
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 1
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: LD_INT 1
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 1
24669: NEG
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 1
24680: NEG
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: NEG
24693: PUSH
24694: LD_INT 2
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 2
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 2
24714: PUSH
24715: LD_INT 2
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 1
24724: PUSH
24725: LD_INT 2
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 2
24734: NEG
24735: PUSH
24736: LD_INT 1
24738: NEG
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 2
24746: NEG
24747: PUSH
24748: LD_INT 2
24750: NEG
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 3
24758: PUSH
24759: LD_INT 2
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 3
24768: PUSH
24769: LD_INT 3
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: LD_INT 3
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24804: LD_ADDR_VAR 0 17
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: LD_INT 0
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 0
24821: PUSH
24822: LD_INT 1
24824: NEG
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 1
24842: PUSH
24843: LD_INT 1
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 1
24862: NEG
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 1
24873: NEG
24874: PUSH
24875: LD_INT 1
24877: NEG
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 1
24885: NEG
24886: PUSH
24887: LD_INT 2
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 0
24897: PUSH
24898: LD_INT 2
24900: NEG
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 2
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 2
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 2
24939: PUSH
24940: LD_INT 2
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: LD_INT 2
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: LD_INT 2
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: NEG
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: NEG
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 2
24991: NEG
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: LD_INT 2
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25034: LD_ADDR_VAR 0 18
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: LD_INT 1
25054: NEG
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: LD_INT 1
25062: PUSH
25063: LD_INT 0
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: LD_INT 1
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: PUSH
25090: LD_INT 1
25092: NEG
25093: PUSH
25094: LD_INT 0
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: LD_INT 1
25107: NEG
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: NEG
25116: PUSH
25117: LD_INT 2
25119: NEG
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 0
25127: PUSH
25128: LD_INT 2
25130: NEG
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: LD_INT 1
25141: NEG
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 2
25149: PUSH
25150: LD_INT 0
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 2
25159: PUSH
25160: LD_INT 1
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 2
25169: PUSH
25170: LD_INT 2
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 1
25179: PUSH
25180: LD_INT 2
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: LD_INT 2
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: LD_INT 1
25199: NEG
25200: PUSH
25201: LD_INT 1
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 2
25210: NEG
25211: PUSH
25212: LD_INT 0
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 2
25221: NEG
25222: PUSH
25223: LD_INT 1
25225: NEG
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: LD_INT 2
25233: NEG
25234: PUSH
25235: LD_INT 2
25237: NEG
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25264: LD_ADDR_VAR 0 19
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: LD_INT 1
25284: NEG
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 1
25292: PUSH
25293: LD_INT 0
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 1
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: LD_INT 1
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 1
25322: NEG
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 1
25333: NEG
25334: PUSH
25335: LD_INT 1
25337: NEG
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 1
25345: NEG
25346: PUSH
25347: LD_INT 2
25349: NEG
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 0
25357: PUSH
25358: LD_INT 2
25360: NEG
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: PUSH
25369: LD_INT 1
25371: NEG
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 2
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 2
25389: PUSH
25390: LD_INT 1
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 2
25399: PUSH
25400: LD_INT 2
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 1
25409: PUSH
25410: LD_INT 2
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 0
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 1
25429: NEG
25430: PUSH
25431: LD_INT 1
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: PUSH
25438: LD_INT 2
25440: NEG
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 2
25451: NEG
25452: PUSH
25453: LD_INT 1
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 2
25463: NEG
25464: PUSH
25465: LD_INT 2
25467: NEG
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25494: LD_ADDR_VAR 0 20
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 0
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: PUSH
25523: LD_INT 0
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 1
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 0
25542: PUSH
25543: LD_INT 1
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 1
25552: NEG
25553: PUSH
25554: LD_INT 0
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 1
25563: NEG
25564: PUSH
25565: LD_INT 1
25567: NEG
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: NEG
25576: PUSH
25577: LD_INT 2
25579: NEG
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 0
25587: PUSH
25588: LD_INT 2
25590: NEG
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 1
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 2
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 2
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 2
25629: PUSH
25630: LD_INT 2
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 1
25639: PUSH
25640: LD_INT 2
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: LD_INT 2
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 1
25659: NEG
25660: PUSH
25661: LD_INT 1
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 2
25670: NEG
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 2
25681: NEG
25682: PUSH
25683: LD_INT 1
25685: NEG
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 2
25693: NEG
25694: PUSH
25695: LD_INT 2
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25724: LD_ADDR_VAR 0 21
25728: PUSH
25729: LD_INT 0
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 1
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 0
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 1
25782: NEG
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 1
25793: NEG
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: LD_INT 1
25805: NEG
25806: PUSH
25807: LD_INT 2
25809: NEG
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 0
25817: PUSH
25818: LD_INT 2
25820: NEG
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 2
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 2
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 2
25859: PUSH
25860: LD_INT 2
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: LD_INT 2
25872: PUSH
25873: EMPTY
25874: LIST
25875: LIST
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 2
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 1
25889: NEG
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 2
25900: NEG
25901: PUSH
25902: LD_INT 0
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 2
25911: NEG
25912: PUSH
25913: LD_INT 1
25915: NEG
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PUSH
25921: LD_INT 2
25923: NEG
25924: PUSH
25925: LD_INT 2
25927: NEG
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25954: LD_ADDR_VAR 0 22
25958: PUSH
25959: LD_INT 0
25961: PUSH
25962: LD_INT 0
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 0
25971: PUSH
25972: LD_INT 1
25974: NEG
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PUSH
25980: LD_INT 1
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 0
26002: PUSH
26003: LD_INT 1
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 1
26012: NEG
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 1
26023: NEG
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PUSH
26037: LD_INT 2
26039: NEG
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: LD_INT 2
26050: NEG
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 2
26069: PUSH
26070: LD_INT 0
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 2
26079: PUSH
26080: LD_INT 1
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: LD_INT 2
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: PUSH
26100: LD_INT 2
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 0
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 2
26130: NEG
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 2
26141: NEG
26142: PUSH
26143: LD_INT 1
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 2
26153: NEG
26154: PUSH
26155: LD_INT 2
26157: NEG
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: LIST
26182: LIST
26183: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26184: LD_ADDR_VAR 0 23
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: LD_INT 0
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: LD_INT 0
26201: PUSH
26202: LD_INT 1
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: PUSH
26213: LD_INT 0
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 1
26222: PUSH
26223: LD_INT 1
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 0
26232: PUSH
26233: LD_INT 1
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 1
26242: NEG
26243: PUSH
26244: LD_INT 0
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: LD_INT 1
26257: NEG
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 1
26265: NEG
26266: PUSH
26267: LD_INT 2
26269: NEG
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: LD_INT 2
26280: NEG
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 2
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 2
26309: PUSH
26310: LD_INT 1
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 2
26319: PUSH
26320: LD_INT 2
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 1
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 2
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: LD_INT 1
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 2
26360: NEG
26361: PUSH
26362: LD_INT 0
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 2
26371: NEG
26372: PUSH
26373: LD_INT 1
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 2
26383: NEG
26384: PUSH
26385: LD_INT 2
26387: NEG
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 2
26395: NEG
26396: PUSH
26397: LD_INT 3
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: LD_INT 3
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 1
26419: PUSH
26420: LD_INT 2
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 1
26433: NEG
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: LIST
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26464: LD_ADDR_VAR 0 24
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 0
26481: PUSH
26482: LD_INT 1
26484: NEG
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 1
26522: NEG
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: NEG
26534: PUSH
26535: LD_INT 1
26537: NEG
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: LD_INT 1
26545: NEG
26546: PUSH
26547: LD_INT 2
26549: NEG
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: LD_INT 2
26560: NEG
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 1
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 2
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 2
26599: PUSH
26600: LD_INT 2
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 1
26609: PUSH
26610: LD_INT 2
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: LD_INT 2
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 1
26629: NEG
26630: PUSH
26631: LD_INT 1
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 2
26640: NEG
26641: PUSH
26642: LD_INT 0
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 2
26651: NEG
26652: PUSH
26653: LD_INT 1
26655: NEG
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 2
26663: NEG
26664: PUSH
26665: LD_INT 2
26667: NEG
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: LD_INT 2
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: LD_INT 2
26686: PUSH
26687: LD_INT 1
26689: NEG
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 3
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 3
26707: PUSH
26708: LD_INT 2
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26740: LD_ADDR_VAR 0 25
26744: PUSH
26745: LD_INT 0
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 1
26760: NEG
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: PUSH
26779: LD_INT 1
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 0
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 1
26798: NEG
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: LD_INT 1
26813: NEG
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: PUSH
26819: LD_INT 1
26821: NEG
26822: PUSH
26823: LD_INT 2
26825: NEG
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 0
26833: PUSH
26834: LD_INT 2
26836: NEG
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: PUSH
26842: LD_INT 1
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: PUSH
26853: LD_INT 2
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 2
26865: PUSH
26866: LD_INT 1
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 2
26875: PUSH
26876: LD_INT 2
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: PUSH
26886: LD_INT 2
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: LD_INT 1
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 2
26916: NEG
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 2
26927: NEG
26928: PUSH
26929: LD_INT 1
26931: NEG
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 2
26939: NEG
26940: PUSH
26941: LD_INT 2
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 3
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 3
26961: PUSH
26962: LD_INT 2
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 2
26971: PUSH
26972: LD_INT 3
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: LD_INT 3
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27014: LD_ADDR_VAR 0 26
27018: PUSH
27019: LD_INT 0
27021: PUSH
27022: LD_INT 0
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 1
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 1
27052: PUSH
27053: LD_INT 1
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: LD_INT 1
27072: NEG
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 1
27083: NEG
27084: PUSH
27085: LD_INT 1
27087: NEG
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: NEG
27096: PUSH
27097: LD_INT 2
27099: NEG
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 2
27110: NEG
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 2
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 2
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 2
27149: PUSH
27150: LD_INT 2
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: LD_INT 1
27159: PUSH
27160: LD_INT 2
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 0
27169: PUSH
27170: LD_INT 2
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: NEG
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 2
27190: NEG
27191: PUSH
27192: LD_INT 0
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 2
27201: NEG
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 2
27213: NEG
27214: PUSH
27215: LD_INT 2
27217: NEG
27218: PUSH
27219: EMPTY
27220: LIST
27221: LIST
27222: PUSH
27223: LD_INT 2
27225: PUSH
27226: LD_INT 3
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: LD_INT 3
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: PUSH
27243: LD_INT 1
27245: NEG
27246: PUSH
27247: LD_INT 2
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: LD_INT 2
27256: NEG
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27290: LD_ADDR_VAR 0 27
27294: PUSH
27295: LD_INT 0
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: LD_INT 0
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: LD_INT 1
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 1
27348: NEG
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: NEG
27360: PUSH
27361: LD_INT 1
27363: NEG
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 1
27371: NEG
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 0
27383: PUSH
27384: LD_INT 2
27386: NEG
27387: PUSH
27388: EMPTY
27389: LIST
27390: LIST
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 2
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: PUSH
27416: LD_INT 1
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 2
27425: PUSH
27426: LD_INT 2
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 1
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: LD_INT 2
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: LD_INT 0
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 2
27477: NEG
27478: PUSH
27479: LD_INT 1
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 2
27489: NEG
27490: PUSH
27491: LD_INT 2
27493: NEG
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: LD_INT 1
27501: NEG
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 2
27512: NEG
27513: PUSH
27514: LD_INT 1
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 3
27523: NEG
27524: PUSH
27525: LD_INT 1
27527: NEG
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PUSH
27533: LD_INT 3
27535: NEG
27536: PUSH
27537: LD_INT 2
27539: NEG
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27570: LD_ADDR_VAR 0 28
27574: PUSH
27575: LD_INT 0
27577: PUSH
27578: LD_INT 0
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 0
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: PUSH
27599: LD_INT 0
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 1
27608: PUSH
27609: LD_INT 1
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: LD_INT 1
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 1
27628: NEG
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: LD_INT 1
27639: NEG
27640: PUSH
27641: LD_INT 1
27643: NEG
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 1
27651: NEG
27652: PUSH
27653: LD_INT 2
27655: NEG
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: PUSH
27661: LD_INT 0
27663: PUSH
27664: LD_INT 2
27666: NEG
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 2
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 2
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 2
27705: PUSH
27706: LD_INT 2
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PUSH
27723: LD_INT 0
27725: PUSH
27726: LD_INT 2
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: LD_INT 1
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 2
27746: NEG
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 2
27757: NEG
27758: PUSH
27759: LD_INT 1
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 2
27769: NEG
27770: PUSH
27771: LD_INT 2
27773: NEG
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 2
27781: NEG
27782: PUSH
27783: LD_INT 3
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 1
27793: NEG
27794: PUSH
27795: LD_INT 3
27797: NEG
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 3
27805: NEG
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: LD_INT 3
27817: NEG
27818: PUSH
27819: LD_INT 2
27821: NEG
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27852: LD_ADDR_VAR 0 29
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: LD_INT 0
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 0
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 1
27890: PUSH
27891: LD_INT 1
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 0
27900: PUSH
27901: LD_INT 1
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: LD_INT 0
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 1
27921: NEG
27922: PUSH
27923: LD_INT 1
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: LD_INT 2
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: LD_INT 2
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: LD_INT 1
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 2
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 2
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: LD_INT 2
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 2
28018: NEG
28019: PUSH
28020: LD_INT 1
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 2
28030: NEG
28031: PUSH
28032: LD_INT 2
28034: NEG
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 2
28042: NEG
28043: PUSH
28044: LD_INT 3
28046: NEG
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 2
28054: PUSH
28055: LD_INT 1
28057: NEG
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: PUSH
28063: LD_INT 3
28065: PUSH
28066: LD_INT 1
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: LD_INT 3
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: LD_INT 2
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 3
28096: NEG
28097: PUSH
28098: LD_INT 2
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28131: LD_ADDR_VAR 0 30
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: LD_INT 0
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: LD_INT 0
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 0
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: NEG
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 1
28212: NEG
28213: PUSH
28214: LD_INT 2
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: LD_INT 2
28227: NEG
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 2
28256: PUSH
28257: LD_INT 1
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: LD_INT 2
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: LD_INT 2
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: PUSH
28284: LD_INT 1
28286: NEG
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 2
28297: NEG
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 2
28308: NEG
28309: PUSH
28310: LD_INT 1
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: NEG
28321: PUSH
28322: LD_INT 3
28324: NEG
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 1
28332: PUSH
28333: LD_INT 2
28335: NEG
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 3
28343: PUSH
28344: LD_INT 2
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 2
28353: PUSH
28354: LD_INT 3
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 2
28363: NEG
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 3
28374: NEG
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28409: LD_ADDR_VAR 0 31
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 0
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: LD_INT 0
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 1
28478: NEG
28479: PUSH
28480: LD_INT 1
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: NEG
28491: PUSH
28492: LD_INT 2
28494: NEG
28495: PUSH
28496: EMPTY
28497: LIST
28498: LIST
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 2
28513: PUSH
28514: LD_INT 0
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 2
28523: PUSH
28524: LD_INT 1
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 2
28533: PUSH
28534: LD_INT 2
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: LD_INT 2
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 0
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: NEG
28564: PUSH
28565: LD_INT 1
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 2
28574: NEG
28575: PUSH
28576: LD_INT 1
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 2
28586: NEG
28587: PUSH
28588: LD_INT 2
28590: NEG
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 2
28598: NEG
28599: PUSH
28600: LD_INT 3
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 3
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 1
28631: PUSH
28632: LD_INT 3
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 1
28641: NEG
28642: PUSH
28643: LD_INT 2
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 3
28652: NEG
28653: PUSH
28654: LD_INT 2
28656: NEG
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28687: LD_ADDR_VAR 0 32
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 0
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: LD_INT 1
28715: PUSH
28716: LD_INT 0
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: LD_INT 1
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: LD_INT 1
28760: NEG
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: PUSH
28766: LD_INT 1
28768: NEG
28769: PUSH
28770: LD_INT 2
28772: NEG
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: LD_INT 2
28783: NEG
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 1
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: LD_INT 2
28802: PUSH
28803: LD_INT 1
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 2
28812: PUSH
28813: LD_INT 2
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: PUSH
28820: LD_INT 1
28822: PUSH
28823: LD_INT 2
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: LD_INT 2
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 1
28842: NEG
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 2
28853: NEG
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: LD_INT 1
28868: NEG
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: LD_INT 3
28880: NEG
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 1
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 3
28899: PUSH
28900: LD_INT 2
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PUSH
28907: LD_INT 2
28909: PUSH
28910: LD_INT 3
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 2
28919: NEG
28920: PUSH
28921: LD_INT 1
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 3
28930: NEG
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28965: LD_ADDR_VAR 0 33
28969: PUSH
28970: LD_INT 0
28972: PUSH
28973: LD_INT 0
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: PUSH
28980: LD_INT 0
28982: PUSH
28983: LD_INT 1
28985: NEG
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: LD_INT 0
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 0
29013: PUSH
29014: LD_INT 1
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 1
29023: NEG
29024: PUSH
29025: LD_INT 0
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 1
29034: NEG
29035: PUSH
29036: LD_INT 1
29038: NEG
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 1
29046: NEG
29047: PUSH
29048: LD_INT 2
29050: NEG
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: LD_INT 1
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 2
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 2
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: LD_INT 2
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: LD_INT 2
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 1
29109: NEG
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 2
29120: NEG
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 2
29131: NEG
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 2
29143: NEG
29144: PUSH
29145: LD_INT 2
29147: NEG
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 2
29155: NEG
29156: PUSH
29157: LD_INT 3
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: LD_INT 1
29170: NEG
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: LD_INT 3
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 1
29188: PUSH
29189: LD_INT 3
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: LD_INT 2
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 3
29209: NEG
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29244: LD_ADDR_VAR 0 34
29248: PUSH
29249: LD_INT 0
29251: PUSH
29252: LD_INT 0
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 0
29261: PUSH
29262: LD_INT 1
29264: NEG
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: LD_INT 1
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 0
29292: PUSH
29293: LD_INT 1
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: LD_INT 1
29302: NEG
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 1
29313: NEG
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 1
29325: NEG
29326: PUSH
29327: LD_INT 2
29329: NEG
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: LD_INT 0
29337: PUSH
29338: LD_INT 2
29340: NEG
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: LD_INT 1
29351: NEG
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: LD_INT 2
29359: PUSH
29360: LD_INT 1
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 2
29369: PUSH
29370: LD_INT 2
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 1
29379: PUSH
29380: LD_INT 2
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 1
29389: NEG
29390: PUSH
29391: LD_INT 1
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 2
29400: NEG
29401: PUSH
29402: LD_INT 0
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 2
29411: NEG
29412: PUSH
29413: LD_INT 1
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 2
29423: NEG
29424: PUSH
29425: LD_INT 2
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: LD_INT 3
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: LD_INT 1
29447: PUSH
29448: LD_INT 2
29450: NEG
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 3
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 2
29468: PUSH
29469: LD_INT 3
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 2
29478: NEG
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 3
29489: NEG
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: LIST
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: LIST
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29524: LD_ADDR_VAR 0 35
29528: PUSH
29529: LD_INT 0
29531: PUSH
29532: LD_INT 0
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 0
29541: PUSH
29542: LD_INT 1
29544: NEG
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 1
29552: PUSH
29553: LD_INT 0
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: LD_INT 1
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: LD_INT 1
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 1
29582: NEG
29583: PUSH
29584: LD_INT 0
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: LD_INT 1
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 2
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 2
29615: NEG
29616: PUSH
29617: LD_INT 1
29619: NEG
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: LIST
29634: LIST
29635: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29636: LD_ADDR_VAR 0 36
29640: PUSH
29641: LD_INT 0
29643: PUSH
29644: LD_INT 0
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: LD_INT 1
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: LD_INT 0
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 1
29674: PUSH
29675: LD_INT 1
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 0
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 1
29694: NEG
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: NEG
29718: PUSH
29719: LD_INT 2
29721: NEG
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: LD_INT 2
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29748: LD_ADDR_VAR 0 37
29752: PUSH
29753: LD_INT 0
29755: PUSH
29756: LD_INT 0
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 0
29765: PUSH
29766: LD_INT 1
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: LD_INT 0
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 1
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 0
29796: PUSH
29797: LD_INT 1
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: PUSH
29804: LD_INT 1
29806: NEG
29807: PUSH
29808: LD_INT 0
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: NEG
29818: PUSH
29819: LD_INT 1
29821: NEG
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 1
29829: PUSH
29830: LD_INT 1
29832: NEG
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 1
29840: NEG
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29860: LD_ADDR_VAR 0 38
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 0
29877: PUSH
29878: LD_INT 1
29880: NEG
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: LD_INT 1
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 1
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: NEG
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: LD_INT 1
29933: NEG
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29972: LD_ADDR_VAR 0 39
29976: PUSH
29977: LD_INT 0
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: LD_INT 0
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 1
30010: PUSH
30011: LD_INT 1
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 0
30020: PUSH
30021: LD_INT 1
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: NEG
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 1
30041: NEG
30042: PUSH
30043: LD_INT 1
30045: NEG
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: PUSH
30055: LD_INT 2
30057: NEG
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 2
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30084: LD_ADDR_VAR 0 40
30088: PUSH
30089: LD_INT 0
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 0
30101: PUSH
30102: LD_INT 1
30104: NEG
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: LD_INT 1
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: LD_INT 1
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 0
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 1
30142: NEG
30143: PUSH
30144: LD_INT 0
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: LD_INT 1
30157: NEG
30158: PUSH
30159: EMPTY
30160: LIST
30161: LIST
30162: PUSH
30163: LD_INT 1
30165: PUSH
30166: LD_INT 1
30168: NEG
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: LD_INT 1
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30196: LD_ADDR_VAR 0 41
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 1
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: LD_INT 1
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: NEG
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: LD_INT 1
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: LD_INT 2
30281: NEG
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 1
30289: PUSH
30290: LD_INT 1
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 2
30300: PUSH
30301: LD_INT 0
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 2
30310: PUSH
30311: LD_INT 1
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: LD_INT 2
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 1
30330: PUSH
30331: LD_INT 2
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 1
30340: NEG
30341: PUSH
30342: LD_INT 1
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 2
30351: NEG
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 2
30362: NEG
30363: PUSH
30364: LD_INT 1
30366: NEG
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 2
30374: NEG
30375: PUSH
30376: LD_INT 2
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 2
30386: NEG
30387: PUSH
30388: LD_INT 3
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 2
30398: PUSH
30399: LD_INT 1
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 3
30409: PUSH
30410: LD_INT 0
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 3
30419: PUSH
30420: LD_INT 1
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 3
30429: PUSH
30430: LD_INT 2
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 3
30439: PUSH
30440: LD_INT 3
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 2
30449: PUSH
30450: LD_INT 3
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: LD_INT 1
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 3
30470: NEG
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 3
30481: NEG
30482: PUSH
30483: LD_INT 1
30485: NEG
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: LD_INT 3
30493: NEG
30494: PUSH
30495: LD_INT 2
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 3
30505: NEG
30506: PUSH
30507: LD_INT 3
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30546: LD_ADDR_VAR 0 42
30550: PUSH
30551: LD_INT 0
30553: PUSH
30554: LD_INT 0
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 0
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 0
30594: PUSH
30595: LD_INT 1
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 1
30604: NEG
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: LD_INT 1
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 1
30627: NEG
30628: PUSH
30629: LD_INT 2
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 0
30639: PUSH
30640: LD_INT 2
30642: NEG
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: PUSH
30651: LD_INT 1
30653: NEG
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 2
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: LD_INT 2
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: PUSH
30682: LD_INT 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 0
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 1
30701: NEG
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 2
30712: NEG
30713: PUSH
30714: LD_INT 1
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 2
30724: NEG
30725: PUSH
30726: LD_INT 2
30728: NEG
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 2
30736: NEG
30737: PUSH
30738: LD_INT 3
30740: NEG
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 1
30748: NEG
30749: PUSH
30750: LD_INT 3
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 0
30760: PUSH
30761: LD_INT 3
30763: NEG
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: LD_INT 2
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 3
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 3
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: LD_INT 3
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 1
30812: PUSH
30813: LD_INT 3
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: LD_INT 3
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: PUSH
30834: LD_INT 2
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 3
30843: NEG
30844: PUSH
30845: LD_INT 2
30847: NEG
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 3
30855: NEG
30856: PUSH
30857: LD_INT 3
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: LIST
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30896: LD_ADDR_VAR 0 43
30900: PUSH
30901: LD_INT 0
30903: PUSH
30904: LD_INT 0
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 0
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 1
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 1
30934: PUSH
30935: LD_INT 1
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 0
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 1
30954: NEG
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: NEG
30978: PUSH
30979: LD_INT 2
30981: NEG
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: LD_INT 2
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 1
31000: PUSH
31001: LD_INT 1
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 2
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: LD_INT 1
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: LD_INT 2
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 0
31041: PUSH
31042: LD_INT 2
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 1
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 2
31062: NEG
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 2
31073: NEG
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: NEG
31086: PUSH
31087: LD_INT 3
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: LD_INT 3
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: LD_INT 2
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 2
31119: PUSH
31120: LD_INT 1
31122: NEG
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 3
31130: PUSH
31131: LD_INT 0
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 3
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: PUSH
31151: LD_INT 3
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: LD_INT 3
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: NEG
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 3
31192: NEG
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 3
31203: NEG
31204: PUSH
31205: LD_INT 1
31207: NEG
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31244: LD_ADDR_VAR 0 44
31248: PUSH
31249: LD_INT 0
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: LD_INT 2
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: LD_INT 1
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 2
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: PUSH
31359: LD_INT 1
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 2
31368: PUSH
31369: LD_INT 2
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 1
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: LD_INT 1
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 2
31399: NEG
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 2
31410: NEG
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 2
31422: NEG
31423: PUSH
31424: LD_INT 2
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: NEG
31435: PUSH
31436: LD_INT 3
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 2
31446: PUSH
31447: LD_INT 1
31449: NEG
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 3
31457: PUSH
31458: LD_INT 0
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 3
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: LD_INT 2
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 3
31487: PUSH
31488: LD_INT 3
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 2
31497: PUSH
31498: LD_INT 3
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 2
31507: NEG
31508: PUSH
31509: LD_INT 1
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 3
31518: NEG
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 3
31529: NEG
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 3
31541: NEG
31542: PUSH
31543: LD_INT 2
31545: NEG
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 3
31553: NEG
31554: PUSH
31555: LD_INT 3
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31594: LD_ADDR_VAR 0 45
31598: PUSH
31599: LD_INT 0
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 0
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: LD_INT 0
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 0
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 1
31652: NEG
31653: PUSH
31654: LD_INT 0
31656: PUSH
31657: EMPTY
31658: LIST
31659: LIST
31660: PUSH
31661: LD_INT 1
31663: NEG
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: LD_INT 2
31679: NEG
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 0
31687: PUSH
31688: LD_INT 2
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 2
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 2
31719: PUSH
31720: LD_INT 2
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: LD_INT 2
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 0
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 2
31760: NEG
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 2
31772: NEG
31773: PUSH
31774: LD_INT 2
31776: NEG
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 2
31784: NEG
31785: PUSH
31786: LD_INT 3
31788: NEG
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: LD_INT 3
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: LD_INT 3
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 2
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 3
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 3
31840: PUSH
31841: LD_INT 3
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 3
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: LD_INT 3
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: LD_INT 3
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 3
31891: NEG
31892: PUSH
31893: LD_INT 2
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 3
31903: NEG
31904: PUSH
31905: LD_INT 3
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31944: LD_ADDR_VAR 0 46
31948: PUSH
31949: LD_INT 0
31951: PUSH
31952: LD_INT 0
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 0
31961: PUSH
31962: LD_INT 1
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 1
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 1
31982: PUSH
31983: LD_INT 1
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 0
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 1
32002: NEG
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 1
32013: NEG
32014: PUSH
32015: LD_INT 1
32017: NEG
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: LD_INT 2
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: LD_INT 2
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 2
32059: PUSH
32060: LD_INT 0
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 2
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 1
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: LD_INT 2
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 2
32110: NEG
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 2
32121: NEG
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: LD_INT 3
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: LD_INT 3
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: PUSH
32157: LD_INT 2
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 2
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 3
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: LD_INT 3
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: LD_INT 3
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: NEG
32219: PUSH
32220: LD_INT 2
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 2
32229: NEG
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 3
32240: NEG
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 3
32251: NEG
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32292: LD_ADDR_VAR 0 47
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 1
32312: NEG
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 1
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: LD_INT 1
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: NEG
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: NEG
32374: PUSH
32375: LD_INT 2
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: LD_INT 2
32388: NEG
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 2
32407: NEG
32408: PUSH
32409: LD_INT 1
32411: NEG
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 2
32419: NEG
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32443: LD_ADDR_VAR 0 48
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: LD_INT 0
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: LD_INT 1
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 1
32501: NEG
32502: PUSH
32503: LD_INT 0
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: PUSH
32514: LD_INT 1
32516: NEG
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 1
32524: NEG
32525: PUSH
32526: LD_INT 2
32528: NEG
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: PUSH
32534: LD_INT 0
32536: PUSH
32537: LD_INT 2
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: PUSH
32548: LD_INT 1
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 2
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: LD_INT 1
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32590: LD_ADDR_VAR 0 49
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: LD_INT 1
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: LD_INT 1
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: LD_INT 1
32663: NEG
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 1
32671: PUSH
32672: LD_INT 1
32674: NEG
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: LD_INT 0
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 2
32692: PUSH
32693: LD_INT 1
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: PUSH
32700: LD_INT 2
32702: PUSH
32703: LD_INT 2
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32734: LD_ADDR_VAR 0 50
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: LD_INT 0
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: LD_INT 1
32754: NEG
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: EMPTY
32767: LIST
32768: LIST
32769: PUSH
32770: LD_INT 1
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 1
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: LD_INT 0
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 1
32803: NEG
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: PUSH
32813: LD_INT 2
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: EMPTY
32820: LIST
32821: LIST
32822: PUSH
32823: LD_INT 2
32825: PUSH
32826: LD_INT 2
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: LD_INT 2
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 0
32845: PUSH
32846: LD_INT 2
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: LD_INT 1
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32878: LD_ADDR_VAR 0 51
32882: PUSH
32883: LD_INT 0
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 0
32895: PUSH
32896: LD_INT 1
32898: NEG
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 1
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 1
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: LD_INT 1
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: LD_INT 1
32936: NEG
32937: PUSH
32938: LD_INT 0
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: PUSH
32945: LD_INT 1
32947: NEG
32948: PUSH
32949: LD_INT 1
32951: NEG
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 1
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: LD_INT 2
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 2
32990: NEG
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 2
33001: NEG
33002: PUSH
33003: LD_INT 1
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33025: LD_ADDR_VAR 0 52
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 1
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: NEG
33095: PUSH
33096: LD_INT 1
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: LD_INT 2
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: LD_INT 1
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 2
33129: NEG
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 2
33140: NEG
33141: PUSH
33142: LD_INT 1
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 2
33152: NEG
33153: PUSH
33154: LD_INT 2
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33176: LD_ADDR_VAR 0 53
33180: PUSH
33181: LD_INT 0
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: LD_INT 1
33196: NEG
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: LD_INT 0
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 1
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: LD_INT 1
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 1
33245: NEG
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 1
33257: NEG
33258: PUSH
33259: LD_INT 2
33261: NEG
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 0
33269: PUSH
33270: LD_INT 2
33272: NEG
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 2
33301: PUSH
33302: LD_INT 1
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 2
33311: PUSH
33312: LD_INT 2
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: LD_INT 2
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 0
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: LD_INT 2
33352: NEG
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 2
33363: NEG
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 2
33375: NEG
33376: PUSH
33377: LD_INT 2
33379: NEG
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33406: LD_ADDR_VAR 0 54
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: LD_INT 0
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 0
33423: PUSH
33424: LD_INT 1
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: LD_INT 0
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: LD_INT 1
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: LD_INT 1
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 1
33464: NEG
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: LD_INT 1
33479: NEG
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: LD_INT 2
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 0
33499: PUSH
33500: LD_INT 2
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 1
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 2
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 2
33531: PUSH
33532: LD_INT 1
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 2
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: LD_INT 2
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: LD_INT 2
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 2
33582: NEG
33583: PUSH
33584: LD_INT 0
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 2
33593: NEG
33594: PUSH
33595: LD_INT 1
33597: NEG
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 2
33605: NEG
33606: PUSH
33607: LD_INT 2
33609: NEG
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33636: LD_ADDR_VAR 0 55
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: LD_INT 0
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: LD_INT 1
33656: NEG
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 1
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 1
33694: NEG
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: LD_INT 1
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: NEG
33718: PUSH
33719: LD_INT 2
33721: NEG
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 0
33729: PUSH
33730: LD_INT 2
33732: NEG
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 2
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 2
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: LD_INT 2
33771: PUSH
33772: LD_INT 2
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: LD_INT 2
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: PUSH
33799: LD_INT 1
33801: NEG
33802: PUSH
33803: LD_INT 1
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 2
33812: NEG
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 2
33823: NEG
33824: PUSH
33825: LD_INT 1
33827: NEG
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 2
33835: NEG
33836: PUSH
33837: LD_INT 2
33839: NEG
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33866: LD_ADDR_VAR 0 56
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 0
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: LD_INT 1
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: LD_INT 2
33951: NEG
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: LD_INT 2
33962: NEG
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 1
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 2
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 2
33991: PUSH
33992: LD_INT 1
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 2
34001: PUSH
34002: LD_INT 2
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 2
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: NEG
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 2
34065: NEG
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34096: LD_ADDR_VAR 0 57
34100: PUSH
34101: LD_INT 0
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 0
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: LD_INT 0
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 0
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 1
34154: NEG
34155: PUSH
34156: LD_INT 0
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 1
34165: NEG
34166: PUSH
34167: LD_INT 1
34169: NEG
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PUSH
34175: LD_INT 1
34177: NEG
34178: PUSH
34179: LD_INT 2
34181: NEG
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 0
34189: PUSH
34190: LD_INT 2
34192: NEG
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 1
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 2
34221: PUSH
34222: LD_INT 1
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 2
34231: PUSH
34232: LD_INT 2
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: LD_INT 2
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 0
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: EMPTY
34267: LIST
34268: LIST
34269: PUSH
34270: LD_INT 2
34272: NEG
34273: PUSH
34274: LD_INT 0
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 2
34283: NEG
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 2
34295: NEG
34296: PUSH
34297: LD_INT 2
34299: NEG
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34326: LD_ADDR_VAR 0 58
34330: PUSH
34331: LD_INT 0
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: LD_INT 1
34346: NEG
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: LD_INT 1
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 1
34384: NEG
34385: PUSH
34386: LD_INT 0
34388: PUSH
34389: EMPTY
34390: LIST
34391: LIST
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: NEG
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 0
34419: PUSH
34420: LD_INT 2
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 2
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 2
34461: PUSH
34462: LD_INT 2
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 1
34471: PUSH
34472: LD_INT 2
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 0
34481: PUSH
34482: LD_INT 2
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 1
34491: NEG
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 2
34502: NEG
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: LD_INT 1
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 2
34525: NEG
34526: PUSH
34527: LD_INT 2
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34556: LD_ADDR_VAR 0 59
34560: PUSH
34561: LD_INT 0
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: PUSH
34571: LD_INT 0
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 1
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: PUSH
34595: LD_INT 1
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 0
34604: PUSH
34605: LD_INT 1
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: NEG
34615: PUSH
34616: LD_INT 0
34618: PUSH
34619: EMPTY
34620: LIST
34621: LIST
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: LD_INT 1
34629: NEG
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34644: LD_ADDR_VAR 0 60
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 0
34661: PUSH
34662: LD_INT 1
34664: NEG
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: LD_INT 1
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 0
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: NEG
34703: PUSH
34704: LD_INT 0
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34732: LD_ADDR_VAR 0 61
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: LD_INT 0
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 0
34749: PUSH
34750: LD_INT 1
34752: NEG
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 1
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: LD_INT 1
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: LD_INT 0
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 1
34801: NEG
34802: PUSH
34803: LD_INT 1
34805: NEG
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34820: LD_ADDR_VAR 0 62
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: LD_INT 0
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: LD_INT 1
34840: NEG
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 1
34848: PUSH
34849: LD_INT 0
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 1
34858: PUSH
34859: LD_INT 1
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 0
34868: PUSH
34869: LD_INT 1
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: LD_INT 0
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: PUSH
34887: LD_INT 1
34889: NEG
34890: PUSH
34891: LD_INT 1
34893: NEG
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34908: LD_ADDR_VAR 0 63
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 0
34925: PUSH
34926: LD_INT 1
34928: NEG
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 1
34936: PUSH
34937: LD_INT 0
34939: PUSH
34940: EMPTY
34941: LIST
34942: LIST
34943: PUSH
34944: LD_INT 1
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: NEG
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: LD_INT 1
34981: NEG
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34996: LD_ADDR_VAR 0 64
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: LD_INT 0
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: PUSH
35011: LD_INT 0
35013: PUSH
35014: LD_INT 1
35016: NEG
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 1
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: PUSH
35035: LD_INT 1
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: LD_INT 1
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: ST_TO_ADDR
// end ; 1 :
35084: GO 40981
35086: LD_INT 1
35088: DOUBLE
35089: EQUAL
35090: IFTRUE 35094
35092: GO 37717
35094: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35095: LD_ADDR_VAR 0 11
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: LD_INT 3
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: LD_INT 3
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: LD_INT 2
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: LIST
35138: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35139: LD_ADDR_VAR 0 12
35143: PUSH
35144: LD_INT 2
35146: PUSH
35147: LD_INT 1
35149: NEG
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 3
35157: PUSH
35158: LD_INT 0
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 3
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: LIST
35179: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35180: LD_ADDR_VAR 0 13
35184: PUSH
35185: LD_INT 3
35187: PUSH
35188: LD_INT 2
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 3
35197: PUSH
35198: LD_INT 3
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 2
35207: PUSH
35208: LD_INT 3
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: LIST
35219: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35220: LD_ADDR_VAR 0 14
35224: PUSH
35225: LD_INT 1
35227: PUSH
35228: LD_INT 3
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: LD_INT 3
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 1
35247: NEG
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: LIST
35260: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35261: LD_ADDR_VAR 0 15
35265: PUSH
35266: LD_INT 2
35268: NEG
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: EMPTY
35274: LIST
35275: LIST
35276: PUSH
35277: LD_INT 3
35279: NEG
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 3
35290: NEG
35291: PUSH
35292: LD_INT 1
35294: NEG
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: LIST
35304: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35305: LD_ADDR_VAR 0 16
35309: PUSH
35310: LD_INT 2
35312: NEG
35313: PUSH
35314: LD_INT 3
35316: NEG
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 3
35324: NEG
35325: PUSH
35326: LD_INT 2
35328: NEG
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 3
35336: NEG
35337: PUSH
35338: LD_INT 3
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: LIST
35350: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35351: LD_ADDR_VAR 0 17
35355: PUSH
35356: LD_INT 1
35358: NEG
35359: PUSH
35360: LD_INT 3
35362: NEG
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: LD_INT 3
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: LD_INT 1
35381: PUSH
35382: LD_INT 2
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: LIST
35394: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35395: LD_ADDR_VAR 0 18
35399: PUSH
35400: LD_INT 2
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: PUSH
35411: LD_INT 3
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 3
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: LIST
35435: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35436: LD_ADDR_VAR 0 19
35440: PUSH
35441: LD_INT 3
35443: PUSH
35444: LD_INT 2
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 3
35453: PUSH
35454: LD_INT 3
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 2
35463: PUSH
35464: LD_INT 3
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35476: LD_ADDR_VAR 0 20
35480: PUSH
35481: LD_INT 1
35483: PUSH
35484: LD_INT 3
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 0
35493: PUSH
35494: LD_INT 3
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: NEG
35504: PUSH
35505: LD_INT 2
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: LIST
35516: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35517: LD_ADDR_VAR 0 21
35521: PUSH
35522: LD_INT 2
35524: NEG
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 3
35535: NEG
35536: PUSH
35537: LD_INT 0
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 3
35546: NEG
35547: PUSH
35548: LD_INT 1
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: LIST
35560: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35561: LD_ADDR_VAR 0 22
35565: PUSH
35566: LD_INT 2
35568: NEG
35569: PUSH
35570: LD_INT 3
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 3
35580: NEG
35581: PUSH
35582: LD_INT 2
35584: NEG
35585: PUSH
35586: EMPTY
35587: LIST
35588: LIST
35589: PUSH
35590: LD_INT 3
35592: NEG
35593: PUSH
35594: LD_INT 3
35596: NEG
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35607: LD_ADDR_VAR 0 23
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: LD_INT 3
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 1
35625: NEG
35626: PUSH
35627: LD_INT 4
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: LD_INT 3
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: LIST
35650: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35651: LD_ADDR_VAR 0 24
35655: PUSH
35656: LD_INT 3
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 3
35668: PUSH
35669: LD_INT 1
35671: NEG
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 4
35679: PUSH
35680: LD_INT 1
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: LIST
35691: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35692: LD_ADDR_VAR 0 25
35696: PUSH
35697: LD_INT 3
35699: PUSH
35700: LD_INT 3
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 4
35709: PUSH
35710: LD_INT 3
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 3
35719: PUSH
35720: LD_INT 4
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35732: LD_ADDR_VAR 0 26
35736: PUSH
35737: LD_INT 0
35739: PUSH
35740: LD_INT 3
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 1
35749: PUSH
35750: LD_INT 4
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: NEG
35760: PUSH
35761: LD_INT 3
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35773: LD_ADDR_VAR 0 27
35777: PUSH
35778: LD_INT 3
35780: NEG
35781: PUSH
35782: LD_INT 0
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: PUSH
35789: LD_INT 3
35791: NEG
35792: PUSH
35793: LD_INT 1
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 4
35802: NEG
35803: PUSH
35804: LD_INT 1
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: LIST
35816: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35817: LD_ADDR_VAR 0 28
35821: PUSH
35822: LD_INT 3
35824: NEG
35825: PUSH
35826: LD_INT 3
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 3
35836: NEG
35837: PUSH
35838: LD_INT 4
35840: NEG
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 4
35848: NEG
35849: PUSH
35850: LD_INT 3
35852: NEG
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35863: LD_ADDR_VAR 0 29
35867: PUSH
35868: LD_INT 1
35870: NEG
35871: PUSH
35872: LD_INT 3
35874: NEG
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: LD_INT 3
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: LD_INT 4
35908: NEG
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: LD_INT 4
35919: NEG
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: PUSH
35928: LD_INT 3
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: LD_INT 5
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 5
35953: NEG
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: LD_INT 4
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: LD_INT 6
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 0
35984: PUSH
35985: LD_INT 6
35987: NEG
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: LD_INT 5
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36018: LD_ADDR_VAR 0 30
36022: PUSH
36023: LD_INT 2
36025: PUSH
36026: LD_INT 1
36028: NEG
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 3
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 3
36046: PUSH
36047: LD_INT 1
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: PUSH
36054: LD_INT 3
36056: PUSH
36057: LD_INT 1
36059: NEG
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: LD_INT 4
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 4
36077: PUSH
36078: LD_INT 1
36080: PUSH
36081: EMPTY
36082: LIST
36083: LIST
36084: PUSH
36085: LD_INT 4
36087: PUSH
36088: LD_INT 1
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 5
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 5
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 5
36118: PUSH
36119: LD_INT 1
36121: NEG
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 6
36129: PUSH
36130: LD_INT 0
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 6
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: EMPTY
36144: LIST
36145: LIST
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36161: LD_ADDR_VAR 0 31
36165: PUSH
36166: LD_INT 3
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 3
36178: PUSH
36179: LD_INT 3
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: LD_INT 3
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 4
36198: PUSH
36199: LD_INT 3
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 4
36208: PUSH
36209: LD_INT 4
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 3
36218: PUSH
36219: LD_INT 4
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 5
36228: PUSH
36229: LD_INT 4
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 5
36238: PUSH
36239: LD_INT 5
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 4
36248: PUSH
36249: LD_INT 5
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 6
36258: PUSH
36259: LD_INT 5
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 6
36268: PUSH
36269: LD_INT 6
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 5
36278: PUSH
36279: LD_INT 6
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36300: LD_ADDR_VAR 0 32
36304: PUSH
36305: LD_INT 1
36307: PUSH
36308: LD_INT 3
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 3
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 4
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: LD_INT 4
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 1
36358: NEG
36359: PUSH
36360: LD_INT 3
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: LD_INT 5
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: LD_INT 5
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: LD_INT 4
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: LD_INT 6
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: LD_INT 6
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: LD_INT 5
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36443: LD_ADDR_VAR 0 33
36447: PUSH
36448: LD_INT 2
36450: NEG
36451: PUSH
36452: LD_INT 1
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 3
36461: NEG
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 3
36472: NEG
36473: PUSH
36474: LD_INT 1
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 3
36484: NEG
36485: PUSH
36486: LD_INT 1
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 4
36495: NEG
36496: PUSH
36497: LD_INT 0
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 4
36506: NEG
36507: PUSH
36508: LD_INT 1
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 4
36518: NEG
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 5
36529: NEG
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 5
36540: NEG
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 5
36552: NEG
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 6
36563: NEG
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 6
36574: NEG
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36598: LD_ADDR_VAR 0 34
36602: PUSH
36603: LD_INT 2
36605: NEG
36606: PUSH
36607: LD_INT 3
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 3
36617: NEG
36618: PUSH
36619: LD_INT 2
36621: NEG
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 3
36629: NEG
36630: PUSH
36631: LD_INT 3
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 3
36641: NEG
36642: PUSH
36643: LD_INT 4
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 4
36653: NEG
36654: PUSH
36655: LD_INT 3
36657: NEG
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_INT 4
36665: NEG
36666: PUSH
36667: LD_INT 4
36669: NEG
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 4
36677: NEG
36678: PUSH
36679: LD_INT 5
36681: NEG
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 5
36689: NEG
36690: PUSH
36691: LD_INT 4
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 5
36701: NEG
36702: PUSH
36703: LD_INT 5
36705: NEG
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 5
36713: NEG
36714: PUSH
36715: LD_INT 6
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 6
36725: NEG
36726: PUSH
36727: LD_INT 5
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 6
36737: NEG
36738: PUSH
36739: LD_INT 6
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36761: LD_ADDR_VAR 0 41
36765: PUSH
36766: LD_INT 0
36768: PUSH
36769: LD_INT 2
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: LD_INT 3
36783: NEG
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: LD_INT 2
36794: NEG
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: LIST
36804: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36805: LD_ADDR_VAR 0 42
36809: PUSH
36810: LD_INT 2
36812: PUSH
36813: LD_INT 0
36815: PUSH
36816: EMPTY
36817: LIST
36818: LIST
36819: PUSH
36820: LD_INT 2
36822: PUSH
36823: LD_INT 1
36825: NEG
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 3
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36846: LD_ADDR_VAR 0 43
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: LD_INT 2
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 3
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: LD_INT 3
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: LIST
36885: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36886: LD_ADDR_VAR 0 44
36890: PUSH
36891: LD_INT 0
36893: PUSH
36894: LD_INT 2
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: PUSH
36904: LD_INT 3
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: LD_INT 1
36913: NEG
36914: PUSH
36915: LD_INT 2
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36927: LD_ADDR_VAR 0 45
36931: PUSH
36932: LD_INT 2
36934: NEG
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: PUSH
36943: LD_INT 2
36945: NEG
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 3
36956: NEG
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: LIST
36970: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36971: LD_ADDR_VAR 0 46
36975: PUSH
36976: LD_INT 2
36978: NEG
36979: PUSH
36980: LD_INT 2
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 2
36990: NEG
36991: PUSH
36992: LD_INT 3
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 3
37002: NEG
37003: PUSH
37004: LD_INT 2
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: LIST
37016: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37017: LD_ADDR_VAR 0 47
37021: PUSH
37022: LD_INT 2
37024: NEG
37025: PUSH
37026: LD_INT 3
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 1
37036: NEG
37037: PUSH
37038: LD_INT 3
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37050: LD_ADDR_VAR 0 48
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PUSH
37066: LD_INT 2
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37081: LD_ADDR_VAR 0 49
37085: PUSH
37086: LD_INT 3
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 3
37098: PUSH
37099: LD_INT 2
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37110: LD_ADDR_VAR 0 50
37114: PUSH
37115: LD_INT 2
37117: PUSH
37118: LD_INT 3
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 1
37127: PUSH
37128: LD_INT 3
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37139: LD_ADDR_VAR 0 51
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: LD_INT 2
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 2
37157: NEG
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37170: LD_ADDR_VAR 0 52
37174: PUSH
37175: LD_INT 3
37177: NEG
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 3
37189: NEG
37190: PUSH
37191: LD_INT 2
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37203: LD_ADDR_VAR 0 53
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 3
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: LD_INT 0
37222: PUSH
37223: LD_INT 3
37225: NEG
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: LD_INT 2
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: LIST
37246: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37247: LD_ADDR_VAR 0 54
37251: PUSH
37252: LD_INT 2
37254: PUSH
37255: LD_INT 1
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 3
37265: PUSH
37266: LD_INT 0
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 3
37275: PUSH
37276: LD_INT 1
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37288: LD_ADDR_VAR 0 55
37292: PUSH
37293: LD_INT 3
37295: PUSH
37296: LD_INT 2
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: LD_INT 3
37305: PUSH
37306: LD_INT 3
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 2
37315: PUSH
37316: LD_INT 3
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: LIST
37327: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37328: LD_ADDR_VAR 0 56
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: LD_INT 3
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: LD_INT 3
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 1
37355: NEG
37356: PUSH
37357: LD_INT 2
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: LIST
37368: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37369: LD_ADDR_VAR 0 57
37373: PUSH
37374: LD_INT 2
37376: NEG
37377: PUSH
37378: LD_INT 1
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 3
37387: NEG
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 3
37398: NEG
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: LIST
37412: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37413: LD_ADDR_VAR 0 58
37417: PUSH
37418: LD_INT 2
37420: NEG
37421: PUSH
37422: LD_INT 3
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 3
37432: NEG
37433: PUSH
37434: LD_INT 2
37436: NEG
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 3
37444: NEG
37445: PUSH
37446: LD_INT 3
37448: NEG
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: LIST
37458: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37459: LD_ADDR_VAR 0 59
37463: PUSH
37464: LD_INT 1
37466: NEG
37467: PUSH
37468: LD_INT 2
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: LD_INT 2
37481: NEG
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: LD_INT 1
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37503: LD_ADDR_VAR 0 60
37507: PUSH
37508: LD_INT 1
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37544: LD_ADDR_VAR 0 61
37548: PUSH
37549: LD_INT 2
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 2
37561: PUSH
37562: LD_INT 2
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37584: LD_ADDR_VAR 0 62
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 2
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: LD_INT 2
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PUSH
37609: LD_INT 1
37611: NEG
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: LIST
37624: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37625: LD_ADDR_VAR 0 63
37629: PUSH
37630: LD_INT 1
37632: NEG
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 2
37643: NEG
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 2
37654: NEG
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: LIST
37668: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37669: LD_ADDR_VAR 0 64
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: LD_INT 2
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 2
37688: NEG
37689: PUSH
37690: LD_INT 1
37692: NEG
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: LD_INT 2
37704: NEG
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: ST_TO_ADDR
// end ; 2 :
37715: GO 40981
37717: LD_INT 2
37719: DOUBLE
37720: EQUAL
37721: IFTRUE 37725
37723: GO 40980
37725: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37726: LD_ADDR_VAR 0 29
37730: PUSH
37731: LD_INT 4
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 4
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 5
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 5
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 4
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 3
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 3
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 3
37805: PUSH
37806: LD_INT 2
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 5
37816: PUSH
37817: LD_INT 2
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 3
37826: PUSH
37827: LD_INT 3
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 3
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 4
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 4
37856: PUSH
37857: LD_INT 4
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 3
37866: PUSH
37867: LD_INT 4
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: LD_INT 3
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 2
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 4
37896: PUSH
37897: LD_INT 2
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 2
37906: PUSH
37907: LD_INT 4
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: LD_INT 4
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 0
37926: PUSH
37927: LD_INT 3
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 1
37936: PUSH
37937: LD_INT 4
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 1
37946: PUSH
37947: LD_INT 5
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: LD_INT 5
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: LD_INT 4
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: LD_INT 3
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: LD_INT 5
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 2
37998: NEG
37999: PUSH
38000: LD_INT 3
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 3
38009: NEG
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 3
38020: NEG
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 2
38032: NEG
38033: PUSH
38034: LD_INT 0
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 3
38054: NEG
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 4
38065: NEG
38066: PUSH
38067: LD_INT 0
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 4
38076: NEG
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 4
38088: NEG
38089: PUSH
38090: LD_INT 2
38092: NEG
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 2
38100: NEG
38101: PUSH
38102: LD_INT 2
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 4
38111: NEG
38112: PUSH
38113: LD_INT 4
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 4
38123: NEG
38124: PUSH
38125: LD_INT 5
38127: NEG
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 3
38135: NEG
38136: PUSH
38137: LD_INT 4
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 3
38147: NEG
38148: PUSH
38149: LD_INT 3
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 4
38159: NEG
38160: PUSH
38161: LD_INT 3
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 5
38171: NEG
38172: PUSH
38173: LD_INT 4
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 5
38183: NEG
38184: PUSH
38185: LD_INT 5
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 3
38195: NEG
38196: PUSH
38197: LD_INT 5
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 5
38207: NEG
38208: PUSH
38209: LD_INT 3
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38264: LD_ADDR_VAR 0 30
38268: PUSH
38269: LD_INT 4
38271: PUSH
38272: LD_INT 4
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 4
38281: PUSH
38282: LD_INT 3
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 5
38291: PUSH
38292: LD_INT 4
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 5
38301: PUSH
38302: LD_INT 5
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 4
38311: PUSH
38312: LD_INT 5
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 3
38321: PUSH
38322: LD_INT 4
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 3
38331: PUSH
38332: LD_INT 3
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 5
38341: PUSH
38342: LD_INT 3
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 3
38351: PUSH
38352: LD_INT 5
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: LD_INT 3
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: LD_INT 2
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: LD_INT 3
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: LD_INT 4
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 0
38401: PUSH
38402: LD_INT 4
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: LD_INT 3
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: LD_INT 2
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: PUSH
38434: LD_INT 4
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 2
38443: NEG
38444: PUSH
38445: LD_INT 2
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 4
38454: NEG
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 4
38465: NEG
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 3
38477: NEG
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: PUSH
38486: LD_INT 3
38488: NEG
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 4
38499: NEG
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 5
38510: NEG
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 5
38521: NEG
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 5
38533: NEG
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 3
38545: NEG
38546: PUSH
38547: LD_INT 2
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 3
38556: NEG
38557: PUSH
38558: LD_INT 3
38560: NEG
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 3
38568: NEG
38569: PUSH
38570: LD_INT 4
38572: NEG
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 2
38580: NEG
38581: PUSH
38582: LD_INT 3
38584: NEG
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 3
38604: NEG
38605: PUSH
38606: LD_INT 2
38608: NEG
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 4
38616: NEG
38617: PUSH
38618: LD_INT 3
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 4
38628: NEG
38629: PUSH
38630: LD_INT 4
38632: NEG
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: NEG
38641: PUSH
38642: LD_INT 4
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 4
38652: NEG
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: LD_INT 4
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: LD_INT 5
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: LD_INT 4
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: LD_INT 3
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: LD_INT 3
38711: NEG
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: LD_INT 4
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: LD_INT 5
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: LD_INT 3
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 2
38754: NEG
38755: PUSH
38756: LD_INT 5
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38811: LD_ADDR_VAR 0 31
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: LD_INT 4
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: LD_INT 3
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 4
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 1
38848: PUSH
38849: LD_INT 5
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 0
38858: PUSH
38859: LD_INT 5
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: LD_INT 4
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: LD_INT 3
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 2
38890: PUSH
38891: LD_INT 5
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 2
38900: NEG
38901: PUSH
38902: LD_INT 3
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 3
38911: NEG
38912: PUSH
38913: LD_INT 0
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 3
38922: NEG
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 2
38934: NEG
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: LD_INT 1
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 3
38956: NEG
38957: PUSH
38958: LD_INT 1
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 4
38967: NEG
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 4
38978: NEG
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 4
38990: NEG
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 4
39013: NEG
39014: PUSH
39015: LD_INT 4
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 4
39025: NEG
39026: PUSH
39027: LD_INT 5
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 3
39037: NEG
39038: PUSH
39039: LD_INT 4
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 3
39049: NEG
39050: PUSH
39051: LD_INT 3
39053: NEG
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 4
39061: NEG
39062: PUSH
39063: LD_INT 3
39065: NEG
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 5
39073: NEG
39074: PUSH
39075: LD_INT 4
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 5
39085: NEG
39086: PUSH
39087: LD_INT 5
39089: NEG
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 3
39097: NEG
39098: PUSH
39099: LD_INT 5
39101: NEG
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 5
39109: NEG
39110: PUSH
39111: LD_INT 3
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 0
39121: PUSH
39122: LD_INT 3
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: LD_INT 4
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 1
39143: PUSH
39144: LD_INT 3
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 2
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: LD_INT 2
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: NEG
39177: PUSH
39178: LD_INT 3
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: LD_INT 4
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 2
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 2
39211: NEG
39212: PUSH
39213: LD_INT 4
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 4
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 4
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 5
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 5
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 4
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 3
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 3
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 3
39295: PUSH
39296: LD_INT 2
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 5
39306: PUSH
39307: LD_INT 2
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39361: LD_ADDR_VAR 0 32
39365: PUSH
39366: LD_INT 4
39368: NEG
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 4
39379: NEG
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 3
39391: NEG
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 3
39402: NEG
39403: PUSH
39404: LD_INT 1
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 4
39413: NEG
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 5
39424: NEG
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 5
39435: NEG
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 5
39447: NEG
39448: PUSH
39449: LD_INT 2
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 3
39459: NEG
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: NEG
39471: PUSH
39472: LD_INT 3
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 3
39482: NEG
39483: PUSH
39484: LD_INT 4
39486: NEG
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 2
39494: NEG
39495: PUSH
39496: LD_INT 3
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 2
39506: NEG
39507: PUSH
39508: LD_INT 2
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 3
39518: NEG
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 4
39530: NEG
39531: PUSH
39532: LD_INT 3
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 4
39542: NEG
39543: PUSH
39544: LD_INT 4
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: LD_INT 4
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 4
39566: NEG
39567: PUSH
39568: LD_INT 2
39570: NEG
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: LD_INT 4
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: LD_INT 5
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: LD_INT 4
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 1
39611: PUSH
39612: LD_INT 3
39614: NEG
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 3
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: LD_INT 4
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: LD_INT 5
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: PUSH
39658: LD_INT 3
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 2
39668: NEG
39669: PUSH
39670: LD_INT 5
39672: NEG
39673: PUSH
39674: EMPTY
39675: LIST
39676: LIST
39677: PUSH
39678: LD_INT 3
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 3
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 4
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 4
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: LD_INT 0
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 2
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 2
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 4
39763: PUSH
39764: LD_INT 2
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 4
39773: PUSH
39774: LD_INT 4
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 4
39783: PUSH
39784: LD_INT 3
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 5
39793: PUSH
39794: LD_INT 4
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 5
39803: PUSH
39804: LD_INT 5
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 4
39813: PUSH
39814: LD_INT 5
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 3
39823: PUSH
39824: LD_INT 4
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 3
39833: PUSH
39834: LD_INT 3
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 5
39843: PUSH
39844: LD_INT 3
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 3
39853: PUSH
39854: LD_INT 5
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39908: LD_ADDR_VAR 0 33
39912: PUSH
39913: LD_INT 4
39915: NEG
39916: PUSH
39917: LD_INT 4
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 4
39927: NEG
39928: PUSH
39929: LD_INT 5
39931: NEG
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 3
39939: NEG
39940: PUSH
39941: LD_INT 4
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 3
39951: NEG
39952: PUSH
39953: LD_INT 3
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 4
39963: NEG
39964: PUSH
39965: LD_INT 3
39967: NEG
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 5
39975: NEG
39976: PUSH
39977: LD_INT 4
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 5
39987: NEG
39988: PUSH
39989: LD_INT 5
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 3
39999: NEG
40000: PUSH
40001: LD_INT 5
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 5
40011: NEG
40012: PUSH
40013: LD_INT 3
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: LD_INT 3
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 4
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: LD_INT 3
40048: NEG
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: LD_INT 2
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 2
40070: NEG
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: LD_INT 3
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: LD_INT 4
40094: NEG
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 2
40102: PUSH
40103: LD_INT 2
40105: NEG
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 2
40113: NEG
40114: PUSH
40115: LD_INT 4
40117: NEG
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 4
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: PUSH
40133: LD_INT 4
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 5
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 5
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 4
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 3
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 3
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 3
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 5
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 3
40218: PUSH
40219: LD_INT 3
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: LD_INT 2
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 4
40238: PUSH
40239: LD_INT 3
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 4
40248: PUSH
40249: LD_INT 4
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 3
40258: PUSH
40259: LD_INT 4
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: LD_INT 3
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: LD_INT 2
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 4
40288: PUSH
40289: LD_INT 2
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: LD_INT 4
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: LD_INT 4
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: LD_INT 3
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: LD_INT 4
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 5
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 5
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 4
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 1
40369: NEG
40370: PUSH
40371: LD_INT 3
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: LD_INT 5
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 2
40390: NEG
40391: PUSH
40392: LD_INT 3
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40446: LD_ADDR_VAR 0 34
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 4
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: LD_INT 5
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: LD_INT 4
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: LD_INT 3
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 3
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 4
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 5
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 3
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 2
40543: NEG
40544: PUSH
40545: LD_INT 5
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 3
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 3
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 4
40576: PUSH
40577: LD_INT 0
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 4
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 3
40596: PUSH
40597: LD_INT 1
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 2
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: LD_INT 2
40630: NEG
40631: PUSH
40632: EMPTY
40633: LIST
40634: LIST
40635: PUSH
40636: LD_INT 4
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 4
40648: PUSH
40649: LD_INT 4
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 4
40658: PUSH
40659: LD_INT 3
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 5
40668: PUSH
40669: LD_INT 4
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 5
40678: PUSH
40679: LD_INT 5
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 4
40688: PUSH
40689: LD_INT 5
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 3
40698: PUSH
40699: LD_INT 4
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 3
40708: PUSH
40709: LD_INT 3
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 5
40718: PUSH
40719: LD_INT 3
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 3
40728: PUSH
40729: LD_INT 5
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: LD_INT 3
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: LD_INT 2
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: LD_INT 3
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: LD_INT 4
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: LD_INT 4
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: LD_INT 3
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: LD_INT 2
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: LD_INT 4
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 4
40831: NEG
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 4
40842: NEG
40843: PUSH
40844: LD_INT 1
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 3
40854: NEG
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 3
40865: NEG
40866: PUSH
40867: LD_INT 1
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 4
40876: NEG
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 5
40887: NEG
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 5
40898: NEG
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 5
40910: NEG
40911: PUSH
40912: LD_INT 2
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 3
40922: NEG
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: ST_TO_ADDR
// end ; end ;
40978: GO 40981
40980: POP
// case btype of b_depot , b_warehouse :
40981: LD_VAR 0 1
40985: PUSH
40986: LD_INT 0
40988: DOUBLE
40989: EQUAL
40990: IFTRUE 41000
40992: LD_INT 1
40994: DOUBLE
40995: EQUAL
40996: IFTRUE 41000
40998: GO 41201
41000: POP
// case nation of nation_american :
41001: LD_VAR 0 5
41005: PUSH
41006: LD_INT 1
41008: DOUBLE
41009: EQUAL
41010: IFTRUE 41014
41012: GO 41070
41014: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41015: LD_ADDR_VAR 0 9
41019: PUSH
41020: LD_VAR 0 11
41024: PUSH
41025: LD_VAR 0 12
41029: PUSH
41030: LD_VAR 0 13
41034: PUSH
41035: LD_VAR 0 14
41039: PUSH
41040: LD_VAR 0 15
41044: PUSH
41045: LD_VAR 0 16
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: PUSH
41058: LD_VAR 0 4
41062: PUSH
41063: LD_INT 1
41065: PLUS
41066: ARRAY
41067: ST_TO_ADDR
41068: GO 41199
41070: LD_INT 2
41072: DOUBLE
41073: EQUAL
41074: IFTRUE 41078
41076: GO 41134
41078: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41079: LD_ADDR_VAR 0 9
41083: PUSH
41084: LD_VAR 0 17
41088: PUSH
41089: LD_VAR 0 18
41093: PUSH
41094: LD_VAR 0 19
41098: PUSH
41099: LD_VAR 0 20
41103: PUSH
41104: LD_VAR 0 21
41108: PUSH
41109: LD_VAR 0 22
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: PUSH
41122: LD_VAR 0 4
41126: PUSH
41127: LD_INT 1
41129: PLUS
41130: ARRAY
41131: ST_TO_ADDR
41132: GO 41199
41134: LD_INT 3
41136: DOUBLE
41137: EQUAL
41138: IFTRUE 41142
41140: GO 41198
41142: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41143: LD_ADDR_VAR 0 9
41147: PUSH
41148: LD_VAR 0 23
41152: PUSH
41153: LD_VAR 0 24
41157: PUSH
41158: LD_VAR 0 25
41162: PUSH
41163: LD_VAR 0 26
41167: PUSH
41168: LD_VAR 0 27
41172: PUSH
41173: LD_VAR 0 28
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: PUSH
41186: LD_VAR 0 4
41190: PUSH
41191: LD_INT 1
41193: PLUS
41194: ARRAY
41195: ST_TO_ADDR
41196: GO 41199
41198: POP
41199: GO 41754
41201: LD_INT 2
41203: DOUBLE
41204: EQUAL
41205: IFTRUE 41215
41207: LD_INT 3
41209: DOUBLE
41210: EQUAL
41211: IFTRUE 41215
41213: GO 41271
41215: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41216: LD_ADDR_VAR 0 9
41220: PUSH
41221: LD_VAR 0 29
41225: PUSH
41226: LD_VAR 0 30
41230: PUSH
41231: LD_VAR 0 31
41235: PUSH
41236: LD_VAR 0 32
41240: PUSH
41241: LD_VAR 0 33
41245: PUSH
41246: LD_VAR 0 34
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: PUSH
41259: LD_VAR 0 4
41263: PUSH
41264: LD_INT 1
41266: PLUS
41267: ARRAY
41268: ST_TO_ADDR
41269: GO 41754
41271: LD_INT 16
41273: DOUBLE
41274: EQUAL
41275: IFTRUE 41333
41277: LD_INT 17
41279: DOUBLE
41280: EQUAL
41281: IFTRUE 41333
41283: LD_INT 18
41285: DOUBLE
41286: EQUAL
41287: IFTRUE 41333
41289: LD_INT 19
41291: DOUBLE
41292: EQUAL
41293: IFTRUE 41333
41295: LD_INT 22
41297: DOUBLE
41298: EQUAL
41299: IFTRUE 41333
41301: LD_INT 20
41303: DOUBLE
41304: EQUAL
41305: IFTRUE 41333
41307: LD_INT 21
41309: DOUBLE
41310: EQUAL
41311: IFTRUE 41333
41313: LD_INT 23
41315: DOUBLE
41316: EQUAL
41317: IFTRUE 41333
41319: LD_INT 24
41321: DOUBLE
41322: EQUAL
41323: IFTRUE 41333
41325: LD_INT 25
41327: DOUBLE
41328: EQUAL
41329: IFTRUE 41333
41331: GO 41389
41333: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41334: LD_ADDR_VAR 0 9
41338: PUSH
41339: LD_VAR 0 35
41343: PUSH
41344: LD_VAR 0 36
41348: PUSH
41349: LD_VAR 0 37
41353: PUSH
41354: LD_VAR 0 38
41358: PUSH
41359: LD_VAR 0 39
41363: PUSH
41364: LD_VAR 0 40
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: PUSH
41377: LD_VAR 0 4
41381: PUSH
41382: LD_INT 1
41384: PLUS
41385: ARRAY
41386: ST_TO_ADDR
41387: GO 41754
41389: LD_INT 6
41391: DOUBLE
41392: EQUAL
41393: IFTRUE 41445
41395: LD_INT 7
41397: DOUBLE
41398: EQUAL
41399: IFTRUE 41445
41401: LD_INT 8
41403: DOUBLE
41404: EQUAL
41405: IFTRUE 41445
41407: LD_INT 13
41409: DOUBLE
41410: EQUAL
41411: IFTRUE 41445
41413: LD_INT 12
41415: DOUBLE
41416: EQUAL
41417: IFTRUE 41445
41419: LD_INT 15
41421: DOUBLE
41422: EQUAL
41423: IFTRUE 41445
41425: LD_INT 11
41427: DOUBLE
41428: EQUAL
41429: IFTRUE 41445
41431: LD_INT 14
41433: DOUBLE
41434: EQUAL
41435: IFTRUE 41445
41437: LD_INT 10
41439: DOUBLE
41440: EQUAL
41441: IFTRUE 41445
41443: GO 41501
41445: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41446: LD_ADDR_VAR 0 9
41450: PUSH
41451: LD_VAR 0 41
41455: PUSH
41456: LD_VAR 0 42
41460: PUSH
41461: LD_VAR 0 43
41465: PUSH
41466: LD_VAR 0 44
41470: PUSH
41471: LD_VAR 0 45
41475: PUSH
41476: LD_VAR 0 46
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: PUSH
41489: LD_VAR 0 4
41493: PUSH
41494: LD_INT 1
41496: PLUS
41497: ARRAY
41498: ST_TO_ADDR
41499: GO 41754
41501: LD_INT 36
41503: DOUBLE
41504: EQUAL
41505: IFTRUE 41509
41507: GO 41565
41509: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41510: LD_ADDR_VAR 0 9
41514: PUSH
41515: LD_VAR 0 47
41519: PUSH
41520: LD_VAR 0 48
41524: PUSH
41525: LD_VAR 0 49
41529: PUSH
41530: LD_VAR 0 50
41534: PUSH
41535: LD_VAR 0 51
41539: PUSH
41540: LD_VAR 0 52
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: PUSH
41553: LD_VAR 0 4
41557: PUSH
41558: LD_INT 1
41560: PLUS
41561: ARRAY
41562: ST_TO_ADDR
41563: GO 41754
41565: LD_INT 4
41567: DOUBLE
41568: EQUAL
41569: IFTRUE 41591
41571: LD_INT 5
41573: DOUBLE
41574: EQUAL
41575: IFTRUE 41591
41577: LD_INT 34
41579: DOUBLE
41580: EQUAL
41581: IFTRUE 41591
41583: LD_INT 37
41585: DOUBLE
41586: EQUAL
41587: IFTRUE 41591
41589: GO 41647
41591: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41592: LD_ADDR_VAR 0 9
41596: PUSH
41597: LD_VAR 0 53
41601: PUSH
41602: LD_VAR 0 54
41606: PUSH
41607: LD_VAR 0 55
41611: PUSH
41612: LD_VAR 0 56
41616: PUSH
41617: LD_VAR 0 57
41621: PUSH
41622: LD_VAR 0 58
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: PUSH
41635: LD_VAR 0 4
41639: PUSH
41640: LD_INT 1
41642: PLUS
41643: ARRAY
41644: ST_TO_ADDR
41645: GO 41754
41647: LD_INT 31
41649: DOUBLE
41650: EQUAL
41651: IFTRUE 41697
41653: LD_INT 32
41655: DOUBLE
41656: EQUAL
41657: IFTRUE 41697
41659: LD_INT 33
41661: DOUBLE
41662: EQUAL
41663: IFTRUE 41697
41665: LD_INT 27
41667: DOUBLE
41668: EQUAL
41669: IFTRUE 41697
41671: LD_INT 26
41673: DOUBLE
41674: EQUAL
41675: IFTRUE 41697
41677: LD_INT 28
41679: DOUBLE
41680: EQUAL
41681: IFTRUE 41697
41683: LD_INT 29
41685: DOUBLE
41686: EQUAL
41687: IFTRUE 41697
41689: LD_INT 30
41691: DOUBLE
41692: EQUAL
41693: IFTRUE 41697
41695: GO 41753
41697: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41698: LD_ADDR_VAR 0 9
41702: PUSH
41703: LD_VAR 0 59
41707: PUSH
41708: LD_VAR 0 60
41712: PUSH
41713: LD_VAR 0 61
41717: PUSH
41718: LD_VAR 0 62
41722: PUSH
41723: LD_VAR 0 63
41727: PUSH
41728: LD_VAR 0 64
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: PUSH
41741: LD_VAR 0 4
41745: PUSH
41746: LD_INT 1
41748: PLUS
41749: ARRAY
41750: ST_TO_ADDR
41751: GO 41754
41753: POP
// temp_list2 = [ ] ;
41754: LD_ADDR_VAR 0 10
41758: PUSH
41759: EMPTY
41760: ST_TO_ADDR
// for i in temp_list do
41761: LD_ADDR_VAR 0 8
41765: PUSH
41766: LD_VAR 0 9
41770: PUSH
41771: FOR_IN
41772: IFFALSE 41824
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41774: LD_ADDR_VAR 0 10
41778: PUSH
41779: LD_VAR 0 10
41783: PUSH
41784: LD_VAR 0 8
41788: PUSH
41789: LD_INT 1
41791: ARRAY
41792: PUSH
41793: LD_VAR 0 2
41797: PLUS
41798: PUSH
41799: LD_VAR 0 8
41803: PUSH
41804: LD_INT 2
41806: ARRAY
41807: PUSH
41808: LD_VAR 0 3
41812: PLUS
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: EMPTY
41819: LIST
41820: ADD
41821: ST_TO_ADDR
41822: GO 41771
41824: POP
41825: POP
// result = temp_list2 ;
41826: LD_ADDR_VAR 0 7
41830: PUSH
41831: LD_VAR 0 10
41835: ST_TO_ADDR
// end ;
41836: LD_VAR 0 7
41840: RET
// export function EnemyInRange ( unit , dist ) ; begin
41841: LD_INT 0
41843: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41844: LD_ADDR_VAR 0 3
41848: PUSH
41849: LD_VAR 0 1
41853: PPUSH
41854: CALL_OW 255
41858: PPUSH
41859: LD_VAR 0 1
41863: PPUSH
41864: CALL_OW 250
41868: PPUSH
41869: LD_VAR 0 1
41873: PPUSH
41874: CALL_OW 251
41878: PPUSH
41879: LD_VAR 0 2
41883: PPUSH
41884: CALL 15237 0 4
41888: PUSH
41889: LD_INT 4
41891: ARRAY
41892: ST_TO_ADDR
// end ;
41893: LD_VAR 0 3
41897: RET
// export function PlayerSeeMe ( unit ) ; begin
41898: LD_INT 0
41900: PPUSH
// result := See ( your_side , unit ) ;
41901: LD_ADDR_VAR 0 2
41905: PUSH
41906: LD_OWVAR 2
41910: PPUSH
41911: LD_VAR 0 1
41915: PPUSH
41916: CALL_OW 292
41920: ST_TO_ADDR
// end ;
41921: LD_VAR 0 2
41925: RET
// export function ReverseDir ( unit ) ; begin
41926: LD_INT 0
41928: PPUSH
// if not unit then
41929: LD_VAR 0 1
41933: NOT
41934: IFFALSE 41938
// exit ;
41936: GO 41961
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41938: LD_ADDR_VAR 0 2
41942: PUSH
41943: LD_VAR 0 1
41947: PPUSH
41948: CALL_OW 254
41952: PUSH
41953: LD_INT 3
41955: PLUS
41956: PUSH
41957: LD_INT 6
41959: MOD
41960: ST_TO_ADDR
// end ;
41961: LD_VAR 0 2
41965: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
41966: LD_INT 0
41968: PPUSH
41969: PPUSH
41970: PPUSH
41971: PPUSH
41972: PPUSH
// if not hexes then
41973: LD_VAR 0 2
41977: NOT
41978: IFFALSE 41982
// exit ;
41980: GO 42130
// dist := 9999 ;
41982: LD_ADDR_VAR 0 5
41986: PUSH
41987: LD_INT 9999
41989: ST_TO_ADDR
// for i = 1 to hexes do
41990: LD_ADDR_VAR 0 4
41994: PUSH
41995: DOUBLE
41996: LD_INT 1
41998: DEC
41999: ST_TO_ADDR
42000: LD_VAR 0 2
42004: PUSH
42005: FOR_TO
42006: IFFALSE 42118
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
42008: LD_VAR 0 1
42012: PPUSH
42013: LD_VAR 0 2
42017: PUSH
42018: LD_VAR 0 4
42022: ARRAY
42023: PUSH
42024: LD_INT 1
42026: ARRAY
42027: PPUSH
42028: LD_VAR 0 2
42032: PUSH
42033: LD_VAR 0 4
42037: ARRAY
42038: PUSH
42039: LD_INT 2
42041: ARRAY
42042: PPUSH
42043: CALL_OW 297
42047: PUSH
42048: LD_VAR 0 5
42052: LESS
42053: IFFALSE 42116
// begin hex := hexes [ i ] ;
42055: LD_ADDR_VAR 0 7
42059: PUSH
42060: LD_VAR 0 2
42064: PUSH
42065: LD_VAR 0 4
42069: ARRAY
42070: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42071: LD_ADDR_VAR 0 5
42075: PUSH
42076: LD_VAR 0 1
42080: PPUSH
42081: LD_VAR 0 2
42085: PUSH
42086: LD_VAR 0 4
42090: ARRAY
42091: PUSH
42092: LD_INT 1
42094: ARRAY
42095: PPUSH
42096: LD_VAR 0 2
42100: PUSH
42101: LD_VAR 0 4
42105: ARRAY
42106: PUSH
42107: LD_INT 2
42109: ARRAY
42110: PPUSH
42111: CALL_OW 297
42115: ST_TO_ADDR
// end ; end ;
42116: GO 42005
42118: POP
42119: POP
// result := hex ;
42120: LD_ADDR_VAR 0 3
42124: PUSH
42125: LD_VAR 0 7
42129: ST_TO_ADDR
// end ;
42130: LD_VAR 0 3
42134: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42135: LD_INT 0
42137: PPUSH
42138: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42139: LD_VAR 0 1
42143: NOT
42144: PUSH
42145: LD_VAR 0 1
42149: PUSH
42150: LD_INT 21
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 23
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PPUSH
42174: CALL_OW 69
42178: IN
42179: NOT
42180: OR
42181: IFFALSE 42185
// exit ;
42183: GO 42232
// for i = 1 to 3 do
42185: LD_ADDR_VAR 0 3
42189: PUSH
42190: DOUBLE
42191: LD_INT 1
42193: DEC
42194: ST_TO_ADDR
42195: LD_INT 3
42197: PUSH
42198: FOR_TO
42199: IFFALSE 42230
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42201: LD_VAR 0 1
42205: PPUSH
42206: CALL_OW 250
42210: PPUSH
42211: LD_VAR 0 1
42215: PPUSH
42216: CALL_OW 251
42220: PPUSH
42221: LD_INT 1
42223: PPUSH
42224: CALL_OW 453
42228: GO 42198
42230: POP
42231: POP
// end ;
42232: LD_VAR 0 2
42236: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42237: LD_INT 0
42239: PPUSH
42240: PPUSH
42241: PPUSH
42242: PPUSH
42243: PPUSH
42244: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
42245: LD_VAR 0 1
42249: NOT
42250: PUSH
42251: LD_VAR 0 2
42255: NOT
42256: OR
42257: PUSH
42258: LD_VAR 0 1
42262: PPUSH
42263: CALL_OW 314
42267: OR
42268: IFFALSE 42272
// exit ;
42270: GO 42713
// x := GetX ( enemy_unit ) ;
42272: LD_ADDR_VAR 0 7
42276: PUSH
42277: LD_VAR 0 2
42281: PPUSH
42282: CALL_OW 250
42286: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42287: LD_ADDR_VAR 0 8
42291: PUSH
42292: LD_VAR 0 2
42296: PPUSH
42297: CALL_OW 251
42301: ST_TO_ADDR
// if not x or not y then
42302: LD_VAR 0 7
42306: NOT
42307: PUSH
42308: LD_VAR 0 8
42312: NOT
42313: OR
42314: IFFALSE 42318
// exit ;
42316: GO 42713
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42318: LD_ADDR_VAR 0 6
42322: PUSH
42323: LD_VAR 0 7
42327: PPUSH
42328: LD_INT 0
42330: PPUSH
42331: LD_INT 4
42333: PPUSH
42334: CALL_OW 272
42338: PUSH
42339: LD_VAR 0 8
42343: PPUSH
42344: LD_INT 0
42346: PPUSH
42347: LD_INT 4
42349: PPUSH
42350: CALL_OW 273
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_VAR 0 7
42363: PPUSH
42364: LD_INT 1
42366: PPUSH
42367: LD_INT 4
42369: PPUSH
42370: CALL_OW 272
42374: PUSH
42375: LD_VAR 0 8
42379: PPUSH
42380: LD_INT 1
42382: PPUSH
42383: LD_INT 4
42385: PPUSH
42386: CALL_OW 273
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_VAR 0 7
42399: PPUSH
42400: LD_INT 2
42402: PPUSH
42403: LD_INT 4
42405: PPUSH
42406: CALL_OW 272
42410: PUSH
42411: LD_VAR 0 8
42415: PPUSH
42416: LD_INT 2
42418: PPUSH
42419: LD_INT 4
42421: PPUSH
42422: CALL_OW 273
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_VAR 0 7
42435: PPUSH
42436: LD_INT 3
42438: PPUSH
42439: LD_INT 4
42441: PPUSH
42442: CALL_OW 272
42446: PUSH
42447: LD_VAR 0 8
42451: PPUSH
42452: LD_INT 3
42454: PPUSH
42455: LD_INT 4
42457: PPUSH
42458: CALL_OW 273
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_VAR 0 7
42471: PPUSH
42472: LD_INT 4
42474: PPUSH
42475: LD_INT 4
42477: PPUSH
42478: CALL_OW 272
42482: PUSH
42483: LD_VAR 0 8
42487: PPUSH
42488: LD_INT 4
42490: PPUSH
42491: LD_INT 4
42493: PPUSH
42494: CALL_OW 273
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_VAR 0 7
42507: PPUSH
42508: LD_INT 5
42510: PPUSH
42511: LD_INT 4
42513: PPUSH
42514: CALL_OW 272
42518: PUSH
42519: LD_VAR 0 8
42523: PPUSH
42524: LD_INT 5
42526: PPUSH
42527: LD_INT 4
42529: PPUSH
42530: CALL_OW 273
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: ST_TO_ADDR
// for i = tmp downto 1 do
42547: LD_ADDR_VAR 0 4
42551: PUSH
42552: DOUBLE
42553: LD_VAR 0 6
42557: INC
42558: ST_TO_ADDR
42559: LD_INT 1
42561: PUSH
42562: FOR_DOWNTO
42563: IFFALSE 42664
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42565: LD_VAR 0 6
42569: PUSH
42570: LD_VAR 0 4
42574: ARRAY
42575: PUSH
42576: LD_INT 1
42578: ARRAY
42579: PPUSH
42580: LD_VAR 0 6
42584: PUSH
42585: LD_VAR 0 4
42589: ARRAY
42590: PUSH
42591: LD_INT 2
42593: ARRAY
42594: PPUSH
42595: CALL_OW 488
42599: NOT
42600: PUSH
42601: LD_VAR 0 6
42605: PUSH
42606: LD_VAR 0 4
42610: ARRAY
42611: PUSH
42612: LD_INT 1
42614: ARRAY
42615: PPUSH
42616: LD_VAR 0 6
42620: PUSH
42621: LD_VAR 0 4
42625: ARRAY
42626: PUSH
42627: LD_INT 2
42629: ARRAY
42630: PPUSH
42631: CALL_OW 428
42635: PUSH
42636: LD_INT 0
42638: NONEQUAL
42639: OR
42640: IFFALSE 42662
// tmp := Delete ( tmp , i ) ;
42642: LD_ADDR_VAR 0 6
42646: PUSH
42647: LD_VAR 0 6
42651: PPUSH
42652: LD_VAR 0 4
42656: PPUSH
42657: CALL_OW 3
42661: ST_TO_ADDR
42662: GO 42562
42664: POP
42665: POP
// j := GetClosestHex ( unit , tmp ) ;
42666: LD_ADDR_VAR 0 5
42670: PUSH
42671: LD_VAR 0 1
42675: PPUSH
42676: LD_VAR 0 6
42680: PPUSH
42681: CALL 41966 0 2
42685: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42686: LD_VAR 0 1
42690: PPUSH
42691: LD_VAR 0 5
42695: PUSH
42696: LD_INT 1
42698: ARRAY
42699: PPUSH
42700: LD_VAR 0 5
42704: PUSH
42705: LD_INT 2
42707: ARRAY
42708: PPUSH
42709: CALL_OW 111
// end ;
42713: LD_VAR 0 3
42717: RET
// export function PrepareApemanSoldier ( ) ; begin
42718: LD_INT 0
42720: PPUSH
// uc_nation := 0 ;
42721: LD_ADDR_OWVAR 21
42725: PUSH
42726: LD_INT 0
42728: ST_TO_ADDR
// hc_sex := sex_male ;
42729: LD_ADDR_OWVAR 27
42733: PUSH
42734: LD_INT 1
42736: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42737: LD_ADDR_OWVAR 28
42741: PUSH
42742: LD_INT 15
42744: ST_TO_ADDR
// hc_gallery :=  ;
42745: LD_ADDR_OWVAR 33
42749: PUSH
42750: LD_STRING 
42752: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42753: LD_ADDR_OWVAR 31
42757: PUSH
42758: LD_INT 0
42760: PPUSH
42761: LD_INT 3
42763: PPUSH
42764: CALL_OW 12
42768: PUSH
42769: LD_INT 0
42771: PPUSH
42772: LD_INT 3
42774: PPUSH
42775: CALL_OW 12
42779: PUSH
42780: LD_INT 0
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: ST_TO_ADDR
// end ;
42792: LD_VAR 0 1
42796: RET
// export function PrepareApemanEngineer ( ) ; begin
42797: LD_INT 0
42799: PPUSH
// uc_nation := 0 ;
42800: LD_ADDR_OWVAR 21
42804: PUSH
42805: LD_INT 0
42807: ST_TO_ADDR
// hc_sex := sex_male ;
42808: LD_ADDR_OWVAR 27
42812: PUSH
42813: LD_INT 1
42815: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42816: LD_ADDR_OWVAR 28
42820: PUSH
42821: LD_INT 16
42823: ST_TO_ADDR
// hc_gallery :=  ;
42824: LD_ADDR_OWVAR 33
42828: PUSH
42829: LD_STRING 
42831: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42832: LD_ADDR_OWVAR 31
42836: PUSH
42837: LD_INT 0
42839: PPUSH
42840: LD_INT 3
42842: PPUSH
42843: CALL_OW 12
42847: PUSH
42848: LD_INT 0
42850: PPUSH
42851: LD_INT 3
42853: PPUSH
42854: CALL_OW 12
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: ST_TO_ADDR
// end ;
42871: LD_VAR 0 1
42875: RET
// export function PrepareApeman ( agressivity ) ; begin
42876: LD_INT 0
42878: PPUSH
// uc_side := 0 ;
42879: LD_ADDR_OWVAR 20
42883: PUSH
42884: LD_INT 0
42886: ST_TO_ADDR
// uc_nation := 0 ;
42887: LD_ADDR_OWVAR 21
42891: PUSH
42892: LD_INT 0
42894: ST_TO_ADDR
// hc_sex := sex_male ;
42895: LD_ADDR_OWVAR 27
42899: PUSH
42900: LD_INT 1
42902: ST_TO_ADDR
// hc_class := class_apeman ;
42903: LD_ADDR_OWVAR 28
42907: PUSH
42908: LD_INT 12
42910: ST_TO_ADDR
// hc_gallery :=  ;
42911: LD_ADDR_OWVAR 33
42915: PUSH
42916: LD_STRING 
42918: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42919: LD_ADDR_OWVAR 35
42923: PUSH
42924: LD_VAR 0 1
42928: NEG
42929: PPUSH
42930: LD_VAR 0 1
42934: PPUSH
42935: CALL_OW 12
42939: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42940: LD_ADDR_OWVAR 31
42944: PUSH
42945: LD_INT 0
42947: PPUSH
42948: LD_INT 3
42950: PPUSH
42951: CALL_OW 12
42955: PUSH
42956: LD_INT 0
42958: PPUSH
42959: LD_INT 3
42961: PPUSH
42962: CALL_OW 12
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: ST_TO_ADDR
// end ;
42979: LD_VAR 0 2
42983: RET
// export function PrepareTiger ( agressivity ) ; begin
42984: LD_INT 0
42986: PPUSH
// uc_side := 0 ;
42987: LD_ADDR_OWVAR 20
42991: PUSH
42992: LD_INT 0
42994: ST_TO_ADDR
// uc_nation := 0 ;
42995: LD_ADDR_OWVAR 21
42999: PUSH
43000: LD_INT 0
43002: ST_TO_ADDR
// hc_class := class_tiger ;
43003: LD_ADDR_OWVAR 28
43007: PUSH
43008: LD_INT 14
43010: ST_TO_ADDR
// hc_gallery :=  ;
43011: LD_ADDR_OWVAR 33
43015: PUSH
43016: LD_STRING 
43018: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43019: LD_ADDR_OWVAR 35
43023: PUSH
43024: LD_VAR 0 1
43028: NEG
43029: PPUSH
43030: LD_VAR 0 1
43034: PPUSH
43035: CALL_OW 12
43039: ST_TO_ADDR
// end ;
43040: LD_VAR 0 2
43044: RET
// export function PrepareEnchidna ( ) ; begin
43045: LD_INT 0
43047: PPUSH
// uc_side := 0 ;
43048: LD_ADDR_OWVAR 20
43052: PUSH
43053: LD_INT 0
43055: ST_TO_ADDR
// uc_nation := 0 ;
43056: LD_ADDR_OWVAR 21
43060: PUSH
43061: LD_INT 0
43063: ST_TO_ADDR
// hc_class := class_baggie ;
43064: LD_ADDR_OWVAR 28
43068: PUSH
43069: LD_INT 13
43071: ST_TO_ADDR
// hc_gallery :=  ;
43072: LD_ADDR_OWVAR 33
43076: PUSH
43077: LD_STRING 
43079: ST_TO_ADDR
// end ;
43080: LD_VAR 0 1
43084: RET
// export function PrepareFrog ( ) ; begin
43085: LD_INT 0
43087: PPUSH
// uc_side := 0 ;
43088: LD_ADDR_OWVAR 20
43092: PUSH
43093: LD_INT 0
43095: ST_TO_ADDR
// uc_nation := 0 ;
43096: LD_ADDR_OWVAR 21
43100: PUSH
43101: LD_INT 0
43103: ST_TO_ADDR
// hc_class := class_frog ;
43104: LD_ADDR_OWVAR 28
43108: PUSH
43109: LD_INT 19
43111: ST_TO_ADDR
// hc_gallery :=  ;
43112: LD_ADDR_OWVAR 33
43116: PUSH
43117: LD_STRING 
43119: ST_TO_ADDR
// end ;
43120: LD_VAR 0 1
43124: RET
// export function PrepareFish ( ) ; begin
43125: LD_INT 0
43127: PPUSH
// uc_side := 0 ;
43128: LD_ADDR_OWVAR 20
43132: PUSH
43133: LD_INT 0
43135: ST_TO_ADDR
// uc_nation := 0 ;
43136: LD_ADDR_OWVAR 21
43140: PUSH
43141: LD_INT 0
43143: ST_TO_ADDR
// hc_class := class_fish ;
43144: LD_ADDR_OWVAR 28
43148: PUSH
43149: LD_INT 20
43151: ST_TO_ADDR
// hc_gallery :=  ;
43152: LD_ADDR_OWVAR 33
43156: PUSH
43157: LD_STRING 
43159: ST_TO_ADDR
// end ;
43160: LD_VAR 0 1
43164: RET
// export function PrepareBird ( ) ; begin
43165: LD_INT 0
43167: PPUSH
// uc_side := 0 ;
43168: LD_ADDR_OWVAR 20
43172: PUSH
43173: LD_INT 0
43175: ST_TO_ADDR
// uc_nation := 0 ;
43176: LD_ADDR_OWVAR 21
43180: PUSH
43181: LD_INT 0
43183: ST_TO_ADDR
// hc_class := class_phororhacos ;
43184: LD_ADDR_OWVAR 28
43188: PUSH
43189: LD_INT 18
43191: ST_TO_ADDR
// hc_gallery :=  ;
43192: LD_ADDR_OWVAR 33
43196: PUSH
43197: LD_STRING 
43199: ST_TO_ADDR
// end ;
43200: LD_VAR 0 1
43204: RET
// export function PrepareHorse ( ) ; begin
43205: LD_INT 0
43207: PPUSH
// uc_side := 0 ;
43208: LD_ADDR_OWVAR 20
43212: PUSH
43213: LD_INT 0
43215: ST_TO_ADDR
// uc_nation := 0 ;
43216: LD_ADDR_OWVAR 21
43220: PUSH
43221: LD_INT 0
43223: ST_TO_ADDR
// hc_class := 21 ;
43224: LD_ADDR_OWVAR 28
43228: PUSH
43229: LD_INT 21
43231: ST_TO_ADDR
// hc_gallery :=  ;
43232: LD_ADDR_OWVAR 33
43236: PUSH
43237: LD_STRING 
43239: ST_TO_ADDR
// end ;
43240: LD_VAR 0 1
43244: RET
// export function PrepareMastodont ( ) ; begin
43245: LD_INT 0
43247: PPUSH
// uc_side := 0 ;
43248: LD_ADDR_OWVAR 20
43252: PUSH
43253: LD_INT 0
43255: ST_TO_ADDR
// uc_nation := 0 ;
43256: LD_ADDR_OWVAR 21
43260: PUSH
43261: LD_INT 0
43263: ST_TO_ADDR
// vc_chassis := 31 ;
43264: LD_ADDR_OWVAR 37
43268: PUSH
43269: LD_INT 31
43271: ST_TO_ADDR
// vc_control := control_rider ;
43272: LD_ADDR_OWVAR 38
43276: PUSH
43277: LD_INT 4
43279: ST_TO_ADDR
// end ;
43280: LD_VAR 0 1
43284: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43285: LD_INT 0
43287: PPUSH
43288: PPUSH
43289: PPUSH
// uc_side = 0 ;
43290: LD_ADDR_OWVAR 20
43294: PUSH
43295: LD_INT 0
43297: ST_TO_ADDR
// uc_nation = 0 ;
43298: LD_ADDR_OWVAR 21
43302: PUSH
43303: LD_INT 0
43305: ST_TO_ADDR
// InitHc_All ( ) ;
43306: CALL_OW 584
// InitVc ;
43310: CALL_OW 20
// if mastodonts then
43314: LD_VAR 0 6
43318: IFFALSE 43385
// for i = 1 to mastodonts do
43320: LD_ADDR_VAR 0 11
43324: PUSH
43325: DOUBLE
43326: LD_INT 1
43328: DEC
43329: ST_TO_ADDR
43330: LD_VAR 0 6
43334: PUSH
43335: FOR_TO
43336: IFFALSE 43383
// begin vc_chassis := 31 ;
43338: LD_ADDR_OWVAR 37
43342: PUSH
43343: LD_INT 31
43345: ST_TO_ADDR
// vc_control := control_rider ;
43346: LD_ADDR_OWVAR 38
43350: PUSH
43351: LD_INT 4
43353: ST_TO_ADDR
// animal := CreateVehicle ;
43354: LD_ADDR_VAR 0 12
43358: PUSH
43359: CALL_OW 45
43363: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43364: LD_VAR 0 12
43368: PPUSH
43369: LD_VAR 0 8
43373: PPUSH
43374: LD_INT 0
43376: PPUSH
43377: CALL 45520 0 3
// end ;
43381: GO 43335
43383: POP
43384: POP
// if horses then
43385: LD_VAR 0 5
43389: IFFALSE 43456
// for i = 1 to horses do
43391: LD_ADDR_VAR 0 11
43395: PUSH
43396: DOUBLE
43397: LD_INT 1
43399: DEC
43400: ST_TO_ADDR
43401: LD_VAR 0 5
43405: PUSH
43406: FOR_TO
43407: IFFALSE 43454
// begin hc_class := 21 ;
43409: LD_ADDR_OWVAR 28
43413: PUSH
43414: LD_INT 21
43416: ST_TO_ADDR
// hc_gallery :=  ;
43417: LD_ADDR_OWVAR 33
43421: PUSH
43422: LD_STRING 
43424: ST_TO_ADDR
// animal := CreateHuman ;
43425: LD_ADDR_VAR 0 12
43429: PUSH
43430: CALL_OW 44
43434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43435: LD_VAR 0 12
43439: PPUSH
43440: LD_VAR 0 8
43444: PPUSH
43445: LD_INT 0
43447: PPUSH
43448: CALL 45520 0 3
// end ;
43452: GO 43406
43454: POP
43455: POP
// if birds then
43456: LD_VAR 0 1
43460: IFFALSE 43527
// for i = 1 to birds do
43462: LD_ADDR_VAR 0 11
43466: PUSH
43467: DOUBLE
43468: LD_INT 1
43470: DEC
43471: ST_TO_ADDR
43472: LD_VAR 0 1
43476: PUSH
43477: FOR_TO
43478: IFFALSE 43525
// begin hc_class = 18 ;
43480: LD_ADDR_OWVAR 28
43484: PUSH
43485: LD_INT 18
43487: ST_TO_ADDR
// hc_gallery =  ;
43488: LD_ADDR_OWVAR 33
43492: PUSH
43493: LD_STRING 
43495: ST_TO_ADDR
// animal := CreateHuman ;
43496: LD_ADDR_VAR 0 12
43500: PUSH
43501: CALL_OW 44
43505: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43506: LD_VAR 0 12
43510: PPUSH
43511: LD_VAR 0 8
43515: PPUSH
43516: LD_INT 0
43518: PPUSH
43519: CALL 45520 0 3
// end ;
43523: GO 43477
43525: POP
43526: POP
// if tigers then
43527: LD_VAR 0 2
43531: IFFALSE 43615
// for i = 1 to tigers do
43533: LD_ADDR_VAR 0 11
43537: PUSH
43538: DOUBLE
43539: LD_INT 1
43541: DEC
43542: ST_TO_ADDR
43543: LD_VAR 0 2
43547: PUSH
43548: FOR_TO
43549: IFFALSE 43613
// begin hc_class = class_tiger ;
43551: LD_ADDR_OWVAR 28
43555: PUSH
43556: LD_INT 14
43558: ST_TO_ADDR
// hc_gallery =  ;
43559: LD_ADDR_OWVAR 33
43563: PUSH
43564: LD_STRING 
43566: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43567: LD_ADDR_OWVAR 35
43571: PUSH
43572: LD_INT 7
43574: NEG
43575: PPUSH
43576: LD_INT 7
43578: PPUSH
43579: CALL_OW 12
43583: ST_TO_ADDR
// animal := CreateHuman ;
43584: LD_ADDR_VAR 0 12
43588: PUSH
43589: CALL_OW 44
43593: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43594: LD_VAR 0 12
43598: PPUSH
43599: LD_VAR 0 8
43603: PPUSH
43604: LD_INT 0
43606: PPUSH
43607: CALL 45520 0 3
// end ;
43611: GO 43548
43613: POP
43614: POP
// if apemans then
43615: LD_VAR 0 3
43619: IFFALSE 43742
// for i = 1 to apemans do
43621: LD_ADDR_VAR 0 11
43625: PUSH
43626: DOUBLE
43627: LD_INT 1
43629: DEC
43630: ST_TO_ADDR
43631: LD_VAR 0 3
43635: PUSH
43636: FOR_TO
43637: IFFALSE 43740
// begin hc_class = class_apeman ;
43639: LD_ADDR_OWVAR 28
43643: PUSH
43644: LD_INT 12
43646: ST_TO_ADDR
// hc_gallery =  ;
43647: LD_ADDR_OWVAR 33
43651: PUSH
43652: LD_STRING 
43654: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43655: LD_ADDR_OWVAR 35
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PPUSH
43664: LD_INT 2
43666: PPUSH
43667: CALL_OW 12
43671: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43672: LD_ADDR_OWVAR 31
43676: PUSH
43677: LD_INT 1
43679: PPUSH
43680: LD_INT 3
43682: PPUSH
43683: CALL_OW 12
43687: PUSH
43688: LD_INT 1
43690: PPUSH
43691: LD_INT 3
43693: PPUSH
43694: CALL_OW 12
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: ST_TO_ADDR
// animal := CreateHuman ;
43711: LD_ADDR_VAR 0 12
43715: PUSH
43716: CALL_OW 44
43720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43721: LD_VAR 0 12
43725: PPUSH
43726: LD_VAR 0 8
43730: PPUSH
43731: LD_INT 0
43733: PPUSH
43734: CALL 45520 0 3
// end ;
43738: GO 43636
43740: POP
43741: POP
// if enchidnas then
43742: LD_VAR 0 4
43746: IFFALSE 43813
// for i = 1 to enchidnas do
43748: LD_ADDR_VAR 0 11
43752: PUSH
43753: DOUBLE
43754: LD_INT 1
43756: DEC
43757: ST_TO_ADDR
43758: LD_VAR 0 4
43762: PUSH
43763: FOR_TO
43764: IFFALSE 43811
// begin hc_class = 13 ;
43766: LD_ADDR_OWVAR 28
43770: PUSH
43771: LD_INT 13
43773: ST_TO_ADDR
// hc_gallery =  ;
43774: LD_ADDR_OWVAR 33
43778: PUSH
43779: LD_STRING 
43781: ST_TO_ADDR
// animal := CreateHuman ;
43782: LD_ADDR_VAR 0 12
43786: PUSH
43787: CALL_OW 44
43791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43792: LD_VAR 0 12
43796: PPUSH
43797: LD_VAR 0 8
43801: PPUSH
43802: LD_INT 0
43804: PPUSH
43805: CALL 45520 0 3
// end ;
43809: GO 43763
43811: POP
43812: POP
// if fishes then
43813: LD_VAR 0 7
43817: IFFALSE 43884
// for i = 1 to fishes do
43819: LD_ADDR_VAR 0 11
43823: PUSH
43824: DOUBLE
43825: LD_INT 1
43827: DEC
43828: ST_TO_ADDR
43829: LD_VAR 0 7
43833: PUSH
43834: FOR_TO
43835: IFFALSE 43882
// begin hc_class = 20 ;
43837: LD_ADDR_OWVAR 28
43841: PUSH
43842: LD_INT 20
43844: ST_TO_ADDR
// hc_gallery =  ;
43845: LD_ADDR_OWVAR 33
43849: PUSH
43850: LD_STRING 
43852: ST_TO_ADDR
// animal := CreateHuman ;
43853: LD_ADDR_VAR 0 12
43857: PUSH
43858: CALL_OW 44
43862: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43863: LD_VAR 0 12
43867: PPUSH
43868: LD_VAR 0 9
43872: PPUSH
43873: LD_INT 0
43875: PPUSH
43876: CALL 45520 0 3
// end ;
43880: GO 43834
43882: POP
43883: POP
// end ;
43884: LD_VAR 0 10
43888: RET
// export function WantHeal ( sci , unit ) ; begin
43889: LD_INT 0
43891: PPUSH
// if GetTaskList ( sci ) > 0 then
43892: LD_VAR 0 1
43896: PPUSH
43897: CALL_OW 437
43901: PUSH
43902: LD_INT 0
43904: GREATER
43905: IFFALSE 43975
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43907: LD_VAR 0 1
43911: PPUSH
43912: CALL_OW 437
43916: PUSH
43917: LD_INT 1
43919: ARRAY
43920: PUSH
43921: LD_INT 1
43923: ARRAY
43924: PUSH
43925: LD_STRING l
43927: EQUAL
43928: PUSH
43929: LD_VAR 0 1
43933: PPUSH
43934: CALL_OW 437
43938: PUSH
43939: LD_INT 1
43941: ARRAY
43942: PUSH
43943: LD_INT 4
43945: ARRAY
43946: PUSH
43947: LD_VAR 0 2
43951: EQUAL
43952: AND
43953: IFFALSE 43965
// result := true else
43955: LD_ADDR_VAR 0 3
43959: PUSH
43960: LD_INT 1
43962: ST_TO_ADDR
43963: GO 43973
// result := false ;
43965: LD_ADDR_VAR 0 3
43969: PUSH
43970: LD_INT 0
43972: ST_TO_ADDR
// end else
43973: GO 43983
// result := false ;
43975: LD_ADDR_VAR 0 3
43979: PUSH
43980: LD_INT 0
43982: ST_TO_ADDR
// end ;
43983: LD_VAR 0 3
43987: RET
// export function HealTarget ( sci ) ; begin
43988: LD_INT 0
43990: PPUSH
// if not sci then
43991: LD_VAR 0 1
43995: NOT
43996: IFFALSE 44000
// exit ;
43998: GO 44065
// result := 0 ;
44000: LD_ADDR_VAR 0 2
44004: PUSH
44005: LD_INT 0
44007: ST_TO_ADDR
// if GetTaskList ( sci ) then
44008: LD_VAR 0 1
44012: PPUSH
44013: CALL_OW 437
44017: IFFALSE 44065
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44019: LD_VAR 0 1
44023: PPUSH
44024: CALL_OW 437
44028: PUSH
44029: LD_INT 1
44031: ARRAY
44032: PUSH
44033: LD_INT 1
44035: ARRAY
44036: PUSH
44037: LD_STRING l
44039: EQUAL
44040: IFFALSE 44065
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44042: LD_ADDR_VAR 0 2
44046: PUSH
44047: LD_VAR 0 1
44051: PPUSH
44052: CALL_OW 437
44056: PUSH
44057: LD_INT 1
44059: ARRAY
44060: PUSH
44061: LD_INT 4
44063: ARRAY
44064: ST_TO_ADDR
// end ;
44065: LD_VAR 0 2
44069: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44070: LD_INT 0
44072: PPUSH
44073: PPUSH
44074: PPUSH
44075: PPUSH
// if not base_units then
44076: LD_VAR 0 1
44080: NOT
44081: IFFALSE 44085
// exit ;
44083: GO 44172
// result := false ;
44085: LD_ADDR_VAR 0 2
44089: PUSH
44090: LD_INT 0
44092: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44093: LD_ADDR_VAR 0 5
44097: PUSH
44098: LD_VAR 0 1
44102: PPUSH
44103: LD_INT 21
44105: PUSH
44106: LD_INT 3
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PPUSH
44113: CALL_OW 72
44117: ST_TO_ADDR
// if not tmp then
44118: LD_VAR 0 5
44122: NOT
44123: IFFALSE 44127
// exit ;
44125: GO 44172
// for i in tmp do
44127: LD_ADDR_VAR 0 3
44131: PUSH
44132: LD_VAR 0 5
44136: PUSH
44137: FOR_IN
44138: IFFALSE 44170
// begin result := EnemyInRange ( i , 22 ) ;
44140: LD_ADDR_VAR 0 2
44144: PUSH
44145: LD_VAR 0 3
44149: PPUSH
44150: LD_INT 22
44152: PPUSH
44153: CALL 41841 0 2
44157: ST_TO_ADDR
// if result then
44158: LD_VAR 0 2
44162: IFFALSE 44168
// exit ;
44164: POP
44165: POP
44166: GO 44172
// end ;
44168: GO 44137
44170: POP
44171: POP
// end ;
44172: LD_VAR 0 2
44176: RET
// export function FilterByTag ( units , tag ) ; begin
44177: LD_INT 0
44179: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44180: LD_ADDR_VAR 0 3
44184: PUSH
44185: LD_VAR 0 1
44189: PPUSH
44190: LD_INT 120
44192: PUSH
44193: LD_VAR 0 2
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PPUSH
44202: CALL_OW 72
44206: ST_TO_ADDR
// end ;
44207: LD_VAR 0 3
44211: RET
// export function IsDriver ( un ) ; begin
44212: LD_INT 0
44214: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44215: LD_ADDR_VAR 0 2
44219: PUSH
44220: LD_VAR 0 1
44224: PUSH
44225: LD_INT 55
44227: PUSH
44228: EMPTY
44229: LIST
44230: PPUSH
44231: CALL_OW 69
44235: IN
44236: ST_TO_ADDR
// end ;
44237: LD_VAR 0 2
44241: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44242: LD_INT 0
44244: PPUSH
44245: PPUSH
// list := [ ] ;
44246: LD_ADDR_VAR 0 5
44250: PUSH
44251: EMPTY
44252: ST_TO_ADDR
// case d of 0 :
44253: LD_VAR 0 3
44257: PUSH
44258: LD_INT 0
44260: DOUBLE
44261: EQUAL
44262: IFTRUE 44266
44264: GO 44399
44266: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44267: LD_ADDR_VAR 0 5
44271: PUSH
44272: LD_VAR 0 1
44276: PUSH
44277: LD_INT 4
44279: MINUS
44280: PUSH
44281: LD_VAR 0 2
44285: PUSH
44286: LD_INT 4
44288: MINUS
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: LIST
44297: PUSH
44298: LD_VAR 0 1
44302: PUSH
44303: LD_INT 3
44305: MINUS
44306: PUSH
44307: LD_VAR 0 2
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: PUSH
44320: LD_VAR 0 1
44324: PUSH
44325: LD_INT 4
44327: PLUS
44328: PUSH
44329: LD_VAR 0 2
44333: PUSH
44334: LD_INT 4
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: LIST
44341: PUSH
44342: LD_VAR 0 1
44346: PUSH
44347: LD_INT 3
44349: PLUS
44350: PUSH
44351: LD_VAR 0 2
44355: PUSH
44356: LD_INT 3
44358: PLUS
44359: PUSH
44360: LD_INT 5
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: LIST
44367: PUSH
44368: LD_VAR 0 1
44372: PUSH
44373: LD_VAR 0 2
44377: PUSH
44378: LD_INT 4
44380: PLUS
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: LIST
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
// end ; 1 :
44397: GO 45097
44399: LD_INT 1
44401: DOUBLE
44402: EQUAL
44403: IFTRUE 44407
44405: GO 44540
44407: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44408: LD_ADDR_VAR 0 5
44412: PUSH
44413: LD_VAR 0 1
44417: PUSH
44418: LD_VAR 0 2
44422: PUSH
44423: LD_INT 4
44425: MINUS
44426: PUSH
44427: LD_INT 3
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: LIST
44434: PUSH
44435: LD_VAR 0 1
44439: PUSH
44440: LD_INT 3
44442: MINUS
44443: PUSH
44444: LD_VAR 0 2
44448: PUSH
44449: LD_INT 3
44451: MINUS
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: PUSH
44461: LD_VAR 0 1
44465: PUSH
44466: LD_INT 4
44468: MINUS
44469: PUSH
44470: LD_VAR 0 2
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: LIST
44482: PUSH
44483: LD_VAR 0 1
44487: PUSH
44488: LD_VAR 0 2
44492: PUSH
44493: LD_INT 3
44495: PLUS
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: LIST
44504: PUSH
44505: LD_VAR 0 1
44509: PUSH
44510: LD_INT 4
44512: PLUS
44513: PUSH
44514: LD_VAR 0 2
44518: PUSH
44519: LD_INT 4
44521: PLUS
44522: PUSH
44523: LD_INT 5
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: LIST
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: ST_TO_ADDR
// end ; 2 :
44538: GO 45097
44540: LD_INT 2
44542: DOUBLE
44543: EQUAL
44544: IFTRUE 44548
44546: GO 44677
44548: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44549: LD_ADDR_VAR 0 5
44553: PUSH
44554: LD_VAR 0 1
44558: PUSH
44559: LD_VAR 0 2
44563: PUSH
44564: LD_INT 3
44566: MINUS
44567: PUSH
44568: LD_INT 3
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: LIST
44575: PUSH
44576: LD_VAR 0 1
44580: PUSH
44581: LD_INT 4
44583: PLUS
44584: PUSH
44585: LD_VAR 0 2
44589: PUSH
44590: LD_INT 4
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: LIST
44597: PUSH
44598: LD_VAR 0 1
44602: PUSH
44603: LD_VAR 0 2
44607: PUSH
44608: LD_INT 4
44610: PLUS
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: PUSH
44620: LD_VAR 0 1
44624: PUSH
44625: LD_INT 3
44627: MINUS
44628: PUSH
44629: LD_VAR 0 2
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: PUSH
44642: LD_VAR 0 1
44646: PUSH
44647: LD_INT 4
44649: MINUS
44650: PUSH
44651: LD_VAR 0 2
44655: PUSH
44656: LD_INT 4
44658: MINUS
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: LIST
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: ST_TO_ADDR
// end ; 3 :
44675: GO 45097
44677: LD_INT 3
44679: DOUBLE
44680: EQUAL
44681: IFTRUE 44685
44683: GO 44818
44685: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44686: LD_ADDR_VAR 0 5
44690: PUSH
44691: LD_VAR 0 1
44695: PUSH
44696: LD_INT 3
44698: PLUS
44699: PUSH
44700: LD_VAR 0 2
44704: PUSH
44705: LD_INT 4
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: PUSH
44713: LD_VAR 0 1
44717: PUSH
44718: LD_INT 4
44720: PLUS
44721: PUSH
44722: LD_VAR 0 2
44726: PUSH
44727: LD_INT 4
44729: PLUS
44730: PUSH
44731: LD_INT 5
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: PUSH
44739: LD_VAR 0 1
44743: PUSH
44744: LD_INT 4
44746: MINUS
44747: PUSH
44748: LD_VAR 0 2
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: PUSH
44761: LD_VAR 0 1
44765: PUSH
44766: LD_VAR 0 2
44770: PUSH
44771: LD_INT 4
44773: MINUS
44774: PUSH
44775: LD_INT 3
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: LIST
44782: PUSH
44783: LD_VAR 0 1
44787: PUSH
44788: LD_INT 3
44790: MINUS
44791: PUSH
44792: LD_VAR 0 2
44796: PUSH
44797: LD_INT 3
44799: MINUS
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: LIST
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: ST_TO_ADDR
// end ; 4 :
44816: GO 45097
44818: LD_INT 4
44820: DOUBLE
44821: EQUAL
44822: IFTRUE 44826
44824: GO 44959
44826: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44827: LD_ADDR_VAR 0 5
44831: PUSH
44832: LD_VAR 0 1
44836: PUSH
44837: LD_VAR 0 2
44841: PUSH
44842: LD_INT 4
44844: PLUS
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: LIST
44853: PUSH
44854: LD_VAR 0 1
44858: PUSH
44859: LD_INT 3
44861: PLUS
44862: PUSH
44863: LD_VAR 0 2
44867: PUSH
44868: LD_INT 3
44870: PLUS
44871: PUSH
44872: LD_INT 5
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: LIST
44879: PUSH
44880: LD_VAR 0 1
44884: PUSH
44885: LD_INT 4
44887: PLUS
44888: PUSH
44889: LD_VAR 0 2
44893: PUSH
44894: LD_INT 4
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: LIST
44901: PUSH
44902: LD_VAR 0 1
44906: PUSH
44907: LD_VAR 0 2
44911: PUSH
44912: LD_INT 3
44914: MINUS
44915: PUSH
44916: LD_INT 3
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: PUSH
44924: LD_VAR 0 1
44928: PUSH
44929: LD_INT 4
44931: MINUS
44932: PUSH
44933: LD_VAR 0 2
44937: PUSH
44938: LD_INT 4
44940: MINUS
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: ST_TO_ADDR
// end ; 5 :
44957: GO 45097
44959: LD_INT 5
44961: DOUBLE
44962: EQUAL
44963: IFTRUE 44967
44965: GO 45096
44967: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44968: LD_ADDR_VAR 0 5
44972: PUSH
44973: LD_VAR 0 1
44977: PUSH
44978: LD_INT 4
44980: MINUS
44981: PUSH
44982: LD_VAR 0 2
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: PUSH
44995: LD_VAR 0 1
44999: PUSH
45000: LD_VAR 0 2
45004: PUSH
45005: LD_INT 4
45007: MINUS
45008: PUSH
45009: LD_INT 3
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: PUSH
45017: LD_VAR 0 1
45021: PUSH
45022: LD_INT 4
45024: PLUS
45025: PUSH
45026: LD_VAR 0 2
45030: PUSH
45031: LD_INT 4
45033: PLUS
45034: PUSH
45035: LD_INT 5
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: LIST
45042: PUSH
45043: LD_VAR 0 1
45047: PUSH
45048: LD_INT 3
45050: PLUS
45051: PUSH
45052: LD_VAR 0 2
45056: PUSH
45057: LD_INT 4
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: LIST
45064: PUSH
45065: LD_VAR 0 1
45069: PUSH
45070: LD_VAR 0 2
45074: PUSH
45075: LD_INT 3
45077: PLUS
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: LIST
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: ST_TO_ADDR
// end ; end ;
45094: GO 45097
45096: POP
// result := list ;
45097: LD_ADDR_VAR 0 4
45101: PUSH
45102: LD_VAR 0 5
45106: ST_TO_ADDR
// end ;
45107: LD_VAR 0 4
45111: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45112: LD_INT 0
45114: PPUSH
45115: PPUSH
45116: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45117: LD_VAR 0 1
45121: NOT
45122: PUSH
45123: LD_VAR 0 2
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: LD_INT 3
45136: PUSH
45137: LD_INT 4
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: IN
45146: NOT
45147: OR
45148: IFFALSE 45152
// exit ;
45150: GO 45244
// tmp := [ ] ;
45152: LD_ADDR_VAR 0 5
45156: PUSH
45157: EMPTY
45158: ST_TO_ADDR
// for i in units do
45159: LD_ADDR_VAR 0 4
45163: PUSH
45164: LD_VAR 0 1
45168: PUSH
45169: FOR_IN
45170: IFFALSE 45213
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
45172: LD_ADDR_VAR 0 5
45176: PUSH
45177: LD_VAR 0 5
45181: PPUSH
45182: LD_VAR 0 5
45186: PUSH
45187: LD_INT 1
45189: PLUS
45190: PPUSH
45191: LD_VAR 0 4
45195: PPUSH
45196: LD_VAR 0 2
45200: PPUSH
45201: CALL_OW 259
45205: PPUSH
45206: CALL_OW 2
45210: ST_TO_ADDR
45211: GO 45169
45213: POP
45214: POP
// if not tmp then
45215: LD_VAR 0 5
45219: NOT
45220: IFFALSE 45224
// exit ;
45222: GO 45244
// result := SortListByListDesc ( units , tmp ) ;
45224: LD_ADDR_VAR 0 3
45228: PUSH
45229: LD_VAR 0 1
45233: PPUSH
45234: LD_VAR 0 5
45238: PPUSH
45239: CALL_OW 77
45243: ST_TO_ADDR
// end ;
45244: LD_VAR 0 3
45248: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45249: LD_INT 0
45251: PPUSH
45252: PPUSH
45253: PPUSH
// result := false ;
45254: LD_ADDR_VAR 0 3
45258: PUSH
45259: LD_INT 0
45261: ST_TO_ADDR
// x := GetX ( building ) ;
45262: LD_ADDR_VAR 0 4
45266: PUSH
45267: LD_VAR 0 2
45271: PPUSH
45272: CALL_OW 250
45276: ST_TO_ADDR
// y := GetY ( building ) ;
45277: LD_ADDR_VAR 0 5
45281: PUSH
45282: LD_VAR 0 2
45286: PPUSH
45287: CALL_OW 251
45291: ST_TO_ADDR
// if not building or not x or not y then
45292: LD_VAR 0 2
45296: NOT
45297: PUSH
45298: LD_VAR 0 4
45302: NOT
45303: OR
45304: PUSH
45305: LD_VAR 0 5
45309: NOT
45310: OR
45311: IFFALSE 45315
// exit ;
45313: GO 45407
// if GetTaskList ( unit ) then
45315: LD_VAR 0 1
45319: PPUSH
45320: CALL_OW 437
45324: IFFALSE 45407
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45326: LD_STRING e
45328: PUSH
45329: LD_VAR 0 1
45333: PPUSH
45334: CALL_OW 437
45338: PUSH
45339: LD_INT 1
45341: ARRAY
45342: PUSH
45343: LD_INT 1
45345: ARRAY
45346: EQUAL
45347: PUSH
45348: LD_VAR 0 4
45352: PUSH
45353: LD_VAR 0 1
45357: PPUSH
45358: CALL_OW 437
45362: PUSH
45363: LD_INT 1
45365: ARRAY
45366: PUSH
45367: LD_INT 2
45369: ARRAY
45370: EQUAL
45371: AND
45372: PUSH
45373: LD_VAR 0 5
45377: PUSH
45378: LD_VAR 0 1
45382: PPUSH
45383: CALL_OW 437
45387: PUSH
45388: LD_INT 1
45390: ARRAY
45391: PUSH
45392: LD_INT 3
45394: ARRAY
45395: EQUAL
45396: AND
45397: IFFALSE 45407
// result := true end ;
45399: LD_ADDR_VAR 0 3
45403: PUSH
45404: LD_INT 1
45406: ST_TO_ADDR
// end ;
45407: LD_VAR 0 3
45411: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45412: LD_INT 0
45414: PPUSH
// result := false ;
45415: LD_ADDR_VAR 0 4
45419: PUSH
45420: LD_INT 0
45422: ST_TO_ADDR
// if GetTaskList ( unit ) then
45423: LD_VAR 0 1
45427: PPUSH
45428: CALL_OW 437
45432: IFFALSE 45515
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45434: LD_STRING M
45436: PUSH
45437: LD_VAR 0 1
45441: PPUSH
45442: CALL_OW 437
45446: PUSH
45447: LD_INT 1
45449: ARRAY
45450: PUSH
45451: LD_INT 1
45453: ARRAY
45454: EQUAL
45455: PUSH
45456: LD_VAR 0 2
45460: PUSH
45461: LD_VAR 0 1
45465: PPUSH
45466: CALL_OW 437
45470: PUSH
45471: LD_INT 1
45473: ARRAY
45474: PUSH
45475: LD_INT 2
45477: ARRAY
45478: EQUAL
45479: AND
45480: PUSH
45481: LD_VAR 0 3
45485: PUSH
45486: LD_VAR 0 1
45490: PPUSH
45491: CALL_OW 437
45495: PUSH
45496: LD_INT 1
45498: ARRAY
45499: PUSH
45500: LD_INT 3
45502: ARRAY
45503: EQUAL
45504: AND
45505: IFFALSE 45515
// result := true ;
45507: LD_ADDR_VAR 0 4
45511: PUSH
45512: LD_INT 1
45514: ST_TO_ADDR
// end ; end ;
45515: LD_VAR 0 4
45519: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45520: LD_INT 0
45522: PPUSH
45523: PPUSH
45524: PPUSH
45525: PPUSH
// if not unit or not area then
45526: LD_VAR 0 1
45530: NOT
45531: PUSH
45532: LD_VAR 0 2
45536: NOT
45537: OR
45538: IFFALSE 45542
// exit ;
45540: GO 45706
// tmp := AreaToList ( area , i ) ;
45542: LD_ADDR_VAR 0 6
45546: PUSH
45547: LD_VAR 0 2
45551: PPUSH
45552: LD_VAR 0 5
45556: PPUSH
45557: CALL_OW 517
45561: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45562: LD_ADDR_VAR 0 5
45566: PUSH
45567: DOUBLE
45568: LD_INT 1
45570: DEC
45571: ST_TO_ADDR
45572: LD_VAR 0 6
45576: PUSH
45577: LD_INT 1
45579: ARRAY
45580: PUSH
45581: FOR_TO
45582: IFFALSE 45704
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45584: LD_ADDR_VAR 0 7
45588: PUSH
45589: LD_VAR 0 6
45593: PUSH
45594: LD_INT 1
45596: ARRAY
45597: PUSH
45598: LD_VAR 0 5
45602: ARRAY
45603: PUSH
45604: LD_VAR 0 6
45608: PUSH
45609: LD_INT 2
45611: ARRAY
45612: PUSH
45613: LD_VAR 0 5
45617: ARRAY
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
45623: LD_VAR 0 7
45627: PUSH
45628: LD_INT 1
45630: ARRAY
45631: PPUSH
45632: LD_VAR 0 7
45636: PUSH
45637: LD_INT 2
45639: ARRAY
45640: PPUSH
45641: CALL_OW 428
45645: PUSH
45646: LD_INT 0
45648: EQUAL
45649: IFFALSE 45702
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45651: LD_VAR 0 1
45655: PPUSH
45656: LD_VAR 0 7
45660: PUSH
45661: LD_INT 1
45663: ARRAY
45664: PPUSH
45665: LD_VAR 0 7
45669: PUSH
45670: LD_INT 2
45672: ARRAY
45673: PPUSH
45674: LD_VAR 0 3
45678: PPUSH
45679: CALL_OW 48
// result := IsPlaced ( unit ) ;
45683: LD_ADDR_VAR 0 4
45687: PUSH
45688: LD_VAR 0 1
45692: PPUSH
45693: CALL_OW 305
45697: ST_TO_ADDR
// exit ;
45698: POP
45699: POP
45700: GO 45706
// end ; end ;
45702: GO 45581
45704: POP
45705: POP
// end ;
45706: LD_VAR 0 4
45710: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45711: LD_INT 0
45713: PPUSH
45714: PPUSH
45715: PPUSH
// if not side or side > 8 then
45716: LD_VAR 0 1
45720: NOT
45721: PUSH
45722: LD_VAR 0 1
45726: PUSH
45727: LD_INT 8
45729: GREATER
45730: OR
45731: IFFALSE 45735
// exit ;
45733: GO 45922
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45735: LD_ADDR_VAR 0 4
45739: PUSH
45740: LD_INT 22
45742: PUSH
45743: LD_VAR 0 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 21
45754: PUSH
45755: LD_INT 3
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PPUSH
45766: CALL_OW 69
45770: ST_TO_ADDR
// if not tmp then
45771: LD_VAR 0 4
45775: NOT
45776: IFFALSE 45780
// exit ;
45778: GO 45922
// enable_addtolog := true ;
45780: LD_ADDR_OWVAR 81
45784: PUSH
45785: LD_INT 1
45787: ST_TO_ADDR
// AddToLog ( [ ) ;
45788: LD_STRING [
45790: PPUSH
45791: CALL_OW 561
// for i in tmp do
45795: LD_ADDR_VAR 0 3
45799: PUSH
45800: LD_VAR 0 4
45804: PUSH
45805: FOR_IN
45806: IFFALSE 45913
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45808: LD_STRING [
45810: PUSH
45811: LD_VAR 0 3
45815: PPUSH
45816: CALL_OW 266
45820: STR
45821: PUSH
45822: LD_STRING , 
45824: STR
45825: PUSH
45826: LD_VAR 0 3
45830: PPUSH
45831: CALL_OW 250
45835: STR
45836: PUSH
45837: LD_STRING , 
45839: STR
45840: PUSH
45841: LD_VAR 0 3
45845: PPUSH
45846: CALL_OW 251
45850: STR
45851: PUSH
45852: LD_STRING , 
45854: STR
45855: PUSH
45856: LD_VAR 0 3
45860: PPUSH
45861: CALL_OW 254
45865: STR
45866: PUSH
45867: LD_STRING , 
45869: STR
45870: PUSH
45871: LD_VAR 0 3
45875: PPUSH
45876: LD_INT 1
45878: PPUSH
45879: CALL_OW 268
45883: STR
45884: PUSH
45885: LD_STRING , 
45887: STR
45888: PUSH
45889: LD_VAR 0 3
45893: PPUSH
45894: LD_INT 2
45896: PPUSH
45897: CALL_OW 268
45901: STR
45902: PUSH
45903: LD_STRING ],
45905: STR
45906: PPUSH
45907: CALL_OW 561
// end ;
45911: GO 45805
45913: POP
45914: POP
// AddToLog ( ]; ) ;
45915: LD_STRING ];
45917: PPUSH
45918: CALL_OW 561
// end ;
45922: LD_VAR 0 2
45926: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45927: LD_INT 0
45929: PPUSH
45930: PPUSH
45931: PPUSH
45932: PPUSH
45933: PPUSH
// if not area or not rate or not max then
45934: LD_VAR 0 1
45938: NOT
45939: PUSH
45940: LD_VAR 0 2
45944: NOT
45945: OR
45946: PUSH
45947: LD_VAR 0 4
45951: NOT
45952: OR
45953: IFFALSE 45957
// exit ;
45955: GO 46146
// while 1 do
45957: LD_INT 1
45959: IFFALSE 46146
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45961: LD_ADDR_VAR 0 9
45965: PUSH
45966: LD_VAR 0 1
45970: PPUSH
45971: LD_INT 1
45973: PPUSH
45974: CALL_OW 287
45978: PUSH
45979: LD_INT 10
45981: MUL
45982: ST_TO_ADDR
// r := rate / 10 ;
45983: LD_ADDR_VAR 0 7
45987: PUSH
45988: LD_VAR 0 2
45992: PUSH
45993: LD_INT 10
45995: DIVREAL
45996: ST_TO_ADDR
// time := 1 1$00 ;
45997: LD_ADDR_VAR 0 8
46001: PUSH
46002: LD_INT 2100
46004: ST_TO_ADDR
// if amount < min then
46005: LD_VAR 0 9
46009: PUSH
46010: LD_VAR 0 3
46014: LESS
46015: IFFALSE 46033
// r := r * 2 else
46017: LD_ADDR_VAR 0 7
46021: PUSH
46022: LD_VAR 0 7
46026: PUSH
46027: LD_INT 2
46029: MUL
46030: ST_TO_ADDR
46031: GO 46059
// if amount > max then
46033: LD_VAR 0 9
46037: PUSH
46038: LD_VAR 0 4
46042: GREATER
46043: IFFALSE 46059
// r := r / 2 ;
46045: LD_ADDR_VAR 0 7
46049: PUSH
46050: LD_VAR 0 7
46054: PUSH
46055: LD_INT 2
46057: DIVREAL
46058: ST_TO_ADDR
// time := time / r ;
46059: LD_ADDR_VAR 0 8
46063: PUSH
46064: LD_VAR 0 8
46068: PUSH
46069: LD_VAR 0 7
46073: DIVREAL
46074: ST_TO_ADDR
// if time < 0 then
46075: LD_VAR 0 8
46079: PUSH
46080: LD_INT 0
46082: LESS
46083: IFFALSE 46100
// time := time * - 1 ;
46085: LD_ADDR_VAR 0 8
46089: PUSH
46090: LD_VAR 0 8
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: MUL
46099: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46100: LD_VAR 0 8
46104: PUSH
46105: LD_INT 35
46107: PPUSH
46108: LD_INT 875
46110: PPUSH
46111: CALL_OW 12
46115: PLUS
46116: PPUSH
46117: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46121: LD_INT 1
46123: PPUSH
46124: LD_INT 5
46126: PPUSH
46127: CALL_OW 12
46131: PPUSH
46132: LD_VAR 0 1
46136: PPUSH
46137: LD_INT 1
46139: PPUSH
46140: CALL_OW 55
// end ;
46144: GO 45957
// end ;
46146: LD_VAR 0 5
46150: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46151: LD_INT 0
46153: PPUSH
46154: PPUSH
46155: PPUSH
46156: PPUSH
46157: PPUSH
46158: PPUSH
46159: PPUSH
46160: PPUSH
// if not turrets or not factories then
46161: LD_VAR 0 1
46165: NOT
46166: PUSH
46167: LD_VAR 0 2
46171: NOT
46172: OR
46173: IFFALSE 46177
// exit ;
46175: GO 46484
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46177: LD_ADDR_VAR 0 10
46181: PUSH
46182: LD_INT 5
46184: PUSH
46185: LD_INT 6
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 4
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 3
46204: PUSH
46205: LD_INT 5
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 24
46219: PUSH
46220: LD_INT 25
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 23
46229: PUSH
46230: LD_INT 27
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 42
46243: PUSH
46244: LD_INT 43
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 44
46253: PUSH
46254: LD_INT 46
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 45
46263: PUSH
46264: LD_INT 47
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: LIST
46280: ST_TO_ADDR
// result := [ ] ;
46281: LD_ADDR_VAR 0 3
46285: PUSH
46286: EMPTY
46287: ST_TO_ADDR
// for i in turrets do
46288: LD_ADDR_VAR 0 4
46292: PUSH
46293: LD_VAR 0 1
46297: PUSH
46298: FOR_IN
46299: IFFALSE 46482
// begin nat := GetNation ( i ) ;
46301: LD_ADDR_VAR 0 7
46305: PUSH
46306: LD_VAR 0 4
46310: PPUSH
46311: CALL_OW 248
46315: ST_TO_ADDR
// weapon := 0 ;
46316: LD_ADDR_VAR 0 8
46320: PUSH
46321: LD_INT 0
46323: ST_TO_ADDR
// if not nat then
46324: LD_VAR 0 7
46328: NOT
46329: IFFALSE 46333
// continue ;
46331: GO 46298
// for j in list [ nat ] do
46333: LD_ADDR_VAR 0 5
46337: PUSH
46338: LD_VAR 0 10
46342: PUSH
46343: LD_VAR 0 7
46347: ARRAY
46348: PUSH
46349: FOR_IN
46350: IFFALSE 46391
// if GetBWeapon ( i ) = j [ 1 ] then
46352: LD_VAR 0 4
46356: PPUSH
46357: CALL_OW 269
46361: PUSH
46362: LD_VAR 0 5
46366: PUSH
46367: LD_INT 1
46369: ARRAY
46370: EQUAL
46371: IFFALSE 46389
// begin weapon := j [ 2 ] ;
46373: LD_ADDR_VAR 0 8
46377: PUSH
46378: LD_VAR 0 5
46382: PUSH
46383: LD_INT 2
46385: ARRAY
46386: ST_TO_ADDR
// break ;
46387: GO 46391
// end ;
46389: GO 46349
46391: POP
46392: POP
// if not weapon then
46393: LD_VAR 0 8
46397: NOT
46398: IFFALSE 46402
// continue ;
46400: GO 46298
// for k in factories do
46402: LD_ADDR_VAR 0 6
46406: PUSH
46407: LD_VAR 0 2
46411: PUSH
46412: FOR_IN
46413: IFFALSE 46478
// begin weapons := AvailableWeaponList ( k ) ;
46415: LD_ADDR_VAR 0 9
46419: PUSH
46420: LD_VAR 0 6
46424: PPUSH
46425: CALL_OW 478
46429: ST_TO_ADDR
// if not weapons then
46430: LD_VAR 0 9
46434: NOT
46435: IFFALSE 46439
// continue ;
46437: GO 46412
// if weapon in weapons then
46439: LD_VAR 0 8
46443: PUSH
46444: LD_VAR 0 9
46448: IN
46449: IFFALSE 46476
// begin result := [ i , weapon ] ;
46451: LD_ADDR_VAR 0 3
46455: PUSH
46456: LD_VAR 0 4
46460: PUSH
46461: LD_VAR 0 8
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: ST_TO_ADDR
// exit ;
46470: POP
46471: POP
46472: POP
46473: POP
46474: GO 46484
// end ; end ;
46476: GO 46412
46478: POP
46479: POP
// end ;
46480: GO 46298
46482: POP
46483: POP
// end ;
46484: LD_VAR 0 3
46488: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46489: LD_INT 0
46491: PPUSH
// if not side or side > 8 then
46492: LD_VAR 0 3
46496: NOT
46497: PUSH
46498: LD_VAR 0 3
46502: PUSH
46503: LD_INT 8
46505: GREATER
46506: OR
46507: IFFALSE 46511
// exit ;
46509: GO 46570
// if not range then
46511: LD_VAR 0 4
46515: NOT
46516: IFFALSE 46527
// range := - 12 ;
46518: LD_ADDR_VAR 0 4
46522: PUSH
46523: LD_INT 12
46525: NEG
46526: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46527: LD_VAR 0 1
46531: PPUSH
46532: LD_VAR 0 2
46536: PPUSH
46537: LD_VAR 0 3
46541: PPUSH
46542: LD_VAR 0 4
46546: PPUSH
46547: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46551: LD_VAR 0 1
46555: PPUSH
46556: LD_VAR 0 2
46560: PPUSH
46561: LD_VAR 0 3
46565: PPUSH
46566: CALL_OW 331
// end ;
46570: LD_VAR 0 5
46574: RET
// export function Video ( mode ) ; begin
46575: LD_INT 0
46577: PPUSH
// ingame_video = mode ;
46578: LD_ADDR_OWVAR 52
46582: PUSH
46583: LD_VAR 0 1
46587: ST_TO_ADDR
// interface_hidden = mode ;
46588: LD_ADDR_OWVAR 54
46592: PUSH
46593: LD_VAR 0 1
46597: ST_TO_ADDR
// end ;
46598: LD_VAR 0 2
46602: RET
// export function Join ( array , element ) ; begin
46603: LD_INT 0
46605: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46606: LD_ADDR_VAR 0 3
46610: PUSH
46611: LD_VAR 0 1
46615: PPUSH
46616: LD_VAR 0 1
46620: PUSH
46621: LD_INT 1
46623: PLUS
46624: PPUSH
46625: LD_VAR 0 2
46629: PPUSH
46630: CALL_OW 1
46634: ST_TO_ADDR
// end ;
46635: LD_VAR 0 3
46639: RET
// export function JoinUnion ( array , element ) ; begin
46640: LD_INT 0
46642: PPUSH
// result := array union element ;
46643: LD_ADDR_VAR 0 3
46647: PUSH
46648: LD_VAR 0 1
46652: PUSH
46653: LD_VAR 0 2
46657: UNION
46658: ST_TO_ADDR
// end ;
46659: LD_VAR 0 3
46663: RET
// export function GetBehemoths ( side ) ; begin
46664: LD_INT 0
46666: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
46667: LD_ADDR_VAR 0 2
46671: PUSH
46672: LD_INT 22
46674: PUSH
46675: LD_VAR 0 1
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 31
46686: PUSH
46687: LD_INT 25
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PPUSH
46698: CALL_OW 69
46702: ST_TO_ADDR
// end ;
46703: LD_VAR 0 2
46707: RET
// export function Shuffle ( array ) ; var i , index ; begin
46708: LD_INT 0
46710: PPUSH
46711: PPUSH
46712: PPUSH
// result := [ ] ;
46713: LD_ADDR_VAR 0 2
46717: PUSH
46718: EMPTY
46719: ST_TO_ADDR
// if not array then
46720: LD_VAR 0 1
46724: NOT
46725: IFFALSE 46729
// exit ;
46727: GO 46828
// Randomize ;
46729: CALL_OW 10
// for i = array downto 1 do
46733: LD_ADDR_VAR 0 3
46737: PUSH
46738: DOUBLE
46739: LD_VAR 0 1
46743: INC
46744: ST_TO_ADDR
46745: LD_INT 1
46747: PUSH
46748: FOR_DOWNTO
46749: IFFALSE 46826
// begin index := rand ( 1 , array ) ;
46751: LD_ADDR_VAR 0 4
46755: PUSH
46756: LD_INT 1
46758: PPUSH
46759: LD_VAR 0 1
46763: PPUSH
46764: CALL_OW 12
46768: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46769: LD_ADDR_VAR 0 2
46773: PUSH
46774: LD_VAR 0 2
46778: PPUSH
46779: LD_VAR 0 2
46783: PUSH
46784: LD_INT 1
46786: PLUS
46787: PPUSH
46788: LD_VAR 0 1
46792: PUSH
46793: LD_VAR 0 4
46797: ARRAY
46798: PPUSH
46799: CALL_OW 2
46803: ST_TO_ADDR
// array := Delete ( array , index ) ;
46804: LD_ADDR_VAR 0 1
46808: PUSH
46809: LD_VAR 0 1
46813: PPUSH
46814: LD_VAR 0 4
46818: PPUSH
46819: CALL_OW 3
46823: ST_TO_ADDR
// end ;
46824: GO 46748
46826: POP
46827: POP
// end ;
46828: LD_VAR 0 2
46832: RET
// export function GetBaseMaterials ( base ) ; begin
46833: LD_INT 0
46835: PPUSH
// result := [ 0 , 0 , 0 ] ;
46836: LD_ADDR_VAR 0 2
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: LIST
46854: ST_TO_ADDR
// if not base then
46855: LD_VAR 0 1
46859: NOT
46860: IFFALSE 46864
// exit ;
46862: GO 46913
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46864: LD_ADDR_VAR 0 2
46868: PUSH
46869: LD_VAR 0 1
46873: PPUSH
46874: LD_INT 1
46876: PPUSH
46877: CALL_OW 275
46881: PUSH
46882: LD_VAR 0 1
46886: PPUSH
46887: LD_INT 2
46889: PPUSH
46890: CALL_OW 275
46894: PUSH
46895: LD_VAR 0 1
46899: PPUSH
46900: LD_INT 3
46902: PPUSH
46903: CALL_OW 275
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: LIST
46912: ST_TO_ADDR
// end ;
46913: LD_VAR 0 2
46917: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46918: LD_INT 0
46920: PPUSH
46921: PPUSH
// result := array ;
46922: LD_ADDR_VAR 0 3
46926: PUSH
46927: LD_VAR 0 1
46931: ST_TO_ADDR
// if size >= result then
46932: LD_VAR 0 2
46936: PUSH
46937: LD_VAR 0 3
46941: GREATEREQUAL
46942: IFFALSE 46946
// exit ;
46944: GO 46996
// if size then
46946: LD_VAR 0 2
46950: IFFALSE 46996
// for i := array downto size do
46952: LD_ADDR_VAR 0 4
46956: PUSH
46957: DOUBLE
46958: LD_VAR 0 1
46962: INC
46963: ST_TO_ADDR
46964: LD_VAR 0 2
46968: PUSH
46969: FOR_DOWNTO
46970: IFFALSE 46994
// result := Delete ( result , result ) ;
46972: LD_ADDR_VAR 0 3
46976: PUSH
46977: LD_VAR 0 3
46981: PPUSH
46982: LD_VAR 0 3
46986: PPUSH
46987: CALL_OW 3
46991: ST_TO_ADDR
46992: GO 46969
46994: POP
46995: POP
// end ;
46996: LD_VAR 0 3
47000: RET
// export function ComExit ( unit ) ; var tmp ; begin
47001: LD_INT 0
47003: PPUSH
47004: PPUSH
// if not IsInUnit ( unit ) then
47005: LD_VAR 0 1
47009: PPUSH
47010: CALL_OW 310
47014: NOT
47015: IFFALSE 47019
// exit ;
47017: GO 47079
// tmp := IsInUnit ( unit ) ;
47019: LD_ADDR_VAR 0 3
47023: PUSH
47024: LD_VAR 0 1
47028: PPUSH
47029: CALL_OW 310
47033: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47034: LD_VAR 0 3
47038: PPUSH
47039: CALL_OW 247
47043: PUSH
47044: LD_INT 2
47046: EQUAL
47047: IFFALSE 47060
// ComExitVehicle ( unit ) else
47049: LD_VAR 0 1
47053: PPUSH
47054: CALL_OW 121
47058: GO 47069
// ComExitBuilding ( unit ) ;
47060: LD_VAR 0 1
47064: PPUSH
47065: CALL_OW 122
// result := tmp ;
47069: LD_ADDR_VAR 0 2
47073: PUSH
47074: LD_VAR 0 3
47078: ST_TO_ADDR
// end ;
47079: LD_VAR 0 2
47083: RET
// export function ComExitAll ( units ) ; var i ; begin
47084: LD_INT 0
47086: PPUSH
47087: PPUSH
// if not units then
47088: LD_VAR 0 1
47092: NOT
47093: IFFALSE 47097
// exit ;
47095: GO 47123
// for i in units do
47097: LD_ADDR_VAR 0 3
47101: PUSH
47102: LD_VAR 0 1
47106: PUSH
47107: FOR_IN
47108: IFFALSE 47121
// ComExit ( i ) ;
47110: LD_VAR 0 3
47114: PPUSH
47115: CALL 47001 0 1
47119: GO 47107
47121: POP
47122: POP
// end ;
47123: LD_VAR 0 2
47127: RET
// export function ResetHc ; begin
47128: LD_INT 0
47130: PPUSH
// InitHc ;
47131: CALL_OW 19
// hc_importance := 0 ;
47135: LD_ADDR_OWVAR 32
47139: PUSH
47140: LD_INT 0
47142: ST_TO_ADDR
// end ;
47143: LD_VAR 0 1
47147: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47148: LD_INT 0
47150: PPUSH
47151: PPUSH
47152: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47153: LD_ADDR_VAR 0 6
47157: PUSH
47158: LD_VAR 0 1
47162: PUSH
47163: LD_VAR 0 3
47167: PLUS
47168: PUSH
47169: LD_INT 2
47171: DIV
47172: ST_TO_ADDR
// if _x < 0 then
47173: LD_VAR 0 6
47177: PUSH
47178: LD_INT 0
47180: LESS
47181: IFFALSE 47198
// _x := _x * - 1 ;
47183: LD_ADDR_VAR 0 6
47187: PUSH
47188: LD_VAR 0 6
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: MUL
47197: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47198: LD_ADDR_VAR 0 7
47202: PUSH
47203: LD_VAR 0 2
47207: PUSH
47208: LD_VAR 0 4
47212: PLUS
47213: PUSH
47214: LD_INT 2
47216: DIV
47217: ST_TO_ADDR
// if _y < 0 then
47218: LD_VAR 0 7
47222: PUSH
47223: LD_INT 0
47225: LESS
47226: IFFALSE 47243
// _y := _y * - 1 ;
47228: LD_ADDR_VAR 0 7
47232: PUSH
47233: LD_VAR 0 7
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: MUL
47242: ST_TO_ADDR
// result := [ _x , _y ] ;
47243: LD_ADDR_VAR 0 5
47247: PUSH
47248: LD_VAR 0 6
47252: PUSH
47253: LD_VAR 0 7
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: ST_TO_ADDR
// end ;
47262: LD_VAR 0 5
47266: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47267: LD_INT 0
47269: PPUSH
47270: PPUSH
47271: PPUSH
47272: PPUSH
// task := GetTaskList ( unit ) ;
47273: LD_ADDR_VAR 0 7
47277: PUSH
47278: LD_VAR 0 1
47282: PPUSH
47283: CALL_OW 437
47287: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47288: LD_VAR 0 7
47292: NOT
47293: PUSH
47294: LD_VAR 0 1
47298: PPUSH
47299: LD_VAR 0 2
47303: PPUSH
47304: CALL_OW 308
47308: NOT
47309: AND
47310: IFFALSE 47314
// exit ;
47312: GO 47432
// if IsInArea ( unit , area ) then
47314: LD_VAR 0 1
47318: PPUSH
47319: LD_VAR 0 2
47323: PPUSH
47324: CALL_OW 308
47328: IFFALSE 47346
// begin ComMoveToArea ( unit , goAway ) ;
47330: LD_VAR 0 1
47334: PPUSH
47335: LD_VAR 0 3
47339: PPUSH
47340: CALL_OW 113
// exit ;
47344: GO 47432
// end ; if task [ 1 ] [ 1 ] <> M then
47346: LD_VAR 0 7
47350: PUSH
47351: LD_INT 1
47353: ARRAY
47354: PUSH
47355: LD_INT 1
47357: ARRAY
47358: PUSH
47359: LD_STRING M
47361: NONEQUAL
47362: IFFALSE 47366
// exit ;
47364: GO 47432
// x := task [ 1 ] [ 2 ] ;
47366: LD_ADDR_VAR 0 5
47370: PUSH
47371: LD_VAR 0 7
47375: PUSH
47376: LD_INT 1
47378: ARRAY
47379: PUSH
47380: LD_INT 2
47382: ARRAY
47383: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47384: LD_ADDR_VAR 0 6
47388: PUSH
47389: LD_VAR 0 7
47393: PUSH
47394: LD_INT 1
47396: ARRAY
47397: PUSH
47398: LD_INT 3
47400: ARRAY
47401: ST_TO_ADDR
// if InArea ( x , y , area ) then
47402: LD_VAR 0 5
47406: PPUSH
47407: LD_VAR 0 6
47411: PPUSH
47412: LD_VAR 0 2
47416: PPUSH
47417: CALL_OW 309
47421: IFFALSE 47432
// ComStop ( unit ) ;
47423: LD_VAR 0 1
47427: PPUSH
47428: CALL_OW 141
// end ;
47432: LD_VAR 0 4
47436: RET
// export function Abs ( value ) ; begin
47437: LD_INT 0
47439: PPUSH
// result := value ;
47440: LD_ADDR_VAR 0 2
47444: PUSH
47445: LD_VAR 0 1
47449: ST_TO_ADDR
// if value < 0 then
47450: LD_VAR 0 1
47454: PUSH
47455: LD_INT 0
47457: LESS
47458: IFFALSE 47475
// result := value * - 1 ;
47460: LD_ADDR_VAR 0 2
47464: PUSH
47465: LD_VAR 0 1
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: MUL
47474: ST_TO_ADDR
// end ;
47475: LD_VAR 0 2
47479: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47480: LD_INT 0
47482: PPUSH
47483: PPUSH
47484: PPUSH
47485: PPUSH
47486: PPUSH
47487: PPUSH
47488: PPUSH
47489: PPUSH
// if not unit or not building then
47490: LD_VAR 0 1
47494: NOT
47495: PUSH
47496: LD_VAR 0 2
47500: NOT
47501: OR
47502: IFFALSE 47506
// exit ;
47504: GO 47732
// x := GetX ( building ) ;
47506: LD_ADDR_VAR 0 4
47510: PUSH
47511: LD_VAR 0 2
47515: PPUSH
47516: CALL_OW 250
47520: ST_TO_ADDR
// y := GetY ( building ) ;
47521: LD_ADDR_VAR 0 6
47525: PUSH
47526: LD_VAR 0 2
47530: PPUSH
47531: CALL_OW 251
47535: ST_TO_ADDR
// d := GetDir ( building ) ;
47536: LD_ADDR_VAR 0 8
47540: PUSH
47541: LD_VAR 0 2
47545: PPUSH
47546: CALL_OW 254
47550: ST_TO_ADDR
// r := 4 ;
47551: LD_ADDR_VAR 0 9
47555: PUSH
47556: LD_INT 4
47558: ST_TO_ADDR
// for i := 1 to 5 do
47559: LD_ADDR_VAR 0 10
47563: PUSH
47564: DOUBLE
47565: LD_INT 1
47567: DEC
47568: ST_TO_ADDR
47569: LD_INT 5
47571: PUSH
47572: FOR_TO
47573: IFFALSE 47730
// begin _x := ShiftX ( x , d , r + i ) ;
47575: LD_ADDR_VAR 0 5
47579: PUSH
47580: LD_VAR 0 4
47584: PPUSH
47585: LD_VAR 0 8
47589: PPUSH
47590: LD_VAR 0 9
47594: PUSH
47595: LD_VAR 0 10
47599: PLUS
47600: PPUSH
47601: CALL_OW 272
47605: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47606: LD_ADDR_VAR 0 7
47610: PUSH
47611: LD_VAR 0 6
47615: PPUSH
47616: LD_VAR 0 8
47620: PPUSH
47621: LD_VAR 0 9
47625: PUSH
47626: LD_VAR 0 10
47630: PLUS
47631: PPUSH
47632: CALL_OW 273
47636: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47637: LD_VAR 0 5
47641: PPUSH
47642: LD_VAR 0 7
47646: PPUSH
47647: CALL_OW 488
47651: PUSH
47652: LD_VAR 0 5
47656: PPUSH
47657: LD_VAR 0 7
47661: PPUSH
47662: CALL_OW 428
47666: PPUSH
47667: CALL_OW 247
47671: PUSH
47672: LD_INT 3
47674: PUSH
47675: LD_INT 2
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: IN
47682: NOT
47683: AND
47684: IFFALSE 47728
// begin ComMoveXY ( unit , _x , _y ) ;
47686: LD_VAR 0 1
47690: PPUSH
47691: LD_VAR 0 5
47695: PPUSH
47696: LD_VAR 0 7
47700: PPUSH
47701: CALL_OW 111
// result := [ _x , _y ] ;
47705: LD_ADDR_VAR 0 3
47709: PUSH
47710: LD_VAR 0 5
47714: PUSH
47715: LD_VAR 0 7
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: ST_TO_ADDR
// exit ;
47724: POP
47725: POP
47726: GO 47732
// end ; end ;
47728: GO 47572
47730: POP
47731: POP
// end ;
47732: LD_VAR 0 3
47736: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47737: LD_INT 0
47739: PPUSH
47740: PPUSH
47741: PPUSH
// result := 0 ;
47742: LD_ADDR_VAR 0 3
47746: PUSH
47747: LD_INT 0
47749: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47750: LD_VAR 0 1
47754: PUSH
47755: LD_INT 0
47757: LESS
47758: PUSH
47759: LD_VAR 0 1
47763: PUSH
47764: LD_INT 8
47766: GREATER
47767: OR
47768: PUSH
47769: LD_VAR 0 2
47773: PUSH
47774: LD_INT 0
47776: LESS
47777: OR
47778: PUSH
47779: LD_VAR 0 2
47783: PUSH
47784: LD_INT 8
47786: GREATER
47787: OR
47788: IFFALSE 47792
// exit ;
47790: GO 47867
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47792: LD_ADDR_VAR 0 4
47796: PUSH
47797: LD_INT 22
47799: PUSH
47800: LD_VAR 0 2
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PPUSH
47809: CALL_OW 69
47813: PUSH
47814: FOR_IN
47815: IFFALSE 47865
// begin un := UnitShoot ( i ) ;
47817: LD_ADDR_VAR 0 5
47821: PUSH
47822: LD_VAR 0 4
47826: PPUSH
47827: CALL_OW 504
47831: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47832: LD_VAR 0 5
47836: PPUSH
47837: CALL_OW 255
47841: PUSH
47842: LD_VAR 0 1
47846: EQUAL
47847: IFFALSE 47863
// begin result := un ;
47849: LD_ADDR_VAR 0 3
47853: PUSH
47854: LD_VAR 0 5
47858: ST_TO_ADDR
// exit ;
47859: POP
47860: POP
47861: GO 47867
// end ; end ;
47863: GO 47814
47865: POP
47866: POP
// end ;
47867: LD_VAR 0 3
47871: RET
// export function GetCargoBay ( units ) ; begin
47872: LD_INT 0
47874: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47875: LD_ADDR_VAR 0 2
47879: PUSH
47880: LD_VAR 0 1
47884: PPUSH
47885: LD_INT 2
47887: PUSH
47888: LD_INT 34
47890: PUSH
47891: LD_INT 12
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 34
47900: PUSH
47901: LD_INT 51
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 34
47910: PUSH
47911: LD_INT 32
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 34
47920: PUSH
47921: LD_EXP 63
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: PPUSH
47937: CALL_OW 72
47941: ST_TO_ADDR
// end ;
47942: LD_VAR 0 2
47946: RET
// export function Negate ( value ) ; begin
47947: LD_INT 0
47949: PPUSH
// result := not value ;
47950: LD_ADDR_VAR 0 2
47954: PUSH
47955: LD_VAR 0 1
47959: NOT
47960: ST_TO_ADDR
// end ;
47961: LD_VAR 0 2
47965: RET
// export function Inc ( value ) ; begin
47966: LD_INT 0
47968: PPUSH
// result := value + 1 ;
47969: LD_ADDR_VAR 0 2
47973: PUSH
47974: LD_VAR 0 1
47978: PUSH
47979: LD_INT 1
47981: PLUS
47982: ST_TO_ADDR
// end ;
47983: LD_VAR 0 2
47987: RET
// export function Dec ( value ) ; begin
47988: LD_INT 0
47990: PPUSH
// result := value - 1 ;
47991: LD_ADDR_VAR 0 2
47995: PUSH
47996: LD_VAR 0 1
48000: PUSH
48001: LD_INT 1
48003: MINUS
48004: ST_TO_ADDR
// end ;
48005: LD_VAR 0 2
48009: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48010: LD_INT 0
48012: PPUSH
48013: PPUSH
48014: PPUSH
48015: PPUSH
48016: PPUSH
48017: PPUSH
48018: PPUSH
48019: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48020: LD_VAR 0 1
48024: PPUSH
48025: LD_VAR 0 2
48029: PPUSH
48030: CALL_OW 488
48034: NOT
48035: PUSH
48036: LD_VAR 0 3
48040: PPUSH
48041: LD_VAR 0 4
48045: PPUSH
48046: CALL_OW 488
48050: NOT
48051: OR
48052: IFFALSE 48065
// begin result := - 1 ;
48054: LD_ADDR_VAR 0 5
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: ST_TO_ADDR
// exit ;
48063: GO 48300
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48065: LD_ADDR_VAR 0 12
48069: PUSH
48070: LD_VAR 0 1
48074: PPUSH
48075: LD_VAR 0 2
48079: PPUSH
48080: LD_VAR 0 3
48084: PPUSH
48085: LD_VAR 0 4
48089: PPUSH
48090: CALL 47148 0 4
48094: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48095: LD_ADDR_VAR 0 11
48099: PUSH
48100: LD_VAR 0 1
48104: PPUSH
48105: LD_VAR 0 2
48109: PPUSH
48110: LD_VAR 0 12
48114: PUSH
48115: LD_INT 1
48117: ARRAY
48118: PPUSH
48119: LD_VAR 0 12
48123: PUSH
48124: LD_INT 2
48126: ARRAY
48127: PPUSH
48128: CALL_OW 298
48132: ST_TO_ADDR
// distance := 9999 ;
48133: LD_ADDR_VAR 0 10
48137: PUSH
48138: LD_INT 9999
48140: ST_TO_ADDR
// for i := 0 to 5 do
48141: LD_ADDR_VAR 0 6
48145: PUSH
48146: DOUBLE
48147: LD_INT 0
48149: DEC
48150: ST_TO_ADDR
48151: LD_INT 5
48153: PUSH
48154: FOR_TO
48155: IFFALSE 48298
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48157: LD_ADDR_VAR 0 7
48161: PUSH
48162: LD_VAR 0 1
48166: PPUSH
48167: LD_VAR 0 6
48171: PPUSH
48172: LD_VAR 0 11
48176: PPUSH
48177: CALL_OW 272
48181: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48182: LD_ADDR_VAR 0 8
48186: PUSH
48187: LD_VAR 0 2
48191: PPUSH
48192: LD_VAR 0 6
48196: PPUSH
48197: LD_VAR 0 11
48201: PPUSH
48202: CALL_OW 273
48206: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48207: LD_VAR 0 7
48211: PPUSH
48212: LD_VAR 0 8
48216: PPUSH
48217: CALL_OW 488
48221: NOT
48222: IFFALSE 48226
// continue ;
48224: GO 48154
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48226: LD_ADDR_VAR 0 9
48230: PUSH
48231: LD_VAR 0 12
48235: PUSH
48236: LD_INT 1
48238: ARRAY
48239: PPUSH
48240: LD_VAR 0 12
48244: PUSH
48245: LD_INT 2
48247: ARRAY
48248: PPUSH
48249: LD_VAR 0 7
48253: PPUSH
48254: LD_VAR 0 8
48258: PPUSH
48259: CALL_OW 298
48263: ST_TO_ADDR
// if tmp < distance then
48264: LD_VAR 0 9
48268: PUSH
48269: LD_VAR 0 10
48273: LESS
48274: IFFALSE 48296
// begin result := i ;
48276: LD_ADDR_VAR 0 5
48280: PUSH
48281: LD_VAR 0 6
48285: ST_TO_ADDR
// distance := tmp ;
48286: LD_ADDR_VAR 0 10
48290: PUSH
48291: LD_VAR 0 9
48295: ST_TO_ADDR
// end ; end ;
48296: GO 48154
48298: POP
48299: POP
// end ;
48300: LD_VAR 0 5
48304: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48305: LD_INT 0
48307: PPUSH
48308: PPUSH
// if not driver or not IsInUnit ( driver ) then
48309: LD_VAR 0 1
48313: NOT
48314: PUSH
48315: LD_VAR 0 1
48319: PPUSH
48320: CALL_OW 310
48324: NOT
48325: OR
48326: IFFALSE 48330
// exit ;
48328: GO 48420
// vehicle := IsInUnit ( driver ) ;
48330: LD_ADDR_VAR 0 3
48334: PUSH
48335: LD_VAR 0 1
48339: PPUSH
48340: CALL_OW 310
48344: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48345: LD_VAR 0 1
48349: PPUSH
48350: LD_STRING \
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: LD_INT 0
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: PUSH
48380: LD_STRING E
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_VAR 0 3
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 0
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PPUSH
48416: CALL_OW 446
// end ;
48420: LD_VAR 0 2
48424: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48425: LD_INT 0
48427: PPUSH
48428: PPUSH
// if not driver or not IsInUnit ( driver ) then
48429: LD_VAR 0 1
48433: NOT
48434: PUSH
48435: LD_VAR 0 1
48439: PPUSH
48440: CALL_OW 310
48444: NOT
48445: OR
48446: IFFALSE 48450
// exit ;
48448: GO 48540
// vehicle := IsInUnit ( driver ) ;
48450: LD_ADDR_VAR 0 3
48454: PUSH
48455: LD_VAR 0 1
48459: PPUSH
48460: CALL_OW 310
48464: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48465: LD_VAR 0 1
48469: PPUSH
48470: LD_STRING \
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: PUSH
48500: LD_STRING E
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_VAR 0 3
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PPUSH
48536: CALL_OW 447
// end ;
48540: LD_VAR 0 2
48544: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48545: LD_INT 0
48547: PPUSH
48548: PPUSH
48549: PPUSH
// tmp := [ ] ;
48550: LD_ADDR_VAR 0 5
48554: PUSH
48555: EMPTY
48556: ST_TO_ADDR
// for i in units do
48557: LD_ADDR_VAR 0 4
48561: PUSH
48562: LD_VAR 0 1
48566: PUSH
48567: FOR_IN
48568: IFFALSE 48606
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48570: LD_ADDR_VAR 0 5
48574: PUSH
48575: LD_VAR 0 5
48579: PPUSH
48580: LD_VAR 0 5
48584: PUSH
48585: LD_INT 1
48587: PLUS
48588: PPUSH
48589: LD_VAR 0 4
48593: PPUSH
48594: CALL_OW 256
48598: PPUSH
48599: CALL_OW 2
48603: ST_TO_ADDR
48604: GO 48567
48606: POP
48607: POP
// if not tmp then
48608: LD_VAR 0 5
48612: NOT
48613: IFFALSE 48617
// exit ;
48615: GO 48665
// if asc then
48617: LD_VAR 0 2
48621: IFFALSE 48645
// result := SortListByListAsc ( units , tmp ) else
48623: LD_ADDR_VAR 0 3
48627: PUSH
48628: LD_VAR 0 1
48632: PPUSH
48633: LD_VAR 0 5
48637: PPUSH
48638: CALL_OW 76
48642: ST_TO_ADDR
48643: GO 48665
// result := SortListByListDesc ( units , tmp ) ;
48645: LD_ADDR_VAR 0 3
48649: PUSH
48650: LD_VAR 0 1
48654: PPUSH
48655: LD_VAR 0 5
48659: PPUSH
48660: CALL_OW 77
48664: ST_TO_ADDR
// end ;
48665: LD_VAR 0 3
48669: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48670: LD_INT 0
48672: PPUSH
48673: PPUSH
// task := GetTaskList ( mech ) ;
48674: LD_ADDR_VAR 0 4
48678: PUSH
48679: LD_VAR 0 1
48683: PPUSH
48684: CALL_OW 437
48688: ST_TO_ADDR
// if not task then
48689: LD_VAR 0 4
48693: NOT
48694: IFFALSE 48698
// exit ;
48696: GO 48740
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48698: LD_ADDR_VAR 0 3
48702: PUSH
48703: LD_VAR 0 4
48707: PUSH
48708: LD_INT 1
48710: ARRAY
48711: PUSH
48712: LD_INT 1
48714: ARRAY
48715: PUSH
48716: LD_STRING r
48718: EQUAL
48719: PUSH
48720: LD_VAR 0 4
48724: PUSH
48725: LD_INT 1
48727: ARRAY
48728: PUSH
48729: LD_INT 4
48731: ARRAY
48732: PUSH
48733: LD_VAR 0 2
48737: EQUAL
48738: AND
48739: ST_TO_ADDR
// end ;
48740: LD_VAR 0 3
48744: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48745: LD_INT 0
48747: PPUSH
// SetDir ( unit , d ) ;
48748: LD_VAR 0 1
48752: PPUSH
48753: LD_VAR 0 4
48757: PPUSH
48758: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48762: LD_VAR 0 1
48766: PPUSH
48767: LD_VAR 0 2
48771: PPUSH
48772: LD_VAR 0 3
48776: PPUSH
48777: LD_VAR 0 5
48781: PPUSH
48782: CALL_OW 48
// end ;
48786: LD_VAR 0 6
48790: RET
// export function ToNaturalNumber ( number ) ; begin
48791: LD_INT 0
48793: PPUSH
// result := number div 1 ;
48794: LD_ADDR_VAR 0 2
48798: PUSH
48799: LD_VAR 0 1
48803: PUSH
48804: LD_INT 1
48806: DIV
48807: ST_TO_ADDR
// if number < 0 then
48808: LD_VAR 0 1
48812: PUSH
48813: LD_INT 0
48815: LESS
48816: IFFALSE 48826
// result := 0 ;
48818: LD_ADDR_VAR 0 2
48822: PUSH
48823: LD_INT 0
48825: ST_TO_ADDR
// end ;
48826: LD_VAR 0 2
48830: RET
// export function SortByClass ( units , class ) ; var un ; begin
48831: LD_INT 0
48833: PPUSH
48834: PPUSH
// if not units or not class then
48835: LD_VAR 0 1
48839: NOT
48840: PUSH
48841: LD_VAR 0 2
48845: NOT
48846: OR
48847: IFFALSE 48851
// exit ;
48849: GO 48946
// result := [ ] ;
48851: LD_ADDR_VAR 0 3
48855: PUSH
48856: EMPTY
48857: ST_TO_ADDR
// for un in units do
48858: LD_ADDR_VAR 0 4
48862: PUSH
48863: LD_VAR 0 1
48867: PUSH
48868: FOR_IN
48869: IFFALSE 48944
// if GetClass ( un ) = class then
48871: LD_VAR 0 4
48875: PPUSH
48876: CALL_OW 257
48880: PUSH
48881: LD_VAR 0 2
48885: EQUAL
48886: IFFALSE 48913
// result := Insert ( result , 1 , un ) else
48888: LD_ADDR_VAR 0 3
48892: PUSH
48893: LD_VAR 0 3
48897: PPUSH
48898: LD_INT 1
48900: PPUSH
48901: LD_VAR 0 4
48905: PPUSH
48906: CALL_OW 2
48910: ST_TO_ADDR
48911: GO 48942
// result := Replace ( result , result + 1 , un ) ;
48913: LD_ADDR_VAR 0 3
48917: PUSH
48918: LD_VAR 0 3
48922: PPUSH
48923: LD_VAR 0 3
48927: PUSH
48928: LD_INT 1
48930: PLUS
48931: PPUSH
48932: LD_VAR 0 4
48936: PPUSH
48937: CALL_OW 1
48941: ST_TO_ADDR
48942: GO 48868
48944: POP
48945: POP
// end ;
48946: LD_VAR 0 3
48950: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48951: LD_INT 0
48953: PPUSH
48954: PPUSH
48955: PPUSH
48956: PPUSH
48957: PPUSH
48958: PPUSH
48959: PPUSH
// result := [ ] ;
48960: LD_ADDR_VAR 0 4
48964: PUSH
48965: EMPTY
48966: ST_TO_ADDR
// if x - r < 0 then
48967: LD_VAR 0 1
48971: PUSH
48972: LD_VAR 0 3
48976: MINUS
48977: PUSH
48978: LD_INT 0
48980: LESS
48981: IFFALSE 48993
// min_x := 0 else
48983: LD_ADDR_VAR 0 8
48987: PUSH
48988: LD_INT 0
48990: ST_TO_ADDR
48991: GO 49009
// min_x := x - r ;
48993: LD_ADDR_VAR 0 8
48997: PUSH
48998: LD_VAR 0 1
49002: PUSH
49003: LD_VAR 0 3
49007: MINUS
49008: ST_TO_ADDR
// if y - r < 0 then
49009: LD_VAR 0 2
49013: PUSH
49014: LD_VAR 0 3
49018: MINUS
49019: PUSH
49020: LD_INT 0
49022: LESS
49023: IFFALSE 49035
// min_y := 0 else
49025: LD_ADDR_VAR 0 7
49029: PUSH
49030: LD_INT 0
49032: ST_TO_ADDR
49033: GO 49051
// min_y := y - r ;
49035: LD_ADDR_VAR 0 7
49039: PUSH
49040: LD_VAR 0 2
49044: PUSH
49045: LD_VAR 0 3
49049: MINUS
49050: ST_TO_ADDR
// max_x := x + r ;
49051: LD_ADDR_VAR 0 9
49055: PUSH
49056: LD_VAR 0 1
49060: PUSH
49061: LD_VAR 0 3
49065: PLUS
49066: ST_TO_ADDR
// max_y := y + r ;
49067: LD_ADDR_VAR 0 10
49071: PUSH
49072: LD_VAR 0 2
49076: PUSH
49077: LD_VAR 0 3
49081: PLUS
49082: ST_TO_ADDR
// for _x = min_x to max_x do
49083: LD_ADDR_VAR 0 5
49087: PUSH
49088: DOUBLE
49089: LD_VAR 0 8
49093: DEC
49094: ST_TO_ADDR
49095: LD_VAR 0 9
49099: PUSH
49100: FOR_TO
49101: IFFALSE 49202
// for _y = min_y to max_y do
49103: LD_ADDR_VAR 0 6
49107: PUSH
49108: DOUBLE
49109: LD_VAR 0 7
49113: DEC
49114: ST_TO_ADDR
49115: LD_VAR 0 10
49119: PUSH
49120: FOR_TO
49121: IFFALSE 49198
// begin if not ValidHex ( _x , _y ) then
49123: LD_VAR 0 5
49127: PPUSH
49128: LD_VAR 0 6
49132: PPUSH
49133: CALL_OW 488
49137: NOT
49138: IFFALSE 49142
// continue ;
49140: GO 49120
// if GetResourceTypeXY ( _x , _y ) then
49142: LD_VAR 0 5
49146: PPUSH
49147: LD_VAR 0 6
49151: PPUSH
49152: CALL_OW 283
49156: IFFALSE 49196
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49158: LD_ADDR_VAR 0 4
49162: PUSH
49163: LD_VAR 0 4
49167: PPUSH
49168: LD_VAR 0 4
49172: PUSH
49173: LD_INT 1
49175: PLUS
49176: PPUSH
49177: LD_VAR 0 5
49181: PUSH
49182: LD_VAR 0 6
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PPUSH
49191: CALL_OW 1
49195: ST_TO_ADDR
// end ;
49196: GO 49120
49198: POP
49199: POP
49200: GO 49100
49202: POP
49203: POP
// end ;
49204: LD_VAR 0 4
49208: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49209: LD_INT 0
49211: PPUSH
49212: PPUSH
49213: PPUSH
49214: PPUSH
49215: PPUSH
49216: PPUSH
49217: PPUSH
49218: PPUSH
// if not units then
49219: LD_VAR 0 1
49223: NOT
49224: IFFALSE 49228
// exit ;
49226: GO 49754
// result := UnitFilter ( units , [ f_ok ] ) ;
49228: LD_ADDR_VAR 0 3
49232: PUSH
49233: LD_VAR 0 1
49237: PPUSH
49238: LD_INT 50
49240: PUSH
49241: EMPTY
49242: LIST
49243: PPUSH
49244: CALL_OW 72
49248: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49249: LD_ADDR_VAR 0 8
49253: PUSH
49254: LD_VAR 0 1
49258: PUSH
49259: LD_INT 1
49261: ARRAY
49262: PPUSH
49263: CALL_OW 255
49267: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49268: LD_ADDR_VAR 0 10
49272: PUSH
49273: LD_INT 29
49275: PUSH
49276: LD_EXP 66
49280: PUSH
49281: LD_INT 49
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
// if not result then
49289: LD_VAR 0 3
49293: NOT
49294: IFFALSE 49298
// exit ;
49296: GO 49754
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49298: LD_ADDR_VAR 0 5
49302: PUSH
49303: LD_INT 81
49305: PUSH
49306: LD_VAR 0 8
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PPUSH
49315: CALL_OW 69
49319: ST_TO_ADDR
// for i in result do
49320: LD_ADDR_VAR 0 4
49324: PUSH
49325: LD_VAR 0 3
49329: PUSH
49330: FOR_IN
49331: IFFALSE 49752
// begin tag := GetTag ( i ) + 1 ;
49333: LD_ADDR_VAR 0 9
49337: PUSH
49338: LD_VAR 0 4
49342: PPUSH
49343: CALL_OW 110
49347: PUSH
49348: LD_INT 1
49350: PLUS
49351: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
49352: LD_ADDR_VAR 0 7
49356: PUSH
49357: LD_VAR 0 4
49361: PPUSH
49362: CALL_OW 250
49366: PPUSH
49367: LD_VAR 0 4
49371: PPUSH
49372: CALL_OW 251
49376: PPUSH
49377: LD_INT 6
49379: PPUSH
49380: CALL 48951 0 3
49384: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
49385: LD_VAR 0 4
49389: PPUSH
49390: CALL_OW 247
49394: PUSH
49395: LD_INT 2
49397: EQUAL
49398: PUSH
49399: LD_VAR 0 7
49403: AND
49404: PUSH
49405: LD_VAR 0 4
49409: PPUSH
49410: CALL_OW 264
49414: PUSH
49415: LD_VAR 0 10
49419: IN
49420: NOT
49421: AND
49422: IFFALSE 49461
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49424: LD_VAR 0 4
49428: PPUSH
49429: LD_VAR 0 7
49433: PUSH
49434: LD_INT 1
49436: ARRAY
49437: PUSH
49438: LD_INT 1
49440: ARRAY
49441: PPUSH
49442: LD_VAR 0 7
49446: PUSH
49447: LD_INT 1
49449: ARRAY
49450: PUSH
49451: LD_INT 2
49453: ARRAY
49454: PPUSH
49455: CALL_OW 116
49459: GO 49750
// if path > tag then
49461: LD_VAR 0 2
49465: PUSH
49466: LD_VAR 0 9
49470: GREATER
49471: IFFALSE 49679
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49473: LD_ADDR_VAR 0 6
49477: PUSH
49478: LD_VAR 0 5
49482: PPUSH
49483: LD_INT 91
49485: PUSH
49486: LD_VAR 0 4
49490: PUSH
49491: LD_INT 8
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: LIST
49498: PPUSH
49499: CALL_OW 72
49503: ST_TO_ADDR
// if nearEnemy then
49504: LD_VAR 0 6
49508: IFFALSE 49577
// begin if GetWeapon ( i ) = ru_time_lapser then
49510: LD_VAR 0 4
49514: PPUSH
49515: CALL_OW 264
49519: PUSH
49520: LD_INT 49
49522: EQUAL
49523: IFFALSE 49551
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49525: LD_VAR 0 4
49529: PPUSH
49530: LD_VAR 0 6
49534: PPUSH
49535: LD_VAR 0 4
49539: PPUSH
49540: CALL_OW 74
49544: PPUSH
49545: CALL_OW 112
49549: GO 49575
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49551: LD_VAR 0 4
49555: PPUSH
49556: LD_VAR 0 6
49560: PPUSH
49561: LD_VAR 0 4
49565: PPUSH
49566: CALL_OW 74
49570: PPUSH
49571: CALL_OW 115
// end else
49575: GO 49677
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49577: LD_VAR 0 4
49581: PPUSH
49582: LD_VAR 0 2
49586: PUSH
49587: LD_VAR 0 9
49591: ARRAY
49592: PUSH
49593: LD_INT 1
49595: ARRAY
49596: PPUSH
49597: LD_VAR 0 2
49601: PUSH
49602: LD_VAR 0 9
49606: ARRAY
49607: PUSH
49608: LD_INT 2
49610: ARRAY
49611: PPUSH
49612: CALL_OW 297
49616: PUSH
49617: LD_INT 6
49619: GREATER
49620: IFFALSE 49663
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49622: LD_VAR 0 4
49626: PPUSH
49627: LD_VAR 0 2
49631: PUSH
49632: LD_VAR 0 9
49636: ARRAY
49637: PUSH
49638: LD_INT 1
49640: ARRAY
49641: PPUSH
49642: LD_VAR 0 2
49646: PUSH
49647: LD_VAR 0 9
49651: ARRAY
49652: PUSH
49653: LD_INT 2
49655: ARRAY
49656: PPUSH
49657: CALL_OW 114
49661: GO 49677
// SetTag ( i , tag ) ;
49663: LD_VAR 0 4
49667: PPUSH
49668: LD_VAR 0 9
49672: PPUSH
49673: CALL_OW 109
// end else
49677: GO 49750
// if enemy then
49679: LD_VAR 0 5
49683: IFFALSE 49750
// begin if GetWeapon ( i ) = ru_time_lapser then
49685: LD_VAR 0 4
49689: PPUSH
49690: CALL_OW 264
49694: PUSH
49695: LD_INT 49
49697: EQUAL
49698: IFFALSE 49726
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49700: LD_VAR 0 4
49704: PPUSH
49705: LD_VAR 0 5
49709: PPUSH
49710: LD_VAR 0 4
49714: PPUSH
49715: CALL_OW 74
49719: PPUSH
49720: CALL_OW 112
49724: GO 49750
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49726: LD_VAR 0 4
49730: PPUSH
49731: LD_VAR 0 5
49735: PPUSH
49736: LD_VAR 0 4
49740: PPUSH
49741: CALL_OW 74
49745: PPUSH
49746: CALL_OW 115
// end ; end ;
49750: GO 49330
49752: POP
49753: POP
// end ;
49754: LD_VAR 0 3
49758: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49759: LD_INT 0
49761: PPUSH
49762: PPUSH
49763: PPUSH
// if not unit or IsInUnit ( unit ) then
49764: LD_VAR 0 1
49768: NOT
49769: PUSH
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 310
49779: OR
49780: IFFALSE 49784
// exit ;
49782: GO 49875
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49784: LD_ADDR_VAR 0 4
49788: PUSH
49789: LD_VAR 0 1
49793: PPUSH
49794: CALL_OW 250
49798: PPUSH
49799: LD_VAR 0 2
49803: PPUSH
49804: LD_INT 1
49806: PPUSH
49807: CALL_OW 272
49811: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49812: LD_ADDR_VAR 0 5
49816: PUSH
49817: LD_VAR 0 1
49821: PPUSH
49822: CALL_OW 251
49826: PPUSH
49827: LD_VAR 0 2
49831: PPUSH
49832: LD_INT 1
49834: PPUSH
49835: CALL_OW 273
49839: ST_TO_ADDR
// if ValidHex ( x , y ) then
49840: LD_VAR 0 4
49844: PPUSH
49845: LD_VAR 0 5
49849: PPUSH
49850: CALL_OW 488
49854: IFFALSE 49875
// ComTurnXY ( unit , x , y ) ;
49856: LD_VAR 0 1
49860: PPUSH
49861: LD_VAR 0 4
49865: PPUSH
49866: LD_VAR 0 5
49870: PPUSH
49871: CALL_OW 118
// end ;
49875: LD_VAR 0 3
49879: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49880: LD_INT 0
49882: PPUSH
49883: PPUSH
// result := false ;
49884: LD_ADDR_VAR 0 3
49888: PUSH
49889: LD_INT 0
49891: ST_TO_ADDR
// if not units then
49892: LD_VAR 0 2
49896: NOT
49897: IFFALSE 49901
// exit ;
49899: GO 49946
// for i in units do
49901: LD_ADDR_VAR 0 4
49905: PUSH
49906: LD_VAR 0 2
49910: PUSH
49911: FOR_IN
49912: IFFALSE 49944
// if See ( side , i ) then
49914: LD_VAR 0 1
49918: PPUSH
49919: LD_VAR 0 4
49923: PPUSH
49924: CALL_OW 292
49928: IFFALSE 49942
// begin result := true ;
49930: LD_ADDR_VAR 0 3
49934: PUSH
49935: LD_INT 1
49937: ST_TO_ADDR
// exit ;
49938: POP
49939: POP
49940: GO 49946
// end ;
49942: GO 49911
49944: POP
49945: POP
// end ;
49946: LD_VAR 0 3
49950: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49951: LD_INT 0
49953: PPUSH
49954: PPUSH
49955: PPUSH
49956: PPUSH
// if not unit or not points then
49957: LD_VAR 0 1
49961: NOT
49962: PUSH
49963: LD_VAR 0 2
49967: NOT
49968: OR
49969: IFFALSE 49973
// exit ;
49971: GO 50063
// dist := 99999 ;
49973: LD_ADDR_VAR 0 5
49977: PUSH
49978: LD_INT 99999
49980: ST_TO_ADDR
// for i in points do
49981: LD_ADDR_VAR 0 4
49985: PUSH
49986: LD_VAR 0 2
49990: PUSH
49991: FOR_IN
49992: IFFALSE 50061
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49994: LD_ADDR_VAR 0 6
49998: PUSH
49999: LD_VAR 0 1
50003: PPUSH
50004: LD_VAR 0 4
50008: PUSH
50009: LD_INT 1
50011: ARRAY
50012: PPUSH
50013: LD_VAR 0 4
50017: PUSH
50018: LD_INT 2
50020: ARRAY
50021: PPUSH
50022: CALL_OW 297
50026: ST_TO_ADDR
// if tmpDist < dist then
50027: LD_VAR 0 6
50031: PUSH
50032: LD_VAR 0 5
50036: LESS
50037: IFFALSE 50059
// begin result := i ;
50039: LD_ADDR_VAR 0 3
50043: PUSH
50044: LD_VAR 0 4
50048: ST_TO_ADDR
// dist := tmpDist ;
50049: LD_ADDR_VAR 0 5
50053: PUSH
50054: LD_VAR 0 6
50058: ST_TO_ADDR
// end ; end ;
50059: GO 49991
50061: POP
50062: POP
// end ;
50063: LD_VAR 0 3
50067: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50068: LD_INT 0
50070: PPUSH
// uc_side := side ;
50071: LD_ADDR_OWVAR 20
50075: PUSH
50076: LD_VAR 0 1
50080: ST_TO_ADDR
// uc_nation := 3 ;
50081: LD_ADDR_OWVAR 21
50085: PUSH
50086: LD_INT 3
50088: ST_TO_ADDR
// vc_chassis := 25 ;
50089: LD_ADDR_OWVAR 37
50093: PUSH
50094: LD_INT 25
50096: ST_TO_ADDR
// vc_engine := engine_siberite ;
50097: LD_ADDR_OWVAR 39
50101: PUSH
50102: LD_INT 3
50104: ST_TO_ADDR
// vc_control := control_computer ;
50105: LD_ADDR_OWVAR 38
50109: PUSH
50110: LD_INT 3
50112: ST_TO_ADDR
// vc_weapon := 59 ;
50113: LD_ADDR_OWVAR 40
50117: PUSH
50118: LD_INT 59
50120: ST_TO_ADDR
// result := CreateVehicle ;
50121: LD_ADDR_VAR 0 5
50125: PUSH
50126: CALL_OW 45
50130: ST_TO_ADDR
// SetDir ( result , d ) ;
50131: LD_VAR 0 5
50135: PPUSH
50136: LD_VAR 0 4
50140: PPUSH
50141: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50145: LD_VAR 0 5
50149: PPUSH
50150: LD_VAR 0 2
50154: PPUSH
50155: LD_VAR 0 3
50159: PPUSH
50160: LD_INT 0
50162: PPUSH
50163: CALL_OW 48
// end ;
50167: LD_VAR 0 5
50171: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50172: LD_INT 0
50174: PPUSH
50175: PPUSH
50176: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50177: LD_ADDR_VAR 0 2
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: LD_INT 0
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50200: LD_VAR 0 1
50204: NOT
50205: PUSH
50206: LD_VAR 0 1
50210: PPUSH
50211: CALL_OW 264
50215: PUSH
50216: LD_INT 12
50218: PUSH
50219: LD_INT 51
50221: PUSH
50222: LD_INT 32
50224: PUSH
50225: LD_EXP 63
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: IN
50236: NOT
50237: OR
50238: IFFALSE 50242
// exit ;
50240: GO 50340
// for i := 1 to 3 do
50242: LD_ADDR_VAR 0 3
50246: PUSH
50247: DOUBLE
50248: LD_INT 1
50250: DEC
50251: ST_TO_ADDR
50252: LD_INT 3
50254: PUSH
50255: FOR_TO
50256: IFFALSE 50338
// begin tmp := GetCargo ( cargo , i ) ;
50258: LD_ADDR_VAR 0 4
50262: PUSH
50263: LD_VAR 0 1
50267: PPUSH
50268: LD_VAR 0 3
50272: PPUSH
50273: CALL_OW 289
50277: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50278: LD_ADDR_VAR 0 2
50282: PUSH
50283: LD_VAR 0 2
50287: PPUSH
50288: LD_VAR 0 3
50292: PPUSH
50293: LD_VAR 0 4
50297: PPUSH
50298: CALL_OW 1
50302: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50303: LD_ADDR_VAR 0 2
50307: PUSH
50308: LD_VAR 0 2
50312: PPUSH
50313: LD_INT 4
50315: PPUSH
50316: LD_VAR 0 2
50320: PUSH
50321: LD_INT 4
50323: ARRAY
50324: PUSH
50325: LD_VAR 0 4
50329: PLUS
50330: PPUSH
50331: CALL_OW 1
50335: ST_TO_ADDR
// end ;
50336: GO 50255
50338: POP
50339: POP
// end ;
50340: LD_VAR 0 2
50344: RET
// export function Length ( array ) ; begin
50345: LD_INT 0
50347: PPUSH
// result := array + 0 ;
50348: LD_ADDR_VAR 0 2
50352: PUSH
50353: LD_VAR 0 1
50357: PUSH
50358: LD_INT 0
50360: PLUS
50361: ST_TO_ADDR
// end ; end_of_file
50362: LD_VAR 0 2
50366: RET
// every 0 0$1 do
50367: GO 50369
50369: DISABLE
// begin enable ;
50370: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50371: LD_STRING updateTimer(
50373: PUSH
50374: LD_OWVAR 1
50378: STR
50379: PUSH
50380: LD_STRING );
50382: STR
50383: PPUSH
50384: CALL_OW 559
// end ;
50388: END
// export function SOS_MapStart ( ) ; begin
50389: LD_INT 0
50391: PPUSH
// if streamModeActive then
50392: LD_EXP 81
50396: IFFALSE 50405
// DefineStreamItems ( true ) ;
50398: LD_INT 1
50400: PPUSH
50401: CALL 52059 0 1
// UpdateFactoryWaypoints ( ) ;
50405: CALL 64920 0 0
// UpdateWarhouseGatheringPoints ( ) ;
50409: CALL 65173 0 0
// end ;
50413: LD_VAR 0 1
50417: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50418: LD_INT 0
50420: PPUSH
// if p2 = 100 then
50421: LD_VAR 0 2
50425: PUSH
50426: LD_INT 100
50428: EQUAL
50429: IFFALSE 51432
// begin if not StreamModeActive then
50431: LD_EXP 81
50435: NOT
50436: IFFALSE 50446
// StreamModeActive := true ;
50438: LD_ADDR_EXP 81
50442: PUSH
50443: LD_INT 1
50445: ST_TO_ADDR
// if p3 = 0 then
50446: LD_VAR 0 3
50450: PUSH
50451: LD_INT 0
50453: EQUAL
50454: IFFALSE 50460
// InitStreamMode ;
50456: CALL 51595 0 0
// if p3 = 1 then
50460: LD_VAR 0 3
50464: PUSH
50465: LD_INT 1
50467: EQUAL
50468: IFFALSE 50478
// sRocket := true ;
50470: LD_ADDR_EXP 86
50474: PUSH
50475: LD_INT 1
50477: ST_TO_ADDR
// if p3 = 2 then
50478: LD_VAR 0 3
50482: PUSH
50483: LD_INT 2
50485: EQUAL
50486: IFFALSE 50496
// sSpeed := true ;
50488: LD_ADDR_EXP 85
50492: PUSH
50493: LD_INT 1
50495: ST_TO_ADDR
// if p3 = 3 then
50496: LD_VAR 0 3
50500: PUSH
50501: LD_INT 3
50503: EQUAL
50504: IFFALSE 50514
// sEngine := true ;
50506: LD_ADDR_EXP 87
50510: PUSH
50511: LD_INT 1
50513: ST_TO_ADDR
// if p3 = 4 then
50514: LD_VAR 0 3
50518: PUSH
50519: LD_INT 4
50521: EQUAL
50522: IFFALSE 50532
// sSpec := true ;
50524: LD_ADDR_EXP 84
50528: PUSH
50529: LD_INT 1
50531: ST_TO_ADDR
// if p3 = 5 then
50532: LD_VAR 0 3
50536: PUSH
50537: LD_INT 5
50539: EQUAL
50540: IFFALSE 50550
// sLevel := true ;
50542: LD_ADDR_EXP 88
50546: PUSH
50547: LD_INT 1
50549: ST_TO_ADDR
// if p3 = 6 then
50550: LD_VAR 0 3
50554: PUSH
50555: LD_INT 6
50557: EQUAL
50558: IFFALSE 50568
// sArmoury := true ;
50560: LD_ADDR_EXP 89
50564: PUSH
50565: LD_INT 1
50567: ST_TO_ADDR
// if p3 = 7 then
50568: LD_VAR 0 3
50572: PUSH
50573: LD_INT 7
50575: EQUAL
50576: IFFALSE 50586
// sRadar := true ;
50578: LD_ADDR_EXP 90
50582: PUSH
50583: LD_INT 1
50585: ST_TO_ADDR
// if p3 = 8 then
50586: LD_VAR 0 3
50590: PUSH
50591: LD_INT 8
50593: EQUAL
50594: IFFALSE 50604
// sBunker := true ;
50596: LD_ADDR_EXP 91
50600: PUSH
50601: LD_INT 1
50603: ST_TO_ADDR
// if p3 = 9 then
50604: LD_VAR 0 3
50608: PUSH
50609: LD_INT 9
50611: EQUAL
50612: IFFALSE 50622
// sHack := true ;
50614: LD_ADDR_EXP 92
50618: PUSH
50619: LD_INT 1
50621: ST_TO_ADDR
// if p3 = 10 then
50622: LD_VAR 0 3
50626: PUSH
50627: LD_INT 10
50629: EQUAL
50630: IFFALSE 50640
// sFire := true ;
50632: LD_ADDR_EXP 93
50636: PUSH
50637: LD_INT 1
50639: ST_TO_ADDR
// if p3 = 11 then
50640: LD_VAR 0 3
50644: PUSH
50645: LD_INT 11
50647: EQUAL
50648: IFFALSE 50658
// sRefresh := true ;
50650: LD_ADDR_EXP 94
50654: PUSH
50655: LD_INT 1
50657: ST_TO_ADDR
// if p3 = 12 then
50658: LD_VAR 0 3
50662: PUSH
50663: LD_INT 12
50665: EQUAL
50666: IFFALSE 50676
// sExp := true ;
50668: LD_ADDR_EXP 95
50672: PUSH
50673: LD_INT 1
50675: ST_TO_ADDR
// if p3 = 13 then
50676: LD_VAR 0 3
50680: PUSH
50681: LD_INT 13
50683: EQUAL
50684: IFFALSE 50694
// sDepot := true ;
50686: LD_ADDR_EXP 96
50690: PUSH
50691: LD_INT 1
50693: ST_TO_ADDR
// if p3 = 14 then
50694: LD_VAR 0 3
50698: PUSH
50699: LD_INT 14
50701: EQUAL
50702: IFFALSE 50712
// sFlag := true ;
50704: LD_ADDR_EXP 97
50708: PUSH
50709: LD_INT 1
50711: ST_TO_ADDR
// if p3 = 15 then
50712: LD_VAR 0 3
50716: PUSH
50717: LD_INT 15
50719: EQUAL
50720: IFFALSE 50730
// sKamikadze := true ;
50722: LD_ADDR_EXP 105
50726: PUSH
50727: LD_INT 1
50729: ST_TO_ADDR
// if p3 = 16 then
50730: LD_VAR 0 3
50734: PUSH
50735: LD_INT 16
50737: EQUAL
50738: IFFALSE 50748
// sTroll := true ;
50740: LD_ADDR_EXP 106
50744: PUSH
50745: LD_INT 1
50747: ST_TO_ADDR
// if p3 = 17 then
50748: LD_VAR 0 3
50752: PUSH
50753: LD_INT 17
50755: EQUAL
50756: IFFALSE 50766
// sSlow := true ;
50758: LD_ADDR_EXP 107
50762: PUSH
50763: LD_INT 1
50765: ST_TO_ADDR
// if p3 = 18 then
50766: LD_VAR 0 3
50770: PUSH
50771: LD_INT 18
50773: EQUAL
50774: IFFALSE 50784
// sLack := true ;
50776: LD_ADDR_EXP 108
50780: PUSH
50781: LD_INT 1
50783: ST_TO_ADDR
// if p3 = 19 then
50784: LD_VAR 0 3
50788: PUSH
50789: LD_INT 19
50791: EQUAL
50792: IFFALSE 50802
// sTank := true ;
50794: LD_ADDR_EXP 110
50798: PUSH
50799: LD_INT 1
50801: ST_TO_ADDR
// if p3 = 20 then
50802: LD_VAR 0 3
50806: PUSH
50807: LD_INT 20
50809: EQUAL
50810: IFFALSE 50820
// sRemote := true ;
50812: LD_ADDR_EXP 111
50816: PUSH
50817: LD_INT 1
50819: ST_TO_ADDR
// if p3 = 21 then
50820: LD_VAR 0 3
50824: PUSH
50825: LD_INT 21
50827: EQUAL
50828: IFFALSE 50838
// sPowell := true ;
50830: LD_ADDR_EXP 112
50834: PUSH
50835: LD_INT 1
50837: ST_TO_ADDR
// if p3 = 22 then
50838: LD_VAR 0 3
50842: PUSH
50843: LD_INT 22
50845: EQUAL
50846: IFFALSE 50856
// sTeleport := true ;
50848: LD_ADDR_EXP 115
50852: PUSH
50853: LD_INT 1
50855: ST_TO_ADDR
// if p3 = 23 then
50856: LD_VAR 0 3
50860: PUSH
50861: LD_INT 23
50863: EQUAL
50864: IFFALSE 50874
// sOilTower := true ;
50866: LD_ADDR_EXP 117
50870: PUSH
50871: LD_INT 1
50873: ST_TO_ADDR
// if p3 = 24 then
50874: LD_VAR 0 3
50878: PUSH
50879: LD_INT 24
50881: EQUAL
50882: IFFALSE 50892
// sShovel := true ;
50884: LD_ADDR_EXP 118
50888: PUSH
50889: LD_INT 1
50891: ST_TO_ADDR
// if p3 = 25 then
50892: LD_VAR 0 3
50896: PUSH
50897: LD_INT 25
50899: EQUAL
50900: IFFALSE 50910
// sSheik := true ;
50902: LD_ADDR_EXP 119
50906: PUSH
50907: LD_INT 1
50909: ST_TO_ADDR
// if p3 = 26 then
50910: LD_VAR 0 3
50914: PUSH
50915: LD_INT 26
50917: EQUAL
50918: IFFALSE 50928
// sEarthquake := true ;
50920: LD_ADDR_EXP 121
50924: PUSH
50925: LD_INT 1
50927: ST_TO_ADDR
// if p3 = 27 then
50928: LD_VAR 0 3
50932: PUSH
50933: LD_INT 27
50935: EQUAL
50936: IFFALSE 50946
// sAI := true ;
50938: LD_ADDR_EXP 122
50942: PUSH
50943: LD_INT 1
50945: ST_TO_ADDR
// if p3 = 28 then
50946: LD_VAR 0 3
50950: PUSH
50951: LD_INT 28
50953: EQUAL
50954: IFFALSE 50964
// sCargo := true ;
50956: LD_ADDR_EXP 125
50960: PUSH
50961: LD_INT 1
50963: ST_TO_ADDR
// if p3 = 29 then
50964: LD_VAR 0 3
50968: PUSH
50969: LD_INT 29
50971: EQUAL
50972: IFFALSE 50982
// sDLaser := true ;
50974: LD_ADDR_EXP 126
50978: PUSH
50979: LD_INT 1
50981: ST_TO_ADDR
// if p3 = 30 then
50982: LD_VAR 0 3
50986: PUSH
50987: LD_INT 30
50989: EQUAL
50990: IFFALSE 51000
// sExchange := true ;
50992: LD_ADDR_EXP 127
50996: PUSH
50997: LD_INT 1
50999: ST_TO_ADDR
// if p3 = 31 then
51000: LD_VAR 0 3
51004: PUSH
51005: LD_INT 31
51007: EQUAL
51008: IFFALSE 51018
// sFac := true ;
51010: LD_ADDR_EXP 128
51014: PUSH
51015: LD_INT 1
51017: ST_TO_ADDR
// if p3 = 32 then
51018: LD_VAR 0 3
51022: PUSH
51023: LD_INT 32
51025: EQUAL
51026: IFFALSE 51036
// sPower := true ;
51028: LD_ADDR_EXP 129
51032: PUSH
51033: LD_INT 1
51035: ST_TO_ADDR
// if p3 = 33 then
51036: LD_VAR 0 3
51040: PUSH
51041: LD_INT 33
51043: EQUAL
51044: IFFALSE 51054
// sRandom := true ;
51046: LD_ADDR_EXP 130
51050: PUSH
51051: LD_INT 1
51053: ST_TO_ADDR
// if p3 = 34 then
51054: LD_VAR 0 3
51058: PUSH
51059: LD_INT 34
51061: EQUAL
51062: IFFALSE 51072
// sShield := true ;
51064: LD_ADDR_EXP 131
51068: PUSH
51069: LD_INT 1
51071: ST_TO_ADDR
// if p3 = 35 then
51072: LD_VAR 0 3
51076: PUSH
51077: LD_INT 35
51079: EQUAL
51080: IFFALSE 51090
// sTime := true ;
51082: LD_ADDR_EXP 132
51086: PUSH
51087: LD_INT 1
51089: ST_TO_ADDR
// if p3 = 36 then
51090: LD_VAR 0 3
51094: PUSH
51095: LD_INT 36
51097: EQUAL
51098: IFFALSE 51108
// sTools := true ;
51100: LD_ADDR_EXP 133
51104: PUSH
51105: LD_INT 1
51107: ST_TO_ADDR
// if p3 = 101 then
51108: LD_VAR 0 3
51112: PUSH
51113: LD_INT 101
51115: EQUAL
51116: IFFALSE 51126
// sSold := true ;
51118: LD_ADDR_EXP 98
51122: PUSH
51123: LD_INT 1
51125: ST_TO_ADDR
// if p3 = 102 then
51126: LD_VAR 0 3
51130: PUSH
51131: LD_INT 102
51133: EQUAL
51134: IFFALSE 51144
// sDiff := true ;
51136: LD_ADDR_EXP 99
51140: PUSH
51141: LD_INT 1
51143: ST_TO_ADDR
// if p3 = 103 then
51144: LD_VAR 0 3
51148: PUSH
51149: LD_INT 103
51151: EQUAL
51152: IFFALSE 51162
// sFog := true ;
51154: LD_ADDR_EXP 102
51158: PUSH
51159: LD_INT 1
51161: ST_TO_ADDR
// if p3 = 104 then
51162: LD_VAR 0 3
51166: PUSH
51167: LD_INT 104
51169: EQUAL
51170: IFFALSE 51180
// sReset := true ;
51172: LD_ADDR_EXP 103
51176: PUSH
51177: LD_INT 1
51179: ST_TO_ADDR
// if p3 = 105 then
51180: LD_VAR 0 3
51184: PUSH
51185: LD_INT 105
51187: EQUAL
51188: IFFALSE 51198
// sSun := true ;
51190: LD_ADDR_EXP 104
51194: PUSH
51195: LD_INT 1
51197: ST_TO_ADDR
// if p3 = 106 then
51198: LD_VAR 0 3
51202: PUSH
51203: LD_INT 106
51205: EQUAL
51206: IFFALSE 51216
// sTiger := true ;
51208: LD_ADDR_EXP 100
51212: PUSH
51213: LD_INT 1
51215: ST_TO_ADDR
// if p3 = 107 then
51216: LD_VAR 0 3
51220: PUSH
51221: LD_INT 107
51223: EQUAL
51224: IFFALSE 51234
// sBomb := true ;
51226: LD_ADDR_EXP 101
51230: PUSH
51231: LD_INT 1
51233: ST_TO_ADDR
// if p3 = 108 then
51234: LD_VAR 0 3
51238: PUSH
51239: LD_INT 108
51241: EQUAL
51242: IFFALSE 51252
// sWound := true ;
51244: LD_ADDR_EXP 109
51248: PUSH
51249: LD_INT 1
51251: ST_TO_ADDR
// if p3 = 109 then
51252: LD_VAR 0 3
51256: PUSH
51257: LD_INT 109
51259: EQUAL
51260: IFFALSE 51270
// sBetray := true ;
51262: LD_ADDR_EXP 113
51266: PUSH
51267: LD_INT 1
51269: ST_TO_ADDR
// if p3 = 110 then
51270: LD_VAR 0 3
51274: PUSH
51275: LD_INT 110
51277: EQUAL
51278: IFFALSE 51288
// sContamin := true ;
51280: LD_ADDR_EXP 114
51284: PUSH
51285: LD_INT 1
51287: ST_TO_ADDR
// if p3 = 111 then
51288: LD_VAR 0 3
51292: PUSH
51293: LD_INT 111
51295: EQUAL
51296: IFFALSE 51306
// sOil := true ;
51298: LD_ADDR_EXP 116
51302: PUSH
51303: LD_INT 1
51305: ST_TO_ADDR
// if p3 = 112 then
51306: LD_VAR 0 3
51310: PUSH
51311: LD_INT 112
51313: EQUAL
51314: IFFALSE 51324
// sStu := true ;
51316: LD_ADDR_EXP 120
51320: PUSH
51321: LD_INT 1
51323: ST_TO_ADDR
// if p3 = 113 then
51324: LD_VAR 0 3
51328: PUSH
51329: LD_INT 113
51331: EQUAL
51332: IFFALSE 51342
// sBazooka := true ;
51334: LD_ADDR_EXP 123
51338: PUSH
51339: LD_INT 1
51341: ST_TO_ADDR
// if p3 = 114 then
51342: LD_VAR 0 3
51346: PUSH
51347: LD_INT 114
51349: EQUAL
51350: IFFALSE 51360
// sMortar := true ;
51352: LD_ADDR_EXP 124
51356: PUSH
51357: LD_INT 1
51359: ST_TO_ADDR
// if p3 = 115 then
51360: LD_VAR 0 3
51364: PUSH
51365: LD_INT 115
51367: EQUAL
51368: IFFALSE 51378
// sRanger := true ;
51370: LD_ADDR_EXP 134
51374: PUSH
51375: LD_INT 1
51377: ST_TO_ADDR
// if p3 = 116 then
51378: LD_VAR 0 3
51382: PUSH
51383: LD_INT 116
51385: EQUAL
51386: IFFALSE 51396
// sComputer := true ;
51388: LD_ADDR_EXP 135
51392: PUSH
51393: LD_INT 1
51395: ST_TO_ADDR
// if p3 = 117 then
51396: LD_VAR 0 3
51400: PUSH
51401: LD_INT 117
51403: EQUAL
51404: IFFALSE 51414
// s30 := true ;
51406: LD_ADDR_EXP 136
51410: PUSH
51411: LD_INT 1
51413: ST_TO_ADDR
// if p3 = 118 then
51414: LD_VAR 0 3
51418: PUSH
51419: LD_INT 118
51421: EQUAL
51422: IFFALSE 51432
// s60 := true ;
51424: LD_ADDR_EXP 137
51428: PUSH
51429: LD_INT 1
51431: ST_TO_ADDR
// end ; if p2 = 101 then
51432: LD_VAR 0 2
51436: PUSH
51437: LD_INT 101
51439: EQUAL
51440: IFFALSE 51568
// begin case p3 of 1 :
51442: LD_VAR 0 3
51446: PUSH
51447: LD_INT 1
51449: DOUBLE
51450: EQUAL
51451: IFTRUE 51455
51453: GO 51462
51455: POP
// hHackUnlimitedResources ; 2 :
51456: CALL 63666 0 0
51460: GO 51568
51462: LD_INT 2
51464: DOUBLE
51465: EQUAL
51466: IFTRUE 51470
51468: GO 51477
51470: POP
// hHackSetLevel10 ; 3 :
51471: CALL 63799 0 0
51475: GO 51568
51477: LD_INT 3
51479: DOUBLE
51480: EQUAL
51481: IFTRUE 51485
51483: GO 51492
51485: POP
// hHackSetLevel10YourUnits ; 4 :
51486: CALL 63884 0 0
51490: GO 51568
51492: LD_INT 4
51494: DOUBLE
51495: EQUAL
51496: IFTRUE 51500
51498: GO 51507
51500: POP
// hHackInvincible ; 5 :
51501: CALL 64332 0 0
51505: GO 51568
51507: LD_INT 5
51509: DOUBLE
51510: EQUAL
51511: IFTRUE 51515
51513: GO 51522
51515: POP
// hHackInvisible ; 6 :
51516: CALL 64443 0 0
51520: GO 51568
51522: LD_INT 6
51524: DOUBLE
51525: EQUAL
51526: IFTRUE 51530
51528: GO 51537
51530: POP
// hHackChangeYourSide ; 7 :
51531: CALL 64500 0 0
51535: GO 51568
51537: LD_INT 7
51539: DOUBLE
51540: EQUAL
51541: IFTRUE 51545
51543: GO 51552
51545: POP
// hHackChangeUnitSide ; 8 :
51546: CALL 64542 0 0
51550: GO 51568
51552: LD_INT 8
51554: DOUBLE
51555: EQUAL
51556: IFTRUE 51560
51558: GO 51567
51560: POP
// hHackFog ; end ;
51561: CALL 64643 0 0
51565: GO 51568
51567: POP
// end ; end ;
51568: LD_VAR 0 7
51572: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
51573: GO 51575
51575: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
51576: LD_STRING initStreamRollete();
51578: PPUSH
51579: CALL_OW 559
// InitStreamMode ;
51583: CALL 51595 0 0
// DefineStreamItems ( false ) ;
51587: LD_INT 0
51589: PPUSH
51590: CALL 52059 0 1
// end ;
51594: END
// function InitStreamMode ; begin
51595: LD_INT 0
51597: PPUSH
// streamModeActive := false ;
51598: LD_ADDR_EXP 81
51602: PUSH
51603: LD_INT 0
51605: ST_TO_ADDR
// normalCounter := 36 ;
51606: LD_ADDR_EXP 82
51610: PUSH
51611: LD_INT 36
51613: ST_TO_ADDR
// hardcoreCounter := 18 ;
51614: LD_ADDR_EXP 83
51618: PUSH
51619: LD_INT 18
51621: ST_TO_ADDR
// sRocket := false ;
51622: LD_ADDR_EXP 86
51626: PUSH
51627: LD_INT 0
51629: ST_TO_ADDR
// sSpeed := false ;
51630: LD_ADDR_EXP 85
51634: PUSH
51635: LD_INT 0
51637: ST_TO_ADDR
// sEngine := false ;
51638: LD_ADDR_EXP 87
51642: PUSH
51643: LD_INT 0
51645: ST_TO_ADDR
// sSpec := false ;
51646: LD_ADDR_EXP 84
51650: PUSH
51651: LD_INT 0
51653: ST_TO_ADDR
// sLevel := false ;
51654: LD_ADDR_EXP 88
51658: PUSH
51659: LD_INT 0
51661: ST_TO_ADDR
// sArmoury := false ;
51662: LD_ADDR_EXP 89
51666: PUSH
51667: LD_INT 0
51669: ST_TO_ADDR
// sRadar := false ;
51670: LD_ADDR_EXP 90
51674: PUSH
51675: LD_INT 0
51677: ST_TO_ADDR
// sBunker := false ;
51678: LD_ADDR_EXP 91
51682: PUSH
51683: LD_INT 0
51685: ST_TO_ADDR
// sHack := false ;
51686: LD_ADDR_EXP 92
51690: PUSH
51691: LD_INT 0
51693: ST_TO_ADDR
// sFire := false ;
51694: LD_ADDR_EXP 93
51698: PUSH
51699: LD_INT 0
51701: ST_TO_ADDR
// sRefresh := false ;
51702: LD_ADDR_EXP 94
51706: PUSH
51707: LD_INT 0
51709: ST_TO_ADDR
// sExp := false ;
51710: LD_ADDR_EXP 95
51714: PUSH
51715: LD_INT 0
51717: ST_TO_ADDR
// sDepot := false ;
51718: LD_ADDR_EXP 96
51722: PUSH
51723: LD_INT 0
51725: ST_TO_ADDR
// sFlag := false ;
51726: LD_ADDR_EXP 97
51730: PUSH
51731: LD_INT 0
51733: ST_TO_ADDR
// sKamikadze := false ;
51734: LD_ADDR_EXP 105
51738: PUSH
51739: LD_INT 0
51741: ST_TO_ADDR
// sTroll := false ;
51742: LD_ADDR_EXP 106
51746: PUSH
51747: LD_INT 0
51749: ST_TO_ADDR
// sSlow := false ;
51750: LD_ADDR_EXP 107
51754: PUSH
51755: LD_INT 0
51757: ST_TO_ADDR
// sLack := false ;
51758: LD_ADDR_EXP 108
51762: PUSH
51763: LD_INT 0
51765: ST_TO_ADDR
// sTank := false ;
51766: LD_ADDR_EXP 110
51770: PUSH
51771: LD_INT 0
51773: ST_TO_ADDR
// sRemote := false ;
51774: LD_ADDR_EXP 111
51778: PUSH
51779: LD_INT 0
51781: ST_TO_ADDR
// sPowell := false ;
51782: LD_ADDR_EXP 112
51786: PUSH
51787: LD_INT 0
51789: ST_TO_ADDR
// sTeleport := false ;
51790: LD_ADDR_EXP 115
51794: PUSH
51795: LD_INT 0
51797: ST_TO_ADDR
// sOilTower := false ;
51798: LD_ADDR_EXP 117
51802: PUSH
51803: LD_INT 0
51805: ST_TO_ADDR
// sShovel := false ;
51806: LD_ADDR_EXP 118
51810: PUSH
51811: LD_INT 0
51813: ST_TO_ADDR
// sSheik := false ;
51814: LD_ADDR_EXP 119
51818: PUSH
51819: LD_INT 0
51821: ST_TO_ADDR
// sEarthquake := false ;
51822: LD_ADDR_EXP 121
51826: PUSH
51827: LD_INT 0
51829: ST_TO_ADDR
// sAI := false ;
51830: LD_ADDR_EXP 122
51834: PUSH
51835: LD_INT 0
51837: ST_TO_ADDR
// sCargo := false ;
51838: LD_ADDR_EXP 125
51842: PUSH
51843: LD_INT 0
51845: ST_TO_ADDR
// sDLaser := false ;
51846: LD_ADDR_EXP 126
51850: PUSH
51851: LD_INT 0
51853: ST_TO_ADDR
// sExchange := false ;
51854: LD_ADDR_EXP 127
51858: PUSH
51859: LD_INT 0
51861: ST_TO_ADDR
// sFac := false ;
51862: LD_ADDR_EXP 128
51866: PUSH
51867: LD_INT 0
51869: ST_TO_ADDR
// sPower := false ;
51870: LD_ADDR_EXP 129
51874: PUSH
51875: LD_INT 0
51877: ST_TO_ADDR
// sRandom := false ;
51878: LD_ADDR_EXP 130
51882: PUSH
51883: LD_INT 0
51885: ST_TO_ADDR
// sShield := false ;
51886: LD_ADDR_EXP 131
51890: PUSH
51891: LD_INT 0
51893: ST_TO_ADDR
// sTime := false ;
51894: LD_ADDR_EXP 132
51898: PUSH
51899: LD_INT 0
51901: ST_TO_ADDR
// sTools := false ;
51902: LD_ADDR_EXP 133
51906: PUSH
51907: LD_INT 0
51909: ST_TO_ADDR
// sSold := false ;
51910: LD_ADDR_EXP 98
51914: PUSH
51915: LD_INT 0
51917: ST_TO_ADDR
// sDiff := false ;
51918: LD_ADDR_EXP 99
51922: PUSH
51923: LD_INT 0
51925: ST_TO_ADDR
// sFog := false ;
51926: LD_ADDR_EXP 102
51930: PUSH
51931: LD_INT 0
51933: ST_TO_ADDR
// sReset := false ;
51934: LD_ADDR_EXP 103
51938: PUSH
51939: LD_INT 0
51941: ST_TO_ADDR
// sSun := false ;
51942: LD_ADDR_EXP 104
51946: PUSH
51947: LD_INT 0
51949: ST_TO_ADDR
// sTiger := false ;
51950: LD_ADDR_EXP 100
51954: PUSH
51955: LD_INT 0
51957: ST_TO_ADDR
// sBomb := false ;
51958: LD_ADDR_EXP 101
51962: PUSH
51963: LD_INT 0
51965: ST_TO_ADDR
// sWound := false ;
51966: LD_ADDR_EXP 109
51970: PUSH
51971: LD_INT 0
51973: ST_TO_ADDR
// sBetray := false ;
51974: LD_ADDR_EXP 113
51978: PUSH
51979: LD_INT 0
51981: ST_TO_ADDR
// sContamin := false ;
51982: LD_ADDR_EXP 114
51986: PUSH
51987: LD_INT 0
51989: ST_TO_ADDR
// sOil := false ;
51990: LD_ADDR_EXP 116
51994: PUSH
51995: LD_INT 0
51997: ST_TO_ADDR
// sStu := false ;
51998: LD_ADDR_EXP 120
52002: PUSH
52003: LD_INT 0
52005: ST_TO_ADDR
// sBazooka := false ;
52006: LD_ADDR_EXP 123
52010: PUSH
52011: LD_INT 0
52013: ST_TO_ADDR
// sMortar := false ;
52014: LD_ADDR_EXP 124
52018: PUSH
52019: LD_INT 0
52021: ST_TO_ADDR
// sRanger := false ;
52022: LD_ADDR_EXP 134
52026: PUSH
52027: LD_INT 0
52029: ST_TO_ADDR
// sComputer := false ;
52030: LD_ADDR_EXP 135
52034: PUSH
52035: LD_INT 0
52037: ST_TO_ADDR
// s30 := false ;
52038: LD_ADDR_EXP 136
52042: PUSH
52043: LD_INT 0
52045: ST_TO_ADDR
// s60 := false ;
52046: LD_ADDR_EXP 137
52050: PUSH
52051: LD_INT 0
52053: ST_TO_ADDR
// end ;
52054: LD_VAR 0 1
52058: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52059: LD_INT 0
52061: PPUSH
52062: PPUSH
52063: PPUSH
52064: PPUSH
52065: PPUSH
52066: PPUSH
52067: PPUSH
// result := [ ] ;
52068: LD_ADDR_VAR 0 2
52072: PUSH
52073: EMPTY
52074: ST_TO_ADDR
// if campaign_id = 1 then
52075: LD_OWVAR 69
52079: PUSH
52080: LD_INT 1
52082: EQUAL
52083: IFFALSE 55249
// begin case mission_number of 1 :
52085: LD_OWVAR 70
52089: PUSH
52090: LD_INT 1
52092: DOUBLE
52093: EQUAL
52094: IFTRUE 52098
52096: GO 52174
52098: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52099: LD_ADDR_VAR 0 2
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: LD_INT 4
52109: PUSH
52110: LD_INT 11
52112: PUSH
52113: LD_INT 12
52115: PUSH
52116: LD_INT 15
52118: PUSH
52119: LD_INT 16
52121: PUSH
52122: LD_INT 22
52124: PUSH
52125: LD_INT 23
52127: PUSH
52128: LD_INT 26
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 101
52144: PUSH
52145: LD_INT 102
52147: PUSH
52148: LD_INT 106
52150: PUSH
52151: LD_INT 116
52153: PUSH
52154: LD_INT 117
52156: PUSH
52157: LD_INT 118
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: ST_TO_ADDR
52172: GO 55247
52174: LD_INT 2
52176: DOUBLE
52177: EQUAL
52178: IFTRUE 52182
52180: GO 52266
52182: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52183: LD_ADDR_VAR 0 2
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: LD_INT 4
52193: PUSH
52194: LD_INT 11
52196: PUSH
52197: LD_INT 12
52199: PUSH
52200: LD_INT 15
52202: PUSH
52203: LD_INT 16
52205: PUSH
52206: LD_INT 22
52208: PUSH
52209: LD_INT 23
52211: PUSH
52212: LD_INT 26
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 101
52228: PUSH
52229: LD_INT 102
52231: PUSH
52232: LD_INT 105
52234: PUSH
52235: LD_INT 106
52237: PUSH
52238: LD_INT 108
52240: PUSH
52241: LD_INT 116
52243: PUSH
52244: LD_INT 117
52246: PUSH
52247: LD_INT 118
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: ST_TO_ADDR
52264: GO 55247
52266: LD_INT 3
52268: DOUBLE
52269: EQUAL
52270: IFTRUE 52274
52272: GO 52362
52274: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52275: LD_ADDR_VAR 0 2
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 4
52285: PUSH
52286: LD_INT 5
52288: PUSH
52289: LD_INT 11
52291: PUSH
52292: LD_INT 12
52294: PUSH
52295: LD_INT 15
52297: PUSH
52298: LD_INT 16
52300: PUSH
52301: LD_INT 22
52303: PUSH
52304: LD_INT 26
52306: PUSH
52307: LD_INT 36
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 101
52324: PUSH
52325: LD_INT 102
52327: PUSH
52328: LD_INT 105
52330: PUSH
52331: LD_INT 106
52333: PUSH
52334: LD_INT 108
52336: PUSH
52337: LD_INT 116
52339: PUSH
52340: LD_INT 117
52342: PUSH
52343: LD_INT 118
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: ST_TO_ADDR
52360: GO 55247
52362: LD_INT 4
52364: DOUBLE
52365: EQUAL
52366: IFTRUE 52370
52368: GO 52466
52370: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52371: LD_ADDR_VAR 0 2
52375: PUSH
52376: LD_INT 2
52378: PUSH
52379: LD_INT 4
52381: PUSH
52382: LD_INT 5
52384: PUSH
52385: LD_INT 8
52387: PUSH
52388: LD_INT 11
52390: PUSH
52391: LD_INT 12
52393: PUSH
52394: LD_INT 15
52396: PUSH
52397: LD_INT 16
52399: PUSH
52400: LD_INT 22
52402: PUSH
52403: LD_INT 23
52405: PUSH
52406: LD_INT 26
52408: PUSH
52409: LD_INT 36
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 101
52428: PUSH
52429: LD_INT 102
52431: PUSH
52432: LD_INT 105
52434: PUSH
52435: LD_INT 106
52437: PUSH
52438: LD_INT 108
52440: PUSH
52441: LD_INT 116
52443: PUSH
52444: LD_INT 117
52446: PUSH
52447: LD_INT 118
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: ST_TO_ADDR
52464: GO 55247
52466: LD_INT 5
52468: DOUBLE
52469: EQUAL
52470: IFTRUE 52474
52472: GO 52586
52474: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52475: LD_ADDR_VAR 0 2
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: LD_INT 4
52485: PUSH
52486: LD_INT 5
52488: PUSH
52489: LD_INT 6
52491: PUSH
52492: LD_INT 8
52494: PUSH
52495: LD_INT 11
52497: PUSH
52498: LD_INT 12
52500: PUSH
52501: LD_INT 15
52503: PUSH
52504: LD_INT 16
52506: PUSH
52507: LD_INT 22
52509: PUSH
52510: LD_INT 23
52512: PUSH
52513: LD_INT 25
52515: PUSH
52516: LD_INT 26
52518: PUSH
52519: LD_INT 36
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 101
52540: PUSH
52541: LD_INT 102
52543: PUSH
52544: LD_INT 105
52546: PUSH
52547: LD_INT 106
52549: PUSH
52550: LD_INT 108
52552: PUSH
52553: LD_INT 109
52555: PUSH
52556: LD_INT 112
52558: PUSH
52559: LD_INT 116
52561: PUSH
52562: LD_INT 117
52564: PUSH
52565: LD_INT 118
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: ST_TO_ADDR
52584: GO 55247
52586: LD_INT 6
52588: DOUBLE
52589: EQUAL
52590: IFTRUE 52594
52592: GO 52726
52594: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52595: LD_ADDR_VAR 0 2
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: LD_INT 4
52605: PUSH
52606: LD_INT 5
52608: PUSH
52609: LD_INT 6
52611: PUSH
52612: LD_INT 8
52614: PUSH
52615: LD_INT 11
52617: PUSH
52618: LD_INT 12
52620: PUSH
52621: LD_INT 15
52623: PUSH
52624: LD_INT 16
52626: PUSH
52627: LD_INT 20
52629: PUSH
52630: LD_INT 21
52632: PUSH
52633: LD_INT 22
52635: PUSH
52636: LD_INT 23
52638: PUSH
52639: LD_INT 25
52641: PUSH
52642: LD_INT 26
52644: PUSH
52645: LD_INT 30
52647: PUSH
52648: LD_INT 31
52650: PUSH
52651: LD_INT 32
52653: PUSH
52654: LD_INT 36
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 101
52680: PUSH
52681: LD_INT 102
52683: PUSH
52684: LD_INT 105
52686: PUSH
52687: LD_INT 106
52689: PUSH
52690: LD_INT 108
52692: PUSH
52693: LD_INT 109
52695: PUSH
52696: LD_INT 112
52698: PUSH
52699: LD_INT 116
52701: PUSH
52702: LD_INT 117
52704: PUSH
52705: LD_INT 118
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: ST_TO_ADDR
52724: GO 55247
52726: LD_INT 7
52728: DOUBLE
52729: EQUAL
52730: IFTRUE 52734
52732: GO 52846
52734: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52735: LD_ADDR_VAR 0 2
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: LD_INT 4
52745: PUSH
52746: LD_INT 5
52748: PUSH
52749: LD_INT 7
52751: PUSH
52752: LD_INT 11
52754: PUSH
52755: LD_INT 12
52757: PUSH
52758: LD_INT 15
52760: PUSH
52761: LD_INT 16
52763: PUSH
52764: LD_INT 20
52766: PUSH
52767: LD_INT 21
52769: PUSH
52770: LD_INT 22
52772: PUSH
52773: LD_INT 23
52775: PUSH
52776: LD_INT 25
52778: PUSH
52779: LD_INT 26
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 101
52800: PUSH
52801: LD_INT 102
52803: PUSH
52804: LD_INT 103
52806: PUSH
52807: LD_INT 105
52809: PUSH
52810: LD_INT 106
52812: PUSH
52813: LD_INT 108
52815: PUSH
52816: LD_INT 112
52818: PUSH
52819: LD_INT 116
52821: PUSH
52822: LD_INT 117
52824: PUSH
52825: LD_INT 118
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: ST_TO_ADDR
52844: GO 55247
52846: LD_INT 8
52848: DOUBLE
52849: EQUAL
52850: IFTRUE 52854
52852: GO 52994
52854: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52855: LD_ADDR_VAR 0 2
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 4
52865: PUSH
52866: LD_INT 5
52868: PUSH
52869: LD_INT 6
52871: PUSH
52872: LD_INT 7
52874: PUSH
52875: LD_INT 8
52877: PUSH
52878: LD_INT 11
52880: PUSH
52881: LD_INT 12
52883: PUSH
52884: LD_INT 15
52886: PUSH
52887: LD_INT 16
52889: PUSH
52890: LD_INT 20
52892: PUSH
52893: LD_INT 21
52895: PUSH
52896: LD_INT 22
52898: PUSH
52899: LD_INT 23
52901: PUSH
52902: LD_INT 25
52904: PUSH
52905: LD_INT 26
52907: PUSH
52908: LD_INT 30
52910: PUSH
52911: LD_INT 31
52913: PUSH
52914: LD_INT 32
52916: PUSH
52917: LD_INT 36
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 101
52944: PUSH
52945: LD_INT 102
52947: PUSH
52948: LD_INT 103
52950: PUSH
52951: LD_INT 105
52953: PUSH
52954: LD_INT 106
52956: PUSH
52957: LD_INT 108
52959: PUSH
52960: LD_INT 109
52962: PUSH
52963: LD_INT 112
52965: PUSH
52966: LD_INT 116
52968: PUSH
52969: LD_INT 117
52971: PUSH
52972: LD_INT 118
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: ST_TO_ADDR
52992: GO 55247
52994: LD_INT 9
52996: DOUBLE
52997: EQUAL
52998: IFTRUE 53002
53000: GO 53150
53002: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
53003: LD_ADDR_VAR 0 2
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: LD_INT 4
53013: PUSH
53014: LD_INT 5
53016: PUSH
53017: LD_INT 6
53019: PUSH
53020: LD_INT 7
53022: PUSH
53023: LD_INT 8
53025: PUSH
53026: LD_INT 11
53028: PUSH
53029: LD_INT 12
53031: PUSH
53032: LD_INT 15
53034: PUSH
53035: LD_INT 16
53037: PUSH
53038: LD_INT 20
53040: PUSH
53041: LD_INT 21
53043: PUSH
53044: LD_INT 22
53046: PUSH
53047: LD_INT 23
53049: PUSH
53050: LD_INT 25
53052: PUSH
53053: LD_INT 26
53055: PUSH
53056: LD_INT 28
53058: PUSH
53059: LD_INT 30
53061: PUSH
53062: LD_INT 31
53064: PUSH
53065: LD_INT 32
53067: PUSH
53068: LD_INT 36
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 101
53096: PUSH
53097: LD_INT 102
53099: PUSH
53100: LD_INT 103
53102: PUSH
53103: LD_INT 105
53105: PUSH
53106: LD_INT 106
53108: PUSH
53109: LD_INT 108
53111: PUSH
53112: LD_INT 109
53114: PUSH
53115: LD_INT 112
53117: PUSH
53118: LD_INT 114
53120: PUSH
53121: LD_INT 116
53123: PUSH
53124: LD_INT 117
53126: PUSH
53127: LD_INT 118
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: ST_TO_ADDR
53148: GO 55247
53150: LD_INT 10
53152: DOUBLE
53153: EQUAL
53154: IFTRUE 53158
53156: GO 53354
53158: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53159: LD_ADDR_VAR 0 2
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: LD_INT 4
53169: PUSH
53170: LD_INT 5
53172: PUSH
53173: LD_INT 6
53175: PUSH
53176: LD_INT 7
53178: PUSH
53179: LD_INT 8
53181: PUSH
53182: LD_INT 9
53184: PUSH
53185: LD_INT 10
53187: PUSH
53188: LD_INT 11
53190: PUSH
53191: LD_INT 12
53193: PUSH
53194: LD_INT 13
53196: PUSH
53197: LD_INT 14
53199: PUSH
53200: LD_INT 15
53202: PUSH
53203: LD_INT 16
53205: PUSH
53206: LD_INT 17
53208: PUSH
53209: LD_INT 18
53211: PUSH
53212: LD_INT 19
53214: PUSH
53215: LD_INT 20
53217: PUSH
53218: LD_INT 21
53220: PUSH
53221: LD_INT 22
53223: PUSH
53224: LD_INT 23
53226: PUSH
53227: LD_INT 24
53229: PUSH
53230: LD_INT 25
53232: PUSH
53233: LD_INT 26
53235: PUSH
53236: LD_INT 28
53238: PUSH
53239: LD_INT 30
53241: PUSH
53242: LD_INT 31
53244: PUSH
53245: LD_INT 32
53247: PUSH
53248: LD_INT 36
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 101
53284: PUSH
53285: LD_INT 102
53287: PUSH
53288: LD_INT 103
53290: PUSH
53291: LD_INT 104
53293: PUSH
53294: LD_INT 105
53296: PUSH
53297: LD_INT 106
53299: PUSH
53300: LD_INT 107
53302: PUSH
53303: LD_INT 108
53305: PUSH
53306: LD_INT 109
53308: PUSH
53309: LD_INT 110
53311: PUSH
53312: LD_INT 111
53314: PUSH
53315: LD_INT 112
53317: PUSH
53318: LD_INT 114
53320: PUSH
53321: LD_INT 116
53323: PUSH
53324: LD_INT 117
53326: PUSH
53327: LD_INT 118
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: ST_TO_ADDR
53352: GO 55247
53354: LD_INT 11
53356: DOUBLE
53357: EQUAL
53358: IFTRUE 53362
53360: GO 53566
53362: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53363: LD_ADDR_VAR 0 2
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: LD_INT 3
53373: PUSH
53374: LD_INT 4
53376: PUSH
53377: LD_INT 5
53379: PUSH
53380: LD_INT 6
53382: PUSH
53383: LD_INT 7
53385: PUSH
53386: LD_INT 8
53388: PUSH
53389: LD_INT 9
53391: PUSH
53392: LD_INT 10
53394: PUSH
53395: LD_INT 11
53397: PUSH
53398: LD_INT 12
53400: PUSH
53401: LD_INT 13
53403: PUSH
53404: LD_INT 14
53406: PUSH
53407: LD_INT 15
53409: PUSH
53410: LD_INT 16
53412: PUSH
53413: LD_INT 17
53415: PUSH
53416: LD_INT 18
53418: PUSH
53419: LD_INT 19
53421: PUSH
53422: LD_INT 20
53424: PUSH
53425: LD_INT 21
53427: PUSH
53428: LD_INT 22
53430: PUSH
53431: LD_INT 23
53433: PUSH
53434: LD_INT 24
53436: PUSH
53437: LD_INT 25
53439: PUSH
53440: LD_INT 26
53442: PUSH
53443: LD_INT 28
53445: PUSH
53446: LD_INT 30
53448: PUSH
53449: LD_INT 31
53451: PUSH
53452: LD_INT 32
53454: PUSH
53455: LD_INT 34
53457: PUSH
53458: LD_INT 36
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 101
53496: PUSH
53497: LD_INT 102
53499: PUSH
53500: LD_INT 103
53502: PUSH
53503: LD_INT 104
53505: PUSH
53506: LD_INT 105
53508: PUSH
53509: LD_INT 106
53511: PUSH
53512: LD_INT 107
53514: PUSH
53515: LD_INT 108
53517: PUSH
53518: LD_INT 109
53520: PUSH
53521: LD_INT 110
53523: PUSH
53524: LD_INT 111
53526: PUSH
53527: LD_INT 112
53529: PUSH
53530: LD_INT 114
53532: PUSH
53533: LD_INT 116
53535: PUSH
53536: LD_INT 117
53538: PUSH
53539: LD_INT 118
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: ST_TO_ADDR
53564: GO 55247
53566: LD_INT 12
53568: DOUBLE
53569: EQUAL
53570: IFTRUE 53574
53572: GO 53794
53574: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53575: LD_ADDR_VAR 0 2
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: LD_INT 3
53588: PUSH
53589: LD_INT 4
53591: PUSH
53592: LD_INT 5
53594: PUSH
53595: LD_INT 6
53597: PUSH
53598: LD_INT 7
53600: PUSH
53601: LD_INT 8
53603: PUSH
53604: LD_INT 9
53606: PUSH
53607: LD_INT 10
53609: PUSH
53610: LD_INT 11
53612: PUSH
53613: LD_INT 12
53615: PUSH
53616: LD_INT 13
53618: PUSH
53619: LD_INT 14
53621: PUSH
53622: LD_INT 15
53624: PUSH
53625: LD_INT 16
53627: PUSH
53628: LD_INT 17
53630: PUSH
53631: LD_INT 18
53633: PUSH
53634: LD_INT 19
53636: PUSH
53637: LD_INT 20
53639: PUSH
53640: LD_INT 21
53642: PUSH
53643: LD_INT 22
53645: PUSH
53646: LD_INT 23
53648: PUSH
53649: LD_INT 24
53651: PUSH
53652: LD_INT 25
53654: PUSH
53655: LD_INT 26
53657: PUSH
53658: LD_INT 27
53660: PUSH
53661: LD_INT 28
53663: PUSH
53664: LD_INT 30
53666: PUSH
53667: LD_INT 31
53669: PUSH
53670: LD_INT 32
53672: PUSH
53673: LD_INT 33
53675: PUSH
53676: LD_INT 34
53678: PUSH
53679: LD_INT 36
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 101
53720: PUSH
53721: LD_INT 102
53723: PUSH
53724: LD_INT 103
53726: PUSH
53727: LD_INT 104
53729: PUSH
53730: LD_INT 105
53732: PUSH
53733: LD_INT 106
53735: PUSH
53736: LD_INT 107
53738: PUSH
53739: LD_INT 108
53741: PUSH
53742: LD_INT 109
53744: PUSH
53745: LD_INT 110
53747: PUSH
53748: LD_INT 111
53750: PUSH
53751: LD_INT 112
53753: PUSH
53754: LD_INT 113
53756: PUSH
53757: LD_INT 114
53759: PUSH
53760: LD_INT 116
53762: PUSH
53763: LD_INT 117
53765: PUSH
53766: LD_INT 118
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: ST_TO_ADDR
53792: GO 55247
53794: LD_INT 13
53796: DOUBLE
53797: EQUAL
53798: IFTRUE 53802
53800: GO 54010
53802: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53803: LD_ADDR_VAR 0 2
53807: PUSH
53808: LD_INT 1
53810: PUSH
53811: LD_INT 2
53813: PUSH
53814: LD_INT 3
53816: PUSH
53817: LD_INT 4
53819: PUSH
53820: LD_INT 5
53822: PUSH
53823: LD_INT 8
53825: PUSH
53826: LD_INT 9
53828: PUSH
53829: LD_INT 10
53831: PUSH
53832: LD_INT 11
53834: PUSH
53835: LD_INT 12
53837: PUSH
53838: LD_INT 14
53840: PUSH
53841: LD_INT 15
53843: PUSH
53844: LD_INT 16
53846: PUSH
53847: LD_INT 17
53849: PUSH
53850: LD_INT 18
53852: PUSH
53853: LD_INT 19
53855: PUSH
53856: LD_INT 20
53858: PUSH
53859: LD_INT 21
53861: PUSH
53862: LD_INT 22
53864: PUSH
53865: LD_INT 23
53867: PUSH
53868: LD_INT 24
53870: PUSH
53871: LD_INT 25
53873: PUSH
53874: LD_INT 26
53876: PUSH
53877: LD_INT 27
53879: PUSH
53880: LD_INT 28
53882: PUSH
53883: LD_INT 30
53885: PUSH
53886: LD_INT 31
53888: PUSH
53889: LD_INT 32
53891: PUSH
53892: LD_INT 33
53894: PUSH
53895: LD_INT 34
53897: PUSH
53898: LD_INT 36
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 101
53936: PUSH
53937: LD_INT 102
53939: PUSH
53940: LD_INT 103
53942: PUSH
53943: LD_INT 104
53945: PUSH
53946: LD_INT 105
53948: PUSH
53949: LD_INT 106
53951: PUSH
53952: LD_INT 107
53954: PUSH
53955: LD_INT 108
53957: PUSH
53958: LD_INT 109
53960: PUSH
53961: LD_INT 110
53963: PUSH
53964: LD_INT 111
53966: PUSH
53967: LD_INT 112
53969: PUSH
53970: LD_INT 113
53972: PUSH
53973: LD_INT 114
53975: PUSH
53976: LD_INT 116
53978: PUSH
53979: LD_INT 117
53981: PUSH
53982: LD_INT 118
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: ST_TO_ADDR
54008: GO 55247
54010: LD_INT 14
54012: DOUBLE
54013: EQUAL
54014: IFTRUE 54018
54016: GO 54242
54018: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
54019: LD_ADDR_VAR 0 2
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 3
54032: PUSH
54033: LD_INT 4
54035: PUSH
54036: LD_INT 5
54038: PUSH
54039: LD_INT 6
54041: PUSH
54042: LD_INT 7
54044: PUSH
54045: LD_INT 8
54047: PUSH
54048: LD_INT 9
54050: PUSH
54051: LD_INT 10
54053: PUSH
54054: LD_INT 11
54056: PUSH
54057: LD_INT 12
54059: PUSH
54060: LD_INT 13
54062: PUSH
54063: LD_INT 14
54065: PUSH
54066: LD_INT 15
54068: PUSH
54069: LD_INT 16
54071: PUSH
54072: LD_INT 17
54074: PUSH
54075: LD_INT 18
54077: PUSH
54078: LD_INT 19
54080: PUSH
54081: LD_INT 20
54083: PUSH
54084: LD_INT 21
54086: PUSH
54087: LD_INT 22
54089: PUSH
54090: LD_INT 23
54092: PUSH
54093: LD_INT 24
54095: PUSH
54096: LD_INT 25
54098: PUSH
54099: LD_INT 26
54101: PUSH
54102: LD_INT 27
54104: PUSH
54105: LD_INT 28
54107: PUSH
54108: LD_INT 29
54110: PUSH
54111: LD_INT 30
54113: PUSH
54114: LD_INT 31
54116: PUSH
54117: LD_INT 32
54119: PUSH
54120: LD_INT 33
54122: PUSH
54123: LD_INT 34
54125: PUSH
54126: LD_INT 36
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 101
54168: PUSH
54169: LD_INT 102
54171: PUSH
54172: LD_INT 103
54174: PUSH
54175: LD_INT 104
54177: PUSH
54178: LD_INT 105
54180: PUSH
54181: LD_INT 106
54183: PUSH
54184: LD_INT 107
54186: PUSH
54187: LD_INT 108
54189: PUSH
54190: LD_INT 109
54192: PUSH
54193: LD_INT 110
54195: PUSH
54196: LD_INT 111
54198: PUSH
54199: LD_INT 112
54201: PUSH
54202: LD_INT 113
54204: PUSH
54205: LD_INT 114
54207: PUSH
54208: LD_INT 116
54210: PUSH
54211: LD_INT 117
54213: PUSH
54214: LD_INT 118
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: ST_TO_ADDR
54240: GO 55247
54242: LD_INT 15
54244: DOUBLE
54245: EQUAL
54246: IFTRUE 54250
54248: GO 54474
54250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54251: LD_ADDR_VAR 0 2
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 3
54264: PUSH
54265: LD_INT 4
54267: PUSH
54268: LD_INT 5
54270: PUSH
54271: LD_INT 6
54273: PUSH
54274: LD_INT 7
54276: PUSH
54277: LD_INT 8
54279: PUSH
54280: LD_INT 9
54282: PUSH
54283: LD_INT 10
54285: PUSH
54286: LD_INT 11
54288: PUSH
54289: LD_INT 12
54291: PUSH
54292: LD_INT 13
54294: PUSH
54295: LD_INT 14
54297: PUSH
54298: LD_INT 15
54300: PUSH
54301: LD_INT 16
54303: PUSH
54304: LD_INT 17
54306: PUSH
54307: LD_INT 18
54309: PUSH
54310: LD_INT 19
54312: PUSH
54313: LD_INT 20
54315: PUSH
54316: LD_INT 21
54318: PUSH
54319: LD_INT 22
54321: PUSH
54322: LD_INT 23
54324: PUSH
54325: LD_INT 24
54327: PUSH
54328: LD_INT 25
54330: PUSH
54331: LD_INT 26
54333: PUSH
54334: LD_INT 27
54336: PUSH
54337: LD_INT 28
54339: PUSH
54340: LD_INT 29
54342: PUSH
54343: LD_INT 30
54345: PUSH
54346: LD_INT 31
54348: PUSH
54349: LD_INT 32
54351: PUSH
54352: LD_INT 33
54354: PUSH
54355: LD_INT 34
54357: PUSH
54358: LD_INT 36
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 101
54400: PUSH
54401: LD_INT 102
54403: PUSH
54404: LD_INT 103
54406: PUSH
54407: LD_INT 104
54409: PUSH
54410: LD_INT 105
54412: PUSH
54413: LD_INT 106
54415: PUSH
54416: LD_INT 107
54418: PUSH
54419: LD_INT 108
54421: PUSH
54422: LD_INT 109
54424: PUSH
54425: LD_INT 110
54427: PUSH
54428: LD_INT 111
54430: PUSH
54431: LD_INT 112
54433: PUSH
54434: LD_INT 113
54436: PUSH
54437: LD_INT 114
54439: PUSH
54440: LD_INT 116
54442: PUSH
54443: LD_INT 117
54445: PUSH
54446: LD_INT 118
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: ST_TO_ADDR
54472: GO 55247
54474: LD_INT 16
54476: DOUBLE
54477: EQUAL
54478: IFTRUE 54482
54480: GO 54618
54482: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54483: LD_ADDR_VAR 0 2
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: LD_INT 4
54493: PUSH
54494: LD_INT 5
54496: PUSH
54497: LD_INT 7
54499: PUSH
54500: LD_INT 11
54502: PUSH
54503: LD_INT 12
54505: PUSH
54506: LD_INT 15
54508: PUSH
54509: LD_INT 16
54511: PUSH
54512: LD_INT 20
54514: PUSH
54515: LD_INT 21
54517: PUSH
54518: LD_INT 22
54520: PUSH
54521: LD_INT 23
54523: PUSH
54524: LD_INT 25
54526: PUSH
54527: LD_INT 26
54529: PUSH
54530: LD_INT 30
54532: PUSH
54533: LD_INT 31
54535: PUSH
54536: LD_INT 32
54538: PUSH
54539: LD_INT 33
54541: PUSH
54542: LD_INT 34
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 101
54568: PUSH
54569: LD_INT 102
54571: PUSH
54572: LD_INT 103
54574: PUSH
54575: LD_INT 106
54577: PUSH
54578: LD_INT 108
54580: PUSH
54581: LD_INT 112
54583: PUSH
54584: LD_INT 113
54586: PUSH
54587: LD_INT 114
54589: PUSH
54590: LD_INT 116
54592: PUSH
54593: LD_INT 117
54595: PUSH
54596: LD_INT 118
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: ST_TO_ADDR
54616: GO 55247
54618: LD_INT 17
54620: DOUBLE
54621: EQUAL
54622: IFTRUE 54626
54624: GO 54850
54626: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54627: LD_ADDR_VAR 0 2
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: LD_INT 3
54640: PUSH
54641: LD_INT 4
54643: PUSH
54644: LD_INT 5
54646: PUSH
54647: LD_INT 6
54649: PUSH
54650: LD_INT 7
54652: PUSH
54653: LD_INT 8
54655: PUSH
54656: LD_INT 9
54658: PUSH
54659: LD_INT 10
54661: PUSH
54662: LD_INT 11
54664: PUSH
54665: LD_INT 12
54667: PUSH
54668: LD_INT 13
54670: PUSH
54671: LD_INT 14
54673: PUSH
54674: LD_INT 15
54676: PUSH
54677: LD_INT 16
54679: PUSH
54680: LD_INT 17
54682: PUSH
54683: LD_INT 18
54685: PUSH
54686: LD_INT 19
54688: PUSH
54689: LD_INT 20
54691: PUSH
54692: LD_INT 21
54694: PUSH
54695: LD_INT 22
54697: PUSH
54698: LD_INT 23
54700: PUSH
54701: LD_INT 24
54703: PUSH
54704: LD_INT 25
54706: PUSH
54707: LD_INT 26
54709: PUSH
54710: LD_INT 27
54712: PUSH
54713: LD_INT 28
54715: PUSH
54716: LD_INT 29
54718: PUSH
54719: LD_INT 30
54721: PUSH
54722: LD_INT 31
54724: PUSH
54725: LD_INT 32
54727: PUSH
54728: LD_INT 33
54730: PUSH
54731: LD_INT 34
54733: PUSH
54734: LD_INT 36
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 101
54776: PUSH
54777: LD_INT 102
54779: PUSH
54780: LD_INT 103
54782: PUSH
54783: LD_INT 104
54785: PUSH
54786: LD_INT 105
54788: PUSH
54789: LD_INT 106
54791: PUSH
54792: LD_INT 107
54794: PUSH
54795: LD_INT 108
54797: PUSH
54798: LD_INT 109
54800: PUSH
54801: LD_INT 110
54803: PUSH
54804: LD_INT 111
54806: PUSH
54807: LD_INT 112
54809: PUSH
54810: LD_INT 113
54812: PUSH
54813: LD_INT 114
54815: PUSH
54816: LD_INT 116
54818: PUSH
54819: LD_INT 117
54821: PUSH
54822: LD_INT 118
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: ST_TO_ADDR
54848: GO 55247
54850: LD_INT 18
54852: DOUBLE
54853: EQUAL
54854: IFTRUE 54858
54856: GO 55006
54858: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54859: LD_ADDR_VAR 0 2
54863: PUSH
54864: LD_INT 2
54866: PUSH
54867: LD_INT 4
54869: PUSH
54870: LD_INT 5
54872: PUSH
54873: LD_INT 7
54875: PUSH
54876: LD_INT 11
54878: PUSH
54879: LD_INT 12
54881: PUSH
54882: LD_INT 15
54884: PUSH
54885: LD_INT 16
54887: PUSH
54888: LD_INT 20
54890: PUSH
54891: LD_INT 21
54893: PUSH
54894: LD_INT 22
54896: PUSH
54897: LD_INT 23
54899: PUSH
54900: LD_INT 25
54902: PUSH
54903: LD_INT 26
54905: PUSH
54906: LD_INT 30
54908: PUSH
54909: LD_INT 31
54911: PUSH
54912: LD_INT 32
54914: PUSH
54915: LD_INT 33
54917: PUSH
54918: LD_INT 34
54920: PUSH
54921: LD_INT 35
54923: PUSH
54924: LD_INT 36
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 101
54952: PUSH
54953: LD_INT 102
54955: PUSH
54956: LD_INT 103
54958: PUSH
54959: LD_INT 106
54961: PUSH
54962: LD_INT 108
54964: PUSH
54965: LD_INT 112
54967: PUSH
54968: LD_INT 113
54970: PUSH
54971: LD_INT 114
54973: PUSH
54974: LD_INT 115
54976: PUSH
54977: LD_INT 116
54979: PUSH
54980: LD_INT 117
54982: PUSH
54983: LD_INT 118
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: ST_TO_ADDR
55004: GO 55247
55006: LD_INT 19
55008: DOUBLE
55009: EQUAL
55010: IFTRUE 55014
55012: GO 55246
55014: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
55015: LD_ADDR_VAR 0 2
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 3
55028: PUSH
55029: LD_INT 4
55031: PUSH
55032: LD_INT 5
55034: PUSH
55035: LD_INT 6
55037: PUSH
55038: LD_INT 7
55040: PUSH
55041: LD_INT 8
55043: PUSH
55044: LD_INT 9
55046: PUSH
55047: LD_INT 10
55049: PUSH
55050: LD_INT 11
55052: PUSH
55053: LD_INT 12
55055: PUSH
55056: LD_INT 13
55058: PUSH
55059: LD_INT 14
55061: PUSH
55062: LD_INT 15
55064: PUSH
55065: LD_INT 16
55067: PUSH
55068: LD_INT 17
55070: PUSH
55071: LD_INT 18
55073: PUSH
55074: LD_INT 19
55076: PUSH
55077: LD_INT 20
55079: PUSH
55080: LD_INT 21
55082: PUSH
55083: LD_INT 22
55085: PUSH
55086: LD_INT 23
55088: PUSH
55089: LD_INT 24
55091: PUSH
55092: LD_INT 25
55094: PUSH
55095: LD_INT 26
55097: PUSH
55098: LD_INT 27
55100: PUSH
55101: LD_INT 28
55103: PUSH
55104: LD_INT 29
55106: PUSH
55107: LD_INT 30
55109: PUSH
55110: LD_INT 31
55112: PUSH
55113: LD_INT 32
55115: PUSH
55116: LD_INT 33
55118: PUSH
55119: LD_INT 34
55121: PUSH
55122: LD_INT 35
55124: PUSH
55125: LD_INT 36
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 101
55168: PUSH
55169: LD_INT 102
55171: PUSH
55172: LD_INT 103
55174: PUSH
55175: LD_INT 104
55177: PUSH
55178: LD_INT 105
55180: PUSH
55181: LD_INT 106
55183: PUSH
55184: LD_INT 107
55186: PUSH
55187: LD_INT 108
55189: PUSH
55190: LD_INT 109
55192: PUSH
55193: LD_INT 110
55195: PUSH
55196: LD_INT 111
55198: PUSH
55199: LD_INT 112
55201: PUSH
55202: LD_INT 113
55204: PUSH
55205: LD_INT 114
55207: PUSH
55208: LD_INT 115
55210: PUSH
55211: LD_INT 116
55213: PUSH
55214: LD_INT 117
55216: PUSH
55217: LD_INT 118
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: ST_TO_ADDR
55244: GO 55247
55246: POP
// end else
55247: GO 55478
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55249: LD_ADDR_VAR 0 2
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 2
55259: PUSH
55260: LD_INT 3
55262: PUSH
55263: LD_INT 4
55265: PUSH
55266: LD_INT 5
55268: PUSH
55269: LD_INT 6
55271: PUSH
55272: LD_INT 7
55274: PUSH
55275: LD_INT 8
55277: PUSH
55278: LD_INT 9
55280: PUSH
55281: LD_INT 10
55283: PUSH
55284: LD_INT 11
55286: PUSH
55287: LD_INT 12
55289: PUSH
55290: LD_INT 13
55292: PUSH
55293: LD_INT 14
55295: PUSH
55296: LD_INT 15
55298: PUSH
55299: LD_INT 16
55301: PUSH
55302: LD_INT 17
55304: PUSH
55305: LD_INT 18
55307: PUSH
55308: LD_INT 19
55310: PUSH
55311: LD_INT 20
55313: PUSH
55314: LD_INT 21
55316: PUSH
55317: LD_INT 22
55319: PUSH
55320: LD_INT 23
55322: PUSH
55323: LD_INT 24
55325: PUSH
55326: LD_INT 25
55328: PUSH
55329: LD_INT 26
55331: PUSH
55332: LD_INT 27
55334: PUSH
55335: LD_INT 28
55337: PUSH
55338: LD_INT 29
55340: PUSH
55341: LD_INT 30
55343: PUSH
55344: LD_INT 31
55346: PUSH
55347: LD_INT 32
55349: PUSH
55350: LD_INT 33
55352: PUSH
55353: LD_INT 34
55355: PUSH
55356: LD_INT 35
55358: PUSH
55359: LD_INT 36
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 101
55402: PUSH
55403: LD_INT 102
55405: PUSH
55406: LD_INT 103
55408: PUSH
55409: LD_INT 104
55411: PUSH
55412: LD_INT 105
55414: PUSH
55415: LD_INT 106
55417: PUSH
55418: LD_INT 107
55420: PUSH
55421: LD_INT 108
55423: PUSH
55424: LD_INT 109
55426: PUSH
55427: LD_INT 110
55429: PUSH
55430: LD_INT 111
55432: PUSH
55433: LD_INT 112
55435: PUSH
55436: LD_INT 113
55438: PUSH
55439: LD_INT 114
55441: PUSH
55442: LD_INT 115
55444: PUSH
55445: LD_INT 116
55447: PUSH
55448: LD_INT 117
55450: PUSH
55451: LD_INT 118
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: ST_TO_ADDR
// if result then
55478: LD_VAR 0 2
55482: IFFALSE 56268
// begin normal :=  ;
55484: LD_ADDR_VAR 0 5
55488: PUSH
55489: LD_STRING 
55491: ST_TO_ADDR
// hardcore :=  ;
55492: LD_ADDR_VAR 0 6
55496: PUSH
55497: LD_STRING 
55499: ST_TO_ADDR
// active :=  ;
55500: LD_ADDR_VAR 0 7
55504: PUSH
55505: LD_STRING 
55507: ST_TO_ADDR
// for i = 1 to normalCounter do
55508: LD_ADDR_VAR 0 8
55512: PUSH
55513: DOUBLE
55514: LD_INT 1
55516: DEC
55517: ST_TO_ADDR
55518: LD_EXP 82
55522: PUSH
55523: FOR_TO
55524: IFFALSE 55625
// begin tmp := 0 ;
55526: LD_ADDR_VAR 0 3
55530: PUSH
55531: LD_STRING 0
55533: ST_TO_ADDR
// if result [ 1 ] then
55534: LD_VAR 0 2
55538: PUSH
55539: LD_INT 1
55541: ARRAY
55542: IFFALSE 55607
// if result [ 1 ] [ 1 ] = i then
55544: LD_VAR 0 2
55548: PUSH
55549: LD_INT 1
55551: ARRAY
55552: PUSH
55553: LD_INT 1
55555: ARRAY
55556: PUSH
55557: LD_VAR 0 8
55561: EQUAL
55562: IFFALSE 55607
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55564: LD_ADDR_VAR 0 2
55568: PUSH
55569: LD_VAR 0 2
55573: PPUSH
55574: LD_INT 1
55576: PPUSH
55577: LD_VAR 0 2
55581: PUSH
55582: LD_INT 1
55584: ARRAY
55585: PPUSH
55586: LD_INT 1
55588: PPUSH
55589: CALL_OW 3
55593: PPUSH
55594: CALL_OW 1
55598: ST_TO_ADDR
// tmp := 1 ;
55599: LD_ADDR_VAR 0 3
55603: PUSH
55604: LD_STRING 1
55606: ST_TO_ADDR
// end ; normal := normal & tmp ;
55607: LD_ADDR_VAR 0 5
55611: PUSH
55612: LD_VAR 0 5
55616: PUSH
55617: LD_VAR 0 3
55621: STR
55622: ST_TO_ADDR
// end ;
55623: GO 55523
55625: POP
55626: POP
// for i = 1 to hardcoreCounter do
55627: LD_ADDR_VAR 0 8
55631: PUSH
55632: DOUBLE
55633: LD_INT 1
55635: DEC
55636: ST_TO_ADDR
55637: LD_EXP 83
55641: PUSH
55642: FOR_TO
55643: IFFALSE 55748
// begin tmp := 0 ;
55645: LD_ADDR_VAR 0 3
55649: PUSH
55650: LD_STRING 0
55652: ST_TO_ADDR
// if result [ 2 ] then
55653: LD_VAR 0 2
55657: PUSH
55658: LD_INT 2
55660: ARRAY
55661: IFFALSE 55730
// if result [ 2 ] [ 1 ] = 100 + i then
55663: LD_VAR 0 2
55667: PUSH
55668: LD_INT 2
55670: ARRAY
55671: PUSH
55672: LD_INT 1
55674: ARRAY
55675: PUSH
55676: LD_INT 100
55678: PUSH
55679: LD_VAR 0 8
55683: PLUS
55684: EQUAL
55685: IFFALSE 55730
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55687: LD_ADDR_VAR 0 2
55691: PUSH
55692: LD_VAR 0 2
55696: PPUSH
55697: LD_INT 2
55699: PPUSH
55700: LD_VAR 0 2
55704: PUSH
55705: LD_INT 2
55707: ARRAY
55708: PPUSH
55709: LD_INT 1
55711: PPUSH
55712: CALL_OW 3
55716: PPUSH
55717: CALL_OW 1
55721: ST_TO_ADDR
// tmp := 1 ;
55722: LD_ADDR_VAR 0 3
55726: PUSH
55727: LD_STRING 1
55729: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55730: LD_ADDR_VAR 0 6
55734: PUSH
55735: LD_VAR 0 6
55739: PUSH
55740: LD_VAR 0 3
55744: STR
55745: ST_TO_ADDR
// end ;
55746: GO 55642
55748: POP
55749: POP
// if isGameLoad then
55750: LD_VAR 0 1
55754: IFFALSE 56229
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55756: LD_ADDR_VAR 0 4
55760: PUSH
55761: LD_EXP 86
55765: PUSH
55766: LD_EXP 85
55770: PUSH
55771: LD_EXP 87
55775: PUSH
55776: LD_EXP 84
55780: PUSH
55781: LD_EXP 88
55785: PUSH
55786: LD_EXP 89
55790: PUSH
55791: LD_EXP 90
55795: PUSH
55796: LD_EXP 91
55800: PUSH
55801: LD_EXP 92
55805: PUSH
55806: LD_EXP 93
55810: PUSH
55811: LD_EXP 94
55815: PUSH
55816: LD_EXP 95
55820: PUSH
55821: LD_EXP 96
55825: PUSH
55826: LD_EXP 97
55830: PUSH
55831: LD_EXP 105
55835: PUSH
55836: LD_EXP 106
55840: PUSH
55841: LD_EXP 107
55845: PUSH
55846: LD_EXP 108
55850: PUSH
55851: LD_EXP 110
55855: PUSH
55856: LD_EXP 111
55860: PUSH
55861: LD_EXP 112
55865: PUSH
55866: LD_EXP 115
55870: PUSH
55871: LD_EXP 117
55875: PUSH
55876: LD_EXP 118
55880: PUSH
55881: LD_EXP 119
55885: PUSH
55886: LD_EXP 121
55890: PUSH
55891: LD_EXP 122
55895: PUSH
55896: LD_EXP 125
55900: PUSH
55901: LD_EXP 126
55905: PUSH
55906: LD_EXP 127
55910: PUSH
55911: LD_EXP 128
55915: PUSH
55916: LD_EXP 129
55920: PUSH
55921: LD_EXP 130
55925: PUSH
55926: LD_EXP 131
55930: PUSH
55931: LD_EXP 132
55935: PUSH
55936: LD_EXP 133
55940: PUSH
55941: LD_EXP 98
55945: PUSH
55946: LD_EXP 99
55950: PUSH
55951: LD_EXP 102
55955: PUSH
55956: LD_EXP 103
55960: PUSH
55961: LD_EXP 104
55965: PUSH
55966: LD_EXP 100
55970: PUSH
55971: LD_EXP 101
55975: PUSH
55976: LD_EXP 109
55980: PUSH
55981: LD_EXP 113
55985: PUSH
55986: LD_EXP 114
55990: PUSH
55991: LD_EXP 116
55995: PUSH
55996: LD_EXP 120
56000: PUSH
56001: LD_EXP 123
56005: PUSH
56006: LD_EXP 124
56010: PUSH
56011: LD_EXP 134
56015: PUSH
56016: LD_EXP 135
56020: PUSH
56021: LD_EXP 136
56025: PUSH
56026: LD_EXP 137
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: ST_TO_ADDR
// tmp :=  ;
56087: LD_ADDR_VAR 0 3
56091: PUSH
56092: LD_STRING 
56094: ST_TO_ADDR
// for i = 1 to normalCounter do
56095: LD_ADDR_VAR 0 8
56099: PUSH
56100: DOUBLE
56101: LD_INT 1
56103: DEC
56104: ST_TO_ADDR
56105: LD_EXP 82
56109: PUSH
56110: FOR_TO
56111: IFFALSE 56147
// begin if flags [ i ] then
56113: LD_VAR 0 4
56117: PUSH
56118: LD_VAR 0 8
56122: ARRAY
56123: IFFALSE 56145
// tmp := tmp & i & ; ;
56125: LD_ADDR_VAR 0 3
56129: PUSH
56130: LD_VAR 0 3
56134: PUSH
56135: LD_VAR 0 8
56139: STR
56140: PUSH
56141: LD_STRING ;
56143: STR
56144: ST_TO_ADDR
// end ;
56145: GO 56110
56147: POP
56148: POP
// for i = 1 to hardcoreCounter do
56149: LD_ADDR_VAR 0 8
56153: PUSH
56154: DOUBLE
56155: LD_INT 1
56157: DEC
56158: ST_TO_ADDR
56159: LD_EXP 83
56163: PUSH
56164: FOR_TO
56165: IFFALSE 56211
// begin if flags [ normalCounter + i ] then
56167: LD_VAR 0 4
56171: PUSH
56172: LD_EXP 82
56176: PUSH
56177: LD_VAR 0 8
56181: PLUS
56182: ARRAY
56183: IFFALSE 56209
// tmp := tmp & ( 100 + i ) & ; ;
56185: LD_ADDR_VAR 0 3
56189: PUSH
56190: LD_VAR 0 3
56194: PUSH
56195: LD_INT 100
56197: PUSH
56198: LD_VAR 0 8
56202: PLUS
56203: STR
56204: PUSH
56205: LD_STRING ;
56207: STR
56208: ST_TO_ADDR
// end ;
56209: GO 56164
56211: POP
56212: POP
// if tmp then
56213: LD_VAR 0 3
56217: IFFALSE 56229
// active := tmp ;
56219: LD_ADDR_VAR 0 7
56223: PUSH
56224: LD_VAR 0 3
56228: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56229: LD_STRING getStreamItemsFromMission("
56231: PUSH
56232: LD_VAR 0 5
56236: STR
56237: PUSH
56238: LD_STRING ","
56240: STR
56241: PUSH
56242: LD_VAR 0 6
56246: STR
56247: PUSH
56248: LD_STRING ","
56250: STR
56251: PUSH
56252: LD_VAR 0 7
56256: STR
56257: PUSH
56258: LD_STRING ")
56260: STR
56261: PPUSH
56262: CALL_OW 559
// end else
56266: GO 56275
// ToLua ( getStreamItemsFromMission("","","") ) ;
56268: LD_STRING getStreamItemsFromMission("","","")
56270: PPUSH
56271: CALL_OW 559
// end ;
56275: LD_VAR 0 2
56279: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56280: LD_EXP 81
56284: PUSH
56285: LD_EXP 86
56289: AND
56290: IFFALSE 56414
56292: GO 56294
56294: DISABLE
56295: LD_INT 0
56297: PPUSH
56298: PPUSH
// begin enable ;
56299: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56300: LD_ADDR_VAR 0 2
56304: PUSH
56305: LD_INT 22
56307: PUSH
56308: LD_OWVAR 2
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: LD_INT 34
56322: PUSH
56323: LD_INT 7
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 34
56332: PUSH
56333: LD_INT 45
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 34
56342: PUSH
56343: LD_INT 28
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 34
56352: PUSH
56353: LD_INT 47
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PPUSH
56371: CALL_OW 69
56375: ST_TO_ADDR
// if not tmp then
56376: LD_VAR 0 2
56380: NOT
56381: IFFALSE 56385
// exit ;
56383: GO 56414
// for i in tmp do
56385: LD_ADDR_VAR 0 1
56389: PUSH
56390: LD_VAR 0 2
56394: PUSH
56395: FOR_IN
56396: IFFALSE 56412
// begin SetLives ( i , 0 ) ;
56398: LD_VAR 0 1
56402: PPUSH
56403: LD_INT 0
56405: PPUSH
56406: CALL_OW 234
// end ;
56410: GO 56395
56412: POP
56413: POP
// end ;
56414: PPOPN 2
56416: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56417: LD_EXP 81
56421: PUSH
56422: LD_EXP 87
56426: AND
56427: IFFALSE 56511
56429: GO 56431
56431: DISABLE
56432: LD_INT 0
56434: PPUSH
56435: PPUSH
// begin enable ;
56436: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56437: LD_ADDR_VAR 0 2
56441: PUSH
56442: LD_INT 22
56444: PUSH
56445: LD_OWVAR 2
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 32
56456: PUSH
56457: LD_INT 3
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PPUSH
56468: CALL_OW 69
56472: ST_TO_ADDR
// if not tmp then
56473: LD_VAR 0 2
56477: NOT
56478: IFFALSE 56482
// exit ;
56480: GO 56511
// for i in tmp do
56482: LD_ADDR_VAR 0 1
56486: PUSH
56487: LD_VAR 0 2
56491: PUSH
56492: FOR_IN
56493: IFFALSE 56509
// begin SetLives ( i , 0 ) ;
56495: LD_VAR 0 1
56499: PPUSH
56500: LD_INT 0
56502: PPUSH
56503: CALL_OW 234
// end ;
56507: GO 56492
56509: POP
56510: POP
// end ;
56511: PPOPN 2
56513: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56514: LD_EXP 81
56518: PUSH
56519: LD_EXP 84
56523: AND
56524: IFFALSE 56617
56526: GO 56528
56528: DISABLE
56529: LD_INT 0
56531: PPUSH
// begin enable ;
56532: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56533: LD_ADDR_VAR 0 1
56537: PUSH
56538: LD_INT 22
56540: PUSH
56541: LD_OWVAR 2
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 2
56552: PUSH
56553: LD_INT 25
56555: PUSH
56556: LD_INT 5
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 25
56565: PUSH
56566: LD_INT 9
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 25
56575: PUSH
56576: LD_INT 8
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PPUSH
56593: CALL_OW 69
56597: PUSH
56598: FOR_IN
56599: IFFALSE 56615
// begin SetClass ( i , 1 ) ;
56601: LD_VAR 0 1
56605: PPUSH
56606: LD_INT 1
56608: PPUSH
56609: CALL_OW 336
// end ;
56613: GO 56598
56615: POP
56616: POP
// end ;
56617: PPOPN 1
56619: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56620: LD_EXP 81
56624: PUSH
56625: LD_EXP 85
56629: AND
56630: PUSH
56631: LD_OWVAR 65
56635: PUSH
56636: LD_INT 7
56638: LESS
56639: AND
56640: IFFALSE 56654
56642: GO 56644
56644: DISABLE
// begin enable ;
56645: ENABLE
// game_speed := 7 ;
56646: LD_ADDR_OWVAR 65
56650: PUSH
56651: LD_INT 7
56653: ST_TO_ADDR
// end ;
56654: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56655: LD_EXP 81
56659: PUSH
56660: LD_EXP 88
56664: AND
56665: IFFALSE 56867
56667: GO 56669
56669: DISABLE
56670: LD_INT 0
56672: PPUSH
56673: PPUSH
56674: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56675: LD_ADDR_VAR 0 3
56679: PUSH
56680: LD_INT 81
56682: PUSH
56683: LD_OWVAR 2
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 21
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PPUSH
56706: CALL_OW 69
56710: ST_TO_ADDR
// if not tmp then
56711: LD_VAR 0 3
56715: NOT
56716: IFFALSE 56720
// exit ;
56718: GO 56867
// if tmp > 5 then
56720: LD_VAR 0 3
56724: PUSH
56725: LD_INT 5
56727: GREATER
56728: IFFALSE 56740
// k := 5 else
56730: LD_ADDR_VAR 0 2
56734: PUSH
56735: LD_INT 5
56737: ST_TO_ADDR
56738: GO 56750
// k := tmp ;
56740: LD_ADDR_VAR 0 2
56744: PUSH
56745: LD_VAR 0 3
56749: ST_TO_ADDR
// for i := 1 to k do
56750: LD_ADDR_VAR 0 1
56754: PUSH
56755: DOUBLE
56756: LD_INT 1
56758: DEC
56759: ST_TO_ADDR
56760: LD_VAR 0 2
56764: PUSH
56765: FOR_TO
56766: IFFALSE 56865
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56768: LD_VAR 0 3
56772: PUSH
56773: LD_VAR 0 1
56777: ARRAY
56778: PPUSH
56779: LD_VAR 0 1
56783: PUSH
56784: LD_INT 4
56786: MOD
56787: PUSH
56788: LD_INT 1
56790: PLUS
56791: PPUSH
56792: CALL_OW 259
56796: PUSH
56797: LD_INT 10
56799: LESS
56800: IFFALSE 56863
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56802: LD_VAR 0 3
56806: PUSH
56807: LD_VAR 0 1
56811: ARRAY
56812: PPUSH
56813: LD_VAR 0 1
56817: PUSH
56818: LD_INT 4
56820: MOD
56821: PUSH
56822: LD_INT 1
56824: PLUS
56825: PPUSH
56826: LD_VAR 0 3
56830: PUSH
56831: LD_VAR 0 1
56835: ARRAY
56836: PPUSH
56837: LD_VAR 0 1
56841: PUSH
56842: LD_INT 4
56844: MOD
56845: PUSH
56846: LD_INT 1
56848: PLUS
56849: PPUSH
56850: CALL_OW 259
56854: PUSH
56855: LD_INT 1
56857: PLUS
56858: PPUSH
56859: CALL_OW 237
56863: GO 56765
56865: POP
56866: POP
// end ;
56867: PPOPN 3
56869: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56870: LD_EXP 81
56874: PUSH
56875: LD_EXP 89
56879: AND
56880: IFFALSE 56900
56882: GO 56884
56884: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56885: LD_INT 4
56887: PPUSH
56888: LD_OWVAR 2
56892: PPUSH
56893: LD_INT 0
56895: PPUSH
56896: CALL_OW 324
56900: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56901: LD_EXP 81
56905: PUSH
56906: LD_EXP 118
56910: AND
56911: IFFALSE 56931
56913: GO 56915
56915: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56916: LD_INT 19
56918: PPUSH
56919: LD_OWVAR 2
56923: PPUSH
56924: LD_INT 0
56926: PPUSH
56927: CALL_OW 324
56931: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56932: LD_EXP 81
56936: PUSH
56937: LD_EXP 90
56941: AND
56942: IFFALSE 57044
56944: GO 56946
56946: DISABLE
56947: LD_INT 0
56949: PPUSH
56950: PPUSH
// begin enable ;
56951: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56952: LD_ADDR_VAR 0 2
56956: PUSH
56957: LD_INT 22
56959: PUSH
56960: LD_OWVAR 2
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 34
56974: PUSH
56975: LD_INT 11
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 34
56984: PUSH
56985: LD_INT 30
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PPUSH
57001: CALL_OW 69
57005: ST_TO_ADDR
// if not tmp then
57006: LD_VAR 0 2
57010: NOT
57011: IFFALSE 57015
// exit ;
57013: GO 57044
// for i in tmp do
57015: LD_ADDR_VAR 0 1
57019: PUSH
57020: LD_VAR 0 2
57024: PUSH
57025: FOR_IN
57026: IFFALSE 57042
// begin SetLives ( i , 0 ) ;
57028: LD_VAR 0 1
57032: PPUSH
57033: LD_INT 0
57035: PPUSH
57036: CALL_OW 234
// end ;
57040: GO 57025
57042: POP
57043: POP
// end ;
57044: PPOPN 2
57046: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57047: LD_EXP 81
57051: PUSH
57052: LD_EXP 91
57056: AND
57057: IFFALSE 57077
57059: GO 57061
57061: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57062: LD_INT 32
57064: PPUSH
57065: LD_OWVAR 2
57069: PPUSH
57070: LD_INT 0
57072: PPUSH
57073: CALL_OW 324
57077: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57078: LD_EXP 81
57082: PUSH
57083: LD_EXP 92
57087: AND
57088: IFFALSE 57269
57090: GO 57092
57092: DISABLE
57093: LD_INT 0
57095: PPUSH
57096: PPUSH
57097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57098: LD_ADDR_VAR 0 2
57102: PUSH
57103: LD_INT 22
57105: PUSH
57106: LD_OWVAR 2
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 33
57117: PUSH
57118: LD_INT 3
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PPUSH
57129: CALL_OW 69
57133: ST_TO_ADDR
// if not tmp then
57134: LD_VAR 0 2
57138: NOT
57139: IFFALSE 57143
// exit ;
57141: GO 57269
// side := 0 ;
57143: LD_ADDR_VAR 0 3
57147: PUSH
57148: LD_INT 0
57150: ST_TO_ADDR
// for i := 1 to 8 do
57151: LD_ADDR_VAR 0 1
57155: PUSH
57156: DOUBLE
57157: LD_INT 1
57159: DEC
57160: ST_TO_ADDR
57161: LD_INT 8
57163: PUSH
57164: FOR_TO
57165: IFFALSE 57213
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57167: LD_OWVAR 2
57171: PUSH
57172: LD_VAR 0 1
57176: NONEQUAL
57177: PUSH
57178: LD_OWVAR 2
57182: PPUSH
57183: LD_VAR 0 1
57187: PPUSH
57188: CALL_OW 81
57192: PUSH
57193: LD_INT 2
57195: EQUAL
57196: AND
57197: IFFALSE 57211
// begin side := i ;
57199: LD_ADDR_VAR 0 3
57203: PUSH
57204: LD_VAR 0 1
57208: ST_TO_ADDR
// break ;
57209: GO 57213
// end ;
57211: GO 57164
57213: POP
57214: POP
// if not side then
57215: LD_VAR 0 3
57219: NOT
57220: IFFALSE 57224
// exit ;
57222: GO 57269
// for i := 1 to tmp do
57224: LD_ADDR_VAR 0 1
57228: PUSH
57229: DOUBLE
57230: LD_INT 1
57232: DEC
57233: ST_TO_ADDR
57234: LD_VAR 0 2
57238: PUSH
57239: FOR_TO
57240: IFFALSE 57267
// if Prob ( 60 ) then
57242: LD_INT 60
57244: PPUSH
57245: CALL_OW 13
57249: IFFALSE 57265
// SetSide ( i , side ) ;
57251: LD_VAR 0 1
57255: PPUSH
57256: LD_VAR 0 3
57260: PPUSH
57261: CALL_OW 235
57265: GO 57239
57267: POP
57268: POP
// end ;
57269: PPOPN 3
57271: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57272: LD_EXP 81
57276: PUSH
57277: LD_EXP 94
57281: AND
57282: IFFALSE 57401
57284: GO 57286
57286: DISABLE
57287: LD_INT 0
57289: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57290: LD_ADDR_VAR 0 1
57294: PUSH
57295: LD_INT 22
57297: PUSH
57298: LD_OWVAR 2
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 21
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 3
57319: PUSH
57320: LD_INT 23
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: LIST
57338: PPUSH
57339: CALL_OW 69
57343: PUSH
57344: FOR_IN
57345: IFFALSE 57399
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57347: LD_VAR 0 1
57351: PPUSH
57352: CALL_OW 257
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 2
57362: PUSH
57363: LD_INT 3
57365: PUSH
57366: LD_INT 4
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: IN
57375: IFFALSE 57397
// SetClass ( un , rand ( 1 , 4 ) ) ;
57377: LD_VAR 0 1
57381: PPUSH
57382: LD_INT 1
57384: PPUSH
57385: LD_INT 4
57387: PPUSH
57388: CALL_OW 12
57392: PPUSH
57393: CALL_OW 336
57397: GO 57344
57399: POP
57400: POP
// end ;
57401: PPOPN 1
57403: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57404: LD_EXP 81
57408: PUSH
57409: LD_EXP 93
57413: AND
57414: IFFALSE 57493
57416: GO 57418
57418: DISABLE
57419: LD_INT 0
57421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57422: LD_ADDR_VAR 0 1
57426: PUSH
57427: LD_INT 22
57429: PUSH
57430: LD_OWVAR 2
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 21
57441: PUSH
57442: LD_INT 3
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PPUSH
57453: CALL_OW 69
57457: ST_TO_ADDR
// if not tmp then
57458: LD_VAR 0 1
57462: NOT
57463: IFFALSE 57467
// exit ;
57465: GO 57493
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57467: LD_VAR 0 1
57471: PUSH
57472: LD_INT 1
57474: PPUSH
57475: LD_VAR 0 1
57479: PPUSH
57480: CALL_OW 12
57484: ARRAY
57485: PPUSH
57486: LD_INT 100
57488: PPUSH
57489: CALL_OW 234
// end ;
57493: PPOPN 1
57495: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57496: LD_EXP 81
57500: PUSH
57501: LD_EXP 95
57505: AND
57506: IFFALSE 57604
57508: GO 57510
57510: DISABLE
57511: LD_INT 0
57513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57514: LD_ADDR_VAR 0 1
57518: PUSH
57519: LD_INT 22
57521: PUSH
57522: LD_OWVAR 2
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 21
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PPUSH
57545: CALL_OW 69
57549: ST_TO_ADDR
// if not tmp then
57550: LD_VAR 0 1
57554: NOT
57555: IFFALSE 57559
// exit ;
57557: GO 57604
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57559: LD_VAR 0 1
57563: PUSH
57564: LD_INT 1
57566: PPUSH
57567: LD_VAR 0 1
57571: PPUSH
57572: CALL_OW 12
57576: ARRAY
57577: PPUSH
57578: LD_INT 1
57580: PPUSH
57581: LD_INT 4
57583: PPUSH
57584: CALL_OW 12
57588: PPUSH
57589: LD_INT 3000
57591: PPUSH
57592: LD_INT 9000
57594: PPUSH
57595: CALL_OW 12
57599: PPUSH
57600: CALL_OW 492
// end ;
57604: PPOPN 1
57606: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57607: LD_EXP 81
57611: PUSH
57612: LD_EXP 96
57616: AND
57617: IFFALSE 57637
57619: GO 57621
57621: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57622: LD_INT 1
57624: PPUSH
57625: LD_OWVAR 2
57629: PPUSH
57630: LD_INT 0
57632: PPUSH
57633: CALL_OW 324
57637: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57638: LD_EXP 81
57642: PUSH
57643: LD_EXP 97
57647: AND
57648: IFFALSE 57731
57650: GO 57652
57652: DISABLE
57653: LD_INT 0
57655: PPUSH
57656: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57657: LD_ADDR_VAR 0 2
57661: PUSH
57662: LD_INT 22
57664: PUSH
57665: LD_OWVAR 2
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 21
57676: PUSH
57677: LD_INT 3
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PPUSH
57688: CALL_OW 69
57692: ST_TO_ADDR
// if not tmp then
57693: LD_VAR 0 2
57697: NOT
57698: IFFALSE 57702
// exit ;
57700: GO 57731
// for i in tmp do
57702: LD_ADDR_VAR 0 1
57706: PUSH
57707: LD_VAR 0 2
57711: PUSH
57712: FOR_IN
57713: IFFALSE 57729
// SetBLevel ( i , 10 ) ;
57715: LD_VAR 0 1
57719: PPUSH
57720: LD_INT 10
57722: PPUSH
57723: CALL_OW 241
57727: GO 57712
57729: POP
57730: POP
// end ;
57731: PPOPN 2
57733: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57734: LD_EXP 81
57738: PUSH
57739: LD_EXP 98
57743: AND
57744: IFFALSE 57855
57746: GO 57748
57748: DISABLE
57749: LD_INT 0
57751: PPUSH
57752: PPUSH
57753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57754: LD_ADDR_VAR 0 3
57758: PUSH
57759: LD_INT 22
57761: PUSH
57762: LD_OWVAR 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 25
57773: PUSH
57774: LD_INT 1
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PPUSH
57785: CALL_OW 69
57789: ST_TO_ADDR
// if not tmp then
57790: LD_VAR 0 3
57794: NOT
57795: IFFALSE 57799
// exit ;
57797: GO 57855
// un := tmp [ rand ( 1 , tmp ) ] ;
57799: LD_ADDR_VAR 0 2
57803: PUSH
57804: LD_VAR 0 3
57808: PUSH
57809: LD_INT 1
57811: PPUSH
57812: LD_VAR 0 3
57816: PPUSH
57817: CALL_OW 12
57821: ARRAY
57822: ST_TO_ADDR
// if Crawls ( un ) then
57823: LD_VAR 0 2
57827: PPUSH
57828: CALL_OW 318
57832: IFFALSE 57843
// ComWalk ( un ) ;
57834: LD_VAR 0 2
57838: PPUSH
57839: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57843: LD_VAR 0 2
57847: PPUSH
57848: LD_INT 5
57850: PPUSH
57851: CALL_OW 336
// end ;
57855: PPOPN 3
57857: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57858: LD_EXP 81
57862: PUSH
57863: LD_EXP 99
57867: AND
57868: PUSH
57869: LD_OWVAR 67
57873: PUSH
57874: LD_INT 4
57876: LESS
57877: AND
57878: IFFALSE 57897
57880: GO 57882
57882: DISABLE
// begin Difficulty := Difficulty + 1 ;
57883: LD_ADDR_OWVAR 67
57887: PUSH
57888: LD_OWVAR 67
57892: PUSH
57893: LD_INT 1
57895: PLUS
57896: ST_TO_ADDR
// end ;
57897: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57898: LD_EXP 81
57902: PUSH
57903: LD_EXP 100
57907: AND
57908: IFFALSE 58011
57910: GO 57912
57912: DISABLE
57913: LD_INT 0
57915: PPUSH
// begin for i := 1 to 5 do
57916: LD_ADDR_VAR 0 1
57920: PUSH
57921: DOUBLE
57922: LD_INT 1
57924: DEC
57925: ST_TO_ADDR
57926: LD_INT 5
57928: PUSH
57929: FOR_TO
57930: IFFALSE 58009
// begin uc_nation := nation_nature ;
57932: LD_ADDR_OWVAR 21
57936: PUSH
57937: LD_INT 0
57939: ST_TO_ADDR
// uc_side := 0 ;
57940: LD_ADDR_OWVAR 20
57944: PUSH
57945: LD_INT 0
57947: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57948: LD_ADDR_OWVAR 29
57952: PUSH
57953: LD_INT 12
57955: PUSH
57956: LD_INT 12
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: ST_TO_ADDR
// hc_agressivity := 20 ;
57963: LD_ADDR_OWVAR 35
57967: PUSH
57968: LD_INT 20
57970: ST_TO_ADDR
// hc_class := class_tiger ;
57971: LD_ADDR_OWVAR 28
57975: PUSH
57976: LD_INT 14
57978: ST_TO_ADDR
// hc_gallery :=  ;
57979: LD_ADDR_OWVAR 33
57983: PUSH
57984: LD_STRING 
57986: ST_TO_ADDR
// hc_name :=  ;
57987: LD_ADDR_OWVAR 26
57991: PUSH
57992: LD_STRING 
57994: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57995: CALL_OW 44
57999: PPUSH
58000: LD_INT 0
58002: PPUSH
58003: CALL_OW 51
// end ;
58007: GO 57929
58009: POP
58010: POP
// end ;
58011: PPOPN 1
58013: END
// every 0 0$1 trigger StreamModeActive and sBomb do
58014: LD_EXP 81
58018: PUSH
58019: LD_EXP 101
58023: AND
58024: IFFALSE 58033
58026: GO 58028
58028: DISABLE
// StreamSibBomb ;
58029: CALL 58034 0 0
58033: END
// export function StreamSibBomb ; var i , x , y ; begin
58034: LD_INT 0
58036: PPUSH
58037: PPUSH
58038: PPUSH
58039: PPUSH
// result := false ;
58040: LD_ADDR_VAR 0 1
58044: PUSH
58045: LD_INT 0
58047: ST_TO_ADDR
// for i := 1 to 16 do
58048: LD_ADDR_VAR 0 2
58052: PUSH
58053: DOUBLE
58054: LD_INT 1
58056: DEC
58057: ST_TO_ADDR
58058: LD_INT 16
58060: PUSH
58061: FOR_TO
58062: IFFALSE 58261
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58064: LD_ADDR_VAR 0 3
58068: PUSH
58069: LD_INT 10
58071: PUSH
58072: LD_INT 20
58074: PUSH
58075: LD_INT 30
58077: PUSH
58078: LD_INT 40
58080: PUSH
58081: LD_INT 50
58083: PUSH
58084: LD_INT 60
58086: PUSH
58087: LD_INT 70
58089: PUSH
58090: LD_INT 80
58092: PUSH
58093: LD_INT 90
58095: PUSH
58096: LD_INT 100
58098: PUSH
58099: LD_INT 110
58101: PUSH
58102: LD_INT 120
58104: PUSH
58105: LD_INT 130
58107: PUSH
58108: LD_INT 140
58110: PUSH
58111: LD_INT 150
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PPUSH
58134: LD_INT 15
58136: PPUSH
58137: CALL_OW 12
58141: ARRAY
58142: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58143: LD_ADDR_VAR 0 4
58147: PUSH
58148: LD_INT 10
58150: PUSH
58151: LD_INT 20
58153: PUSH
58154: LD_INT 30
58156: PUSH
58157: LD_INT 40
58159: PUSH
58160: LD_INT 50
58162: PUSH
58163: LD_INT 60
58165: PUSH
58166: LD_INT 70
58168: PUSH
58169: LD_INT 80
58171: PUSH
58172: LD_INT 90
58174: PUSH
58175: LD_INT 100
58177: PUSH
58178: LD_INT 110
58180: PUSH
58181: LD_INT 120
58183: PUSH
58184: LD_INT 130
58186: PUSH
58187: LD_INT 140
58189: PUSH
58190: LD_INT 150
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: PUSH
58210: LD_INT 1
58212: PPUSH
58213: LD_INT 15
58215: PPUSH
58216: CALL_OW 12
58220: ARRAY
58221: ST_TO_ADDR
// if ValidHex ( x , y ) then
58222: LD_VAR 0 3
58226: PPUSH
58227: LD_VAR 0 4
58231: PPUSH
58232: CALL_OW 488
58236: IFFALSE 58259
// begin result := [ x , y ] ;
58238: LD_ADDR_VAR 0 1
58242: PUSH
58243: LD_VAR 0 3
58247: PUSH
58248: LD_VAR 0 4
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: ST_TO_ADDR
// break ;
58257: GO 58261
// end ; end ;
58259: GO 58061
58261: POP
58262: POP
// if result then
58263: LD_VAR 0 1
58267: IFFALSE 58327
// begin ToLua ( playSibBomb() ) ;
58269: LD_STRING playSibBomb()
58271: PPUSH
58272: CALL_OW 559
// wait ( 0 0$14 ) ;
58276: LD_INT 490
58278: PPUSH
58279: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58283: LD_VAR 0 1
58287: PUSH
58288: LD_INT 1
58290: ARRAY
58291: PPUSH
58292: LD_VAR 0 1
58296: PUSH
58297: LD_INT 2
58299: ARRAY
58300: PPUSH
58301: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58305: LD_VAR 0 1
58309: PUSH
58310: LD_INT 1
58312: ARRAY
58313: PPUSH
58314: LD_VAR 0 1
58318: PUSH
58319: LD_INT 2
58321: ARRAY
58322: PPUSH
58323: CALL_OW 429
// end ; end ;
58327: LD_VAR 0 1
58331: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58332: LD_EXP 81
58336: PUSH
58337: LD_EXP 103
58341: AND
58342: IFFALSE 58354
58344: GO 58346
58346: DISABLE
// YouLost (  ) ;
58347: LD_STRING 
58349: PPUSH
58350: CALL_OW 104
58354: END
// every 0 0$1 trigger StreamModeActive and sFog do
58355: LD_EXP 81
58359: PUSH
58360: LD_EXP 102
58364: AND
58365: IFFALSE 58379
58367: GO 58369
58369: DISABLE
// FogOff ( your_side ) ;
58370: LD_OWVAR 2
58374: PPUSH
58375: CALL_OW 344
58379: END
// every 0 0$1 trigger StreamModeActive and sSun do
58380: LD_EXP 81
58384: PUSH
58385: LD_EXP 104
58389: AND
58390: IFFALSE 58418
58392: GO 58394
58394: DISABLE
// begin solar_recharge_percent := 0 ;
58395: LD_ADDR_OWVAR 79
58399: PUSH
58400: LD_INT 0
58402: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58403: LD_INT 10500
58405: PPUSH
58406: CALL_OW 67
// solar_recharge_percent := 100 ;
58410: LD_ADDR_OWVAR 79
58414: PUSH
58415: LD_INT 100
58417: ST_TO_ADDR
// end ;
58418: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58419: LD_EXP 81
58423: PUSH
58424: LD_EXP 105
58428: AND
58429: IFFALSE 58668
58431: GO 58433
58433: DISABLE
58434: LD_INT 0
58436: PPUSH
58437: PPUSH
58438: PPUSH
// begin tmp := [ ] ;
58439: LD_ADDR_VAR 0 3
58443: PUSH
58444: EMPTY
58445: ST_TO_ADDR
// for i := 1 to 6 do
58446: LD_ADDR_VAR 0 1
58450: PUSH
58451: DOUBLE
58452: LD_INT 1
58454: DEC
58455: ST_TO_ADDR
58456: LD_INT 6
58458: PUSH
58459: FOR_TO
58460: IFFALSE 58565
// begin uc_nation := nation_nature ;
58462: LD_ADDR_OWVAR 21
58466: PUSH
58467: LD_INT 0
58469: ST_TO_ADDR
// uc_side := 0 ;
58470: LD_ADDR_OWVAR 20
58474: PUSH
58475: LD_INT 0
58477: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58478: LD_ADDR_OWVAR 29
58482: PUSH
58483: LD_INT 12
58485: PUSH
58486: LD_INT 12
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: ST_TO_ADDR
// hc_agressivity := 20 ;
58493: LD_ADDR_OWVAR 35
58497: PUSH
58498: LD_INT 20
58500: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58501: LD_ADDR_OWVAR 28
58505: PUSH
58506: LD_INT 17
58508: ST_TO_ADDR
// hc_gallery :=  ;
58509: LD_ADDR_OWVAR 33
58513: PUSH
58514: LD_STRING 
58516: ST_TO_ADDR
// hc_name :=  ;
58517: LD_ADDR_OWVAR 26
58521: PUSH
58522: LD_STRING 
58524: ST_TO_ADDR
// un := CreateHuman ;
58525: LD_ADDR_VAR 0 2
58529: PUSH
58530: CALL_OW 44
58534: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58535: LD_VAR 0 2
58539: PPUSH
58540: LD_INT 1
58542: PPUSH
58543: CALL_OW 51
// tmp := tmp ^ un ;
58547: LD_ADDR_VAR 0 3
58551: PUSH
58552: LD_VAR 0 3
58556: PUSH
58557: LD_VAR 0 2
58561: ADD
58562: ST_TO_ADDR
// end ;
58563: GO 58459
58565: POP
58566: POP
// repeat wait ( 0 0$1 ) ;
58567: LD_INT 35
58569: PPUSH
58570: CALL_OW 67
// for un in tmp do
58574: LD_ADDR_VAR 0 2
58578: PUSH
58579: LD_VAR 0 3
58583: PUSH
58584: FOR_IN
58585: IFFALSE 58659
// begin if IsDead ( un ) then
58587: LD_VAR 0 2
58591: PPUSH
58592: CALL_OW 301
58596: IFFALSE 58616
// begin tmp := tmp diff un ;
58598: LD_ADDR_VAR 0 3
58602: PUSH
58603: LD_VAR 0 3
58607: PUSH
58608: LD_VAR 0 2
58612: DIFF
58613: ST_TO_ADDR
// continue ;
58614: GO 58584
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58616: LD_VAR 0 2
58620: PPUSH
58621: LD_INT 3
58623: PUSH
58624: LD_INT 22
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PPUSH
58638: CALL_OW 69
58642: PPUSH
58643: LD_VAR 0 2
58647: PPUSH
58648: CALL_OW 74
58652: PPUSH
58653: CALL_OW 115
// end ;
58657: GO 58584
58659: POP
58660: POP
// until not tmp ;
58661: LD_VAR 0 3
58665: NOT
58666: IFFALSE 58567
// end ;
58668: PPOPN 3
58670: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58671: LD_EXP 81
58675: PUSH
58676: LD_EXP 106
58680: AND
58681: IFFALSE 58735
58683: GO 58685
58685: DISABLE
// begin ToLua ( displayTroll(); ) ;
58686: LD_STRING displayTroll();
58688: PPUSH
58689: CALL_OW 559
// wait ( 3 3$00 ) ;
58693: LD_INT 6300
58695: PPUSH
58696: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58700: LD_STRING hideTroll();
58702: PPUSH
58703: CALL_OW 559
// wait ( 1 1$00 ) ;
58707: LD_INT 2100
58709: PPUSH
58710: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58714: LD_STRING displayTroll();
58716: PPUSH
58717: CALL_OW 559
// wait ( 1 1$00 ) ;
58721: LD_INT 2100
58723: PPUSH
58724: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58728: LD_STRING hideTroll();
58730: PPUSH
58731: CALL_OW 559
// end ;
58735: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58736: LD_EXP 81
58740: PUSH
58741: LD_EXP 107
58745: AND
58746: IFFALSE 58809
58748: GO 58750
58750: DISABLE
58751: LD_INT 0
58753: PPUSH
// begin p := 0 ;
58754: LD_ADDR_VAR 0 1
58758: PUSH
58759: LD_INT 0
58761: ST_TO_ADDR
// repeat game_speed := 1 ;
58762: LD_ADDR_OWVAR 65
58766: PUSH
58767: LD_INT 1
58769: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58770: LD_INT 35
58772: PPUSH
58773: CALL_OW 67
// p := p + 1 ;
58777: LD_ADDR_VAR 0 1
58781: PUSH
58782: LD_VAR 0 1
58786: PUSH
58787: LD_INT 1
58789: PLUS
58790: ST_TO_ADDR
// until p >= 60 ;
58791: LD_VAR 0 1
58795: PUSH
58796: LD_INT 60
58798: GREATEREQUAL
58799: IFFALSE 58762
// game_speed := 4 ;
58801: LD_ADDR_OWVAR 65
58805: PUSH
58806: LD_INT 4
58808: ST_TO_ADDR
// end ;
58809: PPOPN 1
58811: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58812: LD_EXP 81
58816: PUSH
58817: LD_EXP 108
58821: AND
58822: IFFALSE 58968
58824: GO 58826
58826: DISABLE
58827: LD_INT 0
58829: PPUSH
58830: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58831: LD_ADDR_VAR 0 1
58835: PUSH
58836: LD_INT 22
58838: PUSH
58839: LD_OWVAR 2
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: LD_INT 30
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 30
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: LIST
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PPUSH
58880: CALL_OW 69
58884: ST_TO_ADDR
// if not depot then
58885: LD_VAR 0 1
58889: NOT
58890: IFFALSE 58894
// exit ;
58892: GO 58968
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58894: LD_ADDR_VAR 0 2
58898: PUSH
58899: LD_VAR 0 1
58903: PUSH
58904: LD_INT 1
58906: PPUSH
58907: LD_VAR 0 1
58911: PPUSH
58912: CALL_OW 12
58916: ARRAY
58917: PPUSH
58918: CALL_OW 274
58922: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58923: LD_VAR 0 2
58927: PPUSH
58928: LD_INT 1
58930: PPUSH
58931: LD_INT 0
58933: PPUSH
58934: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58938: LD_VAR 0 2
58942: PPUSH
58943: LD_INT 2
58945: PPUSH
58946: LD_INT 0
58948: PPUSH
58949: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58953: LD_VAR 0 2
58957: PPUSH
58958: LD_INT 3
58960: PPUSH
58961: LD_INT 0
58963: PPUSH
58964: CALL_OW 277
// end ;
58968: PPOPN 2
58970: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58971: LD_EXP 81
58975: PUSH
58976: LD_EXP 109
58980: AND
58981: IFFALSE 59078
58983: GO 58985
58985: DISABLE
58986: LD_INT 0
58988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58989: LD_ADDR_VAR 0 1
58993: PUSH
58994: LD_INT 22
58996: PUSH
58997: LD_OWVAR 2
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 21
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 3
59018: PUSH
59019: LD_INT 23
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: LIST
59037: PPUSH
59038: CALL_OW 69
59042: ST_TO_ADDR
// if not tmp then
59043: LD_VAR 0 1
59047: NOT
59048: IFFALSE 59052
// exit ;
59050: GO 59078
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59052: LD_VAR 0 1
59056: PUSH
59057: LD_INT 1
59059: PPUSH
59060: LD_VAR 0 1
59064: PPUSH
59065: CALL_OW 12
59069: ARRAY
59070: PPUSH
59071: LD_INT 200
59073: PPUSH
59074: CALL_OW 234
// end ;
59078: PPOPN 1
59080: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59081: LD_EXP 81
59085: PUSH
59086: LD_EXP 110
59090: AND
59091: IFFALSE 59170
59093: GO 59095
59095: DISABLE
59096: LD_INT 0
59098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59099: LD_ADDR_VAR 0 1
59103: PUSH
59104: LD_INT 22
59106: PUSH
59107: LD_OWVAR 2
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 21
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PPUSH
59130: CALL_OW 69
59134: ST_TO_ADDR
// if not tmp then
59135: LD_VAR 0 1
59139: NOT
59140: IFFALSE 59144
// exit ;
59142: GO 59170
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59144: LD_VAR 0 1
59148: PUSH
59149: LD_INT 1
59151: PPUSH
59152: LD_VAR 0 1
59156: PPUSH
59157: CALL_OW 12
59161: ARRAY
59162: PPUSH
59163: LD_INT 60
59165: PPUSH
59166: CALL_OW 234
// end ;
59170: PPOPN 1
59172: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59173: LD_EXP 81
59177: PUSH
59178: LD_EXP 111
59182: AND
59183: IFFALSE 59282
59185: GO 59187
59187: DISABLE
59188: LD_INT 0
59190: PPUSH
59191: PPUSH
// begin enable ;
59192: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59193: LD_ADDR_VAR 0 1
59197: PUSH
59198: LD_INT 22
59200: PUSH
59201: LD_OWVAR 2
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 61
59212: PUSH
59213: EMPTY
59214: LIST
59215: PUSH
59216: LD_INT 33
59218: PUSH
59219: LD_INT 2
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: LIST
59230: PPUSH
59231: CALL_OW 69
59235: ST_TO_ADDR
// if not tmp then
59236: LD_VAR 0 1
59240: NOT
59241: IFFALSE 59245
// exit ;
59243: GO 59282
// for i in tmp do
59245: LD_ADDR_VAR 0 2
59249: PUSH
59250: LD_VAR 0 1
59254: PUSH
59255: FOR_IN
59256: IFFALSE 59280
// if IsControledBy ( i ) then
59258: LD_VAR 0 2
59262: PPUSH
59263: CALL_OW 312
59267: IFFALSE 59278
// ComUnlink ( i ) ;
59269: LD_VAR 0 2
59273: PPUSH
59274: CALL_OW 136
59278: GO 59255
59280: POP
59281: POP
// end ;
59282: PPOPN 2
59284: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59285: LD_EXP 81
59289: PUSH
59290: LD_EXP 112
59294: AND
59295: IFFALSE 59435
59297: GO 59299
59299: DISABLE
59300: LD_INT 0
59302: PPUSH
59303: PPUSH
// begin ToLua ( displayPowell(); ) ;
59304: LD_STRING displayPowell();
59306: PPUSH
59307: CALL_OW 559
// uc_side := 0 ;
59311: LD_ADDR_OWVAR 20
59315: PUSH
59316: LD_INT 0
59318: ST_TO_ADDR
// uc_nation := 2 ;
59319: LD_ADDR_OWVAR 21
59323: PUSH
59324: LD_INT 2
59326: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59327: LD_ADDR_OWVAR 37
59331: PUSH
59332: LD_INT 14
59334: ST_TO_ADDR
// vc_engine := engine_siberite ;
59335: LD_ADDR_OWVAR 39
59339: PUSH
59340: LD_INT 3
59342: ST_TO_ADDR
// vc_control := control_apeman ;
59343: LD_ADDR_OWVAR 38
59347: PUSH
59348: LD_INT 5
59350: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59351: LD_ADDR_OWVAR 40
59355: PUSH
59356: LD_INT 29
59358: ST_TO_ADDR
// un := CreateVehicle ;
59359: LD_ADDR_VAR 0 2
59363: PUSH
59364: CALL_OW 45
59368: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59369: LD_VAR 0 2
59373: PPUSH
59374: LD_INT 1
59376: PPUSH
59377: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59381: LD_INT 35
59383: PPUSH
59384: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59388: LD_VAR 0 2
59392: PPUSH
59393: LD_INT 22
59395: PUSH
59396: LD_OWVAR 2
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PPUSH
59405: CALL_OW 69
59409: PPUSH
59410: LD_VAR 0 2
59414: PPUSH
59415: CALL_OW 74
59419: PPUSH
59420: CALL_OW 115
// until IsDead ( un ) ;
59424: LD_VAR 0 2
59428: PPUSH
59429: CALL_OW 301
59433: IFFALSE 59381
// end ;
59435: PPOPN 2
59437: END
// every 0 0$1 trigger StreamModeActive and sStu do
59438: LD_EXP 81
59442: PUSH
59443: LD_EXP 120
59447: AND
59448: IFFALSE 59464
59450: GO 59452
59452: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59453: LD_STRING displayStucuk();
59455: PPUSH
59456: CALL_OW 559
// ResetFog ;
59460: CALL_OW 335
// end ;
59464: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59465: LD_EXP 81
59469: PUSH
59470: LD_EXP 113
59474: AND
59475: IFFALSE 59616
59477: GO 59479
59479: DISABLE
59480: LD_INT 0
59482: PPUSH
59483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59484: LD_ADDR_VAR 0 2
59488: PUSH
59489: LD_INT 22
59491: PUSH
59492: LD_OWVAR 2
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 21
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PPUSH
59515: CALL_OW 69
59519: ST_TO_ADDR
// if not tmp then
59520: LD_VAR 0 2
59524: NOT
59525: IFFALSE 59529
// exit ;
59527: GO 59616
// un := tmp [ rand ( 1 , tmp ) ] ;
59529: LD_ADDR_VAR 0 1
59533: PUSH
59534: LD_VAR 0 2
59538: PUSH
59539: LD_INT 1
59541: PPUSH
59542: LD_VAR 0 2
59546: PPUSH
59547: CALL_OW 12
59551: ARRAY
59552: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59553: LD_VAR 0 1
59557: PPUSH
59558: LD_INT 0
59560: PPUSH
59561: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59565: LD_VAR 0 1
59569: PPUSH
59570: LD_OWVAR 3
59574: PUSH
59575: LD_VAR 0 1
59579: DIFF
59580: PPUSH
59581: LD_VAR 0 1
59585: PPUSH
59586: CALL_OW 74
59590: PPUSH
59591: CALL_OW 115
// wait ( 0 0$20 ) ;
59595: LD_INT 700
59597: PPUSH
59598: CALL_OW 67
// SetSide ( un , your_side ) ;
59602: LD_VAR 0 1
59606: PPUSH
59607: LD_OWVAR 2
59611: PPUSH
59612: CALL_OW 235
// end ;
59616: PPOPN 2
59618: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59619: LD_EXP 81
59623: PUSH
59624: LD_EXP 114
59628: AND
59629: IFFALSE 59735
59631: GO 59633
59633: DISABLE
59634: LD_INT 0
59636: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59637: LD_ADDR_VAR 0 1
59641: PUSH
59642: LD_INT 22
59644: PUSH
59645: LD_OWVAR 2
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 2
59656: PUSH
59657: LD_INT 30
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 30
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: LIST
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PPUSH
59686: CALL_OW 69
59690: ST_TO_ADDR
// if not depot then
59691: LD_VAR 0 1
59695: NOT
59696: IFFALSE 59700
// exit ;
59698: GO 59735
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59700: LD_VAR 0 1
59704: PUSH
59705: LD_INT 1
59707: ARRAY
59708: PPUSH
59709: CALL_OW 250
59713: PPUSH
59714: LD_VAR 0 1
59718: PUSH
59719: LD_INT 1
59721: ARRAY
59722: PPUSH
59723: CALL_OW 251
59727: PPUSH
59728: LD_INT 70
59730: PPUSH
59731: CALL_OW 495
// end ;
59735: PPOPN 1
59737: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59738: LD_EXP 81
59742: PUSH
59743: LD_EXP 115
59747: AND
59748: IFFALSE 59959
59750: GO 59752
59752: DISABLE
59753: LD_INT 0
59755: PPUSH
59756: PPUSH
59757: PPUSH
59758: PPUSH
59759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59760: LD_ADDR_VAR 0 5
59764: PUSH
59765: LD_INT 22
59767: PUSH
59768: LD_OWVAR 2
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 21
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PPUSH
59791: CALL_OW 69
59795: ST_TO_ADDR
// if not tmp then
59796: LD_VAR 0 5
59800: NOT
59801: IFFALSE 59805
// exit ;
59803: GO 59959
// for i in tmp do
59805: LD_ADDR_VAR 0 1
59809: PUSH
59810: LD_VAR 0 5
59814: PUSH
59815: FOR_IN
59816: IFFALSE 59957
// begin d := rand ( 0 , 5 ) ;
59818: LD_ADDR_VAR 0 4
59822: PUSH
59823: LD_INT 0
59825: PPUSH
59826: LD_INT 5
59828: PPUSH
59829: CALL_OW 12
59833: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59834: LD_ADDR_VAR 0 2
59838: PUSH
59839: LD_VAR 0 1
59843: PPUSH
59844: CALL_OW 250
59848: PPUSH
59849: LD_VAR 0 4
59853: PPUSH
59854: LD_INT 3
59856: PPUSH
59857: LD_INT 12
59859: PPUSH
59860: CALL_OW 12
59864: PPUSH
59865: CALL_OW 272
59869: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59870: LD_ADDR_VAR 0 3
59874: PUSH
59875: LD_VAR 0 1
59879: PPUSH
59880: CALL_OW 251
59884: PPUSH
59885: LD_VAR 0 4
59889: PPUSH
59890: LD_INT 3
59892: PPUSH
59893: LD_INT 12
59895: PPUSH
59896: CALL_OW 12
59900: PPUSH
59901: CALL_OW 273
59905: ST_TO_ADDR
// if ValidHex ( x , y ) then
59906: LD_VAR 0 2
59910: PPUSH
59911: LD_VAR 0 3
59915: PPUSH
59916: CALL_OW 488
59920: IFFALSE 59955
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59922: LD_VAR 0 1
59926: PPUSH
59927: LD_VAR 0 2
59931: PPUSH
59932: LD_VAR 0 3
59936: PPUSH
59937: LD_INT 3
59939: PPUSH
59940: LD_INT 6
59942: PPUSH
59943: CALL_OW 12
59947: PPUSH
59948: LD_INT 1
59950: PPUSH
59951: CALL_OW 483
// end ;
59955: GO 59815
59957: POP
59958: POP
// end ;
59959: PPOPN 5
59961: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59962: LD_EXP 81
59966: PUSH
59967: LD_EXP 116
59971: AND
59972: IFFALSE 60066
59974: GO 59976
59976: DISABLE
59977: LD_INT 0
59979: PPUSH
59980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59981: LD_ADDR_VAR 0 2
59985: PUSH
59986: LD_INT 22
59988: PUSH
59989: LD_OWVAR 2
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 32
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 21
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: LIST
60022: PPUSH
60023: CALL_OW 69
60027: ST_TO_ADDR
// if not tmp then
60028: LD_VAR 0 2
60032: NOT
60033: IFFALSE 60037
// exit ;
60035: GO 60066
// for i in tmp do
60037: LD_ADDR_VAR 0 1
60041: PUSH
60042: LD_VAR 0 2
60046: PUSH
60047: FOR_IN
60048: IFFALSE 60064
// SetFuel ( i , 0 ) ;
60050: LD_VAR 0 1
60054: PPUSH
60055: LD_INT 0
60057: PPUSH
60058: CALL_OW 240
60062: GO 60047
60064: POP
60065: POP
// end ;
60066: PPOPN 2
60068: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60069: LD_EXP 81
60073: PUSH
60074: LD_EXP 117
60078: AND
60079: IFFALSE 60145
60081: GO 60083
60083: DISABLE
60084: LD_INT 0
60086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60087: LD_ADDR_VAR 0 1
60091: PUSH
60092: LD_INT 22
60094: PUSH
60095: LD_OWVAR 2
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 30
60106: PUSH
60107: LD_INT 29
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PPUSH
60118: CALL_OW 69
60122: ST_TO_ADDR
// if not tmp then
60123: LD_VAR 0 1
60127: NOT
60128: IFFALSE 60132
// exit ;
60130: GO 60145
// DestroyUnit ( tmp [ 1 ] ) ;
60132: LD_VAR 0 1
60136: PUSH
60137: LD_INT 1
60139: ARRAY
60140: PPUSH
60141: CALL_OW 65
// end ;
60145: PPOPN 1
60147: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60148: LD_EXP 81
60152: PUSH
60153: LD_EXP 119
60157: AND
60158: IFFALSE 60287
60160: GO 60162
60162: DISABLE
60163: LD_INT 0
60165: PPUSH
// begin uc_side := 0 ;
60166: LD_ADDR_OWVAR 20
60170: PUSH
60171: LD_INT 0
60173: ST_TO_ADDR
// uc_nation := nation_arabian ;
60174: LD_ADDR_OWVAR 21
60178: PUSH
60179: LD_INT 2
60181: ST_TO_ADDR
// hc_gallery :=  ;
60182: LD_ADDR_OWVAR 33
60186: PUSH
60187: LD_STRING 
60189: ST_TO_ADDR
// hc_name :=  ;
60190: LD_ADDR_OWVAR 26
60194: PUSH
60195: LD_STRING 
60197: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60198: LD_INT 1
60200: PPUSH
60201: LD_INT 11
60203: PPUSH
60204: LD_INT 10
60206: PPUSH
60207: CALL_OW 380
// un := CreateHuman ;
60211: LD_ADDR_VAR 0 1
60215: PUSH
60216: CALL_OW 44
60220: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60221: LD_VAR 0 1
60225: PPUSH
60226: LD_INT 1
60228: PPUSH
60229: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60233: LD_INT 35
60235: PPUSH
60236: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60240: LD_VAR 0 1
60244: PPUSH
60245: LD_INT 22
60247: PUSH
60248: LD_OWVAR 2
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PPUSH
60257: CALL_OW 69
60261: PPUSH
60262: LD_VAR 0 1
60266: PPUSH
60267: CALL_OW 74
60271: PPUSH
60272: CALL_OW 115
// until IsDead ( un ) ;
60276: LD_VAR 0 1
60280: PPUSH
60281: CALL_OW 301
60285: IFFALSE 60233
// end ;
60287: PPOPN 1
60289: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60290: LD_EXP 81
60294: PUSH
60295: LD_EXP 121
60299: AND
60300: IFFALSE 60312
60302: GO 60304
60304: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60305: LD_STRING earthquake(getX(game), 0, 32)
60307: PPUSH
60308: CALL_OW 559
60312: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60313: LD_EXP 81
60317: PUSH
60318: LD_EXP 122
60322: AND
60323: IFFALSE 60414
60325: GO 60327
60327: DISABLE
60328: LD_INT 0
60330: PPUSH
// begin enable ;
60331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60332: LD_ADDR_VAR 0 1
60336: PUSH
60337: LD_INT 22
60339: PUSH
60340: LD_OWVAR 2
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 21
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 33
60361: PUSH
60362: LD_INT 3
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: LIST
60373: PPUSH
60374: CALL_OW 69
60378: ST_TO_ADDR
// if not tmp then
60379: LD_VAR 0 1
60383: NOT
60384: IFFALSE 60388
// exit ;
60386: GO 60414
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60388: LD_VAR 0 1
60392: PUSH
60393: LD_INT 1
60395: PPUSH
60396: LD_VAR 0 1
60400: PPUSH
60401: CALL_OW 12
60405: ARRAY
60406: PPUSH
60407: LD_INT 1
60409: PPUSH
60410: CALL_OW 234
// end ;
60414: PPOPN 1
60416: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60417: LD_EXP 81
60421: PUSH
60422: LD_EXP 123
60426: AND
60427: IFFALSE 60568
60429: GO 60431
60431: DISABLE
60432: LD_INT 0
60434: PPUSH
60435: PPUSH
60436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60437: LD_ADDR_VAR 0 3
60441: PUSH
60442: LD_INT 22
60444: PUSH
60445: LD_OWVAR 2
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 25
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PPUSH
60468: CALL_OW 69
60472: ST_TO_ADDR
// if not tmp then
60473: LD_VAR 0 3
60477: NOT
60478: IFFALSE 60482
// exit ;
60480: GO 60568
// un := tmp [ rand ( 1 , tmp ) ] ;
60482: LD_ADDR_VAR 0 2
60486: PUSH
60487: LD_VAR 0 3
60491: PUSH
60492: LD_INT 1
60494: PPUSH
60495: LD_VAR 0 3
60499: PPUSH
60500: CALL_OW 12
60504: ARRAY
60505: ST_TO_ADDR
// if Crawls ( un ) then
60506: LD_VAR 0 2
60510: PPUSH
60511: CALL_OW 318
60515: IFFALSE 60526
// ComWalk ( un ) ;
60517: LD_VAR 0 2
60521: PPUSH
60522: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60526: LD_VAR 0 2
60530: PPUSH
60531: LD_INT 9
60533: PPUSH
60534: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60538: LD_INT 28
60540: PPUSH
60541: LD_OWVAR 2
60545: PPUSH
60546: LD_INT 2
60548: PPUSH
60549: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60553: LD_INT 29
60555: PPUSH
60556: LD_OWVAR 2
60560: PPUSH
60561: LD_INT 2
60563: PPUSH
60564: CALL_OW 322
// end ;
60568: PPOPN 3
60570: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60571: LD_EXP 81
60575: PUSH
60576: LD_EXP 124
60580: AND
60581: IFFALSE 60692
60583: GO 60585
60585: DISABLE
60586: LD_INT 0
60588: PPUSH
60589: PPUSH
60590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60591: LD_ADDR_VAR 0 3
60595: PUSH
60596: LD_INT 22
60598: PUSH
60599: LD_OWVAR 2
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 25
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PPUSH
60622: CALL_OW 69
60626: ST_TO_ADDR
// if not tmp then
60627: LD_VAR 0 3
60631: NOT
60632: IFFALSE 60636
// exit ;
60634: GO 60692
// un := tmp [ rand ( 1 , tmp ) ] ;
60636: LD_ADDR_VAR 0 2
60640: PUSH
60641: LD_VAR 0 3
60645: PUSH
60646: LD_INT 1
60648: PPUSH
60649: LD_VAR 0 3
60653: PPUSH
60654: CALL_OW 12
60658: ARRAY
60659: ST_TO_ADDR
// if Crawls ( un ) then
60660: LD_VAR 0 2
60664: PPUSH
60665: CALL_OW 318
60669: IFFALSE 60680
// ComWalk ( un ) ;
60671: LD_VAR 0 2
60675: PPUSH
60676: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60680: LD_VAR 0 2
60684: PPUSH
60685: LD_INT 8
60687: PPUSH
60688: CALL_OW 336
// end ;
60692: PPOPN 3
60694: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60695: LD_EXP 81
60699: PUSH
60700: LD_EXP 125
60704: AND
60705: IFFALSE 60849
60707: GO 60709
60709: DISABLE
60710: LD_INT 0
60712: PPUSH
60713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60714: LD_ADDR_VAR 0 2
60718: PUSH
60719: LD_INT 22
60721: PUSH
60722: LD_OWVAR 2
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 21
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 2
60743: PUSH
60744: LD_INT 34
60746: PUSH
60747: LD_INT 12
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 34
60756: PUSH
60757: LD_INT 51
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 34
60766: PUSH
60767: LD_INT 32
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: LIST
60784: PPUSH
60785: CALL_OW 69
60789: ST_TO_ADDR
// if not tmp then
60790: LD_VAR 0 2
60794: NOT
60795: IFFALSE 60799
// exit ;
60797: GO 60849
// for i in tmp do
60799: LD_ADDR_VAR 0 1
60803: PUSH
60804: LD_VAR 0 2
60808: PUSH
60809: FOR_IN
60810: IFFALSE 60847
// if GetCargo ( i , mat_artifact ) = 0 then
60812: LD_VAR 0 1
60816: PPUSH
60817: LD_INT 4
60819: PPUSH
60820: CALL_OW 289
60824: PUSH
60825: LD_INT 0
60827: EQUAL
60828: IFFALSE 60845
// SetCargo ( i , mat_siberit , 100 ) ;
60830: LD_VAR 0 1
60834: PPUSH
60835: LD_INT 3
60837: PPUSH
60838: LD_INT 100
60840: PPUSH
60841: CALL_OW 290
60845: GO 60809
60847: POP
60848: POP
// end ;
60849: PPOPN 2
60851: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60852: LD_EXP 81
60856: PUSH
60857: LD_EXP 126
60861: AND
60862: IFFALSE 61045
60864: GO 60866
60866: DISABLE
60867: LD_INT 0
60869: PPUSH
60870: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60871: LD_ADDR_VAR 0 2
60875: PUSH
60876: LD_INT 22
60878: PUSH
60879: LD_OWVAR 2
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PPUSH
60888: CALL_OW 69
60892: ST_TO_ADDR
// if not tmp then
60893: LD_VAR 0 2
60897: NOT
60898: IFFALSE 60902
// exit ;
60900: GO 61045
// for i := 1 to 2 do
60902: LD_ADDR_VAR 0 1
60906: PUSH
60907: DOUBLE
60908: LD_INT 1
60910: DEC
60911: ST_TO_ADDR
60912: LD_INT 2
60914: PUSH
60915: FOR_TO
60916: IFFALSE 61043
// begin uc_side := your_side ;
60918: LD_ADDR_OWVAR 20
60922: PUSH
60923: LD_OWVAR 2
60927: ST_TO_ADDR
// uc_nation := nation_american ;
60928: LD_ADDR_OWVAR 21
60932: PUSH
60933: LD_INT 1
60935: ST_TO_ADDR
// vc_chassis := us_morphling ;
60936: LD_ADDR_OWVAR 37
60940: PUSH
60941: LD_INT 5
60943: ST_TO_ADDR
// vc_engine := engine_siberite ;
60944: LD_ADDR_OWVAR 39
60948: PUSH
60949: LD_INT 3
60951: ST_TO_ADDR
// vc_control := control_computer ;
60952: LD_ADDR_OWVAR 38
60956: PUSH
60957: LD_INT 3
60959: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60960: LD_ADDR_OWVAR 40
60964: PUSH
60965: LD_INT 10
60967: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60968: LD_VAR 0 2
60972: PUSH
60973: LD_INT 1
60975: ARRAY
60976: PPUSH
60977: CALL_OW 310
60981: NOT
60982: IFFALSE 61029
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60984: CALL_OW 45
60988: PPUSH
60989: LD_VAR 0 2
60993: PUSH
60994: LD_INT 1
60996: ARRAY
60997: PPUSH
60998: CALL_OW 250
61002: PPUSH
61003: LD_VAR 0 2
61007: PUSH
61008: LD_INT 1
61010: ARRAY
61011: PPUSH
61012: CALL_OW 251
61016: PPUSH
61017: LD_INT 12
61019: PPUSH
61020: LD_INT 1
61022: PPUSH
61023: CALL_OW 50
61027: GO 61041
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61029: CALL_OW 45
61033: PPUSH
61034: LD_INT 1
61036: PPUSH
61037: CALL_OW 51
// end ;
61041: GO 60915
61043: POP
61044: POP
// end ;
61045: PPOPN 2
61047: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61048: LD_EXP 81
61052: PUSH
61053: LD_EXP 127
61057: AND
61058: IFFALSE 61280
61060: GO 61062
61062: DISABLE
61063: LD_INT 0
61065: PPUSH
61066: PPUSH
61067: PPUSH
61068: PPUSH
61069: PPUSH
61070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61071: LD_ADDR_VAR 0 6
61075: PUSH
61076: LD_INT 22
61078: PUSH
61079: LD_OWVAR 2
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 21
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: LD_INT 23
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: LIST
61119: PPUSH
61120: CALL_OW 69
61124: ST_TO_ADDR
// if not tmp then
61125: LD_VAR 0 6
61129: NOT
61130: IFFALSE 61134
// exit ;
61132: GO 61280
// s1 := rand ( 1 , 4 ) ;
61134: LD_ADDR_VAR 0 2
61138: PUSH
61139: LD_INT 1
61141: PPUSH
61142: LD_INT 4
61144: PPUSH
61145: CALL_OW 12
61149: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61150: LD_ADDR_VAR 0 4
61154: PUSH
61155: LD_VAR 0 6
61159: PUSH
61160: LD_INT 1
61162: ARRAY
61163: PPUSH
61164: LD_VAR 0 2
61168: PPUSH
61169: CALL_OW 259
61173: ST_TO_ADDR
// if s1 = 1 then
61174: LD_VAR 0 2
61178: PUSH
61179: LD_INT 1
61181: EQUAL
61182: IFFALSE 61202
// s2 := rand ( 2 , 4 ) else
61184: LD_ADDR_VAR 0 3
61188: PUSH
61189: LD_INT 2
61191: PPUSH
61192: LD_INT 4
61194: PPUSH
61195: CALL_OW 12
61199: ST_TO_ADDR
61200: GO 61210
// s2 := 1 ;
61202: LD_ADDR_VAR 0 3
61206: PUSH
61207: LD_INT 1
61209: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61210: LD_ADDR_VAR 0 5
61214: PUSH
61215: LD_VAR 0 6
61219: PUSH
61220: LD_INT 1
61222: ARRAY
61223: PPUSH
61224: LD_VAR 0 3
61228: PPUSH
61229: CALL_OW 259
61233: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61234: LD_VAR 0 6
61238: PUSH
61239: LD_INT 1
61241: ARRAY
61242: PPUSH
61243: LD_VAR 0 2
61247: PPUSH
61248: LD_VAR 0 5
61252: PPUSH
61253: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61257: LD_VAR 0 6
61261: PUSH
61262: LD_INT 1
61264: ARRAY
61265: PPUSH
61266: LD_VAR 0 3
61270: PPUSH
61271: LD_VAR 0 4
61275: PPUSH
61276: CALL_OW 237
// end ;
61280: PPOPN 6
61282: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61283: LD_EXP 81
61287: PUSH
61288: LD_EXP 128
61292: AND
61293: IFFALSE 61372
61295: GO 61297
61297: DISABLE
61298: LD_INT 0
61300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61301: LD_ADDR_VAR 0 1
61305: PUSH
61306: LD_INT 22
61308: PUSH
61309: LD_OWVAR 2
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 30
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PPUSH
61332: CALL_OW 69
61336: ST_TO_ADDR
// if not tmp then
61337: LD_VAR 0 1
61341: NOT
61342: IFFALSE 61346
// exit ;
61344: GO 61372
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61346: LD_VAR 0 1
61350: PUSH
61351: LD_INT 1
61353: PPUSH
61354: LD_VAR 0 1
61358: PPUSH
61359: CALL_OW 12
61363: ARRAY
61364: PPUSH
61365: LD_INT 1
61367: PPUSH
61368: CALL_OW 234
// end ;
61372: PPOPN 1
61374: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61375: LD_EXP 81
61379: PUSH
61380: LD_EXP 129
61384: AND
61385: IFFALSE 61497
61387: GO 61389
61389: DISABLE
61390: LD_INT 0
61392: PPUSH
61393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61394: LD_ADDR_VAR 0 2
61398: PUSH
61399: LD_INT 22
61401: PUSH
61402: LD_OWVAR 2
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: LD_INT 30
61416: PUSH
61417: LD_INT 27
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 30
61426: PUSH
61427: LD_INT 26
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 30
61436: PUSH
61437: LD_INT 28
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PPUSH
61454: CALL_OW 69
61458: ST_TO_ADDR
// if not tmp then
61459: LD_VAR 0 2
61463: NOT
61464: IFFALSE 61468
// exit ;
61466: GO 61497
// for i in tmp do
61468: LD_ADDR_VAR 0 1
61472: PUSH
61473: LD_VAR 0 2
61477: PUSH
61478: FOR_IN
61479: IFFALSE 61495
// SetLives ( i , 1 ) ;
61481: LD_VAR 0 1
61485: PPUSH
61486: LD_INT 1
61488: PPUSH
61489: CALL_OW 234
61493: GO 61478
61495: POP
61496: POP
// end ;
61497: PPOPN 2
61499: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61500: LD_EXP 81
61504: PUSH
61505: LD_EXP 130
61509: AND
61510: IFFALSE 61797
61512: GO 61514
61514: DISABLE
61515: LD_INT 0
61517: PPUSH
61518: PPUSH
61519: PPUSH
// begin i := rand ( 1 , 7 ) ;
61520: LD_ADDR_VAR 0 1
61524: PUSH
61525: LD_INT 1
61527: PPUSH
61528: LD_INT 7
61530: PPUSH
61531: CALL_OW 12
61535: ST_TO_ADDR
// case i of 1 :
61536: LD_VAR 0 1
61540: PUSH
61541: LD_INT 1
61543: DOUBLE
61544: EQUAL
61545: IFTRUE 61549
61547: GO 61559
61549: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61550: LD_STRING earthquake(getX(game), 0, 32)
61552: PPUSH
61553: CALL_OW 559
61557: GO 61797
61559: LD_INT 2
61561: DOUBLE
61562: EQUAL
61563: IFTRUE 61567
61565: GO 61581
61567: POP
// begin ToLua ( displayStucuk(); ) ;
61568: LD_STRING displayStucuk();
61570: PPUSH
61571: CALL_OW 559
// ResetFog ;
61575: CALL_OW 335
// end ; 3 :
61579: GO 61797
61581: LD_INT 3
61583: DOUBLE
61584: EQUAL
61585: IFTRUE 61589
61587: GO 61693
61589: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61590: LD_ADDR_VAR 0 2
61594: PUSH
61595: LD_INT 22
61597: PUSH
61598: LD_OWVAR 2
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 25
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PPUSH
61621: CALL_OW 69
61625: ST_TO_ADDR
// if not tmp then
61626: LD_VAR 0 2
61630: NOT
61631: IFFALSE 61635
// exit ;
61633: GO 61797
// un := tmp [ rand ( 1 , tmp ) ] ;
61635: LD_ADDR_VAR 0 3
61639: PUSH
61640: LD_VAR 0 2
61644: PUSH
61645: LD_INT 1
61647: PPUSH
61648: LD_VAR 0 2
61652: PPUSH
61653: CALL_OW 12
61657: ARRAY
61658: ST_TO_ADDR
// if Crawls ( un ) then
61659: LD_VAR 0 3
61663: PPUSH
61664: CALL_OW 318
61668: IFFALSE 61679
// ComWalk ( un ) ;
61670: LD_VAR 0 3
61674: PPUSH
61675: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61679: LD_VAR 0 3
61683: PPUSH
61684: LD_INT 8
61686: PPUSH
61687: CALL_OW 336
// end ; 4 :
61691: GO 61797
61693: LD_INT 4
61695: DOUBLE
61696: EQUAL
61697: IFTRUE 61701
61699: GO 61775
61701: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61702: LD_ADDR_VAR 0 2
61706: PUSH
61707: LD_INT 22
61709: PUSH
61710: LD_OWVAR 2
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 30
61721: PUSH
61722: LD_INT 29
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PPUSH
61733: CALL_OW 69
61737: ST_TO_ADDR
// if not tmp then
61738: LD_VAR 0 2
61742: NOT
61743: IFFALSE 61747
// exit ;
61745: GO 61797
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61747: LD_VAR 0 2
61751: PUSH
61752: LD_INT 1
61754: ARRAY
61755: PPUSH
61756: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61760: LD_VAR 0 2
61764: PUSH
61765: LD_INT 1
61767: ARRAY
61768: PPUSH
61769: CALL_OW 65
// end ; 5 .. 7 :
61773: GO 61797
61775: LD_INT 5
61777: DOUBLE
61778: GREATEREQUAL
61779: IFFALSE 61787
61781: LD_INT 7
61783: DOUBLE
61784: LESSEQUAL
61785: IFTRUE 61789
61787: GO 61796
61789: POP
// StreamSibBomb ; end ;
61790: CALL 58034 0 0
61794: GO 61797
61796: POP
// end ;
61797: PPOPN 3
61799: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61800: LD_EXP 81
61804: PUSH
61805: LD_EXP 131
61809: AND
61810: IFFALSE 61966
61812: GO 61814
61814: DISABLE
61815: LD_INT 0
61817: PPUSH
61818: PPUSH
61819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61820: LD_ADDR_VAR 0 2
61824: PUSH
61825: LD_INT 81
61827: PUSH
61828: LD_OWVAR 2
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 2
61839: PUSH
61840: LD_INT 21
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 21
61852: PUSH
61853: LD_INT 2
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: LIST
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PPUSH
61869: CALL_OW 69
61873: ST_TO_ADDR
// if not tmp then
61874: LD_VAR 0 2
61878: NOT
61879: IFFALSE 61883
// exit ;
61881: GO 61966
// p := 0 ;
61883: LD_ADDR_VAR 0 3
61887: PUSH
61888: LD_INT 0
61890: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61891: LD_INT 35
61893: PPUSH
61894: CALL_OW 67
// p := p + 1 ;
61898: LD_ADDR_VAR 0 3
61902: PUSH
61903: LD_VAR 0 3
61907: PUSH
61908: LD_INT 1
61910: PLUS
61911: ST_TO_ADDR
// for i in tmp do
61912: LD_ADDR_VAR 0 1
61916: PUSH
61917: LD_VAR 0 2
61921: PUSH
61922: FOR_IN
61923: IFFALSE 61954
// if GetLives ( i ) < 1000 then
61925: LD_VAR 0 1
61929: PPUSH
61930: CALL_OW 256
61934: PUSH
61935: LD_INT 1000
61937: LESS
61938: IFFALSE 61952
// SetLives ( i , 1000 ) ;
61940: LD_VAR 0 1
61944: PPUSH
61945: LD_INT 1000
61947: PPUSH
61948: CALL_OW 234
61952: GO 61922
61954: POP
61955: POP
// until p > 20 ;
61956: LD_VAR 0 3
61960: PUSH
61961: LD_INT 20
61963: GREATER
61964: IFFALSE 61891
// end ;
61966: PPOPN 3
61968: END
// every 0 0$1 trigger StreamModeActive and sTime do
61969: LD_EXP 81
61973: PUSH
61974: LD_EXP 132
61978: AND
61979: IFFALSE 62014
61981: GO 61983
61983: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61984: LD_INT 28
61986: PPUSH
61987: LD_OWVAR 2
61991: PPUSH
61992: LD_INT 2
61994: PPUSH
61995: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61999: LD_INT 30
62001: PPUSH
62002: LD_OWVAR 2
62006: PPUSH
62007: LD_INT 2
62009: PPUSH
62010: CALL_OW 322
// end ;
62014: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62015: LD_EXP 81
62019: PUSH
62020: LD_EXP 133
62024: AND
62025: IFFALSE 62146
62027: GO 62029
62029: DISABLE
62030: LD_INT 0
62032: PPUSH
62033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62034: LD_ADDR_VAR 0 2
62038: PUSH
62039: LD_INT 22
62041: PUSH
62042: LD_OWVAR 2
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 21
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 3
62063: PUSH
62064: LD_INT 23
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: PPUSH
62083: CALL_OW 69
62087: ST_TO_ADDR
// if not tmp then
62088: LD_VAR 0 2
62092: NOT
62093: IFFALSE 62097
// exit ;
62095: GO 62146
// for i in tmp do
62097: LD_ADDR_VAR 0 1
62101: PUSH
62102: LD_VAR 0 2
62106: PUSH
62107: FOR_IN
62108: IFFALSE 62144
// begin if Crawls ( i ) then
62110: LD_VAR 0 1
62114: PPUSH
62115: CALL_OW 318
62119: IFFALSE 62130
// ComWalk ( i ) ;
62121: LD_VAR 0 1
62125: PPUSH
62126: CALL_OW 138
// SetClass ( i , 2 ) ;
62130: LD_VAR 0 1
62134: PPUSH
62135: LD_INT 2
62137: PPUSH
62138: CALL_OW 336
// end ;
62142: GO 62107
62144: POP
62145: POP
// end ;
62146: PPOPN 2
62148: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62149: LD_EXP 81
62153: PUSH
62154: LD_EXP 134
62158: AND
62159: IFFALSE 62447
62161: GO 62163
62163: DISABLE
62164: LD_INT 0
62166: PPUSH
62167: PPUSH
62168: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62169: LD_OWVAR 2
62173: PPUSH
62174: LD_INT 9
62176: PPUSH
62177: LD_INT 1
62179: PPUSH
62180: LD_INT 1
62182: PPUSH
62183: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62187: LD_INT 9
62189: PPUSH
62190: LD_OWVAR 2
62194: PPUSH
62195: CALL_OW 343
// uc_side := 9 ;
62199: LD_ADDR_OWVAR 20
62203: PUSH
62204: LD_INT 9
62206: ST_TO_ADDR
// uc_nation := 2 ;
62207: LD_ADDR_OWVAR 21
62211: PUSH
62212: LD_INT 2
62214: ST_TO_ADDR
// hc_name := Dark Warrior ;
62215: LD_ADDR_OWVAR 26
62219: PUSH
62220: LD_STRING Dark Warrior
62222: ST_TO_ADDR
// hc_gallery :=  ;
62223: LD_ADDR_OWVAR 33
62227: PUSH
62228: LD_STRING 
62230: ST_TO_ADDR
// hc_noskilllimit := true ;
62231: LD_ADDR_OWVAR 76
62235: PUSH
62236: LD_INT 1
62238: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62239: LD_ADDR_OWVAR 31
62243: PUSH
62244: LD_INT 30
62246: PUSH
62247: LD_INT 30
62249: PUSH
62250: LD_INT 30
62252: PUSH
62253: LD_INT 30
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: ST_TO_ADDR
// un := CreateHuman ;
62262: LD_ADDR_VAR 0 3
62266: PUSH
62267: CALL_OW 44
62271: ST_TO_ADDR
// hc_noskilllimit := false ;
62272: LD_ADDR_OWVAR 76
62276: PUSH
62277: LD_INT 0
62279: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62280: LD_VAR 0 3
62284: PPUSH
62285: LD_INT 1
62287: PPUSH
62288: CALL_OW 51
// ToLua ( playRanger() ) ;
62292: LD_STRING playRanger()
62294: PPUSH
62295: CALL_OW 559
// p := 0 ;
62299: LD_ADDR_VAR 0 2
62303: PUSH
62304: LD_INT 0
62306: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62307: LD_INT 35
62309: PPUSH
62310: CALL_OW 67
// p := p + 1 ;
62314: LD_ADDR_VAR 0 2
62318: PUSH
62319: LD_VAR 0 2
62323: PUSH
62324: LD_INT 1
62326: PLUS
62327: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62328: LD_VAR 0 3
62332: PPUSH
62333: CALL_OW 256
62337: PUSH
62338: LD_INT 1000
62340: LESS
62341: IFFALSE 62355
// SetLives ( un , 1000 ) ;
62343: LD_VAR 0 3
62347: PPUSH
62348: LD_INT 1000
62350: PPUSH
62351: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62355: LD_VAR 0 3
62359: PPUSH
62360: LD_INT 81
62362: PUSH
62363: LD_OWVAR 2
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 91
62374: PUSH
62375: LD_VAR 0 3
62379: PUSH
62380: LD_INT 30
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: LIST
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PPUSH
62392: CALL_OW 69
62396: PPUSH
62397: LD_VAR 0 3
62401: PPUSH
62402: CALL_OW 74
62406: PPUSH
62407: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62411: LD_VAR 0 2
62415: PUSH
62416: LD_INT 80
62418: GREATER
62419: PUSH
62420: LD_VAR 0 3
62424: PPUSH
62425: CALL_OW 301
62429: OR
62430: IFFALSE 62307
// if un then
62432: LD_VAR 0 3
62436: IFFALSE 62447
// RemoveUnit ( un ) ;
62438: LD_VAR 0 3
62442: PPUSH
62443: CALL_OW 64
// end ;
62447: PPOPN 3
62449: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62450: LD_EXP 135
62454: IFFALSE 62570
62456: GO 62458
62458: DISABLE
62459: LD_INT 0
62461: PPUSH
62462: PPUSH
62463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62464: LD_ADDR_VAR 0 2
62468: PUSH
62469: LD_INT 81
62471: PUSH
62472: LD_OWVAR 2
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 21
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PPUSH
62495: CALL_OW 69
62499: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62500: LD_STRING playComputer()
62502: PPUSH
62503: CALL_OW 559
// if not tmp then
62507: LD_VAR 0 2
62511: NOT
62512: IFFALSE 62516
// exit ;
62514: GO 62570
// for i in tmp do
62516: LD_ADDR_VAR 0 1
62520: PUSH
62521: LD_VAR 0 2
62525: PUSH
62526: FOR_IN
62527: IFFALSE 62568
// for j := 1 to 4 do
62529: LD_ADDR_VAR 0 3
62533: PUSH
62534: DOUBLE
62535: LD_INT 1
62537: DEC
62538: ST_TO_ADDR
62539: LD_INT 4
62541: PUSH
62542: FOR_TO
62543: IFFALSE 62564
// SetSkill ( i , j , 10 ) ;
62545: LD_VAR 0 1
62549: PPUSH
62550: LD_VAR 0 3
62554: PPUSH
62555: LD_INT 10
62557: PPUSH
62558: CALL_OW 237
62562: GO 62542
62564: POP
62565: POP
62566: GO 62526
62568: POP
62569: POP
// end ;
62570: PPOPN 3
62572: END
// every 0 0$1 trigger s30 do var i , tmp ;
62573: LD_EXP 136
62577: IFFALSE 62646
62579: GO 62581
62581: DISABLE
62582: LD_INT 0
62584: PPUSH
62585: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62586: LD_ADDR_VAR 0 2
62590: PUSH
62591: LD_INT 22
62593: PUSH
62594: LD_OWVAR 2
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PPUSH
62603: CALL_OW 69
62607: ST_TO_ADDR
// if not tmp then
62608: LD_VAR 0 2
62612: NOT
62613: IFFALSE 62617
// exit ;
62615: GO 62646
// for i in tmp do
62617: LD_ADDR_VAR 0 1
62621: PUSH
62622: LD_VAR 0 2
62626: PUSH
62627: FOR_IN
62628: IFFALSE 62644
// SetLives ( i , 300 ) ;
62630: LD_VAR 0 1
62634: PPUSH
62635: LD_INT 300
62637: PPUSH
62638: CALL_OW 234
62642: GO 62627
62644: POP
62645: POP
// end ;
62646: PPOPN 2
62648: END
// every 0 0$1 trigger s60 do var i , tmp ;
62649: LD_EXP 137
62653: IFFALSE 62722
62655: GO 62657
62657: DISABLE
62658: LD_INT 0
62660: PPUSH
62661: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62662: LD_ADDR_VAR 0 2
62666: PUSH
62667: LD_INT 22
62669: PUSH
62670: LD_OWVAR 2
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PPUSH
62679: CALL_OW 69
62683: ST_TO_ADDR
// if not tmp then
62684: LD_VAR 0 2
62688: NOT
62689: IFFALSE 62693
// exit ;
62691: GO 62722
// for i in tmp do
62693: LD_ADDR_VAR 0 1
62697: PUSH
62698: LD_VAR 0 2
62702: PUSH
62703: FOR_IN
62704: IFFALSE 62720
// SetLives ( i , 600 ) ;
62706: LD_VAR 0 1
62710: PPUSH
62711: LD_INT 600
62713: PPUSH
62714: CALL_OW 234
62718: GO 62703
62720: POP
62721: POP
// end ;
62722: PPOPN 2
62724: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62725: LD_INT 0
62727: PPUSH
// case cmd of 301 :
62728: LD_VAR 0 1
62732: PUSH
62733: LD_INT 301
62735: DOUBLE
62736: EQUAL
62737: IFTRUE 62741
62739: GO 62773
62741: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62742: LD_VAR 0 6
62746: PPUSH
62747: LD_VAR 0 7
62751: PPUSH
62752: LD_VAR 0 8
62756: PPUSH
62757: LD_VAR 0 4
62761: PPUSH
62762: LD_VAR 0 5
62766: PPUSH
62767: CALL 63974 0 5
62771: GO 62894
62773: LD_INT 302
62775: DOUBLE
62776: EQUAL
62777: IFTRUE 62781
62779: GO 62818
62781: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62782: LD_VAR 0 6
62786: PPUSH
62787: LD_VAR 0 7
62791: PPUSH
62792: LD_VAR 0 8
62796: PPUSH
62797: LD_VAR 0 9
62801: PPUSH
62802: LD_VAR 0 4
62806: PPUSH
62807: LD_VAR 0 5
62811: PPUSH
62812: CALL 64065 0 6
62816: GO 62894
62818: LD_INT 303
62820: DOUBLE
62821: EQUAL
62822: IFTRUE 62826
62824: GO 62863
62826: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62827: LD_VAR 0 6
62831: PPUSH
62832: LD_VAR 0 7
62836: PPUSH
62837: LD_VAR 0 8
62841: PPUSH
62842: LD_VAR 0 9
62846: PPUSH
62847: LD_VAR 0 4
62851: PPUSH
62852: LD_VAR 0 5
62856: PPUSH
62857: CALL 62899 0 6
62861: GO 62894
62863: LD_INT 304
62865: DOUBLE
62866: EQUAL
62867: IFTRUE 62871
62869: GO 62893
62871: POP
// hHackTeleport ( unit , x , y ) ; end ;
62872: LD_VAR 0 2
62876: PPUSH
62877: LD_VAR 0 4
62881: PPUSH
62882: LD_VAR 0 5
62886: PPUSH
62887: CALL 64658 0 3
62891: GO 62894
62893: POP
// end ;
62894: LD_VAR 0 12
62898: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62899: LD_INT 0
62901: PPUSH
62902: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62903: LD_VAR 0 1
62907: PUSH
62908: LD_INT 1
62910: LESS
62911: PUSH
62912: LD_VAR 0 1
62916: PUSH
62917: LD_INT 3
62919: GREATER
62920: OR
62921: PUSH
62922: LD_VAR 0 5
62926: PPUSH
62927: LD_VAR 0 6
62931: PPUSH
62932: CALL_OW 428
62936: OR
62937: IFFALSE 62941
// exit ;
62939: GO 63661
// uc_side := your_side ;
62941: LD_ADDR_OWVAR 20
62945: PUSH
62946: LD_OWVAR 2
62950: ST_TO_ADDR
// uc_nation := nation ;
62951: LD_ADDR_OWVAR 21
62955: PUSH
62956: LD_VAR 0 1
62960: ST_TO_ADDR
// bc_level = 1 ;
62961: LD_ADDR_OWVAR 43
62965: PUSH
62966: LD_INT 1
62968: ST_TO_ADDR
// case btype of 1 :
62969: LD_VAR 0 2
62973: PUSH
62974: LD_INT 1
62976: DOUBLE
62977: EQUAL
62978: IFTRUE 62982
62980: GO 62993
62982: POP
// bc_type := b_depot ; 2 :
62983: LD_ADDR_OWVAR 42
62987: PUSH
62988: LD_INT 0
62990: ST_TO_ADDR
62991: GO 63605
62993: LD_INT 2
62995: DOUBLE
62996: EQUAL
62997: IFTRUE 63001
62999: GO 63012
63001: POP
// bc_type := b_warehouse ; 3 :
63002: LD_ADDR_OWVAR 42
63006: PUSH
63007: LD_INT 1
63009: ST_TO_ADDR
63010: GO 63605
63012: LD_INT 3
63014: DOUBLE
63015: EQUAL
63016: IFTRUE 63020
63018: GO 63031
63020: POP
// bc_type := b_lab ; 4 .. 9 :
63021: LD_ADDR_OWVAR 42
63025: PUSH
63026: LD_INT 6
63028: ST_TO_ADDR
63029: GO 63605
63031: LD_INT 4
63033: DOUBLE
63034: GREATEREQUAL
63035: IFFALSE 63043
63037: LD_INT 9
63039: DOUBLE
63040: LESSEQUAL
63041: IFTRUE 63045
63043: GO 63097
63045: POP
// begin bc_type := b_lab_half ;
63046: LD_ADDR_OWVAR 42
63050: PUSH
63051: LD_INT 7
63053: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63054: LD_ADDR_OWVAR 44
63058: PUSH
63059: LD_INT 10
63061: PUSH
63062: LD_INT 11
63064: PUSH
63065: LD_INT 12
63067: PUSH
63068: LD_INT 15
63070: PUSH
63071: LD_INT 14
63073: PUSH
63074: LD_INT 13
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: PUSH
63085: LD_VAR 0 2
63089: PUSH
63090: LD_INT 3
63092: MINUS
63093: ARRAY
63094: ST_TO_ADDR
// end ; 10 .. 13 :
63095: GO 63605
63097: LD_INT 10
63099: DOUBLE
63100: GREATEREQUAL
63101: IFFALSE 63109
63103: LD_INT 13
63105: DOUBLE
63106: LESSEQUAL
63107: IFTRUE 63111
63109: GO 63188
63111: POP
// begin bc_type := b_lab_full ;
63112: LD_ADDR_OWVAR 42
63116: PUSH
63117: LD_INT 8
63119: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63120: LD_ADDR_OWVAR 44
63124: PUSH
63125: LD_INT 10
63127: PUSH
63128: LD_INT 12
63130: PUSH
63131: LD_INT 14
63133: PUSH
63134: LD_INT 13
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: PUSH
63143: LD_VAR 0 2
63147: PUSH
63148: LD_INT 9
63150: MINUS
63151: ARRAY
63152: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63153: LD_ADDR_OWVAR 45
63157: PUSH
63158: LD_INT 11
63160: PUSH
63161: LD_INT 15
63163: PUSH
63164: LD_INT 12
63166: PUSH
63167: LD_INT 15
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: PUSH
63176: LD_VAR 0 2
63180: PUSH
63181: LD_INT 9
63183: MINUS
63184: ARRAY
63185: ST_TO_ADDR
// end ; 14 :
63186: GO 63605
63188: LD_INT 14
63190: DOUBLE
63191: EQUAL
63192: IFTRUE 63196
63194: GO 63207
63196: POP
// bc_type := b_workshop ; 15 :
63197: LD_ADDR_OWVAR 42
63201: PUSH
63202: LD_INT 2
63204: ST_TO_ADDR
63205: GO 63605
63207: LD_INT 15
63209: DOUBLE
63210: EQUAL
63211: IFTRUE 63215
63213: GO 63226
63215: POP
// bc_type := b_factory ; 16 :
63216: LD_ADDR_OWVAR 42
63220: PUSH
63221: LD_INT 3
63223: ST_TO_ADDR
63224: GO 63605
63226: LD_INT 16
63228: DOUBLE
63229: EQUAL
63230: IFTRUE 63234
63232: GO 63245
63234: POP
// bc_type := b_ext_gun ; 17 :
63235: LD_ADDR_OWVAR 42
63239: PUSH
63240: LD_INT 17
63242: ST_TO_ADDR
63243: GO 63605
63245: LD_INT 17
63247: DOUBLE
63248: EQUAL
63249: IFTRUE 63253
63251: GO 63281
63253: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63254: LD_ADDR_OWVAR 42
63258: PUSH
63259: LD_INT 19
63261: PUSH
63262: LD_INT 23
63264: PUSH
63265: LD_INT 19
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: LIST
63272: PUSH
63273: LD_VAR 0 1
63277: ARRAY
63278: ST_TO_ADDR
63279: GO 63605
63281: LD_INT 18
63283: DOUBLE
63284: EQUAL
63285: IFTRUE 63289
63287: GO 63300
63289: POP
// bc_type := b_ext_radar ; 19 :
63290: LD_ADDR_OWVAR 42
63294: PUSH
63295: LD_INT 20
63297: ST_TO_ADDR
63298: GO 63605
63300: LD_INT 19
63302: DOUBLE
63303: EQUAL
63304: IFTRUE 63308
63306: GO 63319
63308: POP
// bc_type := b_ext_radio ; 20 :
63309: LD_ADDR_OWVAR 42
63313: PUSH
63314: LD_INT 22
63316: ST_TO_ADDR
63317: GO 63605
63319: LD_INT 20
63321: DOUBLE
63322: EQUAL
63323: IFTRUE 63327
63325: GO 63338
63327: POP
// bc_type := b_ext_siberium ; 21 :
63328: LD_ADDR_OWVAR 42
63332: PUSH
63333: LD_INT 21
63335: ST_TO_ADDR
63336: GO 63605
63338: LD_INT 21
63340: DOUBLE
63341: EQUAL
63342: IFTRUE 63346
63344: GO 63357
63346: POP
// bc_type := b_ext_computer ; 22 :
63347: LD_ADDR_OWVAR 42
63351: PUSH
63352: LD_INT 24
63354: ST_TO_ADDR
63355: GO 63605
63357: LD_INT 22
63359: DOUBLE
63360: EQUAL
63361: IFTRUE 63365
63363: GO 63376
63365: POP
// bc_type := b_ext_track ; 23 :
63366: LD_ADDR_OWVAR 42
63370: PUSH
63371: LD_INT 16
63373: ST_TO_ADDR
63374: GO 63605
63376: LD_INT 23
63378: DOUBLE
63379: EQUAL
63380: IFTRUE 63384
63382: GO 63395
63384: POP
// bc_type := b_ext_laser ; 24 :
63385: LD_ADDR_OWVAR 42
63389: PUSH
63390: LD_INT 25
63392: ST_TO_ADDR
63393: GO 63605
63395: LD_INT 24
63397: DOUBLE
63398: EQUAL
63399: IFTRUE 63403
63401: GO 63414
63403: POP
// bc_type := b_control_tower ; 25 :
63404: LD_ADDR_OWVAR 42
63408: PUSH
63409: LD_INT 36
63411: ST_TO_ADDR
63412: GO 63605
63414: LD_INT 25
63416: DOUBLE
63417: EQUAL
63418: IFTRUE 63422
63420: GO 63433
63422: POP
// bc_type := b_breastwork ; 26 :
63423: LD_ADDR_OWVAR 42
63427: PUSH
63428: LD_INT 31
63430: ST_TO_ADDR
63431: GO 63605
63433: LD_INT 26
63435: DOUBLE
63436: EQUAL
63437: IFTRUE 63441
63439: GO 63452
63441: POP
// bc_type := b_bunker ; 27 :
63442: LD_ADDR_OWVAR 42
63446: PUSH
63447: LD_INT 32
63449: ST_TO_ADDR
63450: GO 63605
63452: LD_INT 27
63454: DOUBLE
63455: EQUAL
63456: IFTRUE 63460
63458: GO 63471
63460: POP
// bc_type := b_turret ; 28 :
63461: LD_ADDR_OWVAR 42
63465: PUSH
63466: LD_INT 33
63468: ST_TO_ADDR
63469: GO 63605
63471: LD_INT 28
63473: DOUBLE
63474: EQUAL
63475: IFTRUE 63479
63477: GO 63490
63479: POP
// bc_type := b_armoury ; 29 :
63480: LD_ADDR_OWVAR 42
63484: PUSH
63485: LD_INT 4
63487: ST_TO_ADDR
63488: GO 63605
63490: LD_INT 29
63492: DOUBLE
63493: EQUAL
63494: IFTRUE 63498
63496: GO 63509
63498: POP
// bc_type := b_barracks ; 30 :
63499: LD_ADDR_OWVAR 42
63503: PUSH
63504: LD_INT 5
63506: ST_TO_ADDR
63507: GO 63605
63509: LD_INT 30
63511: DOUBLE
63512: EQUAL
63513: IFTRUE 63517
63515: GO 63528
63517: POP
// bc_type := b_solar_power ; 31 :
63518: LD_ADDR_OWVAR 42
63522: PUSH
63523: LD_INT 27
63525: ST_TO_ADDR
63526: GO 63605
63528: LD_INT 31
63530: DOUBLE
63531: EQUAL
63532: IFTRUE 63536
63534: GO 63547
63536: POP
// bc_type := b_oil_power ; 32 :
63537: LD_ADDR_OWVAR 42
63541: PUSH
63542: LD_INT 26
63544: ST_TO_ADDR
63545: GO 63605
63547: LD_INT 32
63549: DOUBLE
63550: EQUAL
63551: IFTRUE 63555
63553: GO 63566
63555: POP
// bc_type := b_siberite_power ; 33 :
63556: LD_ADDR_OWVAR 42
63560: PUSH
63561: LD_INT 28
63563: ST_TO_ADDR
63564: GO 63605
63566: LD_INT 33
63568: DOUBLE
63569: EQUAL
63570: IFTRUE 63574
63572: GO 63585
63574: POP
// bc_type := b_oil_mine ; 34 :
63575: LD_ADDR_OWVAR 42
63579: PUSH
63580: LD_INT 29
63582: ST_TO_ADDR
63583: GO 63605
63585: LD_INT 34
63587: DOUBLE
63588: EQUAL
63589: IFTRUE 63593
63591: GO 63604
63593: POP
// bc_type := b_siberite_mine ; end ;
63594: LD_ADDR_OWVAR 42
63598: PUSH
63599: LD_INT 30
63601: ST_TO_ADDR
63602: GO 63605
63604: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63605: LD_ADDR_VAR 0 8
63609: PUSH
63610: LD_VAR 0 5
63614: PPUSH
63615: LD_VAR 0 6
63619: PPUSH
63620: LD_VAR 0 3
63624: PPUSH
63625: CALL_OW 47
63629: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63630: LD_OWVAR 42
63634: PUSH
63635: LD_INT 32
63637: PUSH
63638: LD_INT 33
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: IN
63645: IFFALSE 63661
// PlaceWeaponTurret ( b , weapon ) ;
63647: LD_VAR 0 8
63651: PPUSH
63652: LD_VAR 0 4
63656: PPUSH
63657: CALL_OW 431
// end ;
63661: LD_VAR 0 7
63665: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63666: LD_INT 0
63668: PPUSH
63669: PPUSH
63670: PPUSH
63671: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63672: LD_ADDR_VAR 0 4
63676: PUSH
63677: LD_INT 22
63679: PUSH
63680: LD_OWVAR 2
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: LD_INT 2
63691: PUSH
63692: LD_INT 30
63694: PUSH
63695: LD_INT 0
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 30
63704: PUSH
63705: LD_INT 1
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PPUSH
63721: CALL_OW 69
63725: ST_TO_ADDR
// if not tmp then
63726: LD_VAR 0 4
63730: NOT
63731: IFFALSE 63735
// exit ;
63733: GO 63794
// for i in tmp do
63735: LD_ADDR_VAR 0 2
63739: PUSH
63740: LD_VAR 0 4
63744: PUSH
63745: FOR_IN
63746: IFFALSE 63792
// for j = 1 to 3 do
63748: LD_ADDR_VAR 0 3
63752: PUSH
63753: DOUBLE
63754: LD_INT 1
63756: DEC
63757: ST_TO_ADDR
63758: LD_INT 3
63760: PUSH
63761: FOR_TO
63762: IFFALSE 63788
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63764: LD_VAR 0 2
63768: PPUSH
63769: CALL_OW 274
63773: PPUSH
63774: LD_VAR 0 3
63778: PPUSH
63779: LD_INT 99999
63781: PPUSH
63782: CALL_OW 277
63786: GO 63761
63788: POP
63789: POP
63790: GO 63745
63792: POP
63793: POP
// end ;
63794: LD_VAR 0 1
63798: RET
// export function hHackSetLevel10 ; var i , j ; begin
63799: LD_INT 0
63801: PPUSH
63802: PPUSH
63803: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63804: LD_ADDR_VAR 0 2
63808: PUSH
63809: LD_INT 21
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PPUSH
63819: CALL_OW 69
63823: PUSH
63824: FOR_IN
63825: IFFALSE 63877
// if IsSelected ( i ) then
63827: LD_VAR 0 2
63831: PPUSH
63832: CALL_OW 306
63836: IFFALSE 63875
// begin for j := 1 to 4 do
63838: LD_ADDR_VAR 0 3
63842: PUSH
63843: DOUBLE
63844: LD_INT 1
63846: DEC
63847: ST_TO_ADDR
63848: LD_INT 4
63850: PUSH
63851: FOR_TO
63852: IFFALSE 63873
// SetSkill ( i , j , 10 ) ;
63854: LD_VAR 0 2
63858: PPUSH
63859: LD_VAR 0 3
63863: PPUSH
63864: LD_INT 10
63866: PPUSH
63867: CALL_OW 237
63871: GO 63851
63873: POP
63874: POP
// end ;
63875: GO 63824
63877: POP
63878: POP
// end ;
63879: LD_VAR 0 1
63883: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63884: LD_INT 0
63886: PPUSH
63887: PPUSH
63888: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63889: LD_ADDR_VAR 0 2
63893: PUSH
63894: LD_INT 22
63896: PUSH
63897: LD_OWVAR 2
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 21
63908: PUSH
63909: LD_INT 1
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PPUSH
63920: CALL_OW 69
63924: PUSH
63925: FOR_IN
63926: IFFALSE 63967
// begin for j := 1 to 4 do
63928: LD_ADDR_VAR 0 3
63932: PUSH
63933: DOUBLE
63934: LD_INT 1
63936: DEC
63937: ST_TO_ADDR
63938: LD_INT 4
63940: PUSH
63941: FOR_TO
63942: IFFALSE 63963
// SetSkill ( i , j , 10 ) ;
63944: LD_VAR 0 2
63948: PPUSH
63949: LD_VAR 0 3
63953: PPUSH
63954: LD_INT 10
63956: PPUSH
63957: CALL_OW 237
63961: GO 63941
63963: POP
63964: POP
// end ;
63965: GO 63925
63967: POP
63968: POP
// end ;
63969: LD_VAR 0 1
63973: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63974: LD_INT 0
63976: PPUSH
// uc_side := your_side ;
63977: LD_ADDR_OWVAR 20
63981: PUSH
63982: LD_OWVAR 2
63986: ST_TO_ADDR
// uc_nation := nation ;
63987: LD_ADDR_OWVAR 21
63991: PUSH
63992: LD_VAR 0 1
63996: ST_TO_ADDR
// InitHc ;
63997: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64001: LD_INT 0
64003: PPUSH
64004: LD_VAR 0 2
64008: PPUSH
64009: LD_VAR 0 3
64013: PPUSH
64014: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64018: LD_VAR 0 4
64022: PPUSH
64023: LD_VAR 0 5
64027: PPUSH
64028: CALL_OW 428
64032: PUSH
64033: LD_INT 0
64035: EQUAL
64036: IFFALSE 64060
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64038: CALL_OW 44
64042: PPUSH
64043: LD_VAR 0 4
64047: PPUSH
64048: LD_VAR 0 5
64052: PPUSH
64053: LD_INT 1
64055: PPUSH
64056: CALL_OW 48
// end ;
64060: LD_VAR 0 6
64064: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64065: LD_INT 0
64067: PPUSH
64068: PPUSH
// uc_side := your_side ;
64069: LD_ADDR_OWVAR 20
64073: PUSH
64074: LD_OWVAR 2
64078: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64079: LD_VAR 0 1
64083: PUSH
64084: LD_INT 1
64086: PUSH
64087: LD_INT 2
64089: PUSH
64090: LD_INT 3
64092: PUSH
64093: LD_INT 4
64095: PUSH
64096: LD_INT 5
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: IN
64106: IFFALSE 64118
// uc_nation := nation_american else
64108: LD_ADDR_OWVAR 21
64112: PUSH
64113: LD_INT 1
64115: ST_TO_ADDR
64116: GO 64161
// if chassis in [ 11 , 12 , 13 , 14 ] then
64118: LD_VAR 0 1
64122: PUSH
64123: LD_INT 11
64125: PUSH
64126: LD_INT 12
64128: PUSH
64129: LD_INT 13
64131: PUSH
64132: LD_INT 14
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: IN
64141: IFFALSE 64153
// uc_nation := nation_arabian else
64143: LD_ADDR_OWVAR 21
64147: PUSH
64148: LD_INT 2
64150: ST_TO_ADDR
64151: GO 64161
// uc_nation := nation_russian ;
64153: LD_ADDR_OWVAR 21
64157: PUSH
64158: LD_INT 3
64160: ST_TO_ADDR
// vc_chassis := chassis ;
64161: LD_ADDR_OWVAR 37
64165: PUSH
64166: LD_VAR 0 1
64170: ST_TO_ADDR
// vc_engine := engine ;
64171: LD_ADDR_OWVAR 39
64175: PUSH
64176: LD_VAR 0 2
64180: ST_TO_ADDR
// vc_control := control ;
64181: LD_ADDR_OWVAR 38
64185: PUSH
64186: LD_VAR 0 3
64190: ST_TO_ADDR
// vc_weapon := weapon ;
64191: LD_ADDR_OWVAR 40
64195: PUSH
64196: LD_VAR 0 4
64200: ST_TO_ADDR
// un := CreateVehicle ;
64201: LD_ADDR_VAR 0 8
64205: PUSH
64206: CALL_OW 45
64210: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64211: LD_VAR 0 8
64215: PPUSH
64216: LD_INT 0
64218: PPUSH
64219: LD_INT 5
64221: PPUSH
64222: CALL_OW 12
64226: PPUSH
64227: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64231: LD_VAR 0 8
64235: PPUSH
64236: LD_VAR 0 5
64240: PPUSH
64241: LD_VAR 0 6
64245: PPUSH
64246: LD_INT 1
64248: PPUSH
64249: CALL_OW 48
// end ;
64253: LD_VAR 0 7
64257: RET
// export hInvincible ; every 1 do
64258: GO 64260
64260: DISABLE
// hInvincible := [ ] ;
64261: LD_ADDR_EXP 138
64265: PUSH
64266: EMPTY
64267: ST_TO_ADDR
64268: END
// every 10 do var i ;
64269: GO 64271
64271: DISABLE
64272: LD_INT 0
64274: PPUSH
// begin enable ;
64275: ENABLE
// if not hInvincible then
64276: LD_EXP 138
64280: NOT
64281: IFFALSE 64285
// exit ;
64283: GO 64329
// for i in hInvincible do
64285: LD_ADDR_VAR 0 1
64289: PUSH
64290: LD_EXP 138
64294: PUSH
64295: FOR_IN
64296: IFFALSE 64327
// if GetLives ( i ) < 1000 then
64298: LD_VAR 0 1
64302: PPUSH
64303: CALL_OW 256
64307: PUSH
64308: LD_INT 1000
64310: LESS
64311: IFFALSE 64325
// SetLives ( i , 1000 ) ;
64313: LD_VAR 0 1
64317: PPUSH
64318: LD_INT 1000
64320: PPUSH
64321: CALL_OW 234
64325: GO 64295
64327: POP
64328: POP
// end ;
64329: PPOPN 1
64331: END
// export function hHackInvincible ; var i ; begin
64332: LD_INT 0
64334: PPUSH
64335: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64336: LD_ADDR_VAR 0 2
64340: PUSH
64341: LD_INT 2
64343: PUSH
64344: LD_INT 21
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 21
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: PPUSH
64369: CALL_OW 69
64373: PUSH
64374: FOR_IN
64375: IFFALSE 64436
// if IsSelected ( i ) then
64377: LD_VAR 0 2
64381: PPUSH
64382: CALL_OW 306
64386: IFFALSE 64434
// begin if i in hInvincible then
64388: LD_VAR 0 2
64392: PUSH
64393: LD_EXP 138
64397: IN
64398: IFFALSE 64418
// hInvincible := hInvincible diff i else
64400: LD_ADDR_EXP 138
64404: PUSH
64405: LD_EXP 138
64409: PUSH
64410: LD_VAR 0 2
64414: DIFF
64415: ST_TO_ADDR
64416: GO 64434
// hInvincible := hInvincible union i ;
64418: LD_ADDR_EXP 138
64422: PUSH
64423: LD_EXP 138
64427: PUSH
64428: LD_VAR 0 2
64432: UNION
64433: ST_TO_ADDR
// end ;
64434: GO 64374
64436: POP
64437: POP
// end ;
64438: LD_VAR 0 1
64442: RET
// export function hHackInvisible ; var i , j ; begin
64443: LD_INT 0
64445: PPUSH
64446: PPUSH
64447: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64448: LD_ADDR_VAR 0 2
64452: PUSH
64453: LD_INT 21
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PPUSH
64463: CALL_OW 69
64467: PUSH
64468: FOR_IN
64469: IFFALSE 64493
// if IsSelected ( i ) then
64471: LD_VAR 0 2
64475: PPUSH
64476: CALL_OW 306
64480: IFFALSE 64491
// ComForceInvisible ( i ) ;
64482: LD_VAR 0 2
64486: PPUSH
64487: CALL_OW 496
64491: GO 64468
64493: POP
64494: POP
// end ;
64495: LD_VAR 0 1
64499: RET
// export function hHackChangeYourSide ; begin
64500: LD_INT 0
64502: PPUSH
// if your_side = 8 then
64503: LD_OWVAR 2
64507: PUSH
64508: LD_INT 8
64510: EQUAL
64511: IFFALSE 64523
// your_side := 0 else
64513: LD_ADDR_OWVAR 2
64517: PUSH
64518: LD_INT 0
64520: ST_TO_ADDR
64521: GO 64537
// your_side := your_side + 1 ;
64523: LD_ADDR_OWVAR 2
64527: PUSH
64528: LD_OWVAR 2
64532: PUSH
64533: LD_INT 1
64535: PLUS
64536: ST_TO_ADDR
// end ;
64537: LD_VAR 0 1
64541: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64542: LD_INT 0
64544: PPUSH
64545: PPUSH
64546: PPUSH
// for i in all_units do
64547: LD_ADDR_VAR 0 2
64551: PUSH
64552: LD_OWVAR 3
64556: PUSH
64557: FOR_IN
64558: IFFALSE 64636
// if IsSelected ( i ) then
64560: LD_VAR 0 2
64564: PPUSH
64565: CALL_OW 306
64569: IFFALSE 64634
// begin j := GetSide ( i ) ;
64571: LD_ADDR_VAR 0 3
64575: PUSH
64576: LD_VAR 0 2
64580: PPUSH
64581: CALL_OW 255
64585: ST_TO_ADDR
// if j = 8 then
64586: LD_VAR 0 3
64590: PUSH
64591: LD_INT 8
64593: EQUAL
64594: IFFALSE 64606
// j := 0 else
64596: LD_ADDR_VAR 0 3
64600: PUSH
64601: LD_INT 0
64603: ST_TO_ADDR
64604: GO 64620
// j := j + 1 ;
64606: LD_ADDR_VAR 0 3
64610: PUSH
64611: LD_VAR 0 3
64615: PUSH
64616: LD_INT 1
64618: PLUS
64619: ST_TO_ADDR
// SetSide ( i , j ) ;
64620: LD_VAR 0 2
64624: PPUSH
64625: LD_VAR 0 3
64629: PPUSH
64630: CALL_OW 235
// end ;
64634: GO 64557
64636: POP
64637: POP
// end ;
64638: LD_VAR 0 1
64642: RET
// export function hHackFog ; begin
64643: LD_INT 0
64645: PPUSH
// FogOff ( true ) ;
64646: LD_INT 1
64648: PPUSH
64649: CALL_OW 344
// end ;
64653: LD_VAR 0 1
64657: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64658: LD_INT 0
64660: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64661: LD_VAR 0 1
64665: PPUSH
64666: LD_VAR 0 2
64670: PPUSH
64671: LD_VAR 0 3
64675: PPUSH
64676: LD_INT 1
64678: PPUSH
64679: LD_INT 1
64681: PPUSH
64682: CALL_OW 483
// CenterOnXY ( x , y ) ;
64686: LD_VAR 0 2
64690: PPUSH
64691: LD_VAR 0 3
64695: PPUSH
64696: CALL_OW 84
// end ;
64700: LD_VAR 0 4
64704: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64705: LD_INT 0
64707: PPUSH
64708: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64709: LD_VAR 0 1
64713: NOT
64714: PUSH
64715: LD_VAR 0 2
64719: PPUSH
64720: LD_VAR 0 3
64724: PPUSH
64725: CALL_OW 488
64729: NOT
64730: OR
64731: PUSH
64732: LD_VAR 0 1
64736: PPUSH
64737: CALL_OW 266
64741: PUSH
64742: LD_INT 3
64744: NONEQUAL
64745: PUSH
64746: LD_VAR 0 1
64750: PPUSH
64751: CALL_OW 247
64755: PUSH
64756: LD_INT 1
64758: EQUAL
64759: NOT
64760: AND
64761: OR
64762: IFFALSE 64766
// exit ;
64764: GO 64915
// if GetType ( factory ) = unit_human then
64766: LD_VAR 0 1
64770: PPUSH
64771: CALL_OW 247
64775: PUSH
64776: LD_INT 1
64778: EQUAL
64779: IFFALSE 64796
// factory := IsInUnit ( factory ) ;
64781: LD_ADDR_VAR 0 1
64785: PUSH
64786: LD_VAR 0 1
64790: PPUSH
64791: CALL_OW 310
64795: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64796: LD_VAR 0 1
64800: PPUSH
64801: CALL_OW 266
64805: PUSH
64806: LD_INT 3
64808: NONEQUAL
64809: IFFALSE 64813
// exit ;
64811: GO 64915
// if HexInfo ( x , y ) = factory then
64813: LD_VAR 0 2
64817: PPUSH
64818: LD_VAR 0 3
64822: PPUSH
64823: CALL_OW 428
64827: PUSH
64828: LD_VAR 0 1
64832: EQUAL
64833: IFFALSE 64860
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
64835: LD_ADDR_EXP 139
64839: PUSH
64840: LD_EXP 139
64844: PPUSH
64845: LD_VAR 0 1
64849: PPUSH
64850: LD_INT 0
64852: PPUSH
64853: CALL_OW 1
64857: ST_TO_ADDR
64858: GO 64911
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
64860: LD_ADDR_EXP 139
64864: PUSH
64865: LD_EXP 139
64869: PPUSH
64870: LD_VAR 0 1
64874: PPUSH
64875: LD_VAR 0 1
64879: PPUSH
64880: CALL_OW 255
64884: PUSH
64885: LD_VAR 0 1
64889: PUSH
64890: LD_VAR 0 2
64894: PUSH
64895: LD_VAR 0 3
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: PPUSH
64906: CALL_OW 1
64910: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64911: CALL 64920 0 0
// end ;
64915: LD_VAR 0 4
64919: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
64920: LD_INT 0
64922: PPUSH
64923: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64924: LD_STRING resetFactoryWaypoint();
64926: PPUSH
64927: CALL_OW 559
// if factoryWaypoints then
64931: LD_EXP 139
64935: IFFALSE 65058
// begin for i := 1 to factoryWaypoints do
64937: LD_ADDR_VAR 0 2
64941: PUSH
64942: DOUBLE
64943: LD_INT 1
64945: DEC
64946: ST_TO_ADDR
64947: LD_EXP 139
64951: PUSH
64952: FOR_TO
64953: IFFALSE 65056
// if factoryWaypoints [ i ] then
64955: LD_EXP 139
64959: PUSH
64960: LD_VAR 0 2
64964: ARRAY
64965: IFFALSE 65054
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
64967: LD_STRING setFactoryWaypointXY(
64969: PUSH
64970: LD_EXP 139
64974: PUSH
64975: LD_VAR 0 2
64979: ARRAY
64980: PUSH
64981: LD_INT 1
64983: ARRAY
64984: STR
64985: PUSH
64986: LD_STRING ,
64988: STR
64989: PUSH
64990: LD_EXP 139
64994: PUSH
64995: LD_VAR 0 2
64999: ARRAY
65000: PUSH
65001: LD_INT 2
65003: ARRAY
65004: STR
65005: PUSH
65006: LD_STRING ,
65008: STR
65009: PUSH
65010: LD_EXP 139
65014: PUSH
65015: LD_VAR 0 2
65019: ARRAY
65020: PUSH
65021: LD_INT 3
65023: ARRAY
65024: STR
65025: PUSH
65026: LD_STRING ,
65028: STR
65029: PUSH
65030: LD_EXP 139
65034: PUSH
65035: LD_VAR 0 2
65039: ARRAY
65040: PUSH
65041: LD_INT 4
65043: ARRAY
65044: STR
65045: PUSH
65046: LD_STRING )
65048: STR
65049: PPUSH
65050: CALL_OW 559
65054: GO 64952
65056: POP
65057: POP
// end ; end ;
65058: LD_VAR 0 1
65062: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarhouseGatheringPoint ( warehouse , x , y ) ; begin
65063: LD_INT 0
65065: PPUSH
// if HexInfo ( x , y ) = warehouse then
65066: LD_VAR 0 2
65070: PPUSH
65071: LD_VAR 0 3
65075: PPUSH
65076: CALL_OW 428
65080: PUSH
65081: LD_VAR 0 1
65085: EQUAL
65086: IFFALSE 65113
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65088: LD_ADDR_EXP 140
65092: PUSH
65093: LD_EXP 140
65097: PPUSH
65098: LD_VAR 0 1
65102: PPUSH
65103: LD_INT 0
65105: PPUSH
65106: CALL_OW 1
65110: ST_TO_ADDR
65111: GO 65164
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65113: LD_ADDR_EXP 140
65117: PUSH
65118: LD_EXP 140
65122: PPUSH
65123: LD_VAR 0 1
65127: PPUSH
65128: LD_VAR 0 1
65132: PPUSH
65133: CALL_OW 255
65137: PUSH
65138: LD_VAR 0 1
65142: PUSH
65143: LD_VAR 0 2
65147: PUSH
65148: LD_VAR 0 3
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: PPUSH
65159: CALL_OW 1
65163: ST_TO_ADDR
// UpdateWarhouseGatheringPoints ;
65164: CALL 65173 0 0
// end ;
65168: LD_VAR 0 4
65172: RET
// export function UpdateWarhouseGatheringPoints ( ) ; var i ; begin
65173: LD_INT 0
65175: PPUSH
65176: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65177: LD_STRING resetWarehouseGatheringPoints();
65179: PPUSH
65180: CALL_OW 559
// if warehouseGatheringPoints then
65184: LD_EXP 140
65188: IFFALSE 65311
// begin for i := 1 to warehouseGatheringPoints do
65190: LD_ADDR_VAR 0 2
65194: PUSH
65195: DOUBLE
65196: LD_INT 1
65198: DEC
65199: ST_TO_ADDR
65200: LD_EXP 140
65204: PUSH
65205: FOR_TO
65206: IFFALSE 65309
// if warehouseGatheringPoints [ i ] then
65208: LD_EXP 140
65212: PUSH
65213: LD_VAR 0 2
65217: ARRAY
65218: IFFALSE 65307
// ToLua ( setWarhouseGatheringPointXY( & warehouseGatheringPoints [ i ] [ 1 ] & , & warehouseGatheringPoints [ i ] [ 2 ] & , & warehouseGatheringPoints [ i ] [ 3 ] & , & warehouseGatheringPoints [ i ] [ 4 ] & ) ) ;
65220: LD_STRING setWarhouseGatheringPointXY(
65222: PUSH
65223: LD_EXP 140
65227: PUSH
65228: LD_VAR 0 2
65232: ARRAY
65233: PUSH
65234: LD_INT 1
65236: ARRAY
65237: STR
65238: PUSH
65239: LD_STRING ,
65241: STR
65242: PUSH
65243: LD_EXP 140
65247: PUSH
65248: LD_VAR 0 2
65252: ARRAY
65253: PUSH
65254: LD_INT 2
65256: ARRAY
65257: STR
65258: PUSH
65259: LD_STRING ,
65261: STR
65262: PUSH
65263: LD_EXP 140
65267: PUSH
65268: LD_VAR 0 2
65272: ARRAY
65273: PUSH
65274: LD_INT 3
65276: ARRAY
65277: STR
65278: PUSH
65279: LD_STRING ,
65281: STR
65282: PUSH
65283: LD_EXP 140
65287: PUSH
65288: LD_VAR 0 2
65292: ARRAY
65293: PUSH
65294: LD_INT 4
65296: ARRAY
65297: STR
65298: PUSH
65299: LD_STRING )
65301: STR
65302: PPUSH
65303: CALL_OW 559
65307: GO 65205
65309: POP
65310: POP
// end ; end ;
65311: LD_VAR 0 1
65315: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65316: LD_EXP 140
65320: IFFALSE 65949
65322: GO 65324
65324: DISABLE
65325: LD_INT 0
65327: PPUSH
65328: PPUSH
65329: PPUSH
65330: PPUSH
65331: PPUSH
65332: PPUSH
65333: PPUSH
65334: PPUSH
65335: PPUSH
// begin enable ;
65336: ENABLE
// list := warehouseGatheringPoints diff 0 ;
65337: LD_ADDR_VAR 0 3
65341: PUSH
65342: LD_EXP 140
65346: PUSH
65347: LD_INT 0
65349: DIFF
65350: ST_TO_ADDR
// for i := 1 to list do
65351: LD_ADDR_VAR 0 1
65355: PUSH
65356: DOUBLE
65357: LD_INT 1
65359: DEC
65360: ST_TO_ADDR
65361: LD_VAR 0 3
65365: PUSH
65366: FOR_TO
65367: IFFALSE 65947
// begin if not list [ i ] then
65369: LD_VAR 0 3
65373: PUSH
65374: LD_VAR 0 1
65378: ARRAY
65379: NOT
65380: IFFALSE 65384
// continue ;
65382: GO 65366
// depot := list [ i ] [ 2 ] ;
65384: LD_ADDR_VAR 0 8
65388: PUSH
65389: LD_VAR 0 3
65393: PUSH
65394: LD_VAR 0 1
65398: ARRAY
65399: PUSH
65400: LD_INT 2
65402: ARRAY
65403: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65404: LD_ADDR_VAR 0 5
65408: PUSH
65409: LD_VAR 0 3
65413: PUSH
65414: LD_VAR 0 1
65418: ARRAY
65419: PUSH
65420: LD_INT 1
65422: ARRAY
65423: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65424: LD_VAR 0 8
65428: PPUSH
65429: CALL_OW 301
65433: PUSH
65434: LD_VAR 0 5
65438: PUSH
65439: LD_VAR 0 8
65443: PPUSH
65444: CALL_OW 255
65448: NONEQUAL
65449: OR
65450: IFFALSE 65479
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65452: LD_ADDR_EXP 140
65456: PUSH
65457: LD_EXP 140
65461: PPUSH
65462: LD_VAR 0 8
65466: PPUSH
65467: LD_INT 0
65469: PPUSH
65470: CALL_OW 1
65474: ST_TO_ADDR
// exit ;
65475: POP
65476: POP
65477: GO 65949
// end ; x := list [ i ] [ 3 ] ;
65479: LD_ADDR_VAR 0 6
65483: PUSH
65484: LD_VAR 0 3
65488: PUSH
65489: LD_VAR 0 1
65493: ARRAY
65494: PUSH
65495: LD_INT 3
65497: ARRAY
65498: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65499: LD_ADDR_VAR 0 7
65503: PUSH
65504: LD_VAR 0 3
65508: PUSH
65509: LD_VAR 0 1
65513: ARRAY
65514: PUSH
65515: LD_INT 4
65517: ARRAY
65518: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
65519: LD_ADDR_VAR 0 9
65523: PUSH
65524: LD_VAR 0 6
65528: PPUSH
65529: LD_VAR 0 7
65533: PPUSH
65534: LD_INT 12
65536: PPUSH
65537: CALL 48951 0 3
65541: ST_TO_ADDR
// if not cratesNearbyPoint then
65542: LD_VAR 0 9
65546: NOT
65547: IFFALSE 65553
// exit ;
65549: POP
65550: POP
65551: GO 65949
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65553: LD_ADDR_VAR 0 4
65557: PUSH
65558: LD_INT 22
65560: PUSH
65561: LD_VAR 0 5
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 3
65572: PUSH
65573: LD_INT 60
65575: PUSH
65576: EMPTY
65577: LIST
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 2
65585: PUSH
65586: LD_INT 25
65588: PUSH
65589: LD_INT 2
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 25
65598: PUSH
65599: LD_INT 16
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: LIST
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: LIST
65615: PPUSH
65616: CALL_OW 69
65620: PUSH
65621: LD_VAR 0 8
65625: PPUSH
65626: CALL_OW 313
65630: PPUSH
65631: LD_INT 3
65633: PUSH
65634: LD_INT 60
65636: PUSH
65637: EMPTY
65638: LIST
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 2
65646: PUSH
65647: LD_INT 25
65649: PUSH
65650: LD_INT 2
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: PUSH
65657: LD_INT 25
65659: PUSH
65660: LD_INT 16
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: LIST
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PPUSH
65676: CALL_OW 72
65680: UNION
65681: ST_TO_ADDR
// if tmp then
65682: LD_VAR 0 4
65686: IFFALSE 65766
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65688: LD_ADDR_VAR 0 4
65692: PUSH
65693: LD_VAR 0 4
65697: PPUSH
65698: LD_INT 3
65700: PPUSH
65701: CALL 46918 0 2
65705: ST_TO_ADDR
// for j in tmp do
65706: LD_ADDR_VAR 0 2
65710: PUSH
65711: LD_VAR 0 4
65715: PUSH
65716: FOR_IN
65717: IFFALSE 65760
// begin if IsInUnit ( j ) then
65719: LD_VAR 0 2
65723: PPUSH
65724: CALL_OW 310
65728: IFFALSE 65739
// ComExit ( j ) ;
65730: LD_VAR 0 2
65734: PPUSH
65735: CALL 47001 0 1
// AddComCollect ( j , x , y ) ;
65739: LD_VAR 0 2
65743: PPUSH
65744: LD_VAR 0 6
65748: PPUSH
65749: LD_VAR 0 7
65753: PPUSH
65754: CALL_OW 177
// end ;
65758: GO 65716
65760: POP
65761: POP
// exit ;
65762: POP
65763: POP
65764: GO 65949
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65766: LD_ADDR_VAR 0 4
65770: PUSH
65771: LD_INT 22
65773: PUSH
65774: LD_VAR 0 5
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 2
65785: PUSH
65786: LD_INT 34
65788: PUSH
65789: LD_INT 12
65791: PUSH
65792: EMPTY
65793: LIST
65794: LIST
65795: PUSH
65796: LD_INT 34
65798: PUSH
65799: LD_INT 51
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 34
65808: PUSH
65809: LD_INT 32
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 34
65818: PUSH
65819: LD_EXP 63
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PPUSH
65839: CALL_OW 69
65843: ST_TO_ADDR
// if tmp then
65844: LD_VAR 0 4
65848: IFFALSE 65945
// begin for j in tmp do
65850: LD_ADDR_VAR 0 2
65854: PUSH
65855: LD_VAR 0 4
65859: PUSH
65860: FOR_IN
65861: IFFALSE 65943
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
65863: LD_VAR 0 1
65867: PPUSH
65868: CALL_OW 261
65872: PUSH
65873: LD_INT 20
65875: GREATER
65876: PUSH
65877: LD_VAR 0 1
65881: PPUSH
65882: CALL_OW 314
65886: NOT
65887: AND
65888: PUSH
65889: LD_VAR 0 1
65893: PPUSH
65894: CALL_OW 263
65898: PUSH
65899: LD_INT 1
65901: NONEQUAL
65902: PUSH
65903: LD_VAR 0 1
65907: PPUSH
65908: CALL_OW 311
65912: OR
65913: AND
65914: IFFALSE 65941
// begin ComCollect ( j , x , y ) ;
65916: LD_VAR 0 2
65920: PPUSH
65921: LD_VAR 0 6
65925: PPUSH
65926: LD_VAR 0 7
65930: PPUSH
65931: CALL_OW 117
// exit ;
65935: POP
65936: POP
65937: POP
65938: POP
65939: GO 65949
// end ;
65941: GO 65860
65943: POP
65944: POP
// end ; end ;
65945: GO 65366
65947: POP
65948: POP
// end ;
65949: PPOPN 9
65951: END
