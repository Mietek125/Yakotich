// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 40 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Randomize ;
  15: CALL_OW 10
// RandomizeAll ;
  19: CALL_OW 11
// InitRussian ;
  23: CALL 6755 0 0
// Action ;
  27: CALL 7293 0 0
// InitAmerican ;
  31: CALL 2488 0 0
// DebugMode ;
  35: CALL 168 0 0
// end ;
  39: END
// export YakotichCrew , MietekCrew ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin ; export Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Morozov , Kurin , Grishko , Burlak , Platonov , AmSold ; export KurinTime , MietekTime ; export AmConvoys , AmConvoysVehicles , AmNorthPersonel , AmSouthPersonel ; export AmSoldNorth , AmSciNorth , AmMechNorth , AmEngNorth , AmSoldSouth , AmSciSouth , AmMechSouth , AmEngSouth ; export AmSoldConvoy , AmSciConvoy , AmMechConvoy , AmEngConvoy , AmVehicleConvoy ; export debug ; export mission_prefix ; export maksim_scout_ended , maksim_back , turrets_researched , gattling_researched , gun_researched , gun_recycled , second_wave_clear , transport_builded , first_attack_spawned , first_attack_clear , reiforcements_called , kurin_attack_started , end_of_the_mission ; export livid ; function Init ; begin
  40: LD_INT 0
  42: PPUSH
// mission_prefix := 02_ ;
  43: LD_ADDR_EXP 43
  47: PUSH
  48: LD_STRING 02_
  50: ST_TO_ADDR
// maksim_scout_ended := false ;
  51: LD_ADDR_EXP 44
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// maksim_back := false ;
  59: LD_ADDR_EXP 45
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// turrets_researched := false ;
  67: LD_ADDR_EXP 46
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// gattling_researched := false ;
  75: LD_ADDR_EXP 47
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// gun_recycled := false ;
  83: LD_ADDR_EXP 49
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// gun_researched := false ;
  91: LD_ADDR_EXP 48
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// transport_builded := false ;
  99: LD_ADDR_EXP 51
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// first_attack_spawned := false ;
 107: LD_ADDR_EXP 52
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// first_attack_clear := false ;
 115: LD_ADDR_EXP 53
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// reiforcements_called := false ;
 123: LD_ADDR_EXP 54
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// kurin_attack_started := false ;
 131: LD_ADDR_EXP 55
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// end_of_the_mission := false ;
 139: LD_ADDR_EXP 56
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// MietekTime := 5 5$0 ;
 147: LD_ADDR_EXP 24
 151: PUSH
 152: LD_INT 10500
 154: ST_TO_ADDR
// KurinTime := 30 30$0 ;
 155: LD_ADDR_EXP 23
 159: PUSH
 160: LD_INT 63000
 162: ST_TO_ADDR
// end ;
 163: LD_VAR 0 1
 167: RET
// function DebugMode ; var i ; begin
 168: LD_INT 0
 170: PPUSH
 171: PPUSH
// if not debug then
 172: LD_EXP 42
 176: NOT
 177: IFFALSE 181
// exit ;
 179: GO 200
// Difficulty := 3 ;
 181: LD_ADDR_OWVAR 67
 185: PUSH
 186: LD_INT 3
 188: ST_TO_ADDR
// TurnFogOff ( ) ;
 189: CALL_OW 537
// FogOff ( 3 ) ;
 193: LD_INT 3
 195: PPUSH
 196: CALL_OW 344
// end ; end_of_file
 200: LD_VAR 0 1
 204: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
 205: LD_INT 0
 207: PPUSH
// ar_miner := 81 ;
 208: LD_ADDR_EXP 65
 212: PUSH
 213: LD_INT 81
 215: ST_TO_ADDR
// ar_crane := 88 ;
 216: LD_ADDR_EXP 64
 220: PUSH
 221: LD_INT 88
 223: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 224: LD_ADDR_EXP 59
 228: PUSH
 229: LD_INT 89
 231: ST_TO_ADDR
// us_hack := 99 ;
 232: LD_ADDR_EXP 60
 236: PUSH
 237: LD_INT 99
 239: ST_TO_ADDR
// us_artillery := 97 ;
 240: LD_ADDR_EXP 61
 244: PUSH
 245: LD_INT 97
 247: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 248: LD_ADDR_EXP 62
 252: PUSH
 253: LD_INT 91
 255: ST_TO_ADDR
// ar_mortar := 92 ;
 256: LD_ADDR_EXP 63
 260: PUSH
 261: LD_INT 92
 263: ST_TO_ADDR
// ru_flamethrower := 93 ;
 264: LD_ADDR_EXP 66
 268: PUSH
 269: LD_INT 93
 271: ST_TO_ADDR
// ru_radar := 98 ;
 272: LD_ADDR_EXP 58
 276: PUSH
 277: LD_INT 98
 279: ST_TO_ADDR
// tech_Artillery := 80 ;
 280: LD_ADDR_EXP 67
 284: PUSH
 285: LD_INT 80
 287: ST_TO_ADDR
// tech_RadMat := 81 ;
 288: LD_ADDR_EXP 68
 292: PUSH
 293: LD_INT 81
 295: ST_TO_ADDR
// tech_BasicTools := 82 ;
 296: LD_ADDR_EXP 69
 300: PUSH
 301: LD_INT 82
 303: ST_TO_ADDR
// tech_Cargo := 83 ;
 304: LD_ADDR_EXP 70
 308: PUSH
 309: LD_INT 83
 311: ST_TO_ADDR
// tech_Track := 84 ;
 312: LD_ADDR_EXP 71
 316: PUSH
 317: LD_INT 84
 319: ST_TO_ADDR
// tech_Crane := 85 ;
 320: LD_ADDR_EXP 72
 324: PUSH
 325: LD_INT 85
 327: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 328: LD_ADDR_EXP 73
 332: PUSH
 333: LD_INT 86
 335: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 336: LD_ADDR_EXP 74
 340: PUSH
 341: LD_INT 87
 343: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
 344: LD_ADDR_EXP 75
 348: PUSH
 349: LD_INT 88
 351: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
 352: LD_ADDR_EXP 76
 356: PUSH
 357: LD_INT 90
 359: ST_TO_ADDR
// class_mastodont := 31 ;
 360: LD_ADDR_EXP 77
 364: PUSH
 365: LD_INT 31
 367: ST_TO_ADDR
// class_horse := 21 ;
 368: LD_ADDR_EXP 78
 372: PUSH
 373: LD_INT 21
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// every 1 do
 381: GO 383
 383: DISABLE
// InitGlobalVariables ; end_of_file
 384: CALL 205 0 0
 388: END
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 389: LD_INT 0
 391: PPUSH
 392: PPUSH
 393: PPUSH
// uc_side := GetSide ( b ) ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_VAR 0 2
 403: PPUSH
 404: CALL_OW 255
 408: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 409: LD_ADDR_OWVAR 21
 413: PUSH
 414: LD_VAR 0 2
 418: PPUSH
 419: CALL_OW 248
 423: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 424: LD_ADDR_VAR 0 5
 428: PUSH
 429: LD_VAR 0 2
 433: PPUSH
 434: CALL_OW 254
 438: PUSH
 439: LD_INT 3
 441: MINUS
 442: ST_TO_ADDR
// if dir < 0 then
 443: LD_VAR 0 5
 447: PUSH
 448: LD_INT 0
 450: LESS
 451: IFFALSE 467
// dir := 6 + dir ;
 453: LD_ADDR_VAR 0 5
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: LD_VAR 0 5
 465: PLUS
 466: ST_TO_ADDR
// un := CreateHuman ;
 467: LD_ADDR_VAR 0 4
 471: PUSH
 472: CALL_OW 44
 476: ST_TO_ADDR
// SetDir ( un , dir ) ;
 477: LD_VAR 0 4
 481: PPUSH
 482: LD_VAR 0 5
 486: PPUSH
 487: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 491: LD_VAR 0 4
 495: PPUSH
 496: LD_VAR 0 2
 500: PPUSH
 501: CALL_OW 52
// end ;
 505: LD_VAR 0 3
 509: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 510: LD_INT 0
 512: PPUSH
 513: PPUSH
// if exist_mode then
 514: LD_VAR 0 2
 518: IFFALSE 543
// unit := CreateCharacter ( prefix & ident ) else
 520: LD_ADDR_VAR 0 5
 524: PUSH
 525: LD_VAR 0 3
 529: PUSH
 530: LD_VAR 0 1
 534: STR
 535: PPUSH
 536: CALL_OW 34
 540: ST_TO_ADDR
 541: GO 558
// unit := NewCharacter ( ident ) ;
 543: LD_ADDR_VAR 0 5
 547: PUSH
 548: LD_VAR 0 1
 552: PPUSH
 553: CALL_OW 25
 557: ST_TO_ADDR
// result := unit ;
 558: LD_ADDR_VAR 0 4
 562: PUSH
 563: LD_VAR 0 5
 567: ST_TO_ADDR
// end ;
 568: LD_VAR 0 4
 572: RET
// export function GetCountOfBuildingsInBase ( base , btype ) ; var i , tmp ; begin
 573: LD_INT 0
 575: PPUSH
 576: PPUSH
 577: PPUSH
// result := 0 ;
 578: LD_ADDR_VAR 0 3
 582: PUSH
 583: LD_INT 0
 585: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_btype , btype ] ) ;
 586: LD_ADDR_VAR 0 5
 590: PUSH
 591: LD_INT 30
 593: PUSH
 594: LD_VAR 0 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PPUSH
 603: CALL_OW 69
 607: ST_TO_ADDR
// if not base or not tmp then
 608: LD_VAR 0 1
 612: NOT
 613: PUSH
 614: LD_VAR 0 5
 618: NOT
 619: OR
 620: IFFALSE 624
// exit ;
 622: GO 672
// for i in tmp do
 624: LD_ADDR_VAR 0 4
 628: PUSH
 629: LD_VAR 0 5
 633: PUSH
 634: FOR_IN
 635: IFFALSE 670
// if GetBase ( i ) = base then
 637: LD_VAR 0 4
 641: PPUSH
 642: CALL_OW 274
 646: PUSH
 647: LD_VAR 0 1
 651: EQUAL
 652: IFFALSE 668
// result := result + 1 ;
 654: LD_ADDR_VAR 0 3
 658: PUSH
 659: LD_VAR 0 3
 663: PUSH
 664: LD_INT 1
 666: PLUS
 667: ST_TO_ADDR
 668: GO 634
 670: POP
 671: POP
// end ;
 672: LD_VAR 0 3
 676: RET
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 677: LD_EXP 55
 681: PUSH
 682: LD_INT 0
 684: EQUAL
 685: PUSH
 686: LD_INT 17
 688: PPUSH
 689: LD_INT 22
 691: PUSH
 692: LD_INT 3
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 21
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: PUSH
 712: LD_INT 21
 714: PUSH
 715: LD_INT 2
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PPUSH
 731: CALL_OW 70
 735: PUSH
 736: LD_INT 0
 738: GREATER
 739: AND
 740: IFFALSE 848
 742: GO 744
 744: DISABLE
 745: LD_INT 0
 747: PPUSH
// begin enable ;
 748: ENABLE
// for unit in FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 749: LD_ADDR_VAR 0 1
 753: PUSH
 754: LD_INT 17
 756: PPUSH
 757: LD_INT 22
 759: PUSH
 760: LD_INT 3
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: PUSH
 767: LD_INT 2
 769: PUSH
 770: LD_INT 21
 772: PUSH
 773: LD_INT 1
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: PUSH
 780: LD_INT 21
 782: PUSH
 783: LD_INT 2
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: CALL_OW 70
 803: PUSH
 804: FOR_IN
 805: IFFALSE 846
// begin ComMoveXY ( unit , GetX ( unit ) + 5 , GetY ( unit ) + 5 ) ;
 807: LD_VAR 0 1
 811: PPUSH
 812: LD_VAR 0 1
 816: PPUSH
 817: CALL_OW 250
 821: PUSH
 822: LD_INT 5
 824: PLUS
 825: PPUSH
 826: LD_VAR 0 1
 830: PPUSH
 831: CALL_OW 251
 835: PUSH
 836: LD_INT 5
 838: PLUS
 839: PPUSH
 840: CALL_OW 111
// end ;
 844: GO 804
 846: POP
 847: POP
// end ;
 848: PPOPN 1
 850: END
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 851: LD_EXP 55
 855: PUSH
 856: LD_INT 0
 858: EQUAL
 859: PUSH
 860: LD_INT 18
 862: PPUSH
 863: LD_INT 22
 865: PUSH
 866: LD_INT 3
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PUSH
 873: LD_INT 2
 875: PUSH
 876: LD_INT 21
 878: PUSH
 879: LD_INT 1
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 21
 888: PUSH
 889: LD_INT 2
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: LIST
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 70
 909: PUSH
 910: LD_INT 0
 912: GREATER
 913: AND
 914: IFFALSE 1022
 916: GO 918
 918: DISABLE
 919: LD_INT 0
 921: PPUSH
// begin enable ;
 922: ENABLE
// for unit in FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 923: LD_ADDR_VAR 0 1
 927: PUSH
 928: LD_INT 18
 930: PPUSH
 931: LD_INT 22
 933: PUSH
 934: LD_INT 3
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: LD_INT 21
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 21
 956: PUSH
 957: LD_INT 2
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: LIST
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PPUSH
 973: CALL_OW 70
 977: PUSH
 978: FOR_IN
 979: IFFALSE 1020
// begin ComMoveXY ( unit , GetX ( unit ) + 5 , GetY ( unit ) + 5 ) ;
 981: LD_VAR 0 1
 985: PPUSH
 986: LD_VAR 0 1
 990: PPUSH
 991: CALL_OW 250
 995: PUSH
 996: LD_INT 5
 998: PLUS
 999: PPUSH
1000: LD_VAR 0 1
1004: PPUSH
1005: CALL_OW 251
1009: PUSH
1010: LD_INT 5
1012: PLUS
1013: PPUSH
1014: CALL_OW 111
// end ;
1018: GO 978
1020: POP
1021: POP
// end ;
1022: PPOPN 1
1024: END
// every 1 trigger IsSelected ( Serpent ) do
1025: LD_INT 137
1027: PPUSH
1028: CALL_OW 306
1032: IFFALSE 1129
1034: GO 1036
1036: DISABLE
// begin SerpentExp ( [ 1 , 2 , 3 , 4 ] ) ;
1037: LD_INT 1
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 3
1045: PUSH
1046: LD_INT 4
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PPUSH
1055: CALL 1130 0 1
// Wait ( 0 0$05 ) ;
1059: LD_INT 175
1061: PPUSH
1062: CALL_OW 67
// Say ( Serpent , 2Langu-Sikret ) ;
1066: LD_INT 137
1068: PPUSH
1069: LD_STRING 2Langu-Sikret
1071: PPUSH
1072: CALL_OW 88
// TeleportUnit ( Serpent , 5 , 4 , 100 , true ) ;
1076: LD_INT 137
1078: PPUSH
1079: LD_INT 5
1081: PPUSH
1082: LD_INT 4
1084: PPUSH
1085: LD_INT 100
1087: PPUSH
1088: LD_INT 1
1090: PPUSH
1091: CALL_OW 483
// Wait ( 0 0$05 ) ;
1095: LD_INT 175
1097: PPUSH
1098: CALL_OW 67
// RemoveUnit ( Serpent ) ;
1102: LD_INT 137
1104: PPUSH
1105: CALL_OW 64
// SaveVariable ( Serpent , SerpentSaved ) ;
1109: LD_INT 137
1111: PPUSH
1112: LD_STRING SerpentSaved
1114: PPUSH
1115: CALL_OW 39
// SaveCharacters ( Serpent , Langu ) ;
1119: LD_INT 137
1121: PPUSH
1122: LD_STRING Langu
1124: PPUSH
1125: CALL_OW 38
// end ;
1129: END
// export function SerpentExp ( q ) ; var dec , q1 ; begin
1130: LD_INT 0
1132: PPUSH
1133: PPUSH
1134: PPUSH
// dec = SelectiveQuery ( SerpentQuery , q ) ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: LD_STRING SerpentQuery
1142: PPUSH
1143: LD_VAR 0 1
1147: PPUSH
1148: CALL_OW 98
1152: ST_TO_ADDR
// case dec of 1 :
1153: LD_VAR 0 3
1157: PUSH
1158: LD_INT 1
1160: DOUBLE
1161: EQUAL
1162: IFTRUE 1166
1164: GO 1184
1166: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 1000 ) ;
1167: LD_EXP 3
1171: PPUSH
1172: LD_INT 1
1174: PPUSH
1175: LD_INT 1000
1177: PPUSH
1178: CALL_OW 591
// end ; 2 :
1182: GO 1263
1184: LD_INT 2
1186: DOUBLE
1187: EQUAL
1188: IFTRUE 1192
1190: GO 1210
1192: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 1000 ) ;
1193: LD_EXP 3
1197: PPUSH
1198: LD_INT 2
1200: PPUSH
1201: LD_INT 1000
1203: PPUSH
1204: CALL_OW 591
// end ; 3 :
1208: GO 1263
1210: LD_INT 3
1212: DOUBLE
1213: EQUAL
1214: IFTRUE 1218
1216: GO 1236
1218: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 1000 ) ;
1219: LD_EXP 3
1223: PPUSH
1224: LD_INT 3
1226: PPUSH
1227: LD_INT 1000
1229: PPUSH
1230: CALL_OW 591
// end ; 4 :
1234: GO 1263
1236: LD_INT 4
1238: DOUBLE
1239: EQUAL
1240: IFTRUE 1244
1242: GO 1262
1244: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 1000 ) ;
1245: LD_EXP 3
1249: PPUSH
1250: LD_INT 4
1252: PPUSH
1253: LD_INT 1000
1255: PPUSH
1256: CALL_OW 591
// end ; end ;
1260: GO 1263
1262: POP
// end ;
1263: LD_VAR 0 2
1267: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
1268: LD_EXP 3
1272: PPUSH
1273: CALL_OW 301
1277: IFFALSE 1289
1279: GO 1281
1281: DISABLE
// begin YouLost ( YakotichDead ) ;
1282: LD_STRING YakotichDead
1284: PPUSH
1285: CALL_OW 104
// end ;
1289: END
// every 0 0$1 trigger IsDead ( Mietek ) do
1290: LD_EXP 4
1294: PPUSH
1295: CALL_OW 301
1299: IFFALSE 1311
1301: GO 1303
1303: DISABLE
// begin YouLost ( MietekDead ) ;
1304: LD_STRING MietekDead
1306: PPUSH
1307: CALL_OW 104
// end ;
1311: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
1312: LD_VAR 0 1
1316: PUSH
1317: LD_INT 22
1319: PUSH
1320: LD_INT 3
1322: PUSH
1323: EMPTY
1324: LIST
1325: LIST
1326: PUSH
1327: LD_INT 3
1329: PUSH
1330: LD_INT 23
1332: PUSH
1333: LD_INT 0
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: LD_INT 21
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: LIST
1358: PPUSH
1359: CALL_OW 69
1363: IN
1364: IFFALSE 1373
// YouLost ( PeopleDead ) ;
1366: LD_STRING PeopleDead
1368: PPUSH
1369: CALL_OW 104
// end ;
1373: PPOPN 1
1375: END
// every 0 0$1 trigger FilterUnitsInArea ( OmikronArea , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) do
1376: LD_INT 15
1378: PPUSH
1379: LD_INT 2
1381: PUSH
1382: LD_INT 22
1384: PUSH
1385: LD_INT 1
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 22
1394: PUSH
1395: LD_INT 4
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: PPUSH
1407: CALL_OW 70
1411: IFFALSE 1423
1413: GO 1415
1415: DISABLE
// begin YouLost ( ConvoysMadeIt ) ;
1416: LD_STRING ConvoysMadeIt
1418: PPUSH
1419: CALL_OW 104
// end ;
1423: END
// every 0 0$1 trigger maksim_back = true do
1424: LD_EXP 45
1428: PUSH
1429: LD_INT 1
1431: EQUAL
1432: IFFALSE 1441
1434: GO 1436
1436: DISABLE
// begin AmAttacks ;
1437: CALL 3897 0 0
// end ;
1441: END
// export function MaksimScout ; begin
1442: LD_INT 0
1444: PPUSH
// SetSide ( Maksim , 6 ) ;
1445: LD_EXP 9
1449: PPUSH
1450: LD_INT 6
1452: PPUSH
1453: CALL_OW 235
// ComMoveToArea ( Maksim , MaksimStop1 ) ;
1457: LD_EXP 9
1461: PPUSH
1462: LD_INT 5
1464: PPUSH
1465: CALL_OW 113
// end ;
1469: LD_VAR 0 1
1473: RET
// every 1 trigger IsInArea ( Maksim , MaksimStop1 ) do
1474: LD_EXP 9
1478: PPUSH
1479: LD_INT 5
1481: PPUSH
1482: CALL_OW 308
1486: IFFALSE 1519
1488: GO 1490
1490: DISABLE
// begin ComHold ( Maksim ) ;
1491: LD_EXP 9
1495: PPUSH
1496: CALL_OW 140
// Wait ( 0 0$10 ) ;
1500: LD_INT 350
1502: PPUSH
1503: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop2 ) ;
1507: LD_EXP 9
1511: PPUSH
1512: LD_INT 6
1514: PPUSH
1515: CALL_OW 113
// end ;
1519: END
// every 1 trigger IsInArea ( Maksim , MaksimStop2 ) do
1520: LD_EXP 9
1524: PPUSH
1525: LD_INT 6
1527: PPUSH
1528: CALL_OW 308
1532: IFFALSE 1556
1534: GO 1536
1536: DISABLE
// begin Wait ( 0 0$10 ) ;
1537: LD_INT 350
1539: PPUSH
1540: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop3 ) ;
1544: LD_EXP 9
1548: PPUSH
1549: LD_INT 7
1551: PPUSH
1552: CALL_OW 113
// end ;
1556: END
// every 1 trigger IsInArea ( Maksim , MaksimStop3 ) do
1557: LD_EXP 9
1561: PPUSH
1562: LD_INT 7
1564: PPUSH
1565: CALL_OW 308
1569: IFFALSE 1603
1571: GO 1573
1573: DISABLE
// begin Wait ( 0 0$10 ) ;
1574: LD_INT 350
1576: PPUSH
1577: CALL_OW 67
// maksim_scout_ended = true ;
1581: LD_ADDR_EXP 44
1585: PUSH
1586: LD_INT 1
1588: ST_TO_ADDR
// ComMoveUnit ( Maksim , Yakotich ) ;
1589: LD_EXP 9
1593: PPUSH
1594: LD_EXP 3
1598: PPUSH
1599: CALL_OW 112
// end ;
1603: END
// every 0 0$1 trigger maksim_back do
1604: LD_EXP 45
1608: IFFALSE 1662
1610: GO 1612
1612: DISABLE
// begin enable ;
1613: ENABLE
// if KurinTime then
1614: LD_EXP 23
1618: IFFALSE 1653
// begin KurinTime := KurinTime - 0 0$1 ;
1620: LD_ADDR_EXP 23
1624: PUSH
1625: LD_EXP 23
1629: PUSH
1630: LD_INT 35
1632: MINUS
1633: ST_TO_ADDR
// display_strings := [ #KurinAttack , KurinTime ] ;
1634: LD_ADDR_OWVAR 47
1638: PUSH
1639: LD_STRING #KurinAttack
1641: PUSH
1642: LD_EXP 23
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: ST_TO_ADDR
// end else
1651: GO 1662
// begin display_strings :=  ;
1653: LD_ADDR_OWVAR 47
1657: PUSH
1658: LD_STRING 
1660: ST_TO_ADDR
// disable ;
1661: DISABLE
// end ; end ;
1662: END
// every 0 0$1 trigger first_attack_clear do
1663: LD_EXP 53
1667: IFFALSE 1727
1669: GO 1671
1671: DISABLE
// begin enable ;
1672: ENABLE
// if MietekTime then
1673: LD_EXP 24
1677: IFFALSE 1718
// begin MietekTime := MietekTime - 0 0$1 ;
1679: LD_ADDR_EXP 24
1683: PUSH
1684: LD_EXP 24
1688: PUSH
1689: LD_INT 35
1691: MINUS
1692: ST_TO_ADDR
// display_strings := display_strings ^ [ #MietekForces , MietekTime ] ;
1693: LD_ADDR_OWVAR 47
1697: PUSH
1698: LD_OWVAR 47
1702: PUSH
1703: LD_STRING #MietekForces
1705: PUSH
1706: LD_EXP 24
1710: PUSH
1711: EMPTY
1712: LIST
1713: LIST
1714: ADD
1715: ST_TO_ADDR
// end else
1716: GO 1727
// begin display_strings :=  ;
1718: LD_ADDR_OWVAR 47
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// disable ;
1726: DISABLE
// end ; end ; end_of_file
1727: END
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
1728: LD_VAR 0 1
1732: PPUSH
1733: CALL_OW 255
1737: PUSH
1738: LD_INT 3
1740: EQUAL
1741: PUSH
1742: LD_VAR 0 1
1746: PPUSH
1747: CALL_OW 266
1751: PUSH
1752: LD_INT 0
1754: EQUAL
1755: AND
1756: IFFALSE 1781
// begin RuDep := building ;
1758: LD_ADDR_EXP 79
1762: PUSH
1763: LD_VAR 0 1
1767: ST_TO_ADDR
// SetRestrict ( b_depot , 3 , false ) ;
1768: LD_INT 0
1770: PPUSH
1771: LD_INT 3
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 324
// end ; end ;
1781: PPOPN 2
1783: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 3 and GetBType ( b ) = b_depot then
1784: LD_VAR 0 1
1788: PPUSH
1789: CALL_OW 255
1793: PUSH
1794: LD_INT 3
1796: EQUAL
1797: PUSH
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 266
1807: PUSH
1808: LD_INT 0
1810: EQUAL
1811: AND
1812: IFFALSE 1866
// begin DialogueOn ;
1814: CALL_OW 6
// Say ( Boris , 2Bor-01 ) ;
1818: LD_EXP 5
1822: PPUSH
1823: LD_STRING 2Bor-01
1825: PPUSH
1826: CALL_OW 88
// Say ( Vasilij , 2Vas-05 ) ;
1830: LD_EXP 6
1834: PPUSH
1835: LD_STRING 2Vas-05
1837: PPUSH
1838: CALL_OW 88
// ChangeMissionObjectives ( transport ) ;
1842: LD_STRING transport
1844: PPUSH
1845: CALL_OW 337
// SetTech ( 83 , 3 , 1 ) ;
1849: LD_INT 83
1851: PPUSH
1852: LD_INT 3
1854: PPUSH
1855: LD_INT 1
1857: PPUSH
1858: CALL_OW 322
// DialogueOff ;
1862: CALL_OW 7
// end ; if GetSide ( b ) = 3 and GetBType ( b ) = b_lab then
1866: LD_VAR 0 1
1870: PPUSH
1871: CALL_OW 255
1875: PUSH
1876: LD_INT 3
1878: EQUAL
1879: PUSH
1880: LD_VAR 0 1
1884: PPUSH
1885: CALL_OW 266
1889: PUSH
1890: LD_INT 6
1892: EQUAL
1893: AND
1894: IFFALSE 1952
// begin Say ( Vasilij , 2Vas-01 ) ;
1896: LD_EXP 6
1900: PPUSH
1901: LD_STRING 2Vas-01
1903: PPUSH
1904: CALL_OW 88
// Say ( Vasilij , 2Vas-02 ) ;
1908: LD_EXP 6
1912: PPUSH
1913: LD_STRING 2Vas-02
1915: PPUSH
1916: CALL_OW 88
// Say ( Yakotich , 2Yak-14 ) ;
1920: LD_EXP 3
1924: PPUSH
1925: LD_STRING 2Yak-14
1927: PPUSH
1928: CALL_OW 88
// ChangeMissionObjectives ( gattling ) ;
1932: LD_STRING gattling
1934: PPUSH
1935: CALL_OW 337
// SetTech ( 69 , 3 , 1 ) ;
1939: LD_INT 69
1941: PPUSH
1942: LD_INT 3
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: CALL_OW 322
// end ; end ;
1952: PPOPN 1
1954: END
// on VehicleRecycled ( BuildingID , VehicleID , Side , Nation , X , Y , Direction , Chassis , Controller , Engine , Weapon ) do begin if Side = 3 and Nation = 1 and Weapon in [ 3 , 5 ] and gun_recycled = false then
1955: LD_VAR 0 3
1959: PUSH
1960: LD_INT 3
1962: EQUAL
1963: PUSH
1964: LD_VAR 0 4
1968: PUSH
1969: LD_INT 1
1971: EQUAL
1972: AND
1973: PUSH
1974: LD_VAR 0 11
1978: PUSH
1979: LD_INT 3
1981: PUSH
1982: LD_INT 5
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: IN
1989: AND
1990: PUSH
1991: LD_EXP 49
1995: PUSH
1996: LD_INT 0
1998: EQUAL
1999: AND
2000: IFFALSE 2048
// begin gun_recycled = true ;
2002: LD_ADDR_EXP 49
2006: PUSH
2007: LD_INT 1
2009: ST_TO_ADDR
// Say ( Stanislav , 2Stan-04 ) ;
2010: LD_EXP 16
2014: PPUSH
2015: LD_STRING 2Stan-04
2017: PPUSH
2018: CALL_OW 88
// SetTech ( 39 , 3 , 1 ) ;
2022: LD_INT 39
2024: PPUSH
2025: LD_INT 3
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: CALL_OW 322
// SetRestrict ( 17 , 3 , 1 ) ;
2035: LD_INT 17
2037: PPUSH
2038: LD_INT 3
2040: PPUSH
2041: LD_INT 1
2043: PPUSH
2044: CALL_OW 324
// end ; end ;
2048: PPOPN 11
2050: END
// on Contact ( side1 , side2 ) do begin if ( ( side1 = 4 and side2 = 3 ) or ( side1 = 3 and side2 = 4 ) ) and reiforcements_called = false then
2051: LD_VAR 0 1
2055: PUSH
2056: LD_INT 4
2058: EQUAL
2059: PUSH
2060: LD_VAR 0 2
2064: PUSH
2065: LD_INT 3
2067: EQUAL
2068: AND
2069: PUSH
2070: LD_VAR 0 1
2074: PUSH
2075: LD_INT 3
2077: EQUAL
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_INT 4
2086: EQUAL
2087: AND
2088: OR
2089: PUSH
2090: LD_EXP 54
2094: PUSH
2095: LD_INT 0
2097: EQUAL
2098: AND
2099: IFFALSE 2203
// begin reiforcements_called := true ;
2101: LD_ADDR_EXP 54
2105: PUSH
2106: LD_INT 1
2108: ST_TO_ADDR
// Say ( Yakotich , 2Yak-23 ) ;
2109: LD_EXP 3
2113: PPUSH
2114: LD_STRING 2Yak-23
2116: PPUSH
2117: CALL_OW 88
// Wait ( 0 0$10 ) ;
2121: LD_INT 350
2123: PPUSH
2124: CALL_OW 67
// SayRadio ( Yakotich , 2Yak-Reinforcements ) ;
2128: LD_EXP 3
2132: PPUSH
2133: LD_STRING 2Yak-Reinforcements
2135: PPUSH
2136: CALL_OW 94
// SayRadio ( Morozov , 2Moro-Reinforcements ) ;
2140: LD_EXP 17
2144: PPUSH
2145: LD_STRING 2Moro-Reinforcements
2147: PPUSH
2148: CALL_OW 94
// Wait ( 0 0$10 ) ;
2152: LD_INT 350
2154: PPUSH
2155: CALL_OW 67
// SayRadio ( Mietek , 2Ryn-04 ) ;
2159: LD_EXP 4
2163: PPUSH
2164: LD_STRING 2Ryn-04
2166: PPUSH
2167: CALL_OW 94
// SayRadio ( Mietek , 2Ryn-05 ) ;
2171: LD_EXP 4
2175: PPUSH
2176: LD_STRING 2Ryn-05
2178: PPUSH
2179: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-24 ) ;
2183: LD_EXP 3
2187: PPUSH
2188: LD_STRING 2Yak-24
2190: PPUSH
2191: CALL_OW 94
// first_attack_clear = true ;
2195: LD_ADDR_EXP 53
2199: PUSH
2200: LD_INT 1
2202: ST_TO_ADDR
// end ; end ;
2203: PPOPN 2
2205: END
// every 0 0$1 trigger Researched ( 3 , 69 ) do
2206: LD_INT 3
2208: PPUSH
2209: LD_INT 69
2211: PPUSH
2212: CALL_OW 325
2216: IFFALSE 2260
2218: GO 2220
2220: DISABLE
// begin Say ( Vasilij , 2Vas-03 ) ;
2221: LD_EXP 6
2225: PPUSH
2226: LD_STRING 2Vas-03
2228: PPUSH
2229: CALL_OW 88
// Say ( Vasilij , 2Vas-04 ) ;
2233: LD_EXP 6
2237: PPUSH
2238: LD_STRING 2Vas-04
2240: PPUSH
2241: CALL_OW 88
// gattling_researched = true ;
2245: LD_ADDR_EXP 47
2249: PUSH
2250: LD_INT 1
2252: ST_TO_ADDR
// ChangeMissionObjectives ( gattling-2 ) ;
2253: LD_STRING gattling-2
2255: PPUSH
2256: CALL_OW 337
// end ;
2260: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
2261: LD_INT 3
2263: PPUSH
2264: LD_INT 90
2266: PPUSH
2267: CALL_OW 325
2271: IFFALSE 2291
2273: GO 2275
2275: DISABLE
// begin turrets_researched = true ;
2276: LD_ADDR_EXP 46
2280: PUSH
2281: LD_INT 1
2283: ST_TO_ADDR
// ChangeMissionObjectives ( turret-2 ) ;
2284: LD_STRING turret-2
2286: PPUSH
2287: CALL_OW 337
// end ;
2291: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 89 ] , [ f_weapon , 51 ] ] ] ) do
2292: LD_INT 22
2294: PUSH
2295: LD_INT 3
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: LD_INT 21
2304: PUSH
2305: LD_INT 2
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 2
2314: PUSH
2315: LD_INT 34
2317: PUSH
2318: LD_INT 89
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 34
2327: PUSH
2328: LD_INT 51
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: LIST
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: LIST
2344: PPUSH
2345: CALL_OW 69
2349: IFFALSE 2369
2351: GO 2353
2353: DISABLE
// begin ChangeMissionObjectives ( transport-2 ) ;
2354: LD_STRING transport-2
2356: PPUSH
2357: CALL_OW 337
// transport_builded = true ;
2361: LD_ADDR_EXP 51
2365: PUSH
2366: LD_INT 1
2368: ST_TO_ADDR
// end ;
2369: END
// every 0 0$1 trigger Researched ( 3 , 39 ) do
2370: LD_INT 3
2372: PPUSH
2373: LD_INT 39
2375: PPUSH
2376: CALL_OW 325
2380: IFFALSE 2436
2382: GO 2384
2384: DISABLE
// begin Say ( Stanislav , 2Stan-05 ) ;
2385: LD_EXP 16
2389: PPUSH
2390: LD_STRING 2Stan-05
2392: PPUSH
2393: CALL_OW 88
// Say ( Stanislav , 2Stan-06 ) ;
2397: LD_EXP 16
2401: PPUSH
2402: LD_STRING 2Stan-06
2404: PPUSH
2405: CALL_OW 88
// Say ( Yakotich , 2Yak-Stan-02 ) ;
2409: LD_EXP 3
2413: PPUSH
2414: LD_STRING 2Yak-Stan-02
2416: PPUSH
2417: CALL_OW 88
// gun_researched = true ;
2421: LD_ADDR_EXP 48
2425: PUSH
2426: LD_INT 1
2428: ST_TO_ADDR
// ChangeMissionObjectives ( gun-2 ) ;
2429: LD_STRING gun-2
2431: PPUSH
2432: CALL_OW 337
// end ; end_of_file
2436: END
// every 5 5$0 do var i ;
2437: GO 2439
2439: DISABLE
2440: LD_INT 0
2442: PPUSH
// begin for i = 1 to 4 do
2443: LD_ADDR_VAR 0 1
2447: PUSH
2448: DOUBLE
2449: LD_INT 1
2451: DEC
2452: ST_TO_ADDR
2453: LD_INT 4
2455: PUSH
2456: FOR_TO
2457: IFFALSE 2483
// begin CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
2459: LD_INT 2
2461: PPUSH
2462: LD_INT 5
2464: PPUSH
2465: CALL_OW 12
2469: PPUSH
2470: LD_INT 4
2472: PPUSH
2473: LD_INT 1
2475: PPUSH
2476: CALL_OW 55
// enable ;
2480: ENABLE
// end ;
2481: GO 2456
2483: POP
2484: POP
// end ; end_of_file
2485: PPOPN 1
2487: END
// export function InitAmerican ; var i , y , turrety , lab , fabryka , zbrojka , turrety2 , lab2 , fabryka2 , zbrojka2 ; begin
2488: LD_INT 0
2490: PPUSH
2491: PPUSH
2492: PPUSH
2493: PPUSH
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
2498: PPUSH
2499: PPUSH
2500: PPUSH
// AmNorthPersonel := [ ] ;
2501: LD_ADDR_EXP 27
2505: PUSH
2506: EMPTY
2507: ST_TO_ADDR
// uc_side := 1 ;
2508: LD_ADDR_OWVAR 20
2512: PUSH
2513: LD_INT 1
2515: ST_TO_ADDR
// uc_nation := 1 ;
2516: LD_ADDR_OWVAR 21
2520: PUSH
2521: LD_INT 1
2523: ST_TO_ADDR
// for i = 1 to [ 7 , 8 , 9 ] [ Difficulty ] do
2524: LD_ADDR_VAR 0 2
2528: PUSH
2529: DOUBLE
2530: LD_INT 1
2532: DEC
2533: ST_TO_ADDR
2534: LD_INT 7
2536: PUSH
2537: LD_INT 8
2539: PUSH
2540: LD_INT 9
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: LIST
2547: PUSH
2548: LD_OWVAR 67
2552: ARRAY
2553: PUSH
2554: FOR_TO
2555: IFFALSE 2610
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2557: LD_INT 0
2559: PPUSH
2560: LD_INT 1
2562: PPUSH
2563: CALL_OW 12
2567: PPUSH
2568: LD_INT 1
2570: PUSH
2571: LD_INT 3
2573: PUSH
2574: LD_INT 5
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: LIST
2581: PUSH
2582: LD_OWVAR 67
2586: ARRAY
2587: PPUSH
2588: CALL_OW 381
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2592: LD_ADDR_EXP 27
2596: PUSH
2597: LD_EXP 27
2601: PUSH
2602: CALL_OW 44
2606: ADD
2607: ST_TO_ADDR
// end ;
2608: GO 2554
2610: POP
2611: POP
// for i = 1 to 2 do
2612: LD_ADDR_VAR 0 2
2616: PUSH
2617: DOUBLE
2618: LD_INT 1
2620: DEC
2621: ST_TO_ADDR
2622: LD_INT 2
2624: PUSH
2625: FOR_TO
2626: IFFALSE 2681
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2628: LD_INT 0
2630: PPUSH
2631: LD_INT 1
2633: PPUSH
2634: CALL_OW 12
2638: PPUSH
2639: LD_INT 1
2641: PUSH
2642: LD_INT 3
2644: PUSH
2645: LD_INT 5
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: LIST
2652: PUSH
2653: LD_OWVAR 67
2657: ARRAY
2658: PPUSH
2659: CALL_OW 382
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2663: LD_ADDR_EXP 27
2667: PUSH
2668: LD_EXP 27
2672: PUSH
2673: CALL_OW 44
2677: ADD
2678: ST_TO_ADDR
// end ;
2679: GO 2625
2681: POP
2682: POP
// for i = 1 to 1 do
2683: LD_ADDR_VAR 0 2
2687: PUSH
2688: DOUBLE
2689: LD_INT 1
2691: DEC
2692: ST_TO_ADDR
2693: LD_INT 1
2695: PUSH
2696: FOR_TO
2697: IFFALSE 2752
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2699: LD_INT 0
2701: PPUSH
2702: LD_INT 1
2704: PPUSH
2705: CALL_OW 12
2709: PPUSH
2710: LD_INT 1
2712: PUSH
2713: LD_INT 3
2715: PUSH
2716: LD_INT 5
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: LIST
2723: PUSH
2724: LD_OWVAR 67
2728: ARRAY
2729: PPUSH
2730: CALL_OW 383
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2734: LD_ADDR_EXP 27
2738: PUSH
2739: LD_EXP 27
2743: PUSH
2744: CALL_OW 44
2748: ADD
2749: ST_TO_ADDR
// end ;
2750: GO 2696
2752: POP
2753: POP
// for i = 1 to 1 do
2754: LD_ADDR_VAR 0 2
2758: PUSH
2759: DOUBLE
2760: LD_INT 1
2762: DEC
2763: ST_TO_ADDR
2764: LD_INT 1
2766: PUSH
2767: FOR_TO
2768: IFFALSE 2823
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2770: LD_INT 0
2772: PPUSH
2773: LD_INT 1
2775: PPUSH
2776: CALL_OW 12
2780: PPUSH
2781: LD_INT 1
2783: PUSH
2784: LD_INT 3
2786: PUSH
2787: LD_INT 5
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: LIST
2794: PUSH
2795: LD_OWVAR 67
2799: ARRAY
2800: PPUSH
2801: CALL_OW 384
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2805: LD_ADDR_EXP 27
2809: PUSH
2810: LD_EXP 27
2814: PUSH
2815: CALL_OW 44
2819: ADD
2820: ST_TO_ADDR
// end ;
2821: GO 2767
2823: POP
2824: POP
// turrety := FilterUnitsInArea ( AmNorthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
2825: LD_ADDR_VAR 0 4
2829: PUSH
2830: LD_INT 11
2832: PPUSH
2833: LD_INT 2
2835: PUSH
2836: LD_INT 30
2838: PUSH
2839: LD_INT 31
2841: PUSH
2842: EMPTY
2843: LIST
2844: LIST
2845: PUSH
2846: LD_INT 30
2848: PUSH
2849: LD_INT 32
2851: PUSH
2852: EMPTY
2853: LIST
2854: LIST
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: LIST
2860: PPUSH
2861: CALL_OW 70
2865: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_lab_half ] ] ) ;
2866: LD_ADDR_VAR 0 5
2870: PUSH
2871: LD_INT 11
2873: PPUSH
2874: LD_INT 30
2876: PUSH
2877: LD_INT 7
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PUSH
2884: EMPTY
2885: LIST
2886: PPUSH
2887: CALL_OW 70
2891: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_factory ] ] ) ;
2892: LD_ADDR_VAR 0 6
2896: PUSH
2897: LD_INT 11
2899: PPUSH
2900: LD_INT 30
2902: PUSH
2903: LD_INT 3
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: PPUSH
2913: CALL_OW 70
2917: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
2918: LD_ADDR_VAR 0 7
2922: PUSH
2923: LD_INT 11
2925: PPUSH
2926: LD_INT 30
2928: PUSH
2929: LD_INT 4
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: PPUSH
2939: CALL_OW 70
2943: ST_TO_ADDR
// y := 1 ;
2944: LD_ADDR_VAR 0 3
2948: PUSH
2949: LD_INT 1
2951: ST_TO_ADDR
// for i in AmNorthPersonel do
2952: LD_ADDR_VAR 0 2
2956: PUSH
2957: LD_EXP 27
2961: PUSH
2962: FOR_IN
2963: IFFALSE 3149
// begin PlaceUnitArea ( i , AmNorthArea , false ) ;
2965: LD_VAR 0 2
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: LD_INT 0
2975: PPUSH
2976: CALL_OW 49
// case GetClass ( i ) of 1 :
2980: LD_VAR 0 2
2984: PPUSH
2985: CALL_OW 257
2989: PUSH
2990: LD_INT 1
2992: DOUBLE
2993: EQUAL
2994: IFTRUE 2998
2996: GO 3065
2998: POP
// begin if y > 6 then
2999: LD_VAR 0 3
3003: PUSH
3004: LD_INT 6
3006: GREATER
3007: IFFALSE 3029
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
3009: LD_VAR 0 2
3013: PPUSH
3014: LD_VAR 0 7
3018: PUSH
3019: LD_INT 1
3021: ARRAY
3022: PPUSH
3023: CALL_OW 120
3027: GO 3049
// ComEnterUnit ( i , turrety [ y ] ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_VAR 0 4
3038: PUSH
3039: LD_VAR 0 3
3043: ARRAY
3044: PPUSH
3045: CALL_OW 120
// y = y + 1 ;
3049: LD_ADDR_VAR 0 3
3053: PUSH
3054: LD_VAR 0 3
3058: PUSH
3059: LD_INT 1
3061: PLUS
3062: ST_TO_ADDR
// end ; 2 :
3063: GO 3147
3065: LD_INT 2
3067: DOUBLE
3068: EQUAL
3069: IFTRUE 3073
3071: GO 3088
3073: POP
// ComEnterUnit ( i , AmDep1 ) ; 3 :
3074: LD_VAR 0 2
3078: PPUSH
3079: LD_INT 1
3081: PPUSH
3082: CALL_OW 120
3086: GO 3147
3088: LD_INT 3
3090: DOUBLE
3091: EQUAL
3092: IFTRUE 3096
3094: GO 3117
3096: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3097: LD_VAR 0 2
3101: PPUSH
3102: LD_VAR 0 6
3106: PUSH
3107: LD_INT 1
3109: ARRAY
3110: PPUSH
3111: CALL_OW 120
3115: GO 3147
3117: LD_INT 4
3119: DOUBLE
3120: EQUAL
3121: IFTRUE 3125
3123: GO 3146
3125: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3126: LD_VAR 0 2
3130: PPUSH
3131: LD_VAR 0 5
3135: PUSH
3136: LD_INT 1
3138: ARRAY
3139: PPUSH
3140: CALL_OW 120
3144: GO 3147
3146: POP
// end ;
3147: GO 2962
3149: POP
3150: POP
// AmSouthPersonel := [ ] ;
3151: LD_ADDR_EXP 28
3155: PUSH
3156: EMPTY
3157: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3158: LD_ADDR_VAR 0 2
3162: PUSH
3163: DOUBLE
3164: LD_INT 1
3166: DEC
3167: ST_TO_ADDR
3168: LD_INT 4
3170: PUSH
3171: LD_INT 5
3173: PUSH
3174: LD_INT 6
3176: PUSH
3177: EMPTY
3178: LIST
3179: LIST
3180: LIST
3181: PUSH
3182: LD_OWVAR 67
3186: ARRAY
3187: PUSH
3188: FOR_TO
3189: IFFALSE 3244
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3191: LD_INT 0
3193: PPUSH
3194: LD_INT 1
3196: PPUSH
3197: CALL_OW 12
3201: PPUSH
3202: LD_INT 1
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 5
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: LIST
3215: PUSH
3216: LD_OWVAR 67
3220: ARRAY
3221: PPUSH
3222: CALL_OW 381
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3226: LD_ADDR_EXP 28
3230: PUSH
3231: LD_EXP 28
3235: PUSH
3236: CALL_OW 44
3240: ADD
3241: ST_TO_ADDR
// end ;
3242: GO 3188
3244: POP
3245: POP
// for i = 1 to 1 do
3246: LD_ADDR_VAR 0 2
3250: PUSH
3251: DOUBLE
3252: LD_INT 1
3254: DEC
3255: ST_TO_ADDR
3256: LD_INT 1
3258: PUSH
3259: FOR_TO
3260: IFFALSE 3315
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3262: LD_INT 0
3264: PPUSH
3265: LD_INT 1
3267: PPUSH
3268: CALL_OW 12
3272: PPUSH
3273: LD_INT 1
3275: PUSH
3276: LD_INT 3
3278: PUSH
3279: LD_INT 5
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: LIST
3286: PUSH
3287: LD_OWVAR 67
3291: ARRAY
3292: PPUSH
3293: CALL_OW 382
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3297: LD_ADDR_EXP 28
3301: PUSH
3302: LD_EXP 28
3306: PUSH
3307: CALL_OW 44
3311: ADD
3312: ST_TO_ADDR
// end ;
3313: GO 3259
3315: POP
3316: POP
// for i = 1 to 2 do
3317: LD_ADDR_VAR 0 2
3321: PUSH
3322: DOUBLE
3323: LD_INT 1
3325: DEC
3326: ST_TO_ADDR
3327: LD_INT 2
3329: PUSH
3330: FOR_TO
3331: IFFALSE 3386
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3333: LD_INT 0
3335: PPUSH
3336: LD_INT 1
3338: PPUSH
3339: CALL_OW 12
3343: PPUSH
3344: LD_INT 1
3346: PUSH
3347: LD_INT 3
3349: PUSH
3350: LD_INT 5
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: PUSH
3358: LD_OWVAR 67
3362: ARRAY
3363: PPUSH
3364: CALL_OW 383
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3368: LD_ADDR_EXP 28
3372: PUSH
3373: LD_EXP 28
3377: PUSH
3378: CALL_OW 44
3382: ADD
3383: ST_TO_ADDR
// end ;
3384: GO 3330
3386: POP
3387: POP
// for i = 1 to 1 do
3388: LD_ADDR_VAR 0 2
3392: PUSH
3393: DOUBLE
3394: LD_INT 1
3396: DEC
3397: ST_TO_ADDR
3398: LD_INT 1
3400: PUSH
3401: FOR_TO
3402: IFFALSE 3457
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3404: LD_INT 0
3406: PPUSH
3407: LD_INT 1
3409: PPUSH
3410: CALL_OW 12
3414: PPUSH
3415: LD_INT 1
3417: PUSH
3418: LD_INT 3
3420: PUSH
3421: LD_INT 5
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: LIST
3428: PUSH
3429: LD_OWVAR 67
3433: ARRAY
3434: PPUSH
3435: CALL_OW 384
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3439: LD_ADDR_EXP 28
3443: PUSH
3444: LD_EXP 28
3448: PUSH
3449: CALL_OW 44
3453: ADD
3454: ST_TO_ADDR
// end ;
3455: GO 3401
3457: POP
3458: POP
// turrety := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
3459: LD_ADDR_VAR 0 4
3463: PUSH
3464: LD_INT 13
3466: PPUSH
3467: LD_INT 2
3469: PUSH
3470: LD_INT 30
3472: PUSH
3473: LD_INT 31
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_INT 30
3482: PUSH
3483: LD_INT 32
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: LIST
3494: PPUSH
3495: CALL_OW 70
3499: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_lab ] ] ) ;
3500: LD_ADDR_VAR 0 5
3504: PUSH
3505: LD_INT 13
3507: PPUSH
3508: LD_INT 30
3510: PUSH
3511: LD_INT 6
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: PUSH
3518: EMPTY
3519: LIST
3520: PPUSH
3521: CALL_OW 70
3525: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_workshop ] ] ) ;
3526: LD_ADDR_VAR 0 6
3530: PUSH
3531: LD_INT 13
3533: PPUSH
3534: LD_INT 2
3536: PUSH
3537: LD_INT 30
3539: PUSH
3540: LD_INT 3
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PUSH
3547: LD_INT 30
3549: PUSH
3550: LD_INT 2
3552: PUSH
3553: EMPTY
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: LIST
3561: PPUSH
3562: CALL_OW 70
3566: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
3567: LD_ADDR_VAR 0 7
3571: PUSH
3572: LD_INT 13
3574: PPUSH
3575: LD_INT 30
3577: PUSH
3578: LD_INT 4
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: PUSH
3585: EMPTY
3586: LIST
3587: PPUSH
3588: CALL_OW 70
3592: ST_TO_ADDR
// y := 1 ;
3593: LD_ADDR_VAR 0 3
3597: PUSH
3598: LD_INT 1
3600: ST_TO_ADDR
// for i in AmSouthPersonel do
3601: LD_ADDR_VAR 0 2
3605: PUSH
3606: LD_EXP 28
3610: PUSH
3611: FOR_IN
3612: IFFALSE 3798
// begin PlaceUnitArea ( i , AmSouthArea , false ) ;
3614: LD_VAR 0 2
3618: PPUSH
3619: LD_INT 12
3621: PPUSH
3622: LD_INT 0
3624: PPUSH
3625: CALL_OW 49
// case GetClass ( i ) of 1 :
3629: LD_VAR 0 2
3633: PPUSH
3634: CALL_OW 257
3638: PUSH
3639: LD_INT 1
3641: DOUBLE
3642: EQUAL
3643: IFTRUE 3647
3645: GO 3714
3647: POP
// begin if y > 2 then
3648: LD_VAR 0 3
3652: PUSH
3653: LD_INT 2
3655: GREATER
3656: IFFALSE 3678
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
3658: LD_VAR 0 2
3662: PPUSH
3663: LD_VAR 0 7
3667: PUSH
3668: LD_INT 1
3670: ARRAY
3671: PPUSH
3672: CALL_OW 120
3676: GO 3698
// ComEnterUnit ( i , turrety [ y ] ) ;
3678: LD_VAR 0 2
3682: PPUSH
3683: LD_VAR 0 4
3687: PUSH
3688: LD_VAR 0 3
3692: ARRAY
3693: PPUSH
3694: CALL_OW 120
// y = y + 1 ;
3698: LD_ADDR_VAR 0 3
3702: PUSH
3703: LD_VAR 0 3
3707: PUSH
3708: LD_INT 1
3710: PLUS
3711: ST_TO_ADDR
// end ; 2 :
3712: GO 3796
3714: LD_INT 2
3716: DOUBLE
3717: EQUAL
3718: IFTRUE 3722
3720: GO 3737
3722: POP
// ComEnterUnit ( i , AmDep2 ) ; 3 :
3723: LD_VAR 0 2
3727: PPUSH
3728: LD_INT 47
3730: PPUSH
3731: CALL_OW 120
3735: GO 3796
3737: LD_INT 3
3739: DOUBLE
3740: EQUAL
3741: IFTRUE 3745
3743: GO 3766
3745: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3746: LD_VAR 0 2
3750: PPUSH
3751: LD_VAR 0 6
3755: PUSH
3756: LD_INT 1
3758: ARRAY
3759: PPUSH
3760: CALL_OW 120
3764: GO 3796
3766: LD_INT 4
3768: DOUBLE
3769: EQUAL
3770: IFTRUE 3774
3772: GO 3795
3774: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3775: LD_VAR 0 2
3779: PPUSH
3780: LD_VAR 0 5
3784: PUSH
3785: LD_INT 1
3787: ARRAY
3788: PPUSH
3789: CALL_OW 120
3793: GO 3796
3795: POP
// end ;
3796: GO 3611
3798: POP
3799: POP
// end ;
3800: LD_VAR 0 1
3804: RET
// every 0 0$1 do var enemy , attacker ;
3805: GO 3807
3807: DISABLE
3808: LD_INT 0
3810: PPUSH
3811: PPUSH
// begin enable ;
3812: ENABLE
// enemy = Filterallunits ( [ f_side , 3 ] ) ;
3813: LD_ADDR_VAR 0 1
3817: PUSH
3818: LD_INT 22
3820: PUSH
3821: LD_INT 3
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PPUSH
3828: CALL_OW 69
3832: ST_TO_ADDR
// for attacker in AmConvoysVehicles do
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: LD_EXP 26
3842: PUSH
3843: FOR_IN
3844: IFFALSE 3872
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
3846: LD_VAR 0 2
3850: PPUSH
3851: LD_VAR 0 1
3855: PPUSH
3856: LD_VAR 0 2
3860: PPUSH
3861: CALL_OW 74
3865: PPUSH
3866: CALL_OW 115
3870: GO 3843
3872: POP
3873: POP
// end ;
3874: PPOPN 2
3876: END
// every 0 0$1 do
3877: GO 3879
3879: DISABLE
// begin enable ;
3880: ENABLE
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
3881: LD_EXP 25
3885: PPUSH
3886: LD_INT 157
3888: PPUSH
3889: LD_INT 97
3891: PPUSH
3892: CALL_OW 114
// end ;
3896: END
// export function AmAttacks ; var i ; begin
3897: LD_INT 0
3899: PPUSH
3900: PPUSH
// Uc_Side = 4 ;
3901: LD_ADDR_OWVAR 20
3905: PUSH
3906: LD_INT 4
3908: ST_TO_ADDR
// Uc_Nation = 1 ;
3909: LD_ADDR_OWVAR 21
3913: PUSH
3914: LD_INT 1
3916: ST_TO_ADDR
// Wait ( 4 4$30 ) ;
3917: LD_INT 9450
3919: PPUSH
3920: CALL_OW 67
// first_attack_spawned = true ;
3924: LD_ADDR_EXP 52
3928: PUSH
3929: LD_INT 1
3931: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
3932: LD_ADDR_VAR 0 2
3936: PUSH
3937: DOUBLE
3938: LD_INT 1
3940: DEC
3941: ST_TO_ADDR
3942: LD_INT 2
3944: PUSH
3945: LD_INT 2
3947: PUSH
3948: LD_INT 3
3950: PUSH
3951: EMPTY
3952: LIST
3953: LIST
3954: LIST
3955: PUSH
3956: LD_OWVAR 67
3960: ARRAY
3961: PUSH
3962: FOR_TO
3963: IFFALSE 4043
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 1
3970: PPUSH
3971: CALL_OW 12
3975: PPUSH
3976: LD_INT 1
3978: PUSH
3979: LD_INT 2
3981: PUSH
3982: LD_INT 3
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: LIST
3989: PUSH
3990: LD_OWVAR 67
3994: ARRAY
3995: PPUSH
3996: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
4000: LD_ADDR_EXP 37
4004: PUSH
4005: CALL_OW 44
4009: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
4010: LD_ADDR_EXP 25
4014: PUSH
4015: LD_EXP 25
4019: PUSH
4020: LD_EXP 37
4024: ADD
4025: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4026: LD_EXP 37
4030: PPUSH
4031: LD_INT 1
4033: PPUSH
4034: LD_INT 0
4036: PPUSH
4037: CALL_OW 49
// end ;
4041: GO 3962
4043: POP
4044: POP
// for i = 1 to [ 0 , 1 , 1 ] [ Difficulty ] do
4045: LD_ADDR_VAR 0 2
4049: PUSH
4050: DOUBLE
4051: LD_INT 1
4053: DEC
4054: ST_TO_ADDR
4055: LD_INT 0
4057: PUSH
4058: LD_INT 1
4060: PUSH
4061: LD_INT 1
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: LIST
4068: PUSH
4069: LD_OWVAR 67
4073: ARRAY
4074: PUSH
4075: FOR_TO
4076: IFFALSE 4156
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4078: LD_INT 0
4080: PPUSH
4081: LD_INT 1
4083: PPUSH
4084: CALL_OW 12
4088: PPUSH
4089: LD_INT 1
4091: PUSH
4092: LD_INT 2
4094: PUSH
4095: LD_INT 3
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: PUSH
4103: LD_OWVAR 67
4107: ARRAY
4108: PPUSH
4109: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4113: LD_ADDR_EXP 38
4117: PUSH
4118: CALL_OW 44
4122: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4123: LD_ADDR_EXP 25
4127: PUSH
4128: LD_EXP 25
4132: PUSH
4133: LD_EXP 38
4137: ADD
4138: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4139: LD_EXP 38
4143: PPUSH
4144: LD_INT 1
4146: PPUSH
4147: LD_INT 0
4149: PPUSH
4150: CALL_OW 49
// end ;
4154: GO 4075
4156: POP
4157: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4158: LD_ADDR_VAR 0 2
4162: PUSH
4163: DOUBLE
4164: LD_INT 1
4166: DEC
4167: ST_TO_ADDR
4168: LD_INT 1
4170: PUSH
4171: LD_INT 1
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: LIST
4181: PUSH
4182: LD_OWVAR 67
4186: ARRAY
4187: PUSH
4188: FOR_TO
4189: IFFALSE 4269
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4191: LD_INT 0
4193: PPUSH
4194: LD_INT 1
4196: PPUSH
4197: CALL_OW 12
4201: PPUSH
4202: LD_INT 1
4204: PUSH
4205: LD_INT 2
4207: PUSH
4208: LD_INT 3
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: PUSH
4216: LD_OWVAR 67
4220: ARRAY
4221: PPUSH
4222: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4226: LD_ADDR_EXP 40
4230: PUSH
4231: CALL_OW 44
4235: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4236: LD_ADDR_EXP 25
4240: PUSH
4241: LD_EXP 25
4245: PUSH
4246: LD_EXP 40
4250: ADD
4251: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4252: LD_EXP 40
4256: PPUSH
4257: LD_INT 1
4259: PPUSH
4260: LD_INT 0
4262: PPUSH
4263: CALL_OW 49
// end ;
4267: GO 4188
4269: POP
4270: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4271: LD_ADDR_VAR 0 2
4275: PUSH
4276: DOUBLE
4277: LD_INT 1
4279: DEC
4280: ST_TO_ADDR
4281: LD_INT 1
4283: PUSH
4284: LD_INT 1
4286: PUSH
4287: LD_INT 1
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: PUSH
4295: LD_OWVAR 67
4299: ARRAY
4300: PUSH
4301: FOR_TO
4302: IFFALSE 4476
// begin uc_side := 4 ;
4304: LD_ADDR_OWVAR 20
4308: PUSH
4309: LD_INT 4
4311: ST_TO_ADDR
// uc_nation := 1 ;
4312: LD_ADDR_OWVAR 21
4316: PUSH
4317: LD_INT 1
4319: ST_TO_ADDR
// vc_control = control_manual ;
4320: LD_ADDR_OWVAR 38
4324: PUSH
4325: LD_INT 1
4327: ST_TO_ADDR
// vc_engine = engine_combustion ;
4328: LD_ADDR_OWVAR 39
4332: PUSH
4333: LD_INT 1
4335: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4336: LD_ADDR_OWVAR 37
4340: PUSH
4341: LD_INT 2
4343: PPUSH
4344: LD_INT 4
4346: PPUSH
4347: CALL_OW 12
4351: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4352: LD_ADDR_OWVAR 40
4356: PUSH
4357: LD_INT 3
4359: PPUSH
4360: LD_INT 5
4362: PPUSH
4363: CALL_OW 12
4367: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4368: LD_ADDR_EXP 41
4372: PUSH
4373: CALL_OW 45
4377: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4378: LD_INT 0
4380: PPUSH
4381: LD_INT 1
4383: PPUSH
4384: CALL_OW 12
4388: PPUSH
4389: LD_INT 1
4391: PUSH
4392: LD_INT 2
4394: PUSH
4395: LD_INT 3
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: PUSH
4403: LD_OWVAR 67
4407: ARRAY
4408: PPUSH
4409: CALL_OW 383
// AmMechConvoy := CreateHuman ;
4413: LD_ADDR_EXP 39
4417: PUSH
4418: CALL_OW 44
4422: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
4423: LD_EXP 39
4427: PPUSH
4428: LD_EXP 41
4432: PPUSH
4433: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
4437: LD_EXP 41
4441: PPUSH
4442: LD_INT 14
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
4452: LD_ADDR_EXP 26
4456: PUSH
4457: LD_EXP 26
4461: PUSH
4462: LD_EXP 39
4466: ADD
4467: PUSH
4468: LD_EXP 41
4472: ADD
4473: ST_TO_ADDR
// end ;
4474: GO 4301
4476: POP
4477: POP
// Wait ( 5 5$45 ) ;
4478: LD_INT 12075
4480: PPUSH
4481: CALL_OW 67
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4485: LD_ADDR_VAR 0 2
4489: PUSH
4490: DOUBLE
4491: LD_INT 1
4493: DEC
4494: ST_TO_ADDR
4495: LD_INT 2
4497: PUSH
4498: LD_INT 3
4500: PUSH
4501: LD_INT 4
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: PUSH
4509: LD_OWVAR 67
4513: ARRAY
4514: PUSH
4515: FOR_TO
4516: IFFALSE 4596
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4518: LD_INT 0
4520: PPUSH
4521: LD_INT 1
4523: PPUSH
4524: CALL_OW 12
4528: PPUSH
4529: LD_INT 1
4531: PUSH
4532: LD_INT 2
4534: PUSH
4535: LD_INT 4
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PUSH
4543: LD_OWVAR 67
4547: ARRAY
4548: PPUSH
4549: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
4553: LD_ADDR_EXP 37
4557: PUSH
4558: CALL_OW 44
4562: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
4563: LD_ADDR_EXP 25
4567: PUSH
4568: LD_EXP 25
4572: PUSH
4573: LD_EXP 37
4577: ADD
4578: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4579: LD_EXP 37
4583: PPUSH
4584: LD_INT 1
4586: PPUSH
4587: LD_INT 0
4589: PPUSH
4590: CALL_OW 49
// end ;
4594: GO 4515
4596: POP
4597: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4598: LD_ADDR_VAR 0 2
4602: PUSH
4603: DOUBLE
4604: LD_INT 1
4606: DEC
4607: ST_TO_ADDR
4608: LD_INT 1
4610: PUSH
4611: LD_INT 2
4613: PUSH
4614: LD_INT 2
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: PUSH
4622: LD_OWVAR 67
4626: ARRAY
4627: PUSH
4628: FOR_TO
4629: IFFALSE 4709
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4631: LD_INT 0
4633: PPUSH
4634: LD_INT 1
4636: PPUSH
4637: CALL_OW 12
4641: PPUSH
4642: LD_INT 1
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: LD_INT 4
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: PUSH
4656: LD_OWVAR 67
4660: ARRAY
4661: PPUSH
4662: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4666: LD_ADDR_EXP 38
4670: PUSH
4671: CALL_OW 44
4675: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4676: LD_ADDR_EXP 25
4680: PUSH
4681: LD_EXP 25
4685: PUSH
4686: LD_EXP 38
4690: ADD
4691: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4692: LD_EXP 38
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: LD_INT 0
4702: PPUSH
4703: CALL_OW 49
// end ;
4707: GO 4628
4709: POP
4710: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4711: LD_ADDR_VAR 0 2
4715: PUSH
4716: DOUBLE
4717: LD_INT 1
4719: DEC
4720: ST_TO_ADDR
4721: LD_INT 1
4723: PUSH
4724: LD_INT 1
4726: PUSH
4727: LD_INT 1
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: LIST
4734: PUSH
4735: LD_OWVAR 67
4739: ARRAY
4740: PUSH
4741: FOR_TO
4742: IFFALSE 4822
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4744: LD_INT 0
4746: PPUSH
4747: LD_INT 1
4749: PPUSH
4750: CALL_OW 12
4754: PPUSH
4755: LD_INT 1
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: LD_INT 4
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: LD_OWVAR 67
4773: ARRAY
4774: PPUSH
4775: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4779: LD_ADDR_EXP 40
4783: PUSH
4784: CALL_OW 44
4788: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4789: LD_ADDR_EXP 25
4793: PUSH
4794: LD_EXP 25
4798: PUSH
4799: LD_EXP 40
4803: ADD
4804: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4805: LD_EXP 40
4809: PPUSH
4810: LD_INT 1
4812: PPUSH
4813: LD_INT 0
4815: PPUSH
4816: CALL_OW 49
// end ;
4820: GO 4741
4822: POP
4823: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: DOUBLE
4830: LD_INT 1
4832: DEC
4833: ST_TO_ADDR
4834: LD_INT 1
4836: PUSH
4837: LD_INT 2
4839: PUSH
4840: LD_INT 2
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: LIST
4847: PUSH
4848: LD_OWVAR 67
4852: ARRAY
4853: PUSH
4854: FOR_TO
4855: IFFALSE 5029
// begin uc_side := 4 ;
4857: LD_ADDR_OWVAR 20
4861: PUSH
4862: LD_INT 4
4864: ST_TO_ADDR
// uc_nation := 1 ;
4865: LD_ADDR_OWVAR 21
4869: PUSH
4870: LD_INT 1
4872: ST_TO_ADDR
// vc_control = control_manual ;
4873: LD_ADDR_OWVAR 38
4877: PUSH
4878: LD_INT 1
4880: ST_TO_ADDR
// vc_engine = engine_combustion ;
4881: LD_ADDR_OWVAR 39
4885: PUSH
4886: LD_INT 1
4888: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4889: LD_ADDR_OWVAR 37
4893: PUSH
4894: LD_INT 2
4896: PPUSH
4897: LD_INT 4
4899: PPUSH
4900: CALL_OW 12
4904: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4905: LD_ADDR_OWVAR 40
4909: PUSH
4910: LD_INT 3
4912: PPUSH
4913: LD_INT 5
4915: PPUSH
4916: CALL_OW 12
4920: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4921: LD_ADDR_EXP 41
4925: PUSH
4926: CALL_OW 45
4930: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4931: LD_INT 0
4933: PPUSH
4934: LD_INT 1
4936: PPUSH
4937: CALL_OW 12
4941: PPUSH
4942: LD_INT 1
4944: PUSH
4945: LD_INT 2
4947: PUSH
4948: LD_INT 4
4950: PUSH
4951: EMPTY
4952: LIST
4953: LIST
4954: LIST
4955: PUSH
4956: LD_OWVAR 67
4960: ARRAY
4961: PPUSH
4962: CALL_OW 383
// AmMechConvoy := CreateHuman ;
4966: LD_ADDR_EXP 39
4970: PUSH
4971: CALL_OW 44
4975: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
4976: LD_EXP 39
4980: PPUSH
4981: LD_EXP 41
4985: PPUSH
4986: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
4990: LD_EXP 41
4994: PPUSH
4995: LD_INT 14
4997: PPUSH
4998: LD_INT 0
5000: PPUSH
5001: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
5005: LD_ADDR_EXP 26
5009: PUSH
5010: LD_EXP 26
5014: PUSH
5015: LD_EXP 39
5019: ADD
5020: PUSH
5021: LD_EXP 41
5025: ADD
5026: ST_TO_ADDR
// end ;
5027: GO 4854
5029: POP
5030: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5031: LD_EXP 25
5035: PPUSH
5036: LD_INT 157
5038: PPUSH
5039: LD_INT 97
5041: PPUSH
5042: CALL_OW 114
// Wait ( 5 5$0 ) ;
5046: LD_INT 10500
5048: PPUSH
5049: CALL_OW 67
// for i = 1 to [ 3 , 4 , 6 ] [ Difficulty ] do
5053: LD_ADDR_VAR 0 2
5057: PUSH
5058: DOUBLE
5059: LD_INT 1
5061: DEC
5062: ST_TO_ADDR
5063: LD_INT 3
5065: PUSH
5066: LD_INT 4
5068: PUSH
5069: LD_INT 6
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: LIST
5076: PUSH
5077: LD_OWVAR 67
5081: ARRAY
5082: PUSH
5083: FOR_TO
5084: IFFALSE 5164
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5086: LD_INT 0
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: CALL_OW 12
5096: PPUSH
5097: LD_INT 1
5099: PUSH
5100: LD_INT 2
5102: PUSH
5103: LD_INT 4
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: LD_OWVAR 67
5115: ARRAY
5116: PPUSH
5117: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5121: LD_ADDR_EXP 37
5125: PUSH
5126: CALL_OW 44
5130: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5131: LD_ADDR_EXP 25
5135: PUSH
5136: LD_EXP 25
5140: PUSH
5141: LD_EXP 37
5145: ADD
5146: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5147: LD_EXP 37
5151: PPUSH
5152: LD_INT 1
5154: PPUSH
5155: LD_INT 0
5157: PPUSH
5158: CALL_OW 49
// end ;
5162: GO 5083
5164: POP
5165: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
5166: LD_ADDR_VAR 0 2
5170: PUSH
5171: DOUBLE
5172: LD_INT 1
5174: DEC
5175: ST_TO_ADDR
5176: LD_INT 1
5178: PUSH
5179: LD_INT 2
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: LIST
5189: PUSH
5190: LD_OWVAR 67
5194: ARRAY
5195: PUSH
5196: FOR_TO
5197: IFFALSE 5277
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5199: LD_INT 0
5201: PPUSH
5202: LD_INT 1
5204: PPUSH
5205: CALL_OW 12
5209: PPUSH
5210: LD_INT 1
5212: PUSH
5213: LD_INT 2
5215: PUSH
5216: LD_INT 4
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: LIST
5223: PUSH
5224: LD_OWVAR 67
5228: ARRAY
5229: PPUSH
5230: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5234: LD_ADDR_EXP 38
5238: PUSH
5239: CALL_OW 44
5243: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5244: LD_ADDR_EXP 25
5248: PUSH
5249: LD_EXP 25
5253: PUSH
5254: LD_EXP 38
5258: ADD
5259: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5260: LD_EXP 38
5264: PPUSH
5265: LD_INT 1
5267: PPUSH
5268: LD_INT 0
5270: PPUSH
5271: CALL_OW 49
// end ;
5275: GO 5196
5277: POP
5278: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5279: LD_ADDR_VAR 0 2
5283: PUSH
5284: DOUBLE
5285: LD_INT 1
5287: DEC
5288: ST_TO_ADDR
5289: LD_INT 1
5291: PUSH
5292: LD_INT 1
5294: PUSH
5295: LD_INT 2
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PUSH
5303: LD_OWVAR 67
5307: ARRAY
5308: PUSH
5309: FOR_TO
5310: IFFALSE 5390
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5312: LD_INT 0
5314: PPUSH
5315: LD_INT 1
5317: PPUSH
5318: CALL_OW 12
5322: PPUSH
5323: LD_INT 1
5325: PUSH
5326: LD_INT 2
5328: PUSH
5329: LD_INT 4
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: LIST
5336: PUSH
5337: LD_OWVAR 67
5341: ARRAY
5342: PPUSH
5343: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5347: LD_ADDR_EXP 40
5351: PUSH
5352: CALL_OW 44
5356: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5357: LD_ADDR_EXP 25
5361: PUSH
5362: LD_EXP 25
5366: PUSH
5367: LD_EXP 40
5371: ADD
5372: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5373: LD_EXP 40
5377: PPUSH
5378: LD_INT 1
5380: PPUSH
5381: LD_INT 0
5383: PPUSH
5384: CALL_OW 49
// end ;
5388: GO 5309
5390: POP
5391: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5392: LD_ADDR_VAR 0 2
5396: PUSH
5397: DOUBLE
5398: LD_INT 1
5400: DEC
5401: ST_TO_ADDR
5402: LD_INT 1
5404: PUSH
5405: LD_INT 2
5407: PUSH
5408: LD_INT 3
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: LIST
5415: PUSH
5416: LD_OWVAR 67
5420: ARRAY
5421: PUSH
5422: FOR_TO
5423: IFFALSE 5597
// begin uc_side := 4 ;
5425: LD_ADDR_OWVAR 20
5429: PUSH
5430: LD_INT 4
5432: ST_TO_ADDR
// uc_nation := 1 ;
5433: LD_ADDR_OWVAR 21
5437: PUSH
5438: LD_INT 1
5440: ST_TO_ADDR
// vc_control = control_manual ;
5441: LD_ADDR_OWVAR 38
5445: PUSH
5446: LD_INT 1
5448: ST_TO_ADDR
// vc_engine = engine_combustion ;
5449: LD_ADDR_OWVAR 39
5453: PUSH
5454: LD_INT 1
5456: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
5457: LD_ADDR_OWVAR 37
5461: PUSH
5462: LD_INT 2
5464: PPUSH
5465: LD_INT 4
5467: PPUSH
5468: CALL_OW 12
5472: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
5473: LD_ADDR_OWVAR 40
5477: PUSH
5478: LD_INT 3
5480: PPUSH
5481: LD_INT 5
5483: PPUSH
5484: CALL_OW 12
5488: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
5489: LD_ADDR_EXP 41
5493: PUSH
5494: CALL_OW 45
5498: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5499: LD_INT 0
5501: PPUSH
5502: LD_INT 1
5504: PPUSH
5505: CALL_OW 12
5509: PPUSH
5510: LD_INT 1
5512: PUSH
5513: LD_INT 2
5515: PUSH
5516: LD_INT 4
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: LIST
5523: PUSH
5524: LD_OWVAR 67
5528: ARRAY
5529: PPUSH
5530: CALL_OW 383
// AmMechConvoy := CreateHuman ;
5534: LD_ADDR_EXP 39
5538: PUSH
5539: CALL_OW 44
5543: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
5544: LD_EXP 39
5548: PPUSH
5549: LD_EXP 41
5553: PPUSH
5554: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
5558: LD_EXP 41
5562: PPUSH
5563: LD_INT 14
5565: PPUSH
5566: LD_INT 0
5568: PPUSH
5569: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
5573: LD_ADDR_EXP 26
5577: PUSH
5578: LD_EXP 26
5582: PUSH
5583: LD_EXP 39
5587: ADD
5588: PUSH
5589: LD_EXP 41
5593: ADD
5594: ST_TO_ADDR
// end ;
5595: GO 5422
5597: POP
5598: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5599: LD_EXP 25
5603: PPUSH
5604: LD_INT 157
5606: PPUSH
5607: LD_INT 97
5609: PPUSH
5610: CALL_OW 114
// Wait ( 5 5$0 ) ;
5614: LD_INT 10500
5616: PPUSH
5617: CALL_OW 67
// for i = 1 to [ 3 , 5 , 7 ] [ Difficulty ] do
5621: LD_ADDR_VAR 0 2
5625: PUSH
5626: DOUBLE
5627: LD_INT 1
5629: DEC
5630: ST_TO_ADDR
5631: LD_INT 3
5633: PUSH
5634: LD_INT 5
5636: PUSH
5637: LD_INT 7
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: LIST
5644: PUSH
5645: LD_OWVAR 67
5649: ARRAY
5650: PUSH
5651: FOR_TO
5652: IFFALSE 5732
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5654: LD_INT 0
5656: PPUSH
5657: LD_INT 1
5659: PPUSH
5660: CALL_OW 12
5664: PPUSH
5665: LD_INT 1
5667: PUSH
5668: LD_INT 2
5670: PUSH
5671: LD_INT 4
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: PUSH
5679: LD_OWVAR 67
5683: ARRAY
5684: PPUSH
5685: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5689: LD_ADDR_EXP 37
5693: PUSH
5694: CALL_OW 44
5698: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5699: LD_ADDR_EXP 25
5703: PUSH
5704: LD_EXP 25
5708: PUSH
5709: LD_EXP 37
5713: ADD
5714: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5715: LD_EXP 37
5719: PPUSH
5720: LD_INT 1
5722: PPUSH
5723: LD_INT 0
5725: PPUSH
5726: CALL_OW 49
// end ;
5730: GO 5651
5732: POP
5733: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5734: LD_ADDR_VAR 0 2
5738: PUSH
5739: DOUBLE
5740: LD_INT 1
5742: DEC
5743: ST_TO_ADDR
5744: LD_INT 1
5746: PUSH
5747: LD_INT 2
5749: PUSH
5750: LD_INT 3
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: LIST
5757: PUSH
5758: LD_OWVAR 67
5762: ARRAY
5763: PUSH
5764: FOR_TO
5765: IFFALSE 5845
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5767: LD_INT 0
5769: PPUSH
5770: LD_INT 1
5772: PPUSH
5773: CALL_OW 12
5777: PPUSH
5778: LD_INT 1
5780: PUSH
5781: LD_INT 2
5783: PUSH
5784: LD_INT 4
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: PUSH
5792: LD_OWVAR 67
5796: ARRAY
5797: PPUSH
5798: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5802: LD_ADDR_EXP 38
5806: PUSH
5807: CALL_OW 44
5811: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5812: LD_ADDR_EXP 25
5816: PUSH
5817: LD_EXP 25
5821: PUSH
5822: LD_EXP 38
5826: ADD
5827: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5828: LD_EXP 38
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: LD_INT 0
5838: PPUSH
5839: CALL_OW 49
// end ;
5843: GO 5764
5845: POP
5846: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5847: LD_ADDR_VAR 0 2
5851: PUSH
5852: DOUBLE
5853: LD_INT 1
5855: DEC
5856: ST_TO_ADDR
5857: LD_INT 1
5859: PUSH
5860: LD_INT 1
5862: PUSH
5863: LD_INT 2
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: LD_OWVAR 67
5875: ARRAY
5876: PUSH
5877: FOR_TO
5878: IFFALSE 5958
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5880: LD_INT 0
5882: PPUSH
5883: LD_INT 1
5885: PPUSH
5886: CALL_OW 12
5890: PPUSH
5891: LD_INT 1
5893: PUSH
5894: LD_INT 2
5896: PUSH
5897: LD_INT 4
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: PUSH
5905: LD_OWVAR 67
5909: ARRAY
5910: PPUSH
5911: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5915: LD_ADDR_EXP 40
5919: PUSH
5920: CALL_OW 44
5924: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5925: LD_ADDR_EXP 25
5929: PUSH
5930: LD_EXP 25
5934: PUSH
5935: LD_EXP 40
5939: ADD
5940: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5941: LD_EXP 40
5945: PPUSH
5946: LD_INT 1
5948: PPUSH
5949: LD_INT 0
5951: PPUSH
5952: CALL_OW 49
// end ;
5956: GO 5877
5958: POP
5959: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5960: LD_ADDR_VAR 0 2
5964: PUSH
5965: DOUBLE
5966: LD_INT 1
5968: DEC
5969: ST_TO_ADDR
5970: LD_INT 1
5972: PUSH
5973: LD_INT 2
5975: PUSH
5976: LD_INT 3
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: LIST
5983: PUSH
5984: LD_OWVAR 67
5988: ARRAY
5989: PUSH
5990: FOR_TO
5991: IFFALSE 6165
// begin uc_side := 4 ;
5993: LD_ADDR_OWVAR 20
5997: PUSH
5998: LD_INT 4
6000: ST_TO_ADDR
// uc_nation := 1 ;
6001: LD_ADDR_OWVAR 21
6005: PUSH
6006: LD_INT 1
6008: ST_TO_ADDR
// vc_control = control_manual ;
6009: LD_ADDR_OWVAR 38
6013: PUSH
6014: LD_INT 1
6016: ST_TO_ADDR
// vc_engine = engine_combustion ;
6017: LD_ADDR_OWVAR 39
6021: PUSH
6022: LD_INT 1
6024: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6025: LD_ADDR_OWVAR 37
6029: PUSH
6030: LD_INT 2
6032: PPUSH
6033: LD_INT 4
6035: PPUSH
6036: CALL_OW 12
6040: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6041: LD_ADDR_OWVAR 40
6045: PUSH
6046: LD_INT 3
6048: PPUSH
6049: LD_INT 5
6051: PPUSH
6052: CALL_OW 12
6056: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6057: LD_ADDR_EXP 41
6061: PUSH
6062: CALL_OW 45
6066: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6067: LD_INT 0
6069: PPUSH
6070: LD_INT 1
6072: PPUSH
6073: CALL_OW 12
6077: PPUSH
6078: LD_INT 1
6080: PUSH
6081: LD_INT 2
6083: PUSH
6084: LD_INT 4
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: PUSH
6092: LD_OWVAR 67
6096: ARRAY
6097: PPUSH
6098: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6102: LD_ADDR_EXP 39
6106: PUSH
6107: CALL_OW 44
6111: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6112: LD_EXP 39
6116: PPUSH
6117: LD_EXP 41
6121: PPUSH
6122: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6126: LD_EXP 41
6130: PPUSH
6131: LD_INT 14
6133: PPUSH
6134: LD_INT 0
6136: PPUSH
6137: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6141: LD_ADDR_EXP 26
6145: PUSH
6146: LD_EXP 26
6150: PUSH
6151: LD_EXP 39
6155: ADD
6156: PUSH
6157: LD_EXP 41
6161: ADD
6162: ST_TO_ADDR
// end ;
6163: GO 5990
6165: POP
6166: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
6167: LD_EXP 25
6171: PPUSH
6172: LD_INT 157
6174: PPUSH
6175: LD_INT 97
6177: PPUSH
6178: CALL_OW 114
// Wait ( 5 5$0 ) ;
6182: LD_INT 10500
6184: PPUSH
6185: CALL_OW 67
// for i = 1 to [ 4 , 6 , 10 ] [ Difficulty ] do
6189: LD_ADDR_VAR 0 2
6193: PUSH
6194: DOUBLE
6195: LD_INT 1
6197: DEC
6198: ST_TO_ADDR
6199: LD_INT 4
6201: PUSH
6202: LD_INT 6
6204: PUSH
6205: LD_INT 10
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: LIST
6212: PUSH
6213: LD_OWVAR 67
6217: ARRAY
6218: PUSH
6219: FOR_TO
6220: IFFALSE 6300
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6222: LD_INT 0
6224: PPUSH
6225: LD_INT 1
6227: PPUSH
6228: CALL_OW 12
6232: PPUSH
6233: LD_INT 1
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: LD_INT 4
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_OWVAR 67
6251: ARRAY
6252: PPUSH
6253: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
6257: LD_ADDR_EXP 37
6261: PUSH
6262: CALL_OW 44
6266: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
6267: LD_ADDR_EXP 25
6271: PUSH
6272: LD_EXP 25
6276: PUSH
6277: LD_EXP 37
6281: ADD
6282: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
6283: LD_EXP 37
6287: PPUSH
6288: LD_INT 1
6290: PPUSH
6291: LD_INT 0
6293: PPUSH
6294: CALL_OW 49
// end ;
6298: GO 6219
6300: POP
6301: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
6302: LD_ADDR_VAR 0 2
6306: PUSH
6307: DOUBLE
6308: LD_INT 1
6310: DEC
6311: ST_TO_ADDR
6312: LD_INT 1
6314: PUSH
6315: LD_INT 2
6317: PUSH
6318: LD_INT 3
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: LIST
6325: PUSH
6326: LD_OWVAR 67
6330: ARRAY
6331: PUSH
6332: FOR_TO
6333: IFFALSE 6413
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6335: LD_INT 0
6337: PPUSH
6338: LD_INT 1
6340: PPUSH
6341: CALL_OW 12
6345: PPUSH
6346: LD_INT 1
6348: PUSH
6349: LD_INT 2
6351: PUSH
6352: LD_INT 4
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: LIST
6359: PUSH
6360: LD_OWVAR 67
6364: ARRAY
6365: PPUSH
6366: CALL_OW 384
// AmSciConvoy = CreateHuman ;
6370: LD_ADDR_EXP 38
6374: PUSH
6375: CALL_OW 44
6379: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
6380: LD_ADDR_EXP 25
6384: PUSH
6385: LD_EXP 25
6389: PUSH
6390: LD_EXP 38
6394: ADD
6395: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
6396: LD_EXP 38
6400: PPUSH
6401: LD_INT 1
6403: PPUSH
6404: LD_INT 0
6406: PPUSH
6407: CALL_OW 49
// end ;
6411: GO 6332
6413: POP
6414: POP
// for i = 1 to [ 1 , 1 , 3 ] [ Difficulty ] do
6415: LD_ADDR_VAR 0 2
6419: PUSH
6420: DOUBLE
6421: LD_INT 1
6423: DEC
6424: ST_TO_ADDR
6425: LD_INT 1
6427: PUSH
6428: LD_INT 1
6430: PUSH
6431: LD_INT 3
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: LIST
6438: PUSH
6439: LD_OWVAR 67
6443: ARRAY
6444: PUSH
6445: FOR_TO
6446: IFFALSE 6526
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6448: LD_INT 0
6450: PPUSH
6451: LD_INT 1
6453: PPUSH
6454: CALL_OW 12
6458: PPUSH
6459: LD_INT 1
6461: PUSH
6462: LD_INT 2
6464: PUSH
6465: LD_INT 4
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: LD_OWVAR 67
6477: ARRAY
6478: PPUSH
6479: CALL_OW 382
// AmEngConvoy = CreateHuman ;
6483: LD_ADDR_EXP 40
6487: PUSH
6488: CALL_OW 44
6492: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
6493: LD_ADDR_EXP 25
6497: PUSH
6498: LD_EXP 25
6502: PUSH
6503: LD_EXP 40
6507: ADD
6508: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
6509: LD_EXP 40
6513: PPUSH
6514: LD_INT 1
6516: PPUSH
6517: LD_INT 0
6519: PPUSH
6520: CALL_OW 49
// end ;
6524: GO 6445
6526: POP
6527: POP
// for i = 1 to [ 1 , 2 , 4 ] [ Difficulty ] do
6528: LD_ADDR_VAR 0 2
6532: PUSH
6533: DOUBLE
6534: LD_INT 1
6536: DEC
6537: ST_TO_ADDR
6538: LD_INT 1
6540: PUSH
6541: LD_INT 2
6543: PUSH
6544: LD_INT 4
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: LIST
6551: PUSH
6552: LD_OWVAR 67
6556: ARRAY
6557: PUSH
6558: FOR_TO
6559: IFFALSE 6733
// begin uc_side := 4 ;
6561: LD_ADDR_OWVAR 20
6565: PUSH
6566: LD_INT 4
6568: ST_TO_ADDR
// uc_nation := 1 ;
6569: LD_ADDR_OWVAR 21
6573: PUSH
6574: LD_INT 1
6576: ST_TO_ADDR
// vc_control = control_manual ;
6577: LD_ADDR_OWVAR 38
6581: PUSH
6582: LD_INT 1
6584: ST_TO_ADDR
// vc_engine = engine_combustion ;
6585: LD_ADDR_OWVAR 39
6589: PUSH
6590: LD_INT 1
6592: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6593: LD_ADDR_OWVAR 37
6597: PUSH
6598: LD_INT 2
6600: PPUSH
6601: LD_INT 4
6603: PPUSH
6604: CALL_OW 12
6608: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6609: LD_ADDR_OWVAR 40
6613: PUSH
6614: LD_INT 3
6616: PPUSH
6617: LD_INT 5
6619: PPUSH
6620: CALL_OW 12
6624: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6625: LD_ADDR_EXP 41
6629: PUSH
6630: CALL_OW 45
6634: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6635: LD_INT 0
6637: PPUSH
6638: LD_INT 1
6640: PPUSH
6641: CALL_OW 12
6645: PPUSH
6646: LD_INT 1
6648: PUSH
6649: LD_INT 2
6651: PUSH
6652: LD_INT 4
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: PUSH
6660: LD_OWVAR 67
6664: ARRAY
6665: PPUSH
6666: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6670: LD_ADDR_EXP 39
6674: PUSH
6675: CALL_OW 44
6679: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6680: LD_EXP 39
6684: PPUSH
6685: LD_EXP 41
6689: PPUSH
6690: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6694: LD_EXP 41
6698: PPUSH
6699: LD_INT 14
6701: PPUSH
6702: LD_INT 0
6704: PPUSH
6705: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6709: LD_ADDR_EXP 26
6713: PUSH
6714: LD_EXP 26
6718: PUSH
6719: LD_EXP 39
6723: ADD
6724: PUSH
6725: LD_EXP 41
6729: ADD
6730: ST_TO_ADDR
// end ;
6731: GO 6558
6733: POP
6734: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
6735: LD_EXP 25
6739: PPUSH
6740: LD_INT 157
6742: PPUSH
6743: LD_INT 97
6745: PPUSH
6746: CALL_OW 114
// end ; end_of_file
6750: LD_VAR 0 1
6754: RET
// export function InitRussian ; begin
6755: LD_INT 0
6757: PPUSH
// Uc_Nation := 3 ;
6758: LD_ADDR_OWVAR 21
6762: PUSH
6763: LD_INT 3
6765: ST_TO_ADDR
// Uc_Side := 3 ;
6766: LD_ADDR_OWVAR 20
6770: PUSH
6771: LD_INT 3
6773: ST_TO_ADDR
// YakotichCrew := YakotichCrew ^ Yakotich ^ Mietek ^ Boris ^ Michail ^ Vasilij ^ Maksim ^ Fiodor ^ Aleksandr ^ Aleksiej ^ Pavel ^ Zakhar ^ Constantin ^ Stanislav ^ Josif ;
6774: LD_ADDR_EXP 1
6778: PUSH
6779: LD_EXP 1
6783: PUSH
6784: LD_EXP 3
6788: ADD
6789: PUSH
6790: LD_EXP 4
6794: ADD
6795: PUSH
6796: LD_EXP 5
6800: ADD
6801: PUSH
6802: LD_EXP 7
6806: ADD
6807: PUSH
6808: LD_EXP 6
6812: ADD
6813: PUSH
6814: LD_EXP 9
6818: ADD
6819: PUSH
6820: LD_EXP 10
6824: ADD
6825: PUSH
6826: LD_EXP 14
6830: ADD
6831: PUSH
6832: LD_EXP 13
6836: ADD
6837: PUSH
6838: LD_EXP 11
6842: ADD
6843: PUSH
6844: LD_EXP 12
6848: ADD
6849: PUSH
6850: LD_EXP 8
6854: ADD
6855: PUSH
6856: LD_EXP 16
6860: ADD
6861: PUSH
6862: LD_EXP 15
6866: ADD
6867: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 01_ ) ;
6868: LD_ADDR_EXP 3
6872: PUSH
6873: LD_STRING Yakotich
6875: PPUSH
6876: LD_INT 1
6878: PPUSH
6879: LD_STRING 01_
6881: PPUSH
6882: CALL 510 0 3
6886: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 01_ ) ;
6887: LD_ADDR_EXP 4
6891: PUSH
6892: LD_STRING Mietek
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: LD_STRING 01_
6900: PPUSH
6901: CALL 510 0 3
6905: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 01_ ) ;
6906: LD_ADDR_EXP 5
6910: PUSH
6911: LD_STRING Boris
6913: PPUSH
6914: LD_INT 1
6916: PPUSH
6917: LD_STRING 01_
6919: PPUSH
6920: CALL 510 0 3
6924: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 01_ ) ;
6925: LD_ADDR_EXP 7
6929: PUSH
6930: LD_STRING Michail
6932: PPUSH
6933: LD_INT 1
6935: PPUSH
6936: LD_STRING 01_
6938: PPUSH
6939: CALL 510 0 3
6943: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 01_ ) ;
6944: LD_ADDR_EXP 6
6948: PUSH
6949: LD_STRING Vasilij
6951: PPUSH
6952: LD_INT 1
6954: PPUSH
6955: LD_STRING 01_
6957: PPUSH
6958: CALL 510 0 3
6962: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 01_ ) ;
6963: LD_ADDR_EXP 9
6967: PUSH
6968: LD_STRING Maksim
6970: PPUSH
6971: LD_INT 1
6973: PPUSH
6974: LD_STRING 01_
6976: PPUSH
6977: CALL 510 0 3
6981: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 01_ ) ;
6982: LD_ADDR_EXP 10
6986: PUSH
6987: LD_STRING Fiodor
6989: PPUSH
6990: LD_INT 1
6992: PPUSH
6993: LD_STRING 01_
6995: PPUSH
6996: CALL 510 0 3
7000: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 01_ ) ;
7001: LD_ADDR_EXP 14
7005: PUSH
7006: LD_STRING Aleksandr
7008: PPUSH
7009: LD_INT 1
7011: PPUSH
7012: LD_STRING 01_
7014: PPUSH
7015: CALL 510 0 3
7019: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 01_ ) ;
7020: LD_ADDR_EXP 13
7024: PUSH
7025: LD_STRING Aleksiej
7027: PPUSH
7028: LD_INT 1
7030: PPUSH
7031: LD_STRING 01_
7033: PPUSH
7034: CALL 510 0 3
7038: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 01_ ) ;
7039: LD_ADDR_EXP 11
7043: PUSH
7044: LD_STRING Pavel
7046: PPUSH
7047: LD_INT 1
7049: PPUSH
7050: LD_STRING 01_
7052: PPUSH
7053: CALL 510 0 3
7057: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 01_ ) ;
7058: LD_ADDR_EXP 12
7062: PUSH
7063: LD_STRING Zakhar
7065: PPUSH
7066: LD_INT 1
7068: PPUSH
7069: LD_STRING 01_
7071: PPUSH
7072: CALL 510 0 3
7076: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 01_ ) ;
7077: LD_ADDR_EXP 8
7081: PUSH
7082: LD_STRING Constantin
7084: PPUSH
7085: LD_INT 1
7087: PPUSH
7088: LD_STRING 01_
7090: PPUSH
7091: CALL 510 0 3
7095: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , false ,  ) ;
7096: LD_ADDR_EXP 16
7100: PUSH
7101: LD_STRING Stanislav
7103: PPUSH
7104: LD_INT 0
7106: PPUSH
7107: LD_STRING 
7109: PPUSH
7110: CALL 510 0 3
7114: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false ,  ) ;
7115: LD_ADDR_EXP 15
7119: PUSH
7120: LD_STRING Josif
7122: PPUSH
7123: LD_INT 0
7125: PPUSH
7126: LD_STRING 
7128: PPUSH
7129: CALL 510 0 3
7133: ST_TO_ADDR
// SetClass ( Boris , 2 ) ;
7134: LD_EXP 5
7138: PPUSH
7139: LD_INT 2
7141: PPUSH
7142: CALL_OW 336
// SetClass ( Vasilij , 4 ) ;
7146: LD_EXP 6
7150: PPUSH
7151: LD_INT 4
7153: PPUSH
7154: CALL_OW 336
// Uc_Side := 6 ;
7158: LD_ADDR_OWVAR 20
7162: PUSH
7163: LD_INT 6
7165: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
7166: LD_ADDR_EXP 17
7170: PUSH
7171: LD_STRING Morozov
7173: PPUSH
7174: LD_INT 0
7176: PPUSH
7177: LD_STRING 
7179: PPUSH
7180: CALL 510 0 3
7184: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
7185: LD_ADDR_EXP 18
7189: PUSH
7190: LD_STRING Kurin
7192: PPUSH
7193: LD_INT 0
7195: PPUSH
7196: LD_STRING 
7198: PPUSH
7199: CALL 510 0 3
7203: ST_TO_ADDR
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
7204: LD_ADDR_EXP 19
7208: PUSH
7209: LD_STRING Grishko
7211: PPUSH
7212: LD_INT 0
7214: PPUSH
7215: LD_STRING 
7217: PPUSH
7218: CALL 510 0 3
7222: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
7223: LD_ADDR_EXP 20
7227: PUSH
7228: LD_STRING Burlak
7230: PPUSH
7231: LD_INT 0
7233: PPUSH
7234: LD_STRING 
7236: PPUSH
7237: CALL 510 0 3
7241: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
7242: LD_ADDR_EXP 21
7246: PUSH
7247: LD_STRING Platonov
7249: PPUSH
7250: LD_INT 0
7252: PPUSH
7253: LD_STRING 
7255: PPUSH
7256: CALL 510 0 3
7260: ST_TO_ADDR
// Uc_Side := 1 ;
7261: LD_ADDR_OWVAR 20
7265: PUSH
7266: LD_INT 1
7268: ST_TO_ADDR
// AmSold := PrepareUnit ( AmSold , false ,  ) ;
7269: LD_ADDR_EXP 22
7273: PUSH
7274: LD_STRING AmSold
7276: PPUSH
7277: LD_INT 0
7279: PPUSH
7280: LD_STRING 
7282: PPUSH
7283: CALL 510 0 3
7287: ST_TO_ADDR
// end ; end_of_file
7288: LD_VAR 0 1
7292: RET
// export function Action ; var i ; begin
7293: LD_INT 0
7295: PPUSH
7296: PPUSH
// PlaceUnitArea ( Yakotich , RussianSpawn , false ) ;
7297: LD_EXP 3
7301: PPUSH
7302: LD_INT 2
7304: PPUSH
7305: LD_INT 0
7307: PPUSH
7308: CALL_OW 49
// PlaceUnitArea ( Maksim , RussianSpawn , false ) ;
7312: LD_EXP 9
7316: PPUSH
7317: LD_INT 2
7319: PPUSH
7320: LD_INT 0
7322: PPUSH
7323: CALL_OW 49
// PlaceUnitArea ( Vasilij , RussianSpawn , false ) ;
7327: LD_EXP 6
7331: PPUSH
7332: LD_INT 2
7334: PPUSH
7335: LD_INT 0
7337: PPUSH
7338: CALL_OW 49
// PlaceUnitArea ( Michail , RussianSpawn , false ) ;
7342: LD_EXP 7
7346: PPUSH
7347: LD_INT 2
7349: PPUSH
7350: LD_INT 0
7352: PPUSH
7353: CALL_OW 49
// PlaceUnitArea ( Fiodor , RussianSpawn , false ) ;
7357: LD_EXP 10
7361: PPUSH
7362: LD_INT 2
7364: PPUSH
7365: LD_INT 0
7367: PPUSH
7368: CALL_OW 49
// PlaceUnitArea ( Constantin , RussianSpawn , false ) ;
7372: LD_EXP 8
7376: PPUSH
7377: LD_INT 2
7379: PPUSH
7380: LD_INT 0
7382: PPUSH
7383: CALL_OW 49
// PlaceUnitArea ( Boris , RussianSpawn , false ) ;
7387: LD_EXP 5
7391: PPUSH
7392: LD_INT 2
7394: PPUSH
7395: LD_INT 0
7397: PPUSH
7398: CALL_OW 49
// InGameOn ;
7402: CALL_OW 8
// DialogueOn ;
7406: CALL_OW 6
// CenterNowOnXY ( 152 , 28 ) ;
7410: LD_INT 152
7412: PPUSH
7413: LD_INT 28
7415: PPUSH
7416: CALL_OW 86
// Wait ( 0 0$3 ) ;
7420: LD_INT 105
7422: PPUSH
7423: CALL_OW 67
// Say ( Yakotich , 2Yak-13 ) ;
7427: LD_EXP 3
7431: PPUSH
7432: LD_STRING 2Yak-13
7434: PPUSH
7435: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
7439: LD_STRING o1
7441: PPUSH
7442: CALL_OW 337
// MaksimScout ;
7446: CALL 1442 0 0
// InGameOff ;
7450: CALL_OW 9
// DialogueOff ;
7454: CALL_OW 7
// Say ( Michail , 2Mich-02 ) ;
7458: LD_EXP 7
7462: PPUSH
7463: LD_STRING 2Mich-02
7465: PPUSH
7466: CALL_OW 88
// Say ( Michail , 2Mich-03 ) ;
7470: LD_EXP 7
7474: PPUSH
7475: LD_STRING 2Mich-03
7477: PPUSH
7478: CALL_OW 88
// Say ( Yakotich , 2Yak-15 ) ;
7482: LD_EXP 3
7486: PPUSH
7487: LD_STRING 2Yak-15
7489: PPUSH
7490: CALL_OW 88
// ChangeMissionObjectives ( turret ) ;
7494: LD_STRING turret
7496: PPUSH
7497: CALL_OW 337
// SaveForQuickRestart ;
7501: CALL_OW 22
// end ;
7505: LD_VAR 0 1
7509: RET
// every 0 0$1 trigger maksim_scout_ended = true and See ( 3 , Maksim ) do
7510: LD_EXP 44
7514: PUSH
7515: LD_INT 1
7517: EQUAL
7518: PUSH
7519: LD_INT 3
7521: PPUSH
7522: LD_EXP 9
7526: PPUSH
7527: CALL_OW 292
7531: AND
7532: IFFALSE 7860
7534: GO 7536
7536: DISABLE
// begin CenterNowOnUnits ( Maksim ) ;
7537: LD_EXP 9
7541: PPUSH
7542: CALL_OW 87
// DialogueOn ;
7546: CALL_OW 6
// RevealFogArea ( 3 , ScoutedTerrains ) ;
7550: LD_INT 3
7552: PPUSH
7553: LD_INT 8
7555: PPUSH
7556: CALL_OW 332
// Say ( Maksim , 2Mak-06 ) ;
7560: LD_EXP 9
7564: PPUSH
7565: LD_STRING 2Mak-06
7567: PPUSH
7568: CALL_OW 88
// Say ( Yakotich , 2Yak-16 ) ;
7572: LD_EXP 3
7576: PPUSH
7577: LD_STRING 2Yak-16
7579: PPUSH
7580: CALL_OW 88
// CenterNowOnXY ( 40 , 10 ) ;
7584: LD_INT 40
7586: PPUSH
7587: LD_INT 10
7589: PPUSH
7590: CALL_OW 86
// Wait ( 0 0$03 ) ;
7594: LD_INT 105
7596: PPUSH
7597: CALL_OW 67
// CenterOnXY ( 55 , 40 ) ;
7601: LD_INT 55
7603: PPUSH
7604: LD_INT 40
7606: PPUSH
7607: CALL_OW 84
// Wait ( 0 0$03 ) ;
7611: LD_INT 105
7613: PPUSH
7614: CALL_OW 67
// CenterOnXY ( 70 , 72 ) ;
7618: LD_INT 70
7620: PPUSH
7621: LD_INT 72
7623: PPUSH
7624: CALL_OW 84
// Say ( Maksim , 2Mak-07 ) ;
7628: LD_EXP 9
7632: PPUSH
7633: LD_STRING 2Mak-07
7635: PPUSH
7636: CALL_OW 88
// Say ( Maksim , 2Mak-08 ) ;
7640: LD_EXP 9
7644: PPUSH
7645: LD_STRING 2Mak-08
7647: PPUSH
7648: CALL_OW 88
// CenterNowOnUnits ( Yakotich ) ;
7652: LD_EXP 3
7656: PPUSH
7657: CALL_OW 87
// Say ( Yakotich , 2Yak-17 ) ;
7661: LD_EXP 3
7665: PPUSH
7666: LD_STRING 2Yak-17
7668: PPUSH
7669: CALL_OW 88
// Say ( Yakotich , 2Yak-18 ) ;
7673: LD_EXP 3
7677: PPUSH
7678: LD_STRING 2Yak-18
7680: PPUSH
7681: CALL_OW 88
// Say ( Maksim , 2Mak-09 ) ;
7685: LD_EXP 9
7689: PPUSH
7690: LD_STRING 2Mak-09
7692: PPUSH
7693: CALL_OW 88
// Say ( Maksim , 2Mak-10 ) ;
7697: LD_EXP 9
7701: PPUSH
7702: LD_STRING 2Mak-10
7704: PPUSH
7705: CALL_OW 88
// Say ( Maksim , 2Mak-11 ) ;
7709: LD_EXP 9
7713: PPUSH
7714: LD_STRING 2Mak-11
7716: PPUSH
7717: CALL_OW 88
// Say ( Yakotich , 2Yak-19 ) ;
7721: LD_EXP 3
7725: PPUSH
7726: LD_STRING 2Yak-19
7728: PPUSH
7729: CALL_OW 88
// SayRadio ( Yakotich , 2Yak-20 ) ;
7733: LD_EXP 3
7737: PPUSH
7738: LD_STRING 2Yak-20
7740: PPUSH
7741: CALL_OW 94
// SayRadio ( Morozov , 2Moro-05 ) ;
7745: LD_EXP 17
7749: PPUSH
7750: LD_STRING 2Moro-05
7752: PPUSH
7753: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-21 ) ;
7757: LD_EXP 3
7761: PPUSH
7762: LD_STRING 2Yak-21
7764: PPUSH
7765: CALL_OW 94
// SayRadio ( Morozov , 2Moro-06 ) ;
7769: LD_EXP 17
7773: PPUSH
7774: LD_STRING 2Moro-06
7776: PPUSH
7777: CALL_OW 94
// SayRadio ( Morozov , 2Moro-07 ) ;
7781: LD_EXP 17
7785: PPUSH
7786: LD_STRING 2Moro-07
7788: PPUSH
7789: CALL_OW 94
// SayRadio ( Morozov , 2Moro-08 ) ;
7793: LD_EXP 17
7797: PPUSH
7798: LD_STRING 2Moro-08
7800: PPUSH
7801: CALL_OW 94
// SayRadio ( Morozov , 2Moro-09 ) ;
7805: LD_EXP 17
7809: PPUSH
7810: LD_STRING 2Moro-09
7812: PPUSH
7813: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-22 ) ;
7817: LD_EXP 3
7821: PPUSH
7822: LD_STRING 2Yak-22
7824: PPUSH
7825: CALL_OW 94
// ChangeMissionObjectives ( o2 ) ;
7829: LD_STRING o2
7831: PPUSH
7832: CALL_OW 337
// DialogueOff ;
7836: CALL_OW 7
// maksim_back = true ;
7840: LD_ADDR_EXP 45
7844: PUSH
7845: LD_INT 1
7847: ST_TO_ADDR
// SetSide ( Maksim , 3 ) ;
7848: LD_EXP 9
7852: PPUSH
7853: LD_INT 3
7855: PPUSH
7856: CALL_OW 235
// end ;
7860: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
7861: LD_INT 3
7863: PPUSH
7864: LD_INT 90
7866: PPUSH
7867: CALL_OW 325
7871: IFFALSE 7900
7873: GO 7875
7875: DISABLE
// begin Say ( Michail , 2Mich-04 ) ;
7876: LD_EXP 7
7880: PPUSH
7881: LD_STRING 2Mich-04
7883: PPUSH
7884: CALL_OW 88
// Say ( Michail , 2Mich-05 ) ;
7888: LD_EXP 7
7892: PPUSH
7893: LD_STRING 2Mich-05
7895: PPUSH
7896: CALL_OW 88
// end ;
7900: END
// every 0 0$1 trigger Researched ( 3 , 83 ) do
7901: LD_INT 3
7903: PPUSH
7904: LD_INT 83
7906: PPUSH
7907: CALL_OW 325
7911: IFFALSE 7928
7913: GO 7915
7915: DISABLE
// begin Say ( Vasilij , 2Vas-07 ) ;
7916: LD_EXP 6
7920: PPUSH
7921: LD_STRING 2Vas-07
7923: PPUSH
7924: CALL_OW 88
// end ;
7928: END
// every 0 0$1 trigger first_attack_clear do
7929: LD_EXP 53
7933: IFFALSE 8146
7935: GO 7937
7937: DISABLE
// begin Wait ( 5 5$0 ) ;
7938: LD_INT 10500
7940: PPUSH
7941: CALL_OW 67
// PlaceUnitArea ( Mietek , RussianSpawn , false ) ;
7945: LD_EXP 4
7949: PPUSH
7950: LD_INT 2
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 49
// PlaceUnitArea ( Aleksiej , RussianSpawn , false ) ;
7960: LD_EXP 13
7964: PPUSH
7965: LD_INT 2
7967: PPUSH
7968: LD_INT 0
7970: PPUSH
7971: CALL_OW 49
// PlaceUnitArea ( Aleksandr , RussianSpawn , false ) ;
7975: LD_EXP 14
7979: PPUSH
7980: LD_INT 2
7982: PPUSH
7983: LD_INT 0
7985: PPUSH
7986: CALL_OW 49
// PlaceUnitArea ( Josif , RussianSpawn , false ) ;
7990: LD_EXP 15
7994: PPUSH
7995: LD_INT 2
7997: PPUSH
7998: LD_INT 0
8000: PPUSH
8001: CALL_OW 49
// PlaceUnitArea ( Zakhar , RussianSpawn , false ) ;
8005: LD_EXP 12
8009: PPUSH
8010: LD_INT 2
8012: PPUSH
8013: LD_INT 0
8015: PPUSH
8016: CALL_OW 49
// PlaceUnitArea ( Stanislav , RussianSpawn , false ) ;
8020: LD_EXP 16
8024: PPUSH
8025: LD_INT 2
8027: PPUSH
8028: LD_INT 0
8030: PPUSH
8031: CALL_OW 49
// PlaceUnitArea ( Pavel , RussianSpawn , false ) ;
8035: LD_EXP 11
8039: PPUSH
8040: LD_INT 2
8042: PPUSH
8043: LD_INT 0
8045: PPUSH
8046: CALL_OW 49
// DialogueOn ;
8050: CALL_OW 6
// CenterNowOnUnits ( Mietek ) ;
8054: LD_EXP 4
8058: PPUSH
8059: CALL_OW 87
// SayRadio ( Mietek , 2Ryn-06 ) ;
8063: LD_EXP 4
8067: PPUSH
8068: LD_STRING 2Ryn-06
8070: PPUSH
8071: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-25 ) ;
8075: LD_EXP 3
8079: PPUSH
8080: LD_STRING 2Yak-25
8082: PPUSH
8083: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-01 ) ;
8087: LD_EXP 16
8091: PPUSH
8092: LD_STRING 2Stan-01
8094: PPUSH
8095: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-02 ) ;
8099: LD_EXP 16
8103: PPUSH
8104: LD_STRING 2Stan-02
8106: PPUSH
8107: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-03 ) ;
8111: LD_EXP 16
8115: PPUSH
8116: LD_STRING 2Stan-03
8118: PPUSH
8119: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-Stan-01 ) ;
8123: LD_EXP 3
8127: PPUSH
8128: LD_STRING 2Yak-Stan-01
8130: PPUSH
8131: CALL_OW 94
// ChangeMissionObjectives ( gun ) ;
8135: LD_STRING gun
8137: PPUSH
8138: CALL_OW 337
// DialogueOff ;
8142: CALL_OW 7
// end ;
8146: END
// every 0 0$1 trigger maksim_back = true do
8147: LD_EXP 45
8151: PUSH
8152: LD_INT 1
8154: EQUAL
8155: IFFALSE 8278
8157: GO 8159
8159: DISABLE
// begin Wait ( 30 30$0 ) ;
8160: LD_INT 63000
8162: PPUSH
8163: CALL_OW 67
// DialogueOn ;
8167: CALL_OW 6
// InGameOn ;
8171: CALL_OW 8
// SayRadio ( Kurin , 2Kurin-01 ) ;
8175: LD_EXP 18
8179: PPUSH
8180: LD_STRING 2Kurin-01
8182: PPUSH
8183: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-02 ) ;
8187: LD_EXP 18
8191: PPUSH
8192: LD_STRING 2Kurin-02
8194: PPUSH
8195: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-26 ) ;
8199: LD_EXP 3
8203: PPUSH
8204: LD_STRING 2Yak-26
8206: PPUSH
8207: CALL_OW 94
// ChangeMissionObjectives ( o3 ) ;
8211: LD_STRING o3
8213: PPUSH
8214: CALL_OW 337
// Say ( Maksim , 2Mak-12 ) ;
8218: LD_EXP 9
8222: PPUSH
8223: LD_STRING 2Mak-12
8225: PPUSH
8226: CALL_OW 88
// CenterNowOnXY ( 57 , 2 ) ;
8230: LD_INT 57
8232: PPUSH
8233: LD_INT 2
8235: PPUSH
8236: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
8240: LD_INT 3
8242: PPUSH
8243: LD_INT 9
8245: PPUSH
8246: CALL_OW 332
// Say ( Maksim , 2Mak-13 ) ;
8250: LD_EXP 9
8254: PPUSH
8255: LD_STRING 2Mak-13
8257: PPUSH
8258: CALL_OW 88
// DialogueOff ;
8262: CALL_OW 7
// InGameOff ;
8266: CALL_OW 9
// kurin_attack_started = true ;
8270: LD_ADDR_EXP 55
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// end ;
8278: END
// every 1 trigger kurin_attack_started = true and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var unit ;
8279: LD_EXP 55
8283: PUSH
8284: LD_INT 1
8286: EQUAL
8287: PUSH
8288: LD_INT 22
8290: PUSH
8291: LD_INT 1
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: LD_INT 21
8300: PUSH
8301: LD_INT 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: EMPTY
8309: LIST
8310: LIST
8311: PPUSH
8312: CALL_OW 69
8316: PUSH
8317: LD_INT 0
8319: EQUAL
8320: AND
8321: IFFALSE 8935
8323: GO 8325
8325: DISABLE
8326: LD_INT 0
8328: PPUSH
// begin InGameOn ;
8329: CALL_OW 8
// SayRadio ( Yakotich , 2Yak-27 ) ;
8333: LD_EXP 3
8337: PPUSH
8338: LD_STRING 2Yak-27
8340: PPUSH
8341: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-03 ) ;
8345: LD_EXP 18
8349: PPUSH
8350: LD_STRING 2Kurin-03
8352: PPUSH
8353: CALL_OW 94
// SayRadio ( AmSold , 2AmSold-01 ) ;
8357: LD_EXP 22
8361: PPUSH
8362: LD_STRING 2AmSold-01
8364: PPUSH
8365: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-04 ) ;
8369: LD_EXP 18
8373: PPUSH
8374: LD_STRING 2Kurin-04
8376: PPUSH
8377: CALL_OW 94
// Wait ( 0 0$02 ) ;
8381: LD_INT 70
8383: PPUSH
8384: CALL_OW 67
// SayRadio ( Grishko , 2Gri-01 ) ;
8388: LD_EXP 19
8392: PPUSH
8393: LD_STRING 2Gri-01
8395: PPUSH
8396: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-05 ) ;
8400: LD_EXP 18
8404: PPUSH
8405: LD_STRING 2Kurin-05
8407: PPUSH
8408: CALL_OW 94
// SayRadio ( Grishko , 2Gri-02 ) ;
8412: LD_EXP 19
8416: PPUSH
8417: LD_STRING 2Gri-02
8419: PPUSH
8420: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-06 ) ;
8424: LD_EXP 18
8428: PPUSH
8429: LD_STRING 2Kurin-06
8431: PPUSH
8432: CALL_OW 94
// SayRadio ( Grishko , 2Gri-03 ) ;
8436: LD_EXP 19
8440: PPUSH
8441: LD_STRING 2Gri-03
8443: PPUSH
8444: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-07 ) ;
8448: LD_EXP 18
8452: PPUSH
8453: LD_STRING 2Kurin-07
8455: PPUSH
8456: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-28 ) ;
8460: LD_EXP 3
8464: PPUSH
8465: LD_STRING 2Yak-28
8467: PPUSH
8468: CALL_OW 94
// Wait ( 0 0$03 ) ;
8472: LD_INT 105
8474: PPUSH
8475: CALL_OW 67
// SayRadio ( Kurin , 2Kurin-08 ) ;
8479: LD_EXP 18
8483: PPUSH
8484: LD_STRING 2Kurin-08
8486: PPUSH
8487: CALL_OW 94
// SayRadio ( Burlak , 2Burlak-01 ) ;
8491: LD_EXP 20
8495: PPUSH
8496: LD_STRING 2Burlak-01
8498: PPUSH
8499: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-09 ) ;
8503: LD_EXP 18
8507: PPUSH
8508: LD_STRING 2Kurin-09
8510: PPUSH
8511: CALL_OW 94
// SayEffect ( 2GunSound ) ;
8515: LD_STRING 2GunSound
8517: PPUSH
8518: CALL_OW 96
// SayRadio ( Morozov , 2Moro-10 ) ;
8522: LD_EXP 17
8526: PPUSH
8527: LD_STRING 2Moro-10
8529: PPUSH
8530: CALL_OW 94
// SayRadio ( Morozov , 2Moro-11 ) ;
8534: LD_EXP 17
8538: PPUSH
8539: LD_STRING 2Moro-11
8541: PPUSH
8542: CALL_OW 94
// SayRadio ( Morozov , 2Moro-12 ) ;
8546: LD_EXP 17
8550: PPUSH
8551: LD_STRING 2Moro-12
8553: PPUSH
8554: CALL_OW 94
// SayRadio ( Morozov , 2Moro-13 ) ;
8558: LD_EXP 17
8562: PPUSH
8563: LD_STRING 2Moro-13
8565: PPUSH
8566: CALL_OW 94
// SayRadio ( Morozov , 2Moro-14 ) ;
8570: LD_EXP 17
8574: PPUSH
8575: LD_STRING 2Moro-14
8577: PPUSH
8578: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-29 ) ;
8582: LD_EXP 3
8586: PPUSH
8587: LD_STRING 2Yak-29
8589: PPUSH
8590: CALL_OW 94
// end_of_the_mission = true ;
8594: LD_ADDR_EXP 56
8598: PUSH
8599: LD_INT 1
8601: ST_TO_ADDR
// InGameOff ;
8602: CALL_OW 9
// AddMedal ( PeopleConvoys , 1 ) ;
8606: LD_STRING PeopleConvoys
8608: PPUSH
8609: LD_INT 1
8611: PPUSH
8612: CALL_OW 101
// if gun_researched = true then
8616: LD_EXP 48
8620: PUSH
8621: LD_INT 1
8623: EQUAL
8624: IFFALSE 8638
// AddMedal ( GunMedal , 1 ) else
8626: LD_STRING GunMedal
8628: PPUSH
8629: LD_INT 1
8631: PPUSH
8632: CALL_OW 101
8636: GO 8649
// AddMedal ( GunMedal , - 1 ) ;
8638: LD_STRING GunMedal
8640: PPUSH
8641: LD_INT 1
8643: NEG
8644: PPUSH
8645: CALL_OW 101
// if gattling_researched = true and gun_researched = true and transport_builded = true and turrets_researched = true then
8649: LD_EXP 47
8653: PUSH
8654: LD_INT 1
8656: EQUAL
8657: PUSH
8658: LD_EXP 48
8662: PUSH
8663: LD_INT 1
8665: EQUAL
8666: AND
8667: PUSH
8668: LD_EXP 51
8672: PUSH
8673: LD_INT 1
8675: EQUAL
8676: AND
8677: PUSH
8678: LD_EXP 46
8682: PUSH
8683: LD_INT 1
8685: EQUAL
8686: AND
8687: IFFALSE 8701
// AddMedal ( Secondary , 1 ) else
8689: LD_STRING Secondary
8691: PPUSH
8692: LD_INT 1
8694: PPUSH
8695: CALL_OW 101
8699: GO 8712
// AddMedal ( Secondary , - 1 ) ;
8701: LD_STRING Secondary
8703: PPUSH
8704: LD_INT 1
8706: NEG
8707: PPUSH
8708: CALL_OW 101
// GiveMedals ( Medals ) ;
8712: LD_STRING Medals
8714: PPUSH
8715: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
8719: LD_INT 22
8721: PUSH
8722: LD_INT 3
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PUSH
8729: LD_INT 23
8731: PUSH
8732: LD_INT 3
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 21
8741: PUSH
8742: LD_INT 1
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: LIST
8753: PPUSH
8754: CALL_OW 69
8758: PPUSH
8759: CALL_OW 43
// SaveCharacters ( Yakotich , 02_Yakotich ) ;
8763: LD_EXP 3
8767: PPUSH
8768: LD_STRING 02_Yakotich
8770: PPUSH
8771: CALL_OW 38
// SaveCharacters ( Mietek , 02_Mietek ) ;
8775: LD_EXP 4
8779: PPUSH
8780: LD_STRING 02_Mietek
8782: PPUSH
8783: CALL_OW 38
// SaveCharacters ( Maksim , 02_Maksim ) ;
8787: LD_EXP 9
8791: PPUSH
8792: LD_STRING 02_Maksim
8794: PPUSH
8795: CALL_OW 38
// SaveCharacters ( Vasilij , 02_Vasilij ) ;
8799: LD_EXP 6
8803: PPUSH
8804: LD_STRING 02_Vasilij
8806: PPUSH
8807: CALL_OW 38
// SaveCharacters ( Michail , 02_Michail ) ;
8811: LD_EXP 7
8815: PPUSH
8816: LD_STRING 02_Michail
8818: PPUSH
8819: CALL_OW 38
// SaveCharacters ( Boris , 02_Boris ) ;
8823: LD_EXP 5
8827: PPUSH
8828: LD_STRING 02_Boris
8830: PPUSH
8831: CALL_OW 38
// SaveCharacters ( Constantin , 02_Constantin ) ;
8835: LD_EXP 8
8839: PPUSH
8840: LD_STRING 02_Constantin
8842: PPUSH
8843: CALL_OW 38
// SaveCharacters ( Fiodor , 02_Fiodor ) ;
8847: LD_EXP 10
8851: PPUSH
8852: LD_STRING 02_Fiodor
8854: PPUSH
8855: CALL_OW 38
// SaveCharacters ( Aleksiej , 02_Aleksiej ) ;
8859: LD_EXP 13
8863: PPUSH
8864: LD_STRING 02_Aleksiej
8866: PPUSH
8867: CALL_OW 38
// SaveCharacters ( Pavel , 02_Pavel ) ;
8871: LD_EXP 11
8875: PPUSH
8876: LD_STRING 02_Pavel
8878: PPUSH
8879: CALL_OW 38
// SaveCharacters ( Zakhar , 02_Zakhar ) ;
8883: LD_EXP 12
8887: PPUSH
8888: LD_STRING 02_Zakhar
8890: PPUSH
8891: CALL_OW 38
// SaveCharacters ( Aleksandr , 02_Aleksandr ) ;
8895: LD_EXP 14
8899: PPUSH
8900: LD_STRING 02_Aleksandr
8902: PPUSH
8903: CALL_OW 38
// SaveCharacters ( Stanislav , 02_Stanislav ) ;
8907: LD_EXP 16
8911: PPUSH
8912: LD_STRING 02_Stanislav
8914: PPUSH
8915: CALL_OW 38
// SaveCharacters ( Josif , 02_Josif ) ;
8919: LD_EXP 15
8923: PPUSH
8924: LD_STRING 02_Josif
8926: PPUSH
8927: CALL_OW 38
// YouWin ;
8931: CALL_OW 103
// end ;
8935: PPOPN 1
8937: END
