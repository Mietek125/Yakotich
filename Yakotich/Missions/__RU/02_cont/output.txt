// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 64 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Randomize ;
  15: CALL_OW 10
// RandomizeAll ;
  19: CALL_OW 11
// InitRussian ;
  23: CALL 6779 0 0
// Czolg ;
  27: CALL 7317 0 0
// Action ;
  31: CALL 7418 0 0
// InitAmerican ;
  35: CALL 2512 0 0
// DebugMode ;
  39: CALL 192 0 0
// SetBName ( AmDep1 , mi ) ;
  43: LD_INT 1
  45: PPUSH
  46: LD_STRING mi
  48: PPUSH
  49: CALL_OW 500
// SetBName ( AmDep2 , ni ) ;
  53: LD_INT 47
  55: PPUSH
  56: LD_STRING ni
  58: PPUSH
  59: CALL_OW 500
// end ;
  63: END
// export YakotichCrew , MietekCrew ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin ; export Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Morozov , Kurin , Grishko , Burlak , Platonov , AmSold ; export KurinTime , MietekTime ; export AmConvoys , AmConvoysVehicles , AmNorthPersonel , AmSouthPersonel ; export AmSoldNorth , AmSciNorth , AmMechNorth , AmEngNorth , AmSoldSouth , AmSciSouth , AmMechSouth , AmEngSouth ; export AmSoldConvoy , AmSciConvoy , AmMechConvoy , AmEngConvoy , AmVehicleConvoy ; export Tank ; export debug ; export mission_prefix ; export maksim_scout_ended , maksim_back , turrets_researched , gattling_researched , gun_researched , gun_recycled , second_wave_clear , transport_builded , first_attack_spawned , first_attack_clear , reiforcements_called , kurin_attack_started , end_of_the_mission ; export livid ; function Init ; begin
  64: LD_INT 0
  66: PPUSH
// mission_prefix := 02_ ;
  67: LD_ADDR_EXP 44
  71: PUSH
  72: LD_STRING 02_
  74: ST_TO_ADDR
// maksim_scout_ended := false ;
  75: LD_ADDR_EXP 45
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// maksim_back := false ;
  83: LD_ADDR_EXP 46
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// turrets_researched := false ;
  91: LD_ADDR_EXP 47
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// gattling_researched := false ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// gun_recycled := false ;
 107: LD_ADDR_EXP 50
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// gun_researched := false ;
 115: LD_ADDR_EXP 49
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// transport_builded := false ;
 123: LD_ADDR_EXP 52
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// first_attack_spawned := false ;
 131: LD_ADDR_EXP 53
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// first_attack_clear := false ;
 139: LD_ADDR_EXP 54
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// reiforcements_called := false ;
 147: LD_ADDR_EXP 55
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// kurin_attack_started := false ;
 155: LD_ADDR_EXP 56
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// end_of_the_mission := false ;
 163: LD_ADDR_EXP 57
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// MietekTime := 5 5$0 ;
 171: LD_ADDR_EXP 24
 175: PUSH
 176: LD_INT 10500
 178: ST_TO_ADDR
// KurinTime := 30 30$0 ;
 179: LD_ADDR_EXP 23
 183: PUSH
 184: LD_INT 63000
 186: ST_TO_ADDR
// end ;
 187: LD_VAR 0 1
 191: RET
// function DebugMode ; var i ; begin
 192: LD_INT 0
 194: PPUSH
 195: PPUSH
// if not debug then
 196: LD_EXP 43
 200: NOT
 201: IFFALSE 205
// exit ;
 203: GO 224
// Difficulty := 3 ;
 205: LD_ADDR_OWVAR 67
 209: PUSH
 210: LD_INT 3
 212: ST_TO_ADDR
// TurnFogOff ( ) ;
 213: CALL_OW 537
// FogOff ( 3 ) ;
 217: LD_INT 3
 219: PPUSH
 220: CALL_OW 344
// end ; end_of_file
 224: LD_VAR 0 1
 228: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
 229: LD_INT 0
 231: PPUSH
// ar_miner := 81 ;
 232: LD_ADDR_EXP 66
 236: PUSH
 237: LD_INT 81
 239: ST_TO_ADDR
// ar_crane := 88 ;
 240: LD_ADDR_EXP 65
 244: PUSH
 245: LD_INT 88
 247: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 248: LD_ADDR_EXP 60
 252: PUSH
 253: LD_INT 89
 255: ST_TO_ADDR
// us_hack := 99 ;
 256: LD_ADDR_EXP 61
 260: PUSH
 261: LD_INT 99
 263: ST_TO_ADDR
// us_artillery := 97 ;
 264: LD_ADDR_EXP 62
 268: PUSH
 269: LD_INT 97
 271: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 272: LD_ADDR_EXP 63
 276: PUSH
 277: LD_INT 91
 279: ST_TO_ADDR
// ar_mortar := 92 ;
 280: LD_ADDR_EXP 64
 284: PUSH
 285: LD_INT 92
 287: ST_TO_ADDR
// ru_flamethrower := 93 ;
 288: LD_ADDR_EXP 67
 292: PUSH
 293: LD_INT 93
 295: ST_TO_ADDR
// ru_radar := 98 ;
 296: LD_ADDR_EXP 59
 300: PUSH
 301: LD_INT 98
 303: ST_TO_ADDR
// tech_Artillery := 80 ;
 304: LD_ADDR_EXP 68
 308: PUSH
 309: LD_INT 80
 311: ST_TO_ADDR
// tech_RadMat := 81 ;
 312: LD_ADDR_EXP 69
 316: PUSH
 317: LD_INT 81
 319: ST_TO_ADDR
// tech_BasicTools := 82 ;
 320: LD_ADDR_EXP 70
 324: PUSH
 325: LD_INT 82
 327: ST_TO_ADDR
// tech_Cargo := 83 ;
 328: LD_ADDR_EXP 71
 332: PUSH
 333: LD_INT 83
 335: ST_TO_ADDR
// tech_Track := 84 ;
 336: LD_ADDR_EXP 72
 340: PUSH
 341: LD_INT 84
 343: ST_TO_ADDR
// tech_Crane := 85 ;
 344: LD_ADDR_EXP 73
 348: PUSH
 349: LD_INT 85
 351: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 352: LD_ADDR_EXP 74
 356: PUSH
 357: LD_INT 86
 359: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 360: LD_ADDR_EXP 75
 364: PUSH
 365: LD_INT 87
 367: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
 368: LD_ADDR_EXP 76
 372: PUSH
 373: LD_INT 88
 375: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
 376: LD_ADDR_EXP 77
 380: PUSH
 381: LD_INT 90
 383: ST_TO_ADDR
// class_mastodont := 31 ;
 384: LD_ADDR_EXP 78
 388: PUSH
 389: LD_INT 31
 391: ST_TO_ADDR
// class_horse := 21 ;
 392: LD_ADDR_EXP 79
 396: PUSH
 397: LD_INT 21
 399: ST_TO_ADDR
// end ;
 400: LD_VAR 0 1
 404: RET
// every 1 do
 405: GO 407
 407: DISABLE
// InitGlobalVariables ; end_of_file
 408: CALL 229 0 0
 412: END
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 413: LD_INT 0
 415: PPUSH
 416: PPUSH
 417: PPUSH
// uc_side := GetSide ( b ) ;
 418: LD_ADDR_OWVAR 20
 422: PUSH
 423: LD_VAR 0 2
 427: PPUSH
 428: CALL_OW 255
 432: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 433: LD_ADDR_OWVAR 21
 437: PUSH
 438: LD_VAR 0 2
 442: PPUSH
 443: CALL_OW 248
 447: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 448: LD_ADDR_VAR 0 5
 452: PUSH
 453: LD_VAR 0 2
 457: PPUSH
 458: CALL_OW 254
 462: PUSH
 463: LD_INT 3
 465: MINUS
 466: ST_TO_ADDR
// if dir < 0 then
 467: LD_VAR 0 5
 471: PUSH
 472: LD_INT 0
 474: LESS
 475: IFFALSE 491
// dir := 6 + dir ;
 477: LD_ADDR_VAR 0 5
 481: PUSH
 482: LD_INT 6
 484: PUSH
 485: LD_VAR 0 5
 489: PLUS
 490: ST_TO_ADDR
// un := CreateHuman ;
 491: LD_ADDR_VAR 0 4
 495: PUSH
 496: CALL_OW 44
 500: ST_TO_ADDR
// SetDir ( un , dir ) ;
 501: LD_VAR 0 4
 505: PPUSH
 506: LD_VAR 0 5
 510: PPUSH
 511: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 515: LD_VAR 0 4
 519: PPUSH
 520: LD_VAR 0 2
 524: PPUSH
 525: CALL_OW 52
// end ;
 529: LD_VAR 0 3
 533: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 534: LD_INT 0
 536: PPUSH
 537: PPUSH
// if exist_mode then
 538: LD_VAR 0 2
 542: IFFALSE 567
// unit := CreateCharacter ( prefix & ident ) else
 544: LD_ADDR_VAR 0 5
 548: PUSH
 549: LD_VAR 0 3
 553: PUSH
 554: LD_VAR 0 1
 558: STR
 559: PPUSH
 560: CALL_OW 34
 564: ST_TO_ADDR
 565: GO 582
// unit := NewCharacter ( ident ) ;
 567: LD_ADDR_VAR 0 5
 571: PUSH
 572: LD_VAR 0 1
 576: PPUSH
 577: CALL_OW 25
 581: ST_TO_ADDR
// result := unit ;
 582: LD_ADDR_VAR 0 4
 586: PUSH
 587: LD_VAR 0 5
 591: ST_TO_ADDR
// end ;
 592: LD_VAR 0 4
 596: RET
// export function GetCountOfBuildingsInBase ( base , btype ) ; var i , tmp ; begin
 597: LD_INT 0
 599: PPUSH
 600: PPUSH
 601: PPUSH
// result := 0 ;
 602: LD_ADDR_VAR 0 3
 606: PUSH
 607: LD_INT 0
 609: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_btype , btype ] ) ;
 610: LD_ADDR_VAR 0 5
 614: PUSH
 615: LD_INT 30
 617: PUSH
 618: LD_VAR 0 2
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: PPUSH
 627: CALL_OW 69
 631: ST_TO_ADDR
// if not base or not tmp then
 632: LD_VAR 0 1
 636: NOT
 637: PUSH
 638: LD_VAR 0 5
 642: NOT
 643: OR
 644: IFFALSE 648
// exit ;
 646: GO 696
// for i in tmp do
 648: LD_ADDR_VAR 0 4
 652: PUSH
 653: LD_VAR 0 5
 657: PUSH
 658: FOR_IN
 659: IFFALSE 694
// if GetBase ( i ) = base then
 661: LD_VAR 0 4
 665: PPUSH
 666: CALL_OW 274
 670: PUSH
 671: LD_VAR 0 1
 675: EQUAL
 676: IFFALSE 692
// result := result + 1 ;
 678: LD_ADDR_VAR 0 3
 682: PUSH
 683: LD_VAR 0 3
 687: PUSH
 688: LD_INT 1
 690: PLUS
 691: ST_TO_ADDR
 692: GO 658
 694: POP
 695: POP
// end ;
 696: LD_VAR 0 3
 700: RET
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 701: LD_EXP 56
 705: PUSH
 706: LD_INT 0
 708: EQUAL
 709: PUSH
 710: LD_INT 17
 712: PPUSH
 713: LD_INT 22
 715: PUSH
 716: LD_INT 3
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PUSH
 723: LD_INT 2
 725: PUSH
 726: LD_INT 21
 728: PUSH
 729: LD_INT 1
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 21
 738: PUSH
 739: LD_INT 2
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PPUSH
 755: CALL_OW 70
 759: PUSH
 760: LD_INT 0
 762: GREATER
 763: AND
 764: IFFALSE 872
 766: GO 768
 768: DISABLE
 769: LD_INT 0
 771: PPUSH
// begin enable ;
 772: ENABLE
// for unit in FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 773: LD_ADDR_VAR 0 1
 777: PUSH
 778: LD_INT 17
 780: PPUSH
 781: LD_INT 22
 783: PUSH
 784: LD_INT 3
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: PUSH
 791: LD_INT 2
 793: PUSH
 794: LD_INT 21
 796: PUSH
 797: LD_INT 1
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: PUSH
 804: LD_INT 21
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: LIST
 818: PUSH
 819: EMPTY
 820: LIST
 821: LIST
 822: PPUSH
 823: CALL_OW 70
 827: PUSH
 828: FOR_IN
 829: IFFALSE 870
// begin ComMoveXY ( unit , GetX ( unit ) + 5 , GetY ( unit ) + 5 ) ;
 831: LD_VAR 0 1
 835: PPUSH
 836: LD_VAR 0 1
 840: PPUSH
 841: CALL_OW 250
 845: PUSH
 846: LD_INT 5
 848: PLUS
 849: PPUSH
 850: LD_VAR 0 1
 854: PPUSH
 855: CALL_OW 251
 859: PUSH
 860: LD_INT 5
 862: PLUS
 863: PPUSH
 864: CALL_OW 111
// end ;
 868: GO 828
 870: POP
 871: POP
// end ;
 872: PPOPN 1
 874: END
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 875: LD_EXP 56
 879: PUSH
 880: LD_INT 0
 882: EQUAL
 883: PUSH
 884: LD_INT 18
 886: PPUSH
 887: LD_INT 22
 889: PUSH
 890: LD_INT 3
 892: PUSH
 893: EMPTY
 894: LIST
 895: LIST
 896: PUSH
 897: LD_INT 2
 899: PUSH
 900: LD_INT 21
 902: PUSH
 903: LD_INT 1
 905: PUSH
 906: EMPTY
 907: LIST
 908: LIST
 909: PUSH
 910: LD_INT 21
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PPUSH
 929: CALL_OW 70
 933: PUSH
 934: LD_INT 0
 936: GREATER
 937: AND
 938: IFFALSE 1046
 940: GO 942
 942: DISABLE
 943: LD_INT 0
 945: PPUSH
// begin enable ;
 946: ENABLE
// for unit in FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 947: LD_ADDR_VAR 0 1
 951: PUSH
 952: LD_INT 18
 954: PPUSH
 955: LD_INT 22
 957: PUSH
 958: LD_INT 3
 960: PUSH
 961: EMPTY
 962: LIST
 963: LIST
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: LD_INT 21
 970: PUSH
 971: LD_INT 1
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: LD_INT 21
 980: PUSH
 981: LD_INT 2
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: LIST
 992: PUSH
 993: EMPTY
 994: LIST
 995: LIST
 996: PPUSH
 997: CALL_OW 70
1001: PUSH
1002: FOR_IN
1003: IFFALSE 1044
// begin ComMoveXY ( unit , GetX ( unit ) + 5 , GetY ( unit ) + 5 ) ;
1005: LD_VAR 0 1
1009: PPUSH
1010: LD_VAR 0 1
1014: PPUSH
1015: CALL_OW 250
1019: PUSH
1020: LD_INT 5
1022: PLUS
1023: PPUSH
1024: LD_VAR 0 1
1028: PPUSH
1029: CALL_OW 251
1033: PUSH
1034: LD_INT 5
1036: PLUS
1037: PPUSH
1038: CALL_OW 111
// end ;
1042: GO 1002
1044: POP
1045: POP
// end ;
1046: PPOPN 1
1048: END
// every 1 trigger IsSelected ( Serpent ) do
1049: LD_INT 215
1051: PPUSH
1052: CALL_OW 306
1056: IFFALSE 1153
1058: GO 1060
1060: DISABLE
// begin SerpentExp ( [ 1 , 2 , 3 , 4 ] ) ;
1061: LD_INT 1
1063: PUSH
1064: LD_INT 2
1066: PUSH
1067: LD_INT 3
1069: PUSH
1070: LD_INT 4
1072: PUSH
1073: EMPTY
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: PPUSH
1079: CALL 1154 0 1
// Wait ( 0 0$05 ) ;
1083: LD_INT 175
1085: PPUSH
1086: CALL_OW 67
// Say ( Serpent , 2Langu-Sikret ) ;
1090: LD_INT 215
1092: PPUSH
1093: LD_STRING 2Langu-Sikret
1095: PPUSH
1096: CALL_OW 88
// TeleportUnit ( Serpent , 5 , 4 , 100 , true ) ;
1100: LD_INT 215
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: LD_INT 4
1108: PPUSH
1109: LD_INT 100
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL_OW 483
// Wait ( 0 0$05 ) ;
1119: LD_INT 175
1121: PPUSH
1122: CALL_OW 67
// RemoveUnit ( Serpent ) ;
1126: LD_INT 215
1128: PPUSH
1129: CALL_OW 64
// SaveVariable ( 1 , SerpentSaved ) ;
1133: LD_INT 1
1135: PPUSH
1136: LD_STRING SerpentSaved
1138: PPUSH
1139: CALL_OW 39
// SaveCharacters ( Serpent , Langu ) ;
1143: LD_INT 215
1145: PPUSH
1146: LD_STRING Langu
1148: PPUSH
1149: CALL_OW 38
// end ;
1153: END
// export function SerpentExp ( q ) ; var dec , q1 ; begin
1154: LD_INT 0
1156: PPUSH
1157: PPUSH
1158: PPUSH
// dec = SelectiveQuery ( SerpentQuery , q ) ;
1159: LD_ADDR_VAR 0 3
1163: PUSH
1164: LD_STRING SerpentQuery
1166: PPUSH
1167: LD_VAR 0 1
1171: PPUSH
1172: CALL_OW 98
1176: ST_TO_ADDR
// case dec of 1 :
1177: LD_VAR 0 3
1181: PUSH
1182: LD_INT 1
1184: DOUBLE
1185: EQUAL
1186: IFTRUE 1190
1188: GO 1208
1190: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 1000 ) ;
1191: LD_EXP 3
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 1000
1201: PPUSH
1202: CALL_OW 591
// end ; 2 :
1206: GO 1287
1208: LD_INT 2
1210: DOUBLE
1211: EQUAL
1212: IFTRUE 1216
1214: GO 1234
1216: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 1000 ) ;
1217: LD_EXP 3
1221: PPUSH
1222: LD_INT 2
1224: PPUSH
1225: LD_INT 1000
1227: PPUSH
1228: CALL_OW 591
// end ; 3 :
1232: GO 1287
1234: LD_INT 3
1236: DOUBLE
1237: EQUAL
1238: IFTRUE 1242
1240: GO 1260
1242: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 1000 ) ;
1243: LD_EXP 3
1247: PPUSH
1248: LD_INT 3
1250: PPUSH
1251: LD_INT 1000
1253: PPUSH
1254: CALL_OW 591
// end ; 4 :
1258: GO 1287
1260: LD_INT 4
1262: DOUBLE
1263: EQUAL
1264: IFTRUE 1268
1266: GO 1286
1268: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 1000 ) ;
1269: LD_EXP 3
1273: PPUSH
1274: LD_INT 4
1276: PPUSH
1277: LD_INT 1000
1279: PPUSH
1280: CALL_OW 591
// end ; end ;
1284: GO 1287
1286: POP
// end ;
1287: LD_VAR 0 2
1291: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
1292: LD_EXP 3
1296: PPUSH
1297: CALL_OW 301
1301: IFFALSE 1313
1303: GO 1305
1305: DISABLE
// begin YouLost ( YakotichDead ) ;
1306: LD_STRING YakotichDead
1308: PPUSH
1309: CALL_OW 104
// end ;
1313: END
// every 0 0$1 trigger IsDead ( Mietek ) do
1314: LD_EXP 4
1318: PPUSH
1319: CALL_OW 301
1323: IFFALSE 1335
1325: GO 1327
1327: DISABLE
// begin YouLost ( MietekDead ) ;
1328: LD_STRING MietekDead
1330: PPUSH
1331: CALL_OW 104
// end ;
1335: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
1336: LD_VAR 0 1
1340: PUSH
1341: LD_INT 22
1343: PUSH
1344: LD_INT 3
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: PUSH
1351: LD_INT 3
1353: PUSH
1354: LD_INT 23
1356: PUSH
1357: LD_INT 0
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: LD_INT 21
1370: PUSH
1371: LD_INT 1
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 69
1387: IN
1388: IFFALSE 1397
// YouLost ( PeopleDead ) ;
1390: LD_STRING PeopleDead
1392: PPUSH
1393: CALL_OW 104
// end ;
1397: PPOPN 1
1399: END
// every 0 0$1 trigger FilterUnitsInArea ( OmikronArea , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) do
1400: LD_INT 15
1402: PPUSH
1403: LD_INT 2
1405: PUSH
1406: LD_INT 22
1408: PUSH
1409: LD_INT 1
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PUSH
1416: LD_INT 22
1418: PUSH
1419: LD_INT 4
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: LIST
1430: PPUSH
1431: CALL_OW 70
1435: IFFALSE 1447
1437: GO 1439
1439: DISABLE
// begin YouLost ( ConvoysMadeIt ) ;
1440: LD_STRING ConvoysMadeIt
1442: PPUSH
1443: CALL_OW 104
// end ;
1447: END
// every 0 0$1 trigger maksim_back = true do
1448: LD_EXP 46
1452: PUSH
1453: LD_INT 1
1455: EQUAL
1456: IFFALSE 1465
1458: GO 1460
1460: DISABLE
// begin AmAttacks ;
1461: CALL 3921 0 0
// end ;
1465: END
// export function MaksimScout ; begin
1466: LD_INT 0
1468: PPUSH
// SetSide ( Maksim , 6 ) ;
1469: LD_EXP 9
1473: PPUSH
1474: LD_INT 6
1476: PPUSH
1477: CALL_OW 235
// ComMoveToArea ( Maksim , MaksimStop1 ) ;
1481: LD_EXP 9
1485: PPUSH
1486: LD_INT 5
1488: PPUSH
1489: CALL_OW 113
// end ;
1493: LD_VAR 0 1
1497: RET
// every 1 trigger IsInArea ( Maksim , MaksimStop1 ) do
1498: LD_EXP 9
1502: PPUSH
1503: LD_INT 5
1505: PPUSH
1506: CALL_OW 308
1510: IFFALSE 1543
1512: GO 1514
1514: DISABLE
// begin ComHold ( Maksim ) ;
1515: LD_EXP 9
1519: PPUSH
1520: CALL_OW 140
// Wait ( 0 0$10 ) ;
1524: LD_INT 350
1526: PPUSH
1527: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop2 ) ;
1531: LD_EXP 9
1535: PPUSH
1536: LD_INT 6
1538: PPUSH
1539: CALL_OW 113
// end ;
1543: END
// every 1 trigger IsInArea ( Maksim , MaksimStop2 ) do
1544: LD_EXP 9
1548: PPUSH
1549: LD_INT 6
1551: PPUSH
1552: CALL_OW 308
1556: IFFALSE 1580
1558: GO 1560
1560: DISABLE
// begin Wait ( 0 0$10 ) ;
1561: LD_INT 350
1563: PPUSH
1564: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop3 ) ;
1568: LD_EXP 9
1572: PPUSH
1573: LD_INT 7
1575: PPUSH
1576: CALL_OW 113
// end ;
1580: END
// every 1 trigger IsInArea ( Maksim , MaksimStop3 ) do
1581: LD_EXP 9
1585: PPUSH
1586: LD_INT 7
1588: PPUSH
1589: CALL_OW 308
1593: IFFALSE 1627
1595: GO 1597
1597: DISABLE
// begin Wait ( 0 0$10 ) ;
1598: LD_INT 350
1600: PPUSH
1601: CALL_OW 67
// maksim_scout_ended = true ;
1605: LD_ADDR_EXP 45
1609: PUSH
1610: LD_INT 1
1612: ST_TO_ADDR
// ComMoveUnit ( Maksim , Yakotich ) ;
1613: LD_EXP 9
1617: PPUSH
1618: LD_EXP 3
1622: PPUSH
1623: CALL_OW 112
// end ;
1627: END
// every 0 0$1 trigger maksim_back do
1628: LD_EXP 46
1632: IFFALSE 1686
1634: GO 1636
1636: DISABLE
// begin enable ;
1637: ENABLE
// if KurinTime then
1638: LD_EXP 23
1642: IFFALSE 1677
// begin KurinTime := KurinTime - 0 0$1 ;
1644: LD_ADDR_EXP 23
1648: PUSH
1649: LD_EXP 23
1653: PUSH
1654: LD_INT 35
1656: MINUS
1657: ST_TO_ADDR
// display_strings := [ #KurinAttack , KurinTime ] ;
1658: LD_ADDR_OWVAR 47
1662: PUSH
1663: LD_STRING #KurinAttack
1665: PUSH
1666: LD_EXP 23
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: ST_TO_ADDR
// end else
1675: GO 1686
// begin display_strings :=  ;
1677: LD_ADDR_OWVAR 47
1681: PUSH
1682: LD_STRING 
1684: ST_TO_ADDR
// disable ;
1685: DISABLE
// end ; end ;
1686: END
// every 0 0$1 trigger first_attack_clear do
1687: LD_EXP 54
1691: IFFALSE 1751
1693: GO 1695
1695: DISABLE
// begin enable ;
1696: ENABLE
// if MietekTime then
1697: LD_EXP 24
1701: IFFALSE 1742
// begin MietekTime := MietekTime - 0 0$1 ;
1703: LD_ADDR_EXP 24
1707: PUSH
1708: LD_EXP 24
1712: PUSH
1713: LD_INT 35
1715: MINUS
1716: ST_TO_ADDR
// display_strings := display_strings ^ [ #MietekForces , MietekTime ] ;
1717: LD_ADDR_OWVAR 47
1721: PUSH
1722: LD_OWVAR 47
1726: PUSH
1727: LD_STRING #MietekForces
1729: PUSH
1730: LD_EXP 24
1734: PUSH
1735: EMPTY
1736: LIST
1737: LIST
1738: ADD
1739: ST_TO_ADDR
// end else
1740: GO 1751
// begin display_strings :=  ;
1742: LD_ADDR_OWVAR 47
1746: PUSH
1747: LD_STRING 
1749: ST_TO_ADDR
// disable ;
1750: DISABLE
// end ; end ; end_of_file
1751: END
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
1752: LD_VAR 0 1
1756: PPUSH
1757: CALL_OW 255
1761: PUSH
1762: LD_INT 3
1764: EQUAL
1765: PUSH
1766: LD_VAR 0 1
1770: PPUSH
1771: CALL_OW 266
1775: PUSH
1776: LD_INT 0
1778: EQUAL
1779: AND
1780: IFFALSE 1805
// begin RuDep := building ;
1782: LD_ADDR_EXP 80
1786: PUSH
1787: LD_VAR 0 1
1791: ST_TO_ADDR
// SetRestrict ( b_depot , 3 , false ) ;
1792: LD_INT 0
1794: PPUSH
1795: LD_INT 3
1797: PPUSH
1798: LD_INT 0
1800: PPUSH
1801: CALL_OW 324
// end ; end ;
1805: PPOPN 2
1807: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 3 and GetBType ( b ) = b_depot then
1808: LD_VAR 0 1
1812: PPUSH
1813: CALL_OW 255
1817: PUSH
1818: LD_INT 3
1820: EQUAL
1821: PUSH
1822: LD_VAR 0 1
1826: PPUSH
1827: CALL_OW 266
1831: PUSH
1832: LD_INT 0
1834: EQUAL
1835: AND
1836: IFFALSE 1890
// begin DialogueOn ;
1838: CALL_OW 6
// Say ( Boris , 2Bor-01 ) ;
1842: LD_EXP 5
1846: PPUSH
1847: LD_STRING 2Bor-01
1849: PPUSH
1850: CALL_OW 88
// Say ( Vasilij , 2Vas-05 ) ;
1854: LD_EXP 6
1858: PPUSH
1859: LD_STRING 2Vas-05
1861: PPUSH
1862: CALL_OW 88
// ChangeMissionObjectives ( transport ) ;
1866: LD_STRING transport
1868: PPUSH
1869: CALL_OW 337
// SetTech ( 83 , 3 , 1 ) ;
1873: LD_INT 83
1875: PPUSH
1876: LD_INT 3
1878: PPUSH
1879: LD_INT 1
1881: PPUSH
1882: CALL_OW 322
// DialogueOff ;
1886: CALL_OW 7
// end ; if GetSide ( b ) = 3 and GetBType ( b ) = b_lab then
1890: LD_VAR 0 1
1894: PPUSH
1895: CALL_OW 255
1899: PUSH
1900: LD_INT 3
1902: EQUAL
1903: PUSH
1904: LD_VAR 0 1
1908: PPUSH
1909: CALL_OW 266
1913: PUSH
1914: LD_INT 6
1916: EQUAL
1917: AND
1918: IFFALSE 1976
// begin Say ( Vasilij , 2Vas-01 ) ;
1920: LD_EXP 6
1924: PPUSH
1925: LD_STRING 2Vas-01
1927: PPUSH
1928: CALL_OW 88
// Say ( Vasilij , 2Vas-02 ) ;
1932: LD_EXP 6
1936: PPUSH
1937: LD_STRING 2Vas-02
1939: PPUSH
1940: CALL_OW 88
// Say ( Yakotich , 2Yak-14 ) ;
1944: LD_EXP 3
1948: PPUSH
1949: LD_STRING 2Yak-14
1951: PPUSH
1952: CALL_OW 88
// ChangeMissionObjectives ( gattling ) ;
1956: LD_STRING gattling
1958: PPUSH
1959: CALL_OW 337
// SetTech ( 69 , 3 , 1 ) ;
1963: LD_INT 69
1965: PPUSH
1966: LD_INT 3
1968: PPUSH
1969: LD_INT 1
1971: PPUSH
1972: CALL_OW 322
// end ; end ;
1976: PPOPN 1
1978: END
// on VehicleRecycled ( BuildingID , VehicleID , Side , Nation , X , Y , Direction , Chassis , Controller , Engine , Weapon ) do begin if Side = 3 and Nation = 1 and Weapon in [ 3 , 5 ] and gun_recycled = false then
1979: LD_VAR 0 3
1983: PUSH
1984: LD_INT 3
1986: EQUAL
1987: PUSH
1988: LD_VAR 0 4
1992: PUSH
1993: LD_INT 1
1995: EQUAL
1996: AND
1997: PUSH
1998: LD_VAR 0 11
2002: PUSH
2003: LD_INT 3
2005: PUSH
2006: LD_INT 5
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: IN
2013: AND
2014: PUSH
2015: LD_EXP 50
2019: PUSH
2020: LD_INT 0
2022: EQUAL
2023: AND
2024: IFFALSE 2072
// begin gun_recycled = true ;
2026: LD_ADDR_EXP 50
2030: PUSH
2031: LD_INT 1
2033: ST_TO_ADDR
// Say ( Stanislav , 2Stan-04 ) ;
2034: LD_EXP 16
2038: PPUSH
2039: LD_STRING 2Stan-04
2041: PPUSH
2042: CALL_OW 88
// SetTech ( 39 , 3 , 1 ) ;
2046: LD_INT 39
2048: PPUSH
2049: LD_INT 3
2051: PPUSH
2052: LD_INT 1
2054: PPUSH
2055: CALL_OW 322
// SetRestrict ( 17 , 3 , 1 ) ;
2059: LD_INT 17
2061: PPUSH
2062: LD_INT 3
2064: PPUSH
2065: LD_INT 1
2067: PPUSH
2068: CALL_OW 324
// end ; end ;
2072: PPOPN 11
2074: END
// on Contact ( side1 , side2 ) do begin if ( ( side1 = 4 and side2 = 3 ) or ( side1 = 3 and side2 = 4 ) ) and reiforcements_called = false then
2075: LD_VAR 0 1
2079: PUSH
2080: LD_INT 4
2082: EQUAL
2083: PUSH
2084: LD_VAR 0 2
2088: PUSH
2089: LD_INT 3
2091: EQUAL
2092: AND
2093: PUSH
2094: LD_VAR 0 1
2098: PUSH
2099: LD_INT 3
2101: EQUAL
2102: PUSH
2103: LD_VAR 0 2
2107: PUSH
2108: LD_INT 4
2110: EQUAL
2111: AND
2112: OR
2113: PUSH
2114: LD_EXP 55
2118: PUSH
2119: LD_INT 0
2121: EQUAL
2122: AND
2123: IFFALSE 2227
// begin reiforcements_called := true ;
2125: LD_ADDR_EXP 55
2129: PUSH
2130: LD_INT 1
2132: ST_TO_ADDR
// Say ( Yakotich , 2Yak-23 ) ;
2133: LD_EXP 3
2137: PPUSH
2138: LD_STRING 2Yak-23
2140: PPUSH
2141: CALL_OW 88
// Wait ( 0 0$10 ) ;
2145: LD_INT 350
2147: PPUSH
2148: CALL_OW 67
// SayRadio ( Yakotich , 2Yak-Reinforcements ) ;
2152: LD_EXP 3
2156: PPUSH
2157: LD_STRING 2Yak-Reinforcements
2159: PPUSH
2160: CALL_OW 94
// SayRadio ( Morozov , 2Moro-Reinforcements ) ;
2164: LD_EXP 17
2168: PPUSH
2169: LD_STRING 2Moro-Reinforcements
2171: PPUSH
2172: CALL_OW 94
// Wait ( 0 0$10 ) ;
2176: LD_INT 350
2178: PPUSH
2179: CALL_OW 67
// SayRadio ( Mietek , 2Ryn-04 ) ;
2183: LD_EXP 4
2187: PPUSH
2188: LD_STRING 2Ryn-04
2190: PPUSH
2191: CALL_OW 94
// SayRadio ( Mietek , 2Ryn-05 ) ;
2195: LD_EXP 4
2199: PPUSH
2200: LD_STRING 2Ryn-05
2202: PPUSH
2203: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-24 ) ;
2207: LD_EXP 3
2211: PPUSH
2212: LD_STRING 2Yak-24
2214: PPUSH
2215: CALL_OW 94
// first_attack_clear = true ;
2219: LD_ADDR_EXP 54
2223: PUSH
2224: LD_INT 1
2226: ST_TO_ADDR
// end ; end ;
2227: PPOPN 2
2229: END
// every 0 0$1 trigger Researched ( 3 , 69 ) do
2230: LD_INT 3
2232: PPUSH
2233: LD_INT 69
2235: PPUSH
2236: CALL_OW 325
2240: IFFALSE 2284
2242: GO 2244
2244: DISABLE
// begin Say ( Vasilij , 2Vas-03 ) ;
2245: LD_EXP 6
2249: PPUSH
2250: LD_STRING 2Vas-03
2252: PPUSH
2253: CALL_OW 88
// Say ( Vasilij , 2Vas-04 ) ;
2257: LD_EXP 6
2261: PPUSH
2262: LD_STRING 2Vas-04
2264: PPUSH
2265: CALL_OW 88
// gattling_researched = true ;
2269: LD_ADDR_EXP 48
2273: PUSH
2274: LD_INT 1
2276: ST_TO_ADDR
// ChangeMissionObjectives ( gattling-2 ) ;
2277: LD_STRING gattling-2
2279: PPUSH
2280: CALL_OW 337
// end ;
2284: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
2285: LD_INT 3
2287: PPUSH
2288: LD_INT 90
2290: PPUSH
2291: CALL_OW 325
2295: IFFALSE 2315
2297: GO 2299
2299: DISABLE
// begin turrets_researched = true ;
2300: LD_ADDR_EXP 47
2304: PUSH
2305: LD_INT 1
2307: ST_TO_ADDR
// ChangeMissionObjectives ( turret-2 ) ;
2308: LD_STRING turret-2
2310: PPUSH
2311: CALL_OW 337
// end ;
2315: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 89 ] , [ f_weapon , 51 ] ] ] ) do
2316: LD_INT 22
2318: PUSH
2319: LD_INT 3
2321: PUSH
2322: EMPTY
2323: LIST
2324: LIST
2325: PUSH
2326: LD_INT 21
2328: PUSH
2329: LD_INT 2
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 2
2338: PUSH
2339: LD_INT 34
2341: PUSH
2342: LD_INT 89
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 34
2351: PUSH
2352: LD_INT 51
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: LIST
2368: PPUSH
2369: CALL_OW 69
2373: IFFALSE 2393
2375: GO 2377
2377: DISABLE
// begin ChangeMissionObjectives ( transport-2 ) ;
2378: LD_STRING transport-2
2380: PPUSH
2381: CALL_OW 337
// transport_builded = true ;
2385: LD_ADDR_EXP 52
2389: PUSH
2390: LD_INT 1
2392: ST_TO_ADDR
// end ;
2393: END
// every 0 0$1 trigger Researched ( 3 , 39 ) do
2394: LD_INT 3
2396: PPUSH
2397: LD_INT 39
2399: PPUSH
2400: CALL_OW 325
2404: IFFALSE 2460
2406: GO 2408
2408: DISABLE
// begin Say ( Stanislav , 2Stan-05 ) ;
2409: LD_EXP 16
2413: PPUSH
2414: LD_STRING 2Stan-05
2416: PPUSH
2417: CALL_OW 88
// Say ( Stanislav , 2Stan-06 ) ;
2421: LD_EXP 16
2425: PPUSH
2426: LD_STRING 2Stan-06
2428: PPUSH
2429: CALL_OW 88
// Say ( Yakotich , 2Yak-Stan-02 ) ;
2433: LD_EXP 3
2437: PPUSH
2438: LD_STRING 2Yak-Stan-02
2440: PPUSH
2441: CALL_OW 88
// gun_researched = true ;
2445: LD_ADDR_EXP 49
2449: PUSH
2450: LD_INT 1
2452: ST_TO_ADDR
// ChangeMissionObjectives ( gun-2 ) ;
2453: LD_STRING gun-2
2455: PPUSH
2456: CALL_OW 337
// end ; end_of_file
2460: END
// every 5 5$0 do var i ;
2461: GO 2463
2463: DISABLE
2464: LD_INT 0
2466: PPUSH
// begin for i = 1 to 4 do
2467: LD_ADDR_VAR 0 1
2471: PUSH
2472: DOUBLE
2473: LD_INT 1
2475: DEC
2476: ST_TO_ADDR
2477: LD_INT 4
2479: PUSH
2480: FOR_TO
2481: IFFALSE 2507
// begin CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
2483: LD_INT 2
2485: PPUSH
2486: LD_INT 5
2488: PPUSH
2489: CALL_OW 12
2493: PPUSH
2494: LD_INT 4
2496: PPUSH
2497: LD_INT 1
2499: PPUSH
2500: CALL_OW 55
// enable ;
2504: ENABLE
// end ;
2505: GO 2480
2507: POP
2508: POP
// end ; end_of_file
2509: PPOPN 1
2511: END
// export function InitAmerican ; var i , y , turrety , lab , fabryka , zbrojka , turrety2 , lab2 , fabryka2 , zbrojka2 ; begin
2512: LD_INT 0
2514: PPUSH
2515: PPUSH
2516: PPUSH
2517: PPUSH
2518: PPUSH
2519: PPUSH
2520: PPUSH
2521: PPUSH
2522: PPUSH
2523: PPUSH
2524: PPUSH
// AmNorthPersonel := [ ] ;
2525: LD_ADDR_EXP 27
2529: PUSH
2530: EMPTY
2531: ST_TO_ADDR
// uc_side := 1 ;
2532: LD_ADDR_OWVAR 20
2536: PUSH
2537: LD_INT 1
2539: ST_TO_ADDR
// uc_nation := 1 ;
2540: LD_ADDR_OWVAR 21
2544: PUSH
2545: LD_INT 1
2547: ST_TO_ADDR
// for i = 1 to [ 7 , 8 , 9 ] [ Difficulty ] do
2548: LD_ADDR_VAR 0 2
2552: PUSH
2553: DOUBLE
2554: LD_INT 1
2556: DEC
2557: ST_TO_ADDR
2558: LD_INT 7
2560: PUSH
2561: LD_INT 8
2563: PUSH
2564: LD_INT 9
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: PUSH
2572: LD_OWVAR 67
2576: ARRAY
2577: PUSH
2578: FOR_TO
2579: IFFALSE 2634
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2581: LD_INT 0
2583: PPUSH
2584: LD_INT 1
2586: PPUSH
2587: CALL_OW 12
2591: PPUSH
2592: LD_INT 1
2594: PUSH
2595: LD_INT 3
2597: PUSH
2598: LD_INT 5
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: PUSH
2606: LD_OWVAR 67
2610: ARRAY
2611: PPUSH
2612: CALL_OW 381
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2616: LD_ADDR_EXP 27
2620: PUSH
2621: LD_EXP 27
2625: PUSH
2626: CALL_OW 44
2630: ADD
2631: ST_TO_ADDR
// end ;
2632: GO 2578
2634: POP
2635: POP
// for i = 1 to 2 do
2636: LD_ADDR_VAR 0 2
2640: PUSH
2641: DOUBLE
2642: LD_INT 1
2644: DEC
2645: ST_TO_ADDR
2646: LD_INT 2
2648: PUSH
2649: FOR_TO
2650: IFFALSE 2705
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2652: LD_INT 0
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: CALL_OW 12
2662: PPUSH
2663: LD_INT 1
2665: PUSH
2666: LD_INT 3
2668: PUSH
2669: LD_INT 5
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: LIST
2676: PUSH
2677: LD_OWVAR 67
2681: ARRAY
2682: PPUSH
2683: CALL_OW 382
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2687: LD_ADDR_EXP 27
2691: PUSH
2692: LD_EXP 27
2696: PUSH
2697: CALL_OW 44
2701: ADD
2702: ST_TO_ADDR
// end ;
2703: GO 2649
2705: POP
2706: POP
// for i = 1 to 1 do
2707: LD_ADDR_VAR 0 2
2711: PUSH
2712: DOUBLE
2713: LD_INT 1
2715: DEC
2716: ST_TO_ADDR
2717: LD_INT 1
2719: PUSH
2720: FOR_TO
2721: IFFALSE 2776
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2723: LD_INT 0
2725: PPUSH
2726: LD_INT 1
2728: PPUSH
2729: CALL_OW 12
2733: PPUSH
2734: LD_INT 1
2736: PUSH
2737: LD_INT 3
2739: PUSH
2740: LD_INT 5
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: LIST
2747: PUSH
2748: LD_OWVAR 67
2752: ARRAY
2753: PPUSH
2754: CALL_OW 383
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2758: LD_ADDR_EXP 27
2762: PUSH
2763: LD_EXP 27
2767: PUSH
2768: CALL_OW 44
2772: ADD
2773: ST_TO_ADDR
// end ;
2774: GO 2720
2776: POP
2777: POP
// for i = 1 to 1 do
2778: LD_ADDR_VAR 0 2
2782: PUSH
2783: DOUBLE
2784: LD_INT 1
2786: DEC
2787: ST_TO_ADDR
2788: LD_INT 1
2790: PUSH
2791: FOR_TO
2792: IFFALSE 2847
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2794: LD_INT 0
2796: PPUSH
2797: LD_INT 1
2799: PPUSH
2800: CALL_OW 12
2804: PPUSH
2805: LD_INT 1
2807: PUSH
2808: LD_INT 3
2810: PUSH
2811: LD_INT 5
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: LIST
2818: PUSH
2819: LD_OWVAR 67
2823: ARRAY
2824: PPUSH
2825: CALL_OW 384
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2829: LD_ADDR_EXP 27
2833: PUSH
2834: LD_EXP 27
2838: PUSH
2839: CALL_OW 44
2843: ADD
2844: ST_TO_ADDR
// end ;
2845: GO 2791
2847: POP
2848: POP
// turrety := FilterUnitsInArea ( AmNorthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
2849: LD_ADDR_VAR 0 4
2853: PUSH
2854: LD_INT 11
2856: PPUSH
2857: LD_INT 2
2859: PUSH
2860: LD_INT 30
2862: PUSH
2863: LD_INT 31
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: LD_INT 30
2872: PUSH
2873: LD_INT 32
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: LIST
2884: PPUSH
2885: CALL_OW 70
2889: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_lab_half ] ] ) ;
2890: LD_ADDR_VAR 0 5
2894: PUSH
2895: LD_INT 11
2897: PPUSH
2898: LD_INT 30
2900: PUSH
2901: LD_INT 7
2903: PUSH
2904: EMPTY
2905: LIST
2906: LIST
2907: PUSH
2908: EMPTY
2909: LIST
2910: PPUSH
2911: CALL_OW 70
2915: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_factory ] ] ) ;
2916: LD_ADDR_VAR 0 6
2920: PUSH
2921: LD_INT 11
2923: PPUSH
2924: LD_INT 30
2926: PUSH
2927: LD_INT 3
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: EMPTY
2935: LIST
2936: PPUSH
2937: CALL_OW 70
2941: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
2942: LD_ADDR_VAR 0 7
2946: PUSH
2947: LD_INT 11
2949: PPUSH
2950: LD_INT 30
2952: PUSH
2953: LD_INT 4
2955: PUSH
2956: EMPTY
2957: LIST
2958: LIST
2959: PUSH
2960: EMPTY
2961: LIST
2962: PPUSH
2963: CALL_OW 70
2967: ST_TO_ADDR
// y := 1 ;
2968: LD_ADDR_VAR 0 3
2972: PUSH
2973: LD_INT 1
2975: ST_TO_ADDR
// for i in AmNorthPersonel do
2976: LD_ADDR_VAR 0 2
2980: PUSH
2981: LD_EXP 27
2985: PUSH
2986: FOR_IN
2987: IFFALSE 3173
// begin PlaceUnitArea ( i , AmNorthArea , false ) ;
2989: LD_VAR 0 2
2993: PPUSH
2994: LD_INT 3
2996: PPUSH
2997: LD_INT 0
2999: PPUSH
3000: CALL_OW 49
// case GetClass ( i ) of 1 :
3004: LD_VAR 0 2
3008: PPUSH
3009: CALL_OW 257
3013: PUSH
3014: LD_INT 1
3016: DOUBLE
3017: EQUAL
3018: IFTRUE 3022
3020: GO 3089
3022: POP
// begin if y > 6 then
3023: LD_VAR 0 3
3027: PUSH
3028: LD_INT 6
3030: GREATER
3031: IFFALSE 3053
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
3033: LD_VAR 0 2
3037: PPUSH
3038: LD_VAR 0 7
3042: PUSH
3043: LD_INT 1
3045: ARRAY
3046: PPUSH
3047: CALL_OW 120
3051: GO 3073
// ComEnterUnit ( i , turrety [ y ] ) ;
3053: LD_VAR 0 2
3057: PPUSH
3058: LD_VAR 0 4
3062: PUSH
3063: LD_VAR 0 3
3067: ARRAY
3068: PPUSH
3069: CALL_OW 120
// y = y + 1 ;
3073: LD_ADDR_VAR 0 3
3077: PUSH
3078: LD_VAR 0 3
3082: PUSH
3083: LD_INT 1
3085: PLUS
3086: ST_TO_ADDR
// end ; 2 :
3087: GO 3171
3089: LD_INT 2
3091: DOUBLE
3092: EQUAL
3093: IFTRUE 3097
3095: GO 3112
3097: POP
// ComEnterUnit ( i , AmDep1 ) ; 3 :
3098: LD_VAR 0 2
3102: PPUSH
3103: LD_INT 1
3105: PPUSH
3106: CALL_OW 120
3110: GO 3171
3112: LD_INT 3
3114: DOUBLE
3115: EQUAL
3116: IFTRUE 3120
3118: GO 3141
3120: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3121: LD_VAR 0 2
3125: PPUSH
3126: LD_VAR 0 6
3130: PUSH
3131: LD_INT 1
3133: ARRAY
3134: PPUSH
3135: CALL_OW 120
3139: GO 3171
3141: LD_INT 4
3143: DOUBLE
3144: EQUAL
3145: IFTRUE 3149
3147: GO 3170
3149: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3150: LD_VAR 0 2
3154: PPUSH
3155: LD_VAR 0 5
3159: PUSH
3160: LD_INT 1
3162: ARRAY
3163: PPUSH
3164: CALL_OW 120
3168: GO 3171
3170: POP
// end ;
3171: GO 2986
3173: POP
3174: POP
// AmSouthPersonel := [ ] ;
3175: LD_ADDR_EXP 28
3179: PUSH
3180: EMPTY
3181: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3182: LD_ADDR_VAR 0 2
3186: PUSH
3187: DOUBLE
3188: LD_INT 1
3190: DEC
3191: ST_TO_ADDR
3192: LD_INT 4
3194: PUSH
3195: LD_INT 5
3197: PUSH
3198: LD_INT 6
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: LIST
3205: PUSH
3206: LD_OWVAR 67
3210: ARRAY
3211: PUSH
3212: FOR_TO
3213: IFFALSE 3268
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3215: LD_INT 0
3217: PPUSH
3218: LD_INT 1
3220: PPUSH
3221: CALL_OW 12
3225: PPUSH
3226: LD_INT 1
3228: PUSH
3229: LD_INT 3
3231: PUSH
3232: LD_INT 5
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: LIST
3239: PUSH
3240: LD_OWVAR 67
3244: ARRAY
3245: PPUSH
3246: CALL_OW 381
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3250: LD_ADDR_EXP 28
3254: PUSH
3255: LD_EXP 28
3259: PUSH
3260: CALL_OW 44
3264: ADD
3265: ST_TO_ADDR
// end ;
3266: GO 3212
3268: POP
3269: POP
// for i = 1 to 1 do
3270: LD_ADDR_VAR 0 2
3274: PUSH
3275: DOUBLE
3276: LD_INT 1
3278: DEC
3279: ST_TO_ADDR
3280: LD_INT 1
3282: PUSH
3283: FOR_TO
3284: IFFALSE 3339
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3286: LD_INT 0
3288: PPUSH
3289: LD_INT 1
3291: PPUSH
3292: CALL_OW 12
3296: PPUSH
3297: LD_INT 1
3299: PUSH
3300: LD_INT 3
3302: PUSH
3303: LD_INT 5
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: PUSH
3311: LD_OWVAR 67
3315: ARRAY
3316: PPUSH
3317: CALL_OW 382
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3321: LD_ADDR_EXP 28
3325: PUSH
3326: LD_EXP 28
3330: PUSH
3331: CALL_OW 44
3335: ADD
3336: ST_TO_ADDR
// end ;
3337: GO 3283
3339: POP
3340: POP
// for i = 1 to 2 do
3341: LD_ADDR_VAR 0 2
3345: PUSH
3346: DOUBLE
3347: LD_INT 1
3349: DEC
3350: ST_TO_ADDR
3351: LD_INT 2
3353: PUSH
3354: FOR_TO
3355: IFFALSE 3410
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3357: LD_INT 0
3359: PPUSH
3360: LD_INT 1
3362: PPUSH
3363: CALL_OW 12
3367: PPUSH
3368: LD_INT 1
3370: PUSH
3371: LD_INT 3
3373: PUSH
3374: LD_INT 5
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: PUSH
3382: LD_OWVAR 67
3386: ARRAY
3387: PPUSH
3388: CALL_OW 383
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3392: LD_ADDR_EXP 28
3396: PUSH
3397: LD_EXP 28
3401: PUSH
3402: CALL_OW 44
3406: ADD
3407: ST_TO_ADDR
// end ;
3408: GO 3354
3410: POP
3411: POP
// for i = 1 to 1 do
3412: LD_ADDR_VAR 0 2
3416: PUSH
3417: DOUBLE
3418: LD_INT 1
3420: DEC
3421: ST_TO_ADDR
3422: LD_INT 1
3424: PUSH
3425: FOR_TO
3426: IFFALSE 3481
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3428: LD_INT 0
3430: PPUSH
3431: LD_INT 1
3433: PPUSH
3434: CALL_OW 12
3438: PPUSH
3439: LD_INT 1
3441: PUSH
3442: LD_INT 3
3444: PUSH
3445: LD_INT 5
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: LIST
3452: PUSH
3453: LD_OWVAR 67
3457: ARRAY
3458: PPUSH
3459: CALL_OW 384
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3463: LD_ADDR_EXP 28
3467: PUSH
3468: LD_EXP 28
3472: PUSH
3473: CALL_OW 44
3477: ADD
3478: ST_TO_ADDR
// end ;
3479: GO 3425
3481: POP
3482: POP
// turrety := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
3483: LD_ADDR_VAR 0 4
3487: PUSH
3488: LD_INT 13
3490: PPUSH
3491: LD_INT 2
3493: PUSH
3494: LD_INT 30
3496: PUSH
3497: LD_INT 31
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: LD_INT 30
3506: PUSH
3507: LD_INT 32
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: EMPTY
3515: LIST
3516: LIST
3517: LIST
3518: PPUSH
3519: CALL_OW 70
3523: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_lab ] ] ) ;
3524: LD_ADDR_VAR 0 5
3528: PUSH
3529: LD_INT 13
3531: PPUSH
3532: LD_INT 30
3534: PUSH
3535: LD_INT 6
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: EMPTY
3543: LIST
3544: PPUSH
3545: CALL_OW 70
3549: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_workshop ] ] ) ;
3550: LD_ADDR_VAR 0 6
3554: PUSH
3555: LD_INT 13
3557: PPUSH
3558: LD_INT 2
3560: PUSH
3561: LD_INT 30
3563: PUSH
3564: LD_INT 3
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: LD_INT 30
3573: PUSH
3574: LD_INT 2
3576: PUSH
3577: EMPTY
3578: LIST
3579: LIST
3580: PUSH
3581: EMPTY
3582: LIST
3583: LIST
3584: LIST
3585: PPUSH
3586: CALL_OW 70
3590: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
3591: LD_ADDR_VAR 0 7
3595: PUSH
3596: LD_INT 13
3598: PPUSH
3599: LD_INT 30
3601: PUSH
3602: LD_INT 4
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PUSH
3609: EMPTY
3610: LIST
3611: PPUSH
3612: CALL_OW 70
3616: ST_TO_ADDR
// y := 1 ;
3617: LD_ADDR_VAR 0 3
3621: PUSH
3622: LD_INT 1
3624: ST_TO_ADDR
// for i in AmSouthPersonel do
3625: LD_ADDR_VAR 0 2
3629: PUSH
3630: LD_EXP 28
3634: PUSH
3635: FOR_IN
3636: IFFALSE 3822
// begin PlaceUnitArea ( i , AmSouthArea , false ) ;
3638: LD_VAR 0 2
3642: PPUSH
3643: LD_INT 12
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL_OW 49
// case GetClass ( i ) of 1 :
3653: LD_VAR 0 2
3657: PPUSH
3658: CALL_OW 257
3662: PUSH
3663: LD_INT 1
3665: DOUBLE
3666: EQUAL
3667: IFTRUE 3671
3669: GO 3738
3671: POP
// begin if y > 2 then
3672: LD_VAR 0 3
3676: PUSH
3677: LD_INT 2
3679: GREATER
3680: IFFALSE 3702
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
3682: LD_VAR 0 2
3686: PPUSH
3687: LD_VAR 0 7
3691: PUSH
3692: LD_INT 1
3694: ARRAY
3695: PPUSH
3696: CALL_OW 120
3700: GO 3722
// ComEnterUnit ( i , turrety [ y ] ) ;
3702: LD_VAR 0 2
3706: PPUSH
3707: LD_VAR 0 4
3711: PUSH
3712: LD_VAR 0 3
3716: ARRAY
3717: PPUSH
3718: CALL_OW 120
// y = y + 1 ;
3722: LD_ADDR_VAR 0 3
3726: PUSH
3727: LD_VAR 0 3
3731: PUSH
3732: LD_INT 1
3734: PLUS
3735: ST_TO_ADDR
// end ; 2 :
3736: GO 3820
3738: LD_INT 2
3740: DOUBLE
3741: EQUAL
3742: IFTRUE 3746
3744: GO 3761
3746: POP
// ComEnterUnit ( i , AmDep2 ) ; 3 :
3747: LD_VAR 0 2
3751: PPUSH
3752: LD_INT 47
3754: PPUSH
3755: CALL_OW 120
3759: GO 3820
3761: LD_INT 3
3763: DOUBLE
3764: EQUAL
3765: IFTRUE 3769
3767: GO 3790
3769: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3770: LD_VAR 0 2
3774: PPUSH
3775: LD_VAR 0 6
3779: PUSH
3780: LD_INT 1
3782: ARRAY
3783: PPUSH
3784: CALL_OW 120
3788: GO 3820
3790: LD_INT 4
3792: DOUBLE
3793: EQUAL
3794: IFTRUE 3798
3796: GO 3819
3798: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3799: LD_VAR 0 2
3803: PPUSH
3804: LD_VAR 0 5
3808: PUSH
3809: LD_INT 1
3811: ARRAY
3812: PPUSH
3813: CALL_OW 120
3817: GO 3820
3819: POP
// end ;
3820: GO 3635
3822: POP
3823: POP
// end ;
3824: LD_VAR 0 1
3828: RET
// every 0 0$1 do var enemy , attacker ;
3829: GO 3831
3831: DISABLE
3832: LD_INT 0
3834: PPUSH
3835: PPUSH
// begin enable ;
3836: ENABLE
// enemy = Filterallunits ( [ f_side , 3 ] ) ;
3837: LD_ADDR_VAR 0 1
3841: PUSH
3842: LD_INT 22
3844: PUSH
3845: LD_INT 3
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: PPUSH
3852: CALL_OW 69
3856: ST_TO_ADDR
// for attacker in AmConvoysVehicles do
3857: LD_ADDR_VAR 0 2
3861: PUSH
3862: LD_EXP 26
3866: PUSH
3867: FOR_IN
3868: IFFALSE 3896
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
3870: LD_VAR 0 2
3874: PPUSH
3875: LD_VAR 0 1
3879: PPUSH
3880: LD_VAR 0 2
3884: PPUSH
3885: CALL_OW 74
3889: PPUSH
3890: CALL_OW 115
3894: GO 3867
3896: POP
3897: POP
// end ;
3898: PPOPN 2
3900: END
// every 0 0$1 do
3901: GO 3903
3903: DISABLE
// begin enable ;
3904: ENABLE
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
3905: LD_EXP 25
3909: PPUSH
3910: LD_INT 157
3912: PPUSH
3913: LD_INT 97
3915: PPUSH
3916: CALL_OW 114
// end ;
3920: END
// export function AmAttacks ; var i ; begin
3921: LD_INT 0
3923: PPUSH
3924: PPUSH
// Uc_Side = 4 ;
3925: LD_ADDR_OWVAR 20
3929: PUSH
3930: LD_INT 4
3932: ST_TO_ADDR
// Uc_Nation = 1 ;
3933: LD_ADDR_OWVAR 21
3937: PUSH
3938: LD_INT 1
3940: ST_TO_ADDR
// Wait ( 4 4$30 ) ;
3941: LD_INT 9450
3943: PPUSH
3944: CALL_OW 67
// first_attack_spawned = true ;
3948: LD_ADDR_EXP 53
3952: PUSH
3953: LD_INT 1
3955: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
3956: LD_ADDR_VAR 0 2
3960: PUSH
3961: DOUBLE
3962: LD_INT 1
3964: DEC
3965: ST_TO_ADDR
3966: LD_INT 2
3968: PUSH
3969: LD_INT 2
3971: PUSH
3972: LD_INT 3
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: LIST
3979: PUSH
3980: LD_OWVAR 67
3984: ARRAY
3985: PUSH
3986: FOR_TO
3987: IFFALSE 4067
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
3989: LD_INT 0
3991: PPUSH
3992: LD_INT 1
3994: PPUSH
3995: CALL_OW 12
3999: PPUSH
4000: LD_INT 1
4002: PUSH
4003: LD_INT 2
4005: PUSH
4006: LD_INT 3
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: LIST
4013: PUSH
4014: LD_OWVAR 67
4018: ARRAY
4019: PPUSH
4020: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
4024: LD_ADDR_EXP 37
4028: PUSH
4029: CALL_OW 44
4033: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
4034: LD_ADDR_EXP 25
4038: PUSH
4039: LD_EXP 25
4043: PUSH
4044: LD_EXP 37
4048: ADD
4049: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4050: LD_EXP 37
4054: PPUSH
4055: LD_INT 1
4057: PPUSH
4058: LD_INT 0
4060: PPUSH
4061: CALL_OW 49
// end ;
4065: GO 3986
4067: POP
4068: POP
// for i = 1 to [ 0 , 1 , 1 ] [ Difficulty ] do
4069: LD_ADDR_VAR 0 2
4073: PUSH
4074: DOUBLE
4075: LD_INT 1
4077: DEC
4078: ST_TO_ADDR
4079: LD_INT 0
4081: PUSH
4082: LD_INT 1
4084: PUSH
4085: LD_INT 1
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: LIST
4092: PUSH
4093: LD_OWVAR 67
4097: ARRAY
4098: PUSH
4099: FOR_TO
4100: IFFALSE 4180
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4102: LD_INT 0
4104: PPUSH
4105: LD_INT 1
4107: PPUSH
4108: CALL_OW 12
4112: PPUSH
4113: LD_INT 1
4115: PUSH
4116: LD_INT 2
4118: PUSH
4119: LD_INT 3
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: LIST
4126: PUSH
4127: LD_OWVAR 67
4131: ARRAY
4132: PPUSH
4133: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4137: LD_ADDR_EXP 38
4141: PUSH
4142: CALL_OW 44
4146: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4147: LD_ADDR_EXP 25
4151: PUSH
4152: LD_EXP 25
4156: PUSH
4157: LD_EXP 38
4161: ADD
4162: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4163: LD_EXP 38
4167: PPUSH
4168: LD_INT 1
4170: PPUSH
4171: LD_INT 0
4173: PPUSH
4174: CALL_OW 49
// end ;
4178: GO 4099
4180: POP
4181: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4182: LD_ADDR_VAR 0 2
4186: PUSH
4187: DOUBLE
4188: LD_INT 1
4190: DEC
4191: ST_TO_ADDR
4192: LD_INT 1
4194: PUSH
4195: LD_INT 1
4197: PUSH
4198: LD_INT 1
4200: PUSH
4201: EMPTY
4202: LIST
4203: LIST
4204: LIST
4205: PUSH
4206: LD_OWVAR 67
4210: ARRAY
4211: PUSH
4212: FOR_TO
4213: IFFALSE 4293
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4215: LD_INT 0
4217: PPUSH
4218: LD_INT 1
4220: PPUSH
4221: CALL_OW 12
4225: PPUSH
4226: LD_INT 1
4228: PUSH
4229: LD_INT 2
4231: PUSH
4232: LD_INT 3
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: LIST
4239: PUSH
4240: LD_OWVAR 67
4244: ARRAY
4245: PPUSH
4246: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4250: LD_ADDR_EXP 40
4254: PUSH
4255: CALL_OW 44
4259: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4260: LD_ADDR_EXP 25
4264: PUSH
4265: LD_EXP 25
4269: PUSH
4270: LD_EXP 40
4274: ADD
4275: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4276: LD_EXP 40
4280: PPUSH
4281: LD_INT 1
4283: PPUSH
4284: LD_INT 0
4286: PPUSH
4287: CALL_OW 49
// end ;
4291: GO 4212
4293: POP
4294: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4295: LD_ADDR_VAR 0 2
4299: PUSH
4300: DOUBLE
4301: LD_INT 1
4303: DEC
4304: ST_TO_ADDR
4305: LD_INT 1
4307: PUSH
4308: LD_INT 1
4310: PUSH
4311: LD_INT 1
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: PUSH
4319: LD_OWVAR 67
4323: ARRAY
4324: PUSH
4325: FOR_TO
4326: IFFALSE 4500
// begin uc_side := 4 ;
4328: LD_ADDR_OWVAR 20
4332: PUSH
4333: LD_INT 4
4335: ST_TO_ADDR
// uc_nation := 1 ;
4336: LD_ADDR_OWVAR 21
4340: PUSH
4341: LD_INT 1
4343: ST_TO_ADDR
// vc_control = control_manual ;
4344: LD_ADDR_OWVAR 38
4348: PUSH
4349: LD_INT 1
4351: ST_TO_ADDR
// vc_engine = engine_combustion ;
4352: LD_ADDR_OWVAR 39
4356: PUSH
4357: LD_INT 1
4359: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4360: LD_ADDR_OWVAR 37
4364: PUSH
4365: LD_INT 2
4367: PPUSH
4368: LD_INT 4
4370: PPUSH
4371: CALL_OW 12
4375: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4376: LD_ADDR_OWVAR 40
4380: PUSH
4381: LD_INT 3
4383: PPUSH
4384: LD_INT 5
4386: PPUSH
4387: CALL_OW 12
4391: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4392: LD_ADDR_EXP 41
4396: PUSH
4397: CALL_OW 45
4401: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4402: LD_INT 0
4404: PPUSH
4405: LD_INT 1
4407: PPUSH
4408: CALL_OW 12
4412: PPUSH
4413: LD_INT 1
4415: PUSH
4416: LD_INT 2
4418: PUSH
4419: LD_INT 3
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PPUSH
4433: CALL_OW 383
// AmMechConvoy := CreateHuman ;
4437: LD_ADDR_EXP 39
4441: PUSH
4442: CALL_OW 44
4446: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
4447: LD_EXP 39
4451: PPUSH
4452: LD_EXP 41
4456: PPUSH
4457: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
4461: LD_EXP 41
4465: PPUSH
4466: LD_INT 14
4468: PPUSH
4469: LD_INT 0
4471: PPUSH
4472: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
4476: LD_ADDR_EXP 26
4480: PUSH
4481: LD_EXP 26
4485: PUSH
4486: LD_EXP 39
4490: ADD
4491: PUSH
4492: LD_EXP 41
4496: ADD
4497: ST_TO_ADDR
// end ;
4498: GO 4325
4500: POP
4501: POP
// Wait ( 5 5$45 ) ;
4502: LD_INT 12075
4504: PPUSH
4505: CALL_OW 67
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4509: LD_ADDR_VAR 0 2
4513: PUSH
4514: DOUBLE
4515: LD_INT 1
4517: DEC
4518: ST_TO_ADDR
4519: LD_INT 2
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: LD_INT 4
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: LIST
4532: PUSH
4533: LD_OWVAR 67
4537: ARRAY
4538: PUSH
4539: FOR_TO
4540: IFFALSE 4620
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4542: LD_INT 0
4544: PPUSH
4545: LD_INT 1
4547: PPUSH
4548: CALL_OW 12
4552: PPUSH
4553: LD_INT 1
4555: PUSH
4556: LD_INT 2
4558: PUSH
4559: LD_INT 4
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: PUSH
4567: LD_OWVAR 67
4571: ARRAY
4572: PPUSH
4573: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
4577: LD_ADDR_EXP 37
4581: PUSH
4582: CALL_OW 44
4586: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
4587: LD_ADDR_EXP 25
4591: PUSH
4592: LD_EXP 25
4596: PUSH
4597: LD_EXP 37
4601: ADD
4602: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4603: LD_EXP 37
4607: PPUSH
4608: LD_INT 1
4610: PPUSH
4611: LD_INT 0
4613: PPUSH
4614: CALL_OW 49
// end ;
4618: GO 4539
4620: POP
4621: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4622: LD_ADDR_VAR 0 2
4626: PUSH
4627: DOUBLE
4628: LD_INT 1
4630: DEC
4631: ST_TO_ADDR
4632: LD_INT 1
4634: PUSH
4635: LD_INT 2
4637: PUSH
4638: LD_INT 2
4640: PUSH
4641: EMPTY
4642: LIST
4643: LIST
4644: LIST
4645: PUSH
4646: LD_OWVAR 67
4650: ARRAY
4651: PUSH
4652: FOR_TO
4653: IFFALSE 4733
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4655: LD_INT 0
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: CALL_OW 12
4665: PPUSH
4666: LD_INT 1
4668: PUSH
4669: LD_INT 2
4671: PUSH
4672: LD_INT 4
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_OWVAR 67
4684: ARRAY
4685: PPUSH
4686: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4690: LD_ADDR_EXP 38
4694: PUSH
4695: CALL_OW 44
4699: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4700: LD_ADDR_EXP 25
4704: PUSH
4705: LD_EXP 25
4709: PUSH
4710: LD_EXP 38
4714: ADD
4715: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4716: LD_EXP 38
4720: PPUSH
4721: LD_INT 1
4723: PPUSH
4724: LD_INT 0
4726: PPUSH
4727: CALL_OW 49
// end ;
4731: GO 4652
4733: POP
4734: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4735: LD_ADDR_VAR 0 2
4739: PUSH
4740: DOUBLE
4741: LD_INT 1
4743: DEC
4744: ST_TO_ADDR
4745: LD_INT 1
4747: PUSH
4748: LD_INT 1
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: LIST
4758: PUSH
4759: LD_OWVAR 67
4763: ARRAY
4764: PUSH
4765: FOR_TO
4766: IFFALSE 4846
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4768: LD_INT 0
4770: PPUSH
4771: LD_INT 1
4773: PPUSH
4774: CALL_OW 12
4778: PPUSH
4779: LD_INT 1
4781: PUSH
4782: LD_INT 2
4784: PUSH
4785: LD_INT 4
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: LIST
4792: PUSH
4793: LD_OWVAR 67
4797: ARRAY
4798: PPUSH
4799: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4803: LD_ADDR_EXP 40
4807: PUSH
4808: CALL_OW 44
4812: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4813: LD_ADDR_EXP 25
4817: PUSH
4818: LD_EXP 25
4822: PUSH
4823: LD_EXP 40
4827: ADD
4828: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4829: LD_EXP 40
4833: PPUSH
4834: LD_INT 1
4836: PPUSH
4837: LD_INT 0
4839: PPUSH
4840: CALL_OW 49
// end ;
4844: GO 4765
4846: POP
4847: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4848: LD_ADDR_VAR 0 2
4852: PUSH
4853: DOUBLE
4854: LD_INT 1
4856: DEC
4857: ST_TO_ADDR
4858: LD_INT 1
4860: PUSH
4861: LD_INT 2
4863: PUSH
4864: LD_INT 2
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: LIST
4871: PUSH
4872: LD_OWVAR 67
4876: ARRAY
4877: PUSH
4878: FOR_TO
4879: IFFALSE 5053
// begin uc_side := 4 ;
4881: LD_ADDR_OWVAR 20
4885: PUSH
4886: LD_INT 4
4888: ST_TO_ADDR
// uc_nation := 1 ;
4889: LD_ADDR_OWVAR 21
4893: PUSH
4894: LD_INT 1
4896: ST_TO_ADDR
// vc_control = control_manual ;
4897: LD_ADDR_OWVAR 38
4901: PUSH
4902: LD_INT 1
4904: ST_TO_ADDR
// vc_engine = engine_combustion ;
4905: LD_ADDR_OWVAR 39
4909: PUSH
4910: LD_INT 1
4912: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4913: LD_ADDR_OWVAR 37
4917: PUSH
4918: LD_INT 2
4920: PPUSH
4921: LD_INT 4
4923: PPUSH
4924: CALL_OW 12
4928: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4929: LD_ADDR_OWVAR 40
4933: PUSH
4934: LD_INT 3
4936: PPUSH
4937: LD_INT 5
4939: PPUSH
4940: CALL_OW 12
4944: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4945: LD_ADDR_EXP 41
4949: PUSH
4950: CALL_OW 45
4954: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4955: LD_INT 0
4957: PPUSH
4958: LD_INT 1
4960: PPUSH
4961: CALL_OW 12
4965: PPUSH
4966: LD_INT 1
4968: PUSH
4969: LD_INT 2
4971: PUSH
4972: LD_INT 4
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: LIST
4979: PUSH
4980: LD_OWVAR 67
4984: ARRAY
4985: PPUSH
4986: CALL_OW 383
// AmMechConvoy := CreateHuman ;
4990: LD_ADDR_EXP 39
4994: PUSH
4995: CALL_OW 44
4999: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
5000: LD_EXP 39
5004: PPUSH
5005: LD_EXP 41
5009: PPUSH
5010: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
5014: LD_EXP 41
5018: PPUSH
5019: LD_INT 14
5021: PPUSH
5022: LD_INT 0
5024: PPUSH
5025: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
5029: LD_ADDR_EXP 26
5033: PUSH
5034: LD_EXP 26
5038: PUSH
5039: LD_EXP 39
5043: ADD
5044: PUSH
5045: LD_EXP 41
5049: ADD
5050: ST_TO_ADDR
// end ;
5051: GO 4878
5053: POP
5054: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5055: LD_EXP 25
5059: PPUSH
5060: LD_INT 157
5062: PPUSH
5063: LD_INT 97
5065: PPUSH
5066: CALL_OW 114
// Wait ( 5 5$0 ) ;
5070: LD_INT 10500
5072: PPUSH
5073: CALL_OW 67
// for i = 1 to [ 3 , 4 , 6 ] [ Difficulty ] do
5077: LD_ADDR_VAR 0 2
5081: PUSH
5082: DOUBLE
5083: LD_INT 1
5085: DEC
5086: ST_TO_ADDR
5087: LD_INT 3
5089: PUSH
5090: LD_INT 4
5092: PUSH
5093: LD_INT 6
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: PUSH
5101: LD_OWVAR 67
5105: ARRAY
5106: PUSH
5107: FOR_TO
5108: IFFALSE 5188
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5110: LD_INT 0
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: CALL_OW 12
5120: PPUSH
5121: LD_INT 1
5123: PUSH
5124: LD_INT 2
5126: PUSH
5127: LD_INT 4
5129: PUSH
5130: EMPTY
5131: LIST
5132: LIST
5133: LIST
5134: PUSH
5135: LD_OWVAR 67
5139: ARRAY
5140: PPUSH
5141: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5145: LD_ADDR_EXP 37
5149: PUSH
5150: CALL_OW 44
5154: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5155: LD_ADDR_EXP 25
5159: PUSH
5160: LD_EXP 25
5164: PUSH
5165: LD_EXP 37
5169: ADD
5170: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5171: LD_EXP 37
5175: PPUSH
5176: LD_INT 1
5178: PPUSH
5179: LD_INT 0
5181: PPUSH
5182: CALL_OW 49
// end ;
5186: GO 5107
5188: POP
5189: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
5190: LD_ADDR_VAR 0 2
5194: PUSH
5195: DOUBLE
5196: LD_INT 1
5198: DEC
5199: ST_TO_ADDR
5200: LD_INT 1
5202: PUSH
5203: LD_INT 2
5205: PUSH
5206: LD_INT 2
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: PUSH
5214: LD_OWVAR 67
5218: ARRAY
5219: PUSH
5220: FOR_TO
5221: IFFALSE 5301
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5223: LD_INT 0
5225: PPUSH
5226: LD_INT 1
5228: PPUSH
5229: CALL_OW 12
5233: PPUSH
5234: LD_INT 1
5236: PUSH
5237: LD_INT 2
5239: PUSH
5240: LD_INT 4
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: LIST
5247: PUSH
5248: LD_OWVAR 67
5252: ARRAY
5253: PPUSH
5254: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5258: LD_ADDR_EXP 38
5262: PUSH
5263: CALL_OW 44
5267: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5268: LD_ADDR_EXP 25
5272: PUSH
5273: LD_EXP 25
5277: PUSH
5278: LD_EXP 38
5282: ADD
5283: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5284: LD_EXP 38
5288: PPUSH
5289: LD_INT 1
5291: PPUSH
5292: LD_INT 0
5294: PPUSH
5295: CALL_OW 49
// end ;
5299: GO 5220
5301: POP
5302: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5303: LD_ADDR_VAR 0 2
5307: PUSH
5308: DOUBLE
5309: LD_INT 1
5311: DEC
5312: ST_TO_ADDR
5313: LD_INT 1
5315: PUSH
5316: LD_INT 1
5318: PUSH
5319: LD_INT 2
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: PUSH
5327: LD_OWVAR 67
5331: ARRAY
5332: PUSH
5333: FOR_TO
5334: IFFALSE 5414
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5336: LD_INT 0
5338: PPUSH
5339: LD_INT 1
5341: PPUSH
5342: CALL_OW 12
5346: PPUSH
5347: LD_INT 1
5349: PUSH
5350: LD_INT 2
5352: PUSH
5353: LD_INT 4
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: LIST
5360: PUSH
5361: LD_OWVAR 67
5365: ARRAY
5366: PPUSH
5367: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5371: LD_ADDR_EXP 40
5375: PUSH
5376: CALL_OW 44
5380: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5381: LD_ADDR_EXP 25
5385: PUSH
5386: LD_EXP 25
5390: PUSH
5391: LD_EXP 40
5395: ADD
5396: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5397: LD_EXP 40
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: LD_INT 0
5407: PPUSH
5408: CALL_OW 49
// end ;
5412: GO 5333
5414: POP
5415: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5416: LD_ADDR_VAR 0 2
5420: PUSH
5421: DOUBLE
5422: LD_INT 1
5424: DEC
5425: ST_TO_ADDR
5426: LD_INT 1
5428: PUSH
5429: LD_INT 2
5431: PUSH
5432: LD_INT 3
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: PUSH
5440: LD_OWVAR 67
5444: ARRAY
5445: PUSH
5446: FOR_TO
5447: IFFALSE 5621
// begin uc_side := 4 ;
5449: LD_ADDR_OWVAR 20
5453: PUSH
5454: LD_INT 4
5456: ST_TO_ADDR
// uc_nation := 1 ;
5457: LD_ADDR_OWVAR 21
5461: PUSH
5462: LD_INT 1
5464: ST_TO_ADDR
// vc_control = control_manual ;
5465: LD_ADDR_OWVAR 38
5469: PUSH
5470: LD_INT 1
5472: ST_TO_ADDR
// vc_engine = engine_combustion ;
5473: LD_ADDR_OWVAR 39
5477: PUSH
5478: LD_INT 1
5480: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
5481: LD_ADDR_OWVAR 37
5485: PUSH
5486: LD_INT 2
5488: PPUSH
5489: LD_INT 4
5491: PPUSH
5492: CALL_OW 12
5496: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
5497: LD_ADDR_OWVAR 40
5501: PUSH
5502: LD_INT 3
5504: PPUSH
5505: LD_INT 5
5507: PPUSH
5508: CALL_OW 12
5512: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
5513: LD_ADDR_EXP 41
5517: PUSH
5518: CALL_OW 45
5522: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5523: LD_INT 0
5525: PPUSH
5526: LD_INT 1
5528: PPUSH
5529: CALL_OW 12
5533: PPUSH
5534: LD_INT 1
5536: PUSH
5537: LD_INT 2
5539: PUSH
5540: LD_INT 4
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: PUSH
5548: LD_OWVAR 67
5552: ARRAY
5553: PPUSH
5554: CALL_OW 383
// AmMechConvoy := CreateHuman ;
5558: LD_ADDR_EXP 39
5562: PUSH
5563: CALL_OW 44
5567: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
5568: LD_EXP 39
5572: PPUSH
5573: LD_EXP 41
5577: PPUSH
5578: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
5582: LD_EXP 41
5586: PPUSH
5587: LD_INT 14
5589: PPUSH
5590: LD_INT 0
5592: PPUSH
5593: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
5597: LD_ADDR_EXP 26
5601: PUSH
5602: LD_EXP 26
5606: PUSH
5607: LD_EXP 39
5611: ADD
5612: PUSH
5613: LD_EXP 41
5617: ADD
5618: ST_TO_ADDR
// end ;
5619: GO 5446
5621: POP
5622: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5623: LD_EXP 25
5627: PPUSH
5628: LD_INT 157
5630: PPUSH
5631: LD_INT 97
5633: PPUSH
5634: CALL_OW 114
// Wait ( 5 5$0 ) ;
5638: LD_INT 10500
5640: PPUSH
5641: CALL_OW 67
// for i = 1 to [ 3 , 5 , 7 ] [ Difficulty ] do
5645: LD_ADDR_VAR 0 2
5649: PUSH
5650: DOUBLE
5651: LD_INT 1
5653: DEC
5654: ST_TO_ADDR
5655: LD_INT 3
5657: PUSH
5658: LD_INT 5
5660: PUSH
5661: LD_INT 7
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: LIST
5668: PUSH
5669: LD_OWVAR 67
5673: ARRAY
5674: PUSH
5675: FOR_TO
5676: IFFALSE 5756
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5678: LD_INT 0
5680: PPUSH
5681: LD_INT 1
5683: PPUSH
5684: CALL_OW 12
5688: PPUSH
5689: LD_INT 1
5691: PUSH
5692: LD_INT 2
5694: PUSH
5695: LD_INT 4
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: LD_OWVAR 67
5707: ARRAY
5708: PPUSH
5709: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5713: LD_ADDR_EXP 37
5717: PUSH
5718: CALL_OW 44
5722: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5723: LD_ADDR_EXP 25
5727: PUSH
5728: LD_EXP 25
5732: PUSH
5733: LD_EXP 37
5737: ADD
5738: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5739: LD_EXP 37
5743: PPUSH
5744: LD_INT 1
5746: PPUSH
5747: LD_INT 0
5749: PPUSH
5750: CALL_OW 49
// end ;
5754: GO 5675
5756: POP
5757: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5758: LD_ADDR_VAR 0 2
5762: PUSH
5763: DOUBLE
5764: LD_INT 1
5766: DEC
5767: ST_TO_ADDR
5768: LD_INT 1
5770: PUSH
5771: LD_INT 2
5773: PUSH
5774: LD_INT 3
5776: PUSH
5777: EMPTY
5778: LIST
5779: LIST
5780: LIST
5781: PUSH
5782: LD_OWVAR 67
5786: ARRAY
5787: PUSH
5788: FOR_TO
5789: IFFALSE 5869
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5791: LD_INT 0
5793: PPUSH
5794: LD_INT 1
5796: PPUSH
5797: CALL_OW 12
5801: PPUSH
5802: LD_INT 1
5804: PUSH
5805: LD_INT 2
5807: PUSH
5808: LD_INT 4
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: LIST
5815: PUSH
5816: LD_OWVAR 67
5820: ARRAY
5821: PPUSH
5822: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5826: LD_ADDR_EXP 38
5830: PUSH
5831: CALL_OW 44
5835: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5836: LD_ADDR_EXP 25
5840: PUSH
5841: LD_EXP 25
5845: PUSH
5846: LD_EXP 38
5850: ADD
5851: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5852: LD_EXP 38
5856: PPUSH
5857: LD_INT 1
5859: PPUSH
5860: LD_INT 0
5862: PPUSH
5863: CALL_OW 49
// end ;
5867: GO 5788
5869: POP
5870: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5871: LD_ADDR_VAR 0 2
5875: PUSH
5876: DOUBLE
5877: LD_INT 1
5879: DEC
5880: ST_TO_ADDR
5881: LD_INT 1
5883: PUSH
5884: LD_INT 1
5886: PUSH
5887: LD_INT 2
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: LIST
5894: PUSH
5895: LD_OWVAR 67
5899: ARRAY
5900: PUSH
5901: FOR_TO
5902: IFFALSE 5982
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5904: LD_INT 0
5906: PPUSH
5907: LD_INT 1
5909: PPUSH
5910: CALL_OW 12
5914: PPUSH
5915: LD_INT 1
5917: PUSH
5918: LD_INT 2
5920: PUSH
5921: LD_INT 4
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: LIST
5928: PUSH
5929: LD_OWVAR 67
5933: ARRAY
5934: PPUSH
5935: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5939: LD_ADDR_EXP 40
5943: PUSH
5944: CALL_OW 44
5948: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5949: LD_ADDR_EXP 25
5953: PUSH
5954: LD_EXP 25
5958: PUSH
5959: LD_EXP 40
5963: ADD
5964: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5965: LD_EXP 40
5969: PPUSH
5970: LD_INT 1
5972: PPUSH
5973: LD_INT 0
5975: PPUSH
5976: CALL_OW 49
// end ;
5980: GO 5901
5982: POP
5983: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5984: LD_ADDR_VAR 0 2
5988: PUSH
5989: DOUBLE
5990: LD_INT 1
5992: DEC
5993: ST_TO_ADDR
5994: LD_INT 1
5996: PUSH
5997: LD_INT 2
5999: PUSH
6000: LD_INT 3
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: LIST
6007: PUSH
6008: LD_OWVAR 67
6012: ARRAY
6013: PUSH
6014: FOR_TO
6015: IFFALSE 6189
// begin uc_side := 4 ;
6017: LD_ADDR_OWVAR 20
6021: PUSH
6022: LD_INT 4
6024: ST_TO_ADDR
// uc_nation := 1 ;
6025: LD_ADDR_OWVAR 21
6029: PUSH
6030: LD_INT 1
6032: ST_TO_ADDR
// vc_control = control_manual ;
6033: LD_ADDR_OWVAR 38
6037: PUSH
6038: LD_INT 1
6040: ST_TO_ADDR
// vc_engine = engine_combustion ;
6041: LD_ADDR_OWVAR 39
6045: PUSH
6046: LD_INT 1
6048: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6049: LD_ADDR_OWVAR 37
6053: PUSH
6054: LD_INT 2
6056: PPUSH
6057: LD_INT 4
6059: PPUSH
6060: CALL_OW 12
6064: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6065: LD_ADDR_OWVAR 40
6069: PUSH
6070: LD_INT 3
6072: PPUSH
6073: LD_INT 5
6075: PPUSH
6076: CALL_OW 12
6080: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6081: LD_ADDR_EXP 41
6085: PUSH
6086: CALL_OW 45
6090: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6091: LD_INT 0
6093: PPUSH
6094: LD_INT 1
6096: PPUSH
6097: CALL_OW 12
6101: PPUSH
6102: LD_INT 1
6104: PUSH
6105: LD_INT 2
6107: PUSH
6108: LD_INT 4
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: LD_OWVAR 67
6120: ARRAY
6121: PPUSH
6122: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6126: LD_ADDR_EXP 39
6130: PUSH
6131: CALL_OW 44
6135: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6136: LD_EXP 39
6140: PPUSH
6141: LD_EXP 41
6145: PPUSH
6146: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6150: LD_EXP 41
6154: PPUSH
6155: LD_INT 14
6157: PPUSH
6158: LD_INT 0
6160: PPUSH
6161: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6165: LD_ADDR_EXP 26
6169: PUSH
6170: LD_EXP 26
6174: PUSH
6175: LD_EXP 39
6179: ADD
6180: PUSH
6181: LD_EXP 41
6185: ADD
6186: ST_TO_ADDR
// end ;
6187: GO 6014
6189: POP
6190: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
6191: LD_EXP 25
6195: PPUSH
6196: LD_INT 157
6198: PPUSH
6199: LD_INT 97
6201: PPUSH
6202: CALL_OW 114
// Wait ( 5 5$0 ) ;
6206: LD_INT 10500
6208: PPUSH
6209: CALL_OW 67
// for i = 1 to [ 4 , 6 , 10 ] [ Difficulty ] do
6213: LD_ADDR_VAR 0 2
6217: PUSH
6218: DOUBLE
6219: LD_INT 1
6221: DEC
6222: ST_TO_ADDR
6223: LD_INT 4
6225: PUSH
6226: LD_INT 6
6228: PUSH
6229: LD_INT 10
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: PUSH
6237: LD_OWVAR 67
6241: ARRAY
6242: PUSH
6243: FOR_TO
6244: IFFALSE 6324
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6246: LD_INT 0
6248: PPUSH
6249: LD_INT 1
6251: PPUSH
6252: CALL_OW 12
6256: PPUSH
6257: LD_INT 1
6259: PUSH
6260: LD_INT 2
6262: PUSH
6263: LD_INT 4
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: LIST
6270: PUSH
6271: LD_OWVAR 67
6275: ARRAY
6276: PPUSH
6277: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
6281: LD_ADDR_EXP 37
6285: PUSH
6286: CALL_OW 44
6290: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
6291: LD_ADDR_EXP 25
6295: PUSH
6296: LD_EXP 25
6300: PUSH
6301: LD_EXP 37
6305: ADD
6306: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
6307: LD_EXP 37
6311: PPUSH
6312: LD_INT 1
6314: PPUSH
6315: LD_INT 0
6317: PPUSH
6318: CALL_OW 49
// end ;
6322: GO 6243
6324: POP
6325: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
6326: LD_ADDR_VAR 0 2
6330: PUSH
6331: DOUBLE
6332: LD_INT 1
6334: DEC
6335: ST_TO_ADDR
6336: LD_INT 1
6338: PUSH
6339: LD_INT 2
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: LIST
6349: PUSH
6350: LD_OWVAR 67
6354: ARRAY
6355: PUSH
6356: FOR_TO
6357: IFFALSE 6437
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6359: LD_INT 0
6361: PPUSH
6362: LD_INT 1
6364: PPUSH
6365: CALL_OW 12
6369: PPUSH
6370: LD_INT 1
6372: PUSH
6373: LD_INT 2
6375: PUSH
6376: LD_INT 4
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: PUSH
6384: LD_OWVAR 67
6388: ARRAY
6389: PPUSH
6390: CALL_OW 384
// AmSciConvoy = CreateHuman ;
6394: LD_ADDR_EXP 38
6398: PUSH
6399: CALL_OW 44
6403: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
6404: LD_ADDR_EXP 25
6408: PUSH
6409: LD_EXP 25
6413: PUSH
6414: LD_EXP 38
6418: ADD
6419: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
6420: LD_EXP 38
6424: PPUSH
6425: LD_INT 1
6427: PPUSH
6428: LD_INT 0
6430: PPUSH
6431: CALL_OW 49
// end ;
6435: GO 6356
6437: POP
6438: POP
// for i = 1 to [ 1 , 1 , 3 ] [ Difficulty ] do
6439: LD_ADDR_VAR 0 2
6443: PUSH
6444: DOUBLE
6445: LD_INT 1
6447: DEC
6448: ST_TO_ADDR
6449: LD_INT 1
6451: PUSH
6452: LD_INT 1
6454: PUSH
6455: LD_INT 3
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: LIST
6462: PUSH
6463: LD_OWVAR 67
6467: ARRAY
6468: PUSH
6469: FOR_TO
6470: IFFALSE 6550
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6472: LD_INT 0
6474: PPUSH
6475: LD_INT 1
6477: PPUSH
6478: CALL_OW 12
6482: PPUSH
6483: LD_INT 1
6485: PUSH
6486: LD_INT 2
6488: PUSH
6489: LD_INT 4
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: PUSH
6497: LD_OWVAR 67
6501: ARRAY
6502: PPUSH
6503: CALL_OW 382
// AmEngConvoy = CreateHuman ;
6507: LD_ADDR_EXP 40
6511: PUSH
6512: CALL_OW 44
6516: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
6517: LD_ADDR_EXP 25
6521: PUSH
6522: LD_EXP 25
6526: PUSH
6527: LD_EXP 40
6531: ADD
6532: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
6533: LD_EXP 40
6537: PPUSH
6538: LD_INT 1
6540: PPUSH
6541: LD_INT 0
6543: PPUSH
6544: CALL_OW 49
// end ;
6548: GO 6469
6550: POP
6551: POP
// for i = 1 to [ 1 , 2 , 4 ] [ Difficulty ] do
6552: LD_ADDR_VAR 0 2
6556: PUSH
6557: DOUBLE
6558: LD_INT 1
6560: DEC
6561: ST_TO_ADDR
6562: LD_INT 1
6564: PUSH
6565: LD_INT 2
6567: PUSH
6568: LD_INT 4
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: LIST
6575: PUSH
6576: LD_OWVAR 67
6580: ARRAY
6581: PUSH
6582: FOR_TO
6583: IFFALSE 6757
// begin uc_side := 4 ;
6585: LD_ADDR_OWVAR 20
6589: PUSH
6590: LD_INT 4
6592: ST_TO_ADDR
// uc_nation := 1 ;
6593: LD_ADDR_OWVAR 21
6597: PUSH
6598: LD_INT 1
6600: ST_TO_ADDR
// vc_control = control_manual ;
6601: LD_ADDR_OWVAR 38
6605: PUSH
6606: LD_INT 1
6608: ST_TO_ADDR
// vc_engine = engine_combustion ;
6609: LD_ADDR_OWVAR 39
6613: PUSH
6614: LD_INT 1
6616: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6617: LD_ADDR_OWVAR 37
6621: PUSH
6622: LD_INT 2
6624: PPUSH
6625: LD_INT 4
6627: PPUSH
6628: CALL_OW 12
6632: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6633: LD_ADDR_OWVAR 40
6637: PUSH
6638: LD_INT 3
6640: PPUSH
6641: LD_INT 5
6643: PPUSH
6644: CALL_OW 12
6648: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6649: LD_ADDR_EXP 41
6653: PUSH
6654: CALL_OW 45
6658: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6659: LD_INT 0
6661: PPUSH
6662: LD_INT 1
6664: PPUSH
6665: CALL_OW 12
6669: PPUSH
6670: LD_INT 1
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: LD_INT 4
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: LIST
6683: PUSH
6684: LD_OWVAR 67
6688: ARRAY
6689: PPUSH
6690: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6694: LD_ADDR_EXP 39
6698: PUSH
6699: CALL_OW 44
6703: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6704: LD_EXP 39
6708: PPUSH
6709: LD_EXP 41
6713: PPUSH
6714: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6718: LD_EXP 41
6722: PPUSH
6723: LD_INT 14
6725: PPUSH
6726: LD_INT 0
6728: PPUSH
6729: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6733: LD_ADDR_EXP 26
6737: PUSH
6738: LD_EXP 26
6742: PUSH
6743: LD_EXP 39
6747: ADD
6748: PUSH
6749: LD_EXP 41
6753: ADD
6754: ST_TO_ADDR
// end ;
6755: GO 6582
6757: POP
6758: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
6759: LD_EXP 25
6763: PPUSH
6764: LD_INT 157
6766: PPUSH
6767: LD_INT 97
6769: PPUSH
6770: CALL_OW 114
// end ; end_of_file
6774: LD_VAR 0 1
6778: RET
// export function InitRussian ; begin
6779: LD_INT 0
6781: PPUSH
// Uc_Nation := 3 ;
6782: LD_ADDR_OWVAR 21
6786: PUSH
6787: LD_INT 3
6789: ST_TO_ADDR
// Uc_Side := 3 ;
6790: LD_ADDR_OWVAR 20
6794: PUSH
6795: LD_INT 3
6797: ST_TO_ADDR
// YakotichCrew := YakotichCrew ^ Yakotich ^ Mietek ^ Boris ^ Michail ^ Vasilij ^ Maksim ^ Fiodor ^ Aleksandr ^ Aleksiej ^ Pavel ^ Zakhar ^ Constantin ^ Stanislav ^ Josif ;
6798: LD_ADDR_EXP 1
6802: PUSH
6803: LD_EXP 1
6807: PUSH
6808: LD_EXP 3
6812: ADD
6813: PUSH
6814: LD_EXP 4
6818: ADD
6819: PUSH
6820: LD_EXP 5
6824: ADD
6825: PUSH
6826: LD_EXP 7
6830: ADD
6831: PUSH
6832: LD_EXP 6
6836: ADD
6837: PUSH
6838: LD_EXP 9
6842: ADD
6843: PUSH
6844: LD_EXP 10
6848: ADD
6849: PUSH
6850: LD_EXP 14
6854: ADD
6855: PUSH
6856: LD_EXP 13
6860: ADD
6861: PUSH
6862: LD_EXP 11
6866: ADD
6867: PUSH
6868: LD_EXP 12
6872: ADD
6873: PUSH
6874: LD_EXP 8
6878: ADD
6879: PUSH
6880: LD_EXP 16
6884: ADD
6885: PUSH
6886: LD_EXP 15
6890: ADD
6891: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 01_ ) ;
6892: LD_ADDR_EXP 3
6896: PUSH
6897: LD_STRING Yakotich
6899: PPUSH
6900: LD_INT 1
6902: PPUSH
6903: LD_STRING 01_
6905: PPUSH
6906: CALL 534 0 3
6910: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 01_ ) ;
6911: LD_ADDR_EXP 4
6915: PUSH
6916: LD_STRING Mietek
6918: PPUSH
6919: LD_INT 1
6921: PPUSH
6922: LD_STRING 01_
6924: PPUSH
6925: CALL 534 0 3
6929: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 01_ ) ;
6930: LD_ADDR_EXP 5
6934: PUSH
6935: LD_STRING Boris
6937: PPUSH
6938: LD_INT 1
6940: PPUSH
6941: LD_STRING 01_
6943: PPUSH
6944: CALL 534 0 3
6948: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 01_ ) ;
6949: LD_ADDR_EXP 7
6953: PUSH
6954: LD_STRING Michail
6956: PPUSH
6957: LD_INT 1
6959: PPUSH
6960: LD_STRING 01_
6962: PPUSH
6963: CALL 534 0 3
6967: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 01_ ) ;
6968: LD_ADDR_EXP 6
6972: PUSH
6973: LD_STRING Vasilij
6975: PPUSH
6976: LD_INT 1
6978: PPUSH
6979: LD_STRING 01_
6981: PPUSH
6982: CALL 534 0 3
6986: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 01_ ) ;
6987: LD_ADDR_EXP 9
6991: PUSH
6992: LD_STRING Maksim
6994: PPUSH
6995: LD_INT 1
6997: PPUSH
6998: LD_STRING 01_
7000: PPUSH
7001: CALL 534 0 3
7005: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 01_ ) ;
7006: LD_ADDR_EXP 10
7010: PUSH
7011: LD_STRING Fiodor
7013: PPUSH
7014: LD_INT 1
7016: PPUSH
7017: LD_STRING 01_
7019: PPUSH
7020: CALL 534 0 3
7024: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 01_ ) ;
7025: LD_ADDR_EXP 14
7029: PUSH
7030: LD_STRING Aleksandr
7032: PPUSH
7033: LD_INT 1
7035: PPUSH
7036: LD_STRING 01_
7038: PPUSH
7039: CALL 534 0 3
7043: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 01_ ) ;
7044: LD_ADDR_EXP 13
7048: PUSH
7049: LD_STRING Aleksiej
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: LD_STRING 01_
7057: PPUSH
7058: CALL 534 0 3
7062: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 01_ ) ;
7063: LD_ADDR_EXP 11
7067: PUSH
7068: LD_STRING Pavel
7070: PPUSH
7071: LD_INT 1
7073: PPUSH
7074: LD_STRING 01_
7076: PPUSH
7077: CALL 534 0 3
7081: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 01_ ) ;
7082: LD_ADDR_EXP 12
7086: PUSH
7087: LD_STRING Zakhar
7089: PPUSH
7090: LD_INT 1
7092: PPUSH
7093: LD_STRING 01_
7095: PPUSH
7096: CALL 534 0 3
7100: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 01_ ) ;
7101: LD_ADDR_EXP 8
7105: PUSH
7106: LD_STRING Constantin
7108: PPUSH
7109: LD_INT 1
7111: PPUSH
7112: LD_STRING 01_
7114: PPUSH
7115: CALL 534 0 3
7119: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , false ,  ) ;
7120: LD_ADDR_EXP 16
7124: PUSH
7125: LD_STRING Stanislav
7127: PPUSH
7128: LD_INT 0
7130: PPUSH
7131: LD_STRING 
7133: PPUSH
7134: CALL 534 0 3
7138: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false ,  ) ;
7139: LD_ADDR_EXP 15
7143: PUSH
7144: LD_STRING Josif
7146: PPUSH
7147: LD_INT 0
7149: PPUSH
7150: LD_STRING 
7152: PPUSH
7153: CALL 534 0 3
7157: ST_TO_ADDR
// SetClass ( Boris , 2 ) ;
7158: LD_EXP 5
7162: PPUSH
7163: LD_INT 2
7165: PPUSH
7166: CALL_OW 336
// SetClass ( Vasilij , 4 ) ;
7170: LD_EXP 6
7174: PPUSH
7175: LD_INT 4
7177: PPUSH
7178: CALL_OW 336
// Uc_Side := 6 ;
7182: LD_ADDR_OWVAR 20
7186: PUSH
7187: LD_INT 6
7189: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
7190: LD_ADDR_EXP 17
7194: PUSH
7195: LD_STRING Morozov
7197: PPUSH
7198: LD_INT 0
7200: PPUSH
7201: LD_STRING 
7203: PPUSH
7204: CALL 534 0 3
7208: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
7209: LD_ADDR_EXP 18
7213: PUSH
7214: LD_STRING Kurin
7216: PPUSH
7217: LD_INT 0
7219: PPUSH
7220: LD_STRING 
7222: PPUSH
7223: CALL 534 0 3
7227: ST_TO_ADDR
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
7228: LD_ADDR_EXP 19
7232: PUSH
7233: LD_STRING Grishko
7235: PPUSH
7236: LD_INT 0
7238: PPUSH
7239: LD_STRING 
7241: PPUSH
7242: CALL 534 0 3
7246: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
7247: LD_ADDR_EXP 20
7251: PUSH
7252: LD_STRING Burlak
7254: PPUSH
7255: LD_INT 0
7257: PPUSH
7258: LD_STRING 
7260: PPUSH
7261: CALL 534 0 3
7265: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
7266: LD_ADDR_EXP 21
7270: PUSH
7271: LD_STRING Platonov
7273: PPUSH
7274: LD_INT 0
7276: PPUSH
7277: LD_STRING 
7279: PPUSH
7280: CALL 534 0 3
7284: ST_TO_ADDR
// Uc_Side := 1 ;
7285: LD_ADDR_OWVAR 20
7289: PUSH
7290: LD_INT 1
7292: ST_TO_ADDR
// AmSold := PrepareUnit ( AmSold , false ,  ) ;
7293: LD_ADDR_EXP 22
7297: PUSH
7298: LD_STRING AmSold
7300: PPUSH
7301: LD_INT 0
7303: PPUSH
7304: LD_STRING 
7306: PPUSH
7307: CALL 534 0 3
7311: ST_TO_ADDR
// end ;
7312: LD_VAR 0 1
7316: RET
// export function Czolg ; begin
7317: LD_INT 0
7319: PPUSH
// if LoadVariable ( 01_Vehicle , 1 ) then
7320: LD_STRING 01_Vehicle
7322: PPUSH
7323: LD_INT 1
7325: PPUSH
7326: CALL_OW 30
7330: IFFALSE 7413
// begin Uc_Side = 3 ;
7332: LD_ADDR_OWVAR 20
7336: PUSH
7337: LD_INT 3
7339: ST_TO_ADDR
// Uc_Nation = 3 ;
7340: LD_ADDR_OWVAR 21
7344: PUSH
7345: LD_INT 3
7347: ST_TO_ADDR
// Uc_Direction = 2 ;
7348: LD_ADDR_OWVAR 24
7352: PUSH
7353: LD_INT 2
7355: ST_TO_ADDR
// Vc_Chassis = 21 ;
7356: LD_ADDR_OWVAR 37
7360: PUSH
7361: LD_INT 21
7363: ST_TO_ADDR
// Vc_Control = 1 ;
7364: LD_ADDR_OWVAR 38
7368: PUSH
7369: LD_INT 1
7371: ST_TO_ADDR
// Vc_Engine = 1 ;
7372: LD_ADDR_OWVAR 39
7376: PUSH
7377: LD_INT 1
7379: ST_TO_ADDR
// Vc_Weapon = 42 ;
7380: LD_ADDR_OWVAR 40
7384: PUSH
7385: LD_INT 42
7387: ST_TO_ADDR
// Tank := CreateVehicle ;
7388: LD_ADDR_EXP 42
7392: PUSH
7393: CALL_OW 45
7397: ST_TO_ADDR
// PlaceUnitArea ( Tank , VehSpawn , false ) ;
7398: LD_EXP 42
7402: PPUSH
7403: LD_INT 19
7405: PPUSH
7406: LD_INT 0
7408: PPUSH
7409: CALL_OW 49
// end ; end ; end_of_file
7413: LD_VAR 0 1
7417: RET
// export function Action ; var i ; begin
7418: LD_INT 0
7420: PPUSH
7421: PPUSH
// if LoadVariable ( 01_Vehicle , 1 ) then
7422: LD_STRING 01_Vehicle
7424: PPUSH
7425: LD_INT 1
7427: PPUSH
7428: CALL_OW 30
7432: IFFALSE 7450
// PlaceHumanInUnit ( Yakotich , Tank ) else
7434: LD_EXP 3
7438: PPUSH
7439: LD_EXP 42
7443: PPUSH
7444: CALL_OW 52
7448: GO 7465
// PlaceUnitArea ( Yakotich , RussianSpawn , false ) ;
7450: LD_EXP 3
7454: PPUSH
7455: LD_INT 2
7457: PPUSH
7458: LD_INT 0
7460: PPUSH
7461: CALL_OW 49
// PlaceUnitArea ( Maksim , RussianSpawn , false ) ;
7465: LD_EXP 9
7469: PPUSH
7470: LD_INT 2
7472: PPUSH
7473: LD_INT 0
7475: PPUSH
7476: CALL_OW 49
// PlaceUnitArea ( Vasilij , RussianSpawn , false ) ;
7480: LD_EXP 6
7484: PPUSH
7485: LD_INT 2
7487: PPUSH
7488: LD_INT 0
7490: PPUSH
7491: CALL_OW 49
// PlaceUnitArea ( Michail , RussianSpawn , false ) ;
7495: LD_EXP 7
7499: PPUSH
7500: LD_INT 2
7502: PPUSH
7503: LD_INT 0
7505: PPUSH
7506: CALL_OW 49
// PlaceUnitArea ( Fiodor , RussianSpawn , false ) ;
7510: LD_EXP 10
7514: PPUSH
7515: LD_INT 2
7517: PPUSH
7518: LD_INT 0
7520: PPUSH
7521: CALL_OW 49
// PlaceUnitArea ( Constantin , RussianSpawn , false ) ;
7525: LD_EXP 8
7529: PPUSH
7530: LD_INT 2
7532: PPUSH
7533: LD_INT 0
7535: PPUSH
7536: CALL_OW 49
// PlaceUnitArea ( Boris , RussianSpawn , false ) ;
7540: LD_EXP 5
7544: PPUSH
7545: LD_INT 2
7547: PPUSH
7548: LD_INT 0
7550: PPUSH
7551: CALL_OW 49
// InGameOn ;
7555: CALL_OW 8
// DialogueOn ;
7559: CALL_OW 6
// CenterNowOnXY ( 152 , 28 ) ;
7563: LD_INT 152
7565: PPUSH
7566: LD_INT 28
7568: PPUSH
7569: CALL_OW 86
// Wait ( 0 0$3 ) ;
7573: LD_INT 105
7575: PPUSH
7576: CALL_OW 67
// Say ( Yakotich , 2Yak-13 ) ;
7580: LD_EXP 3
7584: PPUSH
7585: LD_STRING 2Yak-13
7587: PPUSH
7588: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
7592: LD_STRING o1
7594: PPUSH
7595: CALL_OW 337
// MaksimScout ;
7599: CALL 1466 0 0
// InGameOff ;
7603: CALL_OW 9
// DialogueOff ;
7607: CALL_OW 7
// Say ( Michail , 2Mich-02 ) ;
7611: LD_EXP 7
7615: PPUSH
7616: LD_STRING 2Mich-02
7618: PPUSH
7619: CALL_OW 88
// Say ( Michail , 2Mich-03 ) ;
7623: LD_EXP 7
7627: PPUSH
7628: LD_STRING 2Mich-03
7630: PPUSH
7631: CALL_OW 88
// Say ( Yakotich , 2Yak-15 ) ;
7635: LD_EXP 3
7639: PPUSH
7640: LD_STRING 2Yak-15
7642: PPUSH
7643: CALL_OW 88
// ChangeMissionObjectives ( turret ) ;
7647: LD_STRING turret
7649: PPUSH
7650: CALL_OW 337
// SaveForQuickRestart ;
7654: CALL_OW 22
// end ;
7658: LD_VAR 0 1
7662: RET
// every 0 0$1 trigger maksim_scout_ended = true and See ( 3 , Maksim ) do
7663: LD_EXP 45
7667: PUSH
7668: LD_INT 1
7670: EQUAL
7671: PUSH
7672: LD_INT 3
7674: PPUSH
7675: LD_EXP 9
7679: PPUSH
7680: CALL_OW 292
7684: AND
7685: IFFALSE 8013
7687: GO 7689
7689: DISABLE
// begin CenterNowOnUnits ( Maksim ) ;
7690: LD_EXP 9
7694: PPUSH
7695: CALL_OW 87
// DialogueOn ;
7699: CALL_OW 6
// RevealFogArea ( 3 , ScoutedTerrains ) ;
7703: LD_INT 3
7705: PPUSH
7706: LD_INT 8
7708: PPUSH
7709: CALL_OW 332
// Say ( Maksim , 2Mak-06 ) ;
7713: LD_EXP 9
7717: PPUSH
7718: LD_STRING 2Mak-06
7720: PPUSH
7721: CALL_OW 88
// Say ( Yakotich , 2Yak-16 ) ;
7725: LD_EXP 3
7729: PPUSH
7730: LD_STRING 2Yak-16
7732: PPUSH
7733: CALL_OW 88
// CenterNowOnXY ( 40 , 10 ) ;
7737: LD_INT 40
7739: PPUSH
7740: LD_INT 10
7742: PPUSH
7743: CALL_OW 86
// Wait ( 0 0$03 ) ;
7747: LD_INT 105
7749: PPUSH
7750: CALL_OW 67
// CenterOnXY ( 55 , 40 ) ;
7754: LD_INT 55
7756: PPUSH
7757: LD_INT 40
7759: PPUSH
7760: CALL_OW 84
// Wait ( 0 0$03 ) ;
7764: LD_INT 105
7766: PPUSH
7767: CALL_OW 67
// CenterOnXY ( 70 , 72 ) ;
7771: LD_INT 70
7773: PPUSH
7774: LD_INT 72
7776: PPUSH
7777: CALL_OW 84
// Say ( Maksim , 2Mak-07 ) ;
7781: LD_EXP 9
7785: PPUSH
7786: LD_STRING 2Mak-07
7788: PPUSH
7789: CALL_OW 88
// Say ( Maksim , 2Mak-08 ) ;
7793: LD_EXP 9
7797: PPUSH
7798: LD_STRING 2Mak-08
7800: PPUSH
7801: CALL_OW 88
// CenterNowOnUnits ( Yakotich ) ;
7805: LD_EXP 3
7809: PPUSH
7810: CALL_OW 87
// Say ( Yakotich , 2Yak-17 ) ;
7814: LD_EXP 3
7818: PPUSH
7819: LD_STRING 2Yak-17
7821: PPUSH
7822: CALL_OW 88
// Say ( Yakotich , 2Yak-18 ) ;
7826: LD_EXP 3
7830: PPUSH
7831: LD_STRING 2Yak-18
7833: PPUSH
7834: CALL_OW 88
// Say ( Maksim , 2Mak-09 ) ;
7838: LD_EXP 9
7842: PPUSH
7843: LD_STRING 2Mak-09
7845: PPUSH
7846: CALL_OW 88
// Say ( Maksim , 2Mak-10 ) ;
7850: LD_EXP 9
7854: PPUSH
7855: LD_STRING 2Mak-10
7857: PPUSH
7858: CALL_OW 88
// Say ( Maksim , 2Mak-11 ) ;
7862: LD_EXP 9
7866: PPUSH
7867: LD_STRING 2Mak-11
7869: PPUSH
7870: CALL_OW 88
// Say ( Yakotich , 2Yak-19 ) ;
7874: LD_EXP 3
7878: PPUSH
7879: LD_STRING 2Yak-19
7881: PPUSH
7882: CALL_OW 88
// SayRadio ( Yakotich , 2Yak-20 ) ;
7886: LD_EXP 3
7890: PPUSH
7891: LD_STRING 2Yak-20
7893: PPUSH
7894: CALL_OW 94
// SayRadio ( Morozov , 2Moro-05 ) ;
7898: LD_EXP 17
7902: PPUSH
7903: LD_STRING 2Moro-05
7905: PPUSH
7906: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-21 ) ;
7910: LD_EXP 3
7914: PPUSH
7915: LD_STRING 2Yak-21
7917: PPUSH
7918: CALL_OW 94
// SayRadio ( Morozov , 2Moro-06 ) ;
7922: LD_EXP 17
7926: PPUSH
7927: LD_STRING 2Moro-06
7929: PPUSH
7930: CALL_OW 94
// SayRadio ( Morozov , 2Moro-07 ) ;
7934: LD_EXP 17
7938: PPUSH
7939: LD_STRING 2Moro-07
7941: PPUSH
7942: CALL_OW 94
// SayRadio ( Morozov , 2Moro-08 ) ;
7946: LD_EXP 17
7950: PPUSH
7951: LD_STRING 2Moro-08
7953: PPUSH
7954: CALL_OW 94
// SayRadio ( Morozov , 2Moro-09 ) ;
7958: LD_EXP 17
7962: PPUSH
7963: LD_STRING 2Moro-09
7965: PPUSH
7966: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-22 ) ;
7970: LD_EXP 3
7974: PPUSH
7975: LD_STRING 2Yak-22
7977: PPUSH
7978: CALL_OW 94
// ChangeMissionObjectives ( o2 ) ;
7982: LD_STRING o2
7984: PPUSH
7985: CALL_OW 337
// DialogueOff ;
7989: CALL_OW 7
// maksim_back = true ;
7993: LD_ADDR_EXP 46
7997: PUSH
7998: LD_INT 1
8000: ST_TO_ADDR
// SetSide ( Maksim , 3 ) ;
8001: LD_EXP 9
8005: PPUSH
8006: LD_INT 3
8008: PPUSH
8009: CALL_OW 235
// end ;
8013: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
8014: LD_INT 3
8016: PPUSH
8017: LD_INT 90
8019: PPUSH
8020: CALL_OW 325
8024: IFFALSE 8053
8026: GO 8028
8028: DISABLE
// begin Say ( Michail , 2Mich-04 ) ;
8029: LD_EXP 7
8033: PPUSH
8034: LD_STRING 2Mich-04
8036: PPUSH
8037: CALL_OW 88
// Say ( Michail , 2Mich-05 ) ;
8041: LD_EXP 7
8045: PPUSH
8046: LD_STRING 2Mich-05
8048: PPUSH
8049: CALL_OW 88
// end ;
8053: END
// every 0 0$1 trigger Researched ( 3 , 83 ) do
8054: LD_INT 3
8056: PPUSH
8057: LD_INT 83
8059: PPUSH
8060: CALL_OW 325
8064: IFFALSE 8081
8066: GO 8068
8068: DISABLE
// begin Say ( Vasilij , 2Vas-07 ) ;
8069: LD_EXP 6
8073: PPUSH
8074: LD_STRING 2Vas-07
8076: PPUSH
8077: CALL_OW 88
// end ;
8081: END
// every 0 0$1 trigger first_attack_clear do
8082: LD_EXP 54
8086: IFFALSE 8299
8088: GO 8090
8090: DISABLE
// begin Wait ( 5 5$0 ) ;
8091: LD_INT 10500
8093: PPUSH
8094: CALL_OW 67
// PlaceUnitArea ( Mietek , RussianSpawn , false ) ;
8098: LD_EXP 4
8102: PPUSH
8103: LD_INT 2
8105: PPUSH
8106: LD_INT 0
8108: PPUSH
8109: CALL_OW 49
// PlaceUnitArea ( Aleksiej , RussianSpawn , false ) ;
8113: LD_EXP 13
8117: PPUSH
8118: LD_INT 2
8120: PPUSH
8121: LD_INT 0
8123: PPUSH
8124: CALL_OW 49
// PlaceUnitArea ( Aleksandr , RussianSpawn , false ) ;
8128: LD_EXP 14
8132: PPUSH
8133: LD_INT 2
8135: PPUSH
8136: LD_INT 0
8138: PPUSH
8139: CALL_OW 49
// PlaceUnitArea ( Josif , RussianSpawn , false ) ;
8143: LD_EXP 15
8147: PPUSH
8148: LD_INT 2
8150: PPUSH
8151: LD_INT 0
8153: PPUSH
8154: CALL_OW 49
// PlaceUnitArea ( Zakhar , RussianSpawn , false ) ;
8158: LD_EXP 12
8162: PPUSH
8163: LD_INT 2
8165: PPUSH
8166: LD_INT 0
8168: PPUSH
8169: CALL_OW 49
// PlaceUnitArea ( Stanislav , RussianSpawn , false ) ;
8173: LD_EXP 16
8177: PPUSH
8178: LD_INT 2
8180: PPUSH
8181: LD_INT 0
8183: PPUSH
8184: CALL_OW 49
// PlaceUnitArea ( Pavel , RussianSpawn , false ) ;
8188: LD_EXP 11
8192: PPUSH
8193: LD_INT 2
8195: PPUSH
8196: LD_INT 0
8198: PPUSH
8199: CALL_OW 49
// DialogueOn ;
8203: CALL_OW 6
// CenterNowOnUnits ( Mietek ) ;
8207: LD_EXP 4
8211: PPUSH
8212: CALL_OW 87
// SayRadio ( Mietek , 2Ryn-06 ) ;
8216: LD_EXP 4
8220: PPUSH
8221: LD_STRING 2Ryn-06
8223: PPUSH
8224: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-25 ) ;
8228: LD_EXP 3
8232: PPUSH
8233: LD_STRING 2Yak-25
8235: PPUSH
8236: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-01 ) ;
8240: LD_EXP 16
8244: PPUSH
8245: LD_STRING 2Stan-01
8247: PPUSH
8248: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-02 ) ;
8252: LD_EXP 16
8256: PPUSH
8257: LD_STRING 2Stan-02
8259: PPUSH
8260: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-03 ) ;
8264: LD_EXP 16
8268: PPUSH
8269: LD_STRING 2Stan-03
8271: PPUSH
8272: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-Stan-01 ) ;
8276: LD_EXP 3
8280: PPUSH
8281: LD_STRING 2Yak-Stan-01
8283: PPUSH
8284: CALL_OW 94
// ChangeMissionObjectives ( gun ) ;
8288: LD_STRING gun
8290: PPUSH
8291: CALL_OW 337
// DialogueOff ;
8295: CALL_OW 7
// end ;
8299: END
// every 0 0$1 trigger maksim_back = true do
8300: LD_EXP 46
8304: PUSH
8305: LD_INT 1
8307: EQUAL
8308: IFFALSE 8431
8310: GO 8312
8312: DISABLE
// begin Wait ( 30 30$0 ) ;
8313: LD_INT 63000
8315: PPUSH
8316: CALL_OW 67
// DialogueOn ;
8320: CALL_OW 6
// InGameOn ;
8324: CALL_OW 8
// SayRadio ( Kurin , 2Kurin-01 ) ;
8328: LD_EXP 18
8332: PPUSH
8333: LD_STRING 2Kurin-01
8335: PPUSH
8336: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-02 ) ;
8340: LD_EXP 18
8344: PPUSH
8345: LD_STRING 2Kurin-02
8347: PPUSH
8348: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-26 ) ;
8352: LD_EXP 3
8356: PPUSH
8357: LD_STRING 2Yak-26
8359: PPUSH
8360: CALL_OW 94
// ChangeMissionObjectives ( o3 ) ;
8364: LD_STRING o3
8366: PPUSH
8367: CALL_OW 337
// Say ( Maksim , 2Mak-12 ) ;
8371: LD_EXP 9
8375: PPUSH
8376: LD_STRING 2Mak-12
8378: PPUSH
8379: CALL_OW 88
// CenterNowOnXY ( 57 , 2 ) ;
8383: LD_INT 57
8385: PPUSH
8386: LD_INT 2
8388: PPUSH
8389: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
8393: LD_INT 3
8395: PPUSH
8396: LD_INT 9
8398: PPUSH
8399: CALL_OW 332
// Say ( Maksim , 2Mak-13 ) ;
8403: LD_EXP 9
8407: PPUSH
8408: LD_STRING 2Mak-13
8410: PPUSH
8411: CALL_OW 88
// DialogueOff ;
8415: CALL_OW 7
// InGameOff ;
8419: CALL_OW 9
// kurin_attack_started = true ;
8423: LD_ADDR_EXP 56
8427: PUSH
8428: LD_INT 1
8430: ST_TO_ADDR
// end ;
8431: END
// every 1 trigger kurin_attack_started = true and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var unit ;
8432: LD_EXP 56
8436: PUSH
8437: LD_INT 1
8439: EQUAL
8440: PUSH
8441: LD_INT 22
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 21
8453: PUSH
8454: LD_INT 1
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PPUSH
8465: CALL_OW 69
8469: PUSH
8470: LD_INT 0
8472: EQUAL
8473: AND
8474: IFFALSE 9088
8476: GO 8478
8478: DISABLE
8479: LD_INT 0
8481: PPUSH
// begin InGameOn ;
8482: CALL_OW 8
// SayRadio ( Yakotich , 2Yak-27 ) ;
8486: LD_EXP 3
8490: PPUSH
8491: LD_STRING 2Yak-27
8493: PPUSH
8494: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-03 ) ;
8498: LD_EXP 18
8502: PPUSH
8503: LD_STRING 2Kurin-03
8505: PPUSH
8506: CALL_OW 94
// SayRadio ( AmSold , 2AmSold-01 ) ;
8510: LD_EXP 22
8514: PPUSH
8515: LD_STRING 2AmSold-01
8517: PPUSH
8518: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-04 ) ;
8522: LD_EXP 18
8526: PPUSH
8527: LD_STRING 2Kurin-04
8529: PPUSH
8530: CALL_OW 94
// Wait ( 0 0$02 ) ;
8534: LD_INT 70
8536: PPUSH
8537: CALL_OW 67
// SayRadio ( Grishko , 2Gri-01 ) ;
8541: LD_EXP 19
8545: PPUSH
8546: LD_STRING 2Gri-01
8548: PPUSH
8549: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-05 ) ;
8553: LD_EXP 18
8557: PPUSH
8558: LD_STRING 2Kurin-05
8560: PPUSH
8561: CALL_OW 94
// SayRadio ( Grishko , 2Gri-02 ) ;
8565: LD_EXP 19
8569: PPUSH
8570: LD_STRING 2Gri-02
8572: PPUSH
8573: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-06 ) ;
8577: LD_EXP 18
8581: PPUSH
8582: LD_STRING 2Kurin-06
8584: PPUSH
8585: CALL_OW 94
// SayRadio ( Grishko , 2Gri-03 ) ;
8589: LD_EXP 19
8593: PPUSH
8594: LD_STRING 2Gri-03
8596: PPUSH
8597: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-07 ) ;
8601: LD_EXP 18
8605: PPUSH
8606: LD_STRING 2Kurin-07
8608: PPUSH
8609: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-28 ) ;
8613: LD_EXP 3
8617: PPUSH
8618: LD_STRING 2Yak-28
8620: PPUSH
8621: CALL_OW 94
// Wait ( 0 0$03 ) ;
8625: LD_INT 105
8627: PPUSH
8628: CALL_OW 67
// SayRadio ( Kurin , 2Kurin-08 ) ;
8632: LD_EXP 18
8636: PPUSH
8637: LD_STRING 2Kurin-08
8639: PPUSH
8640: CALL_OW 94
// SayRadio ( Burlak , 2Burlak-01 ) ;
8644: LD_EXP 20
8648: PPUSH
8649: LD_STRING 2Burlak-01
8651: PPUSH
8652: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-09 ) ;
8656: LD_EXP 18
8660: PPUSH
8661: LD_STRING 2Kurin-09
8663: PPUSH
8664: CALL_OW 94
// SayEffect ( 2GunSound ) ;
8668: LD_STRING 2GunSound
8670: PPUSH
8671: CALL_OW 96
// SayRadio ( Morozov , 2Moro-10 ) ;
8675: LD_EXP 17
8679: PPUSH
8680: LD_STRING 2Moro-10
8682: PPUSH
8683: CALL_OW 94
// SayRadio ( Morozov , 2Moro-11 ) ;
8687: LD_EXP 17
8691: PPUSH
8692: LD_STRING 2Moro-11
8694: PPUSH
8695: CALL_OW 94
// SayRadio ( Morozov , 2Moro-12 ) ;
8699: LD_EXP 17
8703: PPUSH
8704: LD_STRING 2Moro-12
8706: PPUSH
8707: CALL_OW 94
// SayRadio ( Morozov , 2Moro-13 ) ;
8711: LD_EXP 17
8715: PPUSH
8716: LD_STRING 2Moro-13
8718: PPUSH
8719: CALL_OW 94
// SayRadio ( Morozov , 2Moro-14 ) ;
8723: LD_EXP 17
8727: PPUSH
8728: LD_STRING 2Moro-14
8730: PPUSH
8731: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-29 ) ;
8735: LD_EXP 3
8739: PPUSH
8740: LD_STRING 2Yak-29
8742: PPUSH
8743: CALL_OW 94
// end_of_the_mission = true ;
8747: LD_ADDR_EXP 57
8751: PUSH
8752: LD_INT 1
8754: ST_TO_ADDR
// InGameOff ;
8755: CALL_OW 9
// AddMedal ( PeopleConvoys , 1 ) ;
8759: LD_STRING PeopleConvoys
8761: PPUSH
8762: LD_INT 1
8764: PPUSH
8765: CALL_OW 101
// if gun_researched = true then
8769: LD_EXP 49
8773: PUSH
8774: LD_INT 1
8776: EQUAL
8777: IFFALSE 8791
// AddMedal ( GunMedal , 1 ) else
8779: LD_STRING GunMedal
8781: PPUSH
8782: LD_INT 1
8784: PPUSH
8785: CALL_OW 101
8789: GO 8802
// AddMedal ( GunMedal , - 1 ) ;
8791: LD_STRING GunMedal
8793: PPUSH
8794: LD_INT 1
8796: NEG
8797: PPUSH
8798: CALL_OW 101
// if gattling_researched = true and gun_researched = true and transport_builded = true and turrets_researched = true then
8802: LD_EXP 48
8806: PUSH
8807: LD_INT 1
8809: EQUAL
8810: PUSH
8811: LD_EXP 49
8815: PUSH
8816: LD_INT 1
8818: EQUAL
8819: AND
8820: PUSH
8821: LD_EXP 52
8825: PUSH
8826: LD_INT 1
8828: EQUAL
8829: AND
8830: PUSH
8831: LD_EXP 47
8835: PUSH
8836: LD_INT 1
8838: EQUAL
8839: AND
8840: IFFALSE 8854
// AddMedal ( Secondary , 1 ) else
8842: LD_STRING Secondary
8844: PPUSH
8845: LD_INT 1
8847: PPUSH
8848: CALL_OW 101
8852: GO 8865
// AddMedal ( Secondary , - 1 ) ;
8854: LD_STRING Secondary
8856: PPUSH
8857: LD_INT 1
8859: NEG
8860: PPUSH
8861: CALL_OW 101
// GiveMedals ( Medals ) ;
8865: LD_STRING Medals
8867: PPUSH
8868: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
8872: LD_INT 22
8874: PUSH
8875: LD_INT 3
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 23
8884: PUSH
8885: LD_INT 3
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 21
8894: PUSH
8895: LD_INT 1
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 69
8911: PPUSH
8912: CALL_OW 43
// SaveCharacters ( Yakotich , 02_Yakotich ) ;
8916: LD_EXP 3
8920: PPUSH
8921: LD_STRING 02_Yakotich
8923: PPUSH
8924: CALL_OW 38
// SaveCharacters ( Mietek , 02_Mietek ) ;
8928: LD_EXP 4
8932: PPUSH
8933: LD_STRING 02_Mietek
8935: PPUSH
8936: CALL_OW 38
// SaveCharacters ( Maksim , 02_Maksim ) ;
8940: LD_EXP 9
8944: PPUSH
8945: LD_STRING 02_Maksim
8947: PPUSH
8948: CALL_OW 38
// SaveCharacters ( Vasilij , 02_Vasilij ) ;
8952: LD_EXP 6
8956: PPUSH
8957: LD_STRING 02_Vasilij
8959: PPUSH
8960: CALL_OW 38
// SaveCharacters ( Michail , 02_Michail ) ;
8964: LD_EXP 7
8968: PPUSH
8969: LD_STRING 02_Michail
8971: PPUSH
8972: CALL_OW 38
// SaveCharacters ( Boris , 02_Boris ) ;
8976: LD_EXP 5
8980: PPUSH
8981: LD_STRING 02_Boris
8983: PPUSH
8984: CALL_OW 38
// SaveCharacters ( Constantin , 02_Constantin ) ;
8988: LD_EXP 8
8992: PPUSH
8993: LD_STRING 02_Constantin
8995: PPUSH
8996: CALL_OW 38
// SaveCharacters ( Fiodor , 02_Fiodor ) ;
9000: LD_EXP 10
9004: PPUSH
9005: LD_STRING 02_Fiodor
9007: PPUSH
9008: CALL_OW 38
// SaveCharacters ( Aleksiej , 02_Aleksiej ) ;
9012: LD_EXP 13
9016: PPUSH
9017: LD_STRING 02_Aleksiej
9019: PPUSH
9020: CALL_OW 38
// SaveCharacters ( Pavel , 02_Pavel ) ;
9024: LD_EXP 11
9028: PPUSH
9029: LD_STRING 02_Pavel
9031: PPUSH
9032: CALL_OW 38
// SaveCharacters ( Zakhar , 02_Zakhar ) ;
9036: LD_EXP 12
9040: PPUSH
9041: LD_STRING 02_Zakhar
9043: PPUSH
9044: CALL_OW 38
// SaveCharacters ( Aleksandr , 02_Aleksandr ) ;
9048: LD_EXP 14
9052: PPUSH
9053: LD_STRING 02_Aleksandr
9055: PPUSH
9056: CALL_OW 38
// SaveCharacters ( Stanislav , 02_Stanislav ) ;
9060: LD_EXP 16
9064: PPUSH
9065: LD_STRING 02_Stanislav
9067: PPUSH
9068: CALL_OW 38
// SaveCharacters ( Josif , 02_Josif ) ;
9072: LD_EXP 15
9076: PPUSH
9077: LD_STRING 02_Josif
9079: PPUSH
9080: CALL_OW 38
// YouWin ;
9084: CALL_OW 103
// end ;
9088: PPOPN 1
9090: END
