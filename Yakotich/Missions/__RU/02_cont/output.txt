// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 40 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Randomize ;
  15: CALL_OW 10
// RandomizeAll ;
  19: CALL_OW 11
// InitRussian ;
  23: CALL 6702 0 0
// Action ;
  27: CALL 7240 0 0
// InitAmerican ;
  31: CALL 2435 0 0
// DebugMode ;
  35: CALL 168 0 0
// end ;
  39: END
// export YakotichCrew , MietekCrew ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin ; export Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Morozov , Kurin , Grishko , Burlak , Platonov , AmSold ; export KurinTime , MietekTime ; export AmConvoys , AmConvoysVehicles , AmNorthPersonel , AmSouthPersonel ; export AmSoldNorth , AmSciNorth , AmMechNorth , AmEngNorth , AmSoldSouth , AmSciSouth , AmMechSouth , AmEngSouth ; export AmSoldConvoy , AmSciConvoy , AmMechConvoy , AmEngConvoy , AmVehicleConvoy ; export debug ; export mission_prefix ; export maksim_scout_ended , maksim_back , turrets_researched , gattling_researched , gun_researched , gun_recycled , second_wave_clear , transport_builded , first_attack_spawned , first_attack_clear , reiforcements_called , kurin_attack_started , end_of_the_mission ; export livid ; function Init ; begin
  40: LD_INT 0
  42: PPUSH
// mission_prefix := 02_ ;
  43: LD_ADDR_EXP 43
  47: PUSH
  48: LD_STRING 02_
  50: ST_TO_ADDR
// maksim_scout_ended := false ;
  51: LD_ADDR_EXP 44
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// maksim_back := false ;
  59: LD_ADDR_EXP 45
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// turrets_researched := false ;
  67: LD_ADDR_EXP 46
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// gattling_researched := false ;
  75: LD_ADDR_EXP 47
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// gun_recycled := false ;
  83: LD_ADDR_EXP 49
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// gun_researched := false ;
  91: LD_ADDR_EXP 48
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// transport_builded := false ;
  99: LD_ADDR_EXP 51
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// first_attack_spawned := false ;
 107: LD_ADDR_EXP 52
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// first_attack_clear := false ;
 115: LD_ADDR_EXP 53
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// reiforcements_called := false ;
 123: LD_ADDR_EXP 54
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// kurin_attack_started := false ;
 131: LD_ADDR_EXP 55
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// end_of_the_mission := false ;
 139: LD_ADDR_EXP 56
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// MietekTime := 5 5$0 ;
 147: LD_ADDR_EXP 24
 151: PUSH
 152: LD_INT 10500
 154: ST_TO_ADDR
// KurinTime := 30 30$0 ;
 155: LD_ADDR_EXP 23
 159: PUSH
 160: LD_INT 63000
 162: ST_TO_ADDR
// end ;
 163: LD_VAR 0 1
 167: RET
// function DebugMode ; var i ; begin
 168: LD_INT 0
 170: PPUSH
 171: PPUSH
// if not debug then
 172: LD_EXP 42
 176: NOT
 177: IFFALSE 181
// exit ;
 179: GO 200
// Difficulty := 3 ;
 181: LD_ADDR_OWVAR 67
 185: PUSH
 186: LD_INT 3
 188: ST_TO_ADDR
// TurnFogOff ( ) ;
 189: CALL_OW 537
// FogOff ( 3 ) ;
 193: LD_INT 3
 195: PPUSH
 196: CALL_OW 344
// end ; end_of_file
 200: LD_VAR 0 1
 204: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
 205: LD_INT 0
 207: PPUSH
// ar_miner := 81 ;
 208: LD_ADDR_EXP 65
 212: PUSH
 213: LD_INT 81
 215: ST_TO_ADDR
// ar_crane := 88 ;
 216: LD_ADDR_EXP 64
 220: PUSH
 221: LD_INT 88
 223: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 224: LD_ADDR_EXP 59
 228: PUSH
 229: LD_INT 89
 231: ST_TO_ADDR
// us_hack := 99 ;
 232: LD_ADDR_EXP 60
 236: PUSH
 237: LD_INT 99
 239: ST_TO_ADDR
// us_artillery := 97 ;
 240: LD_ADDR_EXP 61
 244: PUSH
 245: LD_INT 97
 247: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 248: LD_ADDR_EXP 62
 252: PUSH
 253: LD_INT 91
 255: ST_TO_ADDR
// ar_mortar := 92 ;
 256: LD_ADDR_EXP 63
 260: PUSH
 261: LD_INT 92
 263: ST_TO_ADDR
// ru_flamethrower := 93 ;
 264: LD_ADDR_EXP 66
 268: PUSH
 269: LD_INT 93
 271: ST_TO_ADDR
// ru_radar := 98 ;
 272: LD_ADDR_EXP 58
 276: PUSH
 277: LD_INT 98
 279: ST_TO_ADDR
// tech_Artillery := 80 ;
 280: LD_ADDR_EXP 67
 284: PUSH
 285: LD_INT 80
 287: ST_TO_ADDR
// tech_RadMat := 81 ;
 288: LD_ADDR_EXP 68
 292: PUSH
 293: LD_INT 81
 295: ST_TO_ADDR
// tech_BasicTools := 82 ;
 296: LD_ADDR_EXP 69
 300: PUSH
 301: LD_INT 82
 303: ST_TO_ADDR
// tech_Cargo := 83 ;
 304: LD_ADDR_EXP 70
 308: PUSH
 309: LD_INT 83
 311: ST_TO_ADDR
// tech_Track := 84 ;
 312: LD_ADDR_EXP 71
 316: PUSH
 317: LD_INT 84
 319: ST_TO_ADDR
// tech_Crane := 85 ;
 320: LD_ADDR_EXP 72
 324: PUSH
 325: LD_INT 85
 327: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 328: LD_ADDR_EXP 73
 332: PUSH
 333: LD_INT 86
 335: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 336: LD_ADDR_EXP 74
 340: PUSH
 341: LD_INT 87
 343: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
 344: LD_ADDR_EXP 75
 348: PUSH
 349: LD_INT 88
 351: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
 352: LD_ADDR_EXP 76
 356: PUSH
 357: LD_INT 90
 359: ST_TO_ADDR
// class_mastodont := 31 ;
 360: LD_ADDR_EXP 77
 364: PUSH
 365: LD_INT 31
 367: ST_TO_ADDR
// class_horse := 21 ;
 368: LD_ADDR_EXP 78
 372: PUSH
 373: LD_INT 21
 375: ST_TO_ADDR
// end ;
 376: LD_VAR 0 1
 380: RET
// every 1 do
 381: GO 383
 383: DISABLE
// InitGlobalVariables ; end_of_file
 384: CALL 205 0 0
 388: END
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 389: LD_INT 0
 391: PPUSH
 392: PPUSH
 393: PPUSH
// uc_side := GetSide ( b ) ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_VAR 0 2
 403: PPUSH
 404: CALL_OW 255
 408: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 409: LD_ADDR_OWVAR 21
 413: PUSH
 414: LD_VAR 0 2
 418: PPUSH
 419: CALL_OW 248
 423: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 424: LD_ADDR_VAR 0 5
 428: PUSH
 429: LD_VAR 0 2
 433: PPUSH
 434: CALL_OW 254
 438: PUSH
 439: LD_INT 3
 441: MINUS
 442: ST_TO_ADDR
// if dir < 0 then
 443: LD_VAR 0 5
 447: PUSH
 448: LD_INT 0
 450: LESS
 451: IFFALSE 467
// dir := 6 + dir ;
 453: LD_ADDR_VAR 0 5
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: LD_VAR 0 5
 465: PLUS
 466: ST_TO_ADDR
// un := CreateHuman ;
 467: LD_ADDR_VAR 0 4
 471: PUSH
 472: CALL_OW 44
 476: ST_TO_ADDR
// SetDir ( un , dir ) ;
 477: LD_VAR 0 4
 481: PPUSH
 482: LD_VAR 0 5
 486: PPUSH
 487: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 491: LD_VAR 0 4
 495: PPUSH
 496: LD_VAR 0 2
 500: PPUSH
 501: CALL_OW 52
// end ;
 505: LD_VAR 0 3
 509: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 510: LD_INT 0
 512: PPUSH
 513: PPUSH
// if exist_mode then
 514: LD_VAR 0 2
 518: IFFALSE 543
// unit := CreateCharacter ( prefix & ident ) else
 520: LD_ADDR_VAR 0 5
 524: PUSH
 525: LD_VAR 0 3
 529: PUSH
 530: LD_VAR 0 1
 534: STR
 535: PPUSH
 536: CALL_OW 34
 540: ST_TO_ADDR
 541: GO 558
// unit := NewCharacter ( ident ) ;
 543: LD_ADDR_VAR 0 5
 547: PUSH
 548: LD_VAR 0 1
 552: PPUSH
 553: CALL_OW 25
 557: ST_TO_ADDR
// result := unit ;
 558: LD_ADDR_VAR 0 4
 562: PUSH
 563: LD_VAR 0 5
 567: ST_TO_ADDR
// end ;
 568: LD_VAR 0 4
 572: RET
// export function GetCountOfBuildingsInBase ( base , btype ) ; var i , tmp ; begin
 573: LD_INT 0
 575: PPUSH
 576: PPUSH
 577: PPUSH
// result := 0 ;
 578: LD_ADDR_VAR 0 3
 582: PUSH
 583: LD_INT 0
 585: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_btype , btype ] ) ;
 586: LD_ADDR_VAR 0 5
 590: PUSH
 591: LD_INT 30
 593: PUSH
 594: LD_VAR 0 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PPUSH
 603: CALL_OW 69
 607: ST_TO_ADDR
// if not base or not tmp then
 608: LD_VAR 0 1
 612: NOT
 613: PUSH
 614: LD_VAR 0 5
 618: NOT
 619: OR
 620: IFFALSE 624
// exit ;
 622: GO 672
// for i in tmp do
 624: LD_ADDR_VAR 0 4
 628: PUSH
 629: LD_VAR 0 5
 633: PUSH
 634: FOR_IN
 635: IFFALSE 670
// if GetBase ( i ) = base then
 637: LD_VAR 0 4
 641: PPUSH
 642: CALL_OW 274
 646: PUSH
 647: LD_VAR 0 1
 651: EQUAL
 652: IFFALSE 668
// result := result + 1 ;
 654: LD_ADDR_VAR 0 3
 658: PUSH
 659: LD_VAR 0 3
 663: PUSH
 664: LD_INT 1
 666: PLUS
 667: ST_TO_ADDR
 668: GO 634
 670: POP
 671: POP
// end ;
 672: LD_VAR 0 3
 676: RET
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 677: LD_EXP 55
 681: PUSH
 682: LD_INT 0
 684: EQUAL
 685: PUSH
 686: LD_INT 17
 688: PPUSH
 689: LD_INT 22
 691: PUSH
 692: LD_INT 3
 694: PUSH
 695: EMPTY
 696: LIST
 697: LIST
 698: PUSH
 699: LD_INT 2
 701: PUSH
 702: LD_INT 21
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: PUSH
 712: LD_INT 21
 714: PUSH
 715: LD_INT 2
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: LIST
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PPUSH
 731: CALL_OW 70
 735: PUSH
 736: LD_INT 0
 738: GREATER
 739: AND
 740: IFFALSE 848
 742: GO 744
 744: DISABLE
 745: LD_INT 0
 747: PPUSH
// begin enable ;
 748: ENABLE
// for unit in FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 749: LD_ADDR_VAR 0 1
 753: PUSH
 754: LD_INT 17
 756: PPUSH
 757: LD_INT 22
 759: PUSH
 760: LD_INT 3
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: PUSH
 767: LD_INT 2
 769: PUSH
 770: LD_INT 21
 772: PUSH
 773: LD_INT 1
 775: PUSH
 776: EMPTY
 777: LIST
 778: LIST
 779: PUSH
 780: LD_INT 21
 782: PUSH
 783: LD_INT 2
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: LIST
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PPUSH
 799: CALL_OW 70
 803: PUSH
 804: FOR_IN
 805: IFFALSE 846
// begin ComMoveXY ( unit , GetX ( unit ) + 5 , GetY ( unit ) + 5 ) ;
 807: LD_VAR 0 1
 811: PPUSH
 812: LD_VAR 0 1
 816: PPUSH
 817: CALL_OW 250
 821: PUSH
 822: LD_INT 5
 824: PLUS
 825: PPUSH
 826: LD_VAR 0 1
 830: PPUSH
 831: CALL_OW 251
 835: PUSH
 836: LD_INT 5
 838: PLUS
 839: PPUSH
 840: CALL_OW 111
// end ;
 844: GO 804
 846: POP
 847: POP
// end ;
 848: PPOPN 1
 850: END
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 851: LD_EXP 55
 855: PUSH
 856: LD_INT 0
 858: EQUAL
 859: PUSH
 860: LD_INT 18
 862: PPUSH
 863: LD_INT 22
 865: PUSH
 866: LD_INT 3
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PUSH
 873: LD_INT 2
 875: PUSH
 876: LD_INT 21
 878: PUSH
 879: LD_INT 1
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: LD_INT 21
 888: PUSH
 889: LD_INT 2
 891: PUSH
 892: EMPTY
 893: LIST
 894: LIST
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: LIST
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 70
 909: PUSH
 910: LD_INT 0
 912: GREATER
 913: AND
 914: IFFALSE 1022
 916: GO 918
 918: DISABLE
 919: LD_INT 0
 921: PPUSH
// begin enable ;
 922: ENABLE
// for unit in FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 923: LD_ADDR_VAR 0 1
 927: PUSH
 928: LD_INT 18
 930: PPUSH
 931: LD_INT 22
 933: PUSH
 934: LD_INT 3
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 2
 943: PUSH
 944: LD_INT 21
 946: PUSH
 947: LD_INT 1
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 21
 956: PUSH
 957: LD_INT 2
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: LIST
 968: PUSH
 969: EMPTY
 970: LIST
 971: LIST
 972: PPUSH
 973: CALL_OW 70
 977: PUSH
 978: FOR_IN
 979: IFFALSE 1020
// begin ComMoveXY ( unit , GetX ( unit ) + 5 , GetY ( unit ) + 5 ) ;
 981: LD_VAR 0 1
 985: PPUSH
 986: LD_VAR 0 1
 990: PPUSH
 991: CALL_OW 250
 995: PUSH
 996: LD_INT 5
 998: PLUS
 999: PPUSH
1000: LD_VAR 0 1
1004: PPUSH
1005: CALL_OW 251
1009: PUSH
1010: LD_INT 5
1012: PLUS
1013: PPUSH
1014: CALL_OW 111
// end ;
1018: GO 978
1020: POP
1021: POP
// end ;
1022: PPOPN 1
1024: END
// every 1 trigger IsSelected ( Serpent ) do
1025: LD_INT 137
1027: PPUSH
1028: CALL_OW 306
1032: IFFALSE 1076
1034: GO 1036
1036: DISABLE
// begin SerpentExp ( [ 1 , 2 , 3 , 4 ] ) ;
1037: LD_INT 1
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 3
1045: PUSH
1046: LD_INT 4
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PPUSH
1055: CALL 1077 0 1
// Wait ( 0 0$05 ) ;
1059: LD_INT 175
1061: PPUSH
1062: CALL_OW 67
// Say ( Serpent , 2Langu-Sikret ) ;
1066: LD_INT 137
1068: PPUSH
1069: LD_STRING 2Langu-Sikret
1071: PPUSH
1072: CALL_OW 88
// end ;
1076: END
// export function SerpentExp ( q ) ; var dec , q1 ; begin
1077: LD_INT 0
1079: PPUSH
1080: PPUSH
1081: PPUSH
// dec = SelectiveQuery ( SerpentQuery , q ) ;
1082: LD_ADDR_VAR 0 3
1086: PUSH
1087: LD_STRING SerpentQuery
1089: PPUSH
1090: LD_VAR 0 1
1094: PPUSH
1095: CALL_OW 98
1099: ST_TO_ADDR
// case dec of 1 :
1100: LD_VAR 0 3
1104: PUSH
1105: LD_INT 1
1107: DOUBLE
1108: EQUAL
1109: IFTRUE 1113
1111: GO 1131
1113: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 1000 ) ;
1114: LD_EXP 3
1118: PPUSH
1119: LD_INT 1
1121: PPUSH
1122: LD_INT 1000
1124: PPUSH
1125: CALL_OW 591
// end ; 2 :
1129: GO 1210
1131: LD_INT 2
1133: DOUBLE
1134: EQUAL
1135: IFTRUE 1139
1137: GO 1157
1139: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 1000 ) ;
1140: LD_EXP 3
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: LD_INT 1000
1150: PPUSH
1151: CALL_OW 591
// end ; 3 :
1155: GO 1210
1157: LD_INT 3
1159: DOUBLE
1160: EQUAL
1161: IFTRUE 1165
1163: GO 1183
1165: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 1000 ) ;
1166: LD_EXP 3
1170: PPUSH
1171: LD_INT 3
1173: PPUSH
1174: LD_INT 1000
1176: PPUSH
1177: CALL_OW 591
// end ; 4 :
1181: GO 1210
1183: LD_INT 4
1185: DOUBLE
1186: EQUAL
1187: IFTRUE 1191
1189: GO 1209
1191: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 1000 ) ;
1192: LD_EXP 3
1196: PPUSH
1197: LD_INT 4
1199: PPUSH
1200: LD_INT 1000
1202: PPUSH
1203: CALL_OW 591
// end ; end ;
1207: GO 1210
1209: POP
// end ;
1210: LD_VAR 0 2
1214: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
1215: LD_EXP 3
1219: PPUSH
1220: CALL_OW 301
1224: IFFALSE 1236
1226: GO 1228
1228: DISABLE
// begin YouLost ( YakotichDead ) ;
1229: LD_STRING YakotichDead
1231: PPUSH
1232: CALL_OW 104
// end ;
1236: END
// every 0 0$1 trigger IsDead ( Mietek ) do
1237: LD_EXP 4
1241: PPUSH
1242: CALL_OW 301
1246: IFFALSE 1258
1248: GO 1250
1250: DISABLE
// begin YouLost ( MietekDead ) ;
1251: LD_STRING MietekDead
1253: PPUSH
1254: CALL_OW 104
// end ;
1258: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
1259: LD_VAR 0 1
1263: PUSH
1264: LD_INT 22
1266: PUSH
1267: LD_INT 3
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: PUSH
1274: LD_INT 3
1276: PUSH
1277: LD_INT 23
1279: PUSH
1280: LD_INT 0
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: PUSH
1287: EMPTY
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 21
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: LIST
1305: PPUSH
1306: CALL_OW 69
1310: IN
1311: IFFALSE 1320
// YouLost ( PeopleDead ) ;
1313: LD_STRING PeopleDead
1315: PPUSH
1316: CALL_OW 104
// end ;
1320: PPOPN 1
1322: END
// every 0 0$1 trigger FilterUnitsInArea ( OmikronArea , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) do
1323: LD_INT 15
1325: PPUSH
1326: LD_INT 2
1328: PUSH
1329: LD_INT 22
1331: PUSH
1332: LD_INT 1
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 22
1341: PUSH
1342: LD_INT 4
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: PPUSH
1354: CALL_OW 70
1358: IFFALSE 1370
1360: GO 1362
1362: DISABLE
// begin YouLost ( ConvoysMadeIt ) ;
1363: LD_STRING ConvoysMadeIt
1365: PPUSH
1366: CALL_OW 104
// end ;
1370: END
// every 0 0$1 trigger maksim_back = true do
1371: LD_EXP 45
1375: PUSH
1376: LD_INT 1
1378: EQUAL
1379: IFFALSE 1388
1381: GO 1383
1383: DISABLE
// begin AmAttacks ;
1384: CALL 3844 0 0
// end ;
1388: END
// export function MaksimScout ; begin
1389: LD_INT 0
1391: PPUSH
// SetSide ( Maksim , 6 ) ;
1392: LD_EXP 9
1396: PPUSH
1397: LD_INT 6
1399: PPUSH
1400: CALL_OW 235
// ComMoveToArea ( Maksim , MaksimStop1 ) ;
1404: LD_EXP 9
1408: PPUSH
1409: LD_INT 5
1411: PPUSH
1412: CALL_OW 113
// end ;
1416: LD_VAR 0 1
1420: RET
// every 1 trigger IsInArea ( Maksim , MaksimStop1 ) do
1421: LD_EXP 9
1425: PPUSH
1426: LD_INT 5
1428: PPUSH
1429: CALL_OW 308
1433: IFFALSE 1466
1435: GO 1437
1437: DISABLE
// begin ComHold ( Maksim ) ;
1438: LD_EXP 9
1442: PPUSH
1443: CALL_OW 140
// Wait ( 0 0$10 ) ;
1447: LD_INT 350
1449: PPUSH
1450: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop2 ) ;
1454: LD_EXP 9
1458: PPUSH
1459: LD_INT 6
1461: PPUSH
1462: CALL_OW 113
// end ;
1466: END
// every 1 trigger IsInArea ( Maksim , MaksimStop2 ) do
1467: LD_EXP 9
1471: PPUSH
1472: LD_INT 6
1474: PPUSH
1475: CALL_OW 308
1479: IFFALSE 1503
1481: GO 1483
1483: DISABLE
// begin Wait ( 0 0$10 ) ;
1484: LD_INT 350
1486: PPUSH
1487: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop3 ) ;
1491: LD_EXP 9
1495: PPUSH
1496: LD_INT 7
1498: PPUSH
1499: CALL_OW 113
// end ;
1503: END
// every 1 trigger IsInArea ( Maksim , MaksimStop3 ) do
1504: LD_EXP 9
1508: PPUSH
1509: LD_INT 7
1511: PPUSH
1512: CALL_OW 308
1516: IFFALSE 1550
1518: GO 1520
1520: DISABLE
// begin Wait ( 0 0$10 ) ;
1521: LD_INT 350
1523: PPUSH
1524: CALL_OW 67
// maksim_scout_ended = true ;
1528: LD_ADDR_EXP 44
1532: PUSH
1533: LD_INT 1
1535: ST_TO_ADDR
// ComMoveUnit ( Maksim , Yakotich ) ;
1536: LD_EXP 9
1540: PPUSH
1541: LD_EXP 3
1545: PPUSH
1546: CALL_OW 112
// end ;
1550: END
// every 0 0$1 trigger maksim_back do
1551: LD_EXP 45
1555: IFFALSE 1609
1557: GO 1559
1559: DISABLE
// begin enable ;
1560: ENABLE
// if KurinTime then
1561: LD_EXP 23
1565: IFFALSE 1600
// begin KurinTime := KurinTime - 0 0$1 ;
1567: LD_ADDR_EXP 23
1571: PUSH
1572: LD_EXP 23
1576: PUSH
1577: LD_INT 35
1579: MINUS
1580: ST_TO_ADDR
// display_strings := [ #KurinAttack , KurinTime ] ;
1581: LD_ADDR_OWVAR 47
1585: PUSH
1586: LD_STRING #KurinAttack
1588: PUSH
1589: LD_EXP 23
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: ST_TO_ADDR
// end else
1598: GO 1609
// begin display_strings :=  ;
1600: LD_ADDR_OWVAR 47
1604: PUSH
1605: LD_STRING 
1607: ST_TO_ADDR
// disable ;
1608: DISABLE
// end ; end ;
1609: END
// every 0 0$1 trigger first_attack_clear do
1610: LD_EXP 53
1614: IFFALSE 1674
1616: GO 1618
1618: DISABLE
// begin enable ;
1619: ENABLE
// if MietekTime then
1620: LD_EXP 24
1624: IFFALSE 1665
// begin MietekTime := MietekTime - 0 0$1 ;
1626: LD_ADDR_EXP 24
1630: PUSH
1631: LD_EXP 24
1635: PUSH
1636: LD_INT 35
1638: MINUS
1639: ST_TO_ADDR
// display_strings := display_strings ^ [ #MietekForces , MietekTime ] ;
1640: LD_ADDR_OWVAR 47
1644: PUSH
1645: LD_OWVAR 47
1649: PUSH
1650: LD_STRING #MietekForces
1652: PUSH
1653: LD_EXP 24
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: ADD
1662: ST_TO_ADDR
// end else
1663: GO 1674
// begin display_strings :=  ;
1665: LD_ADDR_OWVAR 47
1669: PUSH
1670: LD_STRING 
1672: ST_TO_ADDR
// disable ;
1673: DISABLE
// end ; end ; end_of_file
1674: END
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
1675: LD_VAR 0 1
1679: PPUSH
1680: CALL_OW 255
1684: PUSH
1685: LD_INT 3
1687: EQUAL
1688: PUSH
1689: LD_VAR 0 1
1693: PPUSH
1694: CALL_OW 266
1698: PUSH
1699: LD_INT 0
1701: EQUAL
1702: AND
1703: IFFALSE 1728
// begin RuDep := building ;
1705: LD_ADDR_EXP 79
1709: PUSH
1710: LD_VAR 0 1
1714: ST_TO_ADDR
// SetRestrict ( b_depot , 3 , false ) ;
1715: LD_INT 0
1717: PPUSH
1718: LD_INT 3
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 324
// end ; end ;
1728: PPOPN 2
1730: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 3 and GetBType ( b ) = b_depot then
1731: LD_VAR 0 1
1735: PPUSH
1736: CALL_OW 255
1740: PUSH
1741: LD_INT 3
1743: EQUAL
1744: PUSH
1745: LD_VAR 0 1
1749: PPUSH
1750: CALL_OW 266
1754: PUSH
1755: LD_INT 0
1757: EQUAL
1758: AND
1759: IFFALSE 1813
// begin DialogueOn ;
1761: CALL_OW 6
// Say ( Boris , 2Bor-01 ) ;
1765: LD_EXP 5
1769: PPUSH
1770: LD_STRING 2Bor-01
1772: PPUSH
1773: CALL_OW 88
// Say ( Vasilij , 2Vas-05 ) ;
1777: LD_EXP 6
1781: PPUSH
1782: LD_STRING 2Vas-05
1784: PPUSH
1785: CALL_OW 88
// ChangeMissionObjectives ( transport ) ;
1789: LD_STRING transport
1791: PPUSH
1792: CALL_OW 337
// SetTech ( 83 , 3 , 1 ) ;
1796: LD_INT 83
1798: PPUSH
1799: LD_INT 3
1801: PPUSH
1802: LD_INT 1
1804: PPUSH
1805: CALL_OW 322
// DialogueOff ;
1809: CALL_OW 7
// end ; if GetSide ( b ) = 3 and GetBType ( b ) = b_lab then
1813: LD_VAR 0 1
1817: PPUSH
1818: CALL_OW 255
1822: PUSH
1823: LD_INT 3
1825: EQUAL
1826: PUSH
1827: LD_VAR 0 1
1831: PPUSH
1832: CALL_OW 266
1836: PUSH
1837: LD_INT 6
1839: EQUAL
1840: AND
1841: IFFALSE 1899
// begin Say ( Vasilij , 2Vas-01 ) ;
1843: LD_EXP 6
1847: PPUSH
1848: LD_STRING 2Vas-01
1850: PPUSH
1851: CALL_OW 88
// Say ( Vasilij , 2Vas-02 ) ;
1855: LD_EXP 6
1859: PPUSH
1860: LD_STRING 2Vas-02
1862: PPUSH
1863: CALL_OW 88
// Say ( Yakotich , 2Yak-14 ) ;
1867: LD_EXP 3
1871: PPUSH
1872: LD_STRING 2Yak-14
1874: PPUSH
1875: CALL_OW 88
// ChangeMissionObjectives ( gattling ) ;
1879: LD_STRING gattling
1881: PPUSH
1882: CALL_OW 337
// SetTech ( 69 , 3 , 1 ) ;
1886: LD_INT 69
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL_OW 322
// end ; end ;
1899: PPOPN 1
1901: END
// on VehicleRecycled ( BuildingID , VehicleID , Side , Nation , X , Y , Direction , Chassis , Controller , Engine , Weapon ) do begin if Side = 3 and Nation = 1 and Weapon in [ 3 , 5 ] and gun_recycled = false then
1902: LD_VAR 0 3
1906: PUSH
1907: LD_INT 3
1909: EQUAL
1910: PUSH
1911: LD_VAR 0 4
1915: PUSH
1916: LD_INT 1
1918: EQUAL
1919: AND
1920: PUSH
1921: LD_VAR 0 11
1925: PUSH
1926: LD_INT 3
1928: PUSH
1929: LD_INT 5
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: IN
1936: AND
1937: PUSH
1938: LD_EXP 49
1942: PUSH
1943: LD_INT 0
1945: EQUAL
1946: AND
1947: IFFALSE 1995
// begin gun_recycled = true ;
1949: LD_ADDR_EXP 49
1953: PUSH
1954: LD_INT 1
1956: ST_TO_ADDR
// Say ( Stanislav , 2Stan-04 ) ;
1957: LD_EXP 16
1961: PPUSH
1962: LD_STRING 2Stan-04
1964: PPUSH
1965: CALL_OW 88
// SetTech ( 39 , 3 , 1 ) ;
1969: LD_INT 39
1971: PPUSH
1972: LD_INT 3
1974: PPUSH
1975: LD_INT 1
1977: PPUSH
1978: CALL_OW 322
// SetRestrict ( 17 , 3 , 1 ) ;
1982: LD_INT 17
1984: PPUSH
1985: LD_INT 3
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: CALL_OW 324
// end ; end ;
1995: PPOPN 11
1997: END
// on Contact ( side1 , side2 ) do begin if ( ( side1 = 4 and side2 = 3 ) or ( side1 = 3 and side2 = 4 ) ) and reiforcements_called = false then
1998: LD_VAR 0 1
2002: PUSH
2003: LD_INT 4
2005: EQUAL
2006: PUSH
2007: LD_VAR 0 2
2011: PUSH
2012: LD_INT 3
2014: EQUAL
2015: AND
2016: PUSH
2017: LD_VAR 0 1
2021: PUSH
2022: LD_INT 3
2024: EQUAL
2025: PUSH
2026: LD_VAR 0 2
2030: PUSH
2031: LD_INT 4
2033: EQUAL
2034: AND
2035: OR
2036: PUSH
2037: LD_EXP 54
2041: PUSH
2042: LD_INT 0
2044: EQUAL
2045: AND
2046: IFFALSE 2150
// begin reiforcements_called := true ;
2048: LD_ADDR_EXP 54
2052: PUSH
2053: LD_INT 1
2055: ST_TO_ADDR
// Say ( Yakotich , 2Yak-23 ) ;
2056: LD_EXP 3
2060: PPUSH
2061: LD_STRING 2Yak-23
2063: PPUSH
2064: CALL_OW 88
// Wait ( 0 0$10 ) ;
2068: LD_INT 350
2070: PPUSH
2071: CALL_OW 67
// SayRadio ( Yakotich , 2Yak-Reinforcements ) ;
2075: LD_EXP 3
2079: PPUSH
2080: LD_STRING 2Yak-Reinforcements
2082: PPUSH
2083: CALL_OW 94
// SayRadio ( Morozov , 2Moro-Reinforcements ) ;
2087: LD_EXP 17
2091: PPUSH
2092: LD_STRING 2Moro-Reinforcements
2094: PPUSH
2095: CALL_OW 94
// Wait ( 0 0$10 ) ;
2099: LD_INT 350
2101: PPUSH
2102: CALL_OW 67
// SayRadio ( Mietek , 2Ryn-04 ) ;
2106: LD_EXP 4
2110: PPUSH
2111: LD_STRING 2Ryn-04
2113: PPUSH
2114: CALL_OW 94
// SayRadio ( Mietek , 2Ryn-05 ) ;
2118: LD_EXP 4
2122: PPUSH
2123: LD_STRING 2Ryn-05
2125: PPUSH
2126: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-24 ) ;
2130: LD_EXP 3
2134: PPUSH
2135: LD_STRING 2Yak-24
2137: PPUSH
2138: CALL_OW 94
// first_attack_clear = true ;
2142: LD_ADDR_EXP 53
2146: PUSH
2147: LD_INT 1
2149: ST_TO_ADDR
// end ; end ;
2150: PPOPN 2
2152: END
// every 0 0$1 trigger Researched ( 3 , 69 ) do
2153: LD_INT 3
2155: PPUSH
2156: LD_INT 69
2158: PPUSH
2159: CALL_OW 325
2163: IFFALSE 2207
2165: GO 2167
2167: DISABLE
// begin Say ( Vasilij , 2Vas-03 ) ;
2168: LD_EXP 6
2172: PPUSH
2173: LD_STRING 2Vas-03
2175: PPUSH
2176: CALL_OW 88
// Say ( Vasilij , 2Vas-04 ) ;
2180: LD_EXP 6
2184: PPUSH
2185: LD_STRING 2Vas-04
2187: PPUSH
2188: CALL_OW 88
// gattling_researched = true ;
2192: LD_ADDR_EXP 47
2196: PUSH
2197: LD_INT 1
2199: ST_TO_ADDR
// ChangeMissionObjectives ( gattling-2 ) ;
2200: LD_STRING gattling-2
2202: PPUSH
2203: CALL_OW 337
// end ;
2207: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
2208: LD_INT 3
2210: PPUSH
2211: LD_INT 90
2213: PPUSH
2214: CALL_OW 325
2218: IFFALSE 2238
2220: GO 2222
2222: DISABLE
// begin turrets_researched = true ;
2223: LD_ADDR_EXP 46
2227: PUSH
2228: LD_INT 1
2230: ST_TO_ADDR
// ChangeMissionObjectives ( turret-2 ) ;
2231: LD_STRING turret-2
2233: PPUSH
2234: CALL_OW 337
// end ;
2238: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 89 ] , [ f_weapon , 51 ] ] ] ) do
2239: LD_INT 22
2241: PUSH
2242: LD_INT 3
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 21
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: LD_INT 2
2261: PUSH
2262: LD_INT 34
2264: PUSH
2265: LD_INT 89
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PUSH
2272: LD_INT 34
2274: PUSH
2275: LD_INT 51
2277: PUSH
2278: EMPTY
2279: LIST
2280: LIST
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: LIST
2291: PPUSH
2292: CALL_OW 69
2296: IFFALSE 2316
2298: GO 2300
2300: DISABLE
// begin ChangeMissionObjectives ( transport-2 ) ;
2301: LD_STRING transport-2
2303: PPUSH
2304: CALL_OW 337
// transport_builded = true ;
2308: LD_ADDR_EXP 51
2312: PUSH
2313: LD_INT 1
2315: ST_TO_ADDR
// end ;
2316: END
// every 0 0$1 trigger Researched ( 3 , 39 ) do
2317: LD_INT 3
2319: PPUSH
2320: LD_INT 39
2322: PPUSH
2323: CALL_OW 325
2327: IFFALSE 2383
2329: GO 2331
2331: DISABLE
// begin Say ( Stanislav , 2Stan-05 ) ;
2332: LD_EXP 16
2336: PPUSH
2337: LD_STRING 2Stan-05
2339: PPUSH
2340: CALL_OW 88
// Say ( Stanislav , 2Stan-06 ) ;
2344: LD_EXP 16
2348: PPUSH
2349: LD_STRING 2Stan-06
2351: PPUSH
2352: CALL_OW 88
// Say ( Yakotich , 2Yak-Stan-02 ) ;
2356: LD_EXP 3
2360: PPUSH
2361: LD_STRING 2Yak-Stan-02
2363: PPUSH
2364: CALL_OW 88
// gun_researched = true ;
2368: LD_ADDR_EXP 48
2372: PUSH
2373: LD_INT 1
2375: ST_TO_ADDR
// ChangeMissionObjectives ( gun-2 ) ;
2376: LD_STRING gun-2
2378: PPUSH
2379: CALL_OW 337
// end ; end_of_file
2383: END
// every 5 5$0 do var i ;
2384: GO 2386
2386: DISABLE
2387: LD_INT 0
2389: PPUSH
// begin for i = 1 to 4 do
2390: LD_ADDR_VAR 0 1
2394: PUSH
2395: DOUBLE
2396: LD_INT 1
2398: DEC
2399: ST_TO_ADDR
2400: LD_INT 4
2402: PUSH
2403: FOR_TO
2404: IFFALSE 2430
// begin CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
2406: LD_INT 2
2408: PPUSH
2409: LD_INT 5
2411: PPUSH
2412: CALL_OW 12
2416: PPUSH
2417: LD_INT 4
2419: PPUSH
2420: LD_INT 1
2422: PPUSH
2423: CALL_OW 55
// enable ;
2427: ENABLE
// end ;
2428: GO 2403
2430: POP
2431: POP
// end ; end_of_file
2432: PPOPN 1
2434: END
// export function InitAmerican ; var i , y , turrety , lab , fabryka , zbrojka , turrety2 , lab2 , fabryka2 , zbrojka2 ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
2440: PPUSH
2441: PPUSH
2442: PPUSH
2443: PPUSH
2444: PPUSH
2445: PPUSH
2446: PPUSH
2447: PPUSH
// AmNorthPersonel := [ ] ;
2448: LD_ADDR_EXP 27
2452: PUSH
2453: EMPTY
2454: ST_TO_ADDR
// uc_side := 1 ;
2455: LD_ADDR_OWVAR 20
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// uc_nation := 1 ;
2463: LD_ADDR_OWVAR 21
2467: PUSH
2468: LD_INT 1
2470: ST_TO_ADDR
// for i = 1 to [ 7 , 8 , 9 ] [ Difficulty ] do
2471: LD_ADDR_VAR 0 2
2475: PUSH
2476: DOUBLE
2477: LD_INT 1
2479: DEC
2480: ST_TO_ADDR
2481: LD_INT 7
2483: PUSH
2484: LD_INT 8
2486: PUSH
2487: LD_INT 9
2489: PUSH
2490: EMPTY
2491: LIST
2492: LIST
2493: LIST
2494: PUSH
2495: LD_OWVAR 67
2499: ARRAY
2500: PUSH
2501: FOR_TO
2502: IFFALSE 2557
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2504: LD_INT 0
2506: PPUSH
2507: LD_INT 1
2509: PPUSH
2510: CALL_OW 12
2514: PPUSH
2515: LD_INT 1
2517: PUSH
2518: LD_INT 3
2520: PUSH
2521: LD_INT 5
2523: PUSH
2524: EMPTY
2525: LIST
2526: LIST
2527: LIST
2528: PUSH
2529: LD_OWVAR 67
2533: ARRAY
2534: PPUSH
2535: CALL_OW 381
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2539: LD_ADDR_EXP 27
2543: PUSH
2544: LD_EXP 27
2548: PUSH
2549: CALL_OW 44
2553: ADD
2554: ST_TO_ADDR
// end ;
2555: GO 2501
2557: POP
2558: POP
// for i = 1 to 2 do
2559: LD_ADDR_VAR 0 2
2563: PUSH
2564: DOUBLE
2565: LD_INT 1
2567: DEC
2568: ST_TO_ADDR
2569: LD_INT 2
2571: PUSH
2572: FOR_TO
2573: IFFALSE 2628
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2575: LD_INT 0
2577: PPUSH
2578: LD_INT 1
2580: PPUSH
2581: CALL_OW 12
2585: PPUSH
2586: LD_INT 1
2588: PUSH
2589: LD_INT 3
2591: PUSH
2592: LD_INT 5
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PUSH
2600: LD_OWVAR 67
2604: ARRAY
2605: PPUSH
2606: CALL_OW 382
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2610: LD_ADDR_EXP 27
2614: PUSH
2615: LD_EXP 27
2619: PUSH
2620: CALL_OW 44
2624: ADD
2625: ST_TO_ADDR
// end ;
2626: GO 2572
2628: POP
2629: POP
// for i = 1 to 1 do
2630: LD_ADDR_VAR 0 2
2634: PUSH
2635: DOUBLE
2636: LD_INT 1
2638: DEC
2639: ST_TO_ADDR
2640: LD_INT 1
2642: PUSH
2643: FOR_TO
2644: IFFALSE 2699
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2646: LD_INT 0
2648: PPUSH
2649: LD_INT 1
2651: PPUSH
2652: CALL_OW 12
2656: PPUSH
2657: LD_INT 1
2659: PUSH
2660: LD_INT 3
2662: PUSH
2663: LD_INT 5
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: LIST
2670: PUSH
2671: LD_OWVAR 67
2675: ARRAY
2676: PPUSH
2677: CALL_OW 383
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2681: LD_ADDR_EXP 27
2685: PUSH
2686: LD_EXP 27
2690: PUSH
2691: CALL_OW 44
2695: ADD
2696: ST_TO_ADDR
// end ;
2697: GO 2643
2699: POP
2700: POP
// for i = 1 to 1 do
2701: LD_ADDR_VAR 0 2
2705: PUSH
2706: DOUBLE
2707: LD_INT 1
2709: DEC
2710: ST_TO_ADDR
2711: LD_INT 1
2713: PUSH
2714: FOR_TO
2715: IFFALSE 2770
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2717: LD_INT 0
2719: PPUSH
2720: LD_INT 1
2722: PPUSH
2723: CALL_OW 12
2727: PPUSH
2728: LD_INT 1
2730: PUSH
2731: LD_INT 3
2733: PUSH
2734: LD_INT 5
2736: PUSH
2737: EMPTY
2738: LIST
2739: LIST
2740: LIST
2741: PUSH
2742: LD_OWVAR 67
2746: ARRAY
2747: PPUSH
2748: CALL_OW 384
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2752: LD_ADDR_EXP 27
2756: PUSH
2757: LD_EXP 27
2761: PUSH
2762: CALL_OW 44
2766: ADD
2767: ST_TO_ADDR
// end ;
2768: GO 2714
2770: POP
2771: POP
// turrety := FilterUnitsInArea ( AmNorthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
2772: LD_ADDR_VAR 0 4
2776: PUSH
2777: LD_INT 11
2779: PPUSH
2780: LD_INT 2
2782: PUSH
2783: LD_INT 30
2785: PUSH
2786: LD_INT 31
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 30
2795: PUSH
2796: LD_INT 32
2798: PUSH
2799: EMPTY
2800: LIST
2801: LIST
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: PPUSH
2808: CALL_OW 70
2812: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_lab_half ] ] ) ;
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_INT 11
2820: PPUSH
2821: LD_INT 30
2823: PUSH
2824: LD_INT 7
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PUSH
2831: EMPTY
2832: LIST
2833: PPUSH
2834: CALL_OW 70
2838: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_factory ] ] ) ;
2839: LD_ADDR_VAR 0 6
2843: PUSH
2844: LD_INT 11
2846: PPUSH
2847: LD_INT 30
2849: PUSH
2850: LD_INT 3
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: PUSH
2857: EMPTY
2858: LIST
2859: PPUSH
2860: CALL_OW 70
2864: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
2865: LD_ADDR_VAR 0 7
2869: PUSH
2870: LD_INT 11
2872: PPUSH
2873: LD_INT 30
2875: PUSH
2876: LD_INT 4
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: PUSH
2883: EMPTY
2884: LIST
2885: PPUSH
2886: CALL_OW 70
2890: ST_TO_ADDR
// y := 1 ;
2891: LD_ADDR_VAR 0 3
2895: PUSH
2896: LD_INT 1
2898: ST_TO_ADDR
// for i in AmNorthPersonel do
2899: LD_ADDR_VAR 0 2
2903: PUSH
2904: LD_EXP 27
2908: PUSH
2909: FOR_IN
2910: IFFALSE 3096
// begin PlaceUnitArea ( i , AmNorthArea , false ) ;
2912: LD_VAR 0 2
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: LD_INT 0
2922: PPUSH
2923: CALL_OW 49
// case GetClass ( i ) of 1 :
2927: LD_VAR 0 2
2931: PPUSH
2932: CALL_OW 257
2936: PUSH
2937: LD_INT 1
2939: DOUBLE
2940: EQUAL
2941: IFTRUE 2945
2943: GO 3012
2945: POP
// begin if y > 6 then
2946: LD_VAR 0 3
2950: PUSH
2951: LD_INT 6
2953: GREATER
2954: IFFALSE 2976
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
2956: LD_VAR 0 2
2960: PPUSH
2961: LD_VAR 0 7
2965: PUSH
2966: LD_INT 1
2968: ARRAY
2969: PPUSH
2970: CALL_OW 120
2974: GO 2996
// ComEnterUnit ( i , turrety [ y ] ) ;
2976: LD_VAR 0 2
2980: PPUSH
2981: LD_VAR 0 4
2985: PUSH
2986: LD_VAR 0 3
2990: ARRAY
2991: PPUSH
2992: CALL_OW 120
// y = y + 1 ;
2996: LD_ADDR_VAR 0 3
3000: PUSH
3001: LD_VAR 0 3
3005: PUSH
3006: LD_INT 1
3008: PLUS
3009: ST_TO_ADDR
// end ; 2 :
3010: GO 3094
3012: LD_INT 2
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3035
3020: POP
// ComEnterUnit ( i , AmDep1 ) ; 3 :
3021: LD_VAR 0 2
3025: PPUSH
3026: LD_INT 1
3028: PPUSH
3029: CALL_OW 120
3033: GO 3094
3035: LD_INT 3
3037: DOUBLE
3038: EQUAL
3039: IFTRUE 3043
3041: GO 3064
3043: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_VAR 0 6
3053: PUSH
3054: LD_INT 1
3056: ARRAY
3057: PPUSH
3058: CALL_OW 120
3062: GO 3094
3064: LD_INT 4
3066: DOUBLE
3067: EQUAL
3068: IFTRUE 3072
3070: GO 3093
3072: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3073: LD_VAR 0 2
3077: PPUSH
3078: LD_VAR 0 5
3082: PUSH
3083: LD_INT 1
3085: ARRAY
3086: PPUSH
3087: CALL_OW 120
3091: GO 3094
3093: POP
// end ;
3094: GO 2909
3096: POP
3097: POP
// AmSouthPersonel := [ ] ;
3098: LD_ADDR_EXP 28
3102: PUSH
3103: EMPTY
3104: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3105: LD_ADDR_VAR 0 2
3109: PUSH
3110: DOUBLE
3111: LD_INT 1
3113: DEC
3114: ST_TO_ADDR
3115: LD_INT 4
3117: PUSH
3118: LD_INT 5
3120: PUSH
3121: LD_INT 6
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: PUSH
3129: LD_OWVAR 67
3133: ARRAY
3134: PUSH
3135: FOR_TO
3136: IFFALSE 3191
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3138: LD_INT 0
3140: PPUSH
3141: LD_INT 1
3143: PPUSH
3144: CALL_OW 12
3148: PPUSH
3149: LD_INT 1
3151: PUSH
3152: LD_INT 3
3154: PUSH
3155: LD_INT 5
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: LIST
3162: PUSH
3163: LD_OWVAR 67
3167: ARRAY
3168: PPUSH
3169: CALL_OW 381
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3173: LD_ADDR_EXP 28
3177: PUSH
3178: LD_EXP 28
3182: PUSH
3183: CALL_OW 44
3187: ADD
3188: ST_TO_ADDR
// end ;
3189: GO 3135
3191: POP
3192: POP
// for i = 1 to 1 do
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: DOUBLE
3199: LD_INT 1
3201: DEC
3202: ST_TO_ADDR
3203: LD_INT 1
3205: PUSH
3206: FOR_TO
3207: IFFALSE 3262
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: CALL_OW 12
3219: PPUSH
3220: LD_INT 1
3222: PUSH
3223: LD_INT 3
3225: PUSH
3226: LD_INT 5
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: LIST
3233: PUSH
3234: LD_OWVAR 67
3238: ARRAY
3239: PPUSH
3240: CALL_OW 382
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3244: LD_ADDR_EXP 28
3248: PUSH
3249: LD_EXP 28
3253: PUSH
3254: CALL_OW 44
3258: ADD
3259: ST_TO_ADDR
// end ;
3260: GO 3206
3262: POP
3263: POP
// for i = 1 to 2 do
3264: LD_ADDR_VAR 0 2
3268: PUSH
3269: DOUBLE
3270: LD_INT 1
3272: DEC
3273: ST_TO_ADDR
3274: LD_INT 2
3276: PUSH
3277: FOR_TO
3278: IFFALSE 3333
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3280: LD_INT 0
3282: PPUSH
3283: LD_INT 1
3285: PPUSH
3286: CALL_OW 12
3290: PPUSH
3291: LD_INT 1
3293: PUSH
3294: LD_INT 3
3296: PUSH
3297: LD_INT 5
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: PUSH
3305: LD_OWVAR 67
3309: ARRAY
3310: PPUSH
3311: CALL_OW 383
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3315: LD_ADDR_EXP 28
3319: PUSH
3320: LD_EXP 28
3324: PUSH
3325: CALL_OW 44
3329: ADD
3330: ST_TO_ADDR
// end ;
3331: GO 3277
3333: POP
3334: POP
// for i = 1 to 1 do
3335: LD_ADDR_VAR 0 2
3339: PUSH
3340: DOUBLE
3341: LD_INT 1
3343: DEC
3344: ST_TO_ADDR
3345: LD_INT 1
3347: PUSH
3348: FOR_TO
3349: IFFALSE 3404
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3351: LD_INT 0
3353: PPUSH
3354: LD_INT 1
3356: PPUSH
3357: CALL_OW 12
3361: PPUSH
3362: LD_INT 1
3364: PUSH
3365: LD_INT 3
3367: PUSH
3368: LD_INT 5
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: LIST
3375: PUSH
3376: LD_OWVAR 67
3380: ARRAY
3381: PPUSH
3382: CALL_OW 384
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3386: LD_ADDR_EXP 28
3390: PUSH
3391: LD_EXP 28
3395: PUSH
3396: CALL_OW 44
3400: ADD
3401: ST_TO_ADDR
// end ;
3402: GO 3348
3404: POP
3405: POP
// turrety := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
3406: LD_ADDR_VAR 0 4
3410: PUSH
3411: LD_INT 13
3413: PPUSH
3414: LD_INT 2
3416: PUSH
3417: LD_INT 30
3419: PUSH
3420: LD_INT 31
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PUSH
3427: LD_INT 30
3429: PUSH
3430: LD_INT 32
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: LIST
3441: PPUSH
3442: CALL_OW 70
3446: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_lab ] ] ) ;
3447: LD_ADDR_VAR 0 5
3451: PUSH
3452: LD_INT 13
3454: PPUSH
3455: LD_INT 30
3457: PUSH
3458: LD_INT 6
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: EMPTY
3466: LIST
3467: PPUSH
3468: CALL_OW 70
3472: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_workshop ] ] ) ;
3473: LD_ADDR_VAR 0 6
3477: PUSH
3478: LD_INT 13
3480: PPUSH
3481: LD_INT 2
3483: PUSH
3484: LD_INT 30
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: LD_INT 30
3496: PUSH
3497: LD_INT 2
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: PPUSH
3509: CALL_OW 70
3513: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
3514: LD_ADDR_VAR 0 7
3518: PUSH
3519: LD_INT 13
3521: PPUSH
3522: LD_INT 30
3524: PUSH
3525: LD_INT 4
3527: PUSH
3528: EMPTY
3529: LIST
3530: LIST
3531: PUSH
3532: EMPTY
3533: LIST
3534: PPUSH
3535: CALL_OW 70
3539: ST_TO_ADDR
// y := 1 ;
3540: LD_ADDR_VAR 0 3
3544: PUSH
3545: LD_INT 1
3547: ST_TO_ADDR
// for i in AmSouthPersonel do
3548: LD_ADDR_VAR 0 2
3552: PUSH
3553: LD_EXP 28
3557: PUSH
3558: FOR_IN
3559: IFFALSE 3745
// begin PlaceUnitArea ( i , AmSouthArea , false ) ;
3561: LD_VAR 0 2
3565: PPUSH
3566: LD_INT 12
3568: PPUSH
3569: LD_INT 0
3571: PPUSH
3572: CALL_OW 49
// case GetClass ( i ) of 1 :
3576: LD_VAR 0 2
3580: PPUSH
3581: CALL_OW 257
3585: PUSH
3586: LD_INT 1
3588: DOUBLE
3589: EQUAL
3590: IFTRUE 3594
3592: GO 3661
3594: POP
// begin if y > 2 then
3595: LD_VAR 0 3
3599: PUSH
3600: LD_INT 2
3602: GREATER
3603: IFFALSE 3625
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
3605: LD_VAR 0 2
3609: PPUSH
3610: LD_VAR 0 7
3614: PUSH
3615: LD_INT 1
3617: ARRAY
3618: PPUSH
3619: CALL_OW 120
3623: GO 3645
// ComEnterUnit ( i , turrety [ y ] ) ;
3625: LD_VAR 0 2
3629: PPUSH
3630: LD_VAR 0 4
3634: PUSH
3635: LD_VAR 0 3
3639: ARRAY
3640: PPUSH
3641: CALL_OW 120
// y = y + 1 ;
3645: LD_ADDR_VAR 0 3
3649: PUSH
3650: LD_VAR 0 3
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: ST_TO_ADDR
// end ; 2 :
3659: GO 3743
3661: LD_INT 2
3663: DOUBLE
3664: EQUAL
3665: IFTRUE 3669
3667: GO 3684
3669: POP
// ComEnterUnit ( i , AmDep2 ) ; 3 :
3670: LD_VAR 0 2
3674: PPUSH
3675: LD_INT 47
3677: PPUSH
3678: CALL_OW 120
3682: GO 3743
3684: LD_INT 3
3686: DOUBLE
3687: EQUAL
3688: IFTRUE 3692
3690: GO 3713
3692: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3693: LD_VAR 0 2
3697: PPUSH
3698: LD_VAR 0 6
3702: PUSH
3703: LD_INT 1
3705: ARRAY
3706: PPUSH
3707: CALL_OW 120
3711: GO 3743
3713: LD_INT 4
3715: DOUBLE
3716: EQUAL
3717: IFTRUE 3721
3719: GO 3742
3721: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3722: LD_VAR 0 2
3726: PPUSH
3727: LD_VAR 0 5
3731: PUSH
3732: LD_INT 1
3734: ARRAY
3735: PPUSH
3736: CALL_OW 120
3740: GO 3743
3742: POP
// end ;
3743: GO 3558
3745: POP
3746: POP
// end ;
3747: LD_VAR 0 1
3751: RET
// every 0 0$1 do var enemy , attacker ;
3752: GO 3754
3754: DISABLE
3755: LD_INT 0
3757: PPUSH
3758: PPUSH
// begin enable ;
3759: ENABLE
// enemy = Filterallunits ( [ f_side , 3 ] ) ;
3760: LD_ADDR_VAR 0 1
3764: PUSH
3765: LD_INT 22
3767: PUSH
3768: LD_INT 3
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PPUSH
3775: CALL_OW 69
3779: ST_TO_ADDR
// for attacker in AmConvoysVehicles do
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: LD_EXP 26
3789: PUSH
3790: FOR_IN
3791: IFFALSE 3819
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
3793: LD_VAR 0 2
3797: PPUSH
3798: LD_VAR 0 1
3802: PPUSH
3803: LD_VAR 0 2
3807: PPUSH
3808: CALL_OW 74
3812: PPUSH
3813: CALL_OW 115
3817: GO 3790
3819: POP
3820: POP
// end ;
3821: PPOPN 2
3823: END
// every 0 0$1 do
3824: GO 3826
3826: DISABLE
// begin enable ;
3827: ENABLE
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
3828: LD_EXP 25
3832: PPUSH
3833: LD_INT 157
3835: PPUSH
3836: LD_INT 97
3838: PPUSH
3839: CALL_OW 114
// end ;
3843: END
// export function AmAttacks ; var i ; begin
3844: LD_INT 0
3846: PPUSH
3847: PPUSH
// Uc_Side = 4 ;
3848: LD_ADDR_OWVAR 20
3852: PUSH
3853: LD_INT 4
3855: ST_TO_ADDR
// Uc_Nation = 1 ;
3856: LD_ADDR_OWVAR 21
3860: PUSH
3861: LD_INT 1
3863: ST_TO_ADDR
// Wait ( 4 4$30 ) ;
3864: LD_INT 9450
3866: PPUSH
3867: CALL_OW 67
// first_attack_spawned = true ;
3871: LD_ADDR_EXP 52
3875: PUSH
3876: LD_INT 1
3878: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
3879: LD_ADDR_VAR 0 2
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_INT 2
3891: PUSH
3892: LD_INT 2
3894: PUSH
3895: LD_INT 3
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: LIST
3902: PUSH
3903: LD_OWVAR 67
3907: ARRAY
3908: PUSH
3909: FOR_TO
3910: IFFALSE 3990
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
3912: LD_INT 0
3914: PPUSH
3915: LD_INT 1
3917: PPUSH
3918: CALL_OW 12
3922: PPUSH
3923: LD_INT 1
3925: PUSH
3926: LD_INT 2
3928: PUSH
3929: LD_INT 3
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: LIST
3936: PUSH
3937: LD_OWVAR 67
3941: ARRAY
3942: PPUSH
3943: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
3947: LD_ADDR_EXP 37
3951: PUSH
3952: CALL_OW 44
3956: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
3957: LD_ADDR_EXP 25
3961: PUSH
3962: LD_EXP 25
3966: PUSH
3967: LD_EXP 37
3971: ADD
3972: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
3973: LD_EXP 37
3977: PPUSH
3978: LD_INT 1
3980: PPUSH
3981: LD_INT 0
3983: PPUSH
3984: CALL_OW 49
// end ;
3988: GO 3909
3990: POP
3991: POP
// for i = 1 to [ 0 , 1 , 1 ] [ Difficulty ] do
3992: LD_ADDR_VAR 0 2
3996: PUSH
3997: DOUBLE
3998: LD_INT 1
4000: DEC
4001: ST_TO_ADDR
4002: LD_INT 0
4004: PUSH
4005: LD_INT 1
4007: PUSH
4008: LD_INT 1
4010: PUSH
4011: EMPTY
4012: LIST
4013: LIST
4014: LIST
4015: PUSH
4016: LD_OWVAR 67
4020: ARRAY
4021: PUSH
4022: FOR_TO
4023: IFFALSE 4103
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4025: LD_INT 0
4027: PPUSH
4028: LD_INT 1
4030: PPUSH
4031: CALL_OW 12
4035: PPUSH
4036: LD_INT 1
4038: PUSH
4039: LD_INT 2
4041: PUSH
4042: LD_INT 3
4044: PUSH
4045: EMPTY
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_OWVAR 67
4054: ARRAY
4055: PPUSH
4056: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4060: LD_ADDR_EXP 38
4064: PUSH
4065: CALL_OW 44
4069: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4070: LD_ADDR_EXP 25
4074: PUSH
4075: LD_EXP 25
4079: PUSH
4080: LD_EXP 38
4084: ADD
4085: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4086: LD_EXP 38
4090: PPUSH
4091: LD_INT 1
4093: PPUSH
4094: LD_INT 0
4096: PPUSH
4097: CALL_OW 49
// end ;
4101: GO 4022
4103: POP
4104: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4105: LD_ADDR_VAR 0 2
4109: PUSH
4110: DOUBLE
4111: LD_INT 1
4113: DEC
4114: ST_TO_ADDR
4115: LD_INT 1
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: LD_INT 1
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: PUSH
4129: LD_OWVAR 67
4133: ARRAY
4134: PUSH
4135: FOR_TO
4136: IFFALSE 4216
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4138: LD_INT 0
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: CALL_OW 12
4148: PPUSH
4149: LD_INT 1
4151: PUSH
4152: LD_INT 2
4154: PUSH
4155: LD_INT 3
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_OWVAR 67
4167: ARRAY
4168: PPUSH
4169: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4173: LD_ADDR_EXP 40
4177: PUSH
4178: CALL_OW 44
4182: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4183: LD_ADDR_EXP 25
4187: PUSH
4188: LD_EXP 25
4192: PUSH
4193: LD_EXP 40
4197: ADD
4198: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4199: LD_EXP 40
4203: PPUSH
4204: LD_INT 1
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: CALL_OW 49
// end ;
4214: GO 4135
4216: POP
4217: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4218: LD_ADDR_VAR 0 2
4222: PUSH
4223: DOUBLE
4224: LD_INT 1
4226: DEC
4227: ST_TO_ADDR
4228: LD_INT 1
4230: PUSH
4231: LD_INT 1
4233: PUSH
4234: LD_INT 1
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: LIST
4241: PUSH
4242: LD_OWVAR 67
4246: ARRAY
4247: PUSH
4248: FOR_TO
4249: IFFALSE 4423
// begin uc_side := 4 ;
4251: LD_ADDR_OWVAR 20
4255: PUSH
4256: LD_INT 4
4258: ST_TO_ADDR
// uc_nation := 1 ;
4259: LD_ADDR_OWVAR 21
4263: PUSH
4264: LD_INT 1
4266: ST_TO_ADDR
// vc_control = control_manual ;
4267: LD_ADDR_OWVAR 38
4271: PUSH
4272: LD_INT 1
4274: ST_TO_ADDR
// vc_engine = engine_combustion ;
4275: LD_ADDR_OWVAR 39
4279: PUSH
4280: LD_INT 1
4282: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4283: LD_ADDR_OWVAR 37
4287: PUSH
4288: LD_INT 2
4290: PPUSH
4291: LD_INT 4
4293: PPUSH
4294: CALL_OW 12
4298: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4299: LD_ADDR_OWVAR 40
4303: PUSH
4304: LD_INT 3
4306: PPUSH
4307: LD_INT 5
4309: PPUSH
4310: CALL_OW 12
4314: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4315: LD_ADDR_EXP 41
4319: PUSH
4320: CALL_OW 45
4324: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4325: LD_INT 0
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: CALL_OW 12
4335: PPUSH
4336: LD_INT 1
4338: PUSH
4339: LD_INT 2
4341: PUSH
4342: LD_INT 3
4344: PUSH
4345: EMPTY
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: LD_OWVAR 67
4354: ARRAY
4355: PPUSH
4356: CALL_OW 383
// AmMechConvoy := CreateHuman ;
4360: LD_ADDR_EXP 39
4364: PUSH
4365: CALL_OW 44
4369: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
4370: LD_EXP 39
4374: PPUSH
4375: LD_EXP 41
4379: PPUSH
4380: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
4384: LD_EXP 41
4388: PPUSH
4389: LD_INT 14
4391: PPUSH
4392: LD_INT 0
4394: PPUSH
4395: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
4399: LD_ADDR_EXP 26
4403: PUSH
4404: LD_EXP 26
4408: PUSH
4409: LD_EXP 39
4413: ADD
4414: PUSH
4415: LD_EXP 41
4419: ADD
4420: ST_TO_ADDR
// end ;
4421: GO 4248
4423: POP
4424: POP
// Wait ( 5 5$45 ) ;
4425: LD_INT 12075
4427: PPUSH
4428: CALL_OW 67
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4432: LD_ADDR_VAR 0 2
4436: PUSH
4437: DOUBLE
4438: LD_INT 1
4440: DEC
4441: ST_TO_ADDR
4442: LD_INT 2
4444: PUSH
4445: LD_INT 3
4447: PUSH
4448: LD_INT 4
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_OWVAR 67
4460: ARRAY
4461: PUSH
4462: FOR_TO
4463: IFFALSE 4543
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 12
4475: PPUSH
4476: LD_INT 1
4478: PUSH
4479: LD_INT 2
4481: PUSH
4482: LD_INT 4
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: PUSH
4490: LD_OWVAR 67
4494: ARRAY
4495: PPUSH
4496: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
4500: LD_ADDR_EXP 37
4504: PUSH
4505: CALL_OW 44
4509: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
4510: LD_ADDR_EXP 25
4514: PUSH
4515: LD_EXP 25
4519: PUSH
4520: LD_EXP 37
4524: ADD
4525: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4526: LD_EXP 37
4530: PPUSH
4531: LD_INT 1
4533: PPUSH
4534: LD_INT 0
4536: PPUSH
4537: CALL_OW 49
// end ;
4541: GO 4462
4543: POP
4544: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: DOUBLE
4551: LD_INT 1
4553: DEC
4554: ST_TO_ADDR
4555: LD_INT 1
4557: PUSH
4558: LD_INT 2
4560: PUSH
4561: LD_INT 2
4563: PUSH
4564: EMPTY
4565: LIST
4566: LIST
4567: LIST
4568: PUSH
4569: LD_OWVAR 67
4573: ARRAY
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4656
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4578: LD_INT 0
4580: PPUSH
4581: LD_INT 1
4583: PPUSH
4584: CALL_OW 12
4588: PPUSH
4589: LD_INT 1
4591: PUSH
4592: LD_INT 2
4594: PUSH
4595: LD_INT 4
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: PUSH
4603: LD_OWVAR 67
4607: ARRAY
4608: PPUSH
4609: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4613: LD_ADDR_EXP 38
4617: PUSH
4618: CALL_OW 44
4622: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4623: LD_ADDR_EXP 25
4627: PUSH
4628: LD_EXP 25
4632: PUSH
4633: LD_EXP 38
4637: ADD
4638: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4639: LD_EXP 38
4643: PPUSH
4644: LD_INT 1
4646: PPUSH
4647: LD_INT 0
4649: PPUSH
4650: CALL_OW 49
// end ;
4654: GO 4575
4656: POP
4657: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4658: LD_ADDR_VAR 0 2
4662: PUSH
4663: DOUBLE
4664: LD_INT 1
4666: DEC
4667: ST_TO_ADDR
4668: LD_INT 1
4670: PUSH
4671: LD_INT 1
4673: PUSH
4674: LD_INT 1
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: PUSH
4682: LD_OWVAR 67
4686: ARRAY
4687: PUSH
4688: FOR_TO
4689: IFFALSE 4769
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4691: LD_INT 0
4693: PPUSH
4694: LD_INT 1
4696: PPUSH
4697: CALL_OW 12
4701: PPUSH
4702: LD_INT 1
4704: PUSH
4705: LD_INT 2
4707: PUSH
4708: LD_INT 4
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: LIST
4715: PUSH
4716: LD_OWVAR 67
4720: ARRAY
4721: PPUSH
4722: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4726: LD_ADDR_EXP 40
4730: PUSH
4731: CALL_OW 44
4735: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4736: LD_ADDR_EXP 25
4740: PUSH
4741: LD_EXP 25
4745: PUSH
4746: LD_EXP 40
4750: ADD
4751: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4752: LD_EXP 40
4756: PPUSH
4757: LD_INT 1
4759: PPUSH
4760: LD_INT 0
4762: PPUSH
4763: CALL_OW 49
// end ;
4767: GO 4688
4769: POP
4770: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4771: LD_ADDR_VAR 0 2
4775: PUSH
4776: DOUBLE
4777: LD_INT 1
4779: DEC
4780: ST_TO_ADDR
4781: LD_INT 1
4783: PUSH
4784: LD_INT 2
4786: PUSH
4787: LD_INT 2
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: PUSH
4795: LD_OWVAR 67
4799: ARRAY
4800: PUSH
4801: FOR_TO
4802: IFFALSE 4976
// begin uc_side := 4 ;
4804: LD_ADDR_OWVAR 20
4808: PUSH
4809: LD_INT 4
4811: ST_TO_ADDR
// uc_nation := 1 ;
4812: LD_ADDR_OWVAR 21
4816: PUSH
4817: LD_INT 1
4819: ST_TO_ADDR
// vc_control = control_manual ;
4820: LD_ADDR_OWVAR 38
4824: PUSH
4825: LD_INT 1
4827: ST_TO_ADDR
// vc_engine = engine_combustion ;
4828: LD_ADDR_OWVAR 39
4832: PUSH
4833: LD_INT 1
4835: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4836: LD_ADDR_OWVAR 37
4840: PUSH
4841: LD_INT 2
4843: PPUSH
4844: LD_INT 4
4846: PPUSH
4847: CALL_OW 12
4851: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4852: LD_ADDR_OWVAR 40
4856: PUSH
4857: LD_INT 3
4859: PPUSH
4860: LD_INT 5
4862: PPUSH
4863: CALL_OW 12
4867: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4868: LD_ADDR_EXP 41
4872: PUSH
4873: CALL_OW 45
4877: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4878: LD_INT 0
4880: PPUSH
4881: LD_INT 1
4883: PPUSH
4884: CALL_OW 12
4888: PPUSH
4889: LD_INT 1
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: LD_INT 4
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: LD_OWVAR 67
4907: ARRAY
4908: PPUSH
4909: CALL_OW 383
// AmMechConvoy := CreateHuman ;
4913: LD_ADDR_EXP 39
4917: PUSH
4918: CALL_OW 44
4922: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
4923: LD_EXP 39
4927: PPUSH
4928: LD_EXP 41
4932: PPUSH
4933: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
4937: LD_EXP 41
4941: PPUSH
4942: LD_INT 14
4944: PPUSH
4945: LD_INT 0
4947: PPUSH
4948: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
4952: LD_ADDR_EXP 26
4956: PUSH
4957: LD_EXP 26
4961: PUSH
4962: LD_EXP 39
4966: ADD
4967: PUSH
4968: LD_EXP 41
4972: ADD
4973: ST_TO_ADDR
// end ;
4974: GO 4801
4976: POP
4977: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
4978: LD_EXP 25
4982: PPUSH
4983: LD_INT 157
4985: PPUSH
4986: LD_INT 97
4988: PPUSH
4989: CALL_OW 114
// Wait ( 5 5$0 ) ;
4993: LD_INT 10500
4995: PPUSH
4996: CALL_OW 67
// for i = 1 to [ 3 , 4 , 6 ] [ Difficulty ] do
5000: LD_ADDR_VAR 0 2
5004: PUSH
5005: DOUBLE
5006: LD_INT 1
5008: DEC
5009: ST_TO_ADDR
5010: LD_INT 3
5012: PUSH
5013: LD_INT 4
5015: PUSH
5016: LD_INT 6
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: LIST
5023: PUSH
5024: LD_OWVAR 67
5028: ARRAY
5029: PUSH
5030: FOR_TO
5031: IFFALSE 5111
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5033: LD_INT 0
5035: PPUSH
5036: LD_INT 1
5038: PPUSH
5039: CALL_OW 12
5043: PPUSH
5044: LD_INT 1
5046: PUSH
5047: LD_INT 2
5049: PUSH
5050: LD_INT 4
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: LIST
5057: PUSH
5058: LD_OWVAR 67
5062: ARRAY
5063: PPUSH
5064: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5068: LD_ADDR_EXP 37
5072: PUSH
5073: CALL_OW 44
5077: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5078: LD_ADDR_EXP 25
5082: PUSH
5083: LD_EXP 25
5087: PUSH
5088: LD_EXP 37
5092: ADD
5093: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5094: LD_EXP 37
5098: PPUSH
5099: LD_INT 1
5101: PPUSH
5102: LD_INT 0
5104: PPUSH
5105: CALL_OW 49
// end ;
5109: GO 5030
5111: POP
5112: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
5113: LD_ADDR_VAR 0 2
5117: PUSH
5118: DOUBLE
5119: LD_INT 1
5121: DEC
5122: ST_TO_ADDR
5123: LD_INT 1
5125: PUSH
5126: LD_INT 2
5128: PUSH
5129: LD_INT 2
5131: PUSH
5132: EMPTY
5133: LIST
5134: LIST
5135: LIST
5136: PUSH
5137: LD_OWVAR 67
5141: ARRAY
5142: PUSH
5143: FOR_TO
5144: IFFALSE 5224
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5146: LD_INT 0
5148: PPUSH
5149: LD_INT 1
5151: PPUSH
5152: CALL_OW 12
5156: PPUSH
5157: LD_INT 1
5159: PUSH
5160: LD_INT 2
5162: PUSH
5163: LD_INT 4
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: LIST
5170: PUSH
5171: LD_OWVAR 67
5175: ARRAY
5176: PPUSH
5177: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5181: LD_ADDR_EXP 38
5185: PUSH
5186: CALL_OW 44
5190: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5191: LD_ADDR_EXP 25
5195: PUSH
5196: LD_EXP 25
5200: PUSH
5201: LD_EXP 38
5205: ADD
5206: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5207: LD_EXP 38
5211: PPUSH
5212: LD_INT 1
5214: PPUSH
5215: LD_INT 0
5217: PPUSH
5218: CALL_OW 49
// end ;
5222: GO 5143
5224: POP
5225: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5226: LD_ADDR_VAR 0 2
5230: PUSH
5231: DOUBLE
5232: LD_INT 1
5234: DEC
5235: ST_TO_ADDR
5236: LD_INT 1
5238: PUSH
5239: LD_INT 1
5241: PUSH
5242: LD_INT 2
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: PUSH
5250: LD_OWVAR 67
5254: ARRAY
5255: PUSH
5256: FOR_TO
5257: IFFALSE 5337
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5259: LD_INT 0
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: CALL_OW 12
5269: PPUSH
5270: LD_INT 1
5272: PUSH
5273: LD_INT 2
5275: PUSH
5276: LD_INT 4
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: LD_OWVAR 67
5288: ARRAY
5289: PPUSH
5290: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5294: LD_ADDR_EXP 40
5298: PUSH
5299: CALL_OW 44
5303: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5304: LD_ADDR_EXP 25
5308: PUSH
5309: LD_EXP 25
5313: PUSH
5314: LD_EXP 40
5318: ADD
5319: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5320: LD_EXP 40
5324: PPUSH
5325: LD_INT 1
5327: PPUSH
5328: LD_INT 0
5330: PPUSH
5331: CALL_OW 49
// end ;
5335: GO 5256
5337: POP
5338: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5339: LD_ADDR_VAR 0 2
5343: PUSH
5344: DOUBLE
5345: LD_INT 1
5347: DEC
5348: ST_TO_ADDR
5349: LD_INT 1
5351: PUSH
5352: LD_INT 2
5354: PUSH
5355: LD_INT 3
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: PUSH
5363: LD_OWVAR 67
5367: ARRAY
5368: PUSH
5369: FOR_TO
5370: IFFALSE 5544
// begin uc_side := 4 ;
5372: LD_ADDR_OWVAR 20
5376: PUSH
5377: LD_INT 4
5379: ST_TO_ADDR
// uc_nation := 1 ;
5380: LD_ADDR_OWVAR 21
5384: PUSH
5385: LD_INT 1
5387: ST_TO_ADDR
// vc_control = control_manual ;
5388: LD_ADDR_OWVAR 38
5392: PUSH
5393: LD_INT 1
5395: ST_TO_ADDR
// vc_engine = engine_combustion ;
5396: LD_ADDR_OWVAR 39
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
5404: LD_ADDR_OWVAR 37
5408: PUSH
5409: LD_INT 2
5411: PPUSH
5412: LD_INT 4
5414: PPUSH
5415: CALL_OW 12
5419: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
5420: LD_ADDR_OWVAR 40
5424: PUSH
5425: LD_INT 3
5427: PPUSH
5428: LD_INT 5
5430: PPUSH
5431: CALL_OW 12
5435: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
5436: LD_ADDR_EXP 41
5440: PUSH
5441: CALL_OW 45
5445: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5446: LD_INT 0
5448: PPUSH
5449: LD_INT 1
5451: PPUSH
5452: CALL_OW 12
5456: PPUSH
5457: LD_INT 1
5459: PUSH
5460: LD_INT 2
5462: PUSH
5463: LD_INT 4
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: PUSH
5471: LD_OWVAR 67
5475: ARRAY
5476: PPUSH
5477: CALL_OW 383
// AmMechConvoy := CreateHuman ;
5481: LD_ADDR_EXP 39
5485: PUSH
5486: CALL_OW 44
5490: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
5491: LD_EXP 39
5495: PPUSH
5496: LD_EXP 41
5500: PPUSH
5501: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
5505: LD_EXP 41
5509: PPUSH
5510: LD_INT 14
5512: PPUSH
5513: LD_INT 0
5515: PPUSH
5516: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
5520: LD_ADDR_EXP 26
5524: PUSH
5525: LD_EXP 26
5529: PUSH
5530: LD_EXP 39
5534: ADD
5535: PUSH
5536: LD_EXP 41
5540: ADD
5541: ST_TO_ADDR
// end ;
5542: GO 5369
5544: POP
5545: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5546: LD_EXP 25
5550: PPUSH
5551: LD_INT 157
5553: PPUSH
5554: LD_INT 97
5556: PPUSH
5557: CALL_OW 114
// Wait ( 5 5$0 ) ;
5561: LD_INT 10500
5563: PPUSH
5564: CALL_OW 67
// for i = 1 to [ 3 , 5 , 7 ] [ Difficulty ] do
5568: LD_ADDR_VAR 0 2
5572: PUSH
5573: DOUBLE
5574: LD_INT 1
5576: DEC
5577: ST_TO_ADDR
5578: LD_INT 3
5580: PUSH
5581: LD_INT 5
5583: PUSH
5584: LD_INT 7
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: LIST
5591: PUSH
5592: LD_OWVAR 67
5596: ARRAY
5597: PUSH
5598: FOR_TO
5599: IFFALSE 5679
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5601: LD_INT 0
5603: PPUSH
5604: LD_INT 1
5606: PPUSH
5607: CALL_OW 12
5611: PPUSH
5612: LD_INT 1
5614: PUSH
5615: LD_INT 2
5617: PUSH
5618: LD_INT 4
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: LIST
5625: PUSH
5626: LD_OWVAR 67
5630: ARRAY
5631: PPUSH
5632: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5636: LD_ADDR_EXP 37
5640: PUSH
5641: CALL_OW 44
5645: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5646: LD_ADDR_EXP 25
5650: PUSH
5651: LD_EXP 25
5655: PUSH
5656: LD_EXP 37
5660: ADD
5661: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5662: LD_EXP 37
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: LD_INT 0
5672: PPUSH
5673: CALL_OW 49
// end ;
5677: GO 5598
5679: POP
5680: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5681: LD_ADDR_VAR 0 2
5685: PUSH
5686: DOUBLE
5687: LD_INT 1
5689: DEC
5690: ST_TO_ADDR
5691: LD_INT 1
5693: PUSH
5694: LD_INT 2
5696: PUSH
5697: LD_INT 3
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: LIST
5704: PUSH
5705: LD_OWVAR 67
5709: ARRAY
5710: PUSH
5711: FOR_TO
5712: IFFALSE 5792
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5714: LD_INT 0
5716: PPUSH
5717: LD_INT 1
5719: PPUSH
5720: CALL_OW 12
5724: PPUSH
5725: LD_INT 1
5727: PUSH
5728: LD_INT 2
5730: PUSH
5731: LD_INT 4
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: LIST
5738: PUSH
5739: LD_OWVAR 67
5743: ARRAY
5744: PPUSH
5745: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5749: LD_ADDR_EXP 38
5753: PUSH
5754: CALL_OW 44
5758: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5759: LD_ADDR_EXP 25
5763: PUSH
5764: LD_EXP 25
5768: PUSH
5769: LD_EXP 38
5773: ADD
5774: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5775: LD_EXP 38
5779: PPUSH
5780: LD_INT 1
5782: PPUSH
5783: LD_INT 0
5785: PPUSH
5786: CALL_OW 49
// end ;
5790: GO 5711
5792: POP
5793: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5794: LD_ADDR_VAR 0 2
5798: PUSH
5799: DOUBLE
5800: LD_INT 1
5802: DEC
5803: ST_TO_ADDR
5804: LD_INT 1
5806: PUSH
5807: LD_INT 1
5809: PUSH
5810: LD_INT 2
5812: PUSH
5813: EMPTY
5814: LIST
5815: LIST
5816: LIST
5817: PUSH
5818: LD_OWVAR 67
5822: ARRAY
5823: PUSH
5824: FOR_TO
5825: IFFALSE 5905
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5827: LD_INT 0
5829: PPUSH
5830: LD_INT 1
5832: PPUSH
5833: CALL_OW 12
5837: PPUSH
5838: LD_INT 1
5840: PUSH
5841: LD_INT 2
5843: PUSH
5844: LD_INT 4
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: LIST
5851: PUSH
5852: LD_OWVAR 67
5856: ARRAY
5857: PPUSH
5858: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5862: LD_ADDR_EXP 40
5866: PUSH
5867: CALL_OW 44
5871: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5872: LD_ADDR_EXP 25
5876: PUSH
5877: LD_EXP 25
5881: PUSH
5882: LD_EXP 40
5886: ADD
5887: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5888: LD_EXP 40
5892: PPUSH
5893: LD_INT 1
5895: PPUSH
5896: LD_INT 0
5898: PPUSH
5899: CALL_OW 49
// end ;
5903: GO 5824
5905: POP
5906: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5907: LD_ADDR_VAR 0 2
5911: PUSH
5912: DOUBLE
5913: LD_INT 1
5915: DEC
5916: ST_TO_ADDR
5917: LD_INT 1
5919: PUSH
5920: LD_INT 2
5922: PUSH
5923: LD_INT 3
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: LIST
5930: PUSH
5931: LD_OWVAR 67
5935: ARRAY
5936: PUSH
5937: FOR_TO
5938: IFFALSE 6112
// begin uc_side := 4 ;
5940: LD_ADDR_OWVAR 20
5944: PUSH
5945: LD_INT 4
5947: ST_TO_ADDR
// uc_nation := 1 ;
5948: LD_ADDR_OWVAR 21
5952: PUSH
5953: LD_INT 1
5955: ST_TO_ADDR
// vc_control = control_manual ;
5956: LD_ADDR_OWVAR 38
5960: PUSH
5961: LD_INT 1
5963: ST_TO_ADDR
// vc_engine = engine_combustion ;
5964: LD_ADDR_OWVAR 39
5968: PUSH
5969: LD_INT 1
5971: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
5972: LD_ADDR_OWVAR 37
5976: PUSH
5977: LD_INT 2
5979: PPUSH
5980: LD_INT 4
5982: PPUSH
5983: CALL_OW 12
5987: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
5988: LD_ADDR_OWVAR 40
5992: PUSH
5993: LD_INT 3
5995: PPUSH
5996: LD_INT 5
5998: PPUSH
5999: CALL_OW 12
6003: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6004: LD_ADDR_EXP 41
6008: PUSH
6009: CALL_OW 45
6013: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6014: LD_INT 0
6016: PPUSH
6017: LD_INT 1
6019: PPUSH
6020: CALL_OW 12
6024: PPUSH
6025: LD_INT 1
6027: PUSH
6028: LD_INT 2
6030: PUSH
6031: LD_INT 4
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: LIST
6038: PUSH
6039: LD_OWVAR 67
6043: ARRAY
6044: PPUSH
6045: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6049: LD_ADDR_EXP 39
6053: PUSH
6054: CALL_OW 44
6058: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6059: LD_EXP 39
6063: PPUSH
6064: LD_EXP 41
6068: PPUSH
6069: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6073: LD_EXP 41
6077: PPUSH
6078: LD_INT 14
6080: PPUSH
6081: LD_INT 0
6083: PPUSH
6084: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6088: LD_ADDR_EXP 26
6092: PUSH
6093: LD_EXP 26
6097: PUSH
6098: LD_EXP 39
6102: ADD
6103: PUSH
6104: LD_EXP 41
6108: ADD
6109: ST_TO_ADDR
// end ;
6110: GO 5937
6112: POP
6113: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
6114: LD_EXP 25
6118: PPUSH
6119: LD_INT 157
6121: PPUSH
6122: LD_INT 97
6124: PPUSH
6125: CALL_OW 114
// Wait ( 5 5$0 ) ;
6129: LD_INT 10500
6131: PPUSH
6132: CALL_OW 67
// for i = 1 to [ 4 , 6 , 10 ] [ Difficulty ] do
6136: LD_ADDR_VAR 0 2
6140: PUSH
6141: DOUBLE
6142: LD_INT 1
6144: DEC
6145: ST_TO_ADDR
6146: LD_INT 4
6148: PUSH
6149: LD_INT 6
6151: PUSH
6152: LD_INT 10
6154: PUSH
6155: EMPTY
6156: LIST
6157: LIST
6158: LIST
6159: PUSH
6160: LD_OWVAR 67
6164: ARRAY
6165: PUSH
6166: FOR_TO
6167: IFFALSE 6247
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6169: LD_INT 0
6171: PPUSH
6172: LD_INT 1
6174: PPUSH
6175: CALL_OW 12
6179: PPUSH
6180: LD_INT 1
6182: PUSH
6183: LD_INT 2
6185: PUSH
6186: LD_INT 4
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: PUSH
6194: LD_OWVAR 67
6198: ARRAY
6199: PPUSH
6200: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
6204: LD_ADDR_EXP 37
6208: PUSH
6209: CALL_OW 44
6213: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
6214: LD_ADDR_EXP 25
6218: PUSH
6219: LD_EXP 25
6223: PUSH
6224: LD_EXP 37
6228: ADD
6229: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
6230: LD_EXP 37
6234: PPUSH
6235: LD_INT 1
6237: PPUSH
6238: LD_INT 0
6240: PPUSH
6241: CALL_OW 49
// end ;
6245: GO 6166
6247: POP
6248: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
6249: LD_ADDR_VAR 0 2
6253: PUSH
6254: DOUBLE
6255: LD_INT 1
6257: DEC
6258: ST_TO_ADDR
6259: LD_INT 1
6261: PUSH
6262: LD_INT 2
6264: PUSH
6265: LD_INT 3
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: LIST
6272: PUSH
6273: LD_OWVAR 67
6277: ARRAY
6278: PUSH
6279: FOR_TO
6280: IFFALSE 6360
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6282: LD_INT 0
6284: PPUSH
6285: LD_INT 1
6287: PPUSH
6288: CALL_OW 12
6292: PPUSH
6293: LD_INT 1
6295: PUSH
6296: LD_INT 2
6298: PUSH
6299: LD_INT 4
6301: PUSH
6302: EMPTY
6303: LIST
6304: LIST
6305: LIST
6306: PUSH
6307: LD_OWVAR 67
6311: ARRAY
6312: PPUSH
6313: CALL_OW 384
// AmSciConvoy = CreateHuman ;
6317: LD_ADDR_EXP 38
6321: PUSH
6322: CALL_OW 44
6326: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
6327: LD_ADDR_EXP 25
6331: PUSH
6332: LD_EXP 25
6336: PUSH
6337: LD_EXP 38
6341: ADD
6342: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
6343: LD_EXP 38
6347: PPUSH
6348: LD_INT 1
6350: PPUSH
6351: LD_INT 0
6353: PPUSH
6354: CALL_OW 49
// end ;
6358: GO 6279
6360: POP
6361: POP
// for i = 1 to [ 1 , 1 , 3 ] [ Difficulty ] do
6362: LD_ADDR_VAR 0 2
6366: PUSH
6367: DOUBLE
6368: LD_INT 1
6370: DEC
6371: ST_TO_ADDR
6372: LD_INT 1
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: LD_INT 3
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: PUSH
6386: LD_OWVAR 67
6390: ARRAY
6391: PUSH
6392: FOR_TO
6393: IFFALSE 6473
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6395: LD_INT 0
6397: PPUSH
6398: LD_INT 1
6400: PPUSH
6401: CALL_OW 12
6405: PPUSH
6406: LD_INT 1
6408: PUSH
6409: LD_INT 2
6411: PUSH
6412: LD_INT 4
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: PUSH
6420: LD_OWVAR 67
6424: ARRAY
6425: PPUSH
6426: CALL_OW 382
// AmEngConvoy = CreateHuman ;
6430: LD_ADDR_EXP 40
6434: PUSH
6435: CALL_OW 44
6439: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
6440: LD_ADDR_EXP 25
6444: PUSH
6445: LD_EXP 25
6449: PUSH
6450: LD_EXP 40
6454: ADD
6455: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
6456: LD_EXP 40
6460: PPUSH
6461: LD_INT 1
6463: PPUSH
6464: LD_INT 0
6466: PPUSH
6467: CALL_OW 49
// end ;
6471: GO 6392
6473: POP
6474: POP
// for i = 1 to [ 1 , 2 , 4 ] [ Difficulty ] do
6475: LD_ADDR_VAR 0 2
6479: PUSH
6480: DOUBLE
6481: LD_INT 1
6483: DEC
6484: ST_TO_ADDR
6485: LD_INT 1
6487: PUSH
6488: LD_INT 2
6490: PUSH
6491: LD_INT 4
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: LIST
6498: PUSH
6499: LD_OWVAR 67
6503: ARRAY
6504: PUSH
6505: FOR_TO
6506: IFFALSE 6680
// begin uc_side := 4 ;
6508: LD_ADDR_OWVAR 20
6512: PUSH
6513: LD_INT 4
6515: ST_TO_ADDR
// uc_nation := 1 ;
6516: LD_ADDR_OWVAR 21
6520: PUSH
6521: LD_INT 1
6523: ST_TO_ADDR
// vc_control = control_manual ;
6524: LD_ADDR_OWVAR 38
6528: PUSH
6529: LD_INT 1
6531: ST_TO_ADDR
// vc_engine = engine_combustion ;
6532: LD_ADDR_OWVAR 39
6536: PUSH
6537: LD_INT 1
6539: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6540: LD_ADDR_OWVAR 37
6544: PUSH
6545: LD_INT 2
6547: PPUSH
6548: LD_INT 4
6550: PPUSH
6551: CALL_OW 12
6555: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6556: LD_ADDR_OWVAR 40
6560: PUSH
6561: LD_INT 3
6563: PPUSH
6564: LD_INT 5
6566: PPUSH
6567: CALL_OW 12
6571: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6572: LD_ADDR_EXP 41
6576: PUSH
6577: CALL_OW 45
6581: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6582: LD_INT 0
6584: PPUSH
6585: LD_INT 1
6587: PPUSH
6588: CALL_OW 12
6592: PPUSH
6593: LD_INT 1
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 4
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: LD_OWVAR 67
6611: ARRAY
6612: PPUSH
6613: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6617: LD_ADDR_EXP 39
6621: PUSH
6622: CALL_OW 44
6626: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6627: LD_EXP 39
6631: PPUSH
6632: LD_EXP 41
6636: PPUSH
6637: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6641: LD_EXP 41
6645: PPUSH
6646: LD_INT 14
6648: PPUSH
6649: LD_INT 0
6651: PPUSH
6652: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6656: LD_ADDR_EXP 26
6660: PUSH
6661: LD_EXP 26
6665: PUSH
6666: LD_EXP 39
6670: ADD
6671: PUSH
6672: LD_EXP 41
6676: ADD
6677: ST_TO_ADDR
// end ;
6678: GO 6505
6680: POP
6681: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
6682: LD_EXP 25
6686: PPUSH
6687: LD_INT 157
6689: PPUSH
6690: LD_INT 97
6692: PPUSH
6693: CALL_OW 114
// end ; end_of_file
6697: LD_VAR 0 1
6701: RET
// export function InitRussian ; begin
6702: LD_INT 0
6704: PPUSH
// Uc_Nation := 3 ;
6705: LD_ADDR_OWVAR 21
6709: PUSH
6710: LD_INT 3
6712: ST_TO_ADDR
// Uc_Side := 3 ;
6713: LD_ADDR_OWVAR 20
6717: PUSH
6718: LD_INT 3
6720: ST_TO_ADDR
// YakotichCrew := YakotichCrew ^ Yakotich ^ Mietek ^ Boris ^ Michail ^ Vasilij ^ Maksim ^ Fiodor ^ Aleksandr ^ Aleksiej ^ Pavel ^ Zakhar ^ Constantin ^ Stanislav ^ Josif ;
6721: LD_ADDR_EXP 1
6725: PUSH
6726: LD_EXP 1
6730: PUSH
6731: LD_EXP 3
6735: ADD
6736: PUSH
6737: LD_EXP 4
6741: ADD
6742: PUSH
6743: LD_EXP 5
6747: ADD
6748: PUSH
6749: LD_EXP 7
6753: ADD
6754: PUSH
6755: LD_EXP 6
6759: ADD
6760: PUSH
6761: LD_EXP 9
6765: ADD
6766: PUSH
6767: LD_EXP 10
6771: ADD
6772: PUSH
6773: LD_EXP 14
6777: ADD
6778: PUSH
6779: LD_EXP 13
6783: ADD
6784: PUSH
6785: LD_EXP 11
6789: ADD
6790: PUSH
6791: LD_EXP 12
6795: ADD
6796: PUSH
6797: LD_EXP 8
6801: ADD
6802: PUSH
6803: LD_EXP 16
6807: ADD
6808: PUSH
6809: LD_EXP 15
6813: ADD
6814: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 01_ ) ;
6815: LD_ADDR_EXP 3
6819: PUSH
6820: LD_STRING Yakotich
6822: PPUSH
6823: LD_INT 1
6825: PPUSH
6826: LD_STRING 01_
6828: PPUSH
6829: CALL 510 0 3
6833: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 01_ ) ;
6834: LD_ADDR_EXP 4
6838: PUSH
6839: LD_STRING Mietek
6841: PPUSH
6842: LD_INT 1
6844: PPUSH
6845: LD_STRING 01_
6847: PPUSH
6848: CALL 510 0 3
6852: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 01_ ) ;
6853: LD_ADDR_EXP 5
6857: PUSH
6858: LD_STRING Boris
6860: PPUSH
6861: LD_INT 1
6863: PPUSH
6864: LD_STRING 01_
6866: PPUSH
6867: CALL 510 0 3
6871: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 01_ ) ;
6872: LD_ADDR_EXP 7
6876: PUSH
6877: LD_STRING Michail
6879: PPUSH
6880: LD_INT 1
6882: PPUSH
6883: LD_STRING 01_
6885: PPUSH
6886: CALL 510 0 3
6890: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 01_ ) ;
6891: LD_ADDR_EXP 6
6895: PUSH
6896: LD_STRING Vasilij
6898: PPUSH
6899: LD_INT 1
6901: PPUSH
6902: LD_STRING 01_
6904: PPUSH
6905: CALL 510 0 3
6909: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 01_ ) ;
6910: LD_ADDR_EXP 9
6914: PUSH
6915: LD_STRING Maksim
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_STRING 01_
6923: PPUSH
6924: CALL 510 0 3
6928: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 01_ ) ;
6929: LD_ADDR_EXP 10
6933: PUSH
6934: LD_STRING Fiodor
6936: PPUSH
6937: LD_INT 1
6939: PPUSH
6940: LD_STRING 01_
6942: PPUSH
6943: CALL 510 0 3
6947: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 01_ ) ;
6948: LD_ADDR_EXP 14
6952: PUSH
6953: LD_STRING Aleksandr
6955: PPUSH
6956: LD_INT 1
6958: PPUSH
6959: LD_STRING 01_
6961: PPUSH
6962: CALL 510 0 3
6966: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 01_ ) ;
6967: LD_ADDR_EXP 13
6971: PUSH
6972: LD_STRING Aleksiej
6974: PPUSH
6975: LD_INT 1
6977: PPUSH
6978: LD_STRING 01_
6980: PPUSH
6981: CALL 510 0 3
6985: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 01_ ) ;
6986: LD_ADDR_EXP 11
6990: PUSH
6991: LD_STRING Pavel
6993: PPUSH
6994: LD_INT 1
6996: PPUSH
6997: LD_STRING 01_
6999: PPUSH
7000: CALL 510 0 3
7004: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 01_ ) ;
7005: LD_ADDR_EXP 12
7009: PUSH
7010: LD_STRING Zakhar
7012: PPUSH
7013: LD_INT 1
7015: PPUSH
7016: LD_STRING 01_
7018: PPUSH
7019: CALL 510 0 3
7023: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 01_ ) ;
7024: LD_ADDR_EXP 8
7028: PUSH
7029: LD_STRING Constantin
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: LD_STRING 01_
7037: PPUSH
7038: CALL 510 0 3
7042: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , false ,  ) ;
7043: LD_ADDR_EXP 16
7047: PUSH
7048: LD_STRING Stanislav
7050: PPUSH
7051: LD_INT 0
7053: PPUSH
7054: LD_STRING 
7056: PPUSH
7057: CALL 510 0 3
7061: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false ,  ) ;
7062: LD_ADDR_EXP 15
7066: PUSH
7067: LD_STRING Josif
7069: PPUSH
7070: LD_INT 0
7072: PPUSH
7073: LD_STRING 
7075: PPUSH
7076: CALL 510 0 3
7080: ST_TO_ADDR
// SetClass ( Boris , 2 ) ;
7081: LD_EXP 5
7085: PPUSH
7086: LD_INT 2
7088: PPUSH
7089: CALL_OW 336
// SetClass ( Vasilij , 4 ) ;
7093: LD_EXP 6
7097: PPUSH
7098: LD_INT 4
7100: PPUSH
7101: CALL_OW 336
// Uc_Side := 6 ;
7105: LD_ADDR_OWVAR 20
7109: PUSH
7110: LD_INT 6
7112: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
7113: LD_ADDR_EXP 17
7117: PUSH
7118: LD_STRING Morozov
7120: PPUSH
7121: LD_INT 0
7123: PPUSH
7124: LD_STRING 
7126: PPUSH
7127: CALL 510 0 3
7131: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
7132: LD_ADDR_EXP 18
7136: PUSH
7137: LD_STRING Kurin
7139: PPUSH
7140: LD_INT 0
7142: PPUSH
7143: LD_STRING 
7145: PPUSH
7146: CALL 510 0 3
7150: ST_TO_ADDR
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
7151: LD_ADDR_EXP 19
7155: PUSH
7156: LD_STRING Grishko
7158: PPUSH
7159: LD_INT 0
7161: PPUSH
7162: LD_STRING 
7164: PPUSH
7165: CALL 510 0 3
7169: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
7170: LD_ADDR_EXP 20
7174: PUSH
7175: LD_STRING Burlak
7177: PPUSH
7178: LD_INT 0
7180: PPUSH
7181: LD_STRING 
7183: PPUSH
7184: CALL 510 0 3
7188: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
7189: LD_ADDR_EXP 21
7193: PUSH
7194: LD_STRING Platonov
7196: PPUSH
7197: LD_INT 0
7199: PPUSH
7200: LD_STRING 
7202: PPUSH
7203: CALL 510 0 3
7207: ST_TO_ADDR
// Uc_Side := 1 ;
7208: LD_ADDR_OWVAR 20
7212: PUSH
7213: LD_INT 1
7215: ST_TO_ADDR
// AmSold := PrepareUnit ( AmSold , false ,  ) ;
7216: LD_ADDR_EXP 22
7220: PUSH
7221: LD_STRING AmSold
7223: PPUSH
7224: LD_INT 0
7226: PPUSH
7227: LD_STRING 
7229: PPUSH
7230: CALL 510 0 3
7234: ST_TO_ADDR
// end ; end_of_file
7235: LD_VAR 0 1
7239: RET
// export function Action ; var i ; begin
7240: LD_INT 0
7242: PPUSH
7243: PPUSH
// PlaceUnitArea ( Yakotich , RussianSpawn , false ) ;
7244: LD_EXP 3
7248: PPUSH
7249: LD_INT 2
7251: PPUSH
7252: LD_INT 0
7254: PPUSH
7255: CALL_OW 49
// PlaceUnitArea ( Maksim , RussianSpawn , false ) ;
7259: LD_EXP 9
7263: PPUSH
7264: LD_INT 2
7266: PPUSH
7267: LD_INT 0
7269: PPUSH
7270: CALL_OW 49
// PlaceUnitArea ( Vasilij , RussianSpawn , false ) ;
7274: LD_EXP 6
7278: PPUSH
7279: LD_INT 2
7281: PPUSH
7282: LD_INT 0
7284: PPUSH
7285: CALL_OW 49
// PlaceUnitArea ( Michail , RussianSpawn , false ) ;
7289: LD_EXP 7
7293: PPUSH
7294: LD_INT 2
7296: PPUSH
7297: LD_INT 0
7299: PPUSH
7300: CALL_OW 49
// PlaceUnitArea ( Fiodor , RussianSpawn , false ) ;
7304: LD_EXP 10
7308: PPUSH
7309: LD_INT 2
7311: PPUSH
7312: LD_INT 0
7314: PPUSH
7315: CALL_OW 49
// PlaceUnitArea ( Constantin , RussianSpawn , false ) ;
7319: LD_EXP 8
7323: PPUSH
7324: LD_INT 2
7326: PPUSH
7327: LD_INT 0
7329: PPUSH
7330: CALL_OW 49
// PlaceUnitArea ( Boris , RussianSpawn , false ) ;
7334: LD_EXP 5
7338: PPUSH
7339: LD_INT 2
7341: PPUSH
7342: LD_INT 0
7344: PPUSH
7345: CALL_OW 49
// InGameOn ;
7349: CALL_OW 8
// DialogueOn ;
7353: CALL_OW 6
// CenterNowOnXY ( 152 , 28 ) ;
7357: LD_INT 152
7359: PPUSH
7360: LD_INT 28
7362: PPUSH
7363: CALL_OW 86
// Wait ( 0 0$3 ) ;
7367: LD_INT 105
7369: PPUSH
7370: CALL_OW 67
// Say ( Yakotich , 2Yak-13 ) ;
7374: LD_EXP 3
7378: PPUSH
7379: LD_STRING 2Yak-13
7381: PPUSH
7382: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
7386: LD_STRING o1
7388: PPUSH
7389: CALL_OW 337
// MaksimScout ;
7393: CALL 1389 0 0
// InGameOff ;
7397: CALL_OW 9
// DialogueOff ;
7401: CALL_OW 7
// Say ( Michail , 2Mich-02 ) ;
7405: LD_EXP 7
7409: PPUSH
7410: LD_STRING 2Mich-02
7412: PPUSH
7413: CALL_OW 88
// Say ( Michail , 2Mich-03 ) ;
7417: LD_EXP 7
7421: PPUSH
7422: LD_STRING 2Mich-03
7424: PPUSH
7425: CALL_OW 88
// Say ( Yakotich , 2Yak-15 ) ;
7429: LD_EXP 3
7433: PPUSH
7434: LD_STRING 2Yak-15
7436: PPUSH
7437: CALL_OW 88
// ChangeMissionObjectives ( turret ) ;
7441: LD_STRING turret
7443: PPUSH
7444: CALL_OW 337
// SaveForQuickRestart ;
7448: CALL_OW 22
// end ;
7452: LD_VAR 0 1
7456: RET
// every 0 0$1 trigger maksim_scout_ended = true and See ( 3 , Maksim ) do
7457: LD_EXP 44
7461: PUSH
7462: LD_INT 1
7464: EQUAL
7465: PUSH
7466: LD_INT 3
7468: PPUSH
7469: LD_EXP 9
7473: PPUSH
7474: CALL_OW 292
7478: AND
7479: IFFALSE 7807
7481: GO 7483
7483: DISABLE
// begin CenterNowOnUnits ( Maksim ) ;
7484: LD_EXP 9
7488: PPUSH
7489: CALL_OW 87
// DialogueOn ;
7493: CALL_OW 6
// RevealFogArea ( 3 , ScoutedTerrains ) ;
7497: LD_INT 3
7499: PPUSH
7500: LD_INT 8
7502: PPUSH
7503: CALL_OW 332
// Say ( Maksim , 2Mak-06 ) ;
7507: LD_EXP 9
7511: PPUSH
7512: LD_STRING 2Mak-06
7514: PPUSH
7515: CALL_OW 88
// Say ( Yakotich , 2Yak-16 ) ;
7519: LD_EXP 3
7523: PPUSH
7524: LD_STRING 2Yak-16
7526: PPUSH
7527: CALL_OW 88
// CenterNowOnXY ( 40 , 10 ) ;
7531: LD_INT 40
7533: PPUSH
7534: LD_INT 10
7536: PPUSH
7537: CALL_OW 86
// Wait ( 0 0$03 ) ;
7541: LD_INT 105
7543: PPUSH
7544: CALL_OW 67
// CenterOnXY ( 55 , 40 ) ;
7548: LD_INT 55
7550: PPUSH
7551: LD_INT 40
7553: PPUSH
7554: CALL_OW 84
// Wait ( 0 0$03 ) ;
7558: LD_INT 105
7560: PPUSH
7561: CALL_OW 67
// CenterOnXY ( 70 , 72 ) ;
7565: LD_INT 70
7567: PPUSH
7568: LD_INT 72
7570: PPUSH
7571: CALL_OW 84
// Say ( Maksim , 2Mak-07 ) ;
7575: LD_EXP 9
7579: PPUSH
7580: LD_STRING 2Mak-07
7582: PPUSH
7583: CALL_OW 88
// Say ( Maksim , 2Mak-08 ) ;
7587: LD_EXP 9
7591: PPUSH
7592: LD_STRING 2Mak-08
7594: PPUSH
7595: CALL_OW 88
// CenterNowOnUnits ( Yakotich ) ;
7599: LD_EXP 3
7603: PPUSH
7604: CALL_OW 87
// Say ( Yakotich , 2Yak-17 ) ;
7608: LD_EXP 3
7612: PPUSH
7613: LD_STRING 2Yak-17
7615: PPUSH
7616: CALL_OW 88
// Say ( Yakotich , 2Yak-18 ) ;
7620: LD_EXP 3
7624: PPUSH
7625: LD_STRING 2Yak-18
7627: PPUSH
7628: CALL_OW 88
// Say ( Maksim , 2Mak-09 ) ;
7632: LD_EXP 9
7636: PPUSH
7637: LD_STRING 2Mak-09
7639: PPUSH
7640: CALL_OW 88
// Say ( Maksim , 2Mak-10 ) ;
7644: LD_EXP 9
7648: PPUSH
7649: LD_STRING 2Mak-10
7651: PPUSH
7652: CALL_OW 88
// Say ( Maksim , 2Mak-11 ) ;
7656: LD_EXP 9
7660: PPUSH
7661: LD_STRING 2Mak-11
7663: PPUSH
7664: CALL_OW 88
// Say ( Yakotich , 2Yak-19 ) ;
7668: LD_EXP 3
7672: PPUSH
7673: LD_STRING 2Yak-19
7675: PPUSH
7676: CALL_OW 88
// SayRadio ( Yakotich , 2Yak-20 ) ;
7680: LD_EXP 3
7684: PPUSH
7685: LD_STRING 2Yak-20
7687: PPUSH
7688: CALL_OW 94
// SayRadio ( Morozov , 2Moro-05 ) ;
7692: LD_EXP 17
7696: PPUSH
7697: LD_STRING 2Moro-05
7699: PPUSH
7700: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-21 ) ;
7704: LD_EXP 3
7708: PPUSH
7709: LD_STRING 2Yak-21
7711: PPUSH
7712: CALL_OW 94
// SayRadio ( Morozov , 2Moro-06 ) ;
7716: LD_EXP 17
7720: PPUSH
7721: LD_STRING 2Moro-06
7723: PPUSH
7724: CALL_OW 94
// SayRadio ( Morozov , 2Moro-07 ) ;
7728: LD_EXP 17
7732: PPUSH
7733: LD_STRING 2Moro-07
7735: PPUSH
7736: CALL_OW 94
// SayRadio ( Morozov , 2Moro-08 ) ;
7740: LD_EXP 17
7744: PPUSH
7745: LD_STRING 2Moro-08
7747: PPUSH
7748: CALL_OW 94
// SayRadio ( Morozov , 2Moro-09 ) ;
7752: LD_EXP 17
7756: PPUSH
7757: LD_STRING 2Moro-09
7759: PPUSH
7760: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-22 ) ;
7764: LD_EXP 3
7768: PPUSH
7769: LD_STRING 2Yak-22
7771: PPUSH
7772: CALL_OW 94
// ChangeMissionObjectives ( o2 ) ;
7776: LD_STRING o2
7778: PPUSH
7779: CALL_OW 337
// DialogueOff ;
7783: CALL_OW 7
// maksim_back = true ;
7787: LD_ADDR_EXP 45
7791: PUSH
7792: LD_INT 1
7794: ST_TO_ADDR
// SetSide ( Maksim , 3 ) ;
7795: LD_EXP 9
7799: PPUSH
7800: LD_INT 3
7802: PPUSH
7803: CALL_OW 235
// end ;
7807: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
7808: LD_INT 3
7810: PPUSH
7811: LD_INT 90
7813: PPUSH
7814: CALL_OW 325
7818: IFFALSE 7847
7820: GO 7822
7822: DISABLE
// begin Say ( Michail , 2Mich-04 ) ;
7823: LD_EXP 7
7827: PPUSH
7828: LD_STRING 2Mich-04
7830: PPUSH
7831: CALL_OW 88
// Say ( Michail , 2Mich-05 ) ;
7835: LD_EXP 7
7839: PPUSH
7840: LD_STRING 2Mich-05
7842: PPUSH
7843: CALL_OW 88
// end ;
7847: END
// every 0 0$1 trigger Researched ( 3 , 83 ) do
7848: LD_INT 3
7850: PPUSH
7851: LD_INT 83
7853: PPUSH
7854: CALL_OW 325
7858: IFFALSE 7875
7860: GO 7862
7862: DISABLE
// begin Say ( Vasilij , 2Vas-07 ) ;
7863: LD_EXP 6
7867: PPUSH
7868: LD_STRING 2Vas-07
7870: PPUSH
7871: CALL_OW 88
// end ;
7875: END
// every 0 0$1 trigger first_attack_clear do
7876: LD_EXP 53
7880: IFFALSE 8093
7882: GO 7884
7884: DISABLE
// begin Wait ( 5 5$0 ) ;
7885: LD_INT 10500
7887: PPUSH
7888: CALL_OW 67
// PlaceUnitArea ( Mietek , RussianSpawn , false ) ;
7892: LD_EXP 4
7896: PPUSH
7897: LD_INT 2
7899: PPUSH
7900: LD_INT 0
7902: PPUSH
7903: CALL_OW 49
// PlaceUnitArea ( Aleksiej , RussianSpawn , false ) ;
7907: LD_EXP 13
7911: PPUSH
7912: LD_INT 2
7914: PPUSH
7915: LD_INT 0
7917: PPUSH
7918: CALL_OW 49
// PlaceUnitArea ( Aleksandr , RussianSpawn , false ) ;
7922: LD_EXP 14
7926: PPUSH
7927: LD_INT 2
7929: PPUSH
7930: LD_INT 0
7932: PPUSH
7933: CALL_OW 49
// PlaceUnitArea ( Josif , RussianSpawn , false ) ;
7937: LD_EXP 15
7941: PPUSH
7942: LD_INT 2
7944: PPUSH
7945: LD_INT 0
7947: PPUSH
7948: CALL_OW 49
// PlaceUnitArea ( Zakhar , RussianSpawn , false ) ;
7952: LD_EXP 12
7956: PPUSH
7957: LD_INT 2
7959: PPUSH
7960: LD_INT 0
7962: PPUSH
7963: CALL_OW 49
// PlaceUnitArea ( Stanislav , RussianSpawn , false ) ;
7967: LD_EXP 16
7971: PPUSH
7972: LD_INT 2
7974: PPUSH
7975: LD_INT 0
7977: PPUSH
7978: CALL_OW 49
// PlaceUnitArea ( Pavel , RussianSpawn , false ) ;
7982: LD_EXP 11
7986: PPUSH
7987: LD_INT 2
7989: PPUSH
7990: LD_INT 0
7992: PPUSH
7993: CALL_OW 49
// DialogueOn ;
7997: CALL_OW 6
// CenterNowOnUnits ( Mietek ) ;
8001: LD_EXP 4
8005: PPUSH
8006: CALL_OW 87
// SayRadio ( Mietek , 2Ryn-06 ) ;
8010: LD_EXP 4
8014: PPUSH
8015: LD_STRING 2Ryn-06
8017: PPUSH
8018: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-25 ) ;
8022: LD_EXP 3
8026: PPUSH
8027: LD_STRING 2Yak-25
8029: PPUSH
8030: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-01 ) ;
8034: LD_EXP 16
8038: PPUSH
8039: LD_STRING 2Stan-01
8041: PPUSH
8042: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-02 ) ;
8046: LD_EXP 16
8050: PPUSH
8051: LD_STRING 2Stan-02
8053: PPUSH
8054: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-03 ) ;
8058: LD_EXP 16
8062: PPUSH
8063: LD_STRING 2Stan-03
8065: PPUSH
8066: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-Stan-01 ) ;
8070: LD_EXP 3
8074: PPUSH
8075: LD_STRING 2Yak-Stan-01
8077: PPUSH
8078: CALL_OW 94
// ChangeMissionObjectives ( gun ) ;
8082: LD_STRING gun
8084: PPUSH
8085: CALL_OW 337
// DialogueOff ;
8089: CALL_OW 7
// end ;
8093: END
// every 0 0$1 trigger maksim_back = true do
8094: LD_EXP 45
8098: PUSH
8099: LD_INT 1
8101: EQUAL
8102: IFFALSE 8225
8104: GO 8106
8106: DISABLE
// begin Wait ( 30 30$0 ) ;
8107: LD_INT 63000
8109: PPUSH
8110: CALL_OW 67
// DialogueOn ;
8114: CALL_OW 6
// InGameOn ;
8118: CALL_OW 8
// SayRadio ( Kurin , 2Kurin-01 ) ;
8122: LD_EXP 18
8126: PPUSH
8127: LD_STRING 2Kurin-01
8129: PPUSH
8130: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-02 ) ;
8134: LD_EXP 18
8138: PPUSH
8139: LD_STRING 2Kurin-02
8141: PPUSH
8142: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-26 ) ;
8146: LD_EXP 3
8150: PPUSH
8151: LD_STRING 2Yak-26
8153: PPUSH
8154: CALL_OW 94
// ChangeMissionObjectives ( o3 ) ;
8158: LD_STRING o3
8160: PPUSH
8161: CALL_OW 337
// Say ( Maksim , 2Mak-12 ) ;
8165: LD_EXP 9
8169: PPUSH
8170: LD_STRING 2Mak-12
8172: PPUSH
8173: CALL_OW 88
// CenterNowOnXY ( 57 , 2 ) ;
8177: LD_INT 57
8179: PPUSH
8180: LD_INT 2
8182: PPUSH
8183: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
8187: LD_INT 3
8189: PPUSH
8190: LD_INT 9
8192: PPUSH
8193: CALL_OW 332
// Say ( Maksim , 2Mak-13 ) ;
8197: LD_EXP 9
8201: PPUSH
8202: LD_STRING 2Mak-13
8204: PPUSH
8205: CALL_OW 88
// DialogueOff ;
8209: CALL_OW 7
// InGameOff ;
8213: CALL_OW 9
// kurin_attack_started = true ;
8217: LD_ADDR_EXP 55
8221: PUSH
8222: LD_INT 1
8224: ST_TO_ADDR
// end ;
8225: END
// every 1 trigger kurin_attack_started = true and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var unit ;
8226: LD_EXP 55
8230: PUSH
8231: LD_INT 1
8233: EQUAL
8234: PUSH
8235: LD_INT 22
8237: PUSH
8238: LD_INT 1
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: LD_INT 21
8247: PUSH
8248: LD_INT 1
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PPUSH
8259: CALL_OW 69
8263: PUSH
8264: LD_INT 0
8266: EQUAL
8267: AND
8268: IFFALSE 8882
8270: GO 8272
8272: DISABLE
8273: LD_INT 0
8275: PPUSH
// begin InGameOn ;
8276: CALL_OW 8
// SayRadio ( Yakotich , 2Yak-27 ) ;
8280: LD_EXP 3
8284: PPUSH
8285: LD_STRING 2Yak-27
8287: PPUSH
8288: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-03 ) ;
8292: LD_EXP 18
8296: PPUSH
8297: LD_STRING 2Kurin-03
8299: PPUSH
8300: CALL_OW 94
// SayRadio ( AmSold , 2AmSold-01 ) ;
8304: LD_EXP 22
8308: PPUSH
8309: LD_STRING 2AmSold-01
8311: PPUSH
8312: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-04 ) ;
8316: LD_EXP 18
8320: PPUSH
8321: LD_STRING 2Kurin-04
8323: PPUSH
8324: CALL_OW 94
// Wait ( 0 0$02 ) ;
8328: LD_INT 70
8330: PPUSH
8331: CALL_OW 67
// SayRadio ( Grishko , 2Gri-01 ) ;
8335: LD_EXP 19
8339: PPUSH
8340: LD_STRING 2Gri-01
8342: PPUSH
8343: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-05 ) ;
8347: LD_EXP 18
8351: PPUSH
8352: LD_STRING 2Kurin-05
8354: PPUSH
8355: CALL_OW 94
// SayRadio ( Grishko , 2Gri-02 ) ;
8359: LD_EXP 19
8363: PPUSH
8364: LD_STRING 2Gri-02
8366: PPUSH
8367: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-06 ) ;
8371: LD_EXP 18
8375: PPUSH
8376: LD_STRING 2Kurin-06
8378: PPUSH
8379: CALL_OW 94
// SayRadio ( Grishko , 2Gri-03 ) ;
8383: LD_EXP 19
8387: PPUSH
8388: LD_STRING 2Gri-03
8390: PPUSH
8391: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-07 ) ;
8395: LD_EXP 18
8399: PPUSH
8400: LD_STRING 2Kurin-07
8402: PPUSH
8403: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-28 ) ;
8407: LD_EXP 3
8411: PPUSH
8412: LD_STRING 2Yak-28
8414: PPUSH
8415: CALL_OW 94
// Wait ( 0 0$03 ) ;
8419: LD_INT 105
8421: PPUSH
8422: CALL_OW 67
// SayRadio ( Kurin , 2Kurin-08 ) ;
8426: LD_EXP 18
8430: PPUSH
8431: LD_STRING 2Kurin-08
8433: PPUSH
8434: CALL_OW 94
// SayRadio ( Burlak , 2Burlak-01 ) ;
8438: LD_EXP 20
8442: PPUSH
8443: LD_STRING 2Burlak-01
8445: PPUSH
8446: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-09 ) ;
8450: LD_EXP 18
8454: PPUSH
8455: LD_STRING 2Kurin-09
8457: PPUSH
8458: CALL_OW 94
// SayEffect ( 2GunSound ) ;
8462: LD_STRING 2GunSound
8464: PPUSH
8465: CALL_OW 96
// SayRadio ( Morozov , 2Moro-10 ) ;
8469: LD_EXP 17
8473: PPUSH
8474: LD_STRING 2Moro-10
8476: PPUSH
8477: CALL_OW 94
// SayRadio ( Morozov , 2Moro-11 ) ;
8481: LD_EXP 17
8485: PPUSH
8486: LD_STRING 2Moro-11
8488: PPUSH
8489: CALL_OW 94
// SayRadio ( Morozov , 2Moro-12 ) ;
8493: LD_EXP 17
8497: PPUSH
8498: LD_STRING 2Moro-12
8500: PPUSH
8501: CALL_OW 94
// SayRadio ( Morozov , 2Moro-13 ) ;
8505: LD_EXP 17
8509: PPUSH
8510: LD_STRING 2Moro-13
8512: PPUSH
8513: CALL_OW 94
// SayRadio ( Morozov , 2Moro-14 ) ;
8517: LD_EXP 17
8521: PPUSH
8522: LD_STRING 2Moro-14
8524: PPUSH
8525: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-29 ) ;
8529: LD_EXP 3
8533: PPUSH
8534: LD_STRING 2Yak-29
8536: PPUSH
8537: CALL_OW 94
// end_of_the_mission = true ;
8541: LD_ADDR_EXP 56
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// InGameOff ;
8549: CALL_OW 9
// AddMedal ( PeopleConvoys , 1 ) ;
8553: LD_STRING PeopleConvoys
8555: PPUSH
8556: LD_INT 1
8558: PPUSH
8559: CALL_OW 101
// if gun_researched = true then
8563: LD_EXP 48
8567: PUSH
8568: LD_INT 1
8570: EQUAL
8571: IFFALSE 8585
// AddMedal ( GunMedal , 1 ) else
8573: LD_STRING GunMedal
8575: PPUSH
8576: LD_INT 1
8578: PPUSH
8579: CALL_OW 101
8583: GO 8596
// AddMedal ( GunMedal , - 1 ) ;
8585: LD_STRING GunMedal
8587: PPUSH
8588: LD_INT 1
8590: NEG
8591: PPUSH
8592: CALL_OW 101
// if gattling_researched = true and gun_researched = true and transport_builded = true and turrets_researched = true then
8596: LD_EXP 47
8600: PUSH
8601: LD_INT 1
8603: EQUAL
8604: PUSH
8605: LD_EXP 48
8609: PUSH
8610: LD_INT 1
8612: EQUAL
8613: AND
8614: PUSH
8615: LD_EXP 51
8619: PUSH
8620: LD_INT 1
8622: EQUAL
8623: AND
8624: PUSH
8625: LD_EXP 46
8629: PUSH
8630: LD_INT 1
8632: EQUAL
8633: AND
8634: IFFALSE 8648
// AddMedal ( Secondary , 1 ) else
8636: LD_STRING Secondary
8638: PPUSH
8639: LD_INT 1
8641: PPUSH
8642: CALL_OW 101
8646: GO 8659
// AddMedal ( Secondary , - 1 ) ;
8648: LD_STRING Secondary
8650: PPUSH
8651: LD_INT 1
8653: NEG
8654: PPUSH
8655: CALL_OW 101
// GiveMedals ( Medals ) ;
8659: LD_STRING Medals
8661: PPUSH
8662: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
8666: LD_INT 22
8668: PUSH
8669: LD_INT 3
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: PUSH
8676: LD_INT 23
8678: PUSH
8679: LD_INT 3
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 21
8688: PUSH
8689: LD_INT 1
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: PPUSH
8701: CALL_OW 69
8705: PPUSH
8706: CALL_OW 43
// SaveCharacters ( Yakotich , 02_Yakotich ) ;
8710: LD_EXP 3
8714: PPUSH
8715: LD_STRING 02_Yakotich
8717: PPUSH
8718: CALL_OW 38
// SaveCharacters ( Mietek , 02_Mietek ) ;
8722: LD_EXP 4
8726: PPUSH
8727: LD_STRING 02_Mietek
8729: PPUSH
8730: CALL_OW 38
// SaveCharacters ( Maksim , 02_Maksim ) ;
8734: LD_EXP 9
8738: PPUSH
8739: LD_STRING 02_Maksim
8741: PPUSH
8742: CALL_OW 38
// SaveCharacters ( Vasilij , 02_Vasilij ) ;
8746: LD_EXP 6
8750: PPUSH
8751: LD_STRING 02_Vasilij
8753: PPUSH
8754: CALL_OW 38
// SaveCharacters ( Michail , 02_Michail ) ;
8758: LD_EXP 7
8762: PPUSH
8763: LD_STRING 02_Michail
8765: PPUSH
8766: CALL_OW 38
// SaveCharacters ( Boris , 02_Boris ) ;
8770: LD_EXP 5
8774: PPUSH
8775: LD_STRING 02_Boris
8777: PPUSH
8778: CALL_OW 38
// SaveCharacters ( Constantin , 02_Constantin ) ;
8782: LD_EXP 8
8786: PPUSH
8787: LD_STRING 02_Constantin
8789: PPUSH
8790: CALL_OW 38
// SaveCharacters ( Fiodor , 02_Fiodor ) ;
8794: LD_EXP 10
8798: PPUSH
8799: LD_STRING 02_Fiodor
8801: PPUSH
8802: CALL_OW 38
// SaveCharacters ( Aleksiej , 02_Aleksiej ) ;
8806: LD_EXP 13
8810: PPUSH
8811: LD_STRING 02_Aleksiej
8813: PPUSH
8814: CALL_OW 38
// SaveCharacters ( Pavel , 02_Pavel ) ;
8818: LD_EXP 11
8822: PPUSH
8823: LD_STRING 02_Pavel
8825: PPUSH
8826: CALL_OW 38
// SaveCharacters ( Zakhar , 02_Zakhar ) ;
8830: LD_EXP 12
8834: PPUSH
8835: LD_STRING 02_Zakhar
8837: PPUSH
8838: CALL_OW 38
// SaveCharacters ( Aleksandr , 02_Aleksandr ) ;
8842: LD_EXP 14
8846: PPUSH
8847: LD_STRING 02_Aleksandr
8849: PPUSH
8850: CALL_OW 38
// SaveCharacters ( Zakhar , 02_Stanislav ) ;
8854: LD_EXP 12
8858: PPUSH
8859: LD_STRING 02_Stanislav
8861: PPUSH
8862: CALL_OW 38
// SaveCharacters ( Aleksandr , 02_Josif ) ;
8866: LD_EXP 14
8870: PPUSH
8871: LD_STRING 02_Josif
8873: PPUSH
8874: CALL_OW 38
// YouWin ;
8878: CALL_OW 103
// end ;
8882: PPOPN 1
8884: END
