// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 44 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Randomize ;
  15: CALL_OW 10
// RandomizeAll ;
  19: CALL_OW 11
// InitRussian ;
  23: CALL 6759 0 0
// Czolg ;
  27: CALL 7297 0 0
// Action ;
  31: CALL 7398 0 0
// InitAmerican ;
  35: CALL 2492 0 0
// DebugMode ;
  39: CALL 172 0 0
// end ;
  43: END
// export YakotichCrew , MietekCrew ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin ; export Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Morozov , Kurin , Grishko , Burlak , Platonov , AmSold ; export KurinTime , MietekTime ; export AmConvoys , AmConvoysVehicles , AmNorthPersonel , AmSouthPersonel ; export AmSoldNorth , AmSciNorth , AmMechNorth , AmEngNorth , AmSoldSouth , AmSciSouth , AmMechSouth , AmEngSouth ; export AmSoldConvoy , AmSciConvoy , AmMechConvoy , AmEngConvoy , AmVehicleConvoy ; export Tank ; export debug ; export mission_prefix ; export maksim_scout_ended , maksim_back , turrets_researched , gattling_researched , gun_researched , gun_recycled , second_wave_clear , transport_builded , first_attack_spawned , first_attack_clear , reiforcements_called , kurin_attack_started , end_of_the_mission ; export livid ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// mission_prefix := 02_ ;
  47: LD_ADDR_EXP 44
  51: PUSH
  52: LD_STRING 02_
  54: ST_TO_ADDR
// maksim_scout_ended := false ;
  55: LD_ADDR_EXP 45
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// maksim_back := false ;
  63: LD_ADDR_EXP 46
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// turrets_researched := false ;
  71: LD_ADDR_EXP 47
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// gattling_researched := false ;
  79: LD_ADDR_EXP 48
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// gun_recycled := false ;
  87: LD_ADDR_EXP 50
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// gun_researched := false ;
  95: LD_ADDR_EXP 49
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// transport_builded := false ;
 103: LD_ADDR_EXP 52
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// first_attack_spawned := false ;
 111: LD_ADDR_EXP 53
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// first_attack_clear := false ;
 119: LD_ADDR_EXP 54
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// reiforcements_called := false ;
 127: LD_ADDR_EXP 55
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// kurin_attack_started := false ;
 135: LD_ADDR_EXP 56
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// end_of_the_mission := false ;
 143: LD_ADDR_EXP 57
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// MietekTime := 5 5$0 ;
 151: LD_ADDR_EXP 24
 155: PUSH
 156: LD_INT 10500
 158: ST_TO_ADDR
// KurinTime := 30 30$0 ;
 159: LD_ADDR_EXP 23
 163: PUSH
 164: LD_INT 63000
 166: ST_TO_ADDR
// end ;
 167: LD_VAR 0 1
 171: RET
// function DebugMode ; var i ; begin
 172: LD_INT 0
 174: PPUSH
 175: PPUSH
// if not debug then
 176: LD_EXP 43
 180: NOT
 181: IFFALSE 185
// exit ;
 183: GO 204
// Difficulty := 3 ;
 185: LD_ADDR_OWVAR 67
 189: PUSH
 190: LD_INT 3
 192: ST_TO_ADDR
// TurnFogOff ( ) ;
 193: CALL_OW 537
// FogOff ( 3 ) ;
 197: LD_INT 3
 199: PPUSH
 200: CALL_OW 344
// end ; end_of_file
 204: LD_VAR 0 1
 208: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
 209: LD_INT 0
 211: PPUSH
// ar_miner := 81 ;
 212: LD_ADDR_EXP 66
 216: PUSH
 217: LD_INT 81
 219: ST_TO_ADDR
// ar_crane := 88 ;
 220: LD_ADDR_EXP 65
 224: PUSH
 225: LD_INT 88
 227: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
 228: LD_ADDR_EXP 60
 232: PUSH
 233: LD_INT 89
 235: ST_TO_ADDR
// us_hack := 99 ;
 236: LD_ADDR_EXP 61
 240: PUSH
 241: LD_INT 99
 243: ST_TO_ADDR
// us_artillery := 97 ;
 244: LD_ADDR_EXP 62
 248: PUSH
 249: LD_INT 97
 251: ST_TO_ADDR
// ar_bio_bomb := 91 ;
 252: LD_ADDR_EXP 63
 256: PUSH
 257: LD_INT 91
 259: ST_TO_ADDR
// ar_mortar := 92 ;
 260: LD_ADDR_EXP 64
 264: PUSH
 265: LD_INT 92
 267: ST_TO_ADDR
// ru_flamethrower := 93 ;
 268: LD_ADDR_EXP 67
 272: PUSH
 273: LD_INT 93
 275: ST_TO_ADDR
// ru_radar := 98 ;
 276: LD_ADDR_EXP 59
 280: PUSH
 281: LD_INT 98
 283: ST_TO_ADDR
// tech_Artillery := 80 ;
 284: LD_ADDR_EXP 68
 288: PUSH
 289: LD_INT 80
 291: ST_TO_ADDR
// tech_RadMat := 81 ;
 292: LD_ADDR_EXP 69
 296: PUSH
 297: LD_INT 81
 299: ST_TO_ADDR
// tech_BasicTools := 82 ;
 300: LD_ADDR_EXP 70
 304: PUSH
 305: LD_INT 82
 307: ST_TO_ADDR
// tech_Cargo := 83 ;
 308: LD_ADDR_EXP 71
 312: PUSH
 313: LD_INT 83
 315: ST_TO_ADDR
// tech_Track := 84 ;
 316: LD_ADDR_EXP 72
 320: PUSH
 321: LD_INT 84
 323: ST_TO_ADDR
// tech_Crane := 85 ;
 324: LD_ADDR_EXP 73
 328: PUSH
 329: LD_INT 85
 331: ST_TO_ADDR
// tech_Bulldozer := 86 ;
 332: LD_ADDR_EXP 74
 336: PUSH
 337: LD_INT 86
 339: ST_TO_ADDR
// tech_Hovercraft := 87 ;
 340: LD_ADDR_EXP 75
 344: PUSH
 345: LD_INT 87
 347: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
 348: LD_ADDR_EXP 76
 352: PUSH
 353: LD_INT 88
 355: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
 356: LD_ADDR_EXP 77
 360: PUSH
 361: LD_INT 90
 363: ST_TO_ADDR
// class_mastodont := 31 ;
 364: LD_ADDR_EXP 78
 368: PUSH
 369: LD_INT 31
 371: ST_TO_ADDR
// class_horse := 21 ;
 372: LD_ADDR_EXP 79
 376: PUSH
 377: LD_INT 21
 379: ST_TO_ADDR
// end ;
 380: LD_VAR 0 1
 384: RET
// every 1 do
 385: GO 387
 387: DISABLE
// InitGlobalVariables ; end_of_file
 388: CALL 209 0 0
 392: END
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 393: LD_INT 0
 395: PPUSH
 396: PPUSH
 397: PPUSH
// uc_side := GetSide ( b ) ;
 398: LD_ADDR_OWVAR 20
 402: PUSH
 403: LD_VAR 0 2
 407: PPUSH
 408: CALL_OW 255
 412: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 413: LD_ADDR_OWVAR 21
 417: PUSH
 418: LD_VAR 0 2
 422: PPUSH
 423: CALL_OW 248
 427: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 428: LD_ADDR_VAR 0 5
 432: PUSH
 433: LD_VAR 0 2
 437: PPUSH
 438: CALL_OW 254
 442: PUSH
 443: LD_INT 3
 445: MINUS
 446: ST_TO_ADDR
// if dir < 0 then
 447: LD_VAR 0 5
 451: PUSH
 452: LD_INT 0
 454: LESS
 455: IFFALSE 471
// dir := 6 + dir ;
 457: LD_ADDR_VAR 0 5
 461: PUSH
 462: LD_INT 6
 464: PUSH
 465: LD_VAR 0 5
 469: PLUS
 470: ST_TO_ADDR
// un := CreateHuman ;
 471: LD_ADDR_VAR 0 4
 475: PUSH
 476: CALL_OW 44
 480: ST_TO_ADDR
// SetDir ( un , dir ) ;
 481: LD_VAR 0 4
 485: PPUSH
 486: LD_VAR 0 5
 490: PPUSH
 491: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 495: LD_VAR 0 4
 499: PPUSH
 500: LD_VAR 0 2
 504: PPUSH
 505: CALL_OW 52
// end ;
 509: LD_VAR 0 3
 513: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 514: LD_INT 0
 516: PPUSH
 517: PPUSH
// if exist_mode then
 518: LD_VAR 0 2
 522: IFFALSE 547
// unit := CreateCharacter ( prefix & ident ) else
 524: LD_ADDR_VAR 0 5
 528: PUSH
 529: LD_VAR 0 3
 533: PUSH
 534: LD_VAR 0 1
 538: STR
 539: PPUSH
 540: CALL_OW 34
 544: ST_TO_ADDR
 545: GO 562
// unit := NewCharacter ( ident ) ;
 547: LD_ADDR_VAR 0 5
 551: PUSH
 552: LD_VAR 0 1
 556: PPUSH
 557: CALL_OW 25
 561: ST_TO_ADDR
// result := unit ;
 562: LD_ADDR_VAR 0 4
 566: PUSH
 567: LD_VAR 0 5
 571: ST_TO_ADDR
// end ;
 572: LD_VAR 0 4
 576: RET
// export function GetCountOfBuildingsInBase ( base , btype ) ; var i , tmp ; begin
 577: LD_INT 0
 579: PPUSH
 580: PPUSH
 581: PPUSH
// result := 0 ;
 582: LD_ADDR_VAR 0 3
 586: PUSH
 587: LD_INT 0
 589: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_btype , btype ] ) ;
 590: LD_ADDR_VAR 0 5
 594: PUSH
 595: LD_INT 30
 597: PUSH
 598: LD_VAR 0 2
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PPUSH
 607: CALL_OW 69
 611: ST_TO_ADDR
// if not base or not tmp then
 612: LD_VAR 0 1
 616: NOT
 617: PUSH
 618: LD_VAR 0 5
 622: NOT
 623: OR
 624: IFFALSE 628
// exit ;
 626: GO 676
// for i in tmp do
 628: LD_ADDR_VAR 0 4
 632: PUSH
 633: LD_VAR 0 5
 637: PUSH
 638: FOR_IN
 639: IFFALSE 674
// if GetBase ( i ) = base then
 641: LD_VAR 0 4
 645: PPUSH
 646: CALL_OW 274
 650: PUSH
 651: LD_VAR 0 1
 655: EQUAL
 656: IFFALSE 672
// result := result + 1 ;
 658: LD_ADDR_VAR 0 3
 662: PUSH
 663: LD_VAR 0 3
 667: PUSH
 668: LD_INT 1
 670: PLUS
 671: ST_TO_ADDR
 672: GO 638
 674: POP
 675: POP
// end ;
 676: LD_VAR 0 3
 680: RET
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 681: LD_EXP 56
 685: PUSH
 686: LD_INT 0
 688: EQUAL
 689: PUSH
 690: LD_INT 17
 692: PPUSH
 693: LD_INT 22
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: PUSH
 703: LD_INT 2
 705: PUSH
 706: LD_INT 21
 708: PUSH
 709: LD_INT 1
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PUSH
 716: LD_INT 21
 718: PUSH
 719: LD_INT 2
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: PPUSH
 735: CALL_OW 70
 739: PUSH
 740: LD_INT 0
 742: GREATER
 743: AND
 744: IFFALSE 852
 746: GO 748
 748: DISABLE
 749: LD_INT 0
 751: PPUSH
// begin enable ;
 752: ENABLE
// for unit in FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 753: LD_ADDR_VAR 0 1
 757: PUSH
 758: LD_INT 17
 760: PPUSH
 761: LD_INT 22
 763: PUSH
 764: LD_INT 3
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 2
 773: PUSH
 774: LD_INT 21
 776: PUSH
 777: LD_INT 1
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 21
 786: PUSH
 787: LD_INT 2
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 70
 807: PUSH
 808: FOR_IN
 809: IFFALSE 850
// begin ComMoveXY ( unit , GetX ( unit ) + 5 , GetY ( unit ) + 5 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: LD_VAR 0 1
 820: PPUSH
 821: CALL_OW 250
 825: PUSH
 826: LD_INT 5
 828: PLUS
 829: PPUSH
 830: LD_VAR 0 1
 834: PPUSH
 835: CALL_OW 251
 839: PUSH
 840: LD_INT 5
 842: PLUS
 843: PPUSH
 844: CALL_OW 111
// end ;
 848: GO 808
 850: POP
 851: POP
// end ;
 852: PPOPN 1
 854: END
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 855: LD_EXP 56
 859: PUSH
 860: LD_INT 0
 862: EQUAL
 863: PUSH
 864: LD_INT 18
 866: PPUSH
 867: LD_INT 22
 869: PUSH
 870: LD_INT 3
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_INT 2
 879: PUSH
 880: LD_INT 21
 882: PUSH
 883: LD_INT 1
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 21
 892: PUSH
 893: LD_INT 2
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PPUSH
 909: CALL_OW 70
 913: PUSH
 914: LD_INT 0
 916: GREATER
 917: AND
 918: IFFALSE 1026
 920: GO 922
 922: DISABLE
 923: LD_INT 0
 925: PPUSH
// begin enable ;
 926: ENABLE
// for unit in FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 927: LD_ADDR_VAR 0 1
 931: PUSH
 932: LD_INT 18
 934: PPUSH
 935: LD_INT 22
 937: PUSH
 938: LD_INT 3
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: PUSH
 945: LD_INT 2
 947: PUSH
 948: LD_INT 21
 950: PUSH
 951: LD_INT 1
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: LD_INT 21
 960: PUSH
 961: LD_INT 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: LIST
 972: PUSH
 973: EMPTY
 974: LIST
 975: LIST
 976: PPUSH
 977: CALL_OW 70
 981: PUSH
 982: FOR_IN
 983: IFFALSE 1024
// begin ComMoveXY ( unit , GetX ( unit ) + 5 , GetY ( unit ) + 5 ) ;
 985: LD_VAR 0 1
 989: PPUSH
 990: LD_VAR 0 1
 994: PPUSH
 995: CALL_OW 250
 999: PUSH
1000: LD_INT 5
1002: PLUS
1003: PPUSH
1004: LD_VAR 0 1
1008: PPUSH
1009: CALL_OW 251
1013: PUSH
1014: LD_INT 5
1016: PLUS
1017: PPUSH
1018: CALL_OW 111
// end ;
1022: GO 982
1024: POP
1025: POP
// end ;
1026: PPOPN 1
1028: END
// every 1 trigger IsSelected ( Serpent ) do
1029: LD_INT 215
1031: PPUSH
1032: CALL_OW 306
1036: IFFALSE 1133
1038: GO 1040
1040: DISABLE
// begin SerpentExp ( [ 1 , 2 , 3 , 4 ] ) ;
1041: LD_INT 1
1043: PUSH
1044: LD_INT 2
1046: PUSH
1047: LD_INT 3
1049: PUSH
1050: LD_INT 4
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: PPUSH
1059: CALL 1134 0 1
// Wait ( 0 0$05 ) ;
1063: LD_INT 175
1065: PPUSH
1066: CALL_OW 67
// Say ( Serpent , 2Langu-Sikret ) ;
1070: LD_INT 215
1072: PPUSH
1073: LD_STRING 2Langu-Sikret
1075: PPUSH
1076: CALL_OW 88
// TeleportUnit ( Serpent , 5 , 4 , 100 , true ) ;
1080: LD_INT 215
1082: PPUSH
1083: LD_INT 5
1085: PPUSH
1086: LD_INT 4
1088: PPUSH
1089: LD_INT 100
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 483
// Wait ( 0 0$05 ) ;
1099: LD_INT 175
1101: PPUSH
1102: CALL_OW 67
// RemoveUnit ( Serpent ) ;
1106: LD_INT 215
1108: PPUSH
1109: CALL_OW 64
// SaveVariable ( 1 , SerpentSaved ) ;
1113: LD_INT 1
1115: PPUSH
1116: LD_STRING SerpentSaved
1118: PPUSH
1119: CALL_OW 39
// SaveCharacters ( Serpent , Langu ) ;
1123: LD_INT 215
1125: PPUSH
1126: LD_STRING Langu
1128: PPUSH
1129: CALL_OW 38
// end ;
1133: END
// export function SerpentExp ( q ) ; var dec , q1 ; begin
1134: LD_INT 0
1136: PPUSH
1137: PPUSH
1138: PPUSH
// dec = SelectiveQuery ( SerpentQuery , q ) ;
1139: LD_ADDR_VAR 0 3
1143: PUSH
1144: LD_STRING SerpentQuery
1146: PPUSH
1147: LD_VAR 0 1
1151: PPUSH
1152: CALL_OW 98
1156: ST_TO_ADDR
// case dec of 1 :
1157: LD_VAR 0 3
1161: PUSH
1162: LD_INT 1
1164: DOUBLE
1165: EQUAL
1166: IFTRUE 1170
1168: GO 1188
1170: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 1000 ) ;
1171: LD_EXP 3
1175: PPUSH
1176: LD_INT 1
1178: PPUSH
1179: LD_INT 1000
1181: PPUSH
1182: CALL_OW 591
// end ; 2 :
1186: GO 1267
1188: LD_INT 2
1190: DOUBLE
1191: EQUAL
1192: IFTRUE 1196
1194: GO 1214
1196: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 1000 ) ;
1197: LD_EXP 3
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: LD_INT 1000
1207: PPUSH
1208: CALL_OW 591
// end ; 3 :
1212: GO 1267
1214: LD_INT 3
1216: DOUBLE
1217: EQUAL
1218: IFTRUE 1222
1220: GO 1240
1222: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 1000 ) ;
1223: LD_EXP 3
1227: PPUSH
1228: LD_INT 3
1230: PPUSH
1231: LD_INT 1000
1233: PPUSH
1234: CALL_OW 591
// end ; 4 :
1238: GO 1267
1240: LD_INT 4
1242: DOUBLE
1243: EQUAL
1244: IFTRUE 1248
1246: GO 1266
1248: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 1000 ) ;
1249: LD_EXP 3
1253: PPUSH
1254: LD_INT 4
1256: PPUSH
1257: LD_INT 1000
1259: PPUSH
1260: CALL_OW 591
// end ; end ;
1264: GO 1267
1266: POP
// end ;
1267: LD_VAR 0 2
1271: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
1272: LD_EXP 3
1276: PPUSH
1277: CALL_OW 301
1281: IFFALSE 1293
1283: GO 1285
1285: DISABLE
// begin YouLost ( YakotichDead ) ;
1286: LD_STRING YakotichDead
1288: PPUSH
1289: CALL_OW 104
// end ;
1293: END
// every 0 0$1 trigger IsDead ( Mietek ) do
1294: LD_EXP 4
1298: PPUSH
1299: CALL_OW 301
1303: IFFALSE 1315
1305: GO 1307
1307: DISABLE
// begin YouLost ( MietekDead ) ;
1308: LD_STRING MietekDead
1310: PPUSH
1311: CALL_OW 104
// end ;
1315: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
1316: LD_VAR 0 1
1320: PUSH
1321: LD_INT 22
1323: PUSH
1324: LD_INT 3
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 3
1333: PUSH
1334: LD_INT 23
1336: PUSH
1337: LD_INT 0
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: LD_INT 21
1350: PUSH
1351: LD_INT 1
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: PPUSH
1363: CALL_OW 69
1367: IN
1368: IFFALSE 1377
// YouLost ( PeopleDead ) ;
1370: LD_STRING PeopleDead
1372: PPUSH
1373: CALL_OW 104
// end ;
1377: PPOPN 1
1379: END
// every 0 0$1 trigger FilterUnitsInArea ( OmikronArea , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) do
1380: LD_INT 15
1382: PPUSH
1383: LD_INT 2
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 22
1398: PUSH
1399: LD_INT 4
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: PPUSH
1411: CALL_OW 70
1415: IFFALSE 1427
1417: GO 1419
1419: DISABLE
// begin YouLost ( ConvoysMadeIt ) ;
1420: LD_STRING ConvoysMadeIt
1422: PPUSH
1423: CALL_OW 104
// end ;
1427: END
// every 0 0$1 trigger maksim_back = true do
1428: LD_EXP 46
1432: PUSH
1433: LD_INT 1
1435: EQUAL
1436: IFFALSE 1445
1438: GO 1440
1440: DISABLE
// begin AmAttacks ;
1441: CALL 3901 0 0
// end ;
1445: END
// export function MaksimScout ; begin
1446: LD_INT 0
1448: PPUSH
// SetSide ( Maksim , 6 ) ;
1449: LD_EXP 9
1453: PPUSH
1454: LD_INT 6
1456: PPUSH
1457: CALL_OW 235
// ComMoveToArea ( Maksim , MaksimStop1 ) ;
1461: LD_EXP 9
1465: PPUSH
1466: LD_INT 5
1468: PPUSH
1469: CALL_OW 113
// end ;
1473: LD_VAR 0 1
1477: RET
// every 1 trigger IsInArea ( Maksim , MaksimStop1 ) do
1478: LD_EXP 9
1482: PPUSH
1483: LD_INT 5
1485: PPUSH
1486: CALL_OW 308
1490: IFFALSE 1523
1492: GO 1494
1494: DISABLE
// begin ComHold ( Maksim ) ;
1495: LD_EXP 9
1499: PPUSH
1500: CALL_OW 140
// Wait ( 0 0$10 ) ;
1504: LD_INT 350
1506: PPUSH
1507: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop2 ) ;
1511: LD_EXP 9
1515: PPUSH
1516: LD_INT 6
1518: PPUSH
1519: CALL_OW 113
// end ;
1523: END
// every 1 trigger IsInArea ( Maksim , MaksimStop2 ) do
1524: LD_EXP 9
1528: PPUSH
1529: LD_INT 6
1531: PPUSH
1532: CALL_OW 308
1536: IFFALSE 1560
1538: GO 1540
1540: DISABLE
// begin Wait ( 0 0$10 ) ;
1541: LD_INT 350
1543: PPUSH
1544: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop3 ) ;
1548: LD_EXP 9
1552: PPUSH
1553: LD_INT 7
1555: PPUSH
1556: CALL_OW 113
// end ;
1560: END
// every 1 trigger IsInArea ( Maksim , MaksimStop3 ) do
1561: LD_EXP 9
1565: PPUSH
1566: LD_INT 7
1568: PPUSH
1569: CALL_OW 308
1573: IFFALSE 1607
1575: GO 1577
1577: DISABLE
// begin Wait ( 0 0$10 ) ;
1578: LD_INT 350
1580: PPUSH
1581: CALL_OW 67
// maksim_scout_ended = true ;
1585: LD_ADDR_EXP 45
1589: PUSH
1590: LD_INT 1
1592: ST_TO_ADDR
// ComMoveUnit ( Maksim , Yakotich ) ;
1593: LD_EXP 9
1597: PPUSH
1598: LD_EXP 3
1602: PPUSH
1603: CALL_OW 112
// end ;
1607: END
// every 0 0$1 trigger maksim_back do
1608: LD_EXP 46
1612: IFFALSE 1666
1614: GO 1616
1616: DISABLE
// begin enable ;
1617: ENABLE
// if KurinTime then
1618: LD_EXP 23
1622: IFFALSE 1657
// begin KurinTime := KurinTime - 0 0$1 ;
1624: LD_ADDR_EXP 23
1628: PUSH
1629: LD_EXP 23
1633: PUSH
1634: LD_INT 35
1636: MINUS
1637: ST_TO_ADDR
// display_strings := [ #KurinAttack , KurinTime ] ;
1638: LD_ADDR_OWVAR 47
1642: PUSH
1643: LD_STRING #KurinAttack
1645: PUSH
1646: LD_EXP 23
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: ST_TO_ADDR
// end else
1655: GO 1666
// begin display_strings :=  ;
1657: LD_ADDR_OWVAR 47
1661: PUSH
1662: LD_STRING 
1664: ST_TO_ADDR
// disable ;
1665: DISABLE
// end ; end ;
1666: END
// every 0 0$1 trigger first_attack_clear do
1667: LD_EXP 54
1671: IFFALSE 1731
1673: GO 1675
1675: DISABLE
// begin enable ;
1676: ENABLE
// if MietekTime then
1677: LD_EXP 24
1681: IFFALSE 1722
// begin MietekTime := MietekTime - 0 0$1 ;
1683: LD_ADDR_EXP 24
1687: PUSH
1688: LD_EXP 24
1692: PUSH
1693: LD_INT 35
1695: MINUS
1696: ST_TO_ADDR
// display_strings := display_strings ^ [ #MietekForces , MietekTime ] ;
1697: LD_ADDR_OWVAR 47
1701: PUSH
1702: LD_OWVAR 47
1706: PUSH
1707: LD_STRING #MietekForces
1709: PUSH
1710: LD_EXP 24
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: ADD
1719: ST_TO_ADDR
// end else
1720: GO 1731
// begin display_strings :=  ;
1722: LD_ADDR_OWVAR 47
1726: PUSH
1727: LD_STRING 
1729: ST_TO_ADDR
// disable ;
1730: DISABLE
// end ; end ; end_of_file
1731: END
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
1732: LD_VAR 0 1
1736: PPUSH
1737: CALL_OW 255
1741: PUSH
1742: LD_INT 3
1744: EQUAL
1745: PUSH
1746: LD_VAR 0 1
1750: PPUSH
1751: CALL_OW 266
1755: PUSH
1756: LD_INT 0
1758: EQUAL
1759: AND
1760: IFFALSE 1785
// begin RuDep := building ;
1762: LD_ADDR_EXP 80
1766: PUSH
1767: LD_VAR 0 1
1771: ST_TO_ADDR
// SetRestrict ( b_depot , 3 , false ) ;
1772: LD_INT 0
1774: PPUSH
1775: LD_INT 3
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 324
// end ; end ;
1785: PPOPN 2
1787: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 3 and GetBType ( b ) = b_depot then
1788: LD_VAR 0 1
1792: PPUSH
1793: CALL_OW 255
1797: PUSH
1798: LD_INT 3
1800: EQUAL
1801: PUSH
1802: LD_VAR 0 1
1806: PPUSH
1807: CALL_OW 266
1811: PUSH
1812: LD_INT 0
1814: EQUAL
1815: AND
1816: IFFALSE 1870
// begin DialogueOn ;
1818: CALL_OW 6
// Say ( Boris , 2Bor-01 ) ;
1822: LD_EXP 5
1826: PPUSH
1827: LD_STRING 2Bor-01
1829: PPUSH
1830: CALL_OW 88
// Say ( Vasilij , 2Vas-05 ) ;
1834: LD_EXP 6
1838: PPUSH
1839: LD_STRING 2Vas-05
1841: PPUSH
1842: CALL_OW 88
// ChangeMissionObjectives ( transport ) ;
1846: LD_STRING transport
1848: PPUSH
1849: CALL_OW 337
// SetTech ( 83 , 3 , 1 ) ;
1853: LD_INT 83
1855: PPUSH
1856: LD_INT 3
1858: PPUSH
1859: LD_INT 1
1861: PPUSH
1862: CALL_OW 322
// DialogueOff ;
1866: CALL_OW 7
// end ; if GetSide ( b ) = 3 and GetBType ( b ) = b_lab then
1870: LD_VAR 0 1
1874: PPUSH
1875: CALL_OW 255
1879: PUSH
1880: LD_INT 3
1882: EQUAL
1883: PUSH
1884: LD_VAR 0 1
1888: PPUSH
1889: CALL_OW 266
1893: PUSH
1894: LD_INT 6
1896: EQUAL
1897: AND
1898: IFFALSE 1956
// begin Say ( Vasilij , 2Vas-01 ) ;
1900: LD_EXP 6
1904: PPUSH
1905: LD_STRING 2Vas-01
1907: PPUSH
1908: CALL_OW 88
// Say ( Vasilij , 2Vas-02 ) ;
1912: LD_EXP 6
1916: PPUSH
1917: LD_STRING 2Vas-02
1919: PPUSH
1920: CALL_OW 88
// Say ( Yakotich , 2Yak-14 ) ;
1924: LD_EXP 3
1928: PPUSH
1929: LD_STRING 2Yak-14
1931: PPUSH
1932: CALL_OW 88
// ChangeMissionObjectives ( gattling ) ;
1936: LD_STRING gattling
1938: PPUSH
1939: CALL_OW 337
// SetTech ( 69 , 3 , 1 ) ;
1943: LD_INT 69
1945: PPUSH
1946: LD_INT 3
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: CALL_OW 322
// end ; end ;
1956: PPOPN 1
1958: END
// on VehicleRecycled ( BuildingID , VehicleID , Side , Nation , X , Y , Direction , Chassis , Controller , Engine , Weapon ) do begin if Side = 3 and Nation = 1 and Weapon in [ 3 , 5 ] and gun_recycled = false then
1959: LD_VAR 0 3
1963: PUSH
1964: LD_INT 3
1966: EQUAL
1967: PUSH
1968: LD_VAR 0 4
1972: PUSH
1973: LD_INT 1
1975: EQUAL
1976: AND
1977: PUSH
1978: LD_VAR 0 11
1982: PUSH
1983: LD_INT 3
1985: PUSH
1986: LD_INT 5
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: IN
1993: AND
1994: PUSH
1995: LD_EXP 50
1999: PUSH
2000: LD_INT 0
2002: EQUAL
2003: AND
2004: IFFALSE 2052
// begin gun_recycled = true ;
2006: LD_ADDR_EXP 50
2010: PUSH
2011: LD_INT 1
2013: ST_TO_ADDR
// Say ( Stanislav , 2Stan-04 ) ;
2014: LD_EXP 16
2018: PPUSH
2019: LD_STRING 2Stan-04
2021: PPUSH
2022: CALL_OW 88
// SetTech ( 39 , 3 , 1 ) ;
2026: LD_INT 39
2028: PPUSH
2029: LD_INT 3
2031: PPUSH
2032: LD_INT 1
2034: PPUSH
2035: CALL_OW 322
// SetRestrict ( 17 , 3 , 1 ) ;
2039: LD_INT 17
2041: PPUSH
2042: LD_INT 3
2044: PPUSH
2045: LD_INT 1
2047: PPUSH
2048: CALL_OW 324
// end ; end ;
2052: PPOPN 11
2054: END
// on Contact ( side1 , side2 ) do begin if ( ( side1 = 4 and side2 = 3 ) or ( side1 = 3 and side2 = 4 ) ) and reiforcements_called = false then
2055: LD_VAR 0 1
2059: PUSH
2060: LD_INT 4
2062: EQUAL
2063: PUSH
2064: LD_VAR 0 2
2068: PUSH
2069: LD_INT 3
2071: EQUAL
2072: AND
2073: PUSH
2074: LD_VAR 0 1
2078: PUSH
2079: LD_INT 3
2081: EQUAL
2082: PUSH
2083: LD_VAR 0 2
2087: PUSH
2088: LD_INT 4
2090: EQUAL
2091: AND
2092: OR
2093: PUSH
2094: LD_EXP 55
2098: PUSH
2099: LD_INT 0
2101: EQUAL
2102: AND
2103: IFFALSE 2207
// begin reiforcements_called := true ;
2105: LD_ADDR_EXP 55
2109: PUSH
2110: LD_INT 1
2112: ST_TO_ADDR
// Say ( Yakotich , 2Yak-23 ) ;
2113: LD_EXP 3
2117: PPUSH
2118: LD_STRING 2Yak-23
2120: PPUSH
2121: CALL_OW 88
// Wait ( 0 0$10 ) ;
2125: LD_INT 350
2127: PPUSH
2128: CALL_OW 67
// SayRadio ( Yakotich , 2Yak-Reinforcements ) ;
2132: LD_EXP 3
2136: PPUSH
2137: LD_STRING 2Yak-Reinforcements
2139: PPUSH
2140: CALL_OW 94
// SayRadio ( Morozov , 2Moro-Reinforcements ) ;
2144: LD_EXP 17
2148: PPUSH
2149: LD_STRING 2Moro-Reinforcements
2151: PPUSH
2152: CALL_OW 94
// Wait ( 0 0$10 ) ;
2156: LD_INT 350
2158: PPUSH
2159: CALL_OW 67
// SayRadio ( Mietek , 2Ryn-04 ) ;
2163: LD_EXP 4
2167: PPUSH
2168: LD_STRING 2Ryn-04
2170: PPUSH
2171: CALL_OW 94
// SayRadio ( Mietek , 2Ryn-05 ) ;
2175: LD_EXP 4
2179: PPUSH
2180: LD_STRING 2Ryn-05
2182: PPUSH
2183: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-24 ) ;
2187: LD_EXP 3
2191: PPUSH
2192: LD_STRING 2Yak-24
2194: PPUSH
2195: CALL_OW 94
// first_attack_clear = true ;
2199: LD_ADDR_EXP 54
2203: PUSH
2204: LD_INT 1
2206: ST_TO_ADDR
// end ; end ;
2207: PPOPN 2
2209: END
// every 0 0$1 trigger Researched ( 3 , 69 ) do
2210: LD_INT 3
2212: PPUSH
2213: LD_INT 69
2215: PPUSH
2216: CALL_OW 325
2220: IFFALSE 2264
2222: GO 2224
2224: DISABLE
// begin Say ( Vasilij , 2Vas-03 ) ;
2225: LD_EXP 6
2229: PPUSH
2230: LD_STRING 2Vas-03
2232: PPUSH
2233: CALL_OW 88
// Say ( Vasilij , 2Vas-04 ) ;
2237: LD_EXP 6
2241: PPUSH
2242: LD_STRING 2Vas-04
2244: PPUSH
2245: CALL_OW 88
// gattling_researched = true ;
2249: LD_ADDR_EXP 48
2253: PUSH
2254: LD_INT 1
2256: ST_TO_ADDR
// ChangeMissionObjectives ( gattling-2 ) ;
2257: LD_STRING gattling-2
2259: PPUSH
2260: CALL_OW 337
// end ;
2264: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
2265: LD_INT 3
2267: PPUSH
2268: LD_INT 90
2270: PPUSH
2271: CALL_OW 325
2275: IFFALSE 2295
2277: GO 2279
2279: DISABLE
// begin turrets_researched = true ;
2280: LD_ADDR_EXP 47
2284: PUSH
2285: LD_INT 1
2287: ST_TO_ADDR
// ChangeMissionObjectives ( turret-2 ) ;
2288: LD_STRING turret-2
2290: PPUSH
2291: CALL_OW 337
// end ;
2295: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 89 ] , [ f_weapon , 51 ] ] ] ) do
2296: LD_INT 22
2298: PUSH
2299: LD_INT 3
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PUSH
2306: LD_INT 21
2308: PUSH
2309: LD_INT 2
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PUSH
2316: LD_INT 2
2318: PUSH
2319: LD_INT 34
2321: PUSH
2322: LD_INT 89
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 34
2331: PUSH
2332: LD_INT 51
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: LIST
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: LIST
2348: PPUSH
2349: CALL_OW 69
2353: IFFALSE 2373
2355: GO 2357
2357: DISABLE
// begin ChangeMissionObjectives ( transport-2 ) ;
2358: LD_STRING transport-2
2360: PPUSH
2361: CALL_OW 337
// transport_builded = true ;
2365: LD_ADDR_EXP 52
2369: PUSH
2370: LD_INT 1
2372: ST_TO_ADDR
// end ;
2373: END
// every 0 0$1 trigger Researched ( 3 , 39 ) do
2374: LD_INT 3
2376: PPUSH
2377: LD_INT 39
2379: PPUSH
2380: CALL_OW 325
2384: IFFALSE 2440
2386: GO 2388
2388: DISABLE
// begin Say ( Stanislav , 2Stan-05 ) ;
2389: LD_EXP 16
2393: PPUSH
2394: LD_STRING 2Stan-05
2396: PPUSH
2397: CALL_OW 88
// Say ( Stanislav , 2Stan-06 ) ;
2401: LD_EXP 16
2405: PPUSH
2406: LD_STRING 2Stan-06
2408: PPUSH
2409: CALL_OW 88
// Say ( Yakotich , 2Yak-Stan-02 ) ;
2413: LD_EXP 3
2417: PPUSH
2418: LD_STRING 2Yak-Stan-02
2420: PPUSH
2421: CALL_OW 88
// gun_researched = true ;
2425: LD_ADDR_EXP 49
2429: PUSH
2430: LD_INT 1
2432: ST_TO_ADDR
// ChangeMissionObjectives ( gun-2 ) ;
2433: LD_STRING gun-2
2435: PPUSH
2436: CALL_OW 337
// end ; end_of_file
2440: END
// every 5 5$0 do var i ;
2441: GO 2443
2443: DISABLE
2444: LD_INT 0
2446: PPUSH
// begin for i = 1 to 4 do
2447: LD_ADDR_VAR 0 1
2451: PUSH
2452: DOUBLE
2453: LD_INT 1
2455: DEC
2456: ST_TO_ADDR
2457: LD_INT 4
2459: PUSH
2460: FOR_TO
2461: IFFALSE 2487
// begin CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
2463: LD_INT 2
2465: PPUSH
2466: LD_INT 5
2468: PPUSH
2469: CALL_OW 12
2473: PPUSH
2474: LD_INT 4
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: CALL_OW 55
// enable ;
2484: ENABLE
// end ;
2485: GO 2460
2487: POP
2488: POP
// end ; end_of_file
2489: PPOPN 1
2491: END
// export function InitAmerican ; var i , y , turrety , lab , fabryka , zbrojka , turrety2 , lab2 , fabryka2 , zbrojka2 ; begin
2492: LD_INT 0
2494: PPUSH
2495: PPUSH
2496: PPUSH
2497: PPUSH
2498: PPUSH
2499: PPUSH
2500: PPUSH
2501: PPUSH
2502: PPUSH
2503: PPUSH
2504: PPUSH
// AmNorthPersonel := [ ] ;
2505: LD_ADDR_EXP 27
2509: PUSH
2510: EMPTY
2511: ST_TO_ADDR
// uc_side := 1 ;
2512: LD_ADDR_OWVAR 20
2516: PUSH
2517: LD_INT 1
2519: ST_TO_ADDR
// uc_nation := 1 ;
2520: LD_ADDR_OWVAR 21
2524: PUSH
2525: LD_INT 1
2527: ST_TO_ADDR
// for i = 1 to [ 7 , 8 , 9 ] [ Difficulty ] do
2528: LD_ADDR_VAR 0 2
2532: PUSH
2533: DOUBLE
2534: LD_INT 1
2536: DEC
2537: ST_TO_ADDR
2538: LD_INT 7
2540: PUSH
2541: LD_INT 8
2543: PUSH
2544: LD_INT 9
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: LIST
2551: PUSH
2552: LD_OWVAR 67
2556: ARRAY
2557: PUSH
2558: FOR_TO
2559: IFFALSE 2614
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2561: LD_INT 0
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: CALL_OW 12
2571: PPUSH
2572: LD_INT 1
2574: PUSH
2575: LD_INT 3
2577: PUSH
2578: LD_INT 5
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: LIST
2585: PUSH
2586: LD_OWVAR 67
2590: ARRAY
2591: PPUSH
2592: CALL_OW 381
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2596: LD_ADDR_EXP 27
2600: PUSH
2601: LD_EXP 27
2605: PUSH
2606: CALL_OW 44
2610: ADD
2611: ST_TO_ADDR
// end ;
2612: GO 2558
2614: POP
2615: POP
// for i = 1 to 2 do
2616: LD_ADDR_VAR 0 2
2620: PUSH
2621: DOUBLE
2622: LD_INT 1
2624: DEC
2625: ST_TO_ADDR
2626: LD_INT 2
2628: PUSH
2629: FOR_TO
2630: IFFALSE 2685
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2632: LD_INT 0
2634: PPUSH
2635: LD_INT 1
2637: PPUSH
2638: CALL_OW 12
2642: PPUSH
2643: LD_INT 1
2645: PUSH
2646: LD_INT 3
2648: PUSH
2649: LD_INT 5
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_OWVAR 67
2661: ARRAY
2662: PPUSH
2663: CALL_OW 382
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2667: LD_ADDR_EXP 27
2671: PUSH
2672: LD_EXP 27
2676: PUSH
2677: CALL_OW 44
2681: ADD
2682: ST_TO_ADDR
// end ;
2683: GO 2629
2685: POP
2686: POP
// for i = 1 to 1 do
2687: LD_ADDR_VAR 0 2
2691: PUSH
2692: DOUBLE
2693: LD_INT 1
2695: DEC
2696: ST_TO_ADDR
2697: LD_INT 1
2699: PUSH
2700: FOR_TO
2701: IFFALSE 2756
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2703: LD_INT 0
2705: PPUSH
2706: LD_INT 1
2708: PPUSH
2709: CALL_OW 12
2713: PPUSH
2714: LD_INT 1
2716: PUSH
2717: LD_INT 3
2719: PUSH
2720: LD_INT 5
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: PUSH
2728: LD_OWVAR 67
2732: ARRAY
2733: PPUSH
2734: CALL_OW 383
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2738: LD_ADDR_EXP 27
2742: PUSH
2743: LD_EXP 27
2747: PUSH
2748: CALL_OW 44
2752: ADD
2753: ST_TO_ADDR
// end ;
2754: GO 2700
2756: POP
2757: POP
// for i = 1 to 1 do
2758: LD_ADDR_VAR 0 2
2762: PUSH
2763: DOUBLE
2764: LD_INT 1
2766: DEC
2767: ST_TO_ADDR
2768: LD_INT 1
2770: PUSH
2771: FOR_TO
2772: IFFALSE 2827
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2774: LD_INT 0
2776: PPUSH
2777: LD_INT 1
2779: PPUSH
2780: CALL_OW 12
2784: PPUSH
2785: LD_INT 1
2787: PUSH
2788: LD_INT 3
2790: PUSH
2791: LD_INT 5
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: LIST
2798: PUSH
2799: LD_OWVAR 67
2803: ARRAY
2804: PPUSH
2805: CALL_OW 384
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2809: LD_ADDR_EXP 27
2813: PUSH
2814: LD_EXP 27
2818: PUSH
2819: CALL_OW 44
2823: ADD
2824: ST_TO_ADDR
// end ;
2825: GO 2771
2827: POP
2828: POP
// turrety := FilterUnitsInArea ( AmNorthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
2829: LD_ADDR_VAR 0 4
2833: PUSH
2834: LD_INT 11
2836: PPUSH
2837: LD_INT 2
2839: PUSH
2840: LD_INT 30
2842: PUSH
2843: LD_INT 31
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: LD_INT 30
2852: PUSH
2853: LD_INT 32
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: PPUSH
2865: CALL_OW 70
2869: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_lab_half ] ] ) ;
2870: LD_ADDR_VAR 0 5
2874: PUSH
2875: LD_INT 11
2877: PPUSH
2878: LD_INT 30
2880: PUSH
2881: LD_INT 7
2883: PUSH
2884: EMPTY
2885: LIST
2886: LIST
2887: PUSH
2888: EMPTY
2889: LIST
2890: PPUSH
2891: CALL_OW 70
2895: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_factory ] ] ) ;
2896: LD_ADDR_VAR 0 6
2900: PUSH
2901: LD_INT 11
2903: PPUSH
2904: LD_INT 30
2906: PUSH
2907: LD_INT 3
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: PUSH
2914: EMPTY
2915: LIST
2916: PPUSH
2917: CALL_OW 70
2921: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
2922: LD_ADDR_VAR 0 7
2926: PUSH
2927: LD_INT 11
2929: PPUSH
2930: LD_INT 30
2932: PUSH
2933: LD_INT 4
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PUSH
2940: EMPTY
2941: LIST
2942: PPUSH
2943: CALL_OW 70
2947: ST_TO_ADDR
// y := 1 ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: LD_INT 1
2955: ST_TO_ADDR
// for i in AmNorthPersonel do
2956: LD_ADDR_VAR 0 2
2960: PUSH
2961: LD_EXP 27
2965: PUSH
2966: FOR_IN
2967: IFFALSE 3153
// begin PlaceUnitArea ( i , AmNorthArea , false ) ;
2969: LD_VAR 0 2
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 49
// case GetClass ( i ) of 1 :
2984: LD_VAR 0 2
2988: PPUSH
2989: CALL_OW 257
2993: PUSH
2994: LD_INT 1
2996: DOUBLE
2997: EQUAL
2998: IFTRUE 3002
3000: GO 3069
3002: POP
// begin if y > 6 then
3003: LD_VAR 0 3
3007: PUSH
3008: LD_INT 6
3010: GREATER
3011: IFFALSE 3033
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
3013: LD_VAR 0 2
3017: PPUSH
3018: LD_VAR 0 7
3022: PUSH
3023: LD_INT 1
3025: ARRAY
3026: PPUSH
3027: CALL_OW 120
3031: GO 3053
// ComEnterUnit ( i , turrety [ y ] ) ;
3033: LD_VAR 0 2
3037: PPUSH
3038: LD_VAR 0 4
3042: PUSH
3043: LD_VAR 0 3
3047: ARRAY
3048: PPUSH
3049: CALL_OW 120
// y = y + 1 ;
3053: LD_ADDR_VAR 0 3
3057: PUSH
3058: LD_VAR 0 3
3062: PUSH
3063: LD_INT 1
3065: PLUS
3066: ST_TO_ADDR
// end ; 2 :
3067: GO 3151
3069: LD_INT 2
3071: DOUBLE
3072: EQUAL
3073: IFTRUE 3077
3075: GO 3092
3077: POP
// ComEnterUnit ( i , AmDep1 ) ; 3 :
3078: LD_VAR 0 2
3082: PPUSH
3083: LD_INT 1
3085: PPUSH
3086: CALL_OW 120
3090: GO 3151
3092: LD_INT 3
3094: DOUBLE
3095: EQUAL
3096: IFTRUE 3100
3098: GO 3121
3100: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3101: LD_VAR 0 2
3105: PPUSH
3106: LD_VAR 0 6
3110: PUSH
3111: LD_INT 1
3113: ARRAY
3114: PPUSH
3115: CALL_OW 120
3119: GO 3151
3121: LD_INT 4
3123: DOUBLE
3124: EQUAL
3125: IFTRUE 3129
3127: GO 3150
3129: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3130: LD_VAR 0 2
3134: PPUSH
3135: LD_VAR 0 5
3139: PUSH
3140: LD_INT 1
3142: ARRAY
3143: PPUSH
3144: CALL_OW 120
3148: GO 3151
3150: POP
// end ;
3151: GO 2966
3153: POP
3154: POP
// AmSouthPersonel := [ ] ;
3155: LD_ADDR_EXP 28
3159: PUSH
3160: EMPTY
3161: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3162: LD_ADDR_VAR 0 2
3166: PUSH
3167: DOUBLE
3168: LD_INT 1
3170: DEC
3171: ST_TO_ADDR
3172: LD_INT 4
3174: PUSH
3175: LD_INT 5
3177: PUSH
3178: LD_INT 6
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: LIST
3185: PUSH
3186: LD_OWVAR 67
3190: ARRAY
3191: PUSH
3192: FOR_TO
3193: IFFALSE 3248
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3195: LD_INT 0
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: CALL_OW 12
3205: PPUSH
3206: LD_INT 1
3208: PUSH
3209: LD_INT 3
3211: PUSH
3212: LD_INT 5
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: LIST
3219: PUSH
3220: LD_OWVAR 67
3224: ARRAY
3225: PPUSH
3226: CALL_OW 381
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3230: LD_ADDR_EXP 28
3234: PUSH
3235: LD_EXP 28
3239: PUSH
3240: CALL_OW 44
3244: ADD
3245: ST_TO_ADDR
// end ;
3246: GO 3192
3248: POP
3249: POP
// for i = 1 to 1 do
3250: LD_ADDR_VAR 0 2
3254: PUSH
3255: DOUBLE
3256: LD_INT 1
3258: DEC
3259: ST_TO_ADDR
3260: LD_INT 1
3262: PUSH
3263: FOR_TO
3264: IFFALSE 3319
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3266: LD_INT 0
3268: PPUSH
3269: LD_INT 1
3271: PPUSH
3272: CALL_OW 12
3276: PPUSH
3277: LD_INT 1
3279: PUSH
3280: LD_INT 3
3282: PUSH
3283: LD_INT 5
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: LIST
3290: PUSH
3291: LD_OWVAR 67
3295: ARRAY
3296: PPUSH
3297: CALL_OW 382
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3301: LD_ADDR_EXP 28
3305: PUSH
3306: LD_EXP 28
3310: PUSH
3311: CALL_OW 44
3315: ADD
3316: ST_TO_ADDR
// end ;
3317: GO 3263
3319: POP
3320: POP
// for i = 1 to 2 do
3321: LD_ADDR_VAR 0 2
3325: PUSH
3326: DOUBLE
3327: LD_INT 1
3329: DEC
3330: ST_TO_ADDR
3331: LD_INT 2
3333: PUSH
3334: FOR_TO
3335: IFFALSE 3390
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3337: LD_INT 0
3339: PPUSH
3340: LD_INT 1
3342: PPUSH
3343: CALL_OW 12
3347: PPUSH
3348: LD_INT 1
3350: PUSH
3351: LD_INT 3
3353: PUSH
3354: LD_INT 5
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: LIST
3361: PUSH
3362: LD_OWVAR 67
3366: ARRAY
3367: PPUSH
3368: CALL_OW 383
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3372: LD_ADDR_EXP 28
3376: PUSH
3377: LD_EXP 28
3381: PUSH
3382: CALL_OW 44
3386: ADD
3387: ST_TO_ADDR
// end ;
3388: GO 3334
3390: POP
3391: POP
// for i = 1 to 1 do
3392: LD_ADDR_VAR 0 2
3396: PUSH
3397: DOUBLE
3398: LD_INT 1
3400: DEC
3401: ST_TO_ADDR
3402: LD_INT 1
3404: PUSH
3405: FOR_TO
3406: IFFALSE 3461
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3408: LD_INT 0
3410: PPUSH
3411: LD_INT 1
3413: PPUSH
3414: CALL_OW 12
3418: PPUSH
3419: LD_INT 1
3421: PUSH
3422: LD_INT 3
3424: PUSH
3425: LD_INT 5
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: LIST
3432: PUSH
3433: LD_OWVAR 67
3437: ARRAY
3438: PPUSH
3439: CALL_OW 384
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3443: LD_ADDR_EXP 28
3447: PUSH
3448: LD_EXP 28
3452: PUSH
3453: CALL_OW 44
3457: ADD
3458: ST_TO_ADDR
// end ;
3459: GO 3405
3461: POP
3462: POP
// turrety := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
3463: LD_ADDR_VAR 0 4
3467: PUSH
3468: LD_INT 13
3470: PPUSH
3471: LD_INT 2
3473: PUSH
3474: LD_INT 30
3476: PUSH
3477: LD_INT 31
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 30
3486: PUSH
3487: LD_INT 32
3489: PUSH
3490: EMPTY
3491: LIST
3492: LIST
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: LIST
3498: PPUSH
3499: CALL_OW 70
3503: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_lab ] ] ) ;
3504: LD_ADDR_VAR 0 5
3508: PUSH
3509: LD_INT 13
3511: PPUSH
3512: LD_INT 30
3514: PUSH
3515: LD_INT 6
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: PUSH
3522: EMPTY
3523: LIST
3524: PPUSH
3525: CALL_OW 70
3529: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_workshop ] ] ) ;
3530: LD_ADDR_VAR 0 6
3534: PUSH
3535: LD_INT 13
3537: PPUSH
3538: LD_INT 2
3540: PUSH
3541: LD_INT 30
3543: PUSH
3544: LD_INT 3
3546: PUSH
3547: EMPTY
3548: LIST
3549: LIST
3550: PUSH
3551: LD_INT 30
3553: PUSH
3554: LD_INT 2
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: LIST
3565: PPUSH
3566: CALL_OW 70
3570: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
3571: LD_ADDR_VAR 0 7
3575: PUSH
3576: LD_INT 13
3578: PPUSH
3579: LD_INT 30
3581: PUSH
3582: LD_INT 4
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: EMPTY
3590: LIST
3591: PPUSH
3592: CALL_OW 70
3596: ST_TO_ADDR
// y := 1 ;
3597: LD_ADDR_VAR 0 3
3601: PUSH
3602: LD_INT 1
3604: ST_TO_ADDR
// for i in AmSouthPersonel do
3605: LD_ADDR_VAR 0 2
3609: PUSH
3610: LD_EXP 28
3614: PUSH
3615: FOR_IN
3616: IFFALSE 3802
// begin PlaceUnitArea ( i , AmSouthArea , false ) ;
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_INT 12
3625: PPUSH
3626: LD_INT 0
3628: PPUSH
3629: CALL_OW 49
// case GetClass ( i ) of 1 :
3633: LD_VAR 0 2
3637: PPUSH
3638: CALL_OW 257
3642: PUSH
3643: LD_INT 1
3645: DOUBLE
3646: EQUAL
3647: IFTRUE 3651
3649: GO 3718
3651: POP
// begin if y > 2 then
3652: LD_VAR 0 3
3656: PUSH
3657: LD_INT 2
3659: GREATER
3660: IFFALSE 3682
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
3662: LD_VAR 0 2
3666: PPUSH
3667: LD_VAR 0 7
3671: PUSH
3672: LD_INT 1
3674: ARRAY
3675: PPUSH
3676: CALL_OW 120
3680: GO 3702
// ComEnterUnit ( i , turrety [ y ] ) ;
3682: LD_VAR 0 2
3686: PPUSH
3687: LD_VAR 0 4
3691: PUSH
3692: LD_VAR 0 3
3696: ARRAY
3697: PPUSH
3698: CALL_OW 120
// y = y + 1 ;
3702: LD_ADDR_VAR 0 3
3706: PUSH
3707: LD_VAR 0 3
3711: PUSH
3712: LD_INT 1
3714: PLUS
3715: ST_TO_ADDR
// end ; 2 :
3716: GO 3800
3718: LD_INT 2
3720: DOUBLE
3721: EQUAL
3722: IFTRUE 3726
3724: GO 3741
3726: POP
// ComEnterUnit ( i , AmDep2 ) ; 3 :
3727: LD_VAR 0 2
3731: PPUSH
3732: LD_INT 47
3734: PPUSH
3735: CALL_OW 120
3739: GO 3800
3741: LD_INT 3
3743: DOUBLE
3744: EQUAL
3745: IFTRUE 3749
3747: GO 3770
3749: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3750: LD_VAR 0 2
3754: PPUSH
3755: LD_VAR 0 6
3759: PUSH
3760: LD_INT 1
3762: ARRAY
3763: PPUSH
3764: CALL_OW 120
3768: GO 3800
3770: LD_INT 4
3772: DOUBLE
3773: EQUAL
3774: IFTRUE 3778
3776: GO 3799
3778: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3779: LD_VAR 0 2
3783: PPUSH
3784: LD_VAR 0 5
3788: PUSH
3789: LD_INT 1
3791: ARRAY
3792: PPUSH
3793: CALL_OW 120
3797: GO 3800
3799: POP
// end ;
3800: GO 3615
3802: POP
3803: POP
// end ;
3804: LD_VAR 0 1
3808: RET
// every 0 0$1 do var enemy , attacker ;
3809: GO 3811
3811: DISABLE
3812: LD_INT 0
3814: PPUSH
3815: PPUSH
// begin enable ;
3816: ENABLE
// enemy = Filterallunits ( [ f_side , 3 ] ) ;
3817: LD_ADDR_VAR 0 1
3821: PUSH
3822: LD_INT 22
3824: PUSH
3825: LD_INT 3
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: PPUSH
3832: CALL_OW 69
3836: ST_TO_ADDR
// for attacker in AmConvoysVehicles do
3837: LD_ADDR_VAR 0 2
3841: PUSH
3842: LD_EXP 26
3846: PUSH
3847: FOR_IN
3848: IFFALSE 3876
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
3850: LD_VAR 0 2
3854: PPUSH
3855: LD_VAR 0 1
3859: PPUSH
3860: LD_VAR 0 2
3864: PPUSH
3865: CALL_OW 74
3869: PPUSH
3870: CALL_OW 115
3874: GO 3847
3876: POP
3877: POP
// end ;
3878: PPOPN 2
3880: END
// every 0 0$1 do
3881: GO 3883
3883: DISABLE
// begin enable ;
3884: ENABLE
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
3885: LD_EXP 25
3889: PPUSH
3890: LD_INT 157
3892: PPUSH
3893: LD_INT 97
3895: PPUSH
3896: CALL_OW 114
// end ;
3900: END
// export function AmAttacks ; var i ; begin
3901: LD_INT 0
3903: PPUSH
3904: PPUSH
// Uc_Side = 4 ;
3905: LD_ADDR_OWVAR 20
3909: PUSH
3910: LD_INT 4
3912: ST_TO_ADDR
// Uc_Nation = 1 ;
3913: LD_ADDR_OWVAR 21
3917: PUSH
3918: LD_INT 1
3920: ST_TO_ADDR
// Wait ( 4 4$30 ) ;
3921: LD_INT 9450
3923: PPUSH
3924: CALL_OW 67
// first_attack_spawned = true ;
3928: LD_ADDR_EXP 53
3932: PUSH
3933: LD_INT 1
3935: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: DOUBLE
3942: LD_INT 1
3944: DEC
3945: ST_TO_ADDR
3946: LD_INT 2
3948: PUSH
3949: LD_INT 2
3951: PUSH
3952: LD_INT 3
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: LIST
3959: PUSH
3960: LD_OWVAR 67
3964: ARRAY
3965: PUSH
3966: FOR_TO
3967: IFFALSE 4047
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
3969: LD_INT 0
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: CALL_OW 12
3979: PPUSH
3980: LD_INT 1
3982: PUSH
3983: LD_INT 2
3985: PUSH
3986: LD_INT 3
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: LIST
3993: PUSH
3994: LD_OWVAR 67
3998: ARRAY
3999: PPUSH
4000: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
4004: LD_ADDR_EXP 37
4008: PUSH
4009: CALL_OW 44
4013: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
4014: LD_ADDR_EXP 25
4018: PUSH
4019: LD_EXP 25
4023: PUSH
4024: LD_EXP 37
4028: ADD
4029: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4030: LD_EXP 37
4034: PPUSH
4035: LD_INT 1
4037: PPUSH
4038: LD_INT 0
4040: PPUSH
4041: CALL_OW 49
// end ;
4045: GO 3966
4047: POP
4048: POP
// for i = 1 to [ 0 , 1 , 1 ] [ Difficulty ] do
4049: LD_ADDR_VAR 0 2
4053: PUSH
4054: DOUBLE
4055: LD_INT 1
4057: DEC
4058: ST_TO_ADDR
4059: LD_INT 0
4061: PUSH
4062: LD_INT 1
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: LIST
4072: PUSH
4073: LD_OWVAR 67
4077: ARRAY
4078: PUSH
4079: FOR_TO
4080: IFFALSE 4160
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4082: LD_INT 0
4084: PPUSH
4085: LD_INT 1
4087: PPUSH
4088: CALL_OW 12
4092: PPUSH
4093: LD_INT 1
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: LD_INT 3
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: LD_OWVAR 67
4111: ARRAY
4112: PPUSH
4113: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4117: LD_ADDR_EXP 38
4121: PUSH
4122: CALL_OW 44
4126: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4127: LD_ADDR_EXP 25
4131: PUSH
4132: LD_EXP 25
4136: PUSH
4137: LD_EXP 38
4141: ADD
4142: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4143: LD_EXP 38
4147: PPUSH
4148: LD_INT 1
4150: PPUSH
4151: LD_INT 0
4153: PPUSH
4154: CALL_OW 49
// end ;
4158: GO 4079
4160: POP
4161: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4162: LD_ADDR_VAR 0 2
4166: PUSH
4167: DOUBLE
4168: LD_INT 1
4170: DEC
4171: ST_TO_ADDR
4172: LD_INT 1
4174: PUSH
4175: LD_INT 1
4177: PUSH
4178: LD_INT 1
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_OWVAR 67
4190: ARRAY
4191: PUSH
4192: FOR_TO
4193: IFFALSE 4273
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4195: LD_INT 0
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: CALL_OW 12
4205: PPUSH
4206: LD_INT 1
4208: PUSH
4209: LD_INT 2
4211: PUSH
4212: LD_INT 3
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: PUSH
4220: LD_OWVAR 67
4224: ARRAY
4225: PPUSH
4226: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4230: LD_ADDR_EXP 40
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4240: LD_ADDR_EXP 25
4244: PUSH
4245: LD_EXP 25
4249: PUSH
4250: LD_EXP 40
4254: ADD
4255: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4256: LD_EXP 40
4260: PPUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 0
4266: PPUSH
4267: CALL_OW 49
// end ;
4271: GO 4192
4273: POP
4274: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4275: LD_ADDR_VAR 0 2
4279: PUSH
4280: DOUBLE
4281: LD_INT 1
4283: DEC
4284: ST_TO_ADDR
4285: LD_INT 1
4287: PUSH
4288: LD_INT 1
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: PUSH
4299: LD_OWVAR 67
4303: ARRAY
4304: PUSH
4305: FOR_TO
4306: IFFALSE 4480
// begin uc_side := 4 ;
4308: LD_ADDR_OWVAR 20
4312: PUSH
4313: LD_INT 4
4315: ST_TO_ADDR
// uc_nation := 1 ;
4316: LD_ADDR_OWVAR 21
4320: PUSH
4321: LD_INT 1
4323: ST_TO_ADDR
// vc_control = control_manual ;
4324: LD_ADDR_OWVAR 38
4328: PUSH
4329: LD_INT 1
4331: ST_TO_ADDR
// vc_engine = engine_combustion ;
4332: LD_ADDR_OWVAR 39
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4340: LD_ADDR_OWVAR 37
4344: PUSH
4345: LD_INT 2
4347: PPUSH
4348: LD_INT 4
4350: PPUSH
4351: CALL_OW 12
4355: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4356: LD_ADDR_OWVAR 40
4360: PUSH
4361: LD_INT 3
4363: PPUSH
4364: LD_INT 5
4366: PPUSH
4367: CALL_OW 12
4371: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4372: LD_ADDR_EXP 41
4376: PUSH
4377: CALL_OW 45
4381: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4382: LD_INT 0
4384: PPUSH
4385: LD_INT 1
4387: PPUSH
4388: CALL_OW 12
4392: PPUSH
4393: LD_INT 1
4395: PUSH
4396: LD_INT 2
4398: PUSH
4399: LD_INT 3
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: LIST
4406: PUSH
4407: LD_OWVAR 67
4411: ARRAY
4412: PPUSH
4413: CALL_OW 383
// AmMechConvoy := CreateHuman ;
4417: LD_ADDR_EXP 39
4421: PUSH
4422: CALL_OW 44
4426: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
4427: LD_EXP 39
4431: PPUSH
4432: LD_EXP 41
4436: PPUSH
4437: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
4441: LD_EXP 41
4445: PPUSH
4446: LD_INT 14
4448: PPUSH
4449: LD_INT 0
4451: PPUSH
4452: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
4456: LD_ADDR_EXP 26
4460: PUSH
4461: LD_EXP 26
4465: PUSH
4466: LD_EXP 39
4470: ADD
4471: PUSH
4472: LD_EXP 41
4476: ADD
4477: ST_TO_ADDR
// end ;
4478: GO 4305
4480: POP
4481: POP
// Wait ( 5 5$45 ) ;
4482: LD_INT 12075
4484: PPUSH
4485: CALL_OW 67
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4489: LD_ADDR_VAR 0 2
4493: PUSH
4494: DOUBLE
4495: LD_INT 1
4497: DEC
4498: ST_TO_ADDR
4499: LD_INT 2
4501: PUSH
4502: LD_INT 3
4504: PUSH
4505: LD_INT 4
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: LIST
4512: PUSH
4513: LD_OWVAR 67
4517: ARRAY
4518: PUSH
4519: FOR_TO
4520: IFFALSE 4600
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4522: LD_INT 0
4524: PPUSH
4525: LD_INT 1
4527: PPUSH
4528: CALL_OW 12
4532: PPUSH
4533: LD_INT 1
4535: PUSH
4536: LD_INT 2
4538: PUSH
4539: LD_INT 4
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: LIST
4546: PUSH
4547: LD_OWVAR 67
4551: ARRAY
4552: PPUSH
4553: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
4557: LD_ADDR_EXP 37
4561: PUSH
4562: CALL_OW 44
4566: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
4567: LD_ADDR_EXP 25
4571: PUSH
4572: LD_EXP 25
4576: PUSH
4577: LD_EXP 37
4581: ADD
4582: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4583: LD_EXP 37
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 0
4593: PPUSH
4594: CALL_OW 49
// end ;
4598: GO 4519
4600: POP
4601: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4602: LD_ADDR_VAR 0 2
4606: PUSH
4607: DOUBLE
4608: LD_INT 1
4610: DEC
4611: ST_TO_ADDR
4612: LD_INT 1
4614: PUSH
4615: LD_INT 2
4617: PUSH
4618: LD_INT 2
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: PUSH
4626: LD_OWVAR 67
4630: ARRAY
4631: PUSH
4632: FOR_TO
4633: IFFALSE 4713
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4635: LD_INT 0
4637: PPUSH
4638: LD_INT 1
4640: PPUSH
4641: CALL_OW 12
4645: PPUSH
4646: LD_INT 1
4648: PUSH
4649: LD_INT 2
4651: PUSH
4652: LD_INT 4
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: LIST
4659: PUSH
4660: LD_OWVAR 67
4664: ARRAY
4665: PPUSH
4666: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4670: LD_ADDR_EXP 38
4674: PUSH
4675: CALL_OW 44
4679: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4680: LD_ADDR_EXP 25
4684: PUSH
4685: LD_EXP 25
4689: PUSH
4690: LD_EXP 38
4694: ADD
4695: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4696: LD_EXP 38
4700: PPUSH
4701: LD_INT 1
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// end ;
4711: GO 4632
4713: POP
4714: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4715: LD_ADDR_VAR 0 2
4719: PUSH
4720: DOUBLE
4721: LD_INT 1
4723: DEC
4724: ST_TO_ADDR
4725: LD_INT 1
4727: PUSH
4728: LD_INT 1
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4826
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4748: LD_INT 0
4750: PPUSH
4751: LD_INT 1
4753: PPUSH
4754: CALL_OW 12
4758: PPUSH
4759: LD_INT 1
4761: PUSH
4762: LD_INT 2
4764: PUSH
4765: LD_INT 4
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: LIST
4772: PUSH
4773: LD_OWVAR 67
4777: ARRAY
4778: PPUSH
4779: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4783: LD_ADDR_EXP 40
4787: PUSH
4788: CALL_OW 44
4792: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4793: LD_ADDR_EXP 25
4797: PUSH
4798: LD_EXP 25
4802: PUSH
4803: LD_EXP 40
4807: ADD
4808: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4809: LD_EXP 40
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: LD_INT 0
4819: PPUSH
4820: CALL_OW 49
// end ;
4824: GO 4745
4826: POP
4827: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4828: LD_ADDR_VAR 0 2
4832: PUSH
4833: DOUBLE
4834: LD_INT 1
4836: DEC
4837: ST_TO_ADDR
4838: LD_INT 1
4840: PUSH
4841: LD_INT 2
4843: PUSH
4844: LD_INT 2
4846: PUSH
4847: EMPTY
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: LD_OWVAR 67
4856: ARRAY
4857: PUSH
4858: FOR_TO
4859: IFFALSE 5033
// begin uc_side := 4 ;
4861: LD_ADDR_OWVAR 20
4865: PUSH
4866: LD_INT 4
4868: ST_TO_ADDR
// uc_nation := 1 ;
4869: LD_ADDR_OWVAR 21
4873: PUSH
4874: LD_INT 1
4876: ST_TO_ADDR
// vc_control = control_manual ;
4877: LD_ADDR_OWVAR 38
4881: PUSH
4882: LD_INT 1
4884: ST_TO_ADDR
// vc_engine = engine_combustion ;
4885: LD_ADDR_OWVAR 39
4889: PUSH
4890: LD_INT 1
4892: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4893: LD_ADDR_OWVAR 37
4897: PUSH
4898: LD_INT 2
4900: PPUSH
4901: LD_INT 4
4903: PPUSH
4904: CALL_OW 12
4908: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4909: LD_ADDR_OWVAR 40
4913: PUSH
4914: LD_INT 3
4916: PPUSH
4917: LD_INT 5
4919: PPUSH
4920: CALL_OW 12
4924: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4925: LD_ADDR_EXP 41
4929: PUSH
4930: CALL_OW 45
4934: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4935: LD_INT 0
4937: PPUSH
4938: LD_INT 1
4940: PPUSH
4941: CALL_OW 12
4945: PPUSH
4946: LD_INT 1
4948: PUSH
4949: LD_INT 2
4951: PUSH
4952: LD_INT 4
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: LIST
4959: PUSH
4960: LD_OWVAR 67
4964: ARRAY
4965: PPUSH
4966: CALL_OW 383
// AmMechConvoy := CreateHuman ;
4970: LD_ADDR_EXP 39
4974: PUSH
4975: CALL_OW 44
4979: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
4980: LD_EXP 39
4984: PPUSH
4985: LD_EXP 41
4989: PPUSH
4990: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
4994: LD_EXP 41
4998: PPUSH
4999: LD_INT 14
5001: PPUSH
5002: LD_INT 0
5004: PPUSH
5005: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
5009: LD_ADDR_EXP 26
5013: PUSH
5014: LD_EXP 26
5018: PUSH
5019: LD_EXP 39
5023: ADD
5024: PUSH
5025: LD_EXP 41
5029: ADD
5030: ST_TO_ADDR
// end ;
5031: GO 4858
5033: POP
5034: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5035: LD_EXP 25
5039: PPUSH
5040: LD_INT 157
5042: PPUSH
5043: LD_INT 97
5045: PPUSH
5046: CALL_OW 114
// Wait ( 5 5$0 ) ;
5050: LD_INT 10500
5052: PPUSH
5053: CALL_OW 67
// for i = 1 to [ 3 , 4 , 6 ] [ Difficulty ] do
5057: LD_ADDR_VAR 0 2
5061: PUSH
5062: DOUBLE
5063: LD_INT 1
5065: DEC
5066: ST_TO_ADDR
5067: LD_INT 3
5069: PUSH
5070: LD_INT 4
5072: PUSH
5073: LD_INT 6
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: LIST
5080: PUSH
5081: LD_OWVAR 67
5085: ARRAY
5086: PUSH
5087: FOR_TO
5088: IFFALSE 5168
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5090: LD_INT 0
5092: PPUSH
5093: LD_INT 1
5095: PPUSH
5096: CALL_OW 12
5100: PPUSH
5101: LD_INT 1
5103: PUSH
5104: LD_INT 2
5106: PUSH
5107: LD_INT 4
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: LIST
5114: PUSH
5115: LD_OWVAR 67
5119: ARRAY
5120: PPUSH
5121: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5125: LD_ADDR_EXP 37
5129: PUSH
5130: CALL_OW 44
5134: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5135: LD_ADDR_EXP 25
5139: PUSH
5140: LD_EXP 25
5144: PUSH
5145: LD_EXP 37
5149: ADD
5150: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5151: LD_EXP 37
5155: PPUSH
5156: LD_INT 1
5158: PPUSH
5159: LD_INT 0
5161: PPUSH
5162: CALL_OW 49
// end ;
5166: GO 5087
5168: POP
5169: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
5170: LD_ADDR_VAR 0 2
5174: PUSH
5175: DOUBLE
5176: LD_INT 1
5178: DEC
5179: ST_TO_ADDR
5180: LD_INT 1
5182: PUSH
5183: LD_INT 2
5185: PUSH
5186: LD_INT 2
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PUSH
5194: LD_OWVAR 67
5198: ARRAY
5199: PUSH
5200: FOR_TO
5201: IFFALSE 5281
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5203: LD_INT 0
5205: PPUSH
5206: LD_INT 1
5208: PPUSH
5209: CALL_OW 12
5213: PPUSH
5214: LD_INT 1
5216: PUSH
5217: LD_INT 2
5219: PUSH
5220: LD_INT 4
5222: PUSH
5223: EMPTY
5224: LIST
5225: LIST
5226: LIST
5227: PUSH
5228: LD_OWVAR 67
5232: ARRAY
5233: PPUSH
5234: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5238: LD_ADDR_EXP 38
5242: PUSH
5243: CALL_OW 44
5247: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5248: LD_ADDR_EXP 25
5252: PUSH
5253: LD_EXP 25
5257: PUSH
5258: LD_EXP 38
5262: ADD
5263: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5264: LD_EXP 38
5268: PPUSH
5269: LD_INT 1
5271: PPUSH
5272: LD_INT 0
5274: PPUSH
5275: CALL_OW 49
// end ;
5279: GO 5200
5281: POP
5282: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5283: LD_ADDR_VAR 0 2
5287: PUSH
5288: DOUBLE
5289: LD_INT 1
5291: DEC
5292: ST_TO_ADDR
5293: LD_INT 1
5295: PUSH
5296: LD_INT 1
5298: PUSH
5299: LD_INT 2
5301: PUSH
5302: EMPTY
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: PUSH
5313: FOR_TO
5314: IFFALSE 5394
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5316: LD_INT 0
5318: PPUSH
5319: LD_INT 1
5321: PPUSH
5322: CALL_OW 12
5326: PPUSH
5327: LD_INT 1
5329: PUSH
5330: LD_INT 2
5332: PUSH
5333: LD_INT 4
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: LIST
5340: PUSH
5341: LD_OWVAR 67
5345: ARRAY
5346: PPUSH
5347: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5351: LD_ADDR_EXP 40
5355: PUSH
5356: CALL_OW 44
5360: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5361: LD_ADDR_EXP 25
5365: PUSH
5366: LD_EXP 25
5370: PUSH
5371: LD_EXP 40
5375: ADD
5376: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5377: LD_EXP 40
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: LD_INT 0
5387: PPUSH
5388: CALL_OW 49
// end ;
5392: GO 5313
5394: POP
5395: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5396: LD_ADDR_VAR 0 2
5400: PUSH
5401: DOUBLE
5402: LD_INT 1
5404: DEC
5405: ST_TO_ADDR
5406: LD_INT 1
5408: PUSH
5409: LD_INT 2
5411: PUSH
5412: LD_INT 3
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: PUSH
5420: LD_OWVAR 67
5424: ARRAY
5425: PUSH
5426: FOR_TO
5427: IFFALSE 5601
// begin uc_side := 4 ;
5429: LD_ADDR_OWVAR 20
5433: PUSH
5434: LD_INT 4
5436: ST_TO_ADDR
// uc_nation := 1 ;
5437: LD_ADDR_OWVAR 21
5441: PUSH
5442: LD_INT 1
5444: ST_TO_ADDR
// vc_control = control_manual ;
5445: LD_ADDR_OWVAR 38
5449: PUSH
5450: LD_INT 1
5452: ST_TO_ADDR
// vc_engine = engine_combustion ;
5453: LD_ADDR_OWVAR 39
5457: PUSH
5458: LD_INT 1
5460: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
5461: LD_ADDR_OWVAR 37
5465: PUSH
5466: LD_INT 2
5468: PPUSH
5469: LD_INT 4
5471: PPUSH
5472: CALL_OW 12
5476: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
5477: LD_ADDR_OWVAR 40
5481: PUSH
5482: LD_INT 3
5484: PPUSH
5485: LD_INT 5
5487: PPUSH
5488: CALL_OW 12
5492: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
5493: LD_ADDR_EXP 41
5497: PUSH
5498: CALL_OW 45
5502: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5503: LD_INT 0
5505: PPUSH
5506: LD_INT 1
5508: PPUSH
5509: CALL_OW 12
5513: PPUSH
5514: LD_INT 1
5516: PUSH
5517: LD_INT 2
5519: PUSH
5520: LD_INT 4
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: PUSH
5528: LD_OWVAR 67
5532: ARRAY
5533: PPUSH
5534: CALL_OW 383
// AmMechConvoy := CreateHuman ;
5538: LD_ADDR_EXP 39
5542: PUSH
5543: CALL_OW 44
5547: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
5548: LD_EXP 39
5552: PPUSH
5553: LD_EXP 41
5557: PPUSH
5558: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
5562: LD_EXP 41
5566: PPUSH
5567: LD_INT 14
5569: PPUSH
5570: LD_INT 0
5572: PPUSH
5573: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
5577: LD_ADDR_EXP 26
5581: PUSH
5582: LD_EXP 26
5586: PUSH
5587: LD_EXP 39
5591: ADD
5592: PUSH
5593: LD_EXP 41
5597: ADD
5598: ST_TO_ADDR
// end ;
5599: GO 5426
5601: POP
5602: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5603: LD_EXP 25
5607: PPUSH
5608: LD_INT 157
5610: PPUSH
5611: LD_INT 97
5613: PPUSH
5614: CALL_OW 114
// Wait ( 5 5$0 ) ;
5618: LD_INT 10500
5620: PPUSH
5621: CALL_OW 67
// for i = 1 to [ 3 , 5 , 7 ] [ Difficulty ] do
5625: LD_ADDR_VAR 0 2
5629: PUSH
5630: DOUBLE
5631: LD_INT 1
5633: DEC
5634: ST_TO_ADDR
5635: LD_INT 3
5637: PUSH
5638: LD_INT 5
5640: PUSH
5641: LD_INT 7
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: LIST
5648: PUSH
5649: LD_OWVAR 67
5653: ARRAY
5654: PUSH
5655: FOR_TO
5656: IFFALSE 5736
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5658: LD_INT 0
5660: PPUSH
5661: LD_INT 1
5663: PPUSH
5664: CALL_OW 12
5668: PPUSH
5669: LD_INT 1
5671: PUSH
5672: LD_INT 2
5674: PUSH
5675: LD_INT 4
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: LIST
5682: PUSH
5683: LD_OWVAR 67
5687: ARRAY
5688: PPUSH
5689: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5693: LD_ADDR_EXP 37
5697: PUSH
5698: CALL_OW 44
5702: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5703: LD_ADDR_EXP 25
5707: PUSH
5708: LD_EXP 25
5712: PUSH
5713: LD_EXP 37
5717: ADD
5718: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5719: LD_EXP 37
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: LD_INT 0
5729: PPUSH
5730: CALL_OW 49
// end ;
5734: GO 5655
5736: POP
5737: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5738: LD_ADDR_VAR 0 2
5742: PUSH
5743: DOUBLE
5744: LD_INT 1
5746: DEC
5747: ST_TO_ADDR
5748: LD_INT 1
5750: PUSH
5751: LD_INT 2
5753: PUSH
5754: LD_INT 3
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: PUSH
5762: LD_OWVAR 67
5766: ARRAY
5767: PUSH
5768: FOR_TO
5769: IFFALSE 5849
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5771: LD_INT 0
5773: PPUSH
5774: LD_INT 1
5776: PPUSH
5777: CALL_OW 12
5781: PPUSH
5782: LD_INT 1
5784: PUSH
5785: LD_INT 2
5787: PUSH
5788: LD_INT 4
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: PUSH
5796: LD_OWVAR 67
5800: ARRAY
5801: PPUSH
5802: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5806: LD_ADDR_EXP 38
5810: PUSH
5811: CALL_OW 44
5815: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5816: LD_ADDR_EXP 25
5820: PUSH
5821: LD_EXP 25
5825: PUSH
5826: LD_EXP 38
5830: ADD
5831: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5832: LD_EXP 38
5836: PPUSH
5837: LD_INT 1
5839: PPUSH
5840: LD_INT 0
5842: PPUSH
5843: CALL_OW 49
// end ;
5847: GO 5768
5849: POP
5850: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5851: LD_ADDR_VAR 0 2
5855: PUSH
5856: DOUBLE
5857: LD_INT 1
5859: DEC
5860: ST_TO_ADDR
5861: LD_INT 1
5863: PUSH
5864: LD_INT 1
5866: PUSH
5867: LD_INT 2
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: LIST
5874: PUSH
5875: LD_OWVAR 67
5879: ARRAY
5880: PUSH
5881: FOR_TO
5882: IFFALSE 5962
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5884: LD_INT 0
5886: PPUSH
5887: LD_INT 1
5889: PPUSH
5890: CALL_OW 12
5894: PPUSH
5895: LD_INT 1
5897: PUSH
5898: LD_INT 2
5900: PUSH
5901: LD_INT 4
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: LIST
5908: PUSH
5909: LD_OWVAR 67
5913: ARRAY
5914: PPUSH
5915: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5919: LD_ADDR_EXP 40
5923: PUSH
5924: CALL_OW 44
5928: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5929: LD_ADDR_EXP 25
5933: PUSH
5934: LD_EXP 25
5938: PUSH
5939: LD_EXP 40
5943: ADD
5944: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5945: LD_EXP 40
5949: PPUSH
5950: LD_INT 1
5952: PPUSH
5953: LD_INT 0
5955: PPUSH
5956: CALL_OW 49
// end ;
5960: GO 5881
5962: POP
5963: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5964: LD_ADDR_VAR 0 2
5968: PUSH
5969: DOUBLE
5970: LD_INT 1
5972: DEC
5973: ST_TO_ADDR
5974: LD_INT 1
5976: PUSH
5977: LD_INT 2
5979: PUSH
5980: LD_INT 3
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_OWVAR 67
5992: ARRAY
5993: PUSH
5994: FOR_TO
5995: IFFALSE 6169
// begin uc_side := 4 ;
5997: LD_ADDR_OWVAR 20
6001: PUSH
6002: LD_INT 4
6004: ST_TO_ADDR
// uc_nation := 1 ;
6005: LD_ADDR_OWVAR 21
6009: PUSH
6010: LD_INT 1
6012: ST_TO_ADDR
// vc_control = control_manual ;
6013: LD_ADDR_OWVAR 38
6017: PUSH
6018: LD_INT 1
6020: ST_TO_ADDR
// vc_engine = engine_combustion ;
6021: LD_ADDR_OWVAR 39
6025: PUSH
6026: LD_INT 1
6028: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6029: LD_ADDR_OWVAR 37
6033: PUSH
6034: LD_INT 2
6036: PPUSH
6037: LD_INT 4
6039: PPUSH
6040: CALL_OW 12
6044: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6045: LD_ADDR_OWVAR 40
6049: PUSH
6050: LD_INT 3
6052: PPUSH
6053: LD_INT 5
6055: PPUSH
6056: CALL_OW 12
6060: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6061: LD_ADDR_EXP 41
6065: PUSH
6066: CALL_OW 45
6070: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6071: LD_INT 0
6073: PPUSH
6074: LD_INT 1
6076: PPUSH
6077: CALL_OW 12
6081: PPUSH
6082: LD_INT 1
6084: PUSH
6085: LD_INT 2
6087: PUSH
6088: LD_INT 4
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: LIST
6095: PUSH
6096: LD_OWVAR 67
6100: ARRAY
6101: PPUSH
6102: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6106: LD_ADDR_EXP 39
6110: PUSH
6111: CALL_OW 44
6115: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6116: LD_EXP 39
6120: PPUSH
6121: LD_EXP 41
6125: PPUSH
6126: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6130: LD_EXP 41
6134: PPUSH
6135: LD_INT 14
6137: PPUSH
6138: LD_INT 0
6140: PPUSH
6141: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6145: LD_ADDR_EXP 26
6149: PUSH
6150: LD_EXP 26
6154: PUSH
6155: LD_EXP 39
6159: ADD
6160: PUSH
6161: LD_EXP 41
6165: ADD
6166: ST_TO_ADDR
// end ;
6167: GO 5994
6169: POP
6170: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
6171: LD_EXP 25
6175: PPUSH
6176: LD_INT 157
6178: PPUSH
6179: LD_INT 97
6181: PPUSH
6182: CALL_OW 114
// Wait ( 5 5$0 ) ;
6186: LD_INT 10500
6188: PPUSH
6189: CALL_OW 67
// for i = 1 to [ 4 , 6 , 10 ] [ Difficulty ] do
6193: LD_ADDR_VAR 0 2
6197: PUSH
6198: DOUBLE
6199: LD_INT 1
6201: DEC
6202: ST_TO_ADDR
6203: LD_INT 4
6205: PUSH
6206: LD_INT 6
6208: PUSH
6209: LD_INT 10
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: LIST
6216: PUSH
6217: LD_OWVAR 67
6221: ARRAY
6222: PUSH
6223: FOR_TO
6224: IFFALSE 6304
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6226: LD_INT 0
6228: PPUSH
6229: LD_INT 1
6231: PPUSH
6232: CALL_OW 12
6236: PPUSH
6237: LD_INT 1
6239: PUSH
6240: LD_INT 2
6242: PUSH
6243: LD_INT 4
6245: PUSH
6246: EMPTY
6247: LIST
6248: LIST
6249: LIST
6250: PUSH
6251: LD_OWVAR 67
6255: ARRAY
6256: PPUSH
6257: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
6261: LD_ADDR_EXP 37
6265: PUSH
6266: CALL_OW 44
6270: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
6271: LD_ADDR_EXP 25
6275: PUSH
6276: LD_EXP 25
6280: PUSH
6281: LD_EXP 37
6285: ADD
6286: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
6287: LD_EXP 37
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: LD_INT 0
6297: PPUSH
6298: CALL_OW 49
// end ;
6302: GO 6223
6304: POP
6305: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
6306: LD_ADDR_VAR 0 2
6310: PUSH
6311: DOUBLE
6312: LD_INT 1
6314: DEC
6315: ST_TO_ADDR
6316: LD_INT 1
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 3
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: PUSH
6330: LD_OWVAR 67
6334: ARRAY
6335: PUSH
6336: FOR_TO
6337: IFFALSE 6417
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6339: LD_INT 0
6341: PPUSH
6342: LD_INT 1
6344: PPUSH
6345: CALL_OW 12
6349: PPUSH
6350: LD_INT 1
6352: PUSH
6353: LD_INT 2
6355: PUSH
6356: LD_INT 4
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: LIST
6363: PUSH
6364: LD_OWVAR 67
6368: ARRAY
6369: PPUSH
6370: CALL_OW 384
// AmSciConvoy = CreateHuman ;
6374: LD_ADDR_EXP 38
6378: PUSH
6379: CALL_OW 44
6383: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
6384: LD_ADDR_EXP 25
6388: PUSH
6389: LD_EXP 25
6393: PUSH
6394: LD_EXP 38
6398: ADD
6399: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
6400: LD_EXP 38
6404: PPUSH
6405: LD_INT 1
6407: PPUSH
6408: LD_INT 0
6410: PPUSH
6411: CALL_OW 49
// end ;
6415: GO 6336
6417: POP
6418: POP
// for i = 1 to [ 1 , 1 , 3 ] [ Difficulty ] do
6419: LD_ADDR_VAR 0 2
6423: PUSH
6424: DOUBLE
6425: LD_INT 1
6427: DEC
6428: ST_TO_ADDR
6429: LD_INT 1
6431: PUSH
6432: LD_INT 1
6434: PUSH
6435: LD_INT 3
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: LIST
6442: PUSH
6443: LD_OWVAR 67
6447: ARRAY
6448: PUSH
6449: FOR_TO
6450: IFFALSE 6530
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6452: LD_INT 0
6454: PPUSH
6455: LD_INT 1
6457: PPUSH
6458: CALL_OW 12
6462: PPUSH
6463: LD_INT 1
6465: PUSH
6466: LD_INT 2
6468: PUSH
6469: LD_INT 4
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: LIST
6476: PUSH
6477: LD_OWVAR 67
6481: ARRAY
6482: PPUSH
6483: CALL_OW 382
// AmEngConvoy = CreateHuman ;
6487: LD_ADDR_EXP 40
6491: PUSH
6492: CALL_OW 44
6496: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
6497: LD_ADDR_EXP 25
6501: PUSH
6502: LD_EXP 25
6506: PUSH
6507: LD_EXP 40
6511: ADD
6512: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
6513: LD_EXP 40
6517: PPUSH
6518: LD_INT 1
6520: PPUSH
6521: LD_INT 0
6523: PPUSH
6524: CALL_OW 49
// end ;
6528: GO 6449
6530: POP
6531: POP
// for i = 1 to [ 1 , 2 , 4 ] [ Difficulty ] do
6532: LD_ADDR_VAR 0 2
6536: PUSH
6537: DOUBLE
6538: LD_INT 1
6540: DEC
6541: ST_TO_ADDR
6542: LD_INT 1
6544: PUSH
6545: LD_INT 2
6547: PUSH
6548: LD_INT 4
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: PUSH
6556: LD_OWVAR 67
6560: ARRAY
6561: PUSH
6562: FOR_TO
6563: IFFALSE 6737
// begin uc_side := 4 ;
6565: LD_ADDR_OWVAR 20
6569: PUSH
6570: LD_INT 4
6572: ST_TO_ADDR
// uc_nation := 1 ;
6573: LD_ADDR_OWVAR 21
6577: PUSH
6578: LD_INT 1
6580: ST_TO_ADDR
// vc_control = control_manual ;
6581: LD_ADDR_OWVAR 38
6585: PUSH
6586: LD_INT 1
6588: ST_TO_ADDR
// vc_engine = engine_combustion ;
6589: LD_ADDR_OWVAR 39
6593: PUSH
6594: LD_INT 1
6596: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6597: LD_ADDR_OWVAR 37
6601: PUSH
6602: LD_INT 2
6604: PPUSH
6605: LD_INT 4
6607: PPUSH
6608: CALL_OW 12
6612: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6613: LD_ADDR_OWVAR 40
6617: PUSH
6618: LD_INT 3
6620: PPUSH
6621: LD_INT 5
6623: PPUSH
6624: CALL_OW 12
6628: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6629: LD_ADDR_EXP 41
6633: PUSH
6634: CALL_OW 45
6638: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6639: LD_INT 0
6641: PPUSH
6642: LD_INT 1
6644: PPUSH
6645: CALL_OW 12
6649: PPUSH
6650: LD_INT 1
6652: PUSH
6653: LD_INT 2
6655: PUSH
6656: LD_INT 4
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: LIST
6663: PUSH
6664: LD_OWVAR 67
6668: ARRAY
6669: PPUSH
6670: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6674: LD_ADDR_EXP 39
6678: PUSH
6679: CALL_OW 44
6683: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6684: LD_EXP 39
6688: PPUSH
6689: LD_EXP 41
6693: PPUSH
6694: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6698: LD_EXP 41
6702: PPUSH
6703: LD_INT 14
6705: PPUSH
6706: LD_INT 0
6708: PPUSH
6709: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6713: LD_ADDR_EXP 26
6717: PUSH
6718: LD_EXP 26
6722: PUSH
6723: LD_EXP 39
6727: ADD
6728: PUSH
6729: LD_EXP 41
6733: ADD
6734: ST_TO_ADDR
// end ;
6735: GO 6562
6737: POP
6738: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
6739: LD_EXP 25
6743: PPUSH
6744: LD_INT 157
6746: PPUSH
6747: LD_INT 97
6749: PPUSH
6750: CALL_OW 114
// end ; end_of_file
6754: LD_VAR 0 1
6758: RET
// export function InitRussian ; begin
6759: LD_INT 0
6761: PPUSH
// Uc_Nation := 3 ;
6762: LD_ADDR_OWVAR 21
6766: PUSH
6767: LD_INT 3
6769: ST_TO_ADDR
// Uc_Side := 3 ;
6770: LD_ADDR_OWVAR 20
6774: PUSH
6775: LD_INT 3
6777: ST_TO_ADDR
// YakotichCrew := YakotichCrew ^ Yakotich ^ Mietek ^ Boris ^ Michail ^ Vasilij ^ Maksim ^ Fiodor ^ Aleksandr ^ Aleksiej ^ Pavel ^ Zakhar ^ Constantin ^ Stanislav ^ Josif ;
6778: LD_ADDR_EXP 1
6782: PUSH
6783: LD_EXP 1
6787: PUSH
6788: LD_EXP 3
6792: ADD
6793: PUSH
6794: LD_EXP 4
6798: ADD
6799: PUSH
6800: LD_EXP 5
6804: ADD
6805: PUSH
6806: LD_EXP 7
6810: ADD
6811: PUSH
6812: LD_EXP 6
6816: ADD
6817: PUSH
6818: LD_EXP 9
6822: ADD
6823: PUSH
6824: LD_EXP 10
6828: ADD
6829: PUSH
6830: LD_EXP 14
6834: ADD
6835: PUSH
6836: LD_EXP 13
6840: ADD
6841: PUSH
6842: LD_EXP 11
6846: ADD
6847: PUSH
6848: LD_EXP 12
6852: ADD
6853: PUSH
6854: LD_EXP 8
6858: ADD
6859: PUSH
6860: LD_EXP 16
6864: ADD
6865: PUSH
6866: LD_EXP 15
6870: ADD
6871: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 01_ ) ;
6872: LD_ADDR_EXP 3
6876: PUSH
6877: LD_STRING Yakotich
6879: PPUSH
6880: LD_INT 1
6882: PPUSH
6883: LD_STRING 01_
6885: PPUSH
6886: CALL 514 0 3
6890: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 01_ ) ;
6891: LD_ADDR_EXP 4
6895: PUSH
6896: LD_STRING Mietek
6898: PPUSH
6899: LD_INT 1
6901: PPUSH
6902: LD_STRING 01_
6904: PPUSH
6905: CALL 514 0 3
6909: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 01_ ) ;
6910: LD_ADDR_EXP 5
6914: PUSH
6915: LD_STRING Boris
6917: PPUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_STRING 01_
6923: PPUSH
6924: CALL 514 0 3
6928: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 01_ ) ;
6929: LD_ADDR_EXP 7
6933: PUSH
6934: LD_STRING Michail
6936: PPUSH
6937: LD_INT 1
6939: PPUSH
6940: LD_STRING 01_
6942: PPUSH
6943: CALL 514 0 3
6947: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 01_ ) ;
6948: LD_ADDR_EXP 6
6952: PUSH
6953: LD_STRING Vasilij
6955: PPUSH
6956: LD_INT 1
6958: PPUSH
6959: LD_STRING 01_
6961: PPUSH
6962: CALL 514 0 3
6966: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 01_ ) ;
6967: LD_ADDR_EXP 9
6971: PUSH
6972: LD_STRING Maksim
6974: PPUSH
6975: LD_INT 1
6977: PPUSH
6978: LD_STRING 01_
6980: PPUSH
6981: CALL 514 0 3
6985: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 01_ ) ;
6986: LD_ADDR_EXP 10
6990: PUSH
6991: LD_STRING Fiodor
6993: PPUSH
6994: LD_INT 1
6996: PPUSH
6997: LD_STRING 01_
6999: PPUSH
7000: CALL 514 0 3
7004: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 01_ ) ;
7005: LD_ADDR_EXP 14
7009: PUSH
7010: LD_STRING Aleksandr
7012: PPUSH
7013: LD_INT 1
7015: PPUSH
7016: LD_STRING 01_
7018: PPUSH
7019: CALL 514 0 3
7023: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 01_ ) ;
7024: LD_ADDR_EXP 13
7028: PUSH
7029: LD_STRING Aleksiej
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: LD_STRING 01_
7037: PPUSH
7038: CALL 514 0 3
7042: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 01_ ) ;
7043: LD_ADDR_EXP 11
7047: PUSH
7048: LD_STRING Pavel
7050: PPUSH
7051: LD_INT 1
7053: PPUSH
7054: LD_STRING 01_
7056: PPUSH
7057: CALL 514 0 3
7061: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 01_ ) ;
7062: LD_ADDR_EXP 12
7066: PUSH
7067: LD_STRING Zakhar
7069: PPUSH
7070: LD_INT 1
7072: PPUSH
7073: LD_STRING 01_
7075: PPUSH
7076: CALL 514 0 3
7080: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 01_ ) ;
7081: LD_ADDR_EXP 8
7085: PUSH
7086: LD_STRING Constantin
7088: PPUSH
7089: LD_INT 1
7091: PPUSH
7092: LD_STRING 01_
7094: PPUSH
7095: CALL 514 0 3
7099: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , false ,  ) ;
7100: LD_ADDR_EXP 16
7104: PUSH
7105: LD_STRING Stanislav
7107: PPUSH
7108: LD_INT 0
7110: PPUSH
7111: LD_STRING 
7113: PPUSH
7114: CALL 514 0 3
7118: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false ,  ) ;
7119: LD_ADDR_EXP 15
7123: PUSH
7124: LD_STRING Josif
7126: PPUSH
7127: LD_INT 0
7129: PPUSH
7130: LD_STRING 
7132: PPUSH
7133: CALL 514 0 3
7137: ST_TO_ADDR
// SetClass ( Boris , 2 ) ;
7138: LD_EXP 5
7142: PPUSH
7143: LD_INT 2
7145: PPUSH
7146: CALL_OW 336
// SetClass ( Vasilij , 4 ) ;
7150: LD_EXP 6
7154: PPUSH
7155: LD_INT 4
7157: PPUSH
7158: CALL_OW 336
// Uc_Side := 6 ;
7162: LD_ADDR_OWVAR 20
7166: PUSH
7167: LD_INT 6
7169: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
7170: LD_ADDR_EXP 17
7174: PUSH
7175: LD_STRING Morozov
7177: PPUSH
7178: LD_INT 0
7180: PPUSH
7181: LD_STRING 
7183: PPUSH
7184: CALL 514 0 3
7188: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
7189: LD_ADDR_EXP 18
7193: PUSH
7194: LD_STRING Kurin
7196: PPUSH
7197: LD_INT 0
7199: PPUSH
7200: LD_STRING 
7202: PPUSH
7203: CALL 514 0 3
7207: ST_TO_ADDR
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
7208: LD_ADDR_EXP 19
7212: PUSH
7213: LD_STRING Grishko
7215: PPUSH
7216: LD_INT 0
7218: PPUSH
7219: LD_STRING 
7221: PPUSH
7222: CALL 514 0 3
7226: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
7227: LD_ADDR_EXP 20
7231: PUSH
7232: LD_STRING Burlak
7234: PPUSH
7235: LD_INT 0
7237: PPUSH
7238: LD_STRING 
7240: PPUSH
7241: CALL 514 0 3
7245: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
7246: LD_ADDR_EXP 21
7250: PUSH
7251: LD_STRING Platonov
7253: PPUSH
7254: LD_INT 0
7256: PPUSH
7257: LD_STRING 
7259: PPUSH
7260: CALL 514 0 3
7264: ST_TO_ADDR
// Uc_Side := 1 ;
7265: LD_ADDR_OWVAR 20
7269: PUSH
7270: LD_INT 1
7272: ST_TO_ADDR
// AmSold := PrepareUnit ( AmSold , false ,  ) ;
7273: LD_ADDR_EXP 22
7277: PUSH
7278: LD_STRING AmSold
7280: PPUSH
7281: LD_INT 0
7283: PPUSH
7284: LD_STRING 
7286: PPUSH
7287: CALL 514 0 3
7291: ST_TO_ADDR
// end ;
7292: LD_VAR 0 1
7296: RET
// export function Czolg ; begin
7297: LD_INT 0
7299: PPUSH
// if LoadVariable ( 01_Vehicle , 1 ) then
7300: LD_STRING 01_Vehicle
7302: PPUSH
7303: LD_INT 1
7305: PPUSH
7306: CALL_OW 30
7310: IFFALSE 7393
// begin Uc_Side = 3 ;
7312: LD_ADDR_OWVAR 20
7316: PUSH
7317: LD_INT 3
7319: ST_TO_ADDR
// Uc_Nation = 3 ;
7320: LD_ADDR_OWVAR 21
7324: PUSH
7325: LD_INT 3
7327: ST_TO_ADDR
// Uc_Direction = 2 ;
7328: LD_ADDR_OWVAR 24
7332: PUSH
7333: LD_INT 2
7335: ST_TO_ADDR
// Vc_Chassis = 21 ;
7336: LD_ADDR_OWVAR 37
7340: PUSH
7341: LD_INT 21
7343: ST_TO_ADDR
// Vc_Control = 1 ;
7344: LD_ADDR_OWVAR 38
7348: PUSH
7349: LD_INT 1
7351: ST_TO_ADDR
// Vc_Engine = 1 ;
7352: LD_ADDR_OWVAR 39
7356: PUSH
7357: LD_INT 1
7359: ST_TO_ADDR
// Vc_Weapon = 42 ;
7360: LD_ADDR_OWVAR 40
7364: PUSH
7365: LD_INT 42
7367: ST_TO_ADDR
// Tank := CreateVehicle ;
7368: LD_ADDR_EXP 42
7372: PUSH
7373: CALL_OW 45
7377: ST_TO_ADDR
// PlaceUnitArea ( Tank , VehSpawn , false ) ;
7378: LD_EXP 42
7382: PPUSH
7383: LD_INT 19
7385: PPUSH
7386: LD_INT 0
7388: PPUSH
7389: CALL_OW 49
// end ; end ; end_of_file
7393: LD_VAR 0 1
7397: RET
// export function Action ; var i ; begin
7398: LD_INT 0
7400: PPUSH
7401: PPUSH
// if LoadVariable ( 01_Vehicle , 1 ) then
7402: LD_STRING 01_Vehicle
7404: PPUSH
7405: LD_INT 1
7407: PPUSH
7408: CALL_OW 30
7412: IFFALSE 7430
// PlaceHumanInUnit ( Yakotich , Tank ) else
7414: LD_EXP 3
7418: PPUSH
7419: LD_EXP 42
7423: PPUSH
7424: CALL_OW 52
7428: GO 7445
// PlaceUnitArea ( Yakotich , RussianSpawn , false ) ;
7430: LD_EXP 3
7434: PPUSH
7435: LD_INT 2
7437: PPUSH
7438: LD_INT 0
7440: PPUSH
7441: CALL_OW 49
// PlaceUnitArea ( Maksim , RussianSpawn , false ) ;
7445: LD_EXP 9
7449: PPUSH
7450: LD_INT 2
7452: PPUSH
7453: LD_INT 0
7455: PPUSH
7456: CALL_OW 49
// PlaceUnitArea ( Vasilij , RussianSpawn , false ) ;
7460: LD_EXP 6
7464: PPUSH
7465: LD_INT 2
7467: PPUSH
7468: LD_INT 0
7470: PPUSH
7471: CALL_OW 49
// PlaceUnitArea ( Michail , RussianSpawn , false ) ;
7475: LD_EXP 7
7479: PPUSH
7480: LD_INT 2
7482: PPUSH
7483: LD_INT 0
7485: PPUSH
7486: CALL_OW 49
// PlaceUnitArea ( Fiodor , RussianSpawn , false ) ;
7490: LD_EXP 10
7494: PPUSH
7495: LD_INT 2
7497: PPUSH
7498: LD_INT 0
7500: PPUSH
7501: CALL_OW 49
// PlaceUnitArea ( Constantin , RussianSpawn , false ) ;
7505: LD_EXP 8
7509: PPUSH
7510: LD_INT 2
7512: PPUSH
7513: LD_INT 0
7515: PPUSH
7516: CALL_OW 49
// PlaceUnitArea ( Boris , RussianSpawn , false ) ;
7520: LD_EXP 5
7524: PPUSH
7525: LD_INT 2
7527: PPUSH
7528: LD_INT 0
7530: PPUSH
7531: CALL_OW 49
// InGameOn ;
7535: CALL_OW 8
// DialogueOn ;
7539: CALL_OW 6
// CenterNowOnXY ( 152 , 28 ) ;
7543: LD_INT 152
7545: PPUSH
7546: LD_INT 28
7548: PPUSH
7549: CALL_OW 86
// Wait ( 0 0$3 ) ;
7553: LD_INT 105
7555: PPUSH
7556: CALL_OW 67
// Say ( Yakotich , 2Yak-13 ) ;
7560: LD_EXP 3
7564: PPUSH
7565: LD_STRING 2Yak-13
7567: PPUSH
7568: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
7572: LD_STRING o1
7574: PPUSH
7575: CALL_OW 337
// MaksimScout ;
7579: CALL 1446 0 0
// InGameOff ;
7583: CALL_OW 9
// DialogueOff ;
7587: CALL_OW 7
// Say ( Michail , 2Mich-02 ) ;
7591: LD_EXP 7
7595: PPUSH
7596: LD_STRING 2Mich-02
7598: PPUSH
7599: CALL_OW 88
// Say ( Michail , 2Mich-03 ) ;
7603: LD_EXP 7
7607: PPUSH
7608: LD_STRING 2Mich-03
7610: PPUSH
7611: CALL_OW 88
// Say ( Yakotich , 2Yak-15 ) ;
7615: LD_EXP 3
7619: PPUSH
7620: LD_STRING 2Yak-15
7622: PPUSH
7623: CALL_OW 88
// ChangeMissionObjectives ( turret ) ;
7627: LD_STRING turret
7629: PPUSH
7630: CALL_OW 337
// SaveForQuickRestart ;
7634: CALL_OW 22
// end ;
7638: LD_VAR 0 1
7642: RET
// every 0 0$1 trigger maksim_scout_ended = true and See ( 3 , Maksim ) do
7643: LD_EXP 45
7647: PUSH
7648: LD_INT 1
7650: EQUAL
7651: PUSH
7652: LD_INT 3
7654: PPUSH
7655: LD_EXP 9
7659: PPUSH
7660: CALL_OW 292
7664: AND
7665: IFFALSE 7993
7667: GO 7669
7669: DISABLE
// begin CenterNowOnUnits ( Maksim ) ;
7670: LD_EXP 9
7674: PPUSH
7675: CALL_OW 87
// DialogueOn ;
7679: CALL_OW 6
// RevealFogArea ( 3 , ScoutedTerrains ) ;
7683: LD_INT 3
7685: PPUSH
7686: LD_INT 8
7688: PPUSH
7689: CALL_OW 332
// Say ( Maksim , 2Mak-06 ) ;
7693: LD_EXP 9
7697: PPUSH
7698: LD_STRING 2Mak-06
7700: PPUSH
7701: CALL_OW 88
// Say ( Yakotich , 2Yak-16 ) ;
7705: LD_EXP 3
7709: PPUSH
7710: LD_STRING 2Yak-16
7712: PPUSH
7713: CALL_OW 88
// CenterNowOnXY ( 40 , 10 ) ;
7717: LD_INT 40
7719: PPUSH
7720: LD_INT 10
7722: PPUSH
7723: CALL_OW 86
// Wait ( 0 0$03 ) ;
7727: LD_INT 105
7729: PPUSH
7730: CALL_OW 67
// CenterOnXY ( 55 , 40 ) ;
7734: LD_INT 55
7736: PPUSH
7737: LD_INT 40
7739: PPUSH
7740: CALL_OW 84
// Wait ( 0 0$03 ) ;
7744: LD_INT 105
7746: PPUSH
7747: CALL_OW 67
// CenterOnXY ( 70 , 72 ) ;
7751: LD_INT 70
7753: PPUSH
7754: LD_INT 72
7756: PPUSH
7757: CALL_OW 84
// Say ( Maksim , 2Mak-07 ) ;
7761: LD_EXP 9
7765: PPUSH
7766: LD_STRING 2Mak-07
7768: PPUSH
7769: CALL_OW 88
// Say ( Maksim , 2Mak-08 ) ;
7773: LD_EXP 9
7777: PPUSH
7778: LD_STRING 2Mak-08
7780: PPUSH
7781: CALL_OW 88
// CenterNowOnUnits ( Yakotich ) ;
7785: LD_EXP 3
7789: PPUSH
7790: CALL_OW 87
// Say ( Yakotich , 2Yak-17 ) ;
7794: LD_EXP 3
7798: PPUSH
7799: LD_STRING 2Yak-17
7801: PPUSH
7802: CALL_OW 88
// Say ( Yakotich , 2Yak-18 ) ;
7806: LD_EXP 3
7810: PPUSH
7811: LD_STRING 2Yak-18
7813: PPUSH
7814: CALL_OW 88
// Say ( Maksim , 2Mak-09 ) ;
7818: LD_EXP 9
7822: PPUSH
7823: LD_STRING 2Mak-09
7825: PPUSH
7826: CALL_OW 88
// Say ( Maksim , 2Mak-10 ) ;
7830: LD_EXP 9
7834: PPUSH
7835: LD_STRING 2Mak-10
7837: PPUSH
7838: CALL_OW 88
// Say ( Maksim , 2Mak-11 ) ;
7842: LD_EXP 9
7846: PPUSH
7847: LD_STRING 2Mak-11
7849: PPUSH
7850: CALL_OW 88
// Say ( Yakotich , 2Yak-19 ) ;
7854: LD_EXP 3
7858: PPUSH
7859: LD_STRING 2Yak-19
7861: PPUSH
7862: CALL_OW 88
// SayRadio ( Yakotich , 2Yak-20 ) ;
7866: LD_EXP 3
7870: PPUSH
7871: LD_STRING 2Yak-20
7873: PPUSH
7874: CALL_OW 94
// SayRadio ( Morozov , 2Moro-05 ) ;
7878: LD_EXP 17
7882: PPUSH
7883: LD_STRING 2Moro-05
7885: PPUSH
7886: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-21 ) ;
7890: LD_EXP 3
7894: PPUSH
7895: LD_STRING 2Yak-21
7897: PPUSH
7898: CALL_OW 94
// SayRadio ( Morozov , 2Moro-06 ) ;
7902: LD_EXP 17
7906: PPUSH
7907: LD_STRING 2Moro-06
7909: PPUSH
7910: CALL_OW 94
// SayRadio ( Morozov , 2Moro-07 ) ;
7914: LD_EXP 17
7918: PPUSH
7919: LD_STRING 2Moro-07
7921: PPUSH
7922: CALL_OW 94
// SayRadio ( Morozov , 2Moro-08 ) ;
7926: LD_EXP 17
7930: PPUSH
7931: LD_STRING 2Moro-08
7933: PPUSH
7934: CALL_OW 94
// SayRadio ( Morozov , 2Moro-09 ) ;
7938: LD_EXP 17
7942: PPUSH
7943: LD_STRING 2Moro-09
7945: PPUSH
7946: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-22 ) ;
7950: LD_EXP 3
7954: PPUSH
7955: LD_STRING 2Yak-22
7957: PPUSH
7958: CALL_OW 94
// ChangeMissionObjectives ( o2 ) ;
7962: LD_STRING o2
7964: PPUSH
7965: CALL_OW 337
// DialogueOff ;
7969: CALL_OW 7
// maksim_back = true ;
7973: LD_ADDR_EXP 46
7977: PUSH
7978: LD_INT 1
7980: ST_TO_ADDR
// SetSide ( Maksim , 3 ) ;
7981: LD_EXP 9
7985: PPUSH
7986: LD_INT 3
7988: PPUSH
7989: CALL_OW 235
// end ;
7993: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
7994: LD_INT 3
7996: PPUSH
7997: LD_INT 90
7999: PPUSH
8000: CALL_OW 325
8004: IFFALSE 8033
8006: GO 8008
8008: DISABLE
// begin Say ( Michail , 2Mich-04 ) ;
8009: LD_EXP 7
8013: PPUSH
8014: LD_STRING 2Mich-04
8016: PPUSH
8017: CALL_OW 88
// Say ( Michail , 2Mich-05 ) ;
8021: LD_EXP 7
8025: PPUSH
8026: LD_STRING 2Mich-05
8028: PPUSH
8029: CALL_OW 88
// end ;
8033: END
// every 0 0$1 trigger Researched ( 3 , 83 ) do
8034: LD_INT 3
8036: PPUSH
8037: LD_INT 83
8039: PPUSH
8040: CALL_OW 325
8044: IFFALSE 8061
8046: GO 8048
8048: DISABLE
// begin Say ( Vasilij , 2Vas-07 ) ;
8049: LD_EXP 6
8053: PPUSH
8054: LD_STRING 2Vas-07
8056: PPUSH
8057: CALL_OW 88
// end ;
8061: END
// every 0 0$1 trigger first_attack_clear do
8062: LD_EXP 54
8066: IFFALSE 8279
8068: GO 8070
8070: DISABLE
// begin Wait ( 5 5$0 ) ;
8071: LD_INT 10500
8073: PPUSH
8074: CALL_OW 67
// PlaceUnitArea ( Mietek , RussianSpawn , false ) ;
8078: LD_EXP 4
8082: PPUSH
8083: LD_INT 2
8085: PPUSH
8086: LD_INT 0
8088: PPUSH
8089: CALL_OW 49
// PlaceUnitArea ( Aleksiej , RussianSpawn , false ) ;
8093: LD_EXP 13
8097: PPUSH
8098: LD_INT 2
8100: PPUSH
8101: LD_INT 0
8103: PPUSH
8104: CALL_OW 49
// PlaceUnitArea ( Aleksandr , RussianSpawn , false ) ;
8108: LD_EXP 14
8112: PPUSH
8113: LD_INT 2
8115: PPUSH
8116: LD_INT 0
8118: PPUSH
8119: CALL_OW 49
// PlaceUnitArea ( Josif , RussianSpawn , false ) ;
8123: LD_EXP 15
8127: PPUSH
8128: LD_INT 2
8130: PPUSH
8131: LD_INT 0
8133: PPUSH
8134: CALL_OW 49
// PlaceUnitArea ( Zakhar , RussianSpawn , false ) ;
8138: LD_EXP 12
8142: PPUSH
8143: LD_INT 2
8145: PPUSH
8146: LD_INT 0
8148: PPUSH
8149: CALL_OW 49
// PlaceUnitArea ( Stanislav , RussianSpawn , false ) ;
8153: LD_EXP 16
8157: PPUSH
8158: LD_INT 2
8160: PPUSH
8161: LD_INT 0
8163: PPUSH
8164: CALL_OW 49
// PlaceUnitArea ( Pavel , RussianSpawn , false ) ;
8168: LD_EXP 11
8172: PPUSH
8173: LD_INT 2
8175: PPUSH
8176: LD_INT 0
8178: PPUSH
8179: CALL_OW 49
// DialogueOn ;
8183: CALL_OW 6
// CenterNowOnUnits ( Mietek ) ;
8187: LD_EXP 4
8191: PPUSH
8192: CALL_OW 87
// SayRadio ( Mietek , 2Ryn-06 ) ;
8196: LD_EXP 4
8200: PPUSH
8201: LD_STRING 2Ryn-06
8203: PPUSH
8204: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-25 ) ;
8208: LD_EXP 3
8212: PPUSH
8213: LD_STRING 2Yak-25
8215: PPUSH
8216: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-01 ) ;
8220: LD_EXP 16
8224: PPUSH
8225: LD_STRING 2Stan-01
8227: PPUSH
8228: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-02 ) ;
8232: LD_EXP 16
8236: PPUSH
8237: LD_STRING 2Stan-02
8239: PPUSH
8240: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-03 ) ;
8244: LD_EXP 16
8248: PPUSH
8249: LD_STRING 2Stan-03
8251: PPUSH
8252: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-Stan-01 ) ;
8256: LD_EXP 3
8260: PPUSH
8261: LD_STRING 2Yak-Stan-01
8263: PPUSH
8264: CALL_OW 94
// ChangeMissionObjectives ( gun ) ;
8268: LD_STRING gun
8270: PPUSH
8271: CALL_OW 337
// DialogueOff ;
8275: CALL_OW 7
// end ;
8279: END
// every 0 0$1 trigger maksim_back = true do
8280: LD_EXP 46
8284: PUSH
8285: LD_INT 1
8287: EQUAL
8288: IFFALSE 8411
8290: GO 8292
8292: DISABLE
// begin Wait ( 30 30$0 ) ;
8293: LD_INT 63000
8295: PPUSH
8296: CALL_OW 67
// DialogueOn ;
8300: CALL_OW 6
// InGameOn ;
8304: CALL_OW 8
// SayRadio ( Kurin , 2Kurin-01 ) ;
8308: LD_EXP 18
8312: PPUSH
8313: LD_STRING 2Kurin-01
8315: PPUSH
8316: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-02 ) ;
8320: LD_EXP 18
8324: PPUSH
8325: LD_STRING 2Kurin-02
8327: PPUSH
8328: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-26 ) ;
8332: LD_EXP 3
8336: PPUSH
8337: LD_STRING 2Yak-26
8339: PPUSH
8340: CALL_OW 94
// ChangeMissionObjectives ( o3 ) ;
8344: LD_STRING o3
8346: PPUSH
8347: CALL_OW 337
// Say ( Maksim , 2Mak-12 ) ;
8351: LD_EXP 9
8355: PPUSH
8356: LD_STRING 2Mak-12
8358: PPUSH
8359: CALL_OW 88
// CenterNowOnXY ( 57 , 2 ) ;
8363: LD_INT 57
8365: PPUSH
8366: LD_INT 2
8368: PPUSH
8369: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
8373: LD_INT 3
8375: PPUSH
8376: LD_INT 9
8378: PPUSH
8379: CALL_OW 332
// Say ( Maksim , 2Mak-13 ) ;
8383: LD_EXP 9
8387: PPUSH
8388: LD_STRING 2Mak-13
8390: PPUSH
8391: CALL_OW 88
// DialogueOff ;
8395: CALL_OW 7
// InGameOff ;
8399: CALL_OW 9
// kurin_attack_started = true ;
8403: LD_ADDR_EXP 56
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// end ;
8411: END
// every 1 trigger kurin_attack_started = true and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var unit ;
8412: LD_EXP 56
8416: PUSH
8417: LD_INT 1
8419: EQUAL
8420: PUSH
8421: LD_INT 22
8423: PUSH
8424: LD_INT 1
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: LD_INT 21
8433: PUSH
8434: LD_INT 1
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: PPUSH
8445: CALL_OW 69
8449: PUSH
8450: LD_INT 0
8452: EQUAL
8453: AND
8454: IFFALSE 9068
8456: GO 8458
8458: DISABLE
8459: LD_INT 0
8461: PPUSH
// begin InGameOn ;
8462: CALL_OW 8
// SayRadio ( Yakotich , 2Yak-27 ) ;
8466: LD_EXP 3
8470: PPUSH
8471: LD_STRING 2Yak-27
8473: PPUSH
8474: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-03 ) ;
8478: LD_EXP 18
8482: PPUSH
8483: LD_STRING 2Kurin-03
8485: PPUSH
8486: CALL_OW 94
// SayRadio ( AmSold , 2AmSold-01 ) ;
8490: LD_EXP 22
8494: PPUSH
8495: LD_STRING 2AmSold-01
8497: PPUSH
8498: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-04 ) ;
8502: LD_EXP 18
8506: PPUSH
8507: LD_STRING 2Kurin-04
8509: PPUSH
8510: CALL_OW 94
// Wait ( 0 0$02 ) ;
8514: LD_INT 70
8516: PPUSH
8517: CALL_OW 67
// SayRadio ( Grishko , 2Gri-01 ) ;
8521: LD_EXP 19
8525: PPUSH
8526: LD_STRING 2Gri-01
8528: PPUSH
8529: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-05 ) ;
8533: LD_EXP 18
8537: PPUSH
8538: LD_STRING 2Kurin-05
8540: PPUSH
8541: CALL_OW 94
// SayRadio ( Grishko , 2Gri-02 ) ;
8545: LD_EXP 19
8549: PPUSH
8550: LD_STRING 2Gri-02
8552: PPUSH
8553: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-06 ) ;
8557: LD_EXP 18
8561: PPUSH
8562: LD_STRING 2Kurin-06
8564: PPUSH
8565: CALL_OW 94
// SayRadio ( Grishko , 2Gri-03 ) ;
8569: LD_EXP 19
8573: PPUSH
8574: LD_STRING 2Gri-03
8576: PPUSH
8577: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-07 ) ;
8581: LD_EXP 18
8585: PPUSH
8586: LD_STRING 2Kurin-07
8588: PPUSH
8589: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-28 ) ;
8593: LD_EXP 3
8597: PPUSH
8598: LD_STRING 2Yak-28
8600: PPUSH
8601: CALL_OW 94
// Wait ( 0 0$03 ) ;
8605: LD_INT 105
8607: PPUSH
8608: CALL_OW 67
// SayRadio ( Kurin , 2Kurin-08 ) ;
8612: LD_EXP 18
8616: PPUSH
8617: LD_STRING 2Kurin-08
8619: PPUSH
8620: CALL_OW 94
// SayRadio ( Burlak , 2Burlak-01 ) ;
8624: LD_EXP 20
8628: PPUSH
8629: LD_STRING 2Burlak-01
8631: PPUSH
8632: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-09 ) ;
8636: LD_EXP 18
8640: PPUSH
8641: LD_STRING 2Kurin-09
8643: PPUSH
8644: CALL_OW 94
// SayEffect ( 2GunSound ) ;
8648: LD_STRING 2GunSound
8650: PPUSH
8651: CALL_OW 96
// SayRadio ( Morozov , 2Moro-10 ) ;
8655: LD_EXP 17
8659: PPUSH
8660: LD_STRING 2Moro-10
8662: PPUSH
8663: CALL_OW 94
// SayRadio ( Morozov , 2Moro-11 ) ;
8667: LD_EXP 17
8671: PPUSH
8672: LD_STRING 2Moro-11
8674: PPUSH
8675: CALL_OW 94
// SayRadio ( Morozov , 2Moro-12 ) ;
8679: LD_EXP 17
8683: PPUSH
8684: LD_STRING 2Moro-12
8686: PPUSH
8687: CALL_OW 94
// SayRadio ( Morozov , 2Moro-13 ) ;
8691: LD_EXP 17
8695: PPUSH
8696: LD_STRING 2Moro-13
8698: PPUSH
8699: CALL_OW 94
// SayRadio ( Morozov , 2Moro-14 ) ;
8703: LD_EXP 17
8707: PPUSH
8708: LD_STRING 2Moro-14
8710: PPUSH
8711: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-29 ) ;
8715: LD_EXP 3
8719: PPUSH
8720: LD_STRING 2Yak-29
8722: PPUSH
8723: CALL_OW 94
// end_of_the_mission = true ;
8727: LD_ADDR_EXP 57
8731: PUSH
8732: LD_INT 1
8734: ST_TO_ADDR
// InGameOff ;
8735: CALL_OW 9
// AddMedal ( PeopleConvoys , 1 ) ;
8739: LD_STRING PeopleConvoys
8741: PPUSH
8742: LD_INT 1
8744: PPUSH
8745: CALL_OW 101
// if gun_researched = true then
8749: LD_EXP 49
8753: PUSH
8754: LD_INT 1
8756: EQUAL
8757: IFFALSE 8771
// AddMedal ( GunMedal , 1 ) else
8759: LD_STRING GunMedal
8761: PPUSH
8762: LD_INT 1
8764: PPUSH
8765: CALL_OW 101
8769: GO 8782
// AddMedal ( GunMedal , - 1 ) ;
8771: LD_STRING GunMedal
8773: PPUSH
8774: LD_INT 1
8776: NEG
8777: PPUSH
8778: CALL_OW 101
// if gattling_researched = true and gun_researched = true and transport_builded = true and turrets_researched = true then
8782: LD_EXP 48
8786: PUSH
8787: LD_INT 1
8789: EQUAL
8790: PUSH
8791: LD_EXP 49
8795: PUSH
8796: LD_INT 1
8798: EQUAL
8799: AND
8800: PUSH
8801: LD_EXP 52
8805: PUSH
8806: LD_INT 1
8808: EQUAL
8809: AND
8810: PUSH
8811: LD_EXP 47
8815: PUSH
8816: LD_INT 1
8818: EQUAL
8819: AND
8820: IFFALSE 8834
// AddMedal ( Secondary , 1 ) else
8822: LD_STRING Secondary
8824: PPUSH
8825: LD_INT 1
8827: PPUSH
8828: CALL_OW 101
8832: GO 8845
// AddMedal ( Secondary , - 1 ) ;
8834: LD_STRING Secondary
8836: PPUSH
8837: LD_INT 1
8839: NEG
8840: PPUSH
8841: CALL_OW 101
// GiveMedals ( Medals ) ;
8845: LD_STRING Medals
8847: PPUSH
8848: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
8852: LD_INT 22
8854: PUSH
8855: LD_INT 3
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: LD_INT 23
8864: PUSH
8865: LD_INT 3
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 21
8874: PUSH
8875: LD_INT 1
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 69
8891: PPUSH
8892: CALL_OW 43
// SaveCharacters ( Yakotich , 02_Yakotich ) ;
8896: LD_EXP 3
8900: PPUSH
8901: LD_STRING 02_Yakotich
8903: PPUSH
8904: CALL_OW 38
// SaveCharacters ( Mietek , 02_Mietek ) ;
8908: LD_EXP 4
8912: PPUSH
8913: LD_STRING 02_Mietek
8915: PPUSH
8916: CALL_OW 38
// SaveCharacters ( Maksim , 02_Maksim ) ;
8920: LD_EXP 9
8924: PPUSH
8925: LD_STRING 02_Maksim
8927: PPUSH
8928: CALL_OW 38
// SaveCharacters ( Vasilij , 02_Vasilij ) ;
8932: LD_EXP 6
8936: PPUSH
8937: LD_STRING 02_Vasilij
8939: PPUSH
8940: CALL_OW 38
// SaveCharacters ( Michail , 02_Michail ) ;
8944: LD_EXP 7
8948: PPUSH
8949: LD_STRING 02_Michail
8951: PPUSH
8952: CALL_OW 38
// SaveCharacters ( Boris , 02_Boris ) ;
8956: LD_EXP 5
8960: PPUSH
8961: LD_STRING 02_Boris
8963: PPUSH
8964: CALL_OW 38
// SaveCharacters ( Constantin , 02_Constantin ) ;
8968: LD_EXP 8
8972: PPUSH
8973: LD_STRING 02_Constantin
8975: PPUSH
8976: CALL_OW 38
// SaveCharacters ( Fiodor , 02_Fiodor ) ;
8980: LD_EXP 10
8984: PPUSH
8985: LD_STRING 02_Fiodor
8987: PPUSH
8988: CALL_OW 38
// SaveCharacters ( Aleksiej , 02_Aleksiej ) ;
8992: LD_EXP 13
8996: PPUSH
8997: LD_STRING 02_Aleksiej
8999: PPUSH
9000: CALL_OW 38
// SaveCharacters ( Pavel , 02_Pavel ) ;
9004: LD_EXP 11
9008: PPUSH
9009: LD_STRING 02_Pavel
9011: PPUSH
9012: CALL_OW 38
// SaveCharacters ( Zakhar , 02_Zakhar ) ;
9016: LD_EXP 12
9020: PPUSH
9021: LD_STRING 02_Zakhar
9023: PPUSH
9024: CALL_OW 38
// SaveCharacters ( Aleksandr , 02_Aleksandr ) ;
9028: LD_EXP 14
9032: PPUSH
9033: LD_STRING 02_Aleksandr
9035: PPUSH
9036: CALL_OW 38
// SaveCharacters ( Stanislav , 02_Stanislav ) ;
9040: LD_EXP 16
9044: PPUSH
9045: LD_STRING 02_Stanislav
9047: PPUSH
9048: CALL_OW 38
// SaveCharacters ( Josif , 02_Josif ) ;
9052: LD_EXP 15
9056: PPUSH
9057: LD_STRING 02_Josif
9059: PPUSH
9060: CALL_OW 38
// YouWin ;
9064: CALL_OW 103
// end ;
9068: PPOPN 1
9070: END
